record `okhttp3.Headers` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.Headers.namesAndValues` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Headers` v2 @kind this, `okhttp3.Headers$Builder` v3 @kind object @name `builder`) @signature `Lokhttp3/Headers;.<init>:(Lokhttp3/Headers$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L198964.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19896a.  v0:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L19896e.  v1:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L198972.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L198978.  v1:= temp;
  #L19897a.  v1:= new `java.lang.String`[v1];
  #L19897e.  call temp:= `toArray`(v0, v1) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L198984.  v0:= temp @kind object;
  #L198986.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L19898a.  v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] := v0 @kind object;
  #L19898e.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Headers` v0 @kind this, `java.lang.String`[] v1 @kind object @name `namesAndValues`) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1989a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1989a6.  v0.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] := v1 @kind object;
  #L1989aa.  return @kind void;
}
procedure `java.lang.String` `get`(`java.lang.String`[] v2 @kind object @name `namesAndValues`, `java.lang.String` v3 @kind object @name `name`) @signature `Lokhttp3/Headers;.get:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1989bc.  v1:= length @variable v2;
  #L1989be.  v0:= v1 + -2;
  #L1989c2.  if v0 < 0 then goto L1989e6;
  #L1989c6.  v1:= v2[v0] @kind object;
  #L1989ca.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1989d0.  v1:= temp;
  #L1989d2.  if v1 == 0 then goto L1989e0;
  #L1989d6.  v1:= v0 + 1;
  #L1989da.  v1:= v2[v1] @kind object;
  #L1989de.  return v1 @kind object;
  #L1989e0.  v0:= v0 + -2;
  #L1989e4.  goto L1989c2;
  #L1989e6.  v1:= 0I;
  #L1989e8.  goto L1989de;
}
procedure `okhttp3.Headers` `of`(`java.util.Map` v9 @kind object) @signature `Lokhttp3/Headers;.of:(Ljava/util/Map;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1989fc.  v8:= 0I;
  #L1989fe.  v7:= -1I;
  #L198a00.  if v9 != 0 then goto L198a14;
  #L198a04.  v5:= new `java.lang.NullPointerException`;
  #L198a08.  v6:= "headers == null" @kind object;
  #L198a0c.  call `<init>`(v5, v6) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198a12.  throw v5;
  #L198a14.  call temp:= `size`(v9) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L198a1a.  v5:= temp;
  #L198a1c.  v5:= v5 * 2;
  #L198a20.  v3:= new `java.lang.String`[v5];
  #L198a24.  v1:= 0I;
  #L198a26.  call temp:= `entrySet`(v9) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L198a2c.  v5:= temp @kind object;
  #L198a2e.  call temp:= `iterator`(v5) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L198a34.  v6:= temp @kind object;
  #L198a36.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L198a3c.  v5:= temp;
  #L198a3e.  if v5 == 0 then goto L198b1a;
  #L198a42.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L198a48.  v0:= temp @kind object;
  #L198a4a.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L198a4e.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L198a54.  v5:= temp @kind object;
  #L198a56.  if v5 == 0 then goto L198a66;
  #L198a5a.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L198a60.  v5:= temp @kind object;
  #L198a62.  if v5 != 0 then goto L198a76;
  #L198a66.  v5:= new `java.lang.IllegalArgumentException`;
  #L198a6a.  v6:= "Headers cannot be null" @kind object;
  #L198a6e.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198a74.  throw v5;
  #L198a76.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L198a7c.  v5:= temp @kind object;
  #L198a7e.  v5:= (`java.lang.String`) v5 @kind object;
  #L198a82.  call temp:= `trim`(v5) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L198a88.  v2:= temp @kind object;
  #L198a8a.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L198a90.  v5:= temp @kind object;
  #L198a92.  v5:= (`java.lang.String`) v5 @kind object;
  #L198a96.  call temp:= `trim`(v5) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L198a9c.  v4:= temp @kind object;
  #L198a9e.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L198aa4.  v5:= temp;
  #L198aa6.  if v5 == 0 then goto L198ac2;
  #L198aaa.  call temp:= `indexOf`(v2, v8) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L198ab0.  v5:= temp;
  #L198ab2.  if v5 != v7 then goto L198ac2;
  #L198ab6.  call temp:= `indexOf`(v4, v8) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L198abc.  v5:= temp;
  #L198abe.  if v5 == v7 then goto L198b08;
  #L198ac2.  v5:= new `java.lang.IllegalArgumentException`;
  #L198ac6.  v6:= new `java.lang.StringBuilder`;
  #L198aca.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L198ad0.  v7:= "Unexpected header: " @kind object;
  #L198ad4.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198ada.  v6:= temp @kind object;
  #L198adc.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198ae2.  v6:= temp @kind object;
  #L198ae4.  v7:= ": " @kind object;
  #L198ae8.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198aee.  v6:= temp @kind object;
  #L198af0.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198af6.  v6:= temp @kind object;
  #L198af8.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L198afe.  v6:= temp @kind object;
  #L198b00.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198b06.  throw v5;
  #L198b08.  v3[v1]:= v2 @kind object;
  #L198b0c.  v5:= v1 + 1;
  #L198b10.  v3[v5]:= v4 @kind object;
  #L198b14.  v1:= v1 + 2;
  #L198b18.  goto L198a36;
  #L198b1a.  v5:= new `okhttp3.Headers`;
  #L198b1e.  call `<init>`(v5, v3) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L198b24.  return v5 @kind object;
}
procedure `okhttp3.Headers` `of`(`java.lang.String`[] v6 @kind object @name `namesAndValues`) @signature `Lokhttp3/Headers;.of:([Ljava/lang/String;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L198b38.  v5:= 0I;
  #L198b3a.  v4:= -1I;
  #L198b3c.  if v6 != 0 then goto L198b50;
  #L198b40.  v3:= new `java.lang.NullPointerException`;
  #L198b44.  v4:= "namesAndValues == null" @kind object;
  #L198b48.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198b4e.  throw v3;
  #L198b50.  v3:= length @variable v6;
  #L198b52.  v3:= v3 %% 2;
  #L198b56.  if v3 == 0 then goto L198b6a;
  #L198b5a.  v3:= new `java.lang.IllegalArgumentException`;
  #L198b5e.  v4:= "Expected alternating header names and values" @kind object;
  #L198b62.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198b68.  throw v3;
  #L198b6a.  call temp:= `clone`(v6) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L198b70.  v6:= temp @kind object;
  #L198b72.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L198b76.  v0:= 0I;
  #L198b78.  v3:= length @variable v6;
  #L198b7a.  if v0 >= v3 then goto L198bac;
  #L198b7e.  v3:= v6[v0] @kind object;
  #L198b82.  if v3 != 0 then goto L198b96;
  #L198b86.  v3:= new `java.lang.IllegalArgumentException`;
  #L198b8a.  v4:= "Headers cannot be null" @kind object;
  #L198b8e.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198b94.  throw v3;
  #L198b96.  v3:= v6[v0] @kind object;
  #L198b9a.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L198ba0.  v3:= temp @kind object;
  #L198ba2.  v6[v0]:= v3 @kind object;
  #L198ba6.  v0:= v0 + 1;
  #L198baa.  goto L198b78;
  #L198bac.  v0:= 0I;
  #L198bae.  v3:= length @variable v6;
  #L198bb0.  if v0 >= v3 then goto L198c30;
  #L198bb4.  v1:= v6[v0] @kind object;
  #L198bb8.  v3:= v0 + 1;
  #L198bbc.  v2:= v6[v3] @kind object;
  #L198bc0.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L198bc6.  v3:= temp;
  #L198bc8.  if v3 == 0 then goto L198be4;
  #L198bcc.  call temp:= `indexOf`(v1, v5) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L198bd2.  v3:= temp;
  #L198bd4.  if v3 != v4 then goto L198be4;
  #L198bd8.  call temp:= `indexOf`(v2, v5) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L198bde.  v3:= temp;
  #L198be0.  if v3 == v4 then goto L198c2a;
  #L198be4.  v3:= new `java.lang.IllegalArgumentException`;
  #L198be8.  v4:= new `java.lang.StringBuilder`;
  #L198bec.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L198bf2.  v5:= "Unexpected header: " @kind object;
  #L198bf6.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198bfc.  v4:= temp @kind object;
  #L198bfe.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198c04.  v4:= temp @kind object;
  #L198c06.  v5:= ": " @kind object;
  #L198c0a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198c10.  v4:= temp @kind object;
  #L198c12.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198c18.  v4:= temp @kind object;
  #L198c1a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L198c20.  v4:= temp @kind object;
  #L198c22.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198c28.  throw v3;
  #L198c2a.  v0:= v0 + 2;
  #L198c2e.  goto L198bae;
  #L198c30.  v3:= new `okhttp3.Headers`;
  #L198c34.  call `<init>`(v3, v6) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L198c3a.  return v3 @kind object;
}
procedure `long` `byteCount`(`okhttp3.Headers` v6 @kind this) @signature `Lokhttp3/Headers;.byteCount:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L198c4c.  v4:= v6.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L198c50.  v4:= length @variable v4;
  #L198c52.  v4:= v4 * 2;
  #L198c56.  v2:= (`long`) v4 @kind i2l;
  #L198c58.  v0:= 0I;
  #L198c5a.  v4:= v6.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L198c5e.  v1:= length @variable v4;
  #L198c60.  if v0 >= v1 then goto L198c7e;
  #L198c64.  v4:= v6.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L198c68.  v4:= v4[v0] @kind object;
  #L198c6c.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L198c72.  v4:= temp;
  #L198c74.  v4:= (`long`) v4 @kind i2l;
  #L198c76.  v2:= v2 + v4 @kind long;
  #L198c78.  v0:= v0 + 1;
  #L198c7c.  goto L198c60;
  #L198c7e.  return v2 @kind wide;
}
procedure `boolean` `equals`(`okhttp3.Headers` v2 @kind this, `java.lang.Object` v3 @kind object @name `other`) @signature `Lokhttp3/Headers;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L198c90.  v0:= instanceof @variable v3 @type ^`okhttp3.Headers` @kind boolean;
  #L198c94.  if v0 == 0 then goto L198cb4;
  #L198c98.  v3:= (`okhttp3.Headers`) v3 @kind object;
  #L198c9c.  v0:= v3.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L198ca0.  v1:= v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L198ca4.  call temp:= `equals`(v0, v1) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L198caa.  v0:= temp;
  #L198cac.  if v0 == 0 then goto L198cb4;
  #L198cb0.  v0:= 1I;
  #L198cb2.  return v0;
  #L198cb4.  v0:= 0I;
  #L198cb6.  goto L198cb2;
}
procedure `java.lang.String` `get`(`okhttp3.Headers` v1 @kind this, `java.lang.String` v2 @kind object @name `name`) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L198cc8.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L198ccc.  call temp:= `get`(v0, v2) @signature `Lokhttp3/Headers;.get:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L198cd2.  v0:= temp @kind object;
  #L198cd4.  return v0 @kind object;
}
procedure `java.util.Date` `getDate`(`okhttp3.Headers` v2 @kind this, `java.lang.String` v3 @kind object @name `name`) @signature `Lokhttp3/Headers;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L198ce8.  call temp:= `get`(v2, v3) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L198cee.  v0:= temp @kind object;
  #L198cf0.  if v0 == 0 then goto L198cfe;
  #L198cf4.  call temp:= `parse`(v0) @signature `Lokhttp3/internal/http/HttpDate;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L198cfa.  v1:= temp @kind object;
  #L198cfc.  return v1 @kind object;
  #L198cfe.  v1:= 0I;
  #L198d00.  goto L198cfc;
}
procedure `int` `hashCode`(`okhttp3.Headers` v1 @kind this) @signature `Lokhttp3/Headers;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L198d14.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L198d18.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L198d1e.  v0:= temp;
  #L198d20.  return v0;
}
procedure `java.lang.String` `name`(`okhttp3.Headers` v2 @kind this, `int` v3 @name `index`) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L198d34.  v0:= v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L198d38.  v1:= v3 * 2;
  #L198d3c.  v0:= v0[v1] @kind object;
  #L198d40.  return v0 @kind object;
}
procedure `java.util.Set` `names`(`okhttp3.Headers` v4 @kind this) @signature `Lokhttp3/Headers;.names:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L198d54.  v1:= new `java.util.TreeSet`;
  #L198d58.  v3:= `@@java.lang.String.CASE_INSENSITIVE_ORDER` @type ^`java.util.Comparator` @kind object;
  #L198d5c.  call `<init>`(v1, v3) @signature `Ljava/util/TreeSet;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L198d62.  v0:= 0I;
  #L198d64.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L198d6a.  v2:= temp;
  #L198d6c.  if v0 >= v2 then goto L198d84;
  #L198d70.  call temp:= `name`(v4, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L198d76.  v3:= temp @kind object;
  #L198d78.  call temp:= `add`(v1, v3) @signature `Ljava/util/TreeSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L198d7e.  v0:= v0 + 1;
  #L198d82.  goto L198d6c;
  #L198d84.  call temp:= `unmodifiableSet`(v1) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L198d8a.  v3:= temp @kind object;
  #L198d8c.  return v3 @kind object;
}
procedure `okhttp3.Headers$Builder` `newBuilder`(`okhttp3.Headers` v3 @kind this) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L198da0.  v0:= new `okhttp3.Headers$Builder`;
  #L198da4.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L198daa.  v1:= v0.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L198dae.  v2:= v3.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L198db2.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/Collections;.addAll:(Ljava/util/Collection;[Ljava/lang/Object;)Z` @kind static;
  #L198db8.  return v0 @kind object;
}
procedure `int` `size`(`okhttp3.Headers` v1 @kind this) @signature `Lokhttp3/Headers;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L198dcc.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L198dd0.  v0:= length @variable v0;
  #L198dd2.  v0:= v0 / 2;
  #L198dd6.  return v0;
}
procedure `java.util.Map` `toMultimap`(`okhttp3.Headers` v7 @kind this) @signature `Lokhttp3/Headers;.toMultimap:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L198de8.  v2:= new `java.util.TreeMap`;
  #L198dec.  v5:= `@@java.lang.String.CASE_INSENSITIVE_ORDER` @type ^`java.util.Comparator` @kind object;
  #L198df0.  call `<init>`(v2, v5) @signature `Ljava/util/TreeMap;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L198df6.  v0:= 0I;
  #L198df8.  call temp:= `size`(v7) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L198dfe.  v3:= temp;
  #L198e00.  if v0 >= v3 then goto L198e4e;
  #L198e04.  call temp:= `name`(v7, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L198e0a.  v5:= temp @kind object;
  #L198e0c.  v6:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L198e10.  call temp:= `toLowerCase`(v5, v6) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L198e16.  v1:= temp @kind object;
  #L198e18.  call temp:= `get`(v2, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L198e1e.  v4:= temp @kind object;
  #L198e20.  v4:= (`java.util.List`) v4 @kind object;
  #L198e24.  if v4 != 0 then goto L198e3a;
  #L198e28.  v4:= new `java.util.ArrayList`;
  #L198e2c.  v5:= 2I;
  #L198e2e.  call `<init>`(v4, v5) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L198e34.  call temp:= `put`(v2, v1, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L198e3a.  call temp:= `value`(v7, v0) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L198e40.  v5:= temp @kind object;
  #L198e42.  call temp:= `add`(v4, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L198e48.  v0:= v0 + 1;
  #L198e4c.  goto L198e00;
  #L198e4e.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Headers` v5 @kind this) @signature `Lokhttp3/Headers;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L198e60.  v1:= new `java.lang.StringBuilder`;
  #L198e64.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L198e6a.  v0:= 0I;
  #L198e6c.  call temp:= `size`(v5) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L198e72.  v2:= temp;
  #L198e74.  if v0 >= v2 then goto L198eb4;
  #L198e78.  call temp:= `name`(v5, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L198e7e.  v3:= temp @kind object;
  #L198e80.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198e86.  v3:= temp @kind object;
  #L198e88.  v4:= ": " @kind object;
  #L198e8c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198e92.  v3:= temp @kind object;
  #L198e94.  call temp:= `value`(v5, v0) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L198e9a.  v4:= temp @kind object;
  #L198e9c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198ea2.  v3:= temp @kind object;
  #L198ea4.  v4:= "\n" @kind object;
  #L198ea8.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198eae.  v0:= v0 + 1;
  #L198eb2.  goto L198e74;
  #L198eb4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L198eba.  v3:= temp @kind object;
  #L198ebc.  return v3 @kind object;
}
procedure `java.lang.String` `value`(`okhttp3.Headers` v2 @kind this, `int` v3 @name `index`) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L198ed0.  v0:= v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L198ed4.  v1:= v3 * 2;
  #L198ed8.  v1:= v1 + 1;
  #L198edc.  v0:= v0[v1] @kind object;
  #L198ee0.  return v0 @kind object;
}
procedure `java.util.List` `values`(`okhttp3.Headers` v4 @kind this, `java.lang.String` v5 @kind object @name `name`) @signature `Lokhttp3/Headers;.values:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L198ef4.  v1:= 0I;
  #L198ef6.  v0:= 0I;
  #L198ef8.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L198efe.  v2:= temp;
  #L198f00.  if v0 >= v2 then goto L198f3c;
  #L198f04.  call temp:= `name`(v4, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L198f0a.  v3:= temp @kind object;
  #L198f0c.  call temp:= `equalsIgnoreCase`(v5, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L198f12.  v3:= temp;
  #L198f14.  if v3 == 0 then goto L198f36;
  #L198f18.  if v1 != 0 then goto L198f28;
  #L198f1c.  v1:= new `java.util.ArrayList`;
  #L198f20.  v3:= 2I;
  #L198f22.  call `<init>`(v1, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L198f28.  call temp:= `value`(v4, v0) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L198f2e.  v3:= temp @kind object;
  #L198f30.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L198f36.  v0:= v0 + 1;
  #L198f3a.  goto L198f00;
  #L198f3c.  if v1 == 0 then goto L198f4a;
  #L198f40.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L198f46.  v3:= temp @kind object;
  #L198f48.  return v3 @kind object;
  #L198f4a.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L198f50.  v3:= temp @kind object;
  #L198f52.  goto L198f48;
}
