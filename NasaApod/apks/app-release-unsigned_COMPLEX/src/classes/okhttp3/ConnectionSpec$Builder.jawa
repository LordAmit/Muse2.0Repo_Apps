record `okhttp3.ConnectionSpec$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.cipherSuites` @AccessFlag ;
  `boolean` `okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @AccessFlag ;
  `boolean` `okhttp3.ConnectionSpec$Builder.tls` @AccessFlag ;
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.tlsVersions` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `okhttp3.ConnectionSpec` v2 @kind object @name `connectionSpec`) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L196004.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19600a.  v0:= v2.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L19600e.  v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v0 @kind boolean;
  #L196012.  v0:= v2.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L196016.  v1.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L19601a.  v0:= v2.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L19601e.  v1.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L196022.  v0:= v2.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L196026.  v1.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v0 @kind boolean;
  #L19602a.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `boolean` v1 @name `tls`) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L19603c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L196042.  v0.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v1 @kind boolean;
  #L196046.  return @kind void;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledCipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledCipherSuites:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L196058.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L19605c.  if v0 != 0 then goto L196070;
  #L196060.  v0:= new `java.lang.IllegalStateException`;
  #L196064.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L196068.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19606e.  throw v0;
  #L196070.  v0:= 0I;
  #L196072.  v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L196076.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledTlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledTlsVersions:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L196088.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L19608c.  if v0 != 0 then goto L1960a0;
  #L196090.  v0:= new `java.lang.IllegalStateException`;
  #L196094.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L196098.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19609e.  throw v0;
  #L1960a0.  v0:= 0I;
  #L1960a2.  v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L1960a6.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec` `build`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1960b8.  v0:= new `okhttp3.ConnectionSpec`;
  #L1960bc.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @kind direct;
  #L1960c2.  return v0 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `java.lang.String`[] v3 @kind object @name `cipherSuites`) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1960d4.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L1960d8.  if v0 != 0 then goto L1960ec;
  #L1960dc.  v0:= new `java.lang.IllegalStateException`;
  #L1960e0.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L1960e4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1960ea.  throw v0;
  #L1960ec.  v0:= length @variable v3;
  #L1960ee.  if v0 != 0 then goto L196102;
  #L1960f2.  v0:= new `java.lang.IllegalArgumentException`;
  #L1960f6.  v1:= "At least one cipher suite is required" @kind object;
  #L1960fa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L196100.  throw v0;
  #L196102.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L196108.  v0:= temp @kind object;
  #L19610a.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L19610e.  v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L196112.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v4 @kind this, `okhttp3.CipherSuite`[] v5 @kind object @name `cipherSuites`) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L196124.  v2:= v4.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L196128.  if v2 != 0 then goto L19613c;
  #L19612c.  v2:= new `java.lang.IllegalStateException`;
  #L196130.  v3:= "no cipher suites for cleartext connections" @kind object;
  #L196134.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19613a.  throw v2;
  #L19613c.  v2:= length @variable v5;
  #L19613e.  v1:= new `java.lang.String`[v2];
  #L196142.  v0:= 0I;
  #L196144.  v2:= length @variable v5;
  #L196146.  if v0 >= v2 then goto L19615c;
  #L19614a.  v2:= v5[v0] @kind object;
  #L19614e.  v2:= v2.`okhttp3.CipherSuite.javaName` @type ^`java.lang.String` @kind object;
  #L196152.  v1[v0]:= v2 @kind object;
  #L196156.  v0:= v0 + 1;
  #L19615a.  goto L196144;
  #L19615c.  call temp:= `cipherSuites`(v4, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L196162.  v2:= temp @kind object;
  #L196164.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `supportsTlsExtensions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `boolean` v3 @name `supportsTlsExtensions`) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L196178.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L19617c.  if v0 != 0 then goto L196190;
  #L196180.  v0:= new `java.lang.IllegalStateException`;
  #L196184.  v1:= "no TLS extensions for cleartext connections" @kind object;
  #L196188.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19618e.  throw v0;
  #L196190.  v2.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v3 @kind boolean;
  #L196194.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `java.lang.String`[] v3 @kind object @name `tlsVersions`) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1961a8.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L1961ac.  if v0 != 0 then goto L1961c0;
  #L1961b0.  v0:= new `java.lang.IllegalStateException`;
  #L1961b4.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L1961b8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1961be.  throw v0;
  #L1961c0.  v0:= length @variable v3;
  #L1961c2.  if v0 != 0 then goto L1961d6;
  #L1961c6.  v0:= new `java.lang.IllegalArgumentException`;
  #L1961ca.  v1:= "At least one TLS version is required" @kind object;
  #L1961ce.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1961d4.  throw v0;
  #L1961d6.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1961dc.  v0:= temp @kind object;
  #L1961de.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L1961e2.  v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L1961e6.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v4 @kind this, `okhttp3.TlsVersion`[] v5 @kind object @name `tlsVersions`) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1961f8.  v2:= v4.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L1961fc.  if v2 != 0 then goto L196210;
  #L196200.  v2:= new `java.lang.IllegalStateException`;
  #L196204.  v3:= "no TLS versions for cleartext connections" @kind object;
  #L196208.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19620e.  throw v2;
  #L196210.  v2:= length @variable v5;
  #L196212.  v1:= new `java.lang.String`[v2];
  #L196216.  v0:= 0I;
  #L196218.  v2:= length @variable v5;
  #L19621a.  if v0 >= v2 then goto L196230;
  #L19621e.  v2:= v5[v0] @kind object;
  #L196222.  v2:= v2.`okhttp3.TlsVersion.javaName` @type ^`java.lang.String` @kind object;
  #L196226.  v1[v0]:= v2 @kind object;
  #L19622a.  v0:= v0 + 1;
  #L19622e.  goto L196218;
  #L196230.  call temp:= `tlsVersions`(v4, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L196236.  v2:= temp @kind object;
  #L196238.  return v2 @kind object;
}
