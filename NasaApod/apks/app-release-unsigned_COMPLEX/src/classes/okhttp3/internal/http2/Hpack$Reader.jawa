record `okhttp3.internal.http2.Hpack$Reader` @kind class @AccessFlag FINAL {
  `okhttp3.internal.http2.Header`[] `okhttp3.internal.http2.Hpack$Reader.dynamicTable` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Reader.headerCount` @AccessFlag ;
  `java.util.List` `okhttp3.internal.http2.Hpack$Reader.headerList` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Reader.headerTableSizeSetting` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @AccessFlag ;
  `okio.BufferedSource` `okhttp3.internal.http2.Hpack$Reader.source` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this, `int` v3 @name `headerTableSizeSetting`, `int` v4 @name `maxDynamicTableByteCount`, `okio.Source` v5 @kind object @name `source`) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(IILokio/Source;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1a3e40.  v1:= 0I;
  #L1a3e42.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a3e48.  v0:= new `java.util.ArrayList`;
  #L1a3e4c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1a3e52.  v2.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` := v0 @kind object;
  #L1a3e56.  v0:= 8I;
  #L1a3e5a.  v0:= new `okhttp3.internal.http2.Header`[v0];
  #L1a3e5e.  v2.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v0 @kind object;
  #L1a3e62.  v0:= v2.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a3e66.  v0:= length @variable v0;
  #L1a3e68.  v0:= v0 + -1;
  #L1a3e6c.  v2.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int` := v0;
  #L1a3e70.  v2.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int` := v1;
  #L1a3e74.  v2.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int` := v1;
  #L1a3e78.  v2.`okhttp3.internal.http2.Hpack$Reader.headerTableSizeSetting` @type ^`int` := v3;
  #L1a3e7c.  v2.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int` := v4;
  #L1a3e80.  call temp:= `buffer`(v5) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L1a3e86.  v0:= temp @kind object;
  #L1a3e88.  v2.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` := v0 @kind object;
  #L1a3e8c.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Reader` v0 @kind this, `int` v1 @name `headerTableSizeSetting`, `okio.Source` v2 @kind object @name `source`) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(ILokio/Source;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1a3ea0.  call `<init>`(v0, v1, v1, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(IILokio/Source;)V` @kind direct;
  #L1a3ea6.  return @kind void;
}
procedure `void` `adjustDynamicTableByteCount`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.adjustDynamicTableByteCount:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a3eb8.  v0:= v2.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L1a3ebc.  v1:= v2.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int`;
  #L1a3ec0.  if v0 >= v1 then goto L1a3ed2;
  #L1a3ec4.  v0:= v2.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L1a3ec8.  if v0 != 0 then goto L1a3ed4;
  #L1a3ecc.  call `clearDynamicTable`(v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.clearDynamicTable:()V` @kind direct;
  #L1a3ed2.  return @kind void;
  #L1a3ed4.  v0:= v2.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int`;
  #L1a3ed8.  v1:= v2.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L1a3edc.  v0:= v0 - v1 @kind int;
  #L1a3ede.  call temp:= `evictToRecoverBytes`(v2, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.evictToRecoverBytes:(I)I` @kind direct;
  #L1a3ee4.  goto L1a3ed2;
}
procedure `void` `clearDynamicTable`(`okhttp3.internal.http2.Hpack$Reader` v3 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.clearDynamicTable:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1a3ef8.  v2:= 0I;
  #L1a3efa.  v0:= v3.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a3efe.  v1:= 0I;
  #L1a3f00.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L1a3f06.  v0:= v3.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a3f0a.  v0:= length @variable v0;
  #L1a3f0c.  v0:= v0 + -1;
  #L1a3f10.  v3.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int` := v0;
  #L1a3f14.  v3.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int` := v2;
  #L1a3f18.  v3.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int` := v2;
  #L1a3f1c.  return @kind void;
}
procedure `int` `dynamicTableIndex`(`okhttp3.internal.http2.Hpack$Reader` v1 @kind this, `int` v2 @name `index`) @signature `Lokhttp3/internal/http2/Hpack$Reader;.dynamicTableIndex:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1a3f30.  v0:= v1.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int`;
  #L1a3f34.  v0:= v0 + 1;
  #L1a3f38.  v0:= v0 + v2 @kind int;
  #L1a3f3a.  return v0;
}
procedure `int` `evictToRecoverBytes`(`okhttp3.internal.http2.Hpack$Reader` v7 @kind this, `int` v8 @name `bytesToRecover`) @signature `Lokhttp3/internal/http2/Hpack$Reader;.evictToRecoverBytes:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a3f4c.  v0:= 0I;
  #L1a3f4e.  if v8 <= 0 then goto L1a3fd0;
  #L1a3f52.  v2:= v7.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a3f56.  v2:= length @variable v2;
  #L1a3f58.  v1:= v2 + -1;
  #L1a3f5c.  v2:= v7.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int`;
  #L1a3f60.  if v1 < v2 then goto L1a3fa2;
  #L1a3f64.  if v8 <= 0 then goto L1a3fa2;
  #L1a3f68.  v2:= v7.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a3f6c.  v2:= v2[v1] @kind object;
  #L1a3f70.  v2:= v2.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a3f74.  v8:= v8 - v2 @kind int;
  #L1a3f76.  v2:= v7.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int`;
  #L1a3f7a.  v3:= v7.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a3f7e.  v3:= v3[v1] @kind object;
  #L1a3f82.  v3:= v3.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a3f86.  v2:= v2 - v3 @kind int;
  #L1a3f88.  v7.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int` := v2;
  #L1a3f8c.  v2:= v7.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int`;
  #L1a3f90.  v2:= v2 + -1;
  #L1a3f94.  v7.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int` := v2;
  #L1a3f98.  v0:= v0 + 1;
  #L1a3f9c.  v1:= v1 + -1;
  #L1a3fa0.  goto L1a3f5c;
  #L1a3fa2.  v2:= v7.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a3fa6.  v3:= v7.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int`;
  #L1a3faa.  v3:= v3 + 1;
  #L1a3fae.  v4:= v7.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a3fb2.  v5:= v7.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int`;
  #L1a3fb6.  v5:= v5 + 1;
  #L1a3fba.  v5:= v5 + v0 @kind int;
  #L1a3fbc.  v6:= v7.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int`;
  #L1a3fc0.  call `arraycopy`(v2, v3, v4, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1a3fc6.  v2:= v7.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int`;
  #L1a3fca.  v2:= v2 + v0 @kind int;
  #L1a3fcc.  v7.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int` := v2;
  #L1a3fd0.  return v0;
}
procedure `okio.ByteString` `getName`(`okhttp3.internal.http2.Hpack$Reader` v4 @kind this, `int` v5 @name `index`) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getName:(I)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a3fe4.  call temp:= `isStaticHeader`(v4, v5) @signature `Lokhttp3/internal/http2/Hpack$Reader;.isStaticHeader:(I)Z` @kind direct;
  #L1a3fea.  v1:= temp;
  #L1a3fec.  if v1 == 0 then goto L1a3ffe;
  #L1a3ff0.  v1:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a3ff4.  v1:= v1[v5] @kind object;
  #L1a3ff8.  v1:= v1.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L1a3ffc.  return v1 @kind object;
  #L1a3ffe.  v1:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4002.  v1:= length @variable v1;
  #L1a4004.  v1:= v5 - v1 @kind int;
  #L1a4008.  call temp:= `dynamicTableIndex`(v4, v1) @signature `Lokhttp3/internal/http2/Hpack$Reader;.dynamicTableIndex:(I)I` @kind direct;
  #L1a400e.  v0:= temp;
  #L1a4010.  if v0 < 0 then goto L1a401e;
  #L1a4014.  v1:= v4.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4018.  v1:= length @variable v1;
  #L1a401a.  if v0 < v1 then goto L1a4054;
  #L1a401e.  v1:= new `java.io.IOException`;
  #L1a4022.  v2:= new `java.lang.StringBuilder`;
  #L1a4026.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1a402c.  v3:= "Header index too large " @kind object;
  #L1a4030.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a4036.  v2:= temp @kind object;
  #L1a4038.  v3:= v5 + 1;
  #L1a403c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a4042.  v2:= temp @kind object;
  #L1a4044.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a404a.  v2:= temp @kind object;
  #L1a404c.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a4052.  throw v1;
  #L1a4054.  v1:= v4.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4058.  v1:= v1[v0] @kind object;
  #L1a405c.  v1:= v1.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L1a4060.  goto L1a3ffc;
}
procedure `void` `insertIntoDynamicTable`(`okhttp3.internal.http2.Hpack$Reader` v8 @kind this, `int` v9 @name `index`, `okhttp3.internal.http2.Header` v10 @kind object @name `entry`) @signature `Lokhttp3/internal/http2/Hpack$Reader;.insertIntoDynamicTable:(ILokhttp3/internal/http2/Header;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a4074.  v6:= -1I;
  #L1a4076.  v4:= v8.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L1a407a.  call temp:= `add`(v4, v10) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1a4080.  v1:= v10.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a4084.  if v9 == v6 then goto L1a409e;
  #L1a4088.  v4:= v8.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a408c.  call temp:= `dynamicTableIndex`(v8, v9) @signature `Lokhttp3/internal/http2/Hpack$Reader;.dynamicTableIndex:(I)I` @kind direct;
  #L1a4092.  v5:= temp;
  #L1a4094.  v4:= v4[v5] @kind object;
  #L1a4098.  v4:= v4.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a409c.  v1:= v1 - v4 @kind int;
  #L1a409e.  v4:= v8.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L1a40a2.  if v1 <= v4 then goto L1a40ae;
  #L1a40a6.  call `clearDynamicTable`(v8) @signature `Lokhttp3/internal/http2/Hpack$Reader;.clearDynamicTable:()V` @kind direct;
  #L1a40ac.  return @kind void;
  #L1a40ae.  v4:= v8.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int`;
  #L1a40b2.  v4:= v4 + v1 @kind int;
  #L1a40b4.  v5:= v8.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L1a40b8.  v0:= v4 - v5 @kind int;
  #L1a40bc.  call temp:= `evictToRecoverBytes`(v8, v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.evictToRecoverBytes:(I)I` @kind direct;
  #L1a40c2.  v3:= temp;
  #L1a40c4.  if v9 != v6 then goto L1a413e;
  #L1a40c8.  v4:= v8.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int`;
  #L1a40cc.  v4:= v4 + 1;
  #L1a40d0.  v5:= v8.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a40d4.  v5:= length @variable v5;
  #L1a40d6.  if v4 <= v5 then goto L1a4112;
  #L1a40da.  v4:= v8.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a40de.  v4:= length @variable v4;
  #L1a40e0.  v4:= v4 * 2;
  #L1a40e4.  v2:= new `okhttp3.internal.http2.Header`[v4];
  #L1a40e8.  v4:= v8.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a40ec.  v5:= 0I;
  #L1a40ee.  v6:= v8.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a40f2.  v6:= length @variable v6;
  #L1a40f4.  v7:= v8.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a40f8.  v7:= length @variable v7;
  #L1a40fa.  call `arraycopy`(v4, v5, v2, v6, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1a4100.  v4:= v8.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4104.  v4:= length @variable v4;
  #L1a4106.  v4:= v4 + -1;
  #L1a410a.  v8.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int` := v4;
  #L1a410e.  v8.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v2 @kind object;
  #L1a4112.  v9:= v8.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int`;
  #L1a4116.  v4:= v9 + -1;
  #L1a411a.  v8.`okhttp3.internal.http2.Hpack$Reader.nextHeaderIndex` @type ^`int` := v4;
  #L1a411e.  v4:= v8.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4122.  v4[v9]:= v10 @kind object;
  #L1a4126.  v4:= v8.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int`;
  #L1a412a.  v4:= v4 + 1;
  #L1a412e.  v8.`okhttp3.internal.http2.Hpack$Reader.headerCount` @type ^`int` := v4;
  #L1a4132.  v4:= v8.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int`;
  #L1a4136.  v4:= v4 + v1 @kind int;
  #L1a4138.  v8.`okhttp3.internal.http2.Hpack$Reader.dynamicTableByteCount` @type ^`int` := v4;
  #L1a413c.  goto L1a40ac;
  #L1a413e.  call temp:= `dynamicTableIndex`(v8, v9) @signature `Lokhttp3/internal/http2/Hpack$Reader;.dynamicTableIndex:(I)I` @kind direct;
  #L1a4144.  v4:= temp;
  #L1a4146.  v4:= v4 + v3 @kind int;
  #L1a4148.  v9:= v9 + v4 @kind int;
  #L1a414a.  v4:= v8.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a414e.  v4[v9]:= v10 @kind object;
  #L1a4152.  goto L1a4132;
}
procedure `boolean` `isStaticHeader`(`okhttp3.internal.http2.Hpack$Reader` v1 @kind this, `int` v2 @name `index`) @signature `Lokhttp3/internal/http2/Hpack$Reader;.isStaticHeader:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1a4164.  if v2 < 0 then goto L1a417a;
  #L1a4168.  v0:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a416c.  v0:= length @variable v0;
  #L1a416e.  v0:= v0 + -1;
  #L1a4172.  if v2 > v0 then goto L1a417a;
  #L1a4176.  v0:= 1I;
  #L1a4178.  return v0;
  #L1a417a.  v0:= 0I;
  #L1a417c.  goto L1a4178;
}
procedure `int` `readByte`(`okhttp3.internal.http2.Hpack$Reader` v1 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByte:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1a4190.  v0:= v1.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a4194.  call temp:= `readByte`(v0) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a419a.  v0:= temp;
  #L1a419c.  v0:= v0 ^& 255;
  #L1a41a0.  return v0;
}
procedure `void` `readIndexedHeader`(`okhttp3.internal.http2.Hpack$Reader` v5 @kind this, `int` v6 @name `index`) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readIndexedHeader:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a41b4.  call temp:= `isStaticHeader`(v5, v6) @signature `Lokhttp3/internal/http2/Hpack$Reader;.isStaticHeader:(I)Z` @kind direct;
  #L1a41ba.  v2:= temp;
  #L1a41bc.  if v2 == 0 then goto L1a41d4;
  #L1a41c0.  v2:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a41c4.  v1:= v2[v6] @kind object;
  #L1a41c8.  v2:= v5.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L1a41cc.  call temp:= `add`(v2, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1a41d2.  return @kind void;
  #L1a41d4.  v2:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a41d8.  v2:= length @variable v2;
  #L1a41da.  v2:= v6 - v2 @kind int;
  #L1a41de.  call temp:= `dynamicTableIndex`(v5, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.dynamicTableIndex:(I)I` @kind direct;
  #L1a41e4.  v0:= temp;
  #L1a41e6.  if v0 < 0 then goto L1a41f4;
  #L1a41ea.  v2:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a41ee.  v2:= length @variable v2;
  #L1a41f0.  if v0 < v2 then goto L1a422a;
  #L1a41f4.  v2:= new `java.io.IOException`;
  #L1a41f8.  v3:= new `java.lang.StringBuilder`;
  #L1a41fc.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1a4202.  v4:= "Header index too large " @kind object;
  #L1a4206.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a420c.  v3:= temp @kind object;
  #L1a420e.  v4:= v6 + 1;
  #L1a4212.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a4218.  v3:= temp @kind object;
  #L1a421a.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a4220.  v3:= temp @kind object;
  #L1a4222.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a4228.  throw v2;
  #L1a422a.  v2:= v5.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L1a422e.  v3:= v5.`okhttp3.internal.http2.Hpack$Reader.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4232.  v3:= v3[v0] @kind object;
  #L1a4236.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1a423c.  goto L1a41d2;
}
procedure `void` `readLiteralHeaderWithIncrementalIndexingIndexedName`(`okhttp3.internal.http2.Hpack$Reader` v4 @kind this, `int` v5 @name `nameIndex`) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithIncrementalIndexingIndexedName:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a4250.  call temp:= `getName`(v4, v5) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getName:(I)Lokio/ByteString;` @kind direct;
  #L1a4256.  v0:= temp @kind object;
  #L1a4258.  call temp:= `readByteString`(v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1a425e.  v1:= temp @kind object;
  #L1a4260.  v2:= -1I;
  #L1a4262.  v3:= new `okhttp3.internal.http2.Header`;
  #L1a4266.  call `<init>`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L1a426c.  call `insertIntoDynamicTable`(v4, v2, v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.insertIntoDynamicTable:(ILokhttp3/internal/http2/Header;)V` @kind direct;
  #L1a4272.  return @kind void;
}
procedure `void` `readLiteralHeaderWithIncrementalIndexingNewName`(`okhttp3.internal.http2.Hpack$Reader` v4 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithIncrementalIndexingNewName:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a4284.  call temp:= `readByteString`(v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1a428a.  v2:= temp @kind object;
  #L1a428c.  call temp:= `checkLowercase`(v2) @signature `Lokhttp3/internal/http2/Hpack;.checkLowercase:(Lokio/ByteString;)Lokio/ByteString;` @kind static;
  #L1a4292.  v0:= temp @kind object;
  #L1a4294.  call temp:= `readByteString`(v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1a429a.  v1:= temp @kind object;
  #L1a429c.  v2:= -1I;
  #L1a429e.  v3:= new `okhttp3.internal.http2.Header`;
  #L1a42a2.  call `<init>`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L1a42a8.  call `insertIntoDynamicTable`(v4, v2, v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.insertIntoDynamicTable:(ILokhttp3/internal/http2/Header;)V` @kind direct;
  #L1a42ae.  return @kind void;
}
procedure `void` `readLiteralHeaderWithoutIndexingIndexedName`(`okhttp3.internal.http2.Hpack$Reader` v4 @kind this, `int` v5 @name `index`) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithoutIndexingIndexedName:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a42c0.  call temp:= `getName`(v4, v5) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getName:(I)Lokio/ByteString;` @kind direct;
  #L1a42c6.  v0:= temp @kind object;
  #L1a42c8.  call temp:= `readByteString`(v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1a42ce.  v1:= temp @kind object;
  #L1a42d0.  v2:= v4.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L1a42d4.  v3:= new `okhttp3.internal.http2.Header`;
  #L1a42d8.  call `<init>`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L1a42de.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1a42e4.  return @kind void;
}
procedure `void` `readLiteralHeaderWithoutIndexingNewName`(`okhttp3.internal.http2.Hpack$Reader` v4 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithoutIndexingNewName:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a42f8.  call temp:= `readByteString`(v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1a42fe.  v2:= temp @kind object;
  #L1a4300.  call temp:= `checkLowercase`(v2) @signature `Lokhttp3/internal/http2/Hpack;.checkLowercase:(Lokio/ByteString;)Lokio/ByteString;` @kind static;
  #L1a4306.  v0:= temp @kind object;
  #L1a4308.  call temp:= `readByteString`(v4) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1a430e.  v1:= temp @kind object;
  #L1a4310.  v2:= v4.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L1a4314.  v3:= new `okhttp3.internal.http2.Header`;
  #L1a4318.  call `<init>`(v3, v0, v1) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Lokio/ByteString;)V` @kind direct;
  #L1a431e.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1a4324.  return @kind void;
}
procedure `java.util.List` `getAndResetHeaderList`(`okhttp3.internal.http2.Hpack$Reader` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getAndResetHeaderList:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a4338.  v0:= new `java.util.ArrayList`;
  #L1a433c.  v1:= v2.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L1a4340.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L1a4346.  v1:= v2.`okhttp3.internal.http2.Hpack$Reader.headerList` @type ^`java.util.List` @kind object;
  #L1a434a.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L1a4350.  return v0 @kind object;
}
procedure `int` `maxDynamicTableByteCount`(`okhttp3.internal.http2.Hpack$Reader` v1 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.maxDynamicTableByteCount:()I` @AccessFlag  {
    temp;
    v0;

  #L1a4364.  v0:= v1.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L1a4368.  return v0;
}
procedure `okio.ByteString` `readByteString`(`okhttp3.internal.http2.Hpack$Reader` v8 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByteString:()Lokio/ByteString;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a437c.  call temp:= `readByte`(v8) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByte:()I` @kind direct;
  #L1a4382.  v0:= temp;
  #L1a4384.  v3:= v0 ^& 128;
  #L1a4388.  v4:= 128I;
  #L1a438c.  if v3 != v4 then goto L1a43ca;
  #L1a4390.  v1:= 1I;
  #L1a4392.  v3:= 127I;
  #L1a4396.  call temp:= `readInt`(v8, v0, v3) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @kind virtual;
  #L1a439c.  v2:= temp;
  #L1a439e.  if v1 == 0 then goto L1a43ce;
  #L1a43a2.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L1a43a8.  v3:= temp @kind object;
  #L1a43aa.  v4:= v8.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a43ae.  v6:= (`long`) v2 @kind i2l;
  #L1a43b0.  call temp:= `readByteArray`(v4, v6) @signature `Lokio/BufferedSource;.readByteArray:(J)[B` @kind interface;
  #L1a43b6.  v4:= temp @kind object;
  #L1a43b8.  call temp:= `decode`(v3, v4) @signature `Lokhttp3/internal/http2/Huffman;.decode:([B)[B` @kind virtual;
  #L1a43be.  v3:= temp @kind object;
  #L1a43c0.  call temp:= `of`(v3) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L1a43c6.  v3:= temp @kind object;
  #L1a43c8.  return v3 @kind object;
  #L1a43ca.  v1:= 0I;
  #L1a43cc.  goto L1a4392;
  #L1a43ce.  v3:= v8.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a43d2.  v4:= (`long`) v2 @kind i2l;
  #L1a43d4.  call temp:= `readByteString`(v3, v4) @signature `Lokio/BufferedSource;.readByteString:(J)Lokio/ByteString;` @kind interface;
  #L1a43da.  v3:= temp @kind object;
  #L1a43dc.  goto L1a43c8;
}
procedure `void` `readHeaders`(`okhttp3.internal.http2.Hpack$Reader` v6 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readHeaders:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1a43f0.  v5:= 128I;
  #L1a43f4.  v4:= 64I;
  #L1a43f8.  v2:= v6.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a43fc.  call temp:= `exhausted`(v2) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L1a4402.  v2:= temp;
  #L1a4404.  if v2 != 0 then goto L1a4514;
  #L1a4408.  v2:= v6.`okhttp3.internal.http2.Hpack$Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a440c.  call temp:= `readByte`(v2) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a4412.  v2:= temp;
  #L1a4414.  v0:= v2 ^& 255;
  #L1a4418.  if v0 != v5 then goto L1a442c;
  #L1a441c.  v2:= new `java.io.IOException`;
  #L1a4420.  v3:= "index == 0" @kind object;
  #L1a4424.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a442a.  throw v2;
  #L1a442c.  v2:= v0 ^& 128;
  #L1a4430.  if v2 != v5 then goto L1a444c;
  #L1a4434.  v2:= 127I;
  #L1a4438.  call temp:= `readInt`(v6, v0, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @kind virtual;
  #L1a443e.  v1:= temp;
  #L1a4440.  v2:= v1 + -1;
  #L1a4444.  call `readIndexedHeader`(v6, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readIndexedHeader:(I)V` @kind direct;
  #L1a444a.  goto L1a43f8;
  #L1a444c.  if v0 != v4 then goto L1a4458;
  #L1a4450.  call `readLiteralHeaderWithIncrementalIndexingNewName`(v6) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithIncrementalIndexingNewName:()V` @kind direct;
  #L1a4456.  goto L1a43f8;
  #L1a4458.  v2:= v0 ^& 64;
  #L1a445c.  if v2 != v4 then goto L1a4478;
  #L1a4460.  v2:= 63I;
  #L1a4464.  call temp:= `readInt`(v6, v0, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @kind virtual;
  #L1a446a.  v1:= temp;
  #L1a446c.  v2:= v1 + -1;
  #L1a4470.  call `readLiteralHeaderWithIncrementalIndexingIndexedName`(v6, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithIncrementalIndexingIndexedName:(I)V` @kind direct;
  #L1a4476.  goto L1a43f8;
  #L1a4478.  v2:= v0 ^& 32;
  #L1a447c.  v3:= 32I;
  #L1a4480.  if v2 != v3 then goto L1a44e6;
  #L1a4484.  v2:= 31I;
  #L1a4488.  call temp:= `readInt`(v6, v0, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @kind virtual;
  #L1a448e.  v2:= temp;
  #L1a4490.  v6.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int` := v2;
  #L1a4494.  v2:= v6.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L1a4498.  if v2 < 0 then goto L1a44a8;
  #L1a449c.  v2:= v6.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L1a44a0.  v3:= v6.`okhttp3.internal.http2.Hpack$Reader.headerTableSizeSetting` @type ^`int`;
  #L1a44a4.  if v2 <= v3 then goto L1a44de;
  #L1a44a8.  v2:= new `java.io.IOException`;
  #L1a44ac.  v3:= new `java.lang.StringBuilder`;
  #L1a44b0.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1a44b6.  v4:= "Invalid dynamic table size update " @kind object;
  #L1a44ba.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a44c0.  v3:= temp @kind object;
  #L1a44c2.  v4:= v6.`okhttp3.internal.http2.Hpack$Reader.maxDynamicTableByteCount` @type ^`int`;
  #L1a44c6.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a44cc.  v3:= temp @kind object;
  #L1a44ce.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a44d4.  v3:= temp @kind object;
  #L1a44d6.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a44dc.  throw v2;
  #L1a44de.  call `adjustDynamicTableByteCount`(v6) @signature `Lokhttp3/internal/http2/Hpack$Reader;.adjustDynamicTableByteCount:()V` @kind direct;
  #L1a44e4.  goto L1a43f8;
  #L1a44e6.  v2:= 16I;
  #L1a44ea.  if v0 == v2 then goto L1a44f2;
  #L1a44ee.  if v0 != 0 then goto L1a44fa;
  #L1a44f2.  call `readLiteralHeaderWithoutIndexingNewName`(v6) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithoutIndexingNewName:()V` @kind direct;
  #L1a44f8.  goto L1a43f8;
  #L1a44fa.  v2:= 15I;
  #L1a44fe.  call temp:= `readInt`(v6, v0, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @kind virtual;
  #L1a4504.  v1:= temp;
  #L1a4506.  v2:= v1 + -1;
  #L1a450a.  call `readLiteralHeaderWithoutIndexingIndexedName`(v6, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readLiteralHeaderWithoutIndexingIndexedName:(I)V` @kind direct;
  #L1a4510.  goto L1a43f8;
  #L1a4514.  return @kind void;
}
procedure `int` `readInt`(`okhttp3.internal.http2.Hpack$Reader` v5 @kind this, `int` v6 @name `firstByte`, `int` v7 @name `prefixMask`) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readInt:(II)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a4528.  v1:= v6 ^& v7 @kind int;
  #L1a452c.  if v1 >= v7 then goto L1a4532;
  #L1a4530.  return v1;
  #L1a4532.  v2:= v7;
  #L1a4534.  v3:= 0I;
  #L1a4536.  call temp:= `readByte`(v5) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readByte:()I` @kind direct;
  #L1a453c.  v0:= temp;
  #L1a453e.  v4:= v0 ^& 128;
  #L1a4542.  if v4 == 0 then goto L1a4554;
  #L1a4546.  v4:= v0 ^& 127;
  #L1a454a.  v4:= v4 ^< v3 @kind int;
  #L1a454c.  v2:= v2 + v4 @kind int;
  #L1a454e.  v3:= v3 + 7;
  #L1a4552.  goto L1a4536;
  #L1a4554.  v4:= v0 ^< v3 @kind int;
  #L1a4558.  v2:= v2 + v4 @kind int;
  #L1a455a.  v1:= v2;
  #L1a455c.  goto L1a4530;
}
