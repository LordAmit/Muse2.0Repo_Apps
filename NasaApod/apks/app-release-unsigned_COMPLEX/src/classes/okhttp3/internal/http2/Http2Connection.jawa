record `okhttp3.internal.http2.Http2Connection` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `boolean` `okhttp3.internal.http2.Http2Connection.awaitingPong` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Http2Connection.client` @AccessFlag FINAL;
  `java.util.Set` `okhttp3.internal.http2.Http2Connection.currentPushRequests` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.internal.http2.Http2Connection.hostname` @AccessFlag FINAL;
  `int` `okhttp3.internal.http2.Http2Connection.lastGoodStreamId` @AccessFlag ;
  `okhttp3.internal.http2.Http2Connection$Listener` `okhttp3.internal.http2.Http2Connection.listener` @AccessFlag FINAL;
  `int` `okhttp3.internal.http2.Http2Connection.nextStreamId` @AccessFlag ;
  `okhttp3.internal.http2.Settings` `okhttp3.internal.http2.Http2Connection.okHttpSettings` @AccessFlag ;
  `okhttp3.internal.http2.Settings` `okhttp3.internal.http2.Http2Connection.peerSettings` @AccessFlag FINAL;
  `java.util.concurrent.ExecutorService` `okhttp3.internal.http2.Http2Connection.pushExecutor` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.PushObserver` `okhttp3.internal.http2.Http2Connection.pushObserver` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Connection$ReaderRunnable` `okhttp3.internal.http2.Http2Connection.readerRunnable` @AccessFlag FINAL;
  `boolean` `okhttp3.internal.http2.Http2Connection.receivedInitialPeerSettings` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Http2Connection.shutdown` @AccessFlag ;
  `java.net.Socket` `okhttp3.internal.http2.Http2Connection.socket` @AccessFlag FINAL;
  `java.util.Map` `okhttp3.internal.http2.Http2Connection.streams` @AccessFlag FINAL;
  `long` `okhttp3.internal.http2.Http2Connection.unacknowledgedBytesRead` @AccessFlag ;
  `okhttp3.internal.http2.Http2Writer` `okhttp3.internal.http2.Http2Connection.writer` @AccessFlag FINAL;
  `java.util.concurrent.ScheduledExecutorService` `okhttp3.internal.http2.Http2Connection.writerExecutor` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@okhttp3.internal.http2.Http2Connection.$assertionsDisabled` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `int` `@@okhttp3.internal.http2.Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ExecutorService` `@@okhttp3.internal.http2.Http2Connection.listenerExecutor` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Connection;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1a5810.  v8:= 1I;
  #L1a5812.  v2:= 0I;
  #L1a5814.  v0:= constclass @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a5818.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L1a581e.  v0:= temp;
  #L1a5820.  if v0 != 0 then goto L1a585e;
  #L1a5824.  v0:= v8;
  #L1a5826.  `@@okhttp3.internal.http2.Http2Connection.$assertionsDisabled` @type ^`boolean` := v0 @kind boolean;
  #L1a582a.  v1:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L1a582e.  v3:= 2147483647I;
  #L1a5834.  v4:= 60L;
  #L1a5838.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1a583c.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L1a5840.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L1a5846.  v0:= "OkHttp Http2Connection" @kind object;
  #L1a584a.  call temp:= `threadFactory`(v0, v8) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L1a5850.  v8:= temp @kind object;
  #L1a5852.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1a5858.  `@@okhttp3.internal.http2.Http2Connection.listenerExecutor` @type ^`java.util.concurrent.ExecutorService` := v1 @kind object;
  #L1a585c.  return @kind void;
  #L1a585e.  v0:= v2;
  #L1a5860.  goto L1a5826;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Connection` v12 @kind this, `okhttp3.internal.http2.Http2Connection$Builder` v13 @kind object @name `builder`) @signature `Lokhttp3/internal/http2/Http2Connection;.<init>:(Lokhttp3/internal/http2/Http2Connection$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1a5874.  v11:= 7I;
  #L1a5876.  v9:= 1I;
  #L1a5878.  v10:= 0I;
  #L1a587a.  call `<init>`(v12) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a5880.  v0:= new `java.util.LinkedHashMap`;
  #L1a5884.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L1a588a.  v12.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` := v0 @kind object;
  #L1a588e.  v0:= 0L;
  #L1a5892.  v12.`okhttp3.internal.http2.Http2Connection.unacknowledgedBytesRead` @type ^`long` := v0 @kind wide;
  #L1a5896.  v0:= new `okhttp3.internal.http2.Settings`;
  #L1a589a.  call `<init>`(v0) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @kind direct;
  #L1a58a0.  v12.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` := v0 @kind object;
  #L1a58a4.  v0:= new `okhttp3.internal.http2.Settings`;
  #L1a58a8.  call `<init>`(v0) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @kind direct;
  #L1a58ae.  v12.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` := v0 @kind object;
  #L1a58b2.  v12.`okhttp3.internal.http2.Http2Connection.receivedInitialPeerSettings` @type ^`boolean` := v10 @kind boolean;
  #L1a58b6.  v0:= new `java.util.LinkedHashSet`;
  #L1a58ba.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L1a58c0.  v12.`okhttp3.internal.http2.Http2Connection.currentPushRequests` @type ^`java.util.Set` := v0 @kind object;
  #L1a58c4.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.pushObserver` @type ^`okhttp3.internal.http2.PushObserver` @kind object;
  #L1a58c8.  v12.`okhttp3.internal.http2.Http2Connection.pushObserver` @type ^`okhttp3.internal.http2.PushObserver` := v0 @kind object;
  #L1a58cc.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.client` @type ^`boolean` @kind boolean;
  #L1a58d0.  v12.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` := v0 @kind boolean;
  #L1a58d4.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.listener` @type ^`okhttp3.internal.http2.Http2Connection$Listener` @kind object;
  #L1a58d8.  v12.`okhttp3.internal.http2.Http2Connection.listener` @type ^`okhttp3.internal.http2.Http2Connection$Listener` := v0 @kind object;
  #L1a58dc.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.client` @type ^`boolean` @kind boolean;
  #L1a58e0.  if v0 == 0 then goto L1a5a2c;
  #L1a58e4.  v0:= v9;
  #L1a58e6.  v12.`okhttp3.internal.http2.Http2Connection.nextStreamId` @type ^`int` := v0;
  #L1a58ea.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.client` @type ^`boolean` @kind boolean;
  #L1a58ee.  if v0 == 0 then goto L1a58fe;
  #L1a58f2.  v0:= v12.`okhttp3.internal.http2.Http2Connection.nextStreamId` @type ^`int`;
  #L1a58f6.  v0:= v0 + 2;
  #L1a58fa.  v12.`okhttp3.internal.http2.Http2Connection.nextStreamId` @type ^`int` := v0;
  #L1a58fe.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.client` @type ^`boolean` @kind boolean;
  #L1a5902.  if v0 == 0 then goto L1a5914;
  #L1a5906.  v0:= v12.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a590a.  v1:= 16777216I;
  #L1a590e.  call temp:= `set`(v0, v11, v1) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L1a5914.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.hostname` @type ^`java.lang.String` @kind object;
  #L1a5918.  v12.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` := v0 @kind object;
  #L1a591c.  v0:= new `java.util.concurrent.ScheduledThreadPoolExecutor`;
  #L1a5920.  v1:= "OkHttp %s Writer" @kind object;
  #L1a5924.  v2:= new `java.lang.Object`[v9];
  #L1a5928.  v3:= v12.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a592c.  v2[v10]:= v3 @kind object;
  #L1a5930.  call temp:= `format`(v1, v2) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1a5936.  v1:= temp @kind object;
  #L1a5938.  call temp:= `threadFactory`(v1, v10) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L1a593e.  v1:= temp @kind object;
  #L1a5940.  call `<init>`(v0, v9, v1) @signature `Ljava/util/concurrent/ScheduledThreadPoolExecutor;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1a5946.  v12.`okhttp3.internal.http2.Http2Connection.writerExecutor` @type ^`java.util.concurrent.ScheduledExecutorService` := v0 @kind object;
  #L1a594a.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.pingIntervalMillis` @type ^`int`;
  #L1a594e.  if v0 == 0 then goto L1a5976;
  #L1a5952.  v0:= v12.`okhttp3.internal.http2.Http2Connection.writerExecutor` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L1a5956.  v1:= new `okhttp3.internal.http2.Http2Connection$PingRunnable`;
  #L1a595a.  call `<init>`(v1, v12, v10, v10, v10) @signature `Lokhttp3/internal/http2/Http2Connection$PingRunnable;.<init>:(Lokhttp3/internal/http2/Http2Connection;ZII)V` @kind direct;
  #L1a5960.  v2:= v13.`okhttp3.internal.http2.Http2Connection$Builder.pingIntervalMillis` @type ^`int`;
  #L1a5964.  v2:= (`long`) v2 @kind i2l;
  #L1a5966.  v4:= v13.`okhttp3.internal.http2.Http2Connection$Builder.pingIntervalMillis` @type ^`int`;
  #L1a596a.  v4:= (`long`) v4 @kind i2l;
  #L1a596c.  v6:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1a5970.  call temp:= `scheduleAtFixedRate`(v0, v1, v2, v4, v6) @signature `Ljava/util/concurrent/ScheduledExecutorService;.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L1a5976.  v1:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L1a597a.  v4:= 60L;
  #L1a597e.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1a5982.  v7:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L1a5986.  call `<init>`(v7) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L1a598c.  v0:= "OkHttp %s Push Observer" @kind object;
  #L1a5990.  v2:= new `java.lang.Object`[v9];
  #L1a5994.  v3:= v12.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a5998.  v2[v10]:= v3 @kind object;
  #L1a599c.  call temp:= `format`(v0, v2) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1a59a2.  v0:= temp @kind object;
  #L1a59a4.  call temp:= `threadFactory`(v0, v9) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L1a59aa.  v8:= temp @kind object;
  #L1a59ac.  v2:= v10;
  #L1a59ae.  v3:= v9;
  #L1a59b0.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1a59b6.  v12.`okhttp3.internal.http2.Http2Connection.pushExecutor` @type ^`java.util.concurrent.ExecutorService` := v1 @kind object;
  #L1a59ba.  v0:= v12.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a59be.  v1:= 65535I;
  #L1a59c4.  call temp:= `set`(v0, v11, v1) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L1a59ca.  v0:= v12.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a59ce.  v1:= 5I;
  #L1a59d0.  v2:= 16384I;
  #L1a59d4.  call temp:= `set`(v0, v1, v2) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L1a59da.  v0:= v12.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a59de.  call temp:= `getInitialWindowSize`(v0) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L1a59e4.  v0:= temp;
  #L1a59e6.  v0:= (`long`) v0 @kind i2l;
  #L1a59e8.  v12.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L1a59ec.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.socket` @type ^`java.net.Socket` @kind object;
  #L1a59f0.  v12.`okhttp3.internal.http2.Http2Connection.socket` @type ^`java.net.Socket` := v0 @kind object;
  #L1a59f4.  v0:= new `okhttp3.internal.http2.Http2Writer`;
  #L1a59f8.  v1:= v13.`okhttp3.internal.http2.Http2Connection$Builder.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a59fc.  v2:= v12.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` @kind boolean;
  #L1a5a00.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/internal/http2/Http2Writer;.<init>:(Lokio/BufferedSink;Z)V` @kind direct;
  #L1a5a06.  v12.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` := v0 @kind object;
  #L1a5a0a.  v0:= new `okhttp3.internal.http2.Http2Connection$ReaderRunnable`;
  #L1a5a0e.  v1:= new `okhttp3.internal.http2.Http2Reader`;
  #L1a5a12.  v2:= v13.`okhttp3.internal.http2.Http2Connection$Builder.source` @type ^`okio.BufferedSource` @kind object;
  #L1a5a16.  v3:= v12.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` @kind boolean;
  #L1a5a1a.  call `<init>`(v1, v2, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.<init>:(Lokio/BufferedSource;Z)V` @kind direct;
  #L1a5a20.  call `<init>`(v0, v12, v1) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.<init>:(Lokhttp3/internal/http2/Http2Connection;Lokhttp3/internal/http2/Http2Reader;)V` @kind direct;
  #L1a5a26.  v12.`okhttp3.internal.http2.Http2Connection.readerRunnable` @type ^`okhttp3.internal.http2.Http2Connection$ReaderRunnable` := v0 @kind object;
  #L1a5a2a.  return @kind void;
  #L1a5a2c.  v0:= 2I;
  #L1a5a2e.  goto L1a58e6;
}
procedure `void` `access$000`(`okhttp3.internal.http2.Http2Connection` v0 @kind object @name `x0`) @signature `Lokhttp3/internal/http2/Http2Connection;.access$000:(Lokhttp3/internal/http2/Http2Connection;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1a5a44.  call `failConnection`(v0) @signature `Lokhttp3/internal/http2/Http2Connection;.failConnection:()V` @kind direct;
  #L1a5a4a.  return @kind void;
}
procedure `java.util.concurrent.ExecutorService` `access$100`() @signature `Lokhttp3/internal/http2/Http2Connection;.access$100:()Ljava/util/concurrent/ExecutorService;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L1a5a5c.  v0:= `@@okhttp3.internal.http2.Http2Connection.listenerExecutor` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L1a5a60.  return v0 @kind object;
}
procedure `java.util.concurrent.ScheduledExecutorService` `access$200`(`okhttp3.internal.http2.Http2Connection` v1 @kind object @name `x0`) @signature `Lokhttp3/internal/http2/Http2Connection;.access$200:(Lokhttp3/internal/http2/Http2Connection;)Ljava/util/concurrent/ScheduledExecutorService;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L1a5a74.  v0:= v1.`okhttp3.internal.http2.Http2Connection.writerExecutor` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L1a5a78.  return v0 @kind object;
}
procedure `boolean` `access$302`(`okhttp3.internal.http2.Http2Connection` v0 @kind object @name `x0`, `boolean` v1 @name `x1`) @signature `Lokhttp3/internal/http2/Http2Connection;.access$302:(Lokhttp3/internal/http2/Http2Connection;Z)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1a5a8c.  v0.`okhttp3.internal.http2.Http2Connection.awaitingPong` @type ^`boolean` := v1 @kind boolean;
  #L1a5a90.  return v1;
}
procedure `void` `failConnection`(`okhttp3.internal.http2.Http2Connection` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.failConnection:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L1a5aa4.  v0:= `@@okhttp3.internal.http2.ErrorCode.PROTOCOL_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a5aa8.  v1:= `@@okhttp3.internal.http2.ErrorCode.PROTOCOL_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a5aac.  call `close`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.close:(Lokhttp3/internal/http2/ErrorCode;Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #Try_end0.  
  #L1a5ab2.  return @kind void;
  #L1a5ab4.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1a5ab6.  goto L1a5ab2;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L1a5ab4;
}
procedure `okhttp3.internal.http2.Http2Stream` `newStream`(`okhttp3.internal.http2.Http2Connection` v12 @kind this, `int` v13 @name `associatedStreamId`, `java.util.List` v14 @kind object, `boolean` v15 @name `out`) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(ILjava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1a5ad8.  if v15 != 0 then goto L1a5b20;
  #L1a5adc.  v3:= 1I;
  #L1a5ade.  v4:= 0I;
  #L1a5ae0.  v7:= v12.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a5ae4.  @monitorenter v7
  #Try_start0.  
  #L1a5ae6.  @monitorenter v12
  #Try_end0.  
  #Try_start1.  
  #L1a5ae8.  v2:= v12.`okhttp3.internal.http2.Http2Connection.nextStreamId` @type ^`int`;
  #L1a5aec.  v5:= 1073741823I;
  #L1a5af2.  if v2 <= v5 then goto L1a5b00;
  #L1a5af6.  v2:= `@@okhttp3.internal.http2.ErrorCode.REFUSED_STREAM` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a5afa.  call `shutdown`(v12, v2) @signature `Lokhttp3/internal/http2/Http2Connection;.shutdown:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a5b00.  v2:= v12.`okhttp3.internal.http2.Http2Connection.shutdown` @type ^`boolean` @kind boolean;
  #L1a5b04.  if v2 == 0 then goto L1a5b24;
  #L1a5b08.  v2:= new `okhttp3.internal.http2.ConnectionShutdownException`;
  #L1a5b0c.  call `<init>`(v2) @signature `Lokhttp3/internal/http2/ConnectionShutdownException;.<init>:()V` @kind direct;
  #L1a5b12.  throw v2;
  #L1a5b14.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a5b16.  @monitorexit v12
  #Try_end1.  
  #Try_start2.  
  #L1a5b18.  throw v2;
  #L1a5b1a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a5b1c.  @monitorexit v7
  #Try_end2.  
  #L1a5b1e.  throw v2;
  #L1a5b20.  v3:= 0I;
  #L1a5b22.  goto L1a5ade;
  #Try_start3.  
  #L1a5b24.  v1:= v12.`okhttp3.internal.http2.Http2Connection.nextStreamId` @type ^`int`;
  #L1a5b28.  v2:= v12.`okhttp3.internal.http2.Http2Connection.nextStreamId` @type ^`int`;
  #L1a5b2c.  v2:= v2 + 2;
  #L1a5b30.  v12.`okhttp3.internal.http2.Http2Connection.nextStreamId` @type ^`int` := v2;
  #L1a5b34.  v0:= new `okhttp3.internal.http2.Http2Stream`;
  #L1a5b38.  v2:= v12 @kind object;
  #L1a5b3a.  v5:= v14 @kind object;
  #L1a5b3c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/http2/Http2Stream;.<init>:(ILokhttp3/internal/http2/Http2Connection;ZZLjava/util/List;)V` @kind direct;
  #L1a5b42.  if v15 == 0 then goto L1a5b66;
  #L1a5b46.  v8:= v12.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L1a5b4a.  v10:= 0L;
  #L1a5b4e.  v2:= lcmp(v8, v10);
  #L1a5b52.  if v2 == 0 then goto L1a5b66;
  #L1a5b56.  v8:= v0.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L1a5b5a.  v10:= 0L;
  #L1a5b5e.  v2:= lcmp(v8, v10);
  #L1a5b62.  if v2 != 0 then goto L1a5ba8;
  #L1a5b66.  v6:= 1I;
  #L1a5b68.  call temp:= `isOpen`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L1a5b6e.  v2:= temp;
  #L1a5b70.  if v2 == 0 then goto L1a5b86;
  #L1a5b74.  v2:= v12.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a5b78.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a5b7e.  v5:= temp @kind object;
  #L1a5b80.  call temp:= `put`(v2, v5, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1a5b86.  @monitorexit v12
  #Try_end3.  
  #L1a5b88.  if v13 != 0 then goto L1a5bac;
  #Try_start4.  
  #L1a5b8c.  v2:= v12.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a5b90.  call `synStream`(v2, v3, v1, v13, v14) @signature `Lokhttp3/internal/http2/Http2Writer;.synStream:(ZIILjava/util/List;)V` @kind virtual;
  #L1a5b96.  @monitorexit v7
  #Try_end4.  
  #L1a5b98.  if v6 == 0 then goto L1a5ba6;
  #L1a5b9c.  v2:= v12.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a5ba0.  call `flush`(v2) @signature `Lokhttp3/internal/http2/Http2Writer;.flush:()V` @kind virtual;
  #L1a5ba6.  return v0 @kind object;
  #L1a5ba8.  v6:= 0I;
  #L1a5baa.  goto L1a5b68;
  #Try_start5.  
  #L1a5bac.  v2:= v12.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` @kind boolean;
  #L1a5bb0.  if v2 == 0 then goto L1a5bc4;
  #L1a5bb4.  v2:= new `java.lang.IllegalArgumentException`;
  #L1a5bb8.  v5:= "client streams shouldn't have associated stream IDs" @kind object;
  #L1a5bbc.  call `<init>`(v2, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a5bc2.  throw v2;
  #L1a5bc4.  v2:= v12.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a5bc8.  call `pushPromise`(v2, v13, v1, v14) @signature `Lokhttp3/internal/http2/Http2Writer;.pushPromise:(IILjava/util/List;)V` @kind virtual;
  #Try_end5.  
  #L1a5bce.  goto L1a5b96;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a5b1a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a5b14;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L1a5b1a;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L1a5b14;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L1a5b1a;
  catch `java.lang.Throwable` @[Try_start5..Try_end5] goto L1a5b1a;
}
procedure `void` `addBytesToWriteWindow`(`okhttp3.internal.http2.Http2Connection` v3 @kind this, `long` v4 @name `delta`) @signature `Lokhttp3/internal/http2/Http2Connection;.addBytesToWriteWindow:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a5c18.  v0:= v3.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L1a5c1c.  v0:= v0 + v4 @kind long;
  #L1a5c1e.  v3.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L1a5c22.  v0:= 0L;
  #L1a5c26.  v0:= lcmp(v4, v0);
  #L1a5c2a.  if v0 <= 0 then goto L1a5c34;
  #L1a5c2e.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1a5c34.  return @kind void;
}
procedure `void` `awaitPong`(`okhttp3.internal.http2.Http2Connection` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.awaitPong:()V` @AccessFlag  {
    temp;
    v0;

  #L1a5c48.  @monitorenter v1
  #Try_start0.  
  #L1a5c4a.  v0:= v1.`okhttp3.internal.http2.Http2Connection.awaitingPong` @type ^`boolean` @kind boolean;
  #L1a5c4e.  if v0 == 0 then goto L1a5c60;
  #L1a5c52.  call `wait`(v1) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #Try_end0.  
  #L1a5c58.  goto L1a5c4a;
  #L1a5c5a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a5c5c.  @monitorexit v1
  #L1a5c5e.  throw v0;
  #L1a5c60.  @monitorexit v1
  #L1a5c62.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a5c5a;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Connection` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a5c80.  v0:= `@@okhttp3.internal.http2.ErrorCode.NO_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a5c84.  v1:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a5c88.  call `close`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.close:(Lokhttp3/internal/http2/ErrorCode;Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a5c8e.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Connection` v7 @kind this, `okhttp3.internal.http2.ErrorCode` v8 @kind object @name `connectionCode`, `okhttp3.internal.http2.ErrorCode` v9 @kind object @name `streamCode`) @signature `Lokhttp3/internal/http2/Http2Connection;.close:(Lokhttp3/internal/http2/ErrorCode;Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a5ca0.  v5:= `@@okhttp3.internal.http2.Http2Connection.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a5ca4.  if v5 != 0 then goto L1a5cc0;
  #L1a5ca8.  call temp:= `holdsLock`(v7) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a5cae.  v5:= temp;
  #L1a5cb0.  if v5 == 0 then goto L1a5cc0;
  #L1a5cb4.  v5:= new `java.lang.AssertionError`;
  #L1a5cb8.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a5cbe.  throw v5;
  #L1a5cc0.  v4:= 0I;
  #Try_start0.  
  #L1a5cc2.  call `shutdown`(v7, v8) @signature `Lokhttp3/internal/http2/Http2Connection;.shutdown:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #Try_end0.  
  #L1a5cc8.  v3:= 0I;
  #L1a5cca.  @monitorenter v7
  #Try_start1.  
  #L1a5ccc.  v5:= v7.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a5cd0.  call temp:= `isEmpty`(v5) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L1a5cd6.  v5:= temp;
  #L1a5cd8.  if v5 != 0 then goto L1a5d12;
  #L1a5cdc.  v5:= v7.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a5ce0.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L1a5ce6.  v5:= temp @kind object;
  #L1a5ce8.  v6:= v7.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a5cec.  call temp:= `size`(v6) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L1a5cf2.  v6:= temp;
  #L1a5cf4.  v6:= new `okhttp3.internal.http2.Http2Stream`[v6];
  #L1a5cf8.  call temp:= `toArray`(v5, v6) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L1a5cfe.  v5:= temp @kind object;
  #L1a5d00.  v0:= v5 @kind object;
  #L1a5d02.  v0:= (`okhttp3.internal.http2.Http2Stream`[]) v0 @kind object;
  #L1a5d06.  v3:= v0 @kind object;
  #L1a5d08.  v5:= v7.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a5d0c.  call `clear`(v5) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L1a5d12.  @monitorexit v7
  #Try_end1.  
  #L1a5d14.  if v3 == 0 then goto L1a5d46;
  #L1a5d18.  v6:= length @variable v3;
  #L1a5d1a.  v5:= 0I;
  #L1a5d1c.  if v5 >= v6 then goto L1a5d46;
  #L1a5d20.  v2:= v3[v5] @kind object;
  #Try_start2.  
  #L1a5d24.  call `close`(v2, v9) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #Try_end2.  
  #L1a5d2a.  v5:= v5 + 1;
  #L1a5d2e.  goto L1a5d1c;
  #L1a5d30.  v1:= Exception @type ^`java.io.IOException` @kind object;
  #L1a5d32.  v4:= v1 @kind object;
  #L1a5d34.  goto L1a5cc8;
  #L1a5d36.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L1a5d38.  @monitorexit v7
  #Try_end3.  
  #L1a5d3a.  throw v5;
  #L1a5d3c.  v1:= Exception @type ^`java.io.IOException` @kind object;
  #L1a5d3e.  if v4 == 0 then goto L1a5d2a;
  #L1a5d42.  v4:= v1 @kind object;
  #L1a5d44.  goto L1a5d2a;
  #Try_start4.  
  #L1a5d46.  v5:= v7.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a5d4a.  call `close`(v5) @signature `Lokhttp3/internal/http2/Http2Writer;.close:()V` @kind virtual;
  #Try_end4.  
  #Try_start5.  
  #L1a5d50.  v5:= v7.`okhttp3.internal.http2.Http2Connection.socket` @type ^`java.net.Socket` @kind object;
  #L1a5d54.  call `close`(v5) @signature `Ljava/net/Socket;.close:()V` @kind virtual;
  #Try_end5.  
  #L1a5d5a.  v5:= v7.`okhttp3.internal.http2.Http2Connection.writerExecutor` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L1a5d5e.  call `shutdown`(v5) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdown:()V` @kind interface;
  #L1a5d64.  v5:= v7.`okhttp3.internal.http2.Http2Connection.pushExecutor` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L1a5d68.  call `shutdown`(v5) @signature `Ljava/util/concurrent/ExecutorService;.shutdown:()V` @kind interface;
  #L1a5d6e.  if v4 == 0 then goto L1a5d84;
  #L1a5d72.  throw v4;
  #L1a5d74.  v1:= Exception @type ^`java.io.IOException` @kind object;
  #L1a5d76.  if v4 != 0 then goto L1a5d50;
  #L1a5d7a.  v4:= v1 @kind object;
  #L1a5d7c.  goto L1a5d50;
  #L1a5d7e.  v1:= Exception @type ^`java.io.IOException` @kind object;
  #L1a5d80.  v4:= v1 @kind object;
  #L1a5d82.  goto L1a5d5a;
  #L1a5d84.  return @kind void;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L1a5d30;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a5d36;
  catch `java.io.IOException` @[Try_start2..Try_end2] goto L1a5d3c;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L1a5d36;
  catch `java.io.IOException` @[Try_start4..Try_end4] goto L1a5d74;
  catch `java.io.IOException` @[Try_start5..Try_end5] goto L1a5d7e;
}
procedure `void` `flush`(`okhttp3.internal.http2.Http2Connection` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a5ddc.  v0:= v1.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a5de0.  call `flush`(v0) @signature `Lokhttp3/internal/http2/Http2Writer;.flush:()V` @kind virtual;
  #L1a5de6.  return @kind void;
}
procedure `okhttp3.Protocol` `getProtocol`(`okhttp3.internal.http2.Http2Connection` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.getProtocol:()Lokhttp3/Protocol;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a5df8.  v0:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L1a5dfc.  return v0 @kind object;
}
procedure `okhttp3.internal.http2.Http2Stream` `getStream`(`okhttp3.internal.http2.Http2Connection` v2 @kind this, `int` v3 @name `id`) @signature `Lokhttp3/internal/http2/Http2Connection;.getStream:(I)Lokhttp3/internal/http2/Http2Stream;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a5e10.  @monitorenter v2
  #Try_start0.  
  #L1a5e12.  v0:= v2.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a5e16.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a5e1c.  v1:= temp @kind object;
  #L1a5e1e.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1a5e24.  v0:= temp @kind object;
  #L1a5e26.  v0:= (`okhttp3.internal.http2.Http2Stream`) v0 @kind object;
  #Try_end0.  
  #L1a5e2a.  @monitorexit v2
  #L1a5e2c.  return v0 @kind object;
  #L1a5e2e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a5e30.  @monitorexit v2
  #L1a5e32.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a5e2e;
}
procedure `boolean` `isShutdown`(`okhttp3.internal.http2.Http2Connection` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.isShutdown:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a5e50.  @monitorenter v1
  #Try_start0.  
  #L1a5e52.  v0:= v1.`okhttp3.internal.http2.Http2Connection.shutdown` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L1a5e56.  @monitorexit v1
  #L1a5e58.  return v0;
  #L1a5e5a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a5e5c.  @monitorexit v1
  #L1a5e5e.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a5e5a;
}
procedure `int` `maxConcurrentStreams`(`okhttp3.internal.http2.Http2Connection` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.maxConcurrentStreams:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a5e7c.  @monitorenter v2
  #Try_start0.  
  #L1a5e7e.  v0:= v2.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a5e82.  v1:= 2147483647I;
  #L1a5e88.  call temp:= `getMaxConcurrentStreams`(v0, v1) @signature `Lokhttp3/internal/http2/Settings;.getMaxConcurrentStreams:(I)I` @kind virtual;
  #Try_end0.  
  #L1a5e8e.  v0:= temp;
  #L1a5e90.  @monitorexit v2
  #L1a5e92.  return v0;
  #L1a5e94.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a5e96.  @monitorexit v2
  #L1a5e98.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a5e94;
}
procedure `okhttp3.internal.http2.Http2Stream` `newStream`(`okhttp3.internal.http2.Http2Connection` v1 @kind this, `java.util.List` v2 @kind object, `boolean` v3 @name `out`) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(Ljava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a5eb8.  v0:= 0I;
  #L1a5eba.  call temp:= `newStream`(v1, v0, v2, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(ILjava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @kind direct;
  #L1a5ec0.  v0:= temp @kind object;
  #L1a5ec2.  return v0 @kind object;
}
procedure `int` `openStreamCount`(`okhttp3.internal.http2.Http2Connection` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.openStreamCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a5ed4.  @monitorenter v1
  #Try_start0.  
  #L1a5ed6.  v0:= v1.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a5eda.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #Try_end0.  
  #L1a5ee0.  v0:= temp;
  #L1a5ee2.  @monitorexit v1
  #L1a5ee4.  return v0;
  #L1a5ee6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a5ee8.  @monitorexit v1
  #L1a5eea.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a5ee6;
}
procedure `void` `pushDataLater`(`okhttp3.internal.http2.Http2Connection` v9 @kind this, `int` v10 @name `streamId`, `okio.BufferedSource` v11 @kind object @name `source`, `int` v12 @name `byteCount`, `boolean` v13 @name `inFinished`) @signature `Lokhttp3/internal/http2/Http2Connection;.pushDataLater:(ILokio/BufferedSource;IZ)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1a5f08.  v5:= new `okio.Buffer`;
  #L1a5f0c.  call `<init>`(v5) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1a5f12.  v0:= (`long`) v12 @kind i2l;
  #L1a5f14.  call `require`(v11, v0) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L1a5f1a.  v0:= (`long`) v12 @kind i2l;
  #L1a5f1c.  call temp:= `read`(v11, v5, v0) @signature `Lokio/BufferedSource;.read:(Lokio/Buffer;J)J` @kind interface;
  #L1a5f22.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1a5f28.  v0:= temp @kind wide;
  #L1a5f2a.  v2:= (`long`) v12 @kind i2l;
  #L1a5f2c.  v0:= lcmp(v0, v2);
  #L1a5f30.  if v0 == 0 then goto L1a5f76;
  #L1a5f34.  v0:= new `java.io.IOException`;
  #L1a5f38.  v1:= new `java.lang.StringBuilder`;
  #L1a5f3c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1a5f42.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1a5f48.  v2:= temp @kind wide;
  #L1a5f4a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a5f50.  v1:= temp @kind object;
  #L1a5f52.  v2:= " != " @kind object;
  #L1a5f56.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a5f5c.  v1:= temp @kind object;
  #L1a5f5e.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a5f64.  v1:= temp @kind object;
  #L1a5f66.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a5f6c.  v1:= temp @kind object;
  #L1a5f6e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a5f74.  throw v0;
  #L1a5f76.  v8:= v9.`okhttp3.internal.http2.Http2Connection.pushExecutor` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L1a5f7a.  v0:= new `okhttp3.internal.http2.Http2Connection$5`;
  #L1a5f7e.  v2:= "OkHttp %s Push Data[%s]" @kind object;
  #L1a5f82.  v1:= 2I;
  #L1a5f84.  v3:= new `java.lang.Object`[v1];
  #L1a5f88.  v1:= 0I;
  #L1a5f8a.  v4:= v9.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a5f8e.  v3[v1]:= v4 @kind object;
  #L1a5f92.  v1:= 1I;
  #L1a5f94.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a5f9a.  v4:= temp @kind object;
  #L1a5f9c.  v3[v1]:= v4 @kind object;
  #L1a5fa0.  v1:= v9 @kind object;
  #L1a5fa2.  v4:= v10;
  #L1a5fa4.  v6:= v12;
  #L1a5fa6.  v7:= v13;
  #L1a5fa8.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lokhttp3/internal/http2/Http2Connection$5;.<init>:(Lokhttp3/internal/http2/Http2Connection;Ljava/lang/String;[Ljava/lang/Object;ILokio/Buffer;IZ)V` @kind direct;
  #L1a5fae.  call `execute`(v8, v0) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L1a5fb4.  return @kind void;
}
procedure `void` `pushHeadersLater`(`okhttp3.internal.http2.Http2Connection` v8 @kind this, `int` v9 @name `streamId`, `java.util.List` v10 @kind object, `boolean` v11 @name `inFinished`) @signature `Lokhttp3/internal/http2/Http2Connection;.pushHeadersLater:(ILjava/util/List;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #Try_start0.  
  #L1a5fc8.  v7:= v8.`okhttp3.internal.http2.Http2Connection.pushExecutor` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L1a5fcc.  v0:= new `okhttp3.internal.http2.Http2Connection$4`;
  #L1a5fd0.  v2:= "OkHttp %s Push Headers[%s]" @kind object;
  #L1a5fd4.  v1:= 2I;
  #L1a5fd6.  v3:= new `java.lang.Object`[v1];
  #L1a5fda.  v1:= 0I;
  #L1a5fdc.  v4:= v8.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a5fe0.  v3[v1]:= v4 @kind object;
  #L1a5fe4.  v1:= 1I;
  #L1a5fe6.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a5fec.  v4:= temp @kind object;
  #L1a5fee.  v3[v1]:= v4 @kind object;
  #L1a5ff2.  v1:= v8 @kind object;
  #L1a5ff4.  v4:= v9;
  #L1a5ff6.  v5:= v10 @kind object;
  #L1a5ff8.  v6:= v11;
  #L1a5ffa.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/internal/http2/Http2Connection$4;.<init>:(Lokhttp3/internal/http2/Http2Connection;Ljava/lang/String;[Ljava/lang/Object;ILjava/util/List;Z)V` @kind direct;
  #L1a6000.  call `execute`(v7, v0) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #Try_end0.  
  #L1a6006.  return @kind void;
  #L1a6008.  v0:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L1a600a.  goto L1a6006;
  catch `java.util.concurrent.RejectedExecutionException` @[Try_start0..Try_end0] goto L1a6008;
}
procedure `void` `pushRequestLater`(`okhttp3.internal.http2.Http2Connection` v7 @kind this, `int` v8 @name `streamId`, `java.util.List` v9 @kind object) @signature `Lokhttp3/internal/http2/Http2Connection;.pushRequestLater:(ILjava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a602c.  @monitorenter v7
  #Try_start0.  
  #L1a602e.  v0:= v7.`okhttp3.internal.http2.Http2Connection.currentPushRequests` @type ^`java.util.Set` @kind object;
  #L1a6032.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a6038.  v1:= temp @kind object;
  #L1a603a.  call temp:= `contains`(v0, v1) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L1a6040.  v0:= temp;
  #L1a6042.  if v0 == 0 then goto L1a6054;
  #L1a6046.  v0:= `@@okhttp3.internal.http2.ErrorCode.PROTOCOL_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a604a.  call `writeSynResetLater`(v7, v8, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynResetLater:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a6050.  @monitorexit v7
  #L1a6052.  return @kind void;
  #L1a6054.  v0:= v7.`okhttp3.internal.http2.Http2Connection.currentPushRequests` @type ^`java.util.Set` @kind object;
  #L1a6058.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a605e.  v1:= temp @kind object;
  #L1a6060.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1a6066.  @monitorexit v7
  #Try_end0.  
  #Try_start1.  
  #L1a6068.  v6:= v7.`okhttp3.internal.http2.Http2Connection.pushExecutor` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L1a606c.  v0:= new `okhttp3.internal.http2.Http2Connection$3`;
  #L1a6070.  v2:= "OkHttp %s Push Request[%s]" @kind object;
  #L1a6074.  v1:= 2I;
  #L1a6076.  v3:= new `java.lang.Object`[v1];
  #L1a607a.  v1:= 0I;
  #L1a607c.  v4:= v7.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a6080.  v3[v1]:= v4 @kind object;
  #L1a6084.  v1:= 1I;
  #L1a6086.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a608c.  v4:= temp @kind object;
  #L1a608e.  v3[v1]:= v4 @kind object;
  #L1a6092.  v1:= v7 @kind object;
  #L1a6094.  v4:= v8;
  #L1a6096.  v5:= v9 @kind object;
  #L1a6098.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/http2/Http2Connection$3;.<init>:(Lokhttp3/internal/http2/Http2Connection;Ljava/lang/String;[Ljava/lang/Object;ILjava/util/List;)V` @kind direct;
  #L1a609e.  call `execute`(v6, v0) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #Try_end1.  
  #L1a60a4.  goto L1a6052;
  #L1a60a6.  v0:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L1a60a8.  goto L1a6052;
  #L1a60aa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start2.  
  #L1a60ac.  @monitorexit v7
  #Try_end2.  
  #L1a60ae.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a60aa;
  catch `java.util.concurrent.RejectedExecutionException` @[Try_start1..Try_end1] goto L1a60a6;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L1a60aa;
}
procedure `void` `pushResetLater`(`okhttp3.internal.http2.Http2Connection` v7 @kind this, `int` v8 @name `streamId`, `okhttp3.internal.http2.ErrorCode` v9 @kind object @name `errorCode`) @signature `Lokhttp3/internal/http2/Http2Connection;.pushResetLater:(ILokhttp3/internal/http2/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a60e0.  v6:= v7.`okhttp3.internal.http2.Http2Connection.pushExecutor` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L1a60e4.  v0:= new `okhttp3.internal.http2.Http2Connection$6`;
  #L1a60e8.  v2:= "OkHttp %s Push Reset[%s]" @kind object;
  #L1a60ec.  v1:= 2I;
  #L1a60ee.  v3:= new `java.lang.Object`[v1];
  #L1a60f2.  v1:= 0I;
  #L1a60f4.  v4:= v7.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a60f8.  v3[v1]:= v4 @kind object;
  #L1a60fc.  v1:= 1I;
  #L1a60fe.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a6104.  v4:= temp @kind object;
  #L1a6106.  v3[v1]:= v4 @kind object;
  #L1a610a.  v1:= v7 @kind object;
  #L1a610c.  v4:= v8;
  #L1a610e.  v5:= v9 @kind object;
  #L1a6110.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/http2/Http2Connection$6;.<init>:(Lokhttp3/internal/http2/Http2Connection;Ljava/lang/String;[Ljava/lang/Object;ILokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L1a6116.  call `execute`(v6, v0) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L1a611c.  return @kind void;
}
procedure `okhttp3.internal.http2.Http2Stream` `pushStream`(`okhttp3.internal.http2.Http2Connection` v2 @kind this, `int` v3 @name `associatedStreamId`, `java.util.List` v4 @kind object, `boolean` v5 @name `out`) @signature `Lokhttp3/internal/http2/Http2Connection;.pushStream:(ILjava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a6130.  v0:= v2.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` @kind boolean;
  #L1a6134.  if v0 == 0 then goto L1a6148;
  #L1a6138.  v0:= new `java.lang.IllegalStateException`;
  #L1a613c.  v1:= "Client cannot push requests." @kind object;
  #L1a6140.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a6146.  throw v0;
  #L1a6148.  call temp:= `newStream`(v2, v3, v4, v5) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(ILjava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @kind direct;
  #L1a614e.  v0:= temp @kind object;
  #L1a6150.  return v0 @kind object;
}
procedure `boolean` `pushedStream`(`okhttp3.internal.http2.Http2Connection` v1 @kind this, `int` v2 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Connection;.pushedStream:(I)Z` @AccessFlag  {
    temp;
    v0;

  #L1a6164.  if v2 == 0 then goto L1a6174;
  #L1a6168.  v0:= v2 ^& 1;
  #L1a616c.  if v0 != 0 then goto L1a6174;
  #L1a6170.  v0:= 1I;
  #L1a6172.  return v0;
  #L1a6174.  v0:= 0I;
  #L1a6176.  goto L1a6172;
}
procedure `okhttp3.internal.http2.Http2Stream` `removeStream`(`okhttp3.internal.http2.Http2Connection` v3 @kind this, `int` v4 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a6188.  @monitorenter v3
  #Try_start0.  
  #L1a618a.  v1:= v3.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a618e.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a6194.  v2:= temp @kind object;
  #L1a6196.  call temp:= `remove`(v1, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1a619c.  v0:= temp @kind object;
  #L1a619e.  v0:= (`okhttp3.internal.http2.Http2Stream`) v0 @kind object;
  #L1a61a2.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #Try_end0.  
  #L1a61a8.  @monitorexit v3
  #L1a61aa.  return v0 @kind object;
  #L1a61ac.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a61ae.  @monitorexit v3
  #L1a61b0.  throw v1;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a61ac;
}
procedure `void` `setSettings`(`okhttp3.internal.http2.Http2Connection` v2 @kind this, `okhttp3.internal.http2.Settings` v3 @kind object @name `settings`) @signature `Lokhttp3/internal/http2/Http2Connection;.setSettings:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a61d0.  v1:= v2.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a61d4.  @monitorenter v1
  #Try_start0.  
  #L1a61d6.  @monitorenter v2
  #Try_end0.  
  #Try_start1.  
  #L1a61d8.  v0:= v2.`okhttp3.internal.http2.Http2Connection.shutdown` @type ^`boolean` @kind boolean;
  #L1a61dc.  if v0 == 0 then goto L1a61f8;
  #L1a61e0.  v0:= new `okhttp3.internal.http2.ConnectionShutdownException`;
  #L1a61e4.  call `<init>`(v0) @signature `Lokhttp3/internal/http2/ConnectionShutdownException;.<init>:()V` @kind direct;
  #L1a61ea.  throw v0;
  #L1a61ec.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a61ee.  @monitorexit v2
  #Try_end1.  
  #Try_start2.  
  #L1a61f0.  throw v0;
  #L1a61f2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a61f4.  @monitorexit v1
  #Try_end2.  
  #L1a61f6.  throw v0;
  #Try_start3.  
  #L1a61f8.  v0:= v2.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a61fc.  call `merge`(v0, v3) @signature `Lokhttp3/internal/http2/Settings;.merge:(Lokhttp3/internal/http2/Settings;)V` @kind virtual;
  #L1a6202.  @monitorexit v2
  #Try_end3.  
  #Try_start4.  
  #L1a6204.  v0:= v2.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a6208.  call `settings`(v0, v3) @signature `Lokhttp3/internal/http2/Http2Writer;.settings:(Lokhttp3/internal/http2/Settings;)V` @kind virtual;
  #L1a620e.  @monitorexit v1
  #Try_end4.  
  #L1a6210.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a61f2;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a61ec;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L1a61f2;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L1a61ec;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L1a61f2;
}
procedure `void` `shutdown`(`okhttp3.internal.http2.Http2Connection` v4 @kind this, `okhttp3.internal.http2.ErrorCode` v5 @kind object @name `statusCode`) @signature `Lokhttp3/internal/http2/Http2Connection;.shutdown:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a6254.  v2:= v4.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a6258.  @monitorenter v2
  #Try_start0.  
  #L1a625a.  @monitorenter v4
  #Try_end0.  
  #Try_start1.  
  #L1a625c.  v1:= v4.`okhttp3.internal.http2.Http2Connection.shutdown` @type ^`boolean` @kind boolean;
  #L1a6260.  if v1 == 0 then goto L1a626a;
  #L1a6264.  @monitorexit v4
  #Try_end1.  
  #Try_start2.  
  #L1a6266.  @monitorexit v2
  #Try_end2.  
  #L1a6268.  return @kind void;
  #L1a626a.  v1:= 1I;
  #Try_start3.  
  #L1a626c.  v4.`okhttp3.internal.http2.Http2Connection.shutdown` @type ^`boolean` := v1 @kind boolean;
  #L1a6270.  v0:= v4.`okhttp3.internal.http2.Http2Connection.lastGoodStreamId` @type ^`int`;
  #L1a6274.  @monitorexit v4
  #Try_end3.  
  #Try_start4.  
  #L1a6276.  v1:= v4.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a627a.  v3:= `@@okhttp3.internal.Util.EMPTY_BYTE_ARRAY` @type ^`byte`[] @kind object;
  #L1a627e.  call `goAway`(v1, v0, v5, v3) @signature `Lokhttp3/internal/http2/Http2Writer;.goAway:(ILokhttp3/internal/http2/ErrorCode;[B)V` @kind virtual;
  #L1a6284.  @monitorexit v2
  #L1a6286.  goto L1a6268;
  #L1a6288.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a628a.  @monitorexit v2
  #Try_end4.  
  #L1a628c.  throw v1;
  #L1a628e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start5.  
  #L1a6290.  @monitorexit v4
  #Try_end5.  
  #Try_start6.  
  #L1a6292.  throw v1;
  #Try_end6.  
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a6288;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a628e;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L1a6288;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L1a628e;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L1a6288;
  catch `java.lang.Throwable` @[Try_start5..Try_end5] goto L1a628e;
  catch `java.lang.Throwable` @[Try_start6..Try_end6] goto L1a6288;
}
procedure `void` `start`(`okhttp3.internal.http2.Http2Connection` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a62e4.  v0:= 1I;
  #L1a62e6.  call `start`(v1, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.start:(Z)V` @kind virtual;
  #L1a62ec.  return @kind void;
}
procedure `void` `start`(`okhttp3.internal.http2.Http2Connection` v6 @kind this, `boolean` v7 @name `sendConnectionPreface`) @signature `Lokhttp3/internal/http2/Http2Connection;.start:(Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1a6300.  v3:= 65535I;
  #L1a6306.  if v7 == 0 then goto L1a6344;
  #L1a630a.  v1:= v6.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a630e.  call `connectionPreface`(v1) @signature `Lokhttp3/internal/http2/Http2Writer;.connectionPreface:()V` @kind virtual;
  #L1a6314.  v1:= v6.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a6318.  v2:= v6.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a631c.  call `settings`(v1, v2) @signature `Lokhttp3/internal/http2/Http2Writer;.settings:(Lokhttp3/internal/http2/Settings;)V` @kind virtual;
  #L1a6322.  v1:= v6.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a6326.  call temp:= `getInitialWindowSize`(v1) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L1a632c.  v0:= temp;
  #L1a632e.  if v0 == v3 then goto L1a6344;
  #L1a6332.  v1:= v6.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a6336.  v2:= 0I;
  #L1a6338.  v3:= v0 - v3 @kind int;
  #L1a633c.  v4:= (`long`) v3 @kind i2l;
  #L1a633e.  call `windowUpdate`(v1, v2, v4) @signature `Lokhttp3/internal/http2/Http2Writer;.windowUpdate:(IJ)V` @kind virtual;
  #L1a6344.  v1:= new `java.lang.Thread`;
  #L1a6348.  v2:= v6.`okhttp3.internal.http2.Http2Connection.readerRunnable` @type ^`okhttp3.internal.http2.Http2Connection$ReaderRunnable` @kind object;
  #L1a634c.  call `<init>`(v1, v2) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L1a6352.  call `start`(v1) @signature `Ljava/lang/Thread;.start:()V` @kind virtual;
  #L1a6358.  return @kind void;
}
procedure `void` `writeData`(`okhttp3.internal.http2.Http2Connection` v10 @kind this, `int` v11 @name `streamId`, `boolean` v12 @name `outFinished`, `okio.Buffer` v13 @kind object @name `buffer`, `long` v14 @name `byteCount`) @signature `Lokhttp3/internal/http2/Http2Connection;.writeData:(IZLokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1a636c.  v3:= 0I;
  #L1a636e.  v8:= 0L;
  #L1a6372.  v2:= lcmp(v14, v8);
  #L1a6376.  if v2 != 0 then goto L1a63d2;
  #L1a637a.  v2:= v10.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a637e.  call `data`(v2, v12, v11, v13, v3) @signature `Lokhttp3/internal/http2/Http2Writer;.data:(ZILokio/Buffer;I)V` @kind virtual;
  #L1a6384.  return @kind void;
  #Try_start0.  
  #L1a6386.  v4:= v10.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L1a638a.  call temp:= `min`(v14, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1a6390.  v4:= temp @kind wide;
  #L1a6392.  v1:= (`int`) v4 @kind l2i;
  #L1a6394.  v2:= v10.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a6398.  call temp:= `maxDataLength`(v2) @signature `Lokhttp3/internal/http2/Http2Writer;.maxDataLength:()I` @kind virtual;
  #L1a639e.  v2:= temp;
  #L1a63a0.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1a63a6.  v1:= temp;
  #L1a63a8.  v4:= v10.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L1a63ac.  v6:= (`long`) v1 @kind i2l;
  #L1a63ae.  v4:= v4 - v6 @kind long;
  #L1a63b0.  v10.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` := v4 @kind wide;
  #L1a63b4.  @monitorexit v10
  #Try_end0.  
  #L1a63b6.  v4:= (`long`) v1 @kind i2l;
  #L1a63b8.  v14:= v14 - v4 @kind long;
  #L1a63ba.  v4:= v10.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a63be.  if v12 == 0 then goto L1a642c;
  #L1a63c2.  v2:= lcmp(v14, v8);
  #L1a63c6.  if v2 != 0 then goto L1a642c;
  #L1a63ca.  v2:= 1I;
  #L1a63cc.  call `data`(v4, v2, v11, v13, v1) @signature `Lokhttp3/internal/http2/Http2Writer;.data:(ZILokio/Buffer;I)V` @kind virtual;
  #L1a63d2.  v2:= lcmp(v14, v8);
  #L1a63d6.  if v2 <= 0 then goto L1a6384;
  #L1a63da.  @monitorenter v10
  #Try_start1.  
  #L1a63dc.  v4:= v10.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L1a63e0.  v2:= lcmp(v4, v8);
  #L1a63e4.  if v2 > 0 then goto L1a6386;
  #L1a63e8.  v2:= v10.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a63ec.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a63f2.  v4:= temp @kind object;
  #L1a63f4.  call temp:= `containsKey`(v2, v4) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L1a63fa.  v2:= temp;
  #L1a63fc.  if v2 != 0 then goto L1a6424;
  #L1a6400.  v2:= new `java.io.IOException`;
  #L1a6404.  v3:= "stream closed" @kind object;
  #L1a6408.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a640e.  throw v2;
  #Try_end1.  
  #L1a6410.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #Try_start2.  
  #L1a6412.  v2:= new `java.io.InterruptedIOException`;
  #L1a6416.  call `<init>`(v2) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L1a641c.  throw v2;
  #L1a641e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a6420.  @monitorexit v10
  #Try_end2.  
  #L1a6422.  throw v2;
  #Try_start3.  
  #L1a6424.  call `wait`(v10) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #Try_end3.  
  #L1a642a.  goto L1a63dc;
  #L1a642c.  v2:= v3;
  #L1a642e.  goto L1a63cc;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a641e;
  catch `java.lang.InterruptedException` @[Try_start1..Try_end1] goto L1a6410;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a641e;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L1a641e;
  catch `java.lang.InterruptedException` @[Try_start3..Try_end3] goto L1a6410;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L1a641e;
}
procedure `void` `writePing`(`okhttp3.internal.http2.Http2Connection` v3 @kind this, `boolean` v4 @name `reply`, `int` v5 @name `payload1`, `int` v6 @name `payload2`) @signature `Lokhttp3/internal/http2/Http2Connection;.writePing:(ZII)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a6468.  if v4 != 0 then goto L1a648c;
  #L1a646c.  @monitorenter v3
  #Try_start0.  
  #L1a646e.  v1:= v3.`okhttp3.internal.http2.Http2Connection.awaitingPong` @type ^`boolean` @kind boolean;
  #L1a6472.  v2:= 1I;
  #L1a6474.  v3.`okhttp3.internal.http2.Http2Connection.awaitingPong` @type ^`boolean` := v2 @kind boolean;
  #L1a6478.  @monitorexit v3
  #Try_end0.  
  #L1a647a.  if v1 == 0 then goto L1a648c;
  #L1a647e.  call `failConnection`(v3) @signature `Lokhttp3/internal/http2/Http2Connection;.failConnection:()V` @kind direct;
  #L1a6484.  return @kind void;
  #L1a6486.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L1a6488.  @monitorexit v3
  #Try_end1.  
  #L1a648a.  throw v2;
  #Try_start2.  
  #L1a648c.  v2:= v3.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a6490.  call `ping`(v2, v4, v5, v6) @signature `Lokhttp3/internal/http2/Http2Writer;.ping:(ZII)V` @kind virtual;
  #Try_end2.  
  #L1a6496.  goto L1a6484;
  #L1a6498.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1a649a.  call `failConnection`(v3) @signature `Lokhttp3/internal/http2/Http2Connection;.failConnection:()V` @kind direct;
  #L1a64a0.  goto L1a6484;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a6486;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a6486;
  catch `java.io.IOException` @[Try_start2..Try_end2] goto L1a6498;
}
procedure `void` `writePingAndAwaitPong`(`okhttp3.internal.http2.Http2Connection` v3 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.writePingAndAwaitPong:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a64d4.  v0:= 0I;
  #L1a64d6.  v1:= 1330343787I;
  #L1a64dc.  v2:= -257978967I;
  #L1a64e2.  call `writePing`(v3, v0, v1, v2) @signature `Lokhttp3/internal/http2/Http2Connection;.writePing:(ZII)V` @kind virtual;
  #L1a64e8.  call `awaitPong`(v3) @signature `Lokhttp3/internal/http2/Http2Connection;.awaitPong:()V` @kind virtual;
  #L1a64ee.  return @kind void;
}
procedure `void` `writeSynReply`(`okhttp3.internal.http2.Http2Connection` v1 @kind this, `int` v2 @name `streamId`, `boolean` v3 @name `outFinished`, `java.util.List` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynReply:(IZLjava/util/List;)V` @AccessFlag  {
    temp;
    v0;

  #L1a6500.  v0:= v1.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a6504.  call `synReply`(v0, v3, v2, v4) @signature `Lokhttp3/internal/http2/Http2Writer;.synReply:(ZILjava/util/List;)V` @kind virtual;
  #L1a650a.  return @kind void;
}
procedure `void` `writeSynReset`(`okhttp3.internal.http2.Http2Connection` v1 @kind this, `int` v2 @name `streamId`, `okhttp3.internal.http2.ErrorCode` v3 @kind object @name `statusCode`) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynReset:(ILokhttp3/internal/http2/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;

  #L1a651c.  v0:= v1.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a6520.  call `rstStream`(v0, v2, v3) @signature `Lokhttp3/internal/http2/Http2Writer;.rstStream:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a6526.  return @kind void;
}
procedure `void` `writeSynResetLater`(`okhttp3.internal.http2.Http2Connection` v7 @kind this, `int` v8 @name `streamId`, `okhttp3.internal.http2.ErrorCode` v9 @kind object @name `errorCode`) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynResetLater:(ILokhttp3/internal/http2/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #Try_start0.  
  #L1a6538.  v6:= v7.`okhttp3.internal.http2.Http2Connection.writerExecutor` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L1a653c.  v0:= new `okhttp3.internal.http2.Http2Connection$1`;
  #L1a6540.  v2:= "OkHttp %s stream %d" @kind object;
  #L1a6544.  v1:= 2I;
  #L1a6546.  v3:= new `java.lang.Object`[v1];
  #L1a654a.  v1:= 0I;
  #L1a654c.  v4:= v7.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a6550.  v3[v1]:= v4 @kind object;
  #L1a6554.  v1:= 1I;
  #L1a6556.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a655c.  v4:= temp @kind object;
  #L1a655e.  v3[v1]:= v4 @kind object;
  #L1a6562.  v1:= v7 @kind object;
  #L1a6564.  v4:= v8;
  #L1a6566.  v5:= v9 @kind object;
  #L1a6568.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/http2/Http2Connection$1;.<init>:(Lokhttp3/internal/http2/Http2Connection;Ljava/lang/String;[Ljava/lang/Object;ILokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L1a656e.  call `execute`(v6, v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #Try_end0.  
  #L1a6574.  return @kind void;
  #L1a6576.  v0:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L1a6578.  goto L1a6574;
  catch `java.util.concurrent.RejectedExecutionException` @[Try_start0..Try_end0] goto L1a6576;
}
procedure `void` `writeWindowUpdateLater`(`okhttp3.internal.http2.Http2Connection` v8 @kind this, `int` v9 @name `streamId`, `long` v10 @name `unacknowledgedBytesRead`) @signature `Lokhttp3/internal/http2/Http2Connection;.writeWindowUpdateLater:(IJ)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #Try_start0.  
  #L1a659c.  v0:= v8.`okhttp3.internal.http2.Http2Connection.writerExecutor` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L1a65a0.  v1:= new `okhttp3.internal.http2.Http2Connection$2`;
  #L1a65a4.  v3:= "OkHttp Window Update %s stream %d" @kind object;
  #L1a65a8.  v2:= 2I;
  #L1a65aa.  v4:= new `java.lang.Object`[v2];
  #L1a65ae.  v2:= 0I;
  #L1a65b0.  v5:= v8.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a65b4.  v4[v2]:= v5 @kind object;
  #L1a65b8.  v2:= 1I;
  #L1a65ba.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a65c0.  v5:= temp @kind object;
  #L1a65c2.  v4[v2]:= v5 @kind object;
  #L1a65c6.  v2:= v8 @kind object;
  #L1a65c8.  v5:= v9;
  #L1a65ca.  v6:= v10 @kind wide;
  #L1a65cc.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/internal/http2/Http2Connection$2;.<init>:(Lokhttp3/internal/http2/Http2Connection;Ljava/lang/String;[Ljava/lang/Object;IJ)V` @kind direct;
  #L1a65d2.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/ScheduledExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #Try_end0.  
  #L1a65d8.  return @kind void;
  #L1a65da.  v0:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L1a65dc.  goto L1a65d8;
  catch `java.util.concurrent.RejectedExecutionException` @[Try_start0..Try_end0] goto L1a65da;
}
