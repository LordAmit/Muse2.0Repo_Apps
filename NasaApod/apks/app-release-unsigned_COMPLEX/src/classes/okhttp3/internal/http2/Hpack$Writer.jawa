record `okhttp3.internal.http2.Hpack$Writer` @kind class @AccessFlag FINAL {
  `okhttp3.internal.http2.Header`[] `okhttp3.internal.http2.Hpack$Writer.dynamicTable` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @AccessFlag ;
  `okio.Buffer` `okhttp3.internal.http2.Hpack$Writer.out` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.useCompression` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE_LIMIT` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `int` v3 @name `headerTableSizeSetting`, `boolean` v4 @name `useCompression`, `okio.Buffer` v5 @kind object @name `out`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1a4570.  v1:= 0I;
  #L1a4572.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a4578.  v0:= 2147483647I;
  #L1a457e.  v2.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L1a4582.  v0:= 8I;
  #L1a4586.  v0:= new `okhttp3.internal.http2.Header`[v0];
  #L1a458a.  v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v0 @kind object;
  #L1a458e.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4592.  v0:= length @variable v0;
  #L1a4594.  v0:= v0 + -1;
  #L1a4598.  v2.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v0;
  #L1a459c.  v2.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v1;
  #L1a45a0.  v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v1;
  #L1a45a4.  v2.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v3;
  #L1a45a8.  v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v3;
  #L1a45ac.  v2.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` := v4 @kind boolean;
  #L1a45b0.  v2.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` := v5 @kind object;
  #L1a45b4.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `okio.Buffer` v3 @kind object @name `out`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(Lokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1a45c8.  v0:= 4096I;
  #L1a45cc.  v1:= 1I;
  #L1a45ce.  call `<init>`(v2, v0, v1, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @kind direct;
  #L1a45d4.  return @kind void;
}
procedure `void` `adjustDynamicTableByteCount`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a45e8.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a45ec.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a45f0.  if v0 >= v1 then goto L1a4602;
  #L1a45f4.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a45f8.  if v0 != 0 then goto L1a4604;
  #L1a45fc.  call `clearDynamicTable`(v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L1a4602.  return @kind void;
  #L1a4604.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a4608.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a460c.  v0:= v0 - v1 @kind int;
  #L1a460e.  call temp:= `evictToRecoverBytes`(v2, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L1a4614.  goto L1a4602;
}
procedure `void` `clearDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v3 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1a4628.  v2:= 0I;
  #L1a462a.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a462e.  v1:= 0I;
  #L1a4630.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L1a4636.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a463a.  v0:= length @variable v0;
  #L1a463c.  v0:= v0 + -1;
  #L1a4640.  v3.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v0;
  #L1a4644.  v3.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v2;
  #L1a4648.  v3.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v2;
  #L1a464c.  return @kind void;
}
procedure `int` `evictToRecoverBytes`(`okhttp3.internal.http2.Hpack$Writer` v7 @kind this, `int` v8 @name `bytesToRecover`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a4660.  v0:= 0I;
  #L1a4662.  if v8 <= 0 then goto L1a4702;
  #L1a4666.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a466a.  v2:= length @variable v2;
  #L1a466c.  v1:= v2 + -1;
  #L1a4670.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a4674.  if v1 < v2 then goto L1a46b6;
  #L1a4678.  if v8 <= 0 then goto L1a46b6;
  #L1a467c.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4680.  v2:= v2[v1] @kind object;
  #L1a4684.  v2:= v2.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a4688.  v8:= v8 - v2 @kind int;
  #L1a468a.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a468e.  v3:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4692.  v3:= v3[v1] @kind object;
  #L1a4696.  v3:= v3.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a469a.  v2:= v2 - v3 @kind int;
  #L1a469c.  v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v2;
  #L1a46a0.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a46a4.  v2:= v2 + -1;
  #L1a46a8.  v7.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v2;
  #L1a46ac.  v0:= v0 + 1;
  #L1a46b0.  v1:= v1 + -1;
  #L1a46b4.  goto L1a4670;
  #L1a46b6.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a46ba.  v3:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a46be.  v3:= v3 + 1;
  #L1a46c2.  v4:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a46c6.  v5:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a46ca.  v5:= v5 + 1;
  #L1a46ce.  v5:= v5 + v0 @kind int;
  #L1a46d0.  v6:= v7.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a46d4.  call `arraycopy`(v2, v3, v4, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1a46da.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a46de.  v3:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a46e2.  v3:= v3 + 1;
  #L1a46e6.  v4:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a46ea.  v4:= v4 + 1;
  #L1a46ee.  v4:= v4 + v0 @kind int;
  #L1a46f0.  v5:= 0I;
  #L1a46f2.  call `fill`(v2, v3, v4, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L1a46f8.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a46fc.  v2:= v2 + v0 @kind int;
  #L1a46fe.  v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v2;
  #L1a4702.  return v0;
}
procedure `void` `insertIntoDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v8 @kind this, `okhttp3.internal.http2.Header` v9 @kind object @name `entry`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a4714.  v1:= v9.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a4718.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a471c.  if v1 <= v4 then goto L1a4728;
  #L1a4720.  call `clearDynamicTable`(v8) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L1a4726.  return @kind void;
  #L1a4728.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a472c.  v4:= v4 + v1 @kind int;
  #L1a472e.  v5:= v8.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a4732.  v0:= v4 - v5 @kind int;
  #L1a4736.  call temp:= `evictToRecoverBytes`(v8, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L1a473c.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a4740.  v4:= v4 + 1;
  #L1a4744.  v5:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4748.  v5:= length @variable v5;
  #L1a474a.  if v4 <= v5 then goto L1a4786;
  #L1a474e.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4752.  v4:= length @variable v4;
  #L1a4754.  v4:= v4 * 2;
  #L1a4758.  v2:= new `okhttp3.internal.http2.Header`[v4];
  #L1a475c.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4760.  v5:= 0I;
  #L1a4762.  v6:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4766.  v6:= length @variable v6;
  #L1a4768.  v7:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a476c.  v7:= length @variable v7;
  #L1a476e.  call `arraycopy`(v4, v5, v2, v6, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1a4774.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4778.  v4:= length @variable v4;
  #L1a477a.  v4:= v4 + -1;
  #L1a477e.  v8.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v4;
  #L1a4782.  v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v2 @kind object;
  #L1a4786.  v3:= v8.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a478a.  v4:= v3 + -1;
  #L1a478e.  v8.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v4;
  #L1a4792.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4796.  v4[v3]:= v9 @kind object;
  #L1a479a.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a479e.  v4:= v4 + 1;
  #L1a47a2.  v8.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v4;
  #L1a47a6.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a47aa.  v4:= v4 + v1 @kind int;
  #L1a47ac.  v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v4;
  #L1a47b0.  goto L1a4726;
}
procedure `void` `setHeaderTableSizeSetting`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `int` v3 @name `headerTableSizeSetting`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.setHeaderTableSizeSetting:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a47c4.  v2.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v3;
  #L1a47c8.  v1:= 16384I;
  #L1a47cc.  call temp:= `min`(v3, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1a47d2.  v0:= temp;
  #L1a47d4.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a47d8.  if v1 != v0 then goto L1a47de;
  #L1a47dc.  return @kind void;
  #L1a47de.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a47e2.  if v0 >= v1 then goto L1a47f6;
  #L1a47e6.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L1a47ea.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1a47f0.  v1:= temp;
  #L1a47f2.  v2.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v1;
  #L1a47f6.  v1:= 1I;
  #L1a47f8.  v2.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v1 @kind boolean;
  #L1a47fc.  v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v0;
  #L1a4800.  call `adjustDynamicTableByteCount`(v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @kind direct;
  #L1a4806.  goto L1a47dc;
}
procedure `void` `writeByteString`(`okhttp3.internal.http2.Hpack$Writer` v5 @kind this, `okio.ByteString` v6 @kind object @name `data`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a4818.  v4:= 127I;
  #L1a481c.  v2:= v5.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` @kind boolean;
  #L1a4820.  if v2 == 0 then goto L1a487e;
  #L1a4824.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L1a482a.  v2:= temp @kind object;
  #L1a482c.  call temp:= `encodedLength`(v2, v6) @signature `Lokhttp3/internal/http2/Huffman;.encodedLength:(Lokio/ByteString;)I` @kind virtual;
  #L1a4832.  v2:= temp;
  #L1a4834.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a483a.  v3:= temp;
  #L1a483c.  if v2 >= v3 then goto L1a487e;
  #L1a4840.  v0:= new `okio.Buffer`;
  #L1a4844.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1a484a.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L1a4850.  v2:= temp @kind object;
  #L1a4852.  call `encode`(v2, v6, v0) @signature `Lokhttp3/internal/http2/Huffman;.encode:(Lokio/ByteString;Lokio/BufferedSink;)V` @kind virtual;
  #L1a4858.  call temp:= `readByteString`(v0) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1a485e.  v1:= temp @kind object;
  #L1a4860.  call temp:= `size`(v1) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a4866.  v2:= temp;
  #L1a4868.  v3:= 128I;
  #L1a486c.  call `writeInt`(v5, v2, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a4872.  v2:= v5.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a4876.  call temp:= `write`(v2, v1) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L1a487c.  return @kind void;
  #L1a487e.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a4884.  v2:= temp;
  #L1a4886.  v3:= 0I;
  #L1a4888.  call `writeInt`(v5, v2, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a488e.  v2:= v5.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a4892.  call temp:= `write`(v2, v6) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L1a4898.  goto L1a487c;
}
procedure `void` `writeHeaders`(`okhttp3.internal.http2.Hpack$Writer` v13 @kind this, `java.util.List` v14 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeHeaders:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1a48ac.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` @kind boolean;
  #L1a48b0.  if v10 == 0 then goto L1a48f4;
  #L1a48b4.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L1a48b8.  v11:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a48bc.  if v10 >= v11 then goto L1a48d2;
  #L1a48c0.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L1a48c4.  v11:= 31I;
  #L1a48c8.  v12:= 32I;
  #L1a48cc.  call `writeInt`(v13, v10, v11, v12) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a48d2.  v10:= 0I;
  #L1a48d4.  v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v10 @kind boolean;
  #L1a48d8.  v10:= 2147483647I;
  #L1a48de.  v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v10;
  #L1a48e2.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a48e6.  v11:= 31I;
  #L1a48ea.  v12:= 32I;
  #L1a48ee.  call `writeInt`(v13, v10, v11, v12) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a48f4.  v3:= 0I;
  #L1a48f6.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1a48fc.  v7:= temp;
  #L1a48fe.  if v3 >= v7 then goto L1a4a96;
  #L1a4902.  call temp:= `get`(v14, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1a4908.  v0:= temp @kind object;
  #L1a490a.  v0:= (`okhttp3.internal.http2.Header`) v0 @kind object;
  #L1a490e.  v10:= v0.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L1a4912.  call temp:= `toAsciiLowercase`(v10) @signature `Lokio/ByteString;.toAsciiLowercase:()Lokio/ByteString;` @kind virtual;
  #L1a4918.  v6:= temp @kind object;
  #L1a491a.  v9:= v0.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a491e.  v1:= -1I;
  #L1a4920.  v2:= -1I;
  #L1a4922.  v10:= `@@okhttp3.internal.http2.Hpack.NAME_TO_FIRST_INDEX` @type ^`java.util.Map` @kind object;
  #L1a4926.  call temp:= `get`(v10, v6) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1a492c.  v8:= temp @kind object;
  #L1a492e.  v8:= (`java.lang.Integer`) v8 @kind object;
  #L1a4932.  if v8 == 0 then goto L1a496e;
  #L1a4936.  call temp:= `intValue`(v8) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1a493c.  v10:= temp;
  #L1a493e.  v2:= v10 + 1;
  #L1a4942.  v10:= 1I;
  #L1a4944.  if v2 <= v10 then goto L1a496e;
  #L1a4948.  v10:= 8I;
  #L1a494c.  if v2 >= v10 then goto L1a496e;
  #L1a4950.  v10:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4954.  v11:= v2 + -1;
  #L1a4958.  v10:= v10[v11] @kind object;
  #L1a495c.  v10:= v10.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a4960.  call temp:= `equal`(v10, v9) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a4966.  v10:= temp;
  #L1a4968.  if v10 == 0 then goto L1a49e2;
  #L1a496c.  v1:= v2;
  #L1a496e.  v10:= -1I;
  #L1a4970.  if v1 != v10 then goto L1a49c8;
  #L1a4974.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a4978.  v4:= v10 + 1;
  #L1a497c.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4980.  v5:= length @variable v10;
  #L1a4982.  if v4 >= v5 then goto L1a49c8;
  #L1a4986.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a498a.  v10:= v10[v4] @kind object;
  #L1a498e.  v10:= v10.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L1a4992.  call temp:= `equal`(v10, v6) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a4998.  v10:= temp;
  #L1a499a.  if v10 == 0 then goto L1a4a18;
  #L1a499e.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a49a2.  v10:= v10[v4] @kind object;
  #L1a49a6.  v10:= v10.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a49aa.  call temp:= `equal`(v10, v9) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a49b0.  v10:= temp;
  #L1a49b2.  if v10 == 0 then goto L1a4a00;
  #L1a49b6.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a49ba.  v10:= v4 - v10 @kind int;
  #L1a49be.  v11:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a49c2.  v11:= length @variable v11;
  #L1a49c4.  v1:= v10 + v11 @kind int;
  #L1a49c8.  v10:= -1I;
  #L1a49ca.  if v1 == v10 then goto L1a4a1e;
  #L1a49ce.  v10:= 127I;
  #L1a49d2.  v11:= 128I;
  #L1a49d6.  call `writeInt`(v13, v1, v10, v11) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a49dc.  v3:= v3 + 1;
  #L1a49e0.  goto L1a48fe;
  #L1a49e2.  v10:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a49e6.  v10:= v10[v2] @kind object;
  #L1a49ea.  v10:= v10.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a49ee.  call temp:= `equal`(v10, v9) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a49f4.  v10:= temp;
  #L1a49f6.  if v10 == 0 then goto L1a496e;
  #L1a49fa.  v1:= v2 + 1;
  #L1a49fe.  goto L1a496e;
  #L1a4a00.  v10:= -1I;
  #L1a4a02.  if v2 != v10 then goto L1a4a18;
  #L1a4a06.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a4a0a.  v10:= v4 - v10 @kind int;
  #L1a4a0e.  v11:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4a12.  v11:= length @variable v11;
  #L1a4a14.  v2:= v10 + v11 @kind int;
  #L1a4a18.  v4:= v4 + 1;
  #L1a4a1c.  goto L1a4982;
  #L1a4a1e.  v10:= -1I;
  #L1a4a20.  if v2 != v10 then goto L1a4a46;
  #L1a4a24.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a4a28.  v11:= 64I;
  #L1a4a2c.  call temp:= `writeByte`(v10, v11) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a4a32.  call `writeByteString`(v13, v6) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a4a38.  call `writeByteString`(v13, v9) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a4a3e.  call `insertIntoDynamicTable`(v13, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L1a4a44.  goto L1a49dc;
  #L1a4a46.  v10:= `@@okhttp3.internal.http2.Header.PSEUDO_PREFIX` @type ^`okio.ByteString` @kind object;
  #L1a4a4a.  call temp:= `startsWith`(v6, v10) @signature `Lokio/ByteString;.startsWith:(Lokio/ByteString;)Z` @kind virtual;
  #L1a4a50.  v10:= temp;
  #L1a4a52.  if v10 == 0 then goto L1a4a7a;
  #L1a4a56.  v10:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L1a4a5a.  call temp:= `equals`(v10, v6) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a4a60.  v10:= temp;
  #L1a4a62.  if v10 != 0 then goto L1a4a7a;
  #L1a4a66.  v10:= 15I;
  #L1a4a6a.  v11:= 0I;
  #L1a4a6c.  call `writeInt`(v13, v2, v10, v11) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a4a72.  call `writeByteString`(v13, v9) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a4a78.  goto L1a49dc;
  #L1a4a7a.  v10:= 63I;
  #L1a4a7e.  v11:= 64I;
  #L1a4a82.  call `writeInt`(v13, v2, v10, v11) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a4a88.  call `writeByteString`(v13, v9) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a4a8e.  call `insertIntoDynamicTable`(v13, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L1a4a94.  goto L1a49dc;
  #L1a4a96.  return @kind void;
}
procedure `void` `writeInt`(`okhttp3.internal.http2.Hpack$Writer` v3 @kind this, `int` v4 @name `value`, `int` v5 @name `prefixMask`, `int` v6 @name `bits`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a4aa8.  if v4 >= v5 then goto L1a4abc;
  #L1a4aac.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a4ab0.  v2:= v6 ^| v4 @kind int;
  #L1a4ab4.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a4aba.  return @kind void;
  #L1a4abc.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a4ac0.  v2:= v6 ^| v5 @kind int;
  #L1a4ac4.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a4aca.  v4:= v4 - v5 @kind int;
  #L1a4acc.  v1:= 128I;
  #L1a4ad0.  if v4 < v1 then goto L1a4aec;
  #L1a4ad4.  v0:= v4 ^& 127;
  #L1a4ad8.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a4adc.  v2:= v0 ^| 128;
  #L1a4ae0.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a4ae6.  v4:= v4 ^>> 7;
  #L1a4aea.  goto L1a4acc;
  #L1a4aec.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a4af0.  call temp:= `writeByte`(v1, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a4af6.  goto L1a4aba;
}
