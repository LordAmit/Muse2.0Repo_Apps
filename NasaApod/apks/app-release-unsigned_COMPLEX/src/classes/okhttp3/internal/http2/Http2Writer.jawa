record `okhttp3.internal.http2.Http2Writer` @kind class @AccessFlag FINAL extends `java.io.Closeable` @kind interface {
  `boolean` `okhttp3.internal.http2.Http2Writer.client` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.http2.Http2Writer.closed` @AccessFlag PRIVATE;
  `okio.Buffer` `okhttp3.internal.http2.Http2Writer.hpackBuffer` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Hpack$Writer` `okhttp3.internal.http2.Http2Writer.hpackWriter` @AccessFlag FINAL;
  `int` `okhttp3.internal.http2.Http2Writer.maxFrameSize` @AccessFlag PRIVATE;
  `okio.BufferedSink` `okhttp3.internal.http2.Http2Writer.sink` @AccessFlag PRIVATE_FINAL;
}
global `java.util.logging.Logger` `@@okhttp3.internal.http2.Http2Writer.logger` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Writer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a7794.  v0:= constclass @type ^`okhttp3.internal.http2.Http2` @kind object;
  #L1a7798.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1a779e.  v0:= temp @kind object;
  #L1a77a0.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L1a77a6.  v0:= temp @kind object;
  #L1a77a8.  `@@okhttp3.internal.http2.Http2Writer.logger` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L1a77ac.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Writer` v2 @kind this, `okio.BufferedSink` v3 @kind object @name `sink`, `boolean` v4 @name `client`) @signature `Lokhttp3/internal/http2/Http2Writer;.<init>:(Lokio/BufferedSink;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1a77c0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a77c6.  v2.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` := v3 @kind object;
  #L1a77ca.  v2.`okhttp3.internal.http2.Http2Writer.client` @type ^`boolean` := v4 @kind boolean;
  #L1a77ce.  v0:= new `okio.Buffer`;
  #L1a77d2.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1a77d8.  v2.`okhttp3.internal.http2.Http2Writer.hpackBuffer` @type ^`okio.Buffer` := v0 @kind object;
  #L1a77dc.  v0:= new `okhttp3.internal.http2.Hpack$Writer`;
  #L1a77e0.  v1:= v2.`okhttp3.internal.http2.Http2Writer.hpackBuffer` @type ^`okio.Buffer` @kind object;
  #L1a77e4.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L1a77ea.  v2.`okhttp3.internal.http2.Http2Writer.hpackWriter` @type ^`okhttp3.internal.http2.Hpack$Writer` := v0 @kind object;
  #L1a77ee.  v0:= 16384I;
  #L1a77f2.  v2.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int` := v0;
  #L1a77f6.  return @kind void;
}
procedure `void` `writeContinuationFrames`(`okhttp3.internal.http2.Http2Writer` v8 @kind this, `int` v9 @name `streamId`, `long` v10 @name `byteCount`) @signature `Lokhttp3/internal/http2/Http2Writer;.writeContinuationFrames:(IJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a7808.  v6:= 0L;
  #L1a780c.  v1:= lcmp(v10, v6);
  #L1a7810.  if v1 <= 0 then goto L1a7852;
  #L1a7814.  v1:= v8.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int`;
  #L1a7818.  v2:= (`long`) v1 @kind i2l;
  #L1a781a.  call temp:= `min`(v2, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1a7820.  v2:= temp @kind wide;
  #L1a7822.  v0:= (`int`) v2 @kind l2i;
  #L1a7824.  v2:= (`long`) v0 @kind i2l;
  #L1a7826.  v10:= v10 - v2 @kind long;
  #L1a7828.  v2:= 9I;
  #L1a782c.  v1:= lcmp(v10, v6);
  #L1a7830.  if v1 != 0 then goto L1a784e;
  #L1a7834.  v1:= 4I;
  #L1a7836.  call `frameHeader`(v8, v9, v0, v2, v1) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L1a783c.  v1:= v8.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7840.  v2:= v8.`okhttp3.internal.http2.Http2Writer.hpackBuffer` @type ^`okio.Buffer` @kind object;
  #L1a7844.  v4:= (`long`) v0 @kind i2l;
  #L1a7846.  call `write`(v1, v2, v4) @signature `Lokio/BufferedSink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L1a784c.  goto L1a780c;
  #L1a784e.  v1:= 0I;
  #L1a7850.  goto L1a7836;
  #L1a7852.  return @kind void;
}
procedure `void` `writeMedium`(`okio.BufferedSink` v1 @kind object @name `sink`, `int` v2 @name `i`) @signature `Lokhttp3/internal/http2/Http2Writer;.writeMedium:(Lokio/BufferedSink;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1a7864.  v0:= v2 ^>> 16;
  #L1a7868.  v0:= v0 ^& 255;
  #L1a786c.  call temp:= `writeByte`(v1, v0) @signature `Lokio/BufferedSink;.writeByte:(I)Lokio/BufferedSink;` @kind interface;
  #L1a7872.  v0:= v2 ^>> 8;
  #L1a7876.  v0:= v0 ^& 255;
  #L1a787a.  call temp:= `writeByte`(v1, v0) @signature `Lokio/BufferedSink;.writeByte:(I)Lokio/BufferedSink;` @kind interface;
  #L1a7880.  v0:= v2 ^& 255;
  #L1a7884.  call temp:= `writeByte`(v1, v0) @signature `Lokio/BufferedSink;.writeByte:(I)Lokio/BufferedSink;` @kind interface;
  #L1a788a.  return @kind void;
}
procedure `void` `applyAndAckSettings`(`okhttp3.internal.http2.Http2Writer` v6 @kind this, `okhttp3.internal.http2.Settings` v7 @kind object @name `peerSettings`) @signature `Lokhttp3/internal/http2/Http2Writer;.applyAndAckSettings:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1a789c.  @monitorenter v6
  #Try_start0.  
  #L1a789e.  v4:= v6.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L1a78a2.  if v4 == 0 then goto L1a78bc;
  #L1a78a6.  v4:= new `java.io.IOException`;
  #L1a78aa.  v5:= "closed" @kind object;
  #L1a78ae.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a78b4.  throw v4;
  #Try_end0.  
  #L1a78b6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a78b8.  @monitorexit v6
  #L1a78ba.  throw v4;
  #Try_start1.  
  #L1a78bc.  v4:= v6.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int`;
  #L1a78c0.  call temp:= `getMaxFrameSize`(v7, v4) @signature `Lokhttp3/internal/http2/Settings;.getMaxFrameSize:(I)I` @kind virtual;
  #L1a78c6.  v4:= temp;
  #L1a78c8.  v6.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int` := v4;
  #L1a78cc.  call temp:= `getHeaderTableSize`(v7) @signature `Lokhttp3/internal/http2/Settings;.getHeaderTableSize:()I` @kind virtual;
  #L1a78d2.  v4:= temp;
  #L1a78d4.  v5:= -1I;
  #L1a78d6.  if v4 == v5 then goto L1a78ec;
  #L1a78da.  v4:= v6.`okhttp3.internal.http2.Http2Writer.hpackWriter` @type ^`okhttp3.internal.http2.Hpack$Writer` @kind object;
  #L1a78de.  call temp:= `getHeaderTableSize`(v7) @signature `Lokhttp3/internal/http2/Settings;.getHeaderTableSize:()I` @kind virtual;
  #L1a78e4.  v5:= temp;
  #L1a78e6.  call `setHeaderTableSizeSetting`(v4, v5) @signature `Lokhttp3/internal/http2/Hpack$Writer;.setHeaderTableSizeSetting:(I)V` @kind virtual;
  #L1a78ec.  v1:= 0I;
  #L1a78ee.  v3:= 4I;
  #L1a78f0.  v0:= 1I;
  #L1a78f2.  v2:= 0I;
  #L1a78f4.  call `frameHeader`(v6, v2, v1, v3, v0) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L1a78fa.  v4:= v6.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a78fe.  call `flush`(v4) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #Try_end1.  
  #L1a7904.  @monitorexit v6
  #L1a7906.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a78b6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a78b6;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Writer` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Writer;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a792c.  @monitorenter v1
  #L1a792e.  v0:= 1I;
  #Try_start0.  
  #L1a7930.  v1.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` := v0 @kind boolean;
  #L1a7934.  v0:= v1.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7938.  call `close`(v0) @signature `Lokio/BufferedSink;.close:()V` @kind interface;
  #Try_end0.  
  #L1a793e.  @monitorexit v1
  #L1a7940.  return @kind void;
  #L1a7942.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a7944.  @monitorexit v1
  #L1a7946.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a7942;
}
procedure `void` `connectionPreface`(`okhttp3.internal.http2.Http2Writer` v5 @kind this) @signature `Lokhttp3/internal/http2/Http2Writer;.connectionPreface:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a7964.  @monitorenter v5
  #Try_start0.  
  #L1a7966.  v0:= v5.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L1a796a.  if v0 == 0 then goto L1a7984;
  #L1a796e.  v0:= new `java.io.IOException`;
  #L1a7972.  v1:= "closed" @kind object;
  #L1a7976.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a797c.  throw v0;
  #Try_end0.  
  #L1a797e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a7980.  @monitorexit v5
  #L1a7982.  throw v0;
  #Try_start1.  
  #L1a7984.  v0:= v5.`okhttp3.internal.http2.Http2Writer.client` @type ^`boolean` @kind boolean;
  #Try_end1.  
  #L1a7988.  if v0 != 0 then goto L1a7990;
  #L1a798c.  @monitorexit v5
  #L1a798e.  return @kind void;
  #Try_start2.  
  #L1a7990.  v0:= `@@okhttp3.internal.http2.Http2Writer.logger` @type ^`java.util.logging.Logger` @kind object;
  #L1a7994.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L1a7998.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L1a799e.  v0:= temp;
  #L1a79a0.  if v0 == 0 then goto L1a79d2;
  #L1a79a4.  v0:= `@@okhttp3.internal.http2.Http2Writer.logger` @type ^`java.util.logging.Logger` @kind object;
  #L1a79a8.  v1:= ">> CONNECTION %s" @kind object;
  #L1a79ac.  v2:= 1I;
  #L1a79ae.  v2:= new `java.lang.Object`[v2];
  #L1a79b2.  v3:= 0I;
  #L1a79b4.  v4:= `@@okhttp3.internal.http2.Http2.CONNECTION_PREFACE` @type ^`okio.ByteString` @kind object;
  #L1a79b8.  call temp:= `hex`(v4) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L1a79be.  v4:= temp @kind object;
  #L1a79c0.  v2[v3]:= v4 @kind object;
  #L1a79c4.  call temp:= `format`(v1, v2) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1a79ca.  v1:= temp @kind object;
  #L1a79cc.  call `fine`(v0, v1) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L1a79d2.  v0:= v5.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a79d6.  v1:= `@@okhttp3.internal.http2.Http2.CONNECTION_PREFACE` @type ^`okio.ByteString` @kind object;
  #L1a79da.  call temp:= `toByteArray`(v1) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L1a79e0.  v1:= temp @kind object;
  #L1a79e2.  call temp:= `write`(v0, v1) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L1a79e8.  v0:= v5.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a79ec.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #Try_end2.  
  #L1a79f2.  goto L1a798c;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a797e;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a797e;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L1a797e;
}
procedure `void` `data`(`okhttp3.internal.http2.Http2Writer` v3 @kind this, `boolean` v4 @name `outFinished`, `int` v5 @name `streamId`, `okio.Buffer` v6 @kind object @name `source`, `int` v7 @name `byteCount`) @signature `Lokhttp3/internal/http2/Http2Writer;.data:(ZILokio/Buffer;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a7a20.  @monitorenter v3
  #Try_start0.  
  #L1a7a22.  v1:= v3.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L1a7a26.  if v1 == 0 then goto L1a7a40;
  #L1a7a2a.  v1:= new `java.io.IOException`;
  #L1a7a2e.  v2:= "closed" @kind object;
  #L1a7a32.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a7a38.  throw v1;
  #Try_end0.  
  #L1a7a3a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a7a3c.  @monitorexit v3
  #L1a7a3e.  throw v1;
  #L1a7a40.  v0:= 0I;
  #L1a7a42.  if v4 == 0 then goto L1a7a4a;
  #L1a7a46.  v1:= 1I;
  #L1a7a48.  v0:= (`byte`) v1 @kind i2b;
  #Try_start1.  
  #L1a7a4a.  call `dataFrame`(v3, v5, v0, v6, v7) @signature `Lokhttp3/internal/http2/Http2Writer;.dataFrame:(IBLokio/Buffer;I)V` @kind virtual;
  #Try_end1.  
  #L1a7a50.  @monitorexit v3
  #L1a7a52.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a7a3a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a7a3a;
}
procedure `void` `dataFrame`(`okhttp3.internal.http2.Http2Writer` v4 @kind this, `int` v5 @name `streamId`, `byte` v6 @name `flags`, `okio.Buffer` v7 @kind object @name `buffer`, `int` v8 @name `byteCount`) @signature `Lokhttp3/internal/http2/Http2Writer;.dataFrame:(IBLokio/Buffer;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a7a78.  v0:= 0I;
  #L1a7a7a.  call `frameHeader`(v4, v5, v8, v0, v6) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L1a7a80.  if v8 <= 0 then goto L1a7a90;
  #L1a7a84.  v1:= v4.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7a88.  v2:= (`long`) v8 @kind i2l;
  #L1a7a8a.  call `write`(v1, v7, v2) @signature `Lokio/BufferedSink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L1a7a90.  return @kind void;
}
procedure `void` `flush`(`okhttp3.internal.http2.Http2Writer` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Writer;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a7aa4.  @monitorenter v2
  #Try_start0.  
  #L1a7aa6.  v0:= v2.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L1a7aaa.  if v0 == 0 then goto L1a7ac4;
  #L1a7aae.  v0:= new `java.io.IOException`;
  #L1a7ab2.  v1:= "closed" @kind object;
  #L1a7ab6.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a7abc.  throw v0;
  #Try_end0.  
  #L1a7abe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a7ac0.  @monitorexit v2
  #L1a7ac2.  throw v0;
  #Try_start1.  
  #L1a7ac4.  v0:= v2.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7ac8.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #Try_end1.  
  #L1a7ace.  @monitorexit v2
  #L1a7ad0.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a7abe;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a7abe;
}
procedure `void` `frameHeader`(`okhttp3.internal.http2.Http2Writer` v5 @kind this, `int` v6 @name `streamId`, `int` v7 @name `length`, `byte` v8 @name `type`, `byte` v9 @name `flags`) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a7af8.  v4:= 1I;
  #L1a7afa.  v3:= 0I;
  #L1a7afc.  v0:= `@@okhttp3.internal.http2.Http2Writer.logger` @type ^`java.util.logging.Logger` @kind object;
  #L1a7b00.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L1a7b04.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L1a7b0a.  v0:= temp;
  #L1a7b0c.  if v0 == 0 then goto L1a7b22;
  #L1a7b10.  v0:= `@@okhttp3.internal.http2.Http2Writer.logger` @type ^`java.util.logging.Logger` @kind object;
  #L1a7b14.  call temp:= `frameLog`(v3, v6, v7, v8, v9) @signature `Lokhttp3/internal/http2/Http2;.frameLog:(ZIIBB)Ljava/lang/String;` @kind static;
  #L1a7b1a.  v1:= temp @kind object;
  #L1a7b1c.  call `fine`(v0, v1) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L1a7b22.  v0:= v5.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int`;
  #L1a7b26.  if v7 <= v0 then goto L1a7b5a;
  #L1a7b2a.  v0:= "FRAME_SIZE_ERROR length > %d: %d" @kind object;
  #L1a7b2e.  v1:= 2I;
  #L1a7b30.  v1:= new `java.lang.Object`[v1];
  #L1a7b34.  v2:= v5.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int`;
  #L1a7b38.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a7b3e.  v2:= temp @kind object;
  #L1a7b40.  v1[v3]:= v2 @kind object;
  #L1a7b44.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a7b4a.  v2:= temp @kind object;
  #L1a7b4c.  v1[v4]:= v2 @kind object;
  #L1a7b50.  call temp:= `illegalArgument`(v0, v1) @signature `Lokhttp3/internal/http2/Http2;.illegalArgument:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L1a7b56.  v0:= temp @kind object;
  #L1a7b58.  throw v0;
  #L1a7b5a.  v0:= -2147483648I;
  #L1a7b5e.  v0:= v0 ^& v6 @kind int;
  #L1a7b60.  if v0 == 0 then goto L1a7b82;
  #L1a7b64.  v0:= "reserved bit set: %s" @kind object;
  #L1a7b68.  v1:= new `java.lang.Object`[v4];
  #L1a7b6c.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a7b72.  v2:= temp @kind object;
  #L1a7b74.  v1[v3]:= v2 @kind object;
  #L1a7b78.  call temp:= `illegalArgument`(v0, v1) @signature `Lokhttp3/internal/http2/Http2;.illegalArgument:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L1a7b7e.  v0:= temp @kind object;
  #L1a7b80.  throw v0;
  #L1a7b82.  v0:= v5.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7b86.  call `writeMedium`(v0, v7) @signature `Lokhttp3/internal/http2/Http2Writer;.writeMedium:(Lokio/BufferedSink;I)V` @kind static;
  #L1a7b8c.  v0:= v5.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7b90.  v1:= v8 ^& 255;
  #L1a7b94.  call temp:= `writeByte`(v0, v1) @signature `Lokio/BufferedSink;.writeByte:(I)Lokio/BufferedSink;` @kind interface;
  #L1a7b9a.  v0:= v5.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7b9e.  v1:= v9 ^& 255;
  #L1a7ba2.  call temp:= `writeByte`(v0, v1) @signature `Lokio/BufferedSink;.writeByte:(I)Lokio/BufferedSink;` @kind interface;
  #L1a7ba8.  v0:= v5.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7bac.  v1:= 2147483647I;
  #L1a7bb2.  v1:= v1 ^& v6 @kind int;
  #L1a7bb4.  call temp:= `writeInt`(v0, v1) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L1a7bba.  return @kind void;
}
procedure `void` `goAway`(`okhttp3.internal.http2.Http2Writer` v6 @kind this, `int` v7 @name `lastGoodStreamId`, `okhttp3.internal.http2.ErrorCode` v8 @kind object @name `errorCode`, `byte`[] v9 @kind object @name `debugData`) @signature `Lokhttp3/internal/http2/Http2Writer;.goAway:(ILokhttp3/internal/http2/ErrorCode;[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1a7bcc.  @monitorenter v6
  #Try_start0.  
  #L1a7bce.  v4:= v6.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L1a7bd2.  if v4 == 0 then goto L1a7bec;
  #L1a7bd6.  v4:= new `java.io.IOException`;
  #L1a7bda.  v5:= "closed" @kind object;
  #L1a7bde.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a7be4.  throw v4;
  #Try_end0.  
  #L1a7be6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a7be8.  @monitorexit v6
  #L1a7bea.  throw v4;
  #Try_start1.  
  #L1a7bec.  v4:= v8.`okhttp3.internal.http2.ErrorCode.httpCode` @type ^`int`;
  #L1a7bf0.  v5:= -1I;
  #L1a7bf2.  if v4 != v5 then goto L1a7c0a;
  #L1a7bf6.  v4:= "errorCode.httpCode == -1" @kind object;
  #L1a7bfa.  v5:= 0I;
  #L1a7bfc.  v5:= new `java.lang.Object`[v5];
  #L1a7c00.  call temp:= `illegalArgument`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.illegalArgument:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L1a7c06.  v4:= temp @kind object;
  #L1a7c08.  throw v4;
  #L1a7c0a.  v4:= length @variable v9;
  #L1a7c0c.  v1:= v4 + 8;
  #L1a7c10.  v3:= 7I;
  #L1a7c12.  v0:= 0I;
  #L1a7c14.  v2:= 0I;
  #L1a7c16.  call `frameHeader`(v6, v2, v1, v3, v0) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L1a7c1c.  v4:= v6.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7c20.  call temp:= `writeInt`(v4, v7) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L1a7c26.  v4:= v6.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7c2a.  v5:= v8.`okhttp3.internal.http2.ErrorCode.httpCode` @type ^`int`;
  #L1a7c2e.  call temp:= `writeInt`(v4, v5) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L1a7c34.  v4:= length @variable v9;
  #L1a7c36.  if v4 <= 0 then goto L1a7c44;
  #L1a7c3a.  v4:= v6.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7c3e.  call temp:= `write`(v4, v9) @signature `Lokio/BufferedSink;.write:([B)Lokio/BufferedSink;` @kind interface;
  #L1a7c44.  v4:= v6.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7c48.  call `flush`(v4) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #Try_end1.  
  #L1a7c4e.  @monitorexit v6
  #L1a7c50.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a7be6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a7be6;
}
procedure `void` `headers`(`okhttp3.internal.http2.Http2Writer` v2 @kind this, `int` v3 @name `streamId`, `java.util.List` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2Writer;.headers:(ILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a7c78.  @monitorenter v2
  #Try_start0.  
  #L1a7c7a.  v0:= v2.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L1a7c7e.  if v0 == 0 then goto L1a7c98;
  #L1a7c82.  v0:= new `java.io.IOException`;
  #L1a7c86.  v1:= "closed" @kind object;
  #L1a7c8a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a7c90.  throw v0;
  #Try_end0.  
  #L1a7c92.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a7c94.  @monitorexit v2
  #L1a7c96.  throw v0;
  #L1a7c98.  v0:= 0I;
  #Try_start1.  
  #L1a7c9a.  call `headers`(v2, v0, v3, v4) @signature `Lokhttp3/internal/http2/Http2Writer;.headers:(ZILjava/util/List;)V` @kind virtual;
  #Try_end1.  
  #L1a7ca0.  @monitorexit v2
  #L1a7ca2.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a7c92;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a7c92;
}
procedure `void` `headers`(`okhttp3.internal.http2.Http2Writer` v10 @kind this, `boolean` v11 @name `outFinished`, `int` v12 @name `streamId`, `java.util.List` v13 @kind object) @signature `Lokhttp3/internal/http2/Http2Writer;.headers:(ZILjava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1a7cc8.  v5:= v10.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L1a7ccc.  if v5 == 0 then goto L1a7ce0;
  #L1a7cd0.  v5:= new `java.io.IOException`;
  #L1a7cd4.  v6:= "closed" @kind object;
  #L1a7cd8.  call `<init>`(v5, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a7cde.  throw v5;
  #L1a7ce0.  v5:= v10.`okhttp3.internal.http2.Http2Writer.hpackWriter` @type ^`okhttp3.internal.http2.Hpack$Writer` @kind object;
  #L1a7ce4.  call `writeHeaders`(v5, v13) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeHeaders:(Ljava/util/List;)V` @kind virtual;
  #L1a7cea.  v5:= v10.`okhttp3.internal.http2.Http2Writer.hpackBuffer` @type ^`okio.Buffer` @kind object;
  #L1a7cee.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1a7cf4.  v0:= temp @kind wide;
  #L1a7cf6.  v5:= v10.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int`;
  #L1a7cfa.  v6:= (`long`) v5 @kind i2l;
  #L1a7cfc.  call temp:= `min`(v6, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1a7d02.  v6:= temp @kind wide;
  #L1a7d04.  v3:= (`int`) v6 @kind l2i;
  #L1a7d06.  v4:= 1I;
  #L1a7d08.  v6:= (`long`) v3 @kind i2l;
  #L1a7d0a.  v5:= lcmp(v0, v6);
  #L1a7d0e.  if v5 != 0 then goto L1a7d4c;
  #L1a7d12.  v2:= 4I;
  #L1a7d14.  if v11 == 0 then goto L1a7d1e;
  #L1a7d18.  v5:= v2 ^| 1;
  #L1a7d1c.  v2:= (`byte`) v5 @kind i2b;
  #L1a7d1e.  call `frameHeader`(v10, v12, v3, v4, v2) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L1a7d24.  v5:= v10.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7d28.  v6:= v10.`okhttp3.internal.http2.Http2Writer.hpackBuffer` @type ^`okio.Buffer` @kind object;
  #L1a7d2c.  v8:= (`long`) v3 @kind i2l;
  #L1a7d2e.  call `write`(v5, v6, v8) @signature `Lokio/BufferedSink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L1a7d34.  v6:= (`long`) v3 @kind i2l;
  #L1a7d36.  v5:= lcmp(v0, v6);
  #L1a7d3a.  if v5 <= 0 then goto L1a7d4a;
  #L1a7d3e.  v6:= (`long`) v3 @kind i2l;
  #L1a7d40.  v6:= v0 - v6 @kind long;
  #L1a7d44.  call `writeContinuationFrames`(v10, v12, v6) @signature `Lokhttp3/internal/http2/Http2Writer;.writeContinuationFrames:(IJ)V` @kind direct;
  #L1a7d4a.  return @kind void;
  #L1a7d4c.  v2:= 0I;
  #L1a7d4e.  goto L1a7d14;
}
procedure `int` `maxDataLength`(`okhttp3.internal.http2.Http2Writer` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Writer;.maxDataLength:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a7d60.  v0:= v1.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int`;
  #L1a7d64.  return v0;
}
procedure `void` `ping`(`okhttp3.internal.http2.Http2Writer` v6 @kind this, `boolean` v7 @name `ack`, `int` v8 @name `payload1`, `int` v9 @name `payload2`) @signature `Lokhttp3/internal/http2/Http2Writer;.ping:(ZII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1a7d78.  @monitorenter v6
  #Try_start0.  
  #L1a7d7a.  v4:= v6.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L1a7d7e.  if v4 == 0 then goto L1a7d98;
  #L1a7d82.  v4:= new `java.io.IOException`;
  #L1a7d86.  v5:= "closed" @kind object;
  #L1a7d8a.  call `<init>`(v4, v5) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a7d90.  throw v4;
  #Try_end0.  
  #L1a7d92.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a7d94.  @monitorexit v6
  #L1a7d96.  throw v4;
  #L1a7d98.  v1:= 8I;
  #L1a7d9c.  v3:= 6I;
  #L1a7d9e.  if v7 == 0 then goto L1a7dce;
  #L1a7da2.  v0:= 1I;
  #L1a7da4.  v2:= 0I;
  #Try_start1.  
  #L1a7da6.  call `frameHeader`(v6, v2, v1, v3, v0) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L1a7dac.  v4:= v6.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7db0.  call temp:= `writeInt`(v4, v8) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L1a7db6.  v4:= v6.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7dba.  call temp:= `writeInt`(v4, v9) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L1a7dc0.  v4:= v6.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7dc4.  call `flush`(v4) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #Try_end1.  
  #L1a7dca.  @monitorexit v6
  #L1a7dcc.  return @kind void;
  #L1a7dce.  v0:= 0I;
  #L1a7dd0.  goto L1a7da4;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a7d92;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a7d92;
}
procedure `void` `pushPromise`(`okhttp3.internal.http2.Http2Writer` v10 @kind this, `int` v11 @name `streamId`, `int` v12 @name `promisedStreamId`, `java.util.List` v13 @kind object) @signature `Lokhttp3/internal/http2/Http2Writer;.pushPromise:(IILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1a7df8.  @monitorenter v10
  #Try_start0.  
  #L1a7dfa.  v5:= v10.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L1a7dfe.  if v5 == 0 then goto L1a7e18;
  #L1a7e02.  v5:= new `java.io.IOException`;
  #L1a7e06.  v6:= "closed" @kind object;
  #L1a7e0a.  call `<init>`(v5, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a7e10.  throw v5;
  #Try_end0.  
  #L1a7e12.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a7e14.  @monitorexit v10
  #L1a7e16.  throw v5;
  #Try_start1.  
  #L1a7e18.  v5:= v10.`okhttp3.internal.http2.Http2Writer.hpackWriter` @type ^`okhttp3.internal.http2.Hpack$Writer` @kind object;
  #L1a7e1c.  call `writeHeaders`(v5, v13) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeHeaders:(Ljava/util/List;)V` @kind virtual;
  #L1a7e22.  v5:= v10.`okhttp3.internal.http2.Http2Writer.hpackBuffer` @type ^`okio.Buffer` @kind object;
  #L1a7e26.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1a7e2c.  v0:= temp @kind wide;
  #L1a7e2e.  v5:= v10.`okhttp3.internal.http2.Http2Writer.maxFrameSize` @type ^`int`;
  #L1a7e32.  v5:= v5 + -4;
  #L1a7e36.  v6:= (`long`) v5 @kind i2l;
  #L1a7e38.  call temp:= `min`(v6, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1a7e3e.  v6:= temp @kind wide;
  #L1a7e40.  v3:= (`int`) v6 @kind l2i;
  #L1a7e42.  v4:= 5I;
  #L1a7e44.  v6:= (`long`) v3 @kind i2l;
  #L1a7e46.  v5:= lcmp(v0, v6);
  #L1a7e4a.  if v5 != 0 then goto L1a7e96;
  #L1a7e4e.  v2:= 4I;
  #L1a7e50.  v5:= v3 + 4;
  #L1a7e54.  call `frameHeader`(v10, v11, v5, v4, v2) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L1a7e5a.  v5:= v10.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7e5e.  v6:= 2147483647I;
  #L1a7e64.  v6:= v6 ^& v12 @kind int;
  #L1a7e66.  call temp:= `writeInt`(v5, v6) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L1a7e6c.  v5:= v10.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7e70.  v6:= v10.`okhttp3.internal.http2.Http2Writer.hpackBuffer` @type ^`okio.Buffer` @kind object;
  #L1a7e74.  v8:= (`long`) v3 @kind i2l;
  #L1a7e76.  call `write`(v5, v6, v8) @signature `Lokio/BufferedSink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L1a7e7c.  v6:= (`long`) v3 @kind i2l;
  #L1a7e7e.  v5:= lcmp(v0, v6);
  #L1a7e82.  if v5 <= 0 then goto L1a7e92;
  #L1a7e86.  v6:= (`long`) v3 @kind i2l;
  #L1a7e88.  v6:= v0 - v6 @kind long;
  #L1a7e8c.  call `writeContinuationFrames`(v10, v11, v6) @signature `Lokhttp3/internal/http2/Http2Writer;.writeContinuationFrames:(IJ)V` @kind direct;
  #Try_end1.  
  #L1a7e92.  @monitorexit v10
  #L1a7e94.  return @kind void;
  #L1a7e96.  v2:= 0I;
  #L1a7e98.  goto L1a7e50;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a7e12;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a7e12;
}
procedure `void` `rstStream`(`okhttp3.internal.http2.Http2Writer` v5 @kind this, `int` v6 @name `streamId`, `okhttp3.internal.http2.ErrorCode` v7 @kind object @name `errorCode`) @signature `Lokhttp3/internal/http2/Http2Writer;.rstStream:(ILokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a7ec0.  @monitorenter v5
  #Try_start0.  
  #L1a7ec2.  v3:= v5.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L1a7ec6.  if v3 == 0 then goto L1a7ee0;
  #L1a7eca.  v3:= new `java.io.IOException`;
  #L1a7ece.  v4:= "closed" @kind object;
  #L1a7ed2.  call `<init>`(v3, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a7ed8.  throw v3;
  #Try_end0.  
  #L1a7eda.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a7edc.  @monitorexit v5
  #L1a7ede.  throw v3;
  #Try_start1.  
  #L1a7ee0.  v3:= v7.`okhttp3.internal.http2.ErrorCode.httpCode` @type ^`int`;
  #L1a7ee4.  v4:= -1I;
  #L1a7ee6.  if v3 != v4 then goto L1a7ef6;
  #L1a7eea.  v3:= new `java.lang.IllegalArgumentException`;
  #L1a7eee.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1a7ef4.  throw v3;
  #L1a7ef6.  v1:= 4I;
  #L1a7ef8.  v2:= 3I;
  #L1a7efa.  v0:= 0I;
  #L1a7efc.  call `frameHeader`(v5, v6, v1, v2, v0) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L1a7f02.  v3:= v5.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7f06.  v4:= v7.`okhttp3.internal.http2.ErrorCode.httpCode` @type ^`int`;
  #L1a7f0a.  call temp:= `writeInt`(v3, v4) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L1a7f10.  v3:= v5.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7f14.  call `flush`(v3) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #Try_end1.  
  #L1a7f1a.  @monitorexit v5
  #L1a7f1c.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a7eda;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a7eda;
}
procedure `void` `settings`(`okhttp3.internal.http2.Http2Writer` v8 @kind this, `okhttp3.internal.http2.Settings` v9 @kind object @name `settings`) @signature `Lokhttp3/internal/http2/Http2Writer;.settings:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a7f44.  @monitorenter v8
  #Try_start0.  
  #L1a7f46.  v6:= v8.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L1a7f4a.  if v6 == 0 then goto L1a7f64;
  #L1a7f4e.  v6:= new `java.io.IOException`;
  #L1a7f52.  v7:= "closed" @kind object;
  #L1a7f56.  call `<init>`(v6, v7) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a7f5c.  throw v6;
  #Try_end0.  
  #L1a7f5e.  v6:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a7f60.  @monitorexit v8
  #L1a7f62.  throw v6;
  #Try_start1.  
  #L1a7f64.  call temp:= `size`(v9) @signature `Lokhttp3/internal/http2/Settings;.size:()I` @kind virtual;
  #L1a7f6a.  v6:= temp;
  #L1a7f6c.  v3:= v6 * 6;
  #L1a7f70.  v5:= 4I;
  #L1a7f72.  v0:= 0I;
  #L1a7f74.  v4:= 0I;
  #L1a7f76.  call `frameHeader`(v8, v4, v3, v5, v0) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L1a7f7c.  v1:= 0I;
  #L1a7f7e.  v6:= 10I;
  #L1a7f82.  if v1 >= v6 then goto L1a7fca;
  #L1a7f86.  call temp:= `isSet`(v9, v1) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @kind virtual;
  #L1a7f8c.  v6:= temp;
  #L1a7f8e.  if v6 != 0 then goto L1a7f98;
  #L1a7f92.  v1:= v1 + 1;
  #L1a7f96.  goto L1a7f7e;
  #L1a7f98.  v2:= v1;
  #L1a7f9a.  v6:= 4I;
  #L1a7f9c.  if v2 != v6 then goto L1a7fc0;
  #L1a7fa0.  v2:= 3I;
  #L1a7fa2.  v6:= v8.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7fa6.  call temp:= `writeShort`(v6, v2) @signature `Lokio/BufferedSink;.writeShort:(I)Lokio/BufferedSink;` @kind interface;
  #L1a7fac.  v6:= v8.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7fb0.  call temp:= `get`(v9, v1) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @kind virtual;
  #L1a7fb6.  v7:= temp;
  #L1a7fb8.  call temp:= `writeInt`(v6, v7) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L1a7fbe.  goto L1a7f92;
  #L1a7fc0.  v6:= 7I;
  #L1a7fc2.  if v2 != v6 then goto L1a7fa2;
  #L1a7fc6.  v2:= 4I;
  #L1a7fc8.  goto L1a7fa2;
  #L1a7fca.  v6:= v8.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a7fce.  call `flush`(v6) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #Try_end1.  
  #L1a7fd4.  @monitorexit v8
  #L1a7fd6.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a7f5e;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a7f5e;
}
procedure `void` `synReply`(`okhttp3.internal.http2.Http2Writer` v2 @kind this, `boolean` v3 @name `outFinished`, `int` v4 @name `streamId`, `java.util.List` v5 @kind object) @signature `Lokhttp3/internal/http2/Http2Writer;.synReply:(ZILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a7ffc.  @monitorenter v2
  #Try_start0.  
  #L1a7ffe.  v0:= v2.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L1a8002.  if v0 == 0 then goto L1a801c;
  #L1a8006.  v0:= new `java.io.IOException`;
  #L1a800a.  v1:= "closed" @kind object;
  #L1a800e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a8014.  throw v0;
  #Try_end0.  
  #L1a8016.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a8018.  @monitorexit v2
  #L1a801a.  throw v0;
  #Try_start1.  
  #L1a801c.  call `headers`(v2, v3, v4, v5) @signature `Lokhttp3/internal/http2/Http2Writer;.headers:(ZILjava/util/List;)V` @kind virtual;
  #Try_end1.  
  #L1a8022.  @monitorexit v2
  #L1a8024.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a8016;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a8016;
}
procedure `void` `synStream`(`okhttp3.internal.http2.Http2Writer` v2 @kind this, `boolean` v3 @name `outFinished`, `int` v4 @name `streamId`, `int` v5 @name `associatedStreamId`, `java.util.List` v6 @kind object) @signature `Lokhttp3/internal/http2/Http2Writer;.synStream:(ZIILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a804c.  @monitorenter v2
  #Try_start0.  
  #L1a804e.  v0:= v2.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L1a8052.  if v0 == 0 then goto L1a806c;
  #L1a8056.  v0:= new `java.io.IOException`;
  #L1a805a.  v1:= "closed" @kind object;
  #L1a805e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a8064.  throw v0;
  #Try_end0.  
  #L1a8066.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a8068.  @monitorexit v2
  #L1a806a.  throw v0;
  #Try_start1.  
  #L1a806c.  call `headers`(v2, v3, v4, v6) @signature `Lokhttp3/internal/http2/Http2Writer;.headers:(ZILjava/util/List;)V` @kind virtual;
  #Try_end1.  
  #L1a8072.  @monitorexit v2
  #L1a8074.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a8066;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a8066;
}
procedure `void` `windowUpdate`(`okhttp3.internal.http2.Http2Writer` v8 @kind this, `int` v9 @name `streamId`, `long` v10 @name `windowSizeIncrement`) @signature `Lokhttp3/internal/http2/Http2Writer;.windowUpdate:(IJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a809c.  @monitorenter v8
  #Try_start0.  
  #L1a809e.  v3:= v8.`okhttp3.internal.http2.Http2Writer.closed` @type ^`boolean` @kind boolean;
  #L1a80a2.  if v3 == 0 then goto L1a80bc;
  #L1a80a6.  v3:= new `java.io.IOException`;
  #L1a80aa.  v4:= "closed" @kind object;
  #L1a80ae.  call `<init>`(v3, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a80b4.  throw v3;
  #Try_end0.  
  #L1a80b6.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a80b8.  @monitorexit v8
  #L1a80ba.  throw v3;
  #L1a80bc.  v4:= 0L;
  #L1a80c0.  v3:= lcmp(v10, v4);
  #L1a80c4.  if v3 == 0 then goto L1a80d6;
  #L1a80c8.  v4:= 2147483647L;
  #L1a80ce.  v3:= lcmp(v10, v4);
  #L1a80d2.  if v3 <= 0 then goto L1a80f8;
  #Try_start1.  
  #L1a80d6.  v3:= "windowSizeIncrement == 0 || windowSizeIncrement > 0x7fffffffL: %s" @kind object;
  #L1a80da.  v4:= 1I;
  #L1a80dc.  v4:= new `java.lang.Object`[v4];
  #L1a80e0.  v5:= 0I;
  #L1a80e2.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1a80e8.  v6:= temp @kind object;
  #L1a80ea.  v4[v5]:= v6 @kind object;
  #L1a80ee.  call temp:= `illegalArgument`(v3, v4) @signature `Lokhttp3/internal/http2/Http2;.illegalArgument:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L1a80f4.  v3:= temp @kind object;
  #L1a80f6.  throw v3;
  #L1a80f8.  v1:= 4I;
  #L1a80fa.  v2:= 8I;
  #L1a80fe.  v0:= 0I;
  #L1a8100.  call `frameHeader`(v8, v9, v1, v2, v0) @signature `Lokhttp3/internal/http2/Http2Writer;.frameHeader:(IIBB)V` @kind virtual;
  #L1a8106.  v3:= v8.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a810a.  v4:= (`int`) v10 @kind l2i;
  #L1a810c.  call temp:= `writeInt`(v3, v4) @signature `Lokio/BufferedSink;.writeInt:(I)Lokio/BufferedSink;` @kind interface;
  #L1a8112.  v3:= v8.`okhttp3.internal.http2.Http2Writer.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a8116.  call `flush`(v3) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #Try_end1.  
  #L1a811c.  @monitorexit v8
  #L1a811e.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a80b6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a80b6;
}
