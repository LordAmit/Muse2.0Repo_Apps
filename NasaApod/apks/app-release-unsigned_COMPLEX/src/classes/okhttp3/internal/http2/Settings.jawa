record `okhttp3.internal.http2.Settings` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.http2.Settings.set` @AccessFlag PRIVATE;
  `int`[] `okhttp3.internal.http2.Settings.values` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Settings.COUNT` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.DEFAULT_INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.ENABLE_PUSH` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.HEADER_TABLE_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_CONCURRENT_STREAMS` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_FRAME_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_HEADER_LIST_SIZE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a89dc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a89e2.  v0:= 10I;
  #L1a89e6.  v0:= new `int`[v0];
  #L1a89ea.  v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] := v0 @kind object;
  #L1a89ee.  return @kind void;
}
procedure `void` `clear`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.clear:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a8a00.  v1:= 0I;
  #L1a8a02.  v2.`okhttp3.internal.http2.Settings.set` @type ^`int` := v1;
  #L1a8a06.  v0:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a8a0a.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L1a8a10.  return @kind void;
}
procedure `int` `get`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 @name `id`) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @AccessFlag  {
    temp;
    v0;

  #L1a8a24.  v0:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a8a28.  v0:= v0[v2];
  #L1a8a2c.  return v0;
}
procedure `boolean` `getEnablePush`(`okhttp3.internal.http2.Settings` v5 @kind this, `boolean` v6 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getEnablePush:(Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a8a40.  v2:= 0I;
  #L1a8a42.  v1:= 1I;
  #L1a8a44.  v0:= 4I;
  #L1a8a46.  v3:= v5.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a8a4a.  v3:= v3 ^& v0 @kind int;
  #L1a8a4c.  if v3 == 0 then goto L1a8a60;
  #L1a8a50.  v3:= v5.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a8a54.  v4:= 2I;
  #L1a8a56.  v3:= v3[v4];
  #L1a8a5a.  if v3 != v1 then goto L1a8a6c;
  #L1a8a5e.  return v1;
  #L1a8a60.  if v6 == 0 then goto L1a8a68;
  #L1a8a64.  v3:= v1;
  #L1a8a66.  goto L1a8a5a;
  #L1a8a68.  v3:= v2;
  #L1a8a6a.  goto L1a8a5a;
  #L1a8a6c.  v1:= v2;
  #L1a8a6e.  goto L1a8a5e;
}
procedure `int` `getHeaderTableSize`(`okhttp3.internal.http2.Settings` v3 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getHeaderTableSize:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a8a80.  v0:= 2I;
  #L1a8a82.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a8a86.  v1:= v1 ^& v0 @kind int;
  #L1a8a88.  if v1 == 0 then goto L1a8a98;
  #L1a8a8c.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a8a90.  v2:= 1I;
  #L1a8a92.  v1:= v1[v2];
  #L1a8a96.  return v1;
  #L1a8a98.  v1:= -1I;
  #L1a8a9a.  goto L1a8a96;
}
procedure `int` `getInitialWindowSize`(`okhttp3.internal.http2.Settings` v3 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a8aac.  v0:= 128I;
  #L1a8ab0.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a8ab4.  v1:= v1 ^& v0 @kind int;
  #L1a8ab6.  if v1 == 0 then goto L1a8ac6;
  #L1a8aba.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a8abe.  v2:= 7I;
  #L1a8ac0.  v1:= v1[v2];
  #L1a8ac4.  return v1;
  #L1a8ac6.  v1:= 65535I;
  #L1a8acc.  goto L1a8ac4;
}
procedure `int` `getMaxConcurrentStreams`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getMaxConcurrentStreams:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a8ae0.  v0:= 16I;
  #L1a8ae4.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a8ae8.  v1:= v1 ^& v0 @kind int;
  #L1a8aea.  if v1 == 0 then goto L1a8af8;
  #L1a8aee.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a8af2.  v2:= 4I;
  #L1a8af4.  v4:= v1[v2];
  #L1a8af8.  return v4;
}
procedure `int` `getMaxFrameSize`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getMaxFrameSize:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a8b0c.  v0:= 32I;
  #L1a8b10.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a8b14.  v1:= v1 ^& v0 @kind int;
  #L1a8b16.  if v1 == 0 then goto L1a8b24;
  #L1a8b1a.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a8b1e.  v2:= 5I;
  #L1a8b20.  v4:= v1[v2];
  #L1a8b24.  return v4;
}
procedure `int` `getMaxHeaderListSize`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getMaxHeaderListSize:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a8b38.  v0:= 64I;
  #L1a8b3c.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a8b40.  v1:= v1 ^& v0 @kind int;
  #L1a8b42.  if v1 == 0 then goto L1a8b50;
  #L1a8b46.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a8b4a.  v2:= 6I;
  #L1a8b4c.  v4:= v1[v2];
  #L1a8b50.  return v4;
}
procedure `boolean` `isSet`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `id`) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a8b64.  v1:= 1I;
  #L1a8b66.  v0:= v1 ^< v4 @kind int;
  #L1a8b6a.  v2:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a8b6e.  v2:= v2 ^& v0 @kind int;
  #L1a8b70.  if v2 == 0 then goto L1a8b76;
  #L1a8b74.  return v1;
  #L1a8b76.  v1:= 0I;
  #L1a8b78.  goto L1a8b74;
}
procedure `void` `merge`(`okhttp3.internal.http2.Settings` v2 @kind this, `okhttp3.internal.http2.Settings` v3 @kind object @name `other`) @signature `Lokhttp3/internal/http2/Settings;.merge:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a8b8c.  v0:= 0I;
  #L1a8b8e.  v1:= 10I;
  #L1a8b92.  if v0 >= v1 then goto L1a8bb8;
  #L1a8b96.  call temp:= `isSet`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @kind virtual;
  #L1a8b9c.  v1:= temp;
  #L1a8b9e.  if v1 != 0 then goto L1a8ba8;
  #L1a8ba2.  v0:= v0 + 1;
  #L1a8ba6.  goto L1a8b8e;
  #L1a8ba8.  call temp:= `get`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @kind virtual;
  #L1a8bae.  v1:= temp;
  #L1a8bb0.  call temp:= `set`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L1a8bb6.  goto L1a8ba2;
  #L1a8bb8.  return @kind void;
}
procedure `okhttp3.internal.http2.Settings` `set`(`okhttp3.internal.http2.Settings` v2 @kind this, `int` v3 @name `id`, `int` v4 @name `value`) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a8bcc.  if v3 < 0 then goto L1a8bda;
  #L1a8bd0.  v1:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a8bd4.  v1:= length @variable v1;
  #L1a8bd6.  if v3 < v1 then goto L1a8bdc;
  #L1a8bda.  return v2 @kind object;
  #L1a8bdc.  v1:= 1I;
  #L1a8bde.  v0:= v1 ^< v3 @kind int;
  #L1a8be2.  v1:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a8be6.  v1:= v1 ^| v0 @kind int;
  #L1a8be8.  v2.`okhttp3.internal.http2.Settings.set` @type ^`int` := v1;
  #L1a8bec.  v1:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a8bf0.  v1[v3]:= v4;
  #L1a8bf4.  goto L1a8bda;
}
procedure `int` `size`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.size:()I` @AccessFlag  {
    temp;
    v0;

  #L1a8c08.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a8c0c.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L1a8c12.  v0:= temp;
  #L1a8c14.  return v0;
}
