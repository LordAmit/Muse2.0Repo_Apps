record `okhttp3.internal.cache.FaultHidingSink` @kind class @AccessFlag  extends `okio.ForwardingSink` @kind class {
  `boolean` `okhttp3.internal.cache.FaultHidingSink.hasErrors` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.cache.FaultHidingSink` v0 @kind this, `okio.Sink` v1 @kind object @name `delegate`) @signature `Lokhttp3/internal/cache/FaultHidingSink;.<init>:(Lokio/Sink;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24563c.  call `<init>`(v0, v1) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L245642.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.cache.FaultHidingSink` v2 @kind this) @signature `Lokhttp3/internal/cache/FaultHidingSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L245654.  v1:= v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L245658.  if v1 == 0 then goto L24565e;
  #L24565c.  return @kind void;
  #Try_start0.  
  #L24565e.  call `close`(v2) @signature `Lokio/ForwardingSink;.close:()V` @kind super;
  #Try_end0.  
  #L245664.  goto L24565c;
  #L245666.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L245668.  v1:= 1I;
  #L24566a.  v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L24566e.  call `onException`(v2, v0) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L245674.  goto L24565c;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L245666;
}
procedure `void` `flush`(`okhttp3.internal.cache.FaultHidingSink` v2 @kind this) @signature `Lokhttp3/internal/cache/FaultHidingSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L245698.  v1:= v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L24569c.  if v1 == 0 then goto L2456a2;
  #L2456a0.  return @kind void;
  #Try_start0.  
  #L2456a2.  call `flush`(v2) @signature `Lokio/ForwardingSink;.flush:()V` @kind super;
  #Try_end0.  
  #L2456a8.  goto L2456a0;
  #L2456aa.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2456ac.  v1:= 1I;
  #L2456ae.  v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L2456b2.  call `onException`(v2, v0) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L2456b8.  goto L2456a0;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L2456aa;
}
procedure `void` `onException`(`okhttp3.internal.cache.FaultHidingSink` v0 @kind this, `java.io.IOException` v1 @kind object @name `e`) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @AccessFlag PROTECTED {
    temp;

  #L2456dc.  return @kind void;
}
procedure `void` `write`(`okhttp3.internal.cache.FaultHidingSink` v2 @kind this, `okio.Buffer` v3 @kind object @name `source`, `long` v4 @name `byteCount`) @signature `Lokhttp3/internal/cache/FaultHidingSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2456f0.  v1:= v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L2456f4.  if v1 == 0 then goto L245700;
  #L2456f8.  call `skip`(v3, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L2456fe.  return @kind void;
  #Try_start0.  
  #L245700.  call `write`(v2, v3, v4) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @kind super;
  #Try_end0.  
  #L245706.  goto L2456fe;
  #L245708.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L24570a.  v1:= 1I;
  #L24570c.  v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L245710.  call `onException`(v2, v0) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L245716.  goto L2456fe;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L245708;
}
