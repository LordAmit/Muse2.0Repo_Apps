record `okhttp3.internal.http1.Http1Codec$FixedLengthSink` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `long` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okio.ForwardingTimeout` `okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v2 @kind this, `okhttp3.internal.http1.Http1Codec` v3 @kind object, `long` v4 @name `bytesRemaining`) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.<init>:(Lokhttp3/internal/http1/Http1Codec;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L218b94.  v2.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v3 @kind object;
  #L218b98.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L218b9e.  v0:= new `okio.ForwardingTimeout`;
  #L218ba2.  v1:= v2.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L218ba6.  v1:= v1.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L218baa.  call temp:= `timeout`(v1) @signature `Lokio/BufferedSink;.timeout:()Lokio/Timeout;` @kind interface;
  #L218bb0.  v1:= temp @kind object;
  #L218bb2.  call `<init>`(v0, v1) @signature `Lokio/ForwardingTimeout;.<init>:(Lokio/Timeout;)V` @kind direct;
  #L218bb8.  v2.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @type ^`okio.ForwardingTimeout` := v0 @kind object;
  #L218bbc.  v2.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` := v4 @kind wide;
  #L218bc0.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v4 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L218bd4.  v0:= v4.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` @kind boolean;
  #L218bd8.  if v0 == 0 then goto L218bde;
  #L218bdc.  return @kind void;
  #L218bde.  v0:= 1I;
  #L218be0.  v4.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` := v0 @kind boolean;
  #L218be4.  v0:= v4.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L218be8.  v2:= 0L;
  #L218bec.  v0:= lcmp(v0, v2);
  #L218bf0.  if v0 <= 0 then goto L218c04;
  #L218bf4.  v0:= new `java.net.ProtocolException`;
  #L218bf8.  v1:= "unexpected end of stream" @kind object;
  #L218bfc.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L218c02.  throw v0;
  #L218c04.  v0:= v4.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L218c08.  v1:= v4.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L218c0c.  call `detachTimeout`(v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec;.detachTimeout:(Lokio/ForwardingTimeout;)V` @kind virtual;
  #L218c12.  v0:= v4.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L218c16.  v1:= 3I;
  #L218c18.  v0.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v1;
  #L218c1c.  goto L218bdc;
}
procedure `void` `flush`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L218c30.  v0:= v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` @kind boolean;
  #L218c34.  if v0 == 0 then goto L218c3a;
  #L218c38.  return @kind void;
  #L218c3a.  v0:= v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L218c3e.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L218c42.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L218c48.  goto L218c38;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L218c5c.  v0:= v1.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L218c60.  return v0 @kind object;
}
procedure `void` `write`(`okhttp3.internal.http1.Http1Codec$FixedLengthSink` v6 @kind this, `okio.Buffer` v7 @kind object @name `source`, `long` v8 @name `byteCount`) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L218c74.  v0:= v6.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.closed` @type ^`boolean` @kind boolean;
  #L218c78.  if v0 == 0 then goto L218c8c;
  #L218c7c.  v0:= new `java.lang.IllegalStateException`;
  #L218c80.  v1:= "closed" @kind object;
  #L218c84.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L218c8a.  throw v0;
  #L218c8c.  call temp:= `size`(v7) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L218c92.  v0:= temp @kind wide;
  #L218c94.  v2:= 0L;
  #L218c98.  v4:= v8 @kind wide;
  #L218c9a.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L218ca0.  v0:= v6.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L218ca4.  v0:= lcmp(v8, v0);
  #L218ca8.  if v0 <= 0 then goto L218cf6;
  #L218cac.  v0:= new `java.net.ProtocolException`;
  #L218cb0.  v1:= new `java.lang.StringBuilder`;
  #L218cb4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L218cba.  v2:= "expected " @kind object;
  #L218cbe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L218cc4.  v1:= temp @kind object;
  #L218cc6.  v2:= v6.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L218cca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L218cd0.  v1:= temp @kind object;
  #L218cd2.  v2:= " bytes but received " @kind object;
  #L218cd6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L218cdc.  v1:= temp @kind object;
  #L218cde.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L218ce4.  v1:= temp @kind object;
  #L218ce6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L218cec.  v1:= temp @kind object;
  #L218cee.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L218cf4.  throw v0;
  #L218cf6.  v0:= v6.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L218cfa.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L218cfe.  call `write`(v0, v7, v8) @signature `Lokio/BufferedSink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L218d04.  v0:= v6.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` @kind wide;
  #L218d08.  v0:= v0 - v8 @kind long;
  #L218d0a.  v6.`okhttp3.internal.http1.Http1Codec$FixedLengthSink.bytesRemaining` @type ^`long` := v0 @kind wide;
  #L218d0e.  return @kind void;
}
