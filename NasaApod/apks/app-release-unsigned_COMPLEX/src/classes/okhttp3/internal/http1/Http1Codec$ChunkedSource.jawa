record `okhttp3.internal.http1.Http1Codec$ChunkedSource` @kind class @AccessFlag  extends `okhttp3.internal.http1.Http1Codec$AbstractSource` @kind class {
  `long` `okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okhttp3.HttpUrl` `okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@okhttp3.internal.http1.Http1Codec$ChunkedSource.NO_CHUNK_YET` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v2 @kind this, `okhttp3.internal.http1.Http1Codec` v3 @kind object, `okhttp3.HttpUrl` v4 @kind object @name `url`) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/HttpUrl;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L245774.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v3 @kind object;
  #L245778.  v0:= 0I;
  #L24577a.  call `<init>`(v2, v3, v0) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/internal/http1/Http1Codec$1;)V` @kind direct;
  #L245780.  v0:= -1L;
  #L245784.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L245788.  v0:= 1I;
  #L24578a.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v0 @kind boolean;
  #L24578e.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` := v4 @kind object;
  #L245792.  return @kind void;
}
procedure `void` `readChunkSize`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v8 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.readChunkSize:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2457a4.  v6:= 0L;
  #L2457a8.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2457ac.  v4:= -1L;
  #L2457b0.  v2:= lcmp(v2, v4);
  #L2457b4.  if v2 == 0 then goto L2457c6;
  #L2457b8.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2457bc.  v2:= v2.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L2457c0.  call temp:= `readUtf8LineStrict`(v2) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #Try_start0.  
  #L2457c6.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2457ca.  v2:= v2.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L2457ce.  call temp:= `readHexadecimalUnsignedLong`(v2) @signature `Lokio/BufferedSource;.readHexadecimalUnsignedLong:()J` @kind interface;
  #L2457d4.  v2:= temp @kind wide;
  #L2457d6.  v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v2 @kind wide;
  #L2457da.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2457de.  v2:= v2.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L2457e2.  call temp:= `readUtf8LineStrict`(v2) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L2457e8.  v2:= temp @kind object;
  #L2457ea.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2457f0.  v1:= temp @kind object;
  #L2457f2.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2457f6.  v2:= lcmp(v2, v6);
  #L2457fa.  if v2 < 0 then goto L24581a;
  #L2457fe.  call temp:= `isEmpty`(v1) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L245804.  v2:= temp;
  #L245806.  if v2 != 0 then goto L24587a;
  #L24580a.  v2:= ";" @kind object;
  #L24580e.  call temp:= `startsWith`(v1, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L245814.  v2:= temp;
  #L245816.  if v2 != 0 then goto L24587a;
  #L24581a.  v2:= new `java.net.ProtocolException`;
  #L24581e.  v3:= new `java.lang.StringBuilder`;
  #L245822.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L245828.  v4:= "expected chunk size and optional extensions but was \"" @kind object;
  #L24582c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L245832.  v3:= temp @kind object;
  #L245834.  v4:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L245838.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24583e.  v3:= temp @kind object;
  #L245840.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L245846.  v3:= temp @kind object;
  #L245848.  v4:= "\"" @kind object;
  #L24584c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L245852.  v3:= temp @kind object;
  #L245854.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24585a.  v3:= temp @kind object;
  #L24585c.  call `<init>`(v2, v3) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L245862.  throw v2;
  #Try_end0.  
  #L245864.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L245866.  v2:= new `java.net.ProtocolException`;
  #L24586a.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L245870.  v3:= temp @kind object;
  #L245872.  call `<init>`(v2, v3) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L245878.  throw v2;
  #L24587a.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L24587e.  v2:= lcmp(v2, v6);
  #L245882.  if v2 != 0 then goto L2458bc;
  #L245886.  v2:= 0I;
  #L245888.  v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v2 @kind boolean;
  #L24588c.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L245890.  v2:= v2.`okhttp3.internal.http1.Http1Codec.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L245894.  call temp:= `cookieJar`(v2) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L24589a.  v2:= temp @kind object;
  #L24589c.  v3:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L2458a0.  v4:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2458a4.  call temp:= `readHeaders`(v4) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L2458aa.  v4:= temp @kind object;
  #L2458ac.  call `receiveHeaders`(v2, v3, v4) @signature `Lokhttp3/internal/http/HttpHeaders;.receiveHeaders:(Lokhttp3/CookieJar;Lokhttp3/HttpUrl;Lokhttp3/Headers;)V` @kind static;
  #L2458b2.  v2:= 1I;
  #L2458b4.  v3:= 0I;
  #L2458b6.  call `endOfInput`(v8, v2, v3) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L2458bc.  return @kind void;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L245864;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2458e0.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` @kind boolean;
  #L2458e4.  if v0 == 0 then goto L2458ea;
  #L2458e8.  return @kind void;
  #L2458ea.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L2458ee.  if v0 == 0 then goto L245910;
  #L2458f2.  v0:= 100I;
  #L2458f6.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2458fa.  call temp:= `discard`(v2, v0, v1) @signature `Lokhttp3/internal/Util;.discard:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L245900.  v0:= temp;
  #L245902.  if v0 != 0 then goto L245910;
  #L245906.  v0:= 0I;
  #L245908.  v1:= 0I;
  #L24590a.  call `endOfInput`(v2, v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L245910.  v0:= 1I;
  #L245912.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` := v0 @kind boolean;
  #L245916.  goto L2458e8;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v10 @kind this, `okio.Buffer` v11 @kind object @name `sink`, `long` v12 @name `byteCount`) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L245928.  v8:= 0L;
  #L24592c.  v4:= -1L;
  #L245930.  v1:= lcmp(v12, v8);
  #L245934.  if v1 >= 0 then goto L24596a;
  #L245938.  v1:= new `java.lang.IllegalArgumentException`;
  #L24593c.  v4:= new `java.lang.StringBuilder`;
  #L245940.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L245946.  v5:= "byteCount < 0: " @kind object;
  #L24594a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L245950.  v4:= temp @kind object;
  #L245952.  call temp:= `append`(v4, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L245958.  v4:= temp @kind object;
  #L24595a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L245960.  v4:= temp @kind object;
  #L245962.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L245968.  throw v1;
  #L24596a.  v1:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` @kind boolean;
  #L24596e.  if v1 == 0 then goto L245982;
  #L245972.  v1:= new `java.lang.IllegalStateException`;
  #L245976.  v4:= "closed" @kind object;
  #L24597a.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L245980.  throw v1;
  #L245982.  v1:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L245986.  if v1 != 0 then goto L24598e;
  #L24598a.  v2:= v4 @kind wide;
  #L24598c.  return v2 @kind wide;
  #L24598e.  v6:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L245992.  v1:= lcmp(v6, v8);
  #L245996.  if v1 == 0 then goto L2459a6;
  #L24599a.  v6:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L24599e.  v1:= lcmp(v6, v4);
  #L2459a2.  if v1 != 0 then goto L2459b8;
  #L2459a6.  call `readChunkSize`(v10) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.readChunkSize:()V` @kind direct;
  #L2459ac.  v1:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L2459b0.  if v1 != 0 then goto L2459b8;
  #L2459b4.  v2:= v4 @kind wide;
  #L2459b6.  goto L24598c;
  #L2459b8.  v6:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2459bc.  call temp:= `min`(v12, v6) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2459c2.  v6:= temp @kind wide;
  #L2459c4.  call temp:= `read`(v10, v11, v6) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L2459ca.  v2:= temp @kind wide;
  #L2459cc.  v1:= lcmp(v2, v4);
  #L2459d0.  if v1 != 0 then goto L2459ec;
  #L2459d4.  v0:= new `java.net.ProtocolException`;
  #L2459d8.  v1:= "unexpected end of stream" @kind object;
  #L2459dc.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2459e2.  v1:= 0I;
  #L2459e4.  call `endOfInput`(v10, v1, v0) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L2459ea.  throw v0;
  #L2459ec.  v4:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2459f0.  v4:= v4 - v2 @kind long;
  #L2459f2.  v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v4 @kind wide;
  #L2459f6.  goto L24598c;
}
