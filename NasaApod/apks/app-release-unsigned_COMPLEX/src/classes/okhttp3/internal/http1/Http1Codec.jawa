record `okhttp3.internal.http1.Http1Codec` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.http.HttpCodec` @kind interface {
  `okhttp3.OkHttpClient` `okhttp3.internal.http1.Http1Codec.client` @AccessFlag FINAL;
  `long` `okhttp3.internal.http1.Http1Codec.headerLimit` @AccessFlag PRIVATE;
  `okio.BufferedSink` `okhttp3.internal.http1.Http1Codec.sink` @AccessFlag FINAL;
  `okio.BufferedSource` `okhttp3.internal.http1.Http1Codec.source` @AccessFlag FINAL;
  `int` `okhttp3.internal.http1.Http1Codec.state` @AccessFlag ;
  `okhttp3.internal.connection.StreamAllocation` `okhttp3.internal.http1.Http1Codec.streamAllocation` @AccessFlag FINAL;
}
global `int` `@@okhttp3.internal.http1.Http1Codec.HEADER_LIMIT` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1Codec.STATE_CLOSED` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1Codec.STATE_IDLE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1Codec.STATE_OPEN_REQUEST_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1Codec.STATE_OPEN_RESPONSE_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1Codec.STATE_READING_RESPONSE_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1Codec.STATE_READ_RESPONSE_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http1.Http1Codec.STATE_WRITING_REQUEST_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec` v2 @kind this, `okhttp3.OkHttpClient` v3 @kind object @name `client`, `okhttp3.internal.connection.StreamAllocation` v4 @kind object @name `streamAllocation`, `okio.BufferedSource` v5 @kind object @name `source`, `okio.BufferedSink` v6 @kind object @name `sink`) @signature `Lokhttp3/internal/http1/Http1Codec;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/internal/connection/StreamAllocation;Lokio/BufferedSource;Lokio/BufferedSink;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L218d20.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L218d26.  v0:= 0I;
  #L218d28.  v2.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v0;
  #L218d2c.  v0:= 262144L;
  #L218d32.  v2.`okhttp3.internal.http1.Http1Codec.headerLimit` @type ^`long` := v0 @kind wide;
  #L218d36.  v2.`okhttp3.internal.http1.Http1Codec.client` @type ^`okhttp3.OkHttpClient` := v3 @kind object;
  #L218d3a.  v2.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v4 @kind object;
  #L218d3e.  v2.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` := v5 @kind object;
  #L218d42.  v2.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` := v6 @kind object;
  #L218d46.  return @kind void;
}
procedure `java.lang.String` `readHeaderLine`(`okhttp3.internal.http1.Http1Codec` v6 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaderLine:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L218d58.  v1:= v6.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L218d5c.  v2:= v6.`okhttp3.internal.http1.Http1Codec.headerLimit` @type ^`long` @kind wide;
  #L218d60.  call temp:= `readUtf8LineStrict`(v1, v2) @signature `Lokio/BufferedSource;.readUtf8LineStrict:(J)Ljava/lang/String;` @kind interface;
  #L218d66.  v0:= temp @kind object;
  #L218d68.  v2:= v6.`okhttp3.internal.http1.Http1Codec.headerLimit` @type ^`long` @kind wide;
  #L218d6c.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L218d72.  v1:= temp;
  #L218d74.  v4:= (`long`) v1 @kind i2l;
  #L218d76.  v2:= v2 - v4 @kind long;
  #L218d78.  v6.`okhttp3.internal.http1.Http1Codec.headerLimit` @type ^`long` := v2 @kind wide;
  #L218d7c.  return v0 @kind object;
}
procedure `void` `cancel`(`okhttp3.internal.http1.Http1Codec` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L218d90.  v1:= v2.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L218d94.  call temp:= `connection`(v1) @signature `Lokhttp3/internal/connection/StreamAllocation;.connection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L218d9a.  v0:= temp @kind object;
  #L218d9c.  if v0 == 0 then goto L218da6;
  #L218da0.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.cancel:()V` @kind virtual;
  #L218da6.  return @kind void;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.internal.http1.Http1Codec` v2 @kind this, `okhttp3.Request` v3 @kind object @name `request`, `long` v4 @name `contentLength`) @signature `Lokhttp3/internal/http1/Http1Codec;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L218db8.  v0:= "chunked" @kind object;
  #L218dbc.  v1:= "Transfer-Encoding" @kind object;
  #L218dc0.  call temp:= `header`(v3, v1) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L218dc6.  v1:= temp @kind object;
  #L218dc8.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L218dce.  v0:= temp;
  #L218dd0.  if v0 == 0 then goto L218dde;
  #L218dd4.  call temp:= `newChunkedSink`(v2) @signature `Lokhttp3/internal/http1/Http1Codec;.newChunkedSink:()Lokio/Sink;` @kind virtual;
  #L218dda.  v0:= temp @kind object;
  #L218ddc.  return v0 @kind object;
  #L218dde.  v0:= -1L;
  #L218de2.  v0:= lcmp(v4, v0);
  #L218de6.  if v0 == 0 then goto L218df4;
  #L218dea.  call temp:= `newFixedLengthSink`(v2, v4) @signature `Lokhttp3/internal/http1/Http1Codec;.newFixedLengthSink:(J)Lokio/Sink;` @kind virtual;
  #L218df0.  v0:= temp @kind object;
  #L218df2.  goto L218ddc;
  #L218df4.  v0:= new `java.lang.IllegalStateException`;
  #L218df8.  v1:= "Cannot stream a request body without chunked encoding or a known content length!" @kind object;
  #L218dfc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L218e02.  throw v0;
}
procedure `void` `detachTimeout`(`okhttp3.internal.http1.Http1Codec` v2 @kind this, `okio.ForwardingTimeout` v3 @kind object @name `timeout`) @signature `Lokhttp3/internal/http1/Http1Codec;.detachTimeout:(Lokio/ForwardingTimeout;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L218e14.  call temp:= `delegate`(v3) @signature `Lokio/ForwardingTimeout;.delegate:()Lokio/Timeout;` @kind virtual;
  #L218e1a.  v0:= temp @kind object;
  #L218e1c.  v1:= `@@okio.Timeout.NONE` @type ^`okio.Timeout` @kind object;
  #L218e20.  call temp:= `setDelegate`(v3, v1) @signature `Lokio/ForwardingTimeout;.setDelegate:(Lokio/Timeout;)Lokio/ForwardingTimeout;` @kind virtual;
  #L218e26.  call temp:= `clearDeadline`(v0) @signature `Lokio/Timeout;.clearDeadline:()Lokio/Timeout;` @kind virtual;
  #L218e2c.  call temp:= `clearTimeout`(v0) @signature `Lokio/Timeout;.clearTimeout:()Lokio/Timeout;` @kind virtual;
  #L218e32.  return @kind void;
}
procedure `void` `finishRequest`(`okhttp3.internal.http1.Http1Codec` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.finishRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L218e44.  v0:= v1.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L218e48.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L218e4e.  return @kind void;
}
procedure `void` `flushRequest`(`okhttp3.internal.http1.Http1Codec` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.flushRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L218e60.  v0:= v1.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L218e64.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L218e6a.  return @kind void;
}
procedure `boolean` `isClosed`(`okhttp3.internal.http1.Http1Codec` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.isClosed:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L218e7c.  v0:= v2.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L218e80.  v1:= 6I;
  #L218e82.  if v0 != v1 then goto L218e8a;
  #L218e86.  v0:= 1I;
  #L218e88.  return v0;
  #L218e8a.  v0:= 0I;
  #L218e8c.  goto L218e88;
}
procedure `okio.Sink` `newChunkedSink`(`okhttp3.internal.http1.Http1Codec` v3 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.newChunkedSink:()Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L218ea0.  v0:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L218ea4.  v1:= 1I;
  #L218ea6.  if v0 == v1 then goto L218ee0;
  #L218eaa.  v0:= new `java.lang.IllegalStateException`;
  #L218eae.  v1:= new `java.lang.StringBuilder`;
  #L218eb2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L218eb8.  v2:= "state: " @kind object;
  #L218ebc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L218ec2.  v1:= temp @kind object;
  #L218ec4.  v2:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L218ec8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L218ece.  v1:= temp @kind object;
  #L218ed0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L218ed6.  v1:= temp @kind object;
  #L218ed8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L218ede.  throw v0;
  #L218ee0.  v0:= 2I;
  #L218ee2.  v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v0;
  #L218ee6.  v0:= new `okhttp3.internal.http1.Http1Codec$ChunkedSink`;
  #L218eea.  call `<init>`(v0, v3) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.<init>:(Lokhttp3/internal/http1/Http1Codec;)V` @kind direct;
  #L218ef0.  return v0 @kind object;
}
procedure `okio.Source` `newChunkedSource`(`okhttp3.internal.http1.Http1Codec` v3 @kind this, `okhttp3.HttpUrl` v4 @kind object @name `url`) @signature `Lokhttp3/internal/http1/Http1Codec;.newChunkedSource:(Lokhttp3/HttpUrl;)Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L218f04.  v0:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L218f08.  v1:= 4I;
  #L218f0a.  if v0 == v1 then goto L218f44;
  #L218f0e.  v0:= new `java.lang.IllegalStateException`;
  #L218f12.  v1:= new `java.lang.StringBuilder`;
  #L218f16.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L218f1c.  v2:= "state: " @kind object;
  #L218f20.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L218f26.  v1:= temp @kind object;
  #L218f28.  v2:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L218f2c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L218f32.  v1:= temp @kind object;
  #L218f34.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L218f3a.  v1:= temp @kind object;
  #L218f3c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L218f42.  throw v0;
  #L218f44.  v0:= 5I;
  #L218f46.  v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v0;
  #L218f4a.  v0:= new `okhttp3.internal.http1.Http1Codec$ChunkedSource`;
  #L218f4e.  call `<init>`(v0, v3, v4) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/HttpUrl;)V` @kind direct;
  #L218f54.  return v0 @kind object;
}
procedure `okio.Sink` `newFixedLengthSink`(`okhttp3.internal.http1.Http1Codec` v3 @kind this, `long` v4 @name `contentLength`) @signature `Lokhttp3/internal/http1/Http1Codec;.newFixedLengthSink:(J)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L218f68.  v0:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L218f6c.  v1:= 1I;
  #L218f6e.  if v0 == v1 then goto L218fa8;
  #L218f72.  v0:= new `java.lang.IllegalStateException`;
  #L218f76.  v1:= new `java.lang.StringBuilder`;
  #L218f7a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L218f80.  v2:= "state: " @kind object;
  #L218f84.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L218f8a.  v1:= temp @kind object;
  #L218f8c.  v2:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L218f90.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L218f96.  v1:= temp @kind object;
  #L218f98.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L218f9e.  v1:= temp @kind object;
  #L218fa0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L218fa6.  throw v0;
  #L218fa8.  v0:= 2I;
  #L218faa.  v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v0;
  #L218fae.  v0:= new `okhttp3.internal.http1.Http1Codec$FixedLengthSink`;
  #L218fb2.  call `<init>`(v0, v3, v4) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSink;.<init>:(Lokhttp3/internal/http1/Http1Codec;J)V` @kind direct;
  #L218fb8.  return v0 @kind object;
}
procedure `okio.Source` `newFixedLengthSource`(`okhttp3.internal.http1.Http1Codec` v3 @kind this, `long` v4 @name `length`) @signature `Lokhttp3/internal/http1/Http1Codec;.newFixedLengthSource:(J)Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L218fcc.  v0:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L218fd0.  v1:= 4I;
  #L218fd2.  if v0 == v1 then goto L21900c;
  #L218fd6.  v0:= new `java.lang.IllegalStateException`;
  #L218fda.  v1:= new `java.lang.StringBuilder`;
  #L218fde.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L218fe4.  v2:= "state: " @kind object;
  #L218fe8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L218fee.  v1:= temp @kind object;
  #L218ff0.  v2:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L218ff4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L218ffa.  v1:= temp @kind object;
  #L218ffc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L219002.  v1:= temp @kind object;
  #L219004.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21900a.  throw v0;
  #L21900c.  v0:= 5I;
  #L21900e.  v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v0;
  #L219012.  v0:= new `okhttp3.internal.http1.Http1Codec$FixedLengthSource`;
  #L219016.  call `<init>`(v0, v3, v4) @signature `Lokhttp3/internal/http1/Http1Codec$FixedLengthSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;J)V` @kind direct;
  #L21901c.  return v0 @kind object;
}
procedure `okio.Source` `newUnknownLengthSource`(`okhttp3.internal.http1.Http1Codec` v3 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.newUnknownLengthSource:()Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L219030.  v0:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L219034.  v1:= 4I;
  #L219036.  if v0 == v1 then goto L219070;
  #L21903a.  v0:= new `java.lang.IllegalStateException`;
  #L21903e.  v1:= new `java.lang.StringBuilder`;
  #L219042.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L219048.  v2:= "state: " @kind object;
  #L21904c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L219052.  v1:= temp @kind object;
  #L219054.  v2:= v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L219058.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L21905e.  v1:= temp @kind object;
  #L219060.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L219066.  v1:= temp @kind object;
  #L219068.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21906e.  throw v0;
  #L219070.  v0:= v3.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L219074.  if v0 != 0 then goto L219088;
  #L219078.  v0:= new `java.lang.IllegalStateException`;
  #L21907c.  v1:= "streamAllocation == null" @kind object;
  #L219080.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L219086.  throw v0;
  #L219088.  v0:= 5I;
  #L21908a.  v3.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v0;
  #L21908e.  v0:= v3.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L219092.  call `noNewStreams`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.noNewStreams:()V` @kind virtual;
  #L219098.  v0:= new `okhttp3.internal.http1.Http1Codec$UnknownLengthSource`;
  #L21909c.  call `<init>`(v0, v3) @signature `Lokhttp3/internal/http1/Http1Codec$UnknownLengthSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;)V` @kind direct;
  #L2190a2.  return v0 @kind object;
}
procedure `okhttp3.ResponseBody` `openResponseBody`(`okhttp3.internal.http1.Http1Codec` v10 @kind this, `okhttp3.Response` v11 @kind object @name `response`) @signature `Lokhttp3/internal/http1/Http1Codec;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2190b4.  v8:= 0L;
  #L2190b8.  v6:= -1L;
  #L2190bc.  v4:= v10.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L2190c0.  v4:= v4.`okhttp3.internal.connection.StreamAllocation.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L2190c4.  v5:= v10.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L2190c8.  v5:= v5.`okhttp3.internal.connection.StreamAllocation.call` @type ^`okhttp3.Call` @kind object;
  #L2190cc.  call `responseBodyStart`(v4, v5) @signature `Lokhttp3/EventListener;.responseBodyStart:(Lokhttp3/Call;)V` @kind virtual;
  #L2190d2.  v4:= "Content-Type" @kind object;
  #L2190d6.  call temp:= `header`(v11, v4) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2190dc.  v2:= temp @kind object;
  #L2190de.  call temp:= `hasBody`(v11) @signature `Lokhttp3/internal/http/HttpHeaders;.hasBody:(Lokhttp3/Response;)Z` @kind static;
  #L2190e4.  v4:= temp;
  #L2190e6.  if v4 != 0 then goto L219106;
  #L2190ea.  call temp:= `newFixedLengthSource`(v10, v8) @signature `Lokhttp3/internal/http1/Http1Codec;.newFixedLengthSource:(J)Lokio/Source;` @kind virtual;
  #L2190f0.  v3:= temp @kind object;
  #L2190f2.  v4:= new `okhttp3.internal.http.RealResponseBody`;
  #L2190f6.  call temp:= `buffer`(v3) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L2190fc.  v5:= temp @kind object;
  #L2190fe.  call `<init>`(v4, v2, v8, v5) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L219104.  return v4 @kind object;
  #L219106.  v4:= "chunked" @kind object;
  #L21910a.  v5:= "Transfer-Encoding" @kind object;
  #L21910e.  call temp:= `header`(v11, v5) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L219114.  v5:= temp @kind object;
  #L219116.  call temp:= `equalsIgnoreCase`(v4, v5) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L21911c.  v4:= temp;
  #L21911e.  if v4 == 0 then goto L21914e;
  #L219122.  call temp:= `request`(v11) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L219128.  v4:= temp @kind object;
  #L21912a.  call temp:= `url`(v4) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L219130.  v4:= temp @kind object;
  #L219132.  call temp:= `newChunkedSource`(v10, v4) @signature `Lokhttp3/internal/http1/Http1Codec;.newChunkedSource:(Lokhttp3/HttpUrl;)Lokio/Source;` @kind virtual;
  #L219138.  v3:= temp @kind object;
  #L21913a.  v4:= new `okhttp3.internal.http.RealResponseBody`;
  #L21913e.  call temp:= `buffer`(v3) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L219144.  v5:= temp @kind object;
  #L219146.  call `<init>`(v4, v2, v6, v5) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L21914c.  goto L219104;
  #L21914e.  call temp:= `contentLength`(v11) @signature `Lokhttp3/internal/http/HttpHeaders;.contentLength:(Lokhttp3/Response;)J` @kind static;
  #L219154.  v0:= temp @kind wide;
  #L219156.  v4:= lcmp(v0, v6);
  #L21915a.  if v4 == 0 then goto L21917a;
  #L21915e.  call temp:= `newFixedLengthSource`(v10, v0) @signature `Lokhttp3/internal/http1/Http1Codec;.newFixedLengthSource:(J)Lokio/Source;` @kind virtual;
  #L219164.  v3:= temp @kind object;
  #L219166.  v4:= new `okhttp3.internal.http.RealResponseBody`;
  #L21916a.  call temp:= `buffer`(v3) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L219170.  v5:= temp @kind object;
  #L219172.  call `<init>`(v4, v2, v0, v5) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L219178.  goto L219104;
  #L21917a.  v4:= new `okhttp3.internal.http.RealResponseBody`;
  #L21917e.  call temp:= `newUnknownLengthSource`(v10) @signature `Lokhttp3/internal/http1/Http1Codec;.newUnknownLengthSource:()Lokio/Source;` @kind virtual;
  #L219184.  v5:= temp @kind object;
  #L219186.  call temp:= `buffer`(v5) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L21918c.  v5:= temp @kind object;
  #L21918e.  call `<init>`(v4, v2, v6, v5) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L219194.  goto L219104;
}
procedure `okhttp3.Headers` `readHeaders`(`okhttp3.internal.http1.Http1Codec` v3 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaders:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2191a8.  v0:= new `okhttp3.Headers$Builder`;
  #L2191ac.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L2191b2.  call temp:= `readHeaderLine`(v3) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaderLine:()Ljava/lang/String;` @kind direct;
  #L2191b8.  v1:= temp @kind object;
  #L2191ba.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2191c0.  v2:= temp;
  #L2191c2.  if v2 == 0 then goto L2191d2;
  #L2191c6.  v2:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L2191ca.  call `addLenient`(v2, v0, v1) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;)V` @kind virtual;
  #L2191d0.  goto L2191b2;
  #L2191d2.  call temp:= `build`(v0) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L2191d8.  v2:= temp @kind object;
  #L2191da.  return v2 @kind object;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.http1.Http1Codec` v8 @kind this, `boolean` v9 @name `expectContinue`) @signature `Lokhttp3/internal/http1/Http1Codec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2191ec.  v7:= 100I;
  #L2191f0.  v6:= 3I;
  #L2191f2.  v4:= v8.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L2191f6.  v5:= 1I;
  #L2191f8.  if v4 == v5 then goto L21923a;
  #L2191fc.  v4:= v8.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L219200.  if v4 == v6 then goto L21923a;
  #L219204.  v4:= new `java.lang.IllegalStateException`;
  #L219208.  v5:= new `java.lang.StringBuilder`;
  #L21920c.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L219212.  v6:= "state: " @kind object;
  #L219216.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21921c.  v5:= temp @kind object;
  #L21921e.  v6:= v8.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L219222.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L219228.  v5:= temp @kind object;
  #L21922a.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L219230.  v5:= temp @kind object;
  #L219232.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L219238.  throw v4;
  #Try_start0.  
  #L21923a.  call temp:= `readHeaderLine`(v8) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaderLine:()Ljava/lang/String;` @kind direct;
  #L219240.  v4:= temp @kind object;
  #L219242.  call temp:= `parse`(v4) @signature `Lokhttp3/internal/http/StatusLine;.parse:(Ljava/lang/String;)Lokhttp3/internal/http/StatusLine;` @kind static;
  #L219248.  v3:= temp @kind object;
  #L21924a.  v4:= new `okhttp3.Response$Builder`;
  #L21924e.  call `<init>`(v4) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L219254.  v5:= v3.`okhttp3.internal.http.StatusLine.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L219258.  call temp:= `protocol`(v4, v5) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L21925e.  v4:= temp @kind object;
  #L219260.  v5:= v3.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L219264.  call temp:= `code`(v4, v5) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L21926a.  v4:= temp @kind object;
  #L21926c.  v5:= v3.`okhttp3.internal.http.StatusLine.message` @type ^`java.lang.String` @kind object;
  #L219270.  call temp:= `message`(v4, v5) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L219276.  v4:= temp @kind object;
  #L219278.  call temp:= `readHeaders`(v8) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L21927e.  v5:= temp @kind object;
  #L219280.  call temp:= `headers`(v4, v5) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L219286.  v2:= temp @kind object;
  #L219288.  if v9 == 0 then goto L219298;
  #L21928c.  v4:= v3.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L219290.  if v4 != v7 then goto L219298;
  #L219294.  v2:= 0I;
  #L219296.  return v2 @kind object;
  #L219298.  v4:= v3.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L21929c.  if v4 != v7 then goto L2192e6;
  #L2192a0.  v4:= 3I;
  #L2192a2.  v8.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v4;
  #Try_end0.  
  #L2192a6.  goto L219296;
  #L2192a8.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L2192aa.  v1:= new `java.io.IOException`;
  #L2192ae.  v4:= new `java.lang.StringBuilder`;
  #L2192b2.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2192b8.  v5:= "unexpected end of stream on " @kind object;
  #L2192bc.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2192c2.  v4:= temp @kind object;
  #L2192c4.  v5:= v8.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L2192c8.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2192ce.  v4:= temp @kind object;
  #L2192d0.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2192d6.  v4:= temp @kind object;
  #L2192d8.  call `<init>`(v1, v4) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2192de.  call temp:= `initCause`(v1, v0) @signature `Ljava/io/IOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L2192e4.  throw v1;
  #L2192e6.  v4:= 4I;
  #Try_start1.  
  #L2192e8.  v8.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v4;
  #Try_end1.  
  #L2192ec.  goto L219296;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L2192a8;
  catch `java.io.EOFException` @[Try_start1..Try_end1] goto L2192a8;
}
procedure `void` `writeRequest`(`okhttp3.internal.http1.Http1Codec` v5 @kind this, `okhttp3.Headers` v6 @kind object @name `headers`, `java.lang.String` v7 @kind object @name `requestLine`) @signature `Lokhttp3/internal/http1/Http1Codec;.writeRequest:(Lokhttp3/Headers;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L219318.  v2:= v5.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L21931c.  if v2 == 0 then goto L219356;
  #L219320.  v2:= new `java.lang.IllegalStateException`;
  #L219324.  v3:= new `java.lang.StringBuilder`;
  #L219328.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21932e.  v4:= "state: " @kind object;
  #L219332.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L219338.  v3:= temp @kind object;
  #L21933a.  v4:= v5.`okhttp3.internal.http1.Http1Codec.state` @type ^`int`;
  #L21933e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L219344.  v3:= temp @kind object;
  #L219346.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21934c.  v3:= temp @kind object;
  #L21934e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L219354.  throw v2;
  #L219356.  v2:= v5.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L21935a.  call temp:= `writeUtf8`(v2, v7) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L219360.  v2:= temp @kind object;
  #L219362.  v3:= "\r\n" @kind object;
  #L219366.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L21936c.  v0:= 0I;
  #L21936e.  call temp:= `size`(v6) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L219374.  v1:= temp;
  #L219376.  if v0 >= v1 then goto L2193ba;
  #L21937a.  v2:= v5.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L21937e.  call temp:= `name`(v6, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L219384.  v3:= temp @kind object;
  #L219386.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L21938c.  v2:= temp @kind object;
  #L21938e.  v3:= ": " @kind object;
  #L219392.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L219398.  v2:= temp @kind object;
  #L21939a.  call temp:= `value`(v6, v0) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L2193a0.  v3:= temp @kind object;
  #L2193a2.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L2193a8.  v2:= temp @kind object;
  #L2193aa.  v3:= "\r\n" @kind object;
  #L2193ae.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L2193b4.  v0:= v0 + 1;
  #L2193b8.  goto L219376;
  #L2193ba.  v2:= v5.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L2193be.  v3:= "\r\n" @kind object;
  #L2193c2.  call temp:= `writeUtf8`(v2, v3) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L2193c8.  v2:= 1I;
  #L2193ca.  v5.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v2;
  #L2193ce.  return @kind void;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.http1.Http1Codec` v2 @kind this, `okhttp3.Request` v3 @kind object @name `request`) @signature `Lokhttp3/internal/http1/Http1Codec;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2193e0.  v1:= v2.`okhttp3.internal.http1.Http1Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L2193e4.  call temp:= `connection`(v1) @signature `Lokhttp3/internal/connection/StreamAllocation;.connection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L2193ea.  v1:= temp @kind object;
  #L2193ec.  call temp:= `route`(v1) @signature `Lokhttp3/internal/connection/RealConnection;.route:()Lokhttp3/Route;` @kind virtual;
  #L2193f2.  v1:= temp @kind object;
  #L2193f4.  call temp:= `proxy`(v1) @signature `Lokhttp3/Route;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L2193fa.  v1:= temp @kind object;
  #L2193fc.  call temp:= `type`(v1) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L219402.  v1:= temp @kind object;
  #L219404.  call temp:= `get`(v3, v1) @signature `Lokhttp3/internal/http/RequestLine;.get:(Lokhttp3/Request;Ljava/net/Proxy$Type;)Ljava/lang/String;` @kind static;
  #L21940a.  v0:= temp @kind object;
  #L21940c.  call temp:= `headers`(v3) @signature `Lokhttp3/Request;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L219412.  v1:= temp @kind object;
  #L219414.  call `writeRequest`(v2, v1, v0) @signature `Lokhttp3/internal/http1/Http1Codec;.writeRequest:(Lokhttp3/Headers;Ljava/lang/String;)V` @kind virtual;
  #L21941a.  return @kind void;
}
