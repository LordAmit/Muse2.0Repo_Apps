record `okhttp3.internal.http1.Http1Codec$ChunkedSink` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `boolean` `okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okio.ForwardingTimeout` `okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v2 @kind this, `okhttp3.internal.http1.Http1Codec` v3 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.<init>:(Lokhttp3/internal/http1/Http1Codec;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L218a14.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v3 @kind object;
  #L218a18.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L218a1e.  v0:= new `okio.ForwardingTimeout`;
  #L218a22.  v1:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L218a26.  v1:= v1.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L218a2a.  call temp:= `timeout`(v1) @signature `Lokio/BufferedSink;.timeout:()Lokio/Timeout;` @kind interface;
  #L218a30.  v1:= temp @kind object;
  #L218a32.  call `<init>`(v0, v1) @signature `Lokio/ForwardingTimeout;.<init>:(Lokio/Timeout;)V` @kind direct;
  #L218a38.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @type ^`okio.ForwardingTimeout` := v0 @kind object;
  #L218a3c.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L218a50.  @monitorenter v2
  #Try_start0.  
  #L218a52.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L218a56.  if v0 == 0 then goto L218a5e;
  #L218a5a.  @monitorexit v2
  #L218a5c.  return @kind void;
  #L218a5e.  v0:= 1I;
  #Try_start1.  
  #L218a60.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` := v0 @kind boolean;
  #L218a64.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L218a68.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L218a6c.  v1:= "0\r\n\r\n" @kind object;
  #L218a70.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L218a76.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L218a7a.  v1:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L218a7e.  call `detachTimeout`(v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec;.detachTimeout:(Lokio/ForwardingTimeout;)V` @kind virtual;
  #L218a84.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L218a88.  v1:= 3I;
  #L218a8a.  v0.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v1;
  #Try_end1.  
  #L218a8e.  goto L218a5a;
  #L218a90.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L218a92.  @monitorexit v2
  #L218a94.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L218a90;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L218a90;
}
procedure `void` `flush`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L218abc.  @monitorenter v1
  #Try_start0.  
  #L218abe.  v0:= v1.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L218ac2.  if v0 == 0 then goto L218aca;
  #L218ac6.  @monitorexit v1
  #L218ac8.  return @kind void;
  #Try_start1.  
  #L218aca.  v0:= v1.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L218ace.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L218ad2.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #Try_end1.  
  #L218ad8.  goto L218ac6;
  #L218ada.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L218adc.  @monitorexit v1
  #L218ade.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L218ada;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L218ada;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L218b04.  v0:= v1.`okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L218b08.  return v0 @kind object;
}
procedure `void` `write`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v2 @kind this, `okio.Buffer` v3 @kind object @name `source`, `long` v4 @name `byteCount`) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L218b1c.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` @kind boolean;
  #L218b20.  if v0 == 0 then goto L218b34;
  #L218b24.  v0:= new `java.lang.IllegalStateException`;
  #L218b28.  v1:= "closed" @kind object;
  #L218b2c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L218b32.  throw v0;
  #L218b34.  v0:= 0L;
  #L218b38.  v0:= lcmp(v4, v0);
  #L218b3c.  if v0 != 0 then goto L218b42;
  #L218b40.  return @kind void;
  #L218b42.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L218b46.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L218b4a.  call temp:= `writeHexadecimalUnsignedLong`(v0, v4) @signature `Lokio/BufferedSink;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @kind interface;
  #L218b50.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L218b54.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L218b58.  v1:= "\r\n" @kind object;
  #L218b5c.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L218b62.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L218b66.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L218b6a.  call `write`(v0, v3, v4) @signature `Lokio/BufferedSink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L218b70.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L218b74.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L218b78.  v1:= "\r\n" @kind object;
  #L218b7c.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L218b82.  goto L218b40;
}
