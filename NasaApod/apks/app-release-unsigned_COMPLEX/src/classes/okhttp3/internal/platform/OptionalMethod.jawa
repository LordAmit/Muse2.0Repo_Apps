record `okhttp3.internal.platform.OptionalMethod` @kind class @AccessFlag  {
  `java.lang.String` `okhttp3.internal.platform.OptionalMethod.methodName` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `okhttp3.internal.platform.OptionalMethod.methodParams` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `okhttp3.internal.platform.OptionalMethod.returnType` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.platform.OptionalMethod` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object @name `methodName`, `java.lang.Class`[] v3 @kind object @name `methodParams`) @signature `Lokhttp3/internal/platform/OptionalMethod;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1a8f54.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a8f5a.  v0.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` := v1 @kind object;
  #L1a8f5e.  v0.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` := v2 @kind object;
  #L1a8f62.  v0.`okhttp3.internal.platform.OptionalMethod.methodParams` @type ^`java.lang.Class`[] := v3 @kind object;
  #L1a8f66.  return @kind void;
}
procedure `java.lang.reflect.Method` `getMethod`(`okhttp3.internal.platform.OptionalMethod` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1a8f78.  v0:= 0I;
  #L1a8f7a.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L1a8f7e.  if v1 == 0 then goto L1a8fb8;
  #L1a8f82.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L1a8f86.  v2:= v3.`okhttp3.internal.platform.OptionalMethod.methodParams` @type ^`java.lang.Class`[] @kind object;
  #L1a8f8a.  call temp:= `getPublicMethod`(v4, v1, v2) @signature `Lokhttp3/internal/platform/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L1a8f90.  v0:= temp @kind object;
  #L1a8f92.  if v0 == 0 then goto L1a8fb8;
  #L1a8f96.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` @kind object;
  #L1a8f9a.  if v1 == 0 then goto L1a8fb8;
  #L1a8f9e.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` @kind object;
  #L1a8fa2.  call temp:= `getReturnType`(v0) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L1a8fa8.  v2:= temp @kind object;
  #L1a8faa.  call temp:= `isAssignableFrom`(v1, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1a8fb0.  v1:= temp;
  #L1a8fb2.  if v1 != 0 then goto L1a8fb8;
  #L1a8fb6.  v0:= 0I;
  #L1a8fb8.  return v0 @kind object;
}
procedure `java.lang.reflect.Method` `getPublicMethod`(`java.lang.Class` v2 @kind object, `java.lang.String` v3 @kind object @name `methodName`, `java.lang.Class`[] v4 @kind object @name `parameterTypes`) @signature `Lokhttp3/internal/platform/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1a8fcc.  v0:= 0I;
  #Try_start0.  
  #L1a8fce.  call temp:= `getMethod`(v2, v3, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L1a8fd4.  v0:= temp @kind object;
  #L1a8fd6.  call temp:= `getModifiers`(v0) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #Try_end0.  
  #L1a8fdc.  v1:= temp;
  #L1a8fde.  v1:= v1 ^& 1;
  #L1a8fe2.  if v1 != 0 then goto L1a8fe8;
  #L1a8fe6.  v0:= 0I;
  #L1a8fe8.  return v0 @kind object;
  #L1a8fea.  v1:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L1a8fec.  goto L1a8fe8;
  catch `java.lang.NoSuchMethodException` @[Try_start0..Try_end0] goto L1a8fea;
}
procedure `java.lang.Object` `invoke`(`okhttp3.internal.platform.OptionalMethod` v6 @kind this, `java.lang.Object` v7 @kind object, `java.lang.Object`[] v8 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1a9010.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1a9016.  v3:= temp @kind object;
  #L1a9018.  call temp:= `getMethod`(v6, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L1a901e.  v2:= temp @kind object;
  #L1a9020.  if v2 != 0 then goto L1a906e;
  #L1a9024.  v3:= new `java.lang.AssertionError`;
  #L1a9028.  v4:= new `java.lang.StringBuilder`;
  #L1a902c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1a9032.  v5:= "Method " @kind object;
  #L1a9036.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a903c.  v4:= temp @kind object;
  #L1a903e.  v5:= v6.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L1a9042.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a9048.  v4:= temp @kind object;
  #L1a904a.  v5:= " not supported for object " @kind object;
  #L1a904e.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a9054.  v4:= temp @kind object;
  #L1a9056.  call temp:= `append`(v4, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a905c.  v4:= temp @kind object;
  #L1a905e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a9064.  v4:= temp @kind object;
  #L1a9066.  call `<init>`(v3, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1a906c.  throw v3;
  #Try_start0.  
  #L1a906e.  call temp:= `invoke`(v2, v7, v8) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1a9074.  v3:= temp @kind object;
  #L1a9076.  return v3 @kind object;
  #L1a9078.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L1a907a.  v1:= new `java.lang.AssertionError`;
  #L1a907e.  v3:= new `java.lang.StringBuilder`;
  #L1a9082.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1a9088.  v4:= "Unexpectedly could not call: " @kind object;
  #L1a908c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a9092.  v3:= temp @kind object;
  #L1a9094.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a909a.  v3:= temp @kind object;
  #L1a909c.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a90a2.  v3:= temp @kind object;
  #L1a90a4.  call `<init>`(v1, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1a90aa.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1a90b0.  throw v1;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L1a9078;
}
procedure `java.lang.Object` `invokeOptional`(`okhttp3.internal.platform.OptionalMethod` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a90d4.  v2:= 0I;
  #L1a90d6.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1a90dc.  v3:= temp @kind object;
  #L1a90de.  call temp:= `getMethod`(v4, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L1a90e4.  v1:= temp @kind object;
  #L1a90e6.  if v1 != 0 then goto L1a90ec;
  #L1a90ea.  return v2 @kind object;
  #Try_start0.  
  #L1a90ec.  call temp:= `invoke`(v1, v5, v6) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1a90f2.  v2:= temp @kind object;
  #L1a90f4.  goto L1a90ea;
  #L1a90f6.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L1a90f8.  goto L1a90ea;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L1a90f6;
}
procedure `java.lang.Object` `invokeOptionalWithoutCheckedException`(`okhttp3.internal.platform.OptionalMethod` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptionalWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L1a911c.  call temp:= `invokeOptional`(v4, v5, v6) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1a9122.  v3:= temp @kind object;
  #L1a9124.  return v3 @kind object;
  #L1a9126.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L1a9128.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L1a912e.  v2:= temp @kind object;
  #L1a9130.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L1a9134.  if v3 == 0 then goto L1a913e;
  #L1a9138.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L1a913c.  throw v2;
  #L1a913e.  v1:= new `java.lang.AssertionError`;
  #L1a9142.  v3:= "Unexpected exception" @kind object;
  #L1a9146.  call `<init>`(v1, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1a914c.  call temp:= `initCause`(v1, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1a9152.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L1a9126;
}
procedure `java.lang.Object` `invokeWithoutCheckedException`(`okhttp3.internal.platform.OptionalMethod` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L1a9174.  call temp:= `invoke`(v4, v5, v6) @signature `Lokhttp3/internal/platform/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1a917a.  v3:= temp @kind object;
  #L1a917c.  return v3 @kind object;
  #L1a917e.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L1a9180.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L1a9186.  v2:= temp @kind object;
  #L1a9188.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L1a918c.  if v3 == 0 then goto L1a9196;
  #L1a9190.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L1a9194.  throw v2;
  #L1a9196.  v1:= new `java.lang.AssertionError`;
  #L1a919a.  v3:= "Unexpected exception" @kind object;
  #L1a919e.  call `<init>`(v1, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1a91a4.  call temp:= `initCause`(v1, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1a91aa.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L1a917e;
}
procedure `boolean` `isSupported`(`okhttp3.internal.platform.OptionalMethod` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.isSupported:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a91cc.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1a91d2.  v0:= temp @kind object;
  #L1a91d4.  call temp:= `getMethod`(v1, v0) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L1a91da.  v0:= temp @kind object;
  #L1a91dc.  if v0 == 0 then goto L1a91e4;
  #L1a91e0.  v0:= 1I;
  #L1a91e2.  return v0;
  #L1a91e4.  v0:= 0I;
  #L1a91e6.  goto L1a91e2;
}
