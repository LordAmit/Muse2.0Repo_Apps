record `okhttp3.internal.ws.WebSocketProtocol` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.String` `@@okhttp3.internal.ws.WebSocketProtocol.ACCEPT_MAGIC` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.B0_FLAG_FIN` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.B0_FLAG_RSV1` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.B0_FLAG_RSV2` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.B0_FLAG_RSV3` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.B0_MASK_OPCODE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.B1_FLAG_MASK` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.B1_MASK_LENGTH` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.CLOSE_CLIENT_GOING_AWAY` @AccessFlag STATIC_FINAL;
global `long` `@@okhttp3.internal.ws.WebSocketProtocol.CLOSE_MESSAGE_MAX` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.CLOSE_NO_STATUS_CODE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.OPCODE_BINARY` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTINUATION` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTROL_CLOSE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTROL_PING` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.OPCODE_CONTROL_PONG` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.OPCODE_FLAG_CONTROL` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.OPCODE_TEXT` @AccessFlag STATIC_FINAL;
global `long` `@@okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_BYTE_MAX` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_LONG` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_SHORT` @AccessFlag STATIC_FINAL;
global `long` `@@okhttp3.internal.ws.WebSocketProtocol.PAYLOAD_SHORT_MAX` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.ws.WebSocketProtocol` v2 @kind this) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1aaf7c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1aaf82.  v0:= new `java.lang.AssertionError`;
  #L1aaf86.  v1:= "No instances." @kind object;
  #L1aaf8a.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1aaf90.  throw v0;
}
procedure `java.lang.String` `acceptHeader`(`java.lang.String` v2 @kind object @name `key`) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.acceptHeader:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1aafa4.  v0:= new `java.lang.StringBuilder`;
  #L1aafa8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1aafae.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1aafb4.  v0:= temp @kind object;
  #L1aafb6.  v1:= "258EAFA5-E914-47DA-95CA-C5AB0DC85B11" @kind object;
  #L1aafba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1aafc0.  v0:= temp @kind object;
  #L1aafc2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1aafc8.  v0:= temp @kind object;
  #L1aafca.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L1aafd0.  v0:= temp @kind object;
  #L1aafd2.  call temp:= `sha1`(v0) @signature `Lokio/ByteString;.sha1:()Lokio/ByteString;` @kind virtual;
  #L1aafd8.  v0:= temp @kind object;
  #L1aafda.  call temp:= `base64`(v0) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L1aafe0.  v0:= temp @kind object;
  #L1aafe2.  return v0 @kind object;
}
procedure `java.lang.String` `closeCodeExceptionMessage`(`int` v2 @name `code`) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.closeCodeExceptionMessage:(I)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1aaff4.  v0:= 1000I;
  #L1aaff8.  if v2 < v0 then goto L1ab004;
  #L1aaffc.  v0:= 5000I;
  #L1ab000.  if v2 < v0 then goto L1ab02c;
  #L1ab004.  v0:= new `java.lang.StringBuilder`;
  #L1ab008.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ab00e.  v1:= "Code must be in range [1000,5000): " @kind object;
  #L1ab012.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ab018.  v0:= temp @kind object;
  #L1ab01a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ab020.  v0:= temp @kind object;
  #L1ab022.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ab028.  v0:= temp @kind object;
  #L1ab02a.  return v0 @kind object;
  #L1ab02c.  v0:= 1004I;
  #L1ab030.  if v2 < v0 then goto L1ab03c;
  #L1ab034.  v0:= 1006I;
  #L1ab038.  if v2 <= v0 then goto L1ab04c;
  #L1ab03c.  v0:= 1012I;
  #L1ab040.  if v2 < v0 then goto L1ab080;
  #L1ab044.  v0:= 2999I;
  #L1ab048.  if v2 > v0 then goto L1ab080;
  #L1ab04c.  v0:= new `java.lang.StringBuilder`;
  #L1ab050.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ab056.  v1:= "Code " @kind object;
  #L1ab05a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ab060.  v0:= temp @kind object;
  #L1ab062.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ab068.  v0:= temp @kind object;
  #L1ab06a.  v1:= " is reserved and may not be used." @kind object;
  #L1ab06e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ab074.  v0:= temp @kind object;
  #L1ab076.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ab07c.  v0:= temp @kind object;
  #L1ab07e.  goto L1ab02a;
  #L1ab080.  v0:= 0I;
  #L1ab082.  goto L1ab02a;
}
procedure `void` `toggleMask`(`okio.Buffer$UnsafeCursor` v7 @kind object @name `cursor`, `byte`[] v8 @kind object @name `key`) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.toggleMask:(Lokio/Buffer$UnsafeCursor;[B)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1ab094.  v3:= 0I;
  #L1ab096.  v4:= length @variable v8;
  #L1ab098.  v0:= v7.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] @kind object;
  #L1ab09c.  v2:= v7.`okio.Buffer$UnsafeCursor.start` @type ^`int`;
  #L1ab0a0.  v1:= v7.`okio.Buffer$UnsafeCursor.end` @type ^`int`;
  #L1ab0a4.  if v2 >= v1 then goto L1ab0c4;
  #L1ab0a8.  v3:= v3 %% v4 @kind int;
  #L1ab0aa.  v5:= v0[v2] @kind byte;
  #L1ab0ae.  v6:= v8[v3] @kind byte;
  #L1ab0b2.  v5:= v5 ^~ v6 @kind int;
  #L1ab0b4.  v5:= (`byte`) v5 @kind i2b;
  #L1ab0b6.  v0[v2]:= v5 @kind byte;
  #L1ab0ba.  v2:= v2 + 1;
  #L1ab0be.  v3:= v3 + 1;
  #L1ab0c2.  goto L1ab0a4;
  #L1ab0c4.  call temp:= `next`(v7) @signature `Lokio/Buffer$UnsafeCursor;.next:()I` @kind virtual;
  #L1ab0ca.  v5:= temp;
  #L1ab0cc.  v6:= -1I;
  #L1ab0ce.  if v5 != v6 then goto L1ab098;
  #L1ab0d2.  return @kind void;
}
procedure `void` `validateCloseCode`(`int` v2 @name `code`) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.validateCloseCode:(I)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1ab0e4.  call temp:= `closeCodeExceptionMessage`(v2) @signature `Lokhttp3/internal/ws/WebSocketProtocol;.closeCodeExceptionMessage:(I)Ljava/lang/String;` @kind static;
  #L1ab0ea.  v0:= temp @kind object;
  #L1ab0ec.  if v0 == 0 then goto L1ab0fc;
  #L1ab0f0.  v1:= new `java.lang.IllegalArgumentException`;
  #L1ab0f4.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ab0fa.  throw v1;
  #L1ab0fc.  return @kind void;
}
