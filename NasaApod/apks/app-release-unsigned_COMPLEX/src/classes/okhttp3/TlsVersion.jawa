record `okhttp3.TlsVersion` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `java.lang.String` `okhttp3.TlsVersion.javaName` @AccessFlag FINAL;
}
global `okhttp3.TlsVersion`[] `@@okhttp3.TlsVersion.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `okhttp3.TlsVersion` `@@okhttp3.TlsVersion.SSL_3_0` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.TlsVersion` `@@okhttp3.TlsVersion.TLS_1_0` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.TlsVersion` `@@okhttp3.TlsVersion.TLS_1_1` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.TlsVersion` `@@okhttp3.TlsVersion.TLS_1_2` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.TlsVersion` `@@okhttp3.TlsVersion.TLS_1_3` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lokhttp3/TlsVersion;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L19db40.  v7:= 4I;
  #L19db42.  v6:= 3I;
  #L19db44.  v5:= 2I;
  #L19db46.  v4:= 1I;
  #L19db48.  v3:= 0I;
  #L19db4a.  v0:= new `okhttp3.TlsVersion`;
  #L19db4e.  v1:= "TLS_1_3" @kind object;
  #L19db52.  v2:= "TLSv1.3" @kind object;
  #L19db56.  call `<init>`(v0, v1, v3, v2) @signature `Lokhttp3/TlsVersion;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19db5c.  `@@okhttp3.TlsVersion.TLS_1_3` @type ^`okhttp3.TlsVersion` := v0 @kind object;
  #L19db60.  v0:= new `okhttp3.TlsVersion`;
  #L19db64.  v1:= "TLS_1_2" @kind object;
  #L19db68.  v2:= "TLSv1.2" @kind object;
  #L19db6c.  call `<init>`(v0, v1, v4, v2) @signature `Lokhttp3/TlsVersion;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19db72.  `@@okhttp3.TlsVersion.TLS_1_2` @type ^`okhttp3.TlsVersion` := v0 @kind object;
  #L19db76.  v0:= new `okhttp3.TlsVersion`;
  #L19db7a.  v1:= "TLS_1_1" @kind object;
  #L19db7e.  v2:= "TLSv1.1" @kind object;
  #L19db82.  call `<init>`(v0, v1, v5, v2) @signature `Lokhttp3/TlsVersion;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19db88.  `@@okhttp3.TlsVersion.TLS_1_1` @type ^`okhttp3.TlsVersion` := v0 @kind object;
  #L19db8c.  v0:= new `okhttp3.TlsVersion`;
  #L19db90.  v1:= "TLS_1_0" @kind object;
  #L19db94.  v2:= "TLSv1" @kind object;
  #L19db98.  call `<init>`(v0, v1, v6, v2) @signature `Lokhttp3/TlsVersion;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19db9e.  `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` := v0 @kind object;
  #L19dba2.  v0:= new `okhttp3.TlsVersion`;
  #L19dba6.  v1:= "SSL_3_0" @kind object;
  #L19dbaa.  v2:= "SSLv3" @kind object;
  #L19dbae.  call `<init>`(v0, v1, v7, v2) @signature `Lokhttp3/TlsVersion;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19dbb4.  `@@okhttp3.TlsVersion.SSL_3_0` @type ^`okhttp3.TlsVersion` := v0 @kind object;
  #L19dbb8.  v0:= 5I;
  #L19dbba.  v0:= new `okhttp3.TlsVersion`[v0];
  #L19dbbe.  v1:= `@@okhttp3.TlsVersion.TLS_1_3` @type ^`okhttp3.TlsVersion` @kind object;
  #L19dbc2.  v0[v3]:= v1 @kind object;
  #L19dbc6.  v1:= `@@okhttp3.TlsVersion.TLS_1_2` @type ^`okhttp3.TlsVersion` @kind object;
  #L19dbca.  v0[v4]:= v1 @kind object;
  #L19dbce.  v1:= `@@okhttp3.TlsVersion.TLS_1_1` @type ^`okhttp3.TlsVersion` @kind object;
  #L19dbd2.  v0[v5]:= v1 @kind object;
  #L19dbd6.  v1:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L19dbda.  v0[v6]:= v1 @kind object;
  #L19dbde.  v1:= `@@okhttp3.TlsVersion.SSL_3_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L19dbe2.  v0[v7]:= v1 @kind object;
  #L19dbe6.  `@@okhttp3.TlsVersion.$VALUES` @type ^`okhttp3.TlsVersion`[] := v0 @kind object;
  #L19dbea.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.TlsVersion` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object @name `javaName`) @signature `Lokhttp3/TlsVersion;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L19dbfc.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L19dc02.  v0.`okhttp3.TlsVersion.javaName` @type ^`java.lang.String` := v3 @kind object;
  #L19dc06.  return @kind void;
}
procedure `okhttp3.TlsVersion` `forJavaName`(`java.lang.String` v3 @kind object @name `javaName`) @signature `Lokhttp3/TlsVersion;.forJavaName:(Ljava/lang/String;)Lokhttp3/TlsVersion;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L19dc18.  v0:= -1I;
  #L19dc1a.  call temp:= `hashCode`(v3) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L19dc20.  v1:= temp;
  #L19dc22.  goto L19dce4;
  #L19dc28.  goto L19dd10;
  #L19dc2e.  v0:= new `java.lang.IllegalArgumentException`;
  #L19dc32.  v1:= new `java.lang.StringBuilder`;
  #L19dc36.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19dc3c.  v2:= "Unexpected TLS version: " @kind object;
  #L19dc40.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19dc46.  v1:= temp @kind object;
  #L19dc48.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19dc4e.  v1:= temp @kind object;
  #L19dc50.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19dc56.  v1:= temp @kind object;
  #L19dc58.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19dc5e.  throw v0;
  #L19dc60.  v1:= "TLSv1.3" @kind object;
  #L19dc64.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19dc6a.  v1:= temp;
  #L19dc6c.  if v1 == 0 then goto L19dc28;
  #L19dc70.  v0:= 0I;
  #L19dc72.  goto L19dc28;
  #L19dc74.  v1:= "TLSv1.2" @kind object;
  #L19dc78.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19dc7e.  v1:= temp;
  #L19dc80.  if v1 == 0 then goto L19dc28;
  #L19dc84.  v0:= 1I;
  #L19dc86.  goto L19dc28;
  #L19dc88.  v1:= "TLSv1.1" @kind object;
  #L19dc8c.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19dc92.  v1:= temp;
  #L19dc94.  if v1 == 0 then goto L19dc28;
  #L19dc98.  v0:= 2I;
  #L19dc9a.  goto L19dc28;
  #L19dc9c.  v1:= "TLSv1" @kind object;
  #L19dca0.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19dca6.  v1:= temp;
  #L19dca8.  if v1 == 0 then goto L19dc28;
  #L19dcac.  v0:= 3I;
  #L19dcae.  goto L19dc28;
  #L19dcb0.  v1:= "SSLv3" @kind object;
  #L19dcb4.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19dcba.  v1:= temp;
  #L19dcbc.  if v1 == 0 then goto L19dc28;
  #L19dcc0.  v0:= 4I;
  #L19dcc2.  goto L19dc28;
  #L19dcc4.  v0:= `@@okhttp3.TlsVersion.TLS_1_3` @type ^`okhttp3.TlsVersion` @kind object;
  #L19dcc8.  return v0 @kind object;
  #L19dcca.  v0:= `@@okhttp3.TlsVersion.TLS_1_2` @type ^`okhttp3.TlsVersion` @kind object;
  #L19dcce.  goto L19dcc8;
  #L19dcd0.  v0:= `@@okhttp3.TlsVersion.TLS_1_1` @type ^`okhttp3.TlsVersion` @kind object;
  #L19dcd4.  goto L19dcc8;
  #L19dcd6.  v0:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L19dcda.  goto L19dcc8;
  #L19dcdc.  v0:= `@@okhttp3.TlsVersion.SSL_3_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L19dce0.  goto L19dcc8;
  #L19dce2.  
  #L19dce4.  switch v1
                  | -503070503 => goto L19dc88
                  | -503070502 => goto L19dc74
                  | -503070501 => goto L19dc60
                  | 79201641 => goto L19dcb0
                  | 79923350 => goto L19dc9c
                  | else => goto L19dc28;
  #L19dd10.  switch v0
                  | 0 => goto L19dcc4
                  | 1 => goto L19dcca
                  | 2 => goto L19dcd0
                  | 3 => goto L19dcd6
                  | 4 => goto L19dcdc
                  | else => goto L19dc2e;
}
procedure `java.util.List` `forJavaNames`(`java.lang.String`[] v5 @kind object @name `tlsVersions`) @signature `Lokhttp3/TlsVersion;.forJavaNames:([Ljava/lang/String;)Ljava/util/List;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L19dd3c.  v0:= new `java.util.ArrayList`;
  #L19dd40.  v2:= length @variable v5;
  #L19dd42.  call `<init>`(v0, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L19dd48.  v3:= length @variable v5;
  #L19dd4a.  v2:= 0I;
  #L19dd4c.  if v2 >= v3 then goto L19dd68;
  #L19dd50.  v1:= v5[v2] @kind object;
  #L19dd54.  call temp:= `forJavaName`(v1) @signature `Lokhttp3/TlsVersion;.forJavaName:(Ljava/lang/String;)Lokhttp3/TlsVersion;` @kind static;
  #L19dd5a.  v4:= temp @kind object;
  #L19dd5c.  call temp:= `add`(v0, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L19dd62.  v2:= v2 + 1;
  #L19dd66.  goto L19dd4c;
  #L19dd68.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L19dd6e.  v2:= temp @kind object;
  #L19dd70.  return v2 @kind object;
}
procedure `okhttp3.TlsVersion` `valueOf`(`java.lang.String` v1 @kind object @name `name`) @signature `Lokhttp3/TlsVersion;.valueOf:(Ljava/lang/String;)Lokhttp3/TlsVersion;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19dd84.  v0:= constclass @type ^`okhttp3.TlsVersion` @kind object;
  #L19dd88.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L19dd8e.  v0:= temp @kind object;
  #L19dd90.  v0:= (`okhttp3.TlsVersion`) v0 @kind object;
  #L19dd94.  return v0 @kind object;
}
procedure `okhttp3.TlsVersion`[] `values`() @signature `Lokhttp3/TlsVersion;.values:()[Lokhttp3/TlsVersion;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19dda8.  v0:= `@@okhttp3.TlsVersion.$VALUES` @type ^`okhttp3.TlsVersion`[] @kind object;
  #L19ddac.  call temp:= `clone`(v0) @signature `[Lokhttp3/TlsVersion;.clone:()Ljava/lang/Object;` @kind virtual;
  #L19ddb2.  v0:= temp @kind object;
  #L19ddb4.  v0:= (`okhttp3.TlsVersion`[]) v0 @kind object;
  #L19ddb8.  return v0 @kind object;
}
procedure `java.lang.String` `javaName`(`okhttp3.TlsVersion` v1 @kind this) @signature `Lokhttp3/TlsVersion;.javaName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19ddcc.  v0:= v1.`okhttp3.TlsVersion.javaName` @type ^`java.lang.String` @kind object;
  #L19ddd0.  return v0 @kind object;
}
