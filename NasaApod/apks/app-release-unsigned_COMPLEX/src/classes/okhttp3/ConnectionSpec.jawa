record `okhttp3.ConnectionSpec` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.ConnectionSpec.cipherSuites` @AccessFlag FINAL;
  `boolean` `okhttp3.ConnectionSpec.supportsTlsExtensions` @AccessFlag FINAL;
  `boolean` `okhttp3.ConnectionSpec.tls` @AccessFlag FINAL;
  `java.lang.String`[] `okhttp3.ConnectionSpec.tlsVersions` @AccessFlag FINAL;
}
global `okhttp3.CipherSuite`[] `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.CLEARTEXT` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.MODERN_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/ConnectionSpec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L19624c.  v7:= 4I;
  #L19624e.  v6:= 3I;
  #L196250.  v5:= 2I;
  #L196252.  v4:= 0I;
  #L196254.  v3:= 1I;
  #L196256.  v0:= 13I;
  #L19625a.  v0:= new `okhttp3.CipherSuite`[v0];
  #L19625e.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L196262.  v0[v4]:= v1 @kind object;
  #L196266.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L19626a.  v0[v3]:= v1 @kind object;
  #L19626e.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L196272.  v0[v5]:= v1 @kind object;
  #L196276.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L19627a.  v0[v6]:= v1 @kind object;
  #L19627e.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L196282.  v0[v7]:= v1 @kind object;
  #L196286.  v1:= 5I;
  #L196288.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L19628c.  v0[v1]:= v2 @kind object;
  #L196290.  v1:= 6I;
  #L196292.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L196296.  v0[v1]:= v2 @kind object;
  #L19629a.  v1:= 7I;
  #L19629c.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L1962a0.  v0[v1]:= v2 @kind object;
  #L1962a4.  v1:= 8I;
  #L1962a8.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L1962ac.  v0[v1]:= v2 @kind object;
  #L1962b0.  v1:= 9I;
  #L1962b4.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L1962b8.  v0[v1]:= v2 @kind object;
  #L1962bc.  v1:= 10I;
  #L1962c0.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L1962c4.  v0[v1]:= v2 @kind object;
  #L1962c8.  v1:= 11I;
  #L1962cc.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L1962d0.  v0[v1]:= v2 @kind object;
  #L1962d4.  v1:= 12I;
  #L1962d8.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L1962dc.  v0[v1]:= v2 @kind object;
  #L1962e0.  `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @type ^`okhttp3.CipherSuite`[] := v0 @kind object;
  #L1962e4.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L1962e8.  call `<init>`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L1962ee.  v1:= `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @type ^`okhttp3.CipherSuite`[] @kind object;
  #L1962f2.  call temp:= `cipherSuites`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L1962f8.  v0:= temp @kind object;
  #L1962fa.  v1:= new `okhttp3.TlsVersion`[v7];
  #L1962fe.  v2:= `@@okhttp3.TlsVersion.TLS_1_3` @type ^`okhttp3.TlsVersion` @kind object;
  #L196302.  v1[v4]:= v2 @kind object;
  #L196306.  v2:= `@@okhttp3.TlsVersion.TLS_1_2` @type ^`okhttp3.TlsVersion` @kind object;
  #L19630a.  v1[v3]:= v2 @kind object;
  #L19630e.  v2:= `@@okhttp3.TlsVersion.TLS_1_1` @type ^`okhttp3.TlsVersion` @kind object;
  #L196312.  v1[v5]:= v2 @kind object;
  #L196316.  v2:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L19631a.  v1[v6]:= v2 @kind object;
  #L19631e.  call temp:= `tlsVersions`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L196324.  v0:= temp @kind object;
  #L196326.  call temp:= `supportsTlsExtensions`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L19632c.  v0:= temp @kind object;
  #L19632e.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L196334.  v0:= temp @kind object;
  #L196336.  `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L19633a.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L19633e.  v1:= `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` @kind object;
  #L196342.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @kind direct;
  #L196348.  v1:= new `okhttp3.TlsVersion`[v3];
  #L19634c.  v2:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L196350.  v1[v4]:= v2 @kind object;
  #L196354.  call temp:= `tlsVersions`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L19635a.  v0:= temp @kind object;
  #L19635c.  call temp:= `supportsTlsExtensions`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L196362.  v0:= temp @kind object;
  #L196364.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L19636a.  v0:= temp @kind object;
  #L19636c.  `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L196370.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L196374.  call `<init>`(v0, v4) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L19637a.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L196380.  v0:= temp @kind object;
  #L196382.  `@@okhttp3.ConnectionSpec.CLEARTEXT` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L196386.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec` v1 @kind this, `okhttp3.ConnectionSpec$Builder` v2 @kind object @name `builder`) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L196398.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19639e.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L1963a2.  v1.`okhttp3.ConnectionSpec.tls` @type ^`boolean` := v0 @kind boolean;
  #L1963a6.  v0:= v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1963aa.  v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L1963ae.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1963b2.  v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L1963b6.  v0:= v2.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L1963ba.  v1.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` := v0 @kind boolean;
  #L1963be.  return @kind void;
}
procedure `okhttp3.ConnectionSpec` `supportedSpec`(`okhttp3.ConnectionSpec` v7 @kind this, `javax.net.ssl.SSLSocket` v8 @kind object @name `sslSocket`, `boolean` v9 @name `isFallback`) @signature `Lokhttp3/ConnectionSpec;.supportedSpec:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1963d0.  v4:= v7.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1963d4.  if v4 == 0 then goto L196462;
  #L1963d8.  v4:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L1963dc.  call temp:= `getEnabledCipherSuites`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L1963e2.  v5:= temp @kind object;
  #L1963e4.  v6:= v7.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1963e8.  call temp:= `intersect`(v4, v5, v6) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L1963ee.  v0:= temp @kind object;
  #L1963f0.  v4:= v7.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1963f4.  if v4 == 0 then goto L19646c;
  #L1963f8.  v4:= `@@okhttp3.internal.Util.NATURAL_ORDER` @type ^`java.util.Comparator` @kind object;
  #L1963fc.  call temp:= `getEnabledProtocols`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L196402.  v5:= temp @kind object;
  #L196404.  v6:= v7.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L196408.  call temp:= `intersect`(v4, v5, v6) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L19640e.  v3:= temp @kind object;
  #L196410.  call temp:= `getSupportedCipherSuites`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getSupportedCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L196416.  v2:= temp @kind object;
  #L196418.  v4:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L19641c.  v5:= "TLS_FALLBACK_SCSV" @kind object;
  #L196420.  call temp:= `indexOf`(v4, v2, v5) @signature `Lokhttp3/internal/Util;.indexOf:(Ljava/util/Comparator;[Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L196426.  v1:= temp;
  #L196428.  if v9 == 0 then goto L19643e;
  #L19642c.  v4:= -1I;
  #L19642e.  if v1 == v4 then goto L19643e;
  #L196432.  v4:= v2[v1] @kind object;
  #L196436.  call temp:= `concat`(v0, v4) @signature `Lokhttp3/internal/Util;.concat:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L19643c.  v0:= temp @kind object;
  #L19643e.  v4:= new `okhttp3.ConnectionSpec$Builder`;
  #L196442.  call `<init>`(v4, v7) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @kind direct;
  #L196448.  call temp:= `cipherSuites`(v4, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L19644e.  v4:= temp @kind object;
  #L196450.  call temp:= `tlsVersions`(v4, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L196456.  v4:= temp @kind object;
  #L196458.  call temp:= `build`(v4) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L19645e.  v4:= temp @kind object;
  #L196460.  return v4 @kind object;
  #L196462.  call temp:= `getEnabledCipherSuites`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L196468.  v0:= temp @kind object;
  #L19646a.  goto L1963f0;
  #L19646c.  call temp:= `getEnabledProtocols`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L196472.  v3:= temp @kind object;
  #L196474.  goto L196410;
}
procedure `void` `apply`(`okhttp3.ConnectionSpec` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object @name `sslSocket`, `boolean` v4 @name `isFallback`) @signature `Lokhttp3/ConnectionSpec;.apply:(Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L196488.  call temp:= `supportedSpec`(v2, v3, v4) @signature `Lokhttp3/ConnectionSpec;.supportedSpec:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @kind direct;
  #L19648e.  v0:= temp @kind object;
  #L196490.  v1:= v0.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L196494.  if v1 == 0 then goto L1964a2;
  #L196498.  v1:= v0.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L19649c.  call `setEnabledProtocols`(v3, v1) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledProtocols:([Ljava/lang/String;)V` @kind virtual;
  #L1964a2.  v1:= v0.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1964a6.  if v1 == 0 then goto L1964b4;
  #L1964aa.  v1:= v0.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1964ae.  call `setEnabledCipherSuites`(v3, v1) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledCipherSuites:([Ljava/lang/String;)V` @kind virtual;
  #L1964b4.  return @kind void;
}
procedure `java.util.List` `cipherSuites`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1964c8.  v0:= v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1964cc.  if v0 == 0 then goto L1964de;
  #L1964d0.  v0:= v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1964d4.  call temp:= `forJavaNames`(v0) @signature `Lokhttp3/CipherSuite;.forJavaNames:([Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L1964da.  v0:= temp @kind object;
  #L1964dc.  return v0 @kind object;
  #L1964de.  v0:= 0I;
  #L1964e0.  goto L1964dc;
}
procedure `boolean` `equals`(`okhttp3.ConnectionSpec` v5 @kind this, `java.lang.Object` v6 @kind object @name `other`) @signature `Lokhttp3/ConnectionSpec;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1964f4.  v2:= 1I;
  #L1964f6.  v1:= 0I;
  #L1964f8.  v3:= instanceof @variable v6 @type ^`okhttp3.ConnectionSpec` @kind boolean;
  #L1964fc.  if v3 != 0 then goto L196502;
  #L196500.  return v1;
  #L196502.  if v6 != v5 then goto L19650a;
  #L196506.  v1:= v2;
  #L196508.  goto L196500;
  #L19650a.  v0:= v6 @kind object;
  #L19650c.  v0:= (`okhttp3.ConnectionSpec`) v0 @kind object;
  #L196510.  v3:= v5.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L196514.  v4:= v0.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L196518.  if v3 != v4 then goto L196500;
  #L19651c.  v3:= v5.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L196520.  if v3 == 0 then goto L196558;
  #L196524.  v3:= v5.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L196528.  v4:= v0.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L19652c.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L196532.  v3:= temp;
  #L196534.  if v3 == 0 then goto L196500;
  #L196538.  v3:= v5.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L19653c.  v4:= v0.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L196540.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L196546.  v3:= temp;
  #L196548.  if v3 == 0 then goto L196500;
  #L19654c.  v3:= v5.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L196550.  v4:= v0.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L196554.  if v3 != v4 then goto L196500;
  #L196558.  v1:= v2;
  #L19655a.  goto L196500;
}
procedure `int` `hashCode`(`okhttp3.ConnectionSpec` v3 @kind this) @signature `Lokhttp3/ConnectionSpec;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19656c.  v0:= 17I;
  #L196570.  v1:= v3.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L196574.  if v1 == 0 then goto L1965ae;
  #L196578.  v1:= v3.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L19657c.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L196582.  v1:= temp;
  #L196584.  v0:= v1 + 527;
  #L196588.  v1:= v0 * 31;
  #L19658c.  v2:= v3.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L196590.  call temp:= `hashCode`(v2) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L196596.  v2:= temp;
  #L196598.  v0:= v1 + v2 @kind int;
  #L19659c.  v2:= v0 * 31;
  #L1965a0.  v1:= v3.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L1965a4.  if v1 == 0 then goto L1965b0;
  #L1965a8.  v1:= 0I;
  #L1965aa.  v0:= v2 + v1 @kind int;
  #L1965ae.  return v0;
  #L1965b0.  v1:= 1I;
  #L1965b2.  goto L1965aa;
}
procedure `boolean` `isCompatible`(`okhttp3.ConnectionSpec` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object @name `socket`) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1965c4.  v0:= 0I;
  #L1965c6.  v1:= v4.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L1965ca.  if v1 != 0 then goto L1965d0;
  #L1965ce.  return v0;
  #L1965d0.  v1:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1965d4.  if v1 == 0 then goto L1965f4;
  #L1965d8.  v1:= `@@okhttp3.internal.Util.NATURAL_ORDER` @type ^`java.util.Comparator` @kind object;
  #L1965dc.  v2:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1965e0.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L1965e6.  v3:= temp @kind object;
  #L1965e8.  call temp:= `nonEmptyIntersection`(v1, v2, v3) @signature `Lokhttp3/internal/Util;.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L1965ee.  v1:= temp;
  #L1965f0.  if v1 == 0 then goto L1965ce;
  #L1965f4.  v1:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1965f8.  if v1 == 0 then goto L196618;
  #L1965fc.  v1:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L196600.  v2:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L196604.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L19660a.  v3:= temp @kind object;
  #L19660c.  call temp:= `nonEmptyIntersection`(v1, v2, v3) @signature `Lokhttp3/internal/Util;.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L196612.  v1:= temp;
  #L196614.  if v1 == 0 then goto L1965ce;
  #L196618.  v0:= 1I;
  #L19661a.  goto L1965ce;
}
procedure `boolean` `isTls`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.isTls:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19662c.  v0:= v1.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L196630.  return v0;
}
procedure `boolean` `supportsTlsExtensions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.supportsTlsExtensions:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L196644.  v0:= v1.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L196648.  return v0;
}
procedure `java.util.List` `tlsVersions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19665c.  v0:= v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L196660.  if v0 == 0 then goto L196672;
  #L196664.  v0:= v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L196668.  call temp:= `forJavaNames`(v0) @signature `Lokhttp3/TlsVersion;.forJavaNames:([Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L19666e.  v0:= temp @kind object;
  #L196670.  return v0 @kind object;
  #L196672.  v0:= 0I;
  #L196674.  goto L196670;
}
procedure `java.lang.String` `toString`(`okhttp3.ConnectionSpec` v4 @kind this) @signature `Lokhttp3/ConnectionSpec;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L196688.  v2:= v4.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L19668c.  if v2 != 0 then goto L196696;
  #L196690.  v2:= "ConnectionSpec()" @kind object;
  #L196694.  return v2 @kind object;
  #L196696.  v2:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L19669a.  if v2 == 0 then goto L196726;
  #L19669e.  call temp:= `cipherSuites`(v4) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @kind virtual;
  #L1966a4.  v2:= temp @kind object;
  #L1966a6.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1966ac.  v0:= temp @kind object;
  #L1966ae.  v2:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1966b2.  if v2 == 0 then goto L19672c;
  #L1966b6.  call temp:= `tlsVersions`(v4) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @kind virtual;
  #L1966bc.  v2:= temp @kind object;
  #L1966be.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1966c4.  v1:= temp @kind object;
  #L1966c6.  v2:= new `java.lang.StringBuilder`;
  #L1966ca.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1966d0.  v3:= "ConnectionSpec(cipherSuites=" @kind object;
  #L1966d4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1966da.  v2:= temp @kind object;
  #L1966dc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1966e2.  v2:= temp @kind object;
  #L1966e4.  v3:= ", tlsVersions=" @kind object;
  #L1966e8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1966ee.  v2:= temp @kind object;
  #L1966f0.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1966f6.  v2:= temp @kind object;
  #L1966f8.  v3:= ", supportsTlsExtensions=" @kind object;
  #L1966fc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L196702.  v2:= temp @kind object;
  #L196704.  v3:= v4.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L196708.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L19670e.  v2:= temp @kind object;
  #L196710.  v3:= ")" @kind object;
  #L196714.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19671a.  v2:= temp @kind object;
  #L19671c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L196722.  v2:= temp @kind object;
  #L196724.  goto L196694;
  #L196726.  v0:= "[all enabled]" @kind object;
  #L19672a.  goto L1966ae;
  #L19672c.  v1:= "[all enabled]" @kind object;
  #L196730.  goto L1966c6;
}
