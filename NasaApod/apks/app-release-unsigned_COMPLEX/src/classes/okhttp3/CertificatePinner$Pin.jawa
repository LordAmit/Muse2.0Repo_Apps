record `okhttp3.CertificatePinner$Pin` @kind class @AccessFlag FINAL {
  `java.lang.String` `okhttp3.CertificatePinner$Pin.canonicalHostname` @AccessFlag FINAL;
  `okio.ByteString` `okhttp3.CertificatePinner$Pin.hash` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.hashAlgorithm` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.pattern` @AccessFlag FINAL;
}
global `java.lang.String` `@@okhttp3.CertificatePinner$Pin.WILDCARD` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.CertificatePinner$Pin` v3 @kind this, `java.lang.String` v4 @kind object @name `pattern`, `java.lang.String` v5 @kind object @name `pin`) @signature `Lokhttp3/CertificatePinner$Pin;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1944fc.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L194502.  v3.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` := v4 @kind object;
  #L194506.  v0:= "*." @kind object;
  #L19450a.  call temp:= `startsWith`(v4, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L194510.  v0:= temp;
  #L194512.  if v0 == 0 then goto L1945d6;
  #L194516.  v0:= new `java.lang.StringBuilder`;
  #L19451a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L194520.  v1:= "http://" @kind object;
  #L194524.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19452a.  v0:= temp @kind object;
  #L19452c.  v1:= "*." @kind object;
  #L194530.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L194536.  v1:= temp;
  #L194538.  call temp:= `substring`(v4, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L19453e.  v1:= temp @kind object;
  #L194540.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L194546.  v0:= temp @kind object;
  #L194548.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19454e.  v0:= temp @kind object;
  #L194550.  call temp:= `parse`(v0) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L194556.  v0:= temp @kind object;
  #L194558.  call temp:= `host`(v0) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L19455e.  v0:= temp @kind object;
  #L194560.  v3.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` := v0 @kind object;
  #L194564.  v0:= "sha1/" @kind object;
  #L194568.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L19456e.  v0:= temp;
  #L194570.  if v0 == 0 then goto L19460e;
  #L194574.  v0:= "sha1/" @kind object;
  #L194578.  v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v0 @kind object;
  #L19457c.  v0:= "sha1/" @kind object;
  #L194580.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L194586.  v0:= temp;
  #L194588.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L19458e.  v0:= temp @kind object;
  #L194590.  call temp:= `decodeBase64`(v0) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L194596.  v0:= temp @kind object;
  #L194598.  v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v0 @kind object;
  #L19459c.  v0:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L1945a0.  if v0 != 0 then goto L19467a;
  #L1945a4.  v0:= new `java.lang.IllegalArgumentException`;
  #L1945a8.  v1:= new `java.lang.StringBuilder`;
  #L1945ac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1945b2.  v2:= "pins must be base64: " @kind object;
  #L1945b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1945bc.  v1:= temp @kind object;
  #L1945be.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1945c4.  v1:= temp @kind object;
  #L1945c6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1945cc.  v1:= temp @kind object;
  #L1945ce.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1945d4.  throw v0;
  #L1945d6.  v0:= new `java.lang.StringBuilder`;
  #L1945da.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1945e0.  v1:= "http://" @kind object;
  #L1945e4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1945ea.  v0:= temp @kind object;
  #L1945ec.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1945f2.  v0:= temp @kind object;
  #L1945f4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1945fa.  v0:= temp @kind object;
  #L1945fc.  call temp:= `parse`(v0) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L194602.  v0:= temp @kind object;
  #L194604.  call temp:= `host`(v0) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L19460a.  v0:= temp @kind object;
  #L19460c.  goto L194560;
  #L19460e.  v0:= "sha256/" @kind object;
  #L194612.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L194618.  v0:= temp;
  #L19461a.  if v0 == 0 then goto L194648;
  #L19461e.  v0:= "sha256/" @kind object;
  #L194622.  v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v0 @kind object;
  #L194626.  v0:= "sha256/" @kind object;
  #L19462a.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L194630.  v0:= temp;
  #L194632.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L194638.  v0:= temp @kind object;
  #L19463a.  call temp:= `decodeBase64`(v0) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L194640.  v0:= temp @kind object;
  #L194642.  v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v0 @kind object;
  #L194646.  goto L19459c;
  #L194648.  v0:= new `java.lang.IllegalArgumentException`;
  #L19464c.  v1:= new `java.lang.StringBuilder`;
  #L194650.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L194656.  v2:= "pins must start with 'sha256/' or 'sha1/': " @kind object;
  #L19465a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L194660.  v1:= temp @kind object;
  #L194662.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L194668.  v1:= temp @kind object;
  #L19466a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L194670.  v1:= temp @kind object;
  #L194672.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L194678.  throw v0;
  #L19467a.  return @kind void;
}
procedure `boolean` `equals`(`okhttp3.CertificatePinner$Pin` v2 @kind this, `java.lang.Object` v3 @kind object @name `other`) @signature `Lokhttp3/CertificatePinner$Pin;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19468c.  v0:= instanceof @variable v3 @type ^`okhttp3.CertificatePinner$Pin` @kind boolean;
  #L194690.  if v0 == 0 then goto L1946e4;
  #L194694.  v1:= v2.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L194698.  v0:= v3 @kind object;
  #L19469a.  v0:= (`okhttp3.CertificatePinner$Pin`) v0 @kind object;
  #L19469e.  v0:= v0.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L1946a2.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1946a8.  v0:= temp;
  #L1946aa.  if v0 == 0 then goto L1946e4;
  #L1946ae.  v1:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L1946b2.  v0:= v3 @kind object;
  #L1946b4.  v0:= (`okhttp3.CertificatePinner$Pin`) v0 @kind object;
  #L1946b8.  v0:= v0.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L1946bc.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1946c2.  v0:= temp;
  #L1946c4.  if v0 == 0 then goto L1946e4;
  #L1946c8.  v0:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L1946cc.  v3:= (`okhttp3.CertificatePinner$Pin`) v3 @kind object;
  #L1946d0.  v1:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L1946d4.  call temp:= `equals`(v0, v1) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1946da.  v0:= temp;
  #L1946dc.  if v0 == 0 then goto L1946e4;
  #L1946e0.  v0:= 1I;
  #L1946e2.  return v0;
  #L1946e4.  v0:= 0I;
  #L1946e6.  goto L1946e2;
}
procedure `int` `hashCode`(`okhttp3.CertificatePinner$Pin` v3 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1946f8.  v0:= 17I;
  #L1946fc.  v1:= v3.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L194700.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L194706.  v1:= temp;
  #L194708.  v0:= v1 + 527;
  #L19470c.  v1:= v0 * 31;
  #L194710.  v2:= v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L194714.  call temp:= `hashCode`(v2) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L19471a.  v2:= temp;
  #L19471c.  v0:= v1 + v2 @kind int;
  #L194720.  v1:= v0 * 31;
  #L194724.  v2:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L194728.  call temp:= `hashCode`(v2) @signature `Lokio/ByteString;.hashCode:()I` @kind virtual;
  #L19472e.  v2:= temp;
  #L194730.  v0:= v1 + v2 @kind int;
  #L194734.  return v0;
}
procedure `boolean` `matches`(`okhttp3.CertificatePinner$Pin` v7 @kind this, `java.lang.String` v8 @kind object @name `hostname`) @signature `Lokhttp3/CertificatePinner$Pin;.matches:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L194748.  v1:= 0I;
  #L19474a.  v0:= v7.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L19474e.  v2:= "*." @kind object;
  #L194752.  call temp:= `startsWith`(v0, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L194758.  v0:= temp;
  #L19475a.  if v0 == 0 then goto L1947b0;
  #L19475e.  v0:= 46I;
  #L194762.  call temp:= `indexOf`(v8, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L194768.  v6:= temp;
  #L19476a.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L194770.  v0:= temp;
  #L194772.  v0:= v0 - v6 @kind int;
  #L194774.  v0:= v0 + -1;
  #L194778.  v2:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L19477c.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L194782.  v2:= temp;
  #L194784.  if v0 != v2 then goto L1947ae;
  #L194788.  v2:= v6 + 1;
  #L19478c.  v3:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L194790.  v0:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L194794.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L19479a.  v5:= temp;
  #L19479c.  v0:= v8 @kind object;
  #L19479e.  v4:= v1;
  #L1947a0.  call temp:= `regionMatches`(v0, v1, v2, v3, v4, v5) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L1947a6.  v0:= temp;
  #L1947a8.  if v0 == 0 then goto L1947ae;
  #L1947ac.  v1:= 1I;
  #L1947ae.  return v1;
  #L1947b0.  v0:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L1947b4.  call temp:= `equals`(v8, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1947ba.  v1:= temp;
  #L1947bc.  goto L1947ae;
}
procedure `java.lang.String` `toString`(`okhttp3.CertificatePinner$Pin` v2 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1947d0.  v0:= new `java.lang.StringBuilder`;
  #L1947d4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1947da.  v1:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L1947de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1947e4.  v0:= temp @kind object;
  #L1947e6.  v1:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L1947ea.  call temp:= `base64`(v1) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L1947f0.  v1:= temp @kind object;
  #L1947f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1947f8.  v0:= temp @kind object;
  #L1947fa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L194800.  v0:= temp @kind object;
  #L194802.  return v0 @kind object;
}
