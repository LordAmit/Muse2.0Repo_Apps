record `okhttp3.RealCall` @kind class @AccessFlag FINAL extends `okhttp3.Call` @kind interface {
  `okhttp3.OkHttpClient` `okhttp3.RealCall.client` @AccessFlag FINAL;
  `okhttp3.EventListener` `okhttp3.RealCall.eventListener` @AccessFlag PRIVATE;
  `boolean` `okhttp3.RealCall.executed` @AccessFlag PRIVATE;
  `boolean` `okhttp3.RealCall.forWebSocket` @AccessFlag FINAL;
  `okhttp3.Request` `okhttp3.RealCall.originalRequest` @AccessFlag FINAL;
  `okhttp3.internal.http.RetryAndFollowUpInterceptor` `okhttp3.RealCall.retryAndFollowUpInterceptor` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.RealCall` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object @name `client`, `okhttp3.Request` v3 @kind object @name `originalRequest`, `boolean` v4 @name `forWebSocket`) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L215078.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21507e.  v1.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` := v2 @kind object;
  #L215082.  v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` := v3 @kind object;
  #L215086.  v1.`okhttp3.RealCall.forWebSocket` @type ^`boolean` := v4 @kind boolean;
  #L21508a.  v0:= new `okhttp3.internal.http.RetryAndFollowUpInterceptor`;
  #L21508e.  call `<init>`(v0, v2, v4) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;Z)V` @kind direct;
  #L215094.  v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` := v0 @kind object;
  #L215098.  return @kind void;
}
procedure `okhttp3.EventListener` `access$000`(`okhttp3.RealCall` v1 @kind object @name `x0`) @signature `Lokhttp3/RealCall;.access$000:(Lokhttp3/RealCall;)Lokhttp3/EventListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L2150ac.  v0:= v1.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L2150b0.  return v0 @kind object;
}
procedure `void` `captureCallStackTrace`(`okhttp3.RealCall` v3 @kind this) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2150c4.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L2150ca.  v1:= temp @kind object;
  #L2150cc.  v2:= "response.body().close()" @kind object;
  #L2150d0.  call temp:= `getStackTraceForCloseable`(v1, v2) @signature `Lokhttp3/internal/platform/Platform;.getStackTraceForCloseable:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L2150d6.  v0:= temp @kind object;
  #L2150d8.  v1:= v3.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L2150dc.  call `setCallStackTrace`(v1, v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.setCallStackTrace:(Ljava/lang/Object;)V` @kind virtual;
  #L2150e2.  return @kind void;
}
procedure `okhttp3.RealCall` `newRealCall`(`okhttp3.OkHttpClient` v2 @kind object @name `client`, `okhttp3.Request` v3 @kind object @name `originalRequest`, `boolean` v4 @name `forWebSocket`) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L2150f4.  v0:= new `okhttp3.RealCall`;
  #L2150f8.  call `<init>`(v0, v2, v3, v4) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @kind direct;
  #L2150fe.  call temp:= `eventListenerFactory`(v2) @signature `Lokhttp3/OkHttpClient;.eventListenerFactory:()Lokhttp3/EventListener$Factory;` @kind virtual;
  #L215104.  v1:= temp @kind object;
  #L215106.  call temp:= `create`(v1, v0) @signature `Lokhttp3/EventListener$Factory;.create:(Lokhttp3/Call;)Lokhttp3/EventListener;` @kind interface;
  #L21510c.  v1:= temp @kind object;
  #L21510e.  v0.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` := v1 @kind object;
  #L215112.  return v0 @kind object;
}
procedure `void` `cancel`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L215124.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L215128.  call `cancel`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.cancel:()V` @kind virtual;
  #L21512e.  return @kind void;
}
procedure `java.lang.Object` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L215140.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L215146.  v0:= temp @kind object;
  #L215148.  return v0 @kind object;
}
procedure `okhttp3.Call` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/Call;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L21515c.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L215162.  v0:= temp @kind object;
  #L215164.  return v0 @kind object;
}
procedure `okhttp3.RealCall` `clone`(`okhttp3.RealCall` v3 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L215178.  v0:= v3.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21517c.  v1:= v3.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L215180.  v2:= v3.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L215184.  call temp:= `newRealCall`(v0, v1, v2) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @kind static;
  #L21518a.  v0:= temp @kind object;
  #L21518c.  return v0 @kind object;
}
procedure `void` `enqueue`(`okhttp3.RealCall` v2 @kind this, `okhttp3.Callback` v3 @kind object @name `responseCallback`) @signature `Lokhttp3/RealCall;.enqueue:(Lokhttp3/Callback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2151a0.  @monitorenter v2
  #Try_start0.  
  #L2151a2.  v0:= v2.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L2151a6.  if v0 == 0 then goto L2151c0;
  #L2151aa.  v0:= new `java.lang.IllegalStateException`;
  #L2151ae.  v1:= "Already Executed" @kind object;
  #L2151b2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2151b8.  throw v0;
  #L2151ba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2151bc.  @monitorexit v2
  #Try_end0.  
  #L2151be.  throw v0;
  #L2151c0.  v0:= 1I;
  #Try_start1.  
  #L2151c2.  v2.`okhttp3.RealCall.executed` @type ^`boolean` := v0 @kind boolean;
  #L2151c6.  @monitorexit v2
  #Try_end1.  
  #L2151c8.  call `captureCallStackTrace`(v2) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @kind direct;
  #L2151ce.  v0:= v2.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L2151d2.  call `callStart`(v0, v2) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #L2151d8.  v0:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2151dc.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L2151e2.  v0:= temp @kind object;
  #L2151e4.  v1:= new `okhttp3.RealCall$AsyncCall`;
  #L2151e8.  call `<init>`(v1, v2, v3) @signature `Lokhttp3/RealCall$AsyncCall;.<init>:(Lokhttp3/RealCall;Lokhttp3/Callback;)V` @kind direct;
  #L2151ee.  call `enqueue`(v0, v1) @signature `Lokhttp3/Dispatcher;.enqueue:(Lokhttp3/RealCall$AsyncCall;)V` @kind virtual;
  #L2151f4.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L2151ba;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L2151ba;
}
procedure `okhttp3.Response` `execute`(`okhttp3.RealCall` v4 @kind this) @signature `Lokhttp3/RealCall;.execute:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L21521c.  @monitorenter v4
  #Try_start0.  
  #L21521e.  v2:= v4.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L215222.  if v2 == 0 then goto L21523c;
  #L215226.  v2:= new `java.lang.IllegalStateException`;
  #L21522a.  v3:= "Already Executed" @kind object;
  #L21522e.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L215234.  throw v2;
  #L215236.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L215238.  @monitorexit v4
  #Try_end0.  
  #L21523a.  throw v2;
  #L21523c.  v2:= 1I;
  #Try_start1.  
  #L21523e.  v4.`okhttp3.RealCall.executed` @type ^`boolean` := v2 @kind boolean;
  #L215242.  @monitorexit v4
  #Try_end1.  
  #L215244.  call `captureCallStackTrace`(v4) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @kind direct;
  #L21524a.  v2:= v4.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L21524e.  call `callStart`(v2, v4) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #Try_start2.  
  #L215254.  v2:= v4.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L215258.  call temp:= `dispatcher`(v2) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L21525e.  v2:= temp @kind object;
  #L215260.  call `executed`(v2, v4) @signature `Lokhttp3/Dispatcher;.executed:(Lokhttp3/RealCall;)V` @kind virtual;
  #L215266.  call temp:= `getResponseWithInterceptorChain`(v4) @signature `Lokhttp3/RealCall;.getResponseWithInterceptorChain:()Lokhttp3/Response;` @kind virtual;
  #L21526c.  v1:= temp @kind object;
  #L21526e.  if v1 != 0 then goto L2152a6;
  #L215272.  v2:= new `java.io.IOException`;
  #L215276.  v3:= "Canceled" @kind object;
  #L21527a.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L215280.  throw v2;
  #Try_end2.  
  #L215282.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #Try_start3.  
  #L215284.  v2:= v4.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L215288.  call `callFailed`(v2, v4, v0) @signature `Lokhttp3/EventListener;.callFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L21528e.  throw v0;
  #Try_end3.  
  #L215290.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L215292.  v3:= v4.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L215296.  call temp:= `dispatcher`(v3) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L21529c.  v3:= temp @kind object;
  #L21529e.  call `finished`(v3, v4) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall;)V` @kind virtual;
  #L2152a4.  throw v2;
  #L2152a6.  v2:= v4.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2152aa.  call temp:= `dispatcher`(v2) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L2152b0.  v2:= temp @kind object;
  #L2152b2.  call `finished`(v2, v4) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall;)V` @kind virtual;
  #L2152b8.  return v1 @kind object;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L215236;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L215236;
  catch `java.io.IOException` @[Try_start2..Try_end2] goto L215282;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L215290;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L215290;
}
procedure `okhttp3.Response` `getResponseWithInterceptorChain`(`okhttp3.RealCall` v12 @kind this) @signature `Lokhttp3/RealCall;.getResponseWithInterceptorChain:()Lokhttp3/Response;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L2152f8.  v2:= 0I;
  #L2152fa.  v1:= new `java.util.ArrayList`;
  #L2152fe.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L215304.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L215308.  call temp:= `interceptors`(v3) @signature `Lokhttp3/OkHttpClient;.interceptors:()Ljava/util/List;` @kind virtual;
  #L21530e.  v3:= temp @kind object;
  #L215310.  call temp:= `addAll`(v1, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L215316.  v3:= v12.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L21531a.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L215320.  v3:= new `okhttp3.internal.http.BridgeInterceptor`;
  #L215324.  v4:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L215328.  call temp:= `cookieJar`(v4) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L21532e.  v4:= temp @kind object;
  #L215330.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/http/BridgeInterceptor;.<init>:(Lokhttp3/CookieJar;)V` @kind direct;
  #L215336.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21533c.  v3:= new `okhttp3.internal.cache.CacheInterceptor`;
  #L215340.  v4:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L215344.  call temp:= `internalCache`(v4) @signature `Lokhttp3/OkHttpClient;.internalCache:()Lokhttp3/internal/cache/InternalCache;` @kind virtual;
  #L21534a.  v4:= temp @kind object;
  #L21534c.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/cache/CacheInterceptor;.<init>:(Lokhttp3/internal/cache/InternalCache;)V` @kind direct;
  #L215352.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L215358.  v3:= new `okhttp3.internal.connection.ConnectInterceptor`;
  #L21535c.  v4:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L215360.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/connection/ConnectInterceptor;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L215366.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21536c.  v3:= v12.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L215370.  if v3 != 0 then goto L215386;
  #L215374.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L215378.  call temp:= `networkInterceptors`(v3) @signature `Lokhttp3/OkHttpClient;.networkInterceptors:()Ljava/util/List;` @kind virtual;
  #L21537e.  v3:= temp @kind object;
  #L215380.  call temp:= `addAll`(v1, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L215386.  v3:= new `okhttp3.internal.http.CallServerInterceptor`;
  #L21538a.  v4:= v12.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L21538e.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/http/CallServerInterceptor;.<init>:(Z)V` @kind direct;
  #L215394.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21539a.  v0:= new `okhttp3.internal.http.RealInterceptorChain`;
  #L21539e.  v5:= 0I;
  #L2153a0.  v6:= v12.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L2153a4.  v8:= v12.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L2153a8.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2153ac.  call temp:= `connectTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.connectTimeoutMillis:()I` @kind virtual;
  #L2153b2.  v9:= temp;
  #L2153b4.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2153b8.  call temp:= `readTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.readTimeoutMillis:()I` @kind virtual;
  #L2153be.  v10:= temp;
  #L2153c0.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2153c4.  call temp:= `writeTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.writeTimeoutMillis:()I` @kind virtual;
  #L2153ca.  v11:= temp;
  #L2153cc.  v3:= v2 @kind object;
  #L2153ce.  v4:= v2 @kind object;
  #L2153d0.  v7:= v12 @kind object;
  #L2153d2.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) @signature `Lokhttp3/internal/http/RealInterceptorChain;.<init>:(Ljava/util/List;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;ILokhttp3/Request;Lokhttp3/Call;Lokhttp3/EventListener;III)V` @kind direct;
  #L2153d8.  v2:= v12.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L2153dc.  call temp:= `proceed`(v0, v2) @signature `Lokhttp3/Interceptor$Chain;.proceed:(Lokhttp3/Request;)Lokhttp3/Response;` @kind interface;
  #L2153e2.  v2:= temp @kind object;
  #L2153e4.  return v2 @kind object;
}
procedure `boolean` `isCanceled`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2153f8.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L2153fc.  call temp:= `isCanceled`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isCanceled:()Z` @kind virtual;
  #L215402.  v0:= temp;
  #L215404.  return v0;
}
procedure `boolean` `isExecuted`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isExecuted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L215418.  @monitorenter v1
  #Try_start0.  
  #L21541a.  v0:= v1.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L21541e.  @monitorexit v1
  #L215420.  return v0;
  #L215422.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L215424.  @monitorexit v1
  #L215426.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L215422;
}
procedure `java.lang.String` `redactedUrl`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.redactedUrl:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;

  #L215444.  v0:= v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L215448.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L21544e.  v0:= temp @kind object;
  #L215450.  call temp:= `redact`(v0) @signature `Lokhttp3/HttpUrl;.redact:()Ljava/lang/String;` @kind virtual;
  #L215456.  v0:= temp @kind object;
  #L215458.  return v0 @kind object;
}
procedure `okhttp3.Request` `request`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21546c.  v0:= v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L215470.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.StreamAllocation` `streamAllocation`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @AccessFlag  {
    temp;
    v0;

  #L215484.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L215488.  call temp:= `streamAllocation`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @kind virtual;
  #L21548e.  v0:= temp @kind object;
  #L215490.  return v0 @kind object;
}
procedure `java.lang.String` `toLoggableString`(`okhttp3.RealCall` v2 @kind this) @signature `Lokhttp3/RealCall;.toLoggableString:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L2154a4.  v1:= new `java.lang.StringBuilder`;
  #L2154a8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2154ae.  call temp:= `isCanceled`(v2) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @kind virtual;
  #L2154b4.  v0:= temp;
  #L2154b6.  if v0 == 0 then goto L215500;
  #L2154ba.  v0:= "canceled " @kind object;
  #L2154be.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2154c4.  v1:= temp @kind object;
  #L2154c6.  v0:= v2.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L2154ca.  if v0 == 0 then goto L215506;
  #L2154ce.  v0:= "web socket" @kind object;
  #L2154d2.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2154d8.  v0:= temp @kind object;
  #L2154da.  v1:= " to " @kind object;
  #L2154de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2154e4.  v0:= temp @kind object;
  #L2154e6.  call temp:= `redactedUrl`(v2) @signature `Lokhttp3/RealCall;.redactedUrl:()Ljava/lang/String;` @kind virtual;
  #L2154ec.  v1:= temp @kind object;
  #L2154ee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2154f4.  v0:= temp @kind object;
  #L2154f6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2154fc.  v0:= temp @kind object;
  #L2154fe.  return v0 @kind object;
  #L215500.  v0:= "" @kind object;
  #L215504.  goto L2154be;
  #L215506.  v0:= "call" @kind object;
  #L21550a.  goto L2154d2;
}
