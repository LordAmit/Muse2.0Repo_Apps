record `okhttp3.Headers$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `okhttp3.Headers$Builder.namesAndValues` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.Headers$Builder` v2 @kind this) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L198594.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19859a.  v0:= new `java.util.ArrayList`;
  #L19859e.  v1:= 20I;
  #L1985a2.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L1985a8.  v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` := v0 @kind object;
  #L1985ac.  return @kind void;
}
procedure `void` `checkNameAndValue`(`okhttp3.Headers$Builder` v11 @kind this, `java.lang.String` v12 @kind object @name `name`, `java.lang.String` v13 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.checkNameAndValue:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1985c0.  v4:= 127I;
  #L1985c4.  v10:= 3I;
  #L1985c6.  v9:= 2I;
  #L1985c8.  v8:= 1I;
  #L1985ca.  v7:= 0I;
  #L1985cc.  if v12 != 0 then goto L1985e0;
  #L1985d0.  v3:= new `java.lang.NullPointerException`;
  #L1985d4.  v4:= "name == null" @kind object;
  #L1985d8.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1985de.  throw v3;
  #L1985e0.  call temp:= `isEmpty`(v12) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L1985e6.  v3:= temp;
  #L1985e8.  if v3 == 0 then goto L1985fc;
  #L1985ec.  v3:= new `java.lang.IllegalArgumentException`;
  #L1985f0.  v4:= "name is empty" @kind object;
  #L1985f4.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1985fa.  throw v3;
  #L1985fc.  v1:= 0I;
  #L1985fe.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L198604.  v2:= temp;
  #L198606.  if v1 >= v2 then goto L19865c;
  #L19860a.  call temp:= `charAt`(v12, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L198610.  v0:= temp;
  #L198612.  v3:= 32I;
  #L198616.  if v0 <= v3 then goto L19861e;
  #L19861a.  if v0 < v4 then goto L198656;
  #L19861e.  v3:= new `java.lang.IllegalArgumentException`;
  #L198622.  v4:= "Unexpected char %#04x at %d in header name: %s" @kind object;
  #L198626.  v5:= new `java.lang.Object`[v10];
  #L19862a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L198630.  v6:= temp @kind object;
  #L198632.  v5[v7]:= v6 @kind object;
  #L198636.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L19863c.  v6:= temp @kind object;
  #L19863e.  v5[v8]:= v6 @kind object;
  #L198642.  v5[v9]:= v12 @kind object;
  #L198646.  call temp:= `format`(v4, v5) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L19864c.  v4:= temp @kind object;
  #L19864e.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198654.  throw v3;
  #L198656.  v1:= v1 + 1;
  #L19865a.  goto L198606;
  #L19865c.  if v13 != 0 then goto L19869e;
  #L198660.  v3:= new `java.lang.NullPointerException`;
  #L198664.  v4:= new `java.lang.StringBuilder`;
  #L198668.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19866e.  v5:= "value for name " @kind object;
  #L198672.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198678.  v4:= temp @kind object;
  #L19867a.  call temp:= `append`(v4, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198680.  v4:= temp @kind object;
  #L198682.  v5:= " == null" @kind object;
  #L198686.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19868c.  v4:= temp @kind object;
  #L19868e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L198694.  v4:= temp @kind object;
  #L198696.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19869c.  throw v3;
  #L19869e.  v1:= 0I;
  #L1986a0.  call temp:= `length`(v13) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1986a6.  v2:= temp;
  #L1986a8.  if v1 >= v2 then goto L19870c;
  #L1986ac.  call temp:= `charAt`(v13, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1986b2.  v0:= temp;
  #L1986b4.  v3:= 31I;
  #L1986b8.  if v0 > v3 then goto L1986c4;
  #L1986bc.  v3:= 9I;
  #L1986c0.  if v0 != v3 then goto L1986c8;
  #L1986c4.  if v0 < v4 then goto L198706;
  #L1986c8.  v3:= new `java.lang.IllegalArgumentException`;
  #L1986cc.  v4:= "Unexpected char %#04x at %d in %s value: %s" @kind object;
  #L1986d0.  v5:= 4I;
  #L1986d2.  v5:= new `java.lang.Object`[v5];
  #L1986d6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1986dc.  v6:= temp @kind object;
  #L1986de.  v5[v7]:= v6 @kind object;
  #L1986e2.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1986e8.  v6:= temp @kind object;
  #L1986ea.  v5[v8]:= v6 @kind object;
  #L1986ee.  v5[v9]:= v12 @kind object;
  #L1986f2.  v5[v10]:= v13 @kind object;
  #L1986f6.  call temp:= `format`(v4, v5) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1986fc.  v4:= temp @kind object;
  #L1986fe.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198704.  throw v3;
  #L198706.  v1:= v1 + 1;
  #L19870a.  goto L1986a8;
  #L19870c.  return @kind void;
}
procedure `okhttp3.Headers$Builder` `add`(`okhttp3.Headers$Builder` v4 @kind this, `java.lang.String` v5 @kind object @name `line`) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L198720.  v1:= ":" @kind object;
  #L198724.  call temp:= `indexOf`(v5, v1) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L19872a.  v0:= temp;
  #L19872c.  v1:= -1I;
  #L19872e.  if v0 != v1 then goto L198764;
  #L198732.  v1:= new `java.lang.IllegalArgumentException`;
  #L198736.  v2:= new `java.lang.StringBuilder`;
  #L19873a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L198740.  v3:= "Unexpected header: " @kind object;
  #L198744.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19874a.  v2:= temp @kind object;
  #L19874c.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198752.  v2:= temp @kind object;
  #L198754.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19875a.  v2:= temp @kind object;
  #L19875c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198762.  throw v1;
  #L198764.  v1:= 0I;
  #L198766.  call temp:= `substring`(v5, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L19876c.  v1:= temp @kind object;
  #L19876e.  call temp:= `trim`(v1) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L198774.  v1:= temp @kind object;
  #L198776.  v2:= v0 + 1;
  #L19877a.  call temp:= `substring`(v5, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L198780.  v2:= temp @kind object;
  #L198782.  call temp:= `add`(v4, v1, v2) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L198788.  v1:= temp @kind object;
  #L19878a.  return v1 @kind object;
}
procedure `okhttp3.Headers$Builder` `add`(`okhttp3.Headers$Builder` v1 @kind this, `java.lang.String` v2 @kind object @name `name`, `java.lang.String` v3 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19879c.  call `checkNameAndValue`(v1, v2, v3) @signature `Lokhttp3/Headers$Builder;.checkNameAndValue:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L1987a2.  call temp:= `addLenient`(v1, v2, v3) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L1987a8.  v0:= temp @kind object;
  #L1987aa.  return v0 @kind object;
}
procedure `okhttp3.Headers$Builder` `addLenient`(`okhttp3.Headers$Builder` v3 @kind this, `java.lang.String` v4 @kind object @name `line`) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1987bc.  v2:= 1I;
  #L1987be.  v1:= ":" @kind object;
  #L1987c2.  call temp:= `indexOf`(v4, v1, v2) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;I)I` @kind virtual;
  #L1987c8.  v0:= temp;
  #L1987ca.  v1:= -1I;
  #L1987cc.  if v0 == v1 then goto L1987f0;
  #L1987d0.  v1:= 0I;
  #L1987d2.  call temp:= `substring`(v4, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1987d8.  v1:= temp @kind object;
  #L1987da.  v2:= v0 + 1;
  #L1987de.  call temp:= `substring`(v4, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L1987e4.  v2:= temp @kind object;
  #L1987e6.  call temp:= `addLenient`(v3, v1, v2) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L1987ec.  v1:= temp @kind object;
  #L1987ee.  return v1 @kind object;
  #L1987f0.  v1:= ":" @kind object;
  #L1987f4.  call temp:= `startsWith`(v4, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1987fa.  v1:= temp;
  #L1987fc.  if v1 == 0 then goto L198816;
  #L198800.  v1:= "" @kind object;
  #L198804.  call temp:= `substring`(v4, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L19880a.  v2:= temp @kind object;
  #L19880c.  call temp:= `addLenient`(v3, v1, v2) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L198812.  v1:= temp @kind object;
  #L198814.  goto L1987ee;
  #L198816.  v1:= "" @kind object;
  #L19881a.  call temp:= `addLenient`(v3, v1, v4) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L198820.  v1:= temp @kind object;
  #L198822.  goto L1987ee;
}
procedure `okhttp3.Headers$Builder` `addLenient`(`okhttp3.Headers$Builder` v2 @kind this, `java.lang.String` v3 @kind object @name `name`, `java.lang.String` v4 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L198834.  v0:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L198838.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L19883e.  v0:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L198842.  call temp:= `trim`(v4) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L198848.  v1:= temp @kind object;
  #L19884a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L198850.  return v2 @kind object;
}
procedure `okhttp3.Headers` `build`(`okhttp3.Headers$Builder` v1 @kind this) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L198864.  v0:= new `okhttp3.Headers`;
  #L198868.  call `<init>`(v0, v1) @signature `Lokhttp3/Headers;.<init>:(Lokhttp3/Headers$Builder;)V` @kind direct;
  #L19886e.  return v0 @kind object;
}
procedure `java.lang.String` `get`(`okhttp3.Headers$Builder` v3 @kind this, `java.lang.String` v4 @kind object @name `name`) @signature `Lokhttp3/Headers$Builder;.get:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L198880.  v1:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L198884.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L19888a.  v1:= temp;
  #L19888c.  v0:= v1 + -2;
  #L198890.  if v0 < 0 then goto L1988cc;
  #L198894.  v1:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L198898.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L19889e.  v1:= temp @kind object;
  #L1988a0.  v1:= (`java.lang.String`) v1 @kind object;
  #L1988a4.  call temp:= `equalsIgnoreCase`(v4, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1988aa.  v1:= temp;
  #L1988ac.  if v1 == 0 then goto L1988c6;
  #L1988b0.  v1:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L1988b4.  v2:= v0 + 1;
  #L1988b8.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1988be.  v1:= temp @kind object;
  #L1988c0.  v1:= (`java.lang.String`) v1 @kind object;
  #L1988c4.  return v1 @kind object;
  #L1988c6.  v0:= v0 + -2;
  #L1988ca.  goto L198890;
  #L1988cc.  v1:= 0I;
  #L1988ce.  goto L1988c4;
}
procedure `okhttp3.Headers$Builder` `removeAll`(`okhttp3.Headers$Builder` v2 @kind this, `java.lang.String` v3 @kind object @name `name`) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1988e0.  v0:= 0I;
  #L1988e2.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L1988e6.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1988ec.  v1:= temp;
  #L1988ee.  if v0 >= v1 then goto L19892c;
  #L1988f2.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L1988f6.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1988fc.  v1:= temp @kind object;
  #L1988fe.  v1:= (`java.lang.String`) v1 @kind object;
  #L198902.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L198908.  v1:= temp;
  #L19890a.  if v1 == 0 then goto L198926;
  #L19890e.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L198912.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L198918.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L19891c.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L198922.  v0:= v0 + -2;
  #L198926.  v0:= v0 + 2;
  #L19892a.  goto L1988e2;
  #L19892c.  return v2 @kind object;
}
procedure `okhttp3.Headers$Builder` `set`(`okhttp3.Headers$Builder` v0 @kind this, `java.lang.String` v1 @kind object @name `name`, `java.lang.String` v2 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;

  #L198940.  call `checkNameAndValue`(v0, v1, v2) @signature `Lokhttp3/Headers$Builder;.checkNameAndValue:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L198946.  call temp:= `removeAll`(v0, v1) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L19894c.  call temp:= `addLenient`(v0, v1, v2) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L198952.  return v0 @kind object;
}
