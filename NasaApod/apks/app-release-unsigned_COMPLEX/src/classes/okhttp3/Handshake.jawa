record `okhttp3.Handshake` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.CipherSuite` `okhttp3.Handshake.cipherSuite` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.Handshake.localCertificates` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.Handshake.peerCertificates` @AccessFlag PRIVATE_FINAL;
  `okhttp3.TlsVersion` `okhttp3.Handshake.tlsVersion` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Handshake` v0 @kind this, `okhttp3.TlsVersion` v1 @kind object @name `tlsVersion`, `okhttp3.CipherSuite` v2 @kind object @name `cipherSuite`, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1982a4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1982aa.  v0.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` := v1 @kind object;
  #L1982ae.  v0.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` := v2 @kind object;
  #L1982b2.  v0.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` := v3 @kind object;
  #L1982b6.  v0.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` := v4 @kind object;
  #L1982ba.  return @kind void;
}
procedure `okhttp3.Handshake` `get`(`javax.net.ssl.SSLSession` v11 @kind object @name `session`) @signature `Lokhttp3/Handshake;.get:(Ljavax/net/ssl/SSLSession;)Lokhttp3/Handshake;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1982cc.  call temp:= `getCipherSuite`(v11) @signature `Ljavax/net/ssl/SSLSession;.getCipherSuite:()Ljava/lang/String;` @kind interface;
  #L1982d2.  v1:= temp @kind object;
  #L1982d4.  if v1 != 0 then goto L1982e8;
  #L1982d8.  v9:= new `java.lang.IllegalStateException`;
  #L1982dc.  v10:= "cipherSuite == null" @kind object;
  #L1982e0.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1982e6.  throw v9;
  #L1982e8.  call temp:= `forJavaName`(v1) @signature `Lokhttp3/CipherSuite;.forJavaName:(Ljava/lang/String;)Lokhttp3/CipherSuite;` @kind static;
  #L1982ee.  v0:= temp @kind object;
  #L1982f0.  call temp:= `getProtocol`(v11) @signature `Ljavax/net/ssl/SSLSession;.getProtocol:()Ljava/lang/String;` @kind interface;
  #L1982f6.  v8:= temp @kind object;
  #L1982f8.  if v8 != 0 then goto L19830c;
  #L1982fc.  v9:= new `java.lang.IllegalStateException`;
  #L198300.  v10:= "tlsVersion == null" @kind object;
  #L198304.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19830a.  throw v9;
  #L19830c.  call temp:= `forJavaName`(v8) @signature `Lokhttp3/TlsVersion;.forJavaName:(Ljava/lang/String;)Lokhttp3/TlsVersion;` @kind static;
  #L198312.  v7:= temp @kind object;
  #Try_start0.  
  #L198314.  call temp:= `getPeerCertificates`(v11) @signature `Ljavax/net/ssl/SSLSession;.getPeerCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #Try_end0.  
  #L19831a.  v5:= temp @kind object;
  #L19831c.  if v5 == 0 then goto L19834e;
  #L198320.  call temp:= `immutableList`(v5) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L198326.  v6:= temp @kind object;
  #L198328.  call temp:= `getLocalCertificates`(v11) @signature `Ljavax/net/ssl/SSLSession;.getLocalCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L19832e.  v3:= temp @kind object;
  #L198330.  if v3 == 0 then goto L198358;
  #L198334.  call temp:= `immutableList`(v3) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L19833a.  v4:= temp @kind object;
  #L19833c.  v9:= new `okhttp3.Handshake`;
  #L198340.  call `<init>`(v9, v7, v0, v6, v4) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L198346.  return v9 @kind object;
  #L198348.  v2:= Exception @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind object;
  #L19834a.  v5:= 0I;
  #L19834c.  goto L19831c;
  #L19834e.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L198354.  v6:= temp @kind object;
  #L198356.  goto L198328;
  #L198358.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L19835e.  v4:= temp @kind object;
  #L198360.  goto L19833c;
  catch `javax.net.ssl.SSLPeerUnverifiedException` @[Try_start0..Try_end0] goto L198348;
}
procedure `okhttp3.Handshake` `get`(`okhttp3.TlsVersion` v3 @kind object @name `tlsVersion`, `okhttp3.CipherSuite` v4 @kind object @name `cipherSuite`, `java.util.List` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lokhttp3/Handshake;.get:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)Lokhttp3/Handshake;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L198384.  if v3 != 0 then goto L198398;
  #L198388.  v0:= new `java.lang.NullPointerException`;
  #L19838c.  v1:= "tlsVersion == null" @kind object;
  #L198390.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198396.  throw v0;
  #L198398.  if v4 != 0 then goto L1983ac;
  #L19839c.  v0:= new `java.lang.NullPointerException`;
  #L1983a0.  v1:= "cipherSuite == null" @kind object;
  #L1983a4.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1983aa.  throw v0;
  #L1983ac.  v0:= new `okhttp3.Handshake`;
  #L1983b0.  call temp:= `immutableList`(v5) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1983b6.  v1:= temp @kind object;
  #L1983b8.  call temp:= `immutableList`(v6) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1983be.  v2:= temp @kind object;
  #L1983c0.  call `<init>`(v0, v3, v4, v1, v2) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L1983c6.  return v0 @kind object;
}
procedure `okhttp3.CipherSuite` `cipherSuite`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.cipherSuite:()Lokhttp3/CipherSuite;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1983d8.  v0:= v1.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L1983dc.  return v0 @kind object;
}
procedure `boolean` `equals`(`okhttp3.Handshake` v4 @kind this, `java.lang.Object` v5 @kind object @name `other`) @signature `Lokhttp3/Handshake;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1983f0.  v1:= 0I;
  #L1983f2.  v2:= instanceof @variable v5 @type ^`okhttp3.Handshake` @kind boolean;
  #L1983f6.  if v2 != 0 then goto L1983fc;
  #L1983fa.  return v1;
  #L1983fc.  v0:= v5 @kind object;
  #L1983fe.  v0:= (`okhttp3.Handshake`) v0 @kind object;
  #L198402.  v2:= v4.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L198406.  v3:= v0.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L19840a.  call temp:= `equals`(v2, v3) @signature `Lokhttp3/TlsVersion;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L198410.  v2:= temp;
  #L198412.  if v2 == 0 then goto L1983fa;
  #L198416.  v2:= v4.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L19841a.  v3:= v0.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L19841e.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L198424.  v2:= temp;
  #L198426.  if v2 == 0 then goto L1983fa;
  #L19842a.  v2:= v4.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L19842e.  v3:= v0.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L198432.  call temp:= `equals`(v2, v3) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L198438.  v2:= temp;
  #L19843a.  if v2 == 0 then goto L1983fa;
  #L19843e.  v2:= v4.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L198442.  v3:= v0.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L198446.  call temp:= `equals`(v2, v3) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L19844c.  v2:= temp;
  #L19844e.  if v2 == 0 then goto L1983fa;
  #L198452.  v1:= 1I;
  #L198454.  goto L1983fa;
}
procedure `int` `hashCode`(`okhttp3.Handshake` v3 @kind this) @signature `Lokhttp3/Handshake;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L198468.  v0:= 17I;
  #L19846c.  v1:= v3.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L198470.  call temp:= `hashCode`(v1) @signature `Lokhttp3/TlsVersion;.hashCode:()I` @kind virtual;
  #L198476.  v1:= temp;
  #L198478.  v0:= v1 + 527;
  #L19847c.  v1:= v0 * 31;
  #L198480.  v2:= v3.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L198484.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L19848a.  v2:= temp;
  #L19848c.  v0:= v1 + v2 @kind int;
  #L198490.  v1:= v0 * 31;
  #L198494.  v2:= v3.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L198498.  call temp:= `hashCode`(v2) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L19849e.  v2:= temp;
  #L1984a0.  v0:= v1 + v2 @kind int;
  #L1984a4.  v1:= v0 * 31;
  #L1984a8.  v2:= v3.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L1984ac.  call temp:= `hashCode`(v2) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L1984b2.  v2:= temp;
  #L1984b4.  v0:= v1 + v2 @kind int;
  #L1984b8.  return v0;
}
procedure `java.util.List` `localCertificates`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.localCertificates:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1984cc.  v0:= v1.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L1984d0.  return v0 @kind object;
}
procedure `java.security.Principal` `localPrincipal`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.localPrincipal:()Ljava/security/Principal;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1984e4.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L1984e8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1984ee.  v0:= temp;
  #L1984f0.  if v0 != 0 then goto L198510;
  #L1984f4.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L1984f8.  v1:= 0I;
  #L1984fa.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L198500.  v0:= temp @kind object;
  #L198502.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L198506.  call temp:= `getSubjectX500Principal`(v0) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L19850c.  v0:= temp @kind object;
  #L19850e.  return v0 @kind object;
  #L198510.  v0:= 0I;
  #L198512.  goto L19850e;
}
procedure `java.util.List` `peerCertificates`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.peerCertificates:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L198524.  v0:= v1.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L198528.  return v0 @kind object;
}
procedure `java.security.Principal` `peerPrincipal`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.peerPrincipal:()Ljava/security/Principal;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19853c.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L198540.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L198546.  v0:= temp;
  #L198548.  if v0 != 0 then goto L198568;
  #L19854c.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L198550.  v1:= 0I;
  #L198552.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L198558.  v0:= temp @kind object;
  #L19855a.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L19855e.  call temp:= `getSubjectX500Principal`(v0) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L198564.  v0:= temp @kind object;
  #L198566.  return v0 @kind object;
  #L198568.  v0:= 0I;
  #L19856a.  goto L198566;
}
procedure `okhttp3.TlsVersion` `tlsVersion`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.tlsVersion:()Lokhttp3/TlsVersion;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19857c.  v0:= v1.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L198580.  return v0 @kind object;
}
