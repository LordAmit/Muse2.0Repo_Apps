record `okhttp3.Response$Builder` @kind class @AccessFlag PUBLIC {
  `okhttp3.ResponseBody` `okhttp3.Response$Builder.body` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.cacheResponse` @AccessFlag ;
  `int` `okhttp3.Response$Builder.code` @AccessFlag ;
  `okhttp3.Handshake` `okhttp3.Response$Builder.handshake` @AccessFlag ;
  `okhttp3.Headers$Builder` `okhttp3.Response$Builder.headers` @AccessFlag ;
  `java.lang.String` `okhttp3.Response$Builder.message` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.networkResponse` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.priorResponse` @AccessFlag ;
  `okhttp3.Protocol` `okhttp3.Response$Builder.protocol` @AccessFlag ;
  `long` `okhttp3.Response$Builder.receivedResponseAtMillis` @AccessFlag ;
  `okhttp3.Request` `okhttp3.Response$Builder.request` @AccessFlag ;
  `long` `okhttp3.Response$Builder.sentRequestAtMillis` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L19cd38.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19cd3e.  v0:= -1I;
  #L19cd40.  v1.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L19cd44.  v0:= new `okhttp3.Headers$Builder`;
  #L19cd48.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L19cd4e.  v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L19cd52.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v2 @kind this, `okhttp3.Response` v3 @kind object @name `response`) @signature `Lokhttp3/Response$Builder;.<init>:(Lokhttp3/Response;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L19cd64.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19cd6a.  v0:= -1I;
  #L19cd6c.  v2.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L19cd70.  v0:= v3.`okhttp3.Response.request` @type ^`okhttp3.Request` @kind object;
  #L19cd74.  v2.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` := v0 @kind object;
  #L19cd78.  v0:= v3.`okhttp3.Response.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L19cd7c.  v2.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19cd80.  v0:= v3.`okhttp3.Response.code` @type ^`int`;
  #L19cd84.  v2.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L19cd88.  v0:= v3.`okhttp3.Response.message` @type ^`java.lang.String` @kind object;
  #L19cd8c.  v2.`okhttp3.Response$Builder.message` @type ^`java.lang.String` := v0 @kind object;
  #L19cd90.  v0:= v3.`okhttp3.Response.handshake` @type ^`okhttp3.Handshake` @kind object;
  #L19cd94.  v2.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` := v0 @kind object;
  #L19cd98.  v0:= v3.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L19cd9c.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L19cda2.  v0:= temp @kind object;
  #L19cda4.  v2.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L19cda8.  v0:= v3.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L19cdac.  v2.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` := v0 @kind object;
  #L19cdb0.  v0:= v3.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L19cdb4.  v2.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L19cdb8.  v0:= v3.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L19cdbc.  v2.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L19cdc0.  v0:= v3.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L19cdc4.  v2.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L19cdc8.  v0:= v3.`okhttp3.Response.sentRequestAtMillis` @type ^`long` @kind wide;
  #L19cdcc.  v2.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` := v0 @kind wide;
  #L19cdd0.  v0:= v3.`okhttp3.Response.receivedResponseAtMillis` @type ^`long` @kind wide;
  #L19cdd4.  v2.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` := v0 @kind wide;
  #L19cdd8.  return @kind void;
}
procedure `void` `checkPriorResponse`(`okhttp3.Response$Builder` v2 @kind this, `okhttp3.Response` v3 @kind object @name `response`) @signature `Lokhttp3/Response$Builder;.checkPriorResponse:(Lokhttp3/Response;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L19cdec.  v0:= v3.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L19cdf0.  if v0 == 0 then goto L19ce04;
  #L19cdf4.  v0:= new `java.lang.IllegalArgumentException`;
  #L19cdf8.  v1:= "priorResponse.body != null" @kind object;
  #L19cdfc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19ce02.  throw v0;
  #L19ce04.  return @kind void;
}
procedure `void` `checkSupportResponse`(`okhttp3.Response$Builder` v3 @kind this, `java.lang.String` v4 @kind object @name `name`, `okhttp3.Response` v5 @kind object @name `response`) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L19ce18.  v0:= v5.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L19ce1c.  if v0 == 0 then goto L19ce52;
  #L19ce20.  v0:= new `java.lang.IllegalArgumentException`;
  #L19ce24.  v1:= new `java.lang.StringBuilder`;
  #L19ce28.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19ce2e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19ce34.  v1:= temp @kind object;
  #L19ce36.  v2:= ".body != null" @kind object;
  #L19ce3a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19ce40.  v1:= temp @kind object;
  #L19ce42.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19ce48.  v1:= temp @kind object;
  #L19ce4a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19ce50.  throw v0;
  #L19ce52.  v0:= v5.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L19ce56.  if v0 == 0 then goto L19ce8c;
  #L19ce5a.  v0:= new `java.lang.IllegalArgumentException`;
  #L19ce5e.  v1:= new `java.lang.StringBuilder`;
  #L19ce62.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19ce68.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19ce6e.  v1:= temp @kind object;
  #L19ce70.  v2:= ".networkResponse != null" @kind object;
  #L19ce74.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19ce7a.  v1:= temp @kind object;
  #L19ce7c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19ce82.  v1:= temp @kind object;
  #L19ce84.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19ce8a.  throw v0;
  #L19ce8c.  v0:= v5.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L19ce90.  if v0 == 0 then goto L19cec6;
  #L19ce94.  v0:= new `java.lang.IllegalArgumentException`;
  #L19ce98.  v1:= new `java.lang.StringBuilder`;
  #L19ce9c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19cea2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19cea8.  v1:= temp @kind object;
  #L19ceaa.  v2:= ".cacheResponse != null" @kind object;
  #L19ceae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19ceb4.  v1:= temp @kind object;
  #L19ceb6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19cebc.  v1:= temp @kind object;
  #L19cebe.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19cec4.  throw v0;
  #L19cec6.  v0:= v5.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L19ceca.  if v0 == 0 then goto L19cf00;
  #L19cece.  v0:= new `java.lang.IllegalArgumentException`;
  #L19ced2.  v1:= new `java.lang.StringBuilder`;
  #L19ced6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19cedc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19cee2.  v1:= temp @kind object;
  #L19cee4.  v2:= ".priorResponse != null" @kind object;
  #L19cee8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19ceee.  v1:= temp @kind object;
  #L19cef0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19cef6.  v1:= temp @kind object;
  #L19cef8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19cefe.  throw v0;
  #L19cf00.  return @kind void;
}
procedure `okhttp3.Response$Builder` `addHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object @name `name`, `java.lang.String` v3 @kind object @name `value`) @signature `Lokhttp3/Response$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19cf14.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L19cf18.  call temp:= `add`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L19cf1e.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `body`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.ResponseBody` v1 @kind object @name `body`) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19cf30.  v0.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` := v1 @kind object;
  #L19cf34.  return v0 @kind object;
}
procedure `okhttp3.Response` `build`(`okhttp3.Response$Builder` v3 @kind this) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19cf48.  v0:= v3.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` @kind object;
  #L19cf4c.  if v0 != 0 then goto L19cf60;
  #L19cf50.  v0:= new `java.lang.IllegalStateException`;
  #L19cf54.  v1:= "request == null" @kind object;
  #L19cf58.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19cf5e.  throw v0;
  #L19cf60.  v0:= v3.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L19cf64.  if v0 != 0 then goto L19cf78;
  #L19cf68.  v0:= new `java.lang.IllegalStateException`;
  #L19cf6c.  v1:= "protocol == null" @kind object;
  #L19cf70.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19cf76.  throw v0;
  #L19cf78.  v0:= v3.`okhttp3.Response$Builder.code` @type ^`int`;
  #L19cf7c.  if v0 >= 0 then goto L19cfb6;
  #L19cf80.  v0:= new `java.lang.IllegalStateException`;
  #L19cf84.  v1:= new `java.lang.StringBuilder`;
  #L19cf88.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19cf8e.  v2:= "code < 0: " @kind object;
  #L19cf92.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19cf98.  v1:= temp @kind object;
  #L19cf9a.  v2:= v3.`okhttp3.Response$Builder.code` @type ^`int`;
  #L19cf9e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L19cfa4.  v1:= temp @kind object;
  #L19cfa6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19cfac.  v1:= temp @kind object;
  #L19cfae.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19cfb4.  throw v0;
  #L19cfb6.  v0:= v3.`okhttp3.Response$Builder.message` @type ^`java.lang.String` @kind object;
  #L19cfba.  if v0 != 0 then goto L19cfce;
  #L19cfbe.  v0:= new `java.lang.IllegalStateException`;
  #L19cfc2.  v1:= "message == null" @kind object;
  #L19cfc6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19cfcc.  throw v0;
  #L19cfce.  v0:= new `okhttp3.Response`;
  #L19cfd2.  call `<init>`(v0, v3) @signature `Lokhttp3/Response;.<init>:(Lokhttp3/Response$Builder;)V` @kind direct;
  #L19cfd8.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `cacheResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object @name `cacheResponse`) @signature `Lokhttp3/Response$Builder;.cacheResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19cfec.  if v2 == 0 then goto L19cffa;
  #L19cff0.  v0:= "cacheResponse" @kind object;
  #L19cff4.  call `checkSupportResponse`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L19cffa.  v1.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` := v2 @kind object;
  #L19cffe.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `code`(`okhttp3.Response$Builder` v0 @kind this, `int` v1 @name `code`) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19d010.  v0.`okhttp3.Response$Builder.code` @type ^`int` := v1;
  #L19d014.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `handshake`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Handshake` v1 @kind object @name `handshake`) @signature `Lokhttp3/Response$Builder;.handshake:(Lokhttp3/Handshake;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19d028.  v0.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` := v1 @kind object;
  #L19d02c.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `header`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object @name `name`, `java.lang.String` v3 @kind object @name `value`) @signature `Lokhttp3/Response$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19d040.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L19d044.  call temp:= `set`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L19d04a.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `headers`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Headers` v2 @kind object @name `headers`) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19d05c.  call temp:= `newBuilder`(v2) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L19d062.  v0:= temp @kind object;
  #L19d064.  v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L19d068.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `message`(`okhttp3.Response$Builder` v0 @kind this, `java.lang.String` v1 @kind object @name `message`) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19d07c.  v0.`okhttp3.Response$Builder.message` @type ^`java.lang.String` := v1 @kind object;
  #L19d080.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `networkResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object @name `networkResponse`) @signature `Lokhttp3/Response$Builder;.networkResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19d094.  if v2 == 0 then goto L19d0a2;
  #L19d098.  v0:= "networkResponse" @kind object;
  #L19d09c.  call `checkSupportResponse`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L19d0a2.  v1.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` := v2 @kind object;
  #L19d0a6.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `priorResponse`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Response` v1 @kind object @name `priorResponse`) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19d0b8.  if v1 == 0 then goto L19d0c2;
  #L19d0bc.  call `checkPriorResponse`(v0, v1) @signature `Lokhttp3/Response$Builder;.checkPriorResponse:(Lokhttp3/Response;)V` @kind direct;
  #L19d0c2.  v0.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` := v1 @kind object;
  #L19d0c6.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `protocol`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Protocol` v1 @kind object @name `protocol`) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19d0d8.  v0.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` := v1 @kind object;
  #L19d0dc.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `receivedResponseAtMillis`(`okhttp3.Response$Builder` v1 @kind this, `long` v2 @name `receivedResponseAtMillis`) @signature `Lokhttp3/Response$Builder;.receivedResponseAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19d0f0.  v1.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` := v2 @kind wide;
  #L19d0f4.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `removeHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object @name `name`) @signature `Lokhttp3/Response$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19d108.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L19d10c.  call temp:= `removeAll`(v0, v2) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L19d112.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `request`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Request` v1 @kind object @name `request`) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19d124.  v0.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` := v1 @kind object;
  #L19d128.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `sentRequestAtMillis`(`okhttp3.Response$Builder` v1 @kind this, `long` v2 @name `sentRequestAtMillis`) @signature `Lokhttp3/Response$Builder;.sentRequestAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19d13c.  v1.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` := v2 @kind wide;
  #L19d140.  return v1 @kind object;
}
