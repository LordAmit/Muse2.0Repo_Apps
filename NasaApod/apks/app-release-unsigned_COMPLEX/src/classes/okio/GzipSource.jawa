record `okio.GzipSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Source` @kind interface {
  `java.util.zip.CRC32` `okio.GzipSource.crc` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `okio.GzipSource.inflater` @AccessFlag PRIVATE_FINAL;
  `okio.InflaterSource` `okio.GzipSource.inflaterSource` @AccessFlag PRIVATE_FINAL;
  `int` `okio.GzipSource.section` @AccessFlag PRIVATE;
  `okio.BufferedSource` `okio.GzipSource.source` @AccessFlag PRIVATE_FINAL;
}
global `byte` `@@okio.GzipSource.FCOMMENT` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FEXTRA` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FHCRC` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FNAME` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_DONE` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_HEADER` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_TRAILER` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okio.GzipSource` v3 @kind this, `okio.Source` v4 @kind object @name `source`) @signature `Lokio/GzipSource;.<init>:(Lokio/Source;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L21e678.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21e67e.  v0:= 0I;
  #L21e680.  v3.`okio.GzipSource.section` @type ^`int` := v0;
  #L21e684.  v0:= new `java.util.zip.CRC32`;
  #L21e688.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L21e68e.  v3.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L21e692.  if v4 != 0 then goto L21e6a6;
  #L21e696.  v0:= new `java.lang.IllegalArgumentException`;
  #L21e69a.  v1:= "source == null" @kind object;
  #L21e69e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e6a4.  throw v0;
  #L21e6a6.  v0:= new `java.util.zip.Inflater`;
  #L21e6aa.  v1:= 1I;
  #L21e6ac.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L21e6b2.  v3.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L21e6b6.  call temp:= `buffer`(v4) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L21e6bc.  v0:= temp @kind object;
  #L21e6be.  v3.`okio.GzipSource.source` @type ^`okio.BufferedSource` := v0 @kind object;
  #L21e6c2.  v0:= new `okio.InflaterSource`;
  #L21e6c6.  v1:= v3.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e6ca.  v2:= v3.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L21e6ce.  call `<init>`(v0, v1, v2) @signature `Lokio/InflaterSource;.<init>:(Lokio/BufferedSource;Ljava/util/zip/Inflater;)V` @kind direct;
  #L21e6d4.  v3.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` := v0 @kind object;
  #L21e6d8.  return @kind void;
}
procedure `void` `checkEqual`(`okio.GzipSource` v5 @kind this, `java.lang.String` v6 @kind object @name `name`, `int` v7 @name `expected`, `int` v8 @name `actual`) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L21e6ec.  if v8 == v7 then goto L21e730;
  #L21e6f0.  v0:= new `java.io.IOException`;
  #L21e6f4.  v1:= "%s: actual 0x%08x != expected 0x%08x" @kind object;
  #L21e6f8.  v2:= 3I;
  #L21e6fa.  v2:= new `java.lang.Object`[v2];
  #L21e6fe.  v3:= 0I;
  #L21e700.  v2[v3]:= v6 @kind object;
  #L21e704.  v3:= 1I;
  #L21e706.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L21e70c.  v4:= temp @kind object;
  #L21e70e.  v2[v3]:= v4 @kind object;
  #L21e712.  v3:= 2I;
  #L21e714.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L21e71a.  v4:= temp @kind object;
  #L21e71c.  v2[v3]:= v4 @kind object;
  #L21e720.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L21e726.  v1:= temp @kind object;
  #L21e728.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e72e.  throw v0;
  #L21e730.  return @kind void;
}
procedure `void` `consumeHeader`(`okio.GzipSource` v12 @kind this) @signature `Lokio/GzipSource;.consumeHeader:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L21e744.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e748.  v2:= 10L;
  #L21e74c.  call `require`(v0, v2) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L21e752.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e756.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21e75c.  v0:= temp @kind object;
  #L21e75e.  v2:= 3L;
  #L21e762.  call temp:= `getByte`(v0, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L21e768.  v7:= temp;
  #L21e76a.  v0:= v7 ^> 1;
  #L21e76e.  v0:= v0 ^& 1;
  #L21e772.  v1:= 1I;
  #L21e774.  if v0 != v1 then goto L21e87c;
  #L21e778.  v6:= 1I;
  #L21e77a.  if v6 == 0 then goto L21e79a;
  #L21e77e.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e782.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21e788.  v1:= temp @kind object;
  #L21e78a.  v2:= 0L;
  #L21e78e.  v4:= 10L;
  #L21e792.  v0:= v12 @kind object;
  #L21e794.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21e79a.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e79e.  call temp:= `readShort`(v0) @signature `Lokio/BufferedSource;.readShort:()S` @kind interface;
  #L21e7a4.  v8:= temp;
  #L21e7a6.  v0:= "ID1ID2" @kind object;
  #L21e7aa.  v1:= 8075I;
  #L21e7ae.  call `checkEqual`(v12, v0, v1, v8) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L21e7b4.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e7b8.  v2:= 8L;
  #L21e7bc.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L21e7c2.  v0:= v7 ^> 2;
  #L21e7c6.  v0:= v0 ^& 1;
  #L21e7ca.  v1:= 1I;
  #L21e7cc.  if v0 != v1 then goto L21e848;
  #L21e7d0.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e7d4.  v2:= 2L;
  #L21e7d8.  call `require`(v0, v2) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L21e7de.  if v6 == 0 then goto L21e7fe;
  #L21e7e2.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e7e6.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21e7ec.  v1:= temp @kind object;
  #L21e7ee.  v2:= 0L;
  #L21e7f2.  v4:= 2L;
  #L21e7f6.  v0:= v12 @kind object;
  #L21e7f8.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21e7fe.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e802.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21e808.  v0:= temp @kind object;
  #L21e80a.  call temp:= `readShortLe`(v0) @signature `Lokio/Buffer;.readShortLe:()S` @kind virtual;
  #L21e810.  v9:= temp;
  #L21e812.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e816.  v2:= (`long`) v9 @kind i2l;
  #L21e818.  call `require`(v0, v2) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L21e81e.  if v6 == 0 then goto L21e83c;
  #L21e822.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e826.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21e82c.  v1:= temp @kind object;
  #L21e82e.  v2:= 0L;
  #L21e832.  v4:= (`long`) v9 @kind i2l;
  #L21e834.  v0:= v12 @kind object;
  #L21e836.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21e83c.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e840.  v2:= (`long`) v9 @kind i2l;
  #L21e842.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L21e848.  v0:= v7 ^> 3;
  #L21e84c.  v0:= v0 ^& 1;
  #L21e850.  v1:= 1I;
  #L21e852.  if v0 != v1 then goto L21e8b4;
  #L21e856.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e85a.  v1:= 0I;
  #L21e85c.  call temp:= `indexOf`(v0, v1) @signature `Lokio/BufferedSource;.indexOf:(B)J` @kind interface;
  #L21e862.  v10:= temp @kind wide;
  #L21e864.  v0:= -1L;
  #L21e868.  v0:= lcmp(v10, v0);
  #L21e86c.  if v0 != 0 then goto L21e882;
  #L21e870.  v0:= new `java.io.EOFException`;
  #L21e874.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L21e87a.  throw v0;
  #L21e87c.  v6:= 0I;
  #L21e87e.  goto L21e77a;
  #L21e882.  if v6 == 0 then goto L21e8a4;
  #L21e886.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e88a.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21e890.  v1:= temp @kind object;
  #L21e892.  v2:= 0L;
  #L21e896.  v4:= 1L;
  #L21e89a.  v4:= v4 + v10 @kind long;
  #L21e89c.  v0:= v12 @kind object;
  #L21e89e.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21e8a4.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e8a8.  v2:= 1L;
  #L21e8ac.  v2:= v2 + v10 @kind long;
  #L21e8ae.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L21e8b4.  v0:= v7 ^> 4;
  #L21e8b8.  v0:= v0 ^& 1;
  #L21e8bc.  v1:= 1I;
  #L21e8be.  if v0 != v1 then goto L21e91a;
  #L21e8c2.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e8c6.  v1:= 0I;
  #L21e8c8.  call temp:= `indexOf`(v0, v1) @signature `Lokio/BufferedSource;.indexOf:(B)J` @kind interface;
  #L21e8ce.  v10:= temp @kind wide;
  #L21e8d0.  v0:= -1L;
  #L21e8d4.  v0:= lcmp(v10, v0);
  #L21e8d8.  if v0 != 0 then goto L21e8e8;
  #L21e8dc.  v0:= new `java.io.EOFException`;
  #L21e8e0.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L21e8e6.  throw v0;
  #L21e8e8.  if v6 == 0 then goto L21e90a;
  #L21e8ec.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e8f0.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21e8f6.  v1:= temp @kind object;
  #L21e8f8.  v2:= 0L;
  #L21e8fc.  v4:= 1L;
  #L21e900.  v4:= v4 + v10 @kind long;
  #L21e902.  v0:= v12 @kind object;
  #L21e904.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21e90a.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e90e.  v2:= 1L;
  #L21e912.  v2:= v2 + v10 @kind long;
  #L21e914.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L21e91a.  if v6 == 0 then goto L21e94e;
  #L21e91e.  v0:= "FHCRC" @kind object;
  #L21e922.  v1:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e926.  call temp:= `readShortLe`(v1) @signature `Lokio/BufferedSource;.readShortLe:()S` @kind interface;
  #L21e92c.  v1:= temp;
  #L21e92e.  v2:= v12.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L21e932.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L21e938.  v2:= temp @kind wide;
  #L21e93a.  v2:= (`int`) v2 @kind l2i;
  #L21e93c.  v2:= (`short`) v2 @kind i2s;
  #L21e93e.  call `checkEqual`(v12, v0, v1, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L21e944.  v0:= v12.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L21e948.  call `reset`(v0) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L21e94e.  return @kind void;
}
procedure `void` `consumeTrailer`(`okio.GzipSource` v4 @kind this) @signature `Lokio/GzipSource;.consumeTrailer:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L21e960.  v0:= "CRC" @kind object;
  #L21e964.  v1:= v4.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e968.  call temp:= `readIntLe`(v1) @signature `Lokio/BufferedSource;.readIntLe:()I` @kind interface;
  #L21e96e.  v1:= temp;
  #L21e970.  v2:= v4.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L21e974.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L21e97a.  v2:= temp @kind wide;
  #L21e97c.  v2:= (`int`) v2 @kind l2i;
  #L21e97e.  call `checkEqual`(v4, v0, v1, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L21e984.  v0:= "ISIZE" @kind object;
  #L21e988.  v1:= v4.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e98c.  call temp:= `readIntLe`(v1) @signature `Lokio/BufferedSource;.readIntLe:()I` @kind interface;
  #L21e992.  v1:= temp;
  #L21e994.  v2:= v4.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L21e998.  call temp:= `getBytesWritten`(v2) @signature `Ljava/util/zip/Inflater;.getBytesWritten:()J` @kind virtual;
  #L21e99e.  v2:= temp @kind wide;
  #L21e9a0.  v2:= (`int`) v2 @kind l2i;
  #L21e9a2.  call `checkEqual`(v4, v0, v1, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L21e9a8.  return @kind void;
}
procedure `void` `updateCrc`(`okio.GzipSource` v6 @kind this, `okio.Buffer` v7 @kind object @name `buffer`, `long` v8 @name `offset`, `long` v10 @name `byteCount`) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L21e9bc.  v1:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L21e9c0.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L21e9c4.  v4:= v1.`okio.Segment.pos` @type ^`int`;
  #L21e9c8.  v3:= v3 - v4 @kind int;
  #L21e9ca.  v4:= (`long`) v3 @kind i2l;
  #L21e9cc.  v3:= lcmp(v8, v4);
  #L21e9d0.  if v3 < 0 then goto L21e9e8;
  #L21e9d4.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L21e9d8.  v4:= v1.`okio.Segment.pos` @type ^`int`;
  #L21e9dc.  v3:= v3 - v4 @kind int;
  #L21e9de.  v4:= (`long`) v3 @kind i2l;
  #L21e9e0.  v8:= v8 - v4 @kind long;
  #L21e9e2.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L21e9e6.  goto L21e9c0;
  #L21e9e8.  v4:= 0L;
  #L21e9ec.  v3:= lcmp(v10, v4);
  #L21e9f0.  if v3 <= 0 then goto L21ea2c;
  #L21e9f4.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L21e9f8.  v4:= (`long`) v3 @kind i2l;
  #L21e9fa.  v4:= v4 + v8 @kind long;
  #L21e9fc.  v0:= (`int`) v4 @kind l2i;
  #L21e9fe.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L21ea02.  v3:= v3 - v0 @kind int;
  #L21ea04.  v4:= (`long`) v3 @kind i2l;
  #L21ea06.  call temp:= `min`(v4, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L21ea0c.  v4:= temp @kind wide;
  #L21ea0e.  v2:= (`int`) v4 @kind l2i;
  #L21ea10.  v3:= v6.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L21ea14.  v4:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L21ea18.  call `update`(v3, v4, v0, v2) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L21ea1e.  v4:= (`long`) v2 @kind i2l;
  #L21ea20.  v10:= v10 - v4 @kind long;
  #L21ea22.  v8:= 0L;
  #L21ea26.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L21ea2a.  goto L21e9e8;
  #L21ea2c.  return @kind void;
}
procedure `void` `close`(`okio.GzipSource` v1 @kind this) @signature `Lokio/GzipSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21ea40.  v0:= v1.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` @kind object;
  #L21ea44.  call `close`(v0) @signature `Lokio/InflaterSource;.close:()V` @kind virtual;
  #L21ea4a.  return @kind void;
}
procedure `long` `read`(`okio.GzipSource` v10 @kind this, `okio.Buffer` v11 @kind object @name `sink`, `long` v12 @name `byteCount`) @signature `Lokio/GzipSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L21ea5c.  v0:= -1L;
  #L21ea60.  v8:= 2I;
  #L21ea62.  v7:= 1I;
  #L21ea64.  v4:= 0L;
  #L21ea68.  v6:= lcmp(v12, v4);
  #L21ea6c.  if v6 >= 0 then goto L21eaa2;
  #L21ea70.  v0:= new `java.lang.IllegalArgumentException`;
  #L21ea74.  v1:= new `java.lang.StringBuilder`;
  #L21ea78.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21ea7e.  v6:= "byteCount < 0: " @kind object;
  #L21ea82.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21ea88.  v1:= temp @kind object;
  #L21ea8a.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L21ea90.  v1:= temp @kind object;
  #L21ea92.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21ea98.  v1:= temp @kind object;
  #L21ea9a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21eaa0.  throw v0;
  #L21eaa2.  v6:= lcmp(v12, v4);
  #L21eaa6.  if v6 != 0 then goto L21eaac;
  #L21eaaa.  return v4 @kind wide;
  #L21eaac.  v6:= v10.`okio.GzipSource.section` @type ^`int`;
  #L21eab0.  if v6 != 0 then goto L21eabe;
  #L21eab4.  call `consumeHeader`(v10) @signature `Lokio/GzipSource;.consumeHeader:()V` @kind direct;
  #L21eaba.  v10.`okio.GzipSource.section` @type ^`int` := v7;
  #L21eabe.  v6:= v10.`okio.GzipSource.section` @type ^`int`;
  #L21eac2.  if v6 != v7 then goto L21eaee;
  #L21eac6.  v2:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L21eaca.  v6:= v10.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` @kind object;
  #L21eace.  call temp:= `read`(v6, v11, v12) @signature `Lokio/InflaterSource;.read:(Lokio/Buffer;J)J` @kind virtual;
  #L21ead4.  v4:= temp @kind wide;
  #L21ead6.  v6:= lcmp(v4, v0);
  #L21eada.  if v6 == 0 then goto L21eaea;
  #L21eade.  v0:= v10 @kind object;
  #L21eae0.  v1:= v11 @kind object;
  #L21eae2.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21eae8.  goto L21eaaa;
  #L21eaea.  v10.`okio.GzipSource.section` @type ^`int` := v8;
  #L21eaee.  v6:= v10.`okio.GzipSource.section` @type ^`int`;
  #L21eaf2.  if v6 != v8 then goto L21eb22;
  #L21eaf6.  call `consumeTrailer`(v10) @signature `Lokio/GzipSource;.consumeTrailer:()V` @kind direct;
  #L21eafc.  v6:= 3I;
  #L21eafe.  v10.`okio.GzipSource.section` @type ^`int` := v6;
  #L21eb02.  v6:= v10.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21eb06.  call temp:= `exhausted`(v6) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L21eb0c.  v6:= temp;
  #L21eb0e.  if v6 != 0 then goto L21eb22;
  #L21eb12.  v0:= new `java.io.IOException`;
  #L21eb16.  v1:= "gzip finished without exhausting source" @kind object;
  #L21eb1a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21eb20.  throw v0;
  #L21eb22.  v4:= v0 @kind wide;
  #L21eb24.  goto L21eaaa;
}
procedure `okio.Timeout` `timeout`(`okio.GzipSource` v1 @kind this) @signature `Lokio/GzipSource;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21eb38.  v0:= v1.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21eb3c.  call temp:= `timeout`(v0) @signature `Lokio/BufferedSource;.timeout:()Lokio/Timeout;` @kind interface;
  #L21eb42.  v0:= temp @kind object;
  #L21eb44.  return v0 @kind object;
}
