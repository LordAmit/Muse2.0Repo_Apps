record `okio.RealBufferedSink` @kind class @AccessFlag FINAL extends `okio.BufferedSink` @kind interface {
  `okio.Buffer` `okio.RealBufferedSink.buffer` @AccessFlag PUBLIC_FINAL;
  `boolean` `okio.RealBufferedSink.closed` @AccessFlag ;
  `okio.Sink` `okio.RealBufferedSink.sink` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`okio.RealBufferedSink` v2 @kind this, `okio.Sink` v3 @kind object @name `sink`) @signature `Lokio/RealBufferedSink;.<init>:(Lokio/Sink;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L249a28.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L249a2e.  v0:= new `okio.Buffer`;
  #L249a32.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L249a38.  v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` := v0 @kind object;
  #L249a3c.  if v3 != 0 then goto L249a50;
  #L249a40.  v0:= new `java.lang.NullPointerException`;
  #L249a44.  v1:= "sink == null" @kind object;
  #L249a48.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249a4e.  throw v0;
  #L249a50.  v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` := v3 @kind object;
  #L249a54.  return @kind void;
}
procedure `okio.Buffer` `buffer`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249a68.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249a6c.  return v0 @kind object;
}
procedure `void` `close`(`okio.RealBufferedSink` v6 @kind this) @signature `Lokio/RealBufferedSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L249a80.  v2:= v6.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249a84.  if v2 == 0 then goto L249a8a;
  #L249a88.  return @kind void;
  #L249a8a.  v1:= 0I;
  #Try_start0.  
  #L249a8c.  v2:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249a90.  v2:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249a94.  v4:= 0L;
  #L249a98.  v2:= lcmp(v2, v4);
  #L249a9c.  if v2 <= 0 then goto L249ab6;
  #L249aa0.  v2:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L249aa4.  v3:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249aa8.  v4:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249aac.  v4:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249ab0.  call `write`(v2, v3, v4) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #Try_end0.  
  #Try_start1.  
  #L249ab6.  v2:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L249aba.  call `close`(v2) @signature `Lokio/Sink;.close:()V` @kind interface;
  #Try_end1.  
  #L249ac0.  v2:= 1I;
  #L249ac2.  v6.`okio.RealBufferedSink.closed` @type ^`boolean` := v2 @kind boolean;
  #L249ac6.  if v1 == 0 then goto L249a88;
  #L249aca.  call `sneakyRethrow`(v1) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @kind static;
  #L249ad0.  goto L249a88;
  #L249ad2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L249ad4.  v1:= v0 @kind object;
  #L249ad6.  goto L249ab6;
  #L249ad8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L249ada.  if v1 != 0 then goto L249ac0;
  #L249ade.  v1:= v0 @kind object;
  #L249ae0.  goto L249ac0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L249ad2;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L249ad8;
}
procedure `okio.BufferedSink` `emit`(`okio.RealBufferedSink` v4 @kind this) @signature `Lokio/RealBufferedSink;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L249b10.  v2:= v4.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249b14.  if v2 == 0 then goto L249b28;
  #L249b18.  v2:= new `java.lang.IllegalStateException`;
  #L249b1c.  v3:= "closed" @kind object;
  #L249b20.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249b26.  throw v2;
  #L249b28.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249b2c.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L249b32.  v0:= temp @kind wide;
  #L249b34.  v2:= 0L;
  #L249b38.  v2:= lcmp(v0, v2);
  #L249b3c.  if v2 <= 0 then goto L249b4e;
  #L249b40.  v2:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L249b44.  v3:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249b48.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L249b4e.  return v4 @kind object;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.RealBufferedSink` v4 @kind this) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L249b60.  v2:= v4.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249b64.  if v2 == 0 then goto L249b78;
  #L249b68.  v2:= new `java.lang.IllegalStateException`;
  #L249b6c.  v3:= "closed" @kind object;
  #L249b70.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249b76.  throw v2;
  #L249b78.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249b7c.  call temp:= `completeSegmentByteCount`(v2) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @kind virtual;
  #L249b82.  v0:= temp @kind wide;
  #L249b84.  v2:= 0L;
  #L249b88.  v2:= lcmp(v0, v2);
  #L249b8c.  if v2 <= 0 then goto L249b9e;
  #L249b90.  v2:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L249b94.  v3:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249b98.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L249b9e.  return v4 @kind object;
}
procedure `void` `flush`(`okio.RealBufferedSink` v4 @kind this) @signature `Lokio/RealBufferedSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L249bb0.  v0:= v4.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249bb4.  if v0 == 0 then goto L249bc8;
  #L249bb8.  v0:= new `java.lang.IllegalStateException`;
  #L249bbc.  v1:= "closed" @kind object;
  #L249bc0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249bc6.  throw v0;
  #L249bc8.  v0:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249bcc.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249bd0.  v2:= 0L;
  #L249bd4.  v0:= lcmp(v0, v2);
  #L249bd8.  if v0 <= 0 then goto L249bf2;
  #L249bdc.  v0:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L249be0.  v1:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249be4.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249be8.  v2:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249bec.  call `write`(v0, v1, v2) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L249bf2.  v0:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L249bf6.  call `flush`(v0) @signature `Lokio/Sink;.flush:()V` @kind interface;
  #L249bfc.  return @kind void;
}
procedure `boolean` `isOpen`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249c10.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249c14.  if v0 != 0 then goto L249c1c;
  #L249c18.  v0:= 1I;
  #L249c1a.  return v0;
  #L249c1c.  v0:= 0I;
  #L249c1e.  goto L249c1a;
}
procedure `java.io.OutputStream` `outputStream`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249c30.  v0:= new `okio.RealBufferedSink$1`;
  #L249c34.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSink$1;.<init>:(Lokio/RealBufferedSink;)V` @kind direct;
  #L249c3a.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249c4c.  v0:= v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L249c50.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L249c56.  v0:= temp @kind object;
  #L249c58.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.RealBufferedSink` v2 @kind this) @signature `Lokio/RealBufferedSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249c6c.  v0:= new `java.lang.StringBuilder`;
  #L249c70.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L249c76.  v1:= "buffer(" @kind object;
  #L249c7a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249c80.  v0:= temp @kind object;
  #L249c82.  v1:= v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L249c86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249c8c.  v0:= temp @kind object;
  #L249c8e.  v1:= ")" @kind object;
  #L249c92.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249c98.  v0:= temp @kind object;
  #L249c9a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L249ca0.  v0:= temp @kind object;
  #L249ca2.  return v0 @kind object;
}
procedure `int` `write`(`okio.RealBufferedSink` v3 @kind this, `java.nio.ByteBuffer` v4 @kind object @name `source`) @signature `Lokio/RealBufferedSink;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L249cb4.  v1:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249cb8.  if v1 == 0 then goto L249ccc;
  #L249cbc.  v1:= new `java.lang.IllegalStateException`;
  #L249cc0.  v2:= "closed" @kind object;
  #L249cc4.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249cca.  throw v1;
  #L249ccc.  v1:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249cd0.  call temp:= `write`(v1, v4) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L249cd6.  v0:= temp;
  #L249cd8.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249cde.  return v0;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v2 @kind this, `okio.ByteString` v3 @kind object @name `byteString`) @signature `Lokio/RealBufferedSink;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249cf0.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249cf4.  if v0 == 0 then goto L249d08;
  #L249cf8.  v0:= new `java.lang.IllegalStateException`;
  #L249cfc.  v1:= "closed" @kind object;
  #L249d00.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249d06.  throw v0;
  #L249d08.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249d0c.  call temp:= `write`(v0, v3) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L249d12.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249d18.  v0:= temp @kind object;
  #L249d1a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v4 @kind this, `okio.Source` v5 @kind object @name `source`, `long` v6 @name `byteCount`) @signature `Lokio/RealBufferedSink;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L249d2c.  v2:= 0L;
  #L249d30.  v2:= lcmp(v6, v2);
  #L249d34.  if v2 <= 0 then goto L249d66;
  #L249d38.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249d3c.  call temp:= `read`(v5, v2, v6) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L249d42.  v0:= temp @kind wide;
  #L249d44.  v2:= -1L;
  #L249d48.  v2:= lcmp(v0, v2);
  #L249d4c.  if v2 != 0 then goto L249d5c;
  #L249d50.  v2:= new `java.io.EOFException`;
  #L249d54.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L249d5a.  throw v2;
  #L249d5c.  v6:= v6 - v0 @kind long;
  #L249d5e.  call temp:= `emitCompleteSegments`(v4) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249d64.  goto L249d2c;
  #L249d66.  return v4 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v2 @kind this, `byte`[] v3 @kind object @name `source`) @signature `Lokio/RealBufferedSink;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249d78.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249d7c.  if v0 == 0 then goto L249d90;
  #L249d80.  v0:= new `java.lang.IllegalStateException`;
  #L249d84.  v1:= "closed" @kind object;
  #L249d88.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249d8e.  throw v0;
  #L249d90.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249d94.  call temp:= `write`(v0, v3) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L249d9a.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249da0.  v0:= temp @kind object;
  #L249da2.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v2 @kind this, `byte`[] v3 @kind object @name `source`, `int` v4 @name `offset`, `int` v5 @name `byteCount`) @signature `Lokio/RealBufferedSink;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249db4.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249db8.  if v0 == 0 then goto L249dcc;
  #L249dbc.  v0:= new `java.lang.IllegalStateException`;
  #L249dc0.  v1:= "closed" @kind object;
  #L249dc4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249dca.  throw v0;
  #L249dcc.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249dd0.  call temp:= `write`(v0, v3, v4, v5) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L249dd6.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249ddc.  v0:= temp @kind object;
  #L249dde.  return v0 @kind object;
}
procedure `void` `write`(`okio.RealBufferedSink` v2 @kind this, `okio.Buffer` v3 @kind object @name `source`, `long` v4 @name `byteCount`) @signature `Lokio/RealBufferedSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249df0.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249df4.  if v0 == 0 then goto L249e08;
  #L249df8.  v0:= new `java.lang.IllegalStateException`;
  #L249dfc.  v1:= "closed" @kind object;
  #L249e00.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249e06.  throw v0;
  #L249e08.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249e0c.  call `write`(v0, v3, v4) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L249e12.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249e18.  return @kind void;
}
procedure `long` `writeAll`(`okio.RealBufferedSink` v8 @kind this, `okio.Source` v9 @kind object @name `source`) @signature `Lokio/RealBufferedSink;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L249e2c.  if v9 != 0 then goto L249e40;
  #L249e30.  v4:= new `java.lang.IllegalArgumentException`;
  #L249e34.  v5:= "source == null" @kind object;
  #L249e38.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249e3e.  throw v4;
  #L249e40.  v2:= 0L;
  #L249e44.  v4:= v8.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249e48.  v6:= 8192L;
  #L249e4c.  call temp:= `read`(v9, v4, v6) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L249e52.  v0:= temp @kind wide;
  #L249e54.  v4:= -1L;
  #L249e58.  v4:= lcmp(v0, v4);
  #L249e5c.  if v4 == 0 then goto L249e6a;
  #L249e60.  v2:= v2 + v0 @kind long;
  #L249e62.  call temp:= `emitCompleteSegments`(v8) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249e68.  goto L249e44;
  #L249e6a.  return v2 @kind wide;
}
procedure `okio.BufferedSink` `writeByte`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `b`) @signature `Lokio/RealBufferedSink;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249e7c.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249e80.  if v0 == 0 then goto L249e94;
  #L249e84.  v0:= new `java.lang.IllegalStateException`;
  #L249e88.  v1:= "closed" @kind object;
  #L249e8c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249e92.  throw v0;
  #L249e94.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249e98.  call temp:= `writeByte`(v0, v3) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L249e9e.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249ea4.  v0:= temp @kind object;
  #L249ea6.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L249eb8.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249ebc.  if v0 == 0 then goto L249ed0;
  #L249ec0.  v0:= new `java.lang.IllegalStateException`;
  #L249ec4.  v1:= "closed" @kind object;
  #L249ec8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249ece.  throw v0;
  #L249ed0.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249ed4.  call temp:= `writeDecimalLong`(v0, v4) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L249eda.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249ee0.  v0:= temp @kind object;
  #L249ee2.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L249ef4.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249ef8.  if v0 == 0 then goto L249f0c;
  #L249efc.  v0:= new `java.lang.IllegalStateException`;
  #L249f00.  v1:= "closed" @kind object;
  #L249f04.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249f0a.  throw v0;
  #L249f0c.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249f10.  call temp:= `writeHexadecimalUnsignedLong`(v0, v4) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L249f16.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249f1c.  v0:= temp @kind object;
  #L249f1e.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeInt`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `i`) @signature `Lokio/RealBufferedSink;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249f30.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249f34.  if v0 == 0 then goto L249f48;
  #L249f38.  v0:= new `java.lang.IllegalStateException`;
  #L249f3c.  v1:= "closed" @kind object;
  #L249f40.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249f46.  throw v0;
  #L249f48.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249f4c.  call temp:= `writeInt`(v0, v3) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L249f52.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249f58.  v0:= temp @kind object;
  #L249f5a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `i`) @signature `Lokio/RealBufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249f6c.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249f70.  if v0 == 0 then goto L249f84;
  #L249f74.  v0:= new `java.lang.IllegalStateException`;
  #L249f78.  v1:= "closed" @kind object;
  #L249f7c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249f82.  throw v0;
  #L249f84.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249f88.  call temp:= `writeIntLe`(v0, v3) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L249f8e.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249f94.  v0:= temp @kind object;
  #L249f96.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeLong`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L249fa8.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249fac.  if v0 == 0 then goto L249fc0;
  #L249fb0.  v0:= new `java.lang.IllegalStateException`;
  #L249fb4.  v1:= "closed" @kind object;
  #L249fb8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249fbe.  throw v0;
  #L249fc0.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249fc4.  call temp:= `writeLong`(v0, v4) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L249fca.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249fd0.  v0:= temp @kind object;
  #L249fd2.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L249fe4.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249fe8.  if v0 == 0 then goto L249ffc;
  #L249fec.  v0:= new `java.lang.IllegalStateException`;
  #L249ff0.  v1:= "closed" @kind object;
  #L249ff4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249ffa.  throw v0;
  #L249ffc.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24a000.  call temp:= `writeLongLe`(v0, v4) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L24a006.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24a00c.  v0:= temp @kind object;
  #L24a00e.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeShort`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `s`) @signature `Lokio/RealBufferedSink;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24a020.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24a024.  if v0 == 0 then goto L24a038;
  #L24a028.  v0:= new `java.lang.IllegalStateException`;
  #L24a02c.  v1:= "closed" @kind object;
  #L24a030.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a036.  throw v0;
  #L24a038.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24a03c.  call temp:= `writeShort`(v0, v3) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L24a042.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24a048.  v0:= temp @kind object;
  #L24a04a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `s`) @signature `Lokio/RealBufferedSink;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24a05c.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24a060.  if v0 == 0 then goto L24a074;
  #L24a064.  v0:= new `java.lang.IllegalStateException`;
  #L24a068.  v1:= "closed" @kind object;
  #L24a06c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a072.  throw v0;
  #L24a074.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24a078.  call temp:= `writeShortLe`(v0, v3) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L24a07e.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24a084.  v0:= temp @kind object;
  #L24a086.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `int` v4 @name `beginIndex`, `int` v5 @name `endIndex`, `java.nio.charset.Charset` v6 @kind object @name `charset`) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24a098.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24a09c.  if v0 == 0 then goto L24a0b0;
  #L24a0a0.  v0:= new `java.lang.IllegalStateException`;
  #L24a0a4.  v1:= "closed" @kind object;
  #L24a0a8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a0ae.  throw v0;
  #L24a0b0.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24a0b4.  call temp:= `writeString`(v0, v3, v4, v5, v6) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L24a0ba.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24a0c0.  v0:= temp @kind object;
  #L24a0c2.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `java.nio.charset.Charset` v4 @kind object @name `charset`) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24a0d4.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24a0d8.  if v0 == 0 then goto L24a0ec;
  #L24a0dc.  v0:= new `java.lang.IllegalStateException`;
  #L24a0e0.  v1:= "closed" @kind object;
  #L24a0e4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a0ea.  throw v0;
  #L24a0ec.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24a0f0.  call temp:= `writeString`(v0, v3, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L24a0f6.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24a0fc.  v0:= temp @kind object;
  #L24a0fe.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24a110.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24a114.  if v0 == 0 then goto L24a128;
  #L24a118.  v0:= new `java.lang.IllegalStateException`;
  #L24a11c.  v1:= "closed" @kind object;
  #L24a120.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a126.  throw v0;
  #L24a128.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24a12c.  call temp:= `writeUtf8`(v0, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L24a132.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24a138.  v0:= temp @kind object;
  #L24a13a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `int` v4 @name `beginIndex`, `int` v5 @name `endIndex`) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24a14c.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24a150.  if v0 == 0 then goto L24a164;
  #L24a154.  v0:= new `java.lang.IllegalStateException`;
  #L24a158.  v1:= "closed" @kind object;
  #L24a15c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a162.  throw v0;
  #L24a164.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24a168.  call temp:= `writeUtf8`(v0, v3, v4, v5) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L24a16e.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24a174.  v0:= temp @kind object;
  #L24a176.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `codePoint`) @signature `Lokio/RealBufferedSink;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24a188.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24a18c.  if v0 == 0 then goto L24a1a0;
  #L24a190.  v0:= new `java.lang.IllegalStateException`;
  #L24a194.  v1:= "closed" @kind object;
  #L24a198.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a19e.  throw v0;
  #L24a1a0.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24a1a4.  call temp:= `writeUtf8CodePoint`(v0, v3) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L24a1aa.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24a1b0.  v0:= temp @kind object;
  #L24a1b2.  return v0 @kind object;
}
