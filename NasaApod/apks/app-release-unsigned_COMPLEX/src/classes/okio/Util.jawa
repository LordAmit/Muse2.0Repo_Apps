record `okio.Util` @kind class @AccessFlag FINAL {
}
global `java.nio.charset.Charset` `@@okio.Util.UTF_8` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Util;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ae9f0.  v0:= "UTF-8" @kind object;
  #L1ae9f4.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L1ae9fa.  v0:= temp @kind object;
  #L1ae9fc.  `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L1aea00.  return @kind void;
}
procedure `void` `<init>`(`okio.Util` v0 @kind this) @signature `Lokio/Util;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1aea14.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1aea1a.  return @kind void;
}
procedure `boolean` `arrayRangeEquals`(`byte`[] v3 @kind object @name `a`, `int` v4 @name `aOffset`, `byte`[] v5 @kind object @name `b`, `int` v6 @name `bOffset`, `int` v7 @name `byteCount`) @signature `Lokio/Util;.arrayRangeEquals:([BI[BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1aea2c.  v0:= 0I;
  #L1aea2e.  if v0 >= v7 then goto L1aea50;
  #L1aea32.  v1:= v0 + v4 @kind int;
  #L1aea36.  v1:= v3[v1] @kind byte;
  #L1aea3a.  v2:= v0 + v6 @kind int;
  #L1aea3e.  v2:= v5[v2] @kind byte;
  #L1aea42.  if v1 == v2 then goto L1aea4a;
  #L1aea46.  v1:= 0I;
  #L1aea48.  return v1;
  #L1aea4a.  v0:= v0 + 1;
  #L1aea4e.  goto L1aea2e;
  #L1aea50.  v1:= 1I;
  #L1aea52.  goto L1aea48;
}
procedure `void` `checkOffsetAndCount`(`long` v6 @name `size`, `long` v8 @name `offset`, `long` v10 @name `byteCount`) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1aea64.  v0:= v8 ^| v10 @kind long;
  #L1aea68.  v2:= 0L;
  #L1aea6c.  v0:= lcmp(v0, v2);
  #L1aea70.  if v0 < 0 then goto L1aea88;
  #L1aea74.  v0:= lcmp(v8, v6);
  #L1aea78.  if v0 > 0 then goto L1aea88;
  #L1aea7c.  v0:= v6 - v8 @kind long;
  #L1aea80.  v0:= lcmp(v0, v10);
  #L1aea84.  if v0 >= 0 then goto L1aead0;
  #L1aea88.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L1aea8c.  v1:= "size=%s offset=%s byteCount=%s" @kind object;
  #L1aea90.  v2:= 3I;
  #L1aea92.  v2:= new `java.lang.Object`[v2];
  #L1aea96.  v3:= 0I;
  #L1aea98.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1aea9e.  v4:= temp @kind object;
  #L1aeaa0.  v2[v3]:= v4 @kind object;
  #L1aeaa4.  v3:= 1I;
  #L1aeaa6.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1aeaac.  v4:= temp @kind object;
  #L1aeaae.  v2[v3]:= v4 @kind object;
  #L1aeab2.  v3:= 2I;
  #L1aeab4.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1aeaba.  v4:= temp @kind object;
  #L1aeabc.  v2[v3]:= v4 @kind object;
  #L1aeac0.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1aeac6.  v1:= temp @kind object;
  #L1aeac8.  call `<init>`(v0, v1) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aeace.  throw v0;
  #L1aead0.  return @kind void;
}
procedure `int` `reverseBytesInt`(`int` v2 @name `i`) @signature `Lokio/Util;.reverseBytesInt:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1aeae4.  v0:= -16777216I;
  #L1aeae8.  v0:= v0 ^& v2 @kind int;
  #L1aeaea.  v0:= v0 ^>> 24;
  #L1aeaee.  v1:= 16711680I;
  #L1aeaf2.  v1:= v1 ^& v2 @kind int;
  #L1aeaf4.  v1:= v1 ^>> 8;
  #L1aeaf8.  v0:= v0 ^| v1 @kind int;
  #L1aeafa.  v1:= 65280I;
  #L1aeb00.  v1:= v1 ^& v2 @kind int;
  #L1aeb02.  v1:= v1 ^< 8;
  #L1aeb06.  v0:= v0 ^| v1 @kind int;
  #L1aeb08.  v1:= v2 ^& 255;
  #L1aeb0c.  v1:= v1 ^< 24;
  #L1aeb10.  v0:= v0 ^| v1 @kind int;
  #L1aeb12.  return v0;
}
procedure `long` `reverseBytesLong`(`long` v8 @name `v`) @signature `Lokio/Util;.reverseBytesLong:(J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1aeb24.  v7:= 56I;
  #L1aeb28.  v6:= 40I;
  #L1aeb2c.  v5:= 24I;
  #L1aeb30.  v4:= 8I;
  #L1aeb34.  v0:= -72057594037927936L;
  #L1aeb38.  v0:= v0 ^& v8 @kind long;
  #L1aeb3a.  v0:= v0 ^>> v7 @kind long;
  #L1aeb3c.  v2:= 71776119061217280L;
  #L1aeb40.  v2:= v2 ^& v8 @kind long;
  #L1aeb42.  v2:= v2 ^>> v6 @kind long;
  #L1aeb44.  v0:= v0 ^| v2 @kind long;
  #L1aeb46.  v2:= 280375465082880L;
  #L1aeb50.  v2:= v2 ^& v8 @kind long;
  #L1aeb52.  v2:= v2 ^>> v5 @kind long;
  #L1aeb54.  v0:= v0 ^| v2 @kind long;
  #L1aeb56.  v2:= 1095216660480L;
  #L1aeb60.  v2:= v2 ^& v8 @kind long;
  #L1aeb62.  v2:= v2 ^>> v4 @kind long;
  #L1aeb64.  v0:= v0 ^| v2 @kind long;
  #L1aeb66.  v2:= 4278190080L;
  #L1aeb70.  v2:= v2 ^& v8 @kind long;
  #L1aeb72.  v2:= v2 ^< v4 @kind long;
  #L1aeb74.  v0:= v0 ^| v2 @kind long;
  #L1aeb76.  v2:= 16711680L;
  #L1aeb7c.  v2:= v2 ^& v8 @kind long;
  #L1aeb7e.  v2:= v2 ^< v5 @kind long;
  #L1aeb80.  v0:= v0 ^| v2 @kind long;
  #L1aeb82.  v2:= 65280L;
  #L1aeb88.  v2:= v2 ^& v8 @kind long;
  #L1aeb8a.  v2:= v2 ^< v6 @kind long;
  #L1aeb8c.  v0:= v0 ^| v2 @kind long;
  #L1aeb8e.  v2:= 255L;
  #L1aeb92.  v2:= v2 ^& v8 @kind long;
  #L1aeb94.  v2:= v2 ^< v7 @kind long;
  #L1aeb96.  v0:= v0 ^| v2 @kind long;
  #L1aeb98.  return v0 @kind wide;
}
procedure `short` `reverseBytesShort`(`short` v4 @name `s`) @signature `Lokio/Util;.reverseBytesShort:(S)S` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1aebac.  v2:= 65535I;
  #L1aebb2.  v0:= v4 ^& v2 @kind int;
  #L1aebb6.  v2:= 65280I;
  #L1aebbc.  v2:= v2 ^& v0 @kind int;
  #L1aebbe.  v2:= v2 ^>> 8;
  #L1aebc2.  v3:= v0 ^& 255;
  #L1aebc6.  v3:= v3 ^< 8;
  #L1aebca.  v1:= v2 ^| v3 @kind int;
  #L1aebce.  v2:= (`short`) v1 @kind i2s;
  #L1aebd0.  return v2;
}
procedure `void` `sneakyRethrow`(`java.lang.Throwable` v0 @kind object @name `t`) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1aebe4.  call `sneakyThrow2`(v0) @signature `Lokio/Util;.sneakyThrow2:(Ljava/lang/Throwable;)V` @kind static;
  #L1aebea.  return @kind void;
}
procedure `void` `sneakyThrow2`(`java.lang.Throwable` v0 @kind object @name `t`) @signature `Lokio/Util;.sneakyThrow2:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L1aebfc.  throw v0;
}
