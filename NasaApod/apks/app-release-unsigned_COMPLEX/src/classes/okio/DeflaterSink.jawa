record `okio.DeflaterSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Sink` @kind interface {
  `boolean` `okio.DeflaterSink.closed` @AccessFlag PRIVATE;
  `java.util.zip.Deflater` `okio.DeflaterSink.deflater` @AccessFlag PRIVATE_FINAL;
  `okio.BufferedSink` `okio.DeflaterSink.sink` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.DeflaterSink` v2 @kind this, `okio.BufferedSink` v3 @kind object @name `sink`, `java.util.zip.Deflater` v4 @kind object @name `deflater`) @signature `Lokio/DeflaterSink;.<init>:(Lokio/BufferedSink;Ljava/util/zip/Deflater;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L21dd34.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21dd3a.  if v3 != 0 then goto L21dd4e;
  #L21dd3e.  v0:= new `java.lang.IllegalArgumentException`;
  #L21dd42.  v1:= "source == null" @kind object;
  #L21dd46.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21dd4c.  throw v0;
  #L21dd4e.  if v4 != 0 then goto L21dd62;
  #L21dd52.  v0:= new `java.lang.IllegalArgumentException`;
  #L21dd56.  v1:= "inflater == null" @kind object;
  #L21dd5a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21dd60.  throw v0;
  #L21dd62.  v2.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` := v3 @kind object;
  #L21dd66.  v2.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` := v4 @kind object;
  #L21dd6a.  return @kind void;
}
procedure `void` `<init>`(`okio.DeflaterSink` v1 @kind this, `okio.Sink` v2 @kind object @name `sink`, `java.util.zip.Deflater` v3 @kind object @name `deflater`) @signature `Lokio/DeflaterSink;.<init>:(Lokio/Sink;Ljava/util/zip/Deflater;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L21dd7c.  call temp:= `buffer`(v2) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @kind static;
  #L21dd82.  v0:= temp @kind object;
  #L21dd84.  call `<init>`(v1, v0, v3) @signature `Lokio/DeflaterSink;.<init>:(Lokio/BufferedSink;Ljava/util/zip/Deflater;)V` @kind direct;
  #L21dd8a.  return @kind void;
}
procedure `void` `deflate`(`okio.DeflaterSink` v8 @kind this, `boolean` v9 @name `syncFlush`) @signature `Lokio/DeflaterSink;.deflate:(Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L21dd9c.  v3:= v8.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L21dda0.  call temp:= `buffer`(v3) @signature `Lokio/BufferedSink;.buffer:()Lokio/Buffer;` @kind interface;
  #L21dda6.  v0:= temp @kind object;
  #L21dda8.  v3:= 1I;
  #L21ddaa.  call temp:= `writableSegment`(v0, v3) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L21ddb0.  v2:= temp @kind object;
  #L21ddb2.  if v9 == 0 then goto L21ddfa;
  #L21ddb6.  v3:= v8.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L21ddba.  v4:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L21ddbe.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L21ddc2.  v6:= v2.`okio.Segment.limit` @type ^`int`;
  #L21ddc6.  v6:= v6 - 8192;
  #L21ddca.  v7:= 2I;
  #L21ddcc.  call temp:= `deflate`(v3, v4, v5, v6, v7) @signature `Ljava/util/zip/Deflater;.deflate:([BIII)I` @kind virtual;
  #L21ddd2.  v1:= temp;
  #L21ddd4.  if v1 <= 0 then goto L21de18;
  #L21ddd8.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L21dddc.  v3:= v3 + v1 @kind int;
  #L21ddde.  v2.`okio.Segment.limit` @type ^`int` := v3;
  #L21dde2.  v4:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L21dde6.  v6:= (`long`) v1 @kind i2l;
  #L21dde8.  v4:= v4 + v6 @kind long;
  #L21ddea.  v0.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L21ddee.  v3:= v8.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L21ddf2.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/BufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind interface;
  #L21ddf8.  goto L21dda8;
  #L21ddfa.  v3:= v8.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L21ddfe.  v4:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L21de02.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L21de06.  v6:= v2.`okio.Segment.limit` @type ^`int`;
  #L21de0a.  v6:= v6 - 8192;
  #L21de0e.  call temp:= `deflate`(v3, v4, v5, v6) @signature `Ljava/util/zip/Deflater;.deflate:([BII)I` @kind virtual;
  #L21de14.  v1:= temp;
  #L21de16.  goto L21ddd4;
  #L21de18.  v3:= v8.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L21de1c.  call temp:= `needsInput`(v3) @signature `Ljava/util/zip/Deflater;.needsInput:()Z` @kind virtual;
  #L21de22.  v3:= temp;
  #L21de24.  if v3 == 0 then goto L21dda8;
  #L21de28.  v3:= v2.`okio.Segment.pos` @type ^`int`;
  #L21de2c.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L21de30.  if v3 != v4 then goto L21de46;
  #L21de34.  call temp:= `pop`(v2) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L21de3a.  v3:= temp @kind object;
  #L21de3c.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v3 @kind object;
  #L21de40.  call `recycle`(v2) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L21de46.  return @kind void;
}
procedure `void` `close`(`okio.DeflaterSink` v3 @kind this) @signature `Lokio/DeflaterSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L21de58.  v2:= v3.`okio.DeflaterSink.closed` @type ^`boolean` @kind boolean;
  #L21de5c.  if v2 == 0 then goto L21de62;
  #L21de60.  return @kind void;
  #L21de62.  v1:= 0I;
  #Try_start0.  
  #L21de64.  call `finishDeflate`(v3) @signature `Lokio/DeflaterSink;.finishDeflate:()V` @kind virtual;
  #Try_end0.  
  #Try_start1.  
  #L21de6a.  v2:= v3.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L21de6e.  call `end`(v2) @signature `Ljava/util/zip/Deflater;.end:()V` @kind virtual;
  #Try_end1.  
  #Try_start2.  
  #L21de74.  v2:= v3.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L21de78.  call `close`(v2) @signature `Lokio/BufferedSink;.close:()V` @kind interface;
  #Try_end2.  
  #L21de7e.  v2:= 1I;
  #L21de80.  v3.`okio.DeflaterSink.closed` @type ^`boolean` := v2 @kind boolean;
  #L21de84.  if v1 == 0 then goto L21de60;
  #L21de88.  call `sneakyRethrow`(v1) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @kind static;
  #L21de8e.  goto L21de60;
  #L21de90.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21de92.  v1:= v0 @kind object;
  #L21de94.  goto L21de6a;
  #L21de96.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21de98.  if v1 != 0 then goto L21de74;
  #L21de9c.  v1:= v0 @kind object;
  #L21de9e.  goto L21de74;
  #L21dea0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21dea2.  if v1 != 0 then goto L21de7e;
  #L21dea6.  v1:= v0 @kind object;
  #L21dea8.  goto L21de7e;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L21de90;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L21de96;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L21dea0;
}
procedure `void` `finishDeflate`(`okio.DeflaterSink` v1 @kind this) @signature `Lokio/DeflaterSink;.finishDeflate:()V` @AccessFlag  {
    temp;
    v0;

  #L21dee4.  v0:= v1.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L21dee8.  call `finish`(v0) @signature `Ljava/util/zip/Deflater;.finish:()V` @kind virtual;
  #L21deee.  v0:= 0I;
  #L21def0.  call `deflate`(v1, v0) @signature `Lokio/DeflaterSink;.deflate:(Z)V` @kind direct;
  #L21def6.  return @kind void;
}
procedure `void` `flush`(`okio.DeflaterSink` v1 @kind this) @signature `Lokio/DeflaterSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21df08.  v0:= 1I;
  #L21df0a.  call `deflate`(v1, v0) @signature `Lokio/DeflaterSink;.deflate:(Z)V` @kind direct;
  #L21df10.  v0:= v1.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L21df14.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L21df1a.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.DeflaterSink` v1 @kind this) @signature `Lokio/DeflaterSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21df2c.  v0:= v1.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L21df30.  call temp:= `timeout`(v0) @signature `Lokio/BufferedSink;.timeout:()Lokio/Timeout;` @kind interface;
  #L21df36.  v0:= temp @kind object;
  #L21df38.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.DeflaterSink` v2 @kind this) @signature `Lokio/DeflaterSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L21df4c.  v0:= new `java.lang.StringBuilder`;
  #L21df50.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21df56.  v1:= "DeflaterSink(" @kind object;
  #L21df5a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21df60.  v0:= temp @kind object;
  #L21df62.  v1:= v2.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L21df66.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21df6c.  v0:= temp @kind object;
  #L21df6e.  v1:= ")" @kind object;
  #L21df72.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21df78.  v0:= temp @kind object;
  #L21df7a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21df80.  v0:= temp @kind object;
  #L21df82.  return v0 @kind object;
}
procedure `void` `write`(`okio.DeflaterSink` v8 @kind this, `okio.Buffer` v9 @kind object @name `source`, `long` v10 @name `byteCount`) @signature `Lokio/DeflaterSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L21df94.  v2:= 0L;
  #L21df98.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L21df9c.  v4:= v10 @kind wide;
  #L21df9e.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L21dfa4.  v0:= lcmp(v10, v2);
  #L21dfa8.  if v0 <= 0 then goto L21e01a;
  #L21dfac.  v6:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L21dfb0.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L21dfb4.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L21dfb8.  v0:= v0 - v1 @kind int;
  #L21dfba.  v0:= (`long`) v0 @kind i2l;
  #L21dfbc.  call temp:= `min`(v10, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L21dfc2.  v0:= temp @kind wide;
  #L21dfc4.  v7:= (`int`) v0 @kind l2i;
  #L21dfc6.  v0:= v8.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L21dfca.  v1:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L21dfce.  v4:= v6.`okio.Segment.pos` @type ^`int`;
  #L21dfd2.  call `setInput`(v0, v1, v4, v7) @signature `Ljava/util/zip/Deflater;.setInput:([BII)V` @kind virtual;
  #L21dfd8.  v0:= 0I;
  #L21dfda.  call `deflate`(v8, v0) @signature `Lokio/DeflaterSink;.deflate:(Z)V` @kind direct;
  #L21dfe0.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L21dfe4.  v4:= (`long`) v7 @kind i2l;
  #L21dfe6.  v0:= v0 - v4 @kind long;
  #L21dfe8.  v9.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L21dfec.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L21dff0.  v0:= v0 + v7 @kind int;
  #L21dff2.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L21dff6.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L21dffa.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L21dffe.  if v0 != v1 then goto L21e014;
  #L21e002.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L21e008.  v0:= temp @kind object;
  #L21e00a.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L21e00e.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L21e014.  v0:= (`long`) v7 @kind i2l;
  #L21e016.  v10:= v10 - v0 @kind long;
  #L21e018.  goto L21dfa4;
  #L21e01a.  return @kind void;
}
