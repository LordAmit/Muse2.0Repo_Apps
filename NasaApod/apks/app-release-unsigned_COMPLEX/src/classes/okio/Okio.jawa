record `okio.Okio` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.logging.Logger` `@@okio.Okio.logger` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Okio;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ad8c8.  v0:= constclass @type ^`okio.Okio` @kind object;
  #L1ad8cc.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1ad8d2.  v0:= temp @kind object;
  #L1ad8d4.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L1ad8da.  v0:= temp @kind object;
  #L1ad8dc.  `@@okio.Okio.logger` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L1ad8e0.  return @kind void;
}
procedure `void` `<init>`(`okio.Okio` v0 @kind this) @signature `Lokio/Okio;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1ad8f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ad8fa.  return @kind void;
}
procedure `okio.Sink` `appendingSink`(`java.io.File` v2 @kind object @name `file`) @signature `Lokio/Okio;.appendingSink:(Ljava/io/File;)Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1ad90c.  if v2 != 0 then goto L1ad920;
  #L1ad910.  v0:= new `java.lang.IllegalArgumentException`;
  #L1ad914.  v1:= "file == null" @kind object;
  #L1ad918.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad91e.  throw v0;
  #L1ad920.  v0:= new `java.io.FileOutputStream`;
  #L1ad924.  v1:= 1I;
  #L1ad926.  call `<init>`(v0, v2, v1) @signature `Ljava/io/FileOutputStream;.<init>:(Ljava/io/File;Z)V` @kind direct;
  #L1ad92c.  call temp:= `sink`(v0) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;)Lokio/Sink;` @kind static;
  #L1ad932.  v0:= temp @kind object;
  #L1ad934.  return v0 @kind object;
}
procedure `okio.Sink` `blackhole`() @signature `Lokio/Okio;.blackhole:()Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1ad948.  v0:= new `okio.Okio$3`;
  #L1ad94c.  call `<init>`(v0) @signature `Lokio/Okio$3;.<init>:()V` @kind direct;
  #L1ad952.  return v0 @kind object;
}
procedure `okio.BufferedSink` `buffer`(`okio.Sink` v1 @kind object @name `sink`) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1ad964.  v0:= new `okio.RealBufferedSink`;
  #L1ad968.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L1ad96e.  return v0 @kind object;
}
procedure `okio.BufferedSource` `buffer`(`okio.Source` v1 @kind object @name `source`) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1ad980.  v0:= new `okio.RealBufferedSource`;
  #L1ad984.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSource;.<init>:(Lokio/Source;)V` @kind direct;
  #L1ad98a.  return v0 @kind object;
}
procedure `boolean` `isAndroidGetsocknameError`(`java.lang.AssertionError` v2 @kind object @name `e`) @signature `Lokio/Okio;.isAndroidGetsocknameError:(Ljava/lang/AssertionError;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1ad99c.  call temp:= `getCause`(v2) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L1ad9a2.  v0:= temp @kind object;
  #L1ad9a4.  if v0 == 0 then goto L1ad9d0;
  #L1ad9a8.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1ad9ae.  v0:= temp @kind object;
  #L1ad9b0.  if v0 == 0 then goto L1ad9d0;
  #L1ad9b4.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1ad9ba.  v0:= temp @kind object;
  #L1ad9bc.  v1:= "getsockname failed" @kind object;
  #L1ad9c0.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L1ad9c6.  v0:= temp;
  #L1ad9c8.  if v0 == 0 then goto L1ad9d0;
  #L1ad9cc.  v0:= 1I;
  #L1ad9ce.  return v0;
  #L1ad9d0.  v0:= 0I;
  #L1ad9d2.  goto L1ad9ce;
}
procedure `okio.Sink` `sink`(`java.io.File` v2 @kind object @name `file`) @signature `Lokio/Okio;.sink:(Ljava/io/File;)Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1ad9e4.  if v2 != 0 then goto L1ad9f8;
  #L1ad9e8.  v0:= new `java.lang.IllegalArgumentException`;
  #L1ad9ec.  v1:= "file == null" @kind object;
  #L1ad9f0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad9f6.  throw v0;
  #L1ad9f8.  v0:= new `java.io.FileOutputStream`;
  #L1ad9fc.  call `<init>`(v0, v2) @signature `Ljava/io/FileOutputStream;.<init>:(Ljava/io/File;)V` @kind direct;
  #L1ada02.  call temp:= `sink`(v0) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;)Lokio/Sink;` @kind static;
  #L1ada08.  v0:= temp @kind object;
  #L1ada0a.  return v0 @kind object;
}
procedure `okio.Sink` `sink`(`java.io.OutputStream` v1 @kind object @name `out`) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;)Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1ada1c.  v0:= new `okio.Timeout`;
  #L1ada20.  call `<init>`(v0) @signature `Lokio/Timeout;.<init>:()V` @kind direct;
  #L1ada26.  call temp:= `sink`(v1, v0) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;Lokio/Timeout;)Lokio/Sink;` @kind static;
  #L1ada2c.  v0:= temp @kind object;
  #L1ada2e.  return v0 @kind object;
}
procedure `okio.Sink` `sink`(`java.io.OutputStream` v2 @kind object @name `out`, `okio.Timeout` v3 @kind object @name `timeout`) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;Lokio/Timeout;)Lokio/Sink;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1ada40.  if v2 != 0 then goto L1ada54;
  #L1ada44.  v0:= new `java.lang.IllegalArgumentException`;
  #L1ada48.  v1:= "out == null" @kind object;
  #L1ada4c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ada52.  throw v0;
  #L1ada54.  if v3 != 0 then goto L1ada68;
  #L1ada58.  v0:= new `java.lang.IllegalArgumentException`;
  #L1ada5c.  v1:= "timeout == null" @kind object;
  #L1ada60.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ada66.  throw v0;
  #L1ada68.  v0:= new `okio.Okio$1`;
  #L1ada6c.  call `<init>`(v0, v3, v2) @signature `Lokio/Okio$1;.<init>:(Lokio/Timeout;Ljava/io/OutputStream;)V` @kind direct;
  #L1ada72.  return v0 @kind object;
}
procedure `okio.Sink` `sink`(`java.net.Socket` v4 @kind object @name `socket`) @signature `Lokio/Okio;.sink:(Ljava/net/Socket;)Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ada84.  if v4 != 0 then goto L1ada98;
  #L1ada88.  v2:= new `java.lang.IllegalArgumentException`;
  #L1ada8c.  v3:= "socket == null" @kind object;
  #L1ada90.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ada96.  throw v2;
  #L1ada98.  call temp:= `getOutputStream`(v4) @signature `Ljava/net/Socket;.getOutputStream:()Ljava/io/OutputStream;` @kind virtual;
  #L1ada9e.  v2:= temp @kind object;
  #L1adaa0.  if v2 != 0 then goto L1adab4;
  #L1adaa4.  v2:= new `java.io.IOException`;
  #L1adaa8.  v3:= "socket's output stream == null" @kind object;
  #L1adaac.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1adab2.  throw v2;
  #L1adab4.  call temp:= `timeout`(v4) @signature `Lokio/Okio;.timeout:(Ljava/net/Socket;)Lokio/AsyncTimeout;` @kind static;
  #L1adaba.  v1:= temp @kind object;
  #L1adabc.  call temp:= `getOutputStream`(v4) @signature `Ljava/net/Socket;.getOutputStream:()Ljava/io/OutputStream;` @kind virtual;
  #L1adac2.  v2:= temp @kind object;
  #L1adac4.  call temp:= `sink`(v2, v1) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;Lokio/Timeout;)Lokio/Sink;` @kind static;
  #L1adaca.  v0:= temp @kind object;
  #L1adacc.  call temp:= `sink`(v1, v0) @signature `Lokio/AsyncTimeout;.sink:(Lokio/Sink;)Lokio/Sink;` @kind virtual;
  #L1adad2.  v2:= temp @kind object;
  #L1adad4.  return v2 @kind object;
}
procedure `okio.Sink` `sink`(`java.nio.file.Path` v2 @kind object @name `path`, `java.nio.file.OpenOption`[] v3 @kind object @name `options`) @signature `Lokio/Okio;.sink:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1adae8.  if v2 != 0 then goto L1adafc;
  #L1adaec.  v0:= new `java.lang.IllegalArgumentException`;
  #L1adaf0.  v1:= "path == null" @kind object;
  #L1adaf4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1adafa.  throw v0;
  #L1adafc.  call temp:= `newOutputStream`(v2, v3) @signature `Ljava/nio/file/Files;.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;` @kind static;
  #L1adb02.  v0:= temp @kind object;
  #L1adb04.  call temp:= `sink`(v0) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;)Lokio/Sink;` @kind static;
  #L1adb0a.  v0:= temp @kind object;
  #L1adb0c.  return v0 @kind object;
}
procedure `okio.Source` `source`(`java.io.File` v2 @kind object @name `file`) @signature `Lokio/Okio;.source:(Ljava/io/File;)Lokio/Source;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1adb20.  if v2 != 0 then goto L1adb34;
  #L1adb24.  v0:= new `java.lang.IllegalArgumentException`;
  #L1adb28.  v1:= "file == null" @kind object;
  #L1adb2c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1adb32.  throw v0;
  #L1adb34.  v0:= new `java.io.FileInputStream`;
  #L1adb38.  call `<init>`(v0, v2) @signature `Ljava/io/FileInputStream;.<init>:(Ljava/io/File;)V` @kind direct;
  #L1adb3e.  call temp:= `source`(v0) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;)Lokio/Source;` @kind static;
  #L1adb44.  v0:= temp @kind object;
  #L1adb46.  return v0 @kind object;
}
procedure `okio.Source` `source`(`java.io.InputStream` v1 @kind object @name `in`) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;)Lokio/Source;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1adb58.  v0:= new `okio.Timeout`;
  #L1adb5c.  call `<init>`(v0) @signature `Lokio/Timeout;.<init>:()V` @kind direct;
  #L1adb62.  call temp:= `source`(v1, v0) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;Lokio/Timeout;)Lokio/Source;` @kind static;
  #L1adb68.  v0:= temp @kind object;
  #L1adb6a.  return v0 @kind object;
}
procedure `okio.Source` `source`(`java.io.InputStream` v2 @kind object @name `in`, `okio.Timeout` v3 @kind object @name `timeout`) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;Lokio/Timeout;)Lokio/Source;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1adb7c.  if v2 != 0 then goto L1adb90;
  #L1adb80.  v0:= new `java.lang.IllegalArgumentException`;
  #L1adb84.  v1:= "in == null" @kind object;
  #L1adb88.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1adb8e.  throw v0;
  #L1adb90.  if v3 != 0 then goto L1adba4;
  #L1adb94.  v0:= new `java.lang.IllegalArgumentException`;
  #L1adb98.  v1:= "timeout == null" @kind object;
  #L1adb9c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1adba2.  throw v0;
  #L1adba4.  v0:= new `okio.Okio$2`;
  #L1adba8.  call `<init>`(v0, v3, v2) @signature `Lokio/Okio$2;.<init>:(Lokio/Timeout;Ljava/io/InputStream;)V` @kind direct;
  #L1adbae.  return v0 @kind object;
}
procedure `okio.Source` `source`(`java.net.Socket` v4 @kind object @name `socket`) @signature `Lokio/Okio;.source:(Ljava/net/Socket;)Lokio/Source;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1adbc0.  if v4 != 0 then goto L1adbd4;
  #L1adbc4.  v2:= new `java.lang.IllegalArgumentException`;
  #L1adbc8.  v3:= "socket == null" @kind object;
  #L1adbcc.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1adbd2.  throw v2;
  #L1adbd4.  call temp:= `getInputStream`(v4) @signature `Ljava/net/Socket;.getInputStream:()Ljava/io/InputStream;` @kind virtual;
  #L1adbda.  v2:= temp @kind object;
  #L1adbdc.  if v2 != 0 then goto L1adbf0;
  #L1adbe0.  v2:= new `java.io.IOException`;
  #L1adbe4.  v3:= "socket's input stream == null" @kind object;
  #L1adbe8.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1adbee.  throw v2;
  #L1adbf0.  call temp:= `timeout`(v4) @signature `Lokio/Okio;.timeout:(Ljava/net/Socket;)Lokio/AsyncTimeout;` @kind static;
  #L1adbf6.  v1:= temp @kind object;
  #L1adbf8.  call temp:= `getInputStream`(v4) @signature `Ljava/net/Socket;.getInputStream:()Ljava/io/InputStream;` @kind virtual;
  #L1adbfe.  v2:= temp @kind object;
  #L1adc00.  call temp:= `source`(v2, v1) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;Lokio/Timeout;)Lokio/Source;` @kind static;
  #L1adc06.  v0:= temp @kind object;
  #L1adc08.  call temp:= `source`(v1, v0) @signature `Lokio/AsyncTimeout;.source:(Lokio/Source;)Lokio/Source;` @kind virtual;
  #L1adc0e.  v2:= temp @kind object;
  #L1adc10.  return v2 @kind object;
}
procedure `okio.Source` `source`(`java.nio.file.Path` v2 @kind object @name `path`, `java.nio.file.OpenOption`[] v3 @kind object @name `options`) @signature `Lokio/Okio;.source:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Lokio/Source;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1adc24.  if v2 != 0 then goto L1adc38;
  #L1adc28.  v0:= new `java.lang.IllegalArgumentException`;
  #L1adc2c.  v1:= "path == null" @kind object;
  #L1adc30.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1adc36.  throw v0;
  #L1adc38.  call temp:= `newInputStream`(v2, v3) @signature `Ljava/nio/file/Files;.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;` @kind static;
  #L1adc3e.  v0:= temp @kind object;
  #L1adc40.  call temp:= `source`(v0) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;)Lokio/Source;` @kind static;
  #L1adc46.  v0:= temp @kind object;
  #L1adc48.  return v0 @kind object;
}
procedure `okio.AsyncTimeout` `timeout`(`java.net.Socket` v1 @kind object @name `socket`) @signature `Lokio/Okio;.timeout:(Ljava/net/Socket;)Lokio/AsyncTimeout;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1adc5c.  v0:= new `okio.Okio$4`;
  #L1adc60.  call `<init>`(v0, v1) @signature `Lokio/Okio$4;.<init>:(Ljava/net/Socket;)V` @kind direct;
  #L1adc66.  return v0 @kind object;
}
