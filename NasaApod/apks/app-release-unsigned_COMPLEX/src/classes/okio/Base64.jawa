record `okio.Base64` @kind class @AccessFlag FINAL {
}
global `byte`[] `@@okio.Base64.MAP` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@okio.Base64.URL_MAP` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Base64;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1abbd0.  v1:= 64I;
  #L1abbd4.  v0:= new `byte`[v1];
  #L1abbd8.  goto L1abbf4;
  #L1abbde.  `@@okio.Base64.MAP` @type ^`byte`[] := v0 @kind object;
  #L1abbe2.  v0:= new `byte`[v1];
  #L1abbe6.  goto L1abc3c;
  #L1abbec.  `@@okio.Base64.URL_MAP` @type ^`byte`[] := v0 @kind object;
  #L1abbf0.  return @kind void;
  #L1abbf2.  
  #L1abbf4.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 43I, 47I) @kind object;
  #L1abc3b.  goto L1abbde;
  #L1abc3c.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 45I, 95I) @kind object;
  #L1abc83.  goto L1abbec;
}
procedure `void` `<init>`(`okio.Base64` v0 @kind this) @signature `Lokio/Base64;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1abc94.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1abc9a.  return @kind void;
}
procedure `byte`[] `decode`(`java.lang.String` v18 @kind object @name `in`) @signature `Lokio/Base64;.decode:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L1abcac.  call temp:= `length`(v18) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1abcb2.  v6:= temp;
  #L1abcb4.  if v6 <= 0 then goto L1abcf0;
  #L1abcb8.  v13:= v6 + -1;
  #L1abcbc.  v0:= v18 @kind object;
  #L1abcc0.  call temp:= `charAt`(v0, v13) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1abcc6.  v3:= temp;
  #L1abcc8.  v13:= 61I;
  #L1abccc.  if v3 == v13 then goto L1abd7a;
  #L1abcd0.  v13:= 10I;
  #L1abcd4.  if v3 == v13 then goto L1abd7a;
  #L1abcd8.  v13:= 13I;
  #L1abcdc.  if v3 == v13 then goto L1abd7a;
  #L1abce0.  v13:= 32I;
  #L1abce4.  if v3 == v13 then goto L1abd7a;
  #L1abce8.  v13:= 9I;
  #L1abcec.  if v3 == v13 then goto L1abd7a;
  #L1abcf0.  v14:= (`long`) v6 @kind i2l;
  #L1abcf2.  v16:= 6L;
  #L1abcf6.  v14:= v14 * v16 @kind long;
  #L1abcfa.  v16:= 8L;
  #L1abcfe.  v14:= v14 / v16 @kind long;
  #L1abd02.  v13:= (`int`) v14 @kind l2i;
  #L1abd04.  v7:= new `byte`[v13];
  #L1abd08.  v8:= 0I;
  #L1abd0a.  v4:= 0I;
  #L1abd0c.  v12:= 0I;
  #L1abd0e.  v10:= 0I;
  #L1abd10.  v9:= v8;
  #L1abd12.  if v10 >= v6 then goto L1abe02;
  #L1abd16.  v0:= v18 @kind object;
  #L1abd1a.  call temp:= `charAt`(v0, v10) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1abd20.  v3:= temp;
  #L1abd22.  v13:= 65I;
  #L1abd26.  if v3 < v13 then goto L1abd80;
  #L1abd2a.  v13:= 90I;
  #L1abd2e.  if v3 > v13 then goto L1abd80;
  #L1abd32.  v2:= v3 + -65;
  #L1abd36.  v13:= v12 ^< 6;
  #L1abd3a.  v14:= (`byte`) v2 @kind i2b;
  #L1abd3c.  v12:= v13 ^| v14 @kind int;
  #L1abd40.  v4:= v4 + 1;
  #L1abd44.  v13:= v4 %% 4;
  #L1abd48.  if v13 != 0 then goto L1abe6c;
  #L1abd4c.  v8:= v9 + 1;
  #L1abd50.  v13:= v12 ^> 16;
  #L1abd54.  v13:= (`byte`) v13 @kind i2b;
  #L1abd56.  v7[v9]:= v13 @kind byte;
  #L1abd5a.  v9:= v8 + 1;
  #L1abd5e.  v13:= v12 ^> 8;
  #L1abd62.  v13:= (`byte`) v13 @kind i2b;
  #L1abd64.  v7[v8]:= v13 @kind byte;
  #L1abd68.  v8:= v9 + 1;
  #L1abd6c.  v13:= (`byte`) v12 @kind i2b;
  #L1abd6e.  v7[v9]:= v13 @kind byte;
  #L1abd72.  v10:= v10 + 1;
  #L1abd76.  v9:= v8;
  #L1abd78.  goto L1abd12;
  #L1abd7a.  v6:= v6 + -1;
  #L1abd7e.  goto L1abcb4;
  #L1abd80.  v13:= 97I;
  #L1abd84.  if v3 < v13 then goto L1abd96;
  #L1abd88.  v13:= 122I;
  #L1abd8c.  if v3 > v13 then goto L1abd96;
  #L1abd90.  v2:= v3 + -71;
  #L1abd94.  goto L1abd36;
  #L1abd96.  v13:= 48I;
  #L1abd9a.  if v3 < v13 then goto L1abdac;
  #L1abd9e.  v13:= 57I;
  #L1abda2.  if v3 > v13 then goto L1abdac;
  #L1abda6.  v2:= v3 + 4;
  #L1abdaa.  goto L1abd36;
  #L1abdac.  v13:= 43I;
  #L1abdb0.  if v3 == v13 then goto L1abdbc;
  #L1abdb4.  v13:= 45I;
  #L1abdb8.  if v3 != v13 then goto L1abdc2;
  #L1abdbc.  v2:= 62I;
  #L1abdc0.  goto L1abd36;
  #L1abdc2.  v13:= 47I;
  #L1abdc6.  if v3 == v13 then goto L1abdd2;
  #L1abdca.  v13:= 95I;
  #L1abdce.  if v3 != v13 then goto L1abdd8;
  #L1abdd2.  v2:= 63I;
  #L1abdd6.  goto L1abd36;
  #L1abdd8.  v13:= 10I;
  #L1abddc.  if v3 == v13 then goto L1abe6c;
  #L1abde0.  v13:= 13I;
  #L1abde4.  if v3 == v13 then goto L1abe6c;
  #L1abde8.  v13:= 32I;
  #L1abdec.  if v3 == v13 then goto L1abe6c;
  #L1abdf0.  v13:= 9I;
  #L1abdf4.  if v3 != v13 then goto L1abdfc;
  #L1abdf8.  v8:= v9;
  #L1abdfa.  goto L1abd72;
  #L1abdfc.  v7:= 0I;
  #L1abdfe.  v8:= v9;
  #L1abe00.  return v7 @kind object;
  #L1abe02.  v5:= v4 %% 4;
  #L1abe06.  v13:= 1I;
  #L1abe08.  if v5 != v13 then goto L1abe12;
  #L1abe0c.  v7:= 0I;
  #L1abe0e.  v8:= v9;
  #L1abe10.  goto L1abe00;
  #L1abe12.  v13:= 2I;
  #L1abe14.  if v5 != v13 then goto L1abe42;
  #L1abe18.  v12:= v12 ^< 12;
  #L1abe1c.  v8:= v9 + 1;
  #L1abe20.  v13:= v12 ^> 16;
  #L1abe24.  v13:= (`byte`) v13 @kind i2b;
  #L1abe26.  v7[v9]:= v13 @kind byte;
  #L1abe2a.  v13:= length @variable v7;
  #L1abe2c.  if v8 == v13 then goto L1abe00;
  #L1abe30.  v11:= new `byte`[v8];
  #L1abe34.  v13:= 0I;
  #L1abe36.  v14:= 0I;
  #L1abe38.  call `arraycopy`(v7, v13, v11, v14, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1abe3e.  v7:= v11 @kind object;
  #L1abe40.  goto L1abe00;
  #L1abe42.  v13:= 3I;
  #L1abe44.  if v5 != v13 then goto L1abe68;
  #L1abe48.  v12:= v12 ^< 6;
  #L1abe4c.  v8:= v9 + 1;
  #L1abe50.  v13:= v12 ^> 16;
  #L1abe54.  v13:= (`byte`) v13 @kind i2b;
  #L1abe56.  v7[v9]:= v13 @kind byte;
  #L1abe5a.  v9:= v8 + 1;
  #L1abe5e.  v13:= v12 ^> 8;
  #L1abe62.  v13:= (`byte`) v13 @kind i2b;
  #L1abe64.  v7[v8]:= v13 @kind byte;
  #L1abe68.  v8:= v9;
  #L1abe6a.  goto L1abe2a;
  #L1abe6c.  v8:= v9;
  #L1abe6e.  goto L1abd72;
}
procedure `java.lang.String` `encode`(`byte`[] v1 @kind object @name `in`) @signature `Lokio/Base64;.encode:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1abe80.  v0:= `@@okio.Base64.MAP` @type ^`byte`[] @kind object;
  #L1abe84.  call temp:= `encode`(v1, v0) @signature `Lokio/Base64;.encode:([B[B)Ljava/lang/String;` @kind static;
  #L1abe8a.  v0:= temp @kind object;
  #L1abe8c.  return v0 @kind object;
}
procedure `java.lang.String` `encode`(`byte`[] v10 @kind object @name `in`, `byte`[] v11 @kind object @name `map`) @signature `Lokio/Base64;.encode:([B[B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1abea0.  v9:= 61I;
  #L1abea4.  v7:= length @variable v10;
  #L1abea6.  v7:= v7 + 2;
  #L1abeaa.  v7:= v7 / 3;
  #L1abeae.  v5:= v7 * 4;
  #L1abeb2.  v6:= new `byte`[v5];
  #L1abeb6.  v3:= 0I;
  #L1abeb8.  v7:= length @variable v10;
  #L1abeba.  v8:= length @variable v10;
  #L1abebc.  v8:= v8 %% 3;
  #L1abec0.  v1:= v7 - v8 @kind int;
  #L1abec4.  v2:= 0I;
  #L1abec6.  v4:= v3;
  #L1abec8.  if v2 >= v1 then goto L1abf5a;
  #L1abecc.  v3:= v4 + 1;
  #L1abed0.  v7:= v10[v2] @kind byte;
  #L1abed4.  v7:= v7 ^& 255;
  #L1abed8.  v7:= v7 ^> 2;
  #L1abedc.  v7:= v11[v7] @kind byte;
  #L1abee0.  v6[v4]:= v7 @kind byte;
  #L1abee4.  v4:= v3 + 1;
  #L1abee8.  v7:= v10[v2] @kind byte;
  #L1abeec.  v7:= v7 ^& 3;
  #L1abef0.  v7:= v7 ^< 4;
  #L1abef4.  v8:= v2 + 1;
  #L1abef8.  v8:= v10[v8] @kind byte;
  #L1abefc.  v8:= v8 ^& 255;
  #L1abf00.  v8:= v8 ^> 4;
  #L1abf04.  v7:= v7 ^| v8 @kind int;
  #L1abf06.  v7:= v11[v7] @kind byte;
  #L1abf0a.  v6[v3]:= v7 @kind byte;
  #L1abf0e.  v3:= v4 + 1;
  #L1abf12.  v7:= v2 + 1;
  #L1abf16.  v7:= v10[v7] @kind byte;
  #L1abf1a.  v7:= v7 ^& 15;
  #L1abf1e.  v7:= v7 ^< 2;
  #L1abf22.  v8:= v2 + 2;
  #L1abf26.  v8:= v10[v8] @kind byte;
  #L1abf2a.  v8:= v8 ^& 255;
  #L1abf2e.  v8:= v8 ^> 6;
  #L1abf32.  v7:= v7 ^| v8 @kind int;
  #L1abf34.  v7:= v11[v7] @kind byte;
  #L1abf38.  v6[v4]:= v7 @kind byte;
  #L1abf3c.  v4:= v3 + 1;
  #L1abf40.  v7:= v2 + 2;
  #L1abf44.  v7:= v10[v7] @kind byte;
  #L1abf48.  v7:= v7 ^& 63;
  #L1abf4c.  v7:= v11[v7] @kind byte;
  #L1abf50.  v6[v3]:= v7 @kind byte;
  #L1abf54.  v2:= v2 + 3;
  #L1abf58.  goto L1abec8;
  #L1abf5a.  v7:= length @variable v10;
  #L1abf5c.  v7:= v7 %% 3;
  #L1abf60.  goto L1ac034;
  #L1abf66.  v3:= v4;
  #Try_start0.  
  #L1abf68.  v7:= new `java.lang.String`;
  #L1abf6c.  v8:= "US-ASCII" @kind object;
  #L1abf70.  call `<init>`(v7, v6, v8) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #Try_end0.  
  #L1abf76.  return v7 @kind object;
  #L1abf78.  v3:= v4 + 1;
  #L1abf7c.  v7:= v10[v1] @kind byte;
  #L1abf80.  v7:= v7 ^& 255;
  #L1abf84.  v7:= v7 ^> 2;
  #L1abf88.  v7:= v11[v7] @kind byte;
  #L1abf8c.  v6[v4]:= v7 @kind byte;
  #L1abf90.  v4:= v3 + 1;
  #L1abf94.  v7:= v10[v1] @kind byte;
  #L1abf98.  v7:= v7 ^& 3;
  #L1abf9c.  v7:= v7 ^< 4;
  #L1abfa0.  v7:= v11[v7] @kind byte;
  #L1abfa4.  v6[v3]:= v7 @kind byte;
  #L1abfa8.  v3:= v4 + 1;
  #L1abfac.  v6[v4]:= v9 @kind byte;
  #L1abfb0.  v4:= v3 + 1;
  #L1abfb4.  v6[v3]:= v9 @kind byte;
  #L1abfb8.  v3:= v4;
  #L1abfba.  goto L1abf68;
  #L1abfbc.  v3:= v4 + 1;
  #L1abfc0.  v7:= v10[v1] @kind byte;
  #L1abfc4.  v7:= v7 ^& 255;
  #L1abfc8.  v7:= v7 ^> 2;
  #L1abfcc.  v7:= v11[v7] @kind byte;
  #L1abfd0.  v6[v4]:= v7 @kind byte;
  #L1abfd4.  v4:= v3 + 1;
  #L1abfd8.  v7:= v10[v1] @kind byte;
  #L1abfdc.  v7:= v7 ^& 3;
  #L1abfe0.  v7:= v7 ^< 4;
  #L1abfe4.  v8:= v1 + 1;
  #L1abfe8.  v8:= v10[v8] @kind byte;
  #L1abfec.  v8:= v8 ^& 255;
  #L1abff0.  v8:= v8 ^> 4;
  #L1abff4.  v7:= v7 ^| v8 @kind int;
  #L1abff6.  v7:= v11[v7] @kind byte;
  #L1abffa.  v6[v3]:= v7 @kind byte;
  #L1abffe.  v3:= v4 + 1;
  #L1ac002.  v7:= v1 + 1;
  #L1ac006.  v7:= v10[v7] @kind byte;
  #L1ac00a.  v7:= v7 ^& 15;
  #L1ac00e.  v7:= v7 ^< 2;
  #L1ac012.  v7:= v11[v7] @kind byte;
  #L1ac016.  v6[v4]:= v7 @kind byte;
  #L1ac01a.  v4:= v3 + 1;
  #L1ac01e.  v6[v3]:= v9 @kind byte;
  #L1ac022.  goto L1abf66;
  #L1ac024.  v0:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L1ac026.  v7:= new `java.lang.AssertionError`;
  #L1ac02a.  call `<init>`(v7, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1ac030.  throw v7;
  #L1ac032.  
  #L1ac034.  switch v7
                  | 1 => goto L1abf78
                  | 2 => goto L1abfbc
                  | else => goto L1abf66;
  catch `java.io.UnsupportedEncodingException` @[Try_start0..Try_end0] goto L1ac024;
}
procedure `java.lang.String` `encodeUrl`(`byte`[] v1 @kind object @name `in`) @signature `Lokio/Base64;.encodeUrl:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1ac064.  v0:= `@@okio.Base64.URL_MAP` @type ^`byte`[] @kind object;
  #L1ac068.  call temp:= `encode`(v1, v0) @signature `Lokio/Base64;.encode:([B[B)Ljava/lang/String;` @kind static;
  #L1ac06e.  v0:= temp @kind object;
  #L1ac070.  return v0 @kind object;
}
