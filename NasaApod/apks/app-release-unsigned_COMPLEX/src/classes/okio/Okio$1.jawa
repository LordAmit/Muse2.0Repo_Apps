record `okio.Okio$1` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `java.io.OutputStream` `okio.Okio$1.val$out` @AccessFlag FINAL_SYNTHETIC;
  `okio.Timeout` `okio.Okio$1.val$timeout` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Okio$1` v0 @kind this, `okio.Timeout` v1 @kind object, `java.io.OutputStream` v2 @kind object) @signature `Lokio/Okio$1;.<init>:(Lokio/Timeout;Ljava/io/OutputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L21ee38.  v0.`okio.Okio$1.val$timeout` @type ^`okio.Timeout` := v1 @kind object;
  #L21ee3c.  v0.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` := v2 @kind object;
  #L21ee40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21ee46.  return @kind void;
}
procedure `void` `close`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21ee58.  v0:= v1.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L21ee5c.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L21ee62.  return @kind void;
}
procedure `void` `flush`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21ee74.  v0:= v1.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L21ee78.  call `flush`(v0) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L21ee7e.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21ee90.  v0:= v1.`okio.Okio$1.val$timeout` @type ^`okio.Timeout` @kind object;
  #L21ee94.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Okio$1` v2 @kind this) @signature `Lokio/Okio$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L21eea8.  v0:= new `java.lang.StringBuilder`;
  #L21eeac.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21eeb2.  v1:= "sink(" @kind object;
  #L21eeb6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21eebc.  v0:= temp @kind object;
  #L21eebe.  v1:= v2.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L21eec2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21eec8.  v0:= temp @kind object;
  #L21eeca.  v1:= ")" @kind object;
  #L21eece.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21eed4.  v0:= temp @kind object;
  #L21eed6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21eedc.  v0:= temp @kind object;
  #L21eede.  return v0 @kind object;
}
procedure `void` `write`(`okio.Okio$1` v8 @kind this, `okio.Buffer` v9 @kind object @name `source`, `long` v10 @name `byteCount`) @signature `Lokio/Okio$1;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L21eef0.  v2:= 0L;
  #L21eef4.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L21eef8.  v4:= v10 @kind wide;
  #L21eefa.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L21ef00.  v0:= lcmp(v10, v2);
  #L21ef04.  if v0 <= 0 then goto L21ef78;
  #L21ef08.  v0:= v8.`okio.Okio$1.val$timeout` @type ^`okio.Timeout` @kind object;
  #L21ef0c.  call `throwIfReached`(v0) @signature `Lokio/Timeout;.throwIfReached:()V` @kind virtual;
  #L21ef12.  v6:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L21ef16.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L21ef1a.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L21ef1e.  v0:= v0 - v1 @kind int;
  #L21ef20.  v0:= (`long`) v0 @kind i2l;
  #L21ef22.  call temp:= `min`(v10, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L21ef28.  v0:= temp @kind wide;
  #L21ef2a.  v7:= (`int`) v0 @kind l2i;
  #L21ef2c.  v0:= v8.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L21ef30.  v1:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L21ef34.  v4:= v6.`okio.Segment.pos` @type ^`int`;
  #L21ef38.  call `write`(v0, v1, v4, v7) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L21ef3e.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L21ef42.  v0:= v0 + v7 @kind int;
  #L21ef44.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L21ef48.  v0:= (`long`) v7 @kind i2l;
  #L21ef4a.  v10:= v10 - v0 @kind long;
  #L21ef4c.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L21ef50.  v4:= (`long`) v7 @kind i2l;
  #L21ef52.  v0:= v0 - v4 @kind long;
  #L21ef54.  v9.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L21ef58.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L21ef5c.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L21ef60.  if v0 != v1 then goto L21ef00;
  #L21ef64.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L21ef6a.  v0:= temp @kind object;
  #L21ef6c.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L21ef70.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L21ef76.  goto L21ef00;
  #L21ef78.  return @kind void;
}
