record `okio.Pipe$PipeSink` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `okio.Pipe` `okio.Pipe$PipeSink.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okio.Timeout` `okio.Pipe$PipeSink.timeout` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okio.Pipe$PipeSink` v1 @kind this, `okio.Pipe` v2 @kind object @name `this$0`) @signature `Lokio/Pipe$PipeSink;.<init>:(Lokio/Pipe;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L21f180.  v1.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` := v2 @kind object;
  #L21f184.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21f18a.  v0:= new `okio.Timeout`;
  #L21f18e.  call `<init>`(v0) @signature `Lokio/Timeout;.<init>:()V` @kind direct;
  #L21f194.  v1.`okio.Pipe$PipeSink.timeout` @type ^`okio.Timeout` := v0 @kind object;
  #L21f198.  return @kind void;
}
procedure `void` `close`(`okio.Pipe$PipeSink` v6 @kind this) @signature `Lokio/Pipe$PipeSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L21f1ac.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f1b0.  v1:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21f1b4.  @monitorenter v1
  #Try_start0.  
  #L21f1b6.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f1ba.  v0:= v0.`okio.Pipe.sinkClosed` @type ^`boolean` @kind boolean;
  #L21f1be.  if v0 == 0 then goto L21f1c6;
  #L21f1c2.  @monitorexit v1
  #L21f1c4.  return @kind void;
  #L21f1c6.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f1ca.  v0:= v0.`okio.Pipe.sourceClosed` @type ^`boolean` @kind boolean;
  #L21f1ce.  if v0 == 0 then goto L21f204;
  #L21f1d2.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f1d6.  v0:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21f1da.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L21f1e0.  v2:= temp @kind wide;
  #L21f1e2.  v4:= 0L;
  #L21f1e6.  v0:= lcmp(v2, v4);
  #L21f1ea.  if v0 <= 0 then goto L21f204;
  #L21f1ee.  v0:= new `java.io.IOException`;
  #L21f1f2.  v2:= "source is closed" @kind object;
  #L21f1f6.  call `<init>`(v0, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21f1fc.  throw v0;
  #L21f1fe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21f200.  @monitorexit v1
  #Try_end0.  
  #L21f202.  throw v0;
  #Try_start1.  
  #L21f204.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f208.  v2:= 1I;
  #L21f20a.  v0.`okio.Pipe.sinkClosed` @type ^`boolean` := v2 @kind boolean;
  #L21f20e.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f212.  v0:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21f216.  call `notifyAll`(v0) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L21f21c.  @monitorexit v1
  #Try_end1.  
  #L21f21e.  goto L21f1c4;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L21f1fe;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L21f1fe;
}
procedure `void` `flush`(`okio.Pipe$PipeSink` v6 @kind this) @signature `Lokio/Pipe$PipeSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L21f244.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f248.  v1:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21f24c.  @monitorenter v1
  #Try_start0.  
  #L21f24e.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f252.  v0:= v0.`okio.Pipe.sinkClosed` @type ^`boolean` @kind boolean;
  #L21f256.  if v0 == 0 then goto L21f270;
  #L21f25a.  v0:= new `java.lang.IllegalStateException`;
  #L21f25e.  v2:= "closed" @kind object;
  #L21f262.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21f268.  throw v0;
  #L21f26a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21f26c.  @monitorexit v1
  #Try_end0.  
  #L21f26e.  throw v0;
  #Try_start1.  
  #L21f270.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f274.  v0:= v0.`okio.Pipe.sourceClosed` @type ^`boolean` @kind boolean;
  #L21f278.  if v0 == 0 then goto L21f2a8;
  #L21f27c.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f280.  v0:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21f284.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L21f28a.  v2:= temp @kind wide;
  #L21f28c.  v4:= 0L;
  #L21f290.  v0:= lcmp(v2, v4);
  #L21f294.  if v0 <= 0 then goto L21f2a8;
  #L21f298.  v0:= new `java.io.IOException`;
  #L21f29c.  v2:= "source is closed" @kind object;
  #L21f2a0.  call `<init>`(v0, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21f2a6.  throw v0;
  #L21f2a8.  @monitorexit v1
  #Try_end1.  
  #L21f2aa.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L21f26a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L21f26a;
}
procedure `okio.Timeout` `timeout`(`okio.Pipe$PipeSink` v1 @kind this) @signature `Lokio/Pipe$PipeSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21f2d0.  v0:= v1.`okio.Pipe$PipeSink.timeout` @type ^`okio.Timeout` @kind object;
  #L21f2d4.  return v0 @kind object;
}
procedure `void` `write`(`okio.Pipe$PipeSink` v12 @kind this, `okio.Buffer` v13 @kind object @name `source`, `long` v14 @name `byteCount`) @signature `Lokio/Pipe$PipeSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L21f2e8.  v10:= 0L;
  #L21f2ec.  v4:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f2f0.  v5:= v4.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21f2f4.  @monitorenter v5
  #Try_start0.  
  #L21f2f6.  v4:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f2fa.  v4:= v4.`okio.Pipe.sinkClosed` @type ^`boolean` @kind boolean;
  #L21f2fe.  if v4 == 0 then goto L21f34e;
  #L21f302.  v4:= new `java.lang.IllegalStateException`;
  #L21f306.  v6:= "closed" @kind object;
  #L21f30a.  call `<init>`(v4, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21f310.  throw v4;
  #L21f312.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21f314.  @monitorexit v5
  #Try_end0.  
  #L21f316.  throw v4;
  #Try_start1.  
  #L21f318.  v4:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f31c.  v6:= v4.`okio.Pipe.maxBufferSize` @type ^`long` @kind wide;
  #L21f320.  v4:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f324.  v4:= v4.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21f328.  call temp:= `size`(v4) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L21f32e.  v8:= temp @kind wide;
  #L21f330.  v0:= v6 - v8 @kind long;
  #L21f334.  v4:= lcmp(v0, v10);
  #L21f338.  if v4 != 0 then goto L21f372;
  #L21f33c.  v4:= v12.`okio.Pipe$PipeSink.timeout` @type ^`okio.Timeout` @kind object;
  #L21f340.  v6:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f344.  v6:= v6.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21f348.  call `waitUntilNotified`(v4, v6) @signature `Lokio/Timeout;.waitUntilNotified:(Ljava/lang/Object;)V` @kind virtual;
  #L21f34e.  v4:= lcmp(v14, v10);
  #L21f352.  if v4 <= 0 then goto L21f39a;
  #L21f356.  v4:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f35a.  v4:= v4.`okio.Pipe.sourceClosed` @type ^`boolean` @kind boolean;
  #L21f35e.  if v4 == 0 then goto L21f318;
  #L21f362.  v4:= new `java.io.IOException`;
  #L21f366.  v6:= "source is closed" @kind object;
  #L21f36a.  call `<init>`(v4, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21f370.  throw v4;
  #L21f372.  call temp:= `min`(v0, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L21f378.  v2:= temp @kind wide;
  #L21f37a.  v4:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f37e.  v4:= v4.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21f382.  call `write`(v4, v13, v2) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L21f388.  v14:= v14 - v2 @kind long;
  #L21f38a.  v4:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21f38e.  v4:= v4.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21f392.  call `notifyAll`(v4) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L21f398.  goto L21f34e;
  #L21f39a.  @monitorexit v5
  #Try_end1.  
  #L21f39c.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L21f312;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L21f312;
}
