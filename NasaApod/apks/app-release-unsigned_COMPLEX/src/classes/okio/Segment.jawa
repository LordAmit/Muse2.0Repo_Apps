record `okio.Segment` @kind class @AccessFlag FINAL {
  `byte`[] `okio.Segment.data` @AccessFlag FINAL;
  `int` `okio.Segment.limit` @AccessFlag ;
  `okio.Segment` `okio.Segment.next` @AccessFlag ;
  `boolean` `okio.Segment.owner` @AccessFlag ;
  `int` `okio.Segment.pos` @AccessFlag ;
  `okio.Segment` `okio.Segment.prev` @AccessFlag ;
  `boolean` `okio.Segment.shared` @AccessFlag ;
}
global `int` `@@okio.Segment.SHARE_MINIMUM` @AccessFlag STATIC_FINAL;
global `int` `@@okio.Segment.SIZE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okio.Segment` v1 @kind this) @signature `Lokio/Segment;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1ae0c4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ae0ca.  v0:= 8192I;
  #L1ae0ce.  v0:= new `byte`[v0];
  #L1ae0d2.  v1.`okio.Segment.data` @type ^`byte`[] := v0 @kind object;
  #L1ae0d6.  v0:= 1I;
  #L1ae0d8.  v1.`okio.Segment.owner` @type ^`boolean` := v0 @kind boolean;
  #L1ae0dc.  v0:= 0I;
  #L1ae0de.  v1.`okio.Segment.shared` @type ^`boolean` := v0 @kind boolean;
  #L1ae0e2.  return @kind void;
}
procedure `void` `<init>`(`okio.Segment` v0 @kind this, `byte`[] v1 @kind object @name `data`, `int` v2 @name `pos`, `int` v3 @name `limit`, `boolean` v4 @name `shared`, `boolean` v5 @name `owner`) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1ae0f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ae0fa.  v0.`okio.Segment.data` @type ^`byte`[] := v1 @kind object;
  #L1ae0fe.  v0.`okio.Segment.pos` @type ^`int` := v2;
  #L1ae102.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L1ae106.  v0.`okio.Segment.shared` @type ^`boolean` := v4 @kind boolean;
  #L1ae10a.  v0.`okio.Segment.owner` @type ^`boolean` := v5 @kind boolean;
  #L1ae10e.  return @kind void;
}
procedure `void` `compact`(`okio.Segment` v4 @kind this) @signature `Lokio/Segment;.compact:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ae120.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ae124.  if v2 != v4 then goto L1ae134;
  #L1ae128.  v2:= new `java.lang.IllegalStateException`;
  #L1ae12c.  call `<init>`(v2) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1ae132.  throw v2;
  #L1ae134.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ae138.  v2:= v2.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L1ae13c.  if v2 != 0 then goto L1ae142;
  #L1ae140.  return @kind void;
  #L1ae142.  v2:= v4.`okio.Segment.limit` @type ^`int`;
  #L1ae146.  v3:= v4.`okio.Segment.pos` @type ^`int`;
  #L1ae14a.  v1:= v2 - v3 @kind int;
  #L1ae14e.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ae152.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L1ae156.  v3:= v2 - 8192;
  #L1ae15a.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ae15e.  v2:= v2.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L1ae162.  if v2 == 0 then goto L1ae188;
  #L1ae166.  v2:= 0I;
  #L1ae168.  v0:= v3 + v2 @kind int;
  #L1ae16c.  if v1 > v0 then goto L1ae140;
  #L1ae170.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ae174.  call `writeTo`(v4, v2, v1) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L1ae17a.  call temp:= `pop`(v4) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1ae180.  call `recycle`(v4) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1ae186.  goto L1ae140;
  #L1ae188.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ae18c.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L1ae190.  goto L1ae168;
}
procedure `okio.Segment` `pop`(`okio.Segment` v4 @kind this) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ae1a4.  v1:= 0I;
  #L1ae1a6.  v2:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1ae1aa.  if v2 == v4 then goto L1ae1d4;
  #L1ae1ae.  v0:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1ae1b2.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ae1b6.  v3:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1ae1ba.  v2.`okio.Segment.next` @type ^`okio.Segment` := v3 @kind object;
  #L1ae1be.  v2:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1ae1c2.  v3:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ae1c6.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v3 @kind object;
  #L1ae1ca.  v4.`okio.Segment.next` @type ^`okio.Segment` := v1 @kind object;
  #L1ae1ce.  v4.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L1ae1d2.  return v0 @kind object;
  #L1ae1d4.  v0:= v1 @kind object;
  #L1ae1d6.  goto L1ae1b2;
}
procedure `okio.Segment` `push`(`okio.Segment` v1 @kind this, `okio.Segment` v2 @kind object @name `segment`) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ae1e8.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L1ae1ec.  v0:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1ae1f0.  v2.`okio.Segment.next` @type ^`okio.Segment` := v0 @kind object;
  #L1ae1f4.  v0:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1ae1f8.  v0.`okio.Segment.prev` @type ^`okio.Segment` := v2 @kind object;
  #L1ae1fc.  v1.`okio.Segment.next` @type ^`okio.Segment` := v2 @kind object;
  #L1ae200.  return v2 @kind object;
}
procedure `okio.Segment` `sharedCopy`(`okio.Segment` v6 @kind this) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ae214.  v4:= 1I;
  #L1ae216.  v6.`okio.Segment.shared` @type ^`boolean` := v4 @kind boolean;
  #L1ae21a.  v0:= new `okio.Segment`;
  #L1ae21e.  v1:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ae222.  v2:= v6.`okio.Segment.pos` @type ^`int`;
  #L1ae226.  v3:= v6.`okio.Segment.limit` @type ^`int`;
  #L1ae22a.  v5:= 0I;
  #L1ae22c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @kind direct;
  #L1ae232.  return v0 @kind object;
}
procedure `okio.Segment` `split`(`okio.Segment` v5 @kind this, `int` v6 @name `byteCount`) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1ae244.  if v6 <= 0 then goto L1ae256;
  #L1ae248.  v1:= v5.`okio.Segment.limit` @type ^`int`;
  #L1ae24c.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ae250.  v1:= v1 - v2 @kind int;
  #L1ae252.  if v6 <= v1 then goto L1ae262;
  #L1ae256.  v1:= new `java.lang.IllegalArgumentException`;
  #L1ae25a.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1ae260.  throw v1;
  #L1ae262.  v1:= 1024I;
  #L1ae266.  if v6 < v1 then goto L1ae292;
  #L1ae26a.  call temp:= `sharedCopy`(v5) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L1ae270.  v0:= temp @kind object;
  #L1ae272.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1ae276.  v1:= v1 + v6 @kind int;
  #L1ae278.  v0.`okio.Segment.limit` @type ^`int` := v1;
  #L1ae27c.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ae280.  v1:= v1 + v6 @kind int;
  #L1ae282.  v5.`okio.Segment.pos` @type ^`int` := v1;
  #L1ae286.  v1:= v5.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ae28a.  call temp:= `push`(v1, v0) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1ae290.  return v0 @kind object;
  #L1ae292.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L1ae298.  v0:= temp @kind object;
  #L1ae29a.  v1:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ae29e.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ae2a2.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ae2a6.  v4:= 0I;
  #L1ae2a8.  call `arraycopy`(v1, v2, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ae2ae.  goto L1ae272;
}
procedure `okio.Segment` `unsharedCopy`(`okio.Segment` v6 @kind this) @signature `Lokio/Segment;.unsharedCopy:()Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ae2c0.  v0:= new `okio.Segment`;
  #L1ae2c4.  v1:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ae2c8.  call temp:= `clone`(v1) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L1ae2ce.  v1:= temp @kind object;
  #L1ae2d0.  v1:= (`byte`[]) v1 @kind object;
  #L1ae2d4.  v2:= v6.`okio.Segment.pos` @type ^`int`;
  #L1ae2d8.  v3:= v6.`okio.Segment.limit` @type ^`int`;
  #L1ae2dc.  v4:= 0I;
  #L1ae2de.  v5:= 1I;
  #L1ae2e0.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @kind direct;
  #L1ae2e6.  return v0 @kind object;
}
procedure `void` `writeTo`(`okio.Segment` v6 @kind this, `okio.Segment` v7 @kind object @name `sink`, `int` v8 @name `byteCount`) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ae2f8.  v2:= 8192I;
  #L1ae2fc.  v5:= 0I;
  #L1ae2fe.  v0:= v7.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L1ae302.  if v0 != 0 then goto L1ae312;
  #L1ae306.  v0:= new `java.lang.IllegalArgumentException`;
  #L1ae30a.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1ae310.  throw v0;
  #L1ae312.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L1ae316.  v0:= v0 + v8 @kind int;
  #L1ae318.  if v0 <= v2 then goto L1ae37a;
  #L1ae31c.  v0:= v7.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L1ae320.  if v0 == 0 then goto L1ae330;
  #L1ae324.  v0:= new `java.lang.IllegalArgumentException`;
  #L1ae328.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1ae32e.  throw v0;
  #L1ae330.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L1ae334.  v0:= v0 + v8 @kind int;
  #L1ae336.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L1ae33a.  v0:= v0 - v1 @kind int;
  #L1ae33c.  if v0 <= v2 then goto L1ae34c;
  #L1ae340.  v0:= new `java.lang.IllegalArgumentException`;
  #L1ae344.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1ae34a.  throw v0;
  #L1ae34c.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ae350.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L1ae354.  v2:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ae358.  v3:= v7.`okio.Segment.limit` @type ^`int`;
  #L1ae35c.  v4:= v7.`okio.Segment.pos` @type ^`int`;
  #L1ae360.  v3:= v3 - v4 @kind int;
  #L1ae362.  call `arraycopy`(v0, v1, v2, v5, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ae368.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L1ae36c.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L1ae370.  v0:= v0 - v1 @kind int;
  #L1ae372.  v7.`okio.Segment.limit` @type ^`int` := v0;
  #L1ae376.  v7.`okio.Segment.pos` @type ^`int` := v5;
  #L1ae37a.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ae37e.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L1ae382.  v2:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ae386.  v3:= v7.`okio.Segment.limit` @type ^`int`;
  #L1ae38a.  call `arraycopy`(v0, v1, v2, v3, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1ae390.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L1ae394.  v0:= v0 + v8 @kind int;
  #L1ae396.  v7.`okio.Segment.limit` @type ^`int` := v0;
  #L1ae39a.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L1ae39e.  v0:= v0 + v8 @kind int;
  #L1ae3a0.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L1ae3a4.  return @kind void;
}
