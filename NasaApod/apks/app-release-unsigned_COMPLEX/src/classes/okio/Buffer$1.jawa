record `okio.Buffer$1` @kind class @AccessFlag  extends `java.io.OutputStream` @kind class {
  `okio.Buffer` `okio.Buffer$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Buffer$1` v0 @kind this, `okio.Buffer` v1 @kind object @name `this$0`) @signature `Lokio/Buffer$1;.<init>:(Lokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1ac084.  v0.`okio.Buffer$1.this$0` @type ^`okio.Buffer` := v1 @kind object;
  #L1ac088.  call `<init>`(v0) @signature `Ljava/io/OutputStream;.<init>:()V` @kind direct;
  #L1ac08e.  return @kind void;
}
procedure `void` `close`(`okio.Buffer$1` v0 @kind this) @signature `Lokio/Buffer$1;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L1ac0a0.  return @kind void;
}
procedure `void` `flush`(`okio.Buffer$1` v0 @kind this) @signature `Lokio/Buffer$1;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L1ac0b4.  return @kind void;
}
procedure `java.lang.String` `toString`(`okio.Buffer$1` v2 @kind this) @signature `Lokio/Buffer$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ac0c8.  v0:= new `java.lang.StringBuilder`;
  #L1ac0cc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ac0d2.  v1:= v2.`okio.Buffer$1.this$0` @type ^`okio.Buffer` @kind object;
  #L1ac0d6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ac0dc.  v0:= temp @kind object;
  #L1ac0de.  v1:= ".outputStream()" @kind object;
  #L1ac0e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ac0e8.  v0:= temp @kind object;
  #L1ac0ea.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ac0f0.  v0:= temp @kind object;
  #L1ac0f2.  return v0 @kind object;
}
procedure `void` `write`(`okio.Buffer$1` v2 @kind this, `int` v3 @name `b`) @signature `Lokio/Buffer$1;.write:(I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ac104.  v0:= v2.`okio.Buffer$1.this$0` @type ^`okio.Buffer` @kind object;
  #L1ac108.  v1:= (`byte`) v3 @kind i2b;
  #L1ac10a.  call temp:= `writeByte`(v0, v1) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1ac110.  return @kind void;
}
procedure `void` `write`(`okio.Buffer$1` v1 @kind this, `byte`[] v2 @kind object @name `data`, `int` v3 @name `offset`, `int` v4 @name `byteCount`) @signature `Lokio/Buffer$1;.write:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ac124.  v0:= v1.`okio.Buffer$1.this$0` @type ^`okio.Buffer` @kind object;
  #L1ac128.  call temp:= `write`(v0, v2, v3, v4) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L1ac12e.  return @kind void;
}
