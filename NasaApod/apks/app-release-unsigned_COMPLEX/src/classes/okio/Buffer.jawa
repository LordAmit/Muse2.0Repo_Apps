record `okio.Buffer` @kind class @AccessFlag PUBLIC_FINAL extends `okio.BufferedSource` @kind interface, `okio.BufferedSink` @kind interface, `java.lang.Cloneable` @kind interface, `java.nio.channels.ByteChannel` @kind interface {
  `okio.Segment` `okio.Buffer.head` @AccessFlag ;
  `long` `okio.Buffer.size` @AccessFlag ;
}
global `byte`[] `@@okio.Buffer.DIGITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okio.Buffer.REPLACEMENT_CHARACTER` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Buffer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L245dc0.  v0:= 16I;
  #L245dc4.  v0:= new `byte`[v0];
  #L245dc8.  goto L245dd4;
  #L245dce.  `@@okio.Buffer.DIGITS` @type ^`byte`[] := v0 @kind object;
  #L245dd2.  return @kind void;
  #L245dd4.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L245deb.  goto L245dce;
}
procedure `void` `<init>`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L245dfc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L245e02.  return @kind void;
}
procedure `okio.ByteString` `digest`(`okio.Buffer` v7 @kind this, `java.lang.String` v8 @kind object @name `algorithm`) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #Try_start0.  
  #L245e14.  call temp:= `getInstance`(v8) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L245e1a.  v1:= temp @kind object;
  #L245e1c.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245e20.  if v3 == 0 then goto L245e7a;
  #L245e24.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245e28.  v3:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245e2c.  v4:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245e30.  v4:= v4.`okio.Segment.pos` @type ^`int`;
  #L245e34.  v5:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245e38.  v5:= v5.`okio.Segment.limit` @type ^`int`;
  #L245e3c.  v6:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245e40.  v6:= v6.`okio.Segment.pos` @type ^`int`;
  #L245e44.  v5:= v5 - v6 @kind int;
  #L245e46.  call `update`(v1, v3, v4, v5) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L245e4c.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245e50.  v2:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245e54.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245e58.  if v2 == v3 then goto L245e7a;
  #L245e5c.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245e60.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L245e64.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L245e68.  v6:= v2.`okio.Segment.pos` @type ^`int`;
  #L245e6c.  v5:= v5 - v6 @kind int;
  #L245e6e.  call `update`(v1, v3, v4, v5) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L245e74.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245e78.  goto L245e54;
  #L245e7a.  call temp:= `digest`(v1) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L245e80.  v3:= temp @kind object;
  #L245e82.  call temp:= `of`(v3) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #Try_end0.  
  #L245e88.  v3:= temp @kind object;
  #L245e8a.  return v3 @kind object;
  #L245e8c.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L245e8e.  v3:= new `java.lang.AssertionError`;
  #L245e92.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L245e98.  throw v3;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L245e8c;
}
procedure `okio.ByteString` `hmac`(`okio.Buffer` v7 @kind this, `java.lang.String` v8 @kind object @name `algorithm`, `okio.ByteString` v9 @kind object @name `key`) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #Try_start0.  
  #L245ebc.  call temp:= `getInstance`(v8) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L245ec2.  v1:= temp @kind object;
  #L245ec4.  v3:= new `javax.crypto.spec.SecretKeySpec`;
  #L245ec8.  call temp:= `toByteArray`(v9) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L245ece.  v4:= temp @kind object;
  #L245ed0.  call `<init>`(v3, v4, v8) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L245ed6.  call `init`(v1, v3) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L245edc.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245ee0.  if v3 == 0 then goto L245f3a;
  #L245ee4.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245ee8.  v3:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245eec.  v4:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245ef0.  v4:= v4.`okio.Segment.pos` @type ^`int`;
  #L245ef4.  v5:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245ef8.  v5:= v5.`okio.Segment.limit` @type ^`int`;
  #L245efc.  v6:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245f00.  v6:= v6.`okio.Segment.pos` @type ^`int`;
  #L245f04.  v5:= v5 - v6 @kind int;
  #L245f06.  call `update`(v1, v3, v4, v5) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L245f0c.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245f10.  v2:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245f14.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245f18.  if v2 == v3 then goto L245f3a;
  #L245f1c.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245f20.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L245f24.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L245f28.  v6:= v2.`okio.Segment.pos` @type ^`int`;
  #L245f2c.  v5:= v5 - v6 @kind int;
  #L245f2e.  call `update`(v1, v3, v4, v5) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L245f34.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245f38.  goto L245f14;
  #L245f3a.  call temp:= `doFinal`(v1) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L245f40.  v3:= temp @kind object;
  #L245f42.  call temp:= `of`(v3) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #Try_end0.  
  #L245f48.  v3:= temp @kind object;
  #L245f4a.  return v3 @kind object;
  #L245f4c.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L245f4e.  v3:= new `java.lang.AssertionError`;
  #L245f52.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L245f58.  throw v3;
  #L245f5a.  v0:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L245f5c.  v3:= new `java.lang.IllegalArgumentException`;
  #L245f60.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L245f66.  throw v3;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L245f4c;
  catch `java.security.InvalidKeyException` @[Try_start0..Try_end0] goto L245f5a;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v5 @kind this, `okio.Segment` v6 @kind object @name `segment`, `int` v7 @name `segmentPos`, `okio.ByteString` v8 @kind object @name `bytes`, `int` v9 @name `bytesOffset`, `int` v10 @name `bytesLimit`) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L245f88.  v2:= v6.`okio.Segment.limit` @type ^`int`;
  #L245f8c.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245f90.  v1:= v9;
  #L245f92.  if v1 >= v10 then goto L245fc8;
  #L245f96.  if v7 != v2 then goto L245faa;
  #L245f9a.  v6:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245f9e.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245fa2.  v7:= v6.`okio.Segment.pos` @type ^`int`;
  #L245fa6.  v2:= v6.`okio.Segment.limit` @type ^`int`;
  #L245faa.  v3:= v0[v7] @kind byte;
  #L245fae.  call temp:= `getByte`(v8, v1) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L245fb4.  v4:= temp;
  #L245fb6.  if v3 == v4 then goto L245fbe;
  #L245fba.  v3:= 0I;
  #L245fbc.  return v3;
  #L245fbe.  v7:= v7 + 1;
  #L245fc2.  v1:= v1 + 1;
  #L245fc6.  goto L245f92;
  #L245fc8.  v3:= 1I;
  #L245fca.  goto L245fbc;
}
procedure `void` `readFrom`(`okio.Buffer` v8 @kind this, `java.io.InputStream` v9 @kind object @name `in`, `long` v10 @name `byteCount`, `boolean` v12 @name `forever`) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L245fdc.  if v9 != 0 then goto L24600a;
  #L245fe0.  v3:= new `java.lang.IllegalArgumentException`;
  #L245fe4.  v4:= "in == null" @kind object;
  #L245fe8.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L245fee.  throw v3;
  #L245ff0.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L245ff4.  v3:= v3 + v0 @kind int;
  #L245ff6.  v2.`okio.Segment.limit` @type ^`int` := v3;
  #L245ffa.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245ffe.  v6:= (`long`) v0 @kind i2l;
  #L246000.  v4:= v4 + v6 @kind long;
  #L246002.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L246006.  v4:= (`long`) v0 @kind i2l;
  #L246008.  v10:= v10 - v4 @kind long;
  #L24600a.  v4:= 0L;
  #L24600e.  v3:= lcmp(v10, v4);
  #L246012.  if v3 > 0 then goto L24601a;
  #L246016.  if v12 == 0 then goto L246052;
  #L24601a.  v3:= 1I;
  #L24601c.  call temp:= `writableSegment`(v8, v3) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L246022.  v2:= temp @kind object;
  #L246024.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L246028.  v3:= v3 - 8192;
  #L24602c.  v4:= (`long`) v3 @kind i2l;
  #L24602e.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L246034.  v4:= temp @kind wide;
  #L246036.  v1:= (`int`) v4 @kind l2i;
  #L246038.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24603c.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L246040.  call temp:= `read`(v9, v3, v4, v1) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L246046.  v0:= temp;
  #L246048.  v3:= -1I;
  #L24604a.  if v0 != v3 then goto L245ff0;
  #L24604e.  if v12 == 0 then goto L246054;
  #L246052.  return @kind void;
  #L246054.  v3:= new `java.io.EOFException`;
  #L246058.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L24605e.  throw v3;
}
procedure `okio.Buffer` `buffer`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L246070.  return v0 @kind object;
}
procedure `void` `clear`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L246084.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246088.  call `skip`(v4, v2) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #Try_end0.  
  #L24608e.  return @kind void;
  #L246090.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L246092.  v1:= new `java.lang.AssertionError`;
  #L246096.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L24609c.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L246090;
}
procedure `java.lang.Object` `clone`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2460c0.  call temp:= `clone`(v1) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @kind virtual;
  #L2460c6.  v0:= temp @kind object;
  #L2460c8.  return v0 @kind object;
}
procedure `okio.Buffer` `clone`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2460dc.  v0:= new `okio.Buffer`;
  #L2460e0.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L2460e6.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2460ea.  v4:= 0L;
  #L2460ee.  v2:= lcmp(v2, v4);
  #L2460f2.  if v2 != 0 then goto L2460f8;
  #L2460f6.  return v0 @kind object;
  #L2460f8.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2460fc.  call temp:= `sharedCopy`(v2) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L246102.  v2:= temp @kind object;
  #L246104.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L246108.  v2:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24610c.  v3:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246110.  v4:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246114.  v3.`okio.Segment.prev` @type ^`okio.Segment` := v4 @kind object;
  #L246118.  v2.`okio.Segment.next` @type ^`okio.Segment` := v4 @kind object;
  #L24611c.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246120.  v1:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L246124.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246128.  if v1 == v2 then goto L246148;
  #L24612c.  v2:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246130.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L246134.  call temp:= `sharedCopy`(v1) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L24613a.  v3:= temp @kind object;
  #L24613c.  call temp:= `push`(v2, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L246142.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L246146.  goto L246124;
  #L246148.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24614c.  v0.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L246150.  goto L2460f6;
}
procedure `void` `close`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L246164.  return @kind void;
}
procedure `long` `completeSegmentByteCount`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L246178.  v4:= 0L;
  #L24617c.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246180.  v3:= lcmp(v0, v4);
  #L246184.  if v3 != 0 then goto L24618a;
  #L246188.  return v4 @kind wide;
  #L24618a.  v3:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24618e.  v2:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L246192.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L246196.  v4:= 8192I;
  #L24619a.  if v3 >= v4 then goto L2461b4;
  #L24619e.  v3:= v2.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L2461a2.  if v3 == 0 then goto L2461b4;
  #L2461a6.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L2461aa.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L2461ae.  v3:= v3 - v4 @kind int;
  #L2461b0.  v4:= (`long`) v3 @kind i2l;
  #L2461b2.  v0:= v0 - v4 @kind long;
  #L2461b4.  v4:= v0 @kind wide;
  #L2461b6.  goto L246188;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v6 @kind this, `java.io.OutputStream` v7 @kind object @name `out`) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2461c8.  v2:= 0L;
  #L2461cc.  v4:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2461d0.  v0:= v6 @kind object;
  #L2461d2.  v1:= v7 @kind object;
  #L2461d4.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @kind virtual;
  #L2461da.  v0:= temp @kind object;
  #L2461dc.  return v0 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v10 @kind this, `java.io.OutputStream` v11 @kind object @name `out`, `long` v12 @name `offset`, `long` v14 @name `byteCount`) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2461f0.  if v11 != 0 then goto L246204;
  #L2461f4.  v0:= new `java.lang.IllegalArgumentException`;
  #L2461f8.  v1:= "out == null" @kind object;
  #L2461fc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246202.  throw v0;
  #L246204.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246208.  v2:= v12 @kind wide;
  #L24620a.  v4:= v14 @kind wide;
  #L24620c.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L246212.  v0:= 0L;
  #L246216.  v0:= lcmp(v14, v0);
  #L24621a.  if v0 != 0 then goto L246220;
  #L24621e.  return v10 @kind object;
  #L246220.  v7:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246224.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L246228.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L24622c.  v0:= v0 - v1 @kind int;
  #L24622e.  v0:= (`long`) v0 @kind i2l;
  #L246230.  v0:= lcmp(v12, v0);
  #L246234.  if v0 < 0 then goto L24624c;
  #L246238.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L24623c.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L246240.  v0:= v0 - v1 @kind int;
  #L246242.  v0:= (`long`) v0 @kind i2l;
  #L246244.  v12:= v12 - v0 @kind long;
  #L246246.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24624a.  goto L246224;
  #L24624c.  v0:= 0L;
  #L246250.  v0:= lcmp(v14, v0);
  #L246254.  if v0 <= 0 then goto L24621e;
  #L246258.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L24625c.  v0:= (`long`) v0 @kind i2l;
  #L24625e.  v0:= v0 + v12 @kind long;
  #L246260.  v6:= (`int`) v0 @kind l2i;
  #L246262.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L246266.  v0:= v0 - v6 @kind int;
  #L246268.  v0:= (`long`) v0 @kind i2l;
  #L24626a.  call temp:= `min`(v0, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L246270.  v0:= temp @kind wide;
  #L246272.  v8:= (`int`) v0 @kind l2i;
  #L246274.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246278.  call `write`(v11, v0, v6, v8) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L24627e.  v0:= (`long`) v8 @kind i2l;
  #L246280.  v14:= v14 - v0 @kind long;
  #L246282.  v12:= 0L;
  #L246286.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24628a.  goto L24624c;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v10 @kind this, `okio.Buffer` v11 @kind object @name `out`, `long` v12 @name `offset`, `long` v14 @name `byteCount`) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L24629c.  v8:= 0L;
  #L2462a0.  if v11 != 0 then goto L2462b4;
  #L2462a4.  v0:= new `java.lang.IllegalArgumentException`;
  #L2462a8.  v1:= "out == null" @kind object;
  #L2462ac.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2462b2.  throw v0;
  #L2462b4.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2462b8.  v2:= v12 @kind wide;
  #L2462ba.  v4:= v14 @kind wide;
  #L2462bc.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2462c2.  v0:= lcmp(v14, v8);
  #L2462c6.  if v0 != 0 then goto L2462cc;
  #L2462ca.  return v10 @kind object;
  #L2462cc.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2462d0.  v0:= v0 + v14 @kind long;
  #L2462d2.  v11.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L2462d6.  v7:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2462da.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L2462de.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L2462e2.  v0:= v0 - v1 @kind int;
  #L2462e4.  v0:= (`long`) v0 @kind i2l;
  #L2462e6.  v0:= lcmp(v12, v0);
  #L2462ea.  if v0 < 0 then goto L246302;
  #L2462ee.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L2462f2.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L2462f6.  v0:= v0 - v1 @kind int;
  #L2462f8.  v0:= (`long`) v0 @kind i2l;
  #L2462fa.  v12:= v12 - v0 @kind long;
  #L2462fc.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L246300.  goto L2462da;
  #L246302.  v0:= lcmp(v14, v8);
  #L246306.  if v0 <= 0 then goto L2462ca;
  #L24630a.  call temp:= `sharedCopy`(v7) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L246310.  v6:= temp @kind object;
  #L246312.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L246316.  v0:= (`long`) v0 @kind i2l;
  #L246318.  v0:= v0 + v12 @kind long;
  #L24631a.  v0:= (`int`) v0 @kind l2i;
  #L24631c.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L246320.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L246324.  v1:= (`int`) v14 @kind l2i;
  #L246326.  v0:= v0 + v1 @kind int;
  #L246328.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L24632c.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L246332.  v0:= temp;
  #L246334.  v6.`okio.Segment.limit` @type ^`int` := v0;
  #L246338.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24633c.  if v0 != 0 then goto L246364;
  #L246340.  v6.`okio.Segment.prev` @type ^`okio.Segment` := v6 @kind object;
  #L246344.  v6.`okio.Segment.next` @type ^`okio.Segment` := v6 @kind object;
  #L246348.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L24634c.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L246350.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L246354.  v0:= v0 - v1 @kind int;
  #L246356.  v0:= (`long`) v0 @kind i2l;
  #L246358.  v14:= v14 - v0 @kind long;
  #L24635a.  v12:= 0L;
  #L24635e.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L246362.  goto L246302;
  #L246364.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246368.  v0:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24636c.  call temp:= `push`(v0, v6) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L246372.  goto L24634c;
}
procedure `okio.BufferedSink` `emit`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;

  #L246384.  return v0 @kind object;
}
procedure `okio.Buffer` `emitCompleteSegments`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L246398.  return v0 @kind object;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2463ac.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @kind virtual;
  #L2463b2.  v0:= temp @kind object;
  #L2463b4.  return v0 @kind object;
}
procedure `boolean` `equals`(`okio.Buffer` v18 @kind this, `java.lang.Object` v19 @kind object @name `o`) @signature `Lokio/Buffer;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L2463c8.  v0:= v18 @kind object;
  #L2463cc.  v1:= v19 @kind object;
  #L2463d0.  if v0 != v1 then goto L2463d8;
  #L2463d4.  v14:= 1I;
  #L2463d6.  return v14;
  #L2463d8.  v0:= v19 @kind object;
  #L2463dc.  v14:= instanceof @variable v0 @type ^`okio.Buffer` @kind boolean;
  #L2463e0.  if v14 != 0 then goto L2463e8;
  #L2463e4.  v14:= 0I;
  #L2463e6.  goto L2463d6;
  #L2463e8.  v13:= v19 @kind object;
  #L2463ec.  v13:= (`okio.Buffer`) v13 @kind object;
  #L2463f0.  v0:= v18 @kind object;
  #L2463f4.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2463f8.  v0:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2463fc.  v16:= v0 @kind wide;
  #L246400.  v14:= lcmp(v14, v16);
  #L246404.  if v14 == 0 then goto L24640c;
  #L246408.  v14:= 0I;
  #L24640a.  goto L2463d6;
  #L24640c.  v0:= v18 @kind object;
  #L246410.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246414.  v16:= 0L;
  #L246418.  v14:= lcmp(v14, v16);
  #L24641c.  if v14 != 0 then goto L246424;
  #L246420.  v14:= 1I;
  #L246422.  goto L2463d6;
  #L246424.  v0:= v18 @kind object;
  #L246428.  v11:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24642c.  v12:= v13.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246430.  v5:= v11.`okio.Segment.pos` @type ^`int`;
  #L246434.  v9:= v12.`okio.Segment.pos` @type ^`int`;
  #L246438.  v6:= 0L;
  #L24643c.  v0:= v18 @kind object;
  #L246440.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246444.  v14:= lcmp(v6, v14);
  #L246448.  if v14 >= 0 then goto L2464c0;
  #L24644c.  v14:= v11.`okio.Segment.limit` @type ^`int`;
  #L246450.  v14:= v14 - v5 @kind int;
  #L246452.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L246456.  v15:= v15 - v9 @kind int;
  #L246458.  call temp:= `min`(v14, v15) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L24645e.  v14:= temp;
  #L246460.  v2:= (`long`) v14 @kind i2l;
  #L246462.  v4:= 0I;
  #L246464.  v10:= v9;
  #L246466.  v8:= v5;
  #L246468.  v14:= (`long`) v4 @kind i2l;
  #L24646a.  v14:= lcmp(v14, v2);
  #L24646e.  if v14 >= 0 then goto L24649c;
  #L246472.  v14:= v11.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246476.  v5:= v8 + 1;
  #L24647a.  v14:= v14[v8] @kind byte;
  #L24647e.  v15:= v12.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246482.  v9:= v10 + 1;
  #L246486.  v15:= v15[v10] @kind byte;
  #L24648a.  if v14 == v15 then goto L246492;
  #L24648e.  v14:= 0I;
  #L246490.  goto L2463d6;
  #L246492.  v4:= v4 + 1;
  #L246496.  v10:= v9;
  #L246498.  v8:= v5;
  #L24649a.  goto L246468;
  #L24649c.  v14:= v11.`okio.Segment.limit` @type ^`int`;
  #L2464a0.  if v8 != v14 then goto L2464c8;
  #L2464a4.  v11:= v11.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2464a8.  v5:= v11.`okio.Segment.pos` @type ^`int`;
  #L2464ac.  v14:= v12.`okio.Segment.limit` @type ^`int`;
  #L2464b0.  if v10 != v14 then goto L2464c4;
  #L2464b4.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2464b8.  v9:= v12.`okio.Segment.pos` @type ^`int`;
  #L2464bc.  v6:= v6 + v2 @kind long;
  #L2464be.  goto L24643c;
  #L2464c0.  v14:= 1I;
  #L2464c2.  goto L2463d6;
  #L2464c4.  v9:= v10;
  #L2464c6.  goto L2464bc;
  #L2464c8.  v5:= v8;
  #L2464ca.  goto L2464ac;
}
procedure `boolean` `exhausted`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.exhausted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2464dc.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2464e0.  v2:= 0L;
  #L2464e4.  v0:= lcmp(v0, v2);
  #L2464e8.  if v0 != 0 then goto L2464f0;
  #L2464ec.  v0:= 1I;
  #L2464ee.  return v0;
  #L2464f0.  v0:= 0I;
  #L2464f2.  goto L2464ee;
}
procedure `void` `flush`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L246504.  return @kind void;
}
procedure `byte` `getByte`(`okio.Buffer` v9 @kind this, `long` v10 @name `pos`) @signature `Lokio/Buffer;.getByte:(J)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L246518.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24651c.  v4:= 1L;
  #L246520.  v2:= v10 @kind wide;
  #L246522.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L246528.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24652c.  v0:= v0 - v10 @kind long;
  #L24652e.  v0:= lcmp(v0, v10);
  #L246532.  if v0 <= 0 then goto L24656c;
  #L246536.  v6:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24653a.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L24653e.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L246542.  v7:= v0 - v1 @kind int;
  #L246546.  v0:= (`long`) v7 @kind i2l;
  #L246548.  v0:= lcmp(v10, v0);
  #L24654c.  if v0 >= 0 then goto L246562;
  #L246550.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246554.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L246558.  v2:= (`int`) v10 @kind l2i;
  #L24655a.  v1:= v1 + v2 @kind int;
  #L24655c.  v0:= v0[v1] @kind byte;
  #L246560.  return v0;
  #L246562.  v0:= (`long`) v7 @kind i2l;
  #L246564.  v10:= v10 - v0 @kind long;
  #L246566.  v6:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24656a.  goto L24653a;
  #L24656c.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246570.  v10:= v10 - v0 @kind long;
  #L246572.  v0:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246576.  v6:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24657a.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L24657e.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L246582.  v0:= v0 - v1 @kind int;
  #L246584.  v0:= (`long`) v0 @kind i2l;
  #L246586.  v10:= v10 + v0 @kind long;
  #L246588.  v0:= 0L;
  #L24658c.  v0:= lcmp(v10, v0);
  #L246590.  if v0 < 0 then goto L2465a6;
  #L246594.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246598.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L24659c.  v2:= (`int`) v10 @kind l2i;
  #L24659e.  v1:= v1 + v2 @kind int;
  #L2465a0.  v0:= v0[v1] @kind byte;
  #L2465a4.  goto L246560;
  #L2465a6.  v6:= v6.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L2465aa.  goto L24657a;
}
procedure `int` `hashCode`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2465bc.  v3:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2465c0.  if v3 != 0 then goto L2465c8;
  #L2465c4.  v2:= 0I;
  #L2465c6.  return v2;
  #L2465c8.  v2:= 1I;
  #L2465ca.  v1:= v3.`okio.Segment.pos` @type ^`int`;
  #L2465ce.  v0:= v3.`okio.Segment.limit` @type ^`int`;
  #L2465d2.  if v1 >= v0 then goto L2465ec;
  #L2465d6.  v4:= v2 * 31;
  #L2465da.  v5:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2465de.  v5:= v5[v1] @kind byte;
  #L2465e2.  v2:= v4 + v5 @kind int;
  #L2465e6.  v1:= v1 + 1;
  #L2465ea.  goto L2465d2;
  #L2465ec.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2465f0.  v4:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2465f4.  if v3 != v4 then goto L2465ca;
  #L2465f8.  goto L2465c6;
}
procedure `okio.ByteString` `hmacSha1`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object @name `key`) @signature `Lokio/Buffer;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24660c.  v0:= "HmacSHA1" @kind object;
  #L246610.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L246616.  v0:= temp @kind object;
  #L246618.  return v0 @kind object;
}
procedure `okio.ByteString` `hmacSha256`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object @name `key`) @signature `Lokio/Buffer;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24662c.  v0:= "HmacSHA256" @kind object;
  #L246630.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L246636.  v0:= temp @kind object;
  #L246638.  return v0 @kind object;
}
procedure `okio.ByteString` `hmacSha512`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object @name `key`) @signature `Lokio/Buffer;.hmacSha512:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24664c.  v0:= "HmacSHA512" @kind object;
  #L246650.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L246656.  v0:= temp @kind object;
  #L246658.  return v0 @kind object;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 @name `b`) @signature `Lokio/Buffer;.indexOf:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24666c.  v2:= 0L;
  #L246670.  v4:= 9223372036854775807L;
  #L24667a.  v0:= v6 @kind object;
  #L24667c.  v1:= v7;
  #L24667e.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L246684.  v0:= temp @kind wide;
  #L246686.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 @name `b`, `long` v8 @name `fromIndex`) @signature `Lokio/Buffer;.indexOf:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L246698.  v4:= 9223372036854775807L;
  #L2466a2.  v0:= v6 @kind object;
  #L2466a4.  v1:= v7;
  #L2466a6.  v2:= v8 @kind wide;
  #L2466a8.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L2466ae.  v0:= temp @kind wide;
  #L2466b0.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v16 @kind this, `byte` v17 @name `b`, `long` v18 @name `fromIndex`, `long` v20 @name `toIndex`) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L2466c4.  v10:= 0L;
  #L2466c8.  v10:= lcmp(v18, v10);
  #L2466cc.  if v10 < 0 then goto L2466d8;
  #L2466d0.  v10:= lcmp(v20, v18);
  #L2466d4.  if v10 >= 0 then goto L246728;
  #L2466d8.  v10:= new `java.lang.IllegalArgumentException`;
  #L2466dc.  v11:= "size=%s fromIndex=%s toIndex=%s" @kind object;
  #L2466e0.  v12:= 3I;
  #L2466e2.  v12:= new `java.lang.Object`[v12];
  #L2466e6.  v13:= 0I;
  #L2466e8.  v0:= v16 @kind object;
  #L2466ec.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2466f0.  call temp:= `valueOf`(v14) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2466f6.  v14:= temp @kind object;
  #L2466f8.  v12[v13]:= v14 @kind object;
  #L2466fc.  v13:= 1I;
  #L2466fe.  call temp:= `valueOf`(v18) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L246704.  v14:= temp @kind object;
  #L246706.  v12[v13]:= v14 @kind object;
  #L24670a.  v13:= 2I;
  #L24670c.  call temp:= `valueOf`(v20) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L246712.  v14:= temp @kind object;
  #L246714.  v12[v13]:= v14 @kind object;
  #L246718.  call temp:= `format`(v11, v12) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L24671e.  v11:= temp @kind object;
  #L246720.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246726.  throw v10;
  #L246728.  v0:= v16 @kind object;
  #L24672c.  v10:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246730.  v10:= lcmp(v20, v10);
  #L246734.  if v10 <= 0 then goto L246744;
  #L246738.  v0:= v16 @kind object;
  #L24673c.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246740.  v20:= v0 @kind wide;
  #L246744.  v10:= lcmp(v18, v20);
  #L246748.  if v10 != 0 then goto L246752;
  #L24674c.  v10:= -1L;
  #L246750.  return v10 @kind wide;
  #L246752.  v0:= v16 @kind object;
  #L246756.  v9:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24675a.  if v9 != 0 then goto L246764;
  #L24675e.  v10:= -1L;
  #L246762.  goto L246750;
  #L246764.  v0:= v16 @kind object;
  #L246768.  v10:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24676c.  v10:= v10 - v18 @kind long;
  #L246770.  v10:= lcmp(v10, v18);
  #L246774.  if v10 >= 0 then goto L24679c;
  #L246778.  v0:= v16 @kind object;
  #L24677c.  v6:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246780.  v10:= lcmp(v6, v18);
  #L246784.  if v10 <= 0 then goto L2467d6;
  #L246788.  v9:= v9.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24678c.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L246790.  v11:= v9.`okio.Segment.pos` @type ^`int`;
  #L246794.  v10:= v10 - v11 @kind int;
  #L246796.  v10:= (`long`) v10 @kind i2l;
  #L246798.  v6:= v6 - v10 @kind long;
  #L24679a.  goto L246780;
  #L24679c.  v6:= 0L;
  #L2467a0.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L2467a4.  v11:= v9.`okio.Segment.pos` @type ^`int`;
  #L2467a8.  v10:= v10 - v11 @kind int;
  #L2467aa.  v10:= (`long`) v10 @kind i2l;
  #L2467ac.  v4:= v6 + v10 @kind long;
  #L2467b0.  v10:= lcmp(v4, v18);
  #L2467b4.  if v10 >= 0 then goto L2467d6;
  #L2467b8.  v9:= v9.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2467bc.  v6:= v4 @kind wide;
  #L2467be.  goto L2467a0;
  #L2467c0.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L2467c4.  v11:= v9.`okio.Segment.pos` @type ^`int`;
  #L2467c8.  v10:= v10 - v11 @kind int;
  #L2467ca.  v10:= (`long`) v10 @kind i2l;
  #L2467cc.  v6:= v6 + v10 @kind long;
  #L2467ce.  v18:= v6 @kind wide;
  #L2467d2.  v9:= v9.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2467d6.  v10:= lcmp(v6, v20);
  #L2467da.  if v10 >= 0 then goto L246830;
  #L2467de.  v2:= v9.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2467e2.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L2467e6.  v10:= (`long`) v10 @kind i2l;
  #L2467e8.  v12:= v9.`okio.Segment.pos` @type ^`int`;
  #L2467ec.  v12:= (`long`) v12 @kind i2l;
  #L2467ee.  v12:= v12 + v20 @kind long;
  #L2467f2.  v12:= v12 - v6 @kind long;
  #L2467f4.  call temp:= `min`(v10, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2467fa.  v10:= temp @kind wide;
  #L2467fc.  v3:= (`int`) v10 @kind l2i;
  #L2467fe.  v10:= v9.`okio.Segment.pos` @type ^`int`;
  #L246802.  v10:= (`long`) v10 @kind i2l;
  #L246804.  v10:= v10 + v18 @kind long;
  #L246808.  v10:= v10 - v6 @kind long;
  #L24680a.  v8:= (`int`) v10 @kind l2i;
  #L24680c.  if v8 >= v3 then goto L2467c0;
  #L246810.  v10:= v2[v8] @kind byte;
  #L246814.  v0:= v17;
  #L246818.  if v10 != v0 then goto L24682a;
  #L24681c.  v10:= v9.`okio.Segment.pos` @type ^`int`;
  #L246820.  v10:= v8 - v10 @kind int;
  #L246824.  v10:= (`long`) v10 @kind i2l;
  #L246826.  v10:= v10 + v6 @kind long;
  #L246828.  goto L246750;
  #L24682a.  v8:= v8 + 1;
  #L24682e.  goto L24680c;
  #L246830.  v10:= -1L;
  #L246834.  goto L246750;
}
procedure `long` `indexOf`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object @name `bytes`) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L246848.  v0:= 0L;
  #L24684c.  call temp:= `indexOf`(v2, v3, v0) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @kind virtual;
  #L246852.  v0:= temp @kind wide;
  #L246854.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v20 @kind this, `okio.ByteString` v21 @kind object @name `bytes`, `long` v22 @name `fromIndex`) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L246868.  call temp:= `size`(v21) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L24686e.  v2:= temp;
  #L246870.  if v2 != 0 then goto L246884;
  #L246874.  v2:= new `java.lang.IllegalArgumentException`;
  #L246878.  v4:= "bytes is empty" @kind object;
  #L24687c.  call `<init>`(v2, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246882.  throw v2;
  #L246884.  v4:= 0L;
  #L246888.  v2:= lcmp(v22, v4);
  #L24688c.  if v2 >= 0 then goto L2468a0;
  #L246890.  v2:= new `java.lang.IllegalArgumentException`;
  #L246894.  v4:= "fromIndex < 0" @kind object;
  #L246898.  call `<init>`(v2, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24689e.  throw v2;
  #L2468a0.  v0:= v20 @kind object;
  #L2468a4.  v3:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2468a8.  if v3 != 0 then goto L2468b2;
  #L2468ac.  v4:= -1L;
  #L2468b0.  return v4 @kind wide;
  #L2468b2.  v0:= v20 @kind object;
  #L2468b6.  v4:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2468ba.  v4:= v4 - v22 @kind long;
  #L2468be.  v2:= lcmp(v4, v22);
  #L2468c2.  if v2 >= 0 then goto L2468ea;
  #L2468c6.  v0:= v20 @kind object;
  #L2468ca.  v12:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2468ce.  v2:= lcmp(v12, v22);
  #L2468d2.  if v2 <= 0 then goto L24690e;
  #L2468d6.  v3:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L2468da.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L2468de.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L2468e2.  v2:= v2 - v4 @kind int;
  #L2468e4.  v4:= (`long`) v2 @kind i2l;
  #L2468e6.  v12:= v12 - v4 @kind long;
  #L2468e8.  goto L2468ce;
  #L2468ea.  v12:= 0L;
  #L2468ee.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L2468f2.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L2468f6.  v2:= v2 - v4 @kind int;
  #L2468f8.  v4:= (`long`) v2 @kind i2l;
  #L2468fa.  v10:= v12 + v4 @kind long;
  #L2468fe.  v2:= lcmp(v10, v22);
  #L246902.  if v2 >= 0 then goto L24690e;
  #L246906.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24690a.  v12:= v10 @kind wide;
  #L24690c.  goto L2468ee;
  #L24690e.  v2:= 0I;
  #L246910.  v0:= v21 @kind object;
  #L246914.  call temp:= `getByte`(v0, v2) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L24691a.  v8:= temp;
  #L24691c.  call temp:= `size`(v21) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L246922.  v7:= temp;
  #L246924.  v0:= v20 @kind object;
  #L246928.  v4:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24692c.  v0:= (`long`) v7 @kind i2l;
  #L24692e.  v18:= v0 @kind wide;
  #L246932.  v4:= v4 - v18 @kind long;
  #L246936.  v18:= 1L;
  #L24693a.  v16:= v4 + v18 @kind long;
  #L24693e.  v2:= lcmp(v12, v16);
  #L246942.  if v2 >= 0 then goto L2469d0;
  #L246946.  v9:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24694a.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L24694e.  v4:= (`long`) v2 @kind i2l;
  #L246950.  v2:= v3.`okio.Segment.pos` @type ^`int`;
  #L246954.  v0:= (`long`) v2 @kind i2l;
  #L246956.  v18:= v0 @kind wide;
  #L24695a.  v18:= v18 + v16 @kind long;
  #L24695e.  v18:= v18 - v12 @kind long;
  #L246962.  v0:= v18 @kind wide;
  #L246966.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L24696c.  v4:= temp @kind wide;
  #L24696e.  v15:= (`int`) v4 @kind l2i;
  #L246970.  v2:= v3.`okio.Segment.pos` @type ^`int`;
  #L246974.  v4:= (`long`) v2 @kind i2l;
  #L246976.  v4:= v4 + v22 @kind long;
  #L24697a.  v4:= v4 - v12 @kind long;
  #L24697c.  v14:= (`int`) v4 @kind l2i;
  #L24697e.  if v14 >= v15 then goto L2469b8;
  #L246982.  v2:= v9[v14] @kind byte;
  #L246986.  if v2 != v8 then goto L2469b2;
  #L24698a.  v4:= v14 + 1;
  #L24698e.  v6:= 1I;
  #L246990.  v2:= v20 @kind object;
  #L246994.  v5:= v21 @kind object;
  #L246998.  call temp:= `rangeEquals`(v2, v3, v4, v5, v6, v7) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L24699e.  v2:= temp;
  #L2469a0.  if v2 == 0 then goto L2469b2;
  #L2469a4.  v2:= v3.`okio.Segment.pos` @type ^`int`;
  #L2469a8.  v2:= v14 - v2 @kind int;
  #L2469ac.  v4:= (`long`) v2 @kind i2l;
  #L2469ae.  v4:= v4 + v12 @kind long;
  #L2469b0.  goto L2468b0;
  #L2469b2.  v14:= v14 + 1;
  #L2469b6.  goto L24697e;
  #L2469b8.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L2469bc.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L2469c0.  v2:= v2 - v4 @kind int;
  #L2469c2.  v4:= (`long`) v2 @kind i2l;
  #L2469c4.  v12:= v12 + v4 @kind long;
  #L2469c6.  v22:= v12 @kind wide;
  #L2469ca.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2469ce.  goto L24693e;
  #L2469d0.  v4:= -1L;
  #L2469d4.  goto L2468b0;
}
procedure `long` `indexOfElement`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object @name `targetBytes`) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2469e8.  v0:= 0L;
  #L2469ec.  call temp:= `indexOfElement`(v2, v3, v0) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @kind virtual;
  #L2469f2.  v0:= temp @kind wide;
  #L2469f4.  return v0 @kind wide;
}
procedure `long` `indexOfElement`(`okio.Buffer` v18 @kind this, `okio.ByteString` v19 @kind object @name `targetBytes`, `long` v20 @name `fromIndex`) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L246a08.  v16:= 0L;
  #L246a0c.  v15:= lcmp(v20, v16);
  #L246a10.  if v15 >= 0 then goto L246a24;
  #L246a14.  v15:= new `java.lang.IllegalArgumentException`;
  #L246a18.  v16:= "fromIndex < 0" @kind object;
  #L246a1c.  call `<init>`(v15, v16) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246a22.  throw v15;
  #L246a24.  v0:= v18 @kind object;
  #L246a28.  v12:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246a2c.  if v12 != 0 then goto L246a36;
  #L246a30.  v16:= -1L;
  #L246a34.  return v16 @kind wide;
  #L246a36.  v0:= v18 @kind object;
  #L246a3a.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246a3e.  v16:= v0 @kind wide;
  #L246a42.  v16:= v16 - v20 @kind long;
  #L246a46.  v15:= lcmp(v16, v20);
  #L246a4a.  if v15 >= 0 then goto L246a7e;
  #L246a4e.  v0:= v18 @kind object;
  #L246a52.  v10:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246a56.  v15:= lcmp(v10, v20);
  #L246a5a.  if v15 <= 0 then goto L246aac;
  #L246a5e.  v12:= v12.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L246a62.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L246a66.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L246a6a.  v16:= v0;
  #L246a6e.  v15:= v15 - v16 @kind int;
  #L246a72.  v0:= (`long`) v15 @kind i2l;
  #L246a74.  v16:= v0 @kind wide;
  #L246a78.  v10:= v10 - v16 @kind long;
  #L246a7c.  goto L246a56;
  #L246a7e.  v10:= 0L;
  #L246a82.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L246a86.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L246a8a.  v16:= v0;
  #L246a8e.  v15:= v15 - v16 @kind int;
  #L246a92.  v0:= (`long`) v15 @kind i2l;
  #L246a94.  v16:= v0 @kind wide;
  #L246a98.  v8:= v10 + v16 @kind long;
  #L246a9c.  v15:= lcmp(v8, v20);
  #L246aa0.  if v15 >= 0 then goto L246aac;
  #L246aa4.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L246aa8.  v10:= v8 @kind wide;
  #L246aaa.  goto L246a82;
  #L246aac.  call temp:= `size`(v19) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L246ab2.  v15:= temp;
  #L246ab4.  v16:= 2I;
  #L246ab8.  v0:= v16;
  #L246abc.  if v15 != v0 then goto L246b5e;
  #L246ac0.  v15:= 0I;
  #L246ac2.  v0:= v19 @kind object;
  #L246ac6.  call temp:= `getByte`(v0, v15) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L246acc.  v3:= temp;
  #L246ace.  v15:= 1I;
  #L246ad0.  v0:= v19 @kind object;
  #L246ad4.  call temp:= `getByte`(v0, v15) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L246ada.  v4:= temp;
  #L246adc.  v0:= v18 @kind object;
  #L246ae0.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246ae4.  v16:= v0 @kind wide;
  #L246ae8.  v15:= lcmp(v10, v16);
  #L246aec.  if v15 >= 0 then goto L246c00;
  #L246af0.  v5:= v12.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246af4.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L246af8.  v0:= (`long`) v15 @kind i2l;
  #L246afa.  v16:= v0 @kind wide;
  #L246afe.  v16:= v16 + v20 @kind long;
  #L246b02.  v16:= v16 - v10 @kind long;
  #L246b06.  v0:= v16 @kind wide;
  #L246b0a.  v7:= (`int`) v0 @kind l2i;
  #L246b0c.  v6:= v12.`okio.Segment.limit` @type ^`int`;
  #L246b10.  if v7 >= v6 then goto L246b3a;
  #L246b14.  v2:= v5[v7] @kind byte;
  #L246b18.  if v2 == v3 then goto L246b20;
  #L246b1c.  if v2 != v4 then goto L246b34;
  #L246b20.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L246b24.  v15:= v7 - v15 @kind int;
  #L246b28.  v0:= (`long`) v15 @kind i2l;
  #L246b2a.  v16:= v0 @kind wide;
  #L246b2e.  v16:= v16 + v10 @kind long;
  #L246b32.  goto L246a34;
  #L246b34.  v7:= v7 + 1;
  #L246b38.  goto L246b10;
  #L246b3a.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L246b3e.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L246b42.  v16:= v0;
  #L246b46.  v15:= v15 - v16 @kind int;
  #L246b4a.  v0:= (`long`) v15 @kind i2l;
  #L246b4c.  v16:= v0 @kind wide;
  #L246b50.  v10:= v10 + v16 @kind long;
  #L246b54.  v20:= v10 @kind wide;
  #L246b58.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L246b5c.  goto L246adc;
  #L246b5e.  call temp:= `internalArray`(v19) @signature `Lokio/ByteString;.internalArray:()[B` @kind virtual;
  #L246b64.  v14:= temp @kind object;
  #L246b66.  v0:= v18 @kind object;
  #L246b6a.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246b6e.  v16:= v0 @kind wide;
  #L246b72.  v15:= lcmp(v10, v16);
  #L246b76.  if v15 >= 0 then goto L246c00;
  #L246b7a.  v5:= v12.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246b7e.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L246b82.  v0:= (`long`) v15 @kind i2l;
  #L246b84.  v16:= v0 @kind wide;
  #L246b88.  v16:= v16 + v20 @kind long;
  #L246b8c.  v16:= v16 - v10 @kind long;
  #L246b90.  v0:= v16 @kind wide;
  #L246b94.  v7:= (`int`) v0 @kind l2i;
  #L246b96.  v6:= v12.`okio.Segment.limit` @type ^`int`;
  #L246b9a.  if v7 >= v6 then goto L246bdc;
  #L246b9e.  v2:= v5[v7] @kind byte;
  #L246ba2.  v0:= length @variable v14;
  #L246ba4.  v16:= v0;
  #L246ba8.  v15:= 0I;
  #L246baa.  v0:= v16;
  #L246bae.  if v15 >= v0 then goto L246bd6;
  #L246bb2.  v13:= v14[v15] @kind byte;
  #L246bb6.  if v2 != v13 then goto L246bd0;
  #L246bba.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L246bbe.  v15:= v7 - v15 @kind int;
  #L246bc2.  v0:= (`long`) v15 @kind i2l;
  #L246bc4.  v16:= v0 @kind wide;
  #L246bc8.  v16:= v16 + v10 @kind long;
  #L246bcc.  goto L246a34;
  #L246bd0.  v15:= v15 + 1;
  #L246bd4.  goto L246baa;
  #L246bd6.  v7:= v7 + 1;
  #L246bda.  goto L246b9a;
  #L246bdc.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L246be0.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L246be4.  v16:= v0;
  #L246be8.  v15:= v15 - v16 @kind int;
  #L246bec.  v0:= (`long`) v15 @kind i2l;
  #L246bee.  v16:= v0 @kind wide;
  #L246bf2.  v10:= v10 + v16 @kind long;
  #L246bf6.  v20:= v10 @kind wide;
  #L246bfa.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L246bfe.  goto L246b66;
  #L246c00.  v16:= -1L;
  #L246c04.  goto L246a34;
}
procedure `java.io.InputStream` `inputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.inputStream:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L246c18.  v0:= new `okio.Buffer$2`;
  #L246c1c.  call `<init>`(v0, v1) @signature `Lokio/Buffer$2;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L246c22.  return v0 @kind object;
}
procedure `boolean` `isOpen`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L246c34.  v0:= 1I;
  #L246c36.  return v0;
}
procedure `okio.ByteString` `md5`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.md5:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L246c48.  v0:= "MD5" @kind object;
  #L246c4c.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L246c52.  v0:= temp @kind object;
  #L246c54.  return v0 @kind object;
}
procedure `java.io.OutputStream` `outputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L246c68.  v0:= new `okio.Buffer$1`;
  #L246c6c.  call `<init>`(v0, v1) @signature `Lokio/Buffer$1;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L246c72.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v7 @kind this, `long` v8 @name `offset`, `okio.ByteString` v10 @kind object @name `bytes`) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L246c84.  v5:= 0I;
  #L246c86.  call temp:= `size`(v10) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L246c8c.  v6:= temp;
  #L246c8e.  v1:= v7 @kind object;
  #L246c90.  v2:= v8 @kind wide;
  #L246c92.  v4:= v10 @kind object;
  #L246c94.  call temp:= `rangeEquals`(v1, v2, v4, v5, v6) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @kind virtual;
  #L246c9a.  v0:= temp;
  #L246c9c.  return v0;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v7 @kind this, `long` v8 @name `offset`, `okio.ByteString` v10 @kind object @name `bytes`, `int` v11 @name `bytesOffset`, `int` v12 @name `byteCount`) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L246cb0.  v1:= 0I;
  #L246cb2.  v2:= 0L;
  #L246cb6.  v2:= lcmp(v8, v2);
  #L246cba.  if v2 < 0 then goto L246ce4;
  #L246cbe.  if v11 < 0 then goto L246ce4;
  #L246cc2.  if v12 < 0 then goto L246ce4;
  #L246cc6.  v2:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246cca.  v2:= v2 - v8 @kind long;
  #L246ccc.  v4:= (`long`) v12 @kind i2l;
  #L246cce.  v2:= lcmp(v2, v4);
  #L246cd2.  if v2 < 0 then goto L246ce4;
  #L246cd6.  call temp:= `size`(v10) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L246cdc.  v2:= temp;
  #L246cde.  v2:= v2 - v11 @kind int;
  #L246ce0.  if v2 >= v12 then goto L246ce6;
  #L246ce4.  return v1;
  #L246ce6.  v0:= 0I;
  #L246ce8.  if v0 >= v12 then goto L246d0e;
  #L246cec.  v2:= (`long`) v0 @kind i2l;
  #L246cee.  v2:= v2 + v8 @kind long;
  #L246cf0.  call temp:= `getByte`(v7, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L246cf6.  v2:= temp;
  #L246cf8.  v3:= v11 + v0 @kind int;
  #L246cfc.  call temp:= `getByte`(v10, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L246d02.  v3:= temp;
  #L246d04.  if v2 != v3 then goto L246ce4;
  #L246d08.  v0:= v0 + 1;
  #L246d0c.  goto L246ce8;
  #L246d0e.  v1:= 1I;
  #L246d10.  goto L246ce4;
}
procedure `int` `read`(`okio.Buffer` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object @name `sink`) @signature `Lokio/Buffer;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L246d24.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246d28.  if v0 != 0 then goto L246d30;
  #L246d2c.  v1:= -1I;
  #L246d2e.  return v1;
  #L246d30.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L246d36.  v2:= temp;
  #L246d38.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L246d3c.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L246d40.  v3:= v3 - v4 @kind int;
  #L246d42.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L246d48.  v1:= temp;
  #L246d4a.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246d4e.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L246d52.  call temp:= `put`(v7, v2, v3, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L246d58.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L246d5c.  v2:= v2 + v1 @kind int;
  #L246d5e.  v0.`okio.Segment.pos` @type ^`int` := v2;
  #L246d62.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246d66.  v4:= (`long`) v1 @kind i2l;
  #L246d68.  v2:= v2 - v4 @kind long;
  #L246d6a.  v6.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L246d6e.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L246d72.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L246d76.  if v2 != v3 then goto L246d2e;
  #L246d7a.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L246d80.  v2:= temp @kind object;
  #L246d82.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L246d86.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L246d8c.  goto L246d2e;
}
procedure `int` `read`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object @name `sink`) @signature `Lokio/Buffer;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L246da0.  v0:= 0I;
  #L246da2.  v1:= length @variable v3;
  #L246da4.  call temp:= `read`(v2, v3, v0, v1) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L246daa.  v0:= temp;
  #L246dac.  return v0;
}
procedure `int` `read`(`okio.Buffer` v8 @kind this, `byte`[] v9 @kind object @name `sink`, `int` v10 @name `offset`, `int` v11 @name `byteCount`) @signature `Lokio/Buffer;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L246dc0.  v0:= length @variable v9;
  #L246dc2.  v0:= (`long`) v0 @kind i2l;
  #L246dc4.  v2:= (`long`) v10 @kind i2l;
  #L246dc6.  v4:= (`long`) v11 @kind i2l;
  #L246dc8.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L246dce.  v6:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246dd2.  if v6 != 0 then goto L246dda;
  #L246dd6.  v7:= -1I;
  #L246dd8.  return v7;
  #L246dda.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L246dde.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L246de2.  v0:= v0 - v1 @kind int;
  #L246de4.  call temp:= `min`(v11, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L246dea.  v7:= temp;
  #L246dec.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246df0.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L246df4.  call `arraycopy`(v0, v1, v9, v10, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L246dfa.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L246dfe.  v0:= v0 + v7 @kind int;
  #L246e00.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L246e04.  v0:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246e08.  v2:= (`long`) v7 @kind i2l;
  #L246e0a.  v0:= v0 - v2 @kind long;
  #L246e0c.  v8.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L246e10.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L246e14.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L246e18.  if v0 != v1 then goto L246dd8;
  #L246e1c.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L246e22.  v0:= temp @kind object;
  #L246e24.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L246e28.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L246e2e.  goto L246dd8;
}
procedure `long` `read`(`okio.Buffer` v4 @kind this, `okio.Buffer` v5 @kind object @name `sink`, `long` v6 @name `byteCount`) @signature `Lokio/Buffer;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L246e40.  v2:= 0L;
  #L246e44.  if v5 != 0 then goto L246e58;
  #L246e48.  v0:= new `java.lang.IllegalArgumentException`;
  #L246e4c.  v1:= "sink == null" @kind object;
  #L246e50.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246e56.  throw v0;
  #L246e58.  v0:= lcmp(v6, v2);
  #L246e5c.  if v0 >= 0 then goto L246e92;
  #L246e60.  v0:= new `java.lang.IllegalArgumentException`;
  #L246e64.  v1:= new `java.lang.StringBuilder`;
  #L246e68.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L246e6e.  v2:= "byteCount < 0: " @kind object;
  #L246e72.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246e78.  v1:= temp @kind object;
  #L246e7a.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L246e80.  v1:= temp @kind object;
  #L246e82.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L246e88.  v1:= temp @kind object;
  #L246e8a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246e90.  throw v0;
  #L246e92.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246e96.  v0:= lcmp(v0, v2);
  #L246e9a.  if v0 != 0 then goto L246ea4;
  #L246e9e.  v0:= -1L;
  #L246ea2.  return v0 @kind wide;
  #L246ea4.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246ea8.  v0:= lcmp(v6, v0);
  #L246eac.  if v0 <= 0 then goto L246eb4;
  #L246eb0.  v6:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246eb4.  call `write`(v5, v4, v6) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L246eba.  v0:= v6 @kind wide;
  #L246ebc.  goto L246ea2;
}
procedure `long` `readAll`(`okio.Buffer` v4 @kind this, `okio.Sink` v5 @kind object @name `sink`) @signature `Lokio/Buffer;.readAll:(Lokio/Sink;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L246ed0.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246ed4.  v2:= 0L;
  #L246ed8.  v2:= lcmp(v0, v2);
  #L246edc.  if v2 <= 0 then goto L246ee6;
  #L246ee0.  call `write`(v5, v4, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L246ee6.  return v0 @kind wide;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readAndWriteUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L246ef8.  v0:= new `okio.Buffer$UnsafeCursor`;
  #L246efc.  call `<init>`(v0) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L246f02.  call temp:= `readAndWriteUnsafe`(v1, v0) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L246f08.  v0:= temp @kind object;
  #L246f0a.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v2 @kind this, `okio.Buffer$UnsafeCursor` v3 @kind object @name `unsafeCursor`) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L246f1c.  v0:= v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L246f20.  if v0 == 0 then goto L246f34;
  #L246f24.  v0:= new `java.lang.IllegalStateException`;
  #L246f28.  v1:= "already attached to a buffer" @kind object;
  #L246f2c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246f32.  throw v0;
  #L246f34.  v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v2 @kind object;
  #L246f38.  v0:= 1I;
  #L246f3a.  v3.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v0 @kind boolean;
  #L246f3e.  return v3 @kind object;
}
procedure `byte` `readByte`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L246f50.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246f54.  v8:= 0L;
  #L246f58.  v6:= lcmp(v6, v8);
  #L246f5c.  if v6 != 0 then goto L246f70;
  #L246f60.  v6:= new `java.lang.IllegalStateException`;
  #L246f64.  v7:= "size == 0" @kind object;
  #L246f68.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246f6e.  throw v6;
  #L246f70.  v5:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246f74.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L246f78.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L246f7c.  v1:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246f80.  v4:= v3 + 1;
  #L246f84.  v0:= v1[v3] @kind byte;
  #L246f88.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246f8c.  v8:= 1L;
  #L246f90.  v6:= v6 - v8 @kind long;
  #L246f92.  v10.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L246f96.  if v4 != v2 then goto L246fae;
  #L246f9a.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L246fa0.  v6:= temp @kind object;
  #L246fa2.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L246fa6.  call `recycle`(v5) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L246fac.  return v0;
  #L246fae.  v5.`okio.Segment.pos` @type ^`int` := v4;
  #L246fb2.  goto L246fac;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L246fc4.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246fc8.  call temp:= `readByteArray`(v4, v2) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #Try_end0.  
  #L246fce.  v1:= temp @kind object;
  #L246fd0.  return v1 @kind object;
  #L246fd2.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L246fd4.  v1:= new `java.lang.AssertionError`;
  #L246fd8.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L246fde.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L246fd2;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v7 @kind this, `long` v8 @name `byteCount`) @signature `Lokio/Buffer;.readByteArray:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L247000.  v0:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247004.  v2:= 0L;
  #L247008.  v4:= v8 @kind wide;
  #L24700a.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L247010.  v0:= 2147483647L;
  #L247016.  v0:= lcmp(v8, v0);
  #L24701a.  if v0 <= 0 then goto L247050;
  #L24701e.  v0:= new `java.lang.IllegalArgumentException`;
  #L247022.  v1:= new `java.lang.StringBuilder`;
  #L247026.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24702c.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L247030.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247036.  v1:= temp @kind object;
  #L247038.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24703e.  v1:= temp @kind object;
  #L247040.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L247046.  v1:= temp @kind object;
  #L247048.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24704e.  throw v0;
  #L247050.  v0:= (`int`) v8 @kind l2i;
  #L247052.  v6:= new `byte`[v0];
  #L247056.  call `readFully`(v7, v6) @signature `Lokio/Buffer;.readFully:([B)V` @kind virtual;
  #L24705c.  return v6 @kind object;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L247070.  v0:= new `okio.ByteString`;
  #L247074.  call temp:= `readByteArray`(v2) @signature `Lokio/Buffer;.readByteArray:()[B` @kind virtual;
  #L24707a.  v1:= temp @kind object;
  #L24707c.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L247082.  return v0 @kind object;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v3 @kind this, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.readByteString:(J)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L247094.  v0:= new `okio.ByteString`;
  #L247098.  call temp:= `readByteArray`(v3, v4) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L24709e.  v1:= temp @kind object;
  #L2470a0.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L2470a6.  return v0 @kind object;
}
procedure `long` `readDecimalLong`(`okio.Buffer` v24 @kind this) @signature `Lokio/Buffer;.readDecimalLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;

  #L2470b8.  v0:= v24 @kind object;
  #L2470bc.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2470c0.  v20:= v0 @kind wide;
  #L2470c4.  v22:= 0L;
  #L2470c8.  v20:= lcmp(v20, v22);
  #L2470cc.  if v20 != 0 then goto L2470e0;
  #L2470d0.  v20:= new `java.lang.IllegalStateException`;
  #L2470d4.  v21:= "size == 0" @kind object;
  #L2470d8.  call `<init>`(v20, v21) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2470de.  throw v20;
  #L2470e0.  v18:= 0L;
  #L2470e4.  v16:= 0I;
  #L2470e8.  v10:= 0I;
  #L2470ea.  v8:= 0I;
  #L2470ec.  v14:= -922337203685477580L;
  #L2470f6.  v12:= -7L;
  #L2470fa.  v0:= v24 @kind object;
  #L2470fe.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247102.  v17:= v0 @kind object;
  #L247106.  v0:= v17 @kind object;
  #L24710a.  v6:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24710e.  v0:= v17 @kind object;
  #L247112.  v11:= v0.`okio.Segment.pos` @type ^`int`;
  #L247116.  v0:= v17 @kind object;
  #L24711a.  v9:= v0.`okio.Segment.limit` @type ^`int`;
  #L24711e.  if v11 >= v9 then goto L247242;
  #L247122.  v4:= v6[v11] @kind byte;
  #L247126.  v20:= 48I;
  #L24712a.  v0:= v20;
  #L24712e.  if v4 < v0 then goto L2471e6;
  #L247132.  v20:= 57I;
  #L247136.  v0:= v20;
  #L24713a.  if v4 > v0 then goto L2471e6;
  #L24713e.  v7:= v4 - 48;
  #L247142.  v20:= lcmp(v18, v14);
  #L247146.  if v20 < 0 then goto L247160;
  #L24714a.  v20:= lcmp(v18, v14);
  #L24714e.  if v20 != 0 then goto L2471ca;
  #L247152.  v0:= (`long`) v7 @kind i2l;
  #L247154.  v20:= v0 @kind wide;
  #L247158.  v20:= lcmp(v20, v12);
  #L24715c.  if v20 >= 0 then goto L2471ca;
  #L247160.  v20:= new `okio.Buffer`;
  #L247164.  call `<init>`(v20) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L24716a.  v0:= v20 @kind object;
  #L24716e.  v1:= v18 @kind wide;
  #L247172.  call temp:= `writeDecimalLong`(v0, v1) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L247178.  v20:= temp @kind object;
  #L24717a.  v0:= v20 @kind object;
  #L24717e.  call temp:= `writeByte`(v0, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L247184.  v5:= temp @kind object;
  #L247186.  if v10 != 0 then goto L247190;
  #L24718a.  call temp:= `readByte`(v5) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L247190.  v20:= new `java.lang.NumberFormatException`;
  #L247194.  v21:= new `java.lang.StringBuilder`;
  #L247198.  call `<init>`(v21) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24719e.  v22:= "Number too large: " @kind object;
  #L2471a2.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2471a8.  v21:= temp @kind object;
  #L2471aa.  call temp:= `readUtf8`(v5) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L2471b0.  v22:= temp @kind object;
  #L2471b2.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2471b8.  v21:= temp @kind object;
  #L2471ba.  call temp:= `toString`(v21) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2471c0.  v21:= temp @kind object;
  #L2471c2.  call `<init>`(v20, v21) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2471c8.  throw v20;
  #L2471ca.  v20:= 10L;
  #L2471ce.  v18:= v18 * v20 @kind long;
  #L2471d2.  v0:= (`long`) v7 @kind i2l;
  #L2471d4.  v20:= v0 @kind wide;
  #L2471d8.  v18:= v18 + v20 @kind long;
  #L2471dc.  v11:= v11 + 1;
  #L2471e0.  v16:= v16 + 1;
  #L2471e4.  goto L24711e;
  #L2471e6.  v20:= 45I;
  #L2471ea.  v0:= v20;
  #L2471ee.  if v4 != v0 then goto L247202;
  #L2471f2.  if v16 != 0 then goto L247202;
  #L2471f6.  v10:= 1I;
  #L2471f8.  v20:= 1L;
  #L2471fc.  v12:= v12 - v20 @kind long;
  #L247200.  goto L2471dc;
  #L247202.  if v16 != 0 then goto L247240;
  #L247206.  v20:= new `java.lang.NumberFormatException`;
  #L24720a.  v21:= new `java.lang.StringBuilder`;
  #L24720e.  call `<init>`(v21) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L247214.  v22:= "Expected leading [0-9] or '-' character but was 0x" @kind object;
  #L247218.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24721e.  v21:= temp @kind object;
  #L247220.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L247226.  v22:= temp @kind object;
  #L247228.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24722e.  v21:= temp @kind object;
  #L247230.  call temp:= `toString`(v21) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L247236.  v21:= temp @kind object;
  #L247238.  call `<init>`(v20, v21) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24723e.  throw v20;
  #L247240.  v8:= 1I;
  #L247242.  if v11 != v9 then goto L2472a0;
  #L247246.  call temp:= `pop`(v17) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24724c.  v20:= temp @kind object;
  #L24724e.  v0:= v20 @kind object;
  #L247252.  v1:= v24 @kind object;
  #L247256.  v1.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L24725a.  call `recycle`(v17) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L247260.  if v8 != 0 then goto L247274;
  #L247264.  v0:= v24 @kind object;
  #L247268.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24726c.  v20:= v0 @kind object;
  #L247270.  if v20 != 0 then goto L2470fa;
  #L247274.  v0:= v24 @kind object;
  #L247278.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24727c.  v20:= v0 @kind wide;
  #L247280.  v0:= v16;
  #L247284.  v0:= (`long`) v0 @kind i2l;
  #L247286.  v22:= v0 @kind wide;
  #L24728a.  v20:= v20 - v22 @kind long;
  #L24728e.  v0:= v20 @kind wide;
  #L247292.  v2:= v24 @kind object;
  #L247296.  v2.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24729a.  if v10 == 0 then goto L2472aa;
  #L24729e.  return v18 @kind wide;
  #L2472a0.  v0:= v17 @kind object;
  #L2472a4.  v0.`okio.Segment.pos` @type ^`int` := v11;
  #L2472a8.  goto L247260;
  #L2472aa.  v0:= v18 @kind wide;
  #L2472ae.  v0:= -v0 @kind long;
  #L2472b0.  v18:= v0 @kind wide;
  #L2472b4.  goto L24729e;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v3 @kind this, `java.io.InputStream` v4 @kind object @name `in`) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2472c8.  v0:= 9223372036854775807L;
  #L2472d2.  v2:= 1I;
  #L2472d4.  call `readFrom`(v3, v4, v0, v2) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L2472da.  return v3 @kind object;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v4 @kind this, `java.io.InputStream` v5 @kind object @name `in`, `long` v6 @name `byteCount`) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2472ec.  v0:= 0L;
  #L2472f0.  v0:= lcmp(v6, v0);
  #L2472f4.  if v0 >= 0 then goto L24732a;
  #L2472f8.  v0:= new `java.lang.IllegalArgumentException`;
  #L2472fc.  v1:= new `java.lang.StringBuilder`;
  #L247300.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L247306.  v2:= "byteCount < 0: " @kind object;
  #L24730a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247310.  v1:= temp @kind object;
  #L247312.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L247318.  v1:= temp @kind object;
  #L24731a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L247320.  v1:= temp @kind object;
  #L247322.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247328.  throw v0;
  #L24732a.  v0:= 0I;
  #L24732c.  call `readFrom`(v4, v5, v6, v0) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L247332.  return v4 @kind object;
}
procedure `void` `readFully`(`okio.Buffer` v2 @kind this, `okio.Buffer` v3 @kind object @name `sink`, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.readFully:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L247344.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247348.  v0:= lcmp(v0, v4);
  #L24734c.  if v0 >= 0 then goto L247366;
  #L247350.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247354.  call `write`(v3, v2, v0) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L24735a.  v0:= new `java.io.EOFException`;
  #L24735e.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L247364.  throw v0;
  #L247366.  call `write`(v3, v2, v4) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L24736c.  return @kind void;
}
procedure `void` `readFully`(`okio.Buffer` v3 @kind this, `byte`[] v4 @kind object @name `sink`) @signature `Lokio/Buffer;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L247380.  v0:= 0I;
  #L247382.  v2:= length @variable v4;
  #L247384.  if v0 >= v2 then goto L2473aa;
  #L247388.  v2:= length @variable v4;
  #L24738a.  v2:= v2 - v0 @kind int;
  #L24738c.  call temp:= `read`(v3, v4, v0, v2) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L247392.  v1:= temp;
  #L247394.  v2:= -1I;
  #L247396.  if v1 != v2 then goto L2473a6;
  #L24739a.  v2:= new `java.io.EOFException`;
  #L24739e.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L2473a4.  throw v2;
  #L2473a6.  v0:= v0 + v1 @kind int;
  #L2473a8.  goto L247382;
  #L2473aa.  return @kind void;
}
procedure `long` `readHexadecimalUnsignedLong`(`okio.Buffer` v18 @kind this) @signature `Lokio/Buffer;.readHexadecimalUnsignedLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L2473bc.  v0:= v18 @kind object;
  #L2473c0.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2473c4.  v16:= 0L;
  #L2473c8.  v11:= lcmp(v14, v16);
  #L2473cc.  if v11 != 0 then goto L2473e0;
  #L2473d0.  v11:= new `java.lang.IllegalStateException`;
  #L2473d4.  v14:= "size == 0" @kind object;
  #L2473d8.  call `<init>`(v11, v14) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2473de.  throw v11;
  #L2473e0.  v12:= 0L;
  #L2473e4.  v9:= 0I;
  #L2473e6.  v6:= 0I;
  #L2473e8.  v0:= v18 @kind object;
  #L2473ec.  v10:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2473f0.  v4:= v10.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2473f4.  v8:= v10.`okio.Segment.pos` @type ^`int`;
  #L2473f8.  v7:= v10.`okio.Segment.limit` @type ^`int`;
  #L2473fc.  if v8 >= v7 then goto L2474f2;
  #L247400.  v2:= v4[v8] @kind byte;
  #L247404.  v11:= 48I;
  #L247408.  if v2 < v11 then goto L24747e;
  #L24740c.  v11:= 57I;
  #L247410.  if v2 > v11 then goto L24747e;
  #L247414.  v5:= v2 + -48;
  #L247418.  v14:= -3.105036184601418E231D;
  #L24741c.  v14:= v14 ^& v12 @kind long;
  #L24741e.  v16:= 0L;
  #L247422.  v11:= lcmp(v14, v16);
  #L247426.  if v11 == 0 then goto L247538;
  #L24742a.  v11:= new `okio.Buffer`;
  #L24742e.  call `<init>`(v11) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L247434.  call temp:= `writeHexadecimalUnsignedLong`(v11, v12) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L24743a.  v11:= temp @kind object;
  #L24743c.  call temp:= `writeByte`(v11, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L247442.  v3:= temp @kind object;
  #L247444.  v11:= new `java.lang.NumberFormatException`;
  #L247448.  v14:= new `java.lang.StringBuilder`;
  #L24744c.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L247452.  v15:= "Number too large: " @kind object;
  #L247456.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24745c.  v14:= temp @kind object;
  #L24745e.  call temp:= `readUtf8`(v3) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L247464.  v15:= temp @kind object;
  #L247466.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24746c.  v14:= temp @kind object;
  #L24746e.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L247474.  v14:= temp @kind object;
  #L247476.  call `<init>`(v11, v14) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24747c.  throw v11;
  #L24747e.  v11:= 97I;
  #L247482.  if v2 < v11 then goto L247498;
  #L247486.  v11:= 102I;
  #L24748a.  if v2 > v11 then goto L247498;
  #L24748e.  v11:= v2 + -97;
  #L247492.  v5:= v11 + 10;
  #L247496.  goto L247418;
  #L247498.  v11:= 65I;
  #L24749c.  if v2 < v11 then goto L2474b2;
  #L2474a0.  v11:= 70I;
  #L2474a4.  if v2 > v11 then goto L2474b2;
  #L2474a8.  v11:= v2 + -65;
  #L2474ac.  v5:= v11 + 10;
  #L2474b0.  goto L247418;
  #L2474b2.  if v9 != 0 then goto L2474f0;
  #L2474b6.  v11:= new `java.lang.NumberFormatException`;
  #L2474ba.  v14:= new `java.lang.StringBuilder`;
  #L2474be.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2474c4.  v15:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L2474c8.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2474ce.  v14:= temp @kind object;
  #L2474d0.  call temp:= `toHexString`(v2) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L2474d6.  v15:= temp @kind object;
  #L2474d8.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2474de.  v14:= temp @kind object;
  #L2474e0.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2474e6.  v14:= temp @kind object;
  #L2474e8.  call `<init>`(v11, v14) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2474ee.  throw v11;
  #L2474f0.  v6:= 1I;
  #L2474f2.  if v8 != v7 then goto L24754c;
  #L2474f6.  call temp:= `pop`(v10) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L2474fc.  v11:= temp @kind object;
  #L2474fe.  v0:= v18 @kind object;
  #L247502.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v11 @kind object;
  #L247506.  call `recycle`(v10) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24750c.  if v6 != 0 then goto L24751c;
  #L247510.  v0:= v18 @kind object;
  #L247514.  v11:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247518.  if v11 != 0 then goto L2473e8;
  #L24751c.  v0:= v18 @kind object;
  #L247520.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247524.  v0:= (`long`) v9 @kind i2l;
  #L247526.  v16:= v0 @kind wide;
  #L24752a.  v14:= v14 - v16 @kind long;
  #L24752e.  v0:= v18 @kind object;
  #L247532.  v0.`okio.Buffer.size` @type ^`long` := v14 @kind wide;
  #L247536.  return v12 @kind wide;
  #L247538.  v11:= 4I;
  #L24753a.  v12:= v12 ^< v11 @kind long;
  #L24753c.  v14:= (`long`) v5 @kind i2l;
  #L24753e.  v12:= v12 ^| v14 @kind long;
  #L247540.  v8:= v8 + 1;
  #L247544.  v9:= v9 + 1;
  #L247548.  goto L2473fc;
  #L24754c.  v10.`okio.Segment.pos` @type ^`int` := v8;
  #L247550.  goto L24750c;
}
procedure `int` `readInt`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L247564.  v8:= 4L;
  #L247568.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24756c.  v6:= lcmp(v6, v8);
  #L247570.  if v6 >= 0 then goto L2475aa;
  #L247574.  v6:= new `java.lang.IllegalStateException`;
  #L247578.  v7:= new `java.lang.StringBuilder`;
  #L24757c.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L247582.  v8:= "size < 4: " @kind object;
  #L247586.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24758c.  v7:= temp @kind object;
  #L24758e.  v8:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247592.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L247598.  v7:= temp @kind object;
  #L24759a.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2475a0.  v7:= temp @kind object;
  #L2475a2.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2475a8.  throw v6;
  #L2475aa.  v5:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2475ae.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L2475b2.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L2475b6.  v6:= v2 - v3 @kind int;
  #L2475ba.  v7:= 4I;
  #L2475bc.  if v6 >= v7 then goto L247606;
  #L2475c0.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2475c6.  v6:= temp;
  #L2475c8.  v6:= v6 ^& 255;
  #L2475cc.  v6:= v6 ^< 24;
  #L2475d0.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2475d6.  v7:= temp;
  #L2475d8.  v7:= v7 ^& 255;
  #L2475dc.  v7:= v7 ^< 16;
  #L2475e0.  v6:= v6 ^| v7 @kind int;
  #L2475e2.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2475e8.  v7:= temp;
  #L2475ea.  v7:= v7 ^& 255;
  #L2475ee.  v7:= v7 ^< 8;
  #L2475f2.  v6:= v6 ^| v7 @kind int;
  #L2475f4.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2475fa.  v7:= temp;
  #L2475fc.  v7:= v7 ^& 255;
  #L247600.  v1:= v6 ^| v7 @kind int;
  #L247604.  return v1;
  #L247606.  v0:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24760a.  v4:= v3 + 1;
  #L24760e.  v6:= v0[v3] @kind byte;
  #L247612.  v6:= v6 ^& 255;
  #L247616.  v6:= v6 ^< 24;
  #L24761a.  v3:= v4 + 1;
  #L24761e.  v7:= v0[v4] @kind byte;
  #L247622.  v7:= v7 ^& 255;
  #L247626.  v7:= v7 ^< 16;
  #L24762a.  v6:= v6 ^| v7 @kind int;
  #L24762c.  v4:= v3 + 1;
  #L247630.  v7:= v0[v3] @kind byte;
  #L247634.  v7:= v7 ^& 255;
  #L247638.  v7:= v7 ^< 8;
  #L24763c.  v6:= v6 ^| v7 @kind int;
  #L24763e.  v3:= v4 + 1;
  #L247642.  v7:= v0[v4] @kind byte;
  #L247646.  v7:= v7 ^& 255;
  #L24764a.  v1:= v6 ^| v7 @kind int;
  #L24764e.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247652.  v6:= v6 - v8 @kind long;
  #L247654.  v10.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L247658.  if v3 != v2 then goto L247670;
  #L24765c.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L247662.  v6:= temp @kind object;
  #L247664.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L247668.  call `recycle`(v5) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24766e.  goto L247604;
  #L247670.  v5.`okio.Segment.pos` @type ^`int` := v3;
  #L247674.  goto L247604;
}
procedure `int` `readIntLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readIntLe:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247688.  call temp:= `readInt`(v1) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L24768e.  v0:= temp;
  #L247690.  call temp:= `reverseBytesInt`(v0) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L247696.  v0:= temp;
  #L247698.  return v0;
}
procedure `long` `readLong`(`okio.Buffer` v14 @kind this) @signature `Lokio/Buffer;.readLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L2476ac.  v8:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2476b0.  v10:= 8L;
  #L2476b4.  v5:= lcmp(v8, v10);
  #L2476b8.  if v5 >= 0 then goto L2476f2;
  #L2476bc.  v5:= new `java.lang.IllegalStateException`;
  #L2476c0.  v8:= new `java.lang.StringBuilder`;
  #L2476c4.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2476ca.  v9:= "size < 8: " @kind object;
  #L2476ce.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2476d4.  v8:= temp @kind object;
  #L2476d6.  v10:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2476da.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2476e0.  v8:= temp @kind object;
  #L2476e2.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2476e8.  v8:= temp @kind object;
  #L2476ea.  call `<init>`(v5, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2476f0.  throw v5;
  #L2476f2.  v4:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2476f6.  v2:= v4.`okio.Segment.pos` @type ^`int`;
  #L2476fa.  v1:= v4.`okio.Segment.limit` @type ^`int`;
  #L2476fe.  v5:= v1 - v2 @kind int;
  #L247702.  v8:= 8I;
  #L247706.  if v5 >= v8 then goto L247742;
  #L24770a.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L247710.  v5:= temp;
  #L247712.  v8:= (`long`) v5 @kind i2l;
  #L247714.  v10:= 4294967295L;
  #L24771e.  v8:= v8 ^& v10 @kind long;
  #L247720.  v5:= 32I;
  #L247724.  v8:= v8 ^< v5 @kind long;
  #L247726.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L24772c.  v5:= temp;
  #L24772e.  v10:= (`long`) v5 @kind i2l;
  #L247730.  v12:= 4294967295L;
  #L24773a.  v10:= v10 ^& v12 @kind long;
  #L24773c.  v6:= v8 ^| v10 @kind long;
  #L247740.  return v6 @kind wide;
  #L247742.  v0:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247746.  v3:= v2 + 1;
  #L24774a.  v5:= v0[v2] @kind byte;
  #L24774e.  v8:= (`long`) v5 @kind i2l;
  #L247750.  v10:= 255L;
  #L247754.  v8:= v8 ^& v10 @kind long;
  #L247756.  v5:= 56I;
  #L24775a.  v8:= v8 ^< v5 @kind long;
  #L24775c.  v2:= v3 + 1;
  #L247760.  v5:= v0[v3] @kind byte;
  #L247764.  v10:= (`long`) v5 @kind i2l;
  #L247766.  v12:= 255L;
  #L24776a.  v10:= v10 ^& v12 @kind long;
  #L24776c.  v5:= 48I;
  #L247770.  v10:= v10 ^< v5 @kind long;
  #L247772.  v8:= v8 ^| v10 @kind long;
  #L247774.  v3:= v2 + 1;
  #L247778.  v5:= v0[v2] @kind byte;
  #L24777c.  v10:= (`long`) v5 @kind i2l;
  #L24777e.  v12:= 255L;
  #L247782.  v10:= v10 ^& v12 @kind long;
  #L247784.  v5:= 40I;
  #L247788.  v10:= v10 ^< v5 @kind long;
  #L24778a.  v8:= v8 ^| v10 @kind long;
  #L24778c.  v2:= v3 + 1;
  #L247790.  v5:= v0[v3] @kind byte;
  #L247794.  v10:= (`long`) v5 @kind i2l;
  #L247796.  v12:= 255L;
  #L24779a.  v10:= v10 ^& v12 @kind long;
  #L24779c.  v5:= 32I;
  #L2477a0.  v10:= v10 ^< v5 @kind long;
  #L2477a2.  v8:= v8 ^| v10 @kind long;
  #L2477a4.  v3:= v2 + 1;
  #L2477a8.  v5:= v0[v2] @kind byte;
  #L2477ac.  v10:= (`long`) v5 @kind i2l;
  #L2477ae.  v12:= 255L;
  #L2477b2.  v10:= v10 ^& v12 @kind long;
  #L2477b4.  v5:= 24I;
  #L2477b8.  v10:= v10 ^< v5 @kind long;
  #L2477ba.  v8:= v8 ^| v10 @kind long;
  #L2477bc.  v2:= v3 + 1;
  #L2477c0.  v5:= v0[v3] @kind byte;
  #L2477c4.  v10:= (`long`) v5 @kind i2l;
  #L2477c6.  v12:= 255L;
  #L2477ca.  v10:= v10 ^& v12 @kind long;
  #L2477cc.  v5:= 16I;
  #L2477d0.  v10:= v10 ^< v5 @kind long;
  #L2477d2.  v8:= v8 ^| v10 @kind long;
  #L2477d4.  v3:= v2 + 1;
  #L2477d8.  v5:= v0[v2] @kind byte;
  #L2477dc.  v10:= (`long`) v5 @kind i2l;
  #L2477de.  v12:= 255L;
  #L2477e2.  v10:= v10 ^& v12 @kind long;
  #L2477e4.  v5:= 8I;
  #L2477e8.  v10:= v10 ^< v5 @kind long;
  #L2477ea.  v8:= v8 ^| v10 @kind long;
  #L2477ec.  v2:= v3 + 1;
  #L2477f0.  v5:= v0[v3] @kind byte;
  #L2477f4.  v10:= (`long`) v5 @kind i2l;
  #L2477f6.  v12:= 255L;
  #L2477fa.  v10:= v10 ^& v12 @kind long;
  #L2477fc.  v6:= v8 ^| v10 @kind long;
  #L247800.  v8:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247804.  v10:= 8L;
  #L247808.  v8:= v8 - v10 @kind long;
  #L24780a.  v14.`okio.Buffer.size` @type ^`long` := v8 @kind wide;
  #L24780e.  if v2 != v1 then goto L247826;
  #L247812.  call temp:= `pop`(v4) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L247818.  v5:= temp @kind object;
  #L24781a.  v14.`okio.Buffer.head` @type ^`okio.Segment` := v5 @kind object;
  #L24781e.  call `recycle`(v4) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L247824.  goto L247740;
  #L247826.  v4.`okio.Segment.pos` @type ^`int` := v2;
  #L24782a.  goto L247740;
}
procedure `long` `readLongLe`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readLongLe:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24783c.  call temp:= `readLong`(v2) @signature `Lokio/Buffer;.readLong:()J` @kind virtual;
  #L247842.  v0:= temp @kind wide;
  #L247844.  call temp:= `reverseBytesLong`(v0) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L24784a.  v0:= temp @kind wide;
  #L24784c.  return v0 @kind wide;
}
procedure `short` `readShort`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L247860.  v8:= 2L;
  #L247864.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247868.  v6:= lcmp(v6, v8);
  #L24786c.  if v6 >= 0 then goto L2478a6;
  #L247870.  v6:= new `java.lang.IllegalStateException`;
  #L247874.  v7:= new `java.lang.StringBuilder`;
  #L247878.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24787e.  v8:= "size < 2: " @kind object;
  #L247882.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247888.  v7:= temp @kind object;
  #L24788a.  v8:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24788e.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L247894.  v7:= temp @kind object;
  #L247896.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24789c.  v7:= temp @kind object;
  #L24789e.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2478a4.  throw v6;
  #L2478a6.  v5:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2478aa.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L2478ae.  v1:= v5.`okio.Segment.limit` @type ^`int`;
  #L2478b2.  v6:= v1 - v2 @kind int;
  #L2478b6.  v7:= 2I;
  #L2478b8.  if v6 >= v7 then goto L2478e0;
  #L2478bc.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2478c2.  v6:= temp;
  #L2478c4.  v6:= v6 ^& 255;
  #L2478c8.  v6:= v6 ^< 8;
  #L2478cc.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2478d2.  v7:= temp;
  #L2478d4.  v7:= v7 ^& 255;
  #L2478d8.  v4:= v6 ^| v7 @kind int;
  #L2478dc.  v6:= (`short`) v4 @kind i2s;
  #L2478de.  return v6;
  #L2478e0.  v0:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2478e4.  v3:= v2 + 1;
  #L2478e8.  v6:= v0[v2] @kind byte;
  #L2478ec.  v6:= v6 ^& 255;
  #L2478f0.  v6:= v6 ^< 8;
  #L2478f4.  v2:= v3 + 1;
  #L2478f8.  v7:= v0[v3] @kind byte;
  #L2478fc.  v7:= v7 ^& 255;
  #L247900.  v4:= v6 ^| v7 @kind int;
  #L247904.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247908.  v6:= v6 - v8 @kind long;
  #L24790a.  v10.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L24790e.  if v2 != v1 then goto L247928;
  #L247912.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L247918.  v6:= temp @kind object;
  #L24791a.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L24791e.  call `recycle`(v5) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L247924.  v6:= (`short`) v4 @kind i2s;
  #L247926.  goto L2478de;
  #L247928.  v5.`okio.Segment.pos` @type ^`int` := v2;
  #L24792c.  goto L247924;
}
procedure `short` `readShortLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readShortLe:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247940.  call temp:= `readShort`(v1) @signature `Lokio/Buffer;.readShort:()S` @kind virtual;
  #L247946.  v0:= temp;
  #L247948.  call temp:= `reverseBytesShort`(v0) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L24794e.  v0:= temp;
  #L247950.  return v0;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v9 @kind this, `long` v10 @name `byteCount`, `java.nio.charset.Charset` v12 @kind object @name `charset`) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L247964.  v2:= 0L;
  #L247968.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24796c.  v4:= v10 @kind wide;
  #L24796e.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L247974.  if v12 != 0 then goto L247988;
  #L247978.  v0:= new `java.lang.IllegalArgumentException`;
  #L24797c.  v1:= "charset == null" @kind object;
  #L247980.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247986.  throw v0;
  #L247988.  v0:= 2147483647L;
  #L24798e.  v0:= lcmp(v10, v0);
  #L247992.  if v0 <= 0 then goto L2479c8;
  #L247996.  v0:= new `java.lang.IllegalArgumentException`;
  #L24799a.  v1:= new `java.lang.StringBuilder`;
  #L24799e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2479a4.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L2479a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2479ae.  v1:= temp @kind object;
  #L2479b0.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2479b6.  v1:= temp @kind object;
  #L2479b8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2479be.  v1:= temp @kind object;
  #L2479c0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2479c6.  throw v0;
  #L2479c8.  v0:= lcmp(v10, v2);
  #L2479cc.  if v0 != 0 then goto L2479d6;
  #L2479d0.  v6:= "" @kind object;
  #L2479d4.  return v6 @kind object;
  #L2479d6.  v7:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2479da.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L2479de.  v0:= (`long`) v0 @kind i2l;
  #L2479e0.  v0:= v0 + v10 @kind long;
  #L2479e2.  v2:= v7.`okio.Segment.limit` @type ^`int`;
  #L2479e6.  v2:= (`long`) v2 @kind i2l;
  #L2479e8.  v0:= lcmp(v0, v2);
  #L2479ec.  if v0 <= 0 then goto L247a04;
  #L2479f0.  v6:= new `java.lang.String`;
  #L2479f4.  call temp:= `readByteArray`(v9, v10) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L2479fa.  v0:= temp @kind object;
  #L2479fc.  call `<init>`(v6, v0, v12) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L247a02.  goto L2479d4;
  #L247a04.  v6:= new `java.lang.String`;
  #L247a08.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247a0c.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L247a10.  v2:= (`int`) v10 @kind l2i;
  #L247a12.  call `<init>`(v6, v0, v1, v2, v12) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L247a18.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L247a1c.  v0:= (`long`) v0 @kind i2l;
  #L247a1e.  v0:= v0 + v10 @kind long;
  #L247a20.  v0:= (`int`) v0 @kind l2i;
  #L247a22.  v7.`okio.Segment.pos` @type ^`int` := v0;
  #L247a26.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247a2a.  v0:= v0 - v10 @kind long;
  #L247a2c.  v9.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L247a30.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L247a34.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L247a38.  if v0 != v1 then goto L2479d4;
  #L247a3c.  call temp:= `pop`(v7) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L247a42.  v0:= temp @kind object;
  #L247a44.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L247a48.  call `recycle`(v7) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L247a4e.  goto L2479d4;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v4 @kind this, `java.nio.charset.Charset` v5 @kind object @name `charset`) @signature `Lokio/Buffer;.readString:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L247a60.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247a64.  call temp:= `readString`(v4, v2, v5) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L247a6a.  v1:= temp @kind object;
  #L247a6c.  return v1 @kind object;
  #L247a6e.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L247a70.  v1:= new `java.lang.AssertionError`;
  #L247a74.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L247a7a.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L247a6e;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247a9c.  v0:= new `okio.Buffer$UnsafeCursor`;
  #L247aa0.  call `<init>`(v0) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L247aa6.  call temp:= `readUnsafe`(v1, v0) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L247aac.  v0:= temp @kind object;
  #L247aae.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v2 @kind this, `okio.Buffer$UnsafeCursor` v3 @kind object @name `unsafeCursor`) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L247ac0.  v0:= v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L247ac4.  if v0 == 0 then goto L247ad8;
  #L247ac8.  v0:= new `java.lang.IllegalStateException`;
  #L247acc.  v1:= "already attached to a buffer" @kind object;
  #L247ad0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247ad6.  throw v0;
  #L247ad8.  v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v2 @kind object;
  #L247adc.  v0:= 0I;
  #L247ade.  v3.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v0 @kind boolean;
  #L247ae2.  return v3 @kind object;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L247af4.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247af8.  v1:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L247afc.  call temp:= `readString`(v4, v2, v1) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L247b02.  v1:= temp @kind object;
  #L247b04.  return v1 @kind object;
  #L247b06.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L247b08.  v1:= new `java.lang.AssertionError`;
  #L247b0c.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L247b12.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L247b06;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v1 @kind this, `long` v2 @name `byteCount`) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247b34.  v0:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L247b38.  call temp:= `readString`(v1, v2, v0) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L247b3e.  v0:= temp @kind object;
  #L247b40.  return v0 @kind object;
}
procedure `int` `readUtf8CodePoint`(`okio.Buffer` v12 @kind this) @signature `Lokio/Buffer;.readUtf8CodePoint:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L247b54.  v10:= 0L;
  #L247b58.  v6:= 65533I;
  #L247b5e.  v8:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247b62.  v7:= lcmp(v8, v10);
  #L247b66.  if v7 != 0 then goto L247b76;
  #L247b6a.  v6:= new `java.io.EOFException`;
  #L247b6e.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L247b74.  throw v6;
  #L247b76.  call temp:= `getByte`(v12, v10) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L247b7c.  v1:= temp;
  #L247b7e.  v7:= v1 ^& 128;
  #L247b82.  if v7 != 0 then goto L247c0e;
  #L247b86.  v3:= v1 ^& 127;
  #L247b8a.  v2:= 1I;
  #L247b8c.  v5:= 0I;
  #L247b8e.  v8:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247b92.  v10:= (`long`) v2 @kind i2l;
  #L247b94.  v7:= lcmp(v8, v10);
  #L247b98.  if v7 >= 0 then goto L247c64;
  #L247b9c.  v6:= new `java.io.EOFException`;
  #L247ba0.  v7:= new `java.lang.StringBuilder`;
  #L247ba4.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L247baa.  v8:= "size < " @kind object;
  #L247bae.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247bb4.  v7:= temp @kind object;
  #L247bb6.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L247bbc.  v7:= temp @kind object;
  #L247bbe.  v8:= ": " @kind object;
  #L247bc2.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247bc8.  v7:= temp @kind object;
  #L247bca.  v8:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247bce.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L247bd4.  v7:= temp @kind object;
  #L247bd6.  v8:= " (to read code point prefixed 0x" @kind object;
  #L247bda.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247be0.  v7:= temp @kind object;
  #L247be2.  call temp:= `toHexString`(v1) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L247be8.  v8:= temp @kind object;
  #L247bea.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247bf0.  v7:= temp @kind object;
  #L247bf2.  v8:= ")" @kind object;
  #L247bf6.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247bfc.  v7:= temp @kind object;
  #L247bfe.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L247c04.  v7:= temp @kind object;
  #L247c06.  call `<init>`(v6, v7) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247c0c.  throw v6;
  #L247c0e.  v7:= v1 ^& 224;
  #L247c12.  v8:= 192I;
  #L247c16.  if v7 != v8 then goto L247c26;
  #L247c1a.  v3:= v1 ^& 31;
  #L247c1e.  v2:= 2I;
  #L247c20.  v5:= 128I;
  #L247c24.  goto L247b8e;
  #L247c26.  v7:= v1 ^& 240;
  #L247c2a.  v8:= 224I;
  #L247c2e.  if v7 != v8 then goto L247c3e;
  #L247c32.  v3:= v1 ^& 15;
  #L247c36.  v2:= 3I;
  #L247c38.  v5:= 2048I;
  #L247c3c.  goto L247b8e;
  #L247c3e.  v7:= v1 ^& 248;
  #L247c42.  v8:= 240I;
  #L247c46.  if v7 != v8 then goto L247c56;
  #L247c4a.  v3:= v1 ^& 7;
  #L247c4e.  v2:= 4I;
  #L247c50.  v5:= 65536I;
  #L247c54.  goto L247b8e;
  #L247c56.  v8:= 1L;
  #L247c5a.  call `skip`(v12, v8) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L247c60.  v3:= v6;
  #L247c62.  return v3;
  #L247c64.  v4:= 1I;
  #L247c66.  if v4 >= v2 then goto L247c9c;
  #L247c6a.  v8:= (`long`) v4 @kind i2l;
  #L247c6c.  call temp:= `getByte`(v12, v8) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L247c72.  v0:= temp;
  #L247c74.  v7:= v0 ^& 192;
  #L247c78.  v8:= 128I;
  #L247c7c.  if v7 != v8 then goto L247c90;
  #L247c80.  v3:= v3 ^< 6;
  #L247c84.  v7:= v0 ^& 63;
  #L247c88.  v3:= v3 ^| v7 @kind int;
  #L247c8a.  v4:= v4 + 1;
  #L247c8e.  goto L247c66;
  #L247c90.  v8:= (`long`) v4 @kind i2l;
  #L247c92.  call `skip`(v12, v8) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L247c98.  v3:= v6;
  #L247c9a.  goto L247c62;
  #L247c9c.  v8:= (`long`) v2 @kind i2l;
  #L247c9e.  call `skip`(v12, v8) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L247ca4.  v7:= 1114111I;
  #L247caa.  if v3 <= v7 then goto L247cb2;
  #L247cae.  v3:= v6;
  #L247cb0.  goto L247c62;
  #L247cb2.  v7:= 55296I;
  #L247cb8.  if v3 < v7 then goto L247cca;
  #L247cbc.  v7:= 57343I;
  #L247cc2.  if v3 > v7 then goto L247cca;
  #L247cc6.  v3:= v6;
  #L247cc8.  goto L247c62;
  #L247cca.  if v3 >= v5 then goto L247c62;
  #L247cce.  v3:= v6;
  #L247cd0.  goto L247c62;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.readUtf8Line:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L247ce4.  v2:= 10I;
  #L247ce8.  call temp:= `indexOf`(v6, v2) @signature `Lokio/Buffer;.indexOf:(B)J` @kind virtual;
  #L247cee.  v0:= temp @kind wide;
  #L247cf0.  v2:= -1L;
  #L247cf4.  v2:= lcmp(v0, v2);
  #L247cf8.  if v2 != 0 then goto L247d1e;
  #L247cfc.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247d00.  v4:= 0L;
  #L247d04.  v2:= lcmp(v2, v4);
  #L247d08.  if v2 == 0 then goto L247d1a;
  #L247d0c.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247d10.  call temp:= `readUtf8`(v6, v2) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L247d16.  v2:= temp @kind object;
  #L247d18.  return v2 @kind object;
  #L247d1a.  v2:= 0I;
  #L247d1c.  goto L247d18;
  #L247d1e.  call temp:= `readUtf8Line`(v6, v0) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L247d24.  v2:= temp @kind object;
  #L247d26.  goto L247d18;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v7 @kind this, `long` v8 @name `newline`) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L247d38.  v4:= 1L;
  #L247d3c.  v2:= 0L;
  #L247d40.  v2:= lcmp(v8, v2);
  #L247d44.  if v2 <= 0 then goto L247d76;
  #L247d48.  v2:= v8 - v4 @kind long;
  #L247d4c.  call temp:= `getByte`(v7, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L247d52.  v2:= temp;
  #L247d54.  v3:= 13I;
  #L247d58.  if v2 != v3 then goto L247d76;
  #L247d5c.  v2:= v8 - v4 @kind long;
  #L247d60.  call temp:= `readUtf8`(v7, v2) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L247d66.  v0:= temp @kind object;
  #L247d68.  v2:= 2L;
  #L247d6c.  call `skip`(v7, v2) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L247d72.  v1:= v0 @kind object;
  #L247d74.  return v1 @kind object;
  #L247d76.  call temp:= `readUtf8`(v7, v8) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L247d7c.  v0:= temp @kind object;
  #L247d7e.  call `skip`(v7, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L247d84.  v1:= v0 @kind object;
  #L247d86.  goto L247d74;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readUtf8LineStrict:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L247d98.  v0:= 9223372036854775807L;
  #L247da2.  call temp:= `readUtf8LineStrict`(v2, v0) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @kind virtual;
  #L247da8.  v0:= temp @kind object;
  #L247daa.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v17 @kind this, `long` v18 @name `limit`) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L247dbc.  v2:= 0L;
  #L247dc0.  v2:= lcmp(v18, v2);
  #L247dc4.  if v2 >= 0 then goto L247dfe;
  #L247dc8.  v2:= new `java.lang.IllegalArgumentException`;
  #L247dcc.  v3:= new `java.lang.StringBuilder`;
  #L247dd0.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L247dd6.  v4:= "limit < 0: " @kind object;
  #L247dda.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247de0.  v3:= temp @kind object;
  #L247de2.  v0:= v18 @kind wide;
  #L247de6.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L247dec.  v3:= temp @kind object;
  #L247dee.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L247df4.  v3:= temp @kind object;
  #L247df6.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247dfc.  throw v2;
  #L247dfe.  v2:= 9223372036854775807L;
  #L247e08.  v2:= lcmp(v18, v2);
  #L247e0c.  if v2 != 0 then goto L247e48;
  #L247e10.  v6:= 9223372036854775807L;
  #L247e1a.  v3:= 10I;
  #L247e1e.  v4:= 0L;
  #L247e22.  v2:= v17 @kind object;
  #L247e26.  call temp:= `indexOf`(v2, v3, v4, v6) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L247e2c.  v14:= temp @kind wide;
  #L247e2e.  v2:= -1L;
  #L247e32.  v2:= lcmp(v14, v2);
  #L247e36.  if v2 == 0 then goto L247e52;
  #L247e3a.  v0:= v17 @kind object;
  #L247e3e.  call temp:= `readUtf8Line`(v0, v14) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L247e44.  v2:= temp @kind object;
  #L247e46.  return v2 @kind object;
  #L247e48.  v2:= 1L;
  #L247e4c.  v6:= v18 + v2 @kind long;
  #L247e50.  goto L247e1a;
  #L247e52.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L247e58.  v2:= temp @kind wide;
  #L247e5a.  v2:= lcmp(v6, v2);
  #L247e5e.  if v2 >= 0 then goto L247ea0;
  #L247e62.  v2:= 1L;
  #L247e66.  v2:= v6 - v2 @kind long;
  #L247e6a.  v0:= v17 @kind object;
  #L247e6e.  call temp:= `getByte`(v0, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L247e74.  v2:= temp;
  #L247e76.  v3:= 13I;
  #L247e7a.  if v2 != v3 then goto L247ea0;
  #L247e7e.  v0:= v17 @kind object;
  #L247e82.  call temp:= `getByte`(v0, v6) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L247e88.  v2:= temp;
  #L247e8a.  v3:= 10I;
  #L247e8e.  if v2 != v3 then goto L247ea0;
  #L247e92.  v0:= v17 @kind object;
  #L247e96.  call temp:= `readUtf8Line`(v0, v6) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L247e9c.  v2:= temp @kind object;
  #L247e9e.  goto L247e46;
  #L247ea0.  v9:= new `okio.Buffer`;
  #L247ea4.  call `<init>`(v9) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L247eaa.  v10:= 0L;
  #L247eae.  v2:= 32L;
  #L247eb2.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L247eb8.  v4:= temp @kind wide;
  #L247eba.  call temp:= `min`(v2, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L247ec0.  v12:= temp @kind wide;
  #L247ec2.  v8:= v17 @kind object;
  #L247ec6.  call temp:= `copyTo`(v8, v9, v10, v12) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L247ecc.  v2:= new `java.io.EOFException`;
  #L247ed0.  v3:= new `java.lang.StringBuilder`;
  #L247ed4.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L247eda.  v4:= "\\n not found: limit=" @kind object;
  #L247ede.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247ee4.  v3:= temp @kind object;
  #L247ee6.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L247eec.  v4:= temp @kind wide;
  #L247eee.  v0:= v18 @kind wide;
  #L247ef2.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L247ef8.  v4:= temp @kind wide;
  #L247efa.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L247f00.  v3:= temp @kind object;
  #L247f02.  v4:= " content=" @kind object;
  #L247f06.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247f0c.  v3:= temp @kind object;
  #L247f0e.  call temp:= `readByteString`(v9) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L247f14.  v4:= temp @kind object;
  #L247f16.  call temp:= `hex`(v4) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L247f1c.  v4:= temp @kind object;
  #L247f1e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247f24.  v3:= temp @kind object;
  #L247f26.  v4:= 8230I;
  #L247f2a.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L247f30.  v3:= temp @kind object;
  #L247f32.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L247f38.  v3:= temp @kind object;
  #L247f3a.  call `<init>`(v2, v3) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247f40.  throw v2;
}
procedure `boolean` `request`(`okio.Buffer` v3 @kind this, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.request:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L247f54.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247f58.  v0:= lcmp(v0, v4);
  #L247f5c.  if v0 < 0 then goto L247f64;
  #L247f60.  v0:= 1I;
  #L247f62.  return v0;
  #L247f64.  v0:= 0I;
  #L247f66.  goto L247f62;
}
procedure `void` `require`(`okio.Buffer` v3 @kind this, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.require:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L247f78.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247f7c.  v0:= lcmp(v0, v4);
  #L247f80.  if v0 >= 0 then goto L247f90;
  #L247f84.  v0:= new `java.io.EOFException`;
  #L247f88.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L247f8e.  throw v0;
  #L247f90.  return @kind void;
}
procedure `java.util.List` `segmentSizes`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.segmentSizes:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L247fa4.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247fa8.  if v2 != 0 then goto L247fb6;
  #L247fac.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L247fb2.  v0:= temp @kind object;
  #L247fb4.  return v0 @kind object;
  #L247fb6.  v0:= new `java.util.ArrayList`;
  #L247fba.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L247fc0.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247fc4.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L247fc8.  v3:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247fcc.  v3:= v3.`okio.Segment.pos` @type ^`int`;
  #L247fd0.  v2:= v2 - v3 @kind int;
  #L247fd2.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L247fd8.  v2:= temp @kind object;
  #L247fda.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L247fe0.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247fe4.  v1:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L247fe8.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247fec.  if v1 == v2 then goto L247fb4;
  #L247ff0.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L247ff4.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L247ff8.  v2:= v2 - v3 @kind int;
  #L247ffa.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L248000.  v2:= temp @kind object;
  #L248002.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L248008.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24800c.  goto L247fe8;
}
procedure `int` `select`(`okio.Buffer` v12 @kind this, `okio.Options` v13 @kind object @name `options`) @signature `Lokio/Buffer;.select:(Lokio/Options;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L248020.  v1:= v12.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248024.  if v1 != 0 then goto L248036;
  #L248028.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L24802c.  call temp:= `indexOf`(v13, v0) @signature `Lokio/Options;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L248032.  v8:= temp;
  #L248034.  return v8;
  #L248036.  v6:= v13.`okio.Options.byteStrings` @type ^`okio.ByteString`[] @kind object;
  #L24803a.  v8:= 0I;
  #L24803c.  v9:= length @variable v6;
  #L24803e.  if v8 >= v9 then goto L24809e;
  #L248042.  v3:= v6[v8] @kind object;
  #L248046.  v4:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24804a.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L248050.  v0:= temp;
  #L248052.  v10:= (`long`) v0 @kind i2l;
  #L248054.  v0:= lcmp(v4, v10);
  #L248058.  if v0 < 0 then goto L248098;
  #L24805c.  v2:= v1.`okio.Segment.pos` @type ^`int`;
  #L248060.  v4:= 0I;
  #L248062.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L248068.  v5:= temp;
  #L24806a.  v0:= v12 @kind object;
  #L24806c.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L248072.  v0:= temp;
  #L248074.  if v0 == 0 then goto L248098;
  #Try_start0.  
  #L248078.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L24807e.  v0:= temp;
  #L248080.  v4:= (`long`) v0 @kind i2l;
  #L248082.  call `skip`(v12, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #Try_end0.  
  #L248088.  goto L248034;
  #L24808a.  v7:= Exception @type ^`java.io.EOFException` @kind object;
  #L24808c.  v0:= new `java.lang.AssertionError`;
  #L248090.  call `<init>`(v0, v7) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L248096.  throw v0;
  #L248098.  v8:= v8 + 1;
  #L24809c.  goto L24803e;
  #L24809e.  v8:= -1I;
  #L2480a0.  goto L248034;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L24808a;
}
procedure `int` `selectPrefix`(`okio.Buffer` v14 @kind this, `okio.Options` v15 @kind object @name `options`) @signature `Lokio/Buffer;.selectPrefix:(Lokio/Options;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L2480c4.  v1:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2480c8.  v6:= v15.`okio.Options.byteStrings` @type ^`okio.ByteString`[] @kind object;
  #L2480cc.  v7:= 0I;
  #L2480ce.  v8:= length @variable v6;
  #L2480d0.  if v7 >= v8 then goto L248110;
  #L2480d4.  v3:= v6[v7] @kind object;
  #L2480d8.  v10:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2480dc.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L2480e2.  v0:= temp;
  #L2480e4.  v12:= (`long`) v0 @kind i2l;
  #L2480e6.  call temp:= `min`(v10, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2480ec.  v10:= temp @kind wide;
  #L2480ee.  v5:= (`int`) v10 @kind l2i;
  #L2480f0.  if v5 == 0 then goto L248108;
  #L2480f4.  v2:= v1.`okio.Segment.pos` @type ^`int`;
  #L2480f8.  v4:= 0I;
  #L2480fa.  v0:= v14 @kind object;
  #L2480fc.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L248102.  v0:= temp;
  #L248104.  if v0 == 0 then goto L24810a;
  #L248108.  return v7;
  #L24810a.  v7:= v7 + 1;
  #L24810e.  goto L2480d0;
  #L248110.  v7:= -1I;
  #L248112.  goto L248108;
}
procedure `okio.ByteString` `sha1`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha1:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L248124.  v0:= "SHA-1" @kind object;
  #L248128.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L24812e.  v0:= temp @kind object;
  #L248130.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha256:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L248144.  v0:= "SHA-256" @kind object;
  #L248148.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L24814e.  v0:= temp @kind object;
  #L248150.  return v0 @kind object;
}
procedure `okio.ByteString` `sha512`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha512:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L248164.  v0:= "SHA-512" @kind object;
  #L248168.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L24816e.  v0:= temp @kind object;
  #L248170.  return v0 @kind object;
}
procedure `long` `size`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.size:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248184.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248188.  return v0 @kind wide;
}
procedure `void` `skip`(`okio.Buffer` v7 @kind this, `long` v8 @name `byteCount`) @signature `Lokio/Buffer;.skip:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L24819c.  v2:= 0L;
  #L2481a0.  v2:= lcmp(v8, v2);
  #L2481a4.  if v2 <= 0 then goto L248224;
  #L2481a8.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2481ac.  if v2 != 0 then goto L2481bc;
  #L2481b0.  v2:= new `java.io.EOFException`;
  #L2481b4.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L2481ba.  throw v2;
  #L2481bc.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2481c0.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L2481c4.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2481c8.  v3:= v3.`okio.Segment.pos` @type ^`int`;
  #L2481cc.  v2:= v2 - v3 @kind int;
  #L2481ce.  v2:= (`long`) v2 @kind i2l;
  #L2481d0.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2481d6.  v2:= temp @kind wide;
  #L2481d8.  v1:= (`int`) v2 @kind l2i;
  #L2481da.  v2:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2481de.  v4:= (`long`) v1 @kind i2l;
  #L2481e0.  v2:= v2 - v4 @kind long;
  #L2481e2.  v7.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L2481e6.  v2:= (`long`) v1 @kind i2l;
  #L2481e8.  v8:= v8 - v2 @kind long;
  #L2481ea.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2481ee.  v3:= v2.`okio.Segment.pos` @type ^`int`;
  #L2481f2.  v3:= v3 + v1 @kind int;
  #L2481f4.  v2.`okio.Segment.pos` @type ^`int` := v3;
  #L2481f8.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2481fc.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L248200.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248204.  v3:= v3.`okio.Segment.limit` @type ^`int`;
  #L248208.  if v2 != v3 then goto L24819c;
  #L24820c.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248210.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L248216.  v2:= temp @kind object;
  #L248218.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L24821c.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L248222.  goto L24819c;
  #L248224.  return @kind void;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L248238.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24823c.  v2:= 2147483647L;
  #L248242.  v0:= lcmp(v0, v2);
  #L248246.  if v0 <= 0 then goto L248280;
  #L24824a.  v0:= new `java.lang.IllegalArgumentException`;
  #L24824e.  v1:= new `java.lang.StringBuilder`;
  #L248252.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248258.  v2:= "size > Integer.MAX_VALUE: " @kind object;
  #L24825c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248262.  v1:= temp @kind object;
  #L248264.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248268.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24826e.  v1:= temp @kind object;
  #L248270.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248276.  v1:= temp @kind object;
  #L248278.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24827e.  throw v0;
  #L248280.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248284.  v0:= (`int`) v0 @kind l2i;
  #L248286.  call temp:= `snapshot`(v4, v0) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L24828c.  v0:= temp @kind object;
  #L24828e.  return v0 @kind object;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v1 @kind this, `int` v2 @name `byteCount`) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2482a0.  if v2 != 0 then goto L2482aa;
  #L2482a4.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L2482a8.  return v0 @kind object;
  #L2482aa.  v0:= new `okio.SegmentedByteString`;
  #L2482ae.  call `<init>`(v0, v1, v2) @signature `Lokio/SegmentedByteString;.<init>:(Lokio/Buffer;I)V` @kind direct;
  #L2482b4.  goto L2482a8;
}
procedure `okio.Timeout` `timeout`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2482c8.  v0:= `@@okio.Timeout.NONE` @type ^`okio.Timeout` @kind object;
  #L2482cc.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2482e0.  call temp:= `snapshot`(v1) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @kind virtual;
  #L2482e6.  v0:= temp @kind object;
  #L2482e8.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L2482ee.  v0:= temp @kind object;
  #L2482f0.  return v0 @kind object;
}
procedure `okio.Segment` `writableSegment`(`okio.Buffer` v3 @kind this, `int` v4 @name `minimumCapacity`) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L248304.  v2:= 8192I;
  #L248308.  v1:= 1I;
  #L24830a.  if v4 < v1 then goto L248312;
  #L24830e.  if v4 <= v2 then goto L24831e;
  #L248312.  v1:= new `java.lang.IllegalArgumentException`;
  #L248316.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L24831c.  throw v1;
  #L24831e.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248322.  if v1 != 0 then goto L248348;
  #L248326.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L24832c.  v1:= temp @kind object;
  #L24832e.  v3.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L248332.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248336.  v2:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24833a.  v0:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24833e.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v0 @kind object;
  #L248342.  v1.`okio.Segment.next` @type ^`okio.Segment` := v0 @kind object;
  #L248346.  return v0 @kind object;
  #L248348.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24834c.  v0:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L248350.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L248354.  v1:= v1 + v4 @kind int;
  #L248356.  if v1 > v2 then goto L248362;
  #L24835a.  v1:= v0.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L24835e.  if v1 != 0 then goto L248346;
  #L248362.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L248368.  v1:= temp @kind object;
  #L24836a.  call temp:= `push`(v0, v1) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L248370.  v0:= temp @kind object;
  #L248372.  goto L248346;
}
procedure `int` `write`(`okio.Buffer` v8 @kind this, `java.nio.ByteBuffer` v9 @kind object @name `source`) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L248384.  if v9 != 0 then goto L248398;
  #L248388.  v4:= new `java.lang.IllegalArgumentException`;
  #L24838c.  v5:= "source == null" @kind object;
  #L248390.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248396.  throw v4;
  #L248398.  call temp:= `remaining`(v9) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L24839e.  v0:= temp;
  #L2483a0.  v1:= v0;
  #L2483a2.  if v1 <= 0 then goto L2483dc;
  #L2483a6.  v4:= 1I;
  #L2483a8.  call temp:= `writableSegment`(v8, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L2483ae.  v2:= temp @kind object;
  #L2483b0.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L2483b4.  v4:= v4 - 8192;
  #L2483b8.  call temp:= `min`(v1, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2483be.  v3:= temp;
  #L2483c0.  v4:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2483c4.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L2483c8.  call temp:= `get`(v9, v4, v5, v3) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L2483ce.  v1:= v1 - v3 @kind int;
  #L2483d0.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L2483d4.  v4:= v4 + v3 @kind int;
  #L2483d6.  v2.`okio.Segment.limit` @type ^`int` := v4;
  #L2483da.  goto L2483a2;
  #L2483dc.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2483e0.  v6:= (`long`) v0 @kind i2l;
  #L2483e2.  v4:= v4 + v6 @kind long;
  #L2483e4.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L2483e8.  return v0;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object @name `byteString`) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2483fc.  if v3 != 0 then goto L248410;
  #L248400.  v0:= new `java.lang.IllegalArgumentException`;
  #L248404.  v1:= "byteString == null" @kind object;
  #L248408.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24840e.  throw v0;
  #L248410.  call `write`(v3, v2) @signature `Lokio/ByteString;.write:(Lokio/Buffer;)V` @kind virtual;
  #L248416.  return v2 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object @name `source`) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248428.  if v3 != 0 then goto L24843c;
  #L24842c.  v0:= new `java.lang.IllegalArgumentException`;
  #L248430.  v1:= "source == null" @kind object;
  #L248434.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24843a.  throw v0;
  #L24843c.  v0:= 0I;
  #L24843e.  v1:= length @variable v3;
  #L248440.  call temp:= `write`(v2, v3, v0, v1) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L248446.  v0:= temp @kind object;
  #L248448.  return v0 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v9 @kind this, `byte`[] v10 @kind object @name `source`, `int` v11 @name `offset`, `int` v12 @name `byteCount`) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L24845c.  if v10 != 0 then goto L248470;
  #L248460.  v0:= new `java.lang.IllegalArgumentException`;
  #L248464.  v1:= "source == null" @kind object;
  #L248468.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24846e.  throw v0;
  #L248470.  v0:= length @variable v10;
  #L248472.  v0:= (`long`) v0 @kind i2l;
  #L248474.  v2:= (`long`) v11 @kind i2l;
  #L248476.  v4:= (`long`) v12 @kind i2l;
  #L248478.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L24847e.  v6:= v11 + v12 @kind int;
  #L248482.  if v11 >= v6 then goto L2484c0;
  #L248486.  v0:= 1I;
  #L248488.  call temp:= `writableSegment`(v9, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L24848e.  v7:= temp @kind object;
  #L248490.  v0:= v6 - v11 @kind int;
  #L248494.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L248498.  v1:= v1 - 8192;
  #L24849c.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2484a2.  v8:= temp;
  #L2484a4.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2484a8.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L2484ac.  call `arraycopy`(v10, v11, v0, v1, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2484b2.  v11:= v11 + v8 @kind int;
  #L2484b4.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L2484b8.  v0:= v0 + v8 @kind int;
  #L2484ba.  v7.`okio.Segment.limit` @type ^`int` := v0;
  #L2484be.  goto L248482;
  #L2484c0.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2484c4.  v2:= (`long`) v12 @kind i2l;
  #L2484c6.  v0:= v0 + v2 @kind long;
  #L2484c8.  v9.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L2484cc.  return v9 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2484e0.  call temp:= `write`(v1, v2) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L2484e6.  v0:= temp @kind object;
  #L2484e8.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v4 @kind this, `okio.Source` v5 @kind object @name `source`, `long` v6 @name `byteCount`) @signature `Lokio/Buffer;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2484fc.  v2:= 0L;
  #L248500.  v2:= lcmp(v6, v2);
  #L248504.  if v2 <= 0 then goto L24852c;
  #L248508.  call temp:= `read`(v5, v4, v6) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L24850e.  v0:= temp @kind wide;
  #L248510.  v2:= -1L;
  #L248514.  v2:= lcmp(v0, v2);
  #L248518.  if v2 != 0 then goto L248528;
  #L24851c.  v2:= new `java.io.EOFException`;
  #L248520.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L248526.  throw v2;
  #L248528.  v6:= v6 - v0 @kind long;
  #L24852a.  goto L2484fc;
  #L24852c.  return v4 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v1 @kind this, `byte`[] v2 @kind object) @signature `Lokio/Buffer;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248540.  call temp:= `write`(v1, v2) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L248546.  v0:= temp @kind object;
  #L248548.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/Buffer;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L24855c.  call temp:= `write`(v1, v2, v3, v4) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L248562.  v0:= temp @kind object;
  #L248564.  return v0 @kind object;
}
procedure `void` `write`(`okio.Buffer` v10 @kind this, `okio.Buffer` v11 @kind object @name `source`, `long` v12 @name `byteCount`) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L248578.  v2:= 0L;
  #L24857c.  if v11 != 0 then goto L248590;
  #L248580.  v0:= new `java.lang.IllegalArgumentException`;
  #L248584.  v1:= "source == null" @kind object;
  #L248588.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24858e.  throw v0;
  #L248590.  if v11 != v10 then goto L2485a4;
  #L248594.  v0:= new `java.lang.IllegalArgumentException`;
  #L248598.  v1:= "source == this" @kind object;
  #L24859c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2485a2.  throw v0;
  #L2485a4.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2485a8.  v4:= v12 @kind wide;
  #L2485aa.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2485b0.  v0:= lcmp(v12, v2);
  #L2485b4.  if v0 <= 0 then goto L248636;
  #L2485b8.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2485bc.  v0:= v0.`okio.Segment.limit` @type ^`int`;
  #L2485c0.  v1:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2485c4.  v1:= v1.`okio.Segment.pos` @type ^`int`;
  #L2485c8.  v0:= v0 - v1 @kind int;
  #L2485ca.  v0:= (`long`) v0 @kind i2l;
  #L2485cc.  v0:= lcmp(v12, v0);
  #L2485d0.  if v0 >= 0 then goto L248654;
  #L2485d4.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2485d8.  if v0 == 0 then goto L248638;
  #L2485dc.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2485e0.  v9:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L2485e4.  if v9 == 0 then goto L248642;
  #L2485e8.  v0:= v9.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L2485ec.  if v0 == 0 then goto L248642;
  #L2485f0.  v0:= v9.`okio.Segment.limit` @type ^`int`;
  #L2485f4.  v0:= (`long`) v0 @kind i2l;
  #L2485f6.  v4:= v12 + v0 @kind long;
  #L2485fa.  v0:= v9.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L2485fe.  if v0 == 0 then goto L24863c;
  #L248602.  v0:= 0I;
  #L248604.  v0:= (`long`) v0 @kind i2l;
  #L248606.  v0:= v4 - v0 @kind long;
  #L24860a.  v4:= 8192L;
  #L24860e.  v0:= lcmp(v0, v4);
  #L248612.  if v0 > 0 then goto L248642;
  #L248616.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24861a.  v1:= (`int`) v12 @kind l2i;
  #L24861c.  call `writeTo`(v0, v9, v1) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L248622.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248626.  v0:= v0 - v12 @kind long;
  #L248628.  v11.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24862c.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248630.  v0:= v0 + v12 @kind long;
  #L248632.  v10.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L248636.  return @kind void;
  #L248638.  v9:= 0I;
  #L24863a.  goto L2485e4;
  #L24863c.  v0:= v9.`okio.Segment.pos` @type ^`int`;
  #L248640.  goto L248604;
  #L248642.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248646.  v1:= (`int`) v12 @kind l2i;
  #L248648.  call temp:= `split`(v0, v1) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @kind virtual;
  #L24864e.  v0:= temp @kind object;
  #L248650.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L248654.  v8:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248658.  v0:= v8.`okio.Segment.limit` @type ^`int`;
  #L24865c.  v1:= v8.`okio.Segment.pos` @type ^`int`;
  #L248660.  v0:= v0 - v1 @kind int;
  #L248662.  v6:= (`long`) v0 @kind i2l;
  #L248664.  call temp:= `pop`(v8) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24866a.  v0:= temp @kind object;
  #L24866c.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L248670.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248674.  if v0 != 0 then goto L2486a8;
  #L248678.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L24867c.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248680.  v1:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248684.  v4:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248688.  v1.`okio.Segment.prev` @type ^`okio.Segment` := v4 @kind object;
  #L24868c.  v0.`okio.Segment.next` @type ^`okio.Segment` := v4 @kind object;
  #L248690.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248694.  v0:= v0 - v6 @kind long;
  #L248696.  v11.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24869a.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24869e.  v0:= v0 + v6 @kind long;
  #L2486a0.  v10.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L2486a4.  v12:= v12 - v6 @kind long;
  #L2486a6.  goto L2485b0;
  #L2486a8.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2486ac.  v9:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L2486b0.  call temp:= `push`(v9, v8) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L2486b6.  v9:= temp @kind object;
  #L2486b8.  call `compact`(v9) @signature `Lokio/Segment;.compact:()V` @kind virtual;
  #L2486be.  goto L248690;
}
procedure `long` `writeAll`(`okio.Buffer` v6 @kind this, `okio.Source` v7 @kind object @name `source`) @signature `Lokio/Buffer;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2486d0.  if v7 != 0 then goto L2486e4;
  #L2486d4.  v4:= new `java.lang.IllegalArgumentException`;
  #L2486d8.  v5:= "source == null" @kind object;
  #L2486dc.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2486e2.  throw v4;
  #L2486e4.  v2:= 0L;
  #L2486e8.  v4:= 8192L;
  #L2486ec.  call temp:= `read`(v7, v6, v4) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L2486f2.  v0:= temp @kind wide;
  #L2486f4.  v4:= -1L;
  #L2486f8.  v4:= lcmp(v0, v4);
  #L2486fc.  if v4 == 0 then goto L248704;
  #L248700.  v2:= v2 + v0 @kind long;
  #L248702.  goto L2486e8;
  #L248704.  return v2 @kind wide;
}
procedure `okio.Buffer` `writeByte`(`okio.Buffer` v6 @kind this, `int` v7 @name `b`) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L248718.  v1:= 1I;
  #L24871a.  call temp:= `writableSegment`(v6, v1) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L248720.  v0:= temp @kind object;
  #L248722.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L248726.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L24872a.  v3:= v2 + 1;
  #L24872e.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L248732.  v3:= (`byte`) v7 @kind i2b;
  #L248734.  v1[v2]:= v3 @kind byte;
  #L248738.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24873c.  v4:= 1L;
  #L248740.  v2:= v2 + v4 @kind long;
  #L248742.  v6.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L248746.  return v6 @kind object;
}
procedure `okio.BufferedSink` `writeByte`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248758.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24875e.  v0:= temp @kind object;
  #L248760.  return v0 @kind object;
}
procedure `okio.Buffer` `writeDecimalLong`(`okio.Buffer` v13 @kind this, `long` v14 @name `v`) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L248774.  v10:= 10L;
  #L248778.  v8:= 0L;
  #L24877c.  v6:= lcmp(v14, v8);
  #L248780.  if v6 != 0 then goto L248792;
  #L248784.  v6:= 48I;
  #L248788.  call temp:= `writeByte`(v13, v6) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24878e.  v13:= temp @kind object;
  #L248790.  return v13 @kind object;
  #L248792.  v2:= 0I;
  #L248794.  v6:= lcmp(v14, v8);
  #L248798.  if v6 >= 0 then goto L2487b6;
  #L24879c.  v14:= -v14 @kind long;
  #L24879e.  v6:= lcmp(v14, v8);
  #L2487a2.  if v6 >= 0 then goto L2487b4;
  #L2487a6.  v6:= "-9223372036854775808" @kind object;
  #L2487aa.  call temp:= `writeUtf8`(v13, v6) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L2487b0.  v13:= temp @kind object;
  #L2487b2.  goto L248790;
  #L2487b4.  v2:= 1I;
  #L2487b6.  v6:= 100000000L;
  #L2487bc.  v6:= lcmp(v14, v6);
  #L2487c0.  if v6 >= 0 then goto L248878;
  #L2487c4.  v6:= 10000L;
  #L2487c8.  v6:= lcmp(v14, v6);
  #L2487cc.  if v6 >= 0 then goto L24883c;
  #L2487d0.  v6:= 100L;
  #L2487d4.  v6:= lcmp(v14, v6);
  #L2487d8.  if v6 >= 0 then goto L248828;
  #L2487dc.  v6:= lcmp(v14, v10);
  #L2487e0.  if v6 >= 0 then goto L248824;
  #L2487e4.  v5:= 1I;
  #L2487e6.  if v2 == 0 then goto L2487ee;
  #L2487ea.  v5:= v5 + 1;
  #L2487ee.  call temp:= `writableSegment`(v13, v5) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L2487f4.  v4:= temp @kind object;
  #L2487f6.  v0:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2487fa.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L2487fe.  v3:= v6 + v5 @kind int;
  #L248802.  v6:= lcmp(v14, v8);
  #L248806.  if v6 == 0 then goto L248978;
  #L24880a.  v6:= v14 %% v10 @kind long;
  #L24880e.  v1:= (`int`) v6 @kind l2i;
  #L248810.  v3:= v3 + -1;
  #L248814.  v6:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L248818.  v6:= v6[v1] @kind byte;
  #L24881c.  v0[v3]:= v6 @kind byte;
  #L248820.  v14:= v14 / v10 @kind long;
  #L248822.  goto L248802;
  #L248824.  v5:= 2I;
  #L248826.  goto L2487e6;
  #L248828.  v6:= 1000L;
  #L24882c.  v6:= lcmp(v14, v6);
  #L248830.  if v6 >= 0 then goto L248838;
  #L248834.  v5:= 3I;
  #L248836.  goto L2487e6;
  #L248838.  v5:= 4I;
  #L24883a.  goto L2487e6;
  #L24883c.  v6:= 1000000L;
  #L248842.  v6:= lcmp(v14, v6);
  #L248846.  if v6 >= 0 then goto L248860;
  #L24884a.  v6:= 100000L;
  #L248850.  v6:= lcmp(v14, v6);
  #L248854.  if v6 >= 0 then goto L24885c;
  #L248858.  v5:= 5I;
  #L24885a.  goto L2487e6;
  #L24885c.  v5:= 6I;
  #L24885e.  goto L2487e6;
  #L248860.  v6:= 10000000L;
  #L248866.  v6:= lcmp(v14, v6);
  #L24886a.  if v6 >= 0 then goto L248872;
  #L24886e.  v5:= 7I;
  #L248870.  goto L2487e6;
  #L248872.  v5:= 8I;
  #L248876.  goto L2487e6;
  #L248878.  v6:= 1000000000000L;
  #L248882.  v6:= lcmp(v14, v6);
  #L248886.  if v6 >= 0 then goto L2488d4;
  #L24888a.  v6:= 10000000000L;
  #L248894.  v6:= lcmp(v14, v6);
  #L248898.  if v6 >= 0 then goto L2488b6;
  #L24889c.  v6:= 1000000000L;
  #L2488a2.  v6:= lcmp(v14, v6);
  #L2488a6.  if v6 >= 0 then goto L2488b0;
  #L2488aa.  v5:= 9I;
  #L2488ae.  goto L2487e6;
  #L2488b0.  v5:= 10I;
  #L2488b4.  goto L2487e6;
  #L2488b6.  v6:= 100000000000L;
  #L2488c0.  v6:= lcmp(v14, v6);
  #L2488c4.  if v6 >= 0 then goto L2488ce;
  #L2488c8.  v5:= 11I;
  #L2488cc.  goto L2487e6;
  #L2488ce.  v5:= 12I;
  #L2488d2.  goto L2487e6;
  #L2488d4.  v6:= 1000000000000000L;
  #L2488de.  v6:= lcmp(v14, v6);
  #L2488e2.  if v6 >= 0 then goto L248922;
  #L2488e6.  v6:= 10000000000000L;
  #L2488f0.  v6:= lcmp(v14, v6);
  #L2488f4.  if v6 >= 0 then goto L248900;
  #L2488f8.  v5:= 13I;
  #L2488fc.  goto L2487e6;
  #L248900.  v6:= 100000000000000L;
  #L24890a.  v6:= lcmp(v14, v6);
  #L24890e.  if v6 >= 0 then goto L24891a;
  #L248912.  v5:= 14I;
  #L248916.  goto L2487e6;
  #L24891a.  v5:= 15I;
  #L24891e.  goto L2487e6;
  #L248922.  v6:= 100000000000000000L;
  #L24892c.  v6:= lcmp(v14, v6);
  #L248930.  if v6 >= 0 then goto L248956;
  #L248934.  v6:= 10000000000000000L;
  #L24893e.  v6:= lcmp(v14, v6);
  #L248942.  if v6 >= 0 then goto L24894e;
  #L248946.  v5:= 16I;
  #L24894a.  goto L2487e6;
  #L24894e.  v5:= 17I;
  #L248952.  goto L2487e6;
  #L248956.  v6:= 1000000000000000000L;
  #L248960.  v6:= lcmp(v14, v6);
  #L248964.  if v6 >= 0 then goto L248970;
  #L248968.  v5:= 18I;
  #L24896c.  goto L2487e6;
  #L248970.  v5:= 19I;
  #L248974.  goto L2487e6;
  #L248978.  if v2 == 0 then goto L248988;
  #L24897c.  v3:= v3 + -1;
  #L248980.  v6:= 45I;
  #L248984.  v0[v3]:= v6 @kind byte;
  #L248988.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L24898c.  v6:= v6 + v5 @kind int;
  #L24898e.  v4.`okio.Segment.limit` @type ^`int` := v6;
  #L248992.  v6:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248996.  v8:= (`long`) v5 @kind i2l;
  #L248998.  v6:= v6 + v8 @kind long;
  #L24899a.  v13.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L24899e.  goto L248790;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2489b4.  call temp:= `writeDecimalLong`(v1, v2) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L2489ba.  v0:= temp @kind object;
  #L2489bc.  return v0 @kind object;
}
procedure `okio.Buffer` `writeHexadecimalUnsignedLong`(`okio.Buffer` v11 @kind this, `long` v12 @name `v`) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2489d0.  v6:= 0L;
  #L2489d4.  v5:= lcmp(v12, v6);
  #L2489d8.  if v5 != 0 then goto L2489ea;
  #L2489dc.  v5:= 48I;
  #L2489e0.  call temp:= `writeByte`(v11, v5) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2489e6.  v11:= temp @kind object;
  #L2489e8.  return v11 @kind object;
  #L2489ea.  call temp:= `highestOneBit`(v12) @signature `Ljava/lang/Long;.highestOneBit:(J)J` @kind static;
  #L2489f0.  v6:= temp @kind wide;
  #L2489f2.  call temp:= `numberOfTrailingZeros`(v6) @signature `Ljava/lang/Long;.numberOfTrailingZeros:(J)I` @kind static;
  #L2489f8.  v5:= temp;
  #L2489fa.  v5:= v5 / 4;
  #L2489fe.  v4:= v5 + 1;
  #L248a02.  call temp:= `writableSegment`(v11, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L248a08.  v3:= temp @kind object;
  #L248a0a.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L248a0e.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L248a12.  v5:= v5 + v4 @kind int;
  #L248a14.  v1:= v5 + -1;
  #L248a18.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L248a1c.  if v1 < v2 then goto L248a3e;
  #L248a20.  v5:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L248a24.  v6:= 15L;
  #L248a28.  v6:= v6 ^& v12 @kind long;
  #L248a2a.  v6:= (`int`) v6 @kind l2i;
  #L248a2c.  v5:= v5[v6] @kind byte;
  #L248a30.  v0[v1]:= v5 @kind byte;
  #L248a34.  v5:= 4I;
  #L248a36.  v12:= v12 ^>> v5 @kind long;
  #L248a38.  v1:= v1 + -1;
  #L248a3c.  goto L248a1c;
  #L248a3e.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L248a42.  v5:= v5 + v4 @kind int;
  #L248a44.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L248a48.  v6:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248a4c.  v8:= (`long`) v4 @kind i2l;
  #L248a4e.  v6:= v6 + v8 @kind long;
  #L248a50.  v11.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L248a54.  goto L2489e8;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248a68.  call temp:= `writeHexadecimalUnsignedLong`(v1, v2) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L248a6e.  v0:= temp @kind object;
  #L248a70.  return v0 @kind object;
}
procedure `okio.Buffer` `writeInt`(`okio.Buffer` v8 @kind this, `int` v9 @name `i`) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L248a84.  v4:= 4I;
  #L248a86.  call temp:= `writableSegment`(v8, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L248a8c.  v3:= temp @kind object;
  #L248a8e.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L248a92.  v1:= v3.`okio.Segment.limit` @type ^`int`;
  #L248a96.  v2:= v1 + 1;
  #L248a9a.  v4:= v9 ^>> 24;
  #L248a9e.  v4:= v4 ^& 255;
  #L248aa2.  v4:= (`byte`) v4 @kind i2b;
  #L248aa4.  v0[v1]:= v4 @kind byte;
  #L248aa8.  v1:= v2 + 1;
  #L248aac.  v4:= v9 ^>> 16;
  #L248ab0.  v4:= v4 ^& 255;
  #L248ab4.  v4:= (`byte`) v4 @kind i2b;
  #L248ab6.  v0[v2]:= v4 @kind byte;
  #L248aba.  v2:= v1 + 1;
  #L248abe.  v4:= v9 ^>> 8;
  #L248ac2.  v4:= v4 ^& 255;
  #L248ac6.  v4:= (`byte`) v4 @kind i2b;
  #L248ac8.  v0[v1]:= v4 @kind byte;
  #L248acc.  v1:= v2 + 1;
  #L248ad0.  v4:= v9 ^& 255;
  #L248ad4.  v4:= (`byte`) v4 @kind i2b;
  #L248ad6.  v0[v2]:= v4 @kind byte;
  #L248ada.  v3.`okio.Segment.limit` @type ^`int` := v1;
  #L248ade.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248ae2.  v6:= 4L;
  #L248ae6.  v4:= v4 + v6 @kind long;
  #L248ae8.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L248aec.  return v8 @kind object;
}
procedure `okio.BufferedSink` `writeInt`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248b00.  call temp:= `writeInt`(v1, v2) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L248b06.  v0:= temp @kind object;
  #L248b08.  return v0 @kind object;
}
procedure `okio.Buffer` `writeIntLe`(`okio.Buffer` v1 @kind this, `int` v2 @name `i`) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L248b1c.  call temp:= `reverseBytesInt`(v2) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L248b22.  v0:= temp;
  #L248b24.  call temp:= `writeInt`(v1, v0) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L248b2a.  v0:= temp @kind object;
  #L248b2c.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248b40.  call temp:= `writeIntLe`(v1, v2) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L248b46.  v0:= temp @kind object;
  #L248b48.  return v0 @kind object;
}
procedure `okio.Buffer` `writeLong`(`okio.Buffer` v9 @kind this, `long` v10 @name `v`) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L248b5c.  v8:= 8I;
  #L248b60.  v6:= 255L;
  #L248b64.  call temp:= `writableSegment`(v9, v8) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L248b6a.  v3:= temp @kind object;
  #L248b6c.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L248b70.  v1:= v3.`okio.Segment.limit` @type ^`int`;
  #L248b74.  v2:= v1 + 1;
  #L248b78.  v4:= 56I;
  #L248b7c.  v4:= v10 ^>> v4 @kind long;
  #L248b80.  v4:= v4 ^& v6 @kind long;
  #L248b82.  v4:= (`int`) v4 @kind l2i;
  #L248b84.  v4:= (`byte`) v4 @kind i2b;
  #L248b86.  v0[v1]:= v4 @kind byte;
  #L248b8a.  v1:= v2 + 1;
  #L248b8e.  v4:= 48I;
  #L248b92.  v4:= v10 ^>> v4 @kind long;
  #L248b96.  v4:= v4 ^& v6 @kind long;
  #L248b98.  v4:= (`int`) v4 @kind l2i;
  #L248b9a.  v4:= (`byte`) v4 @kind i2b;
  #L248b9c.  v0[v2]:= v4 @kind byte;
  #L248ba0.  v2:= v1 + 1;
  #L248ba4.  v4:= 40I;
  #L248ba8.  v4:= v10 ^>> v4 @kind long;
  #L248bac.  v4:= v4 ^& v6 @kind long;
  #L248bae.  v4:= (`int`) v4 @kind l2i;
  #L248bb0.  v4:= (`byte`) v4 @kind i2b;
  #L248bb2.  v0[v1]:= v4 @kind byte;
  #L248bb6.  v1:= v2 + 1;
  #L248bba.  v4:= 32I;
  #L248bbe.  v4:= v10 ^>> v4 @kind long;
  #L248bc2.  v4:= v4 ^& v6 @kind long;
  #L248bc4.  v4:= (`int`) v4 @kind l2i;
  #L248bc6.  v4:= (`byte`) v4 @kind i2b;
  #L248bc8.  v0[v2]:= v4 @kind byte;
  #L248bcc.  v2:= v1 + 1;
  #L248bd0.  v4:= 24I;
  #L248bd4.  v4:= v10 ^>> v4 @kind long;
  #L248bd8.  v4:= v4 ^& v6 @kind long;
  #L248bda.  v4:= (`int`) v4 @kind l2i;
  #L248bdc.  v4:= (`byte`) v4 @kind i2b;
  #L248bde.  v0[v1]:= v4 @kind byte;
  #L248be2.  v1:= v2 + 1;
  #L248be6.  v4:= 16I;
  #L248bea.  v4:= v10 ^>> v4 @kind long;
  #L248bee.  v4:= v4 ^& v6 @kind long;
  #L248bf0.  v4:= (`int`) v4 @kind l2i;
  #L248bf2.  v4:= (`byte`) v4 @kind i2b;
  #L248bf4.  v0[v2]:= v4 @kind byte;
  #L248bf8.  v2:= v1 + 1;
  #L248bfc.  v4:= v10 ^>> v8 @kind long;
  #L248c00.  v4:= v4 ^& v6 @kind long;
  #L248c02.  v4:= (`int`) v4 @kind l2i;
  #L248c04.  v4:= (`byte`) v4 @kind i2b;
  #L248c06.  v0[v1]:= v4 @kind byte;
  #L248c0a.  v1:= v2 + 1;
  #L248c0e.  v4:= v10 ^& v6 @kind long;
  #L248c12.  v4:= (`int`) v4 @kind l2i;
  #L248c14.  v4:= (`byte`) v4 @kind i2b;
  #L248c16.  v0[v2]:= v4 @kind byte;
  #L248c1a.  v3.`okio.Segment.limit` @type ^`int` := v1;
  #L248c1e.  v4:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248c22.  v6:= 8L;
  #L248c26.  v4:= v4 + v6 @kind long;
  #L248c28.  v9.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L248c2c.  return v9 @kind object;
}
procedure `okio.BufferedSink` `writeLong`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248c40.  call temp:= `writeLong`(v1, v2) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L248c46.  v0:= temp @kind object;
  #L248c48.  return v0 @kind object;
}
procedure `okio.Buffer` `writeLongLe`(`okio.Buffer` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L248c5c.  call temp:= `reverseBytesLong`(v4) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L248c62.  v0:= temp @kind wide;
  #L248c64.  call temp:= `writeLong`(v3, v0) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L248c6a.  v0:= temp @kind object;
  #L248c6c.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248c80.  call temp:= `writeLongLe`(v1, v2) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L248c86.  v0:= temp @kind object;
  #L248c88.  return v0 @kind object;
}
procedure `okio.Buffer` `writeShort`(`okio.Buffer` v8 @kind this, `int` v9 @name `s`) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L248c9c.  v4:= 2I;
  #L248c9e.  call temp:= `writableSegment`(v8, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L248ca4.  v3:= temp @kind object;
  #L248ca6.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L248caa.  v1:= v3.`okio.Segment.limit` @type ^`int`;
  #L248cae.  v2:= v1 + 1;
  #L248cb2.  v4:= v9 ^>> 8;
  #L248cb6.  v4:= v4 ^& 255;
  #L248cba.  v4:= (`byte`) v4 @kind i2b;
  #L248cbc.  v0[v1]:= v4 @kind byte;
  #L248cc0.  v1:= v2 + 1;
  #L248cc4.  v4:= v9 ^& 255;
  #L248cc8.  v4:= (`byte`) v4 @kind i2b;
  #L248cca.  v0[v2]:= v4 @kind byte;
  #L248cce.  v3.`okio.Segment.limit` @type ^`int` := v1;
  #L248cd2.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248cd6.  v6:= 2L;
  #L248cda.  v4:= v4 + v6 @kind long;
  #L248cdc.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L248ce0.  return v8 @kind object;
}
procedure `okio.BufferedSink` `writeShort`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248cf4.  call temp:= `writeShort`(v1, v2) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L248cfa.  v0:= temp @kind object;
  #L248cfc.  return v0 @kind object;
}
procedure `okio.Buffer` `writeShortLe`(`okio.Buffer` v1 @kind this, `int` v2 @name `s`) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L248d10.  v0:= (`short`) v2 @kind i2s;
  #L248d12.  call temp:= `reverseBytesShort`(v0) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L248d18.  v0:= temp;
  #L248d1a.  call temp:= `writeShort`(v1, v0) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L248d20.  v0:= temp @kind object;
  #L248d22.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248d34.  call temp:= `writeShortLe`(v1, v2) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L248d3a.  v0:= temp @kind object;
  #L248d3c.  return v0 @kind object;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v4 @kind this, `java.lang.String` v5 @kind object @name `string`, `int` v6 @name `beginIndex`, `int` v7 @name `endIndex`, `java.nio.charset.Charset` v8 @kind object @name `charset`) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L248d50.  if v5 != 0 then goto L248d64;
  #L248d54.  v1:= new `java.lang.IllegalArgumentException`;
  #L248d58.  v2:= "string == null" @kind object;
  #L248d5c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248d62.  throw v1;
  #L248d64.  if v6 >= 0 then goto L248d9a;
  #L248d68.  v1:= new `java.lang.IllegalAccessError`;
  #L248d6c.  v2:= new `java.lang.StringBuilder`;
  #L248d70.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248d76.  v3:= "beginIndex < 0: " @kind object;
  #L248d7a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248d80.  v2:= temp @kind object;
  #L248d82.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L248d88.  v2:= temp @kind object;
  #L248d8a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248d90.  v2:= temp @kind object;
  #L248d92.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248d98.  throw v1;
  #L248d9a.  if v7 >= v6 then goto L248de4;
  #L248d9e.  v1:= new `java.lang.IllegalArgumentException`;
  #L248da2.  v2:= new `java.lang.StringBuilder`;
  #L248da6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248dac.  v3:= "endIndex < beginIndex: " @kind object;
  #L248db0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248db6.  v2:= temp @kind object;
  #L248db8.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L248dbe.  v2:= temp @kind object;
  #L248dc0.  v3:= " < " @kind object;
  #L248dc4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248dca.  v2:= temp @kind object;
  #L248dcc.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L248dd2.  v2:= temp @kind object;
  #L248dd4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248dda.  v2:= temp @kind object;
  #L248ddc.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248de2.  throw v1;
  #L248de4.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L248dea.  v1:= temp;
  #L248dec.  if v7 <= v1 then goto L248e3e;
  #L248df0.  v1:= new `java.lang.IllegalArgumentException`;
  #L248df4.  v2:= new `java.lang.StringBuilder`;
  #L248df8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248dfe.  v3:= "endIndex > string.length: " @kind object;
  #L248e02.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248e08.  v2:= temp @kind object;
  #L248e0a.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L248e10.  v2:= temp @kind object;
  #L248e12.  v3:= " > " @kind object;
  #L248e16.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248e1c.  v2:= temp @kind object;
  #L248e1e.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L248e24.  v3:= temp;
  #L248e26.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L248e2c.  v2:= temp @kind object;
  #L248e2e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248e34.  v2:= temp @kind object;
  #L248e36.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248e3c.  throw v1;
  #L248e3e.  if v8 != 0 then goto L248e52;
  #L248e42.  v1:= new `java.lang.IllegalArgumentException`;
  #L248e46.  v2:= "charset == null" @kind object;
  #L248e4a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248e50.  throw v1;
  #L248e52.  v1:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L248e56.  call temp:= `equals`(v8, v1) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L248e5c.  v1:= temp;
  #L248e5e.  if v1 == 0 then goto L248e6c;
  #L248e62.  call temp:= `writeUtf8`(v4, v5, v6, v7) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L248e68.  v1:= temp @kind object;
  #L248e6a.  return v1 @kind object;
  #L248e6c.  call temp:= `substring`(v5, v6, v7) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L248e72.  v1:= temp @kind object;
  #L248e74.  call temp:= `getBytes`(v1, v8) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L248e7a.  v0:= temp @kind object;
  #L248e7c.  v1:= 0I;
  #L248e7e.  v2:= length @variable v0;
  #L248e80.  call temp:= `write`(v4, v0, v1, v2) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L248e86.  v1:= temp @kind object;
  #L248e88.  goto L248e6a;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `java.nio.charset.Charset` v4 @kind object @name `charset`) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248e9c.  v0:= 0I;
  #L248e9e.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L248ea4.  v1:= temp;
  #L248ea6.  call temp:= `writeString`(v2, v3, v0, v1, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L248eac.  v0:= temp @kind object;
  #L248eae.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248ec0.  call temp:= `writeString`(v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L248ec6.  v0:= temp @kind object;
  #L248ec8.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248edc.  call temp:= `writeString`(v1, v2, v3) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L248ee2.  v0:= temp @kind object;
  #L248ee4.  return v0 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v2 @kind this, `java.io.OutputStream` v3 @kind object @name `out`) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248ef8.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248efc.  call temp:= `writeTo`(v2, v3, v0) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @kind virtual;
  #L248f02.  v0:= temp @kind object;
  #L248f04.  return v0 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v10 @kind this, `java.io.OutputStream` v11 @kind object @name `out`, `long` v12 @name `byteCount`) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L248f18.  v2:= 0L;
  #L248f1c.  if v11 != 0 then goto L248f30;
  #L248f20.  v0:= new `java.lang.IllegalArgumentException`;
  #L248f24.  v1:= "out == null" @kind object;
  #L248f28.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248f2e.  throw v0;
  #L248f30.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248f34.  v4:= v12 @kind wide;
  #L248f36.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L248f3c.  v6:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248f40.  v0:= lcmp(v12, v2);
  #L248f44.  if v0 <= 0 then goto L248fa8;
  #L248f48.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L248f4c.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L248f50.  v0:= v0 - v1 @kind int;
  #L248f52.  v0:= (`long`) v0 @kind i2l;
  #L248f54.  call temp:= `min`(v12, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L248f5a.  v0:= temp @kind wide;
  #L248f5c.  v7:= (`int`) v0 @kind l2i;
  #L248f5e.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L248f62.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L248f66.  call `write`(v11, v0, v1, v7) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L248f6c.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L248f70.  v0:= v0 + v7 @kind int;
  #L248f72.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L248f76.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248f7a.  v4:= (`long`) v7 @kind i2l;
  #L248f7c.  v0:= v0 - v4 @kind long;
  #L248f7e.  v10.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L248f82.  v0:= (`long`) v7 @kind i2l;
  #L248f84.  v12:= v12 - v0 @kind long;
  #L248f86.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L248f8a.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L248f8e.  if v0 != v1 then goto L248f40;
  #L248f92.  v8:= v6 @kind object;
  #L248f94.  call temp:= `pop`(v8) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L248f9a.  v6:= temp @kind object;
  #L248f9c.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L248fa0.  call `recycle`(v8) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L248fa6.  goto L248f40;
  #L248fa8.  return v10 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object @name `string`) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248fbc.  v0:= 0I;
  #L248fbe.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L248fc4.  v1:= temp;
  #L248fc6.  call temp:= `writeUtf8`(v2, v3, v0, v1) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L248fcc.  v0:= temp @kind object;
  #L248fce.  return v0 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v16 @kind this, `java.lang.String` v17 @kind object @name `string`, `int` v18 @name `beginIndex`, `int` v19 @name `endIndex`) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L248fe0.  if v17 != 0 then goto L248ff4;
  #L248fe4.  v12:= new `java.lang.IllegalArgumentException`;
  #L248fe8.  v13:= "string == null" @kind object;
  #L248fec.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248ff2.  throw v12;
  #L248ff4.  if v18 >= 0 then goto L24902e;
  #L248ff8.  v12:= new `java.lang.IllegalArgumentException`;
  #L248ffc.  v13:= new `java.lang.StringBuilder`;
  #L249000.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L249006.  v14:= "beginIndex < 0: " @kind object;
  #L24900a.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249010.  v13:= temp @kind object;
  #L249012.  v0:= v18;
  #L249016.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24901c.  v13:= temp @kind object;
  #L24901e.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L249024.  v13:= temp @kind object;
  #L249026.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24902c.  throw v12;
  #L24902e.  v0:= v19;
  #L249032.  v1:= v18;
  #L249036.  if v0 >= v1 then goto L249088;
  #L24903a.  v12:= new `java.lang.IllegalArgumentException`;
  #L24903e.  v13:= new `java.lang.StringBuilder`;
  #L249042.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L249048.  v14:= "endIndex < beginIndex: " @kind object;
  #L24904c.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249052.  v13:= temp @kind object;
  #L249054.  v0:= v19;
  #L249058.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24905e.  v13:= temp @kind object;
  #L249060.  v14:= " < " @kind object;
  #L249064.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24906a.  v13:= temp @kind object;
  #L24906c.  v0:= v18;
  #L249070.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L249076.  v13:= temp @kind object;
  #L249078.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24907e.  v13:= temp @kind object;
  #L249080.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249086.  throw v12;
  #L249088.  call temp:= `length`(v17) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24908e.  v12:= temp;
  #L249090.  v0:= v19;
  #L249094.  if v0 <= v12 then goto L2490ea;
  #L249098.  v12:= new `java.lang.IllegalArgumentException`;
  #L24909c.  v13:= new `java.lang.StringBuilder`;
  #L2490a0.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2490a6.  v14:= "endIndex > string.length: " @kind object;
  #L2490aa.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2490b0.  v13:= temp @kind object;
  #L2490b2.  v0:= v19;
  #L2490b6.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2490bc.  v13:= temp @kind object;
  #L2490be.  v14:= " > " @kind object;
  #L2490c2.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2490c8.  v13:= temp @kind object;
  #L2490ca.  call temp:= `length`(v17) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2490d0.  v14:= temp;
  #L2490d2.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2490d8.  v13:= temp @kind object;
  #L2490da.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2490e0.  v13:= temp @kind object;
  #L2490e2.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2490e8.  throw v12;
  #L2490ea.  v5:= v18;
  #L2490ee.  v6:= v5;
  #L2490f0.  v0:= v19;
  #L2490f4.  if v6 >= v0 then goto L2492f2;
  #L2490f8.  v0:= v17 @kind object;
  #L2490fc.  call temp:= `charAt`(v0, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L249102.  v2:= temp;
  #L249104.  v12:= 128I;
  #L249108.  if v2 >= v12 then goto L2491a0;
  #L24910c.  v12:= 1I;
  #L24910e.  v0:= v16 @kind object;
  #L249112.  call temp:= `writableSegment`(v0, v12) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L249118.  v11:= temp @kind object;
  #L24911a.  v4:= v11.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24911e.  v12:= v11.`okio.Segment.limit` @type ^`int`;
  #L249122.  v10:= v12 - v6 @kind int;
  #L249126.  v12:= v10 - 8192;
  #L24912a.  v0:= v19;
  #L24912e.  call temp:= `min`(v0, v12) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L249134.  v8:= temp;
  #L249136.  v5:= v6 + 1;
  #L24913a.  v12:= v10 + v6 @kind int;
  #L24913e.  v13:= (`byte`) v2 @kind i2b;
  #L249140.  v4[v12]:= v13 @kind byte;
  #L249144.  v6:= v5;
  #L249146.  if v6 >= v8 then goto L24915e;
  #L24914a.  v0:= v17 @kind object;
  #L24914e.  call temp:= `charAt`(v0, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L249154.  v2:= temp;
  #L249156.  v12:= 128I;
  #L24915a.  if v2 < v12 then goto L24918e;
  #L24915e.  v12:= v6 + v10 @kind int;
  #L249162.  v13:= v11.`okio.Segment.limit` @type ^`int`;
  #L249166.  v9:= v12 - v13 @kind int;
  #L24916a.  v12:= v11.`okio.Segment.limit` @type ^`int`;
  #L24916e.  v12:= v12 + v9 @kind int;
  #L249170.  v11.`okio.Segment.limit` @type ^`int` := v12;
  #L249174.  v0:= v16 @kind object;
  #L249178.  v12:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24917c.  v14:= (`long`) v9 @kind i2l;
  #L24917e.  v12:= v12 + v14 @kind long;
  #L249180.  v0:= v16 @kind object;
  #L249184.  v0.`okio.Buffer.size` @type ^`long` := v12 @kind wide;
  #L249188.  v5:= v6;
  #L24918a.  v6:= v5;
  #L24918c.  goto L2490f0;
  #L24918e.  v5:= v6 + 1;
  #L249192.  v12:= v10 + v6 @kind int;
  #L249196.  v13:= (`byte`) v2 @kind i2b;
  #L249198.  v4[v12]:= v13 @kind byte;
  #L24919c.  v6:= v5;
  #L24919e.  goto L249146;
  #L2491a0.  v12:= 2048I;
  #L2491a4.  if v2 >= v12 then goto L2491d2;
  #L2491a8.  v12:= v2 ^> 6;
  #L2491ac.  v12:= v12 ^| 192;
  #L2491b0.  v0:= v16 @kind object;
  #L2491b4.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2491ba.  v12:= v2 ^& 63;
  #L2491be.  v12:= v12 ^| 128;
  #L2491c2.  v0:= v16 @kind object;
  #L2491c6.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2491cc.  v5:= v6 + 1;
  #L2491d0.  goto L24918a;
  #L2491d2.  v12:= 55296I;
  #L2491d8.  if v2 < v12 then goto L2491e6;
  #L2491dc.  v12:= 57343I;
  #L2491e2.  if v2 <= v12 then goto L249226;
  #L2491e6.  v12:= v2 ^> 12;
  #L2491ea.  v12:= v12 ^| 224;
  #L2491ee.  v0:= v16 @kind object;
  #L2491f2.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2491f8.  v12:= v2 ^> 6;
  #L2491fc.  v12:= v12 ^& 63;
  #L249200.  v12:= v12 ^| 128;
  #L249204.  v0:= v16 @kind object;
  #L249208.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24920e.  v12:= v2 ^& 63;
  #L249212.  v12:= v12 ^| 128;
  #L249216.  v0:= v16 @kind object;
  #L24921a.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L249220.  v5:= v6 + 1;
  #L249224.  goto L24918a;
  #L249226.  v12:= v6 + 1;
  #L24922a.  v0:= v19;
  #L24922e.  if v12 >= v0 then goto L249278;
  #L249232.  v12:= v6 + 1;
  #L249236.  v0:= v17 @kind object;
  #L24923a.  call temp:= `charAt`(v0, v12) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L249240.  v7:= temp;
  #L249242.  v12:= 56319I;
  #L249248.  if v2 > v12 then goto L249260;
  #L24924c.  v12:= 56320I;
  #L249252.  if v7 < v12 then goto L249260;
  #L249256.  v12:= 57343I;
  #L24925c.  if v7 <= v12 then goto L24927c;
  #L249260.  v12:= 63I;
  #L249264.  v0:= v16 @kind object;
  #L249268.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24926e.  v5:= v6 + 1;
  #L249272.  v6:= v5;
  #L249274.  goto L2490f0;
  #L249278.  v7:= 0I;
  #L24927a.  goto L249242;
  #L24927c.  v12:= 65536I;
  #L249280.  v13:= -55297I;
  #L249286.  v13:= v13 ^& v2 @kind int;
  #L249288.  v13:= v13 ^< 10;
  #L24928c.  v14:= -56321I;
  #L249292.  v14:= v14 ^& v7 @kind int;
  #L249294.  v13:= v13 ^| v14 @kind int;
  #L249296.  v3:= v12 + v13 @kind int;
  #L24929a.  v12:= v3 ^> 18;
  #L24929e.  v12:= v12 ^| 240;
  #L2492a2.  v0:= v16 @kind object;
  #L2492a6.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2492ac.  v12:= v3 ^> 12;
  #L2492b0.  v12:= v12 ^& 63;
  #L2492b4.  v12:= v12 ^| 128;
  #L2492b8.  v0:= v16 @kind object;
  #L2492bc.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2492c2.  v12:= v3 ^> 6;
  #L2492c6.  v12:= v12 ^& 63;
  #L2492ca.  v12:= v12 ^| 128;
  #L2492ce.  v0:= v16 @kind object;
  #L2492d2.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2492d8.  v12:= v3 ^& 63;
  #L2492dc.  v12:= v12 ^| 128;
  #L2492e0.  v0:= v16 @kind object;
  #L2492e4.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2492ea.  v5:= v6 + 2;
  #L2492ee.  goto L24918a;
  #L2492f2.  return v16 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249304.  call temp:= `writeUtf8`(v1, v2) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L24930a.  v0:= temp @kind object;
  #L24930c.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249320.  call temp:= `writeUtf8`(v1, v2, v3, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L249326.  v0:= temp @kind object;
  #L249328.  return v0 @kind object;
}
procedure `okio.Buffer` `writeUtf8CodePoint`(`okio.Buffer` v3 @kind this, `int` v4 @name `codePoint`) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24933c.  v0:= 128I;
  #L249340.  if v4 >= v0 then goto L24934c;
  #L249344.  call temp:= `writeByte`(v3, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24934a.  return v3 @kind object;
  #L24934c.  v0:= 2048I;
  #L249350.  if v4 >= v0 then goto L249372;
  #L249354.  v0:= v4 ^> 6;
  #L249358.  v0:= v0 ^| 192;
  #L24935c.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L249362.  v0:= v4 ^& 63;
  #L249366.  v0:= v0 ^| 128;
  #L24936a.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L249370.  goto L24934a;
  #L249372.  v0:= 65536I;
  #L249376.  if v4 >= v0 then goto L2493ca;
  #L24937a.  v0:= 55296I;
  #L249380.  if v4 < v0 then goto L24939a;
  #L249384.  v0:= 57343I;
  #L24938a.  if v4 > v0 then goto L24939a;
  #L24938e.  v0:= 63I;
  #L249392.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L249398.  goto L24934a;
  #L24939a.  v0:= v4 ^> 12;
  #L24939e.  v0:= v0 ^| 224;
  #L2493a2.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2493a8.  v0:= v4 ^> 6;
  #L2493ac.  v0:= v0 ^& 63;
  #L2493b0.  v0:= v0 ^| 128;
  #L2493b4.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2493ba.  v0:= v4 ^& 63;
  #L2493be.  v0:= v0 ^| 128;
  #L2493c2.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2493c8.  goto L24934a;
  #L2493ca.  v0:= 1114111I;
  #L2493d0.  if v4 > v0 then goto L249416;
  #L2493d4.  v0:= v4 ^> 18;
  #L2493d8.  v0:= v0 ^| 240;
  #L2493dc.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2493e2.  v0:= v4 ^> 12;
  #L2493e6.  v0:= v0 ^& 63;
  #L2493ea.  v0:= v0 ^| 128;
  #L2493ee.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2493f4.  v0:= v4 ^> 6;
  #L2493f8.  v0:= v0 ^& 63;
  #L2493fc.  v0:= v0 ^| 128;
  #L249400.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L249406.  v0:= v4 ^& 63;
  #L24940a.  v0:= v0 ^| 128;
  #L24940e.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L249414.  goto L24934a;
  #L249416.  v0:= new `java.lang.IllegalArgumentException`;
  #L24941a.  v1:= new `java.lang.StringBuilder`;
  #L24941e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L249424.  v2:= "Unexpected code point: " @kind object;
  #L249428.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24942e.  v1:= temp @kind object;
  #L249430.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L249436.  v2:= temp @kind object;
  #L249438.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24943e.  v1:= temp @kind object;
  #L249440.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L249446.  v1:= temp @kind object;
  #L249448.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24944e.  throw v0;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249460.  call temp:= `writeUtf8CodePoint`(v1, v2) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L249466.  v0:= temp @kind object;
  #L249468.  return v0 @kind object;
}
