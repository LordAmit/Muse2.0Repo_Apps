record `retrofit2.Retrofit$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.HttpUrl` `retrofit2.Retrofit$Builder.baseUrl` @AccessFlag PRIVATE;
  `java.util.List` `retrofit2.Retrofit$Builder.callAdapterFactories` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Call$Factory` `retrofit2.Retrofit$Builder.callFactory` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `retrofit2.Retrofit$Builder.callbackExecutor` @AccessFlag PRIVATE;
  `java.util.List` `retrofit2.Retrofit$Builder.converterFactories` @AccessFlag PRIVATE_FINAL;
  `retrofit2.Platform` `retrofit2.Retrofit$Builder.platform` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.Retrofit$Builder.validateEagerly` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1af9dc.  call temp:= `get`() @signature `Lretrofit2/Platform;.get:()Lretrofit2/Platform;` @kind static;
  #L1af9e2.  v0:= temp @kind object;
  #L1af9e4.  call `<init>`(v1, v0) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Platform;)V` @kind direct;
  #L1af9ea.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v1 @kind this, `retrofit2.Platform` v2 @kind object @name `platform`) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Platform;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1af9fc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1afa02.  v0:= new `java.util.ArrayList`;
  #L1afa06.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1afa0c.  v1.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` := v0 @kind object;
  #L1afa10.  v0:= new `java.util.ArrayList`;
  #L1afa14.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1afa1a.  v1.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` := v0 @kind object;
  #L1afa1e.  v1.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` := v2 @kind object;
  #L1afa22.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.Retrofit` v3 @kind object @name `retrofit`) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Retrofit;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1afa34.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1afa3a.  v0:= new `java.util.ArrayList`;
  #L1afa3e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1afa44.  v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` := v0 @kind object;
  #L1afa48.  v0:= new `java.util.ArrayList`;
  #L1afa4c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1afa52.  v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` := v0 @kind object;
  #L1afa56.  call temp:= `get`() @signature `Lretrofit2/Platform;.get:()Lretrofit2/Platform;` @kind static;
  #L1afa5c.  v0:= temp @kind object;
  #L1afa5e.  v2.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` := v0 @kind object;
  #L1afa62.  v0:= v3.`retrofit2.Retrofit.callFactory` @type ^`okhttp3.Call$Factory` @kind object;
  #L1afa66.  v2.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` := v0 @kind object;
  #L1afa6a.  v0:= v3.`retrofit2.Retrofit.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L1afa6e.  v2.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` := v0 @kind object;
  #L1afa72.  v0:= v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1afa76.  v1:= v3.`retrofit2.Retrofit.converterFactories` @type ^`java.util.List` @kind object;
  #L1afa7a.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1afa80.  v0:= v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1afa84.  v1:= 0I;
  #L1afa86.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1afa8c.  v0:= v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1afa90.  v1:= v3.`retrofit2.Retrofit.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1afa94.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1afa9a.  v0:= v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1afa9e.  v1:= v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1afaa2.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1afaa8.  v1:= temp;
  #L1afaaa.  v1:= v1 + -1;
  #L1afaae.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1afab4.  v0:= v3.`retrofit2.Retrofit.callbackExecutor` @type ^`java.util.concurrent.Executor` @kind object;
  #L1afab8.  v2.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L1afabc.  v0:= v3.`retrofit2.Retrofit.validateEagerly` @type ^`boolean` @kind boolean;
  #L1afac0.  v2.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` := v0 @kind boolean;
  #L1afac4.  return @kind void;
}
procedure `retrofit2.Retrofit$Builder` `addCallAdapterFactory`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.CallAdapter$Factory` v3 @kind object @name `factory`) @signature `Lretrofit2/Retrofit$Builder;.addCallAdapterFactory:(Lretrofit2/CallAdapter$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1afad8.  v0:= v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1afadc.  v1:= "factory == null" @kind object;
  #L1afae0.  call temp:= `checkNotNull`(v3, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1afae6.  v1:= temp @kind object;
  #L1afae8.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1afaee.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `addConverterFactory`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.Converter$Factory` v3 @kind object @name `factory`) @signature `Lretrofit2/Retrofit$Builder;.addConverterFactory:(Lretrofit2/Converter$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1afb00.  v0:= v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1afb04.  v1:= "factory == null" @kind object;
  #L1afb08.  call temp:= `checkNotNull`(v3, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1afb0e.  v1:= temp @kind object;
  #L1afb10.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1afb16.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v4 @kind this, `java.lang.String` v5 @kind object @name `baseUrl`) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Ljava/lang/String;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1afb28.  v1:= "baseUrl == null" @kind object;
  #L1afb2c.  call temp:= `checkNotNull`(v5, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1afb32.  call temp:= `parse`(v5) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L1afb38.  v0:= temp @kind object;
  #L1afb3a.  if v0 != 0 then goto L1afb70;
  #L1afb3e.  v1:= new `java.lang.IllegalArgumentException`;
  #L1afb42.  v2:= new `java.lang.StringBuilder`;
  #L1afb46.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1afb4c.  v3:= "Illegal URL: " @kind object;
  #L1afb50.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1afb56.  v2:= temp @kind object;
  #L1afb58.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1afb5e.  v2:= temp @kind object;
  #L1afb60.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1afb66.  v2:= temp @kind object;
  #L1afb68.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1afb6e.  throw v1;
  #L1afb70.  call temp:= `baseUrl`(v4, v0) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L1afb76.  v1:= temp @kind object;
  #L1afb78.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v4 @kind this, `okhttp3.HttpUrl` v5 @kind object @name `baseUrl`) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1afb8c.  v1:= "baseUrl == null" @kind object;
  #L1afb90.  call temp:= `checkNotNull`(v5, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1afb96.  call temp:= `pathSegments`(v5) @signature `Lokhttp3/HttpUrl;.pathSegments:()Ljava/util/List;` @kind virtual;
  #L1afb9c.  v0:= temp @kind object;
  #L1afb9e.  v1:= "" @kind object;
  #L1afba2.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1afba8.  v2:= temp;
  #L1afbaa.  v2:= v2 + -1;
  #L1afbae.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1afbb4.  v2:= temp @kind object;
  #L1afbb6.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1afbbc.  v1:= temp;
  #L1afbbe.  if v1 != 0 then goto L1afbf4;
  #L1afbc2.  v1:= new `java.lang.IllegalArgumentException`;
  #L1afbc6.  v2:= new `java.lang.StringBuilder`;
  #L1afbca.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1afbd0.  v3:= "baseUrl must end in /: " @kind object;
  #L1afbd4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1afbda.  v2:= temp @kind object;
  #L1afbdc.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1afbe2.  v2:= temp @kind object;
  #L1afbe4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1afbea.  v2:= temp @kind object;
  #L1afbec.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1afbf2.  throw v1;
  #L1afbf4.  v4.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` := v5 @kind object;
  #L1afbf8.  return v4 @kind object;
}
procedure `retrofit2.Retrofit` `build`(`retrofit2.Retrofit$Builder` v9 @kind this) @signature `Lretrofit2/Retrofit$Builder;.build:()Lretrofit2/Retrofit;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1afc0c.  v0:= v9.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L1afc10.  if v0 != 0 then goto L1afc24;
  #L1afc14.  v0:= new `java.lang.IllegalStateException`;
  #L1afc18.  v2:= "Base URL required." @kind object;
  #L1afc1c.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1afc22.  throw v0;
  #L1afc24.  v1:= v9.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` @kind object;
  #L1afc28.  if v1 != 0 then goto L1afc36;
  #L1afc2c.  v1:= new `okhttp3.OkHttpClient`;
  #L1afc30.  call `<init>`(v1) @signature `Lokhttp3/OkHttpClient;.<init>:()V` @kind direct;
  #L1afc36.  v5:= v9.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` @kind object;
  #L1afc3a.  if v5 != 0 then goto L1afc4a;
  #L1afc3e.  v0:= v9.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L1afc42.  call temp:= `defaultCallbackExecutor`(v0) @signature `Lretrofit2/Platform;.defaultCallbackExecutor:()Ljava/util/concurrent/Executor;` @kind virtual;
  #L1afc48.  v5:= temp @kind object;
  #L1afc4a.  v7:= new `java.util.ArrayList`;
  #L1afc4e.  v0:= v9.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1afc52.  call `<init>`(v7, v0) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L1afc58.  v0:= v9.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L1afc5c.  call temp:= `defaultCallAdapterFactory`(v0, v5) @signature `Lretrofit2/Platform;.defaultCallAdapterFactory:(Ljava/util/concurrent/Executor;)Lretrofit2/CallAdapter$Factory;` @kind virtual;
  #L1afc62.  v0:= temp @kind object;
  #L1afc64.  call temp:= `add`(v7, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1afc6a.  v8:= new `java.util.ArrayList`;
  #L1afc6e.  v0:= v9.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1afc72.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1afc78.  v0:= temp;
  #L1afc7a.  v0:= v0 + 1;
  #L1afc7e.  call `<init>`(v8, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L1afc84.  v0:= new `retrofit2.BuiltInConverters`;
  #L1afc88.  call `<init>`(v0) @signature `Lretrofit2/BuiltInConverters;.<init>:()V` @kind direct;
  #L1afc8e.  call temp:= `add`(v8, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1afc94.  v0:= v9.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1afc98.  call temp:= `addAll`(v8, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1afc9e.  v0:= new `retrofit2.Retrofit`;
  #L1afca2.  v2:= v9.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L1afca6.  call temp:= `unmodifiableList`(v8) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1afcac.  v3:= temp @kind object;
  #L1afcae.  call temp:= `unmodifiableList`(v7) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1afcb4.  v4:= temp @kind object;
  #L1afcb6.  v6:= v9.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` @kind boolean;
  #L1afcba.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lretrofit2/Retrofit;.<init>:(Lokhttp3/Call$Factory;Lokhttp3/HttpUrl;Ljava/util/List;Ljava/util/List;Ljava/util/concurrent/Executor;Z)V` @kind direct;
  #L1afcc0.  return v0 @kind object;
}
procedure `java.util.List` `callAdapterFactories`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.callAdapterFactories:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1afcd4.  v0:= v1.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1afcd8.  return v0 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `callFactory`(`retrofit2.Retrofit$Builder` v1 @kind this, `okhttp3.Call$Factory` v2 @kind object @name `factory`) @signature `Lretrofit2/Retrofit$Builder;.callFactory:(Lokhttp3/Call$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1afcec.  v0:= "factory == null" @kind object;
  #L1afcf0.  call temp:= `checkNotNull`(v2, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1afcf6.  v0:= temp @kind object;
  #L1afcf8.  v0:= (`okhttp3.Call$Factory`) v0 @kind object;
  #L1afcfc.  v1.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` := v0 @kind object;
  #L1afd00.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `callbackExecutor`(`retrofit2.Retrofit$Builder` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object @name `executor`) @signature `Lretrofit2/Retrofit$Builder;.callbackExecutor:(Ljava/util/concurrent/Executor;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1afd14.  v0:= "executor == null" @kind object;
  #L1afd18.  call temp:= `checkNotNull`(v2, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1afd1e.  v0:= temp @kind object;
  #L1afd20.  v0:= (`java.util.concurrent.Executor`) v0 @kind object;
  #L1afd24.  v1.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L1afd28.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `client`(`retrofit2.Retrofit$Builder` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object @name `client`) @signature `Lretrofit2/Retrofit$Builder;.client:(Lokhttp3/OkHttpClient;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1afd3c.  v0:= "client == null" @kind object;
  #L1afd40.  call temp:= `checkNotNull`(v2, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1afd46.  v0:= temp @kind object;
  #L1afd48.  v0:= (`okhttp3.Call$Factory`) v0 @kind object;
  #L1afd4c.  call temp:= `callFactory`(v1, v0) @signature `Lretrofit2/Retrofit$Builder;.callFactory:(Lokhttp3/Call$Factory;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L1afd52.  v0:= temp @kind object;
  #L1afd54.  return v0 @kind object;
}
procedure `java.util.List` `converterFactories`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.converterFactories:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1afd68.  v0:= v1.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1afd6c.  return v0 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `validateEagerly`(`retrofit2.Retrofit$Builder` v0 @kind this, `boolean` v1 @name `validateEagerly`) @signature `Lretrofit2/Retrofit$Builder;.validateEagerly:(Z)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;

  #L1afd80.  v0.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` := v1 @kind boolean;
  #L1afd84.  return v0 @kind object;
}
