record `retrofit2.Utils$ParameterizedTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.ownerType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.rawType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$ParameterizedTypeImpl` v5 @kind this, `java.lang.reflect.Type` v6 @kind object @name `ownerType`, `java.lang.reflect.Type` v7 @kind object @name `rawType`, `java.lang.reflect.Type`[] v8 @kind object @name `typeArguments`) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b2810.  v3:= 1I;
  #L1b2812.  v4:= 0I;
  #L1b2814.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b281a.  v1:= instanceof @variable v7 @type ^`java.lang.Class` @kind boolean;
  #L1b281e.  if v1 == 0 then goto L1b2852;
  #L1b2822.  if v6 != 0 then goto L1b284a;
  #L1b2826.  v2:= v3;
  #L1b2828.  v1:= v7 @kind object;
  #L1b282a.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1b282e.  call temp:= `getEnclosingClass`(v1) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L1b2834.  v1:= temp @kind object;
  #L1b2836.  if v1 != 0 then goto L1b284e;
  #L1b283a.  if v2 == v3 then goto L1b2852;
  #L1b283e.  v1:= new `java.lang.IllegalArgumentException`;
  #L1b2842.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b2848.  throw v1;
  #L1b284a.  v2:= v4;
  #L1b284c.  goto L1b2828;
  #L1b284e.  v3:= v4;
  #L1b2850.  goto L1b283a;
  #L1b2852.  v1:= length @variable v8;
  #L1b2854.  if v4 >= v1 then goto L1b2872;
  #L1b2858.  v0:= v8[v4] @kind object;
  #L1b285c.  v2:= "typeArgument == null" @kind object;
  #L1b2860.  call temp:= `checkNotNull`(v0, v2) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b2866.  call `checkNotPrimitive`(v0) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1b286c.  v4:= v4 + 1;
  #L1b2870.  goto L1b2854;
  #L1b2872.  v5.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L1b2876.  v5.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` := v7 @kind object;
  #L1b287a.  call temp:= `clone`(v8) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1b2880.  v1:= temp @kind object;
  #L1b2882.  v1:= (`java.lang.reflect.Type`[]) v1 @kind object;
  #L1b2886.  v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] := v1 @kind object;
  #L1b288a.  return @kind void;
}
procedure `boolean` `equals`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object @name `other`) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b289c.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b28a0.  if v0 == 0 then goto L1b28b8;
  #L1b28a4.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L1b28a8.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b28ae.  v0:= temp;
  #L1b28b0.  if v0 == 0 then goto L1b28b8;
  #L1b28b4.  v0:= 1I;
  #L1b28b6.  return v0;
  #L1b28b8.  v0:= 0I;
  #L1b28ba.  goto L1b28b6;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b28cc.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b28d0.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1b28d6.  v0:= temp @kind object;
  #L1b28d8.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L1b28dc.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b28f0.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b28f4.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b2908.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b290c.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$ParameterizedTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b2920.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b2924.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L1b292a.  v0:= temp;
  #L1b292c.  v1:= v2.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2930.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b2936.  v1:= temp;
  #L1b2938.  v1:= v1 ^~ v0 @kind int;
  #L1b293a.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b293e.  if v0 == 0 then goto L1b2952;
  #L1b2942.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2946.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b294c.  v0:= temp;
  #L1b294e.  v0:= v0 ^~ v1 @kind int;
  #L1b2950.  return v0;
  #L1b2952.  v0:= 0I;
  #L1b2954.  goto L1b294e;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$ParameterizedTypeImpl` v5 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b2968.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b296c.  v2:= length @variable v2;
  #L1b296e.  if v2 != 0 then goto L1b2980;
  #L1b2972.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2976.  call temp:= `typeToString`(v2) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b297c.  v2:= temp @kind object;
  #L1b297e.  return v2 @kind object;
  #L1b2980.  v1:= new `java.lang.StringBuilder`;
  #L1b2984.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b2988.  v2:= length @variable v2;
  #L1b298a.  v2:= v2 + 1;
  #L1b298e.  v2:= v2 * 30;
  #L1b2992.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1b2998.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b299c.  call temp:= `typeToString`(v2) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b29a2.  v2:= temp @kind object;
  #L1b29a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b29aa.  v2:= "<" @kind object;
  #L1b29ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b29b4.  v2:= temp @kind object;
  #L1b29b6.  v3:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b29ba.  v4:= 0I;
  #L1b29bc.  v3:= v3[v4] @kind object;
  #L1b29c0.  call temp:= `typeToString`(v3) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b29c6.  v3:= temp @kind object;
  #L1b29c8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b29ce.  v0:= 1I;
  #L1b29d0.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b29d4.  v2:= length @variable v2;
  #L1b29d6.  if v0 >= v2 then goto L1b2a02;
  #L1b29da.  v2:= ", " @kind object;
  #L1b29de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b29e4.  v2:= temp @kind object;
  #L1b29e6.  v3:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b29ea.  v3:= v3[v0] @kind object;
  #L1b29ee.  call temp:= `typeToString`(v3) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b29f4.  v3:= temp @kind object;
  #L1b29f6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b29fc.  v0:= v0 + 1;
  #L1b2a00.  goto L1b29d0;
  #L1b2a02.  v2:= ">" @kind object;
  #L1b2a06.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2a0c.  v2:= temp @kind object;
  #L1b2a0e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b2a14.  v2:= temp @kind object;
  #L1b2a16.  goto L1b297e;
}
