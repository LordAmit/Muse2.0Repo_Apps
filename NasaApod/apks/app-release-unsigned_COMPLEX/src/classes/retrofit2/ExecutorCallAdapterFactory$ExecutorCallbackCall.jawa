record `retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` @kind class @AccessFlag FINAL extends `retrofit2.Call` @kind interface {
  `java.util.concurrent.Executor` `retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.callbackExecutor` @AccessFlag FINAL;
  `retrofit2.Call` `retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @AccessFlag FINAL;
}
procedure `void` `<init>`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v0 @kind this, `java.util.concurrent.Executor` v1 @kind object @name `callbackExecutor`, `retrofit2.Call` v2 @kind object) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.<init>:(Ljava/util/concurrent/Executor;Lretrofit2/Call;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2201f4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2201fa.  v0.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.callbackExecutor` @type ^`java.util.concurrent.Executor` := v1 @kind object;
  #L2201fe.  v0.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` := v2 @kind object;
  #L220202.  return @kind void;
}
procedure `void` `cancel`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v1 @kind this) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220214.  v0:= v1.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` @kind object;
  #L220218.  call `cancel`(v0) @signature `Lretrofit2/Call;.cancel:()V` @kind interface;
  #L22021e.  return @kind void;
}
procedure `java.lang.Object` `clone`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v1 @kind this) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L220230.  call temp:= `clone`(v1) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.clone:()Lretrofit2/Call;` @kind virtual;
  #L220236.  v0:= temp @kind object;
  #L220238.  return v0 @kind object;
}
procedure `retrofit2.Call` `clone`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v3 @kind this) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.clone:()Lretrofit2/Call;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L22024c.  v0:= new `retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall`;
  #L220250.  v1:= v3.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.callbackExecutor` @type ^`java.util.concurrent.Executor` @kind object;
  #L220254.  v2:= v3.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` @kind object;
  #L220258.  call temp:= `clone`(v2) @signature `Lretrofit2/Call;.clone:()Lretrofit2/Call;` @kind interface;
  #L22025e.  v2:= temp @kind object;
  #L220260.  call `<init>`(v0, v1, v2) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.<init>:(Ljava/util/concurrent/Executor;Lretrofit2/Call;)V` @kind direct;
  #L220266.  return v0 @kind object;
}
procedure `void` `enqueue`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v2 @kind this, `retrofit2.Callback` v3 @kind object) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.enqueue:(Lretrofit2/Callback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L220278.  v0:= "callback == null" @kind object;
  #L22027c.  call temp:= `checkNotNull`(v3, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L220282.  v0:= v2.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` @kind object;
  #L220286.  v1:= new `retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1`;
  #L22028a.  call `<init>`(v1, v2, v3) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall$1;.<init>:(Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;Lretrofit2/Callback;)V` @kind direct;
  #L220290.  call `enqueue`(v0, v1) @signature `Lretrofit2/Call;.enqueue:(Lretrofit2/Callback;)V` @kind interface;
  #L220296.  return @kind void;
}
procedure `retrofit2.Response` `execute`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v1 @kind this) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.execute:()Lretrofit2/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2202a8.  v0:= v1.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` @kind object;
  #L2202ac.  call temp:= `execute`(v0) @signature `Lretrofit2/Call;.execute:()Lretrofit2/Response;` @kind interface;
  #L2202b2.  v0:= temp @kind object;
  #L2202b4.  return v0 @kind object;
}
procedure `boolean` `isCanceled`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v1 @kind this) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2202c8.  v0:= v1.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` @kind object;
  #L2202cc.  call temp:= `isCanceled`(v0) @signature `Lretrofit2/Call;.isCanceled:()Z` @kind interface;
  #L2202d2.  v0:= temp;
  #L2202d4.  return v0;
}
procedure `boolean` `isExecuted`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v1 @kind this) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.isExecuted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2202e8.  v0:= v1.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` @kind object;
  #L2202ec.  call temp:= `isExecuted`(v0) @signature `Lretrofit2/Call;.isExecuted:()Z` @kind interface;
  #L2202f2.  v0:= temp;
  #L2202f4.  return v0;
}
procedure `okhttp3.Request` `request`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v1 @kind this) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220308.  v0:= v1.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` @kind object;
  #L22030c.  call temp:= `request`(v0) @signature `Lretrofit2/Call;.request:()Lokhttp3/Request;` @kind interface;
  #L220312.  v0:= temp @kind object;
  #L220314.  return v0 @kind object;
}
