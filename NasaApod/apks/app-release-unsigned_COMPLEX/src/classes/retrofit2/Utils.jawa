record `retrofit2.Utils` @kind class @AccessFlag FINAL {
}
global `java.lang.reflect.Type`[] `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/Utils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b2c3c.  v0:= 0I;
  #L1b2c3e.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b2c42.  `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L1b2c46.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Utils` v0 @kind this) @signature `Lretrofit2/Utils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1b2c58.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b2c5e.  return @kind void;
}
procedure `okhttp3.ResponseBody` `buffer`(`okhttp3.ResponseBody` v4 @kind object @name `body`) @signature `Lretrofit2/Utils;.buffer:(Lokhttp3/ResponseBody;)Lokhttp3/ResponseBody;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b2c70.  v0:= new `okio.Buffer`;
  #L1b2c74.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1b2c7a.  call temp:= `source`(v4) @signature `Lokhttp3/ResponseBody;.source:()Lokio/BufferedSource;` @kind virtual;
  #L1b2c80.  v1:= temp @kind object;
  #L1b2c82.  call temp:= `readAll`(v1, v0) @signature `Lokio/BufferedSource;.readAll:(Lokio/Sink;)J` @kind interface;
  #L1b2c88.  call temp:= `contentType`(v4) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L1b2c8e.  v1:= temp @kind object;
  #L1b2c90.  call temp:= `contentLength`(v4) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L1b2c96.  v2:= temp @kind wide;
  #L1b2c98.  call temp:= `create`(v1, v2, v0) @signature `Lokhttp3/ResponseBody;.create:(Lokhttp3/MediaType;JLokio/BufferedSource;)Lokhttp3/ResponseBody;` @kind static;
  #L1b2c9e.  v1:= temp @kind object;
  #L1b2ca0.  return v1 @kind object;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object @name `message`) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;
    v0;

  #L1b2cb4.  if v1 != 0 then goto L1b2cc4;
  #L1b2cb8.  v0:= new `java.lang.NullPointerException`;
  #L1b2cbc.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b2cc2.  throw v0;
  #L1b2cc4.  return v1 @kind object;
}
procedure `void` `checkNotPrimitive`(`java.lang.reflect.Type` v1 @kind object @name `type`) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L1b2cd8.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L1b2cdc.  if v0 == 0 then goto L1b2cfc;
  #L1b2ce0.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1b2ce4.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L1b2cea.  v0:= temp;
  #L1b2cec.  if v0 == 0 then goto L1b2cfc;
  #L1b2cf0.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b2cf4.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b2cfa.  throw v0;
  #L1b2cfc.  return @kind void;
}
procedure `java.lang.Class` `declaringClassOf`(`java.lang.reflect.TypeVariable` v2 @kind object) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1b2d10.  call temp:= `getGenericDeclaration`(v2) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L1b2d16.  v0:= temp @kind object;
  #L1b2d18.  v1:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L1b2d1c.  if v1 == 0 then goto L1b2d26;
  #L1b2d20.  v0:= (`java.lang.Class`) v0 @kind object;
  #L1b2d24.  return v0 @kind object;
  #L1b2d26.  v0:= 0I;
  #L1b2d28.  goto L1b2d24;
}
procedure `boolean` `equals`(`java.lang.reflect.Type` v14 @kind object @name `a`, `java.lang.reflect.Type` v15 @kind object @name `b`) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L1b2d3c.  v10:= 1I;
  #L1b2d3e.  v11:= 0I;
  #L1b2d40.  if v14 != v15 then goto L1b2d48;
  #L1b2d44.  v11:= v10;
  #L1b2d46.  return v11;
  #L1b2d48.  v12:= instanceof @variable v14 @type ^`java.lang.Class` @kind boolean;
  #L1b2d4c.  if v12 == 0 then goto L1b2d5a;
  #L1b2d50.  call temp:= `equals`(v14, v15) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b2d56.  v11:= temp;
  #L1b2d58.  goto L1b2d46;
  #L1b2d5a.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b2d5e.  if v12 == 0 then goto L1b2dda;
  #L1b2d62.  v12:= instanceof @variable v15 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b2d66.  if v12 == 0 then goto L1b2d46;
  #L1b2d6a.  v4:= v14 @kind object;
  #L1b2d6c.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L1b2d70.  v5:= v15 @kind object;
  #L1b2d72.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L1b2d76.  call temp:= `getOwnerType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b2d7c.  v2:= temp @kind object;
  #L1b2d7e.  call temp:= `getOwnerType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b2d84.  v3:= temp @kind object;
  #L1b2d86.  if v2 == v3 then goto L1b2d9a;
  #L1b2d8a.  if v2 == 0 then goto L1b2dd6;
  #L1b2d8e.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b2d94.  v12:= temp;
  #L1b2d96.  if v12 == 0 then goto L1b2dd6;
  #L1b2d9a.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b2da0.  v12:= temp @kind object;
  #L1b2da2.  call temp:= `getRawType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b2da8.  v13:= temp @kind object;
  #L1b2daa.  call temp:= `equals`(v12, v13) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b2db0.  v12:= temp;
  #L1b2db2.  if v12 == 0 then goto L1b2dd6;
  #L1b2db6.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2dbc.  v12:= temp @kind object;
  #L1b2dbe.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2dc4.  v13:= temp @kind object;
  #L1b2dc6.  call temp:= `equals`(v12, v13) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1b2dcc.  v12:= temp;
  #L1b2dce.  if v12 == 0 then goto L1b2dd6;
  #L1b2dd2.  v11:= v10;
  #L1b2dd4.  goto L1b2d46;
  #L1b2dd6.  v10:= v11;
  #L1b2dd8.  goto L1b2dd2;
  #L1b2dda.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b2dde.  if v12 == 0 then goto L1b2e10;
  #L1b2de2.  v10:= instanceof @variable v15 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b2de6.  if v10 == 0 then goto L1b2d46;
  #L1b2dea.  v0:= v14 @kind object;
  #L1b2dec.  v0:= (`java.lang.reflect.GenericArrayType`) v0 @kind object;
  #L1b2df0.  v1:= v15 @kind object;
  #L1b2df2.  v1:= (`java.lang.reflect.GenericArrayType`) v1 @kind object;
  #L1b2df6.  call temp:= `getGenericComponentType`(v0) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b2dfc.  v10:= temp @kind object;
  #L1b2dfe.  call temp:= `getGenericComponentType`(v1) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b2e04.  v11:= temp @kind object;
  #L1b2e06.  call temp:= `equals`(v10, v11) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b2e0c.  v11:= temp;
  #L1b2e0e.  goto L1b2d46;
  #L1b2e10.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b2e14.  if v12 == 0 then goto L1b2e6e;
  #L1b2e18.  v12:= instanceof @variable v15 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b2e1c.  if v12 == 0 then goto L1b2d46;
  #L1b2e20.  v8:= v14 @kind object;
  #L1b2e22.  v8:= (`java.lang.reflect.WildcardType`) v8 @kind object;
  #L1b2e26.  v9:= v15 @kind object;
  #L1b2e28.  v9:= (`java.lang.reflect.WildcardType`) v9 @kind object;
  #L1b2e2c.  call temp:= `getUpperBounds`(v8) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2e32.  v12:= temp @kind object;
  #L1b2e34.  call temp:= `getUpperBounds`(v9) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2e3a.  v13:= temp @kind object;
  #L1b2e3c.  call temp:= `equals`(v12, v13) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1b2e42.  v12:= temp;
  #L1b2e44.  if v12 == 0 then goto L1b2e6a;
  #L1b2e48.  call temp:= `getLowerBounds`(v8) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2e4e.  v12:= temp @kind object;
  #L1b2e50.  call temp:= `getLowerBounds`(v9) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2e56.  v13:= temp @kind object;
  #L1b2e58.  call temp:= `equals`(v12, v13) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1b2e5e.  v12:= temp;
  #L1b2e60.  if v12 == 0 then goto L1b2e6a;
  #L1b2e64.  v11:= v10;
  #L1b2e66.  goto L1b2d46;
  #L1b2e6a.  v10:= v11;
  #L1b2e6c.  goto L1b2e64;
  #L1b2e6e.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b2e72.  if v12 == 0 then goto L1b2d46;
  #L1b2e76.  v12:= instanceof @variable v15 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b2e7a.  if v12 == 0 then goto L1b2d46;
  #L1b2e7e.  v6:= v14 @kind object;
  #L1b2e80.  v6:= (`java.lang.reflect.TypeVariable`) v6 @kind object;
  #L1b2e84.  v7:= v15 @kind object;
  #L1b2e86.  v7:= (`java.lang.reflect.TypeVariable`) v7 @kind object;
  #L1b2e8a.  call temp:= `getGenericDeclaration`(v6) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L1b2e90.  v12:= temp @kind object;
  #L1b2e92.  call temp:= `getGenericDeclaration`(v7) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L1b2e98.  v13:= temp @kind object;
  #L1b2e9a.  if v12 != v13 then goto L1b2ec0;
  #L1b2e9e.  call temp:= `getName`(v6) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L1b2ea4.  v12:= temp @kind object;
  #L1b2ea6.  call temp:= `getName`(v7) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L1b2eac.  v13:= temp @kind object;
  #L1b2eae.  call temp:= `equals`(v12, v13) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b2eb4.  v12:= temp;
  #L1b2eb6.  if v12 == 0 then goto L1b2ec0;
  #L1b2eba.  v11:= v10;
  #L1b2ebc.  goto L1b2d46;
  #L1b2ec0.  v10:= v11;
  #L1b2ec2.  goto L1b2eba;
}
procedure `java.lang.reflect.Type` `getCallResponseType`(`java.lang.reflect.Type` v2 @kind object @name `returnType`) @signature `Lretrofit2/Utils;.getCallResponseType:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1b2ed4.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b2ed8.  if v0 != 0 then goto L1b2eec;
  #L1b2edc.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b2ee0.  v1:= "Call return type must be parameterized as Call<Foo> or Call<? extends Foo>" @kind object;
  #L1b2ee4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b2eea.  throw v0;
  #L1b2eec.  v0:= 0I;
  #L1b2eee.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L1b2ef2.  call temp:= `getParameterUpperBound`(v0, v2) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1b2ef8.  v0:= temp @kind object;
  #L1b2efa.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getGenericSupertype`(`java.lang.reflect.Type` v6 @kind object @name `context`, `java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b2f0c.  if v8 != v7 then goto L1b2f12;
  #L1b2f10.  return v6 @kind object;
  #L1b2f12.  call temp:= `isInterface`(v8) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L1b2f18.  v4:= temp;
  #L1b2f1a.  if v4 == 0 then goto L1b2f74;
  #L1b2f1e.  call temp:= `getInterfaces`(v7) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L1b2f24.  v1:= temp @kind object;
  #L1b2f26.  v0:= 0I;
  #L1b2f28.  v2:= length @variable v1;
  #L1b2f2a.  if v0 >= v2 then goto L1b2f74;
  #L1b2f2e.  v4:= v1[v0] @kind object;
  #L1b2f32.  if v4 != v8 then goto L1b2f44;
  #L1b2f36.  call temp:= `getGenericInterfaces`(v7) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L1b2f3c.  v4:= temp @kind object;
  #L1b2f3e.  v6:= v4[v0] @kind object;
  #L1b2f42.  goto L1b2f10;
  #L1b2f44.  v4:= v1[v0] @kind object;
  #L1b2f48.  call temp:= `isAssignableFrom`(v8, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1b2f4e.  v4:= temp;
  #L1b2f50.  if v4 == 0 then goto L1b2f6e;
  #L1b2f54.  call temp:= `getGenericInterfaces`(v7) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L1b2f5a.  v4:= temp @kind object;
  #L1b2f5c.  v4:= v4[v0] @kind object;
  #L1b2f60.  v5:= v1[v0] @kind object;
  #L1b2f64.  call temp:= `getGenericSupertype`(v4, v5, v8) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b2f6a.  v6:= temp @kind object;
  #L1b2f6c.  goto L1b2f10;
  #L1b2f6e.  v0:= v0 + 1;
  #L1b2f72.  goto L1b2f2a;
  #L1b2f74.  call temp:= `isInterface`(v7) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L1b2f7a.  v4:= temp;
  #L1b2f7c.  if v4 != 0 then goto L1b2fc0;
  #L1b2f80.  v4:= constclass @type ^`java.lang.Object` @kind object;
  #L1b2f84.  if v7 == v4 then goto L1b2fc0;
  #L1b2f88.  call temp:= `getSuperclass`(v7) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L1b2f8e.  v3:= temp @kind object;
  #L1b2f90.  if v3 != v8 then goto L1b2f9e;
  #L1b2f94.  call temp:= `getGenericSuperclass`(v7) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L1b2f9a.  v6:= temp @kind object;
  #L1b2f9c.  goto L1b2f10;
  #L1b2f9e.  call temp:= `isAssignableFrom`(v8, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1b2fa4.  v4:= temp;
  #L1b2fa6.  if v4 == 0 then goto L1b2fbc;
  #L1b2faa.  call temp:= `getGenericSuperclass`(v7) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L1b2fb0.  v4:= temp @kind object;
  #L1b2fb2.  call temp:= `getGenericSupertype`(v4, v3, v8) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b2fb8.  v6:= temp @kind object;
  #L1b2fba.  goto L1b2f10;
  #L1b2fbc.  v7:= v3 @kind object;
  #L1b2fbe.  goto L1b2f80;
  #L1b2fc0.  v6:= v8 @kind object;
  #L1b2fc2.  goto L1b2f10;
}
procedure `java.lang.reflect.Type` `getParameterUpperBound`(`int` v5 @name `index`, `java.lang.reflect.ParameterizedType` v6 @kind object @name `type`) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b2fd4.  call temp:= `getActualTypeArguments`(v6) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2fda.  v1:= temp @kind object;
  #L1b2fdc.  if v5 < 0 then goto L1b2fe6;
  #L1b2fe0.  v2:= length @variable v1;
  #L1b2fe2.  if v5 < v2 then goto L1b3042;
  #L1b2fe6.  v2:= new `java.lang.IllegalArgumentException`;
  #L1b2fea.  v3:= new `java.lang.StringBuilder`;
  #L1b2fee.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b2ff4.  v4:= "Index " @kind object;
  #L1b2ff8.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2ffe.  v3:= temp @kind object;
  #L1b3000.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3006.  v3:= temp @kind object;
  #L1b3008.  v4:= " not in range [0," @kind object;
  #L1b300c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3012.  v3:= temp @kind object;
  #L1b3014.  v4:= length @variable v1;
  #L1b3016.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b301c.  v3:= temp @kind object;
  #L1b301e.  v4:= ") for " @kind object;
  #L1b3022.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3028.  v3:= temp @kind object;
  #L1b302a.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3030.  v3:= temp @kind object;
  #L1b3032.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b3038.  v3:= temp @kind object;
  #L1b303a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b3040.  throw v2;
  #L1b3042.  v0:= v1[v5] @kind object;
  #L1b3046.  v2:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b304a.  if v2 == 0 then goto L1b3060;
  #L1b304e.  v0:= (`java.lang.reflect.WildcardType`) v0 @kind object;
  #L1b3052.  call temp:= `getUpperBounds`(v0) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b3058.  v2:= temp @kind object;
  #L1b305a.  v3:= 0I;
  #L1b305c.  v0:= v2[v3] @kind object;
  #L1b3060.  return v0 @kind object;
}
procedure `java.lang.Class` `getRawType`(`java.lang.reflect.Type` v6 @kind object @name `type`) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b3074.  v4:= 0I;
  #L1b3076.  v3:= "type == null" @kind object;
  #L1b307a.  call temp:= `checkNotNull`(v6, v3) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b3080.  v3:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L1b3084.  if v3 == 0 then goto L1b308e;
  #L1b3088.  v6:= (`java.lang.Class`) v6 @kind object;
  #L1b308c.  return v6 @kind object;
  #L1b308e.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b3092.  if v3 == 0 then goto L1b30c0;
  #L1b3096.  v1:= v6 @kind object;
  #L1b3098.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L1b309c.  call temp:= `getRawType`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b30a2.  v2:= temp @kind object;
  #L1b30a4.  v3:= instanceof @variable v2 @type ^`java.lang.Class` @kind boolean;
  #L1b30a8.  if v3 != 0 then goto L1b30b8;
  #L1b30ac.  v3:= new `java.lang.IllegalArgumentException`;
  #L1b30b0.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b30b6.  throw v3;
  #L1b30b8.  v2:= (`java.lang.Class`) v2 @kind object;
  #L1b30bc.  v6:= v2 @kind object;
  #L1b30be.  goto L1b308c;
  #L1b30c0.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b30c4.  if v3 == 0 then goto L1b30ee;
  #L1b30c8.  v6:= (`java.lang.reflect.GenericArrayType`) v6 @kind object;
  #L1b30cc.  call temp:= `getGenericComponentType`(v6) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b30d2.  v0:= temp @kind object;
  #L1b30d4.  call temp:= `getRawType`(v0) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1b30da.  v3:= temp @kind object;
  #L1b30dc.  call temp:= `newInstance`(v3, v4) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L1b30e2.  v3:= temp @kind object;
  #L1b30e4.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b30ea.  v6:= temp @kind object;
  #L1b30ec.  goto L1b308c;
  #L1b30ee.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b30f2.  if v3 == 0 then goto L1b30fc;
  #L1b30f6.  v6:= constclass @type ^`java.lang.Object` @kind object;
  #L1b30fa.  goto L1b308c;
  #L1b30fc.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b3100.  if v3 == 0 then goto L1b311e;
  #L1b3104.  v6:= (`java.lang.reflect.WildcardType`) v6 @kind object;
  #L1b3108.  call temp:= `getUpperBounds`(v6) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b310e.  v3:= temp @kind object;
  #L1b3110.  v3:= v3[v4] @kind object;
  #L1b3114.  call temp:= `getRawType`(v3) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1b311a.  v6:= temp @kind object;
  #L1b311c.  goto L1b308c;
  #L1b311e.  v3:= new `java.lang.IllegalArgumentException`;
  #L1b3122.  v4:= new `java.lang.StringBuilder`;
  #L1b3126.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b312c.  v5:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L1b3130.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3136.  v4:= temp @kind object;
  #L1b3138.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b313e.  v4:= temp @kind object;
  #L1b3140.  v5:= "> is of type " @kind object;
  #L1b3144.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b314a.  v4:= temp @kind object;
  #L1b314c.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b3152.  v5:= temp @kind object;
  #L1b3154.  call temp:= `getName`(v5) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b315a.  v5:= temp @kind object;
  #L1b315c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3162.  v4:= temp @kind object;
  #L1b3164.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b316a.  v4:= temp @kind object;
  #L1b316c.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b3172.  throw v3;
}
procedure `java.lang.reflect.Type` `getSupertype`(`java.lang.reflect.Type` v1 @kind object @name `context`, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lretrofit2/Utils;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;

  #L1b3184.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1b318a.  v0:= temp;
  #L1b318c.  if v0 != 0 then goto L1b319c;
  #L1b3190.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b3194.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b319a.  throw v0;
  #L1b319c.  call temp:= `getGenericSupertype`(v1, v2, v3) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b31a2.  v0:= temp @kind object;
  #L1b31a4.  call temp:= `resolve`(v1, v2, v0) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b31aa.  v0:= temp @kind object;
  #L1b31ac.  return v0 @kind object;
}
procedure `boolean` `hasUnresolvableType`(`java.lang.reflect.Type` v9 @kind object @name `type`) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1b31c0.  v4:= 1I;
  #L1b31c2.  v3:= 0I;
  #L1b31c4.  v5:= instanceof @variable v9 @type ^`java.lang.Class` @kind boolean;
  #L1b31c8.  if v5 == 0 then goto L1b31ce;
  #L1b31cc.  return v3;
  #L1b31ce.  v5:= instanceof @variable v9 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b31d2.  if v5 == 0 then goto L1b3206;
  #L1b31d6.  v1:= v9 @kind object;
  #L1b31d8.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L1b31dc.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b31e2.  v6:= temp @kind object;
  #L1b31e4.  v7:= length @variable v6;
  #L1b31e6.  v5:= v3;
  #L1b31e8.  if v5 >= v7 then goto L1b31cc;
  #L1b31ec.  v2:= v6[v5] @kind object;
  #L1b31f0.  call temp:= `hasUnresolvableType`(v2) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b31f6.  v8:= temp;
  #L1b31f8.  if v8 == 0 then goto L1b3200;
  #L1b31fc.  v3:= v4;
  #L1b31fe.  goto L1b31cc;
  #L1b3200.  v5:= v5 + 1;
  #L1b3204.  goto L1b31e8;
  #L1b3206.  v3:= instanceof @variable v9 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b320a.  if v3 == 0 then goto L1b3224;
  #L1b320e.  v9:= (`java.lang.reflect.GenericArrayType`) v9 @kind object;
  #L1b3212.  call temp:= `getGenericComponentType`(v9) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b3218.  v3:= temp @kind object;
  #L1b321a.  call temp:= `hasUnresolvableType`(v3) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b3220.  v3:= temp;
  #L1b3222.  goto L1b31cc;
  #L1b3224.  v3:= instanceof @variable v9 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b3228.  if v3 == 0 then goto L1b3230;
  #L1b322c.  v3:= v4;
  #L1b322e.  goto L1b31cc;
  #L1b3230.  v3:= instanceof @variable v9 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b3234.  if v3 == 0 then goto L1b323c;
  #L1b3238.  v3:= v4;
  #L1b323a.  goto L1b31cc;
  #L1b323c.  if v9 != 0 then goto L1b328a;
  #L1b3240.  v0:= "null" @kind object;
  #L1b3244.  v3:= new `java.lang.IllegalArgumentException`;
  #L1b3248.  v4:= new `java.lang.StringBuilder`;
  #L1b324c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b3252.  v5:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L1b3256.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b325c.  v4:= temp @kind object;
  #L1b325e.  call temp:= `append`(v4, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3264.  v4:= temp @kind object;
  #L1b3266.  v5:= "> is of type " @kind object;
  #L1b326a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3270.  v4:= temp @kind object;
  #L1b3272.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3278.  v4:= temp @kind object;
  #L1b327a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b3280.  v4:= temp @kind object;
  #L1b3282.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b3288.  throw v3;
  #L1b328a.  call temp:= `getClass`(v9) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b3290.  v3:= temp @kind object;
  #L1b3292.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b3298.  v0:= temp @kind object;
  #L1b329a.  goto L1b3244;
}
procedure `int` `indexOf`(`java.lang.Object`[] v2 @kind object @name `array`, `java.lang.Object` v3 @kind object @name `toFind`) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1b32ac.  v0:= 0I;
  #L1b32ae.  v1:= length @variable v2;
  #L1b32b0.  if v0 >= v1 then goto L1b32cc;
  #L1b32b4.  v1:= v2[v0] @kind object;
  #L1b32b8.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b32be.  v1:= temp;
  #L1b32c0.  if v1 == 0 then goto L1b32c6;
  #L1b32c4.  return v0;
  #L1b32c6.  v0:= v0 + 1;
  #L1b32ca.  goto L1b32ae;
  #L1b32cc.  v1:= new `java.util.NoSuchElementException`;
  #L1b32d0.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L1b32d6.  throw v1;
}
procedure `boolean` `isAnnotationPresent`(`java.lang.annotation.Annotation`[] v5 @kind object @name `annotations`, `java.lang.Class` v6 @kind object) @signature `Lretrofit2/Utils;.isAnnotationPresent:([Ljava/lang/annotation/Annotation;Ljava/lang/Class;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b32e8.  v1:= 0I;
  #L1b32ea.  v3:= length @variable v5;
  #L1b32ec.  v2:= v1;
  #L1b32ee.  if v2 >= v3 then goto L1b3304;
  #L1b32f2.  v0:= v5[v2] @kind object;
  #L1b32f6.  call temp:= `isInstance`(v6, v0) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b32fc.  v4:= temp;
  #L1b32fe.  if v4 == 0 then goto L1b3306;
  #L1b3302.  v1:= 1I;
  #L1b3304.  return v1;
  #L1b3306.  v2:= v2 + 1;
  #L1b330a.  goto L1b32ee;
}
procedure `java.lang.reflect.Type` `resolve`(`java.lang.reflect.Type` v22 @kind object @name `context`, `java.lang.Class` v23 @kind object, `java.lang.reflect.Type` v24 @kind object @name `toResolve`) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L1b331c.  v0:= v24 @kind object;
  #L1b3320.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b3324.  v19:= v0;
  #L1b3328.  if v19 == 0 then goto L1b335a;
  #L1b332c.  v17:= v24 @kind object;
  #L1b3330.  v17:= (`java.lang.reflect.TypeVariable`) v17 @kind object;
  #L1b3334.  v0:= v22 @kind object;
  #L1b3338.  v1:= v23 @kind object;
  #L1b333c.  v2:= v17 @kind object;
  #L1b3340.  call temp:= `resolveTypeVariable`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @kind static;
  #L1b3346.  v24:= temp @kind object;
  #L1b3348.  v0:= v24 @kind object;
  #L1b334c.  v1:= v17 @kind object;
  #L1b3350.  if v0 != v1 then goto L1b331c;
  #L1b3354.  v10:= v24 @kind object;
  #L1b3358.  return v10 @kind object;
  #L1b335a.  v0:= v24 @kind object;
  #L1b335e.  v0:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L1b3362.  v19:= v0;
  #L1b3366.  if v19 == 0 then goto L1b33b2;
  #L1b336a.  v19:= v24 @kind object;
  #L1b336e.  v19:= (`java.lang.Class`) v19 @kind object;
  #L1b3372.  call temp:= `isArray`(v19) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1b3378.  v19:= temp;
  #L1b337a.  if v19 == 0 then goto L1b33b2;
  #L1b337e.  v11:= v24 @kind object;
  #L1b3382.  v11:= (`java.lang.Class`) v11 @kind object;
  #L1b3386.  call temp:= `getComponentType`(v11) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1b338c.  v5:= temp @kind object;
  #L1b338e.  v0:= v22 @kind object;
  #L1b3392.  v1:= v23 @kind object;
  #L1b3396.  call temp:= `resolve`(v0, v1, v5) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b339c.  v8:= temp @kind object;
  #L1b339e.  if v5 != v8 then goto L1b33a6;
  #L1b33a2.  v10:= v11 @kind object;
  #L1b33a4.  goto L1b3358;
  #L1b33a6.  v11:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L1b33aa.  call `<init>`(v11, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b33b0.  goto L1b33a2;
  #L1b33b2.  v0:= v24 @kind object;
  #L1b33b6.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b33ba.  v19:= v0;
  #L1b33be.  if v19 == 0 then goto L1b33f2;
  #L1b33c2.  v10:= v24 @kind object;
  #L1b33c6.  v10:= (`java.lang.reflect.GenericArrayType`) v10 @kind object;
  #L1b33ca.  call temp:= `getGenericComponentType`(v10) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b33d0.  v5:= temp @kind object;
  #L1b33d2.  v0:= v22 @kind object;
  #L1b33d6.  v1:= v23 @kind object;
  #L1b33da.  call temp:= `resolve`(v0, v1, v5) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b33e0.  v8:= temp @kind object;
  #L1b33e2.  if v5 == v8 then goto L1b3358;
  #L1b33e6.  v10:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L1b33ea.  call `<init>`(v10, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b33f0.  goto L1b3358;
  #L1b33f2.  v0:= v24 @kind object;
  #L1b33f6.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b33fa.  v19:= v0;
  #L1b33fe.  if v19 == 0 then goto L1b34a8;
  #L1b3402.  v10:= v24 @kind object;
  #L1b3406.  v10:= (`java.lang.reflect.ParameterizedType`) v10 @kind object;
  #L1b340a.  call temp:= `getOwnerType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b3410.  v14:= temp @kind object;
  #L1b3412.  v0:= v22 @kind object;
  #L1b3416.  v1:= v23 @kind object;
  #L1b341a.  call temp:= `resolve`(v0, v1, v14) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b3420.  v9:= temp @kind object;
  #L1b3422.  if v9 == v14 then goto L1b347e;
  #L1b3426.  v4:= 1I;
  #L1b3428.  call temp:= `getActualTypeArguments`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b342e.  v3:= temp @kind object;
  #L1b3430.  v16:= 0I;
  #L1b3434.  v6:= length @variable v3;
  #L1b3436.  v0:= v16;
  #L1b343a.  if v0 >= v6 then goto L1b3482;
  #L1b343e.  v19:= v3[v16] @kind object;
  #L1b3442.  v0:= v22 @kind object;
  #L1b3446.  v1:= v23 @kind object;
  #L1b344a.  v2:= v19 @kind object;
  #L1b344e.  call temp:= `resolve`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b3454.  v15:= temp @kind object;
  #L1b3456.  v19:= v3[v16] @kind object;
  #L1b345a.  v0:= v19 @kind object;
  #L1b345e.  if v15 == v0 then goto L1b3478;
  #L1b3462.  if v4 != 0 then goto L1b3474;
  #L1b3466.  call temp:= `clone`(v3) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1b346c.  v3:= temp @kind object;
  #L1b346e.  v3:= (`java.lang.reflect.Type`[]) v3 @kind object;
  #L1b3472.  v4:= 1I;
  #L1b3474.  v3[v16]:= v15 @kind object;
  #L1b3478.  v16:= v16 + 1;
  #L1b347c.  goto L1b3436;
  #L1b347e.  v4:= 0I;
  #L1b3480.  goto L1b3428;
  #L1b3482.  if v4 == 0 then goto L1b3358;
  #L1b3486.  v19:= new `retrofit2.Utils$ParameterizedTypeImpl`;
  #L1b348a.  call temp:= `getRawType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b3490.  v20:= temp @kind object;
  #L1b3492.  v0:= v19 @kind object;
  #L1b3496.  v1:= v20 @kind object;
  #L1b349a.  call `<init>`(v0, v9, v1, v3) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b34a0.  v10:= v19 @kind object;
  #L1b34a4.  goto L1b3358;
  #L1b34a8.  v0:= v24 @kind object;
  #L1b34ac.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b34b0.  v19:= v0;
  #L1b34b4.  if v19 == 0 then goto L1b35d4;
  #L1b34b8.  v10:= v24 @kind object;
  #L1b34bc.  v10:= (`java.lang.reflect.WildcardType`) v10 @kind object;
  #L1b34c0.  call temp:= `getLowerBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b34c6.  v12:= temp @kind object;
  #L1b34c8.  call temp:= `getUpperBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b34ce.  v13:= temp @kind object;
  #L1b34d0.  v0:= length @variable v12;
  #L1b34d2.  v19:= v0;
  #L1b34d6.  v20:= 1I;
  #L1b34da.  v0:= v19;
  #L1b34de.  v1:= v20;
  #L1b34e2.  if v0 != v1 then goto L1b355c;
  #L1b34e6.  v19:= 0I;
  #L1b34ea.  v19:= v12[v19] @kind object;
  #L1b34ee.  v0:= v22 @kind object;
  #L1b34f2.  v1:= v23 @kind object;
  #L1b34f6.  v2:= v19 @kind object;
  #L1b34fa.  call temp:= `resolve`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b3500.  v7:= temp @kind object;
  #L1b3502.  v19:= 0I;
  #L1b3506.  v19:= v12[v19] @kind object;
  #L1b350a.  v0:= v19 @kind object;
  #L1b350e.  if v7 == v0 then goto L1b3358;
  #L1b3512.  v10:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L1b3516.  v19:= 1I;
  #L1b351a.  v0:= v19;
  #L1b351e.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b3522.  v19:= v0 @kind object;
  #L1b3526.  v20:= 0I;
  #L1b352a.  v21:= constclass @type ^`java.lang.Object` @kind object;
  #L1b352e.  v19[v20]:= v21 @kind object;
  #L1b3532.  v20:= 1I;
  #L1b3536.  v0:= v20;
  #L1b353a.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b353e.  v20:= v0 @kind object;
  #L1b3542.  v21:= 0I;
  #L1b3546.  v20[v21]:= v7 @kind object;
  #L1b354a.  v0:= v19 @kind object;
  #L1b354e.  v1:= v20 @kind object;
  #L1b3552.  call `<init>`(v10, v0, v1) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b3558.  goto L1b3358;
  #L1b355c.  v0:= length @variable v13;
  #L1b355e.  v19:= v0;
  #L1b3562.  v20:= 1I;
  #L1b3566.  v0:= v19;
  #L1b356a.  v1:= v20;
  #L1b356e.  if v0 != v1 then goto L1b3358;
  #L1b3572.  v19:= 0I;
  #L1b3576.  v19:= v13[v19] @kind object;
  #L1b357a.  v0:= v22 @kind object;
  #L1b357e.  v1:= v23 @kind object;
  #L1b3582.  v2:= v19 @kind object;
  #L1b3586.  call temp:= `resolve`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b358c.  v18:= temp @kind object;
  #L1b358e.  v19:= 0I;
  #L1b3592.  v19:= v13[v19] @kind object;
  #L1b3596.  v0:= v18 @kind object;
  #L1b359a.  v1:= v19 @kind object;
  #L1b359e.  if v0 == v1 then goto L1b3358;
  #L1b35a2.  v10:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L1b35a6.  v19:= 1I;
  #L1b35aa.  v0:= v19;
  #L1b35ae.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b35b2.  v19:= v0 @kind object;
  #L1b35b6.  v20:= 0I;
  #L1b35ba.  v19[v20]:= v18 @kind object;
  #L1b35be.  v20:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b35c2.  v0:= v19 @kind object;
  #L1b35c6.  v1:= v20 @kind object;
  #L1b35ca.  call `<init>`(v10, v0, v1) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b35d0.  goto L1b3358;
  #L1b35d4.  v10:= v24 @kind object;
  #L1b35d8.  goto L1b3358;
}
procedure `java.lang.reflect.Type` `resolveTypeVariable`(`java.lang.reflect.Type` v4 @kind object @name `context`, `java.lang.Class` v5 @kind object, `java.lang.reflect.TypeVariable` v6 @kind object) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b35ec.  call temp:= `declaringClassOf`(v6) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @kind static;
  #L1b35f2.  v1:= temp @kind object;
  #L1b35f4.  if v1 != 0 then goto L1b35fa;
  #L1b35f8.  return v6 @kind object;
  #L1b35fa.  call temp:= `getGenericSupertype`(v4, v5, v1) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b3600.  v0:= temp @kind object;
  #L1b3602.  v3:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b3606.  if v3 == 0 then goto L1b35f8;
  #L1b360a.  call temp:= `getTypeParameters`(v1) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L1b3610.  v3:= temp @kind object;
  #L1b3612.  call temp:= `indexOf`(v3, v6) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L1b3618.  v2:= temp;
  #L1b361a.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L1b361e.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b3624.  v3:= temp @kind object;
  #L1b3626.  v6:= v3[v2] @kind object;
  #L1b362a.  goto L1b35f8;
}
procedure `void` `throwIfFatal`(`java.lang.Throwable` v1 @kind object @name `t`) @signature `Lretrofit2/Utils;.throwIfFatal:(Ljava/lang/Throwable;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L1b363c.  v0:= instanceof @variable v1 @type ^`java.lang.VirtualMachineError` @kind boolean;
  #L1b3640.  if v0 == 0 then goto L1b364a;
  #L1b3644.  v1:= (`java.lang.VirtualMachineError`) v1 @kind object;
  #L1b3648.  throw v1;
  #L1b364a.  v0:= instanceof @variable v1 @type ^`java.lang.ThreadDeath` @kind boolean;
  #L1b364e.  if v0 == 0 then goto L1b3658;
  #L1b3652.  v1:= (`java.lang.ThreadDeath`) v1 @kind object;
  #L1b3656.  throw v1;
  #L1b3658.  v0:= instanceof @variable v1 @type ^`java.lang.LinkageError` @kind boolean;
  #L1b365c.  if v0 == 0 then goto L1b3666;
  #L1b3660.  v1:= (`java.lang.LinkageError`) v1 @kind object;
  #L1b3664.  throw v1;
  #L1b3666.  return @kind void;
}
procedure `java.lang.String` `typeToString`(`java.lang.reflect.Type` v1 @kind object @name `type`) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;

  #L1b3678.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L1b367c.  if v0 == 0 then goto L1b368e;
  #L1b3680.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1b3684.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b368a.  v0:= temp @kind object;
  #L1b368c.  return v0 @kind object;
  #L1b368e.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b3694.  v0:= temp @kind object;
  #L1b3696.  goto L1b368c;
}
procedure `void` `validateServiceInterface`(`java.lang.Class` v2 @kind object) @signature `Lretrofit2/Utils;.validateServiceInterface:(Ljava/lang/Class;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1b36a8.  call temp:= `isInterface`(v2) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L1b36ae.  v0:= temp;
  #L1b36b0.  if v0 != 0 then goto L1b36c4;
  #L1b36b4.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b36b8.  v1:= "API declarations must be interfaces." @kind object;
  #L1b36bc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b36c2.  throw v0;
  #L1b36c4.  call temp:= `getInterfaces`(v2) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L1b36ca.  v0:= temp @kind object;
  #L1b36cc.  v0:= length @variable v0;
  #L1b36ce.  if v0 <= 0 then goto L1b36e2;
  #L1b36d2.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b36d6.  v1:= "API interfaces must not extend other interfaces." @kind object;
  #L1b36da.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b36e0.  throw v0;
  #L1b36e2.  return @kind void;
}
