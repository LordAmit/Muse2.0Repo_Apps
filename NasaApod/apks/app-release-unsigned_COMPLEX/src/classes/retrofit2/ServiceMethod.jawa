record `retrofit2.ServiceMethod` @kind class @AccessFlag FINAL {
  `okhttp3.HttpUrl` `retrofit2.ServiceMethod.baseUrl` @AccessFlag PRIVATE_FINAL;
  `retrofit2.CallAdapter` `retrofit2.ServiceMethod.callAdapter` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Call$Factory` `retrofit2.ServiceMethod.callFactory` @AccessFlag PRIVATE_FINAL;
  `okhttp3.MediaType` `retrofit2.ServiceMethod.contentType` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.ServiceMethod.hasBody` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Headers` `retrofit2.ServiceMethod.headers` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `retrofit2.ServiceMethod.httpMethod` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.ServiceMethod.isFormEncoded` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.ServiceMethod.isMultipart` @AccessFlag PRIVATE_FINAL;
  `retrofit2.ParameterHandler`[] `retrofit2.ServiceMethod.parameterHandlers` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `retrofit2.ServiceMethod.relativeUrl` @AccessFlag PRIVATE_FINAL;
  `retrofit2.Converter` `retrofit2.ServiceMethod.responseConverter` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@retrofit2.ServiceMethod.PARAM` @AccessFlag STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit2.ServiceMethod.PARAM_NAME_REGEX` @AccessFlag STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit2.ServiceMethod.PARAM_URL_REGEX` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/ServiceMethod;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b24b0.  v0:= "\\{([a-zA-Z][a-zA-Z0-9_-]*)\\}" @kind object;
  #L1b24b4.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L1b24ba.  v0:= temp @kind object;
  #L1b24bc.  `@@retrofit2.ServiceMethod.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L1b24c0.  v0:= "[a-zA-Z][a-zA-Z0-9_-]*" @kind object;
  #L1b24c4.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L1b24ca.  v0:= temp @kind object;
  #L1b24cc.  `@@retrofit2.ServiceMethod.PARAM_NAME_REGEX` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L1b24d0.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.ServiceMethod` v1 @kind this, `retrofit2.ServiceMethod$Builder` v2 @kind object) @signature `Lretrofit2/ServiceMethod;.<init>:(Lretrofit2/ServiceMethod$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1b24e4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b24ea.  v0:= v2.`retrofit2.ServiceMethod$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L1b24ee.  call temp:= `callFactory`(v0) @signature `Lretrofit2/Retrofit;.callFactory:()Lokhttp3/Call$Factory;` @kind virtual;
  #L1b24f4.  v0:= temp @kind object;
  #L1b24f6.  v1.`retrofit2.ServiceMethod.callFactory` @type ^`okhttp3.Call$Factory` := v0 @kind object;
  #L1b24fa.  v0:= v2.`retrofit2.ServiceMethod$Builder.callAdapter` @type ^`retrofit2.CallAdapter` @kind object;
  #L1b24fe.  v1.`retrofit2.ServiceMethod.callAdapter` @type ^`retrofit2.CallAdapter` := v0 @kind object;
  #L1b2502.  v0:= v2.`retrofit2.ServiceMethod$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L1b2506.  call temp:= `baseUrl`(v0) @signature `Lretrofit2/Retrofit;.baseUrl:()Lokhttp3/HttpUrl;` @kind virtual;
  #L1b250c.  v0:= temp @kind object;
  #L1b250e.  v1.`retrofit2.ServiceMethod.baseUrl` @type ^`okhttp3.HttpUrl` := v0 @kind object;
  #L1b2512.  v0:= v2.`retrofit2.ServiceMethod$Builder.responseConverter` @type ^`retrofit2.Converter` @kind object;
  #L1b2516.  v1.`retrofit2.ServiceMethod.responseConverter` @type ^`retrofit2.Converter` := v0 @kind object;
  #L1b251a.  v0:= v2.`retrofit2.ServiceMethod$Builder.httpMethod` @type ^`java.lang.String` @kind object;
  #L1b251e.  v1.`retrofit2.ServiceMethod.httpMethod` @type ^`java.lang.String` := v0 @kind object;
  #L1b2522.  v0:= v2.`retrofit2.ServiceMethod$Builder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L1b2526.  v1.`retrofit2.ServiceMethod.relativeUrl` @type ^`java.lang.String` := v0 @kind object;
  #L1b252a.  v0:= v2.`retrofit2.ServiceMethod$Builder.headers` @type ^`okhttp3.Headers` @kind object;
  #L1b252e.  v1.`retrofit2.ServiceMethod.headers` @type ^`okhttp3.Headers` := v0 @kind object;
  #L1b2532.  v0:= v2.`retrofit2.ServiceMethod$Builder.contentType` @type ^`okhttp3.MediaType` @kind object;
  #L1b2536.  v1.`retrofit2.ServiceMethod.contentType` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L1b253a.  v0:= v2.`retrofit2.ServiceMethod$Builder.hasBody` @type ^`boolean` @kind boolean;
  #L1b253e.  v1.`retrofit2.ServiceMethod.hasBody` @type ^`boolean` := v0 @kind boolean;
  #L1b2542.  v0:= v2.`retrofit2.ServiceMethod$Builder.isFormEncoded` @type ^`boolean` @kind boolean;
  #L1b2546.  v1.`retrofit2.ServiceMethod.isFormEncoded` @type ^`boolean` := v0 @kind boolean;
  #L1b254a.  v0:= v2.`retrofit2.ServiceMethod$Builder.isMultipart` @type ^`boolean` @kind boolean;
  #L1b254e.  v1.`retrofit2.ServiceMethod.isMultipart` @type ^`boolean` := v0 @kind boolean;
  #L1b2552.  v0:= v2.`retrofit2.ServiceMethod$Builder.parameterHandlers` @type ^`retrofit2.ParameterHandler`[] @kind object;
  #L1b2556.  v1.`retrofit2.ServiceMethod.parameterHandlers` @type ^`retrofit2.ParameterHandler`[] := v0 @kind object;
  #L1b255a.  return @kind void;
}
procedure `java.lang.Class` `boxIfPrimitive`(`java.lang.Class` v1 @kind object) @signature `Lretrofit2/ServiceMethod;.boxIfPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag STATIC {
    temp;
    v0;

  #L1b256c.  v0:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b2570.  if v0 != v1 then goto L1b257a;
  #L1b2574.  v1:= constclass @type ^`java.lang.Boolean` @kind object;
  #L1b2578.  return v1 @kind object;
  #L1b257a.  v0:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b257e.  if v0 != v1 then goto L1b2588;
  #L1b2582.  v1:= constclass @type ^`java.lang.Byte` @kind object;
  #L1b2586.  goto L1b2578;
  #L1b2588.  v0:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b258c.  if v0 != v1 then goto L1b2596;
  #L1b2590.  v1:= constclass @type ^`java.lang.Character` @kind object;
  #L1b2594.  goto L1b2578;
  #L1b2596.  v0:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b259a.  if v0 != v1 then goto L1b25a4;
  #L1b259e.  v1:= constclass @type ^`java.lang.Double` @kind object;
  #L1b25a2.  goto L1b2578;
  #L1b25a4.  v0:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b25a8.  if v0 != v1 then goto L1b25b2;
  #L1b25ac.  v1:= constclass @type ^`java.lang.Float` @kind object;
  #L1b25b0.  goto L1b2578;
  #L1b25b2.  v0:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b25b6.  if v0 != v1 then goto L1b25c0;
  #L1b25ba.  v1:= constclass @type ^`java.lang.Integer` @kind object;
  #L1b25be.  goto L1b2578;
  #L1b25c0.  v0:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b25c4.  if v0 != v1 then goto L1b25ce;
  #L1b25c8.  v1:= constclass @type ^`java.lang.Long` @kind object;
  #L1b25cc.  goto L1b2578;
  #L1b25ce.  v0:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b25d2.  if v0 != v1 then goto L1b2578;
  #L1b25d6.  v1:= constclass @type ^`java.lang.Short` @kind object;
  #L1b25da.  goto L1b2578;
}
procedure `java.util.Set` `parsePathParameters`(`java.lang.String` v3 @kind object @name `path`) @signature `Lretrofit2/ServiceMethod;.parsePathParameters:(Ljava/lang/String;)Ljava/util/Set;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1b25ec.  v2:= `@@retrofit2.ServiceMethod.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` @kind object;
  #L1b25f0.  call temp:= `matcher`(v2, v3) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L1b25f6.  v0:= temp @kind object;
  #L1b25f8.  v1:= new `java.util.LinkedHashSet`;
  #L1b25fc.  call `<init>`(v1) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L1b2602.  call temp:= `find`(v0) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L1b2608.  v2:= temp;
  #L1b260a.  if v2 == 0 then goto L1b2620;
  #L1b260e.  v2:= 1I;
  #L1b2610.  call temp:= `group`(v0, v2) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L1b2616.  v2:= temp @kind object;
  #L1b2618.  call temp:= `add`(v1, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b261e.  goto L1b2602;
  #L1b2620.  return v1 @kind object;
}
procedure `java.lang.Object` `adapt`(`retrofit2.ServiceMethod` v1 @kind this, `retrofit2.Call` v2 @kind object) @signature `Lretrofit2/ServiceMethod;.adapt:(Lretrofit2/Call;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L1b2634.  v0:= v1.`retrofit2.ServiceMethod.callAdapter` @type ^`retrofit2.CallAdapter` @kind object;
  #L1b2638.  call temp:= `adapt`(v0, v2) @signature `Lretrofit2/CallAdapter;.adapt:(Lretrofit2/Call;)Ljava/lang/Object;` @kind interface;
  #L1b263e.  v0:= temp @kind object;
  #L1b2640.  return v0 @kind object;
}
procedure `okhttp3.Call` `toCall`(`retrofit2.ServiceMethod` v12 @kind this, `java.lang.Object`[] v13 @kind object @name `args`) @signature `Lretrofit2/ServiceMethod;.toCall:([Ljava/lang/Object;)Lokhttp3/Call;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1b2654.  v0:= new `retrofit2.RequestBuilder`;
  #L1b2658.  v1:= v12.`retrofit2.ServiceMethod.httpMethod` @type ^`java.lang.String` @kind object;
  #L1b265c.  v2:= v12.`retrofit2.ServiceMethod.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L1b2660.  v3:= v12.`retrofit2.ServiceMethod.relativeUrl` @type ^`java.lang.String` @kind object;
  #L1b2664.  v4:= v12.`retrofit2.ServiceMethod.headers` @type ^`okhttp3.Headers` @kind object;
  #L1b2668.  v5:= v12.`retrofit2.ServiceMethod.contentType` @type ^`okhttp3.MediaType` @kind object;
  #L1b266c.  v6:= v12.`retrofit2.ServiceMethod.hasBody` @type ^`boolean` @kind boolean;
  #L1b2670.  v7:= v12.`retrofit2.ServiceMethod.isFormEncoded` @type ^`boolean` @kind boolean;
  #L1b2674.  v8:= v12.`retrofit2.ServiceMethod.isMultipart` @type ^`boolean` @kind boolean;
  #L1b2678.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lretrofit2/RequestBuilder;.<init>:(Ljava/lang/String;Lokhttp3/HttpUrl;Ljava/lang/String;Lokhttp3/Headers;Lokhttp3/MediaType;ZZZ)V` @kind direct;
  #L1b267e.  v10:= v12.`retrofit2.ServiceMethod.parameterHandlers` @type ^`retrofit2.ParameterHandler`[] @kind object;
  #L1b2682.  if v13 == 0 then goto L1b26e2;
  #L1b2686.  v9:= length @variable v13;
  #L1b2688.  v1:= length @variable v10;
  #L1b268a.  if v9 == v1 then goto L1b26e6;
  #L1b268e.  v1:= new `java.lang.IllegalArgumentException`;
  #L1b2692.  v2:= new `java.lang.StringBuilder`;
  #L1b2696.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b269c.  v3:= "Argument count (" @kind object;
  #L1b26a0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b26a6.  v2:= temp @kind object;
  #L1b26a8.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b26ae.  v2:= temp @kind object;
  #L1b26b0.  v3:= ") doesn't match expected count (" @kind object;
  #L1b26b4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b26ba.  v2:= temp @kind object;
  #L1b26bc.  v3:= length @variable v10;
  #L1b26be.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b26c4.  v2:= temp @kind object;
  #L1b26c6.  v3:= ")" @kind object;
  #L1b26ca.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b26d0.  v2:= temp @kind object;
  #L1b26d2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b26d8.  v2:= temp @kind object;
  #L1b26da.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b26e0.  throw v1;
  #L1b26e2.  v9:= 0I;
  #L1b26e4.  goto L1b2688;
  #L1b26e6.  v11:= 0I;
  #L1b26e8.  if v11 >= v9 then goto L1b2700;
  #L1b26ec.  v1:= v10[v11] @kind object;
  #L1b26f0.  v2:= v13[v11] @kind object;
  #L1b26f4.  call `apply`(v1, v0, v2) @signature `Lretrofit2/ParameterHandler;.apply:(Lretrofit2/RequestBuilder;Ljava/lang/Object;)V` @kind virtual;
  #L1b26fa.  v11:= v11 + 1;
  #L1b26fe.  goto L1b26e8;
  #L1b2700.  v1:= v12.`retrofit2.ServiceMethod.callFactory` @type ^`okhttp3.Call$Factory` @kind object;
  #L1b2704.  call temp:= `build`(v0) @signature `Lretrofit2/RequestBuilder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1b270a.  v2:= temp @kind object;
  #L1b270c.  call temp:= `newCall`(v1, v2) @signature `Lokhttp3/Call$Factory;.newCall:(Lokhttp3/Request;)Lokhttp3/Call;` @kind interface;
  #L1b2712.  v1:= temp @kind object;
  #L1b2714.  return v1 @kind object;
}
procedure `java.lang.Object` `toResponse`(`retrofit2.ServiceMethod` v1 @kind this, `okhttp3.ResponseBody` v2 @kind object @name `body`) @signature `Lretrofit2/ServiceMethod;.toResponse:(Lokhttp3/ResponseBody;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L1b2728.  v0:= v1.`retrofit2.ServiceMethod.responseConverter` @type ^`retrofit2.Converter` @kind object;
  #L1b272c.  call temp:= `convert`(v0, v2) @signature `Lretrofit2/Converter;.convert:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1b2732.  v0:= temp @kind object;
  #L1b2734.  return v0 @kind object;
}
