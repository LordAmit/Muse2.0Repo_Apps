record `retrofit2.Response` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Object` `retrofit2.Response.body` @AccessFlag PRIVATE_FINAL;
  `okhttp3.ResponseBody` `retrofit2.Response.errorBody` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Response` `retrofit2.Response.rawResponse` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Response` v0 @kind this, `okhttp3.Response` v1 @kind object @name `rawResponse`, `java.lang.Object` v2 @kind object, `okhttp3.ResponseBody` v3 @kind object @name `errorBody`) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1af5f8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1af5fe.  v0.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` := v1 @kind object;
  #L1af602.  v0.`retrofit2.Response.body` @type ^`java.lang.Object` := v2 @kind object;
  #L1af606.  v0.`retrofit2.Response.errorBody` @type ^`okhttp3.ResponseBody` := v3 @kind object;
  #L1af60a.  return @kind void;
}
procedure `retrofit2.Response` `error`(`int` v3 @name `code`, `okhttp3.ResponseBody` v4 @kind object @name `body`) @signature `Lretrofit2/Response;.error:(ILokhttp3/ResponseBody;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1af61c.  v0:= 400I;
  #L1af620.  if v3 >= v0 then goto L1af656;
  #L1af624.  v0:= new `java.lang.IllegalArgumentException`;
  #L1af628.  v1:= new `java.lang.StringBuilder`;
  #L1af62c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1af632.  v2:= "code < 400: " @kind object;
  #L1af636.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1af63c.  v1:= temp @kind object;
  #L1af63e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1af644.  v1:= temp @kind object;
  #L1af646.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1af64c.  v1:= temp @kind object;
  #L1af64e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1af654.  throw v0;
  #L1af656.  v0:= new `okhttp3.Response$Builder`;
  #L1af65a.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L1af660.  call temp:= `code`(v0, v3) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af666.  v0:= temp @kind object;
  #L1af668.  v1:= "Response.error()" @kind object;
  #L1af66c.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af672.  v0:= temp @kind object;
  #L1af674.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L1af678.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af67e.  v0:= temp @kind object;
  #L1af680.  v1:= new `okhttp3.Request$Builder`;
  #L1af684.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L1af68a.  v2:= "http://localhost/" @kind object;
  #L1af68e.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1af694.  v1:= temp @kind object;
  #L1af696.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1af69c.  v1:= temp @kind object;
  #L1af69e.  call temp:= `request`(v0, v1) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af6a4.  v0:= temp @kind object;
  #L1af6a6.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1af6ac.  v0:= temp @kind object;
  #L1af6ae.  call temp:= `error`(v4, v0) @signature `Lretrofit2/Response;.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L1af6b4.  v0:= temp @kind object;
  #L1af6b6.  return v0 @kind object;
}
procedure `retrofit2.Response` `error`(`okhttp3.ResponseBody` v2 @kind object @name `body`, `okhttp3.Response` v3 @kind object @name `rawResponse`) @signature `Lretrofit2/Response;.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1af6c8.  v0:= "body == null" @kind object;
  #L1af6cc.  call temp:= `checkNotNull`(v2, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1af6d2.  v0:= "rawResponse == null" @kind object;
  #L1af6d6.  call temp:= `checkNotNull`(v3, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1af6dc.  call temp:= `isSuccessful`(v3) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L1af6e2.  v0:= temp;
  #L1af6e4.  if v0 == 0 then goto L1af6f8;
  #L1af6e8.  v0:= new `java.lang.IllegalArgumentException`;
  #L1af6ec.  v1:= "rawResponse should not be successful response" @kind object;
  #L1af6f0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1af6f6.  throw v0;
  #L1af6f8.  v0:= new `retrofit2.Response`;
  #L1af6fc.  v1:= 0I;
  #L1af6fe.  call `<init>`(v0, v3, v1, v2) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @kind direct;
  #L1af704.  return v0 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v3 @kind object) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1af718.  v0:= new `okhttp3.Response$Builder`;
  #L1af71c.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L1af722.  v1:= 200I;
  #L1af726.  call temp:= `code`(v0, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af72c.  v0:= temp @kind object;
  #L1af72e.  v1:= "OK" @kind object;
  #L1af732.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af738.  v0:= temp @kind object;
  #L1af73a.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L1af73e.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af744.  v0:= temp @kind object;
  #L1af746.  v1:= new `okhttp3.Request$Builder`;
  #L1af74a.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L1af750.  v2:= "http://localhost/" @kind object;
  #L1af754.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1af75a.  v1:= temp @kind object;
  #L1af75c.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1af762.  v1:= temp @kind object;
  #L1af764.  call temp:= `request`(v0, v1) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af76a.  v0:= temp @kind object;
  #L1af76c.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1af772.  v0:= temp @kind object;
  #L1af774.  call temp:= `success`(v3, v0) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L1af77a.  v0:= temp @kind object;
  #L1af77c.  return v0 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v3 @kind object, `okhttp3.Headers` v4 @kind object @name `headers`) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Headers;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1af790.  v0:= "headers == null" @kind object;
  #L1af794.  call temp:= `checkNotNull`(v4, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1af79a.  v0:= new `okhttp3.Response$Builder`;
  #L1af79e.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L1af7a4.  v1:= 200I;
  #L1af7a8.  call temp:= `code`(v0, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af7ae.  v0:= temp @kind object;
  #L1af7b0.  v1:= "OK" @kind object;
  #L1af7b4.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af7ba.  v0:= temp @kind object;
  #L1af7bc.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L1af7c0.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af7c6.  v0:= temp @kind object;
  #L1af7c8.  call temp:= `headers`(v0, v4) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af7ce.  v0:= temp @kind object;
  #L1af7d0.  v1:= new `okhttp3.Request$Builder`;
  #L1af7d4.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L1af7da.  v2:= "http://localhost/" @kind object;
  #L1af7de.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1af7e4.  v1:= temp @kind object;
  #L1af7e6.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1af7ec.  v1:= temp @kind object;
  #L1af7ee.  call temp:= `request`(v0, v1) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af7f4.  v0:= temp @kind object;
  #L1af7f6.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1af7fc.  v0:= temp @kind object;
  #L1af7fe.  call temp:= `success`(v3, v0) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L1af804.  v0:= temp @kind object;
  #L1af806.  return v0 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v2 @kind object, `okhttp3.Response` v3 @kind object @name `rawResponse`) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1af818.  v0:= "rawResponse == null" @kind object;
  #L1af81c.  call temp:= `checkNotNull`(v3, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1af822.  call temp:= `isSuccessful`(v3) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L1af828.  v0:= temp;
  #L1af82a.  if v0 != 0 then goto L1af83e;
  #L1af82e.  v0:= new `java.lang.IllegalArgumentException`;
  #L1af832.  v1:= "rawResponse must be successful response" @kind object;
  #L1af836.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1af83c.  throw v0;
  #L1af83e.  v0:= new `retrofit2.Response`;
  #L1af842.  v1:= 0I;
  #L1af844.  call `<init>`(v0, v3, v2, v1) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @kind direct;
  #L1af84a.  return v0 @kind object;
}
procedure `java.lang.Object` `body`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.body:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af85c.  v0:= v1.`retrofit2.Response.body` @type ^`java.lang.Object` @kind object;
  #L1af860.  return v0 @kind object;
}
procedure `int` `code`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.code:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af874.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1af878.  call temp:= `code`(v0) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L1af87e.  v0:= temp;
  #L1af880.  return v0;
}
procedure `okhttp3.ResponseBody` `errorBody`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.errorBody:()Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af894.  v0:= v1.`retrofit2.Response.errorBody` @type ^`okhttp3.ResponseBody` @kind object;
  #L1af898.  return v0 @kind object;
}
procedure `okhttp3.Headers` `headers`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.headers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af8ac.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1af8b0.  call temp:= `headers`(v0) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L1af8b6.  v0:= temp @kind object;
  #L1af8b8.  return v0 @kind object;
}
procedure `boolean` `isSuccessful`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.isSuccessful:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af8cc.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1af8d0.  call temp:= `isSuccessful`(v0) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L1af8d6.  v0:= temp;
  #L1af8d8.  return v0;
}
procedure `java.lang.String` `message`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.message:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af8ec.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1af8f0.  call temp:= `message`(v0) @signature `Lokhttp3/Response;.message:()Ljava/lang/String;` @kind virtual;
  #L1af8f6.  v0:= temp @kind object;
  #L1af8f8.  return v0 @kind object;
}
procedure `okhttp3.Response` `raw`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.raw:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af90c.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1af910.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af924.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1af928.  call temp:= `toString`(v0) @signature `Lokhttp3/Response;.toString:()Ljava/lang/String;` @kind virtual;
  #L1af92e.  v0:= temp @kind object;
  #L1af930.  return v0 @kind object;
}
