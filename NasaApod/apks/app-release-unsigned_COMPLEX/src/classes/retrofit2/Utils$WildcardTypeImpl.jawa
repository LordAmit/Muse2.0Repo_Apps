record `retrofit2.Utils$WildcardTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.lowerBound` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.upperBound` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this, `java.lang.reflect.Type`[] v4 @kind object @name `upperBounds`, `java.lang.reflect.Type`[] v5 @kind object @name `lowerBounds`) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1b2a28.  v1:= 1I;
  #L1b2a2a.  v2:= 0I;
  #L1b2a2c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b2a32.  v0:= length @variable v5;
  #L1b2a34.  if v0 <= v1 then goto L1b2a44;
  #L1b2a38.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b2a3c.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b2a42.  throw v0;
  #L1b2a44.  v0:= length @variable v4;
  #L1b2a46.  if v0 == v1 then goto L1b2a56;
  #L1b2a4a.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b2a4e.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b2a54.  throw v0;
  #L1b2a56.  v0:= length @variable v5;
  #L1b2a58.  if v0 != v1 then goto L1b2aa4;
  #L1b2a5c.  v0:= v5[v2] @kind object;
  #L1b2a60.  if v0 != 0 then goto L1b2a70;
  #L1b2a64.  v0:= new `java.lang.NullPointerException`;
  #L1b2a68.  call `<init>`(v0) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L1b2a6e.  throw v0;
  #L1b2a70.  v0:= v5[v2] @kind object;
  #L1b2a74.  call `checkNotPrimitive`(v0) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1b2a7a.  v0:= v4[v2] @kind object;
  #L1b2a7e.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1b2a82.  if v0 == v1 then goto L1b2a92;
  #L1b2a86.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b2a8a.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b2a90.  throw v0;
  #L1b2a92.  v0:= v5[v2] @kind object;
  #L1b2a96.  v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b2a9a.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L1b2a9e.  v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b2aa2.  return @kind void;
  #L1b2aa4.  v0:= v4[v2] @kind object;
  #L1b2aa8.  if v0 != 0 then goto L1b2ab8;
  #L1b2aac.  v0:= new `java.lang.NullPointerException`;
  #L1b2ab0.  call `<init>`(v0) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L1b2ab6.  throw v0;
  #L1b2ab8.  v0:= v4[v2] @kind object;
  #L1b2abc.  call `checkNotPrimitive`(v0) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1b2ac2.  v0:= 0I;
  #L1b2ac4.  v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b2ac8.  v0:= v4[v2] @kind object;
  #L1b2acc.  v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b2ad0.  goto L1b2aa2;
}
procedure `boolean` `equals`(`retrofit2.Utils$WildcardTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object @name `other`) @signature `Lretrofit2/Utils$WildcardTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b2ae4.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b2ae8.  if v0 == 0 then goto L1b2b00;
  #L1b2aec.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L1b2af0.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b2af6.  v0:= temp;
  #L1b2af8.  if v0 == 0 then goto L1b2b00;
  #L1b2afc.  v0:= 1I;
  #L1b2afe.  return v0;
  #L1b2b00.  v0:= 0I;
  #L1b2b02.  goto L1b2afe;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b2b14.  v0:= v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2b18.  if v0 == 0 then goto L1b2b2e;
  #L1b2b1c.  v0:= 1I;
  #L1b2b1e.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b2b22.  v1:= 0I;
  #L1b2b24.  v2:= v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2b28.  v0[v1]:= v2 @kind object;
  #L1b2b2c.  return v0 @kind object;
  #L1b2b2e.  v0:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b2b32.  goto L1b2b2c;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b2b44.  v0:= 1I;
  #L1b2b46.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b2b4a.  v1:= 0I;
  #L1b2b4c.  v2:= v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2b50.  v0[v1]:= v2 @kind object;
  #L1b2b54.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b2b68.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2b6c.  if v0 == 0 then goto L1b2b94;
  #L1b2b70.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2b74.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b2b7a.  v0:= temp;
  #L1b2b7c.  v0:= v0 + 31;
  #L1b2b80.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2b84.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b2b8a.  v1:= temp;
  #L1b2b8c.  v1:= v1 + 31;
  #L1b2b90.  v0:= v0 ^~ v1 @kind int;
  #L1b2b92.  return v0;
  #L1b2b94.  v0:= 1I;
  #L1b2b96.  goto L1b2b80;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b2ba8.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2bac.  if v0 == 0 then goto L1b2be4;
  #L1b2bb0.  v0:= new `java.lang.StringBuilder`;
  #L1b2bb4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b2bba.  v1:= "? super " @kind object;
  #L1b2bbe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2bc4.  v0:= temp @kind object;
  #L1b2bc6.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2bca.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b2bd0.  v1:= temp @kind object;
  #L1b2bd2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2bd8.  v0:= temp @kind object;
  #L1b2bda.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b2be0.  v0:= temp @kind object;
  #L1b2be2.  return v0 @kind object;
  #L1b2be4.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2be8.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1b2bec.  if v0 != v1 then goto L1b2bf6;
  #L1b2bf0.  v0:= "?" @kind object;
  #L1b2bf4.  goto L1b2be2;
  #L1b2bf6.  v0:= new `java.lang.StringBuilder`;
  #L1b2bfa.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b2c00.  v1:= "? extends " @kind object;
  #L1b2c04.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2c0a.  v0:= temp @kind object;
  #L1b2c0c.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2c10.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b2c16.  v1:= temp @kind object;
  #L1b2c18.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2c1e.  v0:= temp @kind object;
  #L1b2c20.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b2c26.  v0:= temp @kind object;
  #L1b2c28.  goto L1b2be2;
}
