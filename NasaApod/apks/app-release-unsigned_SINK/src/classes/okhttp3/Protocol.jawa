record `okhttp3.Protocol` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `java.lang.String` `okhttp3.Protocol.protocol` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.Protocol`[] `@@okhttp3.Protocol.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_1_0` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_1_1` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_2` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.QUIC` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.SPDY_3` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lokhttp3/Protocol;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L19d58c.  v7:= 4I;
  #L19d58e.  v6:= 3I;
  #L19d590.  v5:= 2I;
  #L19d592.  v4:= 1I;
  #L19d594.  v3:= 0I;
  #L19d596.  v0:= new `okhttp3.Protocol`;
  #L19d59a.  v1:= "HTTP_1_0" @kind object;
  #L19d59e.  v2:= "http/1.0" @kind object;
  #L19d5a2.  call `<init>`(v0, v1, v3, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19d5a8.  `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19d5ac.  v0:= new `okhttp3.Protocol`;
  #L19d5b0.  v1:= "HTTP_1_1" @kind object;
  #L19d5b4.  v2:= "http/1.1" @kind object;
  #L19d5b8.  call `<init>`(v0, v1, v4, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19d5be.  `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19d5c2.  v0:= new `okhttp3.Protocol`;
  #L19d5c6.  v1:= "SPDY_3" @kind object;
  #L19d5ca.  v2:= "spdy/3.1" @kind object;
  #L19d5ce.  call `<init>`(v0, v1, v5, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19d5d4.  `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19d5d8.  v0:= new `okhttp3.Protocol`;
  #L19d5dc.  v1:= "HTTP_2" @kind object;
  #L19d5e0.  v2:= "h2" @kind object;
  #L19d5e4.  call `<init>`(v0, v1, v6, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19d5ea.  `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19d5ee.  v0:= new `okhttp3.Protocol`;
  #L19d5f2.  v1:= "QUIC" @kind object;
  #L19d5f6.  v2:= "quic" @kind object;
  #L19d5fa.  call `<init>`(v0, v1, v7, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19d600.  `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19d604.  v0:= 5I;
  #L19d606.  v0:= new `okhttp3.Protocol`[v0];
  #L19d60a.  v1:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L19d60e.  v0[v3]:= v1 @kind object;
  #L19d612.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L19d616.  v0[v4]:= v1 @kind object;
  #L19d61a.  v1:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L19d61e.  v0[v5]:= v1 @kind object;
  #L19d622.  v1:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L19d626.  v0[v6]:= v1 @kind object;
  #L19d62a.  v1:= `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` @kind object;
  #L19d62e.  v0[v7]:= v1 @kind object;
  #L19d632.  `@@okhttp3.Protocol.$VALUES` @type ^`okhttp3.Protocol`[] := v0 @kind object;
  #L19d636.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Protocol` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object @name `protocol`) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L19d648.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L19d64e.  v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` := v3 @kind object;
  #L19d652.  return @kind void;
}
procedure `okhttp3.Protocol` `get`(`java.lang.String` v3 @kind object @name `protocol`) @signature `Lokhttp3/Protocol;.get:(Ljava/lang/String;)Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L19d664.  v0:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L19d668.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19d66c.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19d672.  v0:= temp;
  #L19d674.  if v0 == 0 then goto L19d67e;
  #L19d678.  v0:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L19d67c.  return v0 @kind object;
  #L19d67e.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L19d682.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19d686.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19d68c.  v0:= temp;
  #L19d68e.  if v0 == 0 then goto L19d698;
  #L19d692.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L19d696.  goto L19d67c;
  #L19d698.  v0:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L19d69c.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19d6a0.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19d6a6.  v0:= temp;
  #L19d6a8.  if v0 == 0 then goto L19d6b2;
  #L19d6ac.  v0:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L19d6b0.  goto L19d67c;
  #L19d6b2.  v0:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L19d6b6.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19d6ba.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19d6c0.  v0:= temp;
  #L19d6c2.  if v0 == 0 then goto L19d6cc;
  #L19d6c6.  v0:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L19d6ca.  goto L19d67c;
  #L19d6cc.  v0:= `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` @kind object;
  #L19d6d0.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19d6d4.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19d6da.  v0:= temp;
  #L19d6dc.  if v0 == 0 then goto L19d6e6;
  #L19d6e0.  v0:= `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` @kind object;
  #L19d6e4.  goto L19d67c;
  #L19d6e6.  v0:= new `java.io.IOException`;
  #L19d6ea.  v1:= new `java.lang.StringBuilder`;
  #L19d6ee.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19d6f4.  v2:= "Unexpected protocol: " @kind object;
  #L19d6f8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19d6fe.  v1:= temp @kind object;
  #L19d700.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19d706.  v1:= temp @kind object;
  #L19d708.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19d70e.  v1:= temp @kind object;
  #L19d710.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d716.  throw v0;
}
procedure `okhttp3.Protocol` `valueOf`(`java.lang.String` v1 @kind object @name `name`) @signature `Lokhttp3/Protocol;.valueOf:(Ljava/lang/String;)Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19d728.  v0:= constclass @type ^`okhttp3.Protocol` @kind object;
  #L19d72c.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L19d732.  v0:= temp @kind object;
  #L19d734.  v0:= (`okhttp3.Protocol`) v0 @kind object;
  #L19d738.  return v0 @kind object;
}
procedure `okhttp3.Protocol`[] `values`() @signature `Lokhttp3/Protocol;.values:()[Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19d74c.  v0:= `@@okhttp3.Protocol.$VALUES` @type ^`okhttp3.Protocol`[] @kind object;
  #L19d750.  call temp:= `clone`(v0) @signature `[Lokhttp3/Protocol;.clone:()Ljava/lang/Object;` @kind virtual;
  #L19d756.  v0:= temp @kind object;
  #L19d758.  v0:= (`okhttp3.Protocol`[]) v0 @kind object;
  #L19d75c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Protocol` v1 @kind this) @signature `Lokhttp3/Protocol;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19d770.  v0:= v1.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19d774.  return v0 @kind object;
}
