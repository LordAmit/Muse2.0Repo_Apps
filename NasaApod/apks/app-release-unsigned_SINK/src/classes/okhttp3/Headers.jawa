record `okhttp3.Headers` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.Headers.namesAndValues` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Headers` v2 @kind this, `okhttp3.Headers$Builder` v3 @kind object @name `builder`) @signature `Lokhttp3/Headers;.<init>:(Lokhttp3/Headers$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L199bc4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L199bca.  v0:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L199bce.  v1:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L199bd2.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L199bd8.  v1:= temp;
  #L199bda.  v1:= new `java.lang.String`[v1];
  #L199bde.  call temp:= `toArray`(v0, v1) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L199be4.  v0:= temp @kind object;
  #L199be6.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L199bea.  v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] := v0 @kind object;
  #L199bee.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Headers` v0 @kind this, `java.lang.String`[] v1 @kind object @name `namesAndValues`) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L199c00.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L199c06.  v0.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] := v1 @kind object;
  #L199c0a.  return @kind void;
}
procedure `java.lang.String` `get`(`java.lang.String`[] v2 @kind object @name `namesAndValues`, `java.lang.String` v3 @kind object @name `name`) @signature `Lokhttp3/Headers;.get:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L199c1c.  v1:= length @variable v2;
  #L199c1e.  v0:= v1 + -2;
  #L199c22.  if v0 < 0 then goto L199c46;
  #L199c26.  v1:= v2[v0] @kind object;
  #L199c2a.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L199c30.  v1:= temp;
  #L199c32.  if v1 == 0 then goto L199c40;
  #L199c36.  v1:= v0 + 1;
  #L199c3a.  v1:= v2[v1] @kind object;
  #L199c3e.  return v1 @kind object;
  #L199c40.  v0:= v0 + -2;
  #L199c44.  goto L199c22;
  #L199c46.  v1:= 0I;
  #L199c48.  goto L199c3e;
}
procedure `okhttp3.Headers` `of`(`java.util.Map` v9 @kind object) @signature `Lokhttp3/Headers;.of:(Ljava/util/Map;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L199c5c.  v8:= 0I;
  #L199c5e.  v7:= -1I;
  #L199c60.  if v9 != 0 then goto L199c74;
  #L199c64.  v5:= new `java.lang.NullPointerException`;
  #L199c68.  v6:= "headers == null" @kind object;
  #L199c6c.  call `<init>`(v5, v6) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L199c72.  throw v5;
  #L199c74.  call temp:= `size`(v9) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L199c7a.  v5:= temp;
  #L199c7c.  v5:= v5 * 2;
  #L199c80.  v3:= new `java.lang.String`[v5];
  #L199c84.  v1:= 0I;
  #L199c86.  call temp:= `entrySet`(v9) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L199c8c.  v5:= temp @kind object;
  #L199c8e.  call temp:= `iterator`(v5) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L199c94.  v6:= temp @kind object;
  #L199c96.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L199c9c.  v5:= temp;
  #L199c9e.  if v5 == 0 then goto L199d7a;
  #L199ca2.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L199ca8.  v0:= temp @kind object;
  #L199caa.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L199cae.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L199cb4.  v5:= temp @kind object;
  #L199cb6.  if v5 == 0 then goto L199cc6;
  #L199cba.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L199cc0.  v5:= temp @kind object;
  #L199cc2.  if v5 != 0 then goto L199cd6;
  #L199cc6.  v5:= new `java.lang.IllegalArgumentException`;
  #L199cca.  v6:= "Headers cannot be null" @kind object;
  #L199cce.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L199cd4.  throw v5;
  #L199cd6.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L199cdc.  v5:= temp @kind object;
  #L199cde.  v5:= (`java.lang.String`) v5 @kind object;
  #L199ce2.  call temp:= `trim`(v5) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L199ce8.  v2:= temp @kind object;
  #L199cea.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L199cf0.  v5:= temp @kind object;
  #L199cf2.  v5:= (`java.lang.String`) v5 @kind object;
  #L199cf6.  call temp:= `trim`(v5) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L199cfc.  v4:= temp @kind object;
  #L199cfe.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L199d04.  v5:= temp;
  #L199d06.  if v5 == 0 then goto L199d22;
  #L199d0a.  call temp:= `indexOf`(v2, v8) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L199d10.  v5:= temp;
  #L199d12.  if v5 != v7 then goto L199d22;
  #L199d16.  call temp:= `indexOf`(v4, v8) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L199d1c.  v5:= temp;
  #L199d1e.  if v5 == v7 then goto L199d68;
  #L199d22.  v5:= new `java.lang.IllegalArgumentException`;
  #L199d26.  v6:= new `java.lang.StringBuilder`;
  #L199d2a.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L199d30.  v7:= "Unexpected header: " @kind object;
  #L199d34.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L199d3a.  v6:= temp @kind object;
  #L199d3c.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L199d42.  v6:= temp @kind object;
  #L199d44.  v7:= ": " @kind object;
  #L199d48.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L199d4e.  v6:= temp @kind object;
  #L199d50.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L199d56.  v6:= temp @kind object;
  #L199d58.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L199d5e.  v6:= temp @kind object;
  #L199d60.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L199d66.  throw v5;
  #L199d68.  v3[v1]:= v2 @kind object;
  #L199d6c.  v5:= v1 + 1;
  #L199d70.  v3[v5]:= v4 @kind object;
  #L199d74.  v1:= v1 + 2;
  #L199d78.  goto L199c96;
  #L199d7a.  v5:= new `okhttp3.Headers`;
  #L199d7e.  call `<init>`(v5, v3) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L199d84.  return v5 @kind object;
}
procedure `okhttp3.Headers` `of`(`java.lang.String`[] v6 @kind object @name `namesAndValues`) @signature `Lokhttp3/Headers;.of:([Ljava/lang/String;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L199d98.  v5:= 0I;
  #L199d9a.  v4:= -1I;
  #L199d9c.  if v6 != 0 then goto L199db0;
  #L199da0.  v3:= new `java.lang.NullPointerException`;
  #L199da4.  v4:= "namesAndValues == null" @kind object;
  #L199da8.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L199dae.  throw v3;
  #L199db0.  v3:= length @variable v6;
  #L199db2.  v3:= v3 %% 2;
  #L199db6.  if v3 == 0 then goto L199dca;
  #L199dba.  v3:= new `java.lang.IllegalArgumentException`;
  #L199dbe.  v4:= "Expected alternating header names and values" @kind object;
  #L199dc2.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L199dc8.  throw v3;
  #L199dca.  call temp:= `clone`(v6) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L199dd0.  v6:= temp @kind object;
  #L199dd2.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L199dd6.  v0:= 0I;
  #L199dd8.  v3:= length @variable v6;
  #L199dda.  if v0 >= v3 then goto L199e0c;
  #L199dde.  v3:= v6[v0] @kind object;
  #L199de2.  if v3 != 0 then goto L199df6;
  #L199de6.  v3:= new `java.lang.IllegalArgumentException`;
  #L199dea.  v4:= "Headers cannot be null" @kind object;
  #L199dee.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L199df4.  throw v3;
  #L199df6.  v3:= v6[v0] @kind object;
  #L199dfa.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L199e00.  v3:= temp @kind object;
  #L199e02.  v6[v0]:= v3 @kind object;
  #L199e06.  v0:= v0 + 1;
  #L199e0a.  goto L199dd8;
  #L199e0c.  v0:= 0I;
  #L199e0e.  v3:= length @variable v6;
  #L199e10.  if v0 >= v3 then goto L199e90;
  #L199e14.  v1:= v6[v0] @kind object;
  #L199e18.  v3:= v0 + 1;
  #L199e1c.  v2:= v6[v3] @kind object;
  #L199e20.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L199e26.  v3:= temp;
  #L199e28.  if v3 == 0 then goto L199e44;
  #L199e2c.  call temp:= `indexOf`(v1, v5) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L199e32.  v3:= temp;
  #L199e34.  if v3 != v4 then goto L199e44;
  #L199e38.  call temp:= `indexOf`(v2, v5) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L199e3e.  v3:= temp;
  #L199e40.  if v3 == v4 then goto L199e8a;
  #L199e44.  v3:= new `java.lang.IllegalArgumentException`;
  #L199e48.  v4:= new `java.lang.StringBuilder`;
  #L199e4c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L199e52.  v5:= "Unexpected header: " @kind object;
  #L199e56.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L199e5c.  v4:= temp @kind object;
  #L199e5e.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L199e64.  v4:= temp @kind object;
  #L199e66.  v5:= ": " @kind object;
  #L199e6a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L199e70.  v4:= temp @kind object;
  #L199e72.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L199e78.  v4:= temp @kind object;
  #L199e7a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L199e80.  v4:= temp @kind object;
  #L199e82.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L199e88.  throw v3;
  #L199e8a.  v0:= v0 + 2;
  #L199e8e.  goto L199e0e;
  #L199e90.  v3:= new `okhttp3.Headers`;
  #L199e94.  call `<init>`(v3, v6) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L199e9a.  return v3 @kind object;
}
procedure `long` `byteCount`(`okhttp3.Headers` v6 @kind this) @signature `Lokhttp3/Headers;.byteCount:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L199eac.  v4:= v6.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L199eb0.  v4:= length @variable v4;
  #L199eb2.  v4:= v4 * 2;
  #L199eb6.  v2:= (`long`) v4 @kind i2l;
  #L199eb8.  v0:= 0I;
  #L199eba.  v4:= v6.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L199ebe.  v1:= length @variable v4;
  #L199ec0.  if v0 >= v1 then goto L199ede;
  #L199ec4.  v4:= v6.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L199ec8.  v4:= v4[v0] @kind object;
  #L199ecc.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L199ed2.  v4:= temp;
  #L199ed4.  v4:= (`long`) v4 @kind i2l;
  #L199ed6.  v2:= v2 + v4 @kind long;
  #L199ed8.  v0:= v0 + 1;
  #L199edc.  goto L199ec0;
  #L199ede.  return v2 @kind wide;
}
procedure `boolean` `equals`(`okhttp3.Headers` v2 @kind this, `java.lang.Object` v3 @kind object @name `other`) @signature `Lokhttp3/Headers;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L199ef0.  v0:= instanceof @variable v3 @type ^`okhttp3.Headers` @kind boolean;
  #L199ef4.  if v0 == 0 then goto L199f14;
  #L199ef8.  v3:= (`okhttp3.Headers`) v3 @kind object;
  #L199efc.  v0:= v3.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L199f00.  v1:= v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L199f04.  call temp:= `equals`(v0, v1) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L199f0a.  v0:= temp;
  #L199f0c.  if v0 == 0 then goto L199f14;
  #L199f10.  v0:= 1I;
  #L199f12.  return v0;
  #L199f14.  v0:= 0I;
  #L199f16.  goto L199f12;
}
procedure `java.lang.String` `get`(`okhttp3.Headers` v1 @kind this, `java.lang.String` v2 @kind object @name `name`) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L199f28.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L199f2c.  call temp:= `get`(v0, v2) @signature `Lokhttp3/Headers;.get:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L199f32.  v0:= temp @kind object;
  #L199f34.  return v0 @kind object;
}
procedure `java.util.Date` `getDate`(`okhttp3.Headers` v2 @kind this, `java.lang.String` v3 @kind object @name `name`) @signature `Lokhttp3/Headers;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L199f48.  call temp:= `get`(v2, v3) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L199f4e.  v0:= temp @kind object;
  #L199f50.  if v0 == 0 then goto L199f5e;
  #L199f54.  call temp:= `parse`(v0) @signature `Lokhttp3/internal/http/HttpDate;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L199f5a.  v1:= temp @kind object;
  #L199f5c.  return v1 @kind object;
  #L199f5e.  v1:= 0I;
  #L199f60.  goto L199f5c;
}
procedure `int` `hashCode`(`okhttp3.Headers` v1 @kind this) @signature `Lokhttp3/Headers;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L199f74.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L199f78.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L199f7e.  v0:= temp;
  #L199f80.  return v0;
}
procedure `java.lang.String` `name`(`okhttp3.Headers` v2 @kind this, `int` v3 @name `index`) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L199f94.  v0:= v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L199f98.  v1:= v3 * 2;
  #L199f9c.  v0:= v0[v1] @kind object;
  #L199fa0.  return v0 @kind object;
}
procedure `java.util.Set` `names`(`okhttp3.Headers` v4 @kind this) @signature `Lokhttp3/Headers;.names:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L199fb4.  v1:= new `java.util.TreeSet`;
  #L199fb8.  v3:= `@@java.lang.String.CASE_INSENSITIVE_ORDER` @type ^`java.util.Comparator` @kind object;
  #L199fbc.  call `<init>`(v1, v3) @signature `Ljava/util/TreeSet;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L199fc2.  v0:= 0I;
  #L199fc4.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L199fca.  v2:= temp;
  #L199fcc.  if v0 >= v2 then goto L199fe4;
  #L199fd0.  call temp:= `name`(v4, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L199fd6.  v3:= temp @kind object;
  #L199fd8.  call temp:= `add`(v1, v3) @signature `Ljava/util/TreeSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L199fde.  v0:= v0 + 1;
  #L199fe2.  goto L199fcc;
  #L199fe4.  call temp:= `unmodifiableSet`(v1) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L199fea.  v3:= temp @kind object;
  #L199fec.  return v3 @kind object;
}
procedure `okhttp3.Headers$Builder` `newBuilder`(`okhttp3.Headers` v3 @kind this) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19a000.  v0:= new `okhttp3.Headers$Builder`;
  #L19a004.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L19a00a.  v1:= v0.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L19a00e.  v2:= v3.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L19a012.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/Collections;.addAll:(Ljava/util/Collection;[Ljava/lang/Object;)Z` @kind static;
  #L19a018.  return v0 @kind object;
}
procedure `int` `size`(`okhttp3.Headers` v1 @kind this) @signature `Lokhttp3/Headers;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19a02c.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L19a030.  v0:= length @variable v0;
  #L19a032.  v0:= v0 / 2;
  #L19a036.  return v0;
}
procedure `java.util.Map` `toMultimap`(`okhttp3.Headers` v7 @kind this) @signature `Lokhttp3/Headers;.toMultimap:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L19a048.  v2:= new `java.util.TreeMap`;
  #L19a04c.  v5:= `@@java.lang.String.CASE_INSENSITIVE_ORDER` @type ^`java.util.Comparator` @kind object;
  #L19a050.  call `<init>`(v2, v5) @signature `Ljava/util/TreeMap;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L19a056.  v0:= 0I;
  #L19a058.  call temp:= `size`(v7) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L19a05e.  v3:= temp;
  #L19a060.  if v0 >= v3 then goto L19a0ae;
  #L19a064.  call temp:= `name`(v7, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L19a06a.  v5:= temp @kind object;
  #L19a06c.  v6:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L19a070.  call temp:= `toLowerCase`(v5, v6) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L19a076.  v1:= temp @kind object;
  #L19a078.  call temp:= `get`(v2, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19a07e.  v4:= temp @kind object;
  #L19a080.  v4:= (`java.util.List`) v4 @kind object;
  #L19a084.  if v4 != 0 then goto L19a09a;
  #L19a088.  v4:= new `java.util.ArrayList`;
  #L19a08c.  v5:= 2I;
  #L19a08e.  call `<init>`(v4, v5) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L19a094.  call temp:= `put`(v2, v1, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L19a09a.  call temp:= `value`(v7, v0) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L19a0a0.  v5:= temp @kind object;
  #L19a0a2.  call temp:= `add`(v4, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L19a0a8.  v0:= v0 + 1;
  #L19a0ac.  goto L19a060;
  #L19a0ae.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Headers` v5 @kind this) @signature `Lokhttp3/Headers;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L19a0c0.  v1:= new `java.lang.StringBuilder`;
  #L19a0c4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19a0ca.  v0:= 0I;
  #L19a0cc.  call temp:= `size`(v5) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L19a0d2.  v2:= temp;
  #L19a0d4.  if v0 >= v2 then goto L19a114;
  #L19a0d8.  call temp:= `name`(v5, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L19a0de.  v3:= temp @kind object;
  #L19a0e0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a0e6.  v3:= temp @kind object;
  #L19a0e8.  v4:= ": " @kind object;
  #L19a0ec.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a0f2.  v3:= temp @kind object;
  #L19a0f4.  call temp:= `value`(v5, v0) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L19a0fa.  v4:= temp @kind object;
  #L19a0fc.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a102.  v3:= temp @kind object;
  #L19a104.  v4:= "\n" @kind object;
  #L19a108.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19a10e.  v0:= v0 + 1;
  #L19a112.  goto L19a0d4;
  #L19a114.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19a11a.  v3:= temp @kind object;
  #L19a11c.  return v3 @kind object;
}
procedure `java.lang.String` `value`(`okhttp3.Headers` v2 @kind this, `int` v3 @name `index`) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19a130.  v0:= v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L19a134.  v1:= v3 * 2;
  #L19a138.  v1:= v1 + 1;
  #L19a13c.  v0:= v0[v1] @kind object;
  #L19a140.  return v0 @kind object;
}
procedure `java.util.List` `values`(`okhttp3.Headers` v4 @kind this, `java.lang.String` v5 @kind object @name `name`) @signature `Lokhttp3/Headers;.values:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L19a154.  v1:= 0I;
  #L19a156.  v0:= 0I;
  #L19a158.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L19a15e.  v2:= temp;
  #L19a160.  if v0 >= v2 then goto L19a19c;
  #L19a164.  call temp:= `name`(v4, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L19a16a.  v3:= temp @kind object;
  #L19a16c.  call temp:= `equalsIgnoreCase`(v5, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L19a172.  v3:= temp;
  #L19a174.  if v3 == 0 then goto L19a196;
  #L19a178.  if v1 != 0 then goto L19a188;
  #L19a17c.  v1:= new `java.util.ArrayList`;
  #L19a180.  v3:= 2I;
  #L19a182.  call `<init>`(v1, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L19a188.  call temp:= `value`(v4, v0) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L19a18e.  v3:= temp @kind object;
  #L19a190.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L19a196.  v0:= v0 + 1;
  #L19a19a.  goto L19a160;
  #L19a19c.  if v1 == 0 then goto L19a1aa;
  #L19a1a0.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L19a1a6.  v3:= temp @kind object;
  #L19a1a8.  return v3 @kind object;
  #L19a1aa.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L19a1b0.  v3:= temp @kind object;
  #L19a1b2.  goto L19a1a8;
}
