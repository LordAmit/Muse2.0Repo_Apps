record `okhttp3.ConnectionPool` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Runnable` `okhttp3.ConnectionPool.cleanupRunnable` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.ConnectionPool.cleanupRunning` @AccessFlag ;
  `java.util.Deque` `okhttp3.ConnectionPool.connections` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.ConnectionPool.keepAliveDurationNs` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.ConnectionPool.maxIdleConnections` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.RouteDatabase` `okhttp3.ConnectionPool.routeDatabase` @AccessFlag FINAL;
}
global `boolean` `@@okhttp3.ConnectionPool.$assertionsDisabled` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.Executor` `@@okhttp3.ConnectionPool.executor` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/ConnectionPool;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L196c9c.  v8:= 1I;
  #L196c9e.  v2:= 0I;
  #L196ca0.  v0:= constclass @type ^`okhttp3.ConnectionPool` @kind object;
  #L196ca4.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L196caa.  v0:= temp;
  #L196cac.  if v0 != 0 then goto L196cea;
  #L196cb0.  v0:= v8;
  #L196cb2.  `@@okhttp3.ConnectionPool.$assertionsDisabled` @type ^`boolean` := v0 @kind boolean;
  #L196cb6.  v1:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L196cba.  v3:= 2147483647I;
  #L196cc0.  v4:= 60L;
  #L196cc4.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L196cc8.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L196ccc.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L196cd2.  v0:= "OkHttp ConnectionPool" @kind object;
  #L196cd6.  call temp:= `threadFactory`(v0, v8) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L196cdc.  v8:= temp @kind object;
  #L196cde.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L196ce4.  `@@okhttp3.ConnectionPool.executor` @type ^`java.util.concurrent.Executor` := v1 @kind object;
  #L196ce8.  return @kind void;
  #L196cea.  v0:= v2;
  #L196cec.  goto L196cb2;
}
procedure `void` `<init>`(`okhttp3.ConnectionPool` v4 @kind this) @signature `Lokhttp3/ConnectionPool;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L196d00.  v0:= 5I;
  #L196d02.  v2:= 5L;
  #L196d06.  v1:= `@@java.util.concurrent.TimeUnit.MINUTES` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L196d0a.  call `<init>`(v4, v0, v2, v1) @signature `Lokhttp3/ConnectionPool;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L196d10.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionPool` v4 @kind this, `int` v5 @name `maxIdleConnections`, `long` v6 @name `keepAliveDuration`, `java.util.concurrent.TimeUnit` v8 @kind object @name `timeUnit`) @signature `Lokhttp3/ConnectionPool;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L196d24.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L196d2a.  v0:= new `okhttp3.ConnectionPool$1`;
  #L196d2e.  call `<init>`(v0, v4) @signature `Lokhttp3/ConnectionPool$1;.<init>:(Lokhttp3/ConnectionPool;)V` @kind direct;
  #L196d34.  v4.`okhttp3.ConnectionPool.cleanupRunnable` @type ^`java.lang.Runnable` := v0 @kind object;
  #L196d38.  v0:= new `java.util.ArrayDeque`;
  #L196d3c.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L196d42.  v4.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` := v0 @kind object;
  #L196d46.  v0:= new `okhttp3.internal.connection.RouteDatabase`;
  #L196d4a.  call `<init>`(v0) @signature `Lokhttp3/internal/connection/RouteDatabase;.<init>:()V` @kind direct;
  #L196d50.  v4.`okhttp3.ConnectionPool.routeDatabase` @type ^`okhttp3.internal.connection.RouteDatabase` := v0 @kind object;
  #L196d54.  v4.`okhttp3.ConnectionPool.maxIdleConnections` @type ^`int` := v5;
  #L196d58.  call temp:= `toNanos`(v8, v6) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L196d5e.  v0:= temp @kind wide;
  #L196d60.  v4.`okhttp3.ConnectionPool.keepAliveDurationNs` @type ^`long` := v0 @kind wide;
  #L196d64.  v0:= 0L;
  #L196d68.  v0:= lcmp(v6, v0);
  #L196d6c.  if v0 > 0 then goto L196da2;
  #L196d70.  v0:= new `java.lang.IllegalArgumentException`;
  #L196d74.  v1:= new `java.lang.StringBuilder`;
  #L196d78.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L196d7e.  v2:= "keepAliveDuration <= 0: " @kind object;
  #L196d82.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L196d88.  v1:= temp @kind object;
  #L196d8a.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L196d90.  v1:= temp @kind object;
  #L196d92.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L196d98.  v1:= temp @kind object;
  #L196d9a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L196da0.  throw v0;
  #L196da2.  return @kind void;
}
procedure `int` `pruneAndGetAllocationCount`(`okhttp3.ConnectionPool` v8 @kind this, `okhttp3.internal.connection.RealConnection` v9 @kind object @name `connection`, `long` v10 @name `now`) @signature `Lokhttp3/ConnectionPool;.pruneAndGetAllocationCount:(Lokhttp3/internal/connection/RealConnection;J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L196db4.  v3:= v9.`okhttp3.internal.connection.RealConnection.allocations` @type ^`java.util.List` @kind object;
  #L196db8.  v0:= 0I;
  #L196dba.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L196dc0.  v5:= temp;
  #L196dc2.  if v0 >= v5 then goto L196e6e;
  #L196dc6.  call temp:= `get`(v3, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L196dcc.  v2:= temp @kind object;
  #L196dce.  v2:= (`java.lang.ref.Reference`) v2 @kind object;
  #L196dd2.  call temp:= `get`(v2) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L196dd8.  v5:= temp @kind object;
  #L196dda.  if v5 == 0 then goto L196de4;
  #L196dde.  v0:= v0 + 1;
  #L196de2.  goto L196dba;
  #L196de4.  v4:= v2 @kind object;
  #L196de6.  v4:= (`okhttp3.internal.connection.StreamAllocation$StreamAllocationReference`) v4 @kind object;
  #L196dea.  v5:= new `java.lang.StringBuilder`;
  #L196dee.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L196df4.  v6:= "A connection to " @kind object;
  #L196df8.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L196dfe.  v5:= temp @kind object;
  #L196e00.  call temp:= `route`(v9) @signature `Lokhttp3/internal/connection/RealConnection;.route:()Lokhttp3/Route;` @kind virtual;
  #L196e06.  v6:= temp @kind object;
  #L196e08.  call temp:= `address`(v6) @signature `Lokhttp3/Route;.address:()Lokhttp3/Address;` @kind virtual;
  #L196e0e.  v6:= temp @kind object;
  #L196e10.  call temp:= `url`(v6) @signature `Lokhttp3/Address;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L196e16.  v6:= temp @kind object;
  #L196e18.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L196e1e.  v5:= temp @kind object;
  #L196e20.  v6:= " was leaked. Did you forget to close a response body?" @kind object;
  #L196e24.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L196e2a.  v5:= temp @kind object;
  #L196e2c.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L196e32.  v1:= temp @kind object;
  #L196e34.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L196e3a.  v5:= temp @kind object;
  #L196e3c.  v6:= v4.`okhttp3.internal.connection.StreamAllocation$StreamAllocationReference.callStackTrace` @type ^`java.lang.Object` @kind object;
  #L196e40.  call `logCloseableLeak`(v5, v1, v6) @signature `Lokhttp3/internal/platform/Platform;.logCloseableLeak:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L196e46.  call temp:= `remove`(v3, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L196e4c.  v5:= 1I;
  #L196e4e.  v9.`okhttp3.internal.connection.RealConnection.noNewStreams` @type ^`boolean` := v5 @kind boolean;
  #L196e52.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L196e58.  v5:= temp;
  #L196e5a.  if v5 == 0 then goto L196dba;
  #L196e5e.  v6:= v8.`okhttp3.ConnectionPool.keepAliveDurationNs` @type ^`long` @kind wide;
  #L196e62.  v6:= v10 - v6 @kind long;
  #L196e66.  v9.`okhttp3.internal.connection.RealConnection.idleAtNanos` @type ^`long` := v6 @kind wide;
  #L196e6a.  v5:= 0I;
  #L196e6c.  return v5;
  #L196e6e.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L196e74.  v5:= temp;
  #L196e76.  goto L196e6c;
}
procedure `long` `cleanup`(`okhttp3.ConnectionPool` v13 @kind this, `long` v14 @name `now`) @signature `Lokhttp3/ConnectionPool;.cleanup:(J)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L196e88.  v3:= 0I;
  #L196e8a.  v2:= 0I;
  #L196e8c.  v6:= 0I;
  #L196e8e.  v8:= -9223372036854775808L;
  #L196e92.  @monitorenter v13
  #Try_start0.  
  #L196e94.  v7:= v13.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L196e98.  call temp:= `iterator`(v7) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L196e9e.  v1:= temp @kind object;
  #L196ea0.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L196ea6.  v7:= temp;
  #L196ea8.  if v7 == 0 then goto L196ee4;
  #L196eac.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L196eb2.  v0:= temp @kind object;
  #L196eb4.  v0:= (`okhttp3.internal.connection.RealConnection`) v0 @kind object;
  #L196eb8.  call temp:= `pruneAndGetAllocationCount`(v13, v0, v14) @signature `Lokhttp3/ConnectionPool;.pruneAndGetAllocationCount:(Lokhttp3/internal/connection/RealConnection;J)I` @kind direct;
  #L196ebe.  v7:= temp;
  #L196ec0.  if v7 <= 0 then goto L196eca;
  #L196ec4.  v3:= v3 + 1;
  #L196ec8.  goto L196ea0;
  #L196eca.  v2:= v2 + 1;
  #L196ece.  v10:= v0.`okhttp3.internal.connection.RealConnection.idleAtNanos` @type ^`long` @kind wide;
  #L196ed2.  v4:= v14 - v10 @kind long;
  #L196ed6.  v7:= lcmp(v4, v8);
  #L196eda.  if v7 <= 0 then goto L196ea0;
  #L196ede.  v8:= v4 @kind wide;
  #L196ee0.  v6:= v0 @kind object;
  #L196ee2.  goto L196ea0;
  #L196ee4.  v10:= v13.`okhttp3.ConnectionPool.keepAliveDurationNs` @type ^`long` @kind wide;
  #L196ee8.  v7:= lcmp(v8, v10);
  #L196eec.  if v7 >= 0 then goto L196ef8;
  #L196ef0.  v7:= v13.`okhttp3.ConnectionPool.maxIdleConnections` @type ^`int`;
  #L196ef4.  if v2 <= v7 then goto L196f18;
  #L196ef8.  v7:= v13.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L196efc.  call temp:= `remove`(v7, v6) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L196f02.  @monitorexit v13
  #Try_end0.  
  #L196f04.  call temp:= `socket`(v6) @signature `Lokhttp3/internal/connection/RealConnection;.socket:()Ljava/net/Socket;` @kind virtual;
  #L196f0a.  v7:= temp @kind object;
  #L196f0c.  call `closeQuietly`(v7) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/Socket;)V` @kind static;
  #L196f12.  v10:= 0L;
  #L196f16.  return v10 @kind wide;
  #L196f18.  if v2 <= 0 then goto L196f2c;
  #Try_start1.  
  #L196f1c.  v10:= v13.`okhttp3.ConnectionPool.keepAliveDurationNs` @type ^`long` @kind wide;
  #L196f20.  v10:= v10 - v8 @kind long;
  #L196f22.  @monitorexit v13
  #L196f24.  goto L196f16;
  #L196f26.  v7:= Exception @type ^`java.lang.Throwable` @kind object;
  #L196f28.  @monitorexit v13
  #Try_end1.  
  #L196f2a.  throw v7;
  #L196f2c.  if v3 <= 0 then goto L196f38;
  #Try_start2.  
  #L196f30.  v10:= v13.`okhttp3.ConnectionPool.keepAliveDurationNs` @type ^`long` @kind wide;
  #L196f34.  @monitorexit v13
  #L196f36.  goto L196f16;
  #L196f38.  v7:= 0I;
  #L196f3a.  v13.`okhttp3.ConnectionPool.cleanupRunning` @type ^`boolean` := v7 @kind boolean;
  #L196f3e.  v10:= -1L;
  #L196f42.  @monitorexit v13
  #Try_end2.  
  #L196f44.  goto L196f16;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L196f26;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L196f26;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L196f26;
}
procedure `boolean` `connectionBecameIdle`(`okhttp3.ConnectionPool` v1 @kind this, `okhttp3.internal.connection.RealConnection` v2 @kind object @name `connection`) @signature `Lokhttp3/ConnectionPool;.connectionBecameIdle:(Lokhttp3/internal/connection/RealConnection;)Z` @AccessFlag  {
    temp;
    v0;

  #L196f74.  v0:= `@@okhttp3.ConnectionPool.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L196f78.  if v0 != 0 then goto L196f94;
  #L196f7c.  call temp:= `holdsLock`(v1) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L196f82.  v0:= temp;
  #L196f84.  if v0 != 0 then goto L196f94;
  #L196f88.  v0:= new `java.lang.AssertionError`;
  #L196f8c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L196f92.  throw v0;
  #L196f94.  v0:= v2.`okhttp3.internal.connection.RealConnection.noNewStreams` @type ^`boolean` @kind boolean;
  #L196f98.  if v0 != 0 then goto L196fa4;
  #L196f9c.  v0:= v1.`okhttp3.ConnectionPool.maxIdleConnections` @type ^`int`;
  #L196fa0.  if v0 != 0 then goto L196fb2;
  #L196fa4.  v0:= v1.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L196fa8.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L196fae.  v0:= 1I;
  #L196fb0.  return v0;
  #L196fb2.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L196fb8.  v0:= 0I;
  #L196fba.  goto L196fb0;
}
procedure `int` `connectionCount`(`okhttp3.ConnectionPool` v1 @kind this) @signature `Lokhttp3/ConnectionPool;.connectionCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L196fcc.  @monitorenter v1
  #Try_start0.  
  #L196fce.  v0:= v1.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L196fd2.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #Try_end0.  
  #L196fd8.  v0:= temp;
  #L196fda.  @monitorexit v1
  #L196fdc.  return v0;
  #L196fde.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L196fe0.  @monitorexit v1
  #L196fe2.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L196fde;
}
procedure `java.net.Socket` `deduplicate`(`okhttp3.ConnectionPool` v4 @kind this, `okhttp3.Address` v5 @kind object @name `address`, `okhttp3.internal.connection.StreamAllocation` v6 @kind object @name `streamAllocation`) @signature `Lokhttp3/ConnectionPool;.deduplicate:(Lokhttp3/Address;Lokhttp3/internal/connection/StreamAllocation;)Ljava/net/Socket;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L197000.  v1:= 0I;
  #L197002.  v2:= `@@okhttp3.ConnectionPool.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L197006.  if v2 != 0 then goto L197022;
  #L19700a.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L197010.  v2:= temp;
  #L197012.  if v2 != 0 then goto L197022;
  #L197016.  v1:= new `java.lang.AssertionError`;
  #L19701a.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L197020.  throw v1;
  #L197022.  v2:= v4.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L197026.  call temp:= `iterator`(v2) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L19702c.  v2:= temp @kind object;
  #L19702e.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L197034.  v3:= temp;
  #L197036.  if v3 == 0 then goto L197072;
  #L19703a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L197040.  v0:= temp @kind object;
  #L197042.  v0:= (`okhttp3.internal.connection.RealConnection`) v0 @kind object;
  #L197046.  call temp:= `isEligible`(v0, v5, v1) @signature `Lokhttp3/internal/connection/RealConnection;.isEligible:(Lokhttp3/Address;Lokhttp3/Route;)Z` @kind virtual;
  #L19704c.  v3:= temp;
  #L19704e.  if v3 == 0 then goto L19702e;
  #L197052.  call temp:= `isMultiplexed`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.isMultiplexed:()Z` @kind virtual;
  #L197058.  v3:= temp;
  #L19705a.  if v3 == 0 then goto L19702e;
  #L19705e.  call temp:= `connection`(v6) @signature `Lokhttp3/internal/connection/StreamAllocation;.connection:()Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L197064.  v3:= temp @kind object;
  #L197066.  if v0 == v3 then goto L19702e;
  #L19706a.  call temp:= `releaseAndAcquire`(v6, v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.releaseAndAcquire:(Lokhttp3/internal/connection/RealConnection;)Ljava/net/Socket;` @kind virtual;
  #L197070.  v1:= temp @kind object;
  #L197072.  return v1 @kind object;
}
procedure `void` `evictAll`(`okhttp3.ConnectionPool` v5 @kind this) @signature `Lokhttp3/ConnectionPool;.evictAll:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L197084.  v1:= new `java.util.ArrayList`;
  #L197088.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L19708e.  @monitorenter v5
  #Try_start0.  
  #L197090.  v3:= v5.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L197094.  call temp:= `iterator`(v3) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L19709a.  v2:= temp @kind object;
  #L19709c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1970a2.  v3:= temp;
  #L1970a4.  if v3 == 0 then goto L1970de;
  #L1970a8.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1970ae.  v0:= temp @kind object;
  #L1970b0.  v0:= (`okhttp3.internal.connection.RealConnection`) v0 @kind object;
  #L1970b4.  v3:= v0.`okhttp3.internal.connection.RealConnection.allocations` @type ^`java.util.List` @kind object;
  #L1970b8.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1970be.  v3:= temp;
  #L1970c0.  if v3 == 0 then goto L19709c;
  #L1970c4.  v3:= 1I;
  #L1970c6.  v0.`okhttp3.internal.connection.RealConnection.noNewStreams` @type ^`boolean` := v3 @kind boolean;
  #L1970ca.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1970d0.  call `remove`(v2) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L1970d6.  goto L19709c;
  #L1970d8.  v3:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1970da.  @monitorexit v5
  #Try_end0.  
  #L1970dc.  throw v3;
  #Try_start1.  
  #L1970de.  @monitorexit v5
  #Try_end1.  
  #L1970e0.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1970e6.  v3:= temp @kind object;
  #L1970e8.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1970ee.  v4:= temp;
  #L1970f0.  if v4 == 0 then goto L197110;
  #L1970f4.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1970fa.  v0:= temp @kind object;
  #L1970fc.  v0:= (`okhttp3.internal.connection.RealConnection`) v0 @kind object;
  #L197100.  call temp:= `socket`(v0) @signature `Lokhttp3/internal/connection/RealConnection;.socket:()Ljava/net/Socket;` @kind virtual;
  #L197106.  v4:= temp @kind object;
  #L197108.  call `closeQuietly`(v4) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/net/Socket;)V` @kind static;
  #L19710e.  goto L1970e8;
  #L197110.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1970d8;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1970d8;
}
procedure `okhttp3.internal.connection.RealConnection` `get`(`okhttp3.ConnectionPool` v3 @kind this, `okhttp3.Address` v4 @kind object @name `address`, `okhttp3.internal.connection.StreamAllocation` v5 @kind object @name `streamAllocation`, `okhttp3.Route` v6 @kind object @name `route`) @signature `Lokhttp3/ConnectionPool;.get:(Lokhttp3/Address;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/Route;)Lokhttp3/internal/connection/RealConnection;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L197138.  v1:= `@@okhttp3.ConnectionPool.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L19713c.  if v1 != 0 then goto L197158;
  #L197140.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L197146.  v1:= temp;
  #L197148.  if v1 != 0 then goto L197158;
  #L19714c.  v1:= new `java.lang.AssertionError`;
  #L197150.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L197156.  throw v1;
  #L197158.  v1:= v3.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L19715c.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L197162.  v1:= temp @kind object;
  #L197164.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L19716a.  v2:= temp;
  #L19716c.  if v2 == 0 then goto L197192;
  #L197170.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L197176.  v0:= temp @kind object;
  #L197178.  v0:= (`okhttp3.internal.connection.RealConnection`) v0 @kind object;
  #L19717c.  call temp:= `isEligible`(v0, v4, v6) @signature `Lokhttp3/internal/connection/RealConnection;.isEligible:(Lokhttp3/Address;Lokhttp3/Route;)Z` @kind virtual;
  #L197182.  v2:= temp;
  #L197184.  if v2 == 0 then goto L197164;
  #L197188.  v1:= 1I;
  #L19718a.  call `acquire`(v5, v0, v1) @signature `Lokhttp3/internal/connection/StreamAllocation;.acquire:(Lokhttp3/internal/connection/RealConnection;Z)V` @kind virtual;
  #L197190.  return v0 @kind object;
  #L197192.  v0:= 0I;
  #L197194.  goto L197190;
}
procedure `int` `idleConnectionCount`(`okhttp3.ConnectionPool` v4 @kind this) @signature `Lokhttp3/ConnectionPool;.idleConnectionCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1971a8.  @monitorenter v4
  #L1971aa.  v1:= 0I;
  #Try_start0.  
  #L1971ac.  v2:= v4.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L1971b0.  call temp:= `iterator`(v2) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1971b6.  v2:= temp @kind object;
  #L1971b8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1971be.  v3:= temp;
  #L1971c0.  if v3 == 0 then goto L1971e6;
  #L1971c4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1971ca.  v0:= temp @kind object;
  #L1971cc.  v0:= (`okhttp3.internal.connection.RealConnection`) v0 @kind object;
  #L1971d0.  v3:= v0.`okhttp3.internal.connection.RealConnection.allocations` @type ^`java.util.List` @kind object;
  #L1971d4.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #Try_end0.  
  #L1971da.  v3:= temp;
  #L1971dc.  if v3 == 0 then goto L1971b8;
  #L1971e0.  v1:= v1 + 1;
  #L1971e4.  goto L1971b8;
  #L1971e6.  @monitorexit v4
  #L1971e8.  return v1;
  #L1971ea.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1971ec.  @monitorexit v4
  #L1971ee.  throw v2;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1971ea;
}
procedure `void` `put`(`okhttp3.ConnectionPool` v2 @kind this, `okhttp3.internal.connection.RealConnection` v3 @kind object @name `connection`) @signature `Lokhttp3/ConnectionPool;.put:(Lokhttp3/internal/connection/RealConnection;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L19720c.  v0:= `@@okhttp3.ConnectionPool.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L197210.  if v0 != 0 then goto L19722c;
  #L197214.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L19721a.  v0:= temp;
  #L19721c.  if v0 != 0 then goto L19722c;
  #L197220.  v0:= new `java.lang.AssertionError`;
  #L197224.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L19722a.  throw v0;
  #L19722c.  v0:= v2.`okhttp3.ConnectionPool.cleanupRunning` @type ^`boolean` @kind boolean;
  #L197230.  if v0 != 0 then goto L197248;
  #L197234.  v0:= 1I;
  #L197236.  v2.`okhttp3.ConnectionPool.cleanupRunning` @type ^`boolean` := v0 @kind boolean;
  #L19723a.  v0:= `@@okhttp3.ConnectionPool.executor` @type ^`java.util.concurrent.Executor` @kind object;
  #L19723e.  v1:= v2.`okhttp3.ConnectionPool.cleanupRunnable` @type ^`java.lang.Runnable` @kind object;
  #L197242.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L197248.  v0:= v2.`okhttp3.ConnectionPool.connections` @type ^`java.util.Deque` @kind object;
  #L19724c.  call temp:= `add`(v0, v3) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L197252.  return @kind void;
}
