record `okhttp3.RequestBody` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`okhttp3.RequestBody` v0 @kind this) @signature `Lokhttp3/RequestBody;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L19de54.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19de5a.  return @kind void;
}
procedure `okhttp3.RequestBody` `create`(`okhttp3.MediaType` v2 @kind object @name `contentType`, `java.io.File` v3 @kind object @name `file`) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;Ljava/io/File;)Lokhttp3/RequestBody;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L19de6c.  if v3 != 0 then goto L19de80;
  #L19de70.  v0:= new `java.lang.NullPointerException`;
  #L19de74.  v1:= "content == null" @kind object;
  #L19de78.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19de7e.  throw v0;
  #L19de80.  v0:= new `okhttp3.RequestBody$3`;
  #L19de84.  call `<init>`(v0, v2, v3) @signature `Lokhttp3/RequestBody$3;.<init>:(Lokhttp3/MediaType;Ljava/io/File;)V` @kind direct;
  #L19de8a.  return v0 @kind object;
}
procedure `okhttp3.RequestBody` `create`(`okhttp3.MediaType` v4 @kind object @name `contentType`, `java.lang.String` v5 @kind object @name `content`) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;Ljava/lang/String;)Lokhttp3/RequestBody;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L19de9c.  v1:= `@@okhttp3.internal.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L19dea0.  if v4 == 0 then goto L19dee2;
  #L19dea4.  call temp:= `charset`(v4) @signature `Lokhttp3/MediaType;.charset:()Ljava/nio/charset/Charset;` @kind virtual;
  #L19deaa.  v1:= temp @kind object;
  #L19deac.  if v1 != 0 then goto L19dee2;
  #L19deb0.  v1:= `@@okhttp3.internal.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L19deb4.  v2:= new `java.lang.StringBuilder`;
  #L19deb8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19debe.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19dec4.  v2:= temp @kind object;
  #L19dec6.  v3:= "; charset=utf-8" @kind object;
  #L19deca.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19ded0.  v2:= temp @kind object;
  #L19ded2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19ded8.  v2:= temp @kind object;
  #L19deda.  call temp:= `parse`(v2) @signature `Lokhttp3/MediaType;.parse:(Ljava/lang/String;)Lokhttp3/MediaType;` @kind static;
  #L19dee0.  v4:= temp @kind object;
  #L19dee2.  call temp:= `getBytes`(v5, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L19dee8.  v0:= temp @kind object;
  #L19deea.  call temp:= `create`(v4, v0) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[B)Lokhttp3/RequestBody;` @kind static;
  #L19def0.  v2:= temp @kind object;
  #L19def2.  return v2 @kind object;
}
procedure `okhttp3.RequestBody` `create`(`okhttp3.MediaType` v1 @kind object @name `contentType`, `okio.ByteString` v2 @kind object @name `content`) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;Lokio/ByteString;)Lokhttp3/RequestBody;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19df04.  v0:= new `okhttp3.RequestBody$1`;
  #L19df08.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/RequestBody$1;.<init>:(Lokhttp3/MediaType;Lokio/ByteString;)V` @kind direct;
  #L19df0e.  return v0 @kind object;
}
procedure `okhttp3.RequestBody` `create`(`okhttp3.MediaType` v2 @kind object @name `contentType`, `byte`[] v3 @kind object @name `content`) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[B)Lokhttp3/RequestBody;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L19df20.  v0:= 0I;
  #L19df22.  v1:= length @variable v3;
  #L19df24.  call temp:= `create`(v2, v3, v0, v1) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[BII)Lokhttp3/RequestBody;` @kind static;
  #L19df2a.  v0:= temp @kind object;
  #L19df2c.  return v0 @kind object;
}
procedure `okhttp3.RequestBody` `create`(`okhttp3.MediaType` v6 @kind object @name `contentType`, `byte`[] v7 @kind object @name `content`, `int` v8 @name `offset`, `int` v9 @name `byteCount`) @signature `Lokhttp3/RequestBody;.create:(Lokhttp3/MediaType;[BII)Lokhttp3/RequestBody;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L19df40.  if v7 != 0 then goto L19df54;
  #L19df44.  v0:= new `java.lang.NullPointerException`;
  #L19df48.  v1:= "content == null" @kind object;
  #L19df4c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19df52.  throw v0;
  #L19df54.  v0:= length @variable v7;
  #L19df56.  v0:= (`long`) v0 @kind i2l;
  #L19df58.  v2:= (`long`) v8 @kind i2l;
  #L19df5a.  v4:= (`long`) v9 @kind i2l;
  #L19df5c.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L19df62.  v0:= new `okhttp3.RequestBody$2`;
  #L19df66.  call `<init>`(v0, v6, v9, v7, v8) @signature `Lokhttp3/RequestBody$2;.<init>:(Lokhttp3/MediaType;I[BI)V` @kind direct;
  #L19df6c.  return v0 @kind object;
}
procedure `long` `contentLength`(`okhttp3.RequestBody` v2 @kind this) @signature `Lokhttp3/RequestBody;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19df80.  v0:= -1L;
  #L19df84.  return v0 @kind wide;
}
procedure `okhttp3.MediaType` `contentType`() @signature `Lokhttp3/RequestBody;.contentType:()Lokhttp3/MediaType;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `writeTo`(`okio.BufferedSink` v0 @kind object) @signature `Lokhttp3/RequestBody;.writeTo:(Lokio/BufferedSink;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
