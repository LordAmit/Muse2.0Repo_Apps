record `okhttp3.Cache$1` @kind class @AccessFlag  extends `okhttp3.internal.cache.InternalCache` @kind interface {
  `okhttp3.Cache` `okhttp3.Cache$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.Cache$1` v0 @kind this, `okhttp3.Cache` v1 @kind object @name `this$0`) @signature `Lokhttp3/Cache$1;.<init>:(Lokhttp3/Cache;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L214d4c.  v0.`okhttp3.Cache$1.this$0` @type ^`okhttp3.Cache` := v1 @kind object;
  #L214d50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L214d56.  return @kind void;
}
procedure `okhttp3.Response` `get`(`okhttp3.Cache$1` v1 @kind this, `okhttp3.Request` v2 @kind object @name `request`) @signature `Lokhttp3/Cache$1;.get:(Lokhttp3/Request;)Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L214d68.  v0:= v1.`okhttp3.Cache$1.this$0` @type ^`okhttp3.Cache` @kind object;
  #L214d6c.  call temp:= `get`(v0, v2) @signature `Lokhttp3/Cache;.get:(Lokhttp3/Request;)Lokhttp3/Response;` @kind virtual;
  #L214d72.  v0:= temp @kind object;
  #L214d74.  return v0 @kind object;
}
procedure `okhttp3.internal.cache.CacheRequest` `put`(`okhttp3.Cache$1` v1 @kind this, `okhttp3.Response` v2 @kind object @name `response`) @signature `Lokhttp3/Cache$1;.put:(Lokhttp3/Response;)Lokhttp3/internal/cache/CacheRequest;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L214d88.  v0:= v1.`okhttp3.Cache$1.this$0` @type ^`okhttp3.Cache` @kind object;
  #L214d8c.  call temp:= `put`(v0, v2) @signature `Lokhttp3/Cache;.put:(Lokhttp3/Response;)Lokhttp3/internal/cache/CacheRequest;` @kind virtual;
  #L214d92.  v0:= temp @kind object;
  #L214d94.  return v0 @kind object;
}
procedure `void` `remove`(`okhttp3.Cache$1` v1 @kind this, `okhttp3.Request` v2 @kind object @name `request`) @signature `Lokhttp3/Cache$1;.remove:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L214da8.  v0:= v1.`okhttp3.Cache$1.this$0` @type ^`okhttp3.Cache` @kind object;
  #L214dac.  call `remove`(v0, v2) @signature `Lokhttp3/Cache;.remove:(Lokhttp3/Request;)V` @kind virtual;
  #L214db2.  return @kind void;
}
procedure `void` `trackConditionalCacheHit`(`okhttp3.Cache$1` v1 @kind this) @signature `Lokhttp3/Cache$1;.trackConditionalCacheHit:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L214dc4.  v0:= v1.`okhttp3.Cache$1.this$0` @type ^`okhttp3.Cache` @kind object;
  #L214dc8.  call `trackConditionalCacheHit`(v0) @signature `Lokhttp3/Cache;.trackConditionalCacheHit:()V` @kind virtual;
  #L214dce.  return @kind void;
}
procedure `void` `trackResponse`(`okhttp3.Cache$1` v1 @kind this, `okhttp3.internal.cache.CacheStrategy` v2 @kind object @name `cacheStrategy`) @signature `Lokhttp3/Cache$1;.trackResponse:(Lokhttp3/internal/cache/CacheStrategy;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L214de0.  v0:= v1.`okhttp3.Cache$1.this$0` @type ^`okhttp3.Cache` @kind object;
  #L214de4.  call `trackResponse`(v0, v2) @signature `Lokhttp3/Cache;.trackResponse:(Lokhttp3/internal/cache/CacheStrategy;)V` @kind virtual;
  #L214dea.  return @kind void;
}
procedure `void` `update`(`okhttp3.Cache$1` v1 @kind this, `okhttp3.Response` v2 @kind object @name `cached`, `okhttp3.Response` v3 @kind object @name `network`) @signature `Lokhttp3/Cache$1;.update:(Lokhttp3/Response;Lokhttp3/Response;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L214dfc.  v0:= v1.`okhttp3.Cache$1.this$0` @type ^`okhttp3.Cache` @kind object;
  #L214e00.  call `update`(v0, v2, v3) @signature `Lokhttp3/Cache;.update:(Lokhttp3/Response;Lokhttp3/Response;)V` @kind virtual;
  #L214e06.  return @kind void;
}
