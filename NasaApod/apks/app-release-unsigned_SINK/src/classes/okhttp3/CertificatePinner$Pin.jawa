record `okhttp3.CertificatePinner$Pin` @kind class @AccessFlag FINAL {
  `java.lang.String` `okhttp3.CertificatePinner$Pin.canonicalHostname` @AccessFlag FINAL;
  `okio.ByteString` `okhttp3.CertificatePinner$Pin.hash` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.hashAlgorithm` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.pattern` @AccessFlag FINAL;
}
global `java.lang.String` `@@okhttp3.CertificatePinner$Pin.WILDCARD` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.CertificatePinner$Pin` v3 @kind this, `java.lang.String` v4 @kind object @name `pattern`, `java.lang.String` v5 @kind object @name `pin`) @signature `Lokhttp3/CertificatePinner$Pin;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L19575c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L195762.  v3.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` := v4 @kind object;
  #L195766.  v0:= "*." @kind object;
  #L19576a.  call temp:= `startsWith`(v4, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L195770.  v0:= temp;
  #L195772.  if v0 == 0 then goto L195836;
  #L195776.  v0:= new `java.lang.StringBuilder`;
  #L19577a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L195780.  v1:= "http://" @kind object;
  #L195784.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19578a.  v0:= temp @kind object;
  #L19578c.  v1:= "*." @kind object;
  #L195790.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L195796.  v1:= temp;
  #L195798.  call temp:= `substring`(v4, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L19579e.  v1:= temp @kind object;
  #L1957a0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1957a6.  v0:= temp @kind object;
  #L1957a8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1957ae.  v0:= temp @kind object;
  #L1957b0.  call temp:= `parse`(v0) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L1957b6.  v0:= temp @kind object;
  #L1957b8.  call temp:= `host`(v0) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L1957be.  v0:= temp @kind object;
  #L1957c0.  v3.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` := v0 @kind object;
  #L1957c4.  v0:= "sha1/" @kind object;
  #L1957c8.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1957ce.  v0:= temp;
  #L1957d0.  if v0 == 0 then goto L19586e;
  #L1957d4.  v0:= "sha1/" @kind object;
  #L1957d8.  v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v0 @kind object;
  #L1957dc.  v0:= "sha1/" @kind object;
  #L1957e0.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1957e6.  v0:= temp;
  #L1957e8.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L1957ee.  v0:= temp @kind object;
  #L1957f0.  call temp:= `decodeBase64`(v0) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L1957f6.  v0:= temp @kind object;
  #L1957f8.  v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v0 @kind object;
  #L1957fc.  v0:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L195800.  if v0 != 0 then goto L1958da;
  #L195804.  v0:= new `java.lang.IllegalArgumentException`;
  #L195808.  v1:= new `java.lang.StringBuilder`;
  #L19580c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L195812.  v2:= "pins must be base64: " @kind object;
  #L195816.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19581c.  v1:= temp @kind object;
  #L19581e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L195824.  v1:= temp @kind object;
  #L195826.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19582c.  v1:= temp @kind object;
  #L19582e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L195834.  throw v0;
  #L195836.  v0:= new `java.lang.StringBuilder`;
  #L19583a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L195840.  v1:= "http://" @kind object;
  #L195844.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19584a.  v0:= temp @kind object;
  #L19584c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L195852.  v0:= temp @kind object;
  #L195854.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19585a.  v0:= temp @kind object;
  #L19585c.  call temp:= `parse`(v0) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L195862.  v0:= temp @kind object;
  #L195864.  call temp:= `host`(v0) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L19586a.  v0:= temp @kind object;
  #L19586c.  goto L1957c0;
  #L19586e.  v0:= "sha256/" @kind object;
  #L195872.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L195878.  v0:= temp;
  #L19587a.  if v0 == 0 then goto L1958a8;
  #L19587e.  v0:= "sha256/" @kind object;
  #L195882.  v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v0 @kind object;
  #L195886.  v0:= "sha256/" @kind object;
  #L19588a.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L195890.  v0:= temp;
  #L195892.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L195898.  v0:= temp @kind object;
  #L19589a.  call temp:= `decodeBase64`(v0) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L1958a0.  v0:= temp @kind object;
  #L1958a2.  v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v0 @kind object;
  #L1958a6.  goto L1957fc;
  #L1958a8.  v0:= new `java.lang.IllegalArgumentException`;
  #L1958ac.  v1:= new `java.lang.StringBuilder`;
  #L1958b0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1958b6.  v2:= "pins must start with 'sha256/' or 'sha1/': " @kind object;
  #L1958ba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1958c0.  v1:= temp @kind object;
  #L1958c2.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1958c8.  v1:= temp @kind object;
  #L1958ca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1958d0.  v1:= temp @kind object;
  #L1958d2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1958d8.  throw v0;
  #L1958da.  return @kind void;
}
procedure `boolean` `equals`(`okhttp3.CertificatePinner$Pin` v2 @kind this, `java.lang.Object` v3 @kind object @name `other`) @signature `Lokhttp3/CertificatePinner$Pin;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1958ec.  v0:= instanceof @variable v3 @type ^`okhttp3.CertificatePinner$Pin` @kind boolean;
  #L1958f0.  if v0 == 0 then goto L195944;
  #L1958f4.  v1:= v2.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L1958f8.  v0:= v3 @kind object;
  #L1958fa.  v0:= (`okhttp3.CertificatePinner$Pin`) v0 @kind object;
  #L1958fe.  v0:= v0.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L195902.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L195908.  v0:= temp;
  #L19590a.  if v0 == 0 then goto L195944;
  #L19590e.  v1:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L195912.  v0:= v3 @kind object;
  #L195914.  v0:= (`okhttp3.CertificatePinner$Pin`) v0 @kind object;
  #L195918.  v0:= v0.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L19591c.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L195922.  v0:= temp;
  #L195924.  if v0 == 0 then goto L195944;
  #L195928.  v0:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L19592c.  v3:= (`okhttp3.CertificatePinner$Pin`) v3 @kind object;
  #L195930.  v1:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L195934.  call temp:= `equals`(v0, v1) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19593a.  v0:= temp;
  #L19593c.  if v0 == 0 then goto L195944;
  #L195940.  v0:= 1I;
  #L195942.  return v0;
  #L195944.  v0:= 0I;
  #L195946.  goto L195942;
}
procedure `int` `hashCode`(`okhttp3.CertificatePinner$Pin` v3 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L195958.  v0:= 17I;
  #L19595c.  v1:= v3.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L195960.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L195966.  v1:= temp;
  #L195968.  v0:= v1 + 527;
  #L19596c.  v1:= v0 * 31;
  #L195970.  v2:= v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L195974.  call temp:= `hashCode`(v2) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L19597a.  v2:= temp;
  #L19597c.  v0:= v1 + v2 @kind int;
  #L195980.  v1:= v0 * 31;
  #L195984.  v2:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L195988.  call temp:= `hashCode`(v2) @signature `Lokio/ByteString;.hashCode:()I` @kind virtual;
  #L19598e.  v2:= temp;
  #L195990.  v0:= v1 + v2 @kind int;
  #L195994.  return v0;
}
procedure `boolean` `matches`(`okhttp3.CertificatePinner$Pin` v7 @kind this, `java.lang.String` v8 @kind object @name `hostname`) @signature `Lokhttp3/CertificatePinner$Pin;.matches:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1959a8.  v1:= 0I;
  #L1959aa.  v0:= v7.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L1959ae.  v2:= "*." @kind object;
  #L1959b2.  call temp:= `startsWith`(v0, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1959b8.  v0:= temp;
  #L1959ba.  if v0 == 0 then goto L195a10;
  #L1959be.  v0:= 46I;
  #L1959c2.  call temp:= `indexOf`(v8, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1959c8.  v6:= temp;
  #L1959ca.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1959d0.  v0:= temp;
  #L1959d2.  v0:= v0 - v6 @kind int;
  #L1959d4.  v0:= v0 + -1;
  #L1959d8.  v2:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L1959dc.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1959e2.  v2:= temp;
  #L1959e4.  if v0 != v2 then goto L195a0e;
  #L1959e8.  v2:= v6 + 1;
  #L1959ec.  v3:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L1959f0.  v0:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L1959f4.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1959fa.  v5:= temp;
  #L1959fc.  v0:= v8 @kind object;
  #L1959fe.  v4:= v1;
  #L195a00.  call temp:= `regionMatches`(v0, v1, v2, v3, v4, v5) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L195a06.  v0:= temp;
  #L195a08.  if v0 == 0 then goto L195a0e;
  #L195a0c.  v1:= 1I;
  #L195a0e.  return v1;
  #L195a10.  v0:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L195a14.  call temp:= `equals`(v8, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L195a1a.  v1:= temp;
  #L195a1c.  goto L195a0e;
}
procedure `java.lang.String` `toString`(`okhttp3.CertificatePinner$Pin` v2 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L195a30.  v0:= new `java.lang.StringBuilder`;
  #L195a34.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L195a3a.  v1:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L195a3e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L195a44.  v0:= temp @kind object;
  #L195a46.  v1:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L195a4a.  call temp:= `base64`(v1) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L195a50.  v1:= temp @kind object;
  #L195a52.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L195a58.  v0:= temp @kind object;
  #L195a5a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L195a60.  v0:= temp @kind object;
  #L195a62.  return v0 @kind object;
}
