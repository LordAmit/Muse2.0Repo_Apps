record `okhttp3.internal.http1.Http1Codec$ChunkedSource` @kind class @AccessFlag  extends `okhttp3.internal.http1.Http1Codec$AbstractSource` @kind class {
  `long` `okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okhttp3.HttpUrl` `okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@okhttp3.internal.http1.Http1Codec$ChunkedSource.NO_CHUNK_YET` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v2 @kind this, `okhttp3.internal.http1.Http1Codec` v3 @kind object, `okhttp3.HttpUrl` v4 @kind object @name `url`) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/HttpUrl;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L246868.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v3 @kind object;
  #L24686c.  v0:= 0I;
  #L24686e.  call `<init>`(v2, v3, v0) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/internal/http1/Http1Codec$1;)V` @kind direct;
  #L246874.  v0:= -1L;
  #L246878.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L24687c.  v0:= 1I;
  #L24687e.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v0 @kind boolean;
  #L246882.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` := v4 @kind object;
  #L246886.  return @kind void;
}
procedure `void` `readChunkSize`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v8 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.readChunkSize:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L246898.  v6:= 0L;
  #L24689c.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2468a0.  v4:= -1L;
  #L2468a4.  v2:= lcmp(v2, v4);
  #L2468a8.  if v2 == 0 then goto L2468ba;
  #L2468ac.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2468b0.  v2:= v2.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L2468b4.  call temp:= `readUtf8LineStrict`(v2) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #Try_start0.  
  #L2468ba.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2468be.  v2:= v2.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L2468c2.  call temp:= `readHexadecimalUnsignedLong`(v2) @signature `Lokio/BufferedSource;.readHexadecimalUnsignedLong:()J` @kind interface;
  #L2468c8.  v2:= temp @kind wide;
  #L2468ca.  v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v2 @kind wide;
  #L2468ce.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2468d2.  v2:= v2.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L2468d6.  call temp:= `readUtf8LineStrict`(v2) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L2468dc.  v2:= temp @kind object;
  #L2468de.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2468e4.  v1:= temp @kind object;
  #L2468e6.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2468ea.  v2:= lcmp(v2, v6);
  #L2468ee.  if v2 < 0 then goto L24690e;
  #L2468f2.  call temp:= `isEmpty`(v1) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2468f8.  v2:= temp;
  #L2468fa.  if v2 != 0 then goto L24696e;
  #L2468fe.  v2:= ";" @kind object;
  #L246902.  call temp:= `startsWith`(v1, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L246908.  v2:= temp;
  #L24690a.  if v2 != 0 then goto L24696e;
  #L24690e.  v2:= new `java.net.ProtocolException`;
  #L246912.  v3:= new `java.lang.StringBuilder`;
  #L246916.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24691c.  v4:= "expected chunk size and optional extensions but was \"" @kind object;
  #L246920.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246926.  v3:= temp @kind object;
  #L246928.  v4:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L24692c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L246932.  v3:= temp @kind object;
  #L246934.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24693a.  v3:= temp @kind object;
  #L24693c.  v4:= "\"" @kind object;
  #L246940.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246946.  v3:= temp @kind object;
  #L246948.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24694e.  v3:= temp @kind object;
  #L246950.  call `<init>`(v2, v3) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246956.  throw v2;
  #Try_end0.  
  #L246958.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L24695a.  v2:= new `java.net.ProtocolException`;
  #L24695e.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L246964.  v3:= temp @kind object;
  #L246966.  call `<init>`(v2, v3) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24696c.  throw v2;
  #L24696e.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L246972.  v2:= lcmp(v2, v6);
  #L246976.  if v2 != 0 then goto L2469b0;
  #L24697a.  v2:= 0I;
  #L24697c.  v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v2 @kind boolean;
  #L246980.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L246984.  v2:= v2.`okhttp3.internal.http1.Http1Codec.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L246988.  call temp:= `cookieJar`(v2) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L24698e.  v2:= temp @kind object;
  #L246990.  v3:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L246994.  v4:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L246998.  call temp:= `readHeaders`(v4) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L24699e.  v4:= temp @kind object;
  #L2469a0.  call `receiveHeaders`(v2, v3, v4) @signature `Lokhttp3/internal/http/HttpHeaders;.receiveHeaders:(Lokhttp3/CookieJar;Lokhttp3/HttpUrl;Lokhttp3/Headers;)V` @kind static;
  #L2469a6.  v2:= 1I;
  #L2469a8.  v3:= 0I;
  #L2469aa.  call `endOfInput`(v8, v2, v3) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L2469b0.  return @kind void;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L246958;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2469d4.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` @kind boolean;
  #L2469d8.  if v0 == 0 then goto L2469de;
  #L2469dc.  return @kind void;
  #L2469de.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L2469e2.  if v0 == 0 then goto L246a04;
  #L2469e6.  v0:= 100I;
  #L2469ea.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2469ee.  call temp:= `discard`(v2, v0, v1) @signature `Lokhttp3/internal/Util;.discard:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L2469f4.  v0:= temp;
  #L2469f6.  if v0 != 0 then goto L246a04;
  #L2469fa.  v0:= 0I;
  #L2469fc.  v1:= 0I;
  #L2469fe.  call `endOfInput`(v2, v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L246a04.  v0:= 1I;
  #L246a06.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` := v0 @kind boolean;
  #L246a0a.  goto L2469dc;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v10 @kind this, `okio.Buffer` v11 @kind object @name `sink`, `long` v12 @name `byteCount`) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L246a1c.  v8:= 0L;
  #L246a20.  v4:= -1L;
  #L246a24.  v1:= lcmp(v12, v8);
  #L246a28.  if v1 >= 0 then goto L246a5e;
  #L246a2c.  v1:= new `java.lang.IllegalArgumentException`;
  #L246a30.  v4:= new `java.lang.StringBuilder`;
  #L246a34.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L246a3a.  v5:= "byteCount < 0: " @kind object;
  #L246a3e.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246a44.  v4:= temp @kind object;
  #L246a46.  call temp:= `append`(v4, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L246a4c.  v4:= temp @kind object;
  #L246a4e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L246a54.  v4:= temp @kind object;
  #L246a56.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246a5c.  throw v1;
  #L246a5e.  v1:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` @kind boolean;
  #L246a62.  if v1 == 0 then goto L246a76;
  #L246a66.  v1:= new `java.lang.IllegalStateException`;
  #L246a6a.  v4:= "closed" @kind object;
  #L246a6e.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246a74.  throw v1;
  #L246a76.  v1:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L246a7a.  if v1 != 0 then goto L246a82;
  #L246a7e.  v2:= v4 @kind wide;
  #L246a80.  return v2 @kind wide;
  #L246a82.  v6:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L246a86.  v1:= lcmp(v6, v8);
  #L246a8a.  if v1 == 0 then goto L246a9a;
  #L246a8e.  v6:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L246a92.  v1:= lcmp(v6, v4);
  #L246a96.  if v1 != 0 then goto L246aac;
  #L246a9a.  call `readChunkSize`(v10) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.readChunkSize:()V` @kind direct;
  #L246aa0.  v1:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L246aa4.  if v1 != 0 then goto L246aac;
  #L246aa8.  v2:= v4 @kind wide;
  #L246aaa.  goto L246a80;
  #L246aac.  v6:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L246ab0.  call temp:= `min`(v12, v6) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L246ab6.  v6:= temp @kind wide;
  #L246ab8.  call temp:= `read`(v10, v11, v6) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L246abe.  v2:= temp @kind wide;
  #L246ac0.  v1:= lcmp(v2, v4);
  #L246ac4.  if v1 != 0 then goto L246ae0;
  #L246ac8.  v0:= new `java.net.ProtocolException`;
  #L246acc.  v1:= "unexpected end of stream" @kind object;
  #L246ad0.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246ad6.  v1:= 0I;
  #L246ad8.  call `endOfInput`(v10, v1, v0) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L246ade.  throw v0;
  #L246ae0.  v4:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L246ae4.  v4:= v4 - v2 @kind long;
  #L246ae6.  v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v4 @kind wide;
  #L246aea.  goto L246a80;
}
