record `okhttp3.internal.http1.Http1Codec$ChunkedSink` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `boolean` `okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okio.ForwardingTimeout` `okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v2 @kind this, `okhttp3.internal.http1.Http1Codec` v3 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.<init>:(Lokhttp3/internal/http1/Http1Codec;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L219b08.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v3 @kind object;
  #L219b0c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L219b12.  v0:= new `okio.ForwardingTimeout`;
  #L219b16.  v1:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219b1a.  v1:= v1.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L219b1e.  call temp:= `timeout`(v1) @signature `Lokio/BufferedSink;.timeout:()Lokio/Timeout;` @kind interface;
  #L219b24.  v1:= temp @kind object;
  #L219b26.  call `<init>`(v0, v1) @signature `Lokio/ForwardingTimeout;.<init>:(Lokio/Timeout;)V` @kind direct;
  #L219b2c.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @type ^`okio.ForwardingTimeout` := v0 @kind object;
  #L219b30.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L219b44.  @monitorenter v2
  #Try_start0.  
  #L219b46.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L219b4a.  if v0 == 0 then goto L219b52;
  #L219b4e.  @monitorexit v2
  #L219b50.  return @kind void;
  #L219b52.  v0:= 1I;
  #Try_start1.  
  #L219b54.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` := v0 @kind boolean;
  #L219b58.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219b5c.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L219b60.  v1:= "0\r\n\r\n" @kind object;
  #L219b64.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L219b6a.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219b6e.  v1:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L219b72.  call `detachTimeout`(v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec;.detachTimeout:(Lokio/ForwardingTimeout;)V` @kind virtual;
  #L219b78.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219b7c.  v1:= 3I;
  #L219b7e.  v0.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v1;
  #Try_end1.  
  #L219b82.  goto L219b4e;
  #L219b84.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L219b86.  @monitorexit v2
  #L219b88.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L219b84;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L219b84;
}
procedure `void` `flush`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L219bb0.  @monitorenter v1
  #Try_start0.  
  #L219bb2.  v0:= v1.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L219bb6.  if v0 == 0 then goto L219bbe;
  #L219bba.  @monitorexit v1
  #L219bbc.  return @kind void;
  #Try_start1.  
  #L219bbe.  v0:= v1.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219bc2.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L219bc6.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #Try_end1.  
  #L219bcc.  goto L219bba;
  #L219bce.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L219bd0.  @monitorexit v1
  #L219bd2.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L219bce;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L219bce;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L219bf8.  v0:= v1.`okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L219bfc.  return v0 @kind object;
}
procedure `void` `write`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v2 @kind this, `okio.Buffer` v3 @kind object @name `source`, `long` v4 @name `byteCount`) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L219c10.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` @kind boolean;
  #L219c14.  if v0 == 0 then goto L219c28;
  #L219c18.  v0:= new `java.lang.IllegalStateException`;
  #L219c1c.  v1:= "closed" @kind object;
  #L219c20.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L219c26.  throw v0;
  #L219c28.  v0:= 0L;
  #L219c2c.  v0:= lcmp(v4, v0);
  #L219c30.  if v0 != 0 then goto L219c36;
  #L219c34.  return @kind void;
  #L219c36.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219c3a.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L219c3e.  call temp:= `writeHexadecimalUnsignedLong`(v0, v4) @signature `Lokio/BufferedSink;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @kind interface;
  #L219c44.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219c48.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L219c4c.  v1:= "\r\n" @kind object;
  #L219c50.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L219c56.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219c5a.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L219c5e.  call `write`(v0, v3, v4) @signature `Lokio/BufferedSink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L219c64.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219c68.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L219c6c.  v1:= "\r\n" @kind object;
  #L219c70.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L219c76.  goto L219c34;
}
