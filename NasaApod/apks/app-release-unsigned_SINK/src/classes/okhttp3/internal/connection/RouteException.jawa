record `okhttp3.internal.connection.RouteException` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `java.io.IOException` `okhttp3.internal.connection.RouteException.lastException` @AccessFlag PRIVATE;
}
global `java.lang.reflect.Method` `@@okhttp3.internal.connection.RouteException.addSuppressedExceptionMethod` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/connection/RouteException;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #Try_start0.  
  #L1a2c1c.  v2:= constclass @type ^`java.lang.Throwable` @kind object;
  #L1a2c20.  v3:= "addSuppressed" @kind object;
  #L1a2c24.  v4:= 1I;
  #L1a2c26.  v4:= new `java.lang.Class`[v4];
  #L1a2c2a.  v5:= 0I;
  #L1a2c2c.  v6:= constclass @type ^`java.lang.Throwable` @kind object;
  #L1a2c30.  v4[v5]:= v6 @kind object;
  #L1a2c34.  call temp:= `getDeclaredMethod`(v2, v3, v4) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #Try_end0.  
  #L1a2c3a.  v1:= temp @kind object;
  #L1a2c3c.  `@@okhttp3.internal.connection.RouteException.addSuppressedExceptionMethod` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L1a2c40.  return @kind void;
  #L1a2c42.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L1a2c44.  v1:= 0I;
  #L1a2c46.  goto L1a2c3c;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L1a2c42;
}
procedure `void` `<init>`(`okhttp3.internal.connection.RouteException` v0 @kind this, `java.io.IOException` v1 @kind object @name `cause`) @signature `Lokhttp3/internal/connection/RouteException;.<init>:(Ljava/io/IOException;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1a2c68.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1a2c6e.  v0.`okhttp3.internal.connection.RouteException.lastException` @type ^`java.io.IOException` := v1 @kind object;
  #L1a2c72.  return @kind void;
}
procedure `void` `addSuppressedIfPossible`(`okhttp3.internal.connection.RouteException` v3 @kind this, `java.io.IOException` v4 @kind object @name `e`, `java.io.IOException` v5 @kind object @name `suppressed`) @signature `Lokhttp3/internal/connection/RouteException;.addSuppressedIfPossible:(Ljava/io/IOException;Ljava/io/IOException;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1a2c84.  v0:= `@@okhttp3.internal.connection.RouteException.addSuppressedExceptionMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L1a2c88.  if v0 == 0 then goto L1a2ca2;
  #Try_start0.  
  #L1a2c8c.  v0:= `@@okhttp3.internal.connection.RouteException.addSuppressedExceptionMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L1a2c90.  v1:= 1I;
  #L1a2c92.  v1:= new `java.lang.Object`[v1];
  #L1a2c96.  v2:= 0I;
  #L1a2c98.  v1[v2]:= v5 @kind object;
  #L1a2c9c.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1a2ca2.  return @kind void;
  #L1a2ca4.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L1a2ca6.  goto L1a2ca2;
  #L1a2ca8.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L1a2caa.  goto L1a2ca2;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L1a2ca8;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L1a2ca4;
}
procedure `void` `addConnectException`(`okhttp3.internal.connection.RouteException` v1 @kind this, `java.io.IOException` v2 @kind object @name `e`) @signature `Lokhttp3/internal/connection/RouteException;.addConnectException:(Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a2ccc.  v0:= v1.`okhttp3.internal.connection.RouteException.lastException` @type ^`java.io.IOException` @kind object;
  #L1a2cd0.  call `addSuppressedIfPossible`(v1, v2, v0) @signature `Lokhttp3/internal/connection/RouteException;.addSuppressedIfPossible:(Ljava/io/IOException;Ljava/io/IOException;)V` @kind direct;
  #L1a2cd6.  v1.`okhttp3.internal.connection.RouteException.lastException` @type ^`java.io.IOException` := v2 @kind object;
  #L1a2cda.  return @kind void;
}
procedure `java.io.IOException` `getLastConnectException`(`okhttp3.internal.connection.RouteException` v1 @kind this) @signature `Lokhttp3/internal/connection/RouteException;.getLastConnectException:()Ljava/io/IOException;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a2cec.  v0:= v1.`okhttp3.internal.connection.RouteException.lastException` @type ^`java.io.IOException` @kind object;
  #L1a2cf0.  return v0 @kind object;
}
