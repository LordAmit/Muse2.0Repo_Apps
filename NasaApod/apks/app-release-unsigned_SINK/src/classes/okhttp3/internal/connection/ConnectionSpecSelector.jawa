record `okhttp3.internal.connection.ConnectionSpecSelector` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.connection.ConnectionSpecSelector.isFallback` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.connection.ConnectionSpecSelector.isFallbackPossible` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.connection.ConnectionSpecSelector.nextModeIndex` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.connection.ConnectionSpecSelector` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a2998.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a299e.  v0:= 0I;
  #L1a29a0.  v1.`okhttp3.internal.connection.ConnectionSpecSelector.nextModeIndex` @type ^`int` := v0;
  #L1a29a4.  v1.`okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs` @type ^`java.util.List` := v2 @kind object;
  #L1a29a8.  return @kind void;
}
procedure `boolean` `isFallbackPossible`(`okhttp3.internal.connection.ConnectionSpecSelector` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object @name `socket`) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.isFallbackPossible:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a29bc.  v0:= v2.`okhttp3.internal.connection.ConnectionSpecSelector.nextModeIndex` @type ^`int`;
  #L1a29c0.  v1:= v2.`okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs` @type ^`java.util.List` @kind object;
  #L1a29c4.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1a29ca.  v1:= temp;
  #L1a29cc.  if v0 >= v1 then goto L1a29f6;
  #L1a29d0.  v1:= v2.`okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs` @type ^`java.util.List` @kind object;
  #L1a29d4.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1a29da.  v1:= temp @kind object;
  #L1a29dc.  v1:= (`okhttp3.ConnectionSpec`) v1 @kind object;
  #L1a29e0.  call temp:= `isCompatible`(v1, v3) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L1a29e6.  v1:= temp;
  #L1a29e8.  if v1 == 0 then goto L1a29f0;
  #L1a29ec.  v1:= 1I;
  #L1a29ee.  return v1;
  #L1a29f0.  v0:= v0 + 1;
  #L1a29f4.  goto L1a29c0;
  #L1a29f6.  v1:= 0I;
  #L1a29f8.  goto L1a29ee;
}
procedure `okhttp3.ConnectionSpec` `configureSecureSocket`(`okhttp3.internal.connection.ConnectionSpecSelector` v7 @kind this, `javax.net.ssl.SSLSocket` v8 @kind object @name `sslSocket`) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.configureSecureSocket:(Ljavax/net/ssl/SSLSocket;)Lokhttp3/ConnectionSpec;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a2a0c.  v3:= 0I;
  #L1a2a0e.  v1:= v7.`okhttp3.internal.connection.ConnectionSpecSelector.nextModeIndex` @type ^`int`;
  #L1a2a12.  v4:= v7.`okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs` @type ^`java.util.List` @kind object;
  #L1a2a16.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1a2a1c.  v2:= temp;
  #L1a2a1e.  if v1 >= v2 then goto L1a2a48;
  #L1a2a22.  v4:= v7.`okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs` @type ^`java.util.List` @kind object;
  #L1a2a26.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1a2a2c.  v0:= temp @kind object;
  #L1a2a2e.  v0:= (`okhttp3.ConnectionSpec`) v0 @kind object;
  #L1a2a32.  call temp:= `isCompatible`(v0, v8) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L1a2a38.  v4:= temp;
  #L1a2a3a.  if v4 == 0 then goto L1a2abe;
  #L1a2a3e.  v3:= v0 @kind object;
  #L1a2a40.  v4:= v1 + 1;
  #L1a2a44.  v7.`okhttp3.internal.connection.ConnectionSpecSelector.nextModeIndex` @type ^`int` := v4;
  #L1a2a48.  if v3 != 0 then goto L1a2ac4;
  #L1a2a4c.  v4:= new `java.net.UnknownServiceException`;
  #L1a2a50.  v5:= new `java.lang.StringBuilder`;
  #L1a2a54.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1a2a5a.  v6:= "Unable to find acceptable protocols. isFallback=" @kind object;
  #L1a2a5e.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a2a64.  v5:= temp @kind object;
  #L1a2a66.  v6:= v7.`okhttp3.internal.connection.ConnectionSpecSelector.isFallback` @type ^`boolean` @kind boolean;
  #L1a2a6a.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a2a70.  v5:= temp @kind object;
  #L1a2a72.  v6:= ", modes=" @kind object;
  #L1a2a76.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a2a7c.  v5:= temp @kind object;
  #L1a2a7e.  v6:= v7.`okhttp3.internal.connection.ConnectionSpecSelector.connectionSpecs` @type ^`java.util.List` @kind object;
  #L1a2a82.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a2a88.  v5:= temp @kind object;
  #L1a2a8a.  v6:= ", supported protocols=" @kind object;
  #L1a2a8e.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a2a94.  v5:= temp @kind object;
  #L1a2a96.  call temp:= `getEnabledProtocols`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L1a2a9c.  v6:= temp @kind object;
  #L1a2a9e.  call temp:= `toString`(v6) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1a2aa4.  v6:= temp @kind object;
  #L1a2aa6.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a2aac.  v5:= temp @kind object;
  #L1a2aae.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a2ab4.  v5:= temp @kind object;
  #L1a2ab6.  call `<init>`(v4, v5) @signature `Ljava/net/UnknownServiceException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a2abc.  throw v4;
  #L1a2abe.  v1:= v1 + 1;
  #L1a2ac2.  goto L1a2a1e;
  #L1a2ac4.  call temp:= `isFallbackPossible`(v7, v8) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.isFallbackPossible:(Ljavax/net/ssl/SSLSocket;)Z` @kind direct;
  #L1a2aca.  v4:= temp;
  #L1a2acc.  v7.`okhttp3.internal.connection.ConnectionSpecSelector.isFallbackPossible` @type ^`boolean` := v4 @kind boolean;
  #L1a2ad0.  v4:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L1a2ad4.  v5:= v7.`okhttp3.internal.connection.ConnectionSpecSelector.isFallback` @type ^`boolean` @kind boolean;
  #L1a2ad8.  call `apply`(v4, v3, v8, v5) @signature `Lokhttp3/internal/Internal;.apply:(Lokhttp3/ConnectionSpec;Ljavax/net/ssl/SSLSocket;Z)V` @kind virtual;
  #L1a2ade.  return v3 @kind object;
}
procedure `boolean` `connectionFailed`(`okhttp3.internal.connection.ConnectionSpecSelector` v3 @kind this, `java.io.IOException` v4 @kind object @name `e`) @signature `Lokhttp3/internal/connection/ConnectionSpecSelector;.connectionFailed:(Ljava/io/IOException;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a2af0.  v1:= 1I;
  #L1a2af2.  v0:= 0I;
  #L1a2af4.  v3.`okhttp3.internal.connection.ConnectionSpecSelector.isFallback` @type ^`boolean` := v1 @kind boolean;
  #L1a2af8.  v2:= v3.`okhttp3.internal.connection.ConnectionSpecSelector.isFallbackPossible` @type ^`boolean` @kind boolean;
  #L1a2afc.  if v2 != 0 then goto L1a2b02;
  #L1a2b00.  return v0;
  #L1a2b02.  v2:= instanceof @variable v4 @type ^`java.net.ProtocolException` @kind boolean;
  #L1a2b06.  if v2 != 0 then goto L1a2b00;
  #L1a2b0a.  v2:= instanceof @variable v4 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L1a2b0e.  if v2 != 0 then goto L1a2b00;
  #L1a2b12.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L1a2b16.  if v2 == 0 then goto L1a2b2a;
  #L1a2b1a.  call temp:= `getCause`(v4) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L1a2b20.  v2:= temp @kind object;
  #L1a2b22.  v2:= instanceof @variable v2 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L1a2b26.  if v2 != 0 then goto L1a2b00;
  #L1a2b2a.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L1a2b2e.  if v2 != 0 then goto L1a2b00;
  #L1a2b32.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L1a2b36.  if v2 != 0 then goto L1a2b42;
  #L1a2b3a.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLProtocolException` @kind boolean;
  #L1a2b3e.  if v2 == 0 then goto L1a2b00;
  #L1a2b42.  v0:= v1;
  #L1a2b44.  goto L1a2b00;
}
