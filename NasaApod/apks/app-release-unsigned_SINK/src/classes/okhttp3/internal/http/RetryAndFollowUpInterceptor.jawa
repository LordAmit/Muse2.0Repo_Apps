record `okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.Interceptor` @kind interface {
  `java.lang.Object` `okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.OkHttpClient` `okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.StreamAllocation` `okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @AccessFlag PRIVATE_VOLATILE;
}
global `int` `@@okhttp3.internal.http.RetryAndFollowUpInterceptor.MAX_FOLLOW_UPS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object @name `client`, `boolean` v2 @name `forWebSocket`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L219128.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21912e.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L219132.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @type ^`boolean` := v2 @kind boolean;
  #L219136.  return @kind void;
}
procedure `okhttp3.Address` `createAddress`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v13 @kind this, `okhttp3.HttpUrl` v14 @kind object @name `url`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L219148.  v5:= 0I;
  #L21914a.  v6:= 0I;
  #L21914c.  v7:= 0I;
  #L21914e.  call temp:= `isHttps`(v14) @signature `Lokhttp3/HttpUrl;.isHttps:()Z` @kind virtual;
  #L219154.  v0:= temp;
  #L219156.  if v0 == 0 then goto L21917e;
  #L21915a.  v0:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21915e.  call temp:= `sslSocketFactory`(v0) @signature `Lokhttp3/OkHttpClient;.sslSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @kind virtual;
  #L219164.  v5:= temp @kind object;
  #L219166.  v0:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21916a.  call temp:= `hostnameVerifier`(v0) @signature `Lokhttp3/OkHttpClient;.hostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;` @kind virtual;
  #L219170.  v6:= temp @kind object;
  #L219172.  v0:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L219176.  call temp:= `certificatePinner`(v0) @signature `Lokhttp3/OkHttpClient;.certificatePinner:()Lokhttp3/CertificatePinner;` @kind virtual;
  #L21917c.  v7:= temp @kind object;
  #L21917e.  v0:= new `okhttp3.Address`;
  #L219182.  call temp:= `host`(v14) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L219188.  v1:= temp @kind object;
  #L21918a.  call temp:= `port`(v14) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L219190.  v2:= temp;
  #L219192.  v3:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L219196.  call temp:= `dns`(v3) @signature `Lokhttp3/OkHttpClient;.dns:()Lokhttp3/Dns;` @kind virtual;
  #L21919c.  v3:= temp @kind object;
  #L21919e.  v4:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2191a2.  call temp:= `socketFactory`(v4) @signature `Lokhttp3/OkHttpClient;.socketFactory:()Ljavax/net/SocketFactory;` @kind virtual;
  #L2191a8.  v4:= temp @kind object;
  #L2191aa.  v8:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2191ae.  call temp:= `proxyAuthenticator`(v8) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L2191b4.  v8:= temp @kind object;
  #L2191b6.  v9:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2191ba.  call temp:= `proxy`(v9) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L2191c0.  v9:= temp @kind object;
  #L2191c2.  v10:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2191c6.  call temp:= `protocols`(v10) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @kind virtual;
  #L2191cc.  v10:= temp @kind object;
  #L2191ce.  v11:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2191d2.  call temp:= `connectionSpecs`(v11) @signature `Lokhttp3/OkHttpClient;.connectionSpecs:()Ljava/util/List;` @kind virtual;
  #L2191d8.  v11:= temp @kind object;
  #L2191da.  v12:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2191de.  call temp:= `proxySelector`(v12) @signature `Lokhttp3/OkHttpClient;.proxySelector:()Ljava/net/ProxySelector;` @kind virtual;
  #L2191e4.  v12:= temp @kind object;
  #L2191e6.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12) @signature `Lokhttp3/Address;.<init>:(Ljava/lang/String;ILokhttp3/Dns;Ljavax/net/SocketFactory;Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/HostnameVerifier;Lokhttp3/CertificatePinner;Lokhttp3/Authenticator;Ljava/net/Proxy;Ljava/util/List;Ljava/util/List;Ljava/net/ProxySelector;)V` @kind direct;
  #L2191ec.  return v0 @kind object;
}
procedure `okhttp3.Request` `followUpRequest`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v11 @kind this, `okhttp3.Response` v12 @kind object @name `userResponse`, `okhttp3.Route` v13 @kind object @name `route`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.followUpRequest:(Lokhttp3/Response;Lokhttp3/Route;)Lokhttp3/Request;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L219200.  v3:= 0I;
  #L219202.  if v12 != 0 then goto L219212;
  #L219206.  v9:= new `java.lang.IllegalStateException`;
  #L21920a.  call `<init>`(v9) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L219210.  throw v9;
  #L219212.  call temp:= `code`(v12) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L219218.  v5:= temp;
  #L21921a.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L219220.  v9:= temp @kind object;
  #L219222.  call temp:= `method`(v9) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L219228.  v2:= temp @kind object;
  #L21922a.  goto L21947c;
  #L219230.  return v3 @kind object;
  #L219232.  if v13 == 0 then goto L21925e;
  #L219236.  call temp:= `proxy`(v13) @signature `Lokhttp3/Route;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L21923c.  v7:= temp @kind object;
  #L21923e.  call temp:= `type`(v7) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L219244.  v9:= temp @kind object;
  #L219246.  v10:= `@@java.net.Proxy$Type.HTTP` @type ^`java.net.Proxy$Type` @kind object;
  #L21924a.  if v9 == v10 then goto L21926c;
  #L21924e.  v9:= new `java.net.ProtocolException`;
  #L219252.  v10:= "Received HTTP_PROXY_AUTH (407) code while not using proxy" @kind object;
  #L219256.  call `<init>`(v9, v10) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21925c.  throw v9;
  #L21925e.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L219262.  call temp:= `proxy`(v9) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L219268.  v7:= temp @kind object;
  #L21926a.  goto L21923e;
  #L21926c.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L219270.  call temp:= `proxyAuthenticator`(v9) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L219276.  v9:= temp @kind object;
  #L219278.  call temp:= `authenticate`(v9, v13, v12) @signature `Lokhttp3/Authenticator;.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;` @kind interface;
  #L21927e.  v3:= temp @kind object;
  #L219280.  goto L219230;
  #L219282.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L219286.  call temp:= `authenticator`(v9) @signature `Lokhttp3/OkHttpClient;.authenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L21928c.  v9:= temp @kind object;
  #L21928e.  call temp:= `authenticate`(v9, v13, v12) @signature `Lokhttp3/Authenticator;.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;` @kind interface;
  #L219294.  v3:= temp @kind object;
  #L219296.  goto L219230;
  #L219298.  v9:= "GET" @kind object;
  #L21929c.  call temp:= `equals`(v2, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2192a2.  v9:= temp;
  #L2192a4.  if v9 != 0 then goto L2192b8;
  #L2192a8.  v9:= "HEAD" @kind object;
  #L2192ac.  call temp:= `equals`(v2, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2192b2.  v9:= temp;
  #L2192b4.  if v9 == 0 then goto L219230;
  #L2192b8.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2192bc.  call temp:= `followRedirects`(v9) @signature `Lokhttp3/OkHttpClient;.followRedirects:()Z` @kind virtual;
  #L2192c2.  v9:= temp;
  #L2192c4.  if v9 == 0 then goto L219230;
  #L2192c8.  v9:= "Location" @kind object;
  #L2192cc.  call temp:= `header`(v12, v9) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2192d2.  v0:= temp @kind object;
  #L2192d4.  if v0 == 0 then goto L219230;
  #L2192d8.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2192de.  v9:= temp @kind object;
  #L2192e0.  call temp:= `url`(v9) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2192e6.  v9:= temp @kind object;
  #L2192e8.  call temp:= `resolve`(v9, v0) @signature `Lokhttp3/HttpUrl;.resolve:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind virtual;
  #L2192ee.  v8:= temp @kind object;
  #L2192f0.  if v8 == 0 then goto L219230;
  #L2192f4.  call temp:= `scheme`(v8) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L2192fa.  v9:= temp @kind object;
  #L2192fc.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L219302.  v10:= temp @kind object;
  #L219304.  call temp:= `url`(v10) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L21930a.  v10:= temp @kind object;
  #L21930c.  call temp:= `scheme`(v10) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L219312.  v10:= temp @kind object;
  #L219314.  call temp:= `equals`(v9, v10) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L21931a.  v6:= temp;
  #L21931c.  if v6 != 0 then goto L219330;
  #L219320.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L219324.  call temp:= `followSslRedirects`(v9) @signature `Lokhttp3/OkHttpClient;.followSslRedirects:()Z` @kind virtual;
  #L21932a.  v9:= temp;
  #L21932c.  if v9 == 0 then goto L219230;
  #L219330.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L219336.  v9:= temp @kind object;
  #L219338.  call temp:= `newBuilder`(v9) @signature `Lokhttp3/Request;.newBuilder:()Lokhttp3/Request$Builder;` @kind virtual;
  #L21933e.  v4:= temp @kind object;
  #L219340.  call temp:= `permitsRequestBody`(v2) @signature `Lokhttp3/internal/http/HttpMethod;.permitsRequestBody:(Ljava/lang/String;)Z` @kind static;
  #L219346.  v9:= temp;
  #L219348.  if v9 == 0 then goto L21938c;
  #L21934c.  call temp:= `redirectsWithBody`(v2) @signature `Lokhttp3/internal/http/HttpMethod;.redirectsWithBody:(Ljava/lang/String;)Z` @kind static;
  #L219352.  v1:= temp;
  #L219354.  call temp:= `redirectsToGet`(v2) @signature `Lokhttp3/internal/http/HttpMethod;.redirectsToGet:(Ljava/lang/String;)Z` @kind static;
  #L21935a.  v9:= temp;
  #L21935c.  if v9 == 0 then goto L2193b6;
  #L219360.  v9:= "GET" @kind object;
  #L219364.  call temp:= `method`(v4, v9, v3) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L21936a.  if v1 != 0 then goto L21938c;
  #L21936e.  v9:= "Transfer-Encoding" @kind object;
  #L219372.  call temp:= `removeHeader`(v4, v9) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L219378.  v9:= "Content-Length" @kind object;
  #L21937c.  call temp:= `removeHeader`(v4, v9) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L219382.  v9:= "Content-Type" @kind object;
  #L219386.  call temp:= `removeHeader`(v4, v9) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L21938c.  call temp:= `sameConnection`(v11, v12, v8) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @kind direct;
  #L219392.  v9:= temp;
  #L219394.  if v9 != 0 then goto L2193a2;
  #L219398.  v9:= "Authorization" @kind object;
  #L21939c.  call temp:= `removeHeader`(v4, v9) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2193a2.  call temp:= `url`(v4, v8) @signature `Lokhttp3/Request$Builder;.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2193a8.  v9:= temp @kind object;
  #L2193aa.  call temp:= `build`(v9) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L2193b0.  v3:= temp @kind object;
  #L2193b2.  goto L219230;
  #L2193b6.  if v1 == 0 then goto L2193ca;
  #L2193ba.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2193c0.  v9:= temp @kind object;
  #L2193c2.  call temp:= `body`(v9) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L2193c8.  v3:= temp @kind object;
  #L2193ca.  call temp:= `method`(v4, v2, v3) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2193d0.  goto L21936a;
  #L2193d2.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2193d6.  call temp:= `retryOnConnectionFailure`(v9) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @kind virtual;
  #L2193dc.  v9:= temp;
  #L2193de.  if v9 == 0 then goto L219230;
  #L2193e2.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2193e8.  v9:= temp @kind object;
  #L2193ea.  call temp:= `body`(v9) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L2193f0.  v9:= temp @kind object;
  #L2193f2.  v9:= instanceof @variable v9 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L2193f6.  if v9 != 0 then goto L219230;
  #L2193fa.  call temp:= `priorResponse`(v12) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L219400.  v9:= temp @kind object;
  #L219402.  if v9 == 0 then goto L21941e;
  #L219406.  call temp:= `priorResponse`(v12) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L21940c.  v9:= temp @kind object;
  #L21940e.  call temp:= `code`(v9) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L219414.  v9:= temp;
  #L219416.  v10:= 408I;
  #L21941a.  if v9 == v10 then goto L219230;
  #L21941e.  v9:= 0I;
  #L219420.  call temp:= `retryAfter`(v11, v12, v9) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.retryAfter:(Lokhttp3/Response;I)I` @kind direct;
  #L219426.  v9:= temp;
  #L219428.  if v9 > 0 then goto L219230;
  #L21942c.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L219432.  v3:= temp @kind object;
  #L219434.  goto L219230;
  #L219438.  call temp:= `priorResponse`(v12) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L21943e.  v9:= temp @kind object;
  #L219440.  if v9 == 0 then goto L21945c;
  #L219444.  call temp:= `priorResponse`(v12) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L21944a.  v9:= temp @kind object;
  #L21944c.  call temp:= `code`(v9) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L219452.  v9:= temp;
  #L219454.  v10:= 503I;
  #L219458.  if v9 == v10 then goto L219230;
  #L21945c.  v9:= 2147483647I;
  #L219462.  call temp:= `retryAfter`(v11, v12, v9) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.retryAfter:(Lokhttp3/Response;I)I` @kind direct;
  #L219468.  v9:= temp;
  #L21946a.  if v9 != 0 then goto L219230;
  #L21946e.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L219474.  v3:= temp @kind object;
  #L219476.  goto L219230;
  #L21947a.  
  #L21947c.  switch v5
                  | 300 => goto L2192b8
                  | 301 => goto L2192b8
                  | 302 => goto L2192b8
                  | 303 => goto L2192b8
                  | 307 => goto L219298
                  | 308 => goto L219298
                  | 401 => goto L219282
                  | 407 => goto L219232
                  | 408 => goto L2193d2
                  | 503 => goto L219438
                  | else => goto L219230;
}
procedure `boolean` `isRecoverable`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v3 @kind this, `java.io.IOException` v4 @kind object @name `e`, `boolean` v5 @name `requestSendStarted`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isRecoverable:(Ljava/io/IOException;Z)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2194e0.  v0:= 1I;
  #L2194e2.  v1:= 0I;
  #L2194e4.  v2:= instanceof @variable v4 @type ^`java.net.ProtocolException` @kind boolean;
  #L2194e8.  if v2 == 0 then goto L2194ee;
  #L2194ec.  return v1;
  #L2194ee.  v2:= instanceof @variable v4 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L2194f2.  if v2 == 0 then goto L21950a;
  #L2194f6.  v2:= instanceof @variable v4 @type ^`java.net.SocketTimeoutException` @kind boolean;
  #L2194fa.  if v2 == 0 then goto L219506;
  #L2194fe.  if v5 != 0 then goto L219506;
  #L219502.  v1:= v0;
  #L219504.  goto L2194ec;
  #L219506.  v0:= v1;
  #L219508.  goto L219502;
  #L21950a.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L21950e.  if v2 == 0 then goto L219522;
  #L219512.  call temp:= `getCause`(v4) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L219518.  v2:= temp @kind object;
  #L21951a.  v2:= instanceof @variable v2 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L21951e.  if v2 != 0 then goto L2194ec;
  #L219522.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L219526.  if v2 != 0 then goto L2194ec;
  #L21952a.  v1:= v0;
  #L21952c.  goto L2194ec;
}
procedure `boolean` `recover`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v2 @kind this, `java.io.IOException` v3 @kind object @name `e`, `okhttp3.internal.connection.StreamAllocation` v4 @kind object @name `streamAllocation`, `boolean` v5 @name `requestSendStarted`, `okhttp3.Request` v6 @kind object @name `userRequest`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;Lokhttp3/internal/connection/StreamAllocation;ZLokhttp3/Request;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L219540.  v0:= 0I;
  #L219542.  call `streamFailed`(v4, v3) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L219548.  v1:= v2.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21954c.  call temp:= `retryOnConnectionFailure`(v1) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @kind virtual;
  #L219552.  v1:= temp;
  #L219554.  if v1 != 0 then goto L21955a;
  #L219558.  return v0;
  #L21955a.  if v5 == 0 then goto L21956e;
  #L21955e.  call temp:= `body`(v6) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L219564.  v1:= temp @kind object;
  #L219566.  v1:= instanceof @variable v1 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L21956a.  if v1 != 0 then goto L219558;
  #L21956e.  call temp:= `isRecoverable`(v2, v3, v5) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isRecoverable:(Ljava/io/IOException;Z)Z` @kind direct;
  #L219574.  v1:= temp;
  #L219576.  if v1 == 0 then goto L219558;
  #L21957a.  call temp:= `hasMoreRoutes`(v4) @signature `Lokhttp3/internal/connection/StreamAllocation;.hasMoreRoutes:()Z` @kind virtual;
  #L219580.  v1:= temp;
  #L219582.  if v1 == 0 then goto L219558;
  #L219586.  v0:= 1I;
  #L219588.  goto L219558;
}
procedure `int` `retryAfter`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v2 @kind this, `okhttp3.Response` v3 @kind object @name `userResponse`, `int` v4 @name `defaultDelay`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.retryAfter:(Lokhttp3/Response;I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L21959c.  v1:= "Retry-After" @kind object;
  #L2195a0.  call temp:= `header`(v3, v1) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2195a6.  v0:= temp @kind object;
  #L2195a8.  if v0 != 0 then goto L2195ae;
  #L2195ac.  return v4;
  #L2195ae.  v1:= "\\d+" @kind object;
  #L2195b2.  call temp:= `matches`(v0, v1) @signature `Ljava/lang/String;.matches:(Ljava/lang/String;)Z` @kind virtual;
  #L2195b8.  v1:= temp;
  #L2195ba.  if v1 == 0 then goto L2195d0;
  #L2195be.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(Ljava/lang/String;)Ljava/lang/Integer;` @kind static;
  #L2195c4.  v1:= temp @kind object;
  #L2195c6.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2195cc.  v4:= temp;
  #L2195ce.  goto L2195ac;
  #L2195d0.  v4:= 2147483647I;
  #L2195d6.  goto L2195ac;
}
procedure `boolean` `sameConnection`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v3 @kind this, `okhttp3.Response` v4 @kind object @name `response`, `okhttp3.HttpUrl` v5 @kind object @name `followUp`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2195e8.  call temp:= `request`(v4) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2195ee.  v1:= temp @kind object;
  #L2195f0.  call temp:= `url`(v1) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2195f6.  v0:= temp @kind object;
  #L2195f8.  call temp:= `host`(v0) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L2195fe.  v1:= temp @kind object;
  #L219600.  call temp:= `host`(v5) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L219606.  v2:= temp @kind object;
  #L219608.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L21960e.  v1:= temp;
  #L219610.  if v1 == 0 then goto L219648;
  #L219614.  call temp:= `port`(v0) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L21961a.  v1:= temp;
  #L21961c.  call temp:= `port`(v5) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L219622.  v2:= temp;
  #L219624.  if v1 != v2 then goto L219648;
  #L219628.  call temp:= `scheme`(v0) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L21962e.  v1:= temp @kind object;
  #L219630.  call temp:= `scheme`(v5) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L219636.  v2:= temp @kind object;
  #L219638.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L21963e.  v1:= temp;
  #L219640.  if v1 == 0 then goto L219648;
  #L219644.  v1:= 1I;
  #L219646.  return v1;
  #L219648.  v1:= 0I;
  #L21964a.  goto L219646;
}
procedure `void` `cancel`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v2 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L21965c.  v1:= 1I;
  #L21965e.  v2.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` := v1 @kind boolean;
  #L219662.  v0:= v2.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L219666.  if v0 == 0 then goto L219670;
  #L21966a.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.cancel:()V` @kind virtual;
  #L219670.  return @kind void;
}
procedure `okhttp3.Response` `intercept`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v15 @kind this, `okhttp3.Interceptor$Chain` v16 @kind object @name `chain`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.intercept:(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L219684.  call temp:= `request`(v16) @signature `Lokhttp3/Interceptor$Chain;.request:()Lokhttp3/Request;` @kind interface;
  #L21968a.  v12:= temp @kind object;
  #L21968c.  v10:= v16 @kind object;
  #L219690.  v10:= (`okhttp3.internal.http.RealInterceptorChain`) v10 @kind object;
  #L219694.  call temp:= `call`(v10) @signature `Lokhttp3/internal/http/RealInterceptorChain;.call:()Lokhttp3/Call;` @kind virtual;
  #L21969a.  v3:= temp @kind object;
  #L21969c.  call temp:= `eventListener`(v10) @signature `Lokhttp3/internal/http/RealInterceptorChain;.eventListener:()Lokhttp3/EventListener;` @kind virtual;
  #L2196a2.  v4:= temp @kind object;
  #L2196a4.  v0:= new `okhttp3.internal.connection.StreamAllocation`;
  #L2196a8.  v1:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2196ac.  call temp:= `connectionPool`(v1) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @kind virtual;
  #L2196b2.  v1:= temp @kind object;
  #L2196b4.  call temp:= `url`(v12) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2196ba.  v2:= temp @kind object;
  #L2196bc.  call temp:= `createAddress`(v15, v2) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @kind direct;
  #L2196c2.  v2:= temp @kind object;
  #L2196c4.  v5:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` @kind object;
  #L2196c8.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/connection/StreamAllocation;.<init>:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/Call;Lokhttp3/EventListener;Ljava/lang/Object;)V` @kind direct;
  #L2196ce.  v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v0 @kind object;
  #L2196d2.  v8:= 0I;
  #L2196d4.  v9:= 0I;
  #L2196d6.  v1:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` @kind boolean;
  #L2196da.  if v1 == 0 then goto L2196f4;
  #L2196de.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L2196e4.  v1:= new `java.io.IOException`;
  #L2196e8.  v2:= "Canceled" @kind object;
  #L2196ec.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2196f2.  throw v1;
  #L2196f4.  v11:= 1I;
  #L2196f6.  v1:= 0I;
  #L2196f8.  v2:= 0I;
  #Try_start0.  
  #L2196fa.  call temp:= `proceed`(v10, v12, v0, v1, v2) @signature `Lokhttp3/internal/http/RealInterceptorChain;.proceed:(Lokhttp3/Request;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;)Lokhttp3/Response;` @kind virtual;
  #Try_end0.  
  #L219700.  v14:= temp @kind object;
  #L219702.  v11:= 0I;
  #L219704.  if v11 == 0 then goto L219716;
  #L219708.  v1:= 0I;
  #L21970a.  call `streamFailed`(v0, v1) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L219710.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L219716.  if v9 == 0 then goto L21974c;
  #L21971a.  call temp:= `newBuilder`(v14) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L219720.  v1:= temp @kind object;
  #L219722.  call temp:= `newBuilder`(v9) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L219728.  v2:= temp @kind object;
  #L21972a.  v5:= 0I;
  #L21972c.  call temp:= `body`(v2, v5) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L219732.  v2:= temp @kind object;
  #L219734.  call temp:= `build`(v2) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L21973a.  v2:= temp @kind object;
  #L21973c.  call temp:= `priorResponse`(v1, v2) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @kind virtual;
  #L219742.  v1:= temp @kind object;
  #L219744.  call temp:= `build`(v1) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L21974a.  v14:= temp @kind object;
  #L21974c.  call temp:= `route`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.route:()Lokhttp3/Route;` @kind virtual;
  #L219752.  v1:= temp @kind object;
  #L219754.  call temp:= `followUpRequest`(v15, v14, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.followUpRequest:(Lokhttp3/Response;Lokhttp3/Route;)Lokhttp3/Request;` @kind direct;
  #L21975a.  v7:= temp @kind object;
  #L21975c.  if v7 != 0 then goto L2197f4;
  #L219760.  v1:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @type ^`boolean` @kind boolean;
  #L219764.  if v1 != 0 then goto L21976e;
  #L219768.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L21976e.  return v14 @kind object;
  #L219770.  v6:= Exception @type ^`okhttp3.internal.connection.RouteException` @kind object;
  #Try_start1.  
  #L219772.  call temp:= `getLastConnectException`(v6) @signature `Lokhttp3/internal/connection/RouteException;.getLastConnectException:()Ljava/io/IOException;` @kind virtual;
  #L219778.  v1:= temp @kind object;
  #L21977a.  v2:= 0I;
  #L21977c.  call temp:= `recover`(v15, v1, v0, v2, v12) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;Lokhttp3/internal/connection/StreamAllocation;ZLokhttp3/Request;)Z` @kind direct;
  #L219782.  v1:= temp;
  #L219784.  if v1 != 0 then goto L2197a8;
  #L219788.  call temp:= `getLastConnectException`(v6) @signature `Lokhttp3/internal/connection/RouteException;.getLastConnectException:()Ljava/io/IOException;` @kind virtual;
  #L21978e.  v1:= temp @kind object;
  #L219790.  throw v1;
  #Try_end1.  
  #L219792.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L219794.  if v11 == 0 then goto L2197a6;
  #L219798.  v2:= 0I;
  #L21979a.  call `streamFailed`(v0, v2) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L2197a0.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L2197a6.  throw v1;
  #L2197a8.  v11:= 0I;
  #L2197aa.  if v11 == 0 then goto L2196d6;
  #L2197ae.  v1:= 0I;
  #L2197b0.  call `streamFailed`(v0, v1) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L2197b6.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L2197bc.  goto L2196d6;
  #L2197be.  v6:= Exception @type ^`java.io.IOException` @kind object;
  #Try_start2.  
  #L2197c0.  v1:= instanceof @variable v6 @type ^`okhttp3.internal.http2.ConnectionShutdownException` @kind boolean;
  #L2197c4.  if v1 != 0 then goto L2197d8;
  #L2197c8.  v13:= 1I;
  #L2197ca.  call temp:= `recover`(v15, v6, v0, v13, v12) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;Lokhttp3/internal/connection/StreamAllocation;ZLokhttp3/Request;)Z` @kind direct;
  #L2197d0.  v1:= temp;
  #L2197d2.  if v1 != 0 then goto L2197dc;
  #L2197d6.  throw v6;
  #Try_end2.  
  #L2197d8.  v13:= 0I;
  #L2197da.  goto L2197ca;
  #L2197dc.  v11:= 0I;
  #L2197de.  if v11 == 0 then goto L2196d6;
  #L2197e2.  v1:= 0I;
  #L2197e4.  call `streamFailed`(v0, v1) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L2197ea.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L2197f0.  goto L2196d6;
  #L2197f4.  call temp:= `body`(v14) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L2197fa.  v1:= temp @kind object;
  #L2197fc.  call `closeQuietly`(v1) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L219802.  v8:= v8 + 1;
  #L219806.  v1:= 20I;
  #L21980a.  if v8 <= v1 then goto L219846;
  #L21980e.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L219814.  v1:= new `java.net.ProtocolException`;
  #L219818.  v2:= new `java.lang.StringBuilder`;
  #L21981c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L219822.  v5:= "Too many follow-up requests: " @kind object;
  #L219826.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21982c.  v2:= temp @kind object;
  #L21982e.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L219834.  v2:= temp @kind object;
  #L219836.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21983c.  v2:= temp @kind object;
  #L21983e.  call `<init>`(v1, v2) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L219844.  throw v1;
  #L219846.  call temp:= `body`(v7) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L21984c.  v1:= temp @kind object;
  #L21984e.  v1:= instanceof @variable v1 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L219852.  if v1 == 0 then goto L219874;
  #L219856.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L21985c.  v1:= new `java.net.HttpRetryException`;
  #L219860.  v2:= "Cannot retry streamed HTTP body" @kind object;
  #L219864.  call temp:= `code`(v14) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L21986a.  v5:= temp;
  #L21986c.  call `<init>`(v1, v2, v5) @signature `Ljava/net/HttpRetryException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L219872.  throw v1;
  #L219874.  call temp:= `url`(v7) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L21987a.  v1:= temp @kind object;
  #L21987c.  call temp:= `sameConnection`(v15, v14, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @kind direct;
  #L219882.  v1:= temp;
  #L219884.  if v1 != 0 then goto L2198c4;
  #L219888.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L21988e.  v0:= new `okhttp3.internal.connection.StreamAllocation`;
  #L219892.  v1:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L219896.  call temp:= `connectionPool`(v1) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @kind virtual;
  #L21989c.  v1:= temp @kind object;
  #L21989e.  call temp:= `url`(v7) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2198a4.  v2:= temp @kind object;
  #L2198a6.  call temp:= `createAddress`(v15, v2) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @kind direct;
  #L2198ac.  v2:= temp @kind object;
  #L2198ae.  v5:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` @kind object;
  #L2198b2.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/connection/StreamAllocation;.<init>:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/Call;Lokhttp3/EventListener;Ljava/lang/Object;)V` @kind direct;
  #L2198b8.  v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v0 @kind object;
  #L2198bc.  v12:= v7 @kind object;
  #L2198be.  v9:= v14 @kind object;
  #L2198c0.  goto L2196d6;
  #L2198c4.  call temp:= `codec`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.codec:()Lokhttp3/internal/http/HttpCodec;` @kind virtual;
  #L2198ca.  v1:= temp @kind object;
  #L2198cc.  if v1 == 0 then goto L2198bc;
  #L2198d0.  v1:= new `java.lang.IllegalStateException`;
  #L2198d4.  v2:= new `java.lang.StringBuilder`;
  #L2198d8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2198de.  v5:= "Closing the body of " @kind object;
  #L2198e2.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2198e8.  v2:= temp @kind object;
  #L2198ea.  call temp:= `append`(v2, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2198f0.  v2:= temp @kind object;
  #L2198f2.  v5:= " didn't close its backing stream. Bad interceptor?" @kind object;
  #L2198f6.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2198fc.  v2:= temp @kind object;
  #L2198fe.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L219904.  v2:= temp @kind object;
  #L219906.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21990c.  throw v1;
  catch `okhttp3.internal.connection.RouteException` @[Try_start0..Try_end0] goto L219770;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L2197be;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L219792;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L219792;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L219792;
}
procedure `boolean` `isCanceled`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L219948.  v0:= v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` @kind boolean;
  #L21994c.  return v0;
}
procedure `void` `setCallStackTrace`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v0 @kind this, `java.lang.Object` v1 @kind object @name `callStackTrace`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.setCallStackTrace:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L219960.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` := v1 @kind object;
  #L219964.  return @kind void;
}
procedure `okhttp3.internal.connection.StreamAllocation` `streamAllocation`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L219978.  v0:= v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L21997c.  return v0 @kind object;
}
