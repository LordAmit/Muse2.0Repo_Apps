record `okhttp3.internal.http2.Http2Codec` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.http.HttpCodec` @kind interface {
  `okhttp3.Interceptor$Chain` `okhttp3.internal.http2.Http2Codec.chain` @AccessFlag PRIVATE_FINAL;
  `okhttp3.OkHttpClient` `okhttp3.internal.http2.Http2Codec.client` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2Codec.connection` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Stream` `okhttp3.internal.http2.Http2Codec.stream` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.StreamAllocation` `okhttp3.internal.http2.Http2Codec.streamAllocation` @AccessFlag FINAL;
}
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.HOST` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.TE` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Codec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L21a520.  v7:= 4I;
  #L21a522.  v6:= 3I;
  #L21a524.  v5:= 2I;
  #L21a526.  v4:= 1I;
  #L21a528.  v3:= 0I;
  #L21a52a.  v0:= "connection" @kind object;
  #L21a52e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a534.  v0:= temp @kind object;
  #L21a536.  `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @type ^`okio.ByteString` := v0 @kind object;
  #L21a53a.  v0:= "host" @kind object;
  #L21a53e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a544.  v0:= temp @kind object;
  #L21a546.  `@@okhttp3.internal.http2.Http2Codec.HOST` @type ^`okio.ByteString` := v0 @kind object;
  #L21a54a.  v0:= "keep-alive" @kind object;
  #L21a54e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a554.  v0:= temp @kind object;
  #L21a556.  `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @type ^`okio.ByteString` := v0 @kind object;
  #L21a55a.  v0:= "proxy-connection" @kind object;
  #L21a55e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a564.  v0:= temp @kind object;
  #L21a566.  `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @type ^`okio.ByteString` := v0 @kind object;
  #L21a56a.  v0:= "transfer-encoding" @kind object;
  #L21a56e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a574.  v0:= temp @kind object;
  #L21a576.  `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @type ^`okio.ByteString` := v0 @kind object;
  #L21a57a.  v0:= "te" @kind object;
  #L21a57e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a584.  v0:= temp @kind object;
  #L21a586.  `@@okhttp3.internal.http2.Http2Codec.TE` @type ^`okio.ByteString` := v0 @kind object;
  #L21a58a.  v0:= "encoding" @kind object;
  #L21a58e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a594.  v0:= temp @kind object;
  #L21a596.  `@@okhttp3.internal.http2.Http2Codec.ENCODING` @type ^`okio.ByteString` := v0 @kind object;
  #L21a59a.  v0:= "upgrade" @kind object;
  #L21a59e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a5a4.  v0:= temp @kind object;
  #L21a5a6.  `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @type ^`okio.ByteString` := v0 @kind object;
  #L21a5aa.  v0:= 12I;
  #L21a5ae.  v0:= new `okio.ByteString`[v0];
  #L21a5b2.  v1:= `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @type ^`okio.ByteString` @kind object;
  #L21a5b6.  v0[v3]:= v1 @kind object;
  #L21a5ba.  v1:= `@@okhttp3.internal.http2.Http2Codec.HOST` @type ^`okio.ByteString` @kind object;
  #L21a5be.  v0[v4]:= v1 @kind object;
  #L21a5c2.  v1:= `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @type ^`okio.ByteString` @kind object;
  #L21a5c6.  v0[v5]:= v1 @kind object;
  #L21a5ca.  v1:= `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @type ^`okio.ByteString` @kind object;
  #L21a5ce.  v0[v6]:= v1 @kind object;
  #L21a5d2.  v1:= `@@okhttp3.internal.http2.Http2Codec.TE` @type ^`okio.ByteString` @kind object;
  #L21a5d6.  v0[v7]:= v1 @kind object;
  #L21a5da.  v1:= 5I;
  #L21a5dc.  v2:= `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @type ^`okio.ByteString` @kind object;
  #L21a5e0.  v0[v1]:= v2 @kind object;
  #L21a5e4.  v1:= 6I;
  #L21a5e6.  v2:= `@@okhttp3.internal.http2.Http2Codec.ENCODING` @type ^`okio.ByteString` @kind object;
  #L21a5ea.  v0[v1]:= v2 @kind object;
  #L21a5ee.  v1:= 7I;
  #L21a5f0.  v2:= `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @type ^`okio.ByteString` @kind object;
  #L21a5f4.  v0[v1]:= v2 @kind object;
  #L21a5f8.  v1:= 8I;
  #L21a5fc.  v2:= `@@okhttp3.internal.http2.Header.TARGET_METHOD` @type ^`okio.ByteString` @kind object;
  #L21a600.  v0[v1]:= v2 @kind object;
  #L21a604.  v1:= 9I;
  #L21a608.  v2:= `@@okhttp3.internal.http2.Header.TARGET_PATH` @type ^`okio.ByteString` @kind object;
  #L21a60c.  v0[v1]:= v2 @kind object;
  #L21a610.  v1:= 10I;
  #L21a614.  v2:= `@@okhttp3.internal.http2.Header.TARGET_SCHEME` @type ^`okio.ByteString` @kind object;
  #L21a618.  v0[v1]:= v2 @kind object;
  #L21a61c.  v1:= 11I;
  #L21a620.  v2:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L21a624.  v0[v1]:= v2 @kind object;
  #L21a628.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L21a62e.  v0:= temp @kind object;
  #L21a630.  `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @type ^`java.util.List` := v0 @kind object;
  #L21a634.  v0:= 8I;
  #L21a638.  v0:= new `okio.ByteString`[v0];
  #L21a63c.  v1:= `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @type ^`okio.ByteString` @kind object;
  #L21a640.  v0[v3]:= v1 @kind object;
  #L21a644.  v1:= `@@okhttp3.internal.http2.Http2Codec.HOST` @type ^`okio.ByteString` @kind object;
  #L21a648.  v0[v4]:= v1 @kind object;
  #L21a64c.  v1:= `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @type ^`okio.ByteString` @kind object;
  #L21a650.  v0[v5]:= v1 @kind object;
  #L21a654.  v1:= `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @type ^`okio.ByteString` @kind object;
  #L21a658.  v0[v6]:= v1 @kind object;
  #L21a65c.  v1:= `@@okhttp3.internal.http2.Http2Codec.TE` @type ^`okio.ByteString` @kind object;
  #L21a660.  v0[v7]:= v1 @kind object;
  #L21a664.  v1:= 5I;
  #L21a666.  v2:= `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @type ^`okio.ByteString` @kind object;
  #L21a66a.  v0[v1]:= v2 @kind object;
  #L21a66e.  v1:= 6I;
  #L21a670.  v2:= `@@okhttp3.internal.http2.Http2Codec.ENCODING` @type ^`okio.ByteString` @kind object;
  #L21a674.  v0[v1]:= v2 @kind object;
  #L21a678.  v1:= 7I;
  #L21a67a.  v2:= `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @type ^`okio.ByteString` @kind object;
  #L21a67e.  v0[v1]:= v2 @kind object;
  #L21a682.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L21a688.  v0:= temp @kind object;
  #L21a68a.  `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @type ^`java.util.List` := v0 @kind object;
  #L21a68e.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Codec` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object @name `client`, `okhttp3.Interceptor$Chain` v2 @kind object @name `chain`, `okhttp3.internal.connection.StreamAllocation` v3 @kind object @name `streamAllocation`, `okhttp3.internal.http2.Http2Connection` v4 @kind object @name `connection`) @signature `Lokhttp3/internal/http2/Http2Codec;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Interceptor$Chain;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http2/Http2Connection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L21a6a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21a6a6.  v0.`okhttp3.internal.http2.Http2Codec.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L21a6aa.  v0.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` := v2 @kind object;
  #L21a6ae.  v0.`okhttp3.internal.http2.Http2Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v3 @kind object;
  #L21a6b2.  v0.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` := v4 @kind object;
  #L21a6b6.  return @kind void;
}
procedure `java.util.List` `http2HeadersList`(`okhttp3.Request` v9 @kind object @name `request`) @signature `Lokhttp3/internal/http2/Http2Codec;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L21a6c8.  call temp:= `headers`(v9) @signature `Lokhttp3/Request;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L21a6ce.  v0:= temp @kind object;
  #L21a6d0.  v4:= new `java.util.ArrayList`;
  #L21a6d4.  call temp:= `size`(v0) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L21a6da.  v6:= temp;
  #L21a6dc.  v6:= v6 + 4;
  #L21a6e0.  call `<init>`(v4, v6) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L21a6e6.  v6:= new `okhttp3.internal.http2.Header`;
  #L21a6ea.  v7:= `@@okhttp3.internal.http2.Header.TARGET_METHOD` @type ^`okio.ByteString` @kind object;
  #L21a6ee.  call temp:= `method`(v9) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L21a6f4.  v8:= temp @kind object;
  #L21a6f6.  call `<init>`(v6, v7, v8) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L21a6fc.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21a702.  v6:= new `okhttp3.internal.http2.Header`;
  #L21a706.  v7:= `@@okhttp3.internal.http2.Header.TARGET_PATH` @type ^`okio.ByteString` @kind object;
  #L21a70a.  call temp:= `url`(v9) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L21a710.  v8:= temp @kind object;
  #L21a712.  call temp:= `requestPath`(v8) @signature `Lokhttp3/internal/http/RequestLine;.requestPath:(Lokhttp3/HttpUrl;)Ljava/lang/String;` @kind static;
  #L21a718.  v8:= temp @kind object;
  #L21a71a.  call `<init>`(v6, v7, v8) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L21a720.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21a726.  v6:= "Host" @kind object;
  #L21a72a.  call temp:= `header`(v9, v6) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L21a730.  v1:= temp @kind object;
  #L21a732.  if v1 == 0 then goto L21a74a;
  #L21a736.  v6:= new `okhttp3.internal.http2.Header`;
  #L21a73a.  v7:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L21a73e.  call `<init>`(v6, v7, v1) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L21a744.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21a74a.  v6:= new `okhttp3.internal.http2.Header`;
  #L21a74e.  v7:= `@@okhttp3.internal.http2.Header.TARGET_SCHEME` @type ^`okio.ByteString` @kind object;
  #L21a752.  call temp:= `url`(v9) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L21a758.  v8:= temp @kind object;
  #L21a75a.  call temp:= `scheme`(v8) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L21a760.  v8:= temp @kind object;
  #L21a762.  call `<init>`(v6, v7, v8) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L21a768.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21a76e.  v2:= 0I;
  #L21a770.  call temp:= `size`(v0) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L21a776.  v5:= temp;
  #L21a778.  if v2 >= v5 then goto L21a7c6;
  #L21a77c.  call temp:= `name`(v0, v2) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L21a782.  v6:= temp @kind object;
  #L21a784.  v7:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L21a788.  call temp:= `toLowerCase`(v6, v7) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L21a78e.  v6:= temp @kind object;
  #L21a790.  call temp:= `encodeUtf8`(v6) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a796.  v3:= temp @kind object;
  #L21a798.  v6:= `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @type ^`java.util.List` @kind object;
  #L21a79c.  call temp:= `contains`(v6, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L21a7a2.  v6:= temp;
  #L21a7a4.  if v6 != 0 then goto L21a7c0;
  #L21a7a8.  v6:= new `okhttp3.internal.http2.Header`;
  #L21a7ac.  call temp:= `value`(v0, v2) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L21a7b2.  v7:= temp @kind object;
  #L21a7b4.  call `<init>`(v6, v3, v7) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L21a7ba.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21a7c0.  v2:= v2 + 1;
  #L21a7c4.  goto L21a778;
  #L21a7c6.  return v4 @kind object;
}
procedure `okhttp3.Response$Builder` `readHttp2HeadersList`(`java.util.List` v9 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.readHttp2HeadersList:(Ljava/util/List;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L21a7d8.  v5:= 0I;
  #L21a7da.  v1:= new `okhttp3.Headers$Builder`;
  #L21a7de.  call `<init>`(v1) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L21a7e4.  v2:= 0I;
  #L21a7e6.  call temp:= `size`(v9) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L21a7ec.  v4:= temp;
  #L21a7ee.  if v2 >= v4 then goto L21a898;
  #L21a7f2.  call temp:= `get`(v9, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L21a7f8.  v0:= temp @kind object;
  #L21a7fa.  v0:= (`okhttp3.internal.http2.Header`) v0 @kind object;
  #L21a7fe.  if v0 != 0 then goto L21a824;
  #L21a802.  if v5 == 0 then goto L21a81e;
  #L21a806.  v7:= v5.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L21a80a.  v8:= 100I;
  #L21a80e.  if v7 != v8 then goto L21a81e;
  #L21a812.  v5:= 0I;
  #L21a814.  v1:= new `okhttp3.Headers$Builder`;
  #L21a818.  call `<init>`(v1) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L21a81e.  v2:= v2 + 1;
  #L21a822.  goto L21a7ee;
  #L21a824.  v3:= v0.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L21a828.  v7:= v0.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L21a82c.  call temp:= `utf8`(v7) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L21a832.  v6:= temp @kind object;
  #L21a834.  v7:= `@@okhttp3.internal.http2.Header.RESPONSE_STATUS` @type ^`okio.ByteString` @kind object;
  #L21a838.  call temp:= `equals`(v3, v7) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L21a83e.  v7:= temp;
  #L21a840.  if v7 == 0 then goto L21a874;
  #L21a844.  v7:= new `java.lang.StringBuilder`;
  #L21a848.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21a84e.  v8:= "HTTP/1.1 " @kind object;
  #L21a852.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21a858.  v7:= temp @kind object;
  #L21a85a.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21a860.  v7:= temp @kind object;
  #L21a862.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21a868.  v7:= temp @kind object;
  #L21a86a.  call temp:= `parse`(v7) @signature `Lokhttp3/internal/http/StatusLine;.parse:(Ljava/lang/String;)Lokhttp3/internal/http/StatusLine;` @kind static;
  #L21a870.  v5:= temp @kind object;
  #L21a872.  goto L21a81e;
  #L21a874.  v7:= `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @type ^`java.util.List` @kind object;
  #L21a878.  call temp:= `contains`(v7, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L21a87e.  v7:= temp;
  #L21a880.  if v7 != 0 then goto L21a81e;
  #L21a884.  v7:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L21a888.  call temp:= `utf8`(v3) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L21a88e.  v8:= temp @kind object;
  #L21a890.  call `addLenient`(v7, v1, v8, v6) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L21a896.  goto L21a81e;
  #L21a898.  if v5 != 0 then goto L21a8ac;
  #L21a89c.  v7:= new `java.net.ProtocolException`;
  #L21a8a0.  v8:= "Expected ':status' header not present" @kind object;
  #L21a8a4.  call `<init>`(v7, v8) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21a8aa.  throw v7;
  #L21a8ac.  v7:= new `okhttp3.Response$Builder`;
  #L21a8b0.  call `<init>`(v7) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L21a8b6.  v8:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L21a8ba.  call temp:= `protocol`(v7, v8) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L21a8c0.  v7:= temp @kind object;
  #L21a8c2.  v8:= v5.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L21a8c6.  call temp:= `code`(v7, v8) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L21a8cc.  v7:= temp @kind object;
  #L21a8ce.  v8:= v5.`okhttp3.internal.http.StatusLine.message` @type ^`java.lang.String` @kind object;
  #L21a8d2.  call temp:= `message`(v7, v8) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L21a8d8.  v7:= temp @kind object;
  #L21a8da.  call temp:= `build`(v1) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L21a8e0.  v8:= temp @kind object;
  #L21a8e2.  call temp:= `headers`(v7, v8) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L21a8e8.  v7:= temp @kind object;
  #L21a8ea.  return v7 @kind object;
}
procedure `void` `cancel`(`okhttp3.internal.http2.Http2Codec` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L21a8fc.  v0:= v2.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21a900.  if v0 == 0 then goto L21a912;
  #L21a904.  v0:= v2.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21a908.  v1:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L21a90c.  call `closeLater`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L21a912.  return @kind void;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.internal.http2.Http2Codec` v1 @kind this, `okhttp3.Request` v2 @kind object @name `request`, `long` v3 @name `contentLength`) @signature `Lokhttp3/internal/http2/Http2Codec;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21a924.  v0:= v1.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21a928.  call temp:= `getSink`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L21a92e.  v0:= temp @kind object;
  #L21a930.  return v0 @kind object;
}
procedure `void` `finishRequest`(`okhttp3.internal.http2.Http2Codec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.finishRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21a944.  v0:= v1.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21a948.  call temp:= `getSink`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L21a94e.  v0:= temp @kind object;
  #L21a950.  call `close`(v0) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L21a956.  return @kind void;
}
procedure `void` `flushRequest`(`okhttp3.internal.http2.Http2Codec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.flushRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21a968.  v0:= v1.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L21a96c.  call `flush`(v0) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L21a972.  return @kind void;
}
procedure `okhttp3.ResponseBody` `openResponseBody`(`okhttp3.internal.http2.Http2Codec` v6 @kind this, `okhttp3.Response` v7 @kind object @name `response`) @signature `Lokhttp3/internal/http2/Http2Codec;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L21a984.  v4:= v6.`okhttp3.internal.http2.Http2Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L21a988.  v4:= v4.`okhttp3.internal.connection.StreamAllocation.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L21a98c.  v5:= v6.`okhttp3.internal.http2.Http2Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L21a990.  v5:= v5.`okhttp3.internal.connection.StreamAllocation.call` @type ^`okhttp3.Call` @kind object;
  #L21a994.  call `responseBodyStart`(v4, v5) @signature `Lokhttp3/EventListener;.responseBodyStart:(Lokhttp3/Call;)V` @kind virtual;
  #L21a99a.  v4:= "Content-Type" @kind object;
  #L21a99e.  call temp:= `header`(v7, v4) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L21a9a4.  v2:= temp @kind object;
  #L21a9a6.  call temp:= `contentLength`(v7) @signature `Lokhttp3/internal/http/HttpHeaders;.contentLength:(Lokhttp3/Response;)J` @kind static;
  #L21a9ac.  v0:= temp @kind wide;
  #L21a9ae.  v3:= new `okhttp3.internal.http2.Http2Codec$StreamFinishingSource`;
  #L21a9b2.  v4:= v6.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21a9b6.  call temp:= `getSource`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource:()Lokio/Source;` @kind virtual;
  #L21a9bc.  v4:= temp @kind object;
  #L21a9be.  call `<init>`(v3, v6, v4) @signature `Lokhttp3/internal/http2/Http2Codec$StreamFinishingSource;.<init>:(Lokhttp3/internal/http2/Http2Codec;Lokio/Source;)V` @kind direct;
  #L21a9c4.  v4:= new `okhttp3.internal.http.RealResponseBody`;
  #L21a9c8.  call temp:= `buffer`(v3) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L21a9ce.  v5:= temp @kind object;
  #L21a9d0.  call `<init>`(v4, v2, v0, v5) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L21a9d6.  return v4 @kind object;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.http2.Http2Codec` v4 @kind this, `boolean` v5 @name `expectContinue`) @signature `Lokhttp3/internal/http2/Http2Codec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L21a9e8.  v2:= v4.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21a9ec.  call temp:= `takeResponseHeaders`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.takeResponseHeaders:()Ljava/util/List;` @kind virtual;
  #L21a9f2.  v0:= temp @kind object;
  #L21a9f4.  call temp:= `readHttp2HeadersList`(v0) @signature `Lokhttp3/internal/http2/Http2Codec;.readHttp2HeadersList:(Ljava/util/List;)Lokhttp3/Response$Builder;` @kind static;
  #L21a9fa.  v1:= temp @kind object;
  #L21a9fc.  if v5 == 0 then goto L21aa16;
  #L21aa00.  v2:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L21aa04.  call temp:= `code`(v2, v1) @signature `Lokhttp3/internal/Internal;.code:(Lokhttp3/Response$Builder;)I` @kind virtual;
  #L21aa0a.  v2:= temp;
  #L21aa0c.  v3:= 100I;
  #L21aa10.  if v2 != v3 then goto L21aa16;
  #L21aa14.  v1:= 0I;
  #L21aa16.  return v1 @kind object;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.http2.Http2Codec` v6 @kind this, `okhttp3.Request` v7 @kind object @name `request`) @signature `Lokhttp3/internal/http2/Http2Codec;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L21aa28.  v2:= v6.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21aa2c.  if v2 == 0 then goto L21aa32;
  #L21aa30.  return @kind void;
  #L21aa32.  call temp:= `body`(v7) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L21aa38.  v2:= temp @kind object;
  #L21aa3a.  if v2 == 0 then goto L21aaa2;
  #L21aa3e.  v0:= 1I;
  #L21aa40.  call temp:= `http2HeadersList`(v7) @signature `Lokhttp3/internal/http2/Http2Codec;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @kind static;
  #L21aa46.  v1:= temp @kind object;
  #L21aa48.  v2:= v6.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L21aa4c.  call temp:= `newStream`(v2, v1, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(Ljava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L21aa52.  v2:= temp @kind object;
  #L21aa54.  v6.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` := v2 @kind object;
  #L21aa58.  v2:= v6.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21aa5c.  call temp:= `readTimeout`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/Timeout;` @kind virtual;
  #L21aa62.  v2:= temp @kind object;
  #L21aa64.  v3:= v6.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` @kind object;
  #L21aa68.  call temp:= `readTimeoutMillis`(v3) @signature `Lokhttp3/Interceptor$Chain;.readTimeoutMillis:()I` @kind interface;
  #L21aa6e.  v3:= temp;
  #L21aa70.  v4:= (`long`) v3 @kind i2l;
  #L21aa72.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L21aa76.  call temp:= `timeout`(v2, v4, v3) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L21aa7c.  v2:= v6.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21aa80.  call temp:= `writeTimeout`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/Timeout;` @kind virtual;
  #L21aa86.  v2:= temp @kind object;
  #L21aa88.  v3:= v6.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` @kind object;
  #L21aa8c.  call temp:= `writeTimeoutMillis`(v3) @signature `Lokhttp3/Interceptor$Chain;.writeTimeoutMillis:()I` @kind interface;
  #L21aa92.  v3:= temp;
  #L21aa94.  v4:= (`long`) v3 @kind i2l;
  #L21aa96.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L21aa9a.  call temp:= `timeout`(v2, v4, v3) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L21aaa0.  goto L21aa30;
  #L21aaa2.  v0:= 0I;
  #L21aaa4.  goto L21aa40;
}
