record `okhttp3.internal.http2.Http2Stream` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @AccessFlag ;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2Stream.connection` @AccessFlag FINAL;
  `okhttp3.internal.http2.ErrorCode` `okhttp3.internal.http2.Http2Stream.errorCode` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Http2Stream.id` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$StreamTimeout` `okhttp3.internal.http2.Http2Stream.readTimeout` @AccessFlag FINAL;
  `java.util.List` `okhttp3.internal.http2.Http2Stream.requestHeaders` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.internal.http2.Http2Stream.responseHeaders` @AccessFlag PRIVATE;
  `okhttp3.internal.http2.Http2Stream$FramingSink` `okhttp3.internal.http2.Http2Stream.sink` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$FramingSource` `okhttp3.internal.http2.Http2Stream.source` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @AccessFlag ;
  `okhttp3.internal.http2.Http2Stream$StreamTimeout` `okhttp3.internal.http2.Http2Stream.writeTimeout` @AccessFlag FINAL;
}
global `boolean` `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Stream;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a81d4.  v0:= constclass @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1a81d8.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L1a81de.  v0:= temp;
  #L1a81e0.  if v0 != 0 then goto L1a81ec;
  #L1a81e4.  v0:= 1I;
  #L1a81e6.  `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` := v0 @kind boolean;
  #L1a81ea.  return @kind void;
  #L1a81ec.  v0:= 0I;
  #L1a81ee.  goto L1a81e6;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Stream` v4 @kind this, `int` v5 @name `id`, `okhttp3.internal.http2.Http2Connection` v6 @kind object @name `connection`, `boolean` v7 @name `outFinished`, `boolean` v8 @name `inFinished`, `java.util.List` v9 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.<init>:(ILokhttp3/internal/http2/Http2Connection;ZZLjava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a8200.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a8206.  v0:= 0L;
  #L1a820a.  v4.`okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @type ^`long` := v0 @kind wide;
  #L1a820e.  v0:= new `okhttp3.internal.http2.Http2Stream$StreamTimeout`;
  #L1a8212.  call `<init>`(v0, v4) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L1a8218.  v4.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` := v0 @kind object;
  #L1a821c.  v0:= new `okhttp3.internal.http2.Http2Stream$StreamTimeout`;
  #L1a8220.  call `<init>`(v0, v4) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L1a8226.  v4.`okhttp3.internal.http2.Http2Stream.writeTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` := v0 @kind object;
  #L1a822a.  v0:= 0I;
  #L1a822c.  v4.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v0 @kind object;
  #L1a8230.  if v6 != 0 then goto L1a8244;
  #L1a8234.  v0:= new `java.lang.NullPointerException`;
  #L1a8238.  v1:= "connection == null" @kind object;
  #L1a823c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a8242.  throw v0;
  #L1a8244.  if v9 != 0 then goto L1a8258;
  #L1a8248.  v0:= new `java.lang.NullPointerException`;
  #L1a824c.  v1:= "requestHeaders == null" @kind object;
  #L1a8250.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a8256.  throw v0;
  #L1a8258.  v4.`okhttp3.internal.http2.Http2Stream.id` @type ^`int` := v5;
  #L1a825c.  v4.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` := v6 @kind object;
  #L1a8260.  v0:= v6.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a8264.  call temp:= `getInitialWindowSize`(v0) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L1a826a.  v0:= temp;
  #L1a826c.  v0:= (`long`) v0 @kind i2l;
  #L1a826e.  v4.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L1a8272.  v0:= new `okhttp3.internal.http2.Http2Stream$FramingSource`;
  #L1a8276.  v1:= v6.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a827a.  call temp:= `getInitialWindowSize`(v1) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L1a8280.  v1:= temp;
  #L1a8282.  v2:= (`long`) v1 @kind i2l;
  #L1a8284.  call `<init>`(v0, v4, v2) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.<init>:(Lokhttp3/internal/http2/Http2Stream;J)V` @kind direct;
  #L1a828a.  v4.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` := v0 @kind object;
  #L1a828e.  v0:= new `okhttp3.internal.http2.Http2Stream$FramingSink`;
  #L1a8292.  call `<init>`(v0, v4) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L1a8298.  v4.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` := v0 @kind object;
  #L1a829c.  v0:= v4.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a82a0.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` := v8 @kind boolean;
  #L1a82a4.  v0:= v4.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a82a8.  v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` := v7 @kind boolean;
  #L1a82ac.  v4.`okhttp3.internal.http2.Http2Stream.requestHeaders` @type ^`java.util.List` := v9 @kind object;
  #L1a82b0.  return @kind void;
}
procedure `boolean` `closeInternal`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object @name `errorCode`) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a82c4.  v0:= 0I;
  #L1a82c6.  v1:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a82ca.  if v1 != 0 then goto L1a82e6;
  #L1a82ce.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a82d4.  v1:= temp;
  #L1a82d6.  if v1 == 0 then goto L1a82e6;
  #L1a82da.  v0:= new `java.lang.AssertionError`;
  #L1a82de.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a82e4.  throw v0;
  #L1a82e6.  @monitorenter v2
  #Try_start0.  
  #L1a82e8.  v1:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a82ec.  if v1 == 0 then goto L1a82f4;
  #L1a82f0.  @monitorexit v2
  #L1a82f2.  return v0;
  #L1a82f4.  v1:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a82f8.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L1a82fc.  if v1 == 0 then goto L1a8316;
  #L1a8300.  v1:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a8304.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L1a8308.  if v1 == 0 then goto L1a8316;
  #L1a830c.  @monitorexit v2
  #L1a830e.  goto L1a82f2;
  #L1a8310.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a8312.  @monitorexit v2
  #Try_end0.  
  #L1a8314.  throw v0;
  #Try_start1.  
  #L1a8316.  v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v3 @kind object;
  #L1a831a.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1a8320.  @monitorexit v2
  #Try_end1.  
  #L1a8322.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a8326.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a832a.  call temp:= `removeStream`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L1a8330.  v0:= 1I;
  #L1a8332.  goto L1a82f2;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a8310;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a8310;
}
procedure `void` `addBytesToWriteWindow`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `long` v4 @name `delta`) @signature `Lokhttp3/internal/http2/Http2Stream;.addBytesToWriteWindow:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a8358.  v0:= v3.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L1a835c.  v0:= v0 + v4 @kind long;
  #L1a835e.  v3.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L1a8362.  v0:= 0L;
  #L1a8366.  v0:= lcmp(v4, v0);
  #L1a836a.  if v0 <= 0 then goto L1a8374;
  #L1a836e.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1a8374.  return @kind void;
}
procedure `void` `cancelStreamIfNecessary`(`okhttp3.internal.http2.Http2Stream` v4 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.cancelStreamIfNecessary:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a8388.  v2:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a838c.  if v2 != 0 then goto L1a83a8;
  #L1a8390.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a8396.  v2:= temp;
  #L1a8398.  if v2 == 0 then goto L1a83a8;
  #L1a839c.  v2:= new `java.lang.AssertionError`;
  #L1a83a0.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a83a6.  throw v2;
  #L1a83a8.  @monitorenter v4
  #Try_start0.  
  #L1a83aa.  v2:= v4.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a83ae.  v2:= v2.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L1a83b2.  if v2 != 0 then goto L1a83f6;
  #L1a83b6.  v2:= v4.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a83ba.  v2:= v2.`okhttp3.internal.http2.Http2Stream$FramingSource.closed` @type ^`boolean` @kind boolean;
  #L1a83be.  if v2 == 0 then goto L1a83f6;
  #L1a83c2.  v2:= v4.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a83c6.  v2:= v2.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L1a83ca.  if v2 != 0 then goto L1a83da;
  #L1a83ce.  v2:= v4.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a83d2.  v2:= v2.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L1a83d6.  if v2 == 0 then goto L1a83f6;
  #L1a83da.  v0:= 1I;
  #L1a83dc.  call temp:= `isOpen`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L1a83e2.  v1:= temp;
  #L1a83e4.  @monitorexit v4
  #Try_end0.  
  #L1a83e6.  if v0 == 0 then goto L1a8400;
  #L1a83ea.  v2:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a83ee.  call `close`(v4, v2) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a83f4.  return @kind void;
  #L1a83f6.  v0:= 0I;
  #L1a83f8.  goto L1a83dc;
  #L1a83fa.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L1a83fc.  @monitorexit v4
  #Try_end1.  
  #L1a83fe.  throw v2;
  #L1a8400.  if v1 != 0 then goto L1a83f4;
  #L1a8404.  v2:= v4.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a8408.  v3:= v4.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a840c.  call temp:= `removeStream`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L1a8412.  goto L1a83f4;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a83fa;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a83fa;
}
procedure `void` `checkOutNotClosed`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.checkOutNotClosed:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a8438.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a843c.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L1a8440.  if v0 == 0 then goto L1a8454;
  #L1a8444.  v0:= new `java.io.IOException`;
  #L1a8448.  v1:= "stream closed" @kind object;
  #L1a844c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a8452.  throw v0;
  #L1a8454.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a8458.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L1a845c.  if v0 == 0 then goto L1a8470;
  #L1a8460.  v0:= new `java.io.IOException`;
  #L1a8464.  v1:= "stream finished" @kind object;
  #L1a8468.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a846e.  throw v0;
  #L1a8470.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a8474.  if v0 == 0 then goto L1a8488;
  #L1a8478.  v0:= new `okhttp3.internal.http2.StreamResetException`;
  #L1a847c.  v1:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a8480.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L1a8486.  throw v0;
  #L1a8488.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object @name `rstStatusCode`) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a849c.  call temp:= `closeInternal`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @kind direct;
  #L1a84a2.  v0:= temp;
  #L1a84a4.  if v0 != 0 then goto L1a84aa;
  #L1a84a8.  return @kind void;
  #L1a84aa.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a84ae.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a84b2.  call `writeSynReset`(v0, v1, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynReset:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a84b8.  goto L1a84a8;
}
procedure `void` `closeLater`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object @name `errorCode`) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a84cc.  call temp:= `closeInternal`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @kind direct;
  #L1a84d2.  v0:= temp;
  #L1a84d4.  if v0 != 0 then goto L1a84da;
  #L1a84d8.  return @kind void;
  #L1a84da.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a84de.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a84e2.  call `writeSynResetLater`(v0, v1, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynResetLater:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a84e8.  goto L1a84d8;
}
procedure `okhttp3.internal.http2.Http2Connection` `getConnection`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getConnection:()Lokhttp3/internal/http2/Http2Connection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a84fc.  v0:= v1.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a8500.  return v0 @kind object;
}
procedure `okhttp3.internal.http2.ErrorCode` `getErrorCode`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getErrorCode:()Lokhttp3/internal/http2/ErrorCode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a8514.  @monitorenter v1
  #Try_start0.  
  #L1a8516.  v0:= v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #Try_end0.  
  #L1a851a.  @monitorexit v1
  #L1a851c.  return v0 @kind object;
  #L1a851e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a8520.  @monitorexit v1
  #L1a8522.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a851e;
}
procedure `int` `getId`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getId:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a8540.  v0:= v1.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a8544.  return v0;
}
procedure `java.util.List` `getRequestHeaders`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getRequestHeaders:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a8558.  v0:= v1.`okhttp3.internal.http2.Http2Stream.requestHeaders` @type ^`java.util.List` @kind object;
  #L1a855c.  return v0 @kind object;
}
procedure `okio.Sink` `getSink`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a8570.  @monitorenter v2
  #Try_start0.  
  #L1a8572.  v0:= v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` @kind boolean;
  #L1a8576.  if v0 != 0 then goto L1a859c;
  #L1a857a.  call temp:= `isLocallyInitiated`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L1a8580.  v0:= temp;
  #L1a8582.  if v0 != 0 then goto L1a859c;
  #L1a8586.  v0:= new `java.lang.IllegalStateException`;
  #L1a858a.  v1:= "reply before requesting the sink" @kind object;
  #L1a858e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a8594.  throw v0;
  #L1a8596.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a8598.  @monitorexit v2
  #Try_end0.  
  #L1a859a.  throw v0;
  #Try_start1.  
  #L1a859c.  @monitorexit v2
  #Try_end1.  
  #L1a859e.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a85a2.  return v0 @kind object;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a8596;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a8596;
}
procedure `okio.Source` `getSource`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource:()Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a85c8.  v0:= v1.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a85cc.  return v0 @kind object;
}
procedure `boolean` `isLocallyInitiated`(`okhttp3.internal.http2.Http2Stream` v4 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a85e0.  v2:= 0I;
  #L1a85e2.  v1:= 1I;
  #L1a85e4.  v3:= v4.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a85e8.  v3:= v3 ^& 1;
  #L1a85ec.  if v3 != v1 then goto L1a8600;
  #L1a85f0.  v0:= v1;
  #L1a85f2.  v3:= v4.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a85f6.  v3:= v3.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` @kind boolean;
  #L1a85fa.  if v3 != v0 then goto L1a8604;
  #L1a85fe.  return v1;
  #L1a8600.  v0:= v2;
  #L1a8602.  goto L1a85f2;
  #L1a8604.  v1:= v2;
  #L1a8606.  goto L1a85fe;
}
procedure `boolean` `isOpen`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a8618.  v0:= 0I;
  #L1a861a.  @monitorenter v2
  #Try_start0.  
  #L1a861c.  v1:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #Try_end0.  
  #L1a8620.  if v1 == 0 then goto L1a8628;
  #L1a8624.  @monitorexit v2
  #L1a8626.  return v0;
  #Try_start1.  
  #L1a8628.  v1:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a862c.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L1a8630.  if v1 != 0 then goto L1a8640;
  #L1a8634.  v1:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a8638.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.closed` @type ^`boolean` @kind boolean;
  #L1a863c.  if v1 == 0 then goto L1a8660;
  #L1a8640.  v1:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a8644.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L1a8648.  if v1 != 0 then goto L1a8658;
  #L1a864c.  v1:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a8650.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L1a8654.  if v1 == 0 then goto L1a8660;
  #L1a8658.  v1:= v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` @kind boolean;
  #Try_end1.  
  #L1a865c.  if v1 != 0 then goto L1a8624;
  #L1a8660.  v0:= 1I;
  #L1a8662.  goto L1a8624;
  #L1a8664.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a8666.  @monitorexit v2
  #L1a8668.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a8664;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a8664;
}
procedure `okio.Timeout` `readTimeout`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a8690.  v0:= v1.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L1a8694.  return v0 @kind object;
}
procedure `void` `receiveData`(`okhttp3.internal.http2.Http2Stream` v4 @kind this, `okio.BufferedSource` v5 @kind object @name `in`, `int` v6 @name `length`) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveData:(Lokio/BufferedSource;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a86a8.  v0:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a86ac.  if v0 != 0 then goto L1a86c8;
  #L1a86b0.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a86b6.  v0:= temp;
  #L1a86b8.  if v0 == 0 then goto L1a86c8;
  #L1a86bc.  v0:= new `java.lang.AssertionError`;
  #L1a86c0.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a86c6.  throw v0;
  #L1a86c8.  v0:= v4.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a86cc.  v2:= (`long`) v6 @kind i2l;
  #L1a86ce.  call `receive`(v0, v5, v2) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.receive:(Lokio/BufferedSource;J)V` @kind virtual;
  #L1a86d4.  return @kind void;
}
procedure `void` `receiveFin`(`okhttp3.internal.http2.Http2Stream` v3 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveFin:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a86e8.  v1:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a86ec.  if v1 != 0 then goto L1a8708;
  #L1a86f0.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a86f6.  v1:= temp;
  #L1a86f8.  if v1 == 0 then goto L1a8708;
  #L1a86fc.  v1:= new `java.lang.AssertionError`;
  #L1a8700.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a8706.  throw v1;
  #L1a8708.  @monitorenter v3
  #Try_start0.  
  #L1a870a.  v1:= v3.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a870e.  v2:= 1I;
  #L1a8710.  v1.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` := v2 @kind boolean;
  #L1a8714.  call temp:= `isOpen`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L1a871a.  v0:= temp;
  #L1a871c.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1a8722.  @monitorexit v3
  #Try_end0.  
  #L1a8724.  if v0 != 0 then goto L1a8736;
  #L1a8728.  v1:= v3.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a872c.  v2:= v3.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a8730.  call temp:= `removeStream`(v1, v2) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L1a8736.  return @kind void;
  #L1a8738.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L1a873a.  @monitorexit v3
  #Try_end1.  
  #L1a873c.  throw v1;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a8738;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a8738;
}
procedure `void` `receiveHeaders`(`okhttp3.internal.http2.Http2Stream` v4 @kind this, `java.util.List` v5 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveHeaders:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a8764.  v2:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a8768.  if v2 != 0 then goto L1a8784;
  #L1a876c.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a8772.  v2:= temp;
  #L1a8774.  if v2 == 0 then goto L1a8784;
  #L1a8778.  v2:= new `java.lang.AssertionError`;
  #L1a877c.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a8782.  throw v2;
  #L1a8784.  v1:= 1I;
  #L1a8786.  @monitorenter v4
  #L1a8788.  v2:= 1I;
  #Try_start0.  
  #L1a878a.  v4.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` := v2 @kind boolean;
  #L1a878e.  v2:= v4.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L1a8792.  if v2 != 0 then goto L1a87be;
  #L1a8796.  v4.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` := v5 @kind object;
  #L1a879a.  call temp:= `isOpen`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L1a87a0.  v1:= temp;
  #L1a87a2.  call `notifyAll`(v4) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1a87a8.  @monitorexit v4
  #Try_end0.  
  #L1a87aa.  if v1 != 0 then goto L1a87bc;
  #L1a87ae.  v2:= v4.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a87b2.  v3:= v4.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a87b6.  call temp:= `removeStream`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L1a87bc.  return @kind void;
  #Try_start1.  
  #L1a87be.  v0:= new `java.util.ArrayList`;
  #L1a87c2.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1a87c8.  v2:= v4.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L1a87cc.  call temp:= `addAll`(v0, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1a87d2.  v2:= 0I;
  #L1a87d4.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1a87da.  call temp:= `addAll`(v0, v5) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1a87e0.  v4.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` := v0 @kind object;
  #L1a87e4.  goto L1a87a8;
  #L1a87e6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a87e8.  @monitorexit v4
  #Try_end1.  
  #L1a87ea.  throw v2;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a87e6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a87e6;
}
procedure `void` `receiveRstStream`(`okhttp3.internal.http2.Http2Stream` v1 @kind this, `okhttp3.internal.http2.ErrorCode` v2 @kind object @name `errorCode`) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveRstStream:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;

  #L1a8810.  @monitorenter v1
  #Try_start0.  
  #L1a8812.  v0:= v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a8816.  if v0 != 0 then goto L1a8824;
  #L1a881a.  v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v2 @kind object;
  #L1a881e.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #Try_end0.  
  #L1a8824.  @monitorexit v1
  #L1a8826.  return @kind void;
  #L1a8828.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a882a.  @monitorexit v1
  #L1a882c.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a8828;
}
procedure `void` `sendResponseHeaders`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `java.util.List` v4 @kind object, `boolean` v5 @name `out`) @signature `Lokhttp3/internal/http2/Http2Stream;.sendResponseHeaders:(Ljava/util/List;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a884c.  v1:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a8850.  if v1 != 0 then goto L1a886c;
  #L1a8854.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a885a.  v1:= temp;
  #L1a885c.  if v1 == 0 then goto L1a886c;
  #L1a8860.  v1:= new `java.lang.AssertionError`;
  #L1a8864.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a886a.  throw v1;
  #L1a886c.  if v4 != 0 then goto L1a8880;
  #L1a8870.  v1:= new `java.lang.NullPointerException`;
  #L1a8874.  v2:= "responseHeaders == null" @kind object;
  #L1a8878.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a887e.  throw v1;
  #L1a8880.  v0:= 0I;
  #L1a8882.  @monitorenter v3
  #L1a8884.  v1:= 1I;
  #Try_start0.  
  #L1a8886.  v3.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` := v1 @kind boolean;
  #L1a888a.  if v5 != 0 then goto L1a889a;
  #L1a888e.  v1:= v3.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a8892.  v2:= 1I;
  #L1a8894.  v1.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` := v2 @kind boolean;
  #L1a8898.  v0:= 1I;
  #L1a889a.  @monitorexit v3
  #Try_end0.  
  #L1a889c.  v1:= v3.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a88a0.  v2:= v3.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a88a4.  call `writeSynReply`(v1, v2, v0, v4) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynReply:(IZLjava/util/List;)V` @kind virtual;
  #L1a88aa.  if v0 == 0 then goto L1a88b8;
  #L1a88ae.  v1:= v3.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a88b2.  call `flush`(v1) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L1a88b8.  return @kind void;
  #L1a88ba.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L1a88bc.  @monitorexit v3
  #Try_end1.  
  #L1a88be.  throw v1;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a88ba;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a88ba;
}
procedure `java.util.List` `takeResponseHeaders`(`okhttp3.internal.http2.Http2Stream` v3 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.takeResponseHeaders:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a88e4.  @monitorenter v3
  #Try_start0.  
  #L1a88e6.  call temp:= `isLocallyInitiated`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L1a88ec.  v1:= temp;
  #L1a88ee.  if v1 != 0 then goto L1a8908;
  #L1a88f2.  v1:= new `java.lang.IllegalStateException`;
  #L1a88f6.  v2:= "servers cannot read response headers" @kind object;
  #L1a88fa.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a8900.  throw v1;
  #Try_end0.  
  #L1a8902.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a8904.  @monitorexit v3
  #L1a8906.  throw v1;
  #Try_start1.  
  #L1a8908.  v1:= v3.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L1a890c.  call `enter`(v1) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.enter:()V` @kind virtual;
  #Try_end1.  
  #Try_start2.  
  #L1a8912.  v1:= v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L1a8916.  if v1 != 0 then goto L1a8938;
  #L1a891a.  v1:= v3.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a891e.  if v1 != 0 then goto L1a8938;
  #L1a8922.  call `waitForIo`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.waitForIo:()V` @kind virtual;
  #Try_end2.  
  #L1a8928.  goto L1a8912;
  #L1a892a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L1a892c.  v2:= v3.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L1a8930.  call `exitAndThrowIfTimedOut`(v2) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L1a8936.  throw v1;
  #L1a8938.  v1:= v3.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L1a893c.  call `exitAndThrowIfTimedOut`(v1) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L1a8942.  v0:= v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L1a8946.  if v0 == 0 then goto L1a8954;
  #L1a894a.  v1:= 0I;
  #L1a894c.  v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` := v1 @kind object;
  #Try_end3.  
  #L1a8950.  @monitorexit v3
  #L1a8952.  return v0 @kind object;
  #Try_start4.  
  #L1a8954.  v1:= new `okhttp3.internal.http2.StreamResetException`;
  #L1a8958.  v2:= v3.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a895c.  call `<init>`(v1, v2) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L1a8962.  throw v1;
  #Try_end4.  
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a8902;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a8902;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L1a892a;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L1a8902;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L1a8902;
}
procedure `void` `waitForIo`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.waitForIo:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L1a89a4.  call `wait`(v2) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #Try_end0.  
  #L1a89aa.  return @kind void;
  #L1a89ac.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L1a89ae.  v1:= new `java.io.InterruptedIOException`;
  #L1a89b2.  call `<init>`(v1) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L1a89b8.  throw v1;
  catch `java.lang.InterruptedException` @[Try_start0..Try_end0] goto L1a89ac;
}
procedure `okio.Timeout` `writeTimeout`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a89dc.  v0:= v1.`okhttp3.internal.http2.Http2Stream.writeTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L1a89e0.  return v0 @kind object;
}
