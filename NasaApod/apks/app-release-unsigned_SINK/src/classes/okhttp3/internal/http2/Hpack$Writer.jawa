record `okhttp3.internal.http2.Hpack$Writer` @kind class @AccessFlag FINAL {
  `okhttp3.internal.http2.Header`[] `okhttp3.internal.http2.Hpack$Writer.dynamicTable` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @AccessFlag ;
  `okio.Buffer` `okhttp3.internal.http2.Hpack$Writer.out` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.useCompression` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE_LIMIT` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `int` v3 @name `headerTableSizeSetting`, `boolean` v4 @name `useCompression`, `okio.Buffer` v5 @kind object @name `out`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1a57d0.  v1:= 0I;
  #L1a57d2.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a57d8.  v0:= 2147483647I;
  #L1a57de.  v2.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L1a57e2.  v0:= 8I;
  #L1a57e6.  v0:= new `okhttp3.internal.http2.Header`[v0];
  #L1a57ea.  v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v0 @kind object;
  #L1a57ee.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a57f2.  v0:= length @variable v0;
  #L1a57f4.  v0:= v0 + -1;
  #L1a57f8.  v2.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v0;
  #L1a57fc.  v2.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v1;
  #L1a5800.  v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v1;
  #L1a5804.  v2.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v3;
  #L1a5808.  v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v3;
  #L1a580c.  v2.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` := v4 @kind boolean;
  #L1a5810.  v2.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` := v5 @kind object;
  #L1a5814.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `okio.Buffer` v3 @kind object @name `out`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(Lokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1a5828.  v0:= 4096I;
  #L1a582c.  v1:= 1I;
  #L1a582e.  call `<init>`(v2, v0, v1, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @kind direct;
  #L1a5834.  return @kind void;
}
procedure `void` `adjustDynamicTableByteCount`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a5848.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a584c.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a5850.  if v0 >= v1 then goto L1a5862;
  #L1a5854.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a5858.  if v0 != 0 then goto L1a5864;
  #L1a585c.  call `clearDynamicTable`(v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L1a5862.  return @kind void;
  #L1a5864.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a5868.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a586c.  v0:= v0 - v1 @kind int;
  #L1a586e.  call temp:= `evictToRecoverBytes`(v2, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L1a5874.  goto L1a5862;
}
procedure `void` `clearDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v3 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1a5888.  v2:= 0I;
  #L1a588a.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a588e.  v1:= 0I;
  #L1a5890.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L1a5896.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a589a.  v0:= length @variable v0;
  #L1a589c.  v0:= v0 + -1;
  #L1a58a0.  v3.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v0;
  #L1a58a4.  v3.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v2;
  #L1a58a8.  v3.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v2;
  #L1a58ac.  return @kind void;
}
procedure `int` `evictToRecoverBytes`(`okhttp3.internal.http2.Hpack$Writer` v7 @kind this, `int` v8 @name `bytesToRecover`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a58c0.  v0:= 0I;
  #L1a58c2.  if v8 <= 0 then goto L1a5962;
  #L1a58c6.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a58ca.  v2:= length @variable v2;
  #L1a58cc.  v1:= v2 + -1;
  #L1a58d0.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a58d4.  if v1 < v2 then goto L1a5916;
  #L1a58d8.  if v8 <= 0 then goto L1a5916;
  #L1a58dc.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a58e0.  v2:= v2[v1] @kind object;
  #L1a58e4.  v2:= v2.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a58e8.  v8:= v8 - v2 @kind int;
  #L1a58ea.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a58ee.  v3:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a58f2.  v3:= v3[v1] @kind object;
  #L1a58f6.  v3:= v3.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a58fa.  v2:= v2 - v3 @kind int;
  #L1a58fc.  v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v2;
  #L1a5900.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a5904.  v2:= v2 + -1;
  #L1a5908.  v7.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v2;
  #L1a590c.  v0:= v0 + 1;
  #L1a5910.  v1:= v1 + -1;
  #L1a5914.  goto L1a58d0;
  #L1a5916.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a591a.  v3:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a591e.  v3:= v3 + 1;
  #L1a5922.  v4:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5926.  v5:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a592a.  v5:= v5 + 1;
  #L1a592e.  v5:= v5 + v0 @kind int;
  #L1a5930.  v6:= v7.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a5934.  call `arraycopy`(v2, v3, v4, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1a593a.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a593e.  v3:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a5942.  v3:= v3 + 1;
  #L1a5946.  v4:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a594a.  v4:= v4 + 1;
  #L1a594e.  v4:= v4 + v0 @kind int;
  #L1a5950.  v5:= 0I;
  #L1a5952.  call `fill`(v2, v3, v4, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L1a5958.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a595c.  v2:= v2 + v0 @kind int;
  #L1a595e.  v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v2;
  #L1a5962.  return v0;
}
procedure `void` `insertIntoDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v8 @kind this, `okhttp3.internal.http2.Header` v9 @kind object @name `entry`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a5974.  v1:= v9.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a5978.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a597c.  if v1 <= v4 then goto L1a5988;
  #L1a5980.  call `clearDynamicTable`(v8) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L1a5986.  return @kind void;
  #L1a5988.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a598c.  v4:= v4 + v1 @kind int;
  #L1a598e.  v5:= v8.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a5992.  v0:= v4 - v5 @kind int;
  #L1a5996.  call temp:= `evictToRecoverBytes`(v8, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L1a599c.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a59a0.  v4:= v4 + 1;
  #L1a59a4.  v5:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a59a8.  v5:= length @variable v5;
  #L1a59aa.  if v4 <= v5 then goto L1a59e6;
  #L1a59ae.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a59b2.  v4:= length @variable v4;
  #L1a59b4.  v4:= v4 * 2;
  #L1a59b8.  v2:= new `okhttp3.internal.http2.Header`[v4];
  #L1a59bc.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a59c0.  v5:= 0I;
  #L1a59c2.  v6:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a59c6.  v6:= length @variable v6;
  #L1a59c8.  v7:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a59cc.  v7:= length @variable v7;
  #L1a59ce.  call `arraycopy`(v4, v5, v2, v6, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1a59d4.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a59d8.  v4:= length @variable v4;
  #L1a59da.  v4:= v4 + -1;
  #L1a59de.  v8.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v4;
  #L1a59e2.  v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v2 @kind object;
  #L1a59e6.  v3:= v8.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a59ea.  v4:= v3 + -1;
  #L1a59ee.  v8.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v4;
  #L1a59f2.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a59f6.  v4[v3]:= v9 @kind object;
  #L1a59fa.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a59fe.  v4:= v4 + 1;
  #L1a5a02.  v8.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v4;
  #L1a5a06.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a5a0a.  v4:= v4 + v1 @kind int;
  #L1a5a0c.  v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v4;
  #L1a5a10.  goto L1a5986;
}
procedure `void` `setHeaderTableSizeSetting`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `int` v3 @name `headerTableSizeSetting`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.setHeaderTableSizeSetting:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a5a24.  v2.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v3;
  #L1a5a28.  v1:= 16384I;
  #L1a5a2c.  call temp:= `min`(v3, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1a5a32.  v0:= temp;
  #L1a5a34.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a5a38.  if v1 != v0 then goto L1a5a3e;
  #L1a5a3c.  return @kind void;
  #L1a5a3e.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a5a42.  if v0 >= v1 then goto L1a5a56;
  #L1a5a46.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L1a5a4a.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1a5a50.  v1:= temp;
  #L1a5a52.  v2.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v1;
  #L1a5a56.  v1:= 1I;
  #L1a5a58.  v2.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v1 @kind boolean;
  #L1a5a5c.  v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v0;
  #L1a5a60.  call `adjustDynamicTableByteCount`(v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @kind direct;
  #L1a5a66.  goto L1a5a3c;
}
procedure `void` `writeByteString`(`okhttp3.internal.http2.Hpack$Writer` v5 @kind this, `okio.ByteString` v6 @kind object @name `data`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a5a78.  v4:= 127I;
  #L1a5a7c.  v2:= v5.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` @kind boolean;
  #L1a5a80.  if v2 == 0 then goto L1a5ade;
  #L1a5a84.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L1a5a8a.  v2:= temp @kind object;
  #L1a5a8c.  call temp:= `encodedLength`(v2, v6) @signature `Lokhttp3/internal/http2/Huffman;.encodedLength:(Lokio/ByteString;)I` @kind virtual;
  #L1a5a92.  v2:= temp;
  #L1a5a94.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a5a9a.  v3:= temp;
  #L1a5a9c.  if v2 >= v3 then goto L1a5ade;
  #L1a5aa0.  v0:= new `okio.Buffer`;
  #L1a5aa4.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1a5aaa.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L1a5ab0.  v2:= temp @kind object;
  #L1a5ab2.  call `encode`(v2, v6, v0) @signature `Lokhttp3/internal/http2/Huffman;.encode:(Lokio/ByteString;Lokio/BufferedSink;)V` @kind virtual;
  #L1a5ab8.  call temp:= `readByteString`(v0) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1a5abe.  v1:= temp @kind object;
  #L1a5ac0.  call temp:= `size`(v1) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a5ac6.  v2:= temp;
  #L1a5ac8.  v3:= 128I;
  #L1a5acc.  call `writeInt`(v5, v2, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a5ad2.  v2:= v5.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a5ad6.  call temp:= `write`(v2, v1) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L1a5adc.  return @kind void;
  #L1a5ade.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a5ae4.  v2:= temp;
  #L1a5ae6.  v3:= 0I;
  #L1a5ae8.  call `writeInt`(v5, v2, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a5aee.  v2:= v5.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a5af2.  call temp:= `write`(v2, v6) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L1a5af8.  goto L1a5adc;
}
procedure `void` `writeHeaders`(`okhttp3.internal.http2.Hpack$Writer` v13 @kind this, `java.util.List` v14 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeHeaders:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1a5b0c.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` @kind boolean;
  #L1a5b10.  if v10 == 0 then goto L1a5b54;
  #L1a5b14.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L1a5b18.  v11:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a5b1c.  if v10 >= v11 then goto L1a5b32;
  #L1a5b20.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L1a5b24.  v11:= 31I;
  #L1a5b28.  v12:= 32I;
  #L1a5b2c.  call `writeInt`(v13, v10, v11, v12) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a5b32.  v10:= 0I;
  #L1a5b34.  v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v10 @kind boolean;
  #L1a5b38.  v10:= 2147483647I;
  #L1a5b3e.  v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v10;
  #L1a5b42.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a5b46.  v11:= 31I;
  #L1a5b4a.  v12:= 32I;
  #L1a5b4e.  call `writeInt`(v13, v10, v11, v12) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a5b54.  v3:= 0I;
  #L1a5b56.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1a5b5c.  v7:= temp;
  #L1a5b5e.  if v3 >= v7 then goto L1a5cf6;
  #L1a5b62.  call temp:= `get`(v14, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1a5b68.  v0:= temp @kind object;
  #L1a5b6a.  v0:= (`okhttp3.internal.http2.Header`) v0 @kind object;
  #L1a5b6e.  v10:= v0.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L1a5b72.  call temp:= `toAsciiLowercase`(v10) @signature `Lokio/ByteString;.toAsciiLowercase:()Lokio/ByteString;` @kind virtual;
  #L1a5b78.  v6:= temp @kind object;
  #L1a5b7a.  v9:= v0.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a5b7e.  v1:= -1I;
  #L1a5b80.  v2:= -1I;
  #L1a5b82.  v10:= `@@okhttp3.internal.http2.Hpack.NAME_TO_FIRST_INDEX` @type ^`java.util.Map` @kind object;
  #L1a5b86.  call temp:= `get`(v10, v6) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1a5b8c.  v8:= temp @kind object;
  #L1a5b8e.  v8:= (`java.lang.Integer`) v8 @kind object;
  #L1a5b92.  if v8 == 0 then goto L1a5bce;
  #L1a5b96.  call temp:= `intValue`(v8) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1a5b9c.  v10:= temp;
  #L1a5b9e.  v2:= v10 + 1;
  #L1a5ba2.  v10:= 1I;
  #L1a5ba4.  if v2 <= v10 then goto L1a5bce;
  #L1a5ba8.  v10:= 8I;
  #L1a5bac.  if v2 >= v10 then goto L1a5bce;
  #L1a5bb0.  v10:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5bb4.  v11:= v2 + -1;
  #L1a5bb8.  v10:= v10[v11] @kind object;
  #L1a5bbc.  v10:= v10.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a5bc0.  call temp:= `equal`(v10, v9) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a5bc6.  v10:= temp;
  #L1a5bc8.  if v10 == 0 then goto L1a5c42;
  #L1a5bcc.  v1:= v2;
  #L1a5bce.  v10:= -1I;
  #L1a5bd0.  if v1 != v10 then goto L1a5c28;
  #L1a5bd4.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a5bd8.  v4:= v10 + 1;
  #L1a5bdc.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5be0.  v5:= length @variable v10;
  #L1a5be2.  if v4 >= v5 then goto L1a5c28;
  #L1a5be6.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5bea.  v10:= v10[v4] @kind object;
  #L1a5bee.  v10:= v10.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L1a5bf2.  call temp:= `equal`(v10, v6) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a5bf8.  v10:= temp;
  #L1a5bfa.  if v10 == 0 then goto L1a5c78;
  #L1a5bfe.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5c02.  v10:= v10[v4] @kind object;
  #L1a5c06.  v10:= v10.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a5c0a.  call temp:= `equal`(v10, v9) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a5c10.  v10:= temp;
  #L1a5c12.  if v10 == 0 then goto L1a5c60;
  #L1a5c16.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a5c1a.  v10:= v4 - v10 @kind int;
  #L1a5c1e.  v11:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5c22.  v11:= length @variable v11;
  #L1a5c24.  v1:= v10 + v11 @kind int;
  #L1a5c28.  v10:= -1I;
  #L1a5c2a.  if v1 == v10 then goto L1a5c7e;
  #L1a5c2e.  v10:= 127I;
  #L1a5c32.  v11:= 128I;
  #L1a5c36.  call `writeInt`(v13, v1, v10, v11) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a5c3c.  v3:= v3 + 1;
  #L1a5c40.  goto L1a5b5e;
  #L1a5c42.  v10:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5c46.  v10:= v10[v2] @kind object;
  #L1a5c4a.  v10:= v10.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a5c4e.  call temp:= `equal`(v10, v9) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a5c54.  v10:= temp;
  #L1a5c56.  if v10 == 0 then goto L1a5bce;
  #L1a5c5a.  v1:= v2 + 1;
  #L1a5c5e.  goto L1a5bce;
  #L1a5c60.  v10:= -1I;
  #L1a5c62.  if v2 != v10 then goto L1a5c78;
  #L1a5c66.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a5c6a.  v10:= v4 - v10 @kind int;
  #L1a5c6e.  v11:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5c72.  v11:= length @variable v11;
  #L1a5c74.  v2:= v10 + v11 @kind int;
  #L1a5c78.  v4:= v4 + 1;
  #L1a5c7c.  goto L1a5be2;
  #L1a5c7e.  v10:= -1I;
  #L1a5c80.  if v2 != v10 then goto L1a5ca6;
  #L1a5c84.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a5c88.  v11:= 64I;
  #L1a5c8c.  call temp:= `writeByte`(v10, v11) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a5c92.  call `writeByteString`(v13, v6) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a5c98.  call `writeByteString`(v13, v9) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a5c9e.  call `insertIntoDynamicTable`(v13, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L1a5ca4.  goto L1a5c3c;
  #L1a5ca6.  v10:= `@@okhttp3.internal.http2.Header.PSEUDO_PREFIX` @type ^`okio.ByteString` @kind object;
  #L1a5caa.  call temp:= `startsWith`(v6, v10) @signature `Lokio/ByteString;.startsWith:(Lokio/ByteString;)Z` @kind virtual;
  #L1a5cb0.  v10:= temp;
  #L1a5cb2.  if v10 == 0 then goto L1a5cda;
  #L1a5cb6.  v10:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L1a5cba.  call temp:= `equals`(v10, v6) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a5cc0.  v10:= temp;
  #L1a5cc2.  if v10 != 0 then goto L1a5cda;
  #L1a5cc6.  v10:= 15I;
  #L1a5cca.  v11:= 0I;
  #L1a5ccc.  call `writeInt`(v13, v2, v10, v11) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a5cd2.  call `writeByteString`(v13, v9) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a5cd8.  goto L1a5c3c;
  #L1a5cda.  v10:= 63I;
  #L1a5cde.  v11:= 64I;
  #L1a5ce2.  call `writeInt`(v13, v2, v10, v11) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a5ce8.  call `writeByteString`(v13, v9) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a5cee.  call `insertIntoDynamicTable`(v13, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L1a5cf4.  goto L1a5c3c;
  #L1a5cf6.  return @kind void;
}
procedure `void` `writeInt`(`okhttp3.internal.http2.Hpack$Writer` v3 @kind this, `int` v4 @name `value`, `int` v5 @name `prefixMask`, `int` v6 @name `bits`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a5d08.  if v4 >= v5 then goto L1a5d1c;
  #L1a5d0c.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a5d10.  v2:= v6 ^| v4 @kind int;
  #L1a5d14.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a5d1a.  return @kind void;
  #L1a5d1c.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a5d20.  v2:= v6 ^| v5 @kind int;
  #L1a5d24.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a5d2a.  v4:= v4 - v5 @kind int;
  #L1a5d2c.  v1:= 128I;
  #L1a5d30.  if v4 < v1 then goto L1a5d4c;
  #L1a5d34.  v0:= v4 ^& 127;
  #L1a5d38.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a5d3c.  v2:= v0 ^| 128;
  #L1a5d40.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a5d46.  v4:= v4 ^>> 7;
  #L1a5d4a.  goto L1a5d2c;
  #L1a5d4c.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a5d50.  call temp:= `writeByte`(v1, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a5d56.  goto L1a5d1a;
}
