record `okhttp3.internal.http2.Settings` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.http2.Settings.set` @AccessFlag PRIVATE;
  `int`[] `okhttp3.internal.http2.Settings.values` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Settings.COUNT` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.DEFAULT_INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.ENABLE_PUSH` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.HEADER_TABLE_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_CONCURRENT_STREAMS` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_FRAME_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_HEADER_LIST_SIZE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a9c3c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a9c42.  v0:= 10I;
  #L1a9c46.  v0:= new `int`[v0];
  #L1a9c4a.  v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] := v0 @kind object;
  #L1a9c4e.  return @kind void;
}
procedure `void` `clear`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.clear:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a9c60.  v1:= 0I;
  #L1a9c62.  v2.`okhttp3.internal.http2.Settings.set` @type ^`int` := v1;
  #L1a9c66.  v0:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9c6a.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L1a9c70.  return @kind void;
}
procedure `int` `get`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 @name `id`) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @AccessFlag  {
    temp;
    v0;

  #L1a9c84.  v0:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9c88.  v0:= v0[v2];
  #L1a9c8c.  return v0;
}
procedure `boolean` `getEnablePush`(`okhttp3.internal.http2.Settings` v5 @kind this, `boolean` v6 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getEnablePush:(Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a9ca0.  v2:= 0I;
  #L1a9ca2.  v1:= 1I;
  #L1a9ca4.  v0:= 4I;
  #L1a9ca6.  v3:= v5.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9caa.  v3:= v3 ^& v0 @kind int;
  #L1a9cac.  if v3 == 0 then goto L1a9cc0;
  #L1a9cb0.  v3:= v5.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9cb4.  v4:= 2I;
  #L1a9cb6.  v3:= v3[v4];
  #L1a9cba.  if v3 != v1 then goto L1a9ccc;
  #L1a9cbe.  return v1;
  #L1a9cc0.  if v6 == 0 then goto L1a9cc8;
  #L1a9cc4.  v3:= v1;
  #L1a9cc6.  goto L1a9cba;
  #L1a9cc8.  v3:= v2;
  #L1a9cca.  goto L1a9cba;
  #L1a9ccc.  v1:= v2;
  #L1a9cce.  goto L1a9cbe;
}
procedure `int` `getHeaderTableSize`(`okhttp3.internal.http2.Settings` v3 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getHeaderTableSize:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a9ce0.  v0:= 2I;
  #L1a9ce2.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9ce6.  v1:= v1 ^& v0 @kind int;
  #L1a9ce8.  if v1 == 0 then goto L1a9cf8;
  #L1a9cec.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9cf0.  v2:= 1I;
  #L1a9cf2.  v1:= v1[v2];
  #L1a9cf6.  return v1;
  #L1a9cf8.  v1:= -1I;
  #L1a9cfa.  goto L1a9cf6;
}
procedure `int` `getInitialWindowSize`(`okhttp3.internal.http2.Settings` v3 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a9d0c.  v0:= 128I;
  #L1a9d10.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9d14.  v1:= v1 ^& v0 @kind int;
  #L1a9d16.  if v1 == 0 then goto L1a9d26;
  #L1a9d1a.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9d1e.  v2:= 7I;
  #L1a9d20.  v1:= v1[v2];
  #L1a9d24.  return v1;
  #L1a9d26.  v1:= 65535I;
  #L1a9d2c.  goto L1a9d24;
}
procedure `int` `getMaxConcurrentStreams`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getMaxConcurrentStreams:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a9d40.  v0:= 16I;
  #L1a9d44.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9d48.  v1:= v1 ^& v0 @kind int;
  #L1a9d4a.  if v1 == 0 then goto L1a9d58;
  #L1a9d4e.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9d52.  v2:= 4I;
  #L1a9d54.  v4:= v1[v2];
  #L1a9d58.  return v4;
}
procedure `int` `getMaxFrameSize`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getMaxFrameSize:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a9d6c.  v0:= 32I;
  #L1a9d70.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9d74.  v1:= v1 ^& v0 @kind int;
  #L1a9d76.  if v1 == 0 then goto L1a9d84;
  #L1a9d7a.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9d7e.  v2:= 5I;
  #L1a9d80.  v4:= v1[v2];
  #L1a9d84.  return v4;
}
procedure `int` `getMaxHeaderListSize`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getMaxHeaderListSize:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a9d98.  v0:= 64I;
  #L1a9d9c.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9da0.  v1:= v1 ^& v0 @kind int;
  #L1a9da2.  if v1 == 0 then goto L1a9db0;
  #L1a9da6.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9daa.  v2:= 6I;
  #L1a9dac.  v4:= v1[v2];
  #L1a9db0.  return v4;
}
procedure `boolean` `isSet`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `id`) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a9dc4.  v1:= 1I;
  #L1a9dc6.  v0:= v1 ^< v4 @kind int;
  #L1a9dca.  v2:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9dce.  v2:= v2 ^& v0 @kind int;
  #L1a9dd0.  if v2 == 0 then goto L1a9dd6;
  #L1a9dd4.  return v1;
  #L1a9dd6.  v1:= 0I;
  #L1a9dd8.  goto L1a9dd4;
}
procedure `void` `merge`(`okhttp3.internal.http2.Settings` v2 @kind this, `okhttp3.internal.http2.Settings` v3 @kind object @name `other`) @signature `Lokhttp3/internal/http2/Settings;.merge:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a9dec.  v0:= 0I;
  #L1a9dee.  v1:= 10I;
  #L1a9df2.  if v0 >= v1 then goto L1a9e18;
  #L1a9df6.  call temp:= `isSet`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @kind virtual;
  #L1a9dfc.  v1:= temp;
  #L1a9dfe.  if v1 != 0 then goto L1a9e08;
  #L1a9e02.  v0:= v0 + 1;
  #L1a9e06.  goto L1a9dee;
  #L1a9e08.  call temp:= `get`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @kind virtual;
  #L1a9e0e.  v1:= temp;
  #L1a9e10.  call temp:= `set`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L1a9e16.  goto L1a9e02;
  #L1a9e18.  return @kind void;
}
procedure `okhttp3.internal.http2.Settings` `set`(`okhttp3.internal.http2.Settings` v2 @kind this, `int` v3 @name `id`, `int` v4 @name `value`) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a9e2c.  if v3 < 0 then goto L1a9e3a;
  #L1a9e30.  v1:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9e34.  v1:= length @variable v1;
  #L1a9e36.  if v3 < v1 then goto L1a9e3c;
  #L1a9e3a.  return v2 @kind object;
  #L1a9e3c.  v1:= 1I;
  #L1a9e3e.  v0:= v1 ^< v3 @kind int;
  #L1a9e42.  v1:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9e46.  v1:= v1 ^| v0 @kind int;
  #L1a9e48.  v2.`okhttp3.internal.http2.Settings.set` @type ^`int` := v1;
  #L1a9e4c.  v1:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9e50.  v1[v3]:= v4;
  #L1a9e54.  goto L1a9e3a;
}
procedure `int` `size`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.size:()I` @AccessFlag  {
    temp;
    v0;

  #L1a9e68.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9e6c.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L1a9e72.  v0:= temp;
  #L1a9e74.  return v0;
}
