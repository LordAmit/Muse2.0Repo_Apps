record `okhttp3.internal.http2.Http2Connection` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `boolean` `okhttp3.internal.http2.Http2Connection.awaitingPong` @AccessFlag PRIVATE;
  `long` `okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Http2Connection.client` @AccessFlag FINAL;
  `java.util.Set` `okhttp3.internal.http2.Http2Connection.currentPushRequests` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.internal.http2.Http2Connection.hostname` @AccessFlag FINAL;
  `int` `okhttp3.internal.http2.Http2Connection.lastGoodStreamId` @AccessFlag ;
  `okhttp3.internal.http2.Http2Connection$Listener` `okhttp3.internal.http2.Http2Connection.listener` @AccessFlag FINAL;
  `int` `okhttp3.internal.http2.Http2Connection.nextStreamId` @AccessFlag ;
  `okhttp3.internal.http2.Settings` `okhttp3.internal.http2.Http2Connection.okHttpSettings` @AccessFlag ;
  `okhttp3.internal.http2.Settings` `okhttp3.internal.http2.Http2Connection.peerSettings` @AccessFlag FINAL;
  `java.util.concurrent.ExecutorService` `okhttp3.internal.http2.Http2Connection.pushExecutor` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.PushObserver` `okhttp3.internal.http2.Http2Connection.pushObserver` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Connection$ReaderRunnable` `okhttp3.internal.http2.Http2Connection.readerRunnable` @AccessFlag FINAL;
  `boolean` `okhttp3.internal.http2.Http2Connection.receivedInitialPeerSettings` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Http2Connection.shutdown` @AccessFlag ;
  `java.net.Socket` `okhttp3.internal.http2.Http2Connection.socket` @AccessFlag FINAL;
  `java.util.Map` `okhttp3.internal.http2.Http2Connection.streams` @AccessFlag FINAL;
  `long` `okhttp3.internal.http2.Http2Connection.unacknowledgedBytesRead` @AccessFlag ;
  `okhttp3.internal.http2.Http2Writer` `okhttp3.internal.http2.Http2Connection.writer` @AccessFlag FINAL;
  `java.util.concurrent.ScheduledExecutorService` `okhttp3.internal.http2.Http2Connection.writerExecutor` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@okhttp3.internal.http2.Http2Connection.$assertionsDisabled` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `int` `@@okhttp3.internal.http2.Http2Connection.OKHTTP_CLIENT_WINDOW_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.concurrent.ExecutorService` `@@okhttp3.internal.http2.Http2Connection.listenerExecutor` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Connection;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1a6a70.  v8:= 1I;
  #L1a6a72.  v2:= 0I;
  #L1a6a74.  v0:= constclass @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a6a78.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L1a6a7e.  v0:= temp;
  #L1a6a80.  if v0 != 0 then goto L1a6abe;
  #L1a6a84.  v0:= v8;
  #L1a6a86.  `@@okhttp3.internal.http2.Http2Connection.$assertionsDisabled` @type ^`boolean` := v0 @kind boolean;
  #L1a6a8a.  v1:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L1a6a8e.  v3:= 2147483647I;
  #L1a6a94.  v4:= 60L;
  #L1a6a98.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1a6a9c.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L1a6aa0.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L1a6aa6.  v0:= "OkHttp Http2Connection" @kind object;
  #L1a6aaa.  call temp:= `threadFactory`(v0, v8) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L1a6ab0.  v8:= temp @kind object;
  #L1a6ab2.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1a6ab8.  `@@okhttp3.internal.http2.Http2Connection.listenerExecutor` @type ^`java.util.concurrent.ExecutorService` := v1 @kind object;
  #L1a6abc.  return @kind void;
  #L1a6abe.  v0:= v2;
  #L1a6ac0.  goto L1a6a86;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Connection` v12 @kind this, `okhttp3.internal.http2.Http2Connection$Builder` v13 @kind object @name `builder`) @signature `Lokhttp3/internal/http2/Http2Connection;.<init>:(Lokhttp3/internal/http2/Http2Connection$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1a6ad4.  v11:= 7I;
  #L1a6ad6.  v9:= 1I;
  #L1a6ad8.  v10:= 0I;
  #L1a6ada.  call `<init>`(v12) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a6ae0.  v0:= new `java.util.LinkedHashMap`;
  #L1a6ae4.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L1a6aea.  v12.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` := v0 @kind object;
  #L1a6aee.  v0:= 0L;
  #L1a6af2.  v12.`okhttp3.internal.http2.Http2Connection.unacknowledgedBytesRead` @type ^`long` := v0 @kind wide;
  #L1a6af6.  v0:= new `okhttp3.internal.http2.Settings`;
  #L1a6afa.  call `<init>`(v0) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @kind direct;
  #L1a6b00.  v12.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` := v0 @kind object;
  #L1a6b04.  v0:= new `okhttp3.internal.http2.Settings`;
  #L1a6b08.  call `<init>`(v0) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @kind direct;
  #L1a6b0e.  v12.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` := v0 @kind object;
  #L1a6b12.  v12.`okhttp3.internal.http2.Http2Connection.receivedInitialPeerSettings` @type ^`boolean` := v10 @kind boolean;
  #L1a6b16.  v0:= new `java.util.LinkedHashSet`;
  #L1a6b1a.  call `<init>`(v0) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L1a6b20.  v12.`okhttp3.internal.http2.Http2Connection.currentPushRequests` @type ^`java.util.Set` := v0 @kind object;
  #L1a6b24.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.pushObserver` @type ^`okhttp3.internal.http2.PushObserver` @kind object;
  #L1a6b28.  v12.`okhttp3.internal.http2.Http2Connection.pushObserver` @type ^`okhttp3.internal.http2.PushObserver` := v0 @kind object;
  #L1a6b2c.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.client` @type ^`boolean` @kind boolean;
  #L1a6b30.  v12.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` := v0 @kind boolean;
  #L1a6b34.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.listener` @type ^`okhttp3.internal.http2.Http2Connection$Listener` @kind object;
  #L1a6b38.  v12.`okhttp3.internal.http2.Http2Connection.listener` @type ^`okhttp3.internal.http2.Http2Connection$Listener` := v0 @kind object;
  #L1a6b3c.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.client` @type ^`boolean` @kind boolean;
  #L1a6b40.  if v0 == 0 then goto L1a6c8c;
  #L1a6b44.  v0:= v9;
  #L1a6b46.  v12.`okhttp3.internal.http2.Http2Connection.nextStreamId` @type ^`int` := v0;
  #L1a6b4a.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.client` @type ^`boolean` @kind boolean;
  #L1a6b4e.  if v0 == 0 then goto L1a6b5e;
  #L1a6b52.  v0:= v12.`okhttp3.internal.http2.Http2Connection.nextStreamId` @type ^`int`;
  #L1a6b56.  v0:= v0 + 2;
  #L1a6b5a.  v12.`okhttp3.internal.http2.Http2Connection.nextStreamId` @type ^`int` := v0;
  #L1a6b5e.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.client` @type ^`boolean` @kind boolean;
  #L1a6b62.  if v0 == 0 then goto L1a6b74;
  #L1a6b66.  v0:= v12.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a6b6a.  v1:= 16777216I;
  #L1a6b6e.  call temp:= `set`(v0, v11, v1) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L1a6b74.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.hostname` @type ^`java.lang.String` @kind object;
  #L1a6b78.  v12.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` := v0 @kind object;
  #L1a6b7c.  v0:= new `java.util.concurrent.ScheduledThreadPoolExecutor`;
  #L1a6b80.  v1:= "OkHttp %s Writer" @kind object;
  #L1a6b84.  v2:= new `java.lang.Object`[v9];
  #L1a6b88.  v3:= v12.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a6b8c.  v2[v10]:= v3 @kind object;
  #L1a6b90.  call temp:= `format`(v1, v2) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1a6b96.  v1:= temp @kind object;
  #L1a6b98.  call temp:= `threadFactory`(v1, v10) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L1a6b9e.  v1:= temp @kind object;
  #L1a6ba0.  call `<init>`(v0, v9, v1) @signature `Ljava/util/concurrent/ScheduledThreadPoolExecutor;.<init>:(ILjava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1a6ba6.  v12.`okhttp3.internal.http2.Http2Connection.writerExecutor` @type ^`java.util.concurrent.ScheduledExecutorService` := v0 @kind object;
  #L1a6baa.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.pingIntervalMillis` @type ^`int`;
  #L1a6bae.  if v0 == 0 then goto L1a6bd6;
  #L1a6bb2.  v0:= v12.`okhttp3.internal.http2.Http2Connection.writerExecutor` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L1a6bb6.  v1:= new `okhttp3.internal.http2.Http2Connection$PingRunnable`;
  #L1a6bba.  call `<init>`(v1, v12, v10, v10, v10) @signature `Lokhttp3/internal/http2/Http2Connection$PingRunnable;.<init>:(Lokhttp3/internal/http2/Http2Connection;ZII)V` @kind direct;
  #L1a6bc0.  v2:= v13.`okhttp3.internal.http2.Http2Connection$Builder.pingIntervalMillis` @type ^`int`;
  #L1a6bc4.  v2:= (`long`) v2 @kind i2l;
  #L1a6bc6.  v4:= v13.`okhttp3.internal.http2.Http2Connection$Builder.pingIntervalMillis` @type ^`int`;
  #L1a6bca.  v4:= (`long`) v4 @kind i2l;
  #L1a6bcc.  v6:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1a6bd0.  call temp:= `scheduleAtFixedRate`(v0, v1, v2, v4, v6) @signature `Ljava/util/concurrent/ScheduledExecutorService;.scheduleAtFixedRate:(Ljava/lang/Runnable;JJLjava/util/concurrent/TimeUnit;)Ljava/util/concurrent/ScheduledFuture;` @kind interface;
  #L1a6bd6.  v1:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L1a6bda.  v4:= 60L;
  #L1a6bde.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L1a6be2.  v7:= new `java.util.concurrent.LinkedBlockingQueue`;
  #L1a6be6.  call `<init>`(v7) @signature `Ljava/util/concurrent/LinkedBlockingQueue;.<init>:()V` @kind direct;
  #L1a6bec.  v0:= "OkHttp %s Push Observer" @kind object;
  #L1a6bf0.  v2:= new `java.lang.Object`[v9];
  #L1a6bf4.  v3:= v12.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a6bf8.  v2[v10]:= v3 @kind object;
  #L1a6bfc.  call temp:= `format`(v0, v2) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1a6c02.  v0:= temp @kind object;
  #L1a6c04.  call temp:= `threadFactory`(v0, v9) @signature `Lokhttp3/internal/Util;.threadFactory:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L1a6c0a.  v8:= temp @kind object;
  #L1a6c0c.  v2:= v10;
  #L1a6c0e.  v3:= v9;
  #L1a6c10.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L1a6c16.  v12.`okhttp3.internal.http2.Http2Connection.pushExecutor` @type ^`java.util.concurrent.ExecutorService` := v1 @kind object;
  #L1a6c1a.  v0:= v12.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a6c1e.  v1:= 65535I;
  #L1a6c24.  call temp:= `set`(v0, v11, v1) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L1a6c2a.  v0:= v12.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a6c2e.  v1:= 5I;
  #L1a6c30.  v2:= 16384I;
  #L1a6c34.  call temp:= `set`(v0, v1, v2) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L1a6c3a.  v0:= v12.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a6c3e.  call temp:= `getInitialWindowSize`(v0) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L1a6c44.  v0:= temp;
  #L1a6c46.  v0:= (`long`) v0 @kind i2l;
  #L1a6c48.  v12.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L1a6c4c.  v0:= v13.`okhttp3.internal.http2.Http2Connection$Builder.socket` @type ^`java.net.Socket` @kind object;
  #L1a6c50.  v12.`okhttp3.internal.http2.Http2Connection.socket` @type ^`java.net.Socket` := v0 @kind object;
  #L1a6c54.  v0:= new `okhttp3.internal.http2.Http2Writer`;
  #L1a6c58.  v1:= v13.`okhttp3.internal.http2.Http2Connection$Builder.sink` @type ^`okio.BufferedSink` @kind object;
  #L1a6c5c.  v2:= v12.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` @kind boolean;
  #L1a6c60.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/internal/http2/Http2Writer;.<init>:(Lokio/BufferedSink;Z)V` @kind direct;
  #L1a6c66.  v12.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` := v0 @kind object;
  #L1a6c6a.  v0:= new `okhttp3.internal.http2.Http2Connection$ReaderRunnable`;
  #L1a6c6e.  v1:= new `okhttp3.internal.http2.Http2Reader`;
  #L1a6c72.  v2:= v13.`okhttp3.internal.http2.Http2Connection$Builder.source` @type ^`okio.BufferedSource` @kind object;
  #L1a6c76.  v3:= v12.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` @kind boolean;
  #L1a6c7a.  call `<init>`(v1, v2, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.<init>:(Lokio/BufferedSource;Z)V` @kind direct;
  #L1a6c80.  call `<init>`(v0, v12, v1) @signature `Lokhttp3/internal/http2/Http2Connection$ReaderRunnable;.<init>:(Lokhttp3/internal/http2/Http2Connection;Lokhttp3/internal/http2/Http2Reader;)V` @kind direct;
  #L1a6c86.  v12.`okhttp3.internal.http2.Http2Connection.readerRunnable` @type ^`okhttp3.internal.http2.Http2Connection$ReaderRunnable` := v0 @kind object;
  #L1a6c8a.  return @kind void;
  #L1a6c8c.  v0:= 2I;
  #L1a6c8e.  goto L1a6b46;
}
procedure `void` `access$000`(`okhttp3.internal.http2.Http2Connection` v0 @kind object @name `x0`) @signature `Lokhttp3/internal/http2/Http2Connection;.access$000:(Lokhttp3/internal/http2/Http2Connection;)V` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1a6ca4.  call `failConnection`(v0) @signature `Lokhttp3/internal/http2/Http2Connection;.failConnection:()V` @kind direct;
  #L1a6caa.  return @kind void;
}
procedure `java.util.concurrent.ExecutorService` `access$100`() @signature `Lokhttp3/internal/http2/Http2Connection;.access$100:()Ljava/util/concurrent/ExecutorService;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L1a6cbc.  v0:= `@@okhttp3.internal.http2.Http2Connection.listenerExecutor` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L1a6cc0.  return v0 @kind object;
}
procedure `java.util.concurrent.ScheduledExecutorService` `access$200`(`okhttp3.internal.http2.Http2Connection` v1 @kind object @name `x0`) @signature `Lokhttp3/internal/http2/Http2Connection;.access$200:(Lokhttp3/internal/http2/Http2Connection;)Ljava/util/concurrent/ScheduledExecutorService;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L1a6cd4.  v0:= v1.`okhttp3.internal.http2.Http2Connection.writerExecutor` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L1a6cd8.  return v0 @kind object;
}
procedure `boolean` `access$302`(`okhttp3.internal.http2.Http2Connection` v0 @kind object @name `x0`, `boolean` v1 @name `x1`) @signature `Lokhttp3/internal/http2/Http2Connection;.access$302:(Lokhttp3/internal/http2/Http2Connection;Z)Z` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L1a6cec.  v0.`okhttp3.internal.http2.Http2Connection.awaitingPong` @type ^`boolean` := v1 @kind boolean;
  #L1a6cf0.  return v1;
}
procedure `void` `failConnection`(`okhttp3.internal.http2.Http2Connection` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.failConnection:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L1a6d04.  v0:= `@@okhttp3.internal.http2.ErrorCode.PROTOCOL_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a6d08.  v1:= `@@okhttp3.internal.http2.ErrorCode.PROTOCOL_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a6d0c.  call `close`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.close:(Lokhttp3/internal/http2/ErrorCode;Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #Try_end0.  
  #L1a6d12.  return @kind void;
  #L1a6d14.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1a6d16.  goto L1a6d12;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L1a6d14;
}
procedure `okhttp3.internal.http2.Http2Stream` `newStream`(`okhttp3.internal.http2.Http2Connection` v12 @kind this, `int` v13 @name `associatedStreamId`, `java.util.List` v14 @kind object, `boolean` v15 @name `out`) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(ILjava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1a6d38.  if v15 != 0 then goto L1a6d80;
  #L1a6d3c.  v3:= 1I;
  #L1a6d3e.  v4:= 0I;
  #L1a6d40.  v7:= v12.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a6d44.  @monitorenter v7
  #Try_start0.  
  #L1a6d46.  @monitorenter v12
  #Try_end0.  
  #Try_start1.  
  #L1a6d48.  v2:= v12.`okhttp3.internal.http2.Http2Connection.nextStreamId` @type ^`int`;
  #L1a6d4c.  v5:= 1073741823I;
  #L1a6d52.  if v2 <= v5 then goto L1a6d60;
  #L1a6d56.  v2:= `@@okhttp3.internal.http2.ErrorCode.REFUSED_STREAM` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a6d5a.  call `shutdown`(v12, v2) @signature `Lokhttp3/internal/http2/Http2Connection;.shutdown:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a6d60.  v2:= v12.`okhttp3.internal.http2.Http2Connection.shutdown` @type ^`boolean` @kind boolean;
  #L1a6d64.  if v2 == 0 then goto L1a6d84;
  #L1a6d68.  v2:= new `okhttp3.internal.http2.ConnectionShutdownException`;
  #L1a6d6c.  call `<init>`(v2) @signature `Lokhttp3/internal/http2/ConnectionShutdownException;.<init>:()V` @kind direct;
  #L1a6d72.  throw v2;
  #L1a6d74.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a6d76.  @monitorexit v12
  #Try_end1.  
  #Try_start2.  
  #L1a6d78.  throw v2;
  #L1a6d7a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a6d7c.  @monitorexit v7
  #Try_end2.  
  #L1a6d7e.  throw v2;
  #L1a6d80.  v3:= 0I;
  #L1a6d82.  goto L1a6d3e;
  #Try_start3.  
  #L1a6d84.  v1:= v12.`okhttp3.internal.http2.Http2Connection.nextStreamId` @type ^`int`;
  #L1a6d88.  v2:= v12.`okhttp3.internal.http2.Http2Connection.nextStreamId` @type ^`int`;
  #L1a6d8c.  v2:= v2 + 2;
  #L1a6d90.  v12.`okhttp3.internal.http2.Http2Connection.nextStreamId` @type ^`int` := v2;
  #L1a6d94.  v0:= new `okhttp3.internal.http2.Http2Stream`;
  #L1a6d98.  v2:= v12 @kind object;
  #L1a6d9a.  v5:= v14 @kind object;
  #L1a6d9c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/http2/Http2Stream;.<init>:(ILokhttp3/internal/http2/Http2Connection;ZZLjava/util/List;)V` @kind direct;
  #L1a6da2.  if v15 == 0 then goto L1a6dc6;
  #L1a6da6.  v8:= v12.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L1a6daa.  v10:= 0L;
  #L1a6dae.  v2:= lcmp(v8, v10);
  #L1a6db2.  if v2 == 0 then goto L1a6dc6;
  #L1a6db6.  v8:= v0.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L1a6dba.  v10:= 0L;
  #L1a6dbe.  v2:= lcmp(v8, v10);
  #L1a6dc2.  if v2 != 0 then goto L1a6e08;
  #L1a6dc6.  v6:= 1I;
  #L1a6dc8.  call temp:= `isOpen`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L1a6dce.  v2:= temp;
  #L1a6dd0.  if v2 == 0 then goto L1a6de6;
  #L1a6dd4.  v2:= v12.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a6dd8.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a6dde.  v5:= temp @kind object;
  #L1a6de0.  call temp:= `put`(v2, v5, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1a6de6.  @monitorexit v12
  #Try_end3.  
  #L1a6de8.  if v13 != 0 then goto L1a6e0c;
  #Try_start4.  
  #L1a6dec.  v2:= v12.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a6df0.  call `synStream`(v2, v3, v1, v13, v14) @signature `Lokhttp3/internal/http2/Http2Writer;.synStream:(ZIILjava/util/List;)V` @kind virtual;
  #L1a6df6.  @monitorexit v7
  #Try_end4.  
  #L1a6df8.  if v6 == 0 then goto L1a6e06;
  #L1a6dfc.  v2:= v12.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a6e00.  call `flush`(v2) @signature `Lokhttp3/internal/http2/Http2Writer;.flush:()V` @kind virtual;
  #L1a6e06.  return v0 @kind object;
  #L1a6e08.  v6:= 0I;
  #L1a6e0a.  goto L1a6dc8;
  #Try_start5.  
  #L1a6e0c.  v2:= v12.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` @kind boolean;
  #L1a6e10.  if v2 == 0 then goto L1a6e24;
  #L1a6e14.  v2:= new `java.lang.IllegalArgumentException`;
  #L1a6e18.  v5:= "client streams shouldn't have associated stream IDs" @kind object;
  #L1a6e1c.  call `<init>`(v2, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a6e22.  throw v2;
  #L1a6e24.  v2:= v12.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a6e28.  call `pushPromise`(v2, v13, v1, v14) @signature `Lokhttp3/internal/http2/Http2Writer;.pushPromise:(IILjava/util/List;)V` @kind virtual;
  #Try_end5.  
  #L1a6e2e.  goto L1a6df6;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a6d7a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a6d74;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L1a6d7a;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L1a6d74;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L1a6d7a;
  catch `java.lang.Throwable` @[Try_start5..Try_end5] goto L1a6d7a;
}
procedure `void` `addBytesToWriteWindow`(`okhttp3.internal.http2.Http2Connection` v3 @kind this, `long` v4 @name `delta`) @signature `Lokhttp3/internal/http2/Http2Connection;.addBytesToWriteWindow:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a6e78.  v0:= v3.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L1a6e7c.  v0:= v0 + v4 @kind long;
  #L1a6e7e.  v3.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L1a6e82.  v0:= 0L;
  #L1a6e86.  v0:= lcmp(v4, v0);
  #L1a6e8a.  if v0 <= 0 then goto L1a6e94;
  #L1a6e8e.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1a6e94.  return @kind void;
}
procedure `void` `awaitPong`(`okhttp3.internal.http2.Http2Connection` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.awaitPong:()V` @AccessFlag  {
    temp;
    v0;

  #L1a6ea8.  @monitorenter v1
  #Try_start0.  
  #L1a6eaa.  v0:= v1.`okhttp3.internal.http2.Http2Connection.awaitingPong` @type ^`boolean` @kind boolean;
  #L1a6eae.  if v0 == 0 then goto L1a6ec0;
  #L1a6eb2.  call `wait`(v1) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #Try_end0.  
  #L1a6eb8.  goto L1a6eaa;
  #L1a6eba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a6ebc.  @monitorexit v1
  #L1a6ebe.  throw v0;
  #L1a6ec0.  @monitorexit v1
  #L1a6ec2.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a6eba;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Connection` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a6ee0.  v0:= `@@okhttp3.internal.http2.ErrorCode.NO_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a6ee4.  v1:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a6ee8.  call `close`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.close:(Lokhttp3/internal/http2/ErrorCode;Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a6eee.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Connection` v7 @kind this, `okhttp3.internal.http2.ErrorCode` v8 @kind object @name `connectionCode`, `okhttp3.internal.http2.ErrorCode` v9 @kind object @name `streamCode`) @signature `Lokhttp3/internal/http2/Http2Connection;.close:(Lokhttp3/internal/http2/ErrorCode;Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a6f00.  v5:= `@@okhttp3.internal.http2.Http2Connection.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a6f04.  if v5 != 0 then goto L1a6f20;
  #L1a6f08.  call temp:= `holdsLock`(v7) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a6f0e.  v5:= temp;
  #L1a6f10.  if v5 == 0 then goto L1a6f20;
  #L1a6f14.  v5:= new `java.lang.AssertionError`;
  #L1a6f18.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a6f1e.  throw v5;
  #L1a6f20.  v4:= 0I;
  #Try_start0.  
  #L1a6f22.  call `shutdown`(v7, v8) @signature `Lokhttp3/internal/http2/Http2Connection;.shutdown:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #Try_end0.  
  #L1a6f28.  v3:= 0I;
  #L1a6f2a.  @monitorenter v7
  #Try_start1.  
  #L1a6f2c.  v5:= v7.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a6f30.  call temp:= `isEmpty`(v5) @signature `Ljava/util/Map;.isEmpty:()Z` @kind interface;
  #L1a6f36.  v5:= temp;
  #L1a6f38.  if v5 != 0 then goto L1a6f72;
  #L1a6f3c.  v5:= v7.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a6f40.  call temp:= `values`(v5) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L1a6f46.  v5:= temp @kind object;
  #L1a6f48.  v6:= v7.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a6f4c.  call temp:= `size`(v6) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L1a6f52.  v6:= temp;
  #L1a6f54.  v6:= new `okhttp3.internal.http2.Http2Stream`[v6];
  #L1a6f58.  call temp:= `toArray`(v5, v6) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L1a6f5e.  v5:= temp @kind object;
  #L1a6f60.  v0:= v5 @kind object;
  #L1a6f62.  v0:= (`okhttp3.internal.http2.Http2Stream`[]) v0 @kind object;
  #L1a6f66.  v3:= v0 @kind object;
  #L1a6f68.  v5:= v7.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a6f6c.  call `clear`(v5) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L1a6f72.  @monitorexit v7
  #Try_end1.  
  #L1a6f74.  if v3 == 0 then goto L1a6fa6;
  #L1a6f78.  v6:= length @variable v3;
  #L1a6f7a.  v5:= 0I;
  #L1a6f7c.  if v5 >= v6 then goto L1a6fa6;
  #L1a6f80.  v2:= v3[v5] @kind object;
  #Try_start2.  
  #L1a6f84.  call `close`(v2, v9) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #Try_end2.  
  #L1a6f8a.  v5:= v5 + 1;
  #L1a6f8e.  goto L1a6f7c;
  #L1a6f90.  v1:= Exception @type ^`java.io.IOException` @kind object;
  #L1a6f92.  v4:= v1 @kind object;
  #L1a6f94.  goto L1a6f28;
  #L1a6f96.  v5:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L1a6f98.  @monitorexit v7
  #Try_end3.  
  #L1a6f9a.  throw v5;
  #L1a6f9c.  v1:= Exception @type ^`java.io.IOException` @kind object;
  #L1a6f9e.  if v4 == 0 then goto L1a6f8a;
  #L1a6fa2.  v4:= v1 @kind object;
  #L1a6fa4.  goto L1a6f8a;
  #Try_start4.  
  #L1a6fa6.  v5:= v7.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a6faa.  call `close`(v5) @signature `Lokhttp3/internal/http2/Http2Writer;.close:()V` @kind virtual;
  #Try_end4.  
  #Try_start5.  
  #L1a6fb0.  v5:= v7.`okhttp3.internal.http2.Http2Connection.socket` @type ^`java.net.Socket` @kind object;
  #L1a6fb4.  call `close`(v5) @signature `Ljava/net/Socket;.close:()V` @kind virtual;
  #Try_end5.  
  #L1a6fba.  v5:= v7.`okhttp3.internal.http2.Http2Connection.writerExecutor` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L1a6fbe.  call `shutdown`(v5) @signature `Ljava/util/concurrent/ScheduledExecutorService;.shutdown:()V` @kind interface;
  #L1a6fc4.  v5:= v7.`okhttp3.internal.http2.Http2Connection.pushExecutor` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L1a6fc8.  call `shutdown`(v5) @signature `Ljava/util/concurrent/ExecutorService;.shutdown:()V` @kind interface;
  #L1a6fce.  if v4 == 0 then goto L1a6fe4;
  #L1a6fd2.  throw v4;
  #L1a6fd4.  v1:= Exception @type ^`java.io.IOException` @kind object;
  #L1a6fd6.  if v4 != 0 then goto L1a6fb0;
  #L1a6fda.  v4:= v1 @kind object;
  #L1a6fdc.  goto L1a6fb0;
  #L1a6fde.  v1:= Exception @type ^`java.io.IOException` @kind object;
  #L1a6fe0.  v4:= v1 @kind object;
  #L1a6fe2.  goto L1a6fba;
  #L1a6fe4.  return @kind void;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L1a6f90;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a6f96;
  catch `java.io.IOException` @[Try_start2..Try_end2] goto L1a6f9c;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L1a6f96;
  catch `java.io.IOException` @[Try_start4..Try_end4] goto L1a6fd4;
  catch `java.io.IOException` @[Try_start5..Try_end5] goto L1a6fde;
}
procedure `void` `flush`(`okhttp3.internal.http2.Http2Connection` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a703c.  v0:= v1.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a7040.  call `flush`(v0) @signature `Lokhttp3/internal/http2/Http2Writer;.flush:()V` @kind virtual;
  #L1a7046.  return @kind void;
}
procedure `okhttp3.Protocol` `getProtocol`(`okhttp3.internal.http2.Http2Connection` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.getProtocol:()Lokhttp3/Protocol;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a7058.  v0:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L1a705c.  return v0 @kind object;
}
procedure `okhttp3.internal.http2.Http2Stream` `getStream`(`okhttp3.internal.http2.Http2Connection` v2 @kind this, `int` v3 @name `id`) @signature `Lokhttp3/internal/http2/Http2Connection;.getStream:(I)Lokhttp3/internal/http2/Http2Stream;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a7070.  @monitorenter v2
  #Try_start0.  
  #L1a7072.  v0:= v2.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a7076.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a707c.  v1:= temp @kind object;
  #L1a707e.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1a7084.  v0:= temp @kind object;
  #L1a7086.  v0:= (`okhttp3.internal.http2.Http2Stream`) v0 @kind object;
  #Try_end0.  
  #L1a708a.  @monitorexit v2
  #L1a708c.  return v0 @kind object;
  #L1a708e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a7090.  @monitorexit v2
  #L1a7092.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a708e;
}
procedure `boolean` `isShutdown`(`okhttp3.internal.http2.Http2Connection` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.isShutdown:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a70b0.  @monitorenter v1
  #Try_start0.  
  #L1a70b2.  v0:= v1.`okhttp3.internal.http2.Http2Connection.shutdown` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L1a70b6.  @monitorexit v1
  #L1a70b8.  return v0;
  #L1a70ba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a70bc.  @monitorexit v1
  #L1a70be.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a70ba;
}
procedure `int` `maxConcurrentStreams`(`okhttp3.internal.http2.Http2Connection` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.maxConcurrentStreams:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a70dc.  @monitorenter v2
  #Try_start0.  
  #L1a70de.  v0:= v2.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a70e2.  v1:= 2147483647I;
  #L1a70e8.  call temp:= `getMaxConcurrentStreams`(v0, v1) @signature `Lokhttp3/internal/http2/Settings;.getMaxConcurrentStreams:(I)I` @kind virtual;
  #Try_end0.  
  #L1a70ee.  v0:= temp;
  #L1a70f0.  @monitorexit v2
  #L1a70f2.  return v0;
  #L1a70f4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a70f6.  @monitorexit v2
  #L1a70f8.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a70f4;
}
procedure `okhttp3.internal.http2.Http2Stream` `newStream`(`okhttp3.internal.http2.Http2Connection` v1 @kind this, `java.util.List` v2 @kind object, `boolean` v3 @name `out`) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(Ljava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a7118.  v0:= 0I;
  #L1a711a.  call temp:= `newStream`(v1, v0, v2, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(ILjava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @kind direct;
  #L1a7120.  v0:= temp @kind object;
  #L1a7122.  return v0 @kind object;
}
procedure `int` `openStreamCount`(`okhttp3.internal.http2.Http2Connection` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.openStreamCount:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a7134.  @monitorenter v1
  #Try_start0.  
  #L1a7136.  v0:= v1.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a713a.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #Try_end0.  
  #L1a7140.  v0:= temp;
  #L1a7142.  @monitorexit v1
  #L1a7144.  return v0;
  #L1a7146.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a7148.  @monitorexit v1
  #L1a714a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a7146;
}
procedure `void` `pushDataLater`(`okhttp3.internal.http2.Http2Connection` v9 @kind this, `int` v10 @name `streamId`, `okio.BufferedSource` v11 @kind object @name `source`, `int` v12 @name `byteCount`, `boolean` v13 @name `inFinished`) @signature `Lokhttp3/internal/http2/Http2Connection;.pushDataLater:(ILokio/BufferedSource;IZ)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1a7168.  v5:= new `okio.Buffer`;
  #L1a716c.  call `<init>`(v5) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1a7172.  v0:= (`long`) v12 @kind i2l;
  #L1a7174.  call `require`(v11, v0) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L1a717a.  v0:= (`long`) v12 @kind i2l;
  #L1a717c.  call temp:= `read`(v11, v5, v0) @signature `Lokio/BufferedSource;.read:(Lokio/Buffer;J)J` @kind interface;
  #L1a7182.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1a7188.  v0:= temp @kind wide;
  #L1a718a.  v2:= (`long`) v12 @kind i2l;
  #L1a718c.  v0:= lcmp(v0, v2);
  #L1a7190.  if v0 == 0 then goto L1a71d6;
  #L1a7194.  v0:= new `java.io.IOException`;
  #L1a7198.  v1:= new `java.lang.StringBuilder`;
  #L1a719c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1a71a2.  call temp:= `size`(v5) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1a71a8.  v2:= temp @kind wide;
  #L1a71aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a71b0.  v1:= temp @kind object;
  #L1a71b2.  v2:= " != " @kind object;
  #L1a71b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a71bc.  v1:= temp @kind object;
  #L1a71be.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a71c4.  v1:= temp @kind object;
  #L1a71c6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a71cc.  v1:= temp @kind object;
  #L1a71ce.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a71d4.  throw v0;
  #L1a71d6.  v8:= v9.`okhttp3.internal.http2.Http2Connection.pushExecutor` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L1a71da.  v0:= new `okhttp3.internal.http2.Http2Connection$5`;
  #L1a71de.  v2:= "OkHttp %s Push Data[%s]" @kind object;
  #L1a71e2.  v1:= 2I;
  #L1a71e4.  v3:= new `java.lang.Object`[v1];
  #L1a71e8.  v1:= 0I;
  #L1a71ea.  v4:= v9.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a71ee.  v3[v1]:= v4 @kind object;
  #L1a71f2.  v1:= 1I;
  #L1a71f4.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a71fa.  v4:= temp @kind object;
  #L1a71fc.  v3[v1]:= v4 @kind object;
  #L1a7200.  v1:= v9 @kind object;
  #L1a7202.  v4:= v10;
  #L1a7204.  v6:= v12;
  #L1a7206.  v7:= v13;
  #L1a7208.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lokhttp3/internal/http2/Http2Connection$5;.<init>:(Lokhttp3/internal/http2/Http2Connection;Ljava/lang/String;[Ljava/lang/Object;ILokio/Buffer;IZ)V` @kind direct;
  #L1a720e.  call `execute`(v8, v0) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L1a7214.  return @kind void;
}
procedure `void` `pushHeadersLater`(`okhttp3.internal.http2.Http2Connection` v8 @kind this, `int` v9 @name `streamId`, `java.util.List` v10 @kind object, `boolean` v11 @name `inFinished`) @signature `Lokhttp3/internal/http2/Http2Connection;.pushHeadersLater:(ILjava/util/List;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #Try_start0.  
  #L1a7228.  v7:= v8.`okhttp3.internal.http2.Http2Connection.pushExecutor` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L1a722c.  v0:= new `okhttp3.internal.http2.Http2Connection$4`;
  #L1a7230.  v2:= "OkHttp %s Push Headers[%s]" @kind object;
  #L1a7234.  v1:= 2I;
  #L1a7236.  v3:= new `java.lang.Object`[v1];
  #L1a723a.  v1:= 0I;
  #L1a723c.  v4:= v8.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a7240.  v3[v1]:= v4 @kind object;
  #L1a7244.  v1:= 1I;
  #L1a7246.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a724c.  v4:= temp @kind object;
  #L1a724e.  v3[v1]:= v4 @kind object;
  #L1a7252.  v1:= v8 @kind object;
  #L1a7254.  v4:= v9;
  #L1a7256.  v5:= v10 @kind object;
  #L1a7258.  v6:= v11;
  #L1a725a.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/internal/http2/Http2Connection$4;.<init>:(Lokhttp3/internal/http2/Http2Connection;Ljava/lang/String;[Ljava/lang/Object;ILjava/util/List;Z)V` @kind direct;
  #L1a7260.  call `execute`(v7, v0) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #Try_end0.  
  #L1a7266.  return @kind void;
  #L1a7268.  v0:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L1a726a.  goto L1a7266;
  catch `java.util.concurrent.RejectedExecutionException` @[Try_start0..Try_end0] goto L1a7268;
}
procedure `void` `pushRequestLater`(`okhttp3.internal.http2.Http2Connection` v7 @kind this, `int` v8 @name `streamId`, `java.util.List` v9 @kind object) @signature `Lokhttp3/internal/http2/Http2Connection;.pushRequestLater:(ILjava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a728c.  @monitorenter v7
  #Try_start0.  
  #L1a728e.  v0:= v7.`okhttp3.internal.http2.Http2Connection.currentPushRequests` @type ^`java.util.Set` @kind object;
  #L1a7292.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a7298.  v1:= temp @kind object;
  #L1a729a.  call temp:= `contains`(v0, v1) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L1a72a0.  v0:= temp;
  #L1a72a2.  if v0 == 0 then goto L1a72b4;
  #L1a72a6.  v0:= `@@okhttp3.internal.http2.ErrorCode.PROTOCOL_ERROR` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a72aa.  call `writeSynResetLater`(v7, v8, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynResetLater:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a72b0.  @monitorexit v7
  #L1a72b2.  return @kind void;
  #L1a72b4.  v0:= v7.`okhttp3.internal.http2.Http2Connection.currentPushRequests` @type ^`java.util.Set` @kind object;
  #L1a72b8.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a72be.  v1:= temp @kind object;
  #L1a72c0.  call temp:= `add`(v0, v1) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1a72c6.  @monitorexit v7
  #Try_end0.  
  #Try_start1.  
  #L1a72c8.  v6:= v7.`okhttp3.internal.http2.Http2Connection.pushExecutor` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L1a72cc.  v0:= new `okhttp3.internal.http2.Http2Connection$3`;
  #L1a72d0.  v2:= "OkHttp %s Push Request[%s]" @kind object;
  #L1a72d4.  v1:= 2I;
  #L1a72d6.  v3:= new `java.lang.Object`[v1];
  #L1a72da.  v1:= 0I;
  #L1a72dc.  v4:= v7.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a72e0.  v3[v1]:= v4 @kind object;
  #L1a72e4.  v1:= 1I;
  #L1a72e6.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a72ec.  v4:= temp @kind object;
  #L1a72ee.  v3[v1]:= v4 @kind object;
  #L1a72f2.  v1:= v7 @kind object;
  #L1a72f4.  v4:= v8;
  #L1a72f6.  v5:= v9 @kind object;
  #L1a72f8.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/http2/Http2Connection$3;.<init>:(Lokhttp3/internal/http2/Http2Connection;Ljava/lang/String;[Ljava/lang/Object;ILjava/util/List;)V` @kind direct;
  #L1a72fe.  call `execute`(v6, v0) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #Try_end1.  
  #L1a7304.  goto L1a72b2;
  #L1a7306.  v0:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L1a7308.  goto L1a72b2;
  #L1a730a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start2.  
  #L1a730c.  @monitorexit v7
  #Try_end2.  
  #L1a730e.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a730a;
  catch `java.util.concurrent.RejectedExecutionException` @[Try_start1..Try_end1] goto L1a7306;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L1a730a;
}
procedure `void` `pushResetLater`(`okhttp3.internal.http2.Http2Connection` v7 @kind this, `int` v8 @name `streamId`, `okhttp3.internal.http2.ErrorCode` v9 @kind object @name `errorCode`) @signature `Lokhttp3/internal/http2/Http2Connection;.pushResetLater:(ILokhttp3/internal/http2/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a7340.  v6:= v7.`okhttp3.internal.http2.Http2Connection.pushExecutor` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L1a7344.  v0:= new `okhttp3.internal.http2.Http2Connection$6`;
  #L1a7348.  v2:= "OkHttp %s Push Reset[%s]" @kind object;
  #L1a734c.  v1:= 2I;
  #L1a734e.  v3:= new `java.lang.Object`[v1];
  #L1a7352.  v1:= 0I;
  #L1a7354.  v4:= v7.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a7358.  v3[v1]:= v4 @kind object;
  #L1a735c.  v1:= 1I;
  #L1a735e.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a7364.  v4:= temp @kind object;
  #L1a7366.  v3[v1]:= v4 @kind object;
  #L1a736a.  v1:= v7 @kind object;
  #L1a736c.  v4:= v8;
  #L1a736e.  v5:= v9 @kind object;
  #L1a7370.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/http2/Http2Connection$6;.<init>:(Lokhttp3/internal/http2/Http2Connection;Ljava/lang/String;[Ljava/lang/Object;ILokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L1a7376.  call `execute`(v6, v0) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L1a737c.  return @kind void;
}
procedure `okhttp3.internal.http2.Http2Stream` `pushStream`(`okhttp3.internal.http2.Http2Connection` v2 @kind this, `int` v3 @name `associatedStreamId`, `java.util.List` v4 @kind object, `boolean` v5 @name `out`) @signature `Lokhttp3/internal/http2/Http2Connection;.pushStream:(ILjava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a7390.  v0:= v2.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` @kind boolean;
  #L1a7394.  if v0 == 0 then goto L1a73a8;
  #L1a7398.  v0:= new `java.lang.IllegalStateException`;
  #L1a739c.  v1:= "Client cannot push requests." @kind object;
  #L1a73a0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a73a6.  throw v0;
  #L1a73a8.  call temp:= `newStream`(v2, v3, v4, v5) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(ILjava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @kind direct;
  #L1a73ae.  v0:= temp @kind object;
  #L1a73b0.  return v0 @kind object;
}
procedure `boolean` `pushedStream`(`okhttp3.internal.http2.Http2Connection` v1 @kind this, `int` v2 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Connection;.pushedStream:(I)Z` @AccessFlag  {
    temp;
    v0;

  #L1a73c4.  if v2 == 0 then goto L1a73d4;
  #L1a73c8.  v0:= v2 ^& 1;
  #L1a73cc.  if v0 != 0 then goto L1a73d4;
  #L1a73d0.  v0:= 1I;
  #L1a73d2.  return v0;
  #L1a73d4.  v0:= 0I;
  #L1a73d6.  goto L1a73d2;
}
procedure `okhttp3.internal.http2.Http2Stream` `removeStream`(`okhttp3.internal.http2.Http2Connection` v3 @kind this, `int` v4 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a73e8.  @monitorenter v3
  #Try_start0.  
  #L1a73ea.  v1:= v3.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a73ee.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a73f4.  v2:= temp @kind object;
  #L1a73f6.  call temp:= `remove`(v1, v2) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1a73fc.  v0:= temp @kind object;
  #L1a73fe.  v0:= (`okhttp3.internal.http2.Http2Stream`) v0 @kind object;
  #L1a7402.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #Try_end0.  
  #L1a7408.  @monitorexit v3
  #L1a740a.  return v0 @kind object;
  #L1a740c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a740e.  @monitorexit v3
  #L1a7410.  throw v1;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a740c;
}
procedure `void` `setSettings`(`okhttp3.internal.http2.Http2Connection` v2 @kind this, `okhttp3.internal.http2.Settings` v3 @kind object @name `settings`) @signature `Lokhttp3/internal/http2/Http2Connection;.setSettings:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a7430.  v1:= v2.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a7434.  @monitorenter v1
  #Try_start0.  
  #L1a7436.  @monitorenter v2
  #Try_end0.  
  #Try_start1.  
  #L1a7438.  v0:= v2.`okhttp3.internal.http2.Http2Connection.shutdown` @type ^`boolean` @kind boolean;
  #L1a743c.  if v0 == 0 then goto L1a7458;
  #L1a7440.  v0:= new `okhttp3.internal.http2.ConnectionShutdownException`;
  #L1a7444.  call `<init>`(v0) @signature `Lokhttp3/internal/http2/ConnectionShutdownException;.<init>:()V` @kind direct;
  #L1a744a.  throw v0;
  #L1a744c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a744e.  @monitorexit v2
  #Try_end1.  
  #Try_start2.  
  #L1a7450.  throw v0;
  #L1a7452.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a7454.  @monitorexit v1
  #Try_end2.  
  #L1a7456.  throw v0;
  #Try_start3.  
  #L1a7458.  v0:= v2.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a745c.  call `merge`(v0, v3) @signature `Lokhttp3/internal/http2/Settings;.merge:(Lokhttp3/internal/http2/Settings;)V` @kind virtual;
  #L1a7462.  @monitorexit v2
  #Try_end3.  
  #Try_start4.  
  #L1a7464.  v0:= v2.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a7468.  call `settings`(v0, v3) @signature `Lokhttp3/internal/http2/Http2Writer;.settings:(Lokhttp3/internal/http2/Settings;)V` @kind virtual;
  #L1a746e.  @monitorexit v1
  #Try_end4.  
  #L1a7470.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a7452;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a744c;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L1a7452;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L1a744c;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L1a7452;
}
procedure `void` `shutdown`(`okhttp3.internal.http2.Http2Connection` v4 @kind this, `okhttp3.internal.http2.ErrorCode` v5 @kind object @name `statusCode`) @signature `Lokhttp3/internal/http2/Http2Connection;.shutdown:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a74b4.  v2:= v4.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a74b8.  @monitorenter v2
  #Try_start0.  
  #L1a74ba.  @monitorenter v4
  #Try_end0.  
  #Try_start1.  
  #L1a74bc.  v1:= v4.`okhttp3.internal.http2.Http2Connection.shutdown` @type ^`boolean` @kind boolean;
  #L1a74c0.  if v1 == 0 then goto L1a74ca;
  #L1a74c4.  @monitorexit v4
  #Try_end1.  
  #Try_start2.  
  #L1a74c6.  @monitorexit v2
  #Try_end2.  
  #L1a74c8.  return @kind void;
  #L1a74ca.  v1:= 1I;
  #Try_start3.  
  #L1a74cc.  v4.`okhttp3.internal.http2.Http2Connection.shutdown` @type ^`boolean` := v1 @kind boolean;
  #L1a74d0.  v0:= v4.`okhttp3.internal.http2.Http2Connection.lastGoodStreamId` @type ^`int`;
  #L1a74d4.  @monitorexit v4
  #Try_end3.  
  #Try_start4.  
  #L1a74d6.  v1:= v4.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a74da.  v3:= `@@okhttp3.internal.Util.EMPTY_BYTE_ARRAY` @type ^`byte`[] @kind object;
  #L1a74de.  call `goAway`(v1, v0, v5, v3) @signature `Lokhttp3/internal/http2/Http2Writer;.goAway:(ILokhttp3/internal/http2/ErrorCode;[B)V` @kind virtual;
  #L1a74e4.  @monitorexit v2
  #L1a74e6.  goto L1a74c8;
  #L1a74e8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a74ea.  @monitorexit v2
  #Try_end4.  
  #L1a74ec.  throw v1;
  #L1a74ee.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start5.  
  #L1a74f0.  @monitorexit v4
  #Try_end5.  
  #Try_start6.  
  #L1a74f2.  throw v1;
  #Try_end6.  
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a74e8;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a74ee;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L1a74e8;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L1a74ee;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L1a74e8;
  catch `java.lang.Throwable` @[Try_start5..Try_end5] goto L1a74ee;
  catch `java.lang.Throwable` @[Try_start6..Try_end6] goto L1a74e8;
}
procedure `void` `start`(`okhttp3.internal.http2.Http2Connection` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.start:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a7544.  v0:= 1I;
  #L1a7546.  call `start`(v1, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.start:(Z)V` @kind virtual;
  #L1a754c.  return @kind void;
}
procedure `void` `start`(`okhttp3.internal.http2.Http2Connection` v6 @kind this, `boolean` v7 @name `sendConnectionPreface`) @signature `Lokhttp3/internal/http2/Http2Connection;.start:(Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1a7560.  v3:= 65535I;
  #L1a7566.  if v7 == 0 then goto L1a75a4;
  #L1a756a.  v1:= v6.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a756e.  call `connectionPreface`(v1) @signature `Lokhttp3/internal/http2/Http2Writer;.connectionPreface:()V` @kind virtual;
  #L1a7574.  v1:= v6.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a7578.  v2:= v6.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a757c.  call `settings`(v1, v2) @signature `Lokhttp3/internal/http2/Http2Writer;.settings:(Lokhttp3/internal/http2/Settings;)V` @kind virtual;
  #L1a7582.  v1:= v6.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a7586.  call temp:= `getInitialWindowSize`(v1) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L1a758c.  v0:= temp;
  #L1a758e.  if v0 == v3 then goto L1a75a4;
  #L1a7592.  v1:= v6.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a7596.  v2:= 0I;
  #L1a7598.  v3:= v0 - v3 @kind int;
  #L1a759c.  v4:= (`long`) v3 @kind i2l;
  #L1a759e.  call `windowUpdate`(v1, v2, v4) @signature `Lokhttp3/internal/http2/Http2Writer;.windowUpdate:(IJ)V` @kind virtual;
  #L1a75a4.  v1:= new `java.lang.Thread`;
  #L1a75a8.  v2:= v6.`okhttp3.internal.http2.Http2Connection.readerRunnable` @type ^`okhttp3.internal.http2.Http2Connection$ReaderRunnable` @kind object;
  #L1a75ac.  call `<init>`(v1, v2) @signature `Ljava/lang/Thread;.<init>:(Ljava/lang/Runnable;)V` @kind direct;
  #L1a75b2.  call `start`(v1) @signature `Ljava/lang/Thread;.start:()V` @kind virtual;
  #L1a75b8.  return @kind void;
}
procedure `void` `writeData`(`okhttp3.internal.http2.Http2Connection` v10 @kind this, `int` v11 @name `streamId`, `boolean` v12 @name `outFinished`, `okio.Buffer` v13 @kind object @name `buffer`, `long` v14 @name `byteCount`) @signature `Lokhttp3/internal/http2/Http2Connection;.writeData:(IZLokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1a75cc.  v3:= 0I;
  #L1a75ce.  v8:= 0L;
  #L1a75d2.  v2:= lcmp(v14, v8);
  #L1a75d6.  if v2 != 0 then goto L1a7632;
  #L1a75da.  v2:= v10.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a75de.  call `data`(v2, v12, v11, v13, v3) @signature `Lokhttp3/internal/http2/Http2Writer;.data:(ZILokio/Buffer;I)V` @kind virtual;
  #L1a75e4.  return @kind void;
  #Try_start0.  
  #L1a75e6.  v4:= v10.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L1a75ea.  call temp:= `min`(v14, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1a75f0.  v4:= temp @kind wide;
  #L1a75f2.  v1:= (`int`) v4 @kind l2i;
  #L1a75f4.  v2:= v10.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a75f8.  call temp:= `maxDataLength`(v2) @signature `Lokhttp3/internal/http2/Http2Writer;.maxDataLength:()I` @kind virtual;
  #L1a75fe.  v2:= temp;
  #L1a7600.  call temp:= `min`(v1, v2) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1a7606.  v1:= temp;
  #L1a7608.  v4:= v10.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L1a760c.  v6:= (`long`) v1 @kind i2l;
  #L1a760e.  v4:= v4 - v6 @kind long;
  #L1a7610.  v10.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` := v4 @kind wide;
  #L1a7614.  @monitorexit v10
  #Try_end0.  
  #L1a7616.  v4:= (`long`) v1 @kind i2l;
  #L1a7618.  v14:= v14 - v4 @kind long;
  #L1a761a.  v4:= v10.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a761e.  if v12 == 0 then goto L1a768c;
  #L1a7622.  v2:= lcmp(v14, v8);
  #L1a7626.  if v2 != 0 then goto L1a768c;
  #L1a762a.  v2:= 1I;
  #L1a762c.  call `data`(v4, v2, v11, v13, v1) @signature `Lokhttp3/internal/http2/Http2Writer;.data:(ZILokio/Buffer;I)V` @kind virtual;
  #L1a7632.  v2:= lcmp(v14, v8);
  #L1a7636.  if v2 <= 0 then goto L1a75e4;
  #L1a763a.  @monitorenter v10
  #Try_start1.  
  #L1a763c.  v4:= v10.`okhttp3.internal.http2.Http2Connection.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L1a7640.  v2:= lcmp(v4, v8);
  #L1a7644.  if v2 > 0 then goto L1a75e6;
  #L1a7648.  v2:= v10.`okhttp3.internal.http2.Http2Connection.streams` @type ^`java.util.Map` @kind object;
  #L1a764c.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a7652.  v4:= temp @kind object;
  #L1a7654.  call temp:= `containsKey`(v2, v4) @signature `Ljava/util/Map;.containsKey:(Ljava/lang/Object;)Z` @kind interface;
  #L1a765a.  v2:= temp;
  #L1a765c.  if v2 != 0 then goto L1a7684;
  #L1a7660.  v2:= new `java.io.IOException`;
  #L1a7664.  v3:= "stream closed" @kind object;
  #L1a7668.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a766e.  throw v2;
  #Try_end1.  
  #L1a7670.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #Try_start2.  
  #L1a7672.  v2:= new `java.io.InterruptedIOException`;
  #L1a7676.  call `<init>`(v2) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L1a767c.  throw v2;
  #L1a767e.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a7680.  @monitorexit v10
  #Try_end2.  
  #L1a7682.  throw v2;
  #Try_start3.  
  #L1a7684.  call `wait`(v10) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #Try_end3.  
  #L1a768a.  goto L1a763c;
  #L1a768c.  v2:= v3;
  #L1a768e.  goto L1a762c;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a767e;
  catch `java.lang.InterruptedException` @[Try_start1..Try_end1] goto L1a7670;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a767e;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L1a767e;
  catch `java.lang.InterruptedException` @[Try_start3..Try_end3] goto L1a7670;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L1a767e;
}
procedure `void` `writePing`(`okhttp3.internal.http2.Http2Connection` v3 @kind this, `boolean` v4 @name `reply`, `int` v5 @name `payload1`, `int` v6 @name `payload2`) @signature `Lokhttp3/internal/http2/Http2Connection;.writePing:(ZII)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a76c8.  if v4 != 0 then goto L1a76ec;
  #L1a76cc.  @monitorenter v3
  #Try_start0.  
  #L1a76ce.  v1:= v3.`okhttp3.internal.http2.Http2Connection.awaitingPong` @type ^`boolean` @kind boolean;
  #L1a76d2.  v2:= 1I;
  #L1a76d4.  v3.`okhttp3.internal.http2.Http2Connection.awaitingPong` @type ^`boolean` := v2 @kind boolean;
  #L1a76d8.  @monitorexit v3
  #Try_end0.  
  #L1a76da.  if v1 == 0 then goto L1a76ec;
  #L1a76de.  call `failConnection`(v3) @signature `Lokhttp3/internal/http2/Http2Connection;.failConnection:()V` @kind direct;
  #L1a76e4.  return @kind void;
  #L1a76e6.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L1a76e8.  @monitorexit v3
  #Try_end1.  
  #L1a76ea.  throw v2;
  #Try_start2.  
  #L1a76ec.  v2:= v3.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a76f0.  call `ping`(v2, v4, v5, v6) @signature `Lokhttp3/internal/http2/Http2Writer;.ping:(ZII)V` @kind virtual;
  #Try_end2.  
  #L1a76f6.  goto L1a76e4;
  #L1a76f8.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1a76fa.  call `failConnection`(v3) @signature `Lokhttp3/internal/http2/Http2Connection;.failConnection:()V` @kind direct;
  #L1a7700.  goto L1a76e4;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a76e6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a76e6;
  catch `java.io.IOException` @[Try_start2..Try_end2] goto L1a76f8;
}
procedure `void` `writePingAndAwaitPong`(`okhttp3.internal.http2.Http2Connection` v3 @kind this) @signature `Lokhttp3/internal/http2/Http2Connection;.writePingAndAwaitPong:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a7734.  v0:= 0I;
  #L1a7736.  v1:= 1330343787I;
  #L1a773c.  v2:= -257978967I;
  #L1a7742.  call `writePing`(v3, v0, v1, v2) @signature `Lokhttp3/internal/http2/Http2Connection;.writePing:(ZII)V` @kind virtual;
  #L1a7748.  call `awaitPong`(v3) @signature `Lokhttp3/internal/http2/Http2Connection;.awaitPong:()V` @kind virtual;
  #L1a774e.  return @kind void;
}
procedure `void` `writeSynReply`(`okhttp3.internal.http2.Http2Connection` v1 @kind this, `int` v2 @name `streamId`, `boolean` v3 @name `outFinished`, `java.util.List` v4 @kind object) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynReply:(IZLjava/util/List;)V` @AccessFlag  {
    temp;
    v0;

  #L1a7760.  v0:= v1.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a7764.  call `synReply`(v0, v3, v2, v4) @signature `Lokhttp3/internal/http2/Http2Writer;.synReply:(ZILjava/util/List;)V` @kind virtual;
  #L1a776a.  return @kind void;
}
procedure `void` `writeSynReset`(`okhttp3.internal.http2.Http2Connection` v1 @kind this, `int` v2 @name `streamId`, `okhttp3.internal.http2.ErrorCode` v3 @kind object @name `statusCode`) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynReset:(ILokhttp3/internal/http2/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;

  #L1a777c.  v0:= v1.`okhttp3.internal.http2.Http2Connection.writer` @type ^`okhttp3.internal.http2.Http2Writer` @kind object;
  #L1a7780.  call `rstStream`(v0, v2, v3) @signature `Lokhttp3/internal/http2/Http2Writer;.rstStream:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a7786.  return @kind void;
}
procedure `void` `writeSynResetLater`(`okhttp3.internal.http2.Http2Connection` v7 @kind this, `int` v8 @name `streamId`, `okhttp3.internal.http2.ErrorCode` v9 @kind object @name `errorCode`) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynResetLater:(ILokhttp3/internal/http2/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #Try_start0.  
  #L1a7798.  v6:= v7.`okhttp3.internal.http2.Http2Connection.writerExecutor` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L1a779c.  v0:= new `okhttp3.internal.http2.Http2Connection$1`;
  #L1a77a0.  v2:= "OkHttp %s stream %d" @kind object;
  #L1a77a4.  v1:= 2I;
  #L1a77a6.  v3:= new `java.lang.Object`[v1];
  #L1a77aa.  v1:= 0I;
  #L1a77ac.  v4:= v7.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a77b0.  v3[v1]:= v4 @kind object;
  #L1a77b4.  v1:= 1I;
  #L1a77b6.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a77bc.  v4:= temp @kind object;
  #L1a77be.  v3[v1]:= v4 @kind object;
  #L1a77c2.  v1:= v7 @kind object;
  #L1a77c4.  v4:= v8;
  #L1a77c6.  v5:= v9 @kind object;
  #L1a77c8.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/http2/Http2Connection$1;.<init>:(Lokhttp3/internal/http2/Http2Connection;Ljava/lang/String;[Ljava/lang/Object;ILokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L1a77ce.  call `execute`(v6, v0) @signature `Ljava/util/concurrent/ScheduledExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #Try_end0.  
  #L1a77d4.  return @kind void;
  #L1a77d6.  v0:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L1a77d8.  goto L1a77d4;
  catch `java.util.concurrent.RejectedExecutionException` @[Try_start0..Try_end0] goto L1a77d6;
}
procedure `void` `writeWindowUpdateLater`(`okhttp3.internal.http2.Http2Connection` v8 @kind this, `int` v9 @name `streamId`, `long` v10 @name `unacknowledgedBytesRead`) @signature `Lokhttp3/internal/http2/Http2Connection;.writeWindowUpdateLater:(IJ)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #Try_start0.  
  #L1a77fc.  v0:= v8.`okhttp3.internal.http2.Http2Connection.writerExecutor` @type ^`java.util.concurrent.ScheduledExecutorService` @kind object;
  #L1a7800.  v1:= new `okhttp3.internal.http2.Http2Connection$2`;
  #L1a7804.  v3:= "OkHttp Window Update %s stream %d" @kind object;
  #L1a7808.  v2:= 2I;
  #L1a780a.  v4:= new `java.lang.Object`[v2];
  #L1a780e.  v2:= 0I;
  #L1a7810.  v5:= v8.`okhttp3.internal.http2.Http2Connection.hostname` @type ^`java.lang.String` @kind object;
  #L1a7814.  v4[v2]:= v5 @kind object;
  #L1a7818.  v2:= 1I;
  #L1a781a.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a7820.  v5:= temp @kind object;
  #L1a7822.  v4[v2]:= v5 @kind object;
  #L1a7826.  v2:= v8 @kind object;
  #L1a7828.  v5:= v9;
  #L1a782a.  v6:= v10 @kind wide;
  #L1a782c.  call `<init>`(v1, v2, v3, v4, v5, v6) @signature `Lokhttp3/internal/http2/Http2Connection$2;.<init>:(Lokhttp3/internal/http2/Http2Connection;Ljava/lang/String;[Ljava/lang/Object;IJ)V` @kind direct;
  #L1a7832.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/ScheduledExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #Try_end0.  
  #L1a7838.  return @kind void;
  #L1a783a.  v0:= Exception @type ^`java.util.concurrent.RejectedExecutionException` @kind object;
  #L1a783c.  goto L1a7838;
  catch `java.util.concurrent.RejectedExecutionException` @[Try_start0..Try_end0] goto L1a783a;
}
