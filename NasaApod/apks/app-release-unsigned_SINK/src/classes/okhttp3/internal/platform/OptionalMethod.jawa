record `okhttp3.internal.platform.OptionalMethod` @kind class @AccessFlag  {
  `java.lang.String` `okhttp3.internal.platform.OptionalMethod.methodName` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `okhttp3.internal.platform.OptionalMethod.methodParams` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `okhttp3.internal.platform.OptionalMethod.returnType` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.platform.OptionalMethod` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object @name `methodName`, `java.lang.Class`[] v3 @kind object @name `methodParams`) @signature `Lokhttp3/internal/platform/OptionalMethod;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1aa1b4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1aa1ba.  v0.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` := v1 @kind object;
  #L1aa1be.  v0.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` := v2 @kind object;
  #L1aa1c2.  v0.`okhttp3.internal.platform.OptionalMethod.methodParams` @type ^`java.lang.Class`[] := v3 @kind object;
  #L1aa1c6.  return @kind void;
}
procedure `java.lang.reflect.Method` `getMethod`(`okhttp3.internal.platform.OptionalMethod` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1aa1d8.  v0:= 0I;
  #L1aa1da.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L1aa1de.  if v1 == 0 then goto L1aa218;
  #L1aa1e2.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L1aa1e6.  v2:= v3.`okhttp3.internal.platform.OptionalMethod.methodParams` @type ^`java.lang.Class`[] @kind object;
  #L1aa1ea.  call temp:= `getPublicMethod`(v4, v1, v2) @signature `Lokhttp3/internal/platform/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L1aa1f0.  v0:= temp @kind object;
  #L1aa1f2.  if v0 == 0 then goto L1aa218;
  #L1aa1f6.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` @kind object;
  #L1aa1fa.  if v1 == 0 then goto L1aa218;
  #L1aa1fe.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` @kind object;
  #L1aa202.  call temp:= `getReturnType`(v0) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L1aa208.  v2:= temp @kind object;
  #L1aa20a.  call temp:= `isAssignableFrom`(v1, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1aa210.  v1:= temp;
  #L1aa212.  if v1 != 0 then goto L1aa218;
  #L1aa216.  v0:= 0I;
  #L1aa218.  return v0 @kind object;
}
procedure `java.lang.reflect.Method` `getPublicMethod`(`java.lang.Class` v2 @kind object, `java.lang.String` v3 @kind object @name `methodName`, `java.lang.Class`[] v4 @kind object @name `parameterTypes`) @signature `Lokhttp3/internal/platform/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1aa22c.  v0:= 0I;
  #Try_start0.  
  #L1aa22e.  call temp:= `getMethod`(v2, v3, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L1aa234.  v0:= temp @kind object;
  #L1aa236.  call temp:= `getModifiers`(v0) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #Try_end0.  
  #L1aa23c.  v1:= temp;
  #L1aa23e.  v1:= v1 ^& 1;
  #L1aa242.  if v1 != 0 then goto L1aa248;
  #L1aa246.  v0:= 0I;
  #L1aa248.  return v0 @kind object;
  #L1aa24a.  v1:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L1aa24c.  goto L1aa248;
  catch `java.lang.NoSuchMethodException` @[Try_start0..Try_end0] goto L1aa24a;
}
procedure `java.lang.Object` `invoke`(`okhttp3.internal.platform.OptionalMethod` v6 @kind this, `java.lang.Object` v7 @kind object, `java.lang.Object`[] v8 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1aa270.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1aa276.  v3:= temp @kind object;
  #L1aa278.  call temp:= `getMethod`(v6, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L1aa27e.  v2:= temp @kind object;
  #L1aa280.  if v2 != 0 then goto L1aa2ce;
  #L1aa284.  v3:= new `java.lang.AssertionError`;
  #L1aa288.  v4:= new `java.lang.StringBuilder`;
  #L1aa28c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1aa292.  v5:= "Method " @kind object;
  #L1aa296.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1aa29c.  v4:= temp @kind object;
  #L1aa29e.  v5:= v6.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L1aa2a2.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1aa2a8.  v4:= temp @kind object;
  #L1aa2aa.  v5:= " not supported for object " @kind object;
  #L1aa2ae.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1aa2b4.  v4:= temp @kind object;
  #L1aa2b6.  call temp:= `append`(v4, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1aa2bc.  v4:= temp @kind object;
  #L1aa2be.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1aa2c4.  v4:= temp @kind object;
  #L1aa2c6.  call `<init>`(v3, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1aa2cc.  throw v3;
  #Try_start0.  
  #L1aa2ce.  call temp:= `invoke`(v2, v7, v8) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1aa2d4.  v3:= temp @kind object;
  #L1aa2d6.  return v3 @kind object;
  #L1aa2d8.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L1aa2da.  v1:= new `java.lang.AssertionError`;
  #L1aa2de.  v3:= new `java.lang.StringBuilder`;
  #L1aa2e2.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1aa2e8.  v4:= "Unexpectedly could not call: " @kind object;
  #L1aa2ec.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1aa2f2.  v3:= temp @kind object;
  #L1aa2f4.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1aa2fa.  v3:= temp @kind object;
  #L1aa2fc.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1aa302.  v3:= temp @kind object;
  #L1aa304.  call `<init>`(v1, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1aa30a.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1aa310.  throw v1;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L1aa2d8;
}
procedure `java.lang.Object` `invokeOptional`(`okhttp3.internal.platform.OptionalMethod` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1aa334.  v2:= 0I;
  #L1aa336.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1aa33c.  v3:= temp @kind object;
  #L1aa33e.  call temp:= `getMethod`(v4, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L1aa344.  v1:= temp @kind object;
  #L1aa346.  if v1 != 0 then goto L1aa34c;
  #L1aa34a.  return v2 @kind object;
  #Try_start0.  
  #L1aa34c.  call temp:= `invoke`(v1, v5, v6) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1aa352.  v2:= temp @kind object;
  #L1aa354.  goto L1aa34a;
  #L1aa356.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L1aa358.  goto L1aa34a;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L1aa356;
}
procedure `java.lang.Object` `invokeOptionalWithoutCheckedException`(`okhttp3.internal.platform.OptionalMethod` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptionalWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L1aa37c.  call temp:= `invokeOptional`(v4, v5, v6) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1aa382.  v3:= temp @kind object;
  #L1aa384.  return v3 @kind object;
  #L1aa386.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L1aa388.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L1aa38e.  v2:= temp @kind object;
  #L1aa390.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L1aa394.  if v3 == 0 then goto L1aa39e;
  #L1aa398.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L1aa39c.  throw v2;
  #L1aa39e.  v1:= new `java.lang.AssertionError`;
  #L1aa3a2.  v3:= "Unexpected exception" @kind object;
  #L1aa3a6.  call `<init>`(v1, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1aa3ac.  call temp:= `initCause`(v1, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1aa3b2.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L1aa386;
}
procedure `java.lang.Object` `invokeWithoutCheckedException`(`okhttp3.internal.platform.OptionalMethod` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L1aa3d4.  call temp:= `invoke`(v4, v5, v6) @signature `Lokhttp3/internal/platform/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1aa3da.  v3:= temp @kind object;
  #L1aa3dc.  return v3 @kind object;
  #L1aa3de.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L1aa3e0.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L1aa3e6.  v2:= temp @kind object;
  #L1aa3e8.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L1aa3ec.  if v3 == 0 then goto L1aa3f6;
  #L1aa3f0.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L1aa3f4.  throw v2;
  #L1aa3f6.  v1:= new `java.lang.AssertionError`;
  #L1aa3fa.  v3:= "Unexpected exception" @kind object;
  #L1aa3fe.  call `<init>`(v1, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1aa404.  call temp:= `initCause`(v1, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1aa40a.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L1aa3de;
}
procedure `boolean` `isSupported`(`okhttp3.internal.platform.OptionalMethod` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.isSupported:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1aa42c.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1aa432.  v0:= temp @kind object;
  #L1aa434.  call temp:= `getMethod`(v1, v0) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L1aa43a.  v0:= temp @kind object;
  #L1aa43c.  if v0 == 0 then goto L1aa444;
  #L1aa440.  v0:= 1I;
  #L1aa442.  return v0;
  #L1aa444.  v0:= 0I;
  #L1aa446.  goto L1aa442;
}
