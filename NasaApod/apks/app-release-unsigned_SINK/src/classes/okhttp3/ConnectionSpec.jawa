record `okhttp3.ConnectionSpec` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.ConnectionSpec.cipherSuites` @AccessFlag FINAL;
  `boolean` `okhttp3.ConnectionSpec.supportsTlsExtensions` @AccessFlag FINAL;
  `boolean` `okhttp3.ConnectionSpec.tls` @AccessFlag FINAL;
  `java.lang.String`[] `okhttp3.ConnectionSpec.tlsVersions` @AccessFlag FINAL;
}
global `okhttp3.CipherSuite`[] `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.CLEARTEXT` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.MODERN_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/ConnectionSpec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1974ac.  v7:= 4I;
  #L1974ae.  v6:= 3I;
  #L1974b0.  v5:= 2I;
  #L1974b2.  v4:= 0I;
  #L1974b4.  v3:= 1I;
  #L1974b6.  v0:= 13I;
  #L1974ba.  v0:= new `okhttp3.CipherSuite`[v0];
  #L1974be.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L1974c2.  v0[v4]:= v1 @kind object;
  #L1974c6.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L1974ca.  v0[v3]:= v1 @kind object;
  #L1974ce.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L1974d2.  v0[v5]:= v1 @kind object;
  #L1974d6.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L1974da.  v0[v6]:= v1 @kind object;
  #L1974de.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L1974e2.  v0[v7]:= v1 @kind object;
  #L1974e6.  v1:= 5I;
  #L1974e8.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L1974ec.  v0[v1]:= v2 @kind object;
  #L1974f0.  v1:= 6I;
  #L1974f2.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L1974f6.  v0[v1]:= v2 @kind object;
  #L1974fa.  v1:= 7I;
  #L1974fc.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L197500.  v0[v1]:= v2 @kind object;
  #L197504.  v1:= 8I;
  #L197508.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L19750c.  v0[v1]:= v2 @kind object;
  #L197510.  v1:= 9I;
  #L197514.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L197518.  v0[v1]:= v2 @kind object;
  #L19751c.  v1:= 10I;
  #L197520.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L197524.  v0[v1]:= v2 @kind object;
  #L197528.  v1:= 11I;
  #L19752c.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L197530.  v0[v1]:= v2 @kind object;
  #L197534.  v1:= 12I;
  #L197538.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L19753c.  v0[v1]:= v2 @kind object;
  #L197540.  `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @type ^`okhttp3.CipherSuite`[] := v0 @kind object;
  #L197544.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L197548.  call `<init>`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L19754e.  v1:= `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @type ^`okhttp3.CipherSuite`[] @kind object;
  #L197552.  call temp:= `cipherSuites`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L197558.  v0:= temp @kind object;
  #L19755a.  v1:= new `okhttp3.TlsVersion`[v7];
  #L19755e.  v2:= `@@okhttp3.TlsVersion.TLS_1_3` @type ^`okhttp3.TlsVersion` @kind object;
  #L197562.  v1[v4]:= v2 @kind object;
  #L197566.  v2:= `@@okhttp3.TlsVersion.TLS_1_2` @type ^`okhttp3.TlsVersion` @kind object;
  #L19756a.  v1[v3]:= v2 @kind object;
  #L19756e.  v2:= `@@okhttp3.TlsVersion.TLS_1_1` @type ^`okhttp3.TlsVersion` @kind object;
  #L197572.  v1[v5]:= v2 @kind object;
  #L197576.  v2:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L19757a.  v1[v6]:= v2 @kind object;
  #L19757e.  call temp:= `tlsVersions`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L197584.  v0:= temp @kind object;
  #L197586.  call temp:= `supportsTlsExtensions`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L19758c.  v0:= temp @kind object;
  #L19758e.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L197594.  v0:= temp @kind object;
  #L197596.  `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L19759a.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L19759e.  v1:= `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` @kind object;
  #L1975a2.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @kind direct;
  #L1975a8.  v1:= new `okhttp3.TlsVersion`[v3];
  #L1975ac.  v2:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L1975b0.  v1[v4]:= v2 @kind object;
  #L1975b4.  call temp:= `tlsVersions`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L1975ba.  v0:= temp @kind object;
  #L1975bc.  call temp:= `supportsTlsExtensions`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L1975c2.  v0:= temp @kind object;
  #L1975c4.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L1975ca.  v0:= temp @kind object;
  #L1975cc.  `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L1975d0.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L1975d4.  call `<init>`(v0, v4) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L1975da.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L1975e0.  v0:= temp @kind object;
  #L1975e2.  `@@okhttp3.ConnectionSpec.CLEARTEXT` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L1975e6.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec` v1 @kind this, `okhttp3.ConnectionSpec$Builder` v2 @kind object @name `builder`) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1975f8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1975fe.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L197602.  v1.`okhttp3.ConnectionSpec.tls` @type ^`boolean` := v0 @kind boolean;
  #L197606.  v0:= v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L19760a.  v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L19760e.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L197612.  v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L197616.  v0:= v2.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L19761a.  v1.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` := v0 @kind boolean;
  #L19761e.  return @kind void;
}
procedure `okhttp3.ConnectionSpec` `supportedSpec`(`okhttp3.ConnectionSpec` v7 @kind this, `javax.net.ssl.SSLSocket` v8 @kind object @name `sslSocket`, `boolean` v9 @name `isFallback`) @signature `Lokhttp3/ConnectionSpec;.supportedSpec:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L197630.  v4:= v7.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L197634.  if v4 == 0 then goto L1976c2;
  #L197638.  v4:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L19763c.  call temp:= `getEnabledCipherSuites`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L197642.  v5:= temp @kind object;
  #L197644.  v6:= v7.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L197648.  call temp:= `intersect`(v4, v5, v6) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L19764e.  v0:= temp @kind object;
  #L197650.  v4:= v7.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L197654.  if v4 == 0 then goto L1976cc;
  #L197658.  v4:= `@@okhttp3.internal.Util.NATURAL_ORDER` @type ^`java.util.Comparator` @kind object;
  #L19765c.  call temp:= `getEnabledProtocols`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L197662.  v5:= temp @kind object;
  #L197664.  v6:= v7.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L197668.  call temp:= `intersect`(v4, v5, v6) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L19766e.  v3:= temp @kind object;
  #L197670.  call temp:= `getSupportedCipherSuites`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getSupportedCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L197676.  v2:= temp @kind object;
  #L197678.  v4:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L19767c.  v5:= "TLS_FALLBACK_SCSV" @kind object;
  #L197680.  call temp:= `indexOf`(v4, v2, v5) @signature `Lokhttp3/internal/Util;.indexOf:(Ljava/util/Comparator;[Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L197686.  v1:= temp;
  #L197688.  if v9 == 0 then goto L19769e;
  #L19768c.  v4:= -1I;
  #L19768e.  if v1 == v4 then goto L19769e;
  #L197692.  v4:= v2[v1] @kind object;
  #L197696.  call temp:= `concat`(v0, v4) @signature `Lokhttp3/internal/Util;.concat:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L19769c.  v0:= temp @kind object;
  #L19769e.  v4:= new `okhttp3.ConnectionSpec$Builder`;
  #L1976a2.  call `<init>`(v4, v7) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @kind direct;
  #L1976a8.  call temp:= `cipherSuites`(v4, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L1976ae.  v4:= temp @kind object;
  #L1976b0.  call temp:= `tlsVersions`(v4, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L1976b6.  v4:= temp @kind object;
  #L1976b8.  call temp:= `build`(v4) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L1976be.  v4:= temp @kind object;
  #L1976c0.  return v4 @kind object;
  #L1976c2.  call temp:= `getEnabledCipherSuites`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L1976c8.  v0:= temp @kind object;
  #L1976ca.  goto L197650;
  #L1976cc.  call temp:= `getEnabledProtocols`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L1976d2.  v3:= temp @kind object;
  #L1976d4.  goto L197670;
}
procedure `void` `apply`(`okhttp3.ConnectionSpec` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object @name `sslSocket`, `boolean` v4 @name `isFallback`) @signature `Lokhttp3/ConnectionSpec;.apply:(Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1976e8.  call temp:= `supportedSpec`(v2, v3, v4) @signature `Lokhttp3/ConnectionSpec;.supportedSpec:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @kind direct;
  #L1976ee.  v0:= temp @kind object;
  #L1976f0.  v1:= v0.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1976f4.  if v1 == 0 then goto L197702;
  #L1976f8.  v1:= v0.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1976fc.  call `setEnabledProtocols`(v3, v1) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledProtocols:([Ljava/lang/String;)V` @kind virtual;
  #L197702.  v1:= v0.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L197706.  if v1 == 0 then goto L197714;
  #L19770a.  v1:= v0.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L19770e.  call `setEnabledCipherSuites`(v3, v1) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledCipherSuites:([Ljava/lang/String;)V` @kind virtual;
  #L197714.  return @kind void;
}
procedure `java.util.List` `cipherSuites`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L197728.  v0:= v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L19772c.  if v0 == 0 then goto L19773e;
  #L197730.  v0:= v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L197734.  call temp:= `forJavaNames`(v0) @signature `Lokhttp3/CipherSuite;.forJavaNames:([Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L19773a.  v0:= temp @kind object;
  #L19773c.  return v0 @kind object;
  #L19773e.  v0:= 0I;
  #L197740.  goto L19773c;
}
procedure `boolean` `equals`(`okhttp3.ConnectionSpec` v5 @kind this, `java.lang.Object` v6 @kind object @name `other`) @signature `Lokhttp3/ConnectionSpec;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L197754.  v2:= 1I;
  #L197756.  v1:= 0I;
  #L197758.  v3:= instanceof @variable v6 @type ^`okhttp3.ConnectionSpec` @kind boolean;
  #L19775c.  if v3 != 0 then goto L197762;
  #L197760.  return v1;
  #L197762.  if v6 != v5 then goto L19776a;
  #L197766.  v1:= v2;
  #L197768.  goto L197760;
  #L19776a.  v0:= v6 @kind object;
  #L19776c.  v0:= (`okhttp3.ConnectionSpec`) v0 @kind object;
  #L197770.  v3:= v5.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L197774.  v4:= v0.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L197778.  if v3 != v4 then goto L197760;
  #L19777c.  v3:= v5.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L197780.  if v3 == 0 then goto L1977b8;
  #L197784.  v3:= v5.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L197788.  v4:= v0.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L19778c.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L197792.  v3:= temp;
  #L197794.  if v3 == 0 then goto L197760;
  #L197798.  v3:= v5.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L19779c.  v4:= v0.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1977a0.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1977a6.  v3:= temp;
  #L1977a8.  if v3 == 0 then goto L197760;
  #L1977ac.  v3:= v5.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L1977b0.  v4:= v0.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L1977b4.  if v3 != v4 then goto L197760;
  #L1977b8.  v1:= v2;
  #L1977ba.  goto L197760;
}
procedure `int` `hashCode`(`okhttp3.ConnectionSpec` v3 @kind this) @signature `Lokhttp3/ConnectionSpec;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1977cc.  v0:= 17I;
  #L1977d0.  v1:= v3.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L1977d4.  if v1 == 0 then goto L19780e;
  #L1977d8.  v1:= v3.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1977dc.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L1977e2.  v1:= temp;
  #L1977e4.  v0:= v1 + 527;
  #L1977e8.  v1:= v0 * 31;
  #L1977ec.  v2:= v3.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1977f0.  call temp:= `hashCode`(v2) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L1977f6.  v2:= temp;
  #L1977f8.  v0:= v1 + v2 @kind int;
  #L1977fc.  v2:= v0 * 31;
  #L197800.  v1:= v3.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L197804.  if v1 == 0 then goto L197810;
  #L197808.  v1:= 0I;
  #L19780a.  v0:= v2 + v1 @kind int;
  #L19780e.  return v0;
  #L197810.  v1:= 1I;
  #L197812.  goto L19780a;
}
procedure `boolean` `isCompatible`(`okhttp3.ConnectionSpec` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object @name `socket`) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L197824.  v0:= 0I;
  #L197826.  v1:= v4.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L19782a.  if v1 != 0 then goto L197830;
  #L19782e.  return v0;
  #L197830.  v1:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L197834.  if v1 == 0 then goto L197854;
  #L197838.  v1:= `@@okhttp3.internal.Util.NATURAL_ORDER` @type ^`java.util.Comparator` @kind object;
  #L19783c.  v2:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L197840.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L197846.  v3:= temp @kind object;
  #L197848.  call temp:= `nonEmptyIntersection`(v1, v2, v3) @signature `Lokhttp3/internal/Util;.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L19784e.  v1:= temp;
  #L197850.  if v1 == 0 then goto L19782e;
  #L197854.  v1:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L197858.  if v1 == 0 then goto L197878;
  #L19785c.  v1:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L197860.  v2:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L197864.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L19786a.  v3:= temp @kind object;
  #L19786c.  call temp:= `nonEmptyIntersection`(v1, v2, v3) @signature `Lokhttp3/internal/Util;.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L197872.  v1:= temp;
  #L197874.  if v1 == 0 then goto L19782e;
  #L197878.  v0:= 1I;
  #L19787a.  goto L19782e;
}
procedure `boolean` `isTls`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.isTls:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19788c.  v0:= v1.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L197890.  return v0;
}
procedure `boolean` `supportsTlsExtensions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.supportsTlsExtensions:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1978a4.  v0:= v1.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L1978a8.  return v0;
}
procedure `java.util.List` `tlsVersions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1978bc.  v0:= v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1978c0.  if v0 == 0 then goto L1978d2;
  #L1978c4.  v0:= v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1978c8.  call temp:= `forJavaNames`(v0) @signature `Lokhttp3/TlsVersion;.forJavaNames:([Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L1978ce.  v0:= temp @kind object;
  #L1978d0.  return v0 @kind object;
  #L1978d2.  v0:= 0I;
  #L1978d4.  goto L1978d0;
}
procedure `java.lang.String` `toString`(`okhttp3.ConnectionSpec` v4 @kind this) @signature `Lokhttp3/ConnectionSpec;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1978e8.  v2:= v4.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L1978ec.  if v2 != 0 then goto L1978f6;
  #L1978f0.  v2:= "ConnectionSpec()" @kind object;
  #L1978f4.  return v2 @kind object;
  #L1978f6.  v2:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1978fa.  if v2 == 0 then goto L197986;
  #L1978fe.  call temp:= `cipherSuites`(v4) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @kind virtual;
  #L197904.  v2:= temp @kind object;
  #L197906.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L19790c.  v0:= temp @kind object;
  #L19790e.  v2:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L197912.  if v2 == 0 then goto L19798c;
  #L197916.  call temp:= `tlsVersions`(v4) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @kind virtual;
  #L19791c.  v2:= temp @kind object;
  #L19791e.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L197924.  v1:= temp @kind object;
  #L197926.  v2:= new `java.lang.StringBuilder`;
  #L19792a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L197930.  v3:= "ConnectionSpec(cipherSuites=" @kind object;
  #L197934.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19793a.  v2:= temp @kind object;
  #L19793c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L197942.  v2:= temp @kind object;
  #L197944.  v3:= ", tlsVersions=" @kind object;
  #L197948.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19794e.  v2:= temp @kind object;
  #L197950.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L197956.  v2:= temp @kind object;
  #L197958.  v3:= ", supportsTlsExtensions=" @kind object;
  #L19795c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L197962.  v2:= temp @kind object;
  #L197964.  v3:= v4.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L197968.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L19796e.  v2:= temp @kind object;
  #L197970.  v3:= ")" @kind object;
  #L197974.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19797a.  v2:= temp @kind object;
  #L19797c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L197982.  v2:= temp @kind object;
  #L197984.  goto L1978f4;
  #L197986.  v0:= "[all enabled]" @kind object;
  #L19798a.  goto L19790e;
  #L19798c.  v1:= "[all enabled]" @kind object;
  #L197990.  goto L197926;
}
