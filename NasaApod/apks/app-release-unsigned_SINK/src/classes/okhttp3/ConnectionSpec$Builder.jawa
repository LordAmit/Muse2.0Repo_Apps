record `okhttp3.ConnectionSpec$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.cipherSuites` @AccessFlag ;
  `boolean` `okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @AccessFlag ;
  `boolean` `okhttp3.ConnectionSpec$Builder.tls` @AccessFlag ;
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.tlsVersions` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `okhttp3.ConnectionSpec` v2 @kind object @name `connectionSpec`) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L197264.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19726a.  v0:= v2.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L19726e.  v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v0 @kind boolean;
  #L197272.  v0:= v2.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L197276.  v1.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L19727a.  v0:= v2.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L19727e.  v1.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L197282.  v0:= v2.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L197286.  v1.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v0 @kind boolean;
  #L19728a.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `boolean` v1 @name `tls`) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L19729c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1972a2.  v0.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v1 @kind boolean;
  #L1972a6.  return @kind void;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledCipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledCipherSuites:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1972b8.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L1972bc.  if v0 != 0 then goto L1972d0;
  #L1972c0.  v0:= new `java.lang.IllegalStateException`;
  #L1972c4.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L1972c8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1972ce.  throw v0;
  #L1972d0.  v0:= 0I;
  #L1972d2.  v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L1972d6.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledTlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledTlsVersions:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1972e8.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L1972ec.  if v0 != 0 then goto L197300;
  #L1972f0.  v0:= new `java.lang.IllegalStateException`;
  #L1972f4.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L1972f8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1972fe.  throw v0;
  #L197300.  v0:= 0I;
  #L197302.  v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L197306.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec` `build`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L197318.  v0:= new `okhttp3.ConnectionSpec`;
  #L19731c.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @kind direct;
  #L197322.  return v0 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `java.lang.String`[] v3 @kind object @name `cipherSuites`) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L197334.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L197338.  if v0 != 0 then goto L19734c;
  #L19733c.  v0:= new `java.lang.IllegalStateException`;
  #L197340.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L197344.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19734a.  throw v0;
  #L19734c.  v0:= length @variable v3;
  #L19734e.  if v0 != 0 then goto L197362;
  #L197352.  v0:= new `java.lang.IllegalArgumentException`;
  #L197356.  v1:= "At least one cipher suite is required" @kind object;
  #L19735a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197360.  throw v0;
  #L197362.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L197368.  v0:= temp @kind object;
  #L19736a.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L19736e.  v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L197372.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v4 @kind this, `okhttp3.CipherSuite`[] v5 @kind object @name `cipherSuites`) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L197384.  v2:= v4.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L197388.  if v2 != 0 then goto L19739c;
  #L19738c.  v2:= new `java.lang.IllegalStateException`;
  #L197390.  v3:= "no cipher suites for cleartext connections" @kind object;
  #L197394.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19739a.  throw v2;
  #L19739c.  v2:= length @variable v5;
  #L19739e.  v1:= new `java.lang.String`[v2];
  #L1973a2.  v0:= 0I;
  #L1973a4.  v2:= length @variable v5;
  #L1973a6.  if v0 >= v2 then goto L1973bc;
  #L1973aa.  v2:= v5[v0] @kind object;
  #L1973ae.  v2:= v2.`okhttp3.CipherSuite.javaName` @type ^`java.lang.String` @kind object;
  #L1973b2.  v1[v0]:= v2 @kind object;
  #L1973b6.  v0:= v0 + 1;
  #L1973ba.  goto L1973a4;
  #L1973bc.  call temp:= `cipherSuites`(v4, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L1973c2.  v2:= temp @kind object;
  #L1973c4.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `supportsTlsExtensions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `boolean` v3 @name `supportsTlsExtensions`) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1973d8.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L1973dc.  if v0 != 0 then goto L1973f0;
  #L1973e0.  v0:= new `java.lang.IllegalStateException`;
  #L1973e4.  v1:= "no TLS extensions for cleartext connections" @kind object;
  #L1973e8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1973ee.  throw v0;
  #L1973f0.  v2.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v3 @kind boolean;
  #L1973f4.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `java.lang.String`[] v3 @kind object @name `tlsVersions`) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L197408.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L19740c.  if v0 != 0 then goto L197420;
  #L197410.  v0:= new `java.lang.IllegalStateException`;
  #L197414.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L197418.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19741e.  throw v0;
  #L197420.  v0:= length @variable v3;
  #L197422.  if v0 != 0 then goto L197436;
  #L197426.  v0:= new `java.lang.IllegalArgumentException`;
  #L19742a.  v1:= "At least one TLS version is required" @kind object;
  #L19742e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197434.  throw v0;
  #L197436.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L19743c.  v0:= temp @kind object;
  #L19743e.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L197442.  v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L197446.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v4 @kind this, `okhttp3.TlsVersion`[] v5 @kind object @name `tlsVersions`) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L197458.  v2:= v4.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L19745c.  if v2 != 0 then goto L197470;
  #L197460.  v2:= new `java.lang.IllegalStateException`;
  #L197464.  v3:= "no TLS versions for cleartext connections" @kind object;
  #L197468.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19746e.  throw v2;
  #L197470.  v2:= length @variable v5;
  #L197472.  v1:= new `java.lang.String`[v2];
  #L197476.  v0:= 0I;
  #L197478.  v2:= length @variable v5;
  #L19747a.  if v0 >= v2 then goto L197490;
  #L19747e.  v2:= v5[v0] @kind object;
  #L197482.  v2:= v2.`okhttp3.TlsVersion.javaName` @type ^`java.lang.String` @kind object;
  #L197486.  v1[v0]:= v2 @kind object;
  #L19748a.  v0:= v0 + 1;
  #L19748e.  goto L197478;
  #L197490.  call temp:= `tlsVersions`(v4, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L197496.  v2:= temp @kind object;
  #L197498.  return v2 @kind object;
}
