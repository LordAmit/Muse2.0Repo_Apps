record `okhttp3.RealCall` @kind class @AccessFlag FINAL extends `okhttp3.Call` @kind interface {
  `okhttp3.OkHttpClient` `okhttp3.RealCall.client` @AccessFlag FINAL;
  `okhttp3.EventListener` `okhttp3.RealCall.eventListener` @AccessFlag PRIVATE;
  `boolean` `okhttp3.RealCall.executed` @AccessFlag PRIVATE;
  `boolean` `okhttp3.RealCall.forWebSocket` @AccessFlag FINAL;
  `okhttp3.Request` `okhttp3.RealCall.originalRequest` @AccessFlag FINAL;
  `okhttp3.internal.http.RetryAndFollowUpInterceptor` `okhttp3.RealCall.retryAndFollowUpInterceptor` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.RealCall` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object @name `client`, `okhttp3.Request` v3 @kind object @name `originalRequest`, `boolean` v4 @name `forWebSocket`) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L21616c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L216172.  v1.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` := v2 @kind object;
  #L216176.  v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` := v3 @kind object;
  #L21617a.  v1.`okhttp3.RealCall.forWebSocket` @type ^`boolean` := v4 @kind boolean;
  #L21617e.  v0:= new `okhttp3.internal.http.RetryAndFollowUpInterceptor`;
  #L216182.  call `<init>`(v0, v2, v4) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;Z)V` @kind direct;
  #L216188.  v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` := v0 @kind object;
  #L21618c.  return @kind void;
}
procedure `okhttp3.EventListener` `access$000`(`okhttp3.RealCall` v1 @kind object @name `x0`) @signature `Lokhttp3/RealCall;.access$000:(Lokhttp3/RealCall;)Lokhttp3/EventListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L2161a0.  v0:= v1.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L2161a4.  return v0 @kind object;
}
procedure `void` `captureCallStackTrace`(`okhttp3.RealCall` v3 @kind this) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2161b8.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L2161be.  v1:= temp @kind object;
  #L2161c0.  v2:= "response.body().close()" @kind object;
  #L2161c4.  call temp:= `getStackTraceForCloseable`(v1, v2) @signature `Lokhttp3/internal/platform/Platform;.getStackTraceForCloseable:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L2161ca.  v0:= temp @kind object;
  #L2161cc.  v1:= v3.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L2161d0.  call `setCallStackTrace`(v1, v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.setCallStackTrace:(Ljava/lang/Object;)V` @kind virtual;
  #L2161d6.  return @kind void;
}
procedure `okhttp3.RealCall` `newRealCall`(`okhttp3.OkHttpClient` v2 @kind object @name `client`, `okhttp3.Request` v3 @kind object @name `originalRequest`, `boolean` v4 @name `forWebSocket`) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L2161e8.  v0:= new `okhttp3.RealCall`;
  #L2161ec.  call `<init>`(v0, v2, v3, v4) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @kind direct;
  #L2161f2.  call temp:= `eventListenerFactory`(v2) @signature `Lokhttp3/OkHttpClient;.eventListenerFactory:()Lokhttp3/EventListener$Factory;` @kind virtual;
  #L2161f8.  v1:= temp @kind object;
  #L2161fa.  call temp:= `create`(v1, v0) @signature `Lokhttp3/EventListener$Factory;.create:(Lokhttp3/Call;)Lokhttp3/EventListener;` @kind interface;
  #L216200.  v1:= temp @kind object;
  #L216202.  v0.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` := v1 @kind object;
  #L216206.  return v0 @kind object;
}
procedure `void` `cancel`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L216218.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L21621c.  call `cancel`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.cancel:()V` @kind virtual;
  #L216222.  return @kind void;
}
procedure `java.lang.Object` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L216234.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L21623a.  v0:= temp @kind object;
  #L21623c.  return v0 @kind object;
}
procedure `okhttp3.Call` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/Call;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L216250.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L216256.  v0:= temp @kind object;
  #L216258.  return v0 @kind object;
}
procedure `okhttp3.RealCall` `clone`(`okhttp3.RealCall` v3 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L21626c.  v0:= v3.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L216270.  v1:= v3.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L216274.  v2:= v3.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L216278.  call temp:= `newRealCall`(v0, v1, v2) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @kind static;
  #L21627e.  v0:= temp @kind object;
  #L216280.  return v0 @kind object;
}
procedure `void` `enqueue`(`okhttp3.RealCall` v2 @kind this, `okhttp3.Callback` v3 @kind object @name `responseCallback`) @signature `Lokhttp3/RealCall;.enqueue:(Lokhttp3/Callback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L216294.  @monitorenter v2
  #Try_start0.  
  #L216296.  v0:= v2.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L21629a.  if v0 == 0 then goto L2162b4;
  #L21629e.  v0:= new `java.lang.IllegalStateException`;
  #L2162a2.  v1:= "Already Executed" @kind object;
  #L2162a6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2162ac.  throw v0;
  #L2162ae.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2162b0.  @monitorexit v2
  #Try_end0.  
  #L2162b2.  throw v0;
  #L2162b4.  v0:= 1I;
  #Try_start1.  
  #L2162b6.  v2.`okhttp3.RealCall.executed` @type ^`boolean` := v0 @kind boolean;
  #L2162ba.  @monitorexit v2
  #Try_end1.  
  #L2162bc.  call `captureCallStackTrace`(v2) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @kind direct;
  #L2162c2.  v0:= v2.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L2162c6.  call `callStart`(v0, v2) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #L2162cc.  v0:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2162d0.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L2162d6.  v0:= temp @kind object;
  #L2162d8.  v1:= new `okhttp3.RealCall$AsyncCall`;
  #L2162dc.  call `<init>`(v1, v2, v3) @signature `Lokhttp3/RealCall$AsyncCall;.<init>:(Lokhttp3/RealCall;Lokhttp3/Callback;)V` @kind direct;
  #L2162e2.  call `enqueue`(v0, v1) @signature `Lokhttp3/Dispatcher;.enqueue:(Lokhttp3/RealCall$AsyncCall;)V` @kind virtual;
  #L2162e8.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L2162ae;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L2162ae;
}
procedure `okhttp3.Response` `execute`(`okhttp3.RealCall` v4 @kind this) @signature `Lokhttp3/RealCall;.execute:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L216310.  @monitorenter v4
  #Try_start0.  
  #L216312.  v2:= v4.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L216316.  if v2 == 0 then goto L216330;
  #L21631a.  v2:= new `java.lang.IllegalStateException`;
  #L21631e.  v3:= "Already Executed" @kind object;
  #L216322.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L216328.  throw v2;
  #L21632a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21632c.  @monitorexit v4
  #Try_end0.  
  #L21632e.  throw v2;
  #L216330.  v2:= 1I;
  #Try_start1.  
  #L216332.  v4.`okhttp3.RealCall.executed` @type ^`boolean` := v2 @kind boolean;
  #L216336.  @monitorexit v4
  #Try_end1.  
  #L216338.  call `captureCallStackTrace`(v4) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @kind direct;
  #L21633e.  v2:= v4.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L216342.  call `callStart`(v2, v4) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #Try_start2.  
  #L216348.  v2:= v4.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21634c.  call temp:= `dispatcher`(v2) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L216352.  v2:= temp @kind object;
  #L216354.  call `executed`(v2, v4) @signature `Lokhttp3/Dispatcher;.executed:(Lokhttp3/RealCall;)V` @kind virtual;
  #L21635a.  call temp:= `getResponseWithInterceptorChain`(v4) @signature `Lokhttp3/RealCall;.getResponseWithInterceptorChain:()Lokhttp3/Response;` @kind virtual;
  #L216360.  v1:= temp @kind object;
  #L216362.  if v1 != 0 then goto L21639a;
  #L216366.  v2:= new `java.io.IOException`;
  #L21636a.  v3:= "Canceled" @kind object;
  #L21636e.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L216374.  throw v2;
  #Try_end2.  
  #L216376.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #Try_start3.  
  #L216378.  v2:= v4.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L21637c.  call `callFailed`(v2, v4, v0) @signature `Lokhttp3/EventListener;.callFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L216382.  throw v0;
  #Try_end3.  
  #L216384.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L216386.  v3:= v4.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21638a.  call temp:= `dispatcher`(v3) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L216390.  v3:= temp @kind object;
  #L216392.  call `finished`(v3, v4) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall;)V` @kind virtual;
  #L216398.  throw v2;
  #L21639a.  v2:= v4.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21639e.  call temp:= `dispatcher`(v2) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L2163a4.  v2:= temp @kind object;
  #L2163a6.  call `finished`(v2, v4) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall;)V` @kind virtual;
  #L2163ac.  return v1 @kind object;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L21632a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L21632a;
  catch `java.io.IOException` @[Try_start2..Try_end2] goto L216376;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L216384;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L216384;
}
procedure `okhttp3.Response` `getResponseWithInterceptorChain`(`okhttp3.RealCall` v12 @kind this) @signature `Lokhttp3/RealCall;.getResponseWithInterceptorChain:()Lokhttp3/Response;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L2163ec.  v2:= 0I;
  #L2163ee.  v1:= new `java.util.ArrayList`;
  #L2163f2.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2163f8.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2163fc.  call temp:= `interceptors`(v3) @signature `Lokhttp3/OkHttpClient;.interceptors:()Ljava/util/List;` @kind virtual;
  #L216402.  v3:= temp @kind object;
  #L216404.  call temp:= `addAll`(v1, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L21640a.  v3:= v12.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L21640e.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L216414.  v3:= new `okhttp3.internal.http.BridgeInterceptor`;
  #L216418.  v4:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21641c.  call temp:= `cookieJar`(v4) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L216422.  v4:= temp @kind object;
  #L216424.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/http/BridgeInterceptor;.<init>:(Lokhttp3/CookieJar;)V` @kind direct;
  #L21642a.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L216430.  v3:= new `okhttp3.internal.cache.CacheInterceptor`;
  #L216434.  v4:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L216438.  call temp:= `internalCache`(v4) @signature `Lokhttp3/OkHttpClient;.internalCache:()Lokhttp3/internal/cache/InternalCache;` @kind virtual;
  #L21643e.  v4:= temp @kind object;
  #L216440.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/cache/CacheInterceptor;.<init>:(Lokhttp3/internal/cache/InternalCache;)V` @kind direct;
  #L216446.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21644c.  v3:= new `okhttp3.internal.connection.ConnectInterceptor`;
  #L216450.  v4:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L216454.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/connection/ConnectInterceptor;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L21645a.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L216460.  v3:= v12.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L216464.  if v3 != 0 then goto L21647a;
  #L216468.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21646c.  call temp:= `networkInterceptors`(v3) @signature `Lokhttp3/OkHttpClient;.networkInterceptors:()Ljava/util/List;` @kind virtual;
  #L216472.  v3:= temp @kind object;
  #L216474.  call temp:= `addAll`(v1, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L21647a.  v3:= new `okhttp3.internal.http.CallServerInterceptor`;
  #L21647e.  v4:= v12.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L216482.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/http/CallServerInterceptor;.<init>:(Z)V` @kind direct;
  #L216488.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21648e.  v0:= new `okhttp3.internal.http.RealInterceptorChain`;
  #L216492.  v5:= 0I;
  #L216494.  v6:= v12.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L216498.  v8:= v12.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L21649c.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2164a0.  call temp:= `connectTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.connectTimeoutMillis:()I` @kind virtual;
  #L2164a6.  v9:= temp;
  #L2164a8.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2164ac.  call temp:= `readTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.readTimeoutMillis:()I` @kind virtual;
  #L2164b2.  v10:= temp;
  #L2164b4.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2164b8.  call temp:= `writeTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.writeTimeoutMillis:()I` @kind virtual;
  #L2164be.  v11:= temp;
  #L2164c0.  v3:= v2 @kind object;
  #L2164c2.  v4:= v2 @kind object;
  #L2164c4.  v7:= v12 @kind object;
  #L2164c6.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) @signature `Lokhttp3/internal/http/RealInterceptorChain;.<init>:(Ljava/util/List;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;ILokhttp3/Request;Lokhttp3/Call;Lokhttp3/EventListener;III)V` @kind direct;
  #L2164cc.  v2:= v12.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L2164d0.  call temp:= `proceed`(v0, v2) @signature `Lokhttp3/Interceptor$Chain;.proceed:(Lokhttp3/Request;)Lokhttp3/Response;` @kind interface;
  #L2164d6.  v2:= temp @kind object;
  #L2164d8.  return v2 @kind object;
}
procedure `boolean` `isCanceled`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2164ec.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L2164f0.  call temp:= `isCanceled`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isCanceled:()Z` @kind virtual;
  #L2164f6.  v0:= temp;
  #L2164f8.  return v0;
}
procedure `boolean` `isExecuted`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isExecuted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21650c.  @monitorenter v1
  #Try_start0.  
  #L21650e.  v0:= v1.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L216512.  @monitorexit v1
  #L216514.  return v0;
  #L216516.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L216518.  @monitorexit v1
  #L21651a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L216516;
}
procedure `java.lang.String` `redactedUrl`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.redactedUrl:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;

  #L216538.  v0:= v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L21653c.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L216542.  v0:= temp @kind object;
  #L216544.  call temp:= `redact`(v0) @signature `Lokhttp3/HttpUrl;.redact:()Ljava/lang/String;` @kind virtual;
  #L21654a.  v0:= temp @kind object;
  #L21654c.  return v0 @kind object;
}
procedure `okhttp3.Request` `request`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L216560.  v0:= v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L216564.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.StreamAllocation` `streamAllocation`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @AccessFlag  {
    temp;
    v0;

  #L216578.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L21657c.  call temp:= `streamAllocation`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @kind virtual;
  #L216582.  v0:= temp @kind object;
  #L216584.  return v0 @kind object;
}
procedure `java.lang.String` `toLoggableString`(`okhttp3.RealCall` v2 @kind this) @signature `Lokhttp3/RealCall;.toLoggableString:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L216598.  v1:= new `java.lang.StringBuilder`;
  #L21659c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2165a2.  call temp:= `isCanceled`(v2) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @kind virtual;
  #L2165a8.  v0:= temp;
  #L2165aa.  if v0 == 0 then goto L2165f4;
  #L2165ae.  v0:= "canceled " @kind object;
  #L2165b2.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2165b8.  v1:= temp @kind object;
  #L2165ba.  v0:= v2.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L2165be.  if v0 == 0 then goto L2165fa;
  #L2165c2.  v0:= "web socket" @kind object;
  #L2165c6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2165cc.  v0:= temp @kind object;
  #L2165ce.  v1:= " to " @kind object;
  #L2165d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2165d8.  v0:= temp @kind object;
  #L2165da.  call temp:= `redactedUrl`(v2) @signature `Lokhttp3/RealCall;.redactedUrl:()Ljava/lang/String;` @kind virtual;
  #L2165e0.  v1:= temp @kind object;
  #L2165e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2165e8.  v0:= temp @kind object;
  #L2165ea.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2165f0.  v0:= temp @kind object;
  #L2165f2.  return v0 @kind object;
  #L2165f4.  v0:= "" @kind object;
  #L2165f8.  goto L2165b2;
  #L2165fa.  v0:= "call" @kind object;
  #L2165fe.  goto L2165c6;
}
