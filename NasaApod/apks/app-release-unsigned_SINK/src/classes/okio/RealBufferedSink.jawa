record `okio.RealBufferedSink` @kind class @AccessFlag FINAL extends `okio.BufferedSink` @kind interface {
  `okio.Buffer` `okio.RealBufferedSink.buffer` @AccessFlag PUBLIC_FINAL;
  `boolean` `okio.RealBufferedSink.closed` @AccessFlag ;
  `okio.Sink` `okio.RealBufferedSink.sink` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`okio.RealBufferedSink` v2 @kind this, `okio.Sink` v3 @kind object @name `sink`) @signature `Lokio/RealBufferedSink;.<init>:(Lokio/Sink;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L24ab1c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24ab22.  v0:= new `okio.Buffer`;
  #L24ab26.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L24ab2c.  v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` := v0 @kind object;
  #L24ab30.  if v3 != 0 then goto L24ab44;
  #L24ab34.  v0:= new `java.lang.NullPointerException`;
  #L24ab38.  v1:= "sink == null" @kind object;
  #L24ab3c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24ab42.  throw v0;
  #L24ab44.  v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` := v3 @kind object;
  #L24ab48.  return @kind void;
}
procedure `okio.Buffer` `buffer`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ab5c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ab60.  return v0 @kind object;
}
procedure `void` `close`(`okio.RealBufferedSink` v6 @kind this) @signature `Lokio/RealBufferedSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24ab74.  v2:= v6.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24ab78.  if v2 == 0 then goto L24ab7e;
  #L24ab7c.  return @kind void;
  #L24ab7e.  v1:= 0I;
  #Try_start0.  
  #L24ab80.  v2:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ab84.  v2:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24ab88.  v4:= 0L;
  #L24ab8c.  v2:= lcmp(v2, v4);
  #L24ab90.  if v2 <= 0 then goto L24abaa;
  #L24ab94.  v2:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24ab98.  v3:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ab9c.  v4:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24aba0.  v4:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24aba4.  call `write`(v2, v3, v4) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #Try_end0.  
  #Try_start1.  
  #L24abaa.  v2:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24abae.  call `close`(v2) @signature `Lokio/Sink;.close:()V` @kind interface;
  #Try_end1.  
  #L24abb4.  v2:= 1I;
  #L24abb6.  v6.`okio.RealBufferedSink.closed` @type ^`boolean` := v2 @kind boolean;
  #L24abba.  if v1 == 0 then goto L24ab7c;
  #L24abbe.  call `sneakyRethrow`(v1) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @kind static;
  #L24abc4.  goto L24ab7c;
  #L24abc6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24abc8.  v1:= v0 @kind object;
  #L24abca.  goto L24abaa;
  #L24abcc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24abce.  if v1 != 0 then goto L24abb4;
  #L24abd2.  v1:= v0 @kind object;
  #L24abd4.  goto L24abb4;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L24abc6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L24abcc;
}
procedure `okio.BufferedSink` `emit`(`okio.RealBufferedSink` v4 @kind this) @signature `Lokio/RealBufferedSink;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24ac04.  v2:= v4.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24ac08.  if v2 == 0 then goto L24ac1c;
  #L24ac0c.  v2:= new `java.lang.IllegalStateException`;
  #L24ac10.  v3:= "closed" @kind object;
  #L24ac14.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24ac1a.  throw v2;
  #L24ac1c.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ac20.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L24ac26.  v0:= temp @kind wide;
  #L24ac28.  v2:= 0L;
  #L24ac2c.  v2:= lcmp(v0, v2);
  #L24ac30.  if v2 <= 0 then goto L24ac42;
  #L24ac34.  v2:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24ac38.  v3:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ac3c.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L24ac42.  return v4 @kind object;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.RealBufferedSink` v4 @kind this) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24ac54.  v2:= v4.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24ac58.  if v2 == 0 then goto L24ac6c;
  #L24ac5c.  v2:= new `java.lang.IllegalStateException`;
  #L24ac60.  v3:= "closed" @kind object;
  #L24ac64.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24ac6a.  throw v2;
  #L24ac6c.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ac70.  call temp:= `completeSegmentByteCount`(v2) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @kind virtual;
  #L24ac76.  v0:= temp @kind wide;
  #L24ac78.  v2:= 0L;
  #L24ac7c.  v2:= lcmp(v0, v2);
  #L24ac80.  if v2 <= 0 then goto L24ac92;
  #L24ac84.  v2:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24ac88.  v3:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ac8c.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L24ac92.  return v4 @kind object;
}
procedure `void` `flush`(`okio.RealBufferedSink` v4 @kind this) @signature `Lokio/RealBufferedSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24aca4.  v0:= v4.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24aca8.  if v0 == 0 then goto L24acbc;
  #L24acac.  v0:= new `java.lang.IllegalStateException`;
  #L24acb0.  v1:= "closed" @kind object;
  #L24acb4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24acba.  throw v0;
  #L24acbc.  v0:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24acc0.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24acc4.  v2:= 0L;
  #L24acc8.  v0:= lcmp(v0, v2);
  #L24accc.  if v0 <= 0 then goto L24ace6;
  #L24acd0.  v0:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24acd4.  v1:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24acd8.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24acdc.  v2:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24ace0.  call `write`(v0, v1, v2) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L24ace6.  v0:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24acea.  call `flush`(v0) @signature `Lokio/Sink;.flush:()V` @kind interface;
  #L24acf0.  return @kind void;
}
procedure `boolean` `isOpen`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ad04.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24ad08.  if v0 != 0 then goto L24ad10;
  #L24ad0c.  v0:= 1I;
  #L24ad0e.  return v0;
  #L24ad10.  v0:= 0I;
  #L24ad12.  goto L24ad0e;
}
procedure `java.io.OutputStream` `outputStream`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ad24.  v0:= new `okio.RealBufferedSink$1`;
  #L24ad28.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSink$1;.<init>:(Lokio/RealBufferedSink;)V` @kind direct;
  #L24ad2e.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ad40.  v0:= v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24ad44.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L24ad4a.  v0:= temp @kind object;
  #L24ad4c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.RealBufferedSink` v2 @kind this) @signature `Lokio/RealBufferedSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24ad60.  v0:= new `java.lang.StringBuilder`;
  #L24ad64.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24ad6a.  v1:= "buffer(" @kind object;
  #L24ad6e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24ad74.  v0:= temp @kind object;
  #L24ad76.  v1:= v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24ad7a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24ad80.  v0:= temp @kind object;
  #L24ad82.  v1:= ")" @kind object;
  #L24ad86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24ad8c.  v0:= temp @kind object;
  #L24ad8e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24ad94.  v0:= temp @kind object;
  #L24ad96.  return v0 @kind object;
}
procedure `int` `write`(`okio.RealBufferedSink` v3 @kind this, `java.nio.ByteBuffer` v4 @kind object @name `source`) @signature `Lokio/RealBufferedSink;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24ada8.  v1:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24adac.  if v1 == 0 then goto L24adc0;
  #L24adb0.  v1:= new `java.lang.IllegalStateException`;
  #L24adb4.  v2:= "closed" @kind object;
  #L24adb8.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24adbe.  throw v1;
  #L24adc0.  v1:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24adc4.  call temp:= `write`(v1, v4) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L24adca.  v0:= temp;
  #L24adcc.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24add2.  return v0;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v2 @kind this, `okio.ByteString` v3 @kind object @name `byteString`) @signature `Lokio/RealBufferedSink;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24ade4.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24ade8.  if v0 == 0 then goto L24adfc;
  #L24adec.  v0:= new `java.lang.IllegalStateException`;
  #L24adf0.  v1:= "closed" @kind object;
  #L24adf4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24adfa.  throw v0;
  #L24adfc.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ae00.  call temp:= `write`(v0, v3) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L24ae06.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24ae0c.  v0:= temp @kind object;
  #L24ae0e.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v4 @kind this, `okio.Source` v5 @kind object @name `source`, `long` v6 @name `byteCount`) @signature `Lokio/RealBufferedSink;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24ae20.  v2:= 0L;
  #L24ae24.  v2:= lcmp(v6, v2);
  #L24ae28.  if v2 <= 0 then goto L24ae5a;
  #L24ae2c.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ae30.  call temp:= `read`(v5, v2, v6) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L24ae36.  v0:= temp @kind wide;
  #L24ae38.  v2:= -1L;
  #L24ae3c.  v2:= lcmp(v0, v2);
  #L24ae40.  if v2 != 0 then goto L24ae50;
  #L24ae44.  v2:= new `java.io.EOFException`;
  #L24ae48.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L24ae4e.  throw v2;
  #L24ae50.  v6:= v6 - v0 @kind long;
  #L24ae52.  call temp:= `emitCompleteSegments`(v4) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24ae58.  goto L24ae20;
  #L24ae5a.  return v4 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v2 @kind this, `byte`[] v3 @kind object @name `source`) @signature `Lokio/RealBufferedSink;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24ae6c.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24ae70.  if v0 == 0 then goto L24ae84;
  #L24ae74.  v0:= new `java.lang.IllegalStateException`;
  #L24ae78.  v1:= "closed" @kind object;
  #L24ae7c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24ae82.  throw v0;
  #L24ae84.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ae88.  call temp:= `write`(v0, v3) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L24ae8e.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24ae94.  v0:= temp @kind object;
  #L24ae96.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v2 @kind this, `byte`[] v3 @kind object @name `source`, `int` v4 @name `offset`, `int` v5 @name `byteCount`) @signature `Lokio/RealBufferedSink;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24aea8.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24aeac.  if v0 == 0 then goto L24aec0;
  #L24aeb0.  v0:= new `java.lang.IllegalStateException`;
  #L24aeb4.  v1:= "closed" @kind object;
  #L24aeb8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24aebe.  throw v0;
  #L24aec0.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24aec4.  call temp:= `write`(v0, v3, v4, v5) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L24aeca.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24aed0.  v0:= temp @kind object;
  #L24aed2.  return v0 @kind object;
}
procedure `void` `write`(`okio.RealBufferedSink` v2 @kind this, `okio.Buffer` v3 @kind object @name `source`, `long` v4 @name `byteCount`) @signature `Lokio/RealBufferedSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24aee4.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24aee8.  if v0 == 0 then goto L24aefc;
  #L24aeec.  v0:= new `java.lang.IllegalStateException`;
  #L24aef0.  v1:= "closed" @kind object;
  #L24aef4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24aefa.  throw v0;
  #L24aefc.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24af00.  call `write`(v0, v3, v4) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L24af06.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24af0c.  return @kind void;
}
procedure `long` `writeAll`(`okio.RealBufferedSink` v8 @kind this, `okio.Source` v9 @kind object @name `source`) @signature `Lokio/RealBufferedSink;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L24af20.  if v9 != 0 then goto L24af34;
  #L24af24.  v4:= new `java.lang.IllegalArgumentException`;
  #L24af28.  v5:= "source == null" @kind object;
  #L24af2c.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24af32.  throw v4;
  #L24af34.  v2:= 0L;
  #L24af38.  v4:= v8.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24af3c.  v6:= 8192L;
  #L24af40.  call temp:= `read`(v9, v4, v6) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L24af46.  v0:= temp @kind wide;
  #L24af48.  v4:= -1L;
  #L24af4c.  v4:= lcmp(v0, v4);
  #L24af50.  if v4 == 0 then goto L24af5e;
  #L24af54.  v2:= v2 + v0 @kind long;
  #L24af56.  call temp:= `emitCompleteSegments`(v8) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24af5c.  goto L24af38;
  #L24af5e.  return v2 @kind wide;
}
procedure `okio.BufferedSink` `writeByte`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `b`) @signature `Lokio/RealBufferedSink;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24af70.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24af74.  if v0 == 0 then goto L24af88;
  #L24af78.  v0:= new `java.lang.IllegalStateException`;
  #L24af7c.  v1:= "closed" @kind object;
  #L24af80.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24af86.  throw v0;
  #L24af88.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24af8c.  call temp:= `writeByte`(v0, v3) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24af92.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24af98.  v0:= temp @kind object;
  #L24af9a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24afac.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24afb0.  if v0 == 0 then goto L24afc4;
  #L24afb4.  v0:= new `java.lang.IllegalStateException`;
  #L24afb8.  v1:= "closed" @kind object;
  #L24afbc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24afc2.  throw v0;
  #L24afc4.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24afc8.  call temp:= `writeDecimalLong`(v0, v4) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L24afce.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24afd4.  v0:= temp @kind object;
  #L24afd6.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24afe8.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24afec.  if v0 == 0 then goto L24b000;
  #L24aff0.  v0:= new `java.lang.IllegalStateException`;
  #L24aff4.  v1:= "closed" @kind object;
  #L24aff8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24affe.  throw v0;
  #L24b000.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b004.  call temp:= `writeHexadecimalUnsignedLong`(v0, v4) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L24b00a.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b010.  v0:= temp @kind object;
  #L24b012.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeInt`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `i`) @signature `Lokio/RealBufferedSink;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b024.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b028.  if v0 == 0 then goto L24b03c;
  #L24b02c.  v0:= new `java.lang.IllegalStateException`;
  #L24b030.  v1:= "closed" @kind object;
  #L24b034.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b03a.  throw v0;
  #L24b03c.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b040.  call temp:= `writeInt`(v0, v3) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L24b046.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b04c.  v0:= temp @kind object;
  #L24b04e.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `i`) @signature `Lokio/RealBufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b060.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b064.  if v0 == 0 then goto L24b078;
  #L24b068.  v0:= new `java.lang.IllegalStateException`;
  #L24b06c.  v1:= "closed" @kind object;
  #L24b070.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b076.  throw v0;
  #L24b078.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b07c.  call temp:= `writeIntLe`(v0, v3) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L24b082.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b088.  v0:= temp @kind object;
  #L24b08a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeLong`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24b09c.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b0a0.  if v0 == 0 then goto L24b0b4;
  #L24b0a4.  v0:= new `java.lang.IllegalStateException`;
  #L24b0a8.  v1:= "closed" @kind object;
  #L24b0ac.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b0b2.  throw v0;
  #L24b0b4.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b0b8.  call temp:= `writeLong`(v0, v4) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L24b0be.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b0c4.  v0:= temp @kind object;
  #L24b0c6.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24b0d8.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b0dc.  if v0 == 0 then goto L24b0f0;
  #L24b0e0.  v0:= new `java.lang.IllegalStateException`;
  #L24b0e4.  v1:= "closed" @kind object;
  #L24b0e8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b0ee.  throw v0;
  #L24b0f0.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b0f4.  call temp:= `writeLongLe`(v0, v4) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L24b0fa.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b100.  v0:= temp @kind object;
  #L24b102.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeShort`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `s`) @signature `Lokio/RealBufferedSink;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b114.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b118.  if v0 == 0 then goto L24b12c;
  #L24b11c.  v0:= new `java.lang.IllegalStateException`;
  #L24b120.  v1:= "closed" @kind object;
  #L24b124.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b12a.  throw v0;
  #L24b12c.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b130.  call temp:= `writeShort`(v0, v3) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L24b136.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b13c.  v0:= temp @kind object;
  #L24b13e.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `s`) @signature `Lokio/RealBufferedSink;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b150.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b154.  if v0 == 0 then goto L24b168;
  #L24b158.  v0:= new `java.lang.IllegalStateException`;
  #L24b15c.  v1:= "closed" @kind object;
  #L24b160.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b166.  throw v0;
  #L24b168.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b16c.  call temp:= `writeShortLe`(v0, v3) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L24b172.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b178.  v0:= temp @kind object;
  #L24b17a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `int` v4 @name `beginIndex`, `int` v5 @name `endIndex`, `java.nio.charset.Charset` v6 @kind object @name `charset`) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b18c.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b190.  if v0 == 0 then goto L24b1a4;
  #L24b194.  v0:= new `java.lang.IllegalStateException`;
  #L24b198.  v1:= "closed" @kind object;
  #L24b19c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b1a2.  throw v0;
  #L24b1a4.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b1a8.  call temp:= `writeString`(v0, v3, v4, v5, v6) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L24b1ae.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b1b4.  v0:= temp @kind object;
  #L24b1b6.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `java.nio.charset.Charset` v4 @kind object @name `charset`) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b1c8.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b1cc.  if v0 == 0 then goto L24b1e0;
  #L24b1d0.  v0:= new `java.lang.IllegalStateException`;
  #L24b1d4.  v1:= "closed" @kind object;
  #L24b1d8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b1de.  throw v0;
  #L24b1e0.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b1e4.  call temp:= `writeString`(v0, v3, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L24b1ea.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b1f0.  v0:= temp @kind object;
  #L24b1f2.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b204.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b208.  if v0 == 0 then goto L24b21c;
  #L24b20c.  v0:= new `java.lang.IllegalStateException`;
  #L24b210.  v1:= "closed" @kind object;
  #L24b214.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b21a.  throw v0;
  #L24b21c.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b220.  call temp:= `writeUtf8`(v0, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L24b226.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b22c.  v0:= temp @kind object;
  #L24b22e.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `int` v4 @name `beginIndex`, `int` v5 @name `endIndex`) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b240.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b244.  if v0 == 0 then goto L24b258;
  #L24b248.  v0:= new `java.lang.IllegalStateException`;
  #L24b24c.  v1:= "closed" @kind object;
  #L24b250.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b256.  throw v0;
  #L24b258.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b25c.  call temp:= `writeUtf8`(v0, v3, v4, v5) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L24b262.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b268.  v0:= temp @kind object;
  #L24b26a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `codePoint`) @signature `Lokio/RealBufferedSink;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b27c.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b280.  if v0 == 0 then goto L24b294;
  #L24b284.  v0:= new `java.lang.IllegalStateException`;
  #L24b288.  v1:= "closed" @kind object;
  #L24b28c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b292.  throw v0;
  #L24b294.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b298.  call temp:= `writeUtf8CodePoint`(v0, v3) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L24b29e.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b2a4.  v0:= temp @kind object;
  #L24b2a6.  return v0 @kind object;
}
