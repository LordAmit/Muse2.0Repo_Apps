record `okio.DeflaterSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Sink` @kind interface {
  `boolean` `okio.DeflaterSink.closed` @AccessFlag PRIVATE;
  `java.util.zip.Deflater` `okio.DeflaterSink.deflater` @AccessFlag PRIVATE_FINAL;
  `okio.BufferedSink` `okio.DeflaterSink.sink` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.DeflaterSink` v2 @kind this, `okio.BufferedSink` v3 @kind object @name `sink`, `java.util.zip.Deflater` v4 @kind object @name `deflater`) @signature `Lokio/DeflaterSink;.<init>:(Lokio/BufferedSink;Ljava/util/zip/Deflater;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L21ee28.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21ee2e.  if v3 != 0 then goto L21ee42;
  #L21ee32.  v0:= new `java.lang.IllegalArgumentException`;
  #L21ee36.  v1:= "source == null" @kind object;
  #L21ee3a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21ee40.  throw v0;
  #L21ee42.  if v4 != 0 then goto L21ee56;
  #L21ee46.  v0:= new `java.lang.IllegalArgumentException`;
  #L21ee4a.  v1:= "inflater == null" @kind object;
  #L21ee4e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21ee54.  throw v0;
  #L21ee56.  v2.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` := v3 @kind object;
  #L21ee5a.  v2.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` := v4 @kind object;
  #L21ee5e.  return @kind void;
}
procedure `void` `<init>`(`okio.DeflaterSink` v1 @kind this, `okio.Sink` v2 @kind object @name `sink`, `java.util.zip.Deflater` v3 @kind object @name `deflater`) @signature `Lokio/DeflaterSink;.<init>:(Lokio/Sink;Ljava/util/zip/Deflater;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L21ee70.  call temp:= `buffer`(v2) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @kind static;
  #L21ee76.  v0:= temp @kind object;
  #L21ee78.  call `<init>`(v1, v0, v3) @signature `Lokio/DeflaterSink;.<init>:(Lokio/BufferedSink;Ljava/util/zip/Deflater;)V` @kind direct;
  #L21ee7e.  return @kind void;
}
procedure `void` `deflate`(`okio.DeflaterSink` v8 @kind this, `boolean` v9 @name `syncFlush`) @signature `Lokio/DeflaterSink;.deflate:(Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L21ee90.  v3:= v8.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L21ee94.  call temp:= `buffer`(v3) @signature `Lokio/BufferedSink;.buffer:()Lokio/Buffer;` @kind interface;
  #L21ee9a.  v0:= temp @kind object;
  #L21ee9c.  v3:= 1I;
  #L21ee9e.  call temp:= `writableSegment`(v0, v3) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L21eea4.  v2:= temp @kind object;
  #L21eea6.  if v9 == 0 then goto L21eeee;
  #L21eeaa.  v3:= v8.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L21eeae.  v4:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L21eeb2.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L21eeb6.  v6:= v2.`okio.Segment.limit` @type ^`int`;
  #L21eeba.  v6:= v6 - 8192;
  #L21eebe.  v7:= 2I;
  #L21eec0.  call temp:= `deflate`(v3, v4, v5, v6, v7) @signature `Ljava/util/zip/Deflater;.deflate:([BIII)I` @kind virtual;
  #L21eec6.  v1:= temp;
  #L21eec8.  if v1 <= 0 then goto L21ef0c;
  #L21eecc.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L21eed0.  v3:= v3 + v1 @kind int;
  #L21eed2.  v2.`okio.Segment.limit` @type ^`int` := v3;
  #L21eed6.  v4:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L21eeda.  v6:= (`long`) v1 @kind i2l;
  #L21eedc.  v4:= v4 + v6 @kind long;
  #L21eede.  v0.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L21eee2.  v3:= v8.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L21eee6.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/BufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind interface;
  #L21eeec.  goto L21ee9c;
  #L21eeee.  v3:= v8.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L21eef2.  v4:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L21eef6.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L21eefa.  v6:= v2.`okio.Segment.limit` @type ^`int`;
  #L21eefe.  v6:= v6 - 8192;
  #L21ef02.  call temp:= `deflate`(v3, v4, v5, v6) @signature `Ljava/util/zip/Deflater;.deflate:([BII)I` @kind virtual;
  #L21ef08.  v1:= temp;
  #L21ef0a.  goto L21eec8;
  #L21ef0c.  v3:= v8.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L21ef10.  call temp:= `needsInput`(v3) @signature `Ljava/util/zip/Deflater;.needsInput:()Z` @kind virtual;
  #L21ef16.  v3:= temp;
  #L21ef18.  if v3 == 0 then goto L21ee9c;
  #L21ef1c.  v3:= v2.`okio.Segment.pos` @type ^`int`;
  #L21ef20.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L21ef24.  if v3 != v4 then goto L21ef3a;
  #L21ef28.  call temp:= `pop`(v2) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L21ef2e.  v3:= temp @kind object;
  #L21ef30.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v3 @kind object;
  #L21ef34.  call `recycle`(v2) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L21ef3a.  return @kind void;
}
procedure `void` `close`(`okio.DeflaterSink` v3 @kind this) @signature `Lokio/DeflaterSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L21ef4c.  v2:= v3.`okio.DeflaterSink.closed` @type ^`boolean` @kind boolean;
  #L21ef50.  if v2 == 0 then goto L21ef56;
  #L21ef54.  return @kind void;
  #L21ef56.  v1:= 0I;
  #Try_start0.  
  #L21ef58.  call `finishDeflate`(v3) @signature `Lokio/DeflaterSink;.finishDeflate:()V` @kind virtual;
  #Try_end0.  
  #Try_start1.  
  #L21ef5e.  v2:= v3.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L21ef62.  call `end`(v2) @signature `Ljava/util/zip/Deflater;.end:()V` @kind virtual;
  #Try_end1.  
  #Try_start2.  
  #L21ef68.  v2:= v3.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L21ef6c.  call `close`(v2) @signature `Lokio/BufferedSink;.close:()V` @kind interface;
  #Try_end2.  
  #L21ef72.  v2:= 1I;
  #L21ef74.  v3.`okio.DeflaterSink.closed` @type ^`boolean` := v2 @kind boolean;
  #L21ef78.  if v1 == 0 then goto L21ef54;
  #L21ef7c.  call `sneakyRethrow`(v1) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @kind static;
  #L21ef82.  goto L21ef54;
  #L21ef84.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21ef86.  v1:= v0 @kind object;
  #L21ef88.  goto L21ef5e;
  #L21ef8a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21ef8c.  if v1 != 0 then goto L21ef68;
  #L21ef90.  v1:= v0 @kind object;
  #L21ef92.  goto L21ef68;
  #L21ef94.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21ef96.  if v1 != 0 then goto L21ef72;
  #L21ef9a.  v1:= v0 @kind object;
  #L21ef9c.  goto L21ef72;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L21ef84;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L21ef8a;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L21ef94;
}
procedure `void` `finishDeflate`(`okio.DeflaterSink` v1 @kind this) @signature `Lokio/DeflaterSink;.finishDeflate:()V` @AccessFlag  {
    temp;
    v0;

  #L21efd8.  v0:= v1.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L21efdc.  call `finish`(v0) @signature `Ljava/util/zip/Deflater;.finish:()V` @kind virtual;
  #L21efe2.  v0:= 0I;
  #L21efe4.  call `deflate`(v1, v0) @signature `Lokio/DeflaterSink;.deflate:(Z)V` @kind direct;
  #L21efea.  return @kind void;
}
procedure `void` `flush`(`okio.DeflaterSink` v1 @kind this) @signature `Lokio/DeflaterSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21effc.  v0:= 1I;
  #L21effe.  call `deflate`(v1, v0) @signature `Lokio/DeflaterSink;.deflate:(Z)V` @kind direct;
  #L21f004.  v0:= v1.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L21f008.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #L21f00e.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.DeflaterSink` v1 @kind this) @signature `Lokio/DeflaterSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21f020.  v0:= v1.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L21f024.  call temp:= `timeout`(v0) @signature `Lokio/BufferedSink;.timeout:()Lokio/Timeout;` @kind interface;
  #L21f02a.  v0:= temp @kind object;
  #L21f02c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.DeflaterSink` v2 @kind this) @signature `Lokio/DeflaterSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L21f040.  v0:= new `java.lang.StringBuilder`;
  #L21f044.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21f04a.  v1:= "DeflaterSink(" @kind object;
  #L21f04e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21f054.  v0:= temp @kind object;
  #L21f056.  v1:= v2.`okio.DeflaterSink.sink` @type ^`okio.BufferedSink` @kind object;
  #L21f05a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21f060.  v0:= temp @kind object;
  #L21f062.  v1:= ")" @kind object;
  #L21f066.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21f06c.  v0:= temp @kind object;
  #L21f06e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21f074.  v0:= temp @kind object;
  #L21f076.  return v0 @kind object;
}
procedure `void` `write`(`okio.DeflaterSink` v8 @kind this, `okio.Buffer` v9 @kind object @name `source`, `long` v10 @name `byteCount`) @signature `Lokio/DeflaterSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L21f088.  v2:= 0L;
  #L21f08c.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L21f090.  v4:= v10 @kind wide;
  #L21f092.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L21f098.  v0:= lcmp(v10, v2);
  #L21f09c.  if v0 <= 0 then goto L21f10e;
  #L21f0a0.  v6:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L21f0a4.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L21f0a8.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L21f0ac.  v0:= v0 - v1 @kind int;
  #L21f0ae.  v0:= (`long`) v0 @kind i2l;
  #L21f0b0.  call temp:= `min`(v10, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L21f0b6.  v0:= temp @kind wide;
  #L21f0b8.  v7:= (`int`) v0 @kind l2i;
  #L21f0ba.  v0:= v8.`okio.DeflaterSink.deflater` @type ^`java.util.zip.Deflater` @kind object;
  #L21f0be.  v1:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L21f0c2.  v4:= v6.`okio.Segment.pos` @type ^`int`;
  #L21f0c6.  call `setInput`(v0, v1, v4, v7) @signature `Ljava/util/zip/Deflater;.setInput:([BII)V` @kind virtual;
  #L21f0cc.  v0:= 0I;
  #L21f0ce.  call `deflate`(v8, v0) @signature `Lokio/DeflaterSink;.deflate:(Z)V` @kind direct;
  #L21f0d4.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L21f0d8.  v4:= (`long`) v7 @kind i2l;
  #L21f0da.  v0:= v0 - v4 @kind long;
  #L21f0dc.  v9.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L21f0e0.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L21f0e4.  v0:= v0 + v7 @kind int;
  #L21f0e6.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L21f0ea.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L21f0ee.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L21f0f2.  if v0 != v1 then goto L21f108;
  #L21f0f6.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L21f0fc.  v0:= temp @kind object;
  #L21f0fe.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L21f102.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L21f108.  v0:= (`long`) v7 @kind i2l;
  #L21f10a.  v10:= v10 - v0 @kind long;
  #L21f10c.  goto L21f098;
  #L21f10e.  return @kind void;
}
