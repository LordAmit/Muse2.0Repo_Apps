record `okio.Okio` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.logging.Logger` `@@okio.Okio.logger` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Okio;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1aeb28.  v0:= constclass @type ^`okio.Okio` @kind object;
  #L1aeb2c.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1aeb32.  v0:= temp @kind object;
  #L1aeb34.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L1aeb3a.  v0:= temp @kind object;
  #L1aeb3c.  `@@okio.Okio.logger` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L1aeb40.  return @kind void;
}
procedure `void` `<init>`(`okio.Okio` v0 @kind this) @signature `Lokio/Okio;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1aeb54.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1aeb5a.  return @kind void;
}
procedure `okio.Sink` `appendingSink`(`java.io.File` v2 @kind object @name `file`) @signature `Lokio/Okio;.appendingSink:(Ljava/io/File;)Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1aeb6c.  if v2 != 0 then goto L1aeb80;
  #L1aeb70.  v0:= new `java.lang.IllegalArgumentException`;
  #L1aeb74.  v1:= "file == null" @kind object;
  #L1aeb78.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aeb7e.  throw v0;
  #L1aeb80.  v0:= new `java.io.FileOutputStream`;
  #L1aeb84.  v1:= 1I;
  #L1aeb86.  call `<init>`(v0, v2, v1) @signature `Ljava/io/FileOutputStream;.<init>:(Ljava/io/File;Z)V` @kind direct;
  #L1aeb8c.  call temp:= `sink`(v0) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;)Lokio/Sink;` @kind static;
  #L1aeb92.  v0:= temp @kind object;
  #L1aeb94.  return v0 @kind object;
}
procedure `okio.Sink` `blackhole`() @signature `Lokio/Okio;.blackhole:()Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1aeba8.  v0:= new `okio.Okio$3`;
  #L1aebac.  call `<init>`(v0) @signature `Lokio/Okio$3;.<init>:()V` @kind direct;
  #L1aebb2.  return v0 @kind object;
}
procedure `okio.BufferedSink` `buffer`(`okio.Sink` v1 @kind object @name `sink`) @signature `Lokio/Okio;.buffer:(Lokio/Sink;)Lokio/BufferedSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1aebc4.  v0:= new `okio.RealBufferedSink`;
  #L1aebc8.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L1aebce.  return v0 @kind object;
}
procedure `okio.BufferedSource` `buffer`(`okio.Source` v1 @kind object @name `source`) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1aebe0.  v0:= new `okio.RealBufferedSource`;
  #L1aebe4.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSource;.<init>:(Lokio/Source;)V` @kind direct;
  #L1aebea.  return v0 @kind object;
}
procedure `boolean` `isAndroidGetsocknameError`(`java.lang.AssertionError` v2 @kind object @name `e`) @signature `Lokio/Okio;.isAndroidGetsocknameError:(Ljava/lang/AssertionError;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1aebfc.  call temp:= `getCause`(v2) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L1aec02.  v0:= temp @kind object;
  #L1aec04.  if v0 == 0 then goto L1aec30;
  #L1aec08.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1aec0e.  v0:= temp @kind object;
  #L1aec10.  if v0 == 0 then goto L1aec30;
  #L1aec14.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L1aec1a.  v0:= temp @kind object;
  #L1aec1c.  v1:= "getsockname failed" @kind object;
  #L1aec20.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L1aec26.  v0:= temp;
  #L1aec28.  if v0 == 0 then goto L1aec30;
  #L1aec2c.  v0:= 1I;
  #L1aec2e.  return v0;
  #L1aec30.  v0:= 0I;
  #L1aec32.  goto L1aec2e;
}
procedure `okio.Sink` `sink`(`java.io.File` v2 @kind object @name `file`) @signature `Lokio/Okio;.sink:(Ljava/io/File;)Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1aec44.  if v2 != 0 then goto L1aec58;
  #L1aec48.  v0:= new `java.lang.IllegalArgumentException`;
  #L1aec4c.  v1:= "file == null" @kind object;
  #L1aec50.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aec56.  throw v0;
  #L1aec58.  v0:= new `java.io.FileOutputStream`;
  #L1aec5c.  call `<init>`(v0, v2) @signature `Ljava/io/FileOutputStream;.<init>:(Ljava/io/File;)V` @kind direct;
  #L1aec62.  call temp:= `sink`(v0) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;)Lokio/Sink;` @kind static;
  #L1aec68.  v0:= temp @kind object;
  #L1aec6a.  return v0 @kind object;
}
procedure `okio.Sink` `sink`(`java.io.OutputStream` v1 @kind object @name `out`) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;)Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1aec7c.  v0:= new `okio.Timeout`;
  #L1aec80.  call `<init>`(v0) @signature `Lokio/Timeout;.<init>:()V` @kind direct;
  #L1aec86.  call temp:= `sink`(v1, v0) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;Lokio/Timeout;)Lokio/Sink;` @kind static;
  #L1aec8c.  v0:= temp @kind object;
  #L1aec8e.  return v0 @kind object;
}
procedure `okio.Sink` `sink`(`java.io.OutputStream` v2 @kind object @name `out`, `okio.Timeout` v3 @kind object @name `timeout`) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;Lokio/Timeout;)Lokio/Sink;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1aeca0.  if v2 != 0 then goto L1aecb4;
  #L1aeca4.  v0:= new `java.lang.IllegalArgumentException`;
  #L1aeca8.  v1:= "out == null" @kind object;
  #L1aecac.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aecb2.  throw v0;
  #L1aecb4.  if v3 != 0 then goto L1aecc8;
  #L1aecb8.  v0:= new `java.lang.IllegalArgumentException`;
  #L1aecbc.  v1:= "timeout == null" @kind object;
  #L1aecc0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aecc6.  throw v0;
  #L1aecc8.  v0:= new `okio.Okio$1`;
  #L1aeccc.  call `<init>`(v0, v3, v2) @signature `Lokio/Okio$1;.<init>:(Lokio/Timeout;Ljava/io/OutputStream;)V` @kind direct;
  #L1aecd2.  return v0 @kind object;
}
procedure `okio.Sink` `sink`(`java.net.Socket` v4 @kind object @name `socket`) @signature `Lokio/Okio;.sink:(Ljava/net/Socket;)Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1aece4.  if v4 != 0 then goto L1aecf8;
  #L1aece8.  v2:= new `java.lang.IllegalArgumentException`;
  #L1aecec.  v3:= "socket == null" @kind object;
  #L1aecf0.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aecf6.  throw v2;
  #L1aecf8.  call temp:= `getOutputStream`(v4) @signature `Ljava/net/Socket;.getOutputStream:()Ljava/io/OutputStream;` @kind virtual;
  #L1aecfe.  v2:= temp @kind object;
  #L1aed00.  if v2 != 0 then goto L1aed14;
  #L1aed04.  v2:= new `java.io.IOException`;
  #L1aed08.  v3:= "socket's output stream == null" @kind object;
  #L1aed0c.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aed12.  throw v2;
  #L1aed14.  call temp:= `timeout`(v4) @signature `Lokio/Okio;.timeout:(Ljava/net/Socket;)Lokio/AsyncTimeout;` @kind static;
  #L1aed1a.  v1:= temp @kind object;
  #L1aed1c.  call temp:= `getOutputStream`(v4) @signature `Ljava/net/Socket;.getOutputStream:()Ljava/io/OutputStream;` @kind virtual;
  #L1aed22.  v2:= temp @kind object;
  #L1aed24.  call temp:= `sink`(v2, v1) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;Lokio/Timeout;)Lokio/Sink;` @kind static;
  #L1aed2a.  v0:= temp @kind object;
  #L1aed2c.  call temp:= `sink`(v1, v0) @signature `Lokio/AsyncTimeout;.sink:(Lokio/Sink;)Lokio/Sink;` @kind virtual;
  #L1aed32.  v2:= temp @kind object;
  #L1aed34.  return v2 @kind object;
}
procedure `okio.Sink` `sink`(`java.nio.file.Path` v2 @kind object @name `path`, `java.nio.file.OpenOption`[] v3 @kind object @name `options`) @signature `Lokio/Okio;.sink:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Lokio/Sink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1aed48.  if v2 != 0 then goto L1aed5c;
  #L1aed4c.  v0:= new `java.lang.IllegalArgumentException`;
  #L1aed50.  v1:= "path == null" @kind object;
  #L1aed54.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aed5a.  throw v0;
  #L1aed5c.  call temp:= `newOutputStream`(v2, v3) @signature `Ljava/nio/file/Files;.newOutputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/OutputStream;` @kind static;
  #L1aed62.  v0:= temp @kind object;
  #L1aed64.  call temp:= `sink`(v0) @signature `Lokio/Okio;.sink:(Ljava/io/OutputStream;)Lokio/Sink;` @kind static;
  #L1aed6a.  v0:= temp @kind object;
  #L1aed6c.  return v0 @kind object;
}
procedure `okio.Source` `source`(`java.io.File` v2 @kind object @name `file`) @signature `Lokio/Okio;.source:(Ljava/io/File;)Lokio/Source;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1aed80.  if v2 != 0 then goto L1aed94;
  #L1aed84.  v0:= new `java.lang.IllegalArgumentException`;
  #L1aed88.  v1:= "file == null" @kind object;
  #L1aed8c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aed92.  throw v0;
  #L1aed94.  v0:= new `java.io.FileInputStream`;
  #L1aed98.  call `<init>`(v0, v2) @signature `Ljava/io/FileInputStream;.<init>:(Ljava/io/File;)V` @kind direct;
  #L1aed9e.  call temp:= `source`(v0) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;)Lokio/Source;` @kind static;
  #L1aeda4.  v0:= temp @kind object;
  #L1aeda6.  return v0 @kind object;
}
procedure `okio.Source` `source`(`java.io.InputStream` v1 @kind object @name `in`) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;)Lokio/Source;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1aedb8.  v0:= new `okio.Timeout`;
  #L1aedbc.  call `<init>`(v0) @signature `Lokio/Timeout;.<init>:()V` @kind direct;
  #L1aedc2.  call temp:= `source`(v1, v0) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;Lokio/Timeout;)Lokio/Source;` @kind static;
  #L1aedc8.  v0:= temp @kind object;
  #L1aedca.  return v0 @kind object;
}
procedure `okio.Source` `source`(`java.io.InputStream` v2 @kind object @name `in`, `okio.Timeout` v3 @kind object @name `timeout`) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;Lokio/Timeout;)Lokio/Source;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1aeddc.  if v2 != 0 then goto L1aedf0;
  #L1aede0.  v0:= new `java.lang.IllegalArgumentException`;
  #L1aede4.  v1:= "in == null" @kind object;
  #L1aede8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aedee.  throw v0;
  #L1aedf0.  if v3 != 0 then goto L1aee04;
  #L1aedf4.  v0:= new `java.lang.IllegalArgumentException`;
  #L1aedf8.  v1:= "timeout == null" @kind object;
  #L1aedfc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aee02.  throw v0;
  #L1aee04.  v0:= new `okio.Okio$2`;
  #L1aee08.  call `<init>`(v0, v3, v2) @signature `Lokio/Okio$2;.<init>:(Lokio/Timeout;Ljava/io/InputStream;)V` @kind direct;
  #L1aee0e.  return v0 @kind object;
}
procedure `okio.Source` `source`(`java.net.Socket` v4 @kind object @name `socket`) @signature `Lokio/Okio;.source:(Ljava/net/Socket;)Lokio/Source;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1aee20.  if v4 != 0 then goto L1aee34;
  #L1aee24.  v2:= new `java.lang.IllegalArgumentException`;
  #L1aee28.  v3:= "socket == null" @kind object;
  #L1aee2c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aee32.  throw v2;
  #L1aee34.  call temp:= `getInputStream`(v4) @signature `Ljava/net/Socket;.getInputStream:()Ljava/io/InputStream;` @kind virtual;
  #L1aee3a.  v2:= temp @kind object;
  #L1aee3c.  if v2 != 0 then goto L1aee50;
  #L1aee40.  v2:= new `java.io.IOException`;
  #L1aee44.  v3:= "socket's input stream == null" @kind object;
  #L1aee48.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aee4e.  throw v2;
  #L1aee50.  call temp:= `timeout`(v4) @signature `Lokio/Okio;.timeout:(Ljava/net/Socket;)Lokio/AsyncTimeout;` @kind static;
  #L1aee56.  v1:= temp @kind object;
  #L1aee58.  call temp:= `getInputStream`(v4) @signature `Ljava/net/Socket;.getInputStream:()Ljava/io/InputStream;` @kind virtual;
  #L1aee5e.  v2:= temp @kind object;
  #L1aee60.  call temp:= `source`(v2, v1) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;Lokio/Timeout;)Lokio/Source;` @kind static;
  #L1aee66.  v0:= temp @kind object;
  #L1aee68.  call temp:= `source`(v1, v0) @signature `Lokio/AsyncTimeout;.source:(Lokio/Source;)Lokio/Source;` @kind virtual;
  #L1aee6e.  v2:= temp @kind object;
  #L1aee70.  return v2 @kind object;
}
procedure `okio.Source` `source`(`java.nio.file.Path` v2 @kind object @name `path`, `java.nio.file.OpenOption`[] v3 @kind object @name `options`) @signature `Lokio/Okio;.source:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Lokio/Source;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1aee84.  if v2 != 0 then goto L1aee98;
  #L1aee88.  v0:= new `java.lang.IllegalArgumentException`;
  #L1aee8c.  v1:= "path == null" @kind object;
  #L1aee90.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1aee96.  throw v0;
  #L1aee98.  call temp:= `newInputStream`(v2, v3) @signature `Ljava/nio/file/Files;.newInputStream:(Ljava/nio/file/Path;[Ljava/nio/file/OpenOption;)Ljava/io/InputStream;` @kind static;
  #L1aee9e.  v0:= temp @kind object;
  #L1aeea0.  call temp:= `source`(v0) @signature `Lokio/Okio;.source:(Ljava/io/InputStream;)Lokio/Source;` @kind static;
  #L1aeea6.  v0:= temp @kind object;
  #L1aeea8.  return v0 @kind object;
}
procedure `okio.AsyncTimeout` `timeout`(`java.net.Socket` v1 @kind object @name `socket`) @signature `Lokio/Okio;.timeout:(Ljava/net/Socket;)Lokio/AsyncTimeout;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L1aeebc.  v0:= new `okio.Okio$4`;
  #L1aeec0.  call `<init>`(v0, v1) @signature `Lokio/Okio$4;.<init>:(Ljava/net/Socket;)V` @kind direct;
  #L1aeec6.  return v0 @kind object;
}
