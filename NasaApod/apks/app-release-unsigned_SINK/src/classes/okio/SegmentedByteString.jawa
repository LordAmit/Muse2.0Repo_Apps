record `okio.SegmentedByteString` @kind class @AccessFlag FINAL extends `okio.ByteString` @kind class {
  `int`[] `okio.SegmentedByteString.directory` @AccessFlag FINAL_TRANSIENT;
  `byte`[][] `okio.SegmentedByteString.segments` @AccessFlag FINAL_TRANSIENT;
}
procedure `void` `<init>`(`okio.SegmentedByteString` v9 @kind this, `okio.Buffer` v10 @kind object @name `buffer`, `int` v11 @name `byteCount`) @signature `Lokio/SegmentedByteString;.<init>:(Lokio/Buffer;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2205f8.  v0:= 0I;
  #L2205fa.  call `<init>`(v9, v0) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L220600.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L220604.  v2:= 0L;
  #L220608.  v4:= (`long`) v11 @kind i2l;
  #L22060a.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L220610.  v6:= 0I;
  #L220612.  v8:= 0I;
  #L220614.  v7:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L220618.  if v6 >= v11 then goto L22064e;
  #L22061c.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L220620.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L220624.  if v0 != v1 then goto L220638;
  #L220628.  v0:= new `java.lang.AssertionError`;
  #L22062c.  v1:= "s.limit == s.pos" @kind object;
  #L220630.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L220636.  throw v0;
  #L220638.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L22063c.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L220640.  v0:= v0 - v1 @kind int;
  #L220642.  v6:= v6 + v0 @kind int;
  #L220644.  v8:= v8 + 1;
  #L220648.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L22064c.  goto L220618;
  #L22064e.  v0:= new `byte`[][v8];
  #L220652.  v9.`okio.SegmentedByteString.segments` @type ^`byte`[][] := v0 @kind object;
  #L220656.  v0:= v8 * 2;
  #L22065a.  v0:= new `int`[v0];
  #L22065e.  v9.`okio.SegmentedByteString.directory` @type ^`int`[] := v0 @kind object;
  #L220662.  v6:= 0I;
  #L220664.  v8:= 0I;
  #L220666.  v7:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L22066a.  if v6 >= v11 then goto L2206b8;
  #L22066e.  v0:= v9.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L220672.  v1:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L220676.  v0[v8]:= v1 @kind object;
  #L22067a.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L22067e.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L220682.  v0:= v0 - v1 @kind int;
  #L220684.  v6:= v6 + v0 @kind int;
  #L220686.  if v6 <= v11 then goto L22068c;
  #L22068a.  v6:= v11;
  #L22068c.  v0:= v9.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220690.  v0[v8]:= v6;
  #L220694.  v0:= v9.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220698.  v1:= v9.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L22069c.  v1:= length @variable v1;
  #L22069e.  v1:= v1 + v8 @kind int;
  #L2206a0.  v2:= v7.`okio.Segment.pos` @type ^`int`;
  #L2206a4.  v0[v1]:= v2;
  #L2206a8.  v0:= 1I;
  #L2206aa.  v7.`okio.Segment.shared` @type ^`boolean` := v0 @kind boolean;
  #L2206ae.  v8:= v8 + 1;
  #L2206b2.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2206b6.  goto L22066a;
  #L2206b8.  return @kind void;
}
procedure `int` `segment`(`okio.SegmentedByteString` v5 @kind this, `int` v6 @name `pos`) @signature `Lokio/SegmentedByteString;.segment:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L2206cc.  v1:= v5.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L2206d0.  v2:= 0I;
  #L2206d2.  v3:= v5.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L2206d6.  v3:= length @variable v3;
  #L2206d8.  v4:= v6 + 1;
  #L2206dc.  call temp:= `binarySearch`(v1, v2, v3, v4) @signature `Ljava/util/Arrays;.binarySearch:([IIII)I` @kind static;
  #L2206e2.  v0:= temp;
  #L2206e4.  if v0 < 0 then goto L2206ea;
  #L2206e8.  return v0;
  #L2206ea.  v0:= v0 ^~ -1;
  #L2206ee.  goto L2206e8;
}
procedure `okio.ByteString` `toByteString`(`okio.SegmentedByteString` v2 @kind this) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L220700.  v0:= new `okio.ByteString`;
  #L220704.  call temp:= `toByteArray`(v2) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @kind virtual;
  #L22070a.  v1:= temp @kind object;
  #L22070c.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L220712.  return v0 @kind object;
}
procedure `java.lang.Object` `writeReplace`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.writeReplace:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L220724.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L22072a.  v0:= temp @kind object;
  #L22072c.  return v0 @kind object;
}
procedure `java.nio.ByteBuffer` `asByteBuffer`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.asByteBuffer:()Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220740.  call temp:= `toByteArray`(v1) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @kind virtual;
  #L220746.  v0:= temp @kind object;
  #L220748.  call temp:= `wrap`(v0) @signature `Ljava/nio/ByteBuffer;.wrap:([B)Ljava/nio/ByteBuffer;` @kind static;
  #L22074e.  v0:= temp @kind object;
  #L220750.  call temp:= `asReadOnlyBuffer`(v0) @signature `Ljava/nio/ByteBuffer;.asReadOnlyBuffer:()Ljava/nio/ByteBuffer;` @kind virtual;
  #L220756.  v0:= temp @kind object;
  #L220758.  return v0 @kind object;
}
procedure `java.lang.String` `base64`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.base64:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22076c.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L220772.  v0:= temp @kind object;
  #L220774.  call temp:= `base64`(v0) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L22077a.  v0:= temp @kind object;
  #L22077c.  return v0 @kind object;
}
procedure `java.lang.String` `base64Url`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.base64Url:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220790.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L220796.  v0:= temp @kind object;
  #L220798.  call temp:= `base64Url`(v0) @signature `Lokio/ByteString;.base64Url:()Ljava/lang/String;` @kind virtual;
  #L22079e.  v0:= temp @kind object;
  #L2207a0.  return v0 @kind object;
}
procedure `boolean` `equals`(`okio.SegmentedByteString` v4 @kind this, `java.lang.Object` v5 @kind object @name `o`) @signature `Lokio/SegmentedByteString;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2207b4.  v1:= 1I;
  #L2207b6.  v2:= 0I;
  #L2207b8.  if v5 != v4 then goto L2207be;
  #L2207bc.  return v1;
  #L2207be.  v0:= instanceof @variable v5 @type ^`okio.ByteString` @kind boolean;
  #L2207c2.  if v0 == 0 then goto L2207fe;
  #L2207c6.  v0:= v5 @kind object;
  #L2207c8.  v0:= (`okio.ByteString`) v0 @kind object;
  #L2207cc.  call temp:= `size`(v0) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L2207d2.  v0:= temp;
  #L2207d4.  call temp:= `size`(v4) @signature `Lokio/SegmentedByteString;.size:()I` @kind virtual;
  #L2207da.  v3:= temp;
  #L2207dc.  if v0 != v3 then goto L2207fe;
  #L2207e0.  v5:= (`okio.ByteString`) v5 @kind object;
  #L2207e4.  call temp:= `size`(v4) @signature `Lokio/SegmentedByteString;.size:()I` @kind virtual;
  #L2207ea.  v0:= temp;
  #L2207ec.  call temp:= `rangeEquals`(v4, v2, v5, v2, v0) @signature `Lokio/SegmentedByteString;.rangeEquals:(ILokio/ByteString;II)Z` @kind virtual;
  #L2207f2.  v0:= temp;
  #L2207f4.  if v0 == 0 then goto L2207fe;
  #L2207f8.  v0:= v1;
  #L2207fa.  v1:= v0;
  #L2207fc.  goto L2207bc;
  #L2207fe.  v0:= v2;
  #L220800.  goto L2207fa;
}
procedure `byte` `getByte`(`okio.SegmentedByteString` v9 @kind this, `int` v10 @name `pos`) @signature `Lokio/SegmentedByteString;.getByte:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L220814.  v0:= v9.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220818.  v1:= v9.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L22081c.  v1:= length @variable v1;
  #L22081e.  v1:= v1 + -1;
  #L220822.  v0:= v0[v1];
  #L220826.  v0:= (`long`) v0 @kind i2l;
  #L220828.  v2:= (`long`) v10 @kind i2l;
  #L22082a.  v4:= 1L;
  #L22082e.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L220834.  call temp:= `segment`(v9, v10) @signature `Lokio/SegmentedByteString;.segment:(I)I` @kind direct;
  #L22083a.  v6:= temp;
  #L22083c.  if v6 != 0 then goto L220866;
  #L220840.  v7:= 0I;
  #L220842.  v0:= v9.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220846.  v1:= v9.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L22084a.  v1:= length @variable v1;
  #L22084c.  v1:= v1 + v6 @kind int;
  #L22084e.  v8:= v0[v1];
  #L220852.  v0:= v9.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L220856.  v0:= v0[v6] @kind object;
  #L22085a.  v1:= v10 - v7 @kind int;
  #L22085e.  v1:= v1 + v8 @kind int;
  #L220860.  v0:= v0[v1] @kind byte;
  #L220864.  return v0;
  #L220866.  v0:= v9.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L22086a.  v1:= v6 + -1;
  #L22086e.  v7:= v0[v1];
  #L220872.  goto L220842;
}
procedure `int` `hashCode`(`okio.SegmentedByteString` v13 @kind this) @signature `Lokio/SegmentedByteString;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L220884.  v3:= v13.`okio.SegmentedByteString.hashCode` @type ^`int`;
  #L220888.  if v3 == 0 then goto L220890;
  #L22088c.  v4:= v3;
  #L22088e.  return v4;
  #L220890.  v3:= 1I;
  #L220892.  v8:= 0I;
  #L220894.  v5:= 0I;
  #L220896.  v11:= v13.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L22089a.  v7:= length @variable v11;
  #L22089c.  if v5 >= v7 then goto L2208e4;
  #L2208a0.  v11:= v13.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L2208a4.  v6:= v11[v5] @kind object;
  #L2208a8.  v11:= v13.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L2208ac.  v12:= v7 + v5 @kind int;
  #L2208b0.  v9:= v11[v12];
  #L2208b4.  v11:= v13.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L2208b8.  v2:= v11[v5];
  #L2208bc.  v10:= v2 - v8 @kind int;
  #L2208c0.  v0:= v9;
  #L2208c2.  v1:= v9 + v10 @kind int;
  #L2208c6.  if v0 >= v1 then goto L2208dc;
  #L2208ca.  v11:= v3 * 31;
  #L2208ce.  v12:= v6[v0] @kind byte;
  #L2208d2.  v3:= v11 + v12 @kind int;
  #L2208d6.  v0:= v0 + 1;
  #L2208da.  goto L2208c6;
  #L2208dc.  v8:= v2;
  #L2208de.  v5:= v5 + 1;
  #L2208e2.  goto L22089c;
  #L2208e4.  v13.`okio.SegmentedByteString.hashCode` @type ^`int` := v3;
  #L2208e8.  v4:= v3;
  #L2208ea.  goto L22088e;
}
procedure `java.lang.String` `hex`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.hex:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2208fc.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L220902.  v0:= temp @kind object;
  #L220904.  call temp:= `hex`(v0) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L22090a.  v0:= temp @kind object;
  #L22090c.  return v0 @kind object;
}
procedure `okio.ByteString` `hmacSha1`(`okio.SegmentedByteString` v1 @kind this, `okio.ByteString` v2 @kind object @name `key`) @signature `Lokio/SegmentedByteString;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220920.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L220926.  v0:= temp @kind object;
  #L220928.  call temp:= `hmacSha1`(v0, v2) @signature `Lokio/ByteString;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @kind virtual;
  #L22092e.  v0:= temp @kind object;
  #L220930.  return v0 @kind object;
}
procedure `okio.ByteString` `hmacSha256`(`okio.SegmentedByteString` v1 @kind this, `okio.ByteString` v2 @kind object @name `key`) @signature `Lokio/SegmentedByteString;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220944.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L22094a.  v0:= temp @kind object;
  #L22094c.  call temp:= `hmacSha256`(v0, v2) @signature `Lokio/ByteString;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @kind virtual;
  #L220952.  v0:= temp @kind object;
  #L220954.  return v0 @kind object;
}
procedure `int` `indexOf`(`okio.SegmentedByteString` v1 @kind this, `byte`[] v2 @kind object @name `other`, `int` v3 @name `fromIndex`) @signature `Lokio/SegmentedByteString;.indexOf:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220968.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L22096e.  v0:= temp @kind object;
  #L220970.  call temp:= `indexOf`(v0, v2, v3) @signature `Lokio/ByteString;.indexOf:([BI)I` @kind virtual;
  #L220976.  v0:= temp;
  #L220978.  return v0;
}
procedure `byte`[] `internalArray`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.internalArray:()[B` @AccessFlag  {
    temp;
    v0;

  #L22098c.  call temp:= `toByteArray`(v1) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @kind virtual;
  #L220992.  v0:= temp @kind object;
  #L220994.  return v0 @kind object;
}
procedure `int` `lastIndexOf`(`okio.SegmentedByteString` v1 @kind this, `byte`[] v2 @kind object @name `other`, `int` v3 @name `fromIndex`) @signature `Lokio/SegmentedByteString;.lastIndexOf:([BI)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2209a8.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2209ae.  v0:= temp @kind object;
  #L2209b0.  call temp:= `lastIndexOf`(v0, v2, v3) @signature `Lokio/ByteString;.lastIndexOf:([BI)I` @kind virtual;
  #L2209b6.  v0:= temp;
  #L2209b8.  return v0;
}
procedure `okio.ByteString` `md5`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.md5:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2209cc.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L2209d2.  v0:= temp @kind object;
  #L2209d4.  call temp:= `md5`(v0) @signature `Lokio/ByteString;.md5:()Lokio/ByteString;` @kind virtual;
  #L2209da.  v0:= temp @kind object;
  #L2209dc.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.SegmentedByteString` v9 @kind this, `int` v10 @name `offset`, `okio.ByteString` v11 @kind object @name `other`, `int` v12 @name `otherOffset`, `int` v13 @name `byteCount`) @signature `Lokio/SegmentedByteString;.rangeEquals:(ILokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2209f0.  v6:= 0I;
  #L2209f2.  if v10 < 0 then goto L220a04;
  #L2209f6.  call temp:= `size`(v9) @signature `Lokio/SegmentedByteString;.size:()I` @kind virtual;
  #L2209fc.  v7:= temp;
  #L2209fe.  v7:= v7 - v13 @kind int;
  #L220a00.  if v10 <= v7 then goto L220a06;
  #L220a04.  return v6;
  #L220a06.  call temp:= `segment`(v9, v10) @signature `Lokio/SegmentedByteString;.segment:(I)I` @kind direct;
  #L220a0c.  v1:= temp;
  #L220a0e.  if v13 <= 0 then goto L220a78;
  #L220a12.  if v1 != 0 then goto L220a6a;
  #L220a16.  v2:= v6;
  #L220a18.  v7:= v9.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220a1c.  v7:= v7[v1];
  #L220a20.  v4:= v7 - v2 @kind int;
  #L220a24.  v7:= v2 + v4 @kind int;
  #L220a28.  v7:= v7 - v10 @kind int;
  #L220a2a.  call temp:= `min`(v13, v7) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L220a30.  v5:= temp;
  #L220a32.  v7:= v9.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220a36.  v8:= v9.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L220a3a.  v8:= length @variable v8;
  #L220a3c.  v8:= v8 + v1 @kind int;
  #L220a3e.  v3:= v7[v8];
  #L220a42.  v7:= v10 - v2 @kind int;
  #L220a46.  v0:= v7 + v3 @kind int;
  #L220a4a.  v7:= v9.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L220a4e.  v7:= v7[v1] @kind object;
  #L220a52.  call temp:= `rangeEquals`(v11, v12, v7, v0, v5) @signature `Lokio/ByteString;.rangeEquals:(I[BII)Z` @kind virtual;
  #L220a58.  v7:= temp;
  #L220a5a.  if v7 == 0 then goto L220a04;
  #L220a5e.  v10:= v10 + v5 @kind int;
  #L220a60.  v12:= v12 + v5 @kind int;
  #L220a62.  v13:= v13 - v5 @kind int;
  #L220a64.  v1:= v1 + 1;
  #L220a68.  goto L220a0e;
  #L220a6a.  v7:= v9.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220a6e.  v8:= v1 + -1;
  #L220a72.  v2:= v7[v8];
  #L220a76.  goto L220a18;
  #L220a78.  v6:= 1I;
  #L220a7a.  goto L220a04;
}
procedure `boolean` `rangeEquals`(`okio.SegmentedByteString` v9 @kind this, `int` v10 @name `offset`, `byte`[] v11 @kind object @name `other`, `int` v12 @name `otherOffset`, `int` v13 @name `byteCount`) @signature `Lokio/SegmentedByteString;.rangeEquals:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L220a8c.  v6:= 0I;
  #L220a8e.  if v10 < 0 then goto L220aac;
  #L220a92.  call temp:= `size`(v9) @signature `Lokio/SegmentedByteString;.size:()I` @kind virtual;
  #L220a98.  v7:= temp;
  #L220a9a.  v7:= v7 - v13 @kind int;
  #L220a9c.  if v10 > v7 then goto L220aac;
  #L220aa0.  if v12 < 0 then goto L220aac;
  #L220aa4.  v7:= length @variable v11;
  #L220aa6.  v7:= v7 - v13 @kind int;
  #L220aa8.  if v12 <= v7 then goto L220aae;
  #L220aac.  return v6;
  #L220aae.  call temp:= `segment`(v9, v10) @signature `Lokio/SegmentedByteString;.segment:(I)I` @kind direct;
  #L220ab4.  v1:= temp;
  #L220ab6.  if v13 <= 0 then goto L220b20;
  #L220aba.  if v1 != 0 then goto L220b12;
  #L220abe.  v2:= v6;
  #L220ac0.  v7:= v9.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220ac4.  v7:= v7[v1];
  #L220ac8.  v4:= v7 - v2 @kind int;
  #L220acc.  v7:= v2 + v4 @kind int;
  #L220ad0.  v7:= v7 - v10 @kind int;
  #L220ad2.  call temp:= `min`(v13, v7) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L220ad8.  v5:= temp;
  #L220ada.  v7:= v9.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220ade.  v8:= v9.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L220ae2.  v8:= length @variable v8;
  #L220ae4.  v8:= v8 + v1 @kind int;
  #L220ae6.  v3:= v7[v8];
  #L220aea.  v7:= v10 - v2 @kind int;
  #L220aee.  v0:= v7 + v3 @kind int;
  #L220af2.  v7:= v9.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L220af6.  v7:= v7[v1] @kind object;
  #L220afa.  call temp:= `arrayRangeEquals`(v7, v0, v11, v12, v5) @signature `Lokio/Util;.arrayRangeEquals:([BI[BII)Z` @kind static;
  #L220b00.  v7:= temp;
  #L220b02.  if v7 == 0 then goto L220aac;
  #L220b06.  v10:= v10 + v5 @kind int;
  #L220b08.  v12:= v12 + v5 @kind int;
  #L220b0a.  v13:= v13 - v5 @kind int;
  #L220b0c.  v1:= v1 + 1;
  #L220b10.  goto L220ab6;
  #L220b12.  v7:= v9.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220b16.  v8:= v1 + -1;
  #L220b1a.  v2:= v7[v8];
  #L220b1e.  goto L220ac0;
  #L220b20.  v6:= 1I;
  #L220b22.  goto L220aac;
}
procedure `okio.ByteString` `sha1`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.sha1:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220b34.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L220b3a.  v0:= temp @kind object;
  #L220b3c.  call temp:= `sha1`(v0) @signature `Lokio/ByteString;.sha1:()Lokio/ByteString;` @kind virtual;
  #L220b42.  v0:= temp @kind object;
  #L220b44.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.sha256:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220b58.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L220b5e.  v0:= temp @kind object;
  #L220b60.  call temp:= `sha256`(v0) @signature `Lokio/ByteString;.sha256:()Lokio/ByteString;` @kind virtual;
  #L220b66.  v0:= temp @kind object;
  #L220b68.  return v0 @kind object;
}
procedure `int` `size`(`okio.SegmentedByteString` v2 @kind this) @signature `Lokio/SegmentedByteString;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L220b7c.  v0:= v2.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220b80.  v1:= v2.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L220b84.  v1:= length @variable v1;
  #L220b86.  v1:= v1 + -1;
  #L220b8a.  v0:= v0[v1];
  #L220b8e.  return v0;
}
procedure `java.lang.String` `string`(`okio.SegmentedByteString` v1 @kind this, `java.nio.charset.Charset` v2 @kind object @name `charset`) @signature `Lokio/SegmentedByteString;.string:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220ba0.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L220ba6.  v0:= temp @kind object;
  #L220ba8.  call temp:= `string`(v0, v2) @signature `Lokio/ByteString;.string:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L220bae.  v0:= temp @kind object;
  #L220bb0.  return v0 @kind object;
}
procedure `okio.ByteString` `substring`(`okio.SegmentedByteString` v1 @kind this, `int` v2 @name `beginIndex`) @signature `Lokio/SegmentedByteString;.substring:(I)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220bc4.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L220bca.  v0:= temp @kind object;
  #L220bcc.  call temp:= `substring`(v0, v2) @signature `Lokio/ByteString;.substring:(I)Lokio/ByteString;` @kind virtual;
  #L220bd2.  v0:= temp @kind object;
  #L220bd4.  return v0 @kind object;
}
procedure `okio.ByteString` `substring`(`okio.SegmentedByteString` v1 @kind this, `int` v2 @name `beginIndex`, `int` v3 @name `endIndex`) @signature `Lokio/SegmentedByteString;.substring:(II)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220be8.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L220bee.  v0:= temp @kind object;
  #L220bf0.  call temp:= `substring`(v0, v2, v3) @signature `Lokio/ByteString;.substring:(II)Lokio/ByteString;` @kind virtual;
  #L220bf6.  v0:= temp @kind object;
  #L220bf8.  return v0 @kind object;
}
procedure `okio.ByteString` `toAsciiLowercase`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toAsciiLowercase:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220c0c.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L220c12.  v0:= temp @kind object;
  #L220c14.  call temp:= `toAsciiLowercase`(v0) @signature `Lokio/ByteString;.toAsciiLowercase:()Lokio/ByteString;` @kind virtual;
  #L220c1a.  v0:= temp @kind object;
  #L220c1c.  return v0 @kind object;
}
procedure `okio.ByteString` `toAsciiUppercase`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toAsciiUppercase:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220c30.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L220c36.  v0:= temp @kind object;
  #L220c38.  call temp:= `toAsciiUppercase`(v0) @signature `Lokio/ByteString;.toAsciiUppercase:()Lokio/ByteString;` @kind virtual;
  #L220c3e.  v0:= temp @kind object;
  #L220c40.  return v0 @kind object;
}
procedure `byte`[] `toByteArray`(`okio.SegmentedByteString` v8 @kind this) @signature `Lokio/SegmentedByteString;.toByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L220c54.  v6:= v8.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220c58.  v7:= v8.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L220c5c.  v7:= length @variable v7;
  #L220c5e.  v7:= v7 + -1;
  #L220c62.  v6:= v6[v7];
  #L220c66.  v1:= new `byte`[v6];
  #L220c6a.  v4:= 0I;
  #L220c6c.  v2:= 0I;
  #L220c6e.  v6:= v8.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L220c72.  v3:= length @variable v6;
  #L220c74.  if v2 >= v3 then goto L220ca6;
  #L220c78.  v6:= v8.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220c7c.  v7:= v3 + v2 @kind int;
  #L220c80.  v5:= v6[v7];
  #L220c84.  v6:= v8.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220c88.  v0:= v6[v2];
  #L220c8c.  v6:= v8.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L220c90.  v6:= v6[v2] @kind object;
  #L220c94.  v7:= v0 - v4 @kind int;
  #L220c98.  call `arraycopy`(v6, v5, v1, v4, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L220c9e.  v4:= v0;
  #L220ca0.  v2:= v2 + 1;
  #L220ca4.  goto L220c74;
  #L220ca6.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220cb8.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L220cbe.  v0:= temp @kind object;
  #L220cc0.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L220cc6.  v0:= temp @kind object;
  #L220cc8.  return v0 @kind object;
}
procedure `java.lang.String` `utf8`(`okio.SegmentedByteString` v1 @kind this) @signature `Lokio/SegmentedByteString;.utf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L220cdc.  call temp:= `toByteString`(v1) @signature `Lokio/SegmentedByteString;.toByteString:()Lokio/ByteString;` @kind direct;
  #L220ce2.  v0:= temp @kind object;
  #L220ce4.  call temp:= `utf8`(v0) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L220cea.  v0:= temp @kind object;
  #L220cec.  return v0 @kind object;
}
procedure `void` `write`(`okio.SegmentedByteString` v7 @kind this, `java.io.OutputStream` v8 @kind object @name `out`) @signature `Lokio/SegmentedByteString;.write:(Ljava/io/OutputStream;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L220d00.  if v8 != 0 then goto L220d14;
  #L220d04.  v5:= new `java.lang.IllegalArgumentException`;
  #L220d08.  v6:= "out == null" @kind object;
  #L220d0c.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L220d12.  throw v5;
  #L220d14.  v3:= 0I;
  #L220d16.  v1:= 0I;
  #L220d18.  v5:= v7.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L220d1c.  v2:= length @variable v5;
  #L220d1e.  if v1 >= v2 then goto L220d50;
  #L220d22.  v5:= v7.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220d26.  v6:= v2 + v1 @kind int;
  #L220d2a.  v4:= v5[v6];
  #L220d2e.  v5:= v7.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220d32.  v0:= v5[v1];
  #L220d36.  v5:= v7.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L220d3a.  v5:= v5[v1] @kind object;
  #L220d3e.  v6:= v0 - v3 @kind int;
  #L220d42.  call `write`(v8, v5, v4, v6) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L220d48.  v3:= v0;
  #L220d4a.  v1:= v1 + 1;
  #L220d4e.  goto L220d1e;
  #L220d50.  return @kind void;
}
procedure `void` `write`(`okio.SegmentedByteString` v12 @kind this, `okio.Buffer` v13 @kind object @name `buffer`) @signature `Lokio/SegmentedByteString;.write:(Lokio/Buffer;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L220d64.  v9:= 0I;
  #L220d66.  v7:= 0I;
  #L220d68.  v1:= v12.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L220d6c.  v8:= length @variable v1;
  #L220d6e.  if v7 >= v8 then goto L220dce;
  #L220d72.  v1:= v12.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220d76.  v3:= v8 + v7 @kind int;
  #L220d7a.  v2:= v1[v3];
  #L220d7e.  v1:= v12.`okio.SegmentedByteString.directory` @type ^`int`[] @kind object;
  #L220d82.  v6:= v1[v7];
  #L220d86.  v0:= new `okio.Segment`;
  #L220d8a.  v1:= v12.`okio.SegmentedByteString.segments` @type ^`byte`[][] @kind object;
  #L220d8e.  v1:= v1[v7] @kind object;
  #L220d92.  v3:= v2 + v6 @kind int;
  #L220d96.  v3:= v3 - v9 @kind int;
  #L220d98.  v4:= 1I;
  #L220d9a.  v5:= 0I;
  #L220d9c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @kind direct;
  #L220da2.  v1:= v13.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L220da6.  if v1 != 0 then goto L220dbe;
  #L220daa.  v0.`okio.Segment.prev` @type ^`okio.Segment` := v0 @kind object;
  #L220dae.  v0.`okio.Segment.next` @type ^`okio.Segment` := v0 @kind object;
  #L220db2.  v13.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L220db6.  v9:= v6;
  #L220db8.  v7:= v7 + 1;
  #L220dbc.  goto L220d6e;
  #L220dbe.  v1:= v13.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L220dc2.  v1:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L220dc6.  call temp:= `push`(v1, v0) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L220dcc.  goto L220db6;
  #L220dce.  v4:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L220dd2.  v10:= (`long`) v9 @kind i2l;
  #L220dd4.  v4:= v4 + v10 @kind long;
  #L220dd6.  v13.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L220dda.  return @kind void;
}
