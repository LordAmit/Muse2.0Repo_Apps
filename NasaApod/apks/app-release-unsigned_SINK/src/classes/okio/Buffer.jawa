record `okio.Buffer` @kind class @AccessFlag PUBLIC_FINAL extends `okio.BufferedSource` @kind interface, `okio.BufferedSink` @kind interface, `java.lang.Cloneable` @kind interface, `java.nio.channels.ByteChannel` @kind interface {
  `okio.Segment` `okio.Buffer.head` @AccessFlag ;
  `long` `okio.Buffer.size` @AccessFlag ;
}
global `byte`[] `@@okio.Buffer.DIGITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okio.Buffer.REPLACEMENT_CHARACTER` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Buffer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L246eb4.  v0:= 16I;
  #L246eb8.  v0:= new `byte`[v0];
  #L246ebc.  goto L246ec8;
  #L246ec2.  `@@okio.Buffer.DIGITS` @type ^`byte`[] := v0 @kind object;
  #L246ec6.  return @kind void;
  #L246ec8.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L246edf.  goto L246ec2;
}
procedure `void` `<init>`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L246ef0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L246ef6.  return @kind void;
}
procedure `okio.ByteString` `digest`(`okio.Buffer` v7 @kind this, `java.lang.String` v8 @kind object @name `algorithm`) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #Try_start0.  
  #L246f08.  call temp:= `getInstance`(v8) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L246f0e.  v1:= temp @kind object;
  #L246f10.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246f14.  if v3 == 0 then goto L246f6e;
  #L246f18.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246f1c.  v3:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246f20.  v4:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246f24.  v4:= v4.`okio.Segment.pos` @type ^`int`;
  #L246f28.  v5:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246f2c.  v5:= v5.`okio.Segment.limit` @type ^`int`;
  #L246f30.  v6:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246f34.  v6:= v6.`okio.Segment.pos` @type ^`int`;
  #L246f38.  v5:= v5 - v6 @kind int;
  #L246f3a.  call `update`(v1, v3, v4, v5) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L246f40.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246f44.  v2:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L246f48.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246f4c.  if v2 == v3 then goto L246f6e;
  #L246f50.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246f54.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L246f58.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L246f5c.  v6:= v2.`okio.Segment.pos` @type ^`int`;
  #L246f60.  v5:= v5 - v6 @kind int;
  #L246f62.  call `update`(v1, v3, v4, v5) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L246f68.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L246f6c.  goto L246f48;
  #L246f6e.  call temp:= `digest`(v1) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L246f74.  v3:= temp @kind object;
  #L246f76.  call temp:= `of`(v3) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #Try_end0.  
  #L246f7c.  v3:= temp @kind object;
  #L246f7e.  return v3 @kind object;
  #L246f80.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L246f82.  v3:= new `java.lang.AssertionError`;
  #L246f86.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L246f8c.  throw v3;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L246f80;
}
procedure `okio.ByteString` `hmac`(`okio.Buffer` v7 @kind this, `java.lang.String` v8 @kind object @name `algorithm`, `okio.ByteString` v9 @kind object @name `key`) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #Try_start0.  
  #L246fb0.  call temp:= `getInstance`(v8) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L246fb6.  v1:= temp @kind object;
  #L246fb8.  v3:= new `javax.crypto.spec.SecretKeySpec`;
  #L246fbc.  call temp:= `toByteArray`(v9) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L246fc2.  v4:= temp @kind object;
  #L246fc4.  call `<init>`(v3, v4, v8) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L246fca.  call `init`(v1, v3) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L246fd0.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246fd4.  if v3 == 0 then goto L24702e;
  #L246fd8.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246fdc.  v3:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246fe0.  v4:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246fe4.  v4:= v4.`okio.Segment.pos` @type ^`int`;
  #L246fe8.  v5:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246fec.  v5:= v5.`okio.Segment.limit` @type ^`int`;
  #L246ff0.  v6:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246ff4.  v6:= v6.`okio.Segment.pos` @type ^`int`;
  #L246ff8.  v5:= v5 - v6 @kind int;
  #L246ffa.  call `update`(v1, v3, v4, v5) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L247000.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247004.  v2:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L247008.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24700c.  if v2 == v3 then goto L24702e;
  #L247010.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247014.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L247018.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L24701c.  v6:= v2.`okio.Segment.pos` @type ^`int`;
  #L247020.  v5:= v5 - v6 @kind int;
  #L247022.  call `update`(v1, v3, v4, v5) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L247028.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24702c.  goto L247008;
  #L24702e.  call temp:= `doFinal`(v1) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L247034.  v3:= temp @kind object;
  #L247036.  call temp:= `of`(v3) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #Try_end0.  
  #L24703c.  v3:= temp @kind object;
  #L24703e.  return v3 @kind object;
  #L247040.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L247042.  v3:= new `java.lang.AssertionError`;
  #L247046.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L24704c.  throw v3;
  #L24704e.  v0:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L247050.  v3:= new `java.lang.IllegalArgumentException`;
  #L247054.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L24705a.  throw v3;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L247040;
  catch `java.security.InvalidKeyException` @[Try_start0..Try_end0] goto L24704e;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v5 @kind this, `okio.Segment` v6 @kind object @name `segment`, `int` v7 @name `segmentPos`, `okio.ByteString` v8 @kind object @name `bytes`, `int` v9 @name `bytesOffset`, `int` v10 @name `bytesLimit`) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24707c.  v2:= v6.`okio.Segment.limit` @type ^`int`;
  #L247080.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247084.  v1:= v9;
  #L247086.  if v1 >= v10 then goto L2470bc;
  #L24708a.  if v7 != v2 then goto L24709e;
  #L24708e.  v6:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L247092.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247096.  v7:= v6.`okio.Segment.pos` @type ^`int`;
  #L24709a.  v2:= v6.`okio.Segment.limit` @type ^`int`;
  #L24709e.  v3:= v0[v7] @kind byte;
  #L2470a2.  call temp:= `getByte`(v8, v1) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L2470a8.  v4:= temp;
  #L2470aa.  if v3 == v4 then goto L2470b2;
  #L2470ae.  v3:= 0I;
  #L2470b0.  return v3;
  #L2470b2.  v7:= v7 + 1;
  #L2470b6.  v1:= v1 + 1;
  #L2470ba.  goto L247086;
  #L2470bc.  v3:= 1I;
  #L2470be.  goto L2470b0;
}
procedure `void` `readFrom`(`okio.Buffer` v8 @kind this, `java.io.InputStream` v9 @kind object @name `in`, `long` v10 @name `byteCount`, `boolean` v12 @name `forever`) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2470d0.  if v9 != 0 then goto L2470fe;
  #L2470d4.  v3:= new `java.lang.IllegalArgumentException`;
  #L2470d8.  v4:= "in == null" @kind object;
  #L2470dc.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2470e2.  throw v3;
  #L2470e4.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L2470e8.  v3:= v3 + v0 @kind int;
  #L2470ea.  v2.`okio.Segment.limit` @type ^`int` := v3;
  #L2470ee.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2470f2.  v6:= (`long`) v0 @kind i2l;
  #L2470f4.  v4:= v4 + v6 @kind long;
  #L2470f6.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L2470fa.  v4:= (`long`) v0 @kind i2l;
  #L2470fc.  v10:= v10 - v4 @kind long;
  #L2470fe.  v4:= 0L;
  #L247102.  v3:= lcmp(v10, v4);
  #L247106.  if v3 > 0 then goto L24710e;
  #L24710a.  if v12 == 0 then goto L247146;
  #L24710e.  v3:= 1I;
  #L247110.  call temp:= `writableSegment`(v8, v3) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L247116.  v2:= temp @kind object;
  #L247118.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24711c.  v3:= v3 - 8192;
  #L247120.  v4:= (`long`) v3 @kind i2l;
  #L247122.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L247128.  v4:= temp @kind wide;
  #L24712a.  v1:= (`int`) v4 @kind l2i;
  #L24712c.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247130.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L247134.  call temp:= `read`(v9, v3, v4, v1) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L24713a.  v0:= temp;
  #L24713c.  v3:= -1I;
  #L24713e.  if v0 != v3 then goto L2470e4;
  #L247142.  if v12 == 0 then goto L247148;
  #L247146.  return @kind void;
  #L247148.  v3:= new `java.io.EOFException`;
  #L24714c.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L247152.  throw v3;
}
procedure `okio.Buffer` `buffer`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L247164.  return v0 @kind object;
}
procedure `void` `clear`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L247178.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24717c.  call `skip`(v4, v2) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #Try_end0.  
  #L247182.  return @kind void;
  #L247184.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L247186.  v1:= new `java.lang.AssertionError`;
  #L24718a.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L247190.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L247184;
}
procedure `java.lang.Object` `clone`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2471b4.  call temp:= `clone`(v1) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @kind virtual;
  #L2471ba.  v0:= temp @kind object;
  #L2471bc.  return v0 @kind object;
}
procedure `okio.Buffer` `clone`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2471d0.  v0:= new `okio.Buffer`;
  #L2471d4.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L2471da.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2471de.  v4:= 0L;
  #L2471e2.  v2:= lcmp(v2, v4);
  #L2471e6.  if v2 != 0 then goto L2471ec;
  #L2471ea.  return v0 @kind object;
  #L2471ec.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2471f0.  call temp:= `sharedCopy`(v2) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L2471f6.  v2:= temp @kind object;
  #L2471f8.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L2471fc.  v2:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247200.  v3:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247204.  v4:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247208.  v3.`okio.Segment.prev` @type ^`okio.Segment` := v4 @kind object;
  #L24720c.  v2.`okio.Segment.next` @type ^`okio.Segment` := v4 @kind object;
  #L247210.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247214.  v1:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L247218.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24721c.  if v1 == v2 then goto L24723c;
  #L247220.  v2:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247224.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L247228.  call temp:= `sharedCopy`(v1) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L24722e.  v3:= temp @kind object;
  #L247230.  call temp:= `push`(v2, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L247236.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24723a.  goto L247218;
  #L24723c.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247240.  v0.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L247244.  goto L2471ea;
}
procedure `void` `close`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L247258.  return @kind void;
}
procedure `long` `completeSegmentByteCount`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24726c.  v4:= 0L;
  #L247270.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247274.  v3:= lcmp(v0, v4);
  #L247278.  if v3 != 0 then goto L24727e;
  #L24727c.  return v4 @kind wide;
  #L24727e.  v3:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247282.  v2:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L247286.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24728a.  v4:= 8192I;
  #L24728e.  if v3 >= v4 then goto L2472a8;
  #L247292.  v3:= v2.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L247296.  if v3 == 0 then goto L2472a8;
  #L24729a.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24729e.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L2472a2.  v3:= v3 - v4 @kind int;
  #L2472a4.  v4:= (`long`) v3 @kind i2l;
  #L2472a6.  v0:= v0 - v4 @kind long;
  #L2472a8.  v4:= v0 @kind wide;
  #L2472aa.  goto L24727c;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v6 @kind this, `java.io.OutputStream` v7 @kind object @name `out`) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2472bc.  v2:= 0L;
  #L2472c0.  v4:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2472c4.  v0:= v6 @kind object;
  #L2472c6.  v1:= v7 @kind object;
  #L2472c8.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @kind virtual;
  #L2472ce.  v0:= temp @kind object;
  #L2472d0.  return v0 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v10 @kind this, `java.io.OutputStream` v11 @kind object @name `out`, `long` v12 @name `offset`, `long` v14 @name `byteCount`) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2472e4.  if v11 != 0 then goto L2472f8;
  #L2472e8.  v0:= new `java.lang.IllegalArgumentException`;
  #L2472ec.  v1:= "out == null" @kind object;
  #L2472f0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2472f6.  throw v0;
  #L2472f8.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2472fc.  v2:= v12 @kind wide;
  #L2472fe.  v4:= v14 @kind wide;
  #L247300.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L247306.  v0:= 0L;
  #L24730a.  v0:= lcmp(v14, v0);
  #L24730e.  if v0 != 0 then goto L247314;
  #L247312.  return v10 @kind object;
  #L247314.  v7:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247318.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L24731c.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L247320.  v0:= v0 - v1 @kind int;
  #L247322.  v0:= (`long`) v0 @kind i2l;
  #L247324.  v0:= lcmp(v12, v0);
  #L247328.  if v0 < 0 then goto L247340;
  #L24732c.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L247330.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L247334.  v0:= v0 - v1 @kind int;
  #L247336.  v0:= (`long`) v0 @kind i2l;
  #L247338.  v12:= v12 - v0 @kind long;
  #L24733a.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24733e.  goto L247318;
  #L247340.  v0:= 0L;
  #L247344.  v0:= lcmp(v14, v0);
  #L247348.  if v0 <= 0 then goto L247312;
  #L24734c.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L247350.  v0:= (`long`) v0 @kind i2l;
  #L247352.  v0:= v0 + v12 @kind long;
  #L247354.  v6:= (`int`) v0 @kind l2i;
  #L247356.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L24735a.  v0:= v0 - v6 @kind int;
  #L24735c.  v0:= (`long`) v0 @kind i2l;
  #L24735e.  call temp:= `min`(v0, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L247364.  v0:= temp @kind wide;
  #L247366.  v8:= (`int`) v0 @kind l2i;
  #L247368.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24736c.  call `write`(v11, v0, v6, v8) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L247372.  v0:= (`long`) v8 @kind i2l;
  #L247374.  v14:= v14 - v0 @kind long;
  #L247376.  v12:= 0L;
  #L24737a.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24737e.  goto L247340;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v10 @kind this, `okio.Buffer` v11 @kind object @name `out`, `long` v12 @name `offset`, `long` v14 @name `byteCount`) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L247390.  v8:= 0L;
  #L247394.  if v11 != 0 then goto L2473a8;
  #L247398.  v0:= new `java.lang.IllegalArgumentException`;
  #L24739c.  v1:= "out == null" @kind object;
  #L2473a0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2473a6.  throw v0;
  #L2473a8.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2473ac.  v2:= v12 @kind wide;
  #L2473ae.  v4:= v14 @kind wide;
  #L2473b0.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2473b6.  v0:= lcmp(v14, v8);
  #L2473ba.  if v0 != 0 then goto L2473c0;
  #L2473be.  return v10 @kind object;
  #L2473c0.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2473c4.  v0:= v0 + v14 @kind long;
  #L2473c6.  v11.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L2473ca.  v7:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2473ce.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L2473d2.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L2473d6.  v0:= v0 - v1 @kind int;
  #L2473d8.  v0:= (`long`) v0 @kind i2l;
  #L2473da.  v0:= lcmp(v12, v0);
  #L2473de.  if v0 < 0 then goto L2473f6;
  #L2473e2.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L2473e6.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L2473ea.  v0:= v0 - v1 @kind int;
  #L2473ec.  v0:= (`long`) v0 @kind i2l;
  #L2473ee.  v12:= v12 - v0 @kind long;
  #L2473f0.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2473f4.  goto L2473ce;
  #L2473f6.  v0:= lcmp(v14, v8);
  #L2473fa.  if v0 <= 0 then goto L2473be;
  #L2473fe.  call temp:= `sharedCopy`(v7) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L247404.  v6:= temp @kind object;
  #L247406.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L24740a.  v0:= (`long`) v0 @kind i2l;
  #L24740c.  v0:= v0 + v12 @kind long;
  #L24740e.  v0:= (`int`) v0 @kind l2i;
  #L247410.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L247414.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L247418.  v1:= (`int`) v14 @kind l2i;
  #L24741a.  v0:= v0 + v1 @kind int;
  #L24741c.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L247420.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L247426.  v0:= temp;
  #L247428.  v6.`okio.Segment.limit` @type ^`int` := v0;
  #L24742c.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247430.  if v0 != 0 then goto L247458;
  #L247434.  v6.`okio.Segment.prev` @type ^`okio.Segment` := v6 @kind object;
  #L247438.  v6.`okio.Segment.next` @type ^`okio.Segment` := v6 @kind object;
  #L24743c.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L247440.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L247444.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L247448.  v0:= v0 - v1 @kind int;
  #L24744a.  v0:= (`long`) v0 @kind i2l;
  #L24744c.  v14:= v14 - v0 @kind long;
  #L24744e.  v12:= 0L;
  #L247452.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L247456.  goto L2473f6;
  #L247458.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24745c.  v0:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L247460.  call temp:= `push`(v0, v6) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L247466.  goto L247440;
}
procedure `okio.BufferedSink` `emit`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;

  #L247478.  return v0 @kind object;
}
procedure `okio.Buffer` `emitCompleteSegments`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L24748c.  return v0 @kind object;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2474a0.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @kind virtual;
  #L2474a6.  v0:= temp @kind object;
  #L2474a8.  return v0 @kind object;
}
procedure `boolean` `equals`(`okio.Buffer` v18 @kind this, `java.lang.Object` v19 @kind object @name `o`) @signature `Lokio/Buffer;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L2474bc.  v0:= v18 @kind object;
  #L2474c0.  v1:= v19 @kind object;
  #L2474c4.  if v0 != v1 then goto L2474cc;
  #L2474c8.  v14:= 1I;
  #L2474ca.  return v14;
  #L2474cc.  v0:= v19 @kind object;
  #L2474d0.  v14:= instanceof @variable v0 @type ^`okio.Buffer` @kind boolean;
  #L2474d4.  if v14 != 0 then goto L2474dc;
  #L2474d8.  v14:= 0I;
  #L2474da.  goto L2474ca;
  #L2474dc.  v13:= v19 @kind object;
  #L2474e0.  v13:= (`okio.Buffer`) v13 @kind object;
  #L2474e4.  v0:= v18 @kind object;
  #L2474e8.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2474ec.  v0:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2474f0.  v16:= v0 @kind wide;
  #L2474f4.  v14:= lcmp(v14, v16);
  #L2474f8.  if v14 == 0 then goto L247500;
  #L2474fc.  v14:= 0I;
  #L2474fe.  goto L2474ca;
  #L247500.  v0:= v18 @kind object;
  #L247504.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247508.  v16:= 0L;
  #L24750c.  v14:= lcmp(v14, v16);
  #L247510.  if v14 != 0 then goto L247518;
  #L247514.  v14:= 1I;
  #L247516.  goto L2474ca;
  #L247518.  v0:= v18 @kind object;
  #L24751c.  v11:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247520.  v12:= v13.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247524.  v5:= v11.`okio.Segment.pos` @type ^`int`;
  #L247528.  v9:= v12.`okio.Segment.pos` @type ^`int`;
  #L24752c.  v6:= 0L;
  #L247530.  v0:= v18 @kind object;
  #L247534.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247538.  v14:= lcmp(v6, v14);
  #L24753c.  if v14 >= 0 then goto L2475b4;
  #L247540.  v14:= v11.`okio.Segment.limit` @type ^`int`;
  #L247544.  v14:= v14 - v5 @kind int;
  #L247546.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L24754a.  v15:= v15 - v9 @kind int;
  #L24754c.  call temp:= `min`(v14, v15) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L247552.  v14:= temp;
  #L247554.  v2:= (`long`) v14 @kind i2l;
  #L247556.  v4:= 0I;
  #L247558.  v10:= v9;
  #L24755a.  v8:= v5;
  #L24755c.  v14:= (`long`) v4 @kind i2l;
  #L24755e.  v14:= lcmp(v14, v2);
  #L247562.  if v14 >= 0 then goto L247590;
  #L247566.  v14:= v11.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24756a.  v5:= v8 + 1;
  #L24756e.  v14:= v14[v8] @kind byte;
  #L247572.  v15:= v12.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247576.  v9:= v10 + 1;
  #L24757a.  v15:= v15[v10] @kind byte;
  #L24757e.  if v14 == v15 then goto L247586;
  #L247582.  v14:= 0I;
  #L247584.  goto L2474ca;
  #L247586.  v4:= v4 + 1;
  #L24758a.  v10:= v9;
  #L24758c.  v8:= v5;
  #L24758e.  goto L24755c;
  #L247590.  v14:= v11.`okio.Segment.limit` @type ^`int`;
  #L247594.  if v8 != v14 then goto L2475bc;
  #L247598.  v11:= v11.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24759c.  v5:= v11.`okio.Segment.pos` @type ^`int`;
  #L2475a0.  v14:= v12.`okio.Segment.limit` @type ^`int`;
  #L2475a4.  if v10 != v14 then goto L2475b8;
  #L2475a8.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2475ac.  v9:= v12.`okio.Segment.pos` @type ^`int`;
  #L2475b0.  v6:= v6 + v2 @kind long;
  #L2475b2.  goto L247530;
  #L2475b4.  v14:= 1I;
  #L2475b6.  goto L2474ca;
  #L2475b8.  v9:= v10;
  #L2475ba.  goto L2475b0;
  #L2475bc.  v5:= v8;
  #L2475be.  goto L2475a0;
}
procedure `boolean` `exhausted`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.exhausted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2475d0.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2475d4.  v2:= 0L;
  #L2475d8.  v0:= lcmp(v0, v2);
  #L2475dc.  if v0 != 0 then goto L2475e4;
  #L2475e0.  v0:= 1I;
  #L2475e2.  return v0;
  #L2475e4.  v0:= 0I;
  #L2475e6.  goto L2475e2;
}
procedure `void` `flush`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L2475f8.  return @kind void;
}
procedure `byte` `getByte`(`okio.Buffer` v9 @kind this, `long` v10 @name `pos`) @signature `Lokio/Buffer;.getByte:(J)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L24760c.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247610.  v4:= 1L;
  #L247614.  v2:= v10 @kind wide;
  #L247616.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L24761c.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247620.  v0:= v0 - v10 @kind long;
  #L247622.  v0:= lcmp(v0, v10);
  #L247626.  if v0 <= 0 then goto L247660;
  #L24762a.  v6:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24762e.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L247632.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L247636.  v7:= v0 - v1 @kind int;
  #L24763a.  v0:= (`long`) v7 @kind i2l;
  #L24763c.  v0:= lcmp(v10, v0);
  #L247640.  if v0 >= 0 then goto L247656;
  #L247644.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247648.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L24764c.  v2:= (`int`) v10 @kind l2i;
  #L24764e.  v1:= v1 + v2 @kind int;
  #L247650.  v0:= v0[v1] @kind byte;
  #L247654.  return v0;
  #L247656.  v0:= (`long`) v7 @kind i2l;
  #L247658.  v10:= v10 - v0 @kind long;
  #L24765a.  v6:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24765e.  goto L24762e;
  #L247660.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247664.  v10:= v10 - v0 @kind long;
  #L247666.  v0:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24766a.  v6:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24766e.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L247672.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L247676.  v0:= v0 - v1 @kind int;
  #L247678.  v0:= (`long`) v0 @kind i2l;
  #L24767a.  v10:= v10 + v0 @kind long;
  #L24767c.  v0:= 0L;
  #L247680.  v0:= lcmp(v10, v0);
  #L247684.  if v0 < 0 then goto L24769a;
  #L247688.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24768c.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L247690.  v2:= (`int`) v10 @kind l2i;
  #L247692.  v1:= v1 + v2 @kind int;
  #L247694.  v0:= v0[v1] @kind byte;
  #L247698.  goto L247654;
  #L24769a.  v6:= v6.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24769e.  goto L24766e;
}
procedure `int` `hashCode`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2476b0.  v3:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2476b4.  if v3 != 0 then goto L2476bc;
  #L2476b8.  v2:= 0I;
  #L2476ba.  return v2;
  #L2476bc.  v2:= 1I;
  #L2476be.  v1:= v3.`okio.Segment.pos` @type ^`int`;
  #L2476c2.  v0:= v3.`okio.Segment.limit` @type ^`int`;
  #L2476c6.  if v1 >= v0 then goto L2476e0;
  #L2476ca.  v4:= v2 * 31;
  #L2476ce.  v5:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2476d2.  v5:= v5[v1] @kind byte;
  #L2476d6.  v2:= v4 + v5 @kind int;
  #L2476da.  v1:= v1 + 1;
  #L2476de.  goto L2476c6;
  #L2476e0.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2476e4.  v4:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2476e8.  if v3 != v4 then goto L2476be;
  #L2476ec.  goto L2476ba;
}
procedure `okio.ByteString` `hmacSha1`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object @name `key`) @signature `Lokio/Buffer;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247700.  v0:= "HmacSHA1" @kind object;
  #L247704.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L24770a.  v0:= temp @kind object;
  #L24770c.  return v0 @kind object;
}
procedure `okio.ByteString` `hmacSha256`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object @name `key`) @signature `Lokio/Buffer;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247720.  v0:= "HmacSHA256" @kind object;
  #L247724.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L24772a.  v0:= temp @kind object;
  #L24772c.  return v0 @kind object;
}
procedure `okio.ByteString` `hmacSha512`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object @name `key`) @signature `Lokio/Buffer;.hmacSha512:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247740.  v0:= "HmacSHA512" @kind object;
  #L247744.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L24774a.  v0:= temp @kind object;
  #L24774c.  return v0 @kind object;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 @name `b`) @signature `Lokio/Buffer;.indexOf:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L247760.  v2:= 0L;
  #L247764.  v4:= 9223372036854775807L;
  #L24776e.  v0:= v6 @kind object;
  #L247770.  v1:= v7;
  #L247772.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L247778.  v0:= temp @kind wide;
  #L24777a.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 @name `b`, `long` v8 @name `fromIndex`) @signature `Lokio/Buffer;.indexOf:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24778c.  v4:= 9223372036854775807L;
  #L247796.  v0:= v6 @kind object;
  #L247798.  v1:= v7;
  #L24779a.  v2:= v8 @kind wide;
  #L24779c.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L2477a2.  v0:= temp @kind wide;
  #L2477a4.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v16 @kind this, `byte` v17 @name `b`, `long` v18 @name `fromIndex`, `long` v20 @name `toIndex`) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L2477b8.  v10:= 0L;
  #L2477bc.  v10:= lcmp(v18, v10);
  #L2477c0.  if v10 < 0 then goto L2477cc;
  #L2477c4.  v10:= lcmp(v20, v18);
  #L2477c8.  if v10 >= 0 then goto L24781c;
  #L2477cc.  v10:= new `java.lang.IllegalArgumentException`;
  #L2477d0.  v11:= "size=%s fromIndex=%s toIndex=%s" @kind object;
  #L2477d4.  v12:= 3I;
  #L2477d6.  v12:= new `java.lang.Object`[v12];
  #L2477da.  v13:= 0I;
  #L2477dc.  v0:= v16 @kind object;
  #L2477e0.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2477e4.  call temp:= `valueOf`(v14) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2477ea.  v14:= temp @kind object;
  #L2477ec.  v12[v13]:= v14 @kind object;
  #L2477f0.  v13:= 1I;
  #L2477f2.  call temp:= `valueOf`(v18) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2477f8.  v14:= temp @kind object;
  #L2477fa.  v12[v13]:= v14 @kind object;
  #L2477fe.  v13:= 2I;
  #L247800.  call temp:= `valueOf`(v20) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L247806.  v14:= temp @kind object;
  #L247808.  v12[v13]:= v14 @kind object;
  #L24780c.  call temp:= `format`(v11, v12) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L247812.  v11:= temp @kind object;
  #L247814.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24781a.  throw v10;
  #L24781c.  v0:= v16 @kind object;
  #L247820.  v10:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247824.  v10:= lcmp(v20, v10);
  #L247828.  if v10 <= 0 then goto L247838;
  #L24782c.  v0:= v16 @kind object;
  #L247830.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247834.  v20:= v0 @kind wide;
  #L247838.  v10:= lcmp(v18, v20);
  #L24783c.  if v10 != 0 then goto L247846;
  #L247840.  v10:= -1L;
  #L247844.  return v10 @kind wide;
  #L247846.  v0:= v16 @kind object;
  #L24784a.  v9:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24784e.  if v9 != 0 then goto L247858;
  #L247852.  v10:= -1L;
  #L247856.  goto L247844;
  #L247858.  v0:= v16 @kind object;
  #L24785c.  v10:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247860.  v10:= v10 - v18 @kind long;
  #L247864.  v10:= lcmp(v10, v18);
  #L247868.  if v10 >= 0 then goto L247890;
  #L24786c.  v0:= v16 @kind object;
  #L247870.  v6:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247874.  v10:= lcmp(v6, v18);
  #L247878.  if v10 <= 0 then goto L2478ca;
  #L24787c.  v9:= v9.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L247880.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L247884.  v11:= v9.`okio.Segment.pos` @type ^`int`;
  #L247888.  v10:= v10 - v11 @kind int;
  #L24788a.  v10:= (`long`) v10 @kind i2l;
  #L24788c.  v6:= v6 - v10 @kind long;
  #L24788e.  goto L247874;
  #L247890.  v6:= 0L;
  #L247894.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L247898.  v11:= v9.`okio.Segment.pos` @type ^`int`;
  #L24789c.  v10:= v10 - v11 @kind int;
  #L24789e.  v10:= (`long`) v10 @kind i2l;
  #L2478a0.  v4:= v6 + v10 @kind long;
  #L2478a4.  v10:= lcmp(v4, v18);
  #L2478a8.  if v10 >= 0 then goto L2478ca;
  #L2478ac.  v9:= v9.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2478b0.  v6:= v4 @kind wide;
  #L2478b2.  goto L247894;
  #L2478b4.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L2478b8.  v11:= v9.`okio.Segment.pos` @type ^`int`;
  #L2478bc.  v10:= v10 - v11 @kind int;
  #L2478be.  v10:= (`long`) v10 @kind i2l;
  #L2478c0.  v6:= v6 + v10 @kind long;
  #L2478c2.  v18:= v6 @kind wide;
  #L2478c6.  v9:= v9.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2478ca.  v10:= lcmp(v6, v20);
  #L2478ce.  if v10 >= 0 then goto L247924;
  #L2478d2.  v2:= v9.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2478d6.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L2478da.  v10:= (`long`) v10 @kind i2l;
  #L2478dc.  v12:= v9.`okio.Segment.pos` @type ^`int`;
  #L2478e0.  v12:= (`long`) v12 @kind i2l;
  #L2478e2.  v12:= v12 + v20 @kind long;
  #L2478e6.  v12:= v12 - v6 @kind long;
  #L2478e8.  call temp:= `min`(v10, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2478ee.  v10:= temp @kind wide;
  #L2478f0.  v3:= (`int`) v10 @kind l2i;
  #L2478f2.  v10:= v9.`okio.Segment.pos` @type ^`int`;
  #L2478f6.  v10:= (`long`) v10 @kind i2l;
  #L2478f8.  v10:= v10 + v18 @kind long;
  #L2478fc.  v10:= v10 - v6 @kind long;
  #L2478fe.  v8:= (`int`) v10 @kind l2i;
  #L247900.  if v8 >= v3 then goto L2478b4;
  #L247904.  v10:= v2[v8] @kind byte;
  #L247908.  v0:= v17;
  #L24790c.  if v10 != v0 then goto L24791e;
  #L247910.  v10:= v9.`okio.Segment.pos` @type ^`int`;
  #L247914.  v10:= v8 - v10 @kind int;
  #L247918.  v10:= (`long`) v10 @kind i2l;
  #L24791a.  v10:= v10 + v6 @kind long;
  #L24791c.  goto L247844;
  #L24791e.  v8:= v8 + 1;
  #L247922.  goto L247900;
  #L247924.  v10:= -1L;
  #L247928.  goto L247844;
}
procedure `long` `indexOf`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object @name `bytes`) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24793c.  v0:= 0L;
  #L247940.  call temp:= `indexOf`(v2, v3, v0) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @kind virtual;
  #L247946.  v0:= temp @kind wide;
  #L247948.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v20 @kind this, `okio.ByteString` v21 @kind object @name `bytes`, `long` v22 @name `fromIndex`) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L24795c.  call temp:= `size`(v21) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L247962.  v2:= temp;
  #L247964.  if v2 != 0 then goto L247978;
  #L247968.  v2:= new `java.lang.IllegalArgumentException`;
  #L24796c.  v4:= "bytes is empty" @kind object;
  #L247970.  call `<init>`(v2, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247976.  throw v2;
  #L247978.  v4:= 0L;
  #L24797c.  v2:= lcmp(v22, v4);
  #L247980.  if v2 >= 0 then goto L247994;
  #L247984.  v2:= new `java.lang.IllegalArgumentException`;
  #L247988.  v4:= "fromIndex < 0" @kind object;
  #L24798c.  call `<init>`(v2, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247992.  throw v2;
  #L247994.  v0:= v20 @kind object;
  #L247998.  v3:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24799c.  if v3 != 0 then goto L2479a6;
  #L2479a0.  v4:= -1L;
  #L2479a4.  return v4 @kind wide;
  #L2479a6.  v0:= v20 @kind object;
  #L2479aa.  v4:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2479ae.  v4:= v4 - v22 @kind long;
  #L2479b2.  v2:= lcmp(v4, v22);
  #L2479b6.  if v2 >= 0 then goto L2479de;
  #L2479ba.  v0:= v20 @kind object;
  #L2479be.  v12:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2479c2.  v2:= lcmp(v12, v22);
  #L2479c6.  if v2 <= 0 then goto L247a02;
  #L2479ca.  v3:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L2479ce.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L2479d2.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L2479d6.  v2:= v2 - v4 @kind int;
  #L2479d8.  v4:= (`long`) v2 @kind i2l;
  #L2479da.  v12:= v12 - v4 @kind long;
  #L2479dc.  goto L2479c2;
  #L2479de.  v12:= 0L;
  #L2479e2.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L2479e6.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L2479ea.  v2:= v2 - v4 @kind int;
  #L2479ec.  v4:= (`long`) v2 @kind i2l;
  #L2479ee.  v10:= v12 + v4 @kind long;
  #L2479f2.  v2:= lcmp(v10, v22);
  #L2479f6.  if v2 >= 0 then goto L247a02;
  #L2479fa.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2479fe.  v12:= v10 @kind wide;
  #L247a00.  goto L2479e2;
  #L247a02.  v2:= 0I;
  #L247a04.  v0:= v21 @kind object;
  #L247a08.  call temp:= `getByte`(v0, v2) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L247a0e.  v8:= temp;
  #L247a10.  call temp:= `size`(v21) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L247a16.  v7:= temp;
  #L247a18.  v0:= v20 @kind object;
  #L247a1c.  v4:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247a20.  v0:= (`long`) v7 @kind i2l;
  #L247a22.  v18:= v0 @kind wide;
  #L247a26.  v4:= v4 - v18 @kind long;
  #L247a2a.  v18:= 1L;
  #L247a2e.  v16:= v4 + v18 @kind long;
  #L247a32.  v2:= lcmp(v12, v16);
  #L247a36.  if v2 >= 0 then goto L247ac4;
  #L247a3a.  v9:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247a3e.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L247a42.  v4:= (`long`) v2 @kind i2l;
  #L247a44.  v2:= v3.`okio.Segment.pos` @type ^`int`;
  #L247a48.  v0:= (`long`) v2 @kind i2l;
  #L247a4a.  v18:= v0 @kind wide;
  #L247a4e.  v18:= v18 + v16 @kind long;
  #L247a52.  v18:= v18 - v12 @kind long;
  #L247a56.  v0:= v18 @kind wide;
  #L247a5a.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L247a60.  v4:= temp @kind wide;
  #L247a62.  v15:= (`int`) v4 @kind l2i;
  #L247a64.  v2:= v3.`okio.Segment.pos` @type ^`int`;
  #L247a68.  v4:= (`long`) v2 @kind i2l;
  #L247a6a.  v4:= v4 + v22 @kind long;
  #L247a6e.  v4:= v4 - v12 @kind long;
  #L247a70.  v14:= (`int`) v4 @kind l2i;
  #L247a72.  if v14 >= v15 then goto L247aac;
  #L247a76.  v2:= v9[v14] @kind byte;
  #L247a7a.  if v2 != v8 then goto L247aa6;
  #L247a7e.  v4:= v14 + 1;
  #L247a82.  v6:= 1I;
  #L247a84.  v2:= v20 @kind object;
  #L247a88.  v5:= v21 @kind object;
  #L247a8c.  call temp:= `rangeEquals`(v2, v3, v4, v5, v6, v7) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L247a92.  v2:= temp;
  #L247a94.  if v2 == 0 then goto L247aa6;
  #L247a98.  v2:= v3.`okio.Segment.pos` @type ^`int`;
  #L247a9c.  v2:= v14 - v2 @kind int;
  #L247aa0.  v4:= (`long`) v2 @kind i2l;
  #L247aa2.  v4:= v4 + v12 @kind long;
  #L247aa4.  goto L2479a4;
  #L247aa6.  v14:= v14 + 1;
  #L247aaa.  goto L247a72;
  #L247aac.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L247ab0.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L247ab4.  v2:= v2 - v4 @kind int;
  #L247ab6.  v4:= (`long`) v2 @kind i2l;
  #L247ab8.  v12:= v12 + v4 @kind long;
  #L247aba.  v22:= v12 @kind wide;
  #L247abe.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L247ac2.  goto L247a32;
  #L247ac4.  v4:= -1L;
  #L247ac8.  goto L2479a4;
}
procedure `long` `indexOfElement`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object @name `targetBytes`) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L247adc.  v0:= 0L;
  #L247ae0.  call temp:= `indexOfElement`(v2, v3, v0) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @kind virtual;
  #L247ae6.  v0:= temp @kind wide;
  #L247ae8.  return v0 @kind wide;
}
procedure `long` `indexOfElement`(`okio.Buffer` v18 @kind this, `okio.ByteString` v19 @kind object @name `targetBytes`, `long` v20 @name `fromIndex`) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L247afc.  v16:= 0L;
  #L247b00.  v15:= lcmp(v20, v16);
  #L247b04.  if v15 >= 0 then goto L247b18;
  #L247b08.  v15:= new `java.lang.IllegalArgumentException`;
  #L247b0c.  v16:= "fromIndex < 0" @kind object;
  #L247b10.  call `<init>`(v15, v16) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247b16.  throw v15;
  #L247b18.  v0:= v18 @kind object;
  #L247b1c.  v12:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247b20.  if v12 != 0 then goto L247b2a;
  #L247b24.  v16:= -1L;
  #L247b28.  return v16 @kind wide;
  #L247b2a.  v0:= v18 @kind object;
  #L247b2e.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247b32.  v16:= v0 @kind wide;
  #L247b36.  v16:= v16 - v20 @kind long;
  #L247b3a.  v15:= lcmp(v16, v20);
  #L247b3e.  if v15 >= 0 then goto L247b72;
  #L247b42.  v0:= v18 @kind object;
  #L247b46.  v10:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247b4a.  v15:= lcmp(v10, v20);
  #L247b4e.  if v15 <= 0 then goto L247ba0;
  #L247b52.  v12:= v12.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L247b56.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L247b5a.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L247b5e.  v16:= v0;
  #L247b62.  v15:= v15 - v16 @kind int;
  #L247b66.  v0:= (`long`) v15 @kind i2l;
  #L247b68.  v16:= v0 @kind wide;
  #L247b6c.  v10:= v10 - v16 @kind long;
  #L247b70.  goto L247b4a;
  #L247b72.  v10:= 0L;
  #L247b76.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L247b7a.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L247b7e.  v16:= v0;
  #L247b82.  v15:= v15 - v16 @kind int;
  #L247b86.  v0:= (`long`) v15 @kind i2l;
  #L247b88.  v16:= v0 @kind wide;
  #L247b8c.  v8:= v10 + v16 @kind long;
  #L247b90.  v15:= lcmp(v8, v20);
  #L247b94.  if v15 >= 0 then goto L247ba0;
  #L247b98.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L247b9c.  v10:= v8 @kind wide;
  #L247b9e.  goto L247b76;
  #L247ba0.  call temp:= `size`(v19) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L247ba6.  v15:= temp;
  #L247ba8.  v16:= 2I;
  #L247bac.  v0:= v16;
  #L247bb0.  if v15 != v0 then goto L247c52;
  #L247bb4.  v15:= 0I;
  #L247bb6.  v0:= v19 @kind object;
  #L247bba.  call temp:= `getByte`(v0, v15) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L247bc0.  v3:= temp;
  #L247bc2.  v15:= 1I;
  #L247bc4.  v0:= v19 @kind object;
  #L247bc8.  call temp:= `getByte`(v0, v15) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L247bce.  v4:= temp;
  #L247bd0.  v0:= v18 @kind object;
  #L247bd4.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247bd8.  v16:= v0 @kind wide;
  #L247bdc.  v15:= lcmp(v10, v16);
  #L247be0.  if v15 >= 0 then goto L247cf4;
  #L247be4.  v5:= v12.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247be8.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L247bec.  v0:= (`long`) v15 @kind i2l;
  #L247bee.  v16:= v0 @kind wide;
  #L247bf2.  v16:= v16 + v20 @kind long;
  #L247bf6.  v16:= v16 - v10 @kind long;
  #L247bfa.  v0:= v16 @kind wide;
  #L247bfe.  v7:= (`int`) v0 @kind l2i;
  #L247c00.  v6:= v12.`okio.Segment.limit` @type ^`int`;
  #L247c04.  if v7 >= v6 then goto L247c2e;
  #L247c08.  v2:= v5[v7] @kind byte;
  #L247c0c.  if v2 == v3 then goto L247c14;
  #L247c10.  if v2 != v4 then goto L247c28;
  #L247c14.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L247c18.  v15:= v7 - v15 @kind int;
  #L247c1c.  v0:= (`long`) v15 @kind i2l;
  #L247c1e.  v16:= v0 @kind wide;
  #L247c22.  v16:= v16 + v10 @kind long;
  #L247c26.  goto L247b28;
  #L247c28.  v7:= v7 + 1;
  #L247c2c.  goto L247c04;
  #L247c2e.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L247c32.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L247c36.  v16:= v0;
  #L247c3a.  v15:= v15 - v16 @kind int;
  #L247c3e.  v0:= (`long`) v15 @kind i2l;
  #L247c40.  v16:= v0 @kind wide;
  #L247c44.  v10:= v10 + v16 @kind long;
  #L247c48.  v20:= v10 @kind wide;
  #L247c4c.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L247c50.  goto L247bd0;
  #L247c52.  call temp:= `internalArray`(v19) @signature `Lokio/ByteString;.internalArray:()[B` @kind virtual;
  #L247c58.  v14:= temp @kind object;
  #L247c5a.  v0:= v18 @kind object;
  #L247c5e.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247c62.  v16:= v0 @kind wide;
  #L247c66.  v15:= lcmp(v10, v16);
  #L247c6a.  if v15 >= 0 then goto L247cf4;
  #L247c6e.  v5:= v12.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247c72.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L247c76.  v0:= (`long`) v15 @kind i2l;
  #L247c78.  v16:= v0 @kind wide;
  #L247c7c.  v16:= v16 + v20 @kind long;
  #L247c80.  v16:= v16 - v10 @kind long;
  #L247c84.  v0:= v16 @kind wide;
  #L247c88.  v7:= (`int`) v0 @kind l2i;
  #L247c8a.  v6:= v12.`okio.Segment.limit` @type ^`int`;
  #L247c8e.  if v7 >= v6 then goto L247cd0;
  #L247c92.  v2:= v5[v7] @kind byte;
  #L247c96.  v0:= length @variable v14;
  #L247c98.  v16:= v0;
  #L247c9c.  v15:= 0I;
  #L247c9e.  v0:= v16;
  #L247ca2.  if v15 >= v0 then goto L247cca;
  #L247ca6.  v13:= v14[v15] @kind byte;
  #L247caa.  if v2 != v13 then goto L247cc4;
  #L247cae.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L247cb2.  v15:= v7 - v15 @kind int;
  #L247cb6.  v0:= (`long`) v15 @kind i2l;
  #L247cb8.  v16:= v0 @kind wide;
  #L247cbc.  v16:= v16 + v10 @kind long;
  #L247cc0.  goto L247b28;
  #L247cc4.  v15:= v15 + 1;
  #L247cc8.  goto L247c9e;
  #L247cca.  v7:= v7 + 1;
  #L247cce.  goto L247c8e;
  #L247cd0.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L247cd4.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L247cd8.  v16:= v0;
  #L247cdc.  v15:= v15 - v16 @kind int;
  #L247ce0.  v0:= (`long`) v15 @kind i2l;
  #L247ce2.  v16:= v0 @kind wide;
  #L247ce6.  v10:= v10 + v16 @kind long;
  #L247cea.  v20:= v10 @kind wide;
  #L247cee.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L247cf2.  goto L247c5a;
  #L247cf4.  v16:= -1L;
  #L247cf8.  goto L247b28;
}
procedure `java.io.InputStream` `inputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.inputStream:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247d0c.  v0:= new `okio.Buffer$2`;
  #L247d10.  call `<init>`(v0, v1) @signature `Lokio/Buffer$2;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L247d16.  return v0 @kind object;
}
procedure `boolean` `isOpen`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247d28.  v0:= 1I;
  #L247d2a.  return v0;
}
procedure `okio.ByteString` `md5`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.md5:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247d3c.  v0:= "MD5" @kind object;
  #L247d40.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L247d46.  v0:= temp @kind object;
  #L247d48.  return v0 @kind object;
}
procedure `java.io.OutputStream` `outputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247d5c.  v0:= new `okio.Buffer$1`;
  #L247d60.  call `<init>`(v0, v1) @signature `Lokio/Buffer$1;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L247d66.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v7 @kind this, `long` v8 @name `offset`, `okio.ByteString` v10 @kind object @name `bytes`) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L247d78.  v5:= 0I;
  #L247d7a.  call temp:= `size`(v10) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L247d80.  v6:= temp;
  #L247d82.  v1:= v7 @kind object;
  #L247d84.  v2:= v8 @kind wide;
  #L247d86.  v4:= v10 @kind object;
  #L247d88.  call temp:= `rangeEquals`(v1, v2, v4, v5, v6) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @kind virtual;
  #L247d8e.  v0:= temp;
  #L247d90.  return v0;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v7 @kind this, `long` v8 @name `offset`, `okio.ByteString` v10 @kind object @name `bytes`, `int` v11 @name `bytesOffset`, `int` v12 @name `byteCount`) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L247da4.  v1:= 0I;
  #L247da6.  v2:= 0L;
  #L247daa.  v2:= lcmp(v8, v2);
  #L247dae.  if v2 < 0 then goto L247dd8;
  #L247db2.  if v11 < 0 then goto L247dd8;
  #L247db6.  if v12 < 0 then goto L247dd8;
  #L247dba.  v2:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247dbe.  v2:= v2 - v8 @kind long;
  #L247dc0.  v4:= (`long`) v12 @kind i2l;
  #L247dc2.  v2:= lcmp(v2, v4);
  #L247dc6.  if v2 < 0 then goto L247dd8;
  #L247dca.  call temp:= `size`(v10) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L247dd0.  v2:= temp;
  #L247dd2.  v2:= v2 - v11 @kind int;
  #L247dd4.  if v2 >= v12 then goto L247dda;
  #L247dd8.  return v1;
  #L247dda.  v0:= 0I;
  #L247ddc.  if v0 >= v12 then goto L247e02;
  #L247de0.  v2:= (`long`) v0 @kind i2l;
  #L247de2.  v2:= v2 + v8 @kind long;
  #L247de4.  call temp:= `getByte`(v7, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L247dea.  v2:= temp;
  #L247dec.  v3:= v11 + v0 @kind int;
  #L247df0.  call temp:= `getByte`(v10, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L247df6.  v3:= temp;
  #L247df8.  if v2 != v3 then goto L247dd8;
  #L247dfc.  v0:= v0 + 1;
  #L247e00.  goto L247ddc;
  #L247e02.  v1:= 1I;
  #L247e04.  goto L247dd8;
}
procedure `int` `read`(`okio.Buffer` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object @name `sink`) @signature `Lokio/Buffer;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L247e18.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247e1c.  if v0 != 0 then goto L247e24;
  #L247e20.  v1:= -1I;
  #L247e22.  return v1;
  #L247e24.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L247e2a.  v2:= temp;
  #L247e2c.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L247e30.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L247e34.  v3:= v3 - v4 @kind int;
  #L247e36.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L247e3c.  v1:= temp;
  #L247e3e.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247e42.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L247e46.  call temp:= `put`(v7, v2, v3, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L247e4c.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L247e50.  v2:= v2 + v1 @kind int;
  #L247e52.  v0.`okio.Segment.pos` @type ^`int` := v2;
  #L247e56.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247e5a.  v4:= (`long`) v1 @kind i2l;
  #L247e5c.  v2:= v2 - v4 @kind long;
  #L247e5e.  v6.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L247e62.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L247e66.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L247e6a.  if v2 != v3 then goto L247e22;
  #L247e6e.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L247e74.  v2:= temp @kind object;
  #L247e76.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L247e7a.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L247e80.  goto L247e22;
}
procedure `int` `read`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object @name `sink`) @signature `Lokio/Buffer;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L247e94.  v0:= 0I;
  #L247e96.  v1:= length @variable v3;
  #L247e98.  call temp:= `read`(v2, v3, v0, v1) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L247e9e.  v0:= temp;
  #L247ea0.  return v0;
}
procedure `int` `read`(`okio.Buffer` v8 @kind this, `byte`[] v9 @kind object @name `sink`, `int` v10 @name `offset`, `int` v11 @name `byteCount`) @signature `Lokio/Buffer;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L247eb4.  v0:= length @variable v9;
  #L247eb6.  v0:= (`long`) v0 @kind i2l;
  #L247eb8.  v2:= (`long`) v10 @kind i2l;
  #L247eba.  v4:= (`long`) v11 @kind i2l;
  #L247ebc.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L247ec2.  v6:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247ec6.  if v6 != 0 then goto L247ece;
  #L247eca.  v7:= -1I;
  #L247ecc.  return v7;
  #L247ece.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L247ed2.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L247ed6.  v0:= v0 - v1 @kind int;
  #L247ed8.  call temp:= `min`(v11, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L247ede.  v7:= temp;
  #L247ee0.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247ee4.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L247ee8.  call `arraycopy`(v0, v1, v9, v10, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L247eee.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L247ef2.  v0:= v0 + v7 @kind int;
  #L247ef4.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L247ef8.  v0:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247efc.  v2:= (`long`) v7 @kind i2l;
  #L247efe.  v0:= v0 - v2 @kind long;
  #L247f00.  v8.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L247f04.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L247f08.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L247f0c.  if v0 != v1 then goto L247ecc;
  #L247f10.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L247f16.  v0:= temp @kind object;
  #L247f18.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L247f1c.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L247f22.  goto L247ecc;
}
procedure `long` `read`(`okio.Buffer` v4 @kind this, `okio.Buffer` v5 @kind object @name `sink`, `long` v6 @name `byteCount`) @signature `Lokio/Buffer;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L247f34.  v2:= 0L;
  #L247f38.  if v5 != 0 then goto L247f4c;
  #L247f3c.  v0:= new `java.lang.IllegalArgumentException`;
  #L247f40.  v1:= "sink == null" @kind object;
  #L247f44.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247f4a.  throw v0;
  #L247f4c.  v0:= lcmp(v6, v2);
  #L247f50.  if v0 >= 0 then goto L247f86;
  #L247f54.  v0:= new `java.lang.IllegalArgumentException`;
  #L247f58.  v1:= new `java.lang.StringBuilder`;
  #L247f5c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L247f62.  v2:= "byteCount < 0: " @kind object;
  #L247f66.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247f6c.  v1:= temp @kind object;
  #L247f6e.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L247f74.  v1:= temp @kind object;
  #L247f76.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L247f7c.  v1:= temp @kind object;
  #L247f7e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247f84.  throw v0;
  #L247f86.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247f8a.  v0:= lcmp(v0, v2);
  #L247f8e.  if v0 != 0 then goto L247f98;
  #L247f92.  v0:= -1L;
  #L247f96.  return v0 @kind wide;
  #L247f98.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247f9c.  v0:= lcmp(v6, v0);
  #L247fa0.  if v0 <= 0 then goto L247fa8;
  #L247fa4.  v6:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247fa8.  call `write`(v5, v4, v6) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L247fae.  v0:= v6 @kind wide;
  #L247fb0.  goto L247f96;
}
procedure `long` `readAll`(`okio.Buffer` v4 @kind this, `okio.Sink` v5 @kind object @name `sink`) @signature `Lokio/Buffer;.readAll:(Lokio/Sink;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L247fc4.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247fc8.  v2:= 0L;
  #L247fcc.  v2:= lcmp(v0, v2);
  #L247fd0.  if v2 <= 0 then goto L247fda;
  #L247fd4.  call `write`(v5, v4, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L247fda.  return v0 @kind wide;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readAndWriteUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247fec.  v0:= new `okio.Buffer$UnsafeCursor`;
  #L247ff0.  call `<init>`(v0) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L247ff6.  call temp:= `readAndWriteUnsafe`(v1, v0) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L247ffc.  v0:= temp @kind object;
  #L247ffe.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v2 @kind this, `okio.Buffer$UnsafeCursor` v3 @kind object @name `unsafeCursor`) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248010.  v0:= v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L248014.  if v0 == 0 then goto L248028;
  #L248018.  v0:= new `java.lang.IllegalStateException`;
  #L24801c.  v1:= "already attached to a buffer" @kind object;
  #L248020.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248026.  throw v0;
  #L248028.  v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v2 @kind object;
  #L24802c.  v0:= 1I;
  #L24802e.  v3.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v0 @kind boolean;
  #L248032.  return v3 @kind object;
}
procedure `byte` `readByte`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L248044.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248048.  v8:= 0L;
  #L24804c.  v6:= lcmp(v6, v8);
  #L248050.  if v6 != 0 then goto L248064;
  #L248054.  v6:= new `java.lang.IllegalStateException`;
  #L248058.  v7:= "size == 0" @kind object;
  #L24805c.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248062.  throw v6;
  #L248064.  v5:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248068.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L24806c.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L248070.  v1:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L248074.  v4:= v3 + 1;
  #L248078.  v0:= v1[v3] @kind byte;
  #L24807c.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248080.  v8:= 1L;
  #L248084.  v6:= v6 - v8 @kind long;
  #L248086.  v10.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L24808a.  if v4 != v2 then goto L2480a2;
  #L24808e.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L248094.  v6:= temp @kind object;
  #L248096.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L24809a.  call `recycle`(v5) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L2480a0.  return v0;
  #L2480a2.  v5.`okio.Segment.pos` @type ^`int` := v4;
  #L2480a6.  goto L2480a0;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L2480b8.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2480bc.  call temp:= `readByteArray`(v4, v2) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #Try_end0.  
  #L2480c2.  v1:= temp @kind object;
  #L2480c4.  return v1 @kind object;
  #L2480c6.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L2480c8.  v1:= new `java.lang.AssertionError`;
  #L2480cc.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2480d2.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L2480c6;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v7 @kind this, `long` v8 @name `byteCount`) @signature `Lokio/Buffer;.readByteArray:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2480f4.  v0:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2480f8.  v2:= 0L;
  #L2480fc.  v4:= v8 @kind wide;
  #L2480fe.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L248104.  v0:= 2147483647L;
  #L24810a.  v0:= lcmp(v8, v0);
  #L24810e.  if v0 <= 0 then goto L248144;
  #L248112.  v0:= new `java.lang.IllegalArgumentException`;
  #L248116.  v1:= new `java.lang.StringBuilder`;
  #L24811a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248120.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L248124.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24812a.  v1:= temp @kind object;
  #L24812c.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L248132.  v1:= temp @kind object;
  #L248134.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24813a.  v1:= temp @kind object;
  #L24813c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248142.  throw v0;
  #L248144.  v0:= (`int`) v8 @kind l2i;
  #L248146.  v6:= new `byte`[v0];
  #L24814a.  call `readFully`(v7, v6) @signature `Lokio/Buffer;.readFully:([B)V` @kind virtual;
  #L248150.  return v6 @kind object;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248164.  v0:= new `okio.ByteString`;
  #L248168.  call temp:= `readByteArray`(v2) @signature `Lokio/Buffer;.readByteArray:()[B` @kind virtual;
  #L24816e.  v1:= temp @kind object;
  #L248170.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L248176.  return v0 @kind object;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v3 @kind this, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.readByteString:(J)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L248188.  v0:= new `okio.ByteString`;
  #L24818c.  call temp:= `readByteArray`(v3, v4) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L248192.  v1:= temp @kind object;
  #L248194.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L24819a.  return v0 @kind object;
}
procedure `long` `readDecimalLong`(`okio.Buffer` v24 @kind this) @signature `Lokio/Buffer;.readDecimalLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;

  #L2481ac.  v0:= v24 @kind object;
  #L2481b0.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2481b4.  v20:= v0 @kind wide;
  #L2481b8.  v22:= 0L;
  #L2481bc.  v20:= lcmp(v20, v22);
  #L2481c0.  if v20 != 0 then goto L2481d4;
  #L2481c4.  v20:= new `java.lang.IllegalStateException`;
  #L2481c8.  v21:= "size == 0" @kind object;
  #L2481cc.  call `<init>`(v20, v21) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2481d2.  throw v20;
  #L2481d4.  v18:= 0L;
  #L2481d8.  v16:= 0I;
  #L2481dc.  v10:= 0I;
  #L2481de.  v8:= 0I;
  #L2481e0.  v14:= -922337203685477580L;
  #L2481ea.  v12:= -7L;
  #L2481ee.  v0:= v24 @kind object;
  #L2481f2.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2481f6.  v17:= v0 @kind object;
  #L2481fa.  v0:= v17 @kind object;
  #L2481fe.  v6:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L248202.  v0:= v17 @kind object;
  #L248206.  v11:= v0.`okio.Segment.pos` @type ^`int`;
  #L24820a.  v0:= v17 @kind object;
  #L24820e.  v9:= v0.`okio.Segment.limit` @type ^`int`;
  #L248212.  if v11 >= v9 then goto L248336;
  #L248216.  v4:= v6[v11] @kind byte;
  #L24821a.  v20:= 48I;
  #L24821e.  v0:= v20;
  #L248222.  if v4 < v0 then goto L2482da;
  #L248226.  v20:= 57I;
  #L24822a.  v0:= v20;
  #L24822e.  if v4 > v0 then goto L2482da;
  #L248232.  v7:= v4 - 48;
  #L248236.  v20:= lcmp(v18, v14);
  #L24823a.  if v20 < 0 then goto L248254;
  #L24823e.  v20:= lcmp(v18, v14);
  #L248242.  if v20 != 0 then goto L2482be;
  #L248246.  v0:= (`long`) v7 @kind i2l;
  #L248248.  v20:= v0 @kind wide;
  #L24824c.  v20:= lcmp(v20, v12);
  #L248250.  if v20 >= 0 then goto L2482be;
  #L248254.  v20:= new `okio.Buffer`;
  #L248258.  call `<init>`(v20) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L24825e.  v0:= v20 @kind object;
  #L248262.  v1:= v18 @kind wide;
  #L248266.  call temp:= `writeDecimalLong`(v0, v1) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L24826c.  v20:= temp @kind object;
  #L24826e.  v0:= v20 @kind object;
  #L248272.  call temp:= `writeByte`(v0, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248278.  v5:= temp @kind object;
  #L24827a.  if v10 != 0 then goto L248284;
  #L24827e.  call temp:= `readByte`(v5) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L248284.  v20:= new `java.lang.NumberFormatException`;
  #L248288.  v21:= new `java.lang.StringBuilder`;
  #L24828c.  call `<init>`(v21) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248292.  v22:= "Number too large: " @kind object;
  #L248296.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24829c.  v21:= temp @kind object;
  #L24829e.  call temp:= `readUtf8`(v5) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L2482a4.  v22:= temp @kind object;
  #L2482a6.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2482ac.  v21:= temp @kind object;
  #L2482ae.  call temp:= `toString`(v21) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2482b4.  v21:= temp @kind object;
  #L2482b6.  call `<init>`(v20, v21) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2482bc.  throw v20;
  #L2482be.  v20:= 10L;
  #L2482c2.  v18:= v18 * v20 @kind long;
  #L2482c6.  v0:= (`long`) v7 @kind i2l;
  #L2482c8.  v20:= v0 @kind wide;
  #L2482cc.  v18:= v18 + v20 @kind long;
  #L2482d0.  v11:= v11 + 1;
  #L2482d4.  v16:= v16 + 1;
  #L2482d8.  goto L248212;
  #L2482da.  v20:= 45I;
  #L2482de.  v0:= v20;
  #L2482e2.  if v4 != v0 then goto L2482f6;
  #L2482e6.  if v16 != 0 then goto L2482f6;
  #L2482ea.  v10:= 1I;
  #L2482ec.  v20:= 1L;
  #L2482f0.  v12:= v12 - v20 @kind long;
  #L2482f4.  goto L2482d0;
  #L2482f6.  if v16 != 0 then goto L248334;
  #L2482fa.  v20:= new `java.lang.NumberFormatException`;
  #L2482fe.  v21:= new `java.lang.StringBuilder`;
  #L248302.  call `<init>`(v21) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248308.  v22:= "Expected leading [0-9] or '-' character but was 0x" @kind object;
  #L24830c.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248312.  v21:= temp @kind object;
  #L248314.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L24831a.  v22:= temp @kind object;
  #L24831c.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248322.  v21:= temp @kind object;
  #L248324.  call temp:= `toString`(v21) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24832a.  v21:= temp @kind object;
  #L24832c.  call `<init>`(v20, v21) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248332.  throw v20;
  #L248334.  v8:= 1I;
  #L248336.  if v11 != v9 then goto L248394;
  #L24833a.  call temp:= `pop`(v17) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L248340.  v20:= temp @kind object;
  #L248342.  v0:= v20 @kind object;
  #L248346.  v1:= v24 @kind object;
  #L24834a.  v1.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L24834e.  call `recycle`(v17) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L248354.  if v8 != 0 then goto L248368;
  #L248358.  v0:= v24 @kind object;
  #L24835c.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248360.  v20:= v0 @kind object;
  #L248364.  if v20 != 0 then goto L2481ee;
  #L248368.  v0:= v24 @kind object;
  #L24836c.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248370.  v20:= v0 @kind wide;
  #L248374.  v0:= v16;
  #L248378.  v0:= (`long`) v0 @kind i2l;
  #L24837a.  v22:= v0 @kind wide;
  #L24837e.  v20:= v20 - v22 @kind long;
  #L248382.  v0:= v20 @kind wide;
  #L248386.  v2:= v24 @kind object;
  #L24838a.  v2.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24838e.  if v10 == 0 then goto L24839e;
  #L248392.  return v18 @kind wide;
  #L248394.  v0:= v17 @kind object;
  #L248398.  v0.`okio.Segment.pos` @type ^`int` := v11;
  #L24839c.  goto L248354;
  #L24839e.  v0:= v18 @kind wide;
  #L2483a2.  v0:= -v0 @kind long;
  #L2483a4.  v18:= v0 @kind wide;
  #L2483a8.  goto L248392;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v3 @kind this, `java.io.InputStream` v4 @kind object @name `in`) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2483bc.  v0:= 9223372036854775807L;
  #L2483c6.  v2:= 1I;
  #L2483c8.  call `readFrom`(v3, v4, v0, v2) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L2483ce.  return v3 @kind object;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v4 @kind this, `java.io.InputStream` v5 @kind object @name `in`, `long` v6 @name `byteCount`) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2483e0.  v0:= 0L;
  #L2483e4.  v0:= lcmp(v6, v0);
  #L2483e8.  if v0 >= 0 then goto L24841e;
  #L2483ec.  v0:= new `java.lang.IllegalArgumentException`;
  #L2483f0.  v1:= new `java.lang.StringBuilder`;
  #L2483f4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2483fa.  v2:= "byteCount < 0: " @kind object;
  #L2483fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248404.  v1:= temp @kind object;
  #L248406.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24840c.  v1:= temp @kind object;
  #L24840e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248414.  v1:= temp @kind object;
  #L248416.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24841c.  throw v0;
  #L24841e.  v0:= 0I;
  #L248420.  call `readFrom`(v4, v5, v6, v0) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L248426.  return v4 @kind object;
}
procedure `void` `readFully`(`okio.Buffer` v2 @kind this, `okio.Buffer` v3 @kind object @name `sink`, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.readFully:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248438.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24843c.  v0:= lcmp(v0, v4);
  #L248440.  if v0 >= 0 then goto L24845a;
  #L248444.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248448.  call `write`(v3, v2, v0) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L24844e.  v0:= new `java.io.EOFException`;
  #L248452.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L248458.  throw v0;
  #L24845a.  call `write`(v3, v2, v4) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L248460.  return @kind void;
}
procedure `void` `readFully`(`okio.Buffer` v3 @kind this, `byte`[] v4 @kind object @name `sink`) @signature `Lokio/Buffer;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L248474.  v0:= 0I;
  #L248476.  v2:= length @variable v4;
  #L248478.  if v0 >= v2 then goto L24849e;
  #L24847c.  v2:= length @variable v4;
  #L24847e.  v2:= v2 - v0 @kind int;
  #L248480.  call temp:= `read`(v3, v4, v0, v2) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L248486.  v1:= temp;
  #L248488.  v2:= -1I;
  #L24848a.  if v1 != v2 then goto L24849a;
  #L24848e.  v2:= new `java.io.EOFException`;
  #L248492.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L248498.  throw v2;
  #L24849a.  v0:= v0 + v1 @kind int;
  #L24849c.  goto L248476;
  #L24849e.  return @kind void;
}
procedure `long` `readHexadecimalUnsignedLong`(`okio.Buffer` v18 @kind this) @signature `Lokio/Buffer;.readHexadecimalUnsignedLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L2484b0.  v0:= v18 @kind object;
  #L2484b4.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2484b8.  v16:= 0L;
  #L2484bc.  v11:= lcmp(v14, v16);
  #L2484c0.  if v11 != 0 then goto L2484d4;
  #L2484c4.  v11:= new `java.lang.IllegalStateException`;
  #L2484c8.  v14:= "size == 0" @kind object;
  #L2484cc.  call `<init>`(v11, v14) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2484d2.  throw v11;
  #L2484d4.  v12:= 0L;
  #L2484d8.  v9:= 0I;
  #L2484da.  v6:= 0I;
  #L2484dc.  v0:= v18 @kind object;
  #L2484e0.  v10:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2484e4.  v4:= v10.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2484e8.  v8:= v10.`okio.Segment.pos` @type ^`int`;
  #L2484ec.  v7:= v10.`okio.Segment.limit` @type ^`int`;
  #L2484f0.  if v8 >= v7 then goto L2485e6;
  #L2484f4.  v2:= v4[v8] @kind byte;
  #L2484f8.  v11:= 48I;
  #L2484fc.  if v2 < v11 then goto L248572;
  #L248500.  v11:= 57I;
  #L248504.  if v2 > v11 then goto L248572;
  #L248508.  v5:= v2 + -48;
  #L24850c.  v14:= -3.105036184601418E231D;
  #L248510.  v14:= v14 ^& v12 @kind long;
  #L248512.  v16:= 0L;
  #L248516.  v11:= lcmp(v14, v16);
  #L24851a.  if v11 == 0 then goto L24862c;
  #L24851e.  v11:= new `okio.Buffer`;
  #L248522.  call `<init>`(v11) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L248528.  call temp:= `writeHexadecimalUnsignedLong`(v11, v12) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L24852e.  v11:= temp @kind object;
  #L248530.  call temp:= `writeByte`(v11, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248536.  v3:= temp @kind object;
  #L248538.  v11:= new `java.lang.NumberFormatException`;
  #L24853c.  v14:= new `java.lang.StringBuilder`;
  #L248540.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248546.  v15:= "Number too large: " @kind object;
  #L24854a.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248550.  v14:= temp @kind object;
  #L248552.  call temp:= `readUtf8`(v3) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L248558.  v15:= temp @kind object;
  #L24855a.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248560.  v14:= temp @kind object;
  #L248562.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248568.  v14:= temp @kind object;
  #L24856a.  call `<init>`(v11, v14) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248570.  throw v11;
  #L248572.  v11:= 97I;
  #L248576.  if v2 < v11 then goto L24858c;
  #L24857a.  v11:= 102I;
  #L24857e.  if v2 > v11 then goto L24858c;
  #L248582.  v11:= v2 + -97;
  #L248586.  v5:= v11 + 10;
  #L24858a.  goto L24850c;
  #L24858c.  v11:= 65I;
  #L248590.  if v2 < v11 then goto L2485a6;
  #L248594.  v11:= 70I;
  #L248598.  if v2 > v11 then goto L2485a6;
  #L24859c.  v11:= v2 + -65;
  #L2485a0.  v5:= v11 + 10;
  #L2485a4.  goto L24850c;
  #L2485a6.  if v9 != 0 then goto L2485e4;
  #L2485aa.  v11:= new `java.lang.NumberFormatException`;
  #L2485ae.  v14:= new `java.lang.StringBuilder`;
  #L2485b2.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2485b8.  v15:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L2485bc.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2485c2.  v14:= temp @kind object;
  #L2485c4.  call temp:= `toHexString`(v2) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L2485ca.  v15:= temp @kind object;
  #L2485cc.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2485d2.  v14:= temp @kind object;
  #L2485d4.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2485da.  v14:= temp @kind object;
  #L2485dc.  call `<init>`(v11, v14) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2485e2.  throw v11;
  #L2485e4.  v6:= 1I;
  #L2485e6.  if v8 != v7 then goto L248640;
  #L2485ea.  call temp:= `pop`(v10) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L2485f0.  v11:= temp @kind object;
  #L2485f2.  v0:= v18 @kind object;
  #L2485f6.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v11 @kind object;
  #L2485fa.  call `recycle`(v10) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L248600.  if v6 != 0 then goto L248610;
  #L248604.  v0:= v18 @kind object;
  #L248608.  v11:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24860c.  if v11 != 0 then goto L2484dc;
  #L248610.  v0:= v18 @kind object;
  #L248614.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248618.  v0:= (`long`) v9 @kind i2l;
  #L24861a.  v16:= v0 @kind wide;
  #L24861e.  v14:= v14 - v16 @kind long;
  #L248622.  v0:= v18 @kind object;
  #L248626.  v0.`okio.Buffer.size` @type ^`long` := v14 @kind wide;
  #L24862a.  return v12 @kind wide;
  #L24862c.  v11:= 4I;
  #L24862e.  v12:= v12 ^< v11 @kind long;
  #L248630.  v14:= (`long`) v5 @kind i2l;
  #L248632.  v12:= v12 ^| v14 @kind long;
  #L248634.  v8:= v8 + 1;
  #L248638.  v9:= v9 + 1;
  #L24863c.  goto L2484f0;
  #L248640.  v10.`okio.Segment.pos` @type ^`int` := v8;
  #L248644.  goto L248600;
}
procedure `int` `readInt`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L248658.  v8:= 4L;
  #L24865c.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248660.  v6:= lcmp(v6, v8);
  #L248664.  if v6 >= 0 then goto L24869e;
  #L248668.  v6:= new `java.lang.IllegalStateException`;
  #L24866c.  v7:= new `java.lang.StringBuilder`;
  #L248670.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248676.  v8:= "size < 4: " @kind object;
  #L24867a.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248680.  v7:= temp @kind object;
  #L248682.  v8:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248686.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24868c.  v7:= temp @kind object;
  #L24868e.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248694.  v7:= temp @kind object;
  #L248696.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24869c.  throw v6;
  #L24869e.  v5:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2486a2.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L2486a6.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L2486aa.  v6:= v2 - v3 @kind int;
  #L2486ae.  v7:= 4I;
  #L2486b0.  if v6 >= v7 then goto L2486fa;
  #L2486b4.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2486ba.  v6:= temp;
  #L2486bc.  v6:= v6 ^& 255;
  #L2486c0.  v6:= v6 ^< 24;
  #L2486c4.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2486ca.  v7:= temp;
  #L2486cc.  v7:= v7 ^& 255;
  #L2486d0.  v7:= v7 ^< 16;
  #L2486d4.  v6:= v6 ^| v7 @kind int;
  #L2486d6.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2486dc.  v7:= temp;
  #L2486de.  v7:= v7 ^& 255;
  #L2486e2.  v7:= v7 ^< 8;
  #L2486e6.  v6:= v6 ^| v7 @kind int;
  #L2486e8.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2486ee.  v7:= temp;
  #L2486f0.  v7:= v7 ^& 255;
  #L2486f4.  v1:= v6 ^| v7 @kind int;
  #L2486f8.  return v1;
  #L2486fa.  v0:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2486fe.  v4:= v3 + 1;
  #L248702.  v6:= v0[v3] @kind byte;
  #L248706.  v6:= v6 ^& 255;
  #L24870a.  v6:= v6 ^< 24;
  #L24870e.  v3:= v4 + 1;
  #L248712.  v7:= v0[v4] @kind byte;
  #L248716.  v7:= v7 ^& 255;
  #L24871a.  v7:= v7 ^< 16;
  #L24871e.  v6:= v6 ^| v7 @kind int;
  #L248720.  v4:= v3 + 1;
  #L248724.  v7:= v0[v3] @kind byte;
  #L248728.  v7:= v7 ^& 255;
  #L24872c.  v7:= v7 ^< 8;
  #L248730.  v6:= v6 ^| v7 @kind int;
  #L248732.  v3:= v4 + 1;
  #L248736.  v7:= v0[v4] @kind byte;
  #L24873a.  v7:= v7 ^& 255;
  #L24873e.  v1:= v6 ^| v7 @kind int;
  #L248742.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248746.  v6:= v6 - v8 @kind long;
  #L248748.  v10.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L24874c.  if v3 != v2 then goto L248764;
  #L248750.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L248756.  v6:= temp @kind object;
  #L248758.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L24875c.  call `recycle`(v5) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L248762.  goto L2486f8;
  #L248764.  v5.`okio.Segment.pos` @type ^`int` := v3;
  #L248768.  goto L2486f8;
}
procedure `int` `readIntLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readIntLe:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24877c.  call temp:= `readInt`(v1) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L248782.  v0:= temp;
  #L248784.  call temp:= `reverseBytesInt`(v0) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L24878a.  v0:= temp;
  #L24878c.  return v0;
}
procedure `long` `readLong`(`okio.Buffer` v14 @kind this) @signature `Lokio/Buffer;.readLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L2487a0.  v8:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2487a4.  v10:= 8L;
  #L2487a8.  v5:= lcmp(v8, v10);
  #L2487ac.  if v5 >= 0 then goto L2487e6;
  #L2487b0.  v5:= new `java.lang.IllegalStateException`;
  #L2487b4.  v8:= new `java.lang.StringBuilder`;
  #L2487b8.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2487be.  v9:= "size < 8: " @kind object;
  #L2487c2.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2487c8.  v8:= temp @kind object;
  #L2487ca.  v10:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2487ce.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2487d4.  v8:= temp @kind object;
  #L2487d6.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2487dc.  v8:= temp @kind object;
  #L2487de.  call `<init>`(v5, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2487e4.  throw v5;
  #L2487e6.  v4:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2487ea.  v2:= v4.`okio.Segment.pos` @type ^`int`;
  #L2487ee.  v1:= v4.`okio.Segment.limit` @type ^`int`;
  #L2487f2.  v5:= v1 - v2 @kind int;
  #L2487f6.  v8:= 8I;
  #L2487fa.  if v5 >= v8 then goto L248836;
  #L2487fe.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L248804.  v5:= temp;
  #L248806.  v8:= (`long`) v5 @kind i2l;
  #L248808.  v10:= 4294967295L;
  #L248812.  v8:= v8 ^& v10 @kind long;
  #L248814.  v5:= 32I;
  #L248818.  v8:= v8 ^< v5 @kind long;
  #L24881a.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L248820.  v5:= temp;
  #L248822.  v10:= (`long`) v5 @kind i2l;
  #L248824.  v12:= 4294967295L;
  #L24882e.  v10:= v10 ^& v12 @kind long;
  #L248830.  v6:= v8 ^| v10 @kind long;
  #L248834.  return v6 @kind wide;
  #L248836.  v0:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24883a.  v3:= v2 + 1;
  #L24883e.  v5:= v0[v2] @kind byte;
  #L248842.  v8:= (`long`) v5 @kind i2l;
  #L248844.  v10:= 255L;
  #L248848.  v8:= v8 ^& v10 @kind long;
  #L24884a.  v5:= 56I;
  #L24884e.  v8:= v8 ^< v5 @kind long;
  #L248850.  v2:= v3 + 1;
  #L248854.  v5:= v0[v3] @kind byte;
  #L248858.  v10:= (`long`) v5 @kind i2l;
  #L24885a.  v12:= 255L;
  #L24885e.  v10:= v10 ^& v12 @kind long;
  #L248860.  v5:= 48I;
  #L248864.  v10:= v10 ^< v5 @kind long;
  #L248866.  v8:= v8 ^| v10 @kind long;
  #L248868.  v3:= v2 + 1;
  #L24886c.  v5:= v0[v2] @kind byte;
  #L248870.  v10:= (`long`) v5 @kind i2l;
  #L248872.  v12:= 255L;
  #L248876.  v10:= v10 ^& v12 @kind long;
  #L248878.  v5:= 40I;
  #L24887c.  v10:= v10 ^< v5 @kind long;
  #L24887e.  v8:= v8 ^| v10 @kind long;
  #L248880.  v2:= v3 + 1;
  #L248884.  v5:= v0[v3] @kind byte;
  #L248888.  v10:= (`long`) v5 @kind i2l;
  #L24888a.  v12:= 255L;
  #L24888e.  v10:= v10 ^& v12 @kind long;
  #L248890.  v5:= 32I;
  #L248894.  v10:= v10 ^< v5 @kind long;
  #L248896.  v8:= v8 ^| v10 @kind long;
  #L248898.  v3:= v2 + 1;
  #L24889c.  v5:= v0[v2] @kind byte;
  #L2488a0.  v10:= (`long`) v5 @kind i2l;
  #L2488a2.  v12:= 255L;
  #L2488a6.  v10:= v10 ^& v12 @kind long;
  #L2488a8.  v5:= 24I;
  #L2488ac.  v10:= v10 ^< v5 @kind long;
  #L2488ae.  v8:= v8 ^| v10 @kind long;
  #L2488b0.  v2:= v3 + 1;
  #L2488b4.  v5:= v0[v3] @kind byte;
  #L2488b8.  v10:= (`long`) v5 @kind i2l;
  #L2488ba.  v12:= 255L;
  #L2488be.  v10:= v10 ^& v12 @kind long;
  #L2488c0.  v5:= 16I;
  #L2488c4.  v10:= v10 ^< v5 @kind long;
  #L2488c6.  v8:= v8 ^| v10 @kind long;
  #L2488c8.  v3:= v2 + 1;
  #L2488cc.  v5:= v0[v2] @kind byte;
  #L2488d0.  v10:= (`long`) v5 @kind i2l;
  #L2488d2.  v12:= 255L;
  #L2488d6.  v10:= v10 ^& v12 @kind long;
  #L2488d8.  v5:= 8I;
  #L2488dc.  v10:= v10 ^< v5 @kind long;
  #L2488de.  v8:= v8 ^| v10 @kind long;
  #L2488e0.  v2:= v3 + 1;
  #L2488e4.  v5:= v0[v3] @kind byte;
  #L2488e8.  v10:= (`long`) v5 @kind i2l;
  #L2488ea.  v12:= 255L;
  #L2488ee.  v10:= v10 ^& v12 @kind long;
  #L2488f0.  v6:= v8 ^| v10 @kind long;
  #L2488f4.  v8:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2488f8.  v10:= 8L;
  #L2488fc.  v8:= v8 - v10 @kind long;
  #L2488fe.  v14.`okio.Buffer.size` @type ^`long` := v8 @kind wide;
  #L248902.  if v2 != v1 then goto L24891a;
  #L248906.  call temp:= `pop`(v4) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24890c.  v5:= temp @kind object;
  #L24890e.  v14.`okio.Buffer.head` @type ^`okio.Segment` := v5 @kind object;
  #L248912.  call `recycle`(v4) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L248918.  goto L248834;
  #L24891a.  v4.`okio.Segment.pos` @type ^`int` := v2;
  #L24891e.  goto L248834;
}
procedure `long` `readLongLe`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readLongLe:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248930.  call temp:= `readLong`(v2) @signature `Lokio/Buffer;.readLong:()J` @kind virtual;
  #L248936.  v0:= temp @kind wide;
  #L248938.  call temp:= `reverseBytesLong`(v0) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L24893e.  v0:= temp @kind wide;
  #L248940.  return v0 @kind wide;
}
procedure `short` `readShort`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L248954.  v8:= 2L;
  #L248958.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24895c.  v6:= lcmp(v6, v8);
  #L248960.  if v6 >= 0 then goto L24899a;
  #L248964.  v6:= new `java.lang.IllegalStateException`;
  #L248968.  v7:= new `java.lang.StringBuilder`;
  #L24896c.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248972.  v8:= "size < 2: " @kind object;
  #L248976.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24897c.  v7:= temp @kind object;
  #L24897e.  v8:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248982.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L248988.  v7:= temp @kind object;
  #L24898a.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248990.  v7:= temp @kind object;
  #L248992.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248998.  throw v6;
  #L24899a.  v5:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24899e.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L2489a2.  v1:= v5.`okio.Segment.limit` @type ^`int`;
  #L2489a6.  v6:= v1 - v2 @kind int;
  #L2489aa.  v7:= 2I;
  #L2489ac.  if v6 >= v7 then goto L2489d4;
  #L2489b0.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2489b6.  v6:= temp;
  #L2489b8.  v6:= v6 ^& 255;
  #L2489bc.  v6:= v6 ^< 8;
  #L2489c0.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2489c6.  v7:= temp;
  #L2489c8.  v7:= v7 ^& 255;
  #L2489cc.  v4:= v6 ^| v7 @kind int;
  #L2489d0.  v6:= (`short`) v4 @kind i2s;
  #L2489d2.  return v6;
  #L2489d4.  v0:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2489d8.  v3:= v2 + 1;
  #L2489dc.  v6:= v0[v2] @kind byte;
  #L2489e0.  v6:= v6 ^& 255;
  #L2489e4.  v6:= v6 ^< 8;
  #L2489e8.  v2:= v3 + 1;
  #L2489ec.  v7:= v0[v3] @kind byte;
  #L2489f0.  v7:= v7 ^& 255;
  #L2489f4.  v4:= v6 ^| v7 @kind int;
  #L2489f8.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2489fc.  v6:= v6 - v8 @kind long;
  #L2489fe.  v10.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L248a02.  if v2 != v1 then goto L248a1c;
  #L248a06.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L248a0c.  v6:= temp @kind object;
  #L248a0e.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L248a12.  call `recycle`(v5) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L248a18.  v6:= (`short`) v4 @kind i2s;
  #L248a1a.  goto L2489d2;
  #L248a1c.  v5.`okio.Segment.pos` @type ^`int` := v2;
  #L248a20.  goto L248a18;
}
procedure `short` `readShortLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readShortLe:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L248a34.  call temp:= `readShort`(v1) @signature `Lokio/Buffer;.readShort:()S` @kind virtual;
  #L248a3a.  v0:= temp;
  #L248a3c.  call temp:= `reverseBytesShort`(v0) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L248a42.  v0:= temp;
  #L248a44.  return v0;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v9 @kind this, `long` v10 @name `byteCount`, `java.nio.charset.Charset` v12 @kind object @name `charset`) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L248a58.  v2:= 0L;
  #L248a5c.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248a60.  v4:= v10 @kind wide;
  #L248a62.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L248a68.  if v12 != 0 then goto L248a7c;
  #L248a6c.  v0:= new `java.lang.IllegalArgumentException`;
  #L248a70.  v1:= "charset == null" @kind object;
  #L248a74.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248a7a.  throw v0;
  #L248a7c.  v0:= 2147483647L;
  #L248a82.  v0:= lcmp(v10, v0);
  #L248a86.  if v0 <= 0 then goto L248abc;
  #L248a8a.  v0:= new `java.lang.IllegalArgumentException`;
  #L248a8e.  v1:= new `java.lang.StringBuilder`;
  #L248a92.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248a98.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L248a9c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248aa2.  v1:= temp @kind object;
  #L248aa4.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L248aaa.  v1:= temp @kind object;
  #L248aac.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248ab2.  v1:= temp @kind object;
  #L248ab4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248aba.  throw v0;
  #L248abc.  v0:= lcmp(v10, v2);
  #L248ac0.  if v0 != 0 then goto L248aca;
  #L248ac4.  v6:= "" @kind object;
  #L248ac8.  return v6 @kind object;
  #L248aca.  v7:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248ace.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L248ad2.  v0:= (`long`) v0 @kind i2l;
  #L248ad4.  v0:= v0 + v10 @kind long;
  #L248ad6.  v2:= v7.`okio.Segment.limit` @type ^`int`;
  #L248ada.  v2:= (`long`) v2 @kind i2l;
  #L248adc.  v0:= lcmp(v0, v2);
  #L248ae0.  if v0 <= 0 then goto L248af8;
  #L248ae4.  v6:= new `java.lang.String`;
  #L248ae8.  call temp:= `readByteArray`(v9, v10) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L248aee.  v0:= temp @kind object;
  #L248af0.  call `<init>`(v6, v0, v12) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L248af6.  goto L248ac8;
  #L248af8.  v6:= new `java.lang.String`;
  #L248afc.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L248b00.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L248b04.  v2:= (`int`) v10 @kind l2i;
  #L248b06.  call `<init>`(v6, v0, v1, v2, v12) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L248b0c.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L248b10.  v0:= (`long`) v0 @kind i2l;
  #L248b12.  v0:= v0 + v10 @kind long;
  #L248b14.  v0:= (`int`) v0 @kind l2i;
  #L248b16.  v7.`okio.Segment.pos` @type ^`int` := v0;
  #L248b1a.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248b1e.  v0:= v0 - v10 @kind long;
  #L248b20.  v9.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L248b24.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L248b28.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L248b2c.  if v0 != v1 then goto L248ac8;
  #L248b30.  call temp:= `pop`(v7) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L248b36.  v0:= temp @kind object;
  #L248b38.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L248b3c.  call `recycle`(v7) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L248b42.  goto L248ac8;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v4 @kind this, `java.nio.charset.Charset` v5 @kind object @name `charset`) @signature `Lokio/Buffer;.readString:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L248b54.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248b58.  call temp:= `readString`(v4, v2, v5) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L248b5e.  v1:= temp @kind object;
  #L248b60.  return v1 @kind object;
  #L248b62.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L248b64.  v1:= new `java.lang.AssertionError`;
  #L248b68.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L248b6e.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L248b62;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L248b90.  v0:= new `okio.Buffer$UnsafeCursor`;
  #L248b94.  call `<init>`(v0) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L248b9a.  call temp:= `readUnsafe`(v1, v0) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L248ba0.  v0:= temp @kind object;
  #L248ba2.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v2 @kind this, `okio.Buffer$UnsafeCursor` v3 @kind object @name `unsafeCursor`) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248bb4.  v0:= v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L248bb8.  if v0 == 0 then goto L248bcc;
  #L248bbc.  v0:= new `java.lang.IllegalStateException`;
  #L248bc0.  v1:= "already attached to a buffer" @kind object;
  #L248bc4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248bca.  throw v0;
  #L248bcc.  v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v2 @kind object;
  #L248bd0.  v0:= 0I;
  #L248bd2.  v3.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v0 @kind boolean;
  #L248bd6.  return v3 @kind object;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L248be8.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248bec.  v1:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L248bf0.  call temp:= `readString`(v4, v2, v1) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L248bf6.  v1:= temp @kind object;
  #L248bf8.  return v1 @kind object;
  #L248bfa.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L248bfc.  v1:= new `java.lang.AssertionError`;
  #L248c00.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L248c06.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L248bfa;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v1 @kind this, `long` v2 @name `byteCount`) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L248c28.  v0:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L248c2c.  call temp:= `readString`(v1, v2, v0) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L248c32.  v0:= temp @kind object;
  #L248c34.  return v0 @kind object;
}
procedure `int` `readUtf8CodePoint`(`okio.Buffer` v12 @kind this) @signature `Lokio/Buffer;.readUtf8CodePoint:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L248c48.  v10:= 0L;
  #L248c4c.  v6:= 65533I;
  #L248c52.  v8:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248c56.  v7:= lcmp(v8, v10);
  #L248c5a.  if v7 != 0 then goto L248c6a;
  #L248c5e.  v6:= new `java.io.EOFException`;
  #L248c62.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L248c68.  throw v6;
  #L248c6a.  call temp:= `getByte`(v12, v10) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L248c70.  v1:= temp;
  #L248c72.  v7:= v1 ^& 128;
  #L248c76.  if v7 != 0 then goto L248d02;
  #L248c7a.  v3:= v1 ^& 127;
  #L248c7e.  v2:= 1I;
  #L248c80.  v5:= 0I;
  #L248c82.  v8:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248c86.  v10:= (`long`) v2 @kind i2l;
  #L248c88.  v7:= lcmp(v8, v10);
  #L248c8c.  if v7 >= 0 then goto L248d58;
  #L248c90.  v6:= new `java.io.EOFException`;
  #L248c94.  v7:= new `java.lang.StringBuilder`;
  #L248c98.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248c9e.  v8:= "size < " @kind object;
  #L248ca2.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248ca8.  v7:= temp @kind object;
  #L248caa.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L248cb0.  v7:= temp @kind object;
  #L248cb2.  v8:= ": " @kind object;
  #L248cb6.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248cbc.  v7:= temp @kind object;
  #L248cbe.  v8:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248cc2.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L248cc8.  v7:= temp @kind object;
  #L248cca.  v8:= " (to read code point prefixed 0x" @kind object;
  #L248cce.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248cd4.  v7:= temp @kind object;
  #L248cd6.  call temp:= `toHexString`(v1) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L248cdc.  v8:= temp @kind object;
  #L248cde.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248ce4.  v7:= temp @kind object;
  #L248ce6.  v8:= ")" @kind object;
  #L248cea.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248cf0.  v7:= temp @kind object;
  #L248cf2.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248cf8.  v7:= temp @kind object;
  #L248cfa.  call `<init>`(v6, v7) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248d00.  throw v6;
  #L248d02.  v7:= v1 ^& 224;
  #L248d06.  v8:= 192I;
  #L248d0a.  if v7 != v8 then goto L248d1a;
  #L248d0e.  v3:= v1 ^& 31;
  #L248d12.  v2:= 2I;
  #L248d14.  v5:= 128I;
  #L248d18.  goto L248c82;
  #L248d1a.  v7:= v1 ^& 240;
  #L248d1e.  v8:= 224I;
  #L248d22.  if v7 != v8 then goto L248d32;
  #L248d26.  v3:= v1 ^& 15;
  #L248d2a.  v2:= 3I;
  #L248d2c.  v5:= 2048I;
  #L248d30.  goto L248c82;
  #L248d32.  v7:= v1 ^& 248;
  #L248d36.  v8:= 240I;
  #L248d3a.  if v7 != v8 then goto L248d4a;
  #L248d3e.  v3:= v1 ^& 7;
  #L248d42.  v2:= 4I;
  #L248d44.  v5:= 65536I;
  #L248d48.  goto L248c82;
  #L248d4a.  v8:= 1L;
  #L248d4e.  call `skip`(v12, v8) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L248d54.  v3:= v6;
  #L248d56.  return v3;
  #L248d58.  v4:= 1I;
  #L248d5a.  if v4 >= v2 then goto L248d90;
  #L248d5e.  v8:= (`long`) v4 @kind i2l;
  #L248d60.  call temp:= `getByte`(v12, v8) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L248d66.  v0:= temp;
  #L248d68.  v7:= v0 ^& 192;
  #L248d6c.  v8:= 128I;
  #L248d70.  if v7 != v8 then goto L248d84;
  #L248d74.  v3:= v3 ^< 6;
  #L248d78.  v7:= v0 ^& 63;
  #L248d7c.  v3:= v3 ^| v7 @kind int;
  #L248d7e.  v4:= v4 + 1;
  #L248d82.  goto L248d5a;
  #L248d84.  v8:= (`long`) v4 @kind i2l;
  #L248d86.  call `skip`(v12, v8) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L248d8c.  v3:= v6;
  #L248d8e.  goto L248d56;
  #L248d90.  v8:= (`long`) v2 @kind i2l;
  #L248d92.  call `skip`(v12, v8) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L248d98.  v7:= 1114111I;
  #L248d9e.  if v3 <= v7 then goto L248da6;
  #L248da2.  v3:= v6;
  #L248da4.  goto L248d56;
  #L248da6.  v7:= 55296I;
  #L248dac.  if v3 < v7 then goto L248dbe;
  #L248db0.  v7:= 57343I;
  #L248db6.  if v3 > v7 then goto L248dbe;
  #L248dba.  v3:= v6;
  #L248dbc.  goto L248d56;
  #L248dbe.  if v3 >= v5 then goto L248d56;
  #L248dc2.  v3:= v6;
  #L248dc4.  goto L248d56;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.readUtf8Line:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L248dd8.  v2:= 10I;
  #L248ddc.  call temp:= `indexOf`(v6, v2) @signature `Lokio/Buffer;.indexOf:(B)J` @kind virtual;
  #L248de2.  v0:= temp @kind wide;
  #L248de4.  v2:= -1L;
  #L248de8.  v2:= lcmp(v0, v2);
  #L248dec.  if v2 != 0 then goto L248e12;
  #L248df0.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248df4.  v4:= 0L;
  #L248df8.  v2:= lcmp(v2, v4);
  #L248dfc.  if v2 == 0 then goto L248e0e;
  #L248e00.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248e04.  call temp:= `readUtf8`(v6, v2) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L248e0a.  v2:= temp @kind object;
  #L248e0c.  return v2 @kind object;
  #L248e0e.  v2:= 0I;
  #L248e10.  goto L248e0c;
  #L248e12.  call temp:= `readUtf8Line`(v6, v0) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L248e18.  v2:= temp @kind object;
  #L248e1a.  goto L248e0c;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v7 @kind this, `long` v8 @name `newline`) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L248e2c.  v4:= 1L;
  #L248e30.  v2:= 0L;
  #L248e34.  v2:= lcmp(v8, v2);
  #L248e38.  if v2 <= 0 then goto L248e6a;
  #L248e3c.  v2:= v8 - v4 @kind long;
  #L248e40.  call temp:= `getByte`(v7, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L248e46.  v2:= temp;
  #L248e48.  v3:= 13I;
  #L248e4c.  if v2 != v3 then goto L248e6a;
  #L248e50.  v2:= v8 - v4 @kind long;
  #L248e54.  call temp:= `readUtf8`(v7, v2) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L248e5a.  v0:= temp @kind object;
  #L248e5c.  v2:= 2L;
  #L248e60.  call `skip`(v7, v2) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L248e66.  v1:= v0 @kind object;
  #L248e68.  return v1 @kind object;
  #L248e6a.  call temp:= `readUtf8`(v7, v8) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L248e70.  v0:= temp @kind object;
  #L248e72.  call `skip`(v7, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L248e78.  v1:= v0 @kind object;
  #L248e7a.  goto L248e68;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readUtf8LineStrict:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248e8c.  v0:= 9223372036854775807L;
  #L248e96.  call temp:= `readUtf8LineStrict`(v2, v0) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @kind virtual;
  #L248e9c.  v0:= temp @kind object;
  #L248e9e.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v17 @kind this, `long` v18 @name `limit`) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L248eb0.  v2:= 0L;
  #L248eb4.  v2:= lcmp(v18, v2);
  #L248eb8.  if v2 >= 0 then goto L248ef2;
  #L248ebc.  v2:= new `java.lang.IllegalArgumentException`;
  #L248ec0.  v3:= new `java.lang.StringBuilder`;
  #L248ec4.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248eca.  v4:= "limit < 0: " @kind object;
  #L248ece.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248ed4.  v3:= temp @kind object;
  #L248ed6.  v0:= v18 @kind wide;
  #L248eda.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L248ee0.  v3:= temp @kind object;
  #L248ee2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248ee8.  v3:= temp @kind object;
  #L248eea.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248ef0.  throw v2;
  #L248ef2.  v2:= 9223372036854775807L;
  #L248efc.  v2:= lcmp(v18, v2);
  #L248f00.  if v2 != 0 then goto L248f3c;
  #L248f04.  v6:= 9223372036854775807L;
  #L248f0e.  v3:= 10I;
  #L248f12.  v4:= 0L;
  #L248f16.  v2:= v17 @kind object;
  #L248f1a.  call temp:= `indexOf`(v2, v3, v4, v6) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L248f20.  v14:= temp @kind wide;
  #L248f22.  v2:= -1L;
  #L248f26.  v2:= lcmp(v14, v2);
  #L248f2a.  if v2 == 0 then goto L248f46;
  #L248f2e.  v0:= v17 @kind object;
  #L248f32.  call temp:= `readUtf8Line`(v0, v14) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L248f38.  v2:= temp @kind object;
  #L248f3a.  return v2 @kind object;
  #L248f3c.  v2:= 1L;
  #L248f40.  v6:= v18 + v2 @kind long;
  #L248f44.  goto L248f0e;
  #L248f46.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L248f4c.  v2:= temp @kind wide;
  #L248f4e.  v2:= lcmp(v6, v2);
  #L248f52.  if v2 >= 0 then goto L248f94;
  #L248f56.  v2:= 1L;
  #L248f5a.  v2:= v6 - v2 @kind long;
  #L248f5e.  v0:= v17 @kind object;
  #L248f62.  call temp:= `getByte`(v0, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L248f68.  v2:= temp;
  #L248f6a.  v3:= 13I;
  #L248f6e.  if v2 != v3 then goto L248f94;
  #L248f72.  v0:= v17 @kind object;
  #L248f76.  call temp:= `getByte`(v0, v6) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L248f7c.  v2:= temp;
  #L248f7e.  v3:= 10I;
  #L248f82.  if v2 != v3 then goto L248f94;
  #L248f86.  v0:= v17 @kind object;
  #L248f8a.  call temp:= `readUtf8Line`(v0, v6) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L248f90.  v2:= temp @kind object;
  #L248f92.  goto L248f3a;
  #L248f94.  v9:= new `okio.Buffer`;
  #L248f98.  call `<init>`(v9) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L248f9e.  v10:= 0L;
  #L248fa2.  v2:= 32L;
  #L248fa6.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L248fac.  v4:= temp @kind wide;
  #L248fae.  call temp:= `min`(v2, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L248fb4.  v12:= temp @kind wide;
  #L248fb6.  v8:= v17 @kind object;
  #L248fba.  call temp:= `copyTo`(v8, v9, v10, v12) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L248fc0.  v2:= new `java.io.EOFException`;
  #L248fc4.  v3:= new `java.lang.StringBuilder`;
  #L248fc8.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248fce.  v4:= "\\n not found: limit=" @kind object;
  #L248fd2.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248fd8.  v3:= temp @kind object;
  #L248fda.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L248fe0.  v4:= temp @kind wide;
  #L248fe2.  v0:= v18 @kind wide;
  #L248fe6.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L248fec.  v4:= temp @kind wide;
  #L248fee.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L248ff4.  v3:= temp @kind object;
  #L248ff6.  v4:= " content=" @kind object;
  #L248ffa.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249000.  v3:= temp @kind object;
  #L249002.  call temp:= `readByteString`(v9) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L249008.  v4:= temp @kind object;
  #L24900a.  call temp:= `hex`(v4) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L249010.  v4:= temp @kind object;
  #L249012.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249018.  v3:= temp @kind object;
  #L24901a.  v4:= 8230I;
  #L24901e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L249024.  v3:= temp @kind object;
  #L249026.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24902c.  v3:= temp @kind object;
  #L24902e.  call `<init>`(v2, v3) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249034.  throw v2;
}
procedure `boolean` `request`(`okio.Buffer` v3 @kind this, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.request:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L249048.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24904c.  v0:= lcmp(v0, v4);
  #L249050.  if v0 < 0 then goto L249058;
  #L249054.  v0:= 1I;
  #L249056.  return v0;
  #L249058.  v0:= 0I;
  #L24905a.  goto L249056;
}
procedure `void` `require`(`okio.Buffer` v3 @kind this, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.require:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24906c.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249070.  v0:= lcmp(v0, v4);
  #L249074.  if v0 >= 0 then goto L249084;
  #L249078.  v0:= new `java.io.EOFException`;
  #L24907c.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L249082.  throw v0;
  #L249084.  return @kind void;
}
procedure `java.util.List` `segmentSizes`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.segmentSizes:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L249098.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24909c.  if v2 != 0 then goto L2490aa;
  #L2490a0.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L2490a6.  v0:= temp @kind object;
  #L2490a8.  return v0 @kind object;
  #L2490aa.  v0:= new `java.util.ArrayList`;
  #L2490ae.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2490b4.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2490b8.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L2490bc.  v3:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2490c0.  v3:= v3.`okio.Segment.pos` @type ^`int`;
  #L2490c4.  v2:= v2 - v3 @kind int;
  #L2490c6.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2490cc.  v2:= temp @kind object;
  #L2490ce.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2490d4.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2490d8.  v1:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2490dc.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2490e0.  if v1 == v2 then goto L2490a8;
  #L2490e4.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L2490e8.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L2490ec.  v2:= v2 - v3 @kind int;
  #L2490ee.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2490f4.  v2:= temp @kind object;
  #L2490f6.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2490fc.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L249100.  goto L2490dc;
}
procedure `int` `select`(`okio.Buffer` v12 @kind this, `okio.Options` v13 @kind object @name `options`) @signature `Lokio/Buffer;.select:(Lokio/Options;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L249114.  v1:= v12.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249118.  if v1 != 0 then goto L24912a;
  #L24911c.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L249120.  call temp:= `indexOf`(v13, v0) @signature `Lokio/Options;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L249126.  v8:= temp;
  #L249128.  return v8;
  #L24912a.  v6:= v13.`okio.Options.byteStrings` @type ^`okio.ByteString`[] @kind object;
  #L24912e.  v8:= 0I;
  #L249130.  v9:= length @variable v6;
  #L249132.  if v8 >= v9 then goto L249192;
  #L249136.  v3:= v6[v8] @kind object;
  #L24913a.  v4:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24913e.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L249144.  v0:= temp;
  #L249146.  v10:= (`long`) v0 @kind i2l;
  #L249148.  v0:= lcmp(v4, v10);
  #L24914c.  if v0 < 0 then goto L24918c;
  #L249150.  v2:= v1.`okio.Segment.pos` @type ^`int`;
  #L249154.  v4:= 0I;
  #L249156.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L24915c.  v5:= temp;
  #L24915e.  v0:= v12 @kind object;
  #L249160.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L249166.  v0:= temp;
  #L249168.  if v0 == 0 then goto L24918c;
  #Try_start0.  
  #L24916c.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L249172.  v0:= temp;
  #L249174.  v4:= (`long`) v0 @kind i2l;
  #L249176.  call `skip`(v12, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #Try_end0.  
  #L24917c.  goto L249128;
  #L24917e.  v7:= Exception @type ^`java.io.EOFException` @kind object;
  #L249180.  v0:= new `java.lang.AssertionError`;
  #L249184.  call `<init>`(v0, v7) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L24918a.  throw v0;
  #L24918c.  v8:= v8 + 1;
  #L249190.  goto L249132;
  #L249192.  v8:= -1I;
  #L249194.  goto L249128;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L24917e;
}
procedure `int` `selectPrefix`(`okio.Buffer` v14 @kind this, `okio.Options` v15 @kind object @name `options`) @signature `Lokio/Buffer;.selectPrefix:(Lokio/Options;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L2491b8.  v1:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2491bc.  v6:= v15.`okio.Options.byteStrings` @type ^`okio.ByteString`[] @kind object;
  #L2491c0.  v7:= 0I;
  #L2491c2.  v8:= length @variable v6;
  #L2491c4.  if v7 >= v8 then goto L249204;
  #L2491c8.  v3:= v6[v7] @kind object;
  #L2491cc.  v10:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2491d0.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L2491d6.  v0:= temp;
  #L2491d8.  v12:= (`long`) v0 @kind i2l;
  #L2491da.  call temp:= `min`(v10, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2491e0.  v10:= temp @kind wide;
  #L2491e2.  v5:= (`int`) v10 @kind l2i;
  #L2491e4.  if v5 == 0 then goto L2491fc;
  #L2491e8.  v2:= v1.`okio.Segment.pos` @type ^`int`;
  #L2491ec.  v4:= 0I;
  #L2491ee.  v0:= v14 @kind object;
  #L2491f0.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L2491f6.  v0:= temp;
  #L2491f8.  if v0 == 0 then goto L2491fe;
  #L2491fc.  return v7;
  #L2491fe.  v7:= v7 + 1;
  #L249202.  goto L2491c4;
  #L249204.  v7:= -1I;
  #L249206.  goto L2491fc;
}
procedure `okio.ByteString` `sha1`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha1:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249218.  v0:= "SHA-1" @kind object;
  #L24921c.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L249222.  v0:= temp @kind object;
  #L249224.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha256:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249238.  v0:= "SHA-256" @kind object;
  #L24923c.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L249242.  v0:= temp @kind object;
  #L249244.  return v0 @kind object;
}
procedure `okio.ByteString` `sha512`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha512:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249258.  v0:= "SHA-512" @kind object;
  #L24925c.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L249262.  v0:= temp @kind object;
  #L249264.  return v0 @kind object;
}
procedure `long` `size`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.size:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249278.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24927c.  return v0 @kind wide;
}
procedure `void` `skip`(`okio.Buffer` v7 @kind this, `long` v8 @name `byteCount`) @signature `Lokio/Buffer;.skip:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L249290.  v2:= 0L;
  #L249294.  v2:= lcmp(v8, v2);
  #L249298.  if v2 <= 0 then goto L249318;
  #L24929c.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2492a0.  if v2 != 0 then goto L2492b0;
  #L2492a4.  v2:= new `java.io.EOFException`;
  #L2492a8.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L2492ae.  throw v2;
  #L2492b0.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2492b4.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L2492b8.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2492bc.  v3:= v3.`okio.Segment.pos` @type ^`int`;
  #L2492c0.  v2:= v2 - v3 @kind int;
  #L2492c2.  v2:= (`long`) v2 @kind i2l;
  #L2492c4.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2492ca.  v2:= temp @kind wide;
  #L2492cc.  v1:= (`int`) v2 @kind l2i;
  #L2492ce.  v2:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2492d2.  v4:= (`long`) v1 @kind i2l;
  #L2492d4.  v2:= v2 - v4 @kind long;
  #L2492d6.  v7.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L2492da.  v2:= (`long`) v1 @kind i2l;
  #L2492dc.  v8:= v8 - v2 @kind long;
  #L2492de.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2492e2.  v3:= v2.`okio.Segment.pos` @type ^`int`;
  #L2492e6.  v3:= v3 + v1 @kind int;
  #L2492e8.  v2.`okio.Segment.pos` @type ^`int` := v3;
  #L2492ec.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2492f0.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L2492f4.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2492f8.  v3:= v3.`okio.Segment.limit` @type ^`int`;
  #L2492fc.  if v2 != v3 then goto L249290;
  #L249300.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249304.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24930a.  v2:= temp @kind object;
  #L24930c.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L249310.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L249316.  goto L249290;
  #L249318.  return @kind void;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24932c.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249330.  v2:= 2147483647L;
  #L249336.  v0:= lcmp(v0, v2);
  #L24933a.  if v0 <= 0 then goto L249374;
  #L24933e.  v0:= new `java.lang.IllegalArgumentException`;
  #L249342.  v1:= new `java.lang.StringBuilder`;
  #L249346.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24934c.  v2:= "size > Integer.MAX_VALUE: " @kind object;
  #L249350.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249356.  v1:= temp @kind object;
  #L249358.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24935c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L249362.  v1:= temp @kind object;
  #L249364.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24936a.  v1:= temp @kind object;
  #L24936c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249372.  throw v0;
  #L249374.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249378.  v0:= (`int`) v0 @kind l2i;
  #L24937a.  call temp:= `snapshot`(v4, v0) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L249380.  v0:= temp @kind object;
  #L249382.  return v0 @kind object;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v1 @kind this, `int` v2 @name `byteCount`) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249394.  if v2 != 0 then goto L24939e;
  #L249398.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L24939c.  return v0 @kind object;
  #L24939e.  v0:= new `okio.SegmentedByteString`;
  #L2493a2.  call `<init>`(v0, v1, v2) @signature `Lokio/SegmentedByteString;.<init>:(Lokio/Buffer;I)V` @kind direct;
  #L2493a8.  goto L24939c;
}
procedure `okio.Timeout` `timeout`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2493bc.  v0:= `@@okio.Timeout.NONE` @type ^`okio.Timeout` @kind object;
  #L2493c0.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2493d4.  call temp:= `snapshot`(v1) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @kind virtual;
  #L2493da.  v0:= temp @kind object;
  #L2493dc.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L2493e2.  v0:= temp @kind object;
  #L2493e4.  return v0 @kind object;
}
procedure `okio.Segment` `writableSegment`(`okio.Buffer` v3 @kind this, `int` v4 @name `minimumCapacity`) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2493f8.  v2:= 8192I;
  #L2493fc.  v1:= 1I;
  #L2493fe.  if v4 < v1 then goto L249406;
  #L249402.  if v4 <= v2 then goto L249412;
  #L249406.  v1:= new `java.lang.IllegalArgumentException`;
  #L24940a.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L249410.  throw v1;
  #L249412.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249416.  if v1 != 0 then goto L24943c;
  #L24941a.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L249420.  v1:= temp @kind object;
  #L249422.  v3.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L249426.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24942a.  v2:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24942e.  v0:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249432.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v0 @kind object;
  #L249436.  v1.`okio.Segment.next` @type ^`okio.Segment` := v0 @kind object;
  #L24943a.  return v0 @kind object;
  #L24943c.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249440.  v0:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L249444.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L249448.  v1:= v1 + v4 @kind int;
  #L24944a.  if v1 > v2 then goto L249456;
  #L24944e.  v1:= v0.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L249452.  if v1 != 0 then goto L24943a;
  #L249456.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L24945c.  v1:= temp @kind object;
  #L24945e.  call temp:= `push`(v0, v1) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L249464.  v0:= temp @kind object;
  #L249466.  goto L24943a;
}
procedure `int` `write`(`okio.Buffer` v8 @kind this, `java.nio.ByteBuffer` v9 @kind object @name `source`) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L249478.  if v9 != 0 then goto L24948c;
  #L24947c.  v4:= new `java.lang.IllegalArgumentException`;
  #L249480.  v5:= "source == null" @kind object;
  #L249484.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24948a.  throw v4;
  #L24948c.  call temp:= `remaining`(v9) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L249492.  v0:= temp;
  #L249494.  v1:= v0;
  #L249496.  if v1 <= 0 then goto L2494d0;
  #L24949a.  v4:= 1I;
  #L24949c.  call temp:= `writableSegment`(v8, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L2494a2.  v2:= temp @kind object;
  #L2494a4.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L2494a8.  v4:= v4 - 8192;
  #L2494ac.  call temp:= `min`(v1, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2494b2.  v3:= temp;
  #L2494b4.  v4:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2494b8.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L2494bc.  call temp:= `get`(v9, v4, v5, v3) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L2494c2.  v1:= v1 - v3 @kind int;
  #L2494c4.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L2494c8.  v4:= v4 + v3 @kind int;
  #L2494ca.  v2.`okio.Segment.limit` @type ^`int` := v4;
  #L2494ce.  goto L249496;
  #L2494d0.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2494d4.  v6:= (`long`) v0 @kind i2l;
  #L2494d6.  v4:= v4 + v6 @kind long;
  #L2494d8.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L2494dc.  return v0;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object @name `byteString`) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2494f0.  if v3 != 0 then goto L249504;
  #L2494f4.  v0:= new `java.lang.IllegalArgumentException`;
  #L2494f8.  v1:= "byteString == null" @kind object;
  #L2494fc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249502.  throw v0;
  #L249504.  call `write`(v3, v2) @signature `Lokio/ByteString;.write:(Lokio/Buffer;)V` @kind virtual;
  #L24950a.  return v2 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object @name `source`) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24951c.  if v3 != 0 then goto L249530;
  #L249520.  v0:= new `java.lang.IllegalArgumentException`;
  #L249524.  v1:= "source == null" @kind object;
  #L249528.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24952e.  throw v0;
  #L249530.  v0:= 0I;
  #L249532.  v1:= length @variable v3;
  #L249534.  call temp:= `write`(v2, v3, v0, v1) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L24953a.  v0:= temp @kind object;
  #L24953c.  return v0 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v9 @kind this, `byte`[] v10 @kind object @name `source`, `int` v11 @name `offset`, `int` v12 @name `byteCount`) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L249550.  if v10 != 0 then goto L249564;
  #L249554.  v0:= new `java.lang.IllegalArgumentException`;
  #L249558.  v1:= "source == null" @kind object;
  #L24955c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249562.  throw v0;
  #L249564.  v0:= length @variable v10;
  #L249566.  v0:= (`long`) v0 @kind i2l;
  #L249568.  v2:= (`long`) v11 @kind i2l;
  #L24956a.  v4:= (`long`) v12 @kind i2l;
  #L24956c.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L249572.  v6:= v11 + v12 @kind int;
  #L249576.  if v11 >= v6 then goto L2495b4;
  #L24957a.  v0:= 1I;
  #L24957c.  call temp:= `writableSegment`(v9, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L249582.  v7:= temp @kind object;
  #L249584.  v0:= v6 - v11 @kind int;
  #L249588.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L24958c.  v1:= v1 - 8192;
  #L249590.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L249596.  v8:= temp;
  #L249598.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24959c.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L2495a0.  call `arraycopy`(v10, v11, v0, v1, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2495a6.  v11:= v11 + v8 @kind int;
  #L2495a8.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L2495ac.  v0:= v0 + v8 @kind int;
  #L2495ae.  v7.`okio.Segment.limit` @type ^`int` := v0;
  #L2495b2.  goto L249576;
  #L2495b4.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2495b8.  v2:= (`long`) v12 @kind i2l;
  #L2495ba.  v0:= v0 + v2 @kind long;
  #L2495bc.  v9.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L2495c0.  return v9 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2495d4.  call temp:= `write`(v1, v2) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L2495da.  v0:= temp @kind object;
  #L2495dc.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v4 @kind this, `okio.Source` v5 @kind object @name `source`, `long` v6 @name `byteCount`) @signature `Lokio/Buffer;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2495f0.  v2:= 0L;
  #L2495f4.  v2:= lcmp(v6, v2);
  #L2495f8.  if v2 <= 0 then goto L249620;
  #L2495fc.  call temp:= `read`(v5, v4, v6) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L249602.  v0:= temp @kind wide;
  #L249604.  v2:= -1L;
  #L249608.  v2:= lcmp(v0, v2);
  #L24960c.  if v2 != 0 then goto L24961c;
  #L249610.  v2:= new `java.io.EOFException`;
  #L249614.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L24961a.  throw v2;
  #L24961c.  v6:= v6 - v0 @kind long;
  #L24961e.  goto L2495f0;
  #L249620.  return v4 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v1 @kind this, `byte`[] v2 @kind object) @signature `Lokio/Buffer;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249634.  call temp:= `write`(v1, v2) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L24963a.  v0:= temp @kind object;
  #L24963c.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/Buffer;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249650.  call temp:= `write`(v1, v2, v3, v4) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L249656.  v0:= temp @kind object;
  #L249658.  return v0 @kind object;
}
procedure `void` `write`(`okio.Buffer` v10 @kind this, `okio.Buffer` v11 @kind object @name `source`, `long` v12 @name `byteCount`) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L24966c.  v2:= 0L;
  #L249670.  if v11 != 0 then goto L249684;
  #L249674.  v0:= new `java.lang.IllegalArgumentException`;
  #L249678.  v1:= "source == null" @kind object;
  #L24967c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249682.  throw v0;
  #L249684.  if v11 != v10 then goto L249698;
  #L249688.  v0:= new `java.lang.IllegalArgumentException`;
  #L24968c.  v1:= "source == this" @kind object;
  #L249690.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249696.  throw v0;
  #L249698.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24969c.  v4:= v12 @kind wide;
  #L24969e.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2496a4.  v0:= lcmp(v12, v2);
  #L2496a8.  if v0 <= 0 then goto L24972a;
  #L2496ac.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2496b0.  v0:= v0.`okio.Segment.limit` @type ^`int`;
  #L2496b4.  v1:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2496b8.  v1:= v1.`okio.Segment.pos` @type ^`int`;
  #L2496bc.  v0:= v0 - v1 @kind int;
  #L2496be.  v0:= (`long`) v0 @kind i2l;
  #L2496c0.  v0:= lcmp(v12, v0);
  #L2496c4.  if v0 >= 0 then goto L249748;
  #L2496c8.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2496cc.  if v0 == 0 then goto L24972c;
  #L2496d0.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2496d4.  v9:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L2496d8.  if v9 == 0 then goto L249736;
  #L2496dc.  v0:= v9.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L2496e0.  if v0 == 0 then goto L249736;
  #L2496e4.  v0:= v9.`okio.Segment.limit` @type ^`int`;
  #L2496e8.  v0:= (`long`) v0 @kind i2l;
  #L2496ea.  v4:= v12 + v0 @kind long;
  #L2496ee.  v0:= v9.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L2496f2.  if v0 == 0 then goto L249730;
  #L2496f6.  v0:= 0I;
  #L2496f8.  v0:= (`long`) v0 @kind i2l;
  #L2496fa.  v0:= v4 - v0 @kind long;
  #L2496fe.  v4:= 8192L;
  #L249702.  v0:= lcmp(v0, v4);
  #L249706.  if v0 > 0 then goto L249736;
  #L24970a.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24970e.  v1:= (`int`) v12 @kind l2i;
  #L249710.  call `writeTo`(v0, v9, v1) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L249716.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24971a.  v0:= v0 - v12 @kind long;
  #L24971c.  v11.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L249720.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249724.  v0:= v0 + v12 @kind long;
  #L249726.  v10.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24972a.  return @kind void;
  #L24972c.  v9:= 0I;
  #L24972e.  goto L2496d8;
  #L249730.  v0:= v9.`okio.Segment.pos` @type ^`int`;
  #L249734.  goto L2496f8;
  #L249736.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24973a.  v1:= (`int`) v12 @kind l2i;
  #L24973c.  call temp:= `split`(v0, v1) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @kind virtual;
  #L249742.  v0:= temp @kind object;
  #L249744.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L249748.  v8:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24974c.  v0:= v8.`okio.Segment.limit` @type ^`int`;
  #L249750.  v1:= v8.`okio.Segment.pos` @type ^`int`;
  #L249754.  v0:= v0 - v1 @kind int;
  #L249756.  v6:= (`long`) v0 @kind i2l;
  #L249758.  call temp:= `pop`(v8) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24975e.  v0:= temp @kind object;
  #L249760.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L249764.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249768.  if v0 != 0 then goto L24979c;
  #L24976c.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L249770.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249774.  v1:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249778.  v4:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24977c.  v1.`okio.Segment.prev` @type ^`okio.Segment` := v4 @kind object;
  #L249780.  v0.`okio.Segment.next` @type ^`okio.Segment` := v4 @kind object;
  #L249784.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249788.  v0:= v0 - v6 @kind long;
  #L24978a.  v11.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24978e.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249792.  v0:= v0 + v6 @kind long;
  #L249794.  v10.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L249798.  v12:= v12 - v6 @kind long;
  #L24979a.  goto L2496a4;
  #L24979c.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2497a0.  v9:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L2497a4.  call temp:= `push`(v9, v8) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L2497aa.  v9:= temp @kind object;
  #L2497ac.  call `compact`(v9) @signature `Lokio/Segment;.compact:()V` @kind virtual;
  #L2497b2.  goto L249784;
}
procedure `long` `writeAll`(`okio.Buffer` v6 @kind this, `okio.Source` v7 @kind object @name `source`) @signature `Lokio/Buffer;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2497c4.  if v7 != 0 then goto L2497d8;
  #L2497c8.  v4:= new `java.lang.IllegalArgumentException`;
  #L2497cc.  v5:= "source == null" @kind object;
  #L2497d0.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2497d6.  throw v4;
  #L2497d8.  v2:= 0L;
  #L2497dc.  v4:= 8192L;
  #L2497e0.  call temp:= `read`(v7, v6, v4) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L2497e6.  v0:= temp @kind wide;
  #L2497e8.  v4:= -1L;
  #L2497ec.  v4:= lcmp(v0, v4);
  #L2497f0.  if v4 == 0 then goto L2497f8;
  #L2497f4.  v2:= v2 + v0 @kind long;
  #L2497f6.  goto L2497dc;
  #L2497f8.  return v2 @kind wide;
}
procedure `okio.Buffer` `writeByte`(`okio.Buffer` v6 @kind this, `int` v7 @name `b`) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24980c.  v1:= 1I;
  #L24980e.  call temp:= `writableSegment`(v6, v1) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L249814.  v0:= temp @kind object;
  #L249816.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24981a.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L24981e.  v3:= v2 + 1;
  #L249822.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L249826.  v3:= (`byte`) v7 @kind i2b;
  #L249828.  v1[v2]:= v3 @kind byte;
  #L24982c.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249830.  v4:= 1L;
  #L249834.  v2:= v2 + v4 @kind long;
  #L249836.  v6.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L24983a.  return v6 @kind object;
}
procedure `okio.BufferedSink` `writeByte`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L24984c.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L249852.  v0:= temp @kind object;
  #L249854.  return v0 @kind object;
}
procedure `okio.Buffer` `writeDecimalLong`(`okio.Buffer` v13 @kind this, `long` v14 @name `v`) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L249868.  v10:= 10L;
  #L24986c.  v8:= 0L;
  #L249870.  v6:= lcmp(v14, v8);
  #L249874.  if v6 != 0 then goto L249886;
  #L249878.  v6:= 48I;
  #L24987c.  call temp:= `writeByte`(v13, v6) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L249882.  v13:= temp @kind object;
  #L249884.  return v13 @kind object;
  #L249886.  v2:= 0I;
  #L249888.  v6:= lcmp(v14, v8);
  #L24988c.  if v6 >= 0 then goto L2498aa;
  #L249890.  v14:= -v14 @kind long;
  #L249892.  v6:= lcmp(v14, v8);
  #L249896.  if v6 >= 0 then goto L2498a8;
  #L24989a.  v6:= "-9223372036854775808" @kind object;
  #L24989e.  call temp:= `writeUtf8`(v13, v6) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L2498a4.  v13:= temp @kind object;
  #L2498a6.  goto L249884;
  #L2498a8.  v2:= 1I;
  #L2498aa.  v6:= 100000000L;
  #L2498b0.  v6:= lcmp(v14, v6);
  #L2498b4.  if v6 >= 0 then goto L24996c;
  #L2498b8.  v6:= 10000L;
  #L2498bc.  v6:= lcmp(v14, v6);
  #L2498c0.  if v6 >= 0 then goto L249930;
  #L2498c4.  v6:= 100L;
  #L2498c8.  v6:= lcmp(v14, v6);
  #L2498cc.  if v6 >= 0 then goto L24991c;
  #L2498d0.  v6:= lcmp(v14, v10);
  #L2498d4.  if v6 >= 0 then goto L249918;
  #L2498d8.  v5:= 1I;
  #L2498da.  if v2 == 0 then goto L2498e2;
  #L2498de.  v5:= v5 + 1;
  #L2498e2.  call temp:= `writableSegment`(v13, v5) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L2498e8.  v4:= temp @kind object;
  #L2498ea.  v0:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2498ee.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L2498f2.  v3:= v6 + v5 @kind int;
  #L2498f6.  v6:= lcmp(v14, v8);
  #L2498fa.  if v6 == 0 then goto L249a6c;
  #L2498fe.  v6:= v14 %% v10 @kind long;
  #L249902.  v1:= (`int`) v6 @kind l2i;
  #L249904.  v3:= v3 + -1;
  #L249908.  v6:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L24990c.  v6:= v6[v1] @kind byte;
  #L249910.  v0[v3]:= v6 @kind byte;
  #L249914.  v14:= v14 / v10 @kind long;
  #L249916.  goto L2498f6;
  #L249918.  v5:= 2I;
  #L24991a.  goto L2498da;
  #L24991c.  v6:= 1000L;
  #L249920.  v6:= lcmp(v14, v6);
  #L249924.  if v6 >= 0 then goto L24992c;
  #L249928.  v5:= 3I;
  #L24992a.  goto L2498da;
  #L24992c.  v5:= 4I;
  #L24992e.  goto L2498da;
  #L249930.  v6:= 1000000L;
  #L249936.  v6:= lcmp(v14, v6);
  #L24993a.  if v6 >= 0 then goto L249954;
  #L24993e.  v6:= 100000L;
  #L249944.  v6:= lcmp(v14, v6);
  #L249948.  if v6 >= 0 then goto L249950;
  #L24994c.  v5:= 5I;
  #L24994e.  goto L2498da;
  #L249950.  v5:= 6I;
  #L249952.  goto L2498da;
  #L249954.  v6:= 10000000L;
  #L24995a.  v6:= lcmp(v14, v6);
  #L24995e.  if v6 >= 0 then goto L249966;
  #L249962.  v5:= 7I;
  #L249964.  goto L2498da;
  #L249966.  v5:= 8I;
  #L24996a.  goto L2498da;
  #L24996c.  v6:= 1000000000000L;
  #L249976.  v6:= lcmp(v14, v6);
  #L24997a.  if v6 >= 0 then goto L2499c8;
  #L24997e.  v6:= 10000000000L;
  #L249988.  v6:= lcmp(v14, v6);
  #L24998c.  if v6 >= 0 then goto L2499aa;
  #L249990.  v6:= 1000000000L;
  #L249996.  v6:= lcmp(v14, v6);
  #L24999a.  if v6 >= 0 then goto L2499a4;
  #L24999e.  v5:= 9I;
  #L2499a2.  goto L2498da;
  #L2499a4.  v5:= 10I;
  #L2499a8.  goto L2498da;
  #L2499aa.  v6:= 100000000000L;
  #L2499b4.  v6:= lcmp(v14, v6);
  #L2499b8.  if v6 >= 0 then goto L2499c2;
  #L2499bc.  v5:= 11I;
  #L2499c0.  goto L2498da;
  #L2499c2.  v5:= 12I;
  #L2499c6.  goto L2498da;
  #L2499c8.  v6:= 1000000000000000L;
  #L2499d2.  v6:= lcmp(v14, v6);
  #L2499d6.  if v6 >= 0 then goto L249a16;
  #L2499da.  v6:= 10000000000000L;
  #L2499e4.  v6:= lcmp(v14, v6);
  #L2499e8.  if v6 >= 0 then goto L2499f4;
  #L2499ec.  v5:= 13I;
  #L2499f0.  goto L2498da;
  #L2499f4.  v6:= 100000000000000L;
  #L2499fe.  v6:= lcmp(v14, v6);
  #L249a02.  if v6 >= 0 then goto L249a0e;
  #L249a06.  v5:= 14I;
  #L249a0a.  goto L2498da;
  #L249a0e.  v5:= 15I;
  #L249a12.  goto L2498da;
  #L249a16.  v6:= 100000000000000000L;
  #L249a20.  v6:= lcmp(v14, v6);
  #L249a24.  if v6 >= 0 then goto L249a4a;
  #L249a28.  v6:= 10000000000000000L;
  #L249a32.  v6:= lcmp(v14, v6);
  #L249a36.  if v6 >= 0 then goto L249a42;
  #L249a3a.  v5:= 16I;
  #L249a3e.  goto L2498da;
  #L249a42.  v5:= 17I;
  #L249a46.  goto L2498da;
  #L249a4a.  v6:= 1000000000000000000L;
  #L249a54.  v6:= lcmp(v14, v6);
  #L249a58.  if v6 >= 0 then goto L249a64;
  #L249a5c.  v5:= 18I;
  #L249a60.  goto L2498da;
  #L249a64.  v5:= 19I;
  #L249a68.  goto L2498da;
  #L249a6c.  if v2 == 0 then goto L249a7c;
  #L249a70.  v3:= v3 + -1;
  #L249a74.  v6:= 45I;
  #L249a78.  v0[v3]:= v6 @kind byte;
  #L249a7c.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L249a80.  v6:= v6 + v5 @kind int;
  #L249a82.  v4.`okio.Segment.limit` @type ^`int` := v6;
  #L249a86.  v6:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249a8a.  v8:= (`long`) v5 @kind i2l;
  #L249a8c.  v6:= v6 + v8 @kind long;
  #L249a8e.  v13.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L249a92.  goto L249884;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249aa8.  call temp:= `writeDecimalLong`(v1, v2) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L249aae.  v0:= temp @kind object;
  #L249ab0.  return v0 @kind object;
}
procedure `okio.Buffer` `writeHexadecimalUnsignedLong`(`okio.Buffer` v11 @kind this, `long` v12 @name `v`) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L249ac4.  v6:= 0L;
  #L249ac8.  v5:= lcmp(v12, v6);
  #L249acc.  if v5 != 0 then goto L249ade;
  #L249ad0.  v5:= 48I;
  #L249ad4.  call temp:= `writeByte`(v11, v5) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L249ada.  v11:= temp @kind object;
  #L249adc.  return v11 @kind object;
  #L249ade.  call temp:= `highestOneBit`(v12) @signature `Ljava/lang/Long;.highestOneBit:(J)J` @kind static;
  #L249ae4.  v6:= temp @kind wide;
  #L249ae6.  call temp:= `numberOfTrailingZeros`(v6) @signature `Ljava/lang/Long;.numberOfTrailingZeros:(J)I` @kind static;
  #L249aec.  v5:= temp;
  #L249aee.  v5:= v5 / 4;
  #L249af2.  v4:= v5 + 1;
  #L249af6.  call temp:= `writableSegment`(v11, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L249afc.  v3:= temp @kind object;
  #L249afe.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L249b02.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L249b06.  v5:= v5 + v4 @kind int;
  #L249b08.  v1:= v5 + -1;
  #L249b0c.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L249b10.  if v1 < v2 then goto L249b32;
  #L249b14.  v5:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L249b18.  v6:= 15L;
  #L249b1c.  v6:= v6 ^& v12 @kind long;
  #L249b1e.  v6:= (`int`) v6 @kind l2i;
  #L249b20.  v5:= v5[v6] @kind byte;
  #L249b24.  v0[v1]:= v5 @kind byte;
  #L249b28.  v5:= 4I;
  #L249b2a.  v12:= v12 ^>> v5 @kind long;
  #L249b2c.  v1:= v1 + -1;
  #L249b30.  goto L249b10;
  #L249b32.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L249b36.  v5:= v5 + v4 @kind int;
  #L249b38.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L249b3c.  v6:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249b40.  v8:= (`long`) v4 @kind i2l;
  #L249b42.  v6:= v6 + v8 @kind long;
  #L249b44.  v11.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L249b48.  goto L249adc;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249b5c.  call temp:= `writeHexadecimalUnsignedLong`(v1, v2) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L249b62.  v0:= temp @kind object;
  #L249b64.  return v0 @kind object;
}
procedure `okio.Buffer` `writeInt`(`okio.Buffer` v8 @kind this, `int` v9 @name `i`) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L249b78.  v4:= 4I;
  #L249b7a.  call temp:= `writableSegment`(v8, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L249b80.  v3:= temp @kind object;
  #L249b82.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L249b86.  v1:= v3.`okio.Segment.limit` @type ^`int`;
  #L249b8a.  v2:= v1 + 1;
  #L249b8e.  v4:= v9 ^>> 24;
  #L249b92.  v4:= v4 ^& 255;
  #L249b96.  v4:= (`byte`) v4 @kind i2b;
  #L249b98.  v0[v1]:= v4 @kind byte;
  #L249b9c.  v1:= v2 + 1;
  #L249ba0.  v4:= v9 ^>> 16;
  #L249ba4.  v4:= v4 ^& 255;
  #L249ba8.  v4:= (`byte`) v4 @kind i2b;
  #L249baa.  v0[v2]:= v4 @kind byte;
  #L249bae.  v2:= v1 + 1;
  #L249bb2.  v4:= v9 ^>> 8;
  #L249bb6.  v4:= v4 ^& 255;
  #L249bba.  v4:= (`byte`) v4 @kind i2b;
  #L249bbc.  v0[v1]:= v4 @kind byte;
  #L249bc0.  v1:= v2 + 1;
  #L249bc4.  v4:= v9 ^& 255;
  #L249bc8.  v4:= (`byte`) v4 @kind i2b;
  #L249bca.  v0[v2]:= v4 @kind byte;
  #L249bce.  v3.`okio.Segment.limit` @type ^`int` := v1;
  #L249bd2.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249bd6.  v6:= 4L;
  #L249bda.  v4:= v4 + v6 @kind long;
  #L249bdc.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L249be0.  return v8 @kind object;
}
procedure `okio.BufferedSink` `writeInt`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249bf4.  call temp:= `writeInt`(v1, v2) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L249bfa.  v0:= temp @kind object;
  #L249bfc.  return v0 @kind object;
}
procedure `okio.Buffer` `writeIntLe`(`okio.Buffer` v1 @kind this, `int` v2 @name `i`) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249c10.  call temp:= `reverseBytesInt`(v2) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L249c16.  v0:= temp;
  #L249c18.  call temp:= `writeInt`(v1, v0) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L249c1e.  v0:= temp @kind object;
  #L249c20.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249c34.  call temp:= `writeIntLe`(v1, v2) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L249c3a.  v0:= temp @kind object;
  #L249c3c.  return v0 @kind object;
}
procedure `okio.Buffer` `writeLong`(`okio.Buffer` v9 @kind this, `long` v10 @name `v`) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L249c50.  v8:= 8I;
  #L249c54.  v6:= 255L;
  #L249c58.  call temp:= `writableSegment`(v9, v8) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L249c5e.  v3:= temp @kind object;
  #L249c60.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L249c64.  v1:= v3.`okio.Segment.limit` @type ^`int`;
  #L249c68.  v2:= v1 + 1;
  #L249c6c.  v4:= 56I;
  #L249c70.  v4:= v10 ^>> v4 @kind long;
  #L249c74.  v4:= v4 ^& v6 @kind long;
  #L249c76.  v4:= (`int`) v4 @kind l2i;
  #L249c78.  v4:= (`byte`) v4 @kind i2b;
  #L249c7a.  v0[v1]:= v4 @kind byte;
  #L249c7e.  v1:= v2 + 1;
  #L249c82.  v4:= 48I;
  #L249c86.  v4:= v10 ^>> v4 @kind long;
  #L249c8a.  v4:= v4 ^& v6 @kind long;
  #L249c8c.  v4:= (`int`) v4 @kind l2i;
  #L249c8e.  v4:= (`byte`) v4 @kind i2b;
  #L249c90.  v0[v2]:= v4 @kind byte;
  #L249c94.  v2:= v1 + 1;
  #L249c98.  v4:= 40I;
  #L249c9c.  v4:= v10 ^>> v4 @kind long;
  #L249ca0.  v4:= v4 ^& v6 @kind long;
  #L249ca2.  v4:= (`int`) v4 @kind l2i;
  #L249ca4.  v4:= (`byte`) v4 @kind i2b;
  #L249ca6.  v0[v1]:= v4 @kind byte;
  #L249caa.  v1:= v2 + 1;
  #L249cae.  v4:= 32I;
  #L249cb2.  v4:= v10 ^>> v4 @kind long;
  #L249cb6.  v4:= v4 ^& v6 @kind long;
  #L249cb8.  v4:= (`int`) v4 @kind l2i;
  #L249cba.  v4:= (`byte`) v4 @kind i2b;
  #L249cbc.  v0[v2]:= v4 @kind byte;
  #L249cc0.  v2:= v1 + 1;
  #L249cc4.  v4:= 24I;
  #L249cc8.  v4:= v10 ^>> v4 @kind long;
  #L249ccc.  v4:= v4 ^& v6 @kind long;
  #L249cce.  v4:= (`int`) v4 @kind l2i;
  #L249cd0.  v4:= (`byte`) v4 @kind i2b;
  #L249cd2.  v0[v1]:= v4 @kind byte;
  #L249cd6.  v1:= v2 + 1;
  #L249cda.  v4:= 16I;
  #L249cde.  v4:= v10 ^>> v4 @kind long;
  #L249ce2.  v4:= v4 ^& v6 @kind long;
  #L249ce4.  v4:= (`int`) v4 @kind l2i;
  #L249ce6.  v4:= (`byte`) v4 @kind i2b;
  #L249ce8.  v0[v2]:= v4 @kind byte;
  #L249cec.  v2:= v1 + 1;
  #L249cf0.  v4:= v10 ^>> v8 @kind long;
  #L249cf4.  v4:= v4 ^& v6 @kind long;
  #L249cf6.  v4:= (`int`) v4 @kind l2i;
  #L249cf8.  v4:= (`byte`) v4 @kind i2b;
  #L249cfa.  v0[v1]:= v4 @kind byte;
  #L249cfe.  v1:= v2 + 1;
  #L249d02.  v4:= v10 ^& v6 @kind long;
  #L249d06.  v4:= (`int`) v4 @kind l2i;
  #L249d08.  v4:= (`byte`) v4 @kind i2b;
  #L249d0a.  v0[v2]:= v4 @kind byte;
  #L249d0e.  v3.`okio.Segment.limit` @type ^`int` := v1;
  #L249d12.  v4:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249d16.  v6:= 8L;
  #L249d1a.  v4:= v4 + v6 @kind long;
  #L249d1c.  v9.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L249d20.  return v9 @kind object;
}
procedure `okio.BufferedSink` `writeLong`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249d34.  call temp:= `writeLong`(v1, v2) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L249d3a.  v0:= temp @kind object;
  #L249d3c.  return v0 @kind object;
}
procedure `okio.Buffer` `writeLongLe`(`okio.Buffer` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L249d50.  call temp:= `reverseBytesLong`(v4) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L249d56.  v0:= temp @kind wide;
  #L249d58.  call temp:= `writeLong`(v3, v0) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L249d5e.  v0:= temp @kind object;
  #L249d60.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249d74.  call temp:= `writeLongLe`(v1, v2) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L249d7a.  v0:= temp @kind object;
  #L249d7c.  return v0 @kind object;
}
procedure `okio.Buffer` `writeShort`(`okio.Buffer` v8 @kind this, `int` v9 @name `s`) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L249d90.  v4:= 2I;
  #L249d92.  call temp:= `writableSegment`(v8, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L249d98.  v3:= temp @kind object;
  #L249d9a.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L249d9e.  v1:= v3.`okio.Segment.limit` @type ^`int`;
  #L249da2.  v2:= v1 + 1;
  #L249da6.  v4:= v9 ^>> 8;
  #L249daa.  v4:= v4 ^& 255;
  #L249dae.  v4:= (`byte`) v4 @kind i2b;
  #L249db0.  v0[v1]:= v4 @kind byte;
  #L249db4.  v1:= v2 + 1;
  #L249db8.  v4:= v9 ^& 255;
  #L249dbc.  v4:= (`byte`) v4 @kind i2b;
  #L249dbe.  v0[v2]:= v4 @kind byte;
  #L249dc2.  v3.`okio.Segment.limit` @type ^`int` := v1;
  #L249dc6.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249dca.  v6:= 2L;
  #L249dce.  v4:= v4 + v6 @kind long;
  #L249dd0.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L249dd4.  return v8 @kind object;
}
procedure `okio.BufferedSink` `writeShort`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249de8.  call temp:= `writeShort`(v1, v2) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L249dee.  v0:= temp @kind object;
  #L249df0.  return v0 @kind object;
}
procedure `okio.Buffer` `writeShortLe`(`okio.Buffer` v1 @kind this, `int` v2 @name `s`) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249e04.  v0:= (`short`) v2 @kind i2s;
  #L249e06.  call temp:= `reverseBytesShort`(v0) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L249e0c.  v0:= temp;
  #L249e0e.  call temp:= `writeShort`(v1, v0) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L249e14.  v0:= temp @kind object;
  #L249e16.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249e28.  call temp:= `writeShortLe`(v1, v2) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L249e2e.  v0:= temp @kind object;
  #L249e30.  return v0 @kind object;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v4 @kind this, `java.lang.String` v5 @kind object @name `string`, `int` v6 @name `beginIndex`, `int` v7 @name `endIndex`, `java.nio.charset.Charset` v8 @kind object @name `charset`) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L249e44.  if v5 != 0 then goto L249e58;
  #L249e48.  v1:= new `java.lang.IllegalArgumentException`;
  #L249e4c.  v2:= "string == null" @kind object;
  #L249e50.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249e56.  throw v1;
  #L249e58.  if v6 >= 0 then goto L249e8e;
  #L249e5c.  v1:= new `java.lang.IllegalAccessError`;
  #L249e60.  v2:= new `java.lang.StringBuilder`;
  #L249e64.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L249e6a.  v3:= "beginIndex < 0: " @kind object;
  #L249e6e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249e74.  v2:= temp @kind object;
  #L249e76.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L249e7c.  v2:= temp @kind object;
  #L249e7e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L249e84.  v2:= temp @kind object;
  #L249e86.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249e8c.  throw v1;
  #L249e8e.  if v7 >= v6 then goto L249ed8;
  #L249e92.  v1:= new `java.lang.IllegalArgumentException`;
  #L249e96.  v2:= new `java.lang.StringBuilder`;
  #L249e9a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L249ea0.  v3:= "endIndex < beginIndex: " @kind object;
  #L249ea4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249eaa.  v2:= temp @kind object;
  #L249eac.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L249eb2.  v2:= temp @kind object;
  #L249eb4.  v3:= " < " @kind object;
  #L249eb8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249ebe.  v2:= temp @kind object;
  #L249ec0.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L249ec6.  v2:= temp @kind object;
  #L249ec8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L249ece.  v2:= temp @kind object;
  #L249ed0.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249ed6.  throw v1;
  #L249ed8.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L249ede.  v1:= temp;
  #L249ee0.  if v7 <= v1 then goto L249f32;
  #L249ee4.  v1:= new `java.lang.IllegalArgumentException`;
  #L249ee8.  v2:= new `java.lang.StringBuilder`;
  #L249eec.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L249ef2.  v3:= "endIndex > string.length: " @kind object;
  #L249ef6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249efc.  v2:= temp @kind object;
  #L249efe.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L249f04.  v2:= temp @kind object;
  #L249f06.  v3:= " > " @kind object;
  #L249f0a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249f10.  v2:= temp @kind object;
  #L249f12.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L249f18.  v3:= temp;
  #L249f1a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L249f20.  v2:= temp @kind object;
  #L249f22.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L249f28.  v2:= temp @kind object;
  #L249f2a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249f30.  throw v1;
  #L249f32.  if v8 != 0 then goto L249f46;
  #L249f36.  v1:= new `java.lang.IllegalArgumentException`;
  #L249f3a.  v2:= "charset == null" @kind object;
  #L249f3e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249f44.  throw v1;
  #L249f46.  v1:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L249f4a.  call temp:= `equals`(v8, v1) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L249f50.  v1:= temp;
  #L249f52.  if v1 == 0 then goto L249f60;
  #L249f56.  call temp:= `writeUtf8`(v4, v5, v6, v7) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L249f5c.  v1:= temp @kind object;
  #L249f5e.  return v1 @kind object;
  #L249f60.  call temp:= `substring`(v5, v6, v7) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L249f66.  v1:= temp @kind object;
  #L249f68.  call temp:= `getBytes`(v1, v8) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L249f6e.  v0:= temp @kind object;
  #L249f70.  v1:= 0I;
  #L249f72.  v2:= length @variable v0;
  #L249f74.  call temp:= `write`(v4, v0, v1, v2) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L249f7a.  v1:= temp @kind object;
  #L249f7c.  goto L249f5e;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `java.nio.charset.Charset` v4 @kind object @name `charset`) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249f90.  v0:= 0I;
  #L249f92.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L249f98.  v1:= temp;
  #L249f9a.  call temp:= `writeString`(v2, v3, v0, v1, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L249fa0.  v0:= temp @kind object;
  #L249fa2.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249fb4.  call temp:= `writeString`(v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L249fba.  v0:= temp @kind object;
  #L249fbc.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249fd0.  call temp:= `writeString`(v1, v2, v3) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L249fd6.  v0:= temp @kind object;
  #L249fd8.  return v0 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v2 @kind this, `java.io.OutputStream` v3 @kind object @name `out`) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249fec.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249ff0.  call temp:= `writeTo`(v2, v3, v0) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @kind virtual;
  #L249ff6.  v0:= temp @kind object;
  #L249ff8.  return v0 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v10 @kind this, `java.io.OutputStream` v11 @kind object @name `out`, `long` v12 @name `byteCount`) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L24a00c.  v2:= 0L;
  #L24a010.  if v11 != 0 then goto L24a024;
  #L24a014.  v0:= new `java.lang.IllegalArgumentException`;
  #L24a018.  v1:= "out == null" @kind object;
  #L24a01c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a022.  throw v0;
  #L24a024.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24a028.  v4:= v12 @kind wide;
  #L24a02a.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L24a030.  v6:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24a034.  v0:= lcmp(v12, v2);
  #L24a038.  if v0 <= 0 then goto L24a09c;
  #L24a03c.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L24a040.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L24a044.  v0:= v0 - v1 @kind int;
  #L24a046.  v0:= (`long`) v0 @kind i2l;
  #L24a048.  call temp:= `min`(v12, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L24a04e.  v0:= temp @kind wide;
  #L24a050.  v7:= (`int`) v0 @kind l2i;
  #L24a052.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24a056.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L24a05a.  call `write`(v11, v0, v1, v7) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L24a060.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L24a064.  v0:= v0 + v7 @kind int;
  #L24a066.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L24a06a.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24a06e.  v4:= (`long`) v7 @kind i2l;
  #L24a070.  v0:= v0 - v4 @kind long;
  #L24a072.  v10.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24a076.  v0:= (`long`) v7 @kind i2l;
  #L24a078.  v12:= v12 - v0 @kind long;
  #L24a07a.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L24a07e.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L24a082.  if v0 != v1 then goto L24a034;
  #L24a086.  v8:= v6 @kind object;
  #L24a088.  call temp:= `pop`(v8) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24a08e.  v6:= temp @kind object;
  #L24a090.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L24a094.  call `recycle`(v8) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24a09a.  goto L24a034;
  #L24a09c.  return v10 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object @name `string`) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24a0b0.  v0:= 0I;
  #L24a0b2.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24a0b8.  v1:= temp;
  #L24a0ba.  call temp:= `writeUtf8`(v2, v3, v0, v1) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L24a0c0.  v0:= temp @kind object;
  #L24a0c2.  return v0 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v16 @kind this, `java.lang.String` v17 @kind object @name `string`, `int` v18 @name `beginIndex`, `int` v19 @name `endIndex`) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L24a0d4.  if v17 != 0 then goto L24a0e8;
  #L24a0d8.  v12:= new `java.lang.IllegalArgumentException`;
  #L24a0dc.  v13:= "string == null" @kind object;
  #L24a0e0.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a0e6.  throw v12;
  #L24a0e8.  if v18 >= 0 then goto L24a122;
  #L24a0ec.  v12:= new `java.lang.IllegalArgumentException`;
  #L24a0f0.  v13:= new `java.lang.StringBuilder`;
  #L24a0f4.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24a0fa.  v14:= "beginIndex < 0: " @kind object;
  #L24a0fe.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a104.  v13:= temp @kind object;
  #L24a106.  v0:= v18;
  #L24a10a.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a110.  v13:= temp @kind object;
  #L24a112.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24a118.  v13:= temp @kind object;
  #L24a11a.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a120.  throw v12;
  #L24a122.  v0:= v19;
  #L24a126.  v1:= v18;
  #L24a12a.  if v0 >= v1 then goto L24a17c;
  #L24a12e.  v12:= new `java.lang.IllegalArgumentException`;
  #L24a132.  v13:= new `java.lang.StringBuilder`;
  #L24a136.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24a13c.  v14:= "endIndex < beginIndex: " @kind object;
  #L24a140.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a146.  v13:= temp @kind object;
  #L24a148.  v0:= v19;
  #L24a14c.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a152.  v13:= temp @kind object;
  #L24a154.  v14:= " < " @kind object;
  #L24a158.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a15e.  v13:= temp @kind object;
  #L24a160.  v0:= v18;
  #L24a164.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a16a.  v13:= temp @kind object;
  #L24a16c.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24a172.  v13:= temp @kind object;
  #L24a174.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a17a.  throw v12;
  #L24a17c.  call temp:= `length`(v17) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24a182.  v12:= temp;
  #L24a184.  v0:= v19;
  #L24a188.  if v0 <= v12 then goto L24a1de;
  #L24a18c.  v12:= new `java.lang.IllegalArgumentException`;
  #L24a190.  v13:= new `java.lang.StringBuilder`;
  #L24a194.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24a19a.  v14:= "endIndex > string.length: " @kind object;
  #L24a19e.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a1a4.  v13:= temp @kind object;
  #L24a1a6.  v0:= v19;
  #L24a1aa.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a1b0.  v13:= temp @kind object;
  #L24a1b2.  v14:= " > " @kind object;
  #L24a1b6.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a1bc.  v13:= temp @kind object;
  #L24a1be.  call temp:= `length`(v17) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24a1c4.  v14:= temp;
  #L24a1c6.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a1cc.  v13:= temp @kind object;
  #L24a1ce.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24a1d4.  v13:= temp @kind object;
  #L24a1d6.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a1dc.  throw v12;
  #L24a1de.  v5:= v18;
  #L24a1e2.  v6:= v5;
  #L24a1e4.  v0:= v19;
  #L24a1e8.  if v6 >= v0 then goto L24a3e6;
  #L24a1ec.  v0:= v17 @kind object;
  #L24a1f0.  call temp:= `charAt`(v0, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L24a1f6.  v2:= temp;
  #L24a1f8.  v12:= 128I;
  #L24a1fc.  if v2 >= v12 then goto L24a294;
  #L24a200.  v12:= 1I;
  #L24a202.  v0:= v16 @kind object;
  #L24a206.  call temp:= `writableSegment`(v0, v12) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L24a20c.  v11:= temp @kind object;
  #L24a20e.  v4:= v11.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24a212.  v12:= v11.`okio.Segment.limit` @type ^`int`;
  #L24a216.  v10:= v12 - v6 @kind int;
  #L24a21a.  v12:= v10 - 8192;
  #L24a21e.  v0:= v19;
  #L24a222.  call temp:= `min`(v0, v12) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L24a228.  v8:= temp;
  #L24a22a.  v5:= v6 + 1;
  #L24a22e.  v12:= v10 + v6 @kind int;
  #L24a232.  v13:= (`byte`) v2 @kind i2b;
  #L24a234.  v4[v12]:= v13 @kind byte;
  #L24a238.  v6:= v5;
  #L24a23a.  if v6 >= v8 then goto L24a252;
  #L24a23e.  v0:= v17 @kind object;
  #L24a242.  call temp:= `charAt`(v0, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L24a248.  v2:= temp;
  #L24a24a.  v12:= 128I;
  #L24a24e.  if v2 < v12 then goto L24a282;
  #L24a252.  v12:= v6 + v10 @kind int;
  #L24a256.  v13:= v11.`okio.Segment.limit` @type ^`int`;
  #L24a25a.  v9:= v12 - v13 @kind int;
  #L24a25e.  v12:= v11.`okio.Segment.limit` @type ^`int`;
  #L24a262.  v12:= v12 + v9 @kind int;
  #L24a264.  v11.`okio.Segment.limit` @type ^`int` := v12;
  #L24a268.  v0:= v16 @kind object;
  #L24a26c.  v12:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24a270.  v14:= (`long`) v9 @kind i2l;
  #L24a272.  v12:= v12 + v14 @kind long;
  #L24a274.  v0:= v16 @kind object;
  #L24a278.  v0.`okio.Buffer.size` @type ^`long` := v12 @kind wide;
  #L24a27c.  v5:= v6;
  #L24a27e.  v6:= v5;
  #L24a280.  goto L24a1e4;
  #L24a282.  v5:= v6 + 1;
  #L24a286.  v12:= v10 + v6 @kind int;
  #L24a28a.  v13:= (`byte`) v2 @kind i2b;
  #L24a28c.  v4[v12]:= v13 @kind byte;
  #L24a290.  v6:= v5;
  #L24a292.  goto L24a23a;
  #L24a294.  v12:= 2048I;
  #L24a298.  if v2 >= v12 then goto L24a2c6;
  #L24a29c.  v12:= v2 ^> 6;
  #L24a2a0.  v12:= v12 ^| 192;
  #L24a2a4.  v0:= v16 @kind object;
  #L24a2a8.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a2ae.  v12:= v2 ^& 63;
  #L24a2b2.  v12:= v12 ^| 128;
  #L24a2b6.  v0:= v16 @kind object;
  #L24a2ba.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a2c0.  v5:= v6 + 1;
  #L24a2c4.  goto L24a27e;
  #L24a2c6.  v12:= 55296I;
  #L24a2cc.  if v2 < v12 then goto L24a2da;
  #L24a2d0.  v12:= 57343I;
  #L24a2d6.  if v2 <= v12 then goto L24a31a;
  #L24a2da.  v12:= v2 ^> 12;
  #L24a2de.  v12:= v12 ^| 224;
  #L24a2e2.  v0:= v16 @kind object;
  #L24a2e6.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a2ec.  v12:= v2 ^> 6;
  #L24a2f0.  v12:= v12 ^& 63;
  #L24a2f4.  v12:= v12 ^| 128;
  #L24a2f8.  v0:= v16 @kind object;
  #L24a2fc.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a302.  v12:= v2 ^& 63;
  #L24a306.  v12:= v12 ^| 128;
  #L24a30a.  v0:= v16 @kind object;
  #L24a30e.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a314.  v5:= v6 + 1;
  #L24a318.  goto L24a27e;
  #L24a31a.  v12:= v6 + 1;
  #L24a31e.  v0:= v19;
  #L24a322.  if v12 >= v0 then goto L24a36c;
  #L24a326.  v12:= v6 + 1;
  #L24a32a.  v0:= v17 @kind object;
  #L24a32e.  call temp:= `charAt`(v0, v12) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L24a334.  v7:= temp;
  #L24a336.  v12:= 56319I;
  #L24a33c.  if v2 > v12 then goto L24a354;
  #L24a340.  v12:= 56320I;
  #L24a346.  if v7 < v12 then goto L24a354;
  #L24a34a.  v12:= 57343I;
  #L24a350.  if v7 <= v12 then goto L24a370;
  #L24a354.  v12:= 63I;
  #L24a358.  v0:= v16 @kind object;
  #L24a35c.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a362.  v5:= v6 + 1;
  #L24a366.  v6:= v5;
  #L24a368.  goto L24a1e4;
  #L24a36c.  v7:= 0I;
  #L24a36e.  goto L24a336;
  #L24a370.  v12:= 65536I;
  #L24a374.  v13:= -55297I;
  #L24a37a.  v13:= v13 ^& v2 @kind int;
  #L24a37c.  v13:= v13 ^< 10;
  #L24a380.  v14:= -56321I;
  #L24a386.  v14:= v14 ^& v7 @kind int;
  #L24a388.  v13:= v13 ^| v14 @kind int;
  #L24a38a.  v3:= v12 + v13 @kind int;
  #L24a38e.  v12:= v3 ^> 18;
  #L24a392.  v12:= v12 ^| 240;
  #L24a396.  v0:= v16 @kind object;
  #L24a39a.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a3a0.  v12:= v3 ^> 12;
  #L24a3a4.  v12:= v12 ^& 63;
  #L24a3a8.  v12:= v12 ^| 128;
  #L24a3ac.  v0:= v16 @kind object;
  #L24a3b0.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a3b6.  v12:= v3 ^> 6;
  #L24a3ba.  v12:= v12 ^& 63;
  #L24a3be.  v12:= v12 ^| 128;
  #L24a3c2.  v0:= v16 @kind object;
  #L24a3c6.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a3cc.  v12:= v3 ^& 63;
  #L24a3d0.  v12:= v12 ^| 128;
  #L24a3d4.  v0:= v16 @kind object;
  #L24a3d8.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a3de.  v5:= v6 + 2;
  #L24a3e2.  goto L24a27e;
  #L24a3e6.  return v16 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L24a3f8.  call temp:= `writeUtf8`(v1, v2) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L24a3fe.  v0:= temp @kind object;
  #L24a400.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L24a414.  call temp:= `writeUtf8`(v1, v2, v3, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L24a41a.  v0:= temp @kind object;
  #L24a41c.  return v0 @kind object;
}
procedure `okio.Buffer` `writeUtf8CodePoint`(`okio.Buffer` v3 @kind this, `int` v4 @name `codePoint`) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24a430.  v0:= 128I;
  #L24a434.  if v4 >= v0 then goto L24a440;
  #L24a438.  call temp:= `writeByte`(v3, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a43e.  return v3 @kind object;
  #L24a440.  v0:= 2048I;
  #L24a444.  if v4 >= v0 then goto L24a466;
  #L24a448.  v0:= v4 ^> 6;
  #L24a44c.  v0:= v0 ^| 192;
  #L24a450.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a456.  v0:= v4 ^& 63;
  #L24a45a.  v0:= v0 ^| 128;
  #L24a45e.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a464.  goto L24a43e;
  #L24a466.  v0:= 65536I;
  #L24a46a.  if v4 >= v0 then goto L24a4be;
  #L24a46e.  v0:= 55296I;
  #L24a474.  if v4 < v0 then goto L24a48e;
  #L24a478.  v0:= 57343I;
  #L24a47e.  if v4 > v0 then goto L24a48e;
  #L24a482.  v0:= 63I;
  #L24a486.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a48c.  goto L24a43e;
  #L24a48e.  v0:= v4 ^> 12;
  #L24a492.  v0:= v0 ^| 224;
  #L24a496.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a49c.  v0:= v4 ^> 6;
  #L24a4a0.  v0:= v0 ^& 63;
  #L24a4a4.  v0:= v0 ^| 128;
  #L24a4a8.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a4ae.  v0:= v4 ^& 63;
  #L24a4b2.  v0:= v0 ^| 128;
  #L24a4b6.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a4bc.  goto L24a43e;
  #L24a4be.  v0:= 1114111I;
  #L24a4c4.  if v4 > v0 then goto L24a50a;
  #L24a4c8.  v0:= v4 ^> 18;
  #L24a4cc.  v0:= v0 ^| 240;
  #L24a4d0.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a4d6.  v0:= v4 ^> 12;
  #L24a4da.  v0:= v0 ^& 63;
  #L24a4de.  v0:= v0 ^| 128;
  #L24a4e2.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a4e8.  v0:= v4 ^> 6;
  #L24a4ec.  v0:= v0 ^& 63;
  #L24a4f0.  v0:= v0 ^| 128;
  #L24a4f4.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a4fa.  v0:= v4 ^& 63;
  #L24a4fe.  v0:= v0 ^| 128;
  #L24a502.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a508.  goto L24a43e;
  #L24a50a.  v0:= new `java.lang.IllegalArgumentException`;
  #L24a50e.  v1:= new `java.lang.StringBuilder`;
  #L24a512.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24a518.  v2:= "Unexpected code point: " @kind object;
  #L24a51c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a522.  v1:= temp @kind object;
  #L24a524.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L24a52a.  v2:= temp @kind object;
  #L24a52c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a532.  v1:= temp @kind object;
  #L24a534.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24a53a.  v1:= temp @kind object;
  #L24a53c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a542.  throw v0;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L24a554.  call temp:= `writeUtf8CodePoint`(v1, v2) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L24a55a.  v0:= temp @kind object;
  #L24a55c.  return v0 @kind object;
}
