record `okio.Util` @kind class @AccessFlag FINAL {
}
global `java.nio.charset.Charset` `@@okio.Util.UTF_8` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Util;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1afc50.  v0:= "UTF-8" @kind object;
  #L1afc54.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L1afc5a.  v0:= temp @kind object;
  #L1afc5c.  `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L1afc60.  return @kind void;
}
procedure `void` `<init>`(`okio.Util` v0 @kind this) @signature `Lokio/Util;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1afc74.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1afc7a.  return @kind void;
}
procedure `boolean` `arrayRangeEquals`(`byte`[] v3 @kind object @name `a`, `int` v4 @name `aOffset`, `byte`[] v5 @kind object @name `b`, `int` v6 @name `bOffset`, `int` v7 @name `byteCount`) @signature `Lokio/Util;.arrayRangeEquals:([BI[BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1afc8c.  v0:= 0I;
  #L1afc8e.  if v0 >= v7 then goto L1afcb0;
  #L1afc92.  v1:= v0 + v4 @kind int;
  #L1afc96.  v1:= v3[v1] @kind byte;
  #L1afc9a.  v2:= v0 + v6 @kind int;
  #L1afc9e.  v2:= v5[v2] @kind byte;
  #L1afca2.  if v1 == v2 then goto L1afcaa;
  #L1afca6.  v1:= 0I;
  #L1afca8.  return v1;
  #L1afcaa.  v0:= v0 + 1;
  #L1afcae.  goto L1afc8e;
  #L1afcb0.  v1:= 1I;
  #L1afcb2.  goto L1afca8;
}
procedure `void` `checkOffsetAndCount`(`long` v6 @name `size`, `long` v8 @name `offset`, `long` v10 @name `byteCount`) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1afcc4.  v0:= v8 ^| v10 @kind long;
  #L1afcc8.  v2:= 0L;
  #L1afccc.  v0:= lcmp(v0, v2);
  #L1afcd0.  if v0 < 0 then goto L1afce8;
  #L1afcd4.  v0:= lcmp(v8, v6);
  #L1afcd8.  if v0 > 0 then goto L1afce8;
  #L1afcdc.  v0:= v6 - v8 @kind long;
  #L1afce0.  v0:= lcmp(v0, v10);
  #L1afce4.  if v0 >= 0 then goto L1afd30;
  #L1afce8.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L1afcec.  v1:= "size=%s offset=%s byteCount=%s" @kind object;
  #L1afcf0.  v2:= 3I;
  #L1afcf2.  v2:= new `java.lang.Object`[v2];
  #L1afcf6.  v3:= 0I;
  #L1afcf8.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1afcfe.  v4:= temp @kind object;
  #L1afd00.  v2[v3]:= v4 @kind object;
  #L1afd04.  v3:= 1I;
  #L1afd06.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1afd0c.  v4:= temp @kind object;
  #L1afd0e.  v2[v3]:= v4 @kind object;
  #L1afd12.  v3:= 2I;
  #L1afd14.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1afd1a.  v4:= temp @kind object;
  #L1afd1c.  v2[v3]:= v4 @kind object;
  #L1afd20.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1afd26.  v1:= temp @kind object;
  #L1afd28.  call `<init>`(v0, v1) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1afd2e.  throw v0;
  #L1afd30.  return @kind void;
}
procedure `int` `reverseBytesInt`(`int` v2 @name `i`) @signature `Lokio/Util;.reverseBytesInt:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1afd44.  v0:= -16777216I;
  #L1afd48.  v0:= v0 ^& v2 @kind int;
  #L1afd4a.  v0:= v0 ^>> 24;
  #L1afd4e.  v1:= 16711680I;
  #L1afd52.  v1:= v1 ^& v2 @kind int;
  #L1afd54.  v1:= v1 ^>> 8;
  #L1afd58.  v0:= v0 ^| v1 @kind int;
  #L1afd5a.  v1:= 65280I;
  #L1afd60.  v1:= v1 ^& v2 @kind int;
  #L1afd62.  v1:= v1 ^< 8;
  #L1afd66.  v0:= v0 ^| v1 @kind int;
  #L1afd68.  v1:= v2 ^& 255;
  #L1afd6c.  v1:= v1 ^< 24;
  #L1afd70.  v0:= v0 ^| v1 @kind int;
  #L1afd72.  return v0;
}
procedure `long` `reverseBytesLong`(`long` v8 @name `v`) @signature `Lokio/Util;.reverseBytesLong:(J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1afd84.  v7:= 56I;
  #L1afd88.  v6:= 40I;
  #L1afd8c.  v5:= 24I;
  #L1afd90.  v4:= 8I;
  #L1afd94.  v0:= -72057594037927936L;
  #L1afd98.  v0:= v0 ^& v8 @kind long;
  #L1afd9a.  v0:= v0 ^>> v7 @kind long;
  #L1afd9c.  v2:= 71776119061217280L;
  #L1afda0.  v2:= v2 ^& v8 @kind long;
  #L1afda2.  v2:= v2 ^>> v6 @kind long;
  #L1afda4.  v0:= v0 ^| v2 @kind long;
  #L1afda6.  v2:= 280375465082880L;
  #L1afdb0.  v2:= v2 ^& v8 @kind long;
  #L1afdb2.  v2:= v2 ^>> v5 @kind long;
  #L1afdb4.  v0:= v0 ^| v2 @kind long;
  #L1afdb6.  v2:= 1095216660480L;
  #L1afdc0.  v2:= v2 ^& v8 @kind long;
  #L1afdc2.  v2:= v2 ^>> v4 @kind long;
  #L1afdc4.  v0:= v0 ^| v2 @kind long;
  #L1afdc6.  v2:= 4278190080L;
  #L1afdd0.  v2:= v2 ^& v8 @kind long;
  #L1afdd2.  v2:= v2 ^< v4 @kind long;
  #L1afdd4.  v0:= v0 ^| v2 @kind long;
  #L1afdd6.  v2:= 16711680L;
  #L1afddc.  v2:= v2 ^& v8 @kind long;
  #L1afdde.  v2:= v2 ^< v5 @kind long;
  #L1afde0.  v0:= v0 ^| v2 @kind long;
  #L1afde2.  v2:= 65280L;
  #L1afde8.  v2:= v2 ^& v8 @kind long;
  #L1afdea.  v2:= v2 ^< v6 @kind long;
  #L1afdec.  v0:= v0 ^| v2 @kind long;
  #L1afdee.  v2:= 255L;
  #L1afdf2.  v2:= v2 ^& v8 @kind long;
  #L1afdf4.  v2:= v2 ^< v7 @kind long;
  #L1afdf6.  v0:= v0 ^| v2 @kind long;
  #L1afdf8.  return v0 @kind wide;
}
procedure `short` `reverseBytesShort`(`short` v4 @name `s`) @signature `Lokio/Util;.reverseBytesShort:(S)S` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1afe0c.  v2:= 65535I;
  #L1afe12.  v0:= v4 ^& v2 @kind int;
  #L1afe16.  v2:= 65280I;
  #L1afe1c.  v2:= v2 ^& v0 @kind int;
  #L1afe1e.  v2:= v2 ^>> 8;
  #L1afe22.  v3:= v0 ^& 255;
  #L1afe26.  v3:= v3 ^< 8;
  #L1afe2a.  v1:= v2 ^| v3 @kind int;
  #L1afe2e.  v2:= (`short`) v1 @kind i2s;
  #L1afe30.  return v2;
}
procedure `void` `sneakyRethrow`(`java.lang.Throwable` v0 @kind object @name `t`) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1afe44.  call `sneakyThrow2`(v0) @signature `Lokio/Util;.sneakyThrow2:(Ljava/lang/Throwable;)V` @kind static;
  #L1afe4a.  return @kind void;
}
procedure `void` `sneakyThrow2`(`java.lang.Throwable` v0 @kind object @name `t`) @signature `Lokio/Util;.sneakyThrow2:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L1afe5c.  throw v0;
}
