record `okio.Buffer$UnsafeCursor` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `okio.Buffer` `okio.Buffer$UnsafeCursor.buffer` @AccessFlag PUBLIC;
  `byte`[] `okio.Buffer$UnsafeCursor.data` @AccessFlag PUBLIC;
  `int` `okio.Buffer$UnsafeCursor.end` @AccessFlag PUBLIC;
  `long` `okio.Buffer$UnsafeCursor.offset` @AccessFlag PUBLIC;
  `boolean` `okio.Buffer$UnsafeCursor.readWrite` @AccessFlag PUBLIC;
  `okio.Segment` `okio.Buffer$UnsafeCursor.segment` @AccessFlag PRIVATE;
  `int` `okio.Buffer$UnsafeCursor.start` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`okio.Buffer$UnsafeCursor` v3 @kind this) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1ad494.  v2:= -1I;
  #L1ad496.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ad49c.  v0:= -1L;
  #L1ad4a0.  v3.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1ad4a4.  v3.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v2;
  #L1ad4a8.  v3.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v2;
  #L1ad4ac.  return @kind void;
}
procedure `void` `close`(`okio.Buffer$UnsafeCursor` v4 @kind this) @signature `Lokio/Buffer$UnsafeCursor;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ad4c0.  v3:= -1I;
  #L1ad4c2.  v2:= 0I;
  #L1ad4c4.  v0:= v4.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad4c8.  if v0 != 0 then goto L1ad4dc;
  #L1ad4cc.  v0:= new `java.lang.IllegalStateException`;
  #L1ad4d0.  v1:= "not attached to a buffer" @kind object;
  #L1ad4d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad4da.  throw v0;
  #L1ad4dc.  v4.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v2 @kind object;
  #L1ad4e0.  v4.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v2 @kind object;
  #L1ad4e4.  v0:= -1L;
  #L1ad4e8.  v4.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1ad4ec.  v4.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v2 @kind object;
  #L1ad4f0.  v4.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v3;
  #L1ad4f4.  v4.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v3;
  #L1ad4f8.  return @kind void;
}
procedure `long` `expandBuffer`(`okio.Buffer$UnsafeCursor` v8 @kind this, `int` v9 @name `minByteCount`) @signature `Lokio/Buffer$UnsafeCursor;.expandBuffer:(I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1ad50c.  v5:= 8192I;
  #L1ad510.  if v9 > 0 then goto L1ad546;
  #L1ad514.  v4:= new `java.lang.IllegalArgumentException`;
  #L1ad518.  v5:= new `java.lang.StringBuilder`;
  #L1ad51c.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ad522.  v6:= "minByteCount <= 0: " @kind object;
  #L1ad526.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad52c.  v5:= temp @kind object;
  #L1ad52e.  call temp:= `append`(v5, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad534.  v5:= temp @kind object;
  #L1ad536.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ad53c.  v5:= temp @kind object;
  #L1ad53e.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad544.  throw v4;
  #L1ad546.  if v9 <= v5 then goto L1ad57c;
  #L1ad54a.  v4:= new `java.lang.IllegalArgumentException`;
  #L1ad54e.  v5:= new `java.lang.StringBuilder`;
  #L1ad552.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ad558.  v6:= "minByteCount > Segment.SIZE: " @kind object;
  #L1ad55c.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad562.  v5:= temp @kind object;
  #L1ad564.  call temp:= `append`(v5, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad56a.  v5:= temp @kind object;
  #L1ad56c.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ad572.  v5:= temp @kind object;
  #L1ad574.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad57a.  throw v4;
  #L1ad57c.  v4:= v8.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad580.  if v4 != 0 then goto L1ad594;
  #L1ad584.  v4:= new `java.lang.IllegalStateException`;
  #L1ad588.  v5:= "not attached to a buffer" @kind object;
  #L1ad58c.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad592.  throw v4;
  #L1ad594.  v4:= v8.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` @kind boolean;
  #L1ad598.  if v4 != 0 then goto L1ad5ac;
  #L1ad59c.  v4:= new `java.lang.IllegalStateException`;
  #L1ad5a0.  v5:= "expandBuffer() only permitted for read/write buffers" @kind object;
  #L1ad5a4.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad5aa.  throw v4;
  #L1ad5ac.  v4:= v8.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad5b0.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad5b4.  v4:= v8.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad5b8.  call temp:= `writableSegment`(v4, v9) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L1ad5be.  v3:= temp @kind object;
  #L1ad5c0.  v4:= v3.`okio.Segment.limit` @type ^`int`;
  #L1ad5c4.  v2:= v4 - 8192;
  #L1ad5c8.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L1ad5cc.  v4:= v8.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad5d0.  v6:= (`long`) v2 @kind i2l;
  #L1ad5d2.  v6:= v6 + v0 @kind long;
  #L1ad5d4.  v4.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L1ad5d8.  v8.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v3 @kind object;
  #L1ad5dc.  v8.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1ad5e0.  v4:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ad5e4.  v8.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v4 @kind object;
  #L1ad5e8.  v4:= v2 - 8192;
  #L1ad5ec.  v8.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v4;
  #L1ad5f0.  v8.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v5;
  #L1ad5f4.  v4:= (`long`) v2 @kind i2l;
  #L1ad5f6.  return v4 @kind wide;
}
procedure `int` `next`(`okio.Buffer$UnsafeCursor` v4 @kind this) @signature `Lokio/Buffer$UnsafeCursor;.next:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ad608.  v0:= v4.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1ad60c.  v2:= v4.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad610.  v2:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad614.  v0:= lcmp(v0, v2);
  #L1ad618.  if v0 != 0 then goto L1ad628;
  #L1ad61c.  v0:= new `java.lang.IllegalStateException`;
  #L1ad620.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1ad626.  throw v0;
  #L1ad628.  v0:= v4.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1ad62c.  v2:= -1L;
  #L1ad630.  v0:= lcmp(v0, v2);
  #L1ad634.  if v0 != 0 then goto L1ad646;
  #L1ad638.  v0:= 0L;
  #L1ad63c.  call temp:= `seek`(v4, v0) @signature `Lokio/Buffer$UnsafeCursor;.seek:(J)I` @kind virtual;
  #L1ad642.  v0:= temp;
  #L1ad644.  return v0;
  #L1ad646.  v0:= v4.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1ad64a.  v2:= v4.`okio.Buffer$UnsafeCursor.end` @type ^`int`;
  #L1ad64e.  v3:= v4.`okio.Buffer$UnsafeCursor.start` @type ^`int`;
  #L1ad652.  v2:= v2 - v3 @kind int;
  #L1ad654.  v2:= (`long`) v2 @kind i2l;
  #L1ad656.  v0:= v0 + v2 @kind long;
  #L1ad658.  call temp:= `seek`(v4, v0) @signature `Lokio/Buffer$UnsafeCursor;.seek:(J)I` @kind virtual;
  #L1ad65e.  v0:= temp;
  #L1ad660.  goto L1ad644;
}
procedure `long` `resizeBuffer`(`okio.Buffer$UnsafeCursor` v13 @kind this, `long` v14 @name `newSize`) @signature `Lokio/Buffer$UnsafeCursor;.resizeBuffer:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1ad674.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad678.  if v10 != 0 then goto L1ad68c;
  #L1ad67c.  v10:= new `java.lang.IllegalStateException`;
  #L1ad680.  v11:= "not attached to a buffer" @kind object;
  #L1ad684.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad68a.  throw v10;
  #L1ad68c.  v10:= v13.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` @kind boolean;
  #L1ad690.  if v10 != 0 then goto L1ad6a4;
  #L1ad694.  v10:= new `java.lang.IllegalStateException`;
  #L1ad698.  v11:= "resizeBuffer() only permitted for read/write buffers" @kind object;
  #L1ad69c.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad6a2.  throw v10;
  #L1ad6a4.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad6a8.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad6ac.  v10:= lcmp(v14, v6);
  #L1ad6b0.  if v10 > 0 then goto L1ad774;
  #L1ad6b4.  v10:= 0L;
  #L1ad6b8.  v10:= lcmp(v14, v10);
  #L1ad6bc.  if v10 >= 0 then goto L1ad6f2;
  #L1ad6c0.  v10:= new `java.lang.IllegalArgumentException`;
  #L1ad6c4.  v11:= new `java.lang.StringBuilder`;
  #L1ad6c8.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ad6ce.  v12:= "newSize < 0: " @kind object;
  #L1ad6d2.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad6d8.  v11:= temp @kind object;
  #L1ad6da.  call temp:= `append`(v11, v14) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad6e0.  v11:= temp @kind object;
  #L1ad6e2.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ad6e8.  v11:= temp @kind object;
  #L1ad6ea.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad6f0.  throw v10;
  #L1ad6f2.  v2:= v6 - v14 @kind long;
  #L1ad6f6.  v10:= 0L;
  #L1ad6fa.  v10:= lcmp(v2, v10);
  #L1ad6fe.  if v10 <= 0 then goto L1ad74e;
  #L1ad702.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad706.  v10:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ad70a.  v8:= v10.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ad70e.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1ad712.  v11:= v8.`okio.Segment.pos` @type ^`int`;
  #L1ad716.  v9:= v10 - v11 @kind int;
  #L1ad71a.  v10:= (`long`) v9 @kind i2l;
  #L1ad71c.  v10:= lcmp(v10, v2);
  #L1ad720.  if v10 > 0 then goto L1ad740;
  #L1ad724.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad728.  call temp:= `pop`(v8) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1ad72e.  v11:= temp @kind object;
  #L1ad730.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v11 @kind object;
  #L1ad734.  call `recycle`(v8) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1ad73a.  v10:= (`long`) v9 @kind i2l;
  #L1ad73c.  v2:= v2 - v10 @kind long;
  #L1ad73e.  goto L1ad6f6;
  #L1ad740.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1ad744.  v10:= (`long`) v10 @kind i2l;
  #L1ad746.  v10:= v10 - v2 @kind long;
  #L1ad748.  v10:= (`int`) v10 @kind l2i;
  #L1ad74a.  v8.`okio.Segment.limit` @type ^`int` := v10;
  #L1ad74e.  v10:= 0I;
  #L1ad750.  v13.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v10 @kind object;
  #L1ad754.  v13.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v14 @kind wide;
  #L1ad758.  v10:= 0I;
  #L1ad75a.  v13.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v10 @kind object;
  #L1ad75e.  v10:= -1I;
  #L1ad760.  v13.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v10;
  #L1ad764.  v10:= -1I;
  #L1ad766.  v13.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v10;
  #L1ad76a.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad76e.  v10.`okio.Buffer.size` @type ^`long` := v14 @kind wide;
  #L1ad772.  return v6 @kind wide;
  #L1ad774.  v10:= lcmp(v14, v6);
  #L1ad778.  if v10 <= 0 then goto L1ad76a;
  #L1ad77c.  v4:= 1I;
  #L1ad77e.  v0:= v14 - v6 @kind long;
  #L1ad782.  v10:= 0L;
  #L1ad786.  v10:= lcmp(v0, v10);
  #L1ad78a.  if v10 <= 0 then goto L1ad76a;
  #L1ad78e.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad792.  v11:= 1I;
  #L1ad794.  call temp:= `writableSegment`(v10, v11) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L1ad79a.  v8:= temp @kind object;
  #L1ad79c.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1ad7a0.  v10:= v10 - 8192;
  #L1ad7a4.  v10:= (`long`) v10 @kind i2l;
  #L1ad7a6.  call temp:= `min`(v0, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1ad7ac.  v10:= temp @kind wide;
  #L1ad7ae.  v5:= (`int`) v10 @kind l2i;
  #L1ad7b0.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1ad7b4.  v10:= v10 + v5 @kind int;
  #L1ad7b6.  v8.`okio.Segment.limit` @type ^`int` := v10;
  #L1ad7ba.  v10:= (`long`) v5 @kind i2l;
  #L1ad7bc.  v0:= v0 - v10 @kind long;
  #L1ad7be.  if v4 == 0 then goto L1ad782;
  #L1ad7c2.  v13.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v8 @kind object;
  #L1ad7c6.  v13.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v6 @kind wide;
  #L1ad7ca.  v10:= v8.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ad7ce.  v13.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v10 @kind object;
  #L1ad7d2.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1ad7d6.  v10:= v10 - v5 @kind int;
  #L1ad7d8.  v13.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v10;
  #L1ad7dc.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1ad7e0.  v13.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v10;
  #L1ad7e4.  v4:= 0I;
  #L1ad7e6.  goto L1ad782;
}
procedure `int` `seek`(`okio.Buffer$UnsafeCursor` v23 @kind this, `long` v24 @name `offset`) @signature `Lokio/Buffer$UnsafeCursor;.seek:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L1ad7f8.  v16:= -1L;
  #L1ad7fc.  v16:= lcmp(v24, v16);
  #L1ad800.  if v16 < 0 then goto L1ad824;
  #L1ad804.  v0:= v23 @kind object;
  #L1ad808.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad80c.  v16:= v0 @kind object;
  #L1ad810.  v0:= v16 @kind object;
  #L1ad814.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad818.  v16:= v0 @kind wide;
  #L1ad81c.  v16:= lcmp(v24, v16);
  #L1ad820.  if v16 <= 0 then goto L1ad884;
  #L1ad824.  v16:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L1ad828.  v17:= "offset=%s > size=%s" @kind object;
  #L1ad82c.  v18:= 2I;
  #L1ad830.  v0:= v18;
  #L1ad834.  v0:= new `java.lang.Object`[v0];
  #L1ad838.  v18:= v0 @kind object;
  #L1ad83c.  v19:= 0I;
  #L1ad840.  call temp:= `valueOf`(v24) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1ad846.  v20:= temp @kind object;
  #L1ad848.  v18[v19]:= v20 @kind object;
  #L1ad84c.  v19:= 1I;
  #L1ad850.  v0:= v23 @kind object;
  #L1ad854.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad858.  v20:= v0 @kind object;
  #L1ad85c.  v0:= v20 @kind object;
  #L1ad860.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad864.  v20:= v0 @kind wide;
  #L1ad868.  call temp:= `valueOf`(v20) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1ad86e.  v20:= temp @kind object;
  #L1ad870.  v18[v19]:= v20 @kind object;
  #L1ad874.  call temp:= `format`(v17, v18) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1ad87a.  v17:= temp @kind object;
  #L1ad87c.  call `<init>`(v16, v17) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad882.  throw v16;
  #L1ad884.  v16:= -1L;
  #L1ad888.  v16:= lcmp(v24, v16);
  #L1ad88c.  if v16 == 0 then goto L1ad8b0;
  #L1ad890.  v0:= v23 @kind object;
  #L1ad894.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad898.  v16:= v0 @kind object;
  #L1ad89c.  v0:= v16 @kind object;
  #L1ad8a0.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad8a4.  v16:= v0 @kind wide;
  #L1ad8a8.  v16:= lcmp(v24, v16);
  #L1ad8ac.  if v16 != 0 then goto L1ad902;
  #L1ad8b0.  v16:= 0I;
  #L1ad8b4.  v0:= v16 @kind object;
  #L1ad8b8.  v1:= v23 @kind object;
  #L1ad8bc.  v1.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v0 @kind object;
  #L1ad8c0.  v0:= v24 @kind wide;
  #L1ad8c4.  v2:= v23 @kind object;
  #L1ad8c8.  v2.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1ad8cc.  v16:= 0I;
  #L1ad8d0.  v0:= v16 @kind object;
  #L1ad8d4.  v1:= v23 @kind object;
  #L1ad8d8.  v1.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v0 @kind object;
  #L1ad8dc.  v16:= -1I;
  #L1ad8e0.  v0:= v16;
  #L1ad8e4.  v1:= v23 @kind object;
  #L1ad8e8.  v1.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v0;
  #L1ad8ec.  v16:= -1I;
  #L1ad8f0.  v0:= v16;
  #L1ad8f4.  v1:= v23 @kind object;
  #L1ad8f8.  v1.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v0;
  #L1ad8fc.  v16:= -1I;
  #L1ad900.  return v16;
  #L1ad902.  v8:= 0L;
  #L1ad906.  v0:= v23 @kind object;
  #L1ad90a.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad90e.  v16:= v0 @kind object;
  #L1ad912.  v0:= v16 @kind object;
  #L1ad916.  v6:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad91a.  v0:= v23 @kind object;
  #L1ad91e.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad922.  v16:= v0 @kind object;
  #L1ad926.  v0:= v16 @kind object;
  #L1ad92a.  v4:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ad92e.  v0:= v23 @kind object;
  #L1ad932.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad936.  v16:= v0 @kind object;
  #L1ad93a.  v0:= v16 @kind object;
  #L1ad93e.  v14:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ad942.  v0:= v23 @kind object;
  #L1ad946.  v0:= v0.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` @kind object;
  #L1ad94a.  v16:= v0 @kind object;
  #L1ad94e.  if v16 == 0 then goto L1ad9a6;
  #L1ad952.  v0:= v23 @kind object;
  #L1ad956.  v0:= v0.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1ad95a.  v16:= v0 @kind wide;
  #L1ad95e.  v0:= v23 @kind object;
  #L1ad962.  v0:= v0.`okio.Buffer$UnsafeCursor.start` @type ^`int`;
  #L1ad966.  v18:= v0;
  #L1ad96a.  v0:= v23 @kind object;
  #L1ad96e.  v0:= v0.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` @kind object;
  #L1ad972.  v19:= v0 @kind object;
  #L1ad976.  v0:= v19 @kind object;
  #L1ad97a.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L1ad97e.  v19:= v0;
  #L1ad982.  v18:= v18 - v19 @kind int;
  #L1ad986.  v0:= v18;
  #L1ad98a.  v0:= (`long`) v0 @kind i2l;
  #L1ad98c.  v18:= v0 @kind wide;
  #L1ad990.  v12:= v16 - v18 @kind long;
  #L1ad994.  v16:= lcmp(v12, v24);
  #L1ad998.  if v16 <= 0 then goto L1ada0c;
  #L1ad99c.  v6:= v12 @kind wide;
  #L1ad99e.  v0:= v23 @kind object;
  #L1ad9a2.  v14:= v0.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` @kind object;
  #L1ad9a6.  v16:= v6 - v24 @kind long;
  #L1ad9aa.  v18:= v24 - v8 @kind long;
  #L1ad9ae.  v16:= lcmp(v16, v18);
  #L1ad9b2.  if v16 <= 0 then goto L1ada18;
  #L1ad9b6.  v5:= v4 @kind object;
  #L1ad9b8.  v10:= v8 @kind wide;
  #L1ad9ba.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L1ad9be.  v16:= v0;
  #L1ad9c2.  v0:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ad9c6.  v17:= v0;
  #L1ad9ca.  v16:= v16 - v17 @kind int;
  #L1ad9ce.  v0:= v16;
  #L1ad9d2.  v0:= (`long`) v0 @kind i2l;
  #L1ad9d4.  v16:= v0 @kind wide;
  #L1ad9d8.  v16:= v16 + v10 @kind long;
  #L1ad9dc.  v16:= lcmp(v24, v16);
  #L1ad9e0.  if v16 < 0 then goto L1ada4c;
  #L1ad9e4.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L1ad9e8.  v16:= v0;
  #L1ad9ec.  v0:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ad9f0.  v17:= v0;
  #L1ad9f4.  v16:= v16 - v17 @kind int;
  #L1ad9f8.  v0:= v16;
  #L1ad9fc.  v0:= (`long`) v0 @kind i2l;
  #L1ad9fe.  v16:= v0 @kind wide;
  #L1ada02.  v10:= v10 + v16 @kind long;
  #L1ada06.  v5:= v5.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1ada0a.  goto L1ad9ba;
  #L1ada0c.  v8:= v12 @kind wide;
  #L1ada0e.  v0:= v23 @kind object;
  #L1ada12.  v4:= v0.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` @kind object;
  #L1ada16.  goto L1ad9a6;
  #L1ada18.  v5:= v14 @kind object;
  #L1ada1a.  v10:= v6 @kind wide;
  #L1ada1c.  v16:= lcmp(v10, v24);
  #L1ada20.  if v16 <= 0 then goto L1ada4c;
  #L1ada24.  v5:= v5.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ada28.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L1ada2c.  v16:= v0;
  #L1ada30.  v0:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ada34.  v17:= v0;
  #L1ada38.  v16:= v16 - v17 @kind int;
  #L1ada3c.  v0:= v16;
  #L1ada40.  v0:= (`long`) v0 @kind i2l;
  #L1ada42.  v16:= v0 @kind wide;
  #L1ada46.  v10:= v10 - v16 @kind long;
  #L1ada4a.  goto L1ada1c;
  #L1ada4c.  v0:= v23 @kind object;
  #L1ada50.  v0:= v0.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` @kind boolean;
  #L1ada54.  v16:= v0;
  #L1ada58.  if v16 == 0 then goto L1adaba;
  #L1ada5c.  v0:= v5.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L1ada60.  v16:= v0;
  #L1ada64.  if v16 == 0 then goto L1adaba;
  #L1ada68.  call temp:= `unsharedCopy`(v5) @signature `Lokio/Segment;.unsharedCopy:()Lokio/Segment;` @kind virtual;
  #L1ada6e.  v15:= temp @kind object;
  #L1ada70.  v0:= v23 @kind object;
  #L1ada74.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ada78.  v16:= v0 @kind object;
  #L1ada7c.  v0:= v16 @kind object;
  #L1ada80.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ada84.  v16:= v0 @kind object;
  #L1ada88.  v0:= v16 @kind object;
  #L1ada8c.  if v0 != v5 then goto L1adaa4;
  #L1ada90.  v0:= v23 @kind object;
  #L1ada94.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ada98.  v16:= v0 @kind object;
  #L1ada9c.  v0:= v16 @kind object;
  #L1adaa0.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v15 @kind object;
  #L1adaa4.  call temp:= `push`(v5, v15) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1adaaa.  v5:= temp @kind object;
  #L1adaac.  v0:= v5.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1adab0.  v16:= v0 @kind object;
  #L1adab4.  call temp:= `pop`(v16) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1adaba.  v0:= v23 @kind object;
  #L1adabe.  v0.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v5 @kind object;
  #L1adac2.  v0:= v24 @kind wide;
  #L1adac6.  v2:= v23 @kind object;
  #L1adaca.  v2.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1adace.  v0:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1adad2.  v16:= v0 @kind object;
  #L1adad6.  v0:= v16 @kind object;
  #L1adada.  v1:= v23 @kind object;
  #L1adade.  v1.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v0 @kind object;
  #L1adae2.  v0:= v5.`okio.Segment.pos` @type ^`int`;
  #L1adae6.  v16:= v0;
  #L1adaea.  v18:= v24 - v10 @kind long;
  #L1adaee.  v0:= v18 @kind wide;
  #L1adaf2.  v0:= (`int`) v0 @kind l2i;
  #L1adaf4.  v17:= v0;
  #L1adaf8.  v16:= v16 + v17 @kind int;
  #L1adafc.  v0:= v16;
  #L1adb00.  v1:= v23 @kind object;
  #L1adb04.  v1.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v0;
  #L1adb08.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L1adb0c.  v16:= v0;
  #L1adb10.  v0:= v16;
  #L1adb14.  v1:= v23 @kind object;
  #L1adb18.  v1.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v0;
  #L1adb1c.  v0:= v23 @kind object;
  #L1adb20.  v0:= v0.`okio.Buffer$UnsafeCursor.end` @type ^`int`;
  #L1adb24.  v16:= v0;
  #L1adb28.  v0:= v23 @kind object;
  #L1adb2c.  v0:= v0.`okio.Buffer$UnsafeCursor.start` @type ^`int`;
  #L1adb30.  v17:= v0;
  #L1adb34.  v16:= v16 - v17 @kind int;
  #L1adb38.  goto L1ad900;
}
