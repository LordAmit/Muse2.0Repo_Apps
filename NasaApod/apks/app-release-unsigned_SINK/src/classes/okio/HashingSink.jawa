record `okio.HashingSink` @kind class @AccessFlag PUBLIC_FINAL extends `okio.ForwardingSink` @kind class {
  `javax.crypto.Mac` `okio.HashingSink.mac` @AccessFlag PRIVATE_FINAL;
  `java.security.MessageDigest` `okio.HashingSink.messageDigest` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.HashingSink` v2 @kind this, `okio.Sink` v3 @kind object @name `sink`, `java.lang.String` v4 @kind object @name `algorithm`) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L24a570.  call `<init>`(v2, v3) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #Try_start0.  
  #L24a576.  call temp:= `getInstance`(v4) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L24a57c.  v1:= temp @kind object;
  #L24a57e.  v2.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` := v1 @kind object;
  #L24a582.  v1:= 0I;
  #L24a584.  v2.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` := v1 @kind object;
  #Try_end0.  
  #L24a588.  return @kind void;
  #L24a58a.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L24a58c.  v1:= new `java.lang.AssertionError`;
  #L24a590.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L24a596.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L24a58a;
}
procedure `void` `<init>`(`okio.HashingSink` v4 @kind this, `okio.Sink` v5 @kind object @name `sink`, `okio.ByteString` v6 @kind object @name `key`, `java.lang.String` v7 @kind object @name `algorithm`) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24a5b8.  call `<init>`(v4, v5) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #Try_start0.  
  #L24a5be.  call temp:= `getInstance`(v7) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L24a5c4.  v1:= temp @kind object;
  #L24a5c6.  v4.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` := v1 @kind object;
  #L24a5ca.  v1:= v4.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` @kind object;
  #L24a5ce.  v2:= new `javax.crypto.spec.SecretKeySpec`;
  #L24a5d2.  call temp:= `toByteArray`(v6) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L24a5d8.  v3:= temp @kind object;
  #L24a5da.  call `<init>`(v2, v3, v7) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L24a5e0.  call `init`(v1, v2) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L24a5e6.  v1:= 0I;
  #L24a5e8.  v4.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` := v1 @kind object;
  #Try_end0.  
  #L24a5ec.  return @kind void;
  #L24a5ee.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L24a5f0.  v1:= new `java.lang.AssertionError`;
  #L24a5f4.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L24a5fa.  throw v1;
  #L24a5fc.  v0:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L24a5fe.  v1:= new `java.lang.IllegalArgumentException`;
  #L24a602.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L24a608.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L24a5ee;
  catch `java.security.InvalidKeyException` @[Try_start0..Try_end0] goto L24a5fc;
}
procedure `okio.HashingSink` `hmacSha1`(`okio.Sink` v2 @kind object @name `sink`, `okio.ByteString` v3 @kind object @name `key`) @signature `Lokio/HashingSink;.hmacSha1:(Lokio/Sink;Lokio/ByteString;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24a62c.  v0:= new `okio.HashingSink`;
  #L24a630.  v1:= "HmacSHA1" @kind object;
  #L24a634.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L24a63a.  return v0 @kind object;
}
procedure `okio.HashingSink` `hmacSha256`(`okio.Sink` v2 @kind object @name `sink`, `okio.ByteString` v3 @kind object @name `key`) @signature `Lokio/HashingSink;.hmacSha256:(Lokio/Sink;Lokio/ByteString;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24a64c.  v0:= new `okio.HashingSink`;
  #L24a650.  v1:= "HmacSHA256" @kind object;
  #L24a654.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L24a65a.  return v0 @kind object;
}
procedure `okio.HashingSink` `hmacSha512`(`okio.Sink` v2 @kind object @name `sink`, `okio.ByteString` v3 @kind object @name `key`) @signature `Lokio/HashingSink;.hmacSha512:(Lokio/Sink;Lokio/ByteString;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24a66c.  v0:= new `okio.HashingSink`;
  #L24a670.  v1:= "HmacSHA512" @kind object;
  #L24a674.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L24a67a.  return v0 @kind object;
}
procedure `okio.HashingSink` `md5`(`okio.Sink` v2 @kind object @name `sink`) @signature `Lokio/HashingSink;.md5:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24a68c.  v0:= new `okio.HashingSink`;
  #L24a690.  v1:= "MD5" @kind object;
  #L24a694.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L24a69a.  return v0 @kind object;
}
procedure `okio.HashingSink` `sha1`(`okio.Sink` v2 @kind object @name `sink`) @signature `Lokio/HashingSink;.sha1:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24a6ac.  v0:= new `okio.HashingSink`;
  #L24a6b0.  v1:= "SHA-1" @kind object;
  #L24a6b4.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L24a6ba.  return v0 @kind object;
}
procedure `okio.HashingSink` `sha256`(`okio.Sink` v2 @kind object @name `sink`) @signature `Lokio/HashingSink;.sha256:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24a6cc.  v0:= new `okio.HashingSink`;
  #L24a6d0.  v1:= "SHA-256" @kind object;
  #L24a6d4.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L24a6da.  return v0 @kind object;
}
procedure `okio.HashingSink` `sha512`(`okio.Sink` v2 @kind object @name `sink`) @signature `Lokio/HashingSink;.sha512:(Lokio/Sink;)Lokio/HashingSink;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24a6ec.  v0:= new `okio.HashingSink`;
  #L24a6f0.  v1:= "SHA-512" @kind object;
  #L24a6f4.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSink;.<init>:(Lokio/Sink;Ljava/lang/String;)V` @kind direct;
  #L24a6fa.  return v0 @kind object;
}
procedure `okio.ByteString` `hash`(`okio.HashingSink` v2 @kind this) @signature `Lokio/HashingSink;.hash:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24a70c.  v1:= v2.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L24a710.  if v1 == 0 then goto L24a72a;
  #L24a714.  v1:= v2.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L24a718.  call temp:= `digest`(v1) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L24a71e.  v0:= temp @kind object;
  #L24a720.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L24a726.  v1:= temp @kind object;
  #L24a728.  return v1 @kind object;
  #L24a72a.  v1:= v2.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` @kind object;
  #L24a72e.  call temp:= `doFinal`(v1) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L24a734.  v0:= temp @kind object;
  #L24a736.  goto L24a720;
}
procedure `void` `write`(`okio.HashingSink` v10 @kind this, `okio.Buffer` v11 @kind object @name `source`, `long` v12 @name `byteCount`) @signature `Lokio/HashingSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L24a748.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24a74c.  v2:= 0L;
  #L24a750.  v4:= v12 @kind wide;
  #L24a752.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L24a758.  v6:= 0L;
  #L24a75c.  v8:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24a760.  v0:= lcmp(v6, v12);
  #L24a764.  if v0 >= 0 then goto L24a7ba;
  #L24a768.  v0:= v12 - v6 @kind long;
  #L24a76c.  v2:= v8.`okio.Segment.limit` @type ^`int`;
  #L24a770.  v3:= v8.`okio.Segment.pos` @type ^`int`;
  #L24a774.  v2:= v2 - v3 @kind int;
  #L24a776.  v2:= (`long`) v2 @kind i2l;
  #L24a778.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L24a77e.  v0:= temp @kind wide;
  #L24a780.  v9:= (`int`) v0 @kind l2i;
  #L24a782.  v0:= v10.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L24a786.  if v0 == 0 then goto L24a7a6;
  #L24a78a.  v0:= v10.`okio.HashingSink.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L24a78e.  v1:= v8.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24a792.  v2:= v8.`okio.Segment.pos` @type ^`int`;
  #L24a796.  call `update`(v0, v1, v2, v9) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L24a79c.  v0:= (`long`) v9 @kind i2l;
  #L24a79e.  v6:= v6 + v0 @kind long;
  #L24a7a0.  v8:= v8.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24a7a4.  goto L24a760;
  #L24a7a6.  v0:= v10.`okio.HashingSink.mac` @type ^`javax.crypto.Mac` @kind object;
  #L24a7aa.  v1:= v8.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24a7ae.  v2:= v8.`okio.Segment.pos` @type ^`int`;
  #L24a7b2.  call `update`(v0, v1, v2, v9) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L24a7b8.  goto L24a79c;
  #L24a7ba.  call `write`(v10, v11, v12) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @kind super;
  #L24a7c0.  return @kind void;
}
