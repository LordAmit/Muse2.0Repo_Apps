record `retrofit2.Retrofit$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.HttpUrl` `retrofit2.Retrofit$Builder.baseUrl` @AccessFlag PRIVATE;
  `java.util.List` `retrofit2.Retrofit$Builder.callAdapterFactories` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Call$Factory` `retrofit2.Retrofit$Builder.callFactory` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `retrofit2.Retrofit$Builder.callbackExecutor` @AccessFlag PRIVATE;
  `java.util.List` `retrofit2.Retrofit$Builder.converterFactories` @AccessFlag PRIVATE_FINAL;
  `retrofit2.Platform` `retrofit2.Retrofit$Builder.platform` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.Retrofit$Builder.validateEagerly` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b0c3c.  call temp:= `get`() @signature `Lretrofit2/Platform;.get:()Lretrofit2/Platform;` @kind static;
  #L1b0c42.  v0:= temp @kind object;
  #L1b0c44.  call `<init>`(v1, v0) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Platform;)V` @kind direct;
  #L1b0c4a.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v1 @kind this, `retrofit2.Platform` v2 @kind object @name `platform`) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Platform;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1b0c5c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b0c62.  v0:= new `java.util.ArrayList`;
  #L1b0c66.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1b0c6c.  v1.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` := v0 @kind object;
  #L1b0c70.  v0:= new `java.util.ArrayList`;
  #L1b0c74.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1b0c7a.  v1.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` := v0 @kind object;
  #L1b0c7e.  v1.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` := v2 @kind object;
  #L1b0c82.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.Retrofit` v3 @kind object @name `retrofit`) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Retrofit;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1b0c94.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b0c9a.  v0:= new `java.util.ArrayList`;
  #L1b0c9e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1b0ca4.  v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` := v0 @kind object;
  #L1b0ca8.  v0:= new `java.util.ArrayList`;
  #L1b0cac.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1b0cb2.  v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` := v0 @kind object;
  #L1b0cb6.  call temp:= `get`() @signature `Lretrofit2/Platform;.get:()Lretrofit2/Platform;` @kind static;
  #L1b0cbc.  v0:= temp @kind object;
  #L1b0cbe.  v2.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` := v0 @kind object;
  #L1b0cc2.  v0:= v3.`retrofit2.Retrofit.callFactory` @type ^`okhttp3.Call$Factory` @kind object;
  #L1b0cc6.  v2.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` := v0 @kind object;
  #L1b0cca.  v0:= v3.`retrofit2.Retrofit.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L1b0cce.  v2.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` := v0 @kind object;
  #L1b0cd2.  v0:= v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1b0cd6.  v1:= v3.`retrofit2.Retrofit.converterFactories` @type ^`java.util.List` @kind object;
  #L1b0cda.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1b0ce0.  v0:= v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1b0ce4.  v1:= 0I;
  #L1b0ce6.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1b0cec.  v0:= v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1b0cf0.  v1:= v3.`retrofit2.Retrofit.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1b0cf4.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1b0cfa.  v0:= v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1b0cfe.  v1:= v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1b0d02.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1b0d08.  v1:= temp;
  #L1b0d0a.  v1:= v1 + -1;
  #L1b0d0e.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1b0d14.  v0:= v3.`retrofit2.Retrofit.callbackExecutor` @type ^`java.util.concurrent.Executor` @kind object;
  #L1b0d18.  v2.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L1b0d1c.  v0:= v3.`retrofit2.Retrofit.validateEagerly` @type ^`boolean` @kind boolean;
  #L1b0d20.  v2.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` := v0 @kind boolean;
  #L1b0d24.  return @kind void;
}
procedure `retrofit2.Retrofit$Builder` `addCallAdapterFactory`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.CallAdapter$Factory` v3 @kind object @name `factory`) @signature `Lretrofit2/Retrofit$Builder;.addCallAdapterFactory:(Lretrofit2/CallAdapter$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b0d38.  v0:= v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1b0d3c.  v1:= "factory == null" @kind object;
  #L1b0d40.  call temp:= `checkNotNull`(v3, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0d46.  v1:= temp @kind object;
  #L1b0d48.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b0d4e.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `addConverterFactory`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.Converter$Factory` v3 @kind object @name `factory`) @signature `Lretrofit2/Retrofit$Builder;.addConverterFactory:(Lretrofit2/Converter$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b0d60.  v0:= v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1b0d64.  v1:= "factory == null" @kind object;
  #L1b0d68.  call temp:= `checkNotNull`(v3, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0d6e.  v1:= temp @kind object;
  #L1b0d70.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b0d76.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v4 @kind this, `java.lang.String` v5 @kind object @name `baseUrl`) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Ljava/lang/String;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b0d88.  v1:= "baseUrl == null" @kind object;
  #L1b0d8c.  call temp:= `checkNotNull`(v5, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0d92.  call temp:= `parse`(v5) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L1b0d98.  v0:= temp @kind object;
  #L1b0d9a.  if v0 != 0 then goto L1b0dd0;
  #L1b0d9e.  v1:= new `java.lang.IllegalArgumentException`;
  #L1b0da2.  v2:= new `java.lang.StringBuilder`;
  #L1b0da6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b0dac.  v3:= "Illegal URL: " @kind object;
  #L1b0db0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0db6.  v2:= temp @kind object;
  #L1b0db8.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0dbe.  v2:= temp @kind object;
  #L1b0dc0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0dc6.  v2:= temp @kind object;
  #L1b0dc8.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0dce.  throw v1;
  #L1b0dd0.  call temp:= `baseUrl`(v4, v0) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L1b0dd6.  v1:= temp @kind object;
  #L1b0dd8.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v4 @kind this, `okhttp3.HttpUrl` v5 @kind object @name `baseUrl`) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b0dec.  v1:= "baseUrl == null" @kind object;
  #L1b0df0.  call temp:= `checkNotNull`(v5, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0df6.  call temp:= `pathSegments`(v5) @signature `Lokhttp3/HttpUrl;.pathSegments:()Ljava/util/List;` @kind virtual;
  #L1b0dfc.  v0:= temp @kind object;
  #L1b0dfe.  v1:= "" @kind object;
  #L1b0e02.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1b0e08.  v2:= temp;
  #L1b0e0a.  v2:= v2 + -1;
  #L1b0e0e.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1b0e14.  v2:= temp @kind object;
  #L1b0e16.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b0e1c.  v1:= temp;
  #L1b0e1e.  if v1 != 0 then goto L1b0e54;
  #L1b0e22.  v1:= new `java.lang.IllegalArgumentException`;
  #L1b0e26.  v2:= new `java.lang.StringBuilder`;
  #L1b0e2a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b0e30.  v3:= "baseUrl must end in /: " @kind object;
  #L1b0e34.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0e3a.  v2:= temp @kind object;
  #L1b0e3c.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0e42.  v2:= temp @kind object;
  #L1b0e44.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0e4a.  v2:= temp @kind object;
  #L1b0e4c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0e52.  throw v1;
  #L1b0e54.  v4.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` := v5 @kind object;
  #L1b0e58.  return v4 @kind object;
}
procedure `retrofit2.Retrofit` `build`(`retrofit2.Retrofit$Builder` v9 @kind this) @signature `Lretrofit2/Retrofit$Builder;.build:()Lretrofit2/Retrofit;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1b0e6c.  v0:= v9.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L1b0e70.  if v0 != 0 then goto L1b0e84;
  #L1b0e74.  v0:= new `java.lang.IllegalStateException`;
  #L1b0e78.  v2:= "Base URL required." @kind object;
  #L1b0e7c.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0e82.  throw v0;
  #L1b0e84.  v1:= v9.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` @kind object;
  #L1b0e88.  if v1 != 0 then goto L1b0e96;
  #L1b0e8c.  v1:= new `okhttp3.OkHttpClient`;
  #L1b0e90.  call `<init>`(v1) @signature `Lokhttp3/OkHttpClient;.<init>:()V` @kind direct;
  #L1b0e96.  v5:= v9.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` @kind object;
  #L1b0e9a.  if v5 != 0 then goto L1b0eaa;
  #L1b0e9e.  v0:= v9.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L1b0ea2.  call temp:= `defaultCallbackExecutor`(v0) @signature `Lretrofit2/Platform;.defaultCallbackExecutor:()Ljava/util/concurrent/Executor;` @kind virtual;
  #L1b0ea8.  v5:= temp @kind object;
  #L1b0eaa.  v7:= new `java.util.ArrayList`;
  #L1b0eae.  v0:= v9.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1b0eb2.  call `<init>`(v7, v0) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L1b0eb8.  v0:= v9.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L1b0ebc.  call temp:= `defaultCallAdapterFactory`(v0, v5) @signature `Lretrofit2/Platform;.defaultCallAdapterFactory:(Ljava/util/concurrent/Executor;)Lretrofit2/CallAdapter$Factory;` @kind virtual;
  #L1b0ec2.  v0:= temp @kind object;
  #L1b0ec4.  call temp:= `add`(v7, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b0eca.  v8:= new `java.util.ArrayList`;
  #L1b0ece.  v0:= v9.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1b0ed2.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1b0ed8.  v0:= temp;
  #L1b0eda.  v0:= v0 + 1;
  #L1b0ede.  call `<init>`(v8, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L1b0ee4.  v0:= new `retrofit2.BuiltInConverters`;
  #L1b0ee8.  call `<init>`(v0) @signature `Lretrofit2/BuiltInConverters;.<init>:()V` @kind direct;
  #L1b0eee.  call temp:= `add`(v8, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b0ef4.  v0:= v9.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1b0ef8.  call temp:= `addAll`(v8, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1b0efe.  v0:= new `retrofit2.Retrofit`;
  #L1b0f02.  v2:= v9.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L1b0f06.  call temp:= `unmodifiableList`(v8) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1b0f0c.  v3:= temp @kind object;
  #L1b0f0e.  call temp:= `unmodifiableList`(v7) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1b0f14.  v4:= temp @kind object;
  #L1b0f16.  v6:= v9.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` @kind boolean;
  #L1b0f1a.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lretrofit2/Retrofit;.<init>:(Lokhttp3/Call$Factory;Lokhttp3/HttpUrl;Ljava/util/List;Ljava/util/List;Ljava/util/concurrent/Executor;Z)V` @kind direct;
  #L1b0f20.  return v0 @kind object;
}
procedure `java.util.List` `callAdapterFactories`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.callAdapterFactories:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0f34.  v0:= v1.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1b0f38.  return v0 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `callFactory`(`retrofit2.Retrofit$Builder` v1 @kind this, `okhttp3.Call$Factory` v2 @kind object @name `factory`) @signature `Lretrofit2/Retrofit$Builder;.callFactory:(Lokhttp3/Call$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0f4c.  v0:= "factory == null" @kind object;
  #L1b0f50.  call temp:= `checkNotNull`(v2, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0f56.  v0:= temp @kind object;
  #L1b0f58.  v0:= (`okhttp3.Call$Factory`) v0 @kind object;
  #L1b0f5c.  v1.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` := v0 @kind object;
  #L1b0f60.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `callbackExecutor`(`retrofit2.Retrofit$Builder` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object @name `executor`) @signature `Lretrofit2/Retrofit$Builder;.callbackExecutor:(Ljava/util/concurrent/Executor;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0f74.  v0:= "executor == null" @kind object;
  #L1b0f78.  call temp:= `checkNotNull`(v2, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0f7e.  v0:= temp @kind object;
  #L1b0f80.  v0:= (`java.util.concurrent.Executor`) v0 @kind object;
  #L1b0f84.  v1.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L1b0f88.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `client`(`retrofit2.Retrofit$Builder` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object @name `client`) @signature `Lretrofit2/Retrofit$Builder;.client:(Lokhttp3/OkHttpClient;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0f9c.  v0:= "client == null" @kind object;
  #L1b0fa0.  call temp:= `checkNotNull`(v2, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0fa6.  v0:= temp @kind object;
  #L1b0fa8.  v0:= (`okhttp3.Call$Factory`) v0 @kind object;
  #L1b0fac.  call temp:= `callFactory`(v1, v0) @signature `Lretrofit2/Retrofit$Builder;.callFactory:(Lokhttp3/Call$Factory;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L1b0fb2.  v0:= temp @kind object;
  #L1b0fb4.  return v0 @kind object;
}
procedure `java.util.List` `converterFactories`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.converterFactories:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0fc8.  v0:= v1.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1b0fcc.  return v0 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `validateEagerly`(`retrofit2.Retrofit$Builder` v0 @kind this, `boolean` v1 @name `validateEagerly`) @signature `Lretrofit2/Retrofit$Builder;.validateEagerly:(Z)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;

  #L1b0fe0.  v0.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` := v1 @kind boolean;
  #L1b0fe4.  return v0 @kind object;
}
