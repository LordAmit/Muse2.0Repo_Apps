record `retrofit2.Platform$Android` @kind class @AccessFlag  extends `retrofit2.Platform` @kind class {
}
procedure `void` `<init>`(`retrofit2.Platform$Android` v0 @kind this) @signature `Lretrofit2/Platform$Android;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L222638.  call `<init>`(v0) @signature `Lretrofit2/Platform;.<init>:()V` @kind direct;
  #L22263e.  return @kind void;
}
procedure `retrofit2.CallAdapter$Factory` `defaultCallAdapterFactory`(`retrofit2.Platform$Android` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object @name `callbackExecutor`) @signature `Lretrofit2/Platform$Android;.defaultCallAdapterFactory:(Ljava/util/concurrent/Executor;)Lretrofit2/CallAdapter$Factory;` @AccessFlag  {
    temp;
    v0;

  #L222650.  if v2 != 0 then goto L222660;
  #L222654.  v0:= new `java.lang.AssertionError`;
  #L222658.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L22265e.  throw v0;
  #L222660.  v0:= new `retrofit2.ExecutorCallAdapterFactory`;
  #L222664.  call `<init>`(v0, v2) @signature `Lretrofit2/ExecutorCallAdapterFactory;.<init>:(Ljava/util/concurrent/Executor;)V` @kind direct;
  #L22266a.  return v0 @kind object;
}
procedure `java.util.concurrent.Executor` `defaultCallbackExecutor`(`retrofit2.Platform$Android` v1 @kind this) @signature `Lretrofit2/Platform$Android;.defaultCallbackExecutor:()Ljava/util/concurrent/Executor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22267c.  v0:= new `retrofit2.Platform$Android$MainThreadExecutor`;
  #L222680.  call `<init>`(v0) @signature `Lretrofit2/Platform$Android$MainThreadExecutor;.<init>:()V` @kind direct;
  #L222686.  return v0 @kind object;
}
