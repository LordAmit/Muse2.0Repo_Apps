record `retrofit2.Utils$WildcardTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.lowerBound` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.upperBound` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this, `java.lang.reflect.Type`[] v4 @kind object @name `upperBounds`, `java.lang.reflect.Type`[] v5 @kind object @name `lowerBounds`) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1b3c88.  v1:= 1I;
  #L1b3c8a.  v2:= 0I;
  #L1b3c8c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b3c92.  v0:= length @variable v5;
  #L1b3c94.  if v0 <= v1 then goto L1b3ca4;
  #L1b3c98.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b3c9c.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b3ca2.  throw v0;
  #L1b3ca4.  v0:= length @variable v4;
  #L1b3ca6.  if v0 == v1 then goto L1b3cb6;
  #L1b3caa.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b3cae.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b3cb4.  throw v0;
  #L1b3cb6.  v0:= length @variable v5;
  #L1b3cb8.  if v0 != v1 then goto L1b3d04;
  #L1b3cbc.  v0:= v5[v2] @kind object;
  #L1b3cc0.  if v0 != 0 then goto L1b3cd0;
  #L1b3cc4.  v0:= new `java.lang.NullPointerException`;
  #L1b3cc8.  call `<init>`(v0) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L1b3cce.  throw v0;
  #L1b3cd0.  v0:= v5[v2] @kind object;
  #L1b3cd4.  call `checkNotPrimitive`(v0) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1b3cda.  v0:= v4[v2] @kind object;
  #L1b3cde.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1b3ce2.  if v0 == v1 then goto L1b3cf2;
  #L1b3ce6.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b3cea.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b3cf0.  throw v0;
  #L1b3cf2.  v0:= v5[v2] @kind object;
  #L1b3cf6.  v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b3cfa.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L1b3cfe.  v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b3d02.  return @kind void;
  #L1b3d04.  v0:= v4[v2] @kind object;
  #L1b3d08.  if v0 != 0 then goto L1b3d18;
  #L1b3d0c.  v0:= new `java.lang.NullPointerException`;
  #L1b3d10.  call `<init>`(v0) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L1b3d16.  throw v0;
  #L1b3d18.  v0:= v4[v2] @kind object;
  #L1b3d1c.  call `checkNotPrimitive`(v0) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1b3d22.  v0:= 0I;
  #L1b3d24.  v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b3d28.  v0:= v4[v2] @kind object;
  #L1b3d2c.  v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b3d30.  goto L1b3d02;
}
procedure `boolean` `equals`(`retrofit2.Utils$WildcardTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object @name `other`) @signature `Lretrofit2/Utils$WildcardTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b3d44.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b3d48.  if v0 == 0 then goto L1b3d60;
  #L1b3d4c.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L1b3d50.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b3d56.  v0:= temp;
  #L1b3d58.  if v0 == 0 then goto L1b3d60;
  #L1b3d5c.  v0:= 1I;
  #L1b3d5e.  return v0;
  #L1b3d60.  v0:= 0I;
  #L1b3d62.  goto L1b3d5e;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b3d74.  v0:= v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3d78.  if v0 == 0 then goto L1b3d8e;
  #L1b3d7c.  v0:= 1I;
  #L1b3d7e.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b3d82.  v1:= 0I;
  #L1b3d84.  v2:= v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3d88.  v0[v1]:= v2 @kind object;
  #L1b3d8c.  return v0 @kind object;
  #L1b3d8e.  v0:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b3d92.  goto L1b3d8c;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b3da4.  v0:= 1I;
  #L1b3da6.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b3daa.  v1:= 0I;
  #L1b3dac.  v2:= v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3db0.  v0[v1]:= v2 @kind object;
  #L1b3db4.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b3dc8.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3dcc.  if v0 == 0 then goto L1b3df4;
  #L1b3dd0.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3dd4.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b3dda.  v0:= temp;
  #L1b3ddc.  v0:= v0 + 31;
  #L1b3de0.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3de4.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b3dea.  v1:= temp;
  #L1b3dec.  v1:= v1 + 31;
  #L1b3df0.  v0:= v0 ^~ v1 @kind int;
  #L1b3df2.  return v0;
  #L1b3df4.  v0:= 1I;
  #L1b3df6.  goto L1b3de0;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b3e08.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3e0c.  if v0 == 0 then goto L1b3e44;
  #L1b3e10.  v0:= new `java.lang.StringBuilder`;
  #L1b3e14.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b3e1a.  v1:= "? super " @kind object;
  #L1b3e1e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3e24.  v0:= temp @kind object;
  #L1b3e26.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3e2a.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b3e30.  v1:= temp @kind object;
  #L1b3e32.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3e38.  v0:= temp @kind object;
  #L1b3e3a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b3e40.  v0:= temp @kind object;
  #L1b3e42.  return v0 @kind object;
  #L1b3e44.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3e48.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1b3e4c.  if v0 != v1 then goto L1b3e56;
  #L1b3e50.  v0:= "?" @kind object;
  #L1b3e54.  goto L1b3e42;
  #L1b3e56.  v0:= new `java.lang.StringBuilder`;
  #L1b3e5a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b3e60.  v1:= "? extends " @kind object;
  #L1b3e64.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3e6a.  v0:= temp @kind object;
  #L1b3e6c.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3e70.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b3e76.  v1:= temp @kind object;
  #L1b3e78.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3e7e.  v0:= temp @kind object;
  #L1b3e80.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b3e86.  v0:= temp @kind object;
  #L1b3e88.  goto L1b3e42;
}
