record `retrofit2.Utils` @kind class @AccessFlag FINAL {
}
global `java.lang.reflect.Type`[] `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/Utils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b3e9c.  v0:= 0I;
  #L1b3e9e.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b3ea2.  `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L1b3ea6.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Utils` v0 @kind this) @signature `Lretrofit2/Utils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1b3eb8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b3ebe.  return @kind void;
}
procedure `okhttp3.ResponseBody` `buffer`(`okhttp3.ResponseBody` v4 @kind object @name `body`) @signature `Lretrofit2/Utils;.buffer:(Lokhttp3/ResponseBody;)Lokhttp3/ResponseBody;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b3ed0.  v0:= new `okio.Buffer`;
  #L1b3ed4.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1b3eda.  call temp:= `source`(v4) @signature `Lokhttp3/ResponseBody;.source:()Lokio/BufferedSource;` @kind virtual;
  #L1b3ee0.  v1:= temp @kind object;
  #L1b3ee2.  call temp:= `readAll`(v1, v0) @signature `Lokio/BufferedSource;.readAll:(Lokio/Sink;)J` @kind interface;
  #L1b3ee8.  call temp:= `contentType`(v4) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L1b3eee.  v1:= temp @kind object;
  #L1b3ef0.  call temp:= `contentLength`(v4) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L1b3ef6.  v2:= temp @kind wide;
  #L1b3ef8.  call temp:= `create`(v1, v2, v0) @signature `Lokhttp3/ResponseBody;.create:(Lokhttp3/MediaType;JLokio/BufferedSource;)Lokhttp3/ResponseBody;` @kind static;
  #L1b3efe.  v1:= temp @kind object;
  #L1b3f00.  return v1 @kind object;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object @name `message`) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;
    v0;

  #L1b3f14.  if v1 != 0 then goto L1b3f24;
  #L1b3f18.  v0:= new `java.lang.NullPointerException`;
  #L1b3f1c.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b3f22.  throw v0;
  #L1b3f24.  return v1 @kind object;
}
procedure `void` `checkNotPrimitive`(`java.lang.reflect.Type` v1 @kind object @name `type`) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L1b3f38.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L1b3f3c.  if v0 == 0 then goto L1b3f5c;
  #L1b3f40.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1b3f44.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L1b3f4a.  v0:= temp;
  #L1b3f4c.  if v0 == 0 then goto L1b3f5c;
  #L1b3f50.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b3f54.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b3f5a.  throw v0;
  #L1b3f5c.  return @kind void;
}
procedure `java.lang.Class` `declaringClassOf`(`java.lang.reflect.TypeVariable` v2 @kind object) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1b3f70.  call temp:= `getGenericDeclaration`(v2) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L1b3f76.  v0:= temp @kind object;
  #L1b3f78.  v1:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L1b3f7c.  if v1 == 0 then goto L1b3f86;
  #L1b3f80.  v0:= (`java.lang.Class`) v0 @kind object;
  #L1b3f84.  return v0 @kind object;
  #L1b3f86.  v0:= 0I;
  #L1b3f88.  goto L1b3f84;
}
procedure `boolean` `equals`(`java.lang.reflect.Type` v14 @kind object @name `a`, `java.lang.reflect.Type` v15 @kind object @name `b`) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L1b3f9c.  v10:= 1I;
  #L1b3f9e.  v11:= 0I;
  #L1b3fa0.  if v14 != v15 then goto L1b3fa8;
  #L1b3fa4.  v11:= v10;
  #L1b3fa6.  return v11;
  #L1b3fa8.  v12:= instanceof @variable v14 @type ^`java.lang.Class` @kind boolean;
  #L1b3fac.  if v12 == 0 then goto L1b3fba;
  #L1b3fb0.  call temp:= `equals`(v14, v15) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b3fb6.  v11:= temp;
  #L1b3fb8.  goto L1b3fa6;
  #L1b3fba.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b3fbe.  if v12 == 0 then goto L1b403a;
  #L1b3fc2.  v12:= instanceof @variable v15 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b3fc6.  if v12 == 0 then goto L1b3fa6;
  #L1b3fca.  v4:= v14 @kind object;
  #L1b3fcc.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L1b3fd0.  v5:= v15 @kind object;
  #L1b3fd2.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L1b3fd6.  call temp:= `getOwnerType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b3fdc.  v2:= temp @kind object;
  #L1b3fde.  call temp:= `getOwnerType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b3fe4.  v3:= temp @kind object;
  #L1b3fe6.  if v2 == v3 then goto L1b3ffa;
  #L1b3fea.  if v2 == 0 then goto L1b4036;
  #L1b3fee.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b3ff4.  v12:= temp;
  #L1b3ff6.  if v12 == 0 then goto L1b4036;
  #L1b3ffa.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b4000.  v12:= temp @kind object;
  #L1b4002.  call temp:= `getRawType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b4008.  v13:= temp @kind object;
  #L1b400a.  call temp:= `equals`(v12, v13) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b4010.  v12:= temp;
  #L1b4012.  if v12 == 0 then goto L1b4036;
  #L1b4016.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b401c.  v12:= temp @kind object;
  #L1b401e.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b4024.  v13:= temp @kind object;
  #L1b4026.  call temp:= `equals`(v12, v13) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1b402c.  v12:= temp;
  #L1b402e.  if v12 == 0 then goto L1b4036;
  #L1b4032.  v11:= v10;
  #L1b4034.  goto L1b3fa6;
  #L1b4036.  v10:= v11;
  #L1b4038.  goto L1b4032;
  #L1b403a.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b403e.  if v12 == 0 then goto L1b4070;
  #L1b4042.  v10:= instanceof @variable v15 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b4046.  if v10 == 0 then goto L1b3fa6;
  #L1b404a.  v0:= v14 @kind object;
  #L1b404c.  v0:= (`java.lang.reflect.GenericArrayType`) v0 @kind object;
  #L1b4050.  v1:= v15 @kind object;
  #L1b4052.  v1:= (`java.lang.reflect.GenericArrayType`) v1 @kind object;
  #L1b4056.  call temp:= `getGenericComponentType`(v0) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b405c.  v10:= temp @kind object;
  #L1b405e.  call temp:= `getGenericComponentType`(v1) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b4064.  v11:= temp @kind object;
  #L1b4066.  call temp:= `equals`(v10, v11) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b406c.  v11:= temp;
  #L1b406e.  goto L1b3fa6;
  #L1b4070.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b4074.  if v12 == 0 then goto L1b40ce;
  #L1b4078.  v12:= instanceof @variable v15 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b407c.  if v12 == 0 then goto L1b3fa6;
  #L1b4080.  v8:= v14 @kind object;
  #L1b4082.  v8:= (`java.lang.reflect.WildcardType`) v8 @kind object;
  #L1b4086.  v9:= v15 @kind object;
  #L1b4088.  v9:= (`java.lang.reflect.WildcardType`) v9 @kind object;
  #L1b408c.  call temp:= `getUpperBounds`(v8) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b4092.  v12:= temp @kind object;
  #L1b4094.  call temp:= `getUpperBounds`(v9) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b409a.  v13:= temp @kind object;
  #L1b409c.  call temp:= `equals`(v12, v13) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1b40a2.  v12:= temp;
  #L1b40a4.  if v12 == 0 then goto L1b40ca;
  #L1b40a8.  call temp:= `getLowerBounds`(v8) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b40ae.  v12:= temp @kind object;
  #L1b40b0.  call temp:= `getLowerBounds`(v9) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b40b6.  v13:= temp @kind object;
  #L1b40b8.  call temp:= `equals`(v12, v13) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1b40be.  v12:= temp;
  #L1b40c0.  if v12 == 0 then goto L1b40ca;
  #L1b40c4.  v11:= v10;
  #L1b40c6.  goto L1b3fa6;
  #L1b40ca.  v10:= v11;
  #L1b40cc.  goto L1b40c4;
  #L1b40ce.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b40d2.  if v12 == 0 then goto L1b3fa6;
  #L1b40d6.  v12:= instanceof @variable v15 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b40da.  if v12 == 0 then goto L1b3fa6;
  #L1b40de.  v6:= v14 @kind object;
  #L1b40e0.  v6:= (`java.lang.reflect.TypeVariable`) v6 @kind object;
  #L1b40e4.  v7:= v15 @kind object;
  #L1b40e6.  v7:= (`java.lang.reflect.TypeVariable`) v7 @kind object;
  #L1b40ea.  call temp:= `getGenericDeclaration`(v6) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L1b40f0.  v12:= temp @kind object;
  #L1b40f2.  call temp:= `getGenericDeclaration`(v7) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L1b40f8.  v13:= temp @kind object;
  #L1b40fa.  if v12 != v13 then goto L1b4120;
  #L1b40fe.  call temp:= `getName`(v6) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L1b4104.  v12:= temp @kind object;
  #L1b4106.  call temp:= `getName`(v7) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L1b410c.  v13:= temp @kind object;
  #L1b410e.  call temp:= `equals`(v12, v13) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b4114.  v12:= temp;
  #L1b4116.  if v12 == 0 then goto L1b4120;
  #L1b411a.  v11:= v10;
  #L1b411c.  goto L1b3fa6;
  #L1b4120.  v10:= v11;
  #L1b4122.  goto L1b411a;
}
procedure `java.lang.reflect.Type` `getCallResponseType`(`java.lang.reflect.Type` v2 @kind object @name `returnType`) @signature `Lretrofit2/Utils;.getCallResponseType:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1b4134.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b4138.  if v0 != 0 then goto L1b414c;
  #L1b413c.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b4140.  v1:= "Call return type must be parameterized as Call<Foo> or Call<? extends Foo>" @kind object;
  #L1b4144.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b414a.  throw v0;
  #L1b414c.  v0:= 0I;
  #L1b414e.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L1b4152.  call temp:= `getParameterUpperBound`(v0, v2) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1b4158.  v0:= temp @kind object;
  #L1b415a.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getGenericSupertype`(`java.lang.reflect.Type` v6 @kind object @name `context`, `java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b416c.  if v8 != v7 then goto L1b4172;
  #L1b4170.  return v6 @kind object;
  #L1b4172.  call temp:= `isInterface`(v8) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L1b4178.  v4:= temp;
  #L1b417a.  if v4 == 0 then goto L1b41d4;
  #L1b417e.  call temp:= `getInterfaces`(v7) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L1b4184.  v1:= temp @kind object;
  #L1b4186.  v0:= 0I;
  #L1b4188.  v2:= length @variable v1;
  #L1b418a.  if v0 >= v2 then goto L1b41d4;
  #L1b418e.  v4:= v1[v0] @kind object;
  #L1b4192.  if v4 != v8 then goto L1b41a4;
  #L1b4196.  call temp:= `getGenericInterfaces`(v7) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L1b419c.  v4:= temp @kind object;
  #L1b419e.  v6:= v4[v0] @kind object;
  #L1b41a2.  goto L1b4170;
  #L1b41a4.  v4:= v1[v0] @kind object;
  #L1b41a8.  call temp:= `isAssignableFrom`(v8, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1b41ae.  v4:= temp;
  #L1b41b0.  if v4 == 0 then goto L1b41ce;
  #L1b41b4.  call temp:= `getGenericInterfaces`(v7) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L1b41ba.  v4:= temp @kind object;
  #L1b41bc.  v4:= v4[v0] @kind object;
  #L1b41c0.  v5:= v1[v0] @kind object;
  #L1b41c4.  call temp:= `getGenericSupertype`(v4, v5, v8) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b41ca.  v6:= temp @kind object;
  #L1b41cc.  goto L1b4170;
  #L1b41ce.  v0:= v0 + 1;
  #L1b41d2.  goto L1b418a;
  #L1b41d4.  call temp:= `isInterface`(v7) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L1b41da.  v4:= temp;
  #L1b41dc.  if v4 != 0 then goto L1b4220;
  #L1b41e0.  v4:= constclass @type ^`java.lang.Object` @kind object;
  #L1b41e4.  if v7 == v4 then goto L1b4220;
  #L1b41e8.  call temp:= `getSuperclass`(v7) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L1b41ee.  v3:= temp @kind object;
  #L1b41f0.  if v3 != v8 then goto L1b41fe;
  #L1b41f4.  call temp:= `getGenericSuperclass`(v7) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L1b41fa.  v6:= temp @kind object;
  #L1b41fc.  goto L1b4170;
  #L1b41fe.  call temp:= `isAssignableFrom`(v8, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1b4204.  v4:= temp;
  #L1b4206.  if v4 == 0 then goto L1b421c;
  #L1b420a.  call temp:= `getGenericSuperclass`(v7) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L1b4210.  v4:= temp @kind object;
  #L1b4212.  call temp:= `getGenericSupertype`(v4, v3, v8) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b4218.  v6:= temp @kind object;
  #L1b421a.  goto L1b4170;
  #L1b421c.  v7:= v3 @kind object;
  #L1b421e.  goto L1b41e0;
  #L1b4220.  v6:= v8 @kind object;
  #L1b4222.  goto L1b4170;
}
procedure `java.lang.reflect.Type` `getParameterUpperBound`(`int` v5 @name `index`, `java.lang.reflect.ParameterizedType` v6 @kind object @name `type`) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b4234.  call temp:= `getActualTypeArguments`(v6) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b423a.  v1:= temp @kind object;
  #L1b423c.  if v5 < 0 then goto L1b4246;
  #L1b4240.  v2:= length @variable v1;
  #L1b4242.  if v5 < v2 then goto L1b42a2;
  #L1b4246.  v2:= new `java.lang.IllegalArgumentException`;
  #L1b424a.  v3:= new `java.lang.StringBuilder`;
  #L1b424e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b4254.  v4:= "Index " @kind object;
  #L1b4258.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b425e.  v3:= temp @kind object;
  #L1b4260.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b4266.  v3:= temp @kind object;
  #L1b4268.  v4:= " not in range [0," @kind object;
  #L1b426c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b4272.  v3:= temp @kind object;
  #L1b4274.  v4:= length @variable v1;
  #L1b4276.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b427c.  v3:= temp @kind object;
  #L1b427e.  v4:= ") for " @kind object;
  #L1b4282.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b4288.  v3:= temp @kind object;
  #L1b428a.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b4290.  v3:= temp @kind object;
  #L1b4292.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b4298.  v3:= temp @kind object;
  #L1b429a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b42a0.  throw v2;
  #L1b42a2.  v0:= v1[v5] @kind object;
  #L1b42a6.  v2:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b42aa.  if v2 == 0 then goto L1b42c0;
  #L1b42ae.  v0:= (`java.lang.reflect.WildcardType`) v0 @kind object;
  #L1b42b2.  call temp:= `getUpperBounds`(v0) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b42b8.  v2:= temp @kind object;
  #L1b42ba.  v3:= 0I;
  #L1b42bc.  v0:= v2[v3] @kind object;
  #L1b42c0.  return v0 @kind object;
}
procedure `java.lang.Class` `getRawType`(`java.lang.reflect.Type` v6 @kind object @name `type`) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b42d4.  v4:= 0I;
  #L1b42d6.  v3:= "type == null" @kind object;
  #L1b42da.  call temp:= `checkNotNull`(v6, v3) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b42e0.  v3:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L1b42e4.  if v3 == 0 then goto L1b42ee;
  #L1b42e8.  v6:= (`java.lang.Class`) v6 @kind object;
  #L1b42ec.  return v6 @kind object;
  #L1b42ee.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b42f2.  if v3 == 0 then goto L1b4320;
  #L1b42f6.  v1:= v6 @kind object;
  #L1b42f8.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L1b42fc.  call temp:= `getRawType`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b4302.  v2:= temp @kind object;
  #L1b4304.  v3:= instanceof @variable v2 @type ^`java.lang.Class` @kind boolean;
  #L1b4308.  if v3 != 0 then goto L1b4318;
  #L1b430c.  v3:= new `java.lang.IllegalArgumentException`;
  #L1b4310.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b4316.  throw v3;
  #L1b4318.  v2:= (`java.lang.Class`) v2 @kind object;
  #L1b431c.  v6:= v2 @kind object;
  #L1b431e.  goto L1b42ec;
  #L1b4320.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b4324.  if v3 == 0 then goto L1b434e;
  #L1b4328.  v6:= (`java.lang.reflect.GenericArrayType`) v6 @kind object;
  #L1b432c.  call temp:= `getGenericComponentType`(v6) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b4332.  v0:= temp @kind object;
  #L1b4334.  call temp:= `getRawType`(v0) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1b433a.  v3:= temp @kind object;
  #L1b433c.  call temp:= `newInstance`(v3, v4) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L1b4342.  v3:= temp @kind object;
  #L1b4344.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b434a.  v6:= temp @kind object;
  #L1b434c.  goto L1b42ec;
  #L1b434e.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b4352.  if v3 == 0 then goto L1b435c;
  #L1b4356.  v6:= constclass @type ^`java.lang.Object` @kind object;
  #L1b435a.  goto L1b42ec;
  #L1b435c.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b4360.  if v3 == 0 then goto L1b437e;
  #L1b4364.  v6:= (`java.lang.reflect.WildcardType`) v6 @kind object;
  #L1b4368.  call temp:= `getUpperBounds`(v6) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b436e.  v3:= temp @kind object;
  #L1b4370.  v3:= v3[v4] @kind object;
  #L1b4374.  call temp:= `getRawType`(v3) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1b437a.  v6:= temp @kind object;
  #L1b437c.  goto L1b42ec;
  #L1b437e.  v3:= new `java.lang.IllegalArgumentException`;
  #L1b4382.  v4:= new `java.lang.StringBuilder`;
  #L1b4386.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b438c.  v5:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L1b4390.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b4396.  v4:= temp @kind object;
  #L1b4398.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b439e.  v4:= temp @kind object;
  #L1b43a0.  v5:= "> is of type " @kind object;
  #L1b43a4.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b43aa.  v4:= temp @kind object;
  #L1b43ac.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b43b2.  v5:= temp @kind object;
  #L1b43b4.  call temp:= `getName`(v5) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b43ba.  v5:= temp @kind object;
  #L1b43bc.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b43c2.  v4:= temp @kind object;
  #L1b43c4.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b43ca.  v4:= temp @kind object;
  #L1b43cc.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b43d2.  throw v3;
}
procedure `java.lang.reflect.Type` `getSupertype`(`java.lang.reflect.Type` v1 @kind object @name `context`, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lretrofit2/Utils;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;

  #L1b43e4.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1b43ea.  v0:= temp;
  #L1b43ec.  if v0 != 0 then goto L1b43fc;
  #L1b43f0.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b43f4.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b43fa.  throw v0;
  #L1b43fc.  call temp:= `getGenericSupertype`(v1, v2, v3) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b4402.  v0:= temp @kind object;
  #L1b4404.  call temp:= `resolve`(v1, v2, v0) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b440a.  v0:= temp @kind object;
  #L1b440c.  return v0 @kind object;
}
procedure `boolean` `hasUnresolvableType`(`java.lang.reflect.Type` v9 @kind object @name `type`) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1b4420.  v4:= 1I;
  #L1b4422.  v3:= 0I;
  #L1b4424.  v5:= instanceof @variable v9 @type ^`java.lang.Class` @kind boolean;
  #L1b4428.  if v5 == 0 then goto L1b442e;
  #L1b442c.  return v3;
  #L1b442e.  v5:= instanceof @variable v9 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b4432.  if v5 == 0 then goto L1b4466;
  #L1b4436.  v1:= v9 @kind object;
  #L1b4438.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L1b443c.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b4442.  v6:= temp @kind object;
  #L1b4444.  v7:= length @variable v6;
  #L1b4446.  v5:= v3;
  #L1b4448.  if v5 >= v7 then goto L1b442c;
  #L1b444c.  v2:= v6[v5] @kind object;
  #L1b4450.  call temp:= `hasUnresolvableType`(v2) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b4456.  v8:= temp;
  #L1b4458.  if v8 == 0 then goto L1b4460;
  #L1b445c.  v3:= v4;
  #L1b445e.  goto L1b442c;
  #L1b4460.  v5:= v5 + 1;
  #L1b4464.  goto L1b4448;
  #L1b4466.  v3:= instanceof @variable v9 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b446a.  if v3 == 0 then goto L1b4484;
  #L1b446e.  v9:= (`java.lang.reflect.GenericArrayType`) v9 @kind object;
  #L1b4472.  call temp:= `getGenericComponentType`(v9) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b4478.  v3:= temp @kind object;
  #L1b447a.  call temp:= `hasUnresolvableType`(v3) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b4480.  v3:= temp;
  #L1b4482.  goto L1b442c;
  #L1b4484.  v3:= instanceof @variable v9 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b4488.  if v3 == 0 then goto L1b4490;
  #L1b448c.  v3:= v4;
  #L1b448e.  goto L1b442c;
  #L1b4490.  v3:= instanceof @variable v9 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b4494.  if v3 == 0 then goto L1b449c;
  #L1b4498.  v3:= v4;
  #L1b449a.  goto L1b442c;
  #L1b449c.  if v9 != 0 then goto L1b44ea;
  #L1b44a0.  v0:= "null" @kind object;
  #L1b44a4.  v3:= new `java.lang.IllegalArgumentException`;
  #L1b44a8.  v4:= new `java.lang.StringBuilder`;
  #L1b44ac.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b44b2.  v5:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L1b44b6.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b44bc.  v4:= temp @kind object;
  #L1b44be.  call temp:= `append`(v4, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b44c4.  v4:= temp @kind object;
  #L1b44c6.  v5:= "> is of type " @kind object;
  #L1b44ca.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b44d0.  v4:= temp @kind object;
  #L1b44d2.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b44d8.  v4:= temp @kind object;
  #L1b44da.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b44e0.  v4:= temp @kind object;
  #L1b44e2.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b44e8.  throw v3;
  #L1b44ea.  call temp:= `getClass`(v9) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b44f0.  v3:= temp @kind object;
  #L1b44f2.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b44f8.  v0:= temp @kind object;
  #L1b44fa.  goto L1b44a4;
}
procedure `int` `indexOf`(`java.lang.Object`[] v2 @kind object @name `array`, `java.lang.Object` v3 @kind object @name `toFind`) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1b450c.  v0:= 0I;
  #L1b450e.  v1:= length @variable v2;
  #L1b4510.  if v0 >= v1 then goto L1b452c;
  #L1b4514.  v1:= v2[v0] @kind object;
  #L1b4518.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b451e.  v1:= temp;
  #L1b4520.  if v1 == 0 then goto L1b4526;
  #L1b4524.  return v0;
  #L1b4526.  v0:= v0 + 1;
  #L1b452a.  goto L1b450e;
  #L1b452c.  v1:= new `java.util.NoSuchElementException`;
  #L1b4530.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L1b4536.  throw v1;
}
procedure `boolean` `isAnnotationPresent`(`java.lang.annotation.Annotation`[] v5 @kind object @name `annotations`, `java.lang.Class` v6 @kind object) @signature `Lretrofit2/Utils;.isAnnotationPresent:([Ljava/lang/annotation/Annotation;Ljava/lang/Class;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b4548.  v1:= 0I;
  #L1b454a.  v3:= length @variable v5;
  #L1b454c.  v2:= v1;
  #L1b454e.  if v2 >= v3 then goto L1b4564;
  #L1b4552.  v0:= v5[v2] @kind object;
  #L1b4556.  call temp:= `isInstance`(v6, v0) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b455c.  v4:= temp;
  #L1b455e.  if v4 == 0 then goto L1b4566;
  #L1b4562.  v1:= 1I;
  #L1b4564.  return v1;
  #L1b4566.  v2:= v2 + 1;
  #L1b456a.  goto L1b454e;
}
procedure `java.lang.reflect.Type` `resolve`(`java.lang.reflect.Type` v22 @kind object @name `context`, `java.lang.Class` v23 @kind object, `java.lang.reflect.Type` v24 @kind object @name `toResolve`) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L1b457c.  v0:= v24 @kind object;
  #L1b4580.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b4584.  v19:= v0;
  #L1b4588.  if v19 == 0 then goto L1b45ba;
  #L1b458c.  v17:= v24 @kind object;
  #L1b4590.  v17:= (`java.lang.reflect.TypeVariable`) v17 @kind object;
  #L1b4594.  v0:= v22 @kind object;
  #L1b4598.  v1:= v23 @kind object;
  #L1b459c.  v2:= v17 @kind object;
  #L1b45a0.  call temp:= `resolveTypeVariable`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @kind static;
  #L1b45a6.  v24:= temp @kind object;
  #L1b45a8.  v0:= v24 @kind object;
  #L1b45ac.  v1:= v17 @kind object;
  #L1b45b0.  if v0 != v1 then goto L1b457c;
  #L1b45b4.  v10:= v24 @kind object;
  #L1b45b8.  return v10 @kind object;
  #L1b45ba.  v0:= v24 @kind object;
  #L1b45be.  v0:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L1b45c2.  v19:= v0;
  #L1b45c6.  if v19 == 0 then goto L1b4612;
  #L1b45ca.  v19:= v24 @kind object;
  #L1b45ce.  v19:= (`java.lang.Class`) v19 @kind object;
  #L1b45d2.  call temp:= `isArray`(v19) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1b45d8.  v19:= temp;
  #L1b45da.  if v19 == 0 then goto L1b4612;
  #L1b45de.  v11:= v24 @kind object;
  #L1b45e2.  v11:= (`java.lang.Class`) v11 @kind object;
  #L1b45e6.  call temp:= `getComponentType`(v11) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1b45ec.  v5:= temp @kind object;
  #L1b45ee.  v0:= v22 @kind object;
  #L1b45f2.  v1:= v23 @kind object;
  #L1b45f6.  call temp:= `resolve`(v0, v1, v5) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b45fc.  v8:= temp @kind object;
  #L1b45fe.  if v5 != v8 then goto L1b4606;
  #L1b4602.  v10:= v11 @kind object;
  #L1b4604.  goto L1b45b8;
  #L1b4606.  v11:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L1b460a.  call `<init>`(v11, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b4610.  goto L1b4602;
  #L1b4612.  v0:= v24 @kind object;
  #L1b4616.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b461a.  v19:= v0;
  #L1b461e.  if v19 == 0 then goto L1b4652;
  #L1b4622.  v10:= v24 @kind object;
  #L1b4626.  v10:= (`java.lang.reflect.GenericArrayType`) v10 @kind object;
  #L1b462a.  call temp:= `getGenericComponentType`(v10) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b4630.  v5:= temp @kind object;
  #L1b4632.  v0:= v22 @kind object;
  #L1b4636.  v1:= v23 @kind object;
  #L1b463a.  call temp:= `resolve`(v0, v1, v5) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b4640.  v8:= temp @kind object;
  #L1b4642.  if v5 == v8 then goto L1b45b8;
  #L1b4646.  v10:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L1b464a.  call `<init>`(v10, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b4650.  goto L1b45b8;
  #L1b4652.  v0:= v24 @kind object;
  #L1b4656.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b465a.  v19:= v0;
  #L1b465e.  if v19 == 0 then goto L1b4708;
  #L1b4662.  v10:= v24 @kind object;
  #L1b4666.  v10:= (`java.lang.reflect.ParameterizedType`) v10 @kind object;
  #L1b466a.  call temp:= `getOwnerType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b4670.  v14:= temp @kind object;
  #L1b4672.  v0:= v22 @kind object;
  #L1b4676.  v1:= v23 @kind object;
  #L1b467a.  call temp:= `resolve`(v0, v1, v14) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b4680.  v9:= temp @kind object;
  #L1b4682.  if v9 == v14 then goto L1b46de;
  #L1b4686.  v4:= 1I;
  #L1b4688.  call temp:= `getActualTypeArguments`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b468e.  v3:= temp @kind object;
  #L1b4690.  v16:= 0I;
  #L1b4694.  v6:= length @variable v3;
  #L1b4696.  v0:= v16;
  #L1b469a.  if v0 >= v6 then goto L1b46e2;
  #L1b469e.  v19:= v3[v16] @kind object;
  #L1b46a2.  v0:= v22 @kind object;
  #L1b46a6.  v1:= v23 @kind object;
  #L1b46aa.  v2:= v19 @kind object;
  #L1b46ae.  call temp:= `resolve`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b46b4.  v15:= temp @kind object;
  #L1b46b6.  v19:= v3[v16] @kind object;
  #L1b46ba.  v0:= v19 @kind object;
  #L1b46be.  if v15 == v0 then goto L1b46d8;
  #L1b46c2.  if v4 != 0 then goto L1b46d4;
  #L1b46c6.  call temp:= `clone`(v3) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1b46cc.  v3:= temp @kind object;
  #L1b46ce.  v3:= (`java.lang.reflect.Type`[]) v3 @kind object;
  #L1b46d2.  v4:= 1I;
  #L1b46d4.  v3[v16]:= v15 @kind object;
  #L1b46d8.  v16:= v16 + 1;
  #L1b46dc.  goto L1b4696;
  #L1b46de.  v4:= 0I;
  #L1b46e0.  goto L1b4688;
  #L1b46e2.  if v4 == 0 then goto L1b45b8;
  #L1b46e6.  v19:= new `retrofit2.Utils$ParameterizedTypeImpl`;
  #L1b46ea.  call temp:= `getRawType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b46f0.  v20:= temp @kind object;
  #L1b46f2.  v0:= v19 @kind object;
  #L1b46f6.  v1:= v20 @kind object;
  #L1b46fa.  call `<init>`(v0, v9, v1, v3) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b4700.  v10:= v19 @kind object;
  #L1b4704.  goto L1b45b8;
  #L1b4708.  v0:= v24 @kind object;
  #L1b470c.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b4710.  v19:= v0;
  #L1b4714.  if v19 == 0 then goto L1b4834;
  #L1b4718.  v10:= v24 @kind object;
  #L1b471c.  v10:= (`java.lang.reflect.WildcardType`) v10 @kind object;
  #L1b4720.  call temp:= `getLowerBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b4726.  v12:= temp @kind object;
  #L1b4728.  call temp:= `getUpperBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b472e.  v13:= temp @kind object;
  #L1b4730.  v0:= length @variable v12;
  #L1b4732.  v19:= v0;
  #L1b4736.  v20:= 1I;
  #L1b473a.  v0:= v19;
  #L1b473e.  v1:= v20;
  #L1b4742.  if v0 != v1 then goto L1b47bc;
  #L1b4746.  v19:= 0I;
  #L1b474a.  v19:= v12[v19] @kind object;
  #L1b474e.  v0:= v22 @kind object;
  #L1b4752.  v1:= v23 @kind object;
  #L1b4756.  v2:= v19 @kind object;
  #L1b475a.  call temp:= `resolve`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b4760.  v7:= temp @kind object;
  #L1b4762.  v19:= 0I;
  #L1b4766.  v19:= v12[v19] @kind object;
  #L1b476a.  v0:= v19 @kind object;
  #L1b476e.  if v7 == v0 then goto L1b45b8;
  #L1b4772.  v10:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L1b4776.  v19:= 1I;
  #L1b477a.  v0:= v19;
  #L1b477e.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b4782.  v19:= v0 @kind object;
  #L1b4786.  v20:= 0I;
  #L1b478a.  v21:= constclass @type ^`java.lang.Object` @kind object;
  #L1b478e.  v19[v20]:= v21 @kind object;
  #L1b4792.  v20:= 1I;
  #L1b4796.  v0:= v20;
  #L1b479a.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b479e.  v20:= v0 @kind object;
  #L1b47a2.  v21:= 0I;
  #L1b47a6.  v20[v21]:= v7 @kind object;
  #L1b47aa.  v0:= v19 @kind object;
  #L1b47ae.  v1:= v20 @kind object;
  #L1b47b2.  call `<init>`(v10, v0, v1) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b47b8.  goto L1b45b8;
  #L1b47bc.  v0:= length @variable v13;
  #L1b47be.  v19:= v0;
  #L1b47c2.  v20:= 1I;
  #L1b47c6.  v0:= v19;
  #L1b47ca.  v1:= v20;
  #L1b47ce.  if v0 != v1 then goto L1b45b8;
  #L1b47d2.  v19:= 0I;
  #L1b47d6.  v19:= v13[v19] @kind object;
  #L1b47da.  v0:= v22 @kind object;
  #L1b47de.  v1:= v23 @kind object;
  #L1b47e2.  v2:= v19 @kind object;
  #L1b47e6.  call temp:= `resolve`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b47ec.  v18:= temp @kind object;
  #L1b47ee.  v19:= 0I;
  #L1b47f2.  v19:= v13[v19] @kind object;
  #L1b47f6.  v0:= v18 @kind object;
  #L1b47fa.  v1:= v19 @kind object;
  #L1b47fe.  if v0 == v1 then goto L1b45b8;
  #L1b4802.  v10:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L1b4806.  v19:= 1I;
  #L1b480a.  v0:= v19;
  #L1b480e.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b4812.  v19:= v0 @kind object;
  #L1b4816.  v20:= 0I;
  #L1b481a.  v19[v20]:= v18 @kind object;
  #L1b481e.  v20:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b4822.  v0:= v19 @kind object;
  #L1b4826.  v1:= v20 @kind object;
  #L1b482a.  call `<init>`(v10, v0, v1) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b4830.  goto L1b45b8;
  #L1b4834.  v10:= v24 @kind object;
  #L1b4838.  goto L1b45b8;
}
procedure `java.lang.reflect.Type` `resolveTypeVariable`(`java.lang.reflect.Type` v4 @kind object @name `context`, `java.lang.Class` v5 @kind object, `java.lang.reflect.TypeVariable` v6 @kind object) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b484c.  call temp:= `declaringClassOf`(v6) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @kind static;
  #L1b4852.  v1:= temp @kind object;
  #L1b4854.  if v1 != 0 then goto L1b485a;
  #L1b4858.  return v6 @kind object;
  #L1b485a.  call temp:= `getGenericSupertype`(v4, v5, v1) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b4860.  v0:= temp @kind object;
  #L1b4862.  v3:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b4866.  if v3 == 0 then goto L1b4858;
  #L1b486a.  call temp:= `getTypeParameters`(v1) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L1b4870.  v3:= temp @kind object;
  #L1b4872.  call temp:= `indexOf`(v3, v6) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L1b4878.  v2:= temp;
  #L1b487a.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L1b487e.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b4884.  v3:= temp @kind object;
  #L1b4886.  v6:= v3[v2] @kind object;
  #L1b488a.  goto L1b4858;
}
procedure `void` `throwIfFatal`(`java.lang.Throwable` v1 @kind object @name `t`) @signature `Lretrofit2/Utils;.throwIfFatal:(Ljava/lang/Throwable;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L1b489c.  v0:= instanceof @variable v1 @type ^`java.lang.VirtualMachineError` @kind boolean;
  #L1b48a0.  if v0 == 0 then goto L1b48aa;
  #L1b48a4.  v1:= (`java.lang.VirtualMachineError`) v1 @kind object;
  #L1b48a8.  throw v1;
  #L1b48aa.  v0:= instanceof @variable v1 @type ^`java.lang.ThreadDeath` @kind boolean;
  #L1b48ae.  if v0 == 0 then goto L1b48b8;
  #L1b48b2.  v1:= (`java.lang.ThreadDeath`) v1 @kind object;
  #L1b48b6.  throw v1;
  #L1b48b8.  v0:= instanceof @variable v1 @type ^`java.lang.LinkageError` @kind boolean;
  #L1b48bc.  if v0 == 0 then goto L1b48c6;
  #L1b48c0.  v1:= (`java.lang.LinkageError`) v1 @kind object;
  #L1b48c4.  throw v1;
  #L1b48c6.  return @kind void;
}
procedure `java.lang.String` `typeToString`(`java.lang.reflect.Type` v1 @kind object @name `type`) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;

  #L1b48d8.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L1b48dc.  if v0 == 0 then goto L1b48ee;
  #L1b48e0.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1b48e4.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b48ea.  v0:= temp @kind object;
  #L1b48ec.  return v0 @kind object;
  #L1b48ee.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b48f4.  v0:= temp @kind object;
  #L1b48f6.  goto L1b48ec;
}
procedure `void` `validateServiceInterface`(`java.lang.Class` v2 @kind object) @signature `Lretrofit2/Utils;.validateServiceInterface:(Ljava/lang/Class;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1b4908.  call temp:= `isInterface`(v2) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L1b490e.  v0:= temp;
  #L1b4910.  if v0 != 0 then goto L1b4924;
  #L1b4914.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b4918.  v1:= "API declarations must be interfaces." @kind object;
  #L1b491c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b4922.  throw v0;
  #L1b4924.  call temp:= `getInterfaces`(v2) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L1b492a.  v0:= temp @kind object;
  #L1b492c.  v0:= length @variable v0;
  #L1b492e.  if v0 <= 0 then goto L1b4942;
  #L1b4932.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b4936.  v1:= "API interfaces must not extend other interfaces." @kind object;
  #L1b493a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b4940.  throw v0;
  #L1b4942.  return @kind void;
}
