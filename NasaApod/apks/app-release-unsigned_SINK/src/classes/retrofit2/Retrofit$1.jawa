record `retrofit2.Retrofit$1` @kind class @AccessFlag  extends `java.lang.reflect.InvocationHandler` @kind interface {
  `retrofit2.Platform` `retrofit2.Retrofit$1.platform` @AccessFlag PRIVATE_FINAL;
  `retrofit2.Retrofit` `retrofit2.Retrofit$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `java.lang.Class` `retrofit2.Retrofit$1.val$service` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit2.Retrofit$1` v1 @kind this, `retrofit2.Retrofit` v2 @kind object @name `this$0`, `java.lang.Class` v3 @kind object) @signature `Lretrofit2/Retrofit$1;.<init>:(Lretrofit2/Retrofit;Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1b0ba4.  v1.`retrofit2.Retrofit$1.this$0` @type ^`retrofit2.Retrofit` := v2 @kind object;
  #L1b0ba8.  v1.`retrofit2.Retrofit$1.val$service` @type ^`java.lang.Class` := v3 @kind object;
  #L1b0bac.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b0bb2.  call temp:= `get`() @signature `Lretrofit2/Platform;.get:()Lretrofit2/Platform;` @kind static;
  #L1b0bb8.  v0:= temp @kind object;
  #L1b0bba.  v1.`retrofit2.Retrofit$1.platform` @type ^`retrofit2.Platform` := v0 @kind object;
  #L1b0bbe.  return @kind void;
}
procedure `java.lang.Object` `invoke`(`retrofit2.Retrofit$1` v4 @kind this, `java.lang.Object` v5 @kind object @name `proxy`, `java.lang.reflect.Method` v6 @kind object @name `method`, `java.lang.Object`[] v7 @kind object @name `args`) @signature `Lretrofit2/Retrofit$1;.invoke:(Ljava/lang/Object;Ljava/lang/reflect/Method;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b0bd0.  call temp:= `getDeclaringClass`(v6) @signature `Ljava/lang/reflect/Method;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L1b0bd6.  v2:= temp @kind object;
  #L1b0bd8.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L1b0bdc.  if v2 != v3 then goto L1b0bea;
  #L1b0be0.  call temp:= `invoke`(v6, v4, v7) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1b0be6.  v2:= temp @kind object;
  #L1b0be8.  return v2 @kind object;
  #L1b0bea.  v2:= v4.`retrofit2.Retrofit$1.platform` @type ^`retrofit2.Platform` @kind object;
  #L1b0bee.  call temp:= `isDefaultMethod`(v2, v6) @signature `Lretrofit2/Platform;.isDefaultMethod:(Ljava/lang/reflect/Method;)Z` @kind virtual;
  #L1b0bf4.  v2:= temp;
  #L1b0bf6.  if v2 == 0 then goto L1b0c0c;
  #L1b0bfa.  v2:= v4.`retrofit2.Retrofit$1.platform` @type ^`retrofit2.Platform` @kind object;
  #L1b0bfe.  v3:= v4.`retrofit2.Retrofit$1.val$service` @type ^`java.lang.Class` @kind object;
  #L1b0c02.  call temp:= `invokeDefaultMethod`(v2, v6, v3, v5, v7) @signature `Lretrofit2/Platform;.invokeDefaultMethod:(Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1b0c08.  v2:= temp @kind object;
  #L1b0c0a.  goto L1b0be8;
  #L1b0c0c.  v2:= v4.`retrofit2.Retrofit$1.this$0` @type ^`retrofit2.Retrofit` @kind object;
  #L1b0c10.  call temp:= `loadServiceMethod`(v2, v6) @signature `Lretrofit2/Retrofit;.loadServiceMethod:(Ljava/lang/reflect/Method;)Lretrofit2/ServiceMethod;` @kind virtual;
  #L1b0c16.  v1:= temp @kind object;
  #L1b0c18.  v0:= new `retrofit2.OkHttpCall`;
  #L1b0c1c.  call `<init>`(v0, v1, v7) @signature `Lretrofit2/OkHttpCall;.<init>:(Lretrofit2/ServiceMethod;[Ljava/lang/Object;)V` @kind direct;
  #L1b0c22.  call temp:= `adapt`(v1, v0) @signature `Lretrofit2/ServiceMethod;.adapt:(Lretrofit2/Call;)Ljava/lang/Object;` @kind virtual;
  #L1b0c28.  v2:= temp @kind object;
  #L1b0c2a.  goto L1b0be8;
}
