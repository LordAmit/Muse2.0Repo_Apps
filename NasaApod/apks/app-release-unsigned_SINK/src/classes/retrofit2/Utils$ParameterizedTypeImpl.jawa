record `retrofit2.Utils$ParameterizedTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.ownerType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.rawType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$ParameterizedTypeImpl` v5 @kind this, `java.lang.reflect.Type` v6 @kind object @name `ownerType`, `java.lang.reflect.Type` v7 @kind object @name `rawType`, `java.lang.reflect.Type`[] v8 @kind object @name `typeArguments`) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b3a70.  v3:= 1I;
  #L1b3a72.  v4:= 0I;
  #L1b3a74.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b3a7a.  v1:= instanceof @variable v7 @type ^`java.lang.Class` @kind boolean;
  #L1b3a7e.  if v1 == 0 then goto L1b3ab2;
  #L1b3a82.  if v6 != 0 then goto L1b3aaa;
  #L1b3a86.  v2:= v3;
  #L1b3a88.  v1:= v7 @kind object;
  #L1b3a8a.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1b3a8e.  call temp:= `getEnclosingClass`(v1) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L1b3a94.  v1:= temp @kind object;
  #L1b3a96.  if v1 != 0 then goto L1b3aae;
  #L1b3a9a.  if v2 == v3 then goto L1b3ab2;
  #L1b3a9e.  v1:= new `java.lang.IllegalArgumentException`;
  #L1b3aa2.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b3aa8.  throw v1;
  #L1b3aaa.  v2:= v4;
  #L1b3aac.  goto L1b3a88;
  #L1b3aae.  v3:= v4;
  #L1b3ab0.  goto L1b3a9a;
  #L1b3ab2.  v1:= length @variable v8;
  #L1b3ab4.  if v4 >= v1 then goto L1b3ad2;
  #L1b3ab8.  v0:= v8[v4] @kind object;
  #L1b3abc.  v2:= "typeArgument == null" @kind object;
  #L1b3ac0.  call temp:= `checkNotNull`(v0, v2) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b3ac6.  call `checkNotPrimitive`(v0) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1b3acc.  v4:= v4 + 1;
  #L1b3ad0.  goto L1b3ab4;
  #L1b3ad2.  v5.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L1b3ad6.  v5.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` := v7 @kind object;
  #L1b3ada.  call temp:= `clone`(v8) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1b3ae0.  v1:= temp @kind object;
  #L1b3ae2.  v1:= (`java.lang.reflect.Type`[]) v1 @kind object;
  #L1b3ae6.  v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] := v1 @kind object;
  #L1b3aea.  return @kind void;
}
procedure `boolean` `equals`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object @name `other`) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b3afc.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b3b00.  if v0 == 0 then goto L1b3b18;
  #L1b3b04.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L1b3b08.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b3b0e.  v0:= temp;
  #L1b3b10.  if v0 == 0 then goto L1b3b18;
  #L1b3b14.  v0:= 1I;
  #L1b3b16.  return v0;
  #L1b3b18.  v0:= 0I;
  #L1b3b1a.  goto L1b3b16;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b3b2c.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b3b30.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1b3b36.  v0:= temp @kind object;
  #L1b3b38.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L1b3b3c.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b3b50.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3b54.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b3b68.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3b6c.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$ParameterizedTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b3b80.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b3b84.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L1b3b8a.  v0:= temp;
  #L1b3b8c.  v1:= v2.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3b90.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b3b96.  v1:= temp;
  #L1b3b98.  v1:= v1 ^~ v0 @kind int;
  #L1b3b9a.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3b9e.  if v0 == 0 then goto L1b3bb2;
  #L1b3ba2.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3ba6.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b3bac.  v0:= temp;
  #L1b3bae.  v0:= v0 ^~ v1 @kind int;
  #L1b3bb0.  return v0;
  #L1b3bb2.  v0:= 0I;
  #L1b3bb4.  goto L1b3bae;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$ParameterizedTypeImpl` v5 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b3bc8.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b3bcc.  v2:= length @variable v2;
  #L1b3bce.  if v2 != 0 then goto L1b3be0;
  #L1b3bd2.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3bd6.  call temp:= `typeToString`(v2) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b3bdc.  v2:= temp @kind object;
  #L1b3bde.  return v2 @kind object;
  #L1b3be0.  v1:= new `java.lang.StringBuilder`;
  #L1b3be4.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b3be8.  v2:= length @variable v2;
  #L1b3bea.  v2:= v2 + 1;
  #L1b3bee.  v2:= v2 * 30;
  #L1b3bf2.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1b3bf8.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3bfc.  call temp:= `typeToString`(v2) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b3c02.  v2:= temp @kind object;
  #L1b3c04.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3c0a.  v2:= "<" @kind object;
  #L1b3c0e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3c14.  v2:= temp @kind object;
  #L1b3c16.  v3:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b3c1a.  v4:= 0I;
  #L1b3c1c.  v3:= v3[v4] @kind object;
  #L1b3c20.  call temp:= `typeToString`(v3) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b3c26.  v3:= temp @kind object;
  #L1b3c28.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3c2e.  v0:= 1I;
  #L1b3c30.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b3c34.  v2:= length @variable v2;
  #L1b3c36.  if v0 >= v2 then goto L1b3c62;
  #L1b3c3a.  v2:= ", " @kind object;
  #L1b3c3e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3c44.  v2:= temp @kind object;
  #L1b3c46.  v3:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b3c4a.  v3:= v3[v0] @kind object;
  #L1b3c4e.  call temp:= `typeToString`(v3) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b3c54.  v3:= temp @kind object;
  #L1b3c56.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3c5c.  v0:= v0 + 1;
  #L1b3c60.  goto L1b3c30;
  #L1b3c62.  v2:= ">" @kind object;
  #L1b3c66.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3c6c.  v2:= temp @kind object;
  #L1b3c6e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b3c74.  v2:= temp @kind object;
  #L1b3c76.  goto L1b3bde;
}
