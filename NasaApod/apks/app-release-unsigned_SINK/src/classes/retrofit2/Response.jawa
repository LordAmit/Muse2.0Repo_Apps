record `retrofit2.Response` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Object` `retrofit2.Response.body` @AccessFlag PRIVATE_FINAL;
  `okhttp3.ResponseBody` `retrofit2.Response.errorBody` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Response` `retrofit2.Response.rawResponse` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Response` v0 @kind this, `okhttp3.Response` v1 @kind object @name `rawResponse`, `java.lang.Object` v2 @kind object, `okhttp3.ResponseBody` v3 @kind object @name `errorBody`) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1b0858.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b085e.  v0.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` := v1 @kind object;
  #L1b0862.  v0.`retrofit2.Response.body` @type ^`java.lang.Object` := v2 @kind object;
  #L1b0866.  v0.`retrofit2.Response.errorBody` @type ^`okhttp3.ResponseBody` := v3 @kind object;
  #L1b086a.  return @kind void;
}
procedure `retrofit2.Response` `error`(`int` v3 @name `code`, `okhttp3.ResponseBody` v4 @kind object @name `body`) @signature `Lretrofit2/Response;.error:(ILokhttp3/ResponseBody;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1b087c.  v0:= 400I;
  #L1b0880.  if v3 >= v0 then goto L1b08b6;
  #L1b0884.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b0888.  v1:= new `java.lang.StringBuilder`;
  #L1b088c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b0892.  v2:= "code < 400: " @kind object;
  #L1b0896.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b089c.  v1:= temp @kind object;
  #L1b089e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b08a4.  v1:= temp @kind object;
  #L1b08a6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b08ac.  v1:= temp @kind object;
  #L1b08ae.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b08b4.  throw v0;
  #L1b08b6.  v0:= new `okhttp3.Response$Builder`;
  #L1b08ba.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L1b08c0.  call temp:= `code`(v0, v3) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b08c6.  v0:= temp @kind object;
  #L1b08c8.  v1:= "Response.error()" @kind object;
  #L1b08cc.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b08d2.  v0:= temp @kind object;
  #L1b08d4.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L1b08d8.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b08de.  v0:= temp @kind object;
  #L1b08e0.  v1:= new `okhttp3.Request$Builder`;
  #L1b08e4.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L1b08ea.  v2:= "http://localhost/" @kind object;
  #L1b08ee.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1b08f4.  v1:= temp @kind object;
  #L1b08f6.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1b08fc.  v1:= temp @kind object;
  #L1b08fe.  call temp:= `request`(v0, v1) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b0904.  v0:= temp @kind object;
  #L1b0906.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1b090c.  v0:= temp @kind object;
  #L1b090e.  call temp:= `error`(v4, v0) @signature `Lretrofit2/Response;.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L1b0914.  v0:= temp @kind object;
  #L1b0916.  return v0 @kind object;
}
procedure `retrofit2.Response` `error`(`okhttp3.ResponseBody` v2 @kind object @name `body`, `okhttp3.Response` v3 @kind object @name `rawResponse`) @signature `Lretrofit2/Response;.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1b0928.  v0:= "body == null" @kind object;
  #L1b092c.  call temp:= `checkNotNull`(v2, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0932.  v0:= "rawResponse == null" @kind object;
  #L1b0936.  call temp:= `checkNotNull`(v3, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b093c.  call temp:= `isSuccessful`(v3) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L1b0942.  v0:= temp;
  #L1b0944.  if v0 == 0 then goto L1b0958;
  #L1b0948.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b094c.  v1:= "rawResponse should not be successful response" @kind object;
  #L1b0950.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0956.  throw v0;
  #L1b0958.  v0:= new `retrofit2.Response`;
  #L1b095c.  v1:= 0I;
  #L1b095e.  call `<init>`(v0, v3, v1, v2) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @kind direct;
  #L1b0964.  return v0 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v3 @kind object) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1b0978.  v0:= new `okhttp3.Response$Builder`;
  #L1b097c.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L1b0982.  v1:= 200I;
  #L1b0986.  call temp:= `code`(v0, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b098c.  v0:= temp @kind object;
  #L1b098e.  v1:= "OK" @kind object;
  #L1b0992.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b0998.  v0:= temp @kind object;
  #L1b099a.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L1b099e.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b09a4.  v0:= temp @kind object;
  #L1b09a6.  v1:= new `okhttp3.Request$Builder`;
  #L1b09aa.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L1b09b0.  v2:= "http://localhost/" @kind object;
  #L1b09b4.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1b09ba.  v1:= temp @kind object;
  #L1b09bc.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1b09c2.  v1:= temp @kind object;
  #L1b09c4.  call temp:= `request`(v0, v1) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b09ca.  v0:= temp @kind object;
  #L1b09cc.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1b09d2.  v0:= temp @kind object;
  #L1b09d4.  call temp:= `success`(v3, v0) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L1b09da.  v0:= temp @kind object;
  #L1b09dc.  return v0 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v3 @kind object, `okhttp3.Headers` v4 @kind object @name `headers`) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Headers;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1b09f0.  v0:= "headers == null" @kind object;
  #L1b09f4.  call temp:= `checkNotNull`(v4, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b09fa.  v0:= new `okhttp3.Response$Builder`;
  #L1b09fe.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L1b0a04.  v1:= 200I;
  #L1b0a08.  call temp:= `code`(v0, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b0a0e.  v0:= temp @kind object;
  #L1b0a10.  v1:= "OK" @kind object;
  #L1b0a14.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b0a1a.  v0:= temp @kind object;
  #L1b0a1c.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L1b0a20.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b0a26.  v0:= temp @kind object;
  #L1b0a28.  call temp:= `headers`(v0, v4) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b0a2e.  v0:= temp @kind object;
  #L1b0a30.  v1:= new `okhttp3.Request$Builder`;
  #L1b0a34.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L1b0a3a.  v2:= "http://localhost/" @kind object;
  #L1b0a3e.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1b0a44.  v1:= temp @kind object;
  #L1b0a46.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1b0a4c.  v1:= temp @kind object;
  #L1b0a4e.  call temp:= `request`(v0, v1) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1b0a54.  v0:= temp @kind object;
  #L1b0a56.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1b0a5c.  v0:= temp @kind object;
  #L1b0a5e.  call temp:= `success`(v3, v0) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L1b0a64.  v0:= temp @kind object;
  #L1b0a66.  return v0 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v2 @kind object, `okhttp3.Response` v3 @kind object @name `rawResponse`) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1b0a78.  v0:= "rawResponse == null" @kind object;
  #L1b0a7c.  call temp:= `checkNotNull`(v3, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0a82.  call temp:= `isSuccessful`(v3) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L1b0a88.  v0:= temp;
  #L1b0a8a.  if v0 != 0 then goto L1b0a9e;
  #L1b0a8e.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b0a92.  v1:= "rawResponse must be successful response" @kind object;
  #L1b0a96.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0a9c.  throw v0;
  #L1b0a9e.  v0:= new `retrofit2.Response`;
  #L1b0aa2.  v1:= 0I;
  #L1b0aa4.  call `<init>`(v0, v3, v2, v1) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @kind direct;
  #L1b0aaa.  return v0 @kind object;
}
procedure `java.lang.Object` `body`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.body:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0abc.  v0:= v1.`retrofit2.Response.body` @type ^`java.lang.Object` @kind object;
  #L1b0ac0.  return v0 @kind object;
}
procedure `int` `code`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.code:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0ad4.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1b0ad8.  call temp:= `code`(v0) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L1b0ade.  v0:= temp;
  #L1b0ae0.  return v0;
}
procedure `okhttp3.ResponseBody` `errorBody`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.errorBody:()Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0af4.  v0:= v1.`retrofit2.Response.errorBody` @type ^`okhttp3.ResponseBody` @kind object;
  #L1b0af8.  return v0 @kind object;
}
procedure `okhttp3.Headers` `headers`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.headers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0b0c.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1b0b10.  call temp:= `headers`(v0) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L1b0b16.  v0:= temp @kind object;
  #L1b0b18.  return v0 @kind object;
}
procedure `boolean` `isSuccessful`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.isSuccessful:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0b2c.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1b0b30.  call temp:= `isSuccessful`(v0) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L1b0b36.  v0:= temp;
  #L1b0b38.  return v0;
}
procedure `java.lang.String` `message`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.message:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0b4c.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1b0b50.  call temp:= `message`(v0) @signature `Lokhttp3/Response;.message:()Ljava/lang/String;` @kind virtual;
  #L1b0b56.  v0:= temp @kind object;
  #L1b0b58.  return v0 @kind object;
}
procedure `okhttp3.Response` `raw`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.raw:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0b6c.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1b0b70.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0b84.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1b0b88.  call temp:= `toString`(v0) @signature `Lokhttp3/Response;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0b8e.  v0:= temp @kind object;
  #L1b0b90.  return v0 @kind object;
}
