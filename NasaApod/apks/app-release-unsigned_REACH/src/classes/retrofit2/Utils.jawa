record `retrofit2.Utils` @kind class @AccessFlag FINAL {
}
global `java.lang.reflect.Type`[] `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/Utils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b2694.  v0:= 0I;
  #L1b2696.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b269a.  `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L1b269e.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Utils` v0 @kind this) @signature `Lretrofit2/Utils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1b26b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b26b6.  return @kind void;
}
procedure `okhttp3.ResponseBody` `buffer`(`okhttp3.ResponseBody` v4 @kind object @name `body`) @signature `Lretrofit2/Utils;.buffer:(Lokhttp3/ResponseBody;)Lokhttp3/ResponseBody;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b26c8.  v0:= new `okio.Buffer`;
  #L1b26cc.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1b26d2.  call temp:= `source`(v4) @signature `Lokhttp3/ResponseBody;.source:()Lokio/BufferedSource;` @kind virtual;
  #L1b26d8.  v1:= temp @kind object;
  #L1b26da.  call temp:= `readAll`(v1, v0) @signature `Lokio/BufferedSource;.readAll:(Lokio/Sink;)J` @kind interface;
  #L1b26e0.  call temp:= `contentType`(v4) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L1b26e6.  v1:= temp @kind object;
  #L1b26e8.  call temp:= `contentLength`(v4) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L1b26ee.  v2:= temp @kind wide;
  #L1b26f0.  call temp:= `create`(v1, v2, v0) @signature `Lokhttp3/ResponseBody;.create:(Lokhttp3/MediaType;JLokio/BufferedSource;)Lokhttp3/ResponseBody;` @kind static;
  #L1b26f6.  v1:= temp @kind object;
  #L1b26f8.  return v1 @kind object;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object @name `message`) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;
    v0;

  #L1b270c.  if v1 != 0 then goto L1b271c;
  #L1b2710.  v0:= new `java.lang.NullPointerException`;
  #L1b2714.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b271a.  throw v0;
  #L1b271c.  return v1 @kind object;
}
procedure `void` `checkNotPrimitive`(`java.lang.reflect.Type` v1 @kind object @name `type`) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L1b2730.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L1b2734.  if v0 == 0 then goto L1b2754;
  #L1b2738.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1b273c.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L1b2742.  v0:= temp;
  #L1b2744.  if v0 == 0 then goto L1b2754;
  #L1b2748.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b274c.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b2752.  throw v0;
  #L1b2754.  return @kind void;
}
procedure `java.lang.Class` `declaringClassOf`(`java.lang.reflect.TypeVariable` v2 @kind object) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1b2768.  call temp:= `getGenericDeclaration`(v2) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L1b276e.  v0:= temp @kind object;
  #L1b2770.  v1:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L1b2774.  if v1 == 0 then goto L1b277e;
  #L1b2778.  v0:= (`java.lang.Class`) v0 @kind object;
  #L1b277c.  return v0 @kind object;
  #L1b277e.  v0:= 0I;
  #L1b2780.  goto L1b277c;
}
procedure `boolean` `equals`(`java.lang.reflect.Type` v14 @kind object @name `a`, `java.lang.reflect.Type` v15 @kind object @name `b`) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L1b2794.  v10:= 1I;
  #L1b2796.  v11:= 0I;
  #L1b2798.  if v14 != v15 then goto L1b27a0;
  #L1b279c.  v11:= v10;
  #L1b279e.  return v11;
  #L1b27a0.  v12:= instanceof @variable v14 @type ^`java.lang.Class` @kind boolean;
  #L1b27a4.  if v12 == 0 then goto L1b27b2;
  #L1b27a8.  call temp:= `equals`(v14, v15) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b27ae.  v11:= temp;
  #L1b27b0.  goto L1b279e;
  #L1b27b2.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b27b6.  if v12 == 0 then goto L1b2832;
  #L1b27ba.  v12:= instanceof @variable v15 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b27be.  if v12 == 0 then goto L1b279e;
  #L1b27c2.  v4:= v14 @kind object;
  #L1b27c4.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L1b27c8.  v5:= v15 @kind object;
  #L1b27ca.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L1b27ce.  call temp:= `getOwnerType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b27d4.  v2:= temp @kind object;
  #L1b27d6.  call temp:= `getOwnerType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b27dc.  v3:= temp @kind object;
  #L1b27de.  if v2 == v3 then goto L1b27f2;
  #L1b27e2.  if v2 == 0 then goto L1b282e;
  #L1b27e6.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b27ec.  v12:= temp;
  #L1b27ee.  if v12 == 0 then goto L1b282e;
  #L1b27f2.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b27f8.  v12:= temp @kind object;
  #L1b27fa.  call temp:= `getRawType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b2800.  v13:= temp @kind object;
  #L1b2802.  call temp:= `equals`(v12, v13) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b2808.  v12:= temp;
  #L1b280a.  if v12 == 0 then goto L1b282e;
  #L1b280e.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2814.  v12:= temp @kind object;
  #L1b2816.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b281c.  v13:= temp @kind object;
  #L1b281e.  call temp:= `equals`(v12, v13) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1b2824.  v12:= temp;
  #L1b2826.  if v12 == 0 then goto L1b282e;
  #L1b282a.  v11:= v10;
  #L1b282c.  goto L1b279e;
  #L1b282e.  v10:= v11;
  #L1b2830.  goto L1b282a;
  #L1b2832.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b2836.  if v12 == 0 then goto L1b2868;
  #L1b283a.  v10:= instanceof @variable v15 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b283e.  if v10 == 0 then goto L1b279e;
  #L1b2842.  v0:= v14 @kind object;
  #L1b2844.  v0:= (`java.lang.reflect.GenericArrayType`) v0 @kind object;
  #L1b2848.  v1:= v15 @kind object;
  #L1b284a.  v1:= (`java.lang.reflect.GenericArrayType`) v1 @kind object;
  #L1b284e.  call temp:= `getGenericComponentType`(v0) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b2854.  v10:= temp @kind object;
  #L1b2856.  call temp:= `getGenericComponentType`(v1) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b285c.  v11:= temp @kind object;
  #L1b285e.  call temp:= `equals`(v10, v11) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b2864.  v11:= temp;
  #L1b2866.  goto L1b279e;
  #L1b2868.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b286c.  if v12 == 0 then goto L1b28c6;
  #L1b2870.  v12:= instanceof @variable v15 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b2874.  if v12 == 0 then goto L1b279e;
  #L1b2878.  v8:= v14 @kind object;
  #L1b287a.  v8:= (`java.lang.reflect.WildcardType`) v8 @kind object;
  #L1b287e.  v9:= v15 @kind object;
  #L1b2880.  v9:= (`java.lang.reflect.WildcardType`) v9 @kind object;
  #L1b2884.  call temp:= `getUpperBounds`(v8) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b288a.  v12:= temp @kind object;
  #L1b288c.  call temp:= `getUpperBounds`(v9) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2892.  v13:= temp @kind object;
  #L1b2894.  call temp:= `equals`(v12, v13) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1b289a.  v12:= temp;
  #L1b289c.  if v12 == 0 then goto L1b28c2;
  #L1b28a0.  call temp:= `getLowerBounds`(v8) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b28a6.  v12:= temp @kind object;
  #L1b28a8.  call temp:= `getLowerBounds`(v9) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b28ae.  v13:= temp @kind object;
  #L1b28b0.  call temp:= `equals`(v12, v13) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1b28b6.  v12:= temp;
  #L1b28b8.  if v12 == 0 then goto L1b28c2;
  #L1b28bc.  v11:= v10;
  #L1b28be.  goto L1b279e;
  #L1b28c2.  v10:= v11;
  #L1b28c4.  goto L1b28bc;
  #L1b28c6.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b28ca.  if v12 == 0 then goto L1b279e;
  #L1b28ce.  v12:= instanceof @variable v15 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b28d2.  if v12 == 0 then goto L1b279e;
  #L1b28d6.  v6:= v14 @kind object;
  #L1b28d8.  v6:= (`java.lang.reflect.TypeVariable`) v6 @kind object;
  #L1b28dc.  v7:= v15 @kind object;
  #L1b28de.  v7:= (`java.lang.reflect.TypeVariable`) v7 @kind object;
  #L1b28e2.  call temp:= `getGenericDeclaration`(v6) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L1b28e8.  v12:= temp @kind object;
  #L1b28ea.  call temp:= `getGenericDeclaration`(v7) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L1b28f0.  v13:= temp @kind object;
  #L1b28f2.  if v12 != v13 then goto L1b2918;
  #L1b28f6.  call temp:= `getName`(v6) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L1b28fc.  v12:= temp @kind object;
  #L1b28fe.  call temp:= `getName`(v7) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L1b2904.  v13:= temp @kind object;
  #L1b2906.  call temp:= `equals`(v12, v13) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b290c.  v12:= temp;
  #L1b290e.  if v12 == 0 then goto L1b2918;
  #L1b2912.  v11:= v10;
  #L1b2914.  goto L1b279e;
  #L1b2918.  v10:= v11;
  #L1b291a.  goto L1b2912;
}
procedure `java.lang.reflect.Type` `getCallResponseType`(`java.lang.reflect.Type` v2 @kind object @name `returnType`) @signature `Lretrofit2/Utils;.getCallResponseType:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1b292c.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b2930.  if v0 != 0 then goto L1b2944;
  #L1b2934.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b2938.  v1:= "Call return type must be parameterized as Call<Foo> or Call<? extends Foo>" @kind object;
  #L1b293c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b2942.  throw v0;
  #L1b2944.  v0:= 0I;
  #L1b2946.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L1b294a.  call temp:= `getParameterUpperBound`(v0, v2) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1b2950.  v0:= temp @kind object;
  #L1b2952.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getGenericSupertype`(`java.lang.reflect.Type` v6 @kind object @name `context`, `java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b2964.  if v8 != v7 then goto L1b296a;
  #L1b2968.  return v6 @kind object;
  #L1b296a.  call temp:= `isInterface`(v8) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L1b2970.  v4:= temp;
  #L1b2972.  if v4 == 0 then goto L1b29cc;
  #L1b2976.  call temp:= `getInterfaces`(v7) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L1b297c.  v1:= temp @kind object;
  #L1b297e.  v0:= 0I;
  #L1b2980.  v2:= length @variable v1;
  #L1b2982.  if v0 >= v2 then goto L1b29cc;
  #L1b2986.  v4:= v1[v0] @kind object;
  #L1b298a.  if v4 != v8 then goto L1b299c;
  #L1b298e.  call temp:= `getGenericInterfaces`(v7) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L1b2994.  v4:= temp @kind object;
  #L1b2996.  v6:= v4[v0] @kind object;
  #L1b299a.  goto L1b2968;
  #L1b299c.  v4:= v1[v0] @kind object;
  #L1b29a0.  call temp:= `isAssignableFrom`(v8, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1b29a6.  v4:= temp;
  #L1b29a8.  if v4 == 0 then goto L1b29c6;
  #L1b29ac.  call temp:= `getGenericInterfaces`(v7) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L1b29b2.  v4:= temp @kind object;
  #L1b29b4.  v4:= v4[v0] @kind object;
  #L1b29b8.  v5:= v1[v0] @kind object;
  #L1b29bc.  call temp:= `getGenericSupertype`(v4, v5, v8) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b29c2.  v6:= temp @kind object;
  #L1b29c4.  goto L1b2968;
  #L1b29c6.  v0:= v0 + 1;
  #L1b29ca.  goto L1b2982;
  #L1b29cc.  call temp:= `isInterface`(v7) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L1b29d2.  v4:= temp;
  #L1b29d4.  if v4 != 0 then goto L1b2a18;
  #L1b29d8.  v4:= constclass @type ^`java.lang.Object` @kind object;
  #L1b29dc.  if v7 == v4 then goto L1b2a18;
  #L1b29e0.  call temp:= `getSuperclass`(v7) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L1b29e6.  v3:= temp @kind object;
  #L1b29e8.  if v3 != v8 then goto L1b29f6;
  #L1b29ec.  call temp:= `getGenericSuperclass`(v7) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L1b29f2.  v6:= temp @kind object;
  #L1b29f4.  goto L1b2968;
  #L1b29f6.  call temp:= `isAssignableFrom`(v8, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1b29fc.  v4:= temp;
  #L1b29fe.  if v4 == 0 then goto L1b2a14;
  #L1b2a02.  call temp:= `getGenericSuperclass`(v7) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L1b2a08.  v4:= temp @kind object;
  #L1b2a0a.  call temp:= `getGenericSupertype`(v4, v3, v8) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b2a10.  v6:= temp @kind object;
  #L1b2a12.  goto L1b2968;
  #L1b2a14.  v7:= v3 @kind object;
  #L1b2a16.  goto L1b29d8;
  #L1b2a18.  v6:= v8 @kind object;
  #L1b2a1a.  goto L1b2968;
}
procedure `java.lang.reflect.Type` `getParameterUpperBound`(`int` v5 @name `index`, `java.lang.reflect.ParameterizedType` v6 @kind object @name `type`) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b2a2c.  call temp:= `getActualTypeArguments`(v6) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2a32.  v1:= temp @kind object;
  #L1b2a34.  if v5 < 0 then goto L1b2a3e;
  #L1b2a38.  v2:= length @variable v1;
  #L1b2a3a.  if v5 < v2 then goto L1b2a9a;
  #L1b2a3e.  v2:= new `java.lang.IllegalArgumentException`;
  #L1b2a42.  v3:= new `java.lang.StringBuilder`;
  #L1b2a46.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b2a4c.  v4:= "Index " @kind object;
  #L1b2a50.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2a56.  v3:= temp @kind object;
  #L1b2a58.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2a5e.  v3:= temp @kind object;
  #L1b2a60.  v4:= " not in range [0," @kind object;
  #L1b2a64.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2a6a.  v3:= temp @kind object;
  #L1b2a6c.  v4:= length @variable v1;
  #L1b2a6e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2a74.  v3:= temp @kind object;
  #L1b2a76.  v4:= ") for " @kind object;
  #L1b2a7a.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2a80.  v3:= temp @kind object;
  #L1b2a82.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2a88.  v3:= temp @kind object;
  #L1b2a8a.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b2a90.  v3:= temp @kind object;
  #L1b2a92.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b2a98.  throw v2;
  #L1b2a9a.  v0:= v1[v5] @kind object;
  #L1b2a9e.  v2:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b2aa2.  if v2 == 0 then goto L1b2ab8;
  #L1b2aa6.  v0:= (`java.lang.reflect.WildcardType`) v0 @kind object;
  #L1b2aaa.  call temp:= `getUpperBounds`(v0) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2ab0.  v2:= temp @kind object;
  #L1b2ab2.  v3:= 0I;
  #L1b2ab4.  v0:= v2[v3] @kind object;
  #L1b2ab8.  return v0 @kind object;
}
procedure `java.lang.Class` `getRawType`(`java.lang.reflect.Type` v6 @kind object @name `type`) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b2acc.  v4:= 0I;
  #L1b2ace.  v3:= "type == null" @kind object;
  #L1b2ad2.  call temp:= `checkNotNull`(v6, v3) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b2ad8.  v3:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L1b2adc.  if v3 == 0 then goto L1b2ae6;
  #L1b2ae0.  v6:= (`java.lang.Class`) v6 @kind object;
  #L1b2ae4.  return v6 @kind object;
  #L1b2ae6.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b2aea.  if v3 == 0 then goto L1b2b18;
  #L1b2aee.  v1:= v6 @kind object;
  #L1b2af0.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L1b2af4.  call temp:= `getRawType`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b2afa.  v2:= temp @kind object;
  #L1b2afc.  v3:= instanceof @variable v2 @type ^`java.lang.Class` @kind boolean;
  #L1b2b00.  if v3 != 0 then goto L1b2b10;
  #L1b2b04.  v3:= new `java.lang.IllegalArgumentException`;
  #L1b2b08.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b2b0e.  throw v3;
  #L1b2b10.  v2:= (`java.lang.Class`) v2 @kind object;
  #L1b2b14.  v6:= v2 @kind object;
  #L1b2b16.  goto L1b2ae4;
  #L1b2b18.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b2b1c.  if v3 == 0 then goto L1b2b46;
  #L1b2b20.  v6:= (`java.lang.reflect.GenericArrayType`) v6 @kind object;
  #L1b2b24.  call temp:= `getGenericComponentType`(v6) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b2b2a.  v0:= temp @kind object;
  #L1b2b2c.  call temp:= `getRawType`(v0) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1b2b32.  v3:= temp @kind object;
  #L1b2b34.  call temp:= `newInstance`(v3, v4) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L1b2b3a.  v3:= temp @kind object;
  #L1b2b3c.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b2b42.  v6:= temp @kind object;
  #L1b2b44.  goto L1b2ae4;
  #L1b2b46.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b2b4a.  if v3 == 0 then goto L1b2b54;
  #L1b2b4e.  v6:= constclass @type ^`java.lang.Object` @kind object;
  #L1b2b52.  goto L1b2ae4;
  #L1b2b54.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b2b58.  if v3 == 0 then goto L1b2b76;
  #L1b2b5c.  v6:= (`java.lang.reflect.WildcardType`) v6 @kind object;
  #L1b2b60.  call temp:= `getUpperBounds`(v6) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2b66.  v3:= temp @kind object;
  #L1b2b68.  v3:= v3[v4] @kind object;
  #L1b2b6c.  call temp:= `getRawType`(v3) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1b2b72.  v6:= temp @kind object;
  #L1b2b74.  goto L1b2ae4;
  #L1b2b76.  v3:= new `java.lang.IllegalArgumentException`;
  #L1b2b7a.  v4:= new `java.lang.StringBuilder`;
  #L1b2b7e.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b2b84.  v5:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L1b2b88.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2b8e.  v4:= temp @kind object;
  #L1b2b90.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2b96.  v4:= temp @kind object;
  #L1b2b98.  v5:= "> is of type " @kind object;
  #L1b2b9c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2ba2.  v4:= temp @kind object;
  #L1b2ba4.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b2baa.  v5:= temp @kind object;
  #L1b2bac.  call temp:= `getName`(v5) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b2bb2.  v5:= temp @kind object;
  #L1b2bb4.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2bba.  v4:= temp @kind object;
  #L1b2bbc.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b2bc2.  v4:= temp @kind object;
  #L1b2bc4.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b2bca.  throw v3;
}
procedure `java.lang.reflect.Type` `getSupertype`(`java.lang.reflect.Type` v1 @kind object @name `context`, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lretrofit2/Utils;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;

  #L1b2bdc.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1b2be2.  v0:= temp;
  #L1b2be4.  if v0 != 0 then goto L1b2bf4;
  #L1b2be8.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b2bec.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b2bf2.  throw v0;
  #L1b2bf4.  call temp:= `getGenericSupertype`(v1, v2, v3) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b2bfa.  v0:= temp @kind object;
  #L1b2bfc.  call temp:= `resolve`(v1, v2, v0) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b2c02.  v0:= temp @kind object;
  #L1b2c04.  return v0 @kind object;
}
procedure `boolean` `hasUnresolvableType`(`java.lang.reflect.Type` v9 @kind object @name `type`) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1b2c18.  v4:= 1I;
  #L1b2c1a.  v3:= 0I;
  #L1b2c1c.  v5:= instanceof @variable v9 @type ^`java.lang.Class` @kind boolean;
  #L1b2c20.  if v5 == 0 then goto L1b2c26;
  #L1b2c24.  return v3;
  #L1b2c26.  v5:= instanceof @variable v9 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b2c2a.  if v5 == 0 then goto L1b2c5e;
  #L1b2c2e.  v1:= v9 @kind object;
  #L1b2c30.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L1b2c34.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2c3a.  v6:= temp @kind object;
  #L1b2c3c.  v7:= length @variable v6;
  #L1b2c3e.  v5:= v3;
  #L1b2c40.  if v5 >= v7 then goto L1b2c24;
  #L1b2c44.  v2:= v6[v5] @kind object;
  #L1b2c48.  call temp:= `hasUnresolvableType`(v2) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b2c4e.  v8:= temp;
  #L1b2c50.  if v8 == 0 then goto L1b2c58;
  #L1b2c54.  v3:= v4;
  #L1b2c56.  goto L1b2c24;
  #L1b2c58.  v5:= v5 + 1;
  #L1b2c5c.  goto L1b2c40;
  #L1b2c5e.  v3:= instanceof @variable v9 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b2c62.  if v3 == 0 then goto L1b2c7c;
  #L1b2c66.  v9:= (`java.lang.reflect.GenericArrayType`) v9 @kind object;
  #L1b2c6a.  call temp:= `getGenericComponentType`(v9) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b2c70.  v3:= temp @kind object;
  #L1b2c72.  call temp:= `hasUnresolvableType`(v3) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b2c78.  v3:= temp;
  #L1b2c7a.  goto L1b2c24;
  #L1b2c7c.  v3:= instanceof @variable v9 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b2c80.  if v3 == 0 then goto L1b2c88;
  #L1b2c84.  v3:= v4;
  #L1b2c86.  goto L1b2c24;
  #L1b2c88.  v3:= instanceof @variable v9 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b2c8c.  if v3 == 0 then goto L1b2c94;
  #L1b2c90.  v3:= v4;
  #L1b2c92.  goto L1b2c24;
  #L1b2c94.  if v9 != 0 then goto L1b2ce2;
  #L1b2c98.  v0:= "null" @kind object;
  #L1b2c9c.  v3:= new `java.lang.IllegalArgumentException`;
  #L1b2ca0.  v4:= new `java.lang.StringBuilder`;
  #L1b2ca4.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b2caa.  v5:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L1b2cae.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2cb4.  v4:= temp @kind object;
  #L1b2cb6.  call temp:= `append`(v4, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2cbc.  v4:= temp @kind object;
  #L1b2cbe.  v5:= "> is of type " @kind object;
  #L1b2cc2.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2cc8.  v4:= temp @kind object;
  #L1b2cca.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2cd0.  v4:= temp @kind object;
  #L1b2cd2.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b2cd8.  v4:= temp @kind object;
  #L1b2cda.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b2ce0.  throw v3;
  #L1b2ce2.  call temp:= `getClass`(v9) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b2ce8.  v3:= temp @kind object;
  #L1b2cea.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b2cf0.  v0:= temp @kind object;
  #L1b2cf2.  goto L1b2c9c;
}
procedure `int` `indexOf`(`java.lang.Object`[] v2 @kind object @name `array`, `java.lang.Object` v3 @kind object @name `toFind`) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1b2d04.  v0:= 0I;
  #L1b2d06.  v1:= length @variable v2;
  #L1b2d08.  if v0 >= v1 then goto L1b2d24;
  #L1b2d0c.  v1:= v2[v0] @kind object;
  #L1b2d10.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b2d16.  v1:= temp;
  #L1b2d18.  if v1 == 0 then goto L1b2d1e;
  #L1b2d1c.  return v0;
  #L1b2d1e.  v0:= v0 + 1;
  #L1b2d22.  goto L1b2d06;
  #L1b2d24.  v1:= new `java.util.NoSuchElementException`;
  #L1b2d28.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L1b2d2e.  throw v1;
}
procedure `boolean` `isAnnotationPresent`(`java.lang.annotation.Annotation`[] v5 @kind object @name `annotations`, `java.lang.Class` v6 @kind object) @signature `Lretrofit2/Utils;.isAnnotationPresent:([Ljava/lang/annotation/Annotation;Ljava/lang/Class;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b2d40.  v1:= 0I;
  #L1b2d42.  v3:= length @variable v5;
  #L1b2d44.  v2:= v1;
  #L1b2d46.  if v2 >= v3 then goto L1b2d5c;
  #L1b2d4a.  v0:= v5[v2] @kind object;
  #L1b2d4e.  call temp:= `isInstance`(v6, v0) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b2d54.  v4:= temp;
  #L1b2d56.  if v4 == 0 then goto L1b2d5e;
  #L1b2d5a.  v1:= 1I;
  #L1b2d5c.  return v1;
  #L1b2d5e.  v2:= v2 + 1;
  #L1b2d62.  goto L1b2d46;
}
procedure `java.lang.reflect.Type` `resolve`(`java.lang.reflect.Type` v22 @kind object @name `context`, `java.lang.Class` v23 @kind object, `java.lang.reflect.Type` v24 @kind object @name `toResolve`) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L1b2d74.  v0:= v24 @kind object;
  #L1b2d78.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b2d7c.  v19:= v0;
  #L1b2d80.  if v19 == 0 then goto L1b2db2;
  #L1b2d84.  v17:= v24 @kind object;
  #L1b2d88.  v17:= (`java.lang.reflect.TypeVariable`) v17 @kind object;
  #L1b2d8c.  v0:= v22 @kind object;
  #L1b2d90.  v1:= v23 @kind object;
  #L1b2d94.  v2:= v17 @kind object;
  #L1b2d98.  call temp:= `resolveTypeVariable`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @kind static;
  #L1b2d9e.  v24:= temp @kind object;
  #L1b2da0.  v0:= v24 @kind object;
  #L1b2da4.  v1:= v17 @kind object;
  #L1b2da8.  if v0 != v1 then goto L1b2d74;
  #L1b2dac.  v10:= v24 @kind object;
  #L1b2db0.  return v10 @kind object;
  #L1b2db2.  v0:= v24 @kind object;
  #L1b2db6.  v0:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L1b2dba.  v19:= v0;
  #L1b2dbe.  if v19 == 0 then goto L1b2e0a;
  #L1b2dc2.  v19:= v24 @kind object;
  #L1b2dc6.  v19:= (`java.lang.Class`) v19 @kind object;
  #L1b2dca.  call temp:= `isArray`(v19) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1b2dd0.  v19:= temp;
  #L1b2dd2.  if v19 == 0 then goto L1b2e0a;
  #L1b2dd6.  v11:= v24 @kind object;
  #L1b2dda.  v11:= (`java.lang.Class`) v11 @kind object;
  #L1b2dde.  call temp:= `getComponentType`(v11) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1b2de4.  v5:= temp @kind object;
  #L1b2de6.  v0:= v22 @kind object;
  #L1b2dea.  v1:= v23 @kind object;
  #L1b2dee.  call temp:= `resolve`(v0, v1, v5) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b2df4.  v8:= temp @kind object;
  #L1b2df6.  if v5 != v8 then goto L1b2dfe;
  #L1b2dfa.  v10:= v11 @kind object;
  #L1b2dfc.  goto L1b2db0;
  #L1b2dfe.  v11:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L1b2e02.  call `<init>`(v11, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b2e08.  goto L1b2dfa;
  #L1b2e0a.  v0:= v24 @kind object;
  #L1b2e0e.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b2e12.  v19:= v0;
  #L1b2e16.  if v19 == 0 then goto L1b2e4a;
  #L1b2e1a.  v10:= v24 @kind object;
  #L1b2e1e.  v10:= (`java.lang.reflect.GenericArrayType`) v10 @kind object;
  #L1b2e22.  call temp:= `getGenericComponentType`(v10) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b2e28.  v5:= temp @kind object;
  #L1b2e2a.  v0:= v22 @kind object;
  #L1b2e2e.  v1:= v23 @kind object;
  #L1b2e32.  call temp:= `resolve`(v0, v1, v5) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b2e38.  v8:= temp @kind object;
  #L1b2e3a.  if v5 == v8 then goto L1b2db0;
  #L1b2e3e.  v10:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L1b2e42.  call `<init>`(v10, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b2e48.  goto L1b2db0;
  #L1b2e4a.  v0:= v24 @kind object;
  #L1b2e4e.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b2e52.  v19:= v0;
  #L1b2e56.  if v19 == 0 then goto L1b2f00;
  #L1b2e5a.  v10:= v24 @kind object;
  #L1b2e5e.  v10:= (`java.lang.reflect.ParameterizedType`) v10 @kind object;
  #L1b2e62.  call temp:= `getOwnerType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b2e68.  v14:= temp @kind object;
  #L1b2e6a.  v0:= v22 @kind object;
  #L1b2e6e.  v1:= v23 @kind object;
  #L1b2e72.  call temp:= `resolve`(v0, v1, v14) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b2e78.  v9:= temp @kind object;
  #L1b2e7a.  if v9 == v14 then goto L1b2ed6;
  #L1b2e7e.  v4:= 1I;
  #L1b2e80.  call temp:= `getActualTypeArguments`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2e86.  v3:= temp @kind object;
  #L1b2e88.  v16:= 0I;
  #L1b2e8c.  v6:= length @variable v3;
  #L1b2e8e.  v0:= v16;
  #L1b2e92.  if v0 >= v6 then goto L1b2eda;
  #L1b2e96.  v19:= v3[v16] @kind object;
  #L1b2e9a.  v0:= v22 @kind object;
  #L1b2e9e.  v1:= v23 @kind object;
  #L1b2ea2.  v2:= v19 @kind object;
  #L1b2ea6.  call temp:= `resolve`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b2eac.  v15:= temp @kind object;
  #L1b2eae.  v19:= v3[v16] @kind object;
  #L1b2eb2.  v0:= v19 @kind object;
  #L1b2eb6.  if v15 == v0 then goto L1b2ed0;
  #L1b2eba.  if v4 != 0 then goto L1b2ecc;
  #L1b2ebe.  call temp:= `clone`(v3) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1b2ec4.  v3:= temp @kind object;
  #L1b2ec6.  v3:= (`java.lang.reflect.Type`[]) v3 @kind object;
  #L1b2eca.  v4:= 1I;
  #L1b2ecc.  v3[v16]:= v15 @kind object;
  #L1b2ed0.  v16:= v16 + 1;
  #L1b2ed4.  goto L1b2e8e;
  #L1b2ed6.  v4:= 0I;
  #L1b2ed8.  goto L1b2e80;
  #L1b2eda.  if v4 == 0 then goto L1b2db0;
  #L1b2ede.  v19:= new `retrofit2.Utils$ParameterizedTypeImpl`;
  #L1b2ee2.  call temp:= `getRawType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b2ee8.  v20:= temp @kind object;
  #L1b2eea.  v0:= v19 @kind object;
  #L1b2eee.  v1:= v20 @kind object;
  #L1b2ef2.  call `<init>`(v0, v9, v1, v3) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b2ef8.  v10:= v19 @kind object;
  #L1b2efc.  goto L1b2db0;
  #L1b2f00.  v0:= v24 @kind object;
  #L1b2f04.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b2f08.  v19:= v0;
  #L1b2f0c.  if v19 == 0 then goto L1b302c;
  #L1b2f10.  v10:= v24 @kind object;
  #L1b2f14.  v10:= (`java.lang.reflect.WildcardType`) v10 @kind object;
  #L1b2f18.  call temp:= `getLowerBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2f1e.  v12:= temp @kind object;
  #L1b2f20.  call temp:= `getUpperBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b2f26.  v13:= temp @kind object;
  #L1b2f28.  v0:= length @variable v12;
  #L1b2f2a.  v19:= v0;
  #L1b2f2e.  v20:= 1I;
  #L1b2f32.  v0:= v19;
  #L1b2f36.  v1:= v20;
  #L1b2f3a.  if v0 != v1 then goto L1b2fb4;
  #L1b2f3e.  v19:= 0I;
  #L1b2f42.  v19:= v12[v19] @kind object;
  #L1b2f46.  v0:= v22 @kind object;
  #L1b2f4a.  v1:= v23 @kind object;
  #L1b2f4e.  v2:= v19 @kind object;
  #L1b2f52.  call temp:= `resolve`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b2f58.  v7:= temp @kind object;
  #L1b2f5a.  v19:= 0I;
  #L1b2f5e.  v19:= v12[v19] @kind object;
  #L1b2f62.  v0:= v19 @kind object;
  #L1b2f66.  if v7 == v0 then goto L1b2db0;
  #L1b2f6a.  v10:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L1b2f6e.  v19:= 1I;
  #L1b2f72.  v0:= v19;
  #L1b2f76.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b2f7a.  v19:= v0 @kind object;
  #L1b2f7e.  v20:= 0I;
  #L1b2f82.  v21:= constclass @type ^`java.lang.Object` @kind object;
  #L1b2f86.  v19[v20]:= v21 @kind object;
  #L1b2f8a.  v20:= 1I;
  #L1b2f8e.  v0:= v20;
  #L1b2f92.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b2f96.  v20:= v0 @kind object;
  #L1b2f9a.  v21:= 0I;
  #L1b2f9e.  v20[v21]:= v7 @kind object;
  #L1b2fa2.  v0:= v19 @kind object;
  #L1b2fa6.  v1:= v20 @kind object;
  #L1b2faa.  call `<init>`(v10, v0, v1) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b2fb0.  goto L1b2db0;
  #L1b2fb4.  v0:= length @variable v13;
  #L1b2fb6.  v19:= v0;
  #L1b2fba.  v20:= 1I;
  #L1b2fbe.  v0:= v19;
  #L1b2fc2.  v1:= v20;
  #L1b2fc6.  if v0 != v1 then goto L1b2db0;
  #L1b2fca.  v19:= 0I;
  #L1b2fce.  v19:= v13[v19] @kind object;
  #L1b2fd2.  v0:= v22 @kind object;
  #L1b2fd6.  v1:= v23 @kind object;
  #L1b2fda.  v2:= v19 @kind object;
  #L1b2fde.  call temp:= `resolve`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b2fe4.  v18:= temp @kind object;
  #L1b2fe6.  v19:= 0I;
  #L1b2fea.  v19:= v13[v19] @kind object;
  #L1b2fee.  v0:= v18 @kind object;
  #L1b2ff2.  v1:= v19 @kind object;
  #L1b2ff6.  if v0 == v1 then goto L1b2db0;
  #L1b2ffa.  v10:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L1b2ffe.  v19:= 1I;
  #L1b3002.  v0:= v19;
  #L1b3006.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b300a.  v19:= v0 @kind object;
  #L1b300e.  v20:= 0I;
  #L1b3012.  v19[v20]:= v18 @kind object;
  #L1b3016.  v20:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b301a.  v0:= v19 @kind object;
  #L1b301e.  v1:= v20 @kind object;
  #L1b3022.  call `<init>`(v10, v0, v1) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b3028.  goto L1b2db0;
  #L1b302c.  v10:= v24 @kind object;
  #L1b3030.  goto L1b2db0;
}
procedure `java.lang.reflect.Type` `resolveTypeVariable`(`java.lang.reflect.Type` v4 @kind object @name `context`, `java.lang.Class` v5 @kind object, `java.lang.reflect.TypeVariable` v6 @kind object) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b3044.  call temp:= `declaringClassOf`(v6) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @kind static;
  #L1b304a.  v1:= temp @kind object;
  #L1b304c.  if v1 != 0 then goto L1b3052;
  #L1b3050.  return v6 @kind object;
  #L1b3052.  call temp:= `getGenericSupertype`(v4, v5, v1) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b3058.  v0:= temp @kind object;
  #L1b305a.  v3:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b305e.  if v3 == 0 then goto L1b3050;
  #L1b3062.  call temp:= `getTypeParameters`(v1) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L1b3068.  v3:= temp @kind object;
  #L1b306a.  call temp:= `indexOf`(v3, v6) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L1b3070.  v2:= temp;
  #L1b3072.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L1b3076.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b307c.  v3:= temp @kind object;
  #L1b307e.  v6:= v3[v2] @kind object;
  #L1b3082.  goto L1b3050;
}
procedure `void` `throwIfFatal`(`java.lang.Throwable` v1 @kind object @name `t`) @signature `Lretrofit2/Utils;.throwIfFatal:(Ljava/lang/Throwable;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L1b3094.  v0:= instanceof @variable v1 @type ^`java.lang.VirtualMachineError` @kind boolean;
  #L1b3098.  if v0 == 0 then goto L1b30a2;
  #L1b309c.  v1:= (`java.lang.VirtualMachineError`) v1 @kind object;
  #L1b30a0.  throw v1;
  #L1b30a2.  v0:= instanceof @variable v1 @type ^`java.lang.ThreadDeath` @kind boolean;
  #L1b30a6.  if v0 == 0 then goto L1b30b0;
  #L1b30aa.  v1:= (`java.lang.ThreadDeath`) v1 @kind object;
  #L1b30ae.  throw v1;
  #L1b30b0.  v0:= instanceof @variable v1 @type ^`java.lang.LinkageError` @kind boolean;
  #L1b30b4.  if v0 == 0 then goto L1b30be;
  #L1b30b8.  v1:= (`java.lang.LinkageError`) v1 @kind object;
  #L1b30bc.  throw v1;
  #L1b30be.  return @kind void;
}
procedure `java.lang.String` `typeToString`(`java.lang.reflect.Type` v1 @kind object @name `type`) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;

  #L1b30d0.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L1b30d4.  if v0 == 0 then goto L1b30e6;
  #L1b30d8.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1b30dc.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b30e2.  v0:= temp @kind object;
  #L1b30e4.  return v0 @kind object;
  #L1b30e6.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b30ec.  v0:= temp @kind object;
  #L1b30ee.  goto L1b30e4;
}
procedure `void` `validateServiceInterface`(`java.lang.Class` v2 @kind object) @signature `Lretrofit2/Utils;.validateServiceInterface:(Ljava/lang/Class;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1b3100.  call temp:= `isInterface`(v2) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L1b3106.  v0:= temp;
  #L1b3108.  if v0 != 0 then goto L1b311c;
  #L1b310c.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b3110.  v1:= "API declarations must be interfaces." @kind object;
  #L1b3114.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b311a.  throw v0;
  #L1b311c.  call temp:= `getInterfaces`(v2) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L1b3122.  v0:= temp @kind object;
  #L1b3124.  v0:= length @variable v0;
  #L1b3126.  if v0 <= 0 then goto L1b313a;
  #L1b312a.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b312e.  v1:= "API interfaces must not extend other interfaces." @kind object;
  #L1b3132.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b3138.  throw v0;
  #L1b313a.  return @kind void;
}
