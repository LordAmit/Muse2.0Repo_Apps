record `retrofit2.OkHttpCall$1` @kind class @AccessFlag  extends `okhttp3.Callback` @kind interface {
  `retrofit2.OkHttpCall` `retrofit2.OkHttpCall$1.this$0` @AccessFlag FINAL_SYNTHETIC;
  `retrofit2.Callback` `retrofit2.OkHttpCall$1.val$callback` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`retrofit2.OkHttpCall$1` v0 @kind this, `retrofit2.OkHttpCall` v1 @kind object @name `this$0`, `retrofit2.Callback` v2 @kind object) @signature `Lretrofit2/OkHttpCall$1;.<init>:(Lretrofit2/OkHttpCall;Lretrofit2/Callback;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L21fa60.  v0.`retrofit2.OkHttpCall$1.this$0` @type ^`retrofit2.OkHttpCall` := v1 @kind object;
  #L21fa64.  v0.`retrofit2.OkHttpCall$1.val$callback` @type ^`retrofit2.Callback` := v2 @kind object;
  #L21fa68.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21fa6e.  return @kind void;
}
procedure `void` `callFailure`(`retrofit2.OkHttpCall$1` v3 @kind this, `java.lang.Throwable` v4 @kind object @name `e`) @signature `Lretrofit2/OkHttpCall$1;.callFailure:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L21fa80.  v1:= v3.`retrofit2.OkHttpCall$1.val$callback` @type ^`retrofit2.Callback` @kind object;
  #L21fa84.  v2:= v3.`retrofit2.OkHttpCall$1.this$0` @type ^`retrofit2.OkHttpCall` @kind object;
  #L21fa88.  call `onFailure`(v1, v2, v4) @signature `Lretrofit2/Callback;.onFailure:(Lretrofit2/Call;Ljava/lang/Throwable;)V` @kind interface;
  #Try_end0.  
  #L21fa8e.  return @kind void;
  #L21fa90.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21fa92.  call `printStackTrace`(v0) @signature `Ljava/lang/Throwable;.printStackTrace:()V` @kind virtual;
  #L21fa98.  goto L21fa8e;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L21fa90;
}
procedure `void` `onFailure`(`retrofit2.OkHttpCall$1` v0 @kind this, `okhttp3.Call` v1 @kind object @name `call`, `java.io.IOException` v2 @kind object @name `e`) @signature `Lretrofit2/OkHttpCall$1;.onFailure:(Lokhttp3/Call;Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;

  #L21fabc.  call `callFailure`(v0, v2) @signature `Lretrofit2/OkHttpCall$1;.callFailure:(Ljava/lang/Throwable;)V` @kind direct;
  #L21fac2.  return @kind void;
}
procedure `void` `onResponse`(`retrofit2.OkHttpCall$1` v5 @kind this, `okhttp3.Call` v6 @kind object @name `call`, `okhttp3.Response` v7 @kind object @name `rawResponse`) @signature `Lretrofit2/OkHttpCall$1;.onResponse:(Lokhttp3/Call;Lokhttp3/Response;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #Try_start0.  
  #L21fad4.  v3:= v5.`retrofit2.OkHttpCall$1.this$0` @type ^`retrofit2.OkHttpCall` @kind object;
  #L21fad8.  call temp:= `parseResponse`(v3, v7) @signature `Lretrofit2/OkHttpCall;.parseResponse:(Lokhttp3/Response;)Lretrofit2/Response;` @kind virtual;
  #Try_end0.  
  #L21fade.  v1:= temp @kind object;
  #Try_start1.  
  #L21fae0.  v3:= v5.`retrofit2.OkHttpCall$1.val$callback` @type ^`retrofit2.Callback` @kind object;
  #L21fae4.  v4:= v5.`retrofit2.OkHttpCall$1.this$0` @type ^`retrofit2.OkHttpCall` @kind object;
  #L21fae8.  call `onResponse`(v3, v4, v1) @signature `Lretrofit2/Callback;.onResponse:(Lretrofit2/Call;Lretrofit2/Response;)V` @kind interface;
  #Try_end1.  
  #L21faee.  return @kind void;
  #L21faf0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21faf2.  call `callFailure`(v5, v0) @signature `Lretrofit2/OkHttpCall$1;.callFailure:(Ljava/lang/Throwable;)V` @kind direct;
  #L21faf8.  goto L21faee;
  #L21fafa.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21fafc.  call `printStackTrace`(v2) @signature `Ljava/lang/Throwable;.printStackTrace:()V` @kind virtual;
  #L21fb02.  goto L21faee;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L21faf0;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L21fafa;
}
