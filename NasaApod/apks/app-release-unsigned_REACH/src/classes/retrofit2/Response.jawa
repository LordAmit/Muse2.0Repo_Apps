record `retrofit2.Response` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.Object` `retrofit2.Response.body` @AccessFlag PRIVATE_FINAL;
  `okhttp3.ResponseBody` `retrofit2.Response.errorBody` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Response` `retrofit2.Response.rawResponse` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Response` v0 @kind this, `okhttp3.Response` v1 @kind object @name `rawResponse`, `java.lang.Object` v2 @kind object, `okhttp3.ResponseBody` v3 @kind object @name `errorBody`) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1af050.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1af056.  v0.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` := v1 @kind object;
  #L1af05a.  v0.`retrofit2.Response.body` @type ^`java.lang.Object` := v2 @kind object;
  #L1af05e.  v0.`retrofit2.Response.errorBody` @type ^`okhttp3.ResponseBody` := v3 @kind object;
  #L1af062.  return @kind void;
}
procedure `retrofit2.Response` `error`(`int` v3 @name `code`, `okhttp3.ResponseBody` v4 @kind object @name `body`) @signature `Lretrofit2/Response;.error:(ILokhttp3/ResponseBody;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1af074.  v0:= 400I;
  #L1af078.  if v3 >= v0 then goto L1af0ae;
  #L1af07c.  v0:= new `java.lang.IllegalArgumentException`;
  #L1af080.  v1:= new `java.lang.StringBuilder`;
  #L1af084.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1af08a.  v2:= "code < 400: " @kind object;
  #L1af08e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1af094.  v1:= temp @kind object;
  #L1af096.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1af09c.  v1:= temp @kind object;
  #L1af09e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1af0a4.  v1:= temp @kind object;
  #L1af0a6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1af0ac.  throw v0;
  #L1af0ae.  v0:= new `okhttp3.Response$Builder`;
  #L1af0b2.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L1af0b8.  call temp:= `code`(v0, v3) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af0be.  v0:= temp @kind object;
  #L1af0c0.  v1:= "Response.error()" @kind object;
  #L1af0c4.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af0ca.  v0:= temp @kind object;
  #L1af0cc.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L1af0d0.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af0d6.  v0:= temp @kind object;
  #L1af0d8.  v1:= new `okhttp3.Request$Builder`;
  #L1af0dc.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L1af0e2.  v2:= "http://localhost/" @kind object;
  #L1af0e6.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1af0ec.  v1:= temp @kind object;
  #L1af0ee.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1af0f4.  v1:= temp @kind object;
  #L1af0f6.  call temp:= `request`(v0, v1) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af0fc.  v0:= temp @kind object;
  #L1af0fe.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1af104.  v0:= temp @kind object;
  #L1af106.  call temp:= `error`(v4, v0) @signature `Lretrofit2/Response;.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L1af10c.  v0:= temp @kind object;
  #L1af10e.  return v0 @kind object;
}
procedure `retrofit2.Response` `error`(`okhttp3.ResponseBody` v2 @kind object @name `body`, `okhttp3.Response` v3 @kind object @name `rawResponse`) @signature `Lretrofit2/Response;.error:(Lokhttp3/ResponseBody;Lokhttp3/Response;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1af120.  v0:= "body == null" @kind object;
  #L1af124.  call temp:= `checkNotNull`(v2, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1af12a.  v0:= "rawResponse == null" @kind object;
  #L1af12e.  call temp:= `checkNotNull`(v3, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1af134.  call temp:= `isSuccessful`(v3) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L1af13a.  v0:= temp;
  #L1af13c.  if v0 == 0 then goto L1af150;
  #L1af140.  v0:= new `java.lang.IllegalArgumentException`;
  #L1af144.  v1:= "rawResponse should not be successful response" @kind object;
  #L1af148.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1af14e.  throw v0;
  #L1af150.  v0:= new `retrofit2.Response`;
  #L1af154.  v1:= 0I;
  #L1af156.  call `<init>`(v0, v3, v1, v2) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @kind direct;
  #L1af15c.  return v0 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v3 @kind object) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1af170.  v0:= new `okhttp3.Response$Builder`;
  #L1af174.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L1af17a.  v1:= 200I;
  #L1af17e.  call temp:= `code`(v0, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af184.  v0:= temp @kind object;
  #L1af186.  v1:= "OK" @kind object;
  #L1af18a.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af190.  v0:= temp @kind object;
  #L1af192.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L1af196.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af19c.  v0:= temp @kind object;
  #L1af19e.  v1:= new `okhttp3.Request$Builder`;
  #L1af1a2.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L1af1a8.  v2:= "http://localhost/" @kind object;
  #L1af1ac.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1af1b2.  v1:= temp @kind object;
  #L1af1b4.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1af1ba.  v1:= temp @kind object;
  #L1af1bc.  call temp:= `request`(v0, v1) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af1c2.  v0:= temp @kind object;
  #L1af1c4.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1af1ca.  v0:= temp @kind object;
  #L1af1cc.  call temp:= `success`(v3, v0) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L1af1d2.  v0:= temp @kind object;
  #L1af1d4.  return v0 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v3 @kind object, `okhttp3.Headers` v4 @kind object @name `headers`) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Headers;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1af1e8.  v0:= "headers == null" @kind object;
  #L1af1ec.  call temp:= `checkNotNull`(v4, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1af1f2.  v0:= new `okhttp3.Response$Builder`;
  #L1af1f6.  call `<init>`(v0) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L1af1fc.  v1:= 200I;
  #L1af200.  call temp:= `code`(v0, v1) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af206.  v0:= temp @kind object;
  #L1af208.  v1:= "OK" @kind object;
  #L1af20c.  call temp:= `message`(v0, v1) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af212.  v0:= temp @kind object;
  #L1af214.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L1af218.  call temp:= `protocol`(v0, v1) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af21e.  v0:= temp @kind object;
  #L1af220.  call temp:= `headers`(v0, v4) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af226.  v0:= temp @kind object;
  #L1af228.  v1:= new `okhttp3.Request$Builder`;
  #L1af22c.  call `<init>`(v1) @signature `Lokhttp3/Request$Builder;.<init>:()V` @kind direct;
  #L1af232.  v2:= "http://localhost/" @kind object;
  #L1af236.  call temp:= `url`(v1, v2) @signature `Lokhttp3/Request$Builder;.url:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L1af23c.  v1:= temp @kind object;
  #L1af23e.  call temp:= `build`(v1) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1af244.  v1:= temp @kind object;
  #L1af246.  call temp:= `request`(v0, v1) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @kind virtual;
  #L1af24c.  v0:= temp @kind object;
  #L1af24e.  call temp:= `build`(v0) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L1af254.  v0:= temp @kind object;
  #L1af256.  call temp:= `success`(v3, v0) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @kind static;
  #L1af25c.  v0:= temp @kind object;
  #L1af25e.  return v0 @kind object;
}
procedure `retrofit2.Response` `success`(`java.lang.Object` v2 @kind object, `okhttp3.Response` v3 @kind object @name `rawResponse`) @signature `Lretrofit2/Response;.success:(Ljava/lang/Object;Lokhttp3/Response;)Lretrofit2/Response;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1af270.  v0:= "rawResponse == null" @kind object;
  #L1af274.  call temp:= `checkNotNull`(v3, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1af27a.  call temp:= `isSuccessful`(v3) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L1af280.  v0:= temp;
  #L1af282.  if v0 != 0 then goto L1af296;
  #L1af286.  v0:= new `java.lang.IllegalArgumentException`;
  #L1af28a.  v1:= "rawResponse must be successful response" @kind object;
  #L1af28e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1af294.  throw v0;
  #L1af296.  v0:= new `retrofit2.Response`;
  #L1af29a.  v1:= 0I;
  #L1af29c.  call `<init>`(v0, v3, v2, v1) @signature `Lretrofit2/Response;.<init>:(Lokhttp3/Response;Ljava/lang/Object;Lokhttp3/ResponseBody;)V` @kind direct;
  #L1af2a2.  return v0 @kind object;
}
procedure `java.lang.Object` `body`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.body:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af2b4.  v0:= v1.`retrofit2.Response.body` @type ^`java.lang.Object` @kind object;
  #L1af2b8.  return v0 @kind object;
}
procedure `int` `code`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.code:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af2cc.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1af2d0.  call temp:= `code`(v0) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L1af2d6.  v0:= temp;
  #L1af2d8.  return v0;
}
procedure `okhttp3.ResponseBody` `errorBody`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.errorBody:()Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af2ec.  v0:= v1.`retrofit2.Response.errorBody` @type ^`okhttp3.ResponseBody` @kind object;
  #L1af2f0.  return v0 @kind object;
}
procedure `okhttp3.Headers` `headers`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.headers:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af304.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1af308.  call temp:= `headers`(v0) @signature `Lokhttp3/Response;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L1af30e.  v0:= temp @kind object;
  #L1af310.  return v0 @kind object;
}
procedure `boolean` `isSuccessful`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.isSuccessful:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af324.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1af328.  call temp:= `isSuccessful`(v0) @signature `Lokhttp3/Response;.isSuccessful:()Z` @kind virtual;
  #L1af32e.  v0:= temp;
  #L1af330.  return v0;
}
procedure `java.lang.String` `message`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.message:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af344.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1af348.  call temp:= `message`(v0) @signature `Lokhttp3/Response;.message:()Ljava/lang/String;` @kind virtual;
  #L1af34e.  v0:= temp @kind object;
  #L1af350.  return v0 @kind object;
}
procedure `okhttp3.Response` `raw`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.raw:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af364.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1af368.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`retrofit2.Response` v1 @kind this) @signature `Lretrofit2/Response;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af37c.  v0:= v1.`retrofit2.Response.rawResponse` @type ^`okhttp3.Response` @kind object;
  #L1af380.  call temp:= `toString`(v0) @signature `Lokhttp3/Response;.toString:()Ljava/lang/String;` @kind virtual;
  #L1af386.  v0:= temp @kind object;
  #L1af388.  return v0 @kind object;
}
