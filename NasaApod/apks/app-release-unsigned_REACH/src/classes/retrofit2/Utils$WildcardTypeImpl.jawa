record `retrofit2.Utils$WildcardTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.lowerBound` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.upperBound` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this, `java.lang.reflect.Type`[] v4 @kind object @name `upperBounds`, `java.lang.reflect.Type`[] v5 @kind object @name `lowerBounds`) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1b2480.  v1:= 1I;
  #L1b2482.  v2:= 0I;
  #L1b2484.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b248a.  v0:= length @variable v5;
  #L1b248c.  if v0 <= v1 then goto L1b249c;
  #L1b2490.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b2494.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b249a.  throw v0;
  #L1b249c.  v0:= length @variable v4;
  #L1b249e.  if v0 == v1 then goto L1b24ae;
  #L1b24a2.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b24a6.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b24ac.  throw v0;
  #L1b24ae.  v0:= length @variable v5;
  #L1b24b0.  if v0 != v1 then goto L1b24fc;
  #L1b24b4.  v0:= v5[v2] @kind object;
  #L1b24b8.  if v0 != 0 then goto L1b24c8;
  #L1b24bc.  v0:= new `java.lang.NullPointerException`;
  #L1b24c0.  call `<init>`(v0) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L1b24c6.  throw v0;
  #L1b24c8.  v0:= v5[v2] @kind object;
  #L1b24cc.  call `checkNotPrimitive`(v0) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1b24d2.  v0:= v4[v2] @kind object;
  #L1b24d6.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1b24da.  if v0 == v1 then goto L1b24ea;
  #L1b24de.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b24e2.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b24e8.  throw v0;
  #L1b24ea.  v0:= v5[v2] @kind object;
  #L1b24ee.  v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b24f2.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L1b24f6.  v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b24fa.  return @kind void;
  #L1b24fc.  v0:= v4[v2] @kind object;
  #L1b2500.  if v0 != 0 then goto L1b2510;
  #L1b2504.  v0:= new `java.lang.NullPointerException`;
  #L1b2508.  call `<init>`(v0) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L1b250e.  throw v0;
  #L1b2510.  v0:= v4[v2] @kind object;
  #L1b2514.  call `checkNotPrimitive`(v0) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1b251a.  v0:= 0I;
  #L1b251c.  v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b2520.  v0:= v4[v2] @kind object;
  #L1b2524.  v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b2528.  goto L1b24fa;
}
procedure `boolean` `equals`(`retrofit2.Utils$WildcardTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object @name `other`) @signature `Lretrofit2/Utils$WildcardTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b253c.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b2540.  if v0 == 0 then goto L1b2558;
  #L1b2544.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L1b2548.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b254e.  v0:= temp;
  #L1b2550.  if v0 == 0 then goto L1b2558;
  #L1b2554.  v0:= 1I;
  #L1b2556.  return v0;
  #L1b2558.  v0:= 0I;
  #L1b255a.  goto L1b2556;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b256c.  v0:= v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2570.  if v0 == 0 then goto L1b2586;
  #L1b2574.  v0:= 1I;
  #L1b2576.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b257a.  v1:= 0I;
  #L1b257c.  v2:= v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2580.  v0[v1]:= v2 @kind object;
  #L1b2584.  return v0 @kind object;
  #L1b2586.  v0:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b258a.  goto L1b2584;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b259c.  v0:= 1I;
  #L1b259e.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b25a2.  v1:= 0I;
  #L1b25a4.  v2:= v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b25a8.  v0[v1]:= v2 @kind object;
  #L1b25ac.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b25c0.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b25c4.  if v0 == 0 then goto L1b25ec;
  #L1b25c8.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b25cc.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b25d2.  v0:= temp;
  #L1b25d4.  v0:= v0 + 31;
  #L1b25d8.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b25dc.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b25e2.  v1:= temp;
  #L1b25e4.  v1:= v1 + 31;
  #L1b25e8.  v0:= v0 ^~ v1 @kind int;
  #L1b25ea.  return v0;
  #L1b25ec.  v0:= 1I;
  #L1b25ee.  goto L1b25d8;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b2600.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2604.  if v0 == 0 then goto L1b263c;
  #L1b2608.  v0:= new `java.lang.StringBuilder`;
  #L1b260c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b2612.  v1:= "? super " @kind object;
  #L1b2616.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b261c.  v0:= temp @kind object;
  #L1b261e.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2622.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b2628.  v1:= temp @kind object;
  #L1b262a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2630.  v0:= temp @kind object;
  #L1b2632.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b2638.  v0:= temp @kind object;
  #L1b263a.  return v0 @kind object;
  #L1b263c.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2640.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1b2644.  if v0 != v1 then goto L1b264e;
  #L1b2648.  v0:= "?" @kind object;
  #L1b264c.  goto L1b263a;
  #L1b264e.  v0:= new `java.lang.StringBuilder`;
  #L1b2652.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b2658.  v1:= "? extends " @kind object;
  #L1b265c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2662.  v0:= temp @kind object;
  #L1b2664.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2668.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b266e.  v1:= temp @kind object;
  #L1b2670.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2676.  v0:= temp @kind object;
  #L1b2678.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b267e.  v0:= temp @kind object;
  #L1b2680.  goto L1b263a;
}
