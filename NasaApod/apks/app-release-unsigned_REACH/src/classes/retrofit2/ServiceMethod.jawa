record `retrofit2.ServiceMethod` @kind class @AccessFlag FINAL {
  `okhttp3.HttpUrl` `retrofit2.ServiceMethod.baseUrl` @AccessFlag PRIVATE_FINAL;
  `retrofit2.CallAdapter` `retrofit2.ServiceMethod.callAdapter` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Call$Factory` `retrofit2.ServiceMethod.callFactory` @AccessFlag PRIVATE_FINAL;
  `okhttp3.MediaType` `retrofit2.ServiceMethod.contentType` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.ServiceMethod.hasBody` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Headers` `retrofit2.ServiceMethod.headers` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `retrofit2.ServiceMethod.httpMethod` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.ServiceMethod.isFormEncoded` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.ServiceMethod.isMultipart` @AccessFlag PRIVATE_FINAL;
  `retrofit2.ParameterHandler`[] `retrofit2.ServiceMethod.parameterHandlers` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `retrofit2.ServiceMethod.relativeUrl` @AccessFlag PRIVATE_FINAL;
  `retrofit2.Converter` `retrofit2.ServiceMethod.responseConverter` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@retrofit2.ServiceMethod.PARAM` @AccessFlag STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit2.ServiceMethod.PARAM_NAME_REGEX` @AccessFlag STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit2.ServiceMethod.PARAM_URL_REGEX` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/ServiceMethod;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b1f08.  v0:= "\\{([a-zA-Z][a-zA-Z0-9_-]*)\\}" @kind object;
  #L1b1f0c.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L1b1f12.  v0:= temp @kind object;
  #L1b1f14.  `@@retrofit2.ServiceMethod.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L1b1f18.  v0:= "[a-zA-Z][a-zA-Z0-9_-]*" @kind object;
  #L1b1f1c.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L1b1f22.  v0:= temp @kind object;
  #L1b1f24.  `@@retrofit2.ServiceMethod.PARAM_NAME_REGEX` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L1b1f28.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.ServiceMethod` v1 @kind this, `retrofit2.ServiceMethod$Builder` v2 @kind object) @signature `Lretrofit2/ServiceMethod;.<init>:(Lretrofit2/ServiceMethod$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1b1f3c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b1f42.  v0:= v2.`retrofit2.ServiceMethod$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L1b1f46.  call temp:= `callFactory`(v0) @signature `Lretrofit2/Retrofit;.callFactory:()Lokhttp3/Call$Factory;` @kind virtual;
  #L1b1f4c.  v0:= temp @kind object;
  #L1b1f4e.  v1.`retrofit2.ServiceMethod.callFactory` @type ^`okhttp3.Call$Factory` := v0 @kind object;
  #L1b1f52.  v0:= v2.`retrofit2.ServiceMethod$Builder.callAdapter` @type ^`retrofit2.CallAdapter` @kind object;
  #L1b1f56.  v1.`retrofit2.ServiceMethod.callAdapter` @type ^`retrofit2.CallAdapter` := v0 @kind object;
  #L1b1f5a.  v0:= v2.`retrofit2.ServiceMethod$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L1b1f5e.  call temp:= `baseUrl`(v0) @signature `Lretrofit2/Retrofit;.baseUrl:()Lokhttp3/HttpUrl;` @kind virtual;
  #L1b1f64.  v0:= temp @kind object;
  #L1b1f66.  v1.`retrofit2.ServiceMethod.baseUrl` @type ^`okhttp3.HttpUrl` := v0 @kind object;
  #L1b1f6a.  v0:= v2.`retrofit2.ServiceMethod$Builder.responseConverter` @type ^`retrofit2.Converter` @kind object;
  #L1b1f6e.  v1.`retrofit2.ServiceMethod.responseConverter` @type ^`retrofit2.Converter` := v0 @kind object;
  #L1b1f72.  v0:= v2.`retrofit2.ServiceMethod$Builder.httpMethod` @type ^`java.lang.String` @kind object;
  #L1b1f76.  v1.`retrofit2.ServiceMethod.httpMethod` @type ^`java.lang.String` := v0 @kind object;
  #L1b1f7a.  v0:= v2.`retrofit2.ServiceMethod$Builder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L1b1f7e.  v1.`retrofit2.ServiceMethod.relativeUrl` @type ^`java.lang.String` := v0 @kind object;
  #L1b1f82.  v0:= v2.`retrofit2.ServiceMethod$Builder.headers` @type ^`okhttp3.Headers` @kind object;
  #L1b1f86.  v1.`retrofit2.ServiceMethod.headers` @type ^`okhttp3.Headers` := v0 @kind object;
  #L1b1f8a.  v0:= v2.`retrofit2.ServiceMethod$Builder.contentType` @type ^`okhttp3.MediaType` @kind object;
  #L1b1f8e.  v1.`retrofit2.ServiceMethod.contentType` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L1b1f92.  v0:= v2.`retrofit2.ServiceMethod$Builder.hasBody` @type ^`boolean` @kind boolean;
  #L1b1f96.  v1.`retrofit2.ServiceMethod.hasBody` @type ^`boolean` := v0 @kind boolean;
  #L1b1f9a.  v0:= v2.`retrofit2.ServiceMethod$Builder.isFormEncoded` @type ^`boolean` @kind boolean;
  #L1b1f9e.  v1.`retrofit2.ServiceMethod.isFormEncoded` @type ^`boolean` := v0 @kind boolean;
  #L1b1fa2.  v0:= v2.`retrofit2.ServiceMethod$Builder.isMultipart` @type ^`boolean` @kind boolean;
  #L1b1fa6.  v1.`retrofit2.ServiceMethod.isMultipart` @type ^`boolean` := v0 @kind boolean;
  #L1b1faa.  v0:= v2.`retrofit2.ServiceMethod$Builder.parameterHandlers` @type ^`retrofit2.ParameterHandler`[] @kind object;
  #L1b1fae.  v1.`retrofit2.ServiceMethod.parameterHandlers` @type ^`retrofit2.ParameterHandler`[] := v0 @kind object;
  #L1b1fb2.  return @kind void;
}
procedure `java.lang.Class` `boxIfPrimitive`(`java.lang.Class` v1 @kind object) @signature `Lretrofit2/ServiceMethod;.boxIfPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag STATIC {
    temp;
    v0;

  #L1b1fc4.  v0:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b1fc8.  if v0 != v1 then goto L1b1fd2;
  #L1b1fcc.  v1:= constclass @type ^`java.lang.Boolean` @kind object;
  #L1b1fd0.  return v1 @kind object;
  #L1b1fd2.  v0:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b1fd6.  if v0 != v1 then goto L1b1fe0;
  #L1b1fda.  v1:= constclass @type ^`java.lang.Byte` @kind object;
  #L1b1fde.  goto L1b1fd0;
  #L1b1fe0.  v0:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b1fe4.  if v0 != v1 then goto L1b1fee;
  #L1b1fe8.  v1:= constclass @type ^`java.lang.Character` @kind object;
  #L1b1fec.  goto L1b1fd0;
  #L1b1fee.  v0:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b1ff2.  if v0 != v1 then goto L1b1ffc;
  #L1b1ff6.  v1:= constclass @type ^`java.lang.Double` @kind object;
  #L1b1ffa.  goto L1b1fd0;
  #L1b1ffc.  v0:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b2000.  if v0 != v1 then goto L1b200a;
  #L1b2004.  v1:= constclass @type ^`java.lang.Float` @kind object;
  #L1b2008.  goto L1b1fd0;
  #L1b200a.  v0:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b200e.  if v0 != v1 then goto L1b2018;
  #L1b2012.  v1:= constclass @type ^`java.lang.Integer` @kind object;
  #L1b2016.  goto L1b1fd0;
  #L1b2018.  v0:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b201c.  if v0 != v1 then goto L1b2026;
  #L1b2020.  v1:= constclass @type ^`java.lang.Long` @kind object;
  #L1b2024.  goto L1b1fd0;
  #L1b2026.  v0:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b202a.  if v0 != v1 then goto L1b1fd0;
  #L1b202e.  v1:= constclass @type ^`java.lang.Short` @kind object;
  #L1b2032.  goto L1b1fd0;
}
procedure `java.util.Set` `parsePathParameters`(`java.lang.String` v3 @kind object @name `path`) @signature `Lretrofit2/ServiceMethod;.parsePathParameters:(Ljava/lang/String;)Ljava/util/Set;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1b2044.  v2:= `@@retrofit2.ServiceMethod.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` @kind object;
  #L1b2048.  call temp:= `matcher`(v2, v3) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L1b204e.  v0:= temp @kind object;
  #L1b2050.  v1:= new `java.util.LinkedHashSet`;
  #L1b2054.  call `<init>`(v1) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L1b205a.  call temp:= `find`(v0) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L1b2060.  v2:= temp;
  #L1b2062.  if v2 == 0 then goto L1b2078;
  #L1b2066.  v2:= 1I;
  #L1b2068.  call temp:= `group`(v0, v2) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L1b206e.  v2:= temp @kind object;
  #L1b2070.  call temp:= `add`(v1, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b2076.  goto L1b205a;
  #L1b2078.  return v1 @kind object;
}
procedure `java.lang.Object` `adapt`(`retrofit2.ServiceMethod` v1 @kind this, `retrofit2.Call` v2 @kind object) @signature `Lretrofit2/ServiceMethod;.adapt:(Lretrofit2/Call;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L1b208c.  v0:= v1.`retrofit2.ServiceMethod.callAdapter` @type ^`retrofit2.CallAdapter` @kind object;
  #L1b2090.  call temp:= `adapt`(v0, v2) @signature `Lretrofit2/CallAdapter;.adapt:(Lretrofit2/Call;)Ljava/lang/Object;` @kind interface;
  #L1b2096.  v0:= temp @kind object;
  #L1b2098.  return v0 @kind object;
}
procedure `okhttp3.Call` `toCall`(`retrofit2.ServiceMethod` v12 @kind this, `java.lang.Object`[] v13 @kind object @name `args`) @signature `Lretrofit2/ServiceMethod;.toCall:([Ljava/lang/Object;)Lokhttp3/Call;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1b20ac.  v0:= new `retrofit2.RequestBuilder`;
  #L1b20b0.  v1:= v12.`retrofit2.ServiceMethod.httpMethod` @type ^`java.lang.String` @kind object;
  #L1b20b4.  v2:= v12.`retrofit2.ServiceMethod.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L1b20b8.  v3:= v12.`retrofit2.ServiceMethod.relativeUrl` @type ^`java.lang.String` @kind object;
  #L1b20bc.  v4:= v12.`retrofit2.ServiceMethod.headers` @type ^`okhttp3.Headers` @kind object;
  #L1b20c0.  v5:= v12.`retrofit2.ServiceMethod.contentType` @type ^`okhttp3.MediaType` @kind object;
  #L1b20c4.  v6:= v12.`retrofit2.ServiceMethod.hasBody` @type ^`boolean` @kind boolean;
  #L1b20c8.  v7:= v12.`retrofit2.ServiceMethod.isFormEncoded` @type ^`boolean` @kind boolean;
  #L1b20cc.  v8:= v12.`retrofit2.ServiceMethod.isMultipart` @type ^`boolean` @kind boolean;
  #L1b20d0.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lretrofit2/RequestBuilder;.<init>:(Ljava/lang/String;Lokhttp3/HttpUrl;Ljava/lang/String;Lokhttp3/Headers;Lokhttp3/MediaType;ZZZ)V` @kind direct;
  #L1b20d6.  v10:= v12.`retrofit2.ServiceMethod.parameterHandlers` @type ^`retrofit2.ParameterHandler`[] @kind object;
  #L1b20da.  if v13 == 0 then goto L1b213a;
  #L1b20de.  v9:= length @variable v13;
  #L1b20e0.  v1:= length @variable v10;
  #L1b20e2.  if v9 == v1 then goto L1b213e;
  #L1b20e6.  v1:= new `java.lang.IllegalArgumentException`;
  #L1b20ea.  v2:= new `java.lang.StringBuilder`;
  #L1b20ee.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b20f4.  v3:= "Argument count (" @kind object;
  #L1b20f8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b20fe.  v2:= temp @kind object;
  #L1b2100.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2106.  v2:= temp @kind object;
  #L1b2108.  v3:= ") doesn't match expected count (" @kind object;
  #L1b210c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2112.  v2:= temp @kind object;
  #L1b2114.  v3:= length @variable v10;
  #L1b2116.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b211c.  v2:= temp @kind object;
  #L1b211e.  v3:= ")" @kind object;
  #L1b2122.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2128.  v2:= temp @kind object;
  #L1b212a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b2130.  v2:= temp @kind object;
  #L1b2132.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b2138.  throw v1;
  #L1b213a.  v9:= 0I;
  #L1b213c.  goto L1b20e0;
  #L1b213e.  v11:= 0I;
  #L1b2140.  if v11 >= v9 then goto L1b2158;
  #L1b2144.  v1:= v10[v11] @kind object;
  #L1b2148.  v2:= v13[v11] @kind object;
  #L1b214c.  call `apply`(v1, v0, v2) @signature `Lretrofit2/ParameterHandler;.apply:(Lretrofit2/RequestBuilder;Ljava/lang/Object;)V` @kind virtual;
  #L1b2152.  v11:= v11 + 1;
  #L1b2156.  goto L1b2140;
  #L1b2158.  v1:= v12.`retrofit2.ServiceMethod.callFactory` @type ^`okhttp3.Call$Factory` @kind object;
  #L1b215c.  call temp:= `build`(v0) @signature `Lretrofit2/RequestBuilder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1b2162.  v2:= temp @kind object;
  #L1b2164.  call temp:= `newCall`(v1, v2) @signature `Lokhttp3/Call$Factory;.newCall:(Lokhttp3/Request;)Lokhttp3/Call;` @kind interface;
  #L1b216a.  v1:= temp @kind object;
  #L1b216c.  return v1 @kind object;
}
procedure `java.lang.Object` `toResponse`(`retrofit2.ServiceMethod` v1 @kind this, `okhttp3.ResponseBody` v2 @kind object @name `body`) @signature `Lretrofit2/ServiceMethod;.toResponse:(Lokhttp3/ResponseBody;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L1b2180.  v0:= v1.`retrofit2.ServiceMethod.responseConverter` @type ^`retrofit2.Converter` @kind object;
  #L1b2184.  call temp:= `convert`(v0, v2) @signature `Lretrofit2/Converter;.convert:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1b218a.  v0:= temp @kind object;
  #L1b218c.  return v0 @kind object;
}
