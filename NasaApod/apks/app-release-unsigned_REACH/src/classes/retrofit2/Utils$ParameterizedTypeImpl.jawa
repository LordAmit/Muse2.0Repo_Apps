record `retrofit2.Utils$ParameterizedTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.ownerType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.rawType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$ParameterizedTypeImpl` v5 @kind this, `java.lang.reflect.Type` v6 @kind object @name `ownerType`, `java.lang.reflect.Type` v7 @kind object @name `rawType`, `java.lang.reflect.Type`[] v8 @kind object @name `typeArguments`) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b2268.  v3:= 1I;
  #L1b226a.  v4:= 0I;
  #L1b226c.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b2272.  v1:= instanceof @variable v7 @type ^`java.lang.Class` @kind boolean;
  #L1b2276.  if v1 == 0 then goto L1b22aa;
  #L1b227a.  if v6 != 0 then goto L1b22a2;
  #L1b227e.  v2:= v3;
  #L1b2280.  v1:= v7 @kind object;
  #L1b2282.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1b2286.  call temp:= `getEnclosingClass`(v1) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L1b228c.  v1:= temp @kind object;
  #L1b228e.  if v1 != 0 then goto L1b22a6;
  #L1b2292.  if v2 == v3 then goto L1b22aa;
  #L1b2296.  v1:= new `java.lang.IllegalArgumentException`;
  #L1b229a.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b22a0.  throw v1;
  #L1b22a2.  v2:= v4;
  #L1b22a4.  goto L1b2280;
  #L1b22a6.  v3:= v4;
  #L1b22a8.  goto L1b2292;
  #L1b22aa.  v1:= length @variable v8;
  #L1b22ac.  if v4 >= v1 then goto L1b22ca;
  #L1b22b0.  v0:= v8[v4] @kind object;
  #L1b22b4.  v2:= "typeArgument == null" @kind object;
  #L1b22b8.  call temp:= `checkNotNull`(v0, v2) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b22be.  call `checkNotPrimitive`(v0) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1b22c4.  v4:= v4 + 1;
  #L1b22c8.  goto L1b22ac;
  #L1b22ca.  v5.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L1b22ce.  v5.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` := v7 @kind object;
  #L1b22d2.  call temp:= `clone`(v8) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1b22d8.  v1:= temp @kind object;
  #L1b22da.  v1:= (`java.lang.reflect.Type`[]) v1 @kind object;
  #L1b22de.  v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] := v1 @kind object;
  #L1b22e2.  return @kind void;
}
procedure `boolean` `equals`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object @name `other`) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b22f4.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b22f8.  if v0 == 0 then goto L1b2310;
  #L1b22fc.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L1b2300.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b2306.  v0:= temp;
  #L1b2308.  if v0 == 0 then goto L1b2310;
  #L1b230c.  v0:= 1I;
  #L1b230e.  return v0;
  #L1b2310.  v0:= 0I;
  #L1b2312.  goto L1b230e;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b2324.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b2328.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1b232e.  v0:= temp @kind object;
  #L1b2330.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L1b2334.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b2348.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b234c.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b2360.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2364.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$ParameterizedTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b2378.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b237c.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L1b2382.  v0:= temp;
  #L1b2384.  v1:= v2.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2388.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b238e.  v1:= temp;
  #L1b2390.  v1:= v1 ^~ v0 @kind int;
  #L1b2392.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b2396.  if v0 == 0 then goto L1b23aa;
  #L1b239a.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b239e.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b23a4.  v0:= temp;
  #L1b23a6.  v0:= v0 ^~ v1 @kind int;
  #L1b23a8.  return v0;
  #L1b23aa.  v0:= 0I;
  #L1b23ac.  goto L1b23a6;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$ParameterizedTypeImpl` v5 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b23c0.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b23c4.  v2:= length @variable v2;
  #L1b23c6.  if v2 != 0 then goto L1b23d8;
  #L1b23ca.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b23ce.  call temp:= `typeToString`(v2) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b23d4.  v2:= temp @kind object;
  #L1b23d6.  return v2 @kind object;
  #L1b23d8.  v1:= new `java.lang.StringBuilder`;
  #L1b23dc.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b23e0.  v2:= length @variable v2;
  #L1b23e2.  v2:= v2 + 1;
  #L1b23e6.  v2:= v2 * 30;
  #L1b23ea.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1b23f0.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b23f4.  call temp:= `typeToString`(v2) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b23fa.  v2:= temp @kind object;
  #L1b23fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2402.  v2:= "<" @kind object;
  #L1b2406.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b240c.  v2:= temp @kind object;
  #L1b240e.  v3:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b2412.  v4:= 0I;
  #L1b2414.  v3:= v3[v4] @kind object;
  #L1b2418.  call temp:= `typeToString`(v3) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b241e.  v3:= temp @kind object;
  #L1b2420.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2426.  v0:= 1I;
  #L1b2428.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b242c.  v2:= length @variable v2;
  #L1b242e.  if v0 >= v2 then goto L1b245a;
  #L1b2432.  v2:= ", " @kind object;
  #L1b2436.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b243c.  v2:= temp @kind object;
  #L1b243e.  v3:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b2442.  v3:= v3[v0] @kind object;
  #L1b2446.  call temp:= `typeToString`(v3) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b244c.  v3:= temp @kind object;
  #L1b244e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2454.  v0:= v0 + 1;
  #L1b2458.  goto L1b2428;
  #L1b245a.  v2:= ">" @kind object;
  #L1b245e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b2464.  v2:= temp @kind object;
  #L1b2466.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b246c.  v2:= temp @kind object;
  #L1b246e.  goto L1b23d6;
}
