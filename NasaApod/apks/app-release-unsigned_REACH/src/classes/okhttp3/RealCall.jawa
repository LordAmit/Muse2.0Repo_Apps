record `okhttp3.RealCall` @kind class @AccessFlag FINAL extends `okhttp3.Call` @kind interface {
  `okhttp3.OkHttpClient` `okhttp3.RealCall.client` @AccessFlag FINAL;
  `okhttp3.EventListener` `okhttp3.RealCall.eventListener` @AccessFlag PRIVATE;
  `boolean` `okhttp3.RealCall.executed` @AccessFlag PRIVATE;
  `boolean` `okhttp3.RealCall.forWebSocket` @AccessFlag FINAL;
  `okhttp3.Request` `okhttp3.RealCall.originalRequest` @AccessFlag FINAL;
  `okhttp3.internal.http.RetryAndFollowUpInterceptor` `okhttp3.RealCall.retryAndFollowUpInterceptor` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.RealCall` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object @name `client`, `okhttp3.Request` v3 @kind object @name `originalRequest`, `boolean` v4 @name `forWebSocket`) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L21475c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L214762.  v1.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` := v2 @kind object;
  #L214766.  v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` := v3 @kind object;
  #L21476a.  v1.`okhttp3.RealCall.forWebSocket` @type ^`boolean` := v4 @kind boolean;
  #L21476e.  v0:= new `okhttp3.internal.http.RetryAndFollowUpInterceptor`;
  #L214772.  call `<init>`(v0, v2, v4) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;Z)V` @kind direct;
  #L214778.  v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` := v0 @kind object;
  #L21477c.  return @kind void;
}
procedure `okhttp3.EventListener` `access$000`(`okhttp3.RealCall` v1 @kind object @name `x0`) @signature `Lokhttp3/RealCall;.access$000:(Lokhttp3/RealCall;)Lokhttp3/EventListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L214790.  v0:= v1.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L214794.  return v0 @kind object;
}
procedure `void` `captureCallStackTrace`(`okhttp3.RealCall` v3 @kind this) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2147a8.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L2147ae.  v1:= temp @kind object;
  #L2147b0.  v2:= "response.body().close()" @kind object;
  #L2147b4.  call temp:= `getStackTraceForCloseable`(v1, v2) @signature `Lokhttp3/internal/platform/Platform;.getStackTraceForCloseable:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L2147ba.  v0:= temp @kind object;
  #L2147bc.  v1:= v3.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L2147c0.  call `setCallStackTrace`(v1, v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.setCallStackTrace:(Ljava/lang/Object;)V` @kind virtual;
  #L2147c6.  return @kind void;
}
procedure `okhttp3.RealCall` `newRealCall`(`okhttp3.OkHttpClient` v2 @kind object @name `client`, `okhttp3.Request` v3 @kind object @name `originalRequest`, `boolean` v4 @name `forWebSocket`) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L2147d8.  v0:= new `okhttp3.RealCall`;
  #L2147dc.  call `<init>`(v0, v2, v3, v4) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @kind direct;
  #L2147e2.  call temp:= `eventListenerFactory`(v2) @signature `Lokhttp3/OkHttpClient;.eventListenerFactory:()Lokhttp3/EventListener$Factory;` @kind virtual;
  #L2147e8.  v1:= temp @kind object;
  #L2147ea.  call temp:= `create`(v1, v0) @signature `Lokhttp3/EventListener$Factory;.create:(Lokhttp3/Call;)Lokhttp3/EventListener;` @kind interface;
  #L2147f0.  v1:= temp @kind object;
  #L2147f2.  v0.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` := v1 @kind object;
  #L2147f6.  return v0 @kind object;
}
procedure `void` `cancel`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L214808.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L21480c.  call `cancel`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.cancel:()V` @kind virtual;
  #L214812.  return @kind void;
}
procedure `java.lang.Object` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L214824.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L21482a.  v0:= temp @kind object;
  #L21482c.  return v0 @kind object;
}
procedure `okhttp3.Call` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/Call;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L214840.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L214846.  v0:= temp @kind object;
  #L214848.  return v0 @kind object;
}
procedure `okhttp3.RealCall` `clone`(`okhttp3.RealCall` v3 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L21485c.  v0:= v3.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L214860.  v1:= v3.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L214864.  v2:= v3.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L214868.  call temp:= `newRealCall`(v0, v1, v2) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @kind static;
  #L21486e.  v0:= temp @kind object;
  #L214870.  return v0 @kind object;
}
procedure `void` `enqueue`(`okhttp3.RealCall` v2 @kind this, `okhttp3.Callback` v3 @kind object @name `responseCallback`) @signature `Lokhttp3/RealCall;.enqueue:(Lokhttp3/Callback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L214884.  @monitorenter v2
  #Try_start0.  
  #L214886.  v0:= v2.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L21488a.  if v0 == 0 then goto L2148a4;
  #L21488e.  v0:= new `java.lang.IllegalStateException`;
  #L214892.  v1:= "Already Executed" @kind object;
  #L214896.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21489c.  throw v0;
  #L21489e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2148a0.  @monitorexit v2
  #Try_end0.  
  #L2148a2.  throw v0;
  #L2148a4.  v0:= 1I;
  #Try_start1.  
  #L2148a6.  v2.`okhttp3.RealCall.executed` @type ^`boolean` := v0 @kind boolean;
  #L2148aa.  @monitorexit v2
  #Try_end1.  
  #L2148ac.  call `captureCallStackTrace`(v2) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @kind direct;
  #L2148b2.  v0:= v2.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L2148b6.  call `callStart`(v0, v2) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #L2148bc.  v0:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2148c0.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L2148c6.  v0:= temp @kind object;
  #L2148c8.  v1:= new `okhttp3.RealCall$AsyncCall`;
  #L2148cc.  call `<init>`(v1, v2, v3) @signature `Lokhttp3/RealCall$AsyncCall;.<init>:(Lokhttp3/RealCall;Lokhttp3/Callback;)V` @kind direct;
  #L2148d2.  call `enqueue`(v0, v1) @signature `Lokhttp3/Dispatcher;.enqueue:(Lokhttp3/RealCall$AsyncCall;)V` @kind virtual;
  #L2148d8.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L21489e;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L21489e;
}
procedure `okhttp3.Response` `execute`(`okhttp3.RealCall` v4 @kind this) @signature `Lokhttp3/RealCall;.execute:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L214900.  @monitorenter v4
  #Try_start0.  
  #L214902.  v2:= v4.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L214906.  if v2 == 0 then goto L214920;
  #L21490a.  v2:= new `java.lang.IllegalStateException`;
  #L21490e.  v3:= "Already Executed" @kind object;
  #L214912.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L214918.  throw v2;
  #L21491a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21491c.  @monitorexit v4
  #Try_end0.  
  #L21491e.  throw v2;
  #L214920.  v2:= 1I;
  #Try_start1.  
  #L214922.  v4.`okhttp3.RealCall.executed` @type ^`boolean` := v2 @kind boolean;
  #L214926.  @monitorexit v4
  #Try_end1.  
  #L214928.  call `captureCallStackTrace`(v4) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @kind direct;
  #L21492e.  v2:= v4.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L214932.  call `callStart`(v2, v4) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #Try_start2.  
  #L214938.  v2:= v4.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21493c.  call temp:= `dispatcher`(v2) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L214942.  v2:= temp @kind object;
  #L214944.  call `executed`(v2, v4) @signature `Lokhttp3/Dispatcher;.executed:(Lokhttp3/RealCall;)V` @kind virtual;
  #L21494a.  call temp:= `getResponseWithInterceptorChain`(v4) @signature `Lokhttp3/RealCall;.getResponseWithInterceptorChain:()Lokhttp3/Response;` @kind virtual;
  #L214950.  v1:= temp @kind object;
  #L214952.  if v1 != 0 then goto L21498a;
  #L214956.  v2:= new `java.io.IOException`;
  #L21495a.  v3:= "Canceled" @kind object;
  #L21495e.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L214964.  throw v2;
  #Try_end2.  
  #L214966.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #Try_start3.  
  #L214968.  v2:= v4.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L21496c.  call `callFailed`(v2, v4, v0) @signature `Lokhttp3/EventListener;.callFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L214972.  throw v0;
  #Try_end3.  
  #L214974.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L214976.  v3:= v4.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21497a.  call temp:= `dispatcher`(v3) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L214980.  v3:= temp @kind object;
  #L214982.  call `finished`(v3, v4) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall;)V` @kind virtual;
  #L214988.  throw v2;
  #L21498a.  v2:= v4.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21498e.  call temp:= `dispatcher`(v2) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L214994.  v2:= temp @kind object;
  #L214996.  call `finished`(v2, v4) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall;)V` @kind virtual;
  #L21499c.  return v1 @kind object;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L21491a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L21491a;
  catch `java.io.IOException` @[Try_start2..Try_end2] goto L214966;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L214974;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L214974;
}
procedure `okhttp3.Response` `getResponseWithInterceptorChain`(`okhttp3.RealCall` v12 @kind this) @signature `Lokhttp3/RealCall;.getResponseWithInterceptorChain:()Lokhttp3/Response;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L2149dc.  v2:= 0I;
  #L2149de.  v1:= new `java.util.ArrayList`;
  #L2149e2.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2149e8.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2149ec.  call temp:= `interceptors`(v3) @signature `Lokhttp3/OkHttpClient;.interceptors:()Ljava/util/List;` @kind virtual;
  #L2149f2.  v3:= temp @kind object;
  #L2149f4.  call temp:= `addAll`(v1, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2149fa.  v3:= v12.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L2149fe.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L214a04.  v3:= new `okhttp3.internal.http.BridgeInterceptor`;
  #L214a08.  v4:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L214a0c.  call temp:= `cookieJar`(v4) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L214a12.  v4:= temp @kind object;
  #L214a14.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/http/BridgeInterceptor;.<init>:(Lokhttp3/CookieJar;)V` @kind direct;
  #L214a1a.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L214a20.  v3:= new `okhttp3.internal.cache.CacheInterceptor`;
  #L214a24.  v4:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L214a28.  call temp:= `internalCache`(v4) @signature `Lokhttp3/OkHttpClient;.internalCache:()Lokhttp3/internal/cache/InternalCache;` @kind virtual;
  #L214a2e.  v4:= temp @kind object;
  #L214a30.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/cache/CacheInterceptor;.<init>:(Lokhttp3/internal/cache/InternalCache;)V` @kind direct;
  #L214a36.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L214a3c.  v3:= new `okhttp3.internal.connection.ConnectInterceptor`;
  #L214a40.  v4:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L214a44.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/connection/ConnectInterceptor;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L214a4a.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L214a50.  v3:= v12.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L214a54.  if v3 != 0 then goto L214a6a;
  #L214a58.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L214a5c.  call temp:= `networkInterceptors`(v3) @signature `Lokhttp3/OkHttpClient;.networkInterceptors:()Ljava/util/List;` @kind virtual;
  #L214a62.  v3:= temp @kind object;
  #L214a64.  call temp:= `addAll`(v1, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L214a6a.  v3:= new `okhttp3.internal.http.CallServerInterceptor`;
  #L214a6e.  v4:= v12.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L214a72.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/http/CallServerInterceptor;.<init>:(Z)V` @kind direct;
  #L214a78.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L214a7e.  v0:= new `okhttp3.internal.http.RealInterceptorChain`;
  #L214a82.  v5:= 0I;
  #L214a84.  v6:= v12.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L214a88.  v8:= v12.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L214a8c.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L214a90.  call temp:= `connectTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.connectTimeoutMillis:()I` @kind virtual;
  #L214a96.  v9:= temp;
  #L214a98.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L214a9c.  call temp:= `readTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.readTimeoutMillis:()I` @kind virtual;
  #L214aa2.  v10:= temp;
  #L214aa4.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L214aa8.  call temp:= `writeTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.writeTimeoutMillis:()I` @kind virtual;
  #L214aae.  v11:= temp;
  #L214ab0.  v3:= v2 @kind object;
  #L214ab2.  v4:= v2 @kind object;
  #L214ab4.  v7:= v12 @kind object;
  #L214ab6.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) @signature `Lokhttp3/internal/http/RealInterceptorChain;.<init>:(Ljava/util/List;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;ILokhttp3/Request;Lokhttp3/Call;Lokhttp3/EventListener;III)V` @kind direct;
  #L214abc.  v2:= v12.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L214ac0.  call temp:= `proceed`(v0, v2) @signature `Lokhttp3/Interceptor$Chain;.proceed:(Lokhttp3/Request;)Lokhttp3/Response;` @kind interface;
  #L214ac6.  v2:= temp @kind object;
  #L214ac8.  return v2 @kind object;
}
procedure `boolean` `isCanceled`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L214adc.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L214ae0.  call temp:= `isCanceled`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isCanceled:()Z` @kind virtual;
  #L214ae6.  v0:= temp;
  #L214ae8.  return v0;
}
procedure `boolean` `isExecuted`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isExecuted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L214afc.  @monitorenter v1
  #Try_start0.  
  #L214afe.  v0:= v1.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L214b02.  @monitorexit v1
  #L214b04.  return v0;
  #L214b06.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L214b08.  @monitorexit v1
  #L214b0a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L214b06;
}
procedure `java.lang.String` `redactedUrl`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.redactedUrl:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;

  #L214b28.  v0:= v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L214b2c.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L214b32.  v0:= temp @kind object;
  #L214b34.  call temp:= `redact`(v0) @signature `Lokhttp3/HttpUrl;.redact:()Ljava/lang/String;` @kind virtual;
  #L214b3a.  v0:= temp @kind object;
  #L214b3c.  return v0 @kind object;
}
procedure `okhttp3.Request` `request`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L214b50.  v0:= v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L214b54.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.StreamAllocation` `streamAllocation`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @AccessFlag  {
    temp;
    v0;

  #L214b68.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L214b6c.  call temp:= `streamAllocation`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @kind virtual;
  #L214b72.  v0:= temp @kind object;
  #L214b74.  return v0 @kind object;
}
procedure `java.lang.String` `toLoggableString`(`okhttp3.RealCall` v2 @kind this) @signature `Lokhttp3/RealCall;.toLoggableString:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L214b88.  v1:= new `java.lang.StringBuilder`;
  #L214b8c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L214b92.  call temp:= `isCanceled`(v2) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @kind virtual;
  #L214b98.  v0:= temp;
  #L214b9a.  if v0 == 0 then goto L214be4;
  #L214b9e.  v0:= "canceled " @kind object;
  #L214ba2.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L214ba8.  v1:= temp @kind object;
  #L214baa.  v0:= v2.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L214bae.  if v0 == 0 then goto L214bea;
  #L214bb2.  v0:= "web socket" @kind object;
  #L214bb6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L214bbc.  v0:= temp @kind object;
  #L214bbe.  v1:= " to " @kind object;
  #L214bc2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L214bc8.  v0:= temp @kind object;
  #L214bca.  call temp:= `redactedUrl`(v2) @signature `Lokhttp3/RealCall;.redactedUrl:()Ljava/lang/String;` @kind virtual;
  #L214bd0.  v1:= temp @kind object;
  #L214bd2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L214bd8.  v0:= temp @kind object;
  #L214bda.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L214be0.  v0:= temp @kind object;
  #L214be2.  return v0 @kind object;
  #L214be4.  v0:= "" @kind object;
  #L214be8.  goto L214ba2;
  #L214bea.  v0:= "call" @kind object;
  #L214bee.  goto L214bb6;
}
