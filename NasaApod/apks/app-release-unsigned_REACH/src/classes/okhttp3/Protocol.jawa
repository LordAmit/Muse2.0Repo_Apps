record `okhttp3.Protocol` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `java.lang.String` `okhttp3.Protocol.protocol` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.Protocol`[] `@@okhttp3.Protocol.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_1_0` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_1_1` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_2` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.QUIC` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.SPDY_3` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lokhttp3/Protocol;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L19bd84.  v7:= 4I;
  #L19bd86.  v6:= 3I;
  #L19bd88.  v5:= 2I;
  #L19bd8a.  v4:= 1I;
  #L19bd8c.  v3:= 0I;
  #L19bd8e.  v0:= new `okhttp3.Protocol`;
  #L19bd92.  v1:= "HTTP_1_0" @kind object;
  #L19bd96.  v2:= "http/1.0" @kind object;
  #L19bd9a.  call `<init>`(v0, v1, v3, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19bda0.  `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19bda4.  v0:= new `okhttp3.Protocol`;
  #L19bda8.  v1:= "HTTP_1_1" @kind object;
  #L19bdac.  v2:= "http/1.1" @kind object;
  #L19bdb0.  call `<init>`(v0, v1, v4, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19bdb6.  `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19bdba.  v0:= new `okhttp3.Protocol`;
  #L19bdbe.  v1:= "SPDY_3" @kind object;
  #L19bdc2.  v2:= "spdy/3.1" @kind object;
  #L19bdc6.  call `<init>`(v0, v1, v5, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19bdcc.  `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19bdd0.  v0:= new `okhttp3.Protocol`;
  #L19bdd4.  v1:= "HTTP_2" @kind object;
  #L19bdd8.  v2:= "h2" @kind object;
  #L19bddc.  call `<init>`(v0, v1, v6, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19bde2.  `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19bde6.  v0:= new `okhttp3.Protocol`;
  #L19bdea.  v1:= "QUIC" @kind object;
  #L19bdee.  v2:= "quic" @kind object;
  #L19bdf2.  call `<init>`(v0, v1, v7, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19bdf8.  `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19bdfc.  v0:= 5I;
  #L19bdfe.  v0:= new `okhttp3.Protocol`[v0];
  #L19be02.  v1:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L19be06.  v0[v3]:= v1 @kind object;
  #L19be0a.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L19be0e.  v0[v4]:= v1 @kind object;
  #L19be12.  v1:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L19be16.  v0[v5]:= v1 @kind object;
  #L19be1a.  v1:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L19be1e.  v0[v6]:= v1 @kind object;
  #L19be22.  v1:= `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` @kind object;
  #L19be26.  v0[v7]:= v1 @kind object;
  #L19be2a.  `@@okhttp3.Protocol.$VALUES` @type ^`okhttp3.Protocol`[] := v0 @kind object;
  #L19be2e.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Protocol` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object @name `protocol`) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L19be40.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L19be46.  v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` := v3 @kind object;
  #L19be4a.  return @kind void;
}
procedure `okhttp3.Protocol` `get`(`java.lang.String` v3 @kind object @name `protocol`) @signature `Lokhttp3/Protocol;.get:(Ljava/lang/String;)Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L19be5c.  v0:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L19be60.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19be64.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19be6a.  v0:= temp;
  #L19be6c.  if v0 == 0 then goto L19be76;
  #L19be70.  v0:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L19be74.  return v0 @kind object;
  #L19be76.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L19be7a.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19be7e.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19be84.  v0:= temp;
  #L19be86.  if v0 == 0 then goto L19be90;
  #L19be8a.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L19be8e.  goto L19be74;
  #L19be90.  v0:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L19be94.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19be98.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19be9e.  v0:= temp;
  #L19bea0.  if v0 == 0 then goto L19beaa;
  #L19bea4.  v0:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L19bea8.  goto L19be74;
  #L19beaa.  v0:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L19beae.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19beb2.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19beb8.  v0:= temp;
  #L19beba.  if v0 == 0 then goto L19bec4;
  #L19bebe.  v0:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L19bec2.  goto L19be74;
  #L19bec4.  v0:= `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` @kind object;
  #L19bec8.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19becc.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19bed2.  v0:= temp;
  #L19bed4.  if v0 == 0 then goto L19bede;
  #L19bed8.  v0:= `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` @kind object;
  #L19bedc.  goto L19be74;
  #L19bede.  v0:= new `java.io.IOException`;
  #L19bee2.  v1:= new `java.lang.StringBuilder`;
  #L19bee6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19beec.  v2:= "Unexpected protocol: " @kind object;
  #L19bef0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19bef6.  v1:= temp @kind object;
  #L19bef8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19befe.  v1:= temp @kind object;
  #L19bf00.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19bf06.  v1:= temp @kind object;
  #L19bf08.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19bf0e.  throw v0;
}
procedure `okhttp3.Protocol` `valueOf`(`java.lang.String` v1 @kind object @name `name`) @signature `Lokhttp3/Protocol;.valueOf:(Ljava/lang/String;)Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19bf20.  v0:= constclass @type ^`okhttp3.Protocol` @kind object;
  #L19bf24.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L19bf2a.  v0:= temp @kind object;
  #L19bf2c.  v0:= (`okhttp3.Protocol`) v0 @kind object;
  #L19bf30.  return v0 @kind object;
}
procedure `okhttp3.Protocol`[] `values`() @signature `Lokhttp3/Protocol;.values:()[Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19bf44.  v0:= `@@okhttp3.Protocol.$VALUES` @type ^`okhttp3.Protocol`[] @kind object;
  #L19bf48.  call temp:= `clone`(v0) @signature `[Lokhttp3/Protocol;.clone:()Ljava/lang/Object;` @kind virtual;
  #L19bf4e.  v0:= temp @kind object;
  #L19bf50.  v0:= (`okhttp3.Protocol`[]) v0 @kind object;
  #L19bf54.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Protocol` v1 @kind this) @signature `Lokhttp3/Protocol;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19bf68.  v0:= v1.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19bf6c.  return v0 @kind object;
}
