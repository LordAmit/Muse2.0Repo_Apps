record `okhttp3.Headers$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `okhttp3.Headers$Builder.namesAndValues` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.Headers$Builder` v2 @kind this) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L197fec.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L197ff2.  v0:= new `java.util.ArrayList`;
  #L197ff6.  v1:= 20I;
  #L197ffa.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L198000.  v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` := v0 @kind object;
  #L198004.  return @kind void;
}
procedure `void` `checkNameAndValue`(`okhttp3.Headers$Builder` v11 @kind this, `java.lang.String` v12 @kind object @name `name`, `java.lang.String` v13 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.checkNameAndValue:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L198018.  v4:= 127I;
  #L19801c.  v10:= 3I;
  #L19801e.  v9:= 2I;
  #L198020.  v8:= 1I;
  #L198022.  v7:= 0I;
  #L198024.  if v12 != 0 then goto L198038;
  #L198028.  v3:= new `java.lang.NullPointerException`;
  #L19802c.  v4:= "name == null" @kind object;
  #L198030.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198036.  throw v3;
  #L198038.  call temp:= `isEmpty`(v12) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L19803e.  v3:= temp;
  #L198040.  if v3 == 0 then goto L198054;
  #L198044.  v3:= new `java.lang.IllegalArgumentException`;
  #L198048.  v4:= "name is empty" @kind object;
  #L19804c.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198052.  throw v3;
  #L198054.  v1:= 0I;
  #L198056.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L19805c.  v2:= temp;
  #L19805e.  if v1 >= v2 then goto L1980b4;
  #L198062.  call temp:= `charAt`(v12, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L198068.  v0:= temp;
  #L19806a.  v3:= 32I;
  #L19806e.  if v0 <= v3 then goto L198076;
  #L198072.  if v0 < v4 then goto L1980ae;
  #L198076.  v3:= new `java.lang.IllegalArgumentException`;
  #L19807a.  v4:= "Unexpected char %#04x at %d in header name: %s" @kind object;
  #L19807e.  v5:= new `java.lang.Object`[v10];
  #L198082.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L198088.  v6:= temp @kind object;
  #L19808a.  v5[v7]:= v6 @kind object;
  #L19808e.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L198094.  v6:= temp @kind object;
  #L198096.  v5[v8]:= v6 @kind object;
  #L19809a.  v5[v9]:= v12 @kind object;
  #L19809e.  call temp:= `format`(v4, v5) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1980a4.  v4:= temp @kind object;
  #L1980a6.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1980ac.  throw v3;
  #L1980ae.  v1:= v1 + 1;
  #L1980b2.  goto L19805e;
  #L1980b4.  if v13 != 0 then goto L1980f6;
  #L1980b8.  v3:= new `java.lang.NullPointerException`;
  #L1980bc.  v4:= new `java.lang.StringBuilder`;
  #L1980c0.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1980c6.  v5:= "value for name " @kind object;
  #L1980ca.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1980d0.  v4:= temp @kind object;
  #L1980d2.  call temp:= `append`(v4, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1980d8.  v4:= temp @kind object;
  #L1980da.  v5:= " == null" @kind object;
  #L1980de.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1980e4.  v4:= temp @kind object;
  #L1980e6.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1980ec.  v4:= temp @kind object;
  #L1980ee.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1980f4.  throw v3;
  #L1980f6.  v1:= 0I;
  #L1980f8.  call temp:= `length`(v13) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1980fe.  v2:= temp;
  #L198100.  if v1 >= v2 then goto L198164;
  #L198104.  call temp:= `charAt`(v13, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L19810a.  v0:= temp;
  #L19810c.  v3:= 31I;
  #L198110.  if v0 > v3 then goto L19811c;
  #L198114.  v3:= 9I;
  #L198118.  if v0 != v3 then goto L198120;
  #L19811c.  if v0 < v4 then goto L19815e;
  #L198120.  v3:= new `java.lang.IllegalArgumentException`;
  #L198124.  v4:= "Unexpected char %#04x at %d in %s value: %s" @kind object;
  #L198128.  v5:= 4I;
  #L19812a.  v5:= new `java.lang.Object`[v5];
  #L19812e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L198134.  v6:= temp @kind object;
  #L198136.  v5[v7]:= v6 @kind object;
  #L19813a.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L198140.  v6:= temp @kind object;
  #L198142.  v5[v8]:= v6 @kind object;
  #L198146.  v5[v9]:= v12 @kind object;
  #L19814a.  v5[v10]:= v13 @kind object;
  #L19814e.  call temp:= `format`(v4, v5) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L198154.  v4:= temp @kind object;
  #L198156.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19815c.  throw v3;
  #L19815e.  v1:= v1 + 1;
  #L198162.  goto L198100;
  #L198164.  return @kind void;
}
procedure `okhttp3.Headers$Builder` `add`(`okhttp3.Headers$Builder` v4 @kind this, `java.lang.String` v5 @kind object @name `line`) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L198178.  v1:= ":" @kind object;
  #L19817c.  call temp:= `indexOf`(v5, v1) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L198182.  v0:= temp;
  #L198184.  v1:= -1I;
  #L198186.  if v0 != v1 then goto L1981bc;
  #L19818a.  v1:= new `java.lang.IllegalArgumentException`;
  #L19818e.  v2:= new `java.lang.StringBuilder`;
  #L198192.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L198198.  v3:= "Unexpected header: " @kind object;
  #L19819c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1981a2.  v2:= temp @kind object;
  #L1981a4.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1981aa.  v2:= temp @kind object;
  #L1981ac.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1981b2.  v2:= temp @kind object;
  #L1981b4.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1981ba.  throw v1;
  #L1981bc.  v1:= 0I;
  #L1981be.  call temp:= `substring`(v5, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1981c4.  v1:= temp @kind object;
  #L1981c6.  call temp:= `trim`(v1) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L1981cc.  v1:= temp @kind object;
  #L1981ce.  v2:= v0 + 1;
  #L1981d2.  call temp:= `substring`(v5, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L1981d8.  v2:= temp @kind object;
  #L1981da.  call temp:= `add`(v4, v1, v2) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L1981e0.  v1:= temp @kind object;
  #L1981e2.  return v1 @kind object;
}
procedure `okhttp3.Headers$Builder` `add`(`okhttp3.Headers$Builder` v1 @kind this, `java.lang.String` v2 @kind object @name `name`, `java.lang.String` v3 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1981f4.  call `checkNameAndValue`(v1, v2, v3) @signature `Lokhttp3/Headers$Builder;.checkNameAndValue:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L1981fa.  call temp:= `addLenient`(v1, v2, v3) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L198200.  v0:= temp @kind object;
  #L198202.  return v0 @kind object;
}
procedure `okhttp3.Headers$Builder` `addLenient`(`okhttp3.Headers$Builder` v3 @kind this, `java.lang.String` v4 @kind object @name `line`) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L198214.  v2:= 1I;
  #L198216.  v1:= ":" @kind object;
  #L19821a.  call temp:= `indexOf`(v4, v1, v2) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;I)I` @kind virtual;
  #L198220.  v0:= temp;
  #L198222.  v1:= -1I;
  #L198224.  if v0 == v1 then goto L198248;
  #L198228.  v1:= 0I;
  #L19822a.  call temp:= `substring`(v4, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L198230.  v1:= temp @kind object;
  #L198232.  v2:= v0 + 1;
  #L198236.  call temp:= `substring`(v4, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L19823c.  v2:= temp @kind object;
  #L19823e.  call temp:= `addLenient`(v3, v1, v2) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L198244.  v1:= temp @kind object;
  #L198246.  return v1 @kind object;
  #L198248.  v1:= ":" @kind object;
  #L19824c.  call temp:= `startsWith`(v4, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L198252.  v1:= temp;
  #L198254.  if v1 == 0 then goto L19826e;
  #L198258.  v1:= "" @kind object;
  #L19825c.  call temp:= `substring`(v4, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L198262.  v2:= temp @kind object;
  #L198264.  call temp:= `addLenient`(v3, v1, v2) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L19826a.  v1:= temp @kind object;
  #L19826c.  goto L198246;
  #L19826e.  v1:= "" @kind object;
  #L198272.  call temp:= `addLenient`(v3, v1, v4) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L198278.  v1:= temp @kind object;
  #L19827a.  goto L198246;
}
procedure `okhttp3.Headers$Builder` `addLenient`(`okhttp3.Headers$Builder` v2 @kind this, `java.lang.String` v3 @kind object @name `name`, `java.lang.String` v4 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L19828c.  v0:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L198290.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L198296.  v0:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L19829a.  call temp:= `trim`(v4) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L1982a0.  v1:= temp @kind object;
  #L1982a2.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1982a8.  return v2 @kind object;
}
procedure `okhttp3.Headers` `build`(`okhttp3.Headers$Builder` v1 @kind this) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1982bc.  v0:= new `okhttp3.Headers`;
  #L1982c0.  call `<init>`(v0, v1) @signature `Lokhttp3/Headers;.<init>:(Lokhttp3/Headers$Builder;)V` @kind direct;
  #L1982c6.  return v0 @kind object;
}
procedure `java.lang.String` `get`(`okhttp3.Headers$Builder` v3 @kind this, `java.lang.String` v4 @kind object @name `name`) @signature `Lokhttp3/Headers$Builder;.get:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1982d8.  v1:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L1982dc.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1982e2.  v1:= temp;
  #L1982e4.  v0:= v1 + -2;
  #L1982e8.  if v0 < 0 then goto L198324;
  #L1982ec.  v1:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L1982f0.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1982f6.  v1:= temp @kind object;
  #L1982f8.  v1:= (`java.lang.String`) v1 @kind object;
  #L1982fc.  call temp:= `equalsIgnoreCase`(v4, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L198302.  v1:= temp;
  #L198304.  if v1 == 0 then goto L19831e;
  #L198308.  v1:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L19830c.  v2:= v0 + 1;
  #L198310.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L198316.  v1:= temp @kind object;
  #L198318.  v1:= (`java.lang.String`) v1 @kind object;
  #L19831c.  return v1 @kind object;
  #L19831e.  v0:= v0 + -2;
  #L198322.  goto L1982e8;
  #L198324.  v1:= 0I;
  #L198326.  goto L19831c;
}
procedure `okhttp3.Headers$Builder` `removeAll`(`okhttp3.Headers$Builder` v2 @kind this, `java.lang.String` v3 @kind object @name `name`) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L198338.  v0:= 0I;
  #L19833a.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L19833e.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L198344.  v1:= temp;
  #L198346.  if v0 >= v1 then goto L198384;
  #L19834a.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L19834e.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L198354.  v1:= temp @kind object;
  #L198356.  v1:= (`java.lang.String`) v1 @kind object;
  #L19835a.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L198360.  v1:= temp;
  #L198362.  if v1 == 0 then goto L19837e;
  #L198366.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L19836a.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L198370.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L198374.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L19837a.  v0:= v0 + -2;
  #L19837e.  v0:= v0 + 2;
  #L198382.  goto L19833a;
  #L198384.  return v2 @kind object;
}
procedure `okhttp3.Headers$Builder` `set`(`okhttp3.Headers$Builder` v0 @kind this, `java.lang.String` v1 @kind object @name `name`, `java.lang.String` v2 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;

  #L198398.  call `checkNameAndValue`(v0, v1, v2) @signature `Lokhttp3/Headers$Builder;.checkNameAndValue:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L19839e.  call temp:= `removeAll`(v0, v1) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L1983a4.  call temp:= `addLenient`(v0, v1, v2) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L1983aa.  return v0 @kind object;
}
