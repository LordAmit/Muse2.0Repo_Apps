record `okhttp3.Handshake` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.CipherSuite` `okhttp3.Handshake.cipherSuite` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.Handshake.localCertificates` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.Handshake.peerCertificates` @AccessFlag PRIVATE_FINAL;
  `okhttp3.TlsVersion` `okhttp3.Handshake.tlsVersion` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Handshake` v0 @kind this, `okhttp3.TlsVersion` v1 @kind object @name `tlsVersion`, `okhttp3.CipherSuite` v2 @kind object @name `cipherSuite`, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L197cfc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L197d02.  v0.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` := v1 @kind object;
  #L197d06.  v0.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` := v2 @kind object;
  #L197d0a.  v0.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` := v3 @kind object;
  #L197d0e.  v0.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` := v4 @kind object;
  #L197d12.  return @kind void;
}
procedure `okhttp3.Handshake` `get`(`javax.net.ssl.SSLSession` v11 @kind object @name `session`) @signature `Lokhttp3/Handshake;.get:(Ljavax/net/ssl/SSLSession;)Lokhttp3/Handshake;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L197d24.  call temp:= `getCipherSuite`(v11) @signature `Ljavax/net/ssl/SSLSession;.getCipherSuite:()Ljava/lang/String;` @kind interface;
  #L197d2a.  v1:= temp @kind object;
  #L197d2c.  if v1 != 0 then goto L197d40;
  #L197d30.  v9:= new `java.lang.IllegalStateException`;
  #L197d34.  v10:= "cipherSuite == null" @kind object;
  #L197d38.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197d3e.  throw v9;
  #L197d40.  call temp:= `forJavaName`(v1) @signature `Lokhttp3/CipherSuite;.forJavaName:(Ljava/lang/String;)Lokhttp3/CipherSuite;` @kind static;
  #L197d46.  v0:= temp @kind object;
  #L197d48.  call temp:= `getProtocol`(v11) @signature `Ljavax/net/ssl/SSLSession;.getProtocol:()Ljava/lang/String;` @kind interface;
  #L197d4e.  v8:= temp @kind object;
  #L197d50.  if v8 != 0 then goto L197d64;
  #L197d54.  v9:= new `java.lang.IllegalStateException`;
  #L197d58.  v10:= "tlsVersion == null" @kind object;
  #L197d5c.  call `<init>`(v9, v10) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197d62.  throw v9;
  #L197d64.  call temp:= `forJavaName`(v8) @signature `Lokhttp3/TlsVersion;.forJavaName:(Ljava/lang/String;)Lokhttp3/TlsVersion;` @kind static;
  #L197d6a.  v7:= temp @kind object;
  #Try_start0.  
  #L197d6c.  call temp:= `getPeerCertificates`(v11) @signature `Ljavax/net/ssl/SSLSession;.getPeerCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #Try_end0.  
  #L197d72.  v5:= temp @kind object;
  #L197d74.  if v5 == 0 then goto L197da6;
  #L197d78.  call temp:= `immutableList`(v5) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L197d7e.  v6:= temp @kind object;
  #L197d80.  call temp:= `getLocalCertificates`(v11) @signature `Ljavax/net/ssl/SSLSession;.getLocalCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L197d86.  v3:= temp @kind object;
  #L197d88.  if v3 == 0 then goto L197db0;
  #L197d8c.  call temp:= `immutableList`(v3) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L197d92.  v4:= temp @kind object;
  #L197d94.  v9:= new `okhttp3.Handshake`;
  #L197d98.  call `<init>`(v9, v7, v0, v6, v4) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L197d9e.  return v9 @kind object;
  #L197da0.  v2:= Exception @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind object;
  #L197da2.  v5:= 0I;
  #L197da4.  goto L197d74;
  #L197da6.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L197dac.  v6:= temp @kind object;
  #L197dae.  goto L197d80;
  #L197db0.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L197db6.  v4:= temp @kind object;
  #L197db8.  goto L197d94;
  catch `javax.net.ssl.SSLPeerUnverifiedException` @[Try_start0..Try_end0] goto L197da0;
}
procedure `okhttp3.Handshake` `get`(`okhttp3.TlsVersion` v3 @kind object @name `tlsVersion`, `okhttp3.CipherSuite` v4 @kind object @name `cipherSuite`, `java.util.List` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lokhttp3/Handshake;.get:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)Lokhttp3/Handshake;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L197ddc.  if v3 != 0 then goto L197df0;
  #L197de0.  v0:= new `java.lang.NullPointerException`;
  #L197de4.  v1:= "tlsVersion == null" @kind object;
  #L197de8.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197dee.  throw v0;
  #L197df0.  if v4 != 0 then goto L197e04;
  #L197df4.  v0:= new `java.lang.NullPointerException`;
  #L197df8.  v1:= "cipherSuite == null" @kind object;
  #L197dfc.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197e02.  throw v0;
  #L197e04.  v0:= new `okhttp3.Handshake`;
  #L197e08.  call temp:= `immutableList`(v5) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L197e0e.  v1:= temp @kind object;
  #L197e10.  call temp:= `immutableList`(v6) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L197e16.  v2:= temp @kind object;
  #L197e18.  call `<init>`(v0, v3, v4, v1, v2) @signature `Lokhttp3/Handshake;.<init>:(Lokhttp3/TlsVersion;Lokhttp3/CipherSuite;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L197e1e.  return v0 @kind object;
}
procedure `okhttp3.CipherSuite` `cipherSuite`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.cipherSuite:()Lokhttp3/CipherSuite;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L197e30.  v0:= v1.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L197e34.  return v0 @kind object;
}
procedure `boolean` `equals`(`okhttp3.Handshake` v4 @kind this, `java.lang.Object` v5 @kind object @name `other`) @signature `Lokhttp3/Handshake;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L197e48.  v1:= 0I;
  #L197e4a.  v2:= instanceof @variable v5 @type ^`okhttp3.Handshake` @kind boolean;
  #L197e4e.  if v2 != 0 then goto L197e54;
  #L197e52.  return v1;
  #L197e54.  v0:= v5 @kind object;
  #L197e56.  v0:= (`okhttp3.Handshake`) v0 @kind object;
  #L197e5a.  v2:= v4.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L197e5e.  v3:= v0.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L197e62.  call temp:= `equals`(v2, v3) @signature `Lokhttp3/TlsVersion;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L197e68.  v2:= temp;
  #L197e6a.  if v2 == 0 then goto L197e52;
  #L197e6e.  v2:= v4.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L197e72.  v3:= v0.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L197e76.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L197e7c.  v2:= temp;
  #L197e7e.  if v2 == 0 then goto L197e52;
  #L197e82.  v2:= v4.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L197e86.  v3:= v0.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L197e8a.  call temp:= `equals`(v2, v3) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L197e90.  v2:= temp;
  #L197e92.  if v2 == 0 then goto L197e52;
  #L197e96.  v2:= v4.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L197e9a.  v3:= v0.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L197e9e.  call temp:= `equals`(v2, v3) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L197ea4.  v2:= temp;
  #L197ea6.  if v2 == 0 then goto L197e52;
  #L197eaa.  v1:= 1I;
  #L197eac.  goto L197e52;
}
procedure `int` `hashCode`(`okhttp3.Handshake` v3 @kind this) @signature `Lokhttp3/Handshake;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L197ec0.  v0:= 17I;
  #L197ec4.  v1:= v3.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L197ec8.  call temp:= `hashCode`(v1) @signature `Lokhttp3/TlsVersion;.hashCode:()I` @kind virtual;
  #L197ece.  v1:= temp;
  #L197ed0.  v0:= v1 + 527;
  #L197ed4.  v1:= v0 * 31;
  #L197ed8.  v2:= v3.`okhttp3.Handshake.cipherSuite` @type ^`okhttp3.CipherSuite` @kind object;
  #L197edc.  call temp:= `hashCode`(v2) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L197ee2.  v2:= temp;
  #L197ee4.  v0:= v1 + v2 @kind int;
  #L197ee8.  v1:= v0 * 31;
  #L197eec.  v2:= v3.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L197ef0.  call temp:= `hashCode`(v2) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L197ef6.  v2:= temp;
  #L197ef8.  v0:= v1 + v2 @kind int;
  #L197efc.  v1:= v0 * 31;
  #L197f00.  v2:= v3.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L197f04.  call temp:= `hashCode`(v2) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L197f0a.  v2:= temp;
  #L197f0c.  v0:= v1 + v2 @kind int;
  #L197f10.  return v0;
}
procedure `java.util.List` `localCertificates`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.localCertificates:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L197f24.  v0:= v1.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L197f28.  return v0 @kind object;
}
procedure `java.security.Principal` `localPrincipal`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.localPrincipal:()Ljava/security/Principal;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L197f3c.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L197f40.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L197f46.  v0:= temp;
  #L197f48.  if v0 != 0 then goto L197f68;
  #L197f4c.  v0:= v2.`okhttp3.Handshake.localCertificates` @type ^`java.util.List` @kind object;
  #L197f50.  v1:= 0I;
  #L197f52.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L197f58.  v0:= temp @kind object;
  #L197f5a.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L197f5e.  call temp:= `getSubjectX500Principal`(v0) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L197f64.  v0:= temp @kind object;
  #L197f66.  return v0 @kind object;
  #L197f68.  v0:= 0I;
  #L197f6a.  goto L197f66;
}
procedure `java.util.List` `peerCertificates`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.peerCertificates:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L197f7c.  v0:= v1.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L197f80.  return v0 @kind object;
}
procedure `java.security.Principal` `peerPrincipal`(`okhttp3.Handshake` v2 @kind this) @signature `Lokhttp3/Handshake;.peerPrincipal:()Ljava/security/Principal;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L197f94.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L197f98.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L197f9e.  v0:= temp;
  #L197fa0.  if v0 != 0 then goto L197fc0;
  #L197fa4.  v0:= v2.`okhttp3.Handshake.peerCertificates` @type ^`java.util.List` @kind object;
  #L197fa8.  v1:= 0I;
  #L197faa.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L197fb0.  v0:= temp @kind object;
  #L197fb2.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L197fb6.  call temp:= `getSubjectX500Principal`(v0) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L197fbc.  v0:= temp @kind object;
  #L197fbe.  return v0 @kind object;
  #L197fc0.  v0:= 0I;
  #L197fc2.  goto L197fbe;
}
procedure `okhttp3.TlsVersion` `tlsVersion`(`okhttp3.Handshake` v1 @kind this) @signature `Lokhttp3/Handshake;.tlsVersion:()Lokhttp3/TlsVersion;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L197fd4.  v0:= v1.`okhttp3.Handshake.tlsVersion` @type ^`okhttp3.TlsVersion` @kind object;
  #L197fd8.  return v0 @kind object;
}
