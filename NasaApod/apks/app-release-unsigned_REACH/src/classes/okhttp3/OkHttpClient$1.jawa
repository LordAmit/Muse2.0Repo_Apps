record `okhttp3.OkHttpClient$1` @kind class @AccessFlag FINAL extends `okhttp3.internal.Internal` @kind class {
}
procedure `void` `<init>`(`okhttp3.OkHttpClient$1` v0 @kind this) @signature `Lokhttp3/OkHttpClient$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L213d5c.  call `<init>`(v0) @signature `Lokhttp3/internal/Internal;.<init>:()V` @kind direct;
  #L213d62.  return @kind void;
}
procedure `void` `addLenient`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Headers$Builder` v1 @kind object @name `builder`, `java.lang.String` v2 @kind object @name `line`) @signature `Lokhttp3/OkHttpClient$1;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L213d74.  call temp:= `addLenient`(v1, v2) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L213d7a.  return @kind void;
}
procedure `void` `addLenient`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.Headers$Builder` v1 @kind object @name `builder`, `java.lang.String` v2 @kind object @name `name`, `java.lang.String` v3 @kind object @name `value`) @signature `Lokhttp3/OkHttpClient$1;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L213d8c.  call temp:= `addLenient`(v1, v2, v3) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L213d92.  return @kind void;
}
procedure `void` `apply`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.ConnectionSpec` v1 @kind object @name `tlsConfiguration`, `javax.net.ssl.SSLSocket` v2 @kind object @name `sslSocket`, `boolean` v3 @name `isFallback`) @signature `Lokhttp3/OkHttpClient$1;.apply:(Lokhttp3/ConnectionSpec;Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag PUBLIC {
    temp;

  #L213da4.  call `apply`(v1, v2, v3) @signature `Lokhttp3/ConnectionSpec;.apply:(Ljavax/net/ssl/SSLSocket;Z)V` @kind virtual;
  #L213daa.  return @kind void;
}
procedure `int` `code`(`okhttp3.OkHttpClient$1` v1 @kind this, `okhttp3.Response$Builder` v2 @kind object @name `responseBuilder`) @signature `Lokhttp3/OkHttpClient$1;.code:(Lokhttp3/Response$Builder;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L213dbc.  v0:= v2.`okhttp3.Response$Builder.code` @type ^`int`;
  #L213dc0.  return v0;
}
procedure `boolean` `connectionBecameIdle`(`okhttp3.OkHttpClient$1` v1 @kind this, `okhttp3.ConnectionPool` v2 @kind object @name `pool`, `okhttp3.internal.connection.RealConnection` v3 @kind object @name `connection`) @signature `Lokhttp3/OkHttpClient$1;.connectionBecameIdle:(Lokhttp3/ConnectionPool;Lokhttp3/internal/connection/RealConnection;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L213dd4.  call temp:= `connectionBecameIdle`(v2, v3) @signature `Lokhttp3/ConnectionPool;.connectionBecameIdle:(Lokhttp3/internal/connection/RealConnection;)Z` @kind virtual;
  #L213dda.  v0:= temp;
  #L213ddc.  return v0;
}
procedure `java.net.Socket` `deduplicate`(`okhttp3.OkHttpClient$1` v1 @kind this, `okhttp3.ConnectionPool` v2 @kind object @name `pool`, `okhttp3.Address` v3 @kind object @name `address`, `okhttp3.internal.connection.StreamAllocation` v4 @kind object @name `streamAllocation`) @signature `Lokhttp3/OkHttpClient$1;.deduplicate:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/internal/connection/StreamAllocation;)Ljava/net/Socket;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L213df0.  call temp:= `deduplicate`(v2, v3, v4) @signature `Lokhttp3/ConnectionPool;.deduplicate:(Lokhttp3/Address;Lokhttp3/internal/connection/StreamAllocation;)Ljava/net/Socket;` @kind virtual;
  #L213df6.  v0:= temp @kind object;
  #L213df8.  return v0 @kind object;
}
procedure `boolean` `equalsNonHost`(`okhttp3.OkHttpClient$1` v1 @kind this, `okhttp3.Address` v2 @kind object @name `a`, `okhttp3.Address` v3 @kind object @name `b`) @signature `Lokhttp3/OkHttpClient$1;.equalsNonHost:(Lokhttp3/Address;Lokhttp3/Address;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L213e0c.  call temp:= `equalsNonHost`(v2, v3) @signature `Lokhttp3/Address;.equalsNonHost:(Lokhttp3/Address;)Z` @kind virtual;
  #L213e12.  v0:= temp;
  #L213e14.  return v0;
}
procedure `okhttp3.internal.connection.RealConnection` `get`(`okhttp3.OkHttpClient$1` v1 @kind this, `okhttp3.ConnectionPool` v2 @kind object @name `pool`, `okhttp3.Address` v3 @kind object @name `address`, `okhttp3.internal.connection.StreamAllocation` v4 @kind object @name `streamAllocation`, `okhttp3.Route` v5 @kind object @name `route`) @signature `Lokhttp3/OkHttpClient$1;.get:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/Route;)Lokhttp3/internal/connection/RealConnection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L213e28.  call temp:= `get`(v2, v3, v4, v5) @signature `Lokhttp3/ConnectionPool;.get:(Lokhttp3/Address;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/Route;)Lokhttp3/internal/connection/RealConnection;` @kind virtual;
  #L213e2e.  v0:= temp @kind object;
  #L213e30.  return v0 @kind object;
}
procedure `okhttp3.HttpUrl` `getHttpUrlChecked`(`okhttp3.OkHttpClient$1` v1 @kind this, `java.lang.String` v2 @kind object @name `url`) @signature `Lokhttp3/OkHttpClient$1;.getHttpUrlChecked:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L213e44.  call temp:= `getChecked`(v2) @signature `Lokhttp3/HttpUrl;.getChecked:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L213e4a.  v0:= temp @kind object;
  #L213e4c.  return v0 @kind object;
}
procedure `okhttp3.Call` `newWebSocketCall`(`okhttp3.OkHttpClient$1` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object @name `client`, `okhttp3.Request` v3 @kind object @name `originalRequest`) @signature `Lokhttp3/OkHttpClient$1;.newWebSocketCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;)Lokhttp3/Call;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L213e60.  v0:= 1I;
  #L213e62.  call temp:= `newRealCall`(v2, v3, v0) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @kind static;
  #L213e68.  v0:= temp @kind object;
  #L213e6a.  return v0 @kind object;
}
procedure `void` `put`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.ConnectionPool` v1 @kind object @name `pool`, `okhttp3.internal.connection.RealConnection` v2 @kind object @name `connection`) @signature `Lokhttp3/OkHttpClient$1;.put:(Lokhttp3/ConnectionPool;Lokhttp3/internal/connection/RealConnection;)V` @AccessFlag PUBLIC {
    temp;

  #L213e7c.  call `put`(v1, v2) @signature `Lokhttp3/ConnectionPool;.put:(Lokhttp3/internal/connection/RealConnection;)V` @kind virtual;
  #L213e82.  return @kind void;
}
procedure `okhttp3.internal.connection.RouteDatabase` `routeDatabase`(`okhttp3.OkHttpClient$1` v1 @kind this, `okhttp3.ConnectionPool` v2 @kind object @name `connectionPool`) @signature `Lokhttp3/OkHttpClient$1;.routeDatabase:(Lokhttp3/ConnectionPool;)Lokhttp3/internal/connection/RouteDatabase;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L213e94.  v0:= v2.`okhttp3.ConnectionPool.routeDatabase` @type ^`okhttp3.internal.connection.RouteDatabase` @kind object;
  #L213e98.  return v0 @kind object;
}
procedure `void` `setCache`(`okhttp3.OkHttpClient$1` v0 @kind this, `okhttp3.OkHttpClient$Builder` v1 @kind object @name `builder`, `okhttp3.internal.cache.InternalCache` v2 @kind object @name `internalCache`) @signature `Lokhttp3/OkHttpClient$1;.setCache:(Lokhttp3/OkHttpClient$Builder;Lokhttp3/internal/cache/InternalCache;)V` @AccessFlag PUBLIC {
    temp;

  #L213eac.  call `setInternalCache`(v1, v2) @signature `Lokhttp3/OkHttpClient$Builder;.setInternalCache:(Lokhttp3/internal/cache/InternalCache;)V` @kind virtual;
  #L213eb2.  return @kind void;
}
procedure `okhttp3.internal.connection.StreamAllocation` `streamAllocation`(`okhttp3.OkHttpClient$1` v1 @kind this, `okhttp3.Call` v2 @kind object @name `call`) @signature `Lokhttp3/OkHttpClient$1;.streamAllocation:(Lokhttp3/Call;)Lokhttp3/internal/connection/StreamAllocation;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L213ec4.  v2:= (`okhttp3.RealCall`) v2 @kind object;
  #L213ec8.  call temp:= `streamAllocation`(v2) @signature `Lokhttp3/RealCall;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @kind virtual;
  #L213ece.  v0:= temp @kind object;
  #L213ed0.  return v0 @kind object;
}
