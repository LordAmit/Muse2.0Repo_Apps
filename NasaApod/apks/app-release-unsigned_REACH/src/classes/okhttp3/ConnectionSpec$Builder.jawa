record `okhttp3.ConnectionSpec$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.cipherSuites` @AccessFlag ;
  `boolean` `okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @AccessFlag ;
  `boolean` `okhttp3.ConnectionSpec$Builder.tls` @AccessFlag ;
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.tlsVersions` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `okhttp3.ConnectionSpec` v2 @kind object @name `connectionSpec`) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L195a5c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L195a62.  v0:= v2.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L195a66.  v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v0 @kind boolean;
  #L195a6a.  v0:= v2.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L195a6e.  v1.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L195a72.  v0:= v2.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L195a76.  v1.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L195a7a.  v0:= v2.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L195a7e.  v1.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v0 @kind boolean;
  #L195a82.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `boolean` v1 @name `tls`) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L195a94.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L195a9a.  v0.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v1 @kind boolean;
  #L195a9e.  return @kind void;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledCipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledCipherSuites:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L195ab0.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L195ab4.  if v0 != 0 then goto L195ac8;
  #L195ab8.  v0:= new `java.lang.IllegalStateException`;
  #L195abc.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L195ac0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L195ac6.  throw v0;
  #L195ac8.  v0:= 0I;
  #L195aca.  v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L195ace.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledTlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledTlsVersions:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L195ae0.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L195ae4.  if v0 != 0 then goto L195af8;
  #L195ae8.  v0:= new `java.lang.IllegalStateException`;
  #L195aec.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L195af0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L195af6.  throw v0;
  #L195af8.  v0:= 0I;
  #L195afa.  v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L195afe.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec` `build`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L195b10.  v0:= new `okhttp3.ConnectionSpec`;
  #L195b14.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @kind direct;
  #L195b1a.  return v0 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `java.lang.String`[] v3 @kind object @name `cipherSuites`) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L195b2c.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L195b30.  if v0 != 0 then goto L195b44;
  #L195b34.  v0:= new `java.lang.IllegalStateException`;
  #L195b38.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L195b3c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L195b42.  throw v0;
  #L195b44.  v0:= length @variable v3;
  #L195b46.  if v0 != 0 then goto L195b5a;
  #L195b4a.  v0:= new `java.lang.IllegalArgumentException`;
  #L195b4e.  v1:= "At least one cipher suite is required" @kind object;
  #L195b52.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L195b58.  throw v0;
  #L195b5a.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L195b60.  v0:= temp @kind object;
  #L195b62.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L195b66.  v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L195b6a.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v4 @kind this, `okhttp3.CipherSuite`[] v5 @kind object @name `cipherSuites`) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L195b7c.  v2:= v4.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L195b80.  if v2 != 0 then goto L195b94;
  #L195b84.  v2:= new `java.lang.IllegalStateException`;
  #L195b88.  v3:= "no cipher suites for cleartext connections" @kind object;
  #L195b8c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L195b92.  throw v2;
  #L195b94.  v2:= length @variable v5;
  #L195b96.  v1:= new `java.lang.String`[v2];
  #L195b9a.  v0:= 0I;
  #L195b9c.  v2:= length @variable v5;
  #L195b9e.  if v0 >= v2 then goto L195bb4;
  #L195ba2.  v2:= v5[v0] @kind object;
  #L195ba6.  v2:= v2.`okhttp3.CipherSuite.javaName` @type ^`java.lang.String` @kind object;
  #L195baa.  v1[v0]:= v2 @kind object;
  #L195bae.  v0:= v0 + 1;
  #L195bb2.  goto L195b9c;
  #L195bb4.  call temp:= `cipherSuites`(v4, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L195bba.  v2:= temp @kind object;
  #L195bbc.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `supportsTlsExtensions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `boolean` v3 @name `supportsTlsExtensions`) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L195bd0.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L195bd4.  if v0 != 0 then goto L195be8;
  #L195bd8.  v0:= new `java.lang.IllegalStateException`;
  #L195bdc.  v1:= "no TLS extensions for cleartext connections" @kind object;
  #L195be0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L195be6.  throw v0;
  #L195be8.  v2.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v3 @kind boolean;
  #L195bec.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `java.lang.String`[] v3 @kind object @name `tlsVersions`) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L195c00.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L195c04.  if v0 != 0 then goto L195c18;
  #L195c08.  v0:= new `java.lang.IllegalStateException`;
  #L195c0c.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L195c10.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L195c16.  throw v0;
  #L195c18.  v0:= length @variable v3;
  #L195c1a.  if v0 != 0 then goto L195c2e;
  #L195c1e.  v0:= new `java.lang.IllegalArgumentException`;
  #L195c22.  v1:= "At least one TLS version is required" @kind object;
  #L195c26.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L195c2c.  throw v0;
  #L195c2e.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L195c34.  v0:= temp @kind object;
  #L195c36.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L195c3a.  v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L195c3e.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v4 @kind this, `okhttp3.TlsVersion`[] v5 @kind object @name `tlsVersions`) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L195c50.  v2:= v4.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L195c54.  if v2 != 0 then goto L195c68;
  #L195c58.  v2:= new `java.lang.IllegalStateException`;
  #L195c5c.  v3:= "no TLS versions for cleartext connections" @kind object;
  #L195c60.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L195c66.  throw v2;
  #L195c68.  v2:= length @variable v5;
  #L195c6a.  v1:= new `java.lang.String`[v2];
  #L195c6e.  v0:= 0I;
  #L195c70.  v2:= length @variable v5;
  #L195c72.  if v0 >= v2 then goto L195c88;
  #L195c76.  v2:= v5[v0] @kind object;
  #L195c7a.  v2:= v2.`okhttp3.TlsVersion.javaName` @type ^`java.lang.String` @kind object;
  #L195c7e.  v1[v0]:= v2 @kind object;
  #L195c82.  v0:= v0 + 1;
  #L195c86.  goto L195c70;
  #L195c88.  call temp:= `tlsVersions`(v4, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L195c8e.  v2:= temp @kind object;
  #L195c90.  return v2 @kind object;
}
