record `okhttp3.ConnectionSpec` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.ConnectionSpec.cipherSuites` @AccessFlag FINAL;
  `boolean` `okhttp3.ConnectionSpec.supportsTlsExtensions` @AccessFlag FINAL;
  `boolean` `okhttp3.ConnectionSpec.tls` @AccessFlag FINAL;
  `java.lang.String`[] `okhttp3.ConnectionSpec.tlsVersions` @AccessFlag FINAL;
}
global `okhttp3.CipherSuite`[] `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.CLEARTEXT` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.MODERN_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/ConnectionSpec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L195ca4.  v7:= 4I;
  #L195ca6.  v6:= 3I;
  #L195ca8.  v5:= 2I;
  #L195caa.  v4:= 0I;
  #L195cac.  v3:= 1I;
  #L195cae.  v0:= 13I;
  #L195cb2.  v0:= new `okhttp3.CipherSuite`[v0];
  #L195cb6.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L195cba.  v0[v4]:= v1 @kind object;
  #L195cbe.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L195cc2.  v0[v3]:= v1 @kind object;
  #L195cc6.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L195cca.  v0[v5]:= v1 @kind object;
  #L195cce.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L195cd2.  v0[v6]:= v1 @kind object;
  #L195cd6.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L195cda.  v0[v7]:= v1 @kind object;
  #L195cde.  v1:= 5I;
  #L195ce0.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L195ce4.  v0[v1]:= v2 @kind object;
  #L195ce8.  v1:= 6I;
  #L195cea.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L195cee.  v0[v1]:= v2 @kind object;
  #L195cf2.  v1:= 7I;
  #L195cf4.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L195cf8.  v0[v1]:= v2 @kind object;
  #L195cfc.  v1:= 8I;
  #L195d00.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L195d04.  v0[v1]:= v2 @kind object;
  #L195d08.  v1:= 9I;
  #L195d0c.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L195d10.  v0[v1]:= v2 @kind object;
  #L195d14.  v1:= 10I;
  #L195d18.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L195d1c.  v0[v1]:= v2 @kind object;
  #L195d20.  v1:= 11I;
  #L195d24.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L195d28.  v0[v1]:= v2 @kind object;
  #L195d2c.  v1:= 12I;
  #L195d30.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L195d34.  v0[v1]:= v2 @kind object;
  #L195d38.  `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @type ^`okhttp3.CipherSuite`[] := v0 @kind object;
  #L195d3c.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L195d40.  call `<init>`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L195d46.  v1:= `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @type ^`okhttp3.CipherSuite`[] @kind object;
  #L195d4a.  call temp:= `cipherSuites`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L195d50.  v0:= temp @kind object;
  #L195d52.  v1:= new `okhttp3.TlsVersion`[v7];
  #L195d56.  v2:= `@@okhttp3.TlsVersion.TLS_1_3` @type ^`okhttp3.TlsVersion` @kind object;
  #L195d5a.  v1[v4]:= v2 @kind object;
  #L195d5e.  v2:= `@@okhttp3.TlsVersion.TLS_1_2` @type ^`okhttp3.TlsVersion` @kind object;
  #L195d62.  v1[v3]:= v2 @kind object;
  #L195d66.  v2:= `@@okhttp3.TlsVersion.TLS_1_1` @type ^`okhttp3.TlsVersion` @kind object;
  #L195d6a.  v1[v5]:= v2 @kind object;
  #L195d6e.  v2:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L195d72.  v1[v6]:= v2 @kind object;
  #L195d76.  call temp:= `tlsVersions`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L195d7c.  v0:= temp @kind object;
  #L195d7e.  call temp:= `supportsTlsExtensions`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L195d84.  v0:= temp @kind object;
  #L195d86.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L195d8c.  v0:= temp @kind object;
  #L195d8e.  `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L195d92.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L195d96.  v1:= `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` @kind object;
  #L195d9a.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @kind direct;
  #L195da0.  v1:= new `okhttp3.TlsVersion`[v3];
  #L195da4.  v2:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L195da8.  v1[v4]:= v2 @kind object;
  #L195dac.  call temp:= `tlsVersions`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L195db2.  v0:= temp @kind object;
  #L195db4.  call temp:= `supportsTlsExtensions`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L195dba.  v0:= temp @kind object;
  #L195dbc.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L195dc2.  v0:= temp @kind object;
  #L195dc4.  `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L195dc8.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L195dcc.  call `<init>`(v0, v4) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L195dd2.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L195dd8.  v0:= temp @kind object;
  #L195dda.  `@@okhttp3.ConnectionSpec.CLEARTEXT` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L195dde.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec` v1 @kind this, `okhttp3.ConnectionSpec$Builder` v2 @kind object @name `builder`) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L195df0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L195df6.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L195dfa.  v1.`okhttp3.ConnectionSpec.tls` @type ^`boolean` := v0 @kind boolean;
  #L195dfe.  v0:= v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L195e02.  v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L195e06.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L195e0a.  v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L195e0e.  v0:= v2.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L195e12.  v1.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` := v0 @kind boolean;
  #L195e16.  return @kind void;
}
procedure `okhttp3.ConnectionSpec` `supportedSpec`(`okhttp3.ConnectionSpec` v7 @kind this, `javax.net.ssl.SSLSocket` v8 @kind object @name `sslSocket`, `boolean` v9 @name `isFallback`) @signature `Lokhttp3/ConnectionSpec;.supportedSpec:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L195e28.  v4:= v7.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L195e2c.  if v4 == 0 then goto L195eba;
  #L195e30.  v4:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L195e34.  call temp:= `getEnabledCipherSuites`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L195e3a.  v5:= temp @kind object;
  #L195e3c.  v6:= v7.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L195e40.  call temp:= `intersect`(v4, v5, v6) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L195e46.  v0:= temp @kind object;
  #L195e48.  v4:= v7.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L195e4c.  if v4 == 0 then goto L195ec4;
  #L195e50.  v4:= `@@okhttp3.internal.Util.NATURAL_ORDER` @type ^`java.util.Comparator` @kind object;
  #L195e54.  call temp:= `getEnabledProtocols`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L195e5a.  v5:= temp @kind object;
  #L195e5c.  v6:= v7.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L195e60.  call temp:= `intersect`(v4, v5, v6) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L195e66.  v3:= temp @kind object;
  #L195e68.  call temp:= `getSupportedCipherSuites`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getSupportedCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L195e6e.  v2:= temp @kind object;
  #L195e70.  v4:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L195e74.  v5:= "TLS_FALLBACK_SCSV" @kind object;
  #L195e78.  call temp:= `indexOf`(v4, v2, v5) @signature `Lokhttp3/internal/Util;.indexOf:(Ljava/util/Comparator;[Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L195e7e.  v1:= temp;
  #L195e80.  if v9 == 0 then goto L195e96;
  #L195e84.  v4:= -1I;
  #L195e86.  if v1 == v4 then goto L195e96;
  #L195e8a.  v4:= v2[v1] @kind object;
  #L195e8e.  call temp:= `concat`(v0, v4) @signature `Lokhttp3/internal/Util;.concat:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L195e94.  v0:= temp @kind object;
  #L195e96.  v4:= new `okhttp3.ConnectionSpec$Builder`;
  #L195e9a.  call `<init>`(v4, v7) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @kind direct;
  #L195ea0.  call temp:= `cipherSuites`(v4, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L195ea6.  v4:= temp @kind object;
  #L195ea8.  call temp:= `tlsVersions`(v4, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L195eae.  v4:= temp @kind object;
  #L195eb0.  call temp:= `build`(v4) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L195eb6.  v4:= temp @kind object;
  #L195eb8.  return v4 @kind object;
  #L195eba.  call temp:= `getEnabledCipherSuites`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L195ec0.  v0:= temp @kind object;
  #L195ec2.  goto L195e48;
  #L195ec4.  call temp:= `getEnabledProtocols`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L195eca.  v3:= temp @kind object;
  #L195ecc.  goto L195e68;
}
procedure `void` `apply`(`okhttp3.ConnectionSpec` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object @name `sslSocket`, `boolean` v4 @name `isFallback`) @signature `Lokhttp3/ConnectionSpec;.apply:(Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L195ee0.  call temp:= `supportedSpec`(v2, v3, v4) @signature `Lokhttp3/ConnectionSpec;.supportedSpec:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @kind direct;
  #L195ee6.  v0:= temp @kind object;
  #L195ee8.  v1:= v0.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L195eec.  if v1 == 0 then goto L195efa;
  #L195ef0.  v1:= v0.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L195ef4.  call `setEnabledProtocols`(v3, v1) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledProtocols:([Ljava/lang/String;)V` @kind virtual;
  #L195efa.  v1:= v0.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L195efe.  if v1 == 0 then goto L195f0c;
  #L195f02.  v1:= v0.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L195f06.  call `setEnabledCipherSuites`(v3, v1) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledCipherSuites:([Ljava/lang/String;)V` @kind virtual;
  #L195f0c.  return @kind void;
}
procedure `java.util.List` `cipherSuites`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L195f20.  v0:= v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L195f24.  if v0 == 0 then goto L195f36;
  #L195f28.  v0:= v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L195f2c.  call temp:= `forJavaNames`(v0) @signature `Lokhttp3/CipherSuite;.forJavaNames:([Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L195f32.  v0:= temp @kind object;
  #L195f34.  return v0 @kind object;
  #L195f36.  v0:= 0I;
  #L195f38.  goto L195f34;
}
procedure `boolean` `equals`(`okhttp3.ConnectionSpec` v5 @kind this, `java.lang.Object` v6 @kind object @name `other`) @signature `Lokhttp3/ConnectionSpec;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L195f4c.  v2:= 1I;
  #L195f4e.  v1:= 0I;
  #L195f50.  v3:= instanceof @variable v6 @type ^`okhttp3.ConnectionSpec` @kind boolean;
  #L195f54.  if v3 != 0 then goto L195f5a;
  #L195f58.  return v1;
  #L195f5a.  if v6 != v5 then goto L195f62;
  #L195f5e.  v1:= v2;
  #L195f60.  goto L195f58;
  #L195f62.  v0:= v6 @kind object;
  #L195f64.  v0:= (`okhttp3.ConnectionSpec`) v0 @kind object;
  #L195f68.  v3:= v5.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L195f6c.  v4:= v0.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L195f70.  if v3 != v4 then goto L195f58;
  #L195f74.  v3:= v5.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L195f78.  if v3 == 0 then goto L195fb0;
  #L195f7c.  v3:= v5.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L195f80.  v4:= v0.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L195f84.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L195f8a.  v3:= temp;
  #L195f8c.  if v3 == 0 then goto L195f58;
  #L195f90.  v3:= v5.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L195f94.  v4:= v0.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L195f98.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L195f9e.  v3:= temp;
  #L195fa0.  if v3 == 0 then goto L195f58;
  #L195fa4.  v3:= v5.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L195fa8.  v4:= v0.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L195fac.  if v3 != v4 then goto L195f58;
  #L195fb0.  v1:= v2;
  #L195fb2.  goto L195f58;
}
procedure `int` `hashCode`(`okhttp3.ConnectionSpec` v3 @kind this) @signature `Lokhttp3/ConnectionSpec;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L195fc4.  v0:= 17I;
  #L195fc8.  v1:= v3.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L195fcc.  if v1 == 0 then goto L196006;
  #L195fd0.  v1:= v3.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L195fd4.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L195fda.  v1:= temp;
  #L195fdc.  v0:= v1 + 527;
  #L195fe0.  v1:= v0 * 31;
  #L195fe4.  v2:= v3.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L195fe8.  call temp:= `hashCode`(v2) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L195fee.  v2:= temp;
  #L195ff0.  v0:= v1 + v2 @kind int;
  #L195ff4.  v2:= v0 * 31;
  #L195ff8.  v1:= v3.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L195ffc.  if v1 == 0 then goto L196008;
  #L196000.  v1:= 0I;
  #L196002.  v0:= v2 + v1 @kind int;
  #L196006.  return v0;
  #L196008.  v1:= 1I;
  #L19600a.  goto L196002;
}
procedure `boolean` `isCompatible`(`okhttp3.ConnectionSpec` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object @name `socket`) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L19601c.  v0:= 0I;
  #L19601e.  v1:= v4.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L196022.  if v1 != 0 then goto L196028;
  #L196026.  return v0;
  #L196028.  v1:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L19602c.  if v1 == 0 then goto L19604c;
  #L196030.  v1:= `@@okhttp3.internal.Util.NATURAL_ORDER` @type ^`java.util.Comparator` @kind object;
  #L196034.  v2:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L196038.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L19603e.  v3:= temp @kind object;
  #L196040.  call temp:= `nonEmptyIntersection`(v1, v2, v3) @signature `Lokhttp3/internal/Util;.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L196046.  v1:= temp;
  #L196048.  if v1 == 0 then goto L196026;
  #L19604c.  v1:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L196050.  if v1 == 0 then goto L196070;
  #L196054.  v1:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L196058.  v2:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L19605c.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L196062.  v3:= temp @kind object;
  #L196064.  call temp:= `nonEmptyIntersection`(v1, v2, v3) @signature `Lokhttp3/internal/Util;.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L19606a.  v1:= temp;
  #L19606c.  if v1 == 0 then goto L196026;
  #L196070.  v0:= 1I;
  #L196072.  goto L196026;
}
procedure `boolean` `isTls`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.isTls:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L196084.  v0:= v1.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L196088.  return v0;
}
procedure `boolean` `supportsTlsExtensions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.supportsTlsExtensions:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19609c.  v0:= v1.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L1960a0.  return v0;
}
procedure `java.util.List` `tlsVersions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1960b4.  v0:= v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1960b8.  if v0 == 0 then goto L1960ca;
  #L1960bc.  v0:= v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1960c0.  call temp:= `forJavaNames`(v0) @signature `Lokhttp3/TlsVersion;.forJavaNames:([Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L1960c6.  v0:= temp @kind object;
  #L1960c8.  return v0 @kind object;
  #L1960ca.  v0:= 0I;
  #L1960cc.  goto L1960c8;
}
procedure `java.lang.String` `toString`(`okhttp3.ConnectionSpec` v4 @kind this) @signature `Lokhttp3/ConnectionSpec;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1960e0.  v2:= v4.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L1960e4.  if v2 != 0 then goto L1960ee;
  #L1960e8.  v2:= "ConnectionSpec()" @kind object;
  #L1960ec.  return v2 @kind object;
  #L1960ee.  v2:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1960f2.  if v2 == 0 then goto L19617e;
  #L1960f6.  call temp:= `cipherSuites`(v4) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @kind virtual;
  #L1960fc.  v2:= temp @kind object;
  #L1960fe.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L196104.  v0:= temp @kind object;
  #L196106.  v2:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L19610a.  if v2 == 0 then goto L196184;
  #L19610e.  call temp:= `tlsVersions`(v4) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @kind virtual;
  #L196114.  v2:= temp @kind object;
  #L196116.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L19611c.  v1:= temp @kind object;
  #L19611e.  v2:= new `java.lang.StringBuilder`;
  #L196122.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L196128.  v3:= "ConnectionSpec(cipherSuites=" @kind object;
  #L19612c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L196132.  v2:= temp @kind object;
  #L196134.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19613a.  v2:= temp @kind object;
  #L19613c.  v3:= ", tlsVersions=" @kind object;
  #L196140.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L196146.  v2:= temp @kind object;
  #L196148.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19614e.  v2:= temp @kind object;
  #L196150.  v3:= ", supportsTlsExtensions=" @kind object;
  #L196154.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19615a.  v2:= temp @kind object;
  #L19615c.  v3:= v4.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L196160.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L196166.  v2:= temp @kind object;
  #L196168.  v3:= ")" @kind object;
  #L19616c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L196172.  v2:= temp @kind object;
  #L196174.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19617a.  v2:= temp @kind object;
  #L19617c.  goto L1960ec;
  #L19617e.  v0:= "[all enabled]" @kind object;
  #L196182.  goto L196106;
  #L196184.  v1:= "[all enabled]" @kind object;
  #L196188.  goto L19611e;
}
