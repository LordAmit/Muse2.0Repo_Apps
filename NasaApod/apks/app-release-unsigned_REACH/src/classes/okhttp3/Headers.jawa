record `okhttp3.Headers` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.Headers.namesAndValues` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.Headers` v2 @kind this, `okhttp3.Headers$Builder` v3 @kind object @name `builder`) @signature `Lokhttp3/Headers;.<init>:(Lokhttp3/Headers$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1983bc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1983c2.  v0:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L1983c6.  v1:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L1983ca.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1983d0.  v1:= temp;
  #L1983d2.  v1:= new `java.lang.String`[v1];
  #L1983d6.  call temp:= `toArray`(v0, v1) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L1983dc.  v0:= temp @kind object;
  #L1983de.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L1983e2.  v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] := v0 @kind object;
  #L1983e6.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Headers` v0 @kind this, `java.lang.String`[] v1 @kind object @name `namesAndValues`) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1983f8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1983fe.  v0.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] := v1 @kind object;
  #L198402.  return @kind void;
}
procedure `java.lang.String` `get`(`java.lang.String`[] v2 @kind object @name `namesAndValues`, `java.lang.String` v3 @kind object @name `name`) @signature `Lokhttp3/Headers;.get:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L198414.  v1:= length @variable v2;
  #L198416.  v0:= v1 + -2;
  #L19841a.  if v0 < 0 then goto L19843e;
  #L19841e.  v1:= v2[v0] @kind object;
  #L198422.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L198428.  v1:= temp;
  #L19842a.  if v1 == 0 then goto L198438;
  #L19842e.  v1:= v0 + 1;
  #L198432.  v1:= v2[v1] @kind object;
  #L198436.  return v1 @kind object;
  #L198438.  v0:= v0 + -2;
  #L19843c.  goto L19841a;
  #L19843e.  v1:= 0I;
  #L198440.  goto L198436;
}
procedure `okhttp3.Headers` `of`(`java.util.Map` v9 @kind object) @signature `Lokhttp3/Headers;.of:(Ljava/util/Map;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L198454.  v8:= 0I;
  #L198456.  v7:= -1I;
  #L198458.  if v9 != 0 then goto L19846c;
  #L19845c.  v5:= new `java.lang.NullPointerException`;
  #L198460.  v6:= "headers == null" @kind object;
  #L198464.  call `<init>`(v5, v6) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19846a.  throw v5;
  #L19846c.  call temp:= `size`(v9) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L198472.  v5:= temp;
  #L198474.  v5:= v5 * 2;
  #L198478.  v3:= new `java.lang.String`[v5];
  #L19847c.  v1:= 0I;
  #L19847e.  call temp:= `entrySet`(v9) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L198484.  v5:= temp @kind object;
  #L198486.  call temp:= `iterator`(v5) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L19848c.  v6:= temp @kind object;
  #L19848e.  call temp:= `hasNext`(v6) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L198494.  v5:= temp;
  #L198496.  if v5 == 0 then goto L198572;
  #L19849a.  call temp:= `next`(v6) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1984a0.  v0:= temp @kind object;
  #L1984a2.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L1984a6.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L1984ac.  v5:= temp @kind object;
  #L1984ae.  if v5 == 0 then goto L1984be;
  #L1984b2.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1984b8.  v5:= temp @kind object;
  #L1984ba.  if v5 != 0 then goto L1984ce;
  #L1984be.  v5:= new `java.lang.IllegalArgumentException`;
  #L1984c2.  v6:= "Headers cannot be null" @kind object;
  #L1984c6.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1984cc.  throw v5;
  #L1984ce.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L1984d4.  v5:= temp @kind object;
  #L1984d6.  v5:= (`java.lang.String`) v5 @kind object;
  #L1984da.  call temp:= `trim`(v5) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L1984e0.  v2:= temp @kind object;
  #L1984e2.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1984e8.  v5:= temp @kind object;
  #L1984ea.  v5:= (`java.lang.String`) v5 @kind object;
  #L1984ee.  call temp:= `trim`(v5) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L1984f4.  v4:= temp @kind object;
  #L1984f6.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1984fc.  v5:= temp;
  #L1984fe.  if v5 == 0 then goto L19851a;
  #L198502.  call temp:= `indexOf`(v2, v8) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L198508.  v5:= temp;
  #L19850a.  if v5 != v7 then goto L19851a;
  #L19850e.  call temp:= `indexOf`(v4, v8) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L198514.  v5:= temp;
  #L198516.  if v5 == v7 then goto L198560;
  #L19851a.  v5:= new `java.lang.IllegalArgumentException`;
  #L19851e.  v6:= new `java.lang.StringBuilder`;
  #L198522.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L198528.  v7:= "Unexpected header: " @kind object;
  #L19852c.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198532.  v6:= temp @kind object;
  #L198534.  call temp:= `append`(v6, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19853a.  v6:= temp @kind object;
  #L19853c.  v7:= ": " @kind object;
  #L198540.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198546.  v6:= temp @kind object;
  #L198548.  call temp:= `append`(v6, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19854e.  v6:= temp @kind object;
  #L198550.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L198556.  v6:= temp @kind object;
  #L198558.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19855e.  throw v5;
  #L198560.  v3[v1]:= v2 @kind object;
  #L198564.  v5:= v1 + 1;
  #L198568.  v3[v5]:= v4 @kind object;
  #L19856c.  v1:= v1 + 2;
  #L198570.  goto L19848e;
  #L198572.  v5:= new `okhttp3.Headers`;
  #L198576.  call `<init>`(v5, v3) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L19857c.  return v5 @kind object;
}
procedure `okhttp3.Headers` `of`(`java.lang.String`[] v6 @kind object @name `namesAndValues`) @signature `Lokhttp3/Headers;.of:([Ljava/lang/String;)Lokhttp3/Headers;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L198590.  v5:= 0I;
  #L198592.  v4:= -1I;
  #L198594.  if v6 != 0 then goto L1985a8;
  #L198598.  v3:= new `java.lang.NullPointerException`;
  #L19859c.  v4:= "namesAndValues == null" @kind object;
  #L1985a0.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1985a6.  throw v3;
  #L1985a8.  v3:= length @variable v6;
  #L1985aa.  v3:= v3 %% 2;
  #L1985ae.  if v3 == 0 then goto L1985c2;
  #L1985b2.  v3:= new `java.lang.IllegalArgumentException`;
  #L1985b6.  v4:= "Expected alternating header names and values" @kind object;
  #L1985ba.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1985c0.  throw v3;
  #L1985c2.  call temp:= `clone`(v6) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1985c8.  v6:= temp @kind object;
  #L1985ca.  v6:= (`java.lang.String`[]) v6 @kind object;
  #L1985ce.  v0:= 0I;
  #L1985d0.  v3:= length @variable v6;
  #L1985d2.  if v0 >= v3 then goto L198604;
  #L1985d6.  v3:= v6[v0] @kind object;
  #L1985da.  if v3 != 0 then goto L1985ee;
  #L1985de.  v3:= new `java.lang.IllegalArgumentException`;
  #L1985e2.  v4:= "Headers cannot be null" @kind object;
  #L1985e6.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1985ec.  throw v3;
  #L1985ee.  v3:= v6[v0] @kind object;
  #L1985f2.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L1985f8.  v3:= temp @kind object;
  #L1985fa.  v6[v0]:= v3 @kind object;
  #L1985fe.  v0:= v0 + 1;
  #L198602.  goto L1985d0;
  #L198604.  v0:= 0I;
  #L198606.  v3:= length @variable v6;
  #L198608.  if v0 >= v3 then goto L198688;
  #L19860c.  v1:= v6[v0] @kind object;
  #L198610.  v3:= v0 + 1;
  #L198614.  v2:= v6[v3] @kind object;
  #L198618.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L19861e.  v3:= temp;
  #L198620.  if v3 == 0 then goto L19863c;
  #L198624.  call temp:= `indexOf`(v1, v5) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L19862a.  v3:= temp;
  #L19862c.  if v3 != v4 then goto L19863c;
  #L198630.  call temp:= `indexOf`(v2, v5) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L198636.  v3:= temp;
  #L198638.  if v3 == v4 then goto L198682;
  #L19863c.  v3:= new `java.lang.IllegalArgumentException`;
  #L198640.  v4:= new `java.lang.StringBuilder`;
  #L198644.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19864a.  v5:= "Unexpected header: " @kind object;
  #L19864e.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198654.  v4:= temp @kind object;
  #L198656.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19865c.  v4:= temp @kind object;
  #L19865e.  v5:= ": " @kind object;
  #L198662.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198668.  v4:= temp @kind object;
  #L19866a.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198670.  v4:= temp @kind object;
  #L198672.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L198678.  v4:= temp @kind object;
  #L19867a.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L198680.  throw v3;
  #L198682.  v0:= v0 + 2;
  #L198686.  goto L198606;
  #L198688.  v3:= new `okhttp3.Headers`;
  #L19868c.  call `<init>`(v3, v6) @signature `Lokhttp3/Headers;.<init>:([Ljava/lang/String;)V` @kind direct;
  #L198692.  return v3 @kind object;
}
procedure `long` `byteCount`(`okhttp3.Headers` v6 @kind this) @signature `Lokhttp3/Headers;.byteCount:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1986a4.  v4:= v6.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L1986a8.  v4:= length @variable v4;
  #L1986aa.  v4:= v4 * 2;
  #L1986ae.  v2:= (`long`) v4 @kind i2l;
  #L1986b0.  v0:= 0I;
  #L1986b2.  v4:= v6.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L1986b6.  v1:= length @variable v4;
  #L1986b8.  if v0 >= v1 then goto L1986d6;
  #L1986bc.  v4:= v6.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L1986c0.  v4:= v4[v0] @kind object;
  #L1986c4.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1986ca.  v4:= temp;
  #L1986cc.  v4:= (`long`) v4 @kind i2l;
  #L1986ce.  v2:= v2 + v4 @kind long;
  #L1986d0.  v0:= v0 + 1;
  #L1986d4.  goto L1986b8;
  #L1986d6.  return v2 @kind wide;
}
procedure `boolean` `equals`(`okhttp3.Headers` v2 @kind this, `java.lang.Object` v3 @kind object @name `other`) @signature `Lokhttp3/Headers;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1986e8.  v0:= instanceof @variable v3 @type ^`okhttp3.Headers` @kind boolean;
  #L1986ec.  if v0 == 0 then goto L19870c;
  #L1986f0.  v3:= (`okhttp3.Headers`) v3 @kind object;
  #L1986f4.  v0:= v3.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L1986f8.  v1:= v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L1986fc.  call temp:= `equals`(v0, v1) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L198702.  v0:= temp;
  #L198704.  if v0 == 0 then goto L19870c;
  #L198708.  v0:= 1I;
  #L19870a.  return v0;
  #L19870c.  v0:= 0I;
  #L19870e.  goto L19870a;
}
procedure `java.lang.String` `get`(`okhttp3.Headers` v1 @kind this, `java.lang.String` v2 @kind object @name `name`) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L198720.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L198724.  call temp:= `get`(v0, v2) @signature `Lokhttp3/Headers;.get:([Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L19872a.  v0:= temp @kind object;
  #L19872c.  return v0 @kind object;
}
procedure `java.util.Date` `getDate`(`okhttp3.Headers` v2 @kind this, `java.lang.String` v3 @kind object @name `name`) @signature `Lokhttp3/Headers;.getDate:(Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L198740.  call temp:= `get`(v2, v3) @signature `Lokhttp3/Headers;.get:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L198746.  v0:= temp @kind object;
  #L198748.  if v0 == 0 then goto L198756;
  #L19874c.  call temp:= `parse`(v0) @signature `Lokhttp3/internal/http/HttpDate;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L198752.  v1:= temp @kind object;
  #L198754.  return v1 @kind object;
  #L198756.  v1:= 0I;
  #L198758.  goto L198754;
}
procedure `int` `hashCode`(`okhttp3.Headers` v1 @kind this) @signature `Lokhttp3/Headers;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19876c.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L198770.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L198776.  v0:= temp;
  #L198778.  return v0;
}
procedure `java.lang.String` `name`(`okhttp3.Headers` v2 @kind this, `int` v3 @name `index`) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19878c.  v0:= v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L198790.  v1:= v3 * 2;
  #L198794.  v0:= v0[v1] @kind object;
  #L198798.  return v0 @kind object;
}
procedure `java.util.Set` `names`(`okhttp3.Headers` v4 @kind this) @signature `Lokhttp3/Headers;.names:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1987ac.  v1:= new `java.util.TreeSet`;
  #L1987b0.  v3:= `@@java.lang.String.CASE_INSENSITIVE_ORDER` @type ^`java.util.Comparator` @kind object;
  #L1987b4.  call `<init>`(v1, v3) @signature `Ljava/util/TreeSet;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L1987ba.  v0:= 0I;
  #L1987bc.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L1987c2.  v2:= temp;
  #L1987c4.  if v0 >= v2 then goto L1987dc;
  #L1987c8.  call temp:= `name`(v4, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L1987ce.  v3:= temp @kind object;
  #L1987d0.  call temp:= `add`(v1, v3) @signature `Ljava/util/TreeSet;.add:(Ljava/lang/Object;)Z` @kind virtual;
  #L1987d6.  v0:= v0 + 1;
  #L1987da.  goto L1987c4;
  #L1987dc.  call temp:= `unmodifiableSet`(v1) @signature `Ljava/util/Collections;.unmodifiableSet:(Ljava/util/Set;)Ljava/util/Set;` @kind static;
  #L1987e2.  v3:= temp @kind object;
  #L1987e4.  return v3 @kind object;
}
procedure `okhttp3.Headers$Builder` `newBuilder`(`okhttp3.Headers` v3 @kind this) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1987f8.  v0:= new `okhttp3.Headers$Builder`;
  #L1987fc.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L198802.  v1:= v0.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L198806.  v2:= v3.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L19880a.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/Collections;.addAll:(Ljava/util/Collection;[Ljava/lang/Object;)Z` @kind static;
  #L198810.  return v0 @kind object;
}
procedure `int` `size`(`okhttp3.Headers` v1 @kind this) @signature `Lokhttp3/Headers;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L198824.  v0:= v1.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L198828.  v0:= length @variable v0;
  #L19882a.  v0:= v0 / 2;
  #L19882e.  return v0;
}
procedure `java.util.Map` `toMultimap`(`okhttp3.Headers` v7 @kind this) @signature `Lokhttp3/Headers;.toMultimap:()Ljava/util/Map;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L198840.  v2:= new `java.util.TreeMap`;
  #L198844.  v5:= `@@java.lang.String.CASE_INSENSITIVE_ORDER` @type ^`java.util.Comparator` @kind object;
  #L198848.  call `<init>`(v2, v5) @signature `Ljava/util/TreeMap;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L19884e.  v0:= 0I;
  #L198850.  call temp:= `size`(v7) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L198856.  v3:= temp;
  #L198858.  if v0 >= v3 then goto L1988a6;
  #L19885c.  call temp:= `name`(v7, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L198862.  v5:= temp @kind object;
  #L198864.  v6:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L198868.  call temp:= `toLowerCase`(v5, v6) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L19886e.  v1:= temp @kind object;
  #L198870.  call temp:= `get`(v2, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L198876.  v4:= temp @kind object;
  #L198878.  v4:= (`java.util.List`) v4 @kind object;
  #L19887c.  if v4 != 0 then goto L198892;
  #L198880.  v4:= new `java.util.ArrayList`;
  #L198884.  v5:= 2I;
  #L198886.  call `<init>`(v4, v5) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L19888c.  call temp:= `put`(v2, v1, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L198892.  call temp:= `value`(v7, v0) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L198898.  v5:= temp @kind object;
  #L19889a.  call temp:= `add`(v4, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1988a0.  v0:= v0 + 1;
  #L1988a4.  goto L198858;
  #L1988a6.  return v2 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Headers` v5 @kind this) @signature `Lokhttp3/Headers;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1988b8.  v1:= new `java.lang.StringBuilder`;
  #L1988bc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1988c2.  v0:= 0I;
  #L1988c4.  call temp:= `size`(v5) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L1988ca.  v2:= temp;
  #L1988cc.  if v0 >= v2 then goto L19890c;
  #L1988d0.  call temp:= `name`(v5, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L1988d6.  v3:= temp @kind object;
  #L1988d8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1988de.  v3:= temp @kind object;
  #L1988e0.  v4:= ": " @kind object;
  #L1988e4.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1988ea.  v3:= temp @kind object;
  #L1988ec.  call temp:= `value`(v5, v0) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L1988f2.  v4:= temp @kind object;
  #L1988f4.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1988fa.  v3:= temp @kind object;
  #L1988fc.  v4:= "\n" @kind object;
  #L198900.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L198906.  v0:= v0 + 1;
  #L19890a.  goto L1988cc;
  #L19890c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L198912.  v3:= temp @kind object;
  #L198914.  return v3 @kind object;
}
procedure `java.lang.String` `value`(`okhttp3.Headers` v2 @kind this, `int` v3 @name `index`) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L198928.  v0:= v2.`okhttp3.Headers.namesAndValues` @type ^`java.lang.String`[] @kind object;
  #L19892c.  v1:= v3 * 2;
  #L198930.  v1:= v1 + 1;
  #L198934.  v0:= v0[v1] @kind object;
  #L198938.  return v0 @kind object;
}
procedure `java.util.List` `values`(`okhttp3.Headers` v4 @kind this, `java.lang.String` v5 @kind object @name `name`) @signature `Lokhttp3/Headers;.values:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L19894c.  v1:= 0I;
  #L19894e.  v0:= 0I;
  #L198950.  call temp:= `size`(v4) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L198956.  v2:= temp;
  #L198958.  if v0 >= v2 then goto L198994;
  #L19895c.  call temp:= `name`(v4, v0) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L198962.  v3:= temp @kind object;
  #L198964.  call temp:= `equalsIgnoreCase`(v5, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L19896a.  v3:= temp;
  #L19896c.  if v3 == 0 then goto L19898e;
  #L198970.  if v1 != 0 then goto L198980;
  #L198974.  v1:= new `java.util.ArrayList`;
  #L198978.  v3:= 2I;
  #L19897a.  call `<init>`(v1, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L198980.  call temp:= `value`(v4, v0) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L198986.  v3:= temp @kind object;
  #L198988.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L19898e.  v0:= v0 + 1;
  #L198992.  goto L198958;
  #L198994.  if v1 == 0 then goto L1989a2;
  #L198998.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L19899e.  v3:= temp @kind object;
  #L1989a0.  return v3 @kind object;
  #L1989a2.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L1989a8.  v3:= temp @kind object;
  #L1989aa.  goto L1989a0;
}
