record `okhttp3.Response$Builder` @kind class @AccessFlag PUBLIC {
  `okhttp3.ResponseBody` `okhttp3.Response$Builder.body` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.cacheResponse` @AccessFlag ;
  `int` `okhttp3.Response$Builder.code` @AccessFlag ;
  `okhttp3.Handshake` `okhttp3.Response$Builder.handshake` @AccessFlag ;
  `okhttp3.Headers$Builder` `okhttp3.Response$Builder.headers` @AccessFlag ;
  `java.lang.String` `okhttp3.Response$Builder.message` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.networkResponse` @AccessFlag ;
  `okhttp3.Response` `okhttp3.Response$Builder.priorResponse` @AccessFlag ;
  `okhttp3.Protocol` `okhttp3.Response$Builder.protocol` @AccessFlag ;
  `long` `okhttp3.Response$Builder.receivedResponseAtMillis` @AccessFlag ;
  `okhttp3.Request` `okhttp3.Response$Builder.request` @AccessFlag ;
  `long` `okhttp3.Response$Builder.sentRequestAtMillis` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v1 @kind this) @signature `Lokhttp3/Response$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L19c790.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19c796.  v0:= -1I;
  #L19c798.  v1.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L19c79c.  v0:= new `okhttp3.Headers$Builder`;
  #L19c7a0.  call `<init>`(v0) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L19c7a6.  v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L19c7aa.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Response$Builder` v2 @kind this, `okhttp3.Response` v3 @kind object @name `response`) @signature `Lokhttp3/Response$Builder;.<init>:(Lokhttp3/Response;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L19c7bc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19c7c2.  v0:= -1I;
  #L19c7c4.  v2.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L19c7c8.  v0:= v3.`okhttp3.Response.request` @type ^`okhttp3.Request` @kind object;
  #L19c7cc.  v2.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` := v0 @kind object;
  #L19c7d0.  v0:= v3.`okhttp3.Response.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L19c7d4.  v2.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19c7d8.  v0:= v3.`okhttp3.Response.code` @type ^`int`;
  #L19c7dc.  v2.`okhttp3.Response$Builder.code` @type ^`int` := v0;
  #L19c7e0.  v0:= v3.`okhttp3.Response.message` @type ^`java.lang.String` @kind object;
  #L19c7e4.  v2.`okhttp3.Response$Builder.message` @type ^`java.lang.String` := v0 @kind object;
  #L19c7e8.  v0:= v3.`okhttp3.Response.handshake` @type ^`okhttp3.Handshake` @kind object;
  #L19c7ec.  v2.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` := v0 @kind object;
  #L19c7f0.  v0:= v3.`okhttp3.Response.headers` @type ^`okhttp3.Headers` @kind object;
  #L19c7f4.  call temp:= `newBuilder`(v0) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L19c7fa.  v0:= temp @kind object;
  #L19c7fc.  v2.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L19c800.  v0:= v3.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L19c804.  v2.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` := v0 @kind object;
  #L19c808.  v0:= v3.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L19c80c.  v2.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L19c810.  v0:= v3.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L19c814.  v2.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L19c818.  v0:= v3.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L19c81c.  v2.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` := v0 @kind object;
  #L19c820.  v0:= v3.`okhttp3.Response.sentRequestAtMillis` @type ^`long` @kind wide;
  #L19c824.  v2.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` := v0 @kind wide;
  #L19c828.  v0:= v3.`okhttp3.Response.receivedResponseAtMillis` @type ^`long` @kind wide;
  #L19c82c.  v2.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` := v0 @kind wide;
  #L19c830.  return @kind void;
}
procedure `void` `checkPriorResponse`(`okhttp3.Response$Builder` v2 @kind this, `okhttp3.Response` v3 @kind object @name `response`) @signature `Lokhttp3/Response$Builder;.checkPriorResponse:(Lokhttp3/Response;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L19c844.  v0:= v3.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L19c848.  if v0 == 0 then goto L19c85c;
  #L19c84c.  v0:= new `java.lang.IllegalArgumentException`;
  #L19c850.  v1:= "priorResponse.body != null" @kind object;
  #L19c854.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19c85a.  throw v0;
  #L19c85c.  return @kind void;
}
procedure `void` `checkSupportResponse`(`okhttp3.Response$Builder` v3 @kind this, `java.lang.String` v4 @kind object @name `name`, `okhttp3.Response` v5 @kind object @name `response`) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L19c870.  v0:= v5.`okhttp3.Response.body` @type ^`okhttp3.ResponseBody` @kind object;
  #L19c874.  if v0 == 0 then goto L19c8aa;
  #L19c878.  v0:= new `java.lang.IllegalArgumentException`;
  #L19c87c.  v1:= new `java.lang.StringBuilder`;
  #L19c880.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19c886.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19c88c.  v1:= temp @kind object;
  #L19c88e.  v2:= ".body != null" @kind object;
  #L19c892.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19c898.  v1:= temp @kind object;
  #L19c89a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19c8a0.  v1:= temp @kind object;
  #L19c8a2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19c8a8.  throw v0;
  #L19c8aa.  v0:= v5.`okhttp3.Response.networkResponse` @type ^`okhttp3.Response` @kind object;
  #L19c8ae.  if v0 == 0 then goto L19c8e4;
  #L19c8b2.  v0:= new `java.lang.IllegalArgumentException`;
  #L19c8b6.  v1:= new `java.lang.StringBuilder`;
  #L19c8ba.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19c8c0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19c8c6.  v1:= temp @kind object;
  #L19c8c8.  v2:= ".networkResponse != null" @kind object;
  #L19c8cc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19c8d2.  v1:= temp @kind object;
  #L19c8d4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19c8da.  v1:= temp @kind object;
  #L19c8dc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19c8e2.  throw v0;
  #L19c8e4.  v0:= v5.`okhttp3.Response.cacheResponse` @type ^`okhttp3.Response` @kind object;
  #L19c8e8.  if v0 == 0 then goto L19c91e;
  #L19c8ec.  v0:= new `java.lang.IllegalArgumentException`;
  #L19c8f0.  v1:= new `java.lang.StringBuilder`;
  #L19c8f4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19c8fa.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19c900.  v1:= temp @kind object;
  #L19c902.  v2:= ".cacheResponse != null" @kind object;
  #L19c906.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19c90c.  v1:= temp @kind object;
  #L19c90e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19c914.  v1:= temp @kind object;
  #L19c916.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19c91c.  throw v0;
  #L19c91e.  v0:= v5.`okhttp3.Response.priorResponse` @type ^`okhttp3.Response` @kind object;
  #L19c922.  if v0 == 0 then goto L19c958;
  #L19c926.  v0:= new `java.lang.IllegalArgumentException`;
  #L19c92a.  v1:= new `java.lang.StringBuilder`;
  #L19c92e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19c934.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19c93a.  v1:= temp @kind object;
  #L19c93c.  v2:= ".priorResponse != null" @kind object;
  #L19c940.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19c946.  v1:= temp @kind object;
  #L19c948.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19c94e.  v1:= temp @kind object;
  #L19c950.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19c956.  throw v0;
  #L19c958.  return @kind void;
}
procedure `okhttp3.Response$Builder` `addHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object @name `name`, `java.lang.String` v3 @kind object @name `value`) @signature `Lokhttp3/Response$Builder;.addHeader:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19c96c.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L19c970.  call temp:= `add`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L19c976.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `body`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.ResponseBody` v1 @kind object @name `body`) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19c988.  v0.`okhttp3.Response$Builder.body` @type ^`okhttp3.ResponseBody` := v1 @kind object;
  #L19c98c.  return v0 @kind object;
}
procedure `okhttp3.Response` `build`(`okhttp3.Response$Builder` v3 @kind this) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19c9a0.  v0:= v3.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` @kind object;
  #L19c9a4.  if v0 != 0 then goto L19c9b8;
  #L19c9a8.  v0:= new `java.lang.IllegalStateException`;
  #L19c9ac.  v1:= "request == null" @kind object;
  #L19c9b0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19c9b6.  throw v0;
  #L19c9b8.  v0:= v3.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` @kind object;
  #L19c9bc.  if v0 != 0 then goto L19c9d0;
  #L19c9c0.  v0:= new `java.lang.IllegalStateException`;
  #L19c9c4.  v1:= "protocol == null" @kind object;
  #L19c9c8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19c9ce.  throw v0;
  #L19c9d0.  v0:= v3.`okhttp3.Response$Builder.code` @type ^`int`;
  #L19c9d4.  if v0 >= 0 then goto L19ca0e;
  #L19c9d8.  v0:= new `java.lang.IllegalStateException`;
  #L19c9dc.  v1:= new `java.lang.StringBuilder`;
  #L19c9e0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19c9e6.  v2:= "code < 0: " @kind object;
  #L19c9ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19c9f0.  v1:= temp @kind object;
  #L19c9f2.  v2:= v3.`okhttp3.Response$Builder.code` @type ^`int`;
  #L19c9f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L19c9fc.  v1:= temp @kind object;
  #L19c9fe.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19ca04.  v1:= temp @kind object;
  #L19ca06.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19ca0c.  throw v0;
  #L19ca0e.  v0:= v3.`okhttp3.Response$Builder.message` @type ^`java.lang.String` @kind object;
  #L19ca12.  if v0 != 0 then goto L19ca26;
  #L19ca16.  v0:= new `java.lang.IllegalStateException`;
  #L19ca1a.  v1:= "message == null" @kind object;
  #L19ca1e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19ca24.  throw v0;
  #L19ca26.  v0:= new `okhttp3.Response`;
  #L19ca2a.  call `<init>`(v0, v3) @signature `Lokhttp3/Response;.<init>:(Lokhttp3/Response$Builder;)V` @kind direct;
  #L19ca30.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `cacheResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object @name `cacheResponse`) @signature `Lokhttp3/Response$Builder;.cacheResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19ca44.  if v2 == 0 then goto L19ca52;
  #L19ca48.  v0:= "cacheResponse" @kind object;
  #L19ca4c.  call `checkSupportResponse`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L19ca52.  v1.`okhttp3.Response$Builder.cacheResponse` @type ^`okhttp3.Response` := v2 @kind object;
  #L19ca56.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `code`(`okhttp3.Response$Builder` v0 @kind this, `int` v1 @name `code`) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19ca68.  v0.`okhttp3.Response$Builder.code` @type ^`int` := v1;
  #L19ca6c.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `handshake`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Handshake` v1 @kind object @name `handshake`) @signature `Lokhttp3/Response$Builder;.handshake:(Lokhttp3/Handshake;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19ca80.  v0.`okhttp3.Response$Builder.handshake` @type ^`okhttp3.Handshake` := v1 @kind object;
  #L19ca84.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `header`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object @name `name`, `java.lang.String` v3 @kind object @name `value`) @signature `Lokhttp3/Response$Builder;.header:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19ca98.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L19ca9c.  call temp:= `set`(v0, v2, v3) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L19caa2.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `headers`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Headers` v2 @kind object @name `headers`) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19cab4.  call temp:= `newBuilder`(v2) @signature `Lokhttp3/Headers;.newBuilder:()Lokhttp3/Headers$Builder;` @kind virtual;
  #L19caba.  v0:= temp @kind object;
  #L19cabc.  v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` := v0 @kind object;
  #L19cac0.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `message`(`okhttp3.Response$Builder` v0 @kind this, `java.lang.String` v1 @kind object @name `message`) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19cad4.  v0.`okhttp3.Response$Builder.message` @type ^`java.lang.String` := v1 @kind object;
  #L19cad8.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `networkResponse`(`okhttp3.Response$Builder` v1 @kind this, `okhttp3.Response` v2 @kind object @name `networkResponse`) @signature `Lokhttp3/Response$Builder;.networkResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19caec.  if v2 == 0 then goto L19cafa;
  #L19caf0.  v0:= "networkResponse" @kind object;
  #L19caf4.  call `checkSupportResponse`(v1, v0, v2) @signature `Lokhttp3/Response$Builder;.checkSupportResponse:(Ljava/lang/String;Lokhttp3/Response;)V` @kind direct;
  #L19cafa.  v1.`okhttp3.Response$Builder.networkResponse` @type ^`okhttp3.Response` := v2 @kind object;
  #L19cafe.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `priorResponse`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Response` v1 @kind object @name `priorResponse`) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19cb10.  if v1 == 0 then goto L19cb1a;
  #L19cb14.  call `checkPriorResponse`(v0, v1) @signature `Lokhttp3/Response$Builder;.checkPriorResponse:(Lokhttp3/Response;)V` @kind direct;
  #L19cb1a.  v0.`okhttp3.Response$Builder.priorResponse` @type ^`okhttp3.Response` := v1 @kind object;
  #L19cb1e.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `protocol`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Protocol` v1 @kind object @name `protocol`) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19cb30.  v0.`okhttp3.Response$Builder.protocol` @type ^`okhttp3.Protocol` := v1 @kind object;
  #L19cb34.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `receivedResponseAtMillis`(`okhttp3.Response$Builder` v1 @kind this, `long` v2 @name `receivedResponseAtMillis`) @signature `Lokhttp3/Response$Builder;.receivedResponseAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19cb48.  v1.`okhttp3.Response$Builder.receivedResponseAtMillis` @type ^`long` := v2 @kind wide;
  #L19cb4c.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `removeHeader`(`okhttp3.Response$Builder` v1 @kind this, `java.lang.String` v2 @kind object @name `name`) @signature `Lokhttp3/Response$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19cb60.  v0:= v1.`okhttp3.Response$Builder.headers` @type ^`okhttp3.Headers$Builder` @kind object;
  #L19cb64.  call temp:= `removeAll`(v0, v2) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L19cb6a.  return v1 @kind object;
}
procedure `okhttp3.Response$Builder` `request`(`okhttp3.Response$Builder` v0 @kind this, `okhttp3.Request` v1 @kind object @name `request`) @signature `Lokhttp3/Response$Builder;.request:(Lokhttp3/Request;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19cb7c.  v0.`okhttp3.Response$Builder.request` @type ^`okhttp3.Request` := v1 @kind object;
  #L19cb80.  return v0 @kind object;
}
procedure `okhttp3.Response$Builder` `sentRequestAtMillis`(`okhttp3.Response$Builder` v1 @kind this, `long` v2 @name `sentRequestAtMillis`) @signature `Lokhttp3/Response$Builder;.sentRequestAtMillis:(J)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19cb94.  v1.`okhttp3.Response$Builder.sentRequestAtMillis` @type ^`long` := v2 @kind wide;
  #L19cb98.  return v1 @kind object;
}
