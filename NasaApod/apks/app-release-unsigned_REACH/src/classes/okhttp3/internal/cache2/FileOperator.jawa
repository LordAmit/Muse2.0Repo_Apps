record `okhttp3.internal.cache2.FileOperator` @kind class @AccessFlag FINAL {
  `java.nio.channels.FileChannel` `okhttp3.internal.cache2.FileOperator.fileChannel` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.cache2.FileOperator` v0 @kind this, `java.nio.channels.FileChannel` v1 @kind object @name `fileChannel`) @signature `Lokhttp3/internal/cache2/FileOperator;.<init>:(Ljava/nio/channels/FileChannel;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1a0d3c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a0d42.  v0.`okhttp3.internal.cache2.FileOperator.fileChannel` @type ^`java.nio.channels.FileChannel` := v1 @kind object;
  #L1a0d46.  return @kind void;
}
procedure `void` `read`(`okhttp3.internal.cache2.FileOperator` v10 @kind this, `long` v11 @name `pos`, `okio.Buffer` v13 @kind object @name `sink`, `long` v14 @name `byteCount`) @signature `Lokhttp3/internal/cache2/FileOperator;.read:(JLokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1a0d58.  v0:= 0L;
  #L1a0d5c.  v0:= lcmp(v14, v0);
  #L1a0d60.  if v0 >= 0 then goto L1a0d70;
  #L1a0d64.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L1a0d68.  call `<init>`(v0) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L1a0d6e.  throw v0;
  #L1a0d70.  v0:= 0L;
  #L1a0d74.  v0:= lcmp(v14, v0);
  #L1a0d78.  if v0 <= 0 then goto L1a0d94;
  #L1a0d7c.  v1:= v10.`okhttp3.internal.cache2.FileOperator.fileChannel` @type ^`java.nio.channels.FileChannel` @kind object;
  #L1a0d80.  v2:= v11 @kind wide;
  #L1a0d82.  v4:= v14 @kind wide;
  #L1a0d84.  v6:= v13 @kind object;
  #L1a0d86.  call temp:= `transferTo`(v1, v2, v4, v6) @signature `Ljava/nio/channels/FileChannel;.transferTo:(JJLjava/nio/channels/WritableByteChannel;)J` @kind virtual;
  #L1a0d8c.  v8:= temp @kind wide;
  #L1a0d8e.  v11:= v11 + v8 @kind long;
  #L1a0d90.  v14:= v14 - v8 @kind long;
  #L1a0d92.  goto L1a0d70;
  #L1a0d94.  return @kind void;
}
procedure `void` `write`(`okhttp3.internal.cache2.FileOperator` v10 @kind this, `long` v11 @name `pos`, `okio.Buffer` v13 @kind object @name `source`, `long` v14 @name `byteCount`) @signature `Lokhttp3/internal/cache2/FileOperator;.write:(JLokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1a0da8.  v8:= 0L;
  #L1a0dac.  v0:= lcmp(v14, v8);
  #L1a0db0.  if v0 < 0 then goto L1a0dc4;
  #L1a0db4.  call temp:= `size`(v13) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L1a0dba.  v0:= temp @kind wide;
  #L1a0dbc.  v0:= lcmp(v14, v0);
  #L1a0dc0.  if v0 <= 0 then goto L1a0dd0;
  #L1a0dc4.  v0:= new `java.lang.IndexOutOfBoundsException`;
  #L1a0dc8.  call `<init>`(v0) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L1a0dce.  throw v0;
  #L1a0dd0.  v0:= lcmp(v14, v8);
  #L1a0dd4.  if v0 <= 0 then goto L1a0df0;
  #L1a0dd8.  v0:= v10.`okhttp3.internal.cache2.FileOperator.fileChannel` @type ^`java.nio.channels.FileChannel` @kind object;
  #L1a0ddc.  v1:= v13 @kind object;
  #L1a0dde.  v2:= v11 @kind wide;
  #L1a0de0.  v4:= v14 @kind wide;
  #L1a0de2.  call temp:= `transferFrom`(v0, v1, v2, v4) @signature `Ljava/nio/channels/FileChannel;.transferFrom:(Ljava/nio/channels/ReadableByteChannel;JJ)J` @kind virtual;
  #L1a0de8.  v6:= temp @kind wide;
  #L1a0dea.  v11:= v11 + v6 @kind long;
  #L1a0dec.  v14:= v14 - v6 @kind long;
  #L1a0dee.  goto L1a0dd0;
  #L1a0df0.  return @kind void;
}
