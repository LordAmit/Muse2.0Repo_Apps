record `okhttp3.internal.http1.Http1Codec$ChunkedSource` @kind class @AccessFlag  extends `okhttp3.internal.http1.Http1Codec$AbstractSource` @kind class {
  `long` `okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okhttp3.HttpUrl` `okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@okhttp3.internal.http1.Http1Codec$ChunkedSource.NO_CHUNK_YET` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v2 @kind this, `okhttp3.internal.http1.Http1Codec` v3 @kind object, `okhttp3.HttpUrl` v4 @kind object @name `url`) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/HttpUrl;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L244e58.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v3 @kind object;
  #L244e5c.  v0:= 0I;
  #L244e5e.  call `<init>`(v2, v3, v0) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/internal/http1/Http1Codec$1;)V` @kind direct;
  #L244e64.  v0:= -1L;
  #L244e68.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L244e6c.  v0:= 1I;
  #L244e6e.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v0 @kind boolean;
  #L244e72.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` := v4 @kind object;
  #L244e76.  return @kind void;
}
procedure `void` `readChunkSize`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v8 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.readChunkSize:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L244e88.  v6:= 0L;
  #L244e8c.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L244e90.  v4:= -1L;
  #L244e94.  v2:= lcmp(v2, v4);
  #L244e98.  if v2 == 0 then goto L244eaa;
  #L244e9c.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L244ea0.  v2:= v2.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L244ea4.  call temp:= `readUtf8LineStrict`(v2) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #Try_start0.  
  #L244eaa.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L244eae.  v2:= v2.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L244eb2.  call temp:= `readHexadecimalUnsignedLong`(v2) @signature `Lokio/BufferedSource;.readHexadecimalUnsignedLong:()J` @kind interface;
  #L244eb8.  v2:= temp @kind wide;
  #L244eba.  v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v2 @kind wide;
  #L244ebe.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L244ec2.  v2:= v2.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L244ec6.  call temp:= `readUtf8LineStrict`(v2) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L244ecc.  v2:= temp @kind object;
  #L244ece.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L244ed4.  v1:= temp @kind object;
  #L244ed6.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L244eda.  v2:= lcmp(v2, v6);
  #L244ede.  if v2 < 0 then goto L244efe;
  #L244ee2.  call temp:= `isEmpty`(v1) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L244ee8.  v2:= temp;
  #L244eea.  if v2 != 0 then goto L244f5e;
  #L244eee.  v2:= ";" @kind object;
  #L244ef2.  call temp:= `startsWith`(v1, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L244ef8.  v2:= temp;
  #L244efa.  if v2 != 0 then goto L244f5e;
  #L244efe.  v2:= new `java.net.ProtocolException`;
  #L244f02.  v3:= new `java.lang.StringBuilder`;
  #L244f06.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L244f0c.  v4:= "expected chunk size and optional extensions but was \"" @kind object;
  #L244f10.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L244f16.  v3:= temp @kind object;
  #L244f18.  v4:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L244f1c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L244f22.  v3:= temp @kind object;
  #L244f24.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L244f2a.  v3:= temp @kind object;
  #L244f2c.  v4:= "\"" @kind object;
  #L244f30.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L244f36.  v3:= temp @kind object;
  #L244f38.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L244f3e.  v3:= temp @kind object;
  #L244f40.  call `<init>`(v2, v3) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L244f46.  throw v2;
  #Try_end0.  
  #L244f48.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L244f4a.  v2:= new `java.net.ProtocolException`;
  #L244f4e.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L244f54.  v3:= temp @kind object;
  #L244f56.  call `<init>`(v2, v3) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L244f5c.  throw v2;
  #L244f5e.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L244f62.  v2:= lcmp(v2, v6);
  #L244f66.  if v2 != 0 then goto L244fa0;
  #L244f6a.  v2:= 0I;
  #L244f6c.  v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v2 @kind boolean;
  #L244f70.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L244f74.  v2:= v2.`okhttp3.internal.http1.Http1Codec.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L244f78.  call temp:= `cookieJar`(v2) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L244f7e.  v2:= temp @kind object;
  #L244f80.  v3:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L244f84.  v4:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L244f88.  call temp:= `readHeaders`(v4) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L244f8e.  v4:= temp @kind object;
  #L244f90.  call `receiveHeaders`(v2, v3, v4) @signature `Lokhttp3/internal/http/HttpHeaders;.receiveHeaders:(Lokhttp3/CookieJar;Lokhttp3/HttpUrl;Lokhttp3/Headers;)V` @kind static;
  #L244f96.  v2:= 1I;
  #L244f98.  v3:= 0I;
  #L244f9a.  call `endOfInput`(v8, v2, v3) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L244fa0.  return @kind void;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L244f48;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L244fc4.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` @kind boolean;
  #L244fc8.  if v0 == 0 then goto L244fce;
  #L244fcc.  return @kind void;
  #L244fce.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L244fd2.  if v0 == 0 then goto L244ff4;
  #L244fd6.  v0:= 100I;
  #L244fda.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L244fde.  call temp:= `discard`(v2, v0, v1) @signature `Lokhttp3/internal/Util;.discard:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L244fe4.  v0:= temp;
  #L244fe6.  if v0 != 0 then goto L244ff4;
  #L244fea.  v0:= 0I;
  #L244fec.  v1:= 0I;
  #L244fee.  call `endOfInput`(v2, v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L244ff4.  v0:= 1I;
  #L244ff6.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` := v0 @kind boolean;
  #L244ffa.  goto L244fcc;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v10 @kind this, `okio.Buffer` v11 @kind object @name `sink`, `long` v12 @name `byteCount`) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L24500c.  v8:= 0L;
  #L245010.  v4:= -1L;
  #L245014.  v1:= lcmp(v12, v8);
  #L245018.  if v1 >= 0 then goto L24504e;
  #L24501c.  v1:= new `java.lang.IllegalArgumentException`;
  #L245020.  v4:= new `java.lang.StringBuilder`;
  #L245024.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24502a.  v5:= "byteCount < 0: " @kind object;
  #L24502e.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L245034.  v4:= temp @kind object;
  #L245036.  call temp:= `append`(v4, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24503c.  v4:= temp @kind object;
  #L24503e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L245044.  v4:= temp @kind object;
  #L245046.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24504c.  throw v1;
  #L24504e.  v1:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` @kind boolean;
  #L245052.  if v1 == 0 then goto L245066;
  #L245056.  v1:= new `java.lang.IllegalStateException`;
  #L24505a.  v4:= "closed" @kind object;
  #L24505e.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L245064.  throw v1;
  #L245066.  v1:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L24506a.  if v1 != 0 then goto L245072;
  #L24506e.  v2:= v4 @kind wide;
  #L245070.  return v2 @kind wide;
  #L245072.  v6:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L245076.  v1:= lcmp(v6, v8);
  #L24507a.  if v1 == 0 then goto L24508a;
  #L24507e.  v6:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L245082.  v1:= lcmp(v6, v4);
  #L245086.  if v1 != 0 then goto L24509c;
  #L24508a.  call `readChunkSize`(v10) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.readChunkSize:()V` @kind direct;
  #L245090.  v1:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L245094.  if v1 != 0 then goto L24509c;
  #L245098.  v2:= v4 @kind wide;
  #L24509a.  goto L245070;
  #L24509c.  v6:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2450a0.  call temp:= `min`(v12, v6) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2450a6.  v6:= temp @kind wide;
  #L2450a8.  call temp:= `read`(v10, v11, v6) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L2450ae.  v2:= temp @kind wide;
  #L2450b0.  v1:= lcmp(v2, v4);
  #L2450b4.  if v1 != 0 then goto L2450d0;
  #L2450b8.  v0:= new `java.net.ProtocolException`;
  #L2450bc.  v1:= "unexpected end of stream" @kind object;
  #L2450c0.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2450c6.  v1:= 0I;
  #L2450c8.  call `endOfInput`(v10, v1, v0) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L2450ce.  throw v0;
  #L2450d0.  v4:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2450d4.  v4:= v4 - v2 @kind long;
  #L2450d6.  v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v4 @kind wide;
  #L2450da.  goto L245070;
}
