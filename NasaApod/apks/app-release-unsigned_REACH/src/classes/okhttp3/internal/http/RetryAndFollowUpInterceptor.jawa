record `okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.Interceptor` @kind interface {
  `java.lang.Object` `okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.OkHttpClient` `okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.StreamAllocation` `okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @AccessFlag PRIVATE_VOLATILE;
}
global `int` `@@okhttp3.internal.http.RetryAndFollowUpInterceptor.MAX_FOLLOW_UPS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object @name `client`, `boolean` v2 @name `forWebSocket`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L217718.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21771e.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L217722.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @type ^`boolean` := v2 @kind boolean;
  #L217726.  return @kind void;
}
procedure `okhttp3.Address` `createAddress`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v13 @kind this, `okhttp3.HttpUrl` v14 @kind object @name `url`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L217738.  v5:= 0I;
  #L21773a.  v6:= 0I;
  #L21773c.  v7:= 0I;
  #L21773e.  call temp:= `isHttps`(v14) @signature `Lokhttp3/HttpUrl;.isHttps:()Z` @kind virtual;
  #L217744.  v0:= temp;
  #L217746.  if v0 == 0 then goto L21776e;
  #L21774a.  v0:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21774e.  call temp:= `sslSocketFactory`(v0) @signature `Lokhttp3/OkHttpClient;.sslSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @kind virtual;
  #L217754.  v5:= temp @kind object;
  #L217756.  v0:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21775a.  call temp:= `hostnameVerifier`(v0) @signature `Lokhttp3/OkHttpClient;.hostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;` @kind virtual;
  #L217760.  v6:= temp @kind object;
  #L217762.  v0:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L217766.  call temp:= `certificatePinner`(v0) @signature `Lokhttp3/OkHttpClient;.certificatePinner:()Lokhttp3/CertificatePinner;` @kind virtual;
  #L21776c.  v7:= temp @kind object;
  #L21776e.  v0:= new `okhttp3.Address`;
  #L217772.  call temp:= `host`(v14) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L217778.  v1:= temp @kind object;
  #L21777a.  call temp:= `port`(v14) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L217780.  v2:= temp;
  #L217782.  v3:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L217786.  call temp:= `dns`(v3) @signature `Lokhttp3/OkHttpClient;.dns:()Lokhttp3/Dns;` @kind virtual;
  #L21778c.  v3:= temp @kind object;
  #L21778e.  v4:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L217792.  call temp:= `socketFactory`(v4) @signature `Lokhttp3/OkHttpClient;.socketFactory:()Ljavax/net/SocketFactory;` @kind virtual;
  #L217798.  v4:= temp @kind object;
  #L21779a.  v8:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21779e.  call temp:= `proxyAuthenticator`(v8) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L2177a4.  v8:= temp @kind object;
  #L2177a6.  v9:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2177aa.  call temp:= `proxy`(v9) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L2177b0.  v9:= temp @kind object;
  #L2177b2.  v10:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2177b6.  call temp:= `protocols`(v10) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @kind virtual;
  #L2177bc.  v10:= temp @kind object;
  #L2177be.  v11:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2177c2.  call temp:= `connectionSpecs`(v11) @signature `Lokhttp3/OkHttpClient;.connectionSpecs:()Ljava/util/List;` @kind virtual;
  #L2177c8.  v11:= temp @kind object;
  #L2177ca.  v12:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2177ce.  call temp:= `proxySelector`(v12) @signature `Lokhttp3/OkHttpClient;.proxySelector:()Ljava/net/ProxySelector;` @kind virtual;
  #L2177d4.  v12:= temp @kind object;
  #L2177d6.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12) @signature `Lokhttp3/Address;.<init>:(Ljava/lang/String;ILokhttp3/Dns;Ljavax/net/SocketFactory;Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/HostnameVerifier;Lokhttp3/CertificatePinner;Lokhttp3/Authenticator;Ljava/net/Proxy;Ljava/util/List;Ljava/util/List;Ljava/net/ProxySelector;)V` @kind direct;
  #L2177dc.  return v0 @kind object;
}
procedure `okhttp3.Request` `followUpRequest`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v11 @kind this, `okhttp3.Response` v12 @kind object @name `userResponse`, `okhttp3.Route` v13 @kind object @name `route`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.followUpRequest:(Lokhttp3/Response;Lokhttp3/Route;)Lokhttp3/Request;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2177f0.  v3:= 0I;
  #L2177f2.  if v12 != 0 then goto L217802;
  #L2177f6.  v9:= new `java.lang.IllegalStateException`;
  #L2177fa.  call `<init>`(v9) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L217800.  throw v9;
  #L217802.  call temp:= `code`(v12) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L217808.  v5:= temp;
  #L21780a.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L217810.  v9:= temp @kind object;
  #L217812.  call temp:= `method`(v9) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L217818.  v2:= temp @kind object;
  #L21781a.  goto L217a6c;
  #L217820.  return v3 @kind object;
  #L217822.  if v13 == 0 then goto L21784e;
  #L217826.  call temp:= `proxy`(v13) @signature `Lokhttp3/Route;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L21782c.  v7:= temp @kind object;
  #L21782e.  call temp:= `type`(v7) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L217834.  v9:= temp @kind object;
  #L217836.  v10:= `@@java.net.Proxy$Type.HTTP` @type ^`java.net.Proxy$Type` @kind object;
  #L21783a.  if v9 == v10 then goto L21785c;
  #L21783e.  v9:= new `java.net.ProtocolException`;
  #L217842.  v10:= "Received HTTP_PROXY_AUTH (407) code while not using proxy" @kind object;
  #L217846.  call `<init>`(v9, v10) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21784c.  throw v9;
  #L21784e.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L217852.  call temp:= `proxy`(v9) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L217858.  v7:= temp @kind object;
  #L21785a.  goto L21782e;
  #L21785c.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L217860.  call temp:= `proxyAuthenticator`(v9) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L217866.  v9:= temp @kind object;
  #L217868.  call temp:= `authenticate`(v9, v13, v12) @signature `Lokhttp3/Authenticator;.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;` @kind interface;
  #L21786e.  v3:= temp @kind object;
  #L217870.  goto L217820;
  #L217872.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L217876.  call temp:= `authenticator`(v9) @signature `Lokhttp3/OkHttpClient;.authenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L21787c.  v9:= temp @kind object;
  #L21787e.  call temp:= `authenticate`(v9, v13, v12) @signature `Lokhttp3/Authenticator;.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;` @kind interface;
  #L217884.  v3:= temp @kind object;
  #L217886.  goto L217820;
  #L217888.  v9:= "GET" @kind object;
  #L21788c.  call temp:= `equals`(v2, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L217892.  v9:= temp;
  #L217894.  if v9 != 0 then goto L2178a8;
  #L217898.  v9:= "HEAD" @kind object;
  #L21789c.  call temp:= `equals`(v2, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2178a2.  v9:= temp;
  #L2178a4.  if v9 == 0 then goto L217820;
  #L2178a8.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2178ac.  call temp:= `followRedirects`(v9) @signature `Lokhttp3/OkHttpClient;.followRedirects:()Z` @kind virtual;
  #L2178b2.  v9:= temp;
  #L2178b4.  if v9 == 0 then goto L217820;
  #L2178b8.  v9:= "Location" @kind object;
  #L2178bc.  call temp:= `header`(v12, v9) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2178c2.  v0:= temp @kind object;
  #L2178c4.  if v0 == 0 then goto L217820;
  #L2178c8.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2178ce.  v9:= temp @kind object;
  #L2178d0.  call temp:= `url`(v9) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2178d6.  v9:= temp @kind object;
  #L2178d8.  call temp:= `resolve`(v9, v0) @signature `Lokhttp3/HttpUrl;.resolve:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind virtual;
  #L2178de.  v8:= temp @kind object;
  #L2178e0.  if v8 == 0 then goto L217820;
  #L2178e4.  call temp:= `scheme`(v8) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L2178ea.  v9:= temp @kind object;
  #L2178ec.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2178f2.  v10:= temp @kind object;
  #L2178f4.  call temp:= `url`(v10) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2178fa.  v10:= temp @kind object;
  #L2178fc.  call temp:= `scheme`(v10) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L217902.  v10:= temp @kind object;
  #L217904.  call temp:= `equals`(v9, v10) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L21790a.  v6:= temp;
  #L21790c.  if v6 != 0 then goto L217920;
  #L217910.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L217914.  call temp:= `followSslRedirects`(v9) @signature `Lokhttp3/OkHttpClient;.followSslRedirects:()Z` @kind virtual;
  #L21791a.  v9:= temp;
  #L21791c.  if v9 == 0 then goto L217820;
  #L217920.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L217926.  v9:= temp @kind object;
  #L217928.  call temp:= `newBuilder`(v9) @signature `Lokhttp3/Request;.newBuilder:()Lokhttp3/Request$Builder;` @kind virtual;
  #L21792e.  v4:= temp @kind object;
  #L217930.  call temp:= `permitsRequestBody`(v2) @signature `Lokhttp3/internal/http/HttpMethod;.permitsRequestBody:(Ljava/lang/String;)Z` @kind static;
  #L217936.  v9:= temp;
  #L217938.  if v9 == 0 then goto L21797c;
  #L21793c.  call temp:= `redirectsWithBody`(v2) @signature `Lokhttp3/internal/http/HttpMethod;.redirectsWithBody:(Ljava/lang/String;)Z` @kind static;
  #L217942.  v1:= temp;
  #L217944.  call temp:= `redirectsToGet`(v2) @signature `Lokhttp3/internal/http/HttpMethod;.redirectsToGet:(Ljava/lang/String;)Z` @kind static;
  #L21794a.  v9:= temp;
  #L21794c.  if v9 == 0 then goto L2179a6;
  #L217950.  v9:= "GET" @kind object;
  #L217954.  call temp:= `method`(v4, v9, v3) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L21795a.  if v1 != 0 then goto L21797c;
  #L21795e.  v9:= "Transfer-Encoding" @kind object;
  #L217962.  call temp:= `removeHeader`(v4, v9) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L217968.  v9:= "Content-Length" @kind object;
  #L21796c.  call temp:= `removeHeader`(v4, v9) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L217972.  v9:= "Content-Type" @kind object;
  #L217976.  call temp:= `removeHeader`(v4, v9) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L21797c.  call temp:= `sameConnection`(v11, v12, v8) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @kind direct;
  #L217982.  v9:= temp;
  #L217984.  if v9 != 0 then goto L217992;
  #L217988.  v9:= "Authorization" @kind object;
  #L21798c.  call temp:= `removeHeader`(v4, v9) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L217992.  call temp:= `url`(v4, v8) @signature `Lokhttp3/Request$Builder;.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;` @kind virtual;
  #L217998.  v9:= temp @kind object;
  #L21799a.  call temp:= `build`(v9) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L2179a0.  v3:= temp @kind object;
  #L2179a2.  goto L217820;
  #L2179a6.  if v1 == 0 then goto L2179ba;
  #L2179aa.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2179b0.  v9:= temp @kind object;
  #L2179b2.  call temp:= `body`(v9) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L2179b8.  v3:= temp @kind object;
  #L2179ba.  call temp:= `method`(v4, v2, v3) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2179c0.  goto L21795a;
  #L2179c2.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2179c6.  call temp:= `retryOnConnectionFailure`(v9) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @kind virtual;
  #L2179cc.  v9:= temp;
  #L2179ce.  if v9 == 0 then goto L217820;
  #L2179d2.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2179d8.  v9:= temp @kind object;
  #L2179da.  call temp:= `body`(v9) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L2179e0.  v9:= temp @kind object;
  #L2179e2.  v9:= instanceof @variable v9 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L2179e6.  if v9 != 0 then goto L217820;
  #L2179ea.  call temp:= `priorResponse`(v12) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L2179f0.  v9:= temp @kind object;
  #L2179f2.  if v9 == 0 then goto L217a0e;
  #L2179f6.  call temp:= `priorResponse`(v12) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L2179fc.  v9:= temp @kind object;
  #L2179fe.  call temp:= `code`(v9) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L217a04.  v9:= temp;
  #L217a06.  v10:= 408I;
  #L217a0a.  if v9 == v10 then goto L217820;
  #L217a0e.  v9:= 0I;
  #L217a10.  call temp:= `retryAfter`(v11, v12, v9) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.retryAfter:(Lokhttp3/Response;I)I` @kind direct;
  #L217a16.  v9:= temp;
  #L217a18.  if v9 > 0 then goto L217820;
  #L217a1c.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L217a22.  v3:= temp @kind object;
  #L217a24.  goto L217820;
  #L217a28.  call temp:= `priorResponse`(v12) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L217a2e.  v9:= temp @kind object;
  #L217a30.  if v9 == 0 then goto L217a4c;
  #L217a34.  call temp:= `priorResponse`(v12) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L217a3a.  v9:= temp @kind object;
  #L217a3c.  call temp:= `code`(v9) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L217a42.  v9:= temp;
  #L217a44.  v10:= 503I;
  #L217a48.  if v9 == v10 then goto L217820;
  #L217a4c.  v9:= 2147483647I;
  #L217a52.  call temp:= `retryAfter`(v11, v12, v9) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.retryAfter:(Lokhttp3/Response;I)I` @kind direct;
  #L217a58.  v9:= temp;
  #L217a5a.  if v9 != 0 then goto L217820;
  #L217a5e.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L217a64.  v3:= temp @kind object;
  #L217a66.  goto L217820;
  #L217a6a.  
  #L217a6c.  switch v5
                  | 300 => goto L2178a8
                  | 301 => goto L2178a8
                  | 302 => goto L2178a8
                  | 303 => goto L2178a8
                  | 307 => goto L217888
                  | 308 => goto L217888
                  | 401 => goto L217872
                  | 407 => goto L217822
                  | 408 => goto L2179c2
                  | 503 => goto L217a28
                  | else => goto L217820;
}
procedure `boolean` `isRecoverable`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v3 @kind this, `java.io.IOException` v4 @kind object @name `e`, `boolean` v5 @name `requestSendStarted`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isRecoverable:(Ljava/io/IOException;Z)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L217ad0.  v0:= 1I;
  #L217ad2.  v1:= 0I;
  #L217ad4.  v2:= instanceof @variable v4 @type ^`java.net.ProtocolException` @kind boolean;
  #L217ad8.  if v2 == 0 then goto L217ade;
  #L217adc.  return v1;
  #L217ade.  v2:= instanceof @variable v4 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L217ae2.  if v2 == 0 then goto L217afa;
  #L217ae6.  v2:= instanceof @variable v4 @type ^`java.net.SocketTimeoutException` @kind boolean;
  #L217aea.  if v2 == 0 then goto L217af6;
  #L217aee.  if v5 != 0 then goto L217af6;
  #L217af2.  v1:= v0;
  #L217af4.  goto L217adc;
  #L217af6.  v0:= v1;
  #L217af8.  goto L217af2;
  #L217afa.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L217afe.  if v2 == 0 then goto L217b12;
  #L217b02.  call temp:= `getCause`(v4) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L217b08.  v2:= temp @kind object;
  #L217b0a.  v2:= instanceof @variable v2 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L217b0e.  if v2 != 0 then goto L217adc;
  #L217b12.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L217b16.  if v2 != 0 then goto L217adc;
  #L217b1a.  v1:= v0;
  #L217b1c.  goto L217adc;
}
procedure `boolean` `recover`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v2 @kind this, `java.io.IOException` v3 @kind object @name `e`, `okhttp3.internal.connection.StreamAllocation` v4 @kind object @name `streamAllocation`, `boolean` v5 @name `requestSendStarted`, `okhttp3.Request` v6 @kind object @name `userRequest`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;Lokhttp3/internal/connection/StreamAllocation;ZLokhttp3/Request;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L217b30.  v0:= 0I;
  #L217b32.  call `streamFailed`(v4, v3) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L217b38.  v1:= v2.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L217b3c.  call temp:= `retryOnConnectionFailure`(v1) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @kind virtual;
  #L217b42.  v1:= temp;
  #L217b44.  if v1 != 0 then goto L217b4a;
  #L217b48.  return v0;
  #L217b4a.  if v5 == 0 then goto L217b5e;
  #L217b4e.  call temp:= `body`(v6) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L217b54.  v1:= temp @kind object;
  #L217b56.  v1:= instanceof @variable v1 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L217b5a.  if v1 != 0 then goto L217b48;
  #L217b5e.  call temp:= `isRecoverable`(v2, v3, v5) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isRecoverable:(Ljava/io/IOException;Z)Z` @kind direct;
  #L217b64.  v1:= temp;
  #L217b66.  if v1 == 0 then goto L217b48;
  #L217b6a.  call temp:= `hasMoreRoutes`(v4) @signature `Lokhttp3/internal/connection/StreamAllocation;.hasMoreRoutes:()Z` @kind virtual;
  #L217b70.  v1:= temp;
  #L217b72.  if v1 == 0 then goto L217b48;
  #L217b76.  v0:= 1I;
  #L217b78.  goto L217b48;
}
procedure `int` `retryAfter`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v2 @kind this, `okhttp3.Response` v3 @kind object @name `userResponse`, `int` v4 @name `defaultDelay`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.retryAfter:(Lokhttp3/Response;I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L217b8c.  v1:= "Retry-After" @kind object;
  #L217b90.  call temp:= `header`(v3, v1) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L217b96.  v0:= temp @kind object;
  #L217b98.  if v0 != 0 then goto L217b9e;
  #L217b9c.  return v4;
  #L217b9e.  v1:= "\\d+" @kind object;
  #L217ba2.  call temp:= `matches`(v0, v1) @signature `Ljava/lang/String;.matches:(Ljava/lang/String;)Z` @kind virtual;
  #L217ba8.  v1:= temp;
  #L217baa.  if v1 == 0 then goto L217bc0;
  #L217bae.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(Ljava/lang/String;)Ljava/lang/Integer;` @kind static;
  #L217bb4.  v1:= temp @kind object;
  #L217bb6.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L217bbc.  v4:= temp;
  #L217bbe.  goto L217b9c;
  #L217bc0.  v4:= 2147483647I;
  #L217bc6.  goto L217b9c;
}
procedure `boolean` `sameConnection`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v3 @kind this, `okhttp3.Response` v4 @kind object @name `response`, `okhttp3.HttpUrl` v5 @kind object @name `followUp`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L217bd8.  call temp:= `request`(v4) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L217bde.  v1:= temp @kind object;
  #L217be0.  call temp:= `url`(v1) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L217be6.  v0:= temp @kind object;
  #L217be8.  call temp:= `host`(v0) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L217bee.  v1:= temp @kind object;
  #L217bf0.  call temp:= `host`(v5) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L217bf6.  v2:= temp @kind object;
  #L217bf8.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L217bfe.  v1:= temp;
  #L217c00.  if v1 == 0 then goto L217c38;
  #L217c04.  call temp:= `port`(v0) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L217c0a.  v1:= temp;
  #L217c0c.  call temp:= `port`(v5) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L217c12.  v2:= temp;
  #L217c14.  if v1 != v2 then goto L217c38;
  #L217c18.  call temp:= `scheme`(v0) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L217c1e.  v1:= temp @kind object;
  #L217c20.  call temp:= `scheme`(v5) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L217c26.  v2:= temp @kind object;
  #L217c28.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L217c2e.  v1:= temp;
  #L217c30.  if v1 == 0 then goto L217c38;
  #L217c34.  v1:= 1I;
  #L217c36.  return v1;
  #L217c38.  v1:= 0I;
  #L217c3a.  goto L217c36;
}
procedure `void` `cancel`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v2 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L217c4c.  v1:= 1I;
  #L217c4e.  v2.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` := v1 @kind boolean;
  #L217c52.  v0:= v2.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L217c56.  if v0 == 0 then goto L217c60;
  #L217c5a.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.cancel:()V` @kind virtual;
  #L217c60.  return @kind void;
}
procedure `okhttp3.Response` `intercept`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v15 @kind this, `okhttp3.Interceptor$Chain` v16 @kind object @name `chain`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.intercept:(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L217c74.  call temp:= `request`(v16) @signature `Lokhttp3/Interceptor$Chain;.request:()Lokhttp3/Request;` @kind interface;
  #L217c7a.  v12:= temp @kind object;
  #L217c7c.  v10:= v16 @kind object;
  #L217c80.  v10:= (`okhttp3.internal.http.RealInterceptorChain`) v10 @kind object;
  #L217c84.  call temp:= `call`(v10) @signature `Lokhttp3/internal/http/RealInterceptorChain;.call:()Lokhttp3/Call;` @kind virtual;
  #L217c8a.  v3:= temp @kind object;
  #L217c8c.  call temp:= `eventListener`(v10) @signature `Lokhttp3/internal/http/RealInterceptorChain;.eventListener:()Lokhttp3/EventListener;` @kind virtual;
  #L217c92.  v4:= temp @kind object;
  #L217c94.  v0:= new `okhttp3.internal.connection.StreamAllocation`;
  #L217c98.  v1:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L217c9c.  call temp:= `connectionPool`(v1) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @kind virtual;
  #L217ca2.  v1:= temp @kind object;
  #L217ca4.  call temp:= `url`(v12) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L217caa.  v2:= temp @kind object;
  #L217cac.  call temp:= `createAddress`(v15, v2) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @kind direct;
  #L217cb2.  v2:= temp @kind object;
  #L217cb4.  v5:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` @kind object;
  #L217cb8.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/connection/StreamAllocation;.<init>:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/Call;Lokhttp3/EventListener;Ljava/lang/Object;)V` @kind direct;
  #L217cbe.  v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v0 @kind object;
  #L217cc2.  v8:= 0I;
  #L217cc4.  v9:= 0I;
  #L217cc6.  v1:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` @kind boolean;
  #L217cca.  if v1 == 0 then goto L217ce4;
  #L217cce.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L217cd4.  v1:= new `java.io.IOException`;
  #L217cd8.  v2:= "Canceled" @kind object;
  #L217cdc.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L217ce2.  throw v1;
  #L217ce4.  v11:= 1I;
  #L217ce6.  v1:= 0I;
  #L217ce8.  v2:= 0I;
  #Try_start0.  
  #L217cea.  call temp:= `proceed`(v10, v12, v0, v1, v2) @signature `Lokhttp3/internal/http/RealInterceptorChain;.proceed:(Lokhttp3/Request;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;)Lokhttp3/Response;` @kind virtual;
  #Try_end0.  
  #L217cf0.  v14:= temp @kind object;
  #L217cf2.  v11:= 0I;
  #L217cf4.  if v11 == 0 then goto L217d06;
  #L217cf8.  v1:= 0I;
  #L217cfa.  call `streamFailed`(v0, v1) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L217d00.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L217d06.  if v9 == 0 then goto L217d3c;
  #L217d0a.  call temp:= `newBuilder`(v14) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L217d10.  v1:= temp @kind object;
  #L217d12.  call temp:= `newBuilder`(v9) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L217d18.  v2:= temp @kind object;
  #L217d1a.  v5:= 0I;
  #L217d1c.  call temp:= `body`(v2, v5) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L217d22.  v2:= temp @kind object;
  #L217d24.  call temp:= `build`(v2) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L217d2a.  v2:= temp @kind object;
  #L217d2c.  call temp:= `priorResponse`(v1, v2) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @kind virtual;
  #L217d32.  v1:= temp @kind object;
  #L217d34.  call temp:= `build`(v1) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L217d3a.  v14:= temp @kind object;
  #L217d3c.  call temp:= `route`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.route:()Lokhttp3/Route;` @kind virtual;
  #L217d42.  v1:= temp @kind object;
  #L217d44.  call temp:= `followUpRequest`(v15, v14, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.followUpRequest:(Lokhttp3/Response;Lokhttp3/Route;)Lokhttp3/Request;` @kind direct;
  #L217d4a.  v7:= temp @kind object;
  #L217d4c.  if v7 != 0 then goto L217de4;
  #L217d50.  v1:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @type ^`boolean` @kind boolean;
  #L217d54.  if v1 != 0 then goto L217d5e;
  #L217d58.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L217d5e.  return v14 @kind object;
  #L217d60.  v6:= Exception @type ^`okhttp3.internal.connection.RouteException` @kind object;
  #Try_start1.  
  #L217d62.  call temp:= `getLastConnectException`(v6) @signature `Lokhttp3/internal/connection/RouteException;.getLastConnectException:()Ljava/io/IOException;` @kind virtual;
  #L217d68.  v1:= temp @kind object;
  #L217d6a.  v2:= 0I;
  #L217d6c.  call temp:= `recover`(v15, v1, v0, v2, v12) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;Lokhttp3/internal/connection/StreamAllocation;ZLokhttp3/Request;)Z` @kind direct;
  #L217d72.  v1:= temp;
  #L217d74.  if v1 != 0 then goto L217d98;
  #L217d78.  call temp:= `getLastConnectException`(v6) @signature `Lokhttp3/internal/connection/RouteException;.getLastConnectException:()Ljava/io/IOException;` @kind virtual;
  #L217d7e.  v1:= temp @kind object;
  #L217d80.  throw v1;
  #Try_end1.  
  #L217d82.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L217d84.  if v11 == 0 then goto L217d96;
  #L217d88.  v2:= 0I;
  #L217d8a.  call `streamFailed`(v0, v2) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L217d90.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L217d96.  throw v1;
  #L217d98.  v11:= 0I;
  #L217d9a.  if v11 == 0 then goto L217cc6;
  #L217d9e.  v1:= 0I;
  #L217da0.  call `streamFailed`(v0, v1) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L217da6.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L217dac.  goto L217cc6;
  #L217dae.  v6:= Exception @type ^`java.io.IOException` @kind object;
  #Try_start2.  
  #L217db0.  v1:= instanceof @variable v6 @type ^`okhttp3.internal.http2.ConnectionShutdownException` @kind boolean;
  #L217db4.  if v1 != 0 then goto L217dc8;
  #L217db8.  v13:= 1I;
  #L217dba.  call temp:= `recover`(v15, v6, v0, v13, v12) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;Lokhttp3/internal/connection/StreamAllocation;ZLokhttp3/Request;)Z` @kind direct;
  #L217dc0.  v1:= temp;
  #L217dc2.  if v1 != 0 then goto L217dcc;
  #L217dc6.  throw v6;
  #Try_end2.  
  #L217dc8.  v13:= 0I;
  #L217dca.  goto L217dba;
  #L217dcc.  v11:= 0I;
  #L217dce.  if v11 == 0 then goto L217cc6;
  #L217dd2.  v1:= 0I;
  #L217dd4.  call `streamFailed`(v0, v1) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L217dda.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L217de0.  goto L217cc6;
  #L217de4.  call temp:= `body`(v14) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L217dea.  v1:= temp @kind object;
  #L217dec.  call `closeQuietly`(v1) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L217df2.  v8:= v8 + 1;
  #L217df6.  v1:= 20I;
  #L217dfa.  if v8 <= v1 then goto L217e36;
  #L217dfe.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L217e04.  v1:= new `java.net.ProtocolException`;
  #L217e08.  v2:= new `java.lang.StringBuilder`;
  #L217e0c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L217e12.  v5:= "Too many follow-up requests: " @kind object;
  #L217e16.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L217e1c.  v2:= temp @kind object;
  #L217e1e.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L217e24.  v2:= temp @kind object;
  #L217e26.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L217e2c.  v2:= temp @kind object;
  #L217e2e.  call `<init>`(v1, v2) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L217e34.  throw v1;
  #L217e36.  call temp:= `body`(v7) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L217e3c.  v1:= temp @kind object;
  #L217e3e.  v1:= instanceof @variable v1 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L217e42.  if v1 == 0 then goto L217e64;
  #L217e46.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L217e4c.  v1:= new `java.net.HttpRetryException`;
  #L217e50.  v2:= "Cannot retry streamed HTTP body" @kind object;
  #L217e54.  call temp:= `code`(v14) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L217e5a.  v5:= temp;
  #L217e5c.  call `<init>`(v1, v2, v5) @signature `Ljava/net/HttpRetryException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L217e62.  throw v1;
  #L217e64.  call temp:= `url`(v7) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L217e6a.  v1:= temp @kind object;
  #L217e6c.  call temp:= `sameConnection`(v15, v14, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @kind direct;
  #L217e72.  v1:= temp;
  #L217e74.  if v1 != 0 then goto L217eb4;
  #L217e78.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L217e7e.  v0:= new `okhttp3.internal.connection.StreamAllocation`;
  #L217e82.  v1:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L217e86.  call temp:= `connectionPool`(v1) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @kind virtual;
  #L217e8c.  v1:= temp @kind object;
  #L217e8e.  call temp:= `url`(v7) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L217e94.  v2:= temp @kind object;
  #L217e96.  call temp:= `createAddress`(v15, v2) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @kind direct;
  #L217e9c.  v2:= temp @kind object;
  #L217e9e.  v5:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` @kind object;
  #L217ea2.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/connection/StreamAllocation;.<init>:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/Call;Lokhttp3/EventListener;Ljava/lang/Object;)V` @kind direct;
  #L217ea8.  v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v0 @kind object;
  #L217eac.  v12:= v7 @kind object;
  #L217eae.  v9:= v14 @kind object;
  #L217eb0.  goto L217cc6;
  #L217eb4.  call temp:= `codec`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.codec:()Lokhttp3/internal/http/HttpCodec;` @kind virtual;
  #L217eba.  v1:= temp @kind object;
  #L217ebc.  if v1 == 0 then goto L217eac;
  #L217ec0.  v1:= new `java.lang.IllegalStateException`;
  #L217ec4.  v2:= new `java.lang.StringBuilder`;
  #L217ec8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L217ece.  v5:= "Closing the body of " @kind object;
  #L217ed2.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L217ed8.  v2:= temp @kind object;
  #L217eda.  call temp:= `append`(v2, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L217ee0.  v2:= temp @kind object;
  #L217ee2.  v5:= " didn't close its backing stream. Bad interceptor?" @kind object;
  #L217ee6.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L217eec.  v2:= temp @kind object;
  #L217eee.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L217ef4.  v2:= temp @kind object;
  #L217ef6.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L217efc.  throw v1;
  catch `okhttp3.internal.connection.RouteException` @[Try_start0..Try_end0] goto L217d60;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L217dae;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L217d82;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L217d82;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L217d82;
}
procedure `boolean` `isCanceled`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L217f38.  v0:= v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` @kind boolean;
  #L217f3c.  return v0;
}
procedure `void` `setCallStackTrace`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v0 @kind this, `java.lang.Object` v1 @kind object @name `callStackTrace`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.setCallStackTrace:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L217f50.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` := v1 @kind object;
  #L217f54.  return @kind void;
}
procedure `okhttp3.internal.connection.StreamAllocation` `streamAllocation`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L217f68.  v0:= v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L217f6c.  return v0 @kind object;
}
