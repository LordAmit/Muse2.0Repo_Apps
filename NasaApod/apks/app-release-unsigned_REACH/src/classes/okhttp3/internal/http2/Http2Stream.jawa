record `okhttp3.internal.http2.Http2Stream` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @AccessFlag ;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2Stream.connection` @AccessFlag FINAL;
  `okhttp3.internal.http2.ErrorCode` `okhttp3.internal.http2.Http2Stream.errorCode` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Http2Stream.id` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$StreamTimeout` `okhttp3.internal.http2.Http2Stream.readTimeout` @AccessFlag FINAL;
  `java.util.List` `okhttp3.internal.http2.Http2Stream.requestHeaders` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.internal.http2.Http2Stream.responseHeaders` @AccessFlag PRIVATE;
  `okhttp3.internal.http2.Http2Stream$FramingSink` `okhttp3.internal.http2.Http2Stream.sink` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$FramingSource` `okhttp3.internal.http2.Http2Stream.source` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @AccessFlag ;
  `okhttp3.internal.http2.Http2Stream$StreamTimeout` `okhttp3.internal.http2.Http2Stream.writeTimeout` @AccessFlag FINAL;
}
global `boolean` `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Stream;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a69cc.  v0:= constclass @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1a69d0.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L1a69d6.  v0:= temp;
  #L1a69d8.  if v0 != 0 then goto L1a69e4;
  #L1a69dc.  v0:= 1I;
  #L1a69de.  `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` := v0 @kind boolean;
  #L1a69e2.  return @kind void;
  #L1a69e4.  v0:= 0I;
  #L1a69e6.  goto L1a69de;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Stream` v4 @kind this, `int` v5 @name `id`, `okhttp3.internal.http2.Http2Connection` v6 @kind object @name `connection`, `boolean` v7 @name `outFinished`, `boolean` v8 @name `inFinished`, `java.util.List` v9 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.<init>:(ILokhttp3/internal/http2/Http2Connection;ZZLjava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a69f8.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a69fe.  v0:= 0L;
  #L1a6a02.  v4.`okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @type ^`long` := v0 @kind wide;
  #L1a6a06.  v0:= new `okhttp3.internal.http2.Http2Stream$StreamTimeout`;
  #L1a6a0a.  call `<init>`(v0, v4) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L1a6a10.  v4.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` := v0 @kind object;
  #L1a6a14.  v0:= new `okhttp3.internal.http2.Http2Stream$StreamTimeout`;
  #L1a6a18.  call `<init>`(v0, v4) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L1a6a1e.  v4.`okhttp3.internal.http2.Http2Stream.writeTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` := v0 @kind object;
  #L1a6a22.  v0:= 0I;
  #L1a6a24.  v4.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v0 @kind object;
  #L1a6a28.  if v6 != 0 then goto L1a6a3c;
  #L1a6a2c.  v0:= new `java.lang.NullPointerException`;
  #L1a6a30.  v1:= "connection == null" @kind object;
  #L1a6a34.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a6a3a.  throw v0;
  #L1a6a3c.  if v9 != 0 then goto L1a6a50;
  #L1a6a40.  v0:= new `java.lang.NullPointerException`;
  #L1a6a44.  v1:= "requestHeaders == null" @kind object;
  #L1a6a48.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a6a4e.  throw v0;
  #L1a6a50.  v4.`okhttp3.internal.http2.Http2Stream.id` @type ^`int` := v5;
  #L1a6a54.  v4.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` := v6 @kind object;
  #L1a6a58.  v0:= v6.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a6a5c.  call temp:= `getInitialWindowSize`(v0) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L1a6a62.  v0:= temp;
  #L1a6a64.  v0:= (`long`) v0 @kind i2l;
  #L1a6a66.  v4.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L1a6a6a.  v0:= new `okhttp3.internal.http2.Http2Stream$FramingSource`;
  #L1a6a6e.  v1:= v6.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a6a72.  call temp:= `getInitialWindowSize`(v1) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L1a6a78.  v1:= temp;
  #L1a6a7a.  v2:= (`long`) v1 @kind i2l;
  #L1a6a7c.  call `<init>`(v0, v4, v2) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.<init>:(Lokhttp3/internal/http2/Http2Stream;J)V` @kind direct;
  #L1a6a82.  v4.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` := v0 @kind object;
  #L1a6a86.  v0:= new `okhttp3.internal.http2.Http2Stream$FramingSink`;
  #L1a6a8a.  call `<init>`(v0, v4) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L1a6a90.  v4.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` := v0 @kind object;
  #L1a6a94.  v0:= v4.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a6a98.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` := v8 @kind boolean;
  #L1a6a9c.  v0:= v4.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a6aa0.  v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` := v7 @kind boolean;
  #L1a6aa4.  v4.`okhttp3.internal.http2.Http2Stream.requestHeaders` @type ^`java.util.List` := v9 @kind object;
  #L1a6aa8.  return @kind void;
}
procedure `boolean` `closeInternal`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object @name `errorCode`) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a6abc.  v0:= 0I;
  #L1a6abe.  v1:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a6ac2.  if v1 != 0 then goto L1a6ade;
  #L1a6ac6.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a6acc.  v1:= temp;
  #L1a6ace.  if v1 == 0 then goto L1a6ade;
  #L1a6ad2.  v0:= new `java.lang.AssertionError`;
  #L1a6ad6.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a6adc.  throw v0;
  #L1a6ade.  @monitorenter v2
  #Try_start0.  
  #L1a6ae0.  v1:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a6ae4.  if v1 == 0 then goto L1a6aec;
  #L1a6ae8.  @monitorexit v2
  #L1a6aea.  return v0;
  #L1a6aec.  v1:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a6af0.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L1a6af4.  if v1 == 0 then goto L1a6b0e;
  #L1a6af8.  v1:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a6afc.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L1a6b00.  if v1 == 0 then goto L1a6b0e;
  #L1a6b04.  @monitorexit v2
  #L1a6b06.  goto L1a6aea;
  #L1a6b08.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a6b0a.  @monitorexit v2
  #Try_end0.  
  #L1a6b0c.  throw v0;
  #Try_start1.  
  #L1a6b0e.  v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v3 @kind object;
  #L1a6b12.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1a6b18.  @monitorexit v2
  #Try_end1.  
  #L1a6b1a.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a6b1e.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a6b22.  call temp:= `removeStream`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L1a6b28.  v0:= 1I;
  #L1a6b2a.  goto L1a6aea;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a6b08;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a6b08;
}
procedure `void` `addBytesToWriteWindow`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `long` v4 @name `delta`) @signature `Lokhttp3/internal/http2/Http2Stream;.addBytesToWriteWindow:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a6b50.  v0:= v3.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L1a6b54.  v0:= v0 + v4 @kind long;
  #L1a6b56.  v3.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L1a6b5a.  v0:= 0L;
  #L1a6b5e.  v0:= lcmp(v4, v0);
  #L1a6b62.  if v0 <= 0 then goto L1a6b6c;
  #L1a6b66.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1a6b6c.  return @kind void;
}
procedure `void` `cancelStreamIfNecessary`(`okhttp3.internal.http2.Http2Stream` v4 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.cancelStreamIfNecessary:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a6b80.  v2:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a6b84.  if v2 != 0 then goto L1a6ba0;
  #L1a6b88.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a6b8e.  v2:= temp;
  #L1a6b90.  if v2 == 0 then goto L1a6ba0;
  #L1a6b94.  v2:= new `java.lang.AssertionError`;
  #L1a6b98.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a6b9e.  throw v2;
  #L1a6ba0.  @monitorenter v4
  #Try_start0.  
  #L1a6ba2.  v2:= v4.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a6ba6.  v2:= v2.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L1a6baa.  if v2 != 0 then goto L1a6bee;
  #L1a6bae.  v2:= v4.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a6bb2.  v2:= v2.`okhttp3.internal.http2.Http2Stream$FramingSource.closed` @type ^`boolean` @kind boolean;
  #L1a6bb6.  if v2 == 0 then goto L1a6bee;
  #L1a6bba.  v2:= v4.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a6bbe.  v2:= v2.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L1a6bc2.  if v2 != 0 then goto L1a6bd2;
  #L1a6bc6.  v2:= v4.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a6bca.  v2:= v2.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L1a6bce.  if v2 == 0 then goto L1a6bee;
  #L1a6bd2.  v0:= 1I;
  #L1a6bd4.  call temp:= `isOpen`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L1a6bda.  v1:= temp;
  #L1a6bdc.  @monitorexit v4
  #Try_end0.  
  #L1a6bde.  if v0 == 0 then goto L1a6bf8;
  #L1a6be2.  v2:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a6be6.  call `close`(v4, v2) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a6bec.  return @kind void;
  #L1a6bee.  v0:= 0I;
  #L1a6bf0.  goto L1a6bd4;
  #L1a6bf2.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L1a6bf4.  @monitorexit v4
  #Try_end1.  
  #L1a6bf6.  throw v2;
  #L1a6bf8.  if v1 != 0 then goto L1a6bec;
  #L1a6bfc.  v2:= v4.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a6c00.  v3:= v4.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a6c04.  call temp:= `removeStream`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L1a6c0a.  goto L1a6bec;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a6bf2;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a6bf2;
}
procedure `void` `checkOutNotClosed`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.checkOutNotClosed:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a6c30.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a6c34.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L1a6c38.  if v0 == 0 then goto L1a6c4c;
  #L1a6c3c.  v0:= new `java.io.IOException`;
  #L1a6c40.  v1:= "stream closed" @kind object;
  #L1a6c44.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a6c4a.  throw v0;
  #L1a6c4c.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a6c50.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L1a6c54.  if v0 == 0 then goto L1a6c68;
  #L1a6c58.  v0:= new `java.io.IOException`;
  #L1a6c5c.  v1:= "stream finished" @kind object;
  #L1a6c60.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a6c66.  throw v0;
  #L1a6c68.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a6c6c.  if v0 == 0 then goto L1a6c80;
  #L1a6c70.  v0:= new `okhttp3.internal.http2.StreamResetException`;
  #L1a6c74.  v1:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a6c78.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L1a6c7e.  throw v0;
  #L1a6c80.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object @name `rstStatusCode`) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a6c94.  call temp:= `closeInternal`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @kind direct;
  #L1a6c9a.  v0:= temp;
  #L1a6c9c.  if v0 != 0 then goto L1a6ca2;
  #L1a6ca0.  return @kind void;
  #L1a6ca2.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a6ca6.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a6caa.  call `writeSynReset`(v0, v1, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynReset:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a6cb0.  goto L1a6ca0;
}
procedure `void` `closeLater`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object @name `errorCode`) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a6cc4.  call temp:= `closeInternal`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @kind direct;
  #L1a6cca.  v0:= temp;
  #L1a6ccc.  if v0 != 0 then goto L1a6cd2;
  #L1a6cd0.  return @kind void;
  #L1a6cd2.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a6cd6.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a6cda.  call `writeSynResetLater`(v0, v1, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynResetLater:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a6ce0.  goto L1a6cd0;
}
procedure `okhttp3.internal.http2.Http2Connection` `getConnection`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getConnection:()Lokhttp3/internal/http2/Http2Connection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a6cf4.  v0:= v1.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a6cf8.  return v0 @kind object;
}
procedure `okhttp3.internal.http2.ErrorCode` `getErrorCode`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getErrorCode:()Lokhttp3/internal/http2/ErrorCode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a6d0c.  @monitorenter v1
  #Try_start0.  
  #L1a6d0e.  v0:= v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #Try_end0.  
  #L1a6d12.  @monitorexit v1
  #L1a6d14.  return v0 @kind object;
  #L1a6d16.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a6d18.  @monitorexit v1
  #L1a6d1a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a6d16;
}
procedure `int` `getId`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getId:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a6d38.  v0:= v1.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a6d3c.  return v0;
}
procedure `java.util.List` `getRequestHeaders`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getRequestHeaders:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a6d50.  v0:= v1.`okhttp3.internal.http2.Http2Stream.requestHeaders` @type ^`java.util.List` @kind object;
  #L1a6d54.  return v0 @kind object;
}
procedure `okio.Sink` `getSink`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a6d68.  @monitorenter v2
  #Try_start0.  
  #L1a6d6a.  v0:= v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` @kind boolean;
  #L1a6d6e.  if v0 != 0 then goto L1a6d94;
  #L1a6d72.  call temp:= `isLocallyInitiated`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L1a6d78.  v0:= temp;
  #L1a6d7a.  if v0 != 0 then goto L1a6d94;
  #L1a6d7e.  v0:= new `java.lang.IllegalStateException`;
  #L1a6d82.  v1:= "reply before requesting the sink" @kind object;
  #L1a6d86.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a6d8c.  throw v0;
  #L1a6d8e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a6d90.  @monitorexit v2
  #Try_end0.  
  #L1a6d92.  throw v0;
  #Try_start1.  
  #L1a6d94.  @monitorexit v2
  #Try_end1.  
  #L1a6d96.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a6d9a.  return v0 @kind object;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a6d8e;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a6d8e;
}
procedure `okio.Source` `getSource`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource:()Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a6dc0.  v0:= v1.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a6dc4.  return v0 @kind object;
}
procedure `boolean` `isLocallyInitiated`(`okhttp3.internal.http2.Http2Stream` v4 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a6dd8.  v2:= 0I;
  #L1a6dda.  v1:= 1I;
  #L1a6ddc.  v3:= v4.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a6de0.  v3:= v3 ^& 1;
  #L1a6de4.  if v3 != v1 then goto L1a6df8;
  #L1a6de8.  v0:= v1;
  #L1a6dea.  v3:= v4.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a6dee.  v3:= v3.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` @kind boolean;
  #L1a6df2.  if v3 != v0 then goto L1a6dfc;
  #L1a6df6.  return v1;
  #L1a6df8.  v0:= v2;
  #L1a6dfa.  goto L1a6dea;
  #L1a6dfc.  v1:= v2;
  #L1a6dfe.  goto L1a6df6;
}
procedure `boolean` `isOpen`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a6e10.  v0:= 0I;
  #L1a6e12.  @monitorenter v2
  #Try_start0.  
  #L1a6e14.  v1:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #Try_end0.  
  #L1a6e18.  if v1 == 0 then goto L1a6e20;
  #L1a6e1c.  @monitorexit v2
  #L1a6e1e.  return v0;
  #Try_start1.  
  #L1a6e20.  v1:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a6e24.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L1a6e28.  if v1 != 0 then goto L1a6e38;
  #L1a6e2c.  v1:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a6e30.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.closed` @type ^`boolean` @kind boolean;
  #L1a6e34.  if v1 == 0 then goto L1a6e58;
  #L1a6e38.  v1:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a6e3c.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L1a6e40.  if v1 != 0 then goto L1a6e50;
  #L1a6e44.  v1:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a6e48.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L1a6e4c.  if v1 == 0 then goto L1a6e58;
  #L1a6e50.  v1:= v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` @kind boolean;
  #Try_end1.  
  #L1a6e54.  if v1 != 0 then goto L1a6e1c;
  #L1a6e58.  v0:= 1I;
  #L1a6e5a.  goto L1a6e1c;
  #L1a6e5c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a6e5e.  @monitorexit v2
  #L1a6e60.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a6e5c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a6e5c;
}
procedure `okio.Timeout` `readTimeout`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a6e88.  v0:= v1.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L1a6e8c.  return v0 @kind object;
}
procedure `void` `receiveData`(`okhttp3.internal.http2.Http2Stream` v4 @kind this, `okio.BufferedSource` v5 @kind object @name `in`, `int` v6 @name `length`) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveData:(Lokio/BufferedSource;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a6ea0.  v0:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a6ea4.  if v0 != 0 then goto L1a6ec0;
  #L1a6ea8.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a6eae.  v0:= temp;
  #L1a6eb0.  if v0 == 0 then goto L1a6ec0;
  #L1a6eb4.  v0:= new `java.lang.AssertionError`;
  #L1a6eb8.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a6ebe.  throw v0;
  #L1a6ec0.  v0:= v4.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a6ec4.  v2:= (`long`) v6 @kind i2l;
  #L1a6ec6.  call `receive`(v0, v5, v2) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.receive:(Lokio/BufferedSource;J)V` @kind virtual;
  #L1a6ecc.  return @kind void;
}
procedure `void` `receiveFin`(`okhttp3.internal.http2.Http2Stream` v3 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveFin:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a6ee0.  v1:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a6ee4.  if v1 != 0 then goto L1a6f00;
  #L1a6ee8.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a6eee.  v1:= temp;
  #L1a6ef0.  if v1 == 0 then goto L1a6f00;
  #L1a6ef4.  v1:= new `java.lang.AssertionError`;
  #L1a6ef8.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a6efe.  throw v1;
  #L1a6f00.  @monitorenter v3
  #Try_start0.  
  #L1a6f02.  v1:= v3.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a6f06.  v2:= 1I;
  #L1a6f08.  v1.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` := v2 @kind boolean;
  #L1a6f0c.  call temp:= `isOpen`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L1a6f12.  v0:= temp;
  #L1a6f14.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1a6f1a.  @monitorexit v3
  #Try_end0.  
  #L1a6f1c.  if v0 != 0 then goto L1a6f2e;
  #L1a6f20.  v1:= v3.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a6f24.  v2:= v3.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a6f28.  call temp:= `removeStream`(v1, v2) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L1a6f2e.  return @kind void;
  #L1a6f30.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L1a6f32.  @monitorexit v3
  #Try_end1.  
  #L1a6f34.  throw v1;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a6f30;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a6f30;
}
procedure `void` `receiveHeaders`(`okhttp3.internal.http2.Http2Stream` v4 @kind this, `java.util.List` v5 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveHeaders:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a6f5c.  v2:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a6f60.  if v2 != 0 then goto L1a6f7c;
  #L1a6f64.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a6f6a.  v2:= temp;
  #L1a6f6c.  if v2 == 0 then goto L1a6f7c;
  #L1a6f70.  v2:= new `java.lang.AssertionError`;
  #L1a6f74.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a6f7a.  throw v2;
  #L1a6f7c.  v1:= 1I;
  #L1a6f7e.  @monitorenter v4
  #L1a6f80.  v2:= 1I;
  #Try_start0.  
  #L1a6f82.  v4.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` := v2 @kind boolean;
  #L1a6f86.  v2:= v4.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L1a6f8a.  if v2 != 0 then goto L1a6fb6;
  #L1a6f8e.  v4.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` := v5 @kind object;
  #L1a6f92.  call temp:= `isOpen`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L1a6f98.  v1:= temp;
  #L1a6f9a.  call `notifyAll`(v4) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1a6fa0.  @monitorexit v4
  #Try_end0.  
  #L1a6fa2.  if v1 != 0 then goto L1a6fb4;
  #L1a6fa6.  v2:= v4.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a6faa.  v3:= v4.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a6fae.  call temp:= `removeStream`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L1a6fb4.  return @kind void;
  #Try_start1.  
  #L1a6fb6.  v0:= new `java.util.ArrayList`;
  #L1a6fba.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1a6fc0.  v2:= v4.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L1a6fc4.  call temp:= `addAll`(v0, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1a6fca.  v2:= 0I;
  #L1a6fcc.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1a6fd2.  call temp:= `addAll`(v0, v5) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1a6fd8.  v4.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` := v0 @kind object;
  #L1a6fdc.  goto L1a6fa0;
  #L1a6fde.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a6fe0.  @monitorexit v4
  #Try_end1.  
  #L1a6fe2.  throw v2;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a6fde;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a6fde;
}
procedure `void` `receiveRstStream`(`okhttp3.internal.http2.Http2Stream` v1 @kind this, `okhttp3.internal.http2.ErrorCode` v2 @kind object @name `errorCode`) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveRstStream:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;

  #L1a7008.  @monitorenter v1
  #Try_start0.  
  #L1a700a.  v0:= v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a700e.  if v0 != 0 then goto L1a701c;
  #L1a7012.  v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v2 @kind object;
  #L1a7016.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #Try_end0.  
  #L1a701c.  @monitorexit v1
  #L1a701e.  return @kind void;
  #L1a7020.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a7022.  @monitorexit v1
  #L1a7024.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a7020;
}
procedure `void` `sendResponseHeaders`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `java.util.List` v4 @kind object, `boolean` v5 @name `out`) @signature `Lokhttp3/internal/http2/Http2Stream;.sendResponseHeaders:(Ljava/util/List;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a7044.  v1:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a7048.  if v1 != 0 then goto L1a7064;
  #L1a704c.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a7052.  v1:= temp;
  #L1a7054.  if v1 == 0 then goto L1a7064;
  #L1a7058.  v1:= new `java.lang.AssertionError`;
  #L1a705c.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a7062.  throw v1;
  #L1a7064.  if v4 != 0 then goto L1a7078;
  #L1a7068.  v1:= new `java.lang.NullPointerException`;
  #L1a706c.  v2:= "responseHeaders == null" @kind object;
  #L1a7070.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a7076.  throw v1;
  #L1a7078.  v0:= 0I;
  #L1a707a.  @monitorenter v3
  #L1a707c.  v1:= 1I;
  #Try_start0.  
  #L1a707e.  v3.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` := v1 @kind boolean;
  #L1a7082.  if v5 != 0 then goto L1a7092;
  #L1a7086.  v1:= v3.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a708a.  v2:= 1I;
  #L1a708c.  v1.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` := v2 @kind boolean;
  #L1a7090.  v0:= 1I;
  #L1a7092.  @monitorexit v3
  #Try_end0.  
  #L1a7094.  v1:= v3.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a7098.  v2:= v3.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a709c.  call `writeSynReply`(v1, v2, v0, v4) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynReply:(IZLjava/util/List;)V` @kind virtual;
  #L1a70a2.  if v0 == 0 then goto L1a70b0;
  #L1a70a6.  v1:= v3.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a70aa.  call `flush`(v1) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L1a70b0.  return @kind void;
  #L1a70b2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L1a70b4.  @monitorexit v3
  #Try_end1.  
  #L1a70b6.  throw v1;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a70b2;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a70b2;
}
procedure `java.util.List` `takeResponseHeaders`(`okhttp3.internal.http2.Http2Stream` v3 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.takeResponseHeaders:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a70dc.  @monitorenter v3
  #Try_start0.  
  #L1a70de.  call temp:= `isLocallyInitiated`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L1a70e4.  v1:= temp;
  #L1a70e6.  if v1 != 0 then goto L1a7100;
  #L1a70ea.  v1:= new `java.lang.IllegalStateException`;
  #L1a70ee.  v2:= "servers cannot read response headers" @kind object;
  #L1a70f2.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a70f8.  throw v1;
  #Try_end0.  
  #L1a70fa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a70fc.  @monitorexit v3
  #L1a70fe.  throw v1;
  #Try_start1.  
  #L1a7100.  v1:= v3.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L1a7104.  call `enter`(v1) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.enter:()V` @kind virtual;
  #Try_end1.  
  #Try_start2.  
  #L1a710a.  v1:= v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L1a710e.  if v1 != 0 then goto L1a7130;
  #L1a7112.  v1:= v3.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a7116.  if v1 != 0 then goto L1a7130;
  #L1a711a.  call `waitForIo`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.waitForIo:()V` @kind virtual;
  #Try_end2.  
  #L1a7120.  goto L1a710a;
  #L1a7122.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L1a7124.  v2:= v3.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L1a7128.  call `exitAndThrowIfTimedOut`(v2) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L1a712e.  throw v1;
  #L1a7130.  v1:= v3.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L1a7134.  call `exitAndThrowIfTimedOut`(v1) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L1a713a.  v0:= v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L1a713e.  if v0 == 0 then goto L1a714c;
  #L1a7142.  v1:= 0I;
  #L1a7144.  v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` := v1 @kind object;
  #Try_end3.  
  #L1a7148.  @monitorexit v3
  #L1a714a.  return v0 @kind object;
  #Try_start4.  
  #L1a714c.  v1:= new `okhttp3.internal.http2.StreamResetException`;
  #L1a7150.  v2:= v3.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a7154.  call `<init>`(v1, v2) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L1a715a.  throw v1;
  #Try_end4.  
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a70fa;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a70fa;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L1a7122;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L1a70fa;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L1a70fa;
}
procedure `void` `waitForIo`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.waitForIo:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L1a719c.  call `wait`(v2) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #Try_end0.  
  #L1a71a2.  return @kind void;
  #L1a71a4.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L1a71a6.  v1:= new `java.io.InterruptedIOException`;
  #L1a71aa.  call `<init>`(v1) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L1a71b0.  throw v1;
  catch `java.lang.InterruptedException` @[Try_start0..Try_end0] goto L1a71a4;
}
procedure `okio.Timeout` `writeTimeout`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a71d4.  v0:= v1.`okhttp3.internal.http2.Http2Stream.writeTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L1a71d8.  return v0 @kind object;
}
