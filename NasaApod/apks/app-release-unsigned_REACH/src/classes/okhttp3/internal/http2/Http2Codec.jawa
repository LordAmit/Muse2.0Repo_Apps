record `okhttp3.internal.http2.Http2Codec` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.http.HttpCodec` @kind interface {
  `okhttp3.Interceptor$Chain` `okhttp3.internal.http2.Http2Codec.chain` @AccessFlag PRIVATE_FINAL;
  `okhttp3.OkHttpClient` `okhttp3.internal.http2.Http2Codec.client` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2Codec.connection` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Stream` `okhttp3.internal.http2.Http2Codec.stream` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.StreamAllocation` `okhttp3.internal.http2.Http2Codec.streamAllocation` @AccessFlag FINAL;
}
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.HOST` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.TE` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Codec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L218b10.  v7:= 4I;
  #L218b12.  v6:= 3I;
  #L218b14.  v5:= 2I;
  #L218b16.  v4:= 1I;
  #L218b18.  v3:= 0I;
  #L218b1a.  v0:= "connection" @kind object;
  #L218b1e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L218b24.  v0:= temp @kind object;
  #L218b26.  `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @type ^`okio.ByteString` := v0 @kind object;
  #L218b2a.  v0:= "host" @kind object;
  #L218b2e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L218b34.  v0:= temp @kind object;
  #L218b36.  `@@okhttp3.internal.http2.Http2Codec.HOST` @type ^`okio.ByteString` := v0 @kind object;
  #L218b3a.  v0:= "keep-alive" @kind object;
  #L218b3e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L218b44.  v0:= temp @kind object;
  #L218b46.  `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @type ^`okio.ByteString` := v0 @kind object;
  #L218b4a.  v0:= "proxy-connection" @kind object;
  #L218b4e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L218b54.  v0:= temp @kind object;
  #L218b56.  `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @type ^`okio.ByteString` := v0 @kind object;
  #L218b5a.  v0:= "transfer-encoding" @kind object;
  #L218b5e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L218b64.  v0:= temp @kind object;
  #L218b66.  `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @type ^`okio.ByteString` := v0 @kind object;
  #L218b6a.  v0:= "te" @kind object;
  #L218b6e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L218b74.  v0:= temp @kind object;
  #L218b76.  `@@okhttp3.internal.http2.Http2Codec.TE` @type ^`okio.ByteString` := v0 @kind object;
  #L218b7a.  v0:= "encoding" @kind object;
  #L218b7e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L218b84.  v0:= temp @kind object;
  #L218b86.  `@@okhttp3.internal.http2.Http2Codec.ENCODING` @type ^`okio.ByteString` := v0 @kind object;
  #L218b8a.  v0:= "upgrade" @kind object;
  #L218b8e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L218b94.  v0:= temp @kind object;
  #L218b96.  `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @type ^`okio.ByteString` := v0 @kind object;
  #L218b9a.  v0:= 12I;
  #L218b9e.  v0:= new `okio.ByteString`[v0];
  #L218ba2.  v1:= `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @type ^`okio.ByteString` @kind object;
  #L218ba6.  v0[v3]:= v1 @kind object;
  #L218baa.  v1:= `@@okhttp3.internal.http2.Http2Codec.HOST` @type ^`okio.ByteString` @kind object;
  #L218bae.  v0[v4]:= v1 @kind object;
  #L218bb2.  v1:= `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @type ^`okio.ByteString` @kind object;
  #L218bb6.  v0[v5]:= v1 @kind object;
  #L218bba.  v1:= `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @type ^`okio.ByteString` @kind object;
  #L218bbe.  v0[v6]:= v1 @kind object;
  #L218bc2.  v1:= `@@okhttp3.internal.http2.Http2Codec.TE` @type ^`okio.ByteString` @kind object;
  #L218bc6.  v0[v7]:= v1 @kind object;
  #L218bca.  v1:= 5I;
  #L218bcc.  v2:= `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @type ^`okio.ByteString` @kind object;
  #L218bd0.  v0[v1]:= v2 @kind object;
  #L218bd4.  v1:= 6I;
  #L218bd6.  v2:= `@@okhttp3.internal.http2.Http2Codec.ENCODING` @type ^`okio.ByteString` @kind object;
  #L218bda.  v0[v1]:= v2 @kind object;
  #L218bde.  v1:= 7I;
  #L218be0.  v2:= `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @type ^`okio.ByteString` @kind object;
  #L218be4.  v0[v1]:= v2 @kind object;
  #L218be8.  v1:= 8I;
  #L218bec.  v2:= `@@okhttp3.internal.http2.Header.TARGET_METHOD` @type ^`okio.ByteString` @kind object;
  #L218bf0.  v0[v1]:= v2 @kind object;
  #L218bf4.  v1:= 9I;
  #L218bf8.  v2:= `@@okhttp3.internal.http2.Header.TARGET_PATH` @type ^`okio.ByteString` @kind object;
  #L218bfc.  v0[v1]:= v2 @kind object;
  #L218c00.  v1:= 10I;
  #L218c04.  v2:= `@@okhttp3.internal.http2.Header.TARGET_SCHEME` @type ^`okio.ByteString` @kind object;
  #L218c08.  v0[v1]:= v2 @kind object;
  #L218c0c.  v1:= 11I;
  #L218c10.  v2:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L218c14.  v0[v1]:= v2 @kind object;
  #L218c18.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L218c1e.  v0:= temp @kind object;
  #L218c20.  `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @type ^`java.util.List` := v0 @kind object;
  #L218c24.  v0:= 8I;
  #L218c28.  v0:= new `okio.ByteString`[v0];
  #L218c2c.  v1:= `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @type ^`okio.ByteString` @kind object;
  #L218c30.  v0[v3]:= v1 @kind object;
  #L218c34.  v1:= `@@okhttp3.internal.http2.Http2Codec.HOST` @type ^`okio.ByteString` @kind object;
  #L218c38.  v0[v4]:= v1 @kind object;
  #L218c3c.  v1:= `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @type ^`okio.ByteString` @kind object;
  #L218c40.  v0[v5]:= v1 @kind object;
  #L218c44.  v1:= `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @type ^`okio.ByteString` @kind object;
  #L218c48.  v0[v6]:= v1 @kind object;
  #L218c4c.  v1:= `@@okhttp3.internal.http2.Http2Codec.TE` @type ^`okio.ByteString` @kind object;
  #L218c50.  v0[v7]:= v1 @kind object;
  #L218c54.  v1:= 5I;
  #L218c56.  v2:= `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @type ^`okio.ByteString` @kind object;
  #L218c5a.  v0[v1]:= v2 @kind object;
  #L218c5e.  v1:= 6I;
  #L218c60.  v2:= `@@okhttp3.internal.http2.Http2Codec.ENCODING` @type ^`okio.ByteString` @kind object;
  #L218c64.  v0[v1]:= v2 @kind object;
  #L218c68.  v1:= 7I;
  #L218c6a.  v2:= `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @type ^`okio.ByteString` @kind object;
  #L218c6e.  v0[v1]:= v2 @kind object;
  #L218c72.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L218c78.  v0:= temp @kind object;
  #L218c7a.  `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @type ^`java.util.List` := v0 @kind object;
  #L218c7e.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Codec` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object @name `client`, `okhttp3.Interceptor$Chain` v2 @kind object @name `chain`, `okhttp3.internal.connection.StreamAllocation` v3 @kind object @name `streamAllocation`, `okhttp3.internal.http2.Http2Connection` v4 @kind object @name `connection`) @signature `Lokhttp3/internal/http2/Http2Codec;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Interceptor$Chain;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http2/Http2Connection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L218c90.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L218c96.  v0.`okhttp3.internal.http2.Http2Codec.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L218c9a.  v0.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` := v2 @kind object;
  #L218c9e.  v0.`okhttp3.internal.http2.Http2Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v3 @kind object;
  #L218ca2.  v0.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` := v4 @kind object;
  #L218ca6.  return @kind void;
}
procedure `java.util.List` `http2HeadersList`(`okhttp3.Request` v9 @kind object @name `request`) @signature `Lokhttp3/internal/http2/Http2Codec;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L218cb8.  call temp:= `headers`(v9) @signature `Lokhttp3/Request;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L218cbe.  v0:= temp @kind object;
  #L218cc0.  v4:= new `java.util.ArrayList`;
  #L218cc4.  call temp:= `size`(v0) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L218cca.  v6:= temp;
  #L218ccc.  v6:= v6 + 4;
  #L218cd0.  call `<init>`(v4, v6) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L218cd6.  v6:= new `okhttp3.internal.http2.Header`;
  #L218cda.  v7:= `@@okhttp3.internal.http2.Header.TARGET_METHOD` @type ^`okio.ByteString` @kind object;
  #L218cde.  call temp:= `method`(v9) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L218ce4.  v8:= temp @kind object;
  #L218ce6.  call `<init>`(v6, v7, v8) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L218cec.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L218cf2.  v6:= new `okhttp3.internal.http2.Header`;
  #L218cf6.  v7:= `@@okhttp3.internal.http2.Header.TARGET_PATH` @type ^`okio.ByteString` @kind object;
  #L218cfa.  call temp:= `url`(v9) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L218d00.  v8:= temp @kind object;
  #L218d02.  call temp:= `requestPath`(v8) @signature `Lokhttp3/internal/http/RequestLine;.requestPath:(Lokhttp3/HttpUrl;)Ljava/lang/String;` @kind static;
  #L218d08.  v8:= temp @kind object;
  #L218d0a.  call `<init>`(v6, v7, v8) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L218d10.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L218d16.  v6:= "Host" @kind object;
  #L218d1a.  call temp:= `header`(v9, v6) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L218d20.  v1:= temp @kind object;
  #L218d22.  if v1 == 0 then goto L218d3a;
  #L218d26.  v6:= new `okhttp3.internal.http2.Header`;
  #L218d2a.  v7:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L218d2e.  call `<init>`(v6, v7, v1) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L218d34.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L218d3a.  v6:= new `okhttp3.internal.http2.Header`;
  #L218d3e.  v7:= `@@okhttp3.internal.http2.Header.TARGET_SCHEME` @type ^`okio.ByteString` @kind object;
  #L218d42.  call temp:= `url`(v9) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L218d48.  v8:= temp @kind object;
  #L218d4a.  call temp:= `scheme`(v8) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L218d50.  v8:= temp @kind object;
  #L218d52.  call `<init>`(v6, v7, v8) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L218d58.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L218d5e.  v2:= 0I;
  #L218d60.  call temp:= `size`(v0) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L218d66.  v5:= temp;
  #L218d68.  if v2 >= v5 then goto L218db6;
  #L218d6c.  call temp:= `name`(v0, v2) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L218d72.  v6:= temp @kind object;
  #L218d74.  v7:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L218d78.  call temp:= `toLowerCase`(v6, v7) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L218d7e.  v6:= temp @kind object;
  #L218d80.  call temp:= `encodeUtf8`(v6) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L218d86.  v3:= temp @kind object;
  #L218d88.  v6:= `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @type ^`java.util.List` @kind object;
  #L218d8c.  call temp:= `contains`(v6, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L218d92.  v6:= temp;
  #L218d94.  if v6 != 0 then goto L218db0;
  #L218d98.  v6:= new `okhttp3.internal.http2.Header`;
  #L218d9c.  call temp:= `value`(v0, v2) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L218da2.  v7:= temp @kind object;
  #L218da4.  call `<init>`(v6, v3, v7) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L218daa.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L218db0.  v2:= v2 + 1;
  #L218db4.  goto L218d68;
  #L218db6.  return v4 @kind object;
}
procedure `okhttp3.Response$Builder` `readHttp2HeadersList`(`java.util.List` v9 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.readHttp2HeadersList:(Ljava/util/List;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L218dc8.  v5:= 0I;
  #L218dca.  v1:= new `okhttp3.Headers$Builder`;
  #L218dce.  call `<init>`(v1) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L218dd4.  v2:= 0I;
  #L218dd6.  call temp:= `size`(v9) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L218ddc.  v4:= temp;
  #L218dde.  if v2 >= v4 then goto L218e88;
  #L218de2.  call temp:= `get`(v9, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L218de8.  v0:= temp @kind object;
  #L218dea.  v0:= (`okhttp3.internal.http2.Header`) v0 @kind object;
  #L218dee.  if v0 != 0 then goto L218e14;
  #L218df2.  if v5 == 0 then goto L218e0e;
  #L218df6.  v7:= v5.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L218dfa.  v8:= 100I;
  #L218dfe.  if v7 != v8 then goto L218e0e;
  #L218e02.  v5:= 0I;
  #L218e04.  v1:= new `okhttp3.Headers$Builder`;
  #L218e08.  call `<init>`(v1) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L218e0e.  v2:= v2 + 1;
  #L218e12.  goto L218dde;
  #L218e14.  v3:= v0.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L218e18.  v7:= v0.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L218e1c.  call temp:= `utf8`(v7) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L218e22.  v6:= temp @kind object;
  #L218e24.  v7:= `@@okhttp3.internal.http2.Header.RESPONSE_STATUS` @type ^`okio.ByteString` @kind object;
  #L218e28.  call temp:= `equals`(v3, v7) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L218e2e.  v7:= temp;
  #L218e30.  if v7 == 0 then goto L218e64;
  #L218e34.  v7:= new `java.lang.StringBuilder`;
  #L218e38.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L218e3e.  v8:= "HTTP/1.1 " @kind object;
  #L218e42.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L218e48.  v7:= temp @kind object;
  #L218e4a.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L218e50.  v7:= temp @kind object;
  #L218e52.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L218e58.  v7:= temp @kind object;
  #L218e5a.  call temp:= `parse`(v7) @signature `Lokhttp3/internal/http/StatusLine;.parse:(Ljava/lang/String;)Lokhttp3/internal/http/StatusLine;` @kind static;
  #L218e60.  v5:= temp @kind object;
  #L218e62.  goto L218e0e;
  #L218e64.  v7:= `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @type ^`java.util.List` @kind object;
  #L218e68.  call temp:= `contains`(v7, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L218e6e.  v7:= temp;
  #L218e70.  if v7 != 0 then goto L218e0e;
  #L218e74.  v7:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L218e78.  call temp:= `utf8`(v3) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L218e7e.  v8:= temp @kind object;
  #L218e80.  call `addLenient`(v7, v1, v8, v6) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L218e86.  goto L218e0e;
  #L218e88.  if v5 != 0 then goto L218e9c;
  #L218e8c.  v7:= new `java.net.ProtocolException`;
  #L218e90.  v8:= "Expected ':status' header not present" @kind object;
  #L218e94.  call `<init>`(v7, v8) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L218e9a.  throw v7;
  #L218e9c.  v7:= new `okhttp3.Response$Builder`;
  #L218ea0.  call `<init>`(v7) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L218ea6.  v8:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L218eaa.  call temp:= `protocol`(v7, v8) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L218eb0.  v7:= temp @kind object;
  #L218eb2.  v8:= v5.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L218eb6.  call temp:= `code`(v7, v8) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L218ebc.  v7:= temp @kind object;
  #L218ebe.  v8:= v5.`okhttp3.internal.http.StatusLine.message` @type ^`java.lang.String` @kind object;
  #L218ec2.  call temp:= `message`(v7, v8) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L218ec8.  v7:= temp @kind object;
  #L218eca.  call temp:= `build`(v1) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L218ed0.  v8:= temp @kind object;
  #L218ed2.  call temp:= `headers`(v7, v8) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L218ed8.  v7:= temp @kind object;
  #L218eda.  return v7 @kind object;
}
procedure `void` `cancel`(`okhttp3.internal.http2.Http2Codec` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L218eec.  v0:= v2.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L218ef0.  if v0 == 0 then goto L218f02;
  #L218ef4.  v0:= v2.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L218ef8.  v1:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L218efc.  call `closeLater`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L218f02.  return @kind void;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.internal.http2.Http2Codec` v1 @kind this, `okhttp3.Request` v2 @kind object @name `request`, `long` v3 @name `contentLength`) @signature `Lokhttp3/internal/http2/Http2Codec;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L218f14.  v0:= v1.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L218f18.  call temp:= `getSink`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L218f1e.  v0:= temp @kind object;
  #L218f20.  return v0 @kind object;
}
procedure `void` `finishRequest`(`okhttp3.internal.http2.Http2Codec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.finishRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L218f34.  v0:= v1.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L218f38.  call temp:= `getSink`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L218f3e.  v0:= temp @kind object;
  #L218f40.  call `close`(v0) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L218f46.  return @kind void;
}
procedure `void` `flushRequest`(`okhttp3.internal.http2.Http2Codec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.flushRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L218f58.  v0:= v1.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L218f5c.  call `flush`(v0) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L218f62.  return @kind void;
}
procedure `okhttp3.ResponseBody` `openResponseBody`(`okhttp3.internal.http2.Http2Codec` v6 @kind this, `okhttp3.Response` v7 @kind object @name `response`) @signature `Lokhttp3/internal/http2/Http2Codec;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L218f74.  v4:= v6.`okhttp3.internal.http2.Http2Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L218f78.  v4:= v4.`okhttp3.internal.connection.StreamAllocation.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L218f7c.  v5:= v6.`okhttp3.internal.http2.Http2Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L218f80.  v5:= v5.`okhttp3.internal.connection.StreamAllocation.call` @type ^`okhttp3.Call` @kind object;
  #L218f84.  call `responseBodyStart`(v4, v5) @signature `Lokhttp3/EventListener;.responseBodyStart:(Lokhttp3/Call;)V` @kind virtual;
  #L218f8a.  v4:= "Content-Type" @kind object;
  #L218f8e.  call temp:= `header`(v7, v4) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L218f94.  v2:= temp @kind object;
  #L218f96.  call temp:= `contentLength`(v7) @signature `Lokhttp3/internal/http/HttpHeaders;.contentLength:(Lokhttp3/Response;)J` @kind static;
  #L218f9c.  v0:= temp @kind wide;
  #L218f9e.  v3:= new `okhttp3.internal.http2.Http2Codec$StreamFinishingSource`;
  #L218fa2.  v4:= v6.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L218fa6.  call temp:= `getSource`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource:()Lokio/Source;` @kind virtual;
  #L218fac.  v4:= temp @kind object;
  #L218fae.  call `<init>`(v3, v6, v4) @signature `Lokhttp3/internal/http2/Http2Codec$StreamFinishingSource;.<init>:(Lokhttp3/internal/http2/Http2Codec;Lokio/Source;)V` @kind direct;
  #L218fb4.  v4:= new `okhttp3.internal.http.RealResponseBody`;
  #L218fb8.  call temp:= `buffer`(v3) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L218fbe.  v5:= temp @kind object;
  #L218fc0.  call `<init>`(v4, v2, v0, v5) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L218fc6.  return v4 @kind object;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.http2.Http2Codec` v4 @kind this, `boolean` v5 @name `expectContinue`) @signature `Lokhttp3/internal/http2/Http2Codec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L218fd8.  v2:= v4.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L218fdc.  call temp:= `takeResponseHeaders`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.takeResponseHeaders:()Ljava/util/List;` @kind virtual;
  #L218fe2.  v0:= temp @kind object;
  #L218fe4.  call temp:= `readHttp2HeadersList`(v0) @signature `Lokhttp3/internal/http2/Http2Codec;.readHttp2HeadersList:(Ljava/util/List;)Lokhttp3/Response$Builder;` @kind static;
  #L218fea.  v1:= temp @kind object;
  #L218fec.  if v5 == 0 then goto L219006;
  #L218ff0.  v2:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L218ff4.  call temp:= `code`(v2, v1) @signature `Lokhttp3/internal/Internal;.code:(Lokhttp3/Response$Builder;)I` @kind virtual;
  #L218ffa.  v2:= temp;
  #L218ffc.  v3:= 100I;
  #L219000.  if v2 != v3 then goto L219006;
  #L219004.  v1:= 0I;
  #L219006.  return v1 @kind object;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.http2.Http2Codec` v6 @kind this, `okhttp3.Request` v7 @kind object @name `request`) @signature `Lokhttp3/internal/http2/Http2Codec;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L219018.  v2:= v6.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21901c.  if v2 == 0 then goto L219022;
  #L219020.  return @kind void;
  #L219022.  call temp:= `body`(v7) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L219028.  v2:= temp @kind object;
  #L21902a.  if v2 == 0 then goto L219092;
  #L21902e.  v0:= 1I;
  #L219030.  call temp:= `http2HeadersList`(v7) @signature `Lokhttp3/internal/http2/Http2Codec;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @kind static;
  #L219036.  v1:= temp @kind object;
  #L219038.  v2:= v6.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L21903c.  call temp:= `newStream`(v2, v1, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(Ljava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L219042.  v2:= temp @kind object;
  #L219044.  v6.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` := v2 @kind object;
  #L219048.  v2:= v6.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21904c.  call temp:= `readTimeout`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/Timeout;` @kind virtual;
  #L219052.  v2:= temp @kind object;
  #L219054.  v3:= v6.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` @kind object;
  #L219058.  call temp:= `readTimeoutMillis`(v3) @signature `Lokhttp3/Interceptor$Chain;.readTimeoutMillis:()I` @kind interface;
  #L21905e.  v3:= temp;
  #L219060.  v4:= (`long`) v3 @kind i2l;
  #L219062.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L219066.  call temp:= `timeout`(v2, v4, v3) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L21906c.  v2:= v6.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L219070.  call temp:= `writeTimeout`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/Timeout;` @kind virtual;
  #L219076.  v2:= temp @kind object;
  #L219078.  v3:= v6.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` @kind object;
  #L21907c.  call temp:= `writeTimeoutMillis`(v3) @signature `Lokhttp3/Interceptor$Chain;.writeTimeoutMillis:()I` @kind interface;
  #L219082.  v3:= temp;
  #L219084.  v4:= (`long`) v3 @kind i2l;
  #L219086.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L21908a.  call temp:= `timeout`(v2, v4, v3) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L219090.  goto L219020;
  #L219092.  v0:= 0I;
  #L219094.  goto L219030;
}
