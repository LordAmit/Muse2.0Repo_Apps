record `okhttp3.internal.http2.Http2Reader` @kind class @AccessFlag FINAL extends `java.io.Closeable` @kind interface {
  `boolean` `okhttp3.internal.http2.Http2Reader.client` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Reader$ContinuationSource` `okhttp3.internal.http2.Http2Reader.continuation` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Hpack$Reader` `okhttp3.internal.http2.Http2Reader.hpackReader` @AccessFlag FINAL;
  `okio.BufferedSource` `okhttp3.internal.http2.Http2Reader.source` @AccessFlag PRIVATE_FINAL;
}
global `java.util.logging.Logger` `@@okhttp3.internal.http2.Http2Reader.logger` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Reader;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a6058.  v0:= constclass @type ^`okhttp3.internal.http2.Http2` @kind object;
  #L1a605c.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1a6062.  v0:= temp @kind object;
  #L1a6064.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L1a606a.  v0:= temp @kind object;
  #L1a606c.  `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L1a6070.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Reader` v3 @kind this, `okio.BufferedSource` v4 @kind object @name `source`, `boolean` v5 @name `client`) @signature `Lokhttp3/internal/http2/Http2Reader;.<init>:(Lokio/BufferedSource;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1a6084.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a608a.  v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` := v4 @kind object;
  #L1a608e.  v3.`okhttp3.internal.http2.Http2Reader.client` @type ^`boolean` := v5 @kind boolean;
  #L1a6092.  v0:= new `okhttp3.internal.http2.Http2Reader$ContinuationSource`;
  #L1a6096.  v1:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a609a.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Reader$ContinuationSource;.<init>:(Lokio/BufferedSource;)V` @kind direct;
  #L1a60a0.  v3.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` := v0 @kind object;
  #L1a60a4.  v0:= new `okhttp3.internal.http2.Hpack$Reader`;
  #L1a60a8.  v1:= 4096I;
  #L1a60ac.  v2:= v3.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L1a60b0.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(ILokio/Source;)V` @kind direct;
  #L1a60b6.  v3.`okhttp3.internal.http2.Http2Reader.hpackReader` @type ^`okhttp3.internal.http2.Hpack$Reader` := v0 @kind object;
  #L1a60ba.  return @kind void;
}
procedure `int` `lengthWithoutPadding`(`int` v4 @name `length`, `byte` v5 @name `flags`, `short` v6 @name `padding`) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a60cc.  v0:= v5 ^& 8;
  #L1a60d0.  if v0 == 0 then goto L1a60d8;
  #L1a60d4.  v4:= v4 + -1;
  #L1a60d8.  if v6 <= v4 then goto L1a610c;
  #L1a60dc.  v0:= "PROTOCOL_ERROR padding %s > remaining length %s" @kind object;
  #L1a60e0.  v1:= 2I;
  #L1a60e2.  v1:= new `java.lang.Object`[v1];
  #L1a60e6.  v2:= 0I;
  #L1a60e8.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Short;.valueOf:(S)Ljava/lang/Short;` @kind static;
  #L1a60ee.  v3:= temp @kind object;
  #L1a60f0.  v1[v2]:= v3 @kind object;
  #L1a60f4.  v2:= 1I;
  #L1a60f6.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a60fc.  v3:= temp @kind object;
  #L1a60fe.  v1[v2]:= v3 @kind object;
  #L1a6102.  call temp:= `ioException`(v0, v1) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a6108.  v0:= temp @kind object;
  #L1a610a.  throw v0;
  #L1a610c.  v0:= v4 - v6 @kind int;
  #L1a6110.  v0:= (`short`) v0 @kind i2s;
  #L1a6112.  return v0;
}
procedure `void` `readData`(`okhttp3.internal.http2.Http2Reader` v6 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v7 @kind object @name `handler`, `int` v8 @name `length`, `byte` v9 @name `flags`, `int` v10 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readData:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1a6124.  v0:= 1I;
  #L1a6126.  v2:= 0I;
  #L1a6128.  if v10 != 0 then goto L1a613e;
  #L1a612c.  v3:= "PROTOCOL_ERROR: TYPE_DATA streamId == 0" @kind object;
  #L1a6130.  v4:= new `java.lang.Object`[v2];
  #L1a6134.  call temp:= `ioException`(v3, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a613a.  v3:= temp @kind object;
  #L1a613c.  throw v3;
  #L1a613e.  v3:= v9 ^& 1;
  #L1a6142.  if v3 == 0 then goto L1a6166;
  #L1a6146.  v1:= v0;
  #L1a6148.  v3:= v9 ^& 32;
  #L1a614c.  if v3 == 0 then goto L1a616a;
  #L1a6150.  if v0 == 0 then goto L1a616e;
  #L1a6154.  v3:= "PROTOCOL_ERROR: FLAG_COMPRESSED without SETTINGS_COMPRESS_DATA" @kind object;
  #L1a6158.  v4:= new `java.lang.Object`[v2];
  #L1a615c.  call temp:= `ioException`(v3, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a6162.  v3:= temp @kind object;
  #L1a6164.  throw v3;
  #L1a6166.  v1:= v2;
  #L1a6168.  goto L1a6148;
  #L1a616a.  v0:= v2;
  #L1a616c.  goto L1a6150;
  #L1a616e.  v3:= v9 ^& 8;
  #L1a6172.  if v3 == 0 then goto L1a6188;
  #L1a6176.  v3:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a617a.  call temp:= `readByte`(v3) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a6180.  v3:= temp;
  #L1a6182.  v3:= v3 ^& 255;
  #L1a6186.  v2:= (`short`) v3 @kind i2s;
  #L1a6188.  call temp:= `lengthWithoutPadding`(v8, v9, v2) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @kind static;
  #L1a618e.  v8:= temp;
  #L1a6190.  v3:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a6194.  call `data`(v7, v1, v10, v3, v8) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.data:(ZILokio/BufferedSource;I)V` @kind interface;
  #L1a619a.  v3:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a619e.  v4:= (`long`) v2 @kind i2l;
  #L1a61a0.  call `skip`(v3, v4) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L1a61a6.  return @kind void;
}
procedure `void` `readGoAway`(`okhttp3.internal.http2.Http2Reader` v9 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v10 @kind object @name `handler`, `int` v11 @name `length`, `byte` v12 @name `flags`, `int` v13 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readGoAway:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1a61b8.  v6:= 1I;
  #L1a61ba.  v8:= 0I;
  #L1a61bc.  v5:= 8I;
  #L1a61c0.  if v11 >= v5 then goto L1a61e2;
  #L1a61c4.  v5:= "TYPE_GOAWAY length < 8: %s" @kind object;
  #L1a61c8.  v6:= new `java.lang.Object`[v6];
  #L1a61cc.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a61d2.  v7:= temp @kind object;
  #L1a61d4.  v6[v8]:= v7 @kind object;
  #L1a61d8.  call temp:= `ioException`(v5, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a61de.  v5:= temp @kind object;
  #L1a61e0.  throw v5;
  #L1a61e2.  if v13 == 0 then goto L1a61f8;
  #L1a61e6.  v5:= "TYPE_GOAWAY streamId != 0" @kind object;
  #L1a61ea.  v6:= new `java.lang.Object`[v8];
  #L1a61ee.  call temp:= `ioException`(v5, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a61f4.  v5:= temp @kind object;
  #L1a61f6.  throw v5;
  #L1a61f8.  v5:= v9.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a61fc.  call temp:= `readInt`(v5) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a6202.  v3:= temp;
  #L1a6204.  v5:= v9.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a6208.  call temp:= `readInt`(v5) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a620e.  v2:= temp;
  #L1a6210.  v4:= v11 + -8;
  #L1a6214.  call temp:= `fromHttp2`(v2) @signature `Lokhttp3/internal/http2/ErrorCode;.fromHttp2:(I)Lokhttp3/internal/http2/ErrorCode;` @kind static;
  #L1a621a.  v1:= temp @kind object;
  #L1a621c.  if v1 != 0 then goto L1a623e;
  #L1a6220.  v5:= "TYPE_GOAWAY unexpected error code: %d" @kind object;
  #L1a6224.  v6:= new `java.lang.Object`[v6];
  #L1a6228.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a622e.  v7:= temp @kind object;
  #L1a6230.  v6[v8]:= v7 @kind object;
  #L1a6234.  call temp:= `ioException`(v5, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a623a.  v5:= temp @kind object;
  #L1a623c.  throw v5;
  #L1a623e.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L1a6242.  if v4 <= 0 then goto L1a6254;
  #L1a6246.  v5:= v9.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a624a.  v6:= (`long`) v4 @kind i2l;
  #L1a624c.  call temp:= `readByteString`(v5, v6) @signature `Lokio/BufferedSource;.readByteString:(J)Lokio/ByteString;` @kind interface;
  #L1a6252.  v0:= temp @kind object;
  #L1a6254.  call `goAway`(v10, v3, v1, v0) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.goAway:(ILokhttp3/internal/http2/ErrorCode;Lokio/ByteString;)V` @kind interface;
  #L1a625a.  return @kind void;
}
procedure `java.util.List` `readHeaderBlock`(`okhttp3.internal.http2.Http2Reader` v2 @kind this, `int` v3 @name `length`, `short` v4 @name `padding`, `byte` v5 @name `flags`, `int` v6 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaderBlock:(ISBI)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a626c.  v0:= v2.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L1a6270.  v1:= v2.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L1a6274.  v1.`okhttp3.internal.http2.Http2Reader$ContinuationSource.left` @type ^`int` := v3;
  #L1a6278.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.length` @type ^`int` := v3;
  #L1a627c.  v0:= v2.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L1a6280.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.padding` @type ^`short` := v4 @kind char;
  #L1a6284.  v0:= v2.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L1a6288.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.flags` @type ^`byte` := v5 @kind byte;
  #L1a628c.  v0:= v2.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L1a6290.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.streamId` @type ^`int` := v6;
  #L1a6294.  v0:= v2.`okhttp3.internal.http2.Http2Reader.hpackReader` @type ^`okhttp3.internal.http2.Hpack$Reader` @kind object;
  #L1a6298.  call `readHeaders`(v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readHeaders:()V` @kind virtual;
  #L1a629e.  v0:= v2.`okhttp3.internal.http2.Http2Reader.hpackReader` @type ^`okhttp3.internal.http2.Hpack$Reader` @kind object;
  #L1a62a2.  call temp:= `getAndResetHeaderList`(v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getAndResetHeaderList:()Ljava/util/List;` @kind virtual;
  #L1a62a8.  v0:= temp @kind object;
  #L1a62aa.  return v0 @kind object;
}
procedure `void` `readHeaders`(`okhttp3.internal.http2.Http2Reader` v5 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v6 @kind object @name `handler`, `int` v7 @name `length`, `byte` v8 @name `flags`, `int` v9 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaders:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a62bc.  v2:= 0I;
  #L1a62be.  if v9 != 0 then goto L1a62d4;
  #L1a62c2.  v3:= "PROTOCOL_ERROR: TYPE_HEADERS streamId == 0" @kind object;
  #L1a62c6.  v4:= new `java.lang.Object`[v2];
  #L1a62ca.  call temp:= `ioException`(v3, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a62d0.  v3:= temp @kind object;
  #L1a62d2.  throw v3;
  #L1a62d4.  v3:= v8 ^& 1;
  #L1a62d8.  if v3 == 0 then goto L1a6324;
  #L1a62dc.  v0:= 1I;
  #L1a62de.  v3:= v8 ^& 8;
  #L1a62e2.  if v3 == 0 then goto L1a62f8;
  #L1a62e6.  v3:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a62ea.  call temp:= `readByte`(v3) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a62f0.  v3:= temp;
  #L1a62f2.  v3:= v3 ^& 255;
  #L1a62f6.  v2:= (`short`) v3 @kind i2s;
  #L1a62f8.  v3:= v8 ^& 32;
  #L1a62fc.  if v3 == 0 then goto L1a630a;
  #L1a6300.  call `readPriority`(v5, v6, v9) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;I)V` @kind direct;
  #L1a6306.  v7:= v7 + -5;
  #L1a630a.  call temp:= `lengthWithoutPadding`(v7, v8, v2) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @kind static;
  #L1a6310.  v7:= temp;
  #L1a6312.  call temp:= `readHeaderBlock`(v5, v7, v2, v8, v9) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaderBlock:(ISBI)Ljava/util/List;` @kind direct;
  #L1a6318.  v1:= temp @kind object;
  #L1a631a.  v3:= -1I;
  #L1a631c.  call `headers`(v6, v0, v9, v3, v1) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.headers:(ZIILjava/util/List;)V` @kind interface;
  #L1a6322.  return @kind void;
  #L1a6324.  v0:= v2;
  #L1a6326.  goto L1a62de;
}
procedure `int` `readMedium`(`okio.BufferedSource` v2 @kind object @name `source`) @signature `Lokhttp3/internal/http2/Http2Reader;.readMedium:(Lokio/BufferedSource;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1a6338.  call temp:= `readByte`(v2) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a633e.  v0:= temp;
  #L1a6340.  v0:= v0 ^& 255;
  #L1a6344.  v0:= v0 ^< 16;
  #L1a6348.  call temp:= `readByte`(v2) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a634e.  v1:= temp;
  #L1a6350.  v1:= v1 ^& 255;
  #L1a6354.  v1:= v1 ^< 8;
  #L1a6358.  v0:= v0 ^| v1 @kind int;
  #L1a635a.  call temp:= `readByte`(v2) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a6360.  v1:= temp;
  #L1a6362.  v1:= v1 ^& 255;
  #L1a6366.  v0:= v0 ^| v1 @kind int;
  #L1a6368.  return v0;
}
procedure `void` `readPing`(`okhttp3.internal.http2.Http2Reader` v7 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v8 @kind object @name `handler`, `int` v9 @name `length`, `byte` v10 @name `flags`, `int` v11 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readPing:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a637c.  v0:= 1I;
  #L1a637e.  v3:= 0I;
  #L1a6380.  v4:= 8I;
  #L1a6384.  if v9 == v4 then goto L1a63a6;
  #L1a6388.  v4:= "TYPE_PING length != 8: %s" @kind object;
  #L1a638c.  v5:= new `java.lang.Object`[v0];
  #L1a6390.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a6396.  v6:= temp @kind object;
  #L1a6398.  v5[v3]:= v6 @kind object;
  #L1a639c.  call temp:= `ioException`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a63a2.  v3:= temp @kind object;
  #L1a63a4.  throw v3;
  #L1a63a6.  if v11 == 0 then goto L1a63bc;
  #L1a63aa.  v4:= "TYPE_PING streamId != 0" @kind object;
  #L1a63ae.  v3:= new `java.lang.Object`[v3];
  #L1a63b2.  call temp:= `ioException`(v4, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a63b8.  v3:= temp @kind object;
  #L1a63ba.  throw v3;
  #L1a63bc.  v4:= v7.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a63c0.  call temp:= `readInt`(v4) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a63c6.  v1:= temp;
  #L1a63c8.  v4:= v7.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a63cc.  call temp:= `readInt`(v4) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a63d2.  v2:= temp;
  #L1a63d4.  v4:= v10 ^& 1;
  #L1a63d8.  if v4 == 0 then goto L1a63e4;
  #L1a63dc.  call `ping`(v8, v0, v1, v2) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.ping:(ZII)V` @kind interface;
  #L1a63e2.  return @kind void;
  #L1a63e4.  v0:= v3;
  #L1a63e6.  goto L1a63dc;
}
procedure `void` `readPriority`(`okhttp3.internal.http2.Http2Reader` v5 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v6 @kind object @name `handler`, `int` v7 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a63f8.  v4:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a63fc.  call temp:= `readInt`(v4) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a6402.  v2:= temp;
  #L1a6404.  v4:= -2147483648I;
  #L1a6408.  v4:= v4 ^& v2 @kind int;
  #L1a640a.  if v4 == 0 then goto L1a6436;
  #L1a640e.  v0:= 1I;
  #L1a6410.  v4:= 2147483647I;
  #L1a6416.  v1:= v2 ^& v4 @kind int;
  #L1a641a.  v4:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a641e.  call temp:= `readByte`(v4) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a6424.  v4:= temp;
  #L1a6426.  v4:= v4 ^& 255;
  #L1a642a.  v3:= v4 + 1;
  #L1a642e.  call `priority`(v6, v7, v1, v3, v0) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.priority:(IIIZ)V` @kind interface;
  #L1a6434.  return @kind void;
  #L1a6436.  v0:= 0I;
  #L1a6438.  goto L1a6410;
}
procedure `void` `readPriority`(`okhttp3.internal.http2.Http2Reader` v4 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v5 @kind object @name `handler`, `int` v6 @name `length`, `byte` v7 @name `flags`, `int` v8 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a644c.  v3:= 0I;
  #L1a644e.  v0:= 5I;
  #L1a6450.  if v6 == v0 then goto L1a6474;
  #L1a6454.  v0:= "TYPE_PRIORITY length: %d != 5" @kind object;
  #L1a6458.  v1:= 1I;
  #L1a645a.  v1:= new `java.lang.Object`[v1];
  #L1a645e.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a6464.  v2:= temp @kind object;
  #L1a6466.  v1[v3]:= v2 @kind object;
  #L1a646a.  call temp:= `ioException`(v0, v1) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a6470.  v0:= temp @kind object;
  #L1a6472.  throw v0;
  #L1a6474.  if v8 != 0 then goto L1a648a;
  #L1a6478.  v0:= "TYPE_PRIORITY streamId == 0" @kind object;
  #L1a647c.  v1:= new `java.lang.Object`[v3];
  #L1a6480.  call temp:= `ioException`(v0, v1) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a6486.  v0:= temp @kind object;
  #L1a6488.  throw v0;
  #L1a648a.  call `readPriority`(v4, v5, v8) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;I)V` @kind direct;
  #L1a6490.  return @kind void;
}
procedure `void` `readPushPromise`(`okhttp3.internal.http2.Http2Reader` v5 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v6 @kind object @name `handler`, `int` v7 @name `length`, `byte` v8 @name `flags`, `int` v9 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readPushPromise:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a64a4.  v1:= 0I;
  #L1a64a6.  if v9 != 0 then goto L1a64bc;
  #L1a64aa.  v3:= "PROTOCOL_ERROR: TYPE_PUSH_PROMISE streamId == 0" @kind object;
  #L1a64ae.  v4:= new `java.lang.Object`[v1];
  #L1a64b2.  call temp:= `ioException`(v3, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a64b8.  v3:= temp @kind object;
  #L1a64ba.  throw v3;
  #L1a64bc.  v3:= v8 ^& 8;
  #L1a64c0.  if v3 == 0 then goto L1a64d6;
  #L1a64c4.  v3:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a64c8.  call temp:= `readByte`(v3) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a64ce.  v3:= temp;
  #L1a64d0.  v3:= v3 ^& 255;
  #L1a64d4.  v1:= (`short`) v3 @kind i2s;
  #L1a64d6.  v3:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a64da.  call temp:= `readInt`(v3) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a64e0.  v3:= temp;
  #L1a64e2.  v4:= 2147483647I;
  #L1a64e8.  v2:= v3 ^& v4 @kind int;
  #L1a64ec.  v7:= v7 + -4;
  #L1a64f0.  call temp:= `lengthWithoutPadding`(v7, v8, v1) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @kind static;
  #L1a64f6.  v7:= temp;
  #L1a64f8.  call temp:= `readHeaderBlock`(v5, v7, v1, v8, v9) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaderBlock:(ISBI)Ljava/util/List;` @kind direct;
  #L1a64fe.  v0:= temp @kind object;
  #L1a6500.  call `pushPromise`(v6, v9, v2, v0) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.pushPromise:(IILjava/util/List;)V` @kind interface;
  #L1a6506.  return @kind void;
}
procedure `void` `readRstStream`(`okhttp3.internal.http2.Http2Reader` v6 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v7 @kind object @name `handler`, `int` v8 @name `length`, `byte` v9 @name `flags`, `int` v10 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readRstStream:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1a6518.  v3:= 1I;
  #L1a651a.  v5:= 0I;
  #L1a651c.  v2:= 4I;
  #L1a651e.  if v8 == v2 then goto L1a6540;
  #L1a6522.  v2:= "TYPE_RST_STREAM length: %d != 4" @kind object;
  #L1a6526.  v3:= new `java.lang.Object`[v3];
  #L1a652a.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a6530.  v4:= temp @kind object;
  #L1a6532.  v3[v5]:= v4 @kind object;
  #L1a6536.  call temp:= `ioException`(v2, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a653c.  v2:= temp @kind object;
  #L1a653e.  throw v2;
  #L1a6540.  if v10 != 0 then goto L1a6556;
  #L1a6544.  v2:= "TYPE_RST_STREAM streamId == 0" @kind object;
  #L1a6548.  v3:= new `java.lang.Object`[v5];
  #L1a654c.  call temp:= `ioException`(v2, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a6552.  v2:= temp @kind object;
  #L1a6554.  throw v2;
  #L1a6556.  v2:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a655a.  call temp:= `readInt`(v2) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a6560.  v1:= temp;
  #L1a6562.  call temp:= `fromHttp2`(v1) @signature `Lokhttp3/internal/http2/ErrorCode;.fromHttp2:(I)Lokhttp3/internal/http2/ErrorCode;` @kind static;
  #L1a6568.  v0:= temp @kind object;
  #L1a656a.  if v0 != 0 then goto L1a658c;
  #L1a656e.  v2:= "TYPE_RST_STREAM unexpected error code: %d" @kind object;
  #L1a6572.  v3:= new `java.lang.Object`[v3];
  #L1a6576.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a657c.  v4:= temp @kind object;
  #L1a657e.  v3[v5]:= v4 @kind object;
  #L1a6582.  call temp:= `ioException`(v2, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a6588.  v2:= temp @kind object;
  #L1a658a.  throw v2;
  #L1a658c.  call `rstStream`(v7, v10, v0) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.rstStream:(ILokhttp3/internal/http2/ErrorCode;)V` @kind interface;
  #L1a6592.  return @kind void;
}
procedure `void` `readSettings`(`okhttp3.internal.http2.Http2Reader` v8 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v9 @kind object @name `handler`, `int` v10 @name `length`, `byte` v11 @name `flags`, `int` v12 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readSettings:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a65a4.  v6:= 1I;
  #L1a65a6.  v7:= 0I;
  #L1a65a8.  if v12 == 0 then goto L1a65be;
  #L1a65ac.  v4:= "TYPE_SETTINGS streamId != 0" @kind object;
  #L1a65b0.  v5:= new `java.lang.Object`[v7];
  #L1a65b4.  call temp:= `ioException`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a65ba.  v4:= temp @kind object;
  #L1a65bc.  throw v4;
  #L1a65be.  v4:= v11 ^& 1;
  #L1a65c2.  if v4 == 0 then goto L1a65e4;
  #L1a65c6.  if v10 == 0 then goto L1a65dc;
  #L1a65ca.  v4:= "FRAME_SIZE_ERROR ack frame should be empty!" @kind object;
  #L1a65ce.  v5:= new `java.lang.Object`[v7];
  #L1a65d2.  call temp:= `ioException`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a65d8.  v4:= temp @kind object;
  #L1a65da.  throw v4;
  #L1a65dc.  call `ackSettings`(v9) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.ackSettings:()V` @kind interface;
  #L1a65e2.  return @kind void;
  #L1a65e4.  v4:= v10 %% 6;
  #L1a65e8.  if v4 == 0 then goto L1a660a;
  #L1a65ec.  v4:= "TYPE_SETTINGS length %% 6 != 0: %s" @kind object;
  #L1a65f0.  v5:= new `java.lang.Object`[v6];
  #L1a65f4.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a65fa.  v6:= temp @kind object;
  #L1a65fc.  v5[v7]:= v6 @kind object;
  #L1a6600.  call temp:= `ioException`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a6606.  v4:= temp @kind object;
  #L1a6608.  throw v4;
  #L1a660a.  v2:= new `okhttp3.internal.http2.Settings`;
  #L1a660e.  call `<init>`(v2) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @kind direct;
  #L1a6614.  v0:= 0I;
  #L1a6616.  if v0 >= v10 then goto L1a66b4;
  #L1a661a.  v4:= v8.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a661e.  call temp:= `readShort`(v4) @signature `Lokio/BufferedSource;.readShort:()S` @kind interface;
  #L1a6624.  v4:= temp;
  #L1a6626.  v5:= 65535I;
  #L1a662c.  v1:= v4 ^& v5 @kind int;
  #L1a6630.  v4:= v8.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a6634.  call temp:= `readInt`(v4) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a663a.  v3:= temp;
  #L1a663c.  goto L1a66bc;
  #L1a6642.  call temp:= `set`(v2, v1, v3) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L1a6648.  v0:= v0 + 6;
  #L1a664c.  goto L1a6616;
  #L1a664e.  if v3 == 0 then goto L1a6642;
  #L1a6652.  if v3 == v6 then goto L1a6642;
  #L1a6656.  v4:= "PROTOCOL_ERROR SETTINGS_ENABLE_PUSH != 0 or 1" @kind object;
  #L1a665a.  v5:= new `java.lang.Object`[v7];
  #L1a665e.  call temp:= `ioException`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a6664.  v4:= temp @kind object;
  #L1a6666.  throw v4;
  #L1a6668.  v1:= 4I;
  #L1a666a.  goto L1a6642;
  #L1a666c.  v1:= 7I;
  #L1a666e.  if v3 >= 0 then goto L1a6642;
  #L1a6672.  v4:= "PROTOCOL_ERROR SETTINGS_INITIAL_WINDOW_SIZE > 2^31 - 1" @kind object;
  #L1a6676.  v5:= new `java.lang.Object`[v7];
  #L1a667a.  call temp:= `ioException`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a6680.  v4:= temp @kind object;
  #L1a6682.  throw v4;
  #L1a6684.  v4:= 16384I;
  #L1a6688.  if v3 < v4 then goto L1a6696;
  #L1a668c.  v4:= 16777215I;
  #L1a6692.  if v3 <= v4 then goto L1a6642;
  #L1a6696.  v4:= "PROTOCOL_ERROR SETTINGS_MAX_FRAME_SIZE: %s" @kind object;
  #L1a669a.  v5:= new `java.lang.Object`[v6];
  #L1a669e.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a66a4.  v6:= temp @kind object;
  #L1a66a6.  v5[v7]:= v6 @kind object;
  #L1a66aa.  call temp:= `ioException`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a66b0.  v4:= temp @kind object;
  #L1a66b2.  throw v4;
  #L1a66b4.  call `settings`(v9, v7, v2) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.settings:(ZLokhttp3/internal/http2/Settings;)V` @kind interface;
  #L1a66ba.  goto L1a65e2;
  #L1a66bc.  switch v1
                  | 1 => goto L1a6642
                  | 2 => goto L1a664e
                  | 3 => goto L1a6668
                  | 4 => goto L1a666c
                  | 5 => goto L1a6684
                  | 6 => goto L1a6642
                  | else => goto L1a6642;
}
procedure `void` `readWindowUpdate`(`okhttp3.internal.http2.Http2Reader` v8 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v9 @kind object @name `handler`, `int` v10 @name `length`, `byte` v11 @name `flags`, `int` v12 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readWindowUpdate:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a66ec.  v7:= 1I;
  #L1a66ee.  v6:= 0I;
  #L1a66f0.  v2:= 4I;
  #L1a66f2.  if v10 == v2 then goto L1a6714;
  #L1a66f6.  v2:= "TYPE_WINDOW_UPDATE length !=4: %s" @kind object;
  #L1a66fa.  v3:= new `java.lang.Object`[v7];
  #L1a66fe.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a6704.  v4:= temp @kind object;
  #L1a6706.  v3[v6]:= v4 @kind object;
  #L1a670a.  call temp:= `ioException`(v2, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a6710.  v2:= temp @kind object;
  #L1a6712.  throw v2;
  #L1a6714.  v2:= v8.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a6718.  call temp:= `readInt`(v2) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a671e.  v2:= temp;
  #L1a6720.  v2:= (`long`) v2 @kind i2l;
  #L1a6722.  v4:= 2147483647L;
  #L1a6728.  v0:= v2 ^& v4 @kind long;
  #L1a672c.  v2:= 0L;
  #L1a6730.  v2:= lcmp(v0, v2);
  #L1a6734.  if v2 != 0 then goto L1a6756;
  #L1a6738.  v2:= "windowSizeIncrement was 0" @kind object;
  #L1a673c.  v3:= new `java.lang.Object`[v7];
  #L1a6740.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1a6746.  v4:= temp @kind object;
  #L1a6748.  v3[v6]:= v4 @kind object;
  #L1a674c.  call temp:= `ioException`(v2, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a6752.  v2:= temp @kind object;
  #L1a6754.  throw v2;
  #L1a6756.  call `windowUpdate`(v9, v12, v0) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.windowUpdate:(IJ)V` @kind interface;
  #L1a675c.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Reader` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Reader;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a6770.  v0:= v1.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a6774.  call `close`(v0) @signature `Lokio/BufferedSource;.close:()V` @kind interface;
  #L1a677a.  return @kind void;
}
procedure `boolean` `nextFrame`(`okhttp3.internal.http2.Http2Reader` v10 @kind this, `boolean` v11 @name `requireSettings`, `okhttp3.internal.http2.Http2Reader$Handler` v12 @kind object @name `handler`) @signature `Lokhttp3/internal/http2/Http2Reader;.nextFrame:(ZLokhttp3/internal/http2/Http2Reader$Handler;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1a678c.  v6:= 0I;
  #L1a678e.  v5:= 1I;
  #Try_start0.  
  #L1a6790.  v7:= v10.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a6794.  v8:= 9L;
  #L1a6798.  call `require`(v7, v8) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #Try_end0.  
  #L1a679e.  v7:= v10.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a67a2.  call temp:= `readMedium`(v7) @signature `Lokhttp3/internal/http2/Http2Reader;.readMedium:(Lokio/BufferedSource;)I` @kind static;
  #L1a67a8.  v2:= temp;
  #L1a67aa.  if v2 < 0 then goto L1a67b6;
  #L1a67ae.  v7:= 16384I;
  #L1a67b2.  if v2 <= v7 then goto L1a67da;
  #L1a67b6.  v7:= "FRAME_SIZE_ERROR: %s" @kind object;
  #L1a67ba.  v5:= new `java.lang.Object`[v5];
  #L1a67be.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a67c4.  v8:= temp @kind object;
  #L1a67c6.  v5[v6]:= v8 @kind object;
  #L1a67ca.  call temp:= `ioException`(v7, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a67d0.  v5:= temp @kind object;
  #L1a67d2.  throw v5;
  #L1a67d4.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1a67d6.  v5:= v6;
  #L1a67d8.  return v5;
  #L1a67da.  v7:= v10.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a67de.  call temp:= `readByte`(v7) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a67e4.  v7:= temp;
  #L1a67e6.  v7:= v7 ^& 255;
  #L1a67ea.  v4:= (`byte`) v7 @kind i2b;
  #L1a67ec.  if v11 == 0 then goto L1a6814;
  #L1a67f0.  v7:= 4I;
  #L1a67f2.  if v4 == v7 then goto L1a6814;
  #L1a67f6.  v7:= "Expected a SETTINGS frame but was %s" @kind object;
  #L1a67fa.  v5:= new `java.lang.Object`[v5];
  #L1a67fe.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L1a6804.  v8:= temp @kind object;
  #L1a6806.  v5[v6]:= v8 @kind object;
  #L1a680a.  call temp:= `ioException`(v7, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a6810.  v5:= temp @kind object;
  #L1a6812.  throw v5;
  #L1a6814.  v6:= v10.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a6818.  call temp:= `readByte`(v6) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a681e.  v6:= temp;
  #L1a6820.  v6:= v6 ^& 255;
  #L1a6824.  v1:= (`byte`) v6 @kind i2b;
  #L1a6826.  v6:= v10.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a682a.  call temp:= `readInt`(v6) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a6830.  v6:= temp;
  #L1a6832.  v7:= 2147483647I;
  #L1a6838.  v3:= v6 ^& v7 @kind int;
  #L1a683c.  v6:= `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` @kind object;
  #L1a6840.  v7:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L1a6844.  call temp:= `isLoggable`(v6, v7) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L1a684a.  v6:= temp;
  #L1a684c.  if v6 == 0 then goto L1a6862;
  #L1a6850.  v6:= `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` @kind object;
  #L1a6854.  call temp:= `frameLog`(v5, v3, v2, v4, v1) @signature `Lokhttp3/internal/http2/Http2;.frameLog:(ZIIBB)Ljava/lang/String;` @kind static;
  #L1a685a.  v7:= temp @kind object;
  #L1a685c.  call `fine`(v6, v7) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L1a6862.  goto L1a68c0;
  #L1a6868.  v6:= v10.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a686c.  v8:= (`long`) v2 @kind i2l;
  #L1a686e.  call `skip`(v6, v8) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L1a6874.  goto L1a67d8;
  #L1a6876.  call `readData`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readData:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a687c.  goto L1a67d8;
  #L1a687e.  call `readHeaders`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaders:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a6884.  goto L1a67d8;
  #L1a6886.  call `readPriority`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a688c.  goto L1a67d8;
  #L1a688e.  call `readRstStream`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readRstStream:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a6894.  goto L1a67d8;
  #L1a6896.  call `readSettings`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readSettings:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a689c.  goto L1a67d8;
  #L1a689e.  call `readPushPromise`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readPushPromise:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a68a4.  goto L1a67d8;
  #L1a68a6.  call `readPing`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readPing:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a68ac.  goto L1a67d8;
  #L1a68ae.  call `readGoAway`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readGoAway:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a68b4.  goto L1a67d8;
  #L1a68b6.  call `readWindowUpdate`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readWindowUpdate:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a68bc.  goto L1a67d8;
  #L1a68be.  
  #L1a68c0.  switch v4
                  | 0 => goto L1a6876
                  | 1 => goto L1a687e
                  | 2 => goto L1a6886
                  | 3 => goto L1a688e
                  | 4 => goto L1a6896
                  | 5 => goto L1a689e
                  | 6 => goto L1a68a6
                  | 7 => goto L1a68ae
                  | 8 => goto L1a68b6
                  | else => goto L1a6868;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L1a67d4;
}
procedure `void` `readConnectionPreface`(`okhttp3.internal.http2.Http2Reader` v7 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v8 @kind object @name `handler`) @signature `Lokhttp3/internal/http2/Http2Reader;.readConnectionPreface:(Lokhttp3/internal/http2/Http2Reader$Handler;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a690c.  v6:= 1I;
  #L1a690e.  v5:= 0I;
  #L1a6910.  v1:= v7.`okhttp3.internal.http2.Http2Reader.client` @type ^`boolean` @kind boolean;
  #L1a6914.  if v1 == 0 then goto L1a6936;
  #L1a6918.  call temp:= `nextFrame`(v7, v6, v8) @signature `Lokhttp3/internal/http2/Http2Reader;.nextFrame:(ZLokhttp3/internal/http2/Http2Reader$Handler;)Z` @kind virtual;
  #L1a691e.  v1:= temp;
  #L1a6920.  if v1 != 0 then goto L1a69b8;
  #L1a6924.  v1:= "Required SETTINGS preface not received" @kind object;
  #L1a6928.  v2:= new `java.lang.Object`[v5];
  #L1a692c.  call temp:= `ioException`(v1, v2) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a6932.  v1:= temp @kind object;
  #L1a6934.  throw v1;
  #L1a6936.  v1:= v7.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a693a.  v2:= `@@okhttp3.internal.http2.Http2.CONNECTION_PREFACE` @type ^`okio.ByteString` @kind object;
  #L1a693e.  call temp:= `size`(v2) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a6944.  v2:= temp;
  #L1a6946.  v2:= (`long`) v2 @kind i2l;
  #L1a6948.  call temp:= `readByteString`(v1, v2) @signature `Lokio/BufferedSource;.readByteString:(J)Lokio/ByteString;` @kind interface;
  #L1a694e.  v0:= temp @kind object;
  #L1a6950.  v1:= `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` @kind object;
  #L1a6954.  v2:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L1a6958.  call temp:= `isLoggable`(v1, v2) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L1a695e.  v1:= temp;
  #L1a6960.  if v1 == 0 then goto L1a698a;
  #L1a6964.  v1:= `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` @kind object;
  #L1a6968.  v2:= "<< CONNECTION %s" @kind object;
  #L1a696c.  v3:= new `java.lang.Object`[v6];
  #L1a6970.  call temp:= `hex`(v0) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L1a6976.  v4:= temp @kind object;
  #L1a6978.  v3[v5]:= v4 @kind object;
  #L1a697c.  call temp:= `format`(v2, v3) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1a6982.  v2:= temp @kind object;
  #L1a6984.  call `fine`(v1, v2) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L1a698a.  v1:= `@@okhttp3.internal.http2.Http2.CONNECTION_PREFACE` @type ^`okio.ByteString` @kind object;
  #L1a698e.  call temp:= `equals`(v1, v0) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a6994.  v1:= temp;
  #L1a6996.  if v1 != 0 then goto L1a69b8;
  #L1a699a.  v1:= "Expected a connection header but was %s" @kind object;
  #L1a699e.  v2:= new `java.lang.Object`[v6];
  #L1a69a2.  call temp:= `utf8`(v0) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L1a69a8.  v3:= temp @kind object;
  #L1a69aa.  v2[v5]:= v3 @kind object;
  #L1a69ae.  call temp:= `ioException`(v1, v2) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a69b4.  v1:= temp @kind object;
  #L1a69b6.  throw v1;
  #L1a69b8.  return @kind void;
}
