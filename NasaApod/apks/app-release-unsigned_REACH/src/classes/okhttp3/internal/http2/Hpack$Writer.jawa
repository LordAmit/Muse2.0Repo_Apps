record `okhttp3.internal.http2.Hpack$Writer` @kind class @AccessFlag FINAL {
  `okhttp3.internal.http2.Header`[] `okhttp3.internal.http2.Hpack$Writer.dynamicTable` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @AccessFlag ;
  `okio.Buffer` `okhttp3.internal.http2.Hpack$Writer.out` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.useCompression` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE_LIMIT` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `int` v3 @name `headerTableSizeSetting`, `boolean` v4 @name `useCompression`, `okio.Buffer` v5 @kind object @name `out`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1a3fc8.  v1:= 0I;
  #L1a3fca.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a3fd0.  v0:= 2147483647I;
  #L1a3fd6.  v2.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L1a3fda.  v0:= 8I;
  #L1a3fde.  v0:= new `okhttp3.internal.http2.Header`[v0];
  #L1a3fe2.  v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v0 @kind object;
  #L1a3fe6.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a3fea.  v0:= length @variable v0;
  #L1a3fec.  v0:= v0 + -1;
  #L1a3ff0.  v2.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v0;
  #L1a3ff4.  v2.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v1;
  #L1a3ff8.  v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v1;
  #L1a3ffc.  v2.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v3;
  #L1a4000.  v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v3;
  #L1a4004.  v2.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` := v4 @kind boolean;
  #L1a4008.  v2.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` := v5 @kind object;
  #L1a400c.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `okio.Buffer` v3 @kind object @name `out`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(Lokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1a4020.  v0:= 4096I;
  #L1a4024.  v1:= 1I;
  #L1a4026.  call `<init>`(v2, v0, v1, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @kind direct;
  #L1a402c.  return @kind void;
}
procedure `void` `adjustDynamicTableByteCount`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a4040.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a4044.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a4048.  if v0 >= v1 then goto L1a405a;
  #L1a404c.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a4050.  if v0 != 0 then goto L1a405c;
  #L1a4054.  call `clearDynamicTable`(v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L1a405a.  return @kind void;
  #L1a405c.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a4060.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a4064.  v0:= v0 - v1 @kind int;
  #L1a4066.  call temp:= `evictToRecoverBytes`(v2, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L1a406c.  goto L1a405a;
}
procedure `void` `clearDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v3 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1a4080.  v2:= 0I;
  #L1a4082.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4086.  v1:= 0I;
  #L1a4088.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L1a408e.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4092.  v0:= length @variable v0;
  #L1a4094.  v0:= v0 + -1;
  #L1a4098.  v3.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v0;
  #L1a409c.  v3.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v2;
  #L1a40a0.  v3.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v2;
  #L1a40a4.  return @kind void;
}
procedure `int` `evictToRecoverBytes`(`okhttp3.internal.http2.Hpack$Writer` v7 @kind this, `int` v8 @name `bytesToRecover`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a40b8.  v0:= 0I;
  #L1a40ba.  if v8 <= 0 then goto L1a415a;
  #L1a40be.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a40c2.  v2:= length @variable v2;
  #L1a40c4.  v1:= v2 + -1;
  #L1a40c8.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a40cc.  if v1 < v2 then goto L1a410e;
  #L1a40d0.  if v8 <= 0 then goto L1a410e;
  #L1a40d4.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a40d8.  v2:= v2[v1] @kind object;
  #L1a40dc.  v2:= v2.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a40e0.  v8:= v8 - v2 @kind int;
  #L1a40e2.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a40e6.  v3:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a40ea.  v3:= v3[v1] @kind object;
  #L1a40ee.  v3:= v3.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a40f2.  v2:= v2 - v3 @kind int;
  #L1a40f4.  v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v2;
  #L1a40f8.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a40fc.  v2:= v2 + -1;
  #L1a4100.  v7.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v2;
  #L1a4104.  v0:= v0 + 1;
  #L1a4108.  v1:= v1 + -1;
  #L1a410c.  goto L1a40c8;
  #L1a410e.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4112.  v3:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a4116.  v3:= v3 + 1;
  #L1a411a.  v4:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a411e.  v5:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a4122.  v5:= v5 + 1;
  #L1a4126.  v5:= v5 + v0 @kind int;
  #L1a4128.  v6:= v7.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a412c.  call `arraycopy`(v2, v3, v4, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1a4132.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a4136.  v3:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a413a.  v3:= v3 + 1;
  #L1a413e.  v4:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a4142.  v4:= v4 + 1;
  #L1a4146.  v4:= v4 + v0 @kind int;
  #L1a4148.  v5:= 0I;
  #L1a414a.  call `fill`(v2, v3, v4, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L1a4150.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a4154.  v2:= v2 + v0 @kind int;
  #L1a4156.  v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v2;
  #L1a415a.  return v0;
}
procedure `void` `insertIntoDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v8 @kind this, `okhttp3.internal.http2.Header` v9 @kind object @name `entry`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a416c.  v1:= v9.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a4170.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a4174.  if v1 <= v4 then goto L1a4180;
  #L1a4178.  call `clearDynamicTable`(v8) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L1a417e.  return @kind void;
  #L1a4180.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a4184.  v4:= v4 + v1 @kind int;
  #L1a4186.  v5:= v8.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a418a.  v0:= v4 - v5 @kind int;
  #L1a418e.  call temp:= `evictToRecoverBytes`(v8, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L1a4194.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a4198.  v4:= v4 + 1;
  #L1a419c.  v5:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a41a0.  v5:= length @variable v5;
  #L1a41a2.  if v4 <= v5 then goto L1a41de;
  #L1a41a6.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a41aa.  v4:= length @variable v4;
  #L1a41ac.  v4:= v4 * 2;
  #L1a41b0.  v2:= new `okhttp3.internal.http2.Header`[v4];
  #L1a41b4.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a41b8.  v5:= 0I;
  #L1a41ba.  v6:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a41be.  v6:= length @variable v6;
  #L1a41c0.  v7:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a41c4.  v7:= length @variable v7;
  #L1a41c6.  call `arraycopy`(v4, v5, v2, v6, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1a41cc.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a41d0.  v4:= length @variable v4;
  #L1a41d2.  v4:= v4 + -1;
  #L1a41d6.  v8.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v4;
  #L1a41da.  v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v2 @kind object;
  #L1a41de.  v3:= v8.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a41e2.  v4:= v3 + -1;
  #L1a41e6.  v8.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v4;
  #L1a41ea.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a41ee.  v4[v3]:= v9 @kind object;
  #L1a41f2.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a41f6.  v4:= v4 + 1;
  #L1a41fa.  v8.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v4;
  #L1a41fe.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a4202.  v4:= v4 + v1 @kind int;
  #L1a4204.  v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v4;
  #L1a4208.  goto L1a417e;
}
procedure `void` `setHeaderTableSizeSetting`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `int` v3 @name `headerTableSizeSetting`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.setHeaderTableSizeSetting:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a421c.  v2.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v3;
  #L1a4220.  v1:= 16384I;
  #L1a4224.  call temp:= `min`(v3, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1a422a.  v0:= temp;
  #L1a422c.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a4230.  if v1 != v0 then goto L1a4236;
  #L1a4234.  return @kind void;
  #L1a4236.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a423a.  if v0 >= v1 then goto L1a424e;
  #L1a423e.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L1a4242.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1a4248.  v1:= temp;
  #L1a424a.  v2.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v1;
  #L1a424e.  v1:= 1I;
  #L1a4250.  v2.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v1 @kind boolean;
  #L1a4254.  v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v0;
  #L1a4258.  call `adjustDynamicTableByteCount`(v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @kind direct;
  #L1a425e.  goto L1a4234;
}
procedure `void` `writeByteString`(`okhttp3.internal.http2.Hpack$Writer` v5 @kind this, `okio.ByteString` v6 @kind object @name `data`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a4270.  v4:= 127I;
  #L1a4274.  v2:= v5.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` @kind boolean;
  #L1a4278.  if v2 == 0 then goto L1a42d6;
  #L1a427c.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L1a4282.  v2:= temp @kind object;
  #L1a4284.  call temp:= `encodedLength`(v2, v6) @signature `Lokhttp3/internal/http2/Huffman;.encodedLength:(Lokio/ByteString;)I` @kind virtual;
  #L1a428a.  v2:= temp;
  #L1a428c.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a4292.  v3:= temp;
  #L1a4294.  if v2 >= v3 then goto L1a42d6;
  #L1a4298.  v0:= new `okio.Buffer`;
  #L1a429c.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1a42a2.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L1a42a8.  v2:= temp @kind object;
  #L1a42aa.  call `encode`(v2, v6, v0) @signature `Lokhttp3/internal/http2/Huffman;.encode:(Lokio/ByteString;Lokio/BufferedSink;)V` @kind virtual;
  #L1a42b0.  call temp:= `readByteString`(v0) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1a42b6.  v1:= temp @kind object;
  #L1a42b8.  call temp:= `size`(v1) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a42be.  v2:= temp;
  #L1a42c0.  v3:= 128I;
  #L1a42c4.  call `writeInt`(v5, v2, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a42ca.  v2:= v5.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a42ce.  call temp:= `write`(v2, v1) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L1a42d4.  return @kind void;
  #L1a42d6.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a42dc.  v2:= temp;
  #L1a42de.  v3:= 0I;
  #L1a42e0.  call `writeInt`(v5, v2, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a42e6.  v2:= v5.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a42ea.  call temp:= `write`(v2, v6) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L1a42f0.  goto L1a42d4;
}
procedure `void` `writeHeaders`(`okhttp3.internal.http2.Hpack$Writer` v13 @kind this, `java.util.List` v14 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeHeaders:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1a4304.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` @kind boolean;
  #L1a4308.  if v10 == 0 then goto L1a434c;
  #L1a430c.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L1a4310.  v11:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a4314.  if v10 >= v11 then goto L1a432a;
  #L1a4318.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L1a431c.  v11:= 31I;
  #L1a4320.  v12:= 32I;
  #L1a4324.  call `writeInt`(v13, v10, v11, v12) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a432a.  v10:= 0I;
  #L1a432c.  v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v10 @kind boolean;
  #L1a4330.  v10:= 2147483647I;
  #L1a4336.  v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v10;
  #L1a433a.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a433e.  v11:= 31I;
  #L1a4342.  v12:= 32I;
  #L1a4346.  call `writeInt`(v13, v10, v11, v12) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a434c.  v3:= 0I;
  #L1a434e.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1a4354.  v7:= temp;
  #L1a4356.  if v3 >= v7 then goto L1a44ee;
  #L1a435a.  call temp:= `get`(v14, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1a4360.  v0:= temp @kind object;
  #L1a4362.  v0:= (`okhttp3.internal.http2.Header`) v0 @kind object;
  #L1a4366.  v10:= v0.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L1a436a.  call temp:= `toAsciiLowercase`(v10) @signature `Lokio/ByteString;.toAsciiLowercase:()Lokio/ByteString;` @kind virtual;
  #L1a4370.  v6:= temp @kind object;
  #L1a4372.  v9:= v0.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a4376.  v1:= -1I;
  #L1a4378.  v2:= -1I;
  #L1a437a.  v10:= `@@okhttp3.internal.http2.Hpack.NAME_TO_FIRST_INDEX` @type ^`java.util.Map` @kind object;
  #L1a437e.  call temp:= `get`(v10, v6) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1a4384.  v8:= temp @kind object;
  #L1a4386.  v8:= (`java.lang.Integer`) v8 @kind object;
  #L1a438a.  if v8 == 0 then goto L1a43c6;
  #L1a438e.  call temp:= `intValue`(v8) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1a4394.  v10:= temp;
  #L1a4396.  v2:= v10 + 1;
  #L1a439a.  v10:= 1I;
  #L1a439c.  if v2 <= v10 then goto L1a43c6;
  #L1a43a0.  v10:= 8I;
  #L1a43a4.  if v2 >= v10 then goto L1a43c6;
  #L1a43a8.  v10:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a43ac.  v11:= v2 + -1;
  #L1a43b0.  v10:= v10[v11] @kind object;
  #L1a43b4.  v10:= v10.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a43b8.  call temp:= `equal`(v10, v9) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a43be.  v10:= temp;
  #L1a43c0.  if v10 == 0 then goto L1a443a;
  #L1a43c4.  v1:= v2;
  #L1a43c6.  v10:= -1I;
  #L1a43c8.  if v1 != v10 then goto L1a4420;
  #L1a43cc.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a43d0.  v4:= v10 + 1;
  #L1a43d4.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a43d8.  v5:= length @variable v10;
  #L1a43da.  if v4 >= v5 then goto L1a4420;
  #L1a43de.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a43e2.  v10:= v10[v4] @kind object;
  #L1a43e6.  v10:= v10.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L1a43ea.  call temp:= `equal`(v10, v6) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a43f0.  v10:= temp;
  #L1a43f2.  if v10 == 0 then goto L1a4470;
  #L1a43f6.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a43fa.  v10:= v10[v4] @kind object;
  #L1a43fe.  v10:= v10.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a4402.  call temp:= `equal`(v10, v9) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a4408.  v10:= temp;
  #L1a440a.  if v10 == 0 then goto L1a4458;
  #L1a440e.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a4412.  v10:= v4 - v10 @kind int;
  #L1a4416.  v11:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a441a.  v11:= length @variable v11;
  #L1a441c.  v1:= v10 + v11 @kind int;
  #L1a4420.  v10:= -1I;
  #L1a4422.  if v1 == v10 then goto L1a4476;
  #L1a4426.  v10:= 127I;
  #L1a442a.  v11:= 128I;
  #L1a442e.  call `writeInt`(v13, v1, v10, v11) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a4434.  v3:= v3 + 1;
  #L1a4438.  goto L1a4356;
  #L1a443a.  v10:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a443e.  v10:= v10[v2] @kind object;
  #L1a4442.  v10:= v10.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a4446.  call temp:= `equal`(v10, v9) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a444c.  v10:= temp;
  #L1a444e.  if v10 == 0 then goto L1a43c6;
  #L1a4452.  v1:= v2 + 1;
  #L1a4456.  goto L1a43c6;
  #L1a4458.  v10:= -1I;
  #L1a445a.  if v2 != v10 then goto L1a4470;
  #L1a445e.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a4462.  v10:= v4 - v10 @kind int;
  #L1a4466.  v11:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a446a.  v11:= length @variable v11;
  #L1a446c.  v2:= v10 + v11 @kind int;
  #L1a4470.  v4:= v4 + 1;
  #L1a4474.  goto L1a43da;
  #L1a4476.  v10:= -1I;
  #L1a4478.  if v2 != v10 then goto L1a449e;
  #L1a447c.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a4480.  v11:= 64I;
  #L1a4484.  call temp:= `writeByte`(v10, v11) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a448a.  call `writeByteString`(v13, v6) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a4490.  call `writeByteString`(v13, v9) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a4496.  call `insertIntoDynamicTable`(v13, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L1a449c.  goto L1a4434;
  #L1a449e.  v10:= `@@okhttp3.internal.http2.Header.PSEUDO_PREFIX` @type ^`okio.ByteString` @kind object;
  #L1a44a2.  call temp:= `startsWith`(v6, v10) @signature `Lokio/ByteString;.startsWith:(Lokio/ByteString;)Z` @kind virtual;
  #L1a44a8.  v10:= temp;
  #L1a44aa.  if v10 == 0 then goto L1a44d2;
  #L1a44ae.  v10:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L1a44b2.  call temp:= `equals`(v10, v6) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a44b8.  v10:= temp;
  #L1a44ba.  if v10 != 0 then goto L1a44d2;
  #L1a44be.  v10:= 15I;
  #L1a44c2.  v11:= 0I;
  #L1a44c4.  call `writeInt`(v13, v2, v10, v11) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a44ca.  call `writeByteString`(v13, v9) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a44d0.  goto L1a4434;
  #L1a44d2.  v10:= 63I;
  #L1a44d6.  v11:= 64I;
  #L1a44da.  call `writeInt`(v13, v2, v10, v11) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a44e0.  call `writeByteString`(v13, v9) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a44e6.  call `insertIntoDynamicTable`(v13, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L1a44ec.  goto L1a4434;
  #L1a44ee.  return @kind void;
}
procedure `void` `writeInt`(`okhttp3.internal.http2.Hpack$Writer` v3 @kind this, `int` v4 @name `value`, `int` v5 @name `prefixMask`, `int` v6 @name `bits`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a4500.  if v4 >= v5 then goto L1a4514;
  #L1a4504.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a4508.  v2:= v6 ^| v4 @kind int;
  #L1a450c.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a4512.  return @kind void;
  #L1a4514.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a4518.  v2:= v6 ^| v5 @kind int;
  #L1a451c.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a4522.  v4:= v4 - v5 @kind int;
  #L1a4524.  v1:= 128I;
  #L1a4528.  if v4 < v1 then goto L1a4544;
  #L1a452c.  v0:= v4 ^& 127;
  #L1a4530.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a4534.  v2:= v0 ^| 128;
  #L1a4538.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a453e.  v4:= v4 ^>> 7;
  #L1a4542.  goto L1a4524;
  #L1a4544.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a4548.  call temp:= `writeByte`(v1, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a454e.  goto L1a4512;
}
