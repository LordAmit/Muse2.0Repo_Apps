record `okhttp3.internal.http2.Settings` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.http2.Settings.set` @AccessFlag PRIVATE;
  `int`[] `okhttp3.internal.http2.Settings.values` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Settings.COUNT` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.DEFAULT_INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.ENABLE_PUSH` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.HEADER_TABLE_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_CONCURRENT_STREAMS` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_FRAME_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_HEADER_LIST_SIZE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a8434.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a843a.  v0:= 10I;
  #L1a843e.  v0:= new `int`[v0];
  #L1a8442.  v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] := v0 @kind object;
  #L1a8446.  return @kind void;
}
procedure `void` `clear`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.clear:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a8458.  v1:= 0I;
  #L1a845a.  v2.`okhttp3.internal.http2.Settings.set` @type ^`int` := v1;
  #L1a845e.  v0:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a8462.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L1a8468.  return @kind void;
}
procedure `int` `get`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 @name `id`) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @AccessFlag  {
    temp;
    v0;

  #L1a847c.  v0:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a8480.  v0:= v0[v2];
  #L1a8484.  return v0;
}
procedure `boolean` `getEnablePush`(`okhttp3.internal.http2.Settings` v5 @kind this, `boolean` v6 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getEnablePush:(Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a8498.  v2:= 0I;
  #L1a849a.  v1:= 1I;
  #L1a849c.  v0:= 4I;
  #L1a849e.  v3:= v5.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a84a2.  v3:= v3 ^& v0 @kind int;
  #L1a84a4.  if v3 == 0 then goto L1a84b8;
  #L1a84a8.  v3:= v5.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a84ac.  v4:= 2I;
  #L1a84ae.  v3:= v3[v4];
  #L1a84b2.  if v3 != v1 then goto L1a84c4;
  #L1a84b6.  return v1;
  #L1a84b8.  if v6 == 0 then goto L1a84c0;
  #L1a84bc.  v3:= v1;
  #L1a84be.  goto L1a84b2;
  #L1a84c0.  v3:= v2;
  #L1a84c2.  goto L1a84b2;
  #L1a84c4.  v1:= v2;
  #L1a84c6.  goto L1a84b6;
}
procedure `int` `getHeaderTableSize`(`okhttp3.internal.http2.Settings` v3 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getHeaderTableSize:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a84d8.  v0:= 2I;
  #L1a84da.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a84de.  v1:= v1 ^& v0 @kind int;
  #L1a84e0.  if v1 == 0 then goto L1a84f0;
  #L1a84e4.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a84e8.  v2:= 1I;
  #L1a84ea.  v1:= v1[v2];
  #L1a84ee.  return v1;
  #L1a84f0.  v1:= -1I;
  #L1a84f2.  goto L1a84ee;
}
procedure `int` `getInitialWindowSize`(`okhttp3.internal.http2.Settings` v3 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a8504.  v0:= 128I;
  #L1a8508.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a850c.  v1:= v1 ^& v0 @kind int;
  #L1a850e.  if v1 == 0 then goto L1a851e;
  #L1a8512.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a8516.  v2:= 7I;
  #L1a8518.  v1:= v1[v2];
  #L1a851c.  return v1;
  #L1a851e.  v1:= 65535I;
  #L1a8524.  goto L1a851c;
}
procedure `int` `getMaxConcurrentStreams`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getMaxConcurrentStreams:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a8538.  v0:= 16I;
  #L1a853c.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a8540.  v1:= v1 ^& v0 @kind int;
  #L1a8542.  if v1 == 0 then goto L1a8550;
  #L1a8546.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a854a.  v2:= 4I;
  #L1a854c.  v4:= v1[v2];
  #L1a8550.  return v4;
}
procedure `int` `getMaxFrameSize`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getMaxFrameSize:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a8564.  v0:= 32I;
  #L1a8568.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a856c.  v1:= v1 ^& v0 @kind int;
  #L1a856e.  if v1 == 0 then goto L1a857c;
  #L1a8572.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a8576.  v2:= 5I;
  #L1a8578.  v4:= v1[v2];
  #L1a857c.  return v4;
}
procedure `int` `getMaxHeaderListSize`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getMaxHeaderListSize:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a8590.  v0:= 64I;
  #L1a8594.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a8598.  v1:= v1 ^& v0 @kind int;
  #L1a859a.  if v1 == 0 then goto L1a85a8;
  #L1a859e.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a85a2.  v2:= 6I;
  #L1a85a4.  v4:= v1[v2];
  #L1a85a8.  return v4;
}
procedure `boolean` `isSet`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `id`) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a85bc.  v1:= 1I;
  #L1a85be.  v0:= v1 ^< v4 @kind int;
  #L1a85c2.  v2:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a85c6.  v2:= v2 ^& v0 @kind int;
  #L1a85c8.  if v2 == 0 then goto L1a85ce;
  #L1a85cc.  return v1;
  #L1a85ce.  v1:= 0I;
  #L1a85d0.  goto L1a85cc;
}
procedure `void` `merge`(`okhttp3.internal.http2.Settings` v2 @kind this, `okhttp3.internal.http2.Settings` v3 @kind object @name `other`) @signature `Lokhttp3/internal/http2/Settings;.merge:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a85e4.  v0:= 0I;
  #L1a85e6.  v1:= 10I;
  #L1a85ea.  if v0 >= v1 then goto L1a8610;
  #L1a85ee.  call temp:= `isSet`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @kind virtual;
  #L1a85f4.  v1:= temp;
  #L1a85f6.  if v1 != 0 then goto L1a8600;
  #L1a85fa.  v0:= v0 + 1;
  #L1a85fe.  goto L1a85e6;
  #L1a8600.  call temp:= `get`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @kind virtual;
  #L1a8606.  v1:= temp;
  #L1a8608.  call temp:= `set`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L1a860e.  goto L1a85fa;
  #L1a8610.  return @kind void;
}
procedure `okhttp3.internal.http2.Settings` `set`(`okhttp3.internal.http2.Settings` v2 @kind this, `int` v3 @name `id`, `int` v4 @name `value`) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a8624.  if v3 < 0 then goto L1a8632;
  #L1a8628.  v1:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a862c.  v1:= length @variable v1;
  #L1a862e.  if v3 < v1 then goto L1a8634;
  #L1a8632.  return v2 @kind object;
  #L1a8634.  v1:= 1I;
  #L1a8636.  v0:= v1 ^< v3 @kind int;
  #L1a863a.  v1:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a863e.  v1:= v1 ^| v0 @kind int;
  #L1a8640.  v2.`okhttp3.internal.http2.Settings.set` @type ^`int` := v1;
  #L1a8644.  v1:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a8648.  v1[v3]:= v4;
  #L1a864c.  goto L1a8632;
}
procedure `int` `size`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.size:()I` @AccessFlag  {
    temp;
    v0;

  #L1a8660.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a8664.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L1a866a.  v0:= temp;
  #L1a866c.  return v0;
}
