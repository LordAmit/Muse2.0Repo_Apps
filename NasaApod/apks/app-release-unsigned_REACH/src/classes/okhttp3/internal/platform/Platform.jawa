record `okhttp3.internal.platform.Platform` @kind class @AccessFlag PUBLIC {
}
global `int` `@@okhttp3.internal.platform.Platform.INFO` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.internal.platform.Platform` `@@okhttp3.internal.platform.Platform.PLATFORM` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.platform.Platform.WARN` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.logging.Logger` `@@okhttp3.internal.platform.Platform.logger` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/platform/Platform;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a8c50.  call temp:= `findPlatform`() @signature `Lokhttp3/internal/platform/Platform;.findPlatform:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L1a8c56.  v0:= temp @kind object;
  #L1a8c58.  `@@okhttp3.internal.platform.Platform.PLATFORM` @type ^`okhttp3.internal.platform.Platform` := v0 @kind object;
  #L1a8c5c.  v0:= constclass @type ^`okhttp3.OkHttpClient` @kind object;
  #L1a8c60.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1a8c66.  v0:= temp @kind object;
  #L1a8c68.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L1a8c6e.  v0:= temp @kind object;
  #L1a8c70.  `@@okhttp3.internal.platform.Platform.logger` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L1a8c74.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.platform.Platform` v0 @kind this) @signature `Lokhttp3/internal/platform/Platform;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1a8c88.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a8c8e.  return @kind void;
}
procedure `java.util.List` `alpnProtocolNames`(`java.util.List` v5 @kind object) @signature `Lokhttp3/internal/platform/Platform;.alpnProtocolNames:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a8ca0.  v1:= new `java.util.ArrayList`;
  #L1a8ca4.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1a8caa.  v4:= temp;
  #L1a8cac.  call `<init>`(v1, v4) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L1a8cb2.  v0:= 0I;
  #L1a8cb4.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1a8cba.  v3:= temp;
  #L1a8cbc.  if v0 >= v3 then goto L1a8cea;
  #L1a8cc0.  call temp:= `get`(v5, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1a8cc6.  v2:= temp @kind object;
  #L1a8cc8.  v2:= (`okhttp3.Protocol`) v2 @kind object;
  #L1a8ccc.  v4:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L1a8cd0.  if v2 != v4 then goto L1a8cda;
  #L1a8cd4.  v0:= v0 + 1;
  #L1a8cd8.  goto L1a8cbc;
  #L1a8cda.  call temp:= `toString`(v2) @signature `Lokhttp3/Protocol;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a8ce0.  v4:= temp @kind object;
  #L1a8ce2.  call temp:= `add`(v1, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1a8ce8.  goto L1a8cd4;
  #L1a8cea.  return v1 @kind object;
}
procedure `byte`[] `concatLengthPrefixed`(`java.util.List` v5 @kind object) @signature `Lokhttp3/internal/platform/Platform;.concatLengthPrefixed:(Ljava/util/List;)[B` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a8cfc.  v2:= new `okio.Buffer`;
  #L1a8d00.  call `<init>`(v2) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1a8d06.  v0:= 0I;
  #L1a8d08.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1a8d0e.  v3:= temp;
  #L1a8d10.  if v0 >= v3 then goto L1a8d54;
  #L1a8d14.  call temp:= `get`(v5, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1a8d1a.  v1:= temp @kind object;
  #L1a8d1c.  v1:= (`okhttp3.Protocol`) v1 @kind object;
  #L1a8d20.  v4:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L1a8d24.  if v1 != v4 then goto L1a8d2e;
  #L1a8d28.  v0:= v0 + 1;
  #L1a8d2c.  goto L1a8d10;
  #L1a8d2e.  call temp:= `toString`(v1) @signature `Lokhttp3/Protocol;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a8d34.  v4:= temp @kind object;
  #L1a8d36.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1a8d3c.  v4:= temp;
  #L1a8d3e.  call temp:= `writeByte`(v2, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a8d44.  call temp:= `toString`(v1) @signature `Lokhttp3/Protocol;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a8d4a.  v4:= temp @kind object;
  #L1a8d4c.  call temp:= `writeUtf8`(v2, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L1a8d52.  goto L1a8d28;
  #L1a8d54.  call temp:= `readByteArray`(v2) @signature `Lokio/Buffer;.readByteArray:()[B` @kind virtual;
  #L1a8d5a.  v4:= temp @kind object;
  #L1a8d5c.  return v4 @kind object;
}
procedure `okhttp3.internal.platform.Platform` `findPlatform`() @signature `Lokhttp3/internal/platform/Platform;.findPlatform:()Lokhttp3/internal/platform/Platform;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a8d70.  call temp:= `buildIfSupported`() @signature `Lokhttp3/internal/platform/AndroidPlatform;.buildIfSupported:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L1a8d76.  v0:= temp @kind object;
  #L1a8d78.  if v0 == 0 then goto L1a8d7e;
  #L1a8d7c.  return v0 @kind object;
  #L1a8d7e.  call temp:= `isConscryptPreferred`() @signature `Lokhttp3/internal/platform/Platform;.isConscryptPreferred:()Z` @kind static;
  #L1a8d84.  v4:= temp;
  #L1a8d86.  if v4 == 0 then goto L1a8d9a;
  #L1a8d8a.  call temp:= `buildIfSupported`() @signature `Lokhttp3/internal/platform/ConscryptPlatform;.buildIfSupported:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L1a8d90.  v1:= temp @kind object;
  #L1a8d92.  if v1 == 0 then goto L1a8d9a;
  #L1a8d96.  v0:= v1 @kind object;
  #L1a8d98.  goto L1a8d7c;
  #L1a8d9a.  call temp:= `buildIfSupported`() @signature `Lokhttp3/internal/platform/Jdk9Platform;.buildIfSupported:()Lokhttp3/internal/platform/Jdk9Platform;` @kind static;
  #L1a8da0.  v2:= temp @kind object;
  #L1a8da2.  if v2 == 0 then goto L1a8daa;
  #L1a8da6.  v0:= v2 @kind object;
  #L1a8da8.  goto L1a8d7c;
  #L1a8daa.  call temp:= `buildIfSupported`() @signature `Lokhttp3/internal/platform/JdkWithJettyBootPlatform;.buildIfSupported:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L1a8db0.  v3:= temp @kind object;
  #L1a8db2.  if v3 == 0 then goto L1a8dba;
  #L1a8db6.  v0:= v3 @kind object;
  #L1a8db8.  goto L1a8d7c;
  #L1a8dba.  v0:= new `okhttp3.internal.platform.Platform`;
  #L1a8dbe.  call `<init>`(v0) @signature `Lokhttp3/internal/platform/Platform;.<init>:()V` @kind direct;
  #L1a8dc4.  goto L1a8d7c;
}
procedure `okhttp3.internal.platform.Platform` `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1a8dd8.  v0:= `@@okhttp3.internal.platform.Platform.PLATFORM` @type ^`okhttp3.internal.platform.Platform` @kind object;
  #L1a8ddc.  return v0 @kind object;
}
procedure `boolean` `isConscryptPreferred`() @signature `Lokhttp3/internal/platform/Platform;.isConscryptPreferred:()Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1a8df0.  v1:= "conscrypt" @kind object;
  #L1a8df4.  v2:= "okhttp.platform" @kind object;
  #L1a8df8.  call temp:= `getProperty`(v2) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L1a8dfe.  v2:= temp @kind object;
  #L1a8e00.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a8e06.  v1:= temp;
  #L1a8e08.  if v1 == 0 then goto L1a8e10;
  #L1a8e0c.  v1:= 1I;
  #L1a8e0e.  return v1;
  #L1a8e10.  call temp:= `getProviders`() @signature `Ljava/security/Security;.getProviders:()[Ljava/security/Provider;` @kind static;
  #L1a8e16.  v1:= temp @kind object;
  #L1a8e18.  v2:= 0I;
  #L1a8e1a.  v1:= v1[v2] @kind object;
  #L1a8e1e.  call temp:= `getName`(v1) @signature `Ljava/security/Provider;.getName:()Ljava/lang/String;` @kind virtual;
  #L1a8e24.  v0:= temp @kind object;
  #L1a8e26.  v1:= "Conscrypt" @kind object;
  #L1a8e2a.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a8e30.  v1:= temp;
  #L1a8e32.  goto L1a8e0e;
}
procedure `java.lang.Object` `readFieldOrNull`(`java.lang.Object` v8 @kind object @name `instance`, `java.lang.Class` v9 @kind object, `java.lang.String` v10 @kind object @name `fieldName`) @signature `Lokhttp3/internal/platform/Platform;.readFieldOrNull:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a8e44.  v5:= 0I;
  #L1a8e46.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1a8e4c.  v0:= temp @kind object;
  #L1a8e4e.  v6:= constclass @type ^`java.lang.Object` @kind object;
  #L1a8e52.  if v0 == v6 then goto L1a8ea4;
  #Try_start0.  
  #L1a8e56.  call temp:= `getDeclaredField`(v0, v10) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #L1a8e5c.  v3:= temp @kind object;
  #L1a8e5e.  v6:= 1I;
  #L1a8e60.  call `setAccessible`(v3, v6) @signature `Ljava/lang/reflect/Field;.setAccessible:(Z)V` @kind virtual;
  #L1a8e66.  call temp:= `get`(v3, v8) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1a8e6c.  v4:= temp @kind object;
  #L1a8e6e.  if v4 == 0 then goto L1a8e7e;
  #L1a8e72.  call temp:= `isInstance`(v9, v4) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a8e78.  v6:= temp;
  #L1a8e7a.  if v6 != 0 then goto L1a8e80;
  #L1a8e7e.  return v5 @kind object;
  #L1a8e80.  call temp:= `cast`(v9, v4) @signature `Ljava/lang/Class;.cast:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1a8e86.  v5:= temp @kind object;
  #L1a8e88.  goto L1a8e7e;
  #L1a8e8a.  v2:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L1a8e8c.  v5:= new `java.lang.AssertionError`;
  #L1a8e90.  call `<init>`(v5) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a8e96.  throw v5;
  #L1a8e98.  v6:= Exception @type ^`java.lang.NoSuchFieldException` @kind object;
  #L1a8e9a.  call temp:= `getSuperclass`(v0) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L1a8ea0.  v0:= temp @kind object;
  #L1a8ea2.  goto L1a8e4e;
  #L1a8ea4.  v6:= "delegate" @kind object;
  #L1a8ea8.  call temp:= `equals`(v10, v6) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a8eae.  v6:= temp;
  #L1a8eb0.  if v6 != 0 then goto L1a8e7e;
  #L1a8eb4.  v6:= constclass @type ^`java.lang.Object` @kind object;
  #L1a8eb8.  v7:= "delegate" @kind object;
  #L1a8ebc.  call temp:= `readFieldOrNull`(v8, v6, v7) @signature `Lokhttp3/internal/platform/Platform;.readFieldOrNull:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1a8ec2.  v1:= temp @kind object;
  #L1a8ec4.  if v1 == 0 then goto L1a8e7e;
  #L1a8ec8.  call temp:= `readFieldOrNull`(v1, v9, v10) @signature `Lokhttp3/internal/platform/Platform;.readFieldOrNull:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1a8ece.  v5:= temp @kind object;
  #L1a8ed0.  goto L1a8e7e;
  catch `java.lang.NoSuchFieldException` @[Try_start0..Try_end0] goto L1a8e98;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L1a8e8a;
}
procedure `void` `afterHandshake`(`okhttp3.internal.platform.Platform` v0 @kind this, `javax.net.ssl.SSLSocket` v1 @kind object @name `sslSocket`) @signature `Lokhttp3/internal/platform/Platform;.afterHandshake:(Ljavax/net/ssl/SSLSocket;)V` @AccessFlag PUBLIC {
    temp;

  #L1a8ef4.  return @kind void;
}
procedure `okhttp3.internal.tls.CertificateChainCleaner` `buildCertificateChainCleaner`(`okhttp3.internal.platform.Platform` v4 @kind this, `javax.net.ssl.SSLSocketFactory` v5 @kind object @name `sslSocketFactory`) @signature `Lokhttp3/internal/platform/Platform;.buildCertificateChainCleaner:(Ljavax/net/ssl/SSLSocketFactory;)Lokhttp3/internal/tls/CertificateChainCleaner;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a8f08.  call temp:= `trustManager`(v4, v5) @signature `Lokhttp3/internal/platform/Platform;.trustManager:(Ljavax/net/ssl/SSLSocketFactory;)Ljavax/net/ssl/X509TrustManager;` @kind virtual;
  #L1a8f0e.  v0:= temp @kind object;
  #L1a8f10.  if v0 != 0 then goto L1a8f6a;
  #L1a8f14.  v1:= new `java.lang.IllegalStateException`;
  #L1a8f18.  v2:= new `java.lang.StringBuilder`;
  #L1a8f1c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1a8f22.  v3:= "Unable to extract the trust manager on " @kind object;
  #L1a8f26.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a8f2c.  v2:= temp @kind object;
  #L1a8f2e.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L1a8f34.  v3:= temp @kind object;
  #L1a8f36.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a8f3c.  v2:= temp @kind object;
  #L1a8f3e.  v3:= ", sslSocketFactory is " @kind object;
  #L1a8f42.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a8f48.  v2:= temp @kind object;
  #L1a8f4a.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1a8f50.  v3:= temp @kind object;
  #L1a8f52.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a8f58.  v2:= temp @kind object;
  #L1a8f5a.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a8f60.  v2:= temp @kind object;
  #L1a8f62.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a8f68.  throw v1;
  #L1a8f6a.  call temp:= `buildCertificateChainCleaner`(v4, v0) @signature `Lokhttp3/internal/platform/Platform;.buildCertificateChainCleaner:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind virtual;
  #L1a8f70.  v1:= temp @kind object;
  #L1a8f72.  return v1 @kind object;
}
procedure `okhttp3.internal.tls.CertificateChainCleaner` `buildCertificateChainCleaner`(`okhttp3.internal.platform.Platform` v2 @kind this, `javax.net.ssl.X509TrustManager` v3 @kind object @name `trustManager`) @signature `Lokhttp3/internal/platform/Platform;.buildCertificateChainCleaner:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a8f84.  v0:= new `okhttp3.internal.tls.BasicCertificateChainCleaner`;
  #L1a8f88.  call temp:= `buildTrustRootIndex`(v2, v3) @signature `Lokhttp3/internal/platform/Platform;.buildTrustRootIndex:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/TrustRootIndex;` @kind virtual;
  #L1a8f8e.  v1:= temp @kind object;
  #L1a8f90.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/tls/BasicCertificateChainCleaner;.<init>:(Lokhttp3/internal/tls/TrustRootIndex;)V` @kind direct;
  #L1a8f96.  return v0 @kind object;
}
procedure `okhttp3.internal.tls.TrustRootIndex` `buildTrustRootIndex`(`okhttp3.internal.platform.Platform` v2 @kind this, `javax.net.ssl.X509TrustManager` v3 @kind object @name `trustManager`) @signature `Lokhttp3/internal/platform/Platform;.buildTrustRootIndex:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/TrustRootIndex;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a8fa8.  v0:= new `okhttp3.internal.tls.BasicTrustRootIndex`;
  #L1a8fac.  call temp:= `getAcceptedIssuers`(v3) @signature `Ljavax/net/ssl/X509TrustManager;.getAcceptedIssuers:()[Ljava/security/cert/X509Certificate;` @kind interface;
  #L1a8fb2.  v1:= temp @kind object;
  #L1a8fb4.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/tls/BasicTrustRootIndex;.<init>:([Ljava/security/cert/X509Certificate;)V` @kind direct;
  #L1a8fba.  return v0 @kind object;
}
procedure `void` `configureTlsExtensions`(`okhttp3.internal.platform.Platform` v0 @kind this, `javax.net.ssl.SSLSocket` v1 @kind object @name `sslSocket`, `java.lang.String` v2 @kind object @name `hostname`, `java.util.List` v3 @kind object) @signature `Lokhttp3/internal/platform/Platform;.configureTlsExtensions:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L1a8fcc.  return @kind void;
}
procedure `void` `connectSocket`(`okhttp3.internal.platform.Platform` v0 @kind this, `java.net.Socket` v1 @kind object @name `socket`, `java.net.InetSocketAddress` v2 @kind object @name `address`, `int` v3 @name `connectTimeout`) @signature `Lokhttp3/internal/platform/Platform;.connectSocket:(Ljava/net/Socket;Ljava/net/InetSocketAddress;I)V` @AccessFlag PUBLIC {
    temp;

  #L1a8fe0.  call `connect`(v1, v2, v3) @signature `Ljava/net/Socket;.connect:(Ljava/net/SocketAddress;I)V` @kind virtual;
  #L1a8fe6.  return @kind void;
}
procedure `java.lang.String` `getPrefix`(`okhttp3.internal.platform.Platform` v1 @kind this) @signature `Lokhttp3/internal/platform/Platform;.getPrefix:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a8ff8.  v0:= "OkHttp" @kind object;
  #L1a8ffc.  return v0 @kind object;
}
procedure `javax.net.ssl.SSLContext` `getSSLContext`(`okhttp3.internal.platform.Platform` v3 @kind this) @signature `Lokhttp3/internal/platform/Platform;.getSSLContext:()Ljavax/net/ssl/SSLContext;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L1a9010.  v1:= "TLS" @kind object;
  #L1a9014.  call temp:= `getInstance`(v1) @signature `Ljavax/net/ssl/SSLContext;.getInstance:(Ljava/lang/String;)Ljavax/net/ssl/SSLContext;` @kind static;
  #Try_end0.  
  #L1a901a.  v1:= temp @kind object;
  #L1a901c.  return v1 @kind object;
  #L1a901e.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L1a9020.  v1:= new `java.lang.IllegalStateException`;
  #L1a9024.  v2:= "No TLS provider" @kind object;
  #L1a9028.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L1a902e.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L1a901e;
}
procedure `java.lang.String` `getSelectedProtocol`(`okhttp3.internal.platform.Platform` v1 @kind this, `javax.net.ssl.SSLSocket` v2 @kind object @name `socket`) @signature `Lokhttp3/internal/platform/Platform;.getSelectedProtocol:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a9050.  v0:= 0I;
  #L1a9052.  return v0 @kind object;
}
procedure `java.lang.Object` `getStackTraceForCloseable`(`okhttp3.internal.platform.Platform` v2 @kind this, `java.lang.String` v3 @kind object @name `closer`) @signature `Lokhttp3/internal/platform/Platform;.getStackTraceForCloseable:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a9064.  v0:= `@@okhttp3.internal.platform.Platform.logger` @type ^`java.util.logging.Logger` @kind object;
  #L1a9068.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L1a906c.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L1a9072.  v0:= temp;
  #L1a9074.  if v0 == 0 then goto L1a9084;
  #L1a9078.  v0:= new `java.lang.Throwable`;
  #L1a907c.  call `<init>`(v0, v3) @signature `Ljava/lang/Throwable;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a9082.  return v0 @kind object;
  #L1a9084.  v0:= 0I;
  #L1a9086.  goto L1a9082;
}
procedure `boolean` `isCleartextTrafficPermitted`(`okhttp3.internal.platform.Platform` v1 @kind this, `java.lang.String` v2 @kind object @name `hostname`) @signature `Lokhttp3/internal/platform/Platform;.isCleartextTrafficPermitted:(Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a9098.  v0:= 1I;
  #L1a909a.  return v0;
}
procedure `void` `log`(`okhttp3.internal.platform.Platform` v2 @kind this, `int` v3 @name `level`, `java.lang.String` v4 @kind object @name `message`, `java.lang.Throwable` v5 @kind object @name `t`) @signature `Lokhttp3/internal/platform/Platform;.log:(ILjava/lang/String;Ljava/lang/Throwable;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a90ac.  v1:= 5I;
  #L1a90ae.  if v3 != v1 then goto L1a90c2;
  #L1a90b2.  v0:= `@@java.util.logging.Level.WARNING` @type ^`java.util.logging.Level` @kind object;
  #L1a90b6.  v1:= `@@okhttp3.internal.platform.Platform.logger` @type ^`java.util.logging.Logger` @kind object;
  #L1a90ba.  call `log`(v1, v0, v4, v5) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L1a90c0.  return @kind void;
  #L1a90c2.  v0:= `@@java.util.logging.Level.INFO` @type ^`java.util.logging.Level` @kind object;
  #L1a90c6.  goto L1a90b6;
}
procedure `void` `logCloseableLeak`(`okhttp3.internal.platform.Platform` v2 @kind this, `java.lang.String` v3 @kind object @name `message`, `java.lang.Object` v4 @kind object @name `stackTrace`) @signature `Lokhttp3/internal/platform/Platform;.logCloseableLeak:(Ljava/lang/String;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a90d8.  if v4 != 0 then goto L1a9102;
  #L1a90dc.  v0:= new `java.lang.StringBuilder`;
  #L1a90e0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1a90e6.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a90ec.  v0:= temp @kind object;
  #L1a90ee.  v1:= " To see where this was allocated, set the OkHttpClient logger level to FINE: Logger.getLogger(OkHttpClient.class.getName()).setLevel(Level.FINE);" @kind object;
  #L1a90f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a90f8.  v0:= temp @kind object;
  #L1a90fa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a9100.  v3:= temp @kind object;
  #L1a9102.  v0:= 5I;
  #L1a9104.  v4:= (`java.lang.Throwable`) v4 @kind object;
  #L1a9108.  call `log`(v2, v0, v3, v4) @signature `Lokhttp3/internal/platform/Platform;.log:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L1a910e.  return @kind void;
}
procedure `javax.net.ssl.X509TrustManager` `trustManager`(`okhttp3.internal.platform.Platform` v6 @kind this, `javax.net.ssl.SSLSocketFactory` v7 @kind object @name `sslSocketFactory`) @signature `Lokhttp3/internal/platform/Platform;.trustManager:(Ljavax/net/ssl/SSLSocketFactory;)Ljavax/net/ssl/X509TrustManager;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1a9120.  v4:= 0I;
  #Try_start0.  
  #L1a9122.  v3:= "sun.security.ssl.SSLContextImpl" @kind object;
  #L1a9126.  call temp:= `forName`(v3) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L1a912c.  v2:= temp @kind object;
  #L1a912e.  v3:= "context" @kind object;
  #L1a9132.  call temp:= `readFieldOrNull`(v7, v2, v3) @signature `Lokhttp3/internal/platform/Platform;.readFieldOrNull:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1a9138.  v0:= temp @kind object;
  #L1a913a.  if v0 != 0 then goto L1a9142;
  #L1a913e.  v3:= v4 @kind object;
  #L1a9140.  return v3 @kind object;
  #L1a9142.  v3:= constclass @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L1a9146.  v5:= "trustManager" @kind object;
  #L1a914a.  call temp:= `readFieldOrNull`(v0, v3, v5) @signature `Lokhttp3/internal/platform/Platform;.readFieldOrNull:(Ljava/lang/Object;Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1a9150.  v3:= temp @kind object;
  #L1a9152.  v3:= (`javax.net.ssl.X509TrustManager`) v3 @kind object;
  #Try_end0.  
  #L1a9156.  goto L1a9140;
  #L1a9158.  v1:= Exception @type ^`java.lang.ClassNotFoundException` @kind object;
  #L1a915a.  v3:= v4 @kind object;
  #L1a915c.  goto L1a9140;
  catch `java.lang.ClassNotFoundException` @[Try_start0..Try_end0] goto L1a9158;
}
