record `okhttp3.internal.platform.OptionalMethod` @kind class @AccessFlag  {
  `java.lang.String` `okhttp3.internal.platform.OptionalMethod.methodName` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `okhttp3.internal.platform.OptionalMethod.methodParams` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `okhttp3.internal.platform.OptionalMethod.returnType` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.platform.OptionalMethod` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object @name `methodName`, `java.lang.Class`[] v3 @kind object @name `methodParams`) @signature `Lokhttp3/internal/platform/OptionalMethod;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1a89ac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a89b2.  v0.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` := v1 @kind object;
  #L1a89b6.  v0.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` := v2 @kind object;
  #L1a89ba.  v0.`okhttp3.internal.platform.OptionalMethod.methodParams` @type ^`java.lang.Class`[] := v3 @kind object;
  #L1a89be.  return @kind void;
}
procedure `java.lang.reflect.Method` `getMethod`(`okhttp3.internal.platform.OptionalMethod` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1a89d0.  v0:= 0I;
  #L1a89d2.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L1a89d6.  if v1 == 0 then goto L1a8a10;
  #L1a89da.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L1a89de.  v2:= v3.`okhttp3.internal.platform.OptionalMethod.methodParams` @type ^`java.lang.Class`[] @kind object;
  #L1a89e2.  call temp:= `getPublicMethod`(v4, v1, v2) @signature `Lokhttp3/internal/platform/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L1a89e8.  v0:= temp @kind object;
  #L1a89ea.  if v0 == 0 then goto L1a8a10;
  #L1a89ee.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` @kind object;
  #L1a89f2.  if v1 == 0 then goto L1a8a10;
  #L1a89f6.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` @kind object;
  #L1a89fa.  call temp:= `getReturnType`(v0) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L1a8a00.  v2:= temp @kind object;
  #L1a8a02.  call temp:= `isAssignableFrom`(v1, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1a8a08.  v1:= temp;
  #L1a8a0a.  if v1 != 0 then goto L1a8a10;
  #L1a8a0e.  v0:= 0I;
  #L1a8a10.  return v0 @kind object;
}
procedure `java.lang.reflect.Method` `getPublicMethod`(`java.lang.Class` v2 @kind object, `java.lang.String` v3 @kind object @name `methodName`, `java.lang.Class`[] v4 @kind object @name `parameterTypes`) @signature `Lokhttp3/internal/platform/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1a8a24.  v0:= 0I;
  #Try_start0.  
  #L1a8a26.  call temp:= `getMethod`(v2, v3, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L1a8a2c.  v0:= temp @kind object;
  #L1a8a2e.  call temp:= `getModifiers`(v0) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #Try_end0.  
  #L1a8a34.  v1:= temp;
  #L1a8a36.  v1:= v1 ^& 1;
  #L1a8a3a.  if v1 != 0 then goto L1a8a40;
  #L1a8a3e.  v0:= 0I;
  #L1a8a40.  return v0 @kind object;
  #L1a8a42.  v1:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L1a8a44.  goto L1a8a40;
  catch `java.lang.NoSuchMethodException` @[Try_start0..Try_end0] goto L1a8a42;
}
procedure `java.lang.Object` `invoke`(`okhttp3.internal.platform.OptionalMethod` v6 @kind this, `java.lang.Object` v7 @kind object, `java.lang.Object`[] v8 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1a8a68.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1a8a6e.  v3:= temp @kind object;
  #L1a8a70.  call temp:= `getMethod`(v6, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L1a8a76.  v2:= temp @kind object;
  #L1a8a78.  if v2 != 0 then goto L1a8ac6;
  #L1a8a7c.  v3:= new `java.lang.AssertionError`;
  #L1a8a80.  v4:= new `java.lang.StringBuilder`;
  #L1a8a84.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1a8a8a.  v5:= "Method " @kind object;
  #L1a8a8e.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a8a94.  v4:= temp @kind object;
  #L1a8a96.  v5:= v6.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L1a8a9a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a8aa0.  v4:= temp @kind object;
  #L1a8aa2.  v5:= " not supported for object " @kind object;
  #L1a8aa6.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a8aac.  v4:= temp @kind object;
  #L1a8aae.  call temp:= `append`(v4, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a8ab4.  v4:= temp @kind object;
  #L1a8ab6.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a8abc.  v4:= temp @kind object;
  #L1a8abe.  call `<init>`(v3, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1a8ac4.  throw v3;
  #Try_start0.  
  #L1a8ac6.  call temp:= `invoke`(v2, v7, v8) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1a8acc.  v3:= temp @kind object;
  #L1a8ace.  return v3 @kind object;
  #L1a8ad0.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L1a8ad2.  v1:= new `java.lang.AssertionError`;
  #L1a8ad6.  v3:= new `java.lang.StringBuilder`;
  #L1a8ada.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1a8ae0.  v4:= "Unexpectedly could not call: " @kind object;
  #L1a8ae4.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a8aea.  v3:= temp @kind object;
  #L1a8aec.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1a8af2.  v3:= temp @kind object;
  #L1a8af4.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1a8afa.  v3:= temp @kind object;
  #L1a8afc.  call `<init>`(v1, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1a8b02.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1a8b08.  throw v1;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L1a8ad0;
}
procedure `java.lang.Object` `invokeOptional`(`okhttp3.internal.platform.OptionalMethod` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a8b2c.  v2:= 0I;
  #L1a8b2e.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1a8b34.  v3:= temp @kind object;
  #L1a8b36.  call temp:= `getMethod`(v4, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L1a8b3c.  v1:= temp @kind object;
  #L1a8b3e.  if v1 != 0 then goto L1a8b44;
  #L1a8b42.  return v2 @kind object;
  #Try_start0.  
  #L1a8b44.  call temp:= `invoke`(v1, v5, v6) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1a8b4a.  v2:= temp @kind object;
  #L1a8b4c.  goto L1a8b42;
  #L1a8b4e.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L1a8b50.  goto L1a8b42;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L1a8b4e;
}
procedure `java.lang.Object` `invokeOptionalWithoutCheckedException`(`okhttp3.internal.platform.OptionalMethod` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptionalWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L1a8b74.  call temp:= `invokeOptional`(v4, v5, v6) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1a8b7a.  v3:= temp @kind object;
  #L1a8b7c.  return v3 @kind object;
  #L1a8b7e.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L1a8b80.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L1a8b86.  v2:= temp @kind object;
  #L1a8b88.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L1a8b8c.  if v3 == 0 then goto L1a8b96;
  #L1a8b90.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L1a8b94.  throw v2;
  #L1a8b96.  v1:= new `java.lang.AssertionError`;
  #L1a8b9a.  v3:= "Unexpected exception" @kind object;
  #L1a8b9e.  call `<init>`(v1, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1a8ba4.  call temp:= `initCause`(v1, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1a8baa.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L1a8b7e;
}
procedure `java.lang.Object` `invokeWithoutCheckedException`(`okhttp3.internal.platform.OptionalMethod` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L1a8bcc.  call temp:= `invoke`(v4, v5, v6) @signature `Lokhttp3/internal/platform/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1a8bd2.  v3:= temp @kind object;
  #L1a8bd4.  return v3 @kind object;
  #L1a8bd6.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L1a8bd8.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L1a8bde.  v2:= temp @kind object;
  #L1a8be0.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L1a8be4.  if v3 == 0 then goto L1a8bee;
  #L1a8be8.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L1a8bec.  throw v2;
  #L1a8bee.  v1:= new `java.lang.AssertionError`;
  #L1a8bf2.  v3:= "Unexpected exception" @kind object;
  #L1a8bf6.  call `<init>`(v1, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1a8bfc.  call temp:= `initCause`(v1, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1a8c02.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L1a8bd6;
}
procedure `boolean` `isSupported`(`okhttp3.internal.platform.OptionalMethod` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.isSupported:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a8c24.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1a8c2a.  v0:= temp @kind object;
  #L1a8c2c.  call temp:= `getMethod`(v1, v0) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L1a8c32.  v0:= temp @kind object;
  #L1a8c34.  if v0 == 0 then goto L1a8c3c;
  #L1a8c38.  v0:= 1I;
  #L1a8c3a.  return v0;
  #L1a8c3c.  v0:= 0I;
  #L1a8c3e.  goto L1a8c3a;
}
