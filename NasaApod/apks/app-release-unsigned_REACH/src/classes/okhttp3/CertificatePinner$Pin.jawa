record `okhttp3.CertificatePinner$Pin` @kind class @AccessFlag FINAL {
  `java.lang.String` `okhttp3.CertificatePinner$Pin.canonicalHostname` @AccessFlag FINAL;
  `okio.ByteString` `okhttp3.CertificatePinner$Pin.hash` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.hashAlgorithm` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.pattern` @AccessFlag FINAL;
}
global `java.lang.String` `@@okhttp3.CertificatePinner$Pin.WILDCARD` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.CertificatePinner$Pin` v3 @kind this, `java.lang.String` v4 @kind object @name `pattern`, `java.lang.String` v5 @kind object @name `pin`) @signature `Lokhttp3/CertificatePinner$Pin;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L193f54.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L193f5a.  v3.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` := v4 @kind object;
  #L193f5e.  v0:= "*." @kind object;
  #L193f62.  call temp:= `startsWith`(v4, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L193f68.  v0:= temp;
  #L193f6a.  if v0 == 0 then goto L19402e;
  #L193f6e.  v0:= new `java.lang.StringBuilder`;
  #L193f72.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L193f78.  v1:= "http://" @kind object;
  #L193f7c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L193f82.  v0:= temp @kind object;
  #L193f84.  v1:= "*." @kind object;
  #L193f88.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L193f8e.  v1:= temp;
  #L193f90.  call temp:= `substring`(v4, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L193f96.  v1:= temp @kind object;
  #L193f98.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L193f9e.  v0:= temp @kind object;
  #L193fa0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L193fa6.  v0:= temp @kind object;
  #L193fa8.  call temp:= `parse`(v0) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L193fae.  v0:= temp @kind object;
  #L193fb0.  call temp:= `host`(v0) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L193fb6.  v0:= temp @kind object;
  #L193fb8.  v3.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` := v0 @kind object;
  #L193fbc.  v0:= "sha1/" @kind object;
  #L193fc0.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L193fc6.  v0:= temp;
  #L193fc8.  if v0 == 0 then goto L194066;
  #L193fcc.  v0:= "sha1/" @kind object;
  #L193fd0.  v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v0 @kind object;
  #L193fd4.  v0:= "sha1/" @kind object;
  #L193fd8.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L193fde.  v0:= temp;
  #L193fe0.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L193fe6.  v0:= temp @kind object;
  #L193fe8.  call temp:= `decodeBase64`(v0) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L193fee.  v0:= temp @kind object;
  #L193ff0.  v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v0 @kind object;
  #L193ff4.  v0:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L193ff8.  if v0 != 0 then goto L1940d2;
  #L193ffc.  v0:= new `java.lang.IllegalArgumentException`;
  #L194000.  v1:= new `java.lang.StringBuilder`;
  #L194004.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19400a.  v2:= "pins must be base64: " @kind object;
  #L19400e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L194014.  v1:= temp @kind object;
  #L194016.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19401c.  v1:= temp @kind object;
  #L19401e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L194024.  v1:= temp @kind object;
  #L194026.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19402c.  throw v0;
  #L19402e.  v0:= new `java.lang.StringBuilder`;
  #L194032.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L194038.  v1:= "http://" @kind object;
  #L19403c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L194042.  v0:= temp @kind object;
  #L194044.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19404a.  v0:= temp @kind object;
  #L19404c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L194052.  v0:= temp @kind object;
  #L194054.  call temp:= `parse`(v0) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L19405a.  v0:= temp @kind object;
  #L19405c.  call temp:= `host`(v0) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L194062.  v0:= temp @kind object;
  #L194064.  goto L193fb8;
  #L194066.  v0:= "sha256/" @kind object;
  #L19406a.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L194070.  v0:= temp;
  #L194072.  if v0 == 0 then goto L1940a0;
  #L194076.  v0:= "sha256/" @kind object;
  #L19407a.  v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v0 @kind object;
  #L19407e.  v0:= "sha256/" @kind object;
  #L194082.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L194088.  v0:= temp;
  #L19408a.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L194090.  v0:= temp @kind object;
  #L194092.  call temp:= `decodeBase64`(v0) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L194098.  v0:= temp @kind object;
  #L19409a.  v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v0 @kind object;
  #L19409e.  goto L193ff4;
  #L1940a0.  v0:= new `java.lang.IllegalArgumentException`;
  #L1940a4.  v1:= new `java.lang.StringBuilder`;
  #L1940a8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1940ae.  v2:= "pins must start with 'sha256/' or 'sha1/': " @kind object;
  #L1940b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1940b8.  v1:= temp @kind object;
  #L1940ba.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1940c0.  v1:= temp @kind object;
  #L1940c2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1940c8.  v1:= temp @kind object;
  #L1940ca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1940d0.  throw v0;
  #L1940d2.  return @kind void;
}
procedure `boolean` `equals`(`okhttp3.CertificatePinner$Pin` v2 @kind this, `java.lang.Object` v3 @kind object @name `other`) @signature `Lokhttp3/CertificatePinner$Pin;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1940e4.  v0:= instanceof @variable v3 @type ^`okhttp3.CertificatePinner$Pin` @kind boolean;
  #L1940e8.  if v0 == 0 then goto L19413c;
  #L1940ec.  v1:= v2.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L1940f0.  v0:= v3 @kind object;
  #L1940f2.  v0:= (`okhttp3.CertificatePinner$Pin`) v0 @kind object;
  #L1940f6.  v0:= v0.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L1940fa.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L194100.  v0:= temp;
  #L194102.  if v0 == 0 then goto L19413c;
  #L194106.  v1:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L19410a.  v0:= v3 @kind object;
  #L19410c.  v0:= (`okhttp3.CertificatePinner$Pin`) v0 @kind object;
  #L194110.  v0:= v0.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L194114.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19411a.  v0:= temp;
  #L19411c.  if v0 == 0 then goto L19413c;
  #L194120.  v0:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L194124.  v3:= (`okhttp3.CertificatePinner$Pin`) v3 @kind object;
  #L194128.  v1:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L19412c.  call temp:= `equals`(v0, v1) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L194132.  v0:= temp;
  #L194134.  if v0 == 0 then goto L19413c;
  #L194138.  v0:= 1I;
  #L19413a.  return v0;
  #L19413c.  v0:= 0I;
  #L19413e.  goto L19413a;
}
procedure `int` `hashCode`(`okhttp3.CertificatePinner$Pin` v3 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L194150.  v0:= 17I;
  #L194154.  v1:= v3.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L194158.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L19415e.  v1:= temp;
  #L194160.  v0:= v1 + 527;
  #L194164.  v1:= v0 * 31;
  #L194168.  v2:= v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L19416c.  call temp:= `hashCode`(v2) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L194172.  v2:= temp;
  #L194174.  v0:= v1 + v2 @kind int;
  #L194178.  v1:= v0 * 31;
  #L19417c.  v2:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L194180.  call temp:= `hashCode`(v2) @signature `Lokio/ByteString;.hashCode:()I` @kind virtual;
  #L194186.  v2:= temp;
  #L194188.  v0:= v1 + v2 @kind int;
  #L19418c.  return v0;
}
procedure `boolean` `matches`(`okhttp3.CertificatePinner$Pin` v7 @kind this, `java.lang.String` v8 @kind object @name `hostname`) @signature `Lokhttp3/CertificatePinner$Pin;.matches:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1941a0.  v1:= 0I;
  #L1941a2.  v0:= v7.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L1941a6.  v2:= "*." @kind object;
  #L1941aa.  call temp:= `startsWith`(v0, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1941b0.  v0:= temp;
  #L1941b2.  if v0 == 0 then goto L194208;
  #L1941b6.  v0:= 46I;
  #L1941ba.  call temp:= `indexOf`(v8, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L1941c0.  v6:= temp;
  #L1941c2.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1941c8.  v0:= temp;
  #L1941ca.  v0:= v0 - v6 @kind int;
  #L1941cc.  v0:= v0 + -1;
  #L1941d0.  v2:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L1941d4.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1941da.  v2:= temp;
  #L1941dc.  if v0 != v2 then goto L194206;
  #L1941e0.  v2:= v6 + 1;
  #L1941e4.  v3:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L1941e8.  v0:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L1941ec.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1941f2.  v5:= temp;
  #L1941f4.  v0:= v8 @kind object;
  #L1941f6.  v4:= v1;
  #L1941f8.  call temp:= `regionMatches`(v0, v1, v2, v3, v4, v5) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L1941fe.  v0:= temp;
  #L194200.  if v0 == 0 then goto L194206;
  #L194204.  v1:= 1I;
  #L194206.  return v1;
  #L194208.  v0:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L19420c.  call temp:= `equals`(v8, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L194212.  v1:= temp;
  #L194214.  goto L194206;
}
procedure `java.lang.String` `toString`(`okhttp3.CertificatePinner$Pin` v2 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L194228.  v0:= new `java.lang.StringBuilder`;
  #L19422c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L194232.  v1:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L194236.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19423c.  v0:= temp @kind object;
  #L19423e.  v1:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L194242.  call temp:= `base64`(v1) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L194248.  v1:= temp @kind object;
  #L19424a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L194250.  v0:= temp @kind object;
  #L194252.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L194258.  v0:= temp @kind object;
  #L19425a.  return v0 @kind object;
}
