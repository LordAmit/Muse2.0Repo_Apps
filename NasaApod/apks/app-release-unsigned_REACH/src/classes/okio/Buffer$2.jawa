record `okio.Buffer$2` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `okio.Buffer` `okio.Buffer$2.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Buffer$2` v0 @kind this, `okio.Buffer` v1 @kind object @name `this$0`) @signature `Lokio/Buffer$2;.<init>:(Lokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1abb98.  v0.`okio.Buffer$2.this$0` @type ^`okio.Buffer` := v1 @kind object;
  #L1abb9c.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L1abba2.  return @kind void;
}
procedure `int` `available`(`okio.Buffer$2` v4 @kind this) @signature `Lokio/Buffer$2;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1abbb4.  v0:= v4.`okio.Buffer$2.this$0` @type ^`okio.Buffer` @kind object;
  #L1abbb8.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1abbbc.  v2:= 2147483647L;
  #L1abbc2.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1abbc8.  v0:= temp @kind wide;
  #L1abbca.  v0:= (`int`) v0 @kind l2i;
  #L1abbcc.  return v0;
}
procedure `void` `close`(`okio.Buffer$2` v0 @kind this) @signature `Lokio/Buffer$2;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L1abbe0.  return @kind void;
}
procedure `int` `read`(`okio.Buffer$2` v4 @kind this) @signature `Lokio/Buffer$2;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1abbf4.  v0:= v4.`okio.Buffer$2.this$0` @type ^`okio.Buffer` @kind object;
  #L1abbf8.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1abbfc.  v2:= 0L;
  #L1abc00.  v0:= lcmp(v0, v2);
  #L1abc04.  if v0 <= 0 then goto L1abc1a;
  #L1abc08.  v0:= v4.`okio.Buffer$2.this$0` @type ^`okio.Buffer` @kind object;
  #L1abc0c.  call temp:= `readByte`(v0) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1abc12.  v0:= temp;
  #L1abc14.  v0:= v0 ^& 255;
  #L1abc18.  return v0;
  #L1abc1a.  v0:= -1I;
  #L1abc1c.  goto L1abc18;
}
procedure `int` `read`(`okio.Buffer$2` v1 @kind this, `byte`[] v2 @kind object @name `sink`, `int` v3 @name `offset`, `int` v4 @name `byteCount`) @signature `Lokio/Buffer$2;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1abc30.  v0:= v1.`okio.Buffer$2.this$0` @type ^`okio.Buffer` @kind object;
  #L1abc34.  call temp:= `read`(v0, v2, v3, v4) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L1abc3a.  v0:= temp;
  #L1abc3c.  return v0;
}
procedure `java.lang.String` `toString`(`okio.Buffer$2` v2 @kind this) @signature `Lokio/Buffer$2;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1abc50.  v0:= new `java.lang.StringBuilder`;
  #L1abc54.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1abc5a.  v1:= v2.`okio.Buffer$2.this$0` @type ^`okio.Buffer` @kind object;
  #L1abc5e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1abc64.  v0:= temp @kind object;
  #L1abc66.  v1:= ".inputStream()" @kind object;
  #L1abc6a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1abc70.  v0:= temp @kind object;
  #L1abc72.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1abc78.  v0:= temp @kind object;
  #L1abc7a.  return v0 @kind object;
}
