record `okio.GzipSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Source` @kind interface {
  `java.util.zip.CRC32` `okio.GzipSource.crc` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `okio.GzipSource.inflater` @AccessFlag PRIVATE_FINAL;
  `okio.InflaterSource` `okio.GzipSource.inflaterSource` @AccessFlag PRIVATE_FINAL;
  `int` `okio.GzipSource.section` @AccessFlag PRIVATE;
  `okio.BufferedSource` `okio.GzipSource.source` @AccessFlag PRIVATE_FINAL;
}
global `byte` `@@okio.GzipSource.FCOMMENT` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FEXTRA` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FHCRC` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FNAME` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_DONE` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_HEADER` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_TRAILER` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okio.GzipSource` v3 @kind this, `okio.Source` v4 @kind object @name `source`) @signature `Lokio/GzipSource;.<init>:(Lokio/Source;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L21dd5c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21dd62.  v0:= 0I;
  #L21dd64.  v3.`okio.GzipSource.section` @type ^`int` := v0;
  #L21dd68.  v0:= new `java.util.zip.CRC32`;
  #L21dd6c.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L21dd72.  v3.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L21dd76.  if v4 != 0 then goto L21dd8a;
  #L21dd7a.  v0:= new `java.lang.IllegalArgumentException`;
  #L21dd7e.  v1:= "source == null" @kind object;
  #L21dd82.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21dd88.  throw v0;
  #L21dd8a.  v0:= new `java.util.zip.Inflater`;
  #L21dd8e.  v1:= 1I;
  #L21dd90.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L21dd96.  v3.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L21dd9a.  call temp:= `buffer`(v4) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L21dda0.  v0:= temp @kind object;
  #L21dda2.  v3.`okio.GzipSource.source` @type ^`okio.BufferedSource` := v0 @kind object;
  #L21dda6.  v0:= new `okio.InflaterSource`;
  #L21ddaa.  v1:= v3.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21ddae.  v2:= v3.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L21ddb2.  call `<init>`(v0, v1, v2) @signature `Lokio/InflaterSource;.<init>:(Lokio/BufferedSource;Ljava/util/zip/Inflater;)V` @kind direct;
  #L21ddb8.  v3.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` := v0 @kind object;
  #L21ddbc.  return @kind void;
}
procedure `void` `checkEqual`(`okio.GzipSource` v5 @kind this, `java.lang.String` v6 @kind object @name `name`, `int` v7 @name `expected`, `int` v8 @name `actual`) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L21ddd0.  if v8 == v7 then goto L21de14;
  #L21ddd4.  v0:= new `java.io.IOException`;
  #L21ddd8.  v1:= "%s: actual 0x%08x != expected 0x%08x" @kind object;
  #L21dddc.  v2:= 3I;
  #L21ddde.  v2:= new `java.lang.Object`[v2];
  #L21dde2.  v3:= 0I;
  #L21dde4.  v2[v3]:= v6 @kind object;
  #L21dde8.  v3:= 1I;
  #L21ddea.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L21ddf0.  v4:= temp @kind object;
  #L21ddf2.  v2[v3]:= v4 @kind object;
  #L21ddf6.  v3:= 2I;
  #L21ddf8.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L21ddfe.  v4:= temp @kind object;
  #L21de00.  v2[v3]:= v4 @kind object;
  #L21de04.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L21de0a.  v1:= temp @kind object;
  #L21de0c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21de12.  throw v0;
  #L21de14.  return @kind void;
}
procedure `void` `consumeHeader`(`okio.GzipSource` v12 @kind this) @signature `Lokio/GzipSource;.consumeHeader:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L21de28.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21de2c.  v2:= 10L;
  #L21de30.  call `require`(v0, v2) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L21de36.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21de3a.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21de40.  v0:= temp @kind object;
  #L21de42.  v2:= 3L;
  #L21de46.  call temp:= `getByte`(v0, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L21de4c.  v7:= temp;
  #L21de4e.  v0:= v7 ^> 1;
  #L21de52.  v0:= v0 ^& 1;
  #L21de56.  v1:= 1I;
  #L21de58.  if v0 != v1 then goto L21df60;
  #L21de5c.  v6:= 1I;
  #L21de5e.  if v6 == 0 then goto L21de7e;
  #L21de62.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21de66.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21de6c.  v1:= temp @kind object;
  #L21de6e.  v2:= 0L;
  #L21de72.  v4:= 10L;
  #L21de76.  v0:= v12 @kind object;
  #L21de78.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21de7e.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21de82.  call temp:= `readShort`(v0) @signature `Lokio/BufferedSource;.readShort:()S` @kind interface;
  #L21de88.  v8:= temp;
  #L21de8a.  v0:= "ID1ID2" @kind object;
  #L21de8e.  v1:= 8075I;
  #L21de92.  call `checkEqual`(v12, v0, v1, v8) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L21de98.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21de9c.  v2:= 8L;
  #L21dea0.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L21dea6.  v0:= v7 ^> 2;
  #L21deaa.  v0:= v0 ^& 1;
  #L21deae.  v1:= 1I;
  #L21deb0.  if v0 != v1 then goto L21df2c;
  #L21deb4.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21deb8.  v2:= 2L;
  #L21debc.  call `require`(v0, v2) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L21dec2.  if v6 == 0 then goto L21dee2;
  #L21dec6.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21deca.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21ded0.  v1:= temp @kind object;
  #L21ded2.  v2:= 0L;
  #L21ded6.  v4:= 2L;
  #L21deda.  v0:= v12 @kind object;
  #L21dedc.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21dee2.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21dee6.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21deec.  v0:= temp @kind object;
  #L21deee.  call temp:= `readShortLe`(v0) @signature `Lokio/Buffer;.readShortLe:()S` @kind virtual;
  #L21def4.  v9:= temp;
  #L21def6.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21defa.  v2:= (`long`) v9 @kind i2l;
  #L21defc.  call `require`(v0, v2) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L21df02.  if v6 == 0 then goto L21df20;
  #L21df06.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21df0a.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21df10.  v1:= temp @kind object;
  #L21df12.  v2:= 0L;
  #L21df16.  v4:= (`long`) v9 @kind i2l;
  #L21df18.  v0:= v12 @kind object;
  #L21df1a.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21df20.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21df24.  v2:= (`long`) v9 @kind i2l;
  #L21df26.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L21df2c.  v0:= v7 ^> 3;
  #L21df30.  v0:= v0 ^& 1;
  #L21df34.  v1:= 1I;
  #L21df36.  if v0 != v1 then goto L21df98;
  #L21df3a.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21df3e.  v1:= 0I;
  #L21df40.  call temp:= `indexOf`(v0, v1) @signature `Lokio/BufferedSource;.indexOf:(B)J` @kind interface;
  #L21df46.  v10:= temp @kind wide;
  #L21df48.  v0:= -1L;
  #L21df4c.  v0:= lcmp(v10, v0);
  #L21df50.  if v0 != 0 then goto L21df66;
  #L21df54.  v0:= new `java.io.EOFException`;
  #L21df58.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L21df5e.  throw v0;
  #L21df60.  v6:= 0I;
  #L21df62.  goto L21de5e;
  #L21df66.  if v6 == 0 then goto L21df88;
  #L21df6a.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21df6e.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21df74.  v1:= temp @kind object;
  #L21df76.  v2:= 0L;
  #L21df7a.  v4:= 1L;
  #L21df7e.  v4:= v4 + v10 @kind long;
  #L21df80.  v0:= v12 @kind object;
  #L21df82.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21df88.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21df8c.  v2:= 1L;
  #L21df90.  v2:= v2 + v10 @kind long;
  #L21df92.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L21df98.  v0:= v7 ^> 4;
  #L21df9c.  v0:= v0 ^& 1;
  #L21dfa0.  v1:= 1I;
  #L21dfa2.  if v0 != v1 then goto L21dffe;
  #L21dfa6.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21dfaa.  v1:= 0I;
  #L21dfac.  call temp:= `indexOf`(v0, v1) @signature `Lokio/BufferedSource;.indexOf:(B)J` @kind interface;
  #L21dfb2.  v10:= temp @kind wide;
  #L21dfb4.  v0:= -1L;
  #L21dfb8.  v0:= lcmp(v10, v0);
  #L21dfbc.  if v0 != 0 then goto L21dfcc;
  #L21dfc0.  v0:= new `java.io.EOFException`;
  #L21dfc4.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L21dfca.  throw v0;
  #L21dfcc.  if v6 == 0 then goto L21dfee;
  #L21dfd0.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21dfd4.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21dfda.  v1:= temp @kind object;
  #L21dfdc.  v2:= 0L;
  #L21dfe0.  v4:= 1L;
  #L21dfe4.  v4:= v4 + v10 @kind long;
  #L21dfe6.  v0:= v12 @kind object;
  #L21dfe8.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21dfee.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21dff2.  v2:= 1L;
  #L21dff6.  v2:= v2 + v10 @kind long;
  #L21dff8.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L21dffe.  if v6 == 0 then goto L21e032;
  #L21e002.  v0:= "FHCRC" @kind object;
  #L21e006.  v1:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e00a.  call temp:= `readShortLe`(v1) @signature `Lokio/BufferedSource;.readShortLe:()S` @kind interface;
  #L21e010.  v1:= temp;
  #L21e012.  v2:= v12.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L21e016.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L21e01c.  v2:= temp @kind wide;
  #L21e01e.  v2:= (`int`) v2 @kind l2i;
  #L21e020.  v2:= (`short`) v2 @kind i2s;
  #L21e022.  call `checkEqual`(v12, v0, v1, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L21e028.  v0:= v12.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L21e02c.  call `reset`(v0) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L21e032.  return @kind void;
}
procedure `void` `consumeTrailer`(`okio.GzipSource` v4 @kind this) @signature `Lokio/GzipSource;.consumeTrailer:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L21e044.  v0:= "CRC" @kind object;
  #L21e048.  v1:= v4.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e04c.  call temp:= `readIntLe`(v1) @signature `Lokio/BufferedSource;.readIntLe:()I` @kind interface;
  #L21e052.  v1:= temp;
  #L21e054.  v2:= v4.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L21e058.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L21e05e.  v2:= temp @kind wide;
  #L21e060.  v2:= (`int`) v2 @kind l2i;
  #L21e062.  call `checkEqual`(v4, v0, v1, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L21e068.  v0:= "ISIZE" @kind object;
  #L21e06c.  v1:= v4.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e070.  call temp:= `readIntLe`(v1) @signature `Lokio/BufferedSource;.readIntLe:()I` @kind interface;
  #L21e076.  v1:= temp;
  #L21e078.  v2:= v4.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L21e07c.  call temp:= `getBytesWritten`(v2) @signature `Ljava/util/zip/Inflater;.getBytesWritten:()J` @kind virtual;
  #L21e082.  v2:= temp @kind wide;
  #L21e084.  v2:= (`int`) v2 @kind l2i;
  #L21e086.  call `checkEqual`(v4, v0, v1, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L21e08c.  return @kind void;
}
procedure `void` `updateCrc`(`okio.GzipSource` v6 @kind this, `okio.Buffer` v7 @kind object @name `buffer`, `long` v8 @name `offset`, `long` v10 @name `byteCount`) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L21e0a0.  v1:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L21e0a4.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L21e0a8.  v4:= v1.`okio.Segment.pos` @type ^`int`;
  #L21e0ac.  v3:= v3 - v4 @kind int;
  #L21e0ae.  v4:= (`long`) v3 @kind i2l;
  #L21e0b0.  v3:= lcmp(v8, v4);
  #L21e0b4.  if v3 < 0 then goto L21e0cc;
  #L21e0b8.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L21e0bc.  v4:= v1.`okio.Segment.pos` @type ^`int`;
  #L21e0c0.  v3:= v3 - v4 @kind int;
  #L21e0c2.  v4:= (`long`) v3 @kind i2l;
  #L21e0c4.  v8:= v8 - v4 @kind long;
  #L21e0c6.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L21e0ca.  goto L21e0a4;
  #L21e0cc.  v4:= 0L;
  #L21e0d0.  v3:= lcmp(v10, v4);
  #L21e0d4.  if v3 <= 0 then goto L21e110;
  #L21e0d8.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L21e0dc.  v4:= (`long`) v3 @kind i2l;
  #L21e0de.  v4:= v4 + v8 @kind long;
  #L21e0e0.  v0:= (`int`) v4 @kind l2i;
  #L21e0e2.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L21e0e6.  v3:= v3 - v0 @kind int;
  #L21e0e8.  v4:= (`long`) v3 @kind i2l;
  #L21e0ea.  call temp:= `min`(v4, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L21e0f0.  v4:= temp @kind wide;
  #L21e0f2.  v2:= (`int`) v4 @kind l2i;
  #L21e0f4.  v3:= v6.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L21e0f8.  v4:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L21e0fc.  call `update`(v3, v4, v0, v2) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L21e102.  v4:= (`long`) v2 @kind i2l;
  #L21e104.  v10:= v10 - v4 @kind long;
  #L21e106.  v8:= 0L;
  #L21e10a.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L21e10e.  goto L21e0cc;
  #L21e110.  return @kind void;
}
procedure `void` `close`(`okio.GzipSource` v1 @kind this) @signature `Lokio/GzipSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21e124.  v0:= v1.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` @kind object;
  #L21e128.  call `close`(v0) @signature `Lokio/InflaterSource;.close:()V` @kind virtual;
  #L21e12e.  return @kind void;
}
procedure `long` `read`(`okio.GzipSource` v10 @kind this, `okio.Buffer` v11 @kind object @name `sink`, `long` v12 @name `byteCount`) @signature `Lokio/GzipSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L21e140.  v0:= -1L;
  #L21e144.  v8:= 2I;
  #L21e146.  v7:= 1I;
  #L21e148.  v4:= 0L;
  #L21e14c.  v6:= lcmp(v12, v4);
  #L21e150.  if v6 >= 0 then goto L21e186;
  #L21e154.  v0:= new `java.lang.IllegalArgumentException`;
  #L21e158.  v1:= new `java.lang.StringBuilder`;
  #L21e15c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21e162.  v6:= "byteCount < 0: " @kind object;
  #L21e166.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21e16c.  v1:= temp @kind object;
  #L21e16e.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L21e174.  v1:= temp @kind object;
  #L21e176.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21e17c.  v1:= temp @kind object;
  #L21e17e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e184.  throw v0;
  #L21e186.  v6:= lcmp(v12, v4);
  #L21e18a.  if v6 != 0 then goto L21e190;
  #L21e18e.  return v4 @kind wide;
  #L21e190.  v6:= v10.`okio.GzipSource.section` @type ^`int`;
  #L21e194.  if v6 != 0 then goto L21e1a2;
  #L21e198.  call `consumeHeader`(v10) @signature `Lokio/GzipSource;.consumeHeader:()V` @kind direct;
  #L21e19e.  v10.`okio.GzipSource.section` @type ^`int` := v7;
  #L21e1a2.  v6:= v10.`okio.GzipSource.section` @type ^`int`;
  #L21e1a6.  if v6 != v7 then goto L21e1d2;
  #L21e1aa.  v2:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L21e1ae.  v6:= v10.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` @kind object;
  #L21e1b2.  call temp:= `read`(v6, v11, v12) @signature `Lokio/InflaterSource;.read:(Lokio/Buffer;J)J` @kind virtual;
  #L21e1b8.  v4:= temp @kind wide;
  #L21e1ba.  v6:= lcmp(v4, v0);
  #L21e1be.  if v6 == 0 then goto L21e1ce;
  #L21e1c2.  v0:= v10 @kind object;
  #L21e1c4.  v1:= v11 @kind object;
  #L21e1c6.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21e1cc.  goto L21e18e;
  #L21e1ce.  v10.`okio.GzipSource.section` @type ^`int` := v8;
  #L21e1d2.  v6:= v10.`okio.GzipSource.section` @type ^`int`;
  #L21e1d6.  if v6 != v8 then goto L21e206;
  #L21e1da.  call `consumeTrailer`(v10) @signature `Lokio/GzipSource;.consumeTrailer:()V` @kind direct;
  #L21e1e0.  v6:= 3I;
  #L21e1e2.  v10.`okio.GzipSource.section` @type ^`int` := v6;
  #L21e1e6.  v6:= v10.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e1ea.  call temp:= `exhausted`(v6) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L21e1f0.  v6:= temp;
  #L21e1f2.  if v6 != 0 then goto L21e206;
  #L21e1f6.  v0:= new `java.io.IOException`;
  #L21e1fa.  v1:= "gzip finished without exhausting source" @kind object;
  #L21e1fe.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e204.  throw v0;
  #L21e206.  v4:= v0 @kind wide;
  #L21e208.  goto L21e18e;
}
procedure `okio.Timeout` `timeout`(`okio.GzipSource` v1 @kind this) @signature `Lokio/GzipSource;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21e21c.  v0:= v1.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e220.  call temp:= `timeout`(v0) @signature `Lokio/BufferedSource;.timeout:()Lokio/Timeout;` @kind interface;
  #L21e226.  v0:= temp @kind object;
  #L21e228.  return v0 @kind object;
}
