record `okio.HashingSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.ForwardingSource` @kind class {
  `javax.crypto.Mac` `okio.HashingSource.mac` @AccessFlag PRIVATE_FINAL;
  `java.security.MessageDigest` `okio.HashingSource.messageDigest` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.HashingSource` v2 @kind this, `okio.Source` v3 @kind object @name `source`, `java.lang.String` v4 @kind object @name `algorithm`) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L248dc4.  call `<init>`(v2, v3) @signature `Lokio/ForwardingSource;.<init>:(Lokio/Source;)V` @kind direct;
  #Try_start0.  
  #L248dca.  call temp:= `getInstance`(v4) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L248dd0.  v1:= temp @kind object;
  #L248dd2.  v2.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` := v1 @kind object;
  #L248dd6.  v1:= 0I;
  #L248dd8.  v2.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` := v1 @kind object;
  #Try_end0.  
  #L248ddc.  return @kind void;
  #L248dde.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L248de0.  v1:= new `java.lang.AssertionError`;
  #L248de4.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L248dea.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L248dde;
}
procedure `void` `<init>`(`okio.HashingSource` v4 @kind this, `okio.Source` v5 @kind object @name `source`, `okio.ByteString` v6 @kind object @name `key`, `java.lang.String` v7 @kind object @name `algorithm`) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Lokio/ByteString;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L248e0c.  call `<init>`(v4, v5) @signature `Lokio/ForwardingSource;.<init>:(Lokio/Source;)V` @kind direct;
  #Try_start0.  
  #L248e12.  call temp:= `getInstance`(v7) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L248e18.  v1:= temp @kind object;
  #L248e1a.  v4.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` := v1 @kind object;
  #L248e1e.  v1:= v4.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` @kind object;
  #L248e22.  v2:= new `javax.crypto.spec.SecretKeySpec`;
  #L248e26.  call temp:= `toByteArray`(v6) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L248e2c.  v3:= temp @kind object;
  #L248e2e.  call `<init>`(v2, v3, v7) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L248e34.  call `init`(v1, v2) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L248e3a.  v1:= 0I;
  #L248e3c.  v4.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` := v1 @kind object;
  #Try_end0.  
  #L248e40.  return @kind void;
  #L248e42.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L248e44.  v1:= new `java.lang.AssertionError`;
  #L248e48.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L248e4e.  throw v1;
  #L248e50.  v0:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L248e52.  v1:= new `java.lang.IllegalArgumentException`;
  #L248e56.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L248e5c.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L248e42;
  catch `java.security.InvalidKeyException` @[Try_start0..Try_end0] goto L248e50;
}
procedure `okio.HashingSource` `hmacSha1`(`okio.Source` v2 @kind object @name `source`, `okio.ByteString` v3 @kind object @name `key`) @signature `Lokio/HashingSource;.hmacSha1:(Lokio/Source;Lokio/ByteString;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L248e80.  v0:= new `okio.HashingSource`;
  #L248e84.  v1:= "HmacSHA1" @kind object;
  #L248e88.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L248e8e.  return v0 @kind object;
}
procedure `okio.HashingSource` `hmacSha256`(`okio.Source` v2 @kind object @name `source`, `okio.ByteString` v3 @kind object @name `key`) @signature `Lokio/HashingSource;.hmacSha256:(Lokio/Source;Lokio/ByteString;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L248ea0.  v0:= new `okio.HashingSource`;
  #L248ea4.  v1:= "HmacSHA256" @kind object;
  #L248ea8.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L248eae.  return v0 @kind object;
}
procedure `okio.HashingSource` `md5`(`okio.Source` v2 @kind object @name `source`) @signature `Lokio/HashingSource;.md5:(Lokio/Source;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L248ec0.  v0:= new `okio.HashingSource`;
  #L248ec4.  v1:= "MD5" @kind object;
  #L248ec8.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @kind direct;
  #L248ece.  return v0 @kind object;
}
procedure `okio.HashingSource` `sha1`(`okio.Source` v2 @kind object @name `source`) @signature `Lokio/HashingSource;.sha1:(Lokio/Source;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L248ee0.  v0:= new `okio.HashingSource`;
  #L248ee4.  v1:= "SHA-1" @kind object;
  #L248ee8.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @kind direct;
  #L248eee.  return v0 @kind object;
}
procedure `okio.HashingSource` `sha256`(`okio.Source` v2 @kind object @name `source`) @signature `Lokio/HashingSource;.sha256:(Lokio/Source;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L248f00.  v0:= new `okio.HashingSource`;
  #L248f04.  v1:= "SHA-256" @kind object;
  #L248f08.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @kind direct;
  #L248f0e.  return v0 @kind object;
}
procedure `okio.ByteString` `hash`(`okio.HashingSource` v2 @kind this) @signature `Lokio/HashingSource;.hash:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248f20.  v1:= v2.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L248f24.  if v1 == 0 then goto L248f3e;
  #L248f28.  v1:= v2.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L248f2c.  call temp:= `digest`(v1) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L248f32.  v0:= temp @kind object;
  #L248f34.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L248f3a.  v1:= temp @kind object;
  #L248f3c.  return v1 @kind object;
  #L248f3e.  v1:= v2.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` @kind object;
  #L248f42.  call temp:= `doFinal`(v1) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L248f48.  v0:= temp @kind object;
  #L248f4a.  goto L248f34;
}
procedure `long` `read`(`okio.HashingSource` v12 @kind this, `okio.Buffer` v13 @kind object @name `sink`, `long` v14 @name `byteCount`) @signature `Lokio/HashingSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L248f5c.  call temp:= `read`(v12, v13, v14) @signature `Lokio/ForwardingSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L248f62.  v4:= temp @kind wide;
  #L248f64.  v8:= -1L;
  #L248f68.  v8:= lcmp(v4, v8);
  #L248f6c.  if v8 == 0 then goto L248ffc;
  #L248f70.  v8:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248f74.  v6:= v8 - v4 @kind long;
  #L248f78.  v0:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248f7c.  v3:= v13.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248f80.  v8:= lcmp(v0, v6);
  #L248f84.  if v8 <= 0 then goto L248f9c;
  #L248f88.  v3:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L248f8c.  v8:= v3.`okio.Segment.limit` @type ^`int`;
  #L248f90.  v9:= v3.`okio.Segment.pos` @type ^`int`;
  #L248f94.  v8:= v8 - v9 @kind int;
  #L248f96.  v8:= (`long`) v8 @kind i2l;
  #L248f98.  v0:= v0 - v8 @kind long;
  #L248f9a.  goto L248f80;
  #L248f9c.  v8:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248fa0.  v8:= lcmp(v0, v8);
  #L248fa4.  if v8 >= 0 then goto L248ffc;
  #L248fa8.  v8:= v3.`okio.Segment.pos` @type ^`int`;
  #L248fac.  v8:= (`long`) v8 @kind i2l;
  #L248fae.  v8:= v8 + v6 @kind long;
  #L248fb0.  v8:= v8 - v0 @kind long;
  #L248fb2.  v2:= (`int`) v8 @kind l2i;
  #L248fb4.  v8:= v12.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L248fb8.  if v8 == 0 then goto L248fe6;
  #L248fbc.  v8:= v12.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L248fc0.  v9:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L248fc4.  v10:= v3.`okio.Segment.limit` @type ^`int`;
  #L248fc8.  v10:= v10 - v2 @kind int;
  #L248fca.  call `update`(v8, v9, v2, v10) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L248fd0.  v8:= v3.`okio.Segment.limit` @type ^`int`;
  #L248fd4.  v9:= v3.`okio.Segment.pos` @type ^`int`;
  #L248fd8.  v8:= v8 - v9 @kind int;
  #L248fda.  v8:= (`long`) v8 @kind i2l;
  #L248fdc.  v0:= v0 + v8 @kind long;
  #L248fde.  v6:= v0 @kind wide;
  #L248fe0.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L248fe4.  goto L248f9c;
  #L248fe6.  v8:= v12.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` @kind object;
  #L248fea.  v9:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L248fee.  v10:= v3.`okio.Segment.limit` @type ^`int`;
  #L248ff2.  v10:= v10 - v2 @kind int;
  #L248ff4.  call `update`(v8, v9, v2, v10) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L248ffa.  goto L248fd0;
  #L248ffc.  return v4 @kind wide;
}
