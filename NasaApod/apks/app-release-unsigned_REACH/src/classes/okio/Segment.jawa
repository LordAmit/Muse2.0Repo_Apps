record `okio.Segment` @kind class @AccessFlag FINAL {
  `byte`[] `okio.Segment.data` @AccessFlag FINAL;
  `int` `okio.Segment.limit` @AccessFlag ;
  `okio.Segment` `okio.Segment.next` @AccessFlag ;
  `boolean` `okio.Segment.owner` @AccessFlag ;
  `int` `okio.Segment.pos` @AccessFlag ;
  `okio.Segment` `okio.Segment.prev` @AccessFlag ;
  `boolean` `okio.Segment.shared` @AccessFlag ;
}
global `int` `@@okio.Segment.SHARE_MINIMUM` @AccessFlag STATIC_FINAL;
global `int` `@@okio.Segment.SIZE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okio.Segment` v1 @kind this) @signature `Lokio/Segment;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1adb1c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1adb22.  v0:= 8192I;
  #L1adb26.  v0:= new `byte`[v0];
  #L1adb2a.  v1.`okio.Segment.data` @type ^`byte`[] := v0 @kind object;
  #L1adb2e.  v0:= 1I;
  #L1adb30.  v1.`okio.Segment.owner` @type ^`boolean` := v0 @kind boolean;
  #L1adb34.  v0:= 0I;
  #L1adb36.  v1.`okio.Segment.shared` @type ^`boolean` := v0 @kind boolean;
  #L1adb3a.  return @kind void;
}
procedure `void` `<init>`(`okio.Segment` v0 @kind this, `byte`[] v1 @kind object @name `data`, `int` v2 @name `pos`, `int` v3 @name `limit`, `boolean` v4 @name `shared`, `boolean` v5 @name `owner`) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1adb4c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1adb52.  v0.`okio.Segment.data` @type ^`byte`[] := v1 @kind object;
  #L1adb56.  v0.`okio.Segment.pos` @type ^`int` := v2;
  #L1adb5a.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L1adb5e.  v0.`okio.Segment.shared` @type ^`boolean` := v4 @kind boolean;
  #L1adb62.  v0.`okio.Segment.owner` @type ^`boolean` := v5 @kind boolean;
  #L1adb66.  return @kind void;
}
procedure `void` `compact`(`okio.Segment` v4 @kind this) @signature `Lokio/Segment;.compact:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1adb78.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1adb7c.  if v2 != v4 then goto L1adb8c;
  #L1adb80.  v2:= new `java.lang.IllegalStateException`;
  #L1adb84.  call `<init>`(v2) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1adb8a.  throw v2;
  #L1adb8c.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1adb90.  v2:= v2.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L1adb94.  if v2 != 0 then goto L1adb9a;
  #L1adb98.  return @kind void;
  #L1adb9a.  v2:= v4.`okio.Segment.limit` @type ^`int`;
  #L1adb9e.  v3:= v4.`okio.Segment.pos` @type ^`int`;
  #L1adba2.  v1:= v2 - v3 @kind int;
  #L1adba6.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1adbaa.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L1adbae.  v3:= v2 - 8192;
  #L1adbb2.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1adbb6.  v2:= v2.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L1adbba.  if v2 == 0 then goto L1adbe0;
  #L1adbbe.  v2:= 0I;
  #L1adbc0.  v0:= v3 + v2 @kind int;
  #L1adbc4.  if v1 > v0 then goto L1adb98;
  #L1adbc8.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1adbcc.  call `writeTo`(v4, v2, v1) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L1adbd2.  call temp:= `pop`(v4) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1adbd8.  call `recycle`(v4) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1adbde.  goto L1adb98;
  #L1adbe0.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1adbe4.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L1adbe8.  goto L1adbc0;
}
procedure `okio.Segment` `pop`(`okio.Segment` v4 @kind this) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1adbfc.  v1:= 0I;
  #L1adbfe.  v2:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1adc02.  if v2 == v4 then goto L1adc2c;
  #L1adc06.  v0:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1adc0a.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1adc0e.  v3:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1adc12.  v2.`okio.Segment.next` @type ^`okio.Segment` := v3 @kind object;
  #L1adc16.  v2:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1adc1a.  v3:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1adc1e.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v3 @kind object;
  #L1adc22.  v4.`okio.Segment.next` @type ^`okio.Segment` := v1 @kind object;
  #L1adc26.  v4.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L1adc2a.  return v0 @kind object;
  #L1adc2c.  v0:= v1 @kind object;
  #L1adc2e.  goto L1adc0a;
}
procedure `okio.Segment` `push`(`okio.Segment` v1 @kind this, `okio.Segment` v2 @kind object @name `segment`) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1adc40.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L1adc44.  v0:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1adc48.  v2.`okio.Segment.next` @type ^`okio.Segment` := v0 @kind object;
  #L1adc4c.  v0:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1adc50.  v0.`okio.Segment.prev` @type ^`okio.Segment` := v2 @kind object;
  #L1adc54.  v1.`okio.Segment.next` @type ^`okio.Segment` := v2 @kind object;
  #L1adc58.  return v2 @kind object;
}
procedure `okio.Segment` `sharedCopy`(`okio.Segment` v6 @kind this) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1adc6c.  v4:= 1I;
  #L1adc6e.  v6.`okio.Segment.shared` @type ^`boolean` := v4 @kind boolean;
  #L1adc72.  v0:= new `okio.Segment`;
  #L1adc76.  v1:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1adc7a.  v2:= v6.`okio.Segment.pos` @type ^`int`;
  #L1adc7e.  v3:= v6.`okio.Segment.limit` @type ^`int`;
  #L1adc82.  v5:= 0I;
  #L1adc84.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @kind direct;
  #L1adc8a.  return v0 @kind object;
}
procedure `okio.Segment` `split`(`okio.Segment` v5 @kind this, `int` v6 @name `byteCount`) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1adc9c.  if v6 <= 0 then goto L1adcae;
  #L1adca0.  v1:= v5.`okio.Segment.limit` @type ^`int`;
  #L1adca4.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L1adca8.  v1:= v1 - v2 @kind int;
  #L1adcaa.  if v6 <= v1 then goto L1adcba;
  #L1adcae.  v1:= new `java.lang.IllegalArgumentException`;
  #L1adcb2.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1adcb8.  throw v1;
  #L1adcba.  v1:= 1024I;
  #L1adcbe.  if v6 < v1 then goto L1adcea;
  #L1adcc2.  call temp:= `sharedCopy`(v5) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L1adcc8.  v0:= temp @kind object;
  #L1adcca.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1adcce.  v1:= v1 + v6 @kind int;
  #L1adcd0.  v0.`okio.Segment.limit` @type ^`int` := v1;
  #L1adcd4.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L1adcd8.  v1:= v1 + v6 @kind int;
  #L1adcda.  v5.`okio.Segment.pos` @type ^`int` := v1;
  #L1adcde.  v1:= v5.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1adce2.  call temp:= `push`(v1, v0) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1adce8.  return v0 @kind object;
  #L1adcea.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L1adcf0.  v0:= temp @kind object;
  #L1adcf2.  v1:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1adcf6.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L1adcfa.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1adcfe.  v4:= 0I;
  #L1add00.  call `arraycopy`(v1, v2, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1add06.  goto L1adcca;
}
procedure `okio.Segment` `unsharedCopy`(`okio.Segment` v6 @kind this) @signature `Lokio/Segment;.unsharedCopy:()Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1add18.  v0:= new `okio.Segment`;
  #L1add1c.  v1:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1add20.  call temp:= `clone`(v1) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L1add26.  v1:= temp @kind object;
  #L1add28.  v1:= (`byte`[]) v1 @kind object;
  #L1add2c.  v2:= v6.`okio.Segment.pos` @type ^`int`;
  #L1add30.  v3:= v6.`okio.Segment.limit` @type ^`int`;
  #L1add34.  v4:= 0I;
  #L1add36.  v5:= 1I;
  #L1add38.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @kind direct;
  #L1add3e.  return v0 @kind object;
}
procedure `void` `writeTo`(`okio.Segment` v6 @kind this, `okio.Segment` v7 @kind object @name `sink`, `int` v8 @name `byteCount`) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1add50.  v2:= 8192I;
  #L1add54.  v5:= 0I;
  #L1add56.  v0:= v7.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L1add5a.  if v0 != 0 then goto L1add6a;
  #L1add5e.  v0:= new `java.lang.IllegalArgumentException`;
  #L1add62.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1add68.  throw v0;
  #L1add6a.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L1add6e.  v0:= v0 + v8 @kind int;
  #L1add70.  if v0 <= v2 then goto L1addd2;
  #L1add74.  v0:= v7.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L1add78.  if v0 == 0 then goto L1add88;
  #L1add7c.  v0:= new `java.lang.IllegalArgumentException`;
  #L1add80.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1add86.  throw v0;
  #L1add88.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L1add8c.  v0:= v0 + v8 @kind int;
  #L1add8e.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L1add92.  v0:= v0 - v1 @kind int;
  #L1add94.  if v0 <= v2 then goto L1adda4;
  #L1add98.  v0:= new `java.lang.IllegalArgumentException`;
  #L1add9c.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1adda2.  throw v0;
  #L1adda4.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1adda8.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L1addac.  v2:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1addb0.  v3:= v7.`okio.Segment.limit` @type ^`int`;
  #L1addb4.  v4:= v7.`okio.Segment.pos` @type ^`int`;
  #L1addb8.  v3:= v3 - v4 @kind int;
  #L1addba.  call `arraycopy`(v0, v1, v2, v5, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1addc0.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L1addc4.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L1addc8.  v0:= v0 - v1 @kind int;
  #L1addca.  v7.`okio.Segment.limit` @type ^`int` := v0;
  #L1addce.  v7.`okio.Segment.pos` @type ^`int` := v5;
  #L1addd2.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1addd6.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L1addda.  v2:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1addde.  v3:= v7.`okio.Segment.limit` @type ^`int`;
  #L1adde2.  call `arraycopy`(v0, v1, v2, v3, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1adde8.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L1addec.  v0:= v0 + v8 @kind int;
  #L1addee.  v7.`okio.Segment.limit` @type ^`int` := v0;
  #L1addf2.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L1addf6.  v0:= v0 + v8 @kind int;
  #L1addf8.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L1addfc.  return @kind void;
}
