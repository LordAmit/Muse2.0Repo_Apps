record `okio.Buffer` @kind class @AccessFlag PUBLIC_FINAL extends `okio.BufferedSource` @kind interface, `okio.BufferedSink` @kind interface, `java.lang.Cloneable` @kind interface, `java.nio.channels.ByteChannel` @kind interface {
  `okio.Segment` `okio.Buffer.head` @AccessFlag ;
  `long` `okio.Buffer.size` @AccessFlag ;
}
global `byte`[] `@@okio.Buffer.DIGITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okio.Buffer.REPLACEMENT_CHARACTER` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Buffer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L2454a4.  v0:= 16I;
  #L2454a8.  v0:= new `byte`[v0];
  #L2454ac.  goto L2454b8;
  #L2454b2.  `@@okio.Buffer.DIGITS` @type ^`byte`[] := v0 @kind object;
  #L2454b6.  return @kind void;
  #L2454b8.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L2454cf.  goto L2454b2;
}
procedure `void` `<init>`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L2454e0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2454e6.  return @kind void;
}
procedure `okio.ByteString` `digest`(`okio.Buffer` v7 @kind this, `java.lang.String` v8 @kind object @name `algorithm`) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #Try_start0.  
  #L2454f8.  call temp:= `getInstance`(v8) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L2454fe.  v1:= temp @kind object;
  #L245500.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245504.  if v3 == 0 then goto L24555e;
  #L245508.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24550c.  v3:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245510.  v4:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245514.  v4:= v4.`okio.Segment.pos` @type ^`int`;
  #L245518.  v5:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24551c.  v5:= v5.`okio.Segment.limit` @type ^`int`;
  #L245520.  v6:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245524.  v6:= v6.`okio.Segment.pos` @type ^`int`;
  #L245528.  v5:= v5 - v6 @kind int;
  #L24552a.  call `update`(v1, v3, v4, v5) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L245530.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245534.  v2:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245538.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24553c.  if v2 == v3 then goto L24555e;
  #L245540.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245544.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L245548.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L24554c.  v6:= v2.`okio.Segment.pos` @type ^`int`;
  #L245550.  v5:= v5 - v6 @kind int;
  #L245552.  call `update`(v1, v3, v4, v5) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L245558.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24555c.  goto L245538;
  #L24555e.  call temp:= `digest`(v1) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L245564.  v3:= temp @kind object;
  #L245566.  call temp:= `of`(v3) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #Try_end0.  
  #L24556c.  v3:= temp @kind object;
  #L24556e.  return v3 @kind object;
  #L245570.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L245572.  v3:= new `java.lang.AssertionError`;
  #L245576.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L24557c.  throw v3;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L245570;
}
procedure `okio.ByteString` `hmac`(`okio.Buffer` v7 @kind this, `java.lang.String` v8 @kind object @name `algorithm`, `okio.ByteString` v9 @kind object @name `key`) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #Try_start0.  
  #L2455a0.  call temp:= `getInstance`(v8) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L2455a6.  v1:= temp @kind object;
  #L2455a8.  v3:= new `javax.crypto.spec.SecretKeySpec`;
  #L2455ac.  call temp:= `toByteArray`(v9) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L2455b2.  v4:= temp @kind object;
  #L2455b4.  call `<init>`(v3, v4, v8) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L2455ba.  call `init`(v1, v3) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L2455c0.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2455c4.  if v3 == 0 then goto L24561e;
  #L2455c8.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2455cc.  v3:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2455d0.  v4:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2455d4.  v4:= v4.`okio.Segment.pos` @type ^`int`;
  #L2455d8.  v5:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2455dc.  v5:= v5.`okio.Segment.limit` @type ^`int`;
  #L2455e0.  v6:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2455e4.  v6:= v6.`okio.Segment.pos` @type ^`int`;
  #L2455e8.  v5:= v5 - v6 @kind int;
  #L2455ea.  call `update`(v1, v3, v4, v5) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L2455f0.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2455f4.  v2:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2455f8.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2455fc.  if v2 == v3 then goto L24561e;
  #L245600.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245604.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L245608.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L24560c.  v6:= v2.`okio.Segment.pos` @type ^`int`;
  #L245610.  v5:= v5 - v6 @kind int;
  #L245612.  call `update`(v1, v3, v4, v5) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L245618.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24561c.  goto L2455f8;
  #L24561e.  call temp:= `doFinal`(v1) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L245624.  v3:= temp @kind object;
  #L245626.  call temp:= `of`(v3) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #Try_end0.  
  #L24562c.  v3:= temp @kind object;
  #L24562e.  return v3 @kind object;
  #L245630.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L245632.  v3:= new `java.lang.AssertionError`;
  #L245636.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L24563c.  throw v3;
  #L24563e.  v0:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L245640.  v3:= new `java.lang.IllegalArgumentException`;
  #L245644.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L24564a.  throw v3;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L245630;
  catch `java.security.InvalidKeyException` @[Try_start0..Try_end0] goto L24563e;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v5 @kind this, `okio.Segment` v6 @kind object @name `segment`, `int` v7 @name `segmentPos`, `okio.ByteString` v8 @kind object @name `bytes`, `int` v9 @name `bytesOffset`, `int` v10 @name `bytesLimit`) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L24566c.  v2:= v6.`okio.Segment.limit` @type ^`int`;
  #L245670.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245674.  v1:= v9;
  #L245676.  if v1 >= v10 then goto L2456ac;
  #L24567a.  if v7 != v2 then goto L24568e;
  #L24567e.  v6:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245682.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245686.  v7:= v6.`okio.Segment.pos` @type ^`int`;
  #L24568a.  v2:= v6.`okio.Segment.limit` @type ^`int`;
  #L24568e.  v3:= v0[v7] @kind byte;
  #L245692.  call temp:= `getByte`(v8, v1) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L245698.  v4:= temp;
  #L24569a.  if v3 == v4 then goto L2456a2;
  #L24569e.  v3:= 0I;
  #L2456a0.  return v3;
  #L2456a2.  v7:= v7 + 1;
  #L2456a6.  v1:= v1 + 1;
  #L2456aa.  goto L245676;
  #L2456ac.  v3:= 1I;
  #L2456ae.  goto L2456a0;
}
procedure `void` `readFrom`(`okio.Buffer` v8 @kind this, `java.io.InputStream` v9 @kind object @name `in`, `long` v10 @name `byteCount`, `boolean` v12 @name `forever`) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2456c0.  if v9 != 0 then goto L2456ee;
  #L2456c4.  v3:= new `java.lang.IllegalArgumentException`;
  #L2456c8.  v4:= "in == null" @kind object;
  #L2456cc.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2456d2.  throw v3;
  #L2456d4.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L2456d8.  v3:= v3 + v0 @kind int;
  #L2456da.  v2.`okio.Segment.limit` @type ^`int` := v3;
  #L2456de.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2456e2.  v6:= (`long`) v0 @kind i2l;
  #L2456e4.  v4:= v4 + v6 @kind long;
  #L2456e6.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L2456ea.  v4:= (`long`) v0 @kind i2l;
  #L2456ec.  v10:= v10 - v4 @kind long;
  #L2456ee.  v4:= 0L;
  #L2456f2.  v3:= lcmp(v10, v4);
  #L2456f6.  if v3 > 0 then goto L2456fe;
  #L2456fa.  if v12 == 0 then goto L245736;
  #L2456fe.  v3:= 1I;
  #L245700.  call temp:= `writableSegment`(v8, v3) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L245706.  v2:= temp @kind object;
  #L245708.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24570c.  v3:= v3 - 8192;
  #L245710.  v4:= (`long`) v3 @kind i2l;
  #L245712.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L245718.  v4:= temp @kind wide;
  #L24571a.  v1:= (`int`) v4 @kind l2i;
  #L24571c.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245720.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L245724.  call temp:= `read`(v9, v3, v4, v1) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L24572a.  v0:= temp;
  #L24572c.  v3:= -1I;
  #L24572e.  if v0 != v3 then goto L2456d4;
  #L245732.  if v12 == 0 then goto L245738;
  #L245736.  return @kind void;
  #L245738.  v3:= new `java.io.EOFException`;
  #L24573c.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L245742.  throw v3;
}
procedure `okio.Buffer` `buffer`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L245754.  return v0 @kind object;
}
procedure `void` `clear`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L245768.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24576c.  call `skip`(v4, v2) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #Try_end0.  
  #L245772.  return @kind void;
  #L245774.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L245776.  v1:= new `java.lang.AssertionError`;
  #L24577a.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L245780.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L245774;
}
procedure `java.lang.Object` `clone`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2457a4.  call temp:= `clone`(v1) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @kind virtual;
  #L2457aa.  v0:= temp @kind object;
  #L2457ac.  return v0 @kind object;
}
procedure `okio.Buffer` `clone`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2457c0.  v0:= new `okio.Buffer`;
  #L2457c4.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L2457ca.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2457ce.  v4:= 0L;
  #L2457d2.  v2:= lcmp(v2, v4);
  #L2457d6.  if v2 != 0 then goto L2457dc;
  #L2457da.  return v0 @kind object;
  #L2457dc.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2457e0.  call temp:= `sharedCopy`(v2) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L2457e6.  v2:= temp @kind object;
  #L2457e8.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L2457ec.  v2:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2457f0.  v3:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2457f4.  v4:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2457f8.  v3.`okio.Segment.prev` @type ^`okio.Segment` := v4 @kind object;
  #L2457fc.  v2.`okio.Segment.next` @type ^`okio.Segment` := v4 @kind object;
  #L245800.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245804.  v1:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245808.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24580c.  if v1 == v2 then goto L24582c;
  #L245810.  v2:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245814.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L245818.  call temp:= `sharedCopy`(v1) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L24581e.  v3:= temp @kind object;
  #L245820.  call temp:= `push`(v2, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L245826.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24582a.  goto L245808;
  #L24582c.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245830.  v0.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L245834.  goto L2457da;
}
procedure `void` `close`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L245848.  return @kind void;
}
procedure `long` `completeSegmentByteCount`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24585c.  v4:= 0L;
  #L245860.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245864.  v3:= lcmp(v0, v4);
  #L245868.  if v3 != 0 then goto L24586e;
  #L24586c.  return v4 @kind wide;
  #L24586e.  v3:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245872.  v2:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L245876.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24587a.  v4:= 8192I;
  #L24587e.  if v3 >= v4 then goto L245898;
  #L245882.  v3:= v2.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L245886.  if v3 == 0 then goto L245898;
  #L24588a.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24588e.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L245892.  v3:= v3 - v4 @kind int;
  #L245894.  v4:= (`long`) v3 @kind i2l;
  #L245896.  v0:= v0 - v4 @kind long;
  #L245898.  v4:= v0 @kind wide;
  #L24589a.  goto L24586c;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v6 @kind this, `java.io.OutputStream` v7 @kind object @name `out`) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2458ac.  v2:= 0L;
  #L2458b0.  v4:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2458b4.  v0:= v6 @kind object;
  #L2458b6.  v1:= v7 @kind object;
  #L2458b8.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @kind virtual;
  #L2458be.  v0:= temp @kind object;
  #L2458c0.  return v0 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v10 @kind this, `java.io.OutputStream` v11 @kind object @name `out`, `long` v12 @name `offset`, `long` v14 @name `byteCount`) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2458d4.  if v11 != 0 then goto L2458e8;
  #L2458d8.  v0:= new `java.lang.IllegalArgumentException`;
  #L2458dc.  v1:= "out == null" @kind object;
  #L2458e0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2458e6.  throw v0;
  #L2458e8.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2458ec.  v2:= v12 @kind wide;
  #L2458ee.  v4:= v14 @kind wide;
  #L2458f0.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2458f6.  v0:= 0L;
  #L2458fa.  v0:= lcmp(v14, v0);
  #L2458fe.  if v0 != 0 then goto L245904;
  #L245902.  return v10 @kind object;
  #L245904.  v7:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245908.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L24590c.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L245910.  v0:= v0 - v1 @kind int;
  #L245912.  v0:= (`long`) v0 @kind i2l;
  #L245914.  v0:= lcmp(v12, v0);
  #L245918.  if v0 < 0 then goto L245930;
  #L24591c.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L245920.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L245924.  v0:= v0 - v1 @kind int;
  #L245926.  v0:= (`long`) v0 @kind i2l;
  #L245928.  v12:= v12 - v0 @kind long;
  #L24592a.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24592e.  goto L245908;
  #L245930.  v0:= 0L;
  #L245934.  v0:= lcmp(v14, v0);
  #L245938.  if v0 <= 0 then goto L245902;
  #L24593c.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L245940.  v0:= (`long`) v0 @kind i2l;
  #L245942.  v0:= v0 + v12 @kind long;
  #L245944.  v6:= (`int`) v0 @kind l2i;
  #L245946.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L24594a.  v0:= v0 - v6 @kind int;
  #L24594c.  v0:= (`long`) v0 @kind i2l;
  #L24594e.  call temp:= `min`(v0, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L245954.  v0:= temp @kind wide;
  #L245956.  v8:= (`int`) v0 @kind l2i;
  #L245958.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24595c.  call `write`(v11, v0, v6, v8) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L245962.  v0:= (`long`) v8 @kind i2l;
  #L245964.  v14:= v14 - v0 @kind long;
  #L245966.  v12:= 0L;
  #L24596a.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24596e.  goto L245930;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v10 @kind this, `okio.Buffer` v11 @kind object @name `out`, `long` v12 @name `offset`, `long` v14 @name `byteCount`) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L245980.  v8:= 0L;
  #L245984.  if v11 != 0 then goto L245998;
  #L245988.  v0:= new `java.lang.IllegalArgumentException`;
  #L24598c.  v1:= "out == null" @kind object;
  #L245990.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L245996.  throw v0;
  #L245998.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24599c.  v2:= v12 @kind wide;
  #L24599e.  v4:= v14 @kind wide;
  #L2459a0.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2459a6.  v0:= lcmp(v14, v8);
  #L2459aa.  if v0 != 0 then goto L2459b0;
  #L2459ae.  return v10 @kind object;
  #L2459b0.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2459b4.  v0:= v0 + v14 @kind long;
  #L2459b6.  v11.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L2459ba.  v7:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2459be.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L2459c2.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L2459c6.  v0:= v0 - v1 @kind int;
  #L2459c8.  v0:= (`long`) v0 @kind i2l;
  #L2459ca.  v0:= lcmp(v12, v0);
  #L2459ce.  if v0 < 0 then goto L2459e6;
  #L2459d2.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L2459d6.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L2459da.  v0:= v0 - v1 @kind int;
  #L2459dc.  v0:= (`long`) v0 @kind i2l;
  #L2459de.  v12:= v12 - v0 @kind long;
  #L2459e0.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2459e4.  goto L2459be;
  #L2459e6.  v0:= lcmp(v14, v8);
  #L2459ea.  if v0 <= 0 then goto L2459ae;
  #L2459ee.  call temp:= `sharedCopy`(v7) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L2459f4.  v6:= temp @kind object;
  #L2459f6.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L2459fa.  v0:= (`long`) v0 @kind i2l;
  #L2459fc.  v0:= v0 + v12 @kind long;
  #L2459fe.  v0:= (`int`) v0 @kind l2i;
  #L245a00.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L245a04.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L245a08.  v1:= (`int`) v14 @kind l2i;
  #L245a0a.  v0:= v0 + v1 @kind int;
  #L245a0c.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L245a10.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L245a16.  v0:= temp;
  #L245a18.  v6.`okio.Segment.limit` @type ^`int` := v0;
  #L245a1c.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245a20.  if v0 != 0 then goto L245a48;
  #L245a24.  v6.`okio.Segment.prev` @type ^`okio.Segment` := v6 @kind object;
  #L245a28.  v6.`okio.Segment.next` @type ^`okio.Segment` := v6 @kind object;
  #L245a2c.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L245a30.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L245a34.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L245a38.  v0:= v0 - v1 @kind int;
  #L245a3a.  v0:= (`long`) v0 @kind i2l;
  #L245a3c.  v14:= v14 - v0 @kind long;
  #L245a3e.  v12:= 0L;
  #L245a42.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245a46.  goto L2459e6;
  #L245a48.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245a4c.  v0:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L245a50.  call temp:= `push`(v0, v6) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L245a56.  goto L245a30;
}
procedure `okio.BufferedSink` `emit`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;

  #L245a68.  return v0 @kind object;
}
procedure `okio.Buffer` `emitCompleteSegments`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L245a7c.  return v0 @kind object;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L245a90.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @kind virtual;
  #L245a96.  v0:= temp @kind object;
  #L245a98.  return v0 @kind object;
}
procedure `boolean` `equals`(`okio.Buffer` v18 @kind this, `java.lang.Object` v19 @kind object @name `o`) @signature `Lokio/Buffer;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L245aac.  v0:= v18 @kind object;
  #L245ab0.  v1:= v19 @kind object;
  #L245ab4.  if v0 != v1 then goto L245abc;
  #L245ab8.  v14:= 1I;
  #L245aba.  return v14;
  #L245abc.  v0:= v19 @kind object;
  #L245ac0.  v14:= instanceof @variable v0 @type ^`okio.Buffer` @kind boolean;
  #L245ac4.  if v14 != 0 then goto L245acc;
  #L245ac8.  v14:= 0I;
  #L245aca.  goto L245aba;
  #L245acc.  v13:= v19 @kind object;
  #L245ad0.  v13:= (`okio.Buffer`) v13 @kind object;
  #L245ad4.  v0:= v18 @kind object;
  #L245ad8.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245adc.  v0:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245ae0.  v16:= v0 @kind wide;
  #L245ae4.  v14:= lcmp(v14, v16);
  #L245ae8.  if v14 == 0 then goto L245af0;
  #L245aec.  v14:= 0I;
  #L245aee.  goto L245aba;
  #L245af0.  v0:= v18 @kind object;
  #L245af4.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245af8.  v16:= 0L;
  #L245afc.  v14:= lcmp(v14, v16);
  #L245b00.  if v14 != 0 then goto L245b08;
  #L245b04.  v14:= 1I;
  #L245b06.  goto L245aba;
  #L245b08.  v0:= v18 @kind object;
  #L245b0c.  v11:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245b10.  v12:= v13.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245b14.  v5:= v11.`okio.Segment.pos` @type ^`int`;
  #L245b18.  v9:= v12.`okio.Segment.pos` @type ^`int`;
  #L245b1c.  v6:= 0L;
  #L245b20.  v0:= v18 @kind object;
  #L245b24.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245b28.  v14:= lcmp(v6, v14);
  #L245b2c.  if v14 >= 0 then goto L245ba4;
  #L245b30.  v14:= v11.`okio.Segment.limit` @type ^`int`;
  #L245b34.  v14:= v14 - v5 @kind int;
  #L245b36.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L245b3a.  v15:= v15 - v9 @kind int;
  #L245b3c.  call temp:= `min`(v14, v15) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L245b42.  v14:= temp;
  #L245b44.  v2:= (`long`) v14 @kind i2l;
  #L245b46.  v4:= 0I;
  #L245b48.  v10:= v9;
  #L245b4a.  v8:= v5;
  #L245b4c.  v14:= (`long`) v4 @kind i2l;
  #L245b4e.  v14:= lcmp(v14, v2);
  #L245b52.  if v14 >= 0 then goto L245b80;
  #L245b56.  v14:= v11.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245b5a.  v5:= v8 + 1;
  #L245b5e.  v14:= v14[v8] @kind byte;
  #L245b62.  v15:= v12.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245b66.  v9:= v10 + 1;
  #L245b6a.  v15:= v15[v10] @kind byte;
  #L245b6e.  if v14 == v15 then goto L245b76;
  #L245b72.  v14:= 0I;
  #L245b74.  goto L245aba;
  #L245b76.  v4:= v4 + 1;
  #L245b7a.  v10:= v9;
  #L245b7c.  v8:= v5;
  #L245b7e.  goto L245b4c;
  #L245b80.  v14:= v11.`okio.Segment.limit` @type ^`int`;
  #L245b84.  if v8 != v14 then goto L245bac;
  #L245b88.  v11:= v11.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245b8c.  v5:= v11.`okio.Segment.pos` @type ^`int`;
  #L245b90.  v14:= v12.`okio.Segment.limit` @type ^`int`;
  #L245b94.  if v10 != v14 then goto L245ba8;
  #L245b98.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245b9c.  v9:= v12.`okio.Segment.pos` @type ^`int`;
  #L245ba0.  v6:= v6 + v2 @kind long;
  #L245ba2.  goto L245b20;
  #L245ba4.  v14:= 1I;
  #L245ba6.  goto L245aba;
  #L245ba8.  v9:= v10;
  #L245baa.  goto L245ba0;
  #L245bac.  v5:= v8;
  #L245bae.  goto L245b90;
}
procedure `boolean` `exhausted`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.exhausted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L245bc0.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245bc4.  v2:= 0L;
  #L245bc8.  v0:= lcmp(v0, v2);
  #L245bcc.  if v0 != 0 then goto L245bd4;
  #L245bd0.  v0:= 1I;
  #L245bd2.  return v0;
  #L245bd4.  v0:= 0I;
  #L245bd6.  goto L245bd2;
}
procedure `void` `flush`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L245be8.  return @kind void;
}
procedure `byte` `getByte`(`okio.Buffer` v9 @kind this, `long` v10 @name `pos`) @signature `Lokio/Buffer;.getByte:(J)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L245bfc.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245c00.  v4:= 1L;
  #L245c04.  v2:= v10 @kind wide;
  #L245c06.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L245c0c.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245c10.  v0:= v0 - v10 @kind long;
  #L245c12.  v0:= lcmp(v0, v10);
  #L245c16.  if v0 <= 0 then goto L245c50;
  #L245c1a.  v6:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245c1e.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L245c22.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L245c26.  v7:= v0 - v1 @kind int;
  #L245c2a.  v0:= (`long`) v7 @kind i2l;
  #L245c2c.  v0:= lcmp(v10, v0);
  #L245c30.  if v0 >= 0 then goto L245c46;
  #L245c34.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245c38.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L245c3c.  v2:= (`int`) v10 @kind l2i;
  #L245c3e.  v1:= v1 + v2 @kind int;
  #L245c40.  v0:= v0[v1] @kind byte;
  #L245c44.  return v0;
  #L245c46.  v0:= (`long`) v7 @kind i2l;
  #L245c48.  v10:= v10 - v0 @kind long;
  #L245c4a.  v6:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245c4e.  goto L245c1e;
  #L245c50.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245c54.  v10:= v10 - v0 @kind long;
  #L245c56.  v0:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245c5a.  v6:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L245c5e.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L245c62.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L245c66.  v0:= v0 - v1 @kind int;
  #L245c68.  v0:= (`long`) v0 @kind i2l;
  #L245c6a.  v10:= v10 + v0 @kind long;
  #L245c6c.  v0:= 0L;
  #L245c70.  v0:= lcmp(v10, v0);
  #L245c74.  if v0 < 0 then goto L245c8a;
  #L245c78.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245c7c.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L245c80.  v2:= (`int`) v10 @kind l2i;
  #L245c82.  v1:= v1 + v2 @kind int;
  #L245c84.  v0:= v0[v1] @kind byte;
  #L245c88.  goto L245c44;
  #L245c8a.  v6:= v6.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L245c8e.  goto L245c5e;
}
procedure `int` `hashCode`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L245ca0.  v3:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245ca4.  if v3 != 0 then goto L245cac;
  #L245ca8.  v2:= 0I;
  #L245caa.  return v2;
  #L245cac.  v2:= 1I;
  #L245cae.  v1:= v3.`okio.Segment.pos` @type ^`int`;
  #L245cb2.  v0:= v3.`okio.Segment.limit` @type ^`int`;
  #L245cb6.  if v1 >= v0 then goto L245cd0;
  #L245cba.  v4:= v2 * 31;
  #L245cbe.  v5:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245cc2.  v5:= v5[v1] @kind byte;
  #L245cc6.  v2:= v4 + v5 @kind int;
  #L245cca.  v1:= v1 + 1;
  #L245cce.  goto L245cb6;
  #L245cd0.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245cd4.  v4:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245cd8.  if v3 != v4 then goto L245cae;
  #L245cdc.  goto L245caa;
}
procedure `okio.ByteString` `hmacSha1`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object @name `key`) @signature `Lokio/Buffer;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L245cf0.  v0:= "HmacSHA1" @kind object;
  #L245cf4.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L245cfa.  v0:= temp @kind object;
  #L245cfc.  return v0 @kind object;
}
procedure `okio.ByteString` `hmacSha256`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object @name `key`) @signature `Lokio/Buffer;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L245d10.  v0:= "HmacSHA256" @kind object;
  #L245d14.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L245d1a.  v0:= temp @kind object;
  #L245d1c.  return v0 @kind object;
}
procedure `okio.ByteString` `hmacSha512`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object @name `key`) @signature `Lokio/Buffer;.hmacSha512:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L245d30.  v0:= "HmacSHA512" @kind object;
  #L245d34.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L245d3a.  v0:= temp @kind object;
  #L245d3c.  return v0 @kind object;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 @name `b`) @signature `Lokio/Buffer;.indexOf:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L245d50.  v2:= 0L;
  #L245d54.  v4:= 9223372036854775807L;
  #L245d5e.  v0:= v6 @kind object;
  #L245d60.  v1:= v7;
  #L245d62.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L245d68.  v0:= temp @kind wide;
  #L245d6a.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 @name `b`, `long` v8 @name `fromIndex`) @signature `Lokio/Buffer;.indexOf:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L245d7c.  v4:= 9223372036854775807L;
  #L245d86.  v0:= v6 @kind object;
  #L245d88.  v1:= v7;
  #L245d8a.  v2:= v8 @kind wide;
  #L245d8c.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L245d92.  v0:= temp @kind wide;
  #L245d94.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v16 @kind this, `byte` v17 @name `b`, `long` v18 @name `fromIndex`, `long` v20 @name `toIndex`) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L245da8.  v10:= 0L;
  #L245dac.  v10:= lcmp(v18, v10);
  #L245db0.  if v10 < 0 then goto L245dbc;
  #L245db4.  v10:= lcmp(v20, v18);
  #L245db8.  if v10 >= 0 then goto L245e0c;
  #L245dbc.  v10:= new `java.lang.IllegalArgumentException`;
  #L245dc0.  v11:= "size=%s fromIndex=%s toIndex=%s" @kind object;
  #L245dc4.  v12:= 3I;
  #L245dc6.  v12:= new `java.lang.Object`[v12];
  #L245dca.  v13:= 0I;
  #L245dcc.  v0:= v16 @kind object;
  #L245dd0.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245dd4.  call temp:= `valueOf`(v14) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L245dda.  v14:= temp @kind object;
  #L245ddc.  v12[v13]:= v14 @kind object;
  #L245de0.  v13:= 1I;
  #L245de2.  call temp:= `valueOf`(v18) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L245de8.  v14:= temp @kind object;
  #L245dea.  v12[v13]:= v14 @kind object;
  #L245dee.  v13:= 2I;
  #L245df0.  call temp:= `valueOf`(v20) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L245df6.  v14:= temp @kind object;
  #L245df8.  v12[v13]:= v14 @kind object;
  #L245dfc.  call temp:= `format`(v11, v12) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L245e02.  v11:= temp @kind object;
  #L245e04.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L245e0a.  throw v10;
  #L245e0c.  v0:= v16 @kind object;
  #L245e10.  v10:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245e14.  v10:= lcmp(v20, v10);
  #L245e18.  if v10 <= 0 then goto L245e28;
  #L245e1c.  v0:= v16 @kind object;
  #L245e20.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245e24.  v20:= v0 @kind wide;
  #L245e28.  v10:= lcmp(v18, v20);
  #L245e2c.  if v10 != 0 then goto L245e36;
  #L245e30.  v10:= -1L;
  #L245e34.  return v10 @kind wide;
  #L245e36.  v0:= v16 @kind object;
  #L245e3a.  v9:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245e3e.  if v9 != 0 then goto L245e48;
  #L245e42.  v10:= -1L;
  #L245e46.  goto L245e34;
  #L245e48.  v0:= v16 @kind object;
  #L245e4c.  v10:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245e50.  v10:= v10 - v18 @kind long;
  #L245e54.  v10:= lcmp(v10, v18);
  #L245e58.  if v10 >= 0 then goto L245e80;
  #L245e5c.  v0:= v16 @kind object;
  #L245e60.  v6:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245e64.  v10:= lcmp(v6, v18);
  #L245e68.  if v10 <= 0 then goto L245eba;
  #L245e6c.  v9:= v9.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L245e70.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L245e74.  v11:= v9.`okio.Segment.pos` @type ^`int`;
  #L245e78.  v10:= v10 - v11 @kind int;
  #L245e7a.  v10:= (`long`) v10 @kind i2l;
  #L245e7c.  v6:= v6 - v10 @kind long;
  #L245e7e.  goto L245e64;
  #L245e80.  v6:= 0L;
  #L245e84.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L245e88.  v11:= v9.`okio.Segment.pos` @type ^`int`;
  #L245e8c.  v10:= v10 - v11 @kind int;
  #L245e8e.  v10:= (`long`) v10 @kind i2l;
  #L245e90.  v4:= v6 + v10 @kind long;
  #L245e94.  v10:= lcmp(v4, v18);
  #L245e98.  if v10 >= 0 then goto L245eba;
  #L245e9c.  v9:= v9.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245ea0.  v6:= v4 @kind wide;
  #L245ea2.  goto L245e84;
  #L245ea4.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L245ea8.  v11:= v9.`okio.Segment.pos` @type ^`int`;
  #L245eac.  v10:= v10 - v11 @kind int;
  #L245eae.  v10:= (`long`) v10 @kind i2l;
  #L245eb0.  v6:= v6 + v10 @kind long;
  #L245eb2.  v18:= v6 @kind wide;
  #L245eb6.  v9:= v9.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245eba.  v10:= lcmp(v6, v20);
  #L245ebe.  if v10 >= 0 then goto L245f14;
  #L245ec2.  v2:= v9.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L245ec6.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L245eca.  v10:= (`long`) v10 @kind i2l;
  #L245ecc.  v12:= v9.`okio.Segment.pos` @type ^`int`;
  #L245ed0.  v12:= (`long`) v12 @kind i2l;
  #L245ed2.  v12:= v12 + v20 @kind long;
  #L245ed6.  v12:= v12 - v6 @kind long;
  #L245ed8.  call temp:= `min`(v10, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L245ede.  v10:= temp @kind wide;
  #L245ee0.  v3:= (`int`) v10 @kind l2i;
  #L245ee2.  v10:= v9.`okio.Segment.pos` @type ^`int`;
  #L245ee6.  v10:= (`long`) v10 @kind i2l;
  #L245ee8.  v10:= v10 + v18 @kind long;
  #L245eec.  v10:= v10 - v6 @kind long;
  #L245eee.  v8:= (`int`) v10 @kind l2i;
  #L245ef0.  if v8 >= v3 then goto L245ea4;
  #L245ef4.  v10:= v2[v8] @kind byte;
  #L245ef8.  v0:= v17;
  #L245efc.  if v10 != v0 then goto L245f0e;
  #L245f00.  v10:= v9.`okio.Segment.pos` @type ^`int`;
  #L245f04.  v10:= v8 - v10 @kind int;
  #L245f08.  v10:= (`long`) v10 @kind i2l;
  #L245f0a.  v10:= v10 + v6 @kind long;
  #L245f0c.  goto L245e34;
  #L245f0e.  v8:= v8 + 1;
  #L245f12.  goto L245ef0;
  #L245f14.  v10:= -1L;
  #L245f18.  goto L245e34;
}
procedure `long` `indexOf`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object @name `bytes`) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L245f2c.  v0:= 0L;
  #L245f30.  call temp:= `indexOf`(v2, v3, v0) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @kind virtual;
  #L245f36.  v0:= temp @kind wide;
  #L245f38.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v20 @kind this, `okio.ByteString` v21 @kind object @name `bytes`, `long` v22 @name `fromIndex`) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L245f4c.  call temp:= `size`(v21) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L245f52.  v2:= temp;
  #L245f54.  if v2 != 0 then goto L245f68;
  #L245f58.  v2:= new `java.lang.IllegalArgumentException`;
  #L245f5c.  v4:= "bytes is empty" @kind object;
  #L245f60.  call `<init>`(v2, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L245f66.  throw v2;
  #L245f68.  v4:= 0L;
  #L245f6c.  v2:= lcmp(v22, v4);
  #L245f70.  if v2 >= 0 then goto L245f84;
  #L245f74.  v2:= new `java.lang.IllegalArgumentException`;
  #L245f78.  v4:= "fromIndex < 0" @kind object;
  #L245f7c.  call `<init>`(v2, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L245f82.  throw v2;
  #L245f84.  v0:= v20 @kind object;
  #L245f88.  v3:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L245f8c.  if v3 != 0 then goto L245f96;
  #L245f90.  v4:= -1L;
  #L245f94.  return v4 @kind wide;
  #L245f96.  v0:= v20 @kind object;
  #L245f9a.  v4:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245f9e.  v4:= v4 - v22 @kind long;
  #L245fa2.  v2:= lcmp(v4, v22);
  #L245fa6.  if v2 >= 0 then goto L245fce;
  #L245faa.  v0:= v20 @kind object;
  #L245fae.  v12:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L245fb2.  v2:= lcmp(v12, v22);
  #L245fb6.  if v2 <= 0 then goto L245ff2;
  #L245fba.  v3:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L245fbe.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L245fc2.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L245fc6.  v2:= v2 - v4 @kind int;
  #L245fc8.  v4:= (`long`) v2 @kind i2l;
  #L245fca.  v12:= v12 - v4 @kind long;
  #L245fcc.  goto L245fb2;
  #L245fce.  v12:= 0L;
  #L245fd2.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L245fd6.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L245fda.  v2:= v2 - v4 @kind int;
  #L245fdc.  v4:= (`long`) v2 @kind i2l;
  #L245fde.  v10:= v12 + v4 @kind long;
  #L245fe2.  v2:= lcmp(v10, v22);
  #L245fe6.  if v2 >= 0 then goto L245ff2;
  #L245fea.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L245fee.  v12:= v10 @kind wide;
  #L245ff0.  goto L245fd2;
  #L245ff2.  v2:= 0I;
  #L245ff4.  v0:= v21 @kind object;
  #L245ff8.  call temp:= `getByte`(v0, v2) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L245ffe.  v8:= temp;
  #L246000.  call temp:= `size`(v21) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L246006.  v7:= temp;
  #L246008.  v0:= v20 @kind object;
  #L24600c.  v4:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246010.  v0:= (`long`) v7 @kind i2l;
  #L246012.  v18:= v0 @kind wide;
  #L246016.  v4:= v4 - v18 @kind long;
  #L24601a.  v18:= 1L;
  #L24601e.  v16:= v4 + v18 @kind long;
  #L246022.  v2:= lcmp(v12, v16);
  #L246026.  if v2 >= 0 then goto L2460b4;
  #L24602a.  v9:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24602e.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L246032.  v4:= (`long`) v2 @kind i2l;
  #L246034.  v2:= v3.`okio.Segment.pos` @type ^`int`;
  #L246038.  v0:= (`long`) v2 @kind i2l;
  #L24603a.  v18:= v0 @kind wide;
  #L24603e.  v18:= v18 + v16 @kind long;
  #L246042.  v18:= v18 - v12 @kind long;
  #L246046.  v0:= v18 @kind wide;
  #L24604a.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L246050.  v4:= temp @kind wide;
  #L246052.  v15:= (`int`) v4 @kind l2i;
  #L246054.  v2:= v3.`okio.Segment.pos` @type ^`int`;
  #L246058.  v4:= (`long`) v2 @kind i2l;
  #L24605a.  v4:= v4 + v22 @kind long;
  #L24605e.  v4:= v4 - v12 @kind long;
  #L246060.  v14:= (`int`) v4 @kind l2i;
  #L246062.  if v14 >= v15 then goto L24609c;
  #L246066.  v2:= v9[v14] @kind byte;
  #L24606a.  if v2 != v8 then goto L246096;
  #L24606e.  v4:= v14 + 1;
  #L246072.  v6:= 1I;
  #L246074.  v2:= v20 @kind object;
  #L246078.  v5:= v21 @kind object;
  #L24607c.  call temp:= `rangeEquals`(v2, v3, v4, v5, v6, v7) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L246082.  v2:= temp;
  #L246084.  if v2 == 0 then goto L246096;
  #L246088.  v2:= v3.`okio.Segment.pos` @type ^`int`;
  #L24608c.  v2:= v14 - v2 @kind int;
  #L246090.  v4:= (`long`) v2 @kind i2l;
  #L246092.  v4:= v4 + v12 @kind long;
  #L246094.  goto L245f94;
  #L246096.  v14:= v14 + 1;
  #L24609a.  goto L246062;
  #L24609c.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L2460a0.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L2460a4.  v2:= v2 - v4 @kind int;
  #L2460a6.  v4:= (`long`) v2 @kind i2l;
  #L2460a8.  v12:= v12 + v4 @kind long;
  #L2460aa.  v22:= v12 @kind wide;
  #L2460ae.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2460b2.  goto L246022;
  #L2460b4.  v4:= -1L;
  #L2460b8.  goto L245f94;
}
procedure `long` `indexOfElement`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object @name `targetBytes`) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2460cc.  v0:= 0L;
  #L2460d0.  call temp:= `indexOfElement`(v2, v3, v0) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @kind virtual;
  #L2460d6.  v0:= temp @kind wide;
  #L2460d8.  return v0 @kind wide;
}
procedure `long` `indexOfElement`(`okio.Buffer` v18 @kind this, `okio.ByteString` v19 @kind object @name `targetBytes`, `long` v20 @name `fromIndex`) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L2460ec.  v16:= 0L;
  #L2460f0.  v15:= lcmp(v20, v16);
  #L2460f4.  if v15 >= 0 then goto L246108;
  #L2460f8.  v15:= new `java.lang.IllegalArgumentException`;
  #L2460fc.  v16:= "fromIndex < 0" @kind object;
  #L246100.  call `<init>`(v15, v16) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246106.  throw v15;
  #L246108.  v0:= v18 @kind object;
  #L24610c.  v12:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246110.  if v12 != 0 then goto L24611a;
  #L246114.  v16:= -1L;
  #L246118.  return v16 @kind wide;
  #L24611a.  v0:= v18 @kind object;
  #L24611e.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246122.  v16:= v0 @kind wide;
  #L246126.  v16:= v16 - v20 @kind long;
  #L24612a.  v15:= lcmp(v16, v20);
  #L24612e.  if v15 >= 0 then goto L246162;
  #L246132.  v0:= v18 @kind object;
  #L246136.  v10:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24613a.  v15:= lcmp(v10, v20);
  #L24613e.  if v15 <= 0 then goto L246190;
  #L246142.  v12:= v12.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L246146.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L24614a.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L24614e.  v16:= v0;
  #L246152.  v15:= v15 - v16 @kind int;
  #L246156.  v0:= (`long`) v15 @kind i2l;
  #L246158.  v16:= v0 @kind wide;
  #L24615c.  v10:= v10 - v16 @kind long;
  #L246160.  goto L24613a;
  #L246162.  v10:= 0L;
  #L246166.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L24616a.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L24616e.  v16:= v0;
  #L246172.  v15:= v15 - v16 @kind int;
  #L246176.  v0:= (`long`) v15 @kind i2l;
  #L246178.  v16:= v0 @kind wide;
  #L24617c.  v8:= v10 + v16 @kind long;
  #L246180.  v15:= lcmp(v8, v20);
  #L246184.  if v15 >= 0 then goto L246190;
  #L246188.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24618c.  v10:= v8 @kind wide;
  #L24618e.  goto L246166;
  #L246190.  call temp:= `size`(v19) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L246196.  v15:= temp;
  #L246198.  v16:= 2I;
  #L24619c.  v0:= v16;
  #L2461a0.  if v15 != v0 then goto L246242;
  #L2461a4.  v15:= 0I;
  #L2461a6.  v0:= v19 @kind object;
  #L2461aa.  call temp:= `getByte`(v0, v15) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L2461b0.  v3:= temp;
  #L2461b2.  v15:= 1I;
  #L2461b4.  v0:= v19 @kind object;
  #L2461b8.  call temp:= `getByte`(v0, v15) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L2461be.  v4:= temp;
  #L2461c0.  v0:= v18 @kind object;
  #L2461c4.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2461c8.  v16:= v0 @kind wide;
  #L2461cc.  v15:= lcmp(v10, v16);
  #L2461d0.  if v15 >= 0 then goto L2462e4;
  #L2461d4.  v5:= v12.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2461d8.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L2461dc.  v0:= (`long`) v15 @kind i2l;
  #L2461de.  v16:= v0 @kind wide;
  #L2461e2.  v16:= v16 + v20 @kind long;
  #L2461e6.  v16:= v16 - v10 @kind long;
  #L2461ea.  v0:= v16 @kind wide;
  #L2461ee.  v7:= (`int`) v0 @kind l2i;
  #L2461f0.  v6:= v12.`okio.Segment.limit` @type ^`int`;
  #L2461f4.  if v7 >= v6 then goto L24621e;
  #L2461f8.  v2:= v5[v7] @kind byte;
  #L2461fc.  if v2 == v3 then goto L246204;
  #L246200.  if v2 != v4 then goto L246218;
  #L246204.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L246208.  v15:= v7 - v15 @kind int;
  #L24620c.  v0:= (`long`) v15 @kind i2l;
  #L24620e.  v16:= v0 @kind wide;
  #L246212.  v16:= v16 + v10 @kind long;
  #L246216.  goto L246118;
  #L246218.  v7:= v7 + 1;
  #L24621c.  goto L2461f4;
  #L24621e.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L246222.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L246226.  v16:= v0;
  #L24622a.  v15:= v15 - v16 @kind int;
  #L24622e.  v0:= (`long`) v15 @kind i2l;
  #L246230.  v16:= v0 @kind wide;
  #L246234.  v10:= v10 + v16 @kind long;
  #L246238.  v20:= v10 @kind wide;
  #L24623c.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L246240.  goto L2461c0;
  #L246242.  call temp:= `internalArray`(v19) @signature `Lokio/ByteString;.internalArray:()[B` @kind virtual;
  #L246248.  v14:= temp @kind object;
  #L24624a.  v0:= v18 @kind object;
  #L24624e.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246252.  v16:= v0 @kind wide;
  #L246256.  v15:= lcmp(v10, v16);
  #L24625a.  if v15 >= 0 then goto L2462e4;
  #L24625e.  v5:= v12.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246262.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L246266.  v0:= (`long`) v15 @kind i2l;
  #L246268.  v16:= v0 @kind wide;
  #L24626c.  v16:= v16 + v20 @kind long;
  #L246270.  v16:= v16 - v10 @kind long;
  #L246274.  v0:= v16 @kind wide;
  #L246278.  v7:= (`int`) v0 @kind l2i;
  #L24627a.  v6:= v12.`okio.Segment.limit` @type ^`int`;
  #L24627e.  if v7 >= v6 then goto L2462c0;
  #L246282.  v2:= v5[v7] @kind byte;
  #L246286.  v0:= length @variable v14;
  #L246288.  v16:= v0;
  #L24628c.  v15:= 0I;
  #L24628e.  v0:= v16;
  #L246292.  if v15 >= v0 then goto L2462ba;
  #L246296.  v13:= v14[v15] @kind byte;
  #L24629a.  if v2 != v13 then goto L2462b4;
  #L24629e.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L2462a2.  v15:= v7 - v15 @kind int;
  #L2462a6.  v0:= (`long`) v15 @kind i2l;
  #L2462a8.  v16:= v0 @kind wide;
  #L2462ac.  v16:= v16 + v10 @kind long;
  #L2462b0.  goto L246118;
  #L2462b4.  v15:= v15 + 1;
  #L2462b8.  goto L24628e;
  #L2462ba.  v7:= v7 + 1;
  #L2462be.  goto L24627e;
  #L2462c0.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L2462c4.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L2462c8.  v16:= v0;
  #L2462cc.  v15:= v15 - v16 @kind int;
  #L2462d0.  v0:= (`long`) v15 @kind i2l;
  #L2462d2.  v16:= v0 @kind wide;
  #L2462d6.  v10:= v10 + v16 @kind long;
  #L2462da.  v20:= v10 @kind wide;
  #L2462de.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2462e2.  goto L24624a;
  #L2462e4.  v16:= -1L;
  #L2462e8.  goto L246118;
}
procedure `java.io.InputStream` `inputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.inputStream:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2462fc.  v0:= new `okio.Buffer$2`;
  #L246300.  call `<init>`(v0, v1) @signature `Lokio/Buffer$2;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L246306.  return v0 @kind object;
}
procedure `boolean` `isOpen`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L246318.  v0:= 1I;
  #L24631a.  return v0;
}
procedure `okio.ByteString` `md5`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.md5:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24632c.  v0:= "MD5" @kind object;
  #L246330.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L246336.  v0:= temp @kind object;
  #L246338.  return v0 @kind object;
}
procedure `java.io.OutputStream` `outputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24634c.  v0:= new `okio.Buffer$1`;
  #L246350.  call `<init>`(v0, v1) @signature `Lokio/Buffer$1;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L246356.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v7 @kind this, `long` v8 @name `offset`, `okio.ByteString` v10 @kind object @name `bytes`) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L246368.  v5:= 0I;
  #L24636a.  call temp:= `size`(v10) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L246370.  v6:= temp;
  #L246372.  v1:= v7 @kind object;
  #L246374.  v2:= v8 @kind wide;
  #L246376.  v4:= v10 @kind object;
  #L246378.  call temp:= `rangeEquals`(v1, v2, v4, v5, v6) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @kind virtual;
  #L24637e.  v0:= temp;
  #L246380.  return v0;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v7 @kind this, `long` v8 @name `offset`, `okio.ByteString` v10 @kind object @name `bytes`, `int` v11 @name `bytesOffset`, `int` v12 @name `byteCount`) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L246394.  v1:= 0I;
  #L246396.  v2:= 0L;
  #L24639a.  v2:= lcmp(v8, v2);
  #L24639e.  if v2 < 0 then goto L2463c8;
  #L2463a2.  if v11 < 0 then goto L2463c8;
  #L2463a6.  if v12 < 0 then goto L2463c8;
  #L2463aa.  v2:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2463ae.  v2:= v2 - v8 @kind long;
  #L2463b0.  v4:= (`long`) v12 @kind i2l;
  #L2463b2.  v2:= lcmp(v2, v4);
  #L2463b6.  if v2 < 0 then goto L2463c8;
  #L2463ba.  call temp:= `size`(v10) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L2463c0.  v2:= temp;
  #L2463c2.  v2:= v2 - v11 @kind int;
  #L2463c4.  if v2 >= v12 then goto L2463ca;
  #L2463c8.  return v1;
  #L2463ca.  v0:= 0I;
  #L2463cc.  if v0 >= v12 then goto L2463f2;
  #L2463d0.  v2:= (`long`) v0 @kind i2l;
  #L2463d2.  v2:= v2 + v8 @kind long;
  #L2463d4.  call temp:= `getByte`(v7, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L2463da.  v2:= temp;
  #L2463dc.  v3:= v11 + v0 @kind int;
  #L2463e0.  call temp:= `getByte`(v10, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L2463e6.  v3:= temp;
  #L2463e8.  if v2 != v3 then goto L2463c8;
  #L2463ec.  v0:= v0 + 1;
  #L2463f0.  goto L2463cc;
  #L2463f2.  v1:= 1I;
  #L2463f4.  goto L2463c8;
}
procedure `int` `read`(`okio.Buffer` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object @name `sink`) @signature `Lokio/Buffer;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L246408.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24640c.  if v0 != 0 then goto L246414;
  #L246410.  v1:= -1I;
  #L246412.  return v1;
  #L246414.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L24641a.  v2:= temp;
  #L24641c.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L246420.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L246424.  v3:= v3 - v4 @kind int;
  #L246426.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L24642c.  v1:= temp;
  #L24642e.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246432.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L246436.  call temp:= `put`(v7, v2, v3, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L24643c.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L246440.  v2:= v2 + v1 @kind int;
  #L246442.  v0.`okio.Segment.pos` @type ^`int` := v2;
  #L246446.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24644a.  v4:= (`long`) v1 @kind i2l;
  #L24644c.  v2:= v2 - v4 @kind long;
  #L24644e.  v6.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L246452.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L246456.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L24645a.  if v2 != v3 then goto L246412;
  #L24645e.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L246464.  v2:= temp @kind object;
  #L246466.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L24646a.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L246470.  goto L246412;
}
procedure `int` `read`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object @name `sink`) @signature `Lokio/Buffer;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L246484.  v0:= 0I;
  #L246486.  v1:= length @variable v3;
  #L246488.  call temp:= `read`(v2, v3, v0, v1) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L24648e.  v0:= temp;
  #L246490.  return v0;
}
procedure `int` `read`(`okio.Buffer` v8 @kind this, `byte`[] v9 @kind object @name `sink`, `int` v10 @name `offset`, `int` v11 @name `byteCount`) @signature `Lokio/Buffer;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L2464a4.  v0:= length @variable v9;
  #L2464a6.  v0:= (`long`) v0 @kind i2l;
  #L2464a8.  v2:= (`long`) v10 @kind i2l;
  #L2464aa.  v4:= (`long`) v11 @kind i2l;
  #L2464ac.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2464b2.  v6:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2464b6.  if v6 != 0 then goto L2464be;
  #L2464ba.  v7:= -1I;
  #L2464bc.  return v7;
  #L2464be.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L2464c2.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L2464c6.  v0:= v0 - v1 @kind int;
  #L2464c8.  call temp:= `min`(v11, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2464ce.  v7:= temp;
  #L2464d0.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2464d4.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L2464d8.  call `arraycopy`(v0, v1, v9, v10, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L2464de.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L2464e2.  v0:= v0 + v7 @kind int;
  #L2464e4.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L2464e8.  v0:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2464ec.  v2:= (`long`) v7 @kind i2l;
  #L2464ee.  v0:= v0 - v2 @kind long;
  #L2464f0.  v8.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L2464f4.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L2464f8.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L2464fc.  if v0 != v1 then goto L2464bc;
  #L246500.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L246506.  v0:= temp @kind object;
  #L246508.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L24650c.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L246512.  goto L2464bc;
}
procedure `long` `read`(`okio.Buffer` v4 @kind this, `okio.Buffer` v5 @kind object @name `sink`, `long` v6 @name `byteCount`) @signature `Lokio/Buffer;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L246524.  v2:= 0L;
  #L246528.  if v5 != 0 then goto L24653c;
  #L24652c.  v0:= new `java.lang.IllegalArgumentException`;
  #L246530.  v1:= "sink == null" @kind object;
  #L246534.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24653a.  throw v0;
  #L24653c.  v0:= lcmp(v6, v2);
  #L246540.  if v0 >= 0 then goto L246576;
  #L246544.  v0:= new `java.lang.IllegalArgumentException`;
  #L246548.  v1:= new `java.lang.StringBuilder`;
  #L24654c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L246552.  v2:= "byteCount < 0: " @kind object;
  #L246556.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24655c.  v1:= temp @kind object;
  #L24655e.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L246564.  v1:= temp @kind object;
  #L246566.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24656c.  v1:= temp @kind object;
  #L24656e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246574.  throw v0;
  #L246576.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24657a.  v0:= lcmp(v0, v2);
  #L24657e.  if v0 != 0 then goto L246588;
  #L246582.  v0:= -1L;
  #L246586.  return v0 @kind wide;
  #L246588.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24658c.  v0:= lcmp(v6, v0);
  #L246590.  if v0 <= 0 then goto L246598;
  #L246594.  v6:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246598.  call `write`(v5, v4, v6) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L24659e.  v0:= v6 @kind wide;
  #L2465a0.  goto L246586;
}
procedure `long` `readAll`(`okio.Buffer` v4 @kind this, `okio.Sink` v5 @kind object @name `sink`) @signature `Lokio/Buffer;.readAll:(Lokio/Sink;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2465b4.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2465b8.  v2:= 0L;
  #L2465bc.  v2:= lcmp(v0, v2);
  #L2465c0.  if v2 <= 0 then goto L2465ca;
  #L2465c4.  call `write`(v5, v4, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L2465ca.  return v0 @kind wide;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readAndWriteUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2465dc.  v0:= new `okio.Buffer$UnsafeCursor`;
  #L2465e0.  call `<init>`(v0) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L2465e6.  call temp:= `readAndWriteUnsafe`(v1, v0) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L2465ec.  v0:= temp @kind object;
  #L2465ee.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v2 @kind this, `okio.Buffer$UnsafeCursor` v3 @kind object @name `unsafeCursor`) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L246600.  v0:= v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L246604.  if v0 == 0 then goto L246618;
  #L246608.  v0:= new `java.lang.IllegalStateException`;
  #L24660c.  v1:= "already attached to a buffer" @kind object;
  #L246610.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246616.  throw v0;
  #L246618.  v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v2 @kind object;
  #L24661c.  v0:= 1I;
  #L24661e.  v3.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v0 @kind boolean;
  #L246622.  return v3 @kind object;
}
procedure `byte` `readByte`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L246634.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246638.  v8:= 0L;
  #L24663c.  v6:= lcmp(v6, v8);
  #L246640.  if v6 != 0 then goto L246654;
  #L246644.  v6:= new `java.lang.IllegalStateException`;
  #L246648.  v7:= "size == 0" @kind object;
  #L24664c.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246652.  throw v6;
  #L246654.  v5:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246658.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L24665c.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L246660.  v1:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246664.  v4:= v3 + 1;
  #L246668.  v0:= v1[v3] @kind byte;
  #L24666c.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246670.  v8:= 1L;
  #L246674.  v6:= v6 - v8 @kind long;
  #L246676.  v10.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L24667a.  if v4 != v2 then goto L246692;
  #L24667e.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L246684.  v6:= temp @kind object;
  #L246686.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L24668a.  call `recycle`(v5) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L246690.  return v0;
  #L246692.  v5.`okio.Segment.pos` @type ^`int` := v4;
  #L246696.  goto L246690;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L2466a8.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2466ac.  call temp:= `readByteArray`(v4, v2) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #Try_end0.  
  #L2466b2.  v1:= temp @kind object;
  #L2466b4.  return v1 @kind object;
  #L2466b6.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L2466b8.  v1:= new `java.lang.AssertionError`;
  #L2466bc.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2466c2.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L2466b6;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v7 @kind this, `long` v8 @name `byteCount`) @signature `Lokio/Buffer;.readByteArray:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L2466e4.  v0:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2466e8.  v2:= 0L;
  #L2466ec.  v4:= v8 @kind wide;
  #L2466ee.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2466f4.  v0:= 2147483647L;
  #L2466fa.  v0:= lcmp(v8, v0);
  #L2466fe.  if v0 <= 0 then goto L246734;
  #L246702.  v0:= new `java.lang.IllegalArgumentException`;
  #L246706.  v1:= new `java.lang.StringBuilder`;
  #L24670a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L246710.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L246714.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24671a.  v1:= temp @kind object;
  #L24671c.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L246722.  v1:= temp @kind object;
  #L246724.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24672a.  v1:= temp @kind object;
  #L24672c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246732.  throw v0;
  #L246734.  v0:= (`int`) v8 @kind l2i;
  #L246736.  v6:= new `byte`[v0];
  #L24673a.  call `readFully`(v7, v6) @signature `Lokio/Buffer;.readFully:([B)V` @kind virtual;
  #L246740.  return v6 @kind object;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L246754.  v0:= new `okio.ByteString`;
  #L246758.  call temp:= `readByteArray`(v2) @signature `Lokio/Buffer;.readByteArray:()[B` @kind virtual;
  #L24675e.  v1:= temp @kind object;
  #L246760.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L246766.  return v0 @kind object;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v3 @kind this, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.readByteString:(J)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L246778.  v0:= new `okio.ByteString`;
  #L24677c.  call temp:= `readByteArray`(v3, v4) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L246782.  v1:= temp @kind object;
  #L246784.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L24678a.  return v0 @kind object;
}
procedure `long` `readDecimalLong`(`okio.Buffer` v24 @kind this) @signature `Lokio/Buffer;.readDecimalLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;

  #L24679c.  v0:= v24 @kind object;
  #L2467a0.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2467a4.  v20:= v0 @kind wide;
  #L2467a8.  v22:= 0L;
  #L2467ac.  v20:= lcmp(v20, v22);
  #L2467b0.  if v20 != 0 then goto L2467c4;
  #L2467b4.  v20:= new `java.lang.IllegalStateException`;
  #L2467b8.  v21:= "size == 0" @kind object;
  #L2467bc.  call `<init>`(v20, v21) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2467c2.  throw v20;
  #L2467c4.  v18:= 0L;
  #L2467c8.  v16:= 0I;
  #L2467cc.  v10:= 0I;
  #L2467ce.  v8:= 0I;
  #L2467d0.  v14:= -922337203685477580L;
  #L2467da.  v12:= -7L;
  #L2467de.  v0:= v24 @kind object;
  #L2467e2.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2467e6.  v17:= v0 @kind object;
  #L2467ea.  v0:= v17 @kind object;
  #L2467ee.  v6:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2467f2.  v0:= v17 @kind object;
  #L2467f6.  v11:= v0.`okio.Segment.pos` @type ^`int`;
  #L2467fa.  v0:= v17 @kind object;
  #L2467fe.  v9:= v0.`okio.Segment.limit` @type ^`int`;
  #L246802.  if v11 >= v9 then goto L246926;
  #L246806.  v4:= v6[v11] @kind byte;
  #L24680a.  v20:= 48I;
  #L24680e.  v0:= v20;
  #L246812.  if v4 < v0 then goto L2468ca;
  #L246816.  v20:= 57I;
  #L24681a.  v0:= v20;
  #L24681e.  if v4 > v0 then goto L2468ca;
  #L246822.  v7:= v4 - 48;
  #L246826.  v20:= lcmp(v18, v14);
  #L24682a.  if v20 < 0 then goto L246844;
  #L24682e.  v20:= lcmp(v18, v14);
  #L246832.  if v20 != 0 then goto L2468ae;
  #L246836.  v0:= (`long`) v7 @kind i2l;
  #L246838.  v20:= v0 @kind wide;
  #L24683c.  v20:= lcmp(v20, v12);
  #L246840.  if v20 >= 0 then goto L2468ae;
  #L246844.  v20:= new `okio.Buffer`;
  #L246848.  call `<init>`(v20) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L24684e.  v0:= v20 @kind object;
  #L246852.  v1:= v18 @kind wide;
  #L246856.  call temp:= `writeDecimalLong`(v0, v1) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L24685c.  v20:= temp @kind object;
  #L24685e.  v0:= v20 @kind object;
  #L246862.  call temp:= `writeByte`(v0, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L246868.  v5:= temp @kind object;
  #L24686a.  if v10 != 0 then goto L246874;
  #L24686e.  call temp:= `readByte`(v5) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L246874.  v20:= new `java.lang.NumberFormatException`;
  #L246878.  v21:= new `java.lang.StringBuilder`;
  #L24687c.  call `<init>`(v21) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L246882.  v22:= "Number too large: " @kind object;
  #L246886.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24688c.  v21:= temp @kind object;
  #L24688e.  call temp:= `readUtf8`(v5) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L246894.  v22:= temp @kind object;
  #L246896.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24689c.  v21:= temp @kind object;
  #L24689e.  call temp:= `toString`(v21) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2468a4.  v21:= temp @kind object;
  #L2468a6.  call `<init>`(v20, v21) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2468ac.  throw v20;
  #L2468ae.  v20:= 10L;
  #L2468b2.  v18:= v18 * v20 @kind long;
  #L2468b6.  v0:= (`long`) v7 @kind i2l;
  #L2468b8.  v20:= v0 @kind wide;
  #L2468bc.  v18:= v18 + v20 @kind long;
  #L2468c0.  v11:= v11 + 1;
  #L2468c4.  v16:= v16 + 1;
  #L2468c8.  goto L246802;
  #L2468ca.  v20:= 45I;
  #L2468ce.  v0:= v20;
  #L2468d2.  if v4 != v0 then goto L2468e6;
  #L2468d6.  if v16 != 0 then goto L2468e6;
  #L2468da.  v10:= 1I;
  #L2468dc.  v20:= 1L;
  #L2468e0.  v12:= v12 - v20 @kind long;
  #L2468e4.  goto L2468c0;
  #L2468e6.  if v16 != 0 then goto L246924;
  #L2468ea.  v20:= new `java.lang.NumberFormatException`;
  #L2468ee.  v21:= new `java.lang.StringBuilder`;
  #L2468f2.  call `<init>`(v21) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2468f8.  v22:= "Expected leading [0-9] or '-' character but was 0x" @kind object;
  #L2468fc.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246902.  v21:= temp @kind object;
  #L246904.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L24690a.  v22:= temp @kind object;
  #L24690c.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246912.  v21:= temp @kind object;
  #L246914.  call temp:= `toString`(v21) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24691a.  v21:= temp @kind object;
  #L24691c.  call `<init>`(v20, v21) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246922.  throw v20;
  #L246924.  v8:= 1I;
  #L246926.  if v11 != v9 then goto L246984;
  #L24692a.  call temp:= `pop`(v17) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L246930.  v20:= temp @kind object;
  #L246932.  v0:= v20 @kind object;
  #L246936.  v1:= v24 @kind object;
  #L24693a.  v1.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L24693e.  call `recycle`(v17) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L246944.  if v8 != 0 then goto L246958;
  #L246948.  v0:= v24 @kind object;
  #L24694c.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246950.  v20:= v0 @kind object;
  #L246954.  if v20 != 0 then goto L2467de;
  #L246958.  v0:= v24 @kind object;
  #L24695c.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246960.  v20:= v0 @kind wide;
  #L246964.  v0:= v16;
  #L246968.  v0:= (`long`) v0 @kind i2l;
  #L24696a.  v22:= v0 @kind wide;
  #L24696e.  v20:= v20 - v22 @kind long;
  #L246972.  v0:= v20 @kind wide;
  #L246976.  v2:= v24 @kind object;
  #L24697a.  v2.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24697e.  if v10 == 0 then goto L24698e;
  #L246982.  return v18 @kind wide;
  #L246984.  v0:= v17 @kind object;
  #L246988.  v0.`okio.Segment.pos` @type ^`int` := v11;
  #L24698c.  goto L246944;
  #L24698e.  v0:= v18 @kind wide;
  #L246992.  v0:= -v0 @kind long;
  #L246994.  v18:= v0 @kind wide;
  #L246998.  goto L246982;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v3 @kind this, `java.io.InputStream` v4 @kind object @name `in`) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2469ac.  v0:= 9223372036854775807L;
  #L2469b6.  v2:= 1I;
  #L2469b8.  call `readFrom`(v3, v4, v0, v2) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L2469be.  return v3 @kind object;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v4 @kind this, `java.io.InputStream` v5 @kind object @name `in`, `long` v6 @name `byteCount`) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2469d0.  v0:= 0L;
  #L2469d4.  v0:= lcmp(v6, v0);
  #L2469d8.  if v0 >= 0 then goto L246a0e;
  #L2469dc.  v0:= new `java.lang.IllegalArgumentException`;
  #L2469e0.  v1:= new `java.lang.StringBuilder`;
  #L2469e4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2469ea.  v2:= "byteCount < 0: " @kind object;
  #L2469ee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2469f4.  v1:= temp @kind object;
  #L2469f6.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2469fc.  v1:= temp @kind object;
  #L2469fe.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L246a04.  v1:= temp @kind object;
  #L246a06.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246a0c.  throw v0;
  #L246a0e.  v0:= 0I;
  #L246a10.  call `readFrom`(v4, v5, v6, v0) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L246a16.  return v4 @kind object;
}
procedure `void` `readFully`(`okio.Buffer` v2 @kind this, `okio.Buffer` v3 @kind object @name `sink`, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.readFully:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L246a28.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246a2c.  v0:= lcmp(v0, v4);
  #L246a30.  if v0 >= 0 then goto L246a4a;
  #L246a34.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246a38.  call `write`(v3, v2, v0) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L246a3e.  v0:= new `java.io.EOFException`;
  #L246a42.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L246a48.  throw v0;
  #L246a4a.  call `write`(v3, v2, v4) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L246a50.  return @kind void;
}
procedure `void` `readFully`(`okio.Buffer` v3 @kind this, `byte`[] v4 @kind object @name `sink`) @signature `Lokio/Buffer;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L246a64.  v0:= 0I;
  #L246a66.  v2:= length @variable v4;
  #L246a68.  if v0 >= v2 then goto L246a8e;
  #L246a6c.  v2:= length @variable v4;
  #L246a6e.  v2:= v2 - v0 @kind int;
  #L246a70.  call temp:= `read`(v3, v4, v0, v2) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L246a76.  v1:= temp;
  #L246a78.  v2:= -1I;
  #L246a7a.  if v1 != v2 then goto L246a8a;
  #L246a7e.  v2:= new `java.io.EOFException`;
  #L246a82.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L246a88.  throw v2;
  #L246a8a.  v0:= v0 + v1 @kind int;
  #L246a8c.  goto L246a66;
  #L246a8e.  return @kind void;
}
procedure `long` `readHexadecimalUnsignedLong`(`okio.Buffer` v18 @kind this) @signature `Lokio/Buffer;.readHexadecimalUnsignedLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L246aa0.  v0:= v18 @kind object;
  #L246aa4.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246aa8.  v16:= 0L;
  #L246aac.  v11:= lcmp(v14, v16);
  #L246ab0.  if v11 != 0 then goto L246ac4;
  #L246ab4.  v11:= new `java.lang.IllegalStateException`;
  #L246ab8.  v14:= "size == 0" @kind object;
  #L246abc.  call `<init>`(v11, v14) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246ac2.  throw v11;
  #L246ac4.  v12:= 0L;
  #L246ac8.  v9:= 0I;
  #L246aca.  v6:= 0I;
  #L246acc.  v0:= v18 @kind object;
  #L246ad0.  v10:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246ad4.  v4:= v10.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246ad8.  v8:= v10.`okio.Segment.pos` @type ^`int`;
  #L246adc.  v7:= v10.`okio.Segment.limit` @type ^`int`;
  #L246ae0.  if v8 >= v7 then goto L246bd6;
  #L246ae4.  v2:= v4[v8] @kind byte;
  #L246ae8.  v11:= 48I;
  #L246aec.  if v2 < v11 then goto L246b62;
  #L246af0.  v11:= 57I;
  #L246af4.  if v2 > v11 then goto L246b62;
  #L246af8.  v5:= v2 + -48;
  #L246afc.  v14:= -3.105036184601418E231D;
  #L246b00.  v14:= v14 ^& v12 @kind long;
  #L246b02.  v16:= 0L;
  #L246b06.  v11:= lcmp(v14, v16);
  #L246b0a.  if v11 == 0 then goto L246c1c;
  #L246b0e.  v11:= new `okio.Buffer`;
  #L246b12.  call `<init>`(v11) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L246b18.  call temp:= `writeHexadecimalUnsignedLong`(v11, v12) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L246b1e.  v11:= temp @kind object;
  #L246b20.  call temp:= `writeByte`(v11, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L246b26.  v3:= temp @kind object;
  #L246b28.  v11:= new `java.lang.NumberFormatException`;
  #L246b2c.  v14:= new `java.lang.StringBuilder`;
  #L246b30.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L246b36.  v15:= "Number too large: " @kind object;
  #L246b3a.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246b40.  v14:= temp @kind object;
  #L246b42.  call temp:= `readUtf8`(v3) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L246b48.  v15:= temp @kind object;
  #L246b4a.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246b50.  v14:= temp @kind object;
  #L246b52.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L246b58.  v14:= temp @kind object;
  #L246b5a.  call `<init>`(v11, v14) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246b60.  throw v11;
  #L246b62.  v11:= 97I;
  #L246b66.  if v2 < v11 then goto L246b7c;
  #L246b6a.  v11:= 102I;
  #L246b6e.  if v2 > v11 then goto L246b7c;
  #L246b72.  v11:= v2 + -97;
  #L246b76.  v5:= v11 + 10;
  #L246b7a.  goto L246afc;
  #L246b7c.  v11:= 65I;
  #L246b80.  if v2 < v11 then goto L246b96;
  #L246b84.  v11:= 70I;
  #L246b88.  if v2 > v11 then goto L246b96;
  #L246b8c.  v11:= v2 + -65;
  #L246b90.  v5:= v11 + 10;
  #L246b94.  goto L246afc;
  #L246b96.  if v9 != 0 then goto L246bd4;
  #L246b9a.  v11:= new `java.lang.NumberFormatException`;
  #L246b9e.  v14:= new `java.lang.StringBuilder`;
  #L246ba2.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L246ba8.  v15:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L246bac.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246bb2.  v14:= temp @kind object;
  #L246bb4.  call temp:= `toHexString`(v2) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L246bba.  v15:= temp @kind object;
  #L246bbc.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246bc2.  v14:= temp @kind object;
  #L246bc4.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L246bca.  v14:= temp @kind object;
  #L246bcc.  call `<init>`(v11, v14) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246bd2.  throw v11;
  #L246bd4.  v6:= 1I;
  #L246bd6.  if v8 != v7 then goto L246c30;
  #L246bda.  call temp:= `pop`(v10) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L246be0.  v11:= temp @kind object;
  #L246be2.  v0:= v18 @kind object;
  #L246be6.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v11 @kind object;
  #L246bea.  call `recycle`(v10) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L246bf0.  if v6 != 0 then goto L246c00;
  #L246bf4.  v0:= v18 @kind object;
  #L246bf8.  v11:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246bfc.  if v11 != 0 then goto L246acc;
  #L246c00.  v0:= v18 @kind object;
  #L246c04.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246c08.  v0:= (`long`) v9 @kind i2l;
  #L246c0a.  v16:= v0 @kind wide;
  #L246c0e.  v14:= v14 - v16 @kind long;
  #L246c12.  v0:= v18 @kind object;
  #L246c16.  v0.`okio.Buffer.size` @type ^`long` := v14 @kind wide;
  #L246c1a.  return v12 @kind wide;
  #L246c1c.  v11:= 4I;
  #L246c1e.  v12:= v12 ^< v11 @kind long;
  #L246c20.  v14:= (`long`) v5 @kind i2l;
  #L246c22.  v12:= v12 ^| v14 @kind long;
  #L246c24.  v8:= v8 + 1;
  #L246c28.  v9:= v9 + 1;
  #L246c2c.  goto L246ae0;
  #L246c30.  v10.`okio.Segment.pos` @type ^`int` := v8;
  #L246c34.  goto L246bf0;
}
procedure `int` `readInt`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L246c48.  v8:= 4L;
  #L246c4c.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246c50.  v6:= lcmp(v6, v8);
  #L246c54.  if v6 >= 0 then goto L246c8e;
  #L246c58.  v6:= new `java.lang.IllegalStateException`;
  #L246c5c.  v7:= new `java.lang.StringBuilder`;
  #L246c60.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L246c66.  v8:= "size < 4: " @kind object;
  #L246c6a.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246c70.  v7:= temp @kind object;
  #L246c72.  v8:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246c76.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L246c7c.  v7:= temp @kind object;
  #L246c7e.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L246c84.  v7:= temp @kind object;
  #L246c86.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246c8c.  throw v6;
  #L246c8e.  v5:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246c92.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L246c96.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L246c9a.  v6:= v2 - v3 @kind int;
  #L246c9e.  v7:= 4I;
  #L246ca0.  if v6 >= v7 then goto L246cea;
  #L246ca4.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L246caa.  v6:= temp;
  #L246cac.  v6:= v6 ^& 255;
  #L246cb0.  v6:= v6 ^< 24;
  #L246cb4.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L246cba.  v7:= temp;
  #L246cbc.  v7:= v7 ^& 255;
  #L246cc0.  v7:= v7 ^< 16;
  #L246cc4.  v6:= v6 ^| v7 @kind int;
  #L246cc6.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L246ccc.  v7:= temp;
  #L246cce.  v7:= v7 ^& 255;
  #L246cd2.  v7:= v7 ^< 8;
  #L246cd6.  v6:= v6 ^| v7 @kind int;
  #L246cd8.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L246cde.  v7:= temp;
  #L246ce0.  v7:= v7 ^& 255;
  #L246ce4.  v1:= v6 ^| v7 @kind int;
  #L246ce8.  return v1;
  #L246cea.  v0:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246cee.  v4:= v3 + 1;
  #L246cf2.  v6:= v0[v3] @kind byte;
  #L246cf6.  v6:= v6 ^& 255;
  #L246cfa.  v6:= v6 ^< 24;
  #L246cfe.  v3:= v4 + 1;
  #L246d02.  v7:= v0[v4] @kind byte;
  #L246d06.  v7:= v7 ^& 255;
  #L246d0a.  v7:= v7 ^< 16;
  #L246d0e.  v6:= v6 ^| v7 @kind int;
  #L246d10.  v4:= v3 + 1;
  #L246d14.  v7:= v0[v3] @kind byte;
  #L246d18.  v7:= v7 ^& 255;
  #L246d1c.  v7:= v7 ^< 8;
  #L246d20.  v6:= v6 ^| v7 @kind int;
  #L246d22.  v3:= v4 + 1;
  #L246d26.  v7:= v0[v4] @kind byte;
  #L246d2a.  v7:= v7 ^& 255;
  #L246d2e.  v1:= v6 ^| v7 @kind int;
  #L246d32.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246d36.  v6:= v6 - v8 @kind long;
  #L246d38.  v10.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L246d3c.  if v3 != v2 then goto L246d54;
  #L246d40.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L246d46.  v6:= temp @kind object;
  #L246d48.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L246d4c.  call `recycle`(v5) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L246d52.  goto L246ce8;
  #L246d54.  v5.`okio.Segment.pos` @type ^`int` := v3;
  #L246d58.  goto L246ce8;
}
procedure `int` `readIntLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readIntLe:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L246d6c.  call temp:= `readInt`(v1) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L246d72.  v0:= temp;
  #L246d74.  call temp:= `reverseBytesInt`(v0) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L246d7a.  v0:= temp;
  #L246d7c.  return v0;
}
procedure `long` `readLong`(`okio.Buffer` v14 @kind this) @signature `Lokio/Buffer;.readLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L246d90.  v8:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246d94.  v10:= 8L;
  #L246d98.  v5:= lcmp(v8, v10);
  #L246d9c.  if v5 >= 0 then goto L246dd6;
  #L246da0.  v5:= new `java.lang.IllegalStateException`;
  #L246da4.  v8:= new `java.lang.StringBuilder`;
  #L246da8.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L246dae.  v9:= "size < 8: " @kind object;
  #L246db2.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246db8.  v8:= temp @kind object;
  #L246dba.  v10:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246dbe.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L246dc4.  v8:= temp @kind object;
  #L246dc6.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L246dcc.  v8:= temp @kind object;
  #L246dce.  call `<init>`(v5, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246dd4.  throw v5;
  #L246dd6.  v4:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246dda.  v2:= v4.`okio.Segment.pos` @type ^`int`;
  #L246dde.  v1:= v4.`okio.Segment.limit` @type ^`int`;
  #L246de2.  v5:= v1 - v2 @kind int;
  #L246de6.  v8:= 8I;
  #L246dea.  if v5 >= v8 then goto L246e26;
  #L246dee.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L246df4.  v5:= temp;
  #L246df6.  v8:= (`long`) v5 @kind i2l;
  #L246df8.  v10:= 4294967295L;
  #L246e02.  v8:= v8 ^& v10 @kind long;
  #L246e04.  v5:= 32I;
  #L246e08.  v8:= v8 ^< v5 @kind long;
  #L246e0a.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L246e10.  v5:= temp;
  #L246e12.  v10:= (`long`) v5 @kind i2l;
  #L246e14.  v12:= 4294967295L;
  #L246e1e.  v10:= v10 ^& v12 @kind long;
  #L246e20.  v6:= v8 ^| v10 @kind long;
  #L246e24.  return v6 @kind wide;
  #L246e26.  v0:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246e2a.  v3:= v2 + 1;
  #L246e2e.  v5:= v0[v2] @kind byte;
  #L246e32.  v8:= (`long`) v5 @kind i2l;
  #L246e34.  v10:= 255L;
  #L246e38.  v8:= v8 ^& v10 @kind long;
  #L246e3a.  v5:= 56I;
  #L246e3e.  v8:= v8 ^< v5 @kind long;
  #L246e40.  v2:= v3 + 1;
  #L246e44.  v5:= v0[v3] @kind byte;
  #L246e48.  v10:= (`long`) v5 @kind i2l;
  #L246e4a.  v12:= 255L;
  #L246e4e.  v10:= v10 ^& v12 @kind long;
  #L246e50.  v5:= 48I;
  #L246e54.  v10:= v10 ^< v5 @kind long;
  #L246e56.  v8:= v8 ^| v10 @kind long;
  #L246e58.  v3:= v2 + 1;
  #L246e5c.  v5:= v0[v2] @kind byte;
  #L246e60.  v10:= (`long`) v5 @kind i2l;
  #L246e62.  v12:= 255L;
  #L246e66.  v10:= v10 ^& v12 @kind long;
  #L246e68.  v5:= 40I;
  #L246e6c.  v10:= v10 ^< v5 @kind long;
  #L246e6e.  v8:= v8 ^| v10 @kind long;
  #L246e70.  v2:= v3 + 1;
  #L246e74.  v5:= v0[v3] @kind byte;
  #L246e78.  v10:= (`long`) v5 @kind i2l;
  #L246e7a.  v12:= 255L;
  #L246e7e.  v10:= v10 ^& v12 @kind long;
  #L246e80.  v5:= 32I;
  #L246e84.  v10:= v10 ^< v5 @kind long;
  #L246e86.  v8:= v8 ^| v10 @kind long;
  #L246e88.  v3:= v2 + 1;
  #L246e8c.  v5:= v0[v2] @kind byte;
  #L246e90.  v10:= (`long`) v5 @kind i2l;
  #L246e92.  v12:= 255L;
  #L246e96.  v10:= v10 ^& v12 @kind long;
  #L246e98.  v5:= 24I;
  #L246e9c.  v10:= v10 ^< v5 @kind long;
  #L246e9e.  v8:= v8 ^| v10 @kind long;
  #L246ea0.  v2:= v3 + 1;
  #L246ea4.  v5:= v0[v3] @kind byte;
  #L246ea8.  v10:= (`long`) v5 @kind i2l;
  #L246eaa.  v12:= 255L;
  #L246eae.  v10:= v10 ^& v12 @kind long;
  #L246eb0.  v5:= 16I;
  #L246eb4.  v10:= v10 ^< v5 @kind long;
  #L246eb6.  v8:= v8 ^| v10 @kind long;
  #L246eb8.  v3:= v2 + 1;
  #L246ebc.  v5:= v0[v2] @kind byte;
  #L246ec0.  v10:= (`long`) v5 @kind i2l;
  #L246ec2.  v12:= 255L;
  #L246ec6.  v10:= v10 ^& v12 @kind long;
  #L246ec8.  v5:= 8I;
  #L246ecc.  v10:= v10 ^< v5 @kind long;
  #L246ece.  v8:= v8 ^| v10 @kind long;
  #L246ed0.  v2:= v3 + 1;
  #L246ed4.  v5:= v0[v3] @kind byte;
  #L246ed8.  v10:= (`long`) v5 @kind i2l;
  #L246eda.  v12:= 255L;
  #L246ede.  v10:= v10 ^& v12 @kind long;
  #L246ee0.  v6:= v8 ^| v10 @kind long;
  #L246ee4.  v8:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246ee8.  v10:= 8L;
  #L246eec.  v8:= v8 - v10 @kind long;
  #L246eee.  v14.`okio.Buffer.size` @type ^`long` := v8 @kind wide;
  #L246ef2.  if v2 != v1 then goto L246f0a;
  #L246ef6.  call temp:= `pop`(v4) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L246efc.  v5:= temp @kind object;
  #L246efe.  v14.`okio.Buffer.head` @type ^`okio.Segment` := v5 @kind object;
  #L246f02.  call `recycle`(v4) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L246f08.  goto L246e24;
  #L246f0a.  v4.`okio.Segment.pos` @type ^`int` := v2;
  #L246f0e.  goto L246e24;
}
procedure `long` `readLongLe`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readLongLe:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L246f20.  call temp:= `readLong`(v2) @signature `Lokio/Buffer;.readLong:()J` @kind virtual;
  #L246f26.  v0:= temp @kind wide;
  #L246f28.  call temp:= `reverseBytesLong`(v0) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L246f2e.  v0:= temp @kind wide;
  #L246f30.  return v0 @kind wide;
}
procedure `short` `readShort`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L246f44.  v8:= 2L;
  #L246f48.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246f4c.  v6:= lcmp(v6, v8);
  #L246f50.  if v6 >= 0 then goto L246f8a;
  #L246f54.  v6:= new `java.lang.IllegalStateException`;
  #L246f58.  v7:= new `java.lang.StringBuilder`;
  #L246f5c.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L246f62.  v8:= "size < 2: " @kind object;
  #L246f66.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246f6c.  v7:= temp @kind object;
  #L246f6e.  v8:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246f72.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L246f78.  v7:= temp @kind object;
  #L246f7a.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L246f80.  v7:= temp @kind object;
  #L246f82.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246f88.  throw v6;
  #L246f8a.  v5:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246f8e.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L246f92.  v1:= v5.`okio.Segment.limit` @type ^`int`;
  #L246f96.  v6:= v1 - v2 @kind int;
  #L246f9a.  v7:= 2I;
  #L246f9c.  if v6 >= v7 then goto L246fc4;
  #L246fa0.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L246fa6.  v6:= temp;
  #L246fa8.  v6:= v6 ^& 255;
  #L246fac.  v6:= v6 ^< 8;
  #L246fb0.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L246fb6.  v7:= temp;
  #L246fb8.  v7:= v7 ^& 255;
  #L246fbc.  v4:= v6 ^| v7 @kind int;
  #L246fc0.  v6:= (`short`) v4 @kind i2s;
  #L246fc2.  return v6;
  #L246fc4.  v0:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246fc8.  v3:= v2 + 1;
  #L246fcc.  v6:= v0[v2] @kind byte;
  #L246fd0.  v6:= v6 ^& 255;
  #L246fd4.  v6:= v6 ^< 8;
  #L246fd8.  v2:= v3 + 1;
  #L246fdc.  v7:= v0[v3] @kind byte;
  #L246fe0.  v7:= v7 ^& 255;
  #L246fe4.  v4:= v6 ^| v7 @kind int;
  #L246fe8.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246fec.  v6:= v6 - v8 @kind long;
  #L246fee.  v10.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L246ff2.  if v2 != v1 then goto L24700c;
  #L246ff6.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L246ffc.  v6:= temp @kind object;
  #L246ffe.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L247002.  call `recycle`(v5) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L247008.  v6:= (`short`) v4 @kind i2s;
  #L24700a.  goto L246fc2;
  #L24700c.  v5.`okio.Segment.pos` @type ^`int` := v2;
  #L247010.  goto L247008;
}
procedure `short` `readShortLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readShortLe:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247024.  call temp:= `readShort`(v1) @signature `Lokio/Buffer;.readShort:()S` @kind virtual;
  #L24702a.  v0:= temp;
  #L24702c.  call temp:= `reverseBytesShort`(v0) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L247032.  v0:= temp;
  #L247034.  return v0;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v9 @kind this, `long` v10 @name `byteCount`, `java.nio.charset.Charset` v12 @kind object @name `charset`) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L247048.  v2:= 0L;
  #L24704c.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247050.  v4:= v10 @kind wide;
  #L247052.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L247058.  if v12 != 0 then goto L24706c;
  #L24705c.  v0:= new `java.lang.IllegalArgumentException`;
  #L247060.  v1:= "charset == null" @kind object;
  #L247064.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24706a.  throw v0;
  #L24706c.  v0:= 2147483647L;
  #L247072.  v0:= lcmp(v10, v0);
  #L247076.  if v0 <= 0 then goto L2470ac;
  #L24707a.  v0:= new `java.lang.IllegalArgumentException`;
  #L24707e.  v1:= new `java.lang.StringBuilder`;
  #L247082.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L247088.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L24708c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247092.  v1:= temp @kind object;
  #L247094.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24709a.  v1:= temp @kind object;
  #L24709c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2470a2.  v1:= temp @kind object;
  #L2470a4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2470aa.  throw v0;
  #L2470ac.  v0:= lcmp(v10, v2);
  #L2470b0.  if v0 != 0 then goto L2470ba;
  #L2470b4.  v6:= "" @kind object;
  #L2470b8.  return v6 @kind object;
  #L2470ba.  v7:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2470be.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L2470c2.  v0:= (`long`) v0 @kind i2l;
  #L2470c4.  v0:= v0 + v10 @kind long;
  #L2470c6.  v2:= v7.`okio.Segment.limit` @type ^`int`;
  #L2470ca.  v2:= (`long`) v2 @kind i2l;
  #L2470cc.  v0:= lcmp(v0, v2);
  #L2470d0.  if v0 <= 0 then goto L2470e8;
  #L2470d4.  v6:= new `java.lang.String`;
  #L2470d8.  call temp:= `readByteArray`(v9, v10) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L2470de.  v0:= temp @kind object;
  #L2470e0.  call `<init>`(v6, v0, v12) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L2470e6.  goto L2470b8;
  #L2470e8.  v6:= new `java.lang.String`;
  #L2470ec.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2470f0.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L2470f4.  v2:= (`int`) v10 @kind l2i;
  #L2470f6.  call `<init>`(v6, v0, v1, v2, v12) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L2470fc.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L247100.  v0:= (`long`) v0 @kind i2l;
  #L247102.  v0:= v0 + v10 @kind long;
  #L247104.  v0:= (`int`) v0 @kind l2i;
  #L247106.  v7.`okio.Segment.pos` @type ^`int` := v0;
  #L24710a.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24710e.  v0:= v0 - v10 @kind long;
  #L247110.  v9.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L247114.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L247118.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L24711c.  if v0 != v1 then goto L2470b8;
  #L247120.  call temp:= `pop`(v7) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L247126.  v0:= temp @kind object;
  #L247128.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L24712c.  call `recycle`(v7) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L247132.  goto L2470b8;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v4 @kind this, `java.nio.charset.Charset` v5 @kind object @name `charset`) @signature `Lokio/Buffer;.readString:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L247144.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247148.  call temp:= `readString`(v4, v2, v5) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L24714e.  v1:= temp @kind object;
  #L247150.  return v1 @kind object;
  #L247152.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L247154.  v1:= new `java.lang.AssertionError`;
  #L247158.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L24715e.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L247152;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247180.  v0:= new `okio.Buffer$UnsafeCursor`;
  #L247184.  call `<init>`(v0) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L24718a.  call temp:= `readUnsafe`(v1, v0) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L247190.  v0:= temp @kind object;
  #L247192.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v2 @kind this, `okio.Buffer$UnsafeCursor` v3 @kind object @name `unsafeCursor`) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2471a4.  v0:= v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L2471a8.  if v0 == 0 then goto L2471bc;
  #L2471ac.  v0:= new `java.lang.IllegalStateException`;
  #L2471b0.  v1:= "already attached to a buffer" @kind object;
  #L2471b4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2471ba.  throw v0;
  #L2471bc.  v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v2 @kind object;
  #L2471c0.  v0:= 0I;
  #L2471c2.  v3.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v0 @kind boolean;
  #L2471c6.  return v3 @kind object;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L2471d8.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2471dc.  v1:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L2471e0.  call temp:= `readString`(v4, v2, v1) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L2471e6.  v1:= temp @kind object;
  #L2471e8.  return v1 @kind object;
  #L2471ea.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L2471ec.  v1:= new `java.lang.AssertionError`;
  #L2471f0.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L2471f6.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L2471ea;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v1 @kind this, `long` v2 @name `byteCount`) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247218.  v0:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L24721c.  call temp:= `readString`(v1, v2, v0) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L247222.  v0:= temp @kind object;
  #L247224.  return v0 @kind object;
}
procedure `int` `readUtf8CodePoint`(`okio.Buffer` v12 @kind this) @signature `Lokio/Buffer;.readUtf8CodePoint:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L247238.  v10:= 0L;
  #L24723c.  v6:= 65533I;
  #L247242.  v8:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247246.  v7:= lcmp(v8, v10);
  #L24724a.  if v7 != 0 then goto L24725a;
  #L24724e.  v6:= new `java.io.EOFException`;
  #L247252.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L247258.  throw v6;
  #L24725a.  call temp:= `getByte`(v12, v10) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L247260.  v1:= temp;
  #L247262.  v7:= v1 ^& 128;
  #L247266.  if v7 != 0 then goto L2472f2;
  #L24726a.  v3:= v1 ^& 127;
  #L24726e.  v2:= 1I;
  #L247270.  v5:= 0I;
  #L247272.  v8:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247276.  v10:= (`long`) v2 @kind i2l;
  #L247278.  v7:= lcmp(v8, v10);
  #L24727c.  if v7 >= 0 then goto L247348;
  #L247280.  v6:= new `java.io.EOFException`;
  #L247284.  v7:= new `java.lang.StringBuilder`;
  #L247288.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24728e.  v8:= "size < " @kind object;
  #L247292.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247298.  v7:= temp @kind object;
  #L24729a.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2472a0.  v7:= temp @kind object;
  #L2472a2.  v8:= ": " @kind object;
  #L2472a6.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2472ac.  v7:= temp @kind object;
  #L2472ae.  v8:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2472b2.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2472b8.  v7:= temp @kind object;
  #L2472ba.  v8:= " (to read code point prefixed 0x" @kind object;
  #L2472be.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2472c4.  v7:= temp @kind object;
  #L2472c6.  call temp:= `toHexString`(v1) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L2472cc.  v8:= temp @kind object;
  #L2472ce.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2472d4.  v7:= temp @kind object;
  #L2472d6.  v8:= ")" @kind object;
  #L2472da.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2472e0.  v7:= temp @kind object;
  #L2472e2.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2472e8.  v7:= temp @kind object;
  #L2472ea.  call `<init>`(v6, v7) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2472f0.  throw v6;
  #L2472f2.  v7:= v1 ^& 224;
  #L2472f6.  v8:= 192I;
  #L2472fa.  if v7 != v8 then goto L24730a;
  #L2472fe.  v3:= v1 ^& 31;
  #L247302.  v2:= 2I;
  #L247304.  v5:= 128I;
  #L247308.  goto L247272;
  #L24730a.  v7:= v1 ^& 240;
  #L24730e.  v8:= 224I;
  #L247312.  if v7 != v8 then goto L247322;
  #L247316.  v3:= v1 ^& 15;
  #L24731a.  v2:= 3I;
  #L24731c.  v5:= 2048I;
  #L247320.  goto L247272;
  #L247322.  v7:= v1 ^& 248;
  #L247326.  v8:= 240I;
  #L24732a.  if v7 != v8 then goto L24733a;
  #L24732e.  v3:= v1 ^& 7;
  #L247332.  v2:= 4I;
  #L247334.  v5:= 65536I;
  #L247338.  goto L247272;
  #L24733a.  v8:= 1L;
  #L24733e.  call `skip`(v12, v8) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L247344.  v3:= v6;
  #L247346.  return v3;
  #L247348.  v4:= 1I;
  #L24734a.  if v4 >= v2 then goto L247380;
  #L24734e.  v8:= (`long`) v4 @kind i2l;
  #L247350.  call temp:= `getByte`(v12, v8) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L247356.  v0:= temp;
  #L247358.  v7:= v0 ^& 192;
  #L24735c.  v8:= 128I;
  #L247360.  if v7 != v8 then goto L247374;
  #L247364.  v3:= v3 ^< 6;
  #L247368.  v7:= v0 ^& 63;
  #L24736c.  v3:= v3 ^| v7 @kind int;
  #L24736e.  v4:= v4 + 1;
  #L247372.  goto L24734a;
  #L247374.  v8:= (`long`) v4 @kind i2l;
  #L247376.  call `skip`(v12, v8) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L24737c.  v3:= v6;
  #L24737e.  goto L247346;
  #L247380.  v8:= (`long`) v2 @kind i2l;
  #L247382.  call `skip`(v12, v8) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L247388.  v7:= 1114111I;
  #L24738e.  if v3 <= v7 then goto L247396;
  #L247392.  v3:= v6;
  #L247394.  goto L247346;
  #L247396.  v7:= 55296I;
  #L24739c.  if v3 < v7 then goto L2473ae;
  #L2473a0.  v7:= 57343I;
  #L2473a6.  if v3 > v7 then goto L2473ae;
  #L2473aa.  v3:= v6;
  #L2473ac.  goto L247346;
  #L2473ae.  if v3 >= v5 then goto L247346;
  #L2473b2.  v3:= v6;
  #L2473b4.  goto L247346;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.readUtf8Line:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2473c8.  v2:= 10I;
  #L2473cc.  call temp:= `indexOf`(v6, v2) @signature `Lokio/Buffer;.indexOf:(B)J` @kind virtual;
  #L2473d2.  v0:= temp @kind wide;
  #L2473d4.  v2:= -1L;
  #L2473d8.  v2:= lcmp(v0, v2);
  #L2473dc.  if v2 != 0 then goto L247402;
  #L2473e0.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2473e4.  v4:= 0L;
  #L2473e8.  v2:= lcmp(v2, v4);
  #L2473ec.  if v2 == 0 then goto L2473fe;
  #L2473f0.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2473f4.  call temp:= `readUtf8`(v6, v2) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L2473fa.  v2:= temp @kind object;
  #L2473fc.  return v2 @kind object;
  #L2473fe.  v2:= 0I;
  #L247400.  goto L2473fc;
  #L247402.  call temp:= `readUtf8Line`(v6, v0) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L247408.  v2:= temp @kind object;
  #L24740a.  goto L2473fc;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v7 @kind this, `long` v8 @name `newline`) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L24741c.  v4:= 1L;
  #L247420.  v2:= 0L;
  #L247424.  v2:= lcmp(v8, v2);
  #L247428.  if v2 <= 0 then goto L24745a;
  #L24742c.  v2:= v8 - v4 @kind long;
  #L247430.  call temp:= `getByte`(v7, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L247436.  v2:= temp;
  #L247438.  v3:= 13I;
  #L24743c.  if v2 != v3 then goto L24745a;
  #L247440.  v2:= v8 - v4 @kind long;
  #L247444.  call temp:= `readUtf8`(v7, v2) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L24744a.  v0:= temp @kind object;
  #L24744c.  v2:= 2L;
  #L247450.  call `skip`(v7, v2) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L247456.  v1:= v0 @kind object;
  #L247458.  return v1 @kind object;
  #L24745a.  call temp:= `readUtf8`(v7, v8) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L247460.  v0:= temp @kind object;
  #L247462.  call `skip`(v7, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L247468.  v1:= v0 @kind object;
  #L24746a.  goto L247458;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readUtf8LineStrict:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24747c.  v0:= 9223372036854775807L;
  #L247486.  call temp:= `readUtf8LineStrict`(v2, v0) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @kind virtual;
  #L24748c.  v0:= temp @kind object;
  #L24748e.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v17 @kind this, `long` v18 @name `limit`) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L2474a0.  v2:= 0L;
  #L2474a4.  v2:= lcmp(v18, v2);
  #L2474a8.  if v2 >= 0 then goto L2474e2;
  #L2474ac.  v2:= new `java.lang.IllegalArgumentException`;
  #L2474b0.  v3:= new `java.lang.StringBuilder`;
  #L2474b4.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2474ba.  v4:= "limit < 0: " @kind object;
  #L2474be.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2474c4.  v3:= temp @kind object;
  #L2474c6.  v0:= v18 @kind wide;
  #L2474ca.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2474d0.  v3:= temp @kind object;
  #L2474d2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2474d8.  v3:= temp @kind object;
  #L2474da.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2474e0.  throw v2;
  #L2474e2.  v2:= 9223372036854775807L;
  #L2474ec.  v2:= lcmp(v18, v2);
  #L2474f0.  if v2 != 0 then goto L24752c;
  #L2474f4.  v6:= 9223372036854775807L;
  #L2474fe.  v3:= 10I;
  #L247502.  v4:= 0L;
  #L247506.  v2:= v17 @kind object;
  #L24750a.  call temp:= `indexOf`(v2, v3, v4, v6) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L247510.  v14:= temp @kind wide;
  #L247512.  v2:= -1L;
  #L247516.  v2:= lcmp(v14, v2);
  #L24751a.  if v2 == 0 then goto L247536;
  #L24751e.  v0:= v17 @kind object;
  #L247522.  call temp:= `readUtf8Line`(v0, v14) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L247528.  v2:= temp @kind object;
  #L24752a.  return v2 @kind object;
  #L24752c.  v2:= 1L;
  #L247530.  v6:= v18 + v2 @kind long;
  #L247534.  goto L2474fe;
  #L247536.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L24753c.  v2:= temp @kind wide;
  #L24753e.  v2:= lcmp(v6, v2);
  #L247542.  if v2 >= 0 then goto L247584;
  #L247546.  v2:= 1L;
  #L24754a.  v2:= v6 - v2 @kind long;
  #L24754e.  v0:= v17 @kind object;
  #L247552.  call temp:= `getByte`(v0, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L247558.  v2:= temp;
  #L24755a.  v3:= 13I;
  #L24755e.  if v2 != v3 then goto L247584;
  #L247562.  v0:= v17 @kind object;
  #L247566.  call temp:= `getByte`(v0, v6) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L24756c.  v2:= temp;
  #L24756e.  v3:= 10I;
  #L247572.  if v2 != v3 then goto L247584;
  #L247576.  v0:= v17 @kind object;
  #L24757a.  call temp:= `readUtf8Line`(v0, v6) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L247580.  v2:= temp @kind object;
  #L247582.  goto L24752a;
  #L247584.  v9:= new `okio.Buffer`;
  #L247588.  call `<init>`(v9) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L24758e.  v10:= 0L;
  #L247592.  v2:= 32L;
  #L247596.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L24759c.  v4:= temp @kind wide;
  #L24759e.  call temp:= `min`(v2, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2475a4.  v12:= temp @kind wide;
  #L2475a6.  v8:= v17 @kind object;
  #L2475aa.  call temp:= `copyTo`(v8, v9, v10, v12) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L2475b0.  v2:= new `java.io.EOFException`;
  #L2475b4.  v3:= new `java.lang.StringBuilder`;
  #L2475b8.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2475be.  v4:= "\\n not found: limit=" @kind object;
  #L2475c2.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2475c8.  v3:= temp @kind object;
  #L2475ca.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L2475d0.  v4:= temp @kind wide;
  #L2475d2.  v0:= v18 @kind wide;
  #L2475d6.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2475dc.  v4:= temp @kind wide;
  #L2475de.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2475e4.  v3:= temp @kind object;
  #L2475e6.  v4:= " content=" @kind object;
  #L2475ea.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2475f0.  v3:= temp @kind object;
  #L2475f2.  call temp:= `readByteString`(v9) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L2475f8.  v4:= temp @kind object;
  #L2475fa.  call temp:= `hex`(v4) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L247600.  v4:= temp @kind object;
  #L247602.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247608.  v3:= temp @kind object;
  #L24760a.  v4:= 8230I;
  #L24760e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L247614.  v3:= temp @kind object;
  #L247616.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24761c.  v3:= temp @kind object;
  #L24761e.  call `<init>`(v2, v3) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247624.  throw v2;
}
procedure `boolean` `request`(`okio.Buffer` v3 @kind this, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.request:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L247638.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24763c.  v0:= lcmp(v0, v4);
  #L247640.  if v0 < 0 then goto L247648;
  #L247644.  v0:= 1I;
  #L247646.  return v0;
  #L247648.  v0:= 0I;
  #L24764a.  goto L247646;
}
procedure `void` `require`(`okio.Buffer` v3 @kind this, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.require:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24765c.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247660.  v0:= lcmp(v0, v4);
  #L247664.  if v0 >= 0 then goto L247674;
  #L247668.  v0:= new `java.io.EOFException`;
  #L24766c.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L247672.  throw v0;
  #L247674.  return @kind void;
}
procedure `java.util.List` `segmentSizes`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.segmentSizes:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L247688.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24768c.  if v2 != 0 then goto L24769a;
  #L247690.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L247696.  v0:= temp @kind object;
  #L247698.  return v0 @kind object;
  #L24769a.  v0:= new `java.util.ArrayList`;
  #L24769e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2476a4.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2476a8.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L2476ac.  v3:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2476b0.  v3:= v3.`okio.Segment.pos` @type ^`int`;
  #L2476b4.  v2:= v2 - v3 @kind int;
  #L2476b6.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2476bc.  v2:= temp @kind object;
  #L2476be.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2476c4.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2476c8.  v1:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2476cc.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2476d0.  if v1 == v2 then goto L247698;
  #L2476d4.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L2476d8.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L2476dc.  v2:= v2 - v3 @kind int;
  #L2476de.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L2476e4.  v2:= temp @kind object;
  #L2476e6.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L2476ec.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2476f0.  goto L2476cc;
}
procedure `int` `select`(`okio.Buffer` v12 @kind this, `okio.Options` v13 @kind object @name `options`) @signature `Lokio/Buffer;.select:(Lokio/Options;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L247704.  v1:= v12.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247708.  if v1 != 0 then goto L24771a;
  #L24770c.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L247710.  call temp:= `indexOf`(v13, v0) @signature `Lokio/Options;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L247716.  v8:= temp;
  #L247718.  return v8;
  #L24771a.  v6:= v13.`okio.Options.byteStrings` @type ^`okio.ByteString`[] @kind object;
  #L24771e.  v8:= 0I;
  #L247720.  v9:= length @variable v6;
  #L247722.  if v8 >= v9 then goto L247782;
  #L247726.  v3:= v6[v8] @kind object;
  #L24772a.  v4:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24772e.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L247734.  v0:= temp;
  #L247736.  v10:= (`long`) v0 @kind i2l;
  #L247738.  v0:= lcmp(v4, v10);
  #L24773c.  if v0 < 0 then goto L24777c;
  #L247740.  v2:= v1.`okio.Segment.pos` @type ^`int`;
  #L247744.  v4:= 0I;
  #L247746.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L24774c.  v5:= temp;
  #L24774e.  v0:= v12 @kind object;
  #L247750.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L247756.  v0:= temp;
  #L247758.  if v0 == 0 then goto L24777c;
  #Try_start0.  
  #L24775c.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L247762.  v0:= temp;
  #L247764.  v4:= (`long`) v0 @kind i2l;
  #L247766.  call `skip`(v12, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #Try_end0.  
  #L24776c.  goto L247718;
  #L24776e.  v7:= Exception @type ^`java.io.EOFException` @kind object;
  #L247770.  v0:= new `java.lang.AssertionError`;
  #L247774.  call `<init>`(v0, v7) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L24777a.  throw v0;
  #L24777c.  v8:= v8 + 1;
  #L247780.  goto L247722;
  #L247782.  v8:= -1I;
  #L247784.  goto L247718;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L24776e;
}
procedure `int` `selectPrefix`(`okio.Buffer` v14 @kind this, `okio.Options` v15 @kind object @name `options`) @signature `Lokio/Buffer;.selectPrefix:(Lokio/Options;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L2477a8.  v1:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2477ac.  v6:= v15.`okio.Options.byteStrings` @type ^`okio.ByteString`[] @kind object;
  #L2477b0.  v7:= 0I;
  #L2477b2.  v8:= length @variable v6;
  #L2477b4.  if v7 >= v8 then goto L2477f4;
  #L2477b8.  v3:= v6[v7] @kind object;
  #L2477bc.  v10:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2477c0.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L2477c6.  v0:= temp;
  #L2477c8.  v12:= (`long`) v0 @kind i2l;
  #L2477ca.  call temp:= `min`(v10, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2477d0.  v10:= temp @kind wide;
  #L2477d2.  v5:= (`int`) v10 @kind l2i;
  #L2477d4.  if v5 == 0 then goto L2477ec;
  #L2477d8.  v2:= v1.`okio.Segment.pos` @type ^`int`;
  #L2477dc.  v4:= 0I;
  #L2477de.  v0:= v14 @kind object;
  #L2477e0.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L2477e6.  v0:= temp;
  #L2477e8.  if v0 == 0 then goto L2477ee;
  #L2477ec.  return v7;
  #L2477ee.  v7:= v7 + 1;
  #L2477f2.  goto L2477b4;
  #L2477f4.  v7:= -1I;
  #L2477f6.  goto L2477ec;
}
procedure `okio.ByteString` `sha1`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha1:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247808.  v0:= "SHA-1" @kind object;
  #L24780c.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L247812.  v0:= temp @kind object;
  #L247814.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha256:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247828.  v0:= "SHA-256" @kind object;
  #L24782c.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L247832.  v0:= temp @kind object;
  #L247834.  return v0 @kind object;
}
procedure `okio.ByteString` `sha512`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha512:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247848.  v0:= "SHA-512" @kind object;
  #L24784c.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L247852.  v0:= temp @kind object;
  #L247854.  return v0 @kind object;
}
procedure `long` `size`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.size:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L247868.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24786c.  return v0 @kind wide;
}
procedure `void` `skip`(`okio.Buffer` v7 @kind this, `long` v8 @name `byteCount`) @signature `Lokio/Buffer;.skip:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L247880.  v2:= 0L;
  #L247884.  v2:= lcmp(v8, v2);
  #L247888.  if v2 <= 0 then goto L247908;
  #L24788c.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247890.  if v2 != 0 then goto L2478a0;
  #L247894.  v2:= new `java.io.EOFException`;
  #L247898.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L24789e.  throw v2;
  #L2478a0.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2478a4.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L2478a8.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2478ac.  v3:= v3.`okio.Segment.pos` @type ^`int`;
  #L2478b0.  v2:= v2 - v3 @kind int;
  #L2478b2.  v2:= (`long`) v2 @kind i2l;
  #L2478b4.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2478ba.  v2:= temp @kind wide;
  #L2478bc.  v1:= (`int`) v2 @kind l2i;
  #L2478be.  v2:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2478c2.  v4:= (`long`) v1 @kind i2l;
  #L2478c4.  v2:= v2 - v4 @kind long;
  #L2478c6.  v7.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L2478ca.  v2:= (`long`) v1 @kind i2l;
  #L2478cc.  v8:= v8 - v2 @kind long;
  #L2478ce.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2478d2.  v3:= v2.`okio.Segment.pos` @type ^`int`;
  #L2478d6.  v3:= v3 + v1 @kind int;
  #L2478d8.  v2.`okio.Segment.pos` @type ^`int` := v3;
  #L2478dc.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2478e0.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L2478e4.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2478e8.  v3:= v3.`okio.Segment.limit` @type ^`int`;
  #L2478ec.  if v2 != v3 then goto L247880;
  #L2478f0.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2478f4.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L2478fa.  v2:= temp @kind object;
  #L2478fc.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L247900.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L247906.  goto L247880;
  #L247908.  return @kind void;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24791c.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247920.  v2:= 2147483647L;
  #L247926.  v0:= lcmp(v0, v2);
  #L24792a.  if v0 <= 0 then goto L247964;
  #L24792e.  v0:= new `java.lang.IllegalArgumentException`;
  #L247932.  v1:= new `java.lang.StringBuilder`;
  #L247936.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24793c.  v2:= "size > Integer.MAX_VALUE: " @kind object;
  #L247940.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247946.  v1:= temp @kind object;
  #L247948.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24794c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L247952.  v1:= temp @kind object;
  #L247954.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24795a.  v1:= temp @kind object;
  #L24795c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247962.  throw v0;
  #L247964.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247968.  v0:= (`int`) v0 @kind l2i;
  #L24796a.  call temp:= `snapshot`(v4, v0) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L247970.  v0:= temp @kind object;
  #L247972.  return v0 @kind object;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v1 @kind this, `int` v2 @name `byteCount`) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247984.  if v2 != 0 then goto L24798e;
  #L247988.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L24798c.  return v0 @kind object;
  #L24798e.  v0:= new `okio.SegmentedByteString`;
  #L247992.  call `<init>`(v0, v1, v2) @signature `Lokio/SegmentedByteString;.<init>:(Lokio/Buffer;I)V` @kind direct;
  #L247998.  goto L24798c;
}
procedure `okio.Timeout` `timeout`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2479ac.  v0:= `@@okio.Timeout.NONE` @type ^`okio.Timeout` @kind object;
  #L2479b0.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2479c4.  call temp:= `snapshot`(v1) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @kind virtual;
  #L2479ca.  v0:= temp @kind object;
  #L2479cc.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L2479d2.  v0:= temp @kind object;
  #L2479d4.  return v0 @kind object;
}
procedure `okio.Segment` `writableSegment`(`okio.Buffer` v3 @kind this, `int` v4 @name `minimumCapacity`) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2479e8.  v2:= 8192I;
  #L2479ec.  v1:= 1I;
  #L2479ee.  if v4 < v1 then goto L2479f6;
  #L2479f2.  if v4 <= v2 then goto L247a02;
  #L2479f6.  v1:= new `java.lang.IllegalArgumentException`;
  #L2479fa.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L247a00.  throw v1;
  #L247a02.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247a06.  if v1 != 0 then goto L247a2c;
  #L247a0a.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L247a10.  v1:= temp @kind object;
  #L247a12.  v3.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L247a16.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247a1a.  v2:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247a1e.  v0:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247a22.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v0 @kind object;
  #L247a26.  v1.`okio.Segment.next` @type ^`okio.Segment` := v0 @kind object;
  #L247a2a.  return v0 @kind object;
  #L247a2c.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247a30.  v0:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L247a34.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L247a38.  v1:= v1 + v4 @kind int;
  #L247a3a.  if v1 > v2 then goto L247a46;
  #L247a3e.  v1:= v0.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L247a42.  if v1 != 0 then goto L247a2a;
  #L247a46.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L247a4c.  v1:= temp @kind object;
  #L247a4e.  call temp:= `push`(v0, v1) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L247a54.  v0:= temp @kind object;
  #L247a56.  goto L247a2a;
}
procedure `int` `write`(`okio.Buffer` v8 @kind this, `java.nio.ByteBuffer` v9 @kind object @name `source`) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L247a68.  if v9 != 0 then goto L247a7c;
  #L247a6c.  v4:= new `java.lang.IllegalArgumentException`;
  #L247a70.  v5:= "source == null" @kind object;
  #L247a74.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247a7a.  throw v4;
  #L247a7c.  call temp:= `remaining`(v9) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L247a82.  v0:= temp;
  #L247a84.  v1:= v0;
  #L247a86.  if v1 <= 0 then goto L247ac0;
  #L247a8a.  v4:= 1I;
  #L247a8c.  call temp:= `writableSegment`(v8, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L247a92.  v2:= temp @kind object;
  #L247a94.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L247a98.  v4:= v4 - 8192;
  #L247a9c.  call temp:= `min`(v1, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L247aa2.  v3:= temp;
  #L247aa4.  v4:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247aa8.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L247aac.  call temp:= `get`(v9, v4, v5, v3) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L247ab2.  v1:= v1 - v3 @kind int;
  #L247ab4.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L247ab8.  v4:= v4 + v3 @kind int;
  #L247aba.  v2.`okio.Segment.limit` @type ^`int` := v4;
  #L247abe.  goto L247a86;
  #L247ac0.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247ac4.  v6:= (`long`) v0 @kind i2l;
  #L247ac6.  v4:= v4 + v6 @kind long;
  #L247ac8.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L247acc.  return v0;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object @name `byteString`) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L247ae0.  if v3 != 0 then goto L247af4;
  #L247ae4.  v0:= new `java.lang.IllegalArgumentException`;
  #L247ae8.  v1:= "byteString == null" @kind object;
  #L247aec.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247af2.  throw v0;
  #L247af4.  call `write`(v3, v2) @signature `Lokio/ByteString;.write:(Lokio/Buffer;)V` @kind virtual;
  #L247afa.  return v2 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object @name `source`) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L247b0c.  if v3 != 0 then goto L247b20;
  #L247b10.  v0:= new `java.lang.IllegalArgumentException`;
  #L247b14.  v1:= "source == null" @kind object;
  #L247b18.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247b1e.  throw v0;
  #L247b20.  v0:= 0I;
  #L247b22.  v1:= length @variable v3;
  #L247b24.  call temp:= `write`(v2, v3, v0, v1) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L247b2a.  v0:= temp @kind object;
  #L247b2c.  return v0 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v9 @kind this, `byte`[] v10 @kind object @name `source`, `int` v11 @name `offset`, `int` v12 @name `byteCount`) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L247b40.  if v10 != 0 then goto L247b54;
  #L247b44.  v0:= new `java.lang.IllegalArgumentException`;
  #L247b48.  v1:= "source == null" @kind object;
  #L247b4c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247b52.  throw v0;
  #L247b54.  v0:= length @variable v10;
  #L247b56.  v0:= (`long`) v0 @kind i2l;
  #L247b58.  v2:= (`long`) v11 @kind i2l;
  #L247b5a.  v4:= (`long`) v12 @kind i2l;
  #L247b5c.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L247b62.  v6:= v11 + v12 @kind int;
  #L247b66.  if v11 >= v6 then goto L247ba4;
  #L247b6a.  v0:= 1I;
  #L247b6c.  call temp:= `writableSegment`(v9, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L247b72.  v7:= temp @kind object;
  #L247b74.  v0:= v6 - v11 @kind int;
  #L247b78.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L247b7c.  v1:= v1 - 8192;
  #L247b80.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L247b86.  v8:= temp;
  #L247b88.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247b8c.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L247b90.  call `arraycopy`(v10, v11, v0, v1, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L247b96.  v11:= v11 + v8 @kind int;
  #L247b98.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L247b9c.  v0:= v0 + v8 @kind int;
  #L247b9e.  v7.`okio.Segment.limit` @type ^`int` := v0;
  #L247ba2.  goto L247b66;
  #L247ba4.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247ba8.  v2:= (`long`) v12 @kind i2l;
  #L247baa.  v0:= v0 + v2 @kind long;
  #L247bac.  v9.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L247bb0.  return v9 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L247bc4.  call temp:= `write`(v1, v2) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L247bca.  v0:= temp @kind object;
  #L247bcc.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v4 @kind this, `okio.Source` v5 @kind object @name `source`, `long` v6 @name `byteCount`) @signature `Lokio/Buffer;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L247be0.  v2:= 0L;
  #L247be4.  v2:= lcmp(v6, v2);
  #L247be8.  if v2 <= 0 then goto L247c10;
  #L247bec.  call temp:= `read`(v5, v4, v6) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L247bf2.  v0:= temp @kind wide;
  #L247bf4.  v2:= -1L;
  #L247bf8.  v2:= lcmp(v0, v2);
  #L247bfc.  if v2 != 0 then goto L247c0c;
  #L247c00.  v2:= new `java.io.EOFException`;
  #L247c04.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L247c0a.  throw v2;
  #L247c0c.  v6:= v6 - v0 @kind long;
  #L247c0e.  goto L247be0;
  #L247c10.  return v4 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v1 @kind this, `byte`[] v2 @kind object) @signature `Lokio/Buffer;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L247c24.  call temp:= `write`(v1, v2) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L247c2a.  v0:= temp @kind object;
  #L247c2c.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/Buffer;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L247c40.  call temp:= `write`(v1, v2, v3, v4) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L247c46.  v0:= temp @kind object;
  #L247c48.  return v0 @kind object;
}
procedure `void` `write`(`okio.Buffer` v10 @kind this, `okio.Buffer` v11 @kind object @name `source`, `long` v12 @name `byteCount`) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L247c5c.  v2:= 0L;
  #L247c60.  if v11 != 0 then goto L247c74;
  #L247c64.  v0:= new `java.lang.IllegalArgumentException`;
  #L247c68.  v1:= "source == null" @kind object;
  #L247c6c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247c72.  throw v0;
  #L247c74.  if v11 != v10 then goto L247c88;
  #L247c78.  v0:= new `java.lang.IllegalArgumentException`;
  #L247c7c.  v1:= "source == this" @kind object;
  #L247c80.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247c86.  throw v0;
  #L247c88.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247c8c.  v4:= v12 @kind wide;
  #L247c8e.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L247c94.  v0:= lcmp(v12, v2);
  #L247c98.  if v0 <= 0 then goto L247d1a;
  #L247c9c.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247ca0.  v0:= v0.`okio.Segment.limit` @type ^`int`;
  #L247ca4.  v1:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247ca8.  v1:= v1.`okio.Segment.pos` @type ^`int`;
  #L247cac.  v0:= v0 - v1 @kind int;
  #L247cae.  v0:= (`long`) v0 @kind i2l;
  #L247cb0.  v0:= lcmp(v12, v0);
  #L247cb4.  if v0 >= 0 then goto L247d38;
  #L247cb8.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247cbc.  if v0 == 0 then goto L247d1c;
  #L247cc0.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247cc4.  v9:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L247cc8.  if v9 == 0 then goto L247d26;
  #L247ccc.  v0:= v9.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L247cd0.  if v0 == 0 then goto L247d26;
  #L247cd4.  v0:= v9.`okio.Segment.limit` @type ^`int`;
  #L247cd8.  v0:= (`long`) v0 @kind i2l;
  #L247cda.  v4:= v12 + v0 @kind long;
  #L247cde.  v0:= v9.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L247ce2.  if v0 == 0 then goto L247d20;
  #L247ce6.  v0:= 0I;
  #L247ce8.  v0:= (`long`) v0 @kind i2l;
  #L247cea.  v0:= v4 - v0 @kind long;
  #L247cee.  v4:= 8192L;
  #L247cf2.  v0:= lcmp(v0, v4);
  #L247cf6.  if v0 > 0 then goto L247d26;
  #L247cfa.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247cfe.  v1:= (`int`) v12 @kind l2i;
  #L247d00.  call `writeTo`(v0, v9, v1) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L247d06.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247d0a.  v0:= v0 - v12 @kind long;
  #L247d0c.  v11.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L247d10.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247d14.  v0:= v0 + v12 @kind long;
  #L247d16.  v10.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L247d1a.  return @kind void;
  #L247d1c.  v9:= 0I;
  #L247d1e.  goto L247cc8;
  #L247d20.  v0:= v9.`okio.Segment.pos` @type ^`int`;
  #L247d24.  goto L247ce8;
  #L247d26.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247d2a.  v1:= (`int`) v12 @kind l2i;
  #L247d2c.  call temp:= `split`(v0, v1) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @kind virtual;
  #L247d32.  v0:= temp @kind object;
  #L247d34.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L247d38.  v8:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247d3c.  v0:= v8.`okio.Segment.limit` @type ^`int`;
  #L247d40.  v1:= v8.`okio.Segment.pos` @type ^`int`;
  #L247d44.  v0:= v0 - v1 @kind int;
  #L247d46.  v6:= (`long`) v0 @kind i2l;
  #L247d48.  call temp:= `pop`(v8) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L247d4e.  v0:= temp @kind object;
  #L247d50.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L247d54.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247d58.  if v0 != 0 then goto L247d8c;
  #L247d5c.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L247d60.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247d64.  v1:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247d68.  v4:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247d6c.  v1.`okio.Segment.prev` @type ^`okio.Segment` := v4 @kind object;
  #L247d70.  v0.`okio.Segment.next` @type ^`okio.Segment` := v4 @kind object;
  #L247d74.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247d78.  v0:= v0 - v6 @kind long;
  #L247d7a.  v11.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L247d7e.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247d82.  v0:= v0 + v6 @kind long;
  #L247d84.  v10.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L247d88.  v12:= v12 - v6 @kind long;
  #L247d8a.  goto L247c94;
  #L247d8c.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247d90.  v9:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L247d94.  call temp:= `push`(v9, v8) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L247d9a.  v9:= temp @kind object;
  #L247d9c.  call `compact`(v9) @signature `Lokio/Segment;.compact:()V` @kind virtual;
  #L247da2.  goto L247d74;
}
procedure `long` `writeAll`(`okio.Buffer` v6 @kind this, `okio.Source` v7 @kind object @name `source`) @signature `Lokio/Buffer;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L247db4.  if v7 != 0 then goto L247dc8;
  #L247db8.  v4:= new `java.lang.IllegalArgumentException`;
  #L247dbc.  v5:= "source == null" @kind object;
  #L247dc0.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247dc6.  throw v4;
  #L247dc8.  v2:= 0L;
  #L247dcc.  v4:= 8192L;
  #L247dd0.  call temp:= `read`(v7, v6, v4) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L247dd6.  v0:= temp @kind wide;
  #L247dd8.  v4:= -1L;
  #L247ddc.  v4:= lcmp(v0, v4);
  #L247de0.  if v4 == 0 then goto L247de8;
  #L247de4.  v2:= v2 + v0 @kind long;
  #L247de6.  goto L247dcc;
  #L247de8.  return v2 @kind wide;
}
procedure `okio.Buffer` `writeByte`(`okio.Buffer` v6 @kind this, `int` v7 @name `b`) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L247dfc.  v1:= 1I;
  #L247dfe.  call temp:= `writableSegment`(v6, v1) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L247e04.  v0:= temp @kind object;
  #L247e06.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247e0a.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L247e0e.  v3:= v2 + 1;
  #L247e12.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L247e16.  v3:= (`byte`) v7 @kind i2b;
  #L247e18.  v1[v2]:= v3 @kind byte;
  #L247e1c.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247e20.  v4:= 1L;
  #L247e24.  v2:= v2 + v4 @kind long;
  #L247e26.  v6.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L247e2a.  return v6 @kind object;
}
procedure `okio.BufferedSink` `writeByte`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L247e3c.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L247e42.  v0:= temp @kind object;
  #L247e44.  return v0 @kind object;
}
procedure `okio.Buffer` `writeDecimalLong`(`okio.Buffer` v13 @kind this, `long` v14 @name `v`) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L247e58.  v10:= 10L;
  #L247e5c.  v8:= 0L;
  #L247e60.  v6:= lcmp(v14, v8);
  #L247e64.  if v6 != 0 then goto L247e76;
  #L247e68.  v6:= 48I;
  #L247e6c.  call temp:= `writeByte`(v13, v6) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L247e72.  v13:= temp @kind object;
  #L247e74.  return v13 @kind object;
  #L247e76.  v2:= 0I;
  #L247e78.  v6:= lcmp(v14, v8);
  #L247e7c.  if v6 >= 0 then goto L247e9a;
  #L247e80.  v14:= -v14 @kind long;
  #L247e82.  v6:= lcmp(v14, v8);
  #L247e86.  if v6 >= 0 then goto L247e98;
  #L247e8a.  v6:= "-9223372036854775808" @kind object;
  #L247e8e.  call temp:= `writeUtf8`(v13, v6) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L247e94.  v13:= temp @kind object;
  #L247e96.  goto L247e74;
  #L247e98.  v2:= 1I;
  #L247e9a.  v6:= 100000000L;
  #L247ea0.  v6:= lcmp(v14, v6);
  #L247ea4.  if v6 >= 0 then goto L247f5c;
  #L247ea8.  v6:= 10000L;
  #L247eac.  v6:= lcmp(v14, v6);
  #L247eb0.  if v6 >= 0 then goto L247f20;
  #L247eb4.  v6:= 100L;
  #L247eb8.  v6:= lcmp(v14, v6);
  #L247ebc.  if v6 >= 0 then goto L247f0c;
  #L247ec0.  v6:= lcmp(v14, v10);
  #L247ec4.  if v6 >= 0 then goto L247f08;
  #L247ec8.  v5:= 1I;
  #L247eca.  if v2 == 0 then goto L247ed2;
  #L247ece.  v5:= v5 + 1;
  #L247ed2.  call temp:= `writableSegment`(v13, v5) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L247ed8.  v4:= temp @kind object;
  #L247eda.  v0:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247ede.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L247ee2.  v3:= v6 + v5 @kind int;
  #L247ee6.  v6:= lcmp(v14, v8);
  #L247eea.  if v6 == 0 then goto L24805c;
  #L247eee.  v6:= v14 %% v10 @kind long;
  #L247ef2.  v1:= (`int`) v6 @kind l2i;
  #L247ef4.  v3:= v3 + -1;
  #L247ef8.  v6:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L247efc.  v6:= v6[v1] @kind byte;
  #L247f00.  v0[v3]:= v6 @kind byte;
  #L247f04.  v14:= v14 / v10 @kind long;
  #L247f06.  goto L247ee6;
  #L247f08.  v5:= 2I;
  #L247f0a.  goto L247eca;
  #L247f0c.  v6:= 1000L;
  #L247f10.  v6:= lcmp(v14, v6);
  #L247f14.  if v6 >= 0 then goto L247f1c;
  #L247f18.  v5:= 3I;
  #L247f1a.  goto L247eca;
  #L247f1c.  v5:= 4I;
  #L247f1e.  goto L247eca;
  #L247f20.  v6:= 1000000L;
  #L247f26.  v6:= lcmp(v14, v6);
  #L247f2a.  if v6 >= 0 then goto L247f44;
  #L247f2e.  v6:= 100000L;
  #L247f34.  v6:= lcmp(v14, v6);
  #L247f38.  if v6 >= 0 then goto L247f40;
  #L247f3c.  v5:= 5I;
  #L247f3e.  goto L247eca;
  #L247f40.  v5:= 6I;
  #L247f42.  goto L247eca;
  #L247f44.  v6:= 10000000L;
  #L247f4a.  v6:= lcmp(v14, v6);
  #L247f4e.  if v6 >= 0 then goto L247f56;
  #L247f52.  v5:= 7I;
  #L247f54.  goto L247eca;
  #L247f56.  v5:= 8I;
  #L247f5a.  goto L247eca;
  #L247f5c.  v6:= 1000000000000L;
  #L247f66.  v6:= lcmp(v14, v6);
  #L247f6a.  if v6 >= 0 then goto L247fb8;
  #L247f6e.  v6:= 10000000000L;
  #L247f78.  v6:= lcmp(v14, v6);
  #L247f7c.  if v6 >= 0 then goto L247f9a;
  #L247f80.  v6:= 1000000000L;
  #L247f86.  v6:= lcmp(v14, v6);
  #L247f8a.  if v6 >= 0 then goto L247f94;
  #L247f8e.  v5:= 9I;
  #L247f92.  goto L247eca;
  #L247f94.  v5:= 10I;
  #L247f98.  goto L247eca;
  #L247f9a.  v6:= 100000000000L;
  #L247fa4.  v6:= lcmp(v14, v6);
  #L247fa8.  if v6 >= 0 then goto L247fb2;
  #L247fac.  v5:= 11I;
  #L247fb0.  goto L247eca;
  #L247fb2.  v5:= 12I;
  #L247fb6.  goto L247eca;
  #L247fb8.  v6:= 1000000000000000L;
  #L247fc2.  v6:= lcmp(v14, v6);
  #L247fc6.  if v6 >= 0 then goto L248006;
  #L247fca.  v6:= 10000000000000L;
  #L247fd4.  v6:= lcmp(v14, v6);
  #L247fd8.  if v6 >= 0 then goto L247fe4;
  #L247fdc.  v5:= 13I;
  #L247fe0.  goto L247eca;
  #L247fe4.  v6:= 100000000000000L;
  #L247fee.  v6:= lcmp(v14, v6);
  #L247ff2.  if v6 >= 0 then goto L247ffe;
  #L247ff6.  v5:= 14I;
  #L247ffa.  goto L247eca;
  #L247ffe.  v5:= 15I;
  #L248002.  goto L247eca;
  #L248006.  v6:= 100000000000000000L;
  #L248010.  v6:= lcmp(v14, v6);
  #L248014.  if v6 >= 0 then goto L24803a;
  #L248018.  v6:= 10000000000000000L;
  #L248022.  v6:= lcmp(v14, v6);
  #L248026.  if v6 >= 0 then goto L248032;
  #L24802a.  v5:= 16I;
  #L24802e.  goto L247eca;
  #L248032.  v5:= 17I;
  #L248036.  goto L247eca;
  #L24803a.  v6:= 1000000000000000000L;
  #L248044.  v6:= lcmp(v14, v6);
  #L248048.  if v6 >= 0 then goto L248054;
  #L24804c.  v5:= 18I;
  #L248050.  goto L247eca;
  #L248054.  v5:= 19I;
  #L248058.  goto L247eca;
  #L24805c.  if v2 == 0 then goto L24806c;
  #L248060.  v3:= v3 + -1;
  #L248064.  v6:= 45I;
  #L248068.  v0[v3]:= v6 @kind byte;
  #L24806c.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L248070.  v6:= v6 + v5 @kind int;
  #L248072.  v4.`okio.Segment.limit` @type ^`int` := v6;
  #L248076.  v6:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24807a.  v8:= (`long`) v5 @kind i2l;
  #L24807c.  v6:= v6 + v8 @kind long;
  #L24807e.  v13.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L248082.  goto L247e74;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248098.  call temp:= `writeDecimalLong`(v1, v2) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L24809e.  v0:= temp @kind object;
  #L2480a0.  return v0 @kind object;
}
procedure `okio.Buffer` `writeHexadecimalUnsignedLong`(`okio.Buffer` v11 @kind this, `long` v12 @name `v`) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2480b4.  v6:= 0L;
  #L2480b8.  v5:= lcmp(v12, v6);
  #L2480bc.  if v5 != 0 then goto L2480ce;
  #L2480c0.  v5:= 48I;
  #L2480c4.  call temp:= `writeByte`(v11, v5) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2480ca.  v11:= temp @kind object;
  #L2480cc.  return v11 @kind object;
  #L2480ce.  call temp:= `highestOneBit`(v12) @signature `Ljava/lang/Long;.highestOneBit:(J)J` @kind static;
  #L2480d4.  v6:= temp @kind wide;
  #L2480d6.  call temp:= `numberOfTrailingZeros`(v6) @signature `Ljava/lang/Long;.numberOfTrailingZeros:(J)I` @kind static;
  #L2480dc.  v5:= temp;
  #L2480de.  v5:= v5 / 4;
  #L2480e2.  v4:= v5 + 1;
  #L2480e6.  call temp:= `writableSegment`(v11, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L2480ec.  v3:= temp @kind object;
  #L2480ee.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2480f2.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L2480f6.  v5:= v5 + v4 @kind int;
  #L2480f8.  v1:= v5 + -1;
  #L2480fc.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L248100.  if v1 < v2 then goto L248122;
  #L248104.  v5:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L248108.  v6:= 15L;
  #L24810c.  v6:= v6 ^& v12 @kind long;
  #L24810e.  v6:= (`int`) v6 @kind l2i;
  #L248110.  v5:= v5[v6] @kind byte;
  #L248114.  v0[v1]:= v5 @kind byte;
  #L248118.  v5:= 4I;
  #L24811a.  v12:= v12 ^>> v5 @kind long;
  #L24811c.  v1:= v1 + -1;
  #L248120.  goto L248100;
  #L248122.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L248126.  v5:= v5 + v4 @kind int;
  #L248128.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L24812c.  v6:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248130.  v8:= (`long`) v4 @kind i2l;
  #L248132.  v6:= v6 + v8 @kind long;
  #L248134.  v11.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L248138.  goto L2480cc;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L24814c.  call temp:= `writeHexadecimalUnsignedLong`(v1, v2) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L248152.  v0:= temp @kind object;
  #L248154.  return v0 @kind object;
}
procedure `okio.Buffer` `writeInt`(`okio.Buffer` v8 @kind this, `int` v9 @name `i`) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L248168.  v4:= 4I;
  #L24816a.  call temp:= `writableSegment`(v8, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L248170.  v3:= temp @kind object;
  #L248172.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L248176.  v1:= v3.`okio.Segment.limit` @type ^`int`;
  #L24817a.  v2:= v1 + 1;
  #L24817e.  v4:= v9 ^>> 24;
  #L248182.  v4:= v4 ^& 255;
  #L248186.  v4:= (`byte`) v4 @kind i2b;
  #L248188.  v0[v1]:= v4 @kind byte;
  #L24818c.  v1:= v2 + 1;
  #L248190.  v4:= v9 ^>> 16;
  #L248194.  v4:= v4 ^& 255;
  #L248198.  v4:= (`byte`) v4 @kind i2b;
  #L24819a.  v0[v2]:= v4 @kind byte;
  #L24819e.  v2:= v1 + 1;
  #L2481a2.  v4:= v9 ^>> 8;
  #L2481a6.  v4:= v4 ^& 255;
  #L2481aa.  v4:= (`byte`) v4 @kind i2b;
  #L2481ac.  v0[v1]:= v4 @kind byte;
  #L2481b0.  v1:= v2 + 1;
  #L2481b4.  v4:= v9 ^& 255;
  #L2481b8.  v4:= (`byte`) v4 @kind i2b;
  #L2481ba.  v0[v2]:= v4 @kind byte;
  #L2481be.  v3.`okio.Segment.limit` @type ^`int` := v1;
  #L2481c2.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2481c6.  v6:= 4L;
  #L2481ca.  v4:= v4 + v6 @kind long;
  #L2481cc.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L2481d0.  return v8 @kind object;
}
procedure `okio.BufferedSink` `writeInt`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2481e4.  call temp:= `writeInt`(v1, v2) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L2481ea.  v0:= temp @kind object;
  #L2481ec.  return v0 @kind object;
}
procedure `okio.Buffer` `writeIntLe`(`okio.Buffer` v1 @kind this, `int` v2 @name `i`) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L248200.  call temp:= `reverseBytesInt`(v2) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L248206.  v0:= temp;
  #L248208.  call temp:= `writeInt`(v1, v0) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L24820e.  v0:= temp @kind object;
  #L248210.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248224.  call temp:= `writeIntLe`(v1, v2) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L24822a.  v0:= temp @kind object;
  #L24822c.  return v0 @kind object;
}
procedure `okio.Buffer` `writeLong`(`okio.Buffer` v9 @kind this, `long` v10 @name `v`) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L248240.  v8:= 8I;
  #L248244.  v6:= 255L;
  #L248248.  call temp:= `writableSegment`(v9, v8) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L24824e.  v3:= temp @kind object;
  #L248250.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L248254.  v1:= v3.`okio.Segment.limit` @type ^`int`;
  #L248258.  v2:= v1 + 1;
  #L24825c.  v4:= 56I;
  #L248260.  v4:= v10 ^>> v4 @kind long;
  #L248264.  v4:= v4 ^& v6 @kind long;
  #L248266.  v4:= (`int`) v4 @kind l2i;
  #L248268.  v4:= (`byte`) v4 @kind i2b;
  #L24826a.  v0[v1]:= v4 @kind byte;
  #L24826e.  v1:= v2 + 1;
  #L248272.  v4:= 48I;
  #L248276.  v4:= v10 ^>> v4 @kind long;
  #L24827a.  v4:= v4 ^& v6 @kind long;
  #L24827c.  v4:= (`int`) v4 @kind l2i;
  #L24827e.  v4:= (`byte`) v4 @kind i2b;
  #L248280.  v0[v2]:= v4 @kind byte;
  #L248284.  v2:= v1 + 1;
  #L248288.  v4:= 40I;
  #L24828c.  v4:= v10 ^>> v4 @kind long;
  #L248290.  v4:= v4 ^& v6 @kind long;
  #L248292.  v4:= (`int`) v4 @kind l2i;
  #L248294.  v4:= (`byte`) v4 @kind i2b;
  #L248296.  v0[v1]:= v4 @kind byte;
  #L24829a.  v1:= v2 + 1;
  #L24829e.  v4:= 32I;
  #L2482a2.  v4:= v10 ^>> v4 @kind long;
  #L2482a6.  v4:= v4 ^& v6 @kind long;
  #L2482a8.  v4:= (`int`) v4 @kind l2i;
  #L2482aa.  v4:= (`byte`) v4 @kind i2b;
  #L2482ac.  v0[v2]:= v4 @kind byte;
  #L2482b0.  v2:= v1 + 1;
  #L2482b4.  v4:= 24I;
  #L2482b8.  v4:= v10 ^>> v4 @kind long;
  #L2482bc.  v4:= v4 ^& v6 @kind long;
  #L2482be.  v4:= (`int`) v4 @kind l2i;
  #L2482c0.  v4:= (`byte`) v4 @kind i2b;
  #L2482c2.  v0[v1]:= v4 @kind byte;
  #L2482c6.  v1:= v2 + 1;
  #L2482ca.  v4:= 16I;
  #L2482ce.  v4:= v10 ^>> v4 @kind long;
  #L2482d2.  v4:= v4 ^& v6 @kind long;
  #L2482d4.  v4:= (`int`) v4 @kind l2i;
  #L2482d6.  v4:= (`byte`) v4 @kind i2b;
  #L2482d8.  v0[v2]:= v4 @kind byte;
  #L2482dc.  v2:= v1 + 1;
  #L2482e0.  v4:= v10 ^>> v8 @kind long;
  #L2482e4.  v4:= v4 ^& v6 @kind long;
  #L2482e6.  v4:= (`int`) v4 @kind l2i;
  #L2482e8.  v4:= (`byte`) v4 @kind i2b;
  #L2482ea.  v0[v1]:= v4 @kind byte;
  #L2482ee.  v1:= v2 + 1;
  #L2482f2.  v4:= v10 ^& v6 @kind long;
  #L2482f6.  v4:= (`int`) v4 @kind l2i;
  #L2482f8.  v4:= (`byte`) v4 @kind i2b;
  #L2482fa.  v0[v2]:= v4 @kind byte;
  #L2482fe.  v3.`okio.Segment.limit` @type ^`int` := v1;
  #L248302.  v4:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248306.  v6:= 8L;
  #L24830a.  v4:= v4 + v6 @kind long;
  #L24830c.  v9.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L248310.  return v9 @kind object;
}
procedure `okio.BufferedSink` `writeLong`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248324.  call temp:= `writeLong`(v1, v2) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L24832a.  v0:= temp @kind object;
  #L24832c.  return v0 @kind object;
}
procedure `okio.Buffer` `writeLongLe`(`okio.Buffer` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L248340.  call temp:= `reverseBytesLong`(v4) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L248346.  v0:= temp @kind wide;
  #L248348.  call temp:= `writeLong`(v3, v0) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L24834e.  v0:= temp @kind object;
  #L248350.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248364.  call temp:= `writeLongLe`(v1, v2) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L24836a.  v0:= temp @kind object;
  #L24836c.  return v0 @kind object;
}
procedure `okio.Buffer` `writeShort`(`okio.Buffer` v8 @kind this, `int` v9 @name `s`) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L248380.  v4:= 2I;
  #L248382.  call temp:= `writableSegment`(v8, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L248388.  v3:= temp @kind object;
  #L24838a.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24838e.  v1:= v3.`okio.Segment.limit` @type ^`int`;
  #L248392.  v2:= v1 + 1;
  #L248396.  v4:= v9 ^>> 8;
  #L24839a.  v4:= v4 ^& 255;
  #L24839e.  v4:= (`byte`) v4 @kind i2b;
  #L2483a0.  v0[v1]:= v4 @kind byte;
  #L2483a4.  v1:= v2 + 1;
  #L2483a8.  v4:= v9 ^& 255;
  #L2483ac.  v4:= (`byte`) v4 @kind i2b;
  #L2483ae.  v0[v2]:= v4 @kind byte;
  #L2483b2.  v3.`okio.Segment.limit` @type ^`int` := v1;
  #L2483b6.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2483ba.  v6:= 2L;
  #L2483be.  v4:= v4 + v6 @kind long;
  #L2483c0.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L2483c4.  return v8 @kind object;
}
procedure `okio.BufferedSink` `writeShort`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2483d8.  call temp:= `writeShort`(v1, v2) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L2483de.  v0:= temp @kind object;
  #L2483e0.  return v0 @kind object;
}
procedure `okio.Buffer` `writeShortLe`(`okio.Buffer` v1 @kind this, `int` v2 @name `s`) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2483f4.  v0:= (`short`) v2 @kind i2s;
  #L2483f6.  call temp:= `reverseBytesShort`(v0) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L2483fc.  v0:= temp;
  #L2483fe.  call temp:= `writeShort`(v1, v0) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L248404.  v0:= temp @kind object;
  #L248406.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248418.  call temp:= `writeShortLe`(v1, v2) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L24841e.  v0:= temp @kind object;
  #L248420.  return v0 @kind object;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v4 @kind this, `java.lang.String` v5 @kind object @name `string`, `int` v6 @name `beginIndex`, `int` v7 @name `endIndex`, `java.nio.charset.Charset` v8 @kind object @name `charset`) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L248434.  if v5 != 0 then goto L248448;
  #L248438.  v1:= new `java.lang.IllegalArgumentException`;
  #L24843c.  v2:= "string == null" @kind object;
  #L248440.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248446.  throw v1;
  #L248448.  if v6 >= 0 then goto L24847e;
  #L24844c.  v1:= new `java.lang.IllegalAccessError`;
  #L248450.  v2:= new `java.lang.StringBuilder`;
  #L248454.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24845a.  v3:= "beginIndex < 0: " @kind object;
  #L24845e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248464.  v2:= temp @kind object;
  #L248466.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24846c.  v2:= temp @kind object;
  #L24846e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248474.  v2:= temp @kind object;
  #L248476.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24847c.  throw v1;
  #L24847e.  if v7 >= v6 then goto L2484c8;
  #L248482.  v1:= new `java.lang.IllegalArgumentException`;
  #L248486.  v2:= new `java.lang.StringBuilder`;
  #L24848a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248490.  v3:= "endIndex < beginIndex: " @kind object;
  #L248494.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24849a.  v2:= temp @kind object;
  #L24849c.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2484a2.  v2:= temp @kind object;
  #L2484a4.  v3:= " < " @kind object;
  #L2484a8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2484ae.  v2:= temp @kind object;
  #L2484b0.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2484b6.  v2:= temp @kind object;
  #L2484b8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2484be.  v2:= temp @kind object;
  #L2484c0.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2484c6.  throw v1;
  #L2484c8.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2484ce.  v1:= temp;
  #L2484d0.  if v7 <= v1 then goto L248522;
  #L2484d4.  v1:= new `java.lang.IllegalArgumentException`;
  #L2484d8.  v2:= new `java.lang.StringBuilder`;
  #L2484dc.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2484e2.  v3:= "endIndex > string.length: " @kind object;
  #L2484e6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2484ec.  v2:= temp @kind object;
  #L2484ee.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2484f4.  v2:= temp @kind object;
  #L2484f6.  v3:= " > " @kind object;
  #L2484fa.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248500.  v2:= temp @kind object;
  #L248502.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L248508.  v3:= temp;
  #L24850a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L248510.  v2:= temp @kind object;
  #L248512.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248518.  v2:= temp @kind object;
  #L24851a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248520.  throw v1;
  #L248522.  if v8 != 0 then goto L248536;
  #L248526.  v1:= new `java.lang.IllegalArgumentException`;
  #L24852a.  v2:= "charset == null" @kind object;
  #L24852e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248534.  throw v1;
  #L248536.  v1:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L24853a.  call temp:= `equals`(v8, v1) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L248540.  v1:= temp;
  #L248542.  if v1 == 0 then goto L248550;
  #L248546.  call temp:= `writeUtf8`(v4, v5, v6, v7) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L24854c.  v1:= temp @kind object;
  #L24854e.  return v1 @kind object;
  #L248550.  call temp:= `substring`(v5, v6, v7) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L248556.  v1:= temp @kind object;
  #L248558.  call temp:= `getBytes`(v1, v8) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L24855e.  v0:= temp @kind object;
  #L248560.  v1:= 0I;
  #L248562.  v2:= length @variable v0;
  #L248564.  call temp:= `write`(v4, v0, v1, v2) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L24856a.  v1:= temp @kind object;
  #L24856c.  goto L24854e;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `java.nio.charset.Charset` v4 @kind object @name `charset`) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248580.  v0:= 0I;
  #L248582.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L248588.  v1:= temp;
  #L24858a.  call temp:= `writeString`(v2, v3, v0, v1, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L248590.  v0:= temp @kind object;
  #L248592.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2485a4.  call temp:= `writeString`(v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L2485aa.  v0:= temp @kind object;
  #L2485ac.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2485c0.  call temp:= `writeString`(v1, v2, v3) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L2485c6.  v0:= temp @kind object;
  #L2485c8.  return v0 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v2 @kind this, `java.io.OutputStream` v3 @kind object @name `out`) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2485dc.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2485e0.  call temp:= `writeTo`(v2, v3, v0) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @kind virtual;
  #L2485e6.  v0:= temp @kind object;
  #L2485e8.  return v0 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v10 @kind this, `java.io.OutputStream` v11 @kind object @name `out`, `long` v12 @name `byteCount`) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2485fc.  v2:= 0L;
  #L248600.  if v11 != 0 then goto L248614;
  #L248604.  v0:= new `java.lang.IllegalArgumentException`;
  #L248608.  v1:= "out == null" @kind object;
  #L24860c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248612.  throw v0;
  #L248614.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248618.  v4:= v12 @kind wide;
  #L24861a.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L248620.  v6:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248624.  v0:= lcmp(v12, v2);
  #L248628.  if v0 <= 0 then goto L24868c;
  #L24862c.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L248630.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L248634.  v0:= v0 - v1 @kind int;
  #L248636.  v0:= (`long`) v0 @kind i2l;
  #L248638.  call temp:= `min`(v12, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L24863e.  v0:= temp @kind wide;
  #L248640.  v7:= (`int`) v0 @kind l2i;
  #L248642.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L248646.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L24864a.  call `write`(v11, v0, v1, v7) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L248650.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L248654.  v0:= v0 + v7 @kind int;
  #L248656.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L24865a.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24865e.  v4:= (`long`) v7 @kind i2l;
  #L248660.  v0:= v0 - v4 @kind long;
  #L248662.  v10.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L248666.  v0:= (`long`) v7 @kind i2l;
  #L248668.  v12:= v12 - v0 @kind long;
  #L24866a.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L24866e.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L248672.  if v0 != v1 then goto L248624;
  #L248676.  v8:= v6 @kind object;
  #L248678.  call temp:= `pop`(v8) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24867e.  v6:= temp @kind object;
  #L248680.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L248684.  call `recycle`(v8) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L24868a.  goto L248624;
  #L24868c.  return v10 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object @name `string`) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2486a0.  v0:= 0I;
  #L2486a2.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2486a8.  v1:= temp;
  #L2486aa.  call temp:= `writeUtf8`(v2, v3, v0, v1) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L2486b0.  v0:= temp @kind object;
  #L2486b2.  return v0 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v16 @kind this, `java.lang.String` v17 @kind object @name `string`, `int` v18 @name `beginIndex`, `int` v19 @name `endIndex`) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L2486c4.  if v17 != 0 then goto L2486d8;
  #L2486c8.  v12:= new `java.lang.IllegalArgumentException`;
  #L2486cc.  v13:= "string == null" @kind object;
  #L2486d0.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2486d6.  throw v12;
  #L2486d8.  if v18 >= 0 then goto L248712;
  #L2486dc.  v12:= new `java.lang.IllegalArgumentException`;
  #L2486e0.  v13:= new `java.lang.StringBuilder`;
  #L2486e4.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2486ea.  v14:= "beginIndex < 0: " @kind object;
  #L2486ee.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2486f4.  v13:= temp @kind object;
  #L2486f6.  v0:= v18;
  #L2486fa.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L248700.  v13:= temp @kind object;
  #L248702.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248708.  v13:= temp @kind object;
  #L24870a.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248710.  throw v12;
  #L248712.  v0:= v19;
  #L248716.  v1:= v18;
  #L24871a.  if v0 >= v1 then goto L24876c;
  #L24871e.  v12:= new `java.lang.IllegalArgumentException`;
  #L248722.  v13:= new `java.lang.StringBuilder`;
  #L248726.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24872c.  v14:= "endIndex < beginIndex: " @kind object;
  #L248730.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248736.  v13:= temp @kind object;
  #L248738.  v0:= v19;
  #L24873c.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L248742.  v13:= temp @kind object;
  #L248744.  v14:= " < " @kind object;
  #L248748.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24874e.  v13:= temp @kind object;
  #L248750.  v0:= v18;
  #L248754.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24875a.  v13:= temp @kind object;
  #L24875c.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248762.  v13:= temp @kind object;
  #L248764.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24876a.  throw v12;
  #L24876c.  call temp:= `length`(v17) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L248772.  v12:= temp;
  #L248774.  v0:= v19;
  #L248778.  if v0 <= v12 then goto L2487ce;
  #L24877c.  v12:= new `java.lang.IllegalArgumentException`;
  #L248780.  v13:= new `java.lang.StringBuilder`;
  #L248784.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24878a.  v14:= "endIndex > string.length: " @kind object;
  #L24878e.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248794.  v13:= temp @kind object;
  #L248796.  v0:= v19;
  #L24879a.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2487a0.  v13:= temp @kind object;
  #L2487a2.  v14:= " > " @kind object;
  #L2487a6.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2487ac.  v13:= temp @kind object;
  #L2487ae.  call temp:= `length`(v17) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L2487b4.  v14:= temp;
  #L2487b6.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L2487bc.  v13:= temp @kind object;
  #L2487be.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2487c4.  v13:= temp @kind object;
  #L2487c6.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2487cc.  throw v12;
  #L2487ce.  v5:= v18;
  #L2487d2.  v6:= v5;
  #L2487d4.  v0:= v19;
  #L2487d8.  if v6 >= v0 then goto L2489d6;
  #L2487dc.  v0:= v17 @kind object;
  #L2487e0.  call temp:= `charAt`(v0, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L2487e6.  v2:= temp;
  #L2487e8.  v12:= 128I;
  #L2487ec.  if v2 >= v12 then goto L248884;
  #L2487f0.  v12:= 1I;
  #L2487f2.  v0:= v16 @kind object;
  #L2487f6.  call temp:= `writableSegment`(v0, v12) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L2487fc.  v11:= temp @kind object;
  #L2487fe.  v4:= v11.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L248802.  v12:= v11.`okio.Segment.limit` @type ^`int`;
  #L248806.  v10:= v12 - v6 @kind int;
  #L24880a.  v12:= v10 - 8192;
  #L24880e.  v0:= v19;
  #L248812.  call temp:= `min`(v0, v12) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L248818.  v8:= temp;
  #L24881a.  v5:= v6 + 1;
  #L24881e.  v12:= v10 + v6 @kind int;
  #L248822.  v13:= (`byte`) v2 @kind i2b;
  #L248824.  v4[v12]:= v13 @kind byte;
  #L248828.  v6:= v5;
  #L24882a.  if v6 >= v8 then goto L248842;
  #L24882e.  v0:= v17 @kind object;
  #L248832.  call temp:= `charAt`(v0, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L248838.  v2:= temp;
  #L24883a.  v12:= 128I;
  #L24883e.  if v2 < v12 then goto L248872;
  #L248842.  v12:= v6 + v10 @kind int;
  #L248846.  v13:= v11.`okio.Segment.limit` @type ^`int`;
  #L24884a.  v9:= v12 - v13 @kind int;
  #L24884e.  v12:= v11.`okio.Segment.limit` @type ^`int`;
  #L248852.  v12:= v12 + v9 @kind int;
  #L248854.  v11.`okio.Segment.limit` @type ^`int` := v12;
  #L248858.  v0:= v16 @kind object;
  #L24885c.  v12:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248860.  v14:= (`long`) v9 @kind i2l;
  #L248862.  v12:= v12 + v14 @kind long;
  #L248864.  v0:= v16 @kind object;
  #L248868.  v0.`okio.Buffer.size` @type ^`long` := v12 @kind wide;
  #L24886c.  v5:= v6;
  #L24886e.  v6:= v5;
  #L248870.  goto L2487d4;
  #L248872.  v5:= v6 + 1;
  #L248876.  v12:= v10 + v6 @kind int;
  #L24887a.  v13:= (`byte`) v2 @kind i2b;
  #L24887c.  v4[v12]:= v13 @kind byte;
  #L248880.  v6:= v5;
  #L248882.  goto L24882a;
  #L248884.  v12:= 2048I;
  #L248888.  if v2 >= v12 then goto L2488b6;
  #L24888c.  v12:= v2 ^> 6;
  #L248890.  v12:= v12 ^| 192;
  #L248894.  v0:= v16 @kind object;
  #L248898.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24889e.  v12:= v2 ^& 63;
  #L2488a2.  v12:= v12 ^| 128;
  #L2488a6.  v0:= v16 @kind object;
  #L2488aa.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2488b0.  v5:= v6 + 1;
  #L2488b4.  goto L24886e;
  #L2488b6.  v12:= 55296I;
  #L2488bc.  if v2 < v12 then goto L2488ca;
  #L2488c0.  v12:= 57343I;
  #L2488c6.  if v2 <= v12 then goto L24890a;
  #L2488ca.  v12:= v2 ^> 12;
  #L2488ce.  v12:= v12 ^| 224;
  #L2488d2.  v0:= v16 @kind object;
  #L2488d6.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2488dc.  v12:= v2 ^> 6;
  #L2488e0.  v12:= v12 ^& 63;
  #L2488e4.  v12:= v12 ^| 128;
  #L2488e8.  v0:= v16 @kind object;
  #L2488ec.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2488f2.  v12:= v2 ^& 63;
  #L2488f6.  v12:= v12 ^| 128;
  #L2488fa.  v0:= v16 @kind object;
  #L2488fe.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248904.  v5:= v6 + 1;
  #L248908.  goto L24886e;
  #L24890a.  v12:= v6 + 1;
  #L24890e.  v0:= v19;
  #L248912.  if v12 >= v0 then goto L24895c;
  #L248916.  v12:= v6 + 1;
  #L24891a.  v0:= v17 @kind object;
  #L24891e.  call temp:= `charAt`(v0, v12) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L248924.  v7:= temp;
  #L248926.  v12:= 56319I;
  #L24892c.  if v2 > v12 then goto L248944;
  #L248930.  v12:= 56320I;
  #L248936.  if v7 < v12 then goto L248944;
  #L24893a.  v12:= 57343I;
  #L248940.  if v7 <= v12 then goto L248960;
  #L248944.  v12:= 63I;
  #L248948.  v0:= v16 @kind object;
  #L24894c.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248952.  v5:= v6 + 1;
  #L248956.  v6:= v5;
  #L248958.  goto L2487d4;
  #L24895c.  v7:= 0I;
  #L24895e.  goto L248926;
  #L248960.  v12:= 65536I;
  #L248964.  v13:= -55297I;
  #L24896a.  v13:= v13 ^& v2 @kind int;
  #L24896c.  v13:= v13 ^< 10;
  #L248970.  v14:= -56321I;
  #L248976.  v14:= v14 ^& v7 @kind int;
  #L248978.  v13:= v13 ^| v14 @kind int;
  #L24897a.  v3:= v12 + v13 @kind int;
  #L24897e.  v12:= v3 ^> 18;
  #L248982.  v12:= v12 ^| 240;
  #L248986.  v0:= v16 @kind object;
  #L24898a.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248990.  v12:= v3 ^> 12;
  #L248994.  v12:= v12 ^& 63;
  #L248998.  v12:= v12 ^| 128;
  #L24899c.  v0:= v16 @kind object;
  #L2489a0.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2489a6.  v12:= v3 ^> 6;
  #L2489aa.  v12:= v12 ^& 63;
  #L2489ae.  v12:= v12 ^| 128;
  #L2489b2.  v0:= v16 @kind object;
  #L2489b6.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2489bc.  v12:= v3 ^& 63;
  #L2489c0.  v12:= v12 ^| 128;
  #L2489c4.  v0:= v16 @kind object;
  #L2489c8.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2489ce.  v5:= v6 + 2;
  #L2489d2.  goto L24886e;
  #L2489d6.  return v16 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2489e8.  call temp:= `writeUtf8`(v1, v2) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L2489ee.  v0:= temp @kind object;
  #L2489f0.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248a04.  call temp:= `writeUtf8`(v1, v2, v3, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L248a0a.  v0:= temp @kind object;
  #L248a0c.  return v0 @kind object;
}
procedure `okio.Buffer` `writeUtf8CodePoint`(`okio.Buffer` v3 @kind this, `int` v4 @name `codePoint`) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L248a20.  v0:= 128I;
  #L248a24.  if v4 >= v0 then goto L248a30;
  #L248a28.  call temp:= `writeByte`(v3, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248a2e.  return v3 @kind object;
  #L248a30.  v0:= 2048I;
  #L248a34.  if v4 >= v0 then goto L248a56;
  #L248a38.  v0:= v4 ^> 6;
  #L248a3c.  v0:= v0 ^| 192;
  #L248a40.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248a46.  v0:= v4 ^& 63;
  #L248a4a.  v0:= v0 ^| 128;
  #L248a4e.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248a54.  goto L248a2e;
  #L248a56.  v0:= 65536I;
  #L248a5a.  if v4 >= v0 then goto L248aae;
  #L248a5e.  v0:= 55296I;
  #L248a64.  if v4 < v0 then goto L248a7e;
  #L248a68.  v0:= 57343I;
  #L248a6e.  if v4 > v0 then goto L248a7e;
  #L248a72.  v0:= 63I;
  #L248a76.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248a7c.  goto L248a2e;
  #L248a7e.  v0:= v4 ^> 12;
  #L248a82.  v0:= v0 ^| 224;
  #L248a86.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248a8c.  v0:= v4 ^> 6;
  #L248a90.  v0:= v0 ^& 63;
  #L248a94.  v0:= v0 ^| 128;
  #L248a98.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248a9e.  v0:= v4 ^& 63;
  #L248aa2.  v0:= v0 ^| 128;
  #L248aa6.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248aac.  goto L248a2e;
  #L248aae.  v0:= 1114111I;
  #L248ab4.  if v4 > v0 then goto L248afa;
  #L248ab8.  v0:= v4 ^> 18;
  #L248abc.  v0:= v0 ^| 240;
  #L248ac0.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248ac6.  v0:= v4 ^> 12;
  #L248aca.  v0:= v0 ^& 63;
  #L248ace.  v0:= v0 ^| 128;
  #L248ad2.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248ad8.  v0:= v4 ^> 6;
  #L248adc.  v0:= v0 ^& 63;
  #L248ae0.  v0:= v0 ^| 128;
  #L248ae4.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248aea.  v0:= v4 ^& 63;
  #L248aee.  v0:= v0 ^| 128;
  #L248af2.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248af8.  goto L248a2e;
  #L248afa.  v0:= new `java.lang.IllegalArgumentException`;
  #L248afe.  v1:= new `java.lang.StringBuilder`;
  #L248b02.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248b08.  v2:= "Unexpected code point: " @kind object;
  #L248b0c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248b12.  v1:= temp @kind object;
  #L248b14.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L248b1a.  v2:= temp @kind object;
  #L248b1c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248b22.  v1:= temp @kind object;
  #L248b24.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248b2a.  v1:= temp @kind object;
  #L248b2c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248b32.  throw v0;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L248b44.  call temp:= `writeUtf8CodePoint`(v1, v2) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L248b4a.  v0:= temp @kind object;
  #L248b4c.  return v0 @kind object;
}
