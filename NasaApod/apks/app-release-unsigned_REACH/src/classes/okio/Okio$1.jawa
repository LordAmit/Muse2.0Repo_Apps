record `okio.Okio$1` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `java.io.OutputStream` `okio.Okio$1.val$out` @AccessFlag FINAL_SYNTHETIC;
  `okio.Timeout` `okio.Okio$1.val$timeout` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Okio$1` v0 @kind this, `okio.Timeout` v1 @kind object, `java.io.OutputStream` v2 @kind object) @signature `Lokio/Okio$1;.<init>:(Lokio/Timeout;Ljava/io/OutputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L21e51c.  v0.`okio.Okio$1.val$timeout` @type ^`okio.Timeout` := v1 @kind object;
  #L21e520.  v0.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` := v2 @kind object;
  #L21e524.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21e52a.  return @kind void;
}
procedure `void` `close`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21e53c.  v0:= v1.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L21e540.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L21e546.  return @kind void;
}
procedure `void` `flush`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21e558.  v0:= v1.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L21e55c.  call `flush`(v0) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L21e562.  return @kind void;
}
procedure `okio.Timeout` `timeout`(`okio.Okio$1` v1 @kind this) @signature `Lokio/Okio$1;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21e574.  v0:= v1.`okio.Okio$1.val$timeout` @type ^`okio.Timeout` @kind object;
  #L21e578.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Okio$1` v2 @kind this) @signature `Lokio/Okio$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L21e58c.  v0:= new `java.lang.StringBuilder`;
  #L21e590.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21e596.  v1:= "sink(" @kind object;
  #L21e59a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21e5a0.  v0:= temp @kind object;
  #L21e5a2.  v1:= v2.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L21e5a6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21e5ac.  v0:= temp @kind object;
  #L21e5ae.  v1:= ")" @kind object;
  #L21e5b2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21e5b8.  v0:= temp @kind object;
  #L21e5ba.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21e5c0.  v0:= temp @kind object;
  #L21e5c2.  return v0 @kind object;
}
procedure `void` `write`(`okio.Okio$1` v8 @kind this, `okio.Buffer` v9 @kind object @name `source`, `long` v10 @name `byteCount`) @signature `Lokio/Okio$1;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L21e5d4.  v2:= 0L;
  #L21e5d8.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L21e5dc.  v4:= v10 @kind wide;
  #L21e5de.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L21e5e4.  v0:= lcmp(v10, v2);
  #L21e5e8.  if v0 <= 0 then goto L21e65c;
  #L21e5ec.  v0:= v8.`okio.Okio$1.val$timeout` @type ^`okio.Timeout` @kind object;
  #L21e5f0.  call `throwIfReached`(v0) @signature `Lokio/Timeout;.throwIfReached:()V` @kind virtual;
  #L21e5f6.  v6:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L21e5fa.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L21e5fe.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L21e602.  v0:= v0 - v1 @kind int;
  #L21e604.  v0:= (`long`) v0 @kind i2l;
  #L21e606.  call temp:= `min`(v10, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L21e60c.  v0:= temp @kind wide;
  #L21e60e.  v7:= (`int`) v0 @kind l2i;
  #L21e610.  v0:= v8.`okio.Okio$1.val$out` @type ^`java.io.OutputStream` @kind object;
  #L21e614.  v1:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L21e618.  v4:= v6.`okio.Segment.pos` @type ^`int`;
  #L21e61c.  call `write`(v0, v1, v4, v7) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L21e622.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L21e626.  v0:= v0 + v7 @kind int;
  #L21e628.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L21e62c.  v0:= (`long`) v7 @kind i2l;
  #L21e62e.  v10:= v10 - v0 @kind long;
  #L21e630.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L21e634.  v4:= (`long`) v7 @kind i2l;
  #L21e636.  v0:= v0 - v4 @kind long;
  #L21e638.  v9.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L21e63c.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L21e640.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L21e644.  if v0 != v1 then goto L21e5e4;
  #L21e648.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L21e64e.  v0:= temp @kind object;
  #L21e650.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L21e654.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L21e65a.  goto L21e5e4;
  #L21e65c.  return @kind void;
}
