record `okio.Buffer$UnsafeCursor` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `okio.Buffer` `okio.Buffer$UnsafeCursor.buffer` @AccessFlag PUBLIC;
  `byte`[] `okio.Buffer$UnsafeCursor.data` @AccessFlag PUBLIC;
  `int` `okio.Buffer$UnsafeCursor.end` @AccessFlag PUBLIC;
  `long` `okio.Buffer$UnsafeCursor.offset` @AccessFlag PUBLIC;
  `boolean` `okio.Buffer$UnsafeCursor.readWrite` @AccessFlag PUBLIC;
  `okio.Segment` `okio.Buffer$UnsafeCursor.segment` @AccessFlag PRIVATE;
  `int` `okio.Buffer$UnsafeCursor.start` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`okio.Buffer$UnsafeCursor` v3 @kind this) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1abc8c.  v2:= -1I;
  #L1abc8e.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1abc94.  v0:= -1L;
  #L1abc98.  v3.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1abc9c.  v3.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v2;
  #L1abca0.  v3.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v2;
  #L1abca4.  return @kind void;
}
procedure `void` `close`(`okio.Buffer$UnsafeCursor` v4 @kind this) @signature `Lokio/Buffer$UnsafeCursor;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1abcb8.  v3:= -1I;
  #L1abcba.  v2:= 0I;
  #L1abcbc.  v0:= v4.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1abcc0.  if v0 != 0 then goto L1abcd4;
  #L1abcc4.  v0:= new `java.lang.IllegalStateException`;
  #L1abcc8.  v1:= "not attached to a buffer" @kind object;
  #L1abccc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1abcd2.  throw v0;
  #L1abcd4.  v4.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v2 @kind object;
  #L1abcd8.  v4.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v2 @kind object;
  #L1abcdc.  v0:= -1L;
  #L1abce0.  v4.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1abce4.  v4.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v2 @kind object;
  #L1abce8.  v4.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v3;
  #L1abcec.  v4.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v3;
  #L1abcf0.  return @kind void;
}
procedure `long` `expandBuffer`(`okio.Buffer$UnsafeCursor` v8 @kind this, `int` v9 @name `minByteCount`) @signature `Lokio/Buffer$UnsafeCursor;.expandBuffer:(I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1abd04.  v5:= 8192I;
  #L1abd08.  if v9 > 0 then goto L1abd3e;
  #L1abd0c.  v4:= new `java.lang.IllegalArgumentException`;
  #L1abd10.  v5:= new `java.lang.StringBuilder`;
  #L1abd14.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1abd1a.  v6:= "minByteCount <= 0: " @kind object;
  #L1abd1e.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1abd24.  v5:= temp @kind object;
  #L1abd26.  call temp:= `append`(v5, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1abd2c.  v5:= temp @kind object;
  #L1abd2e.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1abd34.  v5:= temp @kind object;
  #L1abd36.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1abd3c.  throw v4;
  #L1abd3e.  if v9 <= v5 then goto L1abd74;
  #L1abd42.  v4:= new `java.lang.IllegalArgumentException`;
  #L1abd46.  v5:= new `java.lang.StringBuilder`;
  #L1abd4a.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1abd50.  v6:= "minByteCount > Segment.SIZE: " @kind object;
  #L1abd54.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1abd5a.  v5:= temp @kind object;
  #L1abd5c.  call temp:= `append`(v5, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1abd62.  v5:= temp @kind object;
  #L1abd64.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1abd6a.  v5:= temp @kind object;
  #L1abd6c.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1abd72.  throw v4;
  #L1abd74.  v4:= v8.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1abd78.  if v4 != 0 then goto L1abd8c;
  #L1abd7c.  v4:= new `java.lang.IllegalStateException`;
  #L1abd80.  v5:= "not attached to a buffer" @kind object;
  #L1abd84.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1abd8a.  throw v4;
  #L1abd8c.  v4:= v8.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` @kind boolean;
  #L1abd90.  if v4 != 0 then goto L1abda4;
  #L1abd94.  v4:= new `java.lang.IllegalStateException`;
  #L1abd98.  v5:= "expandBuffer() only permitted for read/write buffers" @kind object;
  #L1abd9c.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1abda2.  throw v4;
  #L1abda4.  v4:= v8.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1abda8.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1abdac.  v4:= v8.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1abdb0.  call temp:= `writableSegment`(v4, v9) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L1abdb6.  v3:= temp @kind object;
  #L1abdb8.  v4:= v3.`okio.Segment.limit` @type ^`int`;
  #L1abdbc.  v2:= v4 - 8192;
  #L1abdc0.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L1abdc4.  v4:= v8.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1abdc8.  v6:= (`long`) v2 @kind i2l;
  #L1abdca.  v6:= v6 + v0 @kind long;
  #L1abdcc.  v4.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L1abdd0.  v8.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v3 @kind object;
  #L1abdd4.  v8.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1abdd8.  v4:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1abddc.  v8.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v4 @kind object;
  #L1abde0.  v4:= v2 - 8192;
  #L1abde4.  v8.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v4;
  #L1abde8.  v8.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v5;
  #L1abdec.  v4:= (`long`) v2 @kind i2l;
  #L1abdee.  return v4 @kind wide;
}
procedure `int` `next`(`okio.Buffer$UnsafeCursor` v4 @kind this) @signature `Lokio/Buffer$UnsafeCursor;.next:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1abe00.  v0:= v4.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1abe04.  v2:= v4.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1abe08.  v2:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1abe0c.  v0:= lcmp(v0, v2);
  #L1abe10.  if v0 != 0 then goto L1abe20;
  #L1abe14.  v0:= new `java.lang.IllegalStateException`;
  #L1abe18.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1abe1e.  throw v0;
  #L1abe20.  v0:= v4.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1abe24.  v2:= -1L;
  #L1abe28.  v0:= lcmp(v0, v2);
  #L1abe2c.  if v0 != 0 then goto L1abe3e;
  #L1abe30.  v0:= 0L;
  #L1abe34.  call temp:= `seek`(v4, v0) @signature `Lokio/Buffer$UnsafeCursor;.seek:(J)I` @kind virtual;
  #L1abe3a.  v0:= temp;
  #L1abe3c.  return v0;
  #L1abe3e.  v0:= v4.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1abe42.  v2:= v4.`okio.Buffer$UnsafeCursor.end` @type ^`int`;
  #L1abe46.  v3:= v4.`okio.Buffer$UnsafeCursor.start` @type ^`int`;
  #L1abe4a.  v2:= v2 - v3 @kind int;
  #L1abe4c.  v2:= (`long`) v2 @kind i2l;
  #L1abe4e.  v0:= v0 + v2 @kind long;
  #L1abe50.  call temp:= `seek`(v4, v0) @signature `Lokio/Buffer$UnsafeCursor;.seek:(J)I` @kind virtual;
  #L1abe56.  v0:= temp;
  #L1abe58.  goto L1abe3c;
}
procedure `long` `resizeBuffer`(`okio.Buffer$UnsafeCursor` v13 @kind this, `long` v14 @name `newSize`) @signature `Lokio/Buffer$UnsafeCursor;.resizeBuffer:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1abe6c.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1abe70.  if v10 != 0 then goto L1abe84;
  #L1abe74.  v10:= new `java.lang.IllegalStateException`;
  #L1abe78.  v11:= "not attached to a buffer" @kind object;
  #L1abe7c.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1abe82.  throw v10;
  #L1abe84.  v10:= v13.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` @kind boolean;
  #L1abe88.  if v10 != 0 then goto L1abe9c;
  #L1abe8c.  v10:= new `java.lang.IllegalStateException`;
  #L1abe90.  v11:= "resizeBuffer() only permitted for read/write buffers" @kind object;
  #L1abe94.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1abe9a.  throw v10;
  #L1abe9c.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1abea0.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1abea4.  v10:= lcmp(v14, v6);
  #L1abea8.  if v10 > 0 then goto L1abf6c;
  #L1abeac.  v10:= 0L;
  #L1abeb0.  v10:= lcmp(v14, v10);
  #L1abeb4.  if v10 >= 0 then goto L1abeea;
  #L1abeb8.  v10:= new `java.lang.IllegalArgumentException`;
  #L1abebc.  v11:= new `java.lang.StringBuilder`;
  #L1abec0.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1abec6.  v12:= "newSize < 0: " @kind object;
  #L1abeca.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1abed0.  v11:= temp @kind object;
  #L1abed2.  call temp:= `append`(v11, v14) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1abed8.  v11:= temp @kind object;
  #L1abeda.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1abee0.  v11:= temp @kind object;
  #L1abee2.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1abee8.  throw v10;
  #L1abeea.  v2:= v6 - v14 @kind long;
  #L1abeee.  v10:= 0L;
  #L1abef2.  v10:= lcmp(v2, v10);
  #L1abef6.  if v10 <= 0 then goto L1abf46;
  #L1abefa.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1abefe.  v10:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1abf02.  v8:= v10.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1abf06.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1abf0a.  v11:= v8.`okio.Segment.pos` @type ^`int`;
  #L1abf0e.  v9:= v10 - v11 @kind int;
  #L1abf12.  v10:= (`long`) v9 @kind i2l;
  #L1abf14.  v10:= lcmp(v10, v2);
  #L1abf18.  if v10 > 0 then goto L1abf38;
  #L1abf1c.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1abf20.  call temp:= `pop`(v8) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1abf26.  v11:= temp @kind object;
  #L1abf28.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v11 @kind object;
  #L1abf2c.  call `recycle`(v8) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1abf32.  v10:= (`long`) v9 @kind i2l;
  #L1abf34.  v2:= v2 - v10 @kind long;
  #L1abf36.  goto L1abeee;
  #L1abf38.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1abf3c.  v10:= (`long`) v10 @kind i2l;
  #L1abf3e.  v10:= v10 - v2 @kind long;
  #L1abf40.  v10:= (`int`) v10 @kind l2i;
  #L1abf42.  v8.`okio.Segment.limit` @type ^`int` := v10;
  #L1abf46.  v10:= 0I;
  #L1abf48.  v13.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v10 @kind object;
  #L1abf4c.  v13.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v14 @kind wide;
  #L1abf50.  v10:= 0I;
  #L1abf52.  v13.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v10 @kind object;
  #L1abf56.  v10:= -1I;
  #L1abf58.  v13.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v10;
  #L1abf5c.  v10:= -1I;
  #L1abf5e.  v13.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v10;
  #L1abf62.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1abf66.  v10.`okio.Buffer.size` @type ^`long` := v14 @kind wide;
  #L1abf6a.  return v6 @kind wide;
  #L1abf6c.  v10:= lcmp(v14, v6);
  #L1abf70.  if v10 <= 0 then goto L1abf62;
  #L1abf74.  v4:= 1I;
  #L1abf76.  v0:= v14 - v6 @kind long;
  #L1abf7a.  v10:= 0L;
  #L1abf7e.  v10:= lcmp(v0, v10);
  #L1abf82.  if v10 <= 0 then goto L1abf62;
  #L1abf86.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1abf8a.  v11:= 1I;
  #L1abf8c.  call temp:= `writableSegment`(v10, v11) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L1abf92.  v8:= temp @kind object;
  #L1abf94.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1abf98.  v10:= v10 - 8192;
  #L1abf9c.  v10:= (`long`) v10 @kind i2l;
  #L1abf9e.  call temp:= `min`(v0, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1abfa4.  v10:= temp @kind wide;
  #L1abfa6.  v5:= (`int`) v10 @kind l2i;
  #L1abfa8.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1abfac.  v10:= v10 + v5 @kind int;
  #L1abfae.  v8.`okio.Segment.limit` @type ^`int` := v10;
  #L1abfb2.  v10:= (`long`) v5 @kind i2l;
  #L1abfb4.  v0:= v0 - v10 @kind long;
  #L1abfb6.  if v4 == 0 then goto L1abf7a;
  #L1abfba.  v13.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v8 @kind object;
  #L1abfbe.  v13.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v6 @kind wide;
  #L1abfc2.  v10:= v8.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1abfc6.  v13.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v10 @kind object;
  #L1abfca.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1abfce.  v10:= v10 - v5 @kind int;
  #L1abfd0.  v13.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v10;
  #L1abfd4.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1abfd8.  v13.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v10;
  #L1abfdc.  v4:= 0I;
  #L1abfde.  goto L1abf7a;
}
procedure `int` `seek`(`okio.Buffer$UnsafeCursor` v23 @kind this, `long` v24 @name `offset`) @signature `Lokio/Buffer$UnsafeCursor;.seek:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L1abff0.  v16:= -1L;
  #L1abff4.  v16:= lcmp(v24, v16);
  #L1abff8.  if v16 < 0 then goto L1ac01c;
  #L1abffc.  v0:= v23 @kind object;
  #L1ac000.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ac004.  v16:= v0 @kind object;
  #L1ac008.  v0:= v16 @kind object;
  #L1ac00c.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ac010.  v16:= v0 @kind wide;
  #L1ac014.  v16:= lcmp(v24, v16);
  #L1ac018.  if v16 <= 0 then goto L1ac07c;
  #L1ac01c.  v16:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L1ac020.  v17:= "offset=%s > size=%s" @kind object;
  #L1ac024.  v18:= 2I;
  #L1ac028.  v0:= v18;
  #L1ac02c.  v0:= new `java.lang.Object`[v0];
  #L1ac030.  v18:= v0 @kind object;
  #L1ac034.  v19:= 0I;
  #L1ac038.  call temp:= `valueOf`(v24) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1ac03e.  v20:= temp @kind object;
  #L1ac040.  v18[v19]:= v20 @kind object;
  #L1ac044.  v19:= 1I;
  #L1ac048.  v0:= v23 @kind object;
  #L1ac04c.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ac050.  v20:= v0 @kind object;
  #L1ac054.  v0:= v20 @kind object;
  #L1ac058.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ac05c.  v20:= v0 @kind wide;
  #L1ac060.  call temp:= `valueOf`(v20) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1ac066.  v20:= temp @kind object;
  #L1ac068.  v18[v19]:= v20 @kind object;
  #L1ac06c.  call temp:= `format`(v17, v18) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1ac072.  v17:= temp @kind object;
  #L1ac074.  call `<init>`(v16, v17) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ac07a.  throw v16;
  #L1ac07c.  v16:= -1L;
  #L1ac080.  v16:= lcmp(v24, v16);
  #L1ac084.  if v16 == 0 then goto L1ac0a8;
  #L1ac088.  v0:= v23 @kind object;
  #L1ac08c.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ac090.  v16:= v0 @kind object;
  #L1ac094.  v0:= v16 @kind object;
  #L1ac098.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ac09c.  v16:= v0 @kind wide;
  #L1ac0a0.  v16:= lcmp(v24, v16);
  #L1ac0a4.  if v16 != 0 then goto L1ac0fa;
  #L1ac0a8.  v16:= 0I;
  #L1ac0ac.  v0:= v16 @kind object;
  #L1ac0b0.  v1:= v23 @kind object;
  #L1ac0b4.  v1.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v0 @kind object;
  #L1ac0b8.  v0:= v24 @kind wide;
  #L1ac0bc.  v2:= v23 @kind object;
  #L1ac0c0.  v2.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1ac0c4.  v16:= 0I;
  #L1ac0c8.  v0:= v16 @kind object;
  #L1ac0cc.  v1:= v23 @kind object;
  #L1ac0d0.  v1.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v0 @kind object;
  #L1ac0d4.  v16:= -1I;
  #L1ac0d8.  v0:= v16;
  #L1ac0dc.  v1:= v23 @kind object;
  #L1ac0e0.  v1.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v0;
  #L1ac0e4.  v16:= -1I;
  #L1ac0e8.  v0:= v16;
  #L1ac0ec.  v1:= v23 @kind object;
  #L1ac0f0.  v1.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v0;
  #L1ac0f4.  v16:= -1I;
  #L1ac0f8.  return v16;
  #L1ac0fa.  v8:= 0L;
  #L1ac0fe.  v0:= v23 @kind object;
  #L1ac102.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ac106.  v16:= v0 @kind object;
  #L1ac10a.  v0:= v16 @kind object;
  #L1ac10e.  v6:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ac112.  v0:= v23 @kind object;
  #L1ac116.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ac11a.  v16:= v0 @kind object;
  #L1ac11e.  v0:= v16 @kind object;
  #L1ac122.  v4:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ac126.  v0:= v23 @kind object;
  #L1ac12a.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ac12e.  v16:= v0 @kind object;
  #L1ac132.  v0:= v16 @kind object;
  #L1ac136.  v14:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ac13a.  v0:= v23 @kind object;
  #L1ac13e.  v0:= v0.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` @kind object;
  #L1ac142.  v16:= v0 @kind object;
  #L1ac146.  if v16 == 0 then goto L1ac19e;
  #L1ac14a.  v0:= v23 @kind object;
  #L1ac14e.  v0:= v0.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1ac152.  v16:= v0 @kind wide;
  #L1ac156.  v0:= v23 @kind object;
  #L1ac15a.  v0:= v0.`okio.Buffer$UnsafeCursor.start` @type ^`int`;
  #L1ac15e.  v18:= v0;
  #L1ac162.  v0:= v23 @kind object;
  #L1ac166.  v0:= v0.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` @kind object;
  #L1ac16a.  v19:= v0 @kind object;
  #L1ac16e.  v0:= v19 @kind object;
  #L1ac172.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L1ac176.  v19:= v0;
  #L1ac17a.  v18:= v18 - v19 @kind int;
  #L1ac17e.  v0:= v18;
  #L1ac182.  v0:= (`long`) v0 @kind i2l;
  #L1ac184.  v18:= v0 @kind wide;
  #L1ac188.  v12:= v16 - v18 @kind long;
  #L1ac18c.  v16:= lcmp(v12, v24);
  #L1ac190.  if v16 <= 0 then goto L1ac204;
  #L1ac194.  v6:= v12 @kind wide;
  #L1ac196.  v0:= v23 @kind object;
  #L1ac19a.  v14:= v0.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` @kind object;
  #L1ac19e.  v16:= v6 - v24 @kind long;
  #L1ac1a2.  v18:= v24 - v8 @kind long;
  #L1ac1a6.  v16:= lcmp(v16, v18);
  #L1ac1aa.  if v16 <= 0 then goto L1ac210;
  #L1ac1ae.  v5:= v4 @kind object;
  #L1ac1b0.  v10:= v8 @kind wide;
  #L1ac1b2.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L1ac1b6.  v16:= v0;
  #L1ac1ba.  v0:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ac1be.  v17:= v0;
  #L1ac1c2.  v16:= v16 - v17 @kind int;
  #L1ac1c6.  v0:= v16;
  #L1ac1ca.  v0:= (`long`) v0 @kind i2l;
  #L1ac1cc.  v16:= v0 @kind wide;
  #L1ac1d0.  v16:= v16 + v10 @kind long;
  #L1ac1d4.  v16:= lcmp(v24, v16);
  #L1ac1d8.  if v16 < 0 then goto L1ac244;
  #L1ac1dc.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L1ac1e0.  v16:= v0;
  #L1ac1e4.  v0:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ac1e8.  v17:= v0;
  #L1ac1ec.  v16:= v16 - v17 @kind int;
  #L1ac1f0.  v0:= v16;
  #L1ac1f4.  v0:= (`long`) v0 @kind i2l;
  #L1ac1f6.  v16:= v0 @kind wide;
  #L1ac1fa.  v10:= v10 + v16 @kind long;
  #L1ac1fe.  v5:= v5.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1ac202.  goto L1ac1b2;
  #L1ac204.  v8:= v12 @kind wide;
  #L1ac206.  v0:= v23 @kind object;
  #L1ac20a.  v4:= v0.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` @kind object;
  #L1ac20e.  goto L1ac19e;
  #L1ac210.  v5:= v14 @kind object;
  #L1ac212.  v10:= v6 @kind wide;
  #L1ac214.  v16:= lcmp(v10, v24);
  #L1ac218.  if v16 <= 0 then goto L1ac244;
  #L1ac21c.  v5:= v5.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ac220.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L1ac224.  v16:= v0;
  #L1ac228.  v0:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ac22c.  v17:= v0;
  #L1ac230.  v16:= v16 - v17 @kind int;
  #L1ac234.  v0:= v16;
  #L1ac238.  v0:= (`long`) v0 @kind i2l;
  #L1ac23a.  v16:= v0 @kind wide;
  #L1ac23e.  v10:= v10 - v16 @kind long;
  #L1ac242.  goto L1ac214;
  #L1ac244.  v0:= v23 @kind object;
  #L1ac248.  v0:= v0.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` @kind boolean;
  #L1ac24c.  v16:= v0;
  #L1ac250.  if v16 == 0 then goto L1ac2b2;
  #L1ac254.  v0:= v5.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L1ac258.  v16:= v0;
  #L1ac25c.  if v16 == 0 then goto L1ac2b2;
  #L1ac260.  call temp:= `unsharedCopy`(v5) @signature `Lokio/Segment;.unsharedCopy:()Lokio/Segment;` @kind virtual;
  #L1ac266.  v15:= temp @kind object;
  #L1ac268.  v0:= v23 @kind object;
  #L1ac26c.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ac270.  v16:= v0 @kind object;
  #L1ac274.  v0:= v16 @kind object;
  #L1ac278.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ac27c.  v16:= v0 @kind object;
  #L1ac280.  v0:= v16 @kind object;
  #L1ac284.  if v0 != v5 then goto L1ac29c;
  #L1ac288.  v0:= v23 @kind object;
  #L1ac28c.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ac290.  v16:= v0 @kind object;
  #L1ac294.  v0:= v16 @kind object;
  #L1ac298.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v15 @kind object;
  #L1ac29c.  call temp:= `push`(v5, v15) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1ac2a2.  v5:= temp @kind object;
  #L1ac2a4.  v0:= v5.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ac2a8.  v16:= v0 @kind object;
  #L1ac2ac.  call temp:= `pop`(v16) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1ac2b2.  v0:= v23 @kind object;
  #L1ac2b6.  v0.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v5 @kind object;
  #L1ac2ba.  v0:= v24 @kind wide;
  #L1ac2be.  v2:= v23 @kind object;
  #L1ac2c2.  v2.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1ac2c6.  v0:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ac2ca.  v16:= v0 @kind object;
  #L1ac2ce.  v0:= v16 @kind object;
  #L1ac2d2.  v1:= v23 @kind object;
  #L1ac2d6.  v1.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v0 @kind object;
  #L1ac2da.  v0:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ac2de.  v16:= v0;
  #L1ac2e2.  v18:= v24 - v10 @kind long;
  #L1ac2e6.  v0:= v18 @kind wide;
  #L1ac2ea.  v0:= (`int`) v0 @kind l2i;
  #L1ac2ec.  v17:= v0;
  #L1ac2f0.  v16:= v16 + v17 @kind int;
  #L1ac2f4.  v0:= v16;
  #L1ac2f8.  v1:= v23 @kind object;
  #L1ac2fc.  v1.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v0;
  #L1ac300.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L1ac304.  v16:= v0;
  #L1ac308.  v0:= v16;
  #L1ac30c.  v1:= v23 @kind object;
  #L1ac310.  v1.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v0;
  #L1ac314.  v0:= v23 @kind object;
  #L1ac318.  v0:= v0.`okio.Buffer$UnsafeCursor.end` @type ^`int`;
  #L1ac31c.  v16:= v0;
  #L1ac320.  v0:= v23 @kind object;
  #L1ac324.  v0:= v0.`okio.Buffer$UnsafeCursor.start` @type ^`int`;
  #L1ac328.  v17:= v0;
  #L1ac32c.  v16:= v16 - v17 @kind int;
  #L1ac330.  goto L1ac0f8;
}
