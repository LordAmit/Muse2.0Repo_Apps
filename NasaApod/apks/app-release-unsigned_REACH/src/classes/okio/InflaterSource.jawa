record `okio.InflaterSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Source` @kind interface {
  `int` `okio.InflaterSource.bufferBytesHeldByInflater` @AccessFlag PRIVATE;
  `boolean` `okio.InflaterSource.closed` @AccessFlag PRIVATE;
  `java.util.zip.Inflater` `okio.InflaterSource.inflater` @AccessFlag PRIVATE_FINAL;
  `okio.BufferedSource` `okio.InflaterSource.source` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.InflaterSource` v2 @kind this, `okio.BufferedSource` v3 @kind object @name `source`, `java.util.zip.Inflater` v4 @kind object @name `inflater`) @signature `Lokio/InflaterSource;.<init>:(Lokio/BufferedSource;Ljava/util/zip/Inflater;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L21e23c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21e242.  if v3 != 0 then goto L21e256;
  #L21e246.  v0:= new `java.lang.IllegalArgumentException`;
  #L21e24a.  v1:= "source == null" @kind object;
  #L21e24e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e254.  throw v0;
  #L21e256.  if v4 != 0 then goto L21e26a;
  #L21e25a.  v0:= new `java.lang.IllegalArgumentException`;
  #L21e25e.  v1:= "inflater == null" @kind object;
  #L21e262.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e268.  throw v0;
  #L21e26a.  v2.`okio.InflaterSource.source` @type ^`okio.BufferedSource` := v3 @kind object;
  #L21e26e.  v2.`okio.InflaterSource.inflater` @type ^`java.util.zip.Inflater` := v4 @kind object;
  #L21e272.  return @kind void;
}
procedure `void` `<init>`(`okio.InflaterSource` v1 @kind this, `okio.Source` v2 @kind object @name `source`, `java.util.zip.Inflater` v3 @kind object @name `inflater`) @signature `Lokio/InflaterSource;.<init>:(Lokio/Source;Ljava/util/zip/Inflater;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L21e284.  call temp:= `buffer`(v2) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L21e28a.  v0:= temp @kind object;
  #L21e28c.  call `<init>`(v1, v0, v3) @signature `Lokio/InflaterSource;.<init>:(Lokio/BufferedSource;Ljava/util/zip/Inflater;)V` @kind direct;
  #L21e292.  return @kind void;
}
procedure `void` `releaseInflatedBytes`(`okio.InflaterSource` v4 @kind this) @signature `Lokio/InflaterSource;.releaseInflatedBytes:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L21e2a4.  v1:= v4.`okio.InflaterSource.bufferBytesHeldByInflater` @type ^`int`;
  #L21e2a8.  if v1 != 0 then goto L21e2ae;
  #L21e2ac.  return @kind void;
  #L21e2ae.  v1:= v4.`okio.InflaterSource.bufferBytesHeldByInflater` @type ^`int`;
  #L21e2b2.  v2:= v4.`okio.InflaterSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L21e2b6.  call temp:= `getRemaining`(v2) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L21e2bc.  v2:= temp;
  #L21e2be.  v0:= v1 - v2 @kind int;
  #L21e2c2.  v1:= v4.`okio.InflaterSource.bufferBytesHeldByInflater` @type ^`int`;
  #L21e2c6.  v1:= v1 - v0 @kind int;
  #L21e2c8.  v4.`okio.InflaterSource.bufferBytesHeldByInflater` @type ^`int` := v1;
  #L21e2cc.  v1:= v4.`okio.InflaterSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e2d0.  v2:= (`long`) v0 @kind i2l;
  #L21e2d2.  call `skip`(v1, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L21e2d8.  goto L21e2ac;
}
procedure `void` `close`(`okio.InflaterSource` v1 @kind this) @signature `Lokio/InflaterSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21e2ec.  v0:= v1.`okio.InflaterSource.closed` @type ^`boolean` @kind boolean;
  #L21e2f0.  if v0 == 0 then goto L21e2f6;
  #L21e2f4.  return @kind void;
  #L21e2f6.  v0:= v1.`okio.InflaterSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L21e2fa.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L21e300.  v0:= 1I;
  #L21e302.  v1.`okio.InflaterSource.closed` @type ^`boolean` := v0 @kind boolean;
  #L21e306.  v0:= v1.`okio.InflaterSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e30a.  call `close`(v0) @signature `Lokio/BufferedSource;.close:()V` @kind interface;
  #L21e310.  goto L21e2f4;
}
procedure `long` `read`(`okio.InflaterSource` v10 @kind this, `okio.Buffer` v11 @kind object @name `sink`, `long` v12 @name `byteCount`) @signature `Lokio/InflaterSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L21e324.  v6:= 0L;
  #L21e328.  v5:= lcmp(v12, v6);
  #L21e32c.  if v5 >= 0 then goto L21e362;
  #L21e330.  v5:= new `java.lang.IllegalArgumentException`;
  #L21e334.  v6:= new `java.lang.StringBuilder`;
  #L21e338.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21e33e.  v7:= "byteCount < 0: " @kind object;
  #L21e342.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21e348.  v6:= temp @kind object;
  #L21e34a.  call temp:= `append`(v6, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L21e350.  v6:= temp @kind object;
  #L21e352.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21e358.  v6:= temp @kind object;
  #L21e35a.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e360.  throw v5;
  #L21e362.  v5:= v10.`okio.InflaterSource.closed` @type ^`boolean` @kind boolean;
  #L21e366.  if v5 == 0 then goto L21e37a;
  #L21e36a.  v5:= new `java.lang.IllegalStateException`;
  #L21e36e.  v6:= "closed" @kind object;
  #L21e372.  call `<init>`(v5, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e378.  throw v5;
  #L21e37a.  v5:= lcmp(v12, v6);
  #L21e37e.  if v5 != 0 then goto L21e384;
  #L21e382.  return v6 @kind wide;
  #L21e384.  call temp:= `refill`(v10) @signature `Lokio/InflaterSource;.refill:()Z` @kind virtual;
  #L21e38a.  v2:= temp;
  #L21e38c.  v5:= 1I;
  #Try_start0.  
  #L21e38e.  call temp:= `writableSegment`(v11, v5) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L21e394.  v3:= temp @kind object;
  #L21e396.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L21e39a.  v5:= v5 - 8192;
  #L21e39e.  v6:= (`long`) v5 @kind i2l;
  #L21e3a0.  call temp:= `min`(v12, v6) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L21e3a6.  v6:= temp @kind wide;
  #L21e3a8.  v4:= (`int`) v6 @kind l2i;
  #L21e3aa.  v5:= v10.`okio.InflaterSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L21e3ae.  v6:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L21e3b2.  v7:= v3.`okio.Segment.limit` @type ^`int`;
  #L21e3b6.  call temp:= `inflate`(v5, v6, v7, v4) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #L21e3bc.  v0:= temp;
  #L21e3be.  if v0 <= 0 then goto L21e3dc;
  #L21e3c2.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L21e3c6.  v5:= v5 + v0 @kind int;
  #L21e3c8.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L21e3cc.  v6:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L21e3d0.  v8:= (`long`) v0 @kind i2l;
  #L21e3d2.  v6:= v6 + v8 @kind long;
  #L21e3d4.  v11.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L21e3d8.  v6:= (`long`) v0 @kind i2l;
  #L21e3da.  goto L21e382;
  #L21e3dc.  v5:= v10.`okio.InflaterSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L21e3e0.  call temp:= `finished`(v5) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L21e3e6.  v5:= temp;
  #L21e3e8.  if v5 != 0 then goto L21e3fc;
  #L21e3ec.  v5:= v10.`okio.InflaterSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L21e3f0.  call temp:= `needsDictionary`(v5) @signature `Ljava/util/zip/Inflater;.needsDictionary:()Z` @kind virtual;
  #L21e3f6.  v5:= temp;
  #L21e3f8.  if v5 == 0 then goto L21e426;
  #L21e3fc.  call `releaseInflatedBytes`(v10) @signature `Lokio/InflaterSource;.releaseInflatedBytes:()V` @kind direct;
  #L21e402.  v5:= v3.`okio.Segment.pos` @type ^`int`;
  #L21e406.  v6:= v3.`okio.Segment.limit` @type ^`int`;
  #L21e40a.  if v5 != v6 then goto L21e420;
  #L21e40e.  call temp:= `pop`(v3) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L21e414.  v5:= temp @kind object;
  #L21e416.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v5 @kind object;
  #L21e41a.  call `recycle`(v3) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L21e420.  v6:= -1L;
  #L21e424.  goto L21e382;
  #L21e426.  if v2 == 0 then goto L21e384;
  #L21e42a.  v5:= new `java.io.EOFException`;
  #L21e42e.  v6:= "source exhausted prematurely" @kind object;
  #L21e432.  call `<init>`(v5, v6) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e438.  throw v5;
  #Try_end0.  
  #L21e43a.  v1:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L21e43c.  v5:= new `java.io.IOException`;
  #L21e440.  call `<init>`(v5, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L21e446.  throw v5;
  catch `java.util.zip.DataFormatException` @[Try_start0..Try_end0] goto L21e43a;
}
procedure `boolean` `refill`(`okio.InflaterSource` v6 @kind this) @signature `Lokio/InflaterSource;.refill:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L21e468.  v1:= 0I;
  #L21e46a.  v2:= v6.`okio.InflaterSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L21e46e.  call temp:= `needsInput`(v2) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L21e474.  v2:= temp;
  #L21e476.  if v2 != 0 then goto L21e47c;
  #L21e47a.  return v1;
  #L21e47c.  call `releaseInflatedBytes`(v6) @signature `Lokio/InflaterSource;.releaseInflatedBytes:()V` @kind direct;
  #L21e482.  v2:= v6.`okio.InflaterSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L21e486.  call temp:= `getRemaining`(v2) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L21e48c.  v2:= temp;
  #L21e48e.  if v2 == 0 then goto L21e4a2;
  #L21e492.  v1:= new `java.lang.IllegalStateException`;
  #L21e496.  v2:= "?" @kind object;
  #L21e49a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e4a0.  throw v1;
  #L21e4a2.  v2:= v6.`okio.InflaterSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e4a6.  call temp:= `exhausted`(v2) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L21e4ac.  v2:= temp;
  #L21e4ae.  if v2 == 0 then goto L21e4b6;
  #L21e4b2.  v1:= 1I;
  #L21e4b4.  goto L21e47a;
  #L21e4b6.  v2:= v6.`okio.InflaterSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e4ba.  call temp:= `buffer`(v2) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21e4c0.  v2:= temp @kind object;
  #L21e4c2.  v0:= v2.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L21e4c6.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L21e4ca.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L21e4ce.  v2:= v2 - v3 @kind int;
  #L21e4d0.  v6.`okio.InflaterSource.bufferBytesHeldByInflater` @type ^`int` := v2;
  #L21e4d4.  v2:= v6.`okio.InflaterSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L21e4d8.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L21e4dc.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L21e4e0.  v5:= v6.`okio.InflaterSource.bufferBytesHeldByInflater` @type ^`int`;
  #L21e4e4.  call `setInput`(v2, v3, v4, v5) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L21e4ea.  goto L21e47a;
}
procedure `okio.Timeout` `timeout`(`okio.InflaterSource` v1 @kind this) @signature `Lokio/InflaterSource;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21e4fc.  v0:= v1.`okio.InflaterSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21e500.  call temp:= `timeout`(v0) @signature `Lokio/BufferedSource;.timeout:()Lokio/Timeout;` @kind interface;
  #L21e506.  v0:= temp @kind object;
  #L21e508.  return v0 @kind object;
}
