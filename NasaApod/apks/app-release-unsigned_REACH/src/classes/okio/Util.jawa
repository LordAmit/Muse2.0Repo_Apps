record `okio.Util` @kind class @AccessFlag FINAL {
}
global `java.nio.charset.Charset` `@@okio.Util.UTF_8` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Util;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1ae448.  v0:= "UTF-8" @kind object;
  #L1ae44c.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L1ae452.  v0:= temp @kind object;
  #L1ae454.  `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L1ae458.  return @kind void;
}
procedure `void` `<init>`(`okio.Util` v0 @kind this) @signature `Lokio/Util;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1ae46c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ae472.  return @kind void;
}
procedure `boolean` `arrayRangeEquals`(`byte`[] v3 @kind object @name `a`, `int` v4 @name `aOffset`, `byte`[] v5 @kind object @name `b`, `int` v6 @name `bOffset`, `int` v7 @name `byteCount`) @signature `Lokio/Util;.arrayRangeEquals:([BI[BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1ae484.  v0:= 0I;
  #L1ae486.  if v0 >= v7 then goto L1ae4a8;
  #L1ae48a.  v1:= v0 + v4 @kind int;
  #L1ae48e.  v1:= v3[v1] @kind byte;
  #L1ae492.  v2:= v0 + v6 @kind int;
  #L1ae496.  v2:= v5[v2] @kind byte;
  #L1ae49a.  if v1 == v2 then goto L1ae4a2;
  #L1ae49e.  v1:= 0I;
  #L1ae4a0.  return v1;
  #L1ae4a2.  v0:= v0 + 1;
  #L1ae4a6.  goto L1ae486;
  #L1ae4a8.  v1:= 1I;
  #L1ae4aa.  goto L1ae4a0;
}
procedure `void` `checkOffsetAndCount`(`long` v6 @name `size`, `long` v8 @name `offset`, `long` v10 @name `byteCount`) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1ae4bc.  v0:= v8 ^| v10 @kind long;
  #L1ae4c0.  v2:= 0L;
  #L1ae4c4.  v0:= lcmp(v0, v2);
  #L1ae4c8.  if v0 < 0 then goto L1ae4e0;
  #L1ae4cc.  v0:= lcmp(v8, v6);
  #L1ae4d0.  if v0 > 0 then goto L1ae4e0;
  #L1ae4d4.  v0:= v6 - v8 @kind long;
  #L1ae4d8.  v0:= lcmp(v0, v10);
  #L1ae4dc.  if v0 >= 0 then goto L1ae528;
  #L1ae4e0.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L1ae4e4.  v1:= "size=%s offset=%s byteCount=%s" @kind object;
  #L1ae4e8.  v2:= 3I;
  #L1ae4ea.  v2:= new `java.lang.Object`[v2];
  #L1ae4ee.  v3:= 0I;
  #L1ae4f0.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1ae4f6.  v4:= temp @kind object;
  #L1ae4f8.  v2[v3]:= v4 @kind object;
  #L1ae4fc.  v3:= 1I;
  #L1ae4fe.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1ae504.  v4:= temp @kind object;
  #L1ae506.  v2[v3]:= v4 @kind object;
  #L1ae50a.  v3:= 2I;
  #L1ae50c.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1ae512.  v4:= temp @kind object;
  #L1ae514.  v2[v3]:= v4 @kind object;
  #L1ae518.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1ae51e.  v1:= temp @kind object;
  #L1ae520.  call `<init>`(v0, v1) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ae526.  throw v0;
  #L1ae528.  return @kind void;
}
procedure `int` `reverseBytesInt`(`int` v2 @name `i`) @signature `Lokio/Util;.reverseBytesInt:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1ae53c.  v0:= -16777216I;
  #L1ae540.  v0:= v0 ^& v2 @kind int;
  #L1ae542.  v0:= v0 ^>> 24;
  #L1ae546.  v1:= 16711680I;
  #L1ae54a.  v1:= v1 ^& v2 @kind int;
  #L1ae54c.  v1:= v1 ^>> 8;
  #L1ae550.  v0:= v0 ^| v1 @kind int;
  #L1ae552.  v1:= 65280I;
  #L1ae558.  v1:= v1 ^& v2 @kind int;
  #L1ae55a.  v1:= v1 ^< 8;
  #L1ae55e.  v0:= v0 ^| v1 @kind int;
  #L1ae560.  v1:= v2 ^& 255;
  #L1ae564.  v1:= v1 ^< 24;
  #L1ae568.  v0:= v0 ^| v1 @kind int;
  #L1ae56a.  return v0;
}
procedure `long` `reverseBytesLong`(`long` v8 @name `v`) @signature `Lokio/Util;.reverseBytesLong:(J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1ae57c.  v7:= 56I;
  #L1ae580.  v6:= 40I;
  #L1ae584.  v5:= 24I;
  #L1ae588.  v4:= 8I;
  #L1ae58c.  v0:= -72057594037927936L;
  #L1ae590.  v0:= v0 ^& v8 @kind long;
  #L1ae592.  v0:= v0 ^>> v7 @kind long;
  #L1ae594.  v2:= 71776119061217280L;
  #L1ae598.  v2:= v2 ^& v8 @kind long;
  #L1ae59a.  v2:= v2 ^>> v6 @kind long;
  #L1ae59c.  v0:= v0 ^| v2 @kind long;
  #L1ae59e.  v2:= 280375465082880L;
  #L1ae5a8.  v2:= v2 ^& v8 @kind long;
  #L1ae5aa.  v2:= v2 ^>> v5 @kind long;
  #L1ae5ac.  v0:= v0 ^| v2 @kind long;
  #L1ae5ae.  v2:= 1095216660480L;
  #L1ae5b8.  v2:= v2 ^& v8 @kind long;
  #L1ae5ba.  v2:= v2 ^>> v4 @kind long;
  #L1ae5bc.  v0:= v0 ^| v2 @kind long;
  #L1ae5be.  v2:= 4278190080L;
  #L1ae5c8.  v2:= v2 ^& v8 @kind long;
  #L1ae5ca.  v2:= v2 ^< v4 @kind long;
  #L1ae5cc.  v0:= v0 ^| v2 @kind long;
  #L1ae5ce.  v2:= 16711680L;
  #L1ae5d4.  v2:= v2 ^& v8 @kind long;
  #L1ae5d6.  v2:= v2 ^< v5 @kind long;
  #L1ae5d8.  v0:= v0 ^| v2 @kind long;
  #L1ae5da.  v2:= 65280L;
  #L1ae5e0.  v2:= v2 ^& v8 @kind long;
  #L1ae5e2.  v2:= v2 ^< v6 @kind long;
  #L1ae5e4.  v0:= v0 ^| v2 @kind long;
  #L1ae5e6.  v2:= 255L;
  #L1ae5ea.  v2:= v2 ^& v8 @kind long;
  #L1ae5ec.  v2:= v2 ^< v7 @kind long;
  #L1ae5ee.  v0:= v0 ^| v2 @kind long;
  #L1ae5f0.  return v0 @kind wide;
}
procedure `short` `reverseBytesShort`(`short` v4 @name `s`) @signature `Lokio/Util;.reverseBytesShort:(S)S` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ae604.  v2:= 65535I;
  #L1ae60a.  v0:= v4 ^& v2 @kind int;
  #L1ae60e.  v2:= 65280I;
  #L1ae614.  v2:= v2 ^& v0 @kind int;
  #L1ae616.  v2:= v2 ^>> 8;
  #L1ae61a.  v3:= v0 ^& 255;
  #L1ae61e.  v3:= v3 ^< 8;
  #L1ae622.  v1:= v2 ^| v3 @kind int;
  #L1ae626.  v2:= (`short`) v1 @kind i2s;
  #L1ae628.  return v2;
}
procedure `void` `sneakyRethrow`(`java.lang.Throwable` v0 @kind object @name `t`) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1ae63c.  call `sneakyThrow2`(v0) @signature `Lokio/Util;.sneakyThrow2:(Ljava/lang/Throwable;)V` @kind static;
  #L1ae642.  return @kind void;
}
procedure `void` `sneakyThrow2`(`java.lang.Throwable` v0 @kind object @name `t`) @signature `Lokio/Util;.sneakyThrow2:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L1ae654.  throw v0;
}
