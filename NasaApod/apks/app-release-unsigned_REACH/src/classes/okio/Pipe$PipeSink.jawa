record `okio.Pipe$PipeSink` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `okio.Pipe` `okio.Pipe$PipeSink.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okio.Timeout` `okio.Pipe$PipeSink.timeout` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okio.Pipe$PipeSink` v1 @kind this, `okio.Pipe` v2 @kind object @name `this$0`) @signature `Lokio/Pipe$PipeSink;.<init>:(Lokio/Pipe;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L21e864.  v1.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` := v2 @kind object;
  #L21e868.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21e86e.  v0:= new `okio.Timeout`;
  #L21e872.  call `<init>`(v0) @signature `Lokio/Timeout;.<init>:()V` @kind direct;
  #L21e878.  v1.`okio.Pipe$PipeSink.timeout` @type ^`okio.Timeout` := v0 @kind object;
  #L21e87c.  return @kind void;
}
procedure `void` `close`(`okio.Pipe$PipeSink` v6 @kind this) @signature `Lokio/Pipe$PipeSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L21e890.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21e894.  v1:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21e898.  @monitorenter v1
  #Try_start0.  
  #L21e89a.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21e89e.  v0:= v0.`okio.Pipe.sinkClosed` @type ^`boolean` @kind boolean;
  #L21e8a2.  if v0 == 0 then goto L21e8aa;
  #L21e8a6.  @monitorexit v1
  #L21e8a8.  return @kind void;
  #L21e8aa.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21e8ae.  v0:= v0.`okio.Pipe.sourceClosed` @type ^`boolean` @kind boolean;
  #L21e8b2.  if v0 == 0 then goto L21e8e8;
  #L21e8b6.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21e8ba.  v0:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21e8be.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L21e8c4.  v2:= temp @kind wide;
  #L21e8c6.  v4:= 0L;
  #L21e8ca.  v0:= lcmp(v2, v4);
  #L21e8ce.  if v0 <= 0 then goto L21e8e8;
  #L21e8d2.  v0:= new `java.io.IOException`;
  #L21e8d6.  v2:= "source is closed" @kind object;
  #L21e8da.  call `<init>`(v0, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e8e0.  throw v0;
  #L21e8e2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21e8e4.  @monitorexit v1
  #Try_end0.  
  #L21e8e6.  throw v0;
  #Try_start1.  
  #L21e8e8.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21e8ec.  v2:= 1I;
  #L21e8ee.  v0.`okio.Pipe.sinkClosed` @type ^`boolean` := v2 @kind boolean;
  #L21e8f2.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21e8f6.  v0:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21e8fa.  call `notifyAll`(v0) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L21e900.  @monitorexit v1
  #Try_end1.  
  #L21e902.  goto L21e8a8;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L21e8e2;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L21e8e2;
}
procedure `void` `flush`(`okio.Pipe$PipeSink` v6 @kind this) @signature `Lokio/Pipe$PipeSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L21e928.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21e92c.  v1:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21e930.  @monitorenter v1
  #Try_start0.  
  #L21e932.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21e936.  v0:= v0.`okio.Pipe.sinkClosed` @type ^`boolean` @kind boolean;
  #L21e93a.  if v0 == 0 then goto L21e954;
  #L21e93e.  v0:= new `java.lang.IllegalStateException`;
  #L21e942.  v2:= "closed" @kind object;
  #L21e946.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e94c.  throw v0;
  #L21e94e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21e950.  @monitorexit v1
  #Try_end0.  
  #L21e952.  throw v0;
  #Try_start1.  
  #L21e954.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21e958.  v0:= v0.`okio.Pipe.sourceClosed` @type ^`boolean` @kind boolean;
  #L21e95c.  if v0 == 0 then goto L21e98c;
  #L21e960.  v0:= v6.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21e964.  v0:= v0.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21e968.  call temp:= `size`(v0) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L21e96e.  v2:= temp @kind wide;
  #L21e970.  v4:= 0L;
  #L21e974.  v0:= lcmp(v2, v4);
  #L21e978.  if v0 <= 0 then goto L21e98c;
  #L21e97c.  v0:= new `java.io.IOException`;
  #L21e980.  v2:= "source is closed" @kind object;
  #L21e984.  call `<init>`(v0, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e98a.  throw v0;
  #L21e98c.  @monitorexit v1
  #Try_end1.  
  #L21e98e.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L21e94e;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L21e94e;
}
procedure `okio.Timeout` `timeout`(`okio.Pipe$PipeSink` v1 @kind this) @signature `Lokio/Pipe$PipeSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21e9b4.  v0:= v1.`okio.Pipe$PipeSink.timeout` @type ^`okio.Timeout` @kind object;
  #L21e9b8.  return v0 @kind object;
}
procedure `void` `write`(`okio.Pipe$PipeSink` v12 @kind this, `okio.Buffer` v13 @kind object @name `source`, `long` v14 @name `byteCount`) @signature `Lokio/Pipe$PipeSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L21e9cc.  v10:= 0L;
  #L21e9d0.  v4:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21e9d4.  v5:= v4.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21e9d8.  @monitorenter v5
  #Try_start0.  
  #L21e9da.  v4:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21e9de.  v4:= v4.`okio.Pipe.sinkClosed` @type ^`boolean` @kind boolean;
  #L21e9e2.  if v4 == 0 then goto L21ea32;
  #L21e9e6.  v4:= new `java.lang.IllegalStateException`;
  #L21e9ea.  v6:= "closed" @kind object;
  #L21e9ee.  call `<init>`(v4, v6) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21e9f4.  throw v4;
  #L21e9f6.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21e9f8.  @monitorexit v5
  #Try_end0.  
  #L21e9fa.  throw v4;
  #Try_start1.  
  #L21e9fc.  v4:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21ea00.  v6:= v4.`okio.Pipe.maxBufferSize` @type ^`long` @kind wide;
  #L21ea04.  v4:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21ea08.  v4:= v4.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21ea0c.  call temp:= `size`(v4) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L21ea12.  v8:= temp @kind wide;
  #L21ea14.  v0:= v6 - v8 @kind long;
  #L21ea18.  v4:= lcmp(v0, v10);
  #L21ea1c.  if v4 != 0 then goto L21ea56;
  #L21ea20.  v4:= v12.`okio.Pipe$PipeSink.timeout` @type ^`okio.Timeout` @kind object;
  #L21ea24.  v6:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21ea28.  v6:= v6.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21ea2c.  call `waitUntilNotified`(v4, v6) @signature `Lokio/Timeout;.waitUntilNotified:(Ljava/lang/Object;)V` @kind virtual;
  #L21ea32.  v4:= lcmp(v14, v10);
  #L21ea36.  if v4 <= 0 then goto L21ea7e;
  #L21ea3a.  v4:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21ea3e.  v4:= v4.`okio.Pipe.sourceClosed` @type ^`boolean` @kind boolean;
  #L21ea42.  if v4 == 0 then goto L21e9fc;
  #L21ea46.  v4:= new `java.io.IOException`;
  #L21ea4a.  v6:= "source is closed" @kind object;
  #L21ea4e.  call `<init>`(v4, v6) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21ea54.  throw v4;
  #L21ea56.  call temp:= `min`(v0, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L21ea5c.  v2:= temp @kind wide;
  #L21ea5e.  v4:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21ea62.  v4:= v4.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21ea66.  call `write`(v4, v13, v2) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L21ea6c.  v14:= v14 - v2 @kind long;
  #L21ea6e.  v4:= v12.`okio.Pipe$PipeSink.this$0` @type ^`okio.Pipe` @kind object;
  #L21ea72.  v4:= v4.`okio.Pipe.buffer` @type ^`okio.Buffer` @kind object;
  #L21ea76.  call `notifyAll`(v4) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L21ea7c.  goto L21ea32;
  #L21ea7e.  @monitorexit v5
  #Try_end1.  
  #L21ea80.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L21e9f6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L21e9f6;
}
