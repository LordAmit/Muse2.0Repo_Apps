record `okio.RealBufferedSink` @kind class @AccessFlag FINAL extends `okio.BufferedSink` @kind interface {
  `okio.Buffer` `okio.RealBufferedSink.buffer` @AccessFlag PUBLIC_FINAL;
  `boolean` `okio.RealBufferedSink.closed` @AccessFlag ;
  `okio.Sink` `okio.RealBufferedSink.sink` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`okio.RealBufferedSink` v2 @kind this, `okio.Sink` v3 @kind object @name `sink`) @signature `Lokio/RealBufferedSink;.<init>:(Lokio/Sink;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L24910c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L249112.  v0:= new `okio.Buffer`;
  #L249116.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L24911c.  v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` := v0 @kind object;
  #L249120.  if v3 != 0 then goto L249134;
  #L249124.  v0:= new `java.lang.NullPointerException`;
  #L249128.  v1:= "sink == null" @kind object;
  #L24912c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249132.  throw v0;
  #L249134.  v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` := v3 @kind object;
  #L249138.  return @kind void;
}
procedure `okio.Buffer` `buffer`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24914c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249150.  return v0 @kind object;
}
procedure `void` `close`(`okio.RealBufferedSink` v6 @kind this) @signature `Lokio/RealBufferedSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L249164.  v2:= v6.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249168.  if v2 == 0 then goto L24916e;
  #L24916c.  return @kind void;
  #L24916e.  v1:= 0I;
  #Try_start0.  
  #L249170.  v2:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249174.  v2:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249178.  v4:= 0L;
  #L24917c.  v2:= lcmp(v2, v4);
  #L249180.  if v2 <= 0 then goto L24919a;
  #L249184.  v2:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L249188.  v3:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24918c.  v4:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249190.  v4:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249194.  call `write`(v2, v3, v4) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #Try_end0.  
  #Try_start1.  
  #L24919a.  v2:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24919e.  call `close`(v2) @signature `Lokio/Sink;.close:()V` @kind interface;
  #Try_end1.  
  #L2491a4.  v2:= 1I;
  #L2491a6.  v6.`okio.RealBufferedSink.closed` @type ^`boolean` := v2 @kind boolean;
  #L2491aa.  if v1 == 0 then goto L24916c;
  #L2491ae.  call `sneakyRethrow`(v1) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @kind static;
  #L2491b4.  goto L24916c;
  #L2491b6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2491b8.  v1:= v0 @kind object;
  #L2491ba.  goto L24919a;
  #L2491bc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2491be.  if v1 != 0 then goto L2491a4;
  #L2491c2.  v1:= v0 @kind object;
  #L2491c4.  goto L2491a4;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L2491b6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L2491bc;
}
procedure `okio.BufferedSink` `emit`(`okio.RealBufferedSink` v4 @kind this) @signature `Lokio/RealBufferedSink;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2491f4.  v2:= v4.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L2491f8.  if v2 == 0 then goto L24920c;
  #L2491fc.  v2:= new `java.lang.IllegalStateException`;
  #L249200.  v3:= "closed" @kind object;
  #L249204.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24920a.  throw v2;
  #L24920c.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249210.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L249216.  v0:= temp @kind wide;
  #L249218.  v2:= 0L;
  #L24921c.  v2:= lcmp(v0, v2);
  #L249220.  if v2 <= 0 then goto L249232;
  #L249224.  v2:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L249228.  v3:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24922c.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L249232.  return v4 @kind object;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.RealBufferedSink` v4 @kind this) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L249244.  v2:= v4.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249248.  if v2 == 0 then goto L24925c;
  #L24924c.  v2:= new `java.lang.IllegalStateException`;
  #L249250.  v3:= "closed" @kind object;
  #L249254.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24925a.  throw v2;
  #L24925c.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249260.  call temp:= `completeSegmentByteCount`(v2) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @kind virtual;
  #L249266.  v0:= temp @kind wide;
  #L249268.  v2:= 0L;
  #L24926c.  v2:= lcmp(v0, v2);
  #L249270.  if v2 <= 0 then goto L249282;
  #L249274.  v2:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L249278.  v3:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24927c.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L249282.  return v4 @kind object;
}
procedure `void` `flush`(`okio.RealBufferedSink` v4 @kind this) @signature `Lokio/RealBufferedSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L249294.  v0:= v4.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249298.  if v0 == 0 then goto L2492ac;
  #L24929c.  v0:= new `java.lang.IllegalStateException`;
  #L2492a0.  v1:= "closed" @kind object;
  #L2492a4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2492aa.  throw v0;
  #L2492ac.  v0:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2492b0.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2492b4.  v2:= 0L;
  #L2492b8.  v0:= lcmp(v0, v2);
  #L2492bc.  if v0 <= 0 then goto L2492d6;
  #L2492c0.  v0:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L2492c4.  v1:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2492c8.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2492cc.  v2:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2492d0.  call `write`(v0, v1, v2) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L2492d6.  v0:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L2492da.  call `flush`(v0) @signature `Lokio/Sink;.flush:()V` @kind interface;
  #L2492e0.  return @kind void;
}
procedure `boolean` `isOpen`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2492f4.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L2492f8.  if v0 != 0 then goto L249300;
  #L2492fc.  v0:= 1I;
  #L2492fe.  return v0;
  #L249300.  v0:= 0I;
  #L249302.  goto L2492fe;
}
procedure `java.io.OutputStream` `outputStream`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249314.  v0:= new `okio.RealBufferedSink$1`;
  #L249318.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSink$1;.<init>:(Lokio/RealBufferedSink;)V` @kind direct;
  #L24931e.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249330.  v0:= v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L249334.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L24933a.  v0:= temp @kind object;
  #L24933c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.RealBufferedSink` v2 @kind this) @signature `Lokio/RealBufferedSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249350.  v0:= new `java.lang.StringBuilder`;
  #L249354.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24935a.  v1:= "buffer(" @kind object;
  #L24935e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249364.  v0:= temp @kind object;
  #L249366.  v1:= v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24936a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249370.  v0:= temp @kind object;
  #L249372.  v1:= ")" @kind object;
  #L249376.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24937c.  v0:= temp @kind object;
  #L24937e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L249384.  v0:= temp @kind object;
  #L249386.  return v0 @kind object;
}
procedure `int` `write`(`okio.RealBufferedSink` v3 @kind this, `java.nio.ByteBuffer` v4 @kind object @name `source`) @signature `Lokio/RealBufferedSink;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L249398.  v1:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24939c.  if v1 == 0 then goto L2493b0;
  #L2493a0.  v1:= new `java.lang.IllegalStateException`;
  #L2493a4.  v2:= "closed" @kind object;
  #L2493a8.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2493ae.  throw v1;
  #L2493b0.  v1:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2493b4.  call temp:= `write`(v1, v4) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L2493ba.  v0:= temp;
  #L2493bc.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2493c2.  return v0;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v2 @kind this, `okio.ByteString` v3 @kind object @name `byteString`) @signature `Lokio/RealBufferedSink;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2493d4.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L2493d8.  if v0 == 0 then goto L2493ec;
  #L2493dc.  v0:= new `java.lang.IllegalStateException`;
  #L2493e0.  v1:= "closed" @kind object;
  #L2493e4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2493ea.  throw v0;
  #L2493ec.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2493f0.  call temp:= `write`(v0, v3) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L2493f6.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2493fc.  v0:= temp @kind object;
  #L2493fe.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v4 @kind this, `okio.Source` v5 @kind object @name `source`, `long` v6 @name `byteCount`) @signature `Lokio/RealBufferedSink;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L249410.  v2:= 0L;
  #L249414.  v2:= lcmp(v6, v2);
  #L249418.  if v2 <= 0 then goto L24944a;
  #L24941c.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249420.  call temp:= `read`(v5, v2, v6) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L249426.  v0:= temp @kind wide;
  #L249428.  v2:= -1L;
  #L24942c.  v2:= lcmp(v0, v2);
  #L249430.  if v2 != 0 then goto L249440;
  #L249434.  v2:= new `java.io.EOFException`;
  #L249438.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L24943e.  throw v2;
  #L249440.  v6:= v6 - v0 @kind long;
  #L249442.  call temp:= `emitCompleteSegments`(v4) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249448.  goto L249410;
  #L24944a.  return v4 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v2 @kind this, `byte`[] v3 @kind object @name `source`) @signature `Lokio/RealBufferedSink;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24945c.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249460.  if v0 == 0 then goto L249474;
  #L249464.  v0:= new `java.lang.IllegalStateException`;
  #L249468.  v1:= "closed" @kind object;
  #L24946c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249472.  throw v0;
  #L249474.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249478.  call temp:= `write`(v0, v3) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L24947e.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249484.  v0:= temp @kind object;
  #L249486.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v2 @kind this, `byte`[] v3 @kind object @name `source`, `int` v4 @name `offset`, `int` v5 @name `byteCount`) @signature `Lokio/RealBufferedSink;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249498.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24949c.  if v0 == 0 then goto L2494b0;
  #L2494a0.  v0:= new `java.lang.IllegalStateException`;
  #L2494a4.  v1:= "closed" @kind object;
  #L2494a8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2494ae.  throw v0;
  #L2494b0.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2494b4.  call temp:= `write`(v0, v3, v4, v5) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L2494ba.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2494c0.  v0:= temp @kind object;
  #L2494c2.  return v0 @kind object;
}
procedure `void` `write`(`okio.RealBufferedSink` v2 @kind this, `okio.Buffer` v3 @kind object @name `source`, `long` v4 @name `byteCount`) @signature `Lokio/RealBufferedSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2494d4.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L2494d8.  if v0 == 0 then goto L2494ec;
  #L2494dc.  v0:= new `java.lang.IllegalStateException`;
  #L2494e0.  v1:= "closed" @kind object;
  #L2494e4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2494ea.  throw v0;
  #L2494ec.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2494f0.  call `write`(v0, v3, v4) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L2494f6.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2494fc.  return @kind void;
}
procedure `long` `writeAll`(`okio.RealBufferedSink` v8 @kind this, `okio.Source` v9 @kind object @name `source`) @signature `Lokio/RealBufferedSink;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L249510.  if v9 != 0 then goto L249524;
  #L249514.  v4:= new `java.lang.IllegalArgumentException`;
  #L249518.  v5:= "source == null" @kind object;
  #L24951c.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249522.  throw v4;
  #L249524.  v2:= 0L;
  #L249528.  v4:= v8.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24952c.  v6:= 8192L;
  #L249530.  call temp:= `read`(v9, v4, v6) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L249536.  v0:= temp @kind wide;
  #L249538.  v4:= -1L;
  #L24953c.  v4:= lcmp(v0, v4);
  #L249540.  if v4 == 0 then goto L24954e;
  #L249544.  v2:= v2 + v0 @kind long;
  #L249546.  call temp:= `emitCompleteSegments`(v8) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24954c.  goto L249528;
  #L24954e.  return v2 @kind wide;
}
procedure `okio.BufferedSink` `writeByte`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `b`) @signature `Lokio/RealBufferedSink;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249560.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249564.  if v0 == 0 then goto L249578;
  #L249568.  v0:= new `java.lang.IllegalStateException`;
  #L24956c.  v1:= "closed" @kind object;
  #L249570.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249576.  throw v0;
  #L249578.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24957c.  call temp:= `writeByte`(v0, v3) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L249582.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249588.  v0:= temp @kind object;
  #L24958a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24959c.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L2495a0.  if v0 == 0 then goto L2495b4;
  #L2495a4.  v0:= new `java.lang.IllegalStateException`;
  #L2495a8.  v1:= "closed" @kind object;
  #L2495ac.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2495b2.  throw v0;
  #L2495b4.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2495b8.  call temp:= `writeDecimalLong`(v0, v4) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L2495be.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2495c4.  v0:= temp @kind object;
  #L2495c6.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2495d8.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L2495dc.  if v0 == 0 then goto L2495f0;
  #L2495e0.  v0:= new `java.lang.IllegalStateException`;
  #L2495e4.  v1:= "closed" @kind object;
  #L2495e8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2495ee.  throw v0;
  #L2495f0.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2495f4.  call temp:= `writeHexadecimalUnsignedLong`(v0, v4) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L2495fa.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249600.  v0:= temp @kind object;
  #L249602.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeInt`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `i`) @signature `Lokio/RealBufferedSink;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249614.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249618.  if v0 == 0 then goto L24962c;
  #L24961c.  v0:= new `java.lang.IllegalStateException`;
  #L249620.  v1:= "closed" @kind object;
  #L249624.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24962a.  throw v0;
  #L24962c.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249630.  call temp:= `writeInt`(v0, v3) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L249636.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24963c.  v0:= temp @kind object;
  #L24963e.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `i`) @signature `Lokio/RealBufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249650.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249654.  if v0 == 0 then goto L249668;
  #L249658.  v0:= new `java.lang.IllegalStateException`;
  #L24965c.  v1:= "closed" @kind object;
  #L249660.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249666.  throw v0;
  #L249668.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24966c.  call temp:= `writeIntLe`(v0, v3) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L249672.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249678.  v0:= temp @kind object;
  #L24967a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeLong`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24968c.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249690.  if v0 == 0 then goto L2496a4;
  #L249694.  v0:= new `java.lang.IllegalStateException`;
  #L249698.  v1:= "closed" @kind object;
  #L24969c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2496a2.  throw v0;
  #L2496a4.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2496a8.  call temp:= `writeLong`(v0, v4) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L2496ae.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2496b4.  v0:= temp @kind object;
  #L2496b6.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2496c8.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L2496cc.  if v0 == 0 then goto L2496e0;
  #L2496d0.  v0:= new `java.lang.IllegalStateException`;
  #L2496d4.  v1:= "closed" @kind object;
  #L2496d8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2496de.  throw v0;
  #L2496e0.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2496e4.  call temp:= `writeLongLe`(v0, v4) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L2496ea.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2496f0.  v0:= temp @kind object;
  #L2496f2.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeShort`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `s`) @signature `Lokio/RealBufferedSink;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249704.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249708.  if v0 == 0 then goto L24971c;
  #L24970c.  v0:= new `java.lang.IllegalStateException`;
  #L249710.  v1:= "closed" @kind object;
  #L249714.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24971a.  throw v0;
  #L24971c.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249720.  call temp:= `writeShort`(v0, v3) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L249726.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24972c.  v0:= temp @kind object;
  #L24972e.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `s`) @signature `Lokio/RealBufferedSink;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249740.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249744.  if v0 == 0 then goto L249758;
  #L249748.  v0:= new `java.lang.IllegalStateException`;
  #L24974c.  v1:= "closed" @kind object;
  #L249750.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249756.  throw v0;
  #L249758.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24975c.  call temp:= `writeShortLe`(v0, v3) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L249762.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249768.  v0:= temp @kind object;
  #L24976a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `int` v4 @name `beginIndex`, `int` v5 @name `endIndex`, `java.nio.charset.Charset` v6 @kind object @name `charset`) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24977c.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249780.  if v0 == 0 then goto L249794;
  #L249784.  v0:= new `java.lang.IllegalStateException`;
  #L249788.  v1:= "closed" @kind object;
  #L24978c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249792.  throw v0;
  #L249794.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249798.  call temp:= `writeString`(v0, v3, v4, v5, v6) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L24979e.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2497a4.  v0:= temp @kind object;
  #L2497a6.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `java.nio.charset.Charset` v4 @kind object @name `charset`) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2497b8.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L2497bc.  if v0 == 0 then goto L2497d0;
  #L2497c0.  v0:= new `java.lang.IllegalStateException`;
  #L2497c4.  v1:= "closed" @kind object;
  #L2497c8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2497ce.  throw v0;
  #L2497d0.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L2497d4.  call temp:= `writeString`(v0, v3, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L2497da.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L2497e0.  v0:= temp @kind object;
  #L2497e2.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2497f4.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L2497f8.  if v0 == 0 then goto L24980c;
  #L2497fc.  v0:= new `java.lang.IllegalStateException`;
  #L249800.  v1:= "closed" @kind object;
  #L249804.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24980a.  throw v0;
  #L24980c.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249810.  call temp:= `writeUtf8`(v0, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L249816.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24981c.  v0:= temp @kind object;
  #L24981e.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `int` v4 @name `beginIndex`, `int` v5 @name `endIndex`) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249830.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249834.  if v0 == 0 then goto L249848;
  #L249838.  v0:= new `java.lang.IllegalStateException`;
  #L24983c.  v1:= "closed" @kind object;
  #L249840.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249846.  throw v0;
  #L249848.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24984c.  call temp:= `writeUtf8`(v0, v3, v4, v5) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L249852.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249858.  v0:= temp @kind object;
  #L24985a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `codePoint`) @signature `Lokio/RealBufferedSink;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24986c.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L249870.  if v0 == 0 then goto L249884;
  #L249874.  v0:= new `java.lang.IllegalStateException`;
  #L249878.  v1:= "closed" @kind object;
  #L24987c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249882.  throw v0;
  #L249884.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L249888.  call temp:= `writeUtf8CodePoint`(v0, v3) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L24988e.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L249894.  v0:= temp @kind object;
  #L249896.  return v0 @kind object;
}
