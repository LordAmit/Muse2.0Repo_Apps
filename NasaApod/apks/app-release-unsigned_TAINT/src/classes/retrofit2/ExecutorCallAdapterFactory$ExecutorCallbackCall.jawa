record `retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` @kind class @AccessFlag FINAL extends `retrofit2.Call` @kind interface {
  `java.util.concurrent.Executor` `retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.callbackExecutor` @AccessFlag FINAL;
  `retrofit2.Call` `retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @AccessFlag FINAL;
}
procedure `void` `<init>`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v0 @kind this, `java.util.concurrent.Executor` v1 @kind object @name `callbackExecutor`, `retrofit2.Call` v2 @kind object) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.<init>:(Ljava/util/concurrent/Executor;Lretrofit2/Call;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L2211d8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L2211de.  v0.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.callbackExecutor` @type ^`java.util.concurrent.Executor` := v1 @kind object;
  #L2211e2.  v0.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` := v2 @kind object;
  #L2211e6.  return @kind void;
}
procedure `void` `cancel`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v1 @kind this) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2211f8.  v0:= v1.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` @kind object;
  #L2211fc.  call `cancel`(v0) @signature `Lretrofit2/Call;.cancel:()V` @kind interface;
  #L221202.  return @kind void;
}
procedure `java.lang.Object` `clone`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v1 @kind this) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L221214.  call temp:= `clone`(v1) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.clone:()Lretrofit2/Call;` @kind virtual;
  #L22121a.  v0:= temp @kind object;
  #L22121c.  return v0 @kind object;
}
procedure `retrofit2.Call` `clone`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v3 @kind this) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.clone:()Lretrofit2/Call;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L221230.  v0:= new `retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall`;
  #L221234.  v1:= v3.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.callbackExecutor` @type ^`java.util.concurrent.Executor` @kind object;
  #L221238.  v2:= v3.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` @kind object;
  #L22123c.  call temp:= `clone`(v2) @signature `Lretrofit2/Call;.clone:()Lretrofit2/Call;` @kind interface;
  #L221242.  v2:= temp @kind object;
  #L221244.  call `<init>`(v0, v1, v2) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.<init>:(Ljava/util/concurrent/Executor;Lretrofit2/Call;)V` @kind direct;
  #L22124a.  return v0 @kind object;
}
procedure `void` `enqueue`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v2 @kind this, `retrofit2.Callback` v3 @kind object) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.enqueue:(Lretrofit2/Callback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L22125c.  v0:= "callback == null" @kind object;
  #L221260.  call temp:= `checkNotNull`(v3, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L221266.  v0:= v2.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` @kind object;
  #L22126a.  v1:= new `retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall$1`;
  #L22126e.  call `<init>`(v1, v2, v3) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall$1;.<init>:(Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;Lretrofit2/Callback;)V` @kind direct;
  #L221274.  call `enqueue`(v0, v1) @signature `Lretrofit2/Call;.enqueue:(Lretrofit2/Callback;)V` @kind interface;
  #L22127a.  return @kind void;
}
procedure `retrofit2.Response` `execute`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v1 @kind this) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.execute:()Lretrofit2/Response;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22128c.  v0:= v1.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` @kind object;
  #L221290.  call temp:= `execute`(v0) @signature `Lretrofit2/Call;.execute:()Lretrofit2/Response;` @kind interface;
  #L221296.  v0:= temp @kind object;
  #L221298.  return v0 @kind object;
}
procedure `boolean` `isCanceled`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v1 @kind this) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2212ac.  v0:= v1.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` @kind object;
  #L2212b0.  call temp:= `isCanceled`(v0) @signature `Lretrofit2/Call;.isCanceled:()Z` @kind interface;
  #L2212b6.  v0:= temp;
  #L2212b8.  return v0;
}
procedure `boolean` `isExecuted`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v1 @kind this) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.isExecuted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2212cc.  v0:= v1.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` @kind object;
  #L2212d0.  call temp:= `isExecuted`(v0) @signature `Lretrofit2/Call;.isExecuted:()Z` @kind interface;
  #L2212d6.  v0:= temp;
  #L2212d8.  return v0;
}
procedure `okhttp3.Request` `request`(`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall` v1 @kind this) @signature `Lretrofit2/ExecutorCallAdapterFactory$ExecutorCallbackCall;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2212ec.  v0:= v1.`retrofit2.ExecutorCallAdapterFactory$ExecutorCallbackCall.delegate` @type ^`retrofit2.Call` @kind object;
  #L2212f0.  call temp:= `request`(v0) @signature `Lretrofit2/Call;.request:()Lokhttp3/Request;` @kind interface;
  #L2212f6.  v0:= temp @kind object;
  #L2212f8.  return v0 @kind object;
}
