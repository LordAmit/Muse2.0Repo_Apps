record `retrofit2.Utils$WildcardTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.WildcardType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.lowerBound` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$WildcardTypeImpl.upperBound` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this, `java.lang.reflect.Type`[] v4 @kind object @name `upperBounds`, `java.lang.reflect.Type`[] v5 @kind object @name `lowerBounds`) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1b3b38.  v1:= 1I;
  #L1b3b3a.  v2:= 0I;
  #L1b3b3c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b3b42.  v0:= length @variable v5;
  #L1b3b44.  if v0 <= v1 then goto L1b3b54;
  #L1b3b48.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b3b4c.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b3b52.  throw v0;
  #L1b3b54.  v0:= length @variable v4;
  #L1b3b56.  if v0 == v1 then goto L1b3b66;
  #L1b3b5a.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b3b5e.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b3b64.  throw v0;
  #L1b3b66.  v0:= length @variable v5;
  #L1b3b68.  if v0 != v1 then goto L1b3bb4;
  #L1b3b6c.  v0:= v5[v2] @kind object;
  #L1b3b70.  if v0 != 0 then goto L1b3b80;
  #L1b3b74.  v0:= new `java.lang.NullPointerException`;
  #L1b3b78.  call `<init>`(v0) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L1b3b7e.  throw v0;
  #L1b3b80.  v0:= v5[v2] @kind object;
  #L1b3b84.  call `checkNotPrimitive`(v0) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1b3b8a.  v0:= v4[v2] @kind object;
  #L1b3b8e.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1b3b92.  if v0 == v1 then goto L1b3ba2;
  #L1b3b96.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b3b9a.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b3ba0.  throw v0;
  #L1b3ba2.  v0:= v5[v2] @kind object;
  #L1b3ba6.  v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b3baa.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L1b3bae.  v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b3bb2.  return @kind void;
  #L1b3bb4.  v0:= v4[v2] @kind object;
  #L1b3bb8.  if v0 != 0 then goto L1b3bc8;
  #L1b3bbc.  v0:= new `java.lang.NullPointerException`;
  #L1b3bc0.  call `<init>`(v0) @signature `Ljava/lang/NullPointerException;.<init>:()V` @kind direct;
  #L1b3bc6.  throw v0;
  #L1b3bc8.  v0:= v4[v2] @kind object;
  #L1b3bcc.  call `checkNotPrimitive`(v0) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1b3bd2.  v0:= 0I;
  #L1b3bd4.  v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b3bd8.  v0:= v4[v2] @kind object;
  #L1b3bdc.  v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1b3be0.  goto L1b3bb2;
}
procedure `boolean` `equals`(`retrofit2.Utils$WildcardTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object @name `other`) @signature `Lretrofit2/Utils$WildcardTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b3bf4.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b3bf8.  if v0 == 0 then goto L1b3c10;
  #L1b3bfc.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L1b3c00.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b3c06.  v0:= temp;
  #L1b3c08.  if v0 == 0 then goto L1b3c10;
  #L1b3c0c.  v0:= 1I;
  #L1b3c0e.  return v0;
  #L1b3c10.  v0:= 0I;
  #L1b3c12.  goto L1b3c0e;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b3c24.  v0:= v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3c28.  if v0 == 0 then goto L1b3c3e;
  #L1b3c2c.  v0:= 1I;
  #L1b3c2e.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b3c32.  v1:= 0I;
  #L1b3c34.  v2:= v3.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3c38.  v0[v1]:= v2 @kind object;
  #L1b3c3c.  return v0 @kind object;
  #L1b3c3e.  v0:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b3c42.  goto L1b3c3c;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`retrofit2.Utils$WildcardTypeImpl` v3 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1b3c54.  v0:= 1I;
  #L1b3c56.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b3c5a.  v1:= 0I;
  #L1b3c5c.  v2:= v3.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3c60.  v0[v1]:= v2 @kind object;
  #L1b3c64.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b3c78.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3c7c.  if v0 == 0 then goto L1b3ca4;
  #L1b3c80.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3c84.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b3c8a.  v0:= temp;
  #L1b3c8c.  v0:= v0 + 31;
  #L1b3c90.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3c94.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b3c9a.  v1:= temp;
  #L1b3c9c.  v1:= v1 + 31;
  #L1b3ca0.  v0:= v0 ^~ v1 @kind int;
  #L1b3ca2.  return v0;
  #L1b3ca4.  v0:= 1I;
  #L1b3ca6.  goto L1b3c90;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$WildcardTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$WildcardTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b3cb8.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3cbc.  if v0 == 0 then goto L1b3cf4;
  #L1b3cc0.  v0:= new `java.lang.StringBuilder`;
  #L1b3cc4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b3cca.  v1:= "? super " @kind object;
  #L1b3cce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3cd4.  v0:= temp @kind object;
  #L1b3cd6.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.lowerBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3cda.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b3ce0.  v1:= temp @kind object;
  #L1b3ce2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3ce8.  v0:= temp @kind object;
  #L1b3cea.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b3cf0.  v0:= temp @kind object;
  #L1b3cf2.  return v0 @kind object;
  #L1b3cf4.  v0:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3cf8.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L1b3cfc.  if v0 != v1 then goto L1b3d06;
  #L1b3d00.  v0:= "?" @kind object;
  #L1b3d04.  goto L1b3cf2;
  #L1b3d06.  v0:= new `java.lang.StringBuilder`;
  #L1b3d0a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b3d10.  v1:= "? extends " @kind object;
  #L1b3d14.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3d1a.  v0:= temp @kind object;
  #L1b3d1c.  v1:= v2.`retrofit2.Utils$WildcardTypeImpl.upperBound` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3d20.  call temp:= `typeToString`(v1) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b3d26.  v1:= temp @kind object;
  #L1b3d28.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3d2e.  v0:= temp @kind object;
  #L1b3d30.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b3d36.  v0:= temp @kind object;
  #L1b3d38.  goto L1b3cf2;
}
