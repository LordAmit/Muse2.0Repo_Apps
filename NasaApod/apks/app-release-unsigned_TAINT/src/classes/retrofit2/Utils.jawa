record `retrofit2.Utils` @kind class @AccessFlag FINAL {
}
global `java.lang.reflect.Type`[] `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/Utils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b3d4c.  v0:= 0I;
  #L1b3d4e.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b3d52.  `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L1b3d56.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Utils` v0 @kind this) @signature `Lretrofit2/Utils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1b3d68.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b3d6e.  return @kind void;
}
procedure `okhttp3.ResponseBody` `buffer`(`okhttp3.ResponseBody` v4 @kind object @name `body`) @signature `Lretrofit2/Utils;.buffer:(Lokhttp3/ResponseBody;)Lokhttp3/ResponseBody;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b3d80.  v0:= new `okio.Buffer`;
  #L1b3d84.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1b3d8a.  call temp:= `source`(v4) @signature `Lokhttp3/ResponseBody;.source:()Lokio/BufferedSource;` @kind virtual;
  #L1b3d90.  v1:= temp @kind object;
  #L1b3d92.  call temp:= `readAll`(v1, v0) @signature `Lokio/BufferedSource;.readAll:(Lokio/Sink;)J` @kind interface;
  #L1b3d98.  call temp:= `contentType`(v4) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L1b3d9e.  v1:= temp @kind object;
  #L1b3da0.  call temp:= `contentLength`(v4) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L1b3da6.  v2:= temp @kind wide;
  #L1b3da8.  call temp:= `create`(v1, v2, v0) @signature `Lokhttp3/ResponseBody;.create:(Lokhttp3/MediaType;JLokio/BufferedSource;)Lokhttp3/ResponseBody;` @kind static;
  #L1b3dae.  v1:= temp @kind object;
  #L1b3db0.  return v1 @kind object;
}
procedure `java.lang.Object` `checkNotNull`(`java.lang.Object` v1 @kind object, `java.lang.String` v2 @kind object @name `message`) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag STATIC {
    temp;
    v0;

  #L1b3dc4.  if v1 != 0 then goto L1b3dd4;
  #L1b3dc8.  v0:= new `java.lang.NullPointerException`;
  #L1b3dcc.  call `<init>`(v0, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b3dd2.  throw v0;
  #L1b3dd4.  return v1 @kind object;
}
procedure `void` `checkNotPrimitive`(`java.lang.reflect.Type` v1 @kind object @name `type`) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L1b3de8.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L1b3dec.  if v0 == 0 then goto L1b3e0c;
  #L1b3df0.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1b3df4.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L1b3dfa.  v0:= temp;
  #L1b3dfc.  if v0 == 0 then goto L1b3e0c;
  #L1b3e00.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b3e04.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b3e0a.  throw v0;
  #L1b3e0c.  return @kind void;
}
procedure `java.lang.Class` `declaringClassOf`(`java.lang.reflect.TypeVariable` v2 @kind object) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1b3e20.  call temp:= `getGenericDeclaration`(v2) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L1b3e26.  v0:= temp @kind object;
  #L1b3e28.  v1:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L1b3e2c.  if v1 == 0 then goto L1b3e36;
  #L1b3e30.  v0:= (`java.lang.Class`) v0 @kind object;
  #L1b3e34.  return v0 @kind object;
  #L1b3e36.  v0:= 0I;
  #L1b3e38.  goto L1b3e34;
}
procedure `boolean` `equals`(`java.lang.reflect.Type` v14 @kind object @name `a`, `java.lang.reflect.Type` v15 @kind object @name `b`) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L1b3e4c.  v10:= 1I;
  #L1b3e4e.  v11:= 0I;
  #L1b3e50.  if v14 != v15 then goto L1b3e58;
  #L1b3e54.  v11:= v10;
  #L1b3e56.  return v11;
  #L1b3e58.  v12:= instanceof @variable v14 @type ^`java.lang.Class` @kind boolean;
  #L1b3e5c.  if v12 == 0 then goto L1b3e6a;
  #L1b3e60.  call temp:= `equals`(v14, v15) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b3e66.  v11:= temp;
  #L1b3e68.  goto L1b3e56;
  #L1b3e6a.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b3e6e.  if v12 == 0 then goto L1b3eea;
  #L1b3e72.  v12:= instanceof @variable v15 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b3e76.  if v12 == 0 then goto L1b3e56;
  #L1b3e7a.  v4:= v14 @kind object;
  #L1b3e7c.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L1b3e80.  v5:= v15 @kind object;
  #L1b3e82.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L1b3e86.  call temp:= `getOwnerType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b3e8c.  v2:= temp @kind object;
  #L1b3e8e.  call temp:= `getOwnerType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b3e94.  v3:= temp @kind object;
  #L1b3e96.  if v2 == v3 then goto L1b3eaa;
  #L1b3e9a.  if v2 == 0 then goto L1b3ee6;
  #L1b3e9e.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b3ea4.  v12:= temp;
  #L1b3ea6.  if v12 == 0 then goto L1b3ee6;
  #L1b3eaa.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b3eb0.  v12:= temp @kind object;
  #L1b3eb2.  call temp:= `getRawType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b3eb8.  v13:= temp @kind object;
  #L1b3eba.  call temp:= `equals`(v12, v13) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b3ec0.  v12:= temp;
  #L1b3ec2.  if v12 == 0 then goto L1b3ee6;
  #L1b3ec6.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b3ecc.  v12:= temp @kind object;
  #L1b3ece.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b3ed4.  v13:= temp @kind object;
  #L1b3ed6.  call temp:= `equals`(v12, v13) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1b3edc.  v12:= temp;
  #L1b3ede.  if v12 == 0 then goto L1b3ee6;
  #L1b3ee2.  v11:= v10;
  #L1b3ee4.  goto L1b3e56;
  #L1b3ee6.  v10:= v11;
  #L1b3ee8.  goto L1b3ee2;
  #L1b3eea.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b3eee.  if v12 == 0 then goto L1b3f20;
  #L1b3ef2.  v10:= instanceof @variable v15 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b3ef6.  if v10 == 0 then goto L1b3e56;
  #L1b3efa.  v0:= v14 @kind object;
  #L1b3efc.  v0:= (`java.lang.reflect.GenericArrayType`) v0 @kind object;
  #L1b3f00.  v1:= v15 @kind object;
  #L1b3f02.  v1:= (`java.lang.reflect.GenericArrayType`) v1 @kind object;
  #L1b3f06.  call temp:= `getGenericComponentType`(v0) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b3f0c.  v10:= temp @kind object;
  #L1b3f0e.  call temp:= `getGenericComponentType`(v1) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b3f14.  v11:= temp @kind object;
  #L1b3f16.  call temp:= `equals`(v10, v11) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b3f1c.  v11:= temp;
  #L1b3f1e.  goto L1b3e56;
  #L1b3f20.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b3f24.  if v12 == 0 then goto L1b3f7e;
  #L1b3f28.  v12:= instanceof @variable v15 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b3f2c.  if v12 == 0 then goto L1b3e56;
  #L1b3f30.  v8:= v14 @kind object;
  #L1b3f32.  v8:= (`java.lang.reflect.WildcardType`) v8 @kind object;
  #L1b3f36.  v9:= v15 @kind object;
  #L1b3f38.  v9:= (`java.lang.reflect.WildcardType`) v9 @kind object;
  #L1b3f3c.  call temp:= `getUpperBounds`(v8) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b3f42.  v12:= temp @kind object;
  #L1b3f44.  call temp:= `getUpperBounds`(v9) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b3f4a.  v13:= temp @kind object;
  #L1b3f4c.  call temp:= `equals`(v12, v13) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1b3f52.  v12:= temp;
  #L1b3f54.  if v12 == 0 then goto L1b3f7a;
  #L1b3f58.  call temp:= `getLowerBounds`(v8) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b3f5e.  v12:= temp @kind object;
  #L1b3f60.  call temp:= `getLowerBounds`(v9) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b3f66.  v13:= temp @kind object;
  #L1b3f68.  call temp:= `equals`(v12, v13) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L1b3f6e.  v12:= temp;
  #L1b3f70.  if v12 == 0 then goto L1b3f7a;
  #L1b3f74.  v11:= v10;
  #L1b3f76.  goto L1b3e56;
  #L1b3f7a.  v10:= v11;
  #L1b3f7c.  goto L1b3f74;
  #L1b3f7e.  v12:= instanceof @variable v14 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b3f82.  if v12 == 0 then goto L1b3e56;
  #L1b3f86.  v12:= instanceof @variable v15 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b3f8a.  if v12 == 0 then goto L1b3e56;
  #L1b3f8e.  v6:= v14 @kind object;
  #L1b3f90.  v6:= (`java.lang.reflect.TypeVariable`) v6 @kind object;
  #L1b3f94.  v7:= v15 @kind object;
  #L1b3f96.  v7:= (`java.lang.reflect.TypeVariable`) v7 @kind object;
  #L1b3f9a.  call temp:= `getGenericDeclaration`(v6) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L1b3fa0.  v12:= temp @kind object;
  #L1b3fa2.  call temp:= `getGenericDeclaration`(v7) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L1b3fa8.  v13:= temp @kind object;
  #L1b3faa.  if v12 != v13 then goto L1b3fd0;
  #L1b3fae.  call temp:= `getName`(v6) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L1b3fb4.  v12:= temp @kind object;
  #L1b3fb6.  call temp:= `getName`(v7) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L1b3fbc.  v13:= temp @kind object;
  #L1b3fbe.  call temp:= `equals`(v12, v13) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b3fc4.  v12:= temp;
  #L1b3fc6.  if v12 == 0 then goto L1b3fd0;
  #L1b3fca.  v11:= v10;
  #L1b3fcc.  goto L1b3e56;
  #L1b3fd0.  v10:= v11;
  #L1b3fd2.  goto L1b3fca;
}
procedure `java.lang.reflect.Type` `getCallResponseType`(`java.lang.reflect.Type` v2 @kind object @name `returnType`) @signature `Lretrofit2/Utils;.getCallResponseType:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1b3fe4.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b3fe8.  if v0 != 0 then goto L1b3ffc;
  #L1b3fec.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b3ff0.  v1:= "Call return type must be parameterized as Call<Foo> or Call<? extends Foo>" @kind object;
  #L1b3ff4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b3ffa.  throw v0;
  #L1b3ffc.  v0:= 0I;
  #L1b3ffe.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L1b4002.  call temp:= `getParameterUpperBound`(v0, v2) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @kind static;
  #L1b4008.  v0:= temp @kind object;
  #L1b400a.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getGenericSupertype`(`java.lang.reflect.Type` v6 @kind object @name `context`, `java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b401c.  if v8 != v7 then goto L1b4022;
  #L1b4020.  return v6 @kind object;
  #L1b4022.  call temp:= `isInterface`(v8) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L1b4028.  v4:= temp;
  #L1b402a.  if v4 == 0 then goto L1b4084;
  #L1b402e.  call temp:= `getInterfaces`(v7) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L1b4034.  v1:= temp @kind object;
  #L1b4036.  v0:= 0I;
  #L1b4038.  v2:= length @variable v1;
  #L1b403a.  if v0 >= v2 then goto L1b4084;
  #L1b403e.  v4:= v1[v0] @kind object;
  #L1b4042.  if v4 != v8 then goto L1b4054;
  #L1b4046.  call temp:= `getGenericInterfaces`(v7) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L1b404c.  v4:= temp @kind object;
  #L1b404e.  v6:= v4[v0] @kind object;
  #L1b4052.  goto L1b4020;
  #L1b4054.  v4:= v1[v0] @kind object;
  #L1b4058.  call temp:= `isAssignableFrom`(v8, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1b405e.  v4:= temp;
  #L1b4060.  if v4 == 0 then goto L1b407e;
  #L1b4064.  call temp:= `getGenericInterfaces`(v7) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L1b406a.  v4:= temp @kind object;
  #L1b406c.  v4:= v4[v0] @kind object;
  #L1b4070.  v5:= v1[v0] @kind object;
  #L1b4074.  call temp:= `getGenericSupertype`(v4, v5, v8) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b407a.  v6:= temp @kind object;
  #L1b407c.  goto L1b4020;
  #L1b407e.  v0:= v0 + 1;
  #L1b4082.  goto L1b403a;
  #L1b4084.  call temp:= `isInterface`(v7) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L1b408a.  v4:= temp;
  #L1b408c.  if v4 != 0 then goto L1b40d0;
  #L1b4090.  v4:= constclass @type ^`java.lang.Object` @kind object;
  #L1b4094.  if v7 == v4 then goto L1b40d0;
  #L1b4098.  call temp:= `getSuperclass`(v7) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L1b409e.  v3:= temp @kind object;
  #L1b40a0.  if v3 != v8 then goto L1b40ae;
  #L1b40a4.  call temp:= `getGenericSuperclass`(v7) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L1b40aa.  v6:= temp @kind object;
  #L1b40ac.  goto L1b4020;
  #L1b40ae.  call temp:= `isAssignableFrom`(v8, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1b40b4.  v4:= temp;
  #L1b40b6.  if v4 == 0 then goto L1b40cc;
  #L1b40ba.  call temp:= `getGenericSuperclass`(v7) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L1b40c0.  v4:= temp @kind object;
  #L1b40c2.  call temp:= `getGenericSupertype`(v4, v3, v8) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b40c8.  v6:= temp @kind object;
  #L1b40ca.  goto L1b4020;
  #L1b40cc.  v7:= v3 @kind object;
  #L1b40ce.  goto L1b4090;
  #L1b40d0.  v6:= v8 @kind object;
  #L1b40d2.  goto L1b4020;
}
procedure `java.lang.reflect.Type` `getParameterUpperBound`(`int` v5 @name `index`, `java.lang.reflect.ParameterizedType` v6 @kind object @name `type`) @signature `Lretrofit2/Utils;.getParameterUpperBound:(ILjava/lang/reflect/ParameterizedType;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b40e4.  call temp:= `getActualTypeArguments`(v6) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b40ea.  v1:= temp @kind object;
  #L1b40ec.  if v5 < 0 then goto L1b40f6;
  #L1b40f0.  v2:= length @variable v1;
  #L1b40f2.  if v5 < v2 then goto L1b4152;
  #L1b40f6.  v2:= new `java.lang.IllegalArgumentException`;
  #L1b40fa.  v3:= new `java.lang.StringBuilder`;
  #L1b40fe.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b4104.  v4:= "Index " @kind object;
  #L1b4108.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b410e.  v3:= temp @kind object;
  #L1b4110.  call temp:= `append`(v3, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b4116.  v3:= temp @kind object;
  #L1b4118.  v4:= " not in range [0," @kind object;
  #L1b411c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b4122.  v3:= temp @kind object;
  #L1b4124.  v4:= length @variable v1;
  #L1b4126.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b412c.  v3:= temp @kind object;
  #L1b412e.  v4:= ") for " @kind object;
  #L1b4132.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b4138.  v3:= temp @kind object;
  #L1b413a.  call temp:= `append`(v3, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b4140.  v3:= temp @kind object;
  #L1b4142.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b4148.  v3:= temp @kind object;
  #L1b414a.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b4150.  throw v2;
  #L1b4152.  v0:= v1[v5] @kind object;
  #L1b4156.  v2:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b415a.  if v2 == 0 then goto L1b4170;
  #L1b415e.  v0:= (`java.lang.reflect.WildcardType`) v0 @kind object;
  #L1b4162.  call temp:= `getUpperBounds`(v0) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b4168.  v2:= temp @kind object;
  #L1b416a.  v3:= 0I;
  #L1b416c.  v0:= v2[v3] @kind object;
  #L1b4170.  return v0 @kind object;
}
procedure `java.lang.Class` `getRawType`(`java.lang.reflect.Type` v6 @kind object @name `type`) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1b4184.  v4:= 0I;
  #L1b4186.  v3:= "type == null" @kind object;
  #L1b418a.  call temp:= `checkNotNull`(v6, v3) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b4190.  v3:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L1b4194.  if v3 == 0 then goto L1b419e;
  #L1b4198.  v6:= (`java.lang.Class`) v6 @kind object;
  #L1b419c.  return v6 @kind object;
  #L1b419e.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b41a2.  if v3 == 0 then goto L1b41d0;
  #L1b41a6.  v1:= v6 @kind object;
  #L1b41a8.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L1b41ac.  call temp:= `getRawType`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b41b2.  v2:= temp @kind object;
  #L1b41b4.  v3:= instanceof @variable v2 @type ^`java.lang.Class` @kind boolean;
  #L1b41b8.  if v3 != 0 then goto L1b41c8;
  #L1b41bc.  v3:= new `java.lang.IllegalArgumentException`;
  #L1b41c0.  call `<init>`(v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b41c6.  throw v3;
  #L1b41c8.  v2:= (`java.lang.Class`) v2 @kind object;
  #L1b41cc.  v6:= v2 @kind object;
  #L1b41ce.  goto L1b419c;
  #L1b41d0.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b41d4.  if v3 == 0 then goto L1b41fe;
  #L1b41d8.  v6:= (`java.lang.reflect.GenericArrayType`) v6 @kind object;
  #L1b41dc.  call temp:= `getGenericComponentType`(v6) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b41e2.  v0:= temp @kind object;
  #L1b41e4.  call temp:= `getRawType`(v0) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1b41ea.  v3:= temp @kind object;
  #L1b41ec.  call temp:= `newInstance`(v3, v4) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L1b41f2.  v3:= temp @kind object;
  #L1b41f4.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b41fa.  v6:= temp @kind object;
  #L1b41fc.  goto L1b419c;
  #L1b41fe.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b4202.  if v3 == 0 then goto L1b420c;
  #L1b4206.  v6:= constclass @type ^`java.lang.Object` @kind object;
  #L1b420a.  goto L1b419c;
  #L1b420c.  v3:= instanceof @variable v6 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b4210.  if v3 == 0 then goto L1b422e;
  #L1b4214.  v6:= (`java.lang.reflect.WildcardType`) v6 @kind object;
  #L1b4218.  call temp:= `getUpperBounds`(v6) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b421e.  v3:= temp @kind object;
  #L1b4220.  v3:= v3[v4] @kind object;
  #L1b4224.  call temp:= `getRawType`(v3) @signature `Lretrofit2/Utils;.getRawType:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L1b422a.  v6:= temp @kind object;
  #L1b422c.  goto L1b419c;
  #L1b422e.  v3:= new `java.lang.IllegalArgumentException`;
  #L1b4232.  v4:= new `java.lang.StringBuilder`;
  #L1b4236.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b423c.  v5:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L1b4240.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b4246.  v4:= temp @kind object;
  #L1b4248.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b424e.  v4:= temp @kind object;
  #L1b4250.  v5:= "> is of type " @kind object;
  #L1b4254.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b425a.  v4:= temp @kind object;
  #L1b425c.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b4262.  v5:= temp @kind object;
  #L1b4264.  call temp:= `getName`(v5) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b426a.  v5:= temp @kind object;
  #L1b426c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b4272.  v4:= temp @kind object;
  #L1b4274.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b427a.  v4:= temp @kind object;
  #L1b427c.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b4282.  throw v3;
}
procedure `java.lang.reflect.Type` `getSupertype`(`java.lang.reflect.Type` v1 @kind object @name `context`, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lretrofit2/Utils;.getSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;

  #L1b4294.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1b429a.  v0:= temp;
  #L1b429c.  if v0 != 0 then goto L1b42ac;
  #L1b42a0.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b42a4.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b42aa.  throw v0;
  #L1b42ac.  call temp:= `getGenericSupertype`(v1, v2, v3) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b42b2.  v0:= temp @kind object;
  #L1b42b4.  call temp:= `resolve`(v1, v2, v0) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b42ba.  v0:= temp @kind object;
  #L1b42bc.  return v0 @kind object;
}
procedure `boolean` `hasUnresolvableType`(`java.lang.reflect.Type` v9 @kind object @name `type`) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1b42d0.  v4:= 1I;
  #L1b42d2.  v3:= 0I;
  #L1b42d4.  v5:= instanceof @variable v9 @type ^`java.lang.Class` @kind boolean;
  #L1b42d8.  if v5 == 0 then goto L1b42de;
  #L1b42dc.  return v3;
  #L1b42de.  v5:= instanceof @variable v9 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b42e2.  if v5 == 0 then goto L1b4316;
  #L1b42e6.  v1:= v9 @kind object;
  #L1b42e8.  v1:= (`java.lang.reflect.ParameterizedType`) v1 @kind object;
  #L1b42ec.  call temp:= `getActualTypeArguments`(v1) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b42f2.  v6:= temp @kind object;
  #L1b42f4.  v7:= length @variable v6;
  #L1b42f6.  v5:= v3;
  #L1b42f8.  if v5 >= v7 then goto L1b42dc;
  #L1b42fc.  v2:= v6[v5] @kind object;
  #L1b4300.  call temp:= `hasUnresolvableType`(v2) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b4306.  v8:= temp;
  #L1b4308.  if v8 == 0 then goto L1b4310;
  #L1b430c.  v3:= v4;
  #L1b430e.  goto L1b42dc;
  #L1b4310.  v5:= v5 + 1;
  #L1b4314.  goto L1b42f8;
  #L1b4316.  v3:= instanceof @variable v9 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b431a.  if v3 == 0 then goto L1b4334;
  #L1b431e.  v9:= (`java.lang.reflect.GenericArrayType`) v9 @kind object;
  #L1b4322.  call temp:= `getGenericComponentType`(v9) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b4328.  v3:= temp @kind object;
  #L1b432a.  call temp:= `hasUnresolvableType`(v3) @signature `Lretrofit2/Utils;.hasUnresolvableType:(Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b4330.  v3:= temp;
  #L1b4332.  goto L1b42dc;
  #L1b4334.  v3:= instanceof @variable v9 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b4338.  if v3 == 0 then goto L1b4340;
  #L1b433c.  v3:= v4;
  #L1b433e.  goto L1b42dc;
  #L1b4340.  v3:= instanceof @variable v9 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b4344.  if v3 == 0 then goto L1b434c;
  #L1b4348.  v3:= v4;
  #L1b434a.  goto L1b42dc;
  #L1b434c.  if v9 != 0 then goto L1b439a;
  #L1b4350.  v0:= "null" @kind object;
  #L1b4354.  v3:= new `java.lang.IllegalArgumentException`;
  #L1b4358.  v4:= new `java.lang.StringBuilder`;
  #L1b435c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b4362.  v5:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L1b4366.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b436c.  v4:= temp @kind object;
  #L1b436e.  call temp:= `append`(v4, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b4374.  v4:= temp @kind object;
  #L1b4376.  v5:= "> is of type " @kind object;
  #L1b437a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b4380.  v4:= temp @kind object;
  #L1b4382.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b4388.  v4:= temp @kind object;
  #L1b438a.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b4390.  v4:= temp @kind object;
  #L1b4392.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b4398.  throw v3;
  #L1b439a.  call temp:= `getClass`(v9) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1b43a0.  v3:= temp @kind object;
  #L1b43a2.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b43a8.  v0:= temp @kind object;
  #L1b43aa.  goto L1b4354;
}
procedure `int` `indexOf`(`java.lang.Object`[] v2 @kind object @name `array`, `java.lang.Object` v3 @kind object @name `toFind`) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1b43bc.  v0:= 0I;
  #L1b43be.  v1:= length @variable v2;
  #L1b43c0.  if v0 >= v1 then goto L1b43dc;
  #L1b43c4.  v1:= v2[v0] @kind object;
  #L1b43c8.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b43ce.  v1:= temp;
  #L1b43d0.  if v1 == 0 then goto L1b43d6;
  #L1b43d4.  return v0;
  #L1b43d6.  v0:= v0 + 1;
  #L1b43da.  goto L1b43be;
  #L1b43dc.  v1:= new `java.util.NoSuchElementException`;
  #L1b43e0.  call `<init>`(v1) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L1b43e6.  throw v1;
}
procedure `boolean` `isAnnotationPresent`(`java.lang.annotation.Annotation`[] v5 @kind object @name `annotations`, `java.lang.Class` v6 @kind object) @signature `Lretrofit2/Utils;.isAnnotationPresent:([Ljava/lang/annotation/Annotation;Ljava/lang/Class;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b43f8.  v1:= 0I;
  #L1b43fa.  v3:= length @variable v5;
  #L1b43fc.  v2:= v1;
  #L1b43fe.  if v2 >= v3 then goto L1b4414;
  #L1b4402.  v0:= v5[v2] @kind object;
  #L1b4406.  call temp:= `isInstance`(v6, v0) @signature `Ljava/lang/Class;.isInstance:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b440c.  v4:= temp;
  #L1b440e.  if v4 == 0 then goto L1b4416;
  #L1b4412.  v1:= 1I;
  #L1b4414.  return v1;
  #L1b4416.  v2:= v2 + 1;
  #L1b441a.  goto L1b43fe;
}
procedure `java.lang.reflect.Type` `resolve`(`java.lang.reflect.Type` v22 @kind object @name `context`, `java.lang.Class` v23 @kind object, `java.lang.reflect.Type` v24 @kind object @name `toResolve`) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;

  #L1b442c.  v0:= v24 @kind object;
  #L1b4430.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L1b4434.  v19:= v0;
  #L1b4438.  if v19 == 0 then goto L1b446a;
  #L1b443c.  v17:= v24 @kind object;
  #L1b4440.  v17:= (`java.lang.reflect.TypeVariable`) v17 @kind object;
  #L1b4444.  v0:= v22 @kind object;
  #L1b4448.  v1:= v23 @kind object;
  #L1b444c.  v2:= v17 @kind object;
  #L1b4450.  call temp:= `resolveTypeVariable`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @kind static;
  #L1b4456.  v24:= temp @kind object;
  #L1b4458.  v0:= v24 @kind object;
  #L1b445c.  v1:= v17 @kind object;
  #L1b4460.  if v0 != v1 then goto L1b442c;
  #L1b4464.  v10:= v24 @kind object;
  #L1b4468.  return v10 @kind object;
  #L1b446a.  v0:= v24 @kind object;
  #L1b446e.  v0:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L1b4472.  v19:= v0;
  #L1b4476.  if v19 == 0 then goto L1b44c2;
  #L1b447a.  v19:= v24 @kind object;
  #L1b447e.  v19:= (`java.lang.Class`) v19 @kind object;
  #L1b4482.  call temp:= `isArray`(v19) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L1b4488.  v19:= temp;
  #L1b448a.  if v19 == 0 then goto L1b44c2;
  #L1b448e.  v11:= v24 @kind object;
  #L1b4492.  v11:= (`java.lang.Class`) v11 @kind object;
  #L1b4496.  call temp:= `getComponentType`(v11) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L1b449c.  v5:= temp @kind object;
  #L1b449e.  v0:= v22 @kind object;
  #L1b44a2.  v1:= v23 @kind object;
  #L1b44a6.  call temp:= `resolve`(v0, v1, v5) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b44ac.  v8:= temp @kind object;
  #L1b44ae.  if v5 != v8 then goto L1b44b6;
  #L1b44b2.  v10:= v11 @kind object;
  #L1b44b4.  goto L1b4468;
  #L1b44b6.  v11:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L1b44ba.  call `<init>`(v11, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b44c0.  goto L1b44b2;
  #L1b44c2.  v0:= v24 @kind object;
  #L1b44c6.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L1b44ca.  v19:= v0;
  #L1b44ce.  if v19 == 0 then goto L1b4502;
  #L1b44d2.  v10:= v24 @kind object;
  #L1b44d6.  v10:= (`java.lang.reflect.GenericArrayType`) v10 @kind object;
  #L1b44da.  call temp:= `getGenericComponentType`(v10) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b44e0.  v5:= temp @kind object;
  #L1b44e2.  v0:= v22 @kind object;
  #L1b44e6.  v1:= v23 @kind object;
  #L1b44ea.  call temp:= `resolve`(v0, v1, v5) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b44f0.  v8:= temp @kind object;
  #L1b44f2.  if v5 == v8 then goto L1b4468;
  #L1b44f6.  v10:= new `retrofit2.Utils$GenericArrayTypeImpl`;
  #L1b44fa.  call `<init>`(v10, v8) @signature `Lretrofit2/Utils$GenericArrayTypeImpl;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b4500.  goto L1b4468;
  #L1b4502.  v0:= v24 @kind object;
  #L1b4506.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b450a.  v19:= v0;
  #L1b450e.  if v19 == 0 then goto L1b45b8;
  #L1b4512.  v10:= v24 @kind object;
  #L1b4516.  v10:= (`java.lang.reflect.ParameterizedType`) v10 @kind object;
  #L1b451a.  call temp:= `getOwnerType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b4520.  v14:= temp @kind object;
  #L1b4522.  v0:= v22 @kind object;
  #L1b4526.  v1:= v23 @kind object;
  #L1b452a.  call temp:= `resolve`(v0, v1, v14) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b4530.  v9:= temp @kind object;
  #L1b4532.  if v9 == v14 then goto L1b458e;
  #L1b4536.  v4:= 1I;
  #L1b4538.  call temp:= `getActualTypeArguments`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b453e.  v3:= temp @kind object;
  #L1b4540.  v16:= 0I;
  #L1b4544.  v6:= length @variable v3;
  #L1b4546.  v0:= v16;
  #L1b454a.  if v0 >= v6 then goto L1b4592;
  #L1b454e.  v19:= v3[v16] @kind object;
  #L1b4552.  v0:= v22 @kind object;
  #L1b4556.  v1:= v23 @kind object;
  #L1b455a.  v2:= v19 @kind object;
  #L1b455e.  call temp:= `resolve`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b4564.  v15:= temp @kind object;
  #L1b4566.  v19:= v3[v16] @kind object;
  #L1b456a.  v0:= v19 @kind object;
  #L1b456e.  if v15 == v0 then goto L1b4588;
  #L1b4572.  if v4 != 0 then goto L1b4584;
  #L1b4576.  call temp:= `clone`(v3) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1b457c.  v3:= temp @kind object;
  #L1b457e.  v3:= (`java.lang.reflect.Type`[]) v3 @kind object;
  #L1b4582.  v4:= 1I;
  #L1b4584.  v3[v16]:= v15 @kind object;
  #L1b4588.  v16:= v16 + 1;
  #L1b458c.  goto L1b4546;
  #L1b458e.  v4:= 0I;
  #L1b4590.  goto L1b4538;
  #L1b4592.  if v4 == 0 then goto L1b4468;
  #L1b4596.  v19:= new `retrofit2.Utils$ParameterizedTypeImpl`;
  #L1b459a.  call temp:= `getRawType`(v10) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L1b45a0.  v20:= temp @kind object;
  #L1b45a2.  v0:= v19 @kind object;
  #L1b45a6.  v1:= v20 @kind object;
  #L1b45aa.  call `<init>`(v0, v9, v1, v3) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b45b0.  v10:= v19 @kind object;
  #L1b45b4.  goto L1b4468;
  #L1b45b8.  v0:= v24 @kind object;
  #L1b45bc.  v0:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L1b45c0.  v19:= v0;
  #L1b45c4.  if v19 == 0 then goto L1b46e4;
  #L1b45c8.  v10:= v24 @kind object;
  #L1b45cc.  v10:= (`java.lang.reflect.WildcardType`) v10 @kind object;
  #L1b45d0.  call temp:= `getLowerBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b45d6.  v12:= temp @kind object;
  #L1b45d8.  call temp:= `getUpperBounds`(v10) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b45de.  v13:= temp @kind object;
  #L1b45e0.  v0:= length @variable v12;
  #L1b45e2.  v19:= v0;
  #L1b45e6.  v20:= 1I;
  #L1b45ea.  v0:= v19;
  #L1b45ee.  v1:= v20;
  #L1b45f2.  if v0 != v1 then goto L1b466c;
  #L1b45f6.  v19:= 0I;
  #L1b45fa.  v19:= v12[v19] @kind object;
  #L1b45fe.  v0:= v22 @kind object;
  #L1b4602.  v1:= v23 @kind object;
  #L1b4606.  v2:= v19 @kind object;
  #L1b460a.  call temp:= `resolve`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b4610.  v7:= temp @kind object;
  #L1b4612.  v19:= 0I;
  #L1b4616.  v19:= v12[v19] @kind object;
  #L1b461a.  v0:= v19 @kind object;
  #L1b461e.  if v7 == v0 then goto L1b4468;
  #L1b4622.  v10:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L1b4626.  v19:= 1I;
  #L1b462a.  v0:= v19;
  #L1b462e.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b4632.  v19:= v0 @kind object;
  #L1b4636.  v20:= 0I;
  #L1b463a.  v21:= constclass @type ^`java.lang.Object` @kind object;
  #L1b463e.  v19[v20]:= v21 @kind object;
  #L1b4642.  v20:= 1I;
  #L1b4646.  v0:= v20;
  #L1b464a.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b464e.  v20:= v0 @kind object;
  #L1b4652.  v21:= 0I;
  #L1b4656.  v20[v21]:= v7 @kind object;
  #L1b465a.  v0:= v19 @kind object;
  #L1b465e.  v1:= v20 @kind object;
  #L1b4662.  call `<init>`(v10, v0, v1) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b4668.  goto L1b4468;
  #L1b466c.  v0:= length @variable v13;
  #L1b466e.  v19:= v0;
  #L1b4672.  v20:= 1I;
  #L1b4676.  v0:= v19;
  #L1b467a.  v1:= v20;
  #L1b467e.  if v0 != v1 then goto L1b4468;
  #L1b4682.  v19:= 0I;
  #L1b4686.  v19:= v13[v19] @kind object;
  #L1b468a.  v0:= v22 @kind object;
  #L1b468e.  v1:= v23 @kind object;
  #L1b4692.  v2:= v19 @kind object;
  #L1b4696.  call temp:= `resolve`(v0, v1, v2) @signature `Lretrofit2/Utils;.resolve:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1b469c.  v18:= temp @kind object;
  #L1b469e.  v19:= 0I;
  #L1b46a2.  v19:= v13[v19] @kind object;
  #L1b46a6.  v0:= v18 @kind object;
  #L1b46aa.  v1:= v19 @kind object;
  #L1b46ae.  if v0 == v1 then goto L1b4468;
  #L1b46b2.  v10:= new `retrofit2.Utils$WildcardTypeImpl`;
  #L1b46b6.  v19:= 1I;
  #L1b46ba.  v0:= v19;
  #L1b46be.  v0:= new `java.lang.reflect.Type`[v0];
  #L1b46c2.  v19:= v0 @kind object;
  #L1b46c6.  v20:= 0I;
  #L1b46ca.  v19[v20]:= v18 @kind object;
  #L1b46ce.  v20:= `@@retrofit2.Utils.EMPTY_TYPE_ARRAY` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b46d2.  v0:= v19 @kind object;
  #L1b46d6.  v1:= v20 @kind object;
  #L1b46da.  call `<init>`(v10, v0, v1) @signature `Lretrofit2/Utils$WildcardTypeImpl;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L1b46e0.  goto L1b4468;
  #L1b46e4.  v10:= v24 @kind object;
  #L1b46e8.  goto L1b4468;
}
procedure `java.lang.reflect.Type` `resolveTypeVariable`(`java.lang.reflect.Type` v4 @kind object @name `context`, `java.lang.Class` v5 @kind object, `java.lang.reflect.TypeVariable` v6 @kind object) @signature `Lretrofit2/Utils;.resolveTypeVariable:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b46fc.  call temp:= `declaringClassOf`(v6) @signature `Lretrofit2/Utils;.declaringClassOf:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @kind static;
  #L1b4702.  v1:= temp @kind object;
  #L1b4704.  if v1 != 0 then goto L1b470a;
  #L1b4708.  return v6 @kind object;
  #L1b470a.  call temp:= `getGenericSupertype`(v4, v5, v1) @signature `Lretrofit2/Utils;.getGenericSupertype:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L1b4710.  v0:= temp @kind object;
  #L1b4712.  v3:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b4716.  if v3 == 0 then goto L1b4708;
  #L1b471a.  call temp:= `getTypeParameters`(v1) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L1b4720.  v3:= temp @kind object;
  #L1b4722.  call temp:= `indexOf`(v3, v6) @signature `Lretrofit2/Utils;.indexOf:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L1b4728.  v2:= temp;
  #L1b472a.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L1b472e.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L1b4734.  v3:= temp @kind object;
  #L1b4736.  v6:= v3[v2] @kind object;
  #L1b473a.  goto L1b4708;
}
procedure `void` `throwIfFatal`(`java.lang.Throwable` v1 @kind object @name `t`) @signature `Lretrofit2/Utils;.throwIfFatal:(Ljava/lang/Throwable;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L1b474c.  v0:= instanceof @variable v1 @type ^`java.lang.VirtualMachineError` @kind boolean;
  #L1b4750.  if v0 == 0 then goto L1b475a;
  #L1b4754.  v1:= (`java.lang.VirtualMachineError`) v1 @kind object;
  #L1b4758.  throw v1;
  #L1b475a.  v0:= instanceof @variable v1 @type ^`java.lang.ThreadDeath` @kind boolean;
  #L1b475e.  if v0 == 0 then goto L1b4768;
  #L1b4762.  v1:= (`java.lang.ThreadDeath`) v1 @kind object;
  #L1b4766.  throw v1;
  #L1b4768.  v0:= instanceof @variable v1 @type ^`java.lang.LinkageError` @kind boolean;
  #L1b476c.  if v0 == 0 then goto L1b4776;
  #L1b4770.  v1:= (`java.lang.LinkageError`) v1 @kind object;
  #L1b4774.  throw v1;
  #L1b4776.  return @kind void;
}
procedure `java.lang.String` `typeToString`(`java.lang.reflect.Type` v1 @kind object @name `type`) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;

  #L1b4788.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L1b478c.  if v0 == 0 then goto L1b479e;
  #L1b4790.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1b4794.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1b479a.  v0:= temp @kind object;
  #L1b479c.  return v0 @kind object;
  #L1b479e.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b47a4.  v0:= temp @kind object;
  #L1b47a6.  goto L1b479c;
}
procedure `void` `validateServiceInterface`(`java.lang.Class` v2 @kind object) @signature `Lretrofit2/Utils;.validateServiceInterface:(Ljava/lang/Class;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1b47b8.  call temp:= `isInterface`(v2) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L1b47be.  v0:= temp;
  #L1b47c0.  if v0 != 0 then goto L1b47d4;
  #L1b47c4.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b47c8.  v1:= "API declarations must be interfaces." @kind object;
  #L1b47cc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b47d2.  throw v0;
  #L1b47d4.  call temp:= `getInterfaces`(v2) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L1b47da.  v0:= temp @kind object;
  #L1b47dc.  v0:= length @variable v0;
  #L1b47de.  if v0 <= 0 then goto L1b47f2;
  #L1b47e2.  v0:= new `java.lang.IllegalArgumentException`;
  #L1b47e6.  v1:= "API interfaces must not extend other interfaces." @kind object;
  #L1b47ea.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b47f0.  throw v0;
  #L1b47f2.  return @kind void;
}
