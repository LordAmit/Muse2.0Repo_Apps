record `retrofit2.Retrofit$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.HttpUrl` `retrofit2.Retrofit$Builder.baseUrl` @AccessFlag PRIVATE;
  `java.util.List` `retrofit2.Retrofit$Builder.callAdapterFactories` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Call$Factory` `retrofit2.Retrofit$Builder.callFactory` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `retrofit2.Retrofit$Builder.callbackExecutor` @AccessFlag PRIVATE;
  `java.util.List` `retrofit2.Retrofit$Builder.converterFactories` @AccessFlag PRIVATE_FINAL;
  `retrofit2.Platform` `retrofit2.Retrofit$Builder.platform` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.Retrofit$Builder.validateEagerly` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b0aec.  call temp:= `get`() @signature `Lretrofit2/Platform;.get:()Lretrofit2/Platform;` @kind static;
  #L1b0af2.  v0:= temp @kind object;
  #L1b0af4.  call `<init>`(v1, v0) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Platform;)V` @kind direct;
  #L1b0afa.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v1 @kind this, `retrofit2.Platform` v2 @kind object @name `platform`) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Platform;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1b0b0c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b0b12.  v0:= new `java.util.ArrayList`;
  #L1b0b16.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1b0b1c.  v1.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` := v0 @kind object;
  #L1b0b20.  v0:= new `java.util.ArrayList`;
  #L1b0b24.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1b0b2a.  v1.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` := v0 @kind object;
  #L1b0b2e.  v1.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` := v2 @kind object;
  #L1b0b32.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.Retrofit` v3 @kind object @name `retrofit`) @signature `Lretrofit2/Retrofit$Builder;.<init>:(Lretrofit2/Retrofit;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1b0b44.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b0b4a.  v0:= new `java.util.ArrayList`;
  #L1b0b4e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1b0b54.  v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` := v0 @kind object;
  #L1b0b58.  v0:= new `java.util.ArrayList`;
  #L1b0b5c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1b0b62.  v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` := v0 @kind object;
  #L1b0b66.  call temp:= `get`() @signature `Lretrofit2/Platform;.get:()Lretrofit2/Platform;` @kind static;
  #L1b0b6c.  v0:= temp @kind object;
  #L1b0b6e.  v2.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` := v0 @kind object;
  #L1b0b72.  v0:= v3.`retrofit2.Retrofit.callFactory` @type ^`okhttp3.Call$Factory` @kind object;
  #L1b0b76.  v2.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` := v0 @kind object;
  #L1b0b7a.  v0:= v3.`retrofit2.Retrofit.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L1b0b7e.  v2.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` := v0 @kind object;
  #L1b0b82.  v0:= v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1b0b86.  v1:= v3.`retrofit2.Retrofit.converterFactories` @type ^`java.util.List` @kind object;
  #L1b0b8a.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1b0b90.  v0:= v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1b0b94.  v1:= 0I;
  #L1b0b96.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1b0b9c.  v0:= v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1b0ba0.  v1:= v3.`retrofit2.Retrofit.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1b0ba4.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1b0baa.  v0:= v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1b0bae.  v1:= v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1b0bb2.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1b0bb8.  v1:= temp;
  #L1b0bba.  v1:= v1 + -1;
  #L1b0bbe.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1b0bc4.  v0:= v3.`retrofit2.Retrofit.callbackExecutor` @type ^`java.util.concurrent.Executor` @kind object;
  #L1b0bc8.  v2.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L1b0bcc.  v0:= v3.`retrofit2.Retrofit.validateEagerly` @type ^`boolean` @kind boolean;
  #L1b0bd0.  v2.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` := v0 @kind boolean;
  #L1b0bd4.  return @kind void;
}
procedure `retrofit2.Retrofit$Builder` `addCallAdapterFactory`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.CallAdapter$Factory` v3 @kind object @name `factory`) @signature `Lretrofit2/Retrofit$Builder;.addCallAdapterFactory:(Lretrofit2/CallAdapter$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b0be8.  v0:= v2.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1b0bec.  v1:= "factory == null" @kind object;
  #L1b0bf0.  call temp:= `checkNotNull`(v3, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0bf6.  v1:= temp @kind object;
  #L1b0bf8.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b0bfe.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `addConverterFactory`(`retrofit2.Retrofit$Builder` v2 @kind this, `retrofit2.Converter$Factory` v3 @kind object @name `factory`) @signature `Lretrofit2/Retrofit$Builder;.addConverterFactory:(Lretrofit2/Converter$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b0c10.  v0:= v2.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1b0c14.  v1:= "factory == null" @kind object;
  #L1b0c18.  call temp:= `checkNotNull`(v3, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0c1e.  v1:= temp @kind object;
  #L1b0c20.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b0c26.  return v2 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v4 @kind this, `java.lang.String` v5 @kind object @name `baseUrl`) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Ljava/lang/String;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b0c38.  v1:= "baseUrl == null" @kind object;
  #L1b0c3c.  call temp:= `checkNotNull`(v5, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0c42.  call temp:= `parse`(v5) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L1b0c48.  v0:= temp @kind object;
  #L1b0c4a.  if v0 != 0 then goto L1b0c80;
  #L1b0c4e.  v1:= new `java.lang.IllegalArgumentException`;
  #L1b0c52.  v2:= new `java.lang.StringBuilder`;
  #L1b0c56.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b0c5c.  v3:= "Illegal URL: " @kind object;
  #L1b0c60.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0c66.  v2:= temp @kind object;
  #L1b0c68.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0c6e.  v2:= temp @kind object;
  #L1b0c70.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0c76.  v2:= temp @kind object;
  #L1b0c78.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0c7e.  throw v1;
  #L1b0c80.  call temp:= `baseUrl`(v4, v0) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L1b0c86.  v1:= temp @kind object;
  #L1b0c88.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `baseUrl`(`retrofit2.Retrofit$Builder` v4 @kind this, `okhttp3.HttpUrl` v5 @kind object @name `baseUrl`) @signature `Lretrofit2/Retrofit$Builder;.baseUrl:(Lokhttp3/HttpUrl;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1b0c9c.  v1:= "baseUrl == null" @kind object;
  #L1b0ca0.  call temp:= `checkNotNull`(v5, v1) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0ca6.  call temp:= `pathSegments`(v5) @signature `Lokhttp3/HttpUrl;.pathSegments:()Ljava/util/List;` @kind virtual;
  #L1b0cac.  v0:= temp @kind object;
  #L1b0cae.  v1:= "" @kind object;
  #L1b0cb2.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1b0cb8.  v2:= temp;
  #L1b0cba.  v2:= v2 + -1;
  #L1b0cbe.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1b0cc4.  v2:= temp @kind object;
  #L1b0cc6.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1b0ccc.  v1:= temp;
  #L1b0cce.  if v1 != 0 then goto L1b0d04;
  #L1b0cd2.  v1:= new `java.lang.IllegalArgumentException`;
  #L1b0cd6.  v2:= new `java.lang.StringBuilder`;
  #L1b0cda.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b0ce0.  v3:= "baseUrl must end in /: " @kind object;
  #L1b0ce4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0cea.  v2:= temp @kind object;
  #L1b0cec.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b0cf2.  v2:= temp @kind object;
  #L1b0cf4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b0cfa.  v2:= temp @kind object;
  #L1b0cfc.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0d02.  throw v1;
  #L1b0d04.  v4.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` := v5 @kind object;
  #L1b0d08.  return v4 @kind object;
}
procedure `retrofit2.Retrofit` `build`(`retrofit2.Retrofit$Builder` v9 @kind this) @signature `Lretrofit2/Retrofit$Builder;.build:()Lretrofit2/Retrofit;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1b0d1c.  v0:= v9.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L1b0d20.  if v0 != 0 then goto L1b0d34;
  #L1b0d24.  v0:= new `java.lang.IllegalStateException`;
  #L1b0d28.  v2:= "Base URL required." @kind object;
  #L1b0d2c.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b0d32.  throw v0;
  #L1b0d34.  v1:= v9.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` @kind object;
  #L1b0d38.  if v1 != 0 then goto L1b0d46;
  #L1b0d3c.  v1:= new `okhttp3.OkHttpClient`;
  #L1b0d40.  call `<init>`(v1) @signature `Lokhttp3/OkHttpClient;.<init>:()V` @kind direct;
  #L1b0d46.  v5:= v9.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` @kind object;
  #L1b0d4a.  if v5 != 0 then goto L1b0d5a;
  #L1b0d4e.  v0:= v9.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L1b0d52.  call temp:= `defaultCallbackExecutor`(v0) @signature `Lretrofit2/Platform;.defaultCallbackExecutor:()Ljava/util/concurrent/Executor;` @kind virtual;
  #L1b0d58.  v5:= temp @kind object;
  #L1b0d5a.  v7:= new `java.util.ArrayList`;
  #L1b0d5e.  v0:= v9.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1b0d62.  call `<init>`(v7, v0) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L1b0d68.  v0:= v9.`retrofit2.Retrofit$Builder.platform` @type ^`retrofit2.Platform` @kind object;
  #L1b0d6c.  call temp:= `defaultCallAdapterFactory`(v0, v5) @signature `Lretrofit2/Platform;.defaultCallAdapterFactory:(Ljava/util/concurrent/Executor;)Lretrofit2/CallAdapter$Factory;` @kind virtual;
  #L1b0d72.  v0:= temp @kind object;
  #L1b0d74.  call temp:= `add`(v7, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b0d7a.  v8:= new `java.util.ArrayList`;
  #L1b0d7e.  v0:= v9.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1b0d82.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1b0d88.  v0:= temp;
  #L1b0d8a.  v0:= v0 + 1;
  #L1b0d8e.  call `<init>`(v8, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L1b0d94.  v0:= new `retrofit2.BuiltInConverters`;
  #L1b0d98.  call `<init>`(v0) @signature `Lretrofit2/BuiltInConverters;.<init>:()V` @kind direct;
  #L1b0d9e.  call temp:= `add`(v8, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b0da4.  v0:= v9.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1b0da8.  call temp:= `addAll`(v8, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1b0dae.  v0:= new `retrofit2.Retrofit`;
  #L1b0db2.  v2:= v9.`retrofit2.Retrofit$Builder.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L1b0db6.  call temp:= `unmodifiableList`(v8) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1b0dbc.  v3:= temp @kind object;
  #L1b0dbe.  call temp:= `unmodifiableList`(v7) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L1b0dc4.  v4:= temp @kind object;
  #L1b0dc6.  v6:= v9.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` @kind boolean;
  #L1b0dca.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lretrofit2/Retrofit;.<init>:(Lokhttp3/Call$Factory;Lokhttp3/HttpUrl;Ljava/util/List;Ljava/util/List;Ljava/util/concurrent/Executor;Z)V` @kind direct;
  #L1b0dd0.  return v0 @kind object;
}
procedure `java.util.List` `callAdapterFactories`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.callAdapterFactories:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0de4.  v0:= v1.`retrofit2.Retrofit$Builder.callAdapterFactories` @type ^`java.util.List` @kind object;
  #L1b0de8.  return v0 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `callFactory`(`retrofit2.Retrofit$Builder` v1 @kind this, `okhttp3.Call$Factory` v2 @kind object @name `factory`) @signature `Lretrofit2/Retrofit$Builder;.callFactory:(Lokhttp3/Call$Factory;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0dfc.  v0:= "factory == null" @kind object;
  #L1b0e00.  call temp:= `checkNotNull`(v2, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0e06.  v0:= temp @kind object;
  #L1b0e08.  v0:= (`okhttp3.Call$Factory`) v0 @kind object;
  #L1b0e0c.  v1.`retrofit2.Retrofit$Builder.callFactory` @type ^`okhttp3.Call$Factory` := v0 @kind object;
  #L1b0e10.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `callbackExecutor`(`retrofit2.Retrofit$Builder` v1 @kind this, `java.util.concurrent.Executor` v2 @kind object @name `executor`) @signature `Lretrofit2/Retrofit$Builder;.callbackExecutor:(Ljava/util/concurrent/Executor;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0e24.  v0:= "executor == null" @kind object;
  #L1b0e28.  call temp:= `checkNotNull`(v2, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0e2e.  v0:= temp @kind object;
  #L1b0e30.  v0:= (`java.util.concurrent.Executor`) v0 @kind object;
  #L1b0e34.  v1.`retrofit2.Retrofit$Builder.callbackExecutor` @type ^`java.util.concurrent.Executor` := v0 @kind object;
  #L1b0e38.  return v1 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `client`(`retrofit2.Retrofit$Builder` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object @name `client`) @signature `Lretrofit2/Retrofit$Builder;.client:(Lokhttp3/OkHttpClient;)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0e4c.  v0:= "client == null" @kind object;
  #L1b0e50.  call temp:= `checkNotNull`(v2, v0) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b0e56.  v0:= temp @kind object;
  #L1b0e58.  v0:= (`okhttp3.Call$Factory`) v0 @kind object;
  #L1b0e5c.  call temp:= `callFactory`(v1, v0) @signature `Lretrofit2/Retrofit$Builder;.callFactory:(Lokhttp3/Call$Factory;)Lretrofit2/Retrofit$Builder;` @kind virtual;
  #L1b0e62.  v0:= temp @kind object;
  #L1b0e64.  return v0 @kind object;
}
procedure `java.util.List` `converterFactories`(`retrofit2.Retrofit$Builder` v1 @kind this) @signature `Lretrofit2/Retrofit$Builder;.converterFactories:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b0e78.  v0:= v1.`retrofit2.Retrofit$Builder.converterFactories` @type ^`java.util.List` @kind object;
  #L1b0e7c.  return v0 @kind object;
}
procedure `retrofit2.Retrofit$Builder` `validateEagerly`(`retrofit2.Retrofit$Builder` v0 @kind this, `boolean` v1 @name `validateEagerly`) @signature `Lretrofit2/Retrofit$Builder;.validateEagerly:(Z)Lretrofit2/Retrofit$Builder;` @AccessFlag PUBLIC {
    temp;

  #L1b0e90.  v0.`retrofit2.Retrofit$Builder.validateEagerly` @type ^`boolean` := v1 @kind boolean;
  #L1b0e94.  return v0 @kind object;
}
