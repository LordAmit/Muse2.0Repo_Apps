record `retrofit2.Utils$ParameterizedTypeImpl` @kind class @AccessFlag FINAL extends `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.ownerType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `retrofit2.Utils$ParameterizedTypeImpl.rawType` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`retrofit2.Utils$ParameterizedTypeImpl` v5 @kind this, `java.lang.reflect.Type` v6 @kind object @name `ownerType`, `java.lang.reflect.Type` v7 @kind object @name `rawType`, `java.lang.reflect.Type`[] v8 @kind object @name `typeArguments`) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b3920.  v3:= 1I;
  #L1b3922.  v4:= 0I;
  #L1b3924.  call `<init>`(v5) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b392a.  v1:= instanceof @variable v7 @type ^`java.lang.Class` @kind boolean;
  #L1b392e.  if v1 == 0 then goto L1b3962;
  #L1b3932.  if v6 != 0 then goto L1b395a;
  #L1b3936.  v2:= v3;
  #L1b3938.  v1:= v7 @kind object;
  #L1b393a.  v1:= (`java.lang.Class`) v1 @kind object;
  #L1b393e.  call temp:= `getEnclosingClass`(v1) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L1b3944.  v1:= temp @kind object;
  #L1b3946.  if v1 != 0 then goto L1b395e;
  #L1b394a.  if v2 == v3 then goto L1b3962;
  #L1b394e.  v1:= new `java.lang.IllegalArgumentException`;
  #L1b3952.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1b3958.  throw v1;
  #L1b395a.  v2:= v4;
  #L1b395c.  goto L1b3938;
  #L1b395e.  v3:= v4;
  #L1b3960.  goto L1b394a;
  #L1b3962.  v1:= length @variable v8;
  #L1b3964.  if v4 >= v1 then goto L1b3982;
  #L1b3968.  v0:= v8[v4] @kind object;
  #L1b396c.  v2:= "typeArgument == null" @kind object;
  #L1b3970.  call temp:= `checkNotNull`(v0, v2) @signature `Lretrofit2/Utils;.checkNotNull:(Ljava/lang/Object;Ljava/lang/String;)Ljava/lang/Object;` @kind static;
  #L1b3976.  call `checkNotPrimitive`(v0) @signature `Lretrofit2/Utils;.checkNotPrimitive:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1b397c.  v4:= v4 + 1;
  #L1b3980.  goto L1b3964;
  #L1b3982.  v5.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` := v6 @kind object;
  #L1b3986.  v5.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` := v7 @kind object;
  #L1b398a.  call temp:= `clone`(v8) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1b3990.  v1:= temp @kind object;
  #L1b3992.  v1:= (`java.lang.reflect.Type`[]) v1 @kind object;
  #L1b3996.  v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] := v1 @kind object;
  #L1b399a.  return @kind void;
}
procedure `boolean` `equals`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this, `java.lang.Object` v2 @kind object @name `other`) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b39ac.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L1b39b0.  if v0 == 0 then goto L1b39c8;
  #L1b39b4.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L1b39b8.  call temp:= `equals`(v1, v2) @signature `Lretrofit2/Utils;.equals:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L1b39be.  v0:= temp;
  #L1b39c0.  if v0 == 0 then goto L1b39c8;
  #L1b39c4.  v0:= 1I;
  #L1b39c6.  return v0;
  #L1b39c8.  v0:= 0I;
  #L1b39ca.  goto L1b39c6;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b39dc.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b39e0.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1b39e6.  v0:= temp @kind object;
  #L1b39e8.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L1b39ec.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b3a00.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3a04.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`retrofit2.Utils$ParameterizedTypeImpl` v1 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1b3a18.  v0:= v1.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3a1c.  return v0 @kind object;
}
procedure `int` `hashCode`(`retrofit2.Utils$ParameterizedTypeImpl` v2 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1b3a30.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b3a34.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L1b3a3a.  v0:= temp;
  #L1b3a3c.  v1:= v2.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3a40.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b3a46.  v1:= temp;
  #L1b3a48.  v1:= v1 ^~ v0 @kind int;
  #L1b3a4a.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3a4e.  if v0 == 0 then goto L1b3a62;
  #L1b3a52.  v0:= v2.`retrofit2.Utils$ParameterizedTypeImpl.ownerType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3a56.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1b3a5c.  v0:= temp;
  #L1b3a5e.  v0:= v0 ^~ v1 @kind int;
  #L1b3a60.  return v0;
  #L1b3a62.  v0:= 0I;
  #L1b3a64.  goto L1b3a5e;
}
procedure `java.lang.String` `toString`(`retrofit2.Utils$ParameterizedTypeImpl` v5 @kind this) @signature `Lretrofit2/Utils$ParameterizedTypeImpl;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1b3a78.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b3a7c.  v2:= length @variable v2;
  #L1b3a7e.  if v2 != 0 then goto L1b3a90;
  #L1b3a82.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3a86.  call temp:= `typeToString`(v2) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b3a8c.  v2:= temp @kind object;
  #L1b3a8e.  return v2 @kind object;
  #L1b3a90.  v1:= new `java.lang.StringBuilder`;
  #L1b3a94.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b3a98.  v2:= length @variable v2;
  #L1b3a9a.  v2:= v2 + 1;
  #L1b3a9e.  v2:= v2 * 30;
  #L1b3aa2.  call `<init>`(v1, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1b3aa8.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.rawType` @type ^`java.lang.reflect.Type` @kind object;
  #L1b3aac.  call temp:= `typeToString`(v2) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b3ab2.  v2:= temp @kind object;
  #L1b3ab4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3aba.  v2:= "<" @kind object;
  #L1b3abe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3ac4.  v2:= temp @kind object;
  #L1b3ac6.  v3:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b3aca.  v4:= 0I;
  #L1b3acc.  v3:= v3[v4] @kind object;
  #L1b3ad0.  call temp:= `typeToString`(v3) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b3ad6.  v3:= temp @kind object;
  #L1b3ad8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3ade.  v0:= 1I;
  #L1b3ae0.  v2:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b3ae4.  v2:= length @variable v2;
  #L1b3ae6.  if v0 >= v2 then goto L1b3b12;
  #L1b3aea.  v2:= ", " @kind object;
  #L1b3aee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3af4.  v2:= temp @kind object;
  #L1b3af6.  v3:= v5.`retrofit2.Utils$ParameterizedTypeImpl.typeArguments` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1b3afa.  v3:= v3[v0] @kind object;
  #L1b3afe.  call temp:= `typeToString`(v3) @signature `Lretrofit2/Utils;.typeToString:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L1b3b04.  v3:= temp @kind object;
  #L1b3b06.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3b0c.  v0:= v0 + 1;
  #L1b3b10.  goto L1b3ae0;
  #L1b3b12.  v2:= ">" @kind object;
  #L1b3b16.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b3b1c.  v2:= temp @kind object;
  #L1b3b1e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b3b24.  v2:= temp @kind object;
  #L1b3b26.  goto L1b3a8e;
}
