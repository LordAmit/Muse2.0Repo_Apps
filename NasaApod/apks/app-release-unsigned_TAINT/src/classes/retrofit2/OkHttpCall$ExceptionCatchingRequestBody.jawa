record `retrofit2.OkHttpCall$ExceptionCatchingRequestBody` @kind class @AccessFlag FINAL extends `okhttp3.ResponseBody` @kind class {
  `okhttp3.ResponseBody` `retrofit2.OkHttpCall$ExceptionCatchingRequestBody.delegate` @AccessFlag PRIVATE_FINAL;
  `java.io.IOException` `retrofit2.OkHttpCall$ExceptionCatchingRequestBody.thrownException` @AccessFlag ;
}
procedure `void` `<init>`(`retrofit2.OkHttpCall$ExceptionCatchingRequestBody` v0 @kind this, `okhttp3.ResponseBody` v1 @kind object @name `delegate`) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingRequestBody;.<init>:(Lokhttp3/ResponseBody;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L221430.  call `<init>`(v0) @signature `Lokhttp3/ResponseBody;.<init>:()V` @kind direct;
  #L221436.  v0.`retrofit2.OkHttpCall$ExceptionCatchingRequestBody.delegate` @type ^`okhttp3.ResponseBody` := v1 @kind object;
  #L22143a.  return @kind void;
}
procedure `void` `close`(`retrofit2.OkHttpCall$ExceptionCatchingRequestBody` v1 @kind this) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingRequestBody;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L22144c.  v0:= v1.`retrofit2.OkHttpCall$ExceptionCatchingRequestBody.delegate` @type ^`okhttp3.ResponseBody` @kind object;
  #L221450.  call `close`(v0) @signature `Lokhttp3/ResponseBody;.close:()V` @kind virtual;
  #L221456.  return @kind void;
}
procedure `long` `contentLength`(`retrofit2.OkHttpCall$ExceptionCatchingRequestBody` v2 @kind this) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingRequestBody;.contentLength:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L221468.  v0:= v2.`retrofit2.OkHttpCall$ExceptionCatchingRequestBody.delegate` @type ^`okhttp3.ResponseBody` @kind object;
  #L22146c.  call temp:= `contentLength`(v0) @signature `Lokhttp3/ResponseBody;.contentLength:()J` @kind virtual;
  #L221472.  v0:= temp @kind wide;
  #L221474.  return v0 @kind wide;
}
procedure `okhttp3.MediaType` `contentType`(`retrofit2.OkHttpCall$ExceptionCatchingRequestBody` v1 @kind this) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingRequestBody;.contentType:()Lokhttp3/MediaType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L221488.  v0:= v1.`retrofit2.OkHttpCall$ExceptionCatchingRequestBody.delegate` @type ^`okhttp3.ResponseBody` @kind object;
  #L22148c.  call temp:= `contentType`(v0) @signature `Lokhttp3/ResponseBody;.contentType:()Lokhttp3/MediaType;` @kind virtual;
  #L221492.  v0:= temp @kind object;
  #L221494.  return v0 @kind object;
}
procedure `okio.BufferedSource` `source`(`retrofit2.OkHttpCall$ExceptionCatchingRequestBody` v2 @kind this) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingRequestBody;.source:()Lokio/BufferedSource;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2214a8.  v0:= new `retrofit2.OkHttpCall$ExceptionCatchingRequestBody$1`;
  #L2214ac.  v1:= v2.`retrofit2.OkHttpCall$ExceptionCatchingRequestBody.delegate` @type ^`okhttp3.ResponseBody` @kind object;
  #L2214b0.  call temp:= `source`(v1) @signature `Lokhttp3/ResponseBody;.source:()Lokio/BufferedSource;` @kind virtual;
  #L2214b6.  v1:= temp @kind object;
  #L2214b8.  call `<init>`(v0, v2, v1) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingRequestBody$1;.<init>:(Lretrofit2/OkHttpCall$ExceptionCatchingRequestBody;Lokio/Source;)V` @kind direct;
  #L2214be.  call temp:= `buffer`(v0) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L2214c4.  v0:= temp @kind object;
  #L2214c6.  return v0 @kind object;
}
procedure `void` `throwIfCaught`(`retrofit2.OkHttpCall$ExceptionCatchingRequestBody` v1 @kind this) @signature `Lretrofit2/OkHttpCall$ExceptionCatchingRequestBody;.throwIfCaught:()V` @AccessFlag  {
    temp;
    v0;

  #L2214d8.  v0:= v1.`retrofit2.OkHttpCall$ExceptionCatchingRequestBody.thrownException` @type ^`java.io.IOException` @kind object;
  #L2214dc.  if v0 == 0 then goto L2214e6;
  #L2214e0.  v0:= v1.`retrofit2.OkHttpCall$ExceptionCatchingRequestBody.thrownException` @type ^`java.io.IOException` @kind object;
  #L2214e4.  throw v0;
  #L2214e6.  return @kind void;
}
