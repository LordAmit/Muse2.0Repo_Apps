record `retrofit2.ServiceMethod` @kind class @AccessFlag FINAL {
  `okhttp3.HttpUrl` `retrofit2.ServiceMethod.baseUrl` @AccessFlag PRIVATE_FINAL;
  `retrofit2.CallAdapter` `retrofit2.ServiceMethod.callAdapter` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Call$Factory` `retrofit2.ServiceMethod.callFactory` @AccessFlag PRIVATE_FINAL;
  `okhttp3.MediaType` `retrofit2.ServiceMethod.contentType` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.ServiceMethod.hasBody` @AccessFlag PRIVATE_FINAL;
  `okhttp3.Headers` `retrofit2.ServiceMethod.headers` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `retrofit2.ServiceMethod.httpMethod` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.ServiceMethod.isFormEncoded` @AccessFlag PRIVATE_FINAL;
  `boolean` `retrofit2.ServiceMethod.isMultipart` @AccessFlag PRIVATE_FINAL;
  `retrofit2.ParameterHandler`[] `retrofit2.ServiceMethod.parameterHandlers` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `retrofit2.ServiceMethod.relativeUrl` @AccessFlag PRIVATE_FINAL;
  `retrofit2.Converter` `retrofit2.ServiceMethod.responseConverter` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@retrofit2.ServiceMethod.PARAM` @AccessFlag STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit2.ServiceMethod.PARAM_NAME_REGEX` @AccessFlag STATIC_FINAL;
global `java.util.regex.Pattern` `@@retrofit2.ServiceMethod.PARAM_URL_REGEX` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lretrofit2/ServiceMethod;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1b35c0.  v0:= "\\{([a-zA-Z][a-zA-Z0-9_-]*)\\}" @kind object;
  #L1b35c4.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L1b35ca.  v0:= temp @kind object;
  #L1b35cc.  `@@retrofit2.ServiceMethod.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L1b35d0.  v0:= "[a-zA-Z][a-zA-Z0-9_-]*" @kind object;
  #L1b35d4.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L1b35da.  v0:= temp @kind object;
  #L1b35dc.  `@@retrofit2.ServiceMethod.PARAM_NAME_REGEX` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L1b35e0.  return @kind void;
}
procedure `void` `<init>`(`retrofit2.ServiceMethod` v1 @kind this, `retrofit2.ServiceMethod$Builder` v2 @kind object) @signature `Lretrofit2/ServiceMethod;.<init>:(Lretrofit2/ServiceMethod$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1b35f4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1b35fa.  v0:= v2.`retrofit2.ServiceMethod$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L1b35fe.  call temp:= `callFactory`(v0) @signature `Lretrofit2/Retrofit;.callFactory:()Lokhttp3/Call$Factory;` @kind virtual;
  #L1b3604.  v0:= temp @kind object;
  #L1b3606.  v1.`retrofit2.ServiceMethod.callFactory` @type ^`okhttp3.Call$Factory` := v0 @kind object;
  #L1b360a.  v0:= v2.`retrofit2.ServiceMethod$Builder.callAdapter` @type ^`retrofit2.CallAdapter` @kind object;
  #L1b360e.  v1.`retrofit2.ServiceMethod.callAdapter` @type ^`retrofit2.CallAdapter` := v0 @kind object;
  #L1b3612.  v0:= v2.`retrofit2.ServiceMethod$Builder.retrofit` @type ^`retrofit2.Retrofit` @kind object;
  #L1b3616.  call temp:= `baseUrl`(v0) @signature `Lretrofit2/Retrofit;.baseUrl:()Lokhttp3/HttpUrl;` @kind virtual;
  #L1b361c.  v0:= temp @kind object;
  #L1b361e.  v1.`retrofit2.ServiceMethod.baseUrl` @type ^`okhttp3.HttpUrl` := v0 @kind object;
  #L1b3622.  v0:= v2.`retrofit2.ServiceMethod$Builder.responseConverter` @type ^`retrofit2.Converter` @kind object;
  #L1b3626.  v1.`retrofit2.ServiceMethod.responseConverter` @type ^`retrofit2.Converter` := v0 @kind object;
  #L1b362a.  v0:= v2.`retrofit2.ServiceMethod$Builder.httpMethod` @type ^`java.lang.String` @kind object;
  #L1b362e.  v1.`retrofit2.ServiceMethod.httpMethod` @type ^`java.lang.String` := v0 @kind object;
  #L1b3632.  v0:= v2.`retrofit2.ServiceMethod$Builder.relativeUrl` @type ^`java.lang.String` @kind object;
  #L1b3636.  v1.`retrofit2.ServiceMethod.relativeUrl` @type ^`java.lang.String` := v0 @kind object;
  #L1b363a.  v0:= v2.`retrofit2.ServiceMethod$Builder.headers` @type ^`okhttp3.Headers` @kind object;
  #L1b363e.  v1.`retrofit2.ServiceMethod.headers` @type ^`okhttp3.Headers` := v0 @kind object;
  #L1b3642.  v0:= v2.`retrofit2.ServiceMethod$Builder.contentType` @type ^`okhttp3.MediaType` @kind object;
  #L1b3646.  v1.`retrofit2.ServiceMethod.contentType` @type ^`okhttp3.MediaType` := v0 @kind object;
  #L1b364a.  v0:= v2.`retrofit2.ServiceMethod$Builder.hasBody` @type ^`boolean` @kind boolean;
  #L1b364e.  v1.`retrofit2.ServiceMethod.hasBody` @type ^`boolean` := v0 @kind boolean;
  #L1b3652.  v0:= v2.`retrofit2.ServiceMethod$Builder.isFormEncoded` @type ^`boolean` @kind boolean;
  #L1b3656.  v1.`retrofit2.ServiceMethod.isFormEncoded` @type ^`boolean` := v0 @kind boolean;
  #L1b365a.  v0:= v2.`retrofit2.ServiceMethod$Builder.isMultipart` @type ^`boolean` @kind boolean;
  #L1b365e.  v1.`retrofit2.ServiceMethod.isMultipart` @type ^`boolean` := v0 @kind boolean;
  #L1b3662.  v0:= v2.`retrofit2.ServiceMethod$Builder.parameterHandlers` @type ^`retrofit2.ParameterHandler`[] @kind object;
  #L1b3666.  v1.`retrofit2.ServiceMethod.parameterHandlers` @type ^`retrofit2.ParameterHandler`[] := v0 @kind object;
  #L1b366a.  return @kind void;
}
procedure `java.lang.Class` `boxIfPrimitive`(`java.lang.Class` v1 @kind object) @signature `Lretrofit2/ServiceMethod;.boxIfPrimitive:(Ljava/lang/Class;)Ljava/lang/Class;` @AccessFlag STATIC {
    temp;
    v0;

  #L1b367c.  v0:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b3680.  if v0 != v1 then goto L1b368a;
  #L1b3684.  v1:= constclass @type ^`java.lang.Boolean` @kind object;
  #L1b3688.  return v1 @kind object;
  #L1b368a.  v0:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b368e.  if v0 != v1 then goto L1b3698;
  #L1b3692.  v1:= constclass @type ^`java.lang.Byte` @kind object;
  #L1b3696.  goto L1b3688;
  #L1b3698.  v0:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b369c.  if v0 != v1 then goto L1b36a6;
  #L1b36a0.  v1:= constclass @type ^`java.lang.Character` @kind object;
  #L1b36a4.  goto L1b3688;
  #L1b36a6.  v0:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b36aa.  if v0 != v1 then goto L1b36b4;
  #L1b36ae.  v1:= constclass @type ^`java.lang.Double` @kind object;
  #L1b36b2.  goto L1b3688;
  #L1b36b4.  v0:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b36b8.  if v0 != v1 then goto L1b36c2;
  #L1b36bc.  v1:= constclass @type ^`java.lang.Float` @kind object;
  #L1b36c0.  goto L1b3688;
  #L1b36c2.  v0:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b36c6.  if v0 != v1 then goto L1b36d0;
  #L1b36ca.  v1:= constclass @type ^`java.lang.Integer` @kind object;
  #L1b36ce.  goto L1b3688;
  #L1b36d0.  v0:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b36d4.  if v0 != v1 then goto L1b36de;
  #L1b36d8.  v1:= constclass @type ^`java.lang.Long` @kind object;
  #L1b36dc.  goto L1b3688;
  #L1b36de.  v0:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L1b36e2.  if v0 != v1 then goto L1b3688;
  #L1b36e6.  v1:= constclass @type ^`java.lang.Short` @kind object;
  #L1b36ea.  goto L1b3688;
}
procedure `java.util.Set` `parsePathParameters`(`java.lang.String` v3 @kind object @name `path`) @signature `Lretrofit2/ServiceMethod;.parsePathParameters:(Ljava/lang/String;)Ljava/util/Set;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1b36fc.  v2:= `@@retrofit2.ServiceMethod.PARAM_URL_REGEX` @type ^`java.util.regex.Pattern` @kind object;
  #L1b3700.  call temp:= `matcher`(v2, v3) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L1b3706.  v0:= temp @kind object;
  #L1b3708.  v1:= new `java.util.LinkedHashSet`;
  #L1b370c.  call `<init>`(v1) @signature `Ljava/util/LinkedHashSet;.<init>:()V` @kind direct;
  #L1b3712.  call temp:= `find`(v0) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L1b3718.  v2:= temp;
  #L1b371a.  if v2 == 0 then goto L1b3730;
  #L1b371e.  v2:= 1I;
  #L1b3720.  call temp:= `group`(v0, v2) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L1b3726.  v2:= temp @kind object;
  #L1b3728.  call temp:= `add`(v1, v2) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1b372e.  goto L1b3712;
  #L1b3730.  return v1 @kind object;
}
procedure `java.lang.Object` `adapt`(`retrofit2.ServiceMethod` v1 @kind this, `retrofit2.Call` v2 @kind object) @signature `Lretrofit2/ServiceMethod;.adapt:(Lretrofit2/Call;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L1b3744.  v0:= v1.`retrofit2.ServiceMethod.callAdapter` @type ^`retrofit2.CallAdapter` @kind object;
  #L1b3748.  call temp:= `adapt`(v0, v2) @signature `Lretrofit2/CallAdapter;.adapt:(Lretrofit2/Call;)Ljava/lang/Object;` @kind interface;
  #L1b374e.  v0:= temp @kind object;
  #L1b3750.  return v0 @kind object;
}
procedure `okhttp3.Call` `toCall`(`retrofit2.ServiceMethod` v12 @kind this, `java.lang.Object`[] v13 @kind object @name `args`) @signature `Lretrofit2/ServiceMethod;.toCall:([Ljava/lang/Object;)Lokhttp3/Call;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L1b3764.  v0:= new `retrofit2.RequestBuilder`;
  #L1b3768.  v1:= v12.`retrofit2.ServiceMethod.httpMethod` @type ^`java.lang.String` @kind object;
  #L1b376c.  v2:= v12.`retrofit2.ServiceMethod.baseUrl` @type ^`okhttp3.HttpUrl` @kind object;
  #L1b3770.  v3:= v12.`retrofit2.ServiceMethod.relativeUrl` @type ^`java.lang.String` @kind object;
  #L1b3774.  v4:= v12.`retrofit2.ServiceMethod.headers` @type ^`okhttp3.Headers` @kind object;
  #L1b3778.  v5:= v12.`retrofit2.ServiceMethod.contentType` @type ^`okhttp3.MediaType` @kind object;
  #L1b377c.  v6:= v12.`retrofit2.ServiceMethod.hasBody` @type ^`boolean` @kind boolean;
  #L1b3780.  v7:= v12.`retrofit2.ServiceMethod.isFormEncoded` @type ^`boolean` @kind boolean;
  #L1b3784.  v8:= v12.`retrofit2.ServiceMethod.isMultipart` @type ^`boolean` @kind boolean;
  #L1b3788.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lretrofit2/RequestBuilder;.<init>:(Ljava/lang/String;Lokhttp3/HttpUrl;Ljava/lang/String;Lokhttp3/Headers;Lokhttp3/MediaType;ZZZ)V` @kind direct;
  #L1b378e.  v10:= v12.`retrofit2.ServiceMethod.parameterHandlers` @type ^`retrofit2.ParameterHandler`[] @kind object;
  #L1b3792.  if v13 == 0 then goto L1b37f2;
  #L1b3796.  v9:= length @variable v13;
  #L1b3798.  v1:= length @variable v10;
  #L1b379a.  if v9 == v1 then goto L1b37f6;
  #L1b379e.  v1:= new `java.lang.IllegalArgumentException`;
  #L1b37a2.  v2:= new `java.lang.StringBuilder`;
  #L1b37a6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1b37ac.  v3:= "Argument count (" @kind object;
  #L1b37b0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b37b6.  v2:= temp @kind object;
  #L1b37b8.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b37be.  v2:= temp @kind object;
  #L1b37c0.  v3:= ") doesn't match expected count (" @kind object;
  #L1b37c4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b37ca.  v2:= temp @kind object;
  #L1b37cc.  v3:= length @variable v10;
  #L1b37ce.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b37d4.  v2:= temp @kind object;
  #L1b37d6.  v3:= ")" @kind object;
  #L1b37da.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1b37e0.  v2:= temp @kind object;
  #L1b37e2.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1b37e8.  v2:= temp @kind object;
  #L1b37ea.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1b37f0.  throw v1;
  #L1b37f2.  v9:= 0I;
  #L1b37f4.  goto L1b3798;
  #L1b37f6.  v11:= 0I;
  #L1b37f8.  if v11 >= v9 then goto L1b3810;
  #L1b37fc.  v1:= v10[v11] @kind object;
  #L1b3800.  v2:= v13[v11] @kind object;
  #L1b3804.  call `apply`(v1, v0, v2) @signature `Lretrofit2/ParameterHandler;.apply:(Lretrofit2/RequestBuilder;Ljava/lang/Object;)V` @kind virtual;
  #L1b380a.  v11:= v11 + 1;
  #L1b380e.  goto L1b37f8;
  #L1b3810.  v1:= v12.`retrofit2.ServiceMethod.callFactory` @type ^`okhttp3.Call$Factory` @kind object;
  #L1b3814.  call temp:= `build`(v0) @signature `Lretrofit2/RequestBuilder;.build:()Lokhttp3/Request;` @kind virtual;
  #L1b381a.  v2:= temp @kind object;
  #L1b381c.  call temp:= `newCall`(v1, v2) @signature `Lokhttp3/Call$Factory;.newCall:(Lokhttp3/Request;)Lokhttp3/Call;` @kind interface;
  #L1b3822.  v1:= temp @kind object;
  #L1b3824.  return v1 @kind object;
}
procedure `java.lang.Object` `toResponse`(`retrofit2.ServiceMethod` v1 @kind this, `okhttp3.ResponseBody` v2 @kind object @name `body`) @signature `Lretrofit2/ServiceMethod;.toResponse:(Lokhttp3/ResponseBody;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;

  #L1b3838.  v0:= v1.`retrofit2.ServiceMethod.responseConverter` @type ^`retrofit2.Converter` @kind object;
  #L1b383c.  call temp:= `convert`(v0, v2) @signature `Lretrofit2/Converter;.convert:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1b3842.  v0:= temp @kind object;
  #L1b3844.  return v0 @kind object;
}
