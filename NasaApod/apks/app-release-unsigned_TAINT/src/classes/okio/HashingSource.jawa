record `okio.HashingSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.ForwardingSource` @kind class {
  `javax.crypto.Mac` `okio.HashingSource.mac` @AccessFlag PRIVATE_FINAL;
  `java.security.MessageDigest` `okio.HashingSource.messageDigest` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okio.HashingSource` v2 @kind this, `okio.Source` v3 @kind object @name `source`, `java.lang.String` v4 @kind object @name `algorithm`) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L24a6c4.  call `<init>`(v2, v3) @signature `Lokio/ForwardingSource;.<init>:(Lokio/Source;)V` @kind direct;
  #Try_start0.  
  #L24a6ca.  call temp:= `getInstance`(v4) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L24a6d0.  v1:= temp @kind object;
  #L24a6d2.  v2.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` := v1 @kind object;
  #L24a6d6.  v1:= 0I;
  #L24a6d8.  v2.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` := v1 @kind object;
  #Try_end0.  
  #L24a6dc.  return @kind void;
  #L24a6de.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L24a6e0.  v1:= new `java.lang.AssertionError`;
  #L24a6e4.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L24a6ea.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L24a6de;
}
procedure `void` `<init>`(`okio.HashingSource` v4 @kind this, `okio.Source` v5 @kind object @name `source`, `okio.ByteString` v6 @kind object @name `key`, `java.lang.String` v7 @kind object @name `algorithm`) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Lokio/ByteString;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24a70c.  call `<init>`(v4, v5) @signature `Lokio/ForwardingSource;.<init>:(Lokio/Source;)V` @kind direct;
  #Try_start0.  
  #L24a712.  call temp:= `getInstance`(v7) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L24a718.  v1:= temp @kind object;
  #L24a71a.  v4.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` := v1 @kind object;
  #L24a71e.  v1:= v4.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` @kind object;
  #L24a722.  v2:= new `javax.crypto.spec.SecretKeySpec`;
  #L24a726.  call temp:= `toByteArray`(v6) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L24a72c.  v3:= temp @kind object;
  #L24a72e.  call `<init>`(v2, v3, v7) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L24a734.  call `init`(v1, v2) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L24a73a.  v1:= 0I;
  #L24a73c.  v4.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` := v1 @kind object;
  #Try_end0.  
  #L24a740.  return @kind void;
  #L24a742.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L24a744.  v1:= new `java.lang.AssertionError`;
  #L24a748.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L24a74e.  throw v1;
  #L24a750.  v0:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L24a752.  v1:= new `java.lang.IllegalArgumentException`;
  #L24a756.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L24a75c.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L24a742;
  catch `java.security.InvalidKeyException` @[Try_start0..Try_end0] goto L24a750;
}
procedure `okio.HashingSource` `hmacSha1`(`okio.Source` v2 @kind object @name `source`, `okio.ByteString` v3 @kind object @name `key`) @signature `Lokio/HashingSource;.hmacSha1:(Lokio/Source;Lokio/ByteString;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24a780.  v0:= new `okio.HashingSource`;
  #L24a784.  v1:= "HmacSHA1" @kind object;
  #L24a788.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L24a78e.  return v0 @kind object;
}
procedure `okio.HashingSource` `hmacSha256`(`okio.Source` v2 @kind object @name `source`, `okio.ByteString` v3 @kind object @name `key`) @signature `Lokio/HashingSource;.hmacSha256:(Lokio/Source;Lokio/ByteString;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24a7a0.  v0:= new `okio.HashingSource`;
  #L24a7a4.  v1:= "HmacSHA256" @kind object;
  #L24a7a8.  call `<init>`(v0, v2, v3, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L24a7ae.  return v0 @kind object;
}
procedure `okio.HashingSource` `md5`(`okio.Source` v2 @kind object @name `source`) @signature `Lokio/HashingSource;.md5:(Lokio/Source;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24a7c0.  v0:= new `okio.HashingSource`;
  #L24a7c4.  v1:= "MD5" @kind object;
  #L24a7c8.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @kind direct;
  #L24a7ce.  return v0 @kind object;
}
procedure `okio.HashingSource` `sha1`(`okio.Source` v2 @kind object @name `source`) @signature `Lokio/HashingSource;.sha1:(Lokio/Source;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24a7e0.  v0:= new `okio.HashingSource`;
  #L24a7e4.  v1:= "SHA-1" @kind object;
  #L24a7e8.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @kind direct;
  #L24a7ee.  return v0 @kind object;
}
procedure `okio.HashingSource` `sha256`(`okio.Source` v2 @kind object @name `source`) @signature `Lokio/HashingSource;.sha256:(Lokio/Source;)Lokio/HashingSource;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L24a800.  v0:= new `okio.HashingSource`;
  #L24a804.  v1:= "SHA-256" @kind object;
  #L24a808.  call `<init>`(v0, v2, v1) @signature `Lokio/HashingSource;.<init>:(Lokio/Source;Ljava/lang/String;)V` @kind direct;
  #L24a80e.  return v0 @kind object;
}
procedure `okio.ByteString` `hash`(`okio.HashingSource` v2 @kind this) @signature `Lokio/HashingSource;.hash:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24a820.  v1:= v2.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L24a824.  if v1 == 0 then goto L24a83e;
  #L24a828.  v1:= v2.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L24a82c.  call temp:= `digest`(v1) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L24a832.  v0:= temp @kind object;
  #L24a834.  call temp:= `of`(v0) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #L24a83a.  v1:= temp @kind object;
  #L24a83c.  return v1 @kind object;
  #L24a83e.  v1:= v2.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` @kind object;
  #L24a842.  call temp:= `doFinal`(v1) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L24a848.  v0:= temp @kind object;
  #L24a84a.  goto L24a834;
}
procedure `long` `read`(`okio.HashingSource` v12 @kind this, `okio.Buffer` v13 @kind object @name `sink`, `long` v14 @name `byteCount`) @signature `Lokio/HashingSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L24a85c.  call temp:= `read`(v12, v13, v14) @signature `Lokio/ForwardingSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L24a862.  v4:= temp @kind wide;
  #L24a864.  v8:= -1L;
  #L24a868.  v8:= lcmp(v4, v8);
  #L24a86c.  if v8 == 0 then goto L24a8fc;
  #L24a870.  v8:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24a874.  v6:= v8 - v4 @kind long;
  #L24a878.  v0:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24a87c.  v3:= v13.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24a880.  v8:= lcmp(v0, v6);
  #L24a884.  if v8 <= 0 then goto L24a89c;
  #L24a888.  v3:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24a88c.  v8:= v3.`okio.Segment.limit` @type ^`int`;
  #L24a890.  v9:= v3.`okio.Segment.pos` @type ^`int`;
  #L24a894.  v8:= v8 - v9 @kind int;
  #L24a896.  v8:= (`long`) v8 @kind i2l;
  #L24a898.  v0:= v0 - v8 @kind long;
  #L24a89a.  goto L24a880;
  #L24a89c.  v8:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24a8a0.  v8:= lcmp(v0, v8);
  #L24a8a4.  if v8 >= 0 then goto L24a8fc;
  #L24a8a8.  v8:= v3.`okio.Segment.pos` @type ^`int`;
  #L24a8ac.  v8:= (`long`) v8 @kind i2l;
  #L24a8ae.  v8:= v8 + v6 @kind long;
  #L24a8b0.  v8:= v8 - v0 @kind long;
  #L24a8b2.  v2:= (`int`) v8 @kind l2i;
  #L24a8b4.  v8:= v12.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L24a8b8.  if v8 == 0 then goto L24a8e6;
  #L24a8bc.  v8:= v12.`okio.HashingSource.messageDigest` @type ^`java.security.MessageDigest` @kind object;
  #L24a8c0.  v9:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24a8c4.  v10:= v3.`okio.Segment.limit` @type ^`int`;
  #L24a8c8.  v10:= v10 - v2 @kind int;
  #L24a8ca.  call `update`(v8, v9, v2, v10) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L24a8d0.  v8:= v3.`okio.Segment.limit` @type ^`int`;
  #L24a8d4.  v9:= v3.`okio.Segment.pos` @type ^`int`;
  #L24a8d8.  v8:= v8 - v9 @kind int;
  #L24a8da.  v8:= (`long`) v8 @kind i2l;
  #L24a8dc.  v0:= v0 + v8 @kind long;
  #L24a8de.  v6:= v0 @kind wide;
  #L24a8e0.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24a8e4.  goto L24a89c;
  #L24a8e6.  v8:= v12.`okio.HashingSource.mac` @type ^`javax.crypto.Mac` @kind object;
  #L24a8ea.  v9:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24a8ee.  v10:= v3.`okio.Segment.limit` @type ^`int`;
  #L24a8f2.  v10:= v10 - v2 @kind int;
  #L24a8f4.  call `update`(v8, v9, v2, v10) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L24a8fa.  goto L24a8d0;
  #L24a8fc.  return v4 @kind wide;
}
