record `okio.GzipSource` @kind class @AccessFlag PUBLIC_FINAL extends `okio.Source` @kind interface {
  `java.util.zip.CRC32` `okio.GzipSource.crc` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `okio.GzipSource.inflater` @AccessFlag PRIVATE_FINAL;
  `okio.InflaterSource` `okio.GzipSource.inflaterSource` @AccessFlag PRIVATE_FINAL;
  `int` `okio.GzipSource.section` @AccessFlag PRIVATE;
  `okio.BufferedSource` `okio.GzipSource.source` @AccessFlag PRIVATE_FINAL;
}
global `byte` `@@okio.GzipSource.FCOMMENT` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FEXTRA` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FHCRC` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.FNAME` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_BODY` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_DONE` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_HEADER` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte` `@@okio.GzipSource.SECTION_TRAILER` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okio.GzipSource` v3 @kind this, `okio.Source` v4 @kind object @name `source`) @signature `Lokio/GzipSource;.<init>:(Lokio/Source;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L21f65c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21f662.  v0:= 0I;
  #L21f664.  v3.`okio.GzipSource.section` @type ^`int` := v0;
  #L21f668.  v0:= new `java.util.zip.CRC32`;
  #L21f66c.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L21f672.  v3.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L21f676.  if v4 != 0 then goto L21f68a;
  #L21f67a.  v0:= new `java.lang.IllegalArgumentException`;
  #L21f67e.  v1:= "source == null" @kind object;
  #L21f682.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21f688.  throw v0;
  #L21f68a.  v0:= new `java.util.zip.Inflater`;
  #L21f68e.  v1:= 1I;
  #L21f690.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L21f696.  v3.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L21f69a.  call temp:= `buffer`(v4) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L21f6a0.  v0:= temp @kind object;
  #L21f6a2.  v3.`okio.GzipSource.source` @type ^`okio.BufferedSource` := v0 @kind object;
  #L21f6a6.  v0:= new `okio.InflaterSource`;
  #L21f6aa.  v1:= v3.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f6ae.  v2:= v3.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L21f6b2.  call `<init>`(v0, v1, v2) @signature `Lokio/InflaterSource;.<init>:(Lokio/BufferedSource;Ljava/util/zip/Inflater;)V` @kind direct;
  #L21f6b8.  v3.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` := v0 @kind object;
  #L21f6bc.  return @kind void;
}
procedure `void` `checkEqual`(`okio.GzipSource` v5 @kind this, `java.lang.String` v6 @kind object @name `name`, `int` v7 @name `expected`, `int` v8 @name `actual`) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L21f6d0.  if v8 == v7 then goto L21f714;
  #L21f6d4.  v0:= new `java.io.IOException`;
  #L21f6d8.  v1:= "%s: actual 0x%08x != expected 0x%08x" @kind object;
  #L21f6dc.  v2:= 3I;
  #L21f6de.  v2:= new `java.lang.Object`[v2];
  #L21f6e2.  v3:= 0I;
  #L21f6e4.  v2[v3]:= v6 @kind object;
  #L21f6e8.  v3:= 1I;
  #L21f6ea.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L21f6f0.  v4:= temp @kind object;
  #L21f6f2.  v2[v3]:= v4 @kind object;
  #L21f6f6.  v3:= 2I;
  #L21f6f8.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L21f6fe.  v4:= temp @kind object;
  #L21f700.  v2[v3]:= v4 @kind object;
  #L21f704.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L21f70a.  v1:= temp @kind object;
  #L21f70c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21f712.  throw v0;
  #L21f714.  return @kind void;
}
procedure `void` `consumeHeader`(`okio.GzipSource` v12 @kind this) @signature `Lokio/GzipSource;.consumeHeader:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L21f728.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f72c.  v2:= 10L;
  #L21f730.  call `require`(v0, v2) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L21f736.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f73a.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21f740.  v0:= temp @kind object;
  #L21f742.  v2:= 3L;
  #L21f746.  call temp:= `getByte`(v0, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L21f74c.  v7:= temp;
  #L21f74e.  v0:= v7 ^> 1;
  #L21f752.  v0:= v0 ^& 1;
  #L21f756.  v1:= 1I;
  #L21f758.  if v0 != v1 then goto L21f860;
  #L21f75c.  v6:= 1I;
  #L21f75e.  if v6 == 0 then goto L21f77e;
  #L21f762.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f766.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21f76c.  v1:= temp @kind object;
  #L21f76e.  v2:= 0L;
  #L21f772.  v4:= 10L;
  #L21f776.  v0:= v12 @kind object;
  #L21f778.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21f77e.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f782.  call temp:= `readShort`(v0) @signature `Lokio/BufferedSource;.readShort:()S` @kind interface;
  #L21f788.  v8:= temp;
  #L21f78a.  v0:= "ID1ID2" @kind object;
  #L21f78e.  v1:= 8075I;
  #L21f792.  call `checkEqual`(v12, v0, v1, v8) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L21f798.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f79c.  v2:= 8L;
  #L21f7a0.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L21f7a6.  v0:= v7 ^> 2;
  #L21f7aa.  v0:= v0 ^& 1;
  #L21f7ae.  v1:= 1I;
  #L21f7b0.  if v0 != v1 then goto L21f82c;
  #L21f7b4.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f7b8.  v2:= 2L;
  #L21f7bc.  call `require`(v0, v2) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L21f7c2.  if v6 == 0 then goto L21f7e2;
  #L21f7c6.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f7ca.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21f7d0.  v1:= temp @kind object;
  #L21f7d2.  v2:= 0L;
  #L21f7d6.  v4:= 2L;
  #L21f7da.  v0:= v12 @kind object;
  #L21f7dc.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21f7e2.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f7e6.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21f7ec.  v0:= temp @kind object;
  #L21f7ee.  call temp:= `readShortLe`(v0) @signature `Lokio/Buffer;.readShortLe:()S` @kind virtual;
  #L21f7f4.  v9:= temp;
  #L21f7f6.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f7fa.  v2:= (`long`) v9 @kind i2l;
  #L21f7fc.  call `require`(v0, v2) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #L21f802.  if v6 == 0 then goto L21f820;
  #L21f806.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f80a.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21f810.  v1:= temp @kind object;
  #L21f812.  v2:= 0L;
  #L21f816.  v4:= (`long`) v9 @kind i2l;
  #L21f818.  v0:= v12 @kind object;
  #L21f81a.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21f820.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f824.  v2:= (`long`) v9 @kind i2l;
  #L21f826.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L21f82c.  v0:= v7 ^> 3;
  #L21f830.  v0:= v0 ^& 1;
  #L21f834.  v1:= 1I;
  #L21f836.  if v0 != v1 then goto L21f898;
  #L21f83a.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f83e.  v1:= 0I;
  #L21f840.  call temp:= `indexOf`(v0, v1) @signature `Lokio/BufferedSource;.indexOf:(B)J` @kind interface;
  #L21f846.  v10:= temp @kind wide;
  #L21f848.  v0:= -1L;
  #L21f84c.  v0:= lcmp(v10, v0);
  #L21f850.  if v0 != 0 then goto L21f866;
  #L21f854.  v0:= new `java.io.EOFException`;
  #L21f858.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L21f85e.  throw v0;
  #L21f860.  v6:= 0I;
  #L21f862.  goto L21f75e;
  #L21f866.  if v6 == 0 then goto L21f888;
  #L21f86a.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f86e.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21f874.  v1:= temp @kind object;
  #L21f876.  v2:= 0L;
  #L21f87a.  v4:= 1L;
  #L21f87e.  v4:= v4 + v10 @kind long;
  #L21f880.  v0:= v12 @kind object;
  #L21f882.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21f888.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f88c.  v2:= 1L;
  #L21f890.  v2:= v2 + v10 @kind long;
  #L21f892.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L21f898.  v0:= v7 ^> 4;
  #L21f89c.  v0:= v0 ^& 1;
  #L21f8a0.  v1:= 1I;
  #L21f8a2.  if v0 != v1 then goto L21f8fe;
  #L21f8a6.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f8aa.  v1:= 0I;
  #L21f8ac.  call temp:= `indexOf`(v0, v1) @signature `Lokio/BufferedSource;.indexOf:(B)J` @kind interface;
  #L21f8b2.  v10:= temp @kind wide;
  #L21f8b4.  v0:= -1L;
  #L21f8b8.  v0:= lcmp(v10, v0);
  #L21f8bc.  if v0 != 0 then goto L21f8cc;
  #L21f8c0.  v0:= new `java.io.EOFException`;
  #L21f8c4.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L21f8ca.  throw v0;
  #L21f8cc.  if v6 == 0 then goto L21f8ee;
  #L21f8d0.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f8d4.  call temp:= `buffer`(v0) @signature `Lokio/BufferedSource;.buffer:()Lokio/Buffer;` @kind interface;
  #L21f8da.  v1:= temp @kind object;
  #L21f8dc.  v2:= 0L;
  #L21f8e0.  v4:= 1L;
  #L21f8e4.  v4:= v4 + v10 @kind long;
  #L21f8e6.  v0:= v12 @kind object;
  #L21f8e8.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21f8ee.  v0:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f8f2.  v2:= 1L;
  #L21f8f6.  v2:= v2 + v10 @kind long;
  #L21f8f8.  call `skip`(v0, v2) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L21f8fe.  if v6 == 0 then goto L21f932;
  #L21f902.  v0:= "FHCRC" @kind object;
  #L21f906.  v1:= v12.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f90a.  call temp:= `readShortLe`(v1) @signature `Lokio/BufferedSource;.readShortLe:()S` @kind interface;
  #L21f910.  v1:= temp;
  #L21f912.  v2:= v12.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L21f916.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L21f91c.  v2:= temp @kind wide;
  #L21f91e.  v2:= (`int`) v2 @kind l2i;
  #L21f920.  v2:= (`short`) v2 @kind i2s;
  #L21f922.  call `checkEqual`(v12, v0, v1, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L21f928.  v0:= v12.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L21f92c.  call `reset`(v0) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L21f932.  return @kind void;
}
procedure `void` `consumeTrailer`(`okio.GzipSource` v4 @kind this) @signature `Lokio/GzipSource;.consumeTrailer:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L21f944.  v0:= "CRC" @kind object;
  #L21f948.  v1:= v4.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f94c.  call temp:= `readIntLe`(v1) @signature `Lokio/BufferedSource;.readIntLe:()I` @kind interface;
  #L21f952.  v1:= temp;
  #L21f954.  v2:= v4.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L21f958.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L21f95e.  v2:= temp @kind wide;
  #L21f960.  v2:= (`int`) v2 @kind l2i;
  #L21f962.  call `checkEqual`(v4, v0, v1, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L21f968.  v0:= "ISIZE" @kind object;
  #L21f96c.  v1:= v4.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21f970.  call temp:= `readIntLe`(v1) @signature `Lokio/BufferedSource;.readIntLe:()I` @kind interface;
  #L21f976.  v1:= temp;
  #L21f978.  v2:= v4.`okio.GzipSource.inflater` @type ^`java.util.zip.Inflater` @kind object;
  #L21f97c.  call temp:= `getBytesWritten`(v2) @signature `Ljava/util/zip/Inflater;.getBytesWritten:()J` @kind virtual;
  #L21f982.  v2:= temp @kind wide;
  #L21f984.  v2:= (`int`) v2 @kind l2i;
  #L21f986.  call `checkEqual`(v4, v0, v1, v2) @signature `Lokio/GzipSource;.checkEqual:(Ljava/lang/String;II)V` @kind direct;
  #L21f98c.  return @kind void;
}
procedure `void` `updateCrc`(`okio.GzipSource` v6 @kind this, `okio.Buffer` v7 @kind object @name `buffer`, `long` v8 @name `offset`, `long` v10 @name `byteCount`) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L21f9a0.  v1:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L21f9a4.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L21f9a8.  v4:= v1.`okio.Segment.pos` @type ^`int`;
  #L21f9ac.  v3:= v3 - v4 @kind int;
  #L21f9ae.  v4:= (`long`) v3 @kind i2l;
  #L21f9b0.  v3:= lcmp(v8, v4);
  #L21f9b4.  if v3 < 0 then goto L21f9cc;
  #L21f9b8.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L21f9bc.  v4:= v1.`okio.Segment.pos` @type ^`int`;
  #L21f9c0.  v3:= v3 - v4 @kind int;
  #L21f9c2.  v4:= (`long`) v3 @kind i2l;
  #L21f9c4.  v8:= v8 - v4 @kind long;
  #L21f9c6.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L21f9ca.  goto L21f9a4;
  #L21f9cc.  v4:= 0L;
  #L21f9d0.  v3:= lcmp(v10, v4);
  #L21f9d4.  if v3 <= 0 then goto L21fa10;
  #L21f9d8.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L21f9dc.  v4:= (`long`) v3 @kind i2l;
  #L21f9de.  v4:= v4 + v8 @kind long;
  #L21f9e0.  v0:= (`int`) v4 @kind l2i;
  #L21f9e2.  v3:= v1.`okio.Segment.limit` @type ^`int`;
  #L21f9e6.  v3:= v3 - v0 @kind int;
  #L21f9e8.  v4:= (`long`) v3 @kind i2l;
  #L21f9ea.  call temp:= `min`(v4, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L21f9f0.  v4:= temp @kind wide;
  #L21f9f2.  v2:= (`int`) v4 @kind l2i;
  #L21f9f4.  v3:= v6.`okio.GzipSource.crc` @type ^`java.util.zip.CRC32` @kind object;
  #L21f9f8.  v4:= v1.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L21f9fc.  call `update`(v3, v4, v0, v2) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L21fa02.  v4:= (`long`) v2 @kind i2l;
  #L21fa04.  v10:= v10 - v4 @kind long;
  #L21fa06.  v8:= 0L;
  #L21fa0a.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L21fa0e.  goto L21f9cc;
  #L21fa10.  return @kind void;
}
procedure `void` `close`(`okio.GzipSource` v1 @kind this) @signature `Lokio/GzipSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21fa24.  v0:= v1.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` @kind object;
  #L21fa28.  call `close`(v0) @signature `Lokio/InflaterSource;.close:()V` @kind virtual;
  #L21fa2e.  return @kind void;
}
procedure `long` `read`(`okio.GzipSource` v10 @kind this, `okio.Buffer` v11 @kind object @name `sink`, `long` v12 @name `byteCount`) @signature `Lokio/GzipSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L21fa40.  v0:= -1L;
  #L21fa44.  v8:= 2I;
  #L21fa46.  v7:= 1I;
  #L21fa48.  v4:= 0L;
  #L21fa4c.  v6:= lcmp(v12, v4);
  #L21fa50.  if v6 >= 0 then goto L21fa86;
  #L21fa54.  v0:= new `java.lang.IllegalArgumentException`;
  #L21fa58.  v1:= new `java.lang.StringBuilder`;
  #L21fa5c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21fa62.  v6:= "byteCount < 0: " @kind object;
  #L21fa66.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21fa6c.  v1:= temp @kind object;
  #L21fa6e.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L21fa74.  v1:= temp @kind object;
  #L21fa76.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21fa7c.  v1:= temp @kind object;
  #L21fa7e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21fa84.  throw v0;
  #L21fa86.  v6:= lcmp(v12, v4);
  #L21fa8a.  if v6 != 0 then goto L21fa90;
  #L21fa8e.  return v4 @kind wide;
  #L21fa90.  v6:= v10.`okio.GzipSource.section` @type ^`int`;
  #L21fa94.  if v6 != 0 then goto L21faa2;
  #L21fa98.  call `consumeHeader`(v10) @signature `Lokio/GzipSource;.consumeHeader:()V` @kind direct;
  #L21fa9e.  v10.`okio.GzipSource.section` @type ^`int` := v7;
  #L21faa2.  v6:= v10.`okio.GzipSource.section` @type ^`int`;
  #L21faa6.  if v6 != v7 then goto L21fad2;
  #L21faaa.  v2:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L21faae.  v6:= v10.`okio.GzipSource.inflaterSource` @type ^`okio.InflaterSource` @kind object;
  #L21fab2.  call temp:= `read`(v6, v11, v12) @signature `Lokio/InflaterSource;.read:(Lokio/Buffer;J)J` @kind virtual;
  #L21fab8.  v4:= temp @kind wide;
  #L21faba.  v6:= lcmp(v4, v0);
  #L21fabe.  if v6 == 0 then goto L21face;
  #L21fac2.  v0:= v10 @kind object;
  #L21fac4.  v1:= v11 @kind object;
  #L21fac6.  call `updateCrc`(v0, v1, v2, v4) @signature `Lokio/GzipSource;.updateCrc:(Lokio/Buffer;JJ)V` @kind direct;
  #L21facc.  goto L21fa8e;
  #L21face.  v10.`okio.GzipSource.section` @type ^`int` := v8;
  #L21fad2.  v6:= v10.`okio.GzipSource.section` @type ^`int`;
  #L21fad6.  if v6 != v8 then goto L21fb06;
  #L21fada.  call `consumeTrailer`(v10) @signature `Lokio/GzipSource;.consumeTrailer:()V` @kind direct;
  #L21fae0.  v6:= 3I;
  #L21fae2.  v10.`okio.GzipSource.section` @type ^`int` := v6;
  #L21fae6.  v6:= v10.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21faea.  call temp:= `exhausted`(v6) @signature `Lokio/BufferedSource;.exhausted:()Z` @kind interface;
  #L21faf0.  v6:= temp;
  #L21faf2.  if v6 != 0 then goto L21fb06;
  #L21faf6.  v0:= new `java.io.IOException`;
  #L21fafa.  v1:= "gzip finished without exhausting source" @kind object;
  #L21fafe.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21fb04.  throw v0;
  #L21fb06.  v4:= v0 @kind wide;
  #L21fb08.  goto L21fa8e;
}
procedure `okio.Timeout` `timeout`(`okio.GzipSource` v1 @kind this) @signature `Lokio/GzipSource;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21fb1c.  v0:= v1.`okio.GzipSource.source` @type ^`okio.BufferedSource` @kind object;
  #L21fb20.  call temp:= `timeout`(v0) @signature `Lokio/BufferedSource;.timeout:()Lokio/Timeout;` @kind interface;
  #L21fb26.  v0:= temp @kind object;
  #L21fb28.  return v0 @kind object;
}
