record `okio.Buffer$2` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `okio.Buffer` `okio.Buffer$2.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okio.Buffer$2` v0 @kind this, `okio.Buffer` v1 @kind object @name `this$0`) @signature `Lokio/Buffer$2;.<init>:(Lokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1ad250.  v0.`okio.Buffer$2.this$0` @type ^`okio.Buffer` := v1 @kind object;
  #L1ad254.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L1ad25a.  return @kind void;
}
procedure `int` `available`(`okio.Buffer$2` v4 @kind this) @signature `Lokio/Buffer$2;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ad26c.  v0:= v4.`okio.Buffer$2.this$0` @type ^`okio.Buffer` @kind object;
  #L1ad270.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad274.  v2:= 2147483647L;
  #L1ad27a.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1ad280.  v0:= temp @kind wide;
  #L1ad282.  v0:= (`int`) v0 @kind l2i;
  #L1ad284.  return v0;
}
procedure `void` `close`(`okio.Buffer$2` v0 @kind this) @signature `Lokio/Buffer$2;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L1ad298.  return @kind void;
}
procedure `int` `read`(`okio.Buffer$2` v4 @kind this) @signature `Lokio/Buffer$2;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ad2ac.  v0:= v4.`okio.Buffer$2.this$0` @type ^`okio.Buffer` @kind object;
  #L1ad2b0.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad2b4.  v2:= 0L;
  #L1ad2b8.  v0:= lcmp(v0, v2);
  #L1ad2bc.  if v0 <= 0 then goto L1ad2d2;
  #L1ad2c0.  v0:= v4.`okio.Buffer$2.this$0` @type ^`okio.Buffer` @kind object;
  #L1ad2c4.  call temp:= `readByte`(v0) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L1ad2ca.  v0:= temp;
  #L1ad2cc.  v0:= v0 ^& 255;
  #L1ad2d0.  return v0;
  #L1ad2d2.  v0:= -1I;
  #L1ad2d4.  goto L1ad2d0;
}
procedure `int` `read`(`okio.Buffer$2` v1 @kind this, `byte`[] v2 @kind object @name `sink`, `int` v3 @name `offset`, `int` v4 @name `byteCount`) @signature `Lokio/Buffer$2;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1ad2e8.  v0:= v1.`okio.Buffer$2.this$0` @type ^`okio.Buffer` @kind object;
  #L1ad2ec.  call temp:= `read`(v0, v2, v3, v4) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L1ad2f2.  v0:= temp;
  #L1ad2f4.  return v0;
}
procedure `java.lang.String` `toString`(`okio.Buffer$2` v2 @kind this) @signature `Lokio/Buffer$2;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1ad308.  v0:= new `java.lang.StringBuilder`;
  #L1ad30c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ad312.  v1:= v2.`okio.Buffer$2.this$0` @type ^`okio.Buffer` @kind object;
  #L1ad316.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad31c.  v0:= temp @kind object;
  #L1ad31e.  v1:= ".inputStream()" @kind object;
  #L1ad322.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad328.  v0:= temp @kind object;
  #L1ad32a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ad330.  v0:= temp @kind object;
  #L1ad332.  return v0 @kind object;
}
