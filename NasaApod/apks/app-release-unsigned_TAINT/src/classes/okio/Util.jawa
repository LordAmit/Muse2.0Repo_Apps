record `okio.Util` @kind class @AccessFlag FINAL {
}
global `java.nio.charset.Charset` `@@okio.Util.UTF_8` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Util;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1afb00.  v0:= "UTF-8" @kind object;
  #L1afb04.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L1afb0a.  v0:= temp @kind object;
  #L1afb0c.  `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L1afb10.  return @kind void;
}
procedure `void` `<init>`(`okio.Util` v0 @kind this) @signature `Lokio/Util;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1afb24.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1afb2a.  return @kind void;
}
procedure `boolean` `arrayRangeEquals`(`byte`[] v3 @kind object @name `a`, `int` v4 @name `aOffset`, `byte`[] v5 @kind object @name `b`, `int` v6 @name `bOffset`, `int` v7 @name `byteCount`) @signature `Lokio/Util;.arrayRangeEquals:([BI[BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1afb3c.  v0:= 0I;
  #L1afb3e.  if v0 >= v7 then goto L1afb60;
  #L1afb42.  v1:= v0 + v4 @kind int;
  #L1afb46.  v1:= v3[v1] @kind byte;
  #L1afb4a.  v2:= v0 + v6 @kind int;
  #L1afb4e.  v2:= v5[v2] @kind byte;
  #L1afb52.  if v1 == v2 then goto L1afb5a;
  #L1afb56.  v1:= 0I;
  #L1afb58.  return v1;
  #L1afb5a.  v0:= v0 + 1;
  #L1afb5e.  goto L1afb3e;
  #L1afb60.  v1:= 1I;
  #L1afb62.  goto L1afb58;
}
procedure `void` `checkOffsetAndCount`(`long` v6 @name `size`, `long` v8 @name `offset`, `long` v10 @name `byteCount`) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1afb74.  v0:= v8 ^| v10 @kind long;
  #L1afb78.  v2:= 0L;
  #L1afb7c.  v0:= lcmp(v0, v2);
  #L1afb80.  if v0 < 0 then goto L1afb98;
  #L1afb84.  v0:= lcmp(v8, v6);
  #L1afb88.  if v0 > 0 then goto L1afb98;
  #L1afb8c.  v0:= v6 - v8 @kind long;
  #L1afb90.  v0:= lcmp(v0, v10);
  #L1afb94.  if v0 >= 0 then goto L1afbe0;
  #L1afb98.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L1afb9c.  v1:= "size=%s offset=%s byteCount=%s" @kind object;
  #L1afba0.  v2:= 3I;
  #L1afba2.  v2:= new `java.lang.Object`[v2];
  #L1afba6.  v3:= 0I;
  #L1afba8.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1afbae.  v4:= temp @kind object;
  #L1afbb0.  v2[v3]:= v4 @kind object;
  #L1afbb4.  v3:= 1I;
  #L1afbb6.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1afbbc.  v4:= temp @kind object;
  #L1afbbe.  v2[v3]:= v4 @kind object;
  #L1afbc2.  v3:= 2I;
  #L1afbc4.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1afbca.  v4:= temp @kind object;
  #L1afbcc.  v2[v3]:= v4 @kind object;
  #L1afbd0.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1afbd6.  v1:= temp @kind object;
  #L1afbd8.  call `<init>`(v0, v1) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1afbde.  throw v0;
  #L1afbe0.  return @kind void;
}
procedure `int` `reverseBytesInt`(`int` v2 @name `i`) @signature `Lokio/Util;.reverseBytesInt:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1afbf4.  v0:= -16777216I;
  #L1afbf8.  v0:= v0 ^& v2 @kind int;
  #L1afbfa.  v0:= v0 ^>> 24;
  #L1afbfe.  v1:= 16711680I;
  #L1afc02.  v1:= v1 ^& v2 @kind int;
  #L1afc04.  v1:= v1 ^>> 8;
  #L1afc08.  v0:= v0 ^| v1 @kind int;
  #L1afc0a.  v1:= 65280I;
  #L1afc10.  v1:= v1 ^& v2 @kind int;
  #L1afc12.  v1:= v1 ^< 8;
  #L1afc16.  v0:= v0 ^| v1 @kind int;
  #L1afc18.  v1:= v2 ^& 255;
  #L1afc1c.  v1:= v1 ^< 24;
  #L1afc20.  v0:= v0 ^| v1 @kind int;
  #L1afc22.  return v0;
}
procedure `long` `reverseBytesLong`(`long` v8 @name `v`) @signature `Lokio/Util;.reverseBytesLong:(J)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1afc34.  v7:= 56I;
  #L1afc38.  v6:= 40I;
  #L1afc3c.  v5:= 24I;
  #L1afc40.  v4:= 8I;
  #L1afc44.  v0:= -72057594037927936L;
  #L1afc48.  v0:= v0 ^& v8 @kind long;
  #L1afc4a.  v0:= v0 ^>> v7 @kind long;
  #L1afc4c.  v2:= 71776119061217280L;
  #L1afc50.  v2:= v2 ^& v8 @kind long;
  #L1afc52.  v2:= v2 ^>> v6 @kind long;
  #L1afc54.  v0:= v0 ^| v2 @kind long;
  #L1afc56.  v2:= 280375465082880L;
  #L1afc60.  v2:= v2 ^& v8 @kind long;
  #L1afc62.  v2:= v2 ^>> v5 @kind long;
  #L1afc64.  v0:= v0 ^| v2 @kind long;
  #L1afc66.  v2:= 1095216660480L;
  #L1afc70.  v2:= v2 ^& v8 @kind long;
  #L1afc72.  v2:= v2 ^>> v4 @kind long;
  #L1afc74.  v0:= v0 ^| v2 @kind long;
  #L1afc76.  v2:= 4278190080L;
  #L1afc80.  v2:= v2 ^& v8 @kind long;
  #L1afc82.  v2:= v2 ^< v4 @kind long;
  #L1afc84.  v0:= v0 ^| v2 @kind long;
  #L1afc86.  v2:= 16711680L;
  #L1afc8c.  v2:= v2 ^& v8 @kind long;
  #L1afc8e.  v2:= v2 ^< v5 @kind long;
  #L1afc90.  v0:= v0 ^| v2 @kind long;
  #L1afc92.  v2:= 65280L;
  #L1afc98.  v2:= v2 ^& v8 @kind long;
  #L1afc9a.  v2:= v2 ^< v6 @kind long;
  #L1afc9c.  v0:= v0 ^| v2 @kind long;
  #L1afc9e.  v2:= 255L;
  #L1afca2.  v2:= v2 ^& v8 @kind long;
  #L1afca4.  v2:= v2 ^< v7 @kind long;
  #L1afca6.  v0:= v0 ^| v2 @kind long;
  #L1afca8.  return v0 @kind wide;
}
procedure `short` `reverseBytesShort`(`short` v4 @name `s`) @signature `Lokio/Util;.reverseBytesShort:(S)S` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1afcbc.  v2:= 65535I;
  #L1afcc2.  v0:= v4 ^& v2 @kind int;
  #L1afcc6.  v2:= 65280I;
  #L1afccc.  v2:= v2 ^& v0 @kind int;
  #L1afcce.  v2:= v2 ^>> 8;
  #L1afcd2.  v3:= v0 ^& 255;
  #L1afcd6.  v3:= v3 ^< 8;
  #L1afcda.  v1:= v2 ^| v3 @kind int;
  #L1afcde.  v2:= (`short`) v1 @kind i2s;
  #L1afce0.  return v2;
}
procedure `void` `sneakyRethrow`(`java.lang.Throwable` v0 @kind object @name `t`) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L1afcf4.  call `sneakyThrow2`(v0) @signature `Lokio/Util;.sneakyThrow2:(Ljava/lang/Throwable;)V` @kind static;
  #L1afcfa.  return @kind void;
}
procedure `void` `sneakyThrow2`(`java.lang.Throwable` v0 @kind object @name `t`) @signature `Lokio/Util;.sneakyThrow2:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L1afd0c.  throw v0;
}
