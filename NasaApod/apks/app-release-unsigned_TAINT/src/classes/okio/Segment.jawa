record `okio.Segment` @kind class @AccessFlag FINAL {
  `byte`[] `okio.Segment.data` @AccessFlag FINAL;
  `int` `okio.Segment.limit` @AccessFlag ;
  `okio.Segment` `okio.Segment.next` @AccessFlag ;
  `boolean` `okio.Segment.owner` @AccessFlag ;
  `int` `okio.Segment.pos` @AccessFlag ;
  `okio.Segment` `okio.Segment.prev` @AccessFlag ;
  `boolean` `okio.Segment.shared` @AccessFlag ;
}
global `int` `@@okio.Segment.SHARE_MINIMUM` @AccessFlag STATIC_FINAL;
global `int` `@@okio.Segment.SIZE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okio.Segment` v1 @kind this) @signature `Lokio/Segment;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1af1d4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1af1da.  v0:= 8192I;
  #L1af1de.  v0:= new `byte`[v0];
  #L1af1e2.  v1.`okio.Segment.data` @type ^`byte`[] := v0 @kind object;
  #L1af1e6.  v0:= 1I;
  #L1af1e8.  v1.`okio.Segment.owner` @type ^`boolean` := v0 @kind boolean;
  #L1af1ec.  v0:= 0I;
  #L1af1ee.  v1.`okio.Segment.shared` @type ^`boolean` := v0 @kind boolean;
  #L1af1f2.  return @kind void;
}
procedure `void` `<init>`(`okio.Segment` v0 @kind this, `byte`[] v1 @kind object @name `data`, `int` v2 @name `pos`, `int` v3 @name `limit`, `boolean` v4 @name `shared`, `boolean` v5 @name `owner`) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1af204.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1af20a.  v0.`okio.Segment.data` @type ^`byte`[] := v1 @kind object;
  #L1af20e.  v0.`okio.Segment.pos` @type ^`int` := v2;
  #L1af212.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L1af216.  v0.`okio.Segment.shared` @type ^`boolean` := v4 @kind boolean;
  #L1af21a.  v0.`okio.Segment.owner` @type ^`boolean` := v5 @kind boolean;
  #L1af21e.  return @kind void;
}
procedure `void` `compact`(`okio.Segment` v4 @kind this) @signature `Lokio/Segment;.compact:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1af230.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1af234.  if v2 != v4 then goto L1af244;
  #L1af238.  v2:= new `java.lang.IllegalStateException`;
  #L1af23c.  call `<init>`(v2) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1af242.  throw v2;
  #L1af244.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1af248.  v2:= v2.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L1af24c.  if v2 != 0 then goto L1af252;
  #L1af250.  return @kind void;
  #L1af252.  v2:= v4.`okio.Segment.limit` @type ^`int`;
  #L1af256.  v3:= v4.`okio.Segment.pos` @type ^`int`;
  #L1af25a.  v1:= v2 - v3 @kind int;
  #L1af25e.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1af262.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L1af266.  v3:= v2 - 8192;
  #L1af26a.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1af26e.  v2:= v2.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L1af272.  if v2 == 0 then goto L1af298;
  #L1af276.  v2:= 0I;
  #L1af278.  v0:= v3 + v2 @kind int;
  #L1af27c.  if v1 > v0 then goto L1af250;
  #L1af280.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1af284.  call `writeTo`(v4, v2, v1) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L1af28a.  call temp:= `pop`(v4) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1af290.  call `recycle`(v4) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1af296.  goto L1af250;
  #L1af298.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1af29c.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L1af2a0.  goto L1af278;
}
procedure `okio.Segment` `pop`(`okio.Segment` v4 @kind this) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1af2b4.  v1:= 0I;
  #L1af2b6.  v2:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1af2ba.  if v2 == v4 then goto L1af2e4;
  #L1af2be.  v0:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1af2c2.  v2:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1af2c6.  v3:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1af2ca.  v2.`okio.Segment.next` @type ^`okio.Segment` := v3 @kind object;
  #L1af2ce.  v2:= v4.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1af2d2.  v3:= v4.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1af2d6.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v3 @kind object;
  #L1af2da.  v4.`okio.Segment.next` @type ^`okio.Segment` := v1 @kind object;
  #L1af2de.  v4.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L1af2e2.  return v0 @kind object;
  #L1af2e4.  v0:= v1 @kind object;
  #L1af2e6.  goto L1af2c2;
}
procedure `okio.Segment` `push`(`okio.Segment` v1 @kind this, `okio.Segment` v2 @kind object @name `segment`) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1af2f8.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v1 @kind object;
  #L1af2fc.  v0:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1af300.  v2.`okio.Segment.next` @type ^`okio.Segment` := v0 @kind object;
  #L1af304.  v0:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1af308.  v0.`okio.Segment.prev` @type ^`okio.Segment` := v2 @kind object;
  #L1af30c.  v1.`okio.Segment.next` @type ^`okio.Segment` := v2 @kind object;
  #L1af310.  return v2 @kind object;
}
procedure `okio.Segment` `sharedCopy`(`okio.Segment` v6 @kind this) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1af324.  v4:= 1I;
  #L1af326.  v6.`okio.Segment.shared` @type ^`boolean` := v4 @kind boolean;
  #L1af32a.  v0:= new `okio.Segment`;
  #L1af32e.  v1:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1af332.  v2:= v6.`okio.Segment.pos` @type ^`int`;
  #L1af336.  v3:= v6.`okio.Segment.limit` @type ^`int`;
  #L1af33a.  v5:= 0I;
  #L1af33c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @kind direct;
  #L1af342.  return v0 @kind object;
}
procedure `okio.Segment` `split`(`okio.Segment` v5 @kind this, `int` v6 @name `byteCount`) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1af354.  if v6 <= 0 then goto L1af366;
  #L1af358.  v1:= v5.`okio.Segment.limit` @type ^`int`;
  #L1af35c.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L1af360.  v1:= v1 - v2 @kind int;
  #L1af362.  if v6 <= v1 then goto L1af372;
  #L1af366.  v1:= new `java.lang.IllegalArgumentException`;
  #L1af36a.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1af370.  throw v1;
  #L1af372.  v1:= 1024I;
  #L1af376.  if v6 < v1 then goto L1af3a2;
  #L1af37a.  call temp:= `sharedCopy`(v5) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L1af380.  v0:= temp @kind object;
  #L1af382.  v1:= v0.`okio.Segment.pos` @type ^`int`;
  #L1af386.  v1:= v1 + v6 @kind int;
  #L1af388.  v0.`okio.Segment.limit` @type ^`int` := v1;
  #L1af38c.  v1:= v5.`okio.Segment.pos` @type ^`int`;
  #L1af390.  v1:= v1 + v6 @kind int;
  #L1af392.  v5.`okio.Segment.pos` @type ^`int` := v1;
  #L1af396.  v1:= v5.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1af39a.  call temp:= `push`(v1, v0) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1af3a0.  return v0 @kind object;
  #L1af3a2.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L1af3a8.  v0:= temp @kind object;
  #L1af3aa.  v1:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1af3ae.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L1af3b2.  v3:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1af3b6.  v4:= 0I;
  #L1af3b8.  call `arraycopy`(v1, v2, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1af3be.  goto L1af382;
}
procedure `okio.Segment` `unsharedCopy`(`okio.Segment` v6 @kind this) @signature `Lokio/Segment;.unsharedCopy:()Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1af3d0.  v0:= new `okio.Segment`;
  #L1af3d4.  v1:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1af3d8.  call temp:= `clone`(v1) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L1af3de.  v1:= temp @kind object;
  #L1af3e0.  v1:= (`byte`[]) v1 @kind object;
  #L1af3e4.  v2:= v6.`okio.Segment.pos` @type ^`int`;
  #L1af3e8.  v3:= v6.`okio.Segment.limit` @type ^`int`;
  #L1af3ec.  v4:= 0I;
  #L1af3ee.  v5:= 1I;
  #L1af3f0.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Segment;.<init>:([BIIZZ)V` @kind direct;
  #L1af3f6.  return v0 @kind object;
}
procedure `void` `writeTo`(`okio.Segment` v6 @kind this, `okio.Segment` v7 @kind object @name `sink`, `int` v8 @name `byteCount`) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1af408.  v2:= 8192I;
  #L1af40c.  v5:= 0I;
  #L1af40e.  v0:= v7.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L1af412.  if v0 != 0 then goto L1af422;
  #L1af416.  v0:= new `java.lang.IllegalArgumentException`;
  #L1af41a.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1af420.  throw v0;
  #L1af422.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L1af426.  v0:= v0 + v8 @kind int;
  #L1af428.  if v0 <= v2 then goto L1af48a;
  #L1af42c.  v0:= v7.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L1af430.  if v0 == 0 then goto L1af440;
  #L1af434.  v0:= new `java.lang.IllegalArgumentException`;
  #L1af438.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1af43e.  throw v0;
  #L1af440.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L1af444.  v0:= v0 + v8 @kind int;
  #L1af446.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L1af44a.  v0:= v0 - v1 @kind int;
  #L1af44c.  if v0 <= v2 then goto L1af45c;
  #L1af450.  v0:= new `java.lang.IllegalArgumentException`;
  #L1af454.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1af45a.  throw v0;
  #L1af45c.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1af460.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L1af464.  v2:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1af468.  v3:= v7.`okio.Segment.limit` @type ^`int`;
  #L1af46c.  v4:= v7.`okio.Segment.pos` @type ^`int`;
  #L1af470.  v3:= v3 - v4 @kind int;
  #L1af472.  call `arraycopy`(v0, v1, v2, v5, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1af478.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L1af47c.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L1af480.  v0:= v0 - v1 @kind int;
  #L1af482.  v7.`okio.Segment.limit` @type ^`int` := v0;
  #L1af486.  v7.`okio.Segment.pos` @type ^`int` := v5;
  #L1af48a.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1af48e.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L1af492.  v2:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1af496.  v3:= v7.`okio.Segment.limit` @type ^`int`;
  #L1af49a.  call `arraycopy`(v0, v1, v2, v3, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1af4a0.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L1af4a4.  v0:= v0 + v8 @kind int;
  #L1af4a6.  v7.`okio.Segment.limit` @type ^`int` := v0;
  #L1af4aa.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L1af4ae.  v0:= v0 + v8 @kind int;
  #L1af4b0.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L1af4b4.  return @kind void;
}
