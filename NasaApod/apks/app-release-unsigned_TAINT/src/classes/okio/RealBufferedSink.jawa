record `okio.RealBufferedSink` @kind class @AccessFlag FINAL extends `okio.BufferedSink` @kind interface {
  `okio.Buffer` `okio.RealBufferedSink.buffer` @AccessFlag PUBLIC_FINAL;
  `boolean` `okio.RealBufferedSink.closed` @AccessFlag ;
  `okio.Sink` `okio.RealBufferedSink.sink` @AccessFlag PUBLIC_FINAL;
}
procedure `void` `<init>`(`okio.RealBufferedSink` v2 @kind this, `okio.Sink` v3 @kind object @name `sink`) @signature `Lokio/RealBufferedSink;.<init>:(Lokio/Sink;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L24aa0c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L24aa12.  v0:= new `okio.Buffer`;
  #L24aa16.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L24aa1c.  v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` := v0 @kind object;
  #L24aa20.  if v3 != 0 then goto L24aa34;
  #L24aa24.  v0:= new `java.lang.NullPointerException`;
  #L24aa28.  v1:= "sink == null" @kind object;
  #L24aa2c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24aa32.  throw v0;
  #L24aa34.  v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` := v3 @kind object;
  #L24aa38.  return @kind void;
}
procedure `okio.Buffer` `buffer`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24aa4c.  v0:= v1.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24aa50.  return v0 @kind object;
}
procedure `void` `close`(`okio.RealBufferedSink` v6 @kind this) @signature `Lokio/RealBufferedSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24aa64.  v2:= v6.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24aa68.  if v2 == 0 then goto L24aa6e;
  #L24aa6c.  return @kind void;
  #L24aa6e.  v1:= 0I;
  #Try_start0.  
  #L24aa70.  v2:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24aa74.  v2:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24aa78.  v4:= 0L;
  #L24aa7c.  v2:= lcmp(v2, v4);
  #L24aa80.  if v2 <= 0 then goto L24aa9a;
  #L24aa84.  v2:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24aa88.  v3:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24aa8c.  v4:= v6.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24aa90.  v4:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24aa94.  call `write`(v2, v3, v4) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #Try_end0.  
  #Try_start1.  
  #L24aa9a.  v2:= v6.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24aa9e.  call `close`(v2) @signature `Lokio/Sink;.close:()V` @kind interface;
  #Try_end1.  
  #L24aaa4.  v2:= 1I;
  #L24aaa6.  v6.`okio.RealBufferedSink.closed` @type ^`boolean` := v2 @kind boolean;
  #L24aaaa.  if v1 == 0 then goto L24aa6c;
  #L24aaae.  call `sneakyRethrow`(v1) @signature `Lokio/Util;.sneakyRethrow:(Ljava/lang/Throwable;)V` @kind static;
  #L24aab4.  goto L24aa6c;
  #L24aab6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24aab8.  v1:= v0 @kind object;
  #L24aaba.  goto L24aa9a;
  #L24aabc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L24aabe.  if v1 != 0 then goto L24aaa4;
  #L24aac2.  v1:= v0 @kind object;
  #L24aac4.  goto L24aaa4;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L24aab6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L24aabc;
}
procedure `okio.BufferedSink` `emit`(`okio.RealBufferedSink` v4 @kind this) @signature `Lokio/RealBufferedSink;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24aaf4.  v2:= v4.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24aaf8.  if v2 == 0 then goto L24ab0c;
  #L24aafc.  v2:= new `java.lang.IllegalStateException`;
  #L24ab00.  v3:= "closed" @kind object;
  #L24ab04.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24ab0a.  throw v2;
  #L24ab0c.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ab10.  call temp:= `size`(v2) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L24ab16.  v0:= temp @kind wide;
  #L24ab18.  v2:= 0L;
  #L24ab1c.  v2:= lcmp(v0, v2);
  #L24ab20.  if v2 <= 0 then goto L24ab32;
  #L24ab24.  v2:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24ab28.  v3:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ab2c.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L24ab32.  return v4 @kind object;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.RealBufferedSink` v4 @kind this) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24ab44.  v2:= v4.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24ab48.  if v2 == 0 then goto L24ab5c;
  #L24ab4c.  v2:= new `java.lang.IllegalStateException`;
  #L24ab50.  v3:= "closed" @kind object;
  #L24ab54.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24ab5a.  throw v2;
  #L24ab5c.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ab60.  call temp:= `completeSegmentByteCount`(v2) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @kind virtual;
  #L24ab66.  v0:= temp @kind wide;
  #L24ab68.  v2:= 0L;
  #L24ab6c.  v2:= lcmp(v0, v2);
  #L24ab70.  if v2 <= 0 then goto L24ab82;
  #L24ab74.  v2:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24ab78.  v3:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ab7c.  call `write`(v2, v3, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L24ab82.  return v4 @kind object;
}
procedure `void` `flush`(`okio.RealBufferedSink` v4 @kind this) @signature `Lokio/RealBufferedSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24ab94.  v0:= v4.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24ab98.  if v0 == 0 then goto L24abac;
  #L24ab9c.  v0:= new `java.lang.IllegalStateException`;
  #L24aba0.  v1:= "closed" @kind object;
  #L24aba4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24abaa.  throw v0;
  #L24abac.  v0:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24abb0.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24abb4.  v2:= 0L;
  #L24abb8.  v0:= lcmp(v0, v2);
  #L24abbc.  if v0 <= 0 then goto L24abd6;
  #L24abc0.  v0:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24abc4.  v1:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24abc8.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24abcc.  v2:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24abd0.  call `write`(v0, v1, v2) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L24abd6.  v0:= v4.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24abda.  call `flush`(v0) @signature `Lokio/Sink;.flush:()V` @kind interface;
  #L24abe0.  return @kind void;
}
procedure `boolean` `isOpen`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24abf4.  v0:= v1.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24abf8.  if v0 != 0 then goto L24ac00;
  #L24abfc.  v0:= 1I;
  #L24abfe.  return v0;
  #L24ac00.  v0:= 0I;
  #L24ac02.  goto L24abfe;
}
procedure `java.io.OutputStream` `outputStream`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ac14.  v0:= new `okio.RealBufferedSink$1`;
  #L24ac18.  call `<init>`(v0, v1) @signature `Lokio/RealBufferedSink$1;.<init>:(Lokio/RealBufferedSink;)V` @kind direct;
  #L24ac1e.  return v0 @kind object;
}
procedure `okio.Timeout` `timeout`(`okio.RealBufferedSink` v1 @kind this) @signature `Lokio/RealBufferedSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24ac30.  v0:= v1.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24ac34.  call temp:= `timeout`(v0) @signature `Lokio/Sink;.timeout:()Lokio/Timeout;` @kind interface;
  #L24ac3a.  v0:= temp @kind object;
  #L24ac3c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.RealBufferedSink` v2 @kind this) @signature `Lokio/RealBufferedSink;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24ac50.  v0:= new `java.lang.StringBuilder`;
  #L24ac54.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24ac5a.  v1:= "buffer(" @kind object;
  #L24ac5e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24ac64.  v0:= temp @kind object;
  #L24ac66.  v1:= v2.`okio.RealBufferedSink.sink` @type ^`okio.Sink` @kind object;
  #L24ac6a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24ac70.  v0:= temp @kind object;
  #L24ac72.  v1:= ")" @kind object;
  #L24ac76.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24ac7c.  v0:= temp @kind object;
  #L24ac7e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24ac84.  v0:= temp @kind object;
  #L24ac86.  return v0 @kind object;
}
procedure `int` `write`(`okio.RealBufferedSink` v3 @kind this, `java.nio.ByteBuffer` v4 @kind object @name `source`) @signature `Lokio/RealBufferedSink;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24ac98.  v1:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24ac9c.  if v1 == 0 then goto L24acb0;
  #L24aca0.  v1:= new `java.lang.IllegalStateException`;
  #L24aca4.  v2:= "closed" @kind object;
  #L24aca8.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24acae.  throw v1;
  #L24acb0.  v1:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24acb4.  call temp:= `write`(v1, v4) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @kind virtual;
  #L24acba.  v0:= temp;
  #L24acbc.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24acc2.  return v0;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v2 @kind this, `okio.ByteString` v3 @kind object @name `byteString`) @signature `Lokio/RealBufferedSink;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24acd4.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24acd8.  if v0 == 0 then goto L24acec;
  #L24acdc.  v0:= new `java.lang.IllegalStateException`;
  #L24ace0.  v1:= "closed" @kind object;
  #L24ace4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24acea.  throw v0;
  #L24acec.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24acf0.  call temp:= `write`(v0, v3) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L24acf6.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24acfc.  v0:= temp @kind object;
  #L24acfe.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v4 @kind this, `okio.Source` v5 @kind object @name `source`, `long` v6 @name `byteCount`) @signature `Lokio/RealBufferedSink;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24ad10.  v2:= 0L;
  #L24ad14.  v2:= lcmp(v6, v2);
  #L24ad18.  if v2 <= 0 then goto L24ad4a;
  #L24ad1c.  v2:= v4.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ad20.  call temp:= `read`(v5, v2, v6) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L24ad26.  v0:= temp @kind wide;
  #L24ad28.  v2:= -1L;
  #L24ad2c.  v2:= lcmp(v0, v2);
  #L24ad30.  if v2 != 0 then goto L24ad40;
  #L24ad34.  v2:= new `java.io.EOFException`;
  #L24ad38.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L24ad3e.  throw v2;
  #L24ad40.  v6:= v6 - v0 @kind long;
  #L24ad42.  call temp:= `emitCompleteSegments`(v4) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24ad48.  goto L24ad10;
  #L24ad4a.  return v4 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v2 @kind this, `byte`[] v3 @kind object @name `source`) @signature `Lokio/RealBufferedSink;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24ad5c.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24ad60.  if v0 == 0 then goto L24ad74;
  #L24ad64.  v0:= new `java.lang.IllegalStateException`;
  #L24ad68.  v1:= "closed" @kind object;
  #L24ad6c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24ad72.  throw v0;
  #L24ad74.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ad78.  call temp:= `write`(v0, v3) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L24ad7e.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24ad84.  v0:= temp @kind object;
  #L24ad86.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.RealBufferedSink` v2 @kind this, `byte`[] v3 @kind object @name `source`, `int` v4 @name `offset`, `int` v5 @name `byteCount`) @signature `Lokio/RealBufferedSink;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24ad98.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24ad9c.  if v0 == 0 then goto L24adb0;
  #L24ada0.  v0:= new `java.lang.IllegalStateException`;
  #L24ada4.  v1:= "closed" @kind object;
  #L24ada8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24adae.  throw v0;
  #L24adb0.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24adb4.  call temp:= `write`(v0, v3, v4, v5) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L24adba.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24adc0.  v0:= temp @kind object;
  #L24adc2.  return v0 @kind object;
}
procedure `void` `write`(`okio.RealBufferedSink` v2 @kind this, `okio.Buffer` v3 @kind object @name `source`, `long` v4 @name `byteCount`) @signature `Lokio/RealBufferedSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24add4.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24add8.  if v0 == 0 then goto L24adec;
  #L24addc.  v0:= new `java.lang.IllegalStateException`;
  #L24ade0.  v1:= "closed" @kind object;
  #L24ade4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24adea.  throw v0;
  #L24adec.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24adf0.  call `write`(v0, v3, v4) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L24adf6.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24adfc.  return @kind void;
}
procedure `long` `writeAll`(`okio.RealBufferedSink` v8 @kind this, `okio.Source` v9 @kind object @name `source`) @signature `Lokio/RealBufferedSink;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L24ae10.  if v9 != 0 then goto L24ae24;
  #L24ae14.  v4:= new `java.lang.IllegalArgumentException`;
  #L24ae18.  v5:= "source == null" @kind object;
  #L24ae1c.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24ae22.  throw v4;
  #L24ae24.  v2:= 0L;
  #L24ae28.  v4:= v8.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ae2c.  v6:= 8192L;
  #L24ae30.  call temp:= `read`(v9, v4, v6) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L24ae36.  v0:= temp @kind wide;
  #L24ae38.  v4:= -1L;
  #L24ae3c.  v4:= lcmp(v0, v4);
  #L24ae40.  if v4 == 0 then goto L24ae4e;
  #L24ae44.  v2:= v2 + v0 @kind long;
  #L24ae46.  call temp:= `emitCompleteSegments`(v8) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24ae4c.  goto L24ae28;
  #L24ae4e.  return v2 @kind wide;
}
procedure `okio.BufferedSink` `writeByte`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `b`) @signature `Lokio/RealBufferedSink;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24ae60.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24ae64.  if v0 == 0 then goto L24ae78;
  #L24ae68.  v0:= new `java.lang.IllegalStateException`;
  #L24ae6c.  v1:= "closed" @kind object;
  #L24ae70.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24ae76.  throw v0;
  #L24ae78.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24ae7c.  call temp:= `writeByte`(v0, v3) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24ae82.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24ae88.  v0:= temp @kind object;
  #L24ae8a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24ae9c.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24aea0.  if v0 == 0 then goto L24aeb4;
  #L24aea4.  v0:= new `java.lang.IllegalStateException`;
  #L24aea8.  v1:= "closed" @kind object;
  #L24aeac.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24aeb2.  throw v0;
  #L24aeb4.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24aeb8.  call temp:= `writeDecimalLong`(v0, v4) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L24aebe.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24aec4.  v0:= temp @kind object;
  #L24aec6.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24aed8.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24aedc.  if v0 == 0 then goto L24aef0;
  #L24aee0.  v0:= new `java.lang.IllegalStateException`;
  #L24aee4.  v1:= "closed" @kind object;
  #L24aee8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24aeee.  throw v0;
  #L24aef0.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24aef4.  call temp:= `writeHexadecimalUnsignedLong`(v0, v4) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L24aefa.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24af00.  v0:= temp @kind object;
  #L24af02.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeInt`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `i`) @signature `Lokio/RealBufferedSink;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24af14.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24af18.  if v0 == 0 then goto L24af2c;
  #L24af1c.  v0:= new `java.lang.IllegalStateException`;
  #L24af20.  v1:= "closed" @kind object;
  #L24af24.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24af2a.  throw v0;
  #L24af2c.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24af30.  call temp:= `writeInt`(v0, v3) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L24af36.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24af3c.  v0:= temp @kind object;
  #L24af3e.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `i`) @signature `Lokio/RealBufferedSink;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24af50.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24af54.  if v0 == 0 then goto L24af68;
  #L24af58.  v0:= new `java.lang.IllegalStateException`;
  #L24af5c.  v1:= "closed" @kind object;
  #L24af60.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24af66.  throw v0;
  #L24af68.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24af6c.  call temp:= `writeIntLe`(v0, v3) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L24af72.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24af78.  v0:= temp @kind object;
  #L24af7a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeLong`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24af8c.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24af90.  if v0 == 0 then goto L24afa4;
  #L24af94.  v0:= new `java.lang.IllegalStateException`;
  #L24af98.  v1:= "closed" @kind object;
  #L24af9c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24afa2.  throw v0;
  #L24afa4.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24afa8.  call temp:= `writeLong`(v0, v4) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L24afae.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24afb4.  v0:= temp @kind object;
  #L24afb6.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.RealBufferedSink` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/RealBufferedSink;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24afc8.  v0:= v3.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24afcc.  if v0 == 0 then goto L24afe0;
  #L24afd0.  v0:= new `java.lang.IllegalStateException`;
  #L24afd4.  v1:= "closed" @kind object;
  #L24afd8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24afde.  throw v0;
  #L24afe0.  v0:= v3.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24afe4.  call temp:= `writeLongLe`(v0, v4) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L24afea.  call temp:= `emitCompleteSegments`(v3) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24aff0.  v0:= temp @kind object;
  #L24aff2.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeShort`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `s`) @signature `Lokio/RealBufferedSink;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b004.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b008.  if v0 == 0 then goto L24b01c;
  #L24b00c.  v0:= new `java.lang.IllegalStateException`;
  #L24b010.  v1:= "closed" @kind object;
  #L24b014.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b01a.  throw v0;
  #L24b01c.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b020.  call temp:= `writeShort`(v0, v3) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L24b026.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b02c.  v0:= temp @kind object;
  #L24b02e.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `s`) @signature `Lokio/RealBufferedSink;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b040.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b044.  if v0 == 0 then goto L24b058;
  #L24b048.  v0:= new `java.lang.IllegalStateException`;
  #L24b04c.  v1:= "closed" @kind object;
  #L24b050.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b056.  throw v0;
  #L24b058.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b05c.  call temp:= `writeShortLe`(v0, v3) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L24b062.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b068.  v0:= temp @kind object;
  #L24b06a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `int` v4 @name `beginIndex`, `int` v5 @name `endIndex`, `java.nio.charset.Charset` v6 @kind object @name `charset`) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b07c.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b080.  if v0 == 0 then goto L24b094;
  #L24b084.  v0:= new `java.lang.IllegalStateException`;
  #L24b088.  v1:= "closed" @kind object;
  #L24b08c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b092.  throw v0;
  #L24b094.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b098.  call temp:= `writeString`(v0, v3, v4, v5, v6) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L24b09e.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b0a4.  v0:= temp @kind object;
  #L24b0a6.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `java.nio.charset.Charset` v4 @kind object @name `charset`) @signature `Lokio/RealBufferedSink;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b0b8.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b0bc.  if v0 == 0 then goto L24b0d0;
  #L24b0c0.  v0:= new `java.lang.IllegalStateException`;
  #L24b0c4.  v1:= "closed" @kind object;
  #L24b0c8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b0ce.  throw v0;
  #L24b0d0.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b0d4.  call temp:= `writeString`(v0, v3, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L24b0da.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b0e0.  v0:= temp @kind object;
  #L24b0e2.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b0f4.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b0f8.  if v0 == 0 then goto L24b10c;
  #L24b0fc.  v0:= new `java.lang.IllegalStateException`;
  #L24b100.  v1:= "closed" @kind object;
  #L24b104.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b10a.  throw v0;
  #L24b10c.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b110.  call temp:= `writeUtf8`(v0, v3) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L24b116.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b11c.  v0:= temp @kind object;
  #L24b11e.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.RealBufferedSink` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `int` v4 @name `beginIndex`, `int` v5 @name `endIndex`) @signature `Lokio/RealBufferedSink;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b130.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b134.  if v0 == 0 then goto L24b148;
  #L24b138.  v0:= new `java.lang.IllegalStateException`;
  #L24b13c.  v1:= "closed" @kind object;
  #L24b140.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b146.  throw v0;
  #L24b148.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b14c.  call temp:= `writeUtf8`(v0, v3, v4, v5) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L24b152.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b158.  v0:= temp @kind object;
  #L24b15a.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.RealBufferedSink` v2 @kind this, `int` v3 @name `codePoint`) @signature `Lokio/RealBufferedSink;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24b16c.  v0:= v2.`okio.RealBufferedSink.closed` @type ^`boolean` @kind boolean;
  #L24b170.  if v0 == 0 then goto L24b184;
  #L24b174.  v0:= new `java.lang.IllegalStateException`;
  #L24b178.  v1:= "closed" @kind object;
  #L24b17c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24b182.  throw v0;
  #L24b184.  v0:= v2.`okio.RealBufferedSink.buffer` @type ^`okio.Buffer` @kind object;
  #L24b188.  call temp:= `writeUtf8CodePoint`(v0, v3) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L24b18e.  call temp:= `emitCompleteSegments`(v2) @signature `Lokio/RealBufferedSink;.emitCompleteSegments:()Lokio/BufferedSink;` @kind virtual;
  #L24b194.  v0:= temp @kind object;
  #L24b196.  return v0 @kind object;
}
