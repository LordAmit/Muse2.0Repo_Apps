record `okio.Buffer` @kind class @AccessFlag PUBLIC_FINAL extends `okio.BufferedSource` @kind interface, `okio.BufferedSink` @kind interface, `java.lang.Cloneable` @kind interface, `java.nio.channels.ByteChannel` @kind interface {
  `okio.Segment` `okio.Buffer.head` @AccessFlag ;
  `long` `okio.Buffer.size` @AccessFlag ;
}
global `byte`[] `@@okio.Buffer.DIGITS` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okio.Buffer.REPLACEMENT_CHARACTER` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokio/Buffer;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L246da4.  v0:= 16I;
  #L246da8.  v0:= new `byte`[v0];
  #L246dac.  goto L246db8;
  #L246db2.  `@@okio.Buffer.DIGITS` @type ^`byte`[] := v0 @kind object;
  #L246db6.  return @kind void;
  #L246db8.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L246dcf.  goto L246db2;
}
procedure `void` `<init>`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L246de0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L246de6.  return @kind void;
}
procedure `okio.ByteString` `digest`(`okio.Buffer` v7 @kind this, `java.lang.String` v8 @kind object @name `algorithm`) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #Try_start0.  
  #L246df8.  call temp:= `getInstance`(v8) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L246dfe.  v1:= temp @kind object;
  #L246e00.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246e04.  if v3 == 0 then goto L246e5e;
  #L246e08.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246e0c.  v3:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246e10.  v4:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246e14.  v4:= v4.`okio.Segment.pos` @type ^`int`;
  #L246e18.  v5:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246e1c.  v5:= v5.`okio.Segment.limit` @type ^`int`;
  #L246e20.  v6:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246e24.  v6:= v6.`okio.Segment.pos` @type ^`int`;
  #L246e28.  v5:= v5 - v6 @kind int;
  #L246e2a.  call `update`(v1, v3, v4, v5) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L246e30.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246e34.  v2:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L246e38.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246e3c.  if v2 == v3 then goto L246e5e;
  #L246e40.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246e44.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L246e48.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L246e4c.  v6:= v2.`okio.Segment.pos` @type ^`int`;
  #L246e50.  v5:= v5 - v6 @kind int;
  #L246e52.  call `update`(v1, v3, v4, v5) @signature `Ljava/security/MessageDigest;.update:([BII)V` @kind virtual;
  #L246e58.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L246e5c.  goto L246e38;
  #L246e5e.  call temp:= `digest`(v1) @signature `Ljava/security/MessageDigest;.digest:()[B` @kind virtual;
  #L246e64.  v3:= temp @kind object;
  #L246e66.  call temp:= `of`(v3) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #Try_end0.  
  #L246e6c.  v3:= temp @kind object;
  #L246e6e.  return v3 @kind object;
  #L246e70.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L246e72.  v3:= new `java.lang.AssertionError`;
  #L246e76.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L246e7c.  throw v3;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L246e70;
}
procedure `okio.ByteString` `hmac`(`okio.Buffer` v7 @kind this, `java.lang.String` v8 @kind object @name `algorithm`, `okio.ByteString` v9 @kind object @name `key`) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #Try_start0.  
  #L246ea0.  call temp:= `getInstance`(v8) @signature `Ljavax/crypto/Mac;.getInstance:(Ljava/lang/String;)Ljavax/crypto/Mac;` @kind static;
  #L246ea6.  v1:= temp @kind object;
  #L246ea8.  v3:= new `javax.crypto.spec.SecretKeySpec`;
  #L246eac.  call temp:= `toByteArray`(v9) @signature `Lokio/ByteString;.toByteArray:()[B` @kind virtual;
  #L246eb2.  v4:= temp @kind object;
  #L246eb4.  call `<init>`(v3, v4, v8) @signature `Ljavax/crypto/spec/SecretKeySpec;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L246eba.  call `init`(v1, v3) @signature `Ljavax/crypto/Mac;.init:(Ljava/security/Key;)V` @kind virtual;
  #L246ec0.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246ec4.  if v3 == 0 then goto L246f1e;
  #L246ec8.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246ecc.  v3:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246ed0.  v4:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246ed4.  v4:= v4.`okio.Segment.pos` @type ^`int`;
  #L246ed8.  v5:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246edc.  v5:= v5.`okio.Segment.limit` @type ^`int`;
  #L246ee0.  v6:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246ee4.  v6:= v6.`okio.Segment.pos` @type ^`int`;
  #L246ee8.  v5:= v5 - v6 @kind int;
  #L246eea.  call `update`(v1, v3, v4, v5) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L246ef0.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246ef4.  v2:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L246ef8.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L246efc.  if v2 == v3 then goto L246f1e;
  #L246f00.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246f04.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L246f08.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L246f0c.  v6:= v2.`okio.Segment.pos` @type ^`int`;
  #L246f10.  v5:= v5 - v6 @kind int;
  #L246f12.  call `update`(v1, v3, v4, v5) @signature `Ljavax/crypto/Mac;.update:([BII)V` @kind virtual;
  #L246f18.  v2:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L246f1c.  goto L246ef8;
  #L246f1e.  call temp:= `doFinal`(v1) @signature `Ljavax/crypto/Mac;.doFinal:()[B` @kind virtual;
  #L246f24.  v3:= temp @kind object;
  #L246f26.  call temp:= `of`(v3) @signature `Lokio/ByteString;.of:([B)Lokio/ByteString;` @kind static;
  #Try_end0.  
  #L246f2c.  v3:= temp @kind object;
  #L246f2e.  return v3 @kind object;
  #L246f30.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L246f32.  v3:= new `java.lang.AssertionError`;
  #L246f36.  call `<init>`(v3) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L246f3c.  throw v3;
  #L246f3e.  v0:= Exception @type ^`java.security.InvalidKeyException` @kind object;
  #L246f40.  v3:= new `java.lang.IllegalArgumentException`;
  #L246f44.  call `<init>`(v3, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L246f4a.  throw v3;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L246f30;
  catch `java.security.InvalidKeyException` @[Try_start0..Try_end0] goto L246f3e;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v5 @kind this, `okio.Segment` v6 @kind object @name `segment`, `int` v7 @name `segmentPos`, `okio.ByteString` v8 @kind object @name `bytes`, `int` v9 @name `bytesOffset`, `int` v10 @name `bytesLimit`) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L246f6c.  v2:= v6.`okio.Segment.limit` @type ^`int`;
  #L246f70.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246f74.  v1:= v9;
  #L246f76.  if v1 >= v10 then goto L246fac;
  #L246f7a.  if v7 != v2 then goto L246f8e;
  #L246f7e.  v6:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L246f82.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L246f86.  v7:= v6.`okio.Segment.pos` @type ^`int`;
  #L246f8a.  v2:= v6.`okio.Segment.limit` @type ^`int`;
  #L246f8e.  v3:= v0[v7] @kind byte;
  #L246f92.  call temp:= `getByte`(v8, v1) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L246f98.  v4:= temp;
  #L246f9a.  if v3 == v4 then goto L246fa2;
  #L246f9e.  v3:= 0I;
  #L246fa0.  return v3;
  #L246fa2.  v7:= v7 + 1;
  #L246fa6.  v1:= v1 + 1;
  #L246faa.  goto L246f76;
  #L246fac.  v3:= 1I;
  #L246fae.  goto L246fa0;
}
procedure `void` `readFrom`(`okio.Buffer` v8 @kind this, `java.io.InputStream` v9 @kind object @name `in`, `long` v10 @name `byteCount`, `boolean` v12 @name `forever`) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L246fc0.  if v9 != 0 then goto L246fee;
  #L246fc4.  v3:= new `java.lang.IllegalArgumentException`;
  #L246fc8.  v4:= "in == null" @kind object;
  #L246fcc.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246fd2.  throw v3;
  #L246fd4.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L246fd8.  v3:= v3 + v0 @kind int;
  #L246fda.  v2.`okio.Segment.limit` @type ^`int` := v3;
  #L246fde.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L246fe2.  v6:= (`long`) v0 @kind i2l;
  #L246fe4.  v4:= v4 + v6 @kind long;
  #L246fe6.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L246fea.  v4:= (`long`) v0 @kind i2l;
  #L246fec.  v10:= v10 - v4 @kind long;
  #L246fee.  v4:= 0L;
  #L246ff2.  v3:= lcmp(v10, v4);
  #L246ff6.  if v3 > 0 then goto L246ffe;
  #L246ffa.  if v12 == 0 then goto L247036;
  #L246ffe.  v3:= 1I;
  #L247000.  call temp:= `writableSegment`(v8, v3) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L247006.  v2:= temp @kind object;
  #L247008.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24700c.  v3:= v3 - 8192;
  #L247010.  v4:= (`long`) v3 @kind i2l;
  #L247012.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L247018.  v4:= temp @kind wide;
  #L24701a.  v1:= (`int`) v4 @kind l2i;
  #L24701c.  v3:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247020.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L247024.  call temp:= `read`(v9, v3, v4, v1) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L24702a.  v0:= temp;
  #L24702c.  v3:= -1I;
  #L24702e.  if v0 != v3 then goto L246fd4;
  #L247032.  if v12 == 0 then goto L247038;
  #L247036.  return @kind void;
  #L247038.  v3:= new `java.io.EOFException`;
  #L24703c.  call `<init>`(v3) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L247042.  throw v3;
}
procedure `okio.Buffer` `buffer`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.buffer:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L247054.  return v0 @kind object;
}
procedure `void` `clear`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L247068.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24706c.  call `skip`(v4, v2) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #Try_end0.  
  #L247072.  return @kind void;
  #L247074.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L247076.  v1:= new `java.lang.AssertionError`;
  #L24707a.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L247080.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L247074;
}
procedure `java.lang.Object` `clone`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2470a4.  call temp:= `clone`(v1) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @kind virtual;
  #L2470aa.  v0:= temp @kind object;
  #L2470ac.  return v0 @kind object;
}
procedure `okio.Buffer` `clone`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.clone:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2470c0.  v0:= new `okio.Buffer`;
  #L2470c4.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L2470ca.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2470ce.  v4:= 0L;
  #L2470d2.  v2:= lcmp(v2, v4);
  #L2470d6.  if v2 != 0 then goto L2470dc;
  #L2470da.  return v0 @kind object;
  #L2470dc.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2470e0.  call temp:= `sharedCopy`(v2) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L2470e6.  v2:= temp @kind object;
  #L2470e8.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L2470ec.  v2:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2470f0.  v3:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2470f4.  v4:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2470f8.  v3.`okio.Segment.prev` @type ^`okio.Segment` := v4 @kind object;
  #L2470fc.  v2.`okio.Segment.next` @type ^`okio.Segment` := v4 @kind object;
  #L247100.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247104.  v1:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L247108.  v2:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24710c.  if v1 == v2 then goto L24712c;
  #L247110.  v2:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247114.  v2:= v2.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L247118.  call temp:= `sharedCopy`(v1) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L24711e.  v3:= temp @kind object;
  #L247120.  call temp:= `push`(v2, v3) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L247126.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24712a.  goto L247108;
  #L24712c.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247130.  v0.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L247134.  goto L2470da;
}
procedure `void` `close`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L247148.  return @kind void;
}
procedure `long` `completeSegmentByteCount`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.completeSegmentByteCount:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24715c.  v4:= 0L;
  #L247160.  v0:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247164.  v3:= lcmp(v0, v4);
  #L247168.  if v3 != 0 then goto L24716e;
  #L24716c.  return v4 @kind wide;
  #L24716e.  v3:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247172.  v2:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L247176.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24717a.  v4:= 8192I;
  #L24717e.  if v3 >= v4 then goto L247198;
  #L247182.  v3:= v2.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L247186.  if v3 == 0 then goto L247198;
  #L24718a.  v3:= v2.`okio.Segment.limit` @type ^`int`;
  #L24718e.  v4:= v2.`okio.Segment.pos` @type ^`int`;
  #L247192.  v3:= v3 - v4 @kind int;
  #L247194.  v4:= (`long`) v3 @kind i2l;
  #L247196.  v0:= v0 - v4 @kind long;
  #L247198.  v4:= v0 @kind wide;
  #L24719a.  goto L24716c;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v6 @kind this, `java.io.OutputStream` v7 @kind object @name `out`) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2471ac.  v2:= 0L;
  #L2471b0.  v4:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2471b4.  v0:= v6 @kind object;
  #L2471b6.  v1:= v7 @kind object;
  #L2471b8.  call temp:= `copyTo`(v0, v1, v2, v4) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @kind virtual;
  #L2471be.  v0:= temp @kind object;
  #L2471c0.  return v0 @kind object;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v10 @kind this, `java.io.OutputStream` v11 @kind object @name `out`, `long` v12 @name `offset`, `long` v14 @name `byteCount`) @signature `Lokio/Buffer;.copyTo:(Ljava/io/OutputStream;JJ)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L2471d4.  if v11 != 0 then goto L2471e8;
  #L2471d8.  v0:= new `java.lang.IllegalArgumentException`;
  #L2471dc.  v1:= "out == null" @kind object;
  #L2471e0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2471e6.  throw v0;
  #L2471e8.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2471ec.  v2:= v12 @kind wide;
  #L2471ee.  v4:= v14 @kind wide;
  #L2471f0.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2471f6.  v0:= 0L;
  #L2471fa.  v0:= lcmp(v14, v0);
  #L2471fe.  if v0 != 0 then goto L247204;
  #L247202.  return v10 @kind object;
  #L247204.  v7:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247208.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L24720c.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L247210.  v0:= v0 - v1 @kind int;
  #L247212.  v0:= (`long`) v0 @kind i2l;
  #L247214.  v0:= lcmp(v12, v0);
  #L247218.  if v0 < 0 then goto L247230;
  #L24721c.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L247220.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L247224.  v0:= v0 - v1 @kind int;
  #L247226.  v0:= (`long`) v0 @kind i2l;
  #L247228.  v12:= v12 - v0 @kind long;
  #L24722a.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24722e.  goto L247208;
  #L247230.  v0:= 0L;
  #L247234.  v0:= lcmp(v14, v0);
  #L247238.  if v0 <= 0 then goto L247202;
  #L24723c.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L247240.  v0:= (`long`) v0 @kind i2l;
  #L247242.  v0:= v0 + v12 @kind long;
  #L247244.  v6:= (`int`) v0 @kind l2i;
  #L247246.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L24724a.  v0:= v0 - v6 @kind int;
  #L24724c.  v0:= (`long`) v0 @kind i2l;
  #L24724e.  call temp:= `min`(v0, v14) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L247254.  v0:= temp @kind wide;
  #L247256.  v8:= (`int`) v0 @kind l2i;
  #L247258.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24725c.  call `write`(v11, v0, v6, v8) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L247262.  v0:= (`long`) v8 @kind i2l;
  #L247264.  v14:= v14 - v0 @kind long;
  #L247266.  v12:= 0L;
  #L24726a.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24726e.  goto L247230;
}
procedure `okio.Buffer` `copyTo`(`okio.Buffer` v10 @kind this, `okio.Buffer` v11 @kind object @name `out`, `long` v12 @name `offset`, `long` v14 @name `byteCount`) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L247280.  v8:= 0L;
  #L247284.  if v11 != 0 then goto L247298;
  #L247288.  v0:= new `java.lang.IllegalArgumentException`;
  #L24728c.  v1:= "out == null" @kind object;
  #L247290.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247296.  throw v0;
  #L247298.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24729c.  v2:= v12 @kind wide;
  #L24729e.  v4:= v14 @kind wide;
  #L2472a0.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L2472a6.  v0:= lcmp(v14, v8);
  #L2472aa.  if v0 != 0 then goto L2472b0;
  #L2472ae.  return v10 @kind object;
  #L2472b0.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2472b4.  v0:= v0 + v14 @kind long;
  #L2472b6.  v11.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L2472ba.  v7:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2472be.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L2472c2.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L2472c6.  v0:= v0 - v1 @kind int;
  #L2472c8.  v0:= (`long`) v0 @kind i2l;
  #L2472ca.  v0:= lcmp(v12, v0);
  #L2472ce.  if v0 < 0 then goto L2472e6;
  #L2472d2.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L2472d6.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L2472da.  v0:= v0 - v1 @kind int;
  #L2472dc.  v0:= (`long`) v0 @kind i2l;
  #L2472de.  v12:= v12 - v0 @kind long;
  #L2472e0.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2472e4.  goto L2472be;
  #L2472e6.  v0:= lcmp(v14, v8);
  #L2472ea.  if v0 <= 0 then goto L2472ae;
  #L2472ee.  call temp:= `sharedCopy`(v7) @signature `Lokio/Segment;.sharedCopy:()Lokio/Segment;` @kind virtual;
  #L2472f4.  v6:= temp @kind object;
  #L2472f6.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L2472fa.  v0:= (`long`) v0 @kind i2l;
  #L2472fc.  v0:= v0 + v12 @kind long;
  #L2472fe.  v0:= (`int`) v0 @kind l2i;
  #L247300.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L247304.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L247308.  v1:= (`int`) v14 @kind l2i;
  #L24730a.  v0:= v0 + v1 @kind int;
  #L24730c.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L247310.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L247316.  v0:= temp;
  #L247318.  v6.`okio.Segment.limit` @type ^`int` := v0;
  #L24731c.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247320.  if v0 != 0 then goto L247348;
  #L247324.  v6.`okio.Segment.prev` @type ^`okio.Segment` := v6 @kind object;
  #L247328.  v6.`okio.Segment.next` @type ^`okio.Segment` := v6 @kind object;
  #L24732c.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L247330.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L247334.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L247338.  v0:= v0 - v1 @kind int;
  #L24733a.  v0:= (`long`) v0 @kind i2l;
  #L24733c.  v14:= v14 - v0 @kind long;
  #L24733e.  v12:= 0L;
  #L247342.  v7:= v7.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L247346.  goto L2472e6;
  #L247348.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24734c.  v0:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L247350.  call temp:= `push`(v0, v6) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L247356.  goto L247330;
}
procedure `okio.BufferedSink` `emit`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emit:()Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;

  #L247368.  return v0 @kind object;
}
procedure `okio.Buffer` `emitCompleteSegments`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;

  #L24737c.  return v0 @kind object;
}
procedure `okio.BufferedSink` `emitCompleteSegments`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L247390.  call temp:= `emitCompleteSegments`(v1) @signature `Lokio/Buffer;.emitCompleteSegments:()Lokio/Buffer;` @kind virtual;
  #L247396.  v0:= temp @kind object;
  #L247398.  return v0 @kind object;
}
procedure `boolean` `equals`(`okio.Buffer` v18 @kind this, `java.lang.Object` v19 @kind object @name `o`) @signature `Lokio/Buffer;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L2473ac.  v0:= v18 @kind object;
  #L2473b0.  v1:= v19 @kind object;
  #L2473b4.  if v0 != v1 then goto L2473bc;
  #L2473b8.  v14:= 1I;
  #L2473ba.  return v14;
  #L2473bc.  v0:= v19 @kind object;
  #L2473c0.  v14:= instanceof @variable v0 @type ^`okio.Buffer` @kind boolean;
  #L2473c4.  if v14 != 0 then goto L2473cc;
  #L2473c8.  v14:= 0I;
  #L2473ca.  goto L2473ba;
  #L2473cc.  v13:= v19 @kind object;
  #L2473d0.  v13:= (`okio.Buffer`) v13 @kind object;
  #L2473d4.  v0:= v18 @kind object;
  #L2473d8.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2473dc.  v0:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2473e0.  v16:= v0 @kind wide;
  #L2473e4.  v14:= lcmp(v14, v16);
  #L2473e8.  if v14 == 0 then goto L2473f0;
  #L2473ec.  v14:= 0I;
  #L2473ee.  goto L2473ba;
  #L2473f0.  v0:= v18 @kind object;
  #L2473f4.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2473f8.  v16:= 0L;
  #L2473fc.  v14:= lcmp(v14, v16);
  #L247400.  if v14 != 0 then goto L247408;
  #L247404.  v14:= 1I;
  #L247406.  goto L2473ba;
  #L247408.  v0:= v18 @kind object;
  #L24740c.  v11:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247410.  v12:= v13.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247414.  v5:= v11.`okio.Segment.pos` @type ^`int`;
  #L247418.  v9:= v12.`okio.Segment.pos` @type ^`int`;
  #L24741c.  v6:= 0L;
  #L247420.  v0:= v18 @kind object;
  #L247424.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247428.  v14:= lcmp(v6, v14);
  #L24742c.  if v14 >= 0 then goto L2474a4;
  #L247430.  v14:= v11.`okio.Segment.limit` @type ^`int`;
  #L247434.  v14:= v14 - v5 @kind int;
  #L247436.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L24743a.  v15:= v15 - v9 @kind int;
  #L24743c.  call temp:= `min`(v14, v15) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L247442.  v14:= temp;
  #L247444.  v2:= (`long`) v14 @kind i2l;
  #L247446.  v4:= 0I;
  #L247448.  v10:= v9;
  #L24744a.  v8:= v5;
  #L24744c.  v14:= (`long`) v4 @kind i2l;
  #L24744e.  v14:= lcmp(v14, v2);
  #L247452.  if v14 >= 0 then goto L247480;
  #L247456.  v14:= v11.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24745a.  v5:= v8 + 1;
  #L24745e.  v14:= v14[v8] @kind byte;
  #L247462.  v15:= v12.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247466.  v9:= v10 + 1;
  #L24746a.  v15:= v15[v10] @kind byte;
  #L24746e.  if v14 == v15 then goto L247476;
  #L247472.  v14:= 0I;
  #L247474.  goto L2473ba;
  #L247476.  v4:= v4 + 1;
  #L24747a.  v10:= v9;
  #L24747c.  v8:= v5;
  #L24747e.  goto L24744c;
  #L247480.  v14:= v11.`okio.Segment.limit` @type ^`int`;
  #L247484.  if v8 != v14 then goto L2474ac;
  #L247488.  v11:= v11.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24748c.  v5:= v11.`okio.Segment.pos` @type ^`int`;
  #L247490.  v14:= v12.`okio.Segment.limit` @type ^`int`;
  #L247494.  if v10 != v14 then goto L2474a8;
  #L247498.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24749c.  v9:= v12.`okio.Segment.pos` @type ^`int`;
  #L2474a0.  v6:= v6 + v2 @kind long;
  #L2474a2.  goto L247420;
  #L2474a4.  v14:= 1I;
  #L2474a6.  goto L2473ba;
  #L2474a8.  v9:= v10;
  #L2474aa.  goto L2474a0;
  #L2474ac.  v5:= v8;
  #L2474ae.  goto L247490;
}
procedure `boolean` `exhausted`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.exhausted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2474c0.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2474c4.  v2:= 0L;
  #L2474c8.  v0:= lcmp(v0, v2);
  #L2474cc.  if v0 != 0 then goto L2474d4;
  #L2474d0.  v0:= 1I;
  #L2474d2.  return v0;
  #L2474d4.  v0:= 0I;
  #L2474d6.  goto L2474d2;
}
procedure `void` `flush`(`okio.Buffer` v0 @kind this) @signature `Lokio/Buffer;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L2474e8.  return @kind void;
}
procedure `byte` `getByte`(`okio.Buffer` v9 @kind this, `long` v10 @name `pos`) @signature `Lokio/Buffer;.getByte:(J)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L2474fc.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247500.  v4:= 1L;
  #L247504.  v2:= v10 @kind wide;
  #L247506.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L24750c.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247510.  v0:= v0 - v10 @kind long;
  #L247512.  v0:= lcmp(v0, v10);
  #L247516.  if v0 <= 0 then goto L247550;
  #L24751a.  v6:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24751e.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L247522.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L247526.  v7:= v0 - v1 @kind int;
  #L24752a.  v0:= (`long`) v7 @kind i2l;
  #L24752c.  v0:= lcmp(v10, v0);
  #L247530.  if v0 >= 0 then goto L247546;
  #L247534.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247538.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L24753c.  v2:= (`int`) v10 @kind l2i;
  #L24753e.  v1:= v1 + v2 @kind int;
  #L247540.  v0:= v0[v1] @kind byte;
  #L247544.  return v0;
  #L247546.  v0:= (`long`) v7 @kind i2l;
  #L247548.  v10:= v10 - v0 @kind long;
  #L24754a.  v6:= v6.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L24754e.  goto L24751e;
  #L247550.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247554.  v10:= v10 - v0 @kind long;
  #L247556.  v0:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24755a.  v6:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24755e.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L247562.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L247566.  v0:= v0 - v1 @kind int;
  #L247568.  v0:= (`long`) v0 @kind i2l;
  #L24756a.  v10:= v10 + v0 @kind long;
  #L24756c.  v0:= 0L;
  #L247570.  v0:= lcmp(v10, v0);
  #L247574.  if v0 < 0 then goto L24758a;
  #L247578.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24757c.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L247580.  v2:= (`int`) v10 @kind l2i;
  #L247582.  v1:= v1 + v2 @kind int;
  #L247584.  v0:= v0[v1] @kind byte;
  #L247588.  goto L247544;
  #L24758a.  v6:= v6.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L24758e.  goto L24755e;
}
procedure `int` `hashCode`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2475a0.  v3:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2475a4.  if v3 != 0 then goto L2475ac;
  #L2475a8.  v2:= 0I;
  #L2475aa.  return v2;
  #L2475ac.  v2:= 1I;
  #L2475ae.  v1:= v3.`okio.Segment.pos` @type ^`int`;
  #L2475b2.  v0:= v3.`okio.Segment.limit` @type ^`int`;
  #L2475b6.  if v1 >= v0 then goto L2475d0;
  #L2475ba.  v4:= v2 * 31;
  #L2475be.  v5:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2475c2.  v5:= v5[v1] @kind byte;
  #L2475c6.  v2:= v4 + v5 @kind int;
  #L2475ca.  v1:= v1 + 1;
  #L2475ce.  goto L2475b6;
  #L2475d0.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2475d4.  v4:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2475d8.  if v3 != v4 then goto L2475ae;
  #L2475dc.  goto L2475aa;
}
procedure `okio.ByteString` `hmacSha1`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object @name `key`) @signature `Lokio/Buffer;.hmacSha1:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2475f0.  v0:= "HmacSHA1" @kind object;
  #L2475f4.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L2475fa.  v0:= temp @kind object;
  #L2475fc.  return v0 @kind object;
}
procedure `okio.ByteString` `hmacSha256`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object @name `key`) @signature `Lokio/Buffer;.hmacSha256:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247610.  v0:= "HmacSHA256" @kind object;
  #L247614.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L24761a.  v0:= temp @kind object;
  #L24761c.  return v0 @kind object;
}
procedure `okio.ByteString` `hmacSha512`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object @name `key`) @signature `Lokio/Buffer;.hmacSha512:(Lokio/ByteString;)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247630.  v0:= "HmacSHA512" @kind object;
  #L247634.  call temp:= `hmac`(v1, v0, v2) @signature `Lokio/Buffer;.hmac:(Ljava/lang/String;Lokio/ByteString;)Lokio/ByteString;` @kind direct;
  #L24763a.  v0:= temp @kind object;
  #L24763c.  return v0 @kind object;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 @name `b`) @signature `Lokio/Buffer;.indexOf:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L247650.  v2:= 0L;
  #L247654.  v4:= 9223372036854775807L;
  #L24765e.  v0:= v6 @kind object;
  #L247660.  v1:= v7;
  #L247662.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L247668.  v0:= temp @kind wide;
  #L24766a.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v6 @kind this, `byte` v7 @name `b`, `long` v8 @name `fromIndex`) @signature `Lokio/Buffer;.indexOf:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L24767c.  v4:= 9223372036854775807L;
  #L247686.  v0:= v6 @kind object;
  #L247688.  v1:= v7;
  #L24768a.  v2:= v8 @kind wide;
  #L24768c.  call temp:= `indexOf`(v0, v1, v2, v4) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L247692.  v0:= temp @kind wide;
  #L247694.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v16 @kind this, `byte` v17 @name `b`, `long` v18 @name `fromIndex`, `long` v20 @name `toIndex`) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L2476a8.  v10:= 0L;
  #L2476ac.  v10:= lcmp(v18, v10);
  #L2476b0.  if v10 < 0 then goto L2476bc;
  #L2476b4.  v10:= lcmp(v20, v18);
  #L2476b8.  if v10 >= 0 then goto L24770c;
  #L2476bc.  v10:= new `java.lang.IllegalArgumentException`;
  #L2476c0.  v11:= "size=%s fromIndex=%s toIndex=%s" @kind object;
  #L2476c4.  v12:= 3I;
  #L2476c6.  v12:= new `java.lang.Object`[v12];
  #L2476ca.  v13:= 0I;
  #L2476cc.  v0:= v16 @kind object;
  #L2476d0.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2476d4.  call temp:= `valueOf`(v14) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2476da.  v14:= temp @kind object;
  #L2476dc.  v12[v13]:= v14 @kind object;
  #L2476e0.  v13:= 1I;
  #L2476e2.  call temp:= `valueOf`(v18) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2476e8.  v14:= temp @kind object;
  #L2476ea.  v12[v13]:= v14 @kind object;
  #L2476ee.  v13:= 2I;
  #L2476f0.  call temp:= `valueOf`(v20) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L2476f6.  v14:= temp @kind object;
  #L2476f8.  v12[v13]:= v14 @kind object;
  #L2476fc.  call temp:= `format`(v11, v12) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L247702.  v11:= temp @kind object;
  #L247704.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24770a.  throw v10;
  #L24770c.  v0:= v16 @kind object;
  #L247710.  v10:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247714.  v10:= lcmp(v20, v10);
  #L247718.  if v10 <= 0 then goto L247728;
  #L24771c.  v0:= v16 @kind object;
  #L247720.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247724.  v20:= v0 @kind wide;
  #L247728.  v10:= lcmp(v18, v20);
  #L24772c.  if v10 != 0 then goto L247736;
  #L247730.  v10:= -1L;
  #L247734.  return v10 @kind wide;
  #L247736.  v0:= v16 @kind object;
  #L24773a.  v9:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24773e.  if v9 != 0 then goto L247748;
  #L247742.  v10:= -1L;
  #L247746.  goto L247734;
  #L247748.  v0:= v16 @kind object;
  #L24774c.  v10:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247750.  v10:= v10 - v18 @kind long;
  #L247754.  v10:= lcmp(v10, v18);
  #L247758.  if v10 >= 0 then goto L247780;
  #L24775c.  v0:= v16 @kind object;
  #L247760.  v6:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247764.  v10:= lcmp(v6, v18);
  #L247768.  if v10 <= 0 then goto L2477ba;
  #L24776c.  v9:= v9.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L247770.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L247774.  v11:= v9.`okio.Segment.pos` @type ^`int`;
  #L247778.  v10:= v10 - v11 @kind int;
  #L24777a.  v10:= (`long`) v10 @kind i2l;
  #L24777c.  v6:= v6 - v10 @kind long;
  #L24777e.  goto L247764;
  #L247780.  v6:= 0L;
  #L247784.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L247788.  v11:= v9.`okio.Segment.pos` @type ^`int`;
  #L24778c.  v10:= v10 - v11 @kind int;
  #L24778e.  v10:= (`long`) v10 @kind i2l;
  #L247790.  v4:= v6 + v10 @kind long;
  #L247794.  v10:= lcmp(v4, v18);
  #L247798.  if v10 >= 0 then goto L2477ba;
  #L24779c.  v9:= v9.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2477a0.  v6:= v4 @kind wide;
  #L2477a2.  goto L247784;
  #L2477a4.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L2477a8.  v11:= v9.`okio.Segment.pos` @type ^`int`;
  #L2477ac.  v10:= v10 - v11 @kind int;
  #L2477ae.  v10:= (`long`) v10 @kind i2l;
  #L2477b0.  v6:= v6 + v10 @kind long;
  #L2477b2.  v18:= v6 @kind wide;
  #L2477b6.  v9:= v9.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2477ba.  v10:= lcmp(v6, v20);
  #L2477be.  if v10 >= 0 then goto L247814;
  #L2477c2.  v2:= v9.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2477c6.  v10:= v9.`okio.Segment.limit` @type ^`int`;
  #L2477ca.  v10:= (`long`) v10 @kind i2l;
  #L2477cc.  v12:= v9.`okio.Segment.pos` @type ^`int`;
  #L2477d0.  v12:= (`long`) v12 @kind i2l;
  #L2477d2.  v12:= v12 + v20 @kind long;
  #L2477d6.  v12:= v12 - v6 @kind long;
  #L2477d8.  call temp:= `min`(v10, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2477de.  v10:= temp @kind wide;
  #L2477e0.  v3:= (`int`) v10 @kind l2i;
  #L2477e2.  v10:= v9.`okio.Segment.pos` @type ^`int`;
  #L2477e6.  v10:= (`long`) v10 @kind i2l;
  #L2477e8.  v10:= v10 + v18 @kind long;
  #L2477ec.  v10:= v10 - v6 @kind long;
  #L2477ee.  v8:= (`int`) v10 @kind l2i;
  #L2477f0.  if v8 >= v3 then goto L2477a4;
  #L2477f4.  v10:= v2[v8] @kind byte;
  #L2477f8.  v0:= v17;
  #L2477fc.  if v10 != v0 then goto L24780e;
  #L247800.  v10:= v9.`okio.Segment.pos` @type ^`int`;
  #L247804.  v10:= v8 - v10 @kind int;
  #L247808.  v10:= (`long`) v10 @kind i2l;
  #L24780a.  v10:= v10 + v6 @kind long;
  #L24780c.  goto L247734;
  #L24780e.  v8:= v8 + 1;
  #L247812.  goto L2477f0;
  #L247814.  v10:= -1L;
  #L247818.  goto L247734;
}
procedure `long` `indexOf`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object @name `bytes`) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24782c.  v0:= 0L;
  #L247830.  call temp:= `indexOf`(v2, v3, v0) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @kind virtual;
  #L247836.  v0:= temp @kind wide;
  #L247838.  return v0 @kind wide;
}
procedure `long` `indexOf`(`okio.Buffer` v20 @kind this, `okio.ByteString` v21 @kind object @name `bytes`, `long` v22 @name `fromIndex`) @signature `Lokio/Buffer;.indexOf:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;

  #L24784c.  call temp:= `size`(v21) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L247852.  v2:= temp;
  #L247854.  if v2 != 0 then goto L247868;
  #L247858.  v2:= new `java.lang.IllegalArgumentException`;
  #L24785c.  v4:= "bytes is empty" @kind object;
  #L247860.  call `<init>`(v2, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247866.  throw v2;
  #L247868.  v4:= 0L;
  #L24786c.  v2:= lcmp(v22, v4);
  #L247870.  if v2 >= 0 then goto L247884;
  #L247874.  v2:= new `java.lang.IllegalArgumentException`;
  #L247878.  v4:= "fromIndex < 0" @kind object;
  #L24787c.  call `<init>`(v2, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247882.  throw v2;
  #L247884.  v0:= v20 @kind object;
  #L247888.  v3:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24788c.  if v3 != 0 then goto L247896;
  #L247890.  v4:= -1L;
  #L247894.  return v4 @kind wide;
  #L247896.  v0:= v20 @kind object;
  #L24789a.  v4:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24789e.  v4:= v4 - v22 @kind long;
  #L2478a2.  v2:= lcmp(v4, v22);
  #L2478a6.  if v2 >= 0 then goto L2478ce;
  #L2478aa.  v0:= v20 @kind object;
  #L2478ae.  v12:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2478b2.  v2:= lcmp(v12, v22);
  #L2478b6.  if v2 <= 0 then goto L2478f2;
  #L2478ba.  v3:= v3.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L2478be.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L2478c2.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L2478c6.  v2:= v2 - v4 @kind int;
  #L2478c8.  v4:= (`long`) v2 @kind i2l;
  #L2478ca.  v12:= v12 - v4 @kind long;
  #L2478cc.  goto L2478b2;
  #L2478ce.  v12:= 0L;
  #L2478d2.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L2478d6.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L2478da.  v2:= v2 - v4 @kind int;
  #L2478dc.  v4:= (`long`) v2 @kind i2l;
  #L2478de.  v10:= v12 + v4 @kind long;
  #L2478e2.  v2:= lcmp(v10, v22);
  #L2478e6.  if v2 >= 0 then goto L2478f2;
  #L2478ea.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2478ee.  v12:= v10 @kind wide;
  #L2478f0.  goto L2478d2;
  #L2478f2.  v2:= 0I;
  #L2478f4.  v0:= v21 @kind object;
  #L2478f8.  call temp:= `getByte`(v0, v2) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L2478fe.  v8:= temp;
  #L247900.  call temp:= `size`(v21) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L247906.  v7:= temp;
  #L247908.  v0:= v20 @kind object;
  #L24790c.  v4:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247910.  v0:= (`long`) v7 @kind i2l;
  #L247912.  v18:= v0 @kind wide;
  #L247916.  v4:= v4 - v18 @kind long;
  #L24791a.  v18:= 1L;
  #L24791e.  v16:= v4 + v18 @kind long;
  #L247922.  v2:= lcmp(v12, v16);
  #L247926.  if v2 >= 0 then goto L2479b4;
  #L24792a.  v9:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24792e.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L247932.  v4:= (`long`) v2 @kind i2l;
  #L247934.  v2:= v3.`okio.Segment.pos` @type ^`int`;
  #L247938.  v0:= (`long`) v2 @kind i2l;
  #L24793a.  v18:= v0 @kind wide;
  #L24793e.  v18:= v18 + v16 @kind long;
  #L247942.  v18:= v18 - v12 @kind long;
  #L247946.  v0:= v18 @kind wide;
  #L24794a.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L247950.  v4:= temp @kind wide;
  #L247952.  v15:= (`int`) v4 @kind l2i;
  #L247954.  v2:= v3.`okio.Segment.pos` @type ^`int`;
  #L247958.  v4:= (`long`) v2 @kind i2l;
  #L24795a.  v4:= v4 + v22 @kind long;
  #L24795e.  v4:= v4 - v12 @kind long;
  #L247960.  v14:= (`int`) v4 @kind l2i;
  #L247962.  if v14 >= v15 then goto L24799c;
  #L247966.  v2:= v9[v14] @kind byte;
  #L24796a.  if v2 != v8 then goto L247996;
  #L24796e.  v4:= v14 + 1;
  #L247972.  v6:= 1I;
  #L247974.  v2:= v20 @kind object;
  #L247978.  v5:= v21 @kind object;
  #L24797c.  call temp:= `rangeEquals`(v2, v3, v4, v5, v6, v7) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L247982.  v2:= temp;
  #L247984.  if v2 == 0 then goto L247996;
  #L247988.  v2:= v3.`okio.Segment.pos` @type ^`int`;
  #L24798c.  v2:= v14 - v2 @kind int;
  #L247990.  v4:= (`long`) v2 @kind i2l;
  #L247992.  v4:= v4 + v12 @kind long;
  #L247994.  goto L247894;
  #L247996.  v14:= v14 + 1;
  #L24799a.  goto L247962;
  #L24799c.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L2479a0.  v4:= v3.`okio.Segment.pos` @type ^`int`;
  #L2479a4.  v2:= v2 - v4 @kind int;
  #L2479a6.  v4:= (`long`) v2 @kind i2l;
  #L2479a8.  v12:= v12 + v4 @kind long;
  #L2479aa.  v22:= v12 @kind wide;
  #L2479ae.  v3:= v3.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L2479b2.  goto L247922;
  #L2479b4.  v4:= -1L;
  #L2479b8.  goto L247894;
}
procedure `long` `indexOfElement`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object @name `targetBytes`) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2479cc.  v0:= 0L;
  #L2479d0.  call temp:= `indexOfElement`(v2, v3, v0) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @kind virtual;
  #L2479d6.  v0:= temp @kind wide;
  #L2479d8.  return v0 @kind wide;
}
procedure `long` `indexOfElement`(`okio.Buffer` v18 @kind this, `okio.ByteString` v19 @kind object @name `targetBytes`, `long` v20 @name `fromIndex`) @signature `Lokio/Buffer;.indexOfElement:(Lokio/ByteString;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L2479ec.  v16:= 0L;
  #L2479f0.  v15:= lcmp(v20, v16);
  #L2479f4.  if v15 >= 0 then goto L247a08;
  #L2479f8.  v15:= new `java.lang.IllegalArgumentException`;
  #L2479fc.  v16:= "fromIndex < 0" @kind object;
  #L247a00.  call `<init>`(v15, v16) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247a06.  throw v15;
  #L247a08.  v0:= v18 @kind object;
  #L247a0c.  v12:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247a10.  if v12 != 0 then goto L247a1a;
  #L247a14.  v16:= -1L;
  #L247a18.  return v16 @kind wide;
  #L247a1a.  v0:= v18 @kind object;
  #L247a1e.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247a22.  v16:= v0 @kind wide;
  #L247a26.  v16:= v16 - v20 @kind long;
  #L247a2a.  v15:= lcmp(v16, v20);
  #L247a2e.  if v15 >= 0 then goto L247a62;
  #L247a32.  v0:= v18 @kind object;
  #L247a36.  v10:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247a3a.  v15:= lcmp(v10, v20);
  #L247a3e.  if v15 <= 0 then goto L247a90;
  #L247a42.  v12:= v12.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L247a46.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L247a4a.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L247a4e.  v16:= v0;
  #L247a52.  v15:= v15 - v16 @kind int;
  #L247a56.  v0:= (`long`) v15 @kind i2l;
  #L247a58.  v16:= v0 @kind wide;
  #L247a5c.  v10:= v10 - v16 @kind long;
  #L247a60.  goto L247a3a;
  #L247a62.  v10:= 0L;
  #L247a66.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L247a6a.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L247a6e.  v16:= v0;
  #L247a72.  v15:= v15 - v16 @kind int;
  #L247a76.  v0:= (`long`) v15 @kind i2l;
  #L247a78.  v16:= v0 @kind wide;
  #L247a7c.  v8:= v10 + v16 @kind long;
  #L247a80.  v15:= lcmp(v8, v20);
  #L247a84.  if v15 >= 0 then goto L247a90;
  #L247a88.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L247a8c.  v10:= v8 @kind wide;
  #L247a8e.  goto L247a66;
  #L247a90.  call temp:= `size`(v19) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L247a96.  v15:= temp;
  #L247a98.  v16:= 2I;
  #L247a9c.  v0:= v16;
  #L247aa0.  if v15 != v0 then goto L247b42;
  #L247aa4.  v15:= 0I;
  #L247aa6.  v0:= v19 @kind object;
  #L247aaa.  call temp:= `getByte`(v0, v15) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L247ab0.  v3:= temp;
  #L247ab2.  v15:= 1I;
  #L247ab4.  v0:= v19 @kind object;
  #L247ab8.  call temp:= `getByte`(v0, v15) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L247abe.  v4:= temp;
  #L247ac0.  v0:= v18 @kind object;
  #L247ac4.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247ac8.  v16:= v0 @kind wide;
  #L247acc.  v15:= lcmp(v10, v16);
  #L247ad0.  if v15 >= 0 then goto L247be4;
  #L247ad4.  v5:= v12.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247ad8.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L247adc.  v0:= (`long`) v15 @kind i2l;
  #L247ade.  v16:= v0 @kind wide;
  #L247ae2.  v16:= v16 + v20 @kind long;
  #L247ae6.  v16:= v16 - v10 @kind long;
  #L247aea.  v0:= v16 @kind wide;
  #L247aee.  v7:= (`int`) v0 @kind l2i;
  #L247af0.  v6:= v12.`okio.Segment.limit` @type ^`int`;
  #L247af4.  if v7 >= v6 then goto L247b1e;
  #L247af8.  v2:= v5[v7] @kind byte;
  #L247afc.  if v2 == v3 then goto L247b04;
  #L247b00.  if v2 != v4 then goto L247b18;
  #L247b04.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L247b08.  v15:= v7 - v15 @kind int;
  #L247b0c.  v0:= (`long`) v15 @kind i2l;
  #L247b0e.  v16:= v0 @kind wide;
  #L247b12.  v16:= v16 + v10 @kind long;
  #L247b16.  goto L247a18;
  #L247b18.  v7:= v7 + 1;
  #L247b1c.  goto L247af4;
  #L247b1e.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L247b22.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L247b26.  v16:= v0;
  #L247b2a.  v15:= v15 - v16 @kind int;
  #L247b2e.  v0:= (`long`) v15 @kind i2l;
  #L247b30.  v16:= v0 @kind wide;
  #L247b34.  v10:= v10 + v16 @kind long;
  #L247b38.  v20:= v10 @kind wide;
  #L247b3c.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L247b40.  goto L247ac0;
  #L247b42.  call temp:= `internalArray`(v19) @signature `Lokio/ByteString;.internalArray:()[B` @kind virtual;
  #L247b48.  v14:= temp @kind object;
  #L247b4a.  v0:= v18 @kind object;
  #L247b4e.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247b52.  v16:= v0 @kind wide;
  #L247b56.  v15:= lcmp(v10, v16);
  #L247b5a.  if v15 >= 0 then goto L247be4;
  #L247b5e.  v5:= v12.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247b62.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L247b66.  v0:= (`long`) v15 @kind i2l;
  #L247b68.  v16:= v0 @kind wide;
  #L247b6c.  v16:= v16 + v20 @kind long;
  #L247b70.  v16:= v16 - v10 @kind long;
  #L247b74.  v0:= v16 @kind wide;
  #L247b78.  v7:= (`int`) v0 @kind l2i;
  #L247b7a.  v6:= v12.`okio.Segment.limit` @type ^`int`;
  #L247b7e.  if v7 >= v6 then goto L247bc0;
  #L247b82.  v2:= v5[v7] @kind byte;
  #L247b86.  v0:= length @variable v14;
  #L247b88.  v16:= v0;
  #L247b8c.  v15:= 0I;
  #L247b8e.  v0:= v16;
  #L247b92.  if v15 >= v0 then goto L247bba;
  #L247b96.  v13:= v14[v15] @kind byte;
  #L247b9a.  if v2 != v13 then goto L247bb4;
  #L247b9e.  v15:= v12.`okio.Segment.pos` @type ^`int`;
  #L247ba2.  v15:= v7 - v15 @kind int;
  #L247ba6.  v0:= (`long`) v15 @kind i2l;
  #L247ba8.  v16:= v0 @kind wide;
  #L247bac.  v16:= v16 + v10 @kind long;
  #L247bb0.  goto L247a18;
  #L247bb4.  v15:= v15 + 1;
  #L247bb8.  goto L247b8e;
  #L247bba.  v7:= v7 + 1;
  #L247bbe.  goto L247b7e;
  #L247bc0.  v15:= v12.`okio.Segment.limit` @type ^`int`;
  #L247bc4.  v0:= v12.`okio.Segment.pos` @type ^`int`;
  #L247bc8.  v16:= v0;
  #L247bcc.  v15:= v15 - v16 @kind int;
  #L247bd0.  v0:= (`long`) v15 @kind i2l;
  #L247bd2.  v16:= v0 @kind wide;
  #L247bd6.  v10:= v10 + v16 @kind long;
  #L247bda.  v20:= v10 @kind wide;
  #L247bde.  v12:= v12.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L247be2.  goto L247b4a;
  #L247be4.  v16:= -1L;
  #L247be8.  goto L247a18;
}
procedure `java.io.InputStream` `inputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.inputStream:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247bfc.  v0:= new `okio.Buffer$2`;
  #L247c00.  call `<init>`(v0, v1) @signature `Lokio/Buffer$2;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L247c06.  return v0 @kind object;
}
procedure `boolean` `isOpen`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247c18.  v0:= 1I;
  #L247c1a.  return v0;
}
procedure `okio.ByteString` `md5`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.md5:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247c2c.  v0:= "MD5" @kind object;
  #L247c30.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L247c36.  v0:= temp @kind object;
  #L247c38.  return v0 @kind object;
}
procedure `java.io.OutputStream` `outputStream`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.outputStream:()Ljava/io/OutputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247c4c.  v0:= new `okio.Buffer$1`;
  #L247c50.  call `<init>`(v0, v1) @signature `Lokio/Buffer$1;.<init>:(Lokio/Buffer;)V` @kind direct;
  #L247c56.  return v0 @kind object;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v7 @kind this, `long` v8 @name `offset`, `okio.ByteString` v10 @kind object @name `bytes`) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L247c68.  v5:= 0I;
  #L247c6a.  call temp:= `size`(v10) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L247c70.  v6:= temp;
  #L247c72.  v1:= v7 @kind object;
  #L247c74.  v2:= v8 @kind wide;
  #L247c76.  v4:= v10 @kind object;
  #L247c78.  call temp:= `rangeEquals`(v1, v2, v4, v5, v6) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @kind virtual;
  #L247c7e.  v0:= temp;
  #L247c80.  return v0;
}
procedure `boolean` `rangeEquals`(`okio.Buffer` v7 @kind this, `long` v8 @name `offset`, `okio.ByteString` v10 @kind object @name `bytes`, `int` v11 @name `bytesOffset`, `int` v12 @name `byteCount`) @signature `Lokio/Buffer;.rangeEquals:(JLokio/ByteString;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L247c94.  v1:= 0I;
  #L247c96.  v2:= 0L;
  #L247c9a.  v2:= lcmp(v8, v2);
  #L247c9e.  if v2 < 0 then goto L247cc8;
  #L247ca2.  if v11 < 0 then goto L247cc8;
  #L247ca6.  if v12 < 0 then goto L247cc8;
  #L247caa.  v2:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247cae.  v2:= v2 - v8 @kind long;
  #L247cb0.  v4:= (`long`) v12 @kind i2l;
  #L247cb2.  v2:= lcmp(v2, v4);
  #L247cb6.  if v2 < 0 then goto L247cc8;
  #L247cba.  call temp:= `size`(v10) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L247cc0.  v2:= temp;
  #L247cc2.  v2:= v2 - v11 @kind int;
  #L247cc4.  if v2 >= v12 then goto L247cca;
  #L247cc8.  return v1;
  #L247cca.  v0:= 0I;
  #L247ccc.  if v0 >= v12 then goto L247cf2;
  #L247cd0.  v2:= (`long`) v0 @kind i2l;
  #L247cd2.  v2:= v2 + v8 @kind long;
  #L247cd4.  call temp:= `getByte`(v7, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L247cda.  v2:= temp;
  #L247cdc.  v3:= v11 + v0 @kind int;
  #L247ce0.  call temp:= `getByte`(v10, v3) @signature `Lokio/ByteString;.getByte:(I)B` @kind virtual;
  #L247ce6.  v3:= temp;
  #L247ce8.  if v2 != v3 then goto L247cc8;
  #L247cec.  v0:= v0 + 1;
  #L247cf0.  goto L247ccc;
  #L247cf2.  v1:= 1I;
  #L247cf4.  goto L247cc8;
}
procedure `int` `read`(`okio.Buffer` v6 @kind this, `java.nio.ByteBuffer` v7 @kind object @name `sink`) @signature `Lokio/Buffer;.read:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L247d08.  v0:= v6.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247d0c.  if v0 != 0 then goto L247d14;
  #L247d10.  v1:= -1I;
  #L247d12.  return v1;
  #L247d14.  call temp:= `remaining`(v7) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L247d1a.  v2:= temp;
  #L247d1c.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L247d20.  v4:= v0.`okio.Segment.pos` @type ^`int`;
  #L247d24.  v3:= v3 - v4 @kind int;
  #L247d26.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L247d2c.  v1:= temp;
  #L247d2e.  v2:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247d32.  v3:= v0.`okio.Segment.pos` @type ^`int`;
  #L247d36.  call temp:= `put`(v7, v2, v3, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L247d3c.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L247d40.  v2:= v2 + v1 @kind int;
  #L247d42.  v0.`okio.Segment.pos` @type ^`int` := v2;
  #L247d46.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247d4a.  v4:= (`long`) v1 @kind i2l;
  #L247d4c.  v2:= v2 - v4 @kind long;
  #L247d4e.  v6.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L247d52.  v2:= v0.`okio.Segment.pos` @type ^`int`;
  #L247d56.  v3:= v0.`okio.Segment.limit` @type ^`int`;
  #L247d5a.  if v2 != v3 then goto L247d12;
  #L247d5e.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L247d64.  v2:= temp @kind object;
  #L247d66.  v6.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L247d6a.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L247d70.  goto L247d12;
}
procedure `int` `read`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object @name `sink`) @signature `Lokio/Buffer;.read:([B)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L247d84.  v0:= 0I;
  #L247d86.  v1:= length @variable v3;
  #L247d88.  call temp:= `read`(v2, v3, v0, v1) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L247d8e.  v0:= temp;
  #L247d90.  return v0;
}
procedure `int` `read`(`okio.Buffer` v8 @kind this, `byte`[] v9 @kind object @name `sink`, `int` v10 @name `offset`, `int` v11 @name `byteCount`) @signature `Lokio/Buffer;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L247da4.  v0:= length @variable v9;
  #L247da6.  v0:= (`long`) v0 @kind i2l;
  #L247da8.  v2:= (`long`) v10 @kind i2l;
  #L247daa.  v4:= (`long`) v11 @kind i2l;
  #L247dac.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L247db2.  v6:= v8.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247db6.  if v6 != 0 then goto L247dbe;
  #L247dba.  v7:= -1I;
  #L247dbc.  return v7;
  #L247dbe.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L247dc2.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L247dc6.  v0:= v0 - v1 @kind int;
  #L247dc8.  call temp:= `min`(v11, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L247dce.  v7:= temp;
  #L247dd0.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247dd4.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L247dd8.  call `arraycopy`(v0, v1, v9, v10, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L247dde.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L247de2.  v0:= v0 + v7 @kind int;
  #L247de4.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L247de8.  v0:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247dec.  v2:= (`long`) v7 @kind i2l;
  #L247dee.  v0:= v0 - v2 @kind long;
  #L247df0.  v8.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L247df4.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L247df8.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L247dfc.  if v0 != v1 then goto L247dbc;
  #L247e00.  call temp:= `pop`(v6) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L247e06.  v0:= temp @kind object;
  #L247e08.  v8.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L247e0c.  call `recycle`(v6) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L247e12.  goto L247dbc;
}
procedure `long` `read`(`okio.Buffer` v4 @kind this, `okio.Buffer` v5 @kind object @name `sink`, `long` v6 @name `byteCount`) @signature `Lokio/Buffer;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L247e24.  v2:= 0L;
  #L247e28.  if v5 != 0 then goto L247e3c;
  #L247e2c.  v0:= new `java.lang.IllegalArgumentException`;
  #L247e30.  v1:= "sink == null" @kind object;
  #L247e34.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247e3a.  throw v0;
  #L247e3c.  v0:= lcmp(v6, v2);
  #L247e40.  if v0 >= 0 then goto L247e76;
  #L247e44.  v0:= new `java.lang.IllegalArgumentException`;
  #L247e48.  v1:= new `java.lang.StringBuilder`;
  #L247e4c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L247e52.  v2:= "byteCount < 0: " @kind object;
  #L247e56.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L247e5c.  v1:= temp @kind object;
  #L247e5e.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L247e64.  v1:= temp @kind object;
  #L247e66.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L247e6c.  v1:= temp @kind object;
  #L247e6e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247e74.  throw v0;
  #L247e76.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247e7a.  v0:= lcmp(v0, v2);
  #L247e7e.  if v0 != 0 then goto L247e88;
  #L247e82.  v0:= -1L;
  #L247e86.  return v0 @kind wide;
  #L247e88.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247e8c.  v0:= lcmp(v6, v0);
  #L247e90.  if v0 <= 0 then goto L247e98;
  #L247e94.  v6:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247e98.  call `write`(v5, v4, v6) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L247e9e.  v0:= v6 @kind wide;
  #L247ea0.  goto L247e86;
}
procedure `long` `readAll`(`okio.Buffer` v4 @kind this, `okio.Sink` v5 @kind object @name `sink`) @signature `Lokio/Buffer;.readAll:(Lokio/Sink;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L247eb4.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247eb8.  v2:= 0L;
  #L247ebc.  v2:= lcmp(v0, v2);
  #L247ec0.  if v2 <= 0 then goto L247eca;
  #L247ec4.  call `write`(v5, v4, v0) @signature `Lokio/Sink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L247eca.  return v0 @kind wide;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readAndWriteUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L247edc.  v0:= new `okio.Buffer$UnsafeCursor`;
  #L247ee0.  call `<init>`(v0) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L247ee6.  call temp:= `readAndWriteUnsafe`(v1, v0) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L247eec.  v0:= temp @kind object;
  #L247eee.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readAndWriteUnsafe`(`okio.Buffer` v2 @kind this, `okio.Buffer$UnsafeCursor` v3 @kind object @name `unsafeCursor`) @signature `Lokio/Buffer;.readAndWriteUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L247f00.  v0:= v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L247f04.  if v0 == 0 then goto L247f18;
  #L247f08.  v0:= new `java.lang.IllegalStateException`;
  #L247f0c.  v1:= "already attached to a buffer" @kind object;
  #L247f10.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247f16.  throw v0;
  #L247f18.  v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v2 @kind object;
  #L247f1c.  v0:= 1I;
  #L247f1e.  v3.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v0 @kind boolean;
  #L247f22.  return v3 @kind object;
}
procedure `byte` `readByte`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readByte:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L247f34.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247f38.  v8:= 0L;
  #L247f3c.  v6:= lcmp(v6, v8);
  #L247f40.  if v6 != 0 then goto L247f54;
  #L247f44.  v6:= new `java.lang.IllegalStateException`;
  #L247f48.  v7:= "size == 0" @kind object;
  #L247f4c.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L247f52.  throw v6;
  #L247f54.  v5:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L247f58.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L247f5c.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L247f60.  v1:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L247f64.  v4:= v3 + 1;
  #L247f68.  v0:= v1[v3] @kind byte;
  #L247f6c.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247f70.  v8:= 1L;
  #L247f74.  v6:= v6 - v8 @kind long;
  #L247f76.  v10.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L247f7a.  if v4 != v2 then goto L247f92;
  #L247f7e.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L247f84.  v6:= temp @kind object;
  #L247f86.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L247f8a.  call `recycle`(v5) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L247f90.  return v0;
  #L247f92.  v5.`okio.Segment.pos` @type ^`int` := v4;
  #L247f96.  goto L247f90;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.readByteArray:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L247fa8.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247fac.  call temp:= `readByteArray`(v4, v2) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #Try_end0.  
  #L247fb2.  v1:= temp @kind object;
  #L247fb4.  return v1 @kind object;
  #L247fb6.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L247fb8.  v1:= new `java.lang.AssertionError`;
  #L247fbc.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L247fc2.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L247fb6;
}
procedure `byte`[] `readByteArray`(`okio.Buffer` v7 @kind this, `long` v8 @name `byteCount`) @signature `Lokio/Buffer;.readByteArray:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L247fe4.  v0:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L247fe8.  v2:= 0L;
  #L247fec.  v4:= v8 @kind wide;
  #L247fee.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L247ff4.  v0:= 2147483647L;
  #L247ffa.  v0:= lcmp(v8, v0);
  #L247ffe.  if v0 <= 0 then goto L248034;
  #L248002.  v0:= new `java.lang.IllegalArgumentException`;
  #L248006.  v1:= new `java.lang.StringBuilder`;
  #L24800a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248010.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L248014.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24801a.  v1:= temp @kind object;
  #L24801c.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L248022.  v1:= temp @kind object;
  #L248024.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24802a.  v1:= temp @kind object;
  #L24802c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248032.  throw v0;
  #L248034.  v0:= (`int`) v8 @kind l2i;
  #L248036.  v6:= new `byte`[v0];
  #L24803a.  call `readFully`(v7, v6) @signature `Lokio/Buffer;.readFully:([B)V` @kind virtual;
  #L248040.  return v6 @kind object;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248054.  v0:= new `okio.ByteString`;
  #L248058.  call temp:= `readByteArray`(v2) @signature `Lokio/Buffer;.readByteArray:()[B` @kind virtual;
  #L24805e.  v1:= temp @kind object;
  #L248060.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L248066.  return v0 @kind object;
}
procedure `okio.ByteString` `readByteString`(`okio.Buffer` v3 @kind this, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.readByteString:(J)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L248078.  v0:= new `okio.ByteString`;
  #L24807c.  call temp:= `readByteArray`(v3, v4) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L248082.  v1:= temp @kind object;
  #L248084.  call `<init>`(v0, v1) @signature `Lokio/ByteString;.<init>:([B)V` @kind direct;
  #L24808a.  return v0 @kind object;
}
procedure `long` `readDecimalLong`(`okio.Buffer` v24 @kind this) @signature `Lokio/Buffer;.readDecimalLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;
    v23;

  #L24809c.  v0:= v24 @kind object;
  #L2480a0.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2480a4.  v20:= v0 @kind wide;
  #L2480a8.  v22:= 0L;
  #L2480ac.  v20:= lcmp(v20, v22);
  #L2480b0.  if v20 != 0 then goto L2480c4;
  #L2480b4.  v20:= new `java.lang.IllegalStateException`;
  #L2480b8.  v21:= "size == 0" @kind object;
  #L2480bc.  call `<init>`(v20, v21) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2480c2.  throw v20;
  #L2480c4.  v18:= 0L;
  #L2480c8.  v16:= 0I;
  #L2480cc.  v10:= 0I;
  #L2480ce.  v8:= 0I;
  #L2480d0.  v14:= -922337203685477580L;
  #L2480da.  v12:= -7L;
  #L2480de.  v0:= v24 @kind object;
  #L2480e2.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2480e6.  v17:= v0 @kind object;
  #L2480ea.  v0:= v17 @kind object;
  #L2480ee.  v6:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2480f2.  v0:= v17 @kind object;
  #L2480f6.  v11:= v0.`okio.Segment.pos` @type ^`int`;
  #L2480fa.  v0:= v17 @kind object;
  #L2480fe.  v9:= v0.`okio.Segment.limit` @type ^`int`;
  #L248102.  if v11 >= v9 then goto L248226;
  #L248106.  v4:= v6[v11] @kind byte;
  #L24810a.  v20:= 48I;
  #L24810e.  v0:= v20;
  #L248112.  if v4 < v0 then goto L2481ca;
  #L248116.  v20:= 57I;
  #L24811a.  v0:= v20;
  #L24811e.  if v4 > v0 then goto L2481ca;
  #L248122.  v7:= v4 - 48;
  #L248126.  v20:= lcmp(v18, v14);
  #L24812a.  if v20 < 0 then goto L248144;
  #L24812e.  v20:= lcmp(v18, v14);
  #L248132.  if v20 != 0 then goto L2481ae;
  #L248136.  v0:= (`long`) v7 @kind i2l;
  #L248138.  v20:= v0 @kind wide;
  #L24813c.  v20:= lcmp(v20, v12);
  #L248140.  if v20 >= 0 then goto L2481ae;
  #L248144.  v20:= new `okio.Buffer`;
  #L248148.  call `<init>`(v20) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L24814e.  v0:= v20 @kind object;
  #L248152.  v1:= v18 @kind wide;
  #L248156.  call temp:= `writeDecimalLong`(v0, v1) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L24815c.  v20:= temp @kind object;
  #L24815e.  v0:= v20 @kind object;
  #L248162.  call temp:= `writeByte`(v0, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248168.  v5:= temp @kind object;
  #L24816a.  if v10 != 0 then goto L248174;
  #L24816e.  call temp:= `readByte`(v5) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L248174.  v20:= new `java.lang.NumberFormatException`;
  #L248178.  v21:= new `java.lang.StringBuilder`;
  #L24817c.  call `<init>`(v21) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248182.  v22:= "Number too large: " @kind object;
  #L248186.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24818c.  v21:= temp @kind object;
  #L24818e.  call temp:= `readUtf8`(v5) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L248194.  v22:= temp @kind object;
  #L248196.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24819c.  v21:= temp @kind object;
  #L24819e.  call temp:= `toString`(v21) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2481a4.  v21:= temp @kind object;
  #L2481a6.  call `<init>`(v20, v21) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2481ac.  throw v20;
  #L2481ae.  v20:= 10L;
  #L2481b2.  v18:= v18 * v20 @kind long;
  #L2481b6.  v0:= (`long`) v7 @kind i2l;
  #L2481b8.  v20:= v0 @kind wide;
  #L2481bc.  v18:= v18 + v20 @kind long;
  #L2481c0.  v11:= v11 + 1;
  #L2481c4.  v16:= v16 + 1;
  #L2481c8.  goto L248102;
  #L2481ca.  v20:= 45I;
  #L2481ce.  v0:= v20;
  #L2481d2.  if v4 != v0 then goto L2481e6;
  #L2481d6.  if v16 != 0 then goto L2481e6;
  #L2481da.  v10:= 1I;
  #L2481dc.  v20:= 1L;
  #L2481e0.  v12:= v12 - v20 @kind long;
  #L2481e4.  goto L2481c0;
  #L2481e6.  if v16 != 0 then goto L248224;
  #L2481ea.  v20:= new `java.lang.NumberFormatException`;
  #L2481ee.  v21:= new `java.lang.StringBuilder`;
  #L2481f2.  call `<init>`(v21) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2481f8.  v22:= "Expected leading [0-9] or '-' character but was 0x" @kind object;
  #L2481fc.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248202.  v21:= temp @kind object;
  #L248204.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L24820a.  v22:= temp @kind object;
  #L24820c.  call temp:= `append`(v21, v22) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248212.  v21:= temp @kind object;
  #L248214.  call temp:= `toString`(v21) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24821a.  v21:= temp @kind object;
  #L24821c.  call `<init>`(v20, v21) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248222.  throw v20;
  #L248224.  v8:= 1I;
  #L248226.  if v11 != v9 then goto L248284;
  #L24822a.  call temp:= `pop`(v17) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L248230.  v20:= temp @kind object;
  #L248232.  v0:= v20 @kind object;
  #L248236.  v1:= v24 @kind object;
  #L24823a.  v1.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L24823e.  call `recycle`(v17) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L248244.  if v8 != 0 then goto L248258;
  #L248248.  v0:= v24 @kind object;
  #L24824c.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248250.  v20:= v0 @kind object;
  #L248254.  if v20 != 0 then goto L2480de;
  #L248258.  v0:= v24 @kind object;
  #L24825c.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248260.  v20:= v0 @kind wide;
  #L248264.  v0:= v16;
  #L248268.  v0:= (`long`) v0 @kind i2l;
  #L24826a.  v22:= v0 @kind wide;
  #L24826e.  v20:= v20 - v22 @kind long;
  #L248272.  v0:= v20 @kind wide;
  #L248276.  v2:= v24 @kind object;
  #L24827a.  v2.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24827e.  if v10 == 0 then goto L24828e;
  #L248282.  return v18 @kind wide;
  #L248284.  v0:= v17 @kind object;
  #L248288.  v0.`okio.Segment.pos` @type ^`int` := v11;
  #L24828c.  goto L248244;
  #L24828e.  v0:= v18 @kind wide;
  #L248292.  v0:= -v0 @kind long;
  #L248294.  v18:= v0 @kind wide;
  #L248298.  goto L248282;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v3 @kind this, `java.io.InputStream` v4 @kind object @name `in`) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L2482ac.  v0:= 9223372036854775807L;
  #L2482b6.  v2:= 1I;
  #L2482b8.  call `readFrom`(v3, v4, v0, v2) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L2482be.  return v3 @kind object;
}
procedure `okio.Buffer` `readFrom`(`okio.Buffer` v4 @kind this, `java.io.InputStream` v5 @kind object @name `in`, `long` v6 @name `byteCount`) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2482d0.  v0:= 0L;
  #L2482d4.  v0:= lcmp(v6, v0);
  #L2482d8.  if v0 >= 0 then goto L24830e;
  #L2482dc.  v0:= new `java.lang.IllegalArgumentException`;
  #L2482e0.  v1:= new `java.lang.StringBuilder`;
  #L2482e4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2482ea.  v2:= "byteCount < 0: " @kind object;
  #L2482ee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2482f4.  v1:= temp @kind object;
  #L2482f6.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2482fc.  v1:= temp @kind object;
  #L2482fe.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248304.  v1:= temp @kind object;
  #L248306.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24830c.  throw v0;
  #L24830e.  v0:= 0I;
  #L248310.  call `readFrom`(v4, v5, v6, v0) @signature `Lokio/Buffer;.readFrom:(Ljava/io/InputStream;JZ)V` @kind direct;
  #L248316.  return v4 @kind object;
}
procedure `void` `readFully`(`okio.Buffer` v2 @kind this, `okio.Buffer` v3 @kind object @name `sink`, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.readFully:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248328.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24832c.  v0:= lcmp(v0, v4);
  #L248330.  if v0 >= 0 then goto L24834a;
  #L248334.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248338.  call `write`(v3, v2, v0) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L24833e.  v0:= new `java.io.EOFException`;
  #L248342.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L248348.  throw v0;
  #L24834a.  call `write`(v3, v2, v4) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @kind virtual;
  #L248350.  return @kind void;
}
procedure `void` `readFully`(`okio.Buffer` v3 @kind this, `byte`[] v4 @kind object @name `sink`) @signature `Lokio/Buffer;.readFully:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L248364.  v0:= 0I;
  #L248366.  v2:= length @variable v4;
  #L248368.  if v0 >= v2 then goto L24838e;
  #L24836c.  v2:= length @variable v4;
  #L24836e.  v2:= v2 - v0 @kind int;
  #L248370.  call temp:= `read`(v3, v4, v0, v2) @signature `Lokio/Buffer;.read:([BII)I` @kind virtual;
  #L248376.  v1:= temp;
  #L248378.  v2:= -1I;
  #L24837a.  if v1 != v2 then goto L24838a;
  #L24837e.  v2:= new `java.io.EOFException`;
  #L248382.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L248388.  throw v2;
  #L24838a.  v0:= v0 + v1 @kind int;
  #L24838c.  goto L248366;
  #L24838e.  return @kind void;
}
procedure `long` `readHexadecimalUnsignedLong`(`okio.Buffer` v18 @kind this) @signature `Lokio/Buffer;.readHexadecimalUnsignedLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L2483a0.  v0:= v18 @kind object;
  #L2483a4.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2483a8.  v16:= 0L;
  #L2483ac.  v11:= lcmp(v14, v16);
  #L2483b0.  if v11 != 0 then goto L2483c4;
  #L2483b4.  v11:= new `java.lang.IllegalStateException`;
  #L2483b8.  v14:= "size == 0" @kind object;
  #L2483bc.  call `<init>`(v11, v14) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2483c2.  throw v11;
  #L2483c4.  v12:= 0L;
  #L2483c8.  v9:= 0I;
  #L2483ca.  v6:= 0I;
  #L2483cc.  v0:= v18 @kind object;
  #L2483d0.  v10:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2483d4.  v4:= v10.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2483d8.  v8:= v10.`okio.Segment.pos` @type ^`int`;
  #L2483dc.  v7:= v10.`okio.Segment.limit` @type ^`int`;
  #L2483e0.  if v8 >= v7 then goto L2484d6;
  #L2483e4.  v2:= v4[v8] @kind byte;
  #L2483e8.  v11:= 48I;
  #L2483ec.  if v2 < v11 then goto L248462;
  #L2483f0.  v11:= 57I;
  #L2483f4.  if v2 > v11 then goto L248462;
  #L2483f8.  v5:= v2 + -48;
  #L2483fc.  v14:= -3.105036184601418E231D;
  #L248400.  v14:= v14 ^& v12 @kind long;
  #L248402.  v16:= 0L;
  #L248406.  v11:= lcmp(v14, v16);
  #L24840a.  if v11 == 0 then goto L24851c;
  #L24840e.  v11:= new `okio.Buffer`;
  #L248412.  call `<init>`(v11) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L248418.  call temp:= `writeHexadecimalUnsignedLong`(v11, v12) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L24841e.  v11:= temp @kind object;
  #L248420.  call temp:= `writeByte`(v11, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L248426.  v3:= temp @kind object;
  #L248428.  v11:= new `java.lang.NumberFormatException`;
  #L24842c.  v14:= new `java.lang.StringBuilder`;
  #L248430.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248436.  v15:= "Number too large: " @kind object;
  #L24843a.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248440.  v14:= temp @kind object;
  #L248442.  call temp:= `readUtf8`(v3) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @kind virtual;
  #L248448.  v15:= temp @kind object;
  #L24844a.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248450.  v14:= temp @kind object;
  #L248452.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248458.  v14:= temp @kind object;
  #L24845a.  call `<init>`(v11, v14) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248460.  throw v11;
  #L248462.  v11:= 97I;
  #L248466.  if v2 < v11 then goto L24847c;
  #L24846a.  v11:= 102I;
  #L24846e.  if v2 > v11 then goto L24847c;
  #L248472.  v11:= v2 + -97;
  #L248476.  v5:= v11 + 10;
  #L24847a.  goto L2483fc;
  #L24847c.  v11:= 65I;
  #L248480.  if v2 < v11 then goto L248496;
  #L248484.  v11:= 70I;
  #L248488.  if v2 > v11 then goto L248496;
  #L24848c.  v11:= v2 + -65;
  #L248490.  v5:= v11 + 10;
  #L248494.  goto L2483fc;
  #L248496.  if v9 != 0 then goto L2484d4;
  #L24849a.  v11:= new `java.lang.NumberFormatException`;
  #L24849e.  v14:= new `java.lang.StringBuilder`;
  #L2484a2.  call `<init>`(v14) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2484a8.  v15:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L2484ac.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2484b2.  v14:= temp @kind object;
  #L2484b4.  call temp:= `toHexString`(v2) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L2484ba.  v15:= temp @kind object;
  #L2484bc.  call temp:= `append`(v14, v15) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2484c2.  v14:= temp @kind object;
  #L2484c4.  call temp:= `toString`(v14) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2484ca.  v14:= temp @kind object;
  #L2484cc.  call `<init>`(v11, v14) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2484d2.  throw v11;
  #L2484d4.  v6:= 1I;
  #L2484d6.  if v8 != v7 then goto L248530;
  #L2484da.  call temp:= `pop`(v10) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L2484e0.  v11:= temp @kind object;
  #L2484e2.  v0:= v18 @kind object;
  #L2484e6.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v11 @kind object;
  #L2484ea.  call `recycle`(v10) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L2484f0.  if v6 != 0 then goto L248500;
  #L2484f4.  v0:= v18 @kind object;
  #L2484f8.  v11:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2484fc.  if v11 != 0 then goto L2483cc;
  #L248500.  v0:= v18 @kind object;
  #L248504.  v14:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248508.  v0:= (`long`) v9 @kind i2l;
  #L24850a.  v16:= v0 @kind wide;
  #L24850e.  v14:= v14 - v16 @kind long;
  #L248512.  v0:= v18 @kind object;
  #L248516.  v0.`okio.Buffer.size` @type ^`long` := v14 @kind wide;
  #L24851a.  return v12 @kind wide;
  #L24851c.  v11:= 4I;
  #L24851e.  v12:= v12 ^< v11 @kind long;
  #L248520.  v14:= (`long`) v5 @kind i2l;
  #L248522.  v12:= v12 ^| v14 @kind long;
  #L248524.  v8:= v8 + 1;
  #L248528.  v9:= v9 + 1;
  #L24852c.  goto L2483e0;
  #L248530.  v10.`okio.Segment.pos` @type ^`int` := v8;
  #L248534.  goto L2484f0;
}
procedure `int` `readInt`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readInt:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L248548.  v8:= 4L;
  #L24854c.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248550.  v6:= lcmp(v6, v8);
  #L248554.  if v6 >= 0 then goto L24858e;
  #L248558.  v6:= new `java.lang.IllegalStateException`;
  #L24855c.  v7:= new `java.lang.StringBuilder`;
  #L248560.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248566.  v8:= "size < 4: " @kind object;
  #L24856a.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248570.  v7:= temp @kind object;
  #L248572.  v8:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248576.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24857c.  v7:= temp @kind object;
  #L24857e.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248584.  v7:= temp @kind object;
  #L248586.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24858c.  throw v6;
  #L24858e.  v5:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248592.  v3:= v5.`okio.Segment.pos` @type ^`int`;
  #L248596.  v2:= v5.`okio.Segment.limit` @type ^`int`;
  #L24859a.  v6:= v2 - v3 @kind int;
  #L24859e.  v7:= 4I;
  #L2485a0.  if v6 >= v7 then goto L2485ea;
  #L2485a4.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2485aa.  v6:= temp;
  #L2485ac.  v6:= v6 ^& 255;
  #L2485b0.  v6:= v6 ^< 24;
  #L2485b4.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2485ba.  v7:= temp;
  #L2485bc.  v7:= v7 ^& 255;
  #L2485c0.  v7:= v7 ^< 16;
  #L2485c4.  v6:= v6 ^| v7 @kind int;
  #L2485c6.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2485cc.  v7:= temp;
  #L2485ce.  v7:= v7 ^& 255;
  #L2485d2.  v7:= v7 ^< 8;
  #L2485d6.  v6:= v6 ^| v7 @kind int;
  #L2485d8.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2485de.  v7:= temp;
  #L2485e0.  v7:= v7 ^& 255;
  #L2485e4.  v1:= v6 ^| v7 @kind int;
  #L2485e8.  return v1;
  #L2485ea.  v0:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2485ee.  v4:= v3 + 1;
  #L2485f2.  v6:= v0[v3] @kind byte;
  #L2485f6.  v6:= v6 ^& 255;
  #L2485fa.  v6:= v6 ^< 24;
  #L2485fe.  v3:= v4 + 1;
  #L248602.  v7:= v0[v4] @kind byte;
  #L248606.  v7:= v7 ^& 255;
  #L24860a.  v7:= v7 ^< 16;
  #L24860e.  v6:= v6 ^| v7 @kind int;
  #L248610.  v4:= v3 + 1;
  #L248614.  v7:= v0[v3] @kind byte;
  #L248618.  v7:= v7 ^& 255;
  #L24861c.  v7:= v7 ^< 8;
  #L248620.  v6:= v6 ^| v7 @kind int;
  #L248622.  v3:= v4 + 1;
  #L248626.  v7:= v0[v4] @kind byte;
  #L24862a.  v7:= v7 ^& 255;
  #L24862e.  v1:= v6 ^| v7 @kind int;
  #L248632.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248636.  v6:= v6 - v8 @kind long;
  #L248638.  v10.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L24863c.  if v3 != v2 then goto L248654;
  #L248640.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L248646.  v6:= temp @kind object;
  #L248648.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L24864c.  call `recycle`(v5) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L248652.  goto L2485e8;
  #L248654.  v5.`okio.Segment.pos` @type ^`int` := v3;
  #L248658.  goto L2485e8;
}
procedure `int` `readIntLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readIntLe:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L24866c.  call temp:= `readInt`(v1) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L248672.  v0:= temp;
  #L248674.  call temp:= `reverseBytesInt`(v0) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L24867a.  v0:= temp;
  #L24867c.  return v0;
}
procedure `long` `readLong`(`okio.Buffer` v14 @kind this) @signature `Lokio/Buffer;.readLong:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L248690.  v8:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248694.  v10:= 8L;
  #L248698.  v5:= lcmp(v8, v10);
  #L24869c.  if v5 >= 0 then goto L2486d6;
  #L2486a0.  v5:= new `java.lang.IllegalStateException`;
  #L2486a4.  v8:= new `java.lang.StringBuilder`;
  #L2486a8.  call `<init>`(v8) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2486ae.  v9:= "size < 8: " @kind object;
  #L2486b2.  call temp:= `append`(v8, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2486b8.  v8:= temp @kind object;
  #L2486ba.  v10:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2486be.  call temp:= `append`(v8, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L2486c4.  v8:= temp @kind object;
  #L2486c6.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2486cc.  v8:= temp @kind object;
  #L2486ce.  call `<init>`(v5, v8) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2486d4.  throw v5;
  #L2486d6.  v4:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2486da.  v2:= v4.`okio.Segment.pos` @type ^`int`;
  #L2486de.  v1:= v4.`okio.Segment.limit` @type ^`int`;
  #L2486e2.  v5:= v1 - v2 @kind int;
  #L2486e6.  v8:= 8I;
  #L2486ea.  if v5 >= v8 then goto L248726;
  #L2486ee.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L2486f4.  v5:= temp;
  #L2486f6.  v8:= (`long`) v5 @kind i2l;
  #L2486f8.  v10:= 4294967295L;
  #L248702.  v8:= v8 ^& v10 @kind long;
  #L248704.  v5:= 32I;
  #L248708.  v8:= v8 ^< v5 @kind long;
  #L24870a.  call temp:= `readInt`(v14) @signature `Lokio/Buffer;.readInt:()I` @kind virtual;
  #L248710.  v5:= temp;
  #L248712.  v10:= (`long`) v5 @kind i2l;
  #L248714.  v12:= 4294967295L;
  #L24871e.  v10:= v10 ^& v12 @kind long;
  #L248720.  v6:= v8 ^| v10 @kind long;
  #L248724.  return v6 @kind wide;
  #L248726.  v0:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24872a.  v3:= v2 + 1;
  #L24872e.  v5:= v0[v2] @kind byte;
  #L248732.  v8:= (`long`) v5 @kind i2l;
  #L248734.  v10:= 255L;
  #L248738.  v8:= v8 ^& v10 @kind long;
  #L24873a.  v5:= 56I;
  #L24873e.  v8:= v8 ^< v5 @kind long;
  #L248740.  v2:= v3 + 1;
  #L248744.  v5:= v0[v3] @kind byte;
  #L248748.  v10:= (`long`) v5 @kind i2l;
  #L24874a.  v12:= 255L;
  #L24874e.  v10:= v10 ^& v12 @kind long;
  #L248750.  v5:= 48I;
  #L248754.  v10:= v10 ^< v5 @kind long;
  #L248756.  v8:= v8 ^| v10 @kind long;
  #L248758.  v3:= v2 + 1;
  #L24875c.  v5:= v0[v2] @kind byte;
  #L248760.  v10:= (`long`) v5 @kind i2l;
  #L248762.  v12:= 255L;
  #L248766.  v10:= v10 ^& v12 @kind long;
  #L248768.  v5:= 40I;
  #L24876c.  v10:= v10 ^< v5 @kind long;
  #L24876e.  v8:= v8 ^| v10 @kind long;
  #L248770.  v2:= v3 + 1;
  #L248774.  v5:= v0[v3] @kind byte;
  #L248778.  v10:= (`long`) v5 @kind i2l;
  #L24877a.  v12:= 255L;
  #L24877e.  v10:= v10 ^& v12 @kind long;
  #L248780.  v5:= 32I;
  #L248784.  v10:= v10 ^< v5 @kind long;
  #L248786.  v8:= v8 ^| v10 @kind long;
  #L248788.  v3:= v2 + 1;
  #L24878c.  v5:= v0[v2] @kind byte;
  #L248790.  v10:= (`long`) v5 @kind i2l;
  #L248792.  v12:= 255L;
  #L248796.  v10:= v10 ^& v12 @kind long;
  #L248798.  v5:= 24I;
  #L24879c.  v10:= v10 ^< v5 @kind long;
  #L24879e.  v8:= v8 ^| v10 @kind long;
  #L2487a0.  v2:= v3 + 1;
  #L2487a4.  v5:= v0[v3] @kind byte;
  #L2487a8.  v10:= (`long`) v5 @kind i2l;
  #L2487aa.  v12:= 255L;
  #L2487ae.  v10:= v10 ^& v12 @kind long;
  #L2487b0.  v5:= 16I;
  #L2487b4.  v10:= v10 ^< v5 @kind long;
  #L2487b6.  v8:= v8 ^| v10 @kind long;
  #L2487b8.  v3:= v2 + 1;
  #L2487bc.  v5:= v0[v2] @kind byte;
  #L2487c0.  v10:= (`long`) v5 @kind i2l;
  #L2487c2.  v12:= 255L;
  #L2487c6.  v10:= v10 ^& v12 @kind long;
  #L2487c8.  v5:= 8I;
  #L2487cc.  v10:= v10 ^< v5 @kind long;
  #L2487ce.  v8:= v8 ^| v10 @kind long;
  #L2487d0.  v2:= v3 + 1;
  #L2487d4.  v5:= v0[v3] @kind byte;
  #L2487d8.  v10:= (`long`) v5 @kind i2l;
  #L2487da.  v12:= 255L;
  #L2487de.  v10:= v10 ^& v12 @kind long;
  #L2487e0.  v6:= v8 ^| v10 @kind long;
  #L2487e4.  v8:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2487e8.  v10:= 8L;
  #L2487ec.  v8:= v8 - v10 @kind long;
  #L2487ee.  v14.`okio.Buffer.size` @type ^`long` := v8 @kind wide;
  #L2487f2.  if v2 != v1 then goto L24880a;
  #L2487f6.  call temp:= `pop`(v4) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L2487fc.  v5:= temp @kind object;
  #L2487fe.  v14.`okio.Buffer.head` @type ^`okio.Segment` := v5 @kind object;
  #L248802.  call `recycle`(v4) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L248808.  goto L248724;
  #L24880a.  v4.`okio.Segment.pos` @type ^`int` := v2;
  #L24880e.  goto L248724;
}
procedure `long` `readLongLe`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readLongLe:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248820.  call temp:= `readLong`(v2) @signature `Lokio/Buffer;.readLong:()J` @kind virtual;
  #L248826.  v0:= temp @kind wide;
  #L248828.  call temp:= `reverseBytesLong`(v0) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L24882e.  v0:= temp @kind wide;
  #L248830.  return v0 @kind wide;
}
procedure `short` `readShort`(`okio.Buffer` v10 @kind this) @signature `Lokio/Buffer;.readShort:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L248844.  v8:= 2L;
  #L248848.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24884c.  v6:= lcmp(v6, v8);
  #L248850.  if v6 >= 0 then goto L24888a;
  #L248854.  v6:= new `java.lang.IllegalStateException`;
  #L248858.  v7:= new `java.lang.StringBuilder`;
  #L24885c.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248862.  v8:= "size < 2: " @kind object;
  #L248866.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24886c.  v7:= temp @kind object;
  #L24886e.  v8:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248872.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L248878.  v7:= temp @kind object;
  #L24887a.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248880.  v7:= temp @kind object;
  #L248882.  call `<init>`(v6, v7) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248888.  throw v6;
  #L24888a.  v5:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24888e.  v2:= v5.`okio.Segment.pos` @type ^`int`;
  #L248892.  v1:= v5.`okio.Segment.limit` @type ^`int`;
  #L248896.  v6:= v1 - v2 @kind int;
  #L24889a.  v7:= 2I;
  #L24889c.  if v6 >= v7 then goto L2488c4;
  #L2488a0.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2488a6.  v6:= temp;
  #L2488a8.  v6:= v6 ^& 255;
  #L2488ac.  v6:= v6 ^< 8;
  #L2488b0.  call temp:= `readByte`(v10) @signature `Lokio/Buffer;.readByte:()B` @kind virtual;
  #L2488b6.  v7:= temp;
  #L2488b8.  v7:= v7 ^& 255;
  #L2488bc.  v4:= v6 ^| v7 @kind int;
  #L2488c0.  v6:= (`short`) v4 @kind i2s;
  #L2488c2.  return v6;
  #L2488c4.  v0:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2488c8.  v3:= v2 + 1;
  #L2488cc.  v6:= v0[v2] @kind byte;
  #L2488d0.  v6:= v6 ^& 255;
  #L2488d4.  v6:= v6 ^< 8;
  #L2488d8.  v2:= v3 + 1;
  #L2488dc.  v7:= v0[v3] @kind byte;
  #L2488e0.  v7:= v7 ^& 255;
  #L2488e4.  v4:= v6 ^| v7 @kind int;
  #L2488e8.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2488ec.  v6:= v6 - v8 @kind long;
  #L2488ee.  v10.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L2488f2.  if v2 != v1 then goto L24890c;
  #L2488f6.  call temp:= `pop`(v5) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L2488fc.  v6:= temp @kind object;
  #L2488fe.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L248902.  call `recycle`(v5) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L248908.  v6:= (`short`) v4 @kind i2s;
  #L24890a.  goto L2488c2;
  #L24890c.  v5.`okio.Segment.pos` @type ^`int` := v2;
  #L248910.  goto L248908;
}
procedure `short` `readShortLe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readShortLe:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L248924.  call temp:= `readShort`(v1) @signature `Lokio/Buffer;.readShort:()S` @kind virtual;
  #L24892a.  v0:= temp;
  #L24892c.  call temp:= `reverseBytesShort`(v0) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L248932.  v0:= temp;
  #L248934.  return v0;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v9 @kind this, `long` v10 @name `byteCount`, `java.nio.charset.Charset` v12 @kind object @name `charset`) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L248948.  v2:= 0L;
  #L24894c.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248950.  v4:= v10 @kind wide;
  #L248952.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L248958.  if v12 != 0 then goto L24896c;
  #L24895c.  v0:= new `java.lang.IllegalArgumentException`;
  #L248960.  v1:= "charset == null" @kind object;
  #L248964.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24896a.  throw v0;
  #L24896c.  v0:= 2147483647L;
  #L248972.  v0:= lcmp(v10, v0);
  #L248976.  if v0 <= 0 then goto L2489ac;
  #L24897a.  v0:= new `java.lang.IllegalArgumentException`;
  #L24897e.  v1:= new `java.lang.StringBuilder`;
  #L248982.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248988.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L24898c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248992.  v1:= temp @kind object;
  #L248994.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24899a.  v1:= temp @kind object;
  #L24899c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2489a2.  v1:= temp @kind object;
  #L2489a4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2489aa.  throw v0;
  #L2489ac.  v0:= lcmp(v10, v2);
  #L2489b0.  if v0 != 0 then goto L2489ba;
  #L2489b4.  v6:= "" @kind object;
  #L2489b8.  return v6 @kind object;
  #L2489ba.  v7:= v9.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2489be.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L2489c2.  v0:= (`long`) v0 @kind i2l;
  #L2489c4.  v0:= v0 + v10 @kind long;
  #L2489c6.  v2:= v7.`okio.Segment.limit` @type ^`int`;
  #L2489ca.  v2:= (`long`) v2 @kind i2l;
  #L2489cc.  v0:= lcmp(v0, v2);
  #L2489d0.  if v0 <= 0 then goto L2489e8;
  #L2489d4.  v6:= new `java.lang.String`;
  #L2489d8.  call temp:= `readByteArray`(v9, v10) @signature `Lokio/Buffer;.readByteArray:(J)[B` @kind virtual;
  #L2489de.  v0:= temp @kind object;
  #L2489e0.  call `<init>`(v6, v0, v12) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L2489e6.  goto L2489b8;
  #L2489e8.  v6:= new `java.lang.String`;
  #L2489ec.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2489f0.  v1:= v7.`okio.Segment.pos` @type ^`int`;
  #L2489f4.  v2:= (`int`) v10 @kind l2i;
  #L2489f6.  call `<init>`(v6, v0, v1, v2, v12) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L2489fc.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L248a00.  v0:= (`long`) v0 @kind i2l;
  #L248a02.  v0:= v0 + v10 @kind long;
  #L248a04.  v0:= (`int`) v0 @kind l2i;
  #L248a06.  v7.`okio.Segment.pos` @type ^`int` := v0;
  #L248a0a.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248a0e.  v0:= v0 - v10 @kind long;
  #L248a10.  v9.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L248a14.  v0:= v7.`okio.Segment.pos` @type ^`int`;
  #L248a18.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L248a1c.  if v0 != v1 then goto L2489b8;
  #L248a20.  call temp:= `pop`(v7) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L248a26.  v0:= temp @kind object;
  #L248a28.  v9.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L248a2c.  call `recycle`(v7) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L248a32.  goto L2489b8;
}
procedure `java.lang.String` `readString`(`okio.Buffer` v4 @kind this, `java.nio.charset.Charset` v5 @kind object @name `charset`) @signature `Lokio/Buffer;.readString:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L248a44.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248a48.  call temp:= `readString`(v4, v2, v5) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L248a4e.  v1:= temp @kind object;
  #L248a50.  return v1 @kind object;
  #L248a52.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L248a54.  v1:= new `java.lang.AssertionError`;
  #L248a58.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L248a5e.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L248a52;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.readUnsafe:()Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L248a80.  v0:= new `okio.Buffer$UnsafeCursor`;
  #L248a84.  call `<init>`(v0) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @kind direct;
  #L248a8a.  call temp:= `readUnsafe`(v1, v0) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @kind virtual;
  #L248a90.  v0:= temp @kind object;
  #L248a92.  return v0 @kind object;
}
procedure `okio.Buffer$UnsafeCursor` `readUnsafe`(`okio.Buffer` v2 @kind this, `okio.Buffer$UnsafeCursor` v3 @kind object @name `unsafeCursor`) @signature `Lokio/Buffer;.readUnsafe:(Lokio/Buffer$UnsafeCursor;)Lokio/Buffer$UnsafeCursor;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248aa4.  v0:= v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L248aa8.  if v0 == 0 then goto L248abc;
  #L248aac.  v0:= new `java.lang.IllegalStateException`;
  #L248ab0.  v1:= "already attached to a buffer" @kind object;
  #L248ab4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248aba.  throw v0;
  #L248abc.  v3.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v2 @kind object;
  #L248ac0.  v0:= 0I;
  #L248ac2.  v3.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` := v0 @kind boolean;
  #L248ac6.  return v3 @kind object;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.readUtf8:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L248ad8.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248adc.  v1:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L248ae0.  call temp:= `readString`(v4, v2, v1) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L248ae6.  v1:= temp @kind object;
  #L248ae8.  return v1 @kind object;
  #L248aea.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L248aec.  v1:= new `java.lang.AssertionError`;
  #L248af0.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L248af6.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L248aea;
}
procedure `java.lang.String` `readUtf8`(`okio.Buffer` v1 @kind this, `long` v2 @name `byteCount`) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L248b18.  v0:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L248b1c.  call temp:= `readString`(v1, v2, v0) @signature `Lokio/Buffer;.readString:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L248b22.  v0:= temp @kind object;
  #L248b24.  return v0 @kind object;
}
procedure `int` `readUtf8CodePoint`(`okio.Buffer` v12 @kind this) @signature `Lokio/Buffer;.readUtf8CodePoint:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L248b38.  v10:= 0L;
  #L248b3c.  v6:= 65533I;
  #L248b42.  v8:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248b46.  v7:= lcmp(v8, v10);
  #L248b4a.  if v7 != 0 then goto L248b5a;
  #L248b4e.  v6:= new `java.io.EOFException`;
  #L248b52.  call `<init>`(v6) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L248b58.  throw v6;
  #L248b5a.  call temp:= `getByte`(v12, v10) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L248b60.  v1:= temp;
  #L248b62.  v7:= v1 ^& 128;
  #L248b66.  if v7 != 0 then goto L248bf2;
  #L248b6a.  v3:= v1 ^& 127;
  #L248b6e.  v2:= 1I;
  #L248b70.  v5:= 0I;
  #L248b72.  v8:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248b76.  v10:= (`long`) v2 @kind i2l;
  #L248b78.  v7:= lcmp(v8, v10);
  #L248b7c.  if v7 >= 0 then goto L248c48;
  #L248b80.  v6:= new `java.io.EOFException`;
  #L248b84.  v7:= new `java.lang.StringBuilder`;
  #L248b88.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248b8e.  v8:= "size < " @kind object;
  #L248b92.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248b98.  v7:= temp @kind object;
  #L248b9a.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L248ba0.  v7:= temp @kind object;
  #L248ba2.  v8:= ": " @kind object;
  #L248ba6.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248bac.  v7:= temp @kind object;
  #L248bae.  v8:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248bb2.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L248bb8.  v7:= temp @kind object;
  #L248bba.  v8:= " (to read code point prefixed 0x" @kind object;
  #L248bbe.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248bc4.  v7:= temp @kind object;
  #L248bc6.  call temp:= `toHexString`(v1) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L248bcc.  v8:= temp @kind object;
  #L248bce.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248bd4.  v7:= temp @kind object;
  #L248bd6.  v8:= ")" @kind object;
  #L248bda.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248be0.  v7:= temp @kind object;
  #L248be2.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248be8.  v7:= temp @kind object;
  #L248bea.  call `<init>`(v6, v7) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248bf0.  throw v6;
  #L248bf2.  v7:= v1 ^& 224;
  #L248bf6.  v8:= 192I;
  #L248bfa.  if v7 != v8 then goto L248c0a;
  #L248bfe.  v3:= v1 ^& 31;
  #L248c02.  v2:= 2I;
  #L248c04.  v5:= 128I;
  #L248c08.  goto L248b72;
  #L248c0a.  v7:= v1 ^& 240;
  #L248c0e.  v8:= 224I;
  #L248c12.  if v7 != v8 then goto L248c22;
  #L248c16.  v3:= v1 ^& 15;
  #L248c1a.  v2:= 3I;
  #L248c1c.  v5:= 2048I;
  #L248c20.  goto L248b72;
  #L248c22.  v7:= v1 ^& 248;
  #L248c26.  v8:= 240I;
  #L248c2a.  if v7 != v8 then goto L248c3a;
  #L248c2e.  v3:= v1 ^& 7;
  #L248c32.  v2:= 4I;
  #L248c34.  v5:= 65536I;
  #L248c38.  goto L248b72;
  #L248c3a.  v8:= 1L;
  #L248c3e.  call `skip`(v12, v8) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L248c44.  v3:= v6;
  #L248c46.  return v3;
  #L248c48.  v4:= 1I;
  #L248c4a.  if v4 >= v2 then goto L248c80;
  #L248c4e.  v8:= (`long`) v4 @kind i2l;
  #L248c50.  call temp:= `getByte`(v12, v8) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L248c56.  v0:= temp;
  #L248c58.  v7:= v0 ^& 192;
  #L248c5c.  v8:= 128I;
  #L248c60.  if v7 != v8 then goto L248c74;
  #L248c64.  v3:= v3 ^< 6;
  #L248c68.  v7:= v0 ^& 63;
  #L248c6c.  v3:= v3 ^| v7 @kind int;
  #L248c6e.  v4:= v4 + 1;
  #L248c72.  goto L248c4a;
  #L248c74.  v8:= (`long`) v4 @kind i2l;
  #L248c76.  call `skip`(v12, v8) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L248c7c.  v3:= v6;
  #L248c7e.  goto L248c46;
  #L248c80.  v8:= (`long`) v2 @kind i2l;
  #L248c82.  call `skip`(v12, v8) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L248c88.  v7:= 1114111I;
  #L248c8e.  if v3 <= v7 then goto L248c96;
  #L248c92.  v3:= v6;
  #L248c94.  goto L248c46;
  #L248c96.  v7:= 55296I;
  #L248c9c.  if v3 < v7 then goto L248cae;
  #L248ca0.  v7:= 57343I;
  #L248ca6.  if v3 > v7 then goto L248cae;
  #L248caa.  v3:= v6;
  #L248cac.  goto L248c46;
  #L248cae.  if v3 >= v5 then goto L248c46;
  #L248cb2.  v3:= v6;
  #L248cb4.  goto L248c46;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v6 @kind this) @signature `Lokio/Buffer;.readUtf8Line:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L248cc8.  v2:= 10I;
  #L248ccc.  call temp:= `indexOf`(v6, v2) @signature `Lokio/Buffer;.indexOf:(B)J` @kind virtual;
  #L248cd2.  v0:= temp @kind wide;
  #L248cd4.  v2:= -1L;
  #L248cd8.  v2:= lcmp(v0, v2);
  #L248cdc.  if v2 != 0 then goto L248d02;
  #L248ce0.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248ce4.  v4:= 0L;
  #L248ce8.  v2:= lcmp(v2, v4);
  #L248cec.  if v2 == 0 then goto L248cfe;
  #L248cf0.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248cf4.  call temp:= `readUtf8`(v6, v2) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L248cfa.  v2:= temp @kind object;
  #L248cfc.  return v2 @kind object;
  #L248cfe.  v2:= 0I;
  #L248d00.  goto L248cfc;
  #L248d02.  call temp:= `readUtf8Line`(v6, v0) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L248d08.  v2:= temp @kind object;
  #L248d0a.  goto L248cfc;
}
procedure `java.lang.String` `readUtf8Line`(`okio.Buffer` v7 @kind this, `long` v8 @name `newline`) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L248d1c.  v4:= 1L;
  #L248d20.  v2:= 0L;
  #L248d24.  v2:= lcmp(v8, v2);
  #L248d28.  if v2 <= 0 then goto L248d5a;
  #L248d2c.  v2:= v8 - v4 @kind long;
  #L248d30.  call temp:= `getByte`(v7, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L248d36.  v2:= temp;
  #L248d38.  v3:= 13I;
  #L248d3c.  if v2 != v3 then goto L248d5a;
  #L248d40.  v2:= v8 - v4 @kind long;
  #L248d44.  call temp:= `readUtf8`(v7, v2) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L248d4a.  v0:= temp @kind object;
  #L248d4c.  v2:= 2L;
  #L248d50.  call `skip`(v7, v2) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L248d56.  v1:= v0 @kind object;
  #L248d58.  return v1 @kind object;
  #L248d5a.  call temp:= `readUtf8`(v7, v8) @signature `Lokio/Buffer;.readUtf8:(J)Ljava/lang/String;` @kind virtual;
  #L248d60.  v0:= temp @kind object;
  #L248d62.  call `skip`(v7, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L248d68.  v1:= v0 @kind object;
  #L248d6a.  goto L248d58;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.readUtf8LineStrict:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L248d7c.  v0:= 9223372036854775807L;
  #L248d86.  call temp:= `readUtf8LineStrict`(v2, v0) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @kind virtual;
  #L248d8c.  v0:= temp @kind object;
  #L248d8e.  return v0 @kind object;
}
procedure `java.lang.String` `readUtf8LineStrict`(`okio.Buffer` v17 @kind this, `long` v18 @name `limit`) @signature `Lokio/Buffer;.readUtf8LineStrict:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;

  #L248da0.  v2:= 0L;
  #L248da4.  v2:= lcmp(v18, v2);
  #L248da8.  if v2 >= 0 then goto L248de2;
  #L248dac.  v2:= new `java.lang.IllegalArgumentException`;
  #L248db0.  v3:= new `java.lang.StringBuilder`;
  #L248db4.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248dba.  v4:= "limit < 0: " @kind object;
  #L248dbe.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248dc4.  v3:= temp @kind object;
  #L248dc6.  v0:= v18 @kind wide;
  #L248dca.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L248dd0.  v3:= temp @kind object;
  #L248dd2.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248dd8.  v3:= temp @kind object;
  #L248dda.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248de0.  throw v2;
  #L248de2.  v2:= 9223372036854775807L;
  #L248dec.  v2:= lcmp(v18, v2);
  #L248df0.  if v2 != 0 then goto L248e2c;
  #L248df4.  v6:= 9223372036854775807L;
  #L248dfe.  v3:= 10I;
  #L248e02.  v4:= 0L;
  #L248e06.  v2:= v17 @kind object;
  #L248e0a.  call temp:= `indexOf`(v2, v3, v4, v6) @signature `Lokio/Buffer;.indexOf:(BJJ)J` @kind virtual;
  #L248e10.  v14:= temp @kind wide;
  #L248e12.  v2:= -1L;
  #L248e16.  v2:= lcmp(v14, v2);
  #L248e1a.  if v2 == 0 then goto L248e36;
  #L248e1e.  v0:= v17 @kind object;
  #L248e22.  call temp:= `readUtf8Line`(v0, v14) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L248e28.  v2:= temp @kind object;
  #L248e2a.  return v2 @kind object;
  #L248e2c.  v2:= 1L;
  #L248e30.  v6:= v18 + v2 @kind long;
  #L248e34.  goto L248dfe;
  #L248e36.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L248e3c.  v2:= temp @kind wide;
  #L248e3e.  v2:= lcmp(v6, v2);
  #L248e42.  if v2 >= 0 then goto L248e84;
  #L248e46.  v2:= 1L;
  #L248e4a.  v2:= v6 - v2 @kind long;
  #L248e4e.  v0:= v17 @kind object;
  #L248e52.  call temp:= `getByte`(v0, v2) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L248e58.  v2:= temp;
  #L248e5a.  v3:= 13I;
  #L248e5e.  if v2 != v3 then goto L248e84;
  #L248e62.  v0:= v17 @kind object;
  #L248e66.  call temp:= `getByte`(v0, v6) @signature `Lokio/Buffer;.getByte:(J)B` @kind virtual;
  #L248e6c.  v2:= temp;
  #L248e6e.  v3:= 10I;
  #L248e72.  if v2 != v3 then goto L248e84;
  #L248e76.  v0:= v17 @kind object;
  #L248e7a.  call temp:= `readUtf8Line`(v0, v6) @signature `Lokio/Buffer;.readUtf8Line:(J)Ljava/lang/String;` @kind virtual;
  #L248e80.  v2:= temp @kind object;
  #L248e82.  goto L248e2a;
  #L248e84.  v9:= new `okio.Buffer`;
  #L248e88.  call `<init>`(v9) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L248e8e.  v10:= 0L;
  #L248e92.  v2:= 32L;
  #L248e96.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L248e9c.  v4:= temp @kind wide;
  #L248e9e.  call temp:= `min`(v2, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L248ea4.  v12:= temp @kind wide;
  #L248ea6.  v8:= v17 @kind object;
  #L248eaa.  call temp:= `copyTo`(v8, v9, v10, v12) @signature `Lokio/Buffer;.copyTo:(Lokio/Buffer;JJ)Lokio/Buffer;` @kind virtual;
  #L248eb0.  v2:= new `java.io.EOFException`;
  #L248eb4.  v3:= new `java.lang.StringBuilder`;
  #L248eb8.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L248ebe.  v4:= "\\n not found: limit=" @kind object;
  #L248ec2.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248ec8.  v3:= temp @kind object;
  #L248eca.  call temp:= `size`(v17) @signature `Lokio/Buffer;.size:()J` @kind virtual;
  #L248ed0.  v4:= temp @kind wide;
  #L248ed2.  v0:= v18 @kind wide;
  #L248ed6.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L248edc.  v4:= temp @kind wide;
  #L248ede.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L248ee4.  v3:= temp @kind object;
  #L248ee6.  v4:= " content=" @kind object;
  #L248eea.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248ef0.  v3:= temp @kind object;
  #L248ef2.  call temp:= `readByteString`(v9) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L248ef8.  v4:= temp @kind object;
  #L248efa.  call temp:= `hex`(v4) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L248f00.  v4:= temp @kind object;
  #L248f02.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L248f08.  v3:= temp @kind object;
  #L248f0a.  v4:= 8230I;
  #L248f0e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L248f14.  v3:= temp @kind object;
  #L248f16.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L248f1c.  v3:= temp @kind object;
  #L248f1e.  call `<init>`(v2, v3) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L248f24.  throw v2;
}
procedure `boolean` `request`(`okio.Buffer` v3 @kind this, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.request:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L248f38.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248f3c.  v0:= lcmp(v0, v4);
  #L248f40.  if v0 < 0 then goto L248f48;
  #L248f44.  v0:= 1I;
  #L248f46.  return v0;
  #L248f48.  v0:= 0I;
  #L248f4a.  goto L248f46;
}
procedure `void` `require`(`okio.Buffer` v3 @kind this, `long` v4 @name `byteCount`) @signature `Lokio/Buffer;.require:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L248f5c.  v0:= v3.`okio.Buffer.size` @type ^`long` @kind wide;
  #L248f60.  v0:= lcmp(v0, v4);
  #L248f64.  if v0 >= 0 then goto L248f74;
  #L248f68.  v0:= new `java.io.EOFException`;
  #L248f6c.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L248f72.  throw v0;
  #L248f74.  return @kind void;
}
procedure `java.util.List` `segmentSizes`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.segmentSizes:()Ljava/util/List;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L248f88.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248f8c.  if v2 != 0 then goto L248f9a;
  #L248f90.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L248f96.  v0:= temp @kind object;
  #L248f98.  return v0 @kind object;
  #L248f9a.  v0:= new `java.util.ArrayList`;
  #L248f9e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L248fa4.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248fa8.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L248fac.  v3:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248fb0.  v3:= v3.`okio.Segment.pos` @type ^`int`;
  #L248fb4.  v2:= v2 - v3 @kind int;
  #L248fb6.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L248fbc.  v2:= temp @kind object;
  #L248fbe.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L248fc4.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248fc8.  v1:= v2.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L248fcc.  v2:= v4.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L248fd0.  if v1 == v2 then goto L248f98;
  #L248fd4.  v2:= v1.`okio.Segment.limit` @type ^`int`;
  #L248fd8.  v3:= v1.`okio.Segment.pos` @type ^`int`;
  #L248fdc.  v2:= v2 - v3 @kind int;
  #L248fde.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L248fe4.  v2:= temp @kind object;
  #L248fe6.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L248fec.  v1:= v1.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L248ff0.  goto L248fcc;
}
procedure `int` `select`(`okio.Buffer` v12 @kind this, `okio.Options` v13 @kind object @name `options`) @signature `Lokio/Buffer;.select:(Lokio/Options;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L249004.  v1:= v12.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249008.  if v1 != 0 then goto L24901a;
  #L24900c.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L249010.  call temp:= `indexOf`(v13, v0) @signature `Lokio/Options;.indexOf:(Ljava/lang/Object;)I` @kind virtual;
  #L249016.  v8:= temp;
  #L249018.  return v8;
  #L24901a.  v6:= v13.`okio.Options.byteStrings` @type ^`okio.ByteString`[] @kind object;
  #L24901e.  v8:= 0I;
  #L249020.  v9:= length @variable v6;
  #L249022.  if v8 >= v9 then goto L249082;
  #L249026.  v3:= v6[v8] @kind object;
  #L24902a.  v4:= v12.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24902e.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L249034.  v0:= temp;
  #L249036.  v10:= (`long`) v0 @kind i2l;
  #L249038.  v0:= lcmp(v4, v10);
  #L24903c.  if v0 < 0 then goto L24907c;
  #L249040.  v2:= v1.`okio.Segment.pos` @type ^`int`;
  #L249044.  v4:= 0I;
  #L249046.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L24904c.  v5:= temp;
  #L24904e.  v0:= v12 @kind object;
  #L249050.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L249056.  v0:= temp;
  #L249058.  if v0 == 0 then goto L24907c;
  #Try_start0.  
  #L24905c.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L249062.  v0:= temp;
  #L249064.  v4:= (`long`) v0 @kind i2l;
  #L249066.  call `skip`(v12, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #Try_end0.  
  #L24906c.  goto L249018;
  #L24906e.  v7:= Exception @type ^`java.io.EOFException` @kind object;
  #L249070.  v0:= new `java.lang.AssertionError`;
  #L249074.  call `<init>`(v0, v7) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L24907a.  throw v0;
  #L24907c.  v8:= v8 + 1;
  #L249080.  goto L249022;
  #L249082.  v8:= -1I;
  #L249084.  goto L249018;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L24906e;
}
procedure `int` `selectPrefix`(`okio.Buffer` v14 @kind this, `okio.Options` v15 @kind object @name `options`) @signature `Lokio/Buffer;.selectPrefix:(Lokio/Options;)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L2490a8.  v1:= v14.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2490ac.  v6:= v15.`okio.Options.byteStrings` @type ^`okio.ByteString`[] @kind object;
  #L2490b0.  v7:= 0I;
  #L2490b2.  v8:= length @variable v6;
  #L2490b4.  if v7 >= v8 then goto L2490f4;
  #L2490b8.  v3:= v6[v7] @kind object;
  #L2490bc.  v10:= v14.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2490c0.  call temp:= `size`(v3) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L2490c6.  v0:= temp;
  #L2490c8.  v12:= (`long`) v0 @kind i2l;
  #L2490ca.  call temp:= `min`(v10, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2490d0.  v10:= temp @kind wide;
  #L2490d2.  v5:= (`int`) v10 @kind l2i;
  #L2490d4.  if v5 == 0 then goto L2490ec;
  #L2490d8.  v2:= v1.`okio.Segment.pos` @type ^`int`;
  #L2490dc.  v4:= 0I;
  #L2490de.  v0:= v14 @kind object;
  #L2490e0.  call temp:= `rangeEquals`(v0, v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.rangeEquals:(Lokio/Segment;ILokio/ByteString;II)Z` @kind direct;
  #L2490e6.  v0:= temp;
  #L2490e8.  if v0 == 0 then goto L2490ee;
  #L2490ec.  return v7;
  #L2490ee.  v7:= v7 + 1;
  #L2490f2.  goto L2490b4;
  #L2490f4.  v7:= -1I;
  #L2490f6.  goto L2490ec;
}
procedure `okio.ByteString` `sha1`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha1:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249108.  v0:= "SHA-1" @kind object;
  #L24910c.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L249112.  v0:= temp @kind object;
  #L249114.  return v0 @kind object;
}
procedure `okio.ByteString` `sha256`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha256:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249128.  v0:= "SHA-256" @kind object;
  #L24912c.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L249132.  v0:= temp @kind object;
  #L249134.  return v0 @kind object;
}
procedure `okio.ByteString` `sha512`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.sha512:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249148.  v0:= "SHA-512" @kind object;
  #L24914c.  call temp:= `digest`(v1, v0) @signature `Lokio/Buffer;.digest:(Ljava/lang/String;)Lokio/ByteString;` @kind direct;
  #L249152.  v0:= temp @kind object;
  #L249154.  return v0 @kind object;
}
procedure `long` `size`(`okio.Buffer` v2 @kind this) @signature `Lokio/Buffer;.size:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249168.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24916c.  return v0 @kind wide;
}
procedure `void` `skip`(`okio.Buffer` v7 @kind this, `long` v8 @name `byteCount`) @signature `Lokio/Buffer;.skip:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L249180.  v2:= 0L;
  #L249184.  v2:= lcmp(v8, v2);
  #L249188.  if v2 <= 0 then goto L249208;
  #L24918c.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249190.  if v2 != 0 then goto L2491a0;
  #L249194.  v2:= new `java.io.EOFException`;
  #L249198.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L24919e.  throw v2;
  #L2491a0.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2491a4.  v2:= v2.`okio.Segment.limit` @type ^`int`;
  #L2491a8.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2491ac.  v3:= v3.`okio.Segment.pos` @type ^`int`;
  #L2491b0.  v2:= v2 - v3 @kind int;
  #L2491b2.  v2:= (`long`) v2 @kind i2l;
  #L2491b4.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2491ba.  v2:= temp @kind wide;
  #L2491bc.  v1:= (`int`) v2 @kind l2i;
  #L2491be.  v2:= v7.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2491c2.  v4:= (`long`) v1 @kind i2l;
  #L2491c4.  v2:= v2 - v4 @kind long;
  #L2491c6.  v7.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L2491ca.  v2:= (`long`) v1 @kind i2l;
  #L2491cc.  v8:= v8 - v2 @kind long;
  #L2491ce.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2491d2.  v3:= v2.`okio.Segment.pos` @type ^`int`;
  #L2491d6.  v3:= v3 + v1 @kind int;
  #L2491d8.  v2.`okio.Segment.pos` @type ^`int` := v3;
  #L2491dc.  v2:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2491e0.  v2:= v2.`okio.Segment.pos` @type ^`int`;
  #L2491e4.  v3:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2491e8.  v3:= v3.`okio.Segment.limit` @type ^`int`;
  #L2491ec.  if v2 != v3 then goto L249180;
  #L2491f0.  v0:= v7.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2491f4.  call temp:= `pop`(v0) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L2491fa.  v2:= temp @kind object;
  #L2491fc.  v7.`okio.Buffer.head` @type ^`okio.Segment` := v2 @kind object;
  #L249200.  call `recycle`(v0) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L249206.  goto L249180;
  #L249208.  return @kind void;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v4 @kind this) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L24921c.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249220.  v2:= 2147483647L;
  #L249226.  v0:= lcmp(v0, v2);
  #L24922a.  if v0 <= 0 then goto L249264;
  #L24922e.  v0:= new `java.lang.IllegalArgumentException`;
  #L249232.  v1:= new `java.lang.StringBuilder`;
  #L249236.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24923c.  v2:= "size > Integer.MAX_VALUE: " @kind object;
  #L249240.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249246.  v1:= temp @kind object;
  #L249248.  v2:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24924c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L249252.  v1:= temp @kind object;
  #L249254.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24925a.  v1:= temp @kind object;
  #L24925c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249262.  throw v0;
  #L249264.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249268.  v0:= (`int`) v0 @kind l2i;
  #L24926a.  call temp:= `snapshot`(v4, v0) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @kind virtual;
  #L249270.  v0:= temp @kind object;
  #L249272.  return v0 @kind object;
}
procedure `okio.ByteString` `snapshot`(`okio.Buffer` v1 @kind this, `int` v2 @name `byteCount`) @signature `Lokio/Buffer;.snapshot:(I)Lokio/ByteString;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249284.  if v2 != 0 then goto L24928e;
  #L249288.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L24928c.  return v0 @kind object;
  #L24928e.  v0:= new `okio.SegmentedByteString`;
  #L249292.  call `<init>`(v0, v1, v2) @signature `Lokio/SegmentedByteString;.<init>:(Lokio/Buffer;I)V` @kind direct;
  #L249298.  goto L24928c;
}
procedure `okio.Timeout` `timeout`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2492ac.  v0:= `@@okio.Timeout.NONE` @type ^`okio.Timeout` @kind object;
  #L2492b0.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okio.Buffer` v1 @kind this) @signature `Lokio/Buffer;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2492c4.  call temp:= `snapshot`(v1) @signature `Lokio/Buffer;.snapshot:()Lokio/ByteString;` @kind virtual;
  #L2492ca.  v0:= temp @kind object;
  #L2492cc.  call temp:= `toString`(v0) @signature `Lokio/ByteString;.toString:()Ljava/lang/String;` @kind virtual;
  #L2492d2.  v0:= temp @kind object;
  #L2492d4.  return v0 @kind object;
}
procedure `okio.Segment` `writableSegment`(`okio.Buffer` v3 @kind this, `int` v4 @name `minimumCapacity`) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L2492e8.  v2:= 8192I;
  #L2492ec.  v1:= 1I;
  #L2492ee.  if v4 < v1 then goto L2492f6;
  #L2492f2.  if v4 <= v2 then goto L249302;
  #L2492f6.  v1:= new `java.lang.IllegalArgumentException`;
  #L2492fa.  call `<init>`(v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L249300.  throw v1;
  #L249302.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249306.  if v1 != 0 then goto L24932c;
  #L24930a.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L249310.  v1:= temp @kind object;
  #L249312.  v3.`okio.Buffer.head` @type ^`okio.Segment` := v1 @kind object;
  #L249316.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24931a.  v2:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24931e.  v0:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249322.  v2.`okio.Segment.prev` @type ^`okio.Segment` := v0 @kind object;
  #L249326.  v1.`okio.Segment.next` @type ^`okio.Segment` := v0 @kind object;
  #L24932a.  return v0 @kind object;
  #L24932c.  v1:= v3.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249330.  v0:= v1.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L249334.  v1:= v0.`okio.Segment.limit` @type ^`int`;
  #L249338.  v1:= v1 + v4 @kind int;
  #L24933a.  if v1 > v2 then goto L249346;
  #L24933e.  v1:= v0.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L249342.  if v1 != 0 then goto L24932a;
  #L249346.  call temp:= `take`() @signature `Lokio/SegmentPool;.take:()Lokio/Segment;` @kind static;
  #L24934c.  v1:= temp @kind object;
  #L24934e.  call temp:= `push`(v0, v1) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L249354.  v0:= temp @kind object;
  #L249356.  goto L24932a;
}
procedure `int` `write`(`okio.Buffer` v8 @kind this, `java.nio.ByteBuffer` v9 @kind object @name `source`) @signature `Lokio/Buffer;.write:(Ljava/nio/ByteBuffer;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L249368.  if v9 != 0 then goto L24937c;
  #L24936c.  v4:= new `java.lang.IllegalArgumentException`;
  #L249370.  v5:= "source == null" @kind object;
  #L249374.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24937a.  throw v4;
  #L24937c.  call temp:= `remaining`(v9) @signature `Ljava/nio/ByteBuffer;.remaining:()I` @kind virtual;
  #L249382.  v0:= temp;
  #L249384.  v1:= v0;
  #L249386.  if v1 <= 0 then goto L2493c0;
  #L24938a.  v4:= 1I;
  #L24938c.  call temp:= `writableSegment`(v8, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L249392.  v2:= temp @kind object;
  #L249394.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L249398.  v4:= v4 - 8192;
  #L24939c.  call temp:= `min`(v1, v4) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L2493a2.  v3:= temp;
  #L2493a4.  v4:= v2.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2493a8.  v5:= v2.`okio.Segment.limit` @type ^`int`;
  #L2493ac.  call temp:= `get`(v9, v4, v5, v3) @signature `Ljava/nio/ByteBuffer;.get:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L2493b2.  v1:= v1 - v3 @kind int;
  #L2493b4.  v4:= v2.`okio.Segment.limit` @type ^`int`;
  #L2493b8.  v4:= v4 + v3 @kind int;
  #L2493ba.  v2.`okio.Segment.limit` @type ^`int` := v4;
  #L2493be.  goto L249386;
  #L2493c0.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2493c4.  v6:= (`long`) v0 @kind i2l;
  #L2493c6.  v4:= v4 + v6 @kind long;
  #L2493c8.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L2493cc.  return v0;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `okio.ByteString` v3 @kind object @name `byteString`) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2493e0.  if v3 != 0 then goto L2493f4;
  #L2493e4.  v0:= new `java.lang.IllegalArgumentException`;
  #L2493e8.  v1:= "byteString == null" @kind object;
  #L2493ec.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2493f2.  throw v0;
  #L2493f4.  call `write`(v3, v2) @signature `Lokio/ByteString;.write:(Lokio/Buffer;)V` @kind virtual;
  #L2493fa.  return v2 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v2 @kind this, `byte`[] v3 @kind object @name `source`) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24940c.  if v3 != 0 then goto L249420;
  #L249410.  v0:= new `java.lang.IllegalArgumentException`;
  #L249414.  v1:= "source == null" @kind object;
  #L249418.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24941e.  throw v0;
  #L249420.  v0:= 0I;
  #L249422.  v1:= length @variable v3;
  #L249424.  call temp:= `write`(v2, v3, v0, v1) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L24942a.  v0:= temp @kind object;
  #L24942c.  return v0 @kind object;
}
procedure `okio.Buffer` `write`(`okio.Buffer` v9 @kind this, `byte`[] v10 @kind object @name `source`, `int` v11 @name `offset`, `int` v12 @name `byteCount`) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L249440.  if v10 != 0 then goto L249454;
  #L249444.  v0:= new `java.lang.IllegalArgumentException`;
  #L249448.  v1:= "source == null" @kind object;
  #L24944c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249452.  throw v0;
  #L249454.  v0:= length @variable v10;
  #L249456.  v0:= (`long`) v0 @kind i2l;
  #L249458.  v2:= (`long`) v11 @kind i2l;
  #L24945a.  v4:= (`long`) v12 @kind i2l;
  #L24945c.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L249462.  v6:= v11 + v12 @kind int;
  #L249466.  if v11 >= v6 then goto L2494a4;
  #L24946a.  v0:= 1I;
  #L24946c.  call temp:= `writableSegment`(v9, v0) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L249472.  v7:= temp @kind object;
  #L249474.  v0:= v6 - v11 @kind int;
  #L249478.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L24947c.  v1:= v1 - 8192;
  #L249480.  call temp:= `min`(v0, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L249486.  v8:= temp;
  #L249488.  v0:= v7.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24948c.  v1:= v7.`okio.Segment.limit` @type ^`int`;
  #L249490.  call `arraycopy`(v10, v11, v0, v1, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L249496.  v11:= v11 + v8 @kind int;
  #L249498.  v0:= v7.`okio.Segment.limit` @type ^`int`;
  #L24949c.  v0:= v0 + v8 @kind int;
  #L24949e.  v7.`okio.Segment.limit` @type ^`int` := v0;
  #L2494a2.  goto L249466;
  #L2494a4.  v0:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L2494a8.  v2:= (`long`) v12 @kind i2l;
  #L2494aa.  v0:= v0 + v2 @kind long;
  #L2494ac.  v9.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L2494b0.  return v9 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v1 @kind this, `okio.ByteString` v2 @kind object) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L2494c4.  call temp:= `write`(v1, v2) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L2494ca.  v0:= temp @kind object;
  #L2494cc.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v4 @kind this, `okio.Source` v5 @kind object @name `source`, `long` v6 @name `byteCount`) @signature `Lokio/Buffer;.write:(Lokio/Source;J)Lokio/BufferedSink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L2494e0.  v2:= 0L;
  #L2494e4.  v2:= lcmp(v6, v2);
  #L2494e8.  if v2 <= 0 then goto L249510;
  #L2494ec.  call temp:= `read`(v5, v4, v6) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L2494f2.  v0:= temp @kind wide;
  #L2494f4.  v2:= -1L;
  #L2494f8.  v2:= lcmp(v0, v2);
  #L2494fc.  if v2 != 0 then goto L24950c;
  #L249500.  v2:= new `java.io.EOFException`;
  #L249504.  call `<init>`(v2) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L24950a.  throw v2;
  #L24950c.  v6:= v6 - v0 @kind long;
  #L24950e.  goto L2494e0;
  #L249510.  return v4 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v1 @kind this, `byte`[] v2 @kind object) @signature `Lokio/Buffer;.write:([B)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249524.  call temp:= `write`(v1, v2) @signature `Lokio/Buffer;.write:([B)Lokio/Buffer;` @kind virtual;
  #L24952a.  v0:= temp @kind object;
  #L24952c.  return v0 @kind object;
}
procedure `okio.BufferedSink` `write`(`okio.Buffer` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/Buffer;.write:([BII)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249540.  call temp:= `write`(v1, v2, v3, v4) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L249546.  v0:= temp @kind object;
  #L249548.  return v0 @kind object;
}
procedure `void` `write`(`okio.Buffer` v10 @kind this, `okio.Buffer` v11 @kind object @name `source`, `long` v12 @name `byteCount`) @signature `Lokio/Buffer;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L24955c.  v2:= 0L;
  #L249560.  if v11 != 0 then goto L249574;
  #L249564.  v0:= new `java.lang.IllegalArgumentException`;
  #L249568.  v1:= "source == null" @kind object;
  #L24956c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249572.  throw v0;
  #L249574.  if v11 != v10 then goto L249588;
  #L249578.  v0:= new `java.lang.IllegalArgumentException`;
  #L24957c.  v1:= "source == this" @kind object;
  #L249580.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249586.  throw v0;
  #L249588.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24958c.  v4:= v12 @kind wide;
  #L24958e.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L249594.  v0:= lcmp(v12, v2);
  #L249598.  if v0 <= 0 then goto L24961a;
  #L24959c.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2495a0.  v0:= v0.`okio.Segment.limit` @type ^`int`;
  #L2495a4.  v1:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2495a8.  v1:= v1.`okio.Segment.pos` @type ^`int`;
  #L2495ac.  v0:= v0 - v1 @kind int;
  #L2495ae.  v0:= (`long`) v0 @kind i2l;
  #L2495b0.  v0:= lcmp(v12, v0);
  #L2495b4.  if v0 >= 0 then goto L249638;
  #L2495b8.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2495bc.  if v0 == 0 then goto L24961c;
  #L2495c0.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2495c4.  v9:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L2495c8.  if v9 == 0 then goto L249626;
  #L2495cc.  v0:= v9.`okio.Segment.owner` @type ^`boolean` @kind boolean;
  #L2495d0.  if v0 == 0 then goto L249626;
  #L2495d4.  v0:= v9.`okio.Segment.limit` @type ^`int`;
  #L2495d8.  v0:= (`long`) v0 @kind i2l;
  #L2495da.  v4:= v12 + v0 @kind long;
  #L2495de.  v0:= v9.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L2495e2.  if v0 == 0 then goto L249620;
  #L2495e6.  v0:= 0I;
  #L2495e8.  v0:= (`long`) v0 @kind i2l;
  #L2495ea.  v0:= v4 - v0 @kind long;
  #L2495ee.  v4:= 8192L;
  #L2495f2.  v0:= lcmp(v0, v4);
  #L2495f6.  if v0 > 0 then goto L249626;
  #L2495fa.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L2495fe.  v1:= (`int`) v12 @kind l2i;
  #L249600.  call `writeTo`(v0, v9, v1) @signature `Lokio/Segment;.writeTo:(Lokio/Segment;I)V` @kind virtual;
  #L249606.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24960a.  v0:= v0 - v12 @kind long;
  #L24960c.  v11.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L249610.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249614.  v0:= v0 + v12 @kind long;
  #L249616.  v10.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24961a.  return @kind void;
  #L24961c.  v9:= 0I;
  #L24961e.  goto L2495c8;
  #L249620.  v0:= v9.`okio.Segment.pos` @type ^`int`;
  #L249624.  goto L2495e8;
  #L249626.  v0:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24962a.  v1:= (`int`) v12 @kind l2i;
  #L24962c.  call temp:= `split`(v0, v1) @signature `Lokio/Segment;.split:(I)Lokio/Segment;` @kind virtual;
  #L249632.  v0:= temp @kind object;
  #L249634.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L249638.  v8:= v11.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24963c.  v0:= v8.`okio.Segment.limit` @type ^`int`;
  #L249640.  v1:= v8.`okio.Segment.pos` @type ^`int`;
  #L249644.  v0:= v0 - v1 @kind int;
  #L249646.  v6:= (`long`) v0 @kind i2l;
  #L249648.  call temp:= `pop`(v8) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L24964e.  v0:= temp @kind object;
  #L249650.  v11.`okio.Buffer.head` @type ^`okio.Segment` := v0 @kind object;
  #L249654.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249658.  if v0 != 0 then goto L24968c;
  #L24965c.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v8 @kind object;
  #L249660.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249664.  v1:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249668.  v4:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L24966c.  v1.`okio.Segment.prev` @type ^`okio.Segment` := v4 @kind object;
  #L249670.  v0.`okio.Segment.next` @type ^`okio.Segment` := v4 @kind object;
  #L249674.  v0:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249678.  v0:= v0 - v6 @kind long;
  #L24967a.  v11.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L24967e.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249682.  v0:= v0 + v6 @kind long;
  #L249684.  v10.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L249688.  v12:= v12 - v6 @kind long;
  #L24968a.  goto L249594;
  #L24968c.  v0:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249690.  v9:= v0.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L249694.  call temp:= `push`(v9, v8) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L24969a.  v9:= temp @kind object;
  #L24969c.  call `compact`(v9) @signature `Lokio/Segment;.compact:()V` @kind virtual;
  #L2496a2.  goto L249674;
}
procedure `long` `writeAll`(`okio.Buffer` v6 @kind this, `okio.Source` v7 @kind object @name `source`) @signature `Lokio/Buffer;.writeAll:(Lokio/Source;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2496b4.  if v7 != 0 then goto L2496c8;
  #L2496b8.  v4:= new `java.lang.IllegalArgumentException`;
  #L2496bc.  v5:= "source == null" @kind object;
  #L2496c0.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2496c6.  throw v4;
  #L2496c8.  v2:= 0L;
  #L2496cc.  v4:= 8192L;
  #L2496d0.  call temp:= `read`(v7, v6, v4) @signature `Lokio/Source;.read:(Lokio/Buffer;J)J` @kind interface;
  #L2496d6.  v0:= temp @kind wide;
  #L2496d8.  v4:= -1L;
  #L2496dc.  v4:= lcmp(v0, v4);
  #L2496e0.  if v4 == 0 then goto L2496e8;
  #L2496e4.  v2:= v2 + v0 @kind long;
  #L2496e6.  goto L2496cc;
  #L2496e8.  return v2 @kind wide;
}
procedure `okio.Buffer` `writeByte`(`okio.Buffer` v6 @kind this, `int` v7 @name `b`) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L2496fc.  v1:= 1I;
  #L2496fe.  call temp:= `writableSegment`(v6, v1) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L249704.  v0:= temp @kind object;
  #L249706.  v1:= v0.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24970a.  v2:= v0.`okio.Segment.limit` @type ^`int`;
  #L24970e.  v3:= v2 + 1;
  #L249712.  v0.`okio.Segment.limit` @type ^`int` := v3;
  #L249716.  v3:= (`byte`) v7 @kind i2b;
  #L249718.  v1[v2]:= v3 @kind byte;
  #L24971c.  v2:= v6.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249720.  v4:= 1L;
  #L249724.  v2:= v2 + v4 @kind long;
  #L249726.  v6.`okio.Buffer.size` @type ^`long` := v2 @kind wide;
  #L24972a.  return v6 @kind object;
}
procedure `okio.BufferedSink` `writeByte`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeByte:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L24973c.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L249742.  v0:= temp @kind object;
  #L249744.  return v0 @kind object;
}
procedure `okio.Buffer` `writeDecimalLong`(`okio.Buffer` v13 @kind this, `long` v14 @name `v`) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L249758.  v10:= 10L;
  #L24975c.  v8:= 0L;
  #L249760.  v6:= lcmp(v14, v8);
  #L249764.  if v6 != 0 then goto L249776;
  #L249768.  v6:= 48I;
  #L24976c.  call temp:= `writeByte`(v13, v6) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L249772.  v13:= temp @kind object;
  #L249774.  return v13 @kind object;
  #L249776.  v2:= 0I;
  #L249778.  v6:= lcmp(v14, v8);
  #L24977c.  if v6 >= 0 then goto L24979a;
  #L249780.  v14:= -v14 @kind long;
  #L249782.  v6:= lcmp(v14, v8);
  #L249786.  if v6 >= 0 then goto L249798;
  #L24978a.  v6:= "-9223372036854775808" @kind object;
  #L24978e.  call temp:= `writeUtf8`(v13, v6) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L249794.  v13:= temp @kind object;
  #L249796.  goto L249774;
  #L249798.  v2:= 1I;
  #L24979a.  v6:= 100000000L;
  #L2497a0.  v6:= lcmp(v14, v6);
  #L2497a4.  if v6 >= 0 then goto L24985c;
  #L2497a8.  v6:= 10000L;
  #L2497ac.  v6:= lcmp(v14, v6);
  #L2497b0.  if v6 >= 0 then goto L249820;
  #L2497b4.  v6:= 100L;
  #L2497b8.  v6:= lcmp(v14, v6);
  #L2497bc.  if v6 >= 0 then goto L24980c;
  #L2497c0.  v6:= lcmp(v14, v10);
  #L2497c4.  if v6 >= 0 then goto L249808;
  #L2497c8.  v5:= 1I;
  #L2497ca.  if v2 == 0 then goto L2497d2;
  #L2497ce.  v5:= v5 + 1;
  #L2497d2.  call temp:= `writableSegment`(v13, v5) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L2497d8.  v4:= temp @kind object;
  #L2497da.  v0:= v4.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2497de.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L2497e2.  v3:= v6 + v5 @kind int;
  #L2497e6.  v6:= lcmp(v14, v8);
  #L2497ea.  if v6 == 0 then goto L24995c;
  #L2497ee.  v6:= v14 %% v10 @kind long;
  #L2497f2.  v1:= (`int`) v6 @kind l2i;
  #L2497f4.  v3:= v3 + -1;
  #L2497f8.  v6:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L2497fc.  v6:= v6[v1] @kind byte;
  #L249800.  v0[v3]:= v6 @kind byte;
  #L249804.  v14:= v14 / v10 @kind long;
  #L249806.  goto L2497e6;
  #L249808.  v5:= 2I;
  #L24980a.  goto L2497ca;
  #L24980c.  v6:= 1000L;
  #L249810.  v6:= lcmp(v14, v6);
  #L249814.  if v6 >= 0 then goto L24981c;
  #L249818.  v5:= 3I;
  #L24981a.  goto L2497ca;
  #L24981c.  v5:= 4I;
  #L24981e.  goto L2497ca;
  #L249820.  v6:= 1000000L;
  #L249826.  v6:= lcmp(v14, v6);
  #L24982a.  if v6 >= 0 then goto L249844;
  #L24982e.  v6:= 100000L;
  #L249834.  v6:= lcmp(v14, v6);
  #L249838.  if v6 >= 0 then goto L249840;
  #L24983c.  v5:= 5I;
  #L24983e.  goto L2497ca;
  #L249840.  v5:= 6I;
  #L249842.  goto L2497ca;
  #L249844.  v6:= 10000000L;
  #L24984a.  v6:= lcmp(v14, v6);
  #L24984e.  if v6 >= 0 then goto L249856;
  #L249852.  v5:= 7I;
  #L249854.  goto L2497ca;
  #L249856.  v5:= 8I;
  #L24985a.  goto L2497ca;
  #L24985c.  v6:= 1000000000000L;
  #L249866.  v6:= lcmp(v14, v6);
  #L24986a.  if v6 >= 0 then goto L2498b8;
  #L24986e.  v6:= 10000000000L;
  #L249878.  v6:= lcmp(v14, v6);
  #L24987c.  if v6 >= 0 then goto L24989a;
  #L249880.  v6:= 1000000000L;
  #L249886.  v6:= lcmp(v14, v6);
  #L24988a.  if v6 >= 0 then goto L249894;
  #L24988e.  v5:= 9I;
  #L249892.  goto L2497ca;
  #L249894.  v5:= 10I;
  #L249898.  goto L2497ca;
  #L24989a.  v6:= 100000000000L;
  #L2498a4.  v6:= lcmp(v14, v6);
  #L2498a8.  if v6 >= 0 then goto L2498b2;
  #L2498ac.  v5:= 11I;
  #L2498b0.  goto L2497ca;
  #L2498b2.  v5:= 12I;
  #L2498b6.  goto L2497ca;
  #L2498b8.  v6:= 1000000000000000L;
  #L2498c2.  v6:= lcmp(v14, v6);
  #L2498c6.  if v6 >= 0 then goto L249906;
  #L2498ca.  v6:= 10000000000000L;
  #L2498d4.  v6:= lcmp(v14, v6);
  #L2498d8.  if v6 >= 0 then goto L2498e4;
  #L2498dc.  v5:= 13I;
  #L2498e0.  goto L2497ca;
  #L2498e4.  v6:= 100000000000000L;
  #L2498ee.  v6:= lcmp(v14, v6);
  #L2498f2.  if v6 >= 0 then goto L2498fe;
  #L2498f6.  v5:= 14I;
  #L2498fa.  goto L2497ca;
  #L2498fe.  v5:= 15I;
  #L249902.  goto L2497ca;
  #L249906.  v6:= 100000000000000000L;
  #L249910.  v6:= lcmp(v14, v6);
  #L249914.  if v6 >= 0 then goto L24993a;
  #L249918.  v6:= 10000000000000000L;
  #L249922.  v6:= lcmp(v14, v6);
  #L249926.  if v6 >= 0 then goto L249932;
  #L24992a.  v5:= 16I;
  #L24992e.  goto L2497ca;
  #L249932.  v5:= 17I;
  #L249936.  goto L2497ca;
  #L24993a.  v6:= 1000000000000000000L;
  #L249944.  v6:= lcmp(v14, v6);
  #L249948.  if v6 >= 0 then goto L249954;
  #L24994c.  v5:= 18I;
  #L249950.  goto L2497ca;
  #L249954.  v5:= 19I;
  #L249958.  goto L2497ca;
  #L24995c.  if v2 == 0 then goto L24996c;
  #L249960.  v3:= v3 + -1;
  #L249964.  v6:= 45I;
  #L249968.  v0[v3]:= v6 @kind byte;
  #L24996c.  v6:= v4.`okio.Segment.limit` @type ^`int`;
  #L249970.  v6:= v6 + v5 @kind int;
  #L249972.  v4.`okio.Segment.limit` @type ^`int` := v6;
  #L249976.  v6:= v13.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24997a.  v8:= (`long`) v5 @kind i2l;
  #L24997c.  v6:= v6 + v8 @kind long;
  #L24997e.  v13.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L249982.  goto L249774;
}
procedure `okio.BufferedSink` `writeDecimalLong`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249998.  call temp:= `writeDecimalLong`(v1, v2) @signature `Lokio/Buffer;.writeDecimalLong:(J)Lokio/Buffer;` @kind virtual;
  #L24999e.  v0:= temp @kind object;
  #L2499a0.  return v0 @kind object;
}
procedure `okio.Buffer` `writeHexadecimalUnsignedLong`(`okio.Buffer` v11 @kind this, `long` v12 @name `v`) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2499b4.  v6:= 0L;
  #L2499b8.  v5:= lcmp(v12, v6);
  #L2499bc.  if v5 != 0 then goto L2499ce;
  #L2499c0.  v5:= 48I;
  #L2499c4.  call temp:= `writeByte`(v11, v5) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L2499ca.  v11:= temp @kind object;
  #L2499cc.  return v11 @kind object;
  #L2499ce.  call temp:= `highestOneBit`(v12) @signature `Ljava/lang/Long;.highestOneBit:(J)J` @kind static;
  #L2499d4.  v6:= temp @kind wide;
  #L2499d6.  call temp:= `numberOfTrailingZeros`(v6) @signature `Ljava/lang/Long;.numberOfTrailingZeros:(J)I` @kind static;
  #L2499dc.  v5:= temp;
  #L2499de.  v5:= v5 / 4;
  #L2499e2.  v4:= v5 + 1;
  #L2499e6.  call temp:= `writableSegment`(v11, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L2499ec.  v3:= temp @kind object;
  #L2499ee.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L2499f2.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L2499f6.  v5:= v5 + v4 @kind int;
  #L2499f8.  v1:= v5 + -1;
  #L2499fc.  v2:= v3.`okio.Segment.limit` @type ^`int`;
  #L249a00.  if v1 < v2 then goto L249a22;
  #L249a04.  v5:= `@@okio.Buffer.DIGITS` @type ^`byte`[] @kind object;
  #L249a08.  v6:= 15L;
  #L249a0c.  v6:= v6 ^& v12 @kind long;
  #L249a0e.  v6:= (`int`) v6 @kind l2i;
  #L249a10.  v5:= v5[v6] @kind byte;
  #L249a14.  v0[v1]:= v5 @kind byte;
  #L249a18.  v5:= 4I;
  #L249a1a.  v12:= v12 ^>> v5 @kind long;
  #L249a1c.  v1:= v1 + -1;
  #L249a20.  goto L249a00;
  #L249a22.  v5:= v3.`okio.Segment.limit` @type ^`int`;
  #L249a26.  v5:= v5 + v4 @kind int;
  #L249a28.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L249a2c.  v6:= v11.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249a30.  v8:= (`long`) v4 @kind i2l;
  #L249a32.  v6:= v6 + v8 @kind long;
  #L249a34.  v11.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L249a38.  goto L2499cc;
}
procedure `okio.BufferedSink` `writeHexadecimalUnsignedLong`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249a4c.  call temp:= `writeHexadecimalUnsignedLong`(v1, v2) @signature `Lokio/Buffer;.writeHexadecimalUnsignedLong:(J)Lokio/Buffer;` @kind virtual;
  #L249a52.  v0:= temp @kind object;
  #L249a54.  return v0 @kind object;
}
procedure `okio.Buffer` `writeInt`(`okio.Buffer` v8 @kind this, `int` v9 @name `i`) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L249a68.  v4:= 4I;
  #L249a6a.  call temp:= `writableSegment`(v8, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L249a70.  v3:= temp @kind object;
  #L249a72.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L249a76.  v1:= v3.`okio.Segment.limit` @type ^`int`;
  #L249a7a.  v2:= v1 + 1;
  #L249a7e.  v4:= v9 ^>> 24;
  #L249a82.  v4:= v4 ^& 255;
  #L249a86.  v4:= (`byte`) v4 @kind i2b;
  #L249a88.  v0[v1]:= v4 @kind byte;
  #L249a8c.  v1:= v2 + 1;
  #L249a90.  v4:= v9 ^>> 16;
  #L249a94.  v4:= v4 ^& 255;
  #L249a98.  v4:= (`byte`) v4 @kind i2b;
  #L249a9a.  v0[v2]:= v4 @kind byte;
  #L249a9e.  v2:= v1 + 1;
  #L249aa2.  v4:= v9 ^>> 8;
  #L249aa6.  v4:= v4 ^& 255;
  #L249aaa.  v4:= (`byte`) v4 @kind i2b;
  #L249aac.  v0[v1]:= v4 @kind byte;
  #L249ab0.  v1:= v2 + 1;
  #L249ab4.  v4:= v9 ^& 255;
  #L249ab8.  v4:= (`byte`) v4 @kind i2b;
  #L249aba.  v0[v2]:= v4 @kind byte;
  #L249abe.  v3.`okio.Segment.limit` @type ^`int` := v1;
  #L249ac2.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249ac6.  v6:= 4L;
  #L249aca.  v4:= v4 + v6 @kind long;
  #L249acc.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L249ad0.  return v8 @kind object;
}
procedure `okio.BufferedSink` `writeInt`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeInt:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249ae4.  call temp:= `writeInt`(v1, v2) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L249aea.  v0:= temp @kind object;
  #L249aec.  return v0 @kind object;
}
procedure `okio.Buffer` `writeIntLe`(`okio.Buffer` v1 @kind this, `int` v2 @name `i`) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249b00.  call temp:= `reverseBytesInt`(v2) @signature `Lokio/Util;.reverseBytesInt:(I)I` @kind static;
  #L249b06.  v0:= temp;
  #L249b08.  call temp:= `writeInt`(v1, v0) @signature `Lokio/Buffer;.writeInt:(I)Lokio/Buffer;` @kind virtual;
  #L249b0e.  v0:= temp @kind object;
  #L249b10.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeIntLe`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249b24.  call temp:= `writeIntLe`(v1, v2) @signature `Lokio/Buffer;.writeIntLe:(I)Lokio/Buffer;` @kind virtual;
  #L249b2a.  v0:= temp @kind object;
  #L249b2c.  return v0 @kind object;
}
procedure `okio.Buffer` `writeLong`(`okio.Buffer` v9 @kind this, `long` v10 @name `v`) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L249b40.  v8:= 8I;
  #L249b44.  v6:= 255L;
  #L249b48.  call temp:= `writableSegment`(v9, v8) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L249b4e.  v3:= temp @kind object;
  #L249b50.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L249b54.  v1:= v3.`okio.Segment.limit` @type ^`int`;
  #L249b58.  v2:= v1 + 1;
  #L249b5c.  v4:= 56I;
  #L249b60.  v4:= v10 ^>> v4 @kind long;
  #L249b64.  v4:= v4 ^& v6 @kind long;
  #L249b66.  v4:= (`int`) v4 @kind l2i;
  #L249b68.  v4:= (`byte`) v4 @kind i2b;
  #L249b6a.  v0[v1]:= v4 @kind byte;
  #L249b6e.  v1:= v2 + 1;
  #L249b72.  v4:= 48I;
  #L249b76.  v4:= v10 ^>> v4 @kind long;
  #L249b7a.  v4:= v4 ^& v6 @kind long;
  #L249b7c.  v4:= (`int`) v4 @kind l2i;
  #L249b7e.  v4:= (`byte`) v4 @kind i2b;
  #L249b80.  v0[v2]:= v4 @kind byte;
  #L249b84.  v2:= v1 + 1;
  #L249b88.  v4:= 40I;
  #L249b8c.  v4:= v10 ^>> v4 @kind long;
  #L249b90.  v4:= v4 ^& v6 @kind long;
  #L249b92.  v4:= (`int`) v4 @kind l2i;
  #L249b94.  v4:= (`byte`) v4 @kind i2b;
  #L249b96.  v0[v1]:= v4 @kind byte;
  #L249b9a.  v1:= v2 + 1;
  #L249b9e.  v4:= 32I;
  #L249ba2.  v4:= v10 ^>> v4 @kind long;
  #L249ba6.  v4:= v4 ^& v6 @kind long;
  #L249ba8.  v4:= (`int`) v4 @kind l2i;
  #L249baa.  v4:= (`byte`) v4 @kind i2b;
  #L249bac.  v0[v2]:= v4 @kind byte;
  #L249bb0.  v2:= v1 + 1;
  #L249bb4.  v4:= 24I;
  #L249bb8.  v4:= v10 ^>> v4 @kind long;
  #L249bbc.  v4:= v4 ^& v6 @kind long;
  #L249bbe.  v4:= (`int`) v4 @kind l2i;
  #L249bc0.  v4:= (`byte`) v4 @kind i2b;
  #L249bc2.  v0[v1]:= v4 @kind byte;
  #L249bc6.  v1:= v2 + 1;
  #L249bca.  v4:= 16I;
  #L249bce.  v4:= v10 ^>> v4 @kind long;
  #L249bd2.  v4:= v4 ^& v6 @kind long;
  #L249bd4.  v4:= (`int`) v4 @kind l2i;
  #L249bd6.  v4:= (`byte`) v4 @kind i2b;
  #L249bd8.  v0[v2]:= v4 @kind byte;
  #L249bdc.  v2:= v1 + 1;
  #L249be0.  v4:= v10 ^>> v8 @kind long;
  #L249be4.  v4:= v4 ^& v6 @kind long;
  #L249be6.  v4:= (`int`) v4 @kind l2i;
  #L249be8.  v4:= (`byte`) v4 @kind i2b;
  #L249bea.  v0[v1]:= v4 @kind byte;
  #L249bee.  v1:= v2 + 1;
  #L249bf2.  v4:= v10 ^& v6 @kind long;
  #L249bf6.  v4:= (`int`) v4 @kind l2i;
  #L249bf8.  v4:= (`byte`) v4 @kind i2b;
  #L249bfa.  v0[v2]:= v4 @kind byte;
  #L249bfe.  v3.`okio.Segment.limit` @type ^`int` := v1;
  #L249c02.  v4:= v9.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249c06.  v6:= 8L;
  #L249c0a.  v4:= v4 + v6 @kind long;
  #L249c0c.  v9.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L249c10.  return v9 @kind object;
}
procedure `okio.BufferedSink` `writeLong`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeLong:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249c24.  call temp:= `writeLong`(v1, v2) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L249c2a.  v0:= temp @kind object;
  #L249c2c.  return v0 @kind object;
}
procedure `okio.Buffer` `writeLongLe`(`okio.Buffer` v3 @kind this, `long` v4 @name `v`) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L249c40.  call temp:= `reverseBytesLong`(v4) @signature `Lokio/Util;.reverseBytesLong:(J)J` @kind static;
  #L249c46.  v0:= temp @kind wide;
  #L249c48.  call temp:= `writeLong`(v3, v0) @signature `Lokio/Buffer;.writeLong:(J)Lokio/Buffer;` @kind virtual;
  #L249c4e.  v0:= temp @kind object;
  #L249c50.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeLongLe`(`okio.Buffer` v1 @kind this, `long` v2 ) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249c64.  call temp:= `writeLongLe`(v1, v2) @signature `Lokio/Buffer;.writeLongLe:(J)Lokio/Buffer;` @kind virtual;
  #L249c6a.  v0:= temp @kind object;
  #L249c6c.  return v0 @kind object;
}
procedure `okio.Buffer` `writeShort`(`okio.Buffer` v8 @kind this, `int` v9 @name `s`) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L249c80.  v4:= 2I;
  #L249c82.  call temp:= `writableSegment`(v8, v4) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L249c88.  v3:= temp @kind object;
  #L249c8a.  v0:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L249c8e.  v1:= v3.`okio.Segment.limit` @type ^`int`;
  #L249c92.  v2:= v1 + 1;
  #L249c96.  v4:= v9 ^>> 8;
  #L249c9a.  v4:= v4 ^& 255;
  #L249c9e.  v4:= (`byte`) v4 @kind i2b;
  #L249ca0.  v0[v1]:= v4 @kind byte;
  #L249ca4.  v1:= v2 + 1;
  #L249ca8.  v4:= v9 ^& 255;
  #L249cac.  v4:= (`byte`) v4 @kind i2b;
  #L249cae.  v0[v2]:= v4 @kind byte;
  #L249cb2.  v3.`okio.Segment.limit` @type ^`int` := v1;
  #L249cb6.  v4:= v8.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249cba.  v6:= 2L;
  #L249cbe.  v4:= v4 + v6 @kind long;
  #L249cc0.  v8.`okio.Buffer.size` @type ^`long` := v4 @kind wide;
  #L249cc4.  return v8 @kind object;
}
procedure `okio.BufferedSink` `writeShort`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeShort:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249cd8.  call temp:= `writeShort`(v1, v2) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L249cde.  v0:= temp @kind object;
  #L249ce0.  return v0 @kind object;
}
procedure `okio.Buffer` `writeShortLe`(`okio.Buffer` v1 @kind this, `int` v2 @name `s`) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L249cf4.  v0:= (`short`) v2 @kind i2s;
  #L249cf6.  call temp:= `reverseBytesShort`(v0) @signature `Lokio/Util;.reverseBytesShort:(S)S` @kind static;
  #L249cfc.  v0:= temp;
  #L249cfe.  call temp:= `writeShort`(v1, v0) @signature `Lokio/Buffer;.writeShort:(I)Lokio/Buffer;` @kind virtual;
  #L249d04.  v0:= temp @kind object;
  #L249d06.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeShortLe`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249d18.  call temp:= `writeShortLe`(v1, v2) @signature `Lokio/Buffer;.writeShortLe:(I)Lokio/Buffer;` @kind virtual;
  #L249d1e.  v0:= temp @kind object;
  #L249d20.  return v0 @kind object;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v4 @kind this, `java.lang.String` v5 @kind object @name `string`, `int` v6 @name `beginIndex`, `int` v7 @name `endIndex`, `java.nio.charset.Charset` v8 @kind object @name `charset`) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L249d34.  if v5 != 0 then goto L249d48;
  #L249d38.  v1:= new `java.lang.IllegalArgumentException`;
  #L249d3c.  v2:= "string == null" @kind object;
  #L249d40.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249d46.  throw v1;
  #L249d48.  if v6 >= 0 then goto L249d7e;
  #L249d4c.  v1:= new `java.lang.IllegalAccessError`;
  #L249d50.  v2:= new `java.lang.StringBuilder`;
  #L249d54.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L249d5a.  v3:= "beginIndex < 0: " @kind object;
  #L249d5e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249d64.  v2:= temp @kind object;
  #L249d66.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L249d6c.  v2:= temp @kind object;
  #L249d6e.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L249d74.  v2:= temp @kind object;
  #L249d76.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249d7c.  throw v1;
  #L249d7e.  if v7 >= v6 then goto L249dc8;
  #L249d82.  v1:= new `java.lang.IllegalArgumentException`;
  #L249d86.  v2:= new `java.lang.StringBuilder`;
  #L249d8a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L249d90.  v3:= "endIndex < beginIndex: " @kind object;
  #L249d94.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249d9a.  v2:= temp @kind object;
  #L249d9c.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L249da2.  v2:= temp @kind object;
  #L249da4.  v3:= " < " @kind object;
  #L249da8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249dae.  v2:= temp @kind object;
  #L249db0.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L249db6.  v2:= temp @kind object;
  #L249db8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L249dbe.  v2:= temp @kind object;
  #L249dc0.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249dc6.  throw v1;
  #L249dc8.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L249dce.  v1:= temp;
  #L249dd0.  if v7 <= v1 then goto L249e22;
  #L249dd4.  v1:= new `java.lang.IllegalArgumentException`;
  #L249dd8.  v2:= new `java.lang.StringBuilder`;
  #L249ddc.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L249de2.  v3:= "endIndex > string.length: " @kind object;
  #L249de6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249dec.  v2:= temp @kind object;
  #L249dee.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L249df4.  v2:= temp @kind object;
  #L249df6.  v3:= " > " @kind object;
  #L249dfa.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249e00.  v2:= temp @kind object;
  #L249e02.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L249e08.  v3:= temp;
  #L249e0a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L249e10.  v2:= temp @kind object;
  #L249e12.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L249e18.  v2:= temp @kind object;
  #L249e1a.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249e20.  throw v1;
  #L249e22.  if v8 != 0 then goto L249e36;
  #L249e26.  v1:= new `java.lang.IllegalArgumentException`;
  #L249e2a.  v2:= "charset == null" @kind object;
  #L249e2e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249e34.  throw v1;
  #L249e36.  v1:= `@@okio.Util.UTF_8` @type ^`java.nio.charset.Charset` @kind object;
  #L249e3a.  call temp:= `equals`(v8, v1) @signature `Ljava/nio/charset/Charset;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L249e40.  v1:= temp;
  #L249e42.  if v1 == 0 then goto L249e50;
  #L249e46.  call temp:= `writeUtf8`(v4, v5, v6, v7) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L249e4c.  v1:= temp @kind object;
  #L249e4e.  return v1 @kind object;
  #L249e50.  call temp:= `substring`(v5, v6, v7) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L249e56.  v1:= temp @kind object;
  #L249e58.  call temp:= `getBytes`(v1, v8) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L249e5e.  v0:= temp @kind object;
  #L249e60.  v1:= 0I;
  #L249e62.  v2:= length @variable v0;
  #L249e64.  call temp:= `write`(v4, v0, v1, v2) @signature `Lokio/Buffer;.write:([BII)Lokio/Buffer;` @kind virtual;
  #L249e6a.  v1:= temp @kind object;
  #L249e6c.  goto L249e4e;
}
procedure `okio.Buffer` `writeString`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object @name `string`, `java.nio.charset.Charset` v4 @kind object @name `charset`) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249e80.  v0:= 0I;
  #L249e82.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L249e88.  v1:= temp;
  #L249e8a.  call temp:= `writeString`(v2, v3, v0, v1, v4) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L249e90.  v0:= temp @kind object;
  #L249e92.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `java.nio.charset.Charset` v5 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249ea4.  call temp:= `writeString`(v1, v2, v3, v4, v5) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;IILjava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L249eaa.  v0:= temp @kind object;
  #L249eac.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeString`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `java.nio.charset.Charset` v3 @kind object) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L249ec0.  call temp:= `writeString`(v1, v2, v3) @signature `Lokio/Buffer;.writeString:(Ljava/lang/String;Ljava/nio/charset/Charset;)Lokio/Buffer;` @kind virtual;
  #L249ec6.  v0:= temp @kind object;
  #L249ec8.  return v0 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v2 @kind this, `java.io.OutputStream` v3 @kind object @name `out`) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249edc.  v0:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249ee0.  call temp:= `writeTo`(v2, v3, v0) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @kind virtual;
  #L249ee6.  v0:= temp @kind object;
  #L249ee8.  return v0 @kind object;
}
procedure `okio.Buffer` `writeTo`(`okio.Buffer` v10 @kind this, `java.io.OutputStream` v11 @kind object @name `out`, `long` v12 @name `byteCount`) @signature `Lokio/Buffer;.writeTo:(Ljava/io/OutputStream;J)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L249efc.  v2:= 0L;
  #L249f00.  if v11 != 0 then goto L249f14;
  #L249f04.  v0:= new `java.lang.IllegalArgumentException`;
  #L249f08.  v1:= "out == null" @kind object;
  #L249f0c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249f12.  throw v0;
  #L249f14.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249f18.  v4:= v12 @kind wide;
  #L249f1a.  call `checkOffsetAndCount`(v0, v2, v4) @signature `Lokio/Util;.checkOffsetAndCount:(JJJ)V` @kind static;
  #L249f20.  v6:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L249f24.  v0:= lcmp(v12, v2);
  #L249f28.  if v0 <= 0 then goto L249f8c;
  #L249f2c.  v0:= v6.`okio.Segment.limit` @type ^`int`;
  #L249f30.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L249f34.  v0:= v0 - v1 @kind int;
  #L249f36.  v0:= (`long`) v0 @kind i2l;
  #L249f38.  call temp:= `min`(v12, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L249f3e.  v0:= temp @kind wide;
  #L249f40.  v7:= (`int`) v0 @kind l2i;
  #L249f42.  v0:= v6.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L249f46.  v1:= v6.`okio.Segment.pos` @type ^`int`;
  #L249f4a.  call `write`(v11, v0, v1, v7) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L249f50.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L249f54.  v0:= v0 + v7 @kind int;
  #L249f56.  v6.`okio.Segment.pos` @type ^`int` := v0;
  #L249f5a.  v0:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L249f5e.  v4:= (`long`) v7 @kind i2l;
  #L249f60.  v0:= v0 - v4 @kind long;
  #L249f62.  v10.`okio.Buffer.size` @type ^`long` := v0 @kind wide;
  #L249f66.  v0:= (`long`) v7 @kind i2l;
  #L249f68.  v12:= v12 - v0 @kind long;
  #L249f6a.  v0:= v6.`okio.Segment.pos` @type ^`int`;
  #L249f6e.  v1:= v6.`okio.Segment.limit` @type ^`int`;
  #L249f72.  if v0 != v1 then goto L249f24;
  #L249f76.  v8:= v6 @kind object;
  #L249f78.  call temp:= `pop`(v8) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L249f7e.  v6:= temp @kind object;
  #L249f80.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v6 @kind object;
  #L249f84.  call `recycle`(v8) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L249f8a.  goto L249f24;
  #L249f8c.  return v10 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v2 @kind this, `java.lang.String` v3 @kind object @name `string`) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L249fa0.  v0:= 0I;
  #L249fa2.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L249fa8.  v1:= temp;
  #L249faa.  call temp:= `writeUtf8`(v2, v3, v0, v1) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L249fb0.  v0:= temp @kind object;
  #L249fb2.  return v0 @kind object;
}
procedure `okio.Buffer` `writeUtf8`(`okio.Buffer` v16 @kind this, `java.lang.String` v17 @kind object @name `string`, `int` v18 @name `beginIndex`, `int` v19 @name `endIndex`) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;

  #L249fc4.  if v17 != 0 then goto L249fd8;
  #L249fc8.  v12:= new `java.lang.IllegalArgumentException`;
  #L249fcc.  v13:= "string == null" @kind object;
  #L249fd0.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L249fd6.  throw v12;
  #L249fd8.  if v18 >= 0 then goto L24a012;
  #L249fdc.  v12:= new `java.lang.IllegalArgumentException`;
  #L249fe0.  v13:= new `java.lang.StringBuilder`;
  #L249fe4.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L249fea.  v14:= "beginIndex < 0: " @kind object;
  #L249fee.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L249ff4.  v13:= temp @kind object;
  #L249ff6.  v0:= v18;
  #L249ffa.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a000.  v13:= temp @kind object;
  #L24a002.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24a008.  v13:= temp @kind object;
  #L24a00a.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a010.  throw v12;
  #L24a012.  v0:= v19;
  #L24a016.  v1:= v18;
  #L24a01a.  if v0 >= v1 then goto L24a06c;
  #L24a01e.  v12:= new `java.lang.IllegalArgumentException`;
  #L24a022.  v13:= new `java.lang.StringBuilder`;
  #L24a026.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24a02c.  v14:= "endIndex < beginIndex: " @kind object;
  #L24a030.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a036.  v13:= temp @kind object;
  #L24a038.  v0:= v19;
  #L24a03c.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a042.  v13:= temp @kind object;
  #L24a044.  v14:= " < " @kind object;
  #L24a048.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a04e.  v13:= temp @kind object;
  #L24a050.  v0:= v18;
  #L24a054.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a05a.  v13:= temp @kind object;
  #L24a05c.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24a062.  v13:= temp @kind object;
  #L24a064.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a06a.  throw v12;
  #L24a06c.  call temp:= `length`(v17) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24a072.  v12:= temp;
  #L24a074.  v0:= v19;
  #L24a078.  if v0 <= v12 then goto L24a0ce;
  #L24a07c.  v12:= new `java.lang.IllegalArgumentException`;
  #L24a080.  v13:= new `java.lang.StringBuilder`;
  #L24a084.  call `<init>`(v13) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24a08a.  v14:= "endIndex > string.length: " @kind object;
  #L24a08e.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a094.  v13:= temp @kind object;
  #L24a096.  v0:= v19;
  #L24a09a.  call temp:= `append`(v13, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a0a0.  v13:= temp @kind object;
  #L24a0a2.  v14:= " > " @kind object;
  #L24a0a6.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a0ac.  v13:= temp @kind object;
  #L24a0ae.  call temp:= `length`(v17) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L24a0b4.  v14:= temp;
  #L24a0b6.  call temp:= `append`(v13, v14) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a0bc.  v13:= temp @kind object;
  #L24a0be.  call temp:= `toString`(v13) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24a0c4.  v13:= temp @kind object;
  #L24a0c6.  call `<init>`(v12, v13) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a0cc.  throw v12;
  #L24a0ce.  v5:= v18;
  #L24a0d2.  v6:= v5;
  #L24a0d4.  v0:= v19;
  #L24a0d8.  if v6 >= v0 then goto L24a2d6;
  #L24a0dc.  v0:= v17 @kind object;
  #L24a0e0.  call temp:= `charAt`(v0, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L24a0e6.  v2:= temp;
  #L24a0e8.  v12:= 128I;
  #L24a0ec.  if v2 >= v12 then goto L24a184;
  #L24a0f0.  v12:= 1I;
  #L24a0f2.  v0:= v16 @kind object;
  #L24a0f6.  call temp:= `writableSegment`(v0, v12) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L24a0fc.  v11:= temp @kind object;
  #L24a0fe.  v4:= v11.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L24a102.  v12:= v11.`okio.Segment.limit` @type ^`int`;
  #L24a106.  v10:= v12 - v6 @kind int;
  #L24a10a.  v12:= v10 - 8192;
  #L24a10e.  v0:= v19;
  #L24a112.  call temp:= `min`(v0, v12) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L24a118.  v8:= temp;
  #L24a11a.  v5:= v6 + 1;
  #L24a11e.  v12:= v10 + v6 @kind int;
  #L24a122.  v13:= (`byte`) v2 @kind i2b;
  #L24a124.  v4[v12]:= v13 @kind byte;
  #L24a128.  v6:= v5;
  #L24a12a.  if v6 >= v8 then goto L24a142;
  #L24a12e.  v0:= v17 @kind object;
  #L24a132.  call temp:= `charAt`(v0, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L24a138.  v2:= temp;
  #L24a13a.  v12:= 128I;
  #L24a13e.  if v2 < v12 then goto L24a172;
  #L24a142.  v12:= v6 + v10 @kind int;
  #L24a146.  v13:= v11.`okio.Segment.limit` @type ^`int`;
  #L24a14a.  v9:= v12 - v13 @kind int;
  #L24a14e.  v12:= v11.`okio.Segment.limit` @type ^`int`;
  #L24a152.  v12:= v12 + v9 @kind int;
  #L24a154.  v11.`okio.Segment.limit` @type ^`int` := v12;
  #L24a158.  v0:= v16 @kind object;
  #L24a15c.  v12:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L24a160.  v14:= (`long`) v9 @kind i2l;
  #L24a162.  v12:= v12 + v14 @kind long;
  #L24a164.  v0:= v16 @kind object;
  #L24a168.  v0.`okio.Buffer.size` @type ^`long` := v12 @kind wide;
  #L24a16c.  v5:= v6;
  #L24a16e.  v6:= v5;
  #L24a170.  goto L24a0d4;
  #L24a172.  v5:= v6 + 1;
  #L24a176.  v12:= v10 + v6 @kind int;
  #L24a17a.  v13:= (`byte`) v2 @kind i2b;
  #L24a17c.  v4[v12]:= v13 @kind byte;
  #L24a180.  v6:= v5;
  #L24a182.  goto L24a12a;
  #L24a184.  v12:= 2048I;
  #L24a188.  if v2 >= v12 then goto L24a1b6;
  #L24a18c.  v12:= v2 ^> 6;
  #L24a190.  v12:= v12 ^| 192;
  #L24a194.  v0:= v16 @kind object;
  #L24a198.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a19e.  v12:= v2 ^& 63;
  #L24a1a2.  v12:= v12 ^| 128;
  #L24a1a6.  v0:= v16 @kind object;
  #L24a1aa.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a1b0.  v5:= v6 + 1;
  #L24a1b4.  goto L24a16e;
  #L24a1b6.  v12:= 55296I;
  #L24a1bc.  if v2 < v12 then goto L24a1ca;
  #L24a1c0.  v12:= 57343I;
  #L24a1c6.  if v2 <= v12 then goto L24a20a;
  #L24a1ca.  v12:= v2 ^> 12;
  #L24a1ce.  v12:= v12 ^| 224;
  #L24a1d2.  v0:= v16 @kind object;
  #L24a1d6.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a1dc.  v12:= v2 ^> 6;
  #L24a1e0.  v12:= v12 ^& 63;
  #L24a1e4.  v12:= v12 ^| 128;
  #L24a1e8.  v0:= v16 @kind object;
  #L24a1ec.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a1f2.  v12:= v2 ^& 63;
  #L24a1f6.  v12:= v12 ^| 128;
  #L24a1fa.  v0:= v16 @kind object;
  #L24a1fe.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a204.  v5:= v6 + 1;
  #L24a208.  goto L24a16e;
  #L24a20a.  v12:= v6 + 1;
  #L24a20e.  v0:= v19;
  #L24a212.  if v12 >= v0 then goto L24a25c;
  #L24a216.  v12:= v6 + 1;
  #L24a21a.  v0:= v17 @kind object;
  #L24a21e.  call temp:= `charAt`(v0, v12) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L24a224.  v7:= temp;
  #L24a226.  v12:= 56319I;
  #L24a22c.  if v2 > v12 then goto L24a244;
  #L24a230.  v12:= 56320I;
  #L24a236.  if v7 < v12 then goto L24a244;
  #L24a23a.  v12:= 57343I;
  #L24a240.  if v7 <= v12 then goto L24a260;
  #L24a244.  v12:= 63I;
  #L24a248.  v0:= v16 @kind object;
  #L24a24c.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a252.  v5:= v6 + 1;
  #L24a256.  v6:= v5;
  #L24a258.  goto L24a0d4;
  #L24a25c.  v7:= 0I;
  #L24a25e.  goto L24a226;
  #L24a260.  v12:= 65536I;
  #L24a264.  v13:= -55297I;
  #L24a26a.  v13:= v13 ^& v2 @kind int;
  #L24a26c.  v13:= v13 ^< 10;
  #L24a270.  v14:= -56321I;
  #L24a276.  v14:= v14 ^& v7 @kind int;
  #L24a278.  v13:= v13 ^| v14 @kind int;
  #L24a27a.  v3:= v12 + v13 @kind int;
  #L24a27e.  v12:= v3 ^> 18;
  #L24a282.  v12:= v12 ^| 240;
  #L24a286.  v0:= v16 @kind object;
  #L24a28a.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a290.  v12:= v3 ^> 12;
  #L24a294.  v12:= v12 ^& 63;
  #L24a298.  v12:= v12 ^| 128;
  #L24a29c.  v0:= v16 @kind object;
  #L24a2a0.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a2a6.  v12:= v3 ^> 6;
  #L24a2aa.  v12:= v12 ^& 63;
  #L24a2ae.  v12:= v12 ^| 128;
  #L24a2b2.  v0:= v16 @kind object;
  #L24a2b6.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a2bc.  v12:= v3 ^& 63;
  #L24a2c0.  v12:= v12 ^| 128;
  #L24a2c4.  v0:= v16 @kind object;
  #L24a2c8.  call temp:= `writeByte`(v0, v12) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a2ce.  v5:= v6 + 2;
  #L24a2d2.  goto L24a16e;
  #L24a2d6.  return v16 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L24a2e8.  call temp:= `writeUtf8`(v1, v2) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;)Lokio/Buffer;` @kind virtual;
  #L24a2ee.  v0:= temp @kind object;
  #L24a2f0.  return v0 @kind object;
}
procedure `okio.BufferedSink` `writeUtf8`(`okio.Buffer` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L24a304.  call temp:= `writeUtf8`(v1, v2, v3, v4) @signature `Lokio/Buffer;.writeUtf8:(Ljava/lang/String;II)Lokio/Buffer;` @kind virtual;
  #L24a30a.  v0:= temp @kind object;
  #L24a30c.  return v0 @kind object;
}
procedure `okio.Buffer` `writeUtf8CodePoint`(`okio.Buffer` v3 @kind this, `int` v4 @name `codePoint`) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L24a320.  v0:= 128I;
  #L24a324.  if v4 >= v0 then goto L24a330;
  #L24a328.  call temp:= `writeByte`(v3, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a32e.  return v3 @kind object;
  #L24a330.  v0:= 2048I;
  #L24a334.  if v4 >= v0 then goto L24a356;
  #L24a338.  v0:= v4 ^> 6;
  #L24a33c.  v0:= v0 ^| 192;
  #L24a340.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a346.  v0:= v4 ^& 63;
  #L24a34a.  v0:= v0 ^| 128;
  #L24a34e.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a354.  goto L24a32e;
  #L24a356.  v0:= 65536I;
  #L24a35a.  if v4 >= v0 then goto L24a3ae;
  #L24a35e.  v0:= 55296I;
  #L24a364.  if v4 < v0 then goto L24a37e;
  #L24a368.  v0:= 57343I;
  #L24a36e.  if v4 > v0 then goto L24a37e;
  #L24a372.  v0:= 63I;
  #L24a376.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a37c.  goto L24a32e;
  #L24a37e.  v0:= v4 ^> 12;
  #L24a382.  v0:= v0 ^| 224;
  #L24a386.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a38c.  v0:= v4 ^> 6;
  #L24a390.  v0:= v0 ^& 63;
  #L24a394.  v0:= v0 ^| 128;
  #L24a398.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a39e.  v0:= v4 ^& 63;
  #L24a3a2.  v0:= v0 ^| 128;
  #L24a3a6.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a3ac.  goto L24a32e;
  #L24a3ae.  v0:= 1114111I;
  #L24a3b4.  if v4 > v0 then goto L24a3fa;
  #L24a3b8.  v0:= v4 ^> 18;
  #L24a3bc.  v0:= v0 ^| 240;
  #L24a3c0.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a3c6.  v0:= v4 ^> 12;
  #L24a3ca.  v0:= v0 ^& 63;
  #L24a3ce.  v0:= v0 ^| 128;
  #L24a3d2.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a3d8.  v0:= v4 ^> 6;
  #L24a3dc.  v0:= v0 ^& 63;
  #L24a3e0.  v0:= v0 ^| 128;
  #L24a3e4.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a3ea.  v0:= v4 ^& 63;
  #L24a3ee.  v0:= v0 ^| 128;
  #L24a3f2.  call temp:= `writeByte`(v3, v0) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L24a3f8.  goto L24a32e;
  #L24a3fa.  v0:= new `java.lang.IllegalArgumentException`;
  #L24a3fe.  v1:= new `java.lang.StringBuilder`;
  #L24a402.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24a408.  v2:= "Unexpected code point: " @kind object;
  #L24a40c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a412.  v1:= temp @kind object;
  #L24a414.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L24a41a.  v2:= temp @kind object;
  #L24a41c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24a422.  v1:= temp @kind object;
  #L24a424.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24a42a.  v1:= temp @kind object;
  #L24a42c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24a432.  throw v0;
}
procedure `okio.BufferedSink` `writeUtf8CodePoint`(`okio.Buffer` v1 @kind this, `int` v2 ) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/BufferedSink;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L24a444.  call temp:= `writeUtf8CodePoint`(v1, v2) @signature `Lokio/Buffer;.writeUtf8CodePoint:(I)Lokio/Buffer;` @kind virtual;
  #L24a44a.  v0:= temp @kind object;
  #L24a44c.  return v0 @kind object;
}
