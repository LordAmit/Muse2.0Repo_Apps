record `okio.Buffer$UnsafeCursor` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `okio.Buffer` `okio.Buffer$UnsafeCursor.buffer` @AccessFlag PUBLIC;
  `byte`[] `okio.Buffer$UnsafeCursor.data` @AccessFlag PUBLIC;
  `int` `okio.Buffer$UnsafeCursor.end` @AccessFlag PUBLIC;
  `long` `okio.Buffer$UnsafeCursor.offset` @AccessFlag PUBLIC;
  `boolean` `okio.Buffer$UnsafeCursor.readWrite` @AccessFlag PUBLIC;
  `okio.Segment` `okio.Buffer$UnsafeCursor.segment` @AccessFlag PRIVATE;
  `int` `okio.Buffer$UnsafeCursor.start` @AccessFlag PUBLIC;
}
procedure `void` `<init>`(`okio.Buffer$UnsafeCursor` v3 @kind this) @signature `Lokio/Buffer$UnsafeCursor;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1ad344.  v2:= -1I;
  #L1ad346.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1ad34c.  v0:= -1L;
  #L1ad350.  v3.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1ad354.  v3.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v2;
  #L1ad358.  v3.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v2;
  #L1ad35c.  return @kind void;
}
procedure `void` `close`(`okio.Buffer$UnsafeCursor` v4 @kind this) @signature `Lokio/Buffer$UnsafeCursor;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ad370.  v3:= -1I;
  #L1ad372.  v2:= 0I;
  #L1ad374.  v0:= v4.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad378.  if v0 != 0 then goto L1ad38c;
  #L1ad37c.  v0:= new `java.lang.IllegalStateException`;
  #L1ad380.  v1:= "not attached to a buffer" @kind object;
  #L1ad384.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad38a.  throw v0;
  #L1ad38c.  v4.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` := v2 @kind object;
  #L1ad390.  v4.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v2 @kind object;
  #L1ad394.  v0:= -1L;
  #L1ad398.  v4.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1ad39c.  v4.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v2 @kind object;
  #L1ad3a0.  v4.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v3;
  #L1ad3a4.  v4.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v3;
  #L1ad3a8.  return @kind void;
}
procedure `long` `expandBuffer`(`okio.Buffer$UnsafeCursor` v8 @kind this, `int` v9 @name `minByteCount`) @signature `Lokio/Buffer$UnsafeCursor;.expandBuffer:(I)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1ad3bc.  v5:= 8192I;
  #L1ad3c0.  if v9 > 0 then goto L1ad3f6;
  #L1ad3c4.  v4:= new `java.lang.IllegalArgumentException`;
  #L1ad3c8.  v5:= new `java.lang.StringBuilder`;
  #L1ad3cc.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ad3d2.  v6:= "minByteCount <= 0: " @kind object;
  #L1ad3d6.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad3dc.  v5:= temp @kind object;
  #L1ad3de.  call temp:= `append`(v5, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad3e4.  v5:= temp @kind object;
  #L1ad3e6.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ad3ec.  v5:= temp @kind object;
  #L1ad3ee.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad3f4.  throw v4;
  #L1ad3f6.  if v9 <= v5 then goto L1ad42c;
  #L1ad3fa.  v4:= new `java.lang.IllegalArgumentException`;
  #L1ad3fe.  v5:= new `java.lang.StringBuilder`;
  #L1ad402.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ad408.  v6:= "minByteCount > Segment.SIZE: " @kind object;
  #L1ad40c.  call temp:= `append`(v5, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad412.  v5:= temp @kind object;
  #L1ad414.  call temp:= `append`(v5, v9) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad41a.  v5:= temp @kind object;
  #L1ad41c.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ad422.  v5:= temp @kind object;
  #L1ad424.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad42a.  throw v4;
  #L1ad42c.  v4:= v8.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad430.  if v4 != 0 then goto L1ad444;
  #L1ad434.  v4:= new `java.lang.IllegalStateException`;
  #L1ad438.  v5:= "not attached to a buffer" @kind object;
  #L1ad43c.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad442.  throw v4;
  #L1ad444.  v4:= v8.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` @kind boolean;
  #L1ad448.  if v4 != 0 then goto L1ad45c;
  #L1ad44c.  v4:= new `java.lang.IllegalStateException`;
  #L1ad450.  v5:= "expandBuffer() only permitted for read/write buffers" @kind object;
  #L1ad454.  call `<init>`(v4, v5) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad45a.  throw v4;
  #L1ad45c.  v4:= v8.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad460.  v0:= v4.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad464.  v4:= v8.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad468.  call temp:= `writableSegment`(v4, v9) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L1ad46e.  v3:= temp @kind object;
  #L1ad470.  v4:= v3.`okio.Segment.limit` @type ^`int`;
  #L1ad474.  v2:= v4 - 8192;
  #L1ad478.  v3.`okio.Segment.limit` @type ^`int` := v5;
  #L1ad47c.  v4:= v8.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad480.  v6:= (`long`) v2 @kind i2l;
  #L1ad482.  v6:= v6 + v0 @kind long;
  #L1ad484.  v4.`okio.Buffer.size` @type ^`long` := v6 @kind wide;
  #L1ad488.  v8.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v3 @kind object;
  #L1ad48c.  v8.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1ad490.  v4:= v3.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ad494.  v8.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v4 @kind object;
  #L1ad498.  v4:= v2 - 8192;
  #L1ad49c.  v8.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v4;
  #L1ad4a0.  v8.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v5;
  #L1ad4a4.  v4:= (`long`) v2 @kind i2l;
  #L1ad4a6.  return v4 @kind wide;
}
procedure `int` `next`(`okio.Buffer$UnsafeCursor` v4 @kind this) @signature `Lokio/Buffer$UnsafeCursor;.next:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1ad4b8.  v0:= v4.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1ad4bc.  v2:= v4.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad4c0.  v2:= v2.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad4c4.  v0:= lcmp(v0, v2);
  #L1ad4c8.  if v0 != 0 then goto L1ad4d8;
  #L1ad4cc.  v0:= new `java.lang.IllegalStateException`;
  #L1ad4d0.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1ad4d6.  throw v0;
  #L1ad4d8.  v0:= v4.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1ad4dc.  v2:= -1L;
  #L1ad4e0.  v0:= lcmp(v0, v2);
  #L1ad4e4.  if v0 != 0 then goto L1ad4f6;
  #L1ad4e8.  v0:= 0L;
  #L1ad4ec.  call temp:= `seek`(v4, v0) @signature `Lokio/Buffer$UnsafeCursor;.seek:(J)I` @kind virtual;
  #L1ad4f2.  v0:= temp;
  #L1ad4f4.  return v0;
  #L1ad4f6.  v0:= v4.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1ad4fa.  v2:= v4.`okio.Buffer$UnsafeCursor.end` @type ^`int`;
  #L1ad4fe.  v3:= v4.`okio.Buffer$UnsafeCursor.start` @type ^`int`;
  #L1ad502.  v2:= v2 - v3 @kind int;
  #L1ad504.  v2:= (`long`) v2 @kind i2l;
  #L1ad506.  v0:= v0 + v2 @kind long;
  #L1ad508.  call temp:= `seek`(v4, v0) @signature `Lokio/Buffer$UnsafeCursor;.seek:(J)I` @kind virtual;
  #L1ad50e.  v0:= temp;
  #L1ad510.  goto L1ad4f4;
}
procedure `long` `resizeBuffer`(`okio.Buffer$UnsafeCursor` v13 @kind this, `long` v14 @name `newSize`) @signature `Lokio/Buffer$UnsafeCursor;.resizeBuffer:(J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1ad524.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad528.  if v10 != 0 then goto L1ad53c;
  #L1ad52c.  v10:= new `java.lang.IllegalStateException`;
  #L1ad530.  v11:= "not attached to a buffer" @kind object;
  #L1ad534.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad53a.  throw v10;
  #L1ad53c.  v10:= v13.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` @kind boolean;
  #L1ad540.  if v10 != 0 then goto L1ad554;
  #L1ad544.  v10:= new `java.lang.IllegalStateException`;
  #L1ad548.  v11:= "resizeBuffer() only permitted for read/write buffers" @kind object;
  #L1ad54c.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad552.  throw v10;
  #L1ad554.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad558.  v6:= v10.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad55c.  v10:= lcmp(v14, v6);
  #L1ad560.  if v10 > 0 then goto L1ad624;
  #L1ad564.  v10:= 0L;
  #L1ad568.  v10:= lcmp(v14, v10);
  #L1ad56c.  if v10 >= 0 then goto L1ad5a2;
  #L1ad570.  v10:= new `java.lang.IllegalArgumentException`;
  #L1ad574.  v11:= new `java.lang.StringBuilder`;
  #L1ad578.  call `<init>`(v11) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1ad57e.  v12:= "newSize < 0: " @kind object;
  #L1ad582.  call temp:= `append`(v11, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad588.  v11:= temp @kind object;
  #L1ad58a.  call temp:= `append`(v11, v14) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1ad590.  v11:= temp @kind object;
  #L1ad592.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1ad598.  v11:= temp @kind object;
  #L1ad59a.  call `<init>`(v10, v11) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad5a0.  throw v10;
  #L1ad5a2.  v2:= v6 - v14 @kind long;
  #L1ad5a6.  v10:= 0L;
  #L1ad5aa.  v10:= lcmp(v2, v10);
  #L1ad5ae.  if v10 <= 0 then goto L1ad5fe;
  #L1ad5b2.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad5b6.  v10:= v10.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ad5ba.  v8:= v10.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ad5be.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1ad5c2.  v11:= v8.`okio.Segment.pos` @type ^`int`;
  #L1ad5c6.  v9:= v10 - v11 @kind int;
  #L1ad5ca.  v10:= (`long`) v9 @kind i2l;
  #L1ad5cc.  v10:= lcmp(v10, v2);
  #L1ad5d0.  if v10 > 0 then goto L1ad5f0;
  #L1ad5d4.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad5d8.  call temp:= `pop`(v8) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1ad5de.  v11:= temp @kind object;
  #L1ad5e0.  v10.`okio.Buffer.head` @type ^`okio.Segment` := v11 @kind object;
  #L1ad5e4.  call `recycle`(v8) @signature `Lokio/SegmentPool;.recycle:(Lokio/Segment;)V` @kind static;
  #L1ad5ea.  v10:= (`long`) v9 @kind i2l;
  #L1ad5ec.  v2:= v2 - v10 @kind long;
  #L1ad5ee.  goto L1ad5a6;
  #L1ad5f0.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1ad5f4.  v10:= (`long`) v10 @kind i2l;
  #L1ad5f6.  v10:= v10 - v2 @kind long;
  #L1ad5f8.  v10:= (`int`) v10 @kind l2i;
  #L1ad5fa.  v8.`okio.Segment.limit` @type ^`int` := v10;
  #L1ad5fe.  v10:= 0I;
  #L1ad600.  v13.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v10 @kind object;
  #L1ad604.  v13.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v14 @kind wide;
  #L1ad608.  v10:= 0I;
  #L1ad60a.  v13.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v10 @kind object;
  #L1ad60e.  v10:= -1I;
  #L1ad610.  v13.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v10;
  #L1ad614.  v10:= -1I;
  #L1ad616.  v13.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v10;
  #L1ad61a.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad61e.  v10.`okio.Buffer.size` @type ^`long` := v14 @kind wide;
  #L1ad622.  return v6 @kind wide;
  #L1ad624.  v10:= lcmp(v14, v6);
  #L1ad628.  if v10 <= 0 then goto L1ad61a;
  #L1ad62c.  v4:= 1I;
  #L1ad62e.  v0:= v14 - v6 @kind long;
  #L1ad632.  v10:= 0L;
  #L1ad636.  v10:= lcmp(v0, v10);
  #L1ad63a.  if v10 <= 0 then goto L1ad61a;
  #L1ad63e.  v10:= v13.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad642.  v11:= 1I;
  #L1ad644.  call temp:= `writableSegment`(v10, v11) @signature `Lokio/Buffer;.writableSegment:(I)Lokio/Segment;` @kind virtual;
  #L1ad64a.  v8:= temp @kind object;
  #L1ad64c.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1ad650.  v10:= v10 - 8192;
  #L1ad654.  v10:= (`long`) v10 @kind i2l;
  #L1ad656.  call temp:= `min`(v0, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L1ad65c.  v10:= temp @kind wide;
  #L1ad65e.  v5:= (`int`) v10 @kind l2i;
  #L1ad660.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1ad664.  v10:= v10 + v5 @kind int;
  #L1ad666.  v8.`okio.Segment.limit` @type ^`int` := v10;
  #L1ad66a.  v10:= (`long`) v5 @kind i2l;
  #L1ad66c.  v0:= v0 - v10 @kind long;
  #L1ad66e.  if v4 == 0 then goto L1ad632;
  #L1ad672.  v13.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v8 @kind object;
  #L1ad676.  v13.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v6 @kind wide;
  #L1ad67a.  v10:= v8.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ad67e.  v13.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v10 @kind object;
  #L1ad682.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1ad686.  v10:= v10 - v5 @kind int;
  #L1ad688.  v13.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v10;
  #L1ad68c.  v10:= v8.`okio.Segment.limit` @type ^`int`;
  #L1ad690.  v13.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v10;
  #L1ad694.  v4:= 0I;
  #L1ad696.  goto L1ad632;
}
procedure `int` `seek`(`okio.Buffer$UnsafeCursor` v23 @kind this, `long` v24 @name `offset`) @signature `Lokio/Buffer$UnsafeCursor;.seek:(J)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L1ad6a8.  v16:= -1L;
  #L1ad6ac.  v16:= lcmp(v24, v16);
  #L1ad6b0.  if v16 < 0 then goto L1ad6d4;
  #L1ad6b4.  v0:= v23 @kind object;
  #L1ad6b8.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad6bc.  v16:= v0 @kind object;
  #L1ad6c0.  v0:= v16 @kind object;
  #L1ad6c4.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad6c8.  v16:= v0 @kind wide;
  #L1ad6cc.  v16:= lcmp(v24, v16);
  #L1ad6d0.  if v16 <= 0 then goto L1ad734;
  #L1ad6d4.  v16:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L1ad6d8.  v17:= "offset=%s > size=%s" @kind object;
  #L1ad6dc.  v18:= 2I;
  #L1ad6e0.  v0:= v18;
  #L1ad6e4.  v0:= new `java.lang.Object`[v0];
  #L1ad6e8.  v18:= v0 @kind object;
  #L1ad6ec.  v19:= 0I;
  #L1ad6f0.  call temp:= `valueOf`(v24) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1ad6f6.  v20:= temp @kind object;
  #L1ad6f8.  v18[v19]:= v20 @kind object;
  #L1ad6fc.  v19:= 1I;
  #L1ad700.  v0:= v23 @kind object;
  #L1ad704.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad708.  v20:= v0 @kind object;
  #L1ad70c.  v0:= v20 @kind object;
  #L1ad710.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad714.  v20:= v0 @kind wide;
  #L1ad718.  call temp:= `valueOf`(v20) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1ad71e.  v20:= temp @kind object;
  #L1ad720.  v18[v19]:= v20 @kind object;
  #L1ad724.  call temp:= `format`(v17, v18) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1ad72a.  v17:= temp @kind object;
  #L1ad72c.  call `<init>`(v16, v17) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1ad732.  throw v16;
  #L1ad734.  v16:= -1L;
  #L1ad738.  v16:= lcmp(v24, v16);
  #L1ad73c.  if v16 == 0 then goto L1ad760;
  #L1ad740.  v0:= v23 @kind object;
  #L1ad744.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad748.  v16:= v0 @kind object;
  #L1ad74c.  v0:= v16 @kind object;
  #L1ad750.  v0:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad754.  v16:= v0 @kind wide;
  #L1ad758.  v16:= lcmp(v24, v16);
  #L1ad75c.  if v16 != 0 then goto L1ad7b2;
  #L1ad760.  v16:= 0I;
  #L1ad764.  v0:= v16 @kind object;
  #L1ad768.  v1:= v23 @kind object;
  #L1ad76c.  v1.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v0 @kind object;
  #L1ad770.  v0:= v24 @kind wide;
  #L1ad774.  v2:= v23 @kind object;
  #L1ad778.  v2.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1ad77c.  v16:= 0I;
  #L1ad780.  v0:= v16 @kind object;
  #L1ad784.  v1:= v23 @kind object;
  #L1ad788.  v1.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v0 @kind object;
  #L1ad78c.  v16:= -1I;
  #L1ad790.  v0:= v16;
  #L1ad794.  v1:= v23 @kind object;
  #L1ad798.  v1.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v0;
  #L1ad79c.  v16:= -1I;
  #L1ad7a0.  v0:= v16;
  #L1ad7a4.  v1:= v23 @kind object;
  #L1ad7a8.  v1.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v0;
  #L1ad7ac.  v16:= -1I;
  #L1ad7b0.  return v16;
  #L1ad7b2.  v8:= 0L;
  #L1ad7b6.  v0:= v23 @kind object;
  #L1ad7ba.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad7be.  v16:= v0 @kind object;
  #L1ad7c2.  v0:= v16 @kind object;
  #L1ad7c6.  v6:= v0.`okio.Buffer.size` @type ^`long` @kind wide;
  #L1ad7ca.  v0:= v23 @kind object;
  #L1ad7ce.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad7d2.  v16:= v0 @kind object;
  #L1ad7d6.  v0:= v16 @kind object;
  #L1ad7da.  v4:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ad7de.  v0:= v23 @kind object;
  #L1ad7e2.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad7e6.  v16:= v0 @kind object;
  #L1ad7ea.  v0:= v16 @kind object;
  #L1ad7ee.  v14:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ad7f2.  v0:= v23 @kind object;
  #L1ad7f6.  v0:= v0.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` @kind object;
  #L1ad7fa.  v16:= v0 @kind object;
  #L1ad7fe.  if v16 == 0 then goto L1ad856;
  #L1ad802.  v0:= v23 @kind object;
  #L1ad806.  v0:= v0.`okio.Buffer$UnsafeCursor.offset` @type ^`long` @kind wide;
  #L1ad80a.  v16:= v0 @kind wide;
  #L1ad80e.  v0:= v23 @kind object;
  #L1ad812.  v0:= v0.`okio.Buffer$UnsafeCursor.start` @type ^`int`;
  #L1ad816.  v18:= v0;
  #L1ad81a.  v0:= v23 @kind object;
  #L1ad81e.  v0:= v0.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` @kind object;
  #L1ad822.  v19:= v0 @kind object;
  #L1ad826.  v0:= v19 @kind object;
  #L1ad82a.  v0:= v0.`okio.Segment.pos` @type ^`int`;
  #L1ad82e.  v19:= v0;
  #L1ad832.  v18:= v18 - v19 @kind int;
  #L1ad836.  v0:= v18;
  #L1ad83a.  v0:= (`long`) v0 @kind i2l;
  #L1ad83c.  v18:= v0 @kind wide;
  #L1ad840.  v12:= v16 - v18 @kind long;
  #L1ad844.  v16:= lcmp(v12, v24);
  #L1ad848.  if v16 <= 0 then goto L1ad8bc;
  #L1ad84c.  v6:= v12 @kind wide;
  #L1ad84e.  v0:= v23 @kind object;
  #L1ad852.  v14:= v0.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` @kind object;
  #L1ad856.  v16:= v6 - v24 @kind long;
  #L1ad85a.  v18:= v24 - v8 @kind long;
  #L1ad85e.  v16:= lcmp(v16, v18);
  #L1ad862.  if v16 <= 0 then goto L1ad8c8;
  #L1ad866.  v5:= v4 @kind object;
  #L1ad868.  v10:= v8 @kind wide;
  #L1ad86a.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L1ad86e.  v16:= v0;
  #L1ad872.  v0:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ad876.  v17:= v0;
  #L1ad87a.  v16:= v16 - v17 @kind int;
  #L1ad87e.  v0:= v16;
  #L1ad882.  v0:= (`long`) v0 @kind i2l;
  #L1ad884.  v16:= v0 @kind wide;
  #L1ad888.  v16:= v16 + v10 @kind long;
  #L1ad88c.  v16:= lcmp(v24, v16);
  #L1ad890.  if v16 < 0 then goto L1ad8fc;
  #L1ad894.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L1ad898.  v16:= v0;
  #L1ad89c.  v0:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ad8a0.  v17:= v0;
  #L1ad8a4.  v16:= v16 - v17 @kind int;
  #L1ad8a8.  v0:= v16;
  #L1ad8ac.  v0:= (`long`) v0 @kind i2l;
  #L1ad8ae.  v16:= v0 @kind wide;
  #L1ad8b2.  v10:= v10 + v16 @kind long;
  #L1ad8b6.  v5:= v5.`okio.Segment.next` @type ^`okio.Segment` @kind object;
  #L1ad8ba.  goto L1ad86a;
  #L1ad8bc.  v8:= v12 @kind wide;
  #L1ad8be.  v0:= v23 @kind object;
  #L1ad8c2.  v4:= v0.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` @kind object;
  #L1ad8c6.  goto L1ad856;
  #L1ad8c8.  v5:= v14 @kind object;
  #L1ad8ca.  v10:= v6 @kind wide;
  #L1ad8cc.  v16:= lcmp(v10, v24);
  #L1ad8d0.  if v16 <= 0 then goto L1ad8fc;
  #L1ad8d4.  v5:= v5.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ad8d8.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L1ad8dc.  v16:= v0;
  #L1ad8e0.  v0:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ad8e4.  v17:= v0;
  #L1ad8e8.  v16:= v16 - v17 @kind int;
  #L1ad8ec.  v0:= v16;
  #L1ad8f0.  v0:= (`long`) v0 @kind i2l;
  #L1ad8f2.  v16:= v0 @kind wide;
  #L1ad8f6.  v10:= v10 - v16 @kind long;
  #L1ad8fa.  goto L1ad8cc;
  #L1ad8fc.  v0:= v23 @kind object;
  #L1ad900.  v0:= v0.`okio.Buffer$UnsafeCursor.readWrite` @type ^`boolean` @kind boolean;
  #L1ad904.  v16:= v0;
  #L1ad908.  if v16 == 0 then goto L1ad96a;
  #L1ad90c.  v0:= v5.`okio.Segment.shared` @type ^`boolean` @kind boolean;
  #L1ad910.  v16:= v0;
  #L1ad914.  if v16 == 0 then goto L1ad96a;
  #L1ad918.  call temp:= `unsharedCopy`(v5) @signature `Lokio/Segment;.unsharedCopy:()Lokio/Segment;` @kind virtual;
  #L1ad91e.  v15:= temp @kind object;
  #L1ad920.  v0:= v23 @kind object;
  #L1ad924.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad928.  v16:= v0 @kind object;
  #L1ad92c.  v0:= v16 @kind object;
  #L1ad930.  v0:= v0.`okio.Buffer.head` @type ^`okio.Segment` @kind object;
  #L1ad934.  v16:= v0 @kind object;
  #L1ad938.  v0:= v16 @kind object;
  #L1ad93c.  if v0 != v5 then goto L1ad954;
  #L1ad940.  v0:= v23 @kind object;
  #L1ad944.  v0:= v0.`okio.Buffer$UnsafeCursor.buffer` @type ^`okio.Buffer` @kind object;
  #L1ad948.  v16:= v0 @kind object;
  #L1ad94c.  v0:= v16 @kind object;
  #L1ad950.  v0.`okio.Buffer.head` @type ^`okio.Segment` := v15 @kind object;
  #L1ad954.  call temp:= `push`(v5, v15) @signature `Lokio/Segment;.push:(Lokio/Segment;)Lokio/Segment;` @kind virtual;
  #L1ad95a.  v5:= temp @kind object;
  #L1ad95c.  v0:= v5.`okio.Segment.prev` @type ^`okio.Segment` @kind object;
  #L1ad960.  v16:= v0 @kind object;
  #L1ad964.  call temp:= `pop`(v16) @signature `Lokio/Segment;.pop:()Lokio/Segment;` @kind virtual;
  #L1ad96a.  v0:= v23 @kind object;
  #L1ad96e.  v0.`okio.Buffer$UnsafeCursor.segment` @type ^`okio.Segment` := v5 @kind object;
  #L1ad972.  v0:= v24 @kind wide;
  #L1ad976.  v2:= v23 @kind object;
  #L1ad97a.  v2.`okio.Buffer$UnsafeCursor.offset` @type ^`long` := v0 @kind wide;
  #L1ad97e.  v0:= v5.`okio.Segment.data` @type ^`byte`[] @kind object;
  #L1ad982.  v16:= v0 @kind object;
  #L1ad986.  v0:= v16 @kind object;
  #L1ad98a.  v1:= v23 @kind object;
  #L1ad98e.  v1.`okio.Buffer$UnsafeCursor.data` @type ^`byte`[] := v0 @kind object;
  #L1ad992.  v0:= v5.`okio.Segment.pos` @type ^`int`;
  #L1ad996.  v16:= v0;
  #L1ad99a.  v18:= v24 - v10 @kind long;
  #L1ad99e.  v0:= v18 @kind wide;
  #L1ad9a2.  v0:= (`int`) v0 @kind l2i;
  #L1ad9a4.  v17:= v0;
  #L1ad9a8.  v16:= v16 + v17 @kind int;
  #L1ad9ac.  v0:= v16;
  #L1ad9b0.  v1:= v23 @kind object;
  #L1ad9b4.  v1.`okio.Buffer$UnsafeCursor.start` @type ^`int` := v0;
  #L1ad9b8.  v0:= v5.`okio.Segment.limit` @type ^`int`;
  #L1ad9bc.  v16:= v0;
  #L1ad9c0.  v0:= v16;
  #L1ad9c4.  v1:= v23 @kind object;
  #L1ad9c8.  v1.`okio.Buffer$UnsafeCursor.end` @type ^`int` := v0;
  #L1ad9cc.  v0:= v23 @kind object;
  #L1ad9d0.  v0:= v0.`okio.Buffer$UnsafeCursor.end` @type ^`int`;
  #L1ad9d4.  v16:= v0;
  #L1ad9d8.  v0:= v23 @kind object;
  #L1ad9dc.  v0:= v0.`okio.Buffer$UnsafeCursor.start` @type ^`int`;
  #L1ad9e0.  v17:= v0;
  #L1ad9e4.  v16:= v16 - v17 @kind int;
  #L1ad9e8.  goto L1ad7b0;
}
