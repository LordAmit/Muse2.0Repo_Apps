record `okhttp3.ConnectionSpec$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.cipherSuites` @AccessFlag ;
  `boolean` `okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @AccessFlag ;
  `boolean` `okhttp3.ConnectionSpec$Builder.tls` @AccessFlag ;
  `java.lang.String`[] `okhttp3.ConnectionSpec$Builder.tlsVersions` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v1 @kind this, `okhttp3.ConnectionSpec` v2 @kind object @name `connectionSpec`) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L197114.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19711a.  v0:= v2.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L19711e.  v1.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v0 @kind boolean;
  #L197122.  v0:= v2.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L197126.  v1.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L19712a.  v0:= v2.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L19712e.  v1.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L197132.  v0:= v2.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L197136.  v1.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v0 @kind boolean;
  #L19713a.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec$Builder` v0 @kind this, `boolean` v1 @name `tls`) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L19714c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L197152.  v0.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` := v1 @kind boolean;
  #L197156.  return @kind void;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledCipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledCipherSuites:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L197168.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L19716c.  if v0 != 0 then goto L197180;
  #L197170.  v0:= new `java.lang.IllegalStateException`;
  #L197174.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L197178.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19717e.  throw v0;
  #L197180.  v0:= 0I;
  #L197182.  v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L197186.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `allEnabledTlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.allEnabledTlsVersions:()Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L197198.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L19719c.  if v0 != 0 then goto L1971b0;
  #L1971a0.  v0:= new `java.lang.IllegalStateException`;
  #L1971a4.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L1971a8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1971ae.  throw v0;
  #L1971b0.  v0:= 0I;
  #L1971b2.  v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L1971b6.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec` `build`(`okhttp3.ConnectionSpec$Builder` v1 @kind this) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1971c8.  v0:= new `okhttp3.ConnectionSpec`;
  #L1971cc.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @kind direct;
  #L1971d2.  return v0 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `java.lang.String`[] v3 @kind object @name `cipherSuites`) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1971e4.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L1971e8.  if v0 != 0 then goto L1971fc;
  #L1971ec.  v0:= new `java.lang.IllegalStateException`;
  #L1971f0.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L1971f4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1971fa.  throw v0;
  #L1971fc.  v0:= length @variable v3;
  #L1971fe.  if v0 != 0 then goto L197212;
  #L197202.  v0:= new `java.lang.IllegalArgumentException`;
  #L197206.  v1:= "At least one cipher suite is required" @kind object;
  #L19720a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L197210.  throw v0;
  #L197212.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L197218.  v0:= temp @kind object;
  #L19721a.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L19721e.  v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L197222.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `cipherSuites`(`okhttp3.ConnectionSpec$Builder` v4 @kind this, `okhttp3.CipherSuite`[] v5 @kind object @name `cipherSuites`) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L197234.  v2:= v4.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L197238.  if v2 != 0 then goto L19724c;
  #L19723c.  v2:= new `java.lang.IllegalStateException`;
  #L197240.  v3:= "no cipher suites for cleartext connections" @kind object;
  #L197244.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19724a.  throw v2;
  #L19724c.  v2:= length @variable v5;
  #L19724e.  v1:= new `java.lang.String`[v2];
  #L197252.  v0:= 0I;
  #L197254.  v2:= length @variable v5;
  #L197256.  if v0 >= v2 then goto L19726c;
  #L19725a.  v2:= v5[v0] @kind object;
  #L19725e.  v2:= v2.`okhttp3.CipherSuite.javaName` @type ^`java.lang.String` @kind object;
  #L197262.  v1[v0]:= v2 @kind object;
  #L197266.  v0:= v0 + 1;
  #L19726a.  goto L197254;
  #L19726c.  call temp:= `cipherSuites`(v4, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L197272.  v2:= temp @kind object;
  #L197274.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `supportsTlsExtensions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `boolean` v3 @name `supportsTlsExtensions`) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L197288.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L19728c.  if v0 != 0 then goto L1972a0;
  #L197290.  v0:= new `java.lang.IllegalStateException`;
  #L197294.  v1:= "no TLS extensions for cleartext connections" @kind object;
  #L197298.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19729e.  throw v0;
  #L1972a0.  v2.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` := v3 @kind boolean;
  #L1972a4.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v2 @kind this, `java.lang.String`[] v3 @kind object @name `tlsVersions`) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1972b8.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L1972bc.  if v0 != 0 then goto L1972d0;
  #L1972c0.  v0:= new `java.lang.IllegalStateException`;
  #L1972c4.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L1972c8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1972ce.  throw v0;
  #L1972d0.  v0:= length @variable v3;
  #L1972d2.  if v0 != 0 then goto L1972e6;
  #L1972d6.  v0:= new `java.lang.IllegalArgumentException`;
  #L1972da.  v1:= "At least one TLS version is required" @kind object;
  #L1972de.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1972e4.  throw v0;
  #L1972e6.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1972ec.  v0:= temp @kind object;
  #L1972ee.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L1972f2.  v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L1972f6.  return v2 @kind object;
}
procedure `okhttp3.ConnectionSpec$Builder` `tlsVersions`(`okhttp3.ConnectionSpec$Builder` v4 @kind this, `okhttp3.TlsVersion`[] v5 @kind object @name `tlsVersions`) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L197308.  v2:= v4.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L19730c.  if v2 != 0 then goto L197320;
  #L197310.  v2:= new `java.lang.IllegalStateException`;
  #L197314.  v3:= "no TLS versions for cleartext connections" @kind object;
  #L197318.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19731e.  throw v2;
  #L197320.  v2:= length @variable v5;
  #L197322.  v1:= new `java.lang.String`[v2];
  #L197326.  v0:= 0I;
  #L197328.  v2:= length @variable v5;
  #L19732a.  if v0 >= v2 then goto L197340;
  #L19732e.  v2:= v5[v0] @kind object;
  #L197332.  v2:= v2.`okhttp3.TlsVersion.javaName` @type ^`java.lang.String` @kind object;
  #L197336.  v1[v0]:= v2 @kind object;
  #L19733a.  v0:= v0 + 1;
  #L19733e.  goto L197328;
  #L197340.  call temp:= `tlsVersions`(v4, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L197346.  v2:= temp @kind object;
  #L197348.  return v2 @kind object;
}
