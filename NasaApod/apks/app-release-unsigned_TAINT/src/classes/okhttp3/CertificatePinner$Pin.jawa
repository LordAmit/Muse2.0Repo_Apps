record `okhttp3.CertificatePinner$Pin` @kind class @AccessFlag FINAL {
  `java.lang.String` `okhttp3.CertificatePinner$Pin.canonicalHostname` @AccessFlag FINAL;
  `okio.ByteString` `okhttp3.CertificatePinner$Pin.hash` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.hashAlgorithm` @AccessFlag FINAL;
  `java.lang.String` `okhttp3.CertificatePinner$Pin.pattern` @AccessFlag FINAL;
}
global `java.lang.String` `@@okhttp3.CertificatePinner$Pin.WILDCARD` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.CertificatePinner$Pin` v3 @kind this, `java.lang.String` v4 @kind object @name `pattern`, `java.lang.String` v5 @kind object @name `pin`) @signature `Lokhttp3/CertificatePinner$Pin;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L19560c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L195612.  v3.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` := v4 @kind object;
  #L195616.  v0:= "*." @kind object;
  #L19561a.  call temp:= `startsWith`(v4, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L195620.  v0:= temp;
  #L195622.  if v0 == 0 then goto L1956e6;
  #L195626.  v0:= new `java.lang.StringBuilder`;
  #L19562a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L195630.  v1:= "http://" @kind object;
  #L195634.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19563a.  v0:= temp @kind object;
  #L19563c.  v1:= "*." @kind object;
  #L195640.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L195646.  v1:= temp;
  #L195648.  call temp:= `substring`(v4, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L19564e.  v1:= temp @kind object;
  #L195650.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L195656.  v0:= temp @kind object;
  #L195658.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19565e.  v0:= temp @kind object;
  #L195660.  call temp:= `parse`(v0) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L195666.  v0:= temp @kind object;
  #L195668.  call temp:= `host`(v0) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L19566e.  v0:= temp @kind object;
  #L195670.  v3.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` := v0 @kind object;
  #L195674.  v0:= "sha1/" @kind object;
  #L195678.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L19567e.  v0:= temp;
  #L195680.  if v0 == 0 then goto L19571e;
  #L195684.  v0:= "sha1/" @kind object;
  #L195688.  v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v0 @kind object;
  #L19568c.  v0:= "sha1/" @kind object;
  #L195690.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L195696.  v0:= temp;
  #L195698.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L19569e.  v0:= temp @kind object;
  #L1956a0.  call temp:= `decodeBase64`(v0) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L1956a6.  v0:= temp @kind object;
  #L1956a8.  v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v0 @kind object;
  #L1956ac.  v0:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L1956b0.  if v0 != 0 then goto L19578a;
  #L1956b4.  v0:= new `java.lang.IllegalArgumentException`;
  #L1956b8.  v1:= new `java.lang.StringBuilder`;
  #L1956bc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1956c2.  v2:= "pins must be base64: " @kind object;
  #L1956c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1956cc.  v1:= temp @kind object;
  #L1956ce.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1956d4.  v1:= temp @kind object;
  #L1956d6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1956dc.  v1:= temp @kind object;
  #L1956de.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1956e4.  throw v0;
  #L1956e6.  v0:= new `java.lang.StringBuilder`;
  #L1956ea.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1956f0.  v1:= "http://" @kind object;
  #L1956f4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1956fa.  v0:= temp @kind object;
  #L1956fc.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L195702.  v0:= temp @kind object;
  #L195704.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19570a.  v0:= temp @kind object;
  #L19570c.  call temp:= `parse`(v0) @signature `Lokhttp3/HttpUrl;.parse:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind static;
  #L195712.  v0:= temp @kind object;
  #L195714.  call temp:= `host`(v0) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L19571a.  v0:= temp @kind object;
  #L19571c.  goto L195670;
  #L19571e.  v0:= "sha256/" @kind object;
  #L195722.  call temp:= `startsWith`(v5, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L195728.  v0:= temp;
  #L19572a.  if v0 == 0 then goto L195758;
  #L19572e.  v0:= "sha256/" @kind object;
  #L195732.  v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` := v0 @kind object;
  #L195736.  v0:= "sha256/" @kind object;
  #L19573a.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L195740.  v0:= temp;
  #L195742.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L195748.  v0:= temp @kind object;
  #L19574a.  call temp:= `decodeBase64`(v0) @signature `Lokio/ByteString;.decodeBase64:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L195750.  v0:= temp @kind object;
  #L195752.  v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` := v0 @kind object;
  #L195756.  goto L1956ac;
  #L195758.  v0:= new `java.lang.IllegalArgumentException`;
  #L19575c.  v1:= new `java.lang.StringBuilder`;
  #L195760.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L195766.  v2:= "pins must start with 'sha256/' or 'sha1/': " @kind object;
  #L19576a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L195770.  v1:= temp @kind object;
  #L195772.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L195778.  v1:= temp @kind object;
  #L19577a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L195780.  v1:= temp @kind object;
  #L195782.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L195788.  throw v0;
  #L19578a.  return @kind void;
}
procedure `boolean` `equals`(`okhttp3.CertificatePinner$Pin` v2 @kind this, `java.lang.Object` v3 @kind object @name `other`) @signature `Lokhttp3/CertificatePinner$Pin;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19579c.  v0:= instanceof @variable v3 @type ^`okhttp3.CertificatePinner$Pin` @kind boolean;
  #L1957a0.  if v0 == 0 then goto L1957f4;
  #L1957a4.  v1:= v2.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L1957a8.  v0:= v3 @kind object;
  #L1957aa.  v0:= (`okhttp3.CertificatePinner$Pin`) v0 @kind object;
  #L1957ae.  v0:= v0.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L1957b2.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1957b8.  v0:= temp;
  #L1957ba.  if v0 == 0 then goto L1957f4;
  #L1957be.  v1:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L1957c2.  v0:= v3 @kind object;
  #L1957c4.  v0:= (`okhttp3.CertificatePinner$Pin`) v0 @kind object;
  #L1957c8.  v0:= v0.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L1957cc.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1957d2.  v0:= temp;
  #L1957d4.  if v0 == 0 then goto L1957f4;
  #L1957d8.  v0:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L1957dc.  v3:= (`okhttp3.CertificatePinner$Pin`) v3 @kind object;
  #L1957e0.  v1:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L1957e4.  call temp:= `equals`(v0, v1) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1957ea.  v0:= temp;
  #L1957ec.  if v0 == 0 then goto L1957f4;
  #L1957f0.  v0:= 1I;
  #L1957f2.  return v0;
  #L1957f4.  v0:= 0I;
  #L1957f6.  goto L1957f2;
}
procedure `int` `hashCode`(`okhttp3.CertificatePinner$Pin` v3 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L195808.  v0:= 17I;
  #L19580c.  v1:= v3.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L195810.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L195816.  v1:= temp;
  #L195818.  v0:= v1 + 527;
  #L19581c.  v1:= v0 * 31;
  #L195820.  v2:= v3.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L195824.  call temp:= `hashCode`(v2) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L19582a.  v2:= temp;
  #L19582c.  v0:= v1 + v2 @kind int;
  #L195830.  v1:= v0 * 31;
  #L195834.  v2:= v3.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L195838.  call temp:= `hashCode`(v2) @signature `Lokio/ByteString;.hashCode:()I` @kind virtual;
  #L19583e.  v2:= temp;
  #L195840.  v0:= v1 + v2 @kind int;
  #L195844.  return v0;
}
procedure `boolean` `matches`(`okhttp3.CertificatePinner$Pin` v7 @kind this, `java.lang.String` v8 @kind object @name `hostname`) @signature `Lokhttp3/CertificatePinner$Pin;.matches:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L195858.  v1:= 0I;
  #L19585a.  v0:= v7.`okhttp3.CertificatePinner$Pin.pattern` @type ^`java.lang.String` @kind object;
  #L19585e.  v2:= "*." @kind object;
  #L195862.  call temp:= `startsWith`(v0, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L195868.  v0:= temp;
  #L19586a.  if v0 == 0 then goto L1958c0;
  #L19586e.  v0:= 46I;
  #L195872.  call temp:= `indexOf`(v8, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L195878.  v6:= temp;
  #L19587a.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L195880.  v0:= temp;
  #L195882.  v0:= v0 - v6 @kind int;
  #L195884.  v0:= v0 + -1;
  #L195888.  v2:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L19588c.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L195892.  v2:= temp;
  #L195894.  if v0 != v2 then goto L1958be;
  #L195898.  v2:= v6 + 1;
  #L19589c.  v3:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L1958a0.  v0:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L1958a4.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1958aa.  v5:= temp;
  #L1958ac.  v0:= v8 @kind object;
  #L1958ae.  v4:= v1;
  #L1958b0.  call temp:= `regionMatches`(v0, v1, v2, v3, v4, v5) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L1958b6.  v0:= temp;
  #L1958b8.  if v0 == 0 then goto L1958be;
  #L1958bc.  v1:= 1I;
  #L1958be.  return v1;
  #L1958c0.  v0:= v7.`okhttp3.CertificatePinner$Pin.canonicalHostname` @type ^`java.lang.String` @kind object;
  #L1958c4.  call temp:= `equals`(v8, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1958ca.  v1:= temp;
  #L1958cc.  goto L1958be;
}
procedure `java.lang.String` `toString`(`okhttp3.CertificatePinner$Pin` v2 @kind this) @signature `Lokhttp3/CertificatePinner$Pin;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1958e0.  v0:= new `java.lang.StringBuilder`;
  #L1958e4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1958ea.  v1:= v2.`okhttp3.CertificatePinner$Pin.hashAlgorithm` @type ^`java.lang.String` @kind object;
  #L1958ee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1958f4.  v0:= temp @kind object;
  #L1958f6.  v1:= v2.`okhttp3.CertificatePinner$Pin.hash` @type ^`okio.ByteString` @kind object;
  #L1958fa.  call temp:= `base64`(v1) @signature `Lokio/ByteString;.base64:()Ljava/lang/String;` @kind virtual;
  #L195900.  v1:= temp @kind object;
  #L195902.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L195908.  v0:= temp @kind object;
  #L19590a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L195910.  v0:= temp @kind object;
  #L195912.  return v0 @kind object;
}
