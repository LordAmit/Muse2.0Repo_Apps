record `okhttp3.Headers$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `okhttp3.Headers$Builder.namesAndValues` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.Headers$Builder` v2 @kind this) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1996a4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1996aa.  v0:= new `java.util.ArrayList`;
  #L1996ae.  v1:= 20I;
  #L1996b2.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L1996b8.  v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` := v0 @kind object;
  #L1996bc.  return @kind void;
}
procedure `void` `checkNameAndValue`(`okhttp3.Headers$Builder` v11 @kind this, `java.lang.String` v12 @kind object @name `name`, `java.lang.String` v13 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.checkNameAndValue:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1996d0.  v4:= 127I;
  #L1996d4.  v10:= 3I;
  #L1996d6.  v9:= 2I;
  #L1996d8.  v8:= 1I;
  #L1996da.  v7:= 0I;
  #L1996dc.  if v12 != 0 then goto L1996f0;
  #L1996e0.  v3:= new `java.lang.NullPointerException`;
  #L1996e4.  v4:= "name == null" @kind object;
  #L1996e8.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1996ee.  throw v3;
  #L1996f0.  call temp:= `isEmpty`(v12) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L1996f6.  v3:= temp;
  #L1996f8.  if v3 == 0 then goto L19970c;
  #L1996fc.  v3:= new `java.lang.IllegalArgumentException`;
  #L199700.  v4:= "name is empty" @kind object;
  #L199704.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19970a.  throw v3;
  #L19970c.  v1:= 0I;
  #L19970e.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L199714.  v2:= temp;
  #L199716.  if v1 >= v2 then goto L19976c;
  #L19971a.  call temp:= `charAt`(v12, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L199720.  v0:= temp;
  #L199722.  v3:= 32I;
  #L199726.  if v0 <= v3 then goto L19972e;
  #L19972a.  if v0 < v4 then goto L199766;
  #L19972e.  v3:= new `java.lang.IllegalArgumentException`;
  #L199732.  v4:= "Unexpected char %#04x at %d in header name: %s" @kind object;
  #L199736.  v5:= new `java.lang.Object`[v10];
  #L19973a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L199740.  v6:= temp @kind object;
  #L199742.  v5[v7]:= v6 @kind object;
  #L199746.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L19974c.  v6:= temp @kind object;
  #L19974e.  v5[v8]:= v6 @kind object;
  #L199752.  v5[v9]:= v12 @kind object;
  #L199756.  call temp:= `format`(v4, v5) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L19975c.  v4:= temp @kind object;
  #L19975e.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L199764.  throw v3;
  #L199766.  v1:= v1 + 1;
  #L19976a.  goto L199716;
  #L19976c.  if v13 != 0 then goto L1997ae;
  #L199770.  v3:= new `java.lang.NullPointerException`;
  #L199774.  v4:= new `java.lang.StringBuilder`;
  #L199778.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19977e.  v5:= "value for name " @kind object;
  #L199782.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L199788.  v4:= temp @kind object;
  #L19978a.  call temp:= `append`(v4, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L199790.  v4:= temp @kind object;
  #L199792.  v5:= " == null" @kind object;
  #L199796.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19979c.  v4:= temp @kind object;
  #L19979e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1997a4.  v4:= temp @kind object;
  #L1997a6.  call `<init>`(v3, v4) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1997ac.  throw v3;
  #L1997ae.  v1:= 0I;
  #L1997b0.  call temp:= `length`(v13) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1997b6.  v2:= temp;
  #L1997b8.  if v1 >= v2 then goto L19981c;
  #L1997bc.  call temp:= `charAt`(v13, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1997c2.  v0:= temp;
  #L1997c4.  v3:= 31I;
  #L1997c8.  if v0 > v3 then goto L1997d4;
  #L1997cc.  v3:= 9I;
  #L1997d0.  if v0 != v3 then goto L1997d8;
  #L1997d4.  if v0 < v4 then goto L199816;
  #L1997d8.  v3:= new `java.lang.IllegalArgumentException`;
  #L1997dc.  v4:= "Unexpected char %#04x at %d in %s value: %s" @kind object;
  #L1997e0.  v5:= 4I;
  #L1997e2.  v5:= new `java.lang.Object`[v5];
  #L1997e6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1997ec.  v6:= temp @kind object;
  #L1997ee.  v5[v7]:= v6 @kind object;
  #L1997f2.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1997f8.  v6:= temp @kind object;
  #L1997fa.  v5[v8]:= v6 @kind object;
  #L1997fe.  v5[v9]:= v12 @kind object;
  #L199802.  v5[v10]:= v13 @kind object;
  #L199806.  call temp:= `format`(v4, v5) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L19980c.  v4:= temp @kind object;
  #L19980e.  call `<init>`(v3, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L199814.  throw v3;
  #L199816.  v1:= v1 + 1;
  #L19981a.  goto L1997b8;
  #L19981c.  return @kind void;
}
procedure `okhttp3.Headers$Builder` `add`(`okhttp3.Headers$Builder` v4 @kind this, `java.lang.String` v5 @kind object @name `line`) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L199830.  v1:= ":" @kind object;
  #L199834.  call temp:= `indexOf`(v5, v1) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L19983a.  v0:= temp;
  #L19983c.  v1:= -1I;
  #L19983e.  if v0 != v1 then goto L199874;
  #L199842.  v1:= new `java.lang.IllegalArgumentException`;
  #L199846.  v2:= new `java.lang.StringBuilder`;
  #L19984a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L199850.  v3:= "Unexpected header: " @kind object;
  #L199854.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19985a.  v2:= temp @kind object;
  #L19985c.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L199862.  v2:= temp @kind object;
  #L199864.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19986a.  v2:= temp @kind object;
  #L19986c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L199872.  throw v1;
  #L199874.  v1:= 0I;
  #L199876.  call temp:= `substring`(v5, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L19987c.  v1:= temp @kind object;
  #L19987e.  call temp:= `trim`(v1) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L199884.  v1:= temp @kind object;
  #L199886.  v2:= v0 + 1;
  #L19988a.  call temp:= `substring`(v5, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L199890.  v2:= temp @kind object;
  #L199892.  call temp:= `add`(v4, v1, v2) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L199898.  v1:= temp @kind object;
  #L19989a.  return v1 @kind object;
}
procedure `okhttp3.Headers$Builder` `add`(`okhttp3.Headers$Builder` v1 @kind this, `java.lang.String` v2 @kind object @name `name`, `java.lang.String` v3 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.add:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1998ac.  call `checkNameAndValue`(v1, v2, v3) @signature `Lokhttp3/Headers$Builder;.checkNameAndValue:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L1998b2.  call temp:= `addLenient`(v1, v2, v3) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L1998b8.  v0:= temp @kind object;
  #L1998ba.  return v0 @kind object;
}
procedure `okhttp3.Headers$Builder` `addLenient`(`okhttp3.Headers$Builder` v3 @kind this, `java.lang.String` v4 @kind object @name `line`) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1998cc.  v2:= 1I;
  #L1998ce.  v1:= ":" @kind object;
  #L1998d2.  call temp:= `indexOf`(v4, v1, v2) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;I)I` @kind virtual;
  #L1998d8.  v0:= temp;
  #L1998da.  v1:= -1I;
  #L1998dc.  if v0 == v1 then goto L199900;
  #L1998e0.  v1:= 0I;
  #L1998e2.  call temp:= `substring`(v4, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L1998e8.  v1:= temp @kind object;
  #L1998ea.  v2:= v0 + 1;
  #L1998ee.  call temp:= `substring`(v4, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L1998f4.  v2:= temp @kind object;
  #L1998f6.  call temp:= `addLenient`(v3, v1, v2) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L1998fc.  v1:= temp @kind object;
  #L1998fe.  return v1 @kind object;
  #L199900.  v1:= ":" @kind object;
  #L199904.  call temp:= `startsWith`(v4, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L19990a.  v1:= temp;
  #L19990c.  if v1 == 0 then goto L199926;
  #L199910.  v1:= "" @kind object;
  #L199914.  call temp:= `substring`(v4, v2) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L19991a.  v2:= temp @kind object;
  #L19991c.  call temp:= `addLenient`(v3, v1, v2) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L199922.  v1:= temp @kind object;
  #L199924.  goto L1998fe;
  #L199926.  v1:= "" @kind object;
  #L19992a.  call temp:= `addLenient`(v3, v1, v4) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L199930.  v1:= temp @kind object;
  #L199932.  goto L1998fe;
}
procedure `okhttp3.Headers$Builder` `addLenient`(`okhttp3.Headers$Builder` v2 @kind this, `java.lang.String` v3 @kind object @name `name`, `java.lang.String` v4 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L199944.  v0:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L199948.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L19994e.  v0:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L199952.  call temp:= `trim`(v4) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L199958.  v1:= temp @kind object;
  #L19995a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L199960.  return v2 @kind object;
}
procedure `okhttp3.Headers` `build`(`okhttp3.Headers$Builder` v1 @kind this) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L199974.  v0:= new `okhttp3.Headers`;
  #L199978.  call `<init>`(v0, v1) @signature `Lokhttp3/Headers;.<init>:(Lokhttp3/Headers$Builder;)V` @kind direct;
  #L19997e.  return v0 @kind object;
}
procedure `java.lang.String` `get`(`okhttp3.Headers$Builder` v3 @kind this, `java.lang.String` v4 @kind object @name `name`) @signature `Lokhttp3/Headers$Builder;.get:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L199990.  v1:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L199994.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L19999a.  v1:= temp;
  #L19999c.  v0:= v1 + -2;
  #L1999a0.  if v0 < 0 then goto L1999dc;
  #L1999a4.  v1:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L1999a8.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1999ae.  v1:= temp @kind object;
  #L1999b0.  v1:= (`java.lang.String`) v1 @kind object;
  #L1999b4.  call temp:= `equalsIgnoreCase`(v4, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1999ba.  v1:= temp;
  #L1999bc.  if v1 == 0 then goto L1999d6;
  #L1999c0.  v1:= v3.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L1999c4.  v2:= v0 + 1;
  #L1999c8.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1999ce.  v1:= temp @kind object;
  #L1999d0.  v1:= (`java.lang.String`) v1 @kind object;
  #L1999d4.  return v1 @kind object;
  #L1999d6.  v0:= v0 + -2;
  #L1999da.  goto L1999a0;
  #L1999dc.  v1:= 0I;
  #L1999de.  goto L1999d4;
}
procedure `okhttp3.Headers$Builder` `removeAll`(`okhttp3.Headers$Builder` v2 @kind this, `java.lang.String` v3 @kind object @name `name`) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1999f0.  v0:= 0I;
  #L1999f2.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L1999f6.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1999fc.  v1:= temp;
  #L1999fe.  if v0 >= v1 then goto L199a3c;
  #L199a02.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L199a06.  call temp:= `get`(v1, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L199a0c.  v1:= temp @kind object;
  #L199a0e.  v1:= (`java.lang.String`) v1 @kind object;
  #L199a12.  call temp:= `equalsIgnoreCase`(v3, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L199a18.  v1:= temp;
  #L199a1a.  if v1 == 0 then goto L199a36;
  #L199a1e.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L199a22.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L199a28.  v1:= v2.`okhttp3.Headers$Builder.namesAndValues` @type ^`java.util.List` @kind object;
  #L199a2c.  call temp:= `remove`(v1, v0) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L199a32.  v0:= v0 + -2;
  #L199a36.  v0:= v0 + 2;
  #L199a3a.  goto L1999f2;
  #L199a3c.  return v2 @kind object;
}
procedure `okhttp3.Headers$Builder` `set`(`okhttp3.Headers$Builder` v0 @kind this, `java.lang.String` v1 @kind object @name `name`, `java.lang.String` v2 @kind object @name `value`) @signature `Lokhttp3/Headers$Builder;.set:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @AccessFlag PUBLIC {
    temp;

  #L199a50.  call `checkNameAndValue`(v0, v1, v2) @signature `Lokhttp3/Headers$Builder;.checkNameAndValue:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L199a56.  call temp:= `removeAll`(v0, v1) @signature `Lokhttp3/Headers$Builder;.removeAll:(Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L199a5c.  call temp:= `addLenient`(v0, v1, v2) @signature `Lokhttp3/Headers$Builder;.addLenient:(Ljava/lang/String;Ljava/lang/String;)Lokhttp3/Headers$Builder;` @kind virtual;
  #L199a62.  return v0 @kind object;
}
