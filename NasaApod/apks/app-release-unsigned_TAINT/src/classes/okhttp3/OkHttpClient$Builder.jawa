record `okhttp3.OkHttpClient$Builder` @kind class @AccessFlag PUBLIC_FINAL {
  `okhttp3.Authenticator` `okhttp3.OkHttpClient$Builder.authenticator` @AccessFlag ;
  `okhttp3.Cache` `okhttp3.OkHttpClient$Builder.cache` @AccessFlag ;
  `okhttp3.internal.tls.CertificateChainCleaner` `okhttp3.OkHttpClient$Builder.certificateChainCleaner` @AccessFlag ;
  `okhttp3.CertificatePinner` `okhttp3.OkHttpClient$Builder.certificatePinner` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.connectTimeout` @AccessFlag ;
  `okhttp3.ConnectionPool` `okhttp3.OkHttpClient$Builder.connectionPool` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.connectionSpecs` @AccessFlag ;
  `okhttp3.CookieJar` `okhttp3.OkHttpClient$Builder.cookieJar` @AccessFlag ;
  `okhttp3.Dispatcher` `okhttp3.OkHttpClient$Builder.dispatcher` @AccessFlag ;
  `okhttp3.Dns` `okhttp3.OkHttpClient$Builder.dns` @AccessFlag ;
  `okhttp3.EventListener$Factory` `okhttp3.OkHttpClient$Builder.eventListenerFactory` @AccessFlag ;
  `boolean` `okhttp3.OkHttpClient$Builder.followRedirects` @AccessFlag ;
  `boolean` `okhttp3.OkHttpClient$Builder.followSslRedirects` @AccessFlag ;
  `javax.net.ssl.HostnameVerifier` `okhttp3.OkHttpClient$Builder.hostnameVerifier` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.interceptors` @AccessFlag FINAL;
  `okhttp3.internal.cache.InternalCache` `okhttp3.OkHttpClient$Builder.internalCache` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.networkInterceptors` @AccessFlag FINAL;
  `int` `okhttp3.OkHttpClient$Builder.pingInterval` @AccessFlag ;
  `java.util.List` `okhttp3.OkHttpClient$Builder.protocols` @AccessFlag ;
  `java.net.Proxy` `okhttp3.OkHttpClient$Builder.proxy` @AccessFlag ;
  `okhttp3.Authenticator` `okhttp3.OkHttpClient$Builder.proxyAuthenticator` @AccessFlag ;
  `java.net.ProxySelector` `okhttp3.OkHttpClient$Builder.proxySelector` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.readTimeout` @AccessFlag ;
  `boolean` `okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @AccessFlag ;
  `javax.net.SocketFactory` `okhttp3.OkHttpClient$Builder.socketFactory` @AccessFlag ;
  `javax.net.ssl.SSLSocketFactory` `okhttp3.OkHttpClient$Builder.sslSocketFactory` @AccessFlag ;
  `int` `okhttp3.OkHttpClient$Builder.writeTimeout` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient$Builder` v3 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L19ccf0.  v2:= 10000I;
  #L19ccf4.  v1:= 1I;
  #L19ccf6.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19ccfc.  v0:= new `java.util.ArrayList`;
  #L19cd00.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L19cd06.  v3.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` := v0 @kind object;
  #L19cd0a.  v0:= new `java.util.ArrayList`;
  #L19cd0e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L19cd14.  v3.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` := v0 @kind object;
  #L19cd18.  v0:= new `okhttp3.Dispatcher`;
  #L19cd1c.  call `<init>`(v0) @signature `Lokhttp3/Dispatcher;.<init>:()V` @kind direct;
  #L19cd22.  v3.`okhttp3.OkHttpClient$Builder.dispatcher` @type ^`okhttp3.Dispatcher` := v0 @kind object;
  #L19cd26.  v0:= `@@okhttp3.OkHttpClient.DEFAULT_PROTOCOLS` @type ^`java.util.List` @kind object;
  #L19cd2a.  v3.`okhttp3.OkHttpClient$Builder.protocols` @type ^`java.util.List` := v0 @kind object;
  #L19cd2e.  v0:= `@@okhttp3.OkHttpClient.DEFAULT_CONNECTION_SPECS` @type ^`java.util.List` @kind object;
  #L19cd32.  v3.`okhttp3.OkHttpClient$Builder.connectionSpecs` @type ^`java.util.List` := v0 @kind object;
  #L19cd36.  v0:= `@@okhttp3.EventListener.NONE` @type ^`okhttp3.EventListener` @kind object;
  #L19cd3a.  call temp:= `factory`(v0) @signature `Lokhttp3/EventListener;.factory:(Lokhttp3/EventListener;)Lokhttp3/EventListener$Factory;` @kind static;
  #L19cd40.  v0:= temp @kind object;
  #L19cd42.  v3.`okhttp3.OkHttpClient$Builder.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` := v0 @kind object;
  #L19cd46.  call temp:= `getDefault`() @signature `Ljava/net/ProxySelector;.getDefault:()Ljava/net/ProxySelector;` @kind static;
  #L19cd4c.  v0:= temp @kind object;
  #L19cd4e.  v3.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` := v0 @kind object;
  #L19cd52.  v0:= `@@okhttp3.CookieJar.NO_COOKIES` @type ^`okhttp3.CookieJar` @kind object;
  #L19cd56.  v3.`okhttp3.OkHttpClient$Builder.cookieJar` @type ^`okhttp3.CookieJar` := v0 @kind object;
  #L19cd5a.  call temp:= `getDefault`() @signature `Ljavax/net/SocketFactory;.getDefault:()Ljavax/net/SocketFactory;` @kind static;
  #L19cd60.  v0:= temp @kind object;
  #L19cd62.  v3.`okhttp3.OkHttpClient$Builder.socketFactory` @type ^`javax.net.SocketFactory` := v0 @kind object;
  #L19cd66.  v0:= `@@okhttp3.internal.tls.OkHostnameVerifier.INSTANCE` @type ^`okhttp3.internal.tls.OkHostnameVerifier` @kind object;
  #L19cd6a.  v3.`okhttp3.OkHttpClient$Builder.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v0 @kind object;
  #L19cd6e.  v0:= `@@okhttp3.CertificatePinner.DEFAULT` @type ^`okhttp3.CertificatePinner` @kind object;
  #L19cd72.  v3.`okhttp3.OkHttpClient$Builder.certificatePinner` @type ^`okhttp3.CertificatePinner` := v0 @kind object;
  #L19cd76.  v0:= `@@okhttp3.Authenticator.NONE` @type ^`okhttp3.Authenticator` @kind object;
  #L19cd7a.  v3.`okhttp3.OkHttpClient$Builder.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L19cd7e.  v0:= `@@okhttp3.Authenticator.NONE` @type ^`okhttp3.Authenticator` @kind object;
  #L19cd82.  v3.`okhttp3.OkHttpClient$Builder.authenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L19cd86.  v0:= new `okhttp3.ConnectionPool`;
  #L19cd8a.  call `<init>`(v0) @signature `Lokhttp3/ConnectionPool;.<init>:()V` @kind direct;
  #L19cd90.  v3.`okhttp3.OkHttpClient$Builder.connectionPool` @type ^`okhttp3.ConnectionPool` := v0 @kind object;
  #L19cd94.  v0:= `@@okhttp3.Dns.SYSTEM` @type ^`okhttp3.Dns` @kind object;
  #L19cd98.  v3.`okhttp3.OkHttpClient$Builder.dns` @type ^`okhttp3.Dns` := v0 @kind object;
  #L19cd9c.  v3.`okhttp3.OkHttpClient$Builder.followSslRedirects` @type ^`boolean` := v1 @kind boolean;
  #L19cda0.  v3.`okhttp3.OkHttpClient$Builder.followRedirects` @type ^`boolean` := v1 @kind boolean;
  #L19cda4.  v3.`okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @type ^`boolean` := v1 @kind boolean;
  #L19cda8.  v3.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int` := v2;
  #L19cdac.  v3.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int` := v2;
  #L19cdb0.  v3.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int` := v2;
  #L19cdb4.  v0:= 0I;
  #L19cdb6.  v3.`okhttp3.OkHttpClient$Builder.pingInterval` @type ^`int` := v0;
  #L19cdba.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.OkHttpClient` v3 @kind object @name `okHttpClient`) @signature `Lokhttp3/OkHttpClient$Builder;.<init>:(Lokhttp3/OkHttpClient;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L19cdcc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L19cdd2.  v0:= new `java.util.ArrayList`;
  #L19cdd6.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L19cddc.  v2.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` := v0 @kind object;
  #L19cde0.  v0:= new `java.util.ArrayList`;
  #L19cde4.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L19cdea.  v2.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` := v0 @kind object;
  #L19cdee.  v0:= v3.`okhttp3.OkHttpClient.dispatcher` @type ^`okhttp3.Dispatcher` @kind object;
  #L19cdf2.  v2.`okhttp3.OkHttpClient$Builder.dispatcher` @type ^`okhttp3.Dispatcher` := v0 @kind object;
  #L19cdf6.  v0:= v3.`okhttp3.OkHttpClient.proxy` @type ^`java.net.Proxy` @kind object;
  #L19cdfa.  v2.`okhttp3.OkHttpClient$Builder.proxy` @type ^`java.net.Proxy` := v0 @kind object;
  #L19cdfe.  v0:= v3.`okhttp3.OkHttpClient.protocols` @type ^`java.util.List` @kind object;
  #L19ce02.  v2.`okhttp3.OkHttpClient$Builder.protocols` @type ^`java.util.List` := v0 @kind object;
  #L19ce06.  v0:= v3.`okhttp3.OkHttpClient.connectionSpecs` @type ^`java.util.List` @kind object;
  #L19ce0a.  v2.`okhttp3.OkHttpClient$Builder.connectionSpecs` @type ^`java.util.List` := v0 @kind object;
  #L19ce0e.  v0:= v2.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` @kind object;
  #L19ce12.  v1:= v3.`okhttp3.OkHttpClient.interceptors` @type ^`java.util.List` @kind object;
  #L19ce16.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L19ce1c.  v0:= v2.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` @kind object;
  #L19ce20.  v1:= v3.`okhttp3.OkHttpClient.networkInterceptors` @type ^`java.util.List` @kind object;
  #L19ce24.  call temp:= `addAll`(v0, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L19ce2a.  v0:= v3.`okhttp3.OkHttpClient.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` @kind object;
  #L19ce2e.  v2.`okhttp3.OkHttpClient$Builder.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` := v0 @kind object;
  #L19ce32.  v0:= v3.`okhttp3.OkHttpClient.proxySelector` @type ^`java.net.ProxySelector` @kind object;
  #L19ce36.  v2.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` := v0 @kind object;
  #L19ce3a.  v0:= v3.`okhttp3.OkHttpClient.cookieJar` @type ^`okhttp3.CookieJar` @kind object;
  #L19ce3e.  v2.`okhttp3.OkHttpClient$Builder.cookieJar` @type ^`okhttp3.CookieJar` := v0 @kind object;
  #L19ce42.  v0:= v3.`okhttp3.OkHttpClient.internalCache` @type ^`okhttp3.internal.cache.InternalCache` @kind object;
  #L19ce46.  v2.`okhttp3.OkHttpClient$Builder.internalCache` @type ^`okhttp3.internal.cache.InternalCache` := v0 @kind object;
  #L19ce4a.  v0:= v3.`okhttp3.OkHttpClient.cache` @type ^`okhttp3.Cache` @kind object;
  #L19ce4e.  v2.`okhttp3.OkHttpClient$Builder.cache` @type ^`okhttp3.Cache` := v0 @kind object;
  #L19ce52.  v0:= v3.`okhttp3.OkHttpClient.socketFactory` @type ^`javax.net.SocketFactory` @kind object;
  #L19ce56.  v2.`okhttp3.OkHttpClient$Builder.socketFactory` @type ^`javax.net.SocketFactory` := v0 @kind object;
  #L19ce5a.  v0:= v3.`okhttp3.OkHttpClient.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L19ce5e.  v2.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v0 @kind object;
  #L19ce62.  v0:= v3.`okhttp3.OkHttpClient.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` @kind object;
  #L19ce66.  v2.`okhttp3.OkHttpClient$Builder.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v0 @kind object;
  #L19ce6a.  v0:= v3.`okhttp3.OkHttpClient.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` @kind object;
  #L19ce6e.  v2.`okhttp3.OkHttpClient$Builder.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v0 @kind object;
  #L19ce72.  v0:= v3.`okhttp3.OkHttpClient.certificatePinner` @type ^`okhttp3.CertificatePinner` @kind object;
  #L19ce76.  v2.`okhttp3.OkHttpClient$Builder.certificatePinner` @type ^`okhttp3.CertificatePinner` := v0 @kind object;
  #L19ce7a.  v0:= v3.`okhttp3.OkHttpClient.proxyAuthenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L19ce7e.  v2.`okhttp3.OkHttpClient$Builder.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L19ce82.  v0:= v3.`okhttp3.OkHttpClient.authenticator` @type ^`okhttp3.Authenticator` @kind object;
  #L19ce86.  v2.`okhttp3.OkHttpClient$Builder.authenticator` @type ^`okhttp3.Authenticator` := v0 @kind object;
  #L19ce8a.  v0:= v3.`okhttp3.OkHttpClient.connectionPool` @type ^`okhttp3.ConnectionPool` @kind object;
  #L19ce8e.  v2.`okhttp3.OkHttpClient$Builder.connectionPool` @type ^`okhttp3.ConnectionPool` := v0 @kind object;
  #L19ce92.  v0:= v3.`okhttp3.OkHttpClient.dns` @type ^`okhttp3.Dns` @kind object;
  #L19ce96.  v2.`okhttp3.OkHttpClient$Builder.dns` @type ^`okhttp3.Dns` := v0 @kind object;
  #L19ce9a.  v0:= v3.`okhttp3.OkHttpClient.followSslRedirects` @type ^`boolean` @kind boolean;
  #L19ce9e.  v2.`okhttp3.OkHttpClient$Builder.followSslRedirects` @type ^`boolean` := v0 @kind boolean;
  #L19cea2.  v0:= v3.`okhttp3.OkHttpClient.followRedirects` @type ^`boolean` @kind boolean;
  #L19cea6.  v2.`okhttp3.OkHttpClient$Builder.followRedirects` @type ^`boolean` := v0 @kind boolean;
  #L19ceaa.  v0:= v3.`okhttp3.OkHttpClient.retryOnConnectionFailure` @type ^`boolean` @kind boolean;
  #L19ceae.  v2.`okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @type ^`boolean` := v0 @kind boolean;
  #L19ceb2.  v0:= v3.`okhttp3.OkHttpClient.connectTimeout` @type ^`int`;
  #L19ceb6.  v2.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int` := v0;
  #L19ceba.  v0:= v3.`okhttp3.OkHttpClient.readTimeout` @type ^`int`;
  #L19cebe.  v2.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int` := v0;
  #L19cec2.  v0:= v3.`okhttp3.OkHttpClient.writeTimeout` @type ^`int`;
  #L19cec6.  v2.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int` := v0;
  #L19ceca.  v0:= v3.`okhttp3.OkHttpClient.pingInterval` @type ^`int`;
  #L19cece.  v2.`okhttp3.OkHttpClient$Builder.pingInterval` @type ^`int` := v0;
  #L19ced2.  return @kind void;
}
procedure `okhttp3.OkHttpClient$Builder` `addInterceptor`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.Interceptor` v3 @kind object @name `interceptor`) @signature `Lokhttp3/OkHttpClient$Builder;.addInterceptor:(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19cee4.  if v3 != 0 then goto L19cef8;
  #L19cee8.  v0:= new `java.lang.IllegalArgumentException`;
  #L19ceec.  v1:= "interceptor == null" @kind object;
  #L19cef0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19cef6.  throw v0;
  #L19cef8.  v0:= v2.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` @kind object;
  #L19cefc.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L19cf02.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `addNetworkInterceptor`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.Interceptor` v3 @kind object @name `interceptor`) @signature `Lokhttp3/OkHttpClient$Builder;.addNetworkInterceptor:(Lokhttp3/Interceptor;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19cf14.  if v3 != 0 then goto L19cf28;
  #L19cf18.  v0:= new `java.lang.IllegalArgumentException`;
  #L19cf1c.  v1:= "interceptor == null" @kind object;
  #L19cf20.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19cf26.  throw v0;
  #L19cf28.  v0:= v2.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` @kind object;
  #L19cf2c.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L19cf32.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `authenticator`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.Authenticator` v3 @kind object @name `authenticator`) @signature `Lokhttp3/OkHttpClient$Builder;.authenticator:(Lokhttp3/Authenticator;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19cf44.  if v3 != 0 then goto L19cf58;
  #L19cf48.  v0:= new `java.lang.NullPointerException`;
  #L19cf4c.  v1:= "authenticator == null" @kind object;
  #L19cf50.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19cf56.  throw v0;
  #L19cf58.  v2.`okhttp3.OkHttpClient$Builder.authenticator` @type ^`okhttp3.Authenticator` := v3 @kind object;
  #L19cf5c.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient` `build`(`okhttp3.OkHttpClient$Builder` v1 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.build:()Lokhttp3/OkHttpClient;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19cf70.  v0:= new `okhttp3.OkHttpClient`;
  #L19cf74.  call `<init>`(v0, v1) @signature `Lokhttp3/OkHttpClient;.<init>:(Lokhttp3/OkHttpClient$Builder;)V` @kind direct;
  #L19cf7a.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `cache`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.Cache` v2 @kind object @name `cache`) @signature `Lokhttp3/OkHttpClient$Builder;.cache:(Lokhttp3/Cache;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19cf8c.  v1.`okhttp3.OkHttpClient$Builder.cache` @type ^`okhttp3.Cache` := v2 @kind object;
  #L19cf90.  v0:= 0I;
  #L19cf92.  v1.`okhttp3.OkHttpClient$Builder.internalCache` @type ^`okhttp3.internal.cache.InternalCache` := v0 @kind object;
  #L19cf96.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `certificatePinner`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.CertificatePinner` v3 @kind object @name `certificatePinner`) @signature `Lokhttp3/OkHttpClient$Builder;.certificatePinner:(Lokhttp3/CertificatePinner;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19cfa8.  if v3 != 0 then goto L19cfbc;
  #L19cfac.  v0:= new `java.lang.NullPointerException`;
  #L19cfb0.  v1:= "certificatePinner == null" @kind object;
  #L19cfb4.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19cfba.  throw v0;
  #L19cfbc.  v2.`okhttp3.OkHttpClient$Builder.certificatePinner` @type ^`okhttp3.CertificatePinner` := v3 @kind object;
  #L19cfc0.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `connectTimeout`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 @name `timeout`, `java.util.concurrent.TimeUnit` v4 @kind object @name `unit`) @signature `Lokhttp3/OkHttpClient$Builder;.connectTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19cfd4.  v0:= "timeout" @kind object;
  #L19cfd8.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L19cfde.  v0:= temp;
  #L19cfe0.  v1.`okhttp3.OkHttpClient$Builder.connectTimeout` @type ^`int` := v0;
  #L19cfe4.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `connectionPool`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.ConnectionPool` v3 @kind object @name `connectionPool`) @signature `Lokhttp3/OkHttpClient$Builder;.connectionPool:(Lokhttp3/ConnectionPool;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19cff8.  if v3 != 0 then goto L19d00c;
  #L19cffc.  v0:= new `java.lang.NullPointerException`;
  #L19d000.  v1:= "connectionPool == null" @kind object;
  #L19d004.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d00a.  throw v0;
  #L19d00c.  v2.`okhttp3.OkHttpClient$Builder.connectionPool` @type ^`okhttp3.ConnectionPool` := v3 @kind object;
  #L19d010.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `connectionSpecs`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `java.util.List` v2 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.connectionSpecs:(Ljava/util/List;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19d024.  call temp:= `immutableList`(v2) @signature `Lokhttp3/internal/Util;.immutableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L19d02a.  v0:= temp @kind object;
  #L19d02c.  v1.`okhttp3.OkHttpClient$Builder.connectionSpecs` @type ^`java.util.List` := v0 @kind object;
  #L19d030.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `cookieJar`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.CookieJar` v3 @kind object @name `cookieJar`) @signature `Lokhttp3/OkHttpClient$Builder;.cookieJar:(Lokhttp3/CookieJar;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19d044.  if v3 != 0 then goto L19d058;
  #L19d048.  v0:= new `java.lang.NullPointerException`;
  #L19d04c.  v1:= "cookieJar == null" @kind object;
  #L19d050.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d056.  throw v0;
  #L19d058.  v2.`okhttp3.OkHttpClient$Builder.cookieJar` @type ^`okhttp3.CookieJar` := v3 @kind object;
  #L19d05c.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `dispatcher`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.Dispatcher` v3 @kind object @name `dispatcher`) @signature `Lokhttp3/OkHttpClient$Builder;.dispatcher:(Lokhttp3/Dispatcher;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19d070.  if v3 != 0 then goto L19d084;
  #L19d074.  v0:= new `java.lang.IllegalArgumentException`;
  #L19d078.  v1:= "dispatcher == null" @kind object;
  #L19d07c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d082.  throw v0;
  #L19d084.  v2.`okhttp3.OkHttpClient$Builder.dispatcher` @type ^`okhttp3.Dispatcher` := v3 @kind object;
  #L19d088.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `dns`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.Dns` v3 @kind object @name `dns`) @signature `Lokhttp3/OkHttpClient$Builder;.dns:(Lokhttp3/Dns;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19d09c.  if v3 != 0 then goto L19d0b0;
  #L19d0a0.  v0:= new `java.lang.NullPointerException`;
  #L19d0a4.  v1:= "dns == null" @kind object;
  #L19d0a8.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d0ae.  throw v0;
  #L19d0b0.  v2.`okhttp3.OkHttpClient$Builder.dns` @type ^`okhttp3.Dns` := v3 @kind object;
  #L19d0b4.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `eventListener`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.EventListener` v3 @kind object @name `eventListener`) @signature `Lokhttp3/OkHttpClient$Builder;.eventListener:(Lokhttp3/EventListener;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19d0c8.  if v3 != 0 then goto L19d0dc;
  #L19d0cc.  v0:= new `java.lang.NullPointerException`;
  #L19d0d0.  v1:= "eventListener == null" @kind object;
  #L19d0d4.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d0da.  throw v0;
  #L19d0dc.  call temp:= `factory`(v3) @signature `Lokhttp3/EventListener;.factory:(Lokhttp3/EventListener;)Lokhttp3/EventListener$Factory;` @kind static;
  #L19d0e2.  v0:= temp @kind object;
  #L19d0e4.  v2.`okhttp3.OkHttpClient$Builder.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` := v0 @kind object;
  #L19d0e8.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `eventListenerFactory`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.EventListener$Factory` v3 @kind object @name `eventListenerFactory`) @signature `Lokhttp3/OkHttpClient$Builder;.eventListenerFactory:(Lokhttp3/EventListener$Factory;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19d0fc.  if v3 != 0 then goto L19d110;
  #L19d100.  v0:= new `java.lang.NullPointerException`;
  #L19d104.  v1:= "eventListenerFactory == null" @kind object;
  #L19d108.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d10e.  throw v0;
  #L19d110.  v2.`okhttp3.OkHttpClient$Builder.eventListenerFactory` @type ^`okhttp3.EventListener$Factory` := v3 @kind object;
  #L19d114.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `followRedirects`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `boolean` v1 @name `followRedirects`) @signature `Lokhttp3/OkHttpClient$Builder;.followRedirects:(Z)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19d128.  v0.`okhttp3.OkHttpClient$Builder.followRedirects` @type ^`boolean` := v1 @kind boolean;
  #L19d12c.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `followSslRedirects`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `boolean` v1 @name `followProtocolRedirects`) @signature `Lokhttp3/OkHttpClient$Builder;.followSslRedirects:(Z)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19d140.  v0.`okhttp3.OkHttpClient$Builder.followSslRedirects` @type ^`boolean` := v1 @kind boolean;
  #L19d144.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `hostnameVerifier`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `javax.net.ssl.HostnameVerifier` v3 @kind object @name `hostnameVerifier`) @signature `Lokhttp3/OkHttpClient$Builder;.hostnameVerifier:(Ljavax/net/ssl/HostnameVerifier;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19d158.  if v3 != 0 then goto L19d16c;
  #L19d15c.  v0:= new `java.lang.NullPointerException`;
  #L19d160.  v1:= "hostnameVerifier == null" @kind object;
  #L19d164.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d16a.  throw v0;
  #L19d16c.  v2.`okhttp3.OkHttpClient$Builder.hostnameVerifier` @type ^`javax.net.ssl.HostnameVerifier` := v3 @kind object;
  #L19d170.  return v2 @kind object;
}
procedure `java.util.List` `interceptors`(`okhttp3.OkHttpClient$Builder` v1 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.interceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19d184.  v0:= v1.`okhttp3.OkHttpClient$Builder.interceptors` @type ^`java.util.List` @kind object;
  #L19d188.  return v0 @kind object;
}
procedure `java.util.List` `networkInterceptors`(`okhttp3.OkHttpClient$Builder` v1 @kind this) @signature `Lokhttp3/OkHttpClient$Builder;.networkInterceptors:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19d19c.  v0:= v1.`okhttp3.OkHttpClient$Builder.networkInterceptors` @type ^`java.util.List` @kind object;
  #L19d1a0.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `pingInterval`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 @name `interval`, `java.util.concurrent.TimeUnit` v4 @kind object @name `unit`) @signature `Lokhttp3/OkHttpClient$Builder;.pingInterval:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19d1b4.  v0:= "interval" @kind object;
  #L19d1b8.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L19d1be.  v0:= temp;
  #L19d1c0.  v1.`okhttp3.OkHttpClient$Builder.pingInterval` @type ^`int` := v0;
  #L19d1c4.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `protocols`(`okhttp3.OkHttpClient$Builder` v4 @kind this, `java.util.List` v5 @kind object) @signature `Lokhttp3/OkHttpClient$Builder;.protocols:(Ljava/util/List;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L19d1d8.  v0:= new `java.util.ArrayList`;
  #L19d1dc.  call `<init>`(v0, v5) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L19d1e2.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L19d1e6.  call temp:= `contains`(v0, v1) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L19d1ec.  v1:= temp;
  #L19d1ee.  if v1 != 0 then goto L19d224;
  #L19d1f2.  v1:= new `java.lang.IllegalArgumentException`;
  #L19d1f6.  v2:= new `java.lang.StringBuilder`;
  #L19d1fa.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19d200.  v3:= "protocols doesn't contain http/1.1: " @kind object;
  #L19d204.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19d20a.  v2:= temp @kind object;
  #L19d20c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19d212.  v2:= temp @kind object;
  #L19d214.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19d21a.  v2:= temp @kind object;
  #L19d21c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d222.  throw v1;
  #L19d224.  v1:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L19d228.  call temp:= `contains`(v0, v1) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L19d22e.  v1:= temp;
  #L19d230.  if v1 == 0 then goto L19d266;
  #L19d234.  v1:= new `java.lang.IllegalArgumentException`;
  #L19d238.  v2:= new `java.lang.StringBuilder`;
  #L19d23c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19d242.  v3:= "protocols must not contain http/1.0: " @kind object;
  #L19d246.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19d24c.  v2:= temp @kind object;
  #L19d24e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19d254.  v2:= temp @kind object;
  #L19d256.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19d25c.  v2:= temp @kind object;
  #L19d25e.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d264.  throw v1;
  #L19d266.  v1:= 0I;
  #L19d268.  call temp:= `contains`(v0, v1) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L19d26e.  v1:= temp;
  #L19d270.  if v1 == 0 then goto L19d284;
  #L19d274.  v1:= new `java.lang.IllegalArgumentException`;
  #L19d278.  v2:= "protocols must not contain null" @kind object;
  #L19d27c.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d282.  throw v1;
  #L19d284.  v1:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L19d288.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L19d28e.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L19d294.  v1:= temp @kind object;
  #L19d296.  v4.`okhttp3.OkHttpClient$Builder.protocols` @type ^`java.util.List` := v1 @kind object;
  #L19d29a.  return v4 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `proxy`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `java.net.Proxy` v1 @kind object @name `proxy`) @signature `Lokhttp3/OkHttpClient$Builder;.proxy:(Ljava/net/Proxy;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19d2ac.  v0.`okhttp3.OkHttpClient$Builder.proxy` @type ^`java.net.Proxy` := v1 @kind object;
  #L19d2b0.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `proxyAuthenticator`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `okhttp3.Authenticator` v3 @kind object @name `proxyAuthenticator`) @signature `Lokhttp3/OkHttpClient$Builder;.proxyAuthenticator:(Lokhttp3/Authenticator;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19d2c4.  if v3 != 0 then goto L19d2d8;
  #L19d2c8.  v0:= new `java.lang.NullPointerException`;
  #L19d2cc.  v1:= "proxyAuthenticator == null" @kind object;
  #L19d2d0.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d2d6.  throw v0;
  #L19d2d8.  v2.`okhttp3.OkHttpClient$Builder.proxyAuthenticator` @type ^`okhttp3.Authenticator` := v3 @kind object;
  #L19d2dc.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `proxySelector`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `java.net.ProxySelector` v1 @kind object @name `proxySelector`) @signature `Lokhttp3/OkHttpClient$Builder;.proxySelector:(Ljava/net/ProxySelector;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19d2f0.  v0.`okhttp3.OkHttpClient$Builder.proxySelector` @type ^`java.net.ProxySelector` := v1 @kind object;
  #L19d2f4.  return v0 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `readTimeout`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 @name `timeout`, `java.util.concurrent.TimeUnit` v4 @kind object @name `unit`) @signature `Lokhttp3/OkHttpClient$Builder;.readTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19d308.  v0:= "timeout" @kind object;
  #L19d30c.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L19d312.  v0:= temp;
  #L19d314.  v1.`okhttp3.OkHttpClient$Builder.readTimeout` @type ^`int` := v0;
  #L19d318.  return v1 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `retryOnConnectionFailure`(`okhttp3.OkHttpClient$Builder` v0 @kind this, `boolean` v1 @name `retryOnConnectionFailure`) @signature `Lokhttp3/OkHttpClient$Builder;.retryOnConnectionFailure:(Z)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;

  #L19d32c.  v0.`okhttp3.OkHttpClient$Builder.retryOnConnectionFailure` @type ^`boolean` := v1 @kind boolean;
  #L19d330.  return v0 @kind object;
}
procedure `void` `setInternalCache`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `okhttp3.internal.cache.InternalCache` v2 @kind object @name `internalCache`) @signature `Lokhttp3/OkHttpClient$Builder;.setInternalCache:(Lokhttp3/internal/cache/InternalCache;)V` @AccessFlag  {
    temp;
    v0;

  #L19d344.  v1.`okhttp3.OkHttpClient$Builder.internalCache` @type ^`okhttp3.internal.cache.InternalCache` := v2 @kind object;
  #L19d348.  v0:= 0I;
  #L19d34a.  v1.`okhttp3.OkHttpClient$Builder.cache` @type ^`okhttp3.Cache` := v0 @kind object;
  #L19d34e.  return @kind void;
}
procedure `okhttp3.OkHttpClient$Builder` `socketFactory`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `javax.net.SocketFactory` v3 @kind object @name `socketFactory`) @signature `Lokhttp3/OkHttpClient$Builder;.socketFactory:(Ljavax/net/SocketFactory;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19d360.  if v3 != 0 then goto L19d374;
  #L19d364.  v0:= new `java.lang.NullPointerException`;
  #L19d368.  v1:= "socketFactory == null" @kind object;
  #L19d36c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d372.  throw v0;
  #L19d374.  v2.`okhttp3.OkHttpClient$Builder.socketFactory` @type ^`javax.net.SocketFactory` := v3 @kind object;
  #L19d378.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `sslSocketFactory`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `javax.net.ssl.SSLSocketFactory` v3 @kind object @name `sslSocketFactory`) @signature `Lokhttp3/OkHttpClient$Builder;.sslSocketFactory:(Ljavax/net/ssl/SSLSocketFactory;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19d38c.  if v3 != 0 then goto L19d3a0;
  #L19d390.  v0:= new `java.lang.NullPointerException`;
  #L19d394.  v1:= "sslSocketFactory == null" @kind object;
  #L19d398.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d39e.  throw v0;
  #L19d3a0.  v2.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v3 @kind object;
  #L19d3a4.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L19d3aa.  v0:= temp @kind object;
  #L19d3ac.  call temp:= `buildCertificateChainCleaner`(v0, v3) @signature `Lokhttp3/internal/platform/Platform;.buildCertificateChainCleaner:(Ljavax/net/ssl/SSLSocketFactory;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind virtual;
  #L19d3b2.  v0:= temp @kind object;
  #L19d3b4.  v2.`okhttp3.OkHttpClient$Builder.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v0 @kind object;
  #L19d3b8.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `sslSocketFactory`(`okhttp3.OkHttpClient$Builder` v2 @kind this, `javax.net.ssl.SSLSocketFactory` v3 @kind object @name `sslSocketFactory`, `javax.net.ssl.X509TrustManager` v4 @kind object @name `trustManager`) @signature `Lokhttp3/OkHttpClient$Builder;.sslSocketFactory:(Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/X509TrustManager;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L19d3cc.  if v3 != 0 then goto L19d3e0;
  #L19d3d0.  v0:= new `java.lang.NullPointerException`;
  #L19d3d4.  v1:= "sslSocketFactory == null" @kind object;
  #L19d3d8.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d3de.  throw v0;
  #L19d3e0.  if v4 != 0 then goto L19d3f4;
  #L19d3e4.  v0:= new `java.lang.NullPointerException`;
  #L19d3e8.  v1:= "trustManager == null" @kind object;
  #L19d3ec.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d3f2.  throw v0;
  #L19d3f4.  v2.`okhttp3.OkHttpClient$Builder.sslSocketFactory` @type ^`javax.net.ssl.SSLSocketFactory` := v3 @kind object;
  #L19d3f8.  call temp:= `get`(v4) @signature `Lokhttp3/internal/tls/CertificateChainCleaner;.get:(Ljavax/net/ssl/X509TrustManager;)Lokhttp3/internal/tls/CertificateChainCleaner;` @kind static;
  #L19d3fe.  v0:= temp @kind object;
  #L19d400.  v2.`okhttp3.OkHttpClient$Builder.certificateChainCleaner` @type ^`okhttp3.internal.tls.CertificateChainCleaner` := v0 @kind object;
  #L19d404.  return v2 @kind object;
}
procedure `okhttp3.OkHttpClient$Builder` `writeTimeout`(`okhttp3.OkHttpClient$Builder` v1 @kind this, `long` v2 @name `timeout`, `java.util.concurrent.TimeUnit` v4 @kind object @name `unit`) @signature `Lokhttp3/OkHttpClient$Builder;.writeTimeout:(JLjava/util/concurrent/TimeUnit;)Lokhttp3/OkHttpClient$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19d418.  v0:= "timeout" @kind object;
  #L19d41c.  call temp:= `checkDuration`(v0, v2, v4) @signature `Lokhttp3/internal/Util;.checkDuration:(Ljava/lang/String;JLjava/util/concurrent/TimeUnit;)I` @kind static;
  #L19d422.  v0:= temp;
  #L19d424.  v1.`okhttp3.OkHttpClient$Builder.writeTimeout` @type ^`int` := v0;
  #L19d428.  return v1 @kind object;
}
