record `okhttp3.ConnectionSpec` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String`[] `okhttp3.ConnectionSpec.cipherSuites` @AccessFlag FINAL;
  `boolean` `okhttp3.ConnectionSpec.supportsTlsExtensions` @AccessFlag FINAL;
  `boolean` `okhttp3.ConnectionSpec.tls` @AccessFlag FINAL;
  `java.lang.String`[] `okhttp3.ConnectionSpec.tlsVersions` @AccessFlag FINAL;
}
global `okhttp3.CipherSuite`[] `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.CLEARTEXT` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
global `okhttp3.ConnectionSpec` `@@okhttp3.ConnectionSpec.MODERN_TLS` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/ConnectionSpec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L19735c.  v7:= 4I;
  #L19735e.  v6:= 3I;
  #L197360.  v5:= 2I;
  #L197362.  v4:= 0I;
  #L197364.  v3:= 1I;
  #L197366.  v0:= 13I;
  #L19736a.  v0:= new `okhttp3.CipherSuite`[v0];
  #L19736e.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L197372.  v0[v4]:= v1 @kind object;
  #L197376.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L19737a.  v0[v3]:= v1 @kind object;
  #L19737e.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L197382.  v0[v5]:= v1 @kind object;
  #L197386.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L19738a.  v0[v6]:= v1 @kind object;
  #L19738e.  v1:= `@@okhttp3.CipherSuite.TLS_ECDHE_ECDSA_WITH_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L197392.  v0[v7]:= v1 @kind object;
  #L197396.  v1:= 5I;
  #L197398.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_CHACHA20_POLY1305_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L19739c.  v0[v1]:= v2 @kind object;
  #L1973a0.  v1:= 6I;
  #L1973a2.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L1973a6.  v0[v1]:= v2 @kind object;
  #L1973aa.  v1:= 7I;
  #L1973ac.  v2:= `@@okhttp3.CipherSuite.TLS_ECDHE_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L1973b0.  v0[v1]:= v2 @kind object;
  #L1973b4.  v1:= 8I;
  #L1973b8.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_GCM_SHA256` @type ^`okhttp3.CipherSuite` @kind object;
  #L1973bc.  v0[v1]:= v2 @kind object;
  #L1973c0.  v1:= 9I;
  #L1973c4.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_GCM_SHA384` @type ^`okhttp3.CipherSuite` @kind object;
  #L1973c8.  v0[v1]:= v2 @kind object;
  #L1973cc.  v1:= 10I;
  #L1973d0.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_128_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L1973d4.  v0[v1]:= v2 @kind object;
  #L1973d8.  v1:= 11I;
  #L1973dc.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_AES_256_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L1973e0.  v0[v1]:= v2 @kind object;
  #L1973e4.  v1:= 12I;
  #L1973e8.  v2:= `@@okhttp3.CipherSuite.TLS_RSA_WITH_3DES_EDE_CBC_SHA` @type ^`okhttp3.CipherSuite` @kind object;
  #L1973ec.  v0[v1]:= v2 @kind object;
  #L1973f0.  `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @type ^`okhttp3.CipherSuite`[] := v0 @kind object;
  #L1973f4.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L1973f8.  call `<init>`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L1973fe.  v1:= `@@okhttp3.ConnectionSpec.APPROVED_CIPHER_SUITES` @type ^`okhttp3.CipherSuite`[] @kind object;
  #L197402.  call temp:= `cipherSuites`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Lokhttp3/CipherSuite;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L197408.  v0:= temp @kind object;
  #L19740a.  v1:= new `okhttp3.TlsVersion`[v7];
  #L19740e.  v2:= `@@okhttp3.TlsVersion.TLS_1_3` @type ^`okhttp3.TlsVersion` @kind object;
  #L197412.  v1[v4]:= v2 @kind object;
  #L197416.  v2:= `@@okhttp3.TlsVersion.TLS_1_2` @type ^`okhttp3.TlsVersion` @kind object;
  #L19741a.  v1[v3]:= v2 @kind object;
  #L19741e.  v2:= `@@okhttp3.TlsVersion.TLS_1_1` @type ^`okhttp3.TlsVersion` @kind object;
  #L197422.  v1[v5]:= v2 @kind object;
  #L197426.  v2:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L19742a.  v1[v6]:= v2 @kind object;
  #L19742e.  call temp:= `tlsVersions`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L197434.  v0:= temp @kind object;
  #L197436.  call temp:= `supportsTlsExtensions`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L19743c.  v0:= temp @kind object;
  #L19743e.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L197444.  v0:= temp @kind object;
  #L197446.  `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L19744a.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L19744e.  v1:= `@@okhttp3.ConnectionSpec.MODERN_TLS` @type ^`okhttp3.ConnectionSpec` @kind object;
  #L197452.  call `<init>`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @kind direct;
  #L197458.  v1:= new `okhttp3.TlsVersion`[v3];
  #L19745c.  v2:= `@@okhttp3.TlsVersion.TLS_1_0` @type ^`okhttp3.TlsVersion` @kind object;
  #L197460.  v1[v4]:= v2 @kind object;
  #L197464.  call temp:= `tlsVersions`(v0, v1) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Lokhttp3/TlsVersion;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L19746a.  v0:= temp @kind object;
  #L19746c.  call temp:= `supportsTlsExtensions`(v0, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.supportsTlsExtensions:(Z)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L197472.  v0:= temp @kind object;
  #L197474.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L19747a.  v0:= temp @kind object;
  #L19747c.  `@@okhttp3.ConnectionSpec.COMPATIBLE_TLS` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L197480.  v0:= new `okhttp3.ConnectionSpec$Builder`;
  #L197484.  call `<init>`(v0, v4) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Z)V` @kind direct;
  #L19748a.  call temp:= `build`(v0) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L197490.  v0:= temp @kind object;
  #L197492.  `@@okhttp3.ConnectionSpec.CLEARTEXT` @type ^`okhttp3.ConnectionSpec` := v0 @kind object;
  #L197496.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.ConnectionSpec` v1 @kind this, `okhttp3.ConnectionSpec$Builder` v2 @kind object @name `builder`) @signature `Lokhttp3/ConnectionSpec;.<init>:(Lokhttp3/ConnectionSpec$Builder;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1974a8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1974ae.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tls` @type ^`boolean` @kind boolean;
  #L1974b2.  v1.`okhttp3.ConnectionSpec.tls` @type ^`boolean` := v0 @kind boolean;
  #L1974b6.  v0:= v2.`okhttp3.ConnectionSpec$Builder.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1974ba.  v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] := v0 @kind object;
  #L1974be.  v0:= v2.`okhttp3.ConnectionSpec$Builder.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1974c2.  v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] := v0 @kind object;
  #L1974c6.  v0:= v2.`okhttp3.ConnectionSpec$Builder.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L1974ca.  v1.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` := v0 @kind boolean;
  #L1974ce.  return @kind void;
}
procedure `okhttp3.ConnectionSpec` `supportedSpec`(`okhttp3.ConnectionSpec` v7 @kind this, `javax.net.ssl.SSLSocket` v8 @kind object @name `sslSocket`, `boolean` v9 @name `isFallback`) @signature `Lokhttp3/ConnectionSpec;.supportedSpec:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1974e0.  v4:= v7.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1974e4.  if v4 == 0 then goto L197572;
  #L1974e8.  v4:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L1974ec.  call temp:= `getEnabledCipherSuites`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L1974f2.  v5:= temp @kind object;
  #L1974f4.  v6:= v7.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1974f8.  call temp:= `intersect`(v4, v5, v6) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L1974fe.  v0:= temp @kind object;
  #L197500.  v4:= v7.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L197504.  if v4 == 0 then goto L19757c;
  #L197508.  v4:= `@@okhttp3.internal.Util.NATURAL_ORDER` @type ^`java.util.Comparator` @kind object;
  #L19750c.  call temp:= `getEnabledProtocols`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L197512.  v5:= temp @kind object;
  #L197514.  v6:= v7.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L197518.  call temp:= `intersect`(v4, v5, v6) @signature `Lokhttp3/internal/Util;.intersect:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L19751e.  v3:= temp @kind object;
  #L197520.  call temp:= `getSupportedCipherSuites`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getSupportedCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L197526.  v2:= temp @kind object;
  #L197528.  v4:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L19752c.  v5:= "TLS_FALLBACK_SCSV" @kind object;
  #L197530.  call temp:= `indexOf`(v4, v2, v5) @signature `Lokhttp3/internal/Util;.indexOf:(Ljava/util/Comparator;[Ljava/lang/String;Ljava/lang/String;)I` @kind static;
  #L197536.  v1:= temp;
  #L197538.  if v9 == 0 then goto L19754e;
  #L19753c.  v4:= -1I;
  #L19753e.  if v1 == v4 then goto L19754e;
  #L197542.  v4:= v2[v1] @kind object;
  #L197546.  call temp:= `concat`(v0, v4) @signature `Lokhttp3/internal/Util;.concat:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L19754c.  v0:= temp @kind object;
  #L19754e.  v4:= new `okhttp3.ConnectionSpec$Builder`;
  #L197552.  call `<init>`(v4, v7) @signature `Lokhttp3/ConnectionSpec$Builder;.<init>:(Lokhttp3/ConnectionSpec;)V` @kind direct;
  #L197558.  call temp:= `cipherSuites`(v4, v0) @signature `Lokhttp3/ConnectionSpec$Builder;.cipherSuites:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L19755e.  v4:= temp @kind object;
  #L197560.  call temp:= `tlsVersions`(v4, v3) @signature `Lokhttp3/ConnectionSpec$Builder;.tlsVersions:([Ljava/lang/String;)Lokhttp3/ConnectionSpec$Builder;` @kind virtual;
  #L197566.  v4:= temp @kind object;
  #L197568.  call temp:= `build`(v4) @signature `Lokhttp3/ConnectionSpec$Builder;.build:()Lokhttp3/ConnectionSpec;` @kind virtual;
  #L19756e.  v4:= temp @kind object;
  #L197570.  return v4 @kind object;
  #L197572.  call temp:= `getEnabledCipherSuites`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L197578.  v0:= temp @kind object;
  #L19757a.  goto L197500;
  #L19757c.  call temp:= `getEnabledProtocols`(v8) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L197582.  v3:= temp @kind object;
  #L197584.  goto L197520;
}
procedure `void` `apply`(`okhttp3.ConnectionSpec` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object @name `sslSocket`, `boolean` v4 @name `isFallback`) @signature `Lokhttp3/ConnectionSpec;.apply:(Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L197598.  call temp:= `supportedSpec`(v2, v3, v4) @signature `Lokhttp3/ConnectionSpec;.supportedSpec:(Ljavax/net/ssl/SSLSocket;Z)Lokhttp3/ConnectionSpec;` @kind direct;
  #L19759e.  v0:= temp @kind object;
  #L1975a0.  v1:= v0.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1975a4.  if v1 == 0 then goto L1975b2;
  #L1975a8.  v1:= v0.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1975ac.  call `setEnabledProtocols`(v3, v1) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledProtocols:([Ljava/lang/String;)V` @kind virtual;
  #L1975b2.  v1:= v0.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1975b6.  if v1 == 0 then goto L1975c4;
  #L1975ba.  v1:= v0.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1975be.  call `setEnabledCipherSuites`(v3, v1) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledCipherSuites:([Ljava/lang/String;)V` @kind virtual;
  #L1975c4.  return @kind void;
}
procedure `java.util.List` `cipherSuites`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1975d8.  v0:= v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1975dc.  if v0 == 0 then goto L1975ee;
  #L1975e0.  v0:= v1.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1975e4.  call temp:= `forJavaNames`(v0) @signature `Lokhttp3/CipherSuite;.forJavaNames:([Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L1975ea.  v0:= temp @kind object;
  #L1975ec.  return v0 @kind object;
  #L1975ee.  v0:= 0I;
  #L1975f0.  goto L1975ec;
}
procedure `boolean` `equals`(`okhttp3.ConnectionSpec` v5 @kind this, `java.lang.Object` v6 @kind object @name `other`) @signature `Lokhttp3/ConnectionSpec;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L197604.  v2:= 1I;
  #L197606.  v1:= 0I;
  #L197608.  v3:= instanceof @variable v6 @type ^`okhttp3.ConnectionSpec` @kind boolean;
  #L19760c.  if v3 != 0 then goto L197612;
  #L197610.  return v1;
  #L197612.  if v6 != v5 then goto L19761a;
  #L197616.  v1:= v2;
  #L197618.  goto L197610;
  #L19761a.  v0:= v6 @kind object;
  #L19761c.  v0:= (`okhttp3.ConnectionSpec`) v0 @kind object;
  #L197620.  v3:= v5.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L197624.  v4:= v0.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L197628.  if v3 != v4 then goto L197610;
  #L19762c.  v3:= v5.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L197630.  if v3 == 0 then goto L197668;
  #L197634.  v3:= v5.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L197638.  v4:= v0.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L19763c.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L197642.  v3:= temp;
  #L197644.  if v3 == 0 then goto L197610;
  #L197648.  v3:= v5.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L19764c.  v4:= v0.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L197650.  call temp:= `equals`(v3, v4) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L197656.  v3:= temp;
  #L197658.  if v3 == 0 then goto L197610;
  #L19765c.  v3:= v5.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L197660.  v4:= v0.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L197664.  if v3 != v4 then goto L197610;
  #L197668.  v1:= v2;
  #L19766a.  goto L197610;
}
procedure `int` `hashCode`(`okhttp3.ConnectionSpec` v3 @kind this) @signature `Lokhttp3/ConnectionSpec;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19767c.  v0:= 17I;
  #L197680.  v1:= v3.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L197684.  if v1 == 0 then goto L1976be;
  #L197688.  v1:= v3.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L19768c.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L197692.  v1:= temp;
  #L197694.  v0:= v1 + 527;
  #L197698.  v1:= v0 * 31;
  #L19769c.  v2:= v3.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1976a0.  call temp:= `hashCode`(v2) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L1976a6.  v2:= temp;
  #L1976a8.  v0:= v1 + v2 @kind int;
  #L1976ac.  v2:= v0 * 31;
  #L1976b0.  v1:= v3.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L1976b4.  if v1 == 0 then goto L1976c0;
  #L1976b8.  v1:= 0I;
  #L1976ba.  v0:= v2 + v1 @kind int;
  #L1976be.  return v0;
  #L1976c0.  v1:= 1I;
  #L1976c2.  goto L1976ba;
}
procedure `boolean` `isCompatible`(`okhttp3.ConnectionSpec` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object @name `socket`) @signature `Lokhttp3/ConnectionSpec;.isCompatible:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1976d4.  v0:= 0I;
  #L1976d6.  v1:= v4.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L1976da.  if v1 != 0 then goto L1976e0;
  #L1976de.  return v0;
  #L1976e0.  v1:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1976e4.  if v1 == 0 then goto L197704;
  #L1976e8.  v1:= `@@okhttp3.internal.Util.NATURAL_ORDER` @type ^`java.util.Comparator` @kind object;
  #L1976ec.  v2:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1976f0.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L1976f6.  v3:= temp @kind object;
  #L1976f8.  call temp:= `nonEmptyIntersection`(v1, v2, v3) @signature `Lokhttp3/internal/Util;.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L1976fe.  v1:= temp;
  #L197700.  if v1 == 0 then goto L1976de;
  #L197704.  v1:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L197708.  if v1 == 0 then goto L197728;
  #L19770c.  v1:= `@@okhttp3.CipherSuite.ORDER_BY_NAME` @type ^`java.util.Comparator` @kind object;
  #L197710.  v2:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L197714.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L19771a.  v3:= temp @kind object;
  #L19771c.  call temp:= `nonEmptyIntersection`(v1, v2, v3) @signature `Lokhttp3/internal/Util;.nonEmptyIntersection:(Ljava/util/Comparator;[Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L197722.  v1:= temp;
  #L197724.  if v1 == 0 then goto L1976de;
  #L197728.  v0:= 1I;
  #L19772a.  goto L1976de;
}
procedure `boolean` `isTls`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.isTls:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19773c.  v0:= v1.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L197740.  return v0;
}
procedure `boolean` `supportsTlsExtensions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.supportsTlsExtensions:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L197754.  v0:= v1.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L197758.  return v0;
}
procedure `java.util.List` `tlsVersions`(`okhttp3.ConnectionSpec` v1 @kind this) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19776c.  v0:= v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L197770.  if v0 == 0 then goto L197782;
  #L197774.  v0:= v1.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L197778.  call temp:= `forJavaNames`(v0) @signature `Lokhttp3/TlsVersion;.forJavaNames:([Ljava/lang/String;)Ljava/util/List;` @kind static;
  #L19777e.  v0:= temp @kind object;
  #L197780.  return v0 @kind object;
  #L197782.  v0:= 0I;
  #L197784.  goto L197780;
}
procedure `java.lang.String` `toString`(`okhttp3.ConnectionSpec` v4 @kind this) @signature `Lokhttp3/ConnectionSpec;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L197798.  v2:= v4.`okhttp3.ConnectionSpec.tls` @type ^`boolean` @kind boolean;
  #L19779c.  if v2 != 0 then goto L1977a6;
  #L1977a0.  v2:= "ConnectionSpec()" @kind object;
  #L1977a4.  return v2 @kind object;
  #L1977a6.  v2:= v4.`okhttp3.ConnectionSpec.cipherSuites` @type ^`java.lang.String`[] @kind object;
  #L1977aa.  if v2 == 0 then goto L197836;
  #L1977ae.  call temp:= `cipherSuites`(v4) @signature `Lokhttp3/ConnectionSpec;.cipherSuites:()Ljava/util/List;` @kind virtual;
  #L1977b4.  v2:= temp @kind object;
  #L1977b6.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1977bc.  v0:= temp @kind object;
  #L1977be.  v2:= v4.`okhttp3.ConnectionSpec.tlsVersions` @type ^`java.lang.String`[] @kind object;
  #L1977c2.  if v2 == 0 then goto L19783c;
  #L1977c6.  call temp:= `tlsVersions`(v4) @signature `Lokhttp3/ConnectionSpec;.tlsVersions:()Ljava/util/List;` @kind virtual;
  #L1977cc.  v2:= temp @kind object;
  #L1977ce.  call temp:= `toString`(v2) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L1977d4.  v1:= temp @kind object;
  #L1977d6.  v2:= new `java.lang.StringBuilder`;
  #L1977da.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1977e0.  v3:= "ConnectionSpec(cipherSuites=" @kind object;
  #L1977e4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1977ea.  v2:= temp @kind object;
  #L1977ec.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1977f2.  v2:= temp @kind object;
  #L1977f4.  v3:= ", tlsVersions=" @kind object;
  #L1977f8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1977fe.  v2:= temp @kind object;
  #L197800.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L197806.  v2:= temp @kind object;
  #L197808.  v3:= ", supportsTlsExtensions=" @kind object;
  #L19780c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L197812.  v2:= temp @kind object;
  #L197814.  v3:= v4.`okhttp3.ConnectionSpec.supportsTlsExtensions` @type ^`boolean` @kind boolean;
  #L197818.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L19781e.  v2:= temp @kind object;
  #L197820.  v3:= ")" @kind object;
  #L197824.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19782a.  v2:= temp @kind object;
  #L19782c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L197832.  v2:= temp @kind object;
  #L197834.  goto L1977a4;
  #L197836.  v0:= "[all enabled]" @kind object;
  #L19783a.  goto L1977be;
  #L19783c.  v1:= "[all enabled]" @kind object;
  #L197840.  goto L1977d6;
}
