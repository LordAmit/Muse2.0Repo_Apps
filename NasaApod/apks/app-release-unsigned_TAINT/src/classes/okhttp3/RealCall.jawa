record `okhttp3.RealCall` @kind class @AccessFlag FINAL extends `okhttp3.Call` @kind interface {
  `okhttp3.OkHttpClient` `okhttp3.RealCall.client` @AccessFlag FINAL;
  `okhttp3.EventListener` `okhttp3.RealCall.eventListener` @AccessFlag PRIVATE;
  `boolean` `okhttp3.RealCall.executed` @AccessFlag PRIVATE;
  `boolean` `okhttp3.RealCall.forWebSocket` @AccessFlag FINAL;
  `okhttp3.Request` `okhttp3.RealCall.originalRequest` @AccessFlag FINAL;
  `okhttp3.internal.http.RetryAndFollowUpInterceptor` `okhttp3.RealCall.retryAndFollowUpInterceptor` @AccessFlag FINAL;
}
procedure `void` `<init>`(`okhttp3.RealCall` v1 @kind this, `okhttp3.OkHttpClient` v2 @kind object @name `client`, `okhttp3.Request` v3 @kind object @name `originalRequest`, `boolean` v4 @name `forWebSocket`) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L21605c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L216062.  v1.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` := v2 @kind object;
  #L216066.  v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` := v3 @kind object;
  #L21606a.  v1.`okhttp3.RealCall.forWebSocket` @type ^`boolean` := v4 @kind boolean;
  #L21606e.  v0:= new `okhttp3.internal.http.RetryAndFollowUpInterceptor`;
  #L216072.  call `<init>`(v0, v2, v4) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;Z)V` @kind direct;
  #L216078.  v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` := v0 @kind object;
  #L21607c.  return @kind void;
}
procedure `okhttp3.EventListener` `access$000`(`okhttp3.RealCall` v1 @kind object @name `x0`) @signature `Lokhttp3/RealCall;.access$000:(Lokhttp3/RealCall;)Lokhttp3/EventListener;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L216090.  v0:= v1.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L216094.  return v0 @kind object;
}
procedure `void` `captureCallStackTrace`(`okhttp3.RealCall` v3 @kind this) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2160a8.  call temp:= `get`() @signature `Lokhttp3/internal/platform/Platform;.get:()Lokhttp3/internal/platform/Platform;` @kind static;
  #L2160ae.  v1:= temp @kind object;
  #L2160b0.  v2:= "response.body().close()" @kind object;
  #L2160b4.  call temp:= `getStackTraceForCloseable`(v1, v2) @signature `Lokhttp3/internal/platform/Platform;.getStackTraceForCloseable:(Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L2160ba.  v0:= temp @kind object;
  #L2160bc.  v1:= v3.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L2160c0.  call `setCallStackTrace`(v1, v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.setCallStackTrace:(Ljava/lang/Object;)V` @kind virtual;
  #L2160c6.  return @kind void;
}
procedure `okhttp3.RealCall` `newRealCall`(`okhttp3.OkHttpClient` v2 @kind object @name `client`, `okhttp3.Request` v3 @kind object @name `originalRequest`, `boolean` v4 @name `forWebSocket`) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L2160d8.  v0:= new `okhttp3.RealCall`;
  #L2160dc.  call `<init>`(v0, v2, v3, v4) @signature `Lokhttp3/RealCall;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)V` @kind direct;
  #L2160e2.  call temp:= `eventListenerFactory`(v2) @signature `Lokhttp3/OkHttpClient;.eventListenerFactory:()Lokhttp3/EventListener$Factory;` @kind virtual;
  #L2160e8.  v1:= temp @kind object;
  #L2160ea.  call temp:= `create`(v1, v0) @signature `Lokhttp3/EventListener$Factory;.create:(Lokhttp3/Call;)Lokhttp3/EventListener;` @kind interface;
  #L2160f0.  v1:= temp @kind object;
  #L2160f2.  v0.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` := v1 @kind object;
  #L2160f6.  return v0 @kind object;
}
procedure `void` `cancel`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L216108.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L21610c.  call `cancel`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.cancel:()V` @kind virtual;
  #L216112.  return @kind void;
}
procedure `java.lang.Object` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L216124.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L21612a.  v0:= temp @kind object;
  #L21612c.  return v0 @kind object;
}
procedure `okhttp3.Call` `clone`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/Call;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L216140.  call temp:= `clone`(v1) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @kind virtual;
  #L216146.  v0:= temp @kind object;
  #L216148.  return v0 @kind object;
}
procedure `okhttp3.RealCall` `clone`(`okhttp3.RealCall` v3 @kind this) @signature `Lokhttp3/RealCall;.clone:()Lokhttp3/RealCall;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L21615c.  v0:= v3.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L216160.  v1:= v3.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L216164.  v2:= v3.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L216168.  call temp:= `newRealCall`(v0, v1, v2) @signature `Lokhttp3/RealCall;.newRealCall:(Lokhttp3/OkHttpClient;Lokhttp3/Request;Z)Lokhttp3/RealCall;` @kind static;
  #L21616e.  v0:= temp @kind object;
  #L216170.  return v0 @kind object;
}
procedure `void` `enqueue`(`okhttp3.RealCall` v2 @kind this, `okhttp3.Callback` v3 @kind object @name `responseCallback`) @signature `Lokhttp3/RealCall;.enqueue:(Lokhttp3/Callback;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L216184.  @monitorenter v2
  #Try_start0.  
  #L216186.  v0:= v2.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L21618a.  if v0 == 0 then goto L2161a4;
  #L21618e.  v0:= new `java.lang.IllegalStateException`;
  #L216192.  v1:= "Already Executed" @kind object;
  #L216196.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21619c.  throw v0;
  #L21619e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L2161a0.  @monitorexit v2
  #Try_end0.  
  #L2161a2.  throw v0;
  #L2161a4.  v0:= 1I;
  #Try_start1.  
  #L2161a6.  v2.`okhttp3.RealCall.executed` @type ^`boolean` := v0 @kind boolean;
  #L2161aa.  @monitorexit v2
  #Try_end1.  
  #L2161ac.  call `captureCallStackTrace`(v2) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @kind direct;
  #L2161b2.  v0:= v2.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L2161b6.  call `callStart`(v0, v2) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #L2161bc.  v0:= v2.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2161c0.  call temp:= `dispatcher`(v0) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L2161c6.  v0:= temp @kind object;
  #L2161c8.  v1:= new `okhttp3.RealCall$AsyncCall`;
  #L2161cc.  call `<init>`(v1, v2, v3) @signature `Lokhttp3/RealCall$AsyncCall;.<init>:(Lokhttp3/RealCall;Lokhttp3/Callback;)V` @kind direct;
  #L2161d2.  call `enqueue`(v0, v1) @signature `Lokhttp3/Dispatcher;.enqueue:(Lokhttp3/RealCall$AsyncCall;)V` @kind virtual;
  #L2161d8.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L21619e;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L21619e;
}
procedure `okhttp3.Response` `execute`(`okhttp3.RealCall` v4 @kind this) @signature `Lokhttp3/RealCall;.execute:()Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L216200.  @monitorenter v4
  #Try_start0.  
  #L216202.  v2:= v4.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #L216206.  if v2 == 0 then goto L216220;
  #L21620a.  v2:= new `java.lang.IllegalStateException`;
  #L21620e.  v3:= "Already Executed" @kind object;
  #L216212.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L216218.  throw v2;
  #L21621a.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L21621c.  @monitorexit v4
  #Try_end0.  
  #L21621e.  throw v2;
  #L216220.  v2:= 1I;
  #Try_start1.  
  #L216222.  v4.`okhttp3.RealCall.executed` @type ^`boolean` := v2 @kind boolean;
  #L216226.  @monitorexit v4
  #Try_end1.  
  #L216228.  call `captureCallStackTrace`(v4) @signature `Lokhttp3/RealCall;.captureCallStackTrace:()V` @kind direct;
  #L21622e.  v2:= v4.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L216232.  call `callStart`(v2, v4) @signature `Lokhttp3/EventListener;.callStart:(Lokhttp3/Call;)V` @kind virtual;
  #Try_start2.  
  #L216238.  v2:= v4.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21623c.  call temp:= `dispatcher`(v2) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L216242.  v2:= temp @kind object;
  #L216244.  call `executed`(v2, v4) @signature `Lokhttp3/Dispatcher;.executed:(Lokhttp3/RealCall;)V` @kind virtual;
  #L21624a.  call temp:= `getResponseWithInterceptorChain`(v4) @signature `Lokhttp3/RealCall;.getResponseWithInterceptorChain:()Lokhttp3/Response;` @kind virtual;
  #L216250.  v1:= temp @kind object;
  #L216252.  if v1 != 0 then goto L21628a;
  #L216256.  v2:= new `java.io.IOException`;
  #L21625a.  v3:= "Canceled" @kind object;
  #L21625e.  call `<init>`(v2, v3) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L216264.  throw v2;
  #Try_end2.  
  #L216266.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #Try_start3.  
  #L216268.  v2:= v4.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L21626c.  call `callFailed`(v2, v4, v0) @signature `Lokhttp3/EventListener;.callFailed:(Lokhttp3/Call;Ljava/io/IOException;)V` @kind virtual;
  #L216272.  throw v0;
  #Try_end3.  
  #L216274.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L216276.  v3:= v4.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21627a.  call temp:= `dispatcher`(v3) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L216280.  v3:= temp @kind object;
  #L216282.  call `finished`(v3, v4) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall;)V` @kind virtual;
  #L216288.  throw v2;
  #L21628a.  v2:= v4.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21628e.  call temp:= `dispatcher`(v2) @signature `Lokhttp3/OkHttpClient;.dispatcher:()Lokhttp3/Dispatcher;` @kind virtual;
  #L216294.  v2:= temp @kind object;
  #L216296.  call `finished`(v2, v4) @signature `Lokhttp3/Dispatcher;.finished:(Lokhttp3/RealCall;)V` @kind virtual;
  #L21629c.  return v1 @kind object;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L21621a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L21621a;
  catch `java.io.IOException` @[Try_start2..Try_end2] goto L216266;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L216274;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L216274;
}
procedure `okhttp3.Response` `getResponseWithInterceptorChain`(`okhttp3.RealCall` v12 @kind this) @signature `Lokhttp3/RealCall;.getResponseWithInterceptorChain:()Lokhttp3/Response;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L2162dc.  v2:= 0I;
  #L2162de.  v1:= new `java.util.ArrayList`;
  #L2162e2.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L2162e8.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2162ec.  call temp:= `interceptors`(v3) @signature `Lokhttp3/OkHttpClient;.interceptors:()Ljava/util/List;` @kind virtual;
  #L2162f2.  v3:= temp @kind object;
  #L2162f4.  call temp:= `addAll`(v1, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L2162fa.  v3:= v12.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L2162fe.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L216304.  v3:= new `okhttp3.internal.http.BridgeInterceptor`;
  #L216308.  v4:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21630c.  call temp:= `cookieJar`(v4) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L216312.  v4:= temp @kind object;
  #L216314.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/http/BridgeInterceptor;.<init>:(Lokhttp3/CookieJar;)V` @kind direct;
  #L21631a.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L216320.  v3:= new `okhttp3.internal.cache.CacheInterceptor`;
  #L216324.  v4:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L216328.  call temp:= `internalCache`(v4) @signature `Lokhttp3/OkHttpClient;.internalCache:()Lokhttp3/internal/cache/InternalCache;` @kind virtual;
  #L21632e.  v4:= temp @kind object;
  #L216330.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/cache/CacheInterceptor;.<init>:(Lokhttp3/internal/cache/InternalCache;)V` @kind direct;
  #L216336.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21633c.  v3:= new `okhttp3.internal.connection.ConnectInterceptor`;
  #L216340.  v4:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L216344.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/connection/ConnectInterceptor;.<init>:(Lokhttp3/OkHttpClient;)V` @kind direct;
  #L21634a.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L216350.  v3:= v12.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L216354.  if v3 != 0 then goto L21636a;
  #L216358.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21635c.  call temp:= `networkInterceptors`(v3) @signature `Lokhttp3/OkHttpClient;.networkInterceptors:()Ljava/util/List;` @kind virtual;
  #L216362.  v3:= temp @kind object;
  #L216364.  call temp:= `addAll`(v1, v3) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L21636a.  v3:= new `okhttp3.internal.http.CallServerInterceptor`;
  #L21636e.  v4:= v12.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L216372.  call `<init>`(v3, v4) @signature `Lokhttp3/internal/http/CallServerInterceptor;.<init>:(Z)V` @kind direct;
  #L216378.  call temp:= `add`(v1, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21637e.  v0:= new `okhttp3.internal.http.RealInterceptorChain`;
  #L216382.  v5:= 0I;
  #L216384.  v6:= v12.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L216388.  v8:= v12.`okhttp3.RealCall.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L21638c.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L216390.  call temp:= `connectTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.connectTimeoutMillis:()I` @kind virtual;
  #L216396.  v9:= temp;
  #L216398.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21639c.  call temp:= `readTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.readTimeoutMillis:()I` @kind virtual;
  #L2163a2.  v10:= temp;
  #L2163a4.  v3:= v12.`okhttp3.RealCall.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2163a8.  call temp:= `writeTimeoutMillis`(v3) @signature `Lokhttp3/OkHttpClient;.writeTimeoutMillis:()I` @kind virtual;
  #L2163ae.  v11:= temp;
  #L2163b0.  v3:= v2 @kind object;
  #L2163b2.  v4:= v2 @kind object;
  #L2163b4.  v7:= v12 @kind object;
  #L2163b6.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11) @signature `Lokhttp3/internal/http/RealInterceptorChain;.<init>:(Ljava/util/List;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;ILokhttp3/Request;Lokhttp3/Call;Lokhttp3/EventListener;III)V` @kind direct;
  #L2163bc.  v2:= v12.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L2163c0.  call temp:= `proceed`(v0, v2) @signature `Lokhttp3/Interceptor$Chain;.proceed:(Lokhttp3/Request;)Lokhttp3/Response;` @kind interface;
  #L2163c6.  v2:= temp @kind object;
  #L2163c8.  return v2 @kind object;
}
procedure `boolean` `isCanceled`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2163dc.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L2163e0.  call temp:= `isCanceled`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isCanceled:()Z` @kind virtual;
  #L2163e6.  v0:= temp;
  #L2163e8.  return v0;
}
procedure `boolean` `isExecuted`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.isExecuted:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L2163fc.  @monitorenter v1
  #Try_start0.  
  #L2163fe.  v0:= v1.`okhttp3.RealCall.executed` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L216402.  @monitorexit v1
  #L216404.  return v0;
  #L216406.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L216408.  @monitorexit v1
  #L21640a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L216406;
}
procedure `java.lang.String` `redactedUrl`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.redactedUrl:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;

  #L216428.  v0:= v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L21642c.  call temp:= `url`(v0) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L216432.  v0:= temp @kind object;
  #L216434.  call temp:= `redact`(v0) @signature `Lokhttp3/HttpUrl;.redact:()Ljava/lang/String;` @kind virtual;
  #L21643a.  v0:= temp @kind object;
  #L21643c.  return v0 @kind object;
}
procedure `okhttp3.Request` `request`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.request:()Lokhttp3/Request;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L216450.  v0:= v1.`okhttp3.RealCall.originalRequest` @type ^`okhttp3.Request` @kind object;
  #L216454.  return v0 @kind object;
}
procedure `okhttp3.internal.connection.StreamAllocation` `streamAllocation`(`okhttp3.RealCall` v1 @kind this) @signature `Lokhttp3/RealCall;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @AccessFlag  {
    temp;
    v0;

  #L216468.  v0:= v1.`okhttp3.RealCall.retryAndFollowUpInterceptor` @type ^`okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind object;
  #L21646c.  call temp:= `streamAllocation`(v0) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @kind virtual;
  #L216472.  v0:= temp @kind object;
  #L216474.  return v0 @kind object;
}
procedure `java.lang.String` `toLoggableString`(`okhttp3.RealCall` v2 @kind this) @signature `Lokhttp3/RealCall;.toLoggableString:()Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L216488.  v1:= new `java.lang.StringBuilder`;
  #L21648c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L216492.  call temp:= `isCanceled`(v2) @signature `Lokhttp3/RealCall;.isCanceled:()Z` @kind virtual;
  #L216498.  v0:= temp;
  #L21649a.  if v0 == 0 then goto L2164e4;
  #L21649e.  v0:= "canceled " @kind object;
  #L2164a2.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2164a8.  v1:= temp @kind object;
  #L2164aa.  v0:= v2.`okhttp3.RealCall.forWebSocket` @type ^`boolean` @kind boolean;
  #L2164ae.  if v0 == 0 then goto L2164ea;
  #L2164b2.  v0:= "web socket" @kind object;
  #L2164b6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2164bc.  v0:= temp @kind object;
  #L2164be.  v1:= " to " @kind object;
  #L2164c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2164c8.  v0:= temp @kind object;
  #L2164ca.  call temp:= `redactedUrl`(v2) @signature `Lokhttp3/RealCall;.redactedUrl:()Ljava/lang/String;` @kind virtual;
  #L2164d0.  v1:= temp @kind object;
  #L2164d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2164d8.  v0:= temp @kind object;
  #L2164da.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2164e0.  v0:= temp @kind object;
  #L2164e2.  return v0 @kind object;
  #L2164e4.  v0:= "" @kind object;
  #L2164e8.  goto L2164a2;
  #L2164ea.  v0:= "call" @kind object;
  #L2164ee.  goto L2164b6;
}
