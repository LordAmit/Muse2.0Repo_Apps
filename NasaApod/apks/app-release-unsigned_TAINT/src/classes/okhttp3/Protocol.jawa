record `okhttp3.Protocol` @kind class @AccessFlag PUBLIC_FINAL_ENUM extends `java.lang.Enum` @kind class {
  `java.lang.String` `okhttp3.Protocol.protocol` @AccessFlag PRIVATE_FINAL;
}
global `okhttp3.Protocol`[] `@@okhttp3.Protocol.$VALUES` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_1_0` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_1_1` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.HTTP_2` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.QUIC` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `okhttp3.Protocol` `@@okhttp3.Protocol.SPDY_3` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
procedure `void` `<clinit>`() @signature `Lokhttp3/Protocol;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L19d43c.  v7:= 4I;
  #L19d43e.  v6:= 3I;
  #L19d440.  v5:= 2I;
  #L19d442.  v4:= 1I;
  #L19d444.  v3:= 0I;
  #L19d446.  v0:= new `okhttp3.Protocol`;
  #L19d44a.  v1:= "HTTP_1_0" @kind object;
  #L19d44e.  v2:= "http/1.0" @kind object;
  #L19d452.  call `<init>`(v0, v1, v3, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19d458.  `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19d45c.  v0:= new `okhttp3.Protocol`;
  #L19d460.  v1:= "HTTP_1_1" @kind object;
  #L19d464.  v2:= "http/1.1" @kind object;
  #L19d468.  call `<init>`(v0, v1, v4, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19d46e.  `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19d472.  v0:= new `okhttp3.Protocol`;
  #L19d476.  v1:= "SPDY_3" @kind object;
  #L19d47a.  v2:= "spdy/3.1" @kind object;
  #L19d47e.  call `<init>`(v0, v1, v5, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19d484.  `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19d488.  v0:= new `okhttp3.Protocol`;
  #L19d48c.  v1:= "HTTP_2" @kind object;
  #L19d490.  v2:= "h2" @kind object;
  #L19d494.  call `<init>`(v0, v1, v6, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19d49a.  `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19d49e.  v0:= new `okhttp3.Protocol`;
  #L19d4a2.  v1:= "QUIC" @kind object;
  #L19d4a6.  v2:= "quic" @kind object;
  #L19d4aa.  call `<init>`(v0, v1, v7, v2) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @kind direct;
  #L19d4b0.  `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` := v0 @kind object;
  #L19d4b4.  v0:= 5I;
  #L19d4b6.  v0:= new `okhttp3.Protocol`[v0];
  #L19d4ba.  v1:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L19d4be.  v0[v3]:= v1 @kind object;
  #L19d4c2.  v1:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L19d4c6.  v0[v4]:= v1 @kind object;
  #L19d4ca.  v1:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L19d4ce.  v0[v5]:= v1 @kind object;
  #L19d4d2.  v1:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L19d4d6.  v0[v6]:= v1 @kind object;
  #L19d4da.  v1:= `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` @kind object;
  #L19d4de.  v0[v7]:= v1 @kind object;
  #L19d4e2.  `@@okhttp3.Protocol.$VALUES` @type ^`okhttp3.Protocol`[] := v0 @kind object;
  #L19d4e6.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.Protocol` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `java.lang.String` v3 @kind object @name `protocol`) @signature `Lokhttp3/Protocol;.<init>:(Ljava/lang/String;ILjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L19d4f8.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L19d4fe.  v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` := v3 @kind object;
  #L19d502.  return @kind void;
}
procedure `okhttp3.Protocol` `get`(`java.lang.String` v3 @kind object @name `protocol`) @signature `Lokhttp3/Protocol;.get:(Ljava/lang/String;)Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L19d514.  v0:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L19d518.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19d51c.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19d522.  v0:= temp;
  #L19d524.  if v0 == 0 then goto L19d52e;
  #L19d528.  v0:= `@@okhttp3.Protocol.HTTP_1_0` @type ^`okhttp3.Protocol` @kind object;
  #L19d52c.  return v0 @kind object;
  #L19d52e.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L19d532.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19d536.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19d53c.  v0:= temp;
  #L19d53e.  if v0 == 0 then goto L19d548;
  #L19d542.  v0:= `@@okhttp3.Protocol.HTTP_1_1` @type ^`okhttp3.Protocol` @kind object;
  #L19d546.  goto L19d52c;
  #L19d548.  v0:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L19d54c.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19d550.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19d556.  v0:= temp;
  #L19d558.  if v0 == 0 then goto L19d562;
  #L19d55c.  v0:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L19d560.  goto L19d52c;
  #L19d562.  v0:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L19d566.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19d56a.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19d570.  v0:= temp;
  #L19d572.  if v0 == 0 then goto L19d57c;
  #L19d576.  v0:= `@@okhttp3.Protocol.SPDY_3` @type ^`okhttp3.Protocol` @kind object;
  #L19d57a.  goto L19d52c;
  #L19d57c.  v0:= `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` @kind object;
  #L19d580.  v0:= v0.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19d584.  call temp:= `equals`(v3, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L19d58a.  v0:= temp;
  #L19d58c.  if v0 == 0 then goto L19d596;
  #L19d590.  v0:= `@@okhttp3.Protocol.QUIC` @type ^`okhttp3.Protocol` @kind object;
  #L19d594.  goto L19d52c;
  #L19d596.  v0:= new `java.io.IOException`;
  #L19d59a.  v1:= new `java.lang.StringBuilder`;
  #L19d59e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L19d5a4.  v2:= "Unexpected protocol: " @kind object;
  #L19d5a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19d5ae.  v1:= temp @kind object;
  #L19d5b0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L19d5b6.  v1:= temp @kind object;
  #L19d5b8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L19d5be.  v1:= temp @kind object;
  #L19d5c0.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L19d5c6.  throw v0;
}
procedure `okhttp3.Protocol` `valueOf`(`java.lang.String` v1 @kind object @name `name`) @signature `Lokhttp3/Protocol;.valueOf:(Ljava/lang/String;)Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19d5d8.  v0:= constclass @type ^`okhttp3.Protocol` @kind object;
  #L19d5dc.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L19d5e2.  v0:= temp @kind object;
  #L19d5e4.  v0:= (`okhttp3.Protocol`) v0 @kind object;
  #L19d5e8.  return v0 @kind object;
}
procedure `okhttp3.Protocol`[] `values`() @signature `Lokhttp3/Protocol;.values:()[Lokhttp3/Protocol;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L19d5fc.  v0:= `@@okhttp3.Protocol.$VALUES` @type ^`okhttp3.Protocol`[] @kind object;
  #L19d600.  call temp:= `clone`(v0) @signature `[Lokhttp3/Protocol;.clone:()Ljava/lang/Object;` @kind virtual;
  #L19d606.  v0:= temp @kind object;
  #L19d608.  v0:= (`okhttp3.Protocol`[]) v0 @kind object;
  #L19d60c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`okhttp3.Protocol` v1 @kind this) @signature `Lokhttp3/Protocol;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L19d620.  v0:= v1.`okhttp3.Protocol.protocol` @type ^`java.lang.String` @kind object;
  #L19d624.  return v0 @kind object;
}
