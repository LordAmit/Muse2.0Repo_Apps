record `okhttp3.internal.cache.FaultHidingSink` @kind class @AccessFlag  extends `okio.ForwardingSink` @kind class {
  `boolean` `okhttp3.internal.cache.FaultHidingSink.hasErrors` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`okhttp3.internal.cache.FaultHidingSink` v0 @kind this, `okio.Sink` v1 @kind object @name `delegate`) @signature `Lokhttp3/internal/cache/FaultHidingSink;.<init>:(Lokio/Sink;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L246620.  call `<init>`(v0, v1) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L246626.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.cache.FaultHidingSink` v2 @kind this) @signature `Lokhttp3/internal/cache/FaultHidingSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L246638.  v1:= v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L24663c.  if v1 == 0 then goto L246642;
  #L246640.  return @kind void;
  #Try_start0.  
  #L246642.  call `close`(v2) @signature `Lokio/ForwardingSink;.close:()V` @kind super;
  #Try_end0.  
  #L246648.  goto L246640;
  #L24664a.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L24664c.  v1:= 1I;
  #L24664e.  v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L246652.  call `onException`(v2, v0) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L246658.  goto L246640;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L24664a;
}
procedure `void` `flush`(`okhttp3.internal.cache.FaultHidingSink` v2 @kind this) @signature `Lokhttp3/internal/cache/FaultHidingSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L24667c.  v1:= v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L246680.  if v1 == 0 then goto L246686;
  #L246684.  return @kind void;
  #Try_start0.  
  #L246686.  call `flush`(v2) @signature `Lokio/ForwardingSink;.flush:()V` @kind super;
  #Try_end0.  
  #L24668c.  goto L246684;
  #L24668e.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L246690.  v1:= 1I;
  #L246692.  v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L246696.  call `onException`(v2, v0) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L24669c.  goto L246684;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L24668e;
}
procedure `void` `onException`(`okhttp3.internal.cache.FaultHidingSink` v0 @kind this, `java.io.IOException` v1 @kind object @name `e`) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @AccessFlag PROTECTED {
    temp;

  #L2466c0.  return @kind void;
}
procedure `void` `write`(`okhttp3.internal.cache.FaultHidingSink` v2 @kind this, `okio.Buffer` v3 @kind object @name `source`, `long` v4 @name `byteCount`) @signature `Lokhttp3/internal/cache/FaultHidingSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2466d4.  v1:= v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` @kind boolean;
  #L2466d8.  if v1 == 0 then goto L2466e4;
  #L2466dc.  call `skip`(v3, v4) @signature `Lokio/Buffer;.skip:(J)V` @kind virtual;
  #L2466e2.  return @kind void;
  #Try_start0.  
  #L2466e4.  call `write`(v2, v3, v4) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @kind super;
  #Try_end0.  
  #L2466ea.  goto L2466e2;
  #L2466ec.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L2466ee.  v1:= 1I;
  #L2466f0.  v2.`okhttp3.internal.cache.FaultHidingSink.hasErrors` @type ^`boolean` := v1 @kind boolean;
  #L2466f4.  call `onException`(v2, v0) @signature `Lokhttp3/internal/cache/FaultHidingSink;.onException:(Ljava/io/IOException;)V` @kind virtual;
  #L2466fa.  goto L2466e2;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L2466ec;
}
