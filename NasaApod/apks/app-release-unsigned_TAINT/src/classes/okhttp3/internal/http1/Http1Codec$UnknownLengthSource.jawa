record `okhttp3.internal.http1.Http1Codec$UnknownLengthSource` @kind class @AccessFlag  extends `okhttp3.internal.http1.Http1Codec$AbstractSource` @kind class {
  `boolean` `okhttp3.internal.http1.Http1Codec$UnknownLengthSource.inputExhausted` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$UnknownLengthSource.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$UnknownLengthSource` v1 @kind this, `okhttp3.internal.http1.Http1Codec` v2 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec$UnknownLengthSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L246b48.  v1.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v2 @kind object;
  #L246b4c.  v0:= 0I;
  #L246b4e.  call `<init>`(v1, v2, v0) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/internal/http1/Http1Codec$1;)V` @kind direct;
  #L246b54.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$UnknownLengthSource` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$UnknownLengthSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L246b68.  v0:= v2.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.closed` @type ^`boolean` @kind boolean;
  #L246b6c.  if v0 == 0 then goto L246b72;
  #L246b70.  return @kind void;
  #L246b72.  v0:= v2.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.inputExhausted` @type ^`boolean` @kind boolean;
  #L246b76.  if v0 != 0 then goto L246b84;
  #L246b7a.  v0:= 0I;
  #L246b7c.  v1:= 0I;
  #L246b7e.  call `endOfInput`(v2, v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec$UnknownLengthSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L246b84.  v0:= 1I;
  #L246b86.  v2.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.closed` @type ^`boolean` := v0 @kind boolean;
  #L246b8a.  goto L246b70;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1Codec$UnknownLengthSource` v8 @kind this, `okio.Buffer` v9 @kind object @name `sink`, `long` v10 @name `byteCount`) @signature `Lokhttp3/internal/http1/Http1Codec$UnknownLengthSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L246b9c.  v6:= 1I;
  #L246b9e.  v2:= -1L;
  #L246ba2.  v4:= 0L;
  #L246ba6.  v4:= lcmp(v10, v4);
  #L246baa.  if v4 >= 0 then goto L246be0;
  #L246bae.  v2:= new `java.lang.IllegalArgumentException`;
  #L246bb2.  v3:= new `java.lang.StringBuilder`;
  #L246bb6.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L246bbc.  v4:= "byteCount < 0: " @kind object;
  #L246bc0.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246bc6.  v3:= temp @kind object;
  #L246bc8.  call temp:= `append`(v3, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L246bce.  v3:= temp @kind object;
  #L246bd0.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L246bd6.  v3:= temp @kind object;
  #L246bd8.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246bde.  throw v2;
  #L246be0.  v4:= v8.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.closed` @type ^`boolean` @kind boolean;
  #L246be4.  if v4 == 0 then goto L246bf8;
  #L246be8.  v2:= new `java.lang.IllegalStateException`;
  #L246bec.  v3:= "closed" @kind object;
  #L246bf0.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246bf6.  throw v2;
  #L246bf8.  v4:= v8.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.inputExhausted` @type ^`boolean` @kind boolean;
  #L246bfc.  if v4 == 0 then goto L246c04;
  #L246c00.  v0:= v2 @kind wide;
  #L246c02.  return v0 @kind wide;
  #L246c04.  call temp:= `read`(v8, v9, v10) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L246c0a.  v0:= temp @kind wide;
  #L246c0c.  v4:= lcmp(v0, v2);
  #L246c10.  if v4 != 0 then goto L246c02;
  #L246c14.  v8.`okhttp3.internal.http1.Http1Codec$UnknownLengthSource.inputExhausted` @type ^`boolean` := v6 @kind boolean;
  #L246c18.  v4:= 0I;
  #L246c1a.  call `endOfInput`(v8, v6, v4) @signature `Lokhttp3/internal/http1/Http1Codec$UnknownLengthSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L246c20.  v0:= v2 @kind wide;
  #L246c22.  goto L246c02;
}
