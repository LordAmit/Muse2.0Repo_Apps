record `okhttp3.internal.http1.Http1Codec$ChunkedSource` @kind class @AccessFlag  extends `okhttp3.internal.http1.Http1Codec$AbstractSource` @kind class {
  `long` `okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okhttp3.HttpUrl` `okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @AccessFlag PRIVATE_FINAL;
}
global `long` `@@okhttp3.internal.http1.Http1Codec$ChunkedSource.NO_CHUNK_YET` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v2 @kind this, `okhttp3.internal.http1.Http1Codec` v3 @kind object, `okhttp3.HttpUrl` v4 @kind object @name `url`) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/HttpUrl;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L246758.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v3 @kind object;
  #L24675c.  v0:= 0I;
  #L24675e.  call `<init>`(v2, v3, v0) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.<init>:(Lokhttp3/internal/http1/Http1Codec;Lokhttp3/internal/http1/Http1Codec$1;)V` @kind direct;
  #L246764.  v0:= -1L;
  #L246768.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v0 @kind wide;
  #L24676c.  v0:= 1I;
  #L24676e.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v0 @kind boolean;
  #L246772.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` := v4 @kind object;
  #L246776.  return @kind void;
}
procedure `void` `readChunkSize`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v8 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.readChunkSize:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L246788.  v6:= 0L;
  #L24678c.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L246790.  v4:= -1L;
  #L246794.  v2:= lcmp(v2, v4);
  #L246798.  if v2 == 0 then goto L2467aa;
  #L24679c.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2467a0.  v2:= v2.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L2467a4.  call temp:= `readUtf8LineStrict`(v2) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #Try_start0.  
  #L2467aa.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2467ae.  v2:= v2.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L2467b2.  call temp:= `readHexadecimalUnsignedLong`(v2) @signature `Lokio/BufferedSource;.readHexadecimalUnsignedLong:()J` @kind interface;
  #L2467b8.  v2:= temp @kind wide;
  #L2467ba.  v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v2 @kind wide;
  #L2467be.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L2467c2.  v2:= v2.`okhttp3.internal.http1.Http1Codec.source` @type ^`okio.BufferedSource` @kind object;
  #L2467c6.  call temp:= `readUtf8LineStrict`(v2) @signature `Lokio/BufferedSource;.readUtf8LineStrict:()Ljava/lang/String;` @kind interface;
  #L2467cc.  v2:= temp @kind object;
  #L2467ce.  call temp:= `trim`(v2) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L2467d4.  v1:= temp @kind object;
  #L2467d6.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2467da.  v2:= lcmp(v2, v6);
  #L2467de.  if v2 < 0 then goto L2467fe;
  #L2467e2.  call temp:= `isEmpty`(v1) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L2467e8.  v2:= temp;
  #L2467ea.  if v2 != 0 then goto L24685e;
  #L2467ee.  v2:= ";" @kind object;
  #L2467f2.  call temp:= `startsWith`(v1, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L2467f8.  v2:= temp;
  #L2467fa.  if v2 != 0 then goto L24685e;
  #L2467fe.  v2:= new `java.net.ProtocolException`;
  #L246802.  v3:= new `java.lang.StringBuilder`;
  #L246806.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24680c.  v4:= "expected chunk size and optional extensions but was \"" @kind object;
  #L246810.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246816.  v3:= temp @kind object;
  #L246818.  v4:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L24681c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L246822.  v3:= temp @kind object;
  #L246824.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L24682a.  v3:= temp @kind object;
  #L24682c.  v4:= "\"" @kind object;
  #L246830.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246836.  v3:= temp @kind object;
  #L246838.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L24683e.  v3:= temp @kind object;
  #L246840.  call `<init>`(v2, v3) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246846.  throw v2;
  #Try_end0.  
  #L246848.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L24684a.  v2:= new `java.net.ProtocolException`;
  #L24684e.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L246854.  v3:= temp @kind object;
  #L246856.  call `<init>`(v2, v3) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24685c.  throw v2;
  #L24685e.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L246862.  v2:= lcmp(v2, v6);
  #L246866.  if v2 != 0 then goto L2468a0;
  #L24686a.  v2:= 0I;
  #L24686c.  v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` := v2 @kind boolean;
  #L246870.  v2:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L246874.  v2:= v2.`okhttp3.internal.http1.Http1Codec.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L246878.  call temp:= `cookieJar`(v2) @signature `Lokhttp3/OkHttpClient;.cookieJar:()Lokhttp3/CookieJar;` @kind virtual;
  #L24687e.  v2:= temp @kind object;
  #L246880.  v3:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.url` @type ^`okhttp3.HttpUrl` @kind object;
  #L246884.  v4:= v8.`okhttp3.internal.http1.Http1Codec$ChunkedSource.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L246888.  call temp:= `readHeaders`(v4) @signature `Lokhttp3/internal/http1/Http1Codec;.readHeaders:()Lokhttp3/Headers;` @kind virtual;
  #L24688e.  v4:= temp @kind object;
  #L246890.  call `receiveHeaders`(v2, v3, v4) @signature `Lokhttp3/internal/http/HttpHeaders;.receiveHeaders:(Lokhttp3/CookieJar;Lokhttp3/HttpUrl;Lokhttp3/Headers;)V` @kind static;
  #L246896.  v2:= 1I;
  #L246898.  v3:= 0I;
  #L24689a.  call `endOfInput`(v8, v2, v3) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L2468a0.  return @kind void;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L246848;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L2468c4.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` @kind boolean;
  #L2468c8.  if v0 == 0 then goto L2468ce;
  #L2468cc.  return @kind void;
  #L2468ce.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L2468d2.  if v0 == 0 then goto L2468f4;
  #L2468d6.  v0:= 100I;
  #L2468da.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L2468de.  call temp:= `discard`(v2, v0, v1) @signature `Lokhttp3/internal/Util;.discard:(Lokio/Source;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L2468e4.  v0:= temp;
  #L2468e6.  if v0 != 0 then goto L2468f4;
  #L2468ea.  v0:= 0I;
  #L2468ec.  v1:= 0I;
  #L2468ee.  call `endOfInput`(v2, v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L2468f4.  v0:= 1I;
  #L2468f6.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` := v0 @kind boolean;
  #L2468fa.  goto L2468cc;
}
procedure `long` `read`(`okhttp3.internal.http1.Http1Codec$ChunkedSource` v10 @kind this, `okio.Buffer` v11 @kind object @name `sink`, `long` v12 @name `byteCount`) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.read:(Lokio/Buffer;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L24690c.  v8:= 0L;
  #L246910.  v4:= -1L;
  #L246914.  v1:= lcmp(v12, v8);
  #L246918.  if v1 >= 0 then goto L24694e;
  #L24691c.  v1:= new `java.lang.IllegalArgumentException`;
  #L246920.  v4:= new `java.lang.StringBuilder`;
  #L246924.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L24692a.  v5:= "byteCount < 0: " @kind object;
  #L24692e.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L246934.  v4:= temp @kind object;
  #L246936.  call temp:= `append`(v4, v12) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L24693c.  v4:= temp @kind object;
  #L24693e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L246944.  v4:= temp @kind object;
  #L246946.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L24694c.  throw v1;
  #L24694e.  v1:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.closed` @type ^`boolean` @kind boolean;
  #L246952.  if v1 == 0 then goto L246966;
  #L246956.  v1:= new `java.lang.IllegalStateException`;
  #L24695a.  v4:= "closed" @kind object;
  #L24695e.  call `<init>`(v1, v4) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L246964.  throw v1;
  #L246966.  v1:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L24696a.  if v1 != 0 then goto L246972;
  #L24696e.  v2:= v4 @kind wide;
  #L246970.  return v2 @kind wide;
  #L246972.  v6:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L246976.  v1:= lcmp(v6, v8);
  #L24697a.  if v1 == 0 then goto L24698a;
  #L24697e.  v6:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L246982.  v1:= lcmp(v6, v4);
  #L246986.  if v1 != 0 then goto L24699c;
  #L24698a.  call `readChunkSize`(v10) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.readChunkSize:()V` @kind direct;
  #L246990.  v1:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.hasMoreChunks` @type ^`boolean` @kind boolean;
  #L246994.  if v1 != 0 then goto L24699c;
  #L246998.  v2:= v4 @kind wide;
  #L24699a.  goto L246970;
  #L24699c.  v6:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2469a0.  call temp:= `min`(v12, v6) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L2469a6.  v6:= temp @kind wide;
  #L2469a8.  call temp:= `read`(v10, v11, v6) @signature `Lokhttp3/internal/http1/Http1Codec$AbstractSource;.read:(Lokio/Buffer;J)J` @kind super;
  #L2469ae.  v2:= temp @kind wide;
  #L2469b0.  v1:= lcmp(v2, v4);
  #L2469b4.  if v1 != 0 then goto L2469d0;
  #L2469b8.  v0:= new `java.net.ProtocolException`;
  #L2469bc.  v1:= "unexpected end of stream" @kind object;
  #L2469c0.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2469c6.  v1:= 0I;
  #L2469c8.  call `endOfInput`(v10, v1, v0) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSource;.endOfInput:(ZLjava/io/IOException;)V` @kind virtual;
  #L2469ce.  throw v0;
  #L2469d0.  v4:= v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` @kind wide;
  #L2469d4.  v4:= v4 - v2 @kind long;
  #L2469d6.  v10.`okhttp3.internal.http1.Http1Codec$ChunkedSource.bytesRemainingInChunk` @type ^`long` := v4 @kind wide;
  #L2469da.  goto L246970;
}
