record `okhttp3.internal.http1.Http1Codec$ChunkedSink` @kind class @AccessFlag FINAL extends `okio.Sink` @kind interface {
  `boolean` `okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @AccessFlag PRIVATE;
  `okhttp3.internal.http1.Http1Codec` `okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @AccessFlag FINAL_SYNTHETIC;
  `okio.ForwardingTimeout` `okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v2 @kind this, `okhttp3.internal.http1.Http1Codec` v3 @kind object) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.<init>:(Lokhttp3/internal/http1/Http1Codec;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L2199f8.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` := v3 @kind object;
  #L2199fc.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L219a02.  v0:= new `okio.ForwardingTimeout`;
  #L219a06.  v1:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219a0a.  v1:= v1.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L219a0e.  call temp:= `timeout`(v1) @signature `Lokio/BufferedSink;.timeout:()Lokio/Timeout;` @kind interface;
  #L219a14.  v1:= temp @kind object;
  #L219a16.  call `<init>`(v0, v1) @signature `Lokio/ForwardingTimeout;.<init>:(Lokio/Timeout;)V` @kind direct;
  #L219a1c.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @type ^`okio.ForwardingTimeout` := v0 @kind object;
  #L219a20.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v2 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L219a34.  @monitorenter v2
  #Try_start0.  
  #L219a36.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L219a3a.  if v0 == 0 then goto L219a42;
  #L219a3e.  @monitorexit v2
  #L219a40.  return @kind void;
  #L219a42.  v0:= 1I;
  #Try_start1.  
  #L219a44.  v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` := v0 @kind boolean;
  #L219a48.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219a4c.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L219a50.  v1:= "0\r\n\r\n" @kind object;
  #L219a54.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L219a5a.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219a5e.  v1:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L219a62.  call `detachTimeout`(v0, v1) @signature `Lokhttp3/internal/http1/Http1Codec;.detachTimeout:(Lokio/ForwardingTimeout;)V` @kind virtual;
  #L219a68.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219a6c.  v1:= 3I;
  #L219a6e.  v0.`okhttp3.internal.http1.Http1Codec.state` @type ^`int` := v1;
  #Try_end1.  
  #L219a72.  goto L219a3e;
  #L219a74.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L219a76.  @monitorexit v2
  #L219a78.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L219a74;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L219a74;
}
procedure `void` `flush`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L219aa0.  @monitorenter v1
  #Try_start0.  
  #L219aa2.  v0:= v1.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L219aa6.  if v0 == 0 then goto L219aae;
  #L219aaa.  @monitorexit v1
  #L219aac.  return @kind void;
  #Try_start1.  
  #L219aae.  v0:= v1.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219ab2.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L219ab6.  call `flush`(v0) @signature `Lokio/BufferedSink;.flush:()V` @kind interface;
  #Try_end1.  
  #L219abc.  goto L219aaa;
  #L219abe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L219ac0.  @monitorexit v1
  #L219ac2.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L219abe;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L219abe;
}
procedure `okio.Timeout` `timeout`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v1 @kind this) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.timeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L219ae8.  v0:= v1.`okhttp3.internal.http1.Http1Codec$ChunkedSink.timeout` @type ^`okio.ForwardingTimeout` @kind object;
  #L219aec.  return v0 @kind object;
}
procedure `void` `write`(`okhttp3.internal.http1.Http1Codec$ChunkedSink` v2 @kind this, `okio.Buffer` v3 @kind object @name `source`, `long` v4 @name `byteCount`) @signature `Lokhttp3/internal/http1/Http1Codec$ChunkedSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L219b00.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.closed` @type ^`boolean` @kind boolean;
  #L219b04.  if v0 == 0 then goto L219b18;
  #L219b08.  v0:= new `java.lang.IllegalStateException`;
  #L219b0c.  v1:= "closed" @kind object;
  #L219b10.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L219b16.  throw v0;
  #L219b18.  v0:= 0L;
  #L219b1c.  v0:= lcmp(v4, v0);
  #L219b20.  if v0 != 0 then goto L219b26;
  #L219b24.  return @kind void;
  #L219b26.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219b2a.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L219b2e.  call temp:= `writeHexadecimalUnsignedLong`(v0, v4) @signature `Lokio/BufferedSink;.writeHexadecimalUnsignedLong:(J)Lokio/BufferedSink;` @kind interface;
  #L219b34.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219b38.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L219b3c.  v1:= "\r\n" @kind object;
  #L219b40.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L219b46.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219b4a.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L219b4e.  call `write`(v0, v3, v4) @signature `Lokio/BufferedSink;.write:(Lokio/Buffer;J)V` @kind interface;
  #L219b54.  v0:= v2.`okhttp3.internal.http1.Http1Codec$ChunkedSink.this$0` @type ^`okhttp3.internal.http1.Http1Codec` @kind object;
  #L219b58.  v0:= v0.`okhttp3.internal.http1.Http1Codec.sink` @type ^`okio.BufferedSink` @kind object;
  #L219b5c.  v1:= "\r\n" @kind object;
  #L219b60.  call temp:= `writeUtf8`(v0, v1) @signature `Lokio/BufferedSink;.writeUtf8:(Ljava/lang/String;)Lokio/BufferedSink;` @kind interface;
  #L219b66.  goto L219b24;
}
