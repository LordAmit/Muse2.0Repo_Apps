record `okhttp3.internal.platform.OptionalMethod` @kind class @AccessFlag  {
  `java.lang.String` `okhttp3.internal.platform.OptionalMethod.methodName` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `okhttp3.internal.platform.OptionalMethod.methodParams` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `okhttp3.internal.platform.OptionalMethod.returnType` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`okhttp3.internal.platform.OptionalMethod` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object @name `methodName`, `java.lang.Class`[] v3 @kind object @name `methodParams`) @signature `Lokhttp3/internal/platform/OptionalMethod;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1aa064.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1aa06a.  v0.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` := v1 @kind object;
  #L1aa06e.  v0.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` := v2 @kind object;
  #L1aa072.  v0.`okhttp3.internal.platform.OptionalMethod.methodParams` @type ^`java.lang.Class`[] := v3 @kind object;
  #L1aa076.  return @kind void;
}
procedure `java.lang.reflect.Method` `getMethod`(`okhttp3.internal.platform.OptionalMethod` v3 @kind this, `java.lang.Class` v4 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1aa088.  v0:= 0I;
  #L1aa08a.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L1aa08e.  if v1 == 0 then goto L1aa0c8;
  #L1aa092.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L1aa096.  v2:= v3.`okhttp3.internal.platform.OptionalMethod.methodParams` @type ^`java.lang.Class`[] @kind object;
  #L1aa09a.  call temp:= `getPublicMethod`(v4, v1, v2) @signature `Lokhttp3/internal/platform/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L1aa0a0.  v0:= temp @kind object;
  #L1aa0a2.  if v0 == 0 then goto L1aa0c8;
  #L1aa0a6.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` @kind object;
  #L1aa0aa.  if v1 == 0 then goto L1aa0c8;
  #L1aa0ae.  v1:= v3.`okhttp3.internal.platform.OptionalMethod.returnType` @type ^`java.lang.Class` @kind object;
  #L1aa0b2.  call temp:= `getReturnType`(v0) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L1aa0b8.  v2:= temp @kind object;
  #L1aa0ba.  call temp:= `isAssignableFrom`(v1, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1aa0c0.  v1:= temp;
  #L1aa0c2.  if v1 != 0 then goto L1aa0c8;
  #L1aa0c6.  v0:= 0I;
  #L1aa0c8.  return v0 @kind object;
}
procedure `java.lang.reflect.Method` `getPublicMethod`(`java.lang.Class` v2 @kind object, `java.lang.String` v3 @kind object @name `methodName`, `java.lang.Class`[] v4 @kind object @name `parameterTypes`) @signature `Lokhttp3/internal/platform/OptionalMethod;.getPublicMethod:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1aa0dc.  v0:= 0I;
  #Try_start0.  
  #L1aa0de.  call temp:= `getMethod`(v2, v3, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L1aa0e4.  v0:= temp @kind object;
  #L1aa0e6.  call temp:= `getModifiers`(v0) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #Try_end0.  
  #L1aa0ec.  v1:= temp;
  #L1aa0ee.  v1:= v1 ^& 1;
  #L1aa0f2.  if v1 != 0 then goto L1aa0f8;
  #L1aa0f6.  v0:= 0I;
  #L1aa0f8.  return v0 @kind object;
  #L1aa0fa.  v1:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L1aa0fc.  goto L1aa0f8;
  catch `java.lang.NoSuchMethodException` @[Try_start0..Try_end0] goto L1aa0fa;
}
procedure `java.lang.Object` `invoke`(`okhttp3.internal.platform.OptionalMethod` v6 @kind this, `java.lang.Object` v7 @kind object, `java.lang.Object`[] v8 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1aa120.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1aa126.  v3:= temp @kind object;
  #L1aa128.  call temp:= `getMethod`(v6, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L1aa12e.  v2:= temp @kind object;
  #L1aa130.  if v2 != 0 then goto L1aa17e;
  #L1aa134.  v3:= new `java.lang.AssertionError`;
  #L1aa138.  v4:= new `java.lang.StringBuilder`;
  #L1aa13c.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1aa142.  v5:= "Method " @kind object;
  #L1aa146.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1aa14c.  v4:= temp @kind object;
  #L1aa14e.  v5:= v6.`okhttp3.internal.platform.OptionalMethod.methodName` @type ^`java.lang.String` @kind object;
  #L1aa152.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1aa158.  v4:= temp @kind object;
  #L1aa15a.  v5:= " not supported for object " @kind object;
  #L1aa15e.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1aa164.  v4:= temp @kind object;
  #L1aa166.  call temp:= `append`(v4, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1aa16c.  v4:= temp @kind object;
  #L1aa16e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1aa174.  v4:= temp @kind object;
  #L1aa176.  call `<init>`(v3, v4) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1aa17c.  throw v3;
  #Try_start0.  
  #L1aa17e.  call temp:= `invoke`(v2, v7, v8) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1aa184.  v3:= temp @kind object;
  #L1aa186.  return v3 @kind object;
  #L1aa188.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L1aa18a.  v1:= new `java.lang.AssertionError`;
  #L1aa18e.  v3:= new `java.lang.StringBuilder`;
  #L1aa192.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1aa198.  v4:= "Unexpectedly could not call: " @kind object;
  #L1aa19c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1aa1a2.  v3:= temp @kind object;
  #L1aa1a4.  call temp:= `append`(v3, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1aa1aa.  v3:= temp @kind object;
  #L1aa1ac.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1aa1b2.  v3:= temp @kind object;
  #L1aa1b4.  call `<init>`(v1, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1aa1ba.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1aa1c0.  throw v1;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L1aa188;
}
procedure `java.lang.Object` `invokeOptional`(`okhttp3.internal.platform.OptionalMethod` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1aa1e4.  v2:= 0I;
  #L1aa1e6.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1aa1ec.  v3:= temp @kind object;
  #L1aa1ee.  call temp:= `getMethod`(v4, v3) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L1aa1f4.  v1:= temp @kind object;
  #L1aa1f6.  if v1 != 0 then goto L1aa1fc;
  #L1aa1fa.  return v2 @kind object;
  #Try_start0.  
  #L1aa1fc.  call temp:= `invoke`(v1, v5, v6) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1aa202.  v2:= temp @kind object;
  #L1aa204.  goto L1aa1fa;
  #L1aa206.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L1aa208.  goto L1aa1fa;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L1aa206;
}
procedure `java.lang.Object` `invokeOptionalWithoutCheckedException`(`okhttp3.internal.platform.OptionalMethod` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptionalWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L1aa22c.  call temp:= `invokeOptional`(v4, v5, v6) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeOptional:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1aa232.  v3:= temp @kind object;
  #L1aa234.  return v3 @kind object;
  #L1aa236.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L1aa238.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L1aa23e.  v2:= temp @kind object;
  #L1aa240.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L1aa244.  if v3 == 0 then goto L1aa24e;
  #L1aa248.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L1aa24c.  throw v2;
  #L1aa24e.  v1:= new `java.lang.AssertionError`;
  #L1aa252.  v3:= "Unexpected exception" @kind object;
  #L1aa256.  call `<init>`(v1, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1aa25c.  call temp:= `initCause`(v1, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1aa262.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L1aa236;
}
procedure `java.lang.Object` `invokeWithoutCheckedException`(`okhttp3.internal.platform.OptionalMethod` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object`[] v6 @kind object @name `args`) @signature `Lokhttp3/internal/platform/OptionalMethod;.invokeWithoutCheckedException:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L1aa284.  call temp:= `invoke`(v4, v5, v6) @signature `Lokhttp3/internal/platform/OptionalMethod;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1aa28a.  v3:= temp @kind object;
  #L1aa28c.  return v3 @kind object;
  #L1aa28e.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L1aa290.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L1aa296.  v2:= temp @kind object;
  #L1aa298.  v3:= instanceof @variable v2 @type ^`java.lang.RuntimeException` @kind boolean;
  #L1aa29c.  if v3 == 0 then goto L1aa2a6;
  #L1aa2a0.  v2:= (`java.lang.RuntimeException`) v2 @kind object;
  #L1aa2a4.  throw v2;
  #L1aa2a6.  v1:= new `java.lang.AssertionError`;
  #L1aa2aa.  v3:= "Unexpected exception" @kind object;
  #L1aa2ae.  call `<init>`(v1, v3) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1aa2b4.  call temp:= `initCause`(v1, v2) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L1aa2ba.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L1aa28e;
}
procedure `boolean` `isSupported`(`okhttp3.internal.platform.OptionalMethod` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lokhttp3/internal/platform/OptionalMethod;.isSupported:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1aa2dc.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1aa2e2.  v0:= temp @kind object;
  #L1aa2e4.  call temp:= `getMethod`(v1, v0) @signature `Lokhttp3/internal/platform/OptionalMethod;.getMethod:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L1aa2ea.  v0:= temp @kind object;
  #L1aa2ec.  if v0 == 0 then goto L1aa2f4;
  #L1aa2f0.  v0:= 1I;
  #L1aa2f2.  return v0;
  #L1aa2f4.  v0:= 0I;
  #L1aa2f6.  goto L1aa2f2;
}
