record `okhttp3.internal.http2.Http2Stream` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @AccessFlag ;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2Stream.connection` @AccessFlag FINAL;
  `okhttp3.internal.http2.ErrorCode` `okhttp3.internal.http2.Http2Stream.errorCode` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Http2Stream.id` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$StreamTimeout` `okhttp3.internal.http2.Http2Stream.readTimeout` @AccessFlag FINAL;
  `java.util.List` `okhttp3.internal.http2.Http2Stream.requestHeaders` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `okhttp3.internal.http2.Http2Stream.responseHeaders` @AccessFlag PRIVATE;
  `okhttp3.internal.http2.Http2Stream$FramingSink` `okhttp3.internal.http2.Http2Stream.sink` @AccessFlag FINAL;
  `okhttp3.internal.http2.Http2Stream$FramingSource` `okhttp3.internal.http2.Http2Stream.source` @AccessFlag PRIVATE_FINAL;
  `long` `okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @AccessFlag ;
  `okhttp3.internal.http2.Http2Stream$StreamTimeout` `okhttp3.internal.http2.Http2Stream.writeTimeout` @AccessFlag FINAL;
}
global `boolean` `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Stream;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a8084.  v0:= constclass @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L1a8088.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L1a808e.  v0:= temp;
  #L1a8090.  if v0 != 0 then goto L1a809c;
  #L1a8094.  v0:= 1I;
  #L1a8096.  `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` := v0 @kind boolean;
  #L1a809a.  return @kind void;
  #L1a809c.  v0:= 0I;
  #L1a809e.  goto L1a8096;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Stream` v4 @kind this, `int` v5 @name `id`, `okhttp3.internal.http2.Http2Connection` v6 @kind object @name `connection`, `boolean` v7 @name `outFinished`, `boolean` v8 @name `inFinished`, `java.util.List` v9 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.<init>:(ILokhttp3/internal/http2/Http2Connection;ZZLjava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a80b0.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a80b6.  v0:= 0L;
  #L1a80ba.  v4.`okhttp3.internal.http2.Http2Stream.unacknowledgedBytesRead` @type ^`long` := v0 @kind wide;
  #L1a80be.  v0:= new `okhttp3.internal.http2.Http2Stream$StreamTimeout`;
  #L1a80c2.  call `<init>`(v0, v4) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L1a80c8.  v4.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` := v0 @kind object;
  #L1a80cc.  v0:= new `okhttp3.internal.http2.Http2Stream$StreamTimeout`;
  #L1a80d0.  call `<init>`(v0, v4) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L1a80d6.  v4.`okhttp3.internal.http2.Http2Stream.writeTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` := v0 @kind object;
  #L1a80da.  v0:= 0I;
  #L1a80dc.  v4.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v0 @kind object;
  #L1a80e0.  if v6 != 0 then goto L1a80f4;
  #L1a80e4.  v0:= new `java.lang.NullPointerException`;
  #L1a80e8.  v1:= "connection == null" @kind object;
  #L1a80ec.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a80f2.  throw v0;
  #L1a80f4.  if v9 != 0 then goto L1a8108;
  #L1a80f8.  v0:= new `java.lang.NullPointerException`;
  #L1a80fc.  v1:= "requestHeaders == null" @kind object;
  #L1a8100.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a8106.  throw v0;
  #L1a8108.  v4.`okhttp3.internal.http2.Http2Stream.id` @type ^`int` := v5;
  #L1a810c.  v4.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` := v6 @kind object;
  #L1a8110.  v0:= v6.`okhttp3.internal.http2.Http2Connection.peerSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a8114.  call temp:= `getInitialWindowSize`(v0) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L1a811a.  v0:= temp;
  #L1a811c.  v0:= (`long`) v0 @kind i2l;
  #L1a811e.  v4.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L1a8122.  v0:= new `okhttp3.internal.http2.Http2Stream$FramingSource`;
  #L1a8126.  v1:= v6.`okhttp3.internal.http2.Http2Connection.okHttpSettings` @type ^`okhttp3.internal.http2.Settings` @kind object;
  #L1a812a.  call temp:= `getInitialWindowSize`(v1) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @kind virtual;
  #L1a8130.  v1:= temp;
  #L1a8132.  v2:= (`long`) v1 @kind i2l;
  #L1a8134.  call `<init>`(v0, v4, v2) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.<init>:(Lokhttp3/internal/http2/Http2Stream;J)V` @kind direct;
  #L1a813a.  v4.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` := v0 @kind object;
  #L1a813e.  v0:= new `okhttp3.internal.http2.Http2Stream$FramingSink`;
  #L1a8142.  call `<init>`(v0, v4) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSink;.<init>:(Lokhttp3/internal/http2/Http2Stream;)V` @kind direct;
  #L1a8148.  v4.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` := v0 @kind object;
  #L1a814c.  v0:= v4.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a8150.  v0.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` := v8 @kind boolean;
  #L1a8154.  v0:= v4.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a8158.  v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` := v7 @kind boolean;
  #L1a815c.  v4.`okhttp3.internal.http2.Http2Stream.requestHeaders` @type ^`java.util.List` := v9 @kind object;
  #L1a8160.  return @kind void;
}
procedure `boolean` `closeInternal`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object @name `errorCode`) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a8174.  v0:= 0I;
  #L1a8176.  v1:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a817a.  if v1 != 0 then goto L1a8196;
  #L1a817e.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a8184.  v1:= temp;
  #L1a8186.  if v1 == 0 then goto L1a8196;
  #L1a818a.  v0:= new `java.lang.AssertionError`;
  #L1a818e.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a8194.  throw v0;
  #L1a8196.  @monitorenter v2
  #Try_start0.  
  #L1a8198.  v1:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a819c.  if v1 == 0 then goto L1a81a4;
  #L1a81a0.  @monitorexit v2
  #L1a81a2.  return v0;
  #L1a81a4.  v1:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a81a8.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L1a81ac.  if v1 == 0 then goto L1a81c6;
  #L1a81b0.  v1:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a81b4.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L1a81b8.  if v1 == 0 then goto L1a81c6;
  #L1a81bc.  @monitorexit v2
  #L1a81be.  goto L1a81a2;
  #L1a81c0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a81c2.  @monitorexit v2
  #Try_end0.  
  #L1a81c4.  throw v0;
  #Try_start1.  
  #L1a81c6.  v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v3 @kind object;
  #L1a81ca.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1a81d0.  @monitorexit v2
  #Try_end1.  
  #L1a81d2.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a81d6.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a81da.  call temp:= `removeStream`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L1a81e0.  v0:= 1I;
  #L1a81e2.  goto L1a81a2;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a81c0;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a81c0;
}
procedure `void` `addBytesToWriteWindow`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `long` v4 @name `delta`) @signature `Lokhttp3/internal/http2/Http2Stream;.addBytesToWriteWindow:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a8208.  v0:= v3.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` @kind wide;
  #L1a820c.  v0:= v0 + v4 @kind long;
  #L1a820e.  v3.`okhttp3.internal.http2.Http2Stream.bytesLeftInWriteWindow` @type ^`long` := v0 @kind wide;
  #L1a8212.  v0:= 0L;
  #L1a8216.  v0:= lcmp(v4, v0);
  #L1a821a.  if v0 <= 0 then goto L1a8224;
  #L1a821e.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1a8224.  return @kind void;
}
procedure `void` `cancelStreamIfNecessary`(`okhttp3.internal.http2.Http2Stream` v4 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.cancelStreamIfNecessary:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a8238.  v2:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a823c.  if v2 != 0 then goto L1a8258;
  #L1a8240.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a8246.  v2:= temp;
  #L1a8248.  if v2 == 0 then goto L1a8258;
  #L1a824c.  v2:= new `java.lang.AssertionError`;
  #L1a8250.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a8256.  throw v2;
  #L1a8258.  @monitorenter v4
  #Try_start0.  
  #L1a825a.  v2:= v4.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a825e.  v2:= v2.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L1a8262.  if v2 != 0 then goto L1a82a6;
  #L1a8266.  v2:= v4.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a826a.  v2:= v2.`okhttp3.internal.http2.Http2Stream$FramingSource.closed` @type ^`boolean` @kind boolean;
  #L1a826e.  if v2 == 0 then goto L1a82a6;
  #L1a8272.  v2:= v4.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a8276.  v2:= v2.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L1a827a.  if v2 != 0 then goto L1a828a;
  #L1a827e.  v2:= v4.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a8282.  v2:= v2.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L1a8286.  if v2 == 0 then goto L1a82a6;
  #L1a828a.  v0:= 1I;
  #L1a828c.  call temp:= `isOpen`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L1a8292.  v1:= temp;
  #L1a8294.  @monitorexit v4
  #Try_end0.  
  #L1a8296.  if v0 == 0 then goto L1a82b0;
  #L1a829a.  v2:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a829e.  call `close`(v4, v2) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a82a4.  return @kind void;
  #L1a82a6.  v0:= 0I;
  #L1a82a8.  goto L1a828c;
  #L1a82aa.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L1a82ac.  @monitorexit v4
  #Try_end1.  
  #L1a82ae.  throw v2;
  #L1a82b0.  if v1 != 0 then goto L1a82a4;
  #L1a82b4.  v2:= v4.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a82b8.  v3:= v4.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a82bc.  call temp:= `removeStream`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L1a82c2.  goto L1a82a4;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a82aa;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a82aa;
}
procedure `void` `checkOutNotClosed`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.checkOutNotClosed:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a82e8.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a82ec.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L1a82f0.  if v0 == 0 then goto L1a8304;
  #L1a82f4.  v0:= new `java.io.IOException`;
  #L1a82f8.  v1:= "stream closed" @kind object;
  #L1a82fc.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a8302.  throw v0;
  #L1a8304.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a8308.  v0:= v0.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L1a830c.  if v0 == 0 then goto L1a8320;
  #L1a8310.  v0:= new `java.io.IOException`;
  #L1a8314.  v1:= "stream finished" @kind object;
  #L1a8318.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a831e.  throw v0;
  #L1a8320.  v0:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a8324.  if v0 == 0 then goto L1a8338;
  #L1a8328.  v0:= new `okhttp3.internal.http2.StreamResetException`;
  #L1a832c.  v1:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a8330.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L1a8336.  throw v0;
  #L1a8338.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object @name `rstStatusCode`) @signature `Lokhttp3/internal/http2/Http2Stream;.close:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a834c.  call temp:= `closeInternal`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @kind direct;
  #L1a8352.  v0:= temp;
  #L1a8354.  if v0 != 0 then goto L1a835a;
  #L1a8358.  return @kind void;
  #L1a835a.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a835e.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a8362.  call `writeSynReset`(v0, v1, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynReset:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a8368.  goto L1a8358;
}
procedure `void` `closeLater`(`okhttp3.internal.http2.Http2Stream` v2 @kind this, `okhttp3.internal.http2.ErrorCode` v3 @kind object @name `errorCode`) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a837c.  call temp:= `closeInternal`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Stream;.closeInternal:(Lokhttp3/internal/http2/ErrorCode;)Z` @kind direct;
  #L1a8382.  v0:= temp;
  #L1a8384.  if v0 != 0 then goto L1a838a;
  #L1a8388.  return @kind void;
  #L1a838a.  v0:= v2.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a838e.  v1:= v2.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a8392.  call `writeSynResetLater`(v0, v1, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynResetLater:(ILokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L1a8398.  goto L1a8388;
}
procedure `okhttp3.internal.http2.Http2Connection` `getConnection`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getConnection:()Lokhttp3/internal/http2/Http2Connection;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a83ac.  v0:= v1.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a83b0.  return v0 @kind object;
}
procedure `okhttp3.internal.http2.ErrorCode` `getErrorCode`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getErrorCode:()Lokhttp3/internal/http2/ErrorCode;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a83c4.  @monitorenter v1
  #Try_start0.  
  #L1a83c6.  v0:= v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #Try_end0.  
  #L1a83ca.  @monitorexit v1
  #L1a83cc.  return v0 @kind object;
  #L1a83ce.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a83d0.  @monitorexit v1
  #L1a83d2.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a83ce;
}
procedure `int` `getId`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getId:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a83f0.  v0:= v1.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a83f4.  return v0;
}
procedure `java.util.List` `getRequestHeaders`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getRequestHeaders:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a8408.  v0:= v1.`okhttp3.internal.http2.Http2Stream.requestHeaders` @type ^`java.util.List` @kind object;
  #L1a840c.  return v0 @kind object;
}
procedure `okio.Sink` `getSink`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a8420.  @monitorenter v2
  #Try_start0.  
  #L1a8422.  v0:= v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` @kind boolean;
  #L1a8426.  if v0 != 0 then goto L1a844c;
  #L1a842a.  call temp:= `isLocallyInitiated`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L1a8430.  v0:= temp;
  #L1a8432.  if v0 != 0 then goto L1a844c;
  #L1a8436.  v0:= new `java.lang.IllegalStateException`;
  #L1a843a.  v1:= "reply before requesting the sink" @kind object;
  #L1a843e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a8444.  throw v0;
  #L1a8446.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a8448.  @monitorexit v2
  #Try_end0.  
  #L1a844a.  throw v0;
  #Try_start1.  
  #L1a844c.  @monitorexit v2
  #Try_end1.  
  #L1a844e.  v0:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a8452.  return v0 @kind object;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a8446;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a8446;
}
procedure `okio.Source` `getSource`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource:()Lokio/Source;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a8478.  v0:= v1.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a847c.  return v0 @kind object;
}
procedure `boolean` `isLocallyInitiated`(`okhttp3.internal.http2.Http2Stream` v4 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a8490.  v2:= 0I;
  #L1a8492.  v1:= 1I;
  #L1a8494.  v3:= v4.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a8498.  v3:= v3 ^& 1;
  #L1a849c.  if v3 != v1 then goto L1a84b0;
  #L1a84a0.  v0:= v1;
  #L1a84a2.  v3:= v4.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a84a6.  v3:= v3.`okhttp3.internal.http2.Http2Connection.client` @type ^`boolean` @kind boolean;
  #L1a84aa.  if v3 != v0 then goto L1a84b4;
  #L1a84ae.  return v1;
  #L1a84b0.  v0:= v2;
  #L1a84b2.  goto L1a84a2;
  #L1a84b4.  v1:= v2;
  #L1a84b6.  goto L1a84ae;
}
procedure `boolean` `isOpen`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a84c8.  v0:= 0I;
  #L1a84ca.  @monitorenter v2
  #Try_start0.  
  #L1a84cc.  v1:= v2.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #Try_end0.  
  #L1a84d0.  if v1 == 0 then goto L1a84d8;
  #L1a84d4.  @monitorexit v2
  #L1a84d6.  return v0;
  #Try_start1.  
  #L1a84d8.  v1:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a84dc.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` @kind boolean;
  #L1a84e0.  if v1 != 0 then goto L1a84f0;
  #L1a84e4.  v1:= v2.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a84e8.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSource.closed` @type ^`boolean` @kind boolean;
  #L1a84ec.  if v1 == 0 then goto L1a8510;
  #L1a84f0.  v1:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a84f4.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` @kind boolean;
  #L1a84f8.  if v1 != 0 then goto L1a8508;
  #L1a84fc.  v1:= v2.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a8500.  v1:= v1.`okhttp3.internal.http2.Http2Stream$FramingSink.closed` @type ^`boolean` @kind boolean;
  #L1a8504.  if v1 == 0 then goto L1a8510;
  #L1a8508.  v1:= v2.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` @kind boolean;
  #Try_end1.  
  #L1a850c.  if v1 != 0 then goto L1a84d4;
  #L1a8510.  v0:= 1I;
  #L1a8512.  goto L1a84d4;
  #L1a8514.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a8516.  @monitorexit v2
  #L1a8518.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a8514;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a8514;
}
procedure `okio.Timeout` `readTimeout`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a8540.  v0:= v1.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L1a8544.  return v0 @kind object;
}
procedure `void` `receiveData`(`okhttp3.internal.http2.Http2Stream` v4 @kind this, `okio.BufferedSource` v5 @kind object @name `in`, `int` v6 @name `length`) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveData:(Lokio/BufferedSource;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a8558.  v0:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a855c.  if v0 != 0 then goto L1a8578;
  #L1a8560.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a8566.  v0:= temp;
  #L1a8568.  if v0 == 0 then goto L1a8578;
  #L1a856c.  v0:= new `java.lang.AssertionError`;
  #L1a8570.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a8576.  throw v0;
  #L1a8578.  v0:= v4.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a857c.  v2:= (`long`) v6 @kind i2l;
  #L1a857e.  call `receive`(v0, v5, v2) @signature `Lokhttp3/internal/http2/Http2Stream$FramingSource;.receive:(Lokio/BufferedSource;J)V` @kind virtual;
  #L1a8584.  return @kind void;
}
procedure `void` `receiveFin`(`okhttp3.internal.http2.Http2Stream` v3 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveFin:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a8598.  v1:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a859c.  if v1 != 0 then goto L1a85b8;
  #L1a85a0.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a85a6.  v1:= temp;
  #L1a85a8.  if v1 == 0 then goto L1a85b8;
  #L1a85ac.  v1:= new `java.lang.AssertionError`;
  #L1a85b0.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a85b6.  throw v1;
  #L1a85b8.  @monitorenter v3
  #Try_start0.  
  #L1a85ba.  v1:= v3.`okhttp3.internal.http2.Http2Stream.source` @type ^`okhttp3.internal.http2.Http2Stream$FramingSource` @kind object;
  #L1a85be.  v2:= 1I;
  #L1a85c0.  v1.`okhttp3.internal.http2.Http2Stream$FramingSource.finished` @type ^`boolean` := v2 @kind boolean;
  #L1a85c4.  call temp:= `isOpen`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L1a85ca.  v0:= temp;
  #L1a85cc.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1a85d2.  @monitorexit v3
  #Try_end0.  
  #L1a85d4.  if v0 != 0 then goto L1a85e6;
  #L1a85d8.  v1:= v3.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a85dc.  v2:= v3.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a85e0.  call temp:= `removeStream`(v1, v2) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L1a85e6.  return @kind void;
  #L1a85e8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L1a85ea.  @monitorexit v3
  #Try_end1.  
  #L1a85ec.  throw v1;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a85e8;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a85e8;
}
procedure `void` `receiveHeaders`(`okhttp3.internal.http2.Http2Stream` v4 @kind this, `java.util.List` v5 @kind object) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveHeaders:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a8614.  v2:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a8618.  if v2 != 0 then goto L1a8634;
  #L1a861c.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a8622.  v2:= temp;
  #L1a8624.  if v2 == 0 then goto L1a8634;
  #L1a8628.  v2:= new `java.lang.AssertionError`;
  #L1a862c.  call `<init>`(v2) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a8632.  throw v2;
  #L1a8634.  v1:= 1I;
  #L1a8636.  @monitorenter v4
  #L1a8638.  v2:= 1I;
  #Try_start0.  
  #L1a863a.  v4.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` := v2 @kind boolean;
  #L1a863e.  v2:= v4.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L1a8642.  if v2 != 0 then goto L1a866e;
  #L1a8646.  v4.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` := v5 @kind object;
  #L1a864a.  call temp:= `isOpen`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.isOpen:()Z` @kind virtual;
  #L1a8650.  v1:= temp;
  #L1a8652.  call `notifyAll`(v4) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L1a8658.  @monitorexit v4
  #Try_end0.  
  #L1a865a.  if v1 != 0 then goto L1a866c;
  #L1a865e.  v2:= v4.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a8662.  v3:= v4.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a8666.  call temp:= `removeStream`(v2, v3) @signature `Lokhttp3/internal/http2/Http2Connection;.removeStream:(I)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L1a866c.  return @kind void;
  #Try_start1.  
  #L1a866e.  v0:= new `java.util.ArrayList`;
  #L1a8672.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1a8678.  v2:= v4.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L1a867c.  call temp:= `addAll`(v0, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1a8682.  v2:= 0I;
  #L1a8684.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1a868a.  call temp:= `addAll`(v0, v5) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1a8690.  v4.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` := v0 @kind object;
  #L1a8694.  goto L1a8658;
  #L1a8696.  v2:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a8698.  @monitorexit v4
  #Try_end1.  
  #L1a869a.  throw v2;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a8696;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a8696;
}
procedure `void` `receiveRstStream`(`okhttp3.internal.http2.Http2Stream` v1 @kind this, `okhttp3.internal.http2.ErrorCode` v2 @kind object @name `errorCode`) @signature `Lokhttp3/internal/http2/Http2Stream;.receiveRstStream:(Lokhttp3/internal/http2/ErrorCode;)V` @AccessFlag  {
    temp;
    v0;

  #L1a86c0.  @monitorenter v1
  #Try_start0.  
  #L1a86c2.  v0:= v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a86c6.  if v0 != 0 then goto L1a86d4;
  #L1a86ca.  v1.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` := v2 @kind object;
  #L1a86ce.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #Try_end0.  
  #L1a86d4.  @monitorexit v1
  #L1a86d6.  return @kind void;
  #L1a86d8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a86da.  @monitorexit v1
  #L1a86dc.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a86d8;
}
procedure `void` `sendResponseHeaders`(`okhttp3.internal.http2.Http2Stream` v3 @kind this, `java.util.List` v4 @kind object, `boolean` v5 @name `out`) @signature `Lokhttp3/internal/http2/Http2Stream;.sendResponseHeaders:(Ljava/util/List;Z)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a86fc.  v1:= `@@okhttp3.internal.http2.Http2Stream.$assertionsDisabled` @type ^`boolean` @kind boolean;
  #L1a8700.  if v1 != 0 then goto L1a871c;
  #L1a8704.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L1a870a.  v1:= temp;
  #L1a870c.  if v1 == 0 then goto L1a871c;
  #L1a8710.  v1:= new `java.lang.AssertionError`;
  #L1a8714.  call `<init>`(v1) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1a871a.  throw v1;
  #L1a871c.  if v4 != 0 then goto L1a8730;
  #L1a8720.  v1:= new `java.lang.NullPointerException`;
  #L1a8724.  v2:= "responseHeaders == null" @kind object;
  #L1a8728.  call `<init>`(v1, v2) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a872e.  throw v1;
  #L1a8730.  v0:= 0I;
  #L1a8732.  @monitorenter v3
  #L1a8734.  v1:= 1I;
  #Try_start0.  
  #L1a8736.  v3.`okhttp3.internal.http2.Http2Stream.hasResponseHeaders` @type ^`boolean` := v1 @kind boolean;
  #L1a873a.  if v5 != 0 then goto L1a874a;
  #L1a873e.  v1:= v3.`okhttp3.internal.http2.Http2Stream.sink` @type ^`okhttp3.internal.http2.Http2Stream$FramingSink` @kind object;
  #L1a8742.  v2:= 1I;
  #L1a8744.  v1.`okhttp3.internal.http2.Http2Stream$FramingSink.finished` @type ^`boolean` := v2 @kind boolean;
  #L1a8748.  v0:= 1I;
  #L1a874a.  @monitorexit v3
  #Try_end0.  
  #L1a874c.  v1:= v3.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a8750.  v2:= v3.`okhttp3.internal.http2.Http2Stream.id` @type ^`int`;
  #L1a8754.  call `writeSynReply`(v1, v2, v0, v4) @signature `Lokhttp3/internal/http2/Http2Connection;.writeSynReply:(IZLjava/util/List;)V` @kind virtual;
  #L1a875a.  if v0 == 0 then goto L1a8768;
  #L1a875e.  v1:= v3.`okhttp3.internal.http2.Http2Stream.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L1a8762.  call `flush`(v1) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L1a8768.  return @kind void;
  #L1a876a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L1a876c.  @monitorexit v3
  #Try_end1.  
  #L1a876e.  throw v1;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a876a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a876a;
}
procedure `java.util.List` `takeResponseHeaders`(`okhttp3.internal.http2.Http2Stream` v3 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.takeResponseHeaders:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a8794.  @monitorenter v3
  #Try_start0.  
  #L1a8796.  call temp:= `isLocallyInitiated`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.isLocallyInitiated:()Z` @kind virtual;
  #L1a879c.  v1:= temp;
  #L1a879e.  if v1 != 0 then goto L1a87b8;
  #L1a87a2.  v1:= new `java.lang.IllegalStateException`;
  #L1a87a6.  v2:= "servers cannot read response headers" @kind object;
  #L1a87aa.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1a87b0.  throw v1;
  #Try_end0.  
  #L1a87b2.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1a87b4.  @monitorexit v3
  #L1a87b6.  throw v1;
  #Try_start1.  
  #L1a87b8.  v1:= v3.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L1a87bc.  call `enter`(v1) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.enter:()V` @kind virtual;
  #Try_end1.  
  #Try_start2.  
  #L1a87c2.  v1:= v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L1a87c6.  if v1 != 0 then goto L1a87e8;
  #L1a87ca.  v1:= v3.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a87ce.  if v1 != 0 then goto L1a87e8;
  #L1a87d2.  call `waitForIo`(v3) @signature `Lokhttp3/internal/http2/Http2Stream;.waitForIo:()V` @kind virtual;
  #Try_end2.  
  #L1a87d8.  goto L1a87c2;
  #L1a87da.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L1a87dc.  v2:= v3.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L1a87e0.  call `exitAndThrowIfTimedOut`(v2) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L1a87e6.  throw v1;
  #L1a87e8.  v1:= v3.`okhttp3.internal.http2.Http2Stream.readTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L1a87ec.  call `exitAndThrowIfTimedOut`(v1) @signature `Lokhttp3/internal/http2/Http2Stream$StreamTimeout;.exitAndThrowIfTimedOut:()V` @kind virtual;
  #L1a87f2.  v0:= v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` @kind object;
  #L1a87f6.  if v0 == 0 then goto L1a8804;
  #L1a87fa.  v1:= 0I;
  #L1a87fc.  v3.`okhttp3.internal.http2.Http2Stream.responseHeaders` @type ^`java.util.List` := v1 @kind object;
  #Try_end3.  
  #L1a8800.  @monitorexit v3
  #L1a8802.  return v0 @kind object;
  #Try_start4.  
  #L1a8804.  v1:= new `okhttp3.internal.http2.StreamResetException`;
  #L1a8808.  v2:= v3.`okhttp3.internal.http2.Http2Stream.errorCode` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L1a880c.  call `<init>`(v1, v2) @signature `Lokhttp3/internal/http2/StreamResetException;.<init>:(Lokhttp3/internal/http2/ErrorCode;)V` @kind direct;
  #L1a8812.  throw v1;
  #Try_end4.  
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1a87b2;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1a87b2;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L1a87da;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L1a87b2;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L1a87b2;
}
procedure `void` `waitForIo`(`okhttp3.internal.http2.Http2Stream` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.waitForIo:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L1a8854.  call `wait`(v2) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #Try_end0.  
  #L1a885a.  return @kind void;
  #L1a885c.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L1a885e.  v1:= new `java.io.InterruptedIOException`;
  #L1a8862.  call `<init>`(v1) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L1a8868.  throw v1;
  catch `java.lang.InterruptedException` @[Try_start0..Try_end0] goto L1a885c;
}
procedure `okio.Timeout` `writeTimeout`(`okhttp3.internal.http2.Http2Stream` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/Timeout;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a888c.  v0:= v1.`okhttp3.internal.http2.Http2Stream.writeTimeout` @type ^`okhttp3.internal.http2.Http2Stream$StreamTimeout` @kind object;
  #L1a8890.  return v0 @kind object;
}
