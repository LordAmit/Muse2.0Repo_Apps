record `okhttp3.internal.http2.Http2Codec` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.internal.http.HttpCodec` @kind interface {
  `okhttp3.Interceptor$Chain` `okhttp3.internal.http2.Http2Codec.chain` @AccessFlag PRIVATE_FINAL;
  `okhttp3.OkHttpClient` `okhttp3.internal.http2.Http2Codec.client` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Connection` `okhttp3.internal.http2.Http2Codec.connection` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Stream` `okhttp3.internal.http2.Http2Codec.stream` @AccessFlag PRIVATE;
  `okhttp3.internal.connection.StreamAllocation` `okhttp3.internal.http2.Http2Codec.streamAllocation` @AccessFlag FINAL;
}
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.HOST` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.List` `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.TE` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @AccessFlag PRIVATE_STATIC_FINAL;
global `okio.ByteString` `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Codec;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L21a410.  v7:= 4I;
  #L21a412.  v6:= 3I;
  #L21a414.  v5:= 2I;
  #L21a416.  v4:= 1I;
  #L21a418.  v3:= 0I;
  #L21a41a.  v0:= "connection" @kind object;
  #L21a41e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a424.  v0:= temp @kind object;
  #L21a426.  `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @type ^`okio.ByteString` := v0 @kind object;
  #L21a42a.  v0:= "host" @kind object;
  #L21a42e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a434.  v0:= temp @kind object;
  #L21a436.  `@@okhttp3.internal.http2.Http2Codec.HOST` @type ^`okio.ByteString` := v0 @kind object;
  #L21a43a.  v0:= "keep-alive" @kind object;
  #L21a43e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a444.  v0:= temp @kind object;
  #L21a446.  `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @type ^`okio.ByteString` := v0 @kind object;
  #L21a44a.  v0:= "proxy-connection" @kind object;
  #L21a44e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a454.  v0:= temp @kind object;
  #L21a456.  `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @type ^`okio.ByteString` := v0 @kind object;
  #L21a45a.  v0:= "transfer-encoding" @kind object;
  #L21a45e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a464.  v0:= temp @kind object;
  #L21a466.  `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @type ^`okio.ByteString` := v0 @kind object;
  #L21a46a.  v0:= "te" @kind object;
  #L21a46e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a474.  v0:= temp @kind object;
  #L21a476.  `@@okhttp3.internal.http2.Http2Codec.TE` @type ^`okio.ByteString` := v0 @kind object;
  #L21a47a.  v0:= "encoding" @kind object;
  #L21a47e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a484.  v0:= temp @kind object;
  #L21a486.  `@@okhttp3.internal.http2.Http2Codec.ENCODING` @type ^`okio.ByteString` := v0 @kind object;
  #L21a48a.  v0:= "upgrade" @kind object;
  #L21a48e.  call temp:= `encodeUtf8`(v0) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a494.  v0:= temp @kind object;
  #L21a496.  `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @type ^`okio.ByteString` := v0 @kind object;
  #L21a49a.  v0:= 12I;
  #L21a49e.  v0:= new `okio.ByteString`[v0];
  #L21a4a2.  v1:= `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @type ^`okio.ByteString` @kind object;
  #L21a4a6.  v0[v3]:= v1 @kind object;
  #L21a4aa.  v1:= `@@okhttp3.internal.http2.Http2Codec.HOST` @type ^`okio.ByteString` @kind object;
  #L21a4ae.  v0[v4]:= v1 @kind object;
  #L21a4b2.  v1:= `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @type ^`okio.ByteString` @kind object;
  #L21a4b6.  v0[v5]:= v1 @kind object;
  #L21a4ba.  v1:= `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @type ^`okio.ByteString` @kind object;
  #L21a4be.  v0[v6]:= v1 @kind object;
  #L21a4c2.  v1:= `@@okhttp3.internal.http2.Http2Codec.TE` @type ^`okio.ByteString` @kind object;
  #L21a4c6.  v0[v7]:= v1 @kind object;
  #L21a4ca.  v1:= 5I;
  #L21a4cc.  v2:= `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @type ^`okio.ByteString` @kind object;
  #L21a4d0.  v0[v1]:= v2 @kind object;
  #L21a4d4.  v1:= 6I;
  #L21a4d6.  v2:= `@@okhttp3.internal.http2.Http2Codec.ENCODING` @type ^`okio.ByteString` @kind object;
  #L21a4da.  v0[v1]:= v2 @kind object;
  #L21a4de.  v1:= 7I;
  #L21a4e0.  v2:= `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @type ^`okio.ByteString` @kind object;
  #L21a4e4.  v0[v1]:= v2 @kind object;
  #L21a4e8.  v1:= 8I;
  #L21a4ec.  v2:= `@@okhttp3.internal.http2.Header.TARGET_METHOD` @type ^`okio.ByteString` @kind object;
  #L21a4f0.  v0[v1]:= v2 @kind object;
  #L21a4f4.  v1:= 9I;
  #L21a4f8.  v2:= `@@okhttp3.internal.http2.Header.TARGET_PATH` @type ^`okio.ByteString` @kind object;
  #L21a4fc.  v0[v1]:= v2 @kind object;
  #L21a500.  v1:= 10I;
  #L21a504.  v2:= `@@okhttp3.internal.http2.Header.TARGET_SCHEME` @type ^`okio.ByteString` @kind object;
  #L21a508.  v0[v1]:= v2 @kind object;
  #L21a50c.  v1:= 11I;
  #L21a510.  v2:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L21a514.  v0[v1]:= v2 @kind object;
  #L21a518.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L21a51e.  v0:= temp @kind object;
  #L21a520.  `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @type ^`java.util.List` := v0 @kind object;
  #L21a524.  v0:= 8I;
  #L21a528.  v0:= new `okio.ByteString`[v0];
  #L21a52c.  v1:= `@@okhttp3.internal.http2.Http2Codec.CONNECTION` @type ^`okio.ByteString` @kind object;
  #L21a530.  v0[v3]:= v1 @kind object;
  #L21a534.  v1:= `@@okhttp3.internal.http2.Http2Codec.HOST` @type ^`okio.ByteString` @kind object;
  #L21a538.  v0[v4]:= v1 @kind object;
  #L21a53c.  v1:= `@@okhttp3.internal.http2.Http2Codec.KEEP_ALIVE` @type ^`okio.ByteString` @kind object;
  #L21a540.  v0[v5]:= v1 @kind object;
  #L21a544.  v1:= `@@okhttp3.internal.http2.Http2Codec.PROXY_CONNECTION` @type ^`okio.ByteString` @kind object;
  #L21a548.  v0[v6]:= v1 @kind object;
  #L21a54c.  v1:= `@@okhttp3.internal.http2.Http2Codec.TE` @type ^`okio.ByteString` @kind object;
  #L21a550.  v0[v7]:= v1 @kind object;
  #L21a554.  v1:= 5I;
  #L21a556.  v2:= `@@okhttp3.internal.http2.Http2Codec.TRANSFER_ENCODING` @type ^`okio.ByteString` @kind object;
  #L21a55a.  v0[v1]:= v2 @kind object;
  #L21a55e.  v1:= 6I;
  #L21a560.  v2:= `@@okhttp3.internal.http2.Http2Codec.ENCODING` @type ^`okio.ByteString` @kind object;
  #L21a564.  v0[v1]:= v2 @kind object;
  #L21a568.  v1:= 7I;
  #L21a56a.  v2:= `@@okhttp3.internal.http2.Http2Codec.UPGRADE` @type ^`okio.ByteString` @kind object;
  #L21a56e.  v0[v1]:= v2 @kind object;
  #L21a572.  call temp:= `immutableList`(v0) @signature `Lokhttp3/internal/Util;.immutableList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L21a578.  v0:= temp @kind object;
  #L21a57a.  `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @type ^`java.util.List` := v0 @kind object;
  #L21a57e.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Codec` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object @name `client`, `okhttp3.Interceptor$Chain` v2 @kind object @name `chain`, `okhttp3.internal.connection.StreamAllocation` v3 @kind object @name `streamAllocation`, `okhttp3.internal.http2.Http2Connection` v4 @kind object @name `connection`) @signature `Lokhttp3/internal/http2/Http2Codec;.<init>:(Lokhttp3/OkHttpClient;Lokhttp3/Interceptor$Chain;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http2/Http2Connection;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L21a590.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21a596.  v0.`okhttp3.internal.http2.Http2Codec.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L21a59a.  v0.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` := v2 @kind object;
  #L21a59e.  v0.`okhttp3.internal.http2.Http2Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v3 @kind object;
  #L21a5a2.  v0.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` := v4 @kind object;
  #L21a5a6.  return @kind void;
}
procedure `java.util.List` `http2HeadersList`(`okhttp3.Request` v9 @kind object @name `request`) @signature `Lokhttp3/internal/http2/Http2Codec;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L21a5b8.  call temp:= `headers`(v9) @signature `Lokhttp3/Request;.headers:()Lokhttp3/Headers;` @kind virtual;
  #L21a5be.  v0:= temp @kind object;
  #L21a5c0.  v4:= new `java.util.ArrayList`;
  #L21a5c4.  call temp:= `size`(v0) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L21a5ca.  v6:= temp;
  #L21a5cc.  v6:= v6 + 4;
  #L21a5d0.  call `<init>`(v4, v6) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L21a5d6.  v6:= new `okhttp3.internal.http2.Header`;
  #L21a5da.  v7:= `@@okhttp3.internal.http2.Header.TARGET_METHOD` @type ^`okio.ByteString` @kind object;
  #L21a5de.  call temp:= `method`(v9) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L21a5e4.  v8:= temp @kind object;
  #L21a5e6.  call `<init>`(v6, v7, v8) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L21a5ec.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21a5f2.  v6:= new `okhttp3.internal.http2.Header`;
  #L21a5f6.  v7:= `@@okhttp3.internal.http2.Header.TARGET_PATH` @type ^`okio.ByteString` @kind object;
  #L21a5fa.  call temp:= `url`(v9) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L21a600.  v8:= temp @kind object;
  #L21a602.  call temp:= `requestPath`(v8) @signature `Lokhttp3/internal/http/RequestLine;.requestPath:(Lokhttp3/HttpUrl;)Ljava/lang/String;` @kind static;
  #L21a608.  v8:= temp @kind object;
  #L21a60a.  call `<init>`(v6, v7, v8) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L21a610.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21a616.  v6:= "Host" @kind object;
  #L21a61a.  call temp:= `header`(v9, v6) @signature `Lokhttp3/Request;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L21a620.  v1:= temp @kind object;
  #L21a622.  if v1 == 0 then goto L21a63a;
  #L21a626.  v6:= new `okhttp3.internal.http2.Header`;
  #L21a62a.  v7:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L21a62e.  call `<init>`(v6, v7, v1) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L21a634.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21a63a.  v6:= new `okhttp3.internal.http2.Header`;
  #L21a63e.  v7:= `@@okhttp3.internal.http2.Header.TARGET_SCHEME` @type ^`okio.ByteString` @kind object;
  #L21a642.  call temp:= `url`(v9) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L21a648.  v8:= temp @kind object;
  #L21a64a.  call temp:= `scheme`(v8) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L21a650.  v8:= temp @kind object;
  #L21a652.  call `<init>`(v6, v7, v8) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L21a658.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21a65e.  v2:= 0I;
  #L21a660.  call temp:= `size`(v0) @signature `Lokhttp3/Headers;.size:()I` @kind virtual;
  #L21a666.  v5:= temp;
  #L21a668.  if v2 >= v5 then goto L21a6b6;
  #L21a66c.  call temp:= `name`(v0, v2) @signature `Lokhttp3/Headers;.name:(I)Ljava/lang/String;` @kind virtual;
  #L21a672.  v6:= temp @kind object;
  #L21a674.  v7:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L21a678.  call temp:= `toLowerCase`(v6, v7) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L21a67e.  v6:= temp @kind object;
  #L21a680.  call temp:= `encodeUtf8`(v6) @signature `Lokio/ByteString;.encodeUtf8:(Ljava/lang/String;)Lokio/ByteString;` @kind static;
  #L21a686.  v3:= temp @kind object;
  #L21a688.  v6:= `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_REQUEST_HEADERS` @type ^`java.util.List` @kind object;
  #L21a68c.  call temp:= `contains`(v6, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L21a692.  v6:= temp;
  #L21a694.  if v6 != 0 then goto L21a6b0;
  #L21a698.  v6:= new `okhttp3.internal.http2.Header`;
  #L21a69c.  call temp:= `value`(v0, v2) @signature `Lokhttp3/Headers;.value:(I)Ljava/lang/String;` @kind virtual;
  #L21a6a2.  v7:= temp @kind object;
  #L21a6a4.  call `<init>`(v6, v3, v7) @signature `Lokhttp3/internal/http2/Header;.<init>:(Lokio/ByteString;Ljava/lang/String;)V` @kind direct;
  #L21a6aa.  call temp:= `add`(v4, v6) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L21a6b0.  v2:= v2 + 1;
  #L21a6b4.  goto L21a668;
  #L21a6b6.  return v4 @kind object;
}
procedure `okhttp3.Response$Builder` `readHttp2HeadersList`(`java.util.List` v9 @kind object) @signature `Lokhttp3/internal/http2/Http2Codec;.readHttp2HeadersList:(Ljava/util/List;)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L21a6c8.  v5:= 0I;
  #L21a6ca.  v1:= new `okhttp3.Headers$Builder`;
  #L21a6ce.  call `<init>`(v1) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L21a6d4.  v2:= 0I;
  #L21a6d6.  call temp:= `size`(v9) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L21a6dc.  v4:= temp;
  #L21a6de.  if v2 >= v4 then goto L21a788;
  #L21a6e2.  call temp:= `get`(v9, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L21a6e8.  v0:= temp @kind object;
  #L21a6ea.  v0:= (`okhttp3.internal.http2.Header`) v0 @kind object;
  #L21a6ee.  if v0 != 0 then goto L21a714;
  #L21a6f2.  if v5 == 0 then goto L21a70e;
  #L21a6f6.  v7:= v5.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L21a6fa.  v8:= 100I;
  #L21a6fe.  if v7 != v8 then goto L21a70e;
  #L21a702.  v5:= 0I;
  #L21a704.  v1:= new `okhttp3.Headers$Builder`;
  #L21a708.  call `<init>`(v1) @signature `Lokhttp3/Headers$Builder;.<init>:()V` @kind direct;
  #L21a70e.  v2:= v2 + 1;
  #L21a712.  goto L21a6de;
  #L21a714.  v3:= v0.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L21a718.  v7:= v0.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L21a71c.  call temp:= `utf8`(v7) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L21a722.  v6:= temp @kind object;
  #L21a724.  v7:= `@@okhttp3.internal.http2.Header.RESPONSE_STATUS` @type ^`okio.ByteString` @kind object;
  #L21a728.  call temp:= `equals`(v3, v7) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L21a72e.  v7:= temp;
  #L21a730.  if v7 == 0 then goto L21a764;
  #L21a734.  v7:= new `java.lang.StringBuilder`;
  #L21a738.  call `<init>`(v7) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L21a73e.  v8:= "HTTP/1.1 " @kind object;
  #L21a742.  call temp:= `append`(v7, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21a748.  v7:= temp @kind object;
  #L21a74a.  call temp:= `append`(v7, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21a750.  v7:= temp @kind object;
  #L21a752.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21a758.  v7:= temp @kind object;
  #L21a75a.  call temp:= `parse`(v7) @signature `Lokhttp3/internal/http/StatusLine;.parse:(Ljava/lang/String;)Lokhttp3/internal/http/StatusLine;` @kind static;
  #L21a760.  v5:= temp @kind object;
  #L21a762.  goto L21a70e;
  #L21a764.  v7:= `@@okhttp3.internal.http2.Http2Codec.HTTP_2_SKIPPED_RESPONSE_HEADERS` @type ^`java.util.List` @kind object;
  #L21a768.  call temp:= `contains`(v7, v3) @signature `Ljava/util/List;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L21a76e.  v7:= temp;
  #L21a770.  if v7 != 0 then goto L21a70e;
  #L21a774.  v7:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L21a778.  call temp:= `utf8`(v3) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L21a77e.  v8:= temp @kind object;
  #L21a780.  call `addLenient`(v7, v1, v8, v6) @signature `Lokhttp3/internal/Internal;.addLenient:(Lokhttp3/Headers$Builder;Ljava/lang/String;Ljava/lang/String;)V` @kind virtual;
  #L21a786.  goto L21a70e;
  #L21a788.  if v5 != 0 then goto L21a79c;
  #L21a78c.  v7:= new `java.net.ProtocolException`;
  #L21a790.  v8:= "Expected ':status' header not present" @kind object;
  #L21a794.  call `<init>`(v7, v8) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21a79a.  throw v7;
  #L21a79c.  v7:= new `okhttp3.Response$Builder`;
  #L21a7a0.  call `<init>`(v7) @signature `Lokhttp3/Response$Builder;.<init>:()V` @kind direct;
  #L21a7a6.  v8:= `@@okhttp3.Protocol.HTTP_2` @type ^`okhttp3.Protocol` @kind object;
  #L21a7aa.  call temp:= `protocol`(v7, v8) @signature `Lokhttp3/Response$Builder;.protocol:(Lokhttp3/Protocol;)Lokhttp3/Response$Builder;` @kind virtual;
  #L21a7b0.  v7:= temp @kind object;
  #L21a7b2.  v8:= v5.`okhttp3.internal.http.StatusLine.code` @type ^`int`;
  #L21a7b6.  call temp:= `code`(v7, v8) @signature `Lokhttp3/Response$Builder;.code:(I)Lokhttp3/Response$Builder;` @kind virtual;
  #L21a7bc.  v7:= temp @kind object;
  #L21a7be.  v8:= v5.`okhttp3.internal.http.StatusLine.message` @type ^`java.lang.String` @kind object;
  #L21a7c2.  call temp:= `message`(v7, v8) @signature `Lokhttp3/Response$Builder;.message:(Ljava/lang/String;)Lokhttp3/Response$Builder;` @kind virtual;
  #L21a7c8.  v7:= temp @kind object;
  #L21a7ca.  call temp:= `build`(v1) @signature `Lokhttp3/Headers$Builder;.build:()Lokhttp3/Headers;` @kind virtual;
  #L21a7d0.  v8:= temp @kind object;
  #L21a7d2.  call temp:= `headers`(v7, v8) @signature `Lokhttp3/Response$Builder;.headers:(Lokhttp3/Headers;)Lokhttp3/Response$Builder;` @kind virtual;
  #L21a7d8.  v7:= temp @kind object;
  #L21a7da.  return v7 @kind object;
}
procedure `void` `cancel`(`okhttp3.internal.http2.Http2Codec` v2 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L21a7ec.  v0:= v2.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21a7f0.  if v0 == 0 then goto L21a802;
  #L21a7f4.  v0:= v2.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21a7f8.  v1:= `@@okhttp3.internal.http2.ErrorCode.CANCEL` @type ^`okhttp3.internal.http2.ErrorCode` @kind object;
  #L21a7fc.  call `closeLater`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Stream;.closeLater:(Lokhttp3/internal/http2/ErrorCode;)V` @kind virtual;
  #L21a802.  return @kind void;
}
procedure `okio.Sink` `createRequestBody`(`okhttp3.internal.http2.Http2Codec` v1 @kind this, `okhttp3.Request` v2 @kind object @name `request`, `long` v3 @name `contentLength`) @signature `Lokhttp3/internal/http2/Http2Codec;.createRequestBody:(Lokhttp3/Request;J)Lokio/Sink;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21a814.  v0:= v1.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21a818.  call temp:= `getSink`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L21a81e.  v0:= temp @kind object;
  #L21a820.  return v0 @kind object;
}
procedure `void` `finishRequest`(`okhttp3.internal.http2.Http2Codec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.finishRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21a834.  v0:= v1.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21a838.  call temp:= `getSink`(v0) @signature `Lokhttp3/internal/http2/Http2Stream;.getSink:()Lokio/Sink;` @kind virtual;
  #L21a83e.  v0:= temp @kind object;
  #L21a840.  call `close`(v0) @signature `Lokio/Sink;.close:()V` @kind interface;
  #L21a846.  return @kind void;
}
procedure `void` `flushRequest`(`okhttp3.internal.http2.Http2Codec` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Codec;.flushRequest:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L21a858.  v0:= v1.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L21a85c.  call `flush`(v0) @signature `Lokhttp3/internal/http2/Http2Connection;.flush:()V` @kind virtual;
  #L21a862.  return @kind void;
}
procedure `okhttp3.ResponseBody` `openResponseBody`(`okhttp3.internal.http2.Http2Codec` v6 @kind this, `okhttp3.Response` v7 @kind object @name `response`) @signature `Lokhttp3/internal/http2/Http2Codec;.openResponseBody:(Lokhttp3/Response;)Lokhttp3/ResponseBody;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L21a874.  v4:= v6.`okhttp3.internal.http2.Http2Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L21a878.  v4:= v4.`okhttp3.internal.connection.StreamAllocation.eventListener` @type ^`okhttp3.EventListener` @kind object;
  #L21a87c.  v5:= v6.`okhttp3.internal.http2.Http2Codec.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L21a880.  v5:= v5.`okhttp3.internal.connection.StreamAllocation.call` @type ^`okhttp3.Call` @kind object;
  #L21a884.  call `responseBodyStart`(v4, v5) @signature `Lokhttp3/EventListener;.responseBodyStart:(Lokhttp3/Call;)V` @kind virtual;
  #L21a88a.  v4:= "Content-Type" @kind object;
  #L21a88e.  call temp:= `header`(v7, v4) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L21a894.  v2:= temp @kind object;
  #L21a896.  call temp:= `contentLength`(v7) @signature `Lokhttp3/internal/http/HttpHeaders;.contentLength:(Lokhttp3/Response;)J` @kind static;
  #L21a89c.  v0:= temp @kind wide;
  #L21a89e.  v3:= new `okhttp3.internal.http2.Http2Codec$StreamFinishingSource`;
  #L21a8a2.  v4:= v6.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21a8a6.  call temp:= `getSource`(v4) @signature `Lokhttp3/internal/http2/Http2Stream;.getSource:()Lokio/Source;` @kind virtual;
  #L21a8ac.  v4:= temp @kind object;
  #L21a8ae.  call `<init>`(v3, v6, v4) @signature `Lokhttp3/internal/http2/Http2Codec$StreamFinishingSource;.<init>:(Lokhttp3/internal/http2/Http2Codec;Lokio/Source;)V` @kind direct;
  #L21a8b4.  v4:= new `okhttp3.internal.http.RealResponseBody`;
  #L21a8b8.  call temp:= `buffer`(v3) @signature `Lokio/Okio;.buffer:(Lokio/Source;)Lokio/BufferedSource;` @kind static;
  #L21a8be.  v5:= temp @kind object;
  #L21a8c0.  call `<init>`(v4, v2, v0, v5) @signature `Lokhttp3/internal/http/RealResponseBody;.<init>:(Ljava/lang/String;JLokio/BufferedSource;)V` @kind direct;
  #L21a8c6.  return v4 @kind object;
}
procedure `okhttp3.Response$Builder` `readResponseHeaders`(`okhttp3.internal.http2.Http2Codec` v4 @kind this, `boolean` v5 @name `expectContinue`) @signature `Lokhttp3/internal/http2/Http2Codec;.readResponseHeaders:(Z)Lokhttp3/Response$Builder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L21a8d8.  v2:= v4.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21a8dc.  call temp:= `takeResponseHeaders`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.takeResponseHeaders:()Ljava/util/List;` @kind virtual;
  #L21a8e2.  v0:= temp @kind object;
  #L21a8e4.  call temp:= `readHttp2HeadersList`(v0) @signature `Lokhttp3/internal/http2/Http2Codec;.readHttp2HeadersList:(Ljava/util/List;)Lokhttp3/Response$Builder;` @kind static;
  #L21a8ea.  v1:= temp @kind object;
  #L21a8ec.  if v5 == 0 then goto L21a906;
  #L21a8f0.  v2:= `@@okhttp3.internal.Internal.instance` @type ^`okhttp3.internal.Internal` @kind object;
  #L21a8f4.  call temp:= `code`(v2, v1) @signature `Lokhttp3/internal/Internal;.code:(Lokhttp3/Response$Builder;)I` @kind virtual;
  #L21a8fa.  v2:= temp;
  #L21a8fc.  v3:= 100I;
  #L21a900.  if v2 != v3 then goto L21a906;
  #L21a904.  v1:= 0I;
  #L21a906.  return v1 @kind object;
}
procedure `void` `writeRequestHeaders`(`okhttp3.internal.http2.Http2Codec` v6 @kind this, `okhttp3.Request` v7 @kind object @name `request`) @signature `Lokhttp3/internal/http2/Http2Codec;.writeRequestHeaders:(Lokhttp3/Request;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L21a918.  v2:= v6.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21a91c.  if v2 == 0 then goto L21a922;
  #L21a920.  return @kind void;
  #L21a922.  call temp:= `body`(v7) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L21a928.  v2:= temp @kind object;
  #L21a92a.  if v2 == 0 then goto L21a992;
  #L21a92e.  v0:= 1I;
  #L21a930.  call temp:= `http2HeadersList`(v7) @signature `Lokhttp3/internal/http2/Http2Codec;.http2HeadersList:(Lokhttp3/Request;)Ljava/util/List;` @kind static;
  #L21a936.  v1:= temp @kind object;
  #L21a938.  v2:= v6.`okhttp3.internal.http2.Http2Codec.connection` @type ^`okhttp3.internal.http2.Http2Connection` @kind object;
  #L21a93c.  call temp:= `newStream`(v2, v1, v0) @signature `Lokhttp3/internal/http2/Http2Connection;.newStream:(Ljava/util/List;Z)Lokhttp3/internal/http2/Http2Stream;` @kind virtual;
  #L21a942.  v2:= temp @kind object;
  #L21a944.  v6.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` := v2 @kind object;
  #L21a948.  v2:= v6.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21a94c.  call temp:= `readTimeout`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.readTimeout:()Lokio/Timeout;` @kind virtual;
  #L21a952.  v2:= temp @kind object;
  #L21a954.  v3:= v6.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` @kind object;
  #L21a958.  call temp:= `readTimeoutMillis`(v3) @signature `Lokhttp3/Interceptor$Chain;.readTimeoutMillis:()I` @kind interface;
  #L21a95e.  v3:= temp;
  #L21a960.  v4:= (`long`) v3 @kind i2l;
  #L21a962.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L21a966.  call temp:= `timeout`(v2, v4, v3) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L21a96c.  v2:= v6.`okhttp3.internal.http2.Http2Codec.stream` @type ^`okhttp3.internal.http2.Http2Stream` @kind object;
  #L21a970.  call temp:= `writeTimeout`(v2) @signature `Lokhttp3/internal/http2/Http2Stream;.writeTimeout:()Lokio/Timeout;` @kind virtual;
  #L21a976.  v2:= temp @kind object;
  #L21a978.  v3:= v6.`okhttp3.internal.http2.Http2Codec.chain` @type ^`okhttp3.Interceptor$Chain` @kind object;
  #L21a97c.  call temp:= `writeTimeoutMillis`(v3) @signature `Lokhttp3/Interceptor$Chain;.writeTimeoutMillis:()I` @kind interface;
  #L21a982.  v3:= temp;
  #L21a984.  v4:= (`long`) v3 @kind i2l;
  #L21a986.  v3:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L21a98a.  call temp:= `timeout`(v2, v4, v3) @signature `Lokio/Timeout;.timeout:(JLjava/util/concurrent/TimeUnit;)Lokio/Timeout;` @kind virtual;
  #L21a990.  goto L21a920;
  #L21a992.  v0:= 0I;
  #L21a994.  goto L21a930;
}
