record `okhttp3.internal.http2.Hpack$Writer` @kind class @AccessFlag FINAL {
  `okhttp3.internal.http2.Header`[] `okhttp3.internal.http2.Hpack$Writer.dynamicTable` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @AccessFlag ;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @AccessFlag PRIVATE;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @AccessFlag ;
  `int` `okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @AccessFlag ;
  `okio.Buffer` `okhttp3.internal.http2.Hpack$Writer.out` @AccessFlag PRIVATE_FINAL;
  `int` `okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http2.Hpack$Writer.useCompression` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Hpack$Writer.SETTINGS_HEADER_TABLE_SIZE_LIMIT` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `int` v3 @name `headerTableSizeSetting`, `boolean` v4 @name `useCompression`, `okio.Buffer` v5 @kind object @name `out`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1a5680.  v1:= 0I;
  #L1a5682.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a5688.  v0:= 2147483647I;
  #L1a568e.  v2.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v0;
  #L1a5692.  v0:= 8I;
  #L1a5696.  v0:= new `okhttp3.internal.http2.Header`[v0];
  #L1a569a.  v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v0 @kind object;
  #L1a569e.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a56a2.  v0:= length @variable v0;
  #L1a56a4.  v0:= v0 + -1;
  #L1a56a8.  v2.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v0;
  #L1a56ac.  v2.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v1;
  #L1a56b0.  v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v1;
  #L1a56b4.  v2.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v3;
  #L1a56b8.  v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v3;
  #L1a56bc.  v2.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` := v4 @kind boolean;
  #L1a56c0.  v2.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` := v5 @kind object;
  #L1a56c4.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `okio.Buffer` v3 @kind object @name `out`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(Lokio/Buffer;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1a56d8.  v0:= 4096I;
  #L1a56dc.  v1:= 1I;
  #L1a56de.  call `<init>`(v2, v0, v1, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.<init>:(IZLokio/Buffer;)V` @kind direct;
  #L1a56e4.  return @kind void;
}
procedure `void` `adjustDynamicTableByteCount`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a56f8.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a56fc.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a5700.  if v0 >= v1 then goto L1a5712;
  #L1a5704.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a5708.  if v0 != 0 then goto L1a5714;
  #L1a570c.  call `clearDynamicTable`(v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L1a5712.  return @kind void;
  #L1a5714.  v0:= v2.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a5718.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a571c.  v0:= v0 - v1 @kind int;
  #L1a571e.  call temp:= `evictToRecoverBytes`(v2, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L1a5724.  goto L1a5712;
}
procedure `void` `clearDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v3 @kind this) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1a5738.  v2:= 0I;
  #L1a573a.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a573e.  v1:= 0I;
  #L1a5740.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L1a5746.  v0:= v3.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a574a.  v0:= length @variable v0;
  #L1a574c.  v0:= v0 + -1;
  #L1a5750.  v3.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v0;
  #L1a5754.  v3.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v2;
  #L1a5758.  v3.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v2;
  #L1a575c.  return @kind void;
}
procedure `int` `evictToRecoverBytes`(`okhttp3.internal.http2.Hpack$Writer` v7 @kind this, `int` v8 @name `bytesToRecover`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a5770.  v0:= 0I;
  #L1a5772.  if v8 <= 0 then goto L1a5812;
  #L1a5776.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a577a.  v2:= length @variable v2;
  #L1a577c.  v1:= v2 + -1;
  #L1a5780.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a5784.  if v1 < v2 then goto L1a57c6;
  #L1a5788.  if v8 <= 0 then goto L1a57c6;
  #L1a578c.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5790.  v2:= v2[v1] @kind object;
  #L1a5794.  v2:= v2.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a5798.  v8:= v8 - v2 @kind int;
  #L1a579a.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a579e.  v3:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a57a2.  v3:= v3[v1] @kind object;
  #L1a57a6.  v3:= v3.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a57aa.  v2:= v2 - v3 @kind int;
  #L1a57ac.  v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v2;
  #L1a57b0.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a57b4.  v2:= v2 + -1;
  #L1a57b8.  v7.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v2;
  #L1a57bc.  v0:= v0 + 1;
  #L1a57c0.  v1:= v1 + -1;
  #L1a57c4.  goto L1a5780;
  #L1a57c6.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a57ca.  v3:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a57ce.  v3:= v3 + 1;
  #L1a57d2.  v4:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a57d6.  v5:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a57da.  v5:= v5 + 1;
  #L1a57de.  v5:= v5 + v0 @kind int;
  #L1a57e0.  v6:= v7.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a57e4.  call `arraycopy`(v2, v3, v4, v5, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1a57ea.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a57ee.  v3:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a57f2.  v3:= v3 + 1;
  #L1a57f6.  v4:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a57fa.  v4:= v4 + 1;
  #L1a57fe.  v4:= v4 + v0 @kind int;
  #L1a5800.  v5:= 0I;
  #L1a5802.  call `fill`(v2, v3, v4, v5) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L1a5808.  v2:= v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a580c.  v2:= v2 + v0 @kind int;
  #L1a580e.  v7.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v2;
  #L1a5812.  return v0;
}
procedure `void` `insertIntoDynamicTable`(`okhttp3.internal.http2.Hpack$Writer` v8 @kind this, `okhttp3.internal.http2.Header` v9 @kind object @name `entry`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a5824.  v1:= v9.`okhttp3.internal.http2.Header.hpackSize` @type ^`int`;
  #L1a5828.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a582c.  if v1 <= v4 then goto L1a5838;
  #L1a5830.  call `clearDynamicTable`(v8) @signature `Lokhttp3/internal/http2/Hpack$Writer;.clearDynamicTable:()V` @kind direct;
  #L1a5836.  return @kind void;
  #L1a5838.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a583c.  v4:= v4 + v1 @kind int;
  #L1a583e.  v5:= v8.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a5842.  v0:= v4 - v5 @kind int;
  #L1a5846.  call temp:= `evictToRecoverBytes`(v8, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.evictToRecoverBytes:(I)I` @kind direct;
  #L1a584c.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a5850.  v4:= v4 + 1;
  #L1a5854.  v5:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5858.  v5:= length @variable v5;
  #L1a585a.  if v4 <= v5 then goto L1a5896;
  #L1a585e.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5862.  v4:= length @variable v4;
  #L1a5864.  v4:= v4 * 2;
  #L1a5868.  v2:= new `okhttp3.internal.http2.Header`[v4];
  #L1a586c.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5870.  v5:= 0I;
  #L1a5872.  v6:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5876.  v6:= length @variable v6;
  #L1a5878.  v7:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a587c.  v7:= length @variable v7;
  #L1a587e.  call `arraycopy`(v4, v5, v2, v6, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1a5884.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5888.  v4:= length @variable v4;
  #L1a588a.  v4:= v4 + -1;
  #L1a588e.  v8.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v4;
  #L1a5892.  v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] := v2 @kind object;
  #L1a5896.  v3:= v8.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a589a.  v4:= v3 + -1;
  #L1a589e.  v8.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int` := v4;
  #L1a58a2.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a58a6.  v4[v3]:= v9 @kind object;
  #L1a58aa.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int`;
  #L1a58ae.  v4:= v4 + 1;
  #L1a58b2.  v8.`okhttp3.internal.http2.Hpack$Writer.headerCount` @type ^`int` := v4;
  #L1a58b6.  v4:= v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int`;
  #L1a58ba.  v4:= v4 + v1 @kind int;
  #L1a58bc.  v8.`okhttp3.internal.http2.Hpack$Writer.dynamicTableByteCount` @type ^`int` := v4;
  #L1a58c0.  goto L1a5836;
}
procedure `void` `setHeaderTableSizeSetting`(`okhttp3.internal.http2.Hpack$Writer` v2 @kind this, `int` v3 @name `headerTableSizeSetting`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.setHeaderTableSizeSetting:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a58d4.  v2.`okhttp3.internal.http2.Hpack$Writer.headerTableSizeSetting` @type ^`int` := v3;
  #L1a58d8.  v1:= 16384I;
  #L1a58dc.  call temp:= `min`(v3, v1) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1a58e2.  v0:= temp;
  #L1a58e4.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a58e8.  if v1 != v0 then goto L1a58ee;
  #L1a58ec.  return @kind void;
  #L1a58ee.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a58f2.  if v0 >= v1 then goto L1a5906;
  #L1a58f6.  v1:= v2.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L1a58fa.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1a5900.  v1:= temp;
  #L1a5902.  v2.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v1;
  #L1a5906.  v1:= 1I;
  #L1a5908.  v2.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v1 @kind boolean;
  #L1a590c.  v2.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int` := v0;
  #L1a5910.  call `adjustDynamicTableByteCount`(v2) @signature `Lokhttp3/internal/http2/Hpack$Writer;.adjustDynamicTableByteCount:()V` @kind direct;
  #L1a5916.  goto L1a58ec;
}
procedure `void` `writeByteString`(`okhttp3.internal.http2.Hpack$Writer` v5 @kind this, `okio.ByteString` v6 @kind object @name `data`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a5928.  v4:= 127I;
  #L1a592c.  v2:= v5.`okhttp3.internal.http2.Hpack$Writer.useCompression` @type ^`boolean` @kind boolean;
  #L1a5930.  if v2 == 0 then goto L1a598e;
  #L1a5934.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L1a593a.  v2:= temp @kind object;
  #L1a593c.  call temp:= `encodedLength`(v2, v6) @signature `Lokhttp3/internal/http2/Huffman;.encodedLength:(Lokio/ByteString;)I` @kind virtual;
  #L1a5942.  v2:= temp;
  #L1a5944.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a594a.  v3:= temp;
  #L1a594c.  if v2 >= v3 then goto L1a598e;
  #L1a5950.  v0:= new `okio.Buffer`;
  #L1a5954.  call `<init>`(v0) @signature `Lokio/Buffer;.<init>:()V` @kind direct;
  #L1a595a.  call temp:= `get`() @signature `Lokhttp3/internal/http2/Huffman;.get:()Lokhttp3/internal/http2/Huffman;` @kind static;
  #L1a5960.  v2:= temp @kind object;
  #L1a5962.  call `encode`(v2, v6, v0) @signature `Lokhttp3/internal/http2/Huffman;.encode:(Lokio/ByteString;Lokio/BufferedSink;)V` @kind virtual;
  #L1a5968.  call temp:= `readByteString`(v0) @signature `Lokio/Buffer;.readByteString:()Lokio/ByteString;` @kind virtual;
  #L1a596e.  v1:= temp @kind object;
  #L1a5970.  call temp:= `size`(v1) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a5976.  v2:= temp;
  #L1a5978.  v3:= 128I;
  #L1a597c.  call `writeInt`(v5, v2, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a5982.  v2:= v5.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a5986.  call temp:= `write`(v2, v1) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L1a598c.  return @kind void;
  #L1a598e.  call temp:= `size`(v6) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a5994.  v2:= temp;
  #L1a5996.  v3:= 0I;
  #L1a5998.  call `writeInt`(v5, v2, v4, v3) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a599e.  v2:= v5.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a59a2.  call temp:= `write`(v2, v6) @signature `Lokio/Buffer;.write:(Lokio/ByteString;)Lokio/Buffer;` @kind virtual;
  #L1a59a8.  goto L1a598c;
}
procedure `void` `writeHeaders`(`okhttp3.internal.http2.Hpack$Writer` v13 @kind this, `java.util.List` v14 @kind object) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeHeaders:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1a59bc.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` @kind boolean;
  #L1a59c0.  if v10 == 0 then goto L1a5a04;
  #L1a59c4.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L1a59c8.  v11:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a59cc.  if v10 >= v11 then goto L1a59e2;
  #L1a59d0.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int`;
  #L1a59d4.  v11:= 31I;
  #L1a59d8.  v12:= 32I;
  #L1a59dc.  call `writeInt`(v13, v10, v11, v12) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a59e2.  v10:= 0I;
  #L1a59e4.  v13.`okhttp3.internal.http2.Hpack$Writer.emitDynamicTableSizeUpdate` @type ^`boolean` := v10 @kind boolean;
  #L1a59e8.  v10:= 2147483647I;
  #L1a59ee.  v13.`okhttp3.internal.http2.Hpack$Writer.smallestHeaderTableSizeSetting` @type ^`int` := v10;
  #L1a59f2.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.maxDynamicTableByteCount` @type ^`int`;
  #L1a59f6.  v11:= 31I;
  #L1a59fa.  v12:= 32I;
  #L1a59fe.  call `writeInt`(v13, v10, v11, v12) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a5a04.  v3:= 0I;
  #L1a5a06.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1a5a0c.  v7:= temp;
  #L1a5a0e.  if v3 >= v7 then goto L1a5ba6;
  #L1a5a12.  call temp:= `get`(v14, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1a5a18.  v0:= temp @kind object;
  #L1a5a1a.  v0:= (`okhttp3.internal.http2.Header`) v0 @kind object;
  #L1a5a1e.  v10:= v0.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L1a5a22.  call temp:= `toAsciiLowercase`(v10) @signature `Lokio/ByteString;.toAsciiLowercase:()Lokio/ByteString;` @kind virtual;
  #L1a5a28.  v6:= temp @kind object;
  #L1a5a2a.  v9:= v0.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a5a2e.  v1:= -1I;
  #L1a5a30.  v2:= -1I;
  #L1a5a32.  v10:= `@@okhttp3.internal.http2.Hpack.NAME_TO_FIRST_INDEX` @type ^`java.util.Map` @kind object;
  #L1a5a36.  call temp:= `get`(v10, v6) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1a5a3c.  v8:= temp @kind object;
  #L1a5a3e.  v8:= (`java.lang.Integer`) v8 @kind object;
  #L1a5a42.  if v8 == 0 then goto L1a5a7e;
  #L1a5a46.  call temp:= `intValue`(v8) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1a5a4c.  v10:= temp;
  #L1a5a4e.  v2:= v10 + 1;
  #L1a5a52.  v10:= 1I;
  #L1a5a54.  if v2 <= v10 then goto L1a5a7e;
  #L1a5a58.  v10:= 8I;
  #L1a5a5c.  if v2 >= v10 then goto L1a5a7e;
  #L1a5a60.  v10:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5a64.  v11:= v2 + -1;
  #L1a5a68.  v10:= v10[v11] @kind object;
  #L1a5a6c.  v10:= v10.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a5a70.  call temp:= `equal`(v10, v9) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a5a76.  v10:= temp;
  #L1a5a78.  if v10 == 0 then goto L1a5af2;
  #L1a5a7c.  v1:= v2;
  #L1a5a7e.  v10:= -1I;
  #L1a5a80.  if v1 != v10 then goto L1a5ad8;
  #L1a5a84.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a5a88.  v4:= v10 + 1;
  #L1a5a8c.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5a90.  v5:= length @variable v10;
  #L1a5a92.  if v4 >= v5 then goto L1a5ad8;
  #L1a5a96.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5a9a.  v10:= v10[v4] @kind object;
  #L1a5a9e.  v10:= v10.`okhttp3.internal.http2.Header.name` @type ^`okio.ByteString` @kind object;
  #L1a5aa2.  call temp:= `equal`(v10, v6) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a5aa8.  v10:= temp;
  #L1a5aaa.  if v10 == 0 then goto L1a5b28;
  #L1a5aae.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.dynamicTable` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5ab2.  v10:= v10[v4] @kind object;
  #L1a5ab6.  v10:= v10.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a5aba.  call temp:= `equal`(v10, v9) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a5ac0.  v10:= temp;
  #L1a5ac2.  if v10 == 0 then goto L1a5b10;
  #L1a5ac6.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a5aca.  v10:= v4 - v10 @kind int;
  #L1a5ace.  v11:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5ad2.  v11:= length @variable v11;
  #L1a5ad4.  v1:= v10 + v11 @kind int;
  #L1a5ad8.  v10:= -1I;
  #L1a5ada.  if v1 == v10 then goto L1a5b2e;
  #L1a5ade.  v10:= 127I;
  #L1a5ae2.  v11:= 128I;
  #L1a5ae6.  call `writeInt`(v13, v1, v10, v11) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a5aec.  v3:= v3 + 1;
  #L1a5af0.  goto L1a5a0e;
  #L1a5af2.  v10:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5af6.  v10:= v10[v2] @kind object;
  #L1a5afa.  v10:= v10.`okhttp3.internal.http2.Header.value` @type ^`okio.ByteString` @kind object;
  #L1a5afe.  call temp:= `equal`(v10, v9) @signature `Lokhttp3/internal/Util;.equal:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L1a5b04.  v10:= temp;
  #L1a5b06.  if v10 == 0 then goto L1a5a7e;
  #L1a5b0a.  v1:= v2 + 1;
  #L1a5b0e.  goto L1a5a7e;
  #L1a5b10.  v10:= -1I;
  #L1a5b12.  if v2 != v10 then goto L1a5b28;
  #L1a5b16.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.nextHeaderIndex` @type ^`int`;
  #L1a5b1a.  v10:= v4 - v10 @kind int;
  #L1a5b1e.  v11:= `@@okhttp3.internal.http2.Hpack.STATIC_HEADER_TABLE` @type ^`okhttp3.internal.http2.Header`[] @kind object;
  #L1a5b22.  v11:= length @variable v11;
  #L1a5b24.  v2:= v10 + v11 @kind int;
  #L1a5b28.  v4:= v4 + 1;
  #L1a5b2c.  goto L1a5a92;
  #L1a5b2e.  v10:= -1I;
  #L1a5b30.  if v2 != v10 then goto L1a5b56;
  #L1a5b34.  v10:= v13.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a5b38.  v11:= 64I;
  #L1a5b3c.  call temp:= `writeByte`(v10, v11) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a5b42.  call `writeByteString`(v13, v6) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a5b48.  call `writeByteString`(v13, v9) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a5b4e.  call `insertIntoDynamicTable`(v13, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L1a5b54.  goto L1a5aec;
  #L1a5b56.  v10:= `@@okhttp3.internal.http2.Header.PSEUDO_PREFIX` @type ^`okio.ByteString` @kind object;
  #L1a5b5a.  call temp:= `startsWith`(v6, v10) @signature `Lokio/ByteString;.startsWith:(Lokio/ByteString;)Z` @kind virtual;
  #L1a5b60.  v10:= temp;
  #L1a5b62.  if v10 == 0 then goto L1a5b8a;
  #L1a5b66.  v10:= `@@okhttp3.internal.http2.Header.TARGET_AUTHORITY` @type ^`okio.ByteString` @kind object;
  #L1a5b6a.  call temp:= `equals`(v10, v6) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a5b70.  v10:= temp;
  #L1a5b72.  if v10 != 0 then goto L1a5b8a;
  #L1a5b76.  v10:= 15I;
  #L1a5b7a.  v11:= 0I;
  #L1a5b7c.  call `writeInt`(v13, v2, v10, v11) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a5b82.  call `writeByteString`(v13, v9) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a5b88.  goto L1a5aec;
  #L1a5b8a.  v10:= 63I;
  #L1a5b8e.  v11:= 64I;
  #L1a5b92.  call `writeInt`(v13, v2, v10, v11) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @kind virtual;
  #L1a5b98.  call `writeByteString`(v13, v9) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeByteString:(Lokio/ByteString;)V` @kind virtual;
  #L1a5b9e.  call `insertIntoDynamicTable`(v13, v0) @signature `Lokhttp3/internal/http2/Hpack$Writer;.insertIntoDynamicTable:(Lokhttp3/internal/http2/Header;)V` @kind direct;
  #L1a5ba4.  goto L1a5aec;
  #L1a5ba6.  return @kind void;
}
procedure `void` `writeInt`(`okhttp3.internal.http2.Hpack$Writer` v3 @kind this, `int` v4 @name `value`, `int` v5 @name `prefixMask`, `int` v6 @name `bits`) @signature `Lokhttp3/internal/http2/Hpack$Writer;.writeInt:(III)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a5bb8.  if v4 >= v5 then goto L1a5bcc;
  #L1a5bbc.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a5bc0.  v2:= v6 ^| v4 @kind int;
  #L1a5bc4.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a5bca.  return @kind void;
  #L1a5bcc.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a5bd0.  v2:= v6 ^| v5 @kind int;
  #L1a5bd4.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a5bda.  v4:= v4 - v5 @kind int;
  #L1a5bdc.  v1:= 128I;
  #L1a5be0.  if v4 < v1 then goto L1a5bfc;
  #L1a5be4.  v0:= v4 ^& 127;
  #L1a5be8.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a5bec.  v2:= v0 ^| 128;
  #L1a5bf0.  call temp:= `writeByte`(v1, v2) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a5bf6.  v4:= v4 ^>> 7;
  #L1a5bfa.  goto L1a5bdc;
  #L1a5bfc.  v1:= v3.`okhttp3.internal.http2.Hpack$Writer.out` @type ^`okio.Buffer` @kind object;
  #L1a5c00.  call temp:= `writeByte`(v1, v4) @signature `Lokio/Buffer;.writeByte:(I)Lokio/Buffer;` @kind virtual;
  #L1a5c06.  goto L1a5bca;
}
