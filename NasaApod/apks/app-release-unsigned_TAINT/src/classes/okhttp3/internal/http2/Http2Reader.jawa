record `okhttp3.internal.http2.Http2Reader` @kind class @AccessFlag FINAL extends `java.io.Closeable` @kind interface {
  `boolean` `okhttp3.internal.http2.Http2Reader.client` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Http2Reader$ContinuationSource` `okhttp3.internal.http2.Http2Reader.continuation` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.http2.Hpack$Reader` `okhttp3.internal.http2.Http2Reader.hpackReader` @AccessFlag FINAL;
  `okio.BufferedSource` `okhttp3.internal.http2.Http2Reader.source` @AccessFlag PRIVATE_FINAL;
}
global `java.util.logging.Logger` `@@okhttp3.internal.http2.Http2Reader.logger` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/http2/Http2Reader;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a7710.  v0:= constclass @type ^`okhttp3.internal.http2.Http2` @kind object;
  #L1a7714.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1a771a.  v0:= temp @kind object;
  #L1a771c.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L1a7722.  v0:= temp @kind object;
  #L1a7724.  `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L1a7728.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.http2.Http2Reader` v3 @kind this, `okio.BufferedSource` v4 @kind object @name `source`, `boolean` v5 @name `client`) @signature `Lokhttp3/internal/http2/Http2Reader;.<init>:(Lokio/BufferedSource;Z)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1a773c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a7742.  v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` := v4 @kind object;
  #L1a7746.  v3.`okhttp3.internal.http2.Http2Reader.client` @type ^`boolean` := v5 @kind boolean;
  #L1a774a.  v0:= new `okhttp3.internal.http2.Http2Reader$ContinuationSource`;
  #L1a774e.  v1:= v3.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7752.  call `<init>`(v0, v1) @signature `Lokhttp3/internal/http2/Http2Reader$ContinuationSource;.<init>:(Lokio/BufferedSource;)V` @kind direct;
  #L1a7758.  v3.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` := v0 @kind object;
  #L1a775c.  v0:= new `okhttp3.internal.http2.Hpack$Reader`;
  #L1a7760.  v1:= 4096I;
  #L1a7764.  v2:= v3.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L1a7768.  call `<init>`(v0, v1, v2) @signature `Lokhttp3/internal/http2/Hpack$Reader;.<init>:(ILokio/Source;)V` @kind direct;
  #L1a776e.  v3.`okhttp3.internal.http2.Http2Reader.hpackReader` @type ^`okhttp3.internal.http2.Hpack$Reader` := v0 @kind object;
  #L1a7772.  return @kind void;
}
procedure `int` `lengthWithoutPadding`(`int` v4 @name `length`, `byte` v5 @name `flags`, `short` v6 @name `padding`) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a7784.  v0:= v5 ^& 8;
  #L1a7788.  if v0 == 0 then goto L1a7790;
  #L1a778c.  v4:= v4 + -1;
  #L1a7790.  if v6 <= v4 then goto L1a77c4;
  #L1a7794.  v0:= "PROTOCOL_ERROR padding %s > remaining length %s" @kind object;
  #L1a7798.  v1:= 2I;
  #L1a779a.  v1:= new `java.lang.Object`[v1];
  #L1a779e.  v2:= 0I;
  #L1a77a0.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Short;.valueOf:(S)Ljava/lang/Short;` @kind static;
  #L1a77a6.  v3:= temp @kind object;
  #L1a77a8.  v1[v2]:= v3 @kind object;
  #L1a77ac.  v2:= 1I;
  #L1a77ae.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a77b4.  v3:= temp @kind object;
  #L1a77b6.  v1[v2]:= v3 @kind object;
  #L1a77ba.  call temp:= `ioException`(v0, v1) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a77c0.  v0:= temp @kind object;
  #L1a77c2.  throw v0;
  #L1a77c4.  v0:= v4 - v6 @kind int;
  #L1a77c8.  v0:= (`short`) v0 @kind i2s;
  #L1a77ca.  return v0;
}
procedure `void` `readData`(`okhttp3.internal.http2.Http2Reader` v6 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v7 @kind object @name `handler`, `int` v8 @name `length`, `byte` v9 @name `flags`, `int` v10 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readData:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1a77dc.  v0:= 1I;
  #L1a77de.  v2:= 0I;
  #L1a77e0.  if v10 != 0 then goto L1a77f6;
  #L1a77e4.  v3:= "PROTOCOL_ERROR: TYPE_DATA streamId == 0" @kind object;
  #L1a77e8.  v4:= new `java.lang.Object`[v2];
  #L1a77ec.  call temp:= `ioException`(v3, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a77f2.  v3:= temp @kind object;
  #L1a77f4.  throw v3;
  #L1a77f6.  v3:= v9 ^& 1;
  #L1a77fa.  if v3 == 0 then goto L1a781e;
  #L1a77fe.  v1:= v0;
  #L1a7800.  v3:= v9 ^& 32;
  #L1a7804.  if v3 == 0 then goto L1a7822;
  #L1a7808.  if v0 == 0 then goto L1a7826;
  #L1a780c.  v3:= "PROTOCOL_ERROR: FLAG_COMPRESSED without SETTINGS_COMPRESS_DATA" @kind object;
  #L1a7810.  v4:= new `java.lang.Object`[v2];
  #L1a7814.  call temp:= `ioException`(v3, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a781a.  v3:= temp @kind object;
  #L1a781c.  throw v3;
  #L1a781e.  v1:= v2;
  #L1a7820.  goto L1a7800;
  #L1a7822.  v0:= v2;
  #L1a7824.  goto L1a7808;
  #L1a7826.  v3:= v9 ^& 8;
  #L1a782a.  if v3 == 0 then goto L1a7840;
  #L1a782e.  v3:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7832.  call temp:= `readByte`(v3) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a7838.  v3:= temp;
  #L1a783a.  v3:= v3 ^& 255;
  #L1a783e.  v2:= (`short`) v3 @kind i2s;
  #L1a7840.  call temp:= `lengthWithoutPadding`(v8, v9, v2) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @kind static;
  #L1a7846.  v8:= temp;
  #L1a7848.  v3:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a784c.  call `data`(v7, v1, v10, v3, v8) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.data:(ZILokio/BufferedSource;I)V` @kind interface;
  #L1a7852.  v3:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7856.  v4:= (`long`) v2 @kind i2l;
  #L1a7858.  call `skip`(v3, v4) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L1a785e.  return @kind void;
}
procedure `void` `readGoAway`(`okhttp3.internal.http2.Http2Reader` v9 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v10 @kind object @name `handler`, `int` v11 @name `length`, `byte` v12 @name `flags`, `int` v13 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readGoAway:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1a7870.  v6:= 1I;
  #L1a7872.  v8:= 0I;
  #L1a7874.  v5:= 8I;
  #L1a7878.  if v11 >= v5 then goto L1a789a;
  #L1a787c.  v5:= "TYPE_GOAWAY length < 8: %s" @kind object;
  #L1a7880.  v6:= new `java.lang.Object`[v6];
  #L1a7884.  call temp:= `valueOf`(v11) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a788a.  v7:= temp @kind object;
  #L1a788c.  v6[v8]:= v7 @kind object;
  #L1a7890.  call temp:= `ioException`(v5, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7896.  v5:= temp @kind object;
  #L1a7898.  throw v5;
  #L1a789a.  if v13 == 0 then goto L1a78b0;
  #L1a789e.  v5:= "TYPE_GOAWAY streamId != 0" @kind object;
  #L1a78a2.  v6:= new `java.lang.Object`[v8];
  #L1a78a6.  call temp:= `ioException`(v5, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a78ac.  v5:= temp @kind object;
  #L1a78ae.  throw v5;
  #L1a78b0.  v5:= v9.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a78b4.  call temp:= `readInt`(v5) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a78ba.  v3:= temp;
  #L1a78bc.  v5:= v9.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a78c0.  call temp:= `readInt`(v5) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a78c6.  v2:= temp;
  #L1a78c8.  v4:= v11 + -8;
  #L1a78cc.  call temp:= `fromHttp2`(v2) @signature `Lokhttp3/internal/http2/ErrorCode;.fromHttp2:(I)Lokhttp3/internal/http2/ErrorCode;` @kind static;
  #L1a78d2.  v1:= temp @kind object;
  #L1a78d4.  if v1 != 0 then goto L1a78f6;
  #L1a78d8.  v5:= "TYPE_GOAWAY unexpected error code: %d" @kind object;
  #L1a78dc.  v6:= new `java.lang.Object`[v6];
  #L1a78e0.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a78e6.  v7:= temp @kind object;
  #L1a78e8.  v6[v8]:= v7 @kind object;
  #L1a78ec.  call temp:= `ioException`(v5, v6) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a78f2.  v5:= temp @kind object;
  #L1a78f4.  throw v5;
  #L1a78f6.  v0:= `@@okio.ByteString.EMPTY` @type ^`okio.ByteString` @kind object;
  #L1a78fa.  if v4 <= 0 then goto L1a790c;
  #L1a78fe.  v5:= v9.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7902.  v6:= (`long`) v4 @kind i2l;
  #L1a7904.  call temp:= `readByteString`(v5, v6) @signature `Lokio/BufferedSource;.readByteString:(J)Lokio/ByteString;` @kind interface;
  #L1a790a.  v0:= temp @kind object;
  #L1a790c.  call `goAway`(v10, v3, v1, v0) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.goAway:(ILokhttp3/internal/http2/ErrorCode;Lokio/ByteString;)V` @kind interface;
  #L1a7912.  return @kind void;
}
procedure `java.util.List` `readHeaderBlock`(`okhttp3.internal.http2.Http2Reader` v2 @kind this, `int` v3 @name `length`, `short` v4 @name `padding`, `byte` v5 @name `flags`, `int` v6 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaderBlock:(ISBI)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1a7924.  v0:= v2.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L1a7928.  v1:= v2.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L1a792c.  v1.`okhttp3.internal.http2.Http2Reader$ContinuationSource.left` @type ^`int` := v3;
  #L1a7930.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.length` @type ^`int` := v3;
  #L1a7934.  v0:= v2.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L1a7938.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.padding` @type ^`short` := v4 @kind char;
  #L1a793c.  v0:= v2.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L1a7940.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.flags` @type ^`byte` := v5 @kind byte;
  #L1a7944.  v0:= v2.`okhttp3.internal.http2.Http2Reader.continuation` @type ^`okhttp3.internal.http2.Http2Reader$ContinuationSource` @kind object;
  #L1a7948.  v0.`okhttp3.internal.http2.Http2Reader$ContinuationSource.streamId` @type ^`int` := v6;
  #L1a794c.  v0:= v2.`okhttp3.internal.http2.Http2Reader.hpackReader` @type ^`okhttp3.internal.http2.Hpack$Reader` @kind object;
  #L1a7950.  call `readHeaders`(v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.readHeaders:()V` @kind virtual;
  #L1a7956.  v0:= v2.`okhttp3.internal.http2.Http2Reader.hpackReader` @type ^`okhttp3.internal.http2.Hpack$Reader` @kind object;
  #L1a795a.  call temp:= `getAndResetHeaderList`(v0) @signature `Lokhttp3/internal/http2/Hpack$Reader;.getAndResetHeaderList:()Ljava/util/List;` @kind virtual;
  #L1a7960.  v0:= temp @kind object;
  #L1a7962.  return v0 @kind object;
}
procedure `void` `readHeaders`(`okhttp3.internal.http2.Http2Reader` v5 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v6 @kind object @name `handler`, `int` v7 @name `length`, `byte` v8 @name `flags`, `int` v9 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaders:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a7974.  v2:= 0I;
  #L1a7976.  if v9 != 0 then goto L1a798c;
  #L1a797a.  v3:= "PROTOCOL_ERROR: TYPE_HEADERS streamId == 0" @kind object;
  #L1a797e.  v4:= new `java.lang.Object`[v2];
  #L1a7982.  call temp:= `ioException`(v3, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7988.  v3:= temp @kind object;
  #L1a798a.  throw v3;
  #L1a798c.  v3:= v8 ^& 1;
  #L1a7990.  if v3 == 0 then goto L1a79dc;
  #L1a7994.  v0:= 1I;
  #L1a7996.  v3:= v8 ^& 8;
  #L1a799a.  if v3 == 0 then goto L1a79b0;
  #L1a799e.  v3:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a79a2.  call temp:= `readByte`(v3) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a79a8.  v3:= temp;
  #L1a79aa.  v3:= v3 ^& 255;
  #L1a79ae.  v2:= (`short`) v3 @kind i2s;
  #L1a79b0.  v3:= v8 ^& 32;
  #L1a79b4.  if v3 == 0 then goto L1a79c2;
  #L1a79b8.  call `readPriority`(v5, v6, v9) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;I)V` @kind direct;
  #L1a79be.  v7:= v7 + -5;
  #L1a79c2.  call temp:= `lengthWithoutPadding`(v7, v8, v2) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @kind static;
  #L1a79c8.  v7:= temp;
  #L1a79ca.  call temp:= `readHeaderBlock`(v5, v7, v2, v8, v9) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaderBlock:(ISBI)Ljava/util/List;` @kind direct;
  #L1a79d0.  v1:= temp @kind object;
  #L1a79d2.  v3:= -1I;
  #L1a79d4.  call `headers`(v6, v0, v9, v3, v1) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.headers:(ZIILjava/util/List;)V` @kind interface;
  #L1a79da.  return @kind void;
  #L1a79dc.  v0:= v2;
  #L1a79de.  goto L1a7996;
}
procedure `int` `readMedium`(`okio.BufferedSource` v2 @kind object @name `source`) @signature `Lokhttp3/internal/http2/Http2Reader;.readMedium:(Lokio/BufferedSource;)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L1a79f0.  call temp:= `readByte`(v2) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a79f6.  v0:= temp;
  #L1a79f8.  v0:= v0 ^& 255;
  #L1a79fc.  v0:= v0 ^< 16;
  #L1a7a00.  call temp:= `readByte`(v2) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a7a06.  v1:= temp;
  #L1a7a08.  v1:= v1 ^& 255;
  #L1a7a0c.  v1:= v1 ^< 8;
  #L1a7a10.  v0:= v0 ^| v1 @kind int;
  #L1a7a12.  call temp:= `readByte`(v2) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a7a18.  v1:= temp;
  #L1a7a1a.  v1:= v1 ^& 255;
  #L1a7a1e.  v0:= v0 ^| v1 @kind int;
  #L1a7a20.  return v0;
}
procedure `void` `readPing`(`okhttp3.internal.http2.Http2Reader` v7 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v8 @kind object @name `handler`, `int` v9 @name `length`, `byte` v10 @name `flags`, `int` v11 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readPing:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a7a34.  v0:= 1I;
  #L1a7a36.  v3:= 0I;
  #L1a7a38.  v4:= 8I;
  #L1a7a3c.  if v9 == v4 then goto L1a7a5e;
  #L1a7a40.  v4:= "TYPE_PING length != 8: %s" @kind object;
  #L1a7a44.  v5:= new `java.lang.Object`[v0];
  #L1a7a48.  call temp:= `valueOf`(v9) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a7a4e.  v6:= temp @kind object;
  #L1a7a50.  v5[v3]:= v6 @kind object;
  #L1a7a54.  call temp:= `ioException`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7a5a.  v3:= temp @kind object;
  #L1a7a5c.  throw v3;
  #L1a7a5e.  if v11 == 0 then goto L1a7a74;
  #L1a7a62.  v4:= "TYPE_PING streamId != 0" @kind object;
  #L1a7a66.  v3:= new `java.lang.Object`[v3];
  #L1a7a6a.  call temp:= `ioException`(v4, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7a70.  v3:= temp @kind object;
  #L1a7a72.  throw v3;
  #L1a7a74.  v4:= v7.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7a78.  call temp:= `readInt`(v4) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a7a7e.  v1:= temp;
  #L1a7a80.  v4:= v7.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7a84.  call temp:= `readInt`(v4) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a7a8a.  v2:= temp;
  #L1a7a8c.  v4:= v10 ^& 1;
  #L1a7a90.  if v4 == 0 then goto L1a7a9c;
  #L1a7a94.  call `ping`(v8, v0, v1, v2) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.ping:(ZII)V` @kind interface;
  #L1a7a9a.  return @kind void;
  #L1a7a9c.  v0:= v3;
  #L1a7a9e.  goto L1a7a94;
}
procedure `void` `readPriority`(`okhttp3.internal.http2.Http2Reader` v5 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v6 @kind object @name `handler`, `int` v7 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a7ab0.  v4:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7ab4.  call temp:= `readInt`(v4) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a7aba.  v2:= temp;
  #L1a7abc.  v4:= -2147483648I;
  #L1a7ac0.  v4:= v4 ^& v2 @kind int;
  #L1a7ac2.  if v4 == 0 then goto L1a7aee;
  #L1a7ac6.  v0:= 1I;
  #L1a7ac8.  v4:= 2147483647I;
  #L1a7ace.  v1:= v2 ^& v4 @kind int;
  #L1a7ad2.  v4:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7ad6.  call temp:= `readByte`(v4) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a7adc.  v4:= temp;
  #L1a7ade.  v4:= v4 ^& 255;
  #L1a7ae2.  v3:= v4 + 1;
  #L1a7ae6.  call `priority`(v6, v7, v1, v3, v0) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.priority:(IIIZ)V` @kind interface;
  #L1a7aec.  return @kind void;
  #L1a7aee.  v0:= 0I;
  #L1a7af0.  goto L1a7ac8;
}
procedure `void` `readPriority`(`okhttp3.internal.http2.Http2Reader` v4 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v5 @kind object @name `handler`, `int` v6 @name `length`, `byte` v7 @name `flags`, `int` v8 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a7b04.  v3:= 0I;
  #L1a7b06.  v0:= 5I;
  #L1a7b08.  if v6 == v0 then goto L1a7b2c;
  #L1a7b0c.  v0:= "TYPE_PRIORITY length: %d != 5" @kind object;
  #L1a7b10.  v1:= 1I;
  #L1a7b12.  v1:= new `java.lang.Object`[v1];
  #L1a7b16.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a7b1c.  v2:= temp @kind object;
  #L1a7b1e.  v1[v3]:= v2 @kind object;
  #L1a7b22.  call temp:= `ioException`(v0, v1) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7b28.  v0:= temp @kind object;
  #L1a7b2a.  throw v0;
  #L1a7b2c.  if v8 != 0 then goto L1a7b42;
  #L1a7b30.  v0:= "TYPE_PRIORITY streamId == 0" @kind object;
  #L1a7b34.  v1:= new `java.lang.Object`[v3];
  #L1a7b38.  call temp:= `ioException`(v0, v1) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7b3e.  v0:= temp @kind object;
  #L1a7b40.  throw v0;
  #L1a7b42.  call `readPriority`(v4, v5, v8) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;I)V` @kind direct;
  #L1a7b48.  return @kind void;
}
procedure `void` `readPushPromise`(`okhttp3.internal.http2.Http2Reader` v5 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v6 @kind object @name `handler`, `int` v7 @name `length`, `byte` v8 @name `flags`, `int` v9 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readPushPromise:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a7b5c.  v1:= 0I;
  #L1a7b5e.  if v9 != 0 then goto L1a7b74;
  #L1a7b62.  v3:= "PROTOCOL_ERROR: TYPE_PUSH_PROMISE streamId == 0" @kind object;
  #L1a7b66.  v4:= new `java.lang.Object`[v1];
  #L1a7b6a.  call temp:= `ioException`(v3, v4) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7b70.  v3:= temp @kind object;
  #L1a7b72.  throw v3;
  #L1a7b74.  v3:= v8 ^& 8;
  #L1a7b78.  if v3 == 0 then goto L1a7b8e;
  #L1a7b7c.  v3:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7b80.  call temp:= `readByte`(v3) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a7b86.  v3:= temp;
  #L1a7b88.  v3:= v3 ^& 255;
  #L1a7b8c.  v1:= (`short`) v3 @kind i2s;
  #L1a7b8e.  v3:= v5.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7b92.  call temp:= `readInt`(v3) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a7b98.  v3:= temp;
  #L1a7b9a.  v4:= 2147483647I;
  #L1a7ba0.  v2:= v3 ^& v4 @kind int;
  #L1a7ba4.  v7:= v7 + -4;
  #L1a7ba8.  call temp:= `lengthWithoutPadding`(v7, v8, v1) @signature `Lokhttp3/internal/http2/Http2Reader;.lengthWithoutPadding:(IBS)I` @kind static;
  #L1a7bae.  v7:= temp;
  #L1a7bb0.  call temp:= `readHeaderBlock`(v5, v7, v1, v8, v9) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaderBlock:(ISBI)Ljava/util/List;` @kind direct;
  #L1a7bb6.  v0:= temp @kind object;
  #L1a7bb8.  call `pushPromise`(v6, v9, v2, v0) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.pushPromise:(IILjava/util/List;)V` @kind interface;
  #L1a7bbe.  return @kind void;
}
procedure `void` `readRstStream`(`okhttp3.internal.http2.Http2Reader` v6 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v7 @kind object @name `handler`, `int` v8 @name `length`, `byte` v9 @name `flags`, `int` v10 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readRstStream:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1a7bd0.  v3:= 1I;
  #L1a7bd2.  v5:= 0I;
  #L1a7bd4.  v2:= 4I;
  #L1a7bd6.  if v8 == v2 then goto L1a7bf8;
  #L1a7bda.  v2:= "TYPE_RST_STREAM length: %d != 4" @kind object;
  #L1a7bde.  v3:= new `java.lang.Object`[v3];
  #L1a7be2.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a7be8.  v4:= temp @kind object;
  #L1a7bea.  v3[v5]:= v4 @kind object;
  #L1a7bee.  call temp:= `ioException`(v2, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7bf4.  v2:= temp @kind object;
  #L1a7bf6.  throw v2;
  #L1a7bf8.  if v10 != 0 then goto L1a7c0e;
  #L1a7bfc.  v2:= "TYPE_RST_STREAM streamId == 0" @kind object;
  #L1a7c00.  v3:= new `java.lang.Object`[v5];
  #L1a7c04.  call temp:= `ioException`(v2, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7c0a.  v2:= temp @kind object;
  #L1a7c0c.  throw v2;
  #L1a7c0e.  v2:= v6.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7c12.  call temp:= `readInt`(v2) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a7c18.  v1:= temp;
  #L1a7c1a.  call temp:= `fromHttp2`(v1) @signature `Lokhttp3/internal/http2/ErrorCode;.fromHttp2:(I)Lokhttp3/internal/http2/ErrorCode;` @kind static;
  #L1a7c20.  v0:= temp @kind object;
  #L1a7c22.  if v0 != 0 then goto L1a7c44;
  #L1a7c26.  v2:= "TYPE_RST_STREAM unexpected error code: %d" @kind object;
  #L1a7c2a.  v3:= new `java.lang.Object`[v3];
  #L1a7c2e.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a7c34.  v4:= temp @kind object;
  #L1a7c36.  v3[v5]:= v4 @kind object;
  #L1a7c3a.  call temp:= `ioException`(v2, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7c40.  v2:= temp @kind object;
  #L1a7c42.  throw v2;
  #L1a7c44.  call `rstStream`(v7, v10, v0) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.rstStream:(ILokhttp3/internal/http2/ErrorCode;)V` @kind interface;
  #L1a7c4a.  return @kind void;
}
procedure `void` `readSettings`(`okhttp3.internal.http2.Http2Reader` v8 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v9 @kind object @name `handler`, `int` v10 @name `length`, `byte` v11 @name `flags`, `int` v12 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readSettings:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a7c5c.  v6:= 1I;
  #L1a7c5e.  v7:= 0I;
  #L1a7c60.  if v12 == 0 then goto L1a7c76;
  #L1a7c64.  v4:= "TYPE_SETTINGS streamId != 0" @kind object;
  #L1a7c68.  v5:= new `java.lang.Object`[v7];
  #L1a7c6c.  call temp:= `ioException`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7c72.  v4:= temp @kind object;
  #L1a7c74.  throw v4;
  #L1a7c76.  v4:= v11 ^& 1;
  #L1a7c7a.  if v4 == 0 then goto L1a7c9c;
  #L1a7c7e.  if v10 == 0 then goto L1a7c94;
  #L1a7c82.  v4:= "FRAME_SIZE_ERROR ack frame should be empty!" @kind object;
  #L1a7c86.  v5:= new `java.lang.Object`[v7];
  #L1a7c8a.  call temp:= `ioException`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7c90.  v4:= temp @kind object;
  #L1a7c92.  throw v4;
  #L1a7c94.  call `ackSettings`(v9) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.ackSettings:()V` @kind interface;
  #L1a7c9a.  return @kind void;
  #L1a7c9c.  v4:= v10 %% 6;
  #L1a7ca0.  if v4 == 0 then goto L1a7cc2;
  #L1a7ca4.  v4:= "TYPE_SETTINGS length %% 6 != 0: %s" @kind object;
  #L1a7ca8.  v5:= new `java.lang.Object`[v6];
  #L1a7cac.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a7cb2.  v6:= temp @kind object;
  #L1a7cb4.  v5[v7]:= v6 @kind object;
  #L1a7cb8.  call temp:= `ioException`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7cbe.  v4:= temp @kind object;
  #L1a7cc0.  throw v4;
  #L1a7cc2.  v2:= new `okhttp3.internal.http2.Settings`;
  #L1a7cc6.  call `<init>`(v2) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @kind direct;
  #L1a7ccc.  v0:= 0I;
  #L1a7cce.  if v0 >= v10 then goto L1a7d6c;
  #L1a7cd2.  v4:= v8.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7cd6.  call temp:= `readShort`(v4) @signature `Lokio/BufferedSource;.readShort:()S` @kind interface;
  #L1a7cdc.  v4:= temp;
  #L1a7cde.  v5:= 65535I;
  #L1a7ce4.  v1:= v4 ^& v5 @kind int;
  #L1a7ce8.  v4:= v8.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7cec.  call temp:= `readInt`(v4) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a7cf2.  v3:= temp;
  #L1a7cf4.  goto L1a7d74;
  #L1a7cfa.  call temp:= `set`(v2, v1, v3) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L1a7d00.  v0:= v0 + 6;
  #L1a7d04.  goto L1a7cce;
  #L1a7d06.  if v3 == 0 then goto L1a7cfa;
  #L1a7d0a.  if v3 == v6 then goto L1a7cfa;
  #L1a7d0e.  v4:= "PROTOCOL_ERROR SETTINGS_ENABLE_PUSH != 0 or 1" @kind object;
  #L1a7d12.  v5:= new `java.lang.Object`[v7];
  #L1a7d16.  call temp:= `ioException`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7d1c.  v4:= temp @kind object;
  #L1a7d1e.  throw v4;
  #L1a7d20.  v1:= 4I;
  #L1a7d22.  goto L1a7cfa;
  #L1a7d24.  v1:= 7I;
  #L1a7d26.  if v3 >= 0 then goto L1a7cfa;
  #L1a7d2a.  v4:= "PROTOCOL_ERROR SETTINGS_INITIAL_WINDOW_SIZE > 2^31 - 1" @kind object;
  #L1a7d2e.  v5:= new `java.lang.Object`[v7];
  #L1a7d32.  call temp:= `ioException`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7d38.  v4:= temp @kind object;
  #L1a7d3a.  throw v4;
  #L1a7d3c.  v4:= 16384I;
  #L1a7d40.  if v3 < v4 then goto L1a7d4e;
  #L1a7d44.  v4:= 16777215I;
  #L1a7d4a.  if v3 <= v4 then goto L1a7cfa;
  #L1a7d4e.  v4:= "PROTOCOL_ERROR SETTINGS_MAX_FRAME_SIZE: %s" @kind object;
  #L1a7d52.  v5:= new `java.lang.Object`[v6];
  #L1a7d56.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a7d5c.  v6:= temp @kind object;
  #L1a7d5e.  v5[v7]:= v6 @kind object;
  #L1a7d62.  call temp:= `ioException`(v4, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7d68.  v4:= temp @kind object;
  #L1a7d6a.  throw v4;
  #L1a7d6c.  call `settings`(v9, v7, v2) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.settings:(ZLokhttp3/internal/http2/Settings;)V` @kind interface;
  #L1a7d72.  goto L1a7c9a;
  #L1a7d74.  switch v1
                  | 1 => goto L1a7cfa
                  | 2 => goto L1a7d06
                  | 3 => goto L1a7d20
                  | 4 => goto L1a7d24
                  | 5 => goto L1a7d3c
                  | 6 => goto L1a7cfa
                  | else => goto L1a7cfa;
}
procedure `void` `readWindowUpdate`(`okhttp3.internal.http2.Http2Reader` v8 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v9 @kind object @name `handler`, `int` v10 @name `length`, `byte` v11 @name `flags`, `int` v12 @name `streamId`) @signature `Lokhttp3/internal/http2/Http2Reader;.readWindowUpdate:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a7da4.  v7:= 1I;
  #L1a7da6.  v6:= 0I;
  #L1a7da8.  v2:= 4I;
  #L1a7daa.  if v10 == v2 then goto L1a7dcc;
  #L1a7dae.  v2:= "TYPE_WINDOW_UPDATE length !=4: %s" @kind object;
  #L1a7db2.  v3:= new `java.lang.Object`[v7];
  #L1a7db6.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a7dbc.  v4:= temp @kind object;
  #L1a7dbe.  v3[v6]:= v4 @kind object;
  #L1a7dc2.  call temp:= `ioException`(v2, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7dc8.  v2:= temp @kind object;
  #L1a7dca.  throw v2;
  #L1a7dcc.  v2:= v8.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7dd0.  call temp:= `readInt`(v2) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a7dd6.  v2:= temp;
  #L1a7dd8.  v2:= (`long`) v2 @kind i2l;
  #L1a7dda.  v4:= 2147483647L;
  #L1a7de0.  v0:= v2 ^& v4 @kind long;
  #L1a7de4.  v2:= 0L;
  #L1a7de8.  v2:= lcmp(v0, v2);
  #L1a7dec.  if v2 != 0 then goto L1a7e0e;
  #L1a7df0.  v2:= "windowSizeIncrement was 0" @kind object;
  #L1a7df4.  v3:= new `java.lang.Object`[v7];
  #L1a7df8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1a7dfe.  v4:= temp @kind object;
  #L1a7e00.  v3[v6]:= v4 @kind object;
  #L1a7e04.  call temp:= `ioException`(v2, v3) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7e0a.  v2:= temp @kind object;
  #L1a7e0c.  throw v2;
  #L1a7e0e.  call `windowUpdate`(v9, v12, v0) @signature `Lokhttp3/internal/http2/Http2Reader$Handler;.windowUpdate:(IJ)V` @kind interface;
  #L1a7e14.  return @kind void;
}
procedure `void` `close`(`okhttp3.internal.http2.Http2Reader` v1 @kind this) @signature `Lokhttp3/internal/http2/Http2Reader;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a7e28.  v0:= v1.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7e2c.  call `close`(v0) @signature `Lokio/BufferedSource;.close:()V` @kind interface;
  #L1a7e32.  return @kind void;
}
procedure `boolean` `nextFrame`(`okhttp3.internal.http2.Http2Reader` v10 @kind this, `boolean` v11 @name `requireSettings`, `okhttp3.internal.http2.Http2Reader$Handler` v12 @kind object @name `handler`) @signature `Lokhttp3/internal/http2/Http2Reader;.nextFrame:(ZLokhttp3/internal/http2/Http2Reader$Handler;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1a7e44.  v6:= 0I;
  #L1a7e46.  v5:= 1I;
  #Try_start0.  
  #L1a7e48.  v7:= v10.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7e4c.  v8:= 9L;
  #L1a7e50.  call `require`(v7, v8) @signature `Lokio/BufferedSource;.require:(J)V` @kind interface;
  #Try_end0.  
  #L1a7e56.  v7:= v10.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7e5a.  call temp:= `readMedium`(v7) @signature `Lokhttp3/internal/http2/Http2Reader;.readMedium:(Lokio/BufferedSource;)I` @kind static;
  #L1a7e60.  v2:= temp;
  #L1a7e62.  if v2 < 0 then goto L1a7e6e;
  #L1a7e66.  v7:= 16384I;
  #L1a7e6a.  if v2 <= v7 then goto L1a7e92;
  #L1a7e6e.  v7:= "FRAME_SIZE_ERROR: %s" @kind object;
  #L1a7e72.  v5:= new `java.lang.Object`[v5];
  #L1a7e76.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1a7e7c.  v8:= temp @kind object;
  #L1a7e7e.  v5[v6]:= v8 @kind object;
  #L1a7e82.  call temp:= `ioException`(v7, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7e88.  v5:= temp @kind object;
  #L1a7e8a.  throw v5;
  #L1a7e8c.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L1a7e8e.  v5:= v6;
  #L1a7e90.  return v5;
  #L1a7e92.  v7:= v10.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7e96.  call temp:= `readByte`(v7) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a7e9c.  v7:= temp;
  #L1a7e9e.  v7:= v7 ^& 255;
  #L1a7ea2.  v4:= (`byte`) v7 @kind i2b;
  #L1a7ea4.  if v11 == 0 then goto L1a7ecc;
  #L1a7ea8.  v7:= 4I;
  #L1a7eaa.  if v4 == v7 then goto L1a7ecc;
  #L1a7eae.  v7:= "Expected a SETTINGS frame but was %s" @kind object;
  #L1a7eb2.  v5:= new `java.lang.Object`[v5];
  #L1a7eb6.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L1a7ebc.  v8:= temp @kind object;
  #L1a7ebe.  v5[v6]:= v8 @kind object;
  #L1a7ec2.  call temp:= `ioException`(v7, v5) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7ec8.  v5:= temp @kind object;
  #L1a7eca.  throw v5;
  #L1a7ecc.  v6:= v10.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7ed0.  call temp:= `readByte`(v6) @signature `Lokio/BufferedSource;.readByte:()B` @kind interface;
  #L1a7ed6.  v6:= temp;
  #L1a7ed8.  v6:= v6 ^& 255;
  #L1a7edc.  v1:= (`byte`) v6 @kind i2b;
  #L1a7ede.  v6:= v10.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7ee2.  call temp:= `readInt`(v6) @signature `Lokio/BufferedSource;.readInt:()I` @kind interface;
  #L1a7ee8.  v6:= temp;
  #L1a7eea.  v7:= 2147483647I;
  #L1a7ef0.  v3:= v6 ^& v7 @kind int;
  #L1a7ef4.  v6:= `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` @kind object;
  #L1a7ef8.  v7:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L1a7efc.  call temp:= `isLoggable`(v6, v7) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L1a7f02.  v6:= temp;
  #L1a7f04.  if v6 == 0 then goto L1a7f1a;
  #L1a7f08.  v6:= `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` @kind object;
  #L1a7f0c.  call temp:= `frameLog`(v5, v3, v2, v4, v1) @signature `Lokhttp3/internal/http2/Http2;.frameLog:(ZIIBB)Ljava/lang/String;` @kind static;
  #L1a7f12.  v7:= temp @kind object;
  #L1a7f14.  call `fine`(v6, v7) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L1a7f1a.  goto L1a7f78;
  #L1a7f20.  v6:= v10.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7f24.  v8:= (`long`) v2 @kind i2l;
  #L1a7f26.  call `skip`(v6, v8) @signature `Lokio/BufferedSource;.skip:(J)V` @kind interface;
  #L1a7f2c.  goto L1a7e90;
  #L1a7f2e.  call `readData`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readData:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a7f34.  goto L1a7e90;
  #L1a7f36.  call `readHeaders`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readHeaders:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a7f3c.  goto L1a7e90;
  #L1a7f3e.  call `readPriority`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readPriority:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a7f44.  goto L1a7e90;
  #L1a7f46.  call `readRstStream`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readRstStream:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a7f4c.  goto L1a7e90;
  #L1a7f4e.  call `readSettings`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readSettings:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a7f54.  goto L1a7e90;
  #L1a7f56.  call `readPushPromise`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readPushPromise:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a7f5c.  goto L1a7e90;
  #L1a7f5e.  call `readPing`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readPing:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a7f64.  goto L1a7e90;
  #L1a7f66.  call `readGoAway`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readGoAway:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a7f6c.  goto L1a7e90;
  #L1a7f6e.  call `readWindowUpdate`(v10, v12, v2, v1, v3) @signature `Lokhttp3/internal/http2/Http2Reader;.readWindowUpdate:(Lokhttp3/internal/http2/Http2Reader$Handler;IBI)V` @kind direct;
  #L1a7f74.  goto L1a7e90;
  #L1a7f76.  
  #L1a7f78.  switch v4
                  | 0 => goto L1a7f2e
                  | 1 => goto L1a7f36
                  | 2 => goto L1a7f3e
                  | 3 => goto L1a7f46
                  | 4 => goto L1a7f4e
                  | 5 => goto L1a7f56
                  | 6 => goto L1a7f5e
                  | 7 => goto L1a7f66
                  | 8 => goto L1a7f6e
                  | else => goto L1a7f20;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L1a7e8c;
}
procedure `void` `readConnectionPreface`(`okhttp3.internal.http2.Http2Reader` v7 @kind this, `okhttp3.internal.http2.Http2Reader$Handler` v8 @kind object @name `handler`) @signature `Lokhttp3/internal/http2/Http2Reader;.readConnectionPreface:(Lokhttp3/internal/http2/Http2Reader$Handler;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a7fc4.  v6:= 1I;
  #L1a7fc6.  v5:= 0I;
  #L1a7fc8.  v1:= v7.`okhttp3.internal.http2.Http2Reader.client` @type ^`boolean` @kind boolean;
  #L1a7fcc.  if v1 == 0 then goto L1a7fee;
  #L1a7fd0.  call temp:= `nextFrame`(v7, v6, v8) @signature `Lokhttp3/internal/http2/Http2Reader;.nextFrame:(ZLokhttp3/internal/http2/Http2Reader$Handler;)Z` @kind virtual;
  #L1a7fd6.  v1:= temp;
  #L1a7fd8.  if v1 != 0 then goto L1a8070;
  #L1a7fdc.  v1:= "Required SETTINGS preface not received" @kind object;
  #L1a7fe0.  v2:= new `java.lang.Object`[v5];
  #L1a7fe4.  call temp:= `ioException`(v1, v2) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a7fea.  v1:= temp @kind object;
  #L1a7fec.  throw v1;
  #L1a7fee.  v1:= v7.`okhttp3.internal.http2.Http2Reader.source` @type ^`okio.BufferedSource` @kind object;
  #L1a7ff2.  v2:= `@@okhttp3.internal.http2.Http2.CONNECTION_PREFACE` @type ^`okio.ByteString` @kind object;
  #L1a7ff6.  call temp:= `size`(v2) @signature `Lokio/ByteString;.size:()I` @kind virtual;
  #L1a7ffc.  v2:= temp;
  #L1a7ffe.  v2:= (`long`) v2 @kind i2l;
  #L1a8000.  call temp:= `readByteString`(v1, v2) @signature `Lokio/BufferedSource;.readByteString:(J)Lokio/ByteString;` @kind interface;
  #L1a8006.  v0:= temp @kind object;
  #L1a8008.  v1:= `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` @kind object;
  #L1a800c.  v2:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L1a8010.  call temp:= `isLoggable`(v1, v2) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L1a8016.  v1:= temp;
  #L1a8018.  if v1 == 0 then goto L1a8042;
  #L1a801c.  v1:= `@@okhttp3.internal.http2.Http2Reader.logger` @type ^`java.util.logging.Logger` @kind object;
  #L1a8020.  v2:= "<< CONNECTION %s" @kind object;
  #L1a8024.  v3:= new `java.lang.Object`[v6];
  #L1a8028.  call temp:= `hex`(v0) @signature `Lokio/ByteString;.hex:()Ljava/lang/String;` @kind virtual;
  #L1a802e.  v4:= temp @kind object;
  #L1a8030.  v3[v5]:= v4 @kind object;
  #L1a8034.  call temp:= `format`(v2, v3) @signature `Lokhttp3/internal/Util;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1a803a.  v2:= temp @kind object;
  #L1a803c.  call `fine`(v1, v2) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L1a8042.  v1:= `@@okhttp3.internal.http2.Http2.CONNECTION_PREFACE` @type ^`okio.ByteString` @kind object;
  #L1a8046.  call temp:= `equals`(v1, v0) @signature `Lokio/ByteString;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1a804c.  v1:= temp;
  #L1a804e.  if v1 != 0 then goto L1a8070;
  #L1a8052.  v1:= "Expected a connection header but was %s" @kind object;
  #L1a8056.  v2:= new `java.lang.Object`[v6];
  #L1a805a.  call temp:= `utf8`(v0) @signature `Lokio/ByteString;.utf8:()Ljava/lang/String;` @kind virtual;
  #L1a8060.  v3:= temp @kind object;
  #L1a8062.  v2[v5]:= v3 @kind object;
  #L1a8066.  call temp:= `ioException`(v1, v2) @signature `Lokhttp3/internal/http2/Http2;.ioException:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/io/IOException;` @kind static;
  #L1a806c.  v1:= temp @kind object;
  #L1a806e.  throw v1;
  #L1a8070.  return @kind void;
}
