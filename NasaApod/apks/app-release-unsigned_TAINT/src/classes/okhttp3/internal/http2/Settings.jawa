record `okhttp3.internal.http2.Settings` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `okhttp3.internal.http2.Settings.set` @AccessFlag PRIVATE;
  `int`[] `okhttp3.internal.http2.Settings.values` @AccessFlag PRIVATE_FINAL;
}
global `int` `@@okhttp3.internal.http2.Settings.COUNT` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.DEFAULT_INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.ENABLE_PUSH` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.HEADER_TABLE_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.INITIAL_WINDOW_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_CONCURRENT_STREAMS` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_FRAME_SIZE` @AccessFlag STATIC_FINAL;
global `int` `@@okhttp3.internal.http2.Settings.MAX_HEADER_LIST_SIZE` @AccessFlag STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a9aec.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1a9af2.  v0:= 10I;
  #L1a9af6.  v0:= new `int`[v0];
  #L1a9afa.  v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] := v0 @kind object;
  #L1a9afe.  return @kind void;
}
procedure `void` `clear`(`okhttp3.internal.http2.Settings` v2 @kind this) @signature `Lokhttp3/internal/http2/Settings;.clear:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a9b10.  v1:= 0I;
  #L1a9b12.  v2.`okhttp3.internal.http2.Settings.set` @type ^`int` := v1;
  #L1a9b16.  v0:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9b1a.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L1a9b20.  return @kind void;
}
procedure `int` `get`(`okhttp3.internal.http2.Settings` v1 @kind this, `int` v2 @name `id`) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @AccessFlag  {
    temp;
    v0;

  #L1a9b34.  v0:= v1.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9b38.  v0:= v0[v2];
  #L1a9b3c.  return v0;
}
procedure `boolean` `getEnablePush`(`okhttp3.internal.http2.Settings` v5 @kind this, `boolean` v6 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getEnablePush:(Z)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a9b50.  v2:= 0I;
  #L1a9b52.  v1:= 1I;
  #L1a9b54.  v0:= 4I;
  #L1a9b56.  v3:= v5.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9b5a.  v3:= v3 ^& v0 @kind int;
  #L1a9b5c.  if v3 == 0 then goto L1a9b70;
  #L1a9b60.  v3:= v5.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9b64.  v4:= 2I;
  #L1a9b66.  v3:= v3[v4];
  #L1a9b6a.  if v3 != v1 then goto L1a9b7c;
  #L1a9b6e.  return v1;
  #L1a9b70.  if v6 == 0 then goto L1a9b78;
  #L1a9b74.  v3:= v1;
  #L1a9b76.  goto L1a9b6a;
  #L1a9b78.  v3:= v2;
  #L1a9b7a.  goto L1a9b6a;
  #L1a9b7c.  v1:= v2;
  #L1a9b7e.  goto L1a9b6e;
}
procedure `int` `getHeaderTableSize`(`okhttp3.internal.http2.Settings` v3 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getHeaderTableSize:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a9b90.  v0:= 2I;
  #L1a9b92.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9b96.  v1:= v1 ^& v0 @kind int;
  #L1a9b98.  if v1 == 0 then goto L1a9ba8;
  #L1a9b9c.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9ba0.  v2:= 1I;
  #L1a9ba2.  v1:= v1[v2];
  #L1a9ba6.  return v1;
  #L1a9ba8.  v1:= -1I;
  #L1a9baa.  goto L1a9ba6;
}
procedure `int` `getInitialWindowSize`(`okhttp3.internal.http2.Settings` v3 @kind this) @signature `Lokhttp3/internal/http2/Settings;.getInitialWindowSize:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a9bbc.  v0:= 128I;
  #L1a9bc0.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9bc4.  v1:= v1 ^& v0 @kind int;
  #L1a9bc6.  if v1 == 0 then goto L1a9bd6;
  #L1a9bca.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9bce.  v2:= 7I;
  #L1a9bd0.  v1:= v1[v2];
  #L1a9bd4.  return v1;
  #L1a9bd6.  v1:= 65535I;
  #L1a9bdc.  goto L1a9bd4;
}
procedure `int` `getMaxConcurrentStreams`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getMaxConcurrentStreams:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a9bf0.  v0:= 16I;
  #L1a9bf4.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9bf8.  v1:= v1 ^& v0 @kind int;
  #L1a9bfa.  if v1 == 0 then goto L1a9c08;
  #L1a9bfe.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9c02.  v2:= 4I;
  #L1a9c04.  v4:= v1[v2];
  #L1a9c08.  return v4;
}
procedure `int` `getMaxFrameSize`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getMaxFrameSize:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a9c1c.  v0:= 32I;
  #L1a9c20.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9c24.  v1:= v1 ^& v0 @kind int;
  #L1a9c26.  if v1 == 0 then goto L1a9c34;
  #L1a9c2a.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9c2e.  v2:= 5I;
  #L1a9c30.  v4:= v1[v2];
  #L1a9c34.  return v4;
}
procedure `int` `getMaxHeaderListSize`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `defaultValue`) @signature `Lokhttp3/internal/http2/Settings;.getMaxHeaderListSize:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a9c48.  v0:= 64I;
  #L1a9c4c.  v1:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9c50.  v1:= v1 ^& v0 @kind int;
  #L1a9c52.  if v1 == 0 then goto L1a9c60;
  #L1a9c56.  v1:= v3.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9c5a.  v2:= 6I;
  #L1a9c5c.  v4:= v1[v2];
  #L1a9c60.  return v4;
}
procedure `boolean` `isSet`(`okhttp3.internal.http2.Settings` v3 @kind this, `int` v4 @name `id`) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L1a9c74.  v1:= 1I;
  #L1a9c76.  v0:= v1 ^< v4 @kind int;
  #L1a9c7a.  v2:= v3.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9c7e.  v2:= v2 ^& v0 @kind int;
  #L1a9c80.  if v2 == 0 then goto L1a9c86;
  #L1a9c84.  return v1;
  #L1a9c86.  v1:= 0I;
  #L1a9c88.  goto L1a9c84;
}
procedure `void` `merge`(`okhttp3.internal.http2.Settings` v2 @kind this, `okhttp3.internal.http2.Settings` v3 @kind object @name `other`) @signature `Lokhttp3/internal/http2/Settings;.merge:(Lokhttp3/internal/http2/Settings;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a9c9c.  v0:= 0I;
  #L1a9c9e.  v1:= 10I;
  #L1a9ca2.  if v0 >= v1 then goto L1a9cc8;
  #L1a9ca6.  call temp:= `isSet`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.isSet:(I)Z` @kind virtual;
  #L1a9cac.  v1:= temp;
  #L1a9cae.  if v1 != 0 then goto L1a9cb8;
  #L1a9cb2.  v0:= v0 + 1;
  #L1a9cb6.  goto L1a9c9e;
  #L1a9cb8.  call temp:= `get`(v3, v0) @signature `Lokhttp3/internal/http2/Settings;.get:(I)I` @kind virtual;
  #L1a9cbe.  v1:= temp;
  #L1a9cc0.  call temp:= `set`(v2, v0, v1) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @kind virtual;
  #L1a9cc6.  goto L1a9cb2;
  #L1a9cc8.  return @kind void;
}
procedure `okhttp3.internal.http2.Settings` `set`(`okhttp3.internal.http2.Settings` v2 @kind this, `int` v3 @name `id`, `int` v4 @name `value`) @signature `Lokhttp3/internal/http2/Settings;.set:(II)Lokhttp3/internal/http2/Settings;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1a9cdc.  if v3 < 0 then goto L1a9cea;
  #L1a9ce0.  v1:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9ce4.  v1:= length @variable v1;
  #L1a9ce6.  if v3 < v1 then goto L1a9cec;
  #L1a9cea.  return v2 @kind object;
  #L1a9cec.  v1:= 1I;
  #L1a9cee.  v0:= v1 ^< v3 @kind int;
  #L1a9cf2.  v1:= v2.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9cf6.  v1:= v1 ^| v0 @kind int;
  #L1a9cf8.  v2.`okhttp3.internal.http2.Settings.set` @type ^`int` := v1;
  #L1a9cfc.  v1:= v2.`okhttp3.internal.http2.Settings.values` @type ^`int`[] @kind object;
  #L1a9d00.  v1[v3]:= v4;
  #L1a9d04.  goto L1a9cea;
}
procedure `int` `size`(`okhttp3.internal.http2.Settings` v1 @kind this) @signature `Lokhttp3/internal/http2/Settings;.size:()I` @AccessFlag  {
    temp;
    v0;

  #L1a9d18.  v0:= v1.`okhttp3.internal.http2.Settings.set` @type ^`int`;
  #L1a9d1c.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L1a9d22.  v0:= temp;
  #L1a9d24.  return v0;
}
