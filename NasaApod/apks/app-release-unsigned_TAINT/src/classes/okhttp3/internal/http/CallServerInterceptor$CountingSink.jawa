record `okhttp3.internal.http.CallServerInterceptor$CountingSink` @kind class @AccessFlag FINAL extends `okio.ForwardingSink` @kind class {
  `long` `okhttp3.internal.http.CallServerInterceptor$CountingSink.successfulCount` @AccessFlag ;
}
procedure `void` `<init>`(`okhttp3.internal.http.CallServerInterceptor$CountingSink` v0 @kind this, `okio.Sink` v1 @kind object @name `delegate`) @signature `Lokhttp3/internal/http/CallServerInterceptor$CountingSink;.<init>:(Lokio/Sink;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L24671c.  call `<init>`(v0, v1) @signature `Lokio/ForwardingSink;.<init>:(Lokio/Sink;)V` @kind direct;
  #L246722.  return @kind void;
}
procedure `void` `write`(`okhttp3.internal.http.CallServerInterceptor$CountingSink` v2 @kind this, `okio.Buffer` v3 @kind object @name `source`, `long` v4 @name `byteCount`) @signature `Lokhttp3/internal/http/CallServerInterceptor$CountingSink;.write:(Lokio/Buffer;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L246734.  call `write`(v2, v3, v4) @signature `Lokio/ForwardingSink;.write:(Lokio/Buffer;J)V` @kind super;
  #L24673a.  v0:= v2.`okhttp3.internal.http.CallServerInterceptor$CountingSink.successfulCount` @type ^`long` @kind wide;
  #L24673e.  v0:= v0 + v4 @kind long;
  #L246740.  v2.`okhttp3.internal.http.CallServerInterceptor$CountingSink.successfulCount` @type ^`long` := v0 @kind wide;
  #L246744.  return @kind void;
}
