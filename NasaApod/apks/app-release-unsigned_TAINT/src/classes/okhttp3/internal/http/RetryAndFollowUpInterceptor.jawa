record `okhttp3.internal.http.RetryAndFollowUpInterceptor` @kind class @AccessFlag PUBLIC_FINAL extends `okhttp3.Interceptor` @kind interface {
  `java.lang.Object` `okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @AccessFlag PRIVATE;
  `boolean` `okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @AccessFlag PRIVATE_VOLATILE;
  `okhttp3.OkHttpClient` `okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @AccessFlag PRIVATE_FINAL;
  `boolean` `okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @AccessFlag PRIVATE_FINAL;
  `okhttp3.internal.connection.StreamAllocation` `okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @AccessFlag PRIVATE_VOLATILE;
}
global `int` `@@okhttp3.internal.http.RetryAndFollowUpInterceptor.MAX_FOLLOW_UPS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v0 @kind this, `okhttp3.OkHttpClient` v1 @kind object @name `client`, `boolean` v2 @name `forWebSocket`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.<init>:(Lokhttp3/OkHttpClient;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L219018.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L21901e.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` := v1 @kind object;
  #L219022.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @type ^`boolean` := v2 @kind boolean;
  #L219026.  return @kind void;
}
procedure `okhttp3.Address` `createAddress`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v13 @kind this, `okhttp3.HttpUrl` v14 @kind object @name `url`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L219038.  v5:= 0I;
  #L21903a.  v6:= 0I;
  #L21903c.  v7:= 0I;
  #L21903e.  call temp:= `isHttps`(v14) @signature `Lokhttp3/HttpUrl;.isHttps:()Z` @kind virtual;
  #L219044.  v0:= temp;
  #L219046.  if v0 == 0 then goto L21906e;
  #L21904a.  v0:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21904e.  call temp:= `sslSocketFactory`(v0) @signature `Lokhttp3/OkHttpClient;.sslSocketFactory:()Ljavax/net/ssl/SSLSocketFactory;` @kind virtual;
  #L219054.  v5:= temp @kind object;
  #L219056.  v0:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21905a.  call temp:= `hostnameVerifier`(v0) @signature `Lokhttp3/OkHttpClient;.hostnameVerifier:()Ljavax/net/ssl/HostnameVerifier;` @kind virtual;
  #L219060.  v6:= temp @kind object;
  #L219062.  v0:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L219066.  call temp:= `certificatePinner`(v0) @signature `Lokhttp3/OkHttpClient;.certificatePinner:()Lokhttp3/CertificatePinner;` @kind virtual;
  #L21906c.  v7:= temp @kind object;
  #L21906e.  v0:= new `okhttp3.Address`;
  #L219072.  call temp:= `host`(v14) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L219078.  v1:= temp @kind object;
  #L21907a.  call temp:= `port`(v14) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L219080.  v2:= temp;
  #L219082.  v3:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L219086.  call temp:= `dns`(v3) @signature `Lokhttp3/OkHttpClient;.dns:()Lokhttp3/Dns;` @kind virtual;
  #L21908c.  v3:= temp @kind object;
  #L21908e.  v4:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L219092.  call temp:= `socketFactory`(v4) @signature `Lokhttp3/OkHttpClient;.socketFactory:()Ljavax/net/SocketFactory;` @kind virtual;
  #L219098.  v4:= temp @kind object;
  #L21909a.  v8:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21909e.  call temp:= `proxyAuthenticator`(v8) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L2190a4.  v8:= temp @kind object;
  #L2190a6.  v9:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2190aa.  call temp:= `proxy`(v9) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L2190b0.  v9:= temp @kind object;
  #L2190b2.  v10:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2190b6.  call temp:= `protocols`(v10) @signature `Lokhttp3/OkHttpClient;.protocols:()Ljava/util/List;` @kind virtual;
  #L2190bc.  v10:= temp @kind object;
  #L2190be.  v11:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2190c2.  call temp:= `connectionSpecs`(v11) @signature `Lokhttp3/OkHttpClient;.connectionSpecs:()Ljava/util/List;` @kind virtual;
  #L2190c8.  v11:= temp @kind object;
  #L2190ca.  v12:= v13.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2190ce.  call temp:= `proxySelector`(v12) @signature `Lokhttp3/OkHttpClient;.proxySelector:()Ljava/net/ProxySelector;` @kind virtual;
  #L2190d4.  v12:= temp @kind object;
  #L2190d6.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12) @signature `Lokhttp3/Address;.<init>:(Ljava/lang/String;ILokhttp3/Dns;Ljavax/net/SocketFactory;Ljavax/net/ssl/SSLSocketFactory;Ljavax/net/ssl/HostnameVerifier;Lokhttp3/CertificatePinner;Lokhttp3/Authenticator;Ljava/net/Proxy;Ljava/util/List;Ljava/util/List;Ljava/net/ProxySelector;)V` @kind direct;
  #L2190dc.  return v0 @kind object;
}
procedure `okhttp3.Request` `followUpRequest`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v11 @kind this, `okhttp3.Response` v12 @kind object @name `userResponse`, `okhttp3.Route` v13 @kind object @name `route`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.followUpRequest:(Lokhttp3/Response;Lokhttp3/Route;)Lokhttp3/Request;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L2190f0.  v3:= 0I;
  #L2190f2.  if v12 != 0 then goto L219102;
  #L2190f6.  v9:= new `java.lang.IllegalStateException`;
  #L2190fa.  call `<init>`(v9) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L219100.  throw v9;
  #L219102.  call temp:= `code`(v12) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L219108.  v5:= temp;
  #L21910a.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L219110.  v9:= temp @kind object;
  #L219112.  call temp:= `method`(v9) @signature `Lokhttp3/Request;.method:()Ljava/lang/String;` @kind virtual;
  #L219118.  v2:= temp @kind object;
  #L21911a.  goto L21936c;
  #L219120.  return v3 @kind object;
  #L219122.  if v13 == 0 then goto L21914e;
  #L219126.  call temp:= `proxy`(v13) @signature `Lokhttp3/Route;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L21912c.  v7:= temp @kind object;
  #L21912e.  call temp:= `type`(v7) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L219134.  v9:= temp @kind object;
  #L219136.  v10:= `@@java.net.Proxy$Type.HTTP` @type ^`java.net.Proxy$Type` @kind object;
  #L21913a.  if v9 == v10 then goto L21915c;
  #L21913e.  v9:= new `java.net.ProtocolException`;
  #L219142.  v10:= "Received HTTP_PROXY_AUTH (407) code while not using proxy" @kind object;
  #L219146.  call `<init>`(v9, v10) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L21914c.  throw v9;
  #L21914e.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L219152.  call temp:= `proxy`(v9) @signature `Lokhttp3/OkHttpClient;.proxy:()Ljava/net/Proxy;` @kind virtual;
  #L219158.  v7:= temp @kind object;
  #L21915a.  goto L21912e;
  #L21915c.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L219160.  call temp:= `proxyAuthenticator`(v9) @signature `Lokhttp3/OkHttpClient;.proxyAuthenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L219166.  v9:= temp @kind object;
  #L219168.  call temp:= `authenticate`(v9, v13, v12) @signature `Lokhttp3/Authenticator;.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;` @kind interface;
  #L21916e.  v3:= temp @kind object;
  #L219170.  goto L219120;
  #L219172.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L219176.  call temp:= `authenticator`(v9) @signature `Lokhttp3/OkHttpClient;.authenticator:()Lokhttp3/Authenticator;` @kind virtual;
  #L21917c.  v9:= temp @kind object;
  #L21917e.  call temp:= `authenticate`(v9, v13, v12) @signature `Lokhttp3/Authenticator;.authenticate:(Lokhttp3/Route;Lokhttp3/Response;)Lokhttp3/Request;` @kind interface;
  #L219184.  v3:= temp @kind object;
  #L219186.  goto L219120;
  #L219188.  v9:= "GET" @kind object;
  #L21918c.  call temp:= `equals`(v2, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L219192.  v9:= temp;
  #L219194.  if v9 != 0 then goto L2191a8;
  #L219198.  v9:= "HEAD" @kind object;
  #L21919c.  call temp:= `equals`(v2, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2191a2.  v9:= temp;
  #L2191a4.  if v9 == 0 then goto L219120;
  #L2191a8.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2191ac.  call temp:= `followRedirects`(v9) @signature `Lokhttp3/OkHttpClient;.followRedirects:()Z` @kind virtual;
  #L2191b2.  v9:= temp;
  #L2191b4.  if v9 == 0 then goto L219120;
  #L2191b8.  v9:= "Location" @kind object;
  #L2191bc.  call temp:= `header`(v12, v9) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L2191c2.  v0:= temp @kind object;
  #L2191c4.  if v0 == 0 then goto L219120;
  #L2191c8.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2191ce.  v9:= temp @kind object;
  #L2191d0.  call temp:= `url`(v9) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2191d6.  v9:= temp @kind object;
  #L2191d8.  call temp:= `resolve`(v9, v0) @signature `Lokhttp3/HttpUrl;.resolve:(Ljava/lang/String;)Lokhttp3/HttpUrl;` @kind virtual;
  #L2191de.  v8:= temp @kind object;
  #L2191e0.  if v8 == 0 then goto L219120;
  #L2191e4.  call temp:= `scheme`(v8) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L2191ea.  v9:= temp @kind object;
  #L2191ec.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2191f2.  v10:= temp @kind object;
  #L2191f4.  call temp:= `url`(v10) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2191fa.  v10:= temp @kind object;
  #L2191fc.  call temp:= `scheme`(v10) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L219202.  v10:= temp @kind object;
  #L219204.  call temp:= `equals`(v9, v10) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L21920a.  v6:= temp;
  #L21920c.  if v6 != 0 then goto L219220;
  #L219210.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L219214.  call temp:= `followSslRedirects`(v9) @signature `Lokhttp3/OkHttpClient;.followSslRedirects:()Z` @kind virtual;
  #L21921a.  v9:= temp;
  #L21921c.  if v9 == 0 then goto L219120;
  #L219220.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L219226.  v9:= temp @kind object;
  #L219228.  call temp:= `newBuilder`(v9) @signature `Lokhttp3/Request;.newBuilder:()Lokhttp3/Request$Builder;` @kind virtual;
  #L21922e.  v4:= temp @kind object;
  #L219230.  call temp:= `permitsRequestBody`(v2) @signature `Lokhttp3/internal/http/HttpMethod;.permitsRequestBody:(Ljava/lang/String;)Z` @kind static;
  #L219236.  v9:= temp;
  #L219238.  if v9 == 0 then goto L21927c;
  #L21923c.  call temp:= `redirectsWithBody`(v2) @signature `Lokhttp3/internal/http/HttpMethod;.redirectsWithBody:(Ljava/lang/String;)Z` @kind static;
  #L219242.  v1:= temp;
  #L219244.  call temp:= `redirectsToGet`(v2) @signature `Lokhttp3/internal/http/HttpMethod;.redirectsToGet:(Ljava/lang/String;)Z` @kind static;
  #L21924a.  v9:= temp;
  #L21924c.  if v9 == 0 then goto L2192a6;
  #L219250.  v9:= "GET" @kind object;
  #L219254.  call temp:= `method`(v4, v9, v3) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L21925a.  if v1 != 0 then goto L21927c;
  #L21925e.  v9:= "Transfer-Encoding" @kind object;
  #L219262.  call temp:= `removeHeader`(v4, v9) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L219268.  v9:= "Content-Length" @kind object;
  #L21926c.  call temp:= `removeHeader`(v4, v9) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L219272.  v9:= "Content-Type" @kind object;
  #L219276.  call temp:= `removeHeader`(v4, v9) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L21927c.  call temp:= `sameConnection`(v11, v12, v8) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @kind direct;
  #L219282.  v9:= temp;
  #L219284.  if v9 != 0 then goto L219292;
  #L219288.  v9:= "Authorization" @kind object;
  #L21928c.  call temp:= `removeHeader`(v4, v9) @signature `Lokhttp3/Request$Builder;.removeHeader:(Ljava/lang/String;)Lokhttp3/Request$Builder;` @kind virtual;
  #L219292.  call temp:= `url`(v4, v8) @signature `Lokhttp3/Request$Builder;.url:(Lokhttp3/HttpUrl;)Lokhttp3/Request$Builder;` @kind virtual;
  #L219298.  v9:= temp @kind object;
  #L21929a.  call temp:= `build`(v9) @signature `Lokhttp3/Request$Builder;.build:()Lokhttp3/Request;` @kind virtual;
  #L2192a0.  v3:= temp @kind object;
  #L2192a2.  goto L219120;
  #L2192a6.  if v1 == 0 then goto L2192ba;
  #L2192aa.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2192b0.  v9:= temp @kind object;
  #L2192b2.  call temp:= `body`(v9) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L2192b8.  v3:= temp @kind object;
  #L2192ba.  call temp:= `method`(v4, v2, v3) @signature `Lokhttp3/Request$Builder;.method:(Ljava/lang/String;Lokhttp3/RequestBody;)Lokhttp3/Request$Builder;` @kind virtual;
  #L2192c0.  goto L21925a;
  #L2192c2.  v9:= v11.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L2192c6.  call temp:= `retryOnConnectionFailure`(v9) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @kind virtual;
  #L2192cc.  v9:= temp;
  #L2192ce.  if v9 == 0 then goto L219120;
  #L2192d2.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2192d8.  v9:= temp @kind object;
  #L2192da.  call temp:= `body`(v9) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L2192e0.  v9:= temp @kind object;
  #L2192e2.  v9:= instanceof @variable v9 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L2192e6.  if v9 != 0 then goto L219120;
  #L2192ea.  call temp:= `priorResponse`(v12) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L2192f0.  v9:= temp @kind object;
  #L2192f2.  if v9 == 0 then goto L21930e;
  #L2192f6.  call temp:= `priorResponse`(v12) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L2192fc.  v9:= temp @kind object;
  #L2192fe.  call temp:= `code`(v9) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L219304.  v9:= temp;
  #L219306.  v10:= 408I;
  #L21930a.  if v9 == v10 then goto L219120;
  #L21930e.  v9:= 0I;
  #L219310.  call temp:= `retryAfter`(v11, v12, v9) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.retryAfter:(Lokhttp3/Response;I)I` @kind direct;
  #L219316.  v9:= temp;
  #L219318.  if v9 > 0 then goto L219120;
  #L21931c.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L219322.  v3:= temp @kind object;
  #L219324.  goto L219120;
  #L219328.  call temp:= `priorResponse`(v12) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L21932e.  v9:= temp @kind object;
  #L219330.  if v9 == 0 then goto L21934c;
  #L219334.  call temp:= `priorResponse`(v12) @signature `Lokhttp3/Response;.priorResponse:()Lokhttp3/Response;` @kind virtual;
  #L21933a.  v9:= temp @kind object;
  #L21933c.  call temp:= `code`(v9) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L219342.  v9:= temp;
  #L219344.  v10:= 503I;
  #L219348.  if v9 == v10 then goto L219120;
  #L21934c.  v9:= 2147483647I;
  #L219352.  call temp:= `retryAfter`(v11, v12, v9) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.retryAfter:(Lokhttp3/Response;I)I` @kind direct;
  #L219358.  v9:= temp;
  #L21935a.  if v9 != 0 then goto L219120;
  #L21935e.  call temp:= `request`(v12) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L219364.  v3:= temp @kind object;
  #L219366.  goto L219120;
  #L21936a.  
  #L21936c.  switch v5
                  | 300 => goto L2191a8
                  | 301 => goto L2191a8
                  | 302 => goto L2191a8
                  | 303 => goto L2191a8
                  | 307 => goto L219188
                  | 308 => goto L219188
                  | 401 => goto L219172
                  | 407 => goto L219122
                  | 408 => goto L2192c2
                  | 503 => goto L219328
                  | else => goto L219120;
}
procedure `boolean` `isRecoverable`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v3 @kind this, `java.io.IOException` v4 @kind object @name `e`, `boolean` v5 @name `requestSendStarted`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isRecoverable:(Ljava/io/IOException;Z)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2193d0.  v0:= 1I;
  #L2193d2.  v1:= 0I;
  #L2193d4.  v2:= instanceof @variable v4 @type ^`java.net.ProtocolException` @kind boolean;
  #L2193d8.  if v2 == 0 then goto L2193de;
  #L2193dc.  return v1;
  #L2193de.  v2:= instanceof @variable v4 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L2193e2.  if v2 == 0 then goto L2193fa;
  #L2193e6.  v2:= instanceof @variable v4 @type ^`java.net.SocketTimeoutException` @kind boolean;
  #L2193ea.  if v2 == 0 then goto L2193f6;
  #L2193ee.  if v5 != 0 then goto L2193f6;
  #L2193f2.  v1:= v0;
  #L2193f4.  goto L2193dc;
  #L2193f6.  v0:= v1;
  #L2193f8.  goto L2193f2;
  #L2193fa.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L2193fe.  if v2 == 0 then goto L219412;
  #L219402.  call temp:= `getCause`(v4) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L219408.  v2:= temp @kind object;
  #L21940a.  v2:= instanceof @variable v2 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L21940e.  if v2 != 0 then goto L2193dc;
  #L219412.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L219416.  if v2 != 0 then goto L2193dc;
  #L21941a.  v1:= v0;
  #L21941c.  goto L2193dc;
}
procedure `boolean` `recover`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v2 @kind this, `java.io.IOException` v3 @kind object @name `e`, `okhttp3.internal.connection.StreamAllocation` v4 @kind object @name `streamAllocation`, `boolean` v5 @name `requestSendStarted`, `okhttp3.Request` v6 @kind object @name `userRequest`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;Lokhttp3/internal/connection/StreamAllocation;ZLokhttp3/Request;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L219430.  v0:= 0I;
  #L219432.  call `streamFailed`(v4, v3) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L219438.  v1:= v2.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21943c.  call temp:= `retryOnConnectionFailure`(v1) @signature `Lokhttp3/OkHttpClient;.retryOnConnectionFailure:()Z` @kind virtual;
  #L219442.  v1:= temp;
  #L219444.  if v1 != 0 then goto L21944a;
  #L219448.  return v0;
  #L21944a.  if v5 == 0 then goto L21945e;
  #L21944e.  call temp:= `body`(v6) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L219454.  v1:= temp @kind object;
  #L219456.  v1:= instanceof @variable v1 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L21945a.  if v1 != 0 then goto L219448;
  #L21945e.  call temp:= `isRecoverable`(v2, v3, v5) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isRecoverable:(Ljava/io/IOException;Z)Z` @kind direct;
  #L219464.  v1:= temp;
  #L219466.  if v1 == 0 then goto L219448;
  #L21946a.  call temp:= `hasMoreRoutes`(v4) @signature `Lokhttp3/internal/connection/StreamAllocation;.hasMoreRoutes:()Z` @kind virtual;
  #L219470.  v1:= temp;
  #L219472.  if v1 == 0 then goto L219448;
  #L219476.  v0:= 1I;
  #L219478.  goto L219448;
}
procedure `int` `retryAfter`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v2 @kind this, `okhttp3.Response` v3 @kind object @name `userResponse`, `int` v4 @name `defaultDelay`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.retryAfter:(Lokhttp3/Response;I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L21948c.  v1:= "Retry-After" @kind object;
  #L219490.  call temp:= `header`(v3, v1) @signature `Lokhttp3/Response;.header:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L219496.  v0:= temp @kind object;
  #L219498.  if v0 != 0 then goto L21949e;
  #L21949c.  return v4;
  #L21949e.  v1:= "\\d+" @kind object;
  #L2194a2.  call temp:= `matches`(v0, v1) @signature `Ljava/lang/String;.matches:(Ljava/lang/String;)Z` @kind virtual;
  #L2194a8.  v1:= temp;
  #L2194aa.  if v1 == 0 then goto L2194c0;
  #L2194ae.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(Ljava/lang/String;)Ljava/lang/Integer;` @kind static;
  #L2194b4.  v1:= temp @kind object;
  #L2194b6.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L2194bc.  v4:= temp;
  #L2194be.  goto L21949c;
  #L2194c0.  v4:= 2147483647I;
  #L2194c6.  goto L21949c;
}
procedure `boolean` `sameConnection`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v3 @kind this, `okhttp3.Response` v4 @kind object @name `response`, `okhttp3.HttpUrl` v5 @kind object @name `followUp`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L2194d8.  call temp:= `request`(v4) @signature `Lokhttp3/Response;.request:()Lokhttp3/Request;` @kind virtual;
  #L2194de.  v1:= temp @kind object;
  #L2194e0.  call temp:= `url`(v1) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2194e6.  v0:= temp @kind object;
  #L2194e8.  call temp:= `host`(v0) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L2194ee.  v1:= temp @kind object;
  #L2194f0.  call temp:= `host`(v5) @signature `Lokhttp3/HttpUrl;.host:()Ljava/lang/String;` @kind virtual;
  #L2194f6.  v2:= temp @kind object;
  #L2194f8.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L2194fe.  v1:= temp;
  #L219500.  if v1 == 0 then goto L219538;
  #L219504.  call temp:= `port`(v0) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L21950a.  v1:= temp;
  #L21950c.  call temp:= `port`(v5) @signature `Lokhttp3/HttpUrl;.port:()I` @kind virtual;
  #L219512.  v2:= temp;
  #L219514.  if v1 != v2 then goto L219538;
  #L219518.  call temp:= `scheme`(v0) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L21951e.  v1:= temp @kind object;
  #L219520.  call temp:= `scheme`(v5) @signature `Lokhttp3/HttpUrl;.scheme:()Ljava/lang/String;` @kind virtual;
  #L219526.  v2:= temp @kind object;
  #L219528.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L21952e.  v1:= temp;
  #L219530.  if v1 == 0 then goto L219538;
  #L219534.  v1:= 1I;
  #L219536.  return v1;
  #L219538.  v1:= 0I;
  #L21953a.  goto L219536;
}
procedure `void` `cancel`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v2 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.cancel:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L21954c.  v1:= 1I;
  #L21954e.  v2.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` := v1 @kind boolean;
  #L219552.  v0:= v2.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L219556.  if v0 == 0 then goto L219560;
  #L21955a.  call `cancel`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.cancel:()V` @kind virtual;
  #L219560.  return @kind void;
}
procedure `okhttp3.Response` `intercept`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v15 @kind this, `okhttp3.Interceptor$Chain` v16 @kind object @name `chain`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.intercept:(Lokhttp3/Interceptor$Chain;)Lokhttp3/Response;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L219574.  call temp:= `request`(v16) @signature `Lokhttp3/Interceptor$Chain;.request:()Lokhttp3/Request;` @kind interface;
  #L21957a.  v12:= temp @kind object;
  #L21957c.  v10:= v16 @kind object;
  #L219580.  v10:= (`okhttp3.internal.http.RealInterceptorChain`) v10 @kind object;
  #L219584.  call temp:= `call`(v10) @signature `Lokhttp3/internal/http/RealInterceptorChain;.call:()Lokhttp3/Call;` @kind virtual;
  #L21958a.  v3:= temp @kind object;
  #L21958c.  call temp:= `eventListener`(v10) @signature `Lokhttp3/internal/http/RealInterceptorChain;.eventListener:()Lokhttp3/EventListener;` @kind virtual;
  #L219592.  v4:= temp @kind object;
  #L219594.  v0:= new `okhttp3.internal.connection.StreamAllocation`;
  #L219598.  v1:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L21959c.  call temp:= `connectionPool`(v1) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @kind virtual;
  #L2195a2.  v1:= temp @kind object;
  #L2195a4.  call temp:= `url`(v12) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L2195aa.  v2:= temp @kind object;
  #L2195ac.  call temp:= `createAddress`(v15, v2) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @kind direct;
  #L2195b2.  v2:= temp @kind object;
  #L2195b4.  v5:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` @kind object;
  #L2195b8.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/connection/StreamAllocation;.<init>:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/Call;Lokhttp3/EventListener;Ljava/lang/Object;)V` @kind direct;
  #L2195be.  v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v0 @kind object;
  #L2195c2.  v8:= 0I;
  #L2195c4.  v9:= 0I;
  #L2195c6.  v1:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` @kind boolean;
  #L2195ca.  if v1 == 0 then goto L2195e4;
  #L2195ce.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L2195d4.  v1:= new `java.io.IOException`;
  #L2195d8.  v2:= "Canceled" @kind object;
  #L2195dc.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2195e2.  throw v1;
  #L2195e4.  v11:= 1I;
  #L2195e6.  v1:= 0I;
  #L2195e8.  v2:= 0I;
  #Try_start0.  
  #L2195ea.  call temp:= `proceed`(v10, v12, v0, v1, v2) @signature `Lokhttp3/internal/http/RealInterceptorChain;.proceed:(Lokhttp3/Request;Lokhttp3/internal/connection/StreamAllocation;Lokhttp3/internal/http/HttpCodec;Lokhttp3/internal/connection/RealConnection;)Lokhttp3/Response;` @kind virtual;
  #Try_end0.  
  #L2195f0.  v14:= temp @kind object;
  #L2195f2.  v11:= 0I;
  #L2195f4.  if v11 == 0 then goto L219606;
  #L2195f8.  v1:= 0I;
  #L2195fa.  call `streamFailed`(v0, v1) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L219600.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L219606.  if v9 == 0 then goto L21963c;
  #L21960a.  call temp:= `newBuilder`(v14) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L219610.  v1:= temp @kind object;
  #L219612.  call temp:= `newBuilder`(v9) @signature `Lokhttp3/Response;.newBuilder:()Lokhttp3/Response$Builder;` @kind virtual;
  #L219618.  v2:= temp @kind object;
  #L21961a.  v5:= 0I;
  #L21961c.  call temp:= `body`(v2, v5) @signature `Lokhttp3/Response$Builder;.body:(Lokhttp3/ResponseBody;)Lokhttp3/Response$Builder;` @kind virtual;
  #L219622.  v2:= temp @kind object;
  #L219624.  call temp:= `build`(v2) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L21962a.  v2:= temp @kind object;
  #L21962c.  call temp:= `priorResponse`(v1, v2) @signature `Lokhttp3/Response$Builder;.priorResponse:(Lokhttp3/Response;)Lokhttp3/Response$Builder;` @kind virtual;
  #L219632.  v1:= temp @kind object;
  #L219634.  call temp:= `build`(v1) @signature `Lokhttp3/Response$Builder;.build:()Lokhttp3/Response;` @kind virtual;
  #L21963a.  v14:= temp @kind object;
  #L21963c.  call temp:= `route`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.route:()Lokhttp3/Route;` @kind virtual;
  #L219642.  v1:= temp @kind object;
  #L219644.  call temp:= `followUpRequest`(v15, v14, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.followUpRequest:(Lokhttp3/Response;Lokhttp3/Route;)Lokhttp3/Request;` @kind direct;
  #L21964a.  v7:= temp @kind object;
  #L21964c.  if v7 != 0 then goto L2196e4;
  #L219650.  v1:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.forWebSocket` @type ^`boolean` @kind boolean;
  #L219654.  if v1 != 0 then goto L21965e;
  #L219658.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L21965e.  return v14 @kind object;
  #L219660.  v6:= Exception @type ^`okhttp3.internal.connection.RouteException` @kind object;
  #Try_start1.  
  #L219662.  call temp:= `getLastConnectException`(v6) @signature `Lokhttp3/internal/connection/RouteException;.getLastConnectException:()Ljava/io/IOException;` @kind virtual;
  #L219668.  v1:= temp @kind object;
  #L21966a.  v2:= 0I;
  #L21966c.  call temp:= `recover`(v15, v1, v0, v2, v12) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;Lokhttp3/internal/connection/StreamAllocation;ZLokhttp3/Request;)Z` @kind direct;
  #L219672.  v1:= temp;
  #L219674.  if v1 != 0 then goto L219698;
  #L219678.  call temp:= `getLastConnectException`(v6) @signature `Lokhttp3/internal/connection/RouteException;.getLastConnectException:()Ljava/io/IOException;` @kind virtual;
  #L21967e.  v1:= temp @kind object;
  #L219680.  throw v1;
  #Try_end1.  
  #L219682.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L219684.  if v11 == 0 then goto L219696;
  #L219688.  v2:= 0I;
  #L21968a.  call `streamFailed`(v0, v2) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L219690.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L219696.  throw v1;
  #L219698.  v11:= 0I;
  #L21969a.  if v11 == 0 then goto L2195c6;
  #L21969e.  v1:= 0I;
  #L2196a0.  call `streamFailed`(v0, v1) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L2196a6.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L2196ac.  goto L2195c6;
  #L2196ae.  v6:= Exception @type ^`java.io.IOException` @kind object;
  #Try_start2.  
  #L2196b0.  v1:= instanceof @variable v6 @type ^`okhttp3.internal.http2.ConnectionShutdownException` @kind boolean;
  #L2196b4.  if v1 != 0 then goto L2196c8;
  #L2196b8.  v13:= 1I;
  #L2196ba.  call temp:= `recover`(v15, v6, v0, v13, v12) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.recover:(Ljava/io/IOException;Lokhttp3/internal/connection/StreamAllocation;ZLokhttp3/Request;)Z` @kind direct;
  #L2196c0.  v1:= temp;
  #L2196c2.  if v1 != 0 then goto L2196cc;
  #L2196c6.  throw v6;
  #Try_end2.  
  #L2196c8.  v13:= 0I;
  #L2196ca.  goto L2196ba;
  #L2196cc.  v11:= 0I;
  #L2196ce.  if v11 == 0 then goto L2195c6;
  #L2196d2.  v1:= 0I;
  #L2196d4.  call `streamFailed`(v0, v1) @signature `Lokhttp3/internal/connection/StreamAllocation;.streamFailed:(Ljava/io/IOException;)V` @kind virtual;
  #L2196da.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L2196e0.  goto L2195c6;
  #L2196e4.  call temp:= `body`(v14) @signature `Lokhttp3/Response;.body:()Lokhttp3/ResponseBody;` @kind virtual;
  #L2196ea.  v1:= temp @kind object;
  #L2196ec.  call `closeQuietly`(v1) @signature `Lokhttp3/internal/Util;.closeQuietly:(Ljava/io/Closeable;)V` @kind static;
  #L2196f2.  v8:= v8 + 1;
  #L2196f6.  v1:= 20I;
  #L2196fa.  if v8 <= v1 then goto L219736;
  #L2196fe.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L219704.  v1:= new `java.net.ProtocolException`;
  #L219708.  v2:= new `java.lang.StringBuilder`;
  #L21970c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L219712.  v5:= "Too many follow-up requests: " @kind object;
  #L219716.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L21971c.  v2:= temp @kind object;
  #L21971e.  call temp:= `append`(v2, v8) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L219724.  v2:= temp @kind object;
  #L219726.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L21972c.  v2:= temp @kind object;
  #L21972e.  call `<init>`(v1, v2) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L219734.  throw v1;
  #L219736.  call temp:= `body`(v7) @signature `Lokhttp3/Request;.body:()Lokhttp3/RequestBody;` @kind virtual;
  #L21973c.  v1:= temp @kind object;
  #L21973e.  v1:= instanceof @variable v1 @type ^`okhttp3.internal.http.UnrepeatableRequestBody` @kind boolean;
  #L219742.  if v1 == 0 then goto L219764;
  #L219746.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L21974c.  v1:= new `java.net.HttpRetryException`;
  #L219750.  v2:= "Cannot retry streamed HTTP body" @kind object;
  #L219754.  call temp:= `code`(v14) @signature `Lokhttp3/Response;.code:()I` @kind virtual;
  #L21975a.  v5:= temp;
  #L21975c.  call `<init>`(v1, v2, v5) @signature `Ljava/net/HttpRetryException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L219762.  throw v1;
  #L219764.  call temp:= `url`(v7) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L21976a.  v1:= temp @kind object;
  #L21976c.  call temp:= `sameConnection`(v15, v14, v1) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.sameConnection:(Lokhttp3/Response;Lokhttp3/HttpUrl;)Z` @kind direct;
  #L219772.  v1:= temp;
  #L219774.  if v1 != 0 then goto L2197b4;
  #L219778.  call `release`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.release:()V` @kind virtual;
  #L21977e.  v0:= new `okhttp3.internal.connection.StreamAllocation`;
  #L219782.  v1:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.client` @type ^`okhttp3.OkHttpClient` @kind object;
  #L219786.  call temp:= `connectionPool`(v1) @signature `Lokhttp3/OkHttpClient;.connectionPool:()Lokhttp3/ConnectionPool;` @kind virtual;
  #L21978c.  v1:= temp @kind object;
  #L21978e.  call temp:= `url`(v7) @signature `Lokhttp3/Request;.url:()Lokhttp3/HttpUrl;` @kind virtual;
  #L219794.  v2:= temp @kind object;
  #L219796.  call temp:= `createAddress`(v15, v2) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.createAddress:(Lokhttp3/HttpUrl;)Lokhttp3/Address;` @kind direct;
  #L21979c.  v2:= temp @kind object;
  #L21979e.  v5:= v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` @kind object;
  #L2197a2.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lokhttp3/internal/connection/StreamAllocation;.<init>:(Lokhttp3/ConnectionPool;Lokhttp3/Address;Lokhttp3/Call;Lokhttp3/EventListener;Ljava/lang/Object;)V` @kind direct;
  #L2197a8.  v15.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` := v0 @kind object;
  #L2197ac.  v12:= v7 @kind object;
  #L2197ae.  v9:= v14 @kind object;
  #L2197b0.  goto L2195c6;
  #L2197b4.  call temp:= `codec`(v0) @signature `Lokhttp3/internal/connection/StreamAllocation;.codec:()Lokhttp3/internal/http/HttpCodec;` @kind virtual;
  #L2197ba.  v1:= temp @kind object;
  #L2197bc.  if v1 == 0 then goto L2197ac;
  #L2197c0.  v1:= new `java.lang.IllegalStateException`;
  #L2197c4.  v2:= new `java.lang.StringBuilder`;
  #L2197c8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L2197ce.  v5:= "Closing the body of " @kind object;
  #L2197d2.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2197d8.  v2:= temp @kind object;
  #L2197da.  call temp:= `append`(v2, v14) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2197e0.  v2:= temp @kind object;
  #L2197e2.  v5:= " didn't close its backing stream. Bad interceptor?" @kind object;
  #L2197e6.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L2197ec.  v2:= temp @kind object;
  #L2197ee.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L2197f4.  v2:= temp @kind object;
  #L2197f6.  call `<init>`(v1, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L2197fc.  throw v1;
  catch `okhttp3.internal.connection.RouteException` @[Try_start0..Try_end0] goto L219660;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L2196ae;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L219682;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L219682;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L219682;
}
procedure `boolean` `isCanceled`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.isCanceled:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L219838.  v0:= v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.canceled` @type ^`boolean` @kind boolean;
  #L21983c.  return v0;
}
procedure `void` `setCallStackTrace`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v0 @kind this, `java.lang.Object` v1 @kind object @name `callStackTrace`) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.setCallStackTrace:(Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L219850.  v0.`okhttp3.internal.http.RetryAndFollowUpInterceptor.callStackTrace` @type ^`java.lang.Object` := v1 @kind object;
  #L219854.  return @kind void;
}
procedure `okhttp3.internal.connection.StreamAllocation` `streamAllocation`(`okhttp3.internal.http.RetryAndFollowUpInterceptor` v1 @kind this) @signature `Lokhttp3/internal/http/RetryAndFollowUpInterceptor;.streamAllocation:()Lokhttp3/internal/connection/StreamAllocation;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L219868.  v0:= v1.`okhttp3.internal.http.RetryAndFollowUpInterceptor.streamAllocation` @type ^`okhttp3.internal.connection.StreamAllocation` @kind object;
  #L21986c.  return v0 @kind object;
}
