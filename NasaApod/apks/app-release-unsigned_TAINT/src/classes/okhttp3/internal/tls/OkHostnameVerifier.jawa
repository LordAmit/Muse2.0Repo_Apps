record `okhttp3.internal.tls.OkHostnameVerifier` @kind class @AccessFlag PUBLIC_FINAL extends `javax.net.ssl.HostnameVerifier` @kind interface {
}
global `int` `@@okhttp3.internal.tls.OkHostnameVerifier.ALT_DNS_NAME` @AccessFlag PRIVATE_STATIC_FINAL;
global `int` `@@okhttp3.internal.tls.OkHostnameVerifier.ALT_IPA_NAME` @AccessFlag PRIVATE_STATIC_FINAL;
global `okhttp3.internal.tls.OkHostnameVerifier` `@@okhttp3.internal.tls.OkHostnameVerifier.INSTANCE` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1abb64.  v0:= new `okhttp3.internal.tls.OkHostnameVerifier`;
  #L1abb68.  call `<init>`(v0) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.<init>:()V` @kind direct;
  #L1abb6e.  `@@okhttp3.internal.tls.OkHostnameVerifier.INSTANCE` @type ^`okhttp3.internal.tls.OkHostnameVerifier` := v0 @kind object;
  #L1abb72.  return @kind void;
}
procedure `void` `<init>`(`okhttp3.internal.tls.OkHostnameVerifier` v0 @kind this) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1abb84.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1abb8a.  return @kind void;
}
procedure `java.util.List` `allSubjectAltNames`(`java.security.cert.X509Certificate` v5 @kind object @name `certificate`) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.allSubjectAltNames:(Ljava/security/cert/X509Certificate;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1abb9c.  v3:= 7I;
  #L1abb9e.  call temp:= `getSubjectAltNames`(v5, v3) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.getSubjectAltNames:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L1abba4.  v1:= temp @kind object;
  #L1abba6.  v3:= 2I;
  #L1abba8.  call temp:= `getSubjectAltNames`(v5, v3) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.getSubjectAltNames:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L1abbae.  v0:= temp @kind object;
  #L1abbb0.  v2:= new `java.util.ArrayList`;
  #L1abbb4.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1abbba.  v3:= temp;
  #L1abbbc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1abbc2.  v4:= temp;
  #L1abbc4.  v3:= v3 + v4 @kind int;
  #L1abbc6.  call `<init>`(v2, v3) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L1abbcc.  call temp:= `addAll`(v2, v1) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1abbd2.  call temp:= `addAll`(v2, v0) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L1abbd8.  return v2 @kind object;
}
procedure `java.util.List` `getSubjectAltNames`(`java.security.cert.X509Certificate` v11 @kind object @name `certificate`, `int` v12 @name `type`) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.getSubjectAltNames:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L1abbec.  v5:= new `java.util.ArrayList`;
  #L1abbf0.  call `<init>`(v5) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #Try_start0.  
  #L1abbf6.  call temp:= `getSubjectAlternativeNames`(v11) @signature `Ljava/security/cert/X509Certificate;.getSubjectAlternativeNames:()Ljava/util/Collection;` @kind virtual;
  #L1abbfc.  v7:= temp @kind object;
  #L1abbfe.  if v7 != 0 then goto L1abc0c;
  #L1abc02.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L1abc08.  v5:= temp @kind object;
  #L1abc0a.  return v5 @kind object;
  #L1abc0c.  call temp:= `iterator`(v7) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1abc12.  v8:= temp @kind object;
  #L1abc14.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1abc1a.  v9:= temp;
  #L1abc1c.  if v9 == 0 then goto L1abc0a;
  #L1abc20.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1abc26.  v6:= temp @kind object;
  #L1abc28.  v0:= v6 @kind object;
  #L1abc2a.  v0:= (`java.util.List`) v0 @kind object;
  #L1abc2e.  v4:= v0 @kind object;
  #L1abc30.  if v4 == 0 then goto L1abc14;
  #L1abc34.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1abc3a.  v9:= temp;
  #L1abc3c.  v10:= 2I;
  #L1abc3e.  if v9 < v10 then goto L1abc14;
  #L1abc42.  v9:= 0I;
  #L1abc44.  call temp:= `get`(v4, v9) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1abc4a.  v2:= temp @kind object;
  #L1abc4c.  v2:= (`java.lang.Integer`) v2 @kind object;
  #L1abc50.  if v2 == 0 then goto L1abc14;
  #L1abc54.  call temp:= `intValue`(v2) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1abc5a.  v9:= temp;
  #L1abc5c.  if v9 != v12 then goto L1abc14;
  #L1abc60.  v9:= 1I;
  #L1abc62.  call temp:= `get`(v4, v9) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1abc68.  v1:= temp @kind object;
  #L1abc6a.  v1:= (`java.lang.String`) v1 @kind object;
  #L1abc6e.  if v1 == 0 then goto L1abc14;
  #L1abc72.  call temp:= `add`(v5, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #Try_end0.  
  #L1abc78.  goto L1abc14;
  #L1abc7a.  v3:= Exception @type ^`java.security.cert.CertificateParsingException` @kind object;
  #L1abc7c.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L1abc82.  v5:= temp @kind object;
  #L1abc84.  goto L1abc0a;
  catch `java.security.cert.CertificateParsingException` @[Try_start0..Try_end0] goto L1abc7a;
}
procedure `boolean` `verifyHostname`(`okhttp3.internal.tls.OkHostnameVerifier` v4 @kind this, `java.lang.String` v5 @kind object @name `hostname`, `java.security.cert.X509Certificate` v6 @kind object @name `certificate`) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verifyHostname:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1abca8.  v2:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L1abcac.  call temp:= `toLowerCase`(v5, v2) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L1abcb2.  v5:= temp @kind object;
  #L1abcb4.  v2:= 2I;
  #L1abcb6.  call temp:= `getSubjectAltNames`(v6, v2) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.getSubjectAltNames:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L1abcbc.  v1:= temp @kind object;
  #L1abcbe.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1abcc4.  v2:= temp @kind object;
  #L1abcc6.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1abccc.  v3:= temp;
  #L1abcce.  if v3 == 0 then goto L1abcee;
  #L1abcd2.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1abcd8.  v0:= temp @kind object;
  #L1abcda.  v0:= (`java.lang.String`) v0 @kind object;
  #L1abcde.  call temp:= `verifyHostname`(v4, v5, v0) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verifyHostname:(Ljava/lang/String;Ljava/lang/String;)Z` @kind virtual;
  #L1abce4.  v3:= temp;
  #L1abce6.  if v3 == 0 then goto L1abcc6;
  #L1abcea.  v2:= 1I;
  #L1abcec.  return v2;
  #L1abcee.  v2:= 0I;
  #L1abcf0.  goto L1abcec;
}
procedure `boolean` `verifyIpAddress`(`okhttp3.internal.tls.OkHostnameVerifier` v4 @kind this, `java.lang.String` v5 @kind object @name `ipAddress`, `java.security.cert.X509Certificate` v6 @kind object @name `certificate`) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verifyIpAddress:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1abd04.  v3:= 7I;
  #L1abd06.  call temp:= `getSubjectAltNames`(v6, v3) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.getSubjectAltNames:(Ljava/security/cert/X509Certificate;I)Ljava/util/List;` @kind static;
  #L1abd0c.  v0:= temp @kind object;
  #L1abd0e.  v1:= 0I;
  #L1abd10.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1abd16.  v2:= temp;
  #L1abd18.  if v1 >= v2 then goto L1abd3e;
  #L1abd1c.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1abd22.  v3:= temp @kind object;
  #L1abd24.  v3:= (`java.lang.String`) v3 @kind object;
  #L1abd28.  call temp:= `equalsIgnoreCase`(v5, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L1abd2e.  v3:= temp;
  #L1abd30.  if v3 == 0 then goto L1abd38;
  #L1abd34.  v3:= 1I;
  #L1abd36.  return v3;
  #L1abd38.  v1:= v1 + 1;
  #L1abd3c.  goto L1abd18;
  #L1abd3e.  v3:= 0I;
  #L1abd40.  goto L1abd36;
}
procedure `boolean` `verify`(`okhttp3.internal.tls.OkHostnameVerifier` v1 @kind this, `java.lang.String` v2 @kind object @name `host`, `java.security.cert.X509Certificate` v3 @kind object @name `certificate`) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verify:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1abd54.  call temp:= `verifyAsIpAddress`(v2) @signature `Lokhttp3/internal/Util;.verifyAsIpAddress:(Ljava/lang/String;)Z` @kind static;
  #L1abd5a.  v0:= temp;
  #L1abd5c.  if v0 == 0 then goto L1abd6a;
  #L1abd60.  call temp:= `verifyIpAddress`(v1, v2, v3) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verifyIpAddress:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L1abd66.  v0:= temp;
  #L1abd68.  return v0;
  #L1abd6a.  call temp:= `verifyHostname`(v1, v2, v3) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verifyHostname:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L1abd70.  v0:= temp;
  #L1abd72.  goto L1abd68;
}
procedure `boolean` `verify`(`okhttp3.internal.tls.OkHostnameVerifier` v4 @kind this, `java.lang.String` v5 @kind object @name `host`, `javax.net.ssl.SSLSession` v6 @kind object @name `session`) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verify:(Ljava/lang/String;Ljavax/net/ssl/SSLSession;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1abd84.  v3:= 0I;
  #Try_start0.  
  #L1abd86.  call temp:= `getPeerCertificates`(v6) @signature `Ljavax/net/ssl/SSLSession;.getPeerCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L1abd8c.  v0:= temp @kind object;
  #L1abd8e.  v2:= 0I;
  #L1abd90.  v2:= v0[v2] @kind object;
  #L1abd94.  v2:= (`java.security.cert.X509Certificate`) v2 @kind object;
  #L1abd98.  call temp:= `verify`(v4, v5, v2) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verify:(Ljava/lang/String;Ljava/security/cert/X509Certificate;)Z` @kind virtual;
  #Try_end0.  
  #L1abd9e.  v2:= temp;
  #L1abda0.  return v2;
  #L1abda2.  v1:= Exception @type ^`javax.net.ssl.SSLException` @kind object;
  #L1abda4.  v2:= v3;
  #L1abda6.  goto L1abda0;
  catch `javax.net.ssl.SSLException` @[Try_start0..Try_end0] goto L1abda2;
}
procedure `boolean` `verifyHostname`(`okhttp3.internal.tls.OkHostnameVerifier` v8 @kind this, `java.lang.String` v9 @kind object @name `hostname`, `java.lang.String` v10 @kind object @name `pattern`) @signature `Lokhttp3/internal/tls/OkHostnameVerifier;.verifyHostname:(Ljava/lang/String;Ljava/lang/String;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1abdc8.  v7:= -1I;
  #L1abdca.  v6:= 46I;
  #L1abdce.  v3:= 1I;
  #L1abdd0.  v2:= 0I;
  #L1abdd2.  if v9 == 0 then goto L1abe02;
  #L1abdd6.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1abddc.  v4:= temp;
  #L1abdde.  if v4 == 0 then goto L1abe02;
  #L1abde2.  v4:= "." @kind object;
  #L1abde6.  call temp:= `startsWith`(v9, v4) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1abdec.  v4:= temp;
  #L1abdee.  if v4 != 0 then goto L1abe02;
  #L1abdf2.  v4:= ".." @kind object;
  #L1abdf6.  call temp:= `endsWith`(v9, v4) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1abdfc.  v4:= temp;
  #L1abdfe.  if v4 == 0 then goto L1abe04;
  #L1abe02.  return v2;
  #L1abe04.  if v10 == 0 then goto L1abe02;
  #L1abe08.  call temp:= `length`(v10) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1abe0e.  v4:= temp;
  #L1abe10.  if v4 == 0 then goto L1abe02;
  #L1abe14.  v4:= "." @kind object;
  #L1abe18.  call temp:= `startsWith`(v10, v4) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1abe1e.  v4:= temp;
  #L1abe20.  if v4 != 0 then goto L1abe02;
  #L1abe24.  v4:= ".." @kind object;
  #L1abe28.  call temp:= `endsWith`(v10, v4) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1abe2e.  v4:= temp;
  #L1abe30.  if v4 != 0 then goto L1abe02;
  #L1abe34.  v4:= "." @kind object;
  #L1abe38.  call temp:= `endsWith`(v9, v4) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1abe3e.  v4:= temp;
  #L1abe40.  if v4 != 0 then goto L1abe66;
  #L1abe44.  v4:= new `java.lang.StringBuilder`;
  #L1abe48.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1abe4e.  call temp:= `append`(v4, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1abe54.  v4:= temp @kind object;
  #L1abe56.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1abe5c.  v4:= temp @kind object;
  #L1abe5e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1abe64.  v9:= temp @kind object;
  #L1abe66.  v4:= "." @kind object;
  #L1abe6a.  call temp:= `endsWith`(v10, v4) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1abe70.  v4:= temp;
  #L1abe72.  if v4 != 0 then goto L1abe98;
  #L1abe76.  v4:= new `java.lang.StringBuilder`;
  #L1abe7a.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1abe80.  call temp:= `append`(v4, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1abe86.  v4:= temp @kind object;
  #L1abe88.  call temp:= `append`(v4, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1abe8e.  v4:= temp @kind object;
  #L1abe90.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1abe96.  v10:= temp @kind object;
  #L1abe98.  v4:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L1abe9c.  call temp:= `toLowerCase`(v10, v4) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L1abea2.  v10:= temp @kind object;
  #L1abea4.  v4:= "*" @kind object;
  #L1abea8.  call temp:= `contains`(v10, v4) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L1abeae.  v4:= temp;
  #L1abeb0.  if v4 != 0 then goto L1abebe;
  #L1abeb4.  call temp:= `equals`(v9, v10) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1abeba.  v2:= temp;
  #L1abebc.  goto L1abe02;
  #L1abebe.  v4:= "*." @kind object;
  #L1abec2.  call temp:= `startsWith`(v10, v4) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1abec8.  v4:= temp;
  #L1abeca.  if v4 == 0 then goto L1abe02;
  #L1abece.  v4:= 42I;
  #L1abed2.  call temp:= `indexOf`(v10, v4, v3) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L1abed8.  v4:= temp;
  #L1abeda.  if v4 != v7 then goto L1abe02;
  #L1abede.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1abee4.  v4:= temp;
  #L1abee6.  call temp:= `length`(v10) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1abeec.  v5:= temp;
  #L1abeee.  if v4 < v5 then goto L1abe02;
  #L1abef2.  v4:= "*." @kind object;
  #L1abef6.  call temp:= `equals`(v4, v10) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1abefc.  v4:= temp;
  #L1abefe.  if v4 != 0 then goto L1abe02;
  #L1abf02.  call temp:= `substring`(v10, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L1abf08.  v0:= temp @kind object;
  #L1abf0a.  call temp:= `endsWith`(v9, v0) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L1abf10.  v4:= temp;
  #L1abf12.  if v4 == 0 then goto L1abe02;
  #L1abf16.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1abf1c.  v4:= temp;
  #L1abf1e.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1abf24.  v5:= temp;
  #L1abf26.  v1:= v4 - v5 @kind int;
  #L1abf2a.  if v1 <= 0 then goto L1abf3e;
  #L1abf2e.  v4:= v1 + -1;
  #L1abf32.  call temp:= `lastIndexOf`(v9, v6, v4) @signature `Ljava/lang/String;.lastIndexOf:(II)I` @kind virtual;
  #L1abf38.  v4:= temp;
  #L1abf3a.  if v4 != v7 then goto L1abe02;
  #L1abf3e.  v2:= v3;
  #L1abf40.  goto L1abe02;
}
