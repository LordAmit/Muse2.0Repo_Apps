record `com.iamtrk.a.a$o` @kind class @AccessFlag PUBLIC extends `com.iamtrk.a.a$j` @kind class {
}
procedure `void` `<init>`(`com.iamtrk.a.a$o` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/iamtrk/a/a$o;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L091174.  call `<init>`(v0, v1, v2) @signature `Lcom/iamtrk/a/a$j;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L09117a.  return @kind void;
}
procedure `java.util.List` `a`(`com.iamtrk.a.a$o` v6 @kind this) @signature `Lcom/iamtrk/a/a$o;.a:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L09118c.  v0:= new `java.util.ArrayList`;
  #L091190.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L091196.  call temp:= `getRuntime`() @signature `Ljava/lang/Runtime;.getRuntime:()Ljava/lang/Runtime;` @kind static;
  #L09119c.  v1:= temp @kind object;
  #L09119e.  v2:= new `com.iamtrk.a.a$k`;
  #L0911a2.  v3:= "availableProcessors" @kind object;
  #L0911a6.  call temp:= `availableProcessors`(v1) @signature `Ljava/lang/Runtime;.availableProcessors:()I` @kind virtual;
  #L0911ac.  v4:= temp;
  #L0911ae.  call `<init>`(v2, v3, v4) @signature `Lcom/iamtrk/a/a$k;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L0911b4.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0911ba.  v2:= new `com.iamtrk.a.a$k`;
  #L0911be.  v3:= "freeMemory" @kind object;
  #L0911c2.  call temp:= `freeMemory`(v1) @signature `Ljava/lang/Runtime;.freeMemory:()J` @kind virtual;
  #L0911c8.  v4:= temp @kind wide;
  #L0911ca.  call temp:= `a`(v4) @signature `Lcom/iamtrk/a/a;.a:(J)Ljava/lang/String;` @kind static;
  #L0911d0.  v4:= temp @kind object;
  #L0911d2.  call `<init>`(v2, v3, v4) @signature `Lcom/iamtrk/a/a$k;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L0911d8.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0911de.  v2:= new `com.iamtrk.a.a$k`;
  #L0911e2.  v3:= "totalMemory" @kind object;
  #L0911e6.  call temp:= `totalMemory`(v1) @signature `Ljava/lang/Runtime;.totalMemory:()J` @kind virtual;
  #L0911ec.  v4:= temp @kind wide;
  #L0911ee.  call temp:= `a`(v4) @signature `Lcom/iamtrk/a/a;.a:(J)Ljava/lang/String;` @kind static;
  #L0911f4.  v4:= temp @kind object;
  #L0911f6.  call `<init>`(v2, v3, v4) @signature `Lcom/iamtrk/a/a$k;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L0911fc.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L091202.  v2:= new `com.iamtrk.a.a$k`;
  #L091206.  v3:= "maxMemory" @kind object;
  #L09120a.  call temp:= `maxMemory`(v1) @signature `Ljava/lang/Runtime;.maxMemory:()J` @kind virtual;
  #L091210.  v4:= temp @kind wide;
  #L091212.  call temp:= `a`(v4) @signature `Lcom/iamtrk/a/a;.a:(J)Ljava/lang/String;` @kind static;
  #L091218.  v1:= temp @kind object;
  #L09121a.  call `<init>`(v2, v3, v1) @signature `Lcom/iamtrk/a/a$k;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L091220.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L091226.  return v0 @kind object;
}
