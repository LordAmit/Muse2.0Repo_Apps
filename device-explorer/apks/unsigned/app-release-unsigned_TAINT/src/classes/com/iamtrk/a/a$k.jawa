record `com.iamtrk.a.a$k` @kind class @AccessFlag PUBLIC {
  `java.lang.String` `com.iamtrk.a.a$k.a` @AccessFlag PRIVATE;
  `java.lang.String` `com.iamtrk.a.a$k.b` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.iamtrk.a.a$k` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lcom/iamtrk/a/a$k;.<init>:(Ljava/lang/String;I)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L090fa8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L090fae.  v1.`com.iamtrk.a.a$k.a` @type ^`java.lang.String` := v2 @kind object;
  #L090fb2.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L090fb8.  v0:= temp @kind object;
  #L090fba.  call temp:= `toString`(v0) @signature `Ljava/lang/Integer;.toString:()Ljava/lang/String;` @kind virtual;
  #L090fc0.  v0:= temp @kind object;
  #L090fc2.  v1.`com.iamtrk.a.a$k.b` @type ^`java.lang.String` := v0 @kind object;
  #L090fc6.  return @kind void;
}
procedure `void` `<init>`(`com.iamtrk.a.a$k` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/iamtrk/a/a$k;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L090fd8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L090fde.  v0.`com.iamtrk.a.a$k.a` @type ^`java.lang.String` := v1 @kind object;
  #L090fe2.  v0.`com.iamtrk.a.a$k.b` @type ^`java.lang.String` := v2 @kind object;
  #L090fe6.  return @kind void;
}
procedure `void` `<init>`(`com.iamtrk.a.a$k` v1 @kind this, `java.lang.String` v2 @kind object, `boolean` v3 ) @signature `Lcom/iamtrk/a/a$k;.<init>:(Ljava/lang/String;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L090ff8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L090ffe.  v1.`com.iamtrk.a.a$k.a` @type ^`java.lang.String` := v2 @kind object;
  #L091002.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L091008.  v0:= temp @kind object;
  #L09100a.  call temp:= `toString`(v0) @signature `Ljava/lang/Boolean;.toString:()Ljava/lang/String;` @kind virtual;
  #L091010.  v0:= temp @kind object;
  #L091012.  v1.`com.iamtrk.a.a$k.b` @type ^`java.lang.String` := v0 @kind object;
  #L091016.  return @kind void;
}
procedure `java.lang.String` `a`(`com.iamtrk.a.a$k` v1 @kind this) @signature `Lcom/iamtrk/a/a$k;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L091028.  v0:= v1.`com.iamtrk.a.a$k.a` @type ^`java.lang.String` @kind object;
  #L09102c.  return v0 @kind object;
}
procedure `java.lang.String` `b`(`com.iamtrk.a.a$k` v1 @kind this) @signature `Lcom/iamtrk/a/a$k;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L091040.  v0:= v1.`com.iamtrk.a.a$k.b` @type ^`java.lang.String` @kind object;
  #L091044.  return v0 @kind object;
}
