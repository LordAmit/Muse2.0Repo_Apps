record `org.b.a.a.b.h` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b.g` @kind class {
}
procedure `void` `<init>`(`org.b.a.a.b.h` v0 @kind this) @signature `Lorg/b/a/a/b/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L17af08.  call `<init>`(v0) @signature `Lorg/b/a/a/b/g;.<init>:()V` @kind direct;
  #L17af0e.  return @kind void;
}
procedure `int` `a`(`org.b.a.a.b.h` v3 @kind this, `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/b/a/a/b/h;.a:([BI)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L17af20.  v0:= v4[v5] @kind byte;
  #L17af24.  v0:= v0 ^& 255;
  #L17af28.  v1:= 129I;
  #L17af2c.  if v0 < v1 then goto L17af60;
  #L17af30.  v1:= 159I;
  #L17af34.  if v0 > v1 then goto L17af60;
  #L17af38.  v0:= v0 + -129;
  #L17af3c.  v0:= v0 * 188;
  #L17af40.  v1:= v5 + 1;
  #L17af44.  v1:= v4[v1] @kind byte;
  #L17af48.  v1:= v1 ^& 255;
  #L17af4c.  v2:= v1 + -64;
  #L17af50.  v0:= v0 + v2 @kind int;
  #L17af52.  v2:= 128I;
  #L17af56.  if v1 < v2 then goto L17af5e;
  #L17af5a.  v0:= v0 + -1;
  #L17af5e.  return v0;
  #L17af60.  v1:= 224I;
  #L17af64.  if v0 < v1 then goto L17af7e;
  #L17af68.  v1:= 239I;
  #L17af6c.  if v0 > v1 then goto L17af7e;
  #L17af70.  v0:= v0 + -224;
  #L17af74.  v0:= v0 + 31;
  #L17af78.  v0:= v0 * 188;
  #L17af7c.  goto L17af40;
  #L17af7e.  v0:= -1I;
  #L17af80.  goto L17af5e;
}
