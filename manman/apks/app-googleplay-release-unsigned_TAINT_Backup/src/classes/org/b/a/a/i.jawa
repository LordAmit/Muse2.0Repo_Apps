record `org.b.a.a.i` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b` @kind class {
  `org.b.a.a.b$a` `org.b.a.a.i.a` @AccessFlag PRIVATE;
  `byte` `org.b.a.a.i.b` @AccessFlag PRIVATE;
  `int`[] `org.b.a.a.i.c` @AccessFlag PRIVATE;
}
global `byte`[] `@@org.b.a.a.i.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@org.b.a.a.i.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/b/a/a/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L185474.  v0:= 256I;
  #L185478.  v0:= new `byte`[v0];
  #L18547c.  goto L18549c;
  #L185482.  `@@org.b.a.a.i.d` @type ^`byte`[] := v0 @kind object;
  #L185486.  v0:= 64I;
  #L18548a.  v0:= new `byte`[v0];
  #L18548e.  goto L1855a4;
  #L185494.  `@@org.b.a.a.i.e` @type ^`byte`[] := v0 @kind object;
  #L185498.  return @kind void;
  #L18549a.  
  #L18549c.  v0:= (1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 1I, 1I, 1I, 1I, 1I, 1I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 1I, 1I, 1I, 1I, 1I, 1I, 0I, 1I, 7I, 1I, 1I, 1I, 1I, 1I, 1I, 5I, 1I, 5I, 0I, 5I, 0I, 0I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 7I, 1I, 7I, 0I, 7I, 5I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 4I, 4I, 4I, 4I, 4I, 4I, 5I, 5I, 4I, 4I, 4I, 4I, 4I, 4I, 4I, 4I, 5I, 5I, 4I, 4I, 4I, 4I, 4I, 1I, 4I, 4I, 4I, 4I, 4I, 5I, 5I, 5I, 6I, 6I, 6I, 6I, 6I, 6I, 7I, 7I, 6I, 6I, 6I, 6I, 6I, 6I, 6I, 6I, 7I, 7I, 6I, 6I, 6I, 6I, 6I, 1I, 6I, 6I, 6I, 6I, 6I, 7I, 7I, 7I) @kind object;
  #L1855a3.  goto L185482;
  #L1855a4.  v0:= (0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 0I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 0I, 3I, 3I, 3I, 1I, 1I, 3I, 3I, 0I, 3I, 3I, 3I, 1I, 2I, 1I, 2I, 0I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 0I, 3I, 1I, 3I, 1I, 1I, 1I, 3I, 0I, 3I, 1I, 3I, 1I, 1I, 3I, 3I) @kind object;
  #L1855eb.  goto L185494;
}
procedure `void` `<init>`(`org.b.a.a.i` v1 @kind this) @signature `Lorg/b/a/a/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1855fc.  call `<init>`(v1) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L185602.  v0:= 4I;
  #L185604.  v0:= new `int`[v0];
  #L185608.  v1.`org.b.a.a.i.c` @type ^`int`[] := v0 @kind object;
  #L18560c.  call `d`(v1) @signature `Lorg/b/a/a/i;.d:()V` @kind virtual;
  #L185612.  return @kind void;
}
procedure `java.lang.String` `a`(`org.b.a.a.i` v1 @kind this) @signature `Lorg/b/a/a/i;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L185624.  v0:= `@@org.b.a.b.r` @type ^`java.lang.String` @kind object;
  #L185628.  return v0 @kind object;
}
procedure `org.b.a.a.b$a` `a`(`org.b.a.a.i` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/b/a/a/i;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L18563c.  call temp:= `c`(v7, v8, v9, v10) @signature `Lorg/b/a/a/i;.c:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L185642.  v0:= temp @kind object;
  #L185644.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L18564a.  v1:= temp @kind object;
  #L18564c.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L185652.  v2:= temp;
  #L185654.  v0:= 0I;
  #L185656.  if v0 >= v2 then goto L185688;
  #L18565a.  v3:= v1[v0] @kind byte;
  #L18565e.  v3:= v3 ^& 255;
  #L185662.  v4:= `@@org.b.a.a.i.d` @type ^`byte`[] @kind object;
  #L185666.  v3:= v4[v3] @kind byte;
  #L18566a.  v4:= `@@org.b.a.a.i.e` @type ^`byte`[] @kind object;
  #L18566e.  v5:= v7.`org.b.a.a.i.b` @type ^`byte` @kind byte;
  #L185672.  v5:= v5 * 8;
  #L185676.  v5:= v5 + v3 @kind int;
  #L185678.  v4:= v4[v5] @kind byte;
  #L18567c.  if v4 != 0 then goto L18568e;
  #L185680.  v0:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L185684.  v7.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L185688.  v0:= v7.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` @kind object;
  #L18568c.  return v0 @kind object;
  #L18568e.  v5:= v7.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L185692.  v6:= v5[v4];
  #L185696.  v6:= v6 + 1;
  #L18569a.  v5[v4]:= v6;
  #L18569e.  v7.`org.b.a.a.i.b` @type ^`byte` := v3 @kind byte;
  #L1856a2.  v0:= v0 + 1;
  #L1856a6.  goto L185656;
}
procedure `float` `b`(`org.b.a.a.i` v5 @kind this) @signature `Lorg/b/a/a/i;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1856b8.  v0:= 0I;
  #L1856ba.  v2:= 0I;
  #L1856bc.  v1:= v5.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1856c0.  v3:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L1856c4.  if v1 != v3 then goto L1856d0;
  #L1856c8.  v0:= 1008981770I;
  #L1856ce.  return v0;
  #L1856d0.  v1:= v0;
  #L1856d2.  v3:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L1856d6.  v3:= length @variable v3;
  #L1856d8.  if v0 >= v3 then goto L1856ec;
  #L1856dc.  v3:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L1856e0.  v3:= v3[v0];
  #L1856e4.  v1:= v1 + v3 @kind int;
  #L1856e6.  v0:= v0 + 1;
  #L1856ea.  goto L1856d2;
  #L1856ec.  if v1 > 0 then goto L185704;
  #L1856f0.  v0:= v2;
  #L1856f2.  v1:= fcmpg(v0, v2);
  #L1856f6.  if v1 >= 0 then goto L1856fc;
  #L1856fa.  v0:= v2;
  #L1856fc.  v1:= 0.5F;
  #L185700.  v0:= v0 * v1 @kind float;
  #L185702.  goto L1856ce;
  #L185704.  v0:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L185708.  v3:= 3I;
  #L18570a.  v0:= v0[v3];
  #L18570e.  v0:= (`float`) v0 @kind i2f;
  #L185710.  v3:= 1.0F;
  #L185714.  v0:= v0 * v3 @kind float;
  #L185716.  v3:= (`float`) v1 @kind i2f;
  #L185718.  v0:= v0 / v3 @kind float;
  #L18571a.  v3:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L18571e.  v4:= 1I;
  #L185720.  v3:= v3[v4];
  #L185724.  v3:= (`float`) v3 @kind i2f;
  #L185726.  v4:= 20.0F;
  #L18572a.  v3:= v3 * v4 @kind float;
  #L18572c.  v1:= (`float`) v1 @kind i2f;
  #L18572e.  v1:= v3 / v1 @kind float;
  #L185732.  v0:= v0 - v1 @kind float;
  #L185734.  goto L1856f2;
}
procedure `org.b.a.a.b$a` `c`(`org.b.a.a.i` v1 @kind this) @signature `Lorg/b/a/a/i;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L185748.  v0:= v1.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` @kind object;
  #L18574c.  return v0 @kind object;
}
procedure `void` `d`(`org.b.a.a.i` v3 @kind this) @signature `Lorg/b/a/a/i;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L185760.  v1:= 0I;
  #L185762.  v0:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L185766.  v3.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L18576a.  v0:= 1I;
  #L18576c.  v3.`org.b.a.a.i.b` @type ^`byte` := v0 @kind byte;
  #L185770.  v0:= v1;
  #L185772.  v2:= v3.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L185776.  v2:= length @variable v2;
  #L185778.  if v0 >= v2 then goto L18578a;
  #L18577c.  v2:= v3.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L185780.  v2[v0]:= v1;
  #L185784.  v0:= v0 + 1;
  #L185788.  goto L185772;
  #L18578a.  return @kind void;
}
