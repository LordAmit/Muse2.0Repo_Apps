record `org.a.a.a.a.a.a` @kind class @AccessFlag PUBLIC extends `org.a.a.a.a.a` @kind class {
  `java.io.InputStream` `org.a.a.a.a.a.a.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.a.a.a.a.a.a.c` @AccessFlag PRIVATE_FINAL;
  `byte`[] `org.a.a.a.a.a.a.d` @AccessFlag PRIVATE_FINAL;
  `int` `org.a.a.a.a.a.a.e` @AccessFlag PRIVATE;
  `java.util.zip.Inflater` `org.a.a.a.a.a.a.f` @AccessFlag PRIVATE;
  `java.util.zip.CRC32` `org.a.a.a.a.a.a.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.a.a.a.a.a.a.h` @AccessFlag PRIVATE;
  `byte`[] `org.a.a.a.a.a.a.i` @AccessFlag PRIVATE_FINAL;
  `org.a.a.a.a.a.b` `org.a.a.a.a.a.a.j` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@org.a.a.a.a.a.a.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lorg/a/a/a/a/a/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L162d8c.  v0:= constclass @type ^`org.a.a.a.a.a.a` @kind object;
  #L162d90.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L162d96.  v0:= temp;
  #L162d98.  if v0 != 0 then goto L162da4;
  #L162d9c.  v0:= 1I;
  #L162d9e.  `@@org.a.a.a.a.a.a.a` @type ^`boolean` := v0 @kind boolean;
  #L162da2.  return @kind void;
  #L162da4.  v0:= 0I;
  #L162da6.  goto L162d9e;
}
procedure `void` `<init>`(`org.a.a.a.a.a.a` v1 @kind this, `java.io.InputStream` v2 @kind object) @signature `Lorg/a/a/a/a/a/a;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L162db8.  v0:= 0I;
  #L162dba.  call `<init>`(v1, v2, v0) @signature `Lorg/a/a/a/a/a/a;.<init>:(Ljava/io/InputStream;Z)V` @kind direct;
  #L162dc0.  return @kind void;
}
procedure `void` `<init>`(`org.a.a.a.a.a.a` v3 @kind this, `java.io.InputStream` v4 @kind object, `boolean` v5 ) @signature `Lorg/a/a/a/a/a/a;.<init>:(Ljava/io/InputStream;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L162dd4.  v2:= 0I;
  #L162dd6.  v1:= 1I;
  #L162dd8.  call `<init>`(v3) @signature `Lorg/a/a/a/a/a;.<init>:()V` @kind direct;
  #L162dde.  v0:= 8192I;
  #L162de2.  v0:= new `byte`[v0];
  #L162de6.  v3.`org.a.a.a.a.a.a.d` @type ^`byte`[] := v0 @kind object;
  #L162dea.  v3.`org.a.a.a.a.a.a.e` @type ^`int` := v2;
  #L162dee.  v0:= new `java.util.zip.Inflater`;
  #L162df2.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L162df8.  v3.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L162dfc.  v0:= new `java.util.zip.CRC32`;
  #L162e00.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L162e06.  v3.`org.a.a.a.a.a.a.g` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L162e0a.  v3.`org.a.a.a.a.a.a.h` @type ^`boolean` := v2 @kind boolean;
  #L162e0e.  v0:= new `byte`[v1];
  #L162e12.  v3.`org.a.a.a.a.a.a.i` @type ^`byte`[] := v0 @kind object;
  #L162e16.  v0:= new `org.a.a.a.a.a.b`;
  #L162e1a.  call `<init>`(v0) @signature `Lorg/a/a/a/a/a/b;.<init>:()V` @kind direct;
  #L162e20.  v3.`org.a.a.a.a.a.a.j` @type ^`org.a.a.a.a.a.b` := v0 @kind object;
  #L162e24.  call temp:= `markSupported`(v4) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L162e2a.  v0:= temp;
  #L162e2c.  if v0 == 0 then goto L162e40;
  #L162e30.  v3.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` := v4 @kind object;
  #L162e34.  v3.`org.a.a.a.a.a.a.c` @type ^`boolean` := v5 @kind boolean;
  #L162e38.  call temp:= `a`(v3, v1) @signature `Lorg/a/a/a/a/a/a;.a:(Z)Z` @kind direct;
  #L162e3e.  return @kind void;
  #L162e40.  v0:= new `java.io.BufferedInputStream`;
  #L162e44.  call `<init>`(v0, v4) @signature `Ljava/io/BufferedInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L162e4a.  v3.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` := v0 @kind object;
  #L162e4e.  goto L162e34;
}
procedure `boolean` `a`(`org.a.a.a.a.a.a` v10 @kind this, `boolean` v11 ) @signature `Lorg/a/a/a/a/a/a;.a:(Z)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L162e60.  v0:= 1I;
  #L162e62.  v1:= `@@org.a.a.a.a.a.a.a` @type ^`boolean` @kind boolean;
  #L162e66.  if v1 != 0 then goto L162e82;
  #L162e6a.  if v11 != 0 then goto L162e82;
  #L162e6e.  v1:= v10.`org.a.a.a.a.a.a.c` @type ^`boolean` @kind boolean;
  #L162e72.  if v1 != 0 then goto L162e82;
  #L162e76.  v0:= new `java.lang.AssertionError`;
  #L162e7a.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L162e80.  throw v0;
  #L162e82.  v1:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L162e86.  call temp:= `read`(v1) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L162e8c.  v1:= temp;
  #L162e8e.  v2:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L162e92.  call temp:= `read`(v2) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L162e98.  v2:= temp;
  #L162e9a.  v3:= -1I;
  #L162e9c.  if v1 != v3 then goto L162ea8;
  #L162ea0.  if v11 != 0 then goto L162ea8;
  #L162ea4.  v0:= 0I;
  #L162ea6.  return v0;
  #L162ea8.  v3:= 31I;
  #L162eac.  if v1 != v3 then goto L162eb8;
  #L162eb0.  v1:= 139I;
  #L162eb4.  if v2 == v1 then goto L162ed2;
  #L162eb8.  v1:= new `java.io.IOException`;
  #L162ebc.  if v11 == 0 then goto L162ecc;
  #L162ec0.  v0:= "Input is not in the .gz format" @kind object;
  #L162ec4.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L162eca.  throw v1;
  #L162ecc.  v0:= "Garbage after a valid .gz stream" @kind object;
  #L162ed0.  goto L162ec4;
  #L162ed2.  v3:= new `java.io.DataInputStream`;
  #L162ed6.  v1:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L162eda.  call `<init>`(v3, v1) @signature `Ljava/io/DataInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L162ee0.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L162ee6.  v1:= temp;
  #L162ee8.  v2:= 8I;
  #L162eec.  if v1 == v2 then goto L162f2e;
  #L162ef0.  v0:= new `java.io.IOException`;
  #L162ef4.  v2:= new `java.lang.StringBuilder`;
  #L162ef8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L162efe.  v3:= "Unsupported compression method " @kind object;
  #L162f02.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162f08.  v2:= temp @kind object;
  #L162f0a.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L162f10.  v1:= temp @kind object;
  #L162f12.  v2:= " in the .gz header" @kind object;
  #L162f16.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162f1c.  v1:= temp @kind object;
  #L162f1e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L162f24.  v1:= temp @kind object;
  #L162f26.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L162f2c.  throw v0;
  #L162f2e.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L162f34.  v4:= temp;
  #L162f36.  v1:= v4 ^& 224;
  #L162f3a.  if v1 == 0 then goto L162f4e;
  #L162f3e.  v0:= new `java.io.IOException`;
  #L162f42.  v1:= "Reserved flags are set in the .gz header" @kind object;
  #L162f46.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L162f4c.  throw v0;
  #L162f4e.  v1:= v10.`org.a.a.a.a.a.a.j` @type ^`org.a.a.a.a.a.b` @kind object;
  #L162f52.  call temp:= `b`(v10, v3) @signature `Lorg/a/a/a/a/a/a;.b:(Ljava/io/DataInputStream;)J` @kind direct;
  #L162f58.  v6:= temp @kind wide;
  #L162f5a.  v8:= 1000L;
  #L162f5e.  v6:= v6 * v8 @kind long;
  #L162f60.  call `a`(v1, v6) @signature `Lorg/a/a/a/a/a/b;.a:(J)V` @kind virtual;
  #L162f66.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L162f6c.  v1:= temp;
  #L162f6e.  goto L163048;
  #L162f74.  v1:= v10.`org.a.a.a.a.a.a.j` @type ^`org.a.a.a.a.a.b` @kind object;
  #L162f78.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L162f7e.  v2:= temp;
  #L162f80.  call `b`(v1, v2) @signature `Lorg/a/a/a/a/a/b;.b:(I)V` @kind virtual;
  #L162f86.  v1:= v4 ^& 4;
  #L162f8a.  if v1 == 0 then goto L162fd2;
  #L162f8e.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L162f94.  v1:= temp;
  #L162f96.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L162f9c.  v2:= temp;
  #L162f9e.  v2:= v2 ^< 8;
  #L162fa2.  v1:= v1 ^| v2 @kind int;
  #L162fa4.  v2:= v1 + -1;
  #L162fa8.  if v1 <= 0 then goto L162fd2;
  #L162fac.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L162fb2.  v1:= v2;
  #L162fb4.  goto L162fa4;
  #L162fb6.  v1:= v10.`org.a.a.a.a.a.a.j` @type ^`org.a.a.a.a.a.b` @kind object;
  #L162fba.  v2:= 9I;
  #L162fbe.  call `a`(v1, v2) @signature `Lorg/a/a/a/a/a/b;.a:(I)V` @kind virtual;
  #L162fc4.  goto L162f74;
  #L162fc6.  v1:= v10.`org.a.a.a.a.a.a.j` @type ^`org.a.a.a.a.a.b` @kind object;
  #L162fca.  call `a`(v1, v0) @signature `Lorg/a/a/a/a/a/b;.a:(I)V` @kind virtual;
  #L162fd0.  goto L162f74;
  #L162fd2.  v1:= v4 ^& 8;
  #L162fd6.  if v1 == 0 then goto L162ffa;
  #L162fda.  v1:= v10.`org.a.a.a.a.a.a.j` @type ^`org.a.a.a.a.a.b` @kind object;
  #L162fde.  v2:= new `java.lang.String`;
  #L162fe2.  call temp:= `a`(v10, v3) @signature `Lorg/a/a/a/a/a/a;.a:(Ljava/io/DataInputStream;)[B` @kind direct;
  #L162fe8.  v5:= temp @kind object;
  #L162fea.  v6:= "ISO-8859-1" @kind object;
  #L162fee.  call `<init>`(v2, v5, v6) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L162ff4.  call `a`(v1, v2) @signature `Lorg/a/a/a/a/a/b;.a:(Ljava/lang/String;)V` @kind virtual;
  #L162ffa.  v1:= v4 ^& 16;
  #L162ffe.  if v1 == 0 then goto L163022;
  #L163002.  v1:= v10.`org.a.a.a.a.a.a.j` @type ^`org.a.a.a.a.a.b` @kind object;
  #L163006.  v2:= new `java.lang.String`;
  #L16300a.  call temp:= `a`(v10, v3) @signature `Lorg/a/a/a/a/a/a;.a:(Ljava/io/DataInputStream;)[B` @kind direct;
  #L163010.  v5:= temp @kind object;
  #L163012.  v6:= "ISO-8859-1" @kind object;
  #L163016.  call `<init>`(v2, v5, v6) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L16301c.  call `b`(v1, v2) @signature `Lorg/a/a/a/a/a/b;.b:(Ljava/lang/String;)V` @kind virtual;
  #L163022.  v1:= v4 ^& 2;
  #L163026.  if v1 == 0 then goto L163030;
  #L16302a.  call temp:= `readShort`(v3) @signature `Ljava/io/DataInputStream;.readShort:()S` @kind virtual;
  #L163030.  v1:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L163034.  call `reset`(v1) @signature `Ljava/util/zip/Inflater;.reset:()V` @kind virtual;
  #L16303a.  v1:= v10.`org.a.a.a.a.a.a.g` @type ^`java.util.zip.CRC32` @kind object;
  #L16303e.  call `reset`(v1) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L163044.  goto L162ea6;
  #L163048.  switch v1
                  | 2 => goto L162fb6
                  | 3 => goto L162f74
                  | 4 => goto L162fc6
                  | else => goto L162f74;
}
procedure `byte`[] `a`(`org.a.a.a.a.a.a` v2 @kind this, `java.io.DataInputStream` v3 @kind object) @signature `Lorg/a/a/a/a/a/a;.a:(Ljava/io/DataInputStream;)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L16306c.  v0:= new `java.io.ByteArrayOutputStream`;
  #L163070.  call `<init>`(v0) @signature `Ljava/io/ByteArrayOutputStream;.<init>:()V` @kind direct;
  #L163076.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L16307c.  v1:= temp;
  #L16307e.  if v1 == 0 then goto L16308a;
  #L163082.  call `write`(v0, v1) @signature `Ljava/io/ByteArrayOutputStream;.write:(I)V` @kind virtual;
  #L163088.  goto L163076;
  #L16308a.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L163090.  v0:= temp @kind object;
  #L163092.  return v0 @kind object;
}
procedure `long` `b`(`org.a.a.a.a.a.a` v5 @kind this, `java.io.DataInputStream` v6 @kind object) @signature `Lorg/a/a/a/a/a/a;.b:(Ljava/io/DataInputStream;)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1630a4.  call temp:= `readUnsignedByte`(v6) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L1630aa.  v0:= temp;
  #L1630ac.  call temp:= `readUnsignedByte`(v6) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L1630b2.  v1:= temp;
  #L1630b4.  v1:= v1 ^< 8;
  #L1630b8.  v0:= v0 ^| v1 @kind int;
  #L1630ba.  call temp:= `readUnsignedByte`(v6) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L1630c0.  v1:= temp;
  #L1630c2.  v1:= v1 ^< 16;
  #L1630c6.  v0:= v0 ^| v1 @kind int;
  #L1630c8.  v0:= (`long`) v0 @kind i2l;
  #L1630ca.  call temp:= `readUnsignedByte`(v6) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L1630d0.  v2:= temp;
  #L1630d2.  v2:= (`long`) v2 @kind i2l;
  #L1630d4.  v4:= 24I;
  #L1630d8.  v2:= v2 ^< v4 @kind long;
  #L1630da.  v0:= v0 ^| v2 @kind long;
  #L1630dc.  return v0 @kind wide;
}
procedure `void` `close`(`org.a.a.a.a.a.a` v2 @kind this) @signature `Lorg/a/a/a/a/a/a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1630f0.  v0:= v2.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L1630f4.  if v0 == 0 then goto L163108;
  #L1630f8.  v0:= v2.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L1630fc.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L163102.  v0:= 0I;
  #L163104.  v2.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L163108.  v0:= v2.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L16310c.  v1:= `@@java.lang.System.in` @type ^`java.io.InputStream` @kind object;
  #L163110.  if v0 == v1 then goto L16311e;
  #L163114.  v0:= v2.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L163118.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L16311e.  return @kind void;
}
procedure `int` `read`(`org.a.a.a.a.a.a` v4 @kind this) @signature `Lorg/a/a/a/a/a/a;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L163130.  v3:= 0I;
  #L163132.  v0:= -1I;
  #L163134.  v1:= v4.`org.a.a.a.a.a.a.i` @type ^`byte`[] @kind object;
  #L163138.  v2:= 1I;
  #L16313a.  call temp:= `read`(v4, v1, v3, v2) @signature `Lorg/a/a/a/a/a/a;.read:([BII)I` @kind virtual;
  #L163140.  v1:= temp;
  #L163142.  if v1 != v0 then goto L163148;
  #L163146.  return v0;
  #L163148.  v0:= v4.`org.a.a.a.a.a.a.i` @type ^`byte`[] @kind object;
  #L16314c.  v0:= v0[v3] @kind byte;
  #L163150.  v0:= v0 ^& 255;
  #L163154.  goto L163146;
}
procedure `int` `read`(`org.a.a.a.a.a.a` v10 @kind this, `byte`[] v11 @kind object, `int` v12 , `int` v13 ) @signature `Lorg/a/a/a/a/a/a;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L163168.  v0:= -1I;
  #L16316a.  v2:= 0I;
  #L16316c.  v1:= v10.`org.a.a.a.a.a.a.h` @type ^`boolean` @kind boolean;
  #L163170.  if v1 == 0 then goto L163176;
  #L163174.  return v0;
  #L163176.  v1:= v2;
  #L163178.  if v13 <= 0 then goto L163304;
  #L16317c.  v3:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L163180.  call temp:= `needsInput`(v3) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L163186.  v3:= temp;
  #L163188.  if v3 == 0 then goto L1631d6;
  #L16318c.  v3:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L163190.  v4:= v10.`org.a.a.a.a.a.a.d` @type ^`byte`[] @kind object;
  #L163194.  v4:= length @variable v4;
  #L163196.  call `mark`(v3, v4) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L16319c.  v3:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L1631a0.  v4:= v10.`org.a.a.a.a.a.a.d` @type ^`byte`[] @kind object;
  #L1631a4.  call temp:= `read`(v3, v4) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L1631aa.  v3:= temp;
  #L1631ac.  v10.`org.a.a.a.a.a.a.e` @type ^`int` := v3;
  #L1631b0.  v3:= v10.`org.a.a.a.a.a.a.e` @type ^`int`;
  #L1631b4.  if v3 != v0 then goto L1631c4;
  #L1631b8.  v0:= new `java.io.EOFException`;
  #L1631bc.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1631c2.  throw v0;
  #L1631c4.  v3:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L1631c8.  v4:= v10.`org.a.a.a.a.a.a.d` @type ^`byte`[] @kind object;
  #L1631cc.  v5:= v10.`org.a.a.a.a.a.a.e` @type ^`int`;
  #L1631d0.  call `setInput`(v3, v4, v2, v5) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #Try_start0.  
  #L1631d6.  v3:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L1631da.  call temp:= `inflate`(v3, v11, v12, v13) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #Try_end0.  
  #L1631e0.  v3:= temp;
  #L1631e2.  v4:= v10.`org.a.a.a.a.a.a.g` @type ^`java.util.zip.CRC32` @kind object;
  #L1631e6.  call `update`(v4, v11, v12, v3) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L1631ec.  v12:= v12 + v3 @kind int;
  #L1631ee.  v13:= v13 - v3 @kind int;
  #L1631f0.  v1:= v1 + v3 @kind int;
  #L1631f2.  call `a`(v10, v3) @signature `Lorg/a/a/a/a/a/a;.a:(I)V` @kind virtual;
  #L1631f8.  v3:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L1631fc.  call temp:= `finished`(v3) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L163202.  v3:= temp;
  #L163204.  if v3 == 0 then goto L163178;
  #L163208.  v3:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L16320c.  call `reset`(v3) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L163212.  v3:= v10.`org.a.a.a.a.a.a.e` @type ^`int`;
  #L163216.  v4:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L16321a.  call temp:= `getRemaining`(v4) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L163220.  v4:= temp;
  #L163222.  v3:= v3 - v4 @kind int;
  #L163224.  v4:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L163228.  v6:= (`long`) v3 @kind i2l;
  #L16322a.  call temp:= `skip`(v4, v6) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L163230.  v4:= temp @kind wide;
  #L163232.  v6:= (`long`) v3 @kind i2l;
  #L163234.  v3:= lcmp(v4, v6);
  #L163238.  if v3 == 0 then goto L16325a;
  #L16323c.  v0:= new `java.io.IOException`;
  #L163240.  call `<init>`(v0) @signature `Ljava/io/IOException;.<init>:()V` @kind direct;
  #L163246.  throw v0;
  #L163248.  v0:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L16324a.  v0:= new `java.io.IOException`;
  #L16324e.  v1:= "Gzip-compressed data is corrupt" @kind object;
  #L163252.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L163258.  throw v0;
  #L16325a.  v10.`org.a.a.a.a.a.a.e` @type ^`int` := v2;
  #L16325e.  v3:= new `java.io.DataInputStream`;
  #L163262.  v4:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L163266.  call `<init>`(v3, v4) @signature `Ljava/io/DataInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L16326c.  call temp:= `b`(v10, v3) @signature `Lorg/a/a/a/a/a/a;.b:(Ljava/io/DataInputStream;)J` @kind direct;
  #L163272.  v4:= temp @kind wide;
  #L163274.  v6:= v10.`org.a.a.a.a.a.a.g` @type ^`java.util.zip.CRC32` @kind object;
  #L163278.  call temp:= `getValue`(v6) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L16327e.  v6:= temp @kind wide;
  #L163280.  v4:= lcmp(v4, v6);
  #L163284.  if v4 == 0 then goto L163298;
  #L163288.  v0:= new `java.io.IOException`;
  #L16328c.  v1:= "Gzip-compressed data is corrupt (CRC32 error)" @kind object;
  #L163290.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L163296.  throw v0;
  #L163298.  call temp:= `b`(v10, v3) @signature `Lorg/a/a/a/a/a/a;.b:(Ljava/io/DataInputStream;)J` @kind direct;
  #L16329e.  v4:= temp @kind wide;
  #L1632a0.  v3:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L1632a4.  call temp:= `getBytesWritten`(v3) @signature `Ljava/util/zip/Inflater;.getBytesWritten:()J` @kind virtual;
  #L1632aa.  v6:= temp @kind wide;
  #L1632ac.  v8:= 4294967295L;
  #L1632b6.  v6:= v6 ^& v8 @kind long;
  #L1632b8.  v3:= lcmp(v4, v6);
  #L1632bc.  if v3 == 0 then goto L1632d0;
  #L1632c0.  v0:= new `java.io.IOException`;
  #L1632c4.  v1:= "Gzip-compressed data is corrupt(uncompressed size mismatch)" @kind object;
  #L1632c8.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1632ce.  throw v0;
  #L1632d0.  v3:= v10.`org.a.a.a.a.a.a.c` @type ^`boolean` @kind boolean;
  #L1632d4.  if v3 == 0 then goto L1632e4;
  #L1632d8.  call temp:= `a`(v10, v2) @signature `Lorg/a/a/a/a/a/a;.a:(Z)Z` @kind direct;
  #L1632de.  v3:= temp;
  #L1632e0.  if v3 != 0 then goto L163178;
  #L1632e4.  v2:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L1632e8.  call `end`(v2) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L1632ee.  v2:= 0I;
  #L1632f0.  v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` := v2 @kind object;
  #L1632f4.  v2:= 1I;
  #L1632f6.  v10.`org.a.a.a.a.a.a.h` @type ^`boolean` := v2 @kind boolean;
  #L1632fa.  if v1 == 0 then goto L163174;
  #L1632fe.  v0:= v1;
  #L163300.  goto L163174;
  #L163304.  v0:= v1;
  #L163306.  goto L163174;
  catch `java.util.zip.DataFormatException` @[Try_start0..Try_end0] goto L163248;
}
