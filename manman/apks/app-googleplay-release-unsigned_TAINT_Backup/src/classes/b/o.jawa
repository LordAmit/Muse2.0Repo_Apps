record `b.o` @kind class @AccessFlag FINAL {
}
global `b.n` `@@b.o.a` @AccessFlag STATIC;
global `long` `@@b.o.b` @AccessFlag STATIC;
procedure `void` `<init>`(`b.o` v0 @kind this) @signature `Lb/o;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L11d460.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11d466.  return @kind void;
}
procedure `b.n` `a`() @signature `Lb/o;.a:()Lb/n;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11d478.  v1:= constclass @type ^`b.o` @kind object;
  #L11d47c.  @monitorenter v1
  #Try_start0.  
  #L11d47e.  v0:= `@@b.o.a` @type ^`b.n` @kind object;
  #L11d482.  if v0 == 0 then goto L11d4aa;
  #L11d486.  v0:= `@@b.o.a` @type ^`b.n` @kind object;
  #L11d48a.  v2:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11d48e.  `@@b.o.a` @type ^`b.n` := v2 @kind object;
  #L11d492.  v2:= 0I;
  #L11d494.  v0.`b.n.f` @type ^`b.n` := v2 @kind object;
  #L11d498.  v2:= `@@b.o.b` @type ^`long` @kind wide;
  #L11d49c.  v4:= 8192L;
  #L11d4a0.  v2:= v2 - v4 @kind long;
  #L11d4a2.  `@@b.o.b` @type ^`long` := v2 @kind wide;
  #L11d4a6.  @monitorexit v1
  #L11d4a8.  return v0 @kind object;
  #L11d4aa.  @monitorexit v1
  #Try_end0.  
  #L11d4ac.  v0:= new `b.n`;
  #L11d4b0.  call `<init>`(v0) @signature `Lb/n;.<init>:()V` @kind direct;
  #L11d4b6.  goto L11d4a8;
  #L11d4b8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L11d4ba.  @monitorexit v1
  #Try_end1.  
  #L11d4bc.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L11d4b8;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L11d4b8;
}
procedure `void` `a`(`b.n` v8 @kind object) @signature `Lb/o;.a:(Lb/n;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11d4e4.  v6:= 8192L;
  #L11d4e8.  v0:= v8.`b.n.f` @type ^`b.n` @kind object;
  #L11d4ec.  if v0 != 0 then goto L11d4f8;
  #L11d4f0.  v0:= v8.`b.n.g` @type ^`b.n` @kind object;
  #L11d4f4.  if v0 == 0 then goto L11d504;
  #L11d4f8.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d4fc.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11d502.  throw v0;
  #L11d504.  v0:= v8.`b.n.d` @type ^`boolean` @kind boolean;
  #L11d508.  if v0 == 0 then goto L11d50e;
  #L11d50c.  return @kind void;
  #L11d50e.  v1:= constclass @type ^`b.o` @kind object;
  #L11d512.  @monitorenter v1
  #Try_start0.  
  #L11d514.  v2:= `@@b.o.b` @type ^`long` @kind wide;
  #L11d518.  v2:= v2 + v6 @kind long;
  #L11d51a.  v4:= 65536L;
  #L11d520.  v0:= lcmp(v2, v4);
  #L11d524.  if v0 <= 0 then goto L11d532;
  #L11d528.  @monitorexit v1
  #L11d52a.  goto L11d50c;
  #L11d52c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11d52e.  @monitorexit v1
  #Try_end0.  
  #L11d530.  throw v0;
  #Try_start1.  
  #L11d532.  v2:= `@@b.o.b` @type ^`long` @kind wide;
  #L11d536.  v2:= v2 + v6 @kind long;
  #L11d538.  `@@b.o.b` @type ^`long` := v2 @kind wide;
  #L11d53c.  v0:= `@@b.o.a` @type ^`b.n` @kind object;
  #L11d540.  v8.`b.n.f` @type ^`b.n` := v0 @kind object;
  #L11d544.  v0:= 0I;
  #L11d546.  v8.`b.n.c` @type ^`int` := v0;
  #L11d54a.  v8.`b.n.b` @type ^`int` := v0;
  #L11d54e.  `@@b.o.a` @type ^`b.n` := v8 @kind object;
  #L11d552.  @monitorexit v1
  #Try_end1.  
  #L11d554.  goto L11d50c;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L11d52c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L11d52c;
}
