record `b.m` @kind class @AccessFlag FINAL extends `b.e` @kind interface {
  `b.c` `b.m.a` @AccessFlag PUBLIC_FINAL;
  `b.r` `b.m.b` @AccessFlag PUBLIC_FINAL;
  `boolean` `b.m.c` @AccessFlag ;
}
procedure `void` `<init>`(`b.m` v2 @kind this, `b.r` v3 @kind object) @signature `Lb/m;.<init>:(Lb/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L11c9e0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11c9e6.  v0:= new `b.c`;
  #L11c9ea.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11c9f0.  v2.`b.m.a` @type ^`b.c` := v0 @kind object;
  #L11c9f4.  if v3 != 0 then goto L11ca08;
  #L11c9f8.  v0:= new `java.lang.NullPointerException`;
  #L11c9fc.  v1:= "source == null" @kind object;
  #L11ca00.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ca06.  throw v0;
  #L11ca08.  v2.`b.m.b` @type ^`b.r` := v3 @kind object;
  #L11ca0c.  return @kind void;
}
procedure `long` `a`(`b.m` v2 @kind this, `byte` v3 ) @signature `Lb/m;.a:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11ca20.  v0:= 0L;
  #L11ca24.  call temp:= `a`(v2, v3, v0) @signature `Lb/m;.a:(BJ)J` @kind virtual;
  #L11ca2a.  v0:= temp @kind wide;
  #L11ca2c.  return v0 @kind wide;
}
procedure `long` `a`(`b.m` v8 @kind this, `byte` v9 , `long` v10 ) @signature `Lb/m;.a:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11ca40.  v2:= -1L;
  #L11ca44.  v0:= v8.`b.m.c` @type ^`boolean` @kind boolean;
  #L11ca48.  if v0 == 0 then goto L11ca64;
  #L11ca4c.  v0:= new `java.lang.IllegalStateException`;
  #L11ca50.  v1:= "closed" @kind object;
  #L11ca54.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ca5a.  throw v0;
  #L11ca5c.  call temp:= `max`(v10, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L11ca62.  v10:= temp @kind wide;
  #L11ca64.  v0:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11ca68.  call temp:= `a`(v0, v9, v10) @signature `Lb/c;.a:(BJ)J` @kind virtual;
  #L11ca6e.  v0:= temp @kind wide;
  #L11ca70.  v4:= lcmp(v0, v2);
  #L11ca74.  if v4 == 0 then goto L11ca7a;
  #L11ca78.  return v0 @kind wide;
  #L11ca7a.  v0:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11ca7e.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11ca82.  v4:= v8.`b.m.b` @type ^`b.r` @kind object;
  #L11ca86.  v5:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11ca8a.  v6:= 8192L;
  #L11ca8e.  call temp:= `a`(v4, v5, v6) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11ca94.  v4:= temp @kind wide;
  #L11ca96.  v4:= lcmp(v4, v2);
  #L11ca9a.  if v4 != 0 then goto L11ca5c;
  #L11ca9e.  v0:= v2 @kind wide;
  #L11caa0.  goto L11ca78;
}
procedure `long` `a`(`b.m` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `Lb/m;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11cab4.  v4:= 0L;
  #L11cab8.  v0:= -1L;
  #L11cabc.  if v7 != 0 then goto L11cad0;
  #L11cac0.  v0:= new `java.lang.IllegalArgumentException`;
  #L11cac4.  v1:= "sink == null" @kind object;
  #L11cac8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cace.  throw v0;
  #L11cad0.  v2:= lcmp(v8, v4);
  #L11cad4.  if v2 >= 0 then goto L11cb0a;
  #L11cad8.  v0:= new `java.lang.IllegalArgumentException`;
  #L11cadc.  v1:= new `java.lang.StringBuilder`;
  #L11cae0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11cae6.  v2:= "byteCount < 0: " @kind object;
  #L11caea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11caf0.  v1:= temp @kind object;
  #L11caf2.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11caf8.  v1:= temp @kind object;
  #L11cafa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11cb00.  v1:= temp @kind object;
  #L11cb02.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cb08.  throw v0;
  #L11cb0a.  v2:= v6.`b.m.c` @type ^`boolean` @kind boolean;
  #L11cb0e.  if v2 == 0 then goto L11cb22;
  #L11cb12.  v0:= new `java.lang.IllegalStateException`;
  #L11cb16.  v1:= "closed" @kind object;
  #L11cb1a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cb20.  throw v0;
  #L11cb22.  v2:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11cb26.  v2:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11cb2a.  v2:= lcmp(v2, v4);
  #L11cb2e.  if v2 != 0 then goto L11cb50;
  #L11cb32.  v2:= v6.`b.m.b` @type ^`b.r` @kind object;
  #L11cb36.  v3:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11cb3a.  v4:= 8192L;
  #L11cb3e.  call temp:= `a`(v2, v3, v4) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11cb44.  v2:= temp @kind wide;
  #L11cb46.  v2:= lcmp(v2, v0);
  #L11cb4a.  if v2 != 0 then goto L11cb50;
  #L11cb4e.  return v0 @kind wide;
  #L11cb50.  v0:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11cb54.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11cb58.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11cb5e.  v0:= temp @kind wide;
  #L11cb60.  v2:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11cb64.  call temp:= `a`(v2, v7, v0) @signature `Lb/c;.a:(Lb/c;J)J` @kind virtual;
  #L11cb6a.  v0:= temp @kind wide;
  #L11cb6c.  goto L11cb4e;
}
procedure `b.s` `a`(`b.m` v1 @kind this) @signature `Lb/m;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11cb80.  v0:= v1.`b.m.b` @type ^`b.r` @kind object;
  #L11cb84.  call temp:= `a`(v0) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L11cb8a.  v0:= temp @kind object;
  #L11cb8c.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`b.m` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lb/m;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11cba0.  if v3 != 0 then goto L11cbb4;
  #L11cba4.  v0:= new `java.lang.IllegalArgumentException`;
  #L11cba8.  v1:= "charset == null" @kind object;
  #L11cbac.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cbb2.  throw v0;
  #L11cbb4.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11cbb8.  v1:= v2.`b.m.b` @type ^`b.r` @kind object;
  #L11cbbc.  call temp:= `a`(v0, v1) @signature `Lb/c;.a:(Lb/r;)J` @kind virtual;
  #L11cbc2.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11cbc6.  call temp:= `a`(v0, v3) @signature `Lb/c;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L11cbcc.  v0:= temp @kind object;
  #L11cbce.  return v0 @kind object;
}
procedure `void` `a`(`b.m` v1 @kind this, `long` v2 ) @signature `Lb/m;.a:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11cbe0.  call temp:= `b`(v1, v2) @signature `Lb/m;.b:(J)Z` @kind virtual;
  #L11cbe6.  v0:= temp;
  #L11cbe8.  if v0 != 0 then goto L11cbf8;
  #L11cbec.  v0:= new `java.io.EOFException`;
  #L11cbf0.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11cbf6.  throw v0;
  #L11cbf8.  return @kind void;
}
procedure `boolean` `a`(`b.m` v7 @kind this, `long` v8 , `b.f` v10 @kind object) @signature `Lb/m;.a:(JLb/f;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11cc0c.  v5:= 0I;
  #L11cc0e.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11cc14.  v6:= temp;
  #L11cc16.  v1:= v7 @kind object;
  #L11cc18.  v2:= v8 @kind wide;
  #L11cc1a.  v4:= v10 @kind object;
  #L11cc1c.  call temp:= `a`(v1, v2, v4, v5, v6) @signature `Lb/m;.a:(JLb/f;II)Z` @kind virtual;
  #L11cc22.  v0:= temp;
  #L11cc24.  return v0;
}
procedure `boolean` `a`(`b.m` v7 @kind this, `long` v8 , `b.f` v10 @kind object, `int` v11 , `int` v12 ) @signature `Lb/m;.a:(JLb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11cc38.  v0:= 0I;
  #L11cc3a.  v1:= v7.`b.m.c` @type ^`boolean` @kind boolean;
  #L11cc3e.  if v1 == 0 then goto L11cc52;
  #L11cc42.  v0:= new `java.lang.IllegalStateException`;
  #L11cc46.  v1:= "closed" @kind object;
  #L11cc4a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cc50.  throw v0;
  #L11cc52.  v2:= 0L;
  #L11cc56.  v1:= lcmp(v8, v2);
  #L11cc5a.  if v1 < 0 then goto L11cc74;
  #L11cc5e.  if v11 < 0 then goto L11cc74;
  #L11cc62.  if v12 < 0 then goto L11cc74;
  #L11cc66.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11cc6c.  v1:= temp;
  #L11cc6e.  v1:= v1 - v11 @kind int;
  #L11cc70.  if v1 >= v12 then goto L11cc76;
  #L11cc74.  return v0;
  #L11cc76.  v1:= v0;
  #L11cc78.  if v1 >= v12 then goto L11ccb4;
  #L11cc7c.  v2:= (`long`) v1 @kind i2l;
  #L11cc7e.  v2:= v2 + v8 @kind long;
  #L11cc80.  v4:= 1L;
  #L11cc84.  v4:= v4 + v2 @kind long;
  #L11cc86.  call temp:= `b`(v7, v4) @signature `Lb/m;.b:(J)Z` @kind virtual;
  #L11cc8c.  v4:= temp;
  #L11cc8e.  if v4 == 0 then goto L11cc74;
  #L11cc92.  v4:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L11cc96.  call temp:= `b`(v4, v2) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L11cc9c.  v2:= temp;
  #L11cc9e.  v3:= v11 + v1 @kind int;
  #L11cca2.  call temp:= `a`(v10, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L11cca8.  v3:= temp;
  #L11ccaa.  if v2 != v3 then goto L11cc74;
  #L11ccae.  v1:= v1 + 1;
  #L11ccb2.  goto L11cc78;
  #L11ccb4.  v0:= 1I;
  #L11ccb6.  goto L11cc74;
}
procedure `boolean` `b`(`b.m` v5 @kind this, `long` v6 ) @signature `Lb/m;.b:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11ccc8.  v0:= 0L;
  #L11cccc.  v0:= lcmp(v6, v0);
  #L11ccd0.  if v0 >= 0 then goto L11cd06;
  #L11ccd4.  v0:= new `java.lang.IllegalArgumentException`;
  #L11ccd8.  v1:= new `java.lang.StringBuilder`;
  #L11ccdc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11cce2.  v2:= "byteCount < 0: " @kind object;
  #L11cce6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ccec.  v1:= temp @kind object;
  #L11ccee.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ccf4.  v1:= temp @kind object;
  #L11ccf6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11ccfc.  v1:= temp @kind object;
  #L11ccfe.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cd04.  throw v0;
  #L11cd06.  v0:= v5.`b.m.c` @type ^`boolean` @kind boolean;
  #L11cd0a.  if v0 == 0 then goto L11cd1e;
  #L11cd0e.  v0:= new `java.lang.IllegalStateException`;
  #L11cd12.  v1:= "closed" @kind object;
  #L11cd16.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cd1c.  throw v0;
  #L11cd1e.  v0:= v5.`b.m.a` @type ^`b.c` @kind object;
  #L11cd22.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11cd26.  v0:= lcmp(v0, v6);
  #L11cd2a.  if v0 >= 0 then goto L11cd52;
  #L11cd2e.  v0:= v5.`b.m.b` @type ^`b.r` @kind object;
  #L11cd32.  v1:= v5.`b.m.a` @type ^`b.c` @kind object;
  #L11cd36.  v2:= 8192L;
  #L11cd3a.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11cd40.  v0:= temp @kind wide;
  #L11cd42.  v2:= -1L;
  #L11cd46.  v0:= lcmp(v0, v2);
  #L11cd4a.  if v0 != 0 then goto L11cd1e;
  #L11cd4e.  v0:= 0I;
  #L11cd50.  return v0;
  #L11cd52.  v0:= 1I;
  #L11cd54.  goto L11cd50;
}
procedure `b.c` `c`(`b.m` v1 @kind this) @signature `Lb/m;.c:()Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11cd68.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11cd6c.  return v0 @kind object;
}
procedure `b.f` `c`(`b.m` v1 @kind this, `long` v2 ) @signature `Lb/m;.c:(J)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11cd80.  call `a`(v1, v2) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11cd86.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11cd8a.  call temp:= `c`(v0, v2) @signature `Lb/c;.c:(J)Lb/f;` @kind virtual;
  #L11cd90.  v0:= temp @kind object;
  #L11cd92.  return v0 @kind object;
}
procedure `void` `close`(`b.m` v1 @kind this) @signature `Lb/m;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11cda4.  v0:= v1.`b.m.c` @type ^`boolean` @kind boolean;
  #L11cda8.  if v0 == 0 then goto L11cdae;
  #L11cdac.  return @kind void;
  #L11cdae.  v0:= 1I;
  #L11cdb0.  v1.`b.m.c` @type ^`boolean` := v0 @kind boolean;
  #L11cdb4.  v0:= v1.`b.m.b` @type ^`b.r` @kind object;
  #L11cdb8.  call `close`(v0) @signature `Lb/r;.close:()V` @kind interface;
  #L11cdbe.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11cdc2.  call `r`(v0) @signature `Lb/c;.r:()V` @kind virtual;
  #L11cdc8.  goto L11cdac;
}
procedure `boolean` `e`(`b.m` v4 @kind this) @signature `Lb/m;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11cddc.  v0:= v4.`b.m.c` @type ^`boolean` @kind boolean;
  #L11cde0.  if v0 == 0 then goto L11cdf4;
  #L11cde4.  v0:= new `java.lang.IllegalStateException`;
  #L11cde8.  v1:= "closed" @kind object;
  #L11cdec.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cdf2.  throw v0;
  #L11cdf4.  v0:= v4.`b.m.a` @type ^`b.c` @kind object;
  #L11cdf8.  call temp:= `e`(v0) @signature `Lb/c;.e:()Z` @kind virtual;
  #L11cdfe.  v0:= temp;
  #L11ce00.  if v0 == 0 then goto L11ce28;
  #L11ce04.  v0:= v4.`b.m.b` @type ^`b.r` @kind object;
  #L11ce08.  v1:= v4.`b.m.a` @type ^`b.c` @kind object;
  #L11ce0c.  v2:= 8192L;
  #L11ce10.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11ce16.  v0:= temp @kind wide;
  #L11ce18.  v2:= -1L;
  #L11ce1c.  v0:= lcmp(v0, v2);
  #L11ce20.  if v0 != 0 then goto L11ce28;
  #L11ce24.  v0:= 1I;
  #L11ce26.  return v0;
  #L11ce28.  v0:= 0I;
  #L11ce2a.  goto L11ce26;
}
procedure `java.io.InputStream` `f`(`b.m` v1 @kind this) @signature `Lb/m;.f:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11ce3c.  v0:= new `b.m$1`;
  #L11ce40.  call `<init>`(v0, v1) @signature `Lb/m$1;.<init>:(Lb/m;)V` @kind direct;
  #L11ce46.  return v0 @kind object;
}
procedure `byte`[] `f`(`b.m` v1 @kind this, `long` v2 ) @signature `Lb/m;.f:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11ce58.  call `a`(v1, v2) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11ce5e.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11ce62.  call temp:= `f`(v0, v2) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #L11ce68.  v0:= temp @kind object;
  #L11ce6a.  return v0 @kind object;
}
procedure `void` `g`(`b.m` v7 @kind this, `long` v8 ) @signature `Lb/m;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11ce7c.  v4:= 0L;
  #L11ce80.  v0:= v7.`b.m.c` @type ^`boolean` @kind boolean;
  #L11ce84.  if v0 == 0 then goto L11ceb8;
  #L11ce88.  v0:= new `java.lang.IllegalStateException`;
  #L11ce8c.  v1:= "closed" @kind object;
  #L11ce90.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ce96.  throw v0;
  #L11ce98.  v0:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L11ce9c.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L11cea2.  v0:= temp @kind wide;
  #L11cea4.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11ceaa.  v0:= temp @kind wide;
  #L11ceac.  v2:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L11ceb0.  call `g`(v2, v0) @signature `Lb/c;.g:(J)V` @kind virtual;
  #L11ceb6.  v8:= v8 - v0 @kind long;
  #L11ceb8.  v0:= lcmp(v8, v4);
  #L11cebc.  if v0 <= 0 then goto L11cefc;
  #L11cec0.  v0:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L11cec4.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11cec8.  v0:= lcmp(v0, v4);
  #L11cecc.  if v0 != 0 then goto L11ce98;
  #L11ced0.  v0:= v7.`b.m.b` @type ^`b.r` @kind object;
  #L11ced4.  v1:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L11ced8.  v2:= 8192L;
  #L11cedc.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11cee2.  v0:= temp @kind wide;
  #L11cee4.  v2:= -1L;
  #L11cee8.  v0:= lcmp(v0, v2);
  #L11ceec.  if v0 != 0 then goto L11ce98;
  #L11cef0.  v0:= new `java.io.EOFException`;
  #L11cef4.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11cefa.  throw v0;
  #L11cefc.  return @kind void;
}
procedure `byte` `h`(`b.m` v2 @kind this) @signature `Lb/m;.h:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11cf10.  v0:= 1L;
  #L11cf14.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11cf1a.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11cf1e.  call temp:= `h`(v0) @signature `Lb/c;.h:()B` @kind virtual;
  #L11cf24.  v0:= temp;
  #L11cf26.  return v0;
}
procedure `short` `i`(`b.m` v2 @kind this) @signature `Lb/m;.i:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11cf38.  v0:= 2L;
  #L11cf3c.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11cf42.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11cf46.  call temp:= `i`(v0) @signature `Lb/c;.i:()S` @kind virtual;
  #L11cf4c.  v0:= temp;
  #L11cf4e.  return v0;
}
procedure `int` `j`(`b.m` v2 @kind this) @signature `Lb/m;.j:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11cf60.  v0:= 4L;
  #L11cf64.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11cf6a.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11cf6e.  call temp:= `j`(v0) @signature `Lb/c;.j:()I` @kind virtual;
  #L11cf74.  v0:= temp;
  #L11cf76.  return v0;
}
procedure `short` `k`(`b.m` v2 @kind this) @signature `Lb/m;.k:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11cf88.  v0:= 2L;
  #L11cf8c.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11cf92.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11cf96.  call temp:= `k`(v0) @signature `Lb/c;.k:()S` @kind virtual;
  #L11cf9c.  v0:= temp;
  #L11cf9e.  return v0;
}
procedure `int` `l`(`b.m` v2 @kind this) @signature `Lb/m;.l:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11cfb0.  v0:= 4L;
  #L11cfb4.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11cfba.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11cfbe.  call temp:= `l`(v0) @signature `Lb/c;.l:()I` @kind virtual;
  #L11cfc4.  v0:= temp;
  #L11cfc6.  return v0;
}
procedure `long` `m`(`b.m` v6 @kind this) @signature `Lb/m;.m:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11cfd8.  v1:= 0I;
  #L11cfda.  v2:= 1L;
  #L11cfde.  call `a`(v6, v2) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11cfe4.  v0:= v1;
  #L11cfe6.  v2:= v0 + 1;
  #L11cfea.  v2:= (`long`) v2 @kind i2l;
  #L11cfec.  call temp:= `b`(v6, v2) @signature `Lb/m;.b:(J)Z` @kind virtual;
  #L11cff2.  v2:= temp;
  #L11cff4.  if v2 == 0 then goto L11d06a;
  #L11cff8.  v2:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11cffc.  v4:= (`long`) v0 @kind i2l;
  #L11cffe.  call temp:= `b`(v2, v4) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L11d004.  v2:= temp;
  #L11d006.  v3:= 48I;
  #L11d00a.  if v2 < v3 then goto L11d016;
  #L11d00e.  v3:= 57I;
  #L11d012.  if v2 <= v3 then goto L11d064;
  #L11d016.  v3:= 97I;
  #L11d01a.  if v2 < v3 then goto L11d026;
  #L11d01e.  v3:= 102I;
  #L11d022.  if v2 <= v3 then goto L11d064;
  #L11d026.  v3:= 65I;
  #L11d02a.  if v2 < v3 then goto L11d036;
  #L11d02e.  v3:= 70I;
  #L11d032.  if v2 <= v3 then goto L11d064;
  #L11d036.  if v0 != 0 then goto L11d06a;
  #L11d03a.  v0:= new `java.lang.NumberFormatException`;
  #L11d03e.  v3:= "Expected leading [0-9a-fA-F] character but was %#x" @kind object;
  #L11d042.  v4:= 1I;
  #L11d044.  v4:= new `java.lang.Object`[v4];
  #L11d048.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L11d04e.  v2:= temp @kind object;
  #L11d050.  v4[v1]:= v2 @kind object;
  #L11d054.  call temp:= `format`(v3, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11d05a.  v1:= temp @kind object;
  #L11d05c.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d062.  throw v0;
  #L11d064.  v0:= v0 + 1;
  #L11d068.  goto L11cfe6;
  #L11d06a.  v0:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11d06e.  call temp:= `m`(v0) @signature `Lb/c;.m:()J` @kind virtual;
  #L11d074.  v0:= temp @kind wide;
  #L11d076.  return v0 @kind wide;
}
procedure `java.lang.String` `p`(`b.m` v8 @kind this) @signature `Lb/m;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11d088.  v0:= 10I;
  #L11d08c.  call temp:= `a`(v8, v0) @signature `Lb/m;.a:(B)J` @kind virtual;
  #L11d092.  v0:= temp @kind wide;
  #L11d094.  v2:= -1L;
  #L11d098.  v2:= lcmp(v0, v2);
  #L11d09c.  if v2 != 0 then goto L11d13e;
  #L11d0a0.  v1:= new `b.c`;
  #L11d0a4.  call `<init>`(v1) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11d0aa.  v0:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11d0ae.  v2:= 0L;
  #L11d0b2.  v4:= 32L;
  #L11d0b6.  v6:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11d0ba.  call temp:= `b`(v6) @signature `Lb/c;.b:()J` @kind virtual;
  #L11d0c0.  v6:= temp @kind wide;
  #L11d0c2.  call temp:= `min`(v4, v6) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11d0c8.  v4:= temp @kind wide;
  #L11d0ca.  call temp:= `a`(v0, v1, v2, v4) @signature `Lb/c;.a:(Lb/c;JJ)Lb/c;` @kind virtual;
  #L11d0d0.  v0:= new `java.io.EOFException`;
  #L11d0d4.  v2:= new `java.lang.StringBuilder`;
  #L11d0d8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11d0de.  v3:= "\\n not found: size=" @kind object;
  #L11d0e2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d0e8.  v2:= temp @kind object;
  #L11d0ea.  v3:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11d0ee.  call temp:= `b`(v3) @signature `Lb/c;.b:()J` @kind virtual;
  #L11d0f4.  v4:= temp @kind wide;
  #L11d0f6.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d0fc.  v2:= temp @kind object;
  #L11d0fe.  v3:= " content=" @kind object;
  #L11d102.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d108.  v2:= temp @kind object;
  #L11d10a.  call temp:= `n`(v1) @signature `Lb/c;.n:()Lb/f;` @kind virtual;
  #L11d110.  v1:= temp @kind object;
  #L11d112.  call temp:= `e`(v1) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L11d118.  v1:= temp @kind object;
  #L11d11a.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d120.  v1:= temp @kind object;
  #L11d122.  v2:= "…" @kind object;
  #L11d126.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d12c.  v1:= temp @kind object;
  #L11d12e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11d134.  v1:= temp @kind object;
  #L11d136.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d13c.  throw v0;
  #L11d13e.  v2:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11d142.  call temp:= `e`(v2, v0) @signature `Lb/c;.e:(J)Ljava/lang/String;` @kind virtual;
  #L11d148.  v0:= temp @kind object;
  #L11d14a.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`b.m` v2 @kind this) @signature `Lb/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d15c.  v0:= new `java.lang.StringBuilder`;
  #L11d160.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11d166.  v1:= "buffer(" @kind object;
  #L11d16a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d170.  v0:= temp @kind object;
  #L11d172.  v1:= v2.`b.m.b` @type ^`b.r` @kind object;
  #L11d176.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d17c.  v0:= temp @kind object;
  #L11d17e.  v1:= ")" @kind object;
  #L11d182.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d188.  v0:= temp @kind object;
  #L11d18a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11d190.  v0:= temp @kind object;
  #L11d192.  return v0 @kind object;
}
