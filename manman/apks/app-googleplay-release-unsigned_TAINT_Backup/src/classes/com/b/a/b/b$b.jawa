record `com.b.a.b.b$b` @kind class @AccessFlag FINAL extends `java.io.Serializable` @kind interface, `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type` `com.b.a.b.b$b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `com.b.a.b.b$b.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `com.b.a.b.b$b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.b.b$b` v4 @kind this, `java.lang.reflect.Type` v5 @kind object, `java.lang.reflect.Type` v6 @kind object, `java.lang.reflect.Type`[] v7 @kind object) @signature `Lcom/b/a/b/b$b;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13a310.  v2:= 1I;
  #L13a312.  v1:= 0I;
  #L13a314.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13a31a.  v0:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L13a31e.  if v0 == 0 then goto L13a35a;
  #L13a322.  v0:= v6 @kind object;
  #L13a324.  v0:= (`java.lang.Class`) v0 @kind object;
  #L13a328.  call temp:= `getModifiers`(v0) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L13a32e.  v3:= temp;
  #L13a330.  call temp:= `isStatic`(v3) @signature `Ljava/lang/reflect/Modifier;.isStatic:(I)Z` @kind static;
  #L13a336.  v3:= temp;
  #L13a338.  if v3 != 0 then goto L13a348;
  #L13a33c.  call temp:= `getEnclosingClass`(v0) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L13a342.  v0:= temp @kind object;
  #L13a344.  if v0 != 0 then goto L13a3c4;
  #L13a348.  v0:= v2;
  #L13a34a.  if v5 != 0 then goto L13a352;
  #L13a34e.  if v0 == 0 then goto L13a3c8;
  #L13a352.  v0:= v2;
  #L13a354.  call `a`(v0) @signature `Lcom/b/a/b/a;.a:(Z)V` @kind static;
  #L13a35a.  if v5 != 0 then goto L13a3cc;
  #L13a35e.  v0:= 0I;
  #L13a360.  v4.`com.b.a.b.b$b.a` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L13a364.  call temp:= `d`(v6) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L13a36a.  v0:= temp @kind object;
  #L13a36c.  v4.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L13a370.  call temp:= `clone`(v7) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L13a376.  v0:= temp @kind object;
  #L13a378.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L13a37c.  v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L13a380.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a384.  v0:= length @variable v0;
  #L13a386.  if v1 >= v0 then goto L13a3d6;
  #L13a38a.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a38e.  v0:= v0[v1] @kind object;
  #L13a392.  call temp:= `a`(v0) @signature `Lcom/b/a/b/a;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L13a398.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a39c.  v0:= v0[v1] @kind object;
  #L13a3a0.  call `h`(v0) @signature `Lcom/b/a/b/b;.h:(Ljava/lang/reflect/Type;)V` @kind static;
  #L13a3a6.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a3aa.  v2:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a3ae.  v2:= v2[v1] @kind object;
  #L13a3b2.  call temp:= `d`(v2) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L13a3b8.  v2:= temp @kind object;
  #L13a3ba.  v0[v1]:= v2 @kind object;
  #L13a3be.  v1:= v1 + 1;
  #L13a3c2.  goto L13a380;
  #L13a3c4.  v0:= v1;
  #L13a3c6.  goto L13a34a;
  #L13a3c8.  v0:= v1;
  #L13a3ca.  goto L13a354;
  #L13a3cc.  call temp:= `d`(v5) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L13a3d2.  v0:= temp @kind object;
  #L13a3d4.  goto L13a360;
  #L13a3d6.  return @kind void;
}
procedure `boolean` `equals`(`com.b.a.b.b$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/b$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13a3e8.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L13a3ec.  if v0 == 0 then goto L13a404;
  #L13a3f0.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L13a3f4.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L13a3fa.  v0:= temp;
  #L13a3fc.  if v0 == 0 then goto L13a404;
  #L13a400.  v0:= 1I;
  #L13a402.  return v0;
  #L13a404.  v0:= 0I;
  #L13a406.  goto L13a402;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`com.b.a.b.b$b` v1 @kind this) @signature `Lcom/b/a/b/b$b;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13a418.  v0:= v1.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a41c.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L13a422.  v0:= temp @kind object;
  #L13a424.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L13a428.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`com.b.a.b.b$b` v1 @kind this) @signature `Lcom/b/a/b/b$b;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13a43c.  v0:= v1.`com.b.a.b.b$b.a` @type ^`java.lang.reflect.Type` @kind object;
  #L13a440.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`com.b.a.b.b$b` v1 @kind this) @signature `Lcom/b/a/b/b$b;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13a454.  v0:= v1.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13a458.  return v0 @kind object;
}
procedure `int` `hashCode`(`com.b.a.b.b$b` v2 @kind this) @signature `Lcom/b/a/b/b$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13a46c.  v0:= v2.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a470.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L13a476.  v0:= temp;
  #L13a478.  v1:= v2.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13a47c.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L13a482.  v1:= temp;
  #L13a484.  v0:= v0 ^~ v1 @kind int;
  #L13a486.  v1:= v2.`com.b.a.b.b$b.a` @type ^`java.lang.reflect.Type` @kind object;
  #L13a48a.  call temp:= `a`(v1) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/Object;)I` @kind static;
  #L13a490.  v1:= temp;
  #L13a492.  v0:= v0 ^~ v1 @kind int;
  #L13a494.  return v0;
}
procedure `java.lang.String` `toString`(`com.b.a.b.b$b` v4 @kind this) @signature `Lcom/b/a/b/b$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13a4a8.  v1:= new `java.lang.StringBuilder`;
  #L13a4ac.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a4b0.  v0:= length @variable v0;
  #L13a4b2.  v0:= v0 + 1;
  #L13a4b6.  v0:= v0 * 30;
  #L13a4ba.  call `<init>`(v1, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L13a4c0.  v0:= v4.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13a4c4.  call temp:= `f`(v0) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L13a4ca.  v0:= temp @kind object;
  #L13a4cc.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a4d2.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a4d6.  v0:= length @variable v0;
  #L13a4d8.  if v0 != 0 then goto L13a4e6;
  #L13a4dc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13a4e2.  v0:= temp @kind object;
  #L13a4e4.  return v0 @kind object;
  #L13a4e6.  v0:= "<" @kind object;
  #L13a4ea.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a4f0.  v0:= temp @kind object;
  #L13a4f2.  v2:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a4f6.  v3:= 0I;
  #L13a4f8.  v2:= v2[v3] @kind object;
  #L13a4fc.  call temp:= `f`(v2) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L13a502.  v2:= temp @kind object;
  #L13a504.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a50a.  v0:= 1I;
  #L13a50c.  v2:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a510.  v2:= length @variable v2;
  #L13a512.  if v0 >= v2 then goto L13a53e;
  #L13a516.  v2:= ", " @kind object;
  #L13a51a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a520.  v2:= temp @kind object;
  #L13a522.  v3:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a526.  v3:= v3[v0] @kind object;
  #L13a52a.  call temp:= `f`(v3) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L13a530.  v3:= temp @kind object;
  #L13a532.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a538.  v0:= v0 + 1;
  #L13a53c.  goto L13a50c;
  #L13a53e.  v0:= ">" @kind object;
  #L13a542.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a548.  v0:= temp @kind object;
  #L13a54a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13a550.  v0:= temp @kind object;
  #L13a552.  goto L13a4e4;
}
