record `com.b.a.d.a` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface {
  `int` `com.b.a.d.a.a` @AccessFlag ;
  `java.io.Reader` `com.b.a.d.a.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.b.a.d.a.d` @AccessFlag PRIVATE;
  `char`[] `com.b.a.d.a.e` @AccessFlag PRIVATE_FINAL;
  `int` `com.b.a.d.a.f` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.g` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.h` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.i` @AccessFlag PRIVATE;
  `long` `com.b.a.d.a.j` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.k` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.a.l` @AccessFlag PRIVATE;
  `int`[] `com.b.a.d.a.m` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.n` @AccessFlag PRIVATE;
  `java.lang.String`[] `com.b.a.d.a.o` @AccessFlag PRIVATE;
  `int`[] `com.b.a.d.a.p` @AccessFlag PRIVATE;
}
global `char`[] `@@com.b.a.d.a.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/d/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L132b70.  v0:= ")]}'\n" @kind object;
  #L132b74.  call temp:= `toCharArray`(v0) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L132b7a.  v0:= temp @kind object;
  #L132b7c.  `@@com.b.a.d.a.b` @type ^`char`[] := v0 @kind object;
  #L132b80.  v0:= new `com.b.a.d.a$1`;
  #L132b84.  call `<init>`(v0) @signature `Lcom/b/a/d/a$1;.<init>:()V` @kind direct;
  #L132b8a.  `@@com.b.a.b.e.a` @type ^`com.b.a.b.e` := v0 @kind object;
  #L132b8e.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.d.a` v4 @kind this, `java.io.Reader` v5 @kind object) @signature `Lcom/b/a/d/a;.<init>:(Ljava/io/Reader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L132ba0.  v3:= 32I;
  #L132ba4.  v1:= 0I;
  #L132ba6.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L132bac.  v4.`com.b.a.d.a.d` @type ^`boolean` := v1 @kind boolean;
  #L132bb0.  v0:= 1024I;
  #L132bb4.  v0:= new `char`[v0];
  #L132bb8.  v4.`com.b.a.d.a.e` @type ^`char`[] := v0 @kind object;
  #L132bbc.  v4.`com.b.a.d.a.f` @type ^`int` := v1;
  #L132bc0.  v4.`com.b.a.d.a.g` @type ^`int` := v1;
  #L132bc4.  v4.`com.b.a.d.a.h` @type ^`int` := v1;
  #L132bc8.  v4.`com.b.a.d.a.i` @type ^`int` := v1;
  #L132bcc.  v4.`com.b.a.d.a.a` @type ^`int` := v1;
  #L132bd0.  v0:= new `int`[v3];
  #L132bd4.  v4.`com.b.a.d.a.m` @type ^`int`[] := v0 @kind object;
  #L132bd8.  v4.`com.b.a.d.a.n` @type ^`int` := v1;
  #L132bdc.  v0:= v4.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L132be0.  v1:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L132be4.  v2:= v1 + 1;
  #L132be8.  v4.`com.b.a.d.a.n` @type ^`int` := v2;
  #L132bec.  v2:= 6I;
  #L132bee.  v0[v1]:= v2;
  #L132bf2.  v0:= new `java.lang.String`[v3];
  #L132bf6.  v4.`com.b.a.d.a.o` @type ^`java.lang.String`[] := v0 @kind object;
  #L132bfa.  v0:= new `int`[v3];
  #L132bfe.  v4.`com.b.a.d.a.p` @type ^`int`[] := v0 @kind object;
  #L132c02.  if v5 != 0 then goto L132c16;
  #L132c06.  v0:= new `java.lang.NullPointerException`;
  #L132c0a.  v1:= "in == null" @kind object;
  #L132c0e.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L132c14.  throw v0;
  #L132c16.  v4.`com.b.a.d.a.c` @type ^`java.io.Reader` := v5 @kind object;
  #L132c1a.  return @kind void;
}
procedure `java.lang.String` `a`(`com.b.a.d.a` v1 @kind object) @signature `Lcom/b/a/d/a;.a:(Lcom/b/a/d/a;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L132c2c.  call temp:= `x`(v1) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L132c32.  v0:= temp @kind object;
  #L132c34.  return v0 @kind object;
}
procedure `void` `a`(`com.b.a.d.a` v6 @kind this, `int` v7 ) @signature `Lcom/b/a/d/a;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L132c48.  v5:= 0I;
  #L132c4a.  v0:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L132c4e.  v1:= v6.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L132c52.  v1:= length @variable v1;
  #L132c54.  if v0 != v1 then goto L132cb2;
  #L132c58.  v0:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L132c5c.  v0:= v0 * 2;
  #L132c60.  v0:= new `int`[v0];
  #L132c64.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L132c68.  v1:= v1 * 2;
  #L132c6c.  v1:= new `int`[v1];
  #L132c70.  v2:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L132c74.  v2:= v2 * 2;
  #L132c78.  v2:= new `java.lang.String`[v2];
  #L132c7c.  v3:= v6.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L132c80.  v4:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L132c84.  call `arraycopy`(v3, v5, v0, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L132c8a.  v3:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L132c8e.  v4:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L132c92.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L132c98.  v3:= v6.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L132c9c.  v4:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L132ca0.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L132ca6.  v6.`com.b.a.d.a.m` @type ^`int`[] := v0 @kind object;
  #L132caa.  v6.`com.b.a.d.a.p` @type ^`int`[] := v1 @kind object;
  #L132cae.  v6.`com.b.a.d.a.o` @type ^`java.lang.String`[] := v2 @kind object;
  #L132cb2.  v0:= v6.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L132cb6.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L132cba.  v2:= v1 + 1;
  #L132cbe.  v6.`com.b.a.d.a.n` @type ^`int` := v2;
  #L132cc2.  v0[v1]:= v7;
  #L132cc6.  return @kind void;
}
procedure `boolean` `a`(`com.b.a.d.a` v1 @kind this, `char` v2 ) @signature `Lcom/b/a/d/a;.a:(C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L132cd8.  goto L132cec;
  #L132cde.  v0:= 1I;
  #L132ce0.  return v0;
  #L132ce2.  call `v`(v1) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L132ce8.  v0:= 0I;
  #L132cea.  goto L132ce0;
  #L132cec.  switch v2
                  | 9 => goto L132ce8
                  | 10 => goto L132ce8
                  | 12 => goto L132ce8
                  | 13 => goto L132ce8
                  | 32 => goto L132ce8
                  | 35 => goto L132ce2
                  | 44 => goto L132ce8
                  | 47 => goto L132ce2
                  | 58 => goto L132ce8
                  | 59 => goto L132ce2
                  | 61 => goto L132ce2
                  | 91 => goto L132ce8
                  | 92 => goto L132ce2
                  | 93 => goto L132ce8
                  | 123 => goto L132ce8
                  | 125 => goto L132ce8
                  | else => goto L132cde;
}
procedure `boolean` `a`(`com.b.a.d.a` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lcom/b/a/d/a;.a:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L132d80.  v1:= 0I;
  #L132d82.  v0:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L132d86.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L132d8c.  v2:= temp;
  #L132d8e.  v0:= v0 + v2 @kind int;
  #L132d90.  v2:= v4.`com.b.a.d.a.g` @type ^`int`;
  #L132d94.  if v0 <= v2 then goto L132dac;
  #L132d98.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L132d9e.  v0:= temp;
  #L132da0.  call temp:= `b`(v4, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L132da6.  v0:= temp;
  #L132da8.  if v0 == 0 then goto L132e16;
  #L132dac.  v0:= v4.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L132db0.  v2:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L132db4.  v0:= v0[v2] @kind char;
  #L132db8.  v2:= 10I;
  #L132dbc.  if v0 != v2 then goto L132de6;
  #L132dc0.  v0:= v4.`com.b.a.d.a.h` @type ^`int`;
  #L132dc4.  v0:= v0 + 1;
  #L132dc8.  v4.`com.b.a.d.a.h` @type ^`int` := v0;
  #L132dcc.  v0:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L132dd0.  v0:= v0 + 1;
  #L132dd4.  v4.`com.b.a.d.a.i` @type ^`int` := v0;
  #L132dd8.  v0:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L132ddc.  v0:= v0 + 1;
  #L132de0.  v4.`com.b.a.d.a.f` @type ^`int` := v0;
  #L132de4.  goto L132d82;
  #L132de6.  v0:= v1;
  #L132de8.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L132dee.  v2:= temp;
  #L132df0.  if v0 >= v2 then goto L132e14;
  #L132df4.  v2:= v4.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L132df8.  v3:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L132dfc.  v3:= v3 + v0 @kind int;
  #L132dfe.  v2:= v2[v3] @kind char;
  #L132e02.  call temp:= `charAt`(v5, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L132e08.  v3:= temp;
  #L132e0a.  if v2 != v3 then goto L132dd8;
  #L132e0e.  v0:= v0 + 1;
  #L132e12.  goto L132de8;
  #L132e14.  v1:= 1I;
  #L132e16.  return v1;
}
procedure `int` `b`(`com.b.a.d.a` v5 @kind this, `boolean` v6 ) @signature `Lcom/b/a/d/a;.b:(Z)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L132e28.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L132e2c.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L132e30.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L132e34.  if v1 != v0 then goto L132e90;
  #L132e38.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L132e3c.  v0:= 1I;
  #L132e3e.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L132e44.  v0:= temp;
  #L132e46.  if v0 != 0 then goto L132e88;
  #L132e4a.  if v6 == 0 then goto L132fa6;
  #L132e4e.  v0:= new `java.io.EOFException`;
  #L132e52.  v1:= new `java.lang.StringBuilder`;
  #L132e56.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L132e5c.  v2:= "End of input" @kind object;
  #L132e60.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L132e66.  v1:= temp @kind object;
  #L132e68.  call temp:= `x`(v5) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L132e6e.  v2:= temp @kind object;
  #L132e70.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L132e76.  v1:= temp @kind object;
  #L132e78.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L132e7e.  v1:= temp @kind object;
  #L132e80.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L132e86.  throw v0;
  #L132e88.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L132e8c.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L132e90.  v2:= v1 + 1;
  #L132e94.  v1:= v3[v1] @kind char;
  #L132e98.  v4:= 10I;
  #L132e9c.  if v1 != v4 then goto L132eb4;
  #L132ea0.  v1:= v5.`com.b.a.d.a.h` @type ^`int`;
  #L132ea4.  v1:= v1 + 1;
  #L132ea8.  v5.`com.b.a.d.a.h` @type ^`int` := v1;
  #L132eac.  v5.`com.b.a.d.a.i` @type ^`int` := v2;
  #L132eb0.  v1:= v2;
  #L132eb2.  goto L132e34;
  #L132eb4.  v4:= 32I;
  #L132eb8.  if v1 == v4 then goto L132faa;
  #L132ebc.  v4:= 13I;
  #L132ec0.  if v1 == v4 then goto L132faa;
  #L132ec4.  v4:= 9I;
  #L132ec8.  if v1 != v4 then goto L132ed0;
  #L132ecc.  v1:= v2;
  #L132ece.  goto L132e34;
  #L132ed0.  v4:= 47I;
  #L132ed4.  if v1 != v4 then goto L132f7a;
  #L132ed8.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L132edc.  if v2 != v0 then goto L132f0a;
  #L132ee0.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L132ee4.  v0:= v0 + -1;
  #L132ee8.  v5.`com.b.a.d.a.f` @type ^`int` := v0;
  #L132eec.  v0:= 2I;
  #L132eee.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L132ef4.  v0:= temp;
  #L132ef6.  v2:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L132efa.  v2:= v2 + 1;
  #L132efe.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L132f02.  if v0 != 0 then goto L132f0a;
  #L132f06.  v0:= v1;
  #L132f08.  return v0;
  #L132f0a.  call `v`(v5) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L132f10.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L132f14.  v0:= v3[v0] @kind char;
  #L132f18.  goto L132fb0;
  #L132f1e.  v0:= v1;
  #L132f20.  goto L132f08;
  #L132f22.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L132f26.  v0:= v0 + 1;
  #L132f2a.  v5.`com.b.a.d.a.f` @type ^`int` := v0;
  #L132f2e.  v0:= "*/" @kind object;
  #L132f32.  call temp:= `a`(v5, v0) @signature `Lcom/b/a/d/a;.a:(Ljava/lang/String;)Z` @kind direct;
  #L132f38.  v0:= temp;
  #L132f3a.  if v0 != 0 then goto L132f4c;
  #L132f3e.  v0:= "Unterminated comment" @kind object;
  #L132f42.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L132f48.  v0:= temp @kind object;
  #L132f4a.  throw v0;
  #L132f4c.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L132f50.  v1:= v0 + 2;
  #L132f54.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L132f58.  goto L132e34;
  #L132f5c.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L132f60.  v0:= v0 + 1;
  #L132f64.  v5.`com.b.a.d.a.f` @type ^`int` := v0;
  #L132f68.  call `w`(v5) @signature `Lcom/b/a/d/a;.w:()V` @kind direct;
  #L132f6e.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L132f72.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L132f76.  goto L132e34;
  #L132f7a.  v0:= 35I;
  #L132f7e.  if v1 != v0 then goto L132f9e;
  #L132f82.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L132f86.  call `v`(v5) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L132f8c.  call `w`(v5) @signature `Lcom/b/a/d/a;.w:()V` @kind direct;
  #L132f92.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L132f96.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L132f9a.  goto L132e34;
  #L132f9e.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L132fa2.  v0:= v1;
  #L132fa4.  goto L132f08;
  #L132fa6.  v0:= -1I;
  #L132fa8.  goto L132f08;
  #L132faa.  v1:= v2;
  #L132fac.  goto L132e34;
  #L132fb0.  switch v0
                  | 42 => goto L132f22
                  | 47 => goto L132f5c
                  | else => goto L132f1e;
}
procedure `java.io.IOException` `b`(`com.b.a.d.a` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L132fd4.  v0:= new `com.b.a.d.d`;
  #L132fd8.  v1:= new `java.lang.StringBuilder`;
  #L132fdc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L132fe2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L132fe8.  v1:= temp @kind object;
  #L132fea.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L132ff0.  v2:= temp @kind object;
  #L132ff2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L132ff8.  v1:= temp @kind object;
  #L132ffa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L133000.  v1:= temp @kind object;
  #L133002.  call `<init>`(v0, v1) @signature `Lcom/b/a/d/d;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L133008.  throw v0;
}
procedure `java.lang.String` `b`(`com.b.a.d.a` v7 @kind this, `char` v8 ) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13301c.  v4:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L133020.  v5:= new `java.lang.StringBuilder`;
  #L133024.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13302a.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13302e.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L133032.  v3:= v0;
  #L133034.  if v3 >= v1 then goto L1330b0;
  #L133038.  v2:= v3 + 1;
  #L13303c.  v3:= v4[v3] @kind char;
  #L133040.  if v3 != v8 then goto L133060;
  #L133044.  v7.`com.b.a.d.a.f` @type ^`int` := v2;
  #L133048.  v1:= v2 - v0 @kind int;
  #L13304c.  v1:= v1 + -1;
  #L133050.  call temp:= `append`(v5, v4, v0, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L133056.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13305c.  v0:= temp @kind object;
  #L13305e.  return v0 @kind object;
  #L133060.  v6:= 92I;
  #L133064.  if v3 != v6 then goto L133096;
  #L133068.  v7.`com.b.a.d.a.f` @type ^`int` := v2;
  #L13306c.  v1:= v2 - v0 @kind int;
  #L133070.  v1:= v1 + -1;
  #L133074.  call temp:= `append`(v5, v4, v0, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L13307a.  call temp:= `y`(v7) @signature `Lcom/b/a/d/a;.y:()C` @kind direct;
  #L133080.  v0:= temp;
  #L133082.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L133088.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13308c.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L133090.  v2:= v0;
  #L133092.  v3:= v2;
  #L133094.  goto L133034;
  #L133096.  v6:= 10I;
  #L13309a.  if v3 != v6 then goto L133092;
  #L13309e.  v3:= v7.`com.b.a.d.a.h` @type ^`int`;
  #L1330a2.  v3:= v3 + 1;
  #L1330a6.  v7.`com.b.a.d.a.h` @type ^`int` := v3;
  #L1330aa.  v7.`com.b.a.d.a.i` @type ^`int` := v2;
  #L1330ae.  goto L133092;
  #L1330b0.  v1:= v3 - v0 @kind int;
  #L1330b4.  call temp:= `append`(v5, v4, v0, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L1330ba.  v7.`com.b.a.d.a.f` @type ^`int` := v3;
  #L1330be.  v0:= 1I;
  #L1330c0.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L1330c6.  v0:= temp;
  #L1330c8.  if v0 != 0 then goto L13302a;
  #L1330cc.  v0:= "Unterminated string" @kind object;
  #L1330d0.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L1330d6.  v0:= temp @kind object;
  #L1330d8.  throw v0;
}
procedure `boolean` `b`(`com.b.a.d.a` v6 @kind this, `int` v7 ) @signature `Lcom/b/a/d/a;.b:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1330ec.  v0:= 0I;
  #L1330ee.  v1:= v6.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L1330f2.  v2:= v6.`com.b.a.d.a.i` @type ^`int`;
  #L1330f6.  v3:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L1330fa.  v2:= v2 - v3 @kind int;
  #L1330fc.  v6.`com.b.a.d.a.i` @type ^`int` := v2;
  #L133100.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L133104.  v3:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L133108.  if v2 == v3 then goto L1331a2;
  #L13310c.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L133110.  v3:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L133114.  v2:= v2 - v3 @kind int;
  #L133116.  v6.`com.b.a.d.a.g` @type ^`int` := v2;
  #L13311a.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L13311e.  v3:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L133122.  call `arraycopy`(v1, v2, v1, v0, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L133128.  v6.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13312c.  v2:= v6.`com.b.a.d.a.c` @type ^`java.io.Reader` @kind object;
  #L133130.  v3:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L133134.  v4:= length @variable v1;
  #L133136.  v5:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L13313a.  v4:= v4 - v5 @kind int;
  #L13313c.  call temp:= `read`(v2, v1, v3, v4) @signature `Ljava/io/Reader;.read:([CII)I` @kind virtual;
  #L133142.  v2:= temp;
  #L133144.  v3:= -1I;
  #L133146.  if v2 == v3 then goto L1331a0;
  #L13314a.  v3:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L13314e.  v2:= v2 + v3 @kind int;
  #L133150.  v6.`com.b.a.d.a.g` @type ^`int` := v2;
  #L133154.  v2:= v6.`com.b.a.d.a.h` @type ^`int`;
  #L133158.  if v2 != 0 then goto L133196;
  #L13315c.  v2:= v6.`com.b.a.d.a.i` @type ^`int`;
  #L133160.  if v2 != 0 then goto L133196;
  #L133164.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L133168.  if v2 <= 0 then goto L133196;
  #L13316c.  v2:= v1[v0] @kind char;
  #L133170.  v3:= 65279I;
  #L133176.  if v2 != v3 then goto L133196;
  #L13317a.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L13317e.  v2:= v2 + 1;
  #L133182.  v6.`com.b.a.d.a.f` @type ^`int` := v2;
  #L133186.  v2:= v6.`com.b.a.d.a.i` @type ^`int`;
  #L13318a.  v2:= v2 + 1;
  #L13318e.  v6.`com.b.a.d.a.i` @type ^`int` := v2;
  #L133192.  v7:= v7 + 1;
  #L133196.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L13319a.  if v2 < v7 then goto L13312c;
  #L13319e.  v0:= 1I;
  #L1331a0.  return v0;
  #L1331a2.  v6.`com.b.a.d.a.g` @type ^`int` := v0;
  #L1331a6.  goto L133128;
}
procedure `void` `c`(`com.b.a.d.a` v5 @kind this, `char` v6 ) @signature `Lcom/b/a/d/a;.c:(C)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1331b8.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L1331bc.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L1331c0.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L1331c4.  v2:= v1;
  #L1331c6.  if v2 >= v0 then goto L133214;
  #L1331ca.  v1:= v2 + 1;
  #L1331ce.  v2:= v3[v2] @kind char;
  #L1331d2.  if v2 != v6 then goto L1331dc;
  #L1331d6.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L1331da.  return @kind void;
  #L1331dc.  v4:= 92I;
  #L1331e0.  if v2 != v4 then goto L1331fa;
  #L1331e4.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L1331e8.  call temp:= `y`(v5) @signature `Lcom/b/a/d/a;.y:()C` @kind direct;
  #L1331ee.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L1331f2.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L1331f6.  v2:= v1;
  #L1331f8.  goto L1331c6;
  #L1331fa.  v4:= 10I;
  #L1331fe.  if v2 != v4 then goto L1331f6;
  #L133202.  v2:= v5.`com.b.a.d.a.h` @type ^`int`;
  #L133206.  v2:= v2 + 1;
  #L13320a.  v5.`com.b.a.d.a.h` @type ^`int` := v2;
  #L13320e.  v5.`com.b.a.d.a.i` @type ^`int` := v1;
  #L133212.  goto L1331f6;
  #L133214.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L133218.  v0:= 1I;
  #L13321a.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L133220.  v0:= temp;
  #L133222.  if v0 != 0 then goto L1331bc;
  #L133226.  v0:= "Unterminated string" @kind object;
  #L13322a.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L133230.  v0:= temp @kind object;
  #L133232.  throw v0;
}
procedure `int` `o`(`com.b.a.d.a` v8 @kind this) @signature `Lcom/b/a/d/a;.o:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L133244.  v3:= 0I;
  #L133246.  v0:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13324a.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13324e.  v0:= v0[v1] @kind char;
  #L133252.  v1:= 116I;
  #L133256.  if v0 == v1 then goto L133262;
  #L13325a.  v1:= 84I;
  #L13325e.  if v0 != v1 then goto L13329c;
  #L133262.  v2:= "true" @kind object;
  #L133266.  v1:= "TRUE" @kind object;
  #L13326a.  v0:= 5I;
  #L13326c.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L133272.  v5:= temp;
  #L133274.  v4:= 1I;
  #L133276.  if v4 >= v5 then goto L133308;
  #L13327a.  v6:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13327e.  v6:= v6 + v4 @kind int;
  #L133280.  v7:= v8.`com.b.a.d.a.g` @type ^`int`;
  #L133284.  if v6 < v7 then goto L1332d8;
  #L133288.  v6:= v4 + 1;
  #L13328c.  call temp:= `b`(v8, v6) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L133292.  v6:= temp;
  #L133294.  if v6 != 0 then goto L1332d8;
  #L133298.  v0:= v3;
  #L13329a.  return v0;
  #L13329c.  v1:= 102I;
  #L1332a0.  if v0 == v1 then goto L1332ac;
  #L1332a4.  v1:= 70I;
  #L1332a8.  if v0 != v1 then goto L1332b8;
  #L1332ac.  v2:= "false" @kind object;
  #L1332b0.  v1:= "FALSE" @kind object;
  #L1332b4.  v0:= 6I;
  #L1332b6.  goto L13326c;
  #L1332b8.  v1:= 110I;
  #L1332bc.  if v0 == v1 then goto L1332c8;
  #L1332c0.  v1:= 78I;
  #L1332c4.  if v0 != v1 then goto L1332d4;
  #L1332c8.  v2:= "null" @kind object;
  #L1332cc.  v1:= "NULL" @kind object;
  #L1332d0.  v0:= 7I;
  #L1332d2.  goto L13326c;
  #L1332d4.  v0:= v3;
  #L1332d6.  goto L13329a;
  #L1332d8.  v6:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L1332dc.  v7:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L1332e0.  v7:= v7 + v4 @kind int;
  #L1332e2.  v6:= v6[v7] @kind char;
  #L1332e6.  call temp:= `charAt`(v2, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1332ec.  v7:= temp;
  #L1332ee.  if v6 == v7 then goto L133302;
  #L1332f2.  call temp:= `charAt`(v1, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1332f8.  v7:= temp;
  #L1332fa.  if v6 == v7 then goto L133302;
  #L1332fe.  v0:= v3;
  #L133300.  goto L13329a;
  #L133302.  v4:= v4 + 1;
  #L133306.  goto L133276;
  #L133308.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13330c.  v1:= v1 + v5 @kind int;
  #L13330e.  v2:= v8.`com.b.a.d.a.g` @type ^`int`;
  #L133312.  if v1 < v2 then goto L133326;
  #L133316.  v1:= v5 + 1;
  #L13331a.  call temp:= `b`(v8, v1) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L133320.  v1:= temp;
  #L133322.  if v1 == 0 then goto L133344;
  #L133326.  v1:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13332a.  v2:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13332e.  v2:= v2 + v5 @kind int;
  #L133330.  v1:= v1[v2] @kind char;
  #L133334.  call temp:= `a`(v8, v1) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L13333a.  v1:= temp;
  #L13333c.  if v1 == 0 then goto L133344;
  #L133340.  v0:= v3;
  #L133342.  goto L13329a;
  #L133344.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L133348.  v1:= v1 + v5 @kind int;
  #L13334a.  v8.`com.b.a.d.a.f` @type ^`int` := v1;
  #L13334e.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L133352.  goto L13329a;
}
procedure `int` `s`(`com.b.a.d.a` v15 @kind this) @signature `Lcom/b/a/d/a;.s:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L133364.  v11:= v15.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L133368.  v2:= v15.`com.b.a.d.a.f` @type ^`int`;
  #L13336c.  v1:= v15.`com.b.a.d.a.g` @type ^`int`;
  #L133370.  v6:= 0L;
  #L133374.  v5:= 0I;
  #L133376.  v4:= 1I;
  #L133378.  v3:= 0I;
  #L13337a.  v0:= 0I;
  #L13337c.  v10:= v0;
  #L13337e.  v0:= v1;
  #L133380.  v1:= v2;
  #L133382.  v2:= v1 + v10 @kind int;
  #L133386.  if v2 != v0 then goto L1333e2;
  #L13338a.  v0:= length @variable v11;
  #L13338c.  if v10 != v0 then goto L133394;
  #L133390.  v0:= 0I;
  #L133392.  return v0;
  #L133394.  v0:= v10 + 1;
  #L133398.  call temp:= `b`(v15, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13339e.  v0:= temp;
  #L1333a0.  if v0 != 0 then goto L1333da;
  #L1333a4.  v0:= 2I;
  #L1333a6.  if v3 != v0 then goto L133522;
  #L1333aa.  if v4 == 0 then goto L133522;
  #L1333ae.  v0:= -9223372036854775808L;
  #L1333b2.  v0:= lcmp(v6, v0);
  #L1333b6.  if v0 != 0 then goto L1333be;
  #L1333ba.  if v5 == 0 then goto L133522;
  #L1333be.  if v5 == 0 then goto L13351c;
  #L1333c2.  v15.`com.b.a.d.a.j` @type ^`long` := v6 @kind wide;
  #L1333c6.  v0:= v15.`com.b.a.d.a.f` @type ^`int`;
  #L1333ca.  v0:= v0 + v10 @kind int;
  #L1333cc.  v15.`com.b.a.d.a.f` @type ^`int` := v0;
  #L1333d0.  v0:= 15I;
  #L1333d4.  v15.`com.b.a.d.a.a` @type ^`int` := v0;
  #L1333d8.  goto L133392;
  #L1333da.  v1:= v15.`com.b.a.d.a.f` @type ^`int`;
  #L1333de.  v0:= v15.`com.b.a.d.a.g` @type ^`int`;
  #L1333e2.  v2:= v1 + v10 @kind int;
  #L1333e6.  v2:= v11[v2] @kind char;
  #L1333ea.  goto L133554;
  #L1333f0.  v8:= 48I;
  #L1333f4.  if v2 < v8 then goto L133400;
  #L1333f8.  v8:= 57I;
  #L1333fc.  if v2 <= v8 then goto L13347a;
  #L133400.  call temp:= `a`(v15, v2) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L133406.  v0:= temp;
  #L133408.  if v0 == 0 then goto L1333a4;
  #L13340c.  v0:= 0I;
  #L13340e.  goto L133392;
  #L133410.  if v3 != 0 then goto L13342c;
  #L133414.  v3:= 1I;
  #L133416.  v2:= 1I;
  #L133418.  v14:= v4;
  #L13341a.  v4:= v3;
  #L13341c.  v3:= v14;
  #L13341e.  v5:= v10 + 1;
  #L133422.  v10:= v5;
  #L133424.  v5:= v4;
  #L133426.  v4:= v3;
  #L133428.  v3:= v2;
  #L13342a.  goto L133382;
  #L13342c.  v2:= 5I;
  #L13342e.  if v3 != v2 then goto L13343a;
  #L133432.  v2:= 6I;
  #L133434.  v3:= v4;
  #L133436.  v4:= v5;
  #L133438.  goto L13341e;
  #L13343a.  v0:= 0I;
  #L13343c.  goto L133392;
  #L13343e.  v2:= 5I;
  #L133440.  if v3 != v2 then goto L13344c;
  #L133444.  v2:= 6I;
  #L133446.  v3:= v4;
  #L133448.  v4:= v5;
  #L13344a.  goto L13341e;
  #L13344c.  v0:= 0I;
  #L13344e.  goto L133392;
  #L133450.  v2:= 2I;
  #L133452.  if v3 == v2 then goto L13345c;
  #L133456.  v2:= 4I;
  #L133458.  if v3 != v2 then goto L133464;
  #L13345c.  v2:= 5I;
  #L13345e.  v3:= v4;
  #L133460.  v4:= v5;
  #L133462.  goto L13341e;
  #L133464.  v0:= 0I;
  #L133466.  goto L133392;
  #L133468.  v2:= 2I;
  #L13346a.  if v3 != v2 then goto L133476;
  #L13346e.  v2:= 3I;
  #L133470.  v3:= v4;
  #L133472.  v4:= v5;
  #L133474.  goto L13341e;
  #L133476.  v0:= 0I;
  #L133478.  goto L133392;
  #L13347a.  v8:= 1I;
  #L13347c.  if v3 == v8 then goto L133484;
  #L133480.  if v3 != 0 then goto L133494;
  #L133484.  v2:= v2 + -48;
  #L133488.  v2:= -v2 @kind int;
  #L13348a.  v6:= (`long`) v2 @kind i2l;
  #L13348c.  v2:= 2I;
  #L13348e.  v3:= v4;
  #L133490.  v4:= v5;
  #L133492.  goto L13341e;
  #L133494.  v8:= 2I;
  #L133496.  if v3 != v8 then goto L1334fa;
  #L13349a.  v8:= 0L;
  #L13349e.  v8:= lcmp(v6, v8);
  #L1334a2.  if v8 != 0 then goto L1334ac;
  #L1334a6.  v0:= 0I;
  #L1334a8.  goto L133392;
  #L1334ac.  v8:= 10L;
  #L1334b0.  v8:= v8 * v6 @kind long;
  #L1334b2.  v2:= v2 + -48;
  #L1334b6.  v12:= (`long`) v2 @kind i2l;
  #L1334b8.  v8:= v8 - v12 @kind long;
  #L1334ba.  v12:= -922337203685477580L;
  #L1334c4.  v2:= lcmp(v6, v12);
  #L1334c8.  if v2 > 0 then goto L1334e6;
  #L1334cc.  v12:= -922337203685477580L;
  #L1334d6.  v2:= lcmp(v6, v12);
  #L1334da.  if v2 != 0 then goto L1334f6;
  #L1334de.  v2:= lcmp(v8, v6);
  #L1334e2.  if v2 >= 0 then goto L1334f6;
  #L1334e6.  v2:= 1I;
  #L1334e8.  v2:= v2 ^& v4 @kind int;
  #L1334ea.  v4:= v5;
  #L1334ec.  v6:= v8 @kind wide;
  #L1334ee.  v14:= v3;
  #L1334f0.  v3:= v2;
  #L1334f2.  v2:= v14;
  #L1334f4.  goto L13341e;
  #L1334f6.  v2:= 0I;
  #L1334f8.  goto L1334e8;
  #L1334fa.  v2:= 3I;
  #L1334fc.  if v3 != v2 then goto L133508;
  #L133500.  v2:= 4I;
  #L133502.  v3:= v4;
  #L133504.  v4:= v5;
  #L133506.  goto L13341e;
  #L133508.  v2:= 5I;
  #L13350a.  if v3 == v2 then goto L133514;
  #L13350e.  v2:= 6I;
  #L133510.  if v3 != v2 then goto L13354a;
  #L133514.  v2:= 7I;
  #L133516.  v3:= v4;
  #L133518.  v4:= v5;
  #L13351a.  goto L13341e;
  #L13351c.  v6:= -v6 @kind long;
  #L13351e.  goto L1333c2;
  #L133522.  v0:= 2I;
  #L133524.  if v3 == v0 then goto L133534;
  #L133528.  v0:= 4I;
  #L13352a.  if v3 == v0 then goto L133534;
  #L13352e.  v0:= 7I;
  #L133530.  if v3 != v0 then goto L133544;
  #L133534.  v15.`com.b.a.d.a.k` @type ^`int` := v10;
  #L133538.  v0:= 16I;
  #L13353c.  v15.`com.b.a.d.a.a` @type ^`int` := v0;
  #L133540.  goto L133392;
  #L133544.  v0:= 0I;
  #L133546.  goto L133392;
  #L13354a.  v2:= v3;
  #L13354c.  v3:= v4;
  #L13354e.  v4:= v5;
  #L133550.  goto L13341e;
  #L133554.  switch v2
                  | 43 => goto L13343e
                  | 45 => goto L133410
                  | 46 => goto L133468
                  | 69 => goto L133450
                  | 101 => goto L133450
                  | else => goto L1333f0;
}
procedure `java.lang.String` `t`(`com.b.a.d.a` v5 @kind this) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L133590.  v2:= 0I;
  #L133592.  v0:= 0I;
  #L133594.  v1:= v2;
  #L133596.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13359a.  v3:= v3 + v1 @kind int;
  #L13359c.  v4:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L1335a0.  if v3 >= v4 then goto L1335e6;
  #L1335a4.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L1335a8.  v4:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L1335ac.  v4:= v4 + v1 @kind int;
  #L1335ae.  v3:= v3[v4] @kind char;
  #L1335b2.  goto L133658;
  #L1335b8.  v1:= v1 + 1;
  #L1335bc.  goto L133596;
  #L1335be.  call `v`(v5) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L1335c4.  if v0 != 0 then goto L13363a;
  #L1335c8.  v0:= new `java.lang.String`;
  #L1335cc.  v2:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L1335d0.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L1335d4.  call `<init>`(v0, v2, v3, v1) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L1335da.  v2:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L1335de.  v1:= v1 + v2 @kind int;
  #L1335e0.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L1335e4.  return v0 @kind object;
  #L1335e6.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L1335ea.  v3:= length @variable v3;
  #L1335ec.  if v1 >= v3 then goto L133602;
  #L1335f0.  v3:= v1 + 1;
  #L1335f4.  call temp:= `b`(v5, v3) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L1335fa.  v3:= temp;
  #L1335fc.  if v3 == 0 then goto L1335c4;
  #L133600.  goto L133596;
  #L133602.  if v0 != 0 then goto L133610;
  #L133606.  v0:= new `java.lang.StringBuilder`;
  #L13360a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L133610.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L133614.  v4:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L133618.  call temp:= `append`(v0, v3, v4, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L13361e.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L133622.  v1:= v1 + v3 @kind int;
  #L133624.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L133628.  v1:= 1I;
  #L13362a.  call temp:= `b`(v5, v1) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L133630.  v1:= temp;
  #L133632.  if v1 != 0 then goto L133652;
  #L133636.  v1:= v2;
  #L133638.  goto L1335c4;
  #L13363a.  v2:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13363e.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L133642.  call temp:= `append`(v0, v2, v3, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L133648.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13364e.  v0:= temp @kind object;
  #L133650.  goto L1335da;
  #L133652.  v1:= v2;
  #L133654.  goto L133596;
  #L133656.  
  #L133658.  switch v3
                  | 9 => goto L1335c4
                  | 10 => goto L1335c4
                  | 12 => goto L1335c4
                  | 13 => goto L1335c4
                  | 32 => goto L1335c4
                  | 35 => goto L1335be
                  | 44 => goto L1335c4
                  | 47 => goto L1335be
                  | 58 => goto L1335c4
                  | 59 => goto L1335be
                  | 61 => goto L1335be
                  | 91 => goto L1335c4
                  | 92 => goto L1335be
                  | 93 => goto L1335c4
                  | 123 => goto L1335c4
                  | 125 => goto L1335c4
                  | else => goto L1335b8;
}
procedure `void` `u`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.u:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1336ec.  v0:= 0I;
  #L1336ee.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L1336f2.  v1:= v1 + v0 @kind int;
  #L1336f4.  v2:= v3.`com.b.a.d.a.g` @type ^`int`;
  #L1336f8.  if v1 >= v2 then goto L133728;
  #L1336fc.  v1:= v3.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L133700.  v2:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L133704.  v2:= v2 + v0 @kind int;
  #L133706.  v1:= v1[v2] @kind char;
  #L13370a.  goto L133744;
  #L133710.  v0:= v0 + 1;
  #L133714.  goto L1336ee;
  #L133716.  call `v`(v3) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L13371c.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L133720.  v0:= v0 + v1 @kind int;
  #L133722.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L133726.  return @kind void;
  #L133728.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L13372c.  v0:= v0 + v1 @kind int;
  #L13372e.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L133732.  v0:= 1I;
  #L133734.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13373a.  v0:= temp;
  #L13373c.  if v0 != 0 then goto L1336ec;
  #L133740.  goto L133726;
  #L133742.  
  #L133744.  switch v1
                  | 9 => goto L13371c
                  | 10 => goto L13371c
                  | 12 => goto L13371c
                  | 13 => goto L13371c
                  | 32 => goto L13371c
                  | 35 => goto L133716
                  | 44 => goto L13371c
                  | 47 => goto L133716
                  | 58 => goto L13371c
                  | 59 => goto L133716
                  | 61 => goto L133716
                  | 91 => goto L13371c
                  | 92 => goto L133716
                  | 93 => goto L13371c
                  | 123 => goto L13371c
                  | 125 => goto L13371c
                  | else => goto L133710;
}
procedure `void` `v`(`com.b.a.d.a` v1 @kind this) @signature `Lcom/b/a/d/a;.v:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1337d8.  v0:= v1.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L1337dc.  if v0 != 0 then goto L1337ee;
  #L1337e0.  v0:= "Use JsonReader.setLenient(true) to accept malformed JSON" @kind object;
  #L1337e4.  call temp:= `b`(v1, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L1337ea.  v0:= temp @kind object;
  #L1337ec.  throw v0;
  #L1337ee.  return @kind void;
}
procedure `void` `w`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.w:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L133800.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L133804.  v1:= v3.`com.b.a.d.a.g` @type ^`int`;
  #L133808.  if v0 < v1 then goto L13381a;
  #L13380c.  v0:= 1I;
  #L13380e.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L133814.  v0:= temp;
  #L133816.  if v0 == 0 then goto L13384a;
  #L13381a.  v0:= v3.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13381e.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L133822.  v2:= v1 + 1;
  #L133826.  v3.`com.b.a.d.a.f` @type ^`int` := v2;
  #L13382a.  v0:= v0[v1] @kind char;
  #L13382e.  v1:= 10I;
  #L133832.  if v0 != v1 then goto L13384c;
  #L133836.  v0:= v3.`com.b.a.d.a.h` @type ^`int`;
  #L13383a.  v0:= v0 + 1;
  #L13383e.  v3.`com.b.a.d.a.h` @type ^`int` := v0;
  #L133842.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L133846.  v3.`com.b.a.d.a.i` @type ^`int` := v0;
  #L13384a.  return @kind void;
  #L13384c.  v1:= 13I;
  #L133850.  if v0 != v1 then goto L133800;
  #L133854.  goto L13384a;
}
procedure `java.lang.String` `x`(`com.b.a.d.a` v4 @kind this) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L133868.  v0:= v4.`com.b.a.d.a.h` @type ^`int`;
  #L13386c.  v0:= v0 + 1;
  #L133870.  v1:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L133874.  v2:= v4.`com.b.a.d.a.i` @type ^`int`;
  #L133878.  v1:= v1 - v2 @kind int;
  #L13387a.  v1:= v1 + 1;
  #L13387e.  v2:= new `java.lang.StringBuilder`;
  #L133882.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L133888.  v3:= " at line " @kind object;
  #L13388c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133892.  v2:= temp @kind object;
  #L133894.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L13389a.  v0:= temp @kind object;
  #L13389c.  v2:= " column " @kind object;
  #L1338a0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1338a6.  v0:= temp @kind object;
  #L1338a8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1338ae.  v0:= temp @kind object;
  #L1338b0.  v1:= " path " @kind object;
  #L1338b4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1338ba.  v0:= temp @kind object;
  #L1338bc.  call temp:= `p`(v4) @signature `Lcom/b/a/d/a;.p:()Ljava/lang/String;` @kind virtual;
  #L1338c2.  v1:= temp @kind object;
  #L1338c4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1338ca.  v0:= temp @kind object;
  #L1338cc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1338d2.  v0:= temp @kind object;
  #L1338d4.  return v0 @kind object;
}
procedure `char` `y`(`com.b.a.d.a` v7 @kind this) @signature `Lcom/b/a/d/a;.y:()C` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1338e8.  v5:= 4I;
  #L1338ea.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L1338ee.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L1338f2.  if v0 != v1 then goto L133912;
  #L1338f6.  v0:= 1I;
  #L1338f8.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L1338fe.  v0:= temp;
  #L133900.  if v0 != 0 then goto L133912;
  #L133904.  v0:= "Unterminated escape sequence" @kind object;
  #L133908.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L13390e.  v0:= temp @kind object;
  #L133910.  throw v0;
  #L133912.  v0:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L133916.  v1:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13391a.  v2:= v1 + 1;
  #L13391e.  v7.`com.b.a.d.a.f` @type ^`int` := v2;
  #L133922.  v0:= v0[v1] @kind char;
  #L133926.  goto L133a68;
  #L13392c.  v0:= "Invalid escape sequence" @kind object;
  #L133930.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L133936.  v0:= temp @kind object;
  #L133938.  throw v0;
  #L13393a.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13393e.  v0:= v0 + 4;
  #L133942.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L133946.  if v0 <= v1 then goto L133964;
  #L13394a.  call temp:= `b`(v7, v5) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L133950.  v0:= temp;
  #L133952.  if v0 != 0 then goto L133964;
  #L133956.  v0:= "Unterminated escape sequence" @kind object;
  #L13395a.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L133960.  v0:= temp @kind object;
  #L133962.  throw v0;
  #L133964.  v1:= 0I;
  #L133966.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13396a.  v2:= v0 + 4;
  #L13396e.  v6:= v0;
  #L133970.  v0:= v1;
  #L133972.  v1:= v6;
  #L133974.  if v1 >= v2 then goto L133a24;
  #L133978.  v3:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13397c.  v3:= v3[v1] @kind char;
  #L133980.  v0:= v0 ^< 4;
  #L133984.  v0:= (`char`) v0 @kind i2c;
  #L133986.  v4:= 48I;
  #L13398a.  if v3 < v4 then goto L1339a4;
  #L13398e.  v4:= 57I;
  #L133992.  if v3 > v4 then goto L1339a4;
  #L133996.  v3:= v3 + -48;
  #L13399a.  v0:= v0 + v3 @kind int;
  #L13399c.  v0:= (`char`) v0 @kind i2c;
  #L13399e.  v1:= v1 + 1;
  #L1339a2.  goto L133974;
  #L1339a4.  v4:= 97I;
  #L1339a8.  if v3 < v4 then goto L1339c2;
  #L1339ac.  v4:= 102I;
  #L1339b0.  if v3 > v4 then goto L1339c2;
  #L1339b4.  v3:= v3 + -97;
  #L1339b8.  v3:= v3 + 10;
  #L1339bc.  v0:= v0 + v3 @kind int;
  #L1339be.  v0:= (`char`) v0 @kind i2c;
  #L1339c0.  goto L13399e;
  #L1339c2.  v4:= 65I;
  #L1339c6.  if v3 < v4 then goto L1339e0;
  #L1339ca.  v4:= 70I;
  #L1339ce.  if v3 > v4 then goto L1339e0;
  #L1339d2.  v3:= v3 + -65;
  #L1339d6.  v3:= v3 + 10;
  #L1339da.  v0:= v0 + v3 @kind int;
  #L1339dc.  v0:= (`char`) v0 @kind i2c;
  #L1339de.  goto L13399e;
  #L1339e0.  v0:= new `java.lang.NumberFormatException`;
  #L1339e4.  v1:= new `java.lang.StringBuilder`;
  #L1339e8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1339ee.  v2:= "\\u" @kind object;
  #L1339f2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1339f8.  v1:= temp @kind object;
  #L1339fa.  v2:= new `java.lang.String`;
  #L1339fe.  v3:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L133a02.  v4:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L133a06.  call `<init>`(v2, v3, v4, v5) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L133a0c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133a12.  v1:= temp @kind object;
  #L133a14.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L133a1a.  v1:= temp @kind object;
  #L133a1c.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L133a22.  throw v0;
  #L133a24.  v1:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L133a28.  v1:= v1 + 4;
  #L133a2c.  v7.`com.b.a.d.a.f` @type ^`int` := v1;
  #L133a30.  return v0;
  #L133a32.  v0:= 9I;
  #L133a36.  goto L133a30;
  #L133a38.  v0:= 8I;
  #L133a3c.  goto L133a30;
  #L133a3e.  v0:= 10I;
  #L133a42.  goto L133a30;
  #L133a44.  v0:= 13I;
  #L133a48.  goto L133a30;
  #L133a4a.  v0:= 12I;
  #L133a4e.  goto L133a30;
  #L133a50.  v1:= v7.`com.b.a.d.a.h` @type ^`int`;
  #L133a54.  v1:= v1 + 1;
  #L133a58.  v7.`com.b.a.d.a.h` @type ^`int` := v1;
  #L133a5c.  v1:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L133a60.  v7.`com.b.a.d.a.i` @type ^`int` := v1;
  #L133a64.  goto L133a30;
  #L133a66.  
  #L133a68.  switch v0
                  | 10 => goto L133a50
                  | 34 => goto L133a30
                  | 39 => goto L133a30
                  | 47 => goto L133a30
                  | 92 => goto L133a30
                  | 98 => goto L133a38
                  | 102 => goto L133a4a
                  | 110 => goto L133a3e
                  | 114 => goto L133a44
                  | 116 => goto L133a32
                  | 117 => goto L13393a
                  | else => goto L13392c;
}
procedure `void` `z`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.z:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L133ad4.  v0:= 1I;
  #L133ad6.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L133adc.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L133ae0.  v0:= v0 + -1;
  #L133ae4.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L133ae8.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L133aec.  v1:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L133af0.  v1:= length @variable v1;
  #L133af2.  v0:= v0 + v1 @kind int;
  #L133af4.  v1:= v3.`com.b.a.d.a.g` @type ^`int`;
  #L133af8.  if v0 <= v1 then goto L133b10;
  #L133afc.  v0:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L133b00.  v0:= length @variable v0;
  #L133b02.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L133b08.  v0:= temp;
  #L133b0a.  if v0 != 0 then goto L133b10;
  #L133b0e.  return @kind void;
  #L133b10.  v0:= 0I;
  #L133b12.  v1:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L133b16.  v1:= length @variable v1;
  #L133b18.  if v0 >= v1 then goto L133b3c;
  #L133b1c.  v1:= v3.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L133b20.  v2:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L133b24.  v2:= v2 + v0 @kind int;
  #L133b26.  v1:= v1[v2] @kind char;
  #L133b2a.  v2:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L133b2e.  v2:= v2[v0] @kind char;
  #L133b32.  if v1 != v2 then goto L133b0e;
  #L133b36.  v0:= v0 + 1;
  #L133b3a.  goto L133b12;
  #L133b3c.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L133b40.  v1:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L133b44.  v1:= length @variable v1;
  #L133b46.  v0:= v0 + v1 @kind int;
  #L133b48.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L133b4c.  goto L133b0e;
}
procedure `void` `a`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L133b60.  v2:= 0I;
  #L133b62.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L133b66.  if v0 != 0 then goto L133b72;
  #L133b6a.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L133b70.  v0:= temp;
  #L133b72.  v1:= 3I;
  #L133b74.  if v0 != v1 then goto L133b96;
  #L133b78.  v0:= 1I;
  #L133b7a.  call `a`(v3, v0) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L133b80.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L133b84.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L133b88.  v1:= v1 + -1;
  #L133b8c.  v0[v1]:= v2;
  #L133b90.  v3.`com.b.a.d.a.a` @type ^`int` := v2;
  #L133b94.  return @kind void;
  #L133b96.  v0:= new `java.lang.IllegalStateException`;
  #L133b9a.  v1:= new `java.lang.StringBuilder`;
  #L133b9e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L133ba4.  v2:= "Expected BEGIN_ARRAY but was " @kind object;
  #L133ba8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133bae.  v1:= temp @kind object;
  #L133bb0.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L133bb6.  v2:= temp @kind object;
  #L133bb8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133bbe.  v1:= temp @kind object;
  #L133bc0.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L133bc6.  v2:= temp @kind object;
  #L133bc8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133bce.  v1:= temp @kind object;
  #L133bd0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L133bd6.  v1:= temp @kind object;
  #L133bd8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L133bde.  throw v0;
}
procedure `void` `a`(`com.b.a.d.a` v0 @kind this, `boolean` v1 ) @signature `Lcom/b/a/d/a;.a:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L133bf0.  v0.`com.b.a.d.a.d` @type ^`boolean` := v1 @kind boolean;
  #L133bf4.  return @kind void;
}
procedure `void` `b`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L133c08.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L133c0c.  if v0 != 0 then goto L133c18;
  #L133c10.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L133c16.  v0:= temp;
  #L133c18.  v1:= 4I;
  #L133c1a.  if v0 != v1 then goto L133c4a;
  #L133c1e.  v0:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L133c22.  v0:= v0 + -1;
  #L133c26.  v3.`com.b.a.d.a.n` @type ^`int` := v0;
  #L133c2a.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L133c2e.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L133c32.  v1:= v1 + -1;
  #L133c36.  v2:= v0[v1];
  #L133c3a.  v2:= v2 + 1;
  #L133c3e.  v0[v1]:= v2;
  #L133c42.  v0:= 0I;
  #L133c44.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L133c48.  return @kind void;
  #L133c4a.  v0:= new `java.lang.IllegalStateException`;
  #L133c4e.  v1:= new `java.lang.StringBuilder`;
  #L133c52.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L133c58.  v2:= "Expected END_ARRAY but was " @kind object;
  #L133c5c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133c62.  v1:= temp @kind object;
  #L133c64.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L133c6a.  v2:= temp @kind object;
  #L133c6c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133c72.  v1:= temp @kind object;
  #L133c74.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L133c7a.  v2:= temp @kind object;
  #L133c7c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133c82.  v1:= temp @kind object;
  #L133c84.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L133c8a.  v1:= temp @kind object;
  #L133c8c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L133c92.  throw v0;
}
procedure `void` `c`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L133ca4.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L133ca8.  if v0 != 0 then goto L133cb4;
  #L133cac.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L133cb2.  v0:= temp;
  #L133cb4.  v1:= 1I;
  #L133cb6.  if v0 != v1 then goto L133cca;
  #L133cba.  v0:= 3I;
  #L133cbc.  call `a`(v3, v0) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L133cc2.  v0:= 0I;
  #L133cc4.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L133cc8.  return @kind void;
  #L133cca.  v0:= new `java.lang.IllegalStateException`;
  #L133cce.  v1:= new `java.lang.StringBuilder`;
  #L133cd2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L133cd8.  v2:= "Expected BEGIN_OBJECT but was " @kind object;
  #L133cdc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133ce2.  v1:= temp @kind object;
  #L133ce4.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L133cea.  v2:= temp @kind object;
  #L133cec.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133cf2.  v1:= temp @kind object;
  #L133cf4.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L133cfa.  v2:= temp @kind object;
  #L133cfc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133d02.  v1:= temp @kind object;
  #L133d04.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L133d0a.  v1:= temp @kind object;
  #L133d0c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L133d12.  throw v0;
}
procedure `void` `close`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L133d24.  v2:= 0I;
  #L133d26.  v3.`com.b.a.d.a.a` @type ^`int` := v2;
  #L133d2a.  v0:= v3.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L133d2e.  v1:= 8I;
  #L133d32.  v0[v2]:= v1;
  #L133d36.  v0:= 1I;
  #L133d38.  v3.`com.b.a.d.a.n` @type ^`int` := v0;
  #L133d3c.  v0:= v3.`com.b.a.d.a.c` @type ^`java.io.Reader` @kind object;
  #L133d40.  call `close`(v0) @signature `Ljava/io/Reader;.close:()V` @kind virtual;
  #L133d46.  return @kind void;
}
procedure `void` `d`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L133d58.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L133d5c.  if v0 != 0 then goto L133d68;
  #L133d60.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L133d66.  v0:= temp;
  #L133d68.  v1:= 2I;
  #L133d6a.  if v0 != v1 then goto L133da8;
  #L133d6e.  v0:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L133d72.  v0:= v0 + -1;
  #L133d76.  v3.`com.b.a.d.a.n` @type ^`int` := v0;
  #L133d7a.  v0:= v3.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L133d7e.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L133d82.  v2:= 0I;
  #L133d84.  v0[v1]:= v2 @kind object;
  #L133d88.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L133d8c.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L133d90.  v1:= v1 + -1;
  #L133d94.  v2:= v0[v1];
  #L133d98.  v2:= v2 + 1;
  #L133d9c.  v0[v1]:= v2;
  #L133da0.  v0:= 0I;
  #L133da2.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L133da6.  return @kind void;
  #L133da8.  v0:= new `java.lang.IllegalStateException`;
  #L133dac.  v1:= new `java.lang.StringBuilder`;
  #L133db0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L133db6.  v2:= "Expected END_OBJECT but was " @kind object;
  #L133dba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133dc0.  v1:= temp @kind object;
  #L133dc2.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L133dc8.  v2:= temp @kind object;
  #L133dca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133dd0.  v1:= temp @kind object;
  #L133dd2.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L133dd8.  v2:= temp @kind object;
  #L133dda.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133de0.  v1:= temp @kind object;
  #L133de2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L133de8.  v1:= temp @kind object;
  #L133dea.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L133df0.  throw v0;
}
procedure `boolean` `e`(`com.b.a.d.a` v2 @kind this) @signature `Lcom/b/a/d/a;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L133e04.  v0:= v2.`com.b.a.d.a.a` @type ^`int`;
  #L133e08.  if v0 != 0 then goto L133e14;
  #L133e0c.  call temp:= `r`(v2) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L133e12.  v0:= temp;
  #L133e14.  v1:= 2I;
  #L133e16.  if v0 == v1 then goto L133e24;
  #L133e1a.  v1:= 4I;
  #L133e1c.  if v0 == v1 then goto L133e24;
  #L133e20.  v0:= 1I;
  #L133e22.  return v0;
  #L133e24.  v0:= 0I;
  #L133e26.  goto L133e22;
}
procedure `com.b.a.d.b` `f`(`com.b.a.d.a` v1 @kind this) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L133e38.  v0:= v1.`com.b.a.d.a.a` @type ^`int`;
  #L133e3c.  if v0 != 0 then goto L133e48;
  #L133e40.  call temp:= `r`(v1) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L133e46.  v0:= temp;
  #L133e48.  goto L133e98;
  #L133e4e.  v0:= new `java.lang.AssertionError`;
  #L133e52.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L133e58.  throw v0;
  #L133e5a.  v0:= `@@com.b.a.d.b.c` @type ^`com.b.a.d.b` @kind object;
  #L133e5e.  return v0 @kind object;
  #L133e60.  v0:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L133e64.  goto L133e5e;
  #L133e66.  v0:= `@@com.b.a.d.b.a` @type ^`com.b.a.d.b` @kind object;
  #L133e6a.  goto L133e5e;
  #L133e6c.  v0:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L133e70.  goto L133e5e;
  #L133e72.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L133e76.  goto L133e5e;
  #L133e78.  v0:= `@@com.b.a.d.b.h` @type ^`com.b.a.d.b` @kind object;
  #L133e7c.  goto L133e5e;
  #L133e7e.  v0:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L133e82.  goto L133e5e;
  #L133e84.  v0:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L133e88.  goto L133e5e;
  #L133e8a.  v0:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L133e8e.  goto L133e5e;
  #L133e90.  v0:= `@@com.b.a.d.b.j` @type ^`com.b.a.d.b` @kind object;
  #L133e94.  goto L133e5e;
  #L133e96.  
  #L133e98.  switch v0
                  | 1 => goto L133e5a
                  | 2 => goto L133e60
                  | 3 => goto L133e66
                  | 4 => goto L133e6c
                  | 5 => goto L133e78
                  | 6 => goto L133e78
                  | 7 => goto L133e7e
                  | 8 => goto L133e84
                  | 9 => goto L133e84
                  | 10 => goto L133e84
                  | 11 => goto L133e84
                  | 12 => goto L133e72
                  | 13 => goto L133e72
                  | 14 => goto L133e72
                  | 15 => goto L133e8a
                  | 16 => goto L133e8a
                  | 17 => goto L133e90
                  | else => goto L133e4e;
}
procedure `java.lang.String` `g`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.g:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L133ef4.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L133ef8.  if v0 != 0 then goto L133f04;
  #L133efc.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L133f02.  v0:= temp;
  #L133f04.  v1:= 14I;
  #L133f08.  if v0 != v1 then goto L133f2c;
  #L133f0c.  call temp:= `t`(v3) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L133f12.  v0:= temp @kind object;
  #L133f14.  v1:= 0I;
  #L133f16.  v3.`com.b.a.d.a.a` @type ^`int` := v1;
  #L133f1a.  v1:= v3.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L133f1e.  v2:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L133f22.  v2:= v2 + -1;
  #L133f26.  v1[v2]:= v0 @kind object;
  #L133f2a.  return v0 @kind object;
  #L133f2c.  v1:= 12I;
  #L133f30.  if v0 != v1 then goto L133f42;
  #L133f34.  v0:= 39I;
  #L133f38.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L133f3e.  v0:= temp @kind object;
  #L133f40.  goto L133f14;
  #L133f42.  v1:= 13I;
  #L133f46.  if v0 != v1 then goto L133f58;
  #L133f4a.  v0:= 34I;
  #L133f4e.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L133f54.  v0:= temp @kind object;
  #L133f56.  goto L133f14;
  #L133f58.  v0:= new `java.lang.IllegalStateException`;
  #L133f5c.  v1:= new `java.lang.StringBuilder`;
  #L133f60.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L133f66.  v2:= "Expected a name but was " @kind object;
  #L133f6a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133f70.  v1:= temp @kind object;
  #L133f72.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L133f78.  v2:= temp @kind object;
  #L133f7a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133f80.  v1:= temp @kind object;
  #L133f82.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L133f88.  v2:= temp @kind object;
  #L133f8a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L133f90.  v1:= temp @kind object;
  #L133f92.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L133f98.  v1:= temp @kind object;
  #L133f9a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L133fa0.  throw v0;
}
procedure `java.lang.String` `h`(`com.b.a.d.a` v4 @kind this) @signature `Lcom/b/a/d/a;.h:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L133fb4.  v0:= v4.`com.b.a.d.a.a` @type ^`int`;
  #L133fb8.  if v0 != 0 then goto L133fc4;
  #L133fbc.  call temp:= `r`(v4) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L133fc2.  v0:= temp;
  #L133fc4.  v1:= 10I;
  #L133fc8.  if v0 != v1 then goto L133ff4;
  #L133fcc.  call temp:= `t`(v4) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L133fd2.  v0:= temp @kind object;
  #L133fd4.  v1:= 0I;
  #L133fd6.  v4.`com.b.a.d.a.a` @type ^`int` := v1;
  #L133fda.  v1:= v4.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L133fde.  v2:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L133fe2.  v2:= v2 + -1;
  #L133fe6.  v3:= v1[v2];
  #L133fea.  v3:= v3 + 1;
  #L133fee.  v1[v2]:= v3;
  #L133ff2.  return v0 @kind object;
  #L133ff4.  v1:= 8I;
  #L133ff8.  if v0 != v1 then goto L13400a;
  #L133ffc.  v0:= 39I;
  #L134000.  call temp:= `b`(v4, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L134006.  v0:= temp @kind object;
  #L134008.  goto L133fd4;
  #L13400a.  v1:= 9I;
  #L13400e.  if v0 != v1 then goto L134020;
  #L134012.  v0:= 34I;
  #L134016.  call temp:= `b`(v4, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L13401c.  v0:= temp @kind object;
  #L13401e.  goto L133fd4;
  #L134020.  v1:= 11I;
  #L134024.  if v0 != v1 then goto L134034;
  #L134028.  v0:= v4.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L13402c.  v1:= 0I;
  #L13402e.  v4.`com.b.a.d.a.l` @type ^`java.lang.String` := v1 @kind object;
  #L134032.  goto L133fd4;
  #L134034.  v1:= 15I;
  #L134038.  if v0 != v1 then goto L13404a;
  #L13403c.  v0:= v4.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L134040.  call temp:= `toString`(v0) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L134046.  v0:= temp @kind object;
  #L134048.  goto L133fd4;
  #L13404a.  v1:= 16I;
  #L13404e.  if v0 != v1 then goto L134078;
  #L134052.  v0:= new `java.lang.String`;
  #L134056.  v1:= v4.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13405a.  v2:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L13405e.  v3:= v4.`com.b.a.d.a.k` @type ^`int`;
  #L134062.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L134068.  v1:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L13406c.  v2:= v4.`com.b.a.d.a.k` @type ^`int`;
  #L134070.  v1:= v1 + v2 @kind int;
  #L134072.  v4.`com.b.a.d.a.f` @type ^`int` := v1;
  #L134076.  goto L133fd4;
  #L134078.  v0:= new `java.lang.IllegalStateException`;
  #L13407c.  v1:= new `java.lang.StringBuilder`;
  #L134080.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L134086.  v2:= "Expected a string but was " @kind object;
  #L13408a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134090.  v1:= temp @kind object;
  #L134092.  call temp:= `f`(v4) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L134098.  v2:= temp @kind object;
  #L13409a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1340a0.  v1:= temp @kind object;
  #L1340a2.  call temp:= `x`(v4) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L1340a8.  v2:= temp @kind object;
  #L1340aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1340b0.  v1:= temp @kind object;
  #L1340b2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1340b8.  v1:= temp @kind object;
  #L1340ba.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1340c0.  throw v0;
}
procedure `boolean` `i`(`com.b.a.d.a` v4 @kind this) @signature `Lcom/b/a/d/a;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1340d4.  v0:= 0I;
  #L1340d6.  v1:= v4.`com.b.a.d.a.a` @type ^`int`;
  #L1340da.  if v1 != 0 then goto L1340e6;
  #L1340de.  call temp:= `r`(v4) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L1340e4.  v1:= temp;
  #L1340e6.  v2:= 5I;
  #L1340e8.  if v1 != v2 then goto L13410c;
  #L1340ec.  v4.`com.b.a.d.a.a` @type ^`int` := v0;
  #L1340f0.  v0:= v4.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L1340f4.  v1:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L1340f8.  v1:= v1 + -1;
  #L1340fc.  v2:= v0[v1];
  #L134100.  v2:= v2 + 1;
  #L134104.  v0[v1]:= v2;
  #L134108.  v0:= 1I;
  #L13410a.  return v0;
  #L13410c.  v2:= 6I;
  #L13410e.  if v1 != v2 then goto L134130;
  #L134112.  v4.`com.b.a.d.a.a` @type ^`int` := v0;
  #L134116.  v1:= v4.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13411a.  v2:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L13411e.  v2:= v2 + -1;
  #L134122.  v3:= v1[v2];
  #L134126.  v3:= v3 + 1;
  #L13412a.  v1[v2]:= v3;
  #L13412e.  goto L13410a;
  #L134130.  v0:= new `java.lang.IllegalStateException`;
  #L134134.  v1:= new `java.lang.StringBuilder`;
  #L134138.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13413e.  v2:= "Expected a boolean but was " @kind object;
  #L134142.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134148.  v1:= temp @kind object;
  #L13414a.  call temp:= `f`(v4) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L134150.  v2:= temp @kind object;
  #L134152.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134158.  v1:= temp @kind object;
  #L13415a.  call temp:= `x`(v4) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L134160.  v2:= temp @kind object;
  #L134162.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134168.  v1:= temp @kind object;
  #L13416a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L134170.  v1:= temp @kind object;
  #L134172.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L134178.  throw v0;
}
procedure `void` `j`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.j:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13418c.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L134190.  if v0 != 0 then goto L13419c;
  #L134194.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L13419a.  v0:= temp;
  #L13419c.  v1:= 7I;
  #L13419e.  if v0 != v1 then goto L1341c2;
  #L1341a2.  v0:= 0I;
  #L1341a4.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L1341a8.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L1341ac.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L1341b0.  v1:= v1 + -1;
  #L1341b4.  v2:= v0[v1];
  #L1341b8.  v2:= v2 + 1;
  #L1341bc.  v0[v1]:= v2;
  #L1341c0.  return @kind void;
  #L1341c2.  v0:= new `java.lang.IllegalStateException`;
  #L1341c6.  v1:= new `java.lang.StringBuilder`;
  #L1341ca.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1341d0.  v2:= "Expected null but was " @kind object;
  #L1341d4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1341da.  v1:= temp @kind object;
  #L1341dc.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L1341e2.  v2:= temp @kind object;
  #L1341e4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1341ea.  v1:= temp @kind object;
  #L1341ec.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L1341f2.  v2:= temp @kind object;
  #L1341f4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1341fa.  v1:= temp @kind object;
  #L1341fc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L134202.  v1:= temp @kind object;
  #L134204.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13420a.  throw v0;
}
procedure `double` `k`(`com.b.a.d.a` v6 @kind this) @signature `Lcom/b/a/d/a;.k:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13421c.  v5:= 11I;
  #L134220.  v2:= 8I;
  #L134224.  v4:= 0I;
  #L134226.  v0:= v6.`com.b.a.d.a.a` @type ^`int`;
  #L13422a.  if v0 != 0 then goto L134236;
  #L13422e.  call temp:= `r`(v6) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L134234.  v0:= temp;
  #L134236.  v1:= 15I;
  #L13423a.  if v0 != v1 then goto L134262;
  #L13423e.  v6.`com.b.a.d.a.a` @type ^`int` := v4;
  #L134242.  v0:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L134246.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13424a.  v1:= v1 + -1;
  #L13424e.  v2:= v0[v1];
  #L134252.  v2:= v2 + 1;
  #L134256.  v0[v1]:= v2;
  #L13425a.  v0:= v6.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L13425e.  v0:= (`double`) v0 @kind l2d;
  #L134260.  return v0 @kind wide;
  #L134262.  v1:= 16I;
  #L134266.  if v0 != v1 then goto L134304;
  #L13426a.  v0:= new `java.lang.String`;
  #L13426e.  v1:= v6.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L134272.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L134276.  v3:= v6.`com.b.a.d.a.k` @type ^`int`;
  #L13427a.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L134280.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L134284.  v0:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L134288.  v1:= v6.`com.b.a.d.a.k` @type ^`int`;
  #L13428c.  v0:= v0 + v1 @kind int;
  #L13428e.  v6.`com.b.a.d.a.f` @type ^`int` := v0;
  #L134292.  v6.`com.b.a.d.a.a` @type ^`int` := v5;
  #L134296.  v0:= v6.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L13429a.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L1342a0.  v0:= temp @kind wide;
  #L1342a2.  v2:= v6.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L1342a6.  if v2 != 0 then goto L134390;
  #L1342aa.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L1342b0.  v2:= temp;
  #L1342b2.  if v2 != 0 then goto L1342c2;
  #L1342b6.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L1342bc.  v2:= temp;
  #L1342be.  if v2 == 0 then goto L134390;
  #L1342c2.  v2:= new `com.b.a.d.d`;
  #L1342c6.  v3:= new `java.lang.StringBuilder`;
  #L1342ca.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1342d0.  v4:= "JSON forbids NaN and infinities: " @kind object;
  #L1342d4.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1342da.  v3:= temp @kind object;
  #L1342dc.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L1342e2.  v0:= temp @kind object;
  #L1342e4.  call temp:= `x`(v6) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L1342ea.  v1:= temp @kind object;
  #L1342ec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1342f2.  v0:= temp @kind object;
  #L1342f4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1342fa.  v0:= temp @kind object;
  #L1342fc.  call `<init>`(v2, v0) @signature `Lcom/b/a/d/d;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L134302.  throw v2;
  #L134304.  if v0 == v2 then goto L134310;
  #L134308.  v1:= 9I;
  #L13430c.  if v0 != v1 then goto L13432c;
  #L134310.  if v0 != v2 then goto L134326;
  #L134314.  v0:= 39I;
  #L134318.  call temp:= `b`(v6, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L13431e.  v0:= temp @kind object;
  #L134320.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L134324.  goto L134292;
  #L134326.  v0:= 34I;
  #L13432a.  goto L134318;
  #L13432c.  v1:= 10I;
  #L134330.  if v0 != v1 then goto L134342;
  #L134334.  call temp:= `t`(v6) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L13433a.  v0:= temp @kind object;
  #L13433c.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L134340.  goto L134292;
  #L134342.  if v0 == v5 then goto L134292;
  #L134346.  v0:= new `java.lang.IllegalStateException`;
  #L13434a.  v1:= new `java.lang.StringBuilder`;
  #L13434e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L134354.  v2:= "Expected a double but was " @kind object;
  #L134358.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13435e.  v1:= temp @kind object;
  #L134360.  call temp:= `f`(v6) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L134366.  v2:= temp @kind object;
  #L134368.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13436e.  v1:= temp @kind object;
  #L134370.  call temp:= `x`(v6) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L134376.  v2:= temp @kind object;
  #L134378.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13437e.  v1:= temp @kind object;
  #L134380.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L134386.  v1:= temp @kind object;
  #L134388.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13438e.  throw v0;
  #L134390.  v2:= 0I;
  #L134392.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v2 @kind object;
  #L134396.  v6.`com.b.a.d.a.a` @type ^`int` := v4;
  #L13439a.  v2:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13439e.  v3:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L1343a2.  v3:= v3 + -1;
  #L1343a6.  v4:= v2[v3];
  #L1343aa.  v4:= v4 + 1;
  #L1343ae.  v2[v3]:= v4;
  #L1343b2.  goto L134260;
}
procedure `long` `l`(`com.b.a.d.a` v7 @kind this) @signature `Lcom/b/a/d/a;.l:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1343c8.  v3:= 10I;
  #L1343cc.  v2:= 8I;
  #L1343d0.  v6:= 0I;
  #L1343d2.  v0:= v7.`com.b.a.d.a.a` @type ^`int`;
  #L1343d6.  if v0 != 0 then goto L1343e2;
  #L1343da.  call temp:= `r`(v7) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L1343e0.  v0:= temp;
  #L1343e2.  v1:= 15I;
  #L1343e6.  if v0 != v1 then goto L13440c;
  #L1343ea.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L1343ee.  v0:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L1343f2.  v1:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L1343f6.  v1:= v1 + -1;
  #L1343fa.  v2:= v0[v1];
  #L1343fe.  v2:= v2 + 1;
  #L134402.  v0[v1]:= v2;
  #L134406.  v0:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L13440a.  return v0 @kind wide;
  #L13440c.  v1:= 16I;
  #L134410.  if v0 != v1 then goto L1344a2;
  #L134414.  v0:= new `java.lang.String`;
  #L134418.  v1:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13441c.  v2:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L134420.  v3:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L134424.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L13442a.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L13442e.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L134432.  v1:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L134436.  v0:= v0 + v1 @kind int;
  #L134438.  v7.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13443c.  v0:= 11I;
  #L134440.  v7.`com.b.a.d.a.a` @type ^`int` := v0;
  #L134444.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L134448.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L13444e.  v2:= temp @kind wide;
  #L134450.  v0:= (`long`) v2 @kind d2l;
  #L134452.  v4:= (`double`) v0 @kind l2d;
  #L134454.  v2:= dcmpl(v4, v2);
  #L134458.  if v2 == 0 then goto L134558;
  #L13445c.  v0:= new `java.lang.NumberFormatException`;
  #L134460.  v1:= new `java.lang.StringBuilder`;
  #L134464.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13446a.  v2:= "Expected a long but was " @kind object;
  #L13446e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134474.  v1:= temp @kind object;
  #L134476.  v2:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L13447a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134480.  v1:= temp @kind object;
  #L134482.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L134488.  v2:= temp @kind object;
  #L13448a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134490.  v1:= temp @kind object;
  #L134492.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L134498.  v1:= temp @kind object;
  #L13449a.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1344a0.  throw v0;
  #L1344a2.  if v0 == v2 then goto L1344b2;
  #L1344a6.  v1:= 9I;
  #L1344aa.  if v0 == v1 then goto L1344b2;
  #L1344ae.  if v0 != v3 then goto L13450e;
  #L1344b2.  if v0 != v3 then goto L1344f2;
  #L1344b6.  call temp:= `t`(v7) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L1344bc.  v0:= temp @kind object;
  #L1344be.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #Try_start0.  
  #L1344c2.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L1344c6.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L1344cc.  v0:= temp @kind wide;
  #L1344ce.  v2:= 0I;
  #L1344d0.  v7.`com.b.a.d.a.a` @type ^`int` := v2;
  #L1344d4.  v2:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L1344d8.  v3:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L1344dc.  v3:= v3 + -1;
  #L1344e0.  v4:= v2[v3];
  #L1344e4.  v4:= v4 + 1;
  #L1344e8.  v2[v3]:= v4;
  #Try_end0.  
  #L1344ec.  goto L13440a;
  #L1344ee.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L1344f0.  goto L13443c;
  #L1344f2.  if v0 != v2 then goto L134508;
  #L1344f6.  v0:= 39I;
  #L1344fa.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L134500.  v0:= temp @kind object;
  #L134502.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L134506.  goto L1344c2;
  #L134508.  v0:= 34I;
  #L13450c.  goto L1344fa;
  #L13450e.  v0:= new `java.lang.IllegalStateException`;
  #L134512.  v1:= new `java.lang.StringBuilder`;
  #L134516.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13451c.  v2:= "Expected a long but was " @kind object;
  #L134520.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134526.  v1:= temp @kind object;
  #L134528.  call temp:= `f`(v7) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13452e.  v2:= temp @kind object;
  #L134530.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134536.  v1:= temp @kind object;
  #L134538.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13453e.  v2:= temp @kind object;
  #L134540.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134546.  v1:= temp @kind object;
  #L134548.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13454e.  v1:= temp @kind object;
  #L134550.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L134556.  throw v0;
  #L134558.  v2:= 0I;
  #L13455a.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v2 @kind object;
  #L13455e.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L134562.  v2:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L134566.  v3:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L13456a.  v3:= v3 + -1;
  #L13456e.  v4:= v2[v3];
  #L134572.  v4:= v4 + 1;
  #L134576.  v2[v3]:= v4;
  #L13457a.  goto L13440a;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L1344ee;
}
procedure `int` `m`(`com.b.a.d.a` v7 @kind this) @signature `Lcom/b/a/d/a;.m:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1345a0.  v3:= 10I;
  #L1345a4.  v2:= 8I;
  #L1345a8.  v6:= 0I;
  #L1345aa.  v0:= v7.`com.b.a.d.a.a` @type ^`int`;
  #L1345ae.  if v0 != 0 then goto L1345ba;
  #L1345b2.  call temp:= `r`(v7) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L1345b8.  v0:= temp;
  #L1345ba.  v1:= 15I;
  #L1345be.  if v0 != v1 then goto L13463a;
  #L1345c2.  v0:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L1345c6.  v0:= (`int`) v0 @kind l2i;
  #L1345c8.  v2:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L1345cc.  v4:= (`long`) v0 @kind i2l;
  #L1345ce.  v1:= lcmp(v2, v4);
  #L1345d2.  if v1 == 0 then goto L13461c;
  #L1345d6.  v0:= new `java.lang.NumberFormatException`;
  #L1345da.  v1:= new `java.lang.StringBuilder`;
  #L1345de.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1345e4.  v2:= "Expected an int but was " @kind object;
  #L1345e8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1345ee.  v1:= temp @kind object;
  #L1345f0.  v2:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L1345f4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1345fa.  v1:= temp @kind object;
  #L1345fc.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L134602.  v2:= temp @kind object;
  #L134604.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13460a.  v1:= temp @kind object;
  #L13460c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L134612.  v1:= temp @kind object;
  #L134614.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13461a.  throw v0;
  #L13461c.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L134620.  v1:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L134624.  v2:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L134628.  v2:= v2 + -1;
  #L13462c.  v3:= v1[v2];
  #L134630.  v3:= v3 + 1;
  #L134634.  v1[v2]:= v3;
  #L134638.  return v0;
  #L13463a.  v1:= 16I;
  #L13463e.  if v0 != v1 then goto L1346d0;
  #L134642.  v0:= new `java.lang.String`;
  #L134646.  v1:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13464a.  v2:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13464e.  v3:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L134652.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L134658.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L13465c.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L134660.  v1:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L134664.  v0:= v0 + v1 @kind int;
  #L134666.  v7.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13466a.  v0:= 11I;
  #L13466e.  v7.`com.b.a.d.a.a` @type ^`int` := v0;
  #L134672.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L134676.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L13467c.  v2:= temp @kind wide;
  #L13467e.  v0:= (`int`) v2 @kind d2i;
  #L134680.  v4:= (`double`) v0 @kind i2d;
  #L134682.  v1:= dcmpl(v4, v2);
  #L134686.  if v1 == 0 then goto L134786;
  #L13468a.  v0:= new `java.lang.NumberFormatException`;
  #L13468e.  v1:= new `java.lang.StringBuilder`;
  #L134692.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L134698.  v2:= "Expected an int but was " @kind object;
  #L13469c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1346a2.  v1:= temp @kind object;
  #L1346a4.  v2:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L1346a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1346ae.  v1:= temp @kind object;
  #L1346b0.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L1346b6.  v2:= temp @kind object;
  #L1346b8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1346be.  v1:= temp @kind object;
  #L1346c0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1346c6.  v1:= temp @kind object;
  #L1346c8.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1346ce.  throw v0;
  #L1346d0.  if v0 == v2 then goto L1346e0;
  #L1346d4.  v1:= 9I;
  #L1346d8.  if v0 == v1 then goto L1346e0;
  #L1346dc.  if v0 != v3 then goto L13473c;
  #L1346e0.  if v0 != v3 then goto L134720;
  #L1346e4.  call temp:= `t`(v7) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L1346ea.  v0:= temp @kind object;
  #L1346ec.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #Try_start0.  
  #L1346f0.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L1346f4.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L1346fa.  v0:= temp;
  #L1346fc.  v1:= 0I;
  #L1346fe.  v7.`com.b.a.d.a.a` @type ^`int` := v1;
  #L134702.  v1:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L134706.  v2:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L13470a.  v2:= v2 + -1;
  #L13470e.  v3:= v1[v2];
  #L134712.  v3:= v3 + 1;
  #L134716.  v1[v2]:= v3;
  #Try_end0.  
  #L13471a.  goto L134638;
  #L13471c.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L13471e.  goto L13466a;
  #L134720.  if v0 != v2 then goto L134736;
  #L134724.  v0:= 39I;
  #L134728.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L13472e.  v0:= temp @kind object;
  #L134730.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L134734.  goto L1346f0;
  #L134736.  v0:= 34I;
  #L13473a.  goto L134728;
  #L13473c.  v0:= new `java.lang.IllegalStateException`;
  #L134740.  v1:= new `java.lang.StringBuilder`;
  #L134744.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13474a.  v2:= "Expected an int but was " @kind object;
  #L13474e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134754.  v1:= temp @kind object;
  #L134756.  call temp:= `f`(v7) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13475c.  v2:= temp @kind object;
  #L13475e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134764.  v1:= temp @kind object;
  #L134766.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13476c.  v2:= temp @kind object;
  #L13476e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134774.  v1:= temp @kind object;
  #L134776.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13477c.  v1:= temp @kind object;
  #L13477e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L134784.  throw v0;
  #L134786.  v1:= 0I;
  #L134788.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v1 @kind object;
  #L13478c.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L134790.  v1:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L134794.  v2:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L134798.  v2:= v2 + -1;
  #L13479c.  v3:= v1[v2];
  #L1347a0.  v3:= v3 + 1;
  #L1347a4.  v1[v2]:= v3;
  #L1347a8.  goto L134638;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L13471c;
}
procedure `void` `n`(`com.b.a.d.a` v6 @kind this) @signature `Lcom/b/a/d/a;.n:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1347cc.  v5:= 3I;
  #L1347ce.  v4:= 1I;
  #L1347d0.  v1:= 0I;
  #L1347d2.  v0:= v1;
  #L1347d4.  v2:= v6.`com.b.a.d.a.a` @type ^`int`;
  #L1347d8.  if v2 != 0 then goto L1347e4;
  #L1347dc.  call temp:= `r`(v6) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L1347e2.  v2:= temp;
  #L1347e4.  if v2 != v5 then goto L134828;
  #L1347e8.  call `a`(v6, v4) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L1347ee.  v0:= v0 + 1;
  #L1347f2.  v6.`com.b.a.d.a.a` @type ^`int` := v1;
  #L1347f6.  if v0 != 0 then goto L1347d4;
  #L1347fa.  v0:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L1347fe.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L134802.  v1:= v1 + -1;
  #L134806.  v2:= v0[v1];
  #L13480a.  v2:= v2 + 1;
  #L13480e.  v0[v1]:= v2;
  #L134812.  v0:= v6.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L134816.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13481a.  v1:= v1 + -1;
  #L13481e.  v2:= "null" @kind object;
  #L134822.  v0[v1]:= v2 @kind object;
  #L134826.  return @kind void;
  #L134828.  if v2 != v4 then goto L134838;
  #L13482c.  call `a`(v6, v5) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L134832.  v0:= v0 + 1;
  #L134836.  goto L1347f2;
  #L134838.  v3:= 4I;
  #L13483a.  if v2 != v3 then goto L134850;
  #L13483e.  v2:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L134842.  v2:= v2 + -1;
  #L134846.  v6.`com.b.a.d.a.n` @type ^`int` := v2;
  #L13484a.  v0:= v0 + -1;
  #L13484e.  goto L1347f2;
  #L134850.  v3:= 2I;
  #L134852.  if v2 != v3 then goto L134868;
  #L134856.  v2:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13485a.  v2:= v2 + -1;
  #L13485e.  v6.`com.b.a.d.a.n` @type ^`int` := v2;
  #L134862.  v0:= v0 + -1;
  #L134866.  goto L1347f2;
  #L134868.  v3:= 14I;
  #L13486c.  if v2 == v3 then goto L134878;
  #L134870.  v3:= 10I;
  #L134874.  if v2 != v3 then goto L134880;
  #L134878.  call `u`(v6) @signature `Lcom/b/a/d/a;.u:()V` @kind direct;
  #L13487e.  goto L1347f2;
  #L134880.  v3:= 8I;
  #L134884.  if v2 == v3 then goto L134890;
  #L134888.  v3:= 12I;
  #L13488c.  if v2 != v3 then goto L13489c;
  #L134890.  v2:= 39I;
  #L134894.  call `c`(v6, v2) @signature `Lcom/b/a/d/a;.c:(C)V` @kind direct;
  #L13489a.  goto L1347f2;
  #L13489c.  v3:= 9I;
  #L1348a0.  if v2 == v3 then goto L1348ac;
  #L1348a4.  v3:= 13I;
  #L1348a8.  if v2 != v3 then goto L1348b8;
  #L1348ac.  v2:= 34I;
  #L1348b0.  call `c`(v6, v2) @signature `Lcom/b/a/d/a;.c:(C)V` @kind direct;
  #L1348b6.  goto L1347f2;
  #L1348b8.  v3:= 16I;
  #L1348bc.  if v2 != v3 then goto L1347f2;
  #L1348c0.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L1348c4.  v3:= v6.`com.b.a.d.a.k` @type ^`int`;
  #L1348c8.  v2:= v2 + v3 @kind int;
  #L1348ca.  v6.`com.b.a.d.a.f` @type ^`int` := v2;
  #L1348ce.  goto L1347f2;
}
procedure `java.lang.String` `p`(`com.b.a.d.a` v5 @kind this) @signature `Lcom/b/a/d/a;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1348e0.  v0:= new `java.lang.StringBuilder`;
  #L1348e4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1348ea.  v1:= 36I;
  #L1348ee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1348f4.  v1:= temp @kind object;
  #L1348f6.  v0:= 0I;
  #L1348f8.  v2:= v5.`com.b.a.d.a.n` @type ^`int`;
  #L1348fc.  if v0 >= v2 then goto L134962;
  #L134900.  v3:= v5.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L134904.  v3:= v3[v0];
  #L134908.  goto L13496c;
  #L13490e.  v0:= v0 + 1;
  #L134912.  goto L1348fc;
  #L134914.  v3:= 91I;
  #L134918.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13491e.  v3:= temp @kind object;
  #L134920.  v4:= v5.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L134924.  v4:= v4[v0];
  #L134928.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L13492e.  v3:= temp @kind object;
  #L134930.  v4:= 93I;
  #L134934.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13493a.  goto L13490e;
  #L13493c.  v3:= 46I;
  #L134940.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L134946.  v3:= v5.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L13494a.  v3:= v3[v0] @kind object;
  #L13494e.  if v3 == 0 then goto L13490e;
  #L134952.  v3:= v5.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L134956.  v3:= v3[v0] @kind object;
  #L13495a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134960.  goto L13490e;
  #L134962.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L134968.  v0:= temp @kind object;
  #L13496a.  return v0 @kind object;
  #L13496c.  switch v3
                  | 1 => goto L134914
                  | 2 => goto L134914
                  | 3 => goto L13493c
                  | 4 => goto L13493c
                  | 5 => goto L13493c
                  | else => goto L13490e;
}
procedure `boolean` `q`(`com.b.a.d.a` v1 @kind this) @signature `Lcom/b/a/d/a;.q:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L134998.  v0:= v1.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L13499c.  return v0;
}
procedure `int` `r`(`com.b.a.d.a` v8 @kind this) @signature `Lcom/b/a/d/a;.r:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1349b0.  v3:= 7I;
  #L1349b2.  v7:= 5I;
  #L1349b4.  v0:= 4I;
  #L1349b6.  v1:= 2I;
  #L1349b8.  v2:= 1I;
  #L1349ba.  v4:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L1349be.  v5:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L1349c2.  v5:= v5 + -1;
  #L1349c6.  v4:= v4[v5];
  #L1349ca.  if v4 != v2 then goto L134a06;
  #L1349ce.  v5:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L1349d2.  v6:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L1349d6.  v6:= v6 + -1;
  #L1349da.  v5[v6]:= v1;
  #L1349de.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L1349e4.  v5:= temp;
  #L1349e6.  goto L134c94;
  #L1349ec.  v0:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L1349f0.  v0:= v0 + -1;
  #L1349f4.  v8.`com.b.a.d.a.f` @type ^`int` := v0;
  #L1349f8.  call temp:= `o`(v8) @signature `Lcom/b/a/d/a;.o:()I` @kind direct;
  #L1349fe.  v0:= temp;
  #L134a00.  if v0 == 0 then goto L134c4e;
  #L134a04.  return v0;
  #L134a06.  if v4 != v1 then goto L134a34;
  #L134a0a.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L134a10.  v5:= temp;
  #L134a12.  goto L134cd0;
  #L134a18.  v0:= "Unterminated array" @kind object;
  #L134a1c.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L134a22.  v0:= temp @kind object;
  #L134a24.  throw v0;
  #L134a26.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L134a2a.  goto L134a04;
  #L134a2c.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L134a32.  goto L1349de;
  #L134a34.  v5:= 3I;
  #L134a36.  if v4 == v5 then goto L134a3e;
  #L134a3a.  if v4 != v7 then goto L134af6;
  #L134a3e.  v3:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L134a42.  v5:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L134a46.  v5:= v5 + -1;
  #L134a4a.  v3[v5]:= v0;
  #L134a4e.  if v4 != v7 then goto L134a7c;
  #L134a52.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L134a58.  v0:= temp;
  #L134a5a.  goto L134cec;
  #L134a60.  v0:= "Unterminated object" @kind object;
  #L134a64.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L134a6a.  v0:= temp @kind object;
  #L134a6c.  throw v0;
  #L134a6e.  v8.`com.b.a.d.a.a` @type ^`int` := v1;
  #L134a72.  v0:= v1;
  #L134a74.  goto L134a04;
  #L134a76.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L134a7c.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L134a82.  v0:= temp;
  #L134a84.  goto L134d08;
  #L134a8a.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L134a90.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L134a94.  v1:= v1 + -1;
  #L134a98.  v8.`com.b.a.d.a.f` @type ^`int` := v1;
  #L134a9c.  v0:= (`char`) v0 @kind i2c;
  #L134a9e.  call temp:= `a`(v8, v0) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L134aa4.  v0:= temp;
  #L134aa6.  if v0 == 0 then goto L134ae8;
  #L134aaa.  v0:= 14I;
  #L134aae.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L134ab2.  goto L134a04;
  #L134ab4.  v0:= 13I;
  #L134ab8.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L134abc.  goto L134a04;
  #L134abe.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L134ac4.  v0:= 12I;
  #L134ac8.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L134acc.  goto L134a04;
  #L134ace.  if v4 == v7 then goto L134ada;
  #L134ad2.  v8.`com.b.a.d.a.a` @type ^`int` := v1;
  #L134ad6.  v0:= v1;
  #L134ad8.  goto L134a04;
  #L134ada.  v0:= "Expected name" @kind object;
  #L134ade.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L134ae4.  v0:= temp @kind object;
  #L134ae6.  throw v0;
  #L134ae8.  v0:= "Expected name" @kind object;
  #L134aec.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L134af2.  v0:= temp @kind object;
  #L134af4.  throw v0;
  #L134af6.  if v4 != v0 then goto L134b68;
  #L134afa.  v5:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L134afe.  v6:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L134b02.  v6:= v6 + -1;
  #L134b06.  v5[v6]:= v7;
  #L134b0a.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L134b10.  v5:= temp;
  #L134b12.  goto L134d24;
  #L134b18.  v0:= "Expected ':'" @kind object;
  #L134b1c.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L134b22.  v0:= temp @kind object;
  #L134b24.  throw v0;
  #L134b26.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L134b2c.  v5:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L134b30.  v6:= v8.`com.b.a.d.a.g` @type ^`int`;
  #L134b34.  if v5 < v6 then goto L134b44;
  #L134b38.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L134b3e.  v5:= temp;
  #L134b40.  if v5 == 0 then goto L1349de;
  #L134b44.  v5:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L134b48.  v6:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L134b4c.  v5:= v5[v6] @kind char;
  #L134b50.  v6:= 62I;
  #L134b54.  if v5 != v6 then goto L1349de;
  #L134b58.  v5:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L134b5c.  v5:= v5 + 1;
  #L134b60.  v8.`com.b.a.d.a.f` @type ^`int` := v5;
  #L134b64.  goto L1349de;
  #L134b68.  v5:= 6I;
  #L134b6a.  if v4 != v5 then goto L134b90;
  #L134b6e.  v5:= v8.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L134b72.  if v5 == 0 then goto L134b7c;
  #L134b76.  call `z`(v8) @signature `Lcom/b/a/d/a;.z:()V` @kind direct;
  #L134b7c.  v5:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L134b80.  v6:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L134b84.  v6:= v6 + -1;
  #L134b88.  v5[v6]:= v3;
  #L134b8c.  goto L1349de;
  #L134b90.  if v4 != v3 then goto L134bc6;
  #L134b94.  v5:= 0I;
  #L134b96.  call temp:= `b`(v8, v5) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L134b9c.  v5:= temp;
  #L134b9e.  v6:= -1I;
  #L134ba0.  if v5 != v6 then goto L134bb0;
  #L134ba4.  v0:= 17I;
  #L134ba8.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L134bac.  goto L134a04;
  #L134bb0.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L134bb6.  v5:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L134bba.  v5:= v5 + -1;
  #L134bbe.  v8.`com.b.a.d.a.f` @type ^`int` := v5;
  #L134bc2.  goto L1349de;
  #L134bc6.  v5:= 8I;
  #L134bca.  if v4 != v5 then goto L1349de;
  #L134bce.  v0:= new `java.lang.IllegalStateException`;
  #L134bd2.  v1:= "JsonReader is closed" @kind object;
  #L134bd6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L134bdc.  throw v0;
  #L134bde.  if v4 != v2 then goto L134bea;
  #L134be2.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L134be6.  goto L134a04;
  #L134bea.  if v4 == v2 then goto L134bf2;
  #L134bee.  if v4 != v1 then goto L134c0e;
  #L134bf2.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L134bf8.  v0:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L134bfc.  v0:= v0 + -1;
  #L134c00.  v8.`com.b.a.d.a.f` @type ^`int` := v0;
  #L134c04.  v8.`com.b.a.d.a.a` @type ^`int` := v3;
  #L134c08.  v0:= v3;
  #L134c0a.  goto L134a04;
  #L134c0e.  v0:= "Unexpected value" @kind object;
  #L134c12.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L134c18.  v0:= temp @kind object;
  #L134c1a.  throw v0;
  #L134c1c.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L134c22.  v0:= 8I;
  #L134c26.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L134c2a.  goto L134a04;
  #L134c2e.  v0:= 9I;
  #L134c32.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L134c36.  goto L134a04;
  #L134c3a.  v0:= 3I;
  #L134c3c.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L134c40.  goto L134a04;
  #L134c44.  v8.`com.b.a.d.a.a` @type ^`int` := v2;
  #L134c48.  v0:= v2;
  #L134c4a.  goto L134a04;
  #L134c4e.  call temp:= `s`(v8) @signature `Lcom/b/a/d/a;.s:()I` @kind direct;
  #L134c54.  v0:= temp;
  #L134c56.  if v0 != 0 then goto L134a04;
  #L134c5a.  v0:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L134c5e.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L134c62.  v0:= v0[v1] @kind char;
  #L134c66.  call temp:= `a`(v8, v0) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L134c6c.  v0:= temp;
  #L134c6e.  if v0 != 0 then goto L134c80;
  #L134c72.  v0:= "Expected value" @kind object;
  #L134c76.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L134c7c.  v0:= temp @kind object;
  #L134c7e.  throw v0;
  #L134c80.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L134c86.  v0:= 10I;
  #L134c8a.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L134c8e.  goto L134a04;
  #L134c92.  
  #L134c94.  switch v5
                  | 34 => goto L134c2e
                  | 39 => goto L134c1c
                  | 44 => goto L134bea
                  | 59 => goto L134bea
                  | 91 => goto L134c3a
                  | 93 => goto L134bde
                  | 123 => goto L134c44
                  | else => goto L1349ec;
  #L134cd0.  switch v5
                  | 44 => goto L1349de
                  | 59 => goto L134a2c
                  | 93 => goto L134a26
                  | else => goto L134a18;
  #L134cec.  switch v0
                  | 44 => goto L134a7c
                  | 59 => goto L134a76
                  | 125 => goto L134a6e
                  | else => goto L134a60;
  #L134d08.  switch v0
                  | 34 => goto L134ab4
                  | 39 => goto L134abe
                  | 125 => goto L134ace
                  | else => goto L134a8a;
  #L134d24.  switch v5
                  | 58 => goto L1349de
                  | 59 => goto L134b18
                  | 60 => goto L134b18
                  | 61 => goto L134b26
                  | else => goto L134b18;
}
procedure `java.lang.String` `toString`(`com.b.a.d.a` v2 @kind this) @signature `Lcom/b/a/d/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L134d4c.  v0:= new `java.lang.StringBuilder`;
  #L134d50.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L134d56.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L134d5c.  v1:= temp @kind object;
  #L134d5e.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L134d64.  v1:= temp @kind object;
  #L134d66.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134d6c.  v0:= temp @kind object;
  #L134d6e.  call temp:= `x`(v2) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L134d74.  v1:= temp @kind object;
  #L134d76.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134d7c.  v0:= temp @kind object;
  #L134d7e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L134d84.  v0:= temp @kind object;
  #L134d86.  return v0 @kind object;
}
