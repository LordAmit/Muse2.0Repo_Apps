record `com.b.a.l` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`com.b.a.l` v0 @kind this) @signature `Lcom/b/a/l;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L13e8b8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13e8be.  return @kind void;
}
procedure `java.lang.Number` `a`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.a:()Ljava/lang/Number;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13e8d0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L13e8d4.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13e8da.  v1:= temp @kind object;
  #L13e8dc.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L13e8e2.  v1:= temp @kind object;
  #L13e8e4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e8ea.  throw v0;
}
procedure `java.lang.String` `b`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13e8fc.  v0:= new `java.lang.UnsupportedOperationException`;
  #L13e900.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13e906.  v1:= temp @kind object;
  #L13e908.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L13e90e.  v1:= temp @kind object;
  #L13e910.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e916.  throw v0;
}
procedure `double` `c`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.c:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13e928.  v0:= new `java.lang.UnsupportedOperationException`;
  #L13e92c.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13e932.  v1:= temp @kind object;
  #L13e934.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L13e93a.  v1:= temp @kind object;
  #L13e93c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e942.  throw v0;
}
procedure `long` `d`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13e954.  v0:= new `java.lang.UnsupportedOperationException`;
  #L13e958.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13e95e.  v1:= temp @kind object;
  #L13e960.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L13e966.  v1:= temp @kind object;
  #L13e968.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e96e.  throw v0;
}
procedure `int` `e`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13e980.  v0:= new `java.lang.UnsupportedOperationException`;
  #L13e984.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13e98a.  v1:= temp @kind object;
  #L13e98c.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L13e992.  v1:= temp @kind object;
  #L13e994.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e99a.  throw v0;
}
procedure `boolean` `f`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13e9ac.  v0:= new `java.lang.UnsupportedOperationException`;
  #L13e9b0.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13e9b6.  v1:= temp @kind object;
  #L13e9b8.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L13e9be.  v1:= temp @kind object;
  #L13e9c0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e9c6.  throw v0;
}
procedure `boolean` `g`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13e9d8.  v0:= instanceof @variable v1 @type ^`com.b.a.i` @kind boolean;
  #L13e9dc.  return v0;
}
procedure `boolean` `h`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13e9f0.  v0:= instanceof @variable v1 @type ^`com.b.a.o` @kind boolean;
  #L13e9f4.  return v0;
}
procedure `boolean` `i`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13ea08.  v0:= instanceof @variable v1 @type ^`com.b.a.q` @kind boolean;
  #L13ea0c.  return v0;
}
procedure `boolean` `j`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.j:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13ea20.  v0:= instanceof @variable v1 @type ^`com.b.a.n` @kind boolean;
  #L13ea24.  return v0;
}
procedure `com.b.a.o` `k`(`com.b.a.l` v3 @kind this) @signature `Lcom/b/a/l;.k:()Lcom/b/a/o;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13ea38.  call temp:= `h`(v3) @signature `Lcom/b/a/l;.h:()Z` @kind virtual;
  #L13ea3e.  v0:= temp;
  #L13ea40.  if v0 == 0 then goto L13ea4a;
  #L13ea44.  v3:= (`com.b.a.o`) v3 @kind object;
  #L13ea48.  return v3 @kind object;
  #L13ea4a.  v0:= new `java.lang.IllegalStateException`;
  #L13ea4e.  v1:= new `java.lang.StringBuilder`;
  #L13ea52.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13ea58.  v2:= "Not a JSON Object: " @kind object;
  #L13ea5c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13ea62.  v1:= temp @kind object;
  #L13ea64.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13ea6a.  v1:= temp @kind object;
  #L13ea6c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13ea72.  v1:= temp @kind object;
  #L13ea74.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13ea7a.  throw v0;
}
procedure `com.b.a.i` `l`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.l:()Lcom/b/a/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13ea8c.  call temp:= `g`(v2) @signature `Lcom/b/a/l;.g:()Z` @kind virtual;
  #L13ea92.  v0:= temp;
  #L13ea94.  if v0 == 0 then goto L13ea9e;
  #L13ea98.  v2:= (`com.b.a.i`) v2 @kind object;
  #L13ea9c.  return v2 @kind object;
  #L13ea9e.  v0:= new `java.lang.IllegalStateException`;
  #L13eaa2.  v1:= "This is not a JSON Array." @kind object;
  #L13eaa6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13eaac.  throw v0;
}
procedure `com.b.a.q` `m`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.m:()Lcom/b/a/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13eac0.  call temp:= `i`(v2) @signature `Lcom/b/a/l;.i:()Z` @kind virtual;
  #L13eac6.  v0:= temp;
  #L13eac8.  if v0 == 0 then goto L13ead2;
  #L13eacc.  v2:= (`com.b.a.q`) v2 @kind object;
  #L13ead0.  return v2 @kind object;
  #L13ead2.  v0:= new `java.lang.IllegalStateException`;
  #L13ead6.  v1:= "This is not a JSON Primitive." @kind object;
  #L13eada.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13eae0.  throw v0;
}
procedure `java.lang.Boolean` `n`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.n:()Ljava/lang/Boolean;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L13eaf4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L13eaf8.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13eafe.  v1:= temp @kind object;
  #L13eb00.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L13eb06.  v1:= temp @kind object;
  #L13eb08.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13eb0e.  throw v0;
}
procedure `java.lang.String` `toString`(`com.b.a.l` v3 @kind this) @signature `Lcom/b/a/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L13eb20.  v0:= new `java.io.StringWriter`;
  #L13eb24.  call `<init>`(v0) @signature `Ljava/io/StringWriter;.<init>:()V` @kind direct;
  #L13eb2a.  v1:= new `com.b.a.d.c`;
  #L13eb2e.  call `<init>`(v1, v0) @signature `Lcom/b/a/d/c;.<init>:(Ljava/io/Writer;)V` @kind direct;
  #L13eb34.  v2:= 1I;
  #L13eb36.  call `b`(v1, v2) @signature `Lcom/b/a/d/c;.b:(Z)V` @kind virtual;
  #L13eb3c.  call `a`(v3, v1) @signature `Lcom/b/a/b/j;.a:(Lcom/b/a/l;Lcom/b/a/d/c;)V` @kind static;
  #L13eb42.  call temp:= `toString`(v0) @signature `Ljava/io/StringWriter;.toString:()Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L13eb48.  v0:= temp @kind object;
  #L13eb4a.  return v0 @kind object;
  #L13eb4c.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L13eb4e.  v1:= new `java.lang.AssertionError`;
  #L13eb52.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L13eb58.  throw v1;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L13eb4c;
}
