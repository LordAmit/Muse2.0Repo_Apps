record `com.adonai.manman.parser.Man2Html` @kind class @AccessFlag PUBLIC {
  `com.adonai.manman.parser.Man2Html$FontState` `com.adonai.manman.parser.Man2Html.fontState` @AccessFlag PRIVATE;
  `boolean` `com.adonai.manman.parser.Man2Html.insideParagraph` @AccessFlag PRIVATE;
  `boolean` `com.adonai.manman.parser.Man2Html.insidePreformatted` @AccessFlag PRIVATE;
  `boolean` `com.adonai.manman.parser.Man2Html.insideSection` @AccessFlag PRIVATE;
  `int` `com.adonai.manman.parser.Man2Html.linesBeforeIndent` @AccessFlag PRIVATE;
  `java.lang.String` `com.adonai.manman.parser.Man2Html.manpageName` @AccessFlag PRIVATE;
  `com.adonai.manman.parser.Man2Html$Command` `com.adonai.manman.parser.Man2Html.previousCommand` @AccessFlag PRIVATE;
  `java.lang.String` `com.adonai.manman.parser.Man2Html.previousLine` @AccessFlag PRIVATE;
  `java.lang.StringBuilder` `com.adonai.manman.parser.Man2Html.result` @AccessFlag PRIVATE;
  `java.io.BufferedReader` `com.adonai.manman.parser.Man2Html.source` @AccessFlag PRIVATE;
}
global `java.lang.String` `@@com.adonai.manman.parser.Man2Html.OPTION_PATTERN` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.adonai.manman.parser.Man2Html` v1 @kind this, `java.io.BufferedReader` v2 @kind object) @signature `Lcom/adonai/manman/parser/Man2Html;.<init>:(Ljava/io/BufferedReader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L12b778.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L12b77e.  v0:= new `java.lang.StringBuilder`;
  #L12b782.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12b788.  v1.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` := v0 @kind object;
  #L12b78c.  v0:= `@@com.adonai.manman.parser.Man2Html$FontState.NORMAL` @type ^`com.adonai.manman.parser.Man2Html$FontState` @kind object;
  #L12b790.  v1.`com.adonai.manman.parser.Man2Html.fontState` @type ^`com.adonai.manman.parser.Man2Html$FontState` := v0 @kind object;
  #L12b794.  v0:= -1I;
  #L12b796.  v1.`com.adonai.manman.parser.Man2Html.linesBeforeIndent` @type ^`int` := v0;
  #L12b79a.  v1.`com.adonai.manman.parser.Man2Html.source` @type ^`java.io.BufferedReader` := v2 @kind object;
  #L12b79e.  return @kind void;
}
procedure `void` `doParse`(`com.adonai.manman.parser.Man2Html` v5 @kind this) @signature `Lcom/adonai/manman/parser/Man2Html;.doParse:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L12b7b0.  v4:= 0I;
  #L12b7b2.  v0:= v5.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12b7b6.  v1:= "<html><body>" @kind object;
  #L12b7ba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12b7c0.  v0:= v5.`com.adonai.manman.parser.Man2Html.source` @type ^`java.io.BufferedReader` @kind object;
  #L12b7c4.  call temp:= `readLine`(v0) @signature `Ljava/io/BufferedReader;.readLine:()Ljava/lang/String;` @kind virtual;
  #L12b7ca.  v0:= temp @kind object;
  #L12b7cc.  if v0 == 0 then goto L12b896;
  #L12b7d0.  v1:= "\\" @kind object;
  #L12b7d4.  call temp:= `endsWith`(v0, v1) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L12b7da.  v1:= temp;
  #L12b7dc.  if v1 == 0 then goto L12b828;
  #L12b7e0.  v1:= v5.`com.adonai.manman.parser.Man2Html.source` @type ^`java.io.BufferedReader` @kind object;
  #L12b7e4.  call temp:= `readLine`(v1) @signature `Ljava/io/BufferedReader;.readLine:()Ljava/lang/String;` @kind virtual;
  #L12b7ea.  v1:= temp @kind object;
  #L12b7ec.  if v1 == 0 then goto L12b7d0;
  #L12b7f0.  v2:= new `java.lang.StringBuilder`;
  #L12b7f4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12b7fa.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L12b800.  v3:= temp;
  #L12b802.  v3:= v3 + -2;
  #L12b806.  call temp:= `substring`(v0, v4, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L12b80c.  v0:= temp @kind object;
  #L12b80e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12b814.  v0:= temp @kind object;
  #L12b816.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12b81c.  v0:= temp @kind object;
  #L12b81e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12b824.  v0:= temp @kind object;
  #L12b826.  goto L12b7d0;
  #L12b828.  v1:= "'" @kind object;
  #L12b82c.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L12b832.  v1:= temp;
  #L12b834.  if v1 != 0 then goto L12b7c0;
  #L12b838.  v1:= ".\\" @kind object;
  #L12b83c.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L12b842.  v1:= temp;
  #L12b844.  if v1 != 0 then goto L12b7c0;
  #L12b848.  v1:= "\\\\" @kind object;
  #L12b84c.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L12b852.  v1:= temp;
  #L12b854.  if v1 != 0 then goto L12b7c0;
  #L12b858.  call temp:= `isControl`(v5, v0) @signature `Lcom/adonai/manman/parser/Man2Html;.isControl:(Ljava/lang/String;)Z` @kind direct;
  #L12b85e.  v1:= temp;
  #L12b860.  if v1 == 0 then goto L12b876;
  #L12b864.  call `evaluateCommand`(v5, v0) @signature `Lcom/adonai/manman/parser/Man2Html;.evaluateCommand:(Ljava/lang/String;)V` @kind direct;
  #L12b86a.  call `handleSpecialConditions`(v5) @signature `Lcom/adonai/manman/parser/Man2Html;.handleSpecialConditions:()V` @kind direct;
  #L12b870.  v5.`com.adonai.manman.parser.Man2Html.previousLine` @type ^`java.lang.String` := v0 @kind object;
  #L12b874.  goto L12b7c0;
  #L12b876.  v1:= v5.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12b87a.  v2:= " " @kind object;
  #L12b87e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12b884.  v1:= temp @kind object;
  #L12b886.  call temp:= `parseTextField`(v5, v0, v4) @signature `Lcom/adonai/manman/parser/Man2Html;.parseTextField:(Ljava/lang/String;Z)Ljava/lang/String;` @kind direct;
  #L12b88c.  v2:= temp @kind object;
  #L12b88e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12b894.  goto L12b86a;
  #L12b896.  v0:= v5.`com.adonai.manman.parser.Man2Html.insideParagraph` @type ^`boolean` @kind boolean;
  #L12b89a.  if v0 == 0 then goto L12b8ac;
  #L12b89e.  v0:= v5.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12b8a2.  v1:= "</p>" @kind object;
  #L12b8a6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12b8ac.  v0:= v5.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12b8b0.  v1:= "</body></html>" @kind object;
  #L12b8b4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12b8ba.  return @kind void;
}
procedure `void` `evaluateCommand`(`com.adonai.manman.parser.Man2Html` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lcom/adonai/manman/parser/Man2Html;.evaluateCommand:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L12b8cc.  v3:= 1I;
  #L12b8ce.  v2:= -1I;
  #L12b8d0.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L12b8d6.  v0:= temp;
  #L12b8d8.  v1:= 2I;
  #L12b8da.  if v0 >= v1 then goto L12b8e0;
  #L12b8de.  return @kind void;
  #L12b8e0.  v0:= " " @kind object;
  #L12b8e4.  call temp:= `indexOf`(v5, v0) @signature `Ljava/lang/String;.indexOf:(Ljava/lang/String;)I` @kind virtual;
  #L12b8ea.  v0:= temp;
  #L12b8ec.  if v0 == v2 then goto L12b95a;
  #L12b8f0.  call temp:= `substring`(v5, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L12b8f6.  v1:= temp @kind object;
  #L12b8f8.  v0:= v0 + 1;
  #L12b8fc.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L12b902.  v0:= temp @kind object;
  #Try_start0.  
  #L12b904.  call temp:= `toLowerCase`(v1) @signature `Ljava/lang/String;.toLowerCase:()Ljava/lang/String;` @kind virtual;
  #L12b90a.  v1:= temp @kind object;
  #L12b90c.  call temp:= `valueOf`(v1) @signature `Lcom/adonai/manman/parser/Man2Html$Command;.valueOf:(Ljava/lang/String;)Lcom/adonai/manman/parser/Man2Html$Command;` @kind static;
  #L12b912.  v1:= temp @kind object;
  #L12b914.  call temp:= `access$000`(v1) @signature `Lcom/adonai/manman/parser/Man2Html$Command;.access$000:(Lcom/adonai/manman/parser/Man2Html$Command;)Z` @kind static;
  #L12b91a.  v2:= temp;
  #L12b91c.  if v2 == 0 then goto L12b93c;
  #L12b920.  v2:= v4.`com.adonai.manman.parser.Man2Html.linesBeforeIndent` @type ^`int`;
  #L12b924.  if v2 != 0 then goto L12b93c;
  #L12b928.  v2:= v4.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12b92c.  v3:= "</dd></dl>" @kind object;
  #L12b930.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12b936.  v2:= -1I;
  #L12b938.  v4.`com.adonai.manman.parser.Man2Html.linesBeforeIndent` @type ^`int` := v2;
  #L12b93c.  call `executeCommand`(v4, v1, v0) @signature `Lcom/adonai/manman/parser/Man2Html;.executeCommand:(Lcom/adonai/manman/parser/Man2Html$Command;Ljava/lang/String;)V` @kind direct;
  #L12b942.  v4.`com.adonai.manman.parser.Man2Html.previousCommand` @type ^`com.adonai.manman.parser.Man2Html$Command` := v1 @kind object;
  #Try_end0.  
  #L12b946.  goto L12b8de;
  #L12b948.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L12b94a.  v1:= "Man Man" @kind object;
  #L12b94e.  v2:= "Man2Html - unimplemented control" @kind object;
  #L12b952.  call temp:= `w`(v1, v2, v0) @signature `Landroid/util/Log;.w:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/Throwable;)I` @kind static;
  #L12b958.  goto L12b8de;
  #L12b95a.  call temp:= `substring`(v5, v3) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L12b960.  v1:= temp @kind object;
  #L12b962.  v0:= "" @kind object;
  #L12b966.  goto L12b904;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L12b948;
}
procedure `void` `executeCommand`(`com.adonai.manman.parser.Man2Html` v10 @kind this, `com.adonai.manman.parser.Man2Html$Command` v11 @kind object, `java.lang.String` v12 @kind object) @signature `Lcom/adonai/manman/parser/Man2Html;.executeCommand:(Lcom/adonai/manman/parser/Man2Html$Command;Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L12b988.  v3:= 0I;
  #L12b98a.  v2:= 1I;
  #L12b98c.  v0:= `@@com.adonai.manman.parser.Man2Html$1.$SwitchMap$com$adonai$manman$parser$Man2Html$Command` @type ^`int`[] @kind object;
  #L12b990.  call temp:= `ordinal`(v11) @signature `Lcom/adonai/manman/parser/Man2Html$Command;.ordinal:()I` @kind virtual;
  #L12b996.  v1:= temp;
  #L12b998.  v0:= v0[v1];
  #L12b99c.  goto L12bff8;
  #L12b9a2.  return @kind void;
  #L12b9a4.  call temp:= `parseQuotedCommandArguments`(v10, v12) @signature `Lcom/adonai/manman/parser/Man2Html;.parseQuotedCommandArguments:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L12b9aa.  v0:= temp @kind object;
  #L12b9ac.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L12b9b2.  v1:= temp;
  #L12b9b4.  if v1 != 0 then goto L12b9a2;
  #L12b9b8.  v1:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12b9bc.  v2:= "<div class='man-page'>" @kind object;
  #L12b9c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12b9c6.  v1:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12b9ca.  v2:= "<h1>" @kind object;
  #L12b9ce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12b9d4.  v1:= temp @kind object;
  #L12b9d6.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L12b9dc.  v0:= temp @kind object;
  #L12b9de.  v0:= (`java.lang.String`) v0 @kind object;
  #L12b9e2.  call temp:= `parseTextField`(v10, v0, v3) @signature `Lcom/adonai/manman/parser/Man2Html;.parseTextField:(Ljava/lang/String;Z)Ljava/lang/String;` @kind direct;
  #L12b9e8.  v0:= temp @kind object;
  #L12b9ea.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12b9f0.  v0:= temp @kind object;
  #L12b9f2.  v1:= "</h1>" @kind object;
  #L12b9f6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12b9fc.  goto L12b9a2;
  #L12b9fe.  v0:= v10.`com.adonai.manman.parser.Man2Html.insideParagraph` @type ^`boolean` @kind boolean;
  #L12ba02.  if v0 == 0 then goto L12ba14;
  #L12ba06.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12ba0a.  v1:= "</p>" @kind object;
  #L12ba0e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ba14.  v10.`com.adonai.manman.parser.Man2Html.insideParagraph` @type ^`boolean` := v2 @kind boolean;
  #L12ba18.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12ba1c.  v1:= "<p>" @kind object;
  #L12ba20.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ba26.  goto L12b9a2;
  #L12ba28.  v0:= v10.`com.adonai.manman.parser.Man2Html.insideSection` @type ^`boolean` @kind boolean;
  #L12ba2c.  if v0 == 0 then goto L12ba3e;
  #L12ba30.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12ba34.  v1:= "</div>" @kind object;
  #L12ba38.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ba3e.  call temp:= `parseQuotedCommandArguments`(v10, v12) @signature `Lcom/adonai/manman/parser/Man2Html;.parseQuotedCommandArguments:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L12ba44.  v0:= temp @kind object;
  #L12ba46.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L12ba4c.  v1:= temp;
  #L12ba4e.  if v1 != 0 then goto L12bad4;
  #L12ba52.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L12ba58.  v0:= temp @kind object;
  #L12ba5a.  v0:= (`java.lang.String`) v0 @kind object;
  #L12ba5e.  call temp:= `parseTextField`(v10, v0, v2) @signature `Lcom/adonai/manman/parser/Man2Html;.parseTextField:(Ljava/lang/String;Z)Ljava/lang/String;` @kind direct;
  #L12ba64.  v0:= temp @kind object;
  #L12ba66.  v1:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12ba6a.  v3:= "<div id='" @kind object;
  #L12ba6e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ba74.  v1:= temp @kind object;
  #L12ba76.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ba7c.  v1:= temp @kind object;
  #L12ba7e.  v3:= "' class='section'>" @kind object;
  #L12ba82.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ba88.  v1:= temp @kind object;
  #L12ba8a.  v3:= "<h2>" @kind object;
  #L12ba8e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ba94.  v1:= temp @kind object;
  #L12ba96.  v3:= "<a href='#" @kind object;
  #L12ba9a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12baa0.  v1:= temp @kind object;
  #L12baa2.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12baa8.  v1:= temp @kind object;
  #L12baaa.  v3:= "'>" @kind object;
  #L12baae.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bab4.  v1:= temp @kind object;
  #L12bab6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12babc.  v0:= temp @kind object;
  #L12babe.  v1:= "</a>" @kind object;
  #L12bac2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bac8.  v0:= temp @kind object;
  #L12baca.  v1:= "</h2>" @kind object;
  #L12bace.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bad4.  v10.`com.adonai.manman.parser.Man2Html.insideSection` @type ^`boolean` := v2 @kind boolean;
  #L12bad8.  goto L12b9a2;
  #L12badc.  call temp:= `parseTextField`(v10, v12, v2) @signature `Lcom/adonai/manman/parser/Man2Html;.parseTextField:(Ljava/lang/String;Z)Ljava/lang/String;` @kind direct;
  #L12bae2.  v0:= temp @kind object;
  #L12bae4.  v1:= "\\w+" @kind object;
  #L12bae8.  call temp:= `compile`(v1) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L12baee.  v1:= temp @kind object;
  #L12baf0.  call temp:= `matcher`(v1, v0) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L12baf6.  v0:= temp @kind object;
  #L12baf8.  v1:= "-$0" @kind object;
  #L12bafc.  call temp:= `replaceAll`(v0, v1) @signature `Ljava/util/regex/Matcher;.replaceAll:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L12bb02.  v0:= temp @kind object;
  #L12bb04.  v1:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bb08.  v2:= " " @kind object;
  #L12bb0c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bb12.  v1:= temp @kind object;
  #L12bb14.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bb1a.  goto L12b9a2;
  #L12bb1e.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bb22.  v1:= " [" @kind object;
  #L12bb26.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bb2c.  call temp:= `parseTextField`(v10, v12, v2) @signature `Lcom/adonai/manman/parser/Man2Html;.parseTextField:(Ljava/lang/String;Z)Ljava/lang/String;` @kind direct;
  #L12bb32.  v0:= temp @kind object;
  #L12bb34.  v1:= " " @kind object;
  #L12bb38.  call temp:= `split`(v0, v1) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L12bb3e.  v6:= temp @kind object;
  #L12bb40.  v7:= length @variable v6;
  #L12bb42.  v5:= v3;
  #L12bb44.  v1:= v3;
  #L12bb46.  v4:= v3;
  #L12bb48.  if v5 >= v7 then goto L12bbe8;
  #L12bb4c.  v8:= v6[v5] @kind object;
  #L12bb50.  v0:= `@@com.adonai.manman.parser.Man2Html$Command.fl` @type ^`com.adonai.manman.parser.Man2Html$Command` @kind object;
  #L12bb54.  call temp:= `name`(v0) @signature `Lcom/adonai/manman/parser/Man2Html$Command;.name:()Ljava/lang/String;` @kind virtual;
  #L12bb5a.  v0:= temp @kind object;
  #L12bb5c.  call temp:= `equalsIgnoreCase`(v8, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L12bb62.  v0:= temp;
  #L12bb64.  if v0 == 0 then goto L12bb78;
  #L12bb68.  v0:= v1;
  #L12bb6a.  v1:= v2;
  #L12bb6c.  v4:= v5 + 1;
  #L12bb70.  v5:= v4;
  #L12bb72.  v4:= v1;
  #L12bb74.  v1:= v0;
  #L12bb76.  goto L12bb48;
  #L12bb78.  v0:= `@@com.adonai.manman.parser.Man2Html$Command.ar` @type ^`com.adonai.manman.parser.Man2Html$Command` @kind object;
  #L12bb7c.  call temp:= `name`(v0) @signature `Lcom/adonai/manman/parser/Man2Html$Command;.name:()Ljava/lang/String;` @kind virtual;
  #L12bb82.  v0:= temp @kind object;
  #L12bb84.  call temp:= `equalsIgnoreCase`(v8, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L12bb8a.  v0:= temp;
  #L12bb8c.  if v0 == 0 then goto L12bb96;
  #L12bb90.  v0:= v2;
  #L12bb92.  v1:= v4;
  #L12bb94.  goto L12bb6c;
  #L12bb96.  v9:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bb9a.  if v1 == 0 then goto L12bbd6;
  #L12bb9e.  v0:= "<i>" @kind object;
  #L12bba2.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bba8.  v9:= temp @kind object;
  #L12bbaa.  if v4 == 0 then goto L12bbdc;
  #L12bbae.  v0:= "-" @kind object;
  #L12bbb2.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bbb8.  v0:= temp @kind object;
  #L12bbba.  call temp:= `append`(v0, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bbc0.  v4:= temp @kind object;
  #L12bbc2.  if v1 == 0 then goto L12bbe2;
  #L12bbc6.  v0:= "</i>" @kind object;
  #L12bbca.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bbd0.  v0:= v3;
  #L12bbd2.  v1:= v3;
  #L12bbd4.  goto L12bb6c;
  #L12bbd6.  v0:= "" @kind object;
  #L12bbda.  goto L12bba2;
  #L12bbdc.  v0:= "" @kind object;
  #L12bbe0.  goto L12bbb2;
  #L12bbe2.  v0:= "" @kind object;
  #L12bbe6.  goto L12bbca;
  #L12bbe8.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bbec.  v1:= "]" @kind object;
  #L12bbf0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bbf6.  goto L12b9a2;
  #L12bbfa.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bbfe.  v1:= "<dl><dd>" @kind object;
  #L12bc02.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bc08.  v0:= new `java.lang.StringBuilder`;
  #L12bc0c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12bc12.  v1:= "." @kind object;
  #L12bc16.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bc1c.  v0:= temp @kind object;
  #L12bc1e.  call temp:= `append`(v0, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bc24.  v0:= temp @kind object;
  #L12bc26.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12bc2c.  v0:= temp @kind object;
  #L12bc2e.  call `evaluateCommand`(v10, v0) @signature `Lcom/adonai/manman/parser/Man2Html;.evaluateCommand:(Ljava/lang/String;)V` @kind direct;
  #L12bc34.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bc38.  v1:= "</dd></dl>" @kind object;
  #L12bc3c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bc42.  goto L12b9a2;
  #L12bc46.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bc4a.  v1:= "<dl><dd>" @kind object;
  #L12bc4e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bc54.  goto L12b9a2;
  #L12bc58.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bc5c.  v1:= "</dd></dl>" @kind object;
  #L12bc60.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bc66.  goto L12b9a2;
  #L12bc6a.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bc6e.  v1:= " " @kind object;
  #L12bc72.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bc78.  v0:= temp @kind object;
  #L12bc7a.  v1:= "<b><i>" @kind object;
  #L12bc7e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bc84.  v0:= v10.`com.adonai.manman.parser.Man2Html.insidePreformatted` @type ^`boolean` @kind boolean;
  #L12bc88.  if v0 == 0 then goto L12bcee;
  #L12bc8c.  v0:= "\"" @kind object;
  #L12bc90.  call temp:= `contains`(v12, v0) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L12bc96.  v0:= temp;
  #L12bc98.  if v0 == 0 then goto L12bcee;
  #L12bc9c.  call temp:= `parseQuotedCommandArguments`(v10, v12) @signature `Lcom/adonai/manman/parser/Man2Html;.parseQuotedCommandArguments:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L12bca2.  v0:= temp @kind object;
  #L12bca4.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L12bcaa.  v1:= temp @kind object;
  #L12bcac.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L12bcb2.  v0:= temp;
  #L12bcb4.  if v0 == 0 then goto L12bcd0;
  #L12bcb8.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L12bcbe.  v0:= temp @kind object;
  #L12bcc0.  v0:= (`java.lang.String`) v0 @kind object;
  #L12bcc4.  v2:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bcc8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bcce.  goto L12bcac;
  #L12bcd0.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bcd4.  v1:= "</i></b>" @kind object;
  #L12bcd8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bcde.  v0:= temp @kind object;
  #L12bce0.  v1:= "\n" @kind object;
  #L12bce4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bcea.  goto L12b9a2;
  #L12bcee.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bcf2.  call temp:= `parseTextField`(v10, v12, v2) @signature `Lcom/adonai/manman/parser/Man2Html;.parseTextField:(Ljava/lang/String;Z)Ljava/lang/String;` @kind direct;
  #L12bcf8.  v1:= temp @kind object;
  #L12bcfa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bd00.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bd04.  v1:= "</i></b>" @kind object;
  #L12bd08.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bd0e.  v0:= temp @kind object;
  #L12bd10.  v1:= " " @kind object;
  #L12bd14.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bd1a.  goto L12b9a2;
  #L12bd1e.  v0:= "\\w+" @kind object;
  #L12bd22.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L12bd28.  v0:= temp @kind object;
  #L12bd2a.  call temp:= `matcher`(v0, v12) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L12bd30.  v0:= temp @kind object;
  #L12bd32.  call temp:= `find`(v0) @signature `Ljava/util/regex/Matcher;.find:()Z` @kind virtual;
  #L12bd38.  v1:= temp;
  #L12bd3a.  if v1 == 0 then goto L12bd5a;
  #L12bd3e.  v3:= v10.`com.adonai.manman.parser.Man2Html.manpageName` @type ^`java.lang.String` @kind object;
  #L12bd42.  call temp:= `isBlank`(v3) @signature `Lorg/jsoup/helper/StringUtil;.isBlank:(Ljava/lang/String;)Z` @kind static;
  #L12bd48.  v3:= temp;
  #L12bd4a.  if v3 == 0 then goto L12bd5a;
  #L12bd4e.  call temp:= `group`(v0) @signature `Ljava/util/regex/Matcher;.group:()Ljava/lang/String;` @kind virtual;
  #L12bd54.  v0:= temp @kind object;
  #L12bd56.  v10.`com.adonai.manman.parser.Man2Html.manpageName` @type ^`java.lang.String` := v0 @kind object;
  #L12bd5a.  v0:= v10.`com.adonai.manman.parser.Man2Html.previousLine` @type ^`java.lang.String` @kind object;
  #L12bd5e.  call temp:= `isControl`(v10, v0) @signature `Lcom/adonai/manman/parser/Man2Html;.isControl:(Ljava/lang/String;)Z` @kind direct;
  #L12bd64.  v0:= temp;
  #L12bd66.  if v0 == 0 then goto L12bd78;
  #L12bd6a.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bd6e.  v3:= "<br/>" @kind object;
  #L12bd72.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bd78.  if v1 != 0 then goto L12bd90;
  #L12bd7c.  v0:= v10.`com.adonai.manman.parser.Man2Html.manpageName` @type ^`java.lang.String` @kind object;
  #L12bd80.  call temp:= `isBlank`(v0) @signature `Lorg/jsoup/helper/StringUtil;.isBlank:(Ljava/lang/String;)Z` @kind static;
  #L12bd86.  v0:= temp;
  #L12bd88.  if v0 != 0 then goto L12bd90;
  #L12bd8c.  v12:= v10.`com.adonai.manman.parser.Man2Html.manpageName` @type ^`java.lang.String` @kind object;
  #L12bd90.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bd94.  v1:= " " @kind object;
  #L12bd98.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bd9e.  v0:= temp @kind object;
  #L12bda0.  v1:= "<b>" @kind object;
  #L12bda4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bdaa.  v0:= temp @kind object;
  #L12bdac.  call temp:= `parseTextField`(v10, v12, v2) @signature `Lcom/adonai/manman/parser/Man2Html;.parseTextField:(Ljava/lang/String;Z)Ljava/lang/String;` @kind direct;
  #L12bdb2.  v1:= temp @kind object;
  #L12bdb4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bdba.  v0:= temp @kind object;
  #L12bdbc.  v1:= "</b>" @kind object;
  #L12bdc0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bdc6.  v0:= temp @kind object;
  #L12bdc8.  v1:= " " @kind object;
  #L12bdcc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bdd2.  goto L12b9a2;
  #L12bdd6.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bdda.  v1:= " " @kind object;
  #L12bdde.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bde4.  v0:= temp @kind object;
  #L12bde6.  v1:= "<i>" @kind object;
  #L12bdea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bdf0.  v0:= temp @kind object;
  #L12bdf2.  call temp:= `parseTextField`(v10, v12, v2) @signature `Lcom/adonai/manman/parser/Man2Html;.parseTextField:(Ljava/lang/String;Z)Ljava/lang/String;` @kind direct;
  #L12bdf8.  v1:= temp @kind object;
  #L12bdfa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12be00.  v0:= temp @kind object;
  #L12be02.  v1:= "</i>" @kind object;
  #L12be06.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12be0c.  v0:= temp @kind object;
  #L12be0e.  v1:= " " @kind object;
  #L12be12.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12be18.  goto L12b9a2;
  #L12be1c.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12be20.  v1:= " " @kind object;
  #L12be24.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12be2a.  v0:= temp @kind object;
  #L12be2c.  call temp:= `parseTextField`(v10, v12, v2) @signature `Lcom/adonai/manman/parser/Man2Html;.parseTextField:(Ljava/lang/String;Z)Ljava/lang/String;` @kind direct;
  #L12be32.  v1:= temp @kind object;
  #L12be34.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12be3a.  v0:= temp @kind object;
  #L12be3c.  v1:= " " @kind object;
  #L12be40.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12be46.  goto L12b9a2;
  #L12be4a.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L12be50.  v0:= temp;
  #L12be52.  if v0 != 0 then goto L12be68;
  #L12be56.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12be5a.  v1:= "<br/>" @kind object;
  #L12be5e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12be64.  goto L12b9a2;
  #L12be68.  call temp:= `parseTextField`(v10, v12, v2) @signature `Lcom/adonai/manman/parser/Man2Html;.parseTextField:(Ljava/lang/String;Z)Ljava/lang/String;` @kind direct;
  #L12be6e.  v0:= temp @kind object;
  #L12be70.  v1:= " " @kind object;
  #L12be74.  call temp:= `split`(v0, v1) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L12be7a.  v0:= temp @kind object;
  #L12be7c.  v1:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12be80.  v4:= " " @kind object;
  #L12be84.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12be8a.  v1:= temp @kind object;
  #L12be8c.  v4:= "<b>" @kind object;
  #L12be90.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12be96.  v1:= temp @kind object;
  #L12be98.  v3:= v0[v3] @kind object;
  #L12be9c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bea2.  v1:= temp @kind object;
  #L12bea4.  v3:= "</b>" @kind object;
  #L12bea8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12beae.  v1:= length @variable v0;
  #L12beb0.  if v2 >= v1 then goto L12b9a2;
  #L12beb4.  v1:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12beb8.  v3:= " " @kind object;
  #L12bebc.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bec2.  v1:= temp @kind object;
  #L12bec4.  v3:= v0[v2] @kind object;
  #L12bec8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bece.  v2:= v2 + 1;
  #L12bed2.  goto L12beae;
  #L12bed4.  v0:= 2I;
  #L12bed6.  v10.`com.adonai.manman.parser.Man2Html.linesBeforeIndent` @type ^`int` := v0;
  #L12beda.  goto L12b9a2;
  #L12bede.  v0:= "\"" @kind object;
  #L12bee2.  call temp:= `startsWith`(v12, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L12bee8.  v0:= temp;
  #L12beea.  if v0 == 0 then goto L12bf60;
  #L12beee.  v0:= "\"\"" @kind object;
  #L12bef2.  call temp:= `startsWith`(v12, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L12bef8.  v0:= temp;
  #L12befa.  if v0 != 0 then goto L12bf50;
  #L12befe.  call temp:= `parseQuotedCommandArguments`(v10, v12) @signature `Lcom/adonai/manman/parser/Man2Html;.parseQuotedCommandArguments:(Ljava/lang/String;)Ljava/util/List;` @kind direct;
  #L12bf04.  v0:= temp @kind object;
  #L12bf06.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L12bf0c.  v1:= temp;
  #L12bf0e.  if v1 != 0 then goto L12bf48;
  #L12bf12.  v1:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bf16.  v4:= "<dl><dt>" @kind object;
  #L12bf1a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bf20.  v1:= temp @kind object;
  #L12bf22.  call temp:= `get`(v0, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L12bf28.  v0:= temp @kind object;
  #L12bf2a.  v0:= (`java.lang.String`) v0 @kind object;
  #L12bf2e.  call temp:= `parseTextField`(v10, v0, v2) @signature `Lcom/adonai/manman/parser/Man2Html;.parseTextField:(Ljava/lang/String;Z)Ljava/lang/String;` @kind direct;
  #L12bf34.  v0:= temp @kind object;
  #L12bf36.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bf3c.  v0:= temp @kind object;
  #L12bf3e.  v1:= "</dt><dd>" @kind object;
  #L12bf42.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bf48.  v10.`com.adonai.manman.parser.Man2Html.linesBeforeIndent` @type ^`int` := v3;
  #L12bf4c.  goto L12b9a2;
  #L12bf50.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bf54.  v1:= "<dl><dd>" @kind object;
  #L12bf58.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bf5e.  goto L12bf48;
  #L12bf60.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bf64.  v1:= "<dl><dt>" @kind object;
  #L12bf68.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bf6e.  v0:= temp @kind object;
  #L12bf70.  call temp:= `parseTextField`(v10, v12, v2) @signature `Lcom/adonai/manman/parser/Man2Html;.parseTextField:(Ljava/lang/String;Z)Ljava/lang/String;` @kind direct;
  #L12bf76.  v1:= temp @kind object;
  #L12bf78.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bf7e.  v0:= temp @kind object;
  #L12bf80.  v1:= "</dt><dd>" @kind object;
  #L12bf84.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bf8a.  goto L12bf48;
  #L12bf8c.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bf90.  v1:= "<pre>" @kind object;
  #L12bf94.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bf9a.  v10.`com.adonai.manman.parser.Man2Html.insidePreformatted` @type ^`boolean` := v2 @kind boolean;
  #L12bf9e.  goto L12b9a2;
  #L12bfa2.  v10.`com.adonai.manman.parser.Man2Html.insidePreformatted` @type ^`boolean` := v3 @kind boolean;
  #L12bfa6.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bfaa.  v1:= "</pre>" @kind object;
  #L12bfae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bfb4.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bfb8.  v1:= " " @kind object;
  #L12bfbc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bfc2.  v0:= temp @kind object;
  #L12bfc4.  call temp:= `parseTextField`(v10, v12, v2) @signature `Lcom/adonai/manman/parser/Man2Html;.parseTextField:(Ljava/lang/String;Z)Ljava/lang/String;` @kind direct;
  #L12bfca.  v1:= temp @kind object;
  #L12bfcc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bfd2.  goto L12b9a2;
  #L12bfd6.  v0:= v10.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12bfda.  v1:= " - " @kind object;
  #L12bfde.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bfe4.  v0:= temp @kind object;
  #L12bfe6.  call temp:= `parseTextField`(v10, v12, v2) @signature `Lcom/adonai/manman/parser/Man2Html;.parseTextField:(Ljava/lang/String;Z)Ljava/lang/String;` @kind direct;
  #L12bfec.  v1:= temp @kind object;
  #L12bfee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12bff4.  goto L12b9a2;
  #L12bff8.  switch v0
                  | 1 => goto L12b9a4
                  | 2 => goto L12b9a4
                  | 3 => goto L12b9fe
                  | 4 => goto L12b9fe
                  | 5 => goto L12b9fe
                  | 6 => goto L12b9fe
                  | 7 => goto L12ba28
                  | 8 => goto L12badc
                  | 9 => goto L12bb1e
                  | 10 => goto L12bbfa
                  | 11 => goto L12bc46
                  | 12 => goto L12bc46
                  | 13 => goto L12bc58
                  | 14 => goto L12bc58
                  | 15 => goto L12bc6a
                  | 16 => goto L12bd1e
                  | 17 => goto L12bd90
                  | 18 => goto L12bdd6
                  | 19 => goto L12bdd6
                  | 20 => goto L12be1c
                  | 21 => goto L12be1c
                  | 22 => goto L12be1c
                  | 23 => goto L12be1c
                  | 24 => goto L12be4a
                  | 25 => goto L12bed4
                  | 26 => goto L12bede
                  | 27 => goto L12bf8c
                  | 28 => goto L12bfa2
                  | 29 => goto L12bfd6
                  | else => goto L12b9a2;
}
procedure `void` `handleSpecialConditions`(`com.adonai.manman.parser.Man2Html` v2 @kind this) @signature `Lcom/adonai/manman/parser/Man2Html;.handleSpecialConditions:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L12c084.  v0:= v2.`com.adonai.manman.parser.Man2Html.linesBeforeIndent` @type ^`int`;
  #L12c088.  if v0 <= 0 then goto L12c09e;
  #L12c08c.  v0:= v2.`com.adonai.manman.parser.Man2Html.linesBeforeIndent` @type ^`int`;
  #L12c090.  v0:= v0 + -1;
  #L12c094.  v2.`com.adonai.manman.parser.Man2Html.linesBeforeIndent` @type ^`int` := v0;
  #L12c098.  goto L12c0c0;
  #L12c09e.  return @kind void;
  #L12c0a0.  v0:= v2.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12c0a4.  v1:= "<dl><dt>" @kind object;
  #L12c0a8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c0ae.  goto L12c09e;
  #L12c0b0.  v0:= v2.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12c0b4.  v1:= "</dt><dd>" @kind object;
  #L12c0b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c0be.  goto L12c09e;
  #L12c0c0.  switch v0
                  | 0 => goto L12c0b0
                  | 1 => goto L12c0a0
                  | else => goto L12c09e;
}
procedure `boolean` `isControl`(`com.adonai.manman.parser.Man2Html` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/adonai/manman/parser/Man2Html;.isControl:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L12c0e0.  v0:= "." @kind object;
  #L12c0e4.  call temp:= `startsWith`(v2, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L12c0ea.  v0:= temp;
  #L12c0ec.  if v0 != 0 then goto L12c100;
  #L12c0f0.  v0:= "'" @kind object;
  #L12c0f4.  call temp:= `startsWith`(v2, v0) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L12c0fa.  v0:= temp;
  #L12c0fc.  if v0 == 0 then goto L12c104;
  #L12c100.  v0:= 1I;
  #L12c102.  return v0;
  #L12c104.  v0:= 0I;
  #L12c106.  goto L12c102;
}
procedure `java.util.List` `parseQuotedCommandArguments`(`com.adonai.manman.parser.Man2Html` v6 @kind this, `java.lang.String` v7 @kind object) @signature `Lcom/adonai/manman/parser/Man2Html;.parseQuotedCommandArguments:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L12c118.  v0:= "\"" @kind object;
  #L12c11c.  call temp:= `split`(v7, v0) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L12c122.  v1:= temp @kind object;
  #L12c124.  v2:= new `java.util.ArrayList`;
  #L12c128.  v0:= length @variable v1;
  #L12c12a.  call `<init>`(v2, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L12c130.  v3:= length @variable v1;
  #L12c132.  v0:= 0I;
  #L12c134.  if v0 >= v3 then goto L12c162;
  #L12c138.  v4:= v1[v0] @kind object;
  #L12c13c.  call temp:= `isEmpty`(v4) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L12c142.  v5:= temp;
  #L12c144.  if v5 != 0 then goto L12c154;
  #L12c148.  call temp:= `isBlank`(v4) @signature `Lorg/jsoup/helper/StringUtil;.isBlank:(Ljava/lang/String;)Z` @kind static;
  #L12c14e.  v5:= temp;
  #L12c150.  if v5 == 0 then goto L12c15a;
  #L12c154.  v0:= v0 + 1;
  #L12c158.  goto L12c134;
  #L12c15a.  call temp:= `add`(v2, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L12c160.  goto L12c154;
  #L12c162.  return v2 @kind object;
}
procedure `java.lang.String` `parseTextField`(`com.adonai.manman.parser.Man2Html` v11 @kind this, `java.lang.String` v12 @kind object, `boolean` v13 ) @signature `Lcom/adonai/manman/parser/Man2Html;.parseTextField:(Ljava/lang/String;Z)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L12c174.  v9:= 32I;
  #L12c178.  v1:= 0I;
  #L12c17a.  call temp:= `length`(v12) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L12c180.  v6:= temp;
  #L12c182.  v7:= new `java.lang.StringBuilder`;
  #L12c186.  call `<init>`(v7, v6) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L12c18c.  v8:= new `java.lang.StringBuilder`;
  #L12c190.  v0:= 100I;
  #L12c194.  call `<init>`(v8, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L12c19a.  v2:= v1;
  #L12c19c.  v3:= v1;
  #L12c19e.  v5:= v1;
  #L12c1a0.  if v2 >= v6 then goto L12c314;
  #L12c1a4.  call temp:= `charAt`(v12, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L12c1aa.  v4:= temp;
  #L12c1ac.  v0:= 34I;
  #L12c1b0.  if v4 != v0 then goto L12c1ce;
  #L12c1b4.  if v5 != 0 then goto L12c1ca;
  #L12c1b8.  v0:= 1I;
  #L12c1ba.  v10:= v3;
  #L12c1bc.  v3:= v0;
  #L12c1be.  v0:= v10;
  #L12c1c0.  v2:= v2 + 1;
  #L12c1c4.  v5:= v3;
  #L12c1c6.  v3:= v0;
  #L12c1c8.  goto L12c1a0;
  #L12c1ca.  v0:= v1;
  #L12c1cc.  goto L12c1ba;
  #L12c1ce.  if v5 != 0 then goto L12c1e4;
  #L12c1d2.  if v13 == 0 then goto L12c1e4;
  #L12c1d6.  if v3 != v9 then goto L12c1e4;
  #L12c1da.  if v4 != v9 then goto L12c1e4;
  #L12c1de.  v0:= v3;
  #L12c1e0.  v3:= v5;
  #L12c1e2.  goto L12c1c0;
  #L12c1e4.  v0:= 92I;
  #L12c1e8.  if v4 != v0 then goto L12c30a;
  #L12c1ec.  v0:= v2 + 1;
  #L12c1f0.  if v6 <= v0 then goto L12c30a;
  #L12c1f4.  call temp:= `escapeHtml`(v8) @signature `Lcom/adonai/manman/parser/HtmlEscaper;.escapeHtml:(Ljava/lang/CharSequence;)Ljava/lang/String;` @kind static;
  #L12c1fa.  v0:= temp @kind object;
  #L12c1fc.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c202.  call `setLength`(v8, v1) @signature `Ljava/lang/StringBuilder;.setLength:(I)V` @kind virtual;
  #L12c208.  v0:= v2 + 1;
  #L12c20c.  call temp:= `charAt`(v12, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L12c212.  v2:= temp;
  #L12c214.  goto L12c340;
  #L12c21a.  call temp:= `append`(v8, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c220.  v2:= v0;
  #L12c222.  v3:= v5;
  #L12c224.  v0:= v4;
  #L12c226.  goto L12c1c0;
  #L12c228.  v2:= v0 + 1;
  #L12c22c.  if v6 <= v2 then goto L12c220;
  #L12c230.  v2:= `@@com.adonai.manman.parser.Man2Html$1.$SwitchMap$com$adonai$manman$parser$Man2Html$FontState` @type ^`int`[] @kind object;
  #L12c234.  v3:= v11.`com.adonai.manman.parser.Man2Html.fontState` @type ^`com.adonai.manman.parser.Man2Html$FontState` @kind object;
  #L12c238.  call temp:= `ordinal`(v3) @signature `Lcom/adonai/manman/parser/Man2Html$FontState;.ordinal:()I` @kind virtual;
  #L12c23e.  v3:= temp;
  #L12c240.  v2:= v2[v3];
  #L12c244.  goto L12c374;
  #L12c24a.  v0:= v0 + 1;
  #L12c24e.  call temp:= `charAt`(v12, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L12c254.  v2:= temp;
  #L12c256.  goto L12c384;
  #L12c25c.  goto L12c220;
  #L12c25e.  v2:= `@@com.adonai.manman.parser.Man2Html$FontState.BOLD` @type ^`com.adonai.manman.parser.Man2Html$FontState` @kind object;
  #L12c262.  v11.`com.adonai.manman.parser.Man2Html.fontState` @type ^`com.adonai.manman.parser.Man2Html$FontState` := v2 @kind object;
  #L12c266.  v2:= "<b>" @kind object;
  #L12c26a.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c270.  goto L12c220;
  #L12c272.  v2:= "</b>" @kind object;
  #L12c276.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c27c.  goto L12c24a;
  #L12c27e.  v2:= "</i>" @kind object;
  #L12c282.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c288.  goto L12c24a;
  #L12c28a.  v2:= `@@com.adonai.manman.parser.Man2Html$FontState.ITALIC` @type ^`com.adonai.manman.parser.Man2Html$FontState` @kind object;
  #L12c28e.  v11.`com.adonai.manman.parser.Man2Html.fontState` @type ^`com.adonai.manman.parser.Man2Html$FontState` := v2 @kind object;
  #L12c292.  v2:= "<i>" @kind object;
  #L12c296.  call temp:= `append`(v7, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c29c.  goto L12c220;
  #L12c29e.  v2:= `@@com.adonai.manman.parser.Man2Html$FontState.NORMAL` @type ^`com.adonai.manman.parser.Man2Html$FontState` @kind object;
  #L12c2a2.  v11.`com.adonai.manman.parser.Man2Html.fontState` @type ^`com.adonai.manman.parser.Man2Html$FontState` := v2 @kind object;
  #L12c2a6.  goto L12c220;
  #L12c2a8.  v2:= v0 + 2;
  #L12c2ac.  if v6 <= v2 then goto L12c220;
  #L12c2b0.  v2:= v0 + 1;
  #L12c2b4.  v3:= v0 + 3;
  #L12c2b8.  call temp:= `substring`(v12, v2, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L12c2be.  v2:= temp @kind object;
  #L12c2c0.  call temp:= `parseSpecial`(v2) @signature `Lcom/adonai/manman/parser/SpecialsHandler;.parseSpecial:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L12c2c6.  v2:= temp @kind object;
  #L12c2c8.  call temp:= `append`(v8, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c2ce.  v0:= v0 + 2;
  #L12c2d2.  goto L12c220;
  #L12c2d4.  v2:= 93I;
  #L12c2d8.  call temp:= `indexOf`(v12, v2, v0) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L12c2de.  v2:= temp;
  #L12c2e0.  v3:= -1I;
  #L12c2e2.  if v2 == v3 then goto L12c220;
  #L12c2e6.  v0:= v0 + 1;
  #L12c2ea.  call temp:= `substring`(v12, v0, v2) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L12c2f0.  v0:= temp @kind object;
  #L12c2f2.  call temp:= `parseSpecial`(v0) @signature `Lcom/adonai/manman/parser/SpecialsHandler;.parseSpecial:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L12c2f8.  v0:= temp @kind object;
  #L12c2fa.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c300.  v0:= v2;
  #L12c302.  goto L12c220;
  #L12c304.  v0:= v0 + 3;
  #L12c308.  goto L12c220;
  #L12c30a.  call temp:= `append`(v8, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c310.  v0:= v2;
  #L12c312.  goto L12c220;
  #L12c314.  call temp:= `escapeHtml`(v8) @signature `Lcom/adonai/manman/parser/HtmlEscaper;.escapeHtml:(Ljava/lang/CharSequence;)Ljava/lang/String;` @kind static;
  #L12c31a.  v0:= temp @kind object;
  #L12c31c.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c322.  v0:= v11.`com.adonai.manman.parser.Man2Html.insidePreformatted` @type ^`boolean` @kind boolean;
  #L12c326.  if v0 == 0 then goto L12c334;
  #L12c32a.  v0:= "\n" @kind object;
  #L12c32e.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c334.  call temp:= `toString`(v7) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12c33a.  v0:= temp @kind object;
  #L12c33c.  return v0 @kind object;
  #L12c33e.  
  #L12c340.  switch v2
                  | 38 => goto L12c220
                  | 40 => goto L12c2a8
                  | 42 => goto L12c304
                  | 91 => goto L12c2d4
                  | 94 => goto L12c220
                  | 102 => goto L12c228
                  | else => goto L12c21a;
  #L12c374.  switch v2
                  | 1 => goto L12c272
                  | 2 => goto L12c27e
                  | else => goto L12c24a;
  #L12c384.  switch v2
                  | 66 => goto L12c25e
                  | 73 => goto L12c28a
                  | 80 => goto L12c29e
                  | 82 => goto L12c29e
                  | else => goto L12c25c;
}
procedure `org.jsoup.nodes.Document` `postprocessInDocLinks`(`com.adonai.manman.parser.Man2Html` v10 @kind this, `java.lang.StringBuilder` v11 @kind object) @signature `Lcom/adonai/manman/parser/Man2Html;.postprocessInDocLinks:(Ljava/lang/StringBuilder;)Lorg/jsoup/nodes/Document;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L12c3b8.  v9:= 1I;
  #L12c3ba.  v8:= 0I;
  #L12c3bc.  call temp:= `toString`(v11) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12c3c2.  v0:= temp @kind object;
  #L12c3c4.  call temp:= `parse`(v0) @signature `Lorg/jsoup/Jsoup;.parse:(Ljava/lang/String;)Lorg/jsoup/nodes/Document;` @kind static;
  #L12c3ca.  v1:= temp @kind object;
  #L12c3cc.  v0:= "div#OPTIONS > p > b:matches(%1$s),div#OPTIONS > dl > dt b:matches(%1$s)" @kind object;
  #L12c3d0.  v2:= new `java.lang.Object`[v9];
  #L12c3d4.  v3:= "^--?[a-zA-Z-=]+$" @kind object;
  #L12c3d8.  v2[v8]:= v3 @kind object;
  #L12c3dc.  call temp:= `format`(v0, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L12c3e2.  v0:= temp @kind object;
  #L12c3e4.  call temp:= `select`(v1, v0) @signature `Lorg/jsoup/nodes/Document;.select:(Ljava/lang/String;)Lorg/jsoup/select/Elements;` @kind virtual;
  #L12c3ea.  v0:= temp @kind object;
  #L12c3ec.  v2:= new `java.util.HashSet`;
  #L12c3f0.  call temp:= `size`(v0) @signature `Lorg/jsoup/select/Elements;.size:()I` @kind virtual;
  #L12c3f6.  v3:= temp;
  #L12c3f8.  call `<init>`(v2, v3) @signature `Ljava/util/HashSet;.<init>:(I)V` @kind direct;
  #L12c3fe.  call temp:= `iterator`(v0) @signature `Lorg/jsoup/select/Elements;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L12c404.  v3:= temp @kind object;
  #L12c406.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L12c40c.  v0:= temp;
  #L12c40e.  if v0 == 0 then goto L12c4ae;
  #L12c412.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L12c418.  v0:= temp @kind object;
  #L12c41a.  v0:= (`org.jsoup.nodes.Element`) v0 @kind object;
  #L12c41e.  v4:= new `org.jsoup.nodes.Element`;
  #L12c422.  v5:= "a" @kind object;
  #L12c426.  call temp:= `valueOf`(v5) @signature `Lorg/jsoup/parser/Tag;.valueOf:(Ljava/lang/String;)Lorg/jsoup/parser/Tag;` @kind static;
  #L12c42c.  v5:= temp @kind object;
  #L12c42e.  call temp:= `baseUri`(v1) @signature `Lorg/jsoup/nodes/Document;.baseUri:()Ljava/lang/String;` @kind virtual;
  #L12c434.  v6:= temp @kind object;
  #L12c436.  call `<init>`(v4, v5, v6) @signature `Lorg/jsoup/nodes/Element;.<init>:(Lorg/jsoup/parser/Tag;Ljava/lang/String;)V` @kind direct;
  #L12c43c.  v5:= "href" @kind object;
  #L12c440.  v6:= new `java.lang.StringBuilder`;
  #L12c444.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12c44a.  v7:= "#" @kind object;
  #L12c44e.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c454.  v6:= temp @kind object;
  #L12c456.  call temp:= `ownText`(v0) @signature `Lorg/jsoup/nodes/Element;.ownText:()Ljava/lang/String;` @kind virtual;
  #L12c45c.  v7:= temp @kind object;
  #L12c45e.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c464.  v6:= temp @kind object;
  #L12c466.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12c46c.  v6:= temp @kind object;
  #L12c46e.  call temp:= `attr`(v4, v5, v6) @signature `Lorg/jsoup/nodes/Element;.attr:(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/Element;` @kind virtual;
  #L12c474.  v5:= "id" @kind object;
  #L12c478.  call temp:= `ownText`(v0) @signature `Lorg/jsoup/nodes/Element;.ownText:()Ljava/lang/String;` @kind virtual;
  #L12c47e.  v6:= temp @kind object;
  #L12c480.  call temp:= `attr`(v4, v5, v6) @signature `Lorg/jsoup/nodes/Element;.attr:(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/Element;` @kind virtual;
  #L12c486.  v5:= "in-doc" @kind object;
  #L12c48a.  call temp:= `addClass`(v4, v5) @signature `Lorg/jsoup/nodes/Element;.addClass:(Ljava/lang/String;)Lorg/jsoup/nodes/Element;` @kind virtual;
  #L12c490.  call temp:= `clone`(v0) @signature `Lorg/jsoup/nodes/Element;.clone:()Lorg/jsoup/nodes/Element;` @kind virtual;
  #L12c496.  v5:= temp @kind object;
  #L12c498.  call temp:= `appendChild`(v4, v5) @signature `Lorg/jsoup/nodes/Element;.appendChild:(Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;` @kind virtual;
  #L12c49e.  call temp:= `ownText`(v0) @signature `Lorg/jsoup/nodes/Element;.ownText:()Ljava/lang/String;` @kind virtual;
  #L12c4a4.  v0:= temp @kind object;
  #L12c4a6.  call temp:= `add`(v2, v0) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L12c4ac.  goto L12c406;
  #L12c4ae.  v0:= "b:matches(%s)" @kind object;
  #L12c4b2.  v3:= new `java.lang.Object`[v9];
  #L12c4b6.  v4:= "^--?[a-zA-Z-=]+$" @kind object;
  #L12c4ba.  v3[v8]:= v4 @kind object;
  #L12c4be.  call temp:= `format`(v0, v3) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L12c4c4.  v0:= temp @kind object;
  #L12c4c6.  call temp:= `select`(v1, v0) @signature `Lorg/jsoup/nodes/Document;.select:(Ljava/lang/String;)Lorg/jsoup/select/Elements;` @kind virtual;
  #L12c4cc.  v0:= temp @kind object;
  #L12c4ce.  call temp:= `iterator`(v0) @signature `Lorg/jsoup/select/Elements;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L12c4d4.  v3:= temp @kind object;
  #L12c4d6.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L12c4dc.  v0:= temp;
  #L12c4de.  if v0 == 0 then goto L12c578;
  #L12c4e2.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L12c4e8.  v0:= temp @kind object;
  #L12c4ea.  v0:= (`org.jsoup.nodes.Element`) v0 @kind object;
  #L12c4ee.  call temp:= `ownText`(v0) @signature `Lorg/jsoup/nodes/Element;.ownText:()Ljava/lang/String;` @kind virtual;
  #L12c4f4.  v4:= temp @kind object;
  #L12c4f6.  call temp:= `contains`(v2, v4) @signature `Ljava/util/Set;.contains:(Ljava/lang/Object;)Z` @kind interface;
  #L12c4fc.  v4:= temp;
  #L12c4fe.  if v4 == 0 then goto L12c4d6;
  #L12c502.  v4:= new `org.jsoup.nodes.Element`;
  #L12c506.  v5:= "a" @kind object;
  #L12c50a.  call temp:= `valueOf`(v5) @signature `Lorg/jsoup/parser/Tag;.valueOf:(Ljava/lang/String;)Lorg/jsoup/parser/Tag;` @kind static;
  #L12c510.  v5:= temp @kind object;
  #L12c512.  call temp:= `baseUri`(v1) @signature `Lorg/jsoup/nodes/Document;.baseUri:()Ljava/lang/String;` @kind virtual;
  #L12c518.  v6:= temp @kind object;
  #L12c51a.  call `<init>`(v4, v5, v6) @signature `Lorg/jsoup/nodes/Element;.<init>:(Lorg/jsoup/parser/Tag;Ljava/lang/String;)V` @kind direct;
  #L12c520.  v5:= "href" @kind object;
  #L12c524.  v6:= new `java.lang.StringBuilder`;
  #L12c528.  call `<init>`(v6) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12c52e.  v7:= "#" @kind object;
  #L12c532.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c538.  v6:= temp @kind object;
  #L12c53a.  call temp:= `ownText`(v0) @signature `Lorg/jsoup/nodes/Element;.ownText:()Ljava/lang/String;` @kind virtual;
  #L12c540.  v7:= temp @kind object;
  #L12c542.  call temp:= `append`(v6, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12c548.  v6:= temp @kind object;
  #L12c54a.  call temp:= `toString`(v6) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12c550.  v6:= temp @kind object;
  #L12c552.  call temp:= `attr`(v4, v5, v6) @signature `Lorg/jsoup/nodes/Element;.attr:(Ljava/lang/String;Ljava/lang/String;)Lorg/jsoup/nodes/Element;` @kind virtual;
  #L12c558.  v5:= "in-doc" @kind object;
  #L12c55c.  call temp:= `addClass`(v4, v5) @signature `Lorg/jsoup/nodes/Element;.addClass:(Ljava/lang/String;)Lorg/jsoup/nodes/Element;` @kind virtual;
  #L12c562.  call temp:= `clone`(v0) @signature `Lorg/jsoup/nodes/Element;.clone:()Lorg/jsoup/nodes/Element;` @kind virtual;
  #L12c568.  v5:= temp @kind object;
  #L12c56a.  call temp:= `appendChild`(v4, v5) @signature `Lorg/jsoup/nodes/Element;.appendChild:(Lorg/jsoup/nodes/Node;)Lorg/jsoup/nodes/Element;` @kind virtual;
  #L12c570.  call `replaceWith`(v0, v4) @signature `Lorg/jsoup/nodes/Element;.replaceWith:(Lorg/jsoup/nodes/Node;)V` @kind virtual;
  #L12c576.  goto L12c4d6;
  #L12c578.  return v1 @kind object;
}
procedure `org.jsoup.nodes.Document` `getDoc`(`com.adonai.manman.parser.Man2Html` v1 @kind this) @signature `Lcom/adonai/manman/parser/Man2Html;.getDoc:()Lorg/jsoup/nodes/Document;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c58c.  call `doParse`(v1) @signature `Lcom/adonai/manman/parser/Man2Html;.doParse:()V` @kind direct;
  #L12c592.  v0:= v1.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12c596.  call temp:= `postprocessInDocLinks`(v1, v0) @signature `Lcom/adonai/manman/parser/Man2Html;.postprocessInDocLinks:(Ljava/lang/StringBuilder;)Lorg/jsoup/nodes/Document;` @kind direct;
  #L12c59c.  v0:= temp @kind object;
  #L12c59e.  return v0 @kind object;
}
procedure `java.lang.String` `getHtml`(`com.adonai.manman.parser.Man2Html` v1 @kind this) @signature `Lcom/adonai/manman/parser/Man2Html;.getHtml:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12c5b0.  call `doParse`(v1) @signature `Lcom/adonai/manman/parser/Man2Html;.doParse:()V` @kind direct;
  #L12c5b6.  v0:= v1.`com.adonai.manman.parser.Man2Html.result` @type ^`java.lang.StringBuilder` @kind object;
  #L12c5ba.  call temp:= `postprocessInDocLinks`(v1, v0) @signature `Lcom/adonai/manman/parser/Man2Html;.postprocessInDocLinks:(Ljava/lang/StringBuilder;)Lorg/jsoup/nodes/Document;` @kind direct;
  #L12c5c0.  v0:= temp @kind object;
  #L12c5c2.  call temp:= `html`(v0) @signature `Lorg/jsoup/nodes/Document;.html:()Ljava/lang/String;` @kind virtual;
  #L12c5c8.  v0:= temp @kind object;
  #L12c5ca.  return v0 @kind object;
}
