record `com.j256.ormlite.stmt.query.BaseComparison` @kind class @AccessFlag ABSTRACT extends `com.j256.ormlite.stmt.query.Comparison` @kind interface {
  `java.lang.String` `com.j256.ormlite.stmt.query.BaseComparison.columnName` @AccessFlag PROTECTED_FINAL;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.stmt.query.BaseComparison.fieldType` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `com.j256.ormlite.stmt.query.BaseComparison.value` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@com.j256.ormlite.stmt.query.BaseComparison.NUMBER_CHARACTERS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.BaseComparison` v3 @kind this, `java.lang.String` v4 @kind object, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `boolean` v7 ) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Z)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L15dd04.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15dd0a.  if v7 == 0 then goto L15dd78;
  #L15dd0e.  if v5 == 0 then goto L15dd78;
  #L15dd12.  call temp:= `isComparable`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.isComparable:()Z` @kind virtual;
  #L15dd18.  v0:= temp;
  #L15dd1a.  if v0 != 0 then goto L15dd78;
  #L15dd1e.  v0:= new `java.sql.SQLException`;
  #L15dd22.  v1:= new `java.lang.StringBuilder`;
  #L15dd26.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15dd2c.  v2:= "Field '" @kind object;
  #L15dd30.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15dd36.  v1:= temp @kind object;
  #L15dd38.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15dd3e.  v1:= temp @kind object;
  #L15dd40.  v2:= "' is of data type " @kind object;
  #L15dd44.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15dd4a.  v1:= temp @kind object;
  #L15dd4c.  call temp:= `getDataPersister`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L15dd52.  v2:= temp @kind object;
  #L15dd54.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15dd5a.  v1:= temp @kind object;
  #L15dd5c.  v2:= " which can not be compared" @kind object;
  #L15dd60.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15dd66.  v1:= temp @kind object;
  #L15dd68.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15dd6e.  v1:= temp @kind object;
  #L15dd70.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15dd76.  throw v0;
  #L15dd78.  v3.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` := v4 @kind object;
  #L15dd7c.  v3.`com.j256.ormlite.stmt.query.BaseComparison.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v5 @kind object;
  #L15dd80.  v3.`com.j256.ormlite.stmt.query.BaseComparison.value` @type ^`java.lang.Object` := v6 @kind object;
  #L15dd84.  return @kind void;
}
procedure `void` `appendArgOrValue`(`com.j256.ormlite.stmt.query.BaseComparison` v7 @kind this, `com.j256.ormlite.db.DatabaseType` v8 @kind object, `com.j256.ormlite.field.FieldType` v9 @kind object, `java.lang.StringBuilder` v10 @kind object, `java.util.List` v11 @kind object, `java.lang.Object` v12 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L15dd98.  v2:= 63I;
  #L15dd9c.  v6:= 0I;
  #L15dd9e.  v0:= 1I;
  #L15dda0.  if v12 != 0 then goto L15ddea;
  #L15dda4.  v0:= new `java.sql.SQLException`;
  #L15dda8.  v1:= new `java.lang.StringBuilder`;
  #L15ddac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15ddb2.  v2:= "argument for '" @kind object;
  #L15ddb6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ddbc.  v1:= temp @kind object;
  #L15ddbe.  call temp:= `getFieldName`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldName:()Ljava/lang/String;` @kind virtual;
  #L15ddc4.  v2:= temp @kind object;
  #L15ddc6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ddcc.  v1:= temp @kind object;
  #L15ddce.  v2:= "' is null" @kind object;
  #L15ddd2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ddd8.  v1:= temp @kind object;
  #L15ddda.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15dde0.  v1:= temp @kind object;
  #L15dde2.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15dde8.  throw v0;
  #L15ddea.  v1:= instanceof @variable v12 @type ^`com.j256.ormlite.stmt.ArgumentHolder` @kind boolean;
  #L15ddee.  if v1 == 0 then goto L15de1c;
  #L15ddf2.  call temp:= `append`(v10, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ddf8.  v12:= (`com.j256.ormlite.stmt.ArgumentHolder`) v12 @kind object;
  #L15ddfc.  v1:= v7.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L15de00.  call `setMetaInfo`(v12, v1, v9) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setMetaInfo:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)V` @kind interface;
  #L15de06.  call temp:= `add`(v11, v12) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15de0c.  if v0 == 0 then goto L15de1a;
  #L15de10.  v0:= 32I;
  #L15de14.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15de1a.  return @kind void;
  #L15de1c.  v1:= instanceof @variable v12 @type ^`com.j256.ormlite.stmt.ColumnArg` @kind boolean;
  #L15de20.  if v1 == 0 then goto L15de54;
  #L15de24.  v12:= (`com.j256.ormlite.stmt.ColumnArg`) v12 @kind object;
  #L15de28.  call temp:= `getTableName`(v12) @signature `Lcom/j256/ormlite/stmt/ColumnArg;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L15de2e.  v1:= temp @kind object;
  #L15de30.  if v1 == 0 then goto L15de44;
  #L15de34.  call `appendEscapedEntityName`(v8, v10, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L15de3a.  v1:= 46I;
  #L15de3e.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15de44.  call temp:= `getColumnName`(v12) @signature `Lcom/j256/ormlite/stmt/ColumnArg;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L15de4a.  v1:= temp @kind object;
  #L15de4c.  call `appendEscapedEntityName`(v8, v10, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L15de52.  goto L15de0c;
  #L15de54.  call temp:= `isArgumentHolderRequired`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isArgumentHolderRequired:()Z` @kind virtual;
  #L15de5a.  v1:= temp;
  #L15de5c.  if v1 == 0 then goto L15de88;
  #L15de60.  call temp:= `append`(v10, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15de66.  v1:= new `com.j256.ormlite.stmt.SelectArg`;
  #L15de6a.  call `<init>`(v1) @signature `Lcom/j256/ormlite/stmt/SelectArg;.<init>:()V` @kind direct;
  #L15de70.  v2:= v7.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L15de74.  call `setMetaInfo`(v1, v2, v9) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setMetaInfo:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)V` @kind interface;
  #L15de7a.  call `setValue`(v1, v12) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setValue:(Ljava/lang/Object;)V` @kind interface;
  #L15de80.  call temp:= `add`(v11, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15de86.  goto L15de0c;
  #L15de88.  call temp:= `isForeign`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @kind virtual;
  #L15de8e.  v1:= temp;
  #L15de90.  if v1 == 0 then goto L15ded2;
  #L15de94.  call temp:= `getType`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15de9a.  v1:= temp @kind object;
  #L15de9c.  call temp:= `getClass`(v12) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15dea2.  v2:= temp @kind object;
  #L15dea4.  call temp:= `isAssignableFrom`(v1, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L15deaa.  v1:= temp;
  #L15deac.  if v1 == 0 then goto L15ded2;
  #L15deb0.  call temp:= `getForeignIdField`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15deb6.  v2:= temp @kind object;
  #L15deb8.  call temp:= `extractJavaFieldValue`(v2, v12) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15debe.  v5:= temp @kind object;
  #L15dec0.  v0:= v7 @kind object;
  #L15dec2.  v1:= v8 @kind object;
  #L15dec4.  v3:= v10 @kind object;
  #L15dec6.  v4:= v11 @kind object;
  #L15dec8.  call `appendArgOrValue`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @kind virtual;
  #L15dece.  v0:= v6;
  #L15ded0.  goto L15de0c;
  #L15ded2.  call temp:= `isEscapedValue`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedValue:()Z` @kind virtual;
  #L15ded8.  v1:= temp;
  #L15deda.  if v1 == 0 then goto L15def6;
  #L15dede.  call temp:= `convertJavaFieldToSqlArgValue`(v9, v12) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15dee4.  v1:= temp @kind object;
  #L15dee6.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L15deec.  v1:= temp @kind object;
  #L15deee.  call `appendEscapedWord`(v8, v10, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L15def4.  goto L15de0c;
  #L15def6.  call temp:= `isForeign`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @kind virtual;
  #L15defc.  v1:= temp;
  #L15defe.  if v1 == 0 then goto L15df9a;
  #L15df02.  call temp:= `convertJavaFieldToSqlArgValue`(v9, v12) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15df08.  v1:= temp @kind object;
  #L15df0a.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L15df10.  v1:= temp @kind object;
  #L15df12.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15df18.  v2:= temp;
  #L15df1a.  if v2 <= 0 then goto L15df90;
  #L15df1e.  v2:= "0123456789.-+" @kind object;
  #L15df22.  call temp:= `charAt`(v1, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15df28.  v3:= temp;
  #L15df2a.  call temp:= `indexOf`(v2, v3) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L15df30.  v2:= temp;
  #L15df32.  if v2 >= 0 then goto L15df90;
  #L15df36.  v0:= new `java.sql.SQLException`;
  #L15df3a.  v2:= new `java.lang.StringBuilder`;
  #L15df3e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15df44.  v3:= "Foreign field " @kind object;
  #L15df48.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15df4e.  v2:= temp @kind object;
  #L15df50.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15df56.  v2:= temp @kind object;
  #L15df58.  v3:= " does not seem to be producing a numerical value '" @kind object;
  #L15df5c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15df62.  v2:= temp @kind object;
  #L15df64.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15df6a.  v1:= temp @kind object;
  #L15df6c.  v2:= "'. Maybe you are passing the wrong object to comparison: " @kind object;
  #L15df70.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15df76.  v1:= temp @kind object;
  #L15df78.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15df7e.  v1:= temp @kind object;
  #L15df80.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15df86.  v1:= temp @kind object;
  #L15df88.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15df8e.  throw v0;
  #L15df90.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15df96.  goto L15de0c;
  #L15df9a.  call temp:= `convertJavaFieldToSqlArgValue`(v9, v12) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15dfa0.  v1:= temp @kind object;
  #L15dfa2.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15dfa8.  goto L15de0c;
}
procedure `void` `appendOperation`(`java.lang.StringBuilder` v0 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `appendSql`(`com.j256.ormlite.stmt.query.BaseComparison` v1 @kind this, `com.j256.ormlite.db.DatabaseType` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.StringBuilder` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15dfbc.  if v3 == 0 then goto L15dfd0;
  #L15dfc0.  call `appendEscapedEntityName`(v2, v4, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L15dfc6.  v0:= 46I;
  #L15dfca.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15dfd0.  v0:= v1.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L15dfd4.  call `appendEscapedEntityName`(v2, v4, v0) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L15dfda.  v0:= 32I;
  #L15dfde.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15dfe4.  call `appendOperation`(v1, v4) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @kind virtual;
  #L15dfea.  call `appendValue`(v1, v2, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L15dff0.  return @kind void;
}
procedure `void` `appendValue`(`com.j256.ormlite.stmt.query.BaseComparison` v6 @kind this, `com.j256.ormlite.db.DatabaseType` v7 @kind object, `java.lang.StringBuilder` v8 @kind object, `java.util.List` v9 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15e004.  v2:= v6.`com.j256.ormlite.stmt.query.BaseComparison.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15e008.  v5:= v6.`com.j256.ormlite.stmt.query.BaseComparison.value` @type ^`java.lang.Object` @kind object;
  #L15e00c.  v0:= v6 @kind object;
  #L15e00e.  v1:= v7 @kind object;
  #L15e010.  v3:= v8 @kind object;
  #L15e012.  v4:= v9 @kind object;
  #L15e014.  call `appendArgOrValue`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @kind virtual;
  #L15e01a.  return @kind void;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.stmt.query.BaseComparison` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e02c.  v0:= v1.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L15e030.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.query.BaseComparison` v3 @kind this) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15e044.  v2:= 32I;
  #L15e048.  v0:= new `java.lang.StringBuilder`;
  #L15e04c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e052.  v1:= v3.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L15e056.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e05c.  v1:= temp @kind object;
  #L15e05e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e064.  call `appendOperation`(v3, v0) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @kind virtual;
  #L15e06a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e070.  v1:= v3.`com.j256.ormlite.stmt.query.BaseComparison.value` @type ^`java.lang.Object` @kind object;
  #L15e074.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e07a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e080.  v0:= temp @kind object;
  #L15e082.  return v0 @kind object;
}
