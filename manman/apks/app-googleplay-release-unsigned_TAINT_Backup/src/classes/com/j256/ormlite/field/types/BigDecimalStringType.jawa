record `com.j256.ormlite.field.types.BigDecimalStringType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `int` `@@com.j256.ormlite.field.types.BigDecimalStringType.DEFAULT_WIDTH` @AccessFlag PUBLIC_STATIC;
global `com.j256.ormlite.field.types.BigDecimalStringType` `@@com.j256.ormlite.field.types.BigDecimalStringType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L151438.  v0:= 255I;
  #L15143c.  `@@com.j256.ormlite.field.types.BigDecimalStringType.DEFAULT_WIDTH` @type ^`int` := v0;
  #L151440.  v0:= new `com.j256.ormlite.field.types.BigDecimalStringType`;
  #L151444.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.<init>:()V` @kind direct;
  #L15144a.  `@@com.j256.ormlite.field.types.BigDecimalStringType.singleTon` @type ^`com.j256.ormlite.field.types.BigDecimalStringType` := v0 @kind object;
  #L15144e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BigDecimalStringType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L151460.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L151464.  v1:= 1I;
  #L151466.  v1:= new `java.lang.Class`[v1];
  #L15146a.  v2:= 0I;
  #L15146c.  v3:= constclass @type ^`java.math.BigDecimal` @kind object;
  #L151470.  v1[v2]:= v3 @kind object;
  #L151474.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15147a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BigDecimalStringType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15148c.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L151492.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BigDecimalStringType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.getSingleton:()Lcom/j256/ormlite/field/types/BigDecimalStringType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1514a4.  v0:= `@@com.j256.ormlite.field.types.BigDecimalStringType.singleTon` @type ^`com.j256.ormlite.field.types.BigDecimalStringType` @kind object;
  #L1514a8.  return v0 @kind object;
}
procedure `int` `getDefaultWidth`(`com.j256.ormlite.field.types.BigDecimalStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.getDefaultWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1514bc.  v0:= `@@com.j256.ormlite.field.types.BigDecimalStringType.DEFAULT_WIDTH` @type ^`int`;
  #L1514c0.  return v0;
}
procedure `boolean` `isAppropriateId`(`com.j256.ormlite.field.types.BigDecimalStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.isAppropriateId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1514d4.  v0:= 0I;
  #L1514d6.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.BigDecimalStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1514e8.  v3:= (`java.math.BigDecimal`) v3 @kind object;
  #L1514ec.  call temp:= `toString`(v3) @signature `Ljava/math/BigDecimal;.toString:()Ljava/lang/String;` @kind virtual;
  #L1514f2.  v0:= temp @kind object;
  #L1514f4.  return v0 @kind object;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.BigDecimalStringType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L151508.  v0:= new `java.math.BigDecimal`;
  #L15150c.  call `<init>`(v0, v5) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L151512.  call temp:= `toString`(v0) @signature `Ljava/math/BigDecimal;.toString:()Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L151518.  v0:= temp @kind object;
  #L15151a.  return v0 @kind object;
  #L15151c.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L15151e.  v1:= new `java.lang.StringBuilder`;
  #L151522.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L151528.  v2:= "Problems with field " @kind object;
  #L15152c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L151532.  v1:= temp @kind object;
  #L151534.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15153a.  v1:= temp @kind object;
  #L15153c.  v2:= " parsing default BigDecimal string '" @kind object;
  #L151540.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L151546.  v1:= temp @kind object;
  #L151548.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15154e.  v1:= temp @kind object;
  #L151550.  v2:= "'" @kind object;
  #L151554.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15155a.  v1:= temp @kind object;
  #L15155c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L151562.  v1:= temp @kind object;
  #L151564.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15156a.  v0:= temp @kind object;
  #L15156c.  throw v0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L15151c;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.BigDecimalStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L151590.  call temp:= `getString`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getString:(I)Ljava/lang/String;` @kind interface;
  #L151596.  v0:= temp @kind object;
  #L151598.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.BigDecimalStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L1515ac.  v2:= new `java.math.BigDecimal`;
  #L1515b0.  v0:= v6 @kind object;
  #L1515b2.  v0:= (`java.lang.String`) v0 @kind object;
  #L1515b6.  v1:= v0 @kind object;
  #L1515b8.  call `<init>`(v2, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #Try_end0.  
  #L1515be.  return v2 @kind object;
  #L1515c0.  v1:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L1515c2.  v2:= new `java.lang.StringBuilder`;
  #L1515c6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1515cc.  v3:= "Problems with column " @kind object;
  #L1515d0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1515d6.  v2:= temp @kind object;
  #L1515d8.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1515de.  v2:= temp @kind object;
  #L1515e0.  v3:= " parsing BigDecimal string '" @kind object;
  #L1515e4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1515ea.  v2:= temp @kind object;
  #L1515ec.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1515f2.  v2:= temp @kind object;
  #L1515f4.  v3:= "'" @kind object;
  #L1515f8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1515fe.  v2:= temp @kind object;
  #L151600.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L151606.  v2:= temp @kind object;
  #L151608.  call temp:= `create`(v2, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15160e.  v1:= temp @kind object;
  #L151610.  throw v1;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L1515c0;
}
