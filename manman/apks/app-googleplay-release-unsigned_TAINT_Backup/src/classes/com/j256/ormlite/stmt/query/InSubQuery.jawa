record `com.j256.ormlite.stmt.query.InSubQuery` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.query.BaseComparison` @kind class {
  `boolean` `com.j256.ormlite.stmt.query.InSubQuery.in` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper` `com.j256.ormlite.stmt.query.InSubQuery.subQueryBuilder` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.InSubQuery` v2 @kind this, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper` v5 @kind object, `boolean` v6 ) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/stmt/QueryBuilder$InternalQueryBuilderWrapper;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L15e488.  v0:= 0I;
  #L15e48a.  v1:= 1I;
  #L15e48c.  call `<init>`(v2, v3, v4, v0, v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Z)V` @kind direct;
  #L15e492.  v2.`com.j256.ormlite.stmt.query.InSubQuery.subQueryBuilder` @type ^`com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper` := v5 @kind object;
  #L15e496.  v2.`com.j256.ormlite.stmt.query.InSubQuery.in` @type ^`boolean` := v6 @kind boolean;
  #L15e49a.  return @kind void;
}
procedure `void` `appendOperation`(`com.j256.ormlite.stmt.query.InSubQuery` v1 @kind this, `java.lang.StringBuilder` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.appendOperation:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e4ac.  v0:= v1.`com.j256.ormlite.stmt.query.InSubQuery.in` @type ^`boolean` @kind boolean;
  #L15e4b0.  if v0 == 0 then goto L15e4c0;
  #L15e4b4.  v0:= "IN " @kind object;
  #L15e4b8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e4be.  return @kind void;
  #L15e4c0.  v0:= "NOT IN " @kind object;
  #L15e4c4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e4ca.  goto L15e4be;
}
procedure `void` `appendSql`(`com.j256.ormlite.stmt.query.InSubQuery` v0 @kind this, `com.j256.ormlite.db.DatabaseType` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.StringBuilder` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L15e4dc.  call `appendSql`(v0, v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind super;
  #L15e4e2.  return @kind void;
}
procedure `void` `appendValue`(`com.j256.ormlite.stmt.query.InSubQuery` v5 @kind this, `com.j256.ormlite.db.DatabaseType` v6 @kind object, `java.lang.StringBuilder` v7 @kind object, `java.util.List` v8 @kind object) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15e4f4.  v4:= 0I;
  #L15e4f6.  v0:= 40I;
  #L15e4fa.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e500.  v0:= v5.`com.j256.ormlite.stmt.query.InSubQuery.subQueryBuilder` @type ^`com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper` @kind object;
  #L15e504.  call `appendStatementString`(v0, v7, v8) @signature `Lcom/j256/ormlite/stmt/QueryBuilder$InternalQueryBuilderWrapper;.appendStatementString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L15e50a.  v0:= v5.`com.j256.ormlite.stmt.query.InSubQuery.subQueryBuilder` @type ^`com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper` @kind object;
  #L15e50e.  call temp:= `getResultFieldTypes`(v0) @signature `Lcom/j256/ormlite/stmt/QueryBuilder$InternalQueryBuilderWrapper;.getResultFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15e514.  v0:= temp @kind object;
  #L15e516.  if v0 != 0 then goto L15e526;
  #L15e51a.  v0:= ") " @kind object;
  #L15e51e.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e524.  return @kind void;
  #L15e526.  v1:= length @variable v0;
  #L15e528.  v2:= 1I;
  #L15e52a.  if v1 == v2 then goto L15e562;
  #L15e52e.  v1:= new `java.sql.SQLException`;
  #L15e532.  v2:= new `java.lang.StringBuilder`;
  #L15e536.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e53c.  v3:= "There must be only 1 result column in sub-query but we found " @kind object;
  #L15e540.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e546.  v2:= temp @kind object;
  #L15e548.  v0:= length @variable v0;
  #L15e54a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e550.  v0:= temp @kind object;
  #L15e552.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e558.  v0:= temp @kind object;
  #L15e55a.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e560.  throw v1;
  #L15e562.  v1:= v5.`com.j256.ormlite.stmt.query.InSubQuery.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15e566.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L15e56c.  v1:= temp @kind object;
  #L15e56e.  v2:= v0[v4] @kind object;
  #L15e572.  call temp:= `getSqlType`(v2) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L15e578.  v2:= temp @kind object;
  #L15e57a.  if v1 == v2 then goto L15e51a;
  #L15e57e.  v1:= new `java.sql.SQLException`;
  #L15e582.  v2:= new `java.lang.StringBuilder`;
  #L15e586.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e58c.  v3:= "Outer column " @kind object;
  #L15e590.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e596.  v2:= temp @kind object;
  #L15e598.  v3:= v5.`com.j256.ormlite.stmt.query.InSubQuery.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15e59c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e5a2.  v2:= temp @kind object;
  #L15e5a4.  v3:= " is not the same type as inner column " @kind object;
  #L15e5a8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e5ae.  v2:= temp @kind object;
  #L15e5b0.  v0:= v0[v4] @kind object;
  #L15e5b4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e5ba.  v0:= temp @kind object;
  #L15e5bc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e5c2.  v0:= temp @kind object;
  #L15e5c4.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e5ca.  throw v1;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.stmt.query.InSubQuery` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L15e5dc.  call temp:= `getColumnName`(v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.getColumnName:()Ljava/lang/String;` @kind super;
  #L15e5e2.  v0:= temp @kind object;
  #L15e5e4.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.query.InSubQuery` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L15e5f8.  call temp:= `toString`(v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.toString:()Ljava/lang/String;` @kind super;
  #L15e5fe.  v0:= temp @kind object;
  #L15e600.  return v0 @kind object;
}
