record `com.j256.ormlite.field.types.BigIntegerType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `int` `@@com.j256.ormlite.field.types.BigIntegerType.DEFAULT_WIDTH` @AccessFlag PUBLIC_STATIC;
global `com.j256.ormlite.field.types.BigIntegerType` `@@com.j256.ormlite.field.types.BigIntegerType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L151634.  v0:= 255I;
  #L151638.  `@@com.j256.ormlite.field.types.BigIntegerType.DEFAULT_WIDTH` @type ^`int` := v0;
  #L15163c.  v0:= new `com.j256.ormlite.field.types.BigIntegerType`;
  #L151640.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.<init>:()V` @kind direct;
  #L151646.  `@@com.j256.ormlite.field.types.BigIntegerType.singleTon` @type ^`com.j256.ormlite.field.types.BigIntegerType` := v0 @kind object;
  #L15164a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BigIntegerType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15165c.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L151660.  v1:= 1I;
  #L151662.  v1:= new `java.lang.Class`[v1];
  #L151666.  v2:= 0I;
  #L151668.  v3:= constclass @type ^`java.math.BigInteger` @kind object;
  #L15166c.  v1[v2]:= v3 @kind object;
  #L151670.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L151676.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BigIntegerType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L151688.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15168e.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BigIntegerType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.getSingleton:()Lcom/j256/ormlite/field/types/BigIntegerType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1516a0.  v0:= `@@com.j256.ormlite.field.types.BigIntegerType.singleTon` @type ^`com.j256.ormlite.field.types.BigIntegerType` @kind object;
  #L1516a4.  return v0 @kind object;
}
procedure `java.lang.Object` `convertIdNumber`(`com.j256.ormlite.field.types.BigIntegerType` v2 @kind this, `java.lang.Number` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.convertIdNumber:(Ljava/lang/Number;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1516b8.  call temp:= `longValue`(v3) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L1516be.  v0:= temp @kind wide;
  #L1516c0.  call temp:= `valueOf`(v0) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L1516c6.  v0:= temp @kind object;
  #L1516c8.  return v0 @kind object;
}
procedure `boolean` `isValidForVersion`(`com.j256.ormlite.field.types.BigIntegerType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.isValidForVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1516dc.  v0:= 1I;
  #L1516de.  return v0;
}
procedure `boolean` `isValidGeneratedType`(`com.j256.ormlite.field.types.BigIntegerType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.isValidGeneratedType:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1516f0.  v0:= 1I;
  #L1516f2.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.BigIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L151704.  v3:= (`java.math.BigInteger`) v3 @kind object;
  #L151708.  call temp:= `toString`(v3) @signature `Ljava/math/BigInteger;.toString:()Ljava/lang/String;` @kind virtual;
  #L15170e.  v0:= temp @kind object;
  #L151710.  return v0 @kind object;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.BigIntegerType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L151724.  if v2 != 0 then goto L15172e;
  #L151728.  v0:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L15172c.  return v0 @kind object;
  #L15172e.  v2:= (`java.math.BigInteger`) v2 @kind object;
  #L151732.  v0:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L151736.  call temp:= `add`(v2, v0) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L15173c.  v0:= temp @kind object;
  #L15173e.  goto L15172c;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.BigIntegerType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L151750.  v0:= new `java.math.BigInteger`;
  #L151754.  call `<init>`(v0, v5) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15175a.  call temp:= `toString`(v0) @signature `Ljava/math/BigInteger;.toString:()Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L151760.  v0:= temp @kind object;
  #L151762.  return v0 @kind object;
  #L151764.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L151766.  v1:= new `java.lang.StringBuilder`;
  #L15176a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L151770.  v2:= "Problems with field " @kind object;
  #L151774.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15177a.  v1:= temp @kind object;
  #L15177c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L151782.  v1:= temp @kind object;
  #L151784.  v2:= " parsing default BigInteger string '" @kind object;
  #L151788.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15178e.  v1:= temp @kind object;
  #L151790.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L151796.  v1:= temp @kind object;
  #L151798.  v2:= "'" @kind object;
  #L15179c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1517a2.  v1:= temp @kind object;
  #L1517a4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1517aa.  v1:= temp @kind object;
  #L1517ac.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1517b2.  v0:= temp @kind object;
  #L1517b4.  throw v0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L151764;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.BigIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1517d8.  call temp:= `getString`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getString:(I)Ljava/lang/String;` @kind interface;
  #L1517de.  v0:= temp @kind object;
  #L1517e0.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.BigIntegerType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L1517f4.  v2:= new `java.math.BigInteger`;
  #L1517f8.  v0:= v6 @kind object;
  #L1517fa.  v0:= (`java.lang.String`) v0 @kind object;
  #L1517fe.  v1:= v0 @kind object;
  #L151800.  call `<init>`(v2, v1) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;)V` @kind direct;
  #Try_end0.  
  #L151806.  return v2 @kind object;
  #L151808.  v1:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L15180a.  v2:= new `java.lang.StringBuilder`;
  #L15180e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L151814.  v3:= "Problems with column " @kind object;
  #L151818.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15181e.  v2:= temp @kind object;
  #L151820.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L151826.  v2:= temp @kind object;
  #L151828.  v3:= " parsing BigInteger string '" @kind object;
  #L15182c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L151832.  v2:= temp @kind object;
  #L151834.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15183a.  v2:= temp @kind object;
  #L15183c.  v3:= "'" @kind object;
  #L151840.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L151846.  v2:= temp @kind object;
  #L151848.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15184e.  v2:= temp @kind object;
  #L151850.  call temp:= `create`(v2, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L151856.  v1:= temp @kind object;
  #L151858.  throw v1;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L151808;
}
