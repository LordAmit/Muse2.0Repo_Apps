record `com.j256.ormlite.field.types.UuidType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `int` `@@com.j256.ormlite.field.types.UuidType.DEFAULT_WIDTH` @AccessFlag PUBLIC_STATIC;
global `com.j256.ormlite.field.types.UuidType` `@@com.j256.ormlite.field.types.UuidType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/UuidType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L153858.  v0:= 48I;
  #L15385c.  `@@com.j256.ormlite.field.types.UuidType.DEFAULT_WIDTH` @type ^`int` := v0;
  #L153860.  v0:= new `com.j256.ormlite.field.types.UuidType`;
  #L153864.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:()V` @kind direct;
  #L15386a.  `@@com.j256.ormlite.field.types.UuidType.singleTon` @type ^`com.j256.ormlite.field.types.UuidType` := v0 @kind object;
  #L15386e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.UuidType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L153880.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L153884.  v1:= 1I;
  #L153886.  v1:= new `java.lang.Class`[v1];
  #L15388a.  v2:= 0I;
  #L15388c.  v3:= constclass @type ^`java.util.UUID` @kind object;
  #L153890.  v1[v2]:= v3 @kind object;
  #L153894.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15389a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.UuidType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L1538ac.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L1538b2.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.UuidType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L1538c4.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L1538ca.  return @kind void;
}
procedure `com.j256.ormlite.field.types.UuidType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/UuidType;.getSingleton:()Lcom/j256/ormlite/field/types/UuidType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1538dc.  v0:= `@@com.j256.ormlite.field.types.UuidType.singleTon` @type ^`com.j256.ormlite.field.types.UuidType` @kind object;
  #L1538e0.  return v0 @kind object;
}
procedure `java.lang.Object` `generateId`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.generateId:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1538f4.  call temp:= `randomUUID`() @signature `Ljava/util/UUID;.randomUUID:()Ljava/util/UUID;` @kind static;
  #L1538fa.  v0:= temp @kind object;
  #L1538fc.  return v0 @kind object;
}
procedure `int` `getDefaultWidth`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.getDefaultWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L153910.  v0:= `@@com.j256.ormlite.field.types.UuidType.DEFAULT_WIDTH` @type ^`int`;
  #L153914.  return v0;
}
procedure `boolean` `isSelfGeneratedId`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.isSelfGeneratedId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L153928.  v0:= 1I;
  #L15392a.  return v0;
}
procedure `boolean` `isValidGeneratedType`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.isValidGeneratedType:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15393c.  v0:= 1I;
  #L15393e.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.UuidType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L153950.  v3:= (`java.util.UUID`) v3 @kind object;
  #L153954.  call temp:= `toString`(v3) @signature `Ljava/util/UUID;.toString:()Ljava/lang/String;` @kind virtual;
  #L15395a.  v0:= temp @kind object;
  #L15395c.  return v0 @kind object;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.UuidType` v0 @kind this, `com.j256.ormlite.field.FieldType` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L153970.  return v2 @kind object;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.UuidType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/UuidType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L153984.  call temp:= `getString`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getString:(I)Ljava/lang/String;` @kind interface;
  #L15398a.  v0:= temp @kind object;
  #L15398c.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.UuidType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.Object` v5 @kind object, `int` v6 ) @signature `Lcom/j256/ormlite/field/types/UuidType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1539a0.  v5:= (`java.lang.String`) v5 @kind object;
  #Try_start0.  
  #L1539a4.  call temp:= `fromString`(v5) @signature `Ljava/util/UUID;.fromString:(Ljava/lang/String;)Ljava/util/UUID;` @kind static;
  #Try_end0.  
  #L1539aa.  v0:= temp @kind object;
  #L1539ac.  return v0 @kind object;
  #L1539ae.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L1539b0.  v1:= new `java.lang.StringBuilder`;
  #L1539b4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1539ba.  v2:= "Problems with column " @kind object;
  #L1539be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1539c4.  v1:= temp @kind object;
  #L1539c6.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1539cc.  v1:= temp @kind object;
  #L1539ce.  v2:= " parsing UUID-string '" @kind object;
  #L1539d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1539d8.  v1:= temp @kind object;
  #L1539da.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1539e0.  v1:= temp @kind object;
  #L1539e2.  v2:= "'" @kind object;
  #L1539e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1539ec.  v1:= temp @kind object;
  #L1539ee.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1539f4.  v1:= temp @kind object;
  #L1539f6.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1539fc.  v0:= temp @kind object;
  #L1539fe.  throw v0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L1539ae;
}
