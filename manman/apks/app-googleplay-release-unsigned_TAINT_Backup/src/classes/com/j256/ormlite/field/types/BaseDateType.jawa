record `com.j256.ormlite.field.types.BaseDateType` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` `@@com.j256.ormlite.field.types.BaseDateType.defaultDateFormatConfig` @AccessFlag PROTECTED_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1510d0.  v0:= new `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig`;
  #L1510d4.  v1:= "yyyy-MM-dd HH:mm:ss.SSSSSS" @kind object;
  #L1510d8.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1510de.  `@@com.j256.ormlite.field.types.BaseDateType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` := v0 @kind object;
  #L1510e2.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BaseDateType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L1510f4.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L1510fa.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BaseDateType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15110c.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L151112.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` `convertDateStringConfig`(`com.j256.ormlite.field.FieldType` v1 @kind object, `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;

  #L151124.  if v1 != 0 then goto L15112a;
  #L151128.  return v2 @kind object;
  #L15112a.  call temp:= `getDataTypeConfigObj`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @kind virtual;
  #L151130.  v0:= temp @kind object;
  #L151132.  v0:= (`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig`) v0 @kind object;
  #L151136.  if v0 == 0 then goto L151128;
  #L15113a.  v2:= v0 @kind object;
  #L15113c.  goto L151128;
}
procedure `java.lang.String` `normalizeDateString`(`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.normalizeDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;

  #L151150.  call temp:= `getDateFormat`(v2) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.getDateFormat:()Ljava/text/DateFormat;` @kind virtual;
  #L151156.  v0:= temp @kind object;
  #L151158.  call temp:= `parse`(v0, v3) @signature `Ljava/text/DateFormat;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L15115e.  v1:= temp @kind object;
  #L151160.  call temp:= `format`(v0, v1) @signature `Ljava/text/DateFormat;.format:(Ljava/util/Date;)Ljava/lang/String;` @kind virtual;
  #L151166.  v0:= temp @kind object;
  #L151168.  return v0 @kind object;
}
procedure `java.util.Date` `parseDateString`(`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.parseDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;

  #L15117c.  call temp:= `getDateFormat`(v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.getDateFormat:()Ljava/text/DateFormat;` @kind virtual;
  #L151182.  v0:= temp @kind object;
  #L151184.  call temp:= `parse`(v0, v2) @signature `Ljava/text/DateFormat;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L15118a.  v0:= temp @kind object;
  #L15118c.  return v0 @kind object;
}
procedure `boolean` `isValidForField`(`com.j256.ormlite.field.types.BaseDateType` v2 @kind this, `java.lang.reflect.Field` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.isValidForField:(Ljava/lang/reflect/Field;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1511a0.  call temp:= `getType`(v3) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1511a6.  v0:= temp @kind object;
  #L1511a8.  v1:= constclass @type ^`java.util.Date` @kind object;
  #L1511ac.  if v0 != v1 then goto L1511b4;
  #L1511b0.  v0:= 1I;
  #L1511b2.  return v0;
  #L1511b4.  v0:= 0I;
  #L1511b6.  goto L1511b2;
}
procedure `boolean` `isValidForVersion`(`com.j256.ormlite.field.types.BaseDateType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.isValidForVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1511c8.  v0:= 1I;
  #L1511ca.  return v0;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.BaseDateType` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1511dc.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L1511e2.  v2:= temp @kind wide;
  #L1511e4.  if v7 != 0 then goto L1511f4;
  #L1511e8.  v0:= new `java.util.Date`;
  #L1511ec.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L1511f2.  return v0 @kind object;
  #L1511f4.  v7:= (`java.util.Date`) v7 @kind object;
  #L1511f8.  call temp:= `getTime`(v7) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L1511fe.  v0:= temp @kind wide;
  #L151200.  v0:= lcmp(v2, v0);
  #L151204.  if v0 != 0 then goto L15121a;
  #L151208.  v0:= new `java.util.Date`;
  #L15120c.  v4:= 1L;
  #L151210.  v2:= v2 + v4 @kind long;
  #L151212.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L151218.  goto L1511f2;
  #L15121a.  v0:= new `java.util.Date`;
  #L15121e.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L151224.  goto L1511f2;
}
