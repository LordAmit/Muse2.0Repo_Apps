record `com.a.a.b.a` @kind class @AccessFlag PUBLIC {
}
global `boolean` `@@com.a.a.b.a.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `byte`[] `@@com.a.a.b.a.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@com.a.a.b.a.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@com.a.a.b.a.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@com.a.a.b.a.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/a/a/b/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L11e2c4.  v2:= 128I;
  #L11e2c8.  v1:= 64I;
  #L11e2cc.  v0:= constclass @type ^`com.a.a.b.a` @kind object;
  #L11e2d0.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L11e2d6.  v0:= temp;
  #L11e2d8.  if v0 != 0 then goto L11e31c;
  #L11e2dc.  v0:= 1I;
  #L11e2de.  `@@com.a.a.b.a.a` @type ^`boolean` := v0 @kind boolean;
  #L11e2e2.  v0:= new `byte`[v1];
  #L11e2e6.  goto L11e320;
  #L11e2ec.  `@@com.a.a.b.a.b` @type ^`byte`[] := v0 @kind object;
  #L11e2f0.  v0:= new `byte`[v1];
  #L11e2f4.  goto L11e368;
  #L11e2fa.  `@@com.a.a.b.a.c` @type ^`byte`[] := v0 @kind object;
  #L11e2fe.  v0:= new `byte`[v2];
  #L11e302.  goto L11e3b0;
  #L11e308.  `@@com.a.a.b.a.d` @type ^`byte`[] := v0 @kind object;
  #L11e30c.  v0:= new `byte`[v2];
  #L11e310.  goto L11e438;
  #L11e316.  `@@com.a.a.b.a.e` @type ^`byte`[] := v0 @kind object;
  #L11e31a.  return @kind void;
  #L11e31c.  v0:= 0I;
  #L11e31e.  goto L11e2de;
  #L11e320.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 43I, 47I) @kind object;
  #L11e367.  goto L11e2ec;
  #L11e368.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 45I, 95I) @kind object;
  #L11e3af.  goto L11e2fa;
  #L11e3b0.  v0:= (-9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -5I, -5I, -9I, -9I, -5I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -5I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, 62I, -9I, -9I, -9I, 63I, 52I, 53I, 54I, 55I, 56I, 57I, 58I, 59I, 60I, 61I, -9I, -9I, -9I, -1I, -9I, -9I, -9I, 0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I, 10I, 11I, 12I, 13I, 14I, 15I, 16I, 17I, 18I, 19I, 20I, 21I, 22I, 23I, 24I, 25I, -9I, -9I, -9I, -9I, -9I, -9I, 26I, 27I, 28I, 29I, 30I, 31I, 32I, 33I, 34I, 35I, 36I, 37I, 38I, 39I, 40I, 41I, 42I, 43I, 44I, 45I, 46I, 47I, 48I, 49I, 50I, 51I, -9I, -9I, -9I, -9I, -9I) @kind object;
  #L11e437.  goto L11e308;
  #L11e438.  v0:= (-9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -5I, -5I, -9I, -9I, -5I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -5I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, -9I, 62I, -9I, -9I, 52I, 53I, 54I, 55I, 56I, 57I, 58I, 59I, 60I, 61I, -9I, -9I, -9I, -1I, -9I, -9I, -9I, 0I, 1I, 2I, 3I, 4I, 5I, 6I, 7I, 8I, 9I, 10I, 11I, 12I, 13I, 14I, 15I, 16I, 17I, 18I, 19I, 20I, 21I, 22I, 23I, 24I, 25I, -9I, -9I, -9I, -9I, 63I, -9I, 26I, 27I, 28I, 29I, 30I, 31I, 32I, 33I, 34I, 35I, 36I, 37I, 38I, 39I, 40I, 41I, 42I, 43I, 44I, 45I, 46I, 47I, 48I, 49I, 50I, 51I, -9I, -9I, -9I, -9I, -9I) @kind object;
  #L11e4bf.  goto L11e316;
}
procedure `void` `<init>`(`com.a.a.b.a` v0 @kind this) @signature `Lcom/a/a/b/a;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L11e4d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11e4d6.  return @kind void;
}
procedure `int` `a`(`byte`[] v3 @kind object, `int` v4 , `byte`[] v5 @kind object, `int` v6 , `byte`[] v7 @kind object) @signature `Lcom/a/a/b/a;.a:([BI[BI[B)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L11e4e8.  v1:= 61I;
  #L11e4ec.  v0:= v4 + 2;
  #L11e4f0.  v0:= v3[v0] @kind byte;
  #L11e4f4.  if v0 != v1 then goto L11e52c;
  #L11e4f8.  v0:= v3[v4] @kind byte;
  #L11e4fc.  v0:= v7[v0] @kind byte;
  #L11e500.  v0:= v0 ^< 24;
  #L11e504.  v0:= v0 ^>> 6;
  #L11e508.  v1:= v4 + 1;
  #L11e50c.  v1:= v3[v1] @kind byte;
  #L11e510.  v1:= v7[v1] @kind byte;
  #L11e514.  v1:= v1 ^< 24;
  #L11e518.  v1:= v1 ^>> 12;
  #L11e51c.  v0:= v0 ^| v1 @kind int;
  #L11e51e.  v0:= v0 ^>> 16;
  #L11e522.  v0:= (`byte`) v0 @kind i2b;
  #L11e524.  v5[v6]:= v0 @kind byte;
  #L11e528.  v0:= 1I;
  #L11e52a.  return v0;
  #L11e52c.  v0:= v4 + 3;
  #L11e530.  v0:= v3[v0] @kind byte;
  #L11e534.  if v0 != v1 then goto L11e590;
  #L11e538.  v0:= v3[v4] @kind byte;
  #L11e53c.  v0:= v7[v0] @kind byte;
  #L11e540.  v0:= v0 ^< 24;
  #L11e544.  v0:= v0 ^>> 6;
  #L11e548.  v1:= v4 + 1;
  #L11e54c.  v1:= v3[v1] @kind byte;
  #L11e550.  v1:= v7[v1] @kind byte;
  #L11e554.  v1:= v1 ^< 24;
  #L11e558.  v1:= v1 ^>> 12;
  #L11e55c.  v0:= v0 ^| v1 @kind int;
  #L11e55e.  v1:= v4 + 2;
  #L11e562.  v1:= v3[v1] @kind byte;
  #L11e566.  v1:= v7[v1] @kind byte;
  #L11e56a.  v1:= v1 ^< 24;
  #L11e56e.  v1:= v1 ^>> 18;
  #L11e572.  v0:= v0 ^| v1 @kind int;
  #L11e574.  v1:= v0 ^>> 16;
  #L11e578.  v1:= (`byte`) v1 @kind i2b;
  #L11e57a.  v5[v6]:= v1 @kind byte;
  #L11e57e.  v1:= v6 + 1;
  #L11e582.  v0:= v0 ^>> 8;
  #L11e586.  v0:= (`byte`) v0 @kind i2b;
  #L11e588.  v5[v1]:= v0 @kind byte;
  #L11e58c.  v0:= 2I;
  #L11e58e.  goto L11e52a;
  #L11e590.  v0:= v3[v4] @kind byte;
  #L11e594.  v0:= v7[v0] @kind byte;
  #L11e598.  v0:= v0 ^< 24;
  #L11e59c.  v0:= v0 ^>> 6;
  #L11e5a0.  v1:= v4 + 1;
  #L11e5a4.  v1:= v3[v1] @kind byte;
  #L11e5a8.  v1:= v7[v1] @kind byte;
  #L11e5ac.  v1:= v1 ^< 24;
  #L11e5b0.  v1:= v1 ^>> 12;
  #L11e5b4.  v0:= v0 ^| v1 @kind int;
  #L11e5b6.  v1:= v4 + 2;
  #L11e5ba.  v1:= v3[v1] @kind byte;
  #L11e5be.  v1:= v7[v1] @kind byte;
  #L11e5c2.  v1:= v1 ^< 24;
  #L11e5c6.  v1:= v1 ^>> 18;
  #L11e5ca.  v0:= v0 ^| v1 @kind int;
  #L11e5cc.  v1:= v4 + 3;
  #L11e5d0.  v1:= v3[v1] @kind byte;
  #L11e5d4.  v1:= v7[v1] @kind byte;
  #L11e5d8.  v1:= v1 ^< 24;
  #L11e5dc.  v1:= v1 ^>> 24;
  #L11e5e0.  v0:= v0 ^| v1 @kind int;
  #L11e5e2.  v1:= v0 ^> 16;
  #L11e5e6.  v1:= (`byte`) v1 @kind i2b;
  #L11e5e8.  v5[v6]:= v1 @kind byte;
  #L11e5ec.  v1:= v6 + 1;
  #L11e5f0.  v2:= v0 ^> 8;
  #L11e5f4.  v2:= (`byte`) v2 @kind i2b;
  #L11e5f6.  v5[v1]:= v2 @kind byte;
  #L11e5fa.  v1:= v6 + 2;
  #L11e5fe.  v0:= (`byte`) v0 @kind i2b;
  #L11e600.  v5[v1]:= v0 @kind byte;
  #L11e604.  v0:= 3I;
  #L11e606.  goto L11e52a;
}
procedure `byte`[] `a`(`java.lang.String` v3 @kind object) @signature `Lcom/a/a/b/a;.a:(Ljava/lang/String;)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L11e618.  call temp:= `getBytes`(v3) @signature `Ljava/lang/String;.getBytes:()[B` @kind virtual;
  #L11e61e.  v0:= temp @kind object;
  #L11e620.  v1:= 0I;
  #L11e622.  v2:= length @variable v0;
  #L11e624.  call temp:= `a`(v0, v1, v2) @signature `Lcom/a/a/b/a;.a:([BII)[B` @kind static;
  #L11e62a.  v0:= temp @kind object;
  #L11e62c.  return v0 @kind object;
}
procedure `byte`[] `a`(`byte`[] v1 @kind object, `int` v2 , `int` v3 ) @signature `Lcom/a/a/b/a;.a:([BII)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L11e640.  v0:= `@@com.a.a.b.a.d` @type ^`byte`[] @kind object;
  #L11e644.  call temp:= `a`(v1, v2, v3, v0) @signature `Lcom/a/a/b/a;.a:([BII[B)[B` @kind static;
  #L11e64a.  v0:= temp @kind object;
  #L11e64c.  return v0 @kind object;
}
procedure `byte`[] `a`(`byte`[] v12 @kind object, `int` v13 , `int` v14 , `byte`[] v15 @kind object) @signature `Lcom/a/a/b/a;.a:([BII[B)[B` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L11e660.  v11:= 61I;
  #L11e664.  v10:= 4I;
  #L11e666.  v9:= 1I;
  #L11e668.  v1:= 0I;
  #L11e66a.  v0:= v14 * 3;
  #L11e66e.  v0:= v0 / 4;
  #L11e672.  v0:= v0 + 2;
  #L11e676.  v5:= new `byte`[v0];
  #L11e67a.  v6:= new `byte`[v10];
  #L11e67e.  v4:= v1;
  #L11e680.  v2:= v1;
  #L11e682.  v3:= v1;
  #L11e684.  if v4 >= v14 then goto L11e7da;
  #L11e688.  v0:= v4 + v13 @kind int;
  #L11e68c.  v0:= v12[v0] @kind byte;
  #L11e690.  v0:= v0 ^& 127;
  #L11e694.  v7:= (`byte`) v0 @kind i2b;
  #L11e696.  v0:= v15[v7] @kind byte;
  #L11e69a.  v8:= -5I;
  #L11e69c.  if v0 < v8 then goto L11e780;
  #L11e6a0.  v8:= -1I;
  #L11e6a2.  if v0 < v8 then goto L11e83a;
  #L11e6a6.  if v7 != v11 then goto L11e75a;
  #L11e6aa.  v0:= v14 - v4 @kind int;
  #L11e6ae.  v7:= v14 + -1;
  #L11e6b2.  v7:= v7 + v13 @kind int;
  #L11e6b4.  v7:= v12[v7] @kind byte;
  #L11e6b8.  v7:= v7 ^& 127;
  #L11e6bc.  v7:= (`byte`) v7 @kind i2b;
  #L11e6be.  if v2 == 0 then goto L11e6c6;
  #L11e6c2.  if v2 != v9 then goto L11e6f8;
  #L11e6c6.  v0:= new `com.a.a.b.b`;
  #L11e6ca.  v1:= new `java.lang.StringBuilder`;
  #L11e6ce.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11e6d4.  v2:= "invalid padding byte '=' at byte offset " @kind object;
  #L11e6d8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e6de.  v1:= temp @kind object;
  #L11e6e0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e6e6.  v1:= temp @kind object;
  #L11e6e8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11e6ee.  v1:= temp @kind object;
  #L11e6f0.  call `<init>`(v0, v1) @signature `Lcom/a/a/b/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11e6f6.  throw v0;
  #L11e6f8.  v8:= 3I;
  #L11e6fa.  if v2 != v8 then goto L11e704;
  #L11e6fe.  v8:= 2I;
  #L11e700.  if v0 > v8 then goto L11e70c;
  #L11e704.  if v2 != v10 then goto L11e73e;
  #L11e708.  if v0 <= v9 then goto L11e73e;
  #L11e70c.  v0:= new `com.a.a.b.b`;
  #L11e710.  v1:= new `java.lang.StringBuilder`;
  #L11e714.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11e71a.  v2:= "padding byte '=' falsely signals end of encoded value at offset " @kind object;
  #L11e71e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e724.  v1:= temp @kind object;
  #L11e726.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e72c.  v1:= temp @kind object;
  #L11e72e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11e734.  v1:= temp @kind object;
  #L11e736.  call `<init>`(v0, v1) @signature `Lcom/a/a/b/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11e73c.  throw v0;
  #L11e73e.  if v7 == v11 then goto L11e7da;
  #L11e742.  v0:= 10I;
  #L11e746.  if v7 == v0 then goto L11e7da;
  #L11e74a.  v0:= new `com.a.a.b.b`;
  #L11e74e.  v1:= "encoded value has invalid trailing byte" @kind object;
  #L11e752.  call `<init>`(v0, v1) @signature `Lcom/a/a/b/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11e758.  throw v0;
  #L11e75a.  v0:= v2 + 1;
  #L11e75e.  v6[v2]:= v7 @kind byte;
  #L11e762.  if v0 != v10 then goto L11e836;
  #L11e766.  call temp:= `a`(v6, v1, v5, v3, v15) @signature `Lcom/a/a/b/a;.a:([BI[BI[B)I` @kind static;
  #L11e76c.  v0:= temp;
  #L11e76e.  v0:= v0 + v3 @kind int;
  #L11e770.  v2:= v0;
  #L11e772.  v0:= v1;
  #L11e774.  v3:= v4 + 1;
  #L11e778.  v4:= v3;
  #L11e77a.  v3:= v2;
  #L11e77c.  v2:= v0;
  #L11e77e.  goto L11e684;
  #L11e780.  v0:= new `com.a.a.b.b`;
  #L11e784.  v1:= new `java.lang.StringBuilder`;
  #L11e788.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11e78e.  v2:= "Bad Base64 input character at " @kind object;
  #L11e792.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e798.  v1:= temp @kind object;
  #L11e79a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e7a0.  v1:= temp @kind object;
  #L11e7a2.  v2:= ": " @kind object;
  #L11e7a6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e7ac.  v1:= temp @kind object;
  #L11e7ae.  v2:= v4 + v13 @kind int;
  #L11e7b2.  v2:= v12[v2] @kind byte;
  #L11e7b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e7bc.  v1:= temp @kind object;
  #L11e7be.  v2:= "(decimal)" @kind object;
  #L11e7c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e7c8.  v1:= temp @kind object;
  #L11e7ca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11e7d0.  v1:= temp @kind object;
  #L11e7d2.  call `<init>`(v0, v1) @signature `Lcom/a/a/b/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11e7d8.  throw v0;
  #L11e7da.  if v2 == 0 then goto L11e82a;
  #L11e7de.  if v2 != v9 then goto L11e818;
  #L11e7e2.  v0:= new `com.a.a.b.b`;
  #L11e7e6.  v1:= new `java.lang.StringBuilder`;
  #L11e7ea.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11e7f0.  v2:= "single trailing character at offset " @kind object;
  #L11e7f4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e7fa.  v1:= temp @kind object;
  #L11e7fc.  v2:= v14 + -1;
  #L11e800.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e806.  v1:= temp @kind object;
  #L11e808.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11e80e.  v1:= temp @kind object;
  #L11e810.  call `<init>`(v0, v1) @signature `Lcom/a/a/b/b;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11e816.  throw v0;
  #L11e818.  v0:= v2 + 1;
  #L11e81c.  v6[v2]:= v11 @kind byte;
  #L11e820.  call temp:= `a`(v6, v1, v5, v3, v15) @signature `Lcom/a/a/b/a;.a:([BI[BI[B)I` @kind static;
  #L11e826.  v0:= temp;
  #L11e828.  v3:= v3 + v0 @kind int;
  #L11e82a.  v0:= new `byte`[v3];
  #L11e82e.  call `arraycopy`(v5, v1, v0, v1, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11e834.  return v0 @kind object;
  #L11e836.  v2:= v3;
  #L11e838.  goto L11e774;
  #L11e83a.  v0:= v2;
  #L11e83c.  v2:= v3;
  #L11e83e.  goto L11e774;
}
