record `a.a.h.e$a` @kind class @AccessFlag FINAL extends `a.a.h.e` @kind class {
  `javax.net.ssl.X509TrustManager` `a.a.h.e$a.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.h.e$a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.h.e$a` v0 @kind this, `javax.net.ssl.X509TrustManager` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `La/a/h/e$a;.<init>:(Ljavax/net/ssl/X509TrustManager;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L083f6c.  call `<init>`(v0) @signature `La/a/h/e;.<init>:()V` @kind direct;
  #L083f72.  v0.`a.a.h.e$a.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L083f76.  v0.`a.a.h.e$a.a` @type ^`javax.net.ssl.X509TrustManager` := v1 @kind object;
  #L083f7a.  return @kind void;
}
procedure `java.security.cert.X509Certificate` `a`(`a.a.h.e$a` v5 @kind this, `java.security.cert.X509Certificate` v6 @kind object) @signature `La/a/h/e$a;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L083f8c.  v1:= 0I;
  #Try_start0.  
  #L083f8e.  v0:= v5.`a.a.h.e$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L083f92.  v2:= v5.`a.a.h.e$a.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L083f96.  v3:= 1I;
  #L083f98.  v3:= new `java.lang.Object`[v3];
  #L083f9c.  v4:= 0I;
  #L083f9e.  v3[v4]:= v6 @kind object;
  #L083fa2.  call temp:= `invoke`(v0, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L083fa8.  v0:= temp @kind object;
  #L083faa.  v0:= (`java.security.cert.TrustAnchor`) v0 @kind object;
  #L083fae.  if v0 == 0 then goto L083fbc;
  #L083fb2.  call temp:= `getTrustedCert`(v0) @signature `Ljava/security/cert/TrustAnchor;.getTrustedCert:()Ljava/security/cert/X509Certificate;` @kind virtual;
  #Try_end0.  
  #L083fb8.  v0:= temp @kind object;
  #L083fba.  return v0 @kind object;
  #L083fbc.  v0:= v1 @kind object;
  #L083fbe.  goto L083fba;
  #L083fc0.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L083fc2.  v0:= new `java.lang.AssertionError`;
  #L083fc6.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L083fcc.  throw v0;
  #L083fce.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L083fd0.  v0:= v1 @kind object;
  #L083fd2.  goto L083fba;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L083fc0;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L083fce;
}
procedure `boolean` `equals`(`a.a.h.e$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `La/a/h/e$a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L083ff4.  v0:= 1I;
  #L083ff6.  v1:= 0I;
  #L083ff8.  if v5 != v4 then goto L083ffe;
  #L083ffc.  return v0;
  #L083ffe.  v2:= instanceof @variable v5 @type ^`a.a.h.e$a` @kind boolean;
  #L084002.  if v2 != 0 then goto L08400a;
  #L084006.  v0:= v1;
  #L084008.  goto L083ffc;
  #L08400a.  v5:= (`a.a.h.e$a`) v5 @kind object;
  #L08400e.  v2:= v4.`a.a.h.e$a.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L084012.  v3:= v5.`a.a.h.e$a.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L084016.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08401c.  v2:= temp;
  #L08401e.  if v2 == 0 then goto L084036;
  #L084022.  v2:= v4.`a.a.h.e$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L084026.  v3:= v5.`a.a.h.e$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L08402a.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/reflect/Method;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L084030.  v2:= temp;
  #L084032.  if v2 != 0 then goto L083ffc;
  #L084036.  v0:= v1;
  #L084038.  goto L083ffc;
}
procedure `int` `hashCode`(`a.a.h.e$a` v2 @kind this) @signature `La/a/h/e$a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08404c.  v0:= v2.`a.a.h.e$a.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L084050.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L084056.  v0:= temp;
  #L084058.  v1:= v2.`a.a.h.e$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L08405c.  call temp:= `hashCode`(v1) @signature `Ljava/lang/reflect/Method;.hashCode:()I` @kind virtual;
  #L084062.  v1:= temp;
  #L084064.  v1:= v1 * 31;
  #L084068.  v0:= v0 + v1 @kind int;
  #L08406a.  return v0;
}
