record `a.a.e.i$b` @kind class @AccessFlag FINAL extends `b.r` @kind interface {
  `boolean` `a.a.e.i$b.a` @AccessFlag ;
  `boolean` `a.a.e.i$b.b` @AccessFlag ;
  `a.a.e.i` `a.a.e.i$b.d` @AccessFlag FINAL_SYNTHETIC;
  `b.c` `a.a.e.i$b.e` @AccessFlag PRIVATE_FINAL;
  `b.c` `a.a.e.i$b.f` @AccessFlag PRIVATE_FINAL;
  `long` `a.a.e.i$b.g` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.a.e.i$b.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/e/i$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L07f114.  v0:= constclass @type ^`a.a.e.i` @kind object;
  #L07f118.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L07f11e.  v0:= temp;
  #L07f120.  if v0 != 0 then goto L07f12c;
  #L07f124.  v0:= 1I;
  #L07f126.  `@@a.a.e.i$b.c` @type ^`boolean` := v0 @kind boolean;
  #L07f12a.  return @kind void;
  #L07f12c.  v0:= 0I;
  #L07f12e.  goto L07f126;
}
procedure `void` `<init>`(`a.a.e.i$b` v2 @kind this, `a.a.e.i` v3 @kind object, `long` v4 ) @signature `La/a/e/i$b;.<init>:(La/a/e/i;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07f140.  v2.`a.a.e.i$b.d` @type ^`a.a.e.i` := v3 @kind object;
  #L07f144.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07f14a.  v0:= new `b.c`;
  #L07f14e.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L07f154.  v2.`a.a.e.i$b.e` @type ^`b.c` := v0 @kind object;
  #L07f158.  v0:= new `b.c`;
  #L07f15c.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L07f162.  v2.`a.a.e.i$b.f` @type ^`b.c` := v0 @kind object;
  #L07f166.  v2.`a.a.e.i$b.g` @type ^`long` := v4 @kind wide;
  #L07f16a.  return @kind void;
}
procedure `void` `b`(`a.a.e.i$b` v4 @kind this) @signature `La/a/e/i$b;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07f17c.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f180.  v0:= v0.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L07f184.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_start0.  
  #L07f18a.  v0:= v4.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07f18e.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07f194.  v0:= temp @kind wide;
  #L07f196.  v2:= 0L;
  #L07f19a.  v0:= lcmp(v0, v2);
  #L07f19e.  if v0 != 0 then goto L07f1dc;
  #L07f1a2.  v0:= v4.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L07f1a6.  if v0 != 0 then goto L07f1dc;
  #L07f1aa.  v0:= v4.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L07f1ae.  if v0 != 0 then goto L07f1dc;
  #L07f1b2.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f1b6.  v0:= v0.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L07f1ba.  if v0 != 0 then goto L07f1dc;
  #L07f1be.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f1c2.  call `l`(v0) @signature `La/a/e/i;.l:()V` @kind virtual;
  #Try_end0.  
  #L07f1c8.  goto L07f18a;
  #L07f1ca.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07f1cc.  v1:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f1d0.  v1:= v1.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L07f1d4.  call `b`(v1) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L07f1da.  throw v0;
  #L07f1dc.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f1e0.  v0:= v0.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L07f1e4.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L07f1ea.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07f1ca;
}
procedure `void` `c`(`a.a.e.i$b` v2 @kind this) @signature `La/a/e/i$b;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07f208.  v0:= v2.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L07f20c.  if v0 == 0 then goto L07f220;
  #L07f210.  v0:= new `java.io.IOException`;
  #L07f214.  v1:= "stream closed" @kind object;
  #L07f218.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07f21e.  throw v0;
  #L07f220.  v0:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f224.  v0:= v0.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L07f228.  if v0 == 0 then goto L07f240;
  #L07f22c.  v0:= new `a.a.e.o`;
  #L07f230.  v1:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f234.  v1:= v1.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L07f238.  call `<init>`(v0, v1) @signature `La/a/e/o;.<init>:(La/a/e/b;)V` @kind direct;
  #L07f23e.  throw v0;
  #L07f240.  return @kind void;
}
procedure `long` `a`(`a.a.e.i$b` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `La/a/e/i$b;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L07f254.  v4:= 0L;
  #L07f258.  v0:= lcmp(v10, v4);
  #L07f25c.  if v0 >= 0 then goto L07f292;
  #L07f260.  v0:= new `java.lang.IllegalArgumentException`;
  #L07f264.  v1:= new `java.lang.StringBuilder`;
  #L07f268.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07f26e.  v2:= "byteCount < 0: " @kind object;
  #L07f272.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07f278.  v1:= temp @kind object;
  #L07f27a.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07f280.  v1:= temp @kind object;
  #L07f282.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07f288.  v1:= temp @kind object;
  #L07f28a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07f290.  throw v0;
  #L07f292.  v2:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f296.  @monitorenter v2
  #Try_start0.  
  #L07f298.  call `b`(v8) @signature `La/a/e/i$b;.b:()V` @kind direct;
  #L07f29e.  call `c`(v8) @signature `La/a/e/i$b;.c:()V` @kind direct;
  #L07f2a4.  v0:= v8.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07f2a8.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07f2ae.  v0:= temp @kind wide;
  #L07f2b0.  v0:= lcmp(v0, v4);
  #L07f2b4.  if v0 != 0 then goto L07f2c0;
  #L07f2b8.  v0:= -1L;
  #L07f2bc.  @monitorexit v2
  #L07f2be.  return v0 @kind wide;
  #L07f2c0.  v0:= v8.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07f2c4.  v1:= v8.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07f2c8.  call temp:= `b`(v1) @signature `Lb/c;.b:()J` @kind virtual;
  #L07f2ce.  v4:= temp @kind wide;
  #L07f2d0.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L07f2d6.  v4:= temp @kind wide;
  #L07f2d8.  call temp:= `a`(v0, v9, v4) @signature `Lb/c;.a:(Lb/c;J)J` @kind virtual;
  #L07f2de.  v0:= temp @kind wide;
  #L07f2e0.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f2e4.  v4:= v3.`a.a.e.i.a` @type ^`long` @kind wide;
  #L07f2e8.  v4:= v4 + v0 @kind long;
  #L07f2ea.  v3.`a.a.e.i.a` @type ^`long` := v4 @kind wide;
  #L07f2ee.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f2f2.  v4:= v3.`a.a.e.i.a` @type ^`long` @kind wide;
  #L07f2f6.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f2fa.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f2fe.  v3:= v3.`a.a.e.g.l` @type ^`a.a.e.n` @kind object;
  #L07f302.  call temp:= `d`(v3) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L07f308.  v3:= temp;
  #L07f30a.  v3:= v3 / 2;
  #L07f30e.  v6:= (`long`) v3 @kind i2l;
  #L07f310.  v3:= lcmp(v4, v6);
  #L07f314.  if v3 < 0 then goto L07f342;
  #L07f318.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f31c.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f320.  v4:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f324.  v4:= v4.`a.a.e.i.c` @type ^`int`;
  #L07f328.  v5:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f32c.  v6:= v5.`a.a.e.i.a` @type ^`long` @kind wide;
  #L07f330.  call `a`(v3, v4, v6) @signature `La/a/e/g;.a:(IJ)V` @kind virtual;
  #L07f336.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f33a.  v4:= 0L;
  #L07f33e.  v3.`a.a.e.i.a` @type ^`long` := v4 @kind wide;
  #L07f342.  @monitorexit v2
  #Try_end0.  
  #L07f344.  v2:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f348.  v2:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f34c.  @monitorenter v2
  #Try_start1.  
  #L07f34e.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f352.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f356.  v4:= v3.`a.a.e.g.j` @type ^`long` @kind wide;
  #L07f35a.  v4:= v4 + v0 @kind long;
  #L07f35c.  v3.`a.a.e.g.j` @type ^`long` := v4 @kind wide;
  #L07f360.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f364.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f368.  v4:= v3.`a.a.e.g.j` @type ^`long` @kind wide;
  #L07f36c.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f370.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f374.  v3:= v3.`a.a.e.g.l` @type ^`a.a.e.n` @kind object;
  #L07f378.  call temp:= `d`(v3) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L07f37e.  v3:= temp;
  #L07f380.  v3:= v3 / 2;
  #L07f384.  v6:= (`long`) v3 @kind i2l;
  #L07f386.  v3:= lcmp(v4, v6);
  #L07f38a.  if v3 < 0 then goto L07f3ba;
  #L07f38e.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f392.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f396.  v4:= 0I;
  #L07f398.  v5:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f39c.  v5:= v5.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f3a0.  v6:= v5.`a.a.e.g.j` @type ^`long` @kind wide;
  #L07f3a4.  call `a`(v3, v4, v6) @signature `La/a/e/g;.a:(IJ)V` @kind virtual;
  #L07f3aa.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f3ae.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f3b2.  v4:= 0L;
  #L07f3b6.  v3.`a.a.e.g.j` @type ^`long` := v4 @kind wide;
  #L07f3ba.  @monitorexit v2
  #L07f3bc.  goto L07f2be;
  #L07f3be.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07f3c0.  @monitorexit v2
  #Try_end1.  
  #L07f3c2.  throw v0;
  #L07f3c4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start2.  
  #L07f3c6.  @monitorexit v2
  #Try_end2.  
  #L07f3c8.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07f3c4;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07f3be;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L07f3c4;
}
procedure `b.s` `a`(`a.a.e.i$b` v1 @kind this) @signature `La/a/e/i$b;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f3fc.  v0:= v1.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f400.  v0:= v0.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L07f404.  return v0 @kind object;
}
procedure `void` `a`(`a.a.e.i$b` v12 @kind this, `b.e` v13 @kind object, `long` v14 ) @signature `La/a/e/i$b;.a:(Lb/e;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L07f418.  v10:= 0L;
  #L07f41c.  v1:= 1I;
  #L07f41e.  v2:= 0I;
  #L07f420.  v0:= `@@a.a.e.i$b.c` @type ^`boolean` @kind boolean;
  #L07f424.  if v0 != 0 then goto L07f480;
  #L07f428.  v0:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f42c.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07f432.  v0:= temp;
  #L07f434.  if v0 == 0 then goto L07f480;
  #L07f438.  v0:= new `java.lang.AssertionError`;
  #L07f43c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07f442.  throw v0;
  #L07f444.  v14:= v14 - v4 @kind long;
  #L07f446.  v3:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f44a.  @monitorenter v3
  #Try_start0.  
  #L07f44c.  v0:= v12.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07f450.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07f456.  v4:= temp @kind wide;
  #L07f458.  v0:= lcmp(v4, v10);
  #L07f45c.  if v0 != 0 then goto L07f504;
  #L07f460.  v0:= v1;
  #L07f462.  v4:= v12.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07f466.  v5:= v12.`a.a.e.i$b.e` @type ^`b.c` @kind object;
  #L07f46a.  call temp:= `a`(v4, v5) @signature `Lb/c;.a:(Lb/r;)J` @kind virtual;
  #L07f470.  if v0 == 0 then goto L07f47e;
  #L07f474.  v0:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f478.  call `notifyAll`(v0) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L07f47e.  @monitorexit v3
  #Try_end0.  
  #L07f480.  v0:= lcmp(v14, v10);
  #L07f484.  if v0 <= 0 then goto L07f4c8;
  #L07f488.  v3:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f48c.  @monitorenter v3
  #Try_start1.  
  #L07f48e.  v4:= v12.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L07f492.  v0:= v12.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07f496.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07f49c.  v6:= temp @kind wide;
  #L07f49e.  v6:= v6 + v14 @kind long;
  #L07f4a0.  v8:= v12.`a.a.e.i$b.g` @type ^`long` @kind wide;
  #L07f4a4.  v0:= lcmp(v6, v8);
  #L07f4a8.  if v0 <= 0 then goto L07f4ca;
  #L07f4ac.  v0:= v1;
  #L07f4ae.  @monitorexit v3
  #Try_end1.  
  #L07f4b0.  if v0 == 0 then goto L07f4d4;
  #L07f4b4.  call `g`(v13, v14) @signature `Lb/e;.g:(J)V` @kind interface;
  #L07f4ba.  v0:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f4be.  v1:= `@@a.a.e.b.d` @type ^`a.a.e.b` @kind object;
  #L07f4c2.  call `b`(v0, v1) @signature `La/a/e/i;.b:(La/a/e/b;)V` @kind virtual;
  #L07f4c8.  return @kind void;
  #L07f4ca.  v0:= v2;
  #L07f4cc.  goto L07f4ae;
  #L07f4ce.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start2.  
  #L07f4d0.  @monitorexit v3
  #Try_end2.  
  #L07f4d2.  throw v0;
  #L07f4d4.  if v4 == 0 then goto L07f4e0;
  #L07f4d8.  call `g`(v13, v14) @signature `Lb/e;.g:(J)V` @kind interface;
  #L07f4de.  goto L07f4c8;
  #L07f4e0.  v0:= v12.`a.a.e.i$b.e` @type ^`b.c` @kind object;
  #L07f4e4.  call temp:= `a`(v13, v0, v14) @signature `Lb/e;.a:(Lb/c;J)J` @kind interface;
  #L07f4ea.  v4:= temp @kind wide;
  #L07f4ec.  v6:= -1L;
  #L07f4f0.  v0:= lcmp(v4, v6);
  #L07f4f4.  if v0 != 0 then goto L07f444;
  #L07f4f8.  v0:= new `java.io.EOFException`;
  #L07f4fc.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L07f502.  throw v0;
  #L07f504.  v0:= v2;
  #L07f506.  goto L07f462;
  #L07f508.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L07f50a.  @monitorexit v3
  #Try_end3.  
  #L07f50c.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07f508;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07f4ce;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L07f4ce;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L07f508;
}
procedure `void` `close`(`a.a.e.i$b` v2 @kind this) @signature `La/a/e/i$b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07f548.  v1:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f54c.  @monitorenter v1
  #L07f54e.  v0:= 1I;
  #Try_start0.  
  #L07f550.  v2.`a.a.e.i$b.a` @type ^`boolean` := v0 @kind boolean;
  #L07f554.  v0:= v2.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07f558.  call `r`(v0) @signature `Lb/c;.r:()V` @kind virtual;
  #L07f55e.  v0:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f562.  call `notifyAll`(v0) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L07f568.  @monitorexit v1
  #Try_end0.  
  #L07f56a.  v0:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f56e.  call `j`(v0) @signature `La/a/e/i;.j:()V` @kind virtual;
  #L07f574.  return @kind void;
  #L07f576.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L07f578.  @monitorexit v1
  #Try_end1.  
  #L07f57a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07f576;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07f576;
}
