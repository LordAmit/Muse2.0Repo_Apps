record `a.a.c.g` @kind class @AccessFlag PUBLIC_FINAL extends `a.s$a` @kind interface {
  `java.util.List` `a.a.c.g.a` @AccessFlag PRIVATE_FINAL;
  `a.a.b.g` `a.a.c.g.b` @AccessFlag PRIVATE_FINAL;
  `a.a.c.c` `a.a.c.g.c` @AccessFlag PRIVATE_FINAL;
  `a.i` `a.a.c.g.d` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.c.g.e` @AccessFlag PRIVATE_FINAL;
  `a.x` `a.a.c.g.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.c.g.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.c.g` v0 @kind this, `java.util.List` v1 @kind object, `a.a.b.g` v2 @kind object, `a.a.c.c` v3 @kind object, `a.i` v4 @kind object, `int` v5 , `a.x` v6 @kind object) @signature `La/a/c/g;.<init>:(Ljava/util/List;La/a/b/g;La/a/c/c;La/i;ILa/x;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L077fe4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L077fea.  v0.`a.a.c.g.a` @type ^`java.util.List` := v1 @kind object;
  #L077fee.  v0.`a.a.c.g.d` @type ^`a.i` := v4 @kind object;
  #L077ff2.  v0.`a.a.c.g.b` @type ^`a.a.b.g` := v2 @kind object;
  #L077ff6.  v0.`a.a.c.g.c` @type ^`a.a.c.c` := v3 @kind object;
  #L077ffa.  v0.`a.a.c.g.e` @type ^`int` := v5;
  #L077ffe.  v0.`a.a.c.g.f` @type ^`a.x` := v6 @kind object;
  #L078002.  return @kind void;
}
procedure `boolean` `a`(`a.a.c.g` v2 @kind this, `a.r` v3 @kind object) @signature `La/a/c/g;.a:(La/r;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L078014.  call temp:= `f`(v3) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L07801a.  v0:= temp @kind object;
  #L07801c.  v1:= v2.`a.a.c.g.d` @type ^`a.i` @kind object;
  #L078020.  call temp:= `a`(v1) @signature `La/i;.a:()La/ab;` @kind interface;
  #L078026.  v1:= temp @kind object;
  #L078028.  call temp:= `a`(v1) @signature `La/ab;.a:()La/a;` @kind virtual;
  #L07802e.  v1:= temp @kind object;
  #L078030.  call temp:= `a`(v1) @signature `La/a;.a:()La/r;` @kind virtual;
  #L078036.  v1:= temp @kind object;
  #L078038.  call temp:= `f`(v1) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L07803e.  v1:= temp @kind object;
  #L078040.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L078046.  v0:= temp;
  #L078048.  if v0 == 0 then goto L078080;
  #L07804c.  call temp:= `g`(v3) @signature `La/r;.g:()I` @kind virtual;
  #L078052.  v0:= temp;
  #L078054.  v1:= v2.`a.a.c.g.d` @type ^`a.i` @kind object;
  #L078058.  call temp:= `a`(v1) @signature `La/i;.a:()La/ab;` @kind interface;
  #L07805e.  v1:= temp @kind object;
  #L078060.  call temp:= `a`(v1) @signature `La/ab;.a:()La/a;` @kind virtual;
  #L078066.  v1:= temp @kind object;
  #L078068.  call temp:= `a`(v1) @signature `La/a;.a:()La/r;` @kind virtual;
  #L07806e.  v1:= temp @kind object;
  #L078070.  call temp:= `g`(v1) @signature `La/r;.g:()I` @kind virtual;
  #L078076.  v1:= temp;
  #L078078.  if v0 != v1 then goto L078080;
  #L07807c.  v0:= 1I;
  #L07807e.  return v0;
  #L078080.  v0:= 0I;
  #L078082.  goto L07807e;
}
procedure `a.x` `a`(`a.a.c.g` v1 @kind this) @signature `La/a/c/g;.a:()La/x;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L078094.  v0:= v1.`a.a.c.g.f` @type ^`a.x` @kind object;
  #L078098.  return v0 @kind object;
}
procedure `a.z` `a`(`a.a.c.g` v3 @kind this, `a.x` v4 @kind object) @signature `La/a/c/g;.a:(La/x;)La/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0780ac.  v0:= v3.`a.a.c.g.b` @type ^`a.a.b.g` @kind object;
  #L0780b0.  v1:= v3.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L0780b4.  v2:= v3.`a.a.c.g.d` @type ^`a.i` @kind object;
  #L0780b8.  call temp:= `a`(v3, v4, v0, v1, v2) @signature `La/a/c/g;.a:(La/x;La/a/b/g;La/a/c/c;La/i;)La/z;` @kind virtual;
  #L0780be.  v0:= temp @kind object;
  #L0780c0.  return v0 @kind object;
}
procedure `a.z` `a`(`a.a.c.g` v8 @kind this, `a.x` v9 @kind object, `a.a.b.g` v10 @kind object, `a.a.c.c` v11 @kind object, `a.i` v12 @kind object) @signature `La/a/c/g;.a:(La/x;La/a/b/g;La/a/c/c;La/i;)La/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L0780d4.  v7:= 1I;
  #L0780d6.  v0:= v8.`a.a.c.g.e` @type ^`int`;
  #L0780da.  v1:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L0780de.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L0780e4.  v1:= temp;
  #L0780e6.  if v0 < v1 then goto L0780f6;
  #L0780ea.  v0:= new `java.lang.AssertionError`;
  #L0780ee.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0780f4.  throw v0;
  #L0780f6.  v0:= v8.`a.a.c.g.g` @type ^`int`;
  #L0780fa.  v0:= v0 + 1;
  #L0780fe.  v8.`a.a.c.g.g` @type ^`int` := v0;
  #L078102.  v0:= v8.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L078106.  if v0 == 0 then goto L078170;
  #L07810a.  call temp:= `a`(v9) @signature `La/x;.a:()La/r;` @kind virtual;
  #L078110.  v0:= temp @kind object;
  #L078112.  call temp:= `a`(v8, v0) @signature `La/a/c/g;.a:(La/r;)Z` @kind direct;
  #L078118.  v0:= temp;
  #L07811a.  if v0 != 0 then goto L078170;
  #L07811e.  v0:= new `java.lang.IllegalStateException`;
  #L078122.  v1:= new `java.lang.StringBuilder`;
  #L078126.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07812c.  v2:= "network interceptor " @kind object;
  #L078130.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L078136.  v1:= temp @kind object;
  #L078138.  v2:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L07813c.  v3:= v8.`a.a.c.g.e` @type ^`int`;
  #L078140.  v3:= v3 + -1;
  #L078144.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07814a.  v2:= temp @kind object;
  #L07814c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L078152.  v1:= temp @kind object;
  #L078154.  v2:= " must retain the same host and port" @kind object;
  #L078158.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07815e.  v1:= temp @kind object;
  #L078160.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L078166.  v1:= temp @kind object;
  #L078168.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07816e.  throw v0;
  #L078170.  v0:= v8.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L078174.  if v0 == 0 then goto L0781d2;
  #L078178.  v0:= v8.`a.a.c.g.g` @type ^`int`;
  #L07817c.  if v0 <= v7 then goto L0781d2;
  #L078180.  v0:= new `java.lang.IllegalStateException`;
  #L078184.  v1:= new `java.lang.StringBuilder`;
  #L078188.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07818e.  v2:= "network interceptor " @kind object;
  #L078192.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L078198.  v1:= temp @kind object;
  #L07819a.  v2:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L07819e.  v3:= v8.`a.a.c.g.e` @type ^`int`;
  #L0781a2.  v3:= v3 + -1;
  #L0781a6.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L0781ac.  v2:= temp @kind object;
  #L0781ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0781b4.  v1:= temp @kind object;
  #L0781b6.  v2:= " must call proceed() exactly once" @kind object;
  #L0781ba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0781c0.  v1:= temp @kind object;
  #L0781c2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0781c8.  v1:= temp @kind object;
  #L0781ca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0781d0.  throw v0;
  #L0781d2.  v0:= new `a.a.c.g`;
  #L0781d6.  v1:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L0781da.  v2:= v8.`a.a.c.g.e` @type ^`int`;
  #L0781de.  v5:= v2 + 1;
  #L0781e2.  v2:= v10 @kind object;
  #L0781e4.  v3:= v11 @kind object;
  #L0781e6.  v4:= v12 @kind object;
  #L0781e8.  v6:= v9 @kind object;
  #L0781ea.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `La/a/c/g;.<init>:(Ljava/util/List;La/a/b/g;La/a/c/c;La/i;ILa/x;)V` @kind direct;
  #L0781f0.  v1:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L0781f4.  v2:= v8.`a.a.c.g.e` @type ^`int`;
  #L0781f8.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L0781fe.  v1:= temp @kind object;
  #L078200.  v1:= (`a.s`) v1 @kind object;
  #L078204.  call temp:= `a`(v1, v0) @signature `La/s;.a:(La/s$a;)La/z;` @kind interface;
  #L07820a.  v2:= temp @kind object;
  #L07820c.  if v11 == 0 then goto L07826e;
  #L078210.  v3:= v8.`a.a.c.g.e` @type ^`int`;
  #L078214.  v3:= v3 + 1;
  #L078218.  v4:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L07821c.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L078222.  v4:= temp;
  #L078224.  if v3 >= v4 then goto L07826e;
  #L078228.  v0:= v0.`a.a.c.g.g` @type ^`int`;
  #L07822c.  if v0 == v7 then goto L07826e;
  #L078230.  v0:= new `java.lang.IllegalStateException`;
  #L078234.  v2:= new `java.lang.StringBuilder`;
  #L078238.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07823e.  v3:= "network interceptor " @kind object;
  #L078242.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L078248.  v2:= temp @kind object;
  #L07824a.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L078250.  v1:= temp @kind object;
  #L078252.  v2:= " must call proceed() exactly once" @kind object;
  #L078256.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07825c.  v1:= temp @kind object;
  #L07825e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L078264.  v1:= temp @kind object;
  #L078266.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07826c.  throw v0;
  #L07826e.  if v2 != 0 then goto L0782b0;
  #L078272.  v0:= new `java.lang.NullPointerException`;
  #L078276.  v2:= new `java.lang.StringBuilder`;
  #L07827a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L078280.  v3:= "interceptor " @kind object;
  #L078284.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07828a.  v2:= temp @kind object;
  #L07828c.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L078292.  v1:= temp @kind object;
  #L078294.  v2:= " returned null" @kind object;
  #L078298.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07829e.  v1:= temp @kind object;
  #L0782a0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0782a6.  v1:= temp @kind object;
  #L0782a8.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0782ae.  throw v0;
  #L0782b0.  return v2 @kind object;
}
procedure `a.a.b.g` `b`(`a.a.c.g` v1 @kind this) @signature `La/a/c/g;.b:()La/a/b/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0782c4.  v0:= v1.`a.a.c.g.b` @type ^`a.a.b.g` @kind object;
  #L0782c8.  return v0 @kind object;
}
procedure `a.a.c.c` `c`(`a.a.c.g` v1 @kind this) @signature `La/a/c/g;.c:()La/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0782dc.  v0:= v1.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L0782e0.  return v0 @kind object;
}
