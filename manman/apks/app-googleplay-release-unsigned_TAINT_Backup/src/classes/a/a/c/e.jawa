record `a.a.c.e` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.regex.Pattern` `@@a.a.c.e.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/a/c/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L077c10.  v0:= " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)" @kind object;
  #L077c14.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L077c1a.  v0:= temp @kind object;
  #L077c1c.  `@@a.a.c.e.a` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L077c20.  return @kind void;
}
procedure `int` `a`(`java.lang.String` v2 @kind object, `int` v3 ) @signature `La/a/c/e;.a:(Ljava/lang/String;I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L077c34.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L077c3a.  v0:= temp;
  #L077c3c.  if v3 >= v0 then goto L077c58;
  #L077c40.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L077c46.  v0:= temp;
  #L077c48.  v1:= 32I;
  #L077c4c.  if v0 == v1 then goto L077c5a;
  #L077c50.  v1:= 9I;
  #L077c54.  if v0 == v1 then goto L077c5a;
  #L077c58.  return v3;
  #L077c5a.  v3:= v3 + 1;
  #L077c5e.  goto L077c34;
}
procedure `int` `a`(`java.lang.String` v2 @kind object, `int` v3 , `java.lang.String` v4 @kind object) @signature `La/a/c/e;.a:(Ljava/lang/String;ILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L077c70.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L077c76.  v0:= temp;
  #L077c78.  if v3 >= v0 then goto L077c92;
  #L077c7c.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L077c82.  v0:= temp;
  #L077c84.  call temp:= `indexOf`(v4, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L077c8a.  v0:= temp;
  #L077c8c.  v1:= -1I;
  #L077c8e.  if v0 == v1 then goto L077c94;
  #L077c92.  return v3;
  #L077c94.  v3:= v3 + 1;
  #L077c98.  goto L077c70;
}
procedure `long` `a`(`a.q` v2 @kind object) @signature `La/a/c/e;.a:(La/q;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L077cac.  v0:= "Content-Length" @kind object;
  #L077cb0.  call temp:= `a`(v2, v0) @signature `La/q;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L077cb6.  v0:= temp @kind object;
  #L077cb8.  call temp:= `a`(v0) @signature `La/a/c/e;.a:(Ljava/lang/String;)J` @kind static;
  #L077cbe.  v0:= temp @kind wide;
  #L077cc0.  return v0 @kind wide;
}
procedure `long` `a`(`a.z` v2 @kind object) @signature `La/a/c/e;.a:(La/z;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L077cd4.  call temp:= `e`(v2) @signature `La/z;.e:()La/q;` @kind virtual;
  #L077cda.  v0:= temp @kind object;
  #L077cdc.  call temp:= `a`(v0) @signature `La/a/c/e;.a:(La/q;)J` @kind static;
  #L077ce2.  v0:= temp @kind wide;
  #L077ce4.  return v0 @kind wide;
}
procedure `long` `a`(`java.lang.String` v3 @kind object) @signature `La/a/c/e;.a:(Ljava/lang/String;)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L077cf8.  v0:= -1L;
  #L077cfc.  if v3 != 0 then goto L077d02;
  #L077d00.  return v0 @kind wide;
  #Try_start0.  
  #L077d02.  call temp:= `parseLong`(v3) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #Try_end0.  
  #L077d08.  v0:= temp @kind wide;
  #L077d0a.  goto L077d00;
  #L077d0c.  v2:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L077d0e.  goto L077d00;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L077d0c;
}
procedure `void` `a`(`a.m` v2 @kind object, `a.r` v3 @kind object, `a.q` v4 @kind object) @signature `La/a/c/e;.a:(La/m;La/r;La/q;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L077d30.  v0:= `@@a.m.a` @type ^`a.m` @kind object;
  #L077d34.  if v2 != v0 then goto L077d3a;
  #L077d38.  return @kind void;
  #L077d3a.  call temp:= `a`(v3, v4) @signature `La/l;.a:(La/r;La/q;)Ljava/util/List;` @kind static;
  #L077d40.  v0:= temp @kind object;
  #L077d42.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L077d48.  v1:= temp;
  #L077d4a.  if v1 != 0 then goto L077d38;
  #L077d4e.  call `a`(v2, v3, v0) @signature `La/m;.a:(La/r;Ljava/util/List;)V` @kind interface;
  #L077d54.  goto L077d38;
}
procedure `int` `b`(`java.lang.String` v4 @kind object, `int` v5 ) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L077d68.  call temp:= `parseLong`(v4) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #Try_end0.  
  #L077d6e.  v0:= temp @kind wide;
  #L077d70.  v2:= 2147483647L;
  #L077d76.  v2:= lcmp(v0, v2);
  #L077d7a.  if v2 <= 0 then goto L077d86;
  #L077d7e.  v5:= 2147483647I;
  #L077d84.  return v5;
  #L077d86.  v2:= 0L;
  #L077d8a.  v2:= lcmp(v0, v2);
  #L077d8e.  if v2 >= 0 then goto L077d96;
  #L077d92.  v5:= 0I;
  #L077d94.  goto L077d84;
  #L077d96.  v5:= (`int`) v0 @kind l2i;
  #L077d98.  goto L077d84;
  #L077d9a.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L077d9c.  goto L077d84;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L077d9a;
}
procedure `boolean` `b`(`a.z` v6 @kind object) @signature `La/a/c/e;.b:(La/z;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L077dc0.  v1:= 1I;
  #L077dc2.  v0:= 0I;
  #L077dc4.  call temp:= `a`(v6) @signature `La/z;.a:()La/x;` @kind virtual;
  #L077dca.  v2:= temp @kind object;
  #L077dcc.  call temp:= `b`(v2) @signature `La/x;.b:()Ljava/lang/String;` @kind virtual;
  #L077dd2.  v2:= temp @kind object;
  #L077dd4.  v3:= "HEAD" @kind object;
  #L077dd8.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L077dde.  v2:= temp;
  #L077de0.  if v2 == 0 then goto L077de6;
  #L077de4.  return v0;
  #L077de6.  call temp:= `b`(v6) @signature `La/z;.b:()I` @kind virtual;
  #L077dec.  v2:= temp;
  #L077dee.  v3:= 100I;
  #L077df2.  if v2 < v3 then goto L077dfe;
  #L077df6.  v3:= 200I;
  #L077dfa.  if v2 < v3 then goto L077e12;
  #L077dfe.  v3:= 204I;
  #L077e02.  if v2 == v3 then goto L077e12;
  #L077e06.  v3:= 304I;
  #L077e0a.  if v2 == v3 then goto L077e12;
  #L077e0e.  v0:= v1;
  #L077e10.  goto L077de4;
  #L077e12.  call temp:= `a`(v6) @signature `La/a/c/e;.a:(La/z;)J` @kind static;
  #L077e18.  v2:= temp @kind wide;
  #L077e1a.  v4:= -1L;
  #L077e1e.  v2:= lcmp(v2, v4);
  #L077e22.  if v2 != 0 then goto L077e42;
  #L077e26.  v2:= "chunked" @kind object;
  #L077e2a.  v3:= "Transfer-Encoding" @kind object;
  #L077e2e.  call temp:= `a`(v6, v3) @signature `La/z;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L077e34.  v3:= temp @kind object;
  #L077e36.  call temp:= `equalsIgnoreCase`(v2, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L077e3c.  v2:= temp;
  #L077e3e.  if v2 == 0 then goto L077de4;
  #L077e42.  v0:= v1;
  #L077e44.  goto L077de4;
}
