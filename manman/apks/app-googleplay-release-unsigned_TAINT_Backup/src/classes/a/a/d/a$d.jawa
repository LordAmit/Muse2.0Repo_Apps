record `a.a.d.a$d` @kind class @AccessFlag FINAL extends `b.q` @kind interface {
  `a.a.d.a` `a.a.d.a$d.a` @AccessFlag FINAL_SYNTHETIC;
  `b.h` `a.a.d.a$d.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.a.d.a$d.c` @AccessFlag PRIVATE;
  `long` `a.a.d.a$d.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$d` v2 @kind this, `a.a.d.a` v3 @kind object, `long` v4 ) @signature `La/a/d/a$d;.<init>:(La/a/d/a;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L079e04.  v2.`a.a.d.a$d.a` @type ^`a.a.d.a` := v3 @kind object;
  #L079e08.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L079e0e.  v0:= new `b.h`;
  #L079e12.  v1:= v2.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L079e16.  v1:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L079e1a.  call temp:= `a`(v1) @signature `Lb/d;.a:()Lb/s;` @kind interface;
  #L079e20.  v1:= temp @kind object;
  #L079e22.  call `<init>`(v0, v1) @signature `Lb/h;.<init>:(Lb/s;)V` @kind direct;
  #L079e28.  v2.`a.a.d.a$d.b` @type ^`b.h` := v0 @kind object;
  #L079e2c.  v2.`a.a.d.a$d.d` @type ^`long` := v4 @kind wide;
  #L079e30.  return @kind void;
}
procedure `b.s` `a`(`a.a.d.a$d` v1 @kind this) @signature `La/a/d/a$d;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L079e44.  v0:= v1.`a.a.d.a$d.b` @type ^`b.h` @kind object;
  #L079e48.  return v0 @kind object;
}
procedure `void` `a_`(`a.a.d.a$d` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `La/a/d/a$d;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L079e5c.  v0:= v6.`a.a.d.a$d.c` @type ^`boolean` @kind boolean;
  #L079e60.  if v0 == 0 then goto L079e74;
  #L079e64.  v0:= new `java.lang.IllegalStateException`;
  #L079e68.  v1:= "closed" @kind object;
  #L079e6c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L079e72.  throw v0;
  #L079e74.  call temp:= `b`(v7) @signature `Lb/c;.b:()J` @kind virtual;
  #L079e7a.  v0:= temp @kind wide;
  #L079e7c.  v2:= 0L;
  #L079e80.  v4:= v8 @kind wide;
  #L079e82.  call `a`(v0, v2, v4) @signature `La/a/c;.a:(JJJ)V` @kind static;
  #L079e88.  v0:= v6.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L079e8c.  v0:= lcmp(v8, v0);
  #L079e90.  if v0 <= 0 then goto L079ede;
  #L079e94.  v0:= new `java.net.ProtocolException`;
  #L079e98.  v1:= new `java.lang.StringBuilder`;
  #L079e9c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L079ea2.  v2:= "expected " @kind object;
  #L079ea6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L079eac.  v1:= temp @kind object;
  #L079eae.  v2:= v6.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L079eb2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L079eb8.  v1:= temp @kind object;
  #L079eba.  v2:= " bytes but received " @kind object;
  #L079ebe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L079ec4.  v1:= temp @kind object;
  #L079ec6.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L079ecc.  v1:= temp @kind object;
  #L079ece.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L079ed4.  v1:= temp @kind object;
  #L079ed6.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L079edc.  throw v0;
  #L079ede.  v0:= v6.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L079ee2.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L079ee6.  call `a_`(v0, v7, v8) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L079eec.  v0:= v6.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L079ef0.  v0:= v0 - v8 @kind long;
  #L079ef2.  v6.`a.a.d.a$d.d` @type ^`long` := v0 @kind wide;
  #L079ef6.  return @kind void;
}
procedure `void` `close`(`a.a.d.a$d` v4 @kind this) @signature `La/a/d/a$d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L079f08.  v0:= v4.`a.a.d.a$d.c` @type ^`boolean` @kind boolean;
  #L079f0c.  if v0 == 0 then goto L079f12;
  #L079f10.  return @kind void;
  #L079f12.  v0:= 1I;
  #L079f14.  v4.`a.a.d.a$d.c` @type ^`boolean` := v0 @kind boolean;
  #L079f18.  v0:= v4.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L079f1c.  v2:= 0L;
  #L079f20.  v0:= lcmp(v0, v2);
  #L079f24.  if v0 <= 0 then goto L079f38;
  #L079f28.  v0:= new `java.net.ProtocolException`;
  #L079f2c.  v1:= "unexpected end of stream" @kind object;
  #L079f30.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L079f36.  throw v0;
  #L079f38.  v0:= v4.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L079f3c.  v1:= v4.`a.a.d.a$d.b` @type ^`b.h` @kind object;
  #L079f40.  call `a`(v0, v1) @signature `La/a/d/a;.a:(Lb/h;)V` @kind virtual;
  #L079f46.  v0:= v4.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L079f4a.  v1:= 3I;
  #L079f4c.  v0.`a.a.d.a.e` @type ^`int` := v1;
  #L079f50.  goto L079f10;
}
procedure `void` `flush`(`a.a.d.a$d` v1 @kind this) @signature `La/a/d/a$d;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L079f64.  v0:= v1.`a.a.d.a$d.c` @type ^`boolean` @kind boolean;
  #L079f68.  if v0 == 0 then goto L079f6e;
  #L079f6c.  return @kind void;
  #L079f6e.  v0:= v1.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L079f72.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L079f76.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L079f7c.  goto L079f6c;
}
