record `a.a.d.a$b` @kind class @AccessFlag FINAL extends `b.q` @kind interface {
  `a.a.d.a` `a.a.d.a$b.a` @AccessFlag FINAL_SYNTHETIC;
  `b.h` `a.a.d.a$b.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.a.d.a$b.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$b` v2 @kind this, `a.a.d.a` v3 @kind object) @signature `La/a/d/a$b;.<init>:(La/a/d/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0799f0.  v2.`a.a.d.a$b.a` @type ^`a.a.d.a` := v3 @kind object;
  #L0799f4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0799fa.  v0:= new `b.h`;
  #L0799fe.  v1:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L079a02.  v1:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L079a06.  call temp:= `a`(v1) @signature `Lb/d;.a:()Lb/s;` @kind interface;
  #L079a0c.  v1:= temp @kind object;
  #L079a0e.  call `<init>`(v0, v1) @signature `Lb/h;.<init>:(Lb/s;)V` @kind direct;
  #L079a14.  v2.`a.a.d.a$b.b` @type ^`b.h` := v0 @kind object;
  #L079a18.  return @kind void;
}
procedure `b.s` `a`(`a.a.d.a$b` v1 @kind this) @signature `La/a/d/a$b;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L079a2c.  v0:= v1.`a.a.d.a$b.b` @type ^`b.h` @kind object;
  #L079a30.  return v0 @kind object;
}
procedure `void` `a_`(`a.a.d.a$b` v2 @kind this, `b.c` v3 @kind object, `long` v4 ) @signature `La/a/d/a$b;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L079a44.  v0:= v2.`a.a.d.a$b.c` @type ^`boolean` @kind boolean;
  #L079a48.  if v0 == 0 then goto L079a5c;
  #L079a4c.  v0:= new `java.lang.IllegalStateException`;
  #L079a50.  v1:= "closed" @kind object;
  #L079a54.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L079a5a.  throw v0;
  #L079a5c.  v0:= 0L;
  #L079a60.  v0:= lcmp(v4, v0);
  #L079a64.  if v0 != 0 then goto L079a6a;
  #L079a68.  return @kind void;
  #L079a6a.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L079a6e.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L079a72.  call temp:= `j`(v0, v4) @signature `Lb/d;.j:(J)Lb/d;` @kind interface;
  #L079a78.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L079a7c.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L079a80.  v1:= "\r\n" @kind object;
  #L079a84.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L079a8a.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L079a8e.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L079a92.  call `a_`(v0, v3, v4) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L079a98.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L079a9c.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L079aa0.  v1:= "\r\n" @kind object;
  #L079aa4.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L079aaa.  goto L079a68;
}
procedure `void` `close`(`a.a.d.a$b` v2 @kind this) @signature `La/a/d/a$b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L079abc.  @monitorenter v2
  #Try_start0.  
  #L079abe.  v0:= v2.`a.a.d.a$b.c` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L079ac2.  if v0 == 0 then goto L079aca;
  #L079ac6.  @monitorexit v2
  #L079ac8.  return @kind void;
  #L079aca.  v0:= 1I;
  #Try_start1.  
  #L079acc.  v2.`a.a.d.a$b.c` @type ^`boolean` := v0 @kind boolean;
  #L079ad0.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L079ad4.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L079ad8.  v1:= "0\r\n\r\n" @kind object;
  #L079adc.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L079ae2.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L079ae6.  v1:= v2.`a.a.d.a$b.b` @type ^`b.h` @kind object;
  #L079aea.  call `a`(v0, v1) @signature `La/a/d/a;.a:(Lb/h;)V` @kind virtual;
  #L079af0.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L079af4.  v1:= 3I;
  #L079af6.  v0.`a.a.d.a.e` @type ^`int` := v1;
  #Try_end1.  
  #L079afa.  goto L079ac6;
  #L079afc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L079afe.  @monitorexit v2
  #L079b00.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L079afc;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L079afc;
}
procedure `void` `flush`(`a.a.d.a$b` v1 @kind this) @signature `La/a/d/a$b;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L079b28.  @monitorenter v1
  #Try_start0.  
  #L079b2a.  v0:= v1.`a.a.d.a$b.c` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L079b2e.  if v0 == 0 then goto L079b36;
  #L079b32.  @monitorexit v1
  #L079b34.  return @kind void;
  #Try_start1.  
  #L079b36.  v0:= v1.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L079b3a.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L079b3e.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L079b44.  goto L079b32;
  #L079b46.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L079b48.  @monitorexit v1
  #L079b4a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L079b46;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L079b46;
}
