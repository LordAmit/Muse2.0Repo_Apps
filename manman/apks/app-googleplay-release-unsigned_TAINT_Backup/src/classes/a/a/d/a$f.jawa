record `a.a.d.a$f` @kind class @AccessFlag  extends `a.a.d.a$a` @kind class {
  `a.a.d.a` `a.a.d.a$f.d` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `a.a.d.a$f.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$f` v1 @kind this, `a.a.d.a` v2 @kind object) @signature `La/a/d/a$f;.<init>:(La/a/d/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L07a0f4.  v1.`a.a.d.a$f.d` @type ^`a.a.d.a` := v2 @kind object;
  #L07a0f8.  v0:= 0I;
  #L07a0fa.  call `<init>`(v1, v2, v0) @signature `La/a/d/a$a;.<init>:(La/a/d/a;La/a/d/a$1;)V` @kind direct;
  #L07a100.  return @kind void;
}
procedure `long` `a`(`a.a.d.a$f` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `La/a/d/a$f;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07a114.  v5:= 1I;
  #L07a116.  v0:= -1L;
  #L07a11a.  v2:= 0L;
  #L07a11e.  v2:= lcmp(v8, v2);
  #L07a122.  if v2 >= 0 then goto L07a158;
  #L07a126.  v0:= new `java.lang.IllegalArgumentException`;
  #L07a12a.  v1:= new `java.lang.StringBuilder`;
  #L07a12e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a134.  v2:= "byteCount < 0: " @kind object;
  #L07a138.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a13e.  v1:= temp @kind object;
  #L07a140.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a146.  v1:= temp @kind object;
  #L07a148.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a14e.  v1:= temp @kind object;
  #L07a150.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a156.  throw v0;
  #L07a158.  v2:= v6.`a.a.d.a$f.b` @type ^`boolean` @kind boolean;
  #L07a15c.  if v2 == 0 then goto L07a170;
  #L07a160.  v0:= new `java.lang.IllegalStateException`;
  #L07a164.  v1:= "closed" @kind object;
  #L07a168.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a16e.  throw v0;
  #L07a170.  v2:= v6.`a.a.d.a$f.e` @type ^`boolean` @kind boolean;
  #L07a174.  if v2 == 0 then goto L07a17a;
  #L07a178.  return v0 @kind wide;
  #L07a17a.  v2:= v6.`a.a.d.a$f.d` @type ^`a.a.d.a` @kind object;
  #L07a17e.  v2:= v2.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07a182.  call temp:= `a`(v2, v7, v8) @signature `Lb/e;.a:(Lb/c;J)J` @kind interface;
  #L07a188.  v2:= temp @kind wide;
  #L07a18a.  v4:= lcmp(v2, v0);
  #L07a18e.  if v4 != 0 then goto L07a19e;
  #L07a192.  v6.`a.a.d.a$f.e` @type ^`boolean` := v5 @kind boolean;
  #L07a196.  call `a`(v6, v5) @signature `La/a/d/a$f;.a:(Z)V` @kind virtual;
  #L07a19c.  goto L07a178;
  #L07a19e.  v0:= v2 @kind wide;
  #L07a1a0.  goto L07a178;
}
procedure `void` `close`(`a.a.d.a$f` v1 @kind this) @signature `La/a/d/a$f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07a1b4.  v0:= v1.`a.a.d.a$f.b` @type ^`boolean` @kind boolean;
  #L07a1b8.  if v0 == 0 then goto L07a1be;
  #L07a1bc.  return @kind void;
  #L07a1be.  v0:= v1.`a.a.d.a$f.e` @type ^`boolean` @kind boolean;
  #L07a1c2.  if v0 != 0 then goto L07a1ce;
  #L07a1c6.  v0:= 0I;
  #L07a1c8.  call `a`(v1, v0) @signature `La/a/d/a$f;.a:(Z)V` @kind virtual;
  #L07a1ce.  v0:= 1I;
  #L07a1d0.  v1.`a.a.d.a$f.b` @type ^`boolean` := v0 @kind boolean;
  #L07a1d4.  goto L07a1bc;
}
