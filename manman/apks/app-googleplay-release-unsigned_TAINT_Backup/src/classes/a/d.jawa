record `a.d` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `a.d.c` @AccessFlag ;
  `boolean` `a.d.d` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.e` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.h` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.i` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.j` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.k` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.l` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.m` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.n` @AccessFlag PRIVATE_FINAL;
}
global `a.d` `@@a.d.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `a.d` `@@a.d.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L084c40.  v0:= new `a.d$a`;
  #L084c44.  call `<init>`(v0) @signature `La/d$a;.<init>:()V` @kind direct;
  #L084c4a.  call temp:= `a`(v0) @signature `La/d$a;.a:()La/d$a;` @kind virtual;
  #L084c50.  v0:= temp @kind object;
  #L084c52.  call temp:= `c`(v0) @signature `La/d$a;.c:()La/d;` @kind virtual;
  #L084c58.  v0:= temp @kind object;
  #L084c5a.  `@@a.d.a` @type ^`a.d` := v0 @kind object;
  #L084c5e.  v0:= new `a.d$a`;
  #L084c62.  call `<init>`(v0) @signature `La/d$a;.<init>:()V` @kind direct;
  #L084c68.  call temp:= `b`(v0) @signature `La/d$a;.b:()La/d$a;` @kind virtual;
  #L084c6e.  v0:= temp @kind object;
  #L084c70.  v1:= 2147483647I;
  #L084c76.  v2:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L084c7a.  call temp:= `a`(v0, v1, v2) @signature `La/d$a;.a:(ILjava/util/concurrent/TimeUnit;)La/d$a;` @kind virtual;
  #L084c80.  v0:= temp @kind object;
  #L084c82.  call temp:= `c`(v0) @signature `La/d$a;.c:()La/d;` @kind virtual;
  #L084c88.  v0:= temp @kind object;
  #L084c8a.  `@@a.d.b` @type ^`a.d` := v0 @kind object;
  #L084c8e.  return @kind void;
}
procedure `void` `<init>`(`a.d` v2 @kind this, `a.d$a` v3 @kind object) @signature `La/d;.<init>:(La/d$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L084ca0.  v1:= 0I;
  #L084ca2.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L084ca8.  v0:= v3.`a.d$a.a` @type ^`boolean` @kind boolean;
  #L084cac.  v2.`a.d.d` @type ^`boolean` := v0 @kind boolean;
  #L084cb0.  v0:= v3.`a.d$a.b` @type ^`boolean` @kind boolean;
  #L084cb4.  v2.`a.d.e` @type ^`boolean` := v0 @kind boolean;
  #L084cb8.  v0:= v3.`a.d$a.c` @type ^`int`;
  #L084cbc.  v2.`a.d.f` @type ^`int` := v0;
  #L084cc0.  v0:= -1I;
  #L084cc2.  v2.`a.d.g` @type ^`int` := v0;
  #L084cc6.  v2.`a.d.h` @type ^`boolean` := v1 @kind boolean;
  #L084cca.  v2.`a.d.i` @type ^`boolean` := v1 @kind boolean;
  #L084cce.  v2.`a.d.j` @type ^`boolean` := v1 @kind boolean;
  #L084cd2.  v0:= v3.`a.d$a.d` @type ^`int`;
  #L084cd6.  v2.`a.d.k` @type ^`int` := v0;
  #L084cda.  v0:= v3.`a.d$a.e` @type ^`int`;
  #L084cde.  v2.`a.d.l` @type ^`int` := v0;
  #L084ce2.  v0:= v3.`a.d$a.f` @type ^`boolean` @kind boolean;
  #L084ce6.  v2.`a.d.m` @type ^`boolean` := v0 @kind boolean;
  #L084cea.  v0:= v3.`a.d$a.g` @type ^`boolean` @kind boolean;
  #L084cee.  v2.`a.d.n` @type ^`boolean` := v0 @kind boolean;
  #L084cf2.  return @kind void;
}
procedure `void` `<init>`(`a.d` v0 @kind this, `boolean` v1 , `boolean` v2 , `int` v3 , `int` v4 , `boolean` v5 , `boolean` v6 , `boolean` v7 , `int` v8 , `int` v9 , `boolean` v10 , `boolean` v11 , `java.lang.String` v12 @kind object) @signature `La/d;.<init>:(ZZIIZZZIIZZLjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L084d04.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L084d0a.  v0.`a.d.d` @type ^`boolean` := v1 @kind boolean;
  #L084d0e.  v0.`a.d.e` @type ^`boolean` := v2 @kind boolean;
  #L084d12.  v0.`a.d.f` @type ^`int` := v3;
  #L084d16.  v0.`a.d.g` @type ^`int` := v4;
  #L084d1a.  v0.`a.d.h` @type ^`boolean` := v5 @kind boolean;
  #L084d1e.  v0.`a.d.i` @type ^`boolean` := v6 @kind boolean;
  #L084d22.  v0.`a.d.j` @type ^`boolean` := v7 @kind boolean;
  #L084d26.  v0.`a.d.k` @type ^`int` := v8;
  #L084d2a.  v0.`a.d.l` @type ^`int` := v9;
  #L084d2e.  v0.`a.d.m` @type ^`boolean` := v10 @kind boolean;
  #L084d32.  v0.`a.d.n` @type ^`boolean` := v11 @kind boolean;
  #L084d36.  v0.`a.d.c` @type ^`java.lang.String` := v12 @kind object;
  #L084d3a.  return @kind void;
}
procedure `a.d` `a`(`a.q` v23 @kind object) @signature `La/d;.a:(La/q;)La/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L084d4c.  v16:= 0I;
  #L084d50.  v4:= 0I;
  #L084d52.  v5:= -1I;
  #L084d54.  v6:= -1I;
  #L084d56.  v7:= 0I;
  #L084d58.  v8:= 0I;
  #L084d5a.  v9:= 0I;
  #L084d5c.  v10:= -1I;
  #L084d5e.  v11:= -1I;
  #L084d60.  v12:= 0I;
  #L084d62.  v13:= 0I;
  #L084d64.  v15:= 1I;
  #L084d66.  v3:= 0I;
  #L084d68.  v2:= 0I;
  #L084d6a.  call temp:= `a`(v23) @signature `La/q;.a:()I` @kind virtual;
  #L084d70.  v19:= temp;
  #L084d72.  v18:= v2;
  #L084d76.  v2:= v3 @kind object;
  #L084d78.  v3:= v16;
  #L084d7c.  v0:= v18;
  #L084d80.  v1:= v19;
  #L084d84.  if v0 >= v1 then goto L085096;
  #L084d88.  v0:= v23 @kind object;
  #L084d8c.  v1:= v18;
  #L084d90.  call temp:= `a`(v0, v1) @signature `La/q;.a:(I)Ljava/lang/String;` @kind virtual;
  #L084d96.  v16:= temp @kind object;
  #L084d98.  v0:= v23 @kind object;
  #L084d9c.  v1:= v18;
  #L084da0.  call temp:= `b`(v0, v1) @signature `La/q;.b:(I)Ljava/lang/String;` @kind virtual;
  #L084da6.  v14:= temp @kind object;
  #L084da8.  v17:= "Cache-Control" @kind object;
  #L084dac.  call temp:= `equalsIgnoreCase`(v16, v17) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L084db2.  v17:= temp;
  #L084db4.  if v17 == 0 then goto L084e76;
  #L084db8.  if v2 == 0 then goto L084e72;
  #L084dbc.  v15:= 0I;
  #L084dbe.  v16:= 0I;
  #L084dc2.  v22:= v16;
  #L084dc6.  v16:= v3;
  #L084dca.  v3:= v22;
  #L084dce.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L084dd4.  v17:= temp;
  #L084dd6.  v0:= v17;
  #L084dda.  if v3 >= v0 then goto L085086;
  #L084dde.  v17:= "=,;" @kind object;
  #L084de2.  v0:= v17 @kind object;
  #L084de6.  call temp:= `a`(v14, v3, v0) @signature `La/a/c/e;.a:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L084dec.  v17:= temp;
  #L084dee.  v0:= v17;
  #L084df2.  call temp:= `substring`(v14, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L084df8.  v3:= temp @kind object;
  #L084dfa.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L084e00.  v20:= temp @kind object;
  #L084e02.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L084e08.  v3:= temp;
  #L084e0a.  v0:= v17;
  #L084e0e.  if v0 == v3 then goto L084e42;
  #L084e12.  v0:= v17;
  #L084e16.  call temp:= `charAt`(v14, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L084e1c.  v3:= temp;
  #L084e1e.  v21:= 44I;
  #L084e22.  v0:= v21;
  #L084e26.  if v3 == v0 then goto L084e42;
  #L084e2a.  v0:= v17;
  #L084e2e.  call temp:= `charAt`(v14, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L084e34.  v3:= temp;
  #L084e36.  v21:= 59I;
  #L084e3a.  v0:= v21;
  #L084e3e.  if v3 != v0 then goto L084e8a;
  #L084e42.  v17:= v17 + 1;
  #L084e46.  v3:= 0I;
  #L084e48.  v22:= v3 @kind object;
  #L084e4c.  v3:= v17;
  #L084e50.  v17:= v22 @kind object;
  #L084e54.  v21:= "no-cache" @kind object;
  #L084e58.  v0:= v21 @kind object;
  #L084e5c.  v1:= v20 @kind object;
  #L084e60.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L084e66.  v21:= temp;
  #L084e68.  if v21 == 0 then goto L084f22;
  #L084e6c.  v16:= 1I;
  #L084e70.  goto L084dce;
  #L084e72.  v2:= v14 @kind object;
  #L084e74.  goto L084dbe;
  #L084e76.  v17:= "Pragma" @kind object;
  #L084e7a.  call temp:= `equalsIgnoreCase`(v16, v17) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L084e80.  v16:= temp;
  #L084e82.  if v16 == 0 then goto L085082;
  #L084e86.  v15:= 0I;
  #L084e88.  goto L084dbe;
  #L084e8a.  v3:= v17 + 1;
  #L084e8e.  call temp:= `a`(v14, v3) @signature `La/a/c/e;.a:(Ljava/lang/String;I)I` @kind static;
  #L084e94.  v3:= temp;
  #L084e96.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L084e9c.  v17:= temp;
  #L084e9e.  v0:= v17;
  #L084ea2.  if v3 >= v0 then goto L084ef0;
  #L084ea6.  call temp:= `charAt`(v14, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L084eac.  v17:= temp;
  #L084eae.  v21:= 34I;
  #L084eb2.  v0:= v17;
  #L084eb6.  v1:= v21;
  #L084eba.  if v0 != v1 then goto L084ef0;
  #L084ebe.  v3:= v3 + 1;
  #L084ec2.  v17:= "\"" @kind object;
  #L084ec6.  v0:= v17 @kind object;
  #L084eca.  call temp:= `a`(v14, v3, v0) @signature `La/a/c/e;.a:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L084ed0.  v17:= temp;
  #L084ed2.  v0:= v17;
  #L084ed6.  call temp:= `substring`(v14, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L084edc.  v3:= temp @kind object;
  #L084ede.  v17:= v17 + 1;
  #L084ee2.  v22:= v3 @kind object;
  #L084ee6.  v3:= v17;
  #L084eea.  v17:= v22 @kind object;
  #L084eee.  goto L084e54;
  #L084ef0.  v17:= ",;" @kind object;
  #L084ef4.  v0:= v17 @kind object;
  #L084ef8.  call temp:= `a`(v14, v3, v0) @signature `La/a/c/e;.a:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L084efe.  v17:= temp;
  #L084f00.  v0:= v17;
  #L084f04.  call temp:= `substring`(v14, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L084f0a.  v3:= temp @kind object;
  #L084f0c.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L084f12.  v3:= temp @kind object;
  #L084f14.  v22:= v3 @kind object;
  #L084f18.  v3:= v17;
  #L084f1c.  v17:= v22 @kind object;
  #L084f20.  goto L084e54;
  #L084f22.  v21:= "no-store" @kind object;
  #L084f26.  v0:= v21 @kind object;
  #L084f2a.  v1:= v20 @kind object;
  #L084f2e.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L084f34.  v21:= temp;
  #L084f36.  if v21 == 0 then goto L084f40;
  #L084f3a.  v4:= 1I;
  #L084f3c.  goto L084dce;
  #L084f40.  v21:= "max-age" @kind object;
  #L084f44.  v0:= v21 @kind object;
  #L084f48.  v1:= v20 @kind object;
  #L084f4c.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L084f52.  v21:= temp;
  #L084f54.  if v21 == 0 then goto L084f6a;
  #L084f58.  v5:= -1I;
  #L084f5a.  v0:= v17 @kind object;
  #L084f5e.  call temp:= `b`(v0, v5) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L084f64.  v5:= temp;
  #L084f66.  goto L084dce;
  #L084f6a.  v21:= "s-maxage" @kind object;
  #L084f6e.  v0:= v21 @kind object;
  #L084f72.  v1:= v20 @kind object;
  #L084f76.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L084f7c.  v21:= temp;
  #L084f7e.  if v21 == 0 then goto L084f94;
  #L084f82.  v6:= -1I;
  #L084f84.  v0:= v17 @kind object;
  #L084f88.  call temp:= `b`(v0, v6) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L084f8e.  v6:= temp;
  #L084f90.  goto L084dce;
  #L084f94.  v21:= "private" @kind object;
  #L084f98.  v0:= v21 @kind object;
  #L084f9c.  v1:= v20 @kind object;
  #L084fa0.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L084fa6.  v21:= temp;
  #L084fa8.  if v21 == 0 then goto L084fb2;
  #L084fac.  v7:= 1I;
  #L084fae.  goto L084dce;
  #L084fb2.  v21:= "public" @kind object;
  #L084fb6.  v0:= v21 @kind object;
  #L084fba.  v1:= v20 @kind object;
  #L084fbe.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L084fc4.  v21:= temp;
  #L084fc6.  if v21 == 0 then goto L084fd0;
  #L084fca.  v8:= 1I;
  #L084fcc.  goto L084dce;
  #L084fd0.  v21:= "must-revalidate" @kind object;
  #L084fd4.  v0:= v21 @kind object;
  #L084fd8.  v1:= v20 @kind object;
  #L084fdc.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L084fe2.  v21:= temp;
  #L084fe4.  if v21 == 0 then goto L084fee;
  #L084fe8.  v9:= 1I;
  #L084fea.  goto L084dce;
  #L084fee.  v21:= "max-stale" @kind object;
  #L084ff2.  v0:= v21 @kind object;
  #L084ff6.  v1:= v20 @kind object;
  #L084ffa.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L085000.  v21:= temp;
  #L085002.  if v21 == 0 then goto L08501c;
  #L085006.  v10:= 2147483647I;
  #L08500c.  v0:= v17 @kind object;
  #L085010.  call temp:= `b`(v0, v10) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L085016.  v10:= temp;
  #L085018.  goto L084dce;
  #L08501c.  v21:= "min-fresh" @kind object;
  #L085020.  v0:= v21 @kind object;
  #L085024.  v1:= v20 @kind object;
  #L085028.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08502e.  v21:= temp;
  #L085030.  if v21 == 0 then goto L085046;
  #L085034.  v11:= -1I;
  #L085036.  v0:= v17 @kind object;
  #L08503a.  call temp:= `b`(v0, v11) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L085040.  v11:= temp;
  #L085042.  goto L084dce;
  #L085046.  v17:= "only-if-cached" @kind object;
  #L08504a.  v0:= v17 @kind object;
  #L08504e.  v1:= v20 @kind object;
  #L085052.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L085058.  v17:= temp;
  #L08505a.  if v17 == 0 then goto L085064;
  #L08505e.  v12:= 1I;
  #L085060.  goto L084dce;
  #L085064.  v17:= "no-transform" @kind object;
  #L085068.  v0:= v17 @kind object;
  #L08506c.  v1:= v20 @kind object;
  #L085070.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L085076.  v17:= temp;
  #L085078.  if v17 == 0 then goto L084dce;
  #L08507c.  v13:= 1I;
  #L08507e.  goto L084dce;
  #L085082.  v16:= v3;
  #L085086.  v3:= v18 + 1;
  #L08508a.  v18:= v3;
  #L08508e.  v3:= v16;
  #L085092.  goto L084d7c;
  #L085096.  if v15 != 0 then goto L0850a8;
  #L08509a.  v14:= 0I;
  #L08509c.  v2:= new `a.d`;
  #L0850a0.  call `<init>`(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) @signature `La/d;.<init>:(ZZIIZZZIIZZLjava/lang/String;)V` @kind direct;
  #L0850a6.  return v2 @kind object;
  #L0850a8.  v14:= v2 @kind object;
  #L0850aa.  goto L08509c;
}
procedure `java.lang.String` `j`(`a.d` v4 @kind this) @signature `La/d;.j:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0850bc.  v3:= -1I;
  #L0850be.  v0:= new `java.lang.StringBuilder`;
  #L0850c2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0850c8.  v1:= v4.`a.d.d` @type ^`boolean` @kind boolean;
  #L0850cc.  if v1 == 0 then goto L0850da;
  #L0850d0.  v1:= "no-cache, " @kind object;
  #L0850d4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0850da.  v1:= v4.`a.d.e` @type ^`boolean` @kind boolean;
  #L0850de.  if v1 == 0 then goto L0850ec;
  #L0850e2.  v1:= "no-store, " @kind object;
  #L0850e6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0850ec.  v1:= v4.`a.d.f` @type ^`int`;
  #L0850f0.  if v1 == v3 then goto L085116;
  #L0850f4.  v1:= "max-age=" @kind object;
  #L0850f8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0850fe.  v1:= temp @kind object;
  #L085100.  v2:= v4.`a.d.f` @type ^`int`;
  #L085104.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08510a.  v1:= temp @kind object;
  #L08510c.  v2:= ", " @kind object;
  #L085110.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085116.  v1:= v4.`a.d.g` @type ^`int`;
  #L08511a.  if v1 == v3 then goto L085140;
  #L08511e.  v1:= "s-maxage=" @kind object;
  #L085122.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085128.  v1:= temp @kind object;
  #L08512a.  v2:= v4.`a.d.g` @type ^`int`;
  #L08512e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L085134.  v1:= temp @kind object;
  #L085136.  v2:= ", " @kind object;
  #L08513a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085140.  v1:= v4.`a.d.h` @type ^`boolean` @kind boolean;
  #L085144.  if v1 == 0 then goto L085152;
  #L085148.  v1:= "private, " @kind object;
  #L08514c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085152.  v1:= v4.`a.d.i` @type ^`boolean` @kind boolean;
  #L085156.  if v1 == 0 then goto L085164;
  #L08515a.  v1:= "public, " @kind object;
  #L08515e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085164.  v1:= v4.`a.d.j` @type ^`boolean` @kind boolean;
  #L085168.  if v1 == 0 then goto L085176;
  #L08516c.  v1:= "must-revalidate, " @kind object;
  #L085170.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085176.  v1:= v4.`a.d.k` @type ^`int`;
  #L08517a.  if v1 == v3 then goto L0851a0;
  #L08517e.  v1:= "max-stale=" @kind object;
  #L085182.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085188.  v1:= temp @kind object;
  #L08518a.  v2:= v4.`a.d.k` @type ^`int`;
  #L08518e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L085194.  v1:= temp @kind object;
  #L085196.  v2:= ", " @kind object;
  #L08519a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0851a0.  v1:= v4.`a.d.l` @type ^`int`;
  #L0851a4.  if v1 == v3 then goto L0851ca;
  #L0851a8.  v1:= "min-fresh=" @kind object;
  #L0851ac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0851b2.  v1:= temp @kind object;
  #L0851b4.  v2:= v4.`a.d.l` @type ^`int`;
  #L0851b8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0851be.  v1:= temp @kind object;
  #L0851c0.  v2:= ", " @kind object;
  #L0851c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0851ca.  v1:= v4.`a.d.m` @type ^`boolean` @kind boolean;
  #L0851ce.  if v1 == 0 then goto L0851dc;
  #L0851d2.  v1:= "only-if-cached, " @kind object;
  #L0851d6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0851dc.  v1:= v4.`a.d.n` @type ^`boolean` @kind boolean;
  #L0851e0.  if v1 == 0 then goto L0851ee;
  #L0851e4.  v1:= "no-transform, " @kind object;
  #L0851e8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0851ee.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L0851f4.  v1:= temp;
  #L0851f6.  if v1 != 0 then goto L085200;
  #L0851fa.  v0:= "" @kind object;
  #L0851fe.  return v0 @kind object;
  #L085200.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L085206.  v1:= temp;
  #L085208.  v1:= v1 + -2;
  #L08520c.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L085212.  v2:= temp;
  #L085214.  call temp:= `delete`(v0, v1, v2) @signature `Ljava/lang/StringBuilder;.delete:(II)Ljava/lang/StringBuilder;` @kind virtual;
  #L08521a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L085220.  v0:= temp @kind object;
  #L085222.  goto L0851fe;
}
procedure `boolean` `a`(`a.d` v1 @kind this) @signature `La/d;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L085234.  v0:= v1.`a.d.d` @type ^`boolean` @kind boolean;
  #L085238.  return v0;
}
procedure `boolean` `b`(`a.d` v1 @kind this) @signature `La/d;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08524c.  v0:= v1.`a.d.e` @type ^`boolean` @kind boolean;
  #L085250.  return v0;
}
procedure `int` `c`(`a.d` v1 @kind this) @signature `La/d;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L085264.  v0:= v1.`a.d.f` @type ^`int`;
  #L085268.  return v0;
}
procedure `boolean` `d`(`a.d` v1 @kind this) @signature `La/d;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08527c.  v0:= v1.`a.d.h` @type ^`boolean` @kind boolean;
  #L085280.  return v0;
}
procedure `boolean` `e`(`a.d` v1 @kind this) @signature `La/d;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L085294.  v0:= v1.`a.d.i` @type ^`boolean` @kind boolean;
  #L085298.  return v0;
}
procedure `boolean` `f`(`a.d` v1 @kind this) @signature `La/d;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0852ac.  v0:= v1.`a.d.j` @type ^`boolean` @kind boolean;
  #L0852b0.  return v0;
}
procedure `int` `g`(`a.d` v1 @kind this) @signature `La/d;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0852c4.  v0:= v1.`a.d.k` @type ^`int`;
  #L0852c8.  return v0;
}
procedure `int` `h`(`a.d` v1 @kind this) @signature `La/d;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0852dc.  v0:= v1.`a.d.l` @type ^`int`;
  #L0852e0.  return v0;
}
procedure `boolean` `i`(`a.d` v1 @kind this) @signature `La/d;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0852f4.  v0:= v1.`a.d.m` @type ^`boolean` @kind boolean;
  #L0852f8.  return v0;
}
procedure `java.lang.String` `toString`(`a.d` v1 @kind this) @signature `La/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08530c.  v0:= v1.`a.d.c` @type ^`java.lang.String` @kind object;
  #L085310.  if v0 == 0 then goto L085316;
  #L085314.  return v0 @kind object;
  #L085316.  call temp:= `j`(v1) @signature `La/d;.j:()Ljava/lang/String;` @kind direct;
  #L08531c.  v0:= temp @kind object;
  #L08531e.  v1.`a.d.c` @type ^`java.lang.String` := v0 @kind object;
  #L085322.  goto L085314;
}
