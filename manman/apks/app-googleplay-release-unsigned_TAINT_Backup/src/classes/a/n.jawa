record `a.n` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `a.n.a` @AccessFlag PRIVATE;
  `int` `a.n.b` @AccessFlag PRIVATE;
  `java.lang.Runnable` `a.n.c` @AccessFlag PRIVATE;
  `java.util.concurrent.ExecutorService` `a.n.d` @AccessFlag PRIVATE;
  `java.util.Deque` `a.n.e` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `a.n.f` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `a.n.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.n` v1 @kind this) @signature `La/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L087b64.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L087b6a.  v0:= 64I;
  #L087b6e.  v1.`a.n.a` @type ^`int` := v0;
  #L087b72.  v0:= 5I;
  #L087b74.  v1.`a.n.b` @type ^`int` := v0;
  #L087b78.  v0:= new `java.util.ArrayDeque`;
  #L087b7c.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L087b82.  v1.`a.n.e` @type ^`java.util.Deque` := v0 @kind object;
  #L087b86.  v0:= new `java.util.ArrayDeque`;
  #L087b8a.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L087b90.  v1.`a.n.f` @type ^`java.util.Deque` := v0 @kind object;
  #L087b94.  v0:= new `java.util.ArrayDeque`;
  #L087b98.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L087b9e.  v1.`a.n.g` @type ^`java.util.Deque` := v0 @kind object;
  #L087ba2.  return @kind void;
}
procedure `void` `a`(`a.n` v2 @kind this, `java.util.Deque` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `La/n;.a:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L087bb4.  @monitorenter v2
  #Try_start0.  
  #L087bb6.  call temp:= `remove`(v3, v4) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L087bbc.  v0:= temp;
  #L087bbe.  if v0 != 0 then goto L087bd8;
  #L087bc2.  v0:= new `java.lang.AssertionError`;
  #L087bc6.  v1:= "Call wasn't in-flight!" @kind object;
  #L087bca.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L087bd0.  throw v0;
  #L087bd2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L087bd4.  @monitorexit v2
  #Try_end0.  
  #L087bd6.  throw v0;
  #L087bd8.  if v5 == 0 then goto L087be2;
  #Try_start1.  
  #L087bdc.  call `c`(v2) @signature `La/n;.c:()V` @kind direct;
  #L087be2.  call temp:= `b`(v2) @signature `La/n;.b:()I` @kind virtual;
  #L087be8.  v0:= temp;
  #L087bea.  v1:= v2.`a.n.c` @type ^`java.lang.Runnable` @kind object;
  #L087bee.  @monitorexit v2
  #Try_end1.  
  #L087bf0.  if v0 != 0 then goto L087bfe;
  #L087bf4.  if v1 == 0 then goto L087bfe;
  #L087bf8.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L087bfe.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L087bd2;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L087bd2;
}
procedure `int` `b`(`a.n` v4 @kind this, `a.w$a` v5 @kind object) @signature `La/n;.b:(La/w$a;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L087c24.  v0:= 0I;
  #L087c26.  v1:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L087c2a.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L087c30.  v2:= temp @kind object;
  #L087c32.  v1:= v0;
  #L087c34.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L087c3a.  v0:= temp;
  #L087c3c.  if v0 == 0 then goto L087c70;
  #L087c40.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L087c46.  v0:= temp @kind object;
  #L087c48.  v0:= (`a.w$a`) v0 @kind object;
  #L087c4c.  call temp:= `a`(v0) @signature `La/w$a;.a:()Ljava/lang/String;` @kind virtual;
  #L087c52.  v0:= temp @kind object;
  #L087c54.  call temp:= `a`(v5) @signature `La/w$a;.a:()Ljava/lang/String;` @kind virtual;
  #L087c5a.  v3:= temp @kind object;
  #L087c5c.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L087c62.  v0:= temp;
  #L087c64.  if v0 == 0 then goto L087c72;
  #L087c68.  v0:= v1 + 1;
  #L087c6c.  v1:= v0;
  #L087c6e.  goto L087c34;
  #L087c70.  return v1;
  #L087c72.  v0:= v1;
  #L087c74.  goto L087c6c;
}
procedure `void` `c`(`a.n` v4 @kind this) @signature `La/n;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L087c88.  v0:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L087c8c.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L087c92.  v0:= temp;
  #L087c94.  v1:= v4.`a.n.a` @type ^`int`;
  #L087c98.  if v0 < v1 then goto L087c9e;
  #L087c9c.  return @kind void;
  #L087c9e.  v0:= v4.`a.n.e` @type ^`java.util.Deque` @kind object;
  #L087ca2.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L087ca8.  v0:= temp;
  #L087caa.  if v0 != 0 then goto L087c9c;
  #L087cae.  v0:= v4.`a.n.e` @type ^`java.util.Deque` @kind object;
  #L087cb2.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L087cb8.  v1:= temp @kind object;
  #L087cba.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L087cc0.  v0:= temp;
  #L087cc2.  if v0 == 0 then goto L087c9c;
  #L087cc6.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L087ccc.  v0:= temp @kind object;
  #L087cce.  v0:= (`a.w$a`) v0 @kind object;
  #L087cd2.  call temp:= `b`(v4, v0) @signature `La/n;.b:(La/w$a;)I` @kind direct;
  #L087cd8.  v2:= temp;
  #L087cda.  v3:= v4.`a.n.b` @type ^`int`;
  #L087cde.  if v2 >= v3 then goto L087d00;
  #L087ce2.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L087ce8.  v2:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L087cec.  call temp:= `add`(v2, v0) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L087cf2.  call temp:= `a`(v4) @signature `La/n;.a:()Ljava/util/concurrent/ExecutorService;` @kind virtual;
  #L087cf8.  v2:= temp @kind object;
  #L087cfa.  call `execute`(v2, v0) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L087d00.  v0:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L087d04.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L087d0a.  v0:= temp;
  #L087d0c.  v2:= v4.`a.n.a` @type ^`int`;
  #L087d10.  if v0 < v2 then goto L087cba;
  #L087d14.  goto L087c9c;
}
procedure `java.util.concurrent.ExecutorService` `a`(`a.n` v9 @kind this) @signature `La/n;.a:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L087d28.  @monitorenter v9
  #Try_start0.  
  #L087d2a.  v0:= v9.`a.n.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L087d2e.  if v0 != 0 then goto L087d68;
  #L087d32.  v1:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L087d36.  v2:= 0I;
  #L087d38.  v3:= 2147483647I;
  #L087d3e.  v4:= 60L;
  #L087d42.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L087d46.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L087d4a.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L087d50.  v0:= "OkHttp Dispatcher" @kind object;
  #L087d54.  v8:= 0I;
  #L087d56.  call temp:= `a`(v0, v8) @signature `La/a/c;.a:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L087d5c.  v8:= temp @kind object;
  #L087d5e.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L087d64.  v9.`a.n.d` @type ^`java.util.concurrent.ExecutorService` := v1 @kind object;
  #L087d68.  v0:= v9.`a.n.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #Try_end0.  
  #L087d6c.  @monitorexit v9
  #L087d6e.  return v0 @kind object;
  #L087d70.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L087d72.  @monitorexit v9
  #L087d74.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L087d70;
}
procedure `void` `a`(`a.n` v2 @kind this, `a.w$a` v3 @kind object) @signature `La/n;.a:(La/w$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L087d94.  v0:= v2.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L087d98.  v1:= 1I;
  #L087d9a.  call `a`(v2, v0, v3, v1) @signature `La/n;.a:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @kind direct;
  #L087da0.  return @kind void;
}
procedure `void` `a`(`a.n` v1 @kind this, `a.w` v2 @kind object) @signature `La/n;.a:(La/w;)V` @AccessFlag  {
    temp;
    v0;

  #L087db4.  @monitorenter v1
  #Try_start0.  
  #L087db6.  v0:= v1.`a.n.g` @type ^`java.util.Deque` @kind object;
  #L087dba.  call temp:= `add`(v0, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #Try_end0.  
  #L087dc0.  @monitorexit v1
  #L087dc2.  return @kind void;
  #L087dc4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L087dc6.  @monitorexit v1
  #L087dc8.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L087dc4;
}
procedure `int` `b`(`a.n` v2 @kind this) @signature `La/n;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L087de8.  @monitorenter v2
  #Try_start0.  
  #L087dea.  v0:= v2.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L087dee.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L087df4.  v0:= temp;
  #L087df6.  v1:= v2.`a.n.g` @type ^`java.util.Deque` @kind object;
  #L087dfa.  call temp:= `size`(v1) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #Try_end0.  
  #L087e00.  v1:= temp;
  #L087e02.  v0:= v0 + v1 @kind int;
  #L087e04.  @monitorexit v2
  #L087e06.  return v0;
  #L087e08.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L087e0a.  @monitorexit v2
  #L087e0c.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L087e08;
}
procedure `void` `b`(`a.n` v2 @kind this, `a.w` v3 @kind object) @signature `La/n;.b:(La/w;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L087e2c.  v0:= v2.`a.n.g` @type ^`java.util.Deque` @kind object;
  #L087e30.  v1:= 0I;
  #L087e32.  call `a`(v2, v0, v3, v1) @signature `La/n;.a:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @kind direct;
  #L087e38.  return @kind void;
}
