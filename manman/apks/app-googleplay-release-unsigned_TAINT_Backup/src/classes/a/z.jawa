record `a.z` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `a.x` `a.z.a` @AccessFlag FINAL;
  `a.v` `a.z.b` @AccessFlag FINAL;
  `int` `a.z.c` @AccessFlag FINAL;
  `java.lang.String` `a.z.d` @AccessFlag FINAL;
  `a.p` `a.z.e` @AccessFlag FINAL;
  `a.q` `a.z.f` @AccessFlag FINAL;
  `a.aa` `a.z.g` @AccessFlag FINAL;
  `a.z` `a.z.h` @AccessFlag FINAL;
  `a.z` `a.z.i` @AccessFlag FINAL;
  `a.z` `a.z.j` @AccessFlag FINAL;
  `long` `a.z.k` @AccessFlag FINAL;
  `long` `a.z.l` @AccessFlag FINAL;
  `a.d` `a.z.m` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`a.z` v2 @kind this, `a.z$a` v3 @kind object) @signature `La/z;.<init>:(La/z$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L08bc64.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08bc6a.  v0:= v3.`a.z$a.a` @type ^`a.x` @kind object;
  #L08bc6e.  v2.`a.z.a` @type ^`a.x` := v0 @kind object;
  #L08bc72.  v0:= v3.`a.z$a.b` @type ^`a.v` @kind object;
  #L08bc76.  v2.`a.z.b` @type ^`a.v` := v0 @kind object;
  #L08bc7a.  v0:= v3.`a.z$a.c` @type ^`int`;
  #L08bc7e.  v2.`a.z.c` @type ^`int` := v0;
  #L08bc82.  v0:= v3.`a.z$a.d` @type ^`java.lang.String` @kind object;
  #L08bc86.  v2.`a.z.d` @type ^`java.lang.String` := v0 @kind object;
  #L08bc8a.  v0:= v3.`a.z$a.e` @type ^`a.p` @kind object;
  #L08bc8e.  v2.`a.z.e` @type ^`a.p` := v0 @kind object;
  #L08bc92.  v0:= v3.`a.z$a.f` @type ^`a.q$a` @kind object;
  #L08bc96.  call temp:= `a`(v0) @signature `La/q$a;.a:()La/q;` @kind virtual;
  #L08bc9c.  v0:= temp @kind object;
  #L08bc9e.  v2.`a.z.f` @type ^`a.q` := v0 @kind object;
  #L08bca2.  v0:= v3.`a.z$a.g` @type ^`a.aa` @kind object;
  #L08bca6.  v2.`a.z.g` @type ^`a.aa` := v0 @kind object;
  #L08bcaa.  v0:= v3.`a.z$a.h` @type ^`a.z` @kind object;
  #L08bcae.  v2.`a.z.h` @type ^`a.z` := v0 @kind object;
  #L08bcb2.  v0:= v3.`a.z$a.i` @type ^`a.z` @kind object;
  #L08bcb6.  v2.`a.z.i` @type ^`a.z` := v0 @kind object;
  #L08bcba.  v0:= v3.`a.z$a.j` @type ^`a.z` @kind object;
  #L08bcbe.  v2.`a.z.j` @type ^`a.z` := v0 @kind object;
  #L08bcc2.  v0:= v3.`a.z$a.k` @type ^`long` @kind wide;
  #L08bcc6.  v2.`a.z.k` @type ^`long` := v0 @kind wide;
  #L08bcca.  v0:= v3.`a.z$a.l` @type ^`long` @kind wide;
  #L08bcce.  v2.`a.z.l` @type ^`long` := v0 @kind wide;
  #L08bcd2.  return @kind void;
}
procedure `a.x` `a`(`a.z` v1 @kind this) @signature `La/z;.a:()La/x;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08bce4.  v0:= v1.`a.z.a` @type ^`a.x` @kind object;
  #L08bce8.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`a.z` v1 @kind this, `java.lang.String` v2 @kind object) @signature `La/z;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08bcfc.  v0:= 0I;
  #L08bcfe.  call temp:= `a`(v1, v2, v0) @signature `La/z;.a:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L08bd04.  v0:= temp @kind object;
  #L08bd06.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`a.z` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `La/z;.a:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08bd18.  v0:= v1.`a.z.f` @type ^`a.q` @kind object;
  #L08bd1c.  call temp:= `a`(v0, v2) @signature `La/q;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L08bd22.  v0:= temp @kind object;
  #L08bd24.  if v0 == 0 then goto L08bd2a;
  #L08bd28.  v3:= v0 @kind object;
  #L08bd2a.  return v3 @kind object;
}
procedure `int` `b`(`a.z` v1 @kind this) @signature `La/z;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08bd3c.  v0:= v1.`a.z.c` @type ^`int`;
  #L08bd40.  return v0;
}
procedure `boolean` `c`(`a.z` v2 @kind this) @signature `La/z;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08bd54.  v0:= v2.`a.z.c` @type ^`int`;
  #L08bd58.  v1:= 200I;
  #L08bd5c.  if v0 < v1 then goto L08bd70;
  #L08bd60.  v0:= v2.`a.z.c` @type ^`int`;
  #L08bd64.  v1:= 300I;
  #L08bd68.  if v0 >= v1 then goto L08bd70;
  #L08bd6c.  v0:= 1I;
  #L08bd6e.  return v0;
  #L08bd70.  v0:= 0I;
  #L08bd72.  goto L08bd6e;
}
procedure `void` `close`(`a.z` v1 @kind this) @signature `La/z;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08bd84.  v0:= v1.`a.z.g` @type ^`a.aa` @kind object;
  #L08bd88.  call `close`(v0) @signature `La/aa;.close:()V` @kind virtual;
  #L08bd8e.  return @kind void;
}
procedure `a.p` `d`(`a.z` v1 @kind this) @signature `La/z;.d:()La/p;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08bda0.  v0:= v1.`a.z.e` @type ^`a.p` @kind object;
  #L08bda4.  return v0 @kind object;
}
procedure `a.q` `e`(`a.z` v1 @kind this) @signature `La/z;.e:()La/q;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08bdb8.  v0:= v1.`a.z.f` @type ^`a.q` @kind object;
  #L08bdbc.  return v0 @kind object;
}
procedure `a.aa` `f`(`a.z` v1 @kind this) @signature `La/z;.f:()La/aa;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08bdd0.  v0:= v1.`a.z.g` @type ^`a.aa` @kind object;
  #L08bdd4.  return v0 @kind object;
}
procedure `a.z$a` `g`(`a.z` v1 @kind this) @signature `La/z;.g:()La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08bde8.  v0:= new `a.z$a`;
  #L08bdec.  call `<init>`(v0, v1) @signature `La/z$a;.<init>:(La/z;)V` @kind direct;
  #L08bdf2.  return v0 @kind object;
}
procedure `a.d` `h`(`a.z` v1 @kind this) @signature `La/z;.h:()La/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08be04.  v0:= v1.`a.z.m` @type ^`a.d` @kind object;
  #L08be08.  if v0 == 0 then goto L08be0e;
  #L08be0c.  return v0 @kind object;
  #L08be0e.  v0:= v1.`a.z.f` @type ^`a.q` @kind object;
  #L08be12.  call temp:= `a`(v0) @signature `La/d;.a:(La/q;)La/d;` @kind static;
  #L08be18.  v0:= temp @kind object;
  #L08be1a.  v1.`a.z.m` @type ^`a.d` := v0 @kind object;
  #L08be1e.  goto L08be0c;
}
procedure `long` `i`(`a.z` v2 @kind this) @signature `La/z;.i:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08be30.  v0:= v2.`a.z.k` @type ^`long` @kind wide;
  #L08be34.  return v0 @kind wide;
}
procedure `long` `j`(`a.z` v2 @kind this) @signature `La/z;.j:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08be48.  v0:= v2.`a.z.l` @type ^`long` @kind wide;
  #L08be4c.  return v0 @kind wide;
}
procedure `java.lang.String` `toString`(`a.z` v2 @kind this) @signature `La/z;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08be60.  v0:= new `java.lang.StringBuilder`;
  #L08be64.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08be6a.  v1:= "Response{protocol=" @kind object;
  #L08be6e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08be74.  v0:= temp @kind object;
  #L08be76.  v1:= v2.`a.z.b` @type ^`a.v` @kind object;
  #L08be7a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08be80.  v0:= temp @kind object;
  #L08be82.  v1:= ", code=" @kind object;
  #L08be86.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08be8c.  v0:= temp @kind object;
  #L08be8e.  v1:= v2.`a.z.c` @type ^`int`;
  #L08be92.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08be98.  v0:= temp @kind object;
  #L08be9a.  v1:= ", message=" @kind object;
  #L08be9e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08bea4.  v0:= temp @kind object;
  #L08bea6.  v1:= v2.`a.z.d` @type ^`java.lang.String` @kind object;
  #L08beaa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08beb0.  v0:= temp @kind object;
  #L08beb2.  v1:= ", url=" @kind object;
  #L08beb6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08bebc.  v0:= temp @kind object;
  #L08bebe.  v1:= v2.`a.z.a` @type ^`a.x` @kind object;
  #L08bec2.  call temp:= `a`(v1) @signature `La/x;.a:()La/r;` @kind virtual;
  #L08bec8.  v1:= temp @kind object;
  #L08beca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08bed0.  v0:= temp @kind object;
  #L08bed2.  v1:= 125I;
  #L08bed6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L08bedc.  v0:= temp @kind object;
  #L08bede.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08bee4.  v0:= temp @kind object;
  #L08bee6.  return v0 @kind object;
}
