record `com.b.a.d.c` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface, `java.io.Flushable` @kind interface {
  `java.io.Writer` `com.b.a.d.c.c` @AccessFlag PRIVATE_FINAL;
  `int`[] `com.b.a.d.c.d` @AccessFlag PRIVATE;
  `int` `com.b.a.d.c.e` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.c.f` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.c.g` @AccessFlag PRIVATE;
  `boolean` `com.b.a.d.c.h` @AccessFlag PRIVATE;
  `boolean` `com.b.a.d.c.i` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.c.j` @AccessFlag PRIVATE;
  `boolean` `com.b.a.d.c.k` @AccessFlag PRIVATE;
}
global `java.lang.String`[] `@@com.b.a.d.c.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String`[] `@@com.b.a.d.c.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/d/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13f5bc.  v1:= 0I;
  #L13f5be.  v0:= 128I;
  #L13f5c2.  v0:= new `java.lang.String`[v0];
  #L13f5c6.  `@@com.b.a.d.c.a` @type ^`java.lang.String`[] := v0 @kind object;
  #L13f5ca.  v0:= v1;
  #L13f5cc.  v2:= 31I;
  #L13f5d0.  if v0 > v2 then goto L13f600;
  #L13f5d4.  v2:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L13f5d8.  v3:= "\\u%04x" @kind object;
  #L13f5dc.  v4:= 1I;
  #L13f5de.  v4:= new `java.lang.Object`[v4];
  #L13f5e2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L13f5e8.  v5:= temp @kind object;
  #L13f5ea.  v4[v1]:= v5 @kind object;
  #L13f5ee.  call temp:= `format`(v3, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L13f5f4.  v3:= temp @kind object;
  #L13f5f6.  v2[v0]:= v3 @kind object;
  #L13f5fa.  v0:= v0 + 1;
  #L13f5fe.  goto L13f5cc;
  #L13f600.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L13f604.  v1:= 34I;
  #L13f608.  v2:= "\\\"" @kind object;
  #L13f60c.  v0[v1]:= v2 @kind object;
  #L13f610.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L13f614.  v1:= 92I;
  #L13f618.  v2:= "\\\\" @kind object;
  #L13f61c.  v0[v1]:= v2 @kind object;
  #L13f620.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L13f624.  v1:= 9I;
  #L13f628.  v2:= "\\t" @kind object;
  #L13f62c.  v0[v1]:= v2 @kind object;
  #L13f630.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L13f634.  v1:= 8I;
  #L13f638.  v2:= "\\b" @kind object;
  #L13f63c.  v0[v1]:= v2 @kind object;
  #L13f640.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L13f644.  v1:= 10I;
  #L13f648.  v2:= "\\n" @kind object;
  #L13f64c.  v0[v1]:= v2 @kind object;
  #L13f650.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L13f654.  v1:= 13I;
  #L13f658.  v2:= "\\r" @kind object;
  #L13f65c.  v0[v1]:= v2 @kind object;
  #L13f660.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L13f664.  v1:= 12I;
  #L13f668.  v2:= "\\f" @kind object;
  #L13f66c.  v0[v1]:= v2 @kind object;
  #L13f670.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L13f674.  call temp:= `clone`(v0) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L13f67a.  v0:= temp @kind object;
  #L13f67c.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L13f680.  `@@com.b.a.d.c.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L13f684.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L13f688.  v1:= 60I;
  #L13f68c.  v2:= "\\u003c" @kind object;
  #L13f690.  v0[v1]:= v2 @kind object;
  #L13f694.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L13f698.  v1:= 62I;
  #L13f69c.  v2:= "\\u003e" @kind object;
  #L13f6a0.  v0[v1]:= v2 @kind object;
  #L13f6a4.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L13f6a8.  v1:= 38I;
  #L13f6ac.  v2:= "\\u0026" @kind object;
  #L13f6b0.  v0[v1]:= v2 @kind object;
  #L13f6b4.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L13f6b8.  v1:= 61I;
  #L13f6bc.  v2:= "\\u003d" @kind object;
  #L13f6c0.  v0[v1]:= v2 @kind object;
  #L13f6c4.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L13f6c8.  v1:= 39I;
  #L13f6cc.  v2:= "\\u0027" @kind object;
  #L13f6d0.  v0[v1]:= v2 @kind object;
  #L13f6d4.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.d.c` v2 @kind this, `java.io.Writer` v3 @kind object) @signature `Lcom/b/a/d/c;.<init>:(Ljava/io/Writer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L13f6e8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13f6ee.  v0:= 32I;
  #L13f6f2.  v0:= new `int`[v0];
  #L13f6f6.  v2.`com.b.a.d.c.d` @type ^`int`[] := v0 @kind object;
  #L13f6fa.  v0:= 0I;
  #L13f6fc.  v2.`com.b.a.d.c.e` @type ^`int` := v0;
  #L13f700.  v0:= 6I;
  #L13f702.  call `a`(v2, v0) @signature `Lcom/b/a/d/c;.a:(I)V` @kind direct;
  #L13f708.  v0:= ":" @kind object;
  #L13f70c.  v2.`com.b.a.d.c.g` @type ^`java.lang.String` := v0 @kind object;
  #L13f710.  v0:= 1I;
  #L13f712.  v2.`com.b.a.d.c.k` @type ^`boolean` := v0 @kind boolean;
  #L13f716.  if v3 != 0 then goto L13f72a;
  #L13f71a.  v0:= new `java.lang.NullPointerException`;
  #L13f71e.  v1:= "out == null" @kind object;
  #L13f722.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f728.  throw v0;
  #L13f72a.  v2.`com.b.a.d.c.c` @type ^`java.io.Writer` := v3 @kind object;
  #L13f72e.  return @kind void;
}
procedure `int` `a`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.a:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L13f740.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L13f744.  if v0 != 0 then goto L13f758;
  #L13f748.  v0:= new `java.lang.IllegalStateException`;
  #L13f74c.  v1:= "JsonWriter is closed." @kind object;
  #L13f750.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f756.  throw v0;
  #L13f758.  v0:= v2.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L13f75c.  v1:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L13f760.  v1:= v1 + -1;
  #L13f764.  v0:= v0[v1];
  #L13f768.  return v0;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v3 @kind this, `int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Lcom/b/a/d/c;.a:(IILjava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L13f77c.  call temp:= `a`(v3) @signature `Lcom/b/a/d/c;.a:()I` @kind direct;
  #L13f782.  v0:= temp;
  #L13f784.  if v0 == v5 then goto L13f79c;
  #L13f788.  if v0 == v4 then goto L13f79c;
  #L13f78c.  v0:= new `java.lang.IllegalStateException`;
  #L13f790.  v1:= "Nesting problem." @kind object;
  #L13f794.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f79a.  throw v0;
  #L13f79c.  v1:= v3.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L13f7a0.  if v1 == 0 then goto L13f7da;
  #L13f7a4.  v0:= new `java.lang.IllegalStateException`;
  #L13f7a8.  v1:= new `java.lang.StringBuilder`;
  #L13f7ac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13f7b2.  v2:= "Dangling name: " @kind object;
  #L13f7b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f7bc.  v1:= temp @kind object;
  #L13f7be.  v2:= v3.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L13f7c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f7c8.  v1:= temp @kind object;
  #L13f7ca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13f7d0.  v1:= temp @kind object;
  #L13f7d2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f7d8.  throw v0;
  #L13f7da.  v1:= v3.`com.b.a.d.c.e` @type ^`int`;
  #L13f7de.  v1:= v1 + -1;
  #L13f7e2.  v3.`com.b.a.d.c.e` @type ^`int` := v1;
  #L13f7e6.  if v0 != v5 then goto L13f7f0;
  #L13f7ea.  call `j`(v3) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L13f7f0.  v0:= v3.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13f7f4.  call `write`(v0, v6) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L13f7fa.  return v3 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lcom/b/a/d/c;.a:(ILjava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L13f80c.  call `l`(v1) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L13f812.  call `a`(v1, v2) @signature `Lcom/b/a/d/c;.a:(I)V` @kind direct;
  #L13f818.  v0:= v1.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13f81c.  call `write`(v0, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L13f822.  return v1 @kind object;
}
procedure `void` `a`(`com.b.a.d.c` v4 @kind this, `int` v5 ) @signature `Lcom/b/a/d/c;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13f834.  v3:= 0I;
  #L13f836.  v0:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L13f83a.  v1:= v4.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L13f83e.  v1:= length @variable v1;
  #L13f840.  if v0 != v1 then goto L13f862;
  #L13f844.  v0:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L13f848.  v0:= v0 * 2;
  #L13f84c.  v0:= new `int`[v0];
  #L13f850.  v1:= v4.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L13f854.  v2:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L13f858.  call `arraycopy`(v1, v3, v0, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L13f85e.  v4.`com.b.a.d.c.d` @type ^`int`[] := v0 @kind object;
  #L13f862.  v0:= v4.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L13f866.  v1:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L13f86a.  v2:= v1 + 1;
  #L13f86e.  v4.`com.b.a.d.c.e` @type ^`int` := v2;
  #L13f872.  v0[v1]:= v5;
  #L13f876.  return @kind void;
}
procedure `void` `b`(`com.b.a.d.c` v2 @kind this, `int` v3 ) @signature `Lcom/b/a/d/c;.b:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L13f888.  v0:= v2.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L13f88c.  v1:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L13f890.  v1:= v1 + -1;
  #L13f894.  v0[v1]:= v3;
  #L13f898.  return @kind void;
}
procedure `void` `c`(`com.b.a.d.c` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lcom/b/a/d/c;.c:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13f8ac.  v1:= 0I;
  #L13f8ae.  v0:= v7.`com.b.a.d.c.i` @type ^`boolean` @kind boolean;
  #L13f8b2.  if v0 == 0 then goto L13f8f6;
  #L13f8b6.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L13f8ba.  v2:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13f8be.  v3:= "\"" @kind object;
  #L13f8c2.  call `write`(v2, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L13f8c8.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13f8ce.  v4:= temp;
  #L13f8d0.  v3:= v1;
  #L13f8d2.  if v3 >= v4 then goto L13f938;
  #L13f8d6.  call temp:= `charAt`(v8, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13f8dc.  v2:= temp;
  #L13f8de.  v5:= 128I;
  #L13f8e2.  if v2 >= v5 then goto L13f8fc;
  #L13f8e6.  v2:= v0[v2] @kind object;
  #L13f8ea.  if v2 != 0 then goto L13f908;
  #L13f8ee.  v2:= v3 + 1;
  #L13f8f2.  v3:= v2;
  #L13f8f4.  goto L13f8d2;
  #L13f8f6.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L13f8fa.  goto L13f8ba;
  #L13f8fc.  v5:= 8232I;
  #L13f900.  if v2 != v5 then goto L13f92a;
  #L13f904.  v2:= "\\u2028" @kind object;
  #L13f908.  if v1 >= v3 then goto L13f91a;
  #L13f90c.  v5:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13f910.  v6:= v3 - v1 @kind int;
  #L13f914.  call `write`(v5, v8, v1, v6) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L13f91a.  v1:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13f91e.  call `write`(v1, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L13f924.  v1:= v3 + 1;
  #L13f928.  goto L13f8ee;
  #L13f92a.  v5:= 8233I;
  #L13f92e.  if v2 != v5 then goto L13f8ee;
  #L13f932.  v2:= "\\u2029" @kind object;
  #L13f936.  goto L13f908;
  #L13f938.  if v1 >= v4 then goto L13f94a;
  #L13f93c.  v0:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13f940.  v2:= v4 - v1 @kind int;
  #L13f944.  call `write`(v0, v8, v1, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L13f94a.  v0:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13f94e.  v1:= "\"" @kind object;
  #L13f952.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L13f958.  return @kind void;
}
procedure `void` `i`(`com.b.a.d.c` v1 @kind this) @signature `Lcom/b/a/d/c;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L13f96c.  v0:= v1.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L13f970.  if v0 == 0 then goto L13f98a;
  #L13f974.  call `k`(v1) @signature `Lcom/b/a/d/c;.k:()V` @kind direct;
  #L13f97a.  v0:= v1.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L13f97e.  call `c`(v1, v0) @signature `Lcom/b/a/d/c;.c:(Ljava/lang/String;)V` @kind direct;
  #L13f984.  v0:= 0I;
  #L13f986.  v1.`com.b.a.d.c.j` @type ^`java.lang.String` := v0 @kind object;
  #L13f98a.  return @kind void;
}
procedure `void` `j`(`com.b.a.d.c` v4 @kind this) @signature `Lcom/b/a/d/c;.j:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13f99c.  v0:= v4.`com.b.a.d.c.f` @type ^`java.lang.String` @kind object;
  #L13f9a0.  if v0 != 0 then goto L13f9a6;
  #L13f9a4.  return @kind void;
  #L13f9a6.  v0:= v4.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13f9aa.  v1:= "\n" @kind object;
  #L13f9ae.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L13f9b4.  v0:= 1I;
  #L13f9b6.  v1:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L13f9ba.  if v0 >= v1 then goto L13f9a4;
  #L13f9be.  v2:= v4.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13f9c2.  v3:= v4.`com.b.a.d.c.f` @type ^`java.lang.String` @kind object;
  #L13f9c6.  call `write`(v2, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L13f9cc.  v0:= v0 + 1;
  #L13f9d0.  goto L13f9ba;
}
procedure `void` `k`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.k:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L13f9e4.  call temp:= `a`(v2) @signature `Lcom/b/a/d/c;.a:()I` @kind direct;
  #L13f9ea.  v0:= temp;
  #L13f9ec.  v1:= 5I;
  #L13f9ee.  if v0 != v1 then goto L13fa10;
  #L13f9f2.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13f9f6.  v1:= 44I;
  #L13f9fa.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L13fa00.  call `j`(v2) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L13fa06.  v0:= 4I;
  #L13fa08.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L13fa0e.  return @kind void;
  #L13fa10.  v1:= 3I;
  #L13fa12.  if v0 == v1 then goto L13fa00;
  #L13fa16.  v0:= new `java.lang.IllegalStateException`;
  #L13fa1a.  v1:= "Nesting problem." @kind object;
  #L13fa1e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13fa24.  throw v0;
}
procedure `void` `l`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.l:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L13fa38.  call temp:= `a`(v2) @signature `Lcom/b/a/d/c;.a:()I` @kind direct;
  #L13fa3e.  v0:= temp;
  #L13fa40.  goto L13fab8;
  #L13fa46.  v0:= new `java.lang.IllegalStateException`;
  #L13fa4a.  v1:= "Nesting problem." @kind object;
  #L13fa4e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13fa54.  throw v0;
  #L13fa56.  v0:= v2.`com.b.a.d.c.h` @type ^`boolean` @kind boolean;
  #L13fa5a.  if v0 != 0 then goto L13fa6e;
  #L13fa5e.  v0:= new `java.lang.IllegalStateException`;
  #L13fa62.  v1:= "JSON must have only one top-level value." @kind object;
  #L13fa66.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13fa6c.  throw v0;
  #L13fa6e.  v0:= 7I;
  #L13fa70.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L13fa76.  return @kind void;
  #L13fa78.  v0:= 2I;
  #L13fa7a.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L13fa80.  call `j`(v2) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L13fa86.  goto L13fa76;
  #L13fa88.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13fa8c.  v1:= 44I;
  #L13fa90.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(C)Ljava/io/Writer;` @kind virtual;
  #L13fa96.  call `j`(v2) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L13fa9c.  goto L13fa76;
  #L13fa9e.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13faa2.  v1:= v2.`com.b.a.d.c.g` @type ^`java.lang.String` @kind object;
  #L13faa6.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L13faac.  v0:= 5I;
  #L13faae.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L13fab4.  goto L13fa76;
  #L13fab6.  
  #L13fab8.  switch v0
                  | 1 => goto L13fa78
                  | 2 => goto L13fa88
                  | 3 => goto L13fa46
                  | 4 => goto L13fa9e
                  | 5 => goto L13fa46
                  | 6 => goto L13fa6e
                  | 7 => goto L13fa56
                  | else => goto L13fa46;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v3 @kind this, `long` v4 ) @signature `Lcom/b/a/d/c;.a:(J)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13faec.  call `i`(v3) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L13faf2.  call `l`(v3) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L13faf8.  v0:= v3.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13fafc.  call temp:= `toString`(v4) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L13fb02.  v1:= temp @kind object;
  #L13fb04.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L13fb0a.  return v3 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v2 @kind this, `java.lang.Boolean` v3 @kind object) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/Boolean;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13fb1c.  if v3 != 0 then goto L13fb2a;
  #L13fb20.  call temp:= `f`(v2) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L13fb26.  v2:= temp @kind object;
  #L13fb28.  return v2 @kind object;
  #L13fb2a.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L13fb30.  call `l`(v2) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L13fb36.  v1:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13fb3a.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13fb40.  v0:= temp;
  #L13fb42.  if v0 == 0 then goto L13fb52;
  #L13fb46.  v0:= "true" @kind object;
  #L13fb4a.  call `write`(v1, v0) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L13fb50.  goto L13fb28;
  #L13fb52.  v0:= "false" @kind object;
  #L13fb56.  goto L13fb4a;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v3 @kind this, `java.lang.Number` v4 @kind object) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/Number;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13fb68.  if v4 != 0 then goto L13fb76;
  #L13fb6c.  call temp:= `f`(v3) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L13fb72.  v3:= temp @kind object;
  #L13fb74.  return v3 @kind object;
  #L13fb76.  call `i`(v3) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L13fb7c.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L13fb82.  v0:= temp @kind object;
  #L13fb84.  v1:= v3.`com.b.a.d.c.h` @type ^`boolean` @kind boolean;
  #L13fb88.  if v1 != 0 then goto L13fbee;
  #L13fb8c.  v1:= "-Infinity" @kind object;
  #L13fb90.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13fb96.  v1:= temp;
  #L13fb98.  if v1 != 0 then goto L13fbbc;
  #L13fb9c.  v1:= "Infinity" @kind object;
  #L13fba0.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13fba6.  v1:= temp;
  #L13fba8.  if v1 != 0 then goto L13fbbc;
  #L13fbac.  v1:= "NaN" @kind object;
  #L13fbb0.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13fbb6.  v1:= temp;
  #L13fbb8.  if v1 == 0 then goto L13fbee;
  #L13fbbc.  v0:= new `java.lang.IllegalArgumentException`;
  #L13fbc0.  v1:= new `java.lang.StringBuilder`;
  #L13fbc4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13fbca.  v2:= "Numeric values must be finite, but was " @kind object;
  #L13fbce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13fbd4.  v1:= temp @kind object;
  #L13fbd6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13fbdc.  v1:= temp @kind object;
  #L13fbde.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13fbe4.  v1:= temp @kind object;
  #L13fbe6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13fbec.  throw v0;
  #L13fbee.  call `l`(v3) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L13fbf4.  v1:= v3.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13fbf8.  call temp:= `append`(v1, v0) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L13fbfe.  goto L13fb74;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13fc10.  if v3 != 0 then goto L13fc24;
  #L13fc14.  v0:= new `java.lang.NullPointerException`;
  #L13fc18.  v1:= "name == null" @kind object;
  #L13fc1c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13fc22.  throw v0;
  #L13fc24.  v0:= v2.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L13fc28.  if v0 == 0 then goto L13fc38;
  #L13fc2c.  v0:= new `java.lang.IllegalStateException`;
  #L13fc30.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L13fc36.  throw v0;
  #L13fc38.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L13fc3c.  if v0 != 0 then goto L13fc50;
  #L13fc40.  v0:= new `java.lang.IllegalStateException`;
  #L13fc44.  v1:= "JsonWriter is closed." @kind object;
  #L13fc48.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13fc4e.  throw v0;
  #L13fc50.  v2.`com.b.a.d.c.j` @type ^`java.lang.String` := v3 @kind object;
  #L13fc54.  return v2 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v2 @kind this, `boolean` v3 ) @signature `Lcom/b/a/d/c;.a:(Z)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13fc68.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L13fc6e.  call `l`(v2) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L13fc74.  v1:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13fc78.  if v3 == 0 then goto L13fc88;
  #L13fc7c.  v0:= "true" @kind object;
  #L13fc80.  call `write`(v1, v0) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L13fc86.  return v2 @kind object;
  #L13fc88.  v0:= "false" @kind object;
  #L13fc8c.  goto L13fc80;
}
procedure `com.b.a.d.c` `b`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.b:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13fca0.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L13fca6.  v0:= 1I;
  #L13fca8.  v1:= "[" @kind object;
  #L13fcac.  call temp:= `a`(v2, v0, v1) @signature `Lcom/b/a/d/c;.a:(ILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L13fcb2.  v0:= temp @kind object;
  #L13fcb4.  return v0 @kind object;
}
procedure `com.b.a.d.c` `b`(`com.b.a.d.c` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/b/a/d/c;.b:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;

  #L13fcc8.  if v1 != 0 then goto L13fcd6;
  #L13fccc.  call temp:= `f`(v0) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L13fcd2.  v0:= temp @kind object;
  #L13fcd4.  return v0 @kind object;
  #L13fcd6.  call `i`(v0) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L13fcdc.  call `l`(v0) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L13fce2.  call `c`(v0, v1) @signature `Lcom/b/a/d/c;.c:(Ljava/lang/String;)V` @kind direct;
  #L13fce8.  goto L13fcd4;
}
procedure `void` `b`(`com.b.a.d.c` v0 @kind this, `boolean` v1 ) @signature `Lcom/b/a/d/c;.b:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13fcfc.  v0.`com.b.a.d.c.h` @type ^`boolean` := v1 @kind boolean;
  #L13fd00.  return @kind void;
}
procedure `com.b.a.d.c` `c`(`com.b.a.d.c` v3 @kind this) @signature `Lcom/b/a/d/c;.c:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13fd14.  v0:= 1I;
  #L13fd16.  v1:= 2I;
  #L13fd18.  v2:= "]" @kind object;
  #L13fd1c.  call temp:= `a`(v3, v0, v1, v2) @signature `Lcom/b/a/d/c;.a:(IILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L13fd22.  v0:= temp @kind object;
  #L13fd24.  return v0 @kind object;
}
procedure `void` `close`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13fd38.  v1:= 1I;
  #L13fd3a.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13fd3e.  call `close`(v0) @signature `Ljava/io/Writer;.close:()V` @kind virtual;
  #L13fd44.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L13fd48.  if v0 > v1 then goto L13fd62;
  #L13fd4c.  if v0 != v1 then goto L13fd72;
  #L13fd50.  v1:= v2.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L13fd54.  v0:= v0 + -1;
  #L13fd58.  v0:= v1[v0];
  #L13fd5c.  v1:= 7I;
  #L13fd5e.  if v0 == v1 then goto L13fd72;
  #L13fd62.  v0:= new `java.io.IOException`;
  #L13fd66.  v1:= "Incomplete document" @kind object;
  #L13fd6a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13fd70.  throw v0;
  #L13fd72.  v0:= 0I;
  #L13fd74.  v2.`com.b.a.d.c.e` @type ^`int` := v0;
  #L13fd78.  return @kind void;
}
procedure `com.b.a.d.c` `d`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.d:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13fd8c.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L13fd92.  v0:= 3I;
  #L13fd94.  v1:= "{" @kind object;
  #L13fd98.  call temp:= `a`(v2, v0, v1) @signature `Lcom/b/a/d/c;.a:(ILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L13fd9e.  v0:= temp @kind object;
  #L13fda0.  return v0 @kind object;
}
procedure `com.b.a.d.c` `e`(`com.b.a.d.c` v3 @kind this) @signature `Lcom/b/a/d/c;.e:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13fdb4.  v0:= 3I;
  #L13fdb6.  v1:= 5I;
  #L13fdb8.  v2:= "}" @kind object;
  #L13fdbc.  call temp:= `a`(v3, v0, v1, v2) @signature `Lcom/b/a/d/c;.a:(IILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L13fdc2.  v0:= temp @kind object;
  #L13fdc4.  return v0 @kind object;
}
procedure `com.b.a.d.c` `f`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13fdd8.  v0:= v2.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L13fddc.  if v0 == 0 then goto L13fdee;
  #L13fde0.  v0:= v2.`com.b.a.d.c.k` @type ^`boolean` @kind boolean;
  #L13fde4.  if v0 == 0 then goto L13fe04;
  #L13fde8.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L13fdee.  call `l`(v2) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L13fdf4.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13fdf8.  v1:= "null" @kind object;
  #L13fdfc.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L13fe02.  return v2 @kind object;
  #L13fe04.  v0:= 0I;
  #L13fe06.  v2.`com.b.a.d.c.j` @type ^`java.lang.String` := v0 @kind object;
  #L13fe0a.  goto L13fe02;
}
procedure `void` `flush`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13fe1c.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L13fe20.  if v0 != 0 then goto L13fe34;
  #L13fe24.  v0:= new `java.lang.IllegalStateException`;
  #L13fe28.  v1:= "JsonWriter is closed." @kind object;
  #L13fe2c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13fe32.  throw v0;
  #L13fe34.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L13fe38.  call `flush`(v0) @signature `Ljava/io/Writer;.flush:()V` @kind virtual;
  #L13fe3e.  return @kind void;
}
procedure `boolean` `g`(`com.b.a.d.c` v1 @kind this) @signature `Lcom/b/a/d/c;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13fe50.  v0:= v1.`com.b.a.d.c.h` @type ^`boolean` @kind boolean;
  #L13fe54.  return v0;
}
procedure `boolean` `h`(`com.b.a.d.c` v1 @kind this) @signature `Lcom/b/a/d/c;.h:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13fe68.  v0:= v1.`com.b.a.d.c.k` @type ^`boolean` @kind boolean;
  #L13fe6c.  return v0;
}
