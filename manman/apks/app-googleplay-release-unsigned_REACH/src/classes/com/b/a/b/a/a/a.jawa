record `com.b.a.b.a.a.a` @kind class @AccessFlag PUBLIC {
}
global `java.util.TimeZone` `@@com.b.a.b.a.a.a.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/a/a/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L13bb78.  v0:= "UTC" @kind object;
  #L13bb7c.  call temp:= `getTimeZone`(v0) @signature `Ljava/util/TimeZone;.getTimeZone:(Ljava/lang/String;)Ljava/util/TimeZone;` @kind static;
  #L13bb82.  v0:= temp @kind object;
  #L13bb84.  `@@com.b.a.b.a.a.a.a` @type ^`java.util.TimeZone` := v0 @kind object;
  #L13bb88.  return @kind void;
}
procedure `int` `a`(`java.lang.String` v2 @kind object, `int` v3 ) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;I)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L13bb9c.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13bba2.  v0:= temp;
  #L13bba4.  if v3 >= v0 then goto L13bbc8;
  #L13bba8.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13bbae.  v0:= temp;
  #L13bbb0.  v1:= 48I;
  #L13bbb4.  if v0 < v1 then goto L13bbc0;
  #L13bbb8.  v1:= 57I;
  #L13bbbc.  if v0 <= v1 then goto L13bbc2;
  #L13bbc0.  return v3;
  #L13bbc2.  v3:= v3 + 1;
  #L13bbc6.  goto L13bb9c;
  #L13bbc8.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13bbce.  v3:= temp;
  #L13bbd0.  goto L13bbc0;
}
procedure `int` `a`(`java.lang.String` v4 @kind object, `int` v5 , `int` v6 ) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;II)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13bbe4.  v3:= 10I;
  #L13bbe8.  if v5 < 0 then goto L13bbfc;
  #L13bbec.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13bbf2.  v0:= temp;
  #L13bbf4.  if v6 > v0 then goto L13bbfc;
  #L13bbf8.  if v5 <= v6 then goto L13bc08;
  #L13bbfc.  v0:= new `java.lang.NumberFormatException`;
  #L13bc00.  call `<init>`(v0, v4) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13bc06.  throw v0;
  #L13bc08.  v0:= 0I;
  #L13bc0a.  if v5 >= v6 then goto L13bcc6;
  #L13bc0e.  v1:= v5 + 1;
  #L13bc12.  call temp:= `charAt`(v4, v5) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13bc18.  v0:= temp;
  #L13bc1a.  call temp:= `digit`(v0, v3) @signature `Ljava/lang/Character;.digit:(CI)I` @kind static;
  #L13bc20.  v0:= temp;
  #L13bc22.  if v0 >= 0 then goto L13bc60;
  #L13bc26.  v0:= new `java.lang.NumberFormatException`;
  #L13bc2a.  v1:= new `java.lang.StringBuilder`;
  #L13bc2e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13bc34.  v2:= "Invalid number: " @kind object;
  #L13bc38.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13bc3e.  v1:= temp @kind object;
  #L13bc40.  call temp:= `substring`(v4, v5, v6) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L13bc46.  v2:= temp @kind object;
  #L13bc48.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13bc4e.  v1:= temp @kind object;
  #L13bc50.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13bc56.  v1:= temp @kind object;
  #L13bc58.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13bc5e.  throw v0;
  #L13bc60.  v0:= -v0 @kind int;
  #L13bc62.  if v1 >= v6 then goto L13bcc2;
  #L13bc66.  v2:= v1 + 1;
  #L13bc6a.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13bc70.  v1:= temp;
  #L13bc72.  call temp:= `digit`(v1, v3) @signature `Ljava/lang/Character;.digit:(CI)I` @kind static;
  #L13bc78.  v1:= temp;
  #L13bc7a.  if v1 >= 0 then goto L13bcb8;
  #L13bc7e.  v0:= new `java.lang.NumberFormatException`;
  #L13bc82.  v1:= new `java.lang.StringBuilder`;
  #L13bc86.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13bc8c.  v2:= "Invalid number: " @kind object;
  #L13bc90.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13bc96.  v1:= temp @kind object;
  #L13bc98.  call temp:= `substring`(v4, v5, v6) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L13bc9e.  v2:= temp @kind object;
  #L13bca0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13bca6.  v1:= temp @kind object;
  #L13bca8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13bcae.  v1:= temp @kind object;
  #L13bcb0.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13bcb6.  throw v0;
  #L13bcb8.  v0:= v0 * 10;
  #L13bcbc.  v0:= v0 - v1 @kind int;
  #L13bcbe.  v1:= v2;
  #L13bcc0.  goto L13bc62;
  #L13bcc2.  v0:= -v0 @kind int;
  #L13bcc4.  return v0;
  #L13bcc6.  v1:= v5;
  #L13bcc8.  goto L13bc62;
}
procedure `java.util.Date` `a`(`java.lang.String` v13 @kind object, `java.text.ParsePosition` v14 @kind object) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;Ljava/text/ParsePosition;)Ljava/util/Date;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L13bcdc.  v12:= 43I;
  #L13bce0.  v11:= 5I;
  #L13bce2.  v10:= 45I;
  #L13bce6.  v0:= 0I;
  #Try_start0.  
  #L13bce8.  call temp:= `getIndex`(v14) @signature `Ljava/text/ParsePosition;.getIndex:()I` @kind virtual;
  #L13bcee.  v2:= temp;
  #L13bcf0.  v1:= v2 + 4;
  #L13bcf4.  call temp:= `a`(v13, v2, v1) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;II)I` @kind static;
  #L13bcfa.  v6:= temp;
  #L13bcfc.  v2:= 45I;
  #L13bd00.  call temp:= `a`(v13, v1, v2) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;IC)Z` @kind static;
  #L13bd06.  v2:= temp;
  #L13bd08.  if v2 == 0 then goto L13c186;
  #L13bd0c.  v1:= v1 + 1;
  #L13bd10.  v2:= v1;
  #L13bd12.  v1:= v2 + 2;
  #L13bd16.  call temp:= `a`(v13, v2, v1) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;II)I` @kind static;
  #L13bd1c.  v7:= temp;
  #L13bd1e.  v2:= 45I;
  #L13bd22.  call temp:= `a`(v13, v1, v2) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;IC)Z` @kind static;
  #L13bd28.  v2:= temp;
  #L13bd2a.  if v2 == 0 then goto L13c180;
  #L13bd2e.  v1:= v1 + 1;
  #L13bd32.  v2:= v1;
  #L13bd34.  v1:= v2 + 2;
  #L13bd38.  call temp:= `a`(v13, v2, v1) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;II)I` @kind static;
  #L13bd3e.  v8:= temp;
  #L13bd40.  v2:= 84I;
  #L13bd44.  call temp:= `a`(v13, v1, v2) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;IC)Z` @kind static;
  #L13bd4a.  v2:= temp;
  #L13bd4c.  if v2 != 0 then goto L13bd7a;
  #L13bd50.  call temp:= `length`(v13) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13bd56.  v3:= temp;
  #L13bd58.  if v3 > v1 then goto L13bd7a;
  #L13bd5c.  v0:= new `java.util.GregorianCalendar`;
  #L13bd60.  v2:= v7 + -1;
  #L13bd64.  call `<init>`(v0, v6, v2, v8) @signature `Ljava/util/GregorianCalendar;.<init>:(III)V` @kind direct;
  #L13bd6a.  call `setIndex`(v14, v1) @signature `Ljava/text/ParsePosition;.setIndex:(I)V` @kind virtual;
  #L13bd70.  call temp:= `getTime`(v0) @signature `Ljava/util/Calendar;.getTime:()Ljava/util/Date;` @kind virtual;
  #L13bd76.  v0:= temp @kind object;
  #L13bd78.  return v0 @kind object;
  #L13bd7a.  if v2 == 0 then goto L13c174;
  #L13bd7e.  v2:= v1 + 1;
  #L13bd82.  v1:= v2 + 2;
  #L13bd86.  call temp:= `a`(v13, v2, v1) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;II)I` @kind static;
  #L13bd8c.  v3:= temp;
  #L13bd8e.  v2:= 58I;
  #L13bd92.  call temp:= `a`(v13, v1, v2) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;IC)Z` @kind static;
  #L13bd98.  v2:= temp;
  #L13bd9a.  if v2 == 0 then goto L13c16e;
  #L13bd9e.  v1:= v1 + 1;
  #L13bda2.  v2:= v1;
  #L13bda4.  v1:= v2 + 2;
  #L13bda8.  call temp:= `a`(v13, v2, v1) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;II)I` @kind static;
  #L13bdae.  v2:= temp;
  #L13bdb0.  v4:= 58I;
  #L13bdb4.  call temp:= `a`(v13, v1, v4) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;IC)Z` @kind static;
  #L13bdba.  v4:= temp;
  #L13bdbc.  if v4 == 0 then goto L13bdc4;
  #L13bdc0.  v1:= v1 + 1;
  #L13bdc4.  call temp:= `length`(v13) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13bdca.  v4:= temp;
  #L13bdcc.  if v4 <= v1 then goto L13c162;
  #L13bdd0.  call temp:= `charAt`(v13, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13bdd6.  v4:= temp;
  #L13bdd8.  v5:= 90I;
  #L13bddc.  if v4 == v5 then goto L13c162;
  #L13bde0.  if v4 == v12 then goto L13c162;
  #L13bde4.  if v4 == v10 then goto L13c162;
  #L13bde8.  v4:= v1 + 2;
  #L13bdec.  call temp:= `a`(v13, v1, v4) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;II)I` @kind static;
  #L13bdf2.  v1:= temp;
  #L13bdf4.  v5:= 59I;
  #L13bdf8.  if v1 <= v5 then goto L13be08;
  #L13bdfc.  v5:= 63I;
  #L13be00.  if v1 >= v5 then goto L13be08;
  #L13be04.  v1:= 59I;
  #L13be08.  v5:= 46I;
  #L13be0c.  call temp:= `a`(v13, v4, v5) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;IC)Z` @kind static;
  #L13be12.  v5:= temp;
  #L13be14.  if v5 == 0 then goto L13c154;
  #L13be18.  v5:= v4 + 1;
  #L13be1c.  v0:= v5 + 1;
  #L13be20.  call temp:= `a`(v13, v0) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;I)I` @kind static;
  #L13be26.  v4:= temp;
  #L13be28.  v0:= v5 + 3;
  #L13be2c.  call temp:= `min`(v4, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L13be32.  v9:= temp;
  #L13be34.  call temp:= `a`(v13, v5, v9) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;II)I` @kind static;
  #L13be3a.  v0:= temp;
  #L13be3c.  v5:= v9 - v5 @kind int;
  #L13be40.  goto L13c18c;
  #L13be46.  v5:= v3;
  #L13be48.  v3:= v1;
  #L13be4a.  v1:= v4;
  #L13be4c.  v4:= v2;
  #L13be4e.  v2:= v0;
  #L13be50.  call temp:= `length`(v13) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13be56.  v0:= temp;
  #L13be58.  if v0 > v1 then goto L13bf30;
  #L13be5c.  v0:= new `java.lang.IllegalArgumentException`;
  #L13be60.  v1:= "No time zone indicator" @kind object;
  #L13be64.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13be6a.  throw v0;
  #Try_end0.  
  #L13be6c.  v0:= Exception @type ^`java.lang.IndexOutOfBoundsException` @kind object;
  #L13be6e.  v2:= v0 @kind object;
  #L13be70.  if v13 != 0 then goto L13c11e;
  #L13be74.  v0:= 0I;
  #L13be76.  call temp:= `getMessage`(v2) @signature `Ljava/lang/Exception;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L13be7c.  v1:= temp @kind object;
  #L13be7e.  if v1 == 0 then goto L13be8e;
  #L13be82.  call temp:= `isEmpty`(v1) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L13be88.  v3:= temp;
  #L13be8a.  if v3 == 0 then goto L13bed0;
  #L13be8e.  v1:= new `java.lang.StringBuilder`;
  #L13be92.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13be98.  v3:= "(" @kind object;
  #L13be9c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13bea2.  v1:= temp @kind object;
  #L13bea4.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13beaa.  v3:= temp @kind object;
  #L13beac.  call temp:= `getName`(v3) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L13beb2.  v3:= temp @kind object;
  #L13beb4.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13beba.  v1:= temp @kind object;
  #L13bebc.  v3:= ")" @kind object;
  #L13bec0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13bec6.  v1:= temp @kind object;
  #L13bec8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13bece.  v1:= temp @kind object;
  #L13bed0.  v3:= new `java.text.ParseException`;
  #L13bed4.  v4:= new `java.lang.StringBuilder`;
  #L13bed8.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13bede.  v5:= "Failed to parse date [" @kind object;
  #L13bee2.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13bee8.  v4:= temp @kind object;
  #L13beea.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13bef0.  v0:= temp @kind object;
  #L13bef2.  v4:= "]: " @kind object;
  #L13bef6.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13befc.  v0:= temp @kind object;
  #L13befe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13bf04.  v0:= temp @kind object;
  #L13bf06.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13bf0c.  v0:= temp @kind object;
  #L13bf0e.  call temp:= `getIndex`(v14) @signature `Ljava/text/ParsePosition;.getIndex:()I` @kind virtual;
  #L13bf14.  v1:= temp;
  #L13bf16.  call `<init>`(v3, v0, v1) @signature `Ljava/text/ParseException;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L13bf1c.  call temp:= `initCause`(v3, v2) @signature `Ljava/text/ParseException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L13bf22.  throw v3;
  #L13bf24.  v0:= v0 * 10;
  #L13bf28.  goto L13be46;
  #L13bf2a.  v0:= v0 * 100;
  #L13bf2e.  goto L13be46;
  #Try_start1.  
  #L13bf30.  call temp:= `charAt`(v13, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13bf36.  v0:= temp;
  #L13bf38.  v9:= 90I;
  #L13bf3c.  if v0 != v9 then goto L13bfb0;
  #L13bf40.  v0:= `@@com.b.a.b.a.a.a.a` @type ^`java.util.TimeZone` @kind object;
  #L13bf44.  v1:= v1 + 1;
  #L13bf48.  v9:= new `java.util.GregorianCalendar`;
  #L13bf4c.  call `<init>`(v9, v0) @signature `Ljava/util/GregorianCalendar;.<init>:(Ljava/util/TimeZone;)V` @kind direct;
  #L13bf52.  v0:= 0I;
  #L13bf54.  call `setLenient`(v9, v0) @signature `Ljava/util/Calendar;.setLenient:(Z)V` @kind virtual;
  #L13bf5a.  v0:= 1I;
  #L13bf5c.  call `set`(v9, v0, v6) @signature `Ljava/util/Calendar;.set:(II)V` @kind virtual;
  #L13bf62.  v0:= 2I;
  #L13bf64.  v6:= v7 + -1;
  #L13bf68.  call `set`(v9, v0, v6) @signature `Ljava/util/Calendar;.set:(II)V` @kind virtual;
  #L13bf6e.  v0:= 5I;
  #L13bf70.  call `set`(v9, v0, v8) @signature `Ljava/util/Calendar;.set:(II)V` @kind virtual;
  #L13bf76.  v0:= 11I;
  #L13bf7a.  call `set`(v9, v0, v5) @signature `Ljava/util/Calendar;.set:(II)V` @kind virtual;
  #L13bf80.  v0:= 12I;
  #L13bf84.  call `set`(v9, v0, v4) @signature `Ljava/util/Calendar;.set:(II)V` @kind virtual;
  #L13bf8a.  v0:= 13I;
  #L13bf8e.  call `set`(v9, v0, v3) @signature `Ljava/util/Calendar;.set:(II)V` @kind virtual;
  #L13bf94.  v0:= 14I;
  #L13bf98.  call `set`(v9, v0, v2) @signature `Ljava/util/Calendar;.set:(II)V` @kind virtual;
  #L13bf9e.  call `setIndex`(v14, v1) @signature `Ljava/text/ParsePosition;.setIndex:(I)V` @kind virtual;
  #L13bfa4.  call temp:= `getTime`(v9) @signature `Ljava/util/Calendar;.getTime:()Ljava/util/Date;` @kind virtual;
  #L13bfaa.  v0:= temp @kind object;
  #L13bfac.  goto L13bd78;
  #L13bfb0.  if v0 == v12 then goto L13bfb8;
  #L13bfb4.  if v0 != v10 then goto L13c0d8;
  #L13bfb8.  call temp:= `substring`(v13, v1) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L13bfbe.  v0:= temp @kind object;
  #L13bfc0.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13bfc6.  v9:= temp;
  #L13bfc8.  if v9 < v11 then goto L13bffc;
  #L13bfcc.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13bfd2.  v9:= temp;
  #L13bfd4.  v1:= v1 + v9 @kind int;
  #L13bfd6.  v9:= "+0000" @kind object;
  #L13bfda.  call temp:= `equals`(v9, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13bfe0.  v9:= temp;
  #L13bfe2.  if v9 != 0 then goto L13bff6;
  #L13bfe6.  v9:= "+00:00" @kind object;
  #L13bfea.  call temp:= `equals`(v9, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13bff0.  v9:= temp;
  #L13bff2.  if v9 == 0 then goto L13c024;
  #L13bff6.  v0:= `@@com.b.a.b.a.a.a.a` @type ^`java.util.TimeZone` @kind object;
  #L13bffa.  goto L13bf48;
  #L13bffc.  v9:= new `java.lang.StringBuilder`;
  #L13c000.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13c006.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c00c.  v0:= temp @kind object;
  #L13c00e.  v9:= "00" @kind object;
  #L13c012.  call temp:= `append`(v0, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c018.  v0:= temp @kind object;
  #L13c01a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c020.  v0:= temp @kind object;
  #L13c022.  goto L13bfcc;
  #L13c024.  v9:= new `java.lang.StringBuilder`;
  #L13c028.  call `<init>`(v9) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13c02e.  v10:= "GMT" @kind object;
  #L13c032.  call temp:= `append`(v9, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c038.  v9:= temp @kind object;
  #L13c03a.  call temp:= `append`(v9, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c040.  v0:= temp @kind object;
  #L13c042.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c048.  v9:= temp @kind object;
  #L13c04a.  call temp:= `getTimeZone`(v9) @signature `Ljava/util/TimeZone;.getTimeZone:(Ljava/lang/String;)Ljava/util/TimeZone;` @kind static;
  #L13c050.  v0:= temp @kind object;
  #L13c052.  call temp:= `getID`(v0) @signature `Ljava/util/TimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L13c058.  v10:= temp @kind object;
  #L13c05a.  call temp:= `equals`(v10, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13c060.  v11:= temp;
  #L13c062.  if v11 != 0 then goto L13bf48;
  #L13c066.  v11:= ":" @kind object;
  #L13c06a.  v12:= "" @kind object;
  #L13c06e.  call temp:= `replace`(v10, v11, v12) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L13c074.  v10:= temp @kind object;
  #L13c076.  call temp:= `equals`(v10, v9) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13c07c.  v10:= temp;
  #L13c07e.  if v10 != 0 then goto L13bf48;
  #L13c082.  v1:= new `java.lang.IndexOutOfBoundsException`;
  #L13c086.  v2:= new `java.lang.StringBuilder`;
  #L13c08a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13c090.  v3:= "Mismatching time zone indicator: " @kind object;
  #L13c094.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c09a.  v2:= temp @kind object;
  #L13c09c.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c0a2.  v2:= temp @kind object;
  #L13c0a4.  v3:= " given, resolves to " @kind object;
  #L13c0a8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c0ae.  v2:= temp @kind object;
  #L13c0b0.  call temp:= `getID`(v0) @signature `Ljava/util/TimeZone;.getID:()Ljava/lang/String;` @kind virtual;
  #L13c0b6.  v0:= temp @kind object;
  #L13c0b8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c0be.  v0:= temp @kind object;
  #L13c0c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c0c6.  v0:= temp @kind object;
  #L13c0c8.  call `<init>`(v1, v0) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c0ce.  throw v1;
  #L13c0d0.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L13c0d2.  v2:= v0 @kind object;
  #L13c0d4.  goto L13be70;
  #L13c0d8.  v1:= new `java.lang.IndexOutOfBoundsException`;
  #L13c0dc.  v2:= new `java.lang.StringBuilder`;
  #L13c0e0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13c0e6.  v3:= "Invalid time zone indicator '" @kind object;
  #L13c0ea.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c0f0.  v2:= temp @kind object;
  #L13c0f2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c0f8.  v0:= temp @kind object;
  #L13c0fa.  v2:= "'" @kind object;
  #L13c0fe.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c104.  v0:= temp @kind object;
  #L13c106.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c10c.  v0:= temp @kind object;
  #L13c10e.  call `<init>`(v1, v0) @signature `Ljava/lang/IndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c114.  throw v1;
  #Try_end1.  
  #L13c116.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L13c118.  v2:= v0 @kind object;
  #L13c11a.  goto L13be70;
  #L13c11e.  v0:= new `java.lang.StringBuilder`;
  #L13c122.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13c128.  v1:= 34I;
  #L13c12c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c132.  v0:= temp @kind object;
  #L13c134.  call temp:= `append`(v0, v13) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c13a.  v0:= temp @kind object;
  #L13c13c.  v1:= "'" @kind object;
  #L13c140.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c146.  v0:= temp @kind object;
  #L13c148.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c14e.  v0:= temp @kind object;
  #L13c150.  goto L13be76;
  #L13c154.  v5:= v3;
  #L13c156.  v3:= v1;
  #L13c158.  v1:= v4;
  #L13c15a.  v4:= v2;
  #L13c15c.  v2:= v0;
  #L13c15e.  goto L13be50;
  #L13c162.  v4:= v2;
  #L13c164.  v5:= v3;
  #L13c166.  v2:= v0;
  #L13c168.  v3:= v0;
  #L13c16a.  goto L13be50;
  #L13c16e.  v2:= v1;
  #L13c170.  goto L13bda4;
  #L13c174.  v2:= v0;
  #L13c176.  v3:= v0;
  #L13c178.  v4:= v0;
  #L13c17a.  v5:= v0;
  #L13c17c.  goto L13be50;
  #L13c180.  v2:= v1;
  #L13c182.  goto L13bd34;
  #L13c186.  v2:= v1;
  #L13c188.  goto L13bd12;
  #L13c18c.  switch v5
                  | 1 => goto L13bf2a
                  | 2 => goto L13bf24
                  | else => goto L13be46;
  catch `java.lang.IndexOutOfBoundsException` @[Try_start0..Try_end0] goto L13be6c;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L13c0d0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L13c116;
  catch `java.lang.IndexOutOfBoundsException` @[Try_start1..Try_end1] goto L13be6c;
  catch `java.lang.NumberFormatException` @[Try_start1..Try_end1] goto L13c0d0;
  catch `java.lang.IllegalArgumentException` @[Try_start1..Try_end1] goto L13c116;
}
procedure `boolean` `a`(`java.lang.String` v1 @kind object, `int` v2 , `char` v3 ) @signature `Lcom/b/a/b/a/a/a;.a:(Ljava/lang/String;IC)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L13c1cc.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13c1d2.  v0:= temp;
  #L13c1d4.  if v2 >= v0 then goto L13c1e8;
  #L13c1d8.  call temp:= `charAt`(v1, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13c1de.  v0:= temp;
  #L13c1e0.  if v0 != v3 then goto L13c1e8;
  #L13c1e4.  v0:= 1I;
  #L13c1e6.  return v0;
  #L13c1e8.  v0:= 0I;
  #L13c1ea.  goto L13c1e6;
}
