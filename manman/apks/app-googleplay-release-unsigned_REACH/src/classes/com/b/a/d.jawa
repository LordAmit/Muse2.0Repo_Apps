record `com.b.a.d` @kind class @AccessFlag PUBLIC_ABSTRACT_ENUM extends `java.lang.Enum` @kind class, `com.b.a.e` @kind interface {
}
global `com.b.a.d` `@@com.b.a.d.a` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.b.a.d` `@@com.b.a.d.b` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.b.a.d` `@@com.b.a.d.c` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.b.a.d` `@@com.b.a.d.d` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.b.a.d` `@@com.b.a.d.e` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.b.a.d`[] `@@com.b.a.d.f` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lcom/b/a/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L147080.  v6:= 4I;
  #L147082.  v5:= 3I;
  #L147084.  v4:= 2I;
  #L147086.  v3:= 1I;
  #L147088.  v2:= 0I;
  #L14708a.  v0:= new `com.b.a.d$1`;
  #L14708e.  v1:= "IDENTITY" @kind object;
  #L147092.  call `<init>`(v0, v1, v2) @signature `Lcom/b/a/d$1;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L147098.  `@@com.b.a.d.a` @type ^`com.b.a.d` := v0 @kind object;
  #L14709c.  v0:= new `com.b.a.d$2`;
  #L1470a0.  v1:= "UPPER_CAMEL_CASE" @kind object;
  #L1470a4.  call `<init>`(v0, v1, v3) @signature `Lcom/b/a/d$2;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1470aa.  `@@com.b.a.d.b` @type ^`com.b.a.d` := v0 @kind object;
  #L1470ae.  v0:= new `com.b.a.d$3`;
  #L1470b2.  v1:= "UPPER_CAMEL_CASE_WITH_SPACES" @kind object;
  #L1470b6.  call `<init>`(v0, v1, v4) @signature `Lcom/b/a/d$3;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1470bc.  `@@com.b.a.d.c` @type ^`com.b.a.d` := v0 @kind object;
  #L1470c0.  v0:= new `com.b.a.d$4`;
  #L1470c4.  v1:= "LOWER_CASE_WITH_UNDERSCORES" @kind object;
  #L1470c8.  call `<init>`(v0, v1, v5) @signature `Lcom/b/a/d$4;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1470ce.  `@@com.b.a.d.d` @type ^`com.b.a.d` := v0 @kind object;
  #L1470d2.  v0:= new `com.b.a.d$5`;
  #L1470d6.  v1:= "LOWER_CASE_WITH_DASHES" @kind object;
  #L1470da.  call `<init>`(v0, v1, v6) @signature `Lcom/b/a/d$5;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1470e0.  `@@com.b.a.d.e` @type ^`com.b.a.d` := v0 @kind object;
  #L1470e4.  v0:= 5I;
  #L1470e6.  v0:= new `com.b.a.d`[v0];
  #L1470ea.  v1:= `@@com.b.a.d.a` @type ^`com.b.a.d` @kind object;
  #L1470ee.  v0[v2]:= v1 @kind object;
  #L1470f2.  v1:= `@@com.b.a.d.b` @type ^`com.b.a.d` @kind object;
  #L1470f6.  v0[v3]:= v1 @kind object;
  #L1470fa.  v1:= `@@com.b.a.d.c` @type ^`com.b.a.d` @kind object;
  #L1470fe.  v0[v4]:= v1 @kind object;
  #L147102.  v1:= `@@com.b.a.d.d` @type ^`com.b.a.d` @kind object;
  #L147106.  v0[v5]:= v1 @kind object;
  #L14710a.  v1:= `@@com.b.a.d.e` @type ^`com.b.a.d` @kind object;
  #L14710e.  v0[v6]:= v1 @kind object;
  #L147112.  `@@com.b.a.d.f` @type ^`com.b.a.d`[] := v0 @kind object;
  #L147116.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.d` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lcom/b/a/d;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L147128.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L14712e.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.d` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `com.b.a.d$1` v3 @kind object) @signature `Lcom/b/a/d;.<init>:(Ljava/lang/String;ILcom/b/a/d$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L147140.  call `<init>`(v0, v1, v2) @signature `Lcom/b/a/d;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L147146.  return @kind void;
}
procedure `java.lang.String` `a`(`char` v2 , `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/b/a/d;.a:(CLjava/lang/String;I)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L147158.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L14715e.  v0:= temp;
  #L147160.  if v4 >= v0 then goto L147190;
  #L147164.  v0:= new `java.lang.StringBuilder`;
  #L147168.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14716e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L147174.  v0:= temp @kind object;
  #L147176.  call temp:= `substring`(v3, v4) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L14717c.  v1:= temp @kind object;
  #L14717e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147184.  v0:= temp @kind object;
  #L147186.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14718c.  v0:= temp @kind object;
  #L14718e.  return v0 @kind object;
  #L147190.  call temp:= `valueOf`(v2) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L147196.  v0:= temp @kind object;
  #L147198.  goto L14718e;
}
procedure `java.lang.String` `a`(`java.lang.String` v4 @kind object) @signature `Lcom/b/a/d;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1471ac.  v2:= new `java.lang.StringBuilder`;
  #L1471b0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1471b6.  v1:= 0I;
  #L1471b8.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1471be.  v0:= temp;
  #L1471c0.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1471c6.  v3:= temp;
  #L1471c8.  v3:= v3 + -1;
  #L1471cc.  if v1 >= v3 then goto L1471dc;
  #L1471d0.  call temp:= `isLetter`(v0) @signature `Ljava/lang/Character;.isLetter:(C)Z` @kind static;
  #L1471d6.  v3:= temp;
  #L1471d8.  if v3 == 0 then goto L1471f2;
  #L1471dc.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1471e2.  v3:= temp;
  #L1471e4.  if v1 != v3 then goto L147206;
  #L1471e8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1471ee.  v4:= temp @kind object;
  #L1471f0.  return v4 @kind object;
  #L1471f2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1471f8.  v1:= v1 + 1;
  #L1471fc.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L147202.  v0:= temp;
  #L147204.  goto L1471c0;
  #L147206.  call temp:= `isUpperCase`(v0) @signature `Ljava/lang/Character;.isUpperCase:(C)Z` @kind static;
  #L14720c.  v3:= temp;
  #L14720e.  if v3 != 0 then goto L1471f0;
  #L147212.  call temp:= `toUpperCase`(v0) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L147218.  v0:= temp;
  #L14721a.  v1:= v1 + 1;
  #L14721e.  call temp:= `a`(v0, v4, v1) @signature `Lcom/b/a/d;.a:(CLjava/lang/String;I)Ljava/lang/String;` @kind static;
  #L147224.  v0:= temp @kind object;
  #L147226.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14722c.  v0:= temp @kind object;
  #L14722e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L147234.  v4:= temp @kind object;
  #L147236.  goto L1471f0;
}
procedure `java.lang.String` `a`(`java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/b/a/d;.a:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L147248.  v1:= new `java.lang.StringBuilder`;
  #L14724c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L147252.  v0:= 0I;
  #L147254.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L14725a.  v2:= temp;
  #L14725c.  if v0 >= v2 then goto L147292;
  #L147260.  call temp:= `charAt`(v4, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L147266.  v2:= temp;
  #L147268.  call temp:= `isUpperCase`(v2) @signature `Ljava/lang/Character;.isUpperCase:(C)Z` @kind static;
  #L14726e.  v3:= temp;
  #L147270.  if v3 == 0 then goto L147286;
  #L147274.  call temp:= `length`(v1) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L14727a.  v3:= temp;
  #L14727c.  if v3 == 0 then goto L147286;
  #L147280.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147286.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14728c.  v0:= v0 + 1;
  #L147290.  goto L147254;
  #L147292.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L147298.  v0:= temp @kind object;
  #L14729a.  return v0 @kind object;
}
procedure `com.b.a.d` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lcom/b/a/d;.valueOf:(Ljava/lang/String;)Lcom/b/a/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1472ac.  v0:= constclass @type ^`com.b.a.d` @kind object;
  #L1472b0.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L1472b6.  v0:= temp @kind object;
  #L1472b8.  v0:= (`com.b.a.d`) v0 @kind object;
  #L1472bc.  return v0 @kind object;
}
procedure `com.b.a.d`[] `values`() @signature `Lcom/b/a/d;.values:()[Lcom/b/a/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1472d0.  v0:= `@@com.b.a.d.f` @type ^`com.b.a.d`[] @kind object;
  #L1472d4.  call temp:= `clone`(v0) @signature `[Lcom/b/a/d;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1472da.  v0:= temp @kind object;
  #L1472dc.  v0:= (`com.b.a.d`[]) v0 @kind object;
  #L1472e0.  return v0 @kind object;
}
