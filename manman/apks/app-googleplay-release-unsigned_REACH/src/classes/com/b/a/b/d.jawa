record `com.b.a.b.d` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.w` @kind interface, `java.lang.Cloneable` @kind interface {
  `double` `com.b.a.b.d.b` @AccessFlag PRIVATE;
  `int` `com.b.a.b.d.c` @AccessFlag PRIVATE;
  `boolean` `com.b.a.b.d.d` @AccessFlag PRIVATE;
  `boolean` `com.b.a.b.d.e` @AccessFlag PRIVATE;
  `java.util.List` `com.b.a.b.d.f` @AccessFlag PRIVATE;
  `java.util.List` `com.b.a.b.d.g` @AccessFlag PRIVATE;
}
global `com.b.a.b.d` `@@com.b.a.b.d.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1455fc.  v0:= new `com.b.a.b.d`;
  #L145600.  call `<init>`(v0) @signature `Lcom/b/a/b/d;.<init>:()V` @kind direct;
  #L145606.  `@@com.b.a.b.d.a` @type ^`com.b.a.b.d` := v0 @kind object;
  #L14560a.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.b.d` v2 @kind this) @signature `Lcom/b/a/b/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L14561c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L145622.  v0:= -1.0D;
  #L145626.  v2.`com.b.a.b.d.b` @type ^`double` := v0 @kind wide;
  #L14562a.  v0:= 136I;
  #L14562e.  v2.`com.b.a.b.d.c` @type ^`int` := v0;
  #L145632.  v0:= 1I;
  #L145634.  v2.`com.b.a.b.d.d` @type ^`boolean` := v0 @kind boolean;
  #L145638.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L14563e.  v0:= temp @kind object;
  #L145640.  v2.`com.b.a.b.d.f` @type ^`java.util.List` := v0 @kind object;
  #L145644.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L14564a.  v0:= temp @kind object;
  #L14564c.  v2.`com.b.a.b.d.g` @type ^`java.util.List` := v0 @kind object;
  #L145650.  return @kind void;
}
procedure `boolean` `a`(`com.b.a.b.d` v4 @kind this, `com.b.a.a.d` v5 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L145664.  if v5 == 0 then goto L145680;
  #L145668.  call temp:= `a`(v5) @signature `Lcom/b/a/a/d;.a:()D` @kind interface;
  #L14566e.  v0:= temp @kind wide;
  #L145670.  v2:= v4.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L145674.  v0:= dcmpl(v0, v2);
  #L145678.  if v0 <= 0 then goto L145680;
  #L14567c.  v0:= 0I;
  #L14567e.  return v0;
  #L145680.  v0:= 1I;
  #L145682.  goto L14567e;
}
procedure `boolean` `a`(`com.b.a.b.d` v1 @kind this, `com.b.a.a.d` v2 @kind object, `com.b.a.a.e` v3 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;Lcom/b/a/a/e;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L145694.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;)Z` @kind direct;
  #L14569a.  v0:= temp;
  #L14569c.  if v0 == 0 then goto L1456b0;
  #L1456a0.  call temp:= `a`(v1, v3) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/e;)Z` @kind direct;
  #L1456a6.  v0:= temp;
  #L1456a8.  if v0 == 0 then goto L1456b0;
  #L1456ac.  v0:= 1I;
  #L1456ae.  return v0;
  #L1456b0.  v0:= 0I;
  #L1456b2.  goto L1456ae;
}
procedure `boolean` `a`(`com.b.a.b.d` v4 @kind this, `com.b.a.a.e` v5 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/e;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1456c4.  if v5 == 0 then goto L1456e0;
  #L1456c8.  call temp:= `a`(v5) @signature `Lcom/b/a/a/e;.a:()D` @kind interface;
  #L1456ce.  v0:= temp @kind wide;
  #L1456d0.  v2:= v4.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L1456d4.  v0:= dcmpg(v0, v2);
  #L1456d8.  if v0 > 0 then goto L1456e0;
  #L1456dc.  v0:= 0I;
  #L1456de.  return v0;
  #L1456e0.  v0:= 1I;
  #L1456e2.  goto L1456de;
}
procedure `boolean` `a`(`com.b.a.b.d` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1456f4.  v0:= constclass @type ^`java.lang.Enum` @kind object;
  #L1456f8.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1456fe.  v0:= temp;
  #L145700.  if v0 != 0 then goto L145720;
  #L145704.  call temp:= `isAnonymousClass`(v2) @signature `Ljava/lang/Class;.isAnonymousClass:()Z` @kind virtual;
  #L14570a.  v0:= temp;
  #L14570c.  if v0 != 0 then goto L14571c;
  #L145710.  call temp:= `isLocalClass`(v2) @signature `Ljava/lang/Class;.isLocalClass:()Z` @kind virtual;
  #L145716.  v0:= temp;
  #L145718.  if v0 == 0 then goto L145720;
  #L14571c.  v0:= 1I;
  #L14571e.  return v0;
  #L145720.  v0:= 0I;
  #L145722.  goto L14571e;
}
procedure `boolean` `b`(`com.b.a.b.d` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/b/a/b/d;.b:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L145734.  call temp:= `isMemberClass`(v2) @signature `Ljava/lang/Class;.isMemberClass:()Z` @kind virtual;
  #L14573a.  v0:= temp;
  #L14573c.  if v0 == 0 then goto L145750;
  #L145740.  call temp:= `c`(v1, v2) @signature `Lcom/b/a/b/d;.c:(Ljava/lang/Class;)Z` @kind direct;
  #L145746.  v0:= temp;
  #L145748.  if v0 != 0 then goto L145750;
  #L14574c.  v0:= 1I;
  #L14574e.  return v0;
  #L145750.  v0:= 0I;
  #L145752.  goto L14574e;
}
procedure `boolean` `c`(`com.b.a.b.d` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/b/a/b/d;.c:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L145764.  call temp:= `getModifiers`(v2) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L14576a.  v0:= temp;
  #L14576c.  v0:= v0 ^& 8;
  #L145770.  if v0 == 0 then goto L145778;
  #L145774.  v0:= 1I;
  #L145776.  return v0;
  #L145778.  v0:= 0I;
  #L14577a.  goto L145776;
}
procedure `com.b.a.b.d` `a`(`com.b.a.b.d` v2 @kind this) @signature `Lcom/b/a/b/d;.a:()Lcom/b/a/b/d;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L14578c.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L145792.  v0:= temp @kind object;
  #L145794.  v0:= (`com.b.a.b.d`) v0 @kind object;
  #Try_end0.  
  #L145798.  return v0 @kind object;
  #L14579a.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L14579c.  v1:= new `java.lang.AssertionError`;
  #L1457a0.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1457a6.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[Try_start0..Try_end0] goto L14579a;
}
procedure `com.b.a.v` `a`(`com.b.a.b.d` v6 @kind this, `com.b.a.f` v7 @kind object, `com.b.a.c.a` v8 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/f;Lcom/b/a/c/a;)Lcom/b/a/v;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1457c8.  call temp:= `a`(v8) @signature `Lcom/b/a/c/a;.a:()Ljava/lang/Class;` @kind virtual;
  #L1457ce.  v0:= temp @kind object;
  #L1457d0.  v1:= 1I;
  #L1457d2.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;Z)Z` @kind virtual;
  #L1457d8.  v3:= temp;
  #L1457da.  v1:= 0I;
  #L1457dc.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;Z)Z` @kind virtual;
  #L1457e2.  v2:= temp;
  #L1457e4.  if v3 != 0 then goto L1457f0;
  #L1457e8.  if v2 != 0 then goto L1457f0;
  #L1457ec.  v0:= 0I;
  #L1457ee.  return v0 @kind object;
  #L1457f0.  v0:= new `com.b.a.b.d$1`;
  #L1457f4.  v1:= v6 @kind object;
  #L1457f6.  v4:= v7 @kind object;
  #L1457f8.  v5:= v8 @kind object;
  #L1457fa.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/b/a/b/d$1;.<init>:(Lcom/b/a/b/d;ZZLcom/b/a/f;Lcom/b/a/c/a;)V` @kind direct;
  #L145800.  goto L1457ee;
}
procedure `boolean` `a`(`com.b.a.b.d` v6 @kind this, `java.lang.Class` v7 @kind object, `boolean` v8 ) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L145814.  v2:= 1I;
  #L145816.  v0:= v6.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L14581a.  v4:= -1.0D;
  #L14581e.  v0:= dcmpl(v0, v4);
  #L145822.  if v0 == 0 then goto L145856;
  #L145826.  v0:= constclass @type ^`com.b.a.a.d` @kind object;
  #L14582a.  call temp:= `getAnnotation`(v7, v0) @signature `Ljava/lang/Class;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L145830.  v0:= temp @kind object;
  #L145832.  v0:= (`com.b.a.a.d`) v0 @kind object;
  #L145836.  v1:= constclass @type ^`com.b.a.a.e` @kind object;
  #L14583a.  call temp:= `getAnnotation`(v7, v1) @signature `Ljava/lang/Class;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L145840.  v1:= temp @kind object;
  #L145842.  v1:= (`com.b.a.a.e`) v1 @kind object;
  #L145846.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;Lcom/b/a/a/e;)Z` @kind direct;
  #L14584c.  v0:= temp;
  #L14584e.  if v0 != 0 then goto L145856;
  #L145852.  v0:= v2;
  #L145854.  return v0;
  #L145856.  v0:= v6.`com.b.a.b.d.d` @type ^`boolean` @kind boolean;
  #L14585a.  if v0 != 0 then goto L14586e;
  #L14585e.  call temp:= `b`(v6, v7) @signature `Lcom/b/a/b/d;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L145864.  v0:= temp;
  #L145866.  if v0 == 0 then goto L14586e;
  #L14586a.  v0:= v2;
  #L14586c.  goto L145854;
  #L14586e.  call temp:= `a`(v6, v7) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;)Z` @kind direct;
  #L145874.  v0:= temp;
  #L145876.  if v0 == 0 then goto L14587e;
  #L14587a.  v0:= v2;
  #L14587c.  goto L145854;
  #L14587e.  if v8 == 0 then goto L1458b6;
  #L145882.  v0:= v6.`com.b.a.b.d.f` @type ^`java.util.List` @kind object;
  #L145886.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L14588c.  v1:= temp @kind object;
  #L14588e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L145894.  v0:= temp;
  #L145896.  if v0 == 0 then goto L1458bc;
  #L14589a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1458a0.  v0:= temp @kind object;
  #L1458a2.  v0:= (`com.b.a.b`) v0 @kind object;
  #L1458a6.  call temp:= `a`(v0, v7) @signature `Lcom/b/a/b;.a:(Ljava/lang/Class;)Z` @kind interface;
  #L1458ac.  v0:= temp;
  #L1458ae.  if v0 == 0 then goto L14588e;
  #L1458b2.  v0:= v2;
  #L1458b4.  goto L145854;
  #L1458b6.  v0:= v6.`com.b.a.b.d.g` @type ^`java.util.List` @kind object;
  #L1458ba.  goto L145886;
  #L1458bc.  v0:= 0I;
  #L1458be.  goto L145854;
}
procedure `boolean` `a`(`com.b.a.b.d` v6 @kind this, `java.lang.reflect.Field` v7 @kind object, `boolean` v8 ) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/reflect/Field;Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1458d0.  v2:= 1I;
  #L1458d2.  v0:= v6.`com.b.a.b.d.c` @type ^`int`;
  #L1458d6.  call temp:= `getModifiers`(v7) @signature `Ljava/lang/reflect/Field;.getModifiers:()I` @kind virtual;
  #L1458dc.  v1:= temp;
  #L1458de.  v0:= v0 ^& v1 @kind int;
  #L1458e0.  if v0 == 0 then goto L1458e8;
  #L1458e4.  v0:= v2;
  #L1458e6.  return v0;
  #L1458e8.  v0:= v6.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L1458ec.  v4:= -1.0D;
  #L1458f0.  v0:= dcmpl(v0, v4);
  #L1458f4.  if v0 == 0 then goto L145928;
  #L1458f8.  v0:= constclass @type ^`com.b.a.a.d` @kind object;
  #L1458fc.  call temp:= `getAnnotation`(v7, v0) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L145902.  v0:= temp @kind object;
  #L145904.  v0:= (`com.b.a.a.d`) v0 @kind object;
  #L145908.  v1:= constclass @type ^`com.b.a.a.e` @kind object;
  #L14590c.  call temp:= `getAnnotation`(v7, v1) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L145912.  v1:= temp @kind object;
  #L145914.  v1:= (`com.b.a.a.e`) v1 @kind object;
  #L145918.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;Lcom/b/a/a/e;)Z` @kind direct;
  #L14591e.  v0:= temp;
  #L145920.  if v0 != 0 then goto L145928;
  #L145924.  v0:= v2;
  #L145926.  goto L1458e6;
  #L145928.  call temp:= `isSynthetic`(v7) @signature `Ljava/lang/reflect/Field;.isSynthetic:()Z` @kind virtual;
  #L14592e.  v0:= temp;
  #L145930.  if v0 == 0 then goto L145938;
  #L145934.  v0:= v2;
  #L145936.  goto L1458e6;
  #L145938.  v0:= v6.`com.b.a.b.d.e` @type ^`boolean` @kind boolean;
  #L14593c.  if v0 == 0 then goto L145974;
  #L145940.  v0:= constclass @type ^`com.b.a.a.a` @kind object;
  #L145944.  call temp:= `getAnnotation`(v7, v0) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L14594a.  v0:= temp @kind object;
  #L14594c.  v0:= (`com.b.a.a.a`) v0 @kind object;
  #L145950.  if v0 == 0 then goto L145964;
  #L145954.  if v8 == 0 then goto L145968;
  #L145958.  call temp:= `a`(v0) @signature `Lcom/b/a/a/a;.a:()Z` @kind interface;
  #L14595e.  v0:= temp;
  #L145960.  if v0 != 0 then goto L145974;
  #L145964.  v0:= v2;
  #L145966.  goto L1458e6;
  #L145968.  call temp:= `b`(v0) @signature `Lcom/b/a/a/a;.b:()Z` @kind interface;
  #L14596e.  v0:= temp;
  #L145970.  if v0 == 0 then goto L145964;
  #L145974.  v0:= v6.`com.b.a.b.d.d` @type ^`boolean` @kind boolean;
  #L145978.  if v0 != 0 then goto L145994;
  #L14597c.  call temp:= `getType`(v7) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L145982.  v0:= temp @kind object;
  #L145984.  call temp:= `b`(v6, v0) @signature `Lcom/b/a/b/d;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L14598a.  v0:= temp;
  #L14598c.  if v0 == 0 then goto L145994;
  #L145990.  v0:= v2;
  #L145992.  goto L1458e6;
  #L145994.  call temp:= `getType`(v7) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L14599a.  v0:= temp @kind object;
  #L14599c.  call temp:= `a`(v6, v0) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;)Z` @kind direct;
  #L1459a2.  v0:= temp;
  #L1459a4.  if v0 == 0 then goto L1459ac;
  #L1459a8.  v0:= v2;
  #L1459aa.  goto L1458e6;
  #L1459ac.  if v8 == 0 then goto L1459fc;
  #L1459b0.  v0:= v6.`com.b.a.b.d.f` @type ^`java.util.List` @kind object;
  #L1459b4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1459ba.  v1:= temp;
  #L1459bc.  if v1 != 0 then goto L145a02;
  #L1459c0.  v1:= new `com.b.a.c`;
  #L1459c4.  call `<init>`(v1, v7) @signature `Lcom/b/a/c;.<init>:(Ljava/lang/reflect/Field;)V` @kind direct;
  #L1459ca.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1459d0.  v3:= temp @kind object;
  #L1459d2.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1459d8.  v0:= temp;
  #L1459da.  if v0 == 0 then goto L145a02;
  #L1459de.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1459e4.  v0:= temp @kind object;
  #L1459e6.  v0:= (`com.b.a.b`) v0 @kind object;
  #L1459ea.  call temp:= `a`(v0, v1) @signature `Lcom/b/a/b;.a:(Lcom/b/a/c;)Z` @kind interface;
  #L1459f0.  v0:= temp;
  #L1459f2.  if v0 == 0 then goto L1459d2;
  #L1459f6.  v0:= v2;
  #L1459f8.  goto L1458e6;
  #L1459fc.  v0:= v6.`com.b.a.b.d.g` @type ^`java.util.List` @kind object;
  #L145a00.  goto L1459b4;
  #L145a02.  v0:= 0I;
  #L145a04.  goto L1458e6;
}
procedure `java.lang.Object` `clone`(`com.b.a.b.d` v1 @kind this) @signature `Lcom/b/a/b/d;.clone:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L145a18.  call temp:= `a`(v1) @signature `Lcom/b/a/b/d;.a:()Lcom/b/a/b/d;` @kind virtual;
  #L145a1e.  v0:= temp @kind object;
  #L145a20.  return v0 @kind object;
}
