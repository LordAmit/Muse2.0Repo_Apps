record `com.b.a.b.g$a` @kind class @AccessFlag  extends `java.util.AbstractSet` @kind class {
  `com.b.a.b.g` `com.b.a.b.g$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.b.a.b.g$a` v0 @kind this, `com.b.a.b.g` v1 @kind object) @signature `Lcom/b/a/b/g$a;.<init>:(Lcom/b/a/b/g;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L145d94.  v0.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` := v1 @kind object;
  #L145d98.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L145d9e.  return @kind void;
}
procedure `void` `clear`(`com.b.a.b.g$a` v1 @kind this) @signature `Lcom/b/a/b/g$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145db0.  v0:= v1.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` @kind object;
  #L145db4.  call `clear`(v0) @signature `Lcom/b/a/b/g;.clear:()V` @kind virtual;
  #L145dba.  return @kind void;
}
procedure `boolean` `contains`(`com.b.a.b.g$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g$a;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145dcc.  v0:= instanceof @variable v2 @type ^`java.util.Map$Entry` @kind boolean;
  #L145dd0.  if v0 == 0 then goto L145dec;
  #L145dd4.  v0:= v1.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` @kind object;
  #L145dd8.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L145ddc.  call temp:= `a`(v0, v2) @signature `Lcom/b/a/b/g;.a:(Ljava/util/Map$Entry;)Lcom/b/a/b/g$d;` @kind virtual;
  #L145de2.  v0:= temp @kind object;
  #L145de4.  if v0 == 0 then goto L145dec;
  #L145de8.  v0:= 1I;
  #L145dea.  return v0;
  #L145dec.  v0:= 0I;
  #L145dee.  goto L145dea;
}
procedure `java.util.Iterator` `iterator`(`com.b.a.b.g$a` v1 @kind this) @signature `Lcom/b/a/b/g$a;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145e00.  v0:= new `com.b.a.b.g$a$1`;
  #L145e04.  call `<init>`(v0, v1) @signature `Lcom/b/a/b/g$a$1;.<init>:(Lcom/b/a/b/g$a;)V` @kind direct;
  #L145e0a.  return v0 @kind object;
}
procedure `boolean` `remove`(`com.b.a.b.g$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/b/a/b/g$a;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L145e1c.  v1:= 1I;
  #L145e1e.  v0:= 0I;
  #L145e20.  v2:= instanceof @variable v4 @type ^`java.util.Map$Entry` @kind boolean;
  #L145e24.  if v2 != 0 then goto L145e2a;
  #L145e28.  return v0;
  #L145e2a.  v2:= v3.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` @kind object;
  #L145e2e.  v4:= (`java.util.Map$Entry`) v4 @kind object;
  #L145e32.  call temp:= `a`(v2, v4) @signature `Lcom/b/a/b/g;.a:(Ljava/util/Map$Entry;)Lcom/b/a/b/g$d;` @kind virtual;
  #L145e38.  v2:= temp @kind object;
  #L145e3a.  if v2 == 0 then goto L145e28;
  #L145e3e.  v0:= v3.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` @kind object;
  #L145e42.  call `a`(v0, v2, v1) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Z)V` @kind virtual;
  #L145e48.  v0:= v1;
  #L145e4a.  goto L145e28;
}
procedure `int` `size`(`com.b.a.b.g$a` v1 @kind this) @signature `Lcom/b/a/b/g$a;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145e5c.  v0:= v1.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` @kind object;
  #L145e60.  v0:= v0.`com.b.a.b.g.c` @type ^`int`;
  #L145e64.  return v0;
}
