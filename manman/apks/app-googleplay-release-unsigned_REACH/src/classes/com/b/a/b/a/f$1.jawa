record `com.b.a.b.a.f$1` @kind class @AccessFlag FINAL extends `java.io.Writer` @kind class {
}
procedure `void` `<init>`(`com.b.a.b.a.f$1` v0 @kind this) @signature `Lcom/b/a/b/a/f$1;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L13f550.  call `<init>`(v0) @signature `Ljava/io/Writer;.<init>:()V` @kind direct;
  #L13f556.  return @kind void;
}
procedure `void` `close`(`com.b.a.b.a.f$1` v1 @kind this) @signature `Lcom/b/a/b/a/f$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13f568.  v0:= new `java.lang.AssertionError`;
  #L13f56c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L13f572.  throw v0;
}
procedure `void` `flush`(`com.b.a.b.a.f$1` v1 @kind this) @signature `Lcom/b/a/b/a/f$1;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13f584.  v0:= new `java.lang.AssertionError`;
  #L13f588.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L13f58e.  throw v0;
}
procedure `void` `write`(`com.b.a.b.a.f$1` v1 @kind this, `char`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lcom/b/a/b/a/f$1;.write:([CII)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13f5a0.  v0:= new `java.lang.AssertionError`;
  #L13f5a4.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L13f5aa.  throw v0;
}
