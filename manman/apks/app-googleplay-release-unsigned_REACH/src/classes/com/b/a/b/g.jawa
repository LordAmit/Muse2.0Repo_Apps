record `com.b.a.b.g` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.AbstractMap` @kind class, `java.io.Serializable` @kind interface {
  `java.util.Comparator` `com.b.a.b.g.a` @AccessFlag ;
  `com.b.a.b.g$d` `com.b.a.b.g.b` @AccessFlag ;
  `int` `com.b.a.b.g.c` @AccessFlag ;
  `int` `com.b.a.b.g.d` @AccessFlag ;
  `com.b.a.b.g$d` `com.b.a.b.g.e` @AccessFlag FINAL;
  `com.b.a.b.g$a` `com.b.a.b.g.h` @AccessFlag PRIVATE;
  `com.b.a.b.g$b` `com.b.a.b.g.i` @AccessFlag PRIVATE;
}
global `boolean` `@@com.b.a.b.g.f` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.Comparator` `@@com.b.a.b.g.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L146170.  v0:= constclass @type ^`com.b.a.b.g` @kind object;
  #L146174.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L14617a.  v0:= temp;
  #L14617c.  if v0 != 0 then goto L146196;
  #L146180.  v0:= 1I;
  #L146182.  `@@com.b.a.b.g.f` @type ^`boolean` := v0 @kind boolean;
  #L146186.  v0:= new `com.b.a.b.g$1`;
  #L14618a.  call `<init>`(v0) @signature `Lcom/b/a/b/g$1;.<init>:()V` @kind direct;
  #L146190.  `@@com.b.a.b.g.g` @type ^`java.util.Comparator` := v0 @kind object;
  #L146194.  return @kind void;
  #L146196.  v0:= 0I;
  #L146198.  goto L146182;
}
procedure `void` `<init>`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1461ac.  v0:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L1461b0.  call `<init>`(v1, v0) @signature `Lcom/b/a/b/g;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L1461b6.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.b.g` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lcom/b/a/b/g;.<init>:(Ljava/util/Comparator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1461c8.  v0:= 0I;
  #L1461ca.  call `<init>`(v1) @signature `Ljava/util/AbstractMap;.<init>:()V` @kind direct;
  #L1461d0.  v1.`com.b.a.b.g.c` @type ^`int` := v0;
  #L1461d4.  v1.`com.b.a.b.g.d` @type ^`int` := v0;
  #L1461d8.  v0:= new `com.b.a.b.g$d`;
  #L1461dc.  call `<init>`(v0) @signature `Lcom/b/a/b/g$d;.<init>:()V` @kind direct;
  #L1461e2.  v1.`com.b.a.b.g.e` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L1461e6.  if v2 == 0 then goto L1461f0;
  #L1461ea.  v1.`com.b.a.b.g.a` @type ^`java.util.Comparator` := v2 @kind object;
  #L1461ee.  return @kind void;
  #L1461f0.  v2:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L1461f4.  goto L1461ea;
}
procedure `void` `a`(`com.b.a.b.g` v6 @kind this, `com.b.a.b.g$d` v7 @kind object) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L146208.  v1:= 0I;
  #L14620a.  v0:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L14620e.  v3:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L146212.  v4:= v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L146216.  v5:= v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L14621a.  v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L14621e.  if v4 == 0 then goto L146226;
  #L146222.  v4.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L146226.  call `a`(v6, v7, v3) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L14622c.  v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L146230.  v7.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L146234.  if v0 == 0 then goto L146274;
  #L146238.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L14623c.  v2:= v0;
  #L14623e.  if v4 == 0 then goto L146278;
  #L146242.  v0:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L146246.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L14624c.  v0:= temp;
  #L14624e.  v0:= v0 + 1;
  #L146252.  v7.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L146256.  v0:= v7.`com.b.a.b.g$d.h` @type ^`int`;
  #L14625a.  if v5 == 0 then goto L146262;
  #L14625e.  v1:= v5.`com.b.a.b.g$d.h` @type ^`int`;
  #L146262.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L146268.  v0:= temp;
  #L14626a.  v0:= v0 + 1;
  #L14626e.  v3.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L146272.  return @kind void;
  #L146274.  v2:= v1;
  #L146276.  goto L14623e;
  #L146278.  v0:= v1;
  #L14627a.  goto L146246;
}
procedure `void` `a`(`com.b.a.b.g` v2 @kind this, `com.b.a.b.g$d` v3 @kind object, `com.b.a.b.g$d` v4 @kind object) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L14628c.  v0:= v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` @kind object;
  #L146290.  v1:= 0I;
  #L146292.  v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v1 @kind object;
  #L146296.  if v4 == 0 then goto L14629e;
  #L14629a.  v4.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L14629e.  if v0 == 0 then goto L1462d2;
  #L1462a2.  v1:= v0.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L1462a6.  if v1 != v3 then goto L1462b0;
  #L1462aa.  v0.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L1462ae.  return @kind void;
  #L1462b0.  v1:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L1462b4.  if v1 != 0 then goto L1462cc;
  #L1462b8.  v1:= v0.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L1462bc.  if v1 == v3 then goto L1462cc;
  #L1462c0.  v0:= new `java.lang.AssertionError`;
  #L1462c4.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1462ca.  throw v0;
  #L1462cc.  v0.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L1462d0.  goto L1462ae;
  #L1462d2.  v2.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L1462d6.  goto L1462ae;
}
procedure `boolean` `a`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1462e8.  if v2 == v3 then goto L1462fc;
  #L1462ec.  if v2 == 0 then goto L146300;
  #L1462f0.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1462f6.  v0:= temp;
  #L1462f8.  if v0 == 0 then goto L146300;
  #L1462fc.  v0:= 1I;
  #L1462fe.  return v0;
  #L146300.  v0:= 0I;
  #L146302.  goto L1462fe;
}
procedure `void` `b`(`com.b.a.b.g` v6 @kind this, `com.b.a.b.g$d` v7 @kind object) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L146314.  v1:= 0I;
  #L146316.  v3:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L14631a.  v0:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L14631e.  v4:= v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L146322.  v5:= v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L146326.  v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L14632a.  if v5 == 0 then goto L146332;
  #L14632e.  v5.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L146332.  call `a`(v6, v7, v3) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L146338.  v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L14633c.  v7.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L146340.  if v0 == 0 then goto L146380;
  #L146344.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L146348.  v2:= v0;
  #L14634a.  if v5 == 0 then goto L146384;
  #L14634e.  v0:= v5.`com.b.a.b.g$d.h` @type ^`int`;
  #L146352.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L146358.  v0:= temp;
  #L14635a.  v0:= v0 + 1;
  #L14635e.  v7.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L146362.  v0:= v7.`com.b.a.b.g$d.h` @type ^`int`;
  #L146366.  if v4 == 0 then goto L14636e;
  #L14636a.  v1:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L14636e.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L146374.  v0:= temp;
  #L146376.  v0:= v0 + 1;
  #L14637a.  v3.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L14637e.  return @kind void;
  #L146380.  v2:= v1;
  #L146382.  goto L14634a;
  #L146384.  v0:= v1;
  #L146386.  goto L146352;
}
procedure `void` `b`(`com.b.a.b.g` v9 @kind this, `com.b.a.b.g$d` v10 @kind object, `boolean` v11 ) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L146398.  v8:= 1I;
  #L14639a.  v7:= -1I;
  #L14639c.  v1:= 0I;
  #L14639e.  if v10 == 0 then goto L1463f8;
  #L1463a2.  v3:= v10.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L1463a6.  v4:= v10.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L1463aa.  if v3 == 0 then goto L1463fa;
  #L1463ae.  v0:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L1463b2.  v2:= v0;
  #L1463b4.  if v4 == 0 then goto L1463fe;
  #L1463b8.  v0:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L1463bc.  v5:= v2 - v0 @kind int;
  #L1463c0.  v6:= -2I;
  #L1463c2.  if v5 != v6 then goto L146430;
  #L1463c6.  v3:= v4.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L1463ca.  v0:= v4.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L1463ce.  if v0 == 0 then goto L146402;
  #L1463d2.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L1463d6.  v2:= v0;
  #L1463d8.  if v3 == 0 then goto L146406;
  #L1463dc.  v0:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L1463e0.  v0:= v0 - v2 @kind int;
  #L1463e2.  if v0 == v7 then goto L1463ee;
  #L1463e6.  if v0 != 0 then goto L14640a;
  #L1463ea.  if v11 != 0 then goto L14640a;
  #L1463ee.  call `a`(v9, v10) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L1463f4.  if v11 == 0 then goto L146468;
  #L1463f8.  return @kind void;
  #L1463fa.  v2:= v1;
  #L1463fc.  goto L1463b4;
  #L1463fe.  v0:= v1;
  #L146400.  goto L1463bc;
  #L146402.  v2:= v1;
  #L146404.  goto L1463d8;
  #L146406.  v0:= v1;
  #L146408.  goto L1463e0;
  #L14640a.  v2:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L14640e.  if v2 != 0 then goto L146422;
  #L146412.  if v0 == v8 then goto L146422;
  #L146416.  v0:= new `java.lang.AssertionError`;
  #L14641a.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L146420.  throw v0;
  #L146422.  call `b`(v9, v4) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L146428.  call `a`(v9, v10) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L14642e.  goto L1463f4;
  #L146430.  v4:= 2I;
  #L146432.  if v5 != v4 then goto L14649c;
  #L146436.  v4:= v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L14643a.  v0:= v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L14643e.  if v0 == 0 then goto L14646e;
  #L146442.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L146446.  v2:= v0;
  #L146448.  if v4 == 0 then goto L146472;
  #L14644c.  v0:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L146450.  v0:= v0 - v2 @kind int;
  #L146452.  if v0 == v8 then goto L14645e;
  #L146456.  if v0 != 0 then goto L146476;
  #L14645a.  if v11 != 0 then goto L146476;
  #L14645e.  call `b`(v9, v10) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L146464.  if v11 != 0 then goto L1463f8;
  #L146468.  v10:= v10.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` @kind object;
  #L14646c.  goto L14639e;
  #L14646e.  v2:= v1;
  #L146470.  goto L146448;
  #L146472.  v0:= v1;
  #L146474.  goto L146450;
  #L146476.  v2:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L14647a.  if v2 != 0 then goto L14648e;
  #L14647e.  if v0 == v7 then goto L14648e;
  #L146482.  v0:= new `java.lang.AssertionError`;
  #L146486.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L14648c.  throw v0;
  #L14648e.  call `a`(v9, v3) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L146494.  call `b`(v9, v10) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L14649a.  goto L146464;
  #L14649c.  if v5 != 0 then goto L1464ae;
  #L1464a0.  v0:= v2 + 1;
  #L1464a4.  v10.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L1464a8.  if v11 == 0 then goto L146468;
  #L1464ac.  goto L1463f8;
  #L1464ae.  v3:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L1464b2.  if v3 != 0 then goto L1464ca;
  #L1464b6.  if v5 == v7 then goto L1464ca;
  #L1464ba.  if v5 == v8 then goto L1464ca;
  #L1464be.  v0:= new `java.lang.AssertionError`;
  #L1464c2.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1464c8.  throw v0;
  #L1464ca.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1464d0.  v0:= temp;
  #L1464d2.  v0:= v0 + 1;
  #L1464d6.  v10.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L1464da.  if v11 != 0 then goto L146468;
  #L1464de.  goto L1463f8;
}
procedure `com.b.a.b.g$d` `a`(`com.b.a.b.g` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1464f0.  v0:= 0I;
  #L1464f2.  if v3 == 0 then goto L146500;
  #L1464f6.  v1:= 0I;
  #Try_start0.  
  #L1464f8.  call temp:= `a`(v2, v3, v1) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Z)Lcom/b/a/b/g$d;` @kind virtual;
  #Try_end0.  
  #L1464fe.  v0:= temp @kind object;
  #L146500.  return v0 @kind object;
  #L146502.  v1:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L146504.  goto L146500;
  catch `java.lang.ClassCastException` @[Try_start0..Try_end0] goto L146502;
}
procedure `com.b.a.b.g$d` `a`(`com.b.a.b.g` v7 @kind this, `java.lang.Object` v8 @kind object, `boolean` v9 ) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Z)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L146528.  v1:= 0I;
  #L14652a.  v5:= v7.`com.b.a.b.g.a` @type ^`java.util.Comparator` @kind object;
  #L14652e.  v2:= v7.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` @kind object;
  #L146532.  v0:= 0I;
  #L146534.  if v2 == 0 then goto L14663e;
  #L146538.  v0:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L14653c.  if v5 != v0 then goto L14655e;
  #L146540.  v0:= v8 @kind object;
  #L146542.  v0:= (`java.lang.Comparable`) v0 @kind object;
  #L146546.  if v0 == 0 then goto L146562;
  #L14654a.  v3:= v2.`com.b.a.b.g$d.f` @type ^`java.lang.Object` @kind object;
  #L14654e.  call temp:= `compareTo`(v0, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L146554.  v3:= temp;
  #L146556.  if v3 != 0 then goto L146570;
  #L14655a.  v1:= v2 @kind object;
  #L14655c.  return v1 @kind object;
  #L14655e.  v0:= v1 @kind object;
  #L146560.  goto L146546;
  #L146562.  v3:= v2.`com.b.a.b.g$d.f` @type ^`java.lang.Object` @kind object;
  #L146566.  call temp:= `compare`(v5, v8, v3) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L14656c.  v3:= temp;
  #L14656e.  goto L146556;
  #L146570.  if v3 >= 0 then goto L1465e0;
  #L146574.  v4:= v2.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L146578.  if v4 != 0 then goto L1465e6;
  #L14657c.  v6:= v3;
  #L14657e.  v3:= v2 @kind object;
  #L146580.  v2:= v6;
  #L146582.  if v9 == 0 then goto L14655c;
  #L146586.  v1:= v7.`com.b.a.b.g.e` @type ^`com.b.a.b.g$d` @kind object;
  #L14658a.  if v3 != 0 then goto L146618;
  #L14658e.  v0:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L146592.  if v5 != v0 then goto L1465ea;
  #L146596.  v0:= instanceof @variable v8 @type ^`java.lang.Comparable` @kind boolean;
  #L14659a.  if v0 != 0 then goto L1465ea;
  #L14659e.  v0:= new `java.lang.ClassCastException`;
  #L1465a2.  v1:= new `java.lang.StringBuilder`;
  #L1465a6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1465ac.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1465b2.  v2:= temp @kind object;
  #L1465b4.  call temp:= `getName`(v2) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1465ba.  v2:= temp @kind object;
  #L1465bc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1465c2.  v1:= temp @kind object;
  #L1465c4.  v2:= " is not Comparable" @kind object;
  #L1465c8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1465ce.  v1:= temp @kind object;
  #L1465d0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1465d6.  v1:= temp @kind object;
  #L1465d8.  call `<init>`(v0, v1) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1465de.  throw v0;
  #L1465e0.  v4:= v2.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L1465e4.  goto L146578;
  #L1465e6.  v2:= v4 @kind object;
  #L1465e8.  goto L146546;
  #L1465ea.  v0:= new `com.b.a.b.g$d`;
  #L1465ee.  v2:= v1.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L1465f2.  call `<init>`(v0, v3, v8, v1, v2) @signature `Lcom/b/a/b/g$d;.<init>:(Lcom/b/a/b/g$d;Ljava/lang/Object;Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L1465f8.  v7.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L1465fc.  v1:= v7.`com.b.a.b.g.c` @type ^`int`;
  #L146600.  v1:= v1 + 1;
  #L146604.  v7.`com.b.a.b.g.c` @type ^`int` := v1;
  #L146608.  v1:= v7.`com.b.a.b.g.d` @type ^`int`;
  #L14660c.  v1:= v1 + 1;
  #L146610.  v7.`com.b.a.b.g.d` @type ^`int` := v1;
  #L146614.  v1:= v0 @kind object;
  #L146616.  goto L14655c;
  #L146618.  v0:= new `com.b.a.b.g$d`;
  #L14661c.  v4:= v1.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L146620.  call `<init>`(v0, v3, v8, v1, v4) @signature `Lcom/b/a/b/g$d;.<init>:(Lcom/b/a/b/g$d;Ljava/lang/Object;Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L146626.  if v2 >= 0 then goto L146638;
  #L14662a.  v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L14662e.  v1:= 1I;
  #L146630.  call `b`(v7, v3, v1) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;Z)V` @kind direct;
  #L146636.  goto L1465fc;
  #L146638.  v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L14663c.  goto L14662e;
  #L14663e.  v3:= v2 @kind object;
  #L146640.  v2:= v0;
  #L146642.  goto L146582;
}
procedure `com.b.a.b.g$d` `a`(`com.b.a.b.g` v3 @kind this, `java.util.Map$Entry` v4 @kind object) @signature `Lcom/b/a/b/g;.a:(Ljava/util/Map$Entry;)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L146654.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L14665a.  v0:= temp @kind object;
  #L14665c.  call temp:= `a`(v3, v0) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L146662.  v0:= temp @kind object;
  #L146664.  if v0 == 0 then goto L146688;
  #L146668.  v1:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L14666c.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L146672.  v2:= temp @kind object;
  #L146674.  call temp:= `a`(v3, v1, v2) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind direct;
  #L14667a.  v1:= temp;
  #L14667c.  if v1 == 0 then goto L146688;
  #L146680.  v1:= 1I;
  #L146682.  if v1 == 0 then goto L14668c;
  #L146686.  return v0 @kind object;
  #L146688.  v1:= 0I;
  #L14668a.  goto L146682;
  #L14668c.  v0:= 0I;
  #L14668e.  goto L146686;
}
procedure `void` `a`(`com.b.a.b.g` v6 @kind this, `com.b.a.b.g$d` v7 @kind object, `boolean` v8 ) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1466a0.  v2:= 0I;
  #L1466a2.  v5:= 0I;
  #L1466a4.  if v8 == 0 then goto L1466c0;
  #L1466a8.  v0:= v7.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L1466ac.  v1:= v7.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` @kind object;
  #L1466b0.  v0.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` := v1 @kind object;
  #L1466b4.  v0:= v7.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` @kind object;
  #L1466b8.  v1:= v7.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L1466bc.  v0.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` := v1 @kind object;
  #L1466c0.  v0:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L1466c4.  v1:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L1466c8.  v3:= v7.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` @kind object;
  #L1466cc.  if v0 == 0 then goto L146740;
  #L1466d0.  if v1 == 0 then goto L146740;
  #L1466d4.  v3:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L1466d8.  v4:= v1.`com.b.a.b.g$d.h` @type ^`int`;
  #L1466dc.  if v3 <= v4 then goto L146736;
  #L1466e0.  call temp:= `b`(v0) @signature `Lcom/b/a/b/g$d;.b:()Lcom/b/a/b/g$d;` @kind virtual;
  #L1466e6.  v0:= temp @kind object;
  #L1466e8.  call `a`(v6, v0, v2) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Z)V` @kind virtual;
  #L1466ee.  v3:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L1466f2.  if v3 == 0 then goto L146786;
  #L1466f6.  v1:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L1466fa.  v0.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L1466fe.  v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L146702.  v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L146706.  v3:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L14670a.  if v3 == 0 then goto L14671e;
  #L14670e.  v2:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L146712.  v0.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L146716.  v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L14671a.  v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L14671e.  call temp:= `max`(v1, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L146724.  v1:= temp;
  #L146726.  v1:= v1 + 1;
  #L14672a.  v0.`com.b.a.b.g$d.h` @type ^`int` := v1;
  #L14672e.  call `a`(v6, v7, v0) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L146734.  return @kind void;
  #L146736.  call temp:= `a`(v1) @signature `Lcom/b/a/b/g$d;.a:()Lcom/b/a/b/g$d;` @kind virtual;
  #L14673c.  v0:= temp @kind object;
  #L14673e.  goto L1466e8;
  #L146740.  if v0 == 0 then goto L14676e;
  #L146744.  call `a`(v6, v7, v0) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L14674a.  v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L14674e.  call `b`(v6, v3, v2) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;Z)V` @kind direct;
  #L146754.  v0:= v6.`com.b.a.b.g.c` @type ^`int`;
  #L146758.  v0:= v0 + -1;
  #L14675c.  v6.`com.b.a.b.g.c` @type ^`int` := v0;
  #L146760.  v0:= v6.`com.b.a.b.g.d` @type ^`int`;
  #L146764.  v0:= v0 + 1;
  #L146768.  v6.`com.b.a.b.g.d` @type ^`int` := v0;
  #L14676c.  goto L146734;
  #L14676e.  if v1 == 0 then goto L14677e;
  #L146772.  call `a`(v6, v7, v1) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L146778.  v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L14677c.  goto L14674e;
  #L14677e.  call `a`(v6, v7, v5) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L146784.  goto L14674e;
  #L146786.  v1:= v2;
  #L146788.  goto L146706;
}
procedure `com.b.a.b.g$d` `b`(`com.b.a.b.g` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/b/g;.b:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L14679c.  call temp:= `a`(v2, v3) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L1467a2.  v0:= temp @kind object;
  #L1467a4.  if v0 == 0 then goto L1467b0;
  #L1467a8.  v1:= 1I;
  #L1467aa.  call `a`(v2, v0, v1) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Z)V` @kind virtual;
  #L1467b0.  return v0 @kind object;
}
procedure `void` `clear`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1467c4.  v0:= 0I;
  #L1467c6.  v1.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L1467ca.  v0:= 0I;
  #L1467cc.  v1.`com.b.a.b.g.c` @type ^`int` := v0;
  #L1467d0.  v0:= v1.`com.b.a.b.g.d` @type ^`int`;
  #L1467d4.  v0:= v0 + 1;
  #L1467d8.  v1.`com.b.a.b.g.d` @type ^`int` := v0;
  #L1467dc.  v0:= v1.`com.b.a.b.g.e` @type ^`com.b.a.b.g$d` @kind object;
  #L1467e0.  v0.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L1467e4.  v0.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L1467e8.  return @kind void;
}
procedure `boolean` `containsKey`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1467fc.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L146802.  v0:= temp @kind object;
  #L146804.  if v0 == 0 then goto L14680c;
  #L146808.  v0:= 1I;
  #L14680a.  return v0;
  #L14680c.  v0:= 0I;
  #L14680e.  goto L14680a;
}
procedure `java.util.Set` `entrySet`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L146820.  v0:= v1.`com.b.a.b.g.h` @type ^`com.b.a.b.g$a` @kind object;
  #L146824.  if v0 == 0 then goto L14682a;
  #L146828.  return v0 @kind object;
  #L14682a.  v0:= new `com.b.a.b.g$a`;
  #L14682e.  call `<init>`(v0, v1) @signature `Lcom/b/a/b/g$a;.<init>:(Lcom/b/a/b/g;)V` @kind direct;
  #L146834.  v1.`com.b.a.b.g.h` @type ^`com.b.a.b.g$a` := v0 @kind object;
  #L146838.  goto L146828;
}
procedure `java.lang.Object` `get`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14684c.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L146852.  v0:= temp @kind object;
  #L146854.  if v0 == 0 then goto L14685e;
  #L146858.  v0:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L14685c.  return v0 @kind object;
  #L14685e.  v0:= 0I;
  #L146860.  goto L14685c;
}
procedure `java.util.Set` `keySet`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L146874.  v0:= v1.`com.b.a.b.g.i` @type ^`com.b.a.b.g$b` @kind object;
  #L146878.  if v0 == 0 then goto L14687e;
  #L14687c.  return v0 @kind object;
  #L14687e.  v0:= new `com.b.a.b.g$b`;
  #L146882.  call `<init>`(v0, v1) @signature `Lcom/b/a/b/g$b;.<init>:(Lcom/b/a/b/g;)V` @kind direct;
  #L146888.  v1.`com.b.a.b.g.i` @type ^`com.b.a.b.g$b` := v0 @kind object;
  #L14688c.  goto L14687c;
}
procedure `java.lang.Object` `put`(`com.b.a.b.g` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/b/a/b/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1468a0.  if v3 != 0 then goto L1468b4;
  #L1468a4.  v0:= new `java.lang.NullPointerException`;
  #L1468a8.  v1:= "key == null" @kind object;
  #L1468ac.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1468b2.  throw v0;
  #L1468b4.  v0:= 1I;
  #L1468b6.  call temp:= `a`(v2, v3, v0) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Z)Lcom/b/a/b/g$d;` @kind virtual;
  #L1468bc.  v0:= temp @kind object;
  #L1468be.  v1:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L1468c2.  v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` := v4 @kind object;
  #L1468c6.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1468d8.  call temp:= `b`(v1, v2) @signature `Lcom/b/a/b/g;.b:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L1468de.  v0:= temp @kind object;
  #L1468e0.  if v0 == 0 then goto L1468ea;
  #L1468e4.  v0:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L1468e8.  return v0 @kind object;
  #L1468ea.  v0:= 0I;
  #L1468ec.  goto L1468e8;
}
procedure `int` `size`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L146900.  v0:= v1.`com.b.a.b.g.c` @type ^`int`;
  #L146904.  return v0;
}
