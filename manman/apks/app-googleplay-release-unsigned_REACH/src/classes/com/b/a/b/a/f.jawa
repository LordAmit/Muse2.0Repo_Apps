record `com.b.a.b.a.f` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.d.c` @kind class {
  `java.util.List` `com.b.a.b.a.f.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.b.a.b.a.f.d` @AccessFlag PRIVATE;
  `com.b.a.l` `com.b.a.b.a.f.e` @AccessFlag PRIVATE;
}
global `java.io.Writer` `@@com.b.a.b.a.f.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.b.a.q` `@@com.b.a.b.a.f.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/a/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L13fe80.  v0:= new `com.b.a.b.a.f$1`;
  #L13fe84.  call `<init>`(v0) @signature `Lcom/b/a/b/a/f$1;.<init>:()V` @kind direct;
  #L13fe8a.  `@@com.b.a.b.a.f.a` @type ^`java.io.Writer` := v0 @kind object;
  #L13fe8e.  v0:= new `com.b.a.q`;
  #L13fe92.  v1:= "closed" @kind object;
  #L13fe96.  call `<init>`(v0, v1) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13fe9c.  `@@com.b.a.b.a.f.b` @type ^`com.b.a.q` := v0 @kind object;
  #L13fea0.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.b.a.f` v1 @kind this) @signature `Lcom/b/a/b/a/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L13feb4.  v0:= `@@com.b.a.b.a.f.a` @type ^`java.io.Writer` @kind object;
  #L13feb8.  call `<init>`(v1, v0) @signature `Lcom/b/a/d/c;.<init>:(Ljava/io/Writer;)V` @kind direct;
  #L13febe.  v0:= new `java.util.ArrayList`;
  #L13fec2.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L13fec8.  v1.`com.b.a.b.a.f.c` @type ^`java.util.List` := v0 @kind object;
  #L13fecc.  v0:= `@@com.b.a.n.a` @type ^`com.b.a.n` @kind object;
  #L13fed0.  v1.`com.b.a.b.a.f.e` @type ^`com.b.a.l` := v0 @kind object;
  #L13fed4.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.f` v2 @kind this, `com.b.a.l` v3 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L13fee8.  v0:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L13feec.  if v0 == 0 then goto L13ff26;
  #L13fef0.  call temp:= `j`(v3) @signature `Lcom/b/a/l;.j:()Z` @kind virtual;
  #L13fef6.  v0:= temp;
  #L13fef8.  if v0 == 0 then goto L13ff08;
  #L13fefc.  call temp:= `h`(v2) @signature `Lcom/b/a/b/a/f;.h:()Z` @kind virtual;
  #L13ff02.  v0:= temp;
  #L13ff04.  if v0 == 0 then goto L13ff1e;
  #L13ff08.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L13ff0e.  v0:= temp @kind object;
  #L13ff10.  v0:= (`com.b.a.o`) v0 @kind object;
  #L13ff14.  v1:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L13ff18.  call `a`(v0, v1, v3) @signature `Lcom/b/a/o;.a:(Ljava/lang/String;Lcom/b/a/l;)V` @kind virtual;
  #L13ff1e.  v0:= 0I;
  #L13ff20.  v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` := v0 @kind object;
  #L13ff24.  return @kind void;
  #L13ff26.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L13ff2a.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L13ff30.  v0:= temp;
  #L13ff32.  if v0 == 0 then goto L13ff3c;
  #L13ff36.  v2.`com.b.a.b.a.f.e` @type ^`com.b.a.l` := v3 @kind object;
  #L13ff3a.  goto L13ff24;
  #L13ff3c.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L13ff42.  v0:= temp @kind object;
  #L13ff44.  v1:= instanceof @variable v0 @type ^`com.b.a.i` @kind boolean;
  #L13ff48.  if v1 == 0 then goto L13ff58;
  #L13ff4c.  v0:= (`com.b.a.i`) v0 @kind object;
  #L13ff50.  call `a`(v0, v3) @signature `Lcom/b/a/i;.a:(Lcom/b/a/l;)V` @kind virtual;
  #L13ff56.  goto L13ff24;
  #L13ff58.  v0:= new `java.lang.IllegalStateException`;
  #L13ff5c.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L13ff62.  throw v0;
}
procedure `com.b.a.l` `i`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L13ff74.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L13ff78.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L13ff7c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L13ff82.  v1:= temp;
  #L13ff84.  v1:= v1 + -1;
  #L13ff88.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L13ff8e.  v0:= temp @kind object;
  #L13ff90.  v0:= (`com.b.a.l`) v0 @kind object;
  #L13ff94.  return v0 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v3 @kind this, `long` v4 ) @signature `Lcom/b/a/b/a/f;.a:(J)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13ffa8.  v0:= new `com.b.a.q`;
  #L13ffac.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L13ffb2.  v1:= temp @kind object;
  #L13ffb4.  call `<init>`(v0, v1) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Number;)V` @kind direct;
  #L13ffba.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L13ffc0.  return v3 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v1 @kind this, `java.lang.Boolean` v2 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Ljava/lang/Boolean;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13ffd4.  if v2 != 0 then goto L13ffe2;
  #L13ffd8.  call temp:= `f`(v1) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L13ffde.  v1:= temp @kind object;
  #L13ffe0.  return v1 @kind object;
  #L13ffe2.  v0:= new `com.b.a.q`;
  #L13ffe6.  call `<init>`(v0, v2) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Boolean;)V` @kind direct;
  #L13ffec.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L13fff2.  goto L13ffe0;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v3 @kind this, `java.lang.Number` v4 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Ljava/lang/Number;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L140004.  if v4 != 0 then goto L140012;
  #L140008.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L14000e.  v3:= temp @kind object;
  #L140010.  return v3 @kind object;
  #L140012.  call temp:= `g`(v3) @signature `Lcom/b/a/b/a/f;.g:()Z` @kind virtual;
  #L140018.  v0:= temp;
  #L14001a.  if v0 != 0 then goto L140070;
  #L14001e.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L140024.  v0:= temp @kind wide;
  #L140026.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L14002c.  v2:= temp;
  #L14002e.  if v2 != 0 then goto L14003e;
  #L140032.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L140038.  v0:= temp;
  #L14003a.  if v0 == 0 then goto L140070;
  #L14003e.  v0:= new `java.lang.IllegalArgumentException`;
  #L140042.  v1:= new `java.lang.StringBuilder`;
  #L140046.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14004c.  v2:= "JSON forbids NaN and infinities: " @kind object;
  #L140050.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L140056.  v1:= temp @kind object;
  #L140058.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14005e.  v1:= temp @kind object;
  #L140060.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L140066.  v1:= temp @kind object;
  #L140068.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14006e.  throw v0;
  #L140070.  v0:= new `com.b.a.q`;
  #L140074.  call `<init>`(v0, v4) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Number;)V` @kind direct;
  #L14007a.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L140080.  goto L140010;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L140094.  v0:= v1.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L140098.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L14009e.  v0:= temp;
  #L1400a0.  if v0 != 0 then goto L1400ac;
  #L1400a4.  v0:= v1.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L1400a8.  if v0 == 0 then goto L1400b8;
  #L1400ac.  v0:= new `java.lang.IllegalStateException`;
  #L1400b0.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1400b6.  throw v0;
  #L1400b8.  call temp:= `i`(v1) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L1400be.  v0:= temp @kind object;
  #L1400c0.  v0:= instanceof @variable v0 @type ^`com.b.a.o` @kind boolean;
  #L1400c4.  if v0 == 0 then goto L1400ce;
  #L1400c8.  v1.`com.b.a.b.a.f.d` @type ^`java.lang.String` := v2 @kind object;
  #L1400cc.  return v1 @kind object;
  #L1400ce.  v0:= new `java.lang.IllegalStateException`;
  #L1400d2.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1400d8.  throw v0;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v2 @kind this, `boolean` v3 ) @signature `Lcom/b/a/b/a/f;.a:(Z)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1400ec.  v0:= new `com.b.a.q`;
  #L1400f0.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1400f6.  v1:= temp @kind object;
  #L1400f8.  call `<init>`(v0, v1) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Boolean;)V` @kind direct;
  #L1400fe.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L140104.  return v2 @kind object;
}
procedure `com.b.a.l` `a`(`com.b.a.b.a.f` v3 @kind this) @signature `Lcom/b/a/b/a/f;.a:()Lcom/b/a/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L140118.  v0:= v3.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L14011c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L140122.  v0:= temp;
  #L140124.  if v0 != 0 then goto L14015e;
  #L140128.  v0:= new `java.lang.IllegalStateException`;
  #L14012c.  v1:= new `java.lang.StringBuilder`;
  #L140130.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L140136.  v2:= "Expected one JSON element but was " @kind object;
  #L14013a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L140140.  v1:= temp @kind object;
  #L140142.  v2:= v3.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L140146.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14014c.  v1:= temp @kind object;
  #L14014e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L140154.  v1:= temp @kind object;
  #L140156.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14015c.  throw v0;
  #L14015e.  v0:= v3.`com.b.a.b.a.f.e` @type ^`com.b.a.l` @kind object;
  #L140162.  return v0 @kind object;
}
procedure `com.b.a.d.c` `b`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.b:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L140174.  v0:= new `com.b.a.i`;
  #L140178.  call `<init>`(v0) @signature `Lcom/b/a/i;.<init>:()V` @kind direct;
  #L14017e.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L140184.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L140188.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L14018e.  return v2 @kind object;
}
procedure `com.b.a.d.c` `b`(`com.b.a.b.a.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/b/a/b/a/f;.b:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1401a0.  if v2 != 0 then goto L1401ae;
  #L1401a4.  call temp:= `f`(v1) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L1401aa.  v1:= temp @kind object;
  #L1401ac.  return v1 @kind object;
  #L1401ae.  v0:= new `com.b.a.q`;
  #L1401b2.  call `<init>`(v0, v2) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1401b8.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L1401be.  goto L1401ac;
}
procedure `com.b.a.d.c` `c`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.c:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1401d0.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L1401d4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1401da.  v0:= temp;
  #L1401dc.  if v0 != 0 then goto L1401e8;
  #L1401e0.  v0:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L1401e4.  if v0 == 0 then goto L1401f4;
  #L1401e8.  v0:= new `java.lang.IllegalStateException`;
  #L1401ec.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1401f2.  throw v0;
  #L1401f4.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L1401fa.  v0:= temp @kind object;
  #L1401fc.  v0:= instanceof @variable v0 @type ^`com.b.a.i` @kind boolean;
  #L140200.  if v0 == 0 then goto L140220;
  #L140204.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L140208.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L14020c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L140212.  v1:= temp;
  #L140214.  v1:= v1 + -1;
  #L140218.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L14021e.  return v2 @kind object;
  #L140220.  v0:= new `java.lang.IllegalStateException`;
  #L140224.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L14022a.  throw v0;
}
procedure `void` `close`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14023c.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L140240.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L140246.  v0:= temp;
  #L140248.  if v0 != 0 then goto L14025c;
  #L14024c.  v0:= new `java.io.IOException`;
  #L140250.  v1:= "Incomplete document" @kind object;
  #L140254.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14025a.  throw v0;
  #L14025c.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L140260.  v1:= `@@com.b.a.b.a.f.b` @type ^`com.b.a.q` @kind object;
  #L140264.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L14026a.  return @kind void;
}
procedure `com.b.a.d.c` `d`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.d:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14027c.  v0:= new `com.b.a.o`;
  #L140280.  call `<init>`(v0) @signature `Lcom/b/a/o;.<init>:()V` @kind direct;
  #L140286.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L14028c.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L140290.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L140296.  return v2 @kind object;
}
procedure `com.b.a.d.c` `e`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.e:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1402a8.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L1402ac.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1402b2.  v0:= temp;
  #L1402b4.  if v0 != 0 then goto L1402c0;
  #L1402b8.  v0:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L1402bc.  if v0 == 0 then goto L1402cc;
  #L1402c0.  v0:= new `java.lang.IllegalStateException`;
  #L1402c4.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1402ca.  throw v0;
  #L1402cc.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L1402d2.  v0:= temp @kind object;
  #L1402d4.  v0:= instanceof @variable v0 @type ^`com.b.a.o` @kind boolean;
  #L1402d8.  if v0 == 0 then goto L1402f8;
  #L1402dc.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L1402e0.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L1402e4.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1402ea.  v1:= temp;
  #L1402ec.  v1:= v1 + -1;
  #L1402f0.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1402f6.  return v2 @kind object;
  #L1402f8.  v0:= new `java.lang.IllegalStateException`;
  #L1402fc.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L140302.  throw v0;
}
procedure `com.b.a.d.c` `f`(`com.b.a.b.a.f` v1 @kind this) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L140314.  v0:= `@@com.b.a.n.a` @type ^`com.b.a.n` @kind object;
  #L140318.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L14031e.  return v1 @kind object;
}
procedure `void` `flush`(`com.b.a.b.a.f` v0 @kind this) @signature `Lcom/b/a/b/a/f;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L140330.  return @kind void;
}
