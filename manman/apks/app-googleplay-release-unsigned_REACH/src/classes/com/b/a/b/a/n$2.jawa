record `com.b.a.b.a.n$2` @kind class @AccessFlag FINAL extends `com.b.a.v` @kind class {
}
procedure `void` `<init>`(`com.b.a.b.a.n$2` v0 @kind this) @signature `Lcom/b/a/b/a/n$2;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L142e88.  call `<init>`(v0) @signature `Lcom/b/a/v;.<init>:()V` @kind direct;
  #L142e8e.  return @kind void;
}
procedure `java.util.concurrent.atomic.AtomicIntegerArray` `a`(`com.b.a.b.a.n$2` v5 @kind this, `com.b.a.d.a` v6 @kind object) @signature `Lcom/b/a/b/a/n$2;.a:(Lcom/b/a/d/a;)Ljava/util/concurrent/atomic/AtomicIntegerArray;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L142ea0.  v2:= new `java.util.ArrayList`;
  #L142ea4.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L142eaa.  call `a`(v6) @signature `Lcom/b/a/d/a;.a:()V` @kind virtual;
  #L142eb0.  call temp:= `e`(v6) @signature `Lcom/b/a/d/a;.e:()Z` @kind virtual;
  #L142eb6.  v0:= temp;
  #L142eb8.  if v0 == 0 then goto L142ee2;
  #Try_start0.  
  #L142ebc.  call temp:= `m`(v6) @signature `Lcom/b/a/d/a;.m:()I` @kind virtual;
  #L142ec2.  v0:= temp;
  #L142ec4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L142eca.  v0:= temp @kind object;
  #L142ecc.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #Try_end0.  
  #L142ed2.  goto L142eb0;
  #L142ed4.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L142ed6.  v1:= new `com.b.a.t`;
  #L142eda.  call `<init>`(v1, v0) @signature `Lcom/b/a/t;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L142ee0.  throw v1;
  #L142ee2.  call `b`(v6) @signature `Lcom/b/a/d/a;.b:()V` @kind virtual;
  #L142ee8.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L142eee.  v3:= temp;
  #L142ef0.  v4:= new `java.util.concurrent.atomic.AtomicIntegerArray`;
  #L142ef4.  call `<init>`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerArray;.<init>:(I)V` @kind direct;
  #L142efa.  v0:= 0I;
  #L142efc.  v1:= v0;
  #L142efe.  if v1 >= v3 then goto L142f24;
  #L142f02.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L142f08.  v0:= temp @kind object;
  #L142f0a.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L142f0e.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L142f14.  v0:= temp;
  #L142f16.  call `set`(v4, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicIntegerArray;.set:(II)V` @kind virtual;
  #L142f1c.  v0:= v1 + 1;
  #L142f20.  v1:= v0;
  #L142f22.  goto L142efe;
  #L142f24.  return v4 @kind object;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L142ed4;
}
procedure `void` `a`(`com.b.a.b.a.n$2` v0 @kind this, `com.b.a.d.c` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/a/n$2;.a:(Lcom/b/a/d/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L142f48.  v2:= (`java.util.concurrent.atomic.AtomicIntegerArray`) v2 @kind object;
  #L142f4c.  call `a`(v0, v1, v2) @signature `Lcom/b/a/b/a/n$2;.a:(Lcom/b/a/d/c;Ljava/util/concurrent/atomic/AtomicIntegerArray;)V` @kind virtual;
  #L142f52.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.n$2` v4 @kind this, `com.b.a.d.c` v5 @kind object, `java.util.concurrent.atomic.AtomicIntegerArray` v6 @kind object) @signature `Lcom/b/a/b/a/n$2;.a:(Lcom/b/a/d/c;Ljava/util/concurrent/atomic/AtomicIntegerArray;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L142f64.  call temp:= `b`(v5) @signature `Lcom/b/a/d/c;.b:()Lcom/b/a/d/c;` @kind virtual;
  #L142f6a.  v0:= 0I;
  #L142f6c.  call temp:= `length`(v6) @signature `Ljava/util/concurrent/atomic/AtomicIntegerArray;.length:()I` @kind virtual;
  #L142f72.  v1:= temp;
  #L142f74.  if v0 >= v1 then goto L142f8e;
  #L142f78.  call temp:= `get`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicIntegerArray;.get:(I)I` @kind virtual;
  #L142f7e.  v2:= temp;
  #L142f80.  v2:= (`long`) v2 @kind i2l;
  #L142f82.  call temp:= `a`(v5, v2) @signature `Lcom/b/a/d/c;.a:(J)Lcom/b/a/d/c;` @kind virtual;
  #L142f88.  v0:= v0 + 1;
  #L142f8c.  goto L142f74;
  #L142f8e.  call temp:= `c`(v5) @signature `Lcom/b/a/d/c;.c:()Lcom/b/a/d/c;` @kind virtual;
  #L142f94.  return @kind void;
}
procedure `java.lang.Object` `b`(`com.b.a.b.a.n$2` v1 @kind this, `com.b.a.d.a` v2 @kind object) @signature `Lcom/b/a/b/a/n$2;.b:(Lcom/b/a/d/a;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L142fa8.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/a/n$2;.a:(Lcom/b/a/d/a;)Ljava/util/concurrent/atomic/AtomicIntegerArray;` @kind virtual;
  #L142fae.  v0:= temp @kind object;
  #L142fb0.  return v0 @kind object;
}
