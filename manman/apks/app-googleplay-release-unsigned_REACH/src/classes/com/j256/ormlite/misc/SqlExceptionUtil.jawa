record `com.j256.ormlite.misc.SqlExceptionUtil` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`com.j256.ormlite.misc.SqlExceptionUtil` v0 @kind this) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L16070c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L160712.  return @kind void;
}
procedure `java.sql.SQLException` `create`(`java.lang.String` v2 @kind object, `java.lang.Throwable` v3 @kind object) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L160724.  v0:= instanceof @variable v3 @type ^`java.sql.SQLException` @kind boolean;
  #L160728.  if v0 == 0 then goto L16074e;
  #L16072c.  v1:= new `java.sql.SQLException`;
  #L160730.  v0:= v3 @kind object;
  #L160732.  v0:= (`java.sql.SQLException`) v0 @kind object;
  #L160736.  call temp:= `getSQLState`(v0) @signature `Ljava/sql/SQLException;.getSQLState:()Ljava/lang/String;` @kind virtual;
  #L16073c.  v0:= temp @kind object;
  #L16073e.  call `<init>`(v1, v2, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L160744.  v0:= v1 @kind object;
  #L160746.  call temp:= `initCause`(v0, v3) @signature `Ljava/sql/SQLException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L16074c.  return v0 @kind object;
  #L16074e.  v0:= new `java.sql.SQLException`;
  #L160752.  call `<init>`(v0, v2) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L160758.  goto L160746;
}
