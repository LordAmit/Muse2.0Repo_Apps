record `com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.BaseFieldConverter` @kind class {
}
procedure `void` `<init>`(`com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` v0 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L1548b0.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.<init>:()V` @kind direct;
  #L1548b6.  return @kind void;
}
procedure `com.j256.ormlite.field.SqlType` `getSqlType`(`com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1548c8.  v0:= `@@com.j256.ormlite.field.SqlType.BOOLEAN` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L1548cc.  return v0 @kind object;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1548e0.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L1548e4.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L1548ea.  v0:= temp;
  #L1548ec.  if v0 == 0 then goto L1548fc;
  #L1548f0.  v0:= 1I;
  #L1548f2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L1548f8.  v0:= temp @kind object;
  #L1548fa.  return v0 @kind object;
  #L1548fc.  v0:= 0I;
  #L1548fe.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L154904.  v0:= temp @kind object;
  #L154906.  goto L1548fa;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L154918.  call temp:= `parseBoolean`(v3) @signature `Ljava/lang/Boolean;.parseBoolean:(Ljava/lang/String;)Z` @kind static;
  #L15491e.  v0:= temp;
  #L154920.  if v0 == 0 then goto L154930;
  #L154924.  v0:= 1I;
  #L154926.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L15492c.  v0:= temp @kind object;
  #L15492e.  return v0 @kind object;
  #L154930.  v0:= 0I;
  #L154932.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L154938.  v0:= temp @kind object;
  #L15493a.  goto L15492e;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15494c.  call temp:= `parseByte`(v3) @signature `Ljava/lang/Byte;.parseByte:(Ljava/lang/String;)B` @kind static;
  #L154952.  v0:= temp;
  #L154954.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L15495a.  v0:= temp @kind object;
  #L15495c.  call temp:= `sqlArgToJava`(v1, v2, v0, v4) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L154962.  v0:= temp @kind object;
  #L154964.  return v0 @kind object;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L154978.  call temp:= `getByte`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getByte:(I)B` @kind interface;
  #L15497e.  v0:= temp;
  #L154980.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L154986.  v0:= temp @kind object;
  #L154988.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.Object` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15499c.  v1:= 1I;
  #L15499e.  v4:= (`java.lang.Byte`) v4 @kind object;
  #L1549a2.  call temp:= `byteValue`(v4) @signature `Ljava/lang/Byte;.byteValue:()B` @kind virtual;
  #L1549a8.  v0:= temp;
  #L1549aa.  if v0 != v1 then goto L1549b8;
  #L1549ae.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1549b4.  v0:= temp @kind object;
  #L1549b6.  return v0 @kind object;
  #L1549b8.  v0:= 0I;
  #L1549ba.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1549c0.  v0:= temp @kind object;
  #L1549c2.  goto L1549b6;
}
