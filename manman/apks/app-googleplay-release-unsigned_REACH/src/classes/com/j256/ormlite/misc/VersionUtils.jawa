record `com.j256.ormlite.misc.VersionUtils` @kind class @AccessFlag PUBLIC {
}
global `java.lang.String` `@@com.j256.ormlite.misc.VersionUtils.CORE_VERSION` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @AccessFlag PRIVATE_STATIC;
global `com.j256.ormlite.logger.Logger` `@@com.j256.ormlite.misc.VersionUtils.logger` @AccessFlag PRIVATE_STATIC;
global `boolean` `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L160b7c.  v0:= 0I;
  #L160b7e.  `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @type ^`boolean` := v0 @kind boolean;
  #L160b82.  v0:= "VERSION__5.0__" @kind object;
  #L160b86.  `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` := v0 @kind object;
  #L160b8a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.misc.VersionUtils` v0 @kind this) @signature `Lcom/j256/ormlite/misc/VersionUtils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L160b9c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L160ba2.  return @kind void;
}
procedure `void` `checkCoreVersusAndroidVersions`(`java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.checkCoreVersusAndroidVersions:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L160bb4.  v0:= "core" @kind object;
  #L160bb8.  v1:= `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` @kind object;
  #L160bbc.  v2:= "android" @kind object;
  #L160bc0.  call `logVersionWarnings`(v0, v1, v2, v3) @signature `Lcom/j256/ormlite/misc/VersionUtils;.logVersionWarnings:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L160bc6.  return @kind void;
}
procedure `void` `checkCoreVersusJdbcVersions`(`java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.checkCoreVersusJdbcVersions:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L160bd8.  v0:= "core" @kind object;
  #L160bdc.  v1:= `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` @kind object;
  #L160be0.  v2:= "jdbc" @kind object;
  #L160be4.  call `logVersionWarnings`(v0, v1, v2, v3) @signature `Lcom/j256/ormlite/misc/VersionUtils;.logVersionWarnings:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L160bea.  return @kind void;
}
procedure `java.lang.String` `getCoreVersion`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.getCoreVersion:()Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L160bfc.  v0:= `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` @kind object;
  #L160c00.  return v0 @kind object;
}
procedure `com.j256.ormlite.logger.Logger` `getLogger`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.getLogger:()Lcom/j256/ormlite/logger/Logger;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L160c14.  v0:= `@@com.j256.ormlite.misc.VersionUtils.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L160c18.  if v0 != 0 then goto L160c2c;
  #L160c1c.  v0:= constclass @type ^`com.j256.ormlite.misc.VersionUtils` @kind object;
  #L160c20.  call temp:= `getLogger`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/Class;)Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L160c26.  v0:= temp @kind object;
  #L160c28.  `@@com.j256.ormlite.misc.VersionUtils.logger` @type ^`com.j256.ormlite.logger.Logger` := v0 @kind object;
  #L160c2c.  v0:= `@@com.j256.ormlite.misc.VersionUtils.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L160c30.  return v0 @kind object;
}
procedure `void` `logVersionWarnings`(`java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object, `java.lang.String` v10 @kind object, `java.lang.String` v11 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.logVersionWarnings:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L160c44.  v7:= 0I;
  #L160c46.  v6:= 3I;
  #L160c48.  v5:= 2I;
  #L160c4a.  v4:= 1I;
  #L160c4c.  v3:= 0I;
  #L160c4e.  if v9 != 0 then goto L160c76;
  #L160c52.  if v11 == 0 then goto L160c74;
  #L160c56.  v0:= "Unknown version" @kind object;
  #L160c5a.  v1:= " for {}, version for {} is '{}'" @kind object;
  #L160c5e.  v2:= new `java.lang.Object`[v6];
  #L160c62.  v2[v3]:= v8 @kind object;
  #L160c66.  v2[v4]:= v10 @kind object;
  #L160c6a.  v2[v5]:= v11 @kind object;
  #L160c6e.  call `warning`(v7, v0, v1, v2) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @kind static;
  #L160c74.  return @kind void;
  #L160c76.  if v11 != 0 then goto L160c9a;
  #L160c7a.  v0:= "Unknown version" @kind object;
  #L160c7e.  v1:= " for {}, version for {} is '{}'" @kind object;
  #L160c82.  v2:= new `java.lang.Object`[v6];
  #L160c86.  v2[v3]:= v10 @kind object;
  #L160c8a.  v2[v4]:= v8 @kind object;
  #L160c8e.  v2[v5]:= v9 @kind object;
  #L160c92.  call `warning`(v7, v0, v1, v2) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @kind static;
  #L160c98.  goto L160c74;
  #L160c9a.  call temp:= `equals`(v9, v11) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L160ca0.  v0:= temp;
  #L160ca2.  if v0 != 0 then goto L160c74;
  #L160ca6.  v0:= "Mismatched versions" @kind object;
  #L160caa.  v1:= ": {} is '{}', while {} is '{}'" @kind object;
  #L160cae.  v2:= 4I;
  #L160cb0.  v2:= new `java.lang.Object`[v2];
  #L160cb4.  v2[v3]:= v8 @kind object;
  #L160cb8.  v2[v4]:= v9 @kind object;
  #L160cbc.  v2[v5]:= v10 @kind object;
  #L160cc0.  v2[v6]:= v11 @kind object;
  #L160cc4.  call `warning`(v7, v0, v1, v2) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @kind static;
  #L160cca.  goto L160c74;
}
procedure `void` `setThrownOnErrors`(`boolean` v0 ) @signature `Lcom/j256/ormlite/misc/VersionUtils;.setThrownOnErrors:(Z)V` @AccessFlag STATIC {
    temp;

  #L160cdc.  `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @type ^`boolean` := v0 @kind boolean;
  #L160ce0.  return @kind void;
}
procedure `void` `warning`(`java.lang.Throwable` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L160cf4.  call temp:= `getLogger`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.getLogger:()Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L160cfa.  v0:= temp @kind object;
  #L160cfc.  v1:= new `java.lang.StringBuilder`;
  #L160d00.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160d06.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160d0c.  v1:= temp @kind object;
  #L160d0e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160d14.  v1:= temp @kind object;
  #L160d16.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160d1c.  v1:= temp @kind object;
  #L160d1e.  call `warn`(v0, v3, v1, v6) @signature `Lcom/j256/ormlite/logger/Logger;.warn:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L160d24.  v0:= `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @type ^`boolean` @kind boolean;
  #L160d28.  if v0 == 0 then goto L160d5e;
  #L160d2c.  v0:= new `java.lang.IllegalStateException`;
  #L160d30.  v1:= new `java.lang.StringBuilder`;
  #L160d34.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160d3a.  v2:= "See error log for details:" @kind object;
  #L160d3e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160d44.  v1:= temp @kind object;
  #L160d46.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160d4c.  v1:= temp @kind object;
  #L160d4e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160d54.  v1:= temp @kind object;
  #L160d56.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L160d5c.  throw v0;
  #L160d5e.  return @kind void;
}
