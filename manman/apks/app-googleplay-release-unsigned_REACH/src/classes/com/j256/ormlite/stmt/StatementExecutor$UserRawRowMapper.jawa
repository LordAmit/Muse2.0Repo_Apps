record `com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper` @kind class @AccessFlag  extends `com.j256.ormlite.stmt.GenericRowMapper` @kind interface {
  `java.lang.String`[] `com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper.columnNames` @AccessFlag PRIVATE;
  `com.j256.ormlite.dao.RawRowMapper` `com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper.mapper` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.stmt.GenericRowMapper` `com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper.stringRowMapper` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper` v0 @kind this, `com.j256.ormlite.dao.RawRowMapper` v1 @kind object, `com.j256.ormlite.stmt.GenericRowMapper` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$UserRawRowMapper;.<init>:(Lcom/j256/ormlite/dao/RawRowMapper;Lcom/j256/ormlite/stmt/GenericRowMapper;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L16396c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L163972.  v0.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper.mapper` @type ^`com.j256.ormlite.dao.RawRowMapper` := v1 @kind object;
  #L163976.  v0.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper.stringRowMapper` @type ^`com.j256.ormlite.stmt.GenericRowMapper` := v2 @kind object;
  #L16397a.  return @kind void;
}
procedure `java.lang.String`[] `getColumnNames`(`com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper` v1 @kind this, `com.j256.ormlite.support.DatabaseResults` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$UserRawRowMapper;.getColumnNames:(Lcom/j256/ormlite/support/DatabaseResults;)[Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L16398c.  v0:= v1.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper.columnNames` @type ^`java.lang.String`[] @kind object;
  #L163990.  if v0 == 0 then goto L16399a;
  #L163994.  v0:= v1.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper.columnNames` @type ^`java.lang.String`[] @kind object;
  #L163998.  return v0 @kind object;
  #L16399a.  call temp:= `getColumnNames`(v2) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getColumnNames:()[Ljava/lang/String;` @kind interface;
  #L1639a0.  v0:= temp @kind object;
  #L1639a2.  v1.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper.columnNames` @type ^`java.lang.String`[] := v0 @kind object;
  #L1639a6.  v0:= v1.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper.columnNames` @type ^`java.lang.String`[] @kind object;
  #L1639aa.  goto L163998;
}
procedure `java.lang.Object` `mapRow`(`com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper` v3 @kind this, `com.j256.ormlite.support.DatabaseResults` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$UserRawRowMapper;.mapRow:(Lcom/j256/ormlite/support/DatabaseResults;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1639bc.  v0:= v3.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper.stringRowMapper` @type ^`com.j256.ormlite.stmt.GenericRowMapper` @kind object;
  #L1639c0.  call temp:= `mapRow`(v0, v4) @signature `Lcom/j256/ormlite/stmt/GenericRowMapper;.mapRow:(Lcom/j256/ormlite/support/DatabaseResults;)Ljava/lang/Object;` @kind interface;
  #L1639c6.  v0:= temp @kind object;
  #L1639c8.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L1639cc.  v1:= v3.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowMapper.mapper` @type ^`com.j256.ormlite.dao.RawRowMapper` @kind object;
  #L1639d0.  call temp:= `getColumnNames`(v3, v4) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$UserRawRowMapper;.getColumnNames:(Lcom/j256/ormlite/support/DatabaseResults;)[Ljava/lang/String;` @kind direct;
  #L1639d6.  v2:= temp @kind object;
  #L1639d8.  call temp:= `mapRow`(v1, v2, v0) @signature `Lcom/j256/ormlite/dao/RawRowMapper;.mapRow:([Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Object;` @kind interface;
  #L1639de.  v0:= temp @kind object;
  #L1639e0.  return v0 @kind object;
}
