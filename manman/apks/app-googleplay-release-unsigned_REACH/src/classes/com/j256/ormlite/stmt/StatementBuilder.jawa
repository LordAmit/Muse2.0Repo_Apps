record `com.j256.ormlite.stmt.StatementBuilder` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `boolean` `com.j256.ormlite.stmt.StatementBuilder.addTableName` @AccessFlag PROTECTED;
  `com.j256.ormlite.dao.Dao` `com.j256.ormlite.stmt.StatementBuilder.dao` @AccessFlag PROTECTED_FINAL;
  `com.j256.ormlite.db.DatabaseType` `com.j256.ormlite.stmt.StatementBuilder.databaseType` @AccessFlag PROTECTED_FINAL;
  `com.j256.ormlite.table.TableInfo` `com.j256.ormlite.stmt.StatementBuilder.tableInfo` @AccessFlag PROTECTED_FINAL;
  `java.lang.String` `com.j256.ormlite.stmt.StatementBuilder.tableName` @AccessFlag PROTECTED_FINAL;
  `com.j256.ormlite.stmt.StatementBuilder$StatementType` `com.j256.ormlite.stmt.StatementBuilder.type` @AccessFlag PROTECTED;
  `com.j256.ormlite.stmt.Where` `com.j256.ormlite.stmt.StatementBuilder.where` @AccessFlag PROTECTED;
}
global `com.j256.ormlite.logger.Logger` `@@com.j256.ormlite.stmt.StatementBuilder.logger` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L161108.  v0:= constclass @type ^`com.j256.ormlite.stmt.StatementBuilder` @kind object;
  #L16110c.  call temp:= `getLogger`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/Class;)Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L161112.  v0:= temp @kind object;
  #L161114.  `@@com.j256.ormlite.stmt.StatementBuilder.logger` @type ^`com.j256.ormlite.logger.Logger` := v0 @kind object;
  #L161118.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.StatementBuilder` v3 @kind this, `com.j256.ormlite.db.DatabaseType` v4 @kind object, `com.j256.ormlite.table.TableInfo` v5 @kind object, `com.j256.ormlite.dao.Dao` v6 @kind object, `com.j256.ormlite.stmt.StatementBuilder$StatementType` v7 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.<init>:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/dao/Dao;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L16112c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L161132.  v0:= 0I;
  #L161134.  v3.`com.j256.ormlite.stmt.StatementBuilder.where` @type ^`com.j256.ormlite.stmt.Where` := v0 @kind object;
  #L161138.  v3.`com.j256.ormlite.stmt.StatementBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` := v4 @kind object;
  #L16113c.  v3.`com.j256.ormlite.stmt.StatementBuilder.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` := v5 @kind object;
  #L161140.  call temp:= `getTableName`(v5) @signature `Lcom/j256/ormlite/table/TableInfo;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L161146.  v0:= temp @kind object;
  #L161148.  v3.`com.j256.ormlite.stmt.StatementBuilder.tableName` @type ^`java.lang.String` := v0 @kind object;
  #L16114c.  v3.`com.j256.ormlite.stmt.StatementBuilder.dao` @type ^`com.j256.ormlite.dao.Dao` := v6 @kind object;
  #L161150.  v3.`com.j256.ormlite.stmt.StatementBuilder.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` := v7 @kind object;
  #L161154.  call temp:= `isOkForStatementBuilder`(v7) @signature `Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;.isOkForStatementBuilder:()Z` @kind virtual;
  #L16115a.  v0:= temp;
  #L16115c.  if v0 != 0 then goto L16119e;
  #L161160.  v0:= new `java.lang.IllegalStateException`;
  #L161164.  v1:= new `java.lang.StringBuilder`;
  #L161168.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16116e.  v2:= "Building a statement from a " @kind object;
  #L161172.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161178.  v1:= temp @kind object;
  #L16117a.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161180.  v1:= temp @kind object;
  #L161182.  v2:= " statement is not allowed" @kind object;
  #L161186.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16118c.  v1:= temp @kind object;
  #L16118e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L161194.  v1:= temp @kind object;
  #L161196.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16119c.  throw v0;
  #L16119e.  return @kind void;
}
procedure `void` `appendStatementEnd`(`java.lang.StringBuilder` v0 @kind object, `java.util.List` v1 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendStatementEnd:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `appendStatementStart`(`java.lang.StringBuilder` v0 @kind object, `java.util.List` v1 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendStatementStart:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `appendStatementString`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendStatementString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1611b0.  call `appendStatementStart`(v1, v2, v3) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendStatementStart:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L1611b6.  v0:= `@@com.j256.ormlite.stmt.StatementBuilder$WhereOperation.FIRST` @type ^`com.j256.ormlite.stmt.StatementBuilder$WhereOperation` @kind object;
  #L1611ba.  call temp:= `appendWhereStatement`(v1, v2, v3, v0) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendWhereStatement:(Ljava/lang/StringBuilder;Ljava/util/List;Lcom/j256/ormlite/stmt/StatementBuilder$WhereOperation;)Z` @kind virtual;
  #L1611c0.  call `appendStatementEnd`(v1, v2, v3) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendStatementEnd:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L1611c6.  return @kind void;
}
procedure `boolean` `appendWhereStatement`(`com.j256.ormlite.stmt.StatementBuilder` v3 @kind this, `java.lang.StringBuilder` v4 @kind object, `java.util.List` v5 @kind object, `com.j256.ormlite.stmt.StatementBuilder$WhereOperation` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendWhereStatement:(Ljava/lang/StringBuilder;Ljava/util/List;Lcom/j256/ormlite/stmt/StatementBuilder$WhereOperation;)Z` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L1611d8.  v0:= 0I;
  #L1611da.  v1:= v3.`com.j256.ormlite.stmt.StatementBuilder.where` @type ^`com.j256.ormlite.stmt.Where` @kind object;
  #L1611de.  if v1 != 0 then goto L1611ee;
  #L1611e2.  v1:= `@@com.j256.ormlite.stmt.StatementBuilder$WhereOperation.FIRST` @type ^`com.j256.ormlite.stmt.StatementBuilder$WhereOperation` @kind object;
  #L1611e6.  if v6 != v1 then goto L1611ec;
  #L1611ea.  v0:= 1I;
  #L1611ec.  return v0;
  #L1611ee.  call `appendBefore`(v6, v4) @signature `Lcom/j256/ormlite/stmt/StatementBuilder$WhereOperation;.appendBefore:(Ljava/lang/StringBuilder;)V` @kind virtual;
  #L1611f4.  v2:= v3.`com.j256.ormlite.stmt.StatementBuilder.where` @type ^`com.j256.ormlite.stmt.Where` @kind object;
  #L1611f8.  v1:= v3.`com.j256.ormlite.stmt.StatementBuilder.addTableName` @type ^`boolean` @kind boolean;
  #L1611fc.  if v1 == 0 then goto L161216;
  #L161200.  call temp:= `getTableName`(v3) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L161206.  v1:= temp @kind object;
  #L161208.  call `appendSql`(v2, v1, v4, v5) @signature `Lcom/j256/ormlite/stmt/Where;.appendSql:(Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L16120e.  call `appendAfter`(v6, v4) @signature `Lcom/j256/ormlite/stmt/StatementBuilder$WhereOperation;.appendAfter:(Ljava/lang/StringBuilder;)V` @kind virtual;
  #L161214.  goto L1611ec;
  #L161216.  v1:= 0I;
  #L161218.  goto L161208;
}
procedure `java.lang.String` `buildStatementString`(`com.j256.ormlite.stmt.StatementBuilder` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.buildStatementString:(Ljava/util/List;)Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L16122c.  v0:= new `java.lang.StringBuilder`;
  #L161230.  v1:= 128I;
  #L161234.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L16123a.  call `appendStatementString`(v3, v0, v4) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendStatementString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L161240.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L161246.  v0:= temp @kind object;
  #L161248.  v1:= `@@com.j256.ormlite.stmt.StatementBuilder.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16124c.  v2:= "built statement {}" @kind object;
  #L161250.  call `debug`(v1, v2, v0) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L161256.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType`[] `getResultFieldTypes`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.getResultFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L161268.  v0:= 0I;
  #L16126a.  return v0 @kind object;
}
procedure `java.lang.String` `getTableName`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.getTableName:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L16127c.  v0:= v1.`com.j256.ormlite.stmt.StatementBuilder.tableName` @type ^`java.lang.String` @kind object;
  #L161280.  return v0 @kind object;
}
procedure `com.j256.ormlite.stmt.StatementBuilder$StatementType` `getType`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.getType:()Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;` @AccessFlag  {
    temp;
    v0;

  #L161294.  v0:= v1.`com.j256.ormlite.stmt.StatementBuilder.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L161298.  return v0 @kind object;
}
procedure `com.j256.ormlite.stmt.mapped.MappedPreparedStmt` `prepareStatement`(`com.j256.ormlite.stmt.StatementBuilder` v9 @kind this, `java.lang.Long` v10 @kind object, `boolean` v11 ) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.prepareStatement:(Ljava/lang/Long;Z)Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1612ac.  v0:= new `java.util.ArrayList`;
  #L1612b0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1612b6.  call temp:= `buildStatementString`(v9, v0) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.buildStatementString:(Ljava/util/List;)Ljava/lang/String;` @kind virtual;
  #L1612bc.  v2:= temp @kind object;
  #L1612be.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1612c4.  v1:= temp;
  #L1612c6.  v1:= new `com.j256.ormlite.stmt.ArgumentHolder`[v1];
  #L1612ca.  call temp:= `toArray`(v0, v1) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L1612d0.  v5:= temp @kind object;
  #L1612d2.  v5:= (`com.j256.ormlite.stmt.ArgumentHolder`[]) v5 @kind object;
  #L1612d6.  call temp:= `getResultFieldTypes`(v9) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.getResultFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L1612dc.  v4:= temp @kind object;
  #L1612de.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1612e4.  v0:= temp;
  #L1612e6.  v3:= new `com.j256.ormlite.field.FieldType`[v0];
  #L1612ea.  v0:= 0I;
  #L1612ec.  v1:= length @variable v5;
  #L1612ee.  if v0 >= v1 then goto L161308;
  #L1612f2.  v1:= v5[v0] @kind object;
  #L1612f6.  call temp:= `getFieldType`(v1) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.getFieldType:()Lcom/j256/ormlite/field/FieldType;` @kind interface;
  #L1612fc.  v1:= temp @kind object;
  #L1612fe.  v3[v0]:= v1 @kind object;
  #L161302.  v0:= v0 + 1;
  #L161306.  goto L1612ec;
  #L161308.  v0:= v9.`com.j256.ormlite.stmt.StatementBuilder.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L16130c.  call temp:= `isOkForStatementBuilder`(v0) @signature `Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;.isOkForStatementBuilder:()Z` @kind virtual;
  #L161312.  v0:= temp;
  #L161314.  if v0 != 0 then goto L16135a;
  #L161318.  v0:= new `java.lang.IllegalStateException`;
  #L16131c.  v1:= new `java.lang.StringBuilder`;
  #L161320.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L161326.  v2:= "Building a statement from a " @kind object;
  #L16132a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161330.  v1:= temp @kind object;
  #L161332.  v2:= v9.`com.j256.ormlite.stmt.StatementBuilder.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L161336.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16133c.  v1:= temp @kind object;
  #L16133e.  v2:= " statement is not allowed" @kind object;
  #L161342.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161348.  v1:= temp @kind object;
  #L16134a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L161350.  v1:= temp @kind object;
  #L161352.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L161358.  throw v0;
  #L16135a.  v0:= new `com.j256.ormlite.stmt.mapped.MappedPreparedStmt`;
  #L16135e.  v1:= v9.`com.j256.ormlite.stmt.StatementBuilder.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L161362.  v6:= v9.`com.j256.ormlite.stmt.StatementBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L161366.  call temp:= `isLimitSqlSupported`(v6) @signature `Lcom/j256/ormlite/db/DatabaseType;.isLimitSqlSupported:()Z` @kind interface;
  #L16136c.  v6:= temp;
  #L16136e.  if v6 == 0 then goto L161382;
  #L161372.  v6:= 0I;
  #L161374.  v7:= v9.`com.j256.ormlite.stmt.StatementBuilder.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L161378.  v8:= v11;
  #L16137a.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/stmt/ArgumentHolder;Ljava/lang/Long;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;Z)V` @kind direct;
  #L161380.  return v0 @kind object;
  #L161382.  v6:= v10 @kind object;
  #L161384.  goto L161374;
}
procedure `com.j256.ormlite.stmt.StatementBuilder$StatementInfo` `prepareStatementInfo`(`com.j256.ormlite.stmt.StatementBuilder` v4 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.prepareStatementInfo:()Lcom/j256/ormlite/stmt/StatementBuilder$StatementInfo;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L161398.  v0:= new `java.util.ArrayList`;
  #L16139c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1613a2.  call temp:= `buildStatementString`(v4, v0) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.buildStatementString:(Ljava/util/List;)Ljava/lang/String;` @kind virtual;
  #L1613a8.  v1:= temp @kind object;
  #L1613aa.  v2:= new `com.j256.ormlite.stmt.StatementBuilder$StatementInfo`;
  #L1613ae.  v3:= 0I;
  #L1613b0.  call `<init>`(v2, v1, v0, v3) @signature `Lcom/j256/ormlite/stmt/StatementBuilder$StatementInfo;.<init>:(Ljava/lang/String;Ljava/util/List;Lcom/j256/ormlite/stmt/StatementBuilder$1;)V` @kind direct;
  #L1613b6.  return v2 @kind object;
}
procedure `java.lang.String` `prepareStatementString`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.prepareStatementString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1613c8.  v0:= new `java.util.ArrayList`;
  #L1613cc.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1613d2.  call temp:= `buildStatementString`(v1, v0) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.buildStatementString:(Ljava/util/List;)Ljava/lang/String;` @kind virtual;
  #L1613d8.  v0:= temp @kind object;
  #L1613da.  return v0 @kind object;
}
procedure `void` `reset`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1613ec.  v0:= 0I;
  #L1613ee.  v1.`com.j256.ormlite.stmt.StatementBuilder.where` @type ^`com.j256.ormlite.stmt.Where` := v0 @kind object;
  #L1613f2.  return @kind void;
}
procedure `void` `setWhere`(`com.j256.ormlite.stmt.StatementBuilder` v0 @kind this, `com.j256.ormlite.stmt.Where` v1 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.setWhere:(Lcom/j256/ormlite/stmt/Where;)V` @AccessFlag PUBLIC {
    temp;

  #L161404.  v0.`com.j256.ormlite.stmt.StatementBuilder.where` @type ^`com.j256.ormlite.stmt.Where` := v1 @kind object;
  #L161408.  return @kind void;
}
procedure `boolean` `shouldPrependTableNameToColumns`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.shouldPrependTableNameToColumns:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L16141c.  v0:= 0I;
  #L16141e.  return v0;
}
procedure `com.j256.ormlite.field.FieldType` `verifyColumnName`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.verifyColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L161430.  v0:= v1.`com.j256.ormlite.stmt.StatementBuilder.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L161434.  call temp:= `getFieldTypeByColumnName`(v0, v2) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypeByColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16143a.  v0:= temp @kind object;
  #L16143c.  return v0 @kind object;
}
procedure `com.j256.ormlite.stmt.Where` `where`(`com.j256.ormlite.stmt.StatementBuilder` v3 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.where:()Lcom/j256/ormlite/stmt/Where;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L161450.  v0:= new `com.j256.ormlite.stmt.Where`;
  #L161454.  v1:= v3.`com.j256.ormlite.stmt.StatementBuilder.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L161458.  v2:= v3.`com.j256.ormlite.stmt.StatementBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L16145c.  call `<init>`(v0, v1, v3, v2) @signature `Lcom/j256/ormlite/stmt/Where;.<init>:(Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/stmt/StatementBuilder;Lcom/j256/ormlite/db/DatabaseType;)V` @kind direct;
  #L161462.  v3.`com.j256.ormlite.stmt.StatementBuilder.where` @type ^`com.j256.ormlite.stmt.Where` := v0 @kind object;
  #L161466.  v0:= v3.`com.j256.ormlite.stmt.StatementBuilder.where` @type ^`com.j256.ormlite.stmt.Where` @kind object;
  #L16146a.  return v0 @kind object;
}
