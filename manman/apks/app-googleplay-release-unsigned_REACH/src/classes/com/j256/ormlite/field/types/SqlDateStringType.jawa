record `com.j256.ormlite.field.types.SqlDateStringType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.DateStringType` @kind class {
}
global `com.j256.ormlite.field.types.SqlDateStringType` `@@com.j256.ormlite.field.types.SqlDateStringType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15dc9c.  v0:= new `com.j256.ormlite.field.types.SqlDateStringType`;
  #L15dca0.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.<init>:()V` @kind direct;
  #L15dca6.  `@@com.j256.ormlite.field.types.SqlDateStringType.singleTon` @type ^`com.j256.ormlite.field.types.SqlDateStringType` := v0 @kind object;
  #L15dcaa.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.SqlDateStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L15dcbc.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15dcc0.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L15dcc6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.SqlDateStringType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15dcd8.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15dcde.  return @kind void;
}
procedure `com.j256.ormlite.field.types.SqlDateStringType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.getSingleton:()Lcom/j256/ormlite/field/types/SqlDateStringType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15dcf0.  v0:= `@@com.j256.ormlite.field.types.SqlDateStringType.singleTon` @type ^`com.j256.ormlite.field.types.SqlDateStringType` @kind object;
  #L15dcf4.  return v0 @kind object;
}
procedure `boolean` `isValidForField`(`com.j256.ormlite.field.types.SqlDateStringType` v2 @kind this, `java.lang.reflect.Field` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.isValidForField:(Ljava/lang/reflect/Field;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15dd08.  call temp:= `getType`(v3) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15dd0e.  v0:= temp @kind object;
  #L15dd10.  v1:= constclass @type ^`java.sql.Date` @kind object;
  #L15dd14.  if v0 != v1 then goto L15dd1c;
  #L15dd18.  v0:= 1I;
  #L15dd1a.  return v0;
  #L15dd1c.  v0:= 0I;
  #L15dd1e.  goto L15dd1a;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.SqlDateStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15dd30.  v6:= (`java.sql.Date`) v6 @kind object;
  #L15dd34.  v0:= new `java.util.Date`;
  #L15dd38.  call temp:= `getTime`(v6) @signature `Ljava/sql/Date;.getTime:()J` @kind virtual;
  #L15dd3e.  v2:= temp @kind wide;
  #L15dd40.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L15dd46.  call temp:= `javaToSqlArg`(v4, v5, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @kind super;
  #L15dd4c.  v0:= temp @kind object;
  #L15dd4e.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.SqlDateStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15dd60.  call temp:= `sqlArgToJava`(v4, v5, v6, v7) @signature `Lcom/j256/ormlite/field/types/DateStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind super;
  #L15dd66.  v0:= temp @kind object;
  #L15dd68.  v0:= (`java.util.Date`) v0 @kind object;
  #L15dd6c.  v1:= new `java.sql.Date`;
  #L15dd70.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L15dd76.  v2:= temp @kind wide;
  #L15dd78.  call `<init>`(v1, v2) @signature `Ljava/sql/Date;.<init>:(J)V` @kind direct;
  #L15dd7e.  return v1 @kind object;
}
