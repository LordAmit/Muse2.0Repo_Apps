record `com.j256.ormlite.field.types.BooleanIntegerType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BooleanType` @kind class {
}
global `java.lang.Integer` `@@com.j256.ormlite.field.types.BooleanIntegerType.FALSE_VALUE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Integer` `@@com.j256.ormlite.field.types.BooleanIntegerType.TRUE_VALUE` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.j256.ormlite.field.types.BooleanIntegerType` `@@com.j256.ormlite.field.types.BooleanIntegerType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15b960.  v0:= 1I;
  #L15b962.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15b968.  v0:= temp @kind object;
  #L15b96a.  `@@com.j256.ormlite.field.types.BooleanIntegerType.TRUE_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L15b96e.  v0:= 0I;
  #L15b970.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15b976.  v0:= temp @kind object;
  #L15b978.  `@@com.j256.ormlite.field.types.BooleanIntegerType.FALSE_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L15b97c.  v0:= new `com.j256.ormlite.field.types.BooleanIntegerType`;
  #L15b980.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.<init>:()V` @kind direct;
  #L15b986.  `@@com.j256.ormlite.field.types.BooleanIntegerType.singleTon` @type ^`com.j256.ormlite.field.types.BooleanIntegerType` := v0 @kind object;
  #L15b98a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BooleanIntegerType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15b99c.  v0:= `@@com.j256.ormlite.field.SqlType.INTEGER` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15b9a0.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BooleanType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L15b9a6.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BooleanIntegerType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.getSingleton:()Lcom/j256/ormlite/field/types/BooleanIntegerType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15b9b8.  v0:= `@@com.j256.ormlite.field.types.BooleanIntegerType.singleTon` @type ^`com.j256.ormlite.field.types.BooleanIntegerType` @kind object;
  #L15b9bc.  return v0 @kind object;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.BooleanIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b9d0.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L15b9d4.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L15b9da.  v0:= temp;
  #L15b9dc.  if v0 == 0 then goto L15b9e6;
  #L15b9e0.  v0:= `@@com.j256.ormlite.field.types.BooleanIntegerType.TRUE_VALUE` @type ^`java.lang.Integer` @kind object;
  #L15b9e4.  return v0 @kind object;
  #L15b9e6.  v0:= `@@com.j256.ormlite.field.types.BooleanIntegerType.FALSE_VALUE` @type ^`java.lang.Integer` @kind object;
  #L15b9ea.  goto L15b9e4;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.BooleanIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b9fc.  call temp:= `parseBoolean`(v3) @signature `Ljava/lang/Boolean;.parseBoolean:(Ljava/lang/String;)Z` @kind static;
  #L15ba02.  v0:= temp;
  #L15ba04.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L15ba0a.  v0:= temp @kind object;
  #L15ba0c.  call temp:= `javaToSqlArg`(v1, v2, v0) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15ba12.  v0:= temp @kind object;
  #L15ba14.  return v0 @kind object;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.BooleanIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ba28.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15ba2e.  v0:= temp;
  #L15ba30.  if v0 != 0 then goto L15ba3a;
  #L15ba34.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L15ba38.  return v0 @kind object;
  #L15ba3a.  call temp:= `parseInt`(v3) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L15ba40.  v0:= temp;
  #L15ba42.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15ba48.  v0:= temp @kind object;
  #L15ba4a.  call temp:= `sqlArgToJava`(v1, v2, v0, v4) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L15ba50.  v0:= temp @kind object;
  #L15ba52.  goto L15ba38;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.BooleanIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ba64.  call temp:= `getInt`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getInt:(I)I` @kind interface;
  #L15ba6a.  v0:= temp;
  #L15ba6c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15ba72.  v0:= temp @kind object;
  #L15ba74.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.BooleanIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ba88.  v3:= (`java.lang.Integer`) v3 @kind object;
  #L15ba8c.  call temp:= `intValue`(v3) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L15ba92.  v0:= temp;
  #L15ba94.  if v0 != 0 then goto L15ba9e;
  #L15ba98.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L15ba9c.  return v0 @kind object;
  #L15ba9e.  v0:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L15baa2.  goto L15ba9c;
}
