record `com.j256.ormlite.field.types.BigDecimalStringType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `int` `@@com.j256.ormlite.field.types.BigDecimalStringType.DEFAULT_WIDTH` @AccessFlag PUBLIC_STATIC;
global `com.j256.ormlite.field.types.BigDecimalStringType` `@@com.j256.ormlite.field.types.BigDecimalStringType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15b180.  v0:= 255I;
  #L15b184.  `@@com.j256.ormlite.field.types.BigDecimalStringType.DEFAULT_WIDTH` @type ^`int` := v0;
  #L15b188.  v0:= new `com.j256.ormlite.field.types.BigDecimalStringType`;
  #L15b18c.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.<init>:()V` @kind direct;
  #L15b192.  `@@com.j256.ormlite.field.types.BigDecimalStringType.singleTon` @type ^`com.j256.ormlite.field.types.BigDecimalStringType` := v0 @kind object;
  #L15b196.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BigDecimalStringType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15b1a8.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15b1ac.  v1:= 1I;
  #L15b1ae.  v1:= new `java.lang.Class`[v1];
  #L15b1b2.  v2:= 0I;
  #L15b1b4.  v3:= constclass @type ^`java.math.BigDecimal` @kind object;
  #L15b1b8.  v1[v2]:= v3 @kind object;
  #L15b1bc.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15b1c2.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BigDecimalStringType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15b1d4.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15b1da.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BigDecimalStringType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.getSingleton:()Lcom/j256/ormlite/field/types/BigDecimalStringType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15b1ec.  v0:= `@@com.j256.ormlite.field.types.BigDecimalStringType.singleTon` @type ^`com.j256.ormlite.field.types.BigDecimalStringType` @kind object;
  #L15b1f0.  return v0 @kind object;
}
procedure `int` `getDefaultWidth`(`com.j256.ormlite.field.types.BigDecimalStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.getDefaultWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b204.  v0:= `@@com.j256.ormlite.field.types.BigDecimalStringType.DEFAULT_WIDTH` @type ^`int`;
  #L15b208.  return v0;
}
procedure `boolean` `isAppropriateId`(`com.j256.ormlite.field.types.BigDecimalStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.isAppropriateId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b21c.  v0:= 0I;
  #L15b21e.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.BigDecimalStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b230.  v3:= (`java.math.BigDecimal`) v3 @kind object;
  #L15b234.  call temp:= `toString`(v3) @signature `Ljava/math/BigDecimal;.toString:()Ljava/lang/String;` @kind virtual;
  #L15b23a.  v0:= temp @kind object;
  #L15b23c.  return v0 @kind object;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.BigDecimalStringType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L15b250.  v0:= new `java.math.BigDecimal`;
  #L15b254.  call `<init>`(v0, v5) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15b25a.  call temp:= `toString`(v0) @signature `Ljava/math/BigDecimal;.toString:()Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L15b260.  v0:= temp @kind object;
  #L15b262.  return v0 @kind object;
  #L15b264.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L15b266.  v1:= new `java.lang.StringBuilder`;
  #L15b26a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15b270.  v2:= "Problems with field " @kind object;
  #L15b274.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b27a.  v1:= temp @kind object;
  #L15b27c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b282.  v1:= temp @kind object;
  #L15b284.  v2:= " parsing default BigDecimal string '" @kind object;
  #L15b288.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b28e.  v1:= temp @kind object;
  #L15b290.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b296.  v1:= temp @kind object;
  #L15b298.  v2:= "'" @kind object;
  #L15b29c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b2a2.  v1:= temp @kind object;
  #L15b2a4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15b2aa.  v1:= temp @kind object;
  #L15b2ac.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15b2b2.  v0:= temp @kind object;
  #L15b2b4.  throw v0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L15b264;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.BigDecimalStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b2d8.  call temp:= `getString`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getString:(I)Ljava/lang/String;` @kind interface;
  #L15b2de.  v0:= temp @kind object;
  #L15b2e0.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.BigDecimalStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L15b2f4.  v2:= new `java.math.BigDecimal`;
  #L15b2f8.  v0:= v6 @kind object;
  #L15b2fa.  v0:= (`java.lang.String`) v0 @kind object;
  #L15b2fe.  v1:= v0 @kind object;
  #L15b300.  call `<init>`(v2, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #Try_end0.  
  #L15b306.  return v2 @kind object;
  #L15b308.  v1:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L15b30a.  v2:= new `java.lang.StringBuilder`;
  #L15b30e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15b314.  v3:= "Problems with column " @kind object;
  #L15b318.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b31e.  v2:= temp @kind object;
  #L15b320.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b326.  v2:= temp @kind object;
  #L15b328.  v3:= " parsing BigDecimal string '" @kind object;
  #L15b32c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b332.  v2:= temp @kind object;
  #L15b334.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b33a.  v2:= temp @kind object;
  #L15b33c.  v3:= "'" @kind object;
  #L15b340.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b346.  v2:= temp @kind object;
  #L15b348.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15b34e.  v2:= temp @kind object;
  #L15b350.  call temp:= `create`(v2, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15b356.  v1:= temp @kind object;
  #L15b358.  throw v1;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L15b308;
}
