record `com.j256.ormlite.dao.ReferenceObjectCache` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.dao.ObjectCache` @kind interface {
  `java.util.concurrent.ConcurrentHashMap` `com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.j256.ormlite.dao.ReferenceObjectCache.useWeak` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `boolean` v2 ) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L152928.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15292e.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L152932.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L152938.  v1.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L15293c.  v1.`com.j256.ormlite.dao.ReferenceObjectCache.useWeak` @type ^`boolean` := v2 @kind boolean;
  #L152940.  return @kind void;
}
procedure `void` `cleanMap`(`com.j256.ormlite.dao.ReferenceObjectCache` v2 @kind this, `java.util.Map` v3 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.cleanMap:(Ljava/util/Map;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L152954.  call temp:= `entrySet`(v3) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L15295a.  v0:= temp @kind object;
  #L15295c.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L152962.  v1:= temp @kind object;
  #L152964.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15296a.  v0:= temp;
  #L15296c.  if v0 == 0 then goto L15299c;
  #L152970.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L152976.  v0:= temp @kind object;
  #L152978.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L15297c.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L152982.  v0:= temp @kind object;
  #L152984.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L152988.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L15298e.  v0:= temp @kind object;
  #L152990.  if v0 != 0 then goto L152964;
  #L152994.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L15299a.  goto L152964;
  #L15299c.  return @kind void;
}
procedure `java.util.Map` `getMapForClass`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1529b0.  v0:= v1.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L1529b4.  call temp:= `get`(v0, v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1529ba.  v0:= temp @kind object;
  #L1529bc.  v0:= (`java.util.Map`) v0 @kind object;
  #L1529c0.  if v0 != 0 then goto L1529c6;
  #L1529c4.  v0:= 0I;
  #L1529c6.  return v0 @kind object;
}
procedure `com.j256.ormlite.dao.ReferenceObjectCache` `makeSoftCache`() @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.makeSoftCache:()Lcom/j256/ormlite/dao/ReferenceObjectCache;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1529d8.  v0:= new `com.j256.ormlite.dao.ReferenceObjectCache`;
  #L1529dc.  v1:= 0I;
  #L1529de.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.<init>:(Z)V` @kind direct;
  #L1529e4.  return v0 @kind object;
}
procedure `com.j256.ormlite.dao.ReferenceObjectCache` `makeWeakCache`() @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.makeWeakCache:()Lcom/j256/ormlite/dao/ReferenceObjectCache;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1529f8.  v0:= new `com.j256.ormlite.dao.ReferenceObjectCache`;
  #L1529fc.  v1:= 1I;
  #L1529fe.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.<init>:(Z)V` @kind direct;
  #L152a04.  return v0 @kind object;
}
procedure `void` `cleanNullReferences`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.cleanNullReferences:(Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L152a18.  call temp:= `getMapForClass`(v1, v2) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L152a1e.  v0:= temp @kind object;
  #L152a20.  if v0 == 0 then goto L152a2a;
  #L152a24.  call `cleanMap`(v1, v0) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.cleanMap:(Ljava/util/Map;)V` @kind direct;
  #L152a2a.  return @kind void;
}
procedure `void` `cleanNullReferencesAll`(`com.j256.ormlite.dao.ReferenceObjectCache` v2 @kind this) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.cleanNullReferencesAll:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L152a3c.  v0:= v2.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L152a40.  call temp:= `values`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L152a46.  v0:= temp @kind object;
  #L152a48.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L152a4e.  v1:= temp @kind object;
  #L152a50.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L152a56.  v0:= temp;
  #L152a58.  if v0 == 0 then goto L152a70;
  #L152a5c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L152a62.  v0:= temp @kind object;
  #L152a64.  v0:= (`java.util.Map`) v0 @kind object;
  #L152a68.  call `cleanMap`(v2, v0) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.cleanMap:(Ljava/util/Map;)V` @kind direct;
  #L152a6e.  goto L152a50;
  #L152a70.  return @kind void;
}
procedure `void` `clear`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.clear:(Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L152a84.  call temp:= `getMapForClass`(v1, v2) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L152a8a.  v0:= temp @kind object;
  #L152a8c.  if v0 == 0 then goto L152a96;
  #L152a90.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L152a96.  return @kind void;
}
procedure `void` `clearAll`(`com.j256.ormlite.dao.ReferenceObjectCache` v2 @kind this) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.clearAll:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L152aa8.  v0:= v2.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L152aac.  call temp:= `values`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L152ab2.  v0:= temp @kind object;
  #L152ab4.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L152aba.  v1:= temp @kind object;
  #L152abc.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L152ac2.  v0:= temp;
  #L152ac4.  if v0 == 0 then goto L152adc;
  #L152ac8.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L152ace.  v0:= temp @kind object;
  #L152ad0.  v0:= (`java.util.Map`) v0 @kind object;
  #L152ad4.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L152ada.  goto L152abc;
  #L152adc.  return @kind void;
}
procedure `java.lang.Object` `get`(`com.j256.ormlite.dao.ReferenceObjectCache` v3 @kind this, `java.lang.Class` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.get:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L152af0.  v1:= 0I;
  #L152af2.  call temp:= `getMapForClass`(v3, v4) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L152af8.  v2:= temp @kind object;
  #L152afa.  if v2 != 0 then goto L152b02;
  #L152afe.  v0:= v1 @kind object;
  #L152b00.  return v0 @kind object;
  #L152b02.  call temp:= `get`(v2, v5) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L152b08.  v0:= temp @kind object;
  #L152b0a.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L152b0e.  if v0 != 0 then goto L152b16;
  #L152b12.  v0:= v1 @kind object;
  #L152b14.  goto L152b00;
  #L152b16.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L152b1c.  v0:= temp @kind object;
  #L152b1e.  if v0 != 0 then goto L152b00;
  #L152b22.  call temp:= `remove`(v2, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L152b28.  v0:= v1 @kind object;
  #L152b2a.  goto L152b00;
}
procedure `void` `put`(`com.j256.ormlite.dao.ReferenceObjectCache` v2 @kind this, `java.lang.Class` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.put:(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L152b3c.  call temp:= `getMapForClass`(v2, v3) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L152b42.  v0:= temp @kind object;
  #L152b44.  if v0 == 0 then goto L152b60;
  #L152b48.  v1:= v2.`com.j256.ormlite.dao.ReferenceObjectCache.useWeak` @type ^`boolean` @kind boolean;
  #L152b4c.  if v1 == 0 then goto L152b62;
  #L152b50.  v1:= new `java.lang.ref.WeakReference`;
  #L152b54.  call `<init>`(v1, v5) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L152b5a.  call temp:= `put`(v0, v4, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L152b60.  return @kind void;
  #L152b62.  v1:= new `java.lang.ref.SoftReference`;
  #L152b66.  call `<init>`(v1, v5) @signature `Ljava/lang/ref/SoftReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L152b6c.  call temp:= `put`(v0, v4, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L152b72.  goto L152b60;
}
procedure `void` `registerClass`(`com.j256.ormlite.dao.ReferenceObjectCache` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.registerClass:(Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L152b84.  @monitorenter v2
  #Try_start0.  
  #L152b86.  v0:= v2.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L152b8a.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L152b90.  v0:= temp @kind object;
  #L152b92.  v0:= (`java.util.Map`) v0 @kind object;
  #L152b96.  if v0 != 0 then goto L152bae;
  #L152b9a.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L152b9e.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L152ba4.  v1:= v2.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L152ba8.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L152bae.  @monitorexit v2
  #L152bb0.  return @kind void;
  #L152bb2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L152bb4.  @monitorexit v2
  #L152bb6.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L152bb2;
}
procedure `void` `remove`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.remove:(Ljava/lang/Class;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L152bd4.  call temp:= `getMapForClass`(v1, v2) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L152bda.  v0:= temp @kind object;
  #L152bdc.  if v0 == 0 then goto L152be6;
  #L152be0.  call temp:= `remove`(v0, v3) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L152be6.  return @kind void;
}
procedure `int` `size`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.size:(Ljava/lang/Class;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L152bf8.  call temp:= `getMapForClass`(v1, v2) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L152bfe.  v0:= temp @kind object;
  #L152c00.  if v0 != 0 then goto L152c08;
  #L152c04.  v0:= 0I;
  #L152c06.  return v0;
  #L152c08.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L152c0e.  v0:= temp;
  #L152c10.  goto L152c06;
}
procedure `int` `sizeAll`(`com.j256.ormlite.dao.ReferenceObjectCache` v3 @kind this) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.sizeAll:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L152c24.  v0:= 0I;
  #L152c26.  v1:= v3.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L152c2a.  call temp:= `values`(v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L152c30.  v1:= temp @kind object;
  #L152c32.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L152c38.  v2:= temp @kind object;
  #L152c3a.  v1:= v0;
  #L152c3c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L152c42.  v0:= temp;
  #L152c44.  if v0 == 0 then goto L152c62;
  #L152c48.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L152c4e.  v0:= temp @kind object;
  #L152c50.  v0:= (`java.util.Map`) v0 @kind object;
  #L152c54.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L152c5a.  v0:= temp;
  #L152c5c.  v0:= v0 + v1 @kind int;
  #L152c5e.  v1:= v0;
  #L152c60.  goto L152c3c;
  #L152c62.  return v1;
}
procedure `java.lang.Object` `updateId`(`com.j256.ormlite.dao.ReferenceObjectCache` v3 @kind this, `java.lang.Class` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.updateId:(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L152c74.  v1:= 0I;
  #L152c76.  call temp:= `getMapForClass`(v3, v4) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L152c7c.  v2:= temp @kind object;
  #L152c7e.  if v2 != 0 then goto L152c86;
  #L152c82.  v0:= v1 @kind object;
  #L152c84.  return v0 @kind object;
  #L152c86.  call temp:= `remove`(v2, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L152c8c.  v0:= temp @kind object;
  #L152c8e.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L152c92.  if v0 != 0 then goto L152c9a;
  #L152c96.  v0:= v1 @kind object;
  #L152c98.  goto L152c84;
  #L152c9a.  call temp:= `put`(v2, v6, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L152ca0.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L152ca6.  v0:= temp @kind object;
  #L152ca8.  goto L152c84;
}
