record `com.j256.ormlite.stmt.query.InSubQuery` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.query.BaseComparison` @kind class {
  `boolean` `com.j256.ormlite.stmt.query.InSubQuery.in` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper` `com.j256.ormlite.stmt.query.InSubQuery.subQueryBuilder` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.InSubQuery` v2 @kind this, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper` v5 @kind object, `boolean` v6 ) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/stmt/QueryBuilder$InternalQueryBuilderWrapper;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1681d0.  v0:= 0I;
  #L1681d2.  v1:= 1I;
  #L1681d4.  call `<init>`(v2, v3, v4, v0, v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Z)V` @kind direct;
  #L1681da.  v2.`com.j256.ormlite.stmt.query.InSubQuery.subQueryBuilder` @type ^`com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper` := v5 @kind object;
  #L1681de.  v2.`com.j256.ormlite.stmt.query.InSubQuery.in` @type ^`boolean` := v6 @kind boolean;
  #L1681e2.  return @kind void;
}
procedure `void` `appendOperation`(`com.j256.ormlite.stmt.query.InSubQuery` v1 @kind this, `java.lang.StringBuilder` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.appendOperation:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1681f4.  v0:= v1.`com.j256.ormlite.stmt.query.InSubQuery.in` @type ^`boolean` @kind boolean;
  #L1681f8.  if v0 == 0 then goto L168208;
  #L1681fc.  v0:= "IN " @kind object;
  #L168200.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L168206.  return @kind void;
  #L168208.  v0:= "NOT IN " @kind object;
  #L16820c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L168212.  goto L168206;
}
procedure `void` `appendSql`(`com.j256.ormlite.stmt.query.InSubQuery` v0 @kind this, `com.j256.ormlite.db.DatabaseType` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.StringBuilder` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L168224.  call `appendSql`(v0, v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind super;
  #L16822a.  return @kind void;
}
procedure `void` `appendValue`(`com.j256.ormlite.stmt.query.InSubQuery` v5 @kind this, `com.j256.ormlite.db.DatabaseType` v6 @kind object, `java.lang.StringBuilder` v7 @kind object, `java.util.List` v8 @kind object) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16823c.  v4:= 0I;
  #L16823e.  v0:= 40I;
  #L168242.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L168248.  v0:= v5.`com.j256.ormlite.stmt.query.InSubQuery.subQueryBuilder` @type ^`com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper` @kind object;
  #L16824c.  call `appendStatementString`(v0, v7, v8) @signature `Lcom/j256/ormlite/stmt/QueryBuilder$InternalQueryBuilderWrapper;.appendStatementString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L168252.  v0:= v5.`com.j256.ormlite.stmt.query.InSubQuery.subQueryBuilder` @type ^`com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper` @kind object;
  #L168256.  call temp:= `getResultFieldTypes`(v0) @signature `Lcom/j256/ormlite/stmt/QueryBuilder$InternalQueryBuilderWrapper;.getResultFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16825c.  v0:= temp @kind object;
  #L16825e.  if v0 != 0 then goto L16826e;
  #L168262.  v0:= ") " @kind object;
  #L168266.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16826c.  return @kind void;
  #L16826e.  v1:= length @variable v0;
  #L168270.  v2:= 1I;
  #L168272.  if v1 == v2 then goto L1682aa;
  #L168276.  v1:= new `java.sql.SQLException`;
  #L16827a.  v2:= new `java.lang.StringBuilder`;
  #L16827e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L168284.  v3:= "There must be only 1 result column in sub-query but we found " @kind object;
  #L168288.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16828e.  v2:= temp @kind object;
  #L168290.  v0:= length @variable v0;
  #L168292.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L168298.  v0:= temp @kind object;
  #L16829a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1682a0.  v0:= temp @kind object;
  #L1682a2.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1682a8.  throw v1;
  #L1682aa.  v1:= v5.`com.j256.ormlite.stmt.query.InSubQuery.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1682ae.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L1682b4.  v1:= temp @kind object;
  #L1682b6.  v2:= v0[v4] @kind object;
  #L1682ba.  call temp:= `getSqlType`(v2) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L1682c0.  v2:= temp @kind object;
  #L1682c2.  if v1 == v2 then goto L168262;
  #L1682c6.  v1:= new `java.sql.SQLException`;
  #L1682ca.  v2:= new `java.lang.StringBuilder`;
  #L1682ce.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1682d4.  v3:= "Outer column " @kind object;
  #L1682d8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1682de.  v2:= temp @kind object;
  #L1682e0.  v3:= v5.`com.j256.ormlite.stmt.query.InSubQuery.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1682e4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1682ea.  v2:= temp @kind object;
  #L1682ec.  v3:= " is not the same type as inner column " @kind object;
  #L1682f0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1682f6.  v2:= temp @kind object;
  #L1682f8.  v0:= v0[v4] @kind object;
  #L1682fc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L168302.  v0:= temp @kind object;
  #L168304.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16830a.  v0:= temp @kind object;
  #L16830c.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L168312.  throw v1;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.stmt.query.InSubQuery` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L168324.  call temp:= `getColumnName`(v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.getColumnName:()Ljava/lang/String;` @kind super;
  #L16832a.  v0:= temp @kind object;
  #L16832c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.query.InSubQuery` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L168340.  call temp:= `toString`(v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.toString:()Ljava/lang/String;` @kind super;
  #L168346.  v0:= temp @kind object;
  #L168348.  return v0 @kind object;
}
