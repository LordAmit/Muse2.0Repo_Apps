record `com.j256.ormlite.field.types.DateTimeType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `java.lang.String`[] `@@com.j256.ormlite.field.types.DateTimeType.associatedClassNames` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Class` `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @AccessFlag PRIVATE_STATIC;
global `java.lang.reflect.Method` `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @AccessFlag PRIVATE_STATIC;
global `java.lang.reflect.Constructor` `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @AccessFlag PRIVATE_STATIC;
global `com.j256.ormlite.field.types.DateTimeType` `@@com.j256.ormlite.field.types.DateTimeType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L15c368.  v1:= 0I;
  #L15c36a.  v0:= new `com.j256.ormlite.field.types.DateTimeType`;
  #L15c36e.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<init>:()V` @kind direct;
  #L15c374.  `@@com.j256.ormlite.field.types.DateTimeType.singleTon` @type ^`com.j256.ormlite.field.types.DateTimeType` := v0 @kind object;
  #L15c378.  `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` := v1 @kind object;
  #L15c37c.  `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L15c380.  `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` := v1 @kind object;
  #L15c384.  v0:= 1I;
  #L15c386.  v0:= new `java.lang.String`[v0];
  #L15c38a.  v1:= 0I;
  #L15c38c.  v2:= "org.joda.time.DateTime" @kind object;
  #L15c390.  v0[v1]:= v2 @kind object;
  #L15c394.  `@@com.j256.ormlite.field.types.DateTimeType.associatedClassNames` @type ^`java.lang.String`[] := v0 @kind object;
  #L15c398.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L15c3ac.  v0:= `@@com.j256.ormlite.field.SqlType.LONG` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15c3b0.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L15c3b6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateTimeType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15c3c8.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15c3ce.  return @kind void;
}
procedure `java.lang.Object` `createInstance`(`com.j256.ormlite.field.types.DateTimeType` v4 @kind this, `java.lang.Long` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L15c3e0.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` @kind object;
  #L15c3e4.  if v0 != 0 then goto L15c40c;
  #L15c3e8.  call temp:= `getDateTimeClass`(v4) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @kind direct;
  #L15c3ee.  v0:= temp @kind object;
  #L15c3f0.  v1:= 1I;
  #L15c3f2.  v1:= new `java.lang.Class`[v1];
  #L15c3f6.  v2:= 0I;
  #L15c3f8.  v3:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L15c3fc.  v1[v2]:= v3 @kind object;
  #L15c400.  call temp:= `getConstructor`(v0, v1) @signature `Ljava/lang/Class;.getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L15c406.  v0:= temp @kind object;
  #L15c408.  `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` := v0 @kind object;
  #L15c40c.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` @kind object;
  #L15c410.  v1:= 1I;
  #L15c412.  v1:= new `java.lang.Object`[v1];
  #L15c416.  v2:= 0I;
  #L15c418.  v1[v2]:= v5 @kind object;
  #L15c41c.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L15c422.  v0:= temp @kind object;
  #L15c424.  return v0 @kind object;
  #L15c426.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L15c428.  v1:= "Could not use reflection to construct a Joda DateTime" @kind object;
  #L15c42c.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15c432.  v0:= temp @kind object;
  #L15c434.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L15c426;
}
procedure `java.lang.Long` `extractMillis`(`com.j256.ormlite.field.types.DateTimeType` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.extractMillis:(Ljava/lang/Object;)Ljava/lang/Long;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L15c458.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L15c45c.  if v0 != 0 then goto L15c47e;
  #L15c460.  call temp:= `getDateTimeClass`(v3) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @kind direct;
  #L15c466.  v0:= temp @kind object;
  #L15c468.  v1:= "getMillis" @kind object;
  #L15c46c.  v2:= 0I;
  #L15c46e.  v2:= new `java.lang.Class`[v2];
  #L15c472.  call temp:= `getMethod`(v0, v1, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L15c478.  v0:= temp @kind object;
  #L15c47a.  `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L15c47e.  if v4 != 0 then goto L15c486;
  #L15c482.  v0:= 0I;
  #L15c484.  return v0 @kind object;
  #L15c486.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L15c48a.  v1:= 0I;
  #L15c48c.  v1:= new `java.lang.Object`[v1];
  #L15c490.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15c496.  v0:= temp @kind object;
  #L15c498.  v0:= (`java.lang.Long`) v0 @kind object;
  #Try_end0.  
  #L15c49c.  goto L15c484;
  #L15c49e.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L15c4a0.  v1:= new `java.lang.StringBuilder`;
  #L15c4a4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15c4aa.  v2:= "Could not use reflection to get millis from Joda DateTime: " @kind object;
  #L15c4ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c4b4.  v1:= temp @kind object;
  #L15c4b6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c4bc.  v1:= temp @kind object;
  #L15c4be.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15c4c4.  v1:= temp @kind object;
  #L15c4c6.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15c4cc.  v0:= temp @kind object;
  #L15c4ce.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L15c49e;
}
procedure `java.lang.Class` `getDateTimeClass`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L15c4f0.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` @kind object;
  #L15c4f4.  if v0 != 0 then goto L15c508;
  #L15c4f8.  v0:= "org.joda.time.DateTime" @kind object;
  #L15c4fc.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L15c502.  v0:= temp @kind object;
  #L15c504.  `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` := v0 @kind object;
  #L15c508.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` @kind object;
  #L15c50c.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.types.DateTimeType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getSingleton:()Lcom/j256/ormlite/field/types/DateTimeType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15c520.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.singleTon` @type ^`com.j256.ormlite.field.types.DateTimeType` @kind object;
  #L15c524.  return v0 @kind object;
}
procedure `java.lang.String`[] `getAssociatedClassNames`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getAssociatedClassNames:()[Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c538.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.associatedClassNames` @type ^`java.lang.String`[] @kind object;
  #L15c53c.  return v0 @kind object;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #Try_start0.  
  #L15c550.  call temp:= `getDateTimeClass`(v1) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @kind direct;
  #Try_end0.  
  #L15c556.  v0:= temp @kind object;
  #L15c558.  return v0 @kind object;
  #L15c55a.  v0:= Exception @type ^`java.lang.ClassNotFoundException` @kind object;
  #L15c55c.  v0:= 0I;
  #L15c55e.  goto L15c558;
  catch `java.lang.ClassNotFoundException` @[Try_start0..Try_end0] goto L15c55a;
}
procedure `boolean` `isAppropriateId`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.isAppropriateId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c580.  v0:= 0I;
  #L15c582.  return v0;
}
procedure `boolean` `isEscapedValue`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.isEscapedValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c594.  v0:= 0I;
  #L15c596.  return v0;
}
procedure `boolean` `isValidForVersion`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.isValidForVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c5a8.  v0:= 1I;
  #L15c5aa.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c5bc.  call temp:= `extractMillis`(v1, v3) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.extractMillis:(Ljava/lang/Object;)Ljava/lang/Long;` @kind direct;
  #L15c5c2.  v0:= temp @kind object;
  #L15c5c4.  return v0 @kind object;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.DateTimeType` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c5d8.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L15c5de.  v0:= temp @kind wide;
  #L15c5e0.  if v5 != 0 then goto L15c5f6;
  #L15c5e4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L15c5ea.  v0:= temp @kind object;
  #L15c5ec.  call temp:= `createInstance`(v4, v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L15c5f2.  v0:= temp @kind object;
  #L15c5f4.  return v0 @kind object;
  #L15c5f6.  call temp:= `extractMillis`(v4, v5) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.extractMillis:(Ljava/lang/Object;)Ljava/lang/Long;` @kind direct;
  #L15c5fc.  v2:= temp @kind object;
  #L15c5fe.  call temp:= `longValue`(v2) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L15c604.  v2:= temp @kind wide;
  #L15c606.  v2:= lcmp(v0, v2);
  #L15c60a.  if v2 != 0 then goto L15c626;
  #L15c60e.  v2:= 1L;
  #L15c612.  v0:= v0 + v2 @kind long;
  #L15c614.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L15c61a.  v0:= temp @kind object;
  #L15c61c.  call temp:= `createInstance`(v4, v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L15c622.  v0:= temp @kind object;
  #L15c624.  goto L15c5f4;
  #L15c626.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L15c62c.  v0:= temp @kind object;
  #L15c62e.  call temp:= `createInstance`(v4, v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L15c634.  v0:= temp @kind object;
  #L15c636.  goto L15c5f4;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.DateTimeType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L15c648.  call temp:= `parseLong`(v5) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L15c64e.  v0:= temp @kind wide;
  #L15c650.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #Try_end0.  
  #L15c656.  v0:= temp @kind object;
  #L15c658.  return v0 @kind object;
  #L15c65a.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L15c65c.  v1:= new `java.lang.StringBuilder`;
  #L15c660.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15c666.  v2:= "Problems with field " @kind object;
  #L15c66a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c670.  v1:= temp @kind object;
  #L15c672.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c678.  v1:= temp @kind object;
  #L15c67a.  v2:= " parsing default DateTime value: " @kind object;
  #L15c67e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c684.  v1:= temp @kind object;
  #L15c686.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c68c.  v1:= temp @kind object;
  #L15c68e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15c694.  v1:= temp @kind object;
  #L15c696.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15c69c.  v0:= temp @kind object;
  #L15c69e.  throw v0;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L15c65a;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.DateTimeType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `com.j256.ormlite.support.DatabaseResults` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15c6c0.  call temp:= `getLong`(v4, v5) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getLong:(I)J` @kind interface;
  #L15c6c6.  v0:= temp @kind wide;
  #L15c6c8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L15c6ce.  v0:= temp @kind object;
  #L15c6d0.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c6e4.  v3:= (`java.lang.Long`) v3 @kind object;
  #L15c6e8.  call temp:= `createInstance`(v1, v3) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L15c6ee.  v0:= temp @kind object;
  #L15c6f0.  return v0 @kind object;
}
