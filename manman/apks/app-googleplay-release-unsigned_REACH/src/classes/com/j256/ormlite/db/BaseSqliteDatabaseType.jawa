record `com.j256.ormlite.db.BaseSqliteDatabaseType` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.db.BaseDatabaseType` @kind class {
}
global `com.j256.ormlite.field.FieldConverter` `@@com.j256.ormlite.db.BaseSqliteDatabaseType.booleanConverter` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L155578.  v0:= new `com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter`;
  #L15557c.  call `<init>`(v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.<init>:()V` @kind direct;
  #L155582.  `@@com.j256.ormlite.db.BaseSqliteDatabaseType.booleanConverter` @type ^`com.j256.ormlite.field.FieldConverter` := v0 @kind object;
  #L155586.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v0 @kind this) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L155598.  call `<init>`(v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.<init>:()V` @kind direct;
  #L15559e.  return @kind void;
}
procedure `void` `appendInsertNoColumns`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.appendInsertNoColumns:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1555b0.  v0:= "DEFAULT VALUES" @kind object;
  #L1555b4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1555ba.  return @kind void;
}
procedure `void` `appendLongType`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.appendLongType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L1555cc.  call temp:= `getSqlType`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L1555d2.  v0:= temp @kind object;
  #L1555d4.  v1:= `@@com.j256.ormlite.field.SqlType.LONG` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L1555d8.  if v0 != v1 then goto L1555f4;
  #L1555dc.  call temp:= `isGeneratedId`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L1555e2.  v0:= temp;
  #L1555e4.  if v0 == 0 then goto L1555f4;
  #L1555e8.  v0:= "INTEGER" @kind object;
  #L1555ec.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1555f2.  return @kind void;
  #L1555f4.  v0:= "BIGINT" @kind object;
  #L1555f8.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1555fe.  goto L1555f2;
}
procedure `void` `configureGeneratedId`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.StringBuilder` v4 @kind object, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.util.List` v6 @kind object, `java.util.List` v7 @kind object, `java.util.List` v8 @kind object, `java.util.List` v9 @kind object) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.configureGeneratedId:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L155610.  call temp:= `getSqlType`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L155616.  v0:= temp @kind object;
  #L155618.  v1:= `@@com.j256.ormlite.field.SqlType.INTEGER` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15561c.  if v0 == v1 then goto L155640;
  #L155620.  call temp:= `getSqlType`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L155626.  v0:= temp @kind object;
  #L155628.  v1:= `@@com.j256.ormlite.field.SqlType.LONG` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15562c.  if v0 == v1 then goto L155640;
  #L155630.  v0:= new `java.lang.IllegalArgumentException`;
  #L155634.  v1:= "Sqlite requires that auto-increment generated-id be integer or long type" @kind object;
  #L155638.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15563e.  throw v0;
  #L155640.  v0:= "PRIMARY KEY AUTOINCREMENT " @kind object;
  #L155644.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15564a.  return @kind void;
}
procedure `boolean` `generatedIdSqlAtEnd`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.generatedIdSqlAtEnd:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15565c.  v0:= 0I;
  #L15565e.  return v0;
}
procedure `com.j256.ormlite.field.FieldConverter` `getFieldConverter`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v2 @kind this, `com.j256.ormlite.field.DataPersister` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.getFieldConverter:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/FieldConverter;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L155670.  v0:= `@@com.j256.ormlite.db.BaseSqliteDatabaseType$1.$SwitchMap$com$j256$ormlite$field$SqlType` @type ^`int`[] @kind object;
  #L155674.  call temp:= `getSqlType`(v3) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L15567a.  v1:= temp @kind object;
  #L15567c.  call temp:= `ordinal`(v1) @signature `Lcom/j256/ormlite/field/SqlType;.ordinal:()I` @kind virtual;
  #L155682.  v1:= temp;
  #L155684.  v0:= v0[v1];
  #L155688.  goto L1556a8;
  #L15568e.  call temp:= `getFieldConverter`(v2, v3, v4) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getFieldConverter:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/FieldConverter;` @kind super;
  #L155694.  v0:= temp @kind object;
  #L155696.  return v0 @kind object;
  #L155698.  v0:= `@@com.j256.ormlite.db.BaseSqliteDatabaseType.booleanConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L15569c.  goto L155696;
  #L15569e.  call temp:= `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.getSingleton:()Lcom/j256/ormlite/field/types/BigDecimalStringType;` @kind static;
  #L1556a4.  v0:= temp @kind object;
  #L1556a6.  goto L155696;
  #L1556a8.  switch v0
                  | 1 => goto L155698
                  | 2 => goto L15569e
                  | else => goto L15568e;
}
procedure `boolean` `isCreateIfNotExistsSupported`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.isCreateIfNotExistsSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1556c8.  v0:= 1I;
  #L1556ca.  return v0;
}
procedure `boolean` `isCreateTableReturnsZero`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.isCreateTableReturnsZero:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1556dc.  v0:= 0I;
  #L1556de.  return v0;
}
procedure `boolean` `isVarcharFieldWidthSupported`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.isVarcharFieldWidthSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1556f0.  v0:= 0I;
  #L1556f2.  return v0;
}
