record `com.j256.ormlite.field.types.BigIntegerType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `int` `@@com.j256.ormlite.field.types.BigIntegerType.DEFAULT_WIDTH` @AccessFlag PUBLIC_STATIC;
global `com.j256.ormlite.field.types.BigIntegerType` `@@com.j256.ormlite.field.types.BigIntegerType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15b37c.  v0:= 255I;
  #L15b380.  `@@com.j256.ormlite.field.types.BigIntegerType.DEFAULT_WIDTH` @type ^`int` := v0;
  #L15b384.  v0:= new `com.j256.ormlite.field.types.BigIntegerType`;
  #L15b388.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.<init>:()V` @kind direct;
  #L15b38e.  `@@com.j256.ormlite.field.types.BigIntegerType.singleTon` @type ^`com.j256.ormlite.field.types.BigIntegerType` := v0 @kind object;
  #L15b392.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BigIntegerType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15b3a4.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15b3a8.  v1:= 1I;
  #L15b3aa.  v1:= new `java.lang.Class`[v1];
  #L15b3ae.  v2:= 0I;
  #L15b3b0.  v3:= constclass @type ^`java.math.BigInteger` @kind object;
  #L15b3b4.  v1[v2]:= v3 @kind object;
  #L15b3b8.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15b3be.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BigIntegerType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15b3d0.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15b3d6.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BigIntegerType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.getSingleton:()Lcom/j256/ormlite/field/types/BigIntegerType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15b3e8.  v0:= `@@com.j256.ormlite.field.types.BigIntegerType.singleTon` @type ^`com.j256.ormlite.field.types.BigIntegerType` @kind object;
  #L15b3ec.  return v0 @kind object;
}
procedure `java.lang.Object` `convertIdNumber`(`com.j256.ormlite.field.types.BigIntegerType` v2 @kind this, `java.lang.Number` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.convertIdNumber:(Ljava/lang/Number;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15b400.  call temp:= `longValue`(v3) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L15b406.  v0:= temp @kind wide;
  #L15b408.  call temp:= `valueOf`(v0) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L15b40e.  v0:= temp @kind object;
  #L15b410.  return v0 @kind object;
}
procedure `boolean` `isValidForVersion`(`com.j256.ormlite.field.types.BigIntegerType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.isValidForVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b424.  v0:= 1I;
  #L15b426.  return v0;
}
procedure `boolean` `isValidGeneratedType`(`com.j256.ormlite.field.types.BigIntegerType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.isValidGeneratedType:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b438.  v0:= 1I;
  #L15b43a.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.BigIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b44c.  v3:= (`java.math.BigInteger`) v3 @kind object;
  #L15b450.  call temp:= `toString`(v3) @signature `Ljava/math/BigInteger;.toString:()Ljava/lang/String;` @kind virtual;
  #L15b456.  v0:= temp @kind object;
  #L15b458.  return v0 @kind object;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.BigIntegerType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b46c.  if v2 != 0 then goto L15b476;
  #L15b470.  v0:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L15b474.  return v0 @kind object;
  #L15b476.  v2:= (`java.math.BigInteger`) v2 @kind object;
  #L15b47a.  v0:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L15b47e.  call temp:= `add`(v2, v0) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L15b484.  v0:= temp @kind object;
  #L15b486.  goto L15b474;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.BigIntegerType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L15b498.  v0:= new `java.math.BigInteger`;
  #L15b49c.  call `<init>`(v0, v5) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15b4a2.  call temp:= `toString`(v0) @signature `Ljava/math/BigInteger;.toString:()Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L15b4a8.  v0:= temp @kind object;
  #L15b4aa.  return v0 @kind object;
  #L15b4ac.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L15b4ae.  v1:= new `java.lang.StringBuilder`;
  #L15b4b2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15b4b8.  v2:= "Problems with field " @kind object;
  #L15b4bc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b4c2.  v1:= temp @kind object;
  #L15b4c4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b4ca.  v1:= temp @kind object;
  #L15b4cc.  v2:= " parsing default BigInteger string '" @kind object;
  #L15b4d0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b4d6.  v1:= temp @kind object;
  #L15b4d8.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b4de.  v1:= temp @kind object;
  #L15b4e0.  v2:= "'" @kind object;
  #L15b4e4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b4ea.  v1:= temp @kind object;
  #L15b4ec.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15b4f2.  v1:= temp @kind object;
  #L15b4f4.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15b4fa.  v0:= temp @kind object;
  #L15b4fc.  throw v0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L15b4ac;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.BigIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b520.  call temp:= `getString`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getString:(I)Ljava/lang/String;` @kind interface;
  #L15b526.  v0:= temp @kind object;
  #L15b528.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.BigIntegerType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L15b53c.  v2:= new `java.math.BigInteger`;
  #L15b540.  v0:= v6 @kind object;
  #L15b542.  v0:= (`java.lang.String`) v0 @kind object;
  #L15b546.  v1:= v0 @kind object;
  #L15b548.  call `<init>`(v2, v1) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;)V` @kind direct;
  #Try_end0.  
  #L15b54e.  return v2 @kind object;
  #L15b550.  v1:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L15b552.  v2:= new `java.lang.StringBuilder`;
  #L15b556.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15b55c.  v3:= "Problems with column " @kind object;
  #L15b560.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b566.  v2:= temp @kind object;
  #L15b568.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b56e.  v2:= temp @kind object;
  #L15b570.  v3:= " parsing BigInteger string '" @kind object;
  #L15b574.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b57a.  v2:= temp @kind object;
  #L15b57c.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b582.  v2:= temp @kind object;
  #L15b584.  v3:= "'" @kind object;
  #L15b588.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b58e.  v2:= temp @kind object;
  #L15b590.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15b596.  v2:= temp @kind object;
  #L15b598.  call temp:= `create`(v2, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15b59e.  v1:= temp @kind object;
  #L15b5a0.  throw v1;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L15b550;
}
