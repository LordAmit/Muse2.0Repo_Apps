record `com.j256.ormlite.field.types.EnumIntegerType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseEnumType` @kind class {
}
global `com.j256.ormlite.field.types.EnumIntegerType` `@@com.j256.ormlite.field.types.EnumIntegerType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/EnumIntegerType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15ca20.  v0:= new `com.j256.ormlite.field.types.EnumIntegerType`;
  #L15ca24.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/EnumIntegerType;.<init>:()V` @kind direct;
  #L15ca2a.  `@@com.j256.ormlite.field.types.EnumIntegerType.singleTon` @type ^`com.j256.ormlite.field.types.EnumIntegerType` := v0 @kind object;
  #L15ca2e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.EnumIntegerType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/EnumIntegerType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L15ca40.  v0:= `@@com.j256.ormlite.field.SqlType.INTEGER` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15ca44.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseEnumType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L15ca4a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.EnumIntegerType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/EnumIntegerType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15ca5c.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseEnumType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15ca62.  return @kind void;
}
procedure `com.j256.ormlite.field.types.EnumIntegerType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/EnumIntegerType;.getSingleton:()Lcom/j256/ormlite/field/types/EnumIntegerType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15ca74.  v0:= `@@com.j256.ormlite.field.types.EnumIntegerType.singleTon` @type ^`com.j256.ormlite.field.types.EnumIntegerType` @kind object;
  #L15ca78.  return v0 @kind object;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.EnumIntegerType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/EnumIntegerType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ca8c.  v0:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L15ca90.  return v0 @kind object;
}
procedure `boolean` `isEscapedValue`(`com.j256.ormlite.field.types.EnumIntegerType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/EnumIntegerType;.isEscapedValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15caa4.  v0:= 0I;
  #L15caa6.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.EnumIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/EnumIntegerType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15cab8.  v3:= (`java.lang.Enum`) v3 @kind object;
  #L15cabc.  call temp:= `ordinal`(v3) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L15cac2.  v0:= temp;
  #L15cac4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15caca.  v0:= temp @kind object;
  #L15cacc.  return v0 @kind object;
}
procedure `java.lang.Object` `makeConfigObject`(`com.j256.ormlite.field.types.EnumIntegerType` v6 @kind this, `com.j256.ormlite.field.FieldType` v7 @kind object) @signature `Lcom/j256/ormlite/field/types/EnumIntegerType;.makeConfigObject:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15cae0.  v2:= new `java.util.HashMap`;
  #L15cae4.  call `<init>`(v2) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L15caea.  call temp:= `getType`(v7) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15caf0.  v0:= temp @kind object;
  #L15caf2.  call temp:= `getEnumConstants`(v0) @signature `Ljava/lang/Class;.getEnumConstants:()[Ljava/lang/Object;` @kind virtual;
  #L15caf8.  v0:= temp @kind object;
  #L15cafa.  v0:= (`java.lang.Enum`[]) v0 @kind object;
  #L15cafe.  v0:= (`java.lang.Enum`[]) v0 @kind object;
  #L15cb02.  if v0 != 0 then goto L15cb4c;
  #L15cb06.  v0:= new `java.sql.SQLException`;
  #L15cb0a.  v1:= new `java.lang.StringBuilder`;
  #L15cb0e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15cb14.  v2:= "Field " @kind object;
  #L15cb18.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15cb1e.  v1:= temp @kind object;
  #L15cb20.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15cb26.  v1:= temp @kind object;
  #L15cb28.  v2:= " improperly configured as type " @kind object;
  #L15cb2c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15cb32.  v1:= temp @kind object;
  #L15cb34.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15cb3a.  v1:= temp @kind object;
  #L15cb3c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15cb42.  v1:= temp @kind object;
  #L15cb44.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15cb4a.  throw v0;
  #L15cb4c.  v3:= length @variable v0;
  #L15cb4e.  v1:= 0I;
  #L15cb50.  if v1 >= v3 then goto L15cb74;
  #L15cb54.  v4:= v0[v1] @kind object;
  #L15cb58.  call temp:= `ordinal`(v4) @signature `Ljava/lang/Enum;.ordinal:()I` @kind virtual;
  #L15cb5e.  v5:= temp;
  #L15cb60.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15cb66.  v5:= temp @kind object;
  #L15cb68.  call temp:= `put`(v2, v5, v4) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15cb6e.  v1:= v1 + 1;
  #L15cb72.  goto L15cb50;
  #L15cb74.  return v2 @kind object;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.EnumIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/EnumIntegerType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15cb88.  call temp:= `parseInt`(v3) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L15cb8e.  v0:= temp;
  #L15cb90.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15cb96.  v0:= temp @kind object;
  #L15cb98.  return v0 @kind object;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.EnumIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/EnumIntegerType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15cbac.  call temp:= `getInt`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getInt:(I)I` @kind interface;
  #L15cbb2.  v0:= temp;
  #L15cbb4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15cbba.  v0:= temp @kind object;
  #L15cbbc.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.EnumIntegerType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.Object` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/field/types/EnumIntegerType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15cbd0.  if v3 != 0 then goto L15cbd6;
  #L15cbd4.  return v4 @kind object;
  #L15cbd6.  v4:= (`java.lang.Integer`) v4 @kind object;
  #L15cbda.  call temp:= `getDataTypeConfigObj`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @kind virtual;
  #L15cbe0.  v0:= temp @kind object;
  #L15cbe2.  v0:= (`java.util.Map`) v0 @kind object;
  #L15cbe6.  if v0 != 0 then goto L15cbfe;
  #L15cbea.  v0:= 0I;
  #L15cbec.  call temp:= `getUnknownEnumVal`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getUnknownEnumVal:()Ljava/lang/Enum;` @kind virtual;
  #L15cbf2.  v1:= temp @kind object;
  #L15cbf4.  call temp:= `enumVal`(v3, v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/EnumIntegerType;.enumVal:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/lang/Enum;` @kind static;
  #L15cbfa.  v4:= temp @kind object;
  #L15cbfc.  goto L15cbd4;
  #L15cbfe.  call temp:= `get`(v0, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15cc04.  v0:= temp @kind object;
  #L15cc06.  v0:= (`java.lang.Enum`) v0 @kind object;
  #L15cc0a.  call temp:= `getUnknownEnumVal`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getUnknownEnumVal:()Ljava/lang/Enum;` @kind virtual;
  #L15cc10.  v1:= temp @kind object;
  #L15cc12.  call temp:= `enumVal`(v3, v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/EnumIntegerType;.enumVal:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/lang/Enum;` @kind static;
  #L15cc18.  v4:= temp @kind object;
  #L15cc1a.  goto L15cbd4;
}
