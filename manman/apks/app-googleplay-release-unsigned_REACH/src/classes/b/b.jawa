record `b.b` @kind class @AccessFlag FINAL {
}
global `byte`[] `@@b.b.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@b.b.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L119f80.  v1:= 64I;
  #L119f84.  v0:= new `byte`[v1];
  #L119f88.  goto L119fa4;
  #L119f8e.  `@@b.b.a` @type ^`byte`[] := v0 @kind object;
  #L119f92.  v0:= new `byte`[v1];
  #L119f96.  goto L119fec;
  #L119f9c.  `@@b.b.b` @type ^`byte`[] := v0 @kind object;
  #L119fa0.  return @kind void;
  #L119fa2.  
  #L119fa4.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 43I, 47I) @kind object;
  #L119feb.  goto L119f8e;
  #L119fec.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 45I, 95I) @kind object;
  #L11a033.  goto L119f9c;
}
procedure `java.lang.String` `a`(`byte`[] v1 @kind object) @signature `Lb/b;.a:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L11a044.  v0:= `@@b.b.a` @type ^`byte`[] @kind object;
  #L11a048.  call temp:= `a`(v1, v0) @signature `Lb/b;.a:([B[B)Ljava/lang/String;` @kind static;
  #L11a04e.  v0:= temp @kind object;
  #L11a050.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`byte`[] v8 @kind object, `byte`[] v9 @kind object) @signature `Lb/b;.a:([B[B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11a064.  v0:= 0I;
  #L11a066.  v7:= 61I;
  #L11a06a.  v1:= length @variable v8;
  #L11a06c.  v1:= v1 + 2;
  #L11a070.  v1:= v1 / 3;
  #L11a074.  v1:= v1 * 4;
  #L11a078.  v2:= new `byte`[v1];
  #L11a07c.  v1:= length @variable v8;
  #L11a07e.  v3:= length @variable v8;
  #L11a080.  v3:= v3 %% 3;
  #L11a084.  v3:= v1 - v3 @kind int;
  #L11a088.  v1:= v0;
  #L11a08a.  if v0 >= v3 then goto L11a11c;
  #L11a08e.  v4:= v1 + 1;
  #L11a092.  v5:= v8[v0] @kind byte;
  #L11a096.  v5:= v5 ^& 255;
  #L11a09a.  v5:= v5 ^> 2;
  #L11a09e.  v5:= v9[v5] @kind byte;
  #L11a0a2.  v2[v1]:= v5 @kind byte;
  #L11a0a6.  v1:= v4 + 1;
  #L11a0aa.  v5:= v8[v0] @kind byte;
  #L11a0ae.  v5:= v5 ^& 3;
  #L11a0b2.  v5:= v5 ^< 4;
  #L11a0b6.  v6:= v0 + 1;
  #L11a0ba.  v6:= v8[v6] @kind byte;
  #L11a0be.  v6:= v6 ^& 255;
  #L11a0c2.  v6:= v6 ^> 4;
  #L11a0c6.  v5:= v5 ^| v6 @kind int;
  #L11a0c8.  v5:= v9[v5] @kind byte;
  #L11a0cc.  v2[v4]:= v5 @kind byte;
  #L11a0d0.  v4:= v1 + 1;
  #L11a0d4.  v5:= v0 + 1;
  #L11a0d8.  v5:= v8[v5] @kind byte;
  #L11a0dc.  v5:= v5 ^& 15;
  #L11a0e0.  v5:= v5 ^< 2;
  #L11a0e4.  v6:= v0 + 2;
  #L11a0e8.  v6:= v8[v6] @kind byte;
  #L11a0ec.  v6:= v6 ^& 255;
  #L11a0f0.  v6:= v6 ^> 6;
  #L11a0f4.  v5:= v5 ^| v6 @kind int;
  #L11a0f6.  v5:= v9[v5] @kind byte;
  #L11a0fa.  v2[v1]:= v5 @kind byte;
  #L11a0fe.  v1:= v4 + 1;
  #L11a102.  v5:= v0 + 2;
  #L11a106.  v5:= v8[v5] @kind byte;
  #L11a10a.  v5:= v5 ^& 63;
  #L11a10e.  v5:= v9[v5] @kind byte;
  #L11a112.  v2[v4]:= v5 @kind byte;
  #L11a116.  v0:= v0 + 3;
  #L11a11a.  goto L11a08a;
  #L11a11c.  v0:= length @variable v8;
  #L11a11e.  v0:= v0 %% 3;
  #L11a122.  goto L11a1f0;
  #Try_start0.  
  #L11a128.  v0:= new `java.lang.String`;
  #L11a12c.  v1:= "US-ASCII" @kind object;
  #L11a130.  call `<init>`(v0, v2, v1) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #Try_end0.  
  #L11a136.  return v0 @kind object;
  #L11a138.  v0:= v1 + 1;
  #L11a13c.  v4:= v8[v3] @kind byte;
  #L11a140.  v4:= v4 ^& 255;
  #L11a144.  v4:= v4 ^> 2;
  #L11a148.  v4:= v9[v4] @kind byte;
  #L11a14c.  v2[v1]:= v4 @kind byte;
  #L11a150.  v1:= v0 + 1;
  #L11a154.  v3:= v8[v3] @kind byte;
  #L11a158.  v3:= v3 ^& 3;
  #L11a15c.  v3:= v3 ^< 4;
  #L11a160.  v3:= v9[v3] @kind byte;
  #L11a164.  v2[v0]:= v3 @kind byte;
  #L11a168.  v0:= v1 + 1;
  #L11a16c.  v2[v1]:= v7 @kind byte;
  #L11a170.  v1:= v0 + 1;
  #L11a174.  v2[v0]:= v7 @kind byte;
  #L11a178.  goto L11a128;
  #L11a17a.  v0:= v1 + 1;
  #L11a17e.  v4:= v8[v3] @kind byte;
  #L11a182.  v4:= v4 ^& 255;
  #L11a186.  v4:= v4 ^> 2;
  #L11a18a.  v4:= v9[v4] @kind byte;
  #L11a18e.  v2[v1]:= v4 @kind byte;
  #L11a192.  v1:= v0 + 1;
  #L11a196.  v4:= v8[v3] @kind byte;
  #L11a19a.  v4:= v4 ^& 3;
  #L11a19e.  v4:= v4 ^< 4;
  #L11a1a2.  v5:= v3 + 1;
  #L11a1a6.  v5:= v8[v5] @kind byte;
  #L11a1aa.  v5:= v5 ^& 255;
  #L11a1ae.  v5:= v5 ^> 4;
  #L11a1b2.  v4:= v4 ^| v5 @kind int;
  #L11a1b4.  v4:= v9[v4] @kind byte;
  #L11a1b8.  v2[v0]:= v4 @kind byte;
  #L11a1bc.  v0:= v1 + 1;
  #L11a1c0.  v3:= v3 + 1;
  #L11a1c4.  v3:= v8[v3] @kind byte;
  #L11a1c8.  v3:= v3 ^& 15;
  #L11a1cc.  v3:= v3 ^< 2;
  #L11a1d0.  v3:= v9[v3] @kind byte;
  #L11a1d4.  v2[v1]:= v3 @kind byte;
  #L11a1d8.  v1:= v0 + 1;
  #L11a1dc.  v2[v0]:= v7 @kind byte;
  #L11a1e0.  goto L11a128;
  #L11a1e2.  v0:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L11a1e4.  v1:= new `java.lang.AssertionError`;
  #L11a1e8.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11a1ee.  throw v1;
  #L11a1f0.  switch v0
                  | 1 => goto L11a138
                  | 2 => goto L11a17a
                  | else => goto L11a128;
  catch `java.io.UnsupportedEncodingException` @[Try_start0..Try_end0] goto L11a1e2;
}
