record `b.n` @kind class @AccessFlag FINAL {
  `byte`[] `b.n.a` @AccessFlag FINAL;
  `int` `b.n.b` @AccessFlag ;
  `int` `b.n.c` @AccessFlag ;
  `boolean` `b.n.d` @AccessFlag ;
  `boolean` `b.n.e` @AccessFlag ;
  `b.n` `b.n.f` @AccessFlag ;
  `b.n` `b.n.g` @AccessFlag ;
}
procedure `void` `<init>`(`b.n` v1 @kind this) @signature `Lb/n;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L11e614.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11e61a.  v0:= 8192I;
  #L11e61e.  v0:= new `byte`[v0];
  #L11e622.  v1.`b.n.a` @type ^`byte`[] := v0 @kind object;
  #L11e626.  v0:= 1I;
  #L11e628.  v1.`b.n.e` @type ^`boolean` := v0 @kind boolean;
  #L11e62c.  v0:= 0I;
  #L11e62e.  v1.`b.n.d` @type ^`boolean` := v0 @kind boolean;
  #L11e632.  return @kind void;
}
procedure `void` `<init>`(`b.n` v3 @kind this, `b.n` v4 @kind object) @signature `Lb/n;.<init>:(Lb/n;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L11e644.  v0:= v4.`b.n.a` @type ^`byte`[] @kind object;
  #L11e648.  v1:= v4.`b.n.b` @type ^`int`;
  #L11e64c.  v2:= v4.`b.n.c` @type ^`int`;
  #L11e650.  call `<init>`(v3, v0, v1, v2) @signature `Lb/n;.<init>:([BII)V` @kind direct;
  #L11e656.  v0:= 1I;
  #L11e658.  v4.`b.n.d` @type ^`boolean` := v0 @kind boolean;
  #L11e65c.  return @kind void;
}
procedure `void` `<init>`(`b.n` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lb/n;.<init>:([BII)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L11e670.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11e676.  v1.`b.n.a` @type ^`byte`[] := v2 @kind object;
  #L11e67a.  v1.`b.n.b` @type ^`int` := v3;
  #L11e67e.  v1.`b.n.c` @type ^`int` := v4;
  #L11e682.  v0:= 0I;
  #L11e684.  v1.`b.n.e` @type ^`boolean` := v0 @kind boolean;
  #L11e688.  v0:= 1I;
  #L11e68a.  v1.`b.n.d` @type ^`boolean` := v0 @kind boolean;
  #L11e68e.  return @kind void;
}
procedure `b.n` `a`(`b.n` v4 @kind this) @signature `Lb/n;.a:()Lb/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11e6a0.  v1:= 0I;
  #L11e6a2.  v0:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11e6a6.  if v0 == v4 then goto L11e6d0;
  #L11e6aa.  v0:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11e6ae.  v2:= v4.`b.n.g` @type ^`b.n` @kind object;
  #L11e6b2.  v3:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11e6b6.  v2.`b.n.f` @type ^`b.n` := v3 @kind object;
  #L11e6ba.  v2:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11e6be.  v3:= v4.`b.n.g` @type ^`b.n` @kind object;
  #L11e6c2.  v2.`b.n.g` @type ^`b.n` := v3 @kind object;
  #L11e6c6.  v4.`b.n.f` @type ^`b.n` := v1 @kind object;
  #L11e6ca.  v4.`b.n.g` @type ^`b.n` := v1 @kind object;
  #L11e6ce.  return v0 @kind object;
  #L11e6d0.  v0:= v1 @kind object;
  #L11e6d2.  goto L11e6ae;
}
procedure `b.n` `a`(`b.n` v5 @kind this, `int` v6 ) @signature `Lb/n;.a:(I)Lb/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11e6e4.  if v6 <= 0 then goto L11e6f6;
  #L11e6e8.  v0:= v5.`b.n.c` @type ^`int`;
  #L11e6ec.  v1:= v5.`b.n.b` @type ^`int`;
  #L11e6f0.  v0:= v0 - v1 @kind int;
  #L11e6f2.  if v6 <= v0 then goto L11e702;
  #L11e6f6.  v0:= new `java.lang.IllegalArgumentException`;
  #L11e6fa.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11e700.  throw v0;
  #L11e702.  v0:= 1024I;
  #L11e706.  if v6 < v0 then goto L11e734;
  #L11e70a.  v0:= new `b.n`;
  #L11e70e.  call `<init>`(v0, v5) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L11e714.  v1:= v0.`b.n.b` @type ^`int`;
  #L11e718.  v1:= v1 + v6 @kind int;
  #L11e71a.  v0.`b.n.c` @type ^`int` := v1;
  #L11e71e.  v1:= v5.`b.n.b` @type ^`int`;
  #L11e722.  v1:= v1 + v6 @kind int;
  #L11e724.  v5.`b.n.b` @type ^`int` := v1;
  #L11e728.  v1:= v5.`b.n.g` @type ^`b.n` @kind object;
  #L11e72c.  call temp:= `a`(v1, v0) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11e732.  return v0 @kind object;
  #L11e734.  call temp:= `a`() @signature `Lb/o;.a:()Lb/n;` @kind static;
  #L11e73a.  v0:= temp @kind object;
  #L11e73c.  v1:= v5.`b.n.a` @type ^`byte`[] @kind object;
  #L11e740.  v2:= v5.`b.n.b` @type ^`int`;
  #L11e744.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11e748.  v4:= 0I;
  #L11e74a.  call `arraycopy`(v1, v2, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11e750.  goto L11e714;
}
procedure `b.n` `a`(`b.n` v1 @kind this, `b.n` v2 @kind object) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11e764.  v2.`b.n.g` @type ^`b.n` := v1 @kind object;
  #L11e768.  v0:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L11e76c.  v2.`b.n.f` @type ^`b.n` := v0 @kind object;
  #L11e770.  v0:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L11e774.  v0.`b.n.g` @type ^`b.n` := v2 @kind object;
  #L11e778.  v1.`b.n.f` @type ^`b.n` := v2 @kind object;
  #L11e77c.  return v2 @kind object;
}
procedure `void` `a`(`b.n` v6 @kind this, `b.n` v7 @kind object, `int` v8 ) @signature `Lb/n;.a:(Lb/n;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11e790.  v2:= 8192I;
  #L11e794.  v5:= 0I;
  #L11e796.  v0:= v7.`b.n.e` @type ^`boolean` @kind boolean;
  #L11e79a.  if v0 != 0 then goto L11e7aa;
  #L11e79e.  v0:= new `java.lang.IllegalArgumentException`;
  #L11e7a2.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11e7a8.  throw v0;
  #L11e7aa.  v0:= v7.`b.n.c` @type ^`int`;
  #L11e7ae.  v0:= v0 + v8 @kind int;
  #L11e7b0.  if v0 <= v2 then goto L11e812;
  #L11e7b4.  v0:= v7.`b.n.d` @type ^`boolean` @kind boolean;
  #L11e7b8.  if v0 == 0 then goto L11e7c8;
  #L11e7bc.  v0:= new `java.lang.IllegalArgumentException`;
  #L11e7c0.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11e7c6.  throw v0;
  #L11e7c8.  v0:= v7.`b.n.c` @type ^`int`;
  #L11e7cc.  v0:= v0 + v8 @kind int;
  #L11e7ce.  v1:= v7.`b.n.b` @type ^`int`;
  #L11e7d2.  v0:= v0 - v1 @kind int;
  #L11e7d4.  if v0 <= v2 then goto L11e7e4;
  #L11e7d8.  v0:= new `java.lang.IllegalArgumentException`;
  #L11e7dc.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11e7e2.  throw v0;
  #L11e7e4.  v0:= v7.`b.n.a` @type ^`byte`[] @kind object;
  #L11e7e8.  v1:= v7.`b.n.b` @type ^`int`;
  #L11e7ec.  v2:= v7.`b.n.a` @type ^`byte`[] @kind object;
  #L11e7f0.  v3:= v7.`b.n.c` @type ^`int`;
  #L11e7f4.  v4:= v7.`b.n.b` @type ^`int`;
  #L11e7f8.  v3:= v3 - v4 @kind int;
  #L11e7fa.  call `arraycopy`(v0, v1, v2, v5, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11e800.  v0:= v7.`b.n.c` @type ^`int`;
  #L11e804.  v1:= v7.`b.n.b` @type ^`int`;
  #L11e808.  v0:= v0 - v1 @kind int;
  #L11e80a.  v7.`b.n.c` @type ^`int` := v0;
  #L11e80e.  v7.`b.n.b` @type ^`int` := v5;
  #L11e812.  v0:= v6.`b.n.a` @type ^`byte`[] @kind object;
  #L11e816.  v1:= v6.`b.n.b` @type ^`int`;
  #L11e81a.  v2:= v7.`b.n.a` @type ^`byte`[] @kind object;
  #L11e81e.  v3:= v7.`b.n.c` @type ^`int`;
  #L11e822.  call `arraycopy`(v0, v1, v2, v3, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11e828.  v0:= v7.`b.n.c` @type ^`int`;
  #L11e82c.  v0:= v0 + v8 @kind int;
  #L11e82e.  v7.`b.n.c` @type ^`int` := v0;
  #L11e832.  v0:= v6.`b.n.b` @type ^`int`;
  #L11e836.  v0:= v0 + v8 @kind int;
  #L11e838.  v6.`b.n.b` @type ^`int` := v0;
  #L11e83c.  return @kind void;
}
procedure `void` `b`(`b.n` v3 @kind this) @signature `Lb/n;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11e850.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11e854.  if v0 != v3 then goto L11e864;
  #L11e858.  v0:= new `java.lang.IllegalStateException`;
  #L11e85c.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L11e862.  throw v0;
  #L11e864.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11e868.  v0:= v0.`b.n.e` @type ^`boolean` @kind boolean;
  #L11e86c.  if v0 != 0 then goto L11e872;
  #L11e870.  return @kind void;
  #L11e872.  v0:= v3.`b.n.c` @type ^`int`;
  #L11e876.  v1:= v3.`b.n.b` @type ^`int`;
  #L11e87a.  v1:= v0 - v1 @kind int;
  #L11e87e.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11e882.  v0:= v0.`b.n.c` @type ^`int`;
  #L11e886.  v2:= v0 - 8192;
  #L11e88a.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11e88e.  v0:= v0.`b.n.d` @type ^`boolean` @kind boolean;
  #L11e892.  if v0 == 0 then goto L11e8b6;
  #L11e896.  v0:= 0I;
  #L11e898.  v0:= v0 + v2 @kind int;
  #L11e89a.  if v1 > v0 then goto L11e870;
  #L11e89e.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11e8a2.  call `a`(v3, v0, v1) @signature `Lb/n;.a:(Lb/n;I)V` @kind virtual;
  #L11e8a8.  call temp:= `a`(v3) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11e8ae.  call `a`(v3) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11e8b4.  goto L11e870;
  #L11e8b6.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11e8ba.  v0:= v0.`b.n.b` @type ^`int`;
  #L11e8be.  goto L11e898;
}
