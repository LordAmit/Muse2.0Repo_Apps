record `b.a` @kind class @AccessFlag PUBLIC extends `b.s` @kind class {
  `boolean` `b.a.e` @AccessFlag PRIVATE;
  `b.a` `b.a.f` @AccessFlag PRIVATE;
  `long` `b.a.g` @AccessFlag PRIVATE;
}
global `long` `@@b.a.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@b.a.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `b.a` `@@b.a.d` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lb/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L080bc8.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L080bcc.  v2:= 60L;
  #L080bd0.  call temp:= `toMillis`(v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L080bd6.  v0:= temp @kind wide;
  #L080bd8.  `@@b.a.a` @type ^`long` := v0 @kind wide;
  #L080bdc.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L080be0.  v2:= `@@b.a.a` @type ^`long` @kind wide;
  #L080be4.  call temp:= `toNanos`(v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L080bea.  v0:= temp @kind wide;
  #L080bec.  `@@b.a.c` @type ^`long` := v0 @kind wide;
  #L080bf0.  return @kind void;
}
procedure `void` `<init>`(`b.a` v0 @kind this) @signature `Lb/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L080c04.  call `<init>`(v0) @signature `Lb/s;.<init>:()V` @kind direct;
  #L080c0a.  return @kind void;
}
procedure `b.a` `a`(`b.a` v0 @kind object) @signature `Lb/a;.a:(Lb/a;)Lb/a;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L080c1c.  `@@b.a.d` @type ^`b.a` := v0 @kind object;
  #L080c20.  return v0 @kind object;
}
procedure `void` `a`(`b.a` v9 @kind object, `long` v10 , `boolean` v12 ) @signature `Lb/a;.a:(Lb/a;JZ)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L080c34.  v4:= 0L;
  #L080c38.  v1:= constclass @type ^`b.a` @kind object;
  #L080c3c.  @monitorenter v1
  #Try_start0.  
  #L080c3e.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L080c42.  if v0 != 0 then goto L080c64;
  #L080c46.  v0:= new `b.a`;
  #L080c4a.  call `<init>`(v0) @signature `Lb/a;.<init>:()V` @kind direct;
  #L080c50.  `@@b.a.d` @type ^`b.a` := v0 @kind object;
  #L080c54.  v0:= new `b.a$a`;
  #L080c58.  call `<init>`(v0) @signature `Lb/a$a;.<init>:()V` @kind direct;
  #L080c5e.  call `start`(v0) @signature `Lb/a$a;.start:()V` @kind virtual;
  #L080c64.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L080c6a.  v2:= temp @kind wide;
  #L080c6c.  v0:= lcmp(v10, v4);
  #L080c70.  if v0 == 0 then goto L080cda;
  #L080c74.  if v12 == 0 then goto L080cda;
  #L080c78.  call temp:= `d`(v9) @signature `Lb/a;.d:()J` @kind virtual;
  #L080c7e.  v4:= temp @kind wide;
  #L080c80.  v4:= v4 - v2 @kind long;
  #L080c82.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L080c88.  v4:= temp @kind wide;
  #L080c8a.  v4:= v4 + v2 @kind long;
  #L080c8c.  v9.`b.a.g` @type ^`long` := v4 @kind wide;
  #L080c90.  call temp:= `b`(v9, v2) @signature `Lb/a;.b:(J)J` @kind direct;
  #L080c96.  v4:= temp @kind wide;
  #L080c98.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L080c9c.  v6:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L080ca0.  if v6 == 0 then goto L080cb8;
  #L080ca4.  v6:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L080ca8.  call temp:= `b`(v6, v2) @signature `Lb/a;.b:(J)J` @kind direct;
  #L080cae.  v6:= temp @kind wide;
  #L080cb0.  v6:= lcmp(v4, v6);
  #L080cb4.  if v6 >= 0 then goto L080d10;
  #L080cb8.  v2:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L080cbc.  v9.`b.a.f` @type ^`b.a` := v2 @kind object;
  #L080cc0.  v0.`b.a.f` @type ^`b.a` := v9 @kind object;
  #L080cc4.  v2:= `@@b.a.d` @type ^`b.a` @kind object;
  #L080cc8.  if v0 != v2 then goto L080cd6;
  #L080ccc.  v0:= constclass @type ^`b.a` @kind object;
  #L080cd0.  call `notify`(v0) @signature `Ljava/lang/Object;.notify:()V` @kind virtual;
  #Try_end0.  
  #L080cd6.  @monitorexit v1
  #L080cd8.  return @kind void;
  #L080cda.  v0:= lcmp(v10, v4);
  #L080cde.  if v0 == 0 then goto L080cf2;
  #L080ce2.  v4:= v2 + v10 @kind long;
  #Try_start1.  
  #L080ce6.  v9.`b.a.g` @type ^`long` := v4 @kind wide;
  #Try_end1.  
  #L080cea.  goto L080c90;
  #L080cec.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L080cee.  @monitorexit v1
  #L080cf0.  throw v0;
  #L080cf2.  if v12 == 0 then goto L080d04;
  #Try_start2.  
  #L080cf6.  call temp:= `d`(v9) @signature `Lb/a;.d:()J` @kind virtual;
  #L080cfc.  v4:= temp @kind wide;
  #L080cfe.  v9.`b.a.g` @type ^`long` := v4 @kind wide;
  #L080d02.  goto L080c90;
  #L080d04.  v0:= new `java.lang.AssertionError`;
  #L080d08.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L080d0e.  throw v0;
  #L080d10.  v0:= v0.`b.a.f` @type ^`b.a` @kind object;
  #Try_end2.  
  #L080d14.  goto L080c9c;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L080cec;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L080cec;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L080cec;
}
procedure `long` `b`(`b.a` v3 @kind this, `long` v4 ) @signature `Lb/a;.b:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L080d44.  v0:= v3.`b.a.g` @type ^`long` @kind wide;
  #L080d48.  v0:= v0 - v4 @kind long;
  #L080d4a.  return v0 @kind wide;
}
procedure `boolean` `b`(`b.a` v3 @kind object) @signature `Lb/a;.b:(Lb/a;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L080d5c.  v1:= constclass @type ^`b.a` @kind object;
  #L080d60.  @monitorenter v1
  #Try_start0.  
  #L080d62.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L080d66.  if v0 == 0 then goto L080d8c;
  #L080d6a.  v2:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L080d6e.  if v2 != v3 then goto L080d86;
  #L080d72.  v2:= v3.`b.a.f` @type ^`b.a` @kind object;
  #L080d76.  v0.`b.a.f` @type ^`b.a` := v2 @kind object;
  #L080d7a.  v0:= 0I;
  #L080d7c.  v3.`b.a.f` @type ^`b.a` := v0 @kind object;
  #Try_end0.  
  #L080d80.  v0:= 0I;
  #L080d82.  @monitorexit v1
  #L080d84.  return v0;
  #Try_start1.  
  #L080d86.  v0:= v0.`b.a.f` @type ^`b.a` @kind object;
  #Try_end1.  
  #L080d8a.  goto L080d66;
  #L080d8c.  v0:= 1I;
  #L080d8e.  goto L080d82;
  #L080d90.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L080d92.  @monitorexit v1
  #L080d94.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L080d90;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L080d90;
}
procedure `b.a` `e`() @signature `Lb/a;.e:()Lb/a;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L080dbc.  v6:= 1000000L;
  #L080dc2.  v0:= 0I;
  #L080dc4.  v1:= `@@b.a.d` @type ^`b.a` @kind object;
  #L080dc8.  v1:= v1.`b.a.f` @type ^`b.a` @kind object;
  #L080dcc.  if v1 != 0 then goto L080e10;
  #L080dd0.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L080dd6.  v2:= temp @kind wide;
  #L080dd8.  v1:= constclass @type ^`b.a` @kind object;
  #L080ddc.  v4:= `@@b.a.a` @type ^`long` @kind wide;
  #L080de0.  call `wait`(v1, v4) @signature `Ljava/lang/Object;.wait:(J)V` @kind virtual;
  #L080de6.  v1:= `@@b.a.d` @type ^`b.a` @kind object;
  #L080dea.  v1:= v1.`b.a.f` @type ^`b.a` @kind object;
  #L080dee.  if v1 != 0 then goto L080e0e;
  #L080df2.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L080df8.  v4:= temp @kind wide;
  #L080dfa.  v2:= v4 - v2 @kind long;
  #L080dfe.  v4:= `@@b.a.c` @type ^`long` @kind wide;
  #L080e02.  v1:= lcmp(v2, v4);
  #L080e06.  if v1 < 0 then goto L080e0e;
  #L080e0a.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L080e0e.  return v0 @kind object;
  #L080e10.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L080e16.  v2:= temp @kind wide;
  #L080e18.  call temp:= `b`(v1, v2) @signature `Lb/a;.b:(J)J` @kind direct;
  #L080e1e.  v2:= temp @kind wide;
  #L080e20.  v4:= 0L;
  #L080e24.  v4:= lcmp(v2, v4);
  #L080e28.  if v4 <= 0 then goto L080e42;
  #L080e2c.  v4:= v2 / v6 @kind long;
  #L080e30.  v6:= v6 * v4 @kind long;
  #L080e32.  v2:= v2 - v6 @kind long;
  #L080e34.  v1:= constclass @type ^`b.a` @kind object;
  #L080e38.  v2:= (`int`) v2 @kind l2i;
  #L080e3a.  call `wait`(v1, v4, v2) @signature `Ljava/lang/Object;.wait:(JI)V` @kind virtual;
  #L080e40.  goto L080e0e;
  #L080e42.  v2:= `@@b.a.d` @type ^`b.a` @kind object;
  #L080e46.  v3:= v1.`b.a.f` @type ^`b.a` @kind object;
  #L080e4a.  v2.`b.a.f` @type ^`b.a` := v3 @kind object;
  #L080e4e.  v1.`b.a.f` @type ^`b.a` := v0 @kind object;
  #L080e52.  v0:= v1 @kind object;
  #L080e54.  goto L080e0e;
}
procedure `b.a` `f`() @signature `Lb/a;.f:()Lb/a;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L080e68.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L080e6c.  return v0 @kind object;
}
procedure `b.q` `a`(`b.a` v1 @kind this, `b.q` v2 @kind object) @signature `Lb/a;.a:(Lb/q;)Lb/q;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L080e80.  v0:= new `b.a$1`;
  #L080e84.  call `<init>`(v0, v1, v2) @signature `Lb/a$1;.<init>:(Lb/a;Lb/q;)V` @kind direct;
  #L080e8a.  return v0 @kind object;
}
procedure `b.r` `a`(`b.a` v1 @kind this, `b.r` v2 @kind object) @signature `Lb/a;.a:(Lb/r;)Lb/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L080e9c.  v0:= new `b.a$2`;
  #L080ea0.  call `<init>`(v0, v1, v2) @signature `Lb/a$2;.<init>:(Lb/a;Lb/r;)V` @kind direct;
  #L080ea6.  return v0 @kind object;
}
procedure `java.io.IOException` `a`(`b.a` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lb/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L080eb8.  v0:= new `java.io.InterruptedIOException`;
  #L080ebc.  v1:= "timeout" @kind object;
  #L080ec0.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080ec6.  if v3 == 0 then goto L080ed0;
  #L080eca.  call temp:= `initCause`(v0, v3) @signature `Ljava/io/InterruptedIOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L080ed0.  return v0 @kind object;
}
procedure `void` `a`(`b.a` v0 @kind this) @signature `Lb/a;.a:()V` @AccessFlag PROTECTED {
    temp;

  #L080ee4.  return @kind void;
}
procedure `void` `a`(`b.a` v1 @kind this, `boolean` v2 ) @signature `Lb/a;.a:(Z)V` @AccessFlag FINAL {
    temp;
    v0;

  #L080ef8.  call temp:= `a_`(v1) @signature `Lb/a;.a_:()Z` @kind virtual;
  #L080efe.  v0:= temp;
  #L080f00.  if v0 == 0 then goto L080f14;
  #L080f04.  if v2 == 0 then goto L080f14;
  #L080f08.  v0:= 0I;
  #L080f0a.  call temp:= `a`(v1, v0) @signature `Lb/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L080f10.  v0:= temp @kind object;
  #L080f12.  throw v0;
  #L080f14.  return @kind void;
}
procedure `boolean` `a_`(`b.a` v2 @kind this) @signature `Lb/a;.a_:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L080f28.  v0:= 0I;
  #L080f2a.  v1:= v2.`b.a.e` @type ^`boolean` @kind boolean;
  #L080f2e.  if v1 != 0 then goto L080f34;
  #L080f32.  return v0;
  #L080f34.  v2.`b.a.e` @type ^`boolean` := v0 @kind boolean;
  #L080f38.  call temp:= `b`(v2) @signature `Lb/a;.b:(Lb/a;)Z` @kind static;
  #L080f3e.  v0:= temp;
  #L080f40.  goto L080f32;
}
procedure `java.io.IOException` `b`(`b.a` v1 @kind this, `java.io.IOException` v2 @kind object) @signature `Lb/a;.b:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag FINAL {
    temp;
    v0;

  #L080f54.  call temp:= `a_`(v1) @signature `Lb/a;.a_:()Z` @kind virtual;
  #L080f5a.  v0:= temp;
  #L080f5c.  if v0 != 0 then goto L080f62;
  #L080f60.  return v2 @kind object;
  #L080f62.  call temp:= `a`(v1, v2) @signature `Lb/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L080f68.  v2:= temp @kind object;
  #L080f6a.  goto L080f60;
}
procedure `void` `c`(`b.a` v6 @kind this) @signature `Lb/a;.c:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L080f7c.  v0:= v6.`b.a.e` @type ^`boolean` @kind boolean;
  #L080f80.  if v0 == 0 then goto L080f94;
  #L080f84.  v0:= new `java.lang.IllegalStateException`;
  #L080f88.  v1:= "Unbalanced enter/exit" @kind object;
  #L080f8c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080f92.  throw v0;
  #L080f94.  call temp:= `b_`(v6) @signature `Lb/a;.b_:()J` @kind virtual;
  #L080f9a.  v0:= temp @kind wide;
  #L080f9c.  call temp:= `c_`(v6) @signature `Lb/a;.c_:()Z` @kind virtual;
  #L080fa2.  v2:= temp;
  #L080fa4.  v4:= 0L;
  #L080fa8.  v3:= lcmp(v0, v4);
  #L080fac.  if v3 != 0 then goto L080fb6;
  #L080fb0.  if v2 != 0 then goto L080fb6;
  #L080fb4.  return @kind void;
  #L080fb6.  v3:= 1I;
  #L080fb8.  v6.`b.a.e` @type ^`boolean` := v3 @kind boolean;
  #L080fbc.  call `a`(v6, v0, v2) @signature `Lb/a;.a:(Lb/a;JZ)V` @kind static;
  #L080fc2.  goto L080fb4;
}
