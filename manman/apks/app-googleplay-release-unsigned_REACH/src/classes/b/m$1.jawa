record `b.m$1` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `b.m` `b.m$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.m$1` v0 @kind this, `b.m` v1 @kind object) @signature `Lb/m$1;.<init>:(Lb/m;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11dc78.  v0.`b.m$1.a` @type ^`b.m` := v1 @kind object;
  #L11dc7c.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L11dc82.  return @kind void;
}
procedure `int` `available`(`b.m$1` v4 @kind this) @signature `Lb/m$1;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11dc94.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11dc98.  v0:= v0.`b.m.c` @type ^`boolean` @kind boolean;
  #L11dc9c.  if v0 == 0 then goto L11dcb0;
  #L11dca0.  v0:= new `java.io.IOException`;
  #L11dca4.  v1:= "closed" @kind object;
  #L11dca8.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11dcae.  throw v0;
  #L11dcb0.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11dcb4.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L11dcb8.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11dcbc.  v2:= 2147483647L;
  #L11dcc2.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11dcc8.  v0:= temp @kind wide;
  #L11dcca.  v0:= (`int`) v0 @kind l2i;
  #L11dccc.  return v0;
}
procedure `void` `close`(`b.m$1` v1 @kind this) @signature `Lb/m$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11dce0.  v0:= v1.`b.m$1.a` @type ^`b.m` @kind object;
  #L11dce4.  call `close`(v0) @signature `Lb/m;.close:()V` @kind virtual;
  #L11dcea.  return @kind void;
}
procedure `int` `read`(`b.m$1` v4 @kind this) @signature `Lb/m$1;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11dcfc.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11dd00.  v0:= v0.`b.m.c` @type ^`boolean` @kind boolean;
  #L11dd04.  if v0 == 0 then goto L11dd18;
  #L11dd08.  v0:= new `java.io.IOException`;
  #L11dd0c.  v1:= "closed" @kind object;
  #L11dd10.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11dd16.  throw v0;
  #L11dd18.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11dd1c.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L11dd20.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11dd24.  v2:= 0L;
  #L11dd28.  v0:= lcmp(v0, v2);
  #L11dd2c.  if v0 != 0 then goto L11dd5c;
  #L11dd30.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11dd34.  v0:= v0.`b.m.b` @type ^`b.r` @kind object;
  #L11dd38.  v1:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11dd3c.  v1:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11dd40.  v2:= 8192L;
  #L11dd44.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11dd4a.  v0:= temp @kind wide;
  #L11dd4c.  v2:= -1L;
  #L11dd50.  v0:= lcmp(v0, v2);
  #L11dd54.  if v0 != 0 then goto L11dd5c;
  #L11dd58.  v0:= -1I;
  #L11dd5a.  return v0;
  #L11dd5c.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11dd60.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L11dd64.  call temp:= `h`(v0) @signature `Lb/c;.h:()B` @kind virtual;
  #L11dd6a.  v0:= temp;
  #L11dd6c.  v0:= v0 ^& 255;
  #L11dd70.  goto L11dd5a;
}
procedure `int` `read`(`b.m$1` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lb/m$1;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11dd84.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L11dd88.  v0:= v0.`b.m.c` @type ^`boolean` @kind boolean;
  #L11dd8c.  if v0 == 0 then goto L11dda0;
  #L11dd90.  v0:= new `java.io.IOException`;
  #L11dd94.  v1:= "closed" @kind object;
  #L11dd98.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11dd9e.  throw v0;
  #L11dda0.  v0:= length @variable v7;
  #L11dda2.  v0:= (`long`) v0 @kind i2l;
  #L11dda4.  v2:= (`long`) v8 @kind i2l;
  #L11dda6.  v4:= (`long`) v9 @kind i2l;
  #L11dda8.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11ddae.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L11ddb2.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L11ddb6.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11ddba.  v2:= 0L;
  #L11ddbe.  v0:= lcmp(v0, v2);
  #L11ddc2.  if v0 != 0 then goto L11ddf2;
  #L11ddc6.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L11ddca.  v0:= v0.`b.m.b` @type ^`b.r` @kind object;
  #L11ddce.  v1:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L11ddd2.  v1:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11ddd6.  v2:= 8192L;
  #L11ddda.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11dde0.  v0:= temp @kind wide;
  #L11dde2.  v2:= -1L;
  #L11dde6.  v0:= lcmp(v0, v2);
  #L11ddea.  if v0 != 0 then goto L11ddf2;
  #L11ddee.  v0:= -1I;
  #L11ddf0.  return v0;
  #L11ddf2.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L11ddf6.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L11ddfa.  call temp:= `a`(v0, v7, v8, v9) @signature `Lb/c;.a:([BII)I` @kind virtual;
  #L11de00.  v0:= temp;
  #L11de02.  goto L11ddf0;
}
procedure `java.lang.String` `toString`(`b.m$1` v2 @kind this) @signature `Lb/m$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11de14.  v0:= new `java.lang.StringBuilder`;
  #L11de18.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11de1e.  v1:= v2.`b.m$1.a` @type ^`b.m` @kind object;
  #L11de22.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11de28.  v0:= temp @kind object;
  #L11de2a.  v1:= ".inputStream()" @kind object;
  #L11de2e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11de34.  v0:= temp @kind object;
  #L11de36.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11de3c.  v0:= temp @kind object;
  #L11de3e.  return v0 @kind object;
}
