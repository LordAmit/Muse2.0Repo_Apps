record `b.k$3` @kind class @AccessFlag FINAL extends `b.a` @kind class {
  `java.net.Socket` `b.k$3.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.k$3` v0 @kind this, `java.net.Socket` v1 @kind object) @signature `Lb/k$3;.<init>:(Ljava/net/Socket;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11d56c.  v0.`b.k$3.a` @type ^`java.net.Socket` := v1 @kind object;
  #L11d570.  call `<init>`(v0) @signature `Lb/a;.<init>:()V` @kind direct;
  #L11d576.  return @kind void;
}
procedure `java.io.IOException` `a`(`b.k$3` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lb/k$3;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L11d588.  v0:= new `java.net.SocketTimeoutException`;
  #L11d58c.  v1:= "timeout" @kind object;
  #L11d590.  call `<init>`(v0, v1) @signature `Ljava/net/SocketTimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d596.  if v3 == 0 then goto L11d5a0;
  #L11d59a.  call temp:= `initCause`(v0, v3) @signature `Ljava/io/InterruptedIOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L11d5a0.  return v0 @kind object;
}
procedure `void` `a`(`b.k$3` v5 @kind this) @signature `Lb/k$3;.a:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #Try_start0.  
  #L11d5b4.  v0:= v5.`b.k$3.a` @type ^`java.net.Socket` @kind object;
  #L11d5b8.  call `close`(v0) @signature `Ljava/net/Socket;.close:()V` @kind virtual;
  #Try_end0.  
  #L11d5be.  return @kind void;
  #L11d5c0.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L11d5c2.  v1:= `@@b.k.a` @type ^`java.util.logging.Logger` @kind object;
  #L11d5c6.  v2:= `@@java.util.logging.Level.WARNING` @type ^`java.util.logging.Level` @kind object;
  #L11d5ca.  v3:= new `java.lang.StringBuilder`;
  #L11d5ce.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11d5d4.  v4:= "Failed to close timed out socket " @kind object;
  #L11d5d8.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d5de.  v3:= temp @kind object;
  #L11d5e0.  v4:= v5.`b.k$3.a` @type ^`java.net.Socket` @kind object;
  #L11d5e4.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d5ea.  v3:= temp @kind object;
  #L11d5ec.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11d5f2.  v3:= temp @kind object;
  #L11d5f4.  call `log`(v1, v2, v3, v0) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L11d5fa.  goto L11d5be;
  #L11d5fc.  v0:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L11d5fe.  call temp:= `a`(v0) @signature `Lb/k;.a:(Ljava/lang/AssertionError;)Z` @kind static;
  #L11d604.  v1:= temp;
  #L11d606.  if v1 == 0 then goto L11d644;
  #L11d60a.  v1:= `@@b.k.a` @type ^`java.util.logging.Logger` @kind object;
  #L11d60e.  v2:= `@@java.util.logging.Level.WARNING` @type ^`java.util.logging.Level` @kind object;
  #L11d612.  v3:= new `java.lang.StringBuilder`;
  #L11d616.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11d61c.  v4:= "Failed to close timed out socket " @kind object;
  #L11d620.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d626.  v3:= temp @kind object;
  #L11d628.  v4:= v5.`b.k$3.a` @type ^`java.net.Socket` @kind object;
  #L11d62c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d632.  v3:= temp @kind object;
  #L11d634.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11d63a.  v3:= temp @kind object;
  #L11d63c.  call `log`(v1, v2, v3, v0) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L11d642.  goto L11d5be;
  #L11d644.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L11d5c0;
  catch `java.lang.AssertionError` @[Try_start0..Try_end0] goto L11d5fc;
}
