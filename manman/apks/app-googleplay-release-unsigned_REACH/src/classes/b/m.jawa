record `b.m` @kind class @AccessFlag FINAL extends `b.e` @kind interface {
  `b.c` `b.m.a` @AccessFlag PUBLIC_FINAL;
  `b.r` `b.m.b` @AccessFlag PUBLIC_FINAL;
  `boolean` `b.m.c` @AccessFlag ;
}
procedure `void` `<init>`(`b.m` v2 @kind this, `b.r` v3 @kind object) @signature `Lb/m;.<init>:(Lb/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L11de50.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11de56.  v0:= new `b.c`;
  #L11de5a.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11de60.  v2.`b.m.a` @type ^`b.c` := v0 @kind object;
  #L11de64.  if v3 != 0 then goto L11de78;
  #L11de68.  v0:= new `java.lang.NullPointerException`;
  #L11de6c.  v1:= "source == null" @kind object;
  #L11de70.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11de76.  throw v0;
  #L11de78.  v2.`b.m.b` @type ^`b.r` := v3 @kind object;
  #L11de7c.  return @kind void;
}
procedure `long` `a`(`b.m` v2 @kind this, `byte` v3 ) @signature `Lb/m;.a:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11de90.  v0:= 0L;
  #L11de94.  call temp:= `a`(v2, v3, v0) @signature `Lb/m;.a:(BJ)J` @kind virtual;
  #L11de9a.  v0:= temp @kind wide;
  #L11de9c.  return v0 @kind wide;
}
procedure `long` `a`(`b.m` v8 @kind this, `byte` v9 , `long` v10 ) @signature `Lb/m;.a:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11deb0.  v2:= -1L;
  #L11deb4.  v0:= v8.`b.m.c` @type ^`boolean` @kind boolean;
  #L11deb8.  if v0 == 0 then goto L11ded4;
  #L11debc.  v0:= new `java.lang.IllegalStateException`;
  #L11dec0.  v1:= "closed" @kind object;
  #L11dec4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11deca.  throw v0;
  #L11decc.  call temp:= `max`(v10, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L11ded2.  v10:= temp @kind wide;
  #L11ded4.  v0:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11ded8.  call temp:= `a`(v0, v9, v10) @signature `Lb/c;.a:(BJ)J` @kind virtual;
  #L11dede.  v0:= temp @kind wide;
  #L11dee0.  v4:= lcmp(v0, v2);
  #L11dee4.  if v4 == 0 then goto L11deea;
  #L11dee8.  return v0 @kind wide;
  #L11deea.  v0:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11deee.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11def2.  v4:= v8.`b.m.b` @type ^`b.r` @kind object;
  #L11def6.  v5:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11defa.  v6:= 8192L;
  #L11defe.  call temp:= `a`(v4, v5, v6) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11df04.  v4:= temp @kind wide;
  #L11df06.  v4:= lcmp(v4, v2);
  #L11df0a.  if v4 != 0 then goto L11decc;
  #L11df0e.  v0:= v2 @kind wide;
  #L11df10.  goto L11dee8;
}
procedure `long` `a`(`b.m` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `Lb/m;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11df24.  v4:= 0L;
  #L11df28.  v0:= -1L;
  #L11df2c.  if v7 != 0 then goto L11df40;
  #L11df30.  v0:= new `java.lang.IllegalArgumentException`;
  #L11df34.  v1:= "sink == null" @kind object;
  #L11df38.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11df3e.  throw v0;
  #L11df40.  v2:= lcmp(v8, v4);
  #L11df44.  if v2 >= 0 then goto L11df7a;
  #L11df48.  v0:= new `java.lang.IllegalArgumentException`;
  #L11df4c.  v1:= new `java.lang.StringBuilder`;
  #L11df50.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11df56.  v2:= "byteCount < 0: " @kind object;
  #L11df5a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11df60.  v1:= temp @kind object;
  #L11df62.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11df68.  v1:= temp @kind object;
  #L11df6a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11df70.  v1:= temp @kind object;
  #L11df72.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11df78.  throw v0;
  #L11df7a.  v2:= v6.`b.m.c` @type ^`boolean` @kind boolean;
  #L11df7e.  if v2 == 0 then goto L11df92;
  #L11df82.  v0:= new `java.lang.IllegalStateException`;
  #L11df86.  v1:= "closed" @kind object;
  #L11df8a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11df90.  throw v0;
  #L11df92.  v2:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11df96.  v2:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11df9a.  v2:= lcmp(v2, v4);
  #L11df9e.  if v2 != 0 then goto L11dfc0;
  #L11dfa2.  v2:= v6.`b.m.b` @type ^`b.r` @kind object;
  #L11dfa6.  v3:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11dfaa.  v4:= 8192L;
  #L11dfae.  call temp:= `a`(v2, v3, v4) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11dfb4.  v2:= temp @kind wide;
  #L11dfb6.  v2:= lcmp(v2, v0);
  #L11dfba.  if v2 != 0 then goto L11dfc0;
  #L11dfbe.  return v0 @kind wide;
  #L11dfc0.  v0:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11dfc4.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11dfc8.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11dfce.  v0:= temp @kind wide;
  #L11dfd0.  v2:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11dfd4.  call temp:= `a`(v2, v7, v0) @signature `Lb/c;.a:(Lb/c;J)J` @kind virtual;
  #L11dfda.  v0:= temp @kind wide;
  #L11dfdc.  goto L11dfbe;
}
procedure `b.s` `a`(`b.m` v1 @kind this) @signature `Lb/m;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11dff0.  v0:= v1.`b.m.b` @type ^`b.r` @kind object;
  #L11dff4.  call temp:= `a`(v0) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L11dffa.  v0:= temp @kind object;
  #L11dffc.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`b.m` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lb/m;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11e010.  if v3 != 0 then goto L11e024;
  #L11e014.  v0:= new `java.lang.IllegalArgumentException`;
  #L11e018.  v1:= "charset == null" @kind object;
  #L11e01c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11e022.  throw v0;
  #L11e024.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11e028.  v1:= v2.`b.m.b` @type ^`b.r` @kind object;
  #L11e02c.  call temp:= `a`(v0, v1) @signature `Lb/c;.a:(Lb/r;)J` @kind virtual;
  #L11e032.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11e036.  call temp:= `a`(v0, v3) @signature `Lb/c;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L11e03c.  v0:= temp @kind object;
  #L11e03e.  return v0 @kind object;
}
procedure `void` `a`(`b.m` v1 @kind this, `long` v2 ) @signature `Lb/m;.a:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11e050.  call temp:= `b`(v1, v2) @signature `Lb/m;.b:(J)Z` @kind virtual;
  #L11e056.  v0:= temp;
  #L11e058.  if v0 != 0 then goto L11e068;
  #L11e05c.  v0:= new `java.io.EOFException`;
  #L11e060.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11e066.  throw v0;
  #L11e068.  return @kind void;
}
procedure `boolean` `a`(`b.m` v7 @kind this, `long` v8 , `b.f` v10 @kind object) @signature `Lb/m;.a:(JLb/f;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11e07c.  v5:= 0I;
  #L11e07e.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11e084.  v6:= temp;
  #L11e086.  v1:= v7 @kind object;
  #L11e088.  v2:= v8 @kind wide;
  #L11e08a.  v4:= v10 @kind object;
  #L11e08c.  call temp:= `a`(v1, v2, v4, v5, v6) @signature `Lb/m;.a:(JLb/f;II)Z` @kind virtual;
  #L11e092.  v0:= temp;
  #L11e094.  return v0;
}
procedure `boolean` `a`(`b.m` v7 @kind this, `long` v8 , `b.f` v10 @kind object, `int` v11 , `int` v12 ) @signature `Lb/m;.a:(JLb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11e0a8.  v0:= 0I;
  #L11e0aa.  v1:= v7.`b.m.c` @type ^`boolean` @kind boolean;
  #L11e0ae.  if v1 == 0 then goto L11e0c2;
  #L11e0b2.  v0:= new `java.lang.IllegalStateException`;
  #L11e0b6.  v1:= "closed" @kind object;
  #L11e0ba.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11e0c0.  throw v0;
  #L11e0c2.  v2:= 0L;
  #L11e0c6.  v1:= lcmp(v8, v2);
  #L11e0ca.  if v1 < 0 then goto L11e0e4;
  #L11e0ce.  if v11 < 0 then goto L11e0e4;
  #L11e0d2.  if v12 < 0 then goto L11e0e4;
  #L11e0d6.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11e0dc.  v1:= temp;
  #L11e0de.  v1:= v1 - v11 @kind int;
  #L11e0e0.  if v1 >= v12 then goto L11e0e6;
  #L11e0e4.  return v0;
  #L11e0e6.  v1:= v0;
  #L11e0e8.  if v1 >= v12 then goto L11e124;
  #L11e0ec.  v2:= (`long`) v1 @kind i2l;
  #L11e0ee.  v2:= v2 + v8 @kind long;
  #L11e0f0.  v4:= 1L;
  #L11e0f4.  v4:= v4 + v2 @kind long;
  #L11e0f6.  call temp:= `b`(v7, v4) @signature `Lb/m;.b:(J)Z` @kind virtual;
  #L11e0fc.  v4:= temp;
  #L11e0fe.  if v4 == 0 then goto L11e0e4;
  #L11e102.  v4:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L11e106.  call temp:= `b`(v4, v2) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L11e10c.  v2:= temp;
  #L11e10e.  v3:= v11 + v1 @kind int;
  #L11e112.  call temp:= `a`(v10, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L11e118.  v3:= temp;
  #L11e11a.  if v2 != v3 then goto L11e0e4;
  #L11e11e.  v1:= v1 + 1;
  #L11e122.  goto L11e0e8;
  #L11e124.  v0:= 1I;
  #L11e126.  goto L11e0e4;
}
procedure `boolean` `b`(`b.m` v5 @kind this, `long` v6 ) @signature `Lb/m;.b:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11e138.  v0:= 0L;
  #L11e13c.  v0:= lcmp(v6, v0);
  #L11e140.  if v0 >= 0 then goto L11e176;
  #L11e144.  v0:= new `java.lang.IllegalArgumentException`;
  #L11e148.  v1:= new `java.lang.StringBuilder`;
  #L11e14c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11e152.  v2:= "byteCount < 0: " @kind object;
  #L11e156.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e15c.  v1:= temp @kind object;
  #L11e15e.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e164.  v1:= temp @kind object;
  #L11e166.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11e16c.  v1:= temp @kind object;
  #L11e16e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11e174.  throw v0;
  #L11e176.  v0:= v5.`b.m.c` @type ^`boolean` @kind boolean;
  #L11e17a.  if v0 == 0 then goto L11e18e;
  #L11e17e.  v0:= new `java.lang.IllegalStateException`;
  #L11e182.  v1:= "closed" @kind object;
  #L11e186.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11e18c.  throw v0;
  #L11e18e.  v0:= v5.`b.m.a` @type ^`b.c` @kind object;
  #L11e192.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11e196.  v0:= lcmp(v0, v6);
  #L11e19a.  if v0 >= 0 then goto L11e1c2;
  #L11e19e.  v0:= v5.`b.m.b` @type ^`b.r` @kind object;
  #L11e1a2.  v1:= v5.`b.m.a` @type ^`b.c` @kind object;
  #L11e1a6.  v2:= 8192L;
  #L11e1aa.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11e1b0.  v0:= temp @kind wide;
  #L11e1b2.  v2:= -1L;
  #L11e1b6.  v0:= lcmp(v0, v2);
  #L11e1ba.  if v0 != 0 then goto L11e18e;
  #L11e1be.  v0:= 0I;
  #L11e1c0.  return v0;
  #L11e1c2.  v0:= 1I;
  #L11e1c4.  goto L11e1c0;
}
procedure `b.c` `c`(`b.m` v1 @kind this) @signature `Lb/m;.c:()Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11e1d8.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11e1dc.  return v0 @kind object;
}
procedure `b.f` `c`(`b.m` v1 @kind this, `long` v2 ) @signature `Lb/m;.c:(J)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11e1f0.  call `a`(v1, v2) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11e1f6.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11e1fa.  call temp:= `c`(v0, v2) @signature `Lb/c;.c:(J)Lb/f;` @kind virtual;
  #L11e200.  v0:= temp @kind object;
  #L11e202.  return v0 @kind object;
}
procedure `void` `close`(`b.m` v1 @kind this) @signature `Lb/m;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11e214.  v0:= v1.`b.m.c` @type ^`boolean` @kind boolean;
  #L11e218.  if v0 == 0 then goto L11e21e;
  #L11e21c.  return @kind void;
  #L11e21e.  v0:= 1I;
  #L11e220.  v1.`b.m.c` @type ^`boolean` := v0 @kind boolean;
  #L11e224.  v0:= v1.`b.m.b` @type ^`b.r` @kind object;
  #L11e228.  call `close`(v0) @signature `Lb/r;.close:()V` @kind interface;
  #L11e22e.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11e232.  call `r`(v0) @signature `Lb/c;.r:()V` @kind virtual;
  #L11e238.  goto L11e21c;
}
procedure `boolean` `e`(`b.m` v4 @kind this) @signature `Lb/m;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11e24c.  v0:= v4.`b.m.c` @type ^`boolean` @kind boolean;
  #L11e250.  if v0 == 0 then goto L11e264;
  #L11e254.  v0:= new `java.lang.IllegalStateException`;
  #L11e258.  v1:= "closed" @kind object;
  #L11e25c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11e262.  throw v0;
  #L11e264.  v0:= v4.`b.m.a` @type ^`b.c` @kind object;
  #L11e268.  call temp:= `e`(v0) @signature `Lb/c;.e:()Z` @kind virtual;
  #L11e26e.  v0:= temp;
  #L11e270.  if v0 == 0 then goto L11e298;
  #L11e274.  v0:= v4.`b.m.b` @type ^`b.r` @kind object;
  #L11e278.  v1:= v4.`b.m.a` @type ^`b.c` @kind object;
  #L11e27c.  v2:= 8192L;
  #L11e280.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11e286.  v0:= temp @kind wide;
  #L11e288.  v2:= -1L;
  #L11e28c.  v0:= lcmp(v0, v2);
  #L11e290.  if v0 != 0 then goto L11e298;
  #L11e294.  v0:= 1I;
  #L11e296.  return v0;
  #L11e298.  v0:= 0I;
  #L11e29a.  goto L11e296;
}
procedure `java.io.InputStream` `f`(`b.m` v1 @kind this) @signature `Lb/m;.f:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11e2ac.  v0:= new `b.m$1`;
  #L11e2b0.  call `<init>`(v0, v1) @signature `Lb/m$1;.<init>:(Lb/m;)V` @kind direct;
  #L11e2b6.  return v0 @kind object;
}
procedure `byte`[] `f`(`b.m` v1 @kind this, `long` v2 ) @signature `Lb/m;.f:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11e2c8.  call `a`(v1, v2) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11e2ce.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11e2d2.  call temp:= `f`(v0, v2) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #L11e2d8.  v0:= temp @kind object;
  #L11e2da.  return v0 @kind object;
}
procedure `void` `g`(`b.m` v7 @kind this, `long` v8 ) @signature `Lb/m;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11e2ec.  v4:= 0L;
  #L11e2f0.  v0:= v7.`b.m.c` @type ^`boolean` @kind boolean;
  #L11e2f4.  if v0 == 0 then goto L11e328;
  #L11e2f8.  v0:= new `java.lang.IllegalStateException`;
  #L11e2fc.  v1:= "closed" @kind object;
  #L11e300.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11e306.  throw v0;
  #L11e308.  v0:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L11e30c.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L11e312.  v0:= temp @kind wide;
  #L11e314.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11e31a.  v0:= temp @kind wide;
  #L11e31c.  v2:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L11e320.  call `g`(v2, v0) @signature `Lb/c;.g:(J)V` @kind virtual;
  #L11e326.  v8:= v8 - v0 @kind long;
  #L11e328.  v0:= lcmp(v8, v4);
  #L11e32c.  if v0 <= 0 then goto L11e36c;
  #L11e330.  v0:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L11e334.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11e338.  v0:= lcmp(v0, v4);
  #L11e33c.  if v0 != 0 then goto L11e308;
  #L11e340.  v0:= v7.`b.m.b` @type ^`b.r` @kind object;
  #L11e344.  v1:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L11e348.  v2:= 8192L;
  #L11e34c.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11e352.  v0:= temp @kind wide;
  #L11e354.  v2:= -1L;
  #L11e358.  v0:= lcmp(v0, v2);
  #L11e35c.  if v0 != 0 then goto L11e308;
  #L11e360.  v0:= new `java.io.EOFException`;
  #L11e364.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11e36a.  throw v0;
  #L11e36c.  return @kind void;
}
procedure `byte` `h`(`b.m` v2 @kind this) @signature `Lb/m;.h:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11e380.  v0:= 1L;
  #L11e384.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11e38a.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11e38e.  call temp:= `h`(v0) @signature `Lb/c;.h:()B` @kind virtual;
  #L11e394.  v0:= temp;
  #L11e396.  return v0;
}
procedure `short` `i`(`b.m` v2 @kind this) @signature `Lb/m;.i:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11e3a8.  v0:= 2L;
  #L11e3ac.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11e3b2.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11e3b6.  call temp:= `i`(v0) @signature `Lb/c;.i:()S` @kind virtual;
  #L11e3bc.  v0:= temp;
  #L11e3be.  return v0;
}
procedure `int` `j`(`b.m` v2 @kind this) @signature `Lb/m;.j:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11e3d0.  v0:= 4L;
  #L11e3d4.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11e3da.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11e3de.  call temp:= `j`(v0) @signature `Lb/c;.j:()I` @kind virtual;
  #L11e3e4.  v0:= temp;
  #L11e3e6.  return v0;
}
procedure `short` `k`(`b.m` v2 @kind this) @signature `Lb/m;.k:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11e3f8.  v0:= 2L;
  #L11e3fc.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11e402.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11e406.  call temp:= `k`(v0) @signature `Lb/c;.k:()S` @kind virtual;
  #L11e40c.  v0:= temp;
  #L11e40e.  return v0;
}
procedure `int` `l`(`b.m` v2 @kind this) @signature `Lb/m;.l:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11e420.  v0:= 4L;
  #L11e424.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11e42a.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11e42e.  call temp:= `l`(v0) @signature `Lb/c;.l:()I` @kind virtual;
  #L11e434.  v0:= temp;
  #L11e436.  return v0;
}
procedure `long` `m`(`b.m` v6 @kind this) @signature `Lb/m;.m:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11e448.  v1:= 0I;
  #L11e44a.  v2:= 1L;
  #L11e44e.  call `a`(v6, v2) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11e454.  v0:= v1;
  #L11e456.  v2:= v0 + 1;
  #L11e45a.  v2:= (`long`) v2 @kind i2l;
  #L11e45c.  call temp:= `b`(v6, v2) @signature `Lb/m;.b:(J)Z` @kind virtual;
  #L11e462.  v2:= temp;
  #L11e464.  if v2 == 0 then goto L11e4da;
  #L11e468.  v2:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11e46c.  v4:= (`long`) v0 @kind i2l;
  #L11e46e.  call temp:= `b`(v2, v4) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L11e474.  v2:= temp;
  #L11e476.  v3:= 48I;
  #L11e47a.  if v2 < v3 then goto L11e486;
  #L11e47e.  v3:= 57I;
  #L11e482.  if v2 <= v3 then goto L11e4d4;
  #L11e486.  v3:= 97I;
  #L11e48a.  if v2 < v3 then goto L11e496;
  #L11e48e.  v3:= 102I;
  #L11e492.  if v2 <= v3 then goto L11e4d4;
  #L11e496.  v3:= 65I;
  #L11e49a.  if v2 < v3 then goto L11e4a6;
  #L11e49e.  v3:= 70I;
  #L11e4a2.  if v2 <= v3 then goto L11e4d4;
  #L11e4a6.  if v0 != 0 then goto L11e4da;
  #L11e4aa.  v0:= new `java.lang.NumberFormatException`;
  #L11e4ae.  v3:= "Expected leading [0-9a-fA-F] character but was %#x" @kind object;
  #L11e4b2.  v4:= 1I;
  #L11e4b4.  v4:= new `java.lang.Object`[v4];
  #L11e4b8.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L11e4be.  v2:= temp @kind object;
  #L11e4c0.  v4[v1]:= v2 @kind object;
  #L11e4c4.  call temp:= `format`(v3, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11e4ca.  v1:= temp @kind object;
  #L11e4cc.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11e4d2.  throw v0;
  #L11e4d4.  v0:= v0 + 1;
  #L11e4d8.  goto L11e456;
  #L11e4da.  v0:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11e4de.  call temp:= `m`(v0) @signature `Lb/c;.m:()J` @kind virtual;
  #L11e4e4.  v0:= temp @kind wide;
  #L11e4e6.  return v0 @kind wide;
}
procedure `java.lang.String` `p`(`b.m` v8 @kind this) @signature `Lb/m;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11e4f8.  v0:= 10I;
  #L11e4fc.  call temp:= `a`(v8, v0) @signature `Lb/m;.a:(B)J` @kind virtual;
  #L11e502.  v0:= temp @kind wide;
  #L11e504.  v2:= -1L;
  #L11e508.  v2:= lcmp(v0, v2);
  #L11e50c.  if v2 != 0 then goto L11e5ae;
  #L11e510.  v1:= new `b.c`;
  #L11e514.  call `<init>`(v1) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11e51a.  v0:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11e51e.  v2:= 0L;
  #L11e522.  v4:= 32L;
  #L11e526.  v6:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11e52a.  call temp:= `b`(v6) @signature `Lb/c;.b:()J` @kind virtual;
  #L11e530.  v6:= temp @kind wide;
  #L11e532.  call temp:= `min`(v4, v6) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11e538.  v4:= temp @kind wide;
  #L11e53a.  call temp:= `a`(v0, v1, v2, v4) @signature `Lb/c;.a:(Lb/c;JJ)Lb/c;` @kind virtual;
  #L11e540.  v0:= new `java.io.EOFException`;
  #L11e544.  v2:= new `java.lang.StringBuilder`;
  #L11e548.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11e54e.  v3:= "\\n not found: size=" @kind object;
  #L11e552.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e558.  v2:= temp @kind object;
  #L11e55a.  v3:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11e55e.  call temp:= `b`(v3) @signature `Lb/c;.b:()J` @kind virtual;
  #L11e564.  v4:= temp @kind wide;
  #L11e566.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e56c.  v2:= temp @kind object;
  #L11e56e.  v3:= " content=" @kind object;
  #L11e572.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e578.  v2:= temp @kind object;
  #L11e57a.  call temp:= `n`(v1) @signature `Lb/c;.n:()Lb/f;` @kind virtual;
  #L11e580.  v1:= temp @kind object;
  #L11e582.  call temp:= `e`(v1) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L11e588.  v1:= temp @kind object;
  #L11e58a.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e590.  v1:= temp @kind object;
  #L11e592.  v2:= "…" @kind object;
  #L11e596.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e59c.  v1:= temp @kind object;
  #L11e59e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11e5a4.  v1:= temp @kind object;
  #L11e5a6.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11e5ac.  throw v0;
  #L11e5ae.  v2:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11e5b2.  call temp:= `e`(v2, v0) @signature `Lb/c;.e:(J)Ljava/lang/String;` @kind virtual;
  #L11e5b8.  v0:= temp @kind object;
  #L11e5ba.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`b.m` v2 @kind this) @signature `Lb/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11e5cc.  v0:= new `java.lang.StringBuilder`;
  #L11e5d0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11e5d6.  v1:= "buffer(" @kind object;
  #L11e5da.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e5e0.  v0:= temp @kind object;
  #L11e5e2.  v1:= v2.`b.m.b` @type ^`b.r` @kind object;
  #L11e5e6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e5ec.  v0:= temp @kind object;
  #L11e5ee.  v1:= ")" @kind object;
  #L11e5f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e5f8.  v0:= temp @kind object;
  #L11e5fa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11e600.  v0:= temp @kind object;
  #L11e602.  return v0 @kind object;
}
