record `b.c$1` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `b.c` `b.c$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.c$1` v0 @kind this, `b.c` v1 @kind object) @signature `Lb/c$1;.<init>:(Lb/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11a220.  v0.`b.c$1.a` @type ^`b.c` := v1 @kind object;
  #L11a224.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L11a22a.  return @kind void;
}
procedure `int` `available`(`b.c$1` v4 @kind this) @signature `Lb/c$1;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11a23c.  v0:= v4.`b.c$1.a` @type ^`b.c` @kind object;
  #L11a240.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11a244.  v2:= 2147483647L;
  #L11a24a.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11a250.  v0:= temp @kind wide;
  #L11a252.  v0:= (`int`) v0 @kind l2i;
  #L11a254.  return v0;
}
procedure `void` `close`(`b.c$1` v0 @kind this) @signature `Lb/c$1;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L11a268.  return @kind void;
}
procedure `int` `read`(`b.c$1` v4 @kind this) @signature `Lb/c$1;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11a27c.  v0:= v4.`b.c$1.a` @type ^`b.c` @kind object;
  #L11a280.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11a284.  v2:= 0L;
  #L11a288.  v0:= lcmp(v0, v2);
  #L11a28c.  if v0 <= 0 then goto L11a2a2;
  #L11a290.  v0:= v4.`b.c$1.a` @type ^`b.c` @kind object;
  #L11a294.  call temp:= `h`(v0) @signature `Lb/c;.h:()B` @kind virtual;
  #L11a29a.  v0:= temp;
  #L11a29c.  v0:= v0 ^& 255;
  #L11a2a0.  return v0;
  #L11a2a2.  v0:= -1I;
  #L11a2a4.  goto L11a2a0;
}
procedure `int` `read`(`b.c$1` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lb/c$1;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11a2b8.  v0:= v1.`b.c$1.a` @type ^`b.c` @kind object;
  #L11a2bc.  call temp:= `a`(v0, v2, v3, v4) @signature `Lb/c;.a:([BII)I` @kind virtual;
  #L11a2c2.  v0:= temp;
  #L11a2c4.  return v0;
}
procedure `java.lang.String` `toString`(`b.c$1` v2 @kind this) @signature `Lb/c$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11a2d8.  v0:= new `java.lang.StringBuilder`;
  #L11a2dc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11a2e2.  v1:= v2.`b.c$1.a` @type ^`b.c` @kind object;
  #L11a2e6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a2ec.  v0:= temp @kind object;
  #L11a2ee.  v1:= ".inputStream()" @kind object;
  #L11a2f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a2f8.  v0:= temp @kind object;
  #L11a2fa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11a300.  v0:= temp @kind object;
  #L11a302.  return v0 @kind object;
}
