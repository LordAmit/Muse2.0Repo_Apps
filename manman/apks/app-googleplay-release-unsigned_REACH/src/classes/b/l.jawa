record `b.l` @kind class @AccessFlag FINAL extends `b.d` @kind interface {
  `b.c` `b.l.a` @AccessFlag PUBLIC_FINAL;
  `b.q` `b.l.b` @AccessFlag PUBLIC_FINAL;
  `boolean` `b.l.c` @AccessFlag ;
}
procedure `void` `<init>`(`b.l` v2 @kind this, `b.q` v3 @kind object) @signature `Lb/l;.<init>:(Lb/q;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L11d860.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11d866.  v0:= new `b.c`;
  #L11d86a.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11d870.  v2.`b.l.a` @type ^`b.c` := v0 @kind object;
  #L11d874.  if v3 != 0 then goto L11d888;
  #L11d878.  v0:= new `java.lang.NullPointerException`;
  #L11d87c.  v1:= "sink == null" @kind object;
  #L11d880.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d886.  throw v0;
  #L11d888.  v2.`b.l.b` @type ^`b.q` := v3 @kind object;
  #L11d88c.  return @kind void;
}
procedure `b.s` `a`(`b.l` v1 @kind this) @signature `Lb/l;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d8a0.  v0:= v1.`b.l.b` @type ^`b.q` @kind object;
  #L11d8a4.  call temp:= `a`(v0) @signature `Lb/q;.a:()Lb/s;` @kind interface;
  #L11d8aa.  v0:= temp @kind object;
  #L11d8ac.  return v0 @kind object;
}
procedure `void` `a_`(`b.l` v2 @kind this, `b.c` v3 @kind object, `long` v4 ) @signature `Lb/l;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d8c0.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11d8c4.  if v0 == 0 then goto L11d8d8;
  #L11d8c8.  v0:= new `java.lang.IllegalStateException`;
  #L11d8cc.  v1:= "closed" @kind object;
  #L11d8d0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d8d6.  throw v0;
  #L11d8d8.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11d8dc.  call `a_`(v0, v3, v4) @signature `Lb/c;.a_:(Lb/c;J)V` @kind virtual;
  #L11d8e2.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11d8e8.  return @kind void;
}
procedure `b.d` `b`(`b.l` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lb/l;.b:(Ljava/lang/String;)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d8fc.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11d900.  if v0 == 0 then goto L11d914;
  #L11d904.  v0:= new `java.lang.IllegalStateException`;
  #L11d908.  v1:= "closed" @kind object;
  #L11d90c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d912.  throw v0;
  #L11d914.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11d918.  call temp:= `a`(v0, v3) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @kind virtual;
  #L11d91e.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11d924.  v0:= temp @kind object;
  #L11d926.  return v0 @kind object;
}
procedure `b.c` `c`(`b.l` v1 @kind this) @signature `Lb/l;.c:()Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d938.  v0:= v1.`b.l.a` @type ^`b.c` @kind object;
  #L11d93c.  return v0 @kind object;
}
procedure `b.d` `c`(`b.l` v2 @kind this, `byte`[] v3 @kind object) @signature `Lb/l;.c:([B)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d950.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11d954.  if v0 == 0 then goto L11d968;
  #L11d958.  v0:= new `java.lang.IllegalStateException`;
  #L11d95c.  v1:= "closed" @kind object;
  #L11d960.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d966.  throw v0;
  #L11d968.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11d96c.  call temp:= `b`(v0, v3) @signature `Lb/c;.b:([B)Lb/c;` @kind virtual;
  #L11d972.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11d978.  v0:= temp @kind object;
  #L11d97a.  return v0 @kind object;
}
procedure `b.d` `c`(`b.l` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lb/l;.c:([BII)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d98c.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11d990.  if v0 == 0 then goto L11d9a4;
  #L11d994.  v0:= new `java.lang.IllegalStateException`;
  #L11d998.  v1:= "closed" @kind object;
  #L11d99c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d9a2.  throw v0;
  #L11d9a4.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11d9a8.  call temp:= `b`(v0, v3, v4, v5) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L11d9ae.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11d9b4.  v0:= temp @kind object;
  #L11d9b6.  return v0 @kind object;
}
procedure `void` `close`(`b.l` v6 @kind this) @signature `Lb/l;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11d9c8.  v0:= v6.`b.l.c` @type ^`boolean` @kind boolean;
  #L11d9cc.  if v0 == 0 then goto L11d9d2;
  #L11d9d0.  return @kind void;
  #L11d9d2.  v0:= 0I;
  #Try_start0.  
  #L11d9d4.  v1:= v6.`b.l.a` @type ^`b.c` @kind object;
  #L11d9d8.  v2:= v1.`b.c.b` @type ^`long` @kind wide;
  #L11d9dc.  v4:= 0L;
  #L11d9e0.  v1:= lcmp(v2, v4);
  #L11d9e4.  if v1 <= 0 then goto L11d9fe;
  #L11d9e8.  v1:= v6.`b.l.b` @type ^`b.q` @kind object;
  #L11d9ec.  v2:= v6.`b.l.a` @type ^`b.c` @kind object;
  #L11d9f0.  v3:= v6.`b.l.a` @type ^`b.c` @kind object;
  #L11d9f4.  v4:= v3.`b.c.b` @type ^`long` @kind wide;
  #L11d9f8.  call `a_`(v1, v2, v4) @signature `Lb/q;.a_:(Lb/c;J)V` @kind interface;
  #Try_end0.  
  #Try_start1.  
  #L11d9fe.  v1:= v6.`b.l.b` @type ^`b.q` @kind object;
  #L11da02.  call `close`(v1) @signature `Lb/q;.close:()V` @kind interface;
  #Try_end1.  
  #L11da08.  v1:= 1I;
  #L11da0a.  v6.`b.l.c` @type ^`boolean` := v1 @kind boolean;
  #L11da0e.  if v0 == 0 then goto L11d9d0;
  #L11da12.  call `a`(v0) @signature `Lb/t;.a:(Ljava/lang/Throwable;)V` @kind static;
  #L11da18.  goto L11d9d0;
  #L11da1a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11da1c.  if v0 != 0 then goto L11da08;
  #L11da20.  v0:= v1 @kind object;
  #L11da22.  goto L11da08;
  #L11da24.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11da26.  goto L11d9fe;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L11da24;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L11da1a;
}
procedure `void` `flush`(`b.l` v4 @kind this) @signature `Lb/l;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11da54.  v0:= v4.`b.l.c` @type ^`boolean` @kind boolean;
  #L11da58.  if v0 == 0 then goto L11da6c;
  #L11da5c.  v0:= new `java.lang.IllegalStateException`;
  #L11da60.  v1:= "closed" @kind object;
  #L11da64.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11da6a.  throw v0;
  #L11da6c.  v0:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L11da70.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11da74.  v2:= 0L;
  #L11da78.  v0:= lcmp(v0, v2);
  #L11da7c.  if v0 <= 0 then goto L11da96;
  #L11da80.  v0:= v4.`b.l.b` @type ^`b.q` @kind object;
  #L11da84.  v1:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L11da88.  v2:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L11da8c.  v2:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11da90.  call `a_`(v0, v1, v2) @signature `Lb/q;.a_:(Lb/c;J)V` @kind interface;
  #L11da96.  v0:= v4.`b.l.b` @type ^`b.q` @kind object;
  #L11da9a.  call `flush`(v0) @signature `Lb/q;.flush:()V` @kind interface;
  #L11daa0.  return @kind void;
}
procedure `b.d` `g`(`b.l` v2 @kind this, `int` v3 ) @signature `Lb/l;.g:(I)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11dab4.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11dab8.  if v0 == 0 then goto L11dacc;
  #L11dabc.  v0:= new `java.lang.IllegalStateException`;
  #L11dac0.  v1:= "closed" @kind object;
  #L11dac4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11daca.  throw v0;
  #L11dacc.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11dad0.  call temp:= `d`(v0, v3) @signature `Lb/c;.d:(I)Lb/c;` @kind virtual;
  #L11dad6.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11dadc.  v0:= temp @kind object;
  #L11dade.  return v0 @kind object;
}
procedure `b.d` `h`(`b.l` v2 @kind this, `int` v3 ) @signature `Lb/l;.h:(I)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11daf0.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11daf4.  if v0 == 0 then goto L11db08;
  #L11daf8.  v0:= new `java.lang.IllegalStateException`;
  #L11dafc.  v1:= "closed" @kind object;
  #L11db00.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11db06.  throw v0;
  #L11db08.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11db0c.  call temp:= `c`(v0, v3) @signature `Lb/c;.c:(I)Lb/c;` @kind virtual;
  #L11db12.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11db18.  v0:= temp @kind object;
  #L11db1a.  return v0 @kind object;
}
procedure `b.d` `i`(`b.l` v2 @kind this, `int` v3 ) @signature `Lb/l;.i:(I)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11db2c.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11db30.  if v0 == 0 then goto L11db44;
  #L11db34.  v0:= new `java.lang.IllegalStateException`;
  #L11db38.  v1:= "closed" @kind object;
  #L11db3c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11db42.  throw v0;
  #L11db44.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11db48.  call temp:= `b`(v0, v3) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11db4e.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11db54.  v0:= temp @kind object;
  #L11db56.  return v0 @kind object;
}
procedure `b.d` `j`(`b.l` v3 @kind this, `long` v4 ) @signature `Lb/l;.j:(J)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11db68.  v0:= v3.`b.l.c` @type ^`boolean` @kind boolean;
  #L11db6c.  if v0 == 0 then goto L11db80;
  #L11db70.  v0:= new `java.lang.IllegalStateException`;
  #L11db74.  v1:= "closed" @kind object;
  #L11db78.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11db7e.  throw v0;
  #L11db80.  v0:= v3.`b.l.a` @type ^`b.c` @kind object;
  #L11db84.  call temp:= `i`(v0, v4) @signature `Lb/c;.i:(J)Lb/c;` @kind virtual;
  #L11db8a.  call temp:= `u`(v3) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11db90.  v0:= temp @kind object;
  #L11db92.  return v0 @kind object;
}
procedure `b.d` `k`(`b.l` v3 @kind this, `long` v4 ) @signature `Lb/l;.k:(J)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11dba4.  v0:= v3.`b.l.c` @type ^`boolean` @kind boolean;
  #L11dba8.  if v0 == 0 then goto L11dbbc;
  #L11dbac.  v0:= new `java.lang.IllegalStateException`;
  #L11dbb0.  v1:= "closed" @kind object;
  #L11dbb4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11dbba.  throw v0;
  #L11dbbc.  v0:= v3.`b.l.a` @type ^`b.c` @kind object;
  #L11dbc0.  call temp:= `h`(v0, v4) @signature `Lb/c;.h:(J)Lb/c;` @kind virtual;
  #L11dbc6.  call temp:= `u`(v3) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11dbcc.  v0:= temp @kind object;
  #L11dbce.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`b.l` v2 @kind this) @signature `Lb/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11dbe0.  v0:= new `java.lang.StringBuilder`;
  #L11dbe4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11dbea.  v1:= "buffer(" @kind object;
  #L11dbee.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11dbf4.  v0:= temp @kind object;
  #L11dbf6.  v1:= v2.`b.l.b` @type ^`b.q` @kind object;
  #L11dbfa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11dc00.  v0:= temp @kind object;
  #L11dc02.  v1:= ")" @kind object;
  #L11dc06.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11dc0c.  v0:= temp @kind object;
  #L11dc0e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11dc14.  v0:= temp @kind object;
  #L11dc16.  return v0 @kind object;
}
procedure `b.d` `u`(`b.l` v4 @kind this) @signature `Lb/l;.u:()Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11dc28.  v0:= v4.`b.l.c` @type ^`boolean` @kind boolean;
  #L11dc2c.  if v0 == 0 then goto L11dc40;
  #L11dc30.  v0:= new `java.lang.IllegalStateException`;
  #L11dc34.  v1:= "closed" @kind object;
  #L11dc38.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11dc3e.  throw v0;
  #L11dc40.  v0:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L11dc44.  call temp:= `g`(v0) @signature `Lb/c;.g:()J` @kind virtual;
  #L11dc4a.  v0:= temp @kind wide;
  #L11dc4c.  v2:= 0L;
  #L11dc50.  v2:= lcmp(v0, v2);
  #L11dc54.  if v2 <= 0 then goto L11dc66;
  #L11dc58.  v2:= v4.`b.l.b` @type ^`b.q` @kind object;
  #L11dc5c.  v3:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L11dc60.  call `a_`(v2, v3, v0) @signature `Lb/q;.a_:(Lb/c;J)V` @kind interface;
  #L11dc66.  return v4 @kind object;
}
