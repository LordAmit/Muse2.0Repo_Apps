record `b.p` @kind class @AccessFlag FINAL extends `b.f` @kind class {
  `byte`[][] `b.p.f` @AccessFlag FINAL_TRANSIENT;
  `int`[] `b.p.g` @AccessFlag FINAL_TRANSIENT;
}
procedure `void` `<init>`(`b.p` v7 @kind this, `b.c` v8 @kind object, `int` v9 ) @signature `Lb/p;.<init>:(Lb/c;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11e9ec.  v6:= 0I;
  #L11e9ee.  v0:= 0I;
  #L11e9f0.  call `<init>`(v7, v0) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11e9f6.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L11e9fa.  v2:= 0L;
  #L11e9fe.  v4:= (`long`) v9 @kind i2l;
  #L11ea00.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11ea06.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11ea0a.  v1:= v6;
  #L11ea0c.  v2:= v6;
  #L11ea0e.  if v2 >= v9 then goto L11ea44;
  #L11ea12.  v3:= v0.`b.n.c` @type ^`int`;
  #L11ea16.  v4:= v0.`b.n.b` @type ^`int`;
  #L11ea1a.  if v3 != v4 then goto L11ea2e;
  #L11ea1e.  v0:= new `java.lang.AssertionError`;
  #L11ea22.  v1:= "s.limit == s.pos" @kind object;
  #L11ea26.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11ea2c.  throw v0;
  #L11ea2e.  v3:= v0.`b.n.c` @type ^`int`;
  #L11ea32.  v4:= v0.`b.n.b` @type ^`int`;
  #L11ea36.  v3:= v3 - v4 @kind int;
  #L11ea38.  v2:= v2 + v3 @kind int;
  #L11ea3a.  v1:= v1 + 1;
  #L11ea3e.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11ea42.  goto L11ea0e;
  #L11ea44.  v0:= new `byte`[][v1];
  #L11ea48.  v7.`b.p.f` @type ^`byte`[][] := v0 @kind object;
  #L11ea4c.  v0:= v1 * 2;
  #L11ea50.  v0:= new `int`[v0];
  #L11ea54.  v7.`b.p.g` @type ^`int`[] := v0 @kind object;
  #L11ea58.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11ea5c.  v1:= v0 @kind object;
  #L11ea5e.  v2:= v6;
  #L11ea60.  if v6 >= v9 then goto L11eab0;
  #L11ea64.  v0:= v7.`b.p.f` @type ^`byte`[][] @kind object;
  #L11ea68.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11ea6c.  v0[v2]:= v3 @kind object;
  #L11ea70.  v0:= v1.`b.n.c` @type ^`int`;
  #L11ea74.  v3:= v1.`b.n.b` @type ^`int`;
  #L11ea78.  v0:= v0 - v3 @kind int;
  #L11ea7a.  v0:= v0 + v6 @kind int;
  #L11ea7c.  if v0 <= v9 then goto L11ea82;
  #L11ea80.  v0:= v9;
  #L11ea82.  v3:= v7.`b.p.g` @type ^`int`[] @kind object;
  #L11ea86.  v3[v2]:= v0;
  #L11ea8a.  v3:= v7.`b.p.g` @type ^`int`[] @kind object;
  #L11ea8e.  v4:= v7.`b.p.f` @type ^`byte`[][] @kind object;
  #L11ea92.  v4:= length @variable v4;
  #L11ea94.  v4:= v4 + v2 @kind int;
  #L11ea96.  v5:= v1.`b.n.b` @type ^`int`;
  #L11ea9a.  v3[v4]:= v5;
  #L11ea9e.  v3:= 1I;
  #L11eaa0.  v1.`b.n.d` @type ^`boolean` := v3 @kind boolean;
  #L11eaa4.  v2:= v2 + 1;
  #L11eaa8.  v1:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L11eaac.  v6:= v0;
  #L11eaae.  goto L11ea60;
  #L11eab0.  return @kind void;
}
procedure `int` `b`(`b.p` v4 @kind this, `int` v5 ) @signature `Lb/p;.b:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11eac4.  v0:= v4.`b.p.g` @type ^`int`[] @kind object;
  #L11eac8.  v1:= 0I;
  #L11eaca.  v2:= v4.`b.p.f` @type ^`byte`[][] @kind object;
  #L11eace.  v2:= length @variable v2;
  #L11ead0.  v3:= v5 + 1;
  #L11ead4.  call temp:= `binarySearch`(v0, v1, v2, v3) @signature `Ljava/util/Arrays;.binarySearch:([IIII)I` @kind static;
  #L11eada.  v0:= temp;
  #L11eadc.  if v0 < 0 then goto L11eae2;
  #L11eae0.  return v0;
  #L11eae2.  v0:= v0 ^~ -1;
  #L11eae6.  goto L11eae0;
}
procedure `b.f` `i`(`b.p` v2 @kind this) @signature `Lb/p;.i:()Lb/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L11eaf8.  v0:= new `b.f`;
  #L11eafc.  call temp:= `h`(v2) @signature `Lb/p;.h:()[B` @kind virtual;
  #L11eb02.  v1:= temp @kind object;
  #L11eb04.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11eb0a.  return v0 @kind object;
}
procedure `byte` `a`(`b.p` v6 @kind this, `int` v7 ) @signature `Lb/p;.a:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11eb1c.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11eb20.  v1:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11eb24.  v1:= length @variable v1;
  #L11eb26.  v1:= v1 + -1;
  #L11eb2a.  v0:= v0[v1];
  #L11eb2e.  v0:= (`long`) v0 @kind i2l;
  #L11eb30.  v2:= (`long`) v7 @kind i2l;
  #L11eb32.  v4:= 1L;
  #L11eb36.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11eb3c.  call temp:= `b`(v6, v7) @signature `Lb/p;.b:(I)I` @kind direct;
  #L11eb42.  v1:= temp;
  #L11eb44.  if v1 != 0 then goto L11eb6e;
  #L11eb48.  v0:= 0I;
  #L11eb4a.  v2:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11eb4e.  v3:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11eb52.  v3:= length @variable v3;
  #L11eb54.  v3:= v3 + v1 @kind int;
  #L11eb56.  v2:= v2[v3];
  #L11eb5a.  v3:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11eb5e.  v1:= v3[v1] @kind object;
  #L11eb62.  v0:= v7 - v0 @kind int;
  #L11eb66.  v0:= v0 + v2 @kind int;
  #L11eb68.  v0:= v1[v0] @kind byte;
  #L11eb6c.  return v0;
  #L11eb6e.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11eb72.  v2:= v1 + -1;
  #L11eb76.  v0:= v0[v2];
  #L11eb7a.  goto L11eb4a;
}
procedure `b.f` `a`(`b.p` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lb/p;.a:(II)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11eb8c.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11eb92.  v0:= temp @kind object;
  #L11eb94.  call temp:= `a`(v0, v2, v3) @signature `Lb/f;.a:(II)Lb/f;` @kind virtual;
  #L11eb9a.  v0:= temp @kind object;
  #L11eb9c.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`b.p` v1 @kind this) @signature `Lb/p;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11ebb0.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11ebb6.  v0:= temp @kind object;
  #L11ebb8.  call temp:= `a`(v0) @signature `Lb/f;.a:()Ljava/lang/String;` @kind virtual;
  #L11ebbe.  v0:= temp @kind object;
  #L11ebc0.  return v0 @kind object;
}
procedure `void` `a`(`b.p` v8 @kind this, `b.c` v9 @kind object) @signature `Lb/p;.a:(Lb/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11ebd4.  v0:= 0I;
  #L11ebd6.  v1:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L11ebda.  v3:= length @variable v1;
  #L11ebdc.  v1:= v0;
  #L11ebde.  if v0 >= v3 then goto L11ec3c;
  #L11ebe2.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L11ebe6.  v4:= v3 + v0 @kind int;
  #L11ebea.  v4:= v2[v4];
  #L11ebee.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L11ebf2.  v2:= v2[v0];
  #L11ebf6.  v5:= new `b.n`;
  #L11ebfa.  v6:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L11ebfe.  v6:= v6[v0] @kind object;
  #L11ec02.  v7:= v4 + v2 @kind int;
  #L11ec06.  v1:= v7 - v1 @kind int;
  #L11ec0a.  call `<init>`(v5, v6, v4, v1) @signature `Lb/n;.<init>:([BII)V` @kind direct;
  #L11ec10.  v1:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11ec14.  if v1 != 0 then goto L11ec2c;
  #L11ec18.  v5.`b.n.g` @type ^`b.n` := v5 @kind object;
  #L11ec1c.  v5.`b.n.f` @type ^`b.n` := v5 @kind object;
  #L11ec20.  v9.`b.c.a` @type ^`b.n` := v5 @kind object;
  #L11ec24.  v0:= v0 + 1;
  #L11ec28.  v1:= v2;
  #L11ec2a.  goto L11ebde;
  #L11ec2c.  v1:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11ec30.  v1:= v1.`b.n.g` @type ^`b.n` @kind object;
  #L11ec34.  call temp:= `a`(v1, v5) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11ec3a.  goto L11ec24;
  #L11ec3c.  v2:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11ec40.  v0:= (`long`) v1 @kind i2l;
  #L11ec42.  v0:= v0 + v2 @kind long;
  #L11ec44.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11ec48.  return @kind void;
}
procedure `boolean` `a`(`b.p` v6 @kind this, `int` v7 , `b.f` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lb/p;.a:(ILb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11ec5c.  v1:= 0I;
  #L11ec5e.  if v7 < 0 then goto L11ec70;
  #L11ec62.  call temp:= `g`(v6) @signature `Lb/p;.g:()I` @kind virtual;
  #L11ec68.  v0:= temp;
  #L11ec6a.  v0:= v0 - v10 @kind int;
  #L11ec6c.  if v7 <= v0 then goto L11ec72;
  #L11ec70.  return v1;
  #L11ec72.  call temp:= `b`(v6, v7) @signature `Lb/p;.b:(I)I` @kind direct;
  #L11ec78.  v0:= temp;
  #L11ec7a.  v2:= v0;
  #L11ec7c.  if v10 <= 0 then goto L11ece2;
  #L11ec80.  if v2 != 0 then goto L11ecd4;
  #L11ec84.  v0:= v1;
  #L11ec86.  v3:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11ec8a.  v3:= v3[v2];
  #L11ec8e.  v3:= v3 - v0 @kind int;
  #L11ec90.  v3:= v3 + v0 @kind int;
  #L11ec92.  v3:= v3 - v7 @kind int;
  #L11ec94.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11ec9a.  v3:= temp;
  #L11ec9c.  v4:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11eca0.  v5:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11eca4.  v5:= length @variable v5;
  #L11eca6.  v5:= v5 + v2 @kind int;
  #L11eca8.  v4:= v4[v5];
  #L11ecac.  v0:= v7 - v0 @kind int;
  #L11ecb0.  v0:= v0 + v4 @kind int;
  #L11ecb2.  v4:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11ecb6.  v4:= v4[v2] @kind object;
  #L11ecba.  call temp:= `a`(v8, v9, v4, v0, v3) @signature `Lb/f;.a:(I[BII)Z` @kind virtual;
  #L11ecc0.  v0:= temp;
  #L11ecc2.  if v0 == 0 then goto L11ec70;
  #L11ecc6.  v7:= v7 + v3 @kind int;
  #L11ecc8.  v9:= v9 + v3 @kind int;
  #L11ecca.  v10:= v10 - v3 @kind int;
  #L11eccc.  v0:= v2 + 1;
  #L11ecd0.  v2:= v0;
  #L11ecd2.  goto L11ec7c;
  #L11ecd4.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11ecd8.  v3:= v2 + -1;
  #L11ecdc.  v0:= v0[v3];
  #L11ece0.  goto L11ec86;
  #L11ece2.  v1:= 1I;
  #L11ece4.  goto L11ec70;
}
procedure `boolean` `a`(`b.p` v6 @kind this, `int` v7 , `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lb/p;.a:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11ecf8.  v1:= 0I;
  #L11ecfa.  if v7 < 0 then goto L11ed18;
  #L11ecfe.  call temp:= `g`(v6) @signature `Lb/p;.g:()I` @kind virtual;
  #L11ed04.  v0:= temp;
  #L11ed06.  v0:= v0 - v10 @kind int;
  #L11ed08.  if v7 > v0 then goto L11ed18;
  #L11ed0c.  if v9 < 0 then goto L11ed18;
  #L11ed10.  v0:= length @variable v8;
  #L11ed12.  v0:= v0 - v10 @kind int;
  #L11ed14.  if v9 <= v0 then goto L11ed1a;
  #L11ed18.  return v1;
  #L11ed1a.  call temp:= `b`(v6, v7) @signature `Lb/p;.b:(I)I` @kind direct;
  #L11ed20.  v0:= temp;
  #L11ed22.  v2:= v0;
  #L11ed24.  if v10 <= 0 then goto L11ed8a;
  #L11ed28.  if v2 != 0 then goto L11ed7c;
  #L11ed2c.  v0:= v1;
  #L11ed2e.  v3:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11ed32.  v3:= v3[v2];
  #L11ed36.  v3:= v3 - v0 @kind int;
  #L11ed38.  v3:= v3 + v0 @kind int;
  #L11ed3a.  v3:= v3 - v7 @kind int;
  #L11ed3c.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11ed42.  v3:= temp;
  #L11ed44.  v4:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11ed48.  v5:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11ed4c.  v5:= length @variable v5;
  #L11ed4e.  v5:= v5 + v2 @kind int;
  #L11ed50.  v4:= v4[v5];
  #L11ed54.  v0:= v7 - v0 @kind int;
  #L11ed58.  v0:= v0 + v4 @kind int;
  #L11ed5a.  v4:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11ed5e.  v4:= v4[v2] @kind object;
  #L11ed62.  call temp:= `a`(v4, v0, v8, v9, v3) @signature `Lb/t;.a:([BI[BII)Z` @kind static;
  #L11ed68.  v0:= temp;
  #L11ed6a.  if v0 == 0 then goto L11ed18;
  #L11ed6e.  v7:= v7 + v3 @kind int;
  #L11ed70.  v9:= v9 + v3 @kind int;
  #L11ed72.  v10:= v10 - v3 @kind int;
  #L11ed74.  v0:= v2 + 1;
  #L11ed78.  v2:= v0;
  #L11ed7a.  goto L11ed24;
  #L11ed7c.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11ed80.  v3:= v2 + -1;
  #L11ed84.  v0:= v0[v3];
  #L11ed88.  goto L11ed2e;
  #L11ed8a.  v1:= 1I;
  #L11ed8c.  goto L11ed18;
}
procedure `java.lang.String` `b`(`b.p` v1 @kind this) @signature `Lb/p;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11eda0.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11eda6.  v0:= temp @kind object;
  #L11eda8.  call temp:= `b`(v0) @signature `Lb/f;.b:()Ljava/lang/String;` @kind virtual;
  #L11edae.  v0:= temp @kind object;
  #L11edb0.  return v0 @kind object;
}
procedure `b.f` `c`(`b.p` v1 @kind this) @signature `Lb/p;.c:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11edc4.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11edca.  v0:= temp @kind object;
  #L11edcc.  call temp:= `c`(v0) @signature `Lb/f;.c:()Lb/f;` @kind virtual;
  #L11edd2.  v0:= temp @kind object;
  #L11edd4.  return v0 @kind object;
}
procedure `b.f` `d`(`b.p` v1 @kind this) @signature `Lb/p;.d:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11ede8.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11edee.  v0:= temp @kind object;
  #L11edf0.  call temp:= `d`(v0) @signature `Lb/f;.d:()Lb/f;` @kind virtual;
  #L11edf6.  v0:= temp @kind object;
  #L11edf8.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`b.p` v1 @kind this) @signature `Lb/p;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11ee0c.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11ee12.  v0:= temp @kind object;
  #L11ee14.  call temp:= `e`(v0) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L11ee1a.  v0:= temp @kind object;
  #L11ee1c.  return v0 @kind object;
}
procedure `boolean` `equals`(`b.p` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lb/p;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11ee30.  v1:= 1I;
  #L11ee32.  v2:= 0I;
  #L11ee34.  if v5 != v4 then goto L11ee3a;
  #L11ee38.  return v1;
  #L11ee3a.  v0:= instanceof @variable v5 @type ^`b.f` @kind boolean;
  #L11ee3e.  if v0 == 0 then goto L11ee7a;
  #L11ee42.  v0:= v5 @kind object;
  #L11ee44.  v0:= (`b.f`) v0 @kind object;
  #L11ee48.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L11ee4e.  v0:= temp;
  #L11ee50.  call temp:= `g`(v4) @signature `Lb/p;.g:()I` @kind virtual;
  #L11ee56.  v3:= temp;
  #L11ee58.  if v0 != v3 then goto L11ee7a;
  #L11ee5c.  v5:= (`b.f`) v5 @kind object;
  #L11ee60.  call temp:= `g`(v4) @signature `Lb/p;.g:()I` @kind virtual;
  #L11ee66.  v0:= temp;
  #L11ee68.  call temp:= `a`(v4, v2, v5, v2, v0) @signature `Lb/p;.a:(ILb/f;II)Z` @kind virtual;
  #L11ee6e.  v0:= temp;
  #L11ee70.  if v0 == 0 then goto L11ee7a;
  #L11ee74.  v0:= v1;
  #L11ee76.  v1:= v0;
  #L11ee78.  goto L11ee38;
  #L11ee7a.  v0:= v2;
  #L11ee7c.  goto L11ee76;
}
procedure `b.f` `f`(`b.p` v1 @kind this) @signature `Lb/p;.f:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11ee90.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11ee96.  v0:= temp @kind object;
  #L11ee98.  call temp:= `f`(v0) @signature `Lb/f;.f:()Lb/f;` @kind virtual;
  #L11ee9e.  v0:= temp @kind object;
  #L11eea0.  return v0 @kind object;
}
procedure `int` `g`(`b.p` v2 @kind this) @signature `Lb/p;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11eeb4.  v0:= v2.`b.p.g` @type ^`int`[] @kind object;
  #L11eeb8.  v1:= v2.`b.p.f` @type ^`byte`[][] @kind object;
  #L11eebc.  v1:= length @variable v1;
  #L11eebe.  v1:= v1 + -1;
  #L11eec2.  v0:= v0[v1];
  #L11eec6.  return v0;
}
procedure `byte`[] `h`(`b.p` v8 @kind this) @signature `Lb/p;.h:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11eed8.  v0:= 0I;
  #L11eeda.  v1:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L11eede.  v2:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L11eee2.  v2:= length @variable v2;
  #L11eee4.  v2:= v2 + -1;
  #L11eee8.  v1:= v1[v2];
  #L11eeec.  v3:= new `byte`[v1];
  #L11eef0.  v1:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L11eef4.  v4:= length @variable v1;
  #L11eef6.  v1:= v0;
  #L11eef8.  if v0 >= v4 then goto L11ef2a;
  #L11eefc.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L11ef00.  v5:= v4 + v0 @kind int;
  #L11ef04.  v5:= v2[v5];
  #L11ef08.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L11ef0c.  v2:= v2[v0];
  #L11ef10.  v6:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L11ef14.  v6:= v6[v0] @kind object;
  #L11ef18.  v7:= v2 - v1 @kind int;
  #L11ef1c.  call `arraycopy`(v6, v5, v3, v1, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11ef22.  v0:= v0 + 1;
  #L11ef26.  v1:= v2;
  #L11ef28.  goto L11eef8;
  #L11ef2a.  return v3 @kind object;
}
procedure `int` `hashCode`(`b.p` v9 @kind this) @signature `Lb/p;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11ef3c.  v1:= 0I;
  #L11ef3e.  v0:= v9.`b.p.d` @type ^`int`;
  #L11ef42.  if v0 == 0 then goto L11ef48;
  #L11ef46.  return v0;
  #L11ef48.  v0:= 1I;
  #L11ef4a.  v2:= v9.`b.p.f` @type ^`byte`[][] @kind object;
  #L11ef4e.  v5:= length @variable v2;
  #L11ef50.  v2:= v1;
  #L11ef52.  v3:= v1;
  #L11ef54.  if v2 >= v5 then goto L11efa0;
  #L11ef58.  v1:= v9.`b.p.f` @type ^`byte`[][] @kind object;
  #L11ef5c.  v6:= v1[v2] @kind object;
  #L11ef60.  v1:= v9.`b.p.g` @type ^`int`[] @kind object;
  #L11ef64.  v4:= v5 + v2 @kind int;
  #L11ef68.  v1:= v1[v4];
  #L11ef6c.  v4:= v9.`b.p.g` @type ^`int`[] @kind object;
  #L11ef70.  v4:= v4[v2];
  #L11ef74.  v3:= v4 - v3 @kind int;
  #L11ef78.  v3:= v3 + v1 @kind int;
  #L11ef7a.  v8:= v1;
  #L11ef7c.  v1:= v0;
  #L11ef7e.  v0:= v8;
  #L11ef80.  if v0 >= v3 then goto L11ef94;
  #L11ef84.  v1:= v1 * 31;
  #L11ef88.  v7:= v6[v0] @kind byte;
  #L11ef8c.  v1:= v1 + v7 @kind int;
  #L11ef8e.  v0:= v0 + 1;
  #L11ef92.  goto L11ef80;
  #L11ef94.  v0:= v2 + 1;
  #L11ef98.  v2:= v0;
  #L11ef9a.  v3:= v4;
  #L11ef9c.  v0:= v1;
  #L11ef9e.  goto L11ef54;
  #L11efa0.  v9.`b.p.d` @type ^`int` := v0;
  #L11efa4.  goto L11ef46;
}
procedure `java.lang.String` `toString`(`b.p` v1 @kind this) @signature `Lb/p;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11efb8.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11efbe.  v0:= temp @kind object;
  #L11efc0.  call temp:= `toString`(v0) @signature `Lb/f;.toString:()Ljava/lang/String;` @kind virtual;
  #L11efc6.  v0:= temp @kind object;
  #L11efc8.  return v0 @kind object;
}
