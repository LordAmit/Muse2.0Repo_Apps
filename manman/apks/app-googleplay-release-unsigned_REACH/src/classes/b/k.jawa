record `b.k` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.logging.Logger` `@@b.k.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L11d668.  v0:= constclass @type ^`b.k` @kind object;
  #L11d66c.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L11d672.  v0:= temp @kind object;
  #L11d674.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L11d67a.  v0:= temp @kind object;
  #L11d67c.  `@@b.k.a` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L11d680.  return @kind void;
}
procedure `void` `<init>`(`b.k` v0 @kind this) @signature `Lb/k;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L11d694.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11d69a.  return @kind void;
}
procedure `b.d` `a`(`b.q` v1 @kind object) @signature `Lb/k;.a:(Lb/q;)Lb/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L11d6ac.  v0:= new `b.l`;
  #L11d6b0.  call `<init>`(v0, v1) @signature `Lb/l;.<init>:(Lb/q;)V` @kind direct;
  #L11d6b6.  return v0 @kind object;
}
procedure `b.e` `a`(`b.r` v1 @kind object) @signature `Lb/k;.a:(Lb/r;)Lb/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L11d6c8.  v0:= new `b.m`;
  #L11d6cc.  call `<init>`(v0, v1) @signature `Lb/m;.<init>:(Lb/r;)V` @kind direct;
  #L11d6d2.  return v0 @kind object;
}
procedure `b.q` `a`(`java.io.OutputStream` v2 @kind object, `b.s` v3 @kind object) @signature `Lb/k;.a:(Ljava/io/OutputStream;Lb/s;)Lb/q;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L11d6e4.  if v2 != 0 then goto L11d6f8;
  #L11d6e8.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d6ec.  v1:= "out == null" @kind object;
  #L11d6f0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d6f6.  throw v0;
  #L11d6f8.  if v3 != 0 then goto L11d70c;
  #L11d6fc.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d700.  v1:= "timeout == null" @kind object;
  #L11d704.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d70a.  throw v0;
  #L11d70c.  v0:= new `b.k$1`;
  #L11d710.  call `<init>`(v0, v3, v2) @signature `Lb/k$1;.<init>:(Lb/s;Ljava/io/OutputStream;)V` @kind direct;
  #L11d716.  return v0 @kind object;
}
procedure `b.q` `a`(`java.net.Socket` v2 @kind object) @signature `Lb/k;.a:(Ljava/net/Socket;)Lb/q;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11d728.  if v2 != 0 then goto L11d73c;
  #L11d72c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d730.  v1:= "socket == null" @kind object;
  #L11d734.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d73a.  throw v0;
  #L11d73c.  call temp:= `c`(v2) @signature `Lb/k;.c:(Ljava/net/Socket;)Lb/a;` @kind static;
  #L11d742.  v0:= temp @kind object;
  #L11d744.  call temp:= `getOutputStream`(v2) @signature `Ljava/net/Socket;.getOutputStream:()Ljava/io/OutputStream;` @kind virtual;
  #L11d74a.  v1:= temp @kind object;
  #L11d74c.  call temp:= `a`(v1, v0) @signature `Lb/k;.a:(Ljava/io/OutputStream;Lb/s;)Lb/q;` @kind static;
  #L11d752.  v1:= temp @kind object;
  #L11d754.  call temp:= `a`(v0, v1) @signature `Lb/a;.a:(Lb/q;)Lb/q;` @kind virtual;
  #L11d75a.  v0:= temp @kind object;
  #L11d75c.  return v0 @kind object;
}
procedure `b.r` `a`(`java.io.InputStream` v2 @kind object, `b.s` v3 @kind object) @signature `Lb/k;.a:(Ljava/io/InputStream;Lb/s;)Lb/r;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L11d770.  if v2 != 0 then goto L11d784;
  #L11d774.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d778.  v1:= "in == null" @kind object;
  #L11d77c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d782.  throw v0;
  #L11d784.  if v3 != 0 then goto L11d798;
  #L11d788.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d78c.  v1:= "timeout == null" @kind object;
  #L11d790.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d796.  throw v0;
  #L11d798.  v0:= new `b.k$2`;
  #L11d79c.  call `<init>`(v0, v3, v2) @signature `Lb/k$2;.<init>:(Lb/s;Ljava/io/InputStream;)V` @kind direct;
  #L11d7a2.  return v0 @kind object;
}
procedure `boolean` `a`(`java.lang.AssertionError` v2 @kind object) @signature `Lb/k;.a:(Ljava/lang/AssertionError;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L11d7b4.  call temp:= `getCause`(v2) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L11d7ba.  v0:= temp @kind object;
  #L11d7bc.  if v0 == 0 then goto L11d7e8;
  #L11d7c0.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L11d7c6.  v0:= temp @kind object;
  #L11d7c8.  if v0 == 0 then goto L11d7e8;
  #L11d7cc.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L11d7d2.  v0:= temp @kind object;
  #L11d7d4.  v1:= "getsockname failed" @kind object;
  #L11d7d8.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L11d7de.  v0:= temp;
  #L11d7e0.  if v0 == 0 then goto L11d7e8;
  #L11d7e4.  v0:= 1I;
  #L11d7e6.  return v0;
  #L11d7e8.  v0:= 0I;
  #L11d7ea.  goto L11d7e6;
}
procedure `b.r` `b`(`java.net.Socket` v2 @kind object) @signature `Lb/k;.b:(Ljava/net/Socket;)Lb/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11d7fc.  if v2 != 0 then goto L11d810;
  #L11d800.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d804.  v1:= "socket == null" @kind object;
  #L11d808.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d80e.  throw v0;
  #L11d810.  call temp:= `c`(v2) @signature `Lb/k;.c:(Ljava/net/Socket;)Lb/a;` @kind static;
  #L11d816.  v0:= temp @kind object;
  #L11d818.  call temp:= `getInputStream`(v2) @signature `Ljava/net/Socket;.getInputStream:()Ljava/io/InputStream;` @kind virtual;
  #L11d81e.  v1:= temp @kind object;
  #L11d820.  call temp:= `a`(v1, v0) @signature `Lb/k;.a:(Ljava/io/InputStream;Lb/s;)Lb/r;` @kind static;
  #L11d826.  v1:= temp @kind object;
  #L11d828.  call temp:= `a`(v0, v1) @signature `Lb/a;.a:(Lb/r;)Lb/r;` @kind virtual;
  #L11d82e.  v0:= temp @kind object;
  #L11d830.  return v0 @kind object;
}
procedure `b.a` `c`(`java.net.Socket` v1 @kind object) @signature `Lb/k;.c:(Ljava/net/Socket;)Lb/a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L11d844.  v0:= new `b.k$3`;
  #L11d848.  call `<init>`(v0, v1) @signature `Lb/k$3;.<init>:(Ljava/net/Socket;)V` @kind direct;
  #L11d84e.  return v0 @kind object;
}
