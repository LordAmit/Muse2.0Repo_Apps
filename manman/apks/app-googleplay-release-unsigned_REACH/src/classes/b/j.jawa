record `b.j` @kind class @AccessFlag PUBLIC_FINAL extends `b.r` @kind interface {
  `b.e` `b.j.a` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `b.j.b` @AccessFlag PRIVATE_FINAL;
  `int` `b.j.c` @AccessFlag PRIVATE;
  `boolean` `b.j.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`b.j` v2 @kind this, `b.e` v3 @kind object, `java.util.zip.Inflater` v4 @kind object) @signature `Lb/j;.<init>:(Lb/e;Ljava/util/zip/Inflater;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L11cfe4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11cfea.  if v3 != 0 then goto L11cffe;
  #L11cfee.  v0:= new `java.lang.IllegalArgumentException`;
  #L11cff2.  v1:= "source == null" @kind object;
  #L11cff6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cffc.  throw v0;
  #L11cffe.  if v4 != 0 then goto L11d012;
  #L11d002.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d006.  v1:= "inflater == null" @kind object;
  #L11d00a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d010.  throw v0;
  #L11d012.  v2.`b.j.a` @type ^`b.e` := v3 @kind object;
  #L11d016.  v2.`b.j.b` @type ^`java.util.zip.Inflater` := v4 @kind object;
  #L11d01a.  return @kind void;
}
procedure `void` `c`(`b.j` v4 @kind this) @signature `Lb/j;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11d02c.  v0:= v4.`b.j.c` @type ^`int`;
  #L11d030.  if v0 != 0 then goto L11d036;
  #L11d034.  return @kind void;
  #L11d036.  v0:= v4.`b.j.c` @type ^`int`;
  #L11d03a.  v1:= v4.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11d03e.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L11d044.  v1:= temp;
  #L11d046.  v0:= v0 - v1 @kind int;
  #L11d048.  v1:= v4.`b.j.c` @type ^`int`;
  #L11d04c.  v1:= v1 - v0 @kind int;
  #L11d04e.  v4.`b.j.c` @type ^`int` := v1;
  #L11d052.  v1:= v4.`b.j.a` @type ^`b.e` @kind object;
  #L11d056.  v2:= (`long`) v0 @kind i2l;
  #L11d058.  call `g`(v1, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L11d05e.  goto L11d034;
}
procedure `long` `a`(`b.j` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `Lb/j;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11d070.  v0:= 0L;
  #L11d074.  v2:= lcmp(v8, v0);
  #L11d078.  if v2 >= 0 then goto L11d0ae;
  #L11d07c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d080.  v1:= new `java.lang.StringBuilder`;
  #L11d084.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11d08a.  v2:= "byteCount < 0: " @kind object;
  #L11d08e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d094.  v1:= temp @kind object;
  #L11d096.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d09c.  v1:= temp @kind object;
  #L11d09e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11d0a4.  v1:= temp @kind object;
  #L11d0a6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d0ac.  throw v0;
  #L11d0ae.  v2:= v6.`b.j.d` @type ^`boolean` @kind boolean;
  #L11d0b2.  if v2 == 0 then goto L11d0c6;
  #L11d0b6.  v0:= new `java.lang.IllegalStateException`;
  #L11d0ba.  v1:= "closed" @kind object;
  #L11d0be.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d0c4.  throw v0;
  #L11d0c6.  v2:= lcmp(v8, v0);
  #L11d0ca.  if v2 != 0 then goto L11d0d0;
  #L11d0ce.  return v0 @kind wide;
  #L11d0d0.  call temp:= `b`(v6) @signature `Lb/j;.b:()Z` @kind virtual;
  #L11d0d6.  v0:= temp;
  #L11d0d8.  v1:= 1I;
  #Try_start0.  
  #L11d0da.  call temp:= `e`(v7, v1) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11d0e0.  v1:= temp @kind object;
  #L11d0e2.  v2:= v6.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11d0e6.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11d0ea.  v4:= v1.`b.n.c` @type ^`int`;
  #L11d0ee.  v5:= v1.`b.n.c` @type ^`int`;
  #L11d0f2.  v5:= v5 - 8192;
  #L11d0f6.  call temp:= `inflate`(v2, v3, v4, v5) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #L11d0fc.  v2:= temp;
  #L11d0fe.  if v2 <= 0 then goto L11d11c;
  #L11d102.  v0:= v1.`b.n.c` @type ^`int`;
  #L11d106.  v0:= v0 + v2 @kind int;
  #L11d108.  v1.`b.n.c` @type ^`int` := v0;
  #L11d10c.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11d110.  v4:= (`long`) v2 @kind i2l;
  #L11d112.  v0:= v0 + v4 @kind long;
  #L11d114.  v7.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11d118.  v0:= (`long`) v2 @kind i2l;
  #L11d11a.  goto L11d0ce;
  #L11d11c.  v2:= v6.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11d120.  call temp:= `finished`(v2) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L11d126.  v2:= temp;
  #L11d128.  if v2 != 0 then goto L11d13c;
  #L11d12c.  v2:= v6.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11d130.  call temp:= `needsDictionary`(v2) @signature `Ljava/util/zip/Inflater;.needsDictionary:()Z` @kind virtual;
  #L11d136.  v2:= temp;
  #L11d138.  if v2 == 0 then goto L11d166;
  #L11d13c.  call `c`(v6) @signature `Lb/j;.c:()V` @kind direct;
  #L11d142.  v0:= v1.`b.n.b` @type ^`int`;
  #L11d146.  v2:= v1.`b.n.c` @type ^`int`;
  #L11d14a.  if v0 != v2 then goto L11d160;
  #L11d14e.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11d154.  v0:= temp @kind object;
  #L11d156.  v7.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L11d15a.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11d160.  v0:= -1L;
  #L11d164.  goto L11d0ce;
  #L11d166.  if v0 == 0 then goto L11d0d0;
  #L11d16a.  v0:= new `java.io.EOFException`;
  #L11d16e.  v1:= "source exhausted prematurely" @kind object;
  #L11d172.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d178.  throw v0;
  #Try_end0.  
  #L11d17a.  v0:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L11d17c.  v1:= new `java.io.IOException`;
  #L11d180.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L11d186.  throw v1;
  catch `java.util.zip.DataFormatException` @[Try_start0..Try_end0] goto L11d17a;
}
procedure `b.s` `a`(`b.j` v1 @kind this) @signature `Lb/j;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d1a8.  v0:= v1.`b.j.a` @type ^`b.e` @kind object;
  #L11d1ac.  call temp:= `a`(v0) @signature `Lb/e;.a:()Lb/s;` @kind interface;
  #L11d1b2.  v0:= temp @kind object;
  #L11d1b4.  return v0 @kind object;
}
procedure `boolean` `b`(`b.j` v5 @kind this) @signature `Lb/j;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11d1c8.  v0:= 0I;
  #L11d1ca.  v1:= v5.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11d1ce.  call temp:= `needsInput`(v1) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L11d1d4.  v1:= temp;
  #L11d1d6.  if v1 != 0 then goto L11d1dc;
  #L11d1da.  return v0;
  #L11d1dc.  call `c`(v5) @signature `Lb/j;.c:()V` @kind direct;
  #L11d1e2.  v1:= v5.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11d1e6.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L11d1ec.  v1:= temp;
  #L11d1ee.  if v1 == 0 then goto L11d202;
  #L11d1f2.  v0:= new `java.lang.IllegalStateException`;
  #L11d1f6.  v1:= "?" @kind object;
  #L11d1fa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d200.  throw v0;
  #L11d202.  v1:= v5.`b.j.a` @type ^`b.e` @kind object;
  #L11d206.  call temp:= `e`(v1) @signature `Lb/e;.e:()Z` @kind interface;
  #L11d20c.  v1:= temp;
  #L11d20e.  if v1 == 0 then goto L11d216;
  #L11d212.  v0:= 1I;
  #L11d214.  goto L11d1da;
  #L11d216.  v1:= v5.`b.j.a` @type ^`b.e` @kind object;
  #L11d21a.  call temp:= `c`(v1) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11d220.  v1:= temp @kind object;
  #L11d222.  v1:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L11d226.  v2:= v1.`b.n.c` @type ^`int`;
  #L11d22a.  v3:= v1.`b.n.b` @type ^`int`;
  #L11d22e.  v2:= v2 - v3 @kind int;
  #L11d230.  v5.`b.j.c` @type ^`int` := v2;
  #L11d234.  v2:= v5.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11d238.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11d23c.  v1:= v1.`b.n.b` @type ^`int`;
  #L11d240.  v4:= v5.`b.j.c` @type ^`int`;
  #L11d244.  call `setInput`(v2, v3, v1, v4) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L11d24a.  goto L11d1da;
}
procedure `void` `close`(`b.j` v1 @kind this) @signature `Lb/j;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d25c.  v0:= v1.`b.j.d` @type ^`boolean` @kind boolean;
  #L11d260.  if v0 == 0 then goto L11d266;
  #L11d264.  return @kind void;
  #L11d266.  v0:= v1.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11d26a.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L11d270.  v0:= 1I;
  #L11d272.  v1.`b.j.d` @type ^`boolean` := v0 @kind boolean;
  #L11d276.  v0:= v1.`b.j.a` @type ^`b.e` @kind object;
  #L11d27a.  call `close`(v0) @signature `Lb/e;.close:()V` @kind interface;
  #L11d280.  goto L11d264;
}
