record `b.a$1` @kind class @AccessFlag  extends `b.q` @kind interface {
  `b.q` `b.a$1.a` @AccessFlag FINAL_SYNTHETIC;
  `b.a` `b.a$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.a$1` v0 @kind this, `b.a` v1 @kind object, `b.q` v2 @kind object) @signature `Lb/a$1;.<init>:(Lb/a;Lb/q;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L119b6c.  v0.`b.a$1.b` @type ^`b.a` := v1 @kind object;
  #L119b70.  v0.`b.a$1.a` @type ^`b.q` := v2 @kind object;
  #L119b74.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L119b7a.  return @kind void;
}
procedure `b.s` `a`(`b.a$1` v1 @kind this) @signature `Lb/a$1;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L119b8c.  v0:= v1.`b.a$1.b` @type ^`b.a` @kind object;
  #L119b90.  return v0 @kind object;
}
procedure `void` `a_`(`b.a$1` v10 @kind this, `b.c` v11 @kind object, `long` v12 ) @signature `Lb/a$1;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L119ba4.  v2:= 0L;
  #L119ba8.  v0:= v11.`b.c.b` @type ^`long` @kind wide;
  #L119bac.  v4:= v12 @kind wide;
  #L119bae.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L119bb4.  v4:= v12 @kind wide;
  #L119bb6.  v0:= lcmp(v4, v2);
  #L119bba.  if v0 <= 0 then goto L119c42;
  #L119bbe.  v0:= v11.`b.c.a` @type ^`b.n` @kind object;
  #L119bc2.  v6:= v0 @kind object;
  #L119bc4.  v0:= v2 @kind wide;
  #L119bc6.  v8:= 65536L;
  #L119bcc.  v7:= lcmp(v0, v8);
  #L119bd0.  if v7 >= 0 then goto L119bf4;
  #L119bd4.  v7:= v11.`b.c.a` @type ^`b.n` @kind object;
  #L119bd8.  v7:= v7.`b.n.c` @type ^`int`;
  #L119bdc.  v8:= v11.`b.c.a` @type ^`b.n` @kind object;
  #L119be0.  v8:= v8.`b.n.b` @type ^`int`;
  #L119be4.  v7:= v7 - v8 @kind int;
  #L119be6.  v8:= (`long`) v7 @kind i2l;
  #L119be8.  v8:= v8 + v0 @kind long;
  #L119bea.  v0:= lcmp(v8, v4);
  #L119bee.  if v0 < 0 then goto L119c1a;
  #L119bf2.  v0:= v4 @kind wide;
  #L119bf4.  v6:= 0I;
  #L119bf6.  v7:= v10.`b.a$1.b` @type ^`b.a` @kind object;
  #L119bfa.  call `c`(v7) @signature `Lb/a;.c:()V` @kind virtual;
  #Try_start0.  
  #L119c00.  v7:= v10.`b.a$1.a` @type ^`b.q` @kind object;
  #L119c04.  call `a_`(v7, v11, v0) @signature `Lb/q;.a_:(Lb/c;J)V` @kind interface;
  #Try_end0.  
  #L119c0a.  v4:= v4 - v0 @kind long;
  #L119c0c.  v0:= 1I;
  #L119c0e.  v1:= v10.`b.a$1.b` @type ^`b.a` @kind object;
  #L119c12.  call `a`(v1, v0) @signature `Lb/a;.a:(Z)V` @kind virtual;
  #L119c18.  goto L119bb6;
  #L119c1a.  v0:= v6.`b.n.f` @type ^`b.n` @kind object;
  #L119c1e.  v6:= v0 @kind object;
  #L119c20.  v0:= v8 @kind wide;
  #L119c22.  goto L119bc6;
  #L119c24.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #Try_start1.  
  #L119c26.  v1:= v10.`b.a$1.b` @type ^`b.a` @kind object;
  #L119c2a.  call temp:= `b`(v1, v0) @signature `Lb/a;.b:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L119c30.  v0:= temp @kind object;
  #L119c32.  throw v0;
  #Try_end1.  
  #L119c34.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L119c36.  v1:= v10.`b.a$1.b` @type ^`b.a` @kind object;
  #L119c3a.  call `a`(v1, v6) @signature `Lb/a;.a:(Z)V` @kind virtual;
  #L119c40.  throw v0;
  #L119c42.  return @kind void;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L119c24;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L119c34;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L119c34;
}
procedure `void` `close`(`b.a$1` v3 @kind this) @signature `Lb/a$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L119c6c.  v1:= 0I;
  #L119c6e.  v0:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L119c72.  call `c`(v0) @signature `Lb/a;.c:()V` @kind virtual;
  #Try_start0.  
  #L119c78.  v0:= v3.`b.a$1.a` @type ^`b.q` @kind object;
  #L119c7c.  call `close`(v0) @signature `Lb/q;.close:()V` @kind interface;
  #Try_end0.  
  #L119c82.  v0:= 1I;
  #L119c84.  v1:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L119c88.  call `a`(v1, v0) @signature `Lb/a;.a:(Z)V` @kind virtual;
  #L119c8e.  return @kind void;
  #L119c90.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #Try_start1.  
  #L119c92.  v2:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L119c96.  call temp:= `b`(v2, v0) @signature `Lb/a;.b:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L119c9c.  v0:= temp @kind object;
  #L119c9e.  throw v0;
  #Try_end1.  
  #L119ca0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L119ca2.  v2:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L119ca6.  call `a`(v2, v1) @signature `Lb/a;.a:(Z)V` @kind virtual;
  #L119cac.  throw v0;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L119c90;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L119ca0;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L119ca0;
}
procedure `void` `flush`(`b.a$1` v3 @kind this) @signature `Lb/a$1;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L119cd8.  v1:= 0I;
  #L119cda.  v0:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L119cde.  call `c`(v0) @signature `Lb/a;.c:()V` @kind virtual;
  #Try_start0.  
  #L119ce4.  v0:= v3.`b.a$1.a` @type ^`b.q` @kind object;
  #L119ce8.  call `flush`(v0) @signature `Lb/q;.flush:()V` @kind interface;
  #Try_end0.  
  #L119cee.  v0:= 1I;
  #L119cf0.  v1:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L119cf4.  call `a`(v1, v0) @signature `Lb/a;.a:(Z)V` @kind virtual;
  #L119cfa.  return @kind void;
  #L119cfc.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #Try_start1.  
  #L119cfe.  v2:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L119d02.  call temp:= `b`(v2, v0) @signature `Lb/a;.b:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L119d08.  v0:= temp @kind object;
  #L119d0a.  throw v0;
  #Try_end1.  
  #L119d0c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L119d0e.  v2:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L119d12.  call `a`(v2, v1) @signature `Lb/a;.a:(Z)V` @kind virtual;
  #L119d18.  throw v0;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L119cfc;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L119d0c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L119d0c;
}
procedure `java.lang.String` `toString`(`b.a$1` v2 @kind this) @signature `Lb/a$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L119d44.  v0:= new `java.lang.StringBuilder`;
  #L119d48.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L119d4e.  v1:= "AsyncTimeout.sink(" @kind object;
  #L119d52.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119d58.  v0:= temp @kind object;
  #L119d5a.  v1:= v2.`b.a$1.a` @type ^`b.q` @kind object;
  #L119d5e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119d64.  v0:= temp @kind object;
  #L119d66.  v1:= ")" @kind object;
  #L119d6a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119d70.  v0:= temp @kind object;
  #L119d72.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L119d78.  v0:= temp @kind object;
  #L119d7a.  return v0 @kind object;
}
