record `b.k$2` @kind class @AccessFlag FINAL extends `b.r` @kind interface {
  `b.s` `b.k$2.a` @AccessFlag FINAL_SYNTHETIC;
  `java.io.InputStream` `b.k$2.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.k$2` v0 @kind this, `b.s` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Lb/k$2;.<init>:(Lb/s;Ljava/io/InputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11d3e8.  v0.`b.k$2.a` @type ^`b.s` := v1 @kind object;
  #L11d3ec.  v0.`b.k$2.b` @type ^`java.io.InputStream` := v2 @kind object;
  #L11d3f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11d3f6.  return @kind void;
}
procedure `long` `a`(`b.k$2` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `Lb/k$2;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11d408.  v0:= 0L;
  #L11d40c.  v2:= lcmp(v8, v0);
  #L11d410.  if v2 >= 0 then goto L11d446;
  #L11d414.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d418.  v1:= new `java.lang.StringBuilder`;
  #L11d41c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11d422.  v2:= "byteCount < 0: " @kind object;
  #L11d426.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d42c.  v1:= temp @kind object;
  #L11d42e.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d434.  v1:= temp @kind object;
  #L11d436.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11d43c.  v1:= temp @kind object;
  #L11d43e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d444.  throw v0;
  #L11d446.  v2:= lcmp(v8, v0);
  #L11d44a.  if v2 != 0 then goto L11d450;
  #L11d44e.  return v0 @kind wide;
  #Try_start0.  
  #L11d450.  v0:= v6.`b.k$2.a` @type ^`b.s` @kind object;
  #L11d454.  call `g`(v0) @signature `Lb/s;.g:()V` @kind virtual;
  #L11d45a.  v0:= 1I;
  #L11d45c.  call temp:= `e`(v7, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11d462.  v0:= temp @kind object;
  #L11d464.  v1:= v0.`b.n.c` @type ^`int`;
  #L11d468.  v1:= v1 - 8192;
  #L11d46c.  v2:= (`long`) v1 @kind i2l;
  #L11d46e.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11d474.  v2:= temp @kind wide;
  #L11d476.  v1:= (`int`) v2 @kind l2i;
  #L11d478.  v2:= v6.`b.k$2.b` @type ^`java.io.InputStream` @kind object;
  #L11d47c.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11d480.  v4:= v0.`b.n.c` @type ^`int`;
  #L11d484.  call temp:= `read`(v2, v3, v4, v1) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L11d48a.  v1:= temp;
  #L11d48c.  v2:= -1I;
  #L11d48e.  if v1 != v2 then goto L11d498;
  #L11d492.  v0:= -1L;
  #L11d496.  goto L11d44e;
  #L11d498.  v2:= v0.`b.n.c` @type ^`int`;
  #L11d49c.  v2:= v2 + v1 @kind int;
  #L11d49e.  v0.`b.n.c` @type ^`int` := v2;
  #L11d4a2.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11d4a6.  v4:= (`long`) v1 @kind i2l;
  #L11d4a8.  v2:= v2 + v4 @kind long;
  #L11d4aa.  v7.`b.c.b` @type ^`long` := v2 @kind wide;
  #Try_end0.  
  #L11d4ae.  v0:= (`long`) v1 @kind i2l;
  #L11d4b0.  goto L11d44e;
  #L11d4b2.  v0:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L11d4b4.  call temp:= `a`(v0) @signature `Lb/k;.a:(Ljava/lang/AssertionError;)Z` @kind static;
  #L11d4ba.  v1:= temp;
  #L11d4bc.  if v1 == 0 then goto L11d4cc;
  #L11d4c0.  v1:= new `java.io.IOException`;
  #L11d4c4.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L11d4ca.  throw v1;
  #L11d4cc.  throw v0;
  catch `java.lang.AssertionError` @[Try_start0..Try_end0] goto L11d4b2;
}
procedure `b.s` `a`(`b.k$2` v1 @kind this) @signature `Lb/k$2;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d4f0.  v0:= v1.`b.k$2.a` @type ^`b.s` @kind object;
  #L11d4f4.  return v0 @kind object;
}
procedure `void` `close`(`b.k$2` v1 @kind this) @signature `Lb/k$2;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d508.  v0:= v1.`b.k$2.b` @type ^`java.io.InputStream` @kind object;
  #L11d50c.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L11d512.  return @kind void;
}
procedure `java.lang.String` `toString`(`b.k$2` v2 @kind this) @signature `Lb/k$2;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d524.  v0:= new `java.lang.StringBuilder`;
  #L11d528.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11d52e.  v1:= "source(" @kind object;
  #L11d532.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d538.  v0:= temp @kind object;
  #L11d53a.  v1:= v2.`b.k$2.b` @type ^`java.io.InputStream` @kind object;
  #L11d53e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d544.  v0:= temp @kind object;
  #L11d546.  v1:= ")" @kind object;
  #L11d54a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d550.  v0:= temp @kind object;
  #L11d552.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11d558.  v0:= temp @kind object;
  #L11d55a.  return v0 @kind object;
}
