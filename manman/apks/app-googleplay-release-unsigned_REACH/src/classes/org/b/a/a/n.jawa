record `org.b.a.a.n` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b` @kind class {
  `org.b.a.a.d.b` `org.b.a.a.n.a` @AccessFlag PRIVATE;
  `org.b.a.a.b$a` `org.b.a.a.n.b` @AccessFlag PRIVATE;
  `int` `org.b.a.a.n.c` @AccessFlag PRIVATE;
}
global `org.b.a.a.d.m` `@@org.b.a.a.n.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/b/a/a/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L190060.  v0:= new `org.b.a.a.d.n`;
  #L190064.  call `<init>`(v0) @signature `Lorg/b/a/a/d/n;.<init>:()V` @kind direct;
  #L19006a.  `@@org.b.a.a.n.d` @type ^`org.b.a.a.d.m` := v0 @kind object;
  #L19006e.  return @kind void;
}
procedure `void` `<init>`(`org.b.a.a.n` v2 @kind this) @signature `Lorg/b/a/a/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L190080.  call `<init>`(v2) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L190086.  v0:= 0I;
  #L190088.  v2.`org.b.a.a.n.c` @type ^`int` := v0;
  #L19008c.  v0:= new `org.b.a.a.d.b`;
  #L190090.  v1:= `@@org.b.a.a.n.d` @type ^`org.b.a.a.d.m` @kind object;
  #L190094.  call `<init>`(v0, v1) @signature `Lorg/b/a/a/d/b;.<init>:(Lorg/b/a/a/d/m;)V` @kind direct;
  #L19009a.  v2.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` := v0 @kind object;
  #L19009e.  call `d`(v2) @signature `Lorg/b/a/a/n;.d:()V` @kind virtual;
  #L1900a4.  return @kind void;
}
procedure `java.lang.String` `a`(`org.b.a.a.n` v1 @kind this) @signature `Lorg/b/a/a/n;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1900b8.  v0:= `@@org.b.a.b.u` @type ^`java.lang.String` @kind object;
  #L1900bc.  return v0 @kind object;
}
procedure `org.b.a.a.b$a` `a`(`org.b.a.a.n` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lorg/b/a/a/n;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1900d0.  v3:= 2I;
  #L1900d2.  v0:= v6 + v7 @kind int;
  #L1900d6.  if v6 >= v0 then goto L1900f8;
  #L1900da.  v1:= v4.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` @kind object;
  #L1900de.  v2:= v5[v6] @kind byte;
  #L1900e2.  call temp:= `a`(v1, v2) @signature `Lorg/b/a/a/d/b;.a:(B)I` @kind virtual;
  #L1900e8.  v1:= temp;
  #L1900ea.  v2:= 1I;
  #L1900ec.  if v1 != v2 then goto L190128;
  #L1900f0.  v0:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L1900f4.  v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1900f8.  v0:= v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1900fc.  v1:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L190100.  if v0 != v1 then goto L190122;
  #L190104.  call temp:= `b`(v4) @signature `Lorg/b/a/a/n;.b:()F` @kind virtual;
  #L19010a.  v0:= temp;
  #L19010c.  v1:= 1064514355I;
  #L190112.  v0:= fcmpl(v0, v1);
  #L190116.  if v0 <= 0 then goto L190122;
  #L19011a.  v0:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L19011e.  v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L190122.  v0:= v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` @kind object;
  #L190126.  return v0 @kind object;
  #L190128.  if v1 != v3 then goto L190136;
  #L19012c.  v0:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L190130.  v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L190134.  goto L1900f8;
  #L190136.  if v1 != 0 then goto L190156;
  #L19013a.  v1:= v4.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` @kind object;
  #L19013e.  call temp:= `a`(v1) @signature `Lorg/b/a/a/d/b;.a:()I` @kind virtual;
  #L190144.  v1:= temp;
  #L190146.  if v1 < v3 then goto L190156;
  #L19014a.  v1:= v4.`org.b.a.a.n.c` @type ^`int`;
  #L19014e.  v1:= v1 + 1;
  #L190152.  v4.`org.b.a.a.n.c` @type ^`int` := v1;
  #L190156.  v6:= v6 + 1;
  #L19015a.  goto L1900d6;
}
procedure `float` `b`(`org.b.a.a.n` v3 @kind this) @signature `Lorg/b/a/a/n;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19016c.  v1:= 1065185444I;
  #L190172.  v0:= v3.`org.b.a.a.n.c` @type ^`int`;
  #L190176.  v2:= 6I;
  #L190178.  if v0 >= v2 then goto L19019a;
  #L19017c.  v0:= 0I;
  #L19017e.  v2:= v3.`org.b.a.a.n.c` @type ^`int`;
  #L190182.  if v0 >= v2 then goto L190192;
  #L190186.  v2:= 0.5F;
  #L19018a.  v1:= v1 * v2 @kind float;
  #L19018c.  v0:= v0 + 1;
  #L190190.  goto L19017e;
  #L190192.  v0:= 1.0F;
  #L190196.  v1:= v0 - v1 @kind float;
  #L19019a.  return v1;
}
procedure `org.b.a.a.b$a` `c`(`org.b.a.a.n` v1 @kind this) @signature `Lorg/b/a/a/n;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1901ac.  v0:= v1.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1901b0.  return v0 @kind object;
}
procedure `void` `d`(`org.b.a.a.n` v1 @kind this) @signature `Lorg/b/a/a/n;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1901c4.  v0:= v1.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` @kind object;
  #L1901c8.  call `b`(v0) @signature `Lorg/b/a/a/d/b;.b:()V` @kind virtual;
  #L1901ce.  v0:= 0I;
  #L1901d0.  v1.`org.b.a.a.n.c` @type ^`int` := v0;
  #L1901d4.  v0:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1901d8.  v1.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1901dc.  return @kind void;
}
