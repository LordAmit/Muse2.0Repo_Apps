record `org.b.a.a.b` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`org.b.a.a.b` v0 @kind this) @signature `Lorg/b/a/a/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L16f818.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L16f81e.  return @kind void;
}
procedure `boolean` `a`(`org.b.a.a.b` v1 @kind this, `byte` v2 ) @signature `Lorg/b/a/a/b;.a:(B)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L16f830.  v0:= v2 ^& 128;
  #L16f834.  if v0 != 0 then goto L16f83c;
  #L16f838.  v0:= 1I;
  #L16f83a.  return v0;
  #L16f83c.  v0:= 0I;
  #L16f83e.  goto L16f83a;
}
procedure `boolean` `b`(`org.b.a.a.b` v2 @kind this, `byte` v3 ) @signature `Lorg/b/a/a/b;.b:(B)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L16f850.  v0:= v3 ^& 255;
  #L16f854.  v1:= 65I;
  #L16f858.  if v0 < v1 then goto L16f874;
  #L16f85c.  v1:= 90I;
  #L16f860.  if v0 <= v1 then goto L16f86c;
  #L16f864.  v1:= 97I;
  #L16f868.  if v0 < v1 then goto L16f874;
  #L16f86c.  v1:= 122I;
  #L16f870.  if v0 <= v1 then goto L16f878;
  #L16f874.  v0:= 1I;
  #L16f876.  return v0;
  #L16f878.  v0:= 0I;
  #L16f87a.  goto L16f876;
}
procedure `java.lang.String` `a`() @signature `Lorg/b/a/a/b;.a:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.b.a.a.b$a` `a`(`byte`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lorg/b/a/a/b;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `float` `b`() @signature `Lorg/b/a/a/b;.b:()F` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.nio.ByteBuffer` `b`(`org.b.a.a.b` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/b/a/a/b;.b:([BII)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L16f88c.  v2:= 0I;
  #L16f88e.  call temp:= `allocate`(v10) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L16f894.  v3:= temp @kind object;
  #L16f896.  v4:= v9 + v10 @kind int;
  #L16f89a.  v0:= v9;
  #L16f89c.  v1:= v2;
  #L16f89e.  if v9 >= v4 then goto L16f8f0;
  #L16f8a2.  v5:= v8[v9] @kind byte;
  #L16f8a6.  call temp:= `a`(v7, v5) @signature `Lorg/b/a/a/b;.a:(B)Z` @kind direct;
  #L16f8ac.  v6:= temp;
  #L16f8ae.  if v6 != 0 then goto L16f8ba;
  #L16f8b2.  v1:= 1I;
  #L16f8b4.  v9:= v9 + 1;
  #L16f8b8.  goto L16f89e;
  #L16f8ba.  call temp:= `b`(v7, v5) @signature `Lorg/b/a/a/b;.b:(B)Z` @kind direct;
  #L16f8c0.  v5:= temp;
  #L16f8c2.  if v5 == 0 then goto L16f8b4;
  #L16f8c6.  if v1 == 0 then goto L16f8ea;
  #L16f8ca.  if v9 <= v0 then goto L16f8ea;
  #L16f8ce.  v1:= v9 - v0 @kind int;
  #L16f8d2.  call temp:= `put`(v3, v8, v0, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L16f8d8.  v0:= 32I;
  #L16f8dc.  call temp:= `put`(v3, v0) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L16f8e2.  v0:= v9 + 1;
  #L16f8e6.  v1:= v2;
  #L16f8e8.  goto L16f8b4;
  #L16f8ea.  v0:= v9 + 1;
  #L16f8ee.  goto L16f8b4;
  #L16f8f0.  if v1 == 0 then goto L16f902;
  #L16f8f4.  if v9 <= v0 then goto L16f902;
  #L16f8f8.  v1:= v9 - v0 @kind int;
  #L16f8fc.  call temp:= `put`(v3, v8, v0, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L16f902.  return v3 @kind object;
}
procedure `java.nio.ByteBuffer` `c`(`org.b.a.a.b` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/b/a/a/b;.c:([BII)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L16f914.  v1:= 0I;
  #L16f916.  call temp:= `allocate`(v10) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L16f91c.  v3:= temp @kind object;
  #L16f91e.  v4:= v9 + v10 @kind int;
  #L16f922.  v2:= v9;
  #L16f924.  v0:= v1;
  #L16f926.  if v9 >= v4 then goto L16f988;
  #L16f92a.  v5:= v8[v9] @kind byte;
  #L16f92e.  v6:= 62I;
  #L16f932.  if v5 != v6 then goto L16f976;
  #L16f936.  v0:= v1;
  #L16f938.  call temp:= `a`(v7, v5) @signature `Lorg/b/a/a/b;.a:(B)Z` @kind direct;
  #L16f93e.  v6:= temp;
  #L16f940.  if v6 == 0 then goto L16f970;
  #L16f944.  call temp:= `b`(v7, v5) @signature `Lorg/b/a/a/b;.b:(B)Z` @kind direct;
  #L16f94a.  v5:= temp;
  #L16f94c.  if v5 == 0 then goto L16f970;
  #L16f950.  if v9 <= v2 then goto L16f982;
  #L16f954.  if v0 != 0 then goto L16f982;
  #L16f958.  v5:= v9 - v2 @kind int;
  #L16f95c.  call temp:= `put`(v3, v8, v2, v5) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L16f962.  v2:= 32I;
  #L16f966.  call temp:= `put`(v3, v2) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L16f96c.  v2:= v9 + 1;
  #L16f970.  v9:= v9 + 1;
  #L16f974.  goto L16f926;
  #L16f976.  v6:= 60I;
  #L16f97a.  if v5 != v6 then goto L16f938;
  #L16f97e.  v0:= 1I;
  #L16f980.  goto L16f938;
  #L16f982.  v2:= v9 + 1;
  #L16f986.  goto L16f970;
  #L16f988.  if v0 != 0 then goto L16f99a;
  #L16f98c.  if v9 <= v2 then goto L16f99a;
  #L16f990.  v0:= v9 - v2 @kind int;
  #L16f994.  call temp:= `put`(v3, v8, v2, v0) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L16f99a.  return v3 @kind object;
}
procedure `org.b.a.a.b$a` `c`() @signature `Lorg/b/a/a/b;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `d`() @signature `Lorg/b/a/a/b;.d:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
