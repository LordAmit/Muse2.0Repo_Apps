record `org.b.a.a.i` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b` @kind class {
  `org.b.a.a.b$a` `org.b.a.a.i.a` @AccessFlag PRIVATE;
  `byte` `org.b.a.a.i.b` @AccessFlag PRIVATE;
  `int`[] `org.b.a.a.i.c` @AccessFlag PRIVATE;
}
global `byte`[] `@@org.b.a.a.i.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@org.b.a.a.i.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/b/a/a/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L18f1bc.  v0:= 256I;
  #L18f1c0.  v0:= new `byte`[v0];
  #L18f1c4.  goto L18f1e4;
  #L18f1ca.  `@@org.b.a.a.i.d` @type ^`byte`[] := v0 @kind object;
  #L18f1ce.  v0:= 64I;
  #L18f1d2.  v0:= new `byte`[v0];
  #L18f1d6.  goto L18f2ec;
  #L18f1dc.  `@@org.b.a.a.i.e` @type ^`byte`[] := v0 @kind object;
  #L18f1e0.  return @kind void;
  #L18f1e2.  
  #L18f1e4.  v0:= (1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 1I, 1I, 1I, 1I, 1I, 1I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 1I, 1I, 1I, 1I, 1I, 1I, 0I, 1I, 7I, 1I, 1I, 1I, 1I, 1I, 1I, 5I, 1I, 5I, 0I, 5I, 0I, 0I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 7I, 1I, 7I, 0I, 7I, 5I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 4I, 4I, 4I, 4I, 4I, 4I, 5I, 5I, 4I, 4I, 4I, 4I, 4I, 4I, 4I, 4I, 5I, 5I, 4I, 4I, 4I, 4I, 4I, 1I, 4I, 4I, 4I, 4I, 4I, 5I, 5I, 5I, 6I, 6I, 6I, 6I, 6I, 6I, 7I, 7I, 6I, 6I, 6I, 6I, 6I, 6I, 6I, 6I, 7I, 7I, 6I, 6I, 6I, 6I, 6I, 1I, 6I, 6I, 6I, 6I, 6I, 7I, 7I, 7I) @kind object;
  #L18f2eb.  goto L18f1ca;
  #L18f2ec.  v0:= (0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 0I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 0I, 3I, 3I, 3I, 1I, 1I, 3I, 3I, 0I, 3I, 3I, 3I, 1I, 2I, 1I, 2I, 0I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 0I, 3I, 1I, 3I, 1I, 1I, 1I, 3I, 0I, 3I, 1I, 3I, 1I, 1I, 3I, 3I) @kind object;
  #L18f333.  goto L18f1dc;
}
procedure `void` `<init>`(`org.b.a.a.i` v1 @kind this) @signature `Lorg/b/a/a/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L18f344.  call `<init>`(v1) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L18f34a.  v0:= 4I;
  #L18f34c.  v0:= new `int`[v0];
  #L18f350.  v1.`org.b.a.a.i.c` @type ^`int`[] := v0 @kind object;
  #L18f354.  call `d`(v1) @signature `Lorg/b/a/a/i;.d:()V` @kind virtual;
  #L18f35a.  return @kind void;
}
procedure `java.lang.String` `a`(`org.b.a.a.i` v1 @kind this) @signature `Lorg/b/a/a/i;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18f36c.  v0:= `@@org.b.a.b.r` @type ^`java.lang.String` @kind object;
  #L18f370.  return v0 @kind object;
}
procedure `org.b.a.a.b$a` `a`(`org.b.a.a.i` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/b/a/a/i;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L18f384.  call temp:= `c`(v7, v8, v9, v10) @signature `Lorg/b/a/a/i;.c:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L18f38a.  v0:= temp @kind object;
  #L18f38c.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L18f392.  v1:= temp @kind object;
  #L18f394.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L18f39a.  v2:= temp;
  #L18f39c.  v0:= 0I;
  #L18f39e.  if v0 >= v2 then goto L18f3d0;
  #L18f3a2.  v3:= v1[v0] @kind byte;
  #L18f3a6.  v3:= v3 ^& 255;
  #L18f3aa.  v4:= `@@org.b.a.a.i.d` @type ^`byte`[] @kind object;
  #L18f3ae.  v3:= v4[v3] @kind byte;
  #L18f3b2.  v4:= `@@org.b.a.a.i.e` @type ^`byte`[] @kind object;
  #L18f3b6.  v5:= v7.`org.b.a.a.i.b` @type ^`byte` @kind byte;
  #L18f3ba.  v5:= v5 * 8;
  #L18f3be.  v5:= v5 + v3 @kind int;
  #L18f3c0.  v4:= v4[v5] @kind byte;
  #L18f3c4.  if v4 != 0 then goto L18f3d6;
  #L18f3c8.  v0:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L18f3cc.  v7.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L18f3d0.  v0:= v7.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` @kind object;
  #L18f3d4.  return v0 @kind object;
  #L18f3d6.  v5:= v7.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L18f3da.  v6:= v5[v4];
  #L18f3de.  v6:= v6 + 1;
  #L18f3e2.  v5[v4]:= v6;
  #L18f3e6.  v7.`org.b.a.a.i.b` @type ^`byte` := v3 @kind byte;
  #L18f3ea.  v0:= v0 + 1;
  #L18f3ee.  goto L18f39e;
}
procedure `float` `b`(`org.b.a.a.i` v5 @kind this) @signature `Lorg/b/a/a/i;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L18f400.  v0:= 0I;
  #L18f402.  v2:= 0I;
  #L18f404.  v1:= v5.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` @kind object;
  #L18f408.  v3:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L18f40c.  if v1 != v3 then goto L18f418;
  #L18f410.  v0:= 1008981770I;
  #L18f416.  return v0;
  #L18f418.  v1:= v0;
  #L18f41a.  v3:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L18f41e.  v3:= length @variable v3;
  #L18f420.  if v0 >= v3 then goto L18f434;
  #L18f424.  v3:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L18f428.  v3:= v3[v0];
  #L18f42c.  v1:= v1 + v3 @kind int;
  #L18f42e.  v0:= v0 + 1;
  #L18f432.  goto L18f41a;
  #L18f434.  if v1 > 0 then goto L18f44c;
  #L18f438.  v0:= v2;
  #L18f43a.  v1:= fcmpg(v0, v2);
  #L18f43e.  if v1 >= 0 then goto L18f444;
  #L18f442.  v0:= v2;
  #L18f444.  v1:= 0.5F;
  #L18f448.  v0:= v0 * v1 @kind float;
  #L18f44a.  goto L18f416;
  #L18f44c.  v0:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L18f450.  v3:= 3I;
  #L18f452.  v0:= v0[v3];
  #L18f456.  v0:= (`float`) v0 @kind i2f;
  #L18f458.  v3:= 1.0F;
  #L18f45c.  v0:= v0 * v3 @kind float;
  #L18f45e.  v3:= (`float`) v1 @kind i2f;
  #L18f460.  v0:= v0 / v3 @kind float;
  #L18f462.  v3:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L18f466.  v4:= 1I;
  #L18f468.  v3:= v3[v4];
  #L18f46c.  v3:= (`float`) v3 @kind i2f;
  #L18f46e.  v4:= 20.0F;
  #L18f472.  v3:= v3 * v4 @kind float;
  #L18f474.  v1:= (`float`) v1 @kind i2f;
  #L18f476.  v1:= v3 / v1 @kind float;
  #L18f47a.  v0:= v0 - v1 @kind float;
  #L18f47c.  goto L18f43a;
}
procedure `org.b.a.a.b$a` `c`(`org.b.a.a.i` v1 @kind this) @signature `Lorg/b/a/a/i;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18f490.  v0:= v1.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` @kind object;
  #L18f494.  return v0 @kind object;
}
procedure `void` `d`(`org.b.a.a.i` v3 @kind this) @signature `Lorg/b/a/a/i;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L18f4a8.  v1:= 0I;
  #L18f4aa.  v0:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L18f4ae.  v3.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L18f4b2.  v0:= 1I;
  #L18f4b4.  v3.`org.b.a.a.i.b` @type ^`byte` := v0 @kind byte;
  #L18f4b8.  v0:= v1;
  #L18f4ba.  v2:= v3.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L18f4be.  v2:= length @variable v2;
  #L18f4c0.  if v0 >= v2 then goto L18f4d2;
  #L18f4c4.  v2:= v3.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L18f4c8.  v2[v0]:= v1;
  #L18f4cc.  v0:= v0 + 1;
  #L18f4d0.  goto L18f4ba;
  #L18f4d2.  return @kind void;
}
