record `org.b.a.a.b.h` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b.g` @kind class {
}
procedure `void` `<init>`(`org.b.a.a.b.h` v0 @kind this) @signature `Lorg/b/a/a/b/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L184c50.  call `<init>`(v0) @signature `Lorg/b/a/a/b/g;.<init>:()V` @kind direct;
  #L184c56.  return @kind void;
}
procedure `int` `a`(`org.b.a.a.b.h` v3 @kind this, `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/b/a/a/b/h;.a:([BI)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L184c68.  v0:= v4[v5] @kind byte;
  #L184c6c.  v0:= v0 ^& 255;
  #L184c70.  v1:= 129I;
  #L184c74.  if v0 < v1 then goto L184ca8;
  #L184c78.  v1:= 159I;
  #L184c7c.  if v0 > v1 then goto L184ca8;
  #L184c80.  v0:= v0 + -129;
  #L184c84.  v0:= v0 * 188;
  #L184c88.  v1:= v5 + 1;
  #L184c8c.  v1:= v4[v1] @kind byte;
  #L184c90.  v1:= v1 ^& 255;
  #L184c94.  v2:= v1 + -64;
  #L184c98.  v0:= v0 + v2 @kind int;
  #L184c9a.  v2:= 128I;
  #L184c9e.  if v1 < v2 then goto L184ca6;
  #L184ca2.  v0:= v0 + -1;
  #L184ca6.  return v0;
  #L184ca8.  v1:= 224I;
  #L184cac.  if v0 < v1 then goto L184cc6;
  #L184cb0.  v1:= 239I;
  #L184cb4.  if v0 > v1 then goto L184cc6;
  #L184cb8.  v0:= v0 + -224;
  #L184cbc.  v0:= v0 + 31;
  #L184cc0.  v0:= v0 * 188;
  #L184cc4.  goto L184c88;
  #L184cc6.  v0:= -1I;
  #L184cc8.  goto L184ca6;
}
