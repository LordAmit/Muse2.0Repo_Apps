record `org.b.a.a.b.b` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `int`[] `org.b.a.a.b.b.a` @AccessFlag PROTECTED;
  `float` `org.b.a.a.b.b.b` @AccessFlag PROTECTED;
  `boolean` `org.b.a.a.b.b.c` @AccessFlag PROTECTED;
  `int` `org.b.a.a.b.b.d` @AccessFlag PRIVATE;
  `int` `org.b.a.a.b.b.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.b.a.a.b.b` v0 @kind this) @signature `Lorg/b/a/a/b/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L16fc50.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L16fc56.  call `b`(v0) @signature `Lorg/b/a/a/b/b;.b:()V` @kind virtual;
  #L16fc5c.  return @kind void;
}
procedure `float` `a`(`org.b.a.a.b.b` v4 @kind this) @signature `Lorg/b/a/a/b/b;.a:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16fc70.  v1:= 1065185444I;
  #L16fc76.  v0:= v4.`org.b.a.a.b.b.e` @type ^`int`;
  #L16fc7a.  if v0 <= 0 then goto L16fc88;
  #L16fc7e.  v0:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L16fc82.  v2:= 4I;
  #L16fc84.  if v0 > v2 then goto L16fc90;
  #L16fc88.  v0:= 1008981770I;
  #L16fc8e.  return v0;
  #L16fc90.  v0:= v4.`org.b.a.a.b.b.e` @type ^`int`;
  #L16fc94.  v2:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L16fc98.  if v0 == v2 then goto L16fcbc;
  #L16fc9c.  v0:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L16fca0.  v2:= v4.`org.b.a.a.b.b.e` @type ^`int`;
  #L16fca4.  v3:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L16fca8.  v2:= v2 - v3 @kind int;
  #L16fcaa.  v0:= v0 / v2 @kind int;
  #L16fcac.  v0:= (`float`) v0 @kind i2f;
  #L16fcae.  v2:= v4.`org.b.a.a.b.b.b` @type ^`float`;
  #L16fcb2.  v0:= v0 * v2 @kind float;
  #L16fcb4.  v2:= fcmpg(v0, v1);
  #L16fcb8.  if v2 < 0 then goto L16fc8e;
  #L16fcbc.  v0:= v1;
  #L16fcbe.  goto L16fc8e;
}
procedure `int` `a`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lorg/b/a/a/b/b;.a:([BI)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `a`(`org.b.a.a.b.b` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lorg/b/a/a/b/b;.a:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16fcd0.  v0:= -1I;
  #L16fcd2.  v1:= 2I;
  #L16fcd4.  if v6 != v1 then goto L16fce0;
  #L16fcd8.  call temp:= `a`(v3, v4, v5) @signature `Lorg/b/a/a/b/b;.a:([BI)I` @kind virtual;
  #L16fcde.  v0:= temp;
  #L16fce0.  if v0 < 0 then goto L16fd16;
  #L16fce4.  v1:= v3.`org.b.a.a.b.b.e` @type ^`int`;
  #L16fce8.  v1:= v1 + 1;
  #L16fcec.  v3.`org.b.a.a.b.b.e` @type ^`int` := v1;
  #L16fcf0.  v1:= v3.`org.b.a.a.b.b.a` @type ^`int`[] @kind object;
  #L16fcf4.  v1:= length @variable v1;
  #L16fcf6.  if v0 >= v1 then goto L16fd16;
  #L16fcfa.  v1:= 512I;
  #L16fcfe.  v2:= v3.`org.b.a.a.b.b.a` @type ^`int`[] @kind object;
  #L16fd02.  v0:= v2[v0];
  #L16fd06.  if v1 <= v0 then goto L16fd16;
  #L16fd0a.  v0:= v3.`org.b.a.a.b.b.d` @type ^`int`;
  #L16fd0e.  v0:= v0 + 1;
  #L16fd12.  v3.`org.b.a.a.b.b.d` @type ^`int` := v0;
  #L16fd16.  return @kind void;
}
procedure `void` `b`(`org.b.a.a.b.b` v1 @kind this) @signature `Lorg/b/a/a/b/b;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16fd28.  v0:= 0I;
  #L16fd2a.  v1.`org.b.a.a.b.b.c` @type ^`boolean` := v0 @kind boolean;
  #L16fd2e.  v1.`org.b.a.a.b.b.e` @type ^`int` := v0;
  #L16fd32.  v1.`org.b.a.a.b.b.d` @type ^`int` := v0;
  #L16fd36.  return @kind void;
}
procedure `boolean` `c`(`org.b.a.a.b.b` v2 @kind this) @signature `Lorg/b/a/a/b/b;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16fd48.  v0:= v2.`org.b.a.a.b.b.e` @type ^`int`;
  #L16fd4c.  v1:= 1024I;
  #L16fd50.  if v0 <= v1 then goto L16fd58;
  #L16fd54.  v0:= 1I;
  #L16fd56.  return v0;
  #L16fd58.  v0:= 0I;
  #L16fd5a.  goto L16fd56;
}
