record `org.b.a.a.m` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b` @kind class {
  `org.b.a.a.b$a` `org.b.a.a.m.a` @AccessFlag PRIVATE;
  `org.b.a.a.c.l` `org.b.a.a.m.b` @AccessFlag PRIVATE;
  `boolean` `org.b.a.a.m.c` @AccessFlag PRIVATE;
  `short` `org.b.a.a.m.d` @AccessFlag PRIVATE;
  `int` `org.b.a.a.m.e` @AccessFlag PRIVATE;
  `int`[] `org.b.a.a.m.f` @AccessFlag PRIVATE;
  `int` `org.b.a.a.m.g` @AccessFlag PRIVATE;
  `int` `org.b.a.a.m.h` @AccessFlag PRIVATE;
  `org.b.a.a.b` `org.b.a.a.m.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.b.a.a.m` v1 @kind this, `org.b.a.a.c.l` v2 @kind object) @signature `Lorg/b/a/a/m;.<init>:(Lorg/b/a/a/c/l;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L18fde0.  call `<init>`(v1) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L18fde6.  v1.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` := v2 @kind object;
  #L18fdea.  v0:= 0I;
  #L18fdec.  v1.`org.b.a.a.m.c` @type ^`boolean` := v0 @kind boolean;
  #L18fdf0.  v0:= 0I;
  #L18fdf2.  v1.`org.b.a.a.m.i` @type ^`org.b.a.a.b` := v0 @kind object;
  #L18fdf6.  v0:= 4I;
  #L18fdf8.  v0:= new `int`[v0];
  #L18fdfc.  v1.`org.b.a.a.m.f` @type ^`int`[] := v0 @kind object;
  #L18fe00.  call `d`(v1) @signature `Lorg/b/a/a/m;.d:()V` @kind virtual;
  #L18fe06.  return @kind void;
}
procedure `void` `<init>`(`org.b.a.a.m` v1 @kind this, `org.b.a.a.c.l` v2 @kind object, `boolean` v3 , `org.b.a.a.b` v4 @kind object) @signature `Lorg/b/a/a/m;.<init>:(Lorg/b/a/a/c/l;ZLorg/b/a/a/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L18fe18.  call `<init>`(v1) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L18fe1e.  v1.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` := v2 @kind object;
  #L18fe22.  v1.`org.b.a.a.m.c` @type ^`boolean` := v3 @kind boolean;
  #L18fe26.  v1.`org.b.a.a.m.i` @type ^`org.b.a.a.b` := v4 @kind object;
  #L18fe2a.  v0:= 4I;
  #L18fe2c.  v0:= new `int`[v0];
  #L18fe30.  v1.`org.b.a.a.m.f` @type ^`int`[] := v0 @kind object;
  #L18fe34.  call `d`(v1) @signature `Lorg/b/a/a/m;.d:()V` @kind virtual;
  #L18fe3a.  return @kind void;
}
procedure `java.lang.String` `a`(`org.b.a.a.m` v1 @kind this) @signature `Lorg/b/a/a/m;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18fe4c.  v0:= v1.`org.b.a.a.m.i` @type ^`org.b.a.a.b` @kind object;
  #L18fe50.  if v0 != 0 then goto L18fe62;
  #L18fe54.  v0:= v1.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` @kind object;
  #L18fe58.  call temp:= `b`(v0) @signature `Lorg/b/a/a/c/l;.b:()Ljava/lang/String;` @kind virtual;
  #L18fe5e.  v0:= temp @kind object;
  #L18fe60.  return v0 @kind object;
  #L18fe62.  v0:= v1.`org.b.a.a.m.i` @type ^`org.b.a.a.b` @kind object;
  #L18fe66.  call temp:= `a`(v0) @signature `Lorg/b/a/a/b;.a:()Ljava/lang/String;` @kind virtual;
  #L18fe6c.  v0:= temp @kind object;
  #L18fe6e.  goto L18fe60;
}
procedure `org.b.a.a.b$a` `a`(`org.b.a.a.m` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/b/a/a/m;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L18fe80.  v6:= 64I;
  #L18fe84.  v0:= v9 + v10 @kind int;
  #L18fe88.  if v9 >= v0 then goto L18ff34;
  #L18fe8c.  v1:= v7.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` @kind object;
  #L18fe90.  v2:= v8[v9] @kind byte;
  #L18fe94.  call temp:= `a`(v1, v2) @signature `Lorg/b/a/a/c/l;.a:(B)S` @kind virtual;
  #L18fe9a.  v1:= temp;
  #L18fe9c.  v2:= 250I;
  #L18fea0.  if v1 >= v2 then goto L18feb0;
  #L18fea4.  v2:= v7.`org.b.a.a.m.g` @type ^`int`;
  #L18fea8.  v2:= v2 + 1;
  #L18feac.  v7.`org.b.a.a.m.g` @type ^`int` := v2;
  #L18feb0.  if v1 >= v6 then goto L18ff02;
  #L18feb4.  v2:= v7.`org.b.a.a.m.h` @type ^`int`;
  #L18feb8.  v2:= v2 + 1;
  #L18febc.  v7.`org.b.a.a.m.h` @type ^`int` := v2;
  #L18fec0.  v2:= v7.`org.b.a.a.m.d` @type ^`short` @kind short;
  #L18fec4.  if v2 >= v6 then goto L18ff02;
  #L18fec8.  v2:= v7.`org.b.a.a.m.e` @type ^`int`;
  #L18fecc.  v2:= v2 + 1;
  #L18fed0.  v7.`org.b.a.a.m.e` @type ^`int` := v2;
  #L18fed4.  v2:= v7.`org.b.a.a.m.c` @type ^`boolean` @kind boolean;
  #L18fed8.  if v2 != 0 then goto L18ff0c;
  #L18fedc.  v2:= v7.`org.b.a.a.m.f` @type ^`int`[] @kind object;
  #L18fee0.  v3:= v7.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` @kind object;
  #L18fee4.  v4:= v7.`org.b.a.a.m.d` @type ^`short` @kind short;
  #L18fee8.  v4:= v4 * 64;
  #L18feec.  v4:= v4 + v1 @kind int;
  #L18feee.  call temp:= `a`(v3, v4) @signature `Lorg/b/a/a/c/l;.a:(I)B` @kind virtual;
  #L18fef4.  v3:= temp;
  #L18fef6.  v4:= v2[v3];
  #L18fefa.  v4:= v4 + 1;
  #L18fefe.  v2[v3]:= v4;
  #L18ff02.  v7.`org.b.a.a.m.d` @type ^`short` := v1 @kind char;
  #L18ff06.  v9:= v9 + 1;
  #L18ff0a.  goto L18fe88;
  #L18ff0c.  v2:= v7.`org.b.a.a.m.f` @type ^`int`[] @kind object;
  #L18ff10.  v3:= v7.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` @kind object;
  #L18ff14.  v4:= v1 * 64;
  #L18ff18.  v5:= v7.`org.b.a.a.m.d` @type ^`short` @kind short;
  #L18ff1c.  v4:= v4 + v5 @kind int;
  #L18ff1e.  call temp:= `a`(v3, v4) @signature `Lorg/b/a/a/c/l;.a:(I)B` @kind virtual;
  #L18ff24.  v3:= temp;
  #L18ff26.  v4:= v2[v3];
  #L18ff2a.  v4:= v4 + 1;
  #L18ff2e.  v2[v3]:= v4;
  #L18ff32.  goto L18ff02;
  #L18ff34.  v0:= v7.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` @kind object;
  #L18ff38.  v1:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L18ff3c.  if v0 != v1 then goto L18ff6a;
  #L18ff40.  v0:= v7.`org.b.a.a.m.e` @type ^`int`;
  #L18ff44.  v1:= 1024I;
  #L18ff48.  if v0 <= v1 then goto L18ff6a;
  #L18ff4c.  call temp:= `b`(v7) @signature `Lorg/b/a/a/m;.b:()F` @kind virtual;
  #L18ff52.  v0:= temp;
  #L18ff54.  v1:= 1064514355I;
  #L18ff5a.  v1:= fcmpl(v0, v1);
  #L18ff5e.  if v1 <= 0 then goto L18ff70;
  #L18ff62.  v0:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L18ff66.  v7.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L18ff6a.  v0:= v7.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` @kind object;
  #L18ff6e.  return v0 @kind object;
  #L18ff70.  v1:= 1028443341I;
  #L18ff76.  v0:= fcmpg(v0, v1);
  #L18ff7a.  if v0 >= 0 then goto L18ff6a;
  #L18ff7e.  v0:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L18ff82.  v7.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L18ff86.  goto L18ff6a;
}
procedure `float` `b`(`org.b.a.a.m` v3 @kind this) @signature `Lorg/b/a/a/m;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L18ff98.  v2:= 1.0F;
  #L18ff9c.  v0:= v3.`org.b.a.a.m.e` @type ^`int`;
  #L18ffa0.  if v0 <= 0 then goto L18ffe8;
  #L18ffa4.  v0:= v3.`org.b.a.a.m.f` @type ^`int`[] @kind object;
  #L18ffa8.  v1:= 3I;
  #L18ffaa.  v0:= v0[v1];
  #L18ffae.  v0:= (`float`) v0 @kind i2f;
  #L18ffb0.  v0:= v0 * v2 @kind float;
  #L18ffb2.  v1:= v3.`org.b.a.a.m.e` @type ^`int`;
  #L18ffb6.  v1:= (`float`) v1 @kind i2f;
  #L18ffb8.  v0:= v0 / v1 @kind float;
  #L18ffba.  v1:= v3.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` @kind object;
  #L18ffbe.  call temp:= `a`(v1) @signature `Lorg/b/a/a/c/l;.a:()F` @kind virtual;
  #L18ffc4.  v1:= temp;
  #L18ffc6.  v0:= v0 / v1 @kind float;
  #L18ffc8.  v1:= v3.`org.b.a.a.m.h` @type ^`int`;
  #L18ffcc.  v1:= (`float`) v1 @kind i2f;
  #L18ffce.  v0:= v0 * v1 @kind float;
  #L18ffd0.  v1:= v3.`org.b.a.a.m.g` @type ^`int`;
  #L18ffd4.  v1:= (`float`) v1 @kind i2f;
  #L18ffd6.  v0:= v0 / v1 @kind float;
  #L18ffd8.  v1:= fcmpl(v0, v2);
  #L18ffdc.  if v1 < 0 then goto L18ffe6;
  #L18ffe0.  v0:= 1065185444I;
  #L18ffe6.  return v0;
  #L18ffe8.  v0:= 1008981770I;
  #L18ffee.  goto L18ffe6;
}
procedure `org.b.a.a.b$a` `c`(`org.b.a.a.m` v1 @kind this) @signature `Lorg/b/a/a/m;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L190000.  v0:= v1.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` @kind object;
  #L190004.  return v0 @kind object;
}
procedure `void` `d`(`org.b.a.a.m` v3 @kind this) @signature `Lorg/b/a/a/m;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L190018.  v1:= 0I;
  #L19001a.  v0:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L19001e.  v3.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L190022.  v0:= 255I;
  #L190026.  v3.`org.b.a.a.m.d` @type ^`short` := v0 @kind char;
  #L19002a.  v0:= v1;
  #L19002c.  v2:= 4I;
  #L19002e.  if v0 >= v2 then goto L190040;
  #L190032.  v2:= v3.`org.b.a.a.m.f` @type ^`int`[] @kind object;
  #L190036.  v2[v0]:= v1;
  #L19003a.  v0:= v0 + 1;
  #L19003e.  goto L19002c;
  #L190040.  v3.`org.b.a.a.m.e` @type ^`int` := v1;
  #L190044.  v3.`org.b.a.a.m.g` @type ^`int` := v1;
  #L190048.  v3.`org.b.a.a.m.h` @type ^`int` := v1;
  #L19004c.  return @kind void;
}
