record `a.t` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `a.t.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.t.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.t.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.t.f` @AccessFlag PRIVATE_FINAL;
}
global `java.util.regex.Pattern` `@@a.t.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@a.t.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/t;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L08b76c.  v0:= "([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)/([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)" @kind object;
  #L08b770.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L08b776.  v0:= temp @kind object;
  #L08b778.  `@@a.t.a` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L08b77c.  v0:= ";\\s*(?:([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)=(?:([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)|\"([^\"]*)\"))?" @kind object;
  #L08b780.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L08b786.  v0:= temp @kind object;
  #L08b788.  `@@a.t.b` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L08b78c.  return @kind void;
}
procedure `void` `<init>`(`a.t` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `La/t;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L08b7a0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08b7a6.  v0.`a.t.c` @type ^`java.lang.String` := v1 @kind object;
  #L08b7aa.  v0.`a.t.d` @type ^`java.lang.String` := v2 @kind object;
  #L08b7ae.  v0.`a.t.e` @type ^`java.lang.String` := v3 @kind object;
  #L08b7b2.  v0.`a.t.f` @type ^`java.lang.String` := v4 @kind object;
  #L08b7b6.  return @kind void;
}
procedure `a.t` `a`(`java.lang.String` v9 @kind object) @signature `La/t;.a:(Ljava/lang/String;)La/t;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L08b7c8.  v2:= 0I;
  #L08b7ca.  v8:= 2I;
  #L08b7cc.  v7:= 1I;
  #L08b7ce.  v0:= `@@a.t.a` @type ^`java.util.regex.Pattern` @kind object;
  #L08b7d2.  call temp:= `matcher`(v0, v9) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L08b7d8.  v0:= temp @kind object;
  #L08b7da.  call temp:= `lookingAt`(v0) @signature `Ljava/util/regex/Matcher;.lookingAt:()Z` @kind virtual;
  #L08b7e0.  v1:= temp;
  #L08b7e2.  if v1 != 0 then goto L08b7e8;
  #L08b7e6.  return v2 @kind object;
  #L08b7e8.  call temp:= `group`(v0, v7) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L08b7ee.  v1:= temp @kind object;
  #L08b7f0.  v3:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L08b7f4.  call temp:= `toLowerCase`(v1, v3) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L08b7fa.  v3:= temp @kind object;
  #L08b7fc.  call temp:= `group`(v0, v8) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L08b802.  v1:= temp @kind object;
  #L08b804.  v4:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L08b808.  call temp:= `toLowerCase`(v1, v4) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L08b80e.  v4:= temp @kind object;
  #L08b810.  v1:= `@@a.t.b` @type ^`java.util.regex.Pattern` @kind object;
  #L08b814.  call temp:= `matcher`(v1, v9) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L08b81a.  v5:= temp @kind object;
  #L08b81c.  call temp:= `end`(v0) @signature `Ljava/util/regex/Matcher;.end:()I` @kind virtual;
  #L08b822.  v0:= temp;
  #L08b824.  v1:= v0;
  #L08b826.  v0:= v2 @kind object;
  #L08b828.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08b82e.  v6:= temp;
  #L08b830.  if v1 >= v6 then goto L08b912;
  #L08b834.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08b83a.  v6:= temp;
  #L08b83c.  call temp:= `region`(v5, v1, v6) @signature `Ljava/util/regex/Matcher;.region:(II)Ljava/util/regex/Matcher;` @kind virtual;
  #L08b842.  call temp:= `lookingAt`(v5) @signature `Ljava/util/regex/Matcher;.lookingAt:()Z` @kind virtual;
  #L08b848.  v1:= temp;
  #L08b84a.  if v1 == 0 then goto L08b7e6;
  #L08b84e.  call temp:= `group`(v5, v7) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L08b854.  v1:= temp @kind object;
  #L08b856.  if v1 == 0 then goto L08b86a;
  #L08b85a.  v6:= "charset" @kind object;
  #L08b85e.  call temp:= `equalsIgnoreCase`(v1, v6) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08b864.  v1:= temp;
  #L08b866.  if v1 != 0 then goto L08b874;
  #L08b86a.  call temp:= `end`(v5) @signature `Ljava/util/regex/Matcher;.end:()I` @kind virtual;
  #L08b870.  v1:= temp;
  #L08b872.  goto L08b828;
  #L08b874.  call temp:= `group`(v5, v8) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L08b87a.  v1:= temp @kind object;
  #L08b87c.  if v1 == 0 then goto L08b902;
  #L08b880.  v6:= "'" @kind object;
  #L08b884.  call temp:= `startsWith`(v1, v6) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L08b88a.  v6:= temp;
  #L08b88c.  if v6 == 0 then goto L08b8c0;
  #L08b890.  v6:= "'" @kind object;
  #L08b894.  call temp:= `endsWith`(v1, v6) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L08b89a.  v6:= temp;
  #L08b89c.  if v6 == 0 then goto L08b8c0;
  #L08b8a0.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08b8a6.  v6:= temp;
  #L08b8a8.  if v6 <= v8 then goto L08b8c0;
  #L08b8ac.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08b8b2.  v6:= temp;
  #L08b8b4.  v6:= v6 + -1;
  #L08b8b8.  call temp:= `substring`(v1, v7, v6) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08b8be.  v1:= temp @kind object;
  #L08b8c0.  if v0 == 0 then goto L08b90e;
  #L08b8c4.  call temp:= `equalsIgnoreCase`(v1, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08b8ca.  v0:= temp;
  #L08b8cc.  if v0 != 0 then goto L08b90e;
  #L08b8d0.  v0:= new `java.lang.IllegalArgumentException`;
  #L08b8d4.  v1:= new `java.lang.StringBuilder`;
  #L08b8d8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08b8de.  v2:= "Multiple different charsets: " @kind object;
  #L08b8e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b8e8.  v1:= temp @kind object;
  #L08b8ea.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b8f0.  v1:= temp @kind object;
  #L08b8f2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08b8f8.  v1:= temp @kind object;
  #L08b8fa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08b900.  throw v0;
  #L08b902.  v1:= 3I;
  #L08b904.  call temp:= `group`(v5, v1) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L08b90a.  v1:= temp @kind object;
  #L08b90c.  goto L08b8c0;
  #L08b90e.  v0:= v1 @kind object;
  #L08b910.  goto L08b86a;
  #L08b912.  v2:= new `a.t`;
  #L08b916.  call `<init>`(v2, v9, v3, v4, v0) @signature `La/t;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L08b91c.  goto L08b7e6;
}
procedure `java.nio.charset.Charset` `a`(`a.t` v1 @kind this, `java.nio.charset.Charset` v2 @kind object) @signature `La/t;.a:(Ljava/nio/charset/Charset;)Ljava/nio/charset/Charset;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b930.  v0:= v1.`a.t.f` @type ^`java.lang.String` @kind object;
  #L08b934.  if v0 == 0 then goto L08b944;
  #L08b938.  v0:= v1.`a.t.f` @type ^`java.lang.String` @kind object;
  #L08b93c.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L08b942.  v2:= temp @kind object;
  #L08b944.  return v2 @kind object;
}
procedure `boolean` `equals`(`a.t` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `La/t;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08b958.  v0:= instanceof @variable v3 @type ^`a.t` @kind boolean;
  #L08b95c.  if v0 == 0 then goto L08b97c;
  #L08b960.  v3:= (`a.t`) v3 @kind object;
  #L08b964.  v0:= v3.`a.t.c` @type ^`java.lang.String` @kind object;
  #L08b968.  v1:= v2.`a.t.c` @type ^`java.lang.String` @kind object;
  #L08b96c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08b972.  v0:= temp;
  #L08b974.  if v0 == 0 then goto L08b97c;
  #L08b978.  v0:= 1I;
  #L08b97a.  return v0;
  #L08b97c.  v0:= 0I;
  #L08b97e.  goto L08b97a;
}
procedure `int` `hashCode`(`a.t` v1 @kind this) @signature `La/t;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b990.  v0:= v1.`a.t.c` @type ^`java.lang.String` @kind object;
  #L08b994.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L08b99a.  v0:= temp;
  #L08b99c.  return v0;
}
procedure `java.lang.String` `toString`(`a.t` v1 @kind this) @signature `La/t;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b9b0.  v0:= v1.`a.t.c` @type ^`java.lang.String` @kind object;
  #L08b9b4.  return v0 @kind object;
}
