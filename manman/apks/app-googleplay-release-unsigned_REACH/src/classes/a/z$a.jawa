record `a.z$a` @kind class @AccessFlag PUBLIC {
  `a.x` `a.z$a.a` @AccessFlag ;
  `a.v` `a.z$a.b` @AccessFlag ;
  `int` `a.z$a.c` @AccessFlag ;
  `java.lang.String` `a.z$a.d` @AccessFlag ;
  `a.p` `a.z$a.e` @AccessFlag ;
  `a.q$a` `a.z$a.f` @AccessFlag ;
  `a.aa` `a.z$a.g` @AccessFlag ;
  `a.z` `a.z$a.h` @AccessFlag ;
  `a.z` `a.z$a.i` @AccessFlag ;
  `a.z` `a.z$a.j` @AccessFlag ;
  `long` `a.z$a.k` @AccessFlag ;
  `long` `a.z$a.l` @AccessFlag ;
}
procedure `void` `<init>`(`a.z$a` v1 @kind this) @signature `La/z$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L08cd08.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08cd0e.  v0:= -1I;
  #L08cd10.  v1.`a.z$a.c` @type ^`int` := v0;
  #L08cd14.  v0:= new `a.q$a`;
  #L08cd18.  call `<init>`(v0) @signature `La/q$a;.<init>:()V` @kind direct;
  #L08cd1e.  v1.`a.z$a.f` @type ^`a.q$a` := v0 @kind object;
  #L08cd22.  return @kind void;
}
procedure `void` `<init>`(`a.z$a` v2 @kind this, `a.z` v3 @kind object) @signature `La/z$a;.<init>:(La/z;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L08cd34.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08cd3a.  v0:= -1I;
  #L08cd3c.  v2.`a.z$a.c` @type ^`int` := v0;
  #L08cd40.  v0:= v3.`a.z.a` @type ^`a.x` @kind object;
  #L08cd44.  v2.`a.z$a.a` @type ^`a.x` := v0 @kind object;
  #L08cd48.  v0:= v3.`a.z.b` @type ^`a.v` @kind object;
  #L08cd4c.  v2.`a.z$a.b` @type ^`a.v` := v0 @kind object;
  #L08cd50.  v0:= v3.`a.z.c` @type ^`int`;
  #L08cd54.  v2.`a.z$a.c` @type ^`int` := v0;
  #L08cd58.  v0:= v3.`a.z.d` @type ^`java.lang.String` @kind object;
  #L08cd5c.  v2.`a.z$a.d` @type ^`java.lang.String` := v0 @kind object;
  #L08cd60.  v0:= v3.`a.z.e` @type ^`a.p` @kind object;
  #L08cd64.  v2.`a.z$a.e` @type ^`a.p` := v0 @kind object;
  #L08cd68.  v0:= v3.`a.z.f` @type ^`a.q` @kind object;
  #L08cd6c.  call temp:= `b`(v0) @signature `La/q;.b:()La/q$a;` @kind virtual;
  #L08cd72.  v0:= temp @kind object;
  #L08cd74.  v2.`a.z$a.f` @type ^`a.q$a` := v0 @kind object;
  #L08cd78.  v0:= v3.`a.z.g` @type ^`a.aa` @kind object;
  #L08cd7c.  v2.`a.z$a.g` @type ^`a.aa` := v0 @kind object;
  #L08cd80.  v0:= v3.`a.z.h` @type ^`a.z` @kind object;
  #L08cd84.  v2.`a.z$a.h` @type ^`a.z` := v0 @kind object;
  #L08cd88.  v0:= v3.`a.z.i` @type ^`a.z` @kind object;
  #L08cd8c.  v2.`a.z$a.i` @type ^`a.z` := v0 @kind object;
  #L08cd90.  v0:= v3.`a.z.j` @type ^`a.z` @kind object;
  #L08cd94.  v2.`a.z$a.j` @type ^`a.z` := v0 @kind object;
  #L08cd98.  v0:= v3.`a.z.k` @type ^`long` @kind wide;
  #L08cd9c.  v2.`a.z$a.k` @type ^`long` := v0 @kind wide;
  #L08cda0.  v0:= v3.`a.z.l` @type ^`long` @kind wide;
  #L08cda4.  v2.`a.z$a.l` @type ^`long` := v0 @kind wide;
  #L08cda8.  return @kind void;
}
procedure `void` `a`(`a.z$a` v3 @kind this, `java.lang.String` v4 @kind object, `a.z` v5 @kind object) @signature `La/z$a;.a:(Ljava/lang/String;La/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L08cdbc.  v0:= v5.`a.z.g` @type ^`a.aa` @kind object;
  #L08cdc0.  if v0 == 0 then goto L08cdf6;
  #L08cdc4.  v0:= new `java.lang.IllegalArgumentException`;
  #L08cdc8.  v1:= new `java.lang.StringBuilder`;
  #L08cdcc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08cdd2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08cdd8.  v1:= temp @kind object;
  #L08cdda.  v2:= ".body != null" @kind object;
  #L08cdde.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08cde4.  v1:= temp @kind object;
  #L08cde6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08cdec.  v1:= temp @kind object;
  #L08cdee.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08cdf4.  throw v0;
  #L08cdf6.  v0:= v5.`a.z.h` @type ^`a.z` @kind object;
  #L08cdfa.  if v0 == 0 then goto L08ce30;
  #L08cdfe.  v0:= new `java.lang.IllegalArgumentException`;
  #L08ce02.  v1:= new `java.lang.StringBuilder`;
  #L08ce06.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08ce0c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08ce12.  v1:= temp @kind object;
  #L08ce14.  v2:= ".networkResponse != null" @kind object;
  #L08ce18.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08ce1e.  v1:= temp @kind object;
  #L08ce20.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08ce26.  v1:= temp @kind object;
  #L08ce28.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08ce2e.  throw v0;
  #L08ce30.  v0:= v5.`a.z.i` @type ^`a.z` @kind object;
  #L08ce34.  if v0 == 0 then goto L08ce6a;
  #L08ce38.  v0:= new `java.lang.IllegalArgumentException`;
  #L08ce3c.  v1:= new `java.lang.StringBuilder`;
  #L08ce40.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08ce46.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08ce4c.  v1:= temp @kind object;
  #L08ce4e.  v2:= ".cacheResponse != null" @kind object;
  #L08ce52.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08ce58.  v1:= temp @kind object;
  #L08ce5a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08ce60.  v1:= temp @kind object;
  #L08ce62.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08ce68.  throw v0;
  #L08ce6a.  v0:= v5.`a.z.j` @type ^`a.z` @kind object;
  #L08ce6e.  if v0 == 0 then goto L08cea4;
  #L08ce72.  v0:= new `java.lang.IllegalArgumentException`;
  #L08ce76.  v1:= new `java.lang.StringBuilder`;
  #L08ce7a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08ce80.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08ce86.  v1:= temp @kind object;
  #L08ce88.  v2:= ".priorResponse != null" @kind object;
  #L08ce8c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08ce92.  v1:= temp @kind object;
  #L08ce94.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08ce9a.  v1:= temp @kind object;
  #L08ce9c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08cea2.  throw v0;
  #L08cea4.  return @kind void;
}
procedure `void` `d`(`a.z$a` v2 @kind this, `a.z` v3 @kind object) @signature `La/z$a;.d:(La/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L08ceb8.  v0:= v3.`a.z.g` @type ^`a.aa` @kind object;
  #L08cebc.  if v0 == 0 then goto L08ced0;
  #L08cec0.  v0:= new `java.lang.IllegalArgumentException`;
  #L08cec4.  v1:= "priorResponse.body != null" @kind object;
  #L08cec8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08cece.  throw v0;
  #L08ced0.  return @kind void;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `int` v1 ) @signature `La/z$a;.a:(I)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08cee4.  v0.`a.z$a.c` @type ^`int` := v1;
  #L08cee8.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `long` v2 ) @signature `La/z$a;.a:(J)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08cefc.  v1.`a.z$a.k` @type ^`long` := v2 @kind wide;
  #L08cf00.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.aa` v1 @kind object) @signature `La/z$a;.a:(La/aa;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08cf14.  v0.`a.z$a.g` @type ^`a.aa` := v1 @kind object;
  #L08cf18.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.p` v1 @kind object) @signature `La/z$a;.a:(La/p;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08cf2c.  v0.`a.z$a.e` @type ^`a.p` := v1 @kind object;
  #L08cf30.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `a.q` v2 @kind object) @signature `La/z$a;.a:(La/q;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08cf44.  call temp:= `b`(v2) @signature `La/q;.b:()La/q$a;` @kind virtual;
  #L08cf4a.  v0:= temp @kind object;
  #L08cf4c.  v1.`a.z$a.f` @type ^`a.q$a` := v0 @kind object;
  #L08cf50.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.v` v1 @kind object) @signature `La/z$a;.a:(La/v;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08cf64.  v0.`a.z$a.b` @type ^`a.v` := v1 @kind object;
  #L08cf68.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.x` v1 @kind object) @signature `La/z$a;.a:(La/x;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08cf7c.  v0.`a.z$a.a` @type ^`a.x` := v1 @kind object;
  #L08cf80.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `a.z` v2 @kind object) @signature `La/z$a;.a:(La/z;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08cf94.  if v2 == 0 then goto L08cfa2;
  #L08cf98.  v0:= "networkResponse" @kind object;
  #L08cf9c.  call `a`(v1, v0, v2) @signature `La/z$a;.a:(Ljava/lang/String;La/z;)V` @kind direct;
  #L08cfa2.  v1.`a.z$a.h` @type ^`a.z` := v2 @kind object;
  #L08cfa6.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `java.lang.String` v1 @kind object) @signature `La/z$a;.a:(Ljava/lang/String;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08cfb8.  v0.`a.z$a.d` @type ^`java.lang.String` := v1 @kind object;
  #L08cfbc.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `La/z$a;.a:(Ljava/lang/String;Ljava/lang/String;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08cfd0.  v0:= v1.`a.z$a.f` @type ^`a.q$a` @kind object;
  #L08cfd4.  call temp:= `a`(v0, v2, v3) @signature `La/q$a;.a:(Ljava/lang/String;Ljava/lang/String;)La/q$a;` @kind virtual;
  #L08cfda.  return v1 @kind object;
}
procedure `a.z` `a`(`a.z$a` v3 @kind this) @signature `La/z$a;.a:()La/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L08cfec.  v0:= v3.`a.z$a.a` @type ^`a.x` @kind object;
  #L08cff0.  if v0 != 0 then goto L08d004;
  #L08cff4.  v0:= new `java.lang.IllegalStateException`;
  #L08cff8.  v1:= "request == null" @kind object;
  #L08cffc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08d002.  throw v0;
  #L08d004.  v0:= v3.`a.z$a.b` @type ^`a.v` @kind object;
  #L08d008.  if v0 != 0 then goto L08d01c;
  #L08d00c.  v0:= new `java.lang.IllegalStateException`;
  #L08d010.  v1:= "protocol == null" @kind object;
  #L08d014.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08d01a.  throw v0;
  #L08d01c.  v0:= v3.`a.z$a.c` @type ^`int`;
  #L08d020.  if v0 >= 0 then goto L08d05a;
  #L08d024.  v0:= new `java.lang.IllegalStateException`;
  #L08d028.  v1:= new `java.lang.StringBuilder`;
  #L08d02c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08d032.  v2:= "code < 0: " @kind object;
  #L08d036.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08d03c.  v1:= temp @kind object;
  #L08d03e.  v2:= v3.`a.z$a.c` @type ^`int`;
  #L08d042.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08d048.  v1:= temp @kind object;
  #L08d04a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08d050.  v1:= temp @kind object;
  #L08d052.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08d058.  throw v0;
  #L08d05a.  v0:= new `a.z`;
  #L08d05e.  call `<init>`(v0, v3) @signature `La/z;.<init>:(La/z$a;)V` @kind direct;
  #L08d064.  return v0 @kind object;
}
procedure `a.z$a` `b`(`a.z$a` v1 @kind this, `long` v2 ) @signature `La/z$a;.b:(J)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08d078.  v1.`a.z$a.l` @type ^`long` := v2 @kind wide;
  #L08d07c.  return v1 @kind object;
}
procedure `a.z$a` `b`(`a.z$a` v1 @kind this, `a.z` v2 @kind object) @signature `La/z$a;.b:(La/z;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08d090.  if v2 == 0 then goto L08d09e;
  #L08d094.  v0:= "cacheResponse" @kind object;
  #L08d098.  call `a`(v1, v0, v2) @signature `La/z$a;.a:(Ljava/lang/String;La/z;)V` @kind direct;
  #L08d09e.  v1.`a.z$a.i` @type ^`a.z` := v2 @kind object;
  #L08d0a2.  return v1 @kind object;
}
procedure `a.z$a` `c`(`a.z$a` v0 @kind this, `a.z` v1 @kind object) @signature `La/z$a;.c:(La/z;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08d0b4.  if v1 == 0 then goto L08d0be;
  #L08d0b8.  call `d`(v0, v1) @signature `La/z$a;.d:(La/z;)V` @kind direct;
  #L08d0be.  v0.`a.z$a.j` @type ^`a.z` := v1 @kind object;
  #L08d0c2.  return v0 @kind object;
}
