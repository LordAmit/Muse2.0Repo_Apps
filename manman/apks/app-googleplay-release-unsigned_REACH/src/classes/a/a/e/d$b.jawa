record `a.a.e.d$b` @kind class @AccessFlag FINAL {
  `int` `a.a.e.d$b.a` @AccessFlag ;
  `int` `a.a.e.d$b.b` @AccessFlag ;
  `a.a.e.c`[] `a.a.e.d$b.c` @AccessFlag ;
  `int` `a.a.e.d$b.d` @AccessFlag ;
  `int` `a.a.e.d$b.e` @AccessFlag ;
  `int` `a.a.e.d$b.f` @AccessFlag ;
  `b.c` `a.a.e.d$b.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.a.e.d$b.h` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.e.d$b.i` @AccessFlag PRIVATE;
  `boolean` `a.a.e.d$b.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.e.d$b` v2 @kind this, `int` v3 , `boolean` v4 , `b.c` v5 @kind object) @signature `La/a/e/d$b;.<init>:(IZLb/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07c6c0.  v1:= 0I;
  #L07c6c2.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07c6c8.  v0:= 2147483647I;
  #L07c6ce.  v2.`a.a.e.d$b.i` @type ^`int` := v0;
  #L07c6d2.  v0:= 8I;
  #L07c6d6.  v0:= new `a.a.e.c`[v0];
  #L07c6da.  v2.`a.a.e.d$b.c` @type ^`a.a.e.c`[] := v0 @kind object;
  #L07c6de.  v0:= v2.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c6e2.  v0:= length @variable v0;
  #L07c6e4.  v0:= v0 + -1;
  #L07c6e8.  v2.`a.a.e.d$b.d` @type ^`int` := v0;
  #L07c6ec.  v2.`a.a.e.d$b.e` @type ^`int` := v1;
  #L07c6f0.  v2.`a.a.e.d$b.f` @type ^`int` := v1;
  #L07c6f4.  v2.`a.a.e.d$b.a` @type ^`int` := v3;
  #L07c6f8.  v2.`a.a.e.d$b.b` @type ^`int` := v3;
  #L07c6fc.  v2.`a.a.e.d$b.h` @type ^`boolean` := v4 @kind boolean;
  #L07c700.  v2.`a.a.e.d$b.g` @type ^`b.c` := v5 @kind object;
  #L07c704.  return @kind void;
}
procedure `void` `<init>`(`a.a.e.d$b` v2 @kind this, `b.c` v3 @kind object) @signature `La/a/e/d$b;.<init>:(Lb/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07c718.  v0:= 4096I;
  #L07c71c.  v1:= 1I;
  #L07c71e.  call `<init>`(v2, v0, v1, v3) @signature `La/a/e/d$b;.<init>:(IZLb/c;)V` @kind direct;
  #L07c724.  return @kind void;
}
procedure `void` `a`(`a.a.e.d$b` v3 @kind this) @signature `La/a/e/d$b;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07c738.  v2:= 0I;
  #L07c73a.  v0:= v3.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c73e.  v1:= 0I;
  #L07c740.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L07c746.  v0:= v3.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c74a.  v0:= length @variable v0;
  #L07c74c.  v0:= v0 + -1;
  #L07c750.  v3.`a.a.e.d$b.d` @type ^`int` := v0;
  #L07c754.  v3.`a.a.e.d$b.e` @type ^`int` := v2;
  #L07c758.  v3.`a.a.e.d$b.f` @type ^`int` := v2;
  #L07c75c.  return @kind void;
}
procedure `void` `a`(`a.a.e.d$b` v6 @kind this, `a.a.e.c` v7 @kind object) @signature `La/a/e/d$b;.a:(La/a/e/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07c770.  v0:= v7.`a.a.e.c.i` @type ^`int`;
  #L07c774.  v1:= v6.`a.a.e.d$b.b` @type ^`int`;
  #L07c778.  if v0 <= v1 then goto L07c784;
  #L07c77c.  call `a`(v6) @signature `La/a/e/d$b;.a:()V` @kind direct;
  #L07c782.  return @kind void;
  #L07c784.  v1:= v6.`a.a.e.d$b.f` @type ^`int`;
  #L07c788.  v1:= v1 + v0 @kind int;
  #L07c78a.  v2:= v6.`a.a.e.d$b.b` @type ^`int`;
  #L07c78e.  v1:= v1 - v2 @kind int;
  #L07c790.  call temp:= `b`(v6, v1) @signature `La/a/e/d$b;.b:(I)I` @kind direct;
  #L07c796.  v1:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L07c79a.  v1:= v1 + 1;
  #L07c79e.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c7a2.  v2:= length @variable v2;
  #L07c7a4.  if v1 <= v2 then goto L07c7e0;
  #L07c7a8.  v1:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c7ac.  v1:= length @variable v1;
  #L07c7ae.  v1:= v1 * 2;
  #L07c7b2.  v1:= new `a.a.e.c`[v1];
  #L07c7b6.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c7ba.  v3:= 0I;
  #L07c7bc.  v4:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c7c0.  v4:= length @variable v4;
  #L07c7c2.  v5:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c7c6.  v5:= length @variable v5;
  #L07c7c8.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L07c7ce.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c7d2.  v2:= length @variable v2;
  #L07c7d4.  v2:= v2 + -1;
  #L07c7d8.  v6.`a.a.e.d$b.d` @type ^`int` := v2;
  #L07c7dc.  v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] := v1 @kind object;
  #L07c7e0.  v1:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07c7e4.  v2:= v1 + -1;
  #L07c7e8.  v6.`a.a.e.d$b.d` @type ^`int` := v2;
  #L07c7ec.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c7f0.  v2[v1]:= v7 @kind object;
  #L07c7f4.  v1:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L07c7f8.  v1:= v1 + 1;
  #L07c7fc.  v6.`a.a.e.d$b.e` @type ^`int` := v1;
  #L07c800.  v1:= v6.`a.a.e.d$b.f` @type ^`int`;
  #L07c804.  v0:= v0 + v1 @kind int;
  #L07c806.  v6.`a.a.e.d$b.f` @type ^`int` := v0;
  #L07c80a.  goto L07c782;
}
procedure `int` `b`(`a.a.e.d$b` v6 @kind this, `int` v7 ) @signature `La/a/e/d$b;.b:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07c81c.  v1:= 0I;
  #L07c81e.  if v7 <= 0 then goto L07c8be;
  #L07c822.  v0:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c826.  v0:= length @variable v0;
  #L07c828.  v0:= v0 + -1;
  #L07c82c.  v2:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07c830.  if v0 < v2 then goto L07c872;
  #L07c834.  if v7 <= 0 then goto L07c872;
  #L07c838.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c83c.  v2:= v2[v0] @kind object;
  #L07c840.  v2:= v2.`a.a.e.c.i` @type ^`int`;
  #L07c844.  v7:= v7 - v2 @kind int;
  #L07c846.  v2:= v6.`a.a.e.d$b.f` @type ^`int`;
  #L07c84a.  v3:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c84e.  v3:= v3[v0] @kind object;
  #L07c852.  v3:= v3.`a.a.e.c.i` @type ^`int`;
  #L07c856.  v2:= v2 - v3 @kind int;
  #L07c858.  v6.`a.a.e.d$b.f` @type ^`int` := v2;
  #L07c85c.  v2:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L07c860.  v2:= v2 + -1;
  #L07c864.  v6.`a.a.e.d$b.e` @type ^`int` := v2;
  #L07c868.  v1:= v1 + 1;
  #L07c86c.  v0:= v0 + -1;
  #L07c870.  goto L07c82c;
  #L07c872.  v0:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c876.  v2:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07c87a.  v2:= v2 + 1;
  #L07c87e.  v3:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c882.  v4:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07c886.  v4:= v4 + 1;
  #L07c88a.  v4:= v4 + v1 @kind int;
  #L07c88c.  v5:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L07c890.  call `arraycopy`(v0, v2, v3, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L07c896.  v0:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07c89a.  v2:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07c89e.  v2:= v2 + 1;
  #L07c8a2.  v3:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07c8a6.  v3:= v3 + 1;
  #L07c8aa.  v3:= v3 + v1 @kind int;
  #L07c8ac.  v4:= 0I;
  #L07c8ae.  call `fill`(v0, v2, v3, v4) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L07c8b4.  v0:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07c8b8.  v0:= v0 + v1 @kind int;
  #L07c8ba.  v6.`a.a.e.d$b.d` @type ^`int` := v0;
  #L07c8be.  return v1;
}
procedure `void` `b`(`a.a.e.d$b` v2 @kind this) @signature `La/a/e/d$b;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07c8d0.  v0:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L07c8d4.  v1:= v2.`a.a.e.d$b.f` @type ^`int`;
  #L07c8d8.  if v0 >= v1 then goto L07c8ea;
  #L07c8dc.  v0:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L07c8e0.  if v0 != 0 then goto L07c8ec;
  #L07c8e4.  call `a`(v2) @signature `La/a/e/d$b;.a:()V` @kind direct;
  #L07c8ea.  return @kind void;
  #L07c8ec.  v0:= v2.`a.a.e.d$b.f` @type ^`int`;
  #L07c8f0.  v1:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L07c8f4.  v0:= v0 - v1 @kind int;
  #L07c8f6.  call temp:= `b`(v2, v0) @signature `La/a/e/d$b;.b:(I)I` @kind direct;
  #L07c8fc.  goto L07c8ea;
}
procedure `void` `a`(`a.a.e.d$b` v2 @kind this, `int` v3 ) @signature `La/a/e/d$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L07c910.  v2.`a.a.e.d$b.a` @type ^`int` := v3;
  #L07c914.  v0:= 16384I;
  #L07c918.  call temp:= `min`(v3, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L07c91e.  v0:= temp;
  #L07c920.  v1:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L07c924.  if v1 != v0 then goto L07c92a;
  #L07c928.  return @kind void;
  #L07c92a.  v1:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L07c92e.  if v0 >= v1 then goto L07c942;
  #L07c932.  v1:= v2.`a.a.e.d$b.i` @type ^`int`;
  #L07c936.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L07c93c.  v1:= temp;
  #L07c93e.  v2.`a.a.e.d$b.i` @type ^`int` := v1;
  #L07c942.  v1:= 1I;
  #L07c944.  v2.`a.a.e.d$b.j` @type ^`boolean` := v1 @kind boolean;
  #L07c948.  v2.`a.a.e.d$b.b` @type ^`int` := v0;
  #L07c94c.  call `b`(v2) @signature `La/a/e/d$b;.b:()V` @kind direct;
  #L07c952.  goto L07c928;
}
procedure `void` `a`(`a.a.e.d$b` v3 @kind this, `int` v4 , `int` v5 , `int` v6 ) @signature `La/a/e/d$b;.a:(III)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L07c964.  if v4 >= v5 then goto L07c978;
  #L07c968.  v0:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07c96c.  v1:= v6 ^| v4 @kind int;
  #L07c970.  call temp:= `b`(v0, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L07c976.  return @kind void;
  #L07c978.  v0:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07c97c.  v1:= v6 ^| v5 @kind int;
  #L07c980.  call temp:= `b`(v0, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L07c986.  v0:= v4 - v5 @kind int;
  #L07c98a.  v1:= 128I;
  #L07c98e.  if v0 < v1 then goto L07c9aa;
  #L07c992.  v1:= v0 ^& 127;
  #L07c996.  v2:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07c99a.  v1:= v1 ^| 128;
  #L07c99e.  call temp:= `b`(v2, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L07c9a4.  v0:= v0 ^>> 7;
  #L07c9a8.  goto L07c98a;
  #L07c9aa.  v1:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07c9ae.  call temp:= `b`(v1, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L07c9b4.  goto L07c976;
}
procedure `void` `a`(`a.a.e.d$b` v4 @kind this, `b.f` v5 @kind object) @signature `La/a/e/d$b;.a:(Lb/f;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07c9c8.  v3:= 127I;
  #L07c9cc.  v0:= v4.`a.a.e.d$b.h` @type ^`boolean` @kind boolean;
  #L07c9d0.  if v0 == 0 then goto L07ca2e;
  #L07c9d4.  call temp:= `a`() @signature `La/a/e/k;.a:()La/a/e/k;` @kind static;
  #L07c9da.  v0:= temp @kind object;
  #L07c9dc.  call temp:= `a`(v0, v5) @signature `La/a/e/k;.a:(Lb/f;)I` @kind virtual;
  #L07c9e2.  v0:= temp;
  #L07c9e4.  call temp:= `g`(v5) @signature `Lb/f;.g:()I` @kind virtual;
  #L07c9ea.  v1:= temp;
  #L07c9ec.  if v0 >= v1 then goto L07ca2e;
  #L07c9f0.  v0:= new `b.c`;
  #L07c9f4.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L07c9fa.  call temp:= `a`() @signature `La/a/e/k;.a:()La/a/e/k;` @kind static;
  #L07ca00.  v1:= temp @kind object;
  #L07ca02.  call `a`(v1, v5, v0) @signature `La/a/e/k;.a:(Lb/f;Lb/d;)V` @kind virtual;
  #L07ca08.  call temp:= `n`(v0) @signature `Lb/c;.n:()Lb/f;` @kind virtual;
  #L07ca0e.  v0:= temp @kind object;
  #L07ca10.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L07ca16.  v1:= temp;
  #L07ca18.  v2:= 128I;
  #L07ca1c.  call `a`(v4, v1, v3, v2) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07ca22.  v1:= v4.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07ca26.  call temp:= `a`(v1, v0) @signature `Lb/c;.a:(Lb/f;)Lb/c;` @kind virtual;
  #L07ca2c.  return @kind void;
  #L07ca2e.  call temp:= `g`(v5) @signature `Lb/f;.g:()I` @kind virtual;
  #L07ca34.  v0:= temp;
  #L07ca36.  v1:= 0I;
  #L07ca38.  call `a`(v4, v0, v3, v1) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07ca3e.  v0:= v4.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07ca42.  call temp:= `a`(v0, v5) @signature `Lb/c;.a:(Lb/f;)Lb/c;` @kind virtual;
  #L07ca48.  goto L07ca2c;
}
procedure `void` `a`(`a.a.e.d$b` v13 @kind this, `java.util.List` v14 @kind object) @signature `La/a/e/d$b;.a:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L07ca5c.  v12:= 64I;
  #L07ca60.  v3:= 32I;
  #L07ca64.  v2:= 31I;
  #L07ca68.  v6:= 0I;
  #L07ca6a.  v4:= -1I;
  #L07ca6c.  v0:= v13.`a.a.e.d$b.j` @type ^`boolean` @kind boolean;
  #L07ca70.  if v0 == 0 then goto L07caa2;
  #L07ca74.  v0:= v13.`a.a.e.d$b.i` @type ^`int`;
  #L07ca78.  v1:= v13.`a.a.e.d$b.b` @type ^`int`;
  #L07ca7c.  if v0 >= v1 then goto L07ca8a;
  #L07ca80.  v0:= v13.`a.a.e.d$b.i` @type ^`int`;
  #L07ca84.  call `a`(v13, v0, v2, v3) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07ca8a.  v13.`a.a.e.d$b.j` @type ^`boolean` := v6 @kind boolean;
  #L07ca8e.  v0:= 2147483647I;
  #L07ca94.  v13.`a.a.e.d$b.i` @type ^`int` := v0;
  #L07ca98.  v0:= v13.`a.a.e.d$b.b` @type ^`int`;
  #L07ca9c.  call `a`(v13, v0, v2, v3) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07caa2.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07caa8.  v7:= temp;
  #L07caaa.  v5:= v6;
  #L07caac.  if v5 >= v7 then goto L07cc2c;
  #L07cab0.  call temp:= `get`(v14, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07cab6.  v0:= temp @kind object;
  #L07cab8.  v0:= (`a.a.e.c`) v0 @kind object;
  #L07cabc.  v1:= v0.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L07cac0.  call temp:= `f`(v1) @signature `Lb/f;.f:()Lb/f;` @kind virtual;
  #L07cac6.  v8:= temp @kind object;
  #L07cac8.  v9:= v0.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L07cacc.  v1:= `@@a.a.e.d.b` @type ^`java.util.Map` @kind object;
  #L07cad0.  call temp:= `get`(v1, v8) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L07cad6.  v1:= temp @kind object;
  #L07cad8.  v1:= (`java.lang.Integer`) v1 @kind object;
  #L07cadc.  if v1 == 0 then goto L07cc34;
  #L07cae0.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L07cae6.  v1:= temp;
  #L07cae8.  v1:= v1 + 1;
  #L07caec.  v2:= 1I;
  #L07caee.  if v1 <= v2 then goto L07cc2e;
  #L07caf2.  v2:= 8I;
  #L07caf6.  if v1 >= v2 then goto L07cc2e;
  #L07cafa.  v2:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07cafe.  v3:= v1 + -1;
  #L07cb02.  v2:= v2[v3] @kind object;
  #L07cb06.  v2:= v2.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L07cb0a.  call temp:= `a`(v2, v9) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07cb10.  v2:= temp;
  #L07cb12.  if v2 == 0 then goto L07cb88;
  #L07cb16.  v2:= v1;
  #L07cb18.  if v2 != v4 then goto L07cb6e;
  #L07cb1c.  v3:= v13.`a.a.e.d$b.d` @type ^`int`;
  #L07cb20.  v3:= v3 + 1;
  #L07cb24.  v10:= v13.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07cb28.  v10:= length @variable v10;
  #L07cb2a.  if v3 >= v10 then goto L07cb6e;
  #L07cb2e.  v11:= v13.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07cb32.  v11:= v11[v3] @kind object;
  #L07cb36.  v11:= v11.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L07cb3a.  call temp:= `a`(v11, v8) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07cb40.  v11:= temp;
  #L07cb42.  if v11 == 0 then goto L07cbba;
  #L07cb46.  v11:= v13.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07cb4a.  v11:= v11[v3] @kind object;
  #L07cb4e.  v11:= v11.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L07cb52.  call temp:= `a`(v11, v9) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07cb58.  v11:= temp;
  #L07cb5a.  if v11 == 0 then goto L07cba6;
  #L07cb5e.  v2:= v13.`a.a.e.d$b.d` @type ^`int`;
  #L07cb62.  v2:= v3 - v2 @kind int;
  #L07cb66.  v3:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07cb6a.  v3:= length @variable v3;
  #L07cb6c.  v2:= v2 + v3 @kind int;
  #L07cb6e.  if v2 == v4 then goto L07cbc0;
  #L07cb72.  v0:= 127I;
  #L07cb76.  v1:= 128I;
  #L07cb7a.  call `a`(v13, v2, v0, v1) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07cb80.  v0:= v5 + 1;
  #L07cb84.  v5:= v0;
  #L07cb86.  goto L07caac;
  #L07cb88.  v2:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07cb8c.  v2:= v2[v1] @kind object;
  #L07cb90.  v2:= v2.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L07cb94.  call temp:= `a`(v2, v9) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07cb9a.  v2:= temp;
  #L07cb9c.  if v2 == 0 then goto L07cc2e;
  #L07cba0.  v2:= v1 + 1;
  #L07cba4.  goto L07cb18;
  #L07cba6.  if v1 != v4 then goto L07cbba;
  #L07cbaa.  v1:= v13.`a.a.e.d$b.d` @type ^`int`;
  #L07cbae.  v1:= v3 - v1 @kind int;
  #L07cbb2.  v11:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07cbb6.  v11:= length @variable v11;
  #L07cbb8.  v1:= v1 + v11 @kind int;
  #L07cbba.  v3:= v3 + 1;
  #L07cbbe.  goto L07cb2a;
  #L07cbc0.  if v1 != v4 then goto L07cbe2;
  #L07cbc4.  v1:= v13.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07cbc8.  call temp:= `b`(v1, v12) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L07cbce.  call `a`(v13, v8) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L07cbd4.  call `a`(v13, v9) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L07cbda.  call `a`(v13, v0) @signature `La/a/e/d$b;.a:(La/a/e/c;)V` @kind direct;
  #L07cbe0.  goto L07cb80;
  #L07cbe2.  v2:= `@@a.a.e.c.a` @type ^`b.f` @kind object;
  #L07cbe6.  call temp:= `a`(v8, v2) @signature `Lb/f;.a:(Lb/f;)Z` @kind virtual;
  #L07cbec.  v2:= temp;
  #L07cbee.  if v2 == 0 then goto L07cc14;
  #L07cbf2.  v2:= `@@a.a.e.c.f` @type ^`b.f` @kind object;
  #L07cbf6.  call temp:= `equals`(v2, v8) @signature `Lb/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L07cbfc.  v2:= temp;
  #L07cbfe.  if v2 != 0 then goto L07cc14;
  #L07cc02.  v0:= 15I;
  #L07cc06.  call `a`(v13, v1, v0, v6) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07cc0c.  call `a`(v13, v9) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L07cc12.  goto L07cb80;
  #L07cc14.  v2:= 63I;
  #L07cc18.  call `a`(v13, v1, v2, v12) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07cc1e.  call `a`(v13, v9) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L07cc24.  call `a`(v13, v0) @signature `La/a/e/d$b;.a:(La/a/e/c;)V` @kind direct;
  #L07cc2a.  goto L07cb80;
  #L07cc2c.  return @kind void;
  #L07cc2e.  v2:= v4;
  #L07cc30.  goto L07cb18;
  #L07cc34.  v1:= v4;
  #L07cc36.  v2:= v4;
  #L07cc38.  goto L07cb18;
}
