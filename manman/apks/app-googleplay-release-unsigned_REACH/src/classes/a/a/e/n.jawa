record `a.a.e.n` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `a.a.e.n.a` @AccessFlag PRIVATE;
  `int`[] `a.a.e.n.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.e.n` v1 @kind this) @signature `La/a/e/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L082ac4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L082aca.  v0:= 10I;
  #L082ace.  v0:= new `int`[v0];
  #L082ad2.  v1.`a.a.e.n.b` @type ^`int`[] := v0 @kind object;
  #L082ad6.  return @kind void;
}
procedure `a.a.e.n` `a`(`a.a.e.n` v2 @kind this, `int` v3 , `int` v4 ) @signature `La/a/e/n;.a:(II)La/a/e/n;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L082ae8.  v0:= v2.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L082aec.  v0:= length @variable v0;
  #L082aee.  if v3 < v0 then goto L082af4;
  #L082af2.  return v2 @kind object;
  #L082af4.  v0:= 1I;
  #L082af6.  v0:= v0 ^< v3 @kind int;
  #L082af8.  v1:= v2.`a.a.e.n.a` @type ^`int`;
  #L082afc.  v0:= v0 ^| v1 @kind int;
  #L082afe.  v2.`a.a.e.n.a` @type ^`int` := v0;
  #L082b02.  v0:= v2.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L082b06.  v0[v3]:= v4;
  #L082b0a.  goto L082af2;
}
procedure `void` `a`(`a.a.e.n` v2 @kind this) @signature `La/a/e/n;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L082b1c.  v1:= 0I;
  #L082b1e.  v2.`a.a.e.n.a` @type ^`int` := v1;
  #L082b22.  v0:= v2.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L082b26.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L082b2c.  return @kind void;
}
procedure `void` `a`(`a.a.e.n` v2 @kind this, `a.a.e.n` v3 @kind object) @signature `La/a/e/n;.a:(La/a/e/n;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L082b40.  v0:= 0I;
  #L082b42.  v1:= 10I;
  #L082b46.  if v0 >= v1 then goto L082b6c;
  #L082b4a.  call temp:= `a`(v3, v0) @signature `La/a/e/n;.a:(I)Z` @kind virtual;
  #L082b50.  v1:= temp;
  #L082b52.  if v1 != 0 then goto L082b5c;
  #L082b56.  v0:= v0 + 1;
  #L082b5a.  goto L082b42;
  #L082b5c.  call temp:= `b`(v3, v0) @signature `La/a/e/n;.b:(I)I` @kind virtual;
  #L082b62.  v1:= temp;
  #L082b64.  call temp:= `a`(v2, v0, v1) @signature `La/a/e/n;.a:(II)La/a/e/n;` @kind virtual;
  #L082b6a.  goto L082b56;
  #L082b6c.  return @kind void;
}
procedure `boolean` `a`(`a.a.e.n` v3 @kind this, `int` v4 ) @signature `La/a/e/n;.a:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L082b80.  v0:= 1I;
  #L082b82.  v1:= v0 ^< v4 @kind int;
  #L082b86.  v2:= v3.`a.a.e.n.a` @type ^`int`;
  #L082b8a.  v1:= v1 ^& v2 @kind int;
  #L082b8c.  if v1 == 0 then goto L082b92;
  #L082b90.  return v0;
  #L082b92.  v0:= 0I;
  #L082b94.  goto L082b90;
}
procedure `int` `b`(`a.a.e.n` v1 @kind this) @signature `La/a/e/n;.b:()I` @AccessFlag  {
    temp;
    v0;

  #L082ba8.  v0:= v1.`a.a.e.n.a` @type ^`int`;
  #L082bac.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L082bb2.  v0:= temp;
  #L082bb4.  return v0;
}
procedure `int` `b`(`a.a.e.n` v1 @kind this, `int` v2 ) @signature `La/a/e/n;.b:(I)I` @AccessFlag  {
    temp;
    v0;

  #L082bc8.  v0:= v1.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L082bcc.  v0:= v0[v2];
  #L082bd0.  return v0;
}
procedure `int` `c`(`a.a.e.n` v2 @kind this) @signature `La/a/e/n;.c:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L082be4.  v0:= 2I;
  #L082be6.  v1:= v2.`a.a.e.n.a` @type ^`int`;
  #L082bea.  v0:= v0 ^& v1 @kind int;
  #L082bec.  if v0 == 0 then goto L082bfc;
  #L082bf0.  v0:= v2.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L082bf4.  v1:= 1I;
  #L082bf6.  v0:= v0[v1];
  #L082bfa.  return v0;
  #L082bfc.  v0:= -1I;
  #L082bfe.  goto L082bfa;
}
procedure `int` `c`(`a.a.e.n` v2 @kind this, `int` v3 ) @signature `La/a/e/n;.c:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L082c10.  v0:= 16I;
  #L082c14.  v1:= v2.`a.a.e.n.a` @type ^`int`;
  #L082c18.  v0:= v0 ^& v1 @kind int;
  #L082c1a.  if v0 == 0 then goto L082c28;
  #L082c1e.  v0:= v2.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L082c22.  v1:= 4I;
  #L082c24.  v3:= v0[v1];
  #L082c28.  return v3;
}
procedure `int` `d`(`a.a.e.n` v2 @kind this) @signature `La/a/e/n;.d:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L082c3c.  v0:= 128I;
  #L082c40.  v1:= v2.`a.a.e.n.a` @type ^`int`;
  #L082c44.  v0:= v0 ^& v1 @kind int;
  #L082c46.  if v0 == 0 then goto L082c56;
  #L082c4a.  v0:= v2.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L082c4e.  v1:= 7I;
  #L082c50.  v0:= v0[v1];
  #L082c54.  return v0;
  #L082c56.  v0:= 65535I;
  #L082c5c.  goto L082c54;
}
procedure `int` `d`(`a.a.e.n` v2 @kind this, `int` v3 ) @signature `La/a/e/n;.d:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L082c70.  v0:= 32I;
  #L082c74.  v1:= v2.`a.a.e.n.a` @type ^`int`;
  #L082c78.  v0:= v0 ^& v1 @kind int;
  #L082c7a.  if v0 == 0 then goto L082c88;
  #L082c7e.  v0:= v2.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L082c82.  v1:= 5I;
  #L082c84.  v3:= v0[v1];
  #L082c88.  return v3;
}
