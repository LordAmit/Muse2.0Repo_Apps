record `a.a.e.j` @kind class @AccessFlag FINAL extends `java.io.Closeable` @kind interface {
  `a.a.e.d$b` `a.a.e.j.a` @AccessFlag FINAL;
  `b.d` `a.a.e.j.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.a.e.j.d` @AccessFlag PRIVATE_FINAL;
  `b.c` `a.a.e.j.e` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.e.j.f` @AccessFlag PRIVATE;
  `boolean` `a.a.e.j.g` @AccessFlag PRIVATE;
}
global `java.util.logging.Logger` `@@a.a.e.j.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/a/e/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L081794.  v0:= constclass @type ^`a.a.e.e` @kind object;
  #L081798.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L08179e.  v0:= temp @kind object;
  #L0817a0.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L0817a6.  v0:= temp @kind object;
  #L0817a8.  `@@a.a.e.j.b` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L0817ac.  return @kind void;
}
procedure `void` `<init>`(`a.a.e.j` v2 @kind this, `b.d` v3 @kind object, `boolean` v4 ) @signature `La/a/e/j;.<init>:(Lb/d;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0817c0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0817c6.  v2.`a.a.e.j.c` @type ^`b.d` := v3 @kind object;
  #L0817ca.  v2.`a.a.e.j.d` @type ^`boolean` := v4 @kind boolean;
  #L0817ce.  v0:= new `b.c`;
  #L0817d2.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L0817d8.  v2.`a.a.e.j.e` @type ^`b.c` := v0 @kind object;
  #L0817dc.  v0:= new `a.a.e.d$b`;
  #L0817e0.  v1:= v2.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L0817e4.  call `<init>`(v0, v1) @signature `La/a/e/d$b;.<init>:(Lb/c;)V` @kind direct;
  #L0817ea.  v2.`a.a.e.j.a` @type ^`a.a.e.d$b` := v0 @kind object;
  #L0817ee.  v0:= 16384I;
  #L0817f2.  v2.`a.a.e.j.f` @type ^`int` := v0;
  #L0817f6.  return @kind void;
}
procedure `void` `a`(`b.d` v1 @kind object, `int` v2 ) @signature `La/a/e/j;.a:(Lb/d;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L081808.  v0:= v2 ^>> 16;
  #L08180c.  v0:= v0 ^& 255;
  #L081810.  call temp:= `i`(v1, v0) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L081816.  v0:= v2 ^>> 8;
  #L08181a.  v0:= v0 ^& 255;
  #L08181e.  call temp:= `i`(v1, v0) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L081824.  v0:= v2 ^& 255;
  #L081828.  call temp:= `i`(v1, v0) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L08182e.  return @kind void;
}
procedure `void` `b`(`a.a.e.j` v8 @kind this, `int` v9 , `long` v10 ) @signature `La/a/e/j;.b:(IJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L081840.  v6:= 0L;
  #L081844.  v0:= lcmp(v10, v6);
  #L081848.  if v0 <= 0 then goto L08188a;
  #L08184c.  v0:= v8.`a.a.e.j.f` @type ^`int`;
  #L081850.  v0:= (`long`) v0 @kind i2l;
  #L081852.  call temp:= `min`(v0, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L081858.  v0:= temp @kind wide;
  #L08185a.  v1:= (`int`) v0 @kind l2i;
  #L08185c.  v2:= (`long`) v1 @kind i2l;
  #L08185e.  v10:= v10 - v2 @kind long;
  #L081860.  v2:= 9I;
  #L081864.  v0:= lcmp(v10, v6);
  #L081868.  if v0 != 0 then goto L081886;
  #L08186c.  v0:= 4I;
  #L08186e.  call `a`(v8, v9, v1, v2, v0) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L081874.  v0:= v8.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081878.  v2:= v8.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L08187c.  v4:= (`long`) v1 @kind i2l;
  #L08187e.  call `a_`(v0, v2, v4) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L081884.  goto L081844;
  #L081886.  v0:= 0I;
  #L081888.  goto L08186e;
  #L08188a.  return @kind void;
}
procedure `void` `a`(`a.a.e.j` v5 @kind this) @signature `La/a/e/j;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L08189c.  @monitorenter v5
  #Try_start0.  
  #L08189e.  v0:= v5.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L0818a2.  if v0 == 0 then goto L0818bc;
  #L0818a6.  v0:= new `java.io.IOException`;
  #L0818aa.  v1:= "closed" @kind object;
  #L0818ae.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0818b4.  throw v0;
  #Try_end0.  
  #L0818b6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0818b8.  @monitorexit v5
  #L0818ba.  throw v0;
  #Try_start1.  
  #L0818bc.  v0:= v5.`a.a.e.j.d` @type ^`boolean` @kind boolean;
  #Try_end1.  
  #L0818c0.  if v0 != 0 then goto L0818c8;
  #L0818c4.  @monitorexit v5
  #L0818c6.  return @kind void;
  #Try_start2.  
  #L0818c8.  v0:= `@@a.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L0818cc.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L0818d0.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L0818d6.  v0:= temp;
  #L0818d8.  if v0 == 0 then goto L08190a;
  #L0818dc.  v0:= `@@a.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L0818e0.  v1:= ">> CONNECTION %s" @kind object;
  #L0818e4.  v2:= 1I;
  #L0818e6.  v2:= new `java.lang.Object`[v2];
  #L0818ea.  v3:= 0I;
  #L0818ec.  v4:= `@@a.a.e.e.a` @type ^`b.f` @kind object;
  #L0818f0.  call temp:= `e`(v4) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L0818f6.  v4:= temp @kind object;
  #L0818f8.  v2[v3]:= v4 @kind object;
  #L0818fc.  call temp:= `a`(v1, v2) @signature `La/a/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L081902.  v1:= temp @kind object;
  #L081904.  call `fine`(v0, v1) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L08190a.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L08190e.  v1:= `@@a.a.e.e.a` @type ^`b.f` @kind object;
  #L081912.  call temp:= `h`(v1) @signature `Lb/f;.h:()[B` @kind virtual;
  #L081918.  v1:= temp @kind object;
  #L08191a.  call temp:= `c`(v0, v1) @signature `Lb/d;.c:([B)Lb/d;` @kind interface;
  #L081920.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081924.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end2.  
  #L08192a.  goto L0818c4;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0818b6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0818b6;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L0818b6;
}
procedure `void` `a`(`a.a.e.j` v4 @kind this, `int` v5 , `byte` v6 , `b.c` v7 @kind object, `int` v8 ) @signature `La/a/e/j;.a:(IBLb/c;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L081958.  v0:= 0I;
  #L08195a.  call `a`(v4, v5, v8, v0, v6) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L081960.  if v8 <= 0 then goto L081970;
  #L081964.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081968.  v2:= (`long`) v8 @kind i2l;
  #L08196a.  call `a_`(v0, v7, v2) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L081970.  return @kind void;
}
procedure `void` `a`(`a.a.e.j` v5 @kind this, `int` v6 , `int` v7 , `byte` v8 , `byte` v9 ) @signature `La/a/e/j;.a:(IIBB)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L081984.  v4:= 1I;
  #L081986.  v3:= 0I;
  #L081988.  v0:= `@@a.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L08198c.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L081990.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L081996.  v0:= temp;
  #L081998.  if v0 == 0 then goto L0819ae;
  #L08199c.  v0:= `@@a.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L0819a0.  call temp:= `a`(v3, v6, v7, v8, v9) @signature `La/a/e/e;.a:(ZIIBB)Ljava/lang/String;` @kind static;
  #L0819a6.  v1:= temp @kind object;
  #L0819a8.  call `fine`(v0, v1) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L0819ae.  v0:= v5.`a.a.e.j.f` @type ^`int`;
  #L0819b2.  if v7 <= v0 then goto L0819e6;
  #L0819b6.  v0:= "FRAME_SIZE_ERROR length > %d: %d" @kind object;
  #L0819ba.  v1:= 2I;
  #L0819bc.  v1:= new `java.lang.Object`[v1];
  #L0819c0.  v2:= v5.`a.a.e.j.f` @type ^`int`;
  #L0819c4.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0819ca.  v2:= temp @kind object;
  #L0819cc.  v1[v3]:= v2 @kind object;
  #L0819d0.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0819d6.  v2:= temp @kind object;
  #L0819d8.  v1[v4]:= v2 @kind object;
  #L0819dc.  call temp:= `a`(v0, v1) @signature `La/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L0819e2.  v0:= temp @kind object;
  #L0819e4.  throw v0;
  #L0819e6.  v0:= -2147483648I;
  #L0819ea.  v0:= v0 ^& v6 @kind int;
  #L0819ec.  if v0 == 0 then goto L081a0e;
  #L0819f0.  v0:= "reserved bit set: %s" @kind object;
  #L0819f4.  v1:= new `java.lang.Object`[v4];
  #L0819f8.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L0819fe.  v2:= temp @kind object;
  #L081a00.  v1[v3]:= v2 @kind object;
  #L081a04.  call temp:= `a`(v0, v1) @signature `La/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L081a0a.  v0:= temp @kind object;
  #L081a0c.  throw v0;
  #L081a0e.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081a12.  call `a`(v0, v7) @signature `La/a/e/j;.a:(Lb/d;I)V` @kind static;
  #L081a18.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081a1c.  v1:= v8 ^& 255;
  #L081a20.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L081a26.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081a2a.  v1:= v9 ^& 255;
  #L081a2e.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L081a34.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081a38.  v1:= 2147483647I;
  #L081a3e.  v1:= v1 ^& v6 @kind int;
  #L081a40.  call temp:= `g`(v0, v1) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L081a46.  return @kind void;
}
procedure `void` `a`(`a.a.e.j` v8 @kind this, `int` v9 , `int` v10 , `java.util.List` v11 @kind object) @signature `La/a/e/j;.a:(IILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L081a58.  @monitorenter v8
  #Try_start0.  
  #L081a5a.  v0:= v8.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L081a5e.  if v0 == 0 then goto L081a78;
  #L081a62.  v0:= new `java.io.IOException`;
  #L081a66.  v1:= "closed" @kind object;
  #L081a6a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081a70.  throw v0;
  #Try_end0.  
  #L081a72.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L081a74.  @monitorexit v8
  #L081a76.  throw v0;
  #Try_start1.  
  #L081a78.  v0:= v8.`a.a.e.j.a` @type ^`a.a.e.d$b` @kind object;
  #L081a7c.  call `a`(v0, v11) @signature `La/a/e/d$b;.a:(Ljava/util/List;)V` @kind virtual;
  #L081a82.  v0:= v8.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L081a86.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L081a8c.  v2:= temp @kind wide;
  #L081a8e.  v0:= v8.`a.a.e.j.f` @type ^`int`;
  #L081a92.  v0:= v0 + -4;
  #L081a96.  v0:= (`long`) v0 @kind i2l;
  #L081a98.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L081a9e.  v0:= temp @kind wide;
  #L081aa0.  v1:= (`int`) v0 @kind l2i;
  #L081aa2.  v4:= 5I;
  #L081aa4.  v6:= (`long`) v1 @kind i2l;
  #L081aa6.  v0:= lcmp(v2, v6);
  #L081aaa.  if v0 != 0 then goto L081af6;
  #L081aae.  v0:= 4I;
  #L081ab0.  v5:= v1 + 4;
  #L081ab4.  call `a`(v8, v9, v5, v4, v0) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L081aba.  v0:= v8.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081abe.  v4:= 2147483647I;
  #L081ac4.  v4:= v4 ^& v10 @kind int;
  #L081ac6.  call temp:= `g`(v0, v4) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L081acc.  v0:= v8.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081ad0.  v4:= v8.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L081ad4.  v6:= (`long`) v1 @kind i2l;
  #L081ad6.  call `a_`(v0, v4, v6) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L081adc.  v4:= (`long`) v1 @kind i2l;
  #L081ade.  v0:= lcmp(v2, v4);
  #L081ae2.  if v0 <= 0 then goto L081af2;
  #L081ae6.  v0:= (`long`) v1 @kind i2l;
  #L081ae8.  v0:= v2 - v0 @kind long;
  #L081aec.  call `b`(v8, v9, v0) @signature `La/a/e/j;.b:(IJ)V` @kind direct;
  #Try_end1.  
  #L081af2.  @monitorexit v8
  #L081af4.  return @kind void;
  #L081af6.  v0:= 0I;
  #L081af8.  goto L081ab0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L081a72;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L081a72;
}
procedure `void` `a`(`a.a.e.j` v4 @kind this, `int` v5 , `long` v6 ) @signature `La/a/e/j;.a:(IJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L081b20.  @monitorenter v4
  #Try_start0.  
  #L081b22.  v0:= v4.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L081b26.  if v0 == 0 then goto L081b40;
  #L081b2a.  v0:= new `java.io.IOException`;
  #L081b2e.  v1:= "closed" @kind object;
  #L081b32.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081b38.  throw v0;
  #Try_end0.  
  #L081b3a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L081b3c.  @monitorexit v4
  #L081b3e.  throw v0;
  #L081b40.  v0:= 0L;
  #L081b44.  v0:= lcmp(v6, v0);
  #L081b48.  if v0 == 0 then goto L081b5a;
  #L081b4c.  v0:= 2147483647L;
  #L081b52.  v0:= lcmp(v6, v0);
  #L081b56.  if v0 <= 0 then goto L081b7c;
  #Try_start1.  
  #L081b5a.  v0:= "windowSizeIncrement == 0 || windowSizeIncrement > 0x7fffffffL: %s" @kind object;
  #L081b5e.  v1:= 1I;
  #L081b60.  v1:= new `java.lang.Object`[v1];
  #L081b64.  v2:= 0I;
  #L081b66.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L081b6c.  v3:= temp @kind object;
  #L081b6e.  v1[v2]:= v3 @kind object;
  #L081b72.  call temp:= `a`(v0, v1) @signature `La/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L081b78.  v0:= temp @kind object;
  #L081b7a.  throw v0;
  #L081b7c.  v0:= 4I;
  #L081b7e.  v1:= 8I;
  #L081b82.  v2:= 0I;
  #L081b84.  call `a`(v4, v5, v0, v1, v2) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L081b8a.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081b8e.  v1:= (`int`) v6 @kind l2i;
  #L081b90.  call temp:= `g`(v0, v1) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L081b96.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081b9a.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L081ba0.  @monitorexit v4
  #L081ba2.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L081b3a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L081b3a;
}
procedure `void` `a`(`a.a.e.j` v3 @kind this, `int` v4 , `a.a.e.b` v5 @kind object) @signature `La/a/e/j;.a:(ILa/a/e/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L081bc8.  @monitorenter v3
  #Try_start0.  
  #L081bca.  v0:= v3.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L081bce.  if v0 == 0 then goto L081be8;
  #L081bd2.  v0:= new `java.io.IOException`;
  #L081bd6.  v1:= "closed" @kind object;
  #L081bda.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081be0.  throw v0;
  #Try_end0.  
  #L081be2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L081be4.  @monitorexit v3
  #L081be6.  throw v0;
  #Try_start1.  
  #L081be8.  v0:= v5.`a.a.e.b.g` @type ^`int`;
  #L081bec.  v1:= -1I;
  #L081bee.  if v0 != v1 then goto L081bfe;
  #L081bf2.  v0:= new `java.lang.IllegalArgumentException`;
  #L081bf6.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L081bfc.  throw v0;
  #L081bfe.  v0:= 4I;
  #L081c00.  v1:= 3I;
  #L081c02.  v2:= 0I;
  #L081c04.  call `a`(v3, v4, v0, v1, v2) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L081c0a.  v0:= v3.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081c0e.  v1:= v5.`a.a.e.b.g` @type ^`int`;
  #L081c12.  call temp:= `g`(v0, v1) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L081c18.  v0:= v3.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081c1c.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L081c22.  @monitorexit v3
  #L081c24.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L081be2;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L081be2;
}
procedure `void` `a`(`a.a.e.j` v4 @kind this, `int` v5 , `a.a.e.b` v6 @kind object, `byte`[] v7 @kind object) @signature `La/a/e/j;.a:(ILa/a/e/b;[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L081c4c.  @monitorenter v4
  #Try_start0.  
  #L081c4e.  v0:= v4.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L081c52.  if v0 == 0 then goto L081c6c;
  #L081c56.  v0:= new `java.io.IOException`;
  #L081c5a.  v1:= "closed" @kind object;
  #L081c5e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081c64.  throw v0;
  #Try_end0.  
  #L081c66.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L081c68.  @monitorexit v4
  #L081c6a.  throw v0;
  #Try_start1.  
  #L081c6c.  v0:= v6.`a.a.e.b.g` @type ^`int`;
  #L081c70.  v1:= -1I;
  #L081c72.  if v0 != v1 then goto L081c8a;
  #L081c76.  v0:= "errorCode.httpCode == -1" @kind object;
  #L081c7a.  v1:= 0I;
  #L081c7c.  v1:= new `java.lang.Object`[v1];
  #L081c80.  call temp:= `a`(v0, v1) @signature `La/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L081c86.  v0:= temp @kind object;
  #L081c88.  throw v0;
  #L081c8a.  v0:= length @variable v7;
  #L081c8c.  v0:= v0 + 8;
  #L081c90.  v1:= 7I;
  #L081c92.  v2:= 0I;
  #L081c94.  v3:= 0I;
  #L081c96.  call `a`(v4, v3, v0, v1, v2) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L081c9c.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081ca0.  call temp:= `g`(v0, v5) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L081ca6.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081caa.  v1:= v6.`a.a.e.b.g` @type ^`int`;
  #L081cae.  call temp:= `g`(v0, v1) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L081cb4.  v0:= length @variable v7;
  #L081cb6.  if v0 <= 0 then goto L081cc4;
  #L081cba.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081cbe.  call temp:= `c`(v0, v7) @signature `Lb/d;.c:([B)Lb/d;` @kind interface;
  #L081cc4.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081cc8.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L081cce.  @monitorexit v4
  #L081cd0.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L081c66;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L081c66;
}
procedure `void` `a`(`a.a.e.j` v4 @kind this, `a.a.e.n` v5 @kind object) @signature `La/a/e/j;.a:(La/a/e/n;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L081cf8.  @monitorenter v4
  #Try_start0.  
  #L081cfa.  v0:= v4.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L081cfe.  if v0 == 0 then goto L081d18;
  #L081d02.  v0:= new `java.io.IOException`;
  #L081d06.  v1:= "closed" @kind object;
  #L081d0a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081d10.  throw v0;
  #Try_end0.  
  #L081d12.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L081d14.  @monitorexit v4
  #L081d16.  throw v0;
  #Try_start1.  
  #L081d18.  v0:= v4.`a.a.e.j.f` @type ^`int`;
  #L081d1c.  call temp:= `d`(v5, v0) @signature `La/a/e/n;.d:(I)I` @kind virtual;
  #L081d22.  v0:= temp;
  #L081d24.  v4.`a.a.e.j.f` @type ^`int` := v0;
  #L081d28.  call temp:= `c`(v5) @signature `La/a/e/n;.c:()I` @kind virtual;
  #L081d2e.  v0:= temp;
  #L081d30.  v1:= -1I;
  #L081d32.  if v0 == v1 then goto L081d48;
  #L081d36.  v0:= v4.`a.a.e.j.a` @type ^`a.a.e.d$b` @kind object;
  #L081d3a.  call temp:= `c`(v5) @signature `La/a/e/n;.c:()I` @kind virtual;
  #L081d40.  v1:= temp;
  #L081d42.  call `a`(v0, v1) @signature `La/a/e/d$b;.a:(I)V` @kind virtual;
  #L081d48.  v0:= 0I;
  #L081d4a.  v1:= 4I;
  #L081d4c.  v2:= 1I;
  #L081d4e.  v3:= 0I;
  #L081d50.  call `a`(v4, v3, v0, v1, v2) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L081d56.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081d5a.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L081d60.  @monitorexit v4
  #L081d62.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L081d12;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L081d12;
}
procedure `void` `a`(`a.a.e.j` v4 @kind this, `boolean` v5 , `int` v6 , `int` v7 ) @signature `La/a/e/j;.a:(ZII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L081d88.  v0:= 0I;
  #L081d8a.  @monitorenter v4
  #Try_start0.  
  #L081d8c.  v1:= v4.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L081d90.  if v1 == 0 then goto L081daa;
  #L081d94.  v0:= new `java.io.IOException`;
  #L081d98.  v1:= "closed" @kind object;
  #L081d9c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081da2.  throw v0;
  #Try_end0.  
  #L081da4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L081da6.  @monitorexit v4
  #L081da8.  throw v0;
  #L081daa.  v1:= 8I;
  #L081dae.  v2:= 6I;
  #L081db0.  if v5 == 0 then goto L081db6;
  #L081db4.  v0:= 1I;
  #L081db6.  v3:= 0I;
  #Try_start1.  
  #L081db8.  call `a`(v4, v3, v1, v2, v0) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L081dbe.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081dc2.  call temp:= `g`(v0, v6) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L081dc8.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081dcc.  call temp:= `g`(v0, v7) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L081dd2.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081dd6.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L081ddc.  @monitorexit v4
  #L081dde.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L081da4;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L081da4;
}
procedure `void` `a`(`a.a.e.j` v2 @kind this, `boolean` v3 , `int` v4 , `int` v5 , `java.util.List` v6 @kind object) @signature `La/a/e/j;.a:(ZIILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L081e04.  @monitorenter v2
  #Try_start0.  
  #L081e06.  v0:= v2.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L081e0a.  if v0 == 0 then goto L081e24;
  #L081e0e.  v0:= new `java.io.IOException`;
  #L081e12.  v1:= "closed" @kind object;
  #L081e16.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081e1c.  throw v0;
  #Try_end0.  
  #L081e1e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L081e20.  @monitorexit v2
  #L081e22.  throw v0;
  #Try_start1.  
  #L081e24.  call `a`(v2, v3, v4, v6) @signature `La/a/e/j;.a:(ZILjava/util/List;)V` @kind virtual;
  #Try_end1.  
  #L081e2a.  @monitorexit v2
  #L081e2c.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L081e1e;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L081e1e;
}
procedure `void` `a`(`a.a.e.j` v2 @kind this, `boolean` v3 , `int` v4 , `b.c` v5 @kind object, `int` v6 ) @signature `La/a/e/j;.a:(ZILb/c;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L081e54.  @monitorenter v2
  #Try_start0.  
  #L081e56.  v0:= v2.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L081e5a.  if v0 == 0 then goto L081e74;
  #L081e5e.  v0:= new `java.io.IOException`;
  #L081e62.  v1:= "closed" @kind object;
  #L081e66.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081e6c.  throw v0;
  #Try_end0.  
  #L081e6e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L081e70.  @monitorexit v2
  #L081e72.  throw v0;
  #L081e74.  v0:= 0I;
  #L081e76.  if v3 == 0 then goto L081e7e;
  #L081e7a.  v0:= 1I;
  #L081e7c.  v0:= (`byte`) v0 @kind i2b;
  #Try_start1.  
  #L081e7e.  call `a`(v2, v4, v0, v5, v6) @signature `La/a/e/j;.a:(IBLb/c;I)V` @kind virtual;
  #Try_end1.  
  #L081e84.  @monitorexit v2
  #L081e86.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L081e6e;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L081e6e;
}
procedure `void` `a`(`a.a.e.j` v8 @kind this, `boolean` v9 , `int` v10 , `java.util.List` v11 @kind object) @signature `La/a/e/j;.a:(ZILjava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L081eac.  v0:= v8.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L081eb0.  if v0 == 0 then goto L081ec4;
  #L081eb4.  v0:= new `java.io.IOException`;
  #L081eb8.  v1:= "closed" @kind object;
  #L081ebc.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081ec2.  throw v0;
  #L081ec4.  v0:= v8.`a.a.e.j.a` @type ^`a.a.e.d$b` @kind object;
  #L081ec8.  call `a`(v0, v11) @signature `La/a/e/d$b;.a:(Ljava/util/List;)V` @kind virtual;
  #L081ece.  v0:= v8.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L081ed2.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L081ed8.  v2:= temp @kind wide;
  #L081eda.  v0:= v8.`a.a.e.j.f` @type ^`int`;
  #L081ede.  v0:= (`long`) v0 @kind i2l;
  #L081ee0.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L081ee6.  v0:= temp @kind wide;
  #L081ee8.  v1:= (`int`) v0 @kind l2i;
  #L081eea.  v4:= 1I;
  #L081eec.  v6:= (`long`) v1 @kind i2l;
  #L081eee.  v0:= lcmp(v2, v6);
  #L081ef2.  if v0 != 0 then goto L081f30;
  #L081ef6.  v0:= 4I;
  #L081ef8.  if v9 == 0 then goto L081f02;
  #L081efc.  v0:= v0 ^| 1;
  #L081f00.  v0:= (`byte`) v0 @kind i2b;
  #L081f02.  call `a`(v8, v10, v1, v4, v0) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L081f08.  v0:= v8.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081f0c.  v4:= v8.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L081f10.  v6:= (`long`) v1 @kind i2l;
  #L081f12.  call `a_`(v0, v4, v6) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L081f18.  v4:= (`long`) v1 @kind i2l;
  #L081f1a.  v0:= lcmp(v2, v4);
  #L081f1e.  if v0 <= 0 then goto L081f2e;
  #L081f22.  v0:= (`long`) v1 @kind i2l;
  #L081f24.  v0:= v2 - v0 @kind long;
  #L081f28.  call `b`(v8, v10, v0) @signature `La/a/e/j;.b:(IJ)V` @kind direct;
  #L081f2e.  return @kind void;
  #L081f30.  v0:= 0I;
  #L081f32.  goto L081ef8;
}
procedure `void` `b`(`a.a.e.j` v2 @kind this) @signature `La/a/e/j;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L081f44.  @monitorenter v2
  #Try_start0.  
  #L081f46.  v0:= v2.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L081f4a.  if v0 == 0 then goto L081f64;
  #L081f4e.  v0:= new `java.io.IOException`;
  #L081f52.  v1:= "closed" @kind object;
  #L081f56.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081f5c.  throw v0;
  #Try_end0.  
  #L081f5e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L081f60.  @monitorexit v2
  #L081f62.  throw v0;
  #Try_start1.  
  #L081f64.  v0:= v2.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081f68.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L081f6e.  @monitorexit v2
  #L081f70.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L081f5e;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L081f5e;
}
procedure `void` `b`(`a.a.e.j` v6 @kind this, `a.a.e.n` v7 @kind object) @signature `La/a/e/j;.b:(La/a/e/n;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L081f98.  v1:= 4I;
  #L081f9a.  v2:= 0I;
  #L081f9c.  @monitorenter v6
  #Try_start0.  
  #L081f9e.  v0:= v6.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L081fa2.  if v0 == 0 then goto L081fbc;
  #L081fa6.  v0:= new `java.io.IOException`;
  #L081faa.  v1:= "closed" @kind object;
  #L081fae.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081fb4.  throw v0;
  #Try_end0.  
  #L081fb6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L081fb8.  @monitorexit v6
  #L081fba.  throw v0;
  #Try_start1.  
  #L081fbc.  call temp:= `b`(v7) @signature `La/a/e/n;.b:()I` @kind virtual;
  #L081fc2.  v0:= temp;
  #L081fc4.  v0:= v0 * 6;
  #L081fc8.  v3:= 4I;
  #L081fca.  v4:= 0I;
  #L081fcc.  v5:= 0I;
  #L081fce.  call `a`(v6, v5, v0, v3, v4) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L081fd4.  v0:= 10I;
  #L081fd8.  if v2 >= v0 then goto L08201c;
  #L081fdc.  call temp:= `a`(v7, v2) @signature `La/a/e/n;.a:(I)Z` @kind virtual;
  #L081fe2.  v0:= temp;
  #L081fe4.  if v0 != 0 then goto L081fee;
  #L081fe8.  v2:= v2 + 1;
  #L081fec.  goto L081fd4;
  #L081fee.  if v2 != v1 then goto L082012;
  #L081ff2.  v0:= 3I;
  #L081ff4.  v3:= v6.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081ff8.  call temp:= `h`(v3, v0) @signature `Lb/d;.h:(I)Lb/d;` @kind interface;
  #L081ffe.  v0:= v6.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L082002.  call temp:= `b`(v7, v2) @signature `La/a/e/n;.b:(I)I` @kind virtual;
  #L082008.  v3:= temp;
  #L08200a.  call temp:= `g`(v0, v3) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L082010.  goto L081fe8;
  #L082012.  v0:= 7I;
  #L082014.  if v2 != v0 then goto L08202a;
  #L082018.  v0:= v1;
  #L08201a.  goto L081ff4;
  #L08201c.  v0:= v6.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L082020.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L082026.  @monitorexit v6
  #L082028.  return @kind void;
  #L08202a.  v0:= v2;
  #L08202c.  goto L081ff4;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L081fb6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L081fb6;
}
procedure `int` `c`(`a.a.e.j` v1 @kind this) @signature `La/a/e/j;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L082054.  v0:= v1.`a.a.e.j.f` @type ^`int`;
  #L082058.  return v0;
}
procedure `void` `close`(`a.a.e.j` v1 @kind this) @signature `La/a/e/j;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08206c.  @monitorenter v1
  #L08206e.  v0:= 1I;
  #Try_start0.  
  #L082070.  v1.`a.a.e.j.g` @type ^`boolean` := v0 @kind boolean;
  #L082074.  v0:= v1.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L082078.  call `close`(v0) @signature `Lb/d;.close:()V` @kind interface;
  #Try_end0.  
  #L08207e.  @monitorexit v1
  #L082080.  return @kind void;
  #L082082.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L082084.  @monitorexit v1
  #L082086.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L082082;
}
