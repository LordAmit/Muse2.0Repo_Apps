record `a.a.g.d` @kind class @AccessFlag  {
  `java.lang.Class` `a.a.g.d.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.a.g.d.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `a.a.g.d.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.g.d` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `La/a/g/d;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L083db4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L083dba.  v0.`a.a.g.d.a` @type ^`java.lang.Class` := v1 @kind object;
  #L083dbe.  v0.`a.a.g.d.b` @type ^`java.lang.String` := v2 @kind object;
  #L083dc2.  v0.`a.a.g.d.c` @type ^`java.lang.Class`[] := v3 @kind object;
  #L083dc6.  return @kind void;
}
procedure `java.lang.reflect.Method` `a`(`a.a.g.d` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L083dd8.  v0:= 0I;
  #L083dda.  v1:= v4.`a.a.g.d.b` @type ^`java.lang.String` @kind object;
  #L083dde.  if v1 == 0 then goto L083e16;
  #L083de2.  v1:= v4.`a.a.g.d.b` @type ^`java.lang.String` @kind object;
  #L083de6.  v2:= v4.`a.a.g.d.c` @type ^`java.lang.Class`[] @kind object;
  #L083dea.  call temp:= `a`(v5, v1, v2) @signature `La/a/g/d;.a:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L083df0.  v1:= temp @kind object;
  #L083df2.  if v1 == 0 then goto L083e18;
  #L083df6.  v2:= v4.`a.a.g.d.a` @type ^`java.lang.Class` @kind object;
  #L083dfa.  if v2 == 0 then goto L083e18;
  #L083dfe.  v2:= v4.`a.a.g.d.a` @type ^`java.lang.Class` @kind object;
  #L083e02.  call temp:= `getReturnType`(v1) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L083e08.  v3:= temp @kind object;
  #L083e0a.  call temp:= `isAssignableFrom`(v2, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L083e10.  v2:= temp;
  #L083e12.  if v2 != 0 then goto L083e18;
  #L083e16.  return v0 @kind object;
  #L083e18.  v0:= v1 @kind object;
  #L083e1a.  goto L083e16;
}
procedure `java.lang.reflect.Method` `a`(`java.lang.Class` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.Class`[] v5 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L083e2c.  v0:= 0I;
  #Try_start0.  
  #L083e2e.  call temp:= `getMethod`(v3, v4, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #Try_end0.  
  #L083e34.  v1:= temp @kind object;
  #Try_start1.  
  #L083e36.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #Try_end1.  
  #L083e3c.  v2:= temp;
  #L083e3e.  v2:= v2 ^& 1;
  #L083e42.  if v2 != 0 then goto L083e52;
  #L083e46.  return v0 @kind object;
  #L083e48.  v1:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L083e4a.  goto L083e46;
  #L083e4c.  v0:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L083e4e.  v0:= v1 @kind object;
  #L083e50.  goto L083e46;
  #L083e52.  v0:= v1 @kind object;
  #L083e54.  goto L083e46;
  catch `java.lang.NoSuchMethodException` @[Try_start0..Try_end0] goto L083e48;
  catch `java.lang.NoSuchMethodException` @[Try_start1..Try_end1] goto L083e4c;
}
procedure `java.lang.Object` `a`(`a.a.g.d` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L083e84.  v0:= 0I;
  #L083e86.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L083e8c.  v1:= temp @kind object;
  #L083e8e.  call temp:= `a`(v2, v1) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L083e94.  v1:= temp @kind object;
  #L083e96.  if v1 != 0 then goto L083e9c;
  #L083e9a.  return v0 @kind object;
  #Try_start0.  
  #L083e9c.  call temp:= `invoke`(v1, v3, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L083ea2.  v0:= temp @kind object;
  #L083ea4.  goto L083e9a;
  #L083ea6.  v1:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L083ea8.  goto L083e9a;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L083ea6;
}
procedure `boolean` `a`(`a.a.g.d` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L083ecc.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L083ed2.  v0:= temp @kind object;
  #L083ed4.  call temp:= `a`(v1, v0) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L083eda.  v0:= temp @kind object;
  #L083edc.  if v0 == 0 then goto L083ee4;
  #L083ee0.  v0:= 1I;
  #L083ee2.  return v0;
  #L083ee4.  v0:= 0I;
  #L083ee6.  goto L083ee2;
}
procedure `java.lang.Object` `b`(`a.a.g.d` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `La/a/g/d;.b:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L083ef8.  call temp:= `a`(v3, v4, v5) @signature `La/a/g/d;.a:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L083efe.  v0:= temp @kind object;
  #L083f00.  return v0 @kind object;
  #L083f02.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L083f04.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L083f0a.  v0:= temp @kind object;
  #L083f0c.  v1:= instanceof @variable v0 @type ^`java.lang.RuntimeException` @kind boolean;
  #L083f10.  if v1 == 0 then goto L083f1a;
  #L083f14.  v0:= (`java.lang.RuntimeException`) v0 @kind object;
  #L083f18.  throw v0;
  #L083f1a.  v1:= new `java.lang.AssertionError`;
  #L083f1e.  v2:= "Unexpected exception" @kind object;
  #L083f22.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L083f28.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L083f2e.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L083f02;
}
procedure `java.lang.Object` `c`(`a.a.g.d` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Object`[] v7 @kind object) @signature `La/a/g/d;.c:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L083f50.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L083f56.  v0:= temp @kind object;
  #L083f58.  call temp:= `a`(v5, v0) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L083f5e.  v0:= temp @kind object;
  #L083f60.  if v0 != 0 then goto L083fae;
  #L083f64.  v0:= new `java.lang.AssertionError`;
  #L083f68.  v1:= new `java.lang.StringBuilder`;
  #L083f6c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L083f72.  v2:= "Method " @kind object;
  #L083f76.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083f7c.  v1:= temp @kind object;
  #L083f7e.  v2:= v5.`a.a.g.d.b` @type ^`java.lang.String` @kind object;
  #L083f82.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083f88.  v1:= temp @kind object;
  #L083f8a.  v2:= " not supported for object " @kind object;
  #L083f8e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083f94.  v1:= temp @kind object;
  #L083f96.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083f9c.  v1:= temp @kind object;
  #L083f9e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L083fa4.  v1:= temp @kind object;
  #L083fa6.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L083fac.  throw v0;
  #Try_start0.  
  #L083fae.  call temp:= `invoke`(v0, v6, v7) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L083fb4.  v0:= temp @kind object;
  #L083fb6.  return v0 @kind object;
  #L083fb8.  v1:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L083fba.  v2:= new `java.lang.AssertionError`;
  #L083fbe.  v3:= new `java.lang.StringBuilder`;
  #L083fc2.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L083fc8.  v4:= "Unexpectedly could not call: " @kind object;
  #L083fcc.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083fd2.  v3:= temp @kind object;
  #L083fd4.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083fda.  v0:= temp @kind object;
  #L083fdc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L083fe2.  v0:= temp @kind object;
  #L083fe4.  call `<init>`(v2, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L083fea.  call temp:= `initCause`(v2, v1) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L083ff0.  throw v2;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L083fb8;
}
procedure `java.lang.Object` `d`(`a.a.g.d` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `La/a/g/d;.d:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L084014.  call temp:= `c`(v3, v4, v5) @signature `La/a/g/d;.c:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L08401a.  v0:= temp @kind object;
  #L08401c.  return v0 @kind object;
  #L08401e.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L084020.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L084026.  v0:= temp @kind object;
  #L084028.  v1:= instanceof @variable v0 @type ^`java.lang.RuntimeException` @kind boolean;
  #L08402c.  if v1 == 0 then goto L084036;
  #L084030.  v0:= (`java.lang.RuntimeException`) v0 @kind object;
  #L084034.  throw v0;
  #L084036.  v1:= new `java.lang.AssertionError`;
  #L08403a.  v2:= "Unexpected exception" @kind object;
  #L08403e.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L084044.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L08404a.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L08401e;
}
