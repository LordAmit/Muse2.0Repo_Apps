record `a.a.g.c` @kind class @AccessFlag  extends `a.a.g.e` @kind class {
  `java.lang.reflect.Method` `a.a.g.c.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.g.c.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.g.c.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `a.a.g.c.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `a.a.g.c.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.g.c` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `La/a/g/c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L083ae4.  call `<init>`(v0) @signature `La/a/g/e;.<init>:()V` @kind direct;
  #L083aea.  v0.`a.a.g.c.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L083aee.  v0.`a.a.g.c.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L083af2.  v0.`a.a.g.c.c` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L083af6.  v0.`a.a.g.c.d` @type ^`java.lang.Class` := v4 @kind object;
  #L083afa.  v0.`a.a.g.c.e` @type ^`java.lang.Class` := v5 @kind object;
  #L083afe.  return @kind void;
}
procedure `a.a.g.e` `a`() @signature `La/a/g/c;.a:()La/a/g/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #Try_start0.  
  #L083b10.  v0:= "org.eclipse.jetty.alpn.ALPN" @kind object;
  #L083b14.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L083b1a.  v3:= temp @kind object;
  #L083b1c.  v1:= new `java.lang.StringBuilder`;
  #L083b20.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L083b26.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083b2c.  v1:= temp @kind object;
  #L083b2e.  v2:= "$Provider" @kind object;
  #L083b32.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083b38.  v1:= temp @kind object;
  #L083b3a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L083b40.  v1:= temp @kind object;
  #L083b42.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L083b48.  v1:= temp @kind object;
  #L083b4a.  v2:= new `java.lang.StringBuilder`;
  #L083b4e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L083b54.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083b5a.  v2:= temp @kind object;
  #L083b5c.  v4:= "$ClientProvider" @kind object;
  #L083b60.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083b66.  v2:= temp @kind object;
  #L083b68.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L083b6e.  v2:= temp @kind object;
  #L083b70.  call temp:= `forName`(v2) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L083b76.  v4:= temp @kind object;
  #L083b78.  v2:= new `java.lang.StringBuilder`;
  #L083b7c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L083b82.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083b88.  v0:= temp @kind object;
  #L083b8a.  v2:= "$ServerProvider" @kind object;
  #L083b8e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083b94.  v0:= temp @kind object;
  #L083b96.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L083b9c.  v0:= temp @kind object;
  #L083b9e.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L083ba4.  v5:= temp @kind object;
  #L083ba6.  v0:= "put" @kind object;
  #L083baa.  v2:= 2I;
  #L083bac.  v2:= new `java.lang.Class`[v2];
  #L083bb0.  v6:= 0I;
  #L083bb2.  v7:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L083bb6.  v2[v6]:= v7 @kind object;
  #L083bba.  v6:= 1I;
  #L083bbc.  v2[v6]:= v1 @kind object;
  #L083bc0.  call temp:= `getMethod`(v3, v0, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L083bc6.  v1:= temp @kind object;
  #L083bc8.  v0:= "get" @kind object;
  #L083bcc.  v2:= 1I;
  #L083bce.  v2:= new `java.lang.Class`[v2];
  #L083bd2.  v6:= 0I;
  #L083bd4.  v7:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L083bd8.  v2[v6]:= v7 @kind object;
  #L083bdc.  call temp:= `getMethod`(v3, v0, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L083be2.  v2:= temp @kind object;
  #L083be4.  v0:= "remove" @kind object;
  #L083be8.  v6:= 1I;
  #L083bea.  v6:= new `java.lang.Class`[v6];
  #L083bee.  v7:= 0I;
  #L083bf0.  v8:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L083bf4.  v6[v7]:= v8 @kind object;
  #L083bf8.  call temp:= `getMethod`(v3, v0, v6) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L083bfe.  v3:= temp @kind object;
  #L083c00.  v0:= new `a.a.g.c`;
  #L083c04.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `La/a/g/c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Class;)V` @kind direct;
  #Try_end0.  
  #L083c0a.  return v0 @kind object;
  #L083c0c.  v0:= Exception @type ^`java.lang.ClassNotFoundException` @kind object;
  #L083c0e.  v0:= 0I;
  #L083c10.  goto L083c0a;
  #L083c12.  v0:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L083c14.  goto L083c0e;
  catch `java.lang.ClassNotFoundException` @[Try_start0..Try_end0] goto L083c0c;
  catch `java.lang.NoSuchMethodException` @[Try_start0..Try_end0] goto L083c12;
}
procedure `java.lang.String` `a`(`a.a.g.c` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object) @signature `La/a/g/c;.a:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L083c3c.  v1:= 0I;
  #Try_start0.  
  #L083c3e.  v0:= v5.`a.a.g.c.b` @type ^`java.lang.reflect.Method` @kind object;
  #L083c42.  v2:= 0I;
  #L083c44.  v3:= 1I;
  #L083c46.  v3:= new `java.lang.Object`[v3];
  #L083c4a.  v4:= 0I;
  #L083c4c.  v3[v4]:= v6 @kind object;
  #L083c50.  call temp:= `invoke`(v0, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L083c56.  v0:= temp @kind object;
  #L083c58.  call temp:= `getInvocationHandler`(v0) @signature `Ljava/lang/reflect/Proxy;.getInvocationHandler:(Ljava/lang/Object;)Ljava/lang/reflect/InvocationHandler;` @kind static;
  #L083c5e.  v0:= temp @kind object;
  #L083c60.  v0:= (`a.a.g.c$a`) v0 @kind object;
  #L083c64.  v2:= v0.`a.a.g.c$a.a` @type ^`boolean` @kind boolean;
  #L083c68.  if v2 != 0 then goto L083c8c;
  #L083c6c.  v2:= v0.`a.a.g.c$a.b` @type ^`java.lang.String` @kind object;
  #L083c70.  if v2 != 0 then goto L083c8c;
  #L083c74.  call temp:= `b`() @signature `La/a/g/e;.b:()La/a/g/e;` @kind static;
  #L083c7a.  v0:= temp @kind object;
  #L083c7c.  v2:= 4I;
  #L083c7e.  v3:= "ALPN callback dropped: HTTP/2 is disabled. Is alpn-boot on the boot class path?" @kind object;
  #L083c82.  v4:= 0I;
  #L083c84.  call `a`(v0, v2, v3, v4) @signature `La/a/g/e;.a:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L083c8a.  return v1 @kind object;
  #L083c8c.  v2:= v0.`a.a.g.c$a.a` @type ^`boolean` @kind boolean;
  #L083c90.  if v2 == 0 then goto L083c9a;
  #L083c94.  v0:= v1 @kind object;
  #L083c96.  v1:= v0 @kind object;
  #L083c98.  goto L083c8a;
  #L083c9a.  v0:= v0.`a.a.g.c$a.b` @type ^`java.lang.String` @kind object;
  #Try_end0.  
  #L083c9e.  goto L083c96;
  #L083ca0.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L083ca2.  v0:= new `java.lang.AssertionError`;
  #L083ca6.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L083cac.  throw v0;
  #L083cae.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L083cb0.  goto L083ca2;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L083cae;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L083ca0;
}
procedure `void` `a`(`a.a.g.c` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object, `java.lang.String` v7 @kind object, `java.util.List` v8 @kind object) @signature `La/a/g/c;.a:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L083cd4.  call temp:= `a`(v8) @signature `La/a/g/c;.a:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L083cda.  v0:= temp @kind object;
  #Try_start0.  
  #L083cdc.  v1:= constclass @type ^`a.a.g.e` @kind object;
  #L083ce0.  call temp:= `getClassLoader`(v1) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L083ce6.  v1:= temp @kind object;
  #L083ce8.  v2:= 2I;
  #L083cea.  v2:= new `java.lang.Class`[v2];
  #L083cee.  v3:= 0I;
  #L083cf0.  v4:= v5.`a.a.g.c.d` @type ^`java.lang.Class` @kind object;
  #L083cf4.  v2[v3]:= v4 @kind object;
  #L083cf8.  v3:= 1I;
  #L083cfa.  v4:= v5.`a.a.g.c.e` @type ^`java.lang.Class` @kind object;
  #L083cfe.  v2[v3]:= v4 @kind object;
  #L083d02.  v3:= new `a.a.g.c$a`;
  #L083d06.  call `<init>`(v3, v0) @signature `La/a/g/c$a;.<init>:(Ljava/util/List;)V` @kind direct;
  #L083d0c.  call temp:= `newProxyInstance`(v1, v2, v3) @signature `Ljava/lang/reflect/Proxy;.newProxyInstance:(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;` @kind static;
  #L083d12.  v0:= temp @kind object;
  #L083d14.  v1:= v5.`a.a.g.c.a` @type ^`java.lang.reflect.Method` @kind object;
  #L083d18.  v2:= 0I;
  #L083d1a.  v3:= 2I;
  #L083d1c.  v3:= new `java.lang.Object`[v3];
  #L083d20.  v4:= 0I;
  #L083d22.  v3[v4]:= v6 @kind object;
  #L083d26.  v4:= 1I;
  #L083d28.  v3[v4]:= v0 @kind object;
  #L083d2c.  call temp:= `invoke`(v1, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L083d32.  return @kind void;
  #L083d34.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L083d36.  v1:= new `java.lang.AssertionError`;
  #L083d3a.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L083d40.  throw v1;
  #L083d42.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L083d44.  goto L083d36;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L083d42;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L083d34;
}
procedure `void` `b`(`a.a.g.c` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `La/a/g/c;.b:(Ljavax/net/ssl/SSLSocket;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L083d68.  v0:= v4.`a.a.g.c.c` @type ^`java.lang.reflect.Method` @kind object;
  #L083d6c.  v1:= 0I;
  #L083d6e.  v2:= 1I;
  #L083d70.  v2:= new `java.lang.Object`[v2];
  #L083d74.  v3:= 0I;
  #L083d76.  v2[v3]:= v5 @kind object;
  #L083d7a.  call temp:= `invoke`(v0, v1, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L083d80.  return @kind void;
  #L083d82.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L083d84.  v0:= new `java.lang.AssertionError`;
  #L083d88.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L083d8e.  throw v0;
  #L083d90.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L083d92.  goto L083d84;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L083d82;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L083d90;
}
