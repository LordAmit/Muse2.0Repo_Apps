record `a.a.d.a$d` @kind class @AccessFlag FINAL extends `b.q` @kind interface {
  `a.a.d.a` `a.a.d.a$d.a` @AccessFlag FINAL_SYNTHETIC;
  `b.h` `a.a.d.a$d.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.a.d.a$d.c` @AccessFlag PRIVATE;
  `long` `a.a.d.a$d.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$d` v2 @kind this, `a.a.d.a` v3 @kind object, `long` v4 ) @signature `La/a/d/a$d;.<init>:(La/a/d/a;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07b274.  v2.`a.a.d.a$d.a` @type ^`a.a.d.a` := v3 @kind object;
  #L07b278.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07b27e.  v0:= new `b.h`;
  #L07b282.  v1:= v2.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L07b286.  v1:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07b28a.  call temp:= `a`(v1) @signature `Lb/d;.a:()Lb/s;` @kind interface;
  #L07b290.  v1:= temp @kind object;
  #L07b292.  call `<init>`(v0, v1) @signature `Lb/h;.<init>:(Lb/s;)V` @kind direct;
  #L07b298.  v2.`a.a.d.a$d.b` @type ^`b.h` := v0 @kind object;
  #L07b29c.  v2.`a.a.d.a$d.d` @type ^`long` := v4 @kind wide;
  #L07b2a0.  return @kind void;
}
procedure `b.s` `a`(`a.a.d.a$d` v1 @kind this) @signature `La/a/d/a$d;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07b2b4.  v0:= v1.`a.a.d.a$d.b` @type ^`b.h` @kind object;
  #L07b2b8.  return v0 @kind object;
}
procedure `void` `a_`(`a.a.d.a$d` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `La/a/d/a$d;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07b2cc.  v0:= v6.`a.a.d.a$d.c` @type ^`boolean` @kind boolean;
  #L07b2d0.  if v0 == 0 then goto L07b2e4;
  #L07b2d4.  v0:= new `java.lang.IllegalStateException`;
  #L07b2d8.  v1:= "closed" @kind object;
  #L07b2dc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b2e2.  throw v0;
  #L07b2e4.  call temp:= `b`(v7) @signature `Lb/c;.b:()J` @kind virtual;
  #L07b2ea.  v0:= temp @kind wide;
  #L07b2ec.  v2:= 0L;
  #L07b2f0.  v4:= v8 @kind wide;
  #L07b2f2.  call `a`(v0, v2, v4) @signature `La/a/c;.a:(JJJ)V` @kind static;
  #L07b2f8.  v0:= v6.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L07b2fc.  v0:= lcmp(v8, v0);
  #L07b300.  if v0 <= 0 then goto L07b34e;
  #L07b304.  v0:= new `java.net.ProtocolException`;
  #L07b308.  v1:= new `java.lang.StringBuilder`;
  #L07b30c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07b312.  v2:= "expected " @kind object;
  #L07b316.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b31c.  v1:= temp @kind object;
  #L07b31e.  v2:= v6.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L07b322.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b328.  v1:= temp @kind object;
  #L07b32a.  v2:= " bytes but received " @kind object;
  #L07b32e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b334.  v1:= temp @kind object;
  #L07b336.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b33c.  v1:= temp @kind object;
  #L07b33e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07b344.  v1:= temp @kind object;
  #L07b346.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b34c.  throw v0;
  #L07b34e.  v0:= v6.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L07b352.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07b356.  call `a_`(v0, v7, v8) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L07b35c.  v0:= v6.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L07b360.  v0:= v0 - v8 @kind long;
  #L07b362.  v6.`a.a.d.a$d.d` @type ^`long` := v0 @kind wide;
  #L07b366.  return @kind void;
}
procedure `void` `close`(`a.a.d.a$d` v4 @kind this) @signature `La/a/d/a$d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07b378.  v0:= v4.`a.a.d.a$d.c` @type ^`boolean` @kind boolean;
  #L07b37c.  if v0 == 0 then goto L07b382;
  #L07b380.  return @kind void;
  #L07b382.  v0:= 1I;
  #L07b384.  v4.`a.a.d.a$d.c` @type ^`boolean` := v0 @kind boolean;
  #L07b388.  v0:= v4.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L07b38c.  v2:= 0L;
  #L07b390.  v0:= lcmp(v0, v2);
  #L07b394.  if v0 <= 0 then goto L07b3a8;
  #L07b398.  v0:= new `java.net.ProtocolException`;
  #L07b39c.  v1:= "unexpected end of stream" @kind object;
  #L07b3a0.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b3a6.  throw v0;
  #L07b3a8.  v0:= v4.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L07b3ac.  v1:= v4.`a.a.d.a$d.b` @type ^`b.h` @kind object;
  #L07b3b0.  call `a`(v0, v1) @signature `La/a/d/a;.a:(Lb/h;)V` @kind virtual;
  #L07b3b6.  v0:= v4.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L07b3ba.  v1:= 3I;
  #L07b3bc.  v0.`a.a.d.a.e` @type ^`int` := v1;
  #L07b3c0.  goto L07b380;
}
procedure `void` `flush`(`a.a.d.a$d` v1 @kind this) @signature `La/a/d/a$d;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07b3d4.  v0:= v1.`a.a.d.a$d.c` @type ^`boolean` @kind boolean;
  #L07b3d8.  if v0 == 0 then goto L07b3de;
  #L07b3dc.  return @kind void;
  #L07b3de.  v0:= v1.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L07b3e2.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07b3e6.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L07b3ec.  goto L07b3dc;
}
