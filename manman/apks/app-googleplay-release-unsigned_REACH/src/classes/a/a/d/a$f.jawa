record `a.a.d.a$f` @kind class @AccessFlag  extends `a.a.d.a$a` @kind class {
  `a.a.d.a` `a.a.d.a$f.d` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `a.a.d.a$f.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$f` v1 @kind this, `a.a.d.a` v2 @kind object) @signature `La/a/d/a$f;.<init>:(La/a/d/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L07b564.  v1.`a.a.d.a$f.d` @type ^`a.a.d.a` := v2 @kind object;
  #L07b568.  v0:= 0I;
  #L07b56a.  call `<init>`(v1, v2, v0) @signature `La/a/d/a$a;.<init>:(La/a/d/a;La/a/d/a$1;)V` @kind direct;
  #L07b570.  return @kind void;
}
procedure `long` `a`(`a.a.d.a$f` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `La/a/d/a$f;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07b584.  v5:= 1I;
  #L07b586.  v0:= -1L;
  #L07b58a.  v2:= 0L;
  #L07b58e.  v2:= lcmp(v8, v2);
  #L07b592.  if v2 >= 0 then goto L07b5c8;
  #L07b596.  v0:= new `java.lang.IllegalArgumentException`;
  #L07b59a.  v1:= new `java.lang.StringBuilder`;
  #L07b59e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07b5a4.  v2:= "byteCount < 0: " @kind object;
  #L07b5a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b5ae.  v1:= temp @kind object;
  #L07b5b0.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b5b6.  v1:= temp @kind object;
  #L07b5b8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07b5be.  v1:= temp @kind object;
  #L07b5c0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b5c6.  throw v0;
  #L07b5c8.  v2:= v6.`a.a.d.a$f.b` @type ^`boolean` @kind boolean;
  #L07b5cc.  if v2 == 0 then goto L07b5e0;
  #L07b5d0.  v0:= new `java.lang.IllegalStateException`;
  #L07b5d4.  v1:= "closed" @kind object;
  #L07b5d8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b5de.  throw v0;
  #L07b5e0.  v2:= v6.`a.a.d.a$f.e` @type ^`boolean` @kind boolean;
  #L07b5e4.  if v2 == 0 then goto L07b5ea;
  #L07b5e8.  return v0 @kind wide;
  #L07b5ea.  v2:= v6.`a.a.d.a$f.d` @type ^`a.a.d.a` @kind object;
  #L07b5ee.  v2:= v2.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07b5f2.  call temp:= `a`(v2, v7, v8) @signature `Lb/e;.a:(Lb/c;J)J` @kind interface;
  #L07b5f8.  v2:= temp @kind wide;
  #L07b5fa.  v4:= lcmp(v2, v0);
  #L07b5fe.  if v4 != 0 then goto L07b60e;
  #L07b602.  v6.`a.a.d.a$f.e` @type ^`boolean` := v5 @kind boolean;
  #L07b606.  call `a`(v6, v5) @signature `La/a/d/a$f;.a:(Z)V` @kind virtual;
  #L07b60c.  goto L07b5e8;
  #L07b60e.  v0:= v2 @kind wide;
  #L07b610.  goto L07b5e8;
}
procedure `void` `close`(`a.a.d.a$f` v1 @kind this) @signature `La/a/d/a$f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07b624.  v0:= v1.`a.a.d.a$f.b` @type ^`boolean` @kind boolean;
  #L07b628.  if v0 == 0 then goto L07b62e;
  #L07b62c.  return @kind void;
  #L07b62e.  v0:= v1.`a.a.d.a$f.e` @type ^`boolean` @kind boolean;
  #L07b632.  if v0 != 0 then goto L07b63e;
  #L07b636.  v0:= 0I;
  #L07b638.  call `a`(v1, v0) @signature `La/a/d/a$f;.a:(Z)V` @kind virtual;
  #L07b63e.  v0:= 1I;
  #L07b640.  v1.`a.a.d.a$f.b` @type ^`boolean` := v0 @kind boolean;
  #L07b644.  goto L07b62c;
}
