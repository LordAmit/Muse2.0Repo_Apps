record `a.a.d.a` @kind class @AccessFlag PUBLIC_FINAL extends `a.a.c.c` @kind interface {
  `a.u` `a.a.d.a.a` @AccessFlag FINAL;
  `a.a.b.g` `a.a.d.a.b` @AccessFlag FINAL;
  `b.e` `a.a.d.a.c` @AccessFlag FINAL;
  `b.d` `a.a.d.a.d` @AccessFlag FINAL;
  `int` `a.a.d.a.e` @AccessFlag ;
}
procedure `void` `<init>`(`a.a.d.a` v1 @kind this, `a.u` v2 @kind object, `a.a.b.g` v3 @kind object, `b.e` v4 @kind object, `b.d` v5 @kind object) @signature `La/a/d/a;.<init>:(La/u;La/a/b/g;Lb/e;Lb/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L07b658.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07b65e.  v0:= 0I;
  #L07b660.  v1.`a.a.d.a.e` @type ^`int` := v0;
  #L07b664.  v1.`a.a.d.a.a` @type ^`a.u` := v2 @kind object;
  #L07b668.  v1.`a.a.d.a.b` @type ^`a.a.b.g` := v3 @kind object;
  #L07b66c.  v1.`a.a.d.a.c` @type ^`b.e` := v4 @kind object;
  #L07b670.  v1.`a.a.d.a.d` @type ^`b.d` := v5 @kind object;
  #L07b674.  return @kind void;
}
procedure `b.r` `b`(`a.a.d.a` v4 @kind this, `a.z` v5 @kind object) @signature `La/a/d/a;.b:(La/z;)Lb/r;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07b688.  call temp:= `b`(v5) @signature `La/a/c/e;.b:(La/z;)Z` @kind static;
  #L07b68e.  v0:= temp;
  #L07b690.  if v0 != 0 then goto L07b6a2;
  #L07b694.  v0:= 0L;
  #L07b698.  call temp:= `b`(v4, v0) @signature `La/a/d/a;.b:(J)Lb/r;` @kind virtual;
  #L07b69e.  v0:= temp @kind object;
  #L07b6a0.  return v0 @kind object;
  #L07b6a2.  v0:= "chunked" @kind object;
  #L07b6a6.  v1:= "Transfer-Encoding" @kind object;
  #L07b6aa.  call temp:= `a`(v5, v1) @signature `La/z;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L07b6b0.  v1:= temp @kind object;
  #L07b6b2.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L07b6b8.  v0:= temp;
  #L07b6ba.  if v0 == 0 then goto L07b6d8;
  #L07b6be.  call temp:= `a`(v5) @signature `La/z;.a:()La/x;` @kind virtual;
  #L07b6c4.  v0:= temp @kind object;
  #L07b6c6.  call temp:= `a`(v0) @signature `La/x;.a:()La/r;` @kind virtual;
  #L07b6cc.  v0:= temp @kind object;
  #L07b6ce.  call temp:= `a`(v4, v0) @signature `La/a/d/a;.a:(La/r;)Lb/r;` @kind virtual;
  #L07b6d4.  v0:= temp @kind object;
  #L07b6d6.  goto L07b6a0;
  #L07b6d8.  call temp:= `a`(v5) @signature `La/a/c/e;.a:(La/z;)J` @kind static;
  #L07b6de.  v0:= temp @kind wide;
  #L07b6e0.  v2:= -1L;
  #L07b6e4.  v2:= lcmp(v0, v2);
  #L07b6e8.  if v2 == 0 then goto L07b6f6;
  #L07b6ec.  call temp:= `b`(v4, v0) @signature `La/a/d/a;.b:(J)Lb/r;` @kind virtual;
  #L07b6f2.  v0:= temp @kind object;
  #L07b6f4.  goto L07b6a0;
  #L07b6f6.  call temp:= `e`(v4) @signature `La/a/d/a;.e:()Lb/r;` @kind virtual;
  #L07b6fc.  v0:= temp @kind object;
  #L07b6fe.  goto L07b6a0;
}
procedure `a.aa` `a`(`a.a.d.a` v3 @kind this, `a.z` v4 @kind object) @signature `La/a/d/a;.a:(La/z;)La/aa;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07b710.  call temp:= `b`(v3, v4) @signature `La/a/d/a;.b:(La/z;)Lb/r;` @kind direct;
  #L07b716.  v0:= temp @kind object;
  #L07b718.  v1:= new `a.a.c.h`;
  #L07b71c.  call temp:= `e`(v4) @signature `La/z;.e:()La/q;` @kind virtual;
  #L07b722.  v2:= temp @kind object;
  #L07b724.  call temp:= `a`(v0) @signature `Lb/k;.a:(Lb/r;)Lb/e;` @kind static;
  #L07b72a.  v0:= temp @kind object;
  #L07b72c.  call `<init>`(v1, v2, v0) @signature `La/a/c/h;.<init>:(La/q;Lb/e;)V` @kind direct;
  #L07b732.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.a.d.a` v4 @kind this, `boolean` v5 ) @signature `La/a/d/a;.a:(Z)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07b744.  v0:= v4.`a.a.d.a.e` @type ^`int`;
  #L07b748.  v1:= 1I;
  #L07b74a.  if v0 == v1 then goto L07b78e;
  #L07b74e.  v0:= v4.`a.a.d.a.e` @type ^`int`;
  #L07b752.  v1:= 3I;
  #L07b754.  if v0 == v1 then goto L07b78e;
  #L07b758.  v0:= new `java.lang.IllegalStateException`;
  #L07b75c.  v1:= new `java.lang.StringBuilder`;
  #L07b760.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07b766.  v2:= "state: " @kind object;
  #L07b76a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b770.  v1:= temp @kind object;
  #L07b772.  v2:= v4.`a.a.d.a.e` @type ^`int`;
  #L07b776.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b77c.  v1:= temp @kind object;
  #L07b77e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07b784.  v1:= temp @kind object;
  #L07b786.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b78c.  throw v0;
  #Try_start0.  
  #L07b78e.  v0:= v4.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07b792.  call temp:= `p`(v0) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #L07b798.  v0:= temp @kind object;
  #L07b79a.  call temp:= `a`(v0) @signature `La/a/c/k;.a:(Ljava/lang/String;)La/a/c/k;` @kind static;
  #L07b7a0.  v1:= temp @kind object;
  #L07b7a2.  v0:= new `a.z$a`;
  #L07b7a6.  call `<init>`(v0) @signature `La/z$a;.<init>:()V` @kind direct;
  #L07b7ac.  v2:= v1.`a.a.c.k.a` @type ^`a.v` @kind object;
  #L07b7b0.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(La/v;)La/z$a;` @kind virtual;
  #L07b7b6.  v0:= temp @kind object;
  #L07b7b8.  v2:= v1.`a.a.c.k.b` @type ^`int`;
  #L07b7bc.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(I)La/z$a;` @kind virtual;
  #L07b7c2.  v0:= temp @kind object;
  #L07b7c4.  v2:= v1.`a.a.c.k.c` @type ^`java.lang.String` @kind object;
  #L07b7c8.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(Ljava/lang/String;)La/z$a;` @kind virtual;
  #L07b7ce.  v0:= temp @kind object;
  #L07b7d0.  call temp:= `c`(v4) @signature `La/a/d/a;.c:()La/q;` @kind virtual;
  #L07b7d6.  v2:= temp @kind object;
  #L07b7d8.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(La/q;)La/z$a;` @kind virtual;
  #L07b7de.  v0:= temp @kind object;
  #L07b7e0.  if v5 == 0 then goto L07b7f4;
  #L07b7e4.  v1:= v1.`a.a.c.k.b` @type ^`int`;
  #L07b7e8.  v2:= 100I;
  #L07b7ec.  if v1 != v2 then goto L07b7f4;
  #L07b7f0.  v0:= 0I;
  #L07b7f2.  return v0 @kind object;
  #L07b7f4.  v1:= 4I;
  #L07b7f6.  v4.`a.a.d.a.e` @type ^`int` := v1;
  #Try_end0.  
  #L07b7fa.  goto L07b7f2;
  #L07b7fc.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L07b7fe.  v1:= new `java.io.IOException`;
  #L07b802.  v2:= new `java.lang.StringBuilder`;
  #L07b806.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07b80c.  v3:= "unexpected end of stream on " @kind object;
  #L07b810.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b816.  v2:= temp @kind object;
  #L07b818.  v3:= v4.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L07b81c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b822.  v2:= temp @kind object;
  #L07b824.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07b82a.  v2:= temp @kind object;
  #L07b82c.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b832.  call temp:= `initCause`(v1, v0) @signature `Ljava/io/IOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L07b838.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L07b7fc;
}
procedure `b.q` `a`(`a.a.d.a` v3 @kind this, `long` v4 ) @signature `La/a/d/a;.a:(J)Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07b85c.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L07b860.  v1:= 1I;
  #L07b862.  if v0 == v1 then goto L07b89c;
  #L07b866.  v0:= new `java.lang.IllegalStateException`;
  #L07b86a.  v1:= new `java.lang.StringBuilder`;
  #L07b86e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07b874.  v2:= "state: " @kind object;
  #L07b878.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b87e.  v1:= temp @kind object;
  #L07b880.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L07b884.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b88a.  v1:= temp @kind object;
  #L07b88c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07b892.  v1:= temp @kind object;
  #L07b894.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b89a.  throw v0;
  #L07b89c.  v0:= 2I;
  #L07b89e.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L07b8a2.  v0:= new `a.a.d.a$d`;
  #L07b8a6.  call `<init>`(v0, v3, v4) @signature `La/a/d/a$d;.<init>:(La/a/d/a;J)V` @kind direct;
  #L07b8ac.  return v0 @kind object;
}
procedure `b.q` `a`(`a.a.d.a` v2 @kind this, `a.x` v3 @kind object, `long` v4 ) @signature `La/a/d/a;.a:(La/x;J)Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07b8c0.  v0:= "chunked" @kind object;
  #L07b8c4.  v1:= "Transfer-Encoding" @kind object;
  #L07b8c8.  call temp:= `a`(v3, v1) @signature `La/x;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L07b8ce.  v1:= temp @kind object;
  #L07b8d0.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L07b8d6.  v0:= temp;
  #L07b8d8.  if v0 == 0 then goto L07b8e6;
  #L07b8dc.  call temp:= `d`(v2) @signature `La/a/d/a;.d:()Lb/q;` @kind virtual;
  #L07b8e2.  v0:= temp @kind object;
  #L07b8e4.  return v0 @kind object;
  #L07b8e6.  v0:= -1L;
  #L07b8ea.  v0:= lcmp(v4, v0);
  #L07b8ee.  if v0 == 0 then goto L07b8fc;
  #L07b8f2.  call temp:= `a`(v2, v4) @signature `La/a/d/a;.a:(J)Lb/q;` @kind virtual;
  #L07b8f8.  v0:= temp @kind object;
  #L07b8fa.  goto L07b8e4;
  #L07b8fc.  v0:= new `java.lang.IllegalStateException`;
  #L07b900.  v1:= "Cannot stream a request body without chunked encoding or a known content length!" @kind object;
  #L07b904.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b90a.  throw v0;
}
procedure `b.r` `a`(`a.a.d.a` v3 @kind this, `a.r` v4 @kind object) @signature `La/a/d/a;.a:(La/r;)Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07b91c.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L07b920.  v1:= 4I;
  #L07b922.  if v0 == v1 then goto L07b95c;
  #L07b926.  v0:= new `java.lang.IllegalStateException`;
  #L07b92a.  v1:= new `java.lang.StringBuilder`;
  #L07b92e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07b934.  v2:= "state: " @kind object;
  #L07b938.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b93e.  v1:= temp @kind object;
  #L07b940.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L07b944.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b94a.  v1:= temp @kind object;
  #L07b94c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07b952.  v1:= temp @kind object;
  #L07b954.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b95a.  throw v0;
  #L07b95c.  v0:= 5I;
  #L07b95e.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L07b962.  v0:= new `a.a.d.a$c`;
  #L07b966.  call `<init>`(v0, v3, v4) @signature `La/a/d/a$c;.<init>:(La/a/d/a;La/r;)V` @kind direct;
  #L07b96c.  return v0 @kind object;
}
procedure `void` `a`(`a.a.d.a` v1 @kind this) @signature `La/a/d/a;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07b980.  v0:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07b984.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L07b98a.  return @kind void;
}
procedure `void` `a`(`a.a.d.a` v4 @kind this, `a.q` v5 @kind object, `java.lang.String` v6 @kind object) @signature `La/a/d/a;.a:(La/q;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07b99c.  v0:= v4.`a.a.d.a.e` @type ^`int`;
  #L07b9a0.  if v0 == 0 then goto L07b9da;
  #L07b9a4.  v0:= new `java.lang.IllegalStateException`;
  #L07b9a8.  v1:= new `java.lang.StringBuilder`;
  #L07b9ac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07b9b2.  v2:= "state: " @kind object;
  #L07b9b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b9bc.  v1:= temp @kind object;
  #L07b9be.  v2:= v4.`a.a.d.a.e` @type ^`int`;
  #L07b9c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b9c8.  v1:= temp @kind object;
  #L07b9ca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07b9d0.  v1:= temp @kind object;
  #L07b9d2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b9d8.  throw v0;
  #L07b9da.  v0:= v4.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07b9de.  call temp:= `b`(v0, v6) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07b9e4.  v0:= temp @kind object;
  #L07b9e6.  v1:= "\r\n" @kind object;
  #L07b9ea.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07b9f0.  v0:= 0I;
  #L07b9f2.  call temp:= `a`(v5) @signature `La/q;.a:()I` @kind virtual;
  #L07b9f8.  v1:= temp;
  #L07b9fa.  if v0 >= v1 then goto L07ba3e;
  #L07b9fe.  v2:= v4.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07ba02.  call temp:= `a`(v5, v0) @signature `La/q;.a:(I)Ljava/lang/String;` @kind virtual;
  #L07ba08.  v3:= temp @kind object;
  #L07ba0a.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07ba10.  v2:= temp @kind object;
  #L07ba12.  v3:= ": " @kind object;
  #L07ba16.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07ba1c.  v2:= temp @kind object;
  #L07ba1e.  call temp:= `b`(v5, v0) @signature `La/q;.b:(I)Ljava/lang/String;` @kind virtual;
  #L07ba24.  v3:= temp @kind object;
  #L07ba26.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07ba2c.  v2:= temp @kind object;
  #L07ba2e.  v3:= "\r\n" @kind object;
  #L07ba32.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07ba38.  v0:= v0 + 1;
  #L07ba3c.  goto L07b9fa;
  #L07ba3e.  v0:= v4.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07ba42.  v1:= "\r\n" @kind object;
  #L07ba46.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07ba4c.  v0:= 1I;
  #L07ba4e.  v4.`a.a.d.a.e` @type ^`int` := v0;
  #L07ba52.  return @kind void;
}
procedure `void` `a`(`a.a.d.a` v2 @kind this, `a.x` v3 @kind object) @signature `La/a/d/a;.a:(La/x;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07ba64.  v0:= v2.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L07ba68.  call temp:= `b`(v0) @signature `La/a/b/g;.b:()La/a/b/c;` @kind virtual;
  #L07ba6e.  v0:= temp @kind object;
  #L07ba70.  call temp:= `a`(v0) @signature `La/a/b/c;.a:()La/ab;` @kind virtual;
  #L07ba76.  v0:= temp @kind object;
  #L07ba78.  call temp:= `b`(v0) @signature `La/ab;.b:()Ljava/net/Proxy;` @kind virtual;
  #L07ba7e.  v0:= temp @kind object;
  #L07ba80.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L07ba86.  v0:= temp @kind object;
  #L07ba88.  call temp:= `a`(v3, v0) @signature `La/a/c/i;.a:(La/x;Ljava/net/Proxy$Type;)Ljava/lang/String;` @kind static;
  #L07ba8e.  v0:= temp @kind object;
  #L07ba90.  call temp:= `c`(v3) @signature `La/x;.c:()La/q;` @kind virtual;
  #L07ba96.  v1:= temp @kind object;
  #L07ba98.  call `a`(v2, v1, v0) @signature `La/a/d/a;.a:(La/q;Ljava/lang/String;)V` @kind virtual;
  #L07ba9e.  return @kind void;
}
procedure `void` `a`(`a.a.d.a` v2 @kind this, `b.h` v3 @kind object) @signature `La/a/d/a;.a:(Lb/h;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L07bab0.  call temp:= `a`(v3) @signature `Lb/h;.a:()Lb/s;` @kind virtual;
  #L07bab6.  v0:= temp @kind object;
  #L07bab8.  v1:= `@@b.s.b` @type ^`b.s` @kind object;
  #L07babc.  call temp:= `a`(v3, v1) @signature `Lb/h;.a:(Lb/s;)Lb/h;` @kind virtual;
  #L07bac2.  call temp:= `e_`(v0) @signature `Lb/s;.e_:()Lb/s;` @kind virtual;
  #L07bac8.  call temp:= `d_`(v0) @signature `Lb/s;.d_:()Lb/s;` @kind virtual;
  #L07bace.  return @kind void;
}
procedure `b.r` `b`(`a.a.d.a` v3 @kind this, `long` v4 ) @signature `La/a/d/a;.b:(J)Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07bae0.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L07bae4.  v1:= 4I;
  #L07bae6.  if v0 == v1 then goto L07bb20;
  #L07baea.  v0:= new `java.lang.IllegalStateException`;
  #L07baee.  v1:= new `java.lang.StringBuilder`;
  #L07baf2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07baf8.  v2:= "state: " @kind object;
  #L07bafc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07bb02.  v1:= temp @kind object;
  #L07bb04.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L07bb08.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07bb0e.  v1:= temp @kind object;
  #L07bb10.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07bb16.  v1:= temp @kind object;
  #L07bb18.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07bb1e.  throw v0;
  #L07bb20.  v0:= 5I;
  #L07bb22.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L07bb26.  v0:= new `a.a.d.a$e`;
  #L07bb2a.  call `<init>`(v0, v3, v4) @signature `La/a/d/a$e;.<init>:(La/a/d/a;J)V` @kind direct;
  #L07bb30.  return v0 @kind object;
}
procedure `void` `b`(`a.a.d.a` v1 @kind this) @signature `La/a/d/a;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07bb44.  v0:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07bb48.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L07bb4e.  return @kind void;
}
procedure `a.q` `c`(`a.a.d.a` v3 @kind this) @signature `La/a/d/a;.c:()La/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07bb60.  v0:= new `a.q$a`;
  #L07bb64.  call `<init>`(v0) @signature `La/q$a;.<init>:()V` @kind direct;
  #L07bb6a.  v1:= v3.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07bb6e.  call temp:= `p`(v1) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #L07bb74.  v1:= temp @kind object;
  #L07bb76.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L07bb7c.  v2:= temp;
  #L07bb7e.  if v2 == 0 then goto L07bb8e;
  #L07bb82.  v2:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L07bb86.  call `a`(v2, v0, v1) @signature `La/a/a;.a:(La/q$a;Ljava/lang/String;)V` @kind virtual;
  #L07bb8c.  goto L07bb6a;
  #L07bb8e.  call temp:= `a`(v0) @signature `La/q$a;.a:()La/q;` @kind virtual;
  #L07bb94.  v0:= temp @kind object;
  #L07bb96.  return v0 @kind object;
}
procedure `b.q` `d`(`a.a.d.a` v3 @kind this) @signature `La/a/d/a;.d:()Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07bba8.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L07bbac.  v1:= 1I;
  #L07bbae.  if v0 == v1 then goto L07bbe8;
  #L07bbb2.  v0:= new `java.lang.IllegalStateException`;
  #L07bbb6.  v1:= new `java.lang.StringBuilder`;
  #L07bbba.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07bbc0.  v2:= "state: " @kind object;
  #L07bbc4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07bbca.  v1:= temp @kind object;
  #L07bbcc.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L07bbd0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07bbd6.  v1:= temp @kind object;
  #L07bbd8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07bbde.  v1:= temp @kind object;
  #L07bbe0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07bbe6.  throw v0;
  #L07bbe8.  v0:= 2I;
  #L07bbea.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L07bbee.  v0:= new `a.a.d.a$b`;
  #L07bbf2.  call `<init>`(v0, v3) @signature `La/a/d/a$b;.<init>:(La/a/d/a;)V` @kind direct;
  #L07bbf8.  return v0 @kind object;
}
procedure `b.r` `e`(`a.a.d.a` v3 @kind this) @signature `La/a/d/a;.e:()Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07bc0c.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L07bc10.  v1:= 4I;
  #L07bc12.  if v0 == v1 then goto L07bc4c;
  #L07bc16.  v0:= new `java.lang.IllegalStateException`;
  #L07bc1a.  v1:= new `java.lang.StringBuilder`;
  #L07bc1e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07bc24.  v2:= "state: " @kind object;
  #L07bc28.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07bc2e.  v1:= temp @kind object;
  #L07bc30.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L07bc34.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07bc3a.  v1:= temp @kind object;
  #L07bc3c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07bc42.  v1:= temp @kind object;
  #L07bc44.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07bc4a.  throw v0;
  #L07bc4c.  v0:= v3.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L07bc50.  if v0 != 0 then goto L07bc64;
  #L07bc54.  v0:= new `java.lang.IllegalStateException`;
  #L07bc58.  v1:= "streamAllocation == null" @kind object;
  #L07bc5c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07bc62.  throw v0;
  #L07bc64.  v0:= 5I;
  #L07bc66.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L07bc6a.  v0:= v3.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L07bc6e.  call `d`(v0) @signature `La/a/b/g;.d:()V` @kind virtual;
  #L07bc74.  v0:= new `a.a.d.a$f`;
  #L07bc78.  call `<init>`(v0, v3) @signature `La/a/d/a$f;.<init>:(La/a/d/a;)V` @kind direct;
  #L07bc7e.  return v0 @kind object;
}
