record `a.a.d.a$c` @kind class @AccessFlag  extends `a.a.d.a$a` @kind class {
  `a.a.d.a` `a.a.d.a$c.d` @AccessFlag FINAL_SYNTHETIC;
  `a.r` `a.a.d.a$c.e` @AccessFlag PRIVATE_FINAL;
  `long` `a.a.d.a$c.f` @AccessFlag PRIVATE;
  `boolean` `a.a.d.a$c.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$c` v2 @kind this, `a.a.d.a` v3 @kind object, `a.r` v4 @kind object) @signature `La/a/d/a$c;.<init>:(La/a/d/a;La/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07afe0.  v2.`a.a.d.a$c.d` @type ^`a.a.d.a` := v3 @kind object;
  #L07afe4.  v0:= 0I;
  #L07afe6.  call `<init>`(v2, v3, v0) @signature `La/a/d/a$a;.<init>:(La/a/d/a;La/a/d/a$1;)V` @kind direct;
  #L07afec.  v0:= -1L;
  #L07aff0.  v2.`a.a.d.a$c.f` @type ^`long` := v0 @kind wide;
  #L07aff4.  v0:= 1I;
  #L07aff6.  v2.`a.a.d.a$c.g` @type ^`boolean` := v0 @kind boolean;
  #L07affa.  v2.`a.a.d.a$c.e` @type ^`a.r` := v4 @kind object;
  #L07affe.  return @kind void;
}
procedure `void` `b`(`a.a.d.a$c` v6 @kind this) @signature `La/a/d/a$c;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07b010.  v4:= 0L;
  #L07b014.  v0:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07b018.  v2:= -1L;
  #L07b01c.  v0:= lcmp(v0, v2);
  #L07b020.  if v0 == 0 then goto L07b032;
  #L07b024.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07b028.  v0:= v0.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07b02c.  call temp:= `p`(v0) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #Try_start0.  
  #L07b032.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07b036.  v0:= v0.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07b03a.  call temp:= `m`(v0) @signature `Lb/e;.m:()J` @kind interface;
  #L07b040.  v0:= temp @kind wide;
  #L07b042.  v6.`a.a.d.a$c.f` @type ^`long` := v0 @kind wide;
  #L07b046.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07b04a.  v0:= v0.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07b04e.  call temp:= `p`(v0) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #L07b054.  v0:= temp @kind object;
  #L07b056.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L07b05c.  v0:= temp @kind object;
  #L07b05e.  v2:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07b062.  v1:= lcmp(v2, v4);
  #L07b066.  if v1 < 0 then goto L07b086;
  #L07b06a.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L07b070.  v1:= temp;
  #L07b072.  if v1 != 0 then goto L07b0e6;
  #L07b076.  v1:= ";" @kind object;
  #L07b07a.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L07b080.  v1:= temp;
  #L07b082.  if v1 != 0 then goto L07b0e6;
  #L07b086.  v1:= new `java.net.ProtocolException`;
  #L07b08a.  v2:= new `java.lang.StringBuilder`;
  #L07b08e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07b094.  v3:= "expected chunk size and optional extensions but was \"" @kind object;
  #L07b098.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b09e.  v2:= temp @kind object;
  #L07b0a0.  v4:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07b0a4.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b0aa.  v2:= temp @kind object;
  #L07b0ac.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b0b2.  v0:= temp @kind object;
  #L07b0b4.  v2:= "\"" @kind object;
  #L07b0b8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b0be.  v0:= temp @kind object;
  #L07b0c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07b0c6.  v0:= temp @kind object;
  #L07b0c8.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b0ce.  throw v1;
  #Try_end0.  
  #L07b0d0.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L07b0d2.  v1:= new `java.net.ProtocolException`;
  #L07b0d6.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L07b0dc.  v0:= temp @kind object;
  #L07b0de.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b0e4.  throw v1;
  #L07b0e6.  v0:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07b0ea.  v0:= lcmp(v0, v4);
  #L07b0ee.  if v0 != 0 then goto L07b126;
  #L07b0f2.  v0:= 0I;
  #L07b0f4.  v6.`a.a.d.a$c.g` @type ^`boolean` := v0 @kind boolean;
  #L07b0f8.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07b0fc.  v0:= v0.`a.a.d.a.a` @type ^`a.u` @kind object;
  #L07b100.  call temp:= `f`(v0) @signature `La/u;.f:()La/m;` @kind virtual;
  #L07b106.  v0:= temp @kind object;
  #L07b108.  v1:= v6.`a.a.d.a$c.e` @type ^`a.r` @kind object;
  #L07b10c.  v2:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07b110.  call temp:= `c`(v2) @signature `La/a/d/a;.c:()La/q;` @kind virtual;
  #L07b116.  v2:= temp @kind object;
  #L07b118.  call `a`(v0, v1, v2) @signature `La/a/c/e;.a:(La/m;La/r;La/q;)V` @kind static;
  #L07b11e.  v0:= 1I;
  #L07b120.  call `a`(v6, v0) @signature `La/a/d/a$c;.a:(Z)V` @kind virtual;
  #L07b126.  return @kind void;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L07b0d0;
}
procedure `long` `a`(`a.a.d.a$c` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `La/a/d/a$c;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07b148.  v4:= 0L;
  #L07b14c.  v0:= -1L;
  #L07b150.  v2:= lcmp(v8, v4);
  #L07b154.  if v2 >= 0 then goto L07b18a;
  #L07b158.  v0:= new `java.lang.IllegalArgumentException`;
  #L07b15c.  v1:= new `java.lang.StringBuilder`;
  #L07b160.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07b166.  v2:= "byteCount < 0: " @kind object;
  #L07b16a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b170.  v1:= temp @kind object;
  #L07b172.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b178.  v1:= temp @kind object;
  #L07b17a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07b180.  v1:= temp @kind object;
  #L07b182.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b188.  throw v0;
  #L07b18a.  v2:= v6.`a.a.d.a$c.b` @type ^`boolean` @kind boolean;
  #L07b18e.  if v2 == 0 then goto L07b1a2;
  #L07b192.  v0:= new `java.lang.IllegalStateException`;
  #L07b196.  v1:= "closed" @kind object;
  #L07b19a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b1a0.  throw v0;
  #L07b1a2.  v2:= v6.`a.a.d.a$c.g` @type ^`boolean` @kind boolean;
  #L07b1a6.  if v2 != 0 then goto L07b1ac;
  #L07b1aa.  return v0 @kind wide;
  #L07b1ac.  v2:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07b1b0.  v2:= lcmp(v2, v4);
  #L07b1b4.  if v2 == 0 then goto L07b1c4;
  #L07b1b8.  v2:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07b1bc.  v2:= lcmp(v2, v0);
  #L07b1c0.  if v2 != 0 then goto L07b1d2;
  #L07b1c4.  call `b`(v6) @signature `La/a/d/a$c;.b:()V` @kind direct;
  #L07b1ca.  v2:= v6.`a.a.d.a$c.g` @type ^`boolean` @kind boolean;
  #L07b1ce.  if v2 == 0 then goto L07b1aa;
  #L07b1d2.  v2:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07b1d6.  v2:= v2.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07b1da.  v4:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07b1de.  call temp:= `min`(v8, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L07b1e4.  v4:= temp @kind wide;
  #L07b1e6.  call temp:= `a`(v2, v7, v4) @signature `Lb/e;.a:(Lb/c;J)J` @kind interface;
  #L07b1ec.  v2:= temp @kind wide;
  #L07b1ee.  v0:= lcmp(v2, v0);
  #L07b1f2.  if v0 != 0 then goto L07b20e;
  #L07b1f6.  v0:= 0I;
  #L07b1f8.  call `a`(v6, v0) @signature `La/a/d/a$c;.a:(Z)V` @kind virtual;
  #L07b1fe.  v0:= new `java.net.ProtocolException`;
  #L07b202.  v1:= "unexpected end of stream" @kind object;
  #L07b206.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b20c.  throw v0;
  #L07b20e.  v0:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07b212.  v0:= v0 - v2 @kind long;
  #L07b214.  v6.`a.a.d.a$c.f` @type ^`long` := v0 @kind wide;
  #L07b218.  v0:= v2 @kind wide;
  #L07b21a.  goto L07b1aa;
}
procedure `void` `close`(`a.a.d.a$c` v2 @kind this) @signature `La/a/d/a$c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07b22c.  v0:= v2.`a.a.d.a$c.b` @type ^`boolean` @kind boolean;
  #L07b230.  if v0 == 0 then goto L07b236;
  #L07b234.  return @kind void;
  #L07b236.  v0:= v2.`a.a.d.a$c.g` @type ^`boolean` @kind boolean;
  #L07b23a.  if v0 == 0 then goto L07b25a;
  #L07b23e.  v0:= 100I;
  #L07b242.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L07b246.  call temp:= `a`(v2, v0, v1) @signature `La/a/c;.a:(Lb/r;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L07b24c.  v0:= temp;
  #L07b24e.  if v0 != 0 then goto L07b25a;
  #L07b252.  v0:= 0I;
  #L07b254.  call `a`(v2, v0) @signature `La/a/d/a$c;.a:(Z)V` @kind virtual;
  #L07b25a.  v0:= 1I;
  #L07b25c.  v2.`a.a.d.a$c.b` @type ^`boolean` := v0 @kind boolean;
  #L07b260.  goto L07b234;
}
