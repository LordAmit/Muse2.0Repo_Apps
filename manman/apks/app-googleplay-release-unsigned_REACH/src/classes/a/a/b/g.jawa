record `a.a.b.g` @kind class @AccessFlag PUBLIC_FINAL {
  `a.a` `a.a.b.g.a` @AccessFlag PUBLIC_FINAL;
  `a.ab` `a.a.b.g.c` @AccessFlag PRIVATE;
  `a.j` `a.a.b.g.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `a.a.b.g.e` @AccessFlag PRIVATE_FINAL;
  `a.a.b.f` `a.a.b.g.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.b.g.g` @AccessFlag PRIVATE;
  `a.a.b.c` `a.a.b.g.h` @AccessFlag PRIVATE;
  `boolean` `a.a.b.g.i` @AccessFlag PRIVATE;
  `boolean` `a.a.b.g.j` @AccessFlag PRIVATE;
  `a.a.c.c` `a.a.b.g.k` @AccessFlag PRIVATE;
}
global `boolean` `@@a.a.b.g.b` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/b/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L078004.  v0:= constclass @type ^`a.a.b.g` @kind object;
  #L078008.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L07800e.  v0:= temp;
  #L078010.  if v0 != 0 then goto L07801c;
  #L078014.  v0:= 1I;
  #L078016.  `@@a.a.b.g.b` @type ^`boolean` := v0 @kind boolean;
  #L07801a.  return @kind void;
  #L07801c.  v0:= 0I;
  #L07801e.  goto L078016;
}
procedure `void` `<init>`(`a.a.b.g` v2 @kind this, `a.j` v3 @kind object, `a.a` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `La/a/b/g;.<init>:(La/j;La/a;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L078030.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L078036.  v2.`a.a.b.g.d` @type ^`a.j` := v3 @kind object;
  #L07803a.  v2.`a.a.b.g.a` @type ^`a.a` := v4 @kind object;
  #L07803e.  v0:= new `a.a.b.f`;
  #L078042.  call temp:= `f`(v2) @signature `La/a/b/g;.f:()La/a/b/d;` @kind direct;
  #L078048.  v1:= temp @kind object;
  #L07804a.  call `<init>`(v0, v4, v1) @signature `La/a/b/f;.<init>:(La/a;La/a/b/d;)V` @kind direct;
  #L078050.  v2.`a.a.b.g.f` @type ^`a.a.b.f` := v0 @kind object;
  #L078054.  v2.`a.a.b.g.e` @type ^`java.lang.Object` := v5 @kind object;
  #L078058.  return @kind void;
}
procedure `a.a.b.c` `a`(`a.a.b.g` v6 @kind this, `int` v7 , `int` v8 , `int` v9 , `boolean` v10 ) @signature `La/a/b/g;.a:(IIIZ)La/a/b/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07806c.  v1:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L078070.  @monitorenter v1
  #Try_start0.  
  #L078072.  v0:= v6.`a.a.b.g.i` @type ^`boolean` @kind boolean;
  #L078076.  if v0 == 0 then goto L078090;
  #L07807a.  v0:= new `java.lang.IllegalStateException`;
  #L07807e.  v2:= "released" @kind object;
  #L078082.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L078088.  throw v0;
  #L07808a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07808c.  @monitorexit v1
  #Try_end0.  
  #L07808e.  throw v0;
  #Try_start1.  
  #L078090.  v0:= v6.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L078094.  if v0 == 0 then goto L0780a8;
  #L078098.  v0:= new `java.lang.IllegalStateException`;
  #L07809c.  v2:= "codec != null" @kind object;
  #L0780a0.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0780a6.  throw v0;
  #L0780a8.  v0:= v6.`a.a.b.g.j` @type ^`boolean` @kind boolean;
  #L0780ac.  if v0 == 0 then goto L0780c0;
  #L0780b0.  v0:= new `java.io.IOException`;
  #L0780b4.  v2:= "Canceled" @kind object;
  #L0780b8.  call `<init>`(v0, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0780be.  throw v0;
  #L0780c0.  v0:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0780c4.  if v0 == 0 then goto L0780d4;
  #L0780c8.  v2:= v0.`a.a.b.c.a` @type ^`boolean` @kind boolean;
  #L0780cc.  if v2 != 0 then goto L0780d4;
  #L0780d0.  @monitorexit v1
  #L0780d2.  return v0 @kind object;
  #L0780d4.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L0780d8.  v2:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0780dc.  v3:= v6.`a.a.b.g.a` @type ^`a.a` @kind object;
  #L0780e0.  call temp:= `a`(v0, v2, v3, v6) @signature `La/a/a;.a:(La/j;La/a;La/a/b/g;)La/a/b/c;` @kind virtual;
  #L0780e6.  v0:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0780ea.  if v0 == 0 then goto L0780f6;
  #L0780ee.  v0:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0780f2.  @monitorexit v1
  #L0780f4.  goto L0780d2;
  #L0780f6.  v0:= v6.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L0780fa.  @monitorexit v1
  #Try_end1.  
  #L0780fc.  if v0 != 0 then goto L07810c;
  #L078100.  v0:= v6.`a.a.b.g.f` @type ^`a.a.b.f` @kind object;
  #L078104.  call temp:= `b`(v0) @signature `La/a/b/f;.b:()La/ab;` @kind virtual;
  #L07810a.  v0:= temp @kind object;
  #L07810c.  v2:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L078110.  @monitorenter v2
  #Try_start2.  
  #L078112.  v6.`a.a.b.g.c` @type ^`a.ab` := v0 @kind object;
  #L078116.  v1:= 0I;
  #L078118.  v6.`a.a.b.g.g` @type ^`int` := v1;
  #L07811c.  v1:= new `a.a.b.c`;
  #L078120.  v3:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L078124.  call `<init>`(v1, v3, v0) @signature `La/a/b/c;.<init>:(La/j;La/ab;)V` @kind direct;
  #L07812a.  call `a`(v6, v1) @signature `La/a/b/g;.a:(La/a/b/c;)V` @kind virtual;
  #L078130.  v0:= v6.`a.a.b.g.j` @type ^`boolean` @kind boolean;
  #L078134.  if v0 == 0 then goto L07814e;
  #L078138.  v0:= new `java.io.IOException`;
  #L07813c.  v1:= "Canceled" @kind object;
  #L078140.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L078146.  throw v0;
  #L078148.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07814a.  @monitorexit v2
  #Try_end2.  
  #L07814c.  throw v0;
  #Try_start3.  
  #L07814e.  @monitorexit v2
  #Try_end3.  
  #L078150.  call `a`(v1, v7, v8, v9, v10) @signature `La/a/b/c;.a:(IIIZ)V` @kind virtual;
  #L078156.  call temp:= `f`(v6) @signature `La/a/b/g;.f:()La/a/b/d;` @kind direct;
  #L07815c.  v0:= temp @kind object;
  #L07815e.  call temp:= `a`(v1) @signature `La/a/b/c;.a:()La/ab;` @kind virtual;
  #L078164.  v2:= temp @kind object;
  #L078166.  call `b`(v0, v2) @signature `La/a/b/d;.b:(La/ab;)V` @kind virtual;
  #L07816c.  v0:= 0I;
  #L07816e.  v2:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L078172.  @monitorenter v2
  #Try_start4.  
  #L078174.  v3:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L078178.  v4:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07817c.  call `b`(v3, v4, v1) @signature `La/a/a;.b:(La/j;La/a/b/c;)V` @kind virtual;
  #L078182.  call temp:= `d`(v1) @signature `La/a/b/c;.d:()Z` @kind virtual;
  #L078188.  v3:= temp;
  #L07818a.  if v3 == 0 then goto L0781bc;
  #L07818e.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L078192.  v1:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L078196.  v3:= v6.`a.a.b.g.a` @type ^`a.a` @kind object;
  #L07819a.  call temp:= `b`(v0, v1, v3, v6) @signature `La/a/a;.b:(La/j;La/a;La/a/b/g;)Ljava/net/Socket;` @kind virtual;
  #L0781a0.  v0:= temp @kind object;
  #L0781a2.  v1:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0781a6.  v5:= v0 @kind object;
  #L0781a8.  v0:= v1 @kind object;
  #L0781aa.  v1:= v5 @kind object;
  #L0781ac.  @monitorexit v2
  #Try_end4.  
  #L0781ae.  call `a`(v1) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L0781b4.  goto L0780d2;
  #L0781b6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start5.  
  #L0781b8.  @monitorexit v2
  #Try_end5.  
  #L0781ba.  throw v0;
  #L0781bc.  v5:= v0 @kind object;
  #L0781be.  v0:= v1 @kind object;
  #L0781c0.  v1:= v5 @kind object;
  #L0781c2.  goto L0781ac;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07808a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07808a;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L078148;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L078148;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L0781b6;
  catch `java.lang.Throwable` @[Try_start5..Try_end5] goto L0781b6;
}
procedure `a.a.b.c` `a`(`a.a.b.g` v3 @kind this, `int` v4 , `int` v5 , `int` v6 , `boolean` v7 , `boolean` v8 ) @signature `La/a/b/g;.a:(IIIZZ)La/a/b/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07820c.  call temp:= `a`(v3, v4, v5, v6, v7) @signature `La/a/b/g;.a:(IIIZ)La/a/b/c;` @kind direct;
  #L078212.  v0:= temp @kind object;
  #L078214.  v1:= v3.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L078218.  @monitorenter v1
  #Try_start0.  
  #L07821a.  v2:= v0.`a.a.b.c.b` @type ^`int`;
  #L07821e.  if v2 != 0 then goto L078226;
  #L078222.  @monitorexit v1
  #L078224.  return v0 @kind object;
  #L078226.  @monitorexit v1
  #Try_end0.  
  #L078228.  call temp:= `a`(v0, v8) @signature `La/a/b/c;.a:(Z)Z` @kind virtual;
  #L07822e.  v1:= temp;
  #L078230.  if v1 != 0 then goto L078224;
  #L078234.  call `d`(v3) @signature `La/a/b/g;.d:()V` @kind virtual;
  #L07823a.  goto L07820c;
  #L07823c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L07823e.  @monitorexit v1
  #Try_end1.  
  #L078240.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07823c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07823c;
}
procedure `java.net.Socket` `a`(`a.a.b.g` v4 @kind this, `boolean` v5 , `boolean` v6 , `boolean` v7 ) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L078268.  v2:= 1I;
  #L07826a.  v1:= 0I;
  #L07826c.  v0:= `@@a.a.b.g.b` @type ^`boolean` @kind boolean;
  #L078270.  if v0 != 0 then goto L078290;
  #L078274.  v0:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L078278.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07827e.  v0:= temp;
  #L078280.  if v0 != 0 then goto L078290;
  #L078284.  v0:= new `java.lang.AssertionError`;
  #L078288.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07828e.  throw v0;
  #L078290.  if v7 == 0 then goto L078298;
  #L078294.  v4.`a.a.b.g.k` @type ^`a.a.c.c` := v1 @kind object;
  #L078298.  if v6 == 0 then goto L0782a0;
  #L07829c.  v4.`a.a.b.g.i` @type ^`boolean` := v2 @kind boolean;
  #L0782a0.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0782a4.  if v0 == 0 then goto L078328;
  #L0782a8.  if v5 == 0 then goto L0782b4;
  #L0782ac.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0782b0.  v0.`a.a.b.c.a` @type ^`boolean` := v2 @kind boolean;
  #L0782b4.  v0:= v4.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L0782b8.  if v0 != 0 then goto L078328;
  #L0782bc.  v0:= v4.`a.a.b.g.i` @type ^`boolean` @kind boolean;
  #L0782c0.  if v0 != 0 then goto L0782d0;
  #L0782c4.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0782c8.  v0:= v0.`a.a.b.c.a` @type ^`boolean` @kind boolean;
  #L0782cc.  if v0 == 0 then goto L078328;
  #L0782d0.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0782d4.  call `c`(v4, v0) @signature `La/a/b/g;.c:(La/a/b/c;)V` @kind direct;
  #L0782da.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0782de.  v0:= v0.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L0782e2.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L0782e8.  v0:= temp;
  #L0782ea.  if v0 == 0 then goto L07832a;
  #L0782ee.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0782f2.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L0782f8.  v2:= temp @kind wide;
  #L0782fa.  v0.`a.a.b.c.e` @type ^`long` := v2 @kind wide;
  #L0782fe.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L078302.  v2:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L078306.  v3:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07830a.  call temp:= `a`(v0, v2, v3) @signature `La/a/a;.a:(La/j;La/a/b/c;)Z` @kind virtual;
  #L078310.  v0:= temp;
  #L078312.  if v0 == 0 then goto L07832a;
  #L078316.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07831a.  call temp:= `b`(v0) @signature `La/a/b/c;.b:()Ljava/net/Socket;` @kind virtual;
  #L078320.  v0:= temp @kind object;
  #L078322.  v4.`a.a.b.g.h` @type ^`a.a.b.c` := v1 @kind object;
  #L078326.  v1:= v0 @kind object;
  #L078328.  return v1 @kind object;
  #L07832a.  v0:= v1 @kind object;
  #L07832c.  goto L078322;
}
procedure `void` `c`(`a.a.b.g` v3 @kind this, `a.a.b.c` v4 @kind object) @signature `La/a/b/g;.c:(La/a/b/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L078340.  v0:= 0I;
  #L078342.  v1:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L078346.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07834c.  v2:= temp;
  #L07834e.  v1:= v0;
  #L078350.  if v1 >= v2 then goto L078384;
  #L078354.  v0:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L078358.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07835e.  v0:= temp @kind object;
  #L078360.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L078364.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L07836a.  v0:= temp @kind object;
  #L07836c.  if v0 != v3 then goto L07837c;
  #L078370.  v0:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L078374.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L07837a.  return @kind void;
  #L07837c.  v0:= v1 + 1;
  #L078380.  v1:= v0;
  #L078382.  goto L078350;
  #L078384.  v0:= new `java.lang.IllegalStateException`;
  #L078388.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L07838e.  throw v0;
}
procedure `a.a.b.d` `f`(`a.a.b.g` v2 @kind this) @signature `La/a/b/g;.f:()La/a/b/d;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L0783a0.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L0783a4.  v1:= v2.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0783a8.  call temp:= `a`(v0, v1) @signature `La/a/a;.a:(La/j;)La/a/b/d;` @kind virtual;
  #L0783ae.  v0:= temp @kind object;
  #L0783b0.  return v0 @kind object;
}
procedure `a.a.c.c` `a`(`a.a.b.g` v2 @kind this) @signature `La/a/b/g;.a:()La/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0783c4.  v1:= v2.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0783c8.  @monitorenter v1
  #Try_start0.  
  #L0783ca.  v0:= v2.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L0783ce.  @monitorexit v1
  #L0783d0.  return v0 @kind object;
  #L0783d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0783d4.  @monitorexit v1
  #Try_end0.  
  #L0783d6.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0783d2;
}
procedure `a.a.c.c` `a`(`a.a.b.g` v6 @kind this, `a.u` v7 @kind object, `boolean` v8 ) @signature `La/a/b/g;.a:(La/u;Z)La/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0783f4.  call temp:= `a`(v7) @signature `La/u;.a:()I` @kind virtual;
  #L0783fa.  v1:= temp;
  #L0783fc.  call temp:= `b`(v7) @signature `La/u;.b:()I` @kind virtual;
  #L078402.  v2:= temp;
  #L078404.  call temp:= `c`(v7) @signature `La/u;.c:()I` @kind virtual;
  #L07840a.  v3:= temp;
  #L07840c.  call temp:= `r`(v7) @signature `La/u;.r:()Z` @kind virtual;
  #L078412.  v4:= temp;
  #L078414.  v0:= v6 @kind object;
  #L078416.  v5:= v8;
  #Try_start0.  
  #L078418.  call temp:= `a`(v0, v1, v2, v3, v4, v5) @signature `La/a/b/g;.a:(IIIZZ)La/a/b/c;` @kind direct;
  #L07841e.  v0:= temp @kind object;
  #L078420.  call temp:= `a`(v0, v7, v6) @signature `La/a/b/c;.a:(La/u;La/a/b/g;)La/a/c/c;` @kind virtual;
  #L078426.  v0:= temp @kind object;
  #L078428.  v1:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07842c.  @monitorenter v1
  #Try_end0.  
  #Try_start1.  
  #L07842e.  v6.`a.a.b.g.k` @type ^`a.a.c.c` := v0 @kind object;
  #L078432.  @monitorexit v1
  #L078434.  return v0 @kind object;
  #L078436.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L078438.  @monitorexit v1
  #Try_end1.  
  #Try_start2.  
  #L07843a.  throw v0;
  #Try_end2.  
  #L07843c.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L07843e.  v1:= new `a.a.b.e`;
  #L078442.  call `<init>`(v1, v0) @signature `La/a/b/e;.<init>:(Ljava/io/IOException;)V` @kind direct;
  #L078448.  throw v1;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L07843c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L078436;
  catch `java.io.IOException` @[Try_start2..Try_end2] goto L07843c;
}
procedure `void` `a`(`a.a.b.g` v3 @kind this, `a.a.b.c` v4 @kind object) @signature `La/a/b/g;.a:(La/a/b/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07847c.  v0:= `@@a.a.b.g.b` @type ^`boolean` @kind boolean;
  #L078480.  if v0 != 0 then goto L0784a0;
  #L078484.  v0:= v3.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L078488.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07848e.  v0:= temp;
  #L078490.  if v0 != 0 then goto L0784a0;
  #L078494.  v0:= new `java.lang.AssertionError`;
  #L078498.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07849e.  throw v0;
  #L0784a0.  v0:= v3.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0784a4.  if v0 == 0 then goto L0784b4;
  #L0784a8.  v0:= new `java.lang.IllegalStateException`;
  #L0784ac.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L0784b2.  throw v0;
  #L0784b4.  v3.`a.a.b.g.h` @type ^`a.a.b.c` := v4 @kind object;
  #L0784b8.  v0:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L0784bc.  v1:= new `a.a.b.g$a`;
  #L0784c0.  v2:= v3.`a.a.b.g.e` @type ^`java.lang.Object` @kind object;
  #L0784c4.  call `<init>`(v1, v3, v2) @signature `La/a/b/g$a;.<init>:(La/a/b/g;Ljava/lang/Object;)V` @kind direct;
  #L0784ca.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0784d0.  return @kind void;
}
procedure `void` `a`(`a.a.b.g` v5 @kind this, `java.io.IOException` v6 @kind object) @signature `La/a/b/g;.a:(Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0784e4.  v0:= 0I;
  #L0784e6.  v1:= 1I;
  #L0784e8.  v2:= v5.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0784ec.  @monitorenter v2
  #Try_start0.  
  #L0784ee.  v3:= instanceof @variable v6 @type ^`a.a.e.o` @kind boolean;
  #L0784f2.  if v3 == 0 then goto L078544;
  #L0784f6.  v6:= (`a.a.e.o`) v6 @kind object;
  #L0784fa.  v3:= v6.`a.a.e.o.a` @type ^`a.a.e.b` @kind object;
  #L0784fe.  v4:= `@@a.a.e.b.e` @type ^`a.a.e.b` @kind object;
  #L078502.  if v3 != v4 then goto L078512;
  #L078506.  v3:= v5.`a.a.b.g.g` @type ^`int`;
  #L07850a.  v3:= v3 + 1;
  #L07850e.  v5.`a.a.b.g.g` @type ^`int` := v3;
  #L078512.  v3:= v6.`a.a.e.o.a` @type ^`a.a.e.b` @kind object;
  #L078516.  v4:= `@@a.a.e.b.e` @type ^`a.a.e.b` @kind object;
  #L07851a.  if v3 != v4 then goto L078526;
  #L07851e.  v3:= v5.`a.a.b.g.g` @type ^`int`;
  #L078522.  if v3 <= v1 then goto L07852e;
  #L078526.  v0:= 0I;
  #L078528.  v5.`a.a.b.g.c` @type ^`a.ab` := v0 @kind object;
  #L07852c.  v0:= v1;
  #L07852e.  v1:= 0I;
  #L078530.  v3:= 1I;
  #L078532.  call temp:= `a`(v5, v0, v1, v3) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L078538.  v0:= temp @kind object;
  #L07853a.  @monitorexit v2
  #Try_end0.  
  #L07853c.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L078542.  return @kind void;
  #Try_start1.  
  #L078544.  v3:= v5.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L078548.  if v3 == 0 then goto L07852e;
  #L07854c.  v3:= v5.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L078550.  call temp:= `d`(v3) @signature `La/a/b/c;.d:()Z` @kind virtual;
  #L078556.  v3:= temp;
  #L078558.  if v3 == 0 then goto L078564;
  #L07855c.  v3:= instanceof @variable v6 @type ^`a.a.e.a` @kind boolean;
  #L078560.  if v3 == 0 then goto L07852e;
  #L078564.  v0:= v5.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L078568.  v0:= v0.`a.a.b.c.b` @type ^`int`;
  #L07856c.  if v0 != 0 then goto L07852c;
  #L078570.  v0:= v5.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L078574.  if v0 == 0 then goto L07858a;
  #L078578.  if v6 == 0 then goto L07858a;
  #L07857c.  v0:= v5.`a.a.b.g.f` @type ^`a.a.b.f` @kind object;
  #L078580.  v3:= v5.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L078584.  call `a`(v0, v3, v6) @signature `La/a/b/f;.a:(La/ab;Ljava/io/IOException;)V` @kind virtual;
  #L07858a.  v0:= 0I;
  #L07858c.  v5.`a.a.b.g.c` @type ^`a.ab` := v0 @kind object;
  #L078590.  goto L07852c;
  #L078592.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L078594.  @monitorexit v2
  #Try_end1.  
  #L078596.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L078592;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L078592;
}
procedure `void` `a`(`a.a.b.g` v4 @kind this, `boolean` v5 , `a.a.c.c` v6 @kind object) @signature `La/a/b/g;.a:(ZLa/a/c/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0785bc.  v1:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0785c0.  @monitorenter v1
  #L0785c2.  if v6 == 0 then goto L0785ce;
  #Try_start0.  
  #L0785c6.  v0:= v4.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L0785ca.  if v6 == v0 then goto L07861e;
  #L0785ce.  v0:= new `java.lang.IllegalStateException`;
  #L0785d2.  v2:= new `java.lang.StringBuilder`;
  #L0785d6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0785dc.  v3:= "expected " @kind object;
  #L0785e0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0785e6.  v2:= temp @kind object;
  #L0785e8.  v3:= v4.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L0785ec.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0785f2.  v2:= temp @kind object;
  #L0785f4.  v3:= " but was " @kind object;
  #L0785f8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0785fe.  v2:= temp @kind object;
  #L078600.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L078606.  v2:= temp @kind object;
  #L078608.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07860e.  v2:= temp @kind object;
  #L078610.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L078616.  throw v0;
  #L078618.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07861a.  @monitorexit v1
  #Try_end0.  
  #L07861c.  throw v0;
  #L07861e.  if v5 != 0 then goto L078632;
  #Try_start1.  
  #L078622.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L078626.  v2:= v0.`a.a.b.c.b` @type ^`int`;
  #L07862a.  v2:= v2 + 1;
  #L07862e.  v0.`a.a.b.c.b` @type ^`int` := v2;
  #L078632.  v0:= 0I;
  #L078634.  v2:= 1I;
  #L078636.  call temp:= `a`(v4, v5, v0, v2) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L07863c.  v0:= temp @kind object;
  #L07863e.  @monitorexit v1
  #Try_end1.  
  #L078640.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L078646.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L078618;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L078618;
}
procedure `a.a.b.c` `b`(`a.a.b.g` v1 @kind this) @signature `La/a/b/g;.b:()La/a/b/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07866c.  @monitorenter v1
  #Try_start0.  
  #L07866e.  v0:= v1.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #Try_end0.  
  #L078672.  @monitorexit v1
  #L078674.  return v0 @kind object;
  #L078676.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L078678.  @monitorexit v1
  #L07867a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L078676;
}
procedure `java.net.Socket` `b`(`a.a.b.g` v3 @kind this, `a.a.b.c` v4 @kind object) @signature `La/a/b/g;.b:(La/a/b/c;)Ljava/net/Socket;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L078698.  v2:= 1I;
  #L07869a.  v1:= 0I;
  #L07869c.  v0:= `@@a.a.b.g.b` @type ^`boolean` @kind boolean;
  #L0786a0.  if v0 != 0 then goto L0786c0;
  #L0786a4.  v0:= v3.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0786a8.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L0786ae.  v0:= temp;
  #L0786b0.  if v0 != 0 then goto L0786c0;
  #L0786b4.  v0:= new `java.lang.AssertionError`;
  #L0786b8.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0786be.  throw v0;
  #L0786c0.  v0:= v3.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L0786c4.  if v0 != 0 then goto L0786dc;
  #L0786c8.  v0:= v3.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0786cc.  v0:= v0.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L0786d0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L0786d6.  v0:= temp;
  #L0786d8.  if v0 == v2 then goto L0786e8;
  #L0786dc.  v0:= new `java.lang.IllegalStateException`;
  #L0786e0.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L0786e6.  throw v0;
  #L0786e8.  v0:= v3.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0786ec.  v0:= v0.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L0786f0.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L0786f6.  v0:= temp @kind object;
  #L0786f8.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L0786fc.  call temp:= `a`(v3, v2, v1, v1) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L078702.  v1:= temp @kind object;
  #L078704.  v3.`a.a.b.g.h` @type ^`a.a.b.c` := v4 @kind object;
  #L078708.  v2:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L07870c.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L078712.  return v1 @kind object;
}
procedure `void` `c`(`a.a.b.g` v4 @kind this) @signature `La/a/b/g;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L078724.  v1:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L078728.  @monitorenter v1
  #L07872a.  v0:= 0I;
  #L07872c.  v2:= 1I;
  #L07872e.  v3:= 0I;
  #Try_start0.  
  #L078730.  call temp:= `a`(v4, v0, v2, v3) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L078736.  v0:= temp @kind object;
  #L078738.  @monitorexit v1
  #Try_end0.  
  #L07873a.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L078740.  return @kind void;
  #L078742.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L078744.  @monitorexit v1
  #Try_end1.  
  #L078746.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L078742;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L078742;
}
procedure `void` `d`(`a.a.b.g` v4 @kind this) @signature `La/a/b/g;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07876c.  v1:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L078770.  @monitorenter v1
  #L078772.  v0:= 1I;
  #L078774.  v2:= 0I;
  #L078776.  v3:= 0I;
  #Try_start0.  
  #L078778.  call temp:= `a`(v4, v0, v2, v3) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L07877e.  v0:= temp @kind object;
  #L078780.  @monitorexit v1
  #Try_end0.  
  #L078782.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L078788.  return @kind void;
  #L07878a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L07878c.  @monitorexit v1
  #Try_end1.  
  #L07878e.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07878a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07878a;
}
procedure `boolean` `e`(`a.a.b.g` v1 @kind this) @signature `La/a/b/g;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0787b4.  v0:= v1.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L0787b8.  if v0 != 0 then goto L0787cc;
  #L0787bc.  v0:= v1.`a.a.b.g.f` @type ^`a.a.b.f` @kind object;
  #L0787c0.  call temp:= `a`(v0) @signature `La/a/b/f;.a:()Z` @kind virtual;
  #L0787c6.  v0:= temp;
  #L0787c8.  if v0 == 0 then goto L0787d0;
  #L0787cc.  v0:= 1I;
  #L0787ce.  return v0;
  #L0787d0.  v0:= 0I;
  #L0787d2.  goto L0787ce;
}
procedure `java.lang.String` `toString`(`a.a.b.g` v1 @kind this) @signature `La/a/b/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0787e4.  call temp:= `b`(v1) @signature `La/a/b/g;.b:()La/a/b/c;` @kind virtual;
  #L0787ea.  v0:= temp @kind object;
  #L0787ec.  if v0 == 0 then goto L0787fa;
  #L0787f0.  call temp:= `toString`(v0) @signature `La/a/b/c;.toString:()Ljava/lang/String;` @kind virtual;
  #L0787f6.  v0:= temp @kind object;
  #L0787f8.  return v0 @kind object;
  #L0787fa.  v0:= v1.`a.a.b.g.a` @type ^`a.a` @kind object;
  #L0787fe.  call temp:= `toString`(v0) @signature `La/a;.toString:()Ljava/lang/String;` @kind virtual;
  #L078804.  v0:= temp @kind object;
  #L078806.  goto L0787f8;
}
