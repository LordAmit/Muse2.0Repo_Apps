record `a.a.c` @kind class @AccessFlag PUBLIC_FINAL {
}
global `byte`[] `@@a.a.c.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String`[] `@@a.a.c.b` @AccessFlag PUBLIC_STATIC_FINAL;
global `a.aa` `@@a.a.c.c` @AccessFlag PUBLIC_STATIC_FINAL;
global `a.y` `@@a.a.c.d` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.nio.charset.Charset` `@@a.a.c.e` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.TimeZone` `@@a.a.c.f` @AccessFlag PUBLIC_STATIC_FINAL;
global `b.f` `@@a.a.c.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `b.f` `@@a.a.c.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `b.f` `@@a.a.c.i` @AccessFlag PRIVATE_STATIC_FINAL;
global `b.f` `@@a.a.c.j` @AccessFlag PRIVATE_STATIC_FINAL;
global `b.f` `@@a.a.c.k` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.charset.Charset` `@@a.a.c.l` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.charset.Charset` `@@a.a.c.m` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.charset.Charset` `@@a.a.c.n` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.charset.Charset` `@@a.a.c.o` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@a.a.c.p` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/a/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L07a40c.  v2:= 0I;
  #L07a40e.  v1:= 0I;
  #L07a410.  v0:= new `byte`[v1];
  #L07a414.  `@@a.a.c.a` @type ^`byte`[] := v0 @kind object;
  #L07a418.  v0:= new `java.lang.String`[v1];
  #L07a41c.  `@@a.a.c.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L07a420.  v0:= `@@a.a.c.a` @type ^`byte`[] @kind object;
  #L07a424.  call temp:= `a`(v2, v0) @signature `La/aa;.a:(La/t;[B)La/aa;` @kind static;
  #L07a42a.  v0:= temp @kind object;
  #L07a42c.  `@@a.a.c.c` @type ^`a.aa` := v0 @kind object;
  #L07a430.  v0:= `@@a.a.c.a` @type ^`byte`[] @kind object;
  #L07a434.  call temp:= `a`(v2, v0) @signature `La/y;.a:(La/t;[B)La/y;` @kind static;
  #L07a43a.  v0:= temp @kind object;
  #L07a43c.  `@@a.a.c.d` @type ^`a.y` := v0 @kind object;
  #L07a440.  v0:= "efbbbf" @kind object;
  #L07a444.  call temp:= `b`(v0) @signature `Lb/f;.b:(Ljava/lang/String;)Lb/f;` @kind static;
  #L07a44a.  v0:= temp @kind object;
  #L07a44c.  `@@a.a.c.g` @type ^`b.f` := v0 @kind object;
  #L07a450.  v0:= "feff" @kind object;
  #L07a454.  call temp:= `b`(v0) @signature `Lb/f;.b:(Ljava/lang/String;)Lb/f;` @kind static;
  #L07a45a.  v0:= temp @kind object;
  #L07a45c.  `@@a.a.c.h` @type ^`b.f` := v0 @kind object;
  #L07a460.  v0:= "fffe" @kind object;
  #L07a464.  call temp:= `b`(v0) @signature `Lb/f;.b:(Ljava/lang/String;)Lb/f;` @kind static;
  #L07a46a.  v0:= temp @kind object;
  #L07a46c.  `@@a.a.c.i` @type ^`b.f` := v0 @kind object;
  #L07a470.  v0:= "0000ffff" @kind object;
  #L07a474.  call temp:= `b`(v0) @signature `Lb/f;.b:(Ljava/lang/String;)Lb/f;` @kind static;
  #L07a47a.  v0:= temp @kind object;
  #L07a47c.  `@@a.a.c.j` @type ^`b.f` := v0 @kind object;
  #L07a480.  v0:= "ffff0000" @kind object;
  #L07a484.  call temp:= `b`(v0) @signature `Lb/f;.b:(Ljava/lang/String;)Lb/f;` @kind static;
  #L07a48a.  v0:= temp @kind object;
  #L07a48c.  `@@a.a.c.k` @type ^`b.f` := v0 @kind object;
  #L07a490.  v0:= "UTF-8" @kind object;
  #L07a494.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L07a49a.  v0:= temp @kind object;
  #L07a49c.  `@@a.a.c.e` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L07a4a0.  v0:= "UTF-16BE" @kind object;
  #L07a4a4.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L07a4aa.  v0:= temp @kind object;
  #L07a4ac.  `@@a.a.c.l` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L07a4b0.  v0:= "UTF-16LE" @kind object;
  #L07a4b4.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L07a4ba.  v0:= temp @kind object;
  #L07a4bc.  `@@a.a.c.m` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L07a4c0.  v0:= "UTF-32BE" @kind object;
  #L07a4c4.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L07a4ca.  v0:= temp @kind object;
  #L07a4cc.  `@@a.a.c.n` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L07a4d0.  v0:= "UTF-32LE" @kind object;
  #L07a4d4.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L07a4da.  v0:= temp @kind object;
  #L07a4dc.  `@@a.a.c.o` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L07a4e0.  v0:= "GMT" @kind object;
  #L07a4e4.  call temp:= `getTimeZone`(v0) @signature `Ljava/util/TimeZone;.getTimeZone:(Ljava/lang/String;)Ljava/util/TimeZone;` @kind static;
  #L07a4ea.  v0:= temp @kind object;
  #L07a4ec.  `@@a.a.c.f` @type ^`java.util.TimeZone` := v0 @kind object;
  #L07a4f0.  v0:= "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([\\d.]+)" @kind object;
  #L07a4f4.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L07a4fa.  v0:= temp @kind object;
  #L07a4fc.  `@@a.a.c.p` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L07a500.  return @kind void;
}
procedure `int` `a`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `La/a/c;.a:(Ljava/lang/String;II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07a514.  v0:= v3;
  #L07a516.  if v0 >= v4 then goto L07a52a;
  #L07a51a.  call temp:= `charAt`(v2, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L07a520.  v1:= temp;
  #L07a522.  goto L07a534;
  #L07a528.  v4:= v0;
  #L07a52a.  return v4;
  #L07a52c.  v0:= v0 + 1;
  #L07a530.  goto L07a516;
  #L07a532.  
  #L07a534.  switch v1
                  | 9 => goto L07a52c
                  | 10 => goto L07a52c
                  | 12 => goto L07a52c
                  | 13 => goto L07a52c
                  | 32 => goto L07a52c
                  | else => goto L07a528;
}
procedure `int` `a`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `char` v5 ) @signature `La/a/c;.a:(Ljava/lang/String;IIC)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07a570.  v0:= v3;
  #L07a572.  if v0 >= v4 then goto L07a584;
  #L07a576.  call temp:= `charAt`(v2, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L07a57c.  v1:= temp;
  #L07a57e.  if v1 != v5 then goto L07a586;
  #L07a582.  v4:= v0;
  #L07a584.  return v4;
  #L07a586.  v0:= v0 + 1;
  #L07a58a.  goto L07a572;
}
procedure `int` `a`(`java.lang.String` v3 @kind object, `int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `La/a/c;.a:(Ljava/lang/String;IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L07a59c.  v0:= v4;
  #L07a59e.  if v0 >= v5 then goto L07a5ba;
  #L07a5a2.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L07a5a8.  v1:= temp;
  #L07a5aa.  call temp:= `indexOf`(v6, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L07a5b0.  v1:= temp;
  #L07a5b2.  v2:= -1I;
  #L07a5b4.  if v1 == v2 then goto L07a5bc;
  #L07a5b8.  v5:= v0;
  #L07a5ba.  return v5;
  #L07a5bc.  v0:= v0 + 1;
  #L07a5c0.  goto L07a59e;
}
procedure `int` `a`(`java.lang.Object`[] v3 @kind object, `java.lang.Object` v4 @kind object) @signature `La/a/c;.a:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L07a5d4.  v0:= 0I;
  #L07a5d6.  v1:= length @variable v3;
  #L07a5d8.  if v0 >= v1 then goto L07a5f4;
  #L07a5dc.  v2:= v3[v0] @kind object;
  #L07a5e0.  call temp:= `a`(v2, v4) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07a5e6.  v2:= temp;
  #L07a5e8.  if v2 == 0 then goto L07a5ee;
  #L07a5ec.  return v0;
  #L07a5ee.  v0:= v0 + 1;
  #L07a5f2.  goto L07a5d8;
  #L07a5f4.  v0:= -1I;
  #L07a5f6.  goto L07a5ec;
}
procedure `java.lang.String` `a`(`a.r` v3 @kind object, `boolean` v4 ) @signature `La/a/c;.a:(La/r;Z)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L07a608.  call temp:= `f`(v3) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L07a60e.  v0:= temp @kind object;
  #L07a610.  v1:= ":" @kind object;
  #L07a614.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L07a61a.  v0:= temp;
  #L07a61c.  if v0 == 0 then goto L07a6b2;
  #L07a620.  v0:= new `java.lang.StringBuilder`;
  #L07a624.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a62a.  v1:= "[" @kind object;
  #L07a62e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a634.  v0:= temp @kind object;
  #L07a636.  call temp:= `f`(v3) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L07a63c.  v1:= temp @kind object;
  #L07a63e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a644.  v0:= temp @kind object;
  #L07a646.  v1:= "]" @kind object;
  #L07a64a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a650.  v0:= temp @kind object;
  #L07a652.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a658.  v0:= temp @kind object;
  #L07a65a.  if v4 != 0 then goto L07a67a;
  #L07a65e.  call temp:= `g`(v3) @signature `La/r;.g:()I` @kind virtual;
  #L07a664.  v1:= temp;
  #L07a666.  call temp:= `b`(v3) @signature `La/r;.b:()Ljava/lang/String;` @kind virtual;
  #L07a66c.  v2:= temp @kind object;
  #L07a66e.  call temp:= `a`(v2) @signature `La/r;.a:(Ljava/lang/String;)I` @kind static;
  #L07a674.  v2:= temp;
  #L07a676.  if v1 == v2 then goto L07a6b0;
  #L07a67a.  v1:= new `java.lang.StringBuilder`;
  #L07a67e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a684.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a68a.  v0:= temp @kind object;
  #L07a68c.  v1:= ":" @kind object;
  #L07a690.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a696.  v0:= temp @kind object;
  #L07a698.  call temp:= `g`(v3) @signature `La/r;.g:()I` @kind virtual;
  #L07a69e.  v1:= temp;
  #L07a6a0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a6a6.  v0:= temp @kind object;
  #L07a6a8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a6ae.  v0:= temp @kind object;
  #L07a6b0.  return v0 @kind object;
  #L07a6b2.  call temp:= `f`(v3) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L07a6b8.  v0:= temp @kind object;
  #L07a6ba.  goto L07a65a;
}
procedure `java.lang.String` `a`(`java.lang.String` v3 @kind object) @signature `La/a/c;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L07a6cc.  v0:= 0I;
  #Try_start0.  
  #L07a6ce.  call temp:= `toASCII`(v3) @signature `Ljava/net/IDN;.toASCII:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L07a6d4.  v1:= temp @kind object;
  #L07a6d6.  v2:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L07a6da.  call temp:= `toLowerCase`(v1, v2) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L07a6e0.  v1:= temp @kind object;
  #L07a6e2.  call temp:= `isEmpty`(v1) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L07a6e8.  v2:= temp;
  #L07a6ea.  if v2 == 0 then goto L07a6f0;
  #L07a6ee.  return v0 @kind object;
  #L07a6f0.  call temp:= `d`(v1) @signature `La/a/c;.d:(Ljava/lang/String;)Z` @kind static;
  #Try_end0.  
  #L07a6f6.  v2:= temp;
  #L07a6f8.  if v2 != 0 then goto L07a6ee;
  #L07a6fc.  v0:= v1 @kind object;
  #L07a6fe.  goto L07a6ee;
  #L07a700.  v1:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L07a702.  goto L07a6ee;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L07a700;
}
procedure `java.lang.String` `a`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `La/a/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L07a724.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L07a728.  call temp:= `format`(v0, v1, v2) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L07a72e.  v0:= temp @kind object;
  #L07a730.  return v0 @kind object;
}
procedure `java.nio.charset.Charset` `a`(`b.e` v4 @kind object, `java.nio.charset.Charset` v5 @kind object) @signature `La/a/c;.a:(Lb/e;Ljava/nio/charset/Charset;)Ljava/nio/charset/Charset;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07a744.  v2:= 0L;
  #L07a748.  v0:= `@@a.a.c.g` @type ^`b.f` @kind object;
  #L07a74c.  call temp:= `a`(v4, v2, v0) @signature `Lb/e;.a:(JLb/f;)Z` @kind interface;
  #L07a752.  v0:= temp;
  #L07a754.  if v0 == 0 then goto L07a772;
  #L07a758.  v0:= `@@a.a.c.g` @type ^`b.f` @kind object;
  #L07a75c.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L07a762.  v0:= temp;
  #L07a764.  v0:= (`long`) v0 @kind i2l;
  #L07a766.  call `g`(v4, v0) @signature `Lb/e;.g:(J)V` @kind interface;
  #L07a76c.  v5:= `@@a.a.c.e` @type ^`java.nio.charset.Charset` @kind object;
  #L07a770.  return v5 @kind object;
  #L07a772.  v0:= `@@a.a.c.h` @type ^`b.f` @kind object;
  #L07a776.  call temp:= `a`(v4, v2, v0) @signature `Lb/e;.a:(JLb/f;)Z` @kind interface;
  #L07a77c.  v0:= temp;
  #L07a77e.  if v0 == 0 then goto L07a79c;
  #L07a782.  v0:= `@@a.a.c.h` @type ^`b.f` @kind object;
  #L07a786.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L07a78c.  v0:= temp;
  #L07a78e.  v0:= (`long`) v0 @kind i2l;
  #L07a790.  call `g`(v4, v0) @signature `Lb/e;.g:(J)V` @kind interface;
  #L07a796.  v5:= `@@a.a.c.l` @type ^`java.nio.charset.Charset` @kind object;
  #L07a79a.  goto L07a770;
  #L07a79c.  v0:= `@@a.a.c.i` @type ^`b.f` @kind object;
  #L07a7a0.  call temp:= `a`(v4, v2, v0) @signature `Lb/e;.a:(JLb/f;)Z` @kind interface;
  #L07a7a6.  v0:= temp;
  #L07a7a8.  if v0 == 0 then goto L07a7c6;
  #L07a7ac.  v0:= `@@a.a.c.i` @type ^`b.f` @kind object;
  #L07a7b0.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L07a7b6.  v0:= temp;
  #L07a7b8.  v0:= (`long`) v0 @kind i2l;
  #L07a7ba.  call `g`(v4, v0) @signature `Lb/e;.g:(J)V` @kind interface;
  #L07a7c0.  v5:= `@@a.a.c.m` @type ^`java.nio.charset.Charset` @kind object;
  #L07a7c4.  goto L07a770;
  #L07a7c6.  v0:= `@@a.a.c.j` @type ^`b.f` @kind object;
  #L07a7ca.  call temp:= `a`(v4, v2, v0) @signature `Lb/e;.a:(JLb/f;)Z` @kind interface;
  #L07a7d0.  v0:= temp;
  #L07a7d2.  if v0 == 0 then goto L07a7f0;
  #L07a7d6.  v0:= `@@a.a.c.j` @type ^`b.f` @kind object;
  #L07a7da.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L07a7e0.  v0:= temp;
  #L07a7e2.  v0:= (`long`) v0 @kind i2l;
  #L07a7e4.  call `g`(v4, v0) @signature `Lb/e;.g:(J)V` @kind interface;
  #L07a7ea.  v5:= `@@a.a.c.n` @type ^`java.nio.charset.Charset` @kind object;
  #L07a7ee.  goto L07a770;
  #L07a7f0.  v0:= `@@a.a.c.k` @type ^`b.f` @kind object;
  #L07a7f4.  call temp:= `a`(v4, v2, v0) @signature `Lb/e;.a:(JLb/f;)Z` @kind interface;
  #L07a7fa.  v0:= temp;
  #L07a7fc.  if v0 == 0 then goto L07a770;
  #L07a800.  v0:= `@@a.a.c.k` @type ^`b.f` @kind object;
  #L07a804.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L07a80a.  v0:= temp;
  #L07a80c.  v0:= (`long`) v0 @kind i2l;
  #L07a80e.  call `g`(v4, v0) @signature `Lb/e;.g:(J)V` @kind interface;
  #L07a814.  v5:= `@@a.a.c.o` @type ^`java.nio.charset.Charset` @kind object;
  #L07a818.  goto L07a770;
}
procedure `java.util.List` `a`(`java.util.List` v1 @kind object) @signature `La/a/c;.a:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L07a82c.  v0:= new `java.util.ArrayList`;
  #L07a830.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L07a836.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L07a83c.  v0:= temp @kind object;
  #L07a83e.  return v0 @kind object;
}
procedure `java.util.List` `a`(`java.lang.Object`[] v1 @kind object) @signature `La/a/c;.a:([Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L07a850.  call temp:= `clone`(v1) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L07a856.  v0:= temp @kind object;
  #L07a858.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L07a85c.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L07a862.  v0:= temp @kind object;
  #L07a864.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L07a86a.  v0:= temp @kind object;
  #L07a86c.  return v0 @kind object;
}
procedure `java.util.List` `a`(`java.lang.Object`[] v9 @kind object, `java.lang.Object`[] v10 @kind object) @signature `La/a/c;.a:([Ljava/lang/Object;[Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L07a880.  v1:= 0I;
  #L07a882.  v3:= new `java.util.ArrayList`;
  #L07a886.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L07a88c.  v4:= length @variable v9;
  #L07a88e.  v2:= v1;
  #L07a890.  if v2 >= v4 then goto L07a8c4;
  #L07a894.  v5:= v9[v2] @kind object;
  #L07a898.  v6:= length @variable v10;
  #L07a89a.  v0:= v1;
  #L07a89c.  if v0 >= v6 then goto L07a8b6;
  #L07a8a0.  v7:= v10[v0] @kind object;
  #L07a8a4.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L07a8aa.  v8:= temp;
  #L07a8ac.  if v8 == 0 then goto L07a8be;
  #L07a8b0.  call temp:= `add`(v3, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07a8b6.  v0:= v2 + 1;
  #L07a8ba.  v2:= v0;
  #L07a8bc.  goto L07a890;
  #L07a8be.  v0:= v0 + 1;
  #L07a8c2.  goto L07a89c;
  #L07a8c4.  return v3 @kind object;
}
procedure `java.util.concurrent.ThreadFactory` `a`(`java.lang.String` v1 @kind object, `boolean` v2 ) @signature `La/a/c;.a:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L07a8d8.  v0:= new `a.a.c$1`;
  #L07a8dc.  call `<init>`(v0, v1, v2) @signature `La/a/c$1;.<init>:(Ljava/lang/String;Z)V` @kind direct;
  #L07a8e2.  return v0 @kind object;
}
procedure `void` `a`(`long` v4 , `long` v6 , `long` v8 ) @signature `La/a/c;.a:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07a8f4.  v0:= v6 ^| v8 @kind long;
  #L07a8f8.  v2:= 0L;
  #L07a8fc.  v0:= lcmp(v0, v2);
  #L07a900.  if v0 < 0 then goto L07a918;
  #L07a904.  v0:= lcmp(v6, v4);
  #L07a908.  if v0 > 0 then goto L07a918;
  #L07a90c.  v0:= v4 - v6 @kind long;
  #L07a910.  v0:= lcmp(v0, v8);
  #L07a914.  if v0 >= 0 then goto L07a924;
  #L07a918.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L07a91c.  call `<init>`(v0) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L07a922.  throw v0;
  #L07a924.  return @kind void;
}
procedure `void` `a`(`java.io.Closeable` v1 @kind object) @signature `La/a/c;.a:(Ljava/io/Closeable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L07a938.  if v1 == 0 then goto L07a942;
  #Try_start0.  
  #L07a93c.  call `close`(v1) @signature `Ljava/io/Closeable;.close:()V` @kind interface;
  #Try_end0.  
  #L07a942.  return @kind void;
  #L07a944.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L07a946.  throw v0;
  #L07a948.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L07a94a.  goto L07a942;
  catch `java.lang.RuntimeException` @[Try_start0..Try_end0] goto L07a944;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L07a948;
}
procedure `void` `a`(`java.net.Socket` v2 @kind object) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07a96c.  if v2 == 0 then goto L07a976;
  #Try_start0.  
  #L07a970.  call `close`(v2) @signature `Ljava/net/Socket;.close:()V` @kind virtual;
  #Try_end0.  
  #L07a976.  return @kind void;
  #L07a978.  v0:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L07a97a.  call temp:= `a`(v0) @signature `La/a/c;.a:(Ljava/lang/AssertionError;)Z` @kind static;
  #L07a980.  v1:= temp;
  #L07a982.  if v1 != 0 then goto L07a976;
  #L07a986.  throw v0;
  #L07a988.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L07a98a.  throw v0;
  #L07a98c.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L07a98e.  goto L07a976;
  catch `java.lang.AssertionError` @[Try_start0..Try_end0] goto L07a978;
  catch `java.lang.RuntimeException` @[Try_start0..Try_end0] goto L07a988;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L07a98c;
}
procedure `boolean` `a`(`b.r` v1 @kind object, `int` v2 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `La/a/c;.a:(Lb/r;ILjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #Try_start0.  
  #L07a9b4.  call temp:= `b`(v1, v2, v3) @signature `La/a/c;.b:(Lb/r;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #Try_end0.  
  #L07a9ba.  v0:= temp;
  #L07a9bc.  return v0;
  #L07a9be.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L07a9c0.  v0:= 0I;
  #L07a9c2.  goto L07a9bc;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L07a9be;
}
procedure `boolean` `a`(`java.lang.AssertionError` v2 @kind object) @signature `La/a/c;.a:(Ljava/lang/AssertionError;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07a9e4.  call temp:= `getCause`(v2) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L07a9ea.  v0:= temp @kind object;
  #L07a9ec.  if v0 == 0 then goto L07aa18;
  #L07a9f0.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L07a9f6.  v0:= temp @kind object;
  #L07a9f8.  if v0 == 0 then goto L07aa18;
  #L07a9fc.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L07aa02.  v0:= temp @kind object;
  #L07aa04.  v1:= "getsockname failed" @kind object;
  #L07aa08.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L07aa0e.  v0:= temp;
  #L07aa10.  if v0 == 0 then goto L07aa18;
  #L07aa14.  v0:= 1I;
  #L07aa16.  return v0;
  #L07aa18.  v0:= 0I;
  #L07aa1a.  goto L07aa16;
}
procedure `boolean` `a`(`java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L07aa2c.  if v1 == v2 then goto L07aa40;
  #L07aa30.  if v1 == 0 then goto L07aa44;
  #L07aa34.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L07aa3a.  v0:= temp;
  #L07aa3c.  if v0 == 0 then goto L07aa44;
  #L07aa40.  v0:= 1I;
  #L07aa42.  return v0;
  #L07aa44.  v0:= 0I;
  #L07aa46.  goto L07aa42;
}
procedure `java.lang.Object`[] `a`(`java.lang.Class` v2 @kind object, `java.lang.Object`[] v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `La/a/c;.a:(Ljava/lang/Class;[Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07aa58.  call temp:= `a`(v3, v4) @signature `La/a/c;.a:([Ljava/lang/Object;[Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L07aa5e.  v1:= temp @kind object;
  #L07aa60.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07aa66.  v0:= temp;
  #L07aa68.  call temp:= `newInstance`(v2, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L07aa6e.  v0:= temp @kind object;
  #L07aa70.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L07aa74.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L07aa78.  call temp:= `toArray`(v1, v0) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L07aa7e.  v0:= temp @kind object;
  #L07aa80.  return v0 @kind object;
}
procedure `java.lang.String`[] `a`(`java.lang.String`[] v3 @kind object, `java.lang.String` v4 @kind object) @signature `La/a/c;.a:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L07aa94.  v2:= 0I;
  #L07aa96.  v0:= length @variable v3;
  #L07aa98.  v0:= v0 + 1;
  #L07aa9c.  v0:= new `java.lang.String`[v0];
  #L07aaa0.  v1:= length @variable v3;
  #L07aaa2.  call `arraycopy`(v3, v2, v0, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L07aaa8.  v1:= length @variable v0;
  #L07aaaa.  v1:= v1 + -1;
  #L07aaae.  v0[v1]:= v4 @kind object;
  #L07aab2.  return v0 @kind object;
}
procedure `int` `b`(`java.lang.String` v4 @kind object) @signature `La/a/c;.b:(Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07aac4.  v0:= 0I;
  #L07aac6.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L07aacc.  v1:= temp;
  #L07aace.  if v0 >= v1 then goto L07aaf2;
  #L07aad2.  call temp:= `charAt`(v4, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L07aad8.  v2:= temp;
  #L07aada.  v3:= 31I;
  #L07aade.  if v2 <= v3 then goto L07aaea;
  #L07aae2.  v3:= 127I;
  #L07aae6.  if v2 < v3 then goto L07aaec;
  #L07aaea.  return v0;
  #L07aaec.  v0:= v0 + 1;
  #L07aaf0.  goto L07aace;
  #L07aaf2.  v0:= -1I;
  #L07aaf4.  goto L07aaea;
}
procedure `int` `b`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `La/a/c;.b:(Ljava/lang/String;II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07ab08.  v0:= v4 + -1;
  #L07ab0c.  if v0 < v3 then goto L07ab22;
  #L07ab10.  call temp:= `charAt`(v2, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L07ab16.  v1:= temp;
  #L07ab18.  goto L07ab2c;
  #L07ab1e.  v3:= v0 + 1;
  #L07ab22.  return v3;
  #L07ab24.  v0:= v0 + -1;
  #L07ab28.  goto L07ab0c;
  #L07ab2a.  
  #L07ab2c.  switch v1
                  | 9 => goto L07ab24
                  | 10 => goto L07ab24
                  | 12 => goto L07ab24
                  | 13 => goto L07ab24
                  | 32 => goto L07ab24
                  | else => goto L07ab1e;
}
procedure `boolean` `b`(`b.r` v12 @kind object, `int` v13 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `La/a/c;.b:(Lb/r;ILjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L07ab68.  v2:= 9223372036854775807L;
  #L07ab72.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L07ab78.  v6:= temp @kind wide;
  #L07ab7a.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07ab80.  v0:= temp @kind object;
  #L07ab82.  call temp:= `c_`(v0) @signature `Lb/s;.c_:()Z` @kind virtual;
  #L07ab88.  v0:= temp;
  #L07ab8a.  if v0 == 0 then goto L07ac0a;
  #L07ab8e.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07ab94.  v0:= temp @kind object;
  #L07ab96.  call temp:= `d`(v0) @signature `Lb/s;.d:()J` @kind virtual;
  #L07ab9c.  v0:= temp @kind wide;
  #L07ab9e.  v0:= v0 - v6 @kind long;
  #L07aba0.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07aba6.  v4:= temp @kind object;
  #L07aba8.  v8:= (`long`) v13 @kind i2l;
  #L07abaa.  call temp:= `toNanos`(v14, v8) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L07abb0.  v8:= temp @kind wide;
  #L07abb2.  call temp:= `min`(v0, v8) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L07abb8.  v8:= temp @kind wide;
  #L07abba.  v8:= v8 + v6 @kind long;
  #L07abbc.  call temp:= `a`(v4, v8) @signature `Lb/s;.a:(J)Lb/s;` @kind virtual;
  #Try_start0.  
  #L07abc2.  v4:= new `b.c`;
  #L07abc6.  call `<init>`(v4) @signature `Lb/c;.<init>:()V` @kind direct;
  #L07abcc.  v8:= 8192L;
  #L07abd0.  call temp:= `a`(v12, v4, v8) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L07abd6.  v8:= temp @kind wide;
  #L07abd8.  v10:= -1L;
  #L07abdc.  v5:= lcmp(v8, v10);
  #L07abe0.  if v5 == 0 then goto L07ac0e;
  #L07abe4.  call `r`(v4) @signature `Lb/c;.r:()V` @kind virtual;
  #Try_end0.  
  #L07abea.  goto L07abcc;
  #L07abec.  v4:= Exception @type ^`java.io.InterruptedIOException` @kind object;
  #L07abee.  v4:= 0I;
  #L07abf0.  v2:= lcmp(v0, v2);
  #L07abf4.  if v2 != 0 then goto L07ac3c;
  #L07abf8.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07abfe.  v0:= temp @kind object;
  #L07ac00.  call temp:= `e_`(v0) @signature `Lb/s;.e_:()Lb/s;` @kind virtual;
  #L07ac06.  v0:= v4;
  #L07ac08.  return v0;
  #L07ac0a.  v0:= v2 @kind wide;
  #L07ac0c.  goto L07aba0;
  #L07ac0e.  v4:= 1I;
  #L07ac10.  v2:= lcmp(v0, v2);
  #L07ac14.  if v2 != 0 then goto L07ac2a;
  #L07ac18.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07ac1e.  v0:= temp @kind object;
  #L07ac20.  call temp:= `e_`(v0) @signature `Lb/s;.e_:()Lb/s;` @kind virtual;
  #L07ac26.  v0:= v4;
  #L07ac28.  goto L07ac08;
  #L07ac2a.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07ac30.  v2:= temp @kind object;
  #L07ac32.  v0:= v0 + v6 @kind long;
  #L07ac34.  call temp:= `a`(v2, v0) @signature `Lb/s;.a:(J)Lb/s;` @kind virtual;
  #L07ac3a.  goto L07ac26;
  #L07ac3c.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07ac42.  v2:= temp @kind object;
  #L07ac44.  v0:= v0 + v6 @kind long;
  #L07ac46.  call temp:= `a`(v2, v0) @signature `Lb/s;.a:(J)Lb/s;` @kind virtual;
  #L07ac4c.  goto L07ac06;
  #L07ac4e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07ac50.  v2:= lcmp(v0, v2);
  #L07ac54.  if v2 != 0 then goto L07ac68;
  #L07ac58.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07ac5e.  v0:= temp @kind object;
  #L07ac60.  call temp:= `e_`(v0) @signature `Lb/s;.e_:()Lb/s;` @kind virtual;
  #L07ac66.  throw v4;
  #L07ac68.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07ac6e.  v2:= temp @kind object;
  #L07ac70.  v0:= v0 + v6 @kind long;
  #L07ac72.  call temp:= `a`(v2, v0) @signature `Lb/s;.a:(J)Lb/s;` @kind virtual;
  #L07ac78.  goto L07ac66;
  catch `java.io.InterruptedIOException` @[Try_start0..Try_end0] goto L07abec;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07ac4e;
}
procedure `java.lang.String` `c`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `La/a/c;.c:(Ljava/lang/String;II)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07ac9c.  call temp:= `a`(v2, v3, v4) @signature `La/a/c;.a:(Ljava/lang/String;II)I` @kind static;
  #L07aca2.  v0:= temp;
  #L07aca4.  call temp:= `b`(v2, v0, v4) @signature `La/a/c;.b:(Ljava/lang/String;II)I` @kind static;
  #L07acaa.  v1:= temp;
  #L07acac.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L07acb2.  v0:= temp @kind object;
  #L07acb4.  return v0 @kind object;
}
procedure `boolean` `c`(`java.lang.String` v1 @kind object) @signature `La/a/c;.c:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L07acc8.  v0:= `@@a.a.c.p` @type ^`java.util.regex.Pattern` @kind object;
  #L07accc.  call temp:= `matcher`(v0, v1) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L07acd2.  v0:= temp @kind object;
  #L07acd4.  call temp:= `matches`(v0) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L07acda.  v0:= temp;
  #L07acdc.  return v0;
}
procedure `boolean` `d`(`java.lang.String` v5 @kind object) @signature `La/a/c;.d:(Ljava/lang/String;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L07acf0.  v2:= 1I;
  #L07acf2.  v1:= 0I;
  #L07acf4.  v0:= v1;
  #L07acf6.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L07acfc.  v3:= temp;
  #L07acfe.  if v0 >= v3 then goto L07ad1c;
  #L07ad02.  call temp:= `charAt`(v5, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L07ad08.  v3:= temp;
  #L07ad0a.  v4:= 31I;
  #L07ad0e.  if v3 <= v4 then goto L07ad1a;
  #L07ad12.  v4:= 127I;
  #L07ad16.  if v3 < v4 then goto L07ad1e;
  #L07ad1a.  v1:= v2;
  #L07ad1c.  return v1;
  #L07ad1e.  v4:= " #%/:?@[\\]" @kind object;
  #L07ad22.  call temp:= `indexOf`(v4, v3) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L07ad28.  v3:= temp;
  #L07ad2a.  v4:= -1I;
  #L07ad2c.  if v3 == v4 then goto L07ad34;
  #L07ad30.  v1:= v2;
  #L07ad32.  goto L07ad1c;
  #L07ad34.  v0:= v0 + 1;
  #L07ad38.  goto L07acf6;
}
