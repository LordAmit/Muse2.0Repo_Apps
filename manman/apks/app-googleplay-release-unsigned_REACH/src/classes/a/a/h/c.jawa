record `a.a.h.c` @kind class @AccessFlag FINAL {
  `java.lang.String` `a.a.h.c.a` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.h.c.b` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.h.c.c` @AccessFlag PRIVATE;
  `int` `a.a.h.c.d` @AccessFlag PRIVATE;
  `int` `a.a.h.c.e` @AccessFlag PRIVATE;
  `int` `a.a.h.c.f` @AccessFlag PRIVATE;
  `char`[] `a.a.h.c.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.h.c` v1 @kind this, `javax.security.auth.x500.X500Principal` v2 @kind object) @signature `La/a/h/c;.<init>:(Ljavax/security/auth/x500/X500Principal;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L084288.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08428e.  v0:= "RFC2253" @kind object;
  #L084292.  call temp:= `getName`(v2, v0) @signature `Ljavax/security/auth/x500/X500Principal;.getName:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L084298.  v0:= temp @kind object;
  #L08429a.  v1.`a.a.h.c.a` @type ^`java.lang.String` := v0 @kind object;
  #L08429e.  v0:= v1.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L0842a2.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L0842a8.  v0:= temp;
  #L0842aa.  v1.`a.a.h.c.b` @type ^`int` := v0;
  #L0842ae.  return @kind void;
}
procedure `int` `a`(`a.a.h.c` v8 @kind this, `int` v9 ) @signature `La/a/h/c;.a:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L0842c0.  v7:= 97I;
  #L0842c4.  v6:= 70I;
  #L0842c8.  v5:= 65I;
  #L0842cc.  v4:= 57I;
  #L0842d0.  v3:= 48I;
  #L0842d4.  v0:= v9 + 1;
  #L0842d8.  v1:= v8.`a.a.h.c.b` @type ^`int`;
  #L0842dc.  if v0 < v1 then goto L084316;
  #L0842e0.  v0:= new `java.lang.IllegalStateException`;
  #L0842e4.  v1:= new `java.lang.StringBuilder`;
  #L0842e8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0842ee.  v2:= "Malformed DN: " @kind object;
  #L0842f2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0842f8.  v1:= temp @kind object;
  #L0842fa.  v2:= v8.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L0842fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L084304.  v1:= temp @kind object;
  #L084306.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08430c.  v1:= temp @kind object;
  #L08430e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L084314.  throw v0;
  #L084316.  v0:= v8.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08431a.  v0:= v0[v9] @kind char;
  #L08431e.  if v0 < v3 then goto L08434a;
  #L084322.  if v0 > v4 then goto L08434a;
  #L084326.  v0:= v0 + -48;
  #L08432a.  v1:= v8.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08432e.  v2:= v9 + 1;
  #L084332.  v1:= v1[v2] @kind char;
  #L084336.  if v1 < v3 then goto L0843a0;
  #L08433a.  if v1 > v4 then goto L0843a0;
  #L08433e.  v1:= v1 + -48;
  #L084342.  v0:= v0 ^< 4;
  #L084346.  v0:= v0 + v1 @kind int;
  #L084348.  return v0;
  #L08434a.  if v0 < v7 then goto L08435c;
  #L08434e.  v1:= 102I;
  #L084352.  if v0 > v1 then goto L08435c;
  #L084356.  v0:= v0 + -87;
  #L08435a.  goto L08432a;
  #L08435c.  if v0 < v5 then goto L08436a;
  #L084360.  if v0 > v6 then goto L08436a;
  #L084364.  v0:= v0 + -55;
  #L084368.  goto L08432a;
  #L08436a.  v0:= new `java.lang.IllegalStateException`;
  #L08436e.  v1:= new `java.lang.StringBuilder`;
  #L084372.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L084378.  v2:= "Malformed DN: " @kind object;
  #L08437c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L084382.  v1:= temp @kind object;
  #L084384.  v2:= v8.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L084388.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08438e.  v1:= temp @kind object;
  #L084390.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L084396.  v1:= temp @kind object;
  #L084398.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08439e.  throw v0;
  #L0843a0.  if v1 < v7 then goto L0843b2;
  #L0843a4.  v2:= 102I;
  #L0843a8.  if v1 > v2 then goto L0843b2;
  #L0843ac.  v1:= v1 + -87;
  #L0843b0.  goto L084342;
  #L0843b2.  if v1 < v5 then goto L0843c0;
  #L0843b6.  if v1 > v6 then goto L0843c0;
  #L0843ba.  v1:= v1 + -55;
  #L0843be.  goto L084342;
  #L0843c0.  v0:= new `java.lang.IllegalStateException`;
  #L0843c4.  v1:= new `java.lang.StringBuilder`;
  #L0843c8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0843ce.  v2:= "Malformed DN: " @kind object;
  #L0843d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0843d8.  v1:= temp @kind object;
  #L0843da.  v2:= v8.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L0843de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0843e4.  v1:= temp @kind object;
  #L0843e6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0843ec.  v1:= temp @kind object;
  #L0843ee.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0843f4.  throw v0;
}
procedure `java.lang.String` `a`(`a.a.h.c` v5 @kind this) @signature `La/a/h/c;.a:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L084408.  v3:= 61I;
  #L08440c.  v2:= 32I;
  #L084410.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084414.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L084418.  if v0 >= v1 then goto L08443a;
  #L08441c.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084420.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084424.  v0:= v0[v1] @kind char;
  #L084428.  if v0 != v2 then goto L08443a;
  #L08442c.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084430.  v0:= v0 + 1;
  #L084434.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L084438.  goto L084410;
  #L08443a.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L08443e.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L084442.  if v0 != v1 then goto L08444a;
  #L084446.  v0:= 0I;
  #L084448.  return v0 @kind object;
  #L08444a.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L08444e.  v5.`a.a.h.c.d` @type ^`int` := v0;
  #L084452.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084456.  v0:= v0 + 1;
  #L08445a.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L08445e.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084462.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L084466.  if v0 >= v1 then goto L084498;
  #L08446a.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08446e.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084472.  v0:= v0[v1] @kind char;
  #L084476.  if v0 == v3 then goto L084498;
  #L08447a.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08447e.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084482.  v0:= v0[v1] @kind char;
  #L084486.  if v0 == v2 then goto L084498;
  #L08448a.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L08448e.  v0:= v0 + 1;
  #L084492.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L084496.  goto L08445e;
  #L084498.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L08449c.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L0844a0.  if v0 < v1 then goto L0844da;
  #L0844a4.  v0:= new `java.lang.IllegalStateException`;
  #L0844a8.  v1:= new `java.lang.StringBuilder`;
  #L0844ac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0844b2.  v2:= "Unexpected end of DN: " @kind object;
  #L0844b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0844bc.  v1:= temp @kind object;
  #L0844be.  v2:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L0844c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0844c8.  v1:= temp @kind object;
  #L0844ca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0844d0.  v1:= temp @kind object;
  #L0844d2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0844d8.  throw v0;
  #L0844da.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0844de.  v5.`a.a.h.c.e` @type ^`int` := v0;
  #L0844e2.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L0844e6.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L0844ea.  v0:= v0[v1] @kind char;
  #L0844ee.  if v0 != v2 then goto L08457e;
  #L0844f2.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0844f6.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L0844fa.  if v0 >= v1 then goto L08452c;
  #L0844fe.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084502.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084506.  v0:= v0[v1] @kind char;
  #L08450a.  if v0 == v3 then goto L08452c;
  #L08450e.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084512.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084516.  v0:= v0[v1] @kind char;
  #L08451a.  if v0 != v2 then goto L08452c;
  #L08451e.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084522.  v0:= v0 + 1;
  #L084526.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L08452a.  goto L0844f2;
  #L08452c.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084530.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084534.  v0:= v0[v1] @kind char;
  #L084538.  if v0 != v3 then goto L084548;
  #L08453c.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084540.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L084544.  if v0 != v1 then goto L08457e;
  #L084548.  v0:= new `java.lang.IllegalStateException`;
  #L08454c.  v1:= new `java.lang.StringBuilder`;
  #L084550.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L084556.  v2:= "Unexpected end of DN: " @kind object;
  #L08455a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L084560.  v1:= temp @kind object;
  #L084562.  v2:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L084566.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08456c.  v1:= temp @kind object;
  #L08456e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L084574.  v1:= temp @kind object;
  #L084576.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08457c.  throw v0;
  #L08457e.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084582.  v0:= v0 + 1;
  #L084586.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L08458a.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L08458e.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L084592.  if v0 >= v1 then goto L0845b4;
  #L084596.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08459a.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L08459e.  v0:= v0[v1] @kind char;
  #L0845a2.  if v0 != v2 then goto L0845b4;
  #L0845a6.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0845aa.  v0:= v0 + 1;
  #L0845ae.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L0845b2.  goto L08458a;
  #L0845b4.  v0:= v5.`a.a.h.c.e` @type ^`int`;
  #L0845b8.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L0845bc.  v0:= v0 - v1 @kind int;
  #L0845be.  v1:= 4I;
  #L0845c0.  if v0 <= v1 then goto L084670;
  #L0845c4.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L0845c8.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L0845cc.  v1:= v1 + 3;
  #L0845d0.  v0:= v0[v1] @kind char;
  #L0845d4.  v1:= 46I;
  #L0845d8.  if v0 != v1 then goto L084670;
  #L0845dc.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L0845e0.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L0845e4.  v0:= v0[v1] @kind char;
  #L0845e8.  v1:= 79I;
  #L0845ec.  if v0 == v1 then goto L084604;
  #L0845f0.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L0845f4.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L0845f8.  v0:= v0[v1] @kind char;
  #L0845fc.  v1:= 111I;
  #L084600.  if v0 != v1 then goto L084670;
  #L084604.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084608.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L08460c.  v1:= v1 + 1;
  #L084610.  v0:= v0[v1] @kind char;
  #L084614.  v1:= 73I;
  #L084618.  if v0 == v1 then goto L084634;
  #L08461c.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084620.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L084624.  v1:= v1 + 1;
  #L084628.  v0:= v0[v1] @kind char;
  #L08462c.  v1:= 105I;
  #L084630.  if v0 != v1 then goto L084670;
  #L084634.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084638.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L08463c.  v1:= v1 + 2;
  #L084640.  v0:= v0[v1] @kind char;
  #L084644.  v1:= 68I;
  #L084648.  if v0 == v1 then goto L084664;
  #L08464c.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084650.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L084654.  v1:= v1 + 2;
  #L084658.  v0:= v0[v1] @kind char;
  #L08465c.  v1:= 100I;
  #L084660.  if v0 != v1 then goto L084670;
  #L084664.  v0:= v5.`a.a.h.c.d` @type ^`int`;
  #L084668.  v0:= v0 + 4;
  #L08466c.  v5.`a.a.h.c.d` @type ^`int` := v0;
  #L084670.  v0:= new `java.lang.String`;
  #L084674.  v1:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084678.  v2:= v5.`a.a.h.c.d` @type ^`int`;
  #L08467c.  v3:= v5.`a.a.h.c.e` @type ^`int`;
  #L084680.  v4:= v5.`a.a.h.c.d` @type ^`int`;
  #L084684.  v3:= v3 - v4 @kind int;
  #L084686.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L08468c.  goto L084448;
}
procedure `java.lang.String` `b`(`a.a.h.c` v5 @kind this) @signature `La/a/h/c;.b:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0846a0.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0846a4.  v0:= v0 + 1;
  #L0846a8.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L0846ac.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0846b0.  v5.`a.a.h.c.d` @type ^`int` := v0;
  #L0846b4.  v0:= v5.`a.a.h.c.d` @type ^`int`;
  #L0846b8.  v5.`a.a.h.c.e` @type ^`int` := v0;
  #L0846bc.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0846c0.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L0846c4.  if v0 != v1 then goto L0846fe;
  #L0846c8.  v0:= new `java.lang.IllegalStateException`;
  #L0846cc.  v1:= new `java.lang.StringBuilder`;
  #L0846d0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0846d6.  v2:= "Unexpected end of DN: " @kind object;
  #L0846da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0846e0.  v1:= temp @kind object;
  #L0846e2.  v2:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L0846e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0846ec.  v1:= temp @kind object;
  #L0846ee.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0846f4.  v1:= temp @kind object;
  #L0846f6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0846fc.  throw v0;
  #L0846fe.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084702.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084706.  v0:= v0[v1] @kind char;
  #L08470a.  v1:= 34I;
  #L08470e.  if v0 != v1 then goto L08474c;
  #L084712.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084716.  v0:= v0 + 1;
  #L08471a.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L08471e.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084722.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L084726.  if v0 >= v1 then goto L0847a8;
  #L08472a.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08472e.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084732.  v0:= v0[v1] @kind char;
  #L084736.  v1:= 32I;
  #L08473a.  if v0 != v1 then goto L0847a8;
  #L08473e.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084742.  v0:= v0 + 1;
  #L084746.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L08474a.  goto L08471e;
  #L08474c.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084750.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084754.  v0:= v0[v1] @kind char;
  #L084758.  v1:= 92I;
  #L08475c.  if v0 != v1 then goto L08478e;
  #L084760.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084764.  v1:= v5.`a.a.h.c.e` @type ^`int`;
  #L084768.  call temp:= `e`(v5) @signature `La/a/h/c;.e:()C` @kind direct;
  #L08476e.  v2:= temp;
  #L084770.  v0[v1]:= v2 @kind char;
  #L084774.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084778.  v0:= v0 + 1;
  #L08477c.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L084780.  v0:= v5.`a.a.h.c.e` @type ^`int`;
  #L084784.  v0:= v0 + 1;
  #L084788.  v5.`a.a.h.c.e` @type ^`int` := v0;
  #L08478c.  goto L0846bc;
  #L08478e.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084792.  v1:= v5.`a.a.h.c.e` @type ^`int`;
  #L084796.  v2:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08479a.  v3:= v5.`a.a.h.c.c` @type ^`int`;
  #L08479e.  v2:= v2[v3] @kind char;
  #L0847a2.  v0[v1]:= v2 @kind char;
  #L0847a6.  goto L084774;
  #L0847a8.  v0:= new `java.lang.String`;
  #L0847ac.  v1:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L0847b0.  v2:= v5.`a.a.h.c.d` @type ^`int`;
  #L0847b4.  v3:= v5.`a.a.h.c.e` @type ^`int`;
  #L0847b8.  v4:= v5.`a.a.h.c.d` @type ^`int`;
  #L0847bc.  v3:= v3 - v4 @kind int;
  #L0847be.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L0847c4.  return v0 @kind object;
}
procedure `java.lang.String` `c`(`a.a.h.c` v5 @kind this) @signature `La/a/h/c;.c:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0847d8.  v3:= 32I;
  #L0847dc.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0847e0.  v0:= v0 + 4;
  #L0847e4.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L0847e8.  if v0 < v1 then goto L084822;
  #L0847ec.  v0:= new `java.lang.IllegalStateException`;
  #L0847f0.  v1:= new `java.lang.StringBuilder`;
  #L0847f4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0847fa.  v2:= "Unexpected end of DN: " @kind object;
  #L0847fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L084804.  v1:= temp @kind object;
  #L084806.  v2:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L08480a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L084810.  v1:= temp @kind object;
  #L084812.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L084818.  v1:= temp @kind object;
  #L08481a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L084820.  throw v0;
  #L084822.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084826.  v5.`a.a.h.c.d` @type ^`int` := v0;
  #L08482a.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L08482e.  v0:= v0 + 1;
  #L084832.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L084836.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L08483a.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L08483e.  if v0 == v1 then goto L08487e;
  #L084842.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084846.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L08484a.  v0:= v0[v1] @kind char;
  #L08484e.  v1:= 43I;
  #L084852.  if v0 == v1 then goto L08487e;
  #L084856.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08485a.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L08485e.  v0:= v0[v1] @kind char;
  #L084862.  v1:= 44I;
  #L084866.  if v0 == v1 then goto L08487e;
  #L08486a.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08486e.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084872.  v0:= v0[v1] @kind char;
  #L084876.  v1:= 59I;
  #L08487a.  if v0 != v1 then goto L0848d6;
  #L08487e.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084882.  v5.`a.a.h.c.e` @type ^`int` := v0;
  #L084886.  v0:= v5.`a.a.h.c.e` @type ^`int`;
  #L08488a.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L08488e.  v2:= v0 - v1 @kind int;
  #L084892.  v0:= 5I;
  #L084894.  if v2 < v0 then goto L0848a0;
  #L084898.  v0:= v2 ^& 1;
  #L08489c.  if v0 != 0 then goto L084972;
  #L0848a0.  v0:= new `java.lang.IllegalStateException`;
  #L0848a4.  v1:= new `java.lang.StringBuilder`;
  #L0848a8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0848ae.  v2:= "Unexpected end of DN: " @kind object;
  #L0848b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0848b8.  v1:= temp @kind object;
  #L0848ba.  v2:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L0848be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0848c4.  v1:= temp @kind object;
  #L0848c6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0848cc.  v1:= temp @kind object;
  #L0848ce.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0848d4.  throw v0;
  #L0848d6.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L0848da.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L0848de.  v0:= v0[v1] @kind char;
  #L0848e2.  if v0 != v3 then goto L084924;
  #L0848e6.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0848ea.  v5.`a.a.h.c.e` @type ^`int` := v0;
  #L0848ee.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0848f2.  v0:= v0 + 1;
  #L0848f6.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L0848fa.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0848fe.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L084902.  if v0 >= v1 then goto L084886;
  #L084906.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08490a.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L08490e.  v0:= v0[v1] @kind char;
  #L084912.  if v0 != v3 then goto L084886;
  #L084916.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L08491a.  v0:= v0 + 1;
  #L08491e.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L084922.  goto L0848fa;
  #L084924.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084928.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L08492c.  v0:= v0[v1] @kind char;
  #L084930.  v1:= 65I;
  #L084934.  if v0 < v1 then goto L084962;
  #L084938.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08493c.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084940.  v0:= v0[v1] @kind char;
  #L084944.  v1:= 70I;
  #L084948.  if v0 > v1 then goto L084962;
  #L08494c.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084950.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084954.  v2:= v0[v1] @kind char;
  #L084958.  v2:= v2 + 32;
  #L08495c.  v2:= (`char`) v2 @kind i2c;
  #L08495e.  v0[v1]:= v2 @kind char;
  #L084962.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084966.  v0:= v0 + 1;
  #L08496a.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L08496e.  goto L084836;
  #L084972.  v0:= v2 / 2;
  #L084976.  v3:= new `byte`[v0];
  #L08497a.  v1:= 0I;
  #L08497c.  v0:= v5.`a.a.h.c.d` @type ^`int`;
  #L084980.  v0:= v0 + 1;
  #L084984.  v4:= length @variable v3;
  #L084986.  if v1 >= v4 then goto L0849a2;
  #L08498a.  call temp:= `a`(v5, v0) @signature `La/a/h/c;.a:(I)I` @kind direct;
  #L084990.  v4:= temp;
  #L084992.  v4:= (`byte`) v4 @kind i2b;
  #L084994.  v3[v1]:= v4 @kind byte;
  #L084998.  v0:= v0 + 2;
  #L08499c.  v1:= v1 + 1;
  #L0849a0.  goto L084984;
  #L0849a2.  v0:= new `java.lang.String`;
  #L0849a6.  v1:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L0849aa.  v3:= v5.`a.a.h.c.d` @type ^`int`;
  #L0849ae.  call `<init>`(v0, v1, v3, v2) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L0849b4.  return v0 @kind object;
}
procedure `java.lang.String` `d`(`a.a.h.c` v5 @kind this) @signature `La/a/h/c;.d:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0849c8.  v4:= 32I;
  #L0849cc.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0849d0.  v5.`a.a.h.c.d` @type ^`int` := v0;
  #L0849d4.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0849d8.  v5.`a.a.h.c.e` @type ^`int` := v0;
  #L0849dc.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0849e0.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L0849e4.  if v0 < v1 then goto L084a06;
  #L0849e8.  v0:= new `java.lang.String`;
  #L0849ec.  v1:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L0849f0.  v2:= v5.`a.a.h.c.d` @type ^`int`;
  #L0849f4.  v3:= v5.`a.a.h.c.e` @type ^`int`;
  #L0849f8.  v4:= v5.`a.a.h.c.d` @type ^`int`;
  #L0849fc.  v3:= v3 - v4 @kind int;
  #L0849fe.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L084a04.  return v0 @kind object;
  #L084a06.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084a0a.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084a0e.  v0:= v0[v1] @kind char;
  #L084a12.  goto L084b5c;
  #L084a18.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084a1c.  v1:= v5.`a.a.h.c.e` @type ^`int`;
  #L084a20.  v2:= v1 + 1;
  #L084a24.  v5.`a.a.h.c.e` @type ^`int` := v2;
  #L084a28.  v2:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084a2c.  v3:= v5.`a.a.h.c.c` @type ^`int`;
  #L084a30.  v2:= v2[v3] @kind char;
  #L084a34.  v0[v1]:= v2 @kind char;
  #L084a38.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084a3c.  v0:= v0 + 1;
  #L084a40.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L084a44.  goto L0849dc;
  #L084a46.  v0:= new `java.lang.String`;
  #L084a4a.  v1:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084a4e.  v2:= v5.`a.a.h.c.d` @type ^`int`;
  #L084a52.  v3:= v5.`a.a.h.c.e` @type ^`int`;
  #L084a56.  v4:= v5.`a.a.h.c.d` @type ^`int`;
  #L084a5a.  v3:= v3 - v4 @kind int;
  #L084a5c.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L084a62.  goto L084a04;
  #L084a64.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084a68.  v1:= v5.`a.a.h.c.e` @type ^`int`;
  #L084a6c.  v2:= v1 + 1;
  #L084a70.  v5.`a.a.h.c.e` @type ^`int` := v2;
  #L084a74.  call temp:= `e`(v5) @signature `La/a/h/c;.e:()C` @kind direct;
  #L084a7a.  v2:= temp;
  #L084a7c.  v0[v1]:= v2 @kind char;
  #L084a80.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084a84.  v0:= v0 + 1;
  #L084a88.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L084a8c.  goto L0849dc;
  #L084a8e.  v0:= v5.`a.a.h.c.e` @type ^`int`;
  #L084a92.  v5.`a.a.h.c.f` @type ^`int` := v0;
  #L084a96.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084a9a.  v0:= v0 + 1;
  #L084a9e.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L084aa2.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084aa6.  v1:= v5.`a.a.h.c.e` @type ^`int`;
  #L084aaa.  v2:= v1 + 1;
  #L084aae.  v5.`a.a.h.c.e` @type ^`int` := v2;
  #L084ab2.  v0[v1]:= v4 @kind char;
  #L084ab6.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084aba.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L084abe.  if v0 >= v1 then goto L084af4;
  #L084ac2.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084ac6.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084aca.  v0:= v0[v1] @kind char;
  #L084ace.  if v0 != v4 then goto L084af4;
  #L084ad2.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084ad6.  v1:= v5.`a.a.h.c.e` @type ^`int`;
  #L084ada.  v2:= v1 + 1;
  #L084ade.  v5.`a.a.h.c.e` @type ^`int` := v2;
  #L084ae2.  v0[v1]:= v4 @kind char;
  #L084ae6.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084aea.  v0:= v0 + 1;
  #L084aee.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L084af2.  goto L084ab6;
  #L084af4.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084af8.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L084afc.  if v0 == v1 then goto L084b3c;
  #L084b00.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084b04.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084b08.  v0:= v0[v1] @kind char;
  #L084b0c.  v1:= 44I;
  #L084b10.  if v0 == v1 then goto L084b3c;
  #L084b14.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084b18.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084b1c.  v0:= v0[v1] @kind char;
  #L084b20.  v1:= 43I;
  #L084b24.  if v0 == v1 then goto L084b3c;
  #L084b28.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084b2c.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084b30.  v0:= v0[v1] @kind char;
  #L084b34.  v1:= 59I;
  #L084b38.  if v0 != v1 then goto L0849dc;
  #L084b3c.  v0:= new `java.lang.String`;
  #L084b40.  v1:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084b44.  v2:= v5.`a.a.h.c.d` @type ^`int`;
  #L084b48.  v3:= v5.`a.a.h.c.f` @type ^`int`;
  #L084b4c.  v4:= v5.`a.a.h.c.d` @type ^`int`;
  #L084b50.  v3:= v3 - v4 @kind int;
  #L084b52.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L084b58.  goto L084a04;
  #L084b5c.  switch v0
                  | 32 => goto L084a8e
                  | 43 => goto L084a46
                  | 44 => goto L084a46
                  | 59 => goto L084a46
                  | 92 => goto L084a64
                  | else => goto L084a18;
}
procedure `char` `e`(`a.a.h.c` v3 @kind this) @signature `La/a/h/c;.e:()C` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L084b98.  v0:= v3.`a.a.h.c.c` @type ^`int`;
  #L084b9c.  v0:= v0 + 1;
  #L084ba0.  v3.`a.a.h.c.c` @type ^`int` := v0;
  #L084ba4.  v0:= v3.`a.a.h.c.c` @type ^`int`;
  #L084ba8.  v1:= v3.`a.a.h.c.b` @type ^`int`;
  #L084bac.  if v0 != v1 then goto L084be6;
  #L084bb0.  v0:= new `java.lang.IllegalStateException`;
  #L084bb4.  v1:= new `java.lang.StringBuilder`;
  #L084bb8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L084bbe.  v2:= "Unexpected end of DN: " @kind object;
  #L084bc2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L084bc8.  v1:= temp @kind object;
  #L084bca.  v2:= v3.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L084bce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L084bd4.  v1:= temp @kind object;
  #L084bd6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L084bdc.  v1:= temp @kind object;
  #L084bde.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L084be4.  throw v0;
  #L084be6.  v0:= v3.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084bea.  v1:= v3.`a.a.h.c.c` @type ^`int`;
  #L084bee.  v0:= v0[v1] @kind char;
  #L084bf2.  goto L084c10;
  #L084bf8.  call temp:= `f`(v3) @signature `La/a/h/c;.f:()C` @kind direct;
  #L084bfe.  v0:= temp;
  #L084c00.  return v0;
  #L084c02.  v0:= v3.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084c06.  v1:= v3.`a.a.h.c.c` @type ^`int`;
  #L084c0a.  v0:= v0[v1] @kind char;
  #L084c0e.  goto L084c00;
  #L084c10.  switch v0
                  | 32 => goto L084c02
                  | 34 => goto L084c02
                  | 35 => goto L084c02
                  | 37 => goto L084c02
                  | 42 => goto L084c02
                  | 43 => goto L084c02
                  | 44 => goto L084c02
                  | 59 => goto L084c02
                  | 60 => goto L084c02
                  | 61 => goto L084c02
                  | 62 => goto L084c02
                  | 92 => goto L084c02
                  | 95 => goto L084c02
                  | else => goto L084bf8;
}
procedure `char` `f`(`a.a.h.c` v8 @kind this) @signature `La/a/h/c;.f:()C` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L084c8c.  v6:= 128I;
  #L084c90.  v2:= 63I;
  #L084c94.  v0:= v8.`a.a.h.c.c` @type ^`int`;
  #L084c98.  call temp:= `a`(v8, v0) @signature `La/a/h/c;.a:(I)I` @kind direct;
  #L084c9e.  v1:= temp;
  #L084ca0.  v0:= v8.`a.a.h.c.c` @type ^`int`;
  #L084ca4.  v0:= v0 + 1;
  #L084ca8.  v8.`a.a.h.c.c` @type ^`int` := v0;
  #L084cac.  if v1 >= v6 then goto L084cb4;
  #L084cb0.  v0:= (`char`) v1 @kind i2c;
  #L084cb2.  return v0;
  #L084cb4.  v0:= 192I;
  #L084cb8.  if v1 < v0 then goto L084d6a;
  #L084cbc.  v0:= 247I;
  #L084cc0.  if v1 > v0 then goto L084d6a;
  #L084cc4.  v0:= 223I;
  #L084cc8.  if v1 > v0 then goto L084d0e;
  #L084ccc.  v0:= 1I;
  #L084cce.  v1:= v1 ^& 31;
  #L084cd2.  v3:= 0I;
  #L084cd4.  v7:= v3;
  #L084cd6.  v3:= v1;
  #L084cd8.  v1:= v7;
  #L084cda.  if v1 >= v0 then goto L084d66;
  #L084cde.  v4:= v8.`a.a.h.c.c` @type ^`int`;
  #L084ce2.  v4:= v4 + 1;
  #L084ce6.  v8.`a.a.h.c.c` @type ^`int` := v4;
  #L084cea.  v4:= v8.`a.a.h.c.c` @type ^`int`;
  #L084cee.  v5:= v8.`a.a.h.c.b` @type ^`int`;
  #L084cf2.  if v4 == v5 then goto L084d0a;
  #L084cf6.  v4:= v8.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084cfa.  v5:= v8.`a.a.h.c.c` @type ^`int`;
  #L084cfe.  v4:= v4[v5] @kind char;
  #L084d02.  v5:= 92I;
  #L084d06.  if v4 == v5 then goto L084d26;
  #L084d0a.  v0:= v2;
  #L084d0c.  goto L084cb2;
  #L084d0e.  v0:= 239I;
  #L084d12.  if v1 > v0 then goto L084d1e;
  #L084d16.  v0:= 2I;
  #L084d18.  v1:= v1 ^& 15;
  #L084d1c.  goto L084cd2;
  #L084d1e.  v0:= 3I;
  #L084d20.  v1:= v1 ^& 7;
  #L084d24.  goto L084cd2;
  #L084d26.  v4:= v8.`a.a.h.c.c` @type ^`int`;
  #L084d2a.  v4:= v4 + 1;
  #L084d2e.  v8.`a.a.h.c.c` @type ^`int` := v4;
  #L084d32.  v4:= v8.`a.a.h.c.c` @type ^`int`;
  #L084d36.  call temp:= `a`(v8, v4) @signature `La/a/h/c;.a:(I)I` @kind direct;
  #L084d3c.  v4:= temp;
  #L084d3e.  v5:= v8.`a.a.h.c.c` @type ^`int`;
  #L084d42.  v5:= v5 + 1;
  #L084d46.  v8.`a.a.h.c.c` @type ^`int` := v5;
  #L084d4a.  v5:= v4 ^& 192;
  #L084d4e.  if v5 == v6 then goto L084d56;
  #L084d52.  v0:= v2;
  #L084d54.  goto L084cb2;
  #L084d56.  v3:= v3 ^< 6;
  #L084d5a.  v4:= v4 ^& 63;
  #L084d5e.  v3:= v3 + v4 @kind int;
  #L084d60.  v1:= v1 + 1;
  #L084d64.  goto L084cda;
  #L084d66.  v0:= (`char`) v3 @kind i2c;
  #L084d68.  goto L084cb2;
  #L084d6a.  v0:= v2;
  #L084d6c.  goto L084cb2;
}
procedure `java.lang.String` `a`(`a.a.h.c` v5 @kind this, `java.lang.String` v6 @kind object) @signature `La/a/h/c;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L084d80.  v2:= 0I;
  #L084d82.  v0:= 0I;
  #L084d84.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L084d88.  v5.`a.a.h.c.d` @type ^`int` := v0;
  #L084d8c.  v5.`a.a.h.c.e` @type ^`int` := v0;
  #L084d90.  v5.`a.a.h.c.f` @type ^`int` := v0;
  #L084d94.  v0:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L084d98.  call temp:= `toCharArray`(v0) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L084d9e.  v0:= temp @kind object;
  #L084da0.  v5.`a.a.h.c.g` @type ^`char`[] := v0 @kind object;
  #L084da4.  call temp:= `a`(v5) @signature `La/a/h/c;.a:()Ljava/lang/String;` @kind direct;
  #L084daa.  v0:= temp @kind object;
  #L084dac.  if v0 != 0 then goto L084db4;
  #L084db0.  v1:= v2 @kind object;
  #L084db2.  return v1 @kind object;
  #L084db4.  v1:= "" @kind object;
  #L084db8.  v3:= v5.`a.a.h.c.c` @type ^`int`;
  #L084dbc.  v4:= v5.`a.a.h.c.b` @type ^`int`;
  #L084dc0.  if v3 != v4 then goto L084dc8;
  #L084dc4.  v1:= v2 @kind object;
  #L084dc6.  goto L084db2;
  #L084dc8.  v3:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084dcc.  v4:= v5.`a.a.h.c.c` @type ^`int`;
  #L084dd0.  v3:= v3[v4] @kind char;
  #L084dd4.  goto L084ed4;
  #L084dda.  call temp:= `d`(v5) @signature `La/a/h/c;.d:()Ljava/lang/String;` @kind direct;
  #L084de0.  v1:= temp @kind object;
  #L084de2.  call temp:= `equalsIgnoreCase`(v6, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L084de8.  v0:= temp;
  #L084dea.  if v0 != 0 then goto L084db2;
  #L084dee.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084df2.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L084df6.  if v0 < v1 then goto L084e12;
  #L084dfa.  v1:= v2 @kind object;
  #L084dfc.  goto L084db2;
  #L084dfe.  call temp:= `b`(v5) @signature `La/a/h/c;.b:()Ljava/lang/String;` @kind direct;
  #L084e04.  v1:= temp @kind object;
  #L084e06.  goto L084de2;
  #L084e08.  call temp:= `c`(v5) @signature `La/a/h/c;.c:()Ljava/lang/String;` @kind direct;
  #L084e0e.  v1:= temp @kind object;
  #L084e10.  goto L084de2;
  #L084e12.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084e16.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084e1a.  v0:= v0[v1] @kind char;
  #L084e1e.  v1:= 44I;
  #L084e22.  if v0 == v1 then goto L084e3a;
  #L084e26.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084e2a.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084e2e.  v0:= v0[v1] @kind char;
  #L084e32.  v1:= 59I;
  #L084e36.  if v0 != v1 then goto L084e88;
  #L084e3a.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084e3e.  v0:= v0 + 1;
  #L084e42.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L084e46.  call temp:= `a`(v5) @signature `La/a/h/c;.a:()Ljava/lang/String;` @kind direct;
  #L084e4c.  v0:= temp @kind object;
  #L084e4e.  if v0 != 0 then goto L084db4;
  #L084e52.  v0:= new `java.lang.IllegalStateException`;
  #L084e56.  v1:= new `java.lang.StringBuilder`;
  #L084e5a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L084e60.  v2:= "Malformed DN: " @kind object;
  #L084e64.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L084e6a.  v1:= temp @kind object;
  #L084e6c.  v2:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L084e70.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L084e76.  v1:= temp @kind object;
  #L084e78.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L084e7e.  v1:= temp @kind object;
  #L084e80.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L084e86.  throw v0;
  #L084e88.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084e8c.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084e90.  v0:= v0[v1] @kind char;
  #L084e94.  v1:= 43I;
  #L084e98.  if v0 == v1 then goto L084e3a;
  #L084e9c.  v0:= new `java.lang.IllegalStateException`;
  #L084ea0.  v1:= new `java.lang.StringBuilder`;
  #L084ea4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L084eaa.  v2:= "Malformed DN: " @kind object;
  #L084eae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L084eb4.  v1:= temp @kind object;
  #L084eb6.  v2:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L084eba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L084ec0.  v1:= temp @kind object;
  #L084ec2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L084ec8.  v1:= temp @kind object;
  #L084eca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L084ed0.  throw v0;
  #L084ed2.  
  #L084ed4.  switch v3
                  | 34 => goto L084dfe
                  | 35 => goto L084e08
                  | 43 => goto L084de2
                  | 44 => goto L084de2
                  | 59 => goto L084de2
                  | else => goto L084dda;
}
