record `a.a.a.d` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface, `java.io.Flushable` @kind interface {
  `a.a.f.a` `a.a.a.d.b` @AccessFlag FINAL;
  `int` `a.a.a.d.c` @AccessFlag FINAL;
  `b.d` `a.a.a.d.d` @AccessFlag ;
  `java.util.LinkedHashMap` `a.a.a.d.e` @AccessFlag FINAL;
  `int` `a.a.a.d.f` @AccessFlag ;
  `boolean` `a.a.a.d.g` @AccessFlag ;
  `boolean` `a.a.a.d.h` @AccessFlag ;
  `boolean` `a.a.a.d.i` @AccessFlag ;
  `long` `a.a.a.d.k` @AccessFlag PRIVATE;
  `long` `a.a.a.d.l` @AccessFlag PRIVATE;
  `long` `a.a.a.d.m` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `a.a.a.d.n` @AccessFlag PRIVATE_FINAL;
  `java.lang.Runnable` `a.a.a.d.o` @AccessFlag PRIVATE_FINAL;
}
global `java.util.regex.Pattern` `@@a.a.a.d.a` @AccessFlag STATIC_FINAL;
global `boolean` `@@a.a.a.d.j` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/a/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L076334.  v0:= constclass @type ^`a.a.a.d` @kind object;
  #L076338.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L07633e.  v0:= temp;
  #L076340.  if v0 != 0 then goto L07635c;
  #L076344.  v0:= 1I;
  #L076346.  `@@a.a.a.d.j` @type ^`boolean` := v0 @kind boolean;
  #L07634a.  v0:= "[a-z0-9_-]{1,120}" @kind object;
  #L07634e.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L076354.  v0:= temp @kind object;
  #L076356.  `@@a.a.a.d.a` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L07635a.  return @kind void;
  #L07635c.  v0:= 0I;
  #L07635e.  goto L076346;
}
procedure `void` `d`(`a.a.a.d` v2 @kind this) @signature `La/a/a/d;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L076370.  @monitorenter v2
  #Try_start0.  
  #L076372.  call temp:= `b`(v2) @signature `La/a/a/d;.b:()Z` @kind virtual;
  #L076378.  v0:= temp;
  #L07637a.  if v0 == 0 then goto L076394;
  #L07637e.  v0:= new `java.lang.IllegalStateException`;
  #L076382.  v1:= "cache is closed" @kind object;
  #L076386.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07638c.  throw v0;
  #Try_end0.  
  #L07638e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L076390.  @monitorexit v2
  #L076392.  throw v0;
  #L076394.  @monitorexit v2
  #L076396.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07638e;
}
procedure `void` `a`(`a.a.a.d` v10 @kind this, `a.a.a.d$a` v11 @kind object, `boolean` v12 ) @signature `La/a/a/d;.a:(La/a/a/d$a;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L0763b4.  v0:= 0I;
  #L0763b6.  @monitorenter v10
  #Try_start0.  
  #L0763b8.  v2:= v11.`a.a.a.d$a.a` @type ^`a.a.a.d$b` @kind object;
  #L0763bc.  v1:= v2.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L0763c0.  if v1 == v11 then goto L0763d6;
  #L0763c4.  v0:= new `java.lang.IllegalStateException`;
  #L0763c8.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L0763ce.  throw v0;
  #Try_end0.  
  #L0763d0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0763d2.  @monitorexit v10
  #L0763d4.  throw v0;
  #L0763d6.  if v12 == 0 then goto L076458;
  #Try_start1.  
  #L0763da.  v1:= v2.`a.a.a.d$b.e` @type ^`boolean` @kind boolean;
  #L0763de.  if v1 != 0 then goto L076458;
  #L0763e2.  v1:= v0;
  #L0763e4.  v3:= v10.`a.a.a.d.c` @type ^`int`;
  #L0763e8.  if v1 >= v3 then goto L076458;
  #L0763ec.  v3:= v11.`a.a.a.d$a.b` @type ^`boolean`[] @kind object;
  #L0763f0.  v3:= v3[v1] @kind boolean;
  #L0763f4.  if v3 != 0 then goto L076430;
  #L0763f8.  call `b`(v11) @signature `La/a/a/d$a;.b:()V` @kind virtual;
  #L0763fe.  v0:= new `java.lang.IllegalStateException`;
  #L076402.  v2:= new `java.lang.StringBuilder`;
  #L076406.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07640c.  v3:= "Newly created entry didn't create value for index " @kind object;
  #L076410.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L076416.  v2:= temp @kind object;
  #L076418.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07641e.  v1:= temp @kind object;
  #L076420.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L076426.  v1:= temp @kind object;
  #L076428.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07642e.  throw v0;
  #L076430.  v3:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L076434.  v4:= v2.`a.a.a.d$b.d` @type ^`java.io.File`[] @kind object;
  #L076438.  v4:= v4[v1] @kind object;
  #L07643c.  call temp:= `b`(v3, v4) @signature `La/a/f/a;.b:(Ljava/io/File;)Z` @kind interface;
  #L076442.  v3:= temp;
  #L076444.  if v3 != 0 then goto L076452;
  #L076448.  call `b`(v11) @signature `La/a/a/d$a;.b:()V` @kind virtual;
  #Try_end1.  
  #L07644e.  @monitorexit v10
  #L076450.  return @kind void;
  #L076452.  v1:= v1 + 1;
  #L076456.  goto L0763e4;
  #Try_start2.  
  #L076458.  v1:= v10.`a.a.a.d.c` @type ^`int`;
  #L07645c.  if v0 >= v1 then goto L0764ca;
  #L076460.  v1:= v2.`a.a.a.d$b.d` @type ^`java.io.File`[] @kind object;
  #L076464.  v1:= v1[v0] @kind object;
  #L076468.  if v12 == 0 then goto L0764be;
  #L07646c.  v3:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L076470.  call temp:= `b`(v3, v1) @signature `La/a/f/a;.b:(Ljava/io/File;)Z` @kind interface;
  #L076476.  v3:= temp;
  #L076478.  if v3 == 0 then goto L0764b8;
  #L07647c.  v3:= v2.`a.a.a.d$b.c` @type ^`java.io.File`[] @kind object;
  #L076480.  v3:= v3[v0] @kind object;
  #L076484.  v4:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L076488.  call `a`(v4, v1, v3) @signature `La/a/f/a;.a:(Ljava/io/File;Ljava/io/File;)V` @kind interface;
  #L07648e.  v1:= v2.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L076492.  v4:= v1[v0] @kind wide;
  #L076496.  v1:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L07649a.  call temp:= `c`(v1, v3) @signature `La/a/f/a;.c:(Ljava/io/File;)J` @kind interface;
  #L0764a0.  v6:= temp @kind wide;
  #L0764a2.  v1:= v2.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L0764a6.  v1[v0]:= v6 @kind wide;
  #L0764aa.  v8:= v10.`a.a.a.d.l` @type ^`long` @kind wide;
  #L0764ae.  v4:= v8 - v4 @kind long;
  #L0764b2.  v4:= v4 + v6 @kind long;
  #L0764b4.  v10.`a.a.a.d.l` @type ^`long` := v4 @kind wide;
  #L0764b8.  v0:= v0 + 1;
  #L0764bc.  goto L076458;
  #L0764be.  v3:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L0764c2.  call `a`(v3, v1) @signature `La/a/f/a;.a:(Ljava/io/File;)V` @kind interface;
  #L0764c8.  goto L0764b8;
  #L0764ca.  v0:= v10.`a.a.a.d.f` @type ^`int`;
  #L0764ce.  v0:= v0 + 1;
  #L0764d2.  v10.`a.a.a.d.f` @type ^`int` := v0;
  #L0764d6.  v0:= 0I;
  #L0764d8.  v2.`a.a.a.d$b.f` @type ^`a.a.a.d$a` := v0 @kind object;
  #L0764dc.  v0:= v2.`a.a.a.d$b.e` @type ^`boolean` @kind boolean;
  #L0764e0.  v0:= v0 ^| v12 @kind int;
  #L0764e2.  if v0 == 0 then goto L07657a;
  #L0764e6.  v0:= 1I;
  #L0764e8.  v2.`a.a.a.d$b.e` @type ^`boolean` := v0 @kind boolean;
  #L0764ec.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L0764f0.  v1:= "CLEAN" @kind object;
  #L0764f4.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L0764fa.  v0:= temp @kind object;
  #L0764fc.  v1:= 32I;
  #L076500.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L076506.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07650a.  v1:= v2.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L07650e.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L076514.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L076518.  call `a`(v2, v0) @signature `La/a/a/d$b;.a:(Lb/d;)V` @kind virtual;
  #L07651e.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L076522.  v1:= 10I;
  #L076526.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L07652c.  if v12 == 0 then goto L076542;
  #L076530.  v0:= v10.`a.a.a.d.m` @type ^`long` @kind wide;
  #L076534.  v4:= 1L;
  #L076538.  v4:= v4 + v0 @kind long;
  #L07653a.  v10.`a.a.a.d.m` @type ^`long` := v4 @kind wide;
  #L07653e.  v2.`a.a.a.d$b.g` @type ^`long` := v0 @kind wide;
  #L076542.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L076546.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L07654c.  v0:= v10.`a.a.a.d.l` @type ^`long` @kind wide;
  #L076550.  v2:= v10.`a.a.a.d.k` @type ^`long` @kind wide;
  #L076554.  v0:= lcmp(v0, v2);
  #L076558.  if v0 > 0 then goto L076568;
  #L07655c.  call temp:= `a`(v10) @signature `La/a/a/d;.a:()Z` @kind virtual;
  #L076562.  v0:= temp;
  #L076564.  if v0 == 0 then goto L07644e;
  #L076568.  v0:= v10.`a.a.a.d.n` @type ^`java.util.concurrent.Executor` @kind object;
  #L07656c.  v1:= v10.`a.a.a.d.o` @type ^`java.lang.Runnable` @kind object;
  #L076570.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L076576.  goto L07644e;
  #L07657a.  v0:= v10.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L07657e.  v1:= v2.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L076582.  call temp:= `remove`(v0, v1) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L076588.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07658c.  v1:= "REMOVE" @kind object;
  #L076590.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L076596.  v0:= temp @kind object;
  #L076598.  v1:= 32I;
  #L07659c.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L0765a2.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L0765a6.  v1:= v2.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L0765aa.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L0765b0.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L0765b4.  v1:= 10I;
  #L0765b8.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #Try_end2.  
  #L0765be.  goto L076542;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0763d0;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0763d0;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L0763d0;
}
procedure `boolean` `a`(`a.a.a.d` v2 @kind this) @signature `La/a/a/d;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L0765ec.  v0:= v2.`a.a.a.d.f` @type ^`int`;
  #L0765f0.  v1:= 2000I;
  #L0765f4.  if v0 < v1 then goto L076610;
  #L0765f8.  v0:= v2.`a.a.a.d.f` @type ^`int`;
  #L0765fc.  v1:= v2.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L076600.  call temp:= `size`(v1) @signature `Ljava/util/LinkedHashMap;.size:()I` @kind virtual;
  #L076606.  v1:= temp;
  #L076608.  if v0 < v1 then goto L076610;
  #L07660c.  v0:= 1I;
  #L07660e.  return v0;
  #L076610.  v0:= 0I;
  #L076612.  goto L07660e;
}
procedure `boolean` `a`(`a.a.a.d` v6 @kind this, `a.a.a.d$b` v7 @kind object) @signature `La/a/a/d;.a:(La/a/a/d$b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L076624.  v0:= v7.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L076628.  if v0 == 0 then goto L076636;
  #L07662c.  v0:= v7.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L076630.  call `a`(v0) @signature `La/a/a/d$a;.a:()V` @kind virtual;
  #L076636.  v0:= 0I;
  #L076638.  v1:= v6.`a.a.a.d.c` @type ^`int`;
  #L07663c.  if v0 >= v1 then goto L076676;
  #L076640.  v1:= v6.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L076644.  v2:= v7.`a.a.a.d$b.c` @type ^`java.io.File`[] @kind object;
  #L076648.  v2:= v2[v0] @kind object;
  #L07664c.  call `a`(v1, v2) @signature `La/a/f/a;.a:(Ljava/io/File;)V` @kind interface;
  #L076652.  v2:= v6.`a.a.a.d.l` @type ^`long` @kind wide;
  #L076656.  v1:= v7.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L07665a.  v4:= v1[v0] @kind wide;
  #L07665e.  v2:= v2 - v4 @kind long;
  #L076660.  v6.`a.a.a.d.l` @type ^`long` := v2 @kind wide;
  #L076664.  v1:= v7.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L076668.  v2:= 0L;
  #L07666c.  v1[v0]:= v2 @kind wide;
  #L076670.  v0:= v0 + 1;
  #L076674.  goto L076638;
  #L076676.  v0:= v6.`a.a.a.d.f` @type ^`int`;
  #L07667a.  v0:= v0 + 1;
  #L07667e.  v6.`a.a.a.d.f` @type ^`int` := v0;
  #L076682.  v0:= v6.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L076686.  v1:= "REMOVE" @kind object;
  #L07668a.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L076690.  v0:= temp @kind object;
  #L076692.  v1:= 32I;
  #L076696.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L07669c.  v0:= temp @kind object;
  #L07669e.  v1:= v7.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L0766a2.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L0766a8.  v0:= temp @kind object;
  #L0766aa.  v1:= 10I;
  #L0766ae.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L0766b4.  v0:= v6.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L0766b8.  v1:= v7.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L0766bc.  call temp:= `remove`(v0, v1) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L0766c2.  call temp:= `a`(v6) @signature `La/a/a/d;.a:()Z` @kind virtual;
  #L0766c8.  v0:= temp;
  #L0766ca.  if v0 == 0 then goto L0766dc;
  #L0766ce.  v0:= v6.`a.a.a.d.n` @type ^`java.util.concurrent.Executor` @kind object;
  #L0766d2.  v1:= v6.`a.a.a.d.o` @type ^`java.lang.Runnable` @kind object;
  #L0766d6.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L0766dc.  v0:= 1I;
  #L0766de.  return v0;
}
procedure `boolean` `b`(`a.a.a.d` v1 @kind this) @signature `La/a/a/d;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0766f0.  @monitorenter v1
  #Try_start0.  
  #L0766f2.  v0:= v1.`a.a.a.d.h` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L0766f6.  @monitorexit v1
  #L0766f8.  return v0;
  #L0766fa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0766fc.  @monitorexit v1
  #L0766fe.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0766fa;
}
procedure `void` `c`(`a.a.a.d` v4 @kind this) @signature `La/a/a/d;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07671c.  v0:= v4.`a.a.a.d.l` @type ^`long` @kind wide;
  #L076720.  v2:= v4.`a.a.a.d.k` @type ^`long` @kind wide;
  #L076724.  v0:= lcmp(v0, v2);
  #L076728.  if v0 <= 0 then goto L076754;
  #L07672c.  v0:= v4.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L076730.  call temp:= `values`(v0) @signature `Ljava/util/LinkedHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L076736.  v0:= temp @kind object;
  #L076738.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L07673e.  v0:= temp @kind object;
  #L076740.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L076746.  v0:= temp @kind object;
  #L076748.  v0:= (`a.a.a.d$b`) v0 @kind object;
  #L07674c.  call temp:= `a`(v4, v0) @signature `La/a/a/d;.a:(La/a/a/d$b;)Z` @kind virtual;
  #L076752.  goto L07671c;
  #L076754.  v0:= 0I;
  #L076756.  v4.`a.a.a.d.i` @type ^`boolean` := v0 @kind boolean;
  #L07675a.  return @kind void;
}
procedure `void` `close`(`a.a.a.d` v5 @kind this) @signature `La/a/a/d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L07676c.  @monitorenter v5
  #Try_start0.  
  #L07676e.  v0:= v5.`a.a.a.d.g` @type ^`boolean` @kind boolean;
  #L076772.  if v0 == 0 then goto L07677e;
  #L076776.  v0:= v5.`a.a.a.d.h` @type ^`boolean` @kind boolean;
  #L07677a.  if v0 == 0 then goto L076788;
  #L07677e.  v0:= 1I;
  #L076780.  v5.`a.a.a.d.h` @type ^`boolean` := v0 @kind boolean;
  #Try_end0.  
  #L076784.  @monitorexit v5
  #L076786.  return @kind void;
  #Try_start1.  
  #L076788.  v0:= v5.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L07678c.  call temp:= `values`(v0) @signature `Ljava/util/LinkedHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L076792.  v0:= temp @kind object;
  #L076794.  v1:= v5.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L076798.  call temp:= `size`(v1) @signature `Ljava/util/LinkedHashMap;.size:()I` @kind virtual;
  #L07679e.  v1:= temp;
  #L0767a0.  v1:= new `a.a.a.d$b`[v1];
  #L0767a4.  call temp:= `toArray`(v0, v1) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L0767aa.  v0:= temp @kind object;
  #L0767ac.  v0:= (`a.a.a.d$b`[]) v0 @kind object;
  #L0767b0.  v2:= length @variable v0;
  #L0767b2.  v1:= 0I;
  #L0767b4.  if v1 >= v2 then goto L0767d4;
  #L0767b8.  v3:= v0[v1] @kind object;
  #L0767bc.  v4:= v3.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L0767c0.  if v4 == 0 then goto L0767ce;
  #L0767c4.  v3:= v3.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L0767c8.  call `b`(v3) @signature `La/a/a/d$a;.b:()V` @kind virtual;
  #L0767ce.  v1:= v1 + 1;
  #L0767d2.  goto L0767b4;
  #L0767d4.  call `c`(v5) @signature `La/a/a/d;.c:()V` @kind virtual;
  #L0767da.  v0:= v5.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L0767de.  call `close`(v0) @signature `Lb/d;.close:()V` @kind interface;
  #L0767e4.  v0:= 0I;
  #L0767e6.  v5.`a.a.a.d.d` @type ^`b.d` := v0 @kind object;
  #L0767ea.  v0:= 1I;
  #L0767ec.  v5.`a.a.a.d.h` @type ^`boolean` := v0 @kind boolean;
  #Try_end1.  
  #L0767f0.  goto L076784;
  #L0767f2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0767f4.  @monitorexit v5
  #L0767f6.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0767f2;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0767f2;
}
procedure `void` `flush`(`a.a.a.d` v1 @kind this) @signature `La/a/a/d;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07681c.  @monitorenter v1
  #Try_start0.  
  #L07681e.  v0:= v1.`a.a.a.d.g` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L076822.  if v0 != 0 then goto L07682a;
  #L076826.  @monitorexit v1
  #L076828.  return @kind void;
  #Try_start1.  
  #L07682a.  call `d`(v1) @signature `La/a/a/d;.d:()V` @kind direct;
  #L076830.  call `c`(v1) @signature `La/a/a/d;.c:()V` @kind virtual;
  #L076836.  v0:= v1.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07683a.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L076840.  goto L076826;
  #L076842.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L076844.  @monitorexit v1
  #L076846.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L076842;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L076842;
}
