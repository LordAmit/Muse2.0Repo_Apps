record `a.a.c.g` @kind class @AccessFlag PUBLIC_FINAL extends `a.s$a` @kind interface {
  `java.util.List` `a.a.c.g.a` @AccessFlag PRIVATE_FINAL;
  `a.a.b.g` `a.a.c.g.b` @AccessFlag PRIVATE_FINAL;
  `a.a.c.c` `a.a.c.g.c` @AccessFlag PRIVATE_FINAL;
  `a.i` `a.a.c.g.d` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.c.g.e` @AccessFlag PRIVATE_FINAL;
  `a.x` `a.a.c.g.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.c.g.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.c.g` v0 @kind this, `java.util.List` v1 @kind object, `a.a.b.g` v2 @kind object, `a.a.c.c` v3 @kind object, `a.i` v4 @kind object, `int` v5 , `a.x` v6 @kind object) @signature `La/a/c/g;.<init>:(Ljava/util/List;La/a/b/g;La/a/c/c;La/i;ILa/x;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L079454.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07945a.  v0.`a.a.c.g.a` @type ^`java.util.List` := v1 @kind object;
  #L07945e.  v0.`a.a.c.g.d` @type ^`a.i` := v4 @kind object;
  #L079462.  v0.`a.a.c.g.b` @type ^`a.a.b.g` := v2 @kind object;
  #L079466.  v0.`a.a.c.g.c` @type ^`a.a.c.c` := v3 @kind object;
  #L07946a.  v0.`a.a.c.g.e` @type ^`int` := v5;
  #L07946e.  v0.`a.a.c.g.f` @type ^`a.x` := v6 @kind object;
  #L079472.  return @kind void;
}
procedure `boolean` `a`(`a.a.c.g` v2 @kind this, `a.r` v3 @kind object) @signature `La/a/c/g;.a:(La/r;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L079484.  call temp:= `f`(v3) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L07948a.  v0:= temp @kind object;
  #L07948c.  v1:= v2.`a.a.c.g.d` @type ^`a.i` @kind object;
  #L079490.  call temp:= `a`(v1) @signature `La/i;.a:()La/ab;` @kind interface;
  #L079496.  v1:= temp @kind object;
  #L079498.  call temp:= `a`(v1) @signature `La/ab;.a:()La/a;` @kind virtual;
  #L07949e.  v1:= temp @kind object;
  #L0794a0.  call temp:= `a`(v1) @signature `La/a;.a:()La/r;` @kind virtual;
  #L0794a6.  v1:= temp @kind object;
  #L0794a8.  call temp:= `f`(v1) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L0794ae.  v1:= temp @kind object;
  #L0794b0.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L0794b6.  v0:= temp;
  #L0794b8.  if v0 == 0 then goto L0794f0;
  #L0794bc.  call temp:= `g`(v3) @signature `La/r;.g:()I` @kind virtual;
  #L0794c2.  v0:= temp;
  #L0794c4.  v1:= v2.`a.a.c.g.d` @type ^`a.i` @kind object;
  #L0794c8.  call temp:= `a`(v1) @signature `La/i;.a:()La/ab;` @kind interface;
  #L0794ce.  v1:= temp @kind object;
  #L0794d0.  call temp:= `a`(v1) @signature `La/ab;.a:()La/a;` @kind virtual;
  #L0794d6.  v1:= temp @kind object;
  #L0794d8.  call temp:= `a`(v1) @signature `La/a;.a:()La/r;` @kind virtual;
  #L0794de.  v1:= temp @kind object;
  #L0794e0.  call temp:= `g`(v1) @signature `La/r;.g:()I` @kind virtual;
  #L0794e6.  v1:= temp;
  #L0794e8.  if v0 != v1 then goto L0794f0;
  #L0794ec.  v0:= 1I;
  #L0794ee.  return v0;
  #L0794f0.  v0:= 0I;
  #L0794f2.  goto L0794ee;
}
procedure `a.x` `a`(`a.a.c.g` v1 @kind this) @signature `La/a/c/g;.a:()La/x;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L079504.  v0:= v1.`a.a.c.g.f` @type ^`a.x` @kind object;
  #L079508.  return v0 @kind object;
}
procedure `a.z` `a`(`a.a.c.g` v3 @kind this, `a.x` v4 @kind object) @signature `La/a/c/g;.a:(La/x;)La/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07951c.  v0:= v3.`a.a.c.g.b` @type ^`a.a.b.g` @kind object;
  #L079520.  v1:= v3.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L079524.  v2:= v3.`a.a.c.g.d` @type ^`a.i` @kind object;
  #L079528.  call temp:= `a`(v3, v4, v0, v1, v2) @signature `La/a/c/g;.a:(La/x;La/a/b/g;La/a/c/c;La/i;)La/z;` @kind virtual;
  #L07952e.  v0:= temp @kind object;
  #L079530.  return v0 @kind object;
}
procedure `a.z` `a`(`a.a.c.g` v8 @kind this, `a.x` v9 @kind object, `a.a.b.g` v10 @kind object, `a.a.c.c` v11 @kind object, `a.i` v12 @kind object) @signature `La/a/c/g;.a:(La/x;La/a/b/g;La/a/c/c;La/i;)La/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L079544.  v7:= 1I;
  #L079546.  v0:= v8.`a.a.c.g.e` @type ^`int`;
  #L07954a.  v1:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L07954e.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L079554.  v1:= temp;
  #L079556.  if v0 < v1 then goto L079566;
  #L07955a.  v0:= new `java.lang.AssertionError`;
  #L07955e.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L079564.  throw v0;
  #L079566.  v0:= v8.`a.a.c.g.g` @type ^`int`;
  #L07956a.  v0:= v0 + 1;
  #L07956e.  v8.`a.a.c.g.g` @type ^`int` := v0;
  #L079572.  v0:= v8.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L079576.  if v0 == 0 then goto L0795e0;
  #L07957a.  call temp:= `a`(v9) @signature `La/x;.a:()La/r;` @kind virtual;
  #L079580.  v0:= temp @kind object;
  #L079582.  call temp:= `a`(v8, v0) @signature `La/a/c/g;.a:(La/r;)Z` @kind direct;
  #L079588.  v0:= temp;
  #L07958a.  if v0 != 0 then goto L0795e0;
  #L07958e.  v0:= new `java.lang.IllegalStateException`;
  #L079592.  v1:= new `java.lang.StringBuilder`;
  #L079596.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07959c.  v2:= "network interceptor " @kind object;
  #L0795a0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0795a6.  v1:= temp @kind object;
  #L0795a8.  v2:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L0795ac.  v3:= v8.`a.a.c.g.e` @type ^`int`;
  #L0795b0.  v3:= v3 + -1;
  #L0795b4.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L0795ba.  v2:= temp @kind object;
  #L0795bc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0795c2.  v1:= temp @kind object;
  #L0795c4.  v2:= " must retain the same host and port" @kind object;
  #L0795c8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0795ce.  v1:= temp @kind object;
  #L0795d0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0795d6.  v1:= temp @kind object;
  #L0795d8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0795de.  throw v0;
  #L0795e0.  v0:= v8.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L0795e4.  if v0 == 0 then goto L079642;
  #L0795e8.  v0:= v8.`a.a.c.g.g` @type ^`int`;
  #L0795ec.  if v0 <= v7 then goto L079642;
  #L0795f0.  v0:= new `java.lang.IllegalStateException`;
  #L0795f4.  v1:= new `java.lang.StringBuilder`;
  #L0795f8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0795fe.  v2:= "network interceptor " @kind object;
  #L079602.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L079608.  v1:= temp @kind object;
  #L07960a.  v2:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L07960e.  v3:= v8.`a.a.c.g.e` @type ^`int`;
  #L079612.  v3:= v3 + -1;
  #L079616.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07961c.  v2:= temp @kind object;
  #L07961e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L079624.  v1:= temp @kind object;
  #L079626.  v2:= " must call proceed() exactly once" @kind object;
  #L07962a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L079630.  v1:= temp @kind object;
  #L079632.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L079638.  v1:= temp @kind object;
  #L07963a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L079640.  throw v0;
  #L079642.  v0:= new `a.a.c.g`;
  #L079646.  v1:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L07964a.  v2:= v8.`a.a.c.g.e` @type ^`int`;
  #L07964e.  v5:= v2 + 1;
  #L079652.  v2:= v10 @kind object;
  #L079654.  v3:= v11 @kind object;
  #L079656.  v4:= v12 @kind object;
  #L079658.  v6:= v9 @kind object;
  #L07965a.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `La/a/c/g;.<init>:(Ljava/util/List;La/a/b/g;La/a/c/c;La/i;ILa/x;)V` @kind direct;
  #L079660.  v1:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L079664.  v2:= v8.`a.a.c.g.e` @type ^`int`;
  #L079668.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07966e.  v1:= temp @kind object;
  #L079670.  v1:= (`a.s`) v1 @kind object;
  #L079674.  call temp:= `a`(v1, v0) @signature `La/s;.a:(La/s$a;)La/z;` @kind interface;
  #L07967a.  v2:= temp @kind object;
  #L07967c.  if v11 == 0 then goto L0796de;
  #L079680.  v3:= v8.`a.a.c.g.e` @type ^`int`;
  #L079684.  v3:= v3 + 1;
  #L079688.  v4:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L07968c.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L079692.  v4:= temp;
  #L079694.  if v3 >= v4 then goto L0796de;
  #L079698.  v0:= v0.`a.a.c.g.g` @type ^`int`;
  #L07969c.  if v0 == v7 then goto L0796de;
  #L0796a0.  v0:= new `java.lang.IllegalStateException`;
  #L0796a4.  v2:= new `java.lang.StringBuilder`;
  #L0796a8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0796ae.  v3:= "network interceptor " @kind object;
  #L0796b2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0796b8.  v2:= temp @kind object;
  #L0796ba.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0796c0.  v1:= temp @kind object;
  #L0796c2.  v2:= " must call proceed() exactly once" @kind object;
  #L0796c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0796cc.  v1:= temp @kind object;
  #L0796ce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0796d4.  v1:= temp @kind object;
  #L0796d6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0796dc.  throw v0;
  #L0796de.  if v2 != 0 then goto L079720;
  #L0796e2.  v0:= new `java.lang.NullPointerException`;
  #L0796e6.  v2:= new `java.lang.StringBuilder`;
  #L0796ea.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0796f0.  v3:= "interceptor " @kind object;
  #L0796f4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0796fa.  v2:= temp @kind object;
  #L0796fc.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L079702.  v1:= temp @kind object;
  #L079704.  v2:= " returned null" @kind object;
  #L079708.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07970e.  v1:= temp @kind object;
  #L079710.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L079716.  v1:= temp @kind object;
  #L079718.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07971e.  throw v0;
  #L079720.  return v2 @kind object;
}
procedure `a.a.b.g` `b`(`a.a.c.g` v1 @kind this) @signature `La/a/c/g;.b:()La/a/b/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L079734.  v0:= v1.`a.a.c.g.b` @type ^`a.a.b.g` @kind object;
  #L079738.  return v0 @kind object;
}
procedure `a.a.c.c` `c`(`a.a.c.g` v1 @kind this) @signature `La/a/c/g;.c:()La/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07974c.  v0:= v1.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L079750.  return v0 @kind object;
}
