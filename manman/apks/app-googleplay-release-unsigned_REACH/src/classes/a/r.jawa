record `a.r` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `a.r.a` @AccessFlag FINAL;
  `java.lang.String` `a.r.b` @AccessFlag FINAL;
  `int` `a.r.c` @AccessFlag FINAL;
  `java.lang.String` `a.r.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.r.f` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `a.r.g` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `a.r.h` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.r.i` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.r.j` @AccessFlag PRIVATE_FINAL;
}
global `char`[] `@@a.r.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/r;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L08ab44.  v0:= 16I;
  #L08ab48.  v0:= new `char`[v0];
  #L08ab4c.  goto L08ab58;
  #L08ab52.  `@@a.r.d` @type ^`char`[] := v0 @kind object;
  #L08ab56.  return @kind void;
  #L08ab58.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 65I, 66I, 67I, 68I, 69I, 70I) @kind object;
  #L08ab7f.  goto L08ab52;
}
procedure `void` `<init>`(`a.r` v4 @kind this, `a.r$a` v5 @kind object) @signature `La/r;.<init>:(La/r$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08ab90.  v1:= 0I;
  #L08ab92.  v3:= 0I;
  #L08ab94.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08ab9a.  v0:= v5.`a.r$a.a` @type ^`java.lang.String` @kind object;
  #L08ab9e.  v4.`a.r.a` @type ^`java.lang.String` := v0 @kind object;
  #L08aba2.  v0:= v5.`a.r$a.b` @type ^`java.lang.String` @kind object;
  #L08aba6.  call temp:= `a`(v0, v3) @signature `La/r;.a:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L08abac.  v0:= temp @kind object;
  #L08abae.  v4.`a.r.e` @type ^`java.lang.String` := v0 @kind object;
  #L08abb2.  v0:= v5.`a.r$a.c` @type ^`java.lang.String` @kind object;
  #L08abb6.  call temp:= `a`(v0, v3) @signature `La/r;.a:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L08abbc.  v0:= temp @kind object;
  #L08abbe.  v4.`a.r.f` @type ^`java.lang.String` := v0 @kind object;
  #L08abc2.  v0:= v5.`a.r$a.d` @type ^`java.lang.String` @kind object;
  #L08abc6.  v4.`a.r.b` @type ^`java.lang.String` := v0 @kind object;
  #L08abca.  call temp:= `a`(v5) @signature `La/r$a;.a:()I` @kind virtual;
  #L08abd0.  v0:= temp;
  #L08abd2.  v4.`a.r.c` @type ^`int` := v0;
  #L08abd6.  v0:= v5.`a.r$a.f` @type ^`java.util.List` @kind object;
  #L08abda.  call temp:= `a`(v4, v0, v3) @signature `La/r;.a:(Ljava/util/List;Z)Ljava/util/List;` @kind direct;
  #L08abe0.  v0:= temp @kind object;
  #L08abe2.  v4.`a.r.g` @type ^`java.util.List` := v0 @kind object;
  #L08abe6.  v0:= v5.`a.r$a.g` @type ^`java.util.List` @kind object;
  #L08abea.  if v0 == 0 then goto L08ac26;
  #L08abee.  v0:= v5.`a.r$a.g` @type ^`java.util.List` @kind object;
  #L08abf2.  v2:= 1I;
  #L08abf4.  call temp:= `a`(v4, v0, v2) @signature `La/r;.a:(Ljava/util/List;Z)Ljava/util/List;` @kind direct;
  #L08abfa.  v0:= temp @kind object;
  #L08abfc.  v4.`a.r.h` @type ^`java.util.List` := v0 @kind object;
  #L08ac00.  v0:= v5.`a.r$a.h` @type ^`java.lang.String` @kind object;
  #L08ac04.  if v0 == 0 then goto L08ac14;
  #L08ac08.  v0:= v5.`a.r$a.h` @type ^`java.lang.String` @kind object;
  #L08ac0c.  call temp:= `a`(v0, v3) @signature `La/r;.a:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L08ac12.  v1:= temp @kind object;
  #L08ac14.  v4.`a.r.i` @type ^`java.lang.String` := v1 @kind object;
  #L08ac18.  call temp:= `toString`(v5) @signature `La/r$a;.toString:()Ljava/lang/String;` @kind virtual;
  #L08ac1e.  v0:= temp @kind object;
  #L08ac20.  v4.`a.r.j` @type ^`java.lang.String` := v0 @kind object;
  #L08ac24.  return @kind void;
  #L08ac26.  v0:= v1 @kind object;
  #L08ac28.  goto L08abfc;
}
procedure `int` `a`(`char` v1 ) @signature `La/r;.a:(C)I` @AccessFlag STATIC {
    temp;
    v0;

  #L08ac3c.  v0:= 48I;
  #L08ac40.  if v1 < v0 then goto L08ac52;
  #L08ac44.  v0:= 57I;
  #L08ac48.  if v1 > v0 then goto L08ac52;
  #L08ac4c.  v0:= v1 + -48;
  #L08ac50.  return v0;
  #L08ac52.  v0:= 97I;
  #L08ac56.  if v1 < v0 then goto L08ac6c;
  #L08ac5a.  v0:= 102I;
  #L08ac5e.  if v1 > v0 then goto L08ac6c;
  #L08ac62.  v0:= v1 + -97;
  #L08ac66.  v0:= v0 + 10;
  #L08ac6a.  goto L08ac50;
  #L08ac6c.  v0:= 65I;
  #L08ac70.  if v1 < v0 then goto L08ac86;
  #L08ac74.  v0:= 70I;
  #L08ac78.  if v1 > v0 then goto L08ac86;
  #L08ac7c.  v0:= v1 + -65;
  #L08ac80.  v0:= v0 + 10;
  #L08ac84.  goto L08ac50;
  #L08ac86.  v0:= -1I;
  #L08ac88.  goto L08ac50;
}
procedure `int` `a`(`java.lang.String` v1 @kind object) @signature `La/r;.a:(Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L08ac9c.  v0:= "http" @kind object;
  #L08aca0.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08aca6.  v0:= temp;
  #L08aca8.  if v0 == 0 then goto L08acb2;
  #L08acac.  v0:= 80I;
  #L08acb0.  return v0;
  #L08acb2.  v0:= "https" @kind object;
  #L08acb6.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08acbc.  v0:= temp;
  #L08acbe.  if v0 == 0 then goto L08acc8;
  #L08acc2.  v0:= 443I;
  #L08acc6.  goto L08acb0;
  #L08acc8.  v0:= -1I;
  #L08acca.  goto L08acb0;
}
procedure `java.lang.String` `a`(`java.lang.String` v9 @kind object, `int` v10 , `int` v11 , `java.lang.String` v12 @kind object, `boolean` v13 , `boolean` v14 , `boolean` v15 , `boolean` v16 ) @signature `La/r;.a:(Ljava/lang/String;IILjava/lang/String;ZZZZ)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L08acdc.  v2:= v10;
  #L08acde.  if v2 >= v11 then goto L08ad78;
  #L08ace2.  call temp:= `codePointAt`(v9, v2) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L08ace8.  v0:= temp;
  #L08acea.  v1:= 32I;
  #L08acee.  if v0 < v1 then goto L08ad3c;
  #L08acf2.  v1:= 127I;
  #L08acf6.  if v0 == v1 then goto L08ad3c;
  #L08acfa.  v1:= 128I;
  #L08acfe.  if v0 < v1 then goto L08ad06;
  #L08ad02.  if v16 != 0 then goto L08ad3c;
  #L08ad06.  call temp:= `indexOf`(v12, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L08ad0c.  v1:= temp;
  #L08ad0e.  v3:= -1I;
  #L08ad10.  if v1 != v3 then goto L08ad3c;
  #L08ad14.  v1:= 37I;
  #L08ad18.  if v0 != v1 then goto L08ad30;
  #L08ad1c.  if v13 == 0 then goto L08ad3c;
  #L08ad20.  if v14 == 0 then goto L08ad30;
  #L08ad24.  call temp:= `a`(v9, v2, v11) @signature `La/r;.a:(Ljava/lang/String;II)Z` @kind static;
  #L08ad2a.  v1:= temp;
  #L08ad2c.  if v1 == 0 then goto L08ad3c;
  #L08ad30.  v1:= 43I;
  #L08ad34.  if v0 != v1 then goto L08ad6c;
  #L08ad38.  if v15 == 0 then goto L08ad6c;
  #L08ad3c.  v0:= new `b.c`;
  #L08ad40.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L08ad46.  call temp:= `a`(v0, v9, v10, v2) @signature `Lb/c;.a:(Ljava/lang/String;II)Lb/c;` @kind virtual;
  #L08ad4c.  v1:= v9 @kind object;
  #L08ad4e.  v3:= v11;
  #L08ad50.  v4:= v12 @kind object;
  #L08ad52.  v5:= v13;
  #L08ad54.  v6:= v14;
  #L08ad56.  v7:= v15;
  #L08ad58.  v8:= v16;
  #L08ad5c.  call `a`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `La/r;.a:(Lb/c;Ljava/lang/String;IILjava/lang/String;ZZZZ)V` @kind static;
  #L08ad62.  call temp:= `o`(v0) @signature `Lb/c;.o:()Ljava/lang/String;` @kind virtual;
  #L08ad68.  v0:= temp @kind object;
  #L08ad6a.  return v0 @kind object;
  #L08ad6c.  call temp:= `charCount`(v0) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L08ad72.  v0:= temp;
  #L08ad74.  v2:= v2 + v0 @kind int;
  #L08ad76.  goto L08acde;
  #L08ad78.  call temp:= `substring`(v9, v10, v11) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08ad7e.  v0:= temp @kind object;
  #L08ad80.  goto L08ad6a;
}
procedure `java.lang.String` `a`(`java.lang.String` v3 @kind object, `int` v4 , `int` v5 , `boolean` v6 ) @signature `La/r;.a:(Ljava/lang/String;IIZ)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L08ad94.  v0:= v4;
  #L08ad96.  if v0 >= v5 then goto L08addc;
  #L08ad9a.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L08ada0.  v1:= temp;
  #L08ada2.  v2:= 37I;
  #L08ada6.  if v1 == v2 then goto L08adb6;
  #L08adaa.  v2:= 43I;
  #L08adae.  if v1 != v2 then goto L08add6;
  #L08adb2.  if v6 == 0 then goto L08add6;
  #L08adb6.  v1:= new `b.c`;
  #L08adba.  call `<init>`(v1) @signature `Lb/c;.<init>:()V` @kind direct;
  #L08adc0.  call temp:= `a`(v1, v3, v4, v0) @signature `Lb/c;.a:(Ljava/lang/String;II)Lb/c;` @kind virtual;
  #L08adc6.  call `a`(v1, v3, v0, v5, v6) @signature `La/r;.a:(Lb/c;Ljava/lang/String;IIZ)V` @kind static;
  #L08adcc.  call temp:= `o`(v1) @signature `Lb/c;.o:()Ljava/lang/String;` @kind virtual;
  #L08add2.  v0:= temp @kind object;
  #L08add4.  return v0 @kind object;
  #L08add6.  v0:= v0 + 1;
  #L08adda.  goto L08ad96;
  #L08addc.  call temp:= `substring`(v3, v4, v5) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08ade2.  v0:= temp @kind object;
  #L08ade4.  goto L08add4;
}
procedure `java.lang.String` `a`(`java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object, `boolean` v10 , `boolean` v11 , `boolean` v12 , `boolean` v13 ) @signature `La/r;.a:(Ljava/lang/String;Ljava/lang/String;ZZZZ)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L08adf8.  v1:= 0I;
  #L08adfa.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08ae00.  v2:= temp;
  #L08ae02.  v0:= v8 @kind object;
  #L08ae04.  v3:= v9 @kind object;
  #L08ae06.  v4:= v10;
  #L08ae08.  v5:= v11;
  #L08ae0a.  v6:= v12;
  #L08ae0c.  v7:= v13;
  #L08ae0e.  call temp:= `a`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `La/r;.a:(Ljava/lang/String;IILjava/lang/String;ZZZZ)Ljava/lang/String;` @kind static;
  #L08ae14.  v0:= temp @kind object;
  #L08ae16.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`java.lang.String` v2 @kind object, `boolean` v3 ) @signature `La/r;.a:(Ljava/lang/String;Z)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L08ae28.  v0:= 0I;
  #L08ae2a.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08ae30.  v1:= temp;
  #L08ae32.  call temp:= `a`(v2, v0, v1, v3) @signature `La/r;.a:(Ljava/lang/String;IIZ)Ljava/lang/String;` @kind static;
  #L08ae38.  v0:= temp @kind object;
  #L08ae3a.  return v0 @kind object;
}
procedure `java.util.List` `a`(`a.r` v4 @kind this, `java.util.List` v5 @kind object, `boolean` v6 ) @signature `La/r;.a:(Ljava/util/List;Z)Ljava/util/List;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08ae4c.  call temp:= `size`(v5) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L08ae52.  v2:= temp;
  #L08ae54.  v3:= new `java.util.ArrayList`;
  #L08ae58.  call `<init>`(v3, v2) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L08ae5e.  v0:= 0I;
  #L08ae60.  v1:= v0;
  #L08ae62.  if v1 >= v2 then goto L08ae90;
  #L08ae66.  call temp:= `get`(v5, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L08ae6c.  v0:= temp @kind object;
  #L08ae6e.  v0:= (`java.lang.String`) v0 @kind object;
  #L08ae72.  if v0 == 0 then goto L08ae8c;
  #L08ae76.  call temp:= `a`(v0, v6) @signature `La/r;.a:(Ljava/lang/String;Z)Ljava/lang/String;` @kind static;
  #L08ae7c.  v0:= temp @kind object;
  #L08ae7e.  call temp:= `add`(v3, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L08ae84.  v0:= v1 + 1;
  #L08ae88.  v1:= v0;
  #L08ae8a.  goto L08ae62;
  #L08ae8c.  v0:= 0I;
  #L08ae8e.  goto L08ae7e;
  #L08ae90.  call temp:= `unmodifiableList`(v3) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L08ae96.  v0:= temp @kind object;
  #L08ae98.  return v0 @kind object;
}
procedure `void` `a`(`b.c` v6 @kind object, `java.lang.String` v7 @kind object, `int` v8 , `int` v9 , `java.lang.String` v10 @kind object, `boolean` v11 , `boolean` v12 , `boolean` v13 , `boolean` v14 ) @signature `La/r;.a:(Lb/c;Ljava/lang/String;IILjava/lang/String;ZZZZ)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L08aeac.  v5:= 37I;
  #L08aeb0.  v0:= 0I;
  #L08aeb2.  if v8 >= v9 then goto L08afb6;
  #L08aeb6.  call temp:= `codePointAt`(v7, v8) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L08aebc.  v2:= temp;
  #L08aebe.  if v11 == 0 then goto L08aeee;
  #L08aec2.  v1:= 9I;
  #L08aec6.  if v2 == v1 then goto L08aee2;
  #L08aeca.  v1:= 10I;
  #L08aece.  if v2 == v1 then goto L08aee2;
  #L08aed2.  v1:= 12I;
  #L08aed6.  if v2 == v1 then goto L08aee2;
  #L08aeda.  v1:= 13I;
  #L08aede.  if v2 != v1 then goto L08aeee;
  #L08aee2.  call temp:= `charCount`(v2) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L08aee8.  v1:= temp;
  #L08aeea.  v8:= v8 + v1 @kind int;
  #L08aeec.  goto L08aeb2;
  #L08aeee.  v1:= 43I;
  #L08aef2.  if v2 != v1 then goto L08af10;
  #L08aef6.  if v13 == 0 then goto L08af10;
  #L08aefa.  if v11 == 0 then goto L08af0a;
  #L08aefe.  v1:= "+" @kind object;
  #L08af02.  call temp:= `a`(v6, v1) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @kind virtual;
  #L08af08.  goto L08aee2;
  #L08af0a.  v1:= "%2B" @kind object;
  #L08af0e.  goto L08af02;
  #L08af10.  v1:= 32I;
  #L08af14.  if v2 < v1 then goto L08af52;
  #L08af18.  v1:= 127I;
  #L08af1c.  if v2 == v1 then goto L08af52;
  #L08af20.  v1:= 128I;
  #L08af24.  if v2 < v1 then goto L08af2c;
  #L08af28.  if v14 != 0 then goto L08af52;
  #L08af2c.  call temp:= `indexOf`(v10, v2) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L08af32.  v1:= temp;
  #L08af34.  v3:= -1I;
  #L08af36.  if v1 != v3 then goto L08af52;
  #L08af3a.  if v2 != v5 then goto L08afae;
  #L08af3e.  if v11 == 0 then goto L08af52;
  #L08af42.  if v12 == 0 then goto L08afae;
  #L08af46.  call temp:= `a`(v7, v8, v9) @signature `La/r;.a:(Ljava/lang/String;II)Z` @kind static;
  #L08af4c.  v1:= temp;
  #L08af4e.  if v1 != 0 then goto L08afae;
  #L08af52.  if v0 != 0 then goto L08af60;
  #L08af56.  v0:= new `b.c`;
  #L08af5a.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L08af60.  call temp:= `a`(v0, v2) @signature `Lb/c;.a:(I)Lb/c;` @kind virtual;
  #L08af66.  call temp:= `e`(v0) @signature `Lb/c;.e:()Z` @kind virtual;
  #L08af6c.  v1:= temp;
  #L08af6e.  if v1 != 0 then goto L08aee2;
  #L08af72.  call temp:= `h`(v0) @signature `Lb/c;.h:()B` @kind virtual;
  #L08af78.  v1:= temp;
  #L08af7a.  v1:= v1 ^& 255;
  #L08af7e.  call temp:= `b`(v6, v5) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L08af84.  v3:= `@@a.r.d` @type ^`char`[] @kind object;
  #L08af88.  v4:= v1 ^> 4;
  #L08af8c.  v4:= v4 ^& 15;
  #L08af90.  v3:= v3[v4] @kind char;
  #L08af94.  call temp:= `b`(v6, v3) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L08af9a.  v3:= `@@a.r.d` @type ^`char`[] @kind object;
  #L08af9e.  v1:= v1 ^& 15;
  #L08afa2.  v1:= v3[v1] @kind char;
  #L08afa6.  call temp:= `b`(v6, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L08afac.  goto L08af66;
  #L08afae.  call temp:= `a`(v6, v2) @signature `Lb/c;.a:(I)Lb/c;` @kind virtual;
  #L08afb4.  goto L08aee2;
  #L08afb6.  return @kind void;
}
procedure `void` `a`(`b.c` v5 @kind object, `java.lang.String` v6 @kind object, `int` v7 , `int` v8 , `boolean` v9 ) @signature `La/r;.a:(Lb/c;Ljava/lang/String;IIZ)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L08afc8.  v4:= -1I;
  #L08afca.  v0:= v7;
  #L08afcc.  if v0 >= v8 then goto L08b054;
  #L08afd0.  call temp:= `codePointAt`(v6, v0) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L08afd6.  v1:= temp;
  #L08afd8.  v2:= 37I;
  #L08afdc.  if v1 != v2 then goto L08b034;
  #L08afe0.  v2:= v0 + 2;
  #L08afe4.  if v2 >= v8 then goto L08b034;
  #L08afe8.  v2:= v0 + 1;
  #L08afec.  call temp:= `charAt`(v6, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L08aff2.  v2:= temp;
  #L08aff4.  call temp:= `a`(v2) @signature `La/r;.a:(C)I` @kind static;
  #L08affa.  v2:= temp;
  #L08affc.  v3:= v0 + 2;
  #L08b000.  call temp:= `charAt`(v6, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L08b006.  v3:= temp;
  #L08b008.  call temp:= `a`(v3) @signature `La/r;.a:(C)I` @kind static;
  #L08b00e.  v3:= temp;
  #L08b010.  if v2 == v4 then goto L08b04c;
  #L08b014.  if v3 == v4 then goto L08b04c;
  #L08b018.  v2:= v2 ^< 4;
  #L08b01c.  v2:= v2 + v3 @kind int;
  #L08b01e.  call temp:= `b`(v5, v2) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L08b024.  v0:= v0 + 2;
  #L08b028.  call temp:= `charCount`(v1) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L08b02e.  v1:= temp;
  #L08b030.  v0:= v0 + v1 @kind int;
  #L08b032.  goto L08afcc;
  #L08b034.  v2:= 43I;
  #L08b038.  if v1 != v2 then goto L08b04c;
  #L08b03c.  if v9 == 0 then goto L08b04c;
  #L08b040.  v2:= 32I;
  #L08b044.  call temp:= `b`(v5, v2) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L08b04a.  goto L08b028;
  #L08b04c.  call temp:= `a`(v5, v1) @signature `Lb/c;.a:(I)Lb/c;` @kind virtual;
  #L08b052.  goto L08b028;
  #L08b054.  return @kind void;
}
procedure `void` `a`(`java.lang.StringBuilder` v3 @kind object, `java.util.List` v4 @kind object) @signature `La/r;.a:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L08b068.  v0:= 0I;
  #L08b06a.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L08b070.  v2:= temp;
  #L08b072.  v1:= v0;
  #L08b074.  if v1 >= v2 then goto L08b09c;
  #L08b078.  v0:= 47I;
  #L08b07c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b082.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L08b088.  v0:= temp @kind object;
  #L08b08a.  v0:= (`java.lang.String`) v0 @kind object;
  #L08b08e.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b094.  v0:= v1 + 1;
  #L08b098.  v1:= v0;
  #L08b09a.  goto L08b074;
  #L08b09c.  return @kind void;
}
procedure `boolean` `a`(`java.lang.String` v3 @kind object, `int` v4 , `int` v5 ) @signature `La/r;.a:(Ljava/lang/String;II)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L08b0b0.  v2:= -1I;
  #L08b0b2.  v0:= v4 + 2;
  #L08b0b6.  if v0 >= v5 then goto L08b0fe;
  #L08b0ba.  call temp:= `charAt`(v3, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L08b0c0.  v0:= temp;
  #L08b0c2.  v1:= 37I;
  #L08b0c6.  if v0 != v1 then goto L08b0fe;
  #L08b0ca.  v0:= v4 + 1;
  #L08b0ce.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L08b0d4.  v0:= temp;
  #L08b0d6.  call temp:= `a`(v0) @signature `La/r;.a:(C)I` @kind static;
  #L08b0dc.  v0:= temp;
  #L08b0de.  if v0 == v2 then goto L08b0fe;
  #L08b0e2.  v0:= v4 + 2;
  #L08b0e6.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L08b0ec.  v0:= temp;
  #L08b0ee.  call temp:= `a`(v0) @signature `La/r;.a:(C)I` @kind static;
  #L08b0f4.  v0:= temp;
  #L08b0f6.  if v0 == v2 then goto L08b0fe;
  #L08b0fa.  v0:= 1I;
  #L08b0fc.  return v0;
  #L08b0fe.  v0:= 0I;
  #L08b100.  goto L08b0fc;
}
procedure `java.util.List` `b`(`java.lang.String` v5 @kind object) @signature `La/r;.b:(Ljava/lang/String;)Ljava/util/List;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L08b114.  v4:= -1I;
  #L08b116.  v2:= new `java.util.ArrayList`;
  #L08b11a.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L08b120.  v0:= 0I;
  #L08b122.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08b128.  v1:= temp;
  #L08b12a.  if v0 > v1 then goto L08b198;
  #L08b12e.  v1:= 38I;
  #L08b132.  call temp:= `indexOf`(v5, v1, v0) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L08b138.  v1:= temp;
  #L08b13a.  if v1 != v4 then goto L08b146;
  #L08b13e.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08b144.  v1:= temp;
  #L08b146.  v3:= 61I;
  #L08b14a.  call temp:= `indexOf`(v5, v3, v0) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L08b150.  v3:= temp;
  #L08b152.  if v3 == v4 then goto L08b15a;
  #L08b156.  if v3 <= v1 then goto L08b176;
  #L08b15a.  call temp:= `substring`(v5, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08b160.  v0:= temp @kind object;
  #L08b162.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L08b168.  v0:= 0I;
  #L08b16a.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L08b170.  v0:= v1 + 1;
  #L08b174.  goto L08b122;
  #L08b176.  call temp:= `substring`(v5, v0, v3) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08b17c.  v0:= temp @kind object;
  #L08b17e.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L08b184.  v0:= v3 + 1;
  #L08b188.  call temp:= `substring`(v5, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08b18e.  v0:= temp @kind object;
  #L08b190.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L08b196.  goto L08b170;
  #L08b198.  return v2 @kind object;
}
procedure `void` `b`(`java.lang.StringBuilder` v5 @kind object, `java.util.List` v6 @kind object) @signature `La/r;.b:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L08b1ac.  v0:= 0I;
  #L08b1ae.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L08b1b4.  v3:= temp;
  #L08b1b6.  v2:= v0;
  #L08b1b8.  if v2 >= v3 then goto L08b208;
  #L08b1bc.  call temp:= `get`(v6, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L08b1c2.  v0:= temp @kind object;
  #L08b1c4.  v0:= (`java.lang.String`) v0 @kind object;
  #L08b1c8.  v1:= v2 + 1;
  #L08b1cc.  call temp:= `get`(v6, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L08b1d2.  v1:= temp @kind object;
  #L08b1d4.  v1:= (`java.lang.String`) v1 @kind object;
  #L08b1d8.  if v2 <= 0 then goto L08b1e6;
  #L08b1dc.  v4:= 38I;
  #L08b1e0.  call temp:= `append`(v5, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b1e6.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b1ec.  if v1 == 0 then goto L08b200;
  #L08b1f0.  v0:= 61I;
  #L08b1f4.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b1fa.  call temp:= `append`(v5, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b200.  v0:= v2 + 2;
  #L08b204.  v2:= v0;
  #L08b206.  goto L08b1b8;
  #L08b208.  return @kind void;
}
procedure `a.r` `e`(`java.lang.String` v4 @kind object) @signature `La/r;.e:(Ljava/lang/String;)La/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08b21c.  v0:= 0I;
  #L08b21e.  v1:= new `a.r$a`;
  #L08b222.  call `<init>`(v1) @signature `La/r$a;.<init>:()V` @kind direct;
  #L08b228.  call temp:= `a`(v1, v0, v4) @signature `La/r$a;.a:(La/r;Ljava/lang/String;)La/r$a$a;` @kind virtual;
  #L08b22e.  v2:= temp @kind object;
  #L08b230.  v3:= `@@a.r$a$a.a` @type ^`a.r$a$a` @kind object;
  #L08b234.  if v2 != v3 then goto L08b240;
  #L08b238.  call temp:= `c`(v1) @signature `La/r$a;.c:()La/r;` @kind virtual;
  #L08b23e.  v0:= temp @kind object;
  #L08b240.  return v0 @kind object;
}
procedure `java.net.URI` `a`(`a.r` v4 @kind this) @signature `La/r;.a:()Ljava/net/URI;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08b254.  call temp:= `n`(v4) @signature `La/r;.n:()La/r$a;` @kind virtual;
  #L08b25a.  v0:= temp @kind object;
  #L08b25c.  call temp:= `b`(v0) @signature `La/r$a;.b:()La/r$a;` @kind virtual;
  #L08b262.  v0:= temp @kind object;
  #L08b264.  call temp:= `toString`(v0) @signature `La/r$a;.toString:()Ljava/lang/String;` @kind virtual;
  #L08b26a.  v1:= temp @kind object;
  #Try_start0.  
  #L08b26c.  v0:= new `java.net.URI`;
  #L08b270.  call `<init>`(v0, v1) @signature `Ljava/net/URI;.<init>:(Ljava/lang/String;)V` @kind direct;
  #Try_end0.  
  #L08b276.  return v0 @kind object;
  #L08b278.  v0:= Exception @type ^`java.net.URISyntaxException` @kind object;
  #Try_start1.  
  #L08b27a.  v2:= "[\\u0000-\\u001F\\u007F-\\u009F\\p{javaWhitespace}]" @kind object;
  #L08b27e.  v3:= "" @kind object;
  #L08b282.  call temp:= `replaceAll`(v1, v2, v3) @signature `Ljava/lang/String;.replaceAll:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L08b288.  v1:= temp @kind object;
  #L08b28a.  call temp:= `create`(v1) @signature `Ljava/net/URI;.create:(Ljava/lang/String;)Ljava/net/URI;` @kind static;
  #Try_end1.  
  #L08b290.  v0:= temp @kind object;
  #L08b292.  goto L08b276;
  #L08b294.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L08b296.  v1:= new `java.lang.RuntimeException`;
  #L08b29a.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L08b2a0.  throw v1;
  catch `java.net.URISyntaxException` @[Try_start0..Try_end0] goto L08b278;
  catch `java.lang.Exception` @[Try_start1..Try_end1] goto L08b294;
}
procedure `java.lang.String` `b`(`a.r` v1 @kind this) @signature `La/r;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b2d0.  v0:= v1.`a.r.a` @type ^`java.lang.String` @kind object;
  #L08b2d4.  return v0 @kind object;
}
procedure `a.r` `c`(`a.r` v1 @kind this, `java.lang.String` v2 @kind object) @signature `La/r;.c:(Ljava/lang/String;)La/r;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b2e8.  call temp:= `d`(v1, v2) @signature `La/r;.d:(Ljava/lang/String;)La/r$a;` @kind virtual;
  #L08b2ee.  v0:= temp @kind object;
  #L08b2f0.  if v0 == 0 then goto L08b2fe;
  #L08b2f4.  call temp:= `c`(v0) @signature `La/r$a;.c:()La/r;` @kind virtual;
  #L08b2fa.  v0:= temp @kind object;
  #L08b2fc.  return v0 @kind object;
  #L08b2fe.  v0:= 0I;
  #L08b300.  goto L08b2fc;
}
procedure `boolean` `c`(`a.r` v2 @kind this) @signature `La/r;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08b314.  v0:= v2.`a.r.a` @type ^`java.lang.String` @kind object;
  #L08b318.  v1:= "https" @kind object;
  #L08b31c.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08b322.  v0:= temp;
  #L08b324.  return v0;
}
procedure `a.r$a` `d`(`a.r` v3 @kind this, `java.lang.String` v4 @kind object) @signature `La/r;.d:(Ljava/lang/String;)La/r$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L08b338.  v0:= new `a.r$a`;
  #L08b33c.  call `<init>`(v0) @signature `La/r$a;.<init>:()V` @kind direct;
  #L08b342.  call temp:= `a`(v0, v3, v4) @signature `La/r$a;.a:(La/r;Ljava/lang/String;)La/r$a$a;` @kind virtual;
  #L08b348.  v1:= temp @kind object;
  #L08b34a.  v2:= `@@a.r$a$a.a` @type ^`a.r$a$a` @kind object;
  #L08b34e.  if v1 != v2 then goto L08b354;
  #L08b352.  return v0 @kind object;
  #L08b354.  v0:= 0I;
  #L08b356.  goto L08b352;
}
procedure `java.lang.String` `d`(`a.r` v4 @kind this) @signature `La/r;.d:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08b368.  v0:= v4.`a.r.e` @type ^`java.lang.String` @kind object;
  #L08b36c.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L08b372.  v0:= temp;
  #L08b374.  if v0 == 0 then goto L08b37e;
  #L08b378.  v0:= "" @kind object;
  #L08b37c.  return v0 @kind object;
  #L08b37e.  v0:= v4.`a.r.a` @type ^`java.lang.String` @kind object;
  #L08b382.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08b388.  v0:= temp;
  #L08b38a.  v0:= v0 + 3;
  #L08b38e.  v1:= v4.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b392.  v2:= v4.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b396.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08b39c.  v2:= temp;
  #L08b39e.  v3:= ":@" @kind object;
  #L08b3a2.  call temp:= `a`(v1, v0, v2, v3) @signature `La/a/c;.a:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L08b3a8.  v1:= temp;
  #L08b3aa.  v2:= v4.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b3ae.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08b3b4.  v0:= temp @kind object;
  #L08b3b6.  goto L08b37c;
}
procedure `java.lang.String` `e`(`a.r` v3 @kind this) @signature `La/r;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L08b3c8.  v0:= v3.`a.r.f` @type ^`java.lang.String` @kind object;
  #L08b3cc.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L08b3d2.  v0:= temp;
  #L08b3d4.  if v0 == 0 then goto L08b3de;
  #L08b3d8.  v0:= "" @kind object;
  #L08b3dc.  return v0 @kind object;
  #L08b3de.  v0:= v3.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b3e2.  v1:= 58I;
  #L08b3e6.  v2:= v3.`a.r.a` @type ^`java.lang.String` @kind object;
  #L08b3ea.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08b3f0.  v2:= temp;
  #L08b3f2.  v2:= v2 + 3;
  #L08b3f6.  call temp:= `indexOf`(v0, v1, v2) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L08b3fc.  v0:= temp;
  #L08b3fe.  v0:= v0 + 1;
  #L08b402.  v1:= v3.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b406.  v2:= 64I;
  #L08b40a.  call temp:= `indexOf`(v1, v2) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L08b410.  v1:= temp;
  #L08b412.  v2:= v3.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b416.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08b41c.  v0:= temp @kind object;
  #L08b41e.  goto L08b3dc;
}
procedure `boolean` `equals`(`a.r` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `La/r;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08b430.  v0:= instanceof @variable v3 @type ^`a.r` @kind boolean;
  #L08b434.  if v0 == 0 then goto L08b454;
  #L08b438.  v3:= (`a.r`) v3 @kind object;
  #L08b43c.  v0:= v3.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b440.  v1:= v2.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b444.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08b44a.  v0:= temp;
  #L08b44c.  if v0 == 0 then goto L08b454;
  #L08b450.  v0:= 1I;
  #L08b452.  return v0;
  #L08b454.  v0:= 0I;
  #L08b456.  goto L08b452;
}
procedure `java.lang.String` `f`(`a.r` v1 @kind this) @signature `La/r;.f:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b468.  v0:= v1.`a.r.b` @type ^`java.lang.String` @kind object;
  #L08b46c.  return v0 @kind object;
}
procedure `int` `g`(`a.r` v1 @kind this) @signature `La/r;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b480.  v0:= v1.`a.r.c` @type ^`int`;
  #L08b484.  return v0;
}
procedure `java.lang.String` `h`(`a.r` v4 @kind this) @signature `La/r;.h:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08b498.  v0:= v4.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b49c.  v1:= 47I;
  #L08b4a0.  v2:= v4.`a.r.a` @type ^`java.lang.String` @kind object;
  #L08b4a4.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08b4aa.  v2:= temp;
  #L08b4ac.  v2:= v2 + 3;
  #L08b4b0.  call temp:= `indexOf`(v0, v1, v2) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L08b4b6.  v0:= temp;
  #L08b4b8.  v1:= v4.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b4bc.  v2:= v4.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b4c0.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08b4c6.  v2:= temp;
  #L08b4c8.  v3:= "?#" @kind object;
  #L08b4cc.  call temp:= `a`(v1, v0, v2, v3) @signature `La/a/c;.a:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L08b4d2.  v1:= temp;
  #L08b4d4.  v2:= v4.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b4d8.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08b4de.  v0:= temp @kind object;
  #L08b4e0.  return v0 @kind object;
}
procedure `int` `hashCode`(`a.r` v1 @kind this) @signature `La/r;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b4f4.  v0:= v1.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b4f8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L08b4fe.  v0:= temp;
  #L08b500.  return v0;
}
procedure `java.util.List` `i`(`a.r` v6 @kind this) @signature `La/r;.i:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L08b514.  v5:= 47I;
  #L08b518.  v0:= v6.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b51c.  v1:= v6.`a.r.a` @type ^`java.lang.String` @kind object;
  #L08b520.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08b526.  v1:= temp;
  #L08b528.  v1:= v1 + 3;
  #L08b52c.  call temp:= `indexOf`(v0, v5, v1) @signature `Ljava/lang/String;.indexOf:(II)I` @kind virtual;
  #L08b532.  v0:= temp;
  #L08b534.  v1:= v6.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b538.  v2:= v6.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b53c.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08b542.  v2:= temp;
  #L08b544.  v3:= "?#" @kind object;
  #L08b548.  call temp:= `a`(v1, v0, v2, v3) @signature `La/a/c;.a:(Ljava/lang/String;IILjava/lang/String;)I` @kind static;
  #L08b54e.  v1:= temp;
  #L08b550.  v2:= new `java.util.ArrayList`;
  #L08b554.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L08b55a.  if v0 >= v1 then goto L08b582;
  #L08b55e.  v3:= v0 + 1;
  #L08b562.  v0:= v6.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b566.  call temp:= `a`(v0, v3, v1, v5) @signature `La/a/c;.a:(Ljava/lang/String;IIC)I` @kind static;
  #L08b56c.  v0:= temp;
  #L08b56e.  v4:= v6.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b572.  call temp:= `substring`(v4, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08b578.  v3:= temp @kind object;
  #L08b57a.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L08b580.  goto L08b55a;
  #L08b582.  return v2 @kind object;
}
procedure `java.lang.String` `j`(`a.r` v5 @kind this) @signature `La/r;.j:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L08b594.  v0:= v5.`a.r.h` @type ^`java.util.List` @kind object;
  #L08b598.  if v0 != 0 then goto L08b5a0;
  #L08b59c.  v0:= 0I;
  #L08b59e.  return v0 @kind object;
  #L08b5a0.  v0:= v5.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b5a4.  v1:= 63I;
  #L08b5a8.  call temp:= `indexOf`(v0, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L08b5ae.  v0:= temp;
  #L08b5b0.  v0:= v0 + 1;
  #L08b5b4.  v1:= v5.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b5b8.  v2:= v0 + 1;
  #L08b5bc.  v3:= v5.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b5c0.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08b5c6.  v3:= temp;
  #L08b5c8.  v4:= 35I;
  #L08b5cc.  call temp:= `a`(v1, v2, v3, v4) @signature `La/a/c;.a:(Ljava/lang/String;IIC)I` @kind static;
  #L08b5d2.  v1:= temp;
  #L08b5d4.  v2:= v5.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b5d8.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08b5de.  v0:= temp @kind object;
  #L08b5e0.  goto L08b59e;
}
procedure `java.lang.String` `k`(`a.r` v2 @kind this) @signature `La/r;.k:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08b5f4.  v0:= v2.`a.r.h` @type ^`java.util.List` @kind object;
  #L08b5f8.  if v0 != 0 then goto L08b600;
  #L08b5fc.  v0:= 0I;
  #L08b5fe.  return v0 @kind object;
  #L08b600.  v0:= new `java.lang.StringBuilder`;
  #L08b604.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08b60a.  v1:= v2.`a.r.h` @type ^`java.util.List` @kind object;
  #L08b60e.  call `b`(v0, v1) @signature `La/r;.b:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind static;
  #L08b614.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08b61a.  v0:= temp @kind object;
  #L08b61c.  goto L08b5fe;
}
procedure `java.lang.String` `l`(`a.r` v2 @kind this) @signature `La/r;.l:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08b630.  v0:= v2.`a.r.i` @type ^`java.lang.String` @kind object;
  #L08b634.  if v0 != 0 then goto L08b63c;
  #L08b638.  v0:= 0I;
  #L08b63a.  return v0 @kind object;
  #L08b63c.  v0:= v2.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b640.  v1:= 35I;
  #L08b644.  call temp:= `indexOf`(v0, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L08b64a.  v0:= temp;
  #L08b64c.  v0:= v0 + 1;
  #L08b650.  v1:= v2.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b654.  call temp:= `substring`(v1, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L08b65a.  v0:= temp @kind object;
  #L08b65c.  goto L08b63a;
}
procedure `java.lang.String` `m`(`a.r` v2 @kind this) @signature `La/r;.m:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08b670.  v0:= "/..." @kind object;
  #L08b674.  call temp:= `d`(v2, v0) @signature `La/r;.d:(Ljava/lang/String;)La/r$a;` @kind virtual;
  #L08b67a.  v0:= temp @kind object;
  #L08b67c.  v1:= "" @kind object;
  #L08b680.  call temp:= `b`(v0, v1) @signature `La/r$a;.b:(Ljava/lang/String;)La/r$a;` @kind virtual;
  #L08b686.  v0:= temp @kind object;
  #L08b688.  v1:= "" @kind object;
  #L08b68c.  call temp:= `c`(v0, v1) @signature `La/r$a;.c:(Ljava/lang/String;)La/r$a;` @kind virtual;
  #L08b692.  v0:= temp @kind object;
  #L08b694.  call temp:= `c`(v0) @signature `La/r$a;.c:()La/r;` @kind virtual;
  #L08b69a.  v0:= temp @kind object;
  #L08b69c.  call temp:= `toString`(v0) @signature `La/r;.toString:()Ljava/lang/String;` @kind virtual;
  #L08b6a2.  v0:= temp @kind object;
  #L08b6a4.  return v0 @kind object;
}
procedure `a.r$a` `n`(`a.r` v3 @kind this) @signature `La/r;.n:()La/r$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L08b6b8.  v1:= new `a.r$a`;
  #L08b6bc.  call `<init>`(v1) @signature `La/r$a;.<init>:()V` @kind direct;
  #L08b6c2.  v0:= v3.`a.r.a` @type ^`java.lang.String` @kind object;
  #L08b6c6.  v1.`a.r$a.a` @type ^`java.lang.String` := v0 @kind object;
  #L08b6ca.  call temp:= `d`(v3) @signature `La/r;.d:()Ljava/lang/String;` @kind virtual;
  #L08b6d0.  v0:= temp @kind object;
  #L08b6d2.  v1.`a.r$a.b` @type ^`java.lang.String` := v0 @kind object;
  #L08b6d6.  call temp:= `e`(v3) @signature `La/r;.e:()Ljava/lang/String;` @kind virtual;
  #L08b6dc.  v0:= temp @kind object;
  #L08b6de.  v1.`a.r$a.c` @type ^`java.lang.String` := v0 @kind object;
  #L08b6e2.  v0:= v3.`a.r.b` @type ^`java.lang.String` @kind object;
  #L08b6e6.  v1.`a.r$a.d` @type ^`java.lang.String` := v0 @kind object;
  #L08b6ea.  v0:= v3.`a.r.c` @type ^`int`;
  #L08b6ee.  v2:= v3.`a.r.a` @type ^`java.lang.String` @kind object;
  #L08b6f2.  call temp:= `a`(v2) @signature `La/r;.a:(Ljava/lang/String;)I` @kind static;
  #L08b6f8.  v2:= temp;
  #L08b6fa.  if v0 == v2 then goto L08b73e;
  #L08b6fe.  v0:= v3.`a.r.c` @type ^`int`;
  #L08b702.  v1.`a.r$a.e` @type ^`int` := v0;
  #L08b706.  v0:= v1.`a.r$a.f` @type ^`java.util.List` @kind object;
  #L08b70a.  call `clear`(v0) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L08b710.  v0:= v1.`a.r$a.f` @type ^`java.util.List` @kind object;
  #L08b714.  call temp:= `i`(v3) @signature `La/r;.i:()Ljava/util/List;` @kind virtual;
  #L08b71a.  v2:= temp @kind object;
  #L08b71c.  call temp:= `addAll`(v0, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L08b722.  call temp:= `j`(v3) @signature `La/r;.j:()Ljava/lang/String;` @kind virtual;
  #L08b728.  v0:= temp @kind object;
  #L08b72a.  call temp:= `e`(v1, v0) @signature `La/r$a;.e:(Ljava/lang/String;)La/r$a;` @kind virtual;
  #L08b730.  call temp:= `l`(v3) @signature `La/r;.l:()Ljava/lang/String;` @kind virtual;
  #L08b736.  v0:= temp @kind object;
  #L08b738.  v1.`a.r$a.h` @type ^`java.lang.String` := v0 @kind object;
  #L08b73c.  return v1 @kind object;
  #L08b73e.  v0:= -1I;
  #L08b740.  goto L08b702;
}
procedure `java.lang.String` `toString`(`a.r` v1 @kind this) @signature `La/r;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b754.  v0:= v1.`a.r.j` @type ^`java.lang.String` @kind object;
  #L08b758.  return v0 @kind object;
}
