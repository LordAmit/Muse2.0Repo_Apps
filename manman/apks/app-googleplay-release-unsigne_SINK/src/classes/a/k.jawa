record `a.k` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `a.k.d` @AccessFlag FINAL;
  `boolean` `a.k.e` @AccessFlag FINAL;
  `java.lang.String`[] `a.k.f` @AccessFlag FINAL;
  `java.lang.String`[] `a.k.g` @AccessFlag FINAL;
}
global `a.k` `@@a.k.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `a.k` `@@a.k.b` @AccessFlag PUBLIC_STATIC_FINAL;
global `a.k` `@@a.k.c` @AccessFlag PUBLIC_STATIC_FINAL;
global `a.h`[] `@@a.k.h` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L08c9c0.  v7:= 4I;
  #L08c9c2.  v6:= 3I;
  #L08c9c4.  v5:= 2I;
  #L08c9c6.  v4:= 0I;
  #L08c9c8.  v3:= 1I;
  #L08c9ca.  v0:= 15I;
  #L08c9ce.  v0:= new `a.h`[v0];
  #L08c9d2.  v1:= `@@a.h.aW` @type ^`a.h` @kind object;
  #L08c9d6.  v0[v4]:= v1 @kind object;
  #L08c9da.  v1:= `@@a.h.ba` @type ^`a.h` @kind object;
  #L08c9de.  v0[v3]:= v1 @kind object;
  #L08c9e2.  v1:= `@@a.h.aX` @type ^`a.h` @kind object;
  #L08c9e6.  v0[v5]:= v1 @kind object;
  #L08c9ea.  v1:= `@@a.h.bb` @type ^`a.h` @kind object;
  #L08c9ee.  v0[v6]:= v1 @kind object;
  #L08c9f2.  v1:= `@@a.h.bh` @type ^`a.h` @kind object;
  #L08c9f6.  v0[v7]:= v1 @kind object;
  #L08c9fa.  v1:= 5I;
  #L08c9fc.  v2:= `@@a.h.bg` @type ^`a.h` @kind object;
  #L08ca00.  v0[v1]:= v2 @kind object;
  #L08ca04.  v1:= 6I;
  #L08ca06.  v2:= `@@a.h.ax` @type ^`a.h` @kind object;
  #L08ca0a.  v0[v1]:= v2 @kind object;
  #L08ca0e.  v1:= 7I;
  #L08ca10.  v2:= `@@a.h.aH` @type ^`a.h` @kind object;
  #L08ca14.  v0[v1]:= v2 @kind object;
  #L08ca18.  v1:= 8I;
  #L08ca1c.  v2:= `@@a.h.ay` @type ^`a.h` @kind object;
  #L08ca20.  v0[v1]:= v2 @kind object;
  #L08ca24.  v1:= 9I;
  #L08ca28.  v2:= `@@a.h.aI` @type ^`a.h` @kind object;
  #L08ca2c.  v0[v1]:= v2 @kind object;
  #L08ca30.  v1:= 10I;
  #L08ca34.  v2:= `@@a.h.af` @type ^`a.h` @kind object;
  #L08ca38.  v0[v1]:= v2 @kind object;
  #L08ca3c.  v1:= 11I;
  #L08ca40.  v2:= `@@a.h.ag` @type ^`a.h` @kind object;
  #L08ca44.  v0[v1]:= v2 @kind object;
  #L08ca48.  v1:= 12I;
  #L08ca4c.  v2:= `@@a.h.D` @type ^`a.h` @kind object;
  #L08ca50.  v0[v1]:= v2 @kind object;
  #L08ca54.  v1:= 13I;
  #L08ca58.  v2:= `@@a.h.H` @type ^`a.h` @kind object;
  #L08ca5c.  v0[v1]:= v2 @kind object;
  #L08ca60.  v1:= 14I;
  #L08ca64.  v2:= `@@a.h.h` @type ^`a.h` @kind object;
  #L08ca68.  v0[v1]:= v2 @kind object;
  #L08ca6c.  `@@a.k.h` @type ^`a.h`[] := v0 @kind object;
  #L08ca70.  v0:= new `a.k$a`;
  #L08ca74.  call `<init>`(v0, v3) @signature `La/k$a;.<init>:(Z)V` @kind direct;
  #L08ca7a.  v1:= `@@a.k.h` @type ^`a.h`[] @kind object;
  #L08ca7e.  call temp:= `a`(v0, v1) @signature `La/k$a;.a:([La/h;)La/k$a;` @kind virtual;
  #L08ca84.  v0:= temp @kind object;
  #L08ca86.  v1:= new `a.ac`[v7];
  #L08ca8a.  v2:= `@@a.ac.a` @type ^`a.ac` @kind object;
  #L08ca8e.  v1[v4]:= v2 @kind object;
  #L08ca92.  v2:= `@@a.ac.b` @type ^`a.ac` @kind object;
  #L08ca96.  v1[v3]:= v2 @kind object;
  #L08ca9a.  v2:= `@@a.ac.c` @type ^`a.ac` @kind object;
  #L08ca9e.  v1[v5]:= v2 @kind object;
  #L08caa2.  v2:= `@@a.ac.d` @type ^`a.ac` @kind object;
  #L08caa6.  v1[v6]:= v2 @kind object;
  #L08caaa.  call temp:= `a`(v0, v1) @signature `La/k$a;.a:([La/ac;)La/k$a;` @kind virtual;
  #L08cab0.  v0:= temp @kind object;
  #L08cab2.  call temp:= `a`(v0, v3) @signature `La/k$a;.a:(Z)La/k$a;` @kind virtual;
  #L08cab8.  v0:= temp @kind object;
  #L08caba.  call temp:= `a`(v0) @signature `La/k$a;.a:()La/k;` @kind virtual;
  #L08cac0.  v0:= temp @kind object;
  #L08cac2.  `@@a.k.a` @type ^`a.k` := v0 @kind object;
  #L08cac6.  v0:= new `a.k$a`;
  #L08caca.  v1:= `@@a.k.a` @type ^`a.k` @kind object;
  #L08cace.  call `<init>`(v0, v1) @signature `La/k$a;.<init>:(La/k;)V` @kind direct;
  #L08cad4.  v1:= new `a.ac`[v3];
  #L08cad8.  v2:= `@@a.ac.d` @type ^`a.ac` @kind object;
  #L08cadc.  v1[v4]:= v2 @kind object;
  #L08cae0.  call temp:= `a`(v0, v1) @signature `La/k$a;.a:([La/ac;)La/k$a;` @kind virtual;
  #L08cae6.  v0:= temp @kind object;
  #L08cae8.  call temp:= `a`(v0, v3) @signature `La/k$a;.a:(Z)La/k$a;` @kind virtual;
  #L08caee.  v0:= temp @kind object;
  #L08caf0.  call temp:= `a`(v0) @signature `La/k$a;.a:()La/k;` @kind virtual;
  #L08caf6.  v0:= temp @kind object;
  #L08caf8.  `@@a.k.b` @type ^`a.k` := v0 @kind object;
  #L08cafc.  v0:= new `a.k$a`;
  #L08cb00.  call `<init>`(v0, v4) @signature `La/k$a;.<init>:(Z)V` @kind direct;
  #L08cb06.  call temp:= `a`(v0) @signature `La/k$a;.a:()La/k;` @kind virtual;
  #L08cb0c.  v0:= temp @kind object;
  #L08cb0e.  `@@a.k.c` @type ^`a.k` := v0 @kind object;
  #L08cb12.  return @kind void;
}
procedure `void` `<init>`(`a.k` v1 @kind this, `a.k$a` v2 @kind object) @signature `La/k;.<init>:(La/k$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L08cb24.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08cb2a.  v0:= v2.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L08cb2e.  v1.`a.k.d` @type ^`boolean` := v0 @kind boolean;
  #L08cb32.  v0:= v2.`a.k$a.b` @type ^`java.lang.String`[] @kind object;
  #L08cb36.  v1.`a.k.f` @type ^`java.lang.String`[] := v0 @kind object;
  #L08cb3a.  v0:= v2.`a.k$a.c` @type ^`java.lang.String`[] @kind object;
  #L08cb3e.  v1.`a.k.g` @type ^`java.lang.String`[] := v0 @kind object;
  #L08cb42.  v0:= v2.`a.k$a.d` @type ^`boolean` @kind boolean;
  #L08cb46.  v1.`a.k.e` @type ^`boolean` := v0 @kind boolean;
  #L08cb4a.  return @kind void;
}
procedure `boolean` `a`(`java.lang.String`[] v5 @kind object, `java.lang.String`[] v6 @kind object) @signature `La/k;.a:([Ljava/lang/String;[Ljava/lang/String;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L08cb5c.  v0:= 0I;
  #L08cb5e.  if v5 == 0 then goto L08cb72;
  #L08cb62.  if v6 == 0 then goto L08cb72;
  #L08cb66.  v1:= length @variable v5;
  #L08cb68.  if v1 == 0 then goto L08cb72;
  #L08cb6c.  v1:= length @variable v6;
  #L08cb6e.  if v1 != 0 then goto L08cb74;
  #L08cb72.  return v0;
  #L08cb74.  v2:= length @variable v5;
  #L08cb76.  v1:= v0;
  #L08cb78.  if v1 >= v2 then goto L08cb72;
  #L08cb7c.  v3:= v5[v1] @kind object;
  #L08cb80.  call temp:= `a`(v6, v3) @signature `La/a/c;.a:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L08cb86.  v3:= temp;
  #L08cb88.  v4:= -1I;
  #L08cb8a.  if v3 == v4 then goto L08cb92;
  #L08cb8e.  v0:= 1I;
  #L08cb90.  goto L08cb72;
  #L08cb92.  v1:= v1 + 1;
  #L08cb96.  goto L08cb78;
}
procedure `a.k` `b`(`a.k` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object, `boolean` v6 ) @signature `La/k;.b:(Ljavax/net/ssl/SSLSocket;Z)La/k;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08cba8.  v0:= v4.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08cbac.  if v0 == 0 then goto L08cc40;
  #L08cbb0.  v0:= constclass @type ^`java.lang.String` @kind object;
  #L08cbb4.  v1:= v4.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08cbb8.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L08cbbe.  v2:= temp @kind object;
  #L08cbc0.  call temp:= `a`(v0, v1, v2) @signature `La/a/c;.a:(Ljava/lang/Class;[Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L08cbc6.  v0:= temp @kind object;
  #L08cbc8.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L08cbcc.  v1:= v0 @kind object;
  #L08cbce.  v0:= v4.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08cbd2.  if v0 == 0 then goto L08cc4c;
  #L08cbd6.  v0:= constclass @type ^`java.lang.String` @kind object;
  #L08cbda.  v2:= v4.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08cbde.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L08cbe4.  v3:= temp @kind object;
  #L08cbe6.  call temp:= `a`(v0, v2, v3) @signature `La/a/c;.a:(Ljava/lang/Class;[Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L08cbec.  v0:= temp @kind object;
  #L08cbee.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L08cbf2.  if v6 == 0 then goto L08cc1c;
  #L08cbf6.  call temp:= `getSupportedCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getSupportedCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L08cbfc.  v2:= temp @kind object;
  #L08cbfe.  v3:= "TLS_FALLBACK_SCSV" @kind object;
  #L08cc02.  call temp:= `a`(v2, v3) @signature `La/a/c;.a:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L08cc08.  v2:= temp;
  #L08cc0a.  v3:= -1I;
  #L08cc0c.  if v2 == v3 then goto L08cc1c;
  #L08cc10.  v2:= "TLS_FALLBACK_SCSV" @kind object;
  #L08cc14.  call temp:= `a`(v1, v2) @signature `La/a/c;.a:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L08cc1a.  v1:= temp @kind object;
  #L08cc1c.  v2:= new `a.k$a`;
  #L08cc20.  call `<init>`(v2, v4) @signature `La/k$a;.<init>:(La/k;)V` @kind direct;
  #L08cc26.  call temp:= `a`(v2, v1) @signature `La/k$a;.a:([Ljava/lang/String;)La/k$a;` @kind virtual;
  #L08cc2c.  v1:= temp @kind object;
  #L08cc2e.  call temp:= `b`(v1, v0) @signature `La/k$a;.b:([Ljava/lang/String;)La/k$a;` @kind virtual;
  #L08cc34.  v0:= temp @kind object;
  #L08cc36.  call temp:= `a`(v0) @signature `La/k$a;.a:()La/k;` @kind virtual;
  #L08cc3c.  v0:= temp @kind object;
  #L08cc3e.  return v0 @kind object;
  #L08cc40.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L08cc46.  v0:= temp @kind object;
  #L08cc48.  v1:= v0 @kind object;
  #L08cc4a.  goto L08cbce;
  #L08cc4c.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L08cc52.  v0:= temp @kind object;
  #L08cc54.  goto L08cbf2;
}
procedure `void` `a`(`a.k` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object, `boolean` v4 ) @signature `La/k;.a:(Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L08cc68.  call temp:= `b`(v2, v3, v4) @signature `La/k;.b:(Ljavax/net/ssl/SSLSocket;Z)La/k;` @kind direct;
  #L08cc6e.  v0:= temp @kind object;
  #L08cc70.  v1:= v0.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08cc74.  if v1 == 0 then goto L08cc82;
  #L08cc78.  v1:= v0.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08cc7c.  call `setEnabledProtocols`(v3, v1) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledProtocols:([Ljava/lang/String;)V` @kind virtual;
  #L08cc82.  v1:= v0.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08cc86.  if v1 == 0 then goto L08cc94;
  #L08cc8a.  v0:= v0.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08cc8e.  call `setEnabledCipherSuites`(v3, v0) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledCipherSuites:([Ljava/lang/String;)V` @kind virtual;
  #L08cc94.  return @kind void;
}
procedure `boolean` `a`(`a.k` v1 @kind this) @signature `La/k;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08cca8.  v0:= v1.`a.k.d` @type ^`boolean` @kind boolean;
  #L08ccac.  return v0;
}
procedure `boolean` `a`(`a.k` v3 @kind this, `javax.net.ssl.SSLSocket` v4 @kind object) @signature `La/k;.a:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L08ccc0.  v0:= 0I;
  #L08ccc2.  v1:= v3.`a.k.d` @type ^`boolean` @kind boolean;
  #L08ccc6.  if v1 != 0 then goto L08cccc;
  #L08ccca.  return v0;
  #L08cccc.  v1:= v3.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08ccd0.  if v1 == 0 then goto L08ccec;
  #L08ccd4.  v1:= v3.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08ccd8.  call temp:= `getEnabledProtocols`(v4) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L08ccde.  v2:= temp @kind object;
  #L08cce0.  call temp:= `a`(v1, v2) @signature `La/k;.a:([Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L08cce6.  v1:= temp;
  #L08cce8.  if v1 == 0 then goto L08ccca;
  #L08ccec.  v1:= v3.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08ccf0.  if v1 == 0 then goto L08cd0c;
  #L08ccf4.  v1:= v3.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08ccf8.  call temp:= `getEnabledCipherSuites`(v4) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L08ccfe.  v2:= temp @kind object;
  #L08cd00.  call temp:= `a`(v1, v2) @signature `La/k;.a:([Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L08cd06.  v1:= temp;
  #L08cd08.  if v1 == 0 then goto L08ccca;
  #L08cd0c.  v0:= 1I;
  #L08cd0e.  goto L08ccca;
}
procedure `java.util.List` `b`(`a.k` v5 @kind this) @signature `La/k;.b:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L08cd20.  v0:= v5.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08cd24.  if v0 != 0 then goto L08cd2c;
  #L08cd28.  v0:= 0I;
  #L08cd2a.  return v0 @kind object;
  #L08cd2c.  v1:= new `java.util.ArrayList`;
  #L08cd30.  v0:= v5.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08cd34.  v0:= length @variable v0;
  #L08cd36.  call `<init>`(v1, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L08cd3c.  v2:= v5.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08cd40.  v3:= length @variable v2;
  #L08cd42.  v0:= 0I;
  #L08cd44.  if v0 >= v3 then goto L08cd60;
  #L08cd48.  v4:= v2[v0] @kind object;
  #L08cd4c.  call temp:= `a`(v4) @signature `La/h;.a:(Ljava/lang/String;)La/h;` @kind static;
  #L08cd52.  v4:= temp @kind object;
  #L08cd54.  call temp:= `add`(v1, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L08cd5a.  v0:= v0 + 1;
  #L08cd5e.  goto L08cd44;
  #L08cd60.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L08cd66.  v0:= temp @kind object;
  #L08cd68.  goto L08cd2a;
}
procedure `java.util.List` `c`(`a.k` v5 @kind this) @signature `La/k;.c:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L08cd7c.  v0:= v5.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08cd80.  if v0 != 0 then goto L08cd88;
  #L08cd84.  v0:= 0I;
  #L08cd86.  return v0 @kind object;
  #L08cd88.  v1:= new `java.util.ArrayList`;
  #L08cd8c.  v0:= v5.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08cd90.  v0:= length @variable v0;
  #L08cd92.  call `<init>`(v1, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L08cd98.  v2:= v5.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08cd9c.  v3:= length @variable v2;
  #L08cd9e.  v0:= 0I;
  #L08cda0.  if v0 >= v3 then goto L08cdbc;
  #L08cda4.  v4:= v2[v0] @kind object;
  #L08cda8.  call temp:= `a`(v4) @signature `La/ac;.a:(Ljava/lang/String;)La/ac;` @kind static;
  #L08cdae.  v4:= temp @kind object;
  #L08cdb0.  call temp:= `add`(v1, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L08cdb6.  v0:= v0 + 1;
  #L08cdba.  goto L08cda0;
  #L08cdbc.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L08cdc2.  v0:= temp @kind object;
  #L08cdc4.  goto L08cd86;
}
procedure `boolean` `d`(`a.k` v1 @kind this) @signature `La/k;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08cdd8.  v0:= v1.`a.k.e` @type ^`boolean` @kind boolean;
  #L08cddc.  return v0;
}
procedure `boolean` `equals`(`a.k` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `La/k;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08cdf0.  v1:= 1I;
  #L08cdf2.  v0:= 0I;
  #L08cdf4.  v2:= instanceof @variable v5 @type ^`a.k` @kind boolean;
  #L08cdf8.  if v2 != 0 then goto L08cdfe;
  #L08cdfc.  return v0;
  #L08cdfe.  if v5 != v4 then goto L08ce06;
  #L08ce02.  v0:= v1;
  #L08ce04.  goto L08cdfc;
  #L08ce06.  v5:= (`a.k`) v5 @kind object;
  #L08ce0a.  v2:= v4.`a.k.d` @type ^`boolean` @kind boolean;
  #L08ce0e.  v3:= v5.`a.k.d` @type ^`boolean` @kind boolean;
  #L08ce12.  if v2 != v3 then goto L08cdfc;
  #L08ce16.  v2:= v4.`a.k.d` @type ^`boolean` @kind boolean;
  #L08ce1a.  if v2 == 0 then goto L08ce52;
  #L08ce1e.  v2:= v4.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08ce22.  v3:= v5.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08ce26.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L08ce2c.  v2:= temp;
  #L08ce2e.  if v2 == 0 then goto L08cdfc;
  #L08ce32.  v2:= v4.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08ce36.  v3:= v5.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08ce3a.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L08ce40.  v2:= temp;
  #L08ce42.  if v2 == 0 then goto L08cdfc;
  #L08ce46.  v2:= v4.`a.k.e` @type ^`boolean` @kind boolean;
  #L08ce4a.  v3:= v5.`a.k.e` @type ^`boolean` @kind boolean;
  #L08ce4e.  if v2 != v3 then goto L08cdfc;
  #L08ce52.  v0:= v1;
  #L08ce54.  goto L08cdfc;
}
procedure `int` `hashCode`(`a.k` v2 @kind this) @signature `La/k;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08ce68.  v0:= 17I;
  #L08ce6c.  v1:= v2.`a.k.d` @type ^`boolean` @kind boolean;
  #L08ce70.  if v1 == 0 then goto L08cea6;
  #L08ce74.  v0:= v2.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08ce78.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L08ce7e.  v0:= temp;
  #L08ce80.  v0:= v0 + 527;
  #L08ce84.  v0:= v0 * 31;
  #L08ce88.  v1:= v2.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08ce8c.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L08ce92.  v1:= temp;
  #L08ce94.  v0:= v0 + v1 @kind int;
  #L08ce96.  v1:= v0 * 31;
  #L08ce9a.  v0:= v2.`a.k.e` @type ^`boolean` @kind boolean;
  #L08ce9e.  if v0 == 0 then goto L08cea8;
  #L08cea2.  v0:= 0I;
  #L08cea4.  v0:= v0 + v1 @kind int;
  #L08cea6.  return v0;
  #L08cea8.  v0:= 1I;
  #L08ceaa.  goto L08cea4;
}
procedure `java.lang.String` `toString`(`a.k` v4 @kind this) @signature `La/k;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08cebc.  v0:= v4.`a.k.d` @type ^`boolean` @kind boolean;
  #L08cec0.  if v0 != 0 then goto L08ceca;
  #L08cec4.  v0:= "ConnectionSpec()" @kind object;
  #L08cec8.  return v0 @kind object;
  #L08ceca.  v0:= v4.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08cece.  if v0 == 0 then goto L08cf5a;
  #L08ced2.  call temp:= `b`(v4) @signature `La/k;.b:()Ljava/util/List;` @kind virtual;
  #L08ced8.  v0:= temp @kind object;
  #L08ceda.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L08cee0.  v0:= temp @kind object;
  #L08cee2.  v1:= v4.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08cee6.  if v1 == 0 then goto L08cf60;
  #L08ceea.  call temp:= `c`(v4) @signature `La/k;.c:()Ljava/util/List;` @kind virtual;
  #L08cef0.  v1:= temp @kind object;
  #L08cef2.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L08cef8.  v1:= temp @kind object;
  #L08cefa.  v2:= new `java.lang.StringBuilder`;
  #L08cefe.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08cf04.  v3:= "ConnectionSpec(cipherSuites=" @kind object;
  #L08cf08.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08cf0e.  v2:= temp @kind object;
  #L08cf10.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08cf16.  v0:= temp @kind object;
  #L08cf18.  v2:= ", tlsVersions=" @kind object;
  #L08cf1c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08cf22.  v0:= temp @kind object;
  #L08cf24.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08cf2a.  v0:= temp @kind object;
  #L08cf2c.  v1:= ", supportsTlsExtensions=" @kind object;
  #L08cf30.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08cf36.  v0:= temp @kind object;
  #L08cf38.  v1:= v4.`a.k.e` @type ^`boolean` @kind boolean;
  #L08cf3c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L08cf42.  v0:= temp @kind object;
  #L08cf44.  v1:= ")" @kind object;
  #L08cf48.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08cf4e.  v0:= temp @kind object;
  #L08cf50.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08cf56.  v0:= temp @kind object;
  #L08cf58.  goto L08cec8;
  #L08cf5a.  v0:= "[all enabled]" @kind object;
  #L08cf5e.  goto L08cee2;
  #L08cf60.  v1:= "[all enabled]" @kind object;
  #L08cf64.  goto L08cefa;
}
