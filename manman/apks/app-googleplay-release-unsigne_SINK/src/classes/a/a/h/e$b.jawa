record `a.a.h.e$b` @kind class @AccessFlag FINAL extends `a.a.h.e` @kind class {
  `java.util.Map` `a.a.h.e$b.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.h.e$b` v6 @kind this, `java.security.cert.X509Certificate`[] v7 @kind object) @signature `La/a/h/e$b;.<init>:([Ljava/security/cert/X509Certificate;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L08a03c.  call `<init>`(v6) @signature `La/a/h/e;.<init>:()V` @kind direct;
  #L08a042.  v0:= new `java.util.LinkedHashMap`;
  #L08a046.  call `<init>`(v0) @signature `Ljava/util/LinkedHashMap;.<init>:()V` @kind direct;
  #L08a04c.  v6.`a.a.h.e$b.a` @type ^`java.util.Map` := v0 @kind object;
  #L08a050.  v2:= length @variable v7;
  #L08a052.  v0:= 0I;
  #L08a054.  v1:= v0;
  #L08a056.  if v1 >= v2 then goto L08a09e;
  #L08a05a.  v3:= v7[v1] @kind object;
  #L08a05e.  call temp:= `getSubjectX500Principal`(v3) @signature `Ljava/security/cert/X509Certificate;.getSubjectX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L08a064.  v4:= temp @kind object;
  #L08a066.  v0:= v6.`a.a.h.e$b.a` @type ^`java.util.Map` @kind object;
  #L08a06a.  call temp:= `get`(v0, v4) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L08a070.  v0:= temp @kind object;
  #L08a072.  v0:= (`java.util.Set`) v0 @kind object;
  #L08a076.  if v0 != 0 then goto L08a090;
  #L08a07a.  v0:= new `java.util.LinkedHashSet`;
  #L08a07e.  v5:= 1I;
  #L08a080.  call `<init>`(v0, v5) @signature `Ljava/util/LinkedHashSet;.<init>:(I)V` @kind direct;
  #L08a086.  v5:= v6.`a.a.h.e$b.a` @type ^`java.util.Map` @kind object;
  #L08a08a.  call temp:= `put`(v5, v4, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L08a090.  call temp:= `add`(v0, v3) @signature `Ljava/util/Set;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L08a096.  v0:= v1 + 1;
  #L08a09a.  v1:= v0;
  #L08a09c.  goto L08a056;
  #L08a09e.  return @kind void;
}
procedure `java.security.cert.X509Certificate` `a`(`a.a.h.e$b` v4 @kind this, `java.security.cert.X509Certificate` v5 @kind object) @signature `La/a/h/e$b;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08a0b0.  v1:= 0I;
  #L08a0b2.  call temp:= `getIssuerX500Principal`(v5) @signature `Ljava/security/cert/X509Certificate;.getIssuerX500Principal:()Ljavax/security/auth/x500/X500Principal;` @kind virtual;
  #L08a0b8.  v0:= temp @kind object;
  #L08a0ba.  v2:= v4.`a.a.h.e$b.a` @type ^`java.util.Map` @kind object;
  #L08a0be.  call temp:= `get`(v2, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L08a0c4.  v0:= temp @kind object;
  #L08a0c6.  v0:= (`java.util.Set`) v0 @kind object;
  #L08a0ca.  if v0 != 0 then goto L08a0d2;
  #L08a0ce.  v0:= v1 @kind object;
  #L08a0d0.  return v0 @kind object;
  #L08a0d2.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L08a0d8.  v2:= temp @kind object;
  #L08a0da.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L08a0e0.  v0:= temp;
  #L08a0e2.  if v0 == 0 then goto L08a106;
  #L08a0e6.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L08a0ec.  v0:= temp @kind object;
  #L08a0ee.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L08a0f2.  call temp:= `getPublicKey`(v0) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L08a0f8.  v3:= temp @kind object;
  #Try_start0.  
  #L08a0fa.  call `verify`(v5, v3) @signature `Ljava/security/cert/X509Certificate;.verify:(Ljava/security/PublicKey;)V` @kind virtual;
  #Try_end0.  
  #L08a100.  goto L08a0d0;
  #L08a102.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L08a104.  goto L08a0da;
  #L08a106.  v0:= v1 @kind object;
  #L08a108.  goto L08a0d0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L08a102;
}
procedure `boolean` `equals`(`a.a.h.e$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `La/a/h/e$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L08a12c.  v0:= 1I;
  #L08a12e.  if v4 != v3 then goto L08a134;
  #L08a132.  return v0;
  #L08a134.  v1:= instanceof @variable v4 @type ^`a.a.h.e$b` @kind boolean;
  #L08a138.  if v1 == 0 then goto L08a154;
  #L08a13c.  v4:= (`a.a.h.e$b`) v4 @kind object;
  #L08a140.  v1:= v4.`a.a.h.e$b.a` @type ^`java.util.Map` @kind object;
  #L08a144.  v2:= v3.`a.a.h.e$b.a` @type ^`java.util.Map` @kind object;
  #L08a148.  call temp:= `equals`(v1, v2) @signature `Ljava/util/Map;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L08a14e.  v1:= temp;
  #L08a150.  if v1 != 0 then goto L08a132;
  #L08a154.  v0:= 0I;
  #L08a156.  goto L08a132;
}
procedure `int` `hashCode`(`a.a.h.e$b` v1 @kind this) @signature `La/a/h/e$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08a168.  v0:= v1.`a.a.h.e$b.a` @type ^`java.util.Map` @kind object;
  #L08a16c.  call temp:= `hashCode`(v0) @signature `Ljava/util/Map;.hashCode:()I` @kind interface;
  #L08a172.  v0:= temp;
  #L08a174.  return v0;
}
