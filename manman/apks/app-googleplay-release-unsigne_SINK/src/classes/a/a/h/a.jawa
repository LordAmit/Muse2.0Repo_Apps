record `a.a.h.a` @kind class @AccessFlag PUBLIC_FINAL extends `a.a.h.b` @kind class {
  `a.a.h.e` `a.a.h.a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.h.a` v0 @kind this, `a.a.h.e` v1 @kind object) @signature `La/a/h/a;.<init>:(La/a/h/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L088bbc.  call `<init>`(v0) @signature `La/a/h/b;.<init>:()V` @kind direct;
  #L088bc2.  v0.`a.a.h.a.a` @type ^`a.a.h.e` := v1 @kind object;
  #L088bc6.  return @kind void;
}
procedure `boolean` `a`(`a.a.h.a` v3 @kind this, `java.security.cert.X509Certificate` v4 @kind object, `java.security.cert.X509Certificate` v5 @kind object) @signature `La/a/h/a;.a:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L088bd8.  v0:= 0I;
  #L088bda.  call temp:= `getIssuerDN`(v4) @signature `Ljava/security/cert/X509Certificate;.getIssuerDN:()Ljava/security/Principal;` @kind virtual;
  #L088be0.  v1:= temp @kind object;
  #L088be2.  call temp:= `getSubjectDN`(v5) @signature `Ljava/security/cert/X509Certificate;.getSubjectDN:()Ljava/security/Principal;` @kind virtual;
  #L088be8.  v2:= temp @kind object;
  #L088bea.  call temp:= `equals`(v1, v2) @signature `Ljava/security/Principal;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L088bf0.  v1:= temp;
  #L088bf2.  if v1 != 0 then goto L088bf8;
  #L088bf6.  return v0;
  #Try_start0.  
  #L088bf8.  call temp:= `getPublicKey`(v5) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L088bfe.  v1:= temp @kind object;
  #L088c00.  call `verify`(v4, v1) @signature `Ljava/security/cert/X509Certificate;.verify:(Ljava/security/PublicKey;)V` @kind virtual;
  #Try_end0.  
  #L088c06.  v0:= 1I;
  #L088c08.  goto L088bf6;
  #L088c0a.  v1:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L088c0c.  goto L088bf6;
  catch `java.security.GeneralSecurityException` @[Try_start0..Try_end0] goto L088c0a;
}
procedure `java.util.List` `a`(`a.a.h.a` v9 @kind this, `java.util.List` v10 @kind object, `java.lang.String` v11 @kind object) @signature `La/a/h/a;.a:(Ljava/util/List;Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L088c30.  v2:= 1I;
  #L088c32.  v0:= 0I;
  #L088c34.  v6:= new `java.util.ArrayDeque`;
  #L088c38.  call `<init>`(v6, v10) @signature `Ljava/util/ArrayDeque;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L088c3e.  v4:= new `java.util.ArrayList`;
  #L088c42.  call `<init>`(v4) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L088c48.  call temp:= `removeFirst`(v6) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L088c4e.  v1:= temp @kind object;
  #L088c50.  call temp:= `add`(v4, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L088c56.  v5:= v0;
  #L088c58.  v3:= v0;
  #L088c5a.  v0:= 9I;
  #L088c5e.  if v5 >= v0 then goto L088d3a;
  #L088c62.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L088c68.  v0:= temp;
  #L088c6a.  v0:= v0 + -1;
  #L088c6e.  call temp:= `get`(v4, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L088c74.  v0:= temp @kind object;
  #L088c76.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L088c7a.  v1:= v9.`a.a.h.a.a` @type ^`a.a.h.e` @kind object;
  #L088c7e.  call temp:= `a`(v1, v0) @signature `La/a/h/e;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @kind virtual;
  #L088c84.  v1:= temp @kind object;
  #L088c86.  if v1 == 0 then goto L088cc4;
  #L088c8a.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L088c90.  v3:= temp;
  #L088c92.  if v3 > v2 then goto L088ca2;
  #L088c96.  call temp:= `equals`(v0, v1) @signature `Ljava/security/cert/X509Certificate;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L088c9c.  v0:= temp;
  #L088c9e.  if v0 != 0 then goto L088ca8;
  #L088ca2.  call temp:= `add`(v4, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L088ca8.  call temp:= `a`(v9, v1, v1) @signature `La/a/h/a;.a:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L088cae.  v0:= temp;
  #L088cb0.  if v0 == 0 then goto L088cb8;
  #L088cb4.  v0:= v4 @kind object;
  #L088cb6.  return v0 @kind object;
  #L088cb8.  v0:= v2;
  #L088cba.  v1:= v5 + 1;
  #L088cbe.  v5:= v1;
  #L088cc0.  v3:= v0;
  #L088cc2.  goto L088c5a;
  #L088cc4.  call temp:= `iterator`(v6) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L088cca.  v7:= temp @kind object;
  #L088ccc.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L088cd2.  v1:= temp;
  #L088cd4.  if v1 == 0 then goto L088d00;
  #L088cd8.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L088cde.  v1:= temp @kind object;
  #L088ce0.  v1:= (`java.security.cert.X509Certificate`) v1 @kind object;
  #L088ce4.  call temp:= `a`(v9, v0, v1) @signature `La/a/h/a;.a:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L088cea.  v8:= temp;
  #L088cec.  if v8 == 0 then goto L088ccc;
  #L088cf0.  call `remove`(v7) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L088cf6.  call temp:= `add`(v4, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L088cfc.  v0:= v3;
  #L088cfe.  goto L088cba;
  #L088d00.  if v3 == 0 then goto L088d08;
  #L088d04.  v0:= v4 @kind object;
  #L088d06.  goto L088cb6;
  #L088d08.  v1:= new `javax.net.ssl.SSLPeerUnverifiedException`;
  #L088d0c.  v2:= new `java.lang.StringBuilder`;
  #L088d10.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L088d16.  v3:= "Failed to find a trusted cert that signed " @kind object;
  #L088d1a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L088d20.  v2:= temp @kind object;
  #L088d22.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L088d28.  v0:= temp @kind object;
  #L088d2a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L088d30.  v0:= temp @kind object;
  #L088d32.  call `<init>`(v1, v0) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L088d38.  throw v1;
  #L088d3a.  v0:= new `javax.net.ssl.SSLPeerUnverifiedException`;
  #L088d3e.  v1:= new `java.lang.StringBuilder`;
  #L088d42.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L088d48.  v2:= "Certificate chain too long: " @kind object;
  #L088d4c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L088d52.  v1:= temp @kind object;
  #L088d54.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L088d5a.  v1:= temp @kind object;
  #L088d5c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L088d62.  v1:= temp @kind object;
  #L088d64.  call `<init>`(v0, v1) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L088d6a.  throw v0;
}
procedure `boolean` `equals`(`a.a.h.a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `La/a/h/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L088d7c.  v0:= 1I;
  #L088d7e.  if v4 != v3 then goto L088d84;
  #L088d82.  return v0;
  #L088d84.  v1:= instanceof @variable v4 @type ^`a.a.h.a` @kind boolean;
  #L088d88.  if v1 == 0 then goto L088da4;
  #L088d8c.  v4:= (`a.a.h.a`) v4 @kind object;
  #L088d90.  v1:= v4.`a.a.h.a.a` @type ^`a.a.h.e` @kind object;
  #L088d94.  v2:= v3.`a.a.h.a.a` @type ^`a.a.h.e` @kind object;
  #L088d98.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L088d9e.  v1:= temp;
  #L088da0.  if v1 != 0 then goto L088d82;
  #L088da4.  v0:= 0I;
  #L088da6.  goto L088d82;
}
procedure `int` `hashCode`(`a.a.h.a` v1 @kind this) @signature `La/a/h/a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L088db8.  v0:= v1.`a.a.h.a.a` @type ^`a.a.h.e` @kind object;
  #L088dbc.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L088dc2.  v0:= temp;
  #L088dc4.  return v0;
}
