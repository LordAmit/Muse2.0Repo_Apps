record `a.a.c.e` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.regex.Pattern` `@@a.a.c.e.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/a/c/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L07dbd0.  v0:= " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)" @kind object;
  #L07dbd4.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L07dbda.  v0:= temp @kind object;
  #L07dbdc.  `@@a.a.c.e.a` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L07dbe0.  return @kind void;
}
procedure `int` `a`(`java.lang.String` v2 @kind object, `int` v3 ) @signature `La/a/c/e;.a:(Ljava/lang/String;I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07dbf4.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L07dbfa.  v0:= temp;
  #L07dbfc.  if v3 >= v0 then goto L07dc18;
  #L07dc00.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L07dc06.  v0:= temp;
  #L07dc08.  v1:= 32I;
  #L07dc0c.  if v0 == v1 then goto L07dc1a;
  #L07dc10.  v1:= 9I;
  #L07dc14.  if v0 == v1 then goto L07dc1a;
  #L07dc18.  return v3;
  #L07dc1a.  v3:= v3 + 1;
  #L07dc1e.  goto L07dbf4;
}
procedure `int` `a`(`java.lang.String` v2 @kind object, `int` v3 , `java.lang.String` v4 @kind object) @signature `La/a/c/e;.a:(Ljava/lang/String;ILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07dc30.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L07dc36.  v0:= temp;
  #L07dc38.  if v3 >= v0 then goto L07dc52;
  #L07dc3c.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L07dc42.  v0:= temp;
  #L07dc44.  call temp:= `indexOf`(v4, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L07dc4a.  v0:= temp;
  #L07dc4c.  v1:= -1I;
  #L07dc4e.  if v0 == v1 then goto L07dc54;
  #L07dc52.  return v3;
  #L07dc54.  v3:= v3 + 1;
  #L07dc58.  goto L07dc30;
}
procedure `long` `a`(`a.q` v2 @kind object) @signature `La/a/c/e;.a:(La/q;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07dc6c.  v0:= "Content-Length" @kind object;
  #L07dc70.  call temp:= `a`(v2, v0) @signature `La/q;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L07dc76.  v0:= temp @kind object;
  #L07dc78.  call temp:= `a`(v0) @signature `La/a/c/e;.a:(Ljava/lang/String;)J` @kind static;
  #L07dc7e.  v0:= temp @kind wide;
  #L07dc80.  return v0 @kind wide;
}
procedure `long` `a`(`a.z` v2 @kind object) @signature `La/a/c/e;.a:(La/z;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07dc94.  call temp:= `e`(v2) @signature `La/z;.e:()La/q;` @kind virtual;
  #L07dc9a.  v0:= temp @kind object;
  #L07dc9c.  call temp:= `a`(v0) @signature `La/a/c/e;.a:(La/q;)J` @kind static;
  #L07dca2.  v0:= temp @kind wide;
  #L07dca4.  return v0 @kind wide;
}
procedure `long` `a`(`java.lang.String` v3 @kind object) @signature `La/a/c/e;.a:(Ljava/lang/String;)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L07dcb8.  v0:= -1L;
  #L07dcbc.  if v3 != 0 then goto L07dcc2;
  #L07dcc0.  return v0 @kind wide;
  #Try_start0.  
  #L07dcc2.  call temp:= `parseLong`(v3) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #Try_end0.  
  #L07dcc8.  v0:= temp @kind wide;
  #L07dcca.  goto L07dcc0;
  #L07dccc.  v2:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L07dcce.  goto L07dcc0;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L07dccc;
}
procedure `void` `a`(`a.m` v2 @kind object, `a.r` v3 @kind object, `a.q` v4 @kind object) @signature `La/a/c/e;.a:(La/m;La/r;La/q;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07dcf0.  v0:= `@@a.m.a` @type ^`a.m` @kind object;
  #L07dcf4.  if v2 != v0 then goto L07dcfa;
  #L07dcf8.  return @kind void;
  #L07dcfa.  call temp:= `a`(v3, v4) @signature `La/l;.a:(La/r;La/q;)Ljava/util/List;` @kind static;
  #L07dd00.  v0:= temp @kind object;
  #L07dd02.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L07dd08.  v1:= temp;
  #L07dd0a.  if v1 != 0 then goto L07dcf8;
  #L07dd0e.  call `a`(v2, v3, v0) @signature `La/m;.a:(La/r;Ljava/util/List;)V` @kind interface;
  #L07dd14.  goto L07dcf8;
}
procedure `int` `b`(`java.lang.String` v4 @kind object, `int` v5 ) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L07dd28.  call temp:= `parseLong`(v4) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #Try_end0.  
  #L07dd2e.  v0:= temp @kind wide;
  #L07dd30.  v2:= 2147483647L;
  #L07dd36.  v2:= lcmp(v0, v2);
  #L07dd3a.  if v2 <= 0 then goto L07dd46;
  #L07dd3e.  v5:= 2147483647I;
  #L07dd44.  return v5;
  #L07dd46.  v2:= 0L;
  #L07dd4a.  v2:= lcmp(v0, v2);
  #L07dd4e.  if v2 >= 0 then goto L07dd56;
  #L07dd52.  v5:= 0I;
  #L07dd54.  goto L07dd44;
  #L07dd56.  v5:= (`int`) v0 @kind l2i;
  #L07dd58.  goto L07dd44;
  #L07dd5a.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L07dd5c.  goto L07dd44;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L07dd5a;
}
procedure `boolean` `b`(`a.z` v6 @kind object) @signature `La/a/c/e;.b:(La/z;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07dd80.  v1:= 1I;
  #L07dd82.  v0:= 0I;
  #L07dd84.  call temp:= `a`(v6) @signature `La/z;.a:()La/x;` @kind virtual;
  #L07dd8a.  v2:= temp @kind object;
  #L07dd8c.  call temp:= `b`(v2) @signature `La/x;.b:()Ljava/lang/String;` @kind virtual;
  #L07dd92.  v2:= temp @kind object;
  #L07dd94.  v3:= "HEAD" @kind object;
  #L07dd98.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L07dd9e.  v2:= temp;
  #L07dda0.  if v2 == 0 then goto L07dda6;
  #L07dda4.  return v0;
  #L07dda6.  call temp:= `b`(v6) @signature `La/z;.b:()I` @kind virtual;
  #L07ddac.  v2:= temp;
  #L07ddae.  v3:= 100I;
  #L07ddb2.  if v2 < v3 then goto L07ddbe;
  #L07ddb6.  v3:= 200I;
  #L07ddba.  if v2 < v3 then goto L07ddd2;
  #L07ddbe.  v3:= 204I;
  #L07ddc2.  if v2 == v3 then goto L07ddd2;
  #L07ddc6.  v3:= 304I;
  #L07ddca.  if v2 == v3 then goto L07ddd2;
  #L07ddce.  v0:= v1;
  #L07ddd0.  goto L07dda4;
  #L07ddd2.  call temp:= `a`(v6) @signature `La/a/c/e;.a:(La/z;)J` @kind static;
  #L07ddd8.  v2:= temp @kind wide;
  #L07ddda.  v4:= -1L;
  #L07ddde.  v2:= lcmp(v2, v4);
  #L07dde2.  if v2 != 0 then goto L07de02;
  #L07dde6.  v2:= "chunked" @kind object;
  #L07ddea.  v3:= "Transfer-Encoding" @kind object;
  #L07ddee.  call temp:= `a`(v6, v3) @signature `La/z;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L07ddf4.  v3:= temp @kind object;
  #L07ddf6.  call temp:= `equalsIgnoreCase`(v2, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L07ddfc.  v2:= temp;
  #L07ddfe.  if v2 == 0 then goto L07dda4;
  #L07de02.  v0:= v1;
  #L07de04.  goto L07dda4;
}
