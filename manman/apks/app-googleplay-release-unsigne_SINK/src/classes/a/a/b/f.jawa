record `a.a.b.f` @kind class @AccessFlag PUBLIC_FINAL {
  `a.a` `a.a.b.f.a` @AccessFlag PRIVATE_FINAL;
  `a.a.b.d` `a.a.b.f.b` @AccessFlag PRIVATE_FINAL;
  `java.net.Proxy` `a.a.b.f.c` @AccessFlag PRIVATE;
  `java.net.InetSocketAddress` `a.a.b.f.d` @AccessFlag PRIVATE;
  `java.util.List` `a.a.b.f.e` @AccessFlag PRIVATE;
  `int` `a.a.b.f.f` @AccessFlag PRIVATE;
  `java.util.List` `a.a.b.f.g` @AccessFlag PRIVATE;
  `int` `a.a.b.f.h` @AccessFlag PRIVATE;
  `java.util.List` `a.a.b.f.i` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.b.f` v2 @kind this, `a.a` v3 @kind object, `a.a.b.d` v4 @kind object) @signature `La/a/b/f;.<init>:(La/a;La/a/b/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07c55c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07c562.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L07c568.  v0:= temp @kind object;
  #L07c56a.  v2.`a.a.b.f.e` @type ^`java.util.List` := v0 @kind object;
  #L07c56e.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L07c574.  v0:= temp @kind object;
  #L07c576.  v2.`a.a.b.f.g` @type ^`java.util.List` := v0 @kind object;
  #L07c57a.  v0:= new `java.util.ArrayList`;
  #L07c57e.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L07c584.  v2.`a.a.b.f.i` @type ^`java.util.List` := v0 @kind object;
  #L07c588.  v2.`a.a.b.f.a` @type ^`a.a` := v3 @kind object;
  #L07c58c.  v2.`a.a.b.f.b` @type ^`a.a.b.d` := v4 @kind object;
  #L07c590.  call temp:= `a`(v3) @signature `La/a;.a:()La/r;` @kind virtual;
  #L07c596.  v0:= temp @kind object;
  #L07c598.  call temp:= `h`(v3) @signature `La/a;.h:()Ljava/net/Proxy;` @kind virtual;
  #L07c59e.  v1:= temp @kind object;
  #L07c5a0.  call `a`(v2, v0, v1) @signature `La/a/b/f;.a:(La/r;Ljava/net/Proxy;)V` @kind direct;
  #L07c5a6.  return @kind void;
}
procedure `java.lang.String` `a`(`java.net.InetSocketAddress` v1 @kind object) @signature `La/a/b/f;.a:(Ljava/net/InetSocketAddress;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;

  #L07c5b8.  call temp:= `getAddress`(v1) @signature `Ljava/net/InetSocketAddress;.getAddress:()Ljava/net/InetAddress;` @kind virtual;
  #L07c5be.  v0:= temp @kind object;
  #L07c5c0.  if v0 != 0 then goto L07c5ce;
  #L07c5c4.  call temp:= `getHostName`(v1) @signature `Ljava/net/InetSocketAddress;.getHostName:()Ljava/lang/String;` @kind virtual;
  #L07c5ca.  v0:= temp @kind object;
  #L07c5cc.  return v0 @kind object;
  #L07c5ce.  call temp:= `getHostAddress`(v0) @signature `Ljava/net/InetAddress;.getHostAddress:()Ljava/lang/String;` @kind virtual;
  #L07c5d4.  v0:= temp @kind object;
  #L07c5d6.  goto L07c5cc;
}
procedure `void` `a`(`a.a.b.f` v3 @kind this, `a.r` v4 @kind object, `java.net.Proxy` v5 @kind object) @signature `La/a/b/f;.a:(La/r;Ljava/net/Proxy;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07c5e8.  v2:= 0I;
  #L07c5ea.  if v5 == 0 then goto L07c600;
  #L07c5ee.  call temp:= `singletonList`(v5) @signature `Ljava/util/Collections;.singletonList:(Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L07c5f4.  v0:= temp @kind object;
  #L07c5f6.  v3.`a.a.b.f.e` @type ^`java.util.List` := v0 @kind object;
  #L07c5fa.  v3.`a.a.b.f.f` @type ^`int` := v2;
  #L07c5fe.  return @kind void;
  #L07c600.  v0:= v3.`a.a.b.f.a` @type ^`a.a` @kind object;
  #L07c604.  call temp:= `g`(v0) @signature `La/a;.g:()Ljava/net/ProxySelector;` @kind virtual;
  #L07c60a.  v0:= temp @kind object;
  #L07c60c.  call temp:= `a`(v4) @signature `La/r;.a:()Ljava/net/URI;` @kind virtual;
  #L07c612.  v1:= temp @kind object;
  #L07c614.  call temp:= `select`(v0, v1) @signature `Ljava/net/ProxySelector;.select:(Ljava/net/URI;)Ljava/util/List;` @kind virtual;
  #L07c61a.  v0:= temp @kind object;
  #L07c61c.  if v0 == 0 then goto L07c63a;
  #L07c620.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L07c626.  v1:= temp;
  #L07c628.  if v1 != 0 then goto L07c63a;
  #L07c62c.  call temp:= `a`(v0) @signature `La/a/c;.a:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L07c632.  v0:= temp @kind object;
  #L07c634.  v3.`a.a.b.f.e` @type ^`java.util.List` := v0 @kind object;
  #L07c638.  goto L07c5fa;
  #L07c63a.  v0:= 1I;
  #L07c63c.  v0:= new `java.net.Proxy`[v0];
  #L07c640.  v1:= `@@java.net.Proxy.NO_PROXY` @type ^`java.net.Proxy` @kind object;
  #L07c644.  v0[v2]:= v1 @kind object;
  #L07c648.  call temp:= `a`(v0) @signature `La/a/c;.a:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L07c64e.  v0:= temp @kind object;
  #L07c650.  goto L07c634;
}
procedure `void` `a`(`a.a.b.f` v8 @kind this, `java.net.Proxy` v9 @kind object) @signature `La/a/b/f;.a:(Ljava/net/Proxy;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L07c664.  v2:= 0I;
  #L07c666.  v0:= new `java.util.ArrayList`;
  #L07c66a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L07c670.  v8.`a.a.b.f.g` @type ^`java.util.List` := v0 @kind object;
  #L07c674.  call temp:= `type`(v9) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L07c67a.  v0:= temp @kind object;
  #L07c67c.  v1:= `@@java.net.Proxy$Type.DIRECT` @type ^`java.net.Proxy$Type` @kind object;
  #L07c680.  if v0 == v1 then goto L07c694;
  #L07c684.  call temp:= `type`(v9) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L07c68a.  v0:= temp @kind object;
  #L07c68c.  v1:= `@@java.net.Proxy$Type.SOCKS` @type ^`java.net.Proxy$Type` @kind object;
  #L07c690.  if v0 != v1 then goto L07c722;
  #L07c694.  v0:= v8.`a.a.b.f.a` @type ^`a.a` @kind object;
  #L07c698.  call temp:= `a`(v0) @signature `La/a;.a:()La/r;` @kind virtual;
  #L07c69e.  v0:= temp @kind object;
  #L07c6a0.  call temp:= `f`(v0) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L07c6a6.  v1:= temp @kind object;
  #L07c6a8.  v0:= v8.`a.a.b.f.a` @type ^`a.a` @kind object;
  #L07c6ac.  call temp:= `a`(v0) @signature `La/a;.a:()La/r;` @kind virtual;
  #L07c6b2.  v0:= temp @kind object;
  #L07c6b4.  call temp:= `g`(v0) @signature `La/r;.g:()I` @kind virtual;
  #L07c6ba.  v0:= temp;
  #L07c6bc.  v3:= v0;
  #L07c6be.  v0:= v1 @kind object;
  #L07c6c0.  v1:= 1I;
  #L07c6c2.  if v3 < v1 then goto L07c6d0;
  #L07c6c6.  v1:= 65535I;
  #L07c6cc.  if v3 <= v1 then goto L07c786;
  #L07c6d0.  v1:= new `java.net.SocketException`;
  #L07c6d4.  v2:= new `java.lang.StringBuilder`;
  #L07c6d8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07c6de.  v4:= "No route to " @kind object;
  #L07c6e2.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c6e8.  v2:= temp @kind object;
  #L07c6ea.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c6f0.  v0:= temp @kind object;
  #L07c6f2.  v2:= ":" @kind object;
  #L07c6f6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c6fc.  v0:= temp @kind object;
  #L07c6fe.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c704.  v0:= temp @kind object;
  #L07c706.  v2:= "; port is out of range" @kind object;
  #L07c70a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c710.  v0:= temp @kind object;
  #L07c712.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07c718.  v0:= temp @kind object;
  #L07c71a.  call `<init>`(v1, v0) @signature `Ljava/net/SocketException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07c720.  throw v1;
  #L07c722.  call temp:= `address`(v9) @signature `Ljava/net/Proxy;.address:()Ljava/net/SocketAddress;` @kind virtual;
  #L07c728.  v0:= temp @kind object;
  #L07c72a.  v1:= instanceof @variable v0 @type ^`java.net.InetSocketAddress` @kind boolean;
  #L07c72e.  if v1 != 0 then goto L07c76c;
  #L07c732.  v1:= new `java.lang.IllegalArgumentException`;
  #L07c736.  v2:= new `java.lang.StringBuilder`;
  #L07c73a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07c740.  v3:= "Proxy.address() is not an InetSocketAddress: " @kind object;
  #L07c744.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c74a.  v2:= temp @kind object;
  #L07c74c.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L07c752.  v0:= temp @kind object;
  #L07c754.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c75a.  v0:= temp @kind object;
  #L07c75c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07c762.  v0:= temp @kind object;
  #L07c764.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07c76a.  throw v1;
  #L07c76c.  v0:= (`java.net.InetSocketAddress`) v0 @kind object;
  #L07c770.  call temp:= `a`(v0) @signature `La/a/b/f;.a:(Ljava/net/InetSocketAddress;)Ljava/lang/String;` @kind static;
  #L07c776.  v1:= temp @kind object;
  #L07c778.  call temp:= `getPort`(v0) @signature `Ljava/net/InetSocketAddress;.getPort:()I` @kind virtual;
  #L07c77e.  v0:= temp;
  #L07c780.  v3:= v0;
  #L07c782.  v0:= v1 @kind object;
  #L07c784.  goto L07c6c0;
  #L07c786.  call temp:= `type`(v9) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L07c78c.  v1:= temp @kind object;
  #L07c78e.  v4:= `@@java.net.Proxy$Type.SOCKS` @type ^`java.net.Proxy$Type` @kind object;
  #L07c792.  if v1 != v4 then goto L07c7ae;
  #L07c796.  v1:= v8.`a.a.b.f.g` @type ^`java.util.List` @kind object;
  #L07c79a.  call temp:= `createUnresolved`(v0, v3) @signature `Ljava/net/InetSocketAddress;.createUnresolved:(Ljava/lang/String;I)Ljava/net/InetSocketAddress;` @kind static;
  #L07c7a0.  v0:= temp @kind object;
  #L07c7a2.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07c7a8.  v8.`a.a.b.f.h` @type ^`int` := v2;
  #L07c7ac.  return @kind void;
  #L07c7ae.  v1:= v8.`a.a.b.f.a` @type ^`a.a` @kind object;
  #L07c7b2.  call temp:= `b`(v1) @signature `La/a;.b:()La/o;` @kind virtual;
  #L07c7b8.  v1:= temp @kind object;
  #L07c7ba.  call temp:= `a`(v1, v0) @signature `La/o;.a:(Ljava/lang/String;)Ljava/util/List;` @kind interface;
  #L07c7c0.  v4:= temp @kind object;
  #L07c7c2.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07c7c8.  v5:= temp;
  #L07c7ca.  v1:= v2;
  #L07c7cc.  if v1 >= v5 then goto L07c7a8;
  #L07c7d0.  call temp:= `get`(v4, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07c7d6.  v0:= temp @kind object;
  #L07c7d8.  v0:= (`java.net.InetAddress`) v0 @kind object;
  #L07c7dc.  v6:= v8.`a.a.b.f.g` @type ^`java.util.List` @kind object;
  #L07c7e0.  v7:= new `java.net.InetSocketAddress`;
  #L07c7e4.  call `<init>`(v7, v0, v3) @signature `Ljava/net/InetSocketAddress;.<init>:(Ljava/net/InetAddress;I)V` @kind direct;
  #L07c7ea.  call temp:= `add`(v6, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07c7f0.  v0:= v1 + 1;
  #L07c7f4.  v1:= v0;
  #L07c7f6.  goto L07c7cc;
}
procedure `boolean` `c`(`a.a.b.f` v2 @kind this) @signature `La/a/b/f;.c:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07c808.  v0:= v2.`a.a.b.f.f` @type ^`int`;
  #L07c80c.  v1:= v2.`a.a.b.f.e` @type ^`java.util.List` @kind object;
  #L07c810.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07c816.  v1:= temp;
  #L07c818.  if v0 >= v1 then goto L07c820;
  #L07c81c.  v0:= 1I;
  #L07c81e.  return v0;
  #L07c820.  v0:= 0I;
  #L07c822.  goto L07c81e;
}
procedure `java.net.Proxy` `d`(`a.a.b.f` v3 @kind this) @signature `La/a/b/f;.d:()Ljava/net/Proxy;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07c834.  call temp:= `c`(v3) @signature `La/a/b/f;.c:()Z` @kind direct;
  #L07c83a.  v0:= temp;
  #L07c83c.  if v0 != 0 then goto L07c89e;
  #L07c840.  v0:= new `java.net.SocketException`;
  #L07c844.  v1:= new `java.lang.StringBuilder`;
  #L07c848.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07c84e.  v2:= "No route to " @kind object;
  #L07c852.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c858.  v1:= temp @kind object;
  #L07c85a.  v2:= v3.`a.a.b.f.a` @type ^`a.a` @kind object;
  #L07c85e.  call temp:= `a`(v2) @signature `La/a;.a:()La/r;` @kind virtual;
  #L07c864.  v2:= temp @kind object;
  #L07c866.  call temp:= `f`(v2) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L07c86c.  v2:= temp @kind object;
  #L07c86e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c874.  v1:= temp @kind object;
  #L07c876.  v2:= "; exhausted proxy configurations: " @kind object;
  #L07c87a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c880.  v1:= temp @kind object;
  #L07c882.  v2:= v3.`a.a.b.f.e` @type ^`java.util.List` @kind object;
  #L07c886.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c88c.  v1:= temp @kind object;
  #L07c88e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07c894.  v1:= temp @kind object;
  #L07c896.  call `<init>`(v0, v1) @signature `Ljava/net/SocketException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07c89c.  throw v0;
  #L07c89e.  v0:= v3.`a.a.b.f.e` @type ^`java.util.List` @kind object;
  #L07c8a2.  v1:= v3.`a.a.b.f.f` @type ^`int`;
  #L07c8a6.  v2:= v1 + 1;
  #L07c8aa.  v3.`a.a.b.f.f` @type ^`int` := v2;
  #L07c8ae.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07c8b4.  v0:= temp @kind object;
  #L07c8b6.  v0:= (`java.net.Proxy`) v0 @kind object;
  #L07c8ba.  call `a`(v3, v0) @signature `La/a/b/f;.a:(Ljava/net/Proxy;)V` @kind direct;
  #L07c8c0.  return v0 @kind object;
}
procedure `boolean` `e`(`a.a.b.f` v2 @kind this) @signature `La/a/b/f;.e:()Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07c8d4.  v0:= v2.`a.a.b.f.h` @type ^`int`;
  #L07c8d8.  v1:= v2.`a.a.b.f.g` @type ^`java.util.List` @kind object;
  #L07c8dc.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07c8e2.  v1:= temp;
  #L07c8e4.  if v0 >= v1 then goto L07c8ec;
  #L07c8e8.  v0:= 1I;
  #L07c8ea.  return v0;
  #L07c8ec.  v0:= 0I;
  #L07c8ee.  goto L07c8ea;
}
procedure `java.net.InetSocketAddress` `f`(`a.a.b.f` v3 @kind this) @signature `La/a/b/f;.f:()Ljava/net/InetSocketAddress;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07c900.  call temp:= `e`(v3) @signature `La/a/b/f;.e:()Z` @kind direct;
  #L07c906.  v0:= temp;
  #L07c908.  if v0 != 0 then goto L07c96a;
  #L07c90c.  v0:= new `java.net.SocketException`;
  #L07c910.  v1:= new `java.lang.StringBuilder`;
  #L07c914.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07c91a.  v2:= "No route to " @kind object;
  #L07c91e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c924.  v1:= temp @kind object;
  #L07c926.  v2:= v3.`a.a.b.f.a` @type ^`a.a` @kind object;
  #L07c92a.  call temp:= `a`(v2) @signature `La/a;.a:()La/r;` @kind virtual;
  #L07c930.  v2:= temp @kind object;
  #L07c932.  call temp:= `f`(v2) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L07c938.  v2:= temp @kind object;
  #L07c93a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c940.  v1:= temp @kind object;
  #L07c942.  v2:= "; exhausted inet socket addresses: " @kind object;
  #L07c946.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c94c.  v1:= temp @kind object;
  #L07c94e.  v2:= v3.`a.a.b.f.g` @type ^`java.util.List` @kind object;
  #L07c952.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c958.  v1:= temp @kind object;
  #L07c95a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07c960.  v1:= temp @kind object;
  #L07c962.  call `<init>`(v0, v1) @signature `Ljava/net/SocketException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07c968.  throw v0;
  #L07c96a.  v0:= v3.`a.a.b.f.g` @type ^`java.util.List` @kind object;
  #L07c96e.  v1:= v3.`a.a.b.f.h` @type ^`int`;
  #L07c972.  v2:= v1 + 1;
  #L07c976.  v3.`a.a.b.f.h` @type ^`int` := v2;
  #L07c97a.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07c980.  v0:= temp @kind object;
  #L07c982.  v0:= (`java.net.InetSocketAddress`) v0 @kind object;
  #L07c986.  return v0 @kind object;
}
procedure `boolean` `g`(`a.a.b.f` v1 @kind this) @signature `La/a/b/f;.g:()Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L07c998.  v0:= v1.`a.a.b.f.i` @type ^`java.util.List` @kind object;
  #L07c99c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L07c9a2.  v0:= temp;
  #L07c9a4.  if v0 != 0 then goto L07c9ac;
  #L07c9a8.  v0:= 1I;
  #L07c9aa.  return v0;
  #L07c9ac.  v0:= 0I;
  #L07c9ae.  goto L07c9aa;
}
procedure `a.ab` `h`(`a.a.b.f` v2 @kind this) @signature `La/a/b/f;.h:()La/ab;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07c9c0.  v0:= v2.`a.a.b.f.i` @type ^`java.util.List` @kind object;
  #L07c9c4.  v1:= 0I;
  #L07c9c6.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L07c9cc.  v0:= temp @kind object;
  #L07c9ce.  v0:= (`a.ab`) v0 @kind object;
  #L07c9d2.  return v0 @kind object;
}
procedure `void` `a`(`a.a.b.f` v3 @kind this, `a.ab` v4 @kind object, `java.io.IOException` v5 @kind object) @signature `La/a/b/f;.a:(La/ab;Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07c9e4.  call temp:= `b`(v4) @signature `La/ab;.b:()Ljava/net/Proxy;` @kind virtual;
  #L07c9ea.  v0:= temp @kind object;
  #L07c9ec.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L07c9f2.  v0:= temp @kind object;
  #L07c9f4.  v1:= `@@java.net.Proxy$Type.DIRECT` @type ^`java.net.Proxy$Type` @kind object;
  #L07c9f8.  if v0 == v1 then goto L07ca42;
  #L07c9fc.  v0:= v3.`a.a.b.f.a` @type ^`a.a` @kind object;
  #L07ca00.  call temp:= `g`(v0) @signature `La/a;.g:()Ljava/net/ProxySelector;` @kind virtual;
  #L07ca06.  v0:= temp @kind object;
  #L07ca08.  if v0 == 0 then goto L07ca42;
  #L07ca0c.  v0:= v3.`a.a.b.f.a` @type ^`a.a` @kind object;
  #L07ca10.  call temp:= `g`(v0) @signature `La/a;.g:()Ljava/net/ProxySelector;` @kind virtual;
  #L07ca16.  v0:= temp @kind object;
  #L07ca18.  v1:= v3.`a.a.b.f.a` @type ^`a.a` @kind object;
  #L07ca1c.  call temp:= `a`(v1) @signature `La/a;.a:()La/r;` @kind virtual;
  #L07ca22.  v1:= temp @kind object;
  #L07ca24.  call temp:= `a`(v1) @signature `La/r;.a:()Ljava/net/URI;` @kind virtual;
  #L07ca2a.  v1:= temp @kind object;
  #L07ca2c.  call temp:= `b`(v4) @signature `La/ab;.b:()Ljava/net/Proxy;` @kind virtual;
  #L07ca32.  v2:= temp @kind object;
  #L07ca34.  call temp:= `address`(v2) @signature `Ljava/net/Proxy;.address:()Ljava/net/SocketAddress;` @kind virtual;
  #L07ca3a.  v2:= temp @kind object;
  #L07ca3c.  call `connectFailed`(v0, v1, v2, v5) @signature `Ljava/net/ProxySelector;.connectFailed:(Ljava/net/URI;Ljava/net/SocketAddress;Ljava/io/IOException;)V` @kind virtual;
  #L07ca42.  v0:= v3.`a.a.b.f.b` @type ^`a.a.b.d` @kind object;
  #L07ca46.  call `a`(v0, v4) @signature `La/a/b/d;.a:(La/ab;)V` @kind virtual;
  #L07ca4c.  return @kind void;
}
procedure `boolean` `a`(`a.a.b.f` v1 @kind this) @signature `La/a/b/f;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07ca60.  call temp:= `e`(v1) @signature `La/a/b/f;.e:()Z` @kind direct;
  #L07ca66.  v0:= temp;
  #L07ca68.  if v0 != 0 then goto L07ca84;
  #L07ca6c.  call temp:= `c`(v1) @signature `La/a/b/f;.c:()Z` @kind direct;
  #L07ca72.  v0:= temp;
  #L07ca74.  if v0 != 0 then goto L07ca84;
  #L07ca78.  call temp:= `g`(v1) @signature `La/a/b/f;.g:()Z` @kind direct;
  #L07ca7e.  v0:= temp;
  #L07ca80.  if v0 == 0 then goto L07ca88;
  #L07ca84.  v0:= 1I;
  #L07ca86.  return v0;
  #L07ca88.  v0:= 0I;
  #L07ca8a.  goto L07ca86;
}
procedure `a.ab` `b`(`a.a.b.f` v4 @kind this) @signature `La/a/b/f;.b:()La/ab;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07ca9c.  call temp:= `e`(v4) @signature `La/a/b/f;.e:()Z` @kind direct;
  #L07caa2.  v0:= temp;
  #L07caa4.  if v0 != 0 then goto L07cae2;
  #L07caa8.  call temp:= `c`(v4) @signature `La/a/b/f;.c:()Z` @kind direct;
  #L07caae.  v0:= temp;
  #L07cab0.  if v0 != 0 then goto L07cad6;
  #L07cab4.  call temp:= `g`(v4) @signature `La/a/b/f;.g:()Z` @kind direct;
  #L07caba.  v0:= temp;
  #L07cabc.  if v0 != 0 then goto L07cacc;
  #L07cac0.  v0:= new `java.util.NoSuchElementException`;
  #L07cac4.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L07caca.  throw v0;
  #L07cacc.  call temp:= `h`(v4) @signature `La/a/b/f;.h:()La/ab;` @kind direct;
  #L07cad2.  v0:= temp @kind object;
  #L07cad4.  return v0 @kind object;
  #L07cad6.  call temp:= `d`(v4) @signature `La/a/b/f;.d:()Ljava/net/Proxy;` @kind direct;
  #L07cadc.  v0:= temp @kind object;
  #L07cade.  v4.`a.a.b.f.c` @type ^`java.net.Proxy` := v0 @kind object;
  #L07cae2.  call temp:= `f`(v4) @signature `La/a/b/f;.f:()Ljava/net/InetSocketAddress;` @kind direct;
  #L07cae8.  v0:= temp @kind object;
  #L07caea.  v4.`a.a.b.f.d` @type ^`java.net.InetSocketAddress` := v0 @kind object;
  #L07caee.  v0:= new `a.ab`;
  #L07caf2.  v1:= v4.`a.a.b.f.a` @type ^`a.a` @kind object;
  #L07caf6.  v2:= v4.`a.a.b.f.c` @type ^`java.net.Proxy` @kind object;
  #L07cafa.  v3:= v4.`a.a.b.f.d` @type ^`java.net.InetSocketAddress` @kind object;
  #L07cafe.  call `<init>`(v0, v1, v2, v3) @signature `La/ab;.<init>:(La/a;Ljava/net/Proxy;Ljava/net/InetSocketAddress;)V` @kind direct;
  #L07cb04.  v1:= v4.`a.a.b.f.b` @type ^`a.a.b.d` @kind object;
  #L07cb08.  call temp:= `c`(v1, v0) @signature `La/a/b/d;.c:(La/ab;)Z` @kind virtual;
  #L07cb0e.  v1:= temp;
  #L07cb10.  if v1 == 0 then goto L07cad4;
  #L07cb14.  v1:= v4.`a.a.b.f.i` @type ^`java.util.List` @kind object;
  #L07cb18.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07cb1e.  call temp:= `b`(v4) @signature `La/a/b/f;.b:()La/ab;` @kind virtual;
  #L07cb24.  v0:= temp @kind object;
  #L07cb26.  goto L07cad4;
}
