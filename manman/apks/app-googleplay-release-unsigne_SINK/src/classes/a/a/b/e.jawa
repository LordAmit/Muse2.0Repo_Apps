record `a.a.b.e` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `java.io.IOException` `a.a.b.e.b` @AccessFlag PRIVATE;
}
global `java.lang.reflect.Method` `@@a.a.b.e.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/a/b/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #Try_start0.  
  #L07c474.  v0:= constclass @type ^`java.lang.Throwable` @kind object;
  #L07c478.  v1:= "addSuppressed" @kind object;
  #L07c47c.  v2:= 1I;
  #L07c47e.  v2:= new `java.lang.Class`[v2];
  #L07c482.  v3:= 0I;
  #L07c484.  v4:= constclass @type ^`java.lang.Throwable` @kind object;
  #L07c488.  v2[v3]:= v4 @kind object;
  #L07c48c.  call temp:= `getDeclaredMethod`(v0, v1, v2) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #Try_end0.  
  #L07c492.  v0:= temp @kind object;
  #L07c494.  `@@a.a.b.e.a` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L07c498.  return @kind void;
  #L07c49a.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L07c49c.  v0:= 0I;
  #L07c49e.  goto L07c494;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L07c49a;
}
procedure `void` `<init>`(`a.a.b.e` v0 @kind this, `java.io.IOException` v1 @kind object) @signature `La/a/b/e;.<init>:(Ljava/io/IOException;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L07c4c0.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L07c4c6.  v0.`a.a.b.e.b` @type ^`java.io.IOException` := v1 @kind object;
  #L07c4ca.  return @kind void;
}
procedure `void` `a`(`a.a.b.e` v3 @kind this, `java.io.IOException` v4 @kind object, `java.io.IOException` v5 @kind object) @signature `La/a/b/e;.a:(Ljava/io/IOException;Ljava/io/IOException;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07c4dc.  v0:= `@@a.a.b.e.a` @type ^`java.lang.reflect.Method` @kind object;
  #L07c4e0.  if v0 == 0 then goto L07c4fa;
  #Try_start0.  
  #L07c4e4.  v0:= `@@a.a.b.e.a` @type ^`java.lang.reflect.Method` @kind object;
  #L07c4e8.  v1:= 1I;
  #L07c4ea.  v1:= new `java.lang.Object`[v1];
  #L07c4ee.  v2:= 0I;
  #L07c4f0.  v1[v2]:= v5 @kind object;
  #L07c4f4.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L07c4fa.  return @kind void;
  #L07c4fc.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L07c4fe.  goto L07c4fa;
  #L07c500.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L07c502.  goto L07c4fa;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L07c500;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L07c4fc;
}
procedure `java.io.IOException` `a`(`a.a.b.e` v1 @kind this) @signature `La/a/b/e;.a:()Ljava/io/IOException;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07c524.  v0:= v1.`a.a.b.e.b` @type ^`java.io.IOException` @kind object;
  #L07c528.  return v0 @kind object;
}
procedure `void` `a`(`a.a.b.e` v1 @kind this, `java.io.IOException` v2 @kind object) @signature `La/a/b/e;.a:(Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07c53c.  v0:= v1.`a.a.b.e.b` @type ^`java.io.IOException` @kind object;
  #L07c540.  call `a`(v1, v2, v0) @signature `La/a/b/e;.a:(Ljava/io/IOException;Ljava/io/IOException;)V` @kind direct;
  #L07c546.  v1.`a.a.b.e.b` @type ^`java.io.IOException` := v2 @kind object;
  #L07c54a.  return @kind void;
}
