record `a.a.b.g` @kind class @AccessFlag PUBLIC_FINAL {
  `a.a` `a.a.b.g.a` @AccessFlag PUBLIC_FINAL;
  `a.ab` `a.a.b.g.c` @AccessFlag PRIVATE;
  `a.j` `a.a.b.g.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `a.a.b.g.e` @AccessFlag PRIVATE_FINAL;
  `a.a.b.f` `a.a.b.g.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.b.g.g` @AccessFlag PRIVATE;
  `a.a.b.c` `a.a.b.g.h` @AccessFlag PRIVATE;
  `boolean` `a.a.b.g.i` @AccessFlag PRIVATE;
  `boolean` `a.a.b.g.j` @AccessFlag PRIVATE;
  `a.a.c.c` `a.a.b.g.k` @AccessFlag PRIVATE;
}
global `boolean` `@@a.a.b.g.b` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/b/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L07cb54.  v0:= constclass @type ^`a.a.b.g` @kind object;
  #L07cb58.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L07cb5e.  v0:= temp;
  #L07cb60.  if v0 != 0 then goto L07cb6c;
  #L07cb64.  v0:= 1I;
  #L07cb66.  `@@a.a.b.g.b` @type ^`boolean` := v0 @kind boolean;
  #L07cb6a.  return @kind void;
  #L07cb6c.  v0:= 0I;
  #L07cb6e.  goto L07cb66;
}
procedure `void` `<init>`(`a.a.b.g` v2 @kind this, `a.j` v3 @kind object, `a.a` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `La/a/b/g;.<init>:(La/j;La/a;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07cb80.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07cb86.  v2.`a.a.b.g.d` @type ^`a.j` := v3 @kind object;
  #L07cb8a.  v2.`a.a.b.g.a` @type ^`a.a` := v4 @kind object;
  #L07cb8e.  v0:= new `a.a.b.f`;
  #L07cb92.  call temp:= `f`(v2) @signature `La/a/b/g;.f:()La/a/b/d;` @kind direct;
  #L07cb98.  v1:= temp @kind object;
  #L07cb9a.  call `<init>`(v0, v4, v1) @signature `La/a/b/f;.<init>:(La/a;La/a/b/d;)V` @kind direct;
  #L07cba0.  v2.`a.a.b.g.f` @type ^`a.a.b.f` := v0 @kind object;
  #L07cba4.  v2.`a.a.b.g.e` @type ^`java.lang.Object` := v5 @kind object;
  #L07cba8.  return @kind void;
}
procedure `a.a.b.c` `a`(`a.a.b.g` v6 @kind this, `int` v7 , `int` v8 , `int` v9 , `boolean` v10 ) @signature `La/a/b/g;.a:(IIIZ)La/a/b/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07cbbc.  v1:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07cbc0.  @monitorenter v1
  #Try_start0.  
  #L07cbc2.  v0:= v6.`a.a.b.g.i` @type ^`boolean` @kind boolean;
  #L07cbc6.  if v0 == 0 then goto L07cbe0;
  #L07cbca.  v0:= new `java.lang.IllegalStateException`;
  #L07cbce.  v2:= "released" @kind object;
  #L07cbd2.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07cbd8.  throw v0;
  #L07cbda.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07cbdc.  @monitorexit v1
  #Try_end0.  
  #L07cbde.  throw v0;
  #Try_start1.  
  #L07cbe0.  v0:= v6.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L07cbe4.  if v0 == 0 then goto L07cbf8;
  #L07cbe8.  v0:= new `java.lang.IllegalStateException`;
  #L07cbec.  v2:= "codec != null" @kind object;
  #L07cbf0.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07cbf6.  throw v0;
  #L07cbf8.  v0:= v6.`a.a.b.g.j` @type ^`boolean` @kind boolean;
  #L07cbfc.  if v0 == 0 then goto L07cc10;
  #L07cc00.  v0:= new `java.io.IOException`;
  #L07cc04.  v2:= "Canceled" @kind object;
  #L07cc08.  call `<init>`(v0, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07cc0e.  throw v0;
  #L07cc10.  v0:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07cc14.  if v0 == 0 then goto L07cc24;
  #L07cc18.  v2:= v0.`a.a.b.c.a` @type ^`boolean` @kind boolean;
  #L07cc1c.  if v2 != 0 then goto L07cc24;
  #L07cc20.  @monitorexit v1
  #L07cc22.  return v0 @kind object;
  #L07cc24.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L07cc28.  v2:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07cc2c.  v3:= v6.`a.a.b.g.a` @type ^`a.a` @kind object;
  #L07cc30.  call temp:= `a`(v0, v2, v3, v6) @signature `La/a/a;.a:(La/j;La/a;La/a/b/g;)La/a/b/c;` @kind virtual;
  #L07cc36.  v0:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07cc3a.  if v0 == 0 then goto L07cc46;
  #L07cc3e.  v0:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07cc42.  @monitorexit v1
  #L07cc44.  goto L07cc22;
  #L07cc46.  v0:= v6.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L07cc4a.  @monitorexit v1
  #Try_end1.  
  #L07cc4c.  if v0 != 0 then goto L07cc5c;
  #L07cc50.  v0:= v6.`a.a.b.g.f` @type ^`a.a.b.f` @kind object;
  #L07cc54.  call temp:= `b`(v0) @signature `La/a/b/f;.b:()La/ab;` @kind virtual;
  #L07cc5a.  v0:= temp @kind object;
  #L07cc5c.  v2:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07cc60.  @monitorenter v2
  #Try_start2.  
  #L07cc62.  v6.`a.a.b.g.c` @type ^`a.ab` := v0 @kind object;
  #L07cc66.  v1:= 0I;
  #L07cc68.  v6.`a.a.b.g.g` @type ^`int` := v1;
  #L07cc6c.  v1:= new `a.a.b.c`;
  #L07cc70.  v3:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07cc74.  call `<init>`(v1, v3, v0) @signature `La/a/b/c;.<init>:(La/j;La/ab;)V` @kind direct;
  #L07cc7a.  call `a`(v6, v1) @signature `La/a/b/g;.a:(La/a/b/c;)V` @kind virtual;
  #L07cc80.  v0:= v6.`a.a.b.g.j` @type ^`boolean` @kind boolean;
  #L07cc84.  if v0 == 0 then goto L07cc9e;
  #L07cc88.  v0:= new `java.io.IOException`;
  #L07cc8c.  v1:= "Canceled" @kind object;
  #L07cc90.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07cc96.  throw v0;
  #L07cc98.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07cc9a.  @monitorexit v2
  #Try_end2.  
  #L07cc9c.  throw v0;
  #Try_start3.  
  #L07cc9e.  @monitorexit v2
  #Try_end3.  
  #L07cca0.  call `a`(v1, v7, v8, v9, v10) @signature `La/a/b/c;.a:(IIIZ)V` @kind virtual;
  #L07cca6.  call temp:= `f`(v6) @signature `La/a/b/g;.f:()La/a/b/d;` @kind direct;
  #L07ccac.  v0:= temp @kind object;
  #L07ccae.  call temp:= `a`(v1) @signature `La/a/b/c;.a:()La/ab;` @kind virtual;
  #L07ccb4.  v2:= temp @kind object;
  #L07ccb6.  call `b`(v0, v2) @signature `La/a/b/d;.b:(La/ab;)V` @kind virtual;
  #L07ccbc.  v0:= 0I;
  #L07ccbe.  v2:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07ccc2.  @monitorenter v2
  #Try_start4.  
  #L07ccc4.  v3:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L07ccc8.  v4:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07cccc.  call `b`(v3, v4, v1) @signature `La/a/a;.b:(La/j;La/a/b/c;)V` @kind virtual;
  #L07ccd2.  call temp:= `d`(v1) @signature `La/a/b/c;.d:()Z` @kind virtual;
  #L07ccd8.  v3:= temp;
  #L07ccda.  if v3 == 0 then goto L07cd0c;
  #L07ccde.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L07cce2.  v1:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07cce6.  v3:= v6.`a.a.b.g.a` @type ^`a.a` @kind object;
  #L07ccea.  call temp:= `b`(v0, v1, v3, v6) @signature `La/a/a;.b:(La/j;La/a;La/a/b/g;)Ljava/net/Socket;` @kind virtual;
  #L07ccf0.  v0:= temp @kind object;
  #L07ccf2.  v1:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07ccf6.  v5:= v0 @kind object;
  #L07ccf8.  v0:= v1 @kind object;
  #L07ccfa.  v1:= v5 @kind object;
  #L07ccfc.  @monitorexit v2
  #Try_end4.  
  #L07ccfe.  call `a`(v1) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L07cd04.  goto L07cc22;
  #L07cd06.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start5.  
  #L07cd08.  @monitorexit v2
  #Try_end5.  
  #L07cd0a.  throw v0;
  #L07cd0c.  v5:= v0 @kind object;
  #L07cd0e.  v0:= v1 @kind object;
  #L07cd10.  v1:= v5 @kind object;
  #L07cd12.  goto L07ccfc;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07cbda;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07cbda;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L07cc98;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L07cc98;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L07cd06;
  catch `java.lang.Throwable` @[Try_start5..Try_end5] goto L07cd06;
}
procedure `a.a.b.c` `a`(`a.a.b.g` v3 @kind this, `int` v4 , `int` v5 , `int` v6 , `boolean` v7 , `boolean` v8 ) @signature `La/a/b/g;.a:(IIIZZ)La/a/b/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07cd5c.  call temp:= `a`(v3, v4, v5, v6, v7) @signature `La/a/b/g;.a:(IIIZ)La/a/b/c;` @kind direct;
  #L07cd62.  v0:= temp @kind object;
  #L07cd64.  v1:= v3.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07cd68.  @monitorenter v1
  #Try_start0.  
  #L07cd6a.  v2:= v0.`a.a.b.c.b` @type ^`int`;
  #L07cd6e.  if v2 != 0 then goto L07cd76;
  #L07cd72.  @monitorexit v1
  #L07cd74.  return v0 @kind object;
  #L07cd76.  @monitorexit v1
  #Try_end0.  
  #L07cd78.  call temp:= `a`(v0, v8) @signature `La/a/b/c;.a:(Z)Z` @kind virtual;
  #L07cd7e.  v1:= temp;
  #L07cd80.  if v1 != 0 then goto L07cd74;
  #L07cd84.  call `d`(v3) @signature `La/a/b/g;.d:()V` @kind virtual;
  #L07cd8a.  goto L07cd5c;
  #L07cd8c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L07cd8e.  @monitorexit v1
  #Try_end1.  
  #L07cd90.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07cd8c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07cd8c;
}
procedure `java.net.Socket` `a`(`a.a.b.g` v4 @kind this, `boolean` v5 , `boolean` v6 , `boolean` v7 ) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07cdb8.  v2:= 1I;
  #L07cdba.  v1:= 0I;
  #L07cdbc.  v0:= `@@a.a.b.g.b` @type ^`boolean` @kind boolean;
  #L07cdc0.  if v0 != 0 then goto L07cde0;
  #L07cdc4.  v0:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07cdc8.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07cdce.  v0:= temp;
  #L07cdd0.  if v0 != 0 then goto L07cde0;
  #L07cdd4.  v0:= new `java.lang.AssertionError`;
  #L07cdd8.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07cdde.  throw v0;
  #L07cde0.  if v7 == 0 then goto L07cde8;
  #L07cde4.  v4.`a.a.b.g.k` @type ^`a.a.c.c` := v1 @kind object;
  #L07cde8.  if v6 == 0 then goto L07cdf0;
  #L07cdec.  v4.`a.a.b.g.i` @type ^`boolean` := v2 @kind boolean;
  #L07cdf0.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07cdf4.  if v0 == 0 then goto L07ce78;
  #L07cdf8.  if v5 == 0 then goto L07ce04;
  #L07cdfc.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07ce00.  v0.`a.a.b.c.a` @type ^`boolean` := v2 @kind boolean;
  #L07ce04.  v0:= v4.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L07ce08.  if v0 != 0 then goto L07ce78;
  #L07ce0c.  v0:= v4.`a.a.b.g.i` @type ^`boolean` @kind boolean;
  #L07ce10.  if v0 != 0 then goto L07ce20;
  #L07ce14.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07ce18.  v0:= v0.`a.a.b.c.a` @type ^`boolean` @kind boolean;
  #L07ce1c.  if v0 == 0 then goto L07ce78;
  #L07ce20.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07ce24.  call `c`(v4, v0) @signature `La/a/b/g;.c:(La/a/b/c;)V` @kind direct;
  #L07ce2a.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07ce2e.  v0:= v0.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L07ce32.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L07ce38.  v0:= temp;
  #L07ce3a.  if v0 == 0 then goto L07ce7a;
  #L07ce3e.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07ce42.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L07ce48.  v2:= temp @kind wide;
  #L07ce4a.  v0.`a.a.b.c.e` @type ^`long` := v2 @kind wide;
  #L07ce4e.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L07ce52.  v2:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07ce56.  v3:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07ce5a.  call temp:= `a`(v0, v2, v3) @signature `La/a/a;.a:(La/j;La/a/b/c;)Z` @kind virtual;
  #L07ce60.  v0:= temp;
  #L07ce62.  if v0 == 0 then goto L07ce7a;
  #L07ce66.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07ce6a.  call temp:= `b`(v0) @signature `La/a/b/c;.b:()Ljava/net/Socket;` @kind virtual;
  #L07ce70.  v0:= temp @kind object;
  #L07ce72.  v4.`a.a.b.g.h` @type ^`a.a.b.c` := v1 @kind object;
  #L07ce76.  v1:= v0 @kind object;
  #L07ce78.  return v1 @kind object;
  #L07ce7a.  v0:= v1 @kind object;
  #L07ce7c.  goto L07ce72;
}
procedure `void` `c`(`a.a.b.g` v3 @kind this, `a.a.b.c` v4 @kind object) @signature `La/a/b/g;.c:(La/a/b/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07ce90.  v0:= 0I;
  #L07ce92.  v1:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L07ce96.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07ce9c.  v2:= temp;
  #L07ce9e.  v1:= v0;
  #L07cea0.  if v1 >= v2 then goto L07ced4;
  #L07cea4.  v0:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L07cea8.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07ceae.  v0:= temp @kind object;
  #L07ceb0.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L07ceb4.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L07ceba.  v0:= temp @kind object;
  #L07cebc.  if v0 != v3 then goto L07cecc;
  #L07cec0.  v0:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L07cec4.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L07ceca.  return @kind void;
  #L07cecc.  v0:= v1 + 1;
  #L07ced0.  v1:= v0;
  #L07ced2.  goto L07cea0;
  #L07ced4.  v0:= new `java.lang.IllegalStateException`;
  #L07ced8.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L07cede.  throw v0;
}
procedure `a.a.b.d` `f`(`a.a.b.g` v2 @kind this) @signature `La/a/b/g;.f:()La/a/b/d;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07cef0.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L07cef4.  v1:= v2.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07cef8.  call temp:= `a`(v0, v1) @signature `La/a/a;.a:(La/j;)La/a/b/d;` @kind virtual;
  #L07cefe.  v0:= temp @kind object;
  #L07cf00.  return v0 @kind object;
}
procedure `a.a.c.c` `a`(`a.a.b.g` v2 @kind this) @signature `La/a/b/g;.a:()La/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07cf14.  v1:= v2.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07cf18.  @monitorenter v1
  #Try_start0.  
  #L07cf1a.  v0:= v2.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L07cf1e.  @monitorexit v1
  #L07cf20.  return v0 @kind object;
  #L07cf22.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07cf24.  @monitorexit v1
  #Try_end0.  
  #L07cf26.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07cf22;
}
procedure `a.a.c.c` `a`(`a.a.b.g` v6 @kind this, `a.u` v7 @kind object, `boolean` v8 ) @signature `La/a/b/g;.a:(La/u;Z)La/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07cf44.  call temp:= `a`(v7) @signature `La/u;.a:()I` @kind virtual;
  #L07cf4a.  v1:= temp;
  #L07cf4c.  call temp:= `b`(v7) @signature `La/u;.b:()I` @kind virtual;
  #L07cf52.  v2:= temp;
  #L07cf54.  call temp:= `c`(v7) @signature `La/u;.c:()I` @kind virtual;
  #L07cf5a.  v3:= temp;
  #L07cf5c.  call temp:= `r`(v7) @signature `La/u;.r:()Z` @kind virtual;
  #L07cf62.  v4:= temp;
  #L07cf64.  v0:= v6 @kind object;
  #L07cf66.  v5:= v8;
  #Try_start0.  
  #L07cf68.  call temp:= `a`(v0, v1, v2, v3, v4, v5) @signature `La/a/b/g;.a:(IIIZZ)La/a/b/c;` @kind direct;
  #L07cf6e.  v0:= temp @kind object;
  #L07cf70.  call temp:= `a`(v0, v7, v6) @signature `La/a/b/c;.a:(La/u;La/a/b/g;)La/a/c/c;` @kind virtual;
  #L07cf76.  v0:= temp @kind object;
  #L07cf78.  v1:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07cf7c.  @monitorenter v1
  #Try_end0.  
  #Try_start1.  
  #L07cf7e.  v6.`a.a.b.g.k` @type ^`a.a.c.c` := v0 @kind object;
  #L07cf82.  @monitorexit v1
  #L07cf84.  return v0 @kind object;
  #L07cf86.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07cf88.  @monitorexit v1
  #Try_end1.  
  #Try_start2.  
  #L07cf8a.  throw v0;
  #Try_end2.  
  #L07cf8c.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L07cf8e.  v1:= new `a.a.b.e`;
  #L07cf92.  call `<init>`(v1, v0) @signature `La/a/b/e;.<init>:(Ljava/io/IOException;)V` @kind direct;
  #L07cf98.  throw v1;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L07cf8c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07cf86;
  catch `java.io.IOException` @[Try_start2..Try_end2] goto L07cf8c;
}
procedure `void` `a`(`a.a.b.g` v3 @kind this, `a.a.b.c` v4 @kind object) @signature `La/a/b/g;.a:(La/a/b/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07cfcc.  v0:= `@@a.a.b.g.b` @type ^`boolean` @kind boolean;
  #L07cfd0.  if v0 != 0 then goto L07cff0;
  #L07cfd4.  v0:= v3.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07cfd8.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07cfde.  v0:= temp;
  #L07cfe0.  if v0 != 0 then goto L07cff0;
  #L07cfe4.  v0:= new `java.lang.AssertionError`;
  #L07cfe8.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07cfee.  throw v0;
  #L07cff0.  v0:= v3.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07cff4.  if v0 == 0 then goto L07d004;
  #L07cff8.  v0:= new `java.lang.IllegalStateException`;
  #L07cffc.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L07d002.  throw v0;
  #L07d004.  v3.`a.a.b.g.h` @type ^`a.a.b.c` := v4 @kind object;
  #L07d008.  v0:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L07d00c.  v1:= new `a.a.b.g$a`;
  #L07d010.  v2:= v3.`a.a.b.g.e` @type ^`java.lang.Object` @kind object;
  #L07d014.  call `<init>`(v1, v3, v2) @signature `La/a/b/g$a;.<init>:(La/a/b/g;Ljava/lang/Object;)V` @kind direct;
  #L07d01a.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07d020.  return @kind void;
}
procedure `void` `a`(`a.a.b.g` v5 @kind this, `java.io.IOException` v6 @kind object) @signature `La/a/b/g;.a:(Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L07d034.  v0:= 0I;
  #L07d036.  v1:= 1I;
  #L07d038.  v2:= v5.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07d03c.  @monitorenter v2
  #Try_start0.  
  #L07d03e.  v3:= instanceof @variable v6 @type ^`a.a.e.o` @kind boolean;
  #L07d042.  if v3 == 0 then goto L07d094;
  #L07d046.  v6:= (`a.a.e.o`) v6 @kind object;
  #L07d04a.  v3:= v6.`a.a.e.o.a` @type ^`a.a.e.b` @kind object;
  #L07d04e.  v4:= `@@a.a.e.b.e` @type ^`a.a.e.b` @kind object;
  #L07d052.  if v3 != v4 then goto L07d062;
  #L07d056.  v3:= v5.`a.a.b.g.g` @type ^`int`;
  #L07d05a.  v3:= v3 + 1;
  #L07d05e.  v5.`a.a.b.g.g` @type ^`int` := v3;
  #L07d062.  v3:= v6.`a.a.e.o.a` @type ^`a.a.e.b` @kind object;
  #L07d066.  v4:= `@@a.a.e.b.e` @type ^`a.a.e.b` @kind object;
  #L07d06a.  if v3 != v4 then goto L07d076;
  #L07d06e.  v3:= v5.`a.a.b.g.g` @type ^`int`;
  #L07d072.  if v3 <= v1 then goto L07d07e;
  #L07d076.  v0:= 0I;
  #L07d078.  v5.`a.a.b.g.c` @type ^`a.ab` := v0 @kind object;
  #L07d07c.  v0:= v1;
  #L07d07e.  v1:= 0I;
  #L07d080.  v3:= 1I;
  #L07d082.  call temp:= `a`(v5, v0, v1, v3) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L07d088.  v0:= temp @kind object;
  #L07d08a.  @monitorexit v2
  #Try_end0.  
  #L07d08c.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L07d092.  return @kind void;
  #Try_start1.  
  #L07d094.  v3:= v5.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07d098.  if v3 == 0 then goto L07d07e;
  #L07d09c.  v3:= v5.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07d0a0.  call temp:= `d`(v3) @signature `La/a/b/c;.d:()Z` @kind virtual;
  #L07d0a6.  v3:= temp;
  #L07d0a8.  if v3 == 0 then goto L07d0b4;
  #L07d0ac.  v3:= instanceof @variable v6 @type ^`a.a.e.a` @kind boolean;
  #L07d0b0.  if v3 == 0 then goto L07d07e;
  #L07d0b4.  v0:= v5.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07d0b8.  v0:= v0.`a.a.b.c.b` @type ^`int`;
  #L07d0bc.  if v0 != 0 then goto L07d07c;
  #L07d0c0.  v0:= v5.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L07d0c4.  if v0 == 0 then goto L07d0da;
  #L07d0c8.  if v6 == 0 then goto L07d0da;
  #L07d0cc.  v0:= v5.`a.a.b.g.f` @type ^`a.a.b.f` @kind object;
  #L07d0d0.  v3:= v5.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L07d0d4.  call `a`(v0, v3, v6) @signature `La/a/b/f;.a:(La/ab;Ljava/io/IOException;)V` @kind virtual;
  #L07d0da.  v0:= 0I;
  #L07d0dc.  v5.`a.a.b.g.c` @type ^`a.ab` := v0 @kind object;
  #L07d0e0.  goto L07d07c;
  #L07d0e2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07d0e4.  @monitorexit v2
  #Try_end1.  
  #L07d0e6.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07d0e2;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07d0e2;
}
procedure `void` `a`(`a.a.b.g` v4 @kind this, `boolean` v5 , `a.a.c.c` v6 @kind object) @signature `La/a/b/g;.a:(ZLa/a/c/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07d10c.  v1:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07d110.  @monitorenter v1
  #L07d112.  if v6 == 0 then goto L07d11e;
  #Try_start0.  
  #L07d116.  v0:= v4.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L07d11a.  if v6 == v0 then goto L07d16e;
  #L07d11e.  v0:= new `java.lang.IllegalStateException`;
  #L07d122.  v2:= new `java.lang.StringBuilder`;
  #L07d126.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07d12c.  v3:= "expected " @kind object;
  #L07d130.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07d136.  v2:= temp @kind object;
  #L07d138.  v3:= v4.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L07d13c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07d142.  v2:= temp @kind object;
  #L07d144.  v3:= " but was " @kind object;
  #L07d148.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07d14e.  v2:= temp @kind object;
  #L07d150.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07d156.  v2:= temp @kind object;
  #L07d158.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07d15e.  v2:= temp @kind object;
  #L07d160.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07d166.  throw v0;
  #L07d168.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07d16a.  @monitorexit v1
  #Try_end0.  
  #L07d16c.  throw v0;
  #L07d16e.  if v5 != 0 then goto L07d182;
  #Try_start1.  
  #L07d172.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07d176.  v2:= v0.`a.a.b.c.b` @type ^`int`;
  #L07d17a.  v2:= v2 + 1;
  #L07d17e.  v0.`a.a.b.c.b` @type ^`int` := v2;
  #L07d182.  v0:= 0I;
  #L07d184.  v2:= 1I;
  #L07d186.  call temp:= `a`(v4, v5, v0, v2) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L07d18c.  v0:= temp @kind object;
  #L07d18e.  @monitorexit v1
  #Try_end1.  
  #L07d190.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L07d196.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07d168;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07d168;
}
procedure `a.a.b.c` `b`(`a.a.b.g` v1 @kind this) @signature `La/a/b/g;.b:()La/a/b/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07d1bc.  @monitorenter v1
  #Try_start0.  
  #L07d1be.  v0:= v1.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #Try_end0.  
  #L07d1c2.  @monitorexit v1
  #L07d1c4.  return v0 @kind object;
  #L07d1c6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07d1c8.  @monitorexit v1
  #L07d1ca.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07d1c6;
}
procedure `java.net.Socket` `b`(`a.a.b.g` v3 @kind this, `a.a.b.c` v4 @kind object) @signature `La/a/b/g;.b:(La/a/b/c;)Ljava/net/Socket;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07d1e8.  v2:= 1I;
  #L07d1ea.  v1:= 0I;
  #L07d1ec.  v0:= `@@a.a.b.g.b` @type ^`boolean` @kind boolean;
  #L07d1f0.  if v0 != 0 then goto L07d210;
  #L07d1f4.  v0:= v3.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07d1f8.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07d1fe.  v0:= temp;
  #L07d200.  if v0 != 0 then goto L07d210;
  #L07d204.  v0:= new `java.lang.AssertionError`;
  #L07d208.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07d20e.  throw v0;
  #L07d210.  v0:= v3.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L07d214.  if v0 != 0 then goto L07d22c;
  #L07d218.  v0:= v3.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07d21c.  v0:= v0.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L07d220.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07d226.  v0:= temp;
  #L07d228.  if v0 == v2 then goto L07d238;
  #L07d22c.  v0:= new `java.lang.IllegalStateException`;
  #L07d230.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L07d236.  throw v0;
  #L07d238.  v0:= v3.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07d23c.  v0:= v0.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L07d240.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07d246.  v0:= temp @kind object;
  #L07d248.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L07d24c.  call temp:= `a`(v3, v2, v1, v1) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L07d252.  v1:= temp @kind object;
  #L07d254.  v3.`a.a.b.g.h` @type ^`a.a.b.c` := v4 @kind object;
  #L07d258.  v2:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L07d25c.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07d262.  return v1 @kind object;
}
procedure `void` `c`(`a.a.b.g` v4 @kind this) @signature `La/a/b/g;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07d274.  v1:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07d278.  @monitorenter v1
  #L07d27a.  v0:= 0I;
  #L07d27c.  v2:= 1I;
  #L07d27e.  v3:= 0I;
  #Try_start0.  
  #L07d280.  call temp:= `a`(v4, v0, v2, v3) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L07d286.  v0:= temp @kind object;
  #L07d288.  @monitorexit v1
  #Try_end0.  
  #L07d28a.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L07d290.  return @kind void;
  #L07d292.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L07d294.  @monitorexit v1
  #Try_end1.  
  #L07d296.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07d292;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07d292;
}
procedure `void` `d`(`a.a.b.g` v4 @kind this) @signature `La/a/b/g;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07d2bc.  v1:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07d2c0.  @monitorenter v1
  #L07d2c2.  v0:= 1I;
  #L07d2c4.  v2:= 0I;
  #L07d2c6.  v3:= 0I;
  #Try_start0.  
  #L07d2c8.  call temp:= `a`(v4, v0, v2, v3) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L07d2ce.  v0:= temp @kind object;
  #L07d2d0.  @monitorexit v1
  #Try_end0.  
  #L07d2d2.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L07d2d8.  return @kind void;
  #L07d2da.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L07d2dc.  @monitorexit v1
  #Try_end1.  
  #L07d2de.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07d2da;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07d2da;
}
procedure `boolean` `e`(`a.a.b.g` v1 @kind this) @signature `La/a/b/g;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07d304.  v0:= v1.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L07d308.  if v0 != 0 then goto L07d31c;
  #L07d30c.  v0:= v1.`a.a.b.g.f` @type ^`a.a.b.f` @kind object;
  #L07d310.  call temp:= `a`(v0) @signature `La/a/b/f;.a:()Z` @kind virtual;
  #L07d316.  v0:= temp;
  #L07d318.  if v0 == 0 then goto L07d320;
  #L07d31c.  v0:= 1I;
  #L07d31e.  return v0;
  #L07d320.  v0:= 0I;
  #L07d322.  goto L07d31e;
}
procedure `java.lang.String` `toString`(`a.a.b.g` v1 @kind this) @signature `La/a/b/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07d334.  call temp:= `b`(v1) @signature `La/a/b/g;.b:()La/a/b/c;` @kind virtual;
  #L07d33a.  v0:= temp @kind object;
  #L07d33c.  if v0 == 0 then goto L07d34a;
  #L07d340.  call temp:= `toString`(v0) @signature `La/a/b/c;.toString:()Ljava/lang/String;` @kind virtual;
  #L07d346.  v0:= temp @kind object;
  #L07d348.  return v0 @kind object;
  #L07d34a.  v0:= v1.`a.a.b.g.a` @type ^`a.a` @kind object;
  #L07d34e.  call temp:= `toString`(v0) @signature `La/a;.toString:()Ljava/lang/String;` @kind virtual;
  #L07d354.  v0:= temp @kind object;
  #L07d356.  goto L07d348;
}
