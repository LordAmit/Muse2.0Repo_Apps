record `a.a.g.a$a` @kind class @AccessFlag FINAL extends `a.a.h.b` @kind class {
  `java.lang.Object` `a.a.g.a$a.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.g.a$a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.g.a$a` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `La/a/g/a$a;.<init>:(Ljava/lang/Object;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L0879a4.  call `<init>`(v0) @signature `La/a/h/b;.<init>:()V` @kind direct;
  #L0879aa.  v0.`a.a.g.a$a.a` @type ^`java.lang.Object` := v1 @kind object;
  #L0879ae.  v0.`a.a.g.a$a.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L0879b2.  return @kind void;
}
procedure `java.util.List` `a`(`a.a.g.a$a` v5 @kind this, `java.util.List` v6 @kind object, `java.lang.String` v7 @kind object) @signature `La/a/g/a$a;.a:(Ljava/util/List;Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #Try_start0.  
  #L0879c4.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L0879ca.  v0:= temp;
  #L0879cc.  v0:= new `java.security.cert.X509Certificate`[v0];
  #L0879d0.  call temp:= `toArray`(v6, v0) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L0879d6.  v0:= temp @kind object;
  #L0879d8.  v0:= (`java.security.cert.X509Certificate`[]) v0 @kind object;
  #L0879dc.  v1:= v5.`a.a.g.a$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L0879e0.  v2:= v5.`a.a.g.a$a.a` @type ^`java.lang.Object` @kind object;
  #L0879e4.  v3:= 3I;
  #L0879e6.  v3:= new `java.lang.Object`[v3];
  #L0879ea.  v4:= 0I;
  #L0879ec.  v3[v4]:= v0 @kind object;
  #L0879f0.  v0:= 1I;
  #L0879f2.  v4:= "RSA" @kind object;
  #L0879f6.  v3[v0]:= v4 @kind object;
  #L0879fa.  v0:= 2I;
  #L0879fc.  v3[v0]:= v7 @kind object;
  #L087a00.  call temp:= `invoke`(v1, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L087a06.  v0:= temp @kind object;
  #L087a08.  v0:= (`java.util.List`) v0 @kind object;
  #Try_end0.  
  #L087a0c.  return v0 @kind object;
  #L087a0e.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L087a10.  v1:= new `javax.net.ssl.SSLPeerUnverifiedException`;
  #L087a14.  call temp:= `getMessage`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L087a1a.  v2:= temp @kind object;
  #L087a1c.  call `<init>`(v1, v2) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L087a22.  call temp:= `initCause`(v1, v0) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L087a28.  throw v1;
  #L087a2a.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L087a2c.  v1:= new `java.lang.AssertionError`;
  #L087a30.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L087a36.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L087a0e;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L087a2a;
}
procedure `boolean` `equals`(`a.a.g.a$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `La/a/g/a$a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L087a58.  v0:= instanceof @variable v2 @type ^`a.a.g.a$a` @kind boolean;
  #L087a5c.  return v0;
}
procedure `int` `hashCode`(`a.a.g.a$a` v1 @kind this) @signature `La/a/g/a$a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L087a70.  v0:= 0I;
  #L087a72.  return v0;
}
