record `a.a.g.c` @kind class @AccessFlag  extends `a.a.g.e` @kind class {
  `java.lang.reflect.Method` `a.a.g.c.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.g.c.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.g.c.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `a.a.g.c.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `a.a.g.c.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.g.c` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `La/a/g/c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L088634.  call `<init>`(v0) @signature `La/a/g/e;.<init>:()V` @kind direct;
  #L08863a.  v0.`a.a.g.c.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L08863e.  v0.`a.a.g.c.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L088642.  v0.`a.a.g.c.c` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L088646.  v0.`a.a.g.c.d` @type ^`java.lang.Class` := v4 @kind object;
  #L08864a.  v0.`a.a.g.c.e` @type ^`java.lang.Class` := v5 @kind object;
  #L08864e.  return @kind void;
}
procedure `a.a.g.e` `a`() @signature `La/a/g/c;.a:()La/a/g/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #Try_start0.  
  #L088660.  v0:= "org.eclipse.jetty.alpn.ALPN" @kind object;
  #L088664.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L08866a.  v3:= temp @kind object;
  #L08866c.  v1:= new `java.lang.StringBuilder`;
  #L088670.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L088676.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08867c.  v1:= temp @kind object;
  #L08867e.  v2:= "$Provider" @kind object;
  #L088682.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L088688.  v1:= temp @kind object;
  #L08868a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L088690.  v1:= temp @kind object;
  #L088692.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L088698.  v1:= temp @kind object;
  #L08869a.  v2:= new `java.lang.StringBuilder`;
  #L08869e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0886a4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0886aa.  v2:= temp @kind object;
  #L0886ac.  v4:= "$ClientProvider" @kind object;
  #L0886b0.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0886b6.  v2:= temp @kind object;
  #L0886b8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0886be.  v2:= temp @kind object;
  #L0886c0.  call temp:= `forName`(v2) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L0886c6.  v4:= temp @kind object;
  #L0886c8.  v2:= new `java.lang.StringBuilder`;
  #L0886cc.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0886d2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0886d8.  v0:= temp @kind object;
  #L0886da.  v2:= "$ServerProvider" @kind object;
  #L0886de.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0886e4.  v0:= temp @kind object;
  #L0886e6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0886ec.  v0:= temp @kind object;
  #L0886ee.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L0886f4.  v5:= temp @kind object;
  #L0886f6.  v0:= "put" @kind object;
  #L0886fa.  v2:= 2I;
  #L0886fc.  v2:= new `java.lang.Class`[v2];
  #L088700.  v6:= 0I;
  #L088702.  v7:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L088706.  v2[v6]:= v7 @kind object;
  #L08870a.  v6:= 1I;
  #L08870c.  v2[v6]:= v1 @kind object;
  #L088710.  call temp:= `getMethod`(v3, v0, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L088716.  v1:= temp @kind object;
  #L088718.  v0:= "get" @kind object;
  #L08871c.  v2:= 1I;
  #L08871e.  v2:= new `java.lang.Class`[v2];
  #L088722.  v6:= 0I;
  #L088724.  v7:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L088728.  v2[v6]:= v7 @kind object;
  #L08872c.  call temp:= `getMethod`(v3, v0, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L088732.  v2:= temp @kind object;
  #L088734.  v0:= "remove" @kind object;
  #L088738.  v6:= 1I;
  #L08873a.  v6:= new `java.lang.Class`[v6];
  #L08873e.  v7:= 0I;
  #L088740.  v8:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L088744.  v6[v7]:= v8 @kind object;
  #L088748.  call temp:= `getMethod`(v3, v0, v6) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L08874e.  v3:= temp @kind object;
  #L088750.  v0:= new `a.a.g.c`;
  #L088754.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `La/a/g/c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Class;)V` @kind direct;
  #Try_end0.  
  #L08875a.  return v0 @kind object;
  #L08875c.  v0:= Exception @type ^`java.lang.ClassNotFoundException` @kind object;
  #L08875e.  v0:= 0I;
  #L088760.  goto L08875a;
  #L088762.  v0:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L088764.  goto L08875e;
  catch `java.lang.ClassNotFoundException` @[Try_start0..Try_end0] goto L08875c;
  catch `java.lang.NoSuchMethodException` @[Try_start0..Try_end0] goto L088762;
}
procedure `java.lang.String` `a`(`a.a.g.c` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object) @signature `La/a/g/c;.a:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L08878c.  v1:= 0I;
  #Try_start0.  
  #L08878e.  v0:= v5.`a.a.g.c.b` @type ^`java.lang.reflect.Method` @kind object;
  #L088792.  v2:= 0I;
  #L088794.  v3:= 1I;
  #L088796.  v3:= new `java.lang.Object`[v3];
  #L08879a.  v4:= 0I;
  #L08879c.  v3[v4]:= v6 @kind object;
  #L0887a0.  call temp:= `invoke`(v0, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L0887a6.  v0:= temp @kind object;
  #L0887a8.  call temp:= `getInvocationHandler`(v0) @signature `Ljava/lang/reflect/Proxy;.getInvocationHandler:(Ljava/lang/Object;)Ljava/lang/reflect/InvocationHandler;` @kind static;
  #L0887ae.  v0:= temp @kind object;
  #L0887b0.  v0:= (`a.a.g.c$a`) v0 @kind object;
  #L0887b4.  v2:= v0.`a.a.g.c$a.a` @type ^`boolean` @kind boolean;
  #L0887b8.  if v2 != 0 then goto L0887dc;
  #L0887bc.  v2:= v0.`a.a.g.c$a.b` @type ^`java.lang.String` @kind object;
  #L0887c0.  if v2 != 0 then goto L0887dc;
  #L0887c4.  call temp:= `b`() @signature `La/a/g/e;.b:()La/a/g/e;` @kind static;
  #L0887ca.  v0:= temp @kind object;
  #L0887cc.  v2:= 4I;
  #L0887ce.  v3:= "ALPN callback dropped: HTTP/2 is disabled. Is alpn-boot on the boot class path?" @kind object;
  #L0887d2.  v4:= 0I;
  #L0887d4.  call `a`(v0, v2, v3, v4) @signature `La/a/g/e;.a:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L0887da.  return v1 @kind object;
  #L0887dc.  v2:= v0.`a.a.g.c$a.a` @type ^`boolean` @kind boolean;
  #L0887e0.  if v2 == 0 then goto L0887ea;
  #L0887e4.  v0:= v1 @kind object;
  #L0887e6.  v1:= v0 @kind object;
  #L0887e8.  goto L0887da;
  #L0887ea.  v0:= v0.`a.a.g.c$a.b` @type ^`java.lang.String` @kind object;
  #Try_end0.  
  #L0887ee.  goto L0887e6;
  #L0887f0.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L0887f2.  v0:= new `java.lang.AssertionError`;
  #L0887f6.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0887fc.  throw v0;
  #L0887fe.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L088800.  goto L0887f2;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L0887fe;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L0887f0;
}
procedure `void` `a`(`a.a.g.c` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object, `java.lang.String` v7 @kind object, `java.util.List` v8 @kind object) @signature `La/a/g/c;.a:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L088824.  call temp:= `a`(v8) @signature `La/a/g/c;.a:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L08882a.  v0:= temp @kind object;
  #Try_start0.  
  #L08882c.  v1:= constclass @type ^`a.a.g.e` @kind object;
  #L088830.  call temp:= `getClassLoader`(v1) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L088836.  v1:= temp @kind object;
  #L088838.  v2:= 2I;
  #L08883a.  v2:= new `java.lang.Class`[v2];
  #L08883e.  v3:= 0I;
  #L088840.  v4:= v5.`a.a.g.c.d` @type ^`java.lang.Class` @kind object;
  #L088844.  v2[v3]:= v4 @kind object;
  #L088848.  v3:= 1I;
  #L08884a.  v4:= v5.`a.a.g.c.e` @type ^`java.lang.Class` @kind object;
  #L08884e.  v2[v3]:= v4 @kind object;
  #L088852.  v3:= new `a.a.g.c$a`;
  #L088856.  call `<init>`(v3, v0) @signature `La/a/g/c$a;.<init>:(Ljava/util/List;)V` @kind direct;
  #L08885c.  call temp:= `newProxyInstance`(v1, v2, v3) @signature `Ljava/lang/reflect/Proxy;.newProxyInstance:(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;` @kind static;
  #L088862.  v0:= temp @kind object;
  #L088864.  v1:= v5.`a.a.g.c.a` @type ^`java.lang.reflect.Method` @kind object;
  #L088868.  v2:= 0I;
  #L08886a.  v3:= 2I;
  #L08886c.  v3:= new `java.lang.Object`[v3];
  #L088870.  v4:= 0I;
  #L088872.  v3[v4]:= v6 @kind object;
  #L088876.  v4:= 1I;
  #L088878.  v3[v4]:= v0 @kind object;
  #L08887c.  call temp:= `invoke`(v1, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L088882.  return @kind void;
  #L088884.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L088886.  v1:= new `java.lang.AssertionError`;
  #L08888a.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L088890.  throw v1;
  #L088892.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L088894.  goto L088886;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L088892;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L088884;
}
procedure `void` `b`(`a.a.g.c` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `La/a/g/c;.b:(Ljavax/net/ssl/SSLSocket;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L0888b8.  v0:= v4.`a.a.g.c.c` @type ^`java.lang.reflect.Method` @kind object;
  #L0888bc.  v1:= 0I;
  #L0888be.  v2:= 1I;
  #L0888c0.  v2:= new `java.lang.Object`[v2];
  #L0888c4.  v3:= 0I;
  #L0888c6.  v2[v3]:= v5 @kind object;
  #L0888ca.  call temp:= `invoke`(v0, v1, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L0888d0.  return @kind void;
  #L0888d2.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L0888d4.  v0:= new `java.lang.AssertionError`;
  #L0888d8.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0888de.  throw v0;
  #L0888e0.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L0888e2.  goto L0888d4;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L0888d2;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L0888e0;
}
