record `a.a.g.d` @kind class @AccessFlag  {
  `java.lang.Class` `a.a.g.d.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.a.g.d.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `a.a.g.d.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.g.d` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `La/a/g/d;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L088904.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08890a.  v0.`a.a.g.d.a` @type ^`java.lang.Class` := v1 @kind object;
  #L08890e.  v0.`a.a.g.d.b` @type ^`java.lang.String` := v2 @kind object;
  #L088912.  v0.`a.a.g.d.c` @type ^`java.lang.Class`[] := v3 @kind object;
  #L088916.  return @kind void;
}
procedure `java.lang.reflect.Method` `a`(`a.a.g.d` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L088928.  v0:= 0I;
  #L08892a.  v1:= v4.`a.a.g.d.b` @type ^`java.lang.String` @kind object;
  #L08892e.  if v1 == 0 then goto L088966;
  #L088932.  v1:= v4.`a.a.g.d.b` @type ^`java.lang.String` @kind object;
  #L088936.  v2:= v4.`a.a.g.d.c` @type ^`java.lang.Class`[] @kind object;
  #L08893a.  call temp:= `a`(v5, v1, v2) @signature `La/a/g/d;.a:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L088940.  v1:= temp @kind object;
  #L088942.  if v1 == 0 then goto L088968;
  #L088946.  v2:= v4.`a.a.g.d.a` @type ^`java.lang.Class` @kind object;
  #L08894a.  if v2 == 0 then goto L088968;
  #L08894e.  v2:= v4.`a.a.g.d.a` @type ^`java.lang.Class` @kind object;
  #L088952.  call temp:= `getReturnType`(v1) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L088958.  v3:= temp @kind object;
  #L08895a.  call temp:= `isAssignableFrom`(v2, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L088960.  v2:= temp;
  #L088962.  if v2 != 0 then goto L088968;
  #L088966.  return v0 @kind object;
  #L088968.  v0:= v1 @kind object;
  #L08896a.  goto L088966;
}
procedure `java.lang.reflect.Method` `a`(`java.lang.Class` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.Class`[] v5 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L08897c.  v0:= 0I;
  #Try_start0.  
  #L08897e.  call temp:= `getMethod`(v3, v4, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #Try_end0.  
  #L088984.  v1:= temp @kind object;
  #Try_start1.  
  #L088986.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #Try_end1.  
  #L08898c.  v2:= temp;
  #L08898e.  v2:= v2 ^& 1;
  #L088992.  if v2 != 0 then goto L0889a2;
  #L088996.  return v0 @kind object;
  #L088998.  v1:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L08899a.  goto L088996;
  #L08899c.  v0:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L08899e.  v0:= v1 @kind object;
  #L0889a0.  goto L088996;
  #L0889a2.  v0:= v1 @kind object;
  #L0889a4.  goto L088996;
  catch `java.lang.NoSuchMethodException` @[Try_start0..Try_end0] goto L088998;
  catch `java.lang.NoSuchMethodException` @[Try_start1..Try_end1] goto L08899c;
}
procedure `java.lang.Object` `a`(`a.a.g.d` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0889d4.  v0:= 0I;
  #L0889d6.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L0889dc.  v1:= temp @kind object;
  #L0889de.  call temp:= `a`(v2, v1) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L0889e4.  v1:= temp @kind object;
  #L0889e6.  if v1 != 0 then goto L0889ec;
  #L0889ea.  return v0 @kind object;
  #Try_start0.  
  #L0889ec.  call temp:= `invoke`(v1, v3, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L0889f2.  v0:= temp @kind object;
  #L0889f4.  goto L0889ea;
  #L0889f6.  v1:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L0889f8.  goto L0889ea;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L0889f6;
}
procedure `boolean` `a`(`a.a.g.d` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L088a1c.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L088a22.  v0:= temp @kind object;
  #L088a24.  call temp:= `a`(v1, v0) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L088a2a.  v0:= temp @kind object;
  #L088a2c.  if v0 == 0 then goto L088a34;
  #L088a30.  v0:= 1I;
  #L088a32.  return v0;
  #L088a34.  v0:= 0I;
  #L088a36.  goto L088a32;
}
procedure `java.lang.Object` `b`(`a.a.g.d` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `La/a/g/d;.b:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L088a48.  call temp:= `a`(v3, v4, v5) @signature `La/a/g/d;.a:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L088a4e.  v0:= temp @kind object;
  #L088a50.  return v0 @kind object;
  #L088a52.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L088a54.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L088a5a.  v0:= temp @kind object;
  #L088a5c.  v1:= instanceof @variable v0 @type ^`java.lang.RuntimeException` @kind boolean;
  #L088a60.  if v1 == 0 then goto L088a6a;
  #L088a64.  v0:= (`java.lang.RuntimeException`) v0 @kind object;
  #L088a68.  throw v0;
  #L088a6a.  v1:= new `java.lang.AssertionError`;
  #L088a6e.  v2:= "Unexpected exception" @kind object;
  #L088a72.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L088a78.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L088a7e.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L088a52;
}
procedure `java.lang.Object` `c`(`a.a.g.d` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Object`[] v7 @kind object) @signature `La/a/g/d;.c:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L088aa0.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L088aa6.  v0:= temp @kind object;
  #L088aa8.  call temp:= `a`(v5, v0) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L088aae.  v0:= temp @kind object;
  #L088ab0.  if v0 != 0 then goto L088afe;
  #L088ab4.  v0:= new `java.lang.AssertionError`;
  #L088ab8.  v1:= new `java.lang.StringBuilder`;
  #L088abc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L088ac2.  v2:= "Method " @kind object;
  #L088ac6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L088acc.  v1:= temp @kind object;
  #L088ace.  v2:= v5.`a.a.g.d.b` @type ^`java.lang.String` @kind object;
  #L088ad2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L088ad8.  v1:= temp @kind object;
  #L088ada.  v2:= " not supported for object " @kind object;
  #L088ade.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L088ae4.  v1:= temp @kind object;
  #L088ae6.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L088aec.  v1:= temp @kind object;
  #L088aee.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L088af4.  v1:= temp @kind object;
  #L088af6.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L088afc.  throw v0;
  #Try_start0.  
  #L088afe.  call temp:= `invoke`(v0, v6, v7) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L088b04.  v0:= temp @kind object;
  #L088b06.  return v0 @kind object;
  #L088b08.  v1:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L088b0a.  v2:= new `java.lang.AssertionError`;
  #L088b0e.  v3:= new `java.lang.StringBuilder`;
  #L088b12.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L088b18.  v4:= "Unexpectedly could not call: " @kind object;
  #L088b1c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L088b22.  v3:= temp @kind object;
  #L088b24.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L088b2a.  v0:= temp @kind object;
  #L088b2c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L088b32.  v0:= temp @kind object;
  #L088b34.  call `<init>`(v2, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L088b3a.  call temp:= `initCause`(v2, v1) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L088b40.  throw v2;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L088b08;
}
procedure `java.lang.Object` `d`(`a.a.g.d` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `La/a/g/d;.d:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L088b64.  call temp:= `c`(v3, v4, v5) @signature `La/a/g/d;.c:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L088b6a.  v0:= temp @kind object;
  #L088b6c.  return v0 @kind object;
  #L088b6e.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L088b70.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L088b76.  v0:= temp @kind object;
  #L088b78.  v1:= instanceof @variable v0 @type ^`java.lang.RuntimeException` @kind boolean;
  #L088b7c.  if v1 == 0 then goto L088b86;
  #L088b80.  v0:= (`java.lang.RuntimeException`) v0 @kind object;
  #L088b84.  throw v0;
  #L088b86.  v1:= new `java.lang.AssertionError`;
  #L088b8a.  v2:= "Unexpected exception" @kind object;
  #L088b8e.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L088b94.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L088b9a.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L088b6e;
}
