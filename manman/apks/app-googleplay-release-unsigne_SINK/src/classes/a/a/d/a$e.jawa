record `a.a.d.a$e` @kind class @AccessFlag  extends `a.a.d.a$a` @kind class {
  `a.a.d.a` `a.a.d.a$e.d` @AccessFlag FINAL_SYNTHETIC;
  `long` `a.a.d.a$e.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$e` v4 @kind this, `a.a.d.a` v5 @kind object, `long` v6 ) @signature `La/a/d/a$e;.<init>:(La/a/d/a;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07ff50.  v4.`a.a.d.a$e.d` @type ^`a.a.d.a` := v5 @kind object;
  #L07ff54.  v0:= 0I;
  #L07ff56.  call `<init>`(v4, v5, v0) @signature `La/a/d/a$a;.<init>:(La/a/d/a;La/a/d/a$1;)V` @kind direct;
  #L07ff5c.  v4.`a.a.d.a$e.e` @type ^`long` := v6 @kind wide;
  #L07ff60.  v0:= v4.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07ff64.  v2:= 0L;
  #L07ff68.  v0:= lcmp(v0, v2);
  #L07ff6c.  if v0 != 0 then goto L07ff78;
  #L07ff70.  v0:= 1I;
  #L07ff72.  call `a`(v4, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L07ff78.  return @kind void;
}
procedure `long` `a`(`a.a.d.a$e` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `La/a/d/a$e;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L07ff8c.  v0:= -1L;
  #L07ff90.  v6:= 0L;
  #L07ff94.  v2:= lcmp(v10, v6);
  #L07ff98.  if v2 >= 0 then goto L07ffce;
  #L07ff9c.  v0:= new `java.lang.IllegalArgumentException`;
  #L07ffa0.  v1:= new `java.lang.StringBuilder`;
  #L07ffa4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07ffaa.  v2:= "byteCount < 0: " @kind object;
  #L07ffae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07ffb4.  v1:= temp @kind object;
  #L07ffb6.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07ffbc.  v1:= temp @kind object;
  #L07ffbe.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07ffc4.  v1:= temp @kind object;
  #L07ffc6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07ffcc.  throw v0;
  #L07ffce.  v2:= v8.`a.a.d.a$e.b` @type ^`boolean` @kind boolean;
  #L07ffd2.  if v2 == 0 then goto L07ffe6;
  #L07ffd6.  v0:= new `java.lang.IllegalStateException`;
  #L07ffda.  v1:= "closed" @kind object;
  #L07ffde.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07ffe4.  throw v0;
  #L07ffe6.  v2:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07ffea.  v2:= lcmp(v2, v6);
  #L07ffee.  if v2 != 0 then goto L07fff4;
  #L07fff2.  return v0 @kind wide;
  #L07fff4.  v2:= v8.`a.a.d.a$e.d` @type ^`a.a.d.a` @kind object;
  #L07fff8.  v2:= v2.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07fffc.  v4:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L080000.  call temp:= `min`(v4, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L080006.  v4:= temp @kind wide;
  #L080008.  call temp:= `a`(v2, v9, v4) @signature `Lb/e;.a:(Lb/c;J)J` @kind interface;
  #L08000e.  v2:= temp @kind wide;
  #L080010.  v0:= lcmp(v2, v0);
  #L080014.  if v0 != 0 then goto L080030;
  #L080018.  v0:= 0I;
  #L08001a.  call `a`(v8, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L080020.  v0:= new `java.net.ProtocolException`;
  #L080024.  v1:= "unexpected end of stream" @kind object;
  #L080028.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08002e.  throw v0;
  #L080030.  v0:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L080034.  v0:= v0 - v2 @kind long;
  #L080036.  v8.`a.a.d.a$e.e` @type ^`long` := v0 @kind wide;
  #L08003a.  v0:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L08003e.  v0:= lcmp(v0, v6);
  #L080042.  if v0 != 0 then goto L08004e;
  #L080046.  v0:= 1I;
  #L080048.  call `a`(v8, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L08004e.  v0:= v2 @kind wide;
  #L080050.  goto L07fff2;
}
procedure `void` `close`(`a.a.d.a$e` v4 @kind this) @signature `La/a/d/a$e;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L080064.  v0:= v4.`a.a.d.a$e.b` @type ^`boolean` @kind boolean;
  #L080068.  if v0 == 0 then goto L08006e;
  #L08006c.  return @kind void;
  #L08006e.  v0:= v4.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L080072.  v2:= 0L;
  #L080076.  v0:= lcmp(v0, v2);
  #L08007a.  if v0 == 0 then goto L08009a;
  #L08007e.  v0:= 100I;
  #L080082.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L080086.  call temp:= `a`(v4, v0, v1) @signature `La/a/c;.a:(Lb/r;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L08008c.  v0:= temp;
  #L08008e.  if v0 != 0 then goto L08009a;
  #L080092.  v0:= 0I;
  #L080094.  call `a`(v4, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L08009a.  v0:= 1I;
  #L08009c.  v4.`a.a.d.a$e.b` @type ^`boolean` := v0 @kind boolean;
  #L0800a0.  goto L08006c;
}
