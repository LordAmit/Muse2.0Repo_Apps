record `a.a.d.a$d` @kind class @AccessFlag FINAL extends `b.q` @kind interface {
  `a.a.d.a` `a.a.d.a$d.a` @AccessFlag FINAL_SYNTHETIC;
  `b.h` `a.a.d.a$d.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.a.d.a$d.c` @AccessFlag PRIVATE;
  `long` `a.a.d.a$d.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$d` v2 @kind this, `a.a.d.a` v3 @kind object, `long` v4 ) @signature `La/a/d/a$d;.<init>:(La/a/d/a;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07fdc4.  v2.`a.a.d.a$d.a` @type ^`a.a.d.a` := v3 @kind object;
  #L07fdc8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07fdce.  v0:= new `b.h`;
  #L07fdd2.  v1:= v2.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L07fdd6.  v1:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07fdda.  call temp:= `a`(v1) @signature `Lb/d;.a:()Lb/s;` @kind interface;
  #L07fde0.  v1:= temp @kind object;
  #L07fde2.  call `<init>`(v0, v1) @signature `Lb/h;.<init>:(Lb/s;)V` @kind direct;
  #L07fde8.  v2.`a.a.d.a$d.b` @type ^`b.h` := v0 @kind object;
  #L07fdec.  v2.`a.a.d.a$d.d` @type ^`long` := v4 @kind wide;
  #L07fdf0.  return @kind void;
}
procedure `b.s` `a`(`a.a.d.a$d` v1 @kind this) @signature `La/a/d/a$d;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07fe04.  v0:= v1.`a.a.d.a$d.b` @type ^`b.h` @kind object;
  #L07fe08.  return v0 @kind object;
}
procedure `void` `a_`(`a.a.d.a$d` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `La/a/d/a$d;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07fe1c.  v0:= v6.`a.a.d.a$d.c` @type ^`boolean` @kind boolean;
  #L07fe20.  if v0 == 0 then goto L07fe34;
  #L07fe24.  v0:= new `java.lang.IllegalStateException`;
  #L07fe28.  v1:= "closed" @kind object;
  #L07fe2c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07fe32.  throw v0;
  #L07fe34.  call temp:= `b`(v7) @signature `Lb/c;.b:()J` @kind virtual;
  #L07fe3a.  v0:= temp @kind wide;
  #L07fe3c.  v2:= 0L;
  #L07fe40.  v4:= v8 @kind wide;
  #L07fe42.  call `a`(v0, v2, v4) @signature `La/a/c;.a:(JJJ)V` @kind static;
  #L07fe48.  v0:= v6.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L07fe4c.  v0:= lcmp(v8, v0);
  #L07fe50.  if v0 <= 0 then goto L07fe9e;
  #L07fe54.  v0:= new `java.net.ProtocolException`;
  #L07fe58.  v1:= new `java.lang.StringBuilder`;
  #L07fe5c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07fe62.  v2:= "expected " @kind object;
  #L07fe66.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07fe6c.  v1:= temp @kind object;
  #L07fe6e.  v2:= v6.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L07fe72.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07fe78.  v1:= temp @kind object;
  #L07fe7a.  v2:= " bytes but received " @kind object;
  #L07fe7e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07fe84.  v1:= temp @kind object;
  #L07fe86.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07fe8c.  v1:= temp @kind object;
  #L07fe8e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07fe94.  v1:= temp @kind object;
  #L07fe96.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07fe9c.  throw v0;
  #L07fe9e.  v0:= v6.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L07fea2.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07fea6.  call `a_`(v0, v7, v8) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L07feac.  v0:= v6.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L07feb0.  v0:= v0 - v8 @kind long;
  #L07feb2.  v6.`a.a.d.a$d.d` @type ^`long` := v0 @kind wide;
  #L07feb6.  return @kind void;
}
procedure `void` `close`(`a.a.d.a$d` v4 @kind this) @signature `La/a/d/a$d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07fec8.  v0:= v4.`a.a.d.a$d.c` @type ^`boolean` @kind boolean;
  #L07fecc.  if v0 == 0 then goto L07fed2;
  #L07fed0.  return @kind void;
  #L07fed2.  v0:= 1I;
  #L07fed4.  v4.`a.a.d.a$d.c` @type ^`boolean` := v0 @kind boolean;
  #L07fed8.  v0:= v4.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L07fedc.  v2:= 0L;
  #L07fee0.  v0:= lcmp(v0, v2);
  #L07fee4.  if v0 <= 0 then goto L07fef8;
  #L07fee8.  v0:= new `java.net.ProtocolException`;
  #L07feec.  v1:= "unexpected end of stream" @kind object;
  #L07fef0.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07fef6.  throw v0;
  #L07fef8.  v0:= v4.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L07fefc.  v1:= v4.`a.a.d.a$d.b` @type ^`b.h` @kind object;
  #L07ff00.  call `a`(v0, v1) @signature `La/a/d/a;.a:(Lb/h;)V` @kind virtual;
  #L07ff06.  v0:= v4.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L07ff0a.  v1:= 3I;
  #L07ff0c.  v0.`a.a.d.a.e` @type ^`int` := v1;
  #L07ff10.  goto L07fed0;
}
procedure `void` `flush`(`a.a.d.a$d` v1 @kind this) @signature `La/a/d/a$d;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07ff24.  v0:= v1.`a.a.d.a$d.c` @type ^`boolean` @kind boolean;
  #L07ff28.  if v0 == 0 then goto L07ff2e;
  #L07ff2c.  return @kind void;
  #L07ff2e.  v0:= v1.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L07ff32.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07ff36.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L07ff3c.  goto L07ff2c;
}
