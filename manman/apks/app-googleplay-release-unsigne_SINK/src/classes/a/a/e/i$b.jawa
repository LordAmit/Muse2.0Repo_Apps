record `a.a.e.i$b` @kind class @AccessFlag FINAL extends `b.r` @kind interface {
  `boolean` `a.a.e.i$b.a` @AccessFlag ;
  `boolean` `a.a.e.i$b.b` @AccessFlag ;
  `a.a.e.i` `a.a.e.i$b.d` @AccessFlag FINAL_SYNTHETIC;
  `b.c` `a.a.e.i$b.e` @AccessFlag PRIVATE_FINAL;
  `b.c` `a.a.e.i$b.f` @AccessFlag PRIVATE_FINAL;
  `long` `a.a.e.i$b.g` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.a.e.i$b.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/e/i$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L0850d4.  v0:= constclass @type ^`a.a.e.i` @kind object;
  #L0850d8.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L0850de.  v0:= temp;
  #L0850e0.  if v0 != 0 then goto L0850ec;
  #L0850e4.  v0:= 1I;
  #L0850e6.  `@@a.a.e.i$b.c` @type ^`boolean` := v0 @kind boolean;
  #L0850ea.  return @kind void;
  #L0850ec.  v0:= 0I;
  #L0850ee.  goto L0850e6;
}
procedure `void` `<init>`(`a.a.e.i$b` v2 @kind this, `a.a.e.i` v3 @kind object, `long` v4 ) @signature `La/a/e/i$b;.<init>:(La/a/e/i;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L085100.  v2.`a.a.e.i$b.d` @type ^`a.a.e.i` := v3 @kind object;
  #L085104.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08510a.  v0:= new `b.c`;
  #L08510e.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L085114.  v2.`a.a.e.i$b.e` @type ^`b.c` := v0 @kind object;
  #L085118.  v0:= new `b.c`;
  #L08511c.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L085122.  v2.`a.a.e.i$b.f` @type ^`b.c` := v0 @kind object;
  #L085126.  v2.`a.a.e.i$b.g` @type ^`long` := v4 @kind wide;
  #L08512a.  return @kind void;
}
procedure `void` `b`(`a.a.e.i$b` v4 @kind this) @signature `La/a/e/i$b;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08513c.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L085140.  v0:= v0.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L085144.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_start0.  
  #L08514a.  v0:= v4.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L08514e.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L085154.  v0:= temp @kind wide;
  #L085156.  v2:= 0L;
  #L08515a.  v0:= lcmp(v0, v2);
  #L08515e.  if v0 != 0 then goto L08519c;
  #L085162.  v0:= v4.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L085166.  if v0 != 0 then goto L08519c;
  #L08516a.  v0:= v4.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L08516e.  if v0 != 0 then goto L08519c;
  #L085172.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L085176.  v0:= v0.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L08517a.  if v0 != 0 then goto L08519c;
  #L08517e.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L085182.  call `l`(v0) @signature `La/a/e/i;.l:()V` @kind virtual;
  #Try_end0.  
  #L085188.  goto L08514a;
  #L08518a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08518c.  v1:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L085190.  v1:= v1.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L085194.  call `b`(v1) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L08519a.  throw v0;
  #L08519c.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0851a0.  v0:= v0.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L0851a4.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L0851aa.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08518a;
}
procedure `void` `c`(`a.a.e.i$b` v2 @kind this) @signature `La/a/e/i$b;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L0851c8.  v0:= v2.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L0851cc.  if v0 == 0 then goto L0851e0;
  #L0851d0.  v0:= new `java.io.IOException`;
  #L0851d4.  v1:= "stream closed" @kind object;
  #L0851d8.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0851de.  throw v0;
  #L0851e0.  v0:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0851e4.  v0:= v0.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L0851e8.  if v0 == 0 then goto L085200;
  #L0851ec.  v0:= new `a.a.e.o`;
  #L0851f0.  v1:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0851f4.  v1:= v1.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L0851f8.  call `<init>`(v0, v1) @signature `La/a/e/o;.<init>:(La/a/e/b;)V` @kind direct;
  #L0851fe.  throw v0;
  #L085200.  return @kind void;
}
procedure `long` `a`(`a.a.e.i$b` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `La/a/e/i$b;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L085214.  v4:= 0L;
  #L085218.  v0:= lcmp(v10, v4);
  #L08521c.  if v0 >= 0 then goto L085252;
  #L085220.  v0:= new `java.lang.IllegalArgumentException`;
  #L085224.  v1:= new `java.lang.StringBuilder`;
  #L085228.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08522e.  v2:= "byteCount < 0: " @kind object;
  #L085232.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085238.  v1:= temp @kind object;
  #L08523a.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L085240.  v1:= temp @kind object;
  #L085242.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L085248.  v1:= temp @kind object;
  #L08524a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L085250.  throw v0;
  #L085252.  v2:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L085256.  @monitorenter v2
  #Try_start0.  
  #L085258.  call `b`(v8) @signature `La/a/e/i$b;.b:()V` @kind direct;
  #L08525e.  call `c`(v8) @signature `La/a/e/i$b;.c:()V` @kind direct;
  #L085264.  v0:= v8.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L085268.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L08526e.  v0:= temp @kind wide;
  #L085270.  v0:= lcmp(v0, v4);
  #L085274.  if v0 != 0 then goto L085280;
  #L085278.  v0:= -1L;
  #L08527c.  @monitorexit v2
  #L08527e.  return v0 @kind wide;
  #L085280.  v0:= v8.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L085284.  v1:= v8.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L085288.  call temp:= `b`(v1) @signature `Lb/c;.b:()J` @kind virtual;
  #L08528e.  v4:= temp @kind wide;
  #L085290.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L085296.  v4:= temp @kind wide;
  #L085298.  call temp:= `a`(v0, v9, v4) @signature `Lb/c;.a:(Lb/c;J)J` @kind virtual;
  #L08529e.  v0:= temp @kind wide;
  #L0852a0.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0852a4.  v4:= v3.`a.a.e.i.a` @type ^`long` @kind wide;
  #L0852a8.  v4:= v4 + v0 @kind long;
  #L0852aa.  v3.`a.a.e.i.a` @type ^`long` := v4 @kind wide;
  #L0852ae.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0852b2.  v4:= v3.`a.a.e.i.a` @type ^`long` @kind wide;
  #L0852b6.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0852ba.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L0852be.  v3:= v3.`a.a.e.g.l` @type ^`a.a.e.n` @kind object;
  #L0852c2.  call temp:= `d`(v3) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L0852c8.  v3:= temp;
  #L0852ca.  v3:= v3 / 2;
  #L0852ce.  v6:= (`long`) v3 @kind i2l;
  #L0852d0.  v3:= lcmp(v4, v6);
  #L0852d4.  if v3 < 0 then goto L085302;
  #L0852d8.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0852dc.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L0852e0.  v4:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0852e4.  v4:= v4.`a.a.e.i.c` @type ^`int`;
  #L0852e8.  v5:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0852ec.  v6:= v5.`a.a.e.i.a` @type ^`long` @kind wide;
  #L0852f0.  call `a`(v3, v4, v6) @signature `La/a/e/g;.a:(IJ)V` @kind virtual;
  #L0852f6.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0852fa.  v4:= 0L;
  #L0852fe.  v3.`a.a.e.i.a` @type ^`long` := v4 @kind wide;
  #L085302.  @monitorexit v2
  #Try_end0.  
  #L085304.  v2:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L085308.  v2:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L08530c.  @monitorenter v2
  #Try_start1.  
  #L08530e.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L085312.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L085316.  v4:= v3.`a.a.e.g.j` @type ^`long` @kind wide;
  #L08531a.  v4:= v4 + v0 @kind long;
  #L08531c.  v3.`a.a.e.g.j` @type ^`long` := v4 @kind wide;
  #L085320.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L085324.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L085328.  v4:= v3.`a.a.e.g.j` @type ^`long` @kind wide;
  #L08532c.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L085330.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L085334.  v3:= v3.`a.a.e.g.l` @type ^`a.a.e.n` @kind object;
  #L085338.  call temp:= `d`(v3) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L08533e.  v3:= temp;
  #L085340.  v3:= v3 / 2;
  #L085344.  v6:= (`long`) v3 @kind i2l;
  #L085346.  v3:= lcmp(v4, v6);
  #L08534a.  if v3 < 0 then goto L08537a;
  #L08534e.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L085352.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L085356.  v4:= 0I;
  #L085358.  v5:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L08535c.  v5:= v5.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L085360.  v6:= v5.`a.a.e.g.j` @type ^`long` @kind wide;
  #L085364.  call `a`(v3, v4, v6) @signature `La/a/e/g;.a:(IJ)V` @kind virtual;
  #L08536a.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L08536e.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L085372.  v4:= 0L;
  #L085376.  v3.`a.a.e.g.j` @type ^`long` := v4 @kind wide;
  #L08537a.  @monitorexit v2
  #L08537c.  goto L08527e;
  #L08537e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L085380.  @monitorexit v2
  #Try_end1.  
  #L085382.  throw v0;
  #L085384.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start2.  
  #L085386.  @monitorexit v2
  #Try_end2.  
  #L085388.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L085384;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08537e;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L085384;
}
procedure `b.s` `a`(`a.a.e.i$b` v1 @kind this) @signature `La/a/e/i$b;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0853bc.  v0:= v1.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0853c0.  v0:= v0.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L0853c4.  return v0 @kind object;
}
procedure `void` `a`(`a.a.e.i$b` v12 @kind this, `b.e` v13 @kind object, `long` v14 ) @signature `La/a/e/i$b;.a:(Lb/e;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L0853d8.  v10:= 0L;
  #L0853dc.  v1:= 1I;
  #L0853de.  v2:= 0I;
  #L0853e0.  v0:= `@@a.a.e.i$b.c` @type ^`boolean` @kind boolean;
  #L0853e4.  if v0 != 0 then goto L085440;
  #L0853e8.  v0:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0853ec.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L0853f2.  v0:= temp;
  #L0853f4.  if v0 == 0 then goto L085440;
  #L0853f8.  v0:= new `java.lang.AssertionError`;
  #L0853fc.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L085402.  throw v0;
  #L085404.  v14:= v14 - v4 @kind long;
  #L085406.  v3:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L08540a.  @monitorenter v3
  #Try_start0.  
  #L08540c.  v0:= v12.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L085410.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L085416.  v4:= temp @kind wide;
  #L085418.  v0:= lcmp(v4, v10);
  #L08541c.  if v0 != 0 then goto L0854c4;
  #L085420.  v0:= v1;
  #L085422.  v4:= v12.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L085426.  v5:= v12.`a.a.e.i$b.e` @type ^`b.c` @kind object;
  #L08542a.  call temp:= `a`(v4, v5) @signature `Lb/c;.a:(Lb/r;)J` @kind virtual;
  #L085430.  if v0 == 0 then goto L08543e;
  #L085434.  v0:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L085438.  call `notifyAll`(v0) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L08543e.  @monitorexit v3
  #Try_end0.  
  #L085440.  v0:= lcmp(v14, v10);
  #L085444.  if v0 <= 0 then goto L085488;
  #L085448.  v3:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L08544c.  @monitorenter v3
  #Try_start1.  
  #L08544e.  v4:= v12.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L085452.  v0:= v12.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L085456.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L08545c.  v6:= temp @kind wide;
  #L08545e.  v6:= v6 + v14 @kind long;
  #L085460.  v8:= v12.`a.a.e.i$b.g` @type ^`long` @kind wide;
  #L085464.  v0:= lcmp(v6, v8);
  #L085468.  if v0 <= 0 then goto L08548a;
  #L08546c.  v0:= v1;
  #L08546e.  @monitorexit v3
  #Try_end1.  
  #L085470.  if v0 == 0 then goto L085494;
  #L085474.  call `g`(v13, v14) @signature `Lb/e;.g:(J)V` @kind interface;
  #L08547a.  v0:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L08547e.  v1:= `@@a.a.e.b.d` @type ^`a.a.e.b` @kind object;
  #L085482.  call `b`(v0, v1) @signature `La/a/e/i;.b:(La/a/e/b;)V` @kind virtual;
  #L085488.  return @kind void;
  #L08548a.  v0:= v2;
  #L08548c.  goto L08546e;
  #L08548e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start2.  
  #L085490.  @monitorexit v3
  #Try_end2.  
  #L085492.  throw v0;
  #L085494.  if v4 == 0 then goto L0854a0;
  #L085498.  call `g`(v13, v14) @signature `Lb/e;.g:(J)V` @kind interface;
  #L08549e.  goto L085488;
  #L0854a0.  v0:= v12.`a.a.e.i$b.e` @type ^`b.c` @kind object;
  #L0854a4.  call temp:= `a`(v13, v0, v14) @signature `Lb/e;.a:(Lb/c;J)J` @kind interface;
  #L0854aa.  v4:= temp @kind wide;
  #L0854ac.  v6:= -1L;
  #L0854b0.  v0:= lcmp(v4, v6);
  #L0854b4.  if v0 != 0 then goto L085404;
  #L0854b8.  v0:= new `java.io.EOFException`;
  #L0854bc.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L0854c2.  throw v0;
  #L0854c4.  v0:= v2;
  #L0854c6.  goto L085422;
  #L0854c8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L0854ca.  @monitorexit v3
  #Try_end3.  
  #L0854cc.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0854c8;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08548e;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L08548e;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L0854c8;
}
procedure `void` `close`(`a.a.e.i$b` v2 @kind this) @signature `La/a/e/i$b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L085508.  v1:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L08550c.  @monitorenter v1
  #L08550e.  v0:= 1I;
  #Try_start0.  
  #L085510.  v2.`a.a.e.i$b.a` @type ^`boolean` := v0 @kind boolean;
  #L085514.  v0:= v2.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L085518.  call `r`(v0) @signature `Lb/c;.r:()V` @kind virtual;
  #L08551e.  v0:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L085522.  call `notifyAll`(v0) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L085528.  @monitorexit v1
  #Try_end0.  
  #L08552a.  v0:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L08552e.  call `j`(v0) @signature `La/a/e/i;.j:()V` @kind virtual;
  #L085534.  return @kind void;
  #L085536.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L085538.  @monitorexit v1
  #Try_end1.  
  #L08553a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L085536;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L085536;
}
