record `a.a.e.d$a` @kind class @AccessFlag FINAL {
  `a.a.e.c`[] `a.a.e.d$a.a` @AccessFlag ;
  `int` `a.a.e.d$a.b` @AccessFlag ;
  `int` `a.a.e.d$a.c` @AccessFlag ;
  `int` `a.a.e.d$a.d` @AccessFlag ;
  `java.util.List` `a.a.e.d$a.e` @AccessFlag PRIVATE_FINAL;
  `b.e` `a.a.e.d$a.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.e.d$a.g` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.e.d$a.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.e.d$a` v2 @kind this, `int` v3 , `int` v4 , `b.r` v5 @kind object) @signature `La/a/e/d$a;.<init>:(IILb/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L080b3c.  v1:= 0I;
  #L080b3e.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L080b44.  v0:= new `java.util.ArrayList`;
  #L080b48.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L080b4e.  v2.`a.a.e.d$a.e` @type ^`java.util.List` := v0 @kind object;
  #L080b52.  v0:= 8I;
  #L080b56.  v0:= new `a.a.e.c`[v0];
  #L080b5a.  v2.`a.a.e.d$a.a` @type ^`a.a.e.c`[] := v0 @kind object;
  #L080b5e.  v0:= v2.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080b62.  v0:= length @variable v0;
  #L080b64.  v0:= v0 + -1;
  #L080b68.  v2.`a.a.e.d$a.b` @type ^`int` := v0;
  #L080b6c.  v2.`a.a.e.d$a.c` @type ^`int` := v1;
  #L080b70.  v2.`a.a.e.d$a.d` @type ^`int` := v1;
  #L080b74.  v2.`a.a.e.d$a.g` @type ^`int` := v3;
  #L080b78.  v2.`a.a.e.d$a.h` @type ^`int` := v4;
  #L080b7c.  call temp:= `a`(v5) @signature `Lb/k;.a:(Lb/r;)Lb/e;` @kind static;
  #L080b82.  v0:= temp @kind object;
  #L080b84.  v2.`a.a.e.d$a.f` @type ^`b.e` := v0 @kind object;
  #L080b88.  return @kind void;
}
procedure `void` `<init>`(`a.a.e.d$a` v0 @kind this, `int` v1 , `b.r` v2 @kind object) @signature `La/a/e/d$a;.<init>:(ILb/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L080b9c.  call `<init>`(v0, v1, v1, v2) @signature `La/a/e/d$a;.<init>:(IILb/r;)V` @kind direct;
  #L080ba2.  return @kind void;
}
procedure `int` `a`(`a.a.e.d$a` v6 @kind this, `int` v7 ) @signature `La/a/e/d$a;.a:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L080bb4.  v1:= 0I;
  #L080bb6.  if v7 <= 0 then goto L080c38;
  #L080bba.  v0:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080bbe.  v0:= length @variable v0;
  #L080bc0.  v0:= v0 + -1;
  #L080bc4.  v2:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L080bc8.  if v0 < v2 then goto L080c0a;
  #L080bcc.  if v7 <= 0 then goto L080c0a;
  #L080bd0.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080bd4.  v2:= v2[v0] @kind object;
  #L080bd8.  v2:= v2.`a.a.e.c.i` @type ^`int`;
  #L080bdc.  v7:= v7 - v2 @kind int;
  #L080bde.  v2:= v6.`a.a.e.d$a.d` @type ^`int`;
  #L080be2.  v3:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080be6.  v3:= v3[v0] @kind object;
  #L080bea.  v3:= v3.`a.a.e.c.i` @type ^`int`;
  #L080bee.  v2:= v2 - v3 @kind int;
  #L080bf0.  v6.`a.a.e.d$a.d` @type ^`int` := v2;
  #L080bf4.  v2:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L080bf8.  v2:= v2 + -1;
  #L080bfc.  v6.`a.a.e.d$a.c` @type ^`int` := v2;
  #L080c00.  v1:= v1 + 1;
  #L080c04.  v0:= v0 + -1;
  #L080c08.  goto L080bc4;
  #L080c0a.  v0:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080c0e.  v2:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L080c12.  v2:= v2 + 1;
  #L080c16.  v3:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080c1a.  v4:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L080c1e.  v4:= v4 + 1;
  #L080c22.  v4:= v4 + v1 @kind int;
  #L080c24.  v5:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L080c28.  call `arraycopy`(v0, v2, v3, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L080c2e.  v0:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L080c32.  v0:= v0 + v1 @kind int;
  #L080c34.  v6.`a.a.e.d$a.b` @type ^`int` := v0;
  #L080c38.  return v1;
}
procedure `void` `a`(`a.a.e.d$a` v6 @kind this, `int` v7 , `a.a.e.c` v8 @kind object) @signature `La/a/e/d$a;.a:(ILa/a/e/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L080c4c.  v3:= -1I;
  #L080c4e.  v0:= v6.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L080c52.  call temp:= `add`(v0, v8) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L080c58.  v0:= v8.`a.a.e.c.i` @type ^`int`;
  #L080c5c.  if v7 == v3 then goto L080c76;
  #L080c60.  v1:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080c64.  call temp:= `c`(v6, v7) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L080c6a.  v2:= temp;
  #L080c6c.  v1:= v1[v2] @kind object;
  #L080c70.  v1:= v1.`a.a.e.c.i` @type ^`int`;
  #L080c74.  v0:= v0 - v1 @kind int;
  #L080c76.  v1:= v6.`a.a.e.d$a.h` @type ^`int`;
  #L080c7a.  if v0 <= v1 then goto L080c86;
  #L080c7e.  call `e`(v6) @signature `La/a/e/d$a;.e:()V` @kind direct;
  #L080c84.  return @kind void;
  #L080c86.  v1:= v6.`a.a.e.d$a.d` @type ^`int`;
  #L080c8a.  v1:= v1 + v0 @kind int;
  #L080c8c.  v2:= v6.`a.a.e.d$a.h` @type ^`int`;
  #L080c90.  v1:= v1 - v2 @kind int;
  #L080c92.  call temp:= `a`(v6, v1) @signature `La/a/e/d$a;.a:(I)I` @kind direct;
  #L080c98.  v1:= temp;
  #L080c9a.  if v7 != v3 then goto L080d14;
  #L080c9e.  v1:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L080ca2.  v1:= v1 + 1;
  #L080ca6.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080caa.  v2:= length @variable v2;
  #L080cac.  if v1 <= v2 then goto L080ce8;
  #L080cb0.  v1:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080cb4.  v1:= length @variable v1;
  #L080cb6.  v1:= v1 * 2;
  #L080cba.  v1:= new `a.a.e.c`[v1];
  #L080cbe.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080cc2.  v3:= 0I;
  #L080cc4.  v4:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080cc8.  v4:= length @variable v4;
  #L080cca.  v5:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080cce.  v5:= length @variable v5;
  #L080cd0.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L080cd6.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080cda.  v2:= length @variable v2;
  #L080cdc.  v2:= v2 + -1;
  #L080ce0.  v6.`a.a.e.d$a.b` @type ^`int` := v2;
  #L080ce4.  v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] := v1 @kind object;
  #L080ce8.  v1:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L080cec.  v2:= v1 + -1;
  #L080cf0.  v6.`a.a.e.d$a.b` @type ^`int` := v2;
  #L080cf4.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080cf8.  v2[v1]:= v8 @kind object;
  #L080cfc.  v1:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L080d00.  v1:= v1 + 1;
  #L080d04.  v6.`a.a.e.d$a.c` @type ^`int` := v1;
  #L080d08.  v1:= v6.`a.a.e.d$a.d` @type ^`int`;
  #L080d0c.  v0:= v0 + v1 @kind int;
  #L080d0e.  v6.`a.a.e.d$a.d` @type ^`int` := v0;
  #L080d12.  goto L080c84;
  #L080d14.  call temp:= `c`(v6, v7) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L080d1a.  v2:= temp;
  #L080d1c.  v1:= v1 + v2 @kind int;
  #L080d1e.  v1:= v1 + v7 @kind int;
  #L080d20.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080d24.  v2[v1]:= v8 @kind object;
  #L080d28.  goto L080d08;
}
procedure `void` `b`(`a.a.e.d$a` v3 @kind this, `int` v4 ) @signature `La/a/e/d$a;.b:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L080d3c.  call temp:= `g`(v3, v4) @signature `La/a/e/d$a;.g:(I)Z` @kind direct;
  #L080d42.  v0:= temp;
  #L080d44.  if v0 == 0 then goto L080d5c;
  #L080d48.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L080d4c.  v0:= v0[v4] @kind object;
  #L080d50.  v1:= v3.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L080d54.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L080d5a.  return @kind void;
  #L080d5c.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L080d60.  v0:= length @variable v0;
  #L080d62.  v0:= v4 - v0 @kind int;
  #L080d66.  call temp:= `c`(v3, v0) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L080d6c.  v0:= temp;
  #L080d6e.  if v0 < 0 then goto L080d80;
  #L080d72.  v1:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080d76.  v1:= length @variable v1;
  #L080d78.  v1:= v1 + -1;
  #L080d7c.  if v0 <= v1 then goto L080db6;
  #L080d80.  v0:= new `java.io.IOException`;
  #L080d84.  v1:= new `java.lang.StringBuilder`;
  #L080d88.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L080d8e.  v2:= "Header index too large " @kind object;
  #L080d92.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L080d98.  v1:= temp @kind object;
  #L080d9a.  v2:= v4 + 1;
  #L080d9e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L080da4.  v1:= temp @kind object;
  #L080da6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L080dac.  v1:= temp @kind object;
  #L080dae.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080db4.  throw v0;
  #L080db6.  v1:= v3.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L080dba.  v2:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080dbe.  v0:= v2[v0] @kind object;
  #L080dc2.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L080dc8.  goto L080d5a;
}
procedure `int` `c`(`a.a.e.d$a` v1 @kind this, `int` v2 ) @signature `La/a/e/d$a;.c:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L080ddc.  v0:= v1.`a.a.e.d$a.b` @type ^`int`;
  #L080de0.  v0:= v0 + 1;
  #L080de4.  v0:= v0 + v2 @kind int;
  #L080de6.  return v0;
}
procedure `void` `d`(`a.a.e.d$a` v2 @kind this) @signature `La/a/e/d$a;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L080df8.  v0:= v2.`a.a.e.d$a.h` @type ^`int`;
  #L080dfc.  v1:= v2.`a.a.e.d$a.d` @type ^`int`;
  #L080e00.  if v0 >= v1 then goto L080e12;
  #L080e04.  v0:= v2.`a.a.e.d$a.h` @type ^`int`;
  #L080e08.  if v0 != 0 then goto L080e14;
  #L080e0c.  call `e`(v2) @signature `La/a/e/d$a;.e:()V` @kind direct;
  #L080e12.  return @kind void;
  #L080e14.  v0:= v2.`a.a.e.d$a.d` @type ^`int`;
  #L080e18.  v1:= v2.`a.a.e.d$a.h` @type ^`int`;
  #L080e1c.  v0:= v0 - v1 @kind int;
  #L080e1e.  call temp:= `a`(v2, v0) @signature `La/a/e/d$a;.a:(I)I` @kind direct;
  #L080e24.  goto L080e12;
}
procedure `void` `d`(`a.a.e.d$a` v4 @kind this, `int` v5 ) @signature `La/a/e/d$a;.d:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L080e38.  call temp:= `f`(v4, v5) @signature `La/a/e/d$a;.f:(I)Lb/f;` @kind direct;
  #L080e3e.  v0:= temp @kind object;
  #L080e40.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L080e46.  v1:= temp @kind object;
  #L080e48.  v2:= v4.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L080e4c.  v3:= new `a.a.e.c`;
  #L080e50.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L080e56.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L080e5c.  return @kind void;
}
procedure `void` `e`(`a.a.e.d$a` v3 @kind this) @signature `La/a/e/d$a;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L080e70.  v2:= 0I;
  #L080e72.  v0:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080e76.  v1:= 0I;
  #L080e78.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L080e7e.  v0:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080e82.  v0:= length @variable v0;
  #L080e84.  v0:= v0 + -1;
  #L080e88.  v3.`a.a.e.d$a.b` @type ^`int` := v0;
  #L080e8c.  v3.`a.a.e.d$a.c` @type ^`int` := v2;
  #L080e90.  v3.`a.a.e.d$a.d` @type ^`int` := v2;
  #L080e94.  return @kind void;
}
procedure `void` `e`(`a.a.e.d$a` v4 @kind this, `int` v5 ) @signature `La/a/e/d$a;.e:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L080ea8.  call temp:= `f`(v4, v5) @signature `La/a/e/d$a;.f:(I)Lb/f;` @kind direct;
  #L080eae.  v0:= temp @kind object;
  #L080eb0.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L080eb6.  v1:= temp @kind object;
  #L080eb8.  v2:= -1I;
  #L080eba.  v3:= new `a.a.e.c`;
  #L080ebe.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L080ec4.  call `a`(v4, v2, v3) @signature `La/a/e/d$a;.a:(ILa/a/e/c;)V` @kind direct;
  #L080eca.  return @kind void;
}
procedure `b.f` `f`(`a.a.e.d$a` v2 @kind this, `int` v3 ) @signature `La/a/e/d$a;.f:(I)Lb/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L080edc.  call temp:= `g`(v2, v3) @signature `La/a/e/d$a;.g:(I)Z` @kind direct;
  #L080ee2.  v0:= temp;
  #L080ee4.  if v0 == 0 then goto L080ef6;
  #L080ee8.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L080eec.  v0:= v0[v3] @kind object;
  #L080ef0.  v0:= v0.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L080ef4.  return v0 @kind object;
  #L080ef6.  v0:= v2.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L080efa.  v1:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L080efe.  v1:= length @variable v1;
  #L080f00.  v1:= v3 - v1 @kind int;
  #L080f04.  call temp:= `c`(v2, v1) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L080f0a.  v1:= temp;
  #L080f0c.  v0:= v0[v1] @kind object;
  #L080f10.  v0:= v0.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L080f14.  goto L080ef4;
}
procedure `void` `f`(`a.a.e.d$a` v4 @kind this) @signature `La/a/e/d$a;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L080f28.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L080f2e.  v0:= temp @kind object;
  #L080f30.  call temp:= `a`(v0) @signature `La/a/e/d;.a:(Lb/f;)Lb/f;` @kind static;
  #L080f36.  v0:= temp @kind object;
  #L080f38.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L080f3e.  v1:= temp @kind object;
  #L080f40.  v2:= v4.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L080f44.  v3:= new `a.a.e.c`;
  #L080f48.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L080f4e.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L080f54.  return @kind void;
}
procedure `void` `g`(`a.a.e.d$a` v4 @kind this) @signature `La/a/e/d$a;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L080f68.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L080f6e.  v0:= temp @kind object;
  #L080f70.  call temp:= `a`(v0) @signature `La/a/e/d;.a:(Lb/f;)Lb/f;` @kind static;
  #L080f76.  v0:= temp @kind object;
  #L080f78.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L080f7e.  v1:= temp @kind object;
  #L080f80.  v2:= -1I;
  #L080f82.  v3:= new `a.a.e.c`;
  #L080f86.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L080f8c.  call `a`(v4, v2, v3) @signature `La/a/e/d$a;.a:(ILa/a/e/c;)V` @kind direct;
  #L080f92.  return @kind void;
}
procedure `boolean` `g`(`a.a.e.d$a` v1 @kind this, `int` v2 ) @signature `La/a/e/d$a;.g:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L080fa4.  if v2 < 0 then goto L080fba;
  #L080fa8.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L080fac.  v0:= length @variable v0;
  #L080fae.  v0:= v0 + -1;
  #L080fb2.  if v2 > v0 then goto L080fba;
  #L080fb6.  v0:= 1I;
  #L080fb8.  return v0;
  #L080fba.  v0:= 0I;
  #L080fbc.  goto L080fb8;
}
procedure `int` `h`(`a.a.e.d$a` v1 @kind this) @signature `La/a/e/d$a;.h:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L080fd0.  v0:= v1.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L080fd4.  call temp:= `h`(v0) @signature `Lb/e;.h:()B` @kind interface;
  #L080fda.  v0:= temp;
  #L080fdc.  v0:= v0 ^& 255;
  #L080fe0.  return v0;
}
procedure `int` `a`(`a.a.e.d$a` v3 @kind this, `int` v4 , `int` v5 ) @signature `La/a/e/d$a;.a:(II)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L080ff4.  v0:= v4 ^& v5 @kind int;
  #L080ff8.  if v0 >= v5 then goto L080ffe;
  #L080ffc.  return v0;
  #L080ffe.  v0:= 0I;
  #L081000.  call temp:= `h`(v3) @signature `La/a/e/d$a;.h:()I` @kind direct;
  #L081006.  v1:= temp;
  #L081008.  v2:= v1 ^& 128;
  #L08100c.  if v2 == 0 then goto L08101e;
  #L081010.  v1:= v1 ^& 127;
  #L081014.  v1:= v1 ^< v0 @kind int;
  #L081016.  v5:= v5 + v1 @kind int;
  #L081018.  v0:= v0 + 7;
  #L08101c.  goto L081000;
  #L08101e.  v0:= v1 ^< v0 @kind int;
  #L081022.  v0:= v0 + v5 @kind int;
  #L081024.  goto L080ffc;
}
procedure `void` `a`(`a.a.e.d$a` v5 @kind this) @signature `La/a/e/d$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L081038.  v4:= 128I;
  #L08103c.  v3:= 64I;
  #L081040.  v0:= v5.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L081044.  call temp:= `e`(v0) @signature `Lb/e;.e:()Z` @kind interface;
  #L08104a.  v0:= temp;
  #L08104c.  if v0 != 0 then goto L08115c;
  #L081050.  v0:= v5.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L081054.  call temp:= `h`(v0) @signature `Lb/e;.h:()B` @kind interface;
  #L08105a.  v0:= temp;
  #L08105c.  v0:= v0 ^& 255;
  #L081060.  if v0 != v4 then goto L081074;
  #L081064.  v0:= new `java.io.IOException`;
  #L081068.  v1:= "index == 0" @kind object;
  #L08106c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081072.  throw v0;
  #L081074.  v1:= v0 ^& 128;
  #L081078.  if v1 != v4 then goto L081094;
  #L08107c.  v1:= 127I;
  #L081080.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L081086.  v0:= temp;
  #L081088.  v0:= v0 + -1;
  #L08108c.  call `b`(v5, v0) @signature `La/a/e/d$a;.b:(I)V` @kind direct;
  #L081092.  goto L081040;
  #L081094.  if v0 != v3 then goto L0810a0;
  #L081098.  call `g`(v5) @signature `La/a/e/d$a;.g:()V` @kind direct;
  #L08109e.  goto L081040;
  #L0810a0.  v1:= v0 ^& 64;
  #L0810a4.  if v1 != v3 then goto L0810c0;
  #L0810a8.  v1:= 63I;
  #L0810ac.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L0810b2.  v0:= temp;
  #L0810b4.  v0:= v0 + -1;
  #L0810b8.  call `e`(v5, v0) @signature `La/a/e/d$a;.e:(I)V` @kind direct;
  #L0810be.  goto L081040;
  #L0810c0.  v1:= v0 ^& 32;
  #L0810c4.  v2:= 32I;
  #L0810c8.  if v1 != v2 then goto L08112e;
  #L0810cc.  v1:= 31I;
  #L0810d0.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L0810d6.  v0:= temp;
  #L0810d8.  v5.`a.a.e.d$a.h` @type ^`int` := v0;
  #L0810dc.  v0:= v5.`a.a.e.d$a.h` @type ^`int`;
  #L0810e0.  if v0 < 0 then goto L0810f0;
  #L0810e4.  v0:= v5.`a.a.e.d$a.h` @type ^`int`;
  #L0810e8.  v1:= v5.`a.a.e.d$a.g` @type ^`int`;
  #L0810ec.  if v0 <= v1 then goto L081126;
  #L0810f0.  v0:= new `java.io.IOException`;
  #L0810f4.  v1:= new `java.lang.StringBuilder`;
  #L0810f8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0810fe.  v2:= "Invalid dynamic table size update " @kind object;
  #L081102.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L081108.  v1:= temp @kind object;
  #L08110a.  v2:= v5.`a.a.e.d$a.h` @type ^`int`;
  #L08110e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L081114.  v1:= temp @kind object;
  #L081116.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08111c.  v1:= temp @kind object;
  #L08111e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081124.  throw v0;
  #L081126.  call `d`(v5) @signature `La/a/e/d$a;.d:()V` @kind direct;
  #L08112c.  goto L081040;
  #L08112e.  v1:= 16I;
  #L081132.  if v0 == v1 then goto L08113a;
  #L081136.  if v0 != 0 then goto L081142;
  #L08113a.  call `f`(v5) @signature `La/a/e/d$a;.f:()V` @kind direct;
  #L081140.  goto L081040;
  #L081142.  v1:= 15I;
  #L081146.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L08114c.  v0:= temp;
  #L08114e.  v0:= v0 + -1;
  #L081152.  call `d`(v5, v0) @signature `La/a/e/d$a;.d:(I)V` @kind direct;
  #L081158.  goto L081040;
  #L08115c.  return @kind void;
}
procedure `java.util.List` `b`(`a.a.e.d$a` v2 @kind this) @signature `La/a/e/d$a;.b:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L081170.  v0:= new `java.util.ArrayList`;
  #L081174.  v1:= v2.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L081178.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L08117e.  v1:= v2.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L081182.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L081188.  return v0 @kind object;
}
procedure `b.f` `c`(`a.a.e.d$a` v6 @kind this) @signature `La/a/e/d$a;.c:()Lb/f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L08119c.  call temp:= `h`(v6) @signature `La/a/e/d$a;.h:()I` @kind direct;
  #L0811a2.  v1:= temp;
  #L0811a4.  v0:= v1 ^& 128;
  #L0811a8.  v2:= 128I;
  #L0811ac.  if v0 != v2 then goto L0811ea;
  #L0811b0.  v0:= 1I;
  #L0811b2.  v2:= 127I;
  #L0811b6.  call temp:= `a`(v6, v1, v2) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L0811bc.  v1:= temp;
  #L0811be.  if v0 == 0 then goto L0811ee;
  #L0811c2.  call temp:= `a`() @signature `La/a/e/k;.a:()La/a/e/k;` @kind static;
  #L0811c8.  v0:= temp @kind object;
  #L0811ca.  v2:= v6.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L0811ce.  v4:= (`long`) v1 @kind i2l;
  #L0811d0.  call temp:= `f`(v2, v4) @signature `Lb/e;.f:(J)[B` @kind interface;
  #L0811d6.  v1:= temp @kind object;
  #L0811d8.  call temp:= `a`(v0, v1) @signature `La/a/e/k;.a:([B)[B` @kind virtual;
  #L0811de.  v0:= temp @kind object;
  #L0811e0.  call temp:= `a`(v0) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #L0811e6.  v0:= temp @kind object;
  #L0811e8.  return v0 @kind object;
  #L0811ea.  v0:= 0I;
  #L0811ec.  goto L0811b2;
  #L0811ee.  v0:= v6.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L0811f2.  v2:= (`long`) v1 @kind i2l;
  #L0811f4.  call temp:= `c`(v0, v2) @signature `Lb/e;.c:(J)Lb/f;` @kind interface;
  #L0811fa.  v0:= temp @kind object;
  #L0811fc.  goto L0811e8;
}
