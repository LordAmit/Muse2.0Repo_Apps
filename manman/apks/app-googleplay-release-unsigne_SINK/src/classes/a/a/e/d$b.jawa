record `a.a.e.d$b` @kind class @AccessFlag FINAL {
  `int` `a.a.e.d$b.a` @AccessFlag ;
  `int` `a.a.e.d$b.b` @AccessFlag ;
  `a.a.e.c`[] `a.a.e.d$b.c` @AccessFlag ;
  `int` `a.a.e.d$b.d` @AccessFlag ;
  `int` `a.a.e.d$b.e` @AccessFlag ;
  `int` `a.a.e.d$b.f` @AccessFlag ;
  `b.c` `a.a.e.d$b.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.a.e.d$b.h` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.e.d$b.i` @AccessFlag PRIVATE;
  `boolean` `a.a.e.d$b.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.e.d$b` v2 @kind this, `int` v3 , `boolean` v4 , `b.c` v5 @kind object) @signature `La/a/e/d$b;.<init>:(IZLb/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L081210.  v1:= 0I;
  #L081212.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L081218.  v0:= 2147483647I;
  #L08121e.  v2.`a.a.e.d$b.i` @type ^`int` := v0;
  #L081222.  v0:= 8I;
  #L081226.  v0:= new `a.a.e.c`[v0];
  #L08122a.  v2.`a.a.e.d$b.c` @type ^`a.a.e.c`[] := v0 @kind object;
  #L08122e.  v0:= v2.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L081232.  v0:= length @variable v0;
  #L081234.  v0:= v0 + -1;
  #L081238.  v2.`a.a.e.d$b.d` @type ^`int` := v0;
  #L08123c.  v2.`a.a.e.d$b.e` @type ^`int` := v1;
  #L081240.  v2.`a.a.e.d$b.f` @type ^`int` := v1;
  #L081244.  v2.`a.a.e.d$b.a` @type ^`int` := v3;
  #L081248.  v2.`a.a.e.d$b.b` @type ^`int` := v3;
  #L08124c.  v2.`a.a.e.d$b.h` @type ^`boolean` := v4 @kind boolean;
  #L081250.  v2.`a.a.e.d$b.g` @type ^`b.c` := v5 @kind object;
  #L081254.  return @kind void;
}
procedure `void` `<init>`(`a.a.e.d$b` v2 @kind this, `b.c` v3 @kind object) @signature `La/a/e/d$b;.<init>:(Lb/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L081268.  v0:= 4096I;
  #L08126c.  v1:= 1I;
  #L08126e.  call `<init>`(v2, v0, v1, v3) @signature `La/a/e/d$b;.<init>:(IZLb/c;)V` @kind direct;
  #L081274.  return @kind void;
}
procedure `void` `a`(`a.a.e.d$b` v3 @kind this) @signature `La/a/e/d$b;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L081288.  v2:= 0I;
  #L08128a.  v0:= v3.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L08128e.  v1:= 0I;
  #L081290.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L081296.  v0:= v3.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L08129a.  v0:= length @variable v0;
  #L08129c.  v0:= v0 + -1;
  #L0812a0.  v3.`a.a.e.d$b.d` @type ^`int` := v0;
  #L0812a4.  v3.`a.a.e.d$b.e` @type ^`int` := v2;
  #L0812a8.  v3.`a.a.e.d$b.f` @type ^`int` := v2;
  #L0812ac.  return @kind void;
}
procedure `void` `a`(`a.a.e.d$b` v6 @kind this, `a.a.e.c` v7 @kind object) @signature `La/a/e/d$b;.a:(La/a/e/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0812c0.  v0:= v7.`a.a.e.c.i` @type ^`int`;
  #L0812c4.  v1:= v6.`a.a.e.d$b.b` @type ^`int`;
  #L0812c8.  if v0 <= v1 then goto L0812d4;
  #L0812cc.  call `a`(v6) @signature `La/a/e/d$b;.a:()V` @kind direct;
  #L0812d2.  return @kind void;
  #L0812d4.  v1:= v6.`a.a.e.d$b.f` @type ^`int`;
  #L0812d8.  v1:= v1 + v0 @kind int;
  #L0812da.  v2:= v6.`a.a.e.d$b.b` @type ^`int`;
  #L0812de.  v1:= v1 - v2 @kind int;
  #L0812e0.  call temp:= `b`(v6, v1) @signature `La/a/e/d$b;.b:(I)I` @kind direct;
  #L0812e6.  v1:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L0812ea.  v1:= v1 + 1;
  #L0812ee.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L0812f2.  v2:= length @variable v2;
  #L0812f4.  if v1 <= v2 then goto L081330;
  #L0812f8.  v1:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L0812fc.  v1:= length @variable v1;
  #L0812fe.  v1:= v1 * 2;
  #L081302.  v1:= new `a.a.e.c`[v1];
  #L081306.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L08130a.  v3:= 0I;
  #L08130c.  v4:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L081310.  v4:= length @variable v4;
  #L081312.  v5:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L081316.  v5:= length @variable v5;
  #L081318.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L08131e.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L081322.  v2:= length @variable v2;
  #L081324.  v2:= v2 + -1;
  #L081328.  v6.`a.a.e.d$b.d` @type ^`int` := v2;
  #L08132c.  v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] := v1 @kind object;
  #L081330.  v1:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L081334.  v2:= v1 + -1;
  #L081338.  v6.`a.a.e.d$b.d` @type ^`int` := v2;
  #L08133c.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L081340.  v2[v1]:= v7 @kind object;
  #L081344.  v1:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L081348.  v1:= v1 + 1;
  #L08134c.  v6.`a.a.e.d$b.e` @type ^`int` := v1;
  #L081350.  v1:= v6.`a.a.e.d$b.f` @type ^`int`;
  #L081354.  v0:= v0 + v1 @kind int;
  #L081356.  v6.`a.a.e.d$b.f` @type ^`int` := v0;
  #L08135a.  goto L0812d2;
}
procedure `int` `b`(`a.a.e.d$b` v6 @kind this, `int` v7 ) @signature `La/a/e/d$b;.b:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L08136c.  v1:= 0I;
  #L08136e.  if v7 <= 0 then goto L08140e;
  #L081372.  v0:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L081376.  v0:= length @variable v0;
  #L081378.  v0:= v0 + -1;
  #L08137c.  v2:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L081380.  if v0 < v2 then goto L0813c2;
  #L081384.  if v7 <= 0 then goto L0813c2;
  #L081388.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L08138c.  v2:= v2[v0] @kind object;
  #L081390.  v2:= v2.`a.a.e.c.i` @type ^`int`;
  #L081394.  v7:= v7 - v2 @kind int;
  #L081396.  v2:= v6.`a.a.e.d$b.f` @type ^`int`;
  #L08139a.  v3:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L08139e.  v3:= v3[v0] @kind object;
  #L0813a2.  v3:= v3.`a.a.e.c.i` @type ^`int`;
  #L0813a6.  v2:= v2 - v3 @kind int;
  #L0813a8.  v6.`a.a.e.d$b.f` @type ^`int` := v2;
  #L0813ac.  v2:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L0813b0.  v2:= v2 + -1;
  #L0813b4.  v6.`a.a.e.d$b.e` @type ^`int` := v2;
  #L0813b8.  v1:= v1 + 1;
  #L0813bc.  v0:= v0 + -1;
  #L0813c0.  goto L08137c;
  #L0813c2.  v0:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L0813c6.  v2:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L0813ca.  v2:= v2 + 1;
  #L0813ce.  v3:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L0813d2.  v4:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L0813d6.  v4:= v4 + 1;
  #L0813da.  v4:= v4 + v1 @kind int;
  #L0813dc.  v5:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L0813e0.  call `arraycopy`(v0, v2, v3, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L0813e6.  v0:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L0813ea.  v2:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L0813ee.  v2:= v2 + 1;
  #L0813f2.  v3:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L0813f6.  v3:= v3 + 1;
  #L0813fa.  v3:= v3 + v1 @kind int;
  #L0813fc.  v4:= 0I;
  #L0813fe.  call `fill`(v0, v2, v3, v4) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L081404.  v0:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L081408.  v0:= v0 + v1 @kind int;
  #L08140a.  v6.`a.a.e.d$b.d` @type ^`int` := v0;
  #L08140e.  return v1;
}
procedure `void` `b`(`a.a.e.d$b` v2 @kind this) @signature `La/a/e/d$b;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L081420.  v0:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L081424.  v1:= v2.`a.a.e.d$b.f` @type ^`int`;
  #L081428.  if v0 >= v1 then goto L08143a;
  #L08142c.  v0:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L081430.  if v0 != 0 then goto L08143c;
  #L081434.  call `a`(v2) @signature `La/a/e/d$b;.a:()V` @kind direct;
  #L08143a.  return @kind void;
  #L08143c.  v0:= v2.`a.a.e.d$b.f` @type ^`int`;
  #L081440.  v1:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L081444.  v0:= v0 - v1 @kind int;
  #L081446.  call temp:= `b`(v2, v0) @signature `La/a/e/d$b;.b:(I)I` @kind direct;
  #L08144c.  goto L08143a;
}
procedure `void` `a`(`a.a.e.d$b` v2 @kind this, `int` v3 ) @signature `La/a/e/d$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L081460.  v2.`a.a.e.d$b.a` @type ^`int` := v3;
  #L081464.  v0:= 16384I;
  #L081468.  call temp:= `min`(v3, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L08146e.  v0:= temp;
  #L081470.  v1:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L081474.  if v1 != v0 then goto L08147a;
  #L081478.  return @kind void;
  #L08147a.  v1:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L08147e.  if v0 >= v1 then goto L081492;
  #L081482.  v1:= v2.`a.a.e.d$b.i` @type ^`int`;
  #L081486.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L08148c.  v1:= temp;
  #L08148e.  v2.`a.a.e.d$b.i` @type ^`int` := v1;
  #L081492.  v1:= 1I;
  #L081494.  v2.`a.a.e.d$b.j` @type ^`boolean` := v1 @kind boolean;
  #L081498.  v2.`a.a.e.d$b.b` @type ^`int` := v0;
  #L08149c.  call `b`(v2) @signature `La/a/e/d$b;.b:()V` @kind direct;
  #L0814a2.  goto L081478;
}
procedure `void` `a`(`a.a.e.d$b` v3 @kind this, `int` v4 , `int` v5 , `int` v6 ) @signature `La/a/e/d$b;.a:(III)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L0814b4.  if v4 >= v5 then goto L0814c8;
  #L0814b8.  v0:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L0814bc.  v1:= v6 ^| v4 @kind int;
  #L0814c0.  call temp:= `b`(v0, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L0814c6.  return @kind void;
  #L0814c8.  v0:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L0814cc.  v1:= v6 ^| v5 @kind int;
  #L0814d0.  call temp:= `b`(v0, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L0814d6.  v0:= v4 - v5 @kind int;
  #L0814da.  v1:= 128I;
  #L0814de.  if v0 < v1 then goto L0814fa;
  #L0814e2.  v1:= v0 ^& 127;
  #L0814e6.  v2:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L0814ea.  v1:= v1 ^| 128;
  #L0814ee.  call temp:= `b`(v2, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L0814f4.  v0:= v0 ^>> 7;
  #L0814f8.  goto L0814da;
  #L0814fa.  v1:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L0814fe.  call temp:= `b`(v1, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L081504.  goto L0814c6;
}
procedure `void` `a`(`a.a.e.d$b` v4 @kind this, `b.f` v5 @kind object) @signature `La/a/e/d$b;.a:(Lb/f;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L081518.  v3:= 127I;
  #L08151c.  v0:= v4.`a.a.e.d$b.h` @type ^`boolean` @kind boolean;
  #L081520.  if v0 == 0 then goto L08157e;
  #L081524.  call temp:= `a`() @signature `La/a/e/k;.a:()La/a/e/k;` @kind static;
  #L08152a.  v0:= temp @kind object;
  #L08152c.  call temp:= `a`(v0, v5) @signature `La/a/e/k;.a:(Lb/f;)I` @kind virtual;
  #L081532.  v0:= temp;
  #L081534.  call temp:= `g`(v5) @signature `Lb/f;.g:()I` @kind virtual;
  #L08153a.  v1:= temp;
  #L08153c.  if v0 >= v1 then goto L08157e;
  #L081540.  v0:= new `b.c`;
  #L081544.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L08154a.  call temp:= `a`() @signature `La/a/e/k;.a:()La/a/e/k;` @kind static;
  #L081550.  v1:= temp @kind object;
  #L081552.  call `a`(v1, v5, v0) @signature `La/a/e/k;.a:(Lb/f;Lb/d;)V` @kind virtual;
  #L081558.  call temp:= `n`(v0) @signature `Lb/c;.n:()Lb/f;` @kind virtual;
  #L08155e.  v0:= temp @kind object;
  #L081560.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L081566.  v1:= temp;
  #L081568.  v2:= 128I;
  #L08156c.  call `a`(v4, v1, v3, v2) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L081572.  v1:= v4.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L081576.  call temp:= `a`(v1, v0) @signature `Lb/c;.a:(Lb/f;)Lb/c;` @kind virtual;
  #L08157c.  return @kind void;
  #L08157e.  call temp:= `g`(v5) @signature `Lb/f;.g:()I` @kind virtual;
  #L081584.  v0:= temp;
  #L081586.  v1:= 0I;
  #L081588.  call `a`(v4, v0, v3, v1) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L08158e.  v0:= v4.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L081592.  call temp:= `a`(v0, v5) @signature `Lb/c;.a:(Lb/f;)Lb/c;` @kind virtual;
  #L081598.  goto L08157c;
}
procedure `void` `a`(`a.a.e.d$b` v13 @kind this, `java.util.List` v14 @kind object) @signature `La/a/e/d$b;.a:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L0815ac.  v12:= 64I;
  #L0815b0.  v3:= 32I;
  #L0815b4.  v2:= 31I;
  #L0815b8.  v6:= 0I;
  #L0815ba.  v4:= -1I;
  #L0815bc.  v0:= v13.`a.a.e.d$b.j` @type ^`boolean` @kind boolean;
  #L0815c0.  if v0 == 0 then goto L0815f2;
  #L0815c4.  v0:= v13.`a.a.e.d$b.i` @type ^`int`;
  #L0815c8.  v1:= v13.`a.a.e.d$b.b` @type ^`int`;
  #L0815cc.  if v0 >= v1 then goto L0815da;
  #L0815d0.  v0:= v13.`a.a.e.d$b.i` @type ^`int`;
  #L0815d4.  call `a`(v13, v0, v2, v3) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L0815da.  v13.`a.a.e.d$b.j` @type ^`boolean` := v6 @kind boolean;
  #L0815de.  v0:= 2147483647I;
  #L0815e4.  v13.`a.a.e.d$b.i` @type ^`int` := v0;
  #L0815e8.  v0:= v13.`a.a.e.d$b.b` @type ^`int`;
  #L0815ec.  call `a`(v13, v0, v2, v3) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L0815f2.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L0815f8.  v7:= temp;
  #L0815fa.  v5:= v6;
  #L0815fc.  if v5 >= v7 then goto L08177c;
  #L081600.  call temp:= `get`(v14, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L081606.  v0:= temp @kind object;
  #L081608.  v0:= (`a.a.e.c`) v0 @kind object;
  #L08160c.  v1:= v0.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L081610.  call temp:= `f`(v1) @signature `Lb/f;.f:()Lb/f;` @kind virtual;
  #L081616.  v8:= temp @kind object;
  #L081618.  v9:= v0.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L08161c.  v1:= `@@a.a.e.d.b` @type ^`java.util.Map` @kind object;
  #L081620.  call temp:= `get`(v1, v8) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L081626.  v1:= temp @kind object;
  #L081628.  v1:= (`java.lang.Integer`) v1 @kind object;
  #L08162c.  if v1 == 0 then goto L081784;
  #L081630.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L081636.  v1:= temp;
  #L081638.  v1:= v1 + 1;
  #L08163c.  v2:= 1I;
  #L08163e.  if v1 <= v2 then goto L08177e;
  #L081642.  v2:= 8I;
  #L081646.  if v1 >= v2 then goto L08177e;
  #L08164a.  v2:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L08164e.  v3:= v1 + -1;
  #L081652.  v2:= v2[v3] @kind object;
  #L081656.  v2:= v2.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L08165a.  call temp:= `a`(v2, v9) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L081660.  v2:= temp;
  #L081662.  if v2 == 0 then goto L0816d8;
  #L081666.  v2:= v1;
  #L081668.  if v2 != v4 then goto L0816be;
  #L08166c.  v3:= v13.`a.a.e.d$b.d` @type ^`int`;
  #L081670.  v3:= v3 + 1;
  #L081674.  v10:= v13.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L081678.  v10:= length @variable v10;
  #L08167a.  if v3 >= v10 then goto L0816be;
  #L08167e.  v11:= v13.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L081682.  v11:= v11[v3] @kind object;
  #L081686.  v11:= v11.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L08168a.  call temp:= `a`(v11, v8) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L081690.  v11:= temp;
  #L081692.  if v11 == 0 then goto L08170a;
  #L081696.  v11:= v13.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L08169a.  v11:= v11[v3] @kind object;
  #L08169e.  v11:= v11.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L0816a2.  call temp:= `a`(v11, v9) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0816a8.  v11:= temp;
  #L0816aa.  if v11 == 0 then goto L0816f6;
  #L0816ae.  v2:= v13.`a.a.e.d$b.d` @type ^`int`;
  #L0816b2.  v2:= v3 - v2 @kind int;
  #L0816b6.  v3:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L0816ba.  v3:= length @variable v3;
  #L0816bc.  v2:= v2 + v3 @kind int;
  #L0816be.  if v2 == v4 then goto L081710;
  #L0816c2.  v0:= 127I;
  #L0816c6.  v1:= 128I;
  #L0816ca.  call `a`(v13, v2, v0, v1) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L0816d0.  v0:= v5 + 1;
  #L0816d4.  v5:= v0;
  #L0816d6.  goto L0815fc;
  #L0816d8.  v2:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L0816dc.  v2:= v2[v1] @kind object;
  #L0816e0.  v2:= v2.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L0816e4.  call temp:= `a`(v2, v9) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L0816ea.  v2:= temp;
  #L0816ec.  if v2 == 0 then goto L08177e;
  #L0816f0.  v2:= v1 + 1;
  #L0816f4.  goto L081668;
  #L0816f6.  if v1 != v4 then goto L08170a;
  #L0816fa.  v1:= v13.`a.a.e.d$b.d` @type ^`int`;
  #L0816fe.  v1:= v3 - v1 @kind int;
  #L081702.  v11:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L081706.  v11:= length @variable v11;
  #L081708.  v1:= v1 + v11 @kind int;
  #L08170a.  v3:= v3 + 1;
  #L08170e.  goto L08167a;
  #L081710.  if v1 != v4 then goto L081732;
  #L081714.  v1:= v13.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L081718.  call temp:= `b`(v1, v12) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L08171e.  call `a`(v13, v8) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L081724.  call `a`(v13, v9) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L08172a.  call `a`(v13, v0) @signature `La/a/e/d$b;.a:(La/a/e/c;)V` @kind direct;
  #L081730.  goto L0816d0;
  #L081732.  v2:= `@@a.a.e.c.a` @type ^`b.f` @kind object;
  #L081736.  call temp:= `a`(v8, v2) @signature `Lb/f;.a:(Lb/f;)Z` @kind virtual;
  #L08173c.  v2:= temp;
  #L08173e.  if v2 == 0 then goto L081764;
  #L081742.  v2:= `@@a.a.e.c.f` @type ^`b.f` @kind object;
  #L081746.  call temp:= `equals`(v2, v8) @signature `Lb/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08174c.  v2:= temp;
  #L08174e.  if v2 != 0 then goto L081764;
  #L081752.  v0:= 15I;
  #L081756.  call `a`(v13, v1, v0, v6) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L08175c.  call `a`(v13, v9) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L081762.  goto L0816d0;
  #L081764.  v2:= 63I;
  #L081768.  call `a`(v13, v1, v2, v12) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L08176e.  call `a`(v13, v9) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L081774.  call `a`(v13, v0) @signature `La/a/e/d$b;.a:(La/a/e/c;)V` @kind direct;
  #L08177a.  goto L0816d0;
  #L08177c.  return @kind void;
  #L08177e.  v2:= v4;
  #L081780.  goto L081668;
  #L081784.  v1:= v4;
  #L081786.  v2:= v4;
  #L081788.  goto L081668;
}
