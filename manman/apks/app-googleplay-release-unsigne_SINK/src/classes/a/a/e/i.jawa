record `a.a.e.i` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `a.a.e.i.a` @AccessFlag ;
  `long` `a.a.e.i.b` @AccessFlag ;
  `int` `a.a.e.i.c` @AccessFlag FINAL;
  `a.a.e.g` `a.a.e.i.d` @AccessFlag FINAL;
  `a.a.e.i$a` `a.a.e.i.e` @AccessFlag FINAL;
  `a.a.e.i$c` `a.a.e.i.f` @AccessFlag FINAL;
  `a.a.e.i$c` `a.a.e.i.g` @AccessFlag FINAL;
  `a.a.e.b` `a.a.e.i.h` @AccessFlag ;
  `java.util.List` `a.a.e.i.j` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `a.a.e.i.k` @AccessFlag PRIVATE;
  `boolean` `a.a.e.i.l` @AccessFlag PRIVATE;
  `a.a.e.i$b` `a.a.e.i.m` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.a.e.i.i` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/e/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L085bb8.  v0:= constclass @type ^`a.a.e.i` @kind object;
  #L085bbc.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L085bc2.  v0:= temp;
  #L085bc4.  if v0 != 0 then goto L085bd0;
  #L085bc8.  v0:= 1I;
  #L085bca.  `@@a.a.e.i.i` @type ^`boolean` := v0 @kind boolean;
  #L085bce.  return @kind void;
  #L085bd0.  v0:= 0I;
  #L085bd2.  goto L085bca;
}
procedure `void` `<init>`(`a.a.e.i` v4 @kind this, `int` v5 , `a.a.e.g` v6 @kind object, `boolean` v7 , `boolean` v8 , `java.util.List` v9 @kind object) @signature `La/a/e/i;.<init>:(ILa/a/e/g;ZZLjava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L085be4.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L085bea.  v0:= 0L;
  #L085bee.  v4.`a.a.e.i.a` @type ^`long` := v0 @kind wide;
  #L085bf2.  v0:= new `a.a.e.i$c`;
  #L085bf6.  call `<init>`(v0, v4) @signature `La/a/e/i$c;.<init>:(La/a/e/i;)V` @kind direct;
  #L085bfc.  v4.`a.a.e.i.f` @type ^`a.a.e.i$c` := v0 @kind object;
  #L085c00.  v0:= new `a.a.e.i$c`;
  #L085c04.  call `<init>`(v0, v4) @signature `La/a/e/i$c;.<init>:(La/a/e/i;)V` @kind direct;
  #L085c0a.  v4.`a.a.e.i.g` @type ^`a.a.e.i$c` := v0 @kind object;
  #L085c0e.  v0:= 0I;
  #L085c10.  v4.`a.a.e.i.h` @type ^`a.a.e.b` := v0 @kind object;
  #L085c14.  if v6 != 0 then goto L085c28;
  #L085c18.  v0:= new `java.lang.NullPointerException`;
  #L085c1c.  v1:= "connection == null" @kind object;
  #L085c20.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L085c26.  throw v0;
  #L085c28.  if v9 != 0 then goto L085c3c;
  #L085c2c.  v0:= new `java.lang.NullPointerException`;
  #L085c30.  v1:= "requestHeaders == null" @kind object;
  #L085c34.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L085c3a.  throw v0;
  #L085c3c.  v4.`a.a.e.i.c` @type ^`int` := v5;
  #L085c40.  v4.`a.a.e.i.d` @type ^`a.a.e.g` := v6 @kind object;
  #L085c44.  v0:= v6.`a.a.e.g.m` @type ^`a.a.e.n` @kind object;
  #L085c48.  call temp:= `d`(v0) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L085c4e.  v0:= temp;
  #L085c50.  v0:= (`long`) v0 @kind i2l;
  #L085c52.  v4.`a.a.e.i.b` @type ^`long` := v0 @kind wide;
  #L085c56.  v0:= new `a.a.e.i$b`;
  #L085c5a.  v1:= v6.`a.a.e.g.l` @type ^`a.a.e.n` @kind object;
  #L085c5e.  call temp:= `d`(v1) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L085c64.  v1:= temp;
  #L085c66.  v2:= (`long`) v1 @kind i2l;
  #L085c68.  call `<init>`(v0, v4, v2) @signature `La/a/e/i$b;.<init>:(La/a/e/i;J)V` @kind direct;
  #L085c6e.  v4.`a.a.e.i.m` @type ^`a.a.e.i$b` := v0 @kind object;
  #L085c72.  v0:= new `a.a.e.i$a`;
  #L085c76.  call `<init>`(v0, v4) @signature `La/a/e/i$a;.<init>:(La/a/e/i;)V` @kind direct;
  #L085c7c.  v4.`a.a.e.i.e` @type ^`a.a.e.i$a` := v0 @kind object;
  #L085c80.  v0:= v4.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L085c84.  v0.`a.a.e.i$b.b` @type ^`boolean` := v8 @kind boolean;
  #L085c88.  v0:= v4.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L085c8c.  v0.`a.a.e.i$a.b` @type ^`boolean` := v7 @kind boolean;
  #L085c90.  v4.`a.a.e.i.j` @type ^`java.util.List` := v9 @kind object;
  #L085c94.  return @kind void;
}
procedure `boolean` `d`(`a.a.e.i` v2 @kind this, `a.a.e.b` v3 @kind object) @signature `La/a/e/i;.d:(La/a/e/b;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L085ca8.  v0:= 0I;
  #L085caa.  v1:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L085cae.  if v1 != 0 then goto L085cca;
  #L085cb2.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L085cb8.  v1:= temp;
  #L085cba.  if v1 == 0 then goto L085cca;
  #L085cbe.  v0:= new `java.lang.AssertionError`;
  #L085cc2.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L085cc8.  throw v0;
  #L085cca.  @monitorenter v2
  #Try_start0.  
  #L085ccc.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L085cd0.  if v1 == 0 then goto L085cd8;
  #L085cd4.  @monitorexit v2
  #L085cd6.  return v0;
  #L085cd8.  v1:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L085cdc.  v1:= v1.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L085ce0.  if v1 == 0 then goto L085cfa;
  #L085ce4.  v1:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L085ce8.  v1:= v1.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L085cec.  if v1 == 0 then goto L085cfa;
  #L085cf0.  @monitorexit v2
  #L085cf2.  goto L085cd6;
  #L085cf4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L085cf6.  @monitorexit v2
  #Try_end0.  
  #L085cf8.  throw v0;
  #Try_start1.  
  #L085cfa.  v2.`a.a.e.i.h` @type ^`a.a.e.b` := v3 @kind object;
  #L085cfe.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L085d04.  @monitorexit v2
  #Try_end1.  
  #L085d06.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L085d0a.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L085d0e.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L085d14.  v0:= 1I;
  #L085d16.  goto L085cd6;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L085cf4;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L085cf4;
}
procedure `int` `a`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L085d3c.  v0:= v1.`a.a.e.i.c` @type ^`int`;
  #L085d40.  return v0;
}
procedure `void` `a`(`a.a.e.i` v3 @kind this, `long` v4 ) @signature `La/a/e/i;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L085d54.  v0:= v3.`a.a.e.i.b` @type ^`long` @kind wide;
  #L085d58.  v0:= v0 + v4 @kind long;
  #L085d5a.  v3.`a.a.e.i.b` @type ^`long` := v0 @kind wide;
  #L085d5e.  v0:= 0L;
  #L085d62.  v0:= lcmp(v4, v0);
  #L085d66.  if v0 <= 0 then goto L085d70;
  #L085d6a.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L085d70.  return @kind void;
}
procedure `void` `a`(`a.a.e.i` v2 @kind this, `a.a.e.b` v3 @kind object) @signature `La/a/e/i;.a:(La/a/e/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L085d84.  call temp:= `d`(v2, v3) @signature `La/a/e/i;.d:(La/a/e/b;)Z` @kind direct;
  #L085d8a.  v0:= temp;
  #L085d8c.  if v0 != 0 then goto L085d92;
  #L085d90.  return @kind void;
  #L085d92.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L085d96.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L085d9a.  call `b`(v0, v1, v3) @signature `La/a/e/g;.b:(ILa/a/e/b;)V` @kind virtual;
  #L085da0.  goto L085d90;
}
procedure `void` `a`(`a.a.e.i` v4 @kind this, `b.e` v5 @kind object, `int` v6 ) @signature `La/a/e/i;.a:(Lb/e;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L085db4.  v0:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L085db8.  if v0 != 0 then goto L085dd4;
  #L085dbc.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L085dc2.  v0:= temp;
  #L085dc4.  if v0 == 0 then goto L085dd4;
  #L085dc8.  v0:= new `java.lang.AssertionError`;
  #L085dcc.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L085dd2.  throw v0;
  #L085dd4.  v0:= v4.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L085dd8.  v2:= (`long`) v6 @kind i2l;
  #L085dda.  call `a`(v0, v5, v2) @signature `La/a/e/i$b;.a:(Lb/e;J)V` @kind virtual;
  #L085de0.  return @kind void;
}
procedure `void` `a`(`a.a.e.i` v3 @kind this, `java.util.List` v4 @kind object) @signature `La/a/e/i;.a:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L085df4.  v0:= 1I;
  #L085df6.  v1:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L085dfa.  if v1 != 0 then goto L085e16;
  #L085dfe.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L085e04.  v1:= temp;
  #L085e06.  if v1 == 0 then goto L085e16;
  #L085e0a.  v0:= new `java.lang.AssertionError`;
  #L085e0e.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L085e14.  throw v0;
  #L085e16.  @monitorenter v3
  #L085e18.  v1:= 1I;
  #Try_start0.  
  #L085e1a.  v3.`a.a.e.i.l` @type ^`boolean` := v1 @kind boolean;
  #L085e1e.  v1:= v3.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L085e22.  if v1 != 0 then goto L085e4e;
  #L085e26.  v3.`a.a.e.i.k` @type ^`java.util.List` := v4 @kind object;
  #L085e2a.  call temp:= `b`(v3) @signature `La/a/e/i;.b:()Z` @kind virtual;
  #L085e30.  v0:= temp;
  #L085e32.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L085e38.  @monitorexit v3
  #Try_end0.  
  #L085e3a.  if v0 != 0 then goto L085e4c;
  #L085e3e.  v0:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L085e42.  v1:= v3.`a.a.e.i.c` @type ^`int`;
  #L085e46.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L085e4c.  return @kind void;
  #Try_start1.  
  #L085e4e.  v1:= new `java.util.ArrayList`;
  #L085e52.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L085e58.  v2:= v3.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L085e5c.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L085e62.  v2:= 0I;
  #L085e64.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L085e6a.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L085e70.  v3.`a.a.e.i.k` @type ^`java.util.List` := v1 @kind object;
  #L085e74.  goto L085e38;
  #L085e76.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L085e78.  @monitorexit v3
  #Try_end1.  
  #L085e7a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L085e76;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L085e76;
}
procedure `void` `b`(`a.a.e.i` v2 @kind this, `a.a.e.b` v3 @kind object) @signature `La/a/e/i;.b:(La/a/e/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L085ea0.  call temp:= `d`(v2, v3) @signature `La/a/e/i;.d:(La/a/e/b;)Z` @kind direct;
  #L085ea6.  v0:= temp;
  #L085ea8.  if v0 != 0 then goto L085eae;
  #L085eac.  return @kind void;
  #L085eae.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L085eb2.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L085eb6.  call `a`(v0, v1, v3) @signature `La/a/e/g;.a:(ILa/a/e/b;)V` @kind virtual;
  #L085ebc.  goto L085eac;
}
procedure `boolean` `b`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L085ed0.  v0:= 0I;
  #L085ed2.  @monitorenter v2
  #Try_start0.  
  #L085ed4.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #Try_end0.  
  #L085ed8.  if v1 == 0 then goto L085ee0;
  #L085edc.  @monitorexit v2
  #L085ede.  return v0;
  #Try_start1.  
  #L085ee0.  v1:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L085ee4.  v1:= v1.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L085ee8.  if v1 != 0 then goto L085ef8;
  #L085eec.  v1:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L085ef0.  v1:= v1.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L085ef4.  if v1 == 0 then goto L085f18;
  #L085ef8.  v1:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L085efc.  v1:= v1.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L085f00.  if v1 != 0 then goto L085f10;
  #L085f04.  v1:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L085f08.  v1:= v1.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L085f0c.  if v1 == 0 then goto L085f18;
  #L085f10.  v1:= v2.`a.a.e.i.l` @type ^`boolean` @kind boolean;
  #Try_end1.  
  #L085f14.  if v1 != 0 then goto L085edc;
  #L085f18.  v0:= 1I;
  #L085f1a.  goto L085edc;
  #L085f1c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L085f1e.  @monitorexit v2
  #L085f20.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L085f1c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L085f1c;
}
procedure `void` `c`(`a.a.e.i` v1 @kind this, `a.a.e.b` v2 @kind object) @signature `La/a/e/i;.c:(La/a/e/b;)V` @AccessFlag  {
    temp;
    v0;

  #L085f48.  @monitorenter v1
  #Try_start0.  
  #L085f4a.  v0:= v1.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L085f4e.  if v0 != 0 then goto L085f5c;
  #L085f52.  v1.`a.a.e.i.h` @type ^`a.a.e.b` := v2 @kind object;
  #L085f56.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #Try_end0.  
  #L085f5c.  @monitorexit v1
  #L085f5e.  return @kind void;
  #L085f60.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L085f62.  @monitorexit v1
  #L085f64.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L085f60;
}
procedure `boolean` `c`(`a.a.e.i` v4 @kind this) @signature `La/a/e/i;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L085f84.  v2:= 0I;
  #L085f86.  v1:= 1I;
  #L085f88.  v0:= v4.`a.a.e.i.c` @type ^`int`;
  #L085f8c.  v0:= v0 ^& 1;
  #L085f90.  if v0 != v1 then goto L085fa4;
  #L085f94.  v0:= v1;
  #L085f96.  v3:= v4.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L085f9a.  v3:= v3.`a.a.e.g.b` @type ^`boolean` @kind boolean;
  #L085f9e.  if v3 != v0 then goto L085fa8;
  #L085fa2.  return v1;
  #L085fa4.  v0:= v2;
  #L085fa6.  goto L085f96;
  #L085fa8.  v1:= v2;
  #L085faa.  goto L085fa2;
}
procedure `java.util.List` `d`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.d:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L085fbc.  @monitorenter v2
  #Try_start0.  
  #L085fbe.  call temp:= `c`(v2) @signature `La/a/e/i;.c:()Z` @kind virtual;
  #L085fc4.  v0:= temp;
  #L085fc6.  if v0 != 0 then goto L085fe0;
  #L085fca.  v0:= new `java.lang.IllegalStateException`;
  #L085fce.  v1:= "servers cannot read response headers" @kind object;
  #L085fd2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L085fd8.  throw v0;
  #Try_end0.  
  #L085fda.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L085fdc.  @monitorexit v2
  #L085fde.  throw v0;
  #Try_start1.  
  #L085fe0.  v0:= v2.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L085fe4.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_end1.  
  #Try_start2.  
  #L085fea.  v0:= v2.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L085fee.  if v0 != 0 then goto L086010;
  #L085ff2.  v0:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L085ff6.  if v0 != 0 then goto L086010;
  #L085ffa.  call `l`(v2) @signature `La/a/e/i;.l:()V` @kind virtual;
  #Try_end2.  
  #L086000.  goto L085fea;
  #L086002.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L086004.  v1:= v2.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L086008.  call `b`(v1) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L08600e.  throw v0;
  #L086010.  v0:= v2.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L086014.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L08601a.  v0:= v2.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L08601e.  if v0 == 0 then goto L08602c;
  #L086022.  v1:= 0I;
  #L086024.  v2.`a.a.e.i.k` @type ^`java.util.List` := v1 @kind object;
  #Try_end3.  
  #L086028.  @monitorexit v2
  #L08602a.  return v0 @kind object;
  #Try_start4.  
  #L08602c.  v0:= new `a.a.e.o`;
  #L086030.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L086034.  call `<init>`(v0, v1) @signature `La/a/e/o;.<init>:(La/a/e/b;)V` @kind direct;
  #L08603a.  throw v0;
  #Try_end4.  
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L085fda;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L085fda;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L086002;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L085fda;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L085fda;
}
procedure `b.s` `e`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.e:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08607c.  v0:= v1.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L086080.  return v0 @kind object;
}
procedure `b.s` `f`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.f:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L086094.  v0:= v1.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L086098.  return v0 @kind object;
}
procedure `b.r` `g`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.g:()Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0860ac.  v0:= v1.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L0860b0.  return v0 @kind object;
}
procedure `b.q` `h`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.h:()Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0860c4.  @monitorenter v2
  #Try_start0.  
  #L0860c6.  v0:= v2.`a.a.e.i.l` @type ^`boolean` @kind boolean;
  #L0860ca.  if v0 != 0 then goto L0860f0;
  #L0860ce.  call temp:= `c`(v2) @signature `La/a/e/i;.c:()Z` @kind virtual;
  #L0860d4.  v0:= temp;
  #L0860d6.  if v0 != 0 then goto L0860f0;
  #L0860da.  v0:= new `java.lang.IllegalStateException`;
  #L0860de.  v1:= "reply before requesting the sink" @kind object;
  #L0860e2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0860e8.  throw v0;
  #L0860ea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0860ec.  @monitorexit v2
  #Try_end0.  
  #L0860ee.  throw v0;
  #Try_start1.  
  #L0860f0.  @monitorexit v2
  #Try_end1.  
  #L0860f2.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L0860f6.  return v0 @kind object;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0860ea;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0860ea;
}
procedure `void` `i`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.i:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L08611c.  v0:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L086120.  if v0 != 0 then goto L08613c;
  #L086124.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L08612a.  v0:= temp;
  #L08612c.  if v0 == 0 then goto L08613c;
  #L086130.  v0:= new `java.lang.AssertionError`;
  #L086134.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L08613a.  throw v0;
  #L08613c.  @monitorenter v2
  #Try_start0.  
  #L08613e.  v0:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L086142.  v1:= 1I;
  #L086144.  v0.`a.a.e.i$b.b` @type ^`boolean` := v1 @kind boolean;
  #L086148.  call temp:= `b`(v2) @signature `La/a/e/i;.b:()Z` @kind virtual;
  #L08614e.  v0:= temp;
  #L086150.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L086156.  @monitorexit v2
  #Try_end0.  
  #L086158.  if v0 != 0 then goto L08616a;
  #L08615c.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L086160.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L086164.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L08616a.  return @kind void;
  #L08616c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L08616e.  @monitorexit v2
  #Try_end1.  
  #L086170.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08616c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08616c;
}
procedure `void` `j`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.j:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L086198.  v0:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L08619c.  if v0 != 0 then goto L0861b8;
  #L0861a0.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L0861a6.  v0:= temp;
  #L0861a8.  if v0 == 0 then goto L0861b8;
  #L0861ac.  v0:= new `java.lang.AssertionError`;
  #L0861b0.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0861b6.  throw v0;
  #L0861b8.  @monitorenter v2
  #Try_start0.  
  #L0861ba.  v0:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L0861be.  v0:= v0.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L0861c2.  if v0 != 0 then goto L086206;
  #L0861c6.  v0:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L0861ca.  v0:= v0.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L0861ce.  if v0 == 0 then goto L086206;
  #L0861d2.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L0861d6.  v0:= v0.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L0861da.  if v0 != 0 then goto L0861ea;
  #L0861de.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L0861e2.  v0:= v0.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L0861e6.  if v0 == 0 then goto L086206;
  #L0861ea.  v0:= 1I;
  #L0861ec.  call temp:= `b`(v2) @signature `La/a/e/i;.b:()Z` @kind virtual;
  #L0861f2.  v1:= temp;
  #L0861f4.  @monitorexit v2
  #Try_end0.  
  #L0861f6.  if v0 == 0 then goto L086210;
  #L0861fa.  v0:= `@@a.a.e.b.f` @type ^`a.a.e.b` @kind object;
  #L0861fe.  call `a`(v2, v0) @signature `La/a/e/i;.a:(La/a/e/b;)V` @kind virtual;
  #L086204.  return @kind void;
  #L086206.  v0:= 0I;
  #L086208.  goto L0861ec;
  #L08620a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L08620c.  @monitorexit v2
  #Try_end1.  
  #L08620e.  throw v0;
  #L086210.  if v1 != 0 then goto L086204;
  #L086214.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L086218.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L08621c.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L086222.  goto L086204;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08620a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08620a;
}
procedure `void` `k`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L086248.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L08624c.  v0:= v0.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L086250.  if v0 == 0 then goto L086264;
  #L086254.  v0:= new `java.io.IOException`;
  #L086258.  v1:= "stream closed" @kind object;
  #L08625c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L086262.  throw v0;
  #L086264.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L086268.  v0:= v0.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L08626c.  if v0 == 0 then goto L086280;
  #L086270.  v0:= new `java.io.IOException`;
  #L086274.  v1:= "stream finished" @kind object;
  #L086278.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08627e.  throw v0;
  #L086280.  v0:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L086284.  if v0 == 0 then goto L086298;
  #L086288.  v0:= new `a.a.e.o`;
  #L08628c.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L086290.  call `<init>`(v0, v1) @signature `La/a/e/o;.<init>:(La/a/e/b;)V` @kind direct;
  #L086296.  throw v0;
  #L086298.  return @kind void;
}
procedure `void` `l`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.l:()V` @AccessFlag  {
    temp;
    v0;

  #Try_start0.  
  #L0862ac.  call `wait`(v1) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #Try_end0.  
  #L0862b2.  return @kind void;
  #L0862b4.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L0862b6.  v0:= new `java.io.InterruptedIOException`;
  #L0862ba.  call `<init>`(v0) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L0862c0.  throw v0;
  catch `java.lang.InterruptedException` @[Try_start0..Try_end0] goto L0862b4;
}
