record `a.a.e.j` @kind class @AccessFlag FINAL extends `java.io.Closeable` @kind interface {
  `a.a.e.d$b` `a.a.e.j.a` @AccessFlag FINAL;
  `b.d` `a.a.e.j.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.a.e.j.d` @AccessFlag PRIVATE_FINAL;
  `b.c` `a.a.e.j.e` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.e.j.f` @AccessFlag PRIVATE;
  `boolean` `a.a.e.j.g` @AccessFlag PRIVATE;
}
global `java.util.logging.Logger` `@@a.a.e.j.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/a/e/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L0862e4.  v0:= constclass @type ^`a.a.e.e` @kind object;
  #L0862e8.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L0862ee.  v0:= temp @kind object;
  #L0862f0.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L0862f6.  v0:= temp @kind object;
  #L0862f8.  `@@a.a.e.j.b` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L0862fc.  return @kind void;
}
procedure `void` `<init>`(`a.a.e.j` v2 @kind this, `b.d` v3 @kind object, `boolean` v4 ) @signature `La/a/e/j;.<init>:(Lb/d;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L086310.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L086316.  v2.`a.a.e.j.c` @type ^`b.d` := v3 @kind object;
  #L08631a.  v2.`a.a.e.j.d` @type ^`boolean` := v4 @kind boolean;
  #L08631e.  v0:= new `b.c`;
  #L086322.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L086328.  v2.`a.a.e.j.e` @type ^`b.c` := v0 @kind object;
  #L08632c.  v0:= new `a.a.e.d$b`;
  #L086330.  v1:= v2.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L086334.  call `<init>`(v0, v1) @signature `La/a/e/d$b;.<init>:(Lb/c;)V` @kind direct;
  #L08633a.  v2.`a.a.e.j.a` @type ^`a.a.e.d$b` := v0 @kind object;
  #L08633e.  v0:= 16384I;
  #L086342.  v2.`a.a.e.j.f` @type ^`int` := v0;
  #L086346.  return @kind void;
}
procedure `void` `a`(`b.d` v1 @kind object, `int` v2 ) @signature `La/a/e/j;.a:(Lb/d;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L086358.  v0:= v2 ^>> 16;
  #L08635c.  v0:= v0 ^& 255;
  #L086360.  call temp:= `i`(v1, v0) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L086366.  v0:= v2 ^>> 8;
  #L08636a.  v0:= v0 ^& 255;
  #L08636e.  call temp:= `i`(v1, v0) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L086374.  v0:= v2 ^& 255;
  #L086378.  call temp:= `i`(v1, v0) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L08637e.  return @kind void;
}
procedure `void` `b`(`a.a.e.j` v8 @kind this, `int` v9 , `long` v10 ) @signature `La/a/e/j;.b:(IJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L086390.  v6:= 0L;
  #L086394.  v0:= lcmp(v10, v6);
  #L086398.  if v0 <= 0 then goto L0863da;
  #L08639c.  v0:= v8.`a.a.e.j.f` @type ^`int`;
  #L0863a0.  v0:= (`long`) v0 @kind i2l;
  #L0863a2.  call temp:= `min`(v0, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L0863a8.  v0:= temp @kind wide;
  #L0863aa.  v1:= (`int`) v0 @kind l2i;
  #L0863ac.  v2:= (`long`) v1 @kind i2l;
  #L0863ae.  v10:= v10 - v2 @kind long;
  #L0863b0.  v2:= 9I;
  #L0863b4.  v0:= lcmp(v10, v6);
  #L0863b8.  if v0 != 0 then goto L0863d6;
  #L0863bc.  v0:= 4I;
  #L0863be.  call `a`(v8, v9, v1, v2, v0) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L0863c4.  v0:= v8.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L0863c8.  v2:= v8.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L0863cc.  v4:= (`long`) v1 @kind i2l;
  #L0863ce.  call `a_`(v0, v2, v4) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L0863d4.  goto L086394;
  #L0863d6.  v0:= 0I;
  #L0863d8.  goto L0863be;
  #L0863da.  return @kind void;
}
procedure `void` `a`(`a.a.e.j` v5 @kind this) @signature `La/a/e/j;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0863ec.  @monitorenter v5
  #Try_start0.  
  #L0863ee.  v0:= v5.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L0863f2.  if v0 == 0 then goto L08640c;
  #L0863f6.  v0:= new `java.io.IOException`;
  #L0863fa.  v1:= "closed" @kind object;
  #L0863fe.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L086404.  throw v0;
  #Try_end0.  
  #L086406.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L086408.  @monitorexit v5
  #L08640a.  throw v0;
  #Try_start1.  
  #L08640c.  v0:= v5.`a.a.e.j.d` @type ^`boolean` @kind boolean;
  #Try_end1.  
  #L086410.  if v0 != 0 then goto L086418;
  #L086414.  @monitorexit v5
  #L086416.  return @kind void;
  #Try_start2.  
  #L086418.  v0:= `@@a.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L08641c.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L086420.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L086426.  v0:= temp;
  #L086428.  if v0 == 0 then goto L08645a;
  #L08642c.  v0:= `@@a.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L086430.  v1:= ">> CONNECTION %s" @kind object;
  #L086434.  v2:= 1I;
  #L086436.  v2:= new `java.lang.Object`[v2];
  #L08643a.  v3:= 0I;
  #L08643c.  v4:= `@@a.a.e.e.a` @type ^`b.f` @kind object;
  #L086440.  call temp:= `e`(v4) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L086446.  v4:= temp @kind object;
  #L086448.  v2[v3]:= v4 @kind object;
  #L08644c.  call temp:= `a`(v1, v2) @signature `La/a/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L086452.  v1:= temp @kind object;
  #L086454.  call `fine`(v0, v1) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L08645a.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L08645e.  v1:= `@@a.a.e.e.a` @type ^`b.f` @kind object;
  #L086462.  call temp:= `h`(v1) @signature `Lb/f;.h:()[B` @kind virtual;
  #L086468.  v1:= temp @kind object;
  #L08646a.  call temp:= `c`(v0, v1) @signature `Lb/d;.c:([B)Lb/d;` @kind interface;
  #L086470.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L086474.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end2.  
  #L08647a.  goto L086414;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L086406;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L086406;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L086406;
}
procedure `void` `a`(`a.a.e.j` v4 @kind this, `int` v5 , `byte` v6 , `b.c` v7 @kind object, `int` v8 ) @signature `La/a/e/j;.a:(IBLb/c;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0864a8.  v0:= 0I;
  #L0864aa.  call `a`(v4, v5, v8, v0, v6) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L0864b0.  if v8 <= 0 then goto L0864c0;
  #L0864b4.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L0864b8.  v2:= (`long`) v8 @kind i2l;
  #L0864ba.  call `a_`(v0, v7, v2) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L0864c0.  return @kind void;
}
procedure `void` `a`(`a.a.e.j` v5 @kind this, `int` v6 , `int` v7 , `byte` v8 , `byte` v9 ) @signature `La/a/e/j;.a:(IIBB)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0864d4.  v4:= 1I;
  #L0864d6.  v3:= 0I;
  #L0864d8.  v0:= `@@a.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L0864dc.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L0864e0.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L0864e6.  v0:= temp;
  #L0864e8.  if v0 == 0 then goto L0864fe;
  #L0864ec.  v0:= `@@a.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L0864f0.  call temp:= `a`(v3, v6, v7, v8, v9) @signature `La/a/e/e;.a:(ZIIBB)Ljava/lang/String;` @kind static;
  #L0864f6.  v1:= temp @kind object;
  #L0864f8.  call `fine`(v0, v1) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L0864fe.  v0:= v5.`a.a.e.j.f` @type ^`int`;
  #L086502.  if v7 <= v0 then goto L086536;
  #L086506.  v0:= "FRAME_SIZE_ERROR length > %d: %d" @kind object;
  #L08650a.  v1:= 2I;
  #L08650c.  v1:= new `java.lang.Object`[v1];
  #L086510.  v2:= v5.`a.a.e.j.f` @type ^`int`;
  #L086514.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L08651a.  v2:= temp @kind object;
  #L08651c.  v1[v3]:= v2 @kind object;
  #L086520.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L086526.  v2:= temp @kind object;
  #L086528.  v1[v4]:= v2 @kind object;
  #L08652c.  call temp:= `a`(v0, v1) @signature `La/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L086532.  v0:= temp @kind object;
  #L086534.  throw v0;
  #L086536.  v0:= -2147483648I;
  #L08653a.  v0:= v0 ^& v6 @kind int;
  #L08653c.  if v0 == 0 then goto L08655e;
  #L086540.  v0:= "reserved bit set: %s" @kind object;
  #L086544.  v1:= new `java.lang.Object`[v4];
  #L086548.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L08654e.  v2:= temp @kind object;
  #L086550.  v1[v3]:= v2 @kind object;
  #L086554.  call temp:= `a`(v0, v1) @signature `La/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L08655a.  v0:= temp @kind object;
  #L08655c.  throw v0;
  #L08655e.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L086562.  call `a`(v0, v7) @signature `La/a/e/j;.a:(Lb/d;I)V` @kind static;
  #L086568.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L08656c.  v1:= v8 ^& 255;
  #L086570.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L086576.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L08657a.  v1:= v9 ^& 255;
  #L08657e.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L086584.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L086588.  v1:= 2147483647I;
  #L08658e.  v1:= v1 ^& v6 @kind int;
  #L086590.  call temp:= `g`(v0, v1) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L086596.  return @kind void;
}
procedure `void` `a`(`a.a.e.j` v8 @kind this, `int` v9 , `int` v10 , `java.util.List` v11 @kind object) @signature `La/a/e/j;.a:(IILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L0865a8.  @monitorenter v8
  #Try_start0.  
  #L0865aa.  v0:= v8.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L0865ae.  if v0 == 0 then goto L0865c8;
  #L0865b2.  v0:= new `java.io.IOException`;
  #L0865b6.  v1:= "closed" @kind object;
  #L0865ba.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0865c0.  throw v0;
  #Try_end0.  
  #L0865c2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0865c4.  @monitorexit v8
  #L0865c6.  throw v0;
  #Try_start1.  
  #L0865c8.  v0:= v8.`a.a.e.j.a` @type ^`a.a.e.d$b` @kind object;
  #L0865cc.  call `a`(v0, v11) @signature `La/a/e/d$b;.a:(Ljava/util/List;)V` @kind virtual;
  #L0865d2.  v0:= v8.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L0865d6.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L0865dc.  v2:= temp @kind wide;
  #L0865de.  v0:= v8.`a.a.e.j.f` @type ^`int`;
  #L0865e2.  v0:= v0 + -4;
  #L0865e6.  v0:= (`long`) v0 @kind i2l;
  #L0865e8.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L0865ee.  v0:= temp @kind wide;
  #L0865f0.  v1:= (`int`) v0 @kind l2i;
  #L0865f2.  v4:= 5I;
  #L0865f4.  v6:= (`long`) v1 @kind i2l;
  #L0865f6.  v0:= lcmp(v2, v6);
  #L0865fa.  if v0 != 0 then goto L086646;
  #L0865fe.  v0:= 4I;
  #L086600.  v5:= v1 + 4;
  #L086604.  call `a`(v8, v9, v5, v4, v0) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L08660a.  v0:= v8.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L08660e.  v4:= 2147483647I;
  #L086614.  v4:= v4 ^& v10 @kind int;
  #L086616.  call temp:= `g`(v0, v4) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L08661c.  v0:= v8.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L086620.  v4:= v8.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L086624.  v6:= (`long`) v1 @kind i2l;
  #L086626.  call `a_`(v0, v4, v6) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L08662c.  v4:= (`long`) v1 @kind i2l;
  #L08662e.  v0:= lcmp(v2, v4);
  #L086632.  if v0 <= 0 then goto L086642;
  #L086636.  v0:= (`long`) v1 @kind i2l;
  #L086638.  v0:= v2 - v0 @kind long;
  #L08663c.  call `b`(v8, v9, v0) @signature `La/a/e/j;.b:(IJ)V` @kind direct;
  #Try_end1.  
  #L086642.  @monitorexit v8
  #L086644.  return @kind void;
  #L086646.  v0:= 0I;
  #L086648.  goto L086600;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0865c2;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0865c2;
}
procedure `void` `a`(`a.a.e.j` v4 @kind this, `int` v5 , `long` v6 ) @signature `La/a/e/j;.a:(IJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L086670.  @monitorenter v4
  #Try_start0.  
  #L086672.  v0:= v4.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L086676.  if v0 == 0 then goto L086690;
  #L08667a.  v0:= new `java.io.IOException`;
  #L08667e.  v1:= "closed" @kind object;
  #L086682.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L086688.  throw v0;
  #Try_end0.  
  #L08668a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08668c.  @monitorexit v4
  #L08668e.  throw v0;
  #L086690.  v0:= 0L;
  #L086694.  v0:= lcmp(v6, v0);
  #L086698.  if v0 == 0 then goto L0866aa;
  #L08669c.  v0:= 2147483647L;
  #L0866a2.  v0:= lcmp(v6, v0);
  #L0866a6.  if v0 <= 0 then goto L0866cc;
  #Try_start1.  
  #L0866aa.  v0:= "windowSizeIncrement == 0 || windowSizeIncrement > 0x7fffffffL: %s" @kind object;
  #L0866ae.  v1:= 1I;
  #L0866b0.  v1:= new `java.lang.Object`[v1];
  #L0866b4.  v2:= 0I;
  #L0866b6.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L0866bc.  v3:= temp @kind object;
  #L0866be.  v1[v2]:= v3 @kind object;
  #L0866c2.  call temp:= `a`(v0, v1) @signature `La/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L0866c8.  v0:= temp @kind object;
  #L0866ca.  throw v0;
  #L0866cc.  v0:= 4I;
  #L0866ce.  v1:= 8I;
  #L0866d2.  v2:= 0I;
  #L0866d4.  call `a`(v4, v5, v0, v1, v2) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L0866da.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L0866de.  v1:= (`int`) v6 @kind l2i;
  #L0866e0.  call temp:= `g`(v0, v1) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L0866e6.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L0866ea.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L0866f0.  @monitorexit v4
  #L0866f2.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08668a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08668a;
}
procedure `void` `a`(`a.a.e.j` v3 @kind this, `int` v4 , `a.a.e.b` v5 @kind object) @signature `La/a/e/j;.a:(ILa/a/e/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L086718.  @monitorenter v3
  #Try_start0.  
  #L08671a.  v0:= v3.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L08671e.  if v0 == 0 then goto L086738;
  #L086722.  v0:= new `java.io.IOException`;
  #L086726.  v1:= "closed" @kind object;
  #L08672a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L086730.  throw v0;
  #Try_end0.  
  #L086732.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L086734.  @monitorexit v3
  #L086736.  throw v0;
  #Try_start1.  
  #L086738.  v0:= v5.`a.a.e.b.g` @type ^`int`;
  #L08673c.  v1:= -1I;
  #L08673e.  if v0 != v1 then goto L08674e;
  #L086742.  v0:= new `java.lang.IllegalArgumentException`;
  #L086746.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L08674c.  throw v0;
  #L08674e.  v0:= 4I;
  #L086750.  v1:= 3I;
  #L086752.  v2:= 0I;
  #L086754.  call `a`(v3, v4, v0, v1, v2) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L08675a.  v0:= v3.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L08675e.  v1:= v5.`a.a.e.b.g` @type ^`int`;
  #L086762.  call temp:= `g`(v0, v1) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L086768.  v0:= v3.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L08676c.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L086772.  @monitorexit v3
  #L086774.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L086732;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L086732;
}
procedure `void` `a`(`a.a.e.j` v4 @kind this, `int` v5 , `a.a.e.b` v6 @kind object, `byte`[] v7 @kind object) @signature `La/a/e/j;.a:(ILa/a/e/b;[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08679c.  @monitorenter v4
  #Try_start0.  
  #L08679e.  v0:= v4.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L0867a2.  if v0 == 0 then goto L0867bc;
  #L0867a6.  v0:= new `java.io.IOException`;
  #L0867aa.  v1:= "closed" @kind object;
  #L0867ae.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0867b4.  throw v0;
  #Try_end0.  
  #L0867b6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0867b8.  @monitorexit v4
  #L0867ba.  throw v0;
  #Try_start1.  
  #L0867bc.  v0:= v6.`a.a.e.b.g` @type ^`int`;
  #L0867c0.  v1:= -1I;
  #L0867c2.  if v0 != v1 then goto L0867da;
  #L0867c6.  v0:= "errorCode.httpCode == -1" @kind object;
  #L0867ca.  v1:= 0I;
  #L0867cc.  v1:= new `java.lang.Object`[v1];
  #L0867d0.  call temp:= `a`(v0, v1) @signature `La/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L0867d6.  v0:= temp @kind object;
  #L0867d8.  throw v0;
  #L0867da.  v0:= length @variable v7;
  #L0867dc.  v0:= v0 + 8;
  #L0867e0.  v1:= 7I;
  #L0867e2.  v2:= 0I;
  #L0867e4.  v3:= 0I;
  #L0867e6.  call `a`(v4, v3, v0, v1, v2) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L0867ec.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L0867f0.  call temp:= `g`(v0, v5) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L0867f6.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L0867fa.  v1:= v6.`a.a.e.b.g` @type ^`int`;
  #L0867fe.  call temp:= `g`(v0, v1) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L086804.  v0:= length @variable v7;
  #L086806.  if v0 <= 0 then goto L086814;
  #L08680a.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L08680e.  call temp:= `c`(v0, v7) @signature `Lb/d;.c:([B)Lb/d;` @kind interface;
  #L086814.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L086818.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L08681e.  @monitorexit v4
  #L086820.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0867b6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0867b6;
}
procedure `void` `a`(`a.a.e.j` v4 @kind this, `a.a.e.n` v5 @kind object) @signature `La/a/e/j;.a:(La/a/e/n;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L086848.  @monitorenter v4
  #Try_start0.  
  #L08684a.  v0:= v4.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L08684e.  if v0 == 0 then goto L086868;
  #L086852.  v0:= new `java.io.IOException`;
  #L086856.  v1:= "closed" @kind object;
  #L08685a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L086860.  throw v0;
  #Try_end0.  
  #L086862.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L086864.  @monitorexit v4
  #L086866.  throw v0;
  #Try_start1.  
  #L086868.  v0:= v4.`a.a.e.j.f` @type ^`int`;
  #L08686c.  call temp:= `d`(v5, v0) @signature `La/a/e/n;.d:(I)I` @kind virtual;
  #L086872.  v0:= temp;
  #L086874.  v4.`a.a.e.j.f` @type ^`int` := v0;
  #L086878.  call temp:= `c`(v5) @signature `La/a/e/n;.c:()I` @kind virtual;
  #L08687e.  v0:= temp;
  #L086880.  v1:= -1I;
  #L086882.  if v0 == v1 then goto L086898;
  #L086886.  v0:= v4.`a.a.e.j.a` @type ^`a.a.e.d$b` @kind object;
  #L08688a.  call temp:= `c`(v5) @signature `La/a/e/n;.c:()I` @kind virtual;
  #L086890.  v1:= temp;
  #L086892.  call `a`(v0, v1) @signature `La/a/e/d$b;.a:(I)V` @kind virtual;
  #L086898.  v0:= 0I;
  #L08689a.  v1:= 4I;
  #L08689c.  v2:= 1I;
  #L08689e.  v3:= 0I;
  #L0868a0.  call `a`(v4, v3, v0, v1, v2) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L0868a6.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L0868aa.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L0868b0.  @monitorexit v4
  #L0868b2.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L086862;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L086862;
}
procedure `void` `a`(`a.a.e.j` v4 @kind this, `boolean` v5 , `int` v6 , `int` v7 ) @signature `La/a/e/j;.a:(ZII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0868d8.  v0:= 0I;
  #L0868da.  @monitorenter v4
  #Try_start0.  
  #L0868dc.  v1:= v4.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L0868e0.  if v1 == 0 then goto L0868fa;
  #L0868e4.  v0:= new `java.io.IOException`;
  #L0868e8.  v1:= "closed" @kind object;
  #L0868ec.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0868f2.  throw v0;
  #Try_end0.  
  #L0868f4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0868f6.  @monitorexit v4
  #L0868f8.  throw v0;
  #L0868fa.  v1:= 8I;
  #L0868fe.  v2:= 6I;
  #L086900.  if v5 == 0 then goto L086906;
  #L086904.  v0:= 1I;
  #L086906.  v3:= 0I;
  #Try_start1.  
  #L086908.  call `a`(v4, v3, v1, v2, v0) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L08690e.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L086912.  call temp:= `g`(v0, v6) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L086918.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L08691c.  call temp:= `g`(v0, v7) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L086922.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L086926.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L08692c.  @monitorexit v4
  #L08692e.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0868f4;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0868f4;
}
procedure `void` `a`(`a.a.e.j` v2 @kind this, `boolean` v3 , `int` v4 , `int` v5 , `java.util.List` v6 @kind object) @signature `La/a/e/j;.a:(ZIILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L086954.  @monitorenter v2
  #Try_start0.  
  #L086956.  v0:= v2.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L08695a.  if v0 == 0 then goto L086974;
  #L08695e.  v0:= new `java.io.IOException`;
  #L086962.  v1:= "closed" @kind object;
  #L086966.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08696c.  throw v0;
  #Try_end0.  
  #L08696e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L086970.  @monitorexit v2
  #L086972.  throw v0;
  #Try_start1.  
  #L086974.  call `a`(v2, v3, v4, v6) @signature `La/a/e/j;.a:(ZILjava/util/List;)V` @kind virtual;
  #Try_end1.  
  #L08697a.  @monitorexit v2
  #L08697c.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08696e;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08696e;
}
procedure `void` `a`(`a.a.e.j` v2 @kind this, `boolean` v3 , `int` v4 , `b.c` v5 @kind object, `int` v6 ) @signature `La/a/e/j;.a:(ZILb/c;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0869a4.  @monitorenter v2
  #Try_start0.  
  #L0869a6.  v0:= v2.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L0869aa.  if v0 == 0 then goto L0869c4;
  #L0869ae.  v0:= new `java.io.IOException`;
  #L0869b2.  v1:= "closed" @kind object;
  #L0869b6.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0869bc.  throw v0;
  #Try_end0.  
  #L0869be.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0869c0.  @monitorexit v2
  #L0869c2.  throw v0;
  #L0869c4.  v0:= 0I;
  #L0869c6.  if v3 == 0 then goto L0869ce;
  #L0869ca.  v0:= 1I;
  #L0869cc.  v0:= (`byte`) v0 @kind i2b;
  #Try_start1.  
  #L0869ce.  call `a`(v2, v4, v0, v5, v6) @signature `La/a/e/j;.a:(IBLb/c;I)V` @kind virtual;
  #Try_end1.  
  #L0869d4.  @monitorexit v2
  #L0869d6.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0869be;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0869be;
}
procedure `void` `a`(`a.a.e.j` v8 @kind this, `boolean` v9 , `int` v10 , `java.util.List` v11 @kind object) @signature `La/a/e/j;.a:(ZILjava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L0869fc.  v0:= v8.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L086a00.  if v0 == 0 then goto L086a14;
  #L086a04.  v0:= new `java.io.IOException`;
  #L086a08.  v1:= "closed" @kind object;
  #L086a0c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L086a12.  throw v0;
  #L086a14.  v0:= v8.`a.a.e.j.a` @type ^`a.a.e.d$b` @kind object;
  #L086a18.  call `a`(v0, v11) @signature `La/a/e/d$b;.a:(Ljava/util/List;)V` @kind virtual;
  #L086a1e.  v0:= v8.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L086a22.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L086a28.  v2:= temp @kind wide;
  #L086a2a.  v0:= v8.`a.a.e.j.f` @type ^`int`;
  #L086a2e.  v0:= (`long`) v0 @kind i2l;
  #L086a30.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L086a36.  v0:= temp @kind wide;
  #L086a38.  v1:= (`int`) v0 @kind l2i;
  #L086a3a.  v4:= 1I;
  #L086a3c.  v6:= (`long`) v1 @kind i2l;
  #L086a3e.  v0:= lcmp(v2, v6);
  #L086a42.  if v0 != 0 then goto L086a80;
  #L086a46.  v0:= 4I;
  #L086a48.  if v9 == 0 then goto L086a52;
  #L086a4c.  v0:= v0 ^| 1;
  #L086a50.  v0:= (`byte`) v0 @kind i2b;
  #L086a52.  call `a`(v8, v10, v1, v4, v0) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L086a58.  v0:= v8.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L086a5c.  v4:= v8.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L086a60.  v6:= (`long`) v1 @kind i2l;
  #L086a62.  call `a_`(v0, v4, v6) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L086a68.  v4:= (`long`) v1 @kind i2l;
  #L086a6a.  v0:= lcmp(v2, v4);
  #L086a6e.  if v0 <= 0 then goto L086a7e;
  #L086a72.  v0:= (`long`) v1 @kind i2l;
  #L086a74.  v0:= v2 - v0 @kind long;
  #L086a78.  call `b`(v8, v10, v0) @signature `La/a/e/j;.b:(IJ)V` @kind direct;
  #L086a7e.  return @kind void;
  #L086a80.  v0:= 0I;
  #L086a82.  goto L086a48;
}
procedure `void` `b`(`a.a.e.j` v2 @kind this) @signature `La/a/e/j;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L086a94.  @monitorenter v2
  #Try_start0.  
  #L086a96.  v0:= v2.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L086a9a.  if v0 == 0 then goto L086ab4;
  #L086a9e.  v0:= new `java.io.IOException`;
  #L086aa2.  v1:= "closed" @kind object;
  #L086aa6.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L086aac.  throw v0;
  #Try_end0.  
  #L086aae.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L086ab0.  @monitorexit v2
  #L086ab2.  throw v0;
  #Try_start1.  
  #L086ab4.  v0:= v2.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L086ab8.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L086abe.  @monitorexit v2
  #L086ac0.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L086aae;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L086aae;
}
procedure `void` `b`(`a.a.e.j` v6 @kind this, `a.a.e.n` v7 @kind object) @signature `La/a/e/j;.b:(La/a/e/n;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L086ae8.  v1:= 4I;
  #L086aea.  v2:= 0I;
  #L086aec.  @monitorenter v6
  #Try_start0.  
  #L086aee.  v0:= v6.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L086af2.  if v0 == 0 then goto L086b0c;
  #L086af6.  v0:= new `java.io.IOException`;
  #L086afa.  v1:= "closed" @kind object;
  #L086afe.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L086b04.  throw v0;
  #Try_end0.  
  #L086b06.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L086b08.  @monitorexit v6
  #L086b0a.  throw v0;
  #Try_start1.  
  #L086b0c.  call temp:= `b`(v7) @signature `La/a/e/n;.b:()I` @kind virtual;
  #L086b12.  v0:= temp;
  #L086b14.  v0:= v0 * 6;
  #L086b18.  v3:= 4I;
  #L086b1a.  v4:= 0I;
  #L086b1c.  v5:= 0I;
  #L086b1e.  call `a`(v6, v5, v0, v3, v4) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L086b24.  v0:= 10I;
  #L086b28.  if v2 >= v0 then goto L086b6c;
  #L086b2c.  call temp:= `a`(v7, v2) @signature `La/a/e/n;.a:(I)Z` @kind virtual;
  #L086b32.  v0:= temp;
  #L086b34.  if v0 != 0 then goto L086b3e;
  #L086b38.  v2:= v2 + 1;
  #L086b3c.  goto L086b24;
  #L086b3e.  if v2 != v1 then goto L086b62;
  #L086b42.  v0:= 3I;
  #L086b44.  v3:= v6.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L086b48.  call temp:= `h`(v3, v0) @signature `Lb/d;.h:(I)Lb/d;` @kind interface;
  #L086b4e.  v0:= v6.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L086b52.  call temp:= `b`(v7, v2) @signature `La/a/e/n;.b:(I)I` @kind virtual;
  #L086b58.  v3:= temp;
  #L086b5a.  call temp:= `g`(v0, v3) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L086b60.  goto L086b38;
  #L086b62.  v0:= 7I;
  #L086b64.  if v2 != v0 then goto L086b7a;
  #L086b68.  v0:= v1;
  #L086b6a.  goto L086b44;
  #L086b6c.  v0:= v6.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L086b70.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L086b76.  @monitorexit v6
  #L086b78.  return @kind void;
  #L086b7a.  v0:= v2;
  #L086b7c.  goto L086b44;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L086b06;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L086b06;
}
procedure `int` `c`(`a.a.e.j` v1 @kind this) @signature `La/a/e/j;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L086ba4.  v0:= v1.`a.a.e.j.f` @type ^`int`;
  #L086ba8.  return v0;
}
procedure `void` `close`(`a.a.e.j` v1 @kind this) @signature `La/a/e/j;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L086bbc.  @monitorenter v1
  #L086bbe.  v0:= 1I;
  #Try_start0.  
  #L086bc0.  v1.`a.a.e.j.g` @type ^`boolean` := v0 @kind boolean;
  #L086bc4.  v0:= v1.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L086bc8.  call `close`(v0) @signature `Lb/d;.close:()V` @kind interface;
  #Try_end0.  
  #L086bce.  @monitorexit v1
  #L086bd0.  return @kind void;
  #L086bd2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L086bd4.  @monitorexit v1
  #L086bd6.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L086bd2;
}
