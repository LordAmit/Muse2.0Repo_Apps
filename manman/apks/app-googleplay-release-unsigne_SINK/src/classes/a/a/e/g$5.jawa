record `a.a.e.g$5` @kind class @AccessFlag  extends `a.a.b` @kind class {
  `int` `a.a.e.g$5.a` @AccessFlag FINAL_SYNTHETIC;
  `java.util.List` `a.a.e.g$5.c` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `a.a.e.g$5.d` @AccessFlag FINAL_SYNTHETIC;
  `a.a.e.g` `a.a.e.g$5.e` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`a.a.e.g$5` v0 @kind this, `a.a.e.g` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Object`[] v3 @kind object, `int` v4 , `java.util.List` v5 @kind object, `boolean` v6 ) @signature `La/a/e/g$5;.<init>:(La/a/e/g;Ljava/lang/String;[Ljava/lang/Object;ILjava/util/List;Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L082bac.  v0.`a.a.e.g$5.e` @type ^`a.a.e.g` := v1 @kind object;
  #L082bb0.  v0.`a.a.e.g$5.a` @type ^`int` := v4;
  #L082bb4.  v0.`a.a.e.g$5.c` @type ^`java.util.List` := v5 @kind object;
  #L082bb8.  v0.`a.a.e.g$5.d` @type ^`boolean` := v6 @kind boolean;
  #L082bbc.  call `<init>`(v0, v2, v3) @signature `La/a/b;.<init>:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind direct;
  #L082bc2.  return @kind void;
}
procedure `void` `b`(`a.a.e.g$5` v4 @kind this) @signature `La/a/e/g$5;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L082bd4.  v0:= v4.`a.a.e.g$5.e` @type ^`a.a.e.g` @kind object;
  #L082bd8.  v0:= v0.`a.a.e.g.i` @type ^`a.a.e.m` @kind object;
  #L082bdc.  v1:= v4.`a.a.e.g$5.a` @type ^`int`;
  #L082be0.  v2:= v4.`a.a.e.g$5.c` @type ^`java.util.List` @kind object;
  #L082be4.  v3:= v4.`a.a.e.g$5.d` @type ^`boolean` @kind boolean;
  #L082be8.  call temp:= `a`(v0, v1, v2, v3) @signature `La/a/e/m;.a:(ILjava/util/List;Z)Z` @kind interface;
  #L082bee.  v0:= temp;
  #L082bf0.  if v0 == 0 then goto L082c0a;
  #Try_start0.  
  #L082bf4.  v1:= v4.`a.a.e.g$5.e` @type ^`a.a.e.g` @kind object;
  #L082bf8.  v1:= v1.`a.a.e.g.p` @type ^`a.a.e.j` @kind object;
  #L082bfc.  v2:= v4.`a.a.e.g$5.a` @type ^`int`;
  #L082c00.  v3:= `@@a.a.e.b.f` @type ^`a.a.e.b` @kind object;
  #L082c04.  call `a`(v1, v2, v3) @signature `La/a/e/j;.a:(ILa/a/e/b;)V` @kind virtual;
  #L082c0a.  if v0 != 0 then goto L082c16;
  #L082c0e.  v0:= v4.`a.a.e.g$5.d` @type ^`boolean` @kind boolean;
  #L082c12.  if v0 == 0 then goto L082c38;
  #L082c16.  v1:= v4.`a.a.e.g$5.e` @type ^`a.a.e.g` @kind object;
  #L082c1a.  @monitorenter v1
  #Try_end0.  
  #Try_start1.  
  #L082c1c.  v0:= v4.`a.a.e.g$5.e` @type ^`a.a.e.g` @kind object;
  #L082c20.  v0:= v0.`a.a.e.g.r` @type ^`java.util.Set` @kind object;
  #L082c24.  v2:= v4.`a.a.e.g$5.a` @type ^`int`;
  #L082c28.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L082c2e.  v2:= temp @kind object;
  #L082c30.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Set;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L082c36.  @monitorexit v1
  #L082c38.  return @kind void;
  #L082c3a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L082c3c.  @monitorexit v1
  #Try_end1.  
  #Try_start2.  
  #L082c3e.  throw v0;
  #Try_end2.  
  #L082c40.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L082c42.  goto L082c38;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L082c40;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L082c3a;
  catch `java.io.IOException` @[Try_start2..Try_end2] goto L082c40;
}
