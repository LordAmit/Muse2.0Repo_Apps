record `a.d` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `a.d.c` @AccessFlag ;
  `boolean` `a.d.d` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.e` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.h` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.i` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.j` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.k` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.l` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.m` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.n` @AccessFlag PRIVATE_FINAL;
}
global `a.d` `@@a.d.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `a.d` `@@a.d.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L08ac00.  v0:= new `a.d$a`;
  #L08ac04.  call `<init>`(v0) @signature `La/d$a;.<init>:()V` @kind direct;
  #L08ac0a.  call temp:= `a`(v0) @signature `La/d$a;.a:()La/d$a;` @kind virtual;
  #L08ac10.  v0:= temp @kind object;
  #L08ac12.  call temp:= `c`(v0) @signature `La/d$a;.c:()La/d;` @kind virtual;
  #L08ac18.  v0:= temp @kind object;
  #L08ac1a.  `@@a.d.a` @type ^`a.d` := v0 @kind object;
  #L08ac1e.  v0:= new `a.d$a`;
  #L08ac22.  call `<init>`(v0) @signature `La/d$a;.<init>:()V` @kind direct;
  #L08ac28.  call temp:= `b`(v0) @signature `La/d$a;.b:()La/d$a;` @kind virtual;
  #L08ac2e.  v0:= temp @kind object;
  #L08ac30.  v1:= 2147483647I;
  #L08ac36.  v2:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L08ac3a.  call temp:= `a`(v0, v1, v2) @signature `La/d$a;.a:(ILjava/util/concurrent/TimeUnit;)La/d$a;` @kind virtual;
  #L08ac40.  v0:= temp @kind object;
  #L08ac42.  call temp:= `c`(v0) @signature `La/d$a;.c:()La/d;` @kind virtual;
  #L08ac48.  v0:= temp @kind object;
  #L08ac4a.  `@@a.d.b` @type ^`a.d` := v0 @kind object;
  #L08ac4e.  return @kind void;
}
procedure `void` `<init>`(`a.d` v2 @kind this, `a.d$a` v3 @kind object) @signature `La/d;.<init>:(La/d$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L08ac60.  v1:= 0I;
  #L08ac62.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08ac68.  v0:= v3.`a.d$a.a` @type ^`boolean` @kind boolean;
  #L08ac6c.  v2.`a.d.d` @type ^`boolean` := v0 @kind boolean;
  #L08ac70.  v0:= v3.`a.d$a.b` @type ^`boolean` @kind boolean;
  #L08ac74.  v2.`a.d.e` @type ^`boolean` := v0 @kind boolean;
  #L08ac78.  v0:= v3.`a.d$a.c` @type ^`int`;
  #L08ac7c.  v2.`a.d.f` @type ^`int` := v0;
  #L08ac80.  v0:= -1I;
  #L08ac82.  v2.`a.d.g` @type ^`int` := v0;
  #L08ac86.  v2.`a.d.h` @type ^`boolean` := v1 @kind boolean;
  #L08ac8a.  v2.`a.d.i` @type ^`boolean` := v1 @kind boolean;
  #L08ac8e.  v2.`a.d.j` @type ^`boolean` := v1 @kind boolean;
  #L08ac92.  v0:= v3.`a.d$a.d` @type ^`int`;
  #L08ac96.  v2.`a.d.k` @type ^`int` := v0;
  #L08ac9a.  v0:= v3.`a.d$a.e` @type ^`int`;
  #L08ac9e.  v2.`a.d.l` @type ^`int` := v0;
  #L08aca2.  v0:= v3.`a.d$a.f` @type ^`boolean` @kind boolean;
  #L08aca6.  v2.`a.d.m` @type ^`boolean` := v0 @kind boolean;
  #L08acaa.  v0:= v3.`a.d$a.g` @type ^`boolean` @kind boolean;
  #L08acae.  v2.`a.d.n` @type ^`boolean` := v0 @kind boolean;
  #L08acb2.  return @kind void;
}
procedure `void` `<init>`(`a.d` v0 @kind this, `boolean` v1 , `boolean` v2 , `int` v3 , `int` v4 , `boolean` v5 , `boolean` v6 , `boolean` v7 , `int` v8 , `int` v9 , `boolean` v10 , `boolean` v11 , `java.lang.String` v12 @kind object) @signature `La/d;.<init>:(ZZIIZZZIIZZLjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L08acc4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08acca.  v0.`a.d.d` @type ^`boolean` := v1 @kind boolean;
  #L08acce.  v0.`a.d.e` @type ^`boolean` := v2 @kind boolean;
  #L08acd2.  v0.`a.d.f` @type ^`int` := v3;
  #L08acd6.  v0.`a.d.g` @type ^`int` := v4;
  #L08acda.  v0.`a.d.h` @type ^`boolean` := v5 @kind boolean;
  #L08acde.  v0.`a.d.i` @type ^`boolean` := v6 @kind boolean;
  #L08ace2.  v0.`a.d.j` @type ^`boolean` := v7 @kind boolean;
  #L08ace6.  v0.`a.d.k` @type ^`int` := v8;
  #L08acea.  v0.`a.d.l` @type ^`int` := v9;
  #L08acee.  v0.`a.d.m` @type ^`boolean` := v10 @kind boolean;
  #L08acf2.  v0.`a.d.n` @type ^`boolean` := v11 @kind boolean;
  #L08acf6.  v0.`a.d.c` @type ^`java.lang.String` := v12 @kind object;
  #L08acfa.  return @kind void;
}
procedure `a.d` `a`(`a.q` v23 @kind object) @signature `La/d;.a:(La/q;)La/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L08ad0c.  v16:= 0I;
  #L08ad10.  v4:= 0I;
  #L08ad12.  v5:= -1I;
  #L08ad14.  v6:= -1I;
  #L08ad16.  v7:= 0I;
  #L08ad18.  v8:= 0I;
  #L08ad1a.  v9:= 0I;
  #L08ad1c.  v10:= -1I;
  #L08ad1e.  v11:= -1I;
  #L08ad20.  v12:= 0I;
  #L08ad22.  v13:= 0I;
  #L08ad24.  v15:= 1I;
  #L08ad26.  v3:= 0I;
  #L08ad28.  v2:= 0I;
  #L08ad2a.  call temp:= `a`(v23) @signature `La/q;.a:()I` @kind virtual;
  #L08ad30.  v19:= temp;
  #L08ad32.  v18:= v2;
  #L08ad36.  v2:= v3 @kind object;
  #L08ad38.  v3:= v16;
  #L08ad3c.  v0:= v18;
  #L08ad40.  v1:= v19;
  #L08ad44.  if v0 >= v1 then goto L08b056;
  #L08ad48.  v0:= v23 @kind object;
  #L08ad4c.  v1:= v18;
  #L08ad50.  call temp:= `a`(v0, v1) @signature `La/q;.a:(I)Ljava/lang/String;` @kind virtual;
  #L08ad56.  v16:= temp @kind object;
  #L08ad58.  v0:= v23 @kind object;
  #L08ad5c.  v1:= v18;
  #L08ad60.  call temp:= `b`(v0, v1) @signature `La/q;.b:(I)Ljava/lang/String;` @kind virtual;
  #L08ad66.  v14:= temp @kind object;
  #L08ad68.  v17:= "Cache-Control" @kind object;
  #L08ad6c.  call temp:= `equalsIgnoreCase`(v16, v17) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08ad72.  v17:= temp;
  #L08ad74.  if v17 == 0 then goto L08ae36;
  #L08ad78.  if v2 == 0 then goto L08ae32;
  #L08ad7c.  v15:= 0I;
  #L08ad7e.  v16:= 0I;
  #L08ad82.  v22:= v16;
  #L08ad86.  v16:= v3;
  #L08ad8a.  v3:= v22;
  #L08ad8e.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08ad94.  v17:= temp;
  #L08ad96.  v0:= v17;
  #L08ad9a.  if v3 >= v0 then goto L08b046;
  #L08ad9e.  v17:= "=,;" @kind object;
  #L08ada2.  v0:= v17 @kind object;
  #L08ada6.  call temp:= `a`(v14, v3, v0) @signature `La/a/c/e;.a:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L08adac.  v17:= temp;
  #L08adae.  v0:= v17;
  #L08adb2.  call temp:= `substring`(v14, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08adb8.  v3:= temp @kind object;
  #L08adba.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L08adc0.  v20:= temp @kind object;
  #L08adc2.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08adc8.  v3:= temp;
  #L08adca.  v0:= v17;
  #L08adce.  if v0 == v3 then goto L08ae02;
  #L08add2.  v0:= v17;
  #L08add6.  call temp:= `charAt`(v14, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L08addc.  v3:= temp;
  #L08adde.  v21:= 44I;
  #L08ade2.  v0:= v21;
  #L08ade6.  if v3 == v0 then goto L08ae02;
  #L08adea.  v0:= v17;
  #L08adee.  call temp:= `charAt`(v14, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L08adf4.  v3:= temp;
  #L08adf6.  v21:= 59I;
  #L08adfa.  v0:= v21;
  #L08adfe.  if v3 != v0 then goto L08ae4a;
  #L08ae02.  v17:= v17 + 1;
  #L08ae06.  v3:= 0I;
  #L08ae08.  v22:= v3 @kind object;
  #L08ae0c.  v3:= v17;
  #L08ae10.  v17:= v22 @kind object;
  #L08ae14.  v21:= "no-cache" @kind object;
  #L08ae18.  v0:= v21 @kind object;
  #L08ae1c.  v1:= v20 @kind object;
  #L08ae20.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08ae26.  v21:= temp;
  #L08ae28.  if v21 == 0 then goto L08aee2;
  #L08ae2c.  v16:= 1I;
  #L08ae30.  goto L08ad8e;
  #L08ae32.  v2:= v14 @kind object;
  #L08ae34.  goto L08ad7e;
  #L08ae36.  v17:= "Pragma" @kind object;
  #L08ae3a.  call temp:= `equalsIgnoreCase`(v16, v17) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08ae40.  v16:= temp;
  #L08ae42.  if v16 == 0 then goto L08b042;
  #L08ae46.  v15:= 0I;
  #L08ae48.  goto L08ad7e;
  #L08ae4a.  v3:= v17 + 1;
  #L08ae4e.  call temp:= `a`(v14, v3) @signature `La/a/c/e;.a:(Ljava/lang/String;I)I` @kind static;
  #L08ae54.  v3:= temp;
  #L08ae56.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08ae5c.  v17:= temp;
  #L08ae5e.  v0:= v17;
  #L08ae62.  if v3 >= v0 then goto L08aeb0;
  #L08ae66.  call temp:= `charAt`(v14, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L08ae6c.  v17:= temp;
  #L08ae6e.  v21:= 34I;
  #L08ae72.  v0:= v17;
  #L08ae76.  v1:= v21;
  #L08ae7a.  if v0 != v1 then goto L08aeb0;
  #L08ae7e.  v3:= v3 + 1;
  #L08ae82.  v17:= "\"" @kind object;
  #L08ae86.  v0:= v17 @kind object;
  #L08ae8a.  call temp:= `a`(v14, v3, v0) @signature `La/a/c/e;.a:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L08ae90.  v17:= temp;
  #L08ae92.  v0:= v17;
  #L08ae96.  call temp:= `substring`(v14, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08ae9c.  v3:= temp @kind object;
  #L08ae9e.  v17:= v17 + 1;
  #L08aea2.  v22:= v3 @kind object;
  #L08aea6.  v3:= v17;
  #L08aeaa.  v17:= v22 @kind object;
  #L08aeae.  goto L08ae14;
  #L08aeb0.  v17:= ",;" @kind object;
  #L08aeb4.  v0:= v17 @kind object;
  #L08aeb8.  call temp:= `a`(v14, v3, v0) @signature `La/a/c/e;.a:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L08aebe.  v17:= temp;
  #L08aec0.  v0:= v17;
  #L08aec4.  call temp:= `substring`(v14, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08aeca.  v3:= temp @kind object;
  #L08aecc.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L08aed2.  v3:= temp @kind object;
  #L08aed4.  v22:= v3 @kind object;
  #L08aed8.  v3:= v17;
  #L08aedc.  v17:= v22 @kind object;
  #L08aee0.  goto L08ae14;
  #L08aee2.  v21:= "no-store" @kind object;
  #L08aee6.  v0:= v21 @kind object;
  #L08aeea.  v1:= v20 @kind object;
  #L08aeee.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08aef4.  v21:= temp;
  #L08aef6.  if v21 == 0 then goto L08af00;
  #L08aefa.  v4:= 1I;
  #L08aefc.  goto L08ad8e;
  #L08af00.  v21:= "max-age" @kind object;
  #L08af04.  v0:= v21 @kind object;
  #L08af08.  v1:= v20 @kind object;
  #L08af0c.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08af12.  v21:= temp;
  #L08af14.  if v21 == 0 then goto L08af2a;
  #L08af18.  v5:= -1I;
  #L08af1a.  v0:= v17 @kind object;
  #L08af1e.  call temp:= `b`(v0, v5) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L08af24.  v5:= temp;
  #L08af26.  goto L08ad8e;
  #L08af2a.  v21:= "s-maxage" @kind object;
  #L08af2e.  v0:= v21 @kind object;
  #L08af32.  v1:= v20 @kind object;
  #L08af36.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08af3c.  v21:= temp;
  #L08af3e.  if v21 == 0 then goto L08af54;
  #L08af42.  v6:= -1I;
  #L08af44.  v0:= v17 @kind object;
  #L08af48.  call temp:= `b`(v0, v6) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L08af4e.  v6:= temp;
  #L08af50.  goto L08ad8e;
  #L08af54.  v21:= "private" @kind object;
  #L08af58.  v0:= v21 @kind object;
  #L08af5c.  v1:= v20 @kind object;
  #L08af60.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08af66.  v21:= temp;
  #L08af68.  if v21 == 0 then goto L08af72;
  #L08af6c.  v7:= 1I;
  #L08af6e.  goto L08ad8e;
  #L08af72.  v21:= "public" @kind object;
  #L08af76.  v0:= v21 @kind object;
  #L08af7a.  v1:= v20 @kind object;
  #L08af7e.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08af84.  v21:= temp;
  #L08af86.  if v21 == 0 then goto L08af90;
  #L08af8a.  v8:= 1I;
  #L08af8c.  goto L08ad8e;
  #L08af90.  v21:= "must-revalidate" @kind object;
  #L08af94.  v0:= v21 @kind object;
  #L08af98.  v1:= v20 @kind object;
  #L08af9c.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08afa2.  v21:= temp;
  #L08afa4.  if v21 == 0 then goto L08afae;
  #L08afa8.  v9:= 1I;
  #L08afaa.  goto L08ad8e;
  #L08afae.  v21:= "max-stale" @kind object;
  #L08afb2.  v0:= v21 @kind object;
  #L08afb6.  v1:= v20 @kind object;
  #L08afba.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08afc0.  v21:= temp;
  #L08afc2.  if v21 == 0 then goto L08afdc;
  #L08afc6.  v10:= 2147483647I;
  #L08afcc.  v0:= v17 @kind object;
  #L08afd0.  call temp:= `b`(v0, v10) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L08afd6.  v10:= temp;
  #L08afd8.  goto L08ad8e;
  #L08afdc.  v21:= "min-fresh" @kind object;
  #L08afe0.  v0:= v21 @kind object;
  #L08afe4.  v1:= v20 @kind object;
  #L08afe8.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08afee.  v21:= temp;
  #L08aff0.  if v21 == 0 then goto L08b006;
  #L08aff4.  v11:= -1I;
  #L08aff6.  v0:= v17 @kind object;
  #L08affa.  call temp:= `b`(v0, v11) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L08b000.  v11:= temp;
  #L08b002.  goto L08ad8e;
  #L08b006.  v17:= "only-if-cached" @kind object;
  #L08b00a.  v0:= v17 @kind object;
  #L08b00e.  v1:= v20 @kind object;
  #L08b012.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08b018.  v17:= temp;
  #L08b01a.  if v17 == 0 then goto L08b024;
  #L08b01e.  v12:= 1I;
  #L08b020.  goto L08ad8e;
  #L08b024.  v17:= "no-transform" @kind object;
  #L08b028.  v0:= v17 @kind object;
  #L08b02c.  v1:= v20 @kind object;
  #L08b030.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08b036.  v17:= temp;
  #L08b038.  if v17 == 0 then goto L08ad8e;
  #L08b03c.  v13:= 1I;
  #L08b03e.  goto L08ad8e;
  #L08b042.  v16:= v3;
  #L08b046.  v3:= v18 + 1;
  #L08b04a.  v18:= v3;
  #L08b04e.  v3:= v16;
  #L08b052.  goto L08ad3c;
  #L08b056.  if v15 != 0 then goto L08b068;
  #L08b05a.  v14:= 0I;
  #L08b05c.  v2:= new `a.d`;
  #L08b060.  call `<init>`(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) @signature `La/d;.<init>:(ZZIIZZZIIZZLjava/lang/String;)V` @kind direct;
  #L08b066.  return v2 @kind object;
  #L08b068.  v14:= v2 @kind object;
  #L08b06a.  goto L08b05c;
}
procedure `java.lang.String` `j`(`a.d` v4 @kind this) @signature `La/d;.j:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08b07c.  v3:= -1I;
  #L08b07e.  v0:= new `java.lang.StringBuilder`;
  #L08b082.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08b088.  v1:= v4.`a.d.d` @type ^`boolean` @kind boolean;
  #L08b08c.  if v1 == 0 then goto L08b09a;
  #L08b090.  v1:= "no-cache, " @kind object;
  #L08b094.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b09a.  v1:= v4.`a.d.e` @type ^`boolean` @kind boolean;
  #L08b09e.  if v1 == 0 then goto L08b0ac;
  #L08b0a2.  v1:= "no-store, " @kind object;
  #L08b0a6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b0ac.  v1:= v4.`a.d.f` @type ^`int`;
  #L08b0b0.  if v1 == v3 then goto L08b0d6;
  #L08b0b4.  v1:= "max-age=" @kind object;
  #L08b0b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b0be.  v1:= temp @kind object;
  #L08b0c0.  v2:= v4.`a.d.f` @type ^`int`;
  #L08b0c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b0ca.  v1:= temp @kind object;
  #L08b0cc.  v2:= ", " @kind object;
  #L08b0d0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b0d6.  v1:= v4.`a.d.g` @type ^`int`;
  #L08b0da.  if v1 == v3 then goto L08b100;
  #L08b0de.  v1:= "s-maxage=" @kind object;
  #L08b0e2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b0e8.  v1:= temp @kind object;
  #L08b0ea.  v2:= v4.`a.d.g` @type ^`int`;
  #L08b0ee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b0f4.  v1:= temp @kind object;
  #L08b0f6.  v2:= ", " @kind object;
  #L08b0fa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b100.  v1:= v4.`a.d.h` @type ^`boolean` @kind boolean;
  #L08b104.  if v1 == 0 then goto L08b112;
  #L08b108.  v1:= "private, " @kind object;
  #L08b10c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b112.  v1:= v4.`a.d.i` @type ^`boolean` @kind boolean;
  #L08b116.  if v1 == 0 then goto L08b124;
  #L08b11a.  v1:= "public, " @kind object;
  #L08b11e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b124.  v1:= v4.`a.d.j` @type ^`boolean` @kind boolean;
  #L08b128.  if v1 == 0 then goto L08b136;
  #L08b12c.  v1:= "must-revalidate, " @kind object;
  #L08b130.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b136.  v1:= v4.`a.d.k` @type ^`int`;
  #L08b13a.  if v1 == v3 then goto L08b160;
  #L08b13e.  v1:= "max-stale=" @kind object;
  #L08b142.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b148.  v1:= temp @kind object;
  #L08b14a.  v2:= v4.`a.d.k` @type ^`int`;
  #L08b14e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b154.  v1:= temp @kind object;
  #L08b156.  v2:= ", " @kind object;
  #L08b15a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b160.  v1:= v4.`a.d.l` @type ^`int`;
  #L08b164.  if v1 == v3 then goto L08b18a;
  #L08b168.  v1:= "min-fresh=" @kind object;
  #L08b16c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b172.  v1:= temp @kind object;
  #L08b174.  v2:= v4.`a.d.l` @type ^`int`;
  #L08b178.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b17e.  v1:= temp @kind object;
  #L08b180.  v2:= ", " @kind object;
  #L08b184.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b18a.  v1:= v4.`a.d.m` @type ^`boolean` @kind boolean;
  #L08b18e.  if v1 == 0 then goto L08b19c;
  #L08b192.  v1:= "only-if-cached, " @kind object;
  #L08b196.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b19c.  v1:= v4.`a.d.n` @type ^`boolean` @kind boolean;
  #L08b1a0.  if v1 == 0 then goto L08b1ae;
  #L08b1a4.  v1:= "no-transform, " @kind object;
  #L08b1a8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b1ae.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L08b1b4.  v1:= temp;
  #L08b1b6.  if v1 != 0 then goto L08b1c0;
  #L08b1ba.  v0:= "" @kind object;
  #L08b1be.  return v0 @kind object;
  #L08b1c0.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L08b1c6.  v1:= temp;
  #L08b1c8.  v1:= v1 + -2;
  #L08b1cc.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L08b1d2.  v2:= temp;
  #L08b1d4.  call temp:= `delete`(v0, v1, v2) @signature `Ljava/lang/StringBuilder;.delete:(II)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b1da.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08b1e0.  v0:= temp @kind object;
  #L08b1e2.  goto L08b1be;
}
procedure `boolean` `a`(`a.d` v1 @kind this) @signature `La/d;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b1f4.  v0:= v1.`a.d.d` @type ^`boolean` @kind boolean;
  #L08b1f8.  return v0;
}
procedure `boolean` `b`(`a.d` v1 @kind this) @signature `La/d;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b20c.  v0:= v1.`a.d.e` @type ^`boolean` @kind boolean;
  #L08b210.  return v0;
}
procedure `int` `c`(`a.d` v1 @kind this) @signature `La/d;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b224.  v0:= v1.`a.d.f` @type ^`int`;
  #L08b228.  return v0;
}
procedure `boolean` `d`(`a.d` v1 @kind this) @signature `La/d;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b23c.  v0:= v1.`a.d.h` @type ^`boolean` @kind boolean;
  #L08b240.  return v0;
}
procedure `boolean` `e`(`a.d` v1 @kind this) @signature `La/d;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b254.  v0:= v1.`a.d.i` @type ^`boolean` @kind boolean;
  #L08b258.  return v0;
}
procedure `boolean` `f`(`a.d` v1 @kind this) @signature `La/d;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b26c.  v0:= v1.`a.d.j` @type ^`boolean` @kind boolean;
  #L08b270.  return v0;
}
procedure `int` `g`(`a.d` v1 @kind this) @signature `La/d;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b284.  v0:= v1.`a.d.k` @type ^`int`;
  #L08b288.  return v0;
}
procedure `int` `h`(`a.d` v1 @kind this) @signature `La/d;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b29c.  v0:= v1.`a.d.l` @type ^`int`;
  #L08b2a0.  return v0;
}
procedure `boolean` `i`(`a.d` v1 @kind this) @signature `La/d;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b2b4.  v0:= v1.`a.d.m` @type ^`boolean` @kind boolean;
  #L08b2b8.  return v0;
}
procedure `java.lang.String` `toString`(`a.d` v1 @kind this) @signature `La/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08b2cc.  v0:= v1.`a.d.c` @type ^`java.lang.String` @kind object;
  #L08b2d0.  if v0 == 0 then goto L08b2d6;
  #L08b2d4.  return v0 @kind object;
  #L08b2d6.  call temp:= `j`(v1) @signature `La/d;.j:()Ljava/lang/String;` @kind direct;
  #L08b2dc.  v0:= temp @kind object;
  #L08b2de.  v1.`a.d.c` @type ^`java.lang.String` := v0 @kind object;
  #L08b2e2.  goto L08b2d4;
}
