record `b.f` @kind class @AccessFlag PUBLIC extends `java.io.Serializable` @kind interface, `java.lang.Comparable` @kind interface {
  `byte`[] `b.f.c` @AccessFlag FINAL;
  `int` `b.f.d` @AccessFlag TRANSIENT;
  `java.lang.String` `b.f.e` @AccessFlag TRANSIENT;
}
global `char`[] `@@b.f.a` @AccessFlag STATIC_FINAL;
global `b.f` `@@b.f.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L120bc0.  v0:= 16I;
  #L120bc4.  v0:= new `char`[v0];
  #L120bc8.  goto L120be8;
  #L120bce.  `@@b.f.a` @type ^`char`[] := v0 @kind object;
  #L120bd2.  v0:= 0I;
  #L120bd4.  v0:= new `byte`[v0];
  #L120bd8.  call temp:= `a`(v0) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #L120bde.  v0:= temp @kind object;
  #L120be0.  `@@b.f.b` @type ^`b.f` := v0 @kind object;
  #L120be4.  return @kind void;
  #L120be6.  
  #L120be8.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L120c0f.  goto L120bce;
}
procedure `void` `<init>`(`b.f` v0 @kind this, `byte`[] v1 @kind object) @signature `Lb/f;.<init>:([B)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L120c20.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L120c26.  v0.`b.f.c` @type ^`byte`[] := v1 @kind object;
  #L120c2a.  return @kind void;
}
procedure `int` `a`(`char` v3 ) @signature `Lb/f;.a:(C)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L120c3c.  v0:= 48I;
  #L120c40.  if v3 < v0 then goto L120c52;
  #L120c44.  v0:= 57I;
  #L120c48.  if v3 > v0 then goto L120c52;
  #L120c4c.  v0:= v3 + -48;
  #L120c50.  return v0;
  #L120c52.  v0:= 97I;
  #L120c56.  if v3 < v0 then goto L120c6c;
  #L120c5a.  v0:= 102I;
  #L120c5e.  if v3 > v0 then goto L120c6c;
  #L120c62.  v0:= v3 + -97;
  #L120c66.  v0:= v0 + 10;
  #L120c6a.  goto L120c50;
  #L120c6c.  v0:= 65I;
  #L120c70.  if v3 < v0 then goto L120c86;
  #L120c74.  v0:= 70I;
  #L120c78.  if v3 > v0 then goto L120c86;
  #L120c7c.  v0:= v3 + -65;
  #L120c80.  v0:= v0 + 10;
  #L120c84.  goto L120c50;
  #L120c86.  v0:= new `java.lang.IllegalArgumentException`;
  #L120c8a.  v1:= new `java.lang.StringBuilder`;
  #L120c8e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L120c94.  v2:= "Unexpected hex digit: " @kind object;
  #L120c98.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L120c9e.  v1:= temp @kind object;
  #L120ca0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L120ca6.  v1:= temp @kind object;
  #L120ca8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L120cae.  v1:= temp @kind object;
  #L120cb0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120cb6.  throw v0;
}
procedure `int` `a`(`java.lang.String` v5 @kind object, `int` v6 ) @signature `Lb/f;.a:(Ljava/lang/String;I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L120cc8.  v0:= 0I;
  #L120cca.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L120cd0.  v2:= temp;
  #L120cd2.  v1:= v0;
  #L120cd4.  if v0 >= v2 then goto L120d20;
  #L120cd8.  if v1 != v6 then goto L120cde;
  #L120cdc.  return v0;
  #L120cde.  call temp:= `codePointAt`(v5, v0) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L120ce4.  v3:= temp;
  #L120ce6.  call temp:= `isISOControl`(v3) @signature `Ljava/lang/Character;.isISOControl:(I)Z` @kind static;
  #L120cec.  v4:= temp;
  #L120cee.  if v4 == 0 then goto L120d02;
  #L120cf2.  v4:= 10I;
  #L120cf6.  if v3 == v4 then goto L120d02;
  #L120cfa.  v4:= 13I;
  #L120cfe.  if v3 != v4 then goto L120d0c;
  #L120d02.  v4:= 65533I;
  #L120d08.  if v3 != v4 then goto L120d10;
  #L120d0c.  v0:= -1I;
  #L120d0e.  goto L120cdc;
  #L120d10.  v1:= v1 + 1;
  #L120d14.  call temp:= `charCount`(v3) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L120d1a.  v3:= temp;
  #L120d1c.  v0:= v0 + v3 @kind int;
  #L120d1e.  goto L120cd4;
  #L120d20.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L120d26.  v0:= temp;
  #L120d28.  goto L120cdc;
}
procedure `b.f` `a`(`java.lang.String` v2 @kind object) @signature `Lb/f;.a:(Ljava/lang/String;)Lb/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L120d3c.  if v2 != 0 then goto L120d50;
  #L120d40.  v0:= new `java.lang.IllegalArgumentException`;
  #L120d44.  v1:= "s == null" @kind object;
  #L120d48.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120d4e.  throw v0;
  #L120d50.  v0:= new `b.f`;
  #L120d54.  v1:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L120d58.  call temp:= `getBytes`(v2, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L120d5e.  v1:= temp @kind object;
  #L120d60.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L120d66.  v0.`b.f.e` @type ^`java.lang.String` := v2 @kind object;
  #L120d6a.  return v0 @kind object;
}
procedure `b.f` `a`(`byte`[] v2 @kind object) @signature `Lb/f;.a:([B)Lb/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L120d7c.  if v2 != 0 then goto L120d90;
  #L120d80.  v0:= new `java.lang.IllegalArgumentException`;
  #L120d84.  v1:= "data == null" @kind object;
  #L120d88.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120d8e.  throw v0;
  #L120d90.  v1:= new `b.f`;
  #L120d94.  call temp:= `clone`(v2) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L120d9a.  v0:= temp @kind object;
  #L120d9c.  v0:= (`byte`[]) v0 @kind object;
  #L120da0.  call `<init>`(v1, v0) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L120da6.  return v1 @kind object;
}
procedure `b.f` `b`(`java.lang.String` v4 @kind object) @signature `Lb/f;.b:(Ljava/lang/String;)Lb/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L120db8.  if v4 != 0 then goto L120dcc;
  #L120dbc.  v0:= new `java.lang.IllegalArgumentException`;
  #L120dc0.  v1:= "hex == null" @kind object;
  #L120dc4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120dca.  throw v0;
  #L120dcc.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L120dd2.  v0:= temp;
  #L120dd4.  v0:= v0 %% 2;
  #L120dd8.  if v0 == 0 then goto L120e0e;
  #L120ddc.  v0:= new `java.lang.IllegalArgumentException`;
  #L120de0.  v1:= new `java.lang.StringBuilder`;
  #L120de4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L120dea.  v2:= "Unexpected hex string: " @kind object;
  #L120dee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L120df4.  v1:= temp @kind object;
  #L120df6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L120dfc.  v1:= temp @kind object;
  #L120dfe.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L120e04.  v1:= temp @kind object;
  #L120e06.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120e0c.  throw v0;
  #L120e0e.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L120e14.  v0:= temp;
  #L120e16.  v0:= v0 / 2;
  #L120e1a.  v1:= new `byte`[v0];
  #L120e1e.  v0:= 0I;
  #L120e20.  v2:= length @variable v1;
  #L120e22.  if v0 >= v2 then goto L120e64;
  #L120e26.  v2:= v0 * 2;
  #L120e2a.  call temp:= `charAt`(v4, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L120e30.  v2:= temp;
  #L120e32.  call temp:= `a`(v2) @signature `Lb/f;.a:(C)I` @kind static;
  #L120e38.  v2:= temp;
  #L120e3a.  v2:= v2 ^< 4;
  #L120e3e.  v3:= v0 * 2;
  #L120e42.  v3:= v3 + 1;
  #L120e46.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L120e4c.  v3:= temp;
  #L120e4e.  call temp:= `a`(v3) @signature `Lb/f;.a:(C)I` @kind static;
  #L120e54.  v3:= temp;
  #L120e56.  v2:= v2 + v3 @kind int;
  #L120e58.  v2:= (`byte`) v2 @kind i2b;
  #L120e5a.  v1[v0]:= v2 @kind byte;
  #L120e5e.  v0:= v0 + 1;
  #L120e62.  goto L120e20;
  #L120e64.  call temp:= `a`(v1) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #L120e6a.  v0:= temp @kind object;
  #L120e6c.  return v0 @kind object;
}
procedure `b.f` `c`(`b.f` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lb/f;.c:(Ljava/lang/String;)Lb/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L120e80.  call temp:= `getInstance`(v3) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L120e86.  v0:= temp @kind object;
  #L120e88.  v1:= v2.`b.f.c` @type ^`byte`[] @kind object;
  #L120e8c.  call temp:= `digest`(v0, v1) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L120e92.  v0:= temp @kind object;
  #L120e94.  call temp:= `a`(v0) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #Try_end0.  
  #L120e9a.  v0:= temp @kind object;
  #L120e9c.  return v0 @kind object;
  #L120e9e.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L120ea0.  v1:= new `java.lang.AssertionError`;
  #L120ea4.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L120eaa.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L120e9e;
}
procedure `byte` `a`(`b.f` v1 @kind this, `int` v2 ) @signature `Lb/f;.a:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L120ecc.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L120ed0.  v0:= v0[v2] @kind byte;
  #L120ed4.  return v0;
}
procedure `b.f` `a`(`b.f` v4 @kind this, `int` v5 , `int` v6 ) @signature `Lb/f;.a:(II)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L120ee8.  if v5 >= 0 then goto L120efc;
  #L120eec.  v0:= new `java.lang.IllegalArgumentException`;
  #L120ef0.  v1:= "beginIndex < 0" @kind object;
  #L120ef4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120efa.  throw v0;
  #L120efc.  v0:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L120f00.  v0:= length @variable v0;
  #L120f02.  if v6 <= v0 then goto L120f4a;
  #L120f06.  v0:= new `java.lang.IllegalArgumentException`;
  #L120f0a.  v1:= new `java.lang.StringBuilder`;
  #L120f0e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L120f14.  v2:= "endIndex > length(" @kind object;
  #L120f18.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L120f1e.  v1:= temp @kind object;
  #L120f20.  v2:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L120f24.  v2:= length @variable v2;
  #L120f26.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L120f2c.  v1:= temp @kind object;
  #L120f2e.  v2:= ")" @kind object;
  #L120f32.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L120f38.  v1:= temp @kind object;
  #L120f3a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L120f40.  v1:= temp @kind object;
  #L120f42.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120f48.  throw v0;
  #L120f4a.  v0:= v6 - v5 @kind int;
  #L120f4e.  if v0 >= 0 then goto L120f62;
  #L120f52.  v0:= new `java.lang.IllegalArgumentException`;
  #L120f56.  v1:= "endIndex < beginIndex" @kind object;
  #L120f5a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120f60.  throw v0;
  #L120f62.  if v5 != 0 then goto L120f72;
  #L120f66.  v1:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L120f6a.  v1:= length @variable v1;
  #L120f6c.  if v6 != v1 then goto L120f72;
  #L120f70.  return v4 @kind object;
  #L120f72.  v1:= new `byte`[v0];
  #L120f76.  v2:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L120f7a.  v3:= 0I;
  #L120f7c.  call `arraycopy`(v2, v5, v1, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L120f82.  v4:= new `b.f`;
  #L120f86.  call `<init>`(v4, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L120f8c.  goto L120f70;
}
procedure `java.lang.String` `a`(`b.f` v3 @kind this) @signature `Lb/f;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L120fa0.  v0:= v3.`b.f.e` @type ^`java.lang.String` @kind object;
  #L120fa4.  if v0 == 0 then goto L120faa;
  #L120fa8.  return v0 @kind object;
  #L120faa.  v0:= new `java.lang.String`;
  #L120fae.  v1:= v3.`b.f.c` @type ^`byte`[] @kind object;
  #L120fb2.  v2:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L120fb6.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L120fbc.  v3.`b.f.e` @type ^`java.lang.String` := v0 @kind object;
  #L120fc0.  goto L120fa8;
}
procedure `void` `a`(`b.f` v3 @kind this, `b.c` v4 @kind object) @signature `Lb/f;.a:(Lb/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L120fd4.  v0:= v3.`b.f.c` @type ^`byte`[] @kind object;
  #L120fd8.  v1:= 0I;
  #L120fda.  v2:= v3.`b.f.c` @type ^`byte`[] @kind object;
  #L120fde.  v2:= length @variable v2;
  #L120fe0.  call temp:= `b`(v4, v0, v1, v2) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L120fe6.  return @kind void;
}
procedure `boolean` `a`(`b.f` v1 @kind this, `int` v2 , `b.f` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lb/f;.a:(ILb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L120ff8.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L120ffc.  call temp:= `a`(v3, v4, v0, v2, v5) @signature `Lb/f;.a:(I[BII)Z` @kind virtual;
  #L121002.  v0:= temp;
  #L121004.  return v0;
}
procedure `boolean` `a`(`b.f` v1 @kind this, `int` v2 , `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lb/f;.a:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L121018.  if v2 < 0 then goto L121048;
  #L12101c.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L121020.  v0:= length @variable v0;
  #L121022.  v0:= v0 - v5 @kind int;
  #L121024.  if v2 > v0 then goto L121048;
  #L121028.  if v4 < 0 then goto L121048;
  #L12102c.  v0:= length @variable v3;
  #L12102e.  v0:= v0 - v5 @kind int;
  #L121030.  if v4 > v0 then goto L121048;
  #L121034.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L121038.  call temp:= `a`(v0, v2, v3, v4, v5) @signature `Lb/t;.a:([BI[BII)Z` @kind static;
  #L12103e.  v0:= temp;
  #L121040.  if v0 == 0 then goto L121048;
  #L121044.  v0:= 1I;
  #L121046.  return v0;
  #L121048.  v0:= 0I;
  #L12104a.  goto L121046;
}
procedure `boolean` `a`(`b.f` v2 @kind this, `b.f` v3 @kind object) @signature `Lb/f;.a:(Lb/f;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L12105c.  v1:= 0I;
  #L12105e.  call temp:= `g`(v3) @signature `Lb/f;.g:()I` @kind virtual;
  #L121064.  v0:= temp;
  #L121066.  call temp:= `a`(v2, v1, v3, v1, v0) @signature `Lb/f;.a:(ILb/f;II)Z` @kind virtual;
  #L12106c.  v0:= temp;
  #L12106e.  return v0;
}
procedure `int` `b`(`b.f` v9 @kind this, `b.f` v10 @kind object) @signature `Lb/f;.b:(Lb/f;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L121080.  v1:= 1I;
  #L121082.  v2:= 0I;
  #L121084.  v0:= -1I;
  #L121086.  call temp:= `g`(v9) @signature `Lb/f;.g:()I` @kind virtual;
  #L12108c.  v4:= temp;
  #L12108e.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L121094.  v5:= temp;
  #L121096.  call temp:= `min`(v4, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L12109c.  v6:= temp;
  #L12109e.  v3:= v2;
  #L1210a0.  if v3 >= v6 then goto L1210d0;
  #L1210a4.  call temp:= `a`(v9, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L1210aa.  v7:= temp;
  #L1210ac.  v7:= v7 ^& 255;
  #L1210b0.  call temp:= `a`(v10, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L1210b6.  v8:= temp;
  #L1210b8.  v8:= v8 ^& 255;
  #L1210bc.  if v7 != v8 then goto L1210c6;
  #L1210c0.  v3:= v3 + 1;
  #L1210c4.  goto L1210a0;
  #L1210c6.  if v7 >= v8 then goto L1210cc;
  #L1210ca.  return v0;
  #L1210cc.  v0:= v1;
  #L1210ce.  goto L1210ca;
  #L1210d0.  if v4 != v5 then goto L1210d8;
  #L1210d4.  v0:= v2;
  #L1210d6.  goto L1210ca;
  #L1210d8.  if v4 < v5 then goto L1210ca;
  #L1210dc.  v0:= v1;
  #L1210de.  goto L1210ca;
}
procedure `java.lang.String` `b`(`b.f` v1 @kind this) @signature `Lb/f;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1210f0.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L1210f4.  call temp:= `a`(v0) @signature `Lb/b;.a:([B)Ljava/lang/String;` @kind static;
  #L1210fa.  v0:= temp @kind object;
  #L1210fc.  return v0 @kind object;
}
procedure `b.f` `c`(`b.f` v1 @kind this) @signature `Lb/f;.c:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L121110.  v0:= "SHA-1" @kind object;
  #L121114.  call temp:= `c`(v1, v0) @signature `Lb/f;.c:(Ljava/lang/String;)Lb/f;` @kind direct;
  #L12111a.  v0:= temp @kind object;
  #L12111c.  return v0 @kind object;
}
procedure `int` `compareTo`(`b.f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lb/f;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L121130.  v2:= (`b.f`) v2 @kind object;
  #L121134.  call temp:= `b`(v1, v2) @signature `Lb/f;.b:(Lb/f;)I` @kind virtual;
  #L12113a.  v0:= temp;
  #L12113c.  return v0;
}
procedure `b.f` `d`(`b.f` v1 @kind this) @signature `Lb/f;.d:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L121150.  v0:= "SHA-256" @kind object;
  #L121154.  call temp:= `c`(v1, v0) @signature `Lb/f;.c:(Ljava/lang/String;)Lb/f;` @kind direct;
  #L12115a.  v0:= temp @kind object;
  #L12115c.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`b.f` v9 @kind this) @signature `Lb/f;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L121170.  v0:= 0I;
  #L121172.  v1:= v9.`b.f.c` @type ^`byte`[] @kind object;
  #L121176.  v1:= length @variable v1;
  #L121178.  v1:= v1 * 2;
  #L12117c.  v2:= new `char`[v1];
  #L121180.  v3:= v9.`b.f.c` @type ^`byte`[] @kind object;
  #L121184.  v4:= length @variable v3;
  #L121186.  v1:= v0;
  #L121188.  if v0 >= v4 then goto L1211c2;
  #L12118c.  v5:= v3[v0] @kind byte;
  #L121190.  v6:= v1 + 1;
  #L121194.  v7:= `@@b.f.a` @type ^`char`[] @kind object;
  #L121198.  v8:= v5 ^> 4;
  #L12119c.  v8:= v8 ^& 15;
  #L1211a0.  v7:= v7[v8] @kind char;
  #L1211a4.  v2[v1]:= v7 @kind char;
  #L1211a8.  v1:= v6 + 1;
  #L1211ac.  v7:= `@@b.f.a` @type ^`char`[] @kind object;
  #L1211b0.  v5:= v5 ^& 15;
  #L1211b4.  v5:= v7[v5] @kind char;
  #L1211b8.  v2[v6]:= v5 @kind char;
  #L1211bc.  v0:= v0 + 1;
  #L1211c0.  goto L121188;
  #L1211c2.  v0:= new `java.lang.String`;
  #L1211c6.  call `<init>`(v0, v2) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L1211cc.  return v0 @kind object;
}
procedure `boolean` `equals`(`b.f` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lb/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1211e0.  v1:= 1I;
  #L1211e2.  v2:= 0I;
  #L1211e4.  if v5 != v4 then goto L1211ea;
  #L1211e8.  return v1;
  #L1211ea.  v0:= instanceof @variable v5 @type ^`b.f` @kind boolean;
  #L1211ee.  if v0 == 0 then goto L12122a;
  #L1211f2.  v0:= v5 @kind object;
  #L1211f4.  v0:= (`b.f`) v0 @kind object;
  #L1211f8.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L1211fe.  v0:= temp;
  #L121200.  v3:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L121204.  v3:= length @variable v3;
  #L121206.  if v0 != v3 then goto L12122a;
  #L12120a.  v5:= (`b.f`) v5 @kind object;
  #L12120e.  v0:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L121212.  v3:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L121216.  v3:= length @variable v3;
  #L121218.  call temp:= `a`(v5, v2, v0, v2, v3) @signature `Lb/f;.a:(I[BII)Z` @kind virtual;
  #L12121e.  v0:= temp;
  #L121220.  if v0 == 0 then goto L12122a;
  #L121224.  v0:= v1;
  #L121226.  v1:= v0;
  #L121228.  goto L1211e8;
  #L12122a.  v0:= v2;
  #L12122c.  goto L121226;
}
procedure `b.f` `f`(`b.f` v6 @kind this) @signature `Lb/f;.f:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L121240.  v5:= 90I;
  #L121244.  v4:= 65I;
  #L121248.  v0:= 0I;
  #L12124a.  v1:= v0;
  #L12124c.  v0:= v6.`b.f.c` @type ^`byte`[] @kind object;
  #L121250.  v0:= length @variable v0;
  #L121252.  if v1 >= v0 then goto L1212bc;
  #L121256.  v0:= v6.`b.f.c` @type ^`byte`[] @kind object;
  #L12125a.  v3:= v0[v1] @kind byte;
  #L12125e.  if v3 < v4 then goto L121266;
  #L121262.  if v3 <= v5 then goto L12126e;
  #L121266.  v0:= v1 + 1;
  #L12126a.  v1:= v0;
  #L12126c.  goto L12124c;
  #L12126e.  v0:= v6.`b.f.c` @type ^`byte`[] @kind object;
  #L121272.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L121278.  v0:= temp @kind object;
  #L12127a.  v0:= (`byte`[]) v0 @kind object;
  #L12127e.  v2:= v1 + 1;
  #L121282.  v3:= v3 + 32;
  #L121286.  v3:= (`byte`) v3 @kind i2b;
  #L121288.  v0[v1]:= v3 @kind byte;
  #L12128c.  v1:= v2;
  #L12128e.  v2:= length @variable v0;
  #L121290.  if v1 >= v2 then goto L1212b2;
  #L121294.  v2:= v0[v1] @kind byte;
  #L121298.  if v2 < v4 then goto L1212a0;
  #L12129c.  if v2 <= v5 then goto L1212a6;
  #L1212a0.  v1:= v1 + 1;
  #L1212a4.  goto L12128e;
  #L1212a6.  v2:= v2 + 32;
  #L1212aa.  v2:= (`byte`) v2 @kind i2b;
  #L1212ac.  v0[v1]:= v2 @kind byte;
  #L1212b0.  goto L1212a0;
  #L1212b2.  v6:= new `b.f`;
  #L1212b6.  call `<init>`(v6, v0) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L1212bc.  return v6 @kind object;
}
procedure `int` `g`(`b.f` v1 @kind this) @signature `Lb/f;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1212d0.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L1212d4.  v0:= length @variable v0;
  #L1212d6.  return v0;
}
procedure `byte`[] `h`(`b.f` v1 @kind this) @signature `Lb/f;.h:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1212e8.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L1212ec.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L1212f2.  v0:= temp @kind object;
  #L1212f4.  v0:= (`byte`[]) v0 @kind object;
  #L1212f8.  return v0 @kind object;
}
procedure `int` `hashCode`(`b.f` v1 @kind this) @signature `Lb/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12130c.  v0:= v1.`b.f.d` @type ^`int`;
  #L121310.  if v0 == 0 then goto L121316;
  #L121314.  return v0;
  #L121316.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L12131a.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L121320.  v0:= temp;
  #L121322.  v1.`b.f.d` @type ^`int` := v0;
  #L121326.  goto L121314;
}
procedure `java.lang.String` `toString`(`b.f` v5 @kind this) @signature `Lb/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L121338.  v4:= 0I;
  #L12133a.  v3:= 64I;
  #L12133e.  v0:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L121342.  v0:= length @variable v0;
  #L121344.  if v0 != 0 then goto L12134e;
  #L121348.  v0:= "[size=0]" @kind object;
  #L12134c.  return v0 @kind object;
  #L12134e.  call temp:= `a`(v5) @signature `Lb/f;.a:()Ljava/lang/String;` @kind virtual;
  #L121354.  v0:= temp @kind object;
  #L121356.  call temp:= `a`(v0, v3) @signature `Lb/f;.a:(Ljava/lang/String;I)I` @kind static;
  #L12135c.  v1:= temp;
  #L12135e.  v2:= -1I;
  #L121360.  if v1 != v2 then goto L121408;
  #L121364.  v0:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L121368.  v0:= length @variable v0;
  #L12136a.  if v0 > v3 then goto L1213aa;
  #L12136e.  v0:= new `java.lang.StringBuilder`;
  #L121372.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L121378.  v1:= "[hex=" @kind object;
  #L12137c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L121382.  v0:= temp @kind object;
  #L121384.  call temp:= `e`(v5) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L12138a.  v1:= temp @kind object;
  #L12138c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L121392.  v0:= temp @kind object;
  #L121394.  v1:= "]" @kind object;
  #L121398.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12139e.  v0:= temp @kind object;
  #L1213a0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1213a6.  v0:= temp @kind object;
  #L1213a8.  goto L12134c;
  #L1213aa.  v0:= new `java.lang.StringBuilder`;
  #L1213ae.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1213b4.  v1:= "[size=" @kind object;
  #L1213b8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1213be.  v0:= temp @kind object;
  #L1213c0.  v1:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L1213c4.  v1:= length @variable v1;
  #L1213c6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1213cc.  v0:= temp @kind object;
  #L1213ce.  v1:= " hex=" @kind object;
  #L1213d2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1213d8.  v0:= temp @kind object;
  #L1213da.  call temp:= `a`(v5, v4, v3) @signature `Lb/f;.a:(II)Lb/f;` @kind virtual;
  #L1213e0.  v1:= temp @kind object;
  #L1213e2.  call temp:= `e`(v1) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L1213e8.  v1:= temp @kind object;
  #L1213ea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1213f0.  v0:= temp @kind object;
  #L1213f2.  v1:= "…]" @kind object;
  #L1213f6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1213fc.  v0:= temp @kind object;
  #L1213fe.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L121404.  v0:= temp @kind object;
  #L121406.  goto L12134c;
  #L121408.  call temp:= `substring`(v0, v4, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L12140e.  v2:= temp @kind object;
  #L121410.  v3:= "\\" @kind object;
  #L121414.  v4:= "\\\\" @kind object;
  #L121418.  call temp:= `replace`(v2, v3, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L12141e.  v2:= temp @kind object;
  #L121420.  v3:= "\n" @kind object;
  #L121424.  v4:= "\\n" @kind object;
  #L121428.  call temp:= `replace`(v2, v3, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L12142e.  v2:= temp @kind object;
  #L121430.  v3:= "\r" @kind object;
  #L121434.  v4:= "\\r" @kind object;
  #L121438.  call temp:= `replace`(v2, v3, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L12143e.  v2:= temp @kind object;
  #L121440.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L121446.  v0:= temp;
  #L121448.  if v1 >= v0 then goto L12149c;
  #L12144c.  v0:= new `java.lang.StringBuilder`;
  #L121450.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L121456.  v1:= "[size=" @kind object;
  #L12145a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L121460.  v0:= temp @kind object;
  #L121462.  v1:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L121466.  v1:= length @variable v1;
  #L121468.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L12146e.  v0:= temp @kind object;
  #L121470.  v1:= " text=" @kind object;
  #L121474.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12147a.  v0:= temp @kind object;
  #L12147c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L121482.  v0:= temp @kind object;
  #L121484.  v1:= "…]" @kind object;
  #L121488.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12148e.  v0:= temp @kind object;
  #L121490.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L121496.  v0:= temp @kind object;
  #L121498.  goto L12134c;
  #L12149c.  v0:= new `java.lang.StringBuilder`;
  #L1214a0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1214a6.  v1:= "[text=" @kind object;
  #L1214aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1214b0.  v0:= temp @kind object;
  #L1214b2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1214b8.  v0:= temp @kind object;
  #L1214ba.  v1:= "]" @kind object;
  #L1214be.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1214c4.  v0:= temp @kind object;
  #L1214c6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1214cc.  v0:= temp @kind object;
  #L1214ce.  goto L12134c;
}
