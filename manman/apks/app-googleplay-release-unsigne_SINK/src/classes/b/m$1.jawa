record `b.m$1` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `b.m` `b.m$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.m$1` v0 @kind this, `b.m` v1 @kind object) @signature `Lb/m$1;.<init>:(Lb/m;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1227c8.  v0.`b.m$1.a` @type ^`b.m` := v1 @kind object;
  #L1227cc.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L1227d2.  return @kind void;
}
procedure `int` `available`(`b.m$1` v4 @kind this) @signature `Lb/m$1;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1227e4.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L1227e8.  v0:= v0.`b.m.c` @type ^`boolean` @kind boolean;
  #L1227ec.  if v0 == 0 then goto L122800;
  #L1227f0.  v0:= new `java.io.IOException`;
  #L1227f4.  v1:= "closed" @kind object;
  #L1227f8.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1227fe.  throw v0;
  #L122800.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L122804.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L122808.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L12280c.  v2:= 2147483647L;
  #L122812.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L122818.  v0:= temp @kind wide;
  #L12281a.  v0:= (`int`) v0 @kind l2i;
  #L12281c.  return v0;
}
procedure `void` `close`(`b.m$1` v1 @kind this) @signature `Lb/m$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L122830.  v0:= v1.`b.m$1.a` @type ^`b.m` @kind object;
  #L122834.  call `close`(v0) @signature `Lb/m;.close:()V` @kind virtual;
  #L12283a.  return @kind void;
}
procedure `int` `read`(`b.m$1` v4 @kind this) @signature `Lb/m$1;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L12284c.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L122850.  v0:= v0.`b.m.c` @type ^`boolean` @kind boolean;
  #L122854.  if v0 == 0 then goto L122868;
  #L122858.  v0:= new `java.io.IOException`;
  #L12285c.  v1:= "closed" @kind object;
  #L122860.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122866.  throw v0;
  #L122868.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L12286c.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L122870.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L122874.  v2:= 0L;
  #L122878.  v0:= lcmp(v0, v2);
  #L12287c.  if v0 != 0 then goto L1228ac;
  #L122880.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L122884.  v0:= v0.`b.m.b` @type ^`b.r` @kind object;
  #L122888.  v1:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L12288c.  v1:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L122890.  v2:= 8192L;
  #L122894.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L12289a.  v0:= temp @kind wide;
  #L12289c.  v2:= -1L;
  #L1228a0.  v0:= lcmp(v0, v2);
  #L1228a4.  if v0 != 0 then goto L1228ac;
  #L1228a8.  v0:= -1I;
  #L1228aa.  return v0;
  #L1228ac.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L1228b0.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L1228b4.  call temp:= `h`(v0) @signature `Lb/c;.h:()B` @kind virtual;
  #L1228ba.  v0:= temp;
  #L1228bc.  v0:= v0 ^& 255;
  #L1228c0.  goto L1228aa;
}
procedure `int` `read`(`b.m$1` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lb/m$1;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1228d4.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L1228d8.  v0:= v0.`b.m.c` @type ^`boolean` @kind boolean;
  #L1228dc.  if v0 == 0 then goto L1228f0;
  #L1228e0.  v0:= new `java.io.IOException`;
  #L1228e4.  v1:= "closed" @kind object;
  #L1228e8.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1228ee.  throw v0;
  #L1228f0.  v0:= length @variable v7;
  #L1228f2.  v0:= (`long`) v0 @kind i2l;
  #L1228f4.  v2:= (`long`) v8 @kind i2l;
  #L1228f6.  v4:= (`long`) v9 @kind i2l;
  #L1228f8.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L1228fe.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L122902.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L122906.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L12290a.  v2:= 0L;
  #L12290e.  v0:= lcmp(v0, v2);
  #L122912.  if v0 != 0 then goto L122942;
  #L122916.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L12291a.  v0:= v0.`b.m.b` @type ^`b.r` @kind object;
  #L12291e.  v1:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L122922.  v1:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L122926.  v2:= 8192L;
  #L12292a.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L122930.  v0:= temp @kind wide;
  #L122932.  v2:= -1L;
  #L122936.  v0:= lcmp(v0, v2);
  #L12293a.  if v0 != 0 then goto L122942;
  #L12293e.  v0:= -1I;
  #L122940.  return v0;
  #L122942.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L122946.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L12294a.  call temp:= `a`(v0, v7, v8, v9) @signature `Lb/c;.a:([BII)I` @kind virtual;
  #L122950.  v0:= temp;
  #L122952.  goto L122940;
}
procedure `java.lang.String` `toString`(`b.m$1` v2 @kind this) @signature `Lb/m$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L122964.  v0:= new `java.lang.StringBuilder`;
  #L122968.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12296e.  v1:= v2.`b.m$1.a` @type ^`b.m` @kind object;
  #L122972.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L122978.  v0:= temp @kind object;
  #L12297a.  v1:= ".inputStream()" @kind object;
  #L12297e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L122984.  v0:= temp @kind object;
  #L122986.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12298c.  v0:= temp @kind object;
  #L12298e.  return v0 @kind object;
}
