record `b.p` @kind class @AccessFlag FINAL extends `b.f` @kind class {
  `byte`[][] `b.p.f` @AccessFlag FINAL_TRANSIENT;
  `int`[] `b.p.g` @AccessFlag FINAL_TRANSIENT;
}
procedure `void` `<init>`(`b.p` v7 @kind this, `b.c` v8 @kind object, `int` v9 ) @signature `Lb/p;.<init>:(Lb/c;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L12353c.  v6:= 0I;
  #L12353e.  v0:= 0I;
  #L123540.  call `<init>`(v7, v0) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L123546.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L12354a.  v2:= 0L;
  #L12354e.  v4:= (`long`) v9 @kind i2l;
  #L123550.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L123556.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L12355a.  v1:= v6;
  #L12355c.  v2:= v6;
  #L12355e.  if v2 >= v9 then goto L123594;
  #L123562.  v3:= v0.`b.n.c` @type ^`int`;
  #L123566.  v4:= v0.`b.n.b` @type ^`int`;
  #L12356a.  if v3 != v4 then goto L12357e;
  #L12356e.  v0:= new `java.lang.AssertionError`;
  #L123572.  v1:= "s.limit == s.pos" @kind object;
  #L123576.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L12357c.  throw v0;
  #L12357e.  v3:= v0.`b.n.c` @type ^`int`;
  #L123582.  v4:= v0.`b.n.b` @type ^`int`;
  #L123586.  v3:= v3 - v4 @kind int;
  #L123588.  v2:= v2 + v3 @kind int;
  #L12358a.  v1:= v1 + 1;
  #L12358e.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L123592.  goto L12355e;
  #L123594.  v0:= new `byte`[][v1];
  #L123598.  v7.`b.p.f` @type ^`byte`[][] := v0 @kind object;
  #L12359c.  v0:= v1 * 2;
  #L1235a0.  v0:= new `int`[v0];
  #L1235a4.  v7.`b.p.g` @type ^`int`[] := v0 @kind object;
  #L1235a8.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L1235ac.  v1:= v0 @kind object;
  #L1235ae.  v2:= v6;
  #L1235b0.  if v6 >= v9 then goto L123600;
  #L1235b4.  v0:= v7.`b.p.f` @type ^`byte`[][] @kind object;
  #L1235b8.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L1235bc.  v0[v2]:= v3 @kind object;
  #L1235c0.  v0:= v1.`b.n.c` @type ^`int`;
  #L1235c4.  v3:= v1.`b.n.b` @type ^`int`;
  #L1235c8.  v0:= v0 - v3 @kind int;
  #L1235ca.  v0:= v0 + v6 @kind int;
  #L1235cc.  if v0 <= v9 then goto L1235d2;
  #L1235d0.  v0:= v9;
  #L1235d2.  v3:= v7.`b.p.g` @type ^`int`[] @kind object;
  #L1235d6.  v3[v2]:= v0;
  #L1235da.  v3:= v7.`b.p.g` @type ^`int`[] @kind object;
  #L1235de.  v4:= v7.`b.p.f` @type ^`byte`[][] @kind object;
  #L1235e2.  v4:= length @variable v4;
  #L1235e4.  v4:= v4 + v2 @kind int;
  #L1235e6.  v5:= v1.`b.n.b` @type ^`int`;
  #L1235ea.  v3[v4]:= v5;
  #L1235ee.  v3:= 1I;
  #L1235f0.  v1.`b.n.d` @type ^`boolean` := v3 @kind boolean;
  #L1235f4.  v2:= v2 + 1;
  #L1235f8.  v1:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L1235fc.  v6:= v0;
  #L1235fe.  goto L1235b0;
  #L123600.  return @kind void;
}
procedure `int` `b`(`b.p` v4 @kind this, `int` v5 ) @signature `Lb/p;.b:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L123614.  v0:= v4.`b.p.g` @type ^`int`[] @kind object;
  #L123618.  v1:= 0I;
  #L12361a.  v2:= v4.`b.p.f` @type ^`byte`[][] @kind object;
  #L12361e.  v2:= length @variable v2;
  #L123620.  v3:= v5 + 1;
  #L123624.  call temp:= `binarySearch`(v0, v1, v2, v3) @signature `Ljava/util/Arrays;.binarySearch:([IIII)I` @kind static;
  #L12362a.  v0:= temp;
  #L12362c.  if v0 < 0 then goto L123632;
  #L123630.  return v0;
  #L123632.  v0:= v0 ^~ -1;
  #L123636.  goto L123630;
}
procedure `b.f` `i`(`b.p` v2 @kind this) @signature `Lb/p;.i:()Lb/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L123648.  v0:= new `b.f`;
  #L12364c.  call temp:= `h`(v2) @signature `Lb/p;.h:()[B` @kind virtual;
  #L123652.  v1:= temp @kind object;
  #L123654.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L12365a.  return v0 @kind object;
}
procedure `byte` `a`(`b.p` v6 @kind this, `int` v7 ) @signature `Lb/p;.a:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L12366c.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L123670.  v1:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L123674.  v1:= length @variable v1;
  #L123676.  v1:= v1 + -1;
  #L12367a.  v0:= v0[v1];
  #L12367e.  v0:= (`long`) v0 @kind i2l;
  #L123680.  v2:= (`long`) v7 @kind i2l;
  #L123682.  v4:= 1L;
  #L123686.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L12368c.  call temp:= `b`(v6, v7) @signature `Lb/p;.b:(I)I` @kind direct;
  #L123692.  v1:= temp;
  #L123694.  if v1 != 0 then goto L1236be;
  #L123698.  v0:= 0I;
  #L12369a.  v2:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L12369e.  v3:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L1236a2.  v3:= length @variable v3;
  #L1236a4.  v3:= v3 + v1 @kind int;
  #L1236a6.  v2:= v2[v3];
  #L1236aa.  v3:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L1236ae.  v1:= v3[v1] @kind object;
  #L1236b2.  v0:= v7 - v0 @kind int;
  #L1236b6.  v0:= v0 + v2 @kind int;
  #L1236b8.  v0:= v1[v0] @kind byte;
  #L1236bc.  return v0;
  #L1236be.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L1236c2.  v2:= v1 + -1;
  #L1236c6.  v0:= v0[v2];
  #L1236ca.  goto L12369a;
}
procedure `b.f` `a`(`b.p` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lb/p;.a:(II)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1236dc.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L1236e2.  v0:= temp @kind object;
  #L1236e4.  call temp:= `a`(v0, v2, v3) @signature `Lb/f;.a:(II)Lb/f;` @kind virtual;
  #L1236ea.  v0:= temp @kind object;
  #L1236ec.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`b.p` v1 @kind this) @signature `Lb/p;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L123700.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L123706.  v0:= temp @kind object;
  #L123708.  call temp:= `a`(v0) @signature `Lb/f;.a:()Ljava/lang/String;` @kind virtual;
  #L12370e.  v0:= temp @kind object;
  #L123710.  return v0 @kind object;
}
procedure `void` `a`(`b.p` v8 @kind this, `b.c` v9 @kind object) @signature `Lb/p;.a:(Lb/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L123724.  v0:= 0I;
  #L123726.  v1:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L12372a.  v3:= length @variable v1;
  #L12372c.  v1:= v0;
  #L12372e.  if v0 >= v3 then goto L12378c;
  #L123732.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L123736.  v4:= v3 + v0 @kind int;
  #L12373a.  v4:= v2[v4];
  #L12373e.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L123742.  v2:= v2[v0];
  #L123746.  v5:= new `b.n`;
  #L12374a.  v6:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L12374e.  v6:= v6[v0] @kind object;
  #L123752.  v7:= v4 + v2 @kind int;
  #L123756.  v1:= v7 - v1 @kind int;
  #L12375a.  call `<init>`(v5, v6, v4, v1) @signature `Lb/n;.<init>:([BII)V` @kind direct;
  #L123760.  v1:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L123764.  if v1 != 0 then goto L12377c;
  #L123768.  v5.`b.n.g` @type ^`b.n` := v5 @kind object;
  #L12376c.  v5.`b.n.f` @type ^`b.n` := v5 @kind object;
  #L123770.  v9.`b.c.a` @type ^`b.n` := v5 @kind object;
  #L123774.  v0:= v0 + 1;
  #L123778.  v1:= v2;
  #L12377a.  goto L12372e;
  #L12377c.  v1:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L123780.  v1:= v1.`b.n.g` @type ^`b.n` @kind object;
  #L123784.  call temp:= `a`(v1, v5) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L12378a.  goto L123774;
  #L12378c.  v2:= v9.`b.c.b` @type ^`long` @kind wide;
  #L123790.  v0:= (`long`) v1 @kind i2l;
  #L123792.  v0:= v0 + v2 @kind long;
  #L123794.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L123798.  return @kind void;
}
procedure `boolean` `a`(`b.p` v6 @kind this, `int` v7 , `b.f` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lb/p;.a:(ILb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1237ac.  v1:= 0I;
  #L1237ae.  if v7 < 0 then goto L1237c0;
  #L1237b2.  call temp:= `g`(v6) @signature `Lb/p;.g:()I` @kind virtual;
  #L1237b8.  v0:= temp;
  #L1237ba.  v0:= v0 - v10 @kind int;
  #L1237bc.  if v7 <= v0 then goto L1237c2;
  #L1237c0.  return v1;
  #L1237c2.  call temp:= `b`(v6, v7) @signature `Lb/p;.b:(I)I` @kind direct;
  #L1237c8.  v0:= temp;
  #L1237ca.  v2:= v0;
  #L1237cc.  if v10 <= 0 then goto L123832;
  #L1237d0.  if v2 != 0 then goto L123824;
  #L1237d4.  v0:= v1;
  #L1237d6.  v3:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L1237da.  v3:= v3[v2];
  #L1237de.  v3:= v3 - v0 @kind int;
  #L1237e0.  v3:= v3 + v0 @kind int;
  #L1237e2.  v3:= v3 - v7 @kind int;
  #L1237e4.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1237ea.  v3:= temp;
  #L1237ec.  v4:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L1237f0.  v5:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L1237f4.  v5:= length @variable v5;
  #L1237f6.  v5:= v5 + v2 @kind int;
  #L1237f8.  v4:= v4[v5];
  #L1237fc.  v0:= v7 - v0 @kind int;
  #L123800.  v0:= v0 + v4 @kind int;
  #L123802.  v4:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L123806.  v4:= v4[v2] @kind object;
  #L12380a.  call temp:= `a`(v8, v9, v4, v0, v3) @signature `Lb/f;.a:(I[BII)Z` @kind virtual;
  #L123810.  v0:= temp;
  #L123812.  if v0 == 0 then goto L1237c0;
  #L123816.  v7:= v7 + v3 @kind int;
  #L123818.  v9:= v9 + v3 @kind int;
  #L12381a.  v10:= v10 - v3 @kind int;
  #L12381c.  v0:= v2 + 1;
  #L123820.  v2:= v0;
  #L123822.  goto L1237cc;
  #L123824.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L123828.  v3:= v2 + -1;
  #L12382c.  v0:= v0[v3];
  #L123830.  goto L1237d6;
  #L123832.  v1:= 1I;
  #L123834.  goto L1237c0;
}
procedure `boolean` `a`(`b.p` v6 @kind this, `int` v7 , `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lb/p;.a:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L123848.  v1:= 0I;
  #L12384a.  if v7 < 0 then goto L123868;
  #L12384e.  call temp:= `g`(v6) @signature `Lb/p;.g:()I` @kind virtual;
  #L123854.  v0:= temp;
  #L123856.  v0:= v0 - v10 @kind int;
  #L123858.  if v7 > v0 then goto L123868;
  #L12385c.  if v9 < 0 then goto L123868;
  #L123860.  v0:= length @variable v8;
  #L123862.  v0:= v0 - v10 @kind int;
  #L123864.  if v9 <= v0 then goto L12386a;
  #L123868.  return v1;
  #L12386a.  call temp:= `b`(v6, v7) @signature `Lb/p;.b:(I)I` @kind direct;
  #L123870.  v0:= temp;
  #L123872.  v2:= v0;
  #L123874.  if v10 <= 0 then goto L1238da;
  #L123878.  if v2 != 0 then goto L1238cc;
  #L12387c.  v0:= v1;
  #L12387e.  v3:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L123882.  v3:= v3[v2];
  #L123886.  v3:= v3 - v0 @kind int;
  #L123888.  v3:= v3 + v0 @kind int;
  #L12388a.  v3:= v3 - v7 @kind int;
  #L12388c.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L123892.  v3:= temp;
  #L123894.  v4:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L123898.  v5:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L12389c.  v5:= length @variable v5;
  #L12389e.  v5:= v5 + v2 @kind int;
  #L1238a0.  v4:= v4[v5];
  #L1238a4.  v0:= v7 - v0 @kind int;
  #L1238a8.  v0:= v0 + v4 @kind int;
  #L1238aa.  v4:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L1238ae.  v4:= v4[v2] @kind object;
  #L1238b2.  call temp:= `a`(v4, v0, v8, v9, v3) @signature `Lb/t;.a:([BI[BII)Z` @kind static;
  #L1238b8.  v0:= temp;
  #L1238ba.  if v0 == 0 then goto L123868;
  #L1238be.  v7:= v7 + v3 @kind int;
  #L1238c0.  v9:= v9 + v3 @kind int;
  #L1238c2.  v10:= v10 - v3 @kind int;
  #L1238c4.  v0:= v2 + 1;
  #L1238c8.  v2:= v0;
  #L1238ca.  goto L123874;
  #L1238cc.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L1238d0.  v3:= v2 + -1;
  #L1238d4.  v0:= v0[v3];
  #L1238d8.  goto L12387e;
  #L1238da.  v1:= 1I;
  #L1238dc.  goto L123868;
}
procedure `java.lang.String` `b`(`b.p` v1 @kind this) @signature `Lb/p;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1238f0.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L1238f6.  v0:= temp @kind object;
  #L1238f8.  call temp:= `b`(v0) @signature `Lb/f;.b:()Ljava/lang/String;` @kind virtual;
  #L1238fe.  v0:= temp @kind object;
  #L123900.  return v0 @kind object;
}
procedure `b.f` `c`(`b.p` v1 @kind this) @signature `Lb/p;.c:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L123914.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L12391a.  v0:= temp @kind object;
  #L12391c.  call temp:= `c`(v0) @signature `Lb/f;.c:()Lb/f;` @kind virtual;
  #L123922.  v0:= temp @kind object;
  #L123924.  return v0 @kind object;
}
procedure `b.f` `d`(`b.p` v1 @kind this) @signature `Lb/p;.d:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L123938.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L12393e.  v0:= temp @kind object;
  #L123940.  call temp:= `d`(v0) @signature `Lb/f;.d:()Lb/f;` @kind virtual;
  #L123946.  v0:= temp @kind object;
  #L123948.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`b.p` v1 @kind this) @signature `Lb/p;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12395c.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L123962.  v0:= temp @kind object;
  #L123964.  call temp:= `e`(v0) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L12396a.  v0:= temp @kind object;
  #L12396c.  return v0 @kind object;
}
procedure `boolean` `equals`(`b.p` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lb/p;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L123980.  v1:= 1I;
  #L123982.  v2:= 0I;
  #L123984.  if v5 != v4 then goto L12398a;
  #L123988.  return v1;
  #L12398a.  v0:= instanceof @variable v5 @type ^`b.f` @kind boolean;
  #L12398e.  if v0 == 0 then goto L1239ca;
  #L123992.  v0:= v5 @kind object;
  #L123994.  v0:= (`b.f`) v0 @kind object;
  #L123998.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L12399e.  v0:= temp;
  #L1239a0.  call temp:= `g`(v4) @signature `Lb/p;.g:()I` @kind virtual;
  #L1239a6.  v3:= temp;
  #L1239a8.  if v0 != v3 then goto L1239ca;
  #L1239ac.  v5:= (`b.f`) v5 @kind object;
  #L1239b0.  call temp:= `g`(v4) @signature `Lb/p;.g:()I` @kind virtual;
  #L1239b6.  v0:= temp;
  #L1239b8.  call temp:= `a`(v4, v2, v5, v2, v0) @signature `Lb/p;.a:(ILb/f;II)Z` @kind virtual;
  #L1239be.  v0:= temp;
  #L1239c0.  if v0 == 0 then goto L1239ca;
  #L1239c4.  v0:= v1;
  #L1239c6.  v1:= v0;
  #L1239c8.  goto L123988;
  #L1239ca.  v0:= v2;
  #L1239cc.  goto L1239c6;
}
procedure `b.f` `f`(`b.p` v1 @kind this) @signature `Lb/p;.f:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1239e0.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L1239e6.  v0:= temp @kind object;
  #L1239e8.  call temp:= `f`(v0) @signature `Lb/f;.f:()Lb/f;` @kind virtual;
  #L1239ee.  v0:= temp @kind object;
  #L1239f0.  return v0 @kind object;
}
procedure `int` `g`(`b.p` v2 @kind this) @signature `Lb/p;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L123a04.  v0:= v2.`b.p.g` @type ^`int`[] @kind object;
  #L123a08.  v1:= v2.`b.p.f` @type ^`byte`[][] @kind object;
  #L123a0c.  v1:= length @variable v1;
  #L123a0e.  v1:= v1 + -1;
  #L123a12.  v0:= v0[v1];
  #L123a16.  return v0;
}
procedure `byte`[] `h`(`b.p` v8 @kind this) @signature `Lb/p;.h:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L123a28.  v0:= 0I;
  #L123a2a.  v1:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L123a2e.  v2:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L123a32.  v2:= length @variable v2;
  #L123a34.  v2:= v2 + -1;
  #L123a38.  v1:= v1[v2];
  #L123a3c.  v3:= new `byte`[v1];
  #L123a40.  v1:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L123a44.  v4:= length @variable v1;
  #L123a46.  v1:= v0;
  #L123a48.  if v0 >= v4 then goto L123a7a;
  #L123a4c.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L123a50.  v5:= v4 + v0 @kind int;
  #L123a54.  v5:= v2[v5];
  #L123a58.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L123a5c.  v2:= v2[v0];
  #L123a60.  v6:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L123a64.  v6:= v6[v0] @kind object;
  #L123a68.  v7:= v2 - v1 @kind int;
  #L123a6c.  call `arraycopy`(v6, v5, v3, v1, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L123a72.  v0:= v0 + 1;
  #L123a76.  v1:= v2;
  #L123a78.  goto L123a48;
  #L123a7a.  return v3 @kind object;
}
procedure `int` `hashCode`(`b.p` v9 @kind this) @signature `Lb/p;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L123a8c.  v1:= 0I;
  #L123a8e.  v0:= v9.`b.p.d` @type ^`int`;
  #L123a92.  if v0 == 0 then goto L123a98;
  #L123a96.  return v0;
  #L123a98.  v0:= 1I;
  #L123a9a.  v2:= v9.`b.p.f` @type ^`byte`[][] @kind object;
  #L123a9e.  v5:= length @variable v2;
  #L123aa0.  v2:= v1;
  #L123aa2.  v3:= v1;
  #L123aa4.  if v2 >= v5 then goto L123af0;
  #L123aa8.  v1:= v9.`b.p.f` @type ^`byte`[][] @kind object;
  #L123aac.  v6:= v1[v2] @kind object;
  #L123ab0.  v1:= v9.`b.p.g` @type ^`int`[] @kind object;
  #L123ab4.  v4:= v5 + v2 @kind int;
  #L123ab8.  v1:= v1[v4];
  #L123abc.  v4:= v9.`b.p.g` @type ^`int`[] @kind object;
  #L123ac0.  v4:= v4[v2];
  #L123ac4.  v3:= v4 - v3 @kind int;
  #L123ac8.  v3:= v3 + v1 @kind int;
  #L123aca.  v8:= v1;
  #L123acc.  v1:= v0;
  #L123ace.  v0:= v8;
  #L123ad0.  if v0 >= v3 then goto L123ae4;
  #L123ad4.  v1:= v1 * 31;
  #L123ad8.  v7:= v6[v0] @kind byte;
  #L123adc.  v1:= v1 + v7 @kind int;
  #L123ade.  v0:= v0 + 1;
  #L123ae2.  goto L123ad0;
  #L123ae4.  v0:= v2 + 1;
  #L123ae8.  v2:= v0;
  #L123aea.  v3:= v4;
  #L123aec.  v0:= v1;
  #L123aee.  goto L123aa4;
  #L123af0.  v9.`b.p.d` @type ^`int` := v0;
  #L123af4.  goto L123a96;
}
procedure `java.lang.String` `toString`(`b.p` v1 @kind this) @signature `Lb/p;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L123b08.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L123b0e.  v0:= temp @kind object;
  #L123b10.  call temp:= `toString`(v0) @signature `Lb/f;.toString:()Ljava/lang/String;` @kind virtual;
  #L123b16.  v0:= temp @kind object;
  #L123b18.  return v0 @kind object;
}
