record `b.k$2` @kind class @AccessFlag FINAL extends `b.r` @kind interface {
  `b.s` `b.k$2.a` @AccessFlag FINAL_SYNTHETIC;
  `java.io.InputStream` `b.k$2.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.k$2` v0 @kind this, `b.s` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Lb/k$2;.<init>:(Lb/s;Ljava/io/InputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L121f38.  v0.`b.k$2.a` @type ^`b.s` := v1 @kind object;
  #L121f3c.  v0.`b.k$2.b` @type ^`java.io.InputStream` := v2 @kind object;
  #L121f40.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L121f46.  return @kind void;
}
procedure `long` `a`(`b.k$2` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `Lb/k$2;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L121f58.  v0:= 0L;
  #L121f5c.  v2:= lcmp(v8, v0);
  #L121f60.  if v2 >= 0 then goto L121f96;
  #L121f64.  v0:= new `java.lang.IllegalArgumentException`;
  #L121f68.  v1:= new `java.lang.StringBuilder`;
  #L121f6c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L121f72.  v2:= "byteCount < 0: " @kind object;
  #L121f76.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L121f7c.  v1:= temp @kind object;
  #L121f7e.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L121f84.  v1:= temp @kind object;
  #L121f86.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L121f8c.  v1:= temp @kind object;
  #L121f8e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L121f94.  throw v0;
  #L121f96.  v2:= lcmp(v8, v0);
  #L121f9a.  if v2 != 0 then goto L121fa0;
  #L121f9e.  return v0 @kind wide;
  #Try_start0.  
  #L121fa0.  v0:= v6.`b.k$2.a` @type ^`b.s` @kind object;
  #L121fa4.  call `g`(v0) @signature `Lb/s;.g:()V` @kind virtual;
  #L121faa.  v0:= 1I;
  #L121fac.  call temp:= `e`(v7, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L121fb2.  v0:= temp @kind object;
  #L121fb4.  v1:= v0.`b.n.c` @type ^`int`;
  #L121fb8.  v1:= v1 - 8192;
  #L121fbc.  v2:= (`long`) v1 @kind i2l;
  #L121fbe.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L121fc4.  v2:= temp @kind wide;
  #L121fc6.  v1:= (`int`) v2 @kind l2i;
  #L121fc8.  v2:= v6.`b.k$2.b` @type ^`java.io.InputStream` @kind object;
  #L121fcc.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L121fd0.  v4:= v0.`b.n.c` @type ^`int`;
  #L121fd4.  call temp:= `read`(v2, v3, v4, v1) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L121fda.  v1:= temp;
  #L121fdc.  v2:= -1I;
  #L121fde.  if v1 != v2 then goto L121fe8;
  #L121fe2.  v0:= -1L;
  #L121fe6.  goto L121f9e;
  #L121fe8.  v2:= v0.`b.n.c` @type ^`int`;
  #L121fec.  v2:= v2 + v1 @kind int;
  #L121fee.  v0.`b.n.c` @type ^`int` := v2;
  #L121ff2.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L121ff6.  v4:= (`long`) v1 @kind i2l;
  #L121ff8.  v2:= v2 + v4 @kind long;
  #L121ffa.  v7.`b.c.b` @type ^`long` := v2 @kind wide;
  #Try_end0.  
  #L121ffe.  v0:= (`long`) v1 @kind i2l;
  #L122000.  goto L121f9e;
  #L122002.  v0:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L122004.  call temp:= `a`(v0) @signature `Lb/k;.a:(Ljava/lang/AssertionError;)Z` @kind static;
  #L12200a.  v1:= temp;
  #L12200c.  if v1 == 0 then goto L12201c;
  #L122010.  v1:= new `java.io.IOException`;
  #L122014.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L12201a.  throw v1;
  #L12201c.  throw v0;
  catch `java.lang.AssertionError` @[Try_start0..Try_end0] goto L122002;
}
procedure `b.s` `a`(`b.k$2` v1 @kind this) @signature `Lb/k$2;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L122040.  v0:= v1.`b.k$2.a` @type ^`b.s` @kind object;
  #L122044.  return v0 @kind object;
}
procedure `void` `close`(`b.k$2` v1 @kind this) @signature `Lb/k$2;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L122058.  v0:= v1.`b.k$2.b` @type ^`java.io.InputStream` @kind object;
  #L12205c.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L122062.  return @kind void;
}
procedure `java.lang.String` `toString`(`b.k$2` v2 @kind this) @signature `Lb/k$2;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L122074.  v0:= new `java.lang.StringBuilder`;
  #L122078.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12207e.  v1:= "source(" @kind object;
  #L122082.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L122088.  v0:= temp @kind object;
  #L12208a.  v1:= v2.`b.k$2.b` @type ^`java.io.InputStream` @kind object;
  #L12208e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L122094.  v0:= temp @kind object;
  #L122096.  v1:= ")" @kind object;
  #L12209a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1220a0.  v0:= temp @kind object;
  #L1220a2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1220a8.  v0:= temp @kind object;
  #L1220aa.  return v0 @kind object;
}
