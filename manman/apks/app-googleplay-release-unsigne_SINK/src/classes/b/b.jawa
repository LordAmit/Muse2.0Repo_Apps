record `b.b` @kind class @AccessFlag FINAL {
}
global `byte`[] `@@b.b.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@b.b.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L11ead0.  v1:= 64I;
  #L11ead4.  v0:= new `byte`[v1];
  #L11ead8.  goto L11eaf4;
  #L11eade.  `@@b.b.a` @type ^`byte`[] := v0 @kind object;
  #L11eae2.  v0:= new `byte`[v1];
  #L11eae6.  goto L11eb3c;
  #L11eaec.  `@@b.b.b` @type ^`byte`[] := v0 @kind object;
  #L11eaf0.  return @kind void;
  #L11eaf2.  
  #L11eaf4.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 43I, 47I) @kind object;
  #L11eb3b.  goto L11eade;
  #L11eb3c.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 45I, 95I) @kind object;
  #L11eb83.  goto L11eaec;
}
procedure `java.lang.String` `a`(`byte`[] v1 @kind object) @signature `Lb/b;.a:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L11eb94.  v0:= `@@b.b.a` @type ^`byte`[] @kind object;
  #L11eb98.  call temp:= `a`(v1, v0) @signature `Lb/b;.a:([B[B)Ljava/lang/String;` @kind static;
  #L11eb9e.  v0:= temp @kind object;
  #L11eba0.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`byte`[] v8 @kind object, `byte`[] v9 @kind object) @signature `Lb/b;.a:([B[B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11ebb4.  v0:= 0I;
  #L11ebb6.  v7:= 61I;
  #L11ebba.  v1:= length @variable v8;
  #L11ebbc.  v1:= v1 + 2;
  #L11ebc0.  v1:= v1 / 3;
  #L11ebc4.  v1:= v1 * 4;
  #L11ebc8.  v2:= new `byte`[v1];
  #L11ebcc.  v1:= length @variable v8;
  #L11ebce.  v3:= length @variable v8;
  #L11ebd0.  v3:= v3 %% 3;
  #L11ebd4.  v3:= v1 - v3 @kind int;
  #L11ebd8.  v1:= v0;
  #L11ebda.  if v0 >= v3 then goto L11ec6c;
  #L11ebde.  v4:= v1 + 1;
  #L11ebe2.  v5:= v8[v0] @kind byte;
  #L11ebe6.  v5:= v5 ^& 255;
  #L11ebea.  v5:= v5 ^> 2;
  #L11ebee.  v5:= v9[v5] @kind byte;
  #L11ebf2.  v2[v1]:= v5 @kind byte;
  #L11ebf6.  v1:= v4 + 1;
  #L11ebfa.  v5:= v8[v0] @kind byte;
  #L11ebfe.  v5:= v5 ^& 3;
  #L11ec02.  v5:= v5 ^< 4;
  #L11ec06.  v6:= v0 + 1;
  #L11ec0a.  v6:= v8[v6] @kind byte;
  #L11ec0e.  v6:= v6 ^& 255;
  #L11ec12.  v6:= v6 ^> 4;
  #L11ec16.  v5:= v5 ^| v6 @kind int;
  #L11ec18.  v5:= v9[v5] @kind byte;
  #L11ec1c.  v2[v4]:= v5 @kind byte;
  #L11ec20.  v4:= v1 + 1;
  #L11ec24.  v5:= v0 + 1;
  #L11ec28.  v5:= v8[v5] @kind byte;
  #L11ec2c.  v5:= v5 ^& 15;
  #L11ec30.  v5:= v5 ^< 2;
  #L11ec34.  v6:= v0 + 2;
  #L11ec38.  v6:= v8[v6] @kind byte;
  #L11ec3c.  v6:= v6 ^& 255;
  #L11ec40.  v6:= v6 ^> 6;
  #L11ec44.  v5:= v5 ^| v6 @kind int;
  #L11ec46.  v5:= v9[v5] @kind byte;
  #L11ec4a.  v2[v1]:= v5 @kind byte;
  #L11ec4e.  v1:= v4 + 1;
  #L11ec52.  v5:= v0 + 2;
  #L11ec56.  v5:= v8[v5] @kind byte;
  #L11ec5a.  v5:= v5 ^& 63;
  #L11ec5e.  v5:= v9[v5] @kind byte;
  #L11ec62.  v2[v4]:= v5 @kind byte;
  #L11ec66.  v0:= v0 + 3;
  #L11ec6a.  goto L11ebda;
  #L11ec6c.  v0:= length @variable v8;
  #L11ec6e.  v0:= v0 %% 3;
  #L11ec72.  goto L11ed40;
  #Try_start0.  
  #L11ec78.  v0:= new `java.lang.String`;
  #L11ec7c.  v1:= "US-ASCII" @kind object;
  #L11ec80.  call `<init>`(v0, v2, v1) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #Try_end0.  
  #L11ec86.  return v0 @kind object;
  #L11ec88.  v0:= v1 + 1;
  #L11ec8c.  v4:= v8[v3] @kind byte;
  #L11ec90.  v4:= v4 ^& 255;
  #L11ec94.  v4:= v4 ^> 2;
  #L11ec98.  v4:= v9[v4] @kind byte;
  #L11ec9c.  v2[v1]:= v4 @kind byte;
  #L11eca0.  v1:= v0 + 1;
  #L11eca4.  v3:= v8[v3] @kind byte;
  #L11eca8.  v3:= v3 ^& 3;
  #L11ecac.  v3:= v3 ^< 4;
  #L11ecb0.  v3:= v9[v3] @kind byte;
  #L11ecb4.  v2[v0]:= v3 @kind byte;
  #L11ecb8.  v0:= v1 + 1;
  #L11ecbc.  v2[v1]:= v7 @kind byte;
  #L11ecc0.  v1:= v0 + 1;
  #L11ecc4.  v2[v0]:= v7 @kind byte;
  #L11ecc8.  goto L11ec78;
  #L11ecca.  v0:= v1 + 1;
  #L11ecce.  v4:= v8[v3] @kind byte;
  #L11ecd2.  v4:= v4 ^& 255;
  #L11ecd6.  v4:= v4 ^> 2;
  #L11ecda.  v4:= v9[v4] @kind byte;
  #L11ecde.  v2[v1]:= v4 @kind byte;
  #L11ece2.  v1:= v0 + 1;
  #L11ece6.  v4:= v8[v3] @kind byte;
  #L11ecea.  v4:= v4 ^& 3;
  #L11ecee.  v4:= v4 ^< 4;
  #L11ecf2.  v5:= v3 + 1;
  #L11ecf6.  v5:= v8[v5] @kind byte;
  #L11ecfa.  v5:= v5 ^& 255;
  #L11ecfe.  v5:= v5 ^> 4;
  #L11ed02.  v4:= v4 ^| v5 @kind int;
  #L11ed04.  v4:= v9[v4] @kind byte;
  #L11ed08.  v2[v0]:= v4 @kind byte;
  #L11ed0c.  v0:= v1 + 1;
  #L11ed10.  v3:= v3 + 1;
  #L11ed14.  v3:= v8[v3] @kind byte;
  #L11ed18.  v3:= v3 ^& 15;
  #L11ed1c.  v3:= v3 ^< 2;
  #L11ed20.  v3:= v9[v3] @kind byte;
  #L11ed24.  v2[v1]:= v3 @kind byte;
  #L11ed28.  v1:= v0 + 1;
  #L11ed2c.  v2[v0]:= v7 @kind byte;
  #L11ed30.  goto L11ec78;
  #L11ed32.  v0:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L11ed34.  v1:= new `java.lang.AssertionError`;
  #L11ed38.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11ed3e.  throw v1;
  #L11ed40.  switch v0
                  | 1 => goto L11ec88
                  | 2 => goto L11ecca
                  | else => goto L11ec78;
  catch `java.io.UnsupportedEncodingException` @[Try_start0..Try_end0] goto L11ed32;
}
