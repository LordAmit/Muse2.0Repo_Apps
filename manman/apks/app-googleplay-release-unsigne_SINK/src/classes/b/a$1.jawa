record `b.a$1` @kind class @AccessFlag  extends `b.q` @kind interface {
  `b.q` `b.a$1.a` @AccessFlag FINAL_SYNTHETIC;
  `b.a` `b.a$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.a$1` v0 @kind this, `b.a` v1 @kind object, `b.q` v2 @kind object) @signature `Lb/a$1;.<init>:(Lb/a;Lb/q;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11e6bc.  v0.`b.a$1.b` @type ^`b.a` := v1 @kind object;
  #L11e6c0.  v0.`b.a$1.a` @type ^`b.q` := v2 @kind object;
  #L11e6c4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11e6ca.  return @kind void;
}
procedure `b.s` `a`(`b.a$1` v1 @kind this) @signature `Lb/a$1;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11e6dc.  v0:= v1.`b.a$1.b` @type ^`b.a` @kind object;
  #L11e6e0.  return v0 @kind object;
}
procedure `void` `a_`(`b.a$1` v10 @kind this, `b.c` v11 @kind object, `long` v12 ) @signature `Lb/a$1;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11e6f4.  v2:= 0L;
  #L11e6f8.  v0:= v11.`b.c.b` @type ^`long` @kind wide;
  #L11e6fc.  v4:= v12 @kind wide;
  #L11e6fe.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11e704.  v4:= v12 @kind wide;
  #L11e706.  v0:= lcmp(v4, v2);
  #L11e70a.  if v0 <= 0 then goto L11e792;
  #L11e70e.  v0:= v11.`b.c.a` @type ^`b.n` @kind object;
  #L11e712.  v6:= v0 @kind object;
  #L11e714.  v0:= v2 @kind wide;
  #L11e716.  v8:= 65536L;
  #L11e71c.  v7:= lcmp(v0, v8);
  #L11e720.  if v7 >= 0 then goto L11e744;
  #L11e724.  v7:= v11.`b.c.a` @type ^`b.n` @kind object;
  #L11e728.  v7:= v7.`b.n.c` @type ^`int`;
  #L11e72c.  v8:= v11.`b.c.a` @type ^`b.n` @kind object;
  #L11e730.  v8:= v8.`b.n.b` @type ^`int`;
  #L11e734.  v7:= v7 - v8 @kind int;
  #L11e736.  v8:= (`long`) v7 @kind i2l;
  #L11e738.  v8:= v8 + v0 @kind long;
  #L11e73a.  v0:= lcmp(v8, v4);
  #L11e73e.  if v0 < 0 then goto L11e76a;
  #L11e742.  v0:= v4 @kind wide;
  #L11e744.  v6:= 0I;
  #L11e746.  v7:= v10.`b.a$1.b` @type ^`b.a` @kind object;
  #L11e74a.  call `c`(v7) @signature `Lb/a;.c:()V` @kind virtual;
  #Try_start0.  
  #L11e750.  v7:= v10.`b.a$1.a` @type ^`b.q` @kind object;
  #L11e754.  call `a_`(v7, v11, v0) @signature `Lb/q;.a_:(Lb/c;J)V` @kind interface;
  #Try_end0.  
  #L11e75a.  v4:= v4 - v0 @kind long;
  #L11e75c.  v0:= 1I;
  #L11e75e.  v1:= v10.`b.a$1.b` @type ^`b.a` @kind object;
  #L11e762.  call `a`(v1, v0) @signature `Lb/a;.a:(Z)V` @kind virtual;
  #L11e768.  goto L11e706;
  #L11e76a.  v0:= v6.`b.n.f` @type ^`b.n` @kind object;
  #L11e76e.  v6:= v0 @kind object;
  #L11e770.  v0:= v8 @kind wide;
  #L11e772.  goto L11e716;
  #L11e774.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #Try_start1.  
  #L11e776.  v1:= v10.`b.a$1.b` @type ^`b.a` @kind object;
  #L11e77a.  call temp:= `b`(v1, v0) @signature `Lb/a;.b:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L11e780.  v0:= temp @kind object;
  #L11e782.  throw v0;
  #Try_end1.  
  #L11e784.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11e786.  v1:= v10.`b.a$1.b` @type ^`b.a` @kind object;
  #L11e78a.  call `a`(v1, v6) @signature `Lb/a;.a:(Z)V` @kind virtual;
  #L11e790.  throw v0;
  #L11e792.  return @kind void;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L11e774;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L11e784;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L11e784;
}
procedure `void` `close`(`b.a$1` v3 @kind this) @signature `Lb/a$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11e7bc.  v1:= 0I;
  #L11e7be.  v0:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L11e7c2.  call `c`(v0) @signature `Lb/a;.c:()V` @kind virtual;
  #Try_start0.  
  #L11e7c8.  v0:= v3.`b.a$1.a` @type ^`b.q` @kind object;
  #L11e7cc.  call `close`(v0) @signature `Lb/q;.close:()V` @kind interface;
  #Try_end0.  
  #L11e7d2.  v0:= 1I;
  #L11e7d4.  v1:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L11e7d8.  call `a`(v1, v0) @signature `Lb/a;.a:(Z)V` @kind virtual;
  #L11e7de.  return @kind void;
  #L11e7e0.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #Try_start1.  
  #L11e7e2.  v2:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L11e7e6.  call temp:= `b`(v2, v0) @signature `Lb/a;.b:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L11e7ec.  v0:= temp @kind object;
  #L11e7ee.  throw v0;
  #Try_end1.  
  #L11e7f0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11e7f2.  v2:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L11e7f6.  call `a`(v2, v1) @signature `Lb/a;.a:(Z)V` @kind virtual;
  #L11e7fc.  throw v0;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L11e7e0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L11e7f0;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L11e7f0;
}
procedure `void` `flush`(`b.a$1` v3 @kind this) @signature `Lb/a$1;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11e828.  v1:= 0I;
  #L11e82a.  v0:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L11e82e.  call `c`(v0) @signature `Lb/a;.c:()V` @kind virtual;
  #Try_start0.  
  #L11e834.  v0:= v3.`b.a$1.a` @type ^`b.q` @kind object;
  #L11e838.  call `flush`(v0) @signature `Lb/q;.flush:()V` @kind interface;
  #Try_end0.  
  #L11e83e.  v0:= 1I;
  #L11e840.  v1:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L11e844.  call `a`(v1, v0) @signature `Lb/a;.a:(Z)V` @kind virtual;
  #L11e84a.  return @kind void;
  #L11e84c.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #Try_start1.  
  #L11e84e.  v2:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L11e852.  call temp:= `b`(v2, v0) @signature `Lb/a;.b:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L11e858.  v0:= temp @kind object;
  #L11e85a.  throw v0;
  #Try_end1.  
  #L11e85c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11e85e.  v2:= v3.`b.a$1.b` @type ^`b.a` @kind object;
  #L11e862.  call `a`(v2, v1) @signature `Lb/a;.a:(Z)V` @kind virtual;
  #L11e868.  throw v0;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L11e84c;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L11e85c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L11e85c;
}
procedure `java.lang.String` `toString`(`b.a$1` v2 @kind this) @signature `Lb/a$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11e894.  v0:= new `java.lang.StringBuilder`;
  #L11e898.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11e89e.  v1:= "AsyncTimeout.sink(" @kind object;
  #L11e8a2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e8a8.  v0:= temp @kind object;
  #L11e8aa.  v1:= v2.`b.a$1.a` @type ^`b.q` @kind object;
  #L11e8ae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e8b4.  v0:= temp @kind object;
  #L11e8b6.  v1:= ")" @kind object;
  #L11e8ba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11e8c0.  v0:= temp @kind object;
  #L11e8c2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11e8c8.  v0:= temp @kind object;
  #L11e8ca.  return v0 @kind object;
}
