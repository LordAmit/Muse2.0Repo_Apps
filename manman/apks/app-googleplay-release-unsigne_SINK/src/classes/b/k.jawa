record `b.k` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.logging.Logger` `@@b.k.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1221b8.  v0:= constclass @type ^`b.k` @kind object;
  #L1221bc.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1221c2.  v0:= temp @kind object;
  #L1221c4.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L1221ca.  v0:= temp @kind object;
  #L1221cc.  `@@b.k.a` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L1221d0.  return @kind void;
}
procedure `void` `<init>`(`b.k` v0 @kind this) @signature `Lb/k;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1221e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1221ea.  return @kind void;
}
procedure `b.d` `a`(`b.q` v1 @kind object) @signature `Lb/k;.a:(Lb/q;)Lb/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1221fc.  v0:= new `b.l`;
  #L122200.  call `<init>`(v0, v1) @signature `Lb/l;.<init>:(Lb/q;)V` @kind direct;
  #L122206.  return v0 @kind object;
}
procedure `b.e` `a`(`b.r` v1 @kind object) @signature `Lb/k;.a:(Lb/r;)Lb/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L122218.  v0:= new `b.m`;
  #L12221c.  call `<init>`(v0, v1) @signature `Lb/m;.<init>:(Lb/r;)V` @kind direct;
  #L122222.  return v0 @kind object;
}
procedure `b.q` `a`(`java.io.OutputStream` v2 @kind object, `b.s` v3 @kind object) @signature `Lb/k;.a:(Ljava/io/OutputStream;Lb/s;)Lb/q;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L122234.  if v2 != 0 then goto L122248;
  #L122238.  v0:= new `java.lang.IllegalArgumentException`;
  #L12223c.  v1:= "out == null" @kind object;
  #L122240.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122246.  throw v0;
  #L122248.  if v3 != 0 then goto L12225c;
  #L12224c.  v0:= new `java.lang.IllegalArgumentException`;
  #L122250.  v1:= "timeout == null" @kind object;
  #L122254.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12225a.  throw v0;
  #L12225c.  v0:= new `b.k$1`;
  #L122260.  call `<init>`(v0, v3, v2) @signature `Lb/k$1;.<init>:(Lb/s;Ljava/io/OutputStream;)V` @kind direct;
  #L122266.  return v0 @kind object;
}
procedure `b.q` `a`(`java.net.Socket` v2 @kind object) @signature `Lb/k;.a:(Ljava/net/Socket;)Lb/q;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L122278.  if v2 != 0 then goto L12228c;
  #L12227c.  v0:= new `java.lang.IllegalArgumentException`;
  #L122280.  v1:= "socket == null" @kind object;
  #L122284.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12228a.  throw v0;
  #L12228c.  call temp:= `c`(v2) @signature `Lb/k;.c:(Ljava/net/Socket;)Lb/a;` @kind static;
  #L122292.  v0:= temp @kind object;
  #L122294.  call temp:= `getOutputStream`(v2) @signature `Ljava/net/Socket;.getOutputStream:()Ljava/io/OutputStream;` @kind virtual;
  #L12229a.  v1:= temp @kind object;
  #L12229c.  call temp:= `a`(v1, v0) @signature `Lb/k;.a:(Ljava/io/OutputStream;Lb/s;)Lb/q;` @kind static;
  #L1222a2.  v1:= temp @kind object;
  #L1222a4.  call temp:= `a`(v0, v1) @signature `Lb/a;.a:(Lb/q;)Lb/q;` @kind virtual;
  #L1222aa.  v0:= temp @kind object;
  #L1222ac.  return v0 @kind object;
}
procedure `b.r` `a`(`java.io.InputStream` v2 @kind object, `b.s` v3 @kind object) @signature `Lb/k;.a:(Ljava/io/InputStream;Lb/s;)Lb/r;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L1222c0.  if v2 != 0 then goto L1222d4;
  #L1222c4.  v0:= new `java.lang.IllegalArgumentException`;
  #L1222c8.  v1:= "in == null" @kind object;
  #L1222cc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1222d2.  throw v0;
  #L1222d4.  if v3 != 0 then goto L1222e8;
  #L1222d8.  v0:= new `java.lang.IllegalArgumentException`;
  #L1222dc.  v1:= "timeout == null" @kind object;
  #L1222e0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1222e6.  throw v0;
  #L1222e8.  v0:= new `b.k$2`;
  #L1222ec.  call `<init>`(v0, v3, v2) @signature `Lb/k$2;.<init>:(Lb/s;Ljava/io/InputStream;)V` @kind direct;
  #L1222f2.  return v0 @kind object;
}
procedure `boolean` `a`(`java.lang.AssertionError` v2 @kind object) @signature `Lb/k;.a:(Ljava/lang/AssertionError;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L122304.  call temp:= `getCause`(v2) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L12230a.  v0:= temp @kind object;
  #L12230c.  if v0 == 0 then goto L122338;
  #L122310.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L122316.  v0:= temp @kind object;
  #L122318.  if v0 == 0 then goto L122338;
  #L12231c.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L122322.  v0:= temp @kind object;
  #L122324.  v1:= "getsockname failed" @kind object;
  #L122328.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L12232e.  v0:= temp;
  #L122330.  if v0 == 0 then goto L122338;
  #L122334.  v0:= 1I;
  #L122336.  return v0;
  #L122338.  v0:= 0I;
  #L12233a.  goto L122336;
}
procedure `b.r` `b`(`java.net.Socket` v2 @kind object) @signature `Lb/k;.b:(Ljava/net/Socket;)Lb/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L12234c.  if v2 != 0 then goto L122360;
  #L122350.  v0:= new `java.lang.IllegalArgumentException`;
  #L122354.  v1:= "socket == null" @kind object;
  #L122358.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12235e.  throw v0;
  #L122360.  call temp:= `c`(v2) @signature `Lb/k;.c:(Ljava/net/Socket;)Lb/a;` @kind static;
  #L122366.  v0:= temp @kind object;
  #L122368.  call temp:= `getInputStream`(v2) @signature `Ljava/net/Socket;.getInputStream:()Ljava/io/InputStream;` @kind virtual;
  #L12236e.  v1:= temp @kind object;
  #L122370.  call temp:= `a`(v1, v0) @signature `Lb/k;.a:(Ljava/io/InputStream;Lb/s;)Lb/r;` @kind static;
  #L122376.  v1:= temp @kind object;
  #L122378.  call temp:= `a`(v0, v1) @signature `Lb/a;.a:(Lb/r;)Lb/r;` @kind virtual;
  #L12237e.  v0:= temp @kind object;
  #L122380.  return v0 @kind object;
}
procedure `b.a` `c`(`java.net.Socket` v1 @kind object) @signature `Lb/k;.c:(Ljava/net/Socket;)Lb/a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L122394.  v0:= new `b.k$3`;
  #L122398.  call `<init>`(v0, v1) @signature `Lb/k$3;.<init>:(Ljava/net/Socket;)V` @kind direct;
  #L12239e.  return v0 @kind object;
}
