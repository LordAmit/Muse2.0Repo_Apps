record `b.o` @kind class @AccessFlag FINAL {
}
global `b.n` `@@b.o.a` @AccessFlag STATIC;
global `long` `@@b.o.b` @AccessFlag STATIC;
procedure `void` `<init>`(`b.o` v0 @kind this) @signature `Lb/o;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L123420.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L123426.  return @kind void;
}
procedure `b.n` `a`() @signature `Lb/o;.a:()Lb/n;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L123438.  v1:= constclass @type ^`b.o` @kind object;
  #L12343c.  @monitorenter v1
  #Try_start0.  
  #L12343e.  v0:= `@@b.o.a` @type ^`b.n` @kind object;
  #L123442.  if v0 == 0 then goto L12346a;
  #L123446.  v0:= `@@b.o.a` @type ^`b.n` @kind object;
  #L12344a.  v2:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L12344e.  `@@b.o.a` @type ^`b.n` := v2 @kind object;
  #L123452.  v2:= 0I;
  #L123454.  v0.`b.n.f` @type ^`b.n` := v2 @kind object;
  #L123458.  v2:= `@@b.o.b` @type ^`long` @kind wide;
  #L12345c.  v4:= 8192L;
  #L123460.  v2:= v2 - v4 @kind long;
  #L123462.  `@@b.o.b` @type ^`long` := v2 @kind wide;
  #L123466.  @monitorexit v1
  #L123468.  return v0 @kind object;
  #L12346a.  @monitorexit v1
  #Try_end0.  
  #L12346c.  v0:= new `b.n`;
  #L123470.  call `<init>`(v0) @signature `Lb/n;.<init>:()V` @kind direct;
  #L123476.  goto L123468;
  #L123478.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L12347a.  @monitorexit v1
  #Try_end1.  
  #L12347c.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L123478;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L123478;
}
procedure `void` `a`(`b.n` v8 @kind object) @signature `Lb/o;.a:(Lb/n;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1234a4.  v6:= 8192L;
  #L1234a8.  v0:= v8.`b.n.f` @type ^`b.n` @kind object;
  #L1234ac.  if v0 != 0 then goto L1234b8;
  #L1234b0.  v0:= v8.`b.n.g` @type ^`b.n` @kind object;
  #L1234b4.  if v0 == 0 then goto L1234c4;
  #L1234b8.  v0:= new `java.lang.IllegalArgumentException`;
  #L1234bc.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1234c2.  throw v0;
  #L1234c4.  v0:= v8.`b.n.d` @type ^`boolean` @kind boolean;
  #L1234c8.  if v0 == 0 then goto L1234ce;
  #L1234cc.  return @kind void;
  #L1234ce.  v1:= constclass @type ^`b.o` @kind object;
  #L1234d2.  @monitorenter v1
  #Try_start0.  
  #L1234d4.  v2:= `@@b.o.b` @type ^`long` @kind wide;
  #L1234d8.  v2:= v2 + v6 @kind long;
  #L1234da.  v4:= 65536L;
  #L1234e0.  v0:= lcmp(v2, v4);
  #L1234e4.  if v0 <= 0 then goto L1234f2;
  #L1234e8.  @monitorexit v1
  #L1234ea.  goto L1234cc;
  #L1234ec.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1234ee.  @monitorexit v1
  #Try_end0.  
  #L1234f0.  throw v0;
  #Try_start1.  
  #L1234f2.  v2:= `@@b.o.b` @type ^`long` @kind wide;
  #L1234f6.  v2:= v2 + v6 @kind long;
  #L1234f8.  `@@b.o.b` @type ^`long` := v2 @kind wide;
  #L1234fc.  v0:= `@@b.o.a` @type ^`b.n` @kind object;
  #L123500.  v8.`b.n.f` @type ^`b.n` := v0 @kind object;
  #L123504.  v0:= 0I;
  #L123506.  v8.`b.n.c` @type ^`int` := v0;
  #L12350a.  v8.`b.n.b` @type ^`int` := v0;
  #L12350e.  `@@b.o.a` @type ^`b.n` := v8 @kind object;
  #L123512.  @monitorexit v1
  #Try_end1.  
  #L123514.  goto L1234cc;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1234ec;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1234ec;
}
