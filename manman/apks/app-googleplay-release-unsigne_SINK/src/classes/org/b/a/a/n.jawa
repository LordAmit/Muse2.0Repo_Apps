record `org.b.a.a.n` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b` @kind class {
  `org.b.a.a.d.b` `org.b.a.a.n.a` @AccessFlag PRIVATE;
  `org.b.a.a.b$a` `org.b.a.a.n.b` @AccessFlag PRIVATE;
  `int` `org.b.a.a.n.c` @AccessFlag PRIVATE;
}
global `org.b.a.a.d.m` `@@org.b.a.a.n.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/b/a/a/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a1450.  v0:= new `org.b.a.a.d.n`;
  #L1a1454.  call `<init>`(v0) @signature `Lorg/b/a/a/d/n;.<init>:()V` @kind direct;
  #L1a145a.  `@@org.b.a.a.n.d` @type ^`org.b.a.a.d.m` := v0 @kind object;
  #L1a145e.  return @kind void;
}
procedure `void` `<init>`(`org.b.a.a.n` v2 @kind this) @signature `Lorg/b/a/a/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1a1470.  call `<init>`(v2) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L1a1476.  v0:= 0I;
  #L1a1478.  v2.`org.b.a.a.n.c` @type ^`int` := v0;
  #L1a147c.  v0:= new `org.b.a.a.d.b`;
  #L1a1480.  v1:= `@@org.b.a.a.n.d` @type ^`org.b.a.a.d.m` @kind object;
  #L1a1484.  call `<init>`(v0, v1) @signature `Lorg/b/a/a/d/b;.<init>:(Lorg/b/a/a/d/m;)V` @kind direct;
  #L1a148a.  v2.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` := v0 @kind object;
  #L1a148e.  call `d`(v2) @signature `Lorg/b/a/a/n;.d:()V` @kind virtual;
  #L1a1494.  return @kind void;
}
procedure `java.lang.String` `a`(`org.b.a.a.n` v1 @kind this) @signature `Lorg/b/a/a/n;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a14a8.  v0:= `@@org.b.a.b.u` @type ^`java.lang.String` @kind object;
  #L1a14ac.  return v0 @kind object;
}
procedure `org.b.a.a.b$a` `a`(`org.b.a.a.n` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lorg/b/a/a/n;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a14c0.  v3:= 2I;
  #L1a14c2.  v0:= v6 + v7 @kind int;
  #L1a14c6.  if v6 >= v0 then goto L1a14e8;
  #L1a14ca.  v1:= v4.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` @kind object;
  #L1a14ce.  v2:= v5[v6] @kind byte;
  #L1a14d2.  call temp:= `a`(v1, v2) @signature `Lorg/b/a/a/d/b;.a:(B)I` @kind virtual;
  #L1a14d8.  v1:= temp;
  #L1a14da.  v2:= 1I;
  #L1a14dc.  if v1 != v2 then goto L1a1518;
  #L1a14e0.  v0:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L1a14e4.  v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a14e8.  v0:= v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1a14ec.  v1:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a14f0.  if v0 != v1 then goto L1a1512;
  #L1a14f4.  call temp:= `b`(v4) @signature `Lorg/b/a/a/n;.b:()F` @kind virtual;
  #L1a14fa.  v0:= temp;
  #L1a14fc.  v1:= 1064514355I;
  #L1a1502.  v0:= fcmpl(v0, v1);
  #L1a1506.  if v0 <= 0 then goto L1a1512;
  #L1a150a.  v0:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1a150e.  v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a1512.  v0:= v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1a1516.  return v0 @kind object;
  #L1a1518.  if v1 != v3 then goto L1a1526;
  #L1a151c.  v0:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1a1520.  v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a1524.  goto L1a14e8;
  #L1a1526.  if v1 != 0 then goto L1a1546;
  #L1a152a.  v1:= v4.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` @kind object;
  #L1a152e.  call temp:= `a`(v1) @signature `Lorg/b/a/a/d/b;.a:()I` @kind virtual;
  #L1a1534.  v1:= temp;
  #L1a1536.  if v1 < v3 then goto L1a1546;
  #L1a153a.  v1:= v4.`org.b.a.a.n.c` @type ^`int`;
  #L1a153e.  v1:= v1 + 1;
  #L1a1542.  v4.`org.b.a.a.n.c` @type ^`int` := v1;
  #L1a1546.  v6:= v6 + 1;
  #L1a154a.  goto L1a14c6;
}
procedure `float` `b`(`org.b.a.a.n` v3 @kind this) @signature `Lorg/b/a/a/n;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a155c.  v1:= 1065185444I;
  #L1a1562.  v0:= v3.`org.b.a.a.n.c` @type ^`int`;
  #L1a1566.  v2:= 6I;
  #L1a1568.  if v0 >= v2 then goto L1a158a;
  #L1a156c.  v0:= 0I;
  #L1a156e.  v2:= v3.`org.b.a.a.n.c` @type ^`int`;
  #L1a1572.  if v0 >= v2 then goto L1a1582;
  #L1a1576.  v2:= 0.5F;
  #L1a157a.  v1:= v1 * v2 @kind float;
  #L1a157c.  v0:= v0 + 1;
  #L1a1580.  goto L1a156e;
  #L1a1582.  v0:= 1.0F;
  #L1a1586.  v1:= v0 - v1 @kind float;
  #L1a158a.  return v1;
}
procedure `org.b.a.a.b$a` `c`(`org.b.a.a.n` v1 @kind this) @signature `Lorg/b/a/a/n;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a159c.  v0:= v1.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1a15a0.  return v0 @kind object;
}
procedure `void` `d`(`org.b.a.a.n` v1 @kind this) @signature `Lorg/b/a/a/n;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a15b4.  v0:= v1.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` @kind object;
  #L1a15b8.  call `b`(v0) @signature `Lorg/b/a/a/d/b;.b:()V` @kind virtual;
  #L1a15be.  v0:= 0I;
  #L1a15c0.  v1.`org.b.a.a.n.c` @type ^`int` := v0;
  #L1a15c4.  v0:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a15c8.  v1.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a15cc.  return @kind void;
}
