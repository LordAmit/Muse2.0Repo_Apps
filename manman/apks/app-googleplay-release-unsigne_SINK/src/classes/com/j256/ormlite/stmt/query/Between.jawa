record `com.j256.ormlite.stmt.query.Between` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.query.BaseComparison` @kind class {
  `java.lang.Object` `com.j256.ormlite.stmt.query.Between.high` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.stmt.query.Between.low` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.Between` v2 @kind this, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Between;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1791cc.  v0:= 0I;
  #L1791ce.  v1:= 1I;
  #L1791d0.  call `<init>`(v2, v3, v4, v0, v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Z)V` @kind direct;
  #L1791d6.  v2.`com.j256.ormlite.stmt.query.Between.low` @type ^`java.lang.Object` := v5 @kind object;
  #L1791da.  v2.`com.j256.ormlite.stmt.query.Between.high` @type ^`java.lang.Object` := v6 @kind object;
  #L1791de.  return @kind void;
}
procedure `void` `appendOperation`(`com.j256.ormlite.stmt.query.Between` v1 @kind this, `java.lang.StringBuilder` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Between;.appendOperation:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1791f0.  v0:= "BETWEEN " @kind object;
  #L1791f4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1791fa.  return @kind void;
}
procedure `void` `appendSql`(`com.j256.ormlite.stmt.query.Between` v0 @kind this, `com.j256.ormlite.db.DatabaseType` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.StringBuilder` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Between;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L17920c.  call `appendSql`(v0, v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind super;
  #L179212.  return @kind void;
}
procedure `void` `appendValue`(`com.j256.ormlite.stmt.query.Between` v6 @kind this, `com.j256.ormlite.db.DatabaseType` v7 @kind object, `java.lang.StringBuilder` v8 @kind object, `java.util.List` v9 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Between;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L179224.  v0:= v6.`com.j256.ormlite.stmt.query.Between.low` @type ^`java.lang.Object` @kind object;
  #L179228.  if v0 != 0 then goto L17926e;
  #L17922c.  v0:= new `java.lang.IllegalArgumentException`;
  #L179230.  v1:= new `java.lang.StringBuilder`;
  #L179234.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L17923a.  v2:= "BETWEEN low value for '" @kind object;
  #L17923e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L179244.  v1:= temp @kind object;
  #L179246.  v2:= v6.`com.j256.ormlite.stmt.query.Between.columnName` @type ^`java.lang.String` @kind object;
  #L17924a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L179250.  v1:= temp @kind object;
  #L179252.  v2:= "' is null" @kind object;
  #L179256.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17925c.  v1:= temp @kind object;
  #L17925e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L179264.  v1:= temp @kind object;
  #L179266.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L17926c.  throw v0;
  #L17926e.  v0:= v6.`com.j256.ormlite.stmt.query.Between.high` @type ^`java.lang.Object` @kind object;
  #L179272.  if v0 != 0 then goto L1792b8;
  #L179276.  v0:= new `java.lang.IllegalArgumentException`;
  #L17927a.  v1:= new `java.lang.StringBuilder`;
  #L17927e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L179284.  v2:= "BETWEEN high value for '" @kind object;
  #L179288.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17928e.  v1:= temp @kind object;
  #L179290.  v2:= v6.`com.j256.ormlite.stmt.query.Between.columnName` @type ^`java.lang.String` @kind object;
  #L179294.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17929a.  v1:= temp @kind object;
  #L17929c.  v2:= "' is null" @kind object;
  #L1792a0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1792a6.  v1:= temp @kind object;
  #L1792a8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1792ae.  v1:= temp @kind object;
  #L1792b0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1792b6.  throw v0;
  #L1792b8.  v2:= v6.`com.j256.ormlite.stmt.query.Between.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1792bc.  v5:= v6.`com.j256.ormlite.stmt.query.Between.low` @type ^`java.lang.Object` @kind object;
  #L1792c0.  v0:= v6 @kind object;
  #L1792c2.  v1:= v7 @kind object;
  #L1792c4.  v3:= v8 @kind object;
  #L1792c6.  v4:= v9 @kind object;
  #L1792c8.  call `appendArgOrValue`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/Between;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @kind virtual;
  #L1792ce.  v0:= "AND " @kind object;
  #L1792d2.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1792d8.  v2:= v6.`com.j256.ormlite.stmt.query.Between.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1792dc.  v5:= v6.`com.j256.ormlite.stmt.query.Between.high` @type ^`java.lang.Object` @kind object;
  #L1792e0.  v0:= v6 @kind object;
  #L1792e2.  v1:= v7 @kind object;
  #L1792e4.  v3:= v8 @kind object;
  #L1792e6.  v4:= v9 @kind object;
  #L1792e8.  call `appendArgOrValue`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/Between;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @kind virtual;
  #L1792ee.  return @kind void;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.stmt.query.Between` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/Between;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L179300.  call temp:= `getColumnName`(v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.getColumnName:()Ljava/lang/String;` @kind super;
  #L179306.  v0:= temp @kind object;
  #L179308.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.query.Between` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/Between;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L17931c.  call temp:= `toString`(v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.toString:()Ljava/lang/String;` @kind super;
  #L179322.  v0:= temp @kind object;
  #L179324.  return v0 @kind object;
}
