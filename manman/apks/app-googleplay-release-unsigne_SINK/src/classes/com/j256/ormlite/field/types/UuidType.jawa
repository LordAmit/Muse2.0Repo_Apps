record `com.j256.ormlite.field.types.UuidType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `int` `@@com.j256.ormlite.field.types.UuidType.DEFAULT_WIDTH` @AccessFlag PUBLIC_STATIC;
global `com.j256.ormlite.field.types.UuidType` `@@com.j256.ormlite.field.types.UuidType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/UuidType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L16e990.  v0:= 48I;
  #L16e994.  `@@com.j256.ormlite.field.types.UuidType.DEFAULT_WIDTH` @type ^`int` := v0;
  #L16e998.  v0:= new `com.j256.ormlite.field.types.UuidType`;
  #L16e99c.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:()V` @kind direct;
  #L16e9a2.  `@@com.j256.ormlite.field.types.UuidType.singleTon` @type ^`com.j256.ormlite.field.types.UuidType` := v0 @kind object;
  #L16e9a6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.UuidType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16e9b8.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L16e9bc.  v1:= 1I;
  #L16e9be.  v1:= new `java.lang.Class`[v1];
  #L16e9c2.  v2:= 0I;
  #L16e9c4.  v3:= constclass @type ^`java.util.UUID` @kind object;
  #L16e9c8.  v1[v2]:= v3 @kind object;
  #L16e9cc.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16e9d2.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.UuidType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16e9e4.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L16e9ea.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.UuidType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16e9fc.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16ea02.  return @kind void;
}
procedure `com.j256.ormlite.field.types.UuidType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/UuidType;.getSingleton:()Lcom/j256/ormlite/field/types/UuidType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L16ea14.  v0:= `@@com.j256.ormlite.field.types.UuidType.singleTon` @type ^`com.j256.ormlite.field.types.UuidType` @kind object;
  #L16ea18.  return v0 @kind object;
}
procedure `java.lang.Object` `generateId`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.generateId:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16ea2c.  call temp:= `randomUUID`() @signature `Ljava/util/UUID;.randomUUID:()Ljava/util/UUID;` @kind static;
  #L16ea32.  v0:= temp @kind object;
  #L16ea34.  return v0 @kind object;
}
procedure `int` `getDefaultWidth`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.getDefaultWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16ea48.  v0:= `@@com.j256.ormlite.field.types.UuidType.DEFAULT_WIDTH` @type ^`int`;
  #L16ea4c.  return v0;
}
procedure `boolean` `isSelfGeneratedId`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.isSelfGeneratedId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16ea60.  v0:= 1I;
  #L16ea62.  return v0;
}
procedure `boolean` `isValidGeneratedType`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.isValidGeneratedType:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16ea74.  v0:= 1I;
  #L16ea76.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.UuidType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16ea88.  v3:= (`java.util.UUID`) v3 @kind object;
  #L16ea8c.  call temp:= `toString`(v3) @signature `Ljava/util/UUID;.toString:()Ljava/lang/String;` @kind virtual;
  #L16ea92.  v0:= temp @kind object;
  #L16ea94.  return v0 @kind object;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.UuidType` v0 @kind this, `com.j256.ormlite.field.FieldType` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L16eaa8.  return v2 @kind object;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.UuidType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/UuidType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16eabc.  call temp:= `getString`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getString:(I)Ljava/lang/String;` @kind interface;
  #L16eac2.  v0:= temp @kind object;
  #L16eac4.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.UuidType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.Object` v5 @kind object, `int` v6 ) @signature `Lcom/j256/ormlite/field/types/UuidType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16ead8.  v5:= (`java.lang.String`) v5 @kind object;
  #Try_start0.  
  #L16eadc.  call temp:= `fromString`(v5) @signature `Ljava/util/UUID;.fromString:(Ljava/lang/String;)Ljava/util/UUID;` @kind static;
  #Try_end0.  
  #L16eae2.  v0:= temp @kind object;
  #L16eae4.  return v0 @kind object;
  #L16eae6.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L16eae8.  v1:= new `java.lang.StringBuilder`;
  #L16eaec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16eaf2.  v2:= "Problems with column " @kind object;
  #L16eaf6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16eafc.  v1:= temp @kind object;
  #L16eafe.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L16eb04.  v1:= temp @kind object;
  #L16eb06.  v2:= " parsing UUID-string '" @kind object;
  #L16eb0a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16eb10.  v1:= temp @kind object;
  #L16eb12.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16eb18.  v1:= temp @kind object;
  #L16eb1a.  v2:= "'" @kind object;
  #L16eb1e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16eb24.  v1:= temp @kind object;
  #L16eb26.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16eb2c.  v1:= temp @kind object;
  #L16eb2e.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16eb34.  v0:= temp @kind object;
  #L16eb36.  throw v0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L16eae6;
}
