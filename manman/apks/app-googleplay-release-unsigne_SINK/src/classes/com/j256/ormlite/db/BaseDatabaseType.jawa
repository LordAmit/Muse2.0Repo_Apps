record `com.j256.ormlite.db.BaseDatabaseType` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.db.DatabaseType` @kind interface {
  `java.sql.Driver` `com.j256.ormlite.db.BaseDatabaseType.driver` @AccessFlag PROTECTED;
}
global `java.lang.String` `@@com.j256.ormlite.db.BaseDatabaseType.DEFAULT_SEQUENCE_SUFFIX` @AccessFlag PROTECTED_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L165dc4.  v0:= "_id_seq" @kind object;
  #L165dc8.  `@@com.j256.ormlite.db.BaseDatabaseType.DEFAULT_SEQUENCE_SUFFIX` @type ^`java.lang.String` := v0 @kind object;
  #L165dcc.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L165de0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L165de6.  return @kind void;
}
procedure `void` `addSingleUnique`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.util.List` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addSingleUnique:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L165df8.  v0:= new `java.lang.StringBuilder`;
  #L165dfc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L165e02.  v1:= " UNIQUE (" @kind object;
  #L165e06.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165e0c.  call temp:= `getColumnName`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L165e12.  v1:= temp @kind object;
  #L165e14.  call `appendEscapedEntityName`(v2, v0, v1) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L165e1a.  v1:= 41I;
  #L165e1e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L165e24.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L165e2a.  v0:= temp @kind object;
  #L165e2c.  call temp:= `add`(v5, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L165e32.  return @kind void;
}
procedure `void` `appendCanBeNull`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCanBeNull:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PRIVATE {
    temp;

  #L165e44.  return @kind void;
}
procedure `void` `appendDefaultValue`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDefaultValue:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L165e58.  call temp:= `isEscapedDefaultValue`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedDefaultValue:()Z` @kind virtual;
  #L165e5e.  v0:= temp;
  #L165e60.  if v0 == 0 then goto L165e74;
  #L165e64.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L165e6a.  v0:= temp @kind object;
  #L165e6c.  call `appendEscapedWord`(v1, v2, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L165e72.  return @kind void;
  #L165e74.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165e7a.  goto L165e72;
}
procedure `void` `appendDoubleType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDoubleType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L165e8c.  v0:= "DOUBLE PRECISION" @kind object;
  #L165e90.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165e96.  return @kind void;
}
procedure `void` `appendFloatType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendFloatType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L165ea8.  v0:= "FLOAT" @kind object;
  #L165eac.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165eb2.  return @kind void;
}
procedure `void` `appendIntegerType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendIntegerType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L165ec4.  v0:= "INTEGER" @kind object;
  #L165ec8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165ece.  return @kind void;
}
procedure `void` `addPrimaryKeySql`(`com.j256.ormlite.db.BaseDatabaseType` v6 @kind this, `com.j256.ormlite.field.FieldType`[] v7 @kind object, `java.util.List` v8 @kind object, `java.util.List` v9 @kind object, `java.util.List` v10 @kind object, `java.util.List` v11 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addPrimaryKeySql:([Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L165ee0.  v1:= 0I;
  #L165ee2.  v2:= length @variable v7;
  #L165ee4.  v0:= 0I;
  #L165ee6.  v5:= v0;
  #L165ee8.  v0:= v1 @kind object;
  #L165eea.  v1:= v5;
  #L165eec.  if v1 >= v2 then goto L165f62;
  #L165ef0.  v3:= v7[v1] @kind object;
  #L165ef4.  call temp:= `isGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L165efa.  v4:= temp;
  #L165efc.  if v4 == 0 then goto L165f1e;
  #L165f00.  call temp:= `generatedIdSqlAtEnd`(v6) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.generatedIdSqlAtEnd:()Z` @kind virtual;
  #L165f06.  v4:= temp;
  #L165f08.  if v4 != 0 then goto L165f1e;
  #L165f0c.  call temp:= `isSelfGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L165f12.  v4:= temp;
  #L165f14.  if v4 != 0 then goto L165f1e;
  #L165f18.  v1:= v1 + 1;
  #L165f1c.  goto L165eec;
  #L165f1e.  call temp:= `isId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isId:()Z` @kind virtual;
  #L165f24.  v4:= temp;
  #L165f26.  if v4 == 0 then goto L165f18;
  #L165f2a.  if v0 != 0 then goto L165f56;
  #L165f2e.  v0:= new `java.lang.StringBuilder`;
  #L165f32.  v4:= 48I;
  #L165f36.  call `<init>`(v0, v4) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L165f3c.  v4:= "PRIMARY KEY (" @kind object;
  #L165f40.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165f46.  call temp:= `getColumnName`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L165f4c.  v3:= temp @kind object;
  #L165f4e.  call `appendEscapedEntityName`(v6, v0, v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L165f54.  goto L165f18;
  #L165f56.  v4:= 44I;
  #L165f5a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L165f60.  goto L165f46;
  #L165f62.  if v0 == 0 then goto L165f7e;
  #L165f66.  v1:= ") " @kind object;
  #L165f6a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165f70.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L165f76.  v0:= temp @kind object;
  #L165f78.  call temp:= `add`(v8, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L165f7e.  return @kind void;
}
procedure `void` `addUniqueComboSql`(`com.j256.ormlite.db.BaseDatabaseType` v6 @kind this, `com.j256.ormlite.field.FieldType`[] v7 @kind object, `java.util.List` v8 @kind object, `java.util.List` v9 @kind object, `java.util.List` v10 @kind object, `java.util.List` v11 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addUniqueComboSql:([Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L165f90.  v1:= 0I;
  #L165f92.  v2:= length @variable v7;
  #L165f94.  v0:= 0I;
  #L165f96.  v5:= v0;
  #L165f98.  v0:= v1 @kind object;
  #L165f9a.  v1:= v5;
  #L165f9c.  if v1 >= v2 then goto L165fec;
  #L165fa0.  v3:= v7[v1] @kind object;
  #L165fa4.  call temp:= `isUniqueCombo`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isUniqueCombo:()Z` @kind virtual;
  #L165faa.  v4:= temp;
  #L165fac.  if v4 == 0 then goto L165fda;
  #L165fb0.  if v0 != 0 then goto L165fe0;
  #L165fb4.  v0:= new `java.lang.StringBuilder`;
  #L165fb8.  v4:= 48I;
  #L165fbc.  call `<init>`(v0, v4) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L165fc2.  v4:= "UNIQUE (" @kind object;
  #L165fc6.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165fcc.  call temp:= `getColumnName`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L165fd2.  v3:= temp @kind object;
  #L165fd4.  call `appendEscapedEntityName`(v6, v0, v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L165fda.  v1:= v1 + 1;
  #L165fde.  goto L165f9c;
  #L165fe0.  v4:= 44I;
  #L165fe4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L165fea.  goto L165fcc;
  #L165fec.  if v0 == 0 then goto L166008;
  #L165ff0.  v1:= ") " @kind object;
  #L165ff4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165ffa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L166000.  v0:= temp @kind object;
  #L166002.  call temp:= `add`(v8, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L166008.  return @kind void;
}
procedure `void` `appendBigDecimalNumericType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBigDecimalNumericType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L16601c.  v0:= "NUMERIC" @kind object;
  #L166020.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166026.  return @kind void;
}
procedure `void` `appendBooleanType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBooleanType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L166038.  v0:= "BOOLEAN" @kind object;
  #L16603c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166042.  return @kind void;
}
procedure `void` `appendByteArrayType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteArrayType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L166054.  v0:= "BLOB" @kind object;
  #L166058.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16605e.  return @kind void;
}
procedure `void` `appendByteType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L166070.  v0:= "TINYINT" @kind object;
  #L166074.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16607a.  return @kind void;
}
procedure `void` `appendCharType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCharType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L16608c.  v0:= "CHAR" @kind object;
  #L166090.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166096.  return @kind void;
}
procedure `void` `appendColumnArg`(`com.j256.ormlite.db.BaseDatabaseType` v8 @kind this, `java.lang.String` v9 @kind object, `java.lang.StringBuilder` v10 @kind object, `com.j256.ormlite.field.FieldType` v11 @kind object, `java.util.List` v12 @kind object, `java.util.List` v13 @kind object, `java.util.List` v14 @kind object, `java.util.List` v15 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendColumnArg:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1660a8.  call temp:= `getColumnName`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L1660ae.  v0:= temp @kind object;
  #L1660b0.  call `appendEscapedEntityName`(v8, v10, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L1660b6.  v0:= 32I;
  #L1660ba.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1660c0.  call temp:= `getDataPersister`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L1660c6.  v1:= temp @kind object;
  #L1660c8.  call temp:= `getWidth`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getWidth:()I` @kind virtual;
  #L1660ce.  v0:= temp;
  #L1660d0.  if v0 != 0 then goto L1660dc;
  #L1660d4.  call temp:= `getDefaultWidth`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getDefaultWidth:()I` @kind interface;
  #L1660da.  v0:= temp;
  #L1660dc.  v2:= `@@com.j256.ormlite.db.BaseDatabaseType$1.$SwitchMap$com$j256$ormlite$field$SqlType` @type ^`int`[] @kind object;
  #L1660e0.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L1660e6.  v3:= temp @kind object;
  #L1660e8.  call temp:= `ordinal`(v3) @signature `Lcom/j256/ormlite/field/SqlType;.ordinal:()I` @kind virtual;
  #L1660ee.  v3:= temp;
  #L1660f0.  v2:= v2[v3];
  #L1660f4.  goto L1662ac;
  #L1660fa.  v0:= new `java.lang.IllegalArgumentException`;
  #L1660fe.  v2:= new `java.lang.StringBuilder`;
  #L166102.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L166108.  v3:= "Unknown SQL-type " @kind object;
  #L16610c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166112.  v2:= temp @kind object;
  #L166114.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L16611a.  v1:= temp @kind object;
  #L16611c.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166122.  v1:= temp @kind object;
  #L166124.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16612a.  v1:= temp @kind object;
  #L16612c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L166132.  throw v0;
  #L166134.  call `appendStringType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L16613a.  v0:= 32I;
  #L16613e.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L166144.  call temp:= `isGeneratedIdSequence`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedIdSequence:()Z` @kind virtual;
  #L16614a.  v0:= temp;
  #L16614c.  if v0 == 0 then goto L16624c;
  #L166150.  call temp:= `isSelfGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L166156.  v0:= temp;
  #L166158.  if v0 != 0 then goto L16624c;
  #L16615c.  v0:= v8 @kind object;
  #L16615e.  v1:= v10 @kind object;
  #L166160.  v2:= v11 @kind object;
  #L166162.  v3:= v13 @kind object;
  #L166164.  v4:= v12 @kind object;
  #L166166.  v5:= v15 @kind object;
  #L166168.  call `configureGeneratedIdSequence`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedIdSequence:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @kind virtual;
  #L16616e.  call temp:= `isGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L166174.  v0:= temp;
  #L166176.  if v0 != 0 then goto L1661c4;
  #L16617a.  call temp:= `getDefaultValue`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getDefaultValue:()Ljava/lang/Object;` @kind virtual;
  #L166180.  v0:= temp @kind object;
  #L166182.  if v0 == 0 then goto L1661a0;
  #L166186.  v1:= "DEFAULT " @kind object;
  #L16618a.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166190.  call `appendDefaultValue`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDefaultValue:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)V` @kind direct;
  #L166196.  v0:= 32I;
  #L16619a.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1661a0.  call temp:= `isCanBeNull`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isCanBeNull:()Z` @kind virtual;
  #L1661a6.  v0:= temp;
  #L1661a8.  if v0 == 0 then goto L1662a0;
  #L1661ac.  call `appendCanBeNull`(v8, v10, v11) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCanBeNull:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L1661b2.  call temp:= `isUnique`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isUnique:()Z` @kind virtual;
  #L1661b8.  v0:= temp;
  #L1661ba.  if v0 == 0 then goto L1661c4;
  #L1661be.  call `addSingleUnique`(v8, v10, v11, v12, v14) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addSingleUnique:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L1661c4.  return @kind void;
  #L1661c6.  call `appendLongStringType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L1661cc.  goto L16613a;
  #L1661ce.  call `appendBooleanType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBooleanType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L1661d4.  goto L16613a;
  #L1661d6.  call `appendDateType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDateType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L1661dc.  goto L16613a;
  #L1661de.  call `appendCharType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCharType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L1661e4.  goto L16613a;
  #L1661e6.  call `appendByteType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L1661ec.  goto L16613a;
  #L1661ee.  call `appendByteArrayType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteArrayType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L1661f4.  goto L16613a;
  #L1661f6.  call `appendShortType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendShortType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L1661fc.  goto L16613a;
  #L1661fe.  call `appendIntegerType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendIntegerType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind direct;
  #L166204.  goto L16613a;
  #L166206.  call `appendLongType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L16620c.  goto L16613a;
  #L16620e.  call `appendFloatType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendFloatType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind direct;
  #L166214.  goto L16613a;
  #L166216.  call `appendDoubleType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDoubleType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind direct;
  #L16621c.  goto L16613a;
  #L16621e.  call `appendSerializableType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendSerializableType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L166224.  goto L16613a;
  #L166226.  call `appendBigDecimalNumericType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBigDecimalNumericType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L16622c.  goto L16613a;
  #L16622e.  call `appendUuidNativeType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendUuidNativeType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L166234.  goto L16613a;
  #L166236.  call temp:= `getSqlOtherType`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlOtherType:()Ljava/lang/String;` @kind interface;
  #L16623c.  v0:= temp @kind object;
  #L16623e.  if v0 == 0 then goto L16613a;
  #L166242.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166248.  goto L16613a;
  #L16624c.  call temp:= `isGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L166252.  v0:= temp;
  #L166254.  if v0 == 0 then goto L16627e;
  #L166258.  call temp:= `isSelfGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L16625e.  v0:= temp;
  #L166260.  if v0 != 0 then goto L16627e;
  #L166264.  v0:= v8 @kind object;
  #L166266.  v1:= v9 @kind object;
  #L166268.  v2:= v10 @kind object;
  #L16626a.  v3:= v11 @kind object;
  #L16626c.  v4:= v13 @kind object;
  #L16626e.  v5:= v14 @kind object;
  #L166270.  v6:= v12 @kind object;
  #L166272.  v7:= v15 @kind object;
  #L166274.  call `configureGeneratedId`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedId:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @kind virtual;
  #L16627a.  goto L16616e;
  #L16627e.  call temp:= `isId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isId:()Z` @kind virtual;
  #L166284.  v0:= temp;
  #L166286.  if v0 == 0 then goto L16616e;
  #L16628a.  v0:= v8 @kind object;
  #L16628c.  v1:= v10 @kind object;
  #L16628e.  v2:= v11 @kind object;
  #L166290.  v3:= v13 @kind object;
  #L166292.  v4:= v12 @kind object;
  #L166294.  v5:= v15 @kind object;
  #L166296.  call `configureId`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureId:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @kind virtual;
  #L16629c.  goto L16616e;
  #L1662a0.  v0:= "NOT NULL " @kind object;
  #L1662a4.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1662aa.  goto L1661b2;
  #L1662ac.  switch v2
                  | 1 => goto L166134
                  | 2 => goto L1661c6
                  | 3 => goto L1661ce
                  | 4 => goto L1661d6
                  | 5 => goto L1661de
                  | 6 => goto L1661e6
                  | 7 => goto L1661ee
                  | 8 => goto L1661f6
                  | 9 => goto L1661fe
                  | 10 => goto L166206
                  | 11 => goto L16620e
                  | 12 => goto L166216
                  | 13 => goto L16621e
                  | 14 => goto L166226
                  | 15 => goto L16622e
                  | 16 => goto L166236
                  | else => goto L1660fa;
}
procedure `void` `appendCreateTableSuffix`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCreateTableSuffix:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;

  #L166304.  return @kind void;
}
procedure `void` `appendDateType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDateType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L166318.  v0:= "TIMESTAMP" @kind object;
  #L16631c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166322.  return @kind void;
}
procedure `void` `appendEscapedEntityName`(`com.j256.ormlite.db.BaseDatabaseType` v3 @kind this, `java.lang.StringBuilder` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L166334.  v2:= 96I;
  #L166338.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16633e.  v0:= 46I;
  #L166342.  call temp:= `indexOf`(v5, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L166348.  v0:= temp;
  #L16634a.  if v0 <= 0 then goto L166382;
  #L16634e.  v1:= 0I;
  #L166350.  call temp:= `substring`(v5, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L166356.  v1:= temp @kind object;
  #L166358.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16635e.  v1:= "`.`" @kind object;
  #L166362.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166368.  v0:= v0 + 1;
  #L16636c.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L166372.  v0:= temp @kind object;
  #L166374.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16637a.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L166380.  return @kind void;
  #L166382.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166388.  goto L16637a;
}
procedure `void` `appendEscapedWord`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16639c.  v1:= 39I;
  #L1663a0.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1663a6.  v0:= temp @kind object;
  #L1663a8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1663ae.  v0:= temp @kind object;
  #L1663b0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1663b6.  return @kind void;
}
procedure `void` `appendInsertNoColumns`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendInsertNoColumns:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1663c8.  v0:= "() VALUES ()" @kind object;
  #L1663cc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1663d2.  return @kind void;
}
procedure `void` `appendLimitValue`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `long` v4 , `java.lang.Long` v6 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLimitValue:(Ljava/lang/StringBuilder;JLjava/lang/Long;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1663e4.  v0:= "LIMIT " @kind object;
  #L1663e8.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1663ee.  v0:= temp @kind object;
  #L1663f0.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1663f6.  v0:= temp @kind object;
  #L1663f8.  v1:= 32I;
  #L1663fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L166402.  return @kind void;
}
procedure `void` `appendLongStringType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L166414.  v0:= "TEXT" @kind object;
  #L166418.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16641e.  return @kind void;
}
procedure `void` `appendLongType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L166430.  v0:= "BIGINT" @kind object;
  #L166434.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16643a.  return @kind void;
}
procedure `void` `appendOffsetValue`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `long` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendOffsetValue:(Ljava/lang/StringBuilder;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16644c.  v0:= "OFFSET " @kind object;
  #L166450.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166456.  v0:= temp @kind object;
  #L166458.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L16645e.  v0:= temp @kind object;
  #L166460.  v1:= 32I;
  #L166464.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16646a.  return @kind void;
}
procedure `void` `appendSelectNextValFromSequence`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendSelectNextValFromSequence:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L16647c.  return @kind void;
}
procedure `void` `appendSerializableType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendSerializableType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L166490.  v0:= "BLOB" @kind object;
  #L166494.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16649a.  return @kind void;
}
procedure `void` `appendShortType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendShortType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1664ac.  v0:= "SMALLINT" @kind object;
  #L1664b0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1664b6.  return @kind void;
}
procedure `void` `appendStringType`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L1664c8.  call temp:= `isVarcharFieldWidthSupported`(v2) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isVarcharFieldWidthSupported:()Z` @kind virtual;
  #L1664ce.  v0:= temp;
  #L1664d0.  if v0 == 0 then goto L1664f4;
  #L1664d4.  v0:= "VARCHAR(" @kind object;
  #L1664d8.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1664de.  v0:= temp @kind object;
  #L1664e0.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1664e6.  v0:= temp @kind object;
  #L1664e8.  v1:= 41I;
  #L1664ec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1664f2.  return @kind void;
  #L1664f4.  v0:= "VARCHAR" @kind object;
  #L1664f8.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1664fe.  goto L1664f2;
}
procedure `void` `appendUuidNativeType`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendUuidNativeType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L166510.  v0:= new `java.lang.UnsupportedOperationException`;
  #L166514.  v1:= "UUID is not supported by this database type" @kind object;
  #L166518.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16651e.  throw v0;
}
procedure `void` `configureGeneratedId`(`com.j256.ormlite.db.BaseDatabaseType` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.StringBuilder` v5 @kind object, `com.j256.ormlite.field.FieldType` v6 @kind object, `java.util.List` v7 @kind object, `java.util.List` v8 @kind object, `java.util.List` v9 @kind object, `java.util.List` v10 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedId:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L166530.  v0:= new `java.lang.IllegalStateException`;
  #L166534.  v1:= new `java.lang.StringBuilder`;
  #L166538.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16653e.  v2:= "GeneratedId is not supported by database " @kind object;
  #L166542.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166548.  v1:= temp @kind object;
  #L16654a.  call temp:= `getDatabaseName`(v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDatabaseName:()Ljava/lang/String;` @kind virtual;
  #L166550.  v2:= temp @kind object;
  #L166552.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166558.  v1:= temp @kind object;
  #L16655a.  v2:= " for field " @kind object;
  #L16655e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166564.  v1:= temp @kind object;
  #L166566.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16656c.  v1:= temp @kind object;
  #L16656e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L166574.  v1:= temp @kind object;
  #L166576.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16657c.  throw v0;
}
procedure `void` `configureGeneratedIdSequence`(`com.j256.ormlite.db.BaseDatabaseType` v3 @kind this, `java.lang.StringBuilder` v4 @kind object, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.util.List` v6 @kind object, `java.util.List` v7 @kind object, `java.util.List` v8 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedIdSequence:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L166590.  v0:= new `java.sql.SQLException`;
  #L166594.  v1:= new `java.lang.StringBuilder`;
  #L166598.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16659e.  v2:= "GeneratedIdSequence is not supported by database " @kind object;
  #L1665a2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1665a8.  v1:= temp @kind object;
  #L1665aa.  call temp:= `getDatabaseName`(v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDatabaseName:()Ljava/lang/String;` @kind virtual;
  #L1665b0.  v2:= temp @kind object;
  #L1665b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1665b8.  v1:= temp @kind object;
  #L1665ba.  v2:= " for field " @kind object;
  #L1665be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1665c4.  v1:= temp @kind object;
  #L1665c6.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1665cc.  v1:= temp @kind object;
  #L1665ce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1665d4.  v1:= temp @kind object;
  #L1665d6.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1665dc.  throw v0;
}
procedure `void` `configureId`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureId:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;

  #L1665f0.  return @kind void;
}
procedure `void` `dropColumnArg`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `com.j256.ormlite.field.FieldType` v1 @kind object, `java.util.List` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.dropColumnArg:(Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L166604.  return @kind void;
}
procedure `com.j256.ormlite.table.DatabaseTableConfig` `extractDatabaseTableConfig`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `com.j256.ormlite.support.ConnectionSource` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.extractDatabaseTableConfig:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/table/DatabaseTableConfig;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L166618.  v0:= 0I;
  #L16661a.  return v0 @kind object;
}
procedure `java.lang.String` `generateIdSequenceName`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.generateIdSequenceName:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16662c.  v0:= new `java.lang.StringBuilder`;
  #L166630.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L166636.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16663c.  v0:= temp @kind object;
  #L16663e.  v1:= `@@com.j256.ormlite.db.BaseDatabaseType.DEFAULT_SEQUENCE_SUFFIX` @type ^`java.lang.String` @kind object;
  #L166642.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166648.  v0:= temp @kind object;
  #L16664a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L166650.  v0:= temp @kind object;
  #L166652.  call temp:= `isEntityNamesMustBeUpCase`(v2) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isEntityNamesMustBeUpCase:()Z` @kind virtual;
  #L166658.  v1:= temp;
  #L16665a.  if v1 == 0 then goto L166666;
  #L16665e.  call temp:= `upCaseEntityName`(v2, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.upCaseEntityName:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L166664.  v0:= temp @kind object;
  #L166666.  return v0 @kind object;
}
procedure `boolean` `generatedIdSqlAtEnd`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.generatedIdSqlAtEnd:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L166678.  v0:= 1I;
  #L16667a.  return v0;
}
procedure `java.lang.String` `getCommentLinePrefix`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getCommentLinePrefix:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16668c.  v0:= "-- " @kind object;
  #L166690.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.DataPersister` `getDataPersister`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `com.j256.ormlite.field.DataPersister` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDataPersister:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/DataPersister;` @AccessFlag PUBLIC {
    temp;

  #L1666a4.  return v1 @kind object;
}
procedure `java.lang.String` `getDriverClassName`() @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDriverClassName:()Ljava/lang/String;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `com.j256.ormlite.field.FieldConverter` `getFieldConverter`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `com.j256.ormlite.field.DataPersister` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getFieldConverter:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/FieldConverter;` @AccessFlag PUBLIC {
    temp;

  #L1666b8.  return v1 @kind object;
}
procedure `java.lang.String` `getPingStatement`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getPingStatement:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1666cc.  v0:= "SELECT 1" @kind object;
  #L1666d0.  return v0 @kind object;
}
procedure `boolean` `isAllowGeneratedIdInsertSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isAllowGeneratedIdInsertSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1666e4.  v0:= 1I;
  #L1666e6.  return v0;
}
procedure `boolean` `isBatchUseTransaction`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isBatchUseTransaction:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1666f8.  v0:= 0I;
  #L1666fa.  return v0;
}
procedure `boolean` `isCreateIfNotExistsSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateIfNotExistsSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16670c.  v0:= 0I;
  #L16670e.  return v0;
}
procedure `boolean` `isCreateIndexIfNotExistsSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateIndexIfNotExistsSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L166720.  call temp:= `isCreateIfNotExistsSupported`(v1) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateIfNotExistsSupported:()Z` @kind virtual;
  #L166726.  v0:= temp;
  #L166728.  return v0;
}
procedure `boolean` `isCreateTableReturnsNegative`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateTableReturnsNegative:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16673c.  v0:= 0I;
  #L16673e.  return v0;
}
procedure `boolean` `isCreateTableReturnsZero`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateTableReturnsZero:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L166750.  v0:= 1I;
  #L166752.  return v0;
}
procedure `boolean` `isEntityNamesMustBeUpCase`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isEntityNamesMustBeUpCase:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L166764.  v0:= 0I;
  #L166766.  return v0;
}
procedure `boolean` `isIdSequenceNeeded`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isIdSequenceNeeded:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L166778.  v0:= 0I;
  #L16677a.  return v0;
}
procedure `boolean` `isLimitAfterSelect`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isLimitAfterSelect:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16678c.  v0:= 0I;
  #L16678e.  return v0;
}
procedure `boolean` `isLimitSqlSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isLimitSqlSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1667a0.  v0:= 1I;
  #L1667a2.  return v0;
}
procedure `boolean` `isNestedSavePointsSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isNestedSavePointsSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1667b4.  v0:= 1I;
  #L1667b6.  return v0;
}
procedure `boolean` `isOffsetLimitArgument`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isOffsetLimitArgument:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1667c8.  v0:= 0I;
  #L1667ca.  return v0;
}
procedure `boolean` `isOffsetSqlSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isOffsetSqlSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1667dc.  v0:= 1I;
  #L1667de.  return v0;
}
procedure `boolean` `isSelectSequenceBeforeInsert`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isSelectSequenceBeforeInsert:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1667f0.  v0:= 0I;
  #L1667f2.  return v0;
}
procedure `boolean` `isTruncateSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isTruncateSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L166804.  v0:= 0I;
  #L166806.  return v0;
}
procedure `boolean` `isVarcharFieldWidthSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isVarcharFieldWidthSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L166818.  v0:= 1I;
  #L16681a.  return v0;
}
procedure `void` `loadDriver`(`com.j256.ormlite.db.BaseDatabaseType` v4 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.loadDriver:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16682c.  call temp:= `getDriverClassName`(v4) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDriverClassName:()Ljava/lang/String;` @kind virtual;
  #L166832.  v0:= temp @kind object;
  #L166834.  if v0 == 0 then goto L16683e;
  #Try_start0.  
  #L166838.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #Try_end0.  
  #L16683e.  return @kind void;
  #L166840.  v1:= Exception @type ^`java.lang.ClassNotFoundException` @kind object;
  #L166842.  v2:= new `java.lang.StringBuilder`;
  #L166846.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16684c.  v3:= "Driver class was not found for " @kind object;
  #L166850.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166856.  v2:= temp @kind object;
  #L166858.  call temp:= `getDatabaseName`(v4) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDatabaseName:()Ljava/lang/String;` @kind virtual;
  #L16685e.  v3:= temp @kind object;
  #L166860.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166866.  v2:= temp @kind object;
  #L166868.  v3:= " database.  Missing jar with class " @kind object;
  #L16686c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166872.  v2:= temp @kind object;
  #L166874.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16687a.  v0:= temp @kind object;
  #L16687c.  v2:= "." @kind object;
  #L166880.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166886.  v0:= temp @kind object;
  #L166888.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16688e.  v0:= temp @kind object;
  #L166890.  call temp:= `create`(v0, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L166896.  v0:= temp @kind object;
  #L166898.  throw v0;
  catch `java.lang.ClassNotFoundException` @[Try_start0..Try_end0] goto L166840;
}
procedure `void` `setDriver`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.sql.Driver` v1 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.setDriver:(Ljava/sql/Driver;)V` @AccessFlag PUBLIC {
    temp;

  #L1668bc.  v0.`com.j256.ormlite.db.BaseDatabaseType.driver` @type ^`java.sql.Driver` := v1 @kind object;
  #L1668c0.  return @kind void;
}
procedure `java.lang.String` `upCaseEntityName`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.upCaseEntityName:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1668d4.  v0:= `@@java.util.Locale.ENGLISH` @type ^`java.util.Locale` @kind object;
  #L1668d8.  call temp:= `toUpperCase`(v2, v0) @signature `Ljava/lang/String;.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L1668de.  v0:= temp @kind object;
  #L1668e0.  return v0 @kind object;
}
