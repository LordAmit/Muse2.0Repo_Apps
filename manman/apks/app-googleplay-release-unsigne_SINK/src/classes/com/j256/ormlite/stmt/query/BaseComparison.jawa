record `com.j256.ormlite.stmt.query.BaseComparison` @kind class @AccessFlag ABSTRACT extends `com.j256.ormlite.stmt.query.Comparison` @kind interface {
  `java.lang.String` `com.j256.ormlite.stmt.query.BaseComparison.columnName` @AccessFlag PROTECTED_FINAL;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.stmt.query.BaseComparison.fieldType` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `com.j256.ormlite.stmt.query.BaseComparison.value` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@com.j256.ormlite.stmt.query.BaseComparison.NUMBER_CHARACTERS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.BaseComparison` v3 @kind this, `java.lang.String` v4 @kind object, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `boolean` v7 ) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Z)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L178e3c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L178e42.  if v7 == 0 then goto L178eb0;
  #L178e46.  if v5 == 0 then goto L178eb0;
  #L178e4a.  call temp:= `isComparable`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.isComparable:()Z` @kind virtual;
  #L178e50.  v0:= temp;
  #L178e52.  if v0 != 0 then goto L178eb0;
  #L178e56.  v0:= new `java.sql.SQLException`;
  #L178e5a.  v1:= new `java.lang.StringBuilder`;
  #L178e5e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L178e64.  v2:= "Field '" @kind object;
  #L178e68.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L178e6e.  v1:= temp @kind object;
  #L178e70.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L178e76.  v1:= temp @kind object;
  #L178e78.  v2:= "' is of data type " @kind object;
  #L178e7c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L178e82.  v1:= temp @kind object;
  #L178e84.  call temp:= `getDataPersister`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L178e8a.  v2:= temp @kind object;
  #L178e8c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L178e92.  v1:= temp @kind object;
  #L178e94.  v2:= " which can not be compared" @kind object;
  #L178e98.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L178e9e.  v1:= temp @kind object;
  #L178ea0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L178ea6.  v1:= temp @kind object;
  #L178ea8.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L178eae.  throw v0;
  #L178eb0.  v3.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` := v4 @kind object;
  #L178eb4.  v3.`com.j256.ormlite.stmt.query.BaseComparison.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v5 @kind object;
  #L178eb8.  v3.`com.j256.ormlite.stmt.query.BaseComparison.value` @type ^`java.lang.Object` := v6 @kind object;
  #L178ebc.  return @kind void;
}
procedure `void` `appendArgOrValue`(`com.j256.ormlite.stmt.query.BaseComparison` v7 @kind this, `com.j256.ormlite.db.DatabaseType` v8 @kind object, `com.j256.ormlite.field.FieldType` v9 @kind object, `java.lang.StringBuilder` v10 @kind object, `java.util.List` v11 @kind object, `java.lang.Object` v12 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L178ed0.  v2:= 63I;
  #L178ed4.  v6:= 0I;
  #L178ed6.  v0:= 1I;
  #L178ed8.  if v12 != 0 then goto L178f22;
  #L178edc.  v0:= new `java.sql.SQLException`;
  #L178ee0.  v1:= new `java.lang.StringBuilder`;
  #L178ee4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L178eea.  v2:= "argument for '" @kind object;
  #L178eee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L178ef4.  v1:= temp @kind object;
  #L178ef6.  call temp:= `getFieldName`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldName:()Ljava/lang/String;` @kind virtual;
  #L178efc.  v2:= temp @kind object;
  #L178efe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L178f04.  v1:= temp @kind object;
  #L178f06.  v2:= "' is null" @kind object;
  #L178f0a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L178f10.  v1:= temp @kind object;
  #L178f12.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L178f18.  v1:= temp @kind object;
  #L178f1a.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L178f20.  throw v0;
  #L178f22.  v1:= instanceof @variable v12 @type ^`com.j256.ormlite.stmt.ArgumentHolder` @kind boolean;
  #L178f26.  if v1 == 0 then goto L178f54;
  #L178f2a.  call temp:= `append`(v10, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L178f30.  v12:= (`com.j256.ormlite.stmt.ArgumentHolder`) v12 @kind object;
  #L178f34.  v1:= v7.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L178f38.  call `setMetaInfo`(v12, v1, v9) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setMetaInfo:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)V` @kind interface;
  #L178f3e.  call temp:= `add`(v11, v12) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L178f44.  if v0 == 0 then goto L178f52;
  #L178f48.  v0:= 32I;
  #L178f4c.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L178f52.  return @kind void;
  #L178f54.  v1:= instanceof @variable v12 @type ^`com.j256.ormlite.stmt.ColumnArg` @kind boolean;
  #L178f58.  if v1 == 0 then goto L178f8c;
  #L178f5c.  v12:= (`com.j256.ormlite.stmt.ColumnArg`) v12 @kind object;
  #L178f60.  call temp:= `getTableName`(v12) @signature `Lcom/j256/ormlite/stmt/ColumnArg;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L178f66.  v1:= temp @kind object;
  #L178f68.  if v1 == 0 then goto L178f7c;
  #L178f6c.  call `appendEscapedEntityName`(v8, v10, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L178f72.  v1:= 46I;
  #L178f76.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L178f7c.  call temp:= `getColumnName`(v12) @signature `Lcom/j256/ormlite/stmt/ColumnArg;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L178f82.  v1:= temp @kind object;
  #L178f84.  call `appendEscapedEntityName`(v8, v10, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L178f8a.  goto L178f44;
  #L178f8c.  call temp:= `isArgumentHolderRequired`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isArgumentHolderRequired:()Z` @kind virtual;
  #L178f92.  v1:= temp;
  #L178f94.  if v1 == 0 then goto L178fc0;
  #L178f98.  call temp:= `append`(v10, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L178f9e.  v1:= new `com.j256.ormlite.stmt.SelectArg`;
  #L178fa2.  call `<init>`(v1) @signature `Lcom/j256/ormlite/stmt/SelectArg;.<init>:()V` @kind direct;
  #L178fa8.  v2:= v7.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L178fac.  call `setMetaInfo`(v1, v2, v9) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setMetaInfo:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)V` @kind interface;
  #L178fb2.  call `setValue`(v1, v12) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setValue:(Ljava/lang/Object;)V` @kind interface;
  #L178fb8.  call temp:= `add`(v11, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L178fbe.  goto L178f44;
  #L178fc0.  call temp:= `isForeign`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @kind virtual;
  #L178fc6.  v1:= temp;
  #L178fc8.  if v1 == 0 then goto L17900a;
  #L178fcc.  call temp:= `getType`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L178fd2.  v1:= temp @kind object;
  #L178fd4.  call temp:= `getClass`(v12) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L178fda.  v2:= temp @kind object;
  #L178fdc.  call temp:= `isAssignableFrom`(v1, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L178fe2.  v1:= temp;
  #L178fe4.  if v1 == 0 then goto L17900a;
  #L178fe8.  call temp:= `getForeignIdField`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L178fee.  v2:= temp @kind object;
  #L178ff0.  call temp:= `extractJavaFieldValue`(v2, v12) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L178ff6.  v5:= temp @kind object;
  #L178ff8.  v0:= v7 @kind object;
  #L178ffa.  v1:= v8 @kind object;
  #L178ffc.  v3:= v10 @kind object;
  #L178ffe.  v4:= v11 @kind object;
  #L179000.  call `appendArgOrValue`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @kind virtual;
  #L179006.  v0:= v6;
  #L179008.  goto L178f44;
  #L17900a.  call temp:= `isEscapedValue`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedValue:()Z` @kind virtual;
  #L179010.  v1:= temp;
  #L179012.  if v1 == 0 then goto L17902e;
  #L179016.  call temp:= `convertJavaFieldToSqlArgValue`(v9, v12) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L17901c.  v1:= temp @kind object;
  #L17901e.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L179024.  v1:= temp @kind object;
  #L179026.  call `appendEscapedWord`(v8, v10, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L17902c.  goto L178f44;
  #L17902e.  call temp:= `isForeign`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @kind virtual;
  #L179034.  v1:= temp;
  #L179036.  if v1 == 0 then goto L1790d2;
  #L17903a.  call temp:= `convertJavaFieldToSqlArgValue`(v9, v12) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L179040.  v1:= temp @kind object;
  #L179042.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L179048.  v1:= temp @kind object;
  #L17904a.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L179050.  v2:= temp;
  #L179052.  if v2 <= 0 then goto L1790c8;
  #L179056.  v2:= "0123456789.-+" @kind object;
  #L17905a.  call temp:= `charAt`(v1, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L179060.  v3:= temp;
  #L179062.  call temp:= `indexOf`(v2, v3) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L179068.  v2:= temp;
  #L17906a.  if v2 >= 0 then goto L1790c8;
  #L17906e.  v0:= new `java.sql.SQLException`;
  #L179072.  v2:= new `java.lang.StringBuilder`;
  #L179076.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L17907c.  v3:= "Foreign field " @kind object;
  #L179080.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L179086.  v2:= temp @kind object;
  #L179088.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17908e.  v2:= temp @kind object;
  #L179090.  v3:= " does not seem to be producing a numerical value '" @kind object;
  #L179094.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17909a.  v2:= temp @kind object;
  #L17909c.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1790a2.  v1:= temp @kind object;
  #L1790a4.  v2:= "'. Maybe you are passing the wrong object to comparison: " @kind object;
  #L1790a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1790ae.  v1:= temp @kind object;
  #L1790b0.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1790b6.  v1:= temp @kind object;
  #L1790b8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1790be.  v1:= temp @kind object;
  #L1790c0.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1790c6.  throw v0;
  #L1790c8.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1790ce.  goto L178f44;
  #L1790d2.  call temp:= `convertJavaFieldToSqlArgValue`(v9, v12) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1790d8.  v1:= temp @kind object;
  #L1790da.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1790e0.  goto L178f44;
}
procedure `void` `appendOperation`(`java.lang.StringBuilder` v0 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `appendSql`(`com.j256.ormlite.stmt.query.BaseComparison` v1 @kind this, `com.j256.ormlite.db.DatabaseType` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.StringBuilder` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1790f4.  if v3 == 0 then goto L179108;
  #L1790f8.  call `appendEscapedEntityName`(v2, v4, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L1790fe.  v0:= 46I;
  #L179102.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L179108.  v0:= v1.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L17910c.  call `appendEscapedEntityName`(v2, v4, v0) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L179112.  v0:= 32I;
  #L179116.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L17911c.  call `appendOperation`(v1, v4) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @kind virtual;
  #L179122.  call `appendValue`(v1, v2, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L179128.  return @kind void;
}
procedure `void` `appendValue`(`com.j256.ormlite.stmt.query.BaseComparison` v6 @kind this, `com.j256.ormlite.db.DatabaseType` v7 @kind object, `java.lang.StringBuilder` v8 @kind object, `java.util.List` v9 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L17913c.  v2:= v6.`com.j256.ormlite.stmt.query.BaseComparison.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L179140.  v5:= v6.`com.j256.ormlite.stmt.query.BaseComparison.value` @type ^`java.lang.Object` @kind object;
  #L179144.  v0:= v6 @kind object;
  #L179146.  v1:= v7 @kind object;
  #L179148.  v3:= v8 @kind object;
  #L17914a.  v4:= v9 @kind object;
  #L17914c.  call `appendArgOrValue`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @kind virtual;
  #L179152.  return @kind void;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.stmt.query.BaseComparison` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L179164.  v0:= v1.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L179168.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.query.BaseComparison` v3 @kind this) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L17917c.  v2:= 32I;
  #L179180.  v0:= new `java.lang.StringBuilder`;
  #L179184.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L17918a.  v1:= v3.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L17918e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L179194.  v1:= temp @kind object;
  #L179196.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L17919c.  call `appendOperation`(v3, v0) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @kind virtual;
  #L1791a2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1791a8.  v1:= v3.`com.j256.ormlite.stmt.query.BaseComparison.value` @type ^`java.lang.Object` @kind object;
  #L1791ac.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1791b2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1791b8.  v0:= temp @kind object;
  #L1791ba.  return v0 @kind object;
}
