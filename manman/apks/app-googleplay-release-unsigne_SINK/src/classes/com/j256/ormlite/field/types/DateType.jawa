record `com.j256.ormlite.field.types.DateType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDateType` @kind class {
}
global `com.j256.ormlite.field.types.DateType` `@@com.j256.ormlite.field.types.DateType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/DateType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L16daf4.  v0:= new `com.j256.ormlite.field.types.DateType`;
  #L16daf8.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/DateType;.<init>:()V` @kind direct;
  #L16dafe.  `@@com.j256.ormlite.field.types.DateType.singleTon` @type ^`com.j256.ormlite.field.types.DateType` := v0 @kind object;
  #L16db02.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/DateType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16db14.  v0:= `@@com.j256.ormlite.field.SqlType.DATE` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L16db18.  v1:= 1I;
  #L16db1a.  v1:= new `java.lang.Class`[v1];
  #L16db1e.  v2:= 0I;
  #L16db20.  v3:= constclass @type ^`java.util.Date` @kind object;
  #L16db24.  v1[v2]:= v3 @kind object;
  #L16db28.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16db2e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/DateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16db40.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16db46.  return @kind void;
}
procedure `com.j256.ormlite.field.types.DateType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/DateType;.getSingleton:()Lcom/j256/ormlite/field/types/DateType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L16db58.  v0:= `@@com.j256.ormlite.field.types.DateType.singleTon` @type ^`com.j256.ormlite.field.types.DateType` @kind object;
  #L16db5c.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` `getDefaultDateFormatConfig`(`com.j256.ormlite.field.types.DateType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateType;.getDefaultDateFormatConfig:()Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L16db70.  v0:= `@@com.j256.ormlite.field.types.DateType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L16db74.  return v0 @kind object;
}
procedure `boolean` `isArgumentHolderRequired`(`com.j256.ormlite.field.types.DateType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateType;.isArgumentHolderRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16db88.  v0:= 1I;
  #L16db8a.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.DateType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/DateType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16db9c.  v6:= (`java.util.Date`) v6 @kind object;
  #L16dba0.  v0:= new `java.sql.Timestamp`;
  #L16dba4.  call temp:= `getTime`(v6) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L16dbaa.  v2:= temp @kind wide;
  #L16dbac.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L16dbb2.  return v0 @kind object;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.DateType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/DateType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16dbc4.  call temp:= `getDefaultDateFormatConfig`(v4) @signature `Lcom/j256/ormlite/field/types/DateType;.getDefaultDateFormatConfig:()Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind virtual;
  #L16dbca.  v0:= temp @kind object;
  #L16dbcc.  call temp:= `convertDateStringConfig`(v5, v0) @signature `Lcom/j256/ormlite/field/types/DateType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind static;
  #L16dbd2.  v1:= temp @kind object;
  #Try_start0.  
  #L16dbd4.  v0:= new `java.sql.Timestamp`;
  #L16dbd8.  call temp:= `parseDateString`(v1, v6) @signature `Lcom/j256/ormlite/field/types/DateType;.parseDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L16dbde.  v2:= temp @kind object;
  #L16dbe0.  call temp:= `getTime`(v2) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L16dbe6.  v2:= temp @kind wide;
  #L16dbe8.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #Try_end0.  
  #L16dbee.  return v0 @kind object;
  #L16dbf0.  v0:= Exception @type ^`java.text.ParseException` @kind object;
  #L16dbf2.  v2:= new `java.lang.StringBuilder`;
  #L16dbf6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16dbfc.  v3:= "Problems parsing default date string '" @kind object;
  #L16dc00.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16dc06.  v2:= temp @kind object;
  #L16dc08.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16dc0e.  v2:= temp @kind object;
  #L16dc10.  v3:= "' using '" @kind object;
  #L16dc14.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16dc1a.  v2:= temp @kind object;
  #L16dc1c.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16dc22.  v1:= temp @kind object;
  #L16dc24.  v2:= 39I;
  #L16dc28.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16dc2e.  v1:= temp @kind object;
  #L16dc30.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16dc36.  v1:= temp @kind object;
  #L16dc38.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16dc3e.  v0:= temp @kind object;
  #L16dc40.  throw v0;
  catch `java.text.ParseException` @[Try_start0..Try_end0] goto L16dbf0;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.DateType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/DateType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16dc64.  call temp:= `getTimestamp`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getTimestamp:(I)Ljava/sql/Timestamp;` @kind interface;
  #L16dc6a.  v0:= temp @kind object;
  #L16dc6c.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.DateType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/DateType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16dc80.  v6:= (`java.sql.Timestamp`) v6 @kind object;
  #L16dc84.  v0:= new `java.util.Date`;
  #L16dc88.  call temp:= `getTime`(v6) @signature `Ljava/sql/Timestamp;.getTime:()J` @kind virtual;
  #L16dc8e.  v2:= temp @kind wide;
  #L16dc90.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L16dc96.  return v0 @kind object;
}
