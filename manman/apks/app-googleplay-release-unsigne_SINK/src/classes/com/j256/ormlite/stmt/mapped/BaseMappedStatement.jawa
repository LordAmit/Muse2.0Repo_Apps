record `com.j256.ormlite.stmt.mapped.BaseMappedStatement` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `com.j256.ormlite.field.FieldType`[] `com.j256.ormlite.stmt.mapped.BaseMappedStatement.argFieldTypes` @AccessFlag PROTECTED_FINAL;
  `java.lang.Class` `com.j256.ormlite.stmt.mapped.BaseMappedStatement.clazz` @AccessFlag PROTECTED_FINAL;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.stmt.mapped.BaseMappedStatement.idField` @AccessFlag PROTECTED_FINAL;
  `java.lang.String` `com.j256.ormlite.stmt.mapped.BaseMappedStatement.statement` @AccessFlag PROTECTED_FINAL;
  `com.j256.ormlite.table.TableInfo` `com.j256.ormlite.stmt.mapped.BaseMappedStatement.tableInfo` @AccessFlag PROTECTED_FINAL;
}
global `com.j256.ormlite.logger.Logger` `@@com.j256.ormlite.stmt.mapped.BaseMappedStatement.logger` @AccessFlag PROTECTED_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1772ac.  v0:= constclass @type ^`com.j256.ormlite.stmt.mapped.BaseMappedStatement` @kind object;
  #L1772b0.  call temp:= `getLogger`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/Class;)Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L1772b6.  v0:= temp @kind object;
  #L1772b8.  `@@com.j256.ormlite.stmt.mapped.BaseMappedStatement.logger` @type ^`com.j256.ormlite.logger.Logger` := v0 @kind object;
  #L1772bc.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.mapped.BaseMappedStatement` v1 @kind this, `com.j256.ormlite.table.TableInfo` v2 @kind object, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType`[] v4 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L1772d0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1772d6.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedStatement.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` := v2 @kind object;
  #L1772da.  call temp:= `getDataClass`(v2) @signature `Lcom/j256/ormlite/table/TableInfo;.getDataClass:()Ljava/lang/Class;` @kind virtual;
  #L1772e0.  v0:= temp @kind object;
  #L1772e2.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedStatement.clazz` @type ^`java.lang.Class` := v0 @kind object;
  #L1772e6.  call temp:= `getIdField`(v2) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L1772ec.  v0:= temp @kind object;
  #L1772ee.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedStatement.idField` @type ^`com.j256.ormlite.field.FieldType` := v0 @kind object;
  #L1772f2.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedStatement.statement` @type ^`java.lang.String` := v3 @kind object;
  #L1772f6.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedStatement.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] := v4 @kind object;
  #L1772fa.  return @kind void;
}
procedure `void` `appendFieldColumnName`(`com.j256.ormlite.db.DatabaseType` v1 @kind object, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;.appendFieldColumnName:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L17730c.  call temp:= `getColumnName`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L177312.  v0:= temp @kind object;
  #L177314.  call `appendEscapedEntityName`(v1, v2, v0) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L17731a.  if v4 == 0 then goto L177324;
  #L17731e.  call temp:= `add`(v4, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L177324.  v0:= 32I;
  #L177328.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L17732e.  return @kind void;
}
procedure `void` `appendTableName`(`com.j256.ormlite.db.DatabaseType` v1 @kind object, `java.lang.StringBuilder` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;.appendTableName:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L177340.  if v3 == 0 then goto L17734a;
  #L177344.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17734a.  call `appendEscapedEntityName`(v1, v2, v4) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L177350.  v0:= 32I;
  #L177354.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L17735a.  return @kind void;
}
procedure `void` `appendWhereFieldEq`(`com.j256.ormlite.db.DatabaseType` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.StringBuilder` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;.appendWhereFieldEq:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L17736c.  v0:= "WHERE " @kind object;
  #L177370.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L177376.  call `appendFieldColumnName`(v1, v3, v2, v4) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;.appendFieldColumnName:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;)V` @kind static;
  #L17737c.  v0:= "= ?" @kind object;
  #L177380.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L177386.  return @kind void;
}
procedure `java.lang.Object` `convertIdToFieldObject`(`com.j256.ormlite.stmt.mapped.BaseMappedStatement` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;.convertIdToFieldObject:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L177398.  v0:= v1.`com.j256.ormlite.stmt.mapped.BaseMappedStatement.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L17739c.  call temp:= `convertJavaFieldToSqlArgValue`(v0, v2) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1773a2.  v0:= temp @kind object;
  #L1773a4.  return v0 @kind object;
}
procedure `java.lang.Object`[] `getFieldObjects`(`com.j256.ormlite.stmt.mapped.BaseMappedStatement` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;.getFieldObjects:(Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1773b8.  v0:= v4.`com.j256.ormlite.stmt.mapped.BaseMappedStatement.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L1773bc.  v0:= length @variable v0;
  #L1773be.  v1:= new `java.lang.Object`[v0];
  #L1773c2.  v0:= 0I;
  #L1773c4.  v2:= v4.`com.j256.ormlite.stmt.mapped.BaseMappedStatement.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L1773c8.  v2:= length @variable v2;
  #L1773ca.  if v0 >= v2 then goto L177416;
  #L1773ce.  v2:= v4.`com.j256.ormlite.stmt.mapped.BaseMappedStatement.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L1773d2.  v2:= v2[v0] @kind object;
  #L1773d6.  call temp:= `isAllowGeneratedIdInsert`(v2) @signature `Lcom/j256/ormlite/field/FieldType;.isAllowGeneratedIdInsert:()Z` @kind virtual;
  #L1773dc.  v3:= temp;
  #L1773de.  if v3 == 0 then goto L177408;
  #L1773e2.  call temp:= `getFieldValueIfNotDefault`(v2, v5) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldValueIfNotDefault:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1773e8.  v3:= temp @kind object;
  #L1773ea.  v1[v0]:= v3 @kind object;
  #L1773ee.  v3:= v1[v0] @kind object;
  #L1773f2.  if v3 != 0 then goto L177402;
  #L1773f6.  call temp:= `getDefaultValue`(v2) @signature `Lcom/j256/ormlite/field/FieldType;.getDefaultValue:()Ljava/lang/Object;` @kind virtual;
  #L1773fc.  v2:= temp @kind object;
  #L1773fe.  v1[v0]:= v2 @kind object;
  #L177402.  v0:= v0 + 1;
  #L177406.  goto L1773c4;
  #L177408.  call temp:= `extractJavaFieldToSqlArgValue`(v2, v5) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L17740e.  v3:= temp @kind object;
  #L177410.  v1[v0]:= v3 @kind object;
  #L177414.  goto L1773ee;
  #L177416.  return v1 @kind object;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.mapped.BaseMappedStatement` v2 @kind this) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L177428.  v0:= new `java.lang.StringBuilder`;
  #L17742c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L177432.  v1:= "MappedStatement: " @kind object;
  #L177436.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17743c.  v0:= temp @kind object;
  #L17743e.  v1:= v2.`com.j256.ormlite.stmt.mapped.BaseMappedStatement.statement` @type ^`java.lang.String` @kind object;
  #L177442.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L177448.  v0:= temp @kind object;
  #L17744a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L177450.  v0:= temp @kind object;
  #L177452.  return v0 @kind object;
}
