record `com.j256.ormlite.stmt.UpdateBuilder` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.StatementBuilder` @kind class {
  `java.util.List` `com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `com.j256.ormlite.db.DatabaseType` v2 @kind object, `com.j256.ormlite.table.TableInfo` v3 @kind object, `com.j256.ormlite.dao.Dao` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.<init>:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/dao/Dao;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L176280.  v0:= `@@com.j256.ormlite.stmt.StatementBuilder$StatementType.UPDATE` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L176284.  call `<init>`(v1, v2, v3, v4, v0) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.<init>:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/dao/Dao;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;)V` @kind direct;
  #L17628a.  v0:= 0I;
  #L17628c.  v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` := v0 @kind object;
  #L176290.  return @kind void;
}
procedure `void` `addUpdateColumnToList`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `java.lang.String` v2 @kind object, `com.j256.ormlite.stmt.query.Clause` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.addUpdateColumnToList:(Ljava/lang/String;Lcom/j256/ormlite/stmt/query/Clause;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1762a4.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L1762a8.  if v0 != 0 then goto L1762ba;
  #L1762ac.  v0:= new `java.util.ArrayList`;
  #L1762b0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1762b6.  v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` := v0 @kind object;
  #L1762ba.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L1762be.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L1762c4.  return @kind void;
}
procedure `void` `appendStatementEnd`(`com.j256.ormlite.stmt.UpdateBuilder` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `java.util.List` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.appendStatementEnd:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;

  #L1762d8.  return @kind void;
}
procedure `void` `appendStatementStart`(`com.j256.ormlite.stmt.UpdateBuilder` v5 @kind this, `java.lang.StringBuilder` v6 @kind object, `java.util.List` v7 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.appendStatementStart:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1762ec.  v0:= v5.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L1762f0.  if v0 == 0 then goto L176304;
  #L1762f4.  v0:= v5.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L1762f8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1762fe.  v0:= temp;
  #L176300.  if v0 == 0 then goto L176314;
  #L176304.  v0:= new `java.lang.IllegalArgumentException`;
  #L176308.  v1:= "UPDATE statements must have at least one SET column" @kind object;
  #L17630c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L176312.  throw v0;
  #L176314.  v0:= "UPDATE " @kind object;
  #L176318.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17631e.  v0:= v5.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L176322.  v1:= v5.`com.j256.ormlite.stmt.UpdateBuilder.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L176326.  call temp:= `getTableName`(v1) @signature `Lcom/j256/ormlite/table/TableInfo;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L17632c.  v1:= temp @kind object;
  #L17632e.  call `appendEscapedEntityName`(v0, v6, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L176334.  v0:= " SET " @kind object;
  #L176338.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17633e.  v0:= 1I;
  #L176340.  v1:= v5.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L176344.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L17634a.  v2:= temp @kind object;
  #L17634c.  v1:= v0;
  #L17634e.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L176354.  v0:= temp;
  #L176356.  if v0 == 0 then goto L176386;
  #L17635a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L176360.  v0:= temp @kind object;
  #L176362.  v0:= (`com.j256.ormlite.stmt.query.Clause`) v0 @kind object;
  #L176366.  if v1 == 0 then goto L17637a;
  #L17636a.  v1:= 0I;
  #L17636c.  v3:= v5.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L176370.  v4:= 0I;
  #L176372.  call `appendSql`(v0, v3, v4, v6, v7) @signature `Lcom/j256/ormlite/stmt/query/Clause;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind interface;
  #L176378.  goto L17634e;
  #L17637a.  v3:= 44I;
  #L17637e.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L176384.  goto L17636c;
  #L176386.  return @kind void;
}
procedure `java.lang.String` `escapeColumnName`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeColumnName:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L176398.  v0:= new `java.lang.StringBuilder`;
  #L17639c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1763a2.  v1:= temp;
  #L1763a4.  v1:= v1 + 4;
  #L1763a8.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1763ae.  v1:= v2.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L1763b2.  call `appendEscapedEntityName`(v1, v0, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L1763b8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1763be.  v0:= temp @kind object;
  #L1763c0.  return v0 @kind object;
}
procedure `void` `escapeColumnName`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeColumnName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1763d4.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L1763d8.  call `appendEscapedEntityName`(v0, v2, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L1763de.  return @kind void;
}
procedure `java.lang.String` `escapeValue`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeValue:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1763f0.  v0:= new `java.lang.StringBuilder`;
  #L1763f4.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1763fa.  v1:= temp;
  #L1763fc.  v1:= v1 + 4;
  #L176400.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L176406.  v1:= v2.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L17640a.  call `appendEscapedWord`(v1, v0, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L176410.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L176416.  v0:= temp @kind object;
  #L176418.  return v0 @kind object;
}
procedure `void` `escapeValue`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeValue:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L17642c.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L176430.  call `appendEscapedWord`(v0, v2, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L176436.  return @kind void;
}
procedure `com.j256.ormlite.stmt.PreparedUpdate` `prepare`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.prepare:()Lcom/j256/ormlite/stmt/PreparedUpdate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L176448.  v0:= 0I;
  #L17644a.  v1:= 0I;
  #L17644c.  call temp:= `prepareStatement`(v2, v0, v1) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.prepareStatement:(Ljava/lang/Long;Z)Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;` @kind super;
  #L176452.  v0:= temp @kind object;
  #L176454.  return v0 @kind object;
}
procedure `void` `reset`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L176468.  call `reset`(v1) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.reset:()V` @kind super;
  #L17646e.  v0:= 0I;
  #L176470.  v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` := v0 @kind object;
  #L176474.  return @kind void;
}
procedure `int` `update`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.update:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L176488.  v0:= v2.`com.j256.ormlite.stmt.UpdateBuilder.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L17648c.  call temp:= `prepare`(v2) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.prepare:()Lcom/j256/ormlite/stmt/PreparedUpdate;` @kind virtual;
  #L176492.  v1:= temp @kind object;
  #L176494.  call temp:= `update`(v0, v1) @signature `Lcom/j256/ormlite/dao/Dao;.update:(Lcom/j256/ormlite/stmt/PreparedUpdate;)I` @kind interface;
  #L17649a.  v0:= temp;
  #L17649c.  return v0;
}
procedure `com.j256.ormlite.stmt.UpdateBuilder` `updateColumnExpression`(`com.j256.ormlite.stmt.UpdateBuilder` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.updateColumnExpression:(Ljava/lang/String;Ljava/lang/String;)Lcom/j256/ormlite/stmt/UpdateBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1764b0.  call temp:= `verifyColumnName`(v3, v4) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.verifyColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L1764b6.  v0:= temp @kind object;
  #L1764b8.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L1764be.  v1:= temp;
  #L1764c0.  if v1 == 0 then goto L1764f6;
  #L1764c4.  v0:= new `java.sql.SQLException`;
  #L1764c8.  v1:= new `java.lang.StringBuilder`;
  #L1764cc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1764d2.  v2:= "Can't update foreign colletion field: " @kind object;
  #L1764d6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1764dc.  v1:= temp @kind object;
  #L1764de.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1764e4.  v1:= temp @kind object;
  #L1764e6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1764ec.  v1:= temp @kind object;
  #L1764ee.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1764f4.  throw v0;
  #L1764f6.  v1:= new `com.j256.ormlite.stmt.query.SetExpression`;
  #L1764fa.  call `<init>`(v1, v4, v0, v5) @signature `Lcom/j256/ormlite/stmt/query/SetExpression;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)V` @kind direct;
  #L176500.  call `addUpdateColumnToList`(v3, v4, v1) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.addUpdateColumnToList:(Ljava/lang/String;Lcom/j256/ormlite/stmt/query/Clause;)V` @kind direct;
  #L176506.  return v3 @kind object;
}
procedure `com.j256.ormlite.stmt.UpdateBuilder` `updateColumnValue`(`com.j256.ormlite.stmt.UpdateBuilder` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.updateColumnValue:(Ljava/lang/String;Ljava/lang/Object;)Lcom/j256/ormlite/stmt/UpdateBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L176518.  call temp:= `verifyColumnName`(v3, v4) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.verifyColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L17651e.  v0:= temp @kind object;
  #L176520.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L176526.  v1:= temp;
  #L176528.  if v1 == 0 then goto L17655e;
  #L17652c.  v0:= new `java.sql.SQLException`;
  #L176530.  v1:= new `java.lang.StringBuilder`;
  #L176534.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L17653a.  v2:= "Can't update foreign colletion field: " @kind object;
  #L17653e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L176544.  v1:= temp @kind object;
  #L176546.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17654c.  v1:= temp @kind object;
  #L17654e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L176554.  v1:= temp @kind object;
  #L176556.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L17655c.  throw v0;
  #L17655e.  v1:= new `com.j256.ormlite.stmt.query.SetValue`;
  #L176562.  call `<init>`(v1, v4, v0, v5) @signature `Lcom/j256/ormlite/stmt/query/SetValue;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)V` @kind direct;
  #L176568.  call `addUpdateColumnToList`(v3, v4, v1) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.addUpdateColumnToList:(Ljava/lang/String;Lcom/j256/ormlite/stmt/query/Clause;)V` @kind direct;
  #L17656e.  return v3 @kind object;
}
