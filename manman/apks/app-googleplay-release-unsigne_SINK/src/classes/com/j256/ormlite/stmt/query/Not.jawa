record `com.j256.ormlite.stmt.query.Not` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.query.Clause` @kind interface, `com.j256.ormlite.stmt.query.NeedsFutureClause` @kind interface {
  `com.j256.ormlite.stmt.query.Comparison` `com.j256.ormlite.stmt.query.Not.comparison` @AccessFlag PRIVATE;
  `com.j256.ormlite.stmt.query.Exists` `com.j256.ormlite.stmt.query.Not.exists` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.Not` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/Not;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1799dc.  v0:= 0I;
  #L1799de.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1799e4.  v1.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` := v0 @kind object;
  #L1799e8.  v1.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` := v0 @kind object;
  #L1799ec.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.Not` v1 @kind this, `com.j256.ormlite.stmt.query.Clause` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Not;.<init>:(Lcom/j256/ormlite/stmt/query/Clause;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L179a00.  v0:= 0I;
  #L179a02.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L179a08.  v1.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` := v0 @kind object;
  #L179a0c.  v1.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` := v0 @kind object;
  #L179a10.  call `setMissingClause`(v1, v2) @signature `Lcom/j256/ormlite/stmt/query/Not;.setMissingClause:(Lcom/j256/ormlite/stmt/query/Clause;)V` @kind virtual;
  #L179a16.  return @kind void;
}
procedure `void` `appendSql`(`com.j256.ormlite.stmt.query.Not` v2 @kind this, `com.j256.ormlite.db.DatabaseType` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.StringBuilder` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Not;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L179a28.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L179a2c.  if v0 != 0 then goto L179a48;
  #L179a30.  v0:= v2.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` @kind object;
  #L179a34.  if v0 != 0 then goto L179a48;
  #L179a38.  v0:= new `java.lang.IllegalStateException`;
  #L179a3c.  v1:= "Clause has not been set in NOT operation" @kind object;
  #L179a40.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L179a46.  throw v0;
  #L179a48.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L179a4c.  if v0 != 0 then goto L179a70;
  #L179a50.  v0:= "(NOT " @kind object;
  #L179a54.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L179a5a.  v0:= v2.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` @kind object;
  #L179a5e.  call `appendSql`(v0, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/stmt/query/Exists;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L179a64.  v0:= ") " @kind object;
  #L179a68.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L179a6e.  return @kind void;
  #L179a70.  v0:= "(NOT " @kind object;
  #L179a74.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L179a7a.  if v4 == 0 then goto L179a8e;
  #L179a7e.  call `appendEscapedEntityName`(v3, v5, v4) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L179a84.  v0:= 46I;
  #L179a88.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L179a8e.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L179a92.  call temp:= `getColumnName`(v0) @signature `Lcom/j256/ormlite/stmt/query/Comparison;.getColumnName:()Ljava/lang/String;` @kind interface;
  #L179a98.  v0:= temp @kind object;
  #L179a9a.  call `appendEscapedEntityName`(v3, v5, v0) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L179aa0.  v0:= 32I;
  #L179aa4.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L179aaa.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L179aae.  call `appendOperation`(v0, v5) @signature `Lcom/j256/ormlite/stmt/query/Comparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @kind interface;
  #L179ab4.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L179ab8.  call `appendValue`(v0, v3, v5, v6) @signature `Lcom/j256/ormlite/stmt/query/Comparison;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind interface;
  #L179abe.  goto L179a64;
}
procedure `void` `setMissingClause`(`com.j256.ormlite.stmt.query.Not` v3 @kind this, `com.j256.ormlite.stmt.query.Clause` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Not;.setMissingClause:(Lcom/j256/ormlite/stmt/query/Clause;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L179ad0.  v0:= v3.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L179ad4.  if v0 == 0 then goto L179ae8;
  #L179ad8.  v0:= new `java.lang.IllegalArgumentException`;
  #L179adc.  v1:= "NOT operation already has a comparison set" @kind object;
  #L179ae0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L179ae6.  throw v0;
  #L179ae8.  v0:= instanceof @variable v4 @type ^`com.j256.ormlite.stmt.query.Comparison` @kind boolean;
  #L179aec.  if v0 == 0 then goto L179afa;
  #L179af0.  v4:= (`com.j256.ormlite.stmt.query.Comparison`) v4 @kind object;
  #L179af4.  v3.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` := v4 @kind object;
  #L179af8.  return @kind void;
  #L179afa.  v0:= instanceof @variable v4 @type ^`com.j256.ormlite.stmt.query.Exists` @kind boolean;
  #L179afe.  if v0 == 0 then goto L179b0c;
  #L179b02.  v4:= (`com.j256.ormlite.stmt.query.Exists`) v4 @kind object;
  #L179b06.  v3.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` := v4 @kind object;
  #L179b0a.  goto L179af8;
  #L179b0c.  v0:= new `java.lang.IllegalArgumentException`;
  #L179b10.  v1:= new `java.lang.StringBuilder`;
  #L179b14.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L179b1a.  v2:= "NOT operation can only work with comparison SQL clauses, not " @kind object;
  #L179b1e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L179b24.  v1:= temp @kind object;
  #L179b26.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L179b2c.  v1:= temp @kind object;
  #L179b2e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L179b34.  v1:= temp @kind object;
  #L179b36.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L179b3c.  throw v0;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.query.Not` v2 @kind this) @signature `Lcom/j256/ormlite/stmt/query/Not;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L179b50.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L179b54.  if v0 != 0 then goto L179b5e;
  #L179b58.  v0:= "NOT without comparison" @kind object;
  #L179b5c.  return v0 @kind object;
  #L179b5e.  v0:= new `java.lang.StringBuilder`;
  #L179b62.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L179b68.  v1:= "NOT comparison " @kind object;
  #L179b6c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L179b72.  v0:= temp @kind object;
  #L179b74.  v1:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L179b78.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L179b7e.  v0:= temp @kind object;
  #L179b80.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L179b86.  v0:= temp @kind object;
  #L179b88.  goto L179b5c;
}
