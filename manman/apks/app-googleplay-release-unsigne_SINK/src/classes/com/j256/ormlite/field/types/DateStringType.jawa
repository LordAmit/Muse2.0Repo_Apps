record `com.j256.ormlite.field.types.DateStringType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDateType` @kind class {
}
global `int` `@@com.j256.ormlite.field.types.DateStringType.DEFAULT_WIDTH` @AccessFlag PUBLIC_STATIC;
global `com.j256.ormlite.field.types.DateStringType` `@@com.j256.ormlite.field.types.DateStringType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/DateStringType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L16d4c4.  v0:= 50I;
  #L16d4c8.  `@@com.j256.ormlite.field.types.DateStringType.DEFAULT_WIDTH` @type ^`int` := v0;
  #L16d4cc.  v0:= new `com.j256.ormlite.field.types.DateStringType`;
  #L16d4d0.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:()V` @kind direct;
  #L16d4d6.  `@@com.j256.ormlite.field.types.DateStringType.singleTon` @type ^`com.j256.ormlite.field.types.DateStringType` := v0 @kind object;
  #L16d4da.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L16d4ec.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L16d4f0.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L16d4f6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateStringType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16d508.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L16d50e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateStringType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16d520.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16d526.  return @kind void;
}
procedure `com.j256.ormlite.field.types.DateStringType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/DateStringType;.getSingleton:()Lcom/j256/ormlite/field/types/DateStringType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L16d538.  v0:= `@@com.j256.ormlite.field.types.DateStringType.singleTon` @type ^`com.j256.ormlite.field.types.DateStringType` @kind object;
  #L16d53c.  return v0 @kind object;
}
procedure `int` `getDefaultWidth`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateStringType;.getDefaultWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d550.  v0:= `@@com.j256.ormlite.field.types.DateStringType.DEFAULT_WIDTH` @type ^`int`;
  #L16d554.  return v0;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateStringType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d568.  v0:= constclass @type ^`byte`[] @kind object;
  #L16d56c.  return v0 @kind object;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d580.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L16d584.  call temp:= `convertDateStringConfig`(v2, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind static;
  #L16d58a.  v0:= temp @kind object;
  #L16d58c.  call temp:= `getDateFormat`(v0) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.getDateFormat:()Ljava/text/DateFormat;` @kind virtual;
  #L16d592.  v0:= temp @kind object;
  #L16d594.  v3:= (`java.util.Date`) v3 @kind object;
  #L16d598.  call temp:= `format`(v0, v3) @signature `Ljava/text/DateFormat;.format:(Ljava/util/Date;)Ljava/lang/String;` @kind virtual;
  #L16d59e.  v0:= temp @kind object;
  #L16d5a0.  return v0 @kind object;
}
procedure `java.lang.Object` `makeConfigObject`(`com.j256.ormlite.field.types.DateStringType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.makeConfigObject:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16d5b4.  call temp:= `getFormat`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L16d5ba.  v1:= temp @kind object;
  #L16d5bc.  if v1 != 0 then goto L16d5c6;
  #L16d5c0.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L16d5c4.  return v0 @kind object;
  #L16d5c6.  v0:= new `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig`;
  #L16d5ca.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16d5d0.  goto L16d5c4;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.DateStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16d5e4.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L16d5e8.  call temp:= `convertDateStringConfig`(v5, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind static;
  #L16d5ee.  v0:= temp @kind object;
  #Try_start0.  
  #L16d5f0.  call temp:= `normalizeDateString`(v0, v6) @signature `Lcom/j256/ormlite/field/types/DateStringType;.normalizeDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #Try_end0.  
  #L16d5f6.  v0:= temp @kind object;
  #L16d5f8.  return v0 @kind object;
  #L16d5fa.  v1:= Exception @type ^`java.text.ParseException` @kind object;
  #L16d5fc.  v2:= new `java.lang.StringBuilder`;
  #L16d600.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16d606.  v3:= "Problems with field " @kind object;
  #L16d60a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d610.  v2:= temp @kind object;
  #L16d612.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d618.  v2:= temp @kind object;
  #L16d61a.  v3:= " parsing default date-string '" @kind object;
  #L16d61e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d624.  v2:= temp @kind object;
  #L16d626.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d62c.  v2:= temp @kind object;
  #L16d62e.  v3:= "' using '" @kind object;
  #L16d632.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d638.  v2:= temp @kind object;
  #L16d63a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d640.  v0:= temp @kind object;
  #L16d642.  v2:= "'" @kind object;
  #L16d646.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d64c.  v0:= temp @kind object;
  #L16d64e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16d654.  v0:= temp @kind object;
  #L16d656.  call temp:= `create`(v0, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16d65c.  v0:= temp @kind object;
  #L16d65e.  throw v0;
  catch `java.text.ParseException` @[Try_start0..Try_end0] goto L16d5fa;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/DateStringType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d680.  call temp:= `sqlArgToJava`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/field/types/DateStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L16d686.  v0:= temp @kind object;
  #L16d688.  return v0 @kind object;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/DateStringType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d69c.  call temp:= `getString`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getString:(I)Ljava/lang/String;` @kind interface;
  #L16d6a2.  v0:= temp @kind object;
  #L16d6a4.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.DateStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/DateStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16d6b8.  v6:= (`java.lang.String`) v6 @kind object;
  #L16d6bc.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L16d6c0.  call temp:= `convertDateStringConfig`(v5, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind static;
  #L16d6c6.  v0:= temp @kind object;
  #Try_start0.  
  #L16d6c8.  call temp:= `parseDateString`(v0, v6) @signature `Lcom/j256/ormlite/field/types/DateStringType;.parseDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #Try_end0.  
  #L16d6ce.  v0:= temp @kind object;
  #L16d6d0.  return v0 @kind object;
  #L16d6d2.  v1:= Exception @type ^`java.text.ParseException` @kind object;
  #L16d6d4.  v2:= new `java.lang.StringBuilder`;
  #L16d6d8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16d6de.  v3:= "Problems with column " @kind object;
  #L16d6e2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d6e8.  v2:= temp @kind object;
  #L16d6ea.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d6f0.  v2:= temp @kind object;
  #L16d6f2.  v3:= " parsing date-string '" @kind object;
  #L16d6f6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d6fc.  v2:= temp @kind object;
  #L16d6fe.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d704.  v2:= temp @kind object;
  #L16d706.  v3:= "' using '" @kind object;
  #L16d70a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d710.  v2:= temp @kind object;
  #L16d712.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d718.  v0:= temp @kind object;
  #L16d71a.  v2:= "'" @kind object;
  #L16d71e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d724.  v0:= temp @kind object;
  #L16d726.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16d72c.  v0:= temp @kind object;
  #L16d72e.  call temp:= `create`(v0, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16d734.  v0:= temp @kind object;
  #L16d736.  throw v0;
  catch `java.text.ParseException` @[Try_start0..Try_end0] goto L16d6d2;
}
