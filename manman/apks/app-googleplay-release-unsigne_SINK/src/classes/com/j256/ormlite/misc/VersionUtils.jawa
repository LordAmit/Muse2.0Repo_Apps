record `com.j256.ormlite.misc.VersionUtils` @kind class @AccessFlag PUBLIC {
}
global `java.lang.String` `@@com.j256.ormlite.misc.VersionUtils.CORE_VERSION` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @AccessFlag PRIVATE_STATIC;
global `com.j256.ormlite.logger.Logger` `@@com.j256.ormlite.misc.VersionUtils.logger` @AccessFlag PRIVATE_STATIC;
global `boolean` `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L171f6c.  v0:= 0I;
  #L171f6e.  `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @type ^`boolean` := v0 @kind boolean;
  #L171f72.  v0:= "VERSION__5.0__" @kind object;
  #L171f76.  `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` := v0 @kind object;
  #L171f7a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.misc.VersionUtils` v0 @kind this) @signature `Lcom/j256/ormlite/misc/VersionUtils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L171f8c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L171f92.  return @kind void;
}
procedure `void` `checkCoreVersusAndroidVersions`(`java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.checkCoreVersusAndroidVersions:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L171fa4.  v0:= "core" @kind object;
  #L171fa8.  v1:= `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` @kind object;
  #L171fac.  v2:= "android" @kind object;
  #L171fb0.  call `logVersionWarnings`(v0, v1, v2, v3) @signature `Lcom/j256/ormlite/misc/VersionUtils;.logVersionWarnings:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L171fb6.  return @kind void;
}
procedure `void` `checkCoreVersusJdbcVersions`(`java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.checkCoreVersusJdbcVersions:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L171fc8.  v0:= "core" @kind object;
  #L171fcc.  v1:= `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` @kind object;
  #L171fd0.  v2:= "jdbc" @kind object;
  #L171fd4.  call `logVersionWarnings`(v0, v1, v2, v3) @signature `Lcom/j256/ormlite/misc/VersionUtils;.logVersionWarnings:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L171fda.  return @kind void;
}
procedure `java.lang.String` `getCoreVersion`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.getCoreVersion:()Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L171fec.  v0:= `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` @kind object;
  #L171ff0.  return v0 @kind object;
}
procedure `com.j256.ormlite.logger.Logger` `getLogger`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.getLogger:()Lcom/j256/ormlite/logger/Logger;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L172004.  v0:= `@@com.j256.ormlite.misc.VersionUtils.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L172008.  if v0 != 0 then goto L17201c;
  #L17200c.  v0:= constclass @type ^`com.j256.ormlite.misc.VersionUtils` @kind object;
  #L172010.  call temp:= `getLogger`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/Class;)Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L172016.  v0:= temp @kind object;
  #L172018.  `@@com.j256.ormlite.misc.VersionUtils.logger` @type ^`com.j256.ormlite.logger.Logger` := v0 @kind object;
  #L17201c.  v0:= `@@com.j256.ormlite.misc.VersionUtils.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L172020.  return v0 @kind object;
}
procedure `void` `logVersionWarnings`(`java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object, `java.lang.String` v10 @kind object, `java.lang.String` v11 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.logVersionWarnings:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L172034.  v7:= 0I;
  #L172036.  v6:= 3I;
  #L172038.  v5:= 2I;
  #L17203a.  v4:= 1I;
  #L17203c.  v3:= 0I;
  #L17203e.  if v9 != 0 then goto L172066;
  #L172042.  if v11 == 0 then goto L172064;
  #L172046.  v0:= "Unknown version" @kind object;
  #L17204a.  v1:= " for {}, version for {} is '{}'" @kind object;
  #L17204e.  v2:= new `java.lang.Object`[v6];
  #L172052.  v2[v3]:= v8 @kind object;
  #L172056.  v2[v4]:= v10 @kind object;
  #L17205a.  v2[v5]:= v11 @kind object;
  #L17205e.  call `warning`(v7, v0, v1, v2) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @kind static;
  #L172064.  return @kind void;
  #L172066.  if v11 != 0 then goto L17208a;
  #L17206a.  v0:= "Unknown version" @kind object;
  #L17206e.  v1:= " for {}, version for {} is '{}'" @kind object;
  #L172072.  v2:= new `java.lang.Object`[v6];
  #L172076.  v2[v3]:= v10 @kind object;
  #L17207a.  v2[v4]:= v8 @kind object;
  #L17207e.  v2[v5]:= v9 @kind object;
  #L172082.  call `warning`(v7, v0, v1, v2) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @kind static;
  #L172088.  goto L172064;
  #L17208a.  call temp:= `equals`(v9, v11) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L172090.  v0:= temp;
  #L172092.  if v0 != 0 then goto L172064;
  #L172096.  v0:= "Mismatched versions" @kind object;
  #L17209a.  v1:= ": {} is '{}', while {} is '{}'" @kind object;
  #L17209e.  v2:= 4I;
  #L1720a0.  v2:= new `java.lang.Object`[v2];
  #L1720a4.  v2[v3]:= v8 @kind object;
  #L1720a8.  v2[v4]:= v9 @kind object;
  #L1720ac.  v2[v5]:= v10 @kind object;
  #L1720b0.  v2[v6]:= v11 @kind object;
  #L1720b4.  call `warning`(v7, v0, v1, v2) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @kind static;
  #L1720ba.  goto L172064;
}
procedure `void` `setThrownOnErrors`(`boolean` v0 ) @signature `Lcom/j256/ormlite/misc/VersionUtils;.setThrownOnErrors:(Z)V` @AccessFlag STATIC {
    temp;

  #L1720cc.  `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @type ^`boolean` := v0 @kind boolean;
  #L1720d0.  return @kind void;
}
procedure `void` `warning`(`java.lang.Throwable` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1720e4.  call temp:= `getLogger`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.getLogger:()Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L1720ea.  v0:= temp @kind object;
  #L1720ec.  v1:= new `java.lang.StringBuilder`;
  #L1720f0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1720f6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1720fc.  v1:= temp @kind object;
  #L1720fe.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L172104.  v1:= temp @kind object;
  #L172106.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L17210c.  v1:= temp @kind object;
  #L17210e.  call `warn`(v0, v3, v1, v6) @signature `Lcom/j256/ormlite/logger/Logger;.warn:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L172114.  v0:= `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @type ^`boolean` @kind boolean;
  #L172118.  if v0 == 0 then goto L17214e;
  #L17211c.  v0:= new `java.lang.IllegalStateException`;
  #L172120.  v1:= new `java.lang.StringBuilder`;
  #L172124.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L17212a.  v2:= "See error log for details:" @kind object;
  #L17212e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L172134.  v1:= temp @kind object;
  #L172136.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17213c.  v1:= temp @kind object;
  #L17213e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L172144.  v1:= temp @kind object;
  #L172146.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L17214c.  throw v0;
  #L17214e.  return @kind void;
}
