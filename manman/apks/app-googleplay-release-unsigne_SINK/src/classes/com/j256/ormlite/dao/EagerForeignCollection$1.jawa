record `com.j256.ormlite.dao.EagerForeignCollection$1` @kind class @AccessFlag  extends `com.j256.ormlite.dao.CloseableIterator` @kind interface {
  `int` `com.j256.ormlite.dao.EagerForeignCollection$1.offset` @AccessFlag PRIVATE;
  `com.j256.ormlite.dao.EagerForeignCollection` `com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.j256.ormlite.dao.EagerForeignCollection$1` v1 @kind this, `com.j256.ormlite.dao.EagerForeignCollection` v2 @kind object) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.<init>:(Lcom/j256/ormlite/dao/EagerForeignCollection;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L162bc8.  v1.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` := v2 @kind object;
  #L162bcc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L162bd2.  v0:= -1I;
  #L162bd4.  v1.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L162bd8.  return @kind void;
}
procedure `void` `close`(`com.j256.ormlite.dao.EagerForeignCollection$1` v0 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L162bec.  return @kind void;
}
procedure `void` `closeQuietly`(`com.j256.ormlite.dao.EagerForeignCollection$1` v0 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.closeQuietly:()V` @AccessFlag PUBLIC {
    temp;

  #L162c00.  return @kind void;
}
procedure `java.lang.Object` `current`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.current:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L162c14.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162c18.  if v0 >= 0 then goto L162c22;
  #L162c1c.  v0:= 0I;
  #L162c1e.  v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L162c22.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162c26.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162c2a.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L162c30.  v1:= temp @kind object;
  #L162c32.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L162c38.  v1:= temp;
  #L162c3a.  if v0 < v1 then goto L162c42;
  #L162c3e.  v0:= 0I;
  #L162c40.  return v0 @kind object;
  #L162c42.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162c46.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L162c4c.  v0:= temp @kind object;
  #L162c4e.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162c52.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L162c58.  v0:= temp @kind object;
  #L162c5a.  goto L162c40;
}
procedure `java.lang.Object` `first`(`com.j256.ormlite.dao.EagerForeignCollection$1` v3 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.first:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L162c6c.  v2:= 0I;
  #L162c6e.  v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v2;
  #L162c72.  v0:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162c76.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162c7a.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L162c80.  v1:= temp @kind object;
  #L162c82.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L162c88.  v1:= temp;
  #L162c8a.  if v0 < v1 then goto L162c92;
  #L162c8e.  v0:= 0I;
  #L162c90.  return v0 @kind object;
  #L162c92.  v0:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162c96.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L162c9c.  v0:= temp @kind object;
  #L162c9e.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L162ca4.  v0:= temp @kind object;
  #L162ca6.  goto L162c90;
}
procedure `com.j256.ormlite.support.DatabaseResults` `getRawResults`(`com.j256.ormlite.dao.EagerForeignCollection$1` v1 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.getRawResults:()Lcom/j256/ormlite/support/DatabaseResults;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L162cb8.  v0:= 0I;
  #L162cba.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L162ccc.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162cd0.  v0:= v0 + 1;
  #L162cd4.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162cd8.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L162cde.  v1:= temp @kind object;
  #L162ce0.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L162ce6.  v1:= temp;
  #L162ce8.  if v0 >= v1 then goto L162cf0;
  #L162cec.  v0:= 1I;
  #L162cee.  return v0;
  #L162cf0.  v0:= 0I;
  #L162cf2.  goto L162cee;
}
procedure `java.lang.Object` `moveRelative`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this, `int` v3 ) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.moveRelative:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L162d04.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162d08.  v0:= v0 + v3 @kind int;
  #L162d0a.  v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L162d0e.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162d12.  if v0 < 0 then goto L162d32;
  #L162d16.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162d1a.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162d1e.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L162d24.  v1:= temp @kind object;
  #L162d26.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L162d2c.  v1:= temp;
  #L162d2e.  if v0 < v1 then goto L162d36;
  #L162d32.  v0:= 0I;
  #L162d34.  return v0 @kind object;
  #L162d36.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162d3a.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L162d40.  v0:= temp @kind object;
  #L162d42.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162d46.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L162d4c.  v0:= temp @kind object;
  #L162d4e.  goto L162d34;
}
procedure `void` `moveToNext`(`com.j256.ormlite.dao.EagerForeignCollection$1` v1 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.moveToNext:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L162d60.  v0:= v1.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162d64.  v0:= v0 + 1;
  #L162d68.  v1.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L162d6c.  return @kind void;
}
procedure `java.lang.Object` `next`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L162d80.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162d84.  v0:= v0 + 1;
  #L162d88.  v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L162d8c.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162d90.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L162d96.  v0:= temp @kind object;
  #L162d98.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162d9c.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L162da2.  v0:= temp @kind object;
  #L162da4.  return v0 @kind object;
}
procedure `java.lang.Object` `nextThrow`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.nextThrow:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L162db8.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162dbc.  v0:= v0 + 1;
  #L162dc0.  v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L162dc4.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162dc8.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162dcc.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L162dd2.  v1:= temp @kind object;
  #L162dd4.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L162dda.  v1:= temp;
  #L162ddc.  if v0 < v1 then goto L162de4;
  #L162de0.  v0:= 0I;
  #L162de2.  return v0 @kind object;
  #L162de4.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162de8.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L162dee.  v0:= temp @kind object;
  #L162df0.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162df4.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L162dfa.  v0:= temp @kind object;
  #L162dfc.  goto L162de2;
}
procedure `java.lang.Object` `previous`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L162e10.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162e14.  v0:= v0 + -1;
  #L162e18.  v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L162e1c.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162e20.  if v0 < 0 then goto L162e40;
  #L162e24.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162e28.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162e2c.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L162e32.  v1:= temp @kind object;
  #L162e34.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L162e3a.  v1:= temp;
  #L162e3c.  if v0 < v1 then goto L162e44;
  #L162e40.  v0:= 0I;
  #L162e42.  return v0 @kind object;
  #L162e44.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162e48.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L162e4e.  v0:= temp @kind object;
  #L162e50.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162e54.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L162e5a.  v0:= temp @kind object;
  #L162e5c.  goto L162e42;
}
procedure `void` `remove`(`com.j256.ormlite.dao.EagerForeignCollection$1` v3 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L162e70.  v0:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162e74.  if v0 >= 0 then goto L162e88;
  #L162e78.  v0:= new `java.lang.IllegalStateException`;
  #L162e7c.  v1:= "next() must be called before remove()" @kind object;
  #L162e80.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L162e86.  throw v0;
  #L162e88.  v0:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162e8c.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162e90.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L162e96.  v1:= temp @kind object;
  #L162e98.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L162e9e.  v1:= temp;
  #L162ea0.  if v0 < v1 then goto L162ee6;
  #L162ea4.  v0:= new `java.lang.IllegalStateException`;
  #L162ea8.  v1:= new `java.lang.StringBuilder`;
  #L162eac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L162eb2.  v2:= "current results position (" @kind object;
  #L162eb6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162ebc.  v1:= temp @kind object;
  #L162ebe.  v2:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162ec2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L162ec8.  v1:= temp @kind object;
  #L162eca.  v2:= ") is out of bounds" @kind object;
  #L162ece.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162ed4.  v1:= temp @kind object;
  #L162ed6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L162edc.  v1:= temp @kind object;
  #L162ede.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L162ee4.  throw v0;
  #L162ee6.  v0:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162eea.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L162ef0.  v0:= temp @kind object;
  #L162ef2.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162ef6.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L162efc.  v0:= temp @kind object;
  #L162efe.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L162f02.  v1:= v1 + -1;
  #L162f06.  v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v1;
  #L162f0a.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162f0e.  v1:= v1.`com.j256.ormlite.dao.EagerForeignCollection.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L162f12.  if v1 == 0 then goto L162f24;
  #Try_start0.  
  #L162f16.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L162f1a.  v1:= v1.`com.j256.ormlite.dao.EagerForeignCollection.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L162f1e.  call temp:= `delete`(v1, v0) @signature `Lcom/j256/ormlite/dao/Dao;.delete:(Ljava/lang/Object;)I` @kind interface;
  #Try_end0.  
  #L162f24.  return @kind void;
  #L162f26.  v0:= Exception @type ^`java.sql.SQLException` @kind object;
  #L162f28.  v1:= new `java.lang.RuntimeException`;
  #L162f2c.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L162f32.  throw v1;
  catch `java.sql.SQLException` @[Try_start0..Try_end0] goto L162f26;
}
