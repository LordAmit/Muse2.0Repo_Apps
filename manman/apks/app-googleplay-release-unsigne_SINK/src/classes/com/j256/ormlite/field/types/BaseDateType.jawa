record `com.j256.ormlite.field.types.BaseDateType` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` `@@com.j256.ormlite.field.types.BaseDateType.defaultDateFormatConfig` @AccessFlag PROTECTED_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L16c208.  v0:= new `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig`;
  #L16c20c.  v1:= "yyyy-MM-dd HH:mm:ss.SSSSSS" @kind object;
  #L16c210.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16c216.  `@@com.j256.ormlite.field.types.BaseDateType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` := v0 @kind object;
  #L16c21a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BaseDateType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16c22c.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L16c232.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BaseDateType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16c244.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16c24a.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` `convertDateStringConfig`(`com.j256.ormlite.field.FieldType` v1 @kind object, `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;

  #L16c25c.  if v1 != 0 then goto L16c262;
  #L16c260.  return v2 @kind object;
  #L16c262.  call temp:= `getDataTypeConfigObj`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @kind virtual;
  #L16c268.  v0:= temp @kind object;
  #L16c26a.  v0:= (`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig`) v0 @kind object;
  #L16c26e.  if v0 == 0 then goto L16c260;
  #L16c272.  v2:= v0 @kind object;
  #L16c274.  goto L16c260;
}
procedure `java.lang.String` `normalizeDateString`(`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.normalizeDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;

  #L16c288.  call temp:= `getDateFormat`(v2) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.getDateFormat:()Ljava/text/DateFormat;` @kind virtual;
  #L16c28e.  v0:= temp @kind object;
  #L16c290.  call temp:= `parse`(v0, v3) @signature `Ljava/text/DateFormat;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L16c296.  v1:= temp @kind object;
  #L16c298.  call temp:= `format`(v0, v1) @signature `Ljava/text/DateFormat;.format:(Ljava/util/Date;)Ljava/lang/String;` @kind virtual;
  #L16c29e.  v0:= temp @kind object;
  #L16c2a0.  return v0 @kind object;
}
procedure `java.util.Date` `parseDateString`(`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.parseDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;

  #L16c2b4.  call temp:= `getDateFormat`(v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.getDateFormat:()Ljava/text/DateFormat;` @kind virtual;
  #L16c2ba.  v0:= temp @kind object;
  #L16c2bc.  call temp:= `parse`(v0, v2) @signature `Ljava/text/DateFormat;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L16c2c2.  v0:= temp @kind object;
  #L16c2c4.  return v0 @kind object;
}
procedure `boolean` `isValidForField`(`com.j256.ormlite.field.types.BaseDateType` v2 @kind this, `java.lang.reflect.Field` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.isValidForField:(Ljava/lang/reflect/Field;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16c2d8.  call temp:= `getType`(v3) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16c2de.  v0:= temp @kind object;
  #L16c2e0.  v1:= constclass @type ^`java.util.Date` @kind object;
  #L16c2e4.  if v0 != v1 then goto L16c2ec;
  #L16c2e8.  v0:= 1I;
  #L16c2ea.  return v0;
  #L16c2ec.  v0:= 0I;
  #L16c2ee.  goto L16c2ea;
}
procedure `boolean` `isValidForVersion`(`com.j256.ormlite.field.types.BaseDateType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.isValidForVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16c300.  v0:= 1I;
  #L16c302.  return v0;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.BaseDateType` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16c314.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L16c31a.  v2:= temp @kind wide;
  #L16c31c.  if v7 != 0 then goto L16c32c;
  #L16c320.  v0:= new `java.util.Date`;
  #L16c324.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L16c32a.  return v0 @kind object;
  #L16c32c.  v7:= (`java.util.Date`) v7 @kind object;
  #L16c330.  call temp:= `getTime`(v7) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L16c336.  v0:= temp @kind wide;
  #L16c338.  v0:= lcmp(v2, v0);
  #L16c33c.  if v0 != 0 then goto L16c352;
  #L16c340.  v0:= new `java.util.Date`;
  #L16c344.  v4:= 1L;
  #L16c348.  v2:= v2 + v4 @kind long;
  #L16c34a.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L16c350.  goto L16c32a;
  #L16c352.  v0:= new `java.util.Date`;
  #L16c356.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L16c35c.  goto L16c32a;
}
