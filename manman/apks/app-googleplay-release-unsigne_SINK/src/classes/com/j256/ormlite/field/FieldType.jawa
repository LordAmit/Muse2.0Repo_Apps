record `com.j256.ormlite.field.FieldType` @kind class @AccessFlag PUBLIC {
  `java.lang.String` `com.j256.ormlite.field.FieldType.columnName` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.support.ConnectionSource` `com.j256.ormlite.field.FieldType.connectionSource` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.field.DataPersister` `com.j256.ormlite.field.FieldType.dataPersister` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.field.FieldType.dataTypeConfigObj` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.field.FieldType.defaultValue` @AccessFlag PRIVATE;
  `java.lang.reflect.Field` `com.j256.ormlite.field.FieldType.field` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.field.DatabaseFieldConfig` `com.j256.ormlite.field.FieldType.fieldConfig` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.field.FieldConverter` `com.j256.ormlite.field.FieldType.fieldConverter` @AccessFlag PRIVATE;
  `java.lang.reflect.Method` `com.j256.ormlite.field.FieldType.fieldGetMethod` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `com.j256.ormlite.field.FieldType.fieldSetMethod` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.dao.BaseDaoImpl` `com.j256.ormlite.field.FieldType.foreignDao` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.field.FieldType.foreignFieldType` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.field.FieldType.foreignIdField` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.field.FieldType.foreignRefField` @AccessFlag PRIVATE;
  `com.j256.ormlite.table.TableInfo` `com.j256.ormlite.field.FieldType.foreignTableInfo` @AccessFlag PRIVATE;
  `java.lang.String` `com.j256.ormlite.field.FieldType.generatedIdSequence` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.j256.ormlite.field.FieldType.isGeneratedId` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.j256.ormlite.field.FieldType.isId` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` `com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @AccessFlag PRIVATE;
  `java.lang.Class` `com.j256.ormlite.field.FieldType.parentClass` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.j256.ormlite.field.FieldType.tableName` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BOOLEAN` @AccessFlag PRIVATE_STATIC;
global `byte` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BYTE` @AccessFlag PRIVATE_STATIC;
global `char` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_CHAR` @AccessFlag PRIVATE_STATIC;
global `double` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_DOUBLE` @AccessFlag PRIVATE_STATIC;
global `float` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_FLOAT` @AccessFlag PRIVATE_STATIC;
global `int` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_INT` @AccessFlag PRIVATE_STATIC;
global `long` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_LONG` @AccessFlag PRIVATE_STATIC;
global `short` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_SHORT` @AccessFlag PRIVATE_STATIC;
global `java.lang.String` `@@com.j256.ormlite.field.FieldType.FOREIGN_ID_FIELD_SUFFIX` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.j256.ormlite.logger.Logger` `@@com.j256.ormlite.field.FieldType.logger` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.ThreadLocal` `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/FieldType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L169698.  v0:= new `java.lang.ThreadLocal`;
  #L16969c.  call `<init>`(v0) @signature `Ljava/lang/ThreadLocal;.<init>:()V` @kind direct;
  #L1696a2.  `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` := v0 @kind object;
  #L1696a6.  v0:= constclass @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1696aa.  call temp:= `getLogger`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/Class;)Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L1696b0.  v0:= temp @kind object;
  #L1696b2.  `@@com.j256.ormlite.field.FieldType.logger` @type ^`com.j256.ormlite.logger.Logger` := v0 @kind object;
  #L1696b6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.FieldType` v9 @kind this, `com.j256.ormlite.support.ConnectionSource` v10 @kind object, `java.lang.String` v11 @kind object, `java.lang.reflect.Field` v12 @kind object, `com.j256.ormlite.field.DatabaseFieldConfig` v13 @kind object, `java.lang.Class` v14 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.<init>:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Lcom/j256/ormlite/field/DatabaseFieldConfig;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1696c8.  v8:= 0I;
  #L1696ca.  v7:= 0I;
  #L1696cc.  v6:= 1I;
  #L1696ce.  call `<init>`(v9) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1696d4.  v9.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` := v10 @kind object;
  #L1696d8.  v9.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` := v11 @kind object;
  #L1696dc.  call temp:= `getDatabaseType`(v10) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L1696e2.  v3:= temp @kind object;
  #L1696e4.  v9.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` := v12 @kind object;
  #L1696e8.  v9.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` := v14 @kind object;
  #L1696ec.  call `postProcess`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.postProcess:()V` @kind virtual;
  #L1696f2.  call temp:= `getType`(v12) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1696f8.  v4:= temp @kind object;
  #L1696fa.  call temp:= `getDataPersister`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L169700.  v0:= temp @kind object;
  #L169702.  if v0 != 0 then goto L1698e2;
  #L169706.  call temp:= `getPersisterClass`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getPersisterClass:()Ljava/lang/Class;` @kind virtual;
  #L16970c.  v1:= temp @kind object;
  #L16970e.  if v1 == 0 then goto L16971a;
  #L169712.  v0:= constclass @type ^`com.j256.ormlite.field.types.VoidType` @kind object;
  #L169716.  if v1 != v0 then goto L1697b2;
  #L16971a.  call temp:= `lookupForField`(v12) @signature `Lcom/j256/ormlite/field/DataPersisterManager;.lookupForField:(Ljava/lang/reflect/Field;)Lcom/j256/ormlite/field/DataPersister;` @kind static;
  #L169720.  v0:= temp @kind object;
  #L169722.  v1:= v0 @kind object;
  #L169724.  call temp:= `getForeignColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignColumnName:()Ljava/lang/String;` @kind virtual;
  #L16972a.  v0:= temp @kind object;
  #L16972c.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L169732.  v2:= temp @kind object;
  #L169734.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L16973a.  v5:= temp;
  #L16973c.  if v5 != 0 then goto L169750;
  #L169740.  call temp:= `isForeignAutoRefresh`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L169746.  v5:= temp;
  #L169748.  if v5 != 0 then goto L169750;
  #L16974c.  if v0 == 0 then goto L169a6e;
  #L169750.  if v1 == 0 then goto L16998a;
  #L169754.  call temp:= `isPrimitive`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L16975a.  v5:= temp;
  #L16975c.  if v5 == 0 then goto L16998a;
  #L169760.  v0:= new `java.lang.IllegalArgumentException`;
  #L169764.  v1:= new `java.lang.StringBuilder`;
  #L169768.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16976e.  v2:= "Field " @kind object;
  #L169772.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169778.  v1:= temp @kind object;
  #L16977a.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169780.  v1:= temp @kind object;
  #L169782.  v2:= " is a primitive class " @kind object;
  #L169786.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16978c.  v1:= temp @kind object;
  #L16978e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169794.  v1:= temp @kind object;
  #L169796.  v2:= " but marked as foreign" @kind object;
  #L16979a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1697a0.  v1:= temp @kind object;
  #L1697a2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1697a8.  v1:= temp @kind object;
  #L1697aa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1697b0.  throw v0;
  #Try_start0.  
  #L1697b2.  v0:= "getSingleton" @kind object;
  #L1697b6.  v2:= 0I;
  #L1697b8.  v2:= new `java.lang.Class`[v2];
  #L1697bc.  call temp:= `getDeclaredMethod`(v1, v0, v2) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #Try_end0.  
  #L1697c2.  v0:= temp @kind object;
  #L1697c4.  v2:= 0I;
  #L1697c6.  v5:= 0I;
  #Try_start1.  
  #L1697c8.  v5:= new `java.lang.Object`[v5];
  #L1697cc.  call temp:= `invoke`(v0, v2, v5) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L1697d2.  v0:= temp @kind object;
  #L1697d4.  if v0 != 0 then goto L1698a8;
  #L1697d8.  v0:= new `java.sql.SQLException`;
  #L1697dc.  v2:= new `java.lang.StringBuilder`;
  #L1697e0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1697e6.  v3:= "Static getSingleton method should not return null on class " @kind object;
  #L1697ea.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1697f0.  v2:= temp @kind object;
  #L1697f2.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1697f8.  v1:= temp @kind object;
  #L1697fa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169800.  v1:= temp @kind object;
  #L169802.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169808.  throw v0;
  #L16980a.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L16980c.  v2:= new `java.lang.StringBuilder`;
  #L169810.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169816.  v3:= "Could not find getSingleton static method on class " @kind object;
  #L16981a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169820.  v2:= temp @kind object;
  #L169822.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169828.  v1:= temp @kind object;
  #L16982a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169830.  v1:= temp @kind object;
  #L169832.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L169838.  v0:= temp @kind object;
  #L16983a.  throw v0;
  #L16983c.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L16983e.  v2:= new `java.lang.StringBuilder`;
  #L169842.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169848.  v3:= "Could not run getSingleton method on class " @kind object;
  #L16984c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169852.  v2:= temp @kind object;
  #L169854.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16985a.  v1:= temp @kind object;
  #L16985c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169862.  v1:= temp @kind object;
  #L169864.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L16986a.  v0:= temp @kind object;
  #L16986c.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L169872.  v0:= temp @kind object;
  #L169874.  throw v0;
  #L169876.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L169878.  v2:= new `java.lang.StringBuilder`;
  #L16987c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169882.  v3:= "Could not run getSingleton method on class " @kind object;
  #L169886.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16988c.  v2:= temp @kind object;
  #L16988e.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169894.  v1:= temp @kind object;
  #L169896.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16989c.  v1:= temp @kind object;
  #L16989e.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1698a4.  v0:= temp @kind object;
  #L1698a6.  throw v0;
  #Try_start2.  
  #L1698a8.  v0:= (`com.j256.ormlite.field.DataPersister`) v0 @kind object;
  #Try_end2.  
  #L1698ac.  goto L169722;
  #L1698b0.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L1698b2.  v2:= new `java.lang.StringBuilder`;
  #L1698b6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1698bc.  v3:= "Could not cast result of static getSingleton method to DataPersister from class " @kind object;
  #L1698c0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1698c6.  v2:= temp @kind object;
  #L1698c8.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1698ce.  v1:= temp @kind object;
  #L1698d0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1698d6.  v1:= temp @kind object;
  #L1698d8.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1698de.  v0:= temp @kind object;
  #L1698e0.  throw v0;
  #L1698e2.  call temp:= `getDataPersister`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L1698e8.  v0:= temp @kind object;
  #L1698ea.  call temp:= `isValidForField`(v0, v12) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidForField:(Ljava/lang/reflect/Field;)Z` @kind interface;
  #L1698f0.  v1:= temp;
  #L1698f2.  if v1 != 0 then goto L16a11e;
  #L1698f6.  v1:= new `java.lang.StringBuilder`;
  #L1698fa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169900.  v2:= "Field class " @kind object;
  #L169904.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16990a.  v2:= temp @kind object;
  #L16990c.  call temp:= `getName`(v4) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L169912.  v3:= temp @kind object;
  #L169914.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16991a.  v2:= " for field " @kind object;
  #L16991e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169924.  v2:= temp @kind object;
  #L169926.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16992c.  v2:= " is not valid for type " @kind object;
  #L169930.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169936.  v2:= temp @kind object;
  #L169938.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16993e.  call temp:= `getPrimaryClass`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.getPrimaryClass:()Ljava/lang/Class;` @kind interface;
  #L169944.  v0:= temp @kind object;
  #L169946.  if v0 == 0 then goto L169976;
  #L16994a.  v2:= new `java.lang.StringBuilder`;
  #L16994e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169954.  v3:= ", maybe should be " @kind object;
  #L169958.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16995e.  v2:= temp @kind object;
  #L169960.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169966.  v0:= temp @kind object;
  #L169968.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16996e.  v0:= temp @kind object;
  #L169970.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169976.  v0:= new `java.lang.IllegalArgumentException`;
  #L16997a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169980.  v1:= temp @kind object;
  #L169982.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169988.  throw v0;
  #L16998a.  if v0 != 0 then goto L169a3e;
  #L16998e.  v0:= new `java.lang.StringBuilder`;
  #L169992.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169998.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16999e.  v0:= temp @kind object;
  #L1699a0.  v2:= "_id" @kind object;
  #L1699a4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1699aa.  v0:= temp @kind object;
  #L1699ac.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1699b2.  v0:= temp @kind object;
  #L1699b4.  v2:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L1699b8.  call temp:= `isAssignableFrom`(v2, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1699be.  v2:= temp;
  #L1699c0.  if v2 == 0 then goto L169ba8;
  #L1699c4.  v0:= new `java.sql.SQLException`;
  #L1699c8.  v1:= new `java.lang.StringBuilder`;
  #L1699cc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1699d2.  v2:= "Field '" @kind object;
  #L1699d6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1699dc.  v1:= temp @kind object;
  #L1699de.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L1699e4.  v2:= temp @kind object;
  #L1699e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1699ec.  v1:= temp @kind object;
  #L1699ee.  v2:= "' in class " @kind object;
  #L1699f2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1699f8.  v1:= temp @kind object;
  #L1699fa.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169a00.  v1:= temp @kind object;
  #L169a02.  v2:= "' should use the @" @kind object;
  #L169a06.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169a0c.  v1:= temp @kind object;
  #L169a0e.  v2:= constclass @type ^`com.j256.ormlite.field.ForeignCollectionField` @kind object;
  #L169a12.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L169a18.  v2:= temp @kind object;
  #L169a1a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169a20.  v1:= temp @kind object;
  #L169a22.  v2:= " annotation not foreign=true" @kind object;
  #L169a26.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169a2c.  v1:= temp @kind object;
  #L169a2e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169a34.  v1:= temp @kind object;
  #L169a36.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169a3c.  throw v0;
  #L169a3e.  v5:= new `java.lang.StringBuilder`;
  #L169a42.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169a48.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169a4e.  v2:= temp @kind object;
  #L169a50.  v5:= "_" @kind object;
  #L169a54.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169a5a.  v2:= temp @kind object;
  #L169a5c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169a62.  v0:= temp @kind object;
  #L169a64.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169a6a.  v0:= temp @kind object;
  #L169a6c.  goto L1699b4;
  #L169a6e.  call temp:= `isForeignCollection`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L169a74.  v0:= temp;
  #L169a76.  if v0 == 0 then goto L169c1a;
  #L169a7a.  v0:= constclass @type ^`java.util.Collection` @kind object;
  #L169a7e.  if v4 == v0 then goto L169af8;
  #L169a82.  v0:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L169a86.  call temp:= `isAssignableFrom`(v0, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L169a8c.  v0:= temp;
  #L169a8e.  if v0 != 0 then goto L169af8;
  #L169a92.  v0:= new `java.sql.SQLException`;
  #L169a96.  v1:= new `java.lang.StringBuilder`;
  #L169a9a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169aa0.  v2:= "Field class for '" @kind object;
  #L169aa4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169aaa.  v1:= temp @kind object;
  #L169aac.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L169ab2.  v2:= temp @kind object;
  #L169ab4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169aba.  v1:= temp @kind object;
  #L169abc.  v2:= "' must be of class " @kind object;
  #L169ac0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169ac6.  v1:= temp @kind object;
  #L169ac8.  v2:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L169acc.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L169ad2.  v2:= temp @kind object;
  #L169ad4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169ada.  v1:= temp @kind object;
  #L169adc.  v2:= " or Collection." @kind object;
  #L169ae0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169ae6.  v1:= temp @kind object;
  #L169ae8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169aee.  v1:= temp @kind object;
  #L169af0.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169af6.  throw v0;
  #L169af8.  call temp:= `getGenericType`(v12) @signature `Ljava/lang/reflect/Field;.getGenericType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L169afe.  v0:= temp @kind object;
  #L169b00.  v4:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L169b04.  if v4 != 0 then goto L169b4e;
  #L169b08.  v0:= new `java.sql.SQLException`;
  #L169b0c.  v1:= new `java.lang.StringBuilder`;
  #L169b10.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169b16.  v2:= "Field class for '" @kind object;
  #L169b1a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169b20.  v1:= temp @kind object;
  #L169b22.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L169b28.  v2:= temp @kind object;
  #L169b2a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169b30.  v1:= temp @kind object;
  #L169b32.  v2:= "' must be a parameterized Collection." @kind object;
  #L169b36.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169b3c.  v1:= temp @kind object;
  #L169b3e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169b44.  v1:= temp @kind object;
  #L169b46.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169b4c.  throw v0;
  #L169b4e.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L169b52.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L169b58.  v0:= temp @kind object;
  #L169b5a.  v0:= length @variable v0;
  #L169b5c.  if v0 != 0 then goto L169ba6;
  #L169b60.  v0:= new `java.sql.SQLException`;
  #L169b64.  v1:= new `java.lang.StringBuilder`;
  #L169b68.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169b6e.  v2:= "Field class for '" @kind object;
  #L169b72.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169b78.  v1:= temp @kind object;
  #L169b7a.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L169b80.  v2:= temp @kind object;
  #L169b82.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169b88.  v1:= temp @kind object;
  #L169b8a.  v2:= "' must be a parameterized Collection with at least 1 type." @kind object;
  #L169b8e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169b94.  v1:= temp @kind object;
  #L169b96.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169b9c.  v1:= temp @kind object;
  #L169b9e.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169ba4.  throw v0;
  #L169ba6.  v0:= v2 @kind object;
  #L169ba8.  call temp:= `getColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L169bae.  v2:= temp @kind object;
  #L169bb0.  if v2 != 0 then goto L169d64;
  #L169bb4.  v9.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L169bb8.  v9.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` := v13 @kind object;
  #L169bbc.  call temp:= `isId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isId:()Z` @kind virtual;
  #L169bc2.  v0:= temp;
  #L169bc4.  if v0 == 0 then goto L169de6;
  #L169bc8.  call temp:= `isGeneratedId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isGeneratedId:()Z` @kind virtual;
  #L169bce.  v0:= temp;
  #L169bd0.  if v0 != 0 then goto L169be0;
  #L169bd4.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L169bda.  v0:= temp @kind object;
  #L169bdc.  if v0 == 0 then goto L169d74;
  #L169be0.  v0:= new `java.lang.IllegalArgumentException`;
  #L169be4.  v1:= new `java.lang.StringBuilder`;
  #L169be8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169bee.  v2:= "Must specify one of id, generatedId, and generatedIdSequence with " @kind object;
  #L169bf2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169bf8.  v1:= temp @kind object;
  #L169bfa.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L169c00.  v2:= temp @kind object;
  #L169c02.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169c08.  v1:= temp @kind object;
  #L169c0a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169c10.  v1:= temp @kind object;
  #L169c12.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169c18.  throw v0;
  #L169c1a.  if v1 != 0 then goto L16a118;
  #L169c1e.  call temp:= `isForeignCollection`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L169c24.  v0:= temp;
  #L169c26.  if v0 != 0 then goto L16a118;
  #L169c2a.  v0:= constclass @type ^`byte`[] @kind object;
  #L169c2e.  call temp:= `isAssignableFrom`(v0, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L169c34.  v0:= temp;
  #L169c36.  if v0 == 0 then goto L169c94;
  #L169c3a.  v0:= new `java.sql.SQLException`;
  #L169c3e.  v1:= new `java.lang.StringBuilder`;
  #L169c42.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169c48.  v2:= "ORMLite does not know how to store " @kind object;
  #L169c4c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169c52.  v1:= temp @kind object;
  #L169c54.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169c5a.  v1:= temp @kind object;
  #L169c5c.  v2:= " for field '" @kind object;
  #L169c60.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169c66.  v1:= temp @kind object;
  #L169c68.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L169c6e.  v2:= temp @kind object;
  #L169c70.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169c76.  v1:= temp @kind object;
  #L169c78.  v2:= "'. byte[] fields must specify dataType=DataType.BYTE_ARRAY or SERIALIZABLE" @kind object;
  #L169c7c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169c82.  v1:= temp @kind object;
  #L169c84.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169c8a.  v1:= temp @kind object;
  #L169c8c.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169c92.  throw v0;
  #L169c94.  v0:= constclass @type ^`java.io.Serializable` @kind object;
  #L169c98.  call temp:= `isAssignableFrom`(v0, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L169c9e.  v0:= temp;
  #L169ca0.  if v0 == 0 then goto L169d0a;
  #L169ca4.  v0:= new `java.sql.SQLException`;
  #L169ca8.  v1:= new `java.lang.StringBuilder`;
  #L169cac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169cb2.  v2:= "ORMLite does not know how to store " @kind object;
  #L169cb6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169cbc.  v1:= temp @kind object;
  #L169cbe.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169cc4.  v1:= temp @kind object;
  #L169cc6.  v2:= " for field '" @kind object;
  #L169cca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169cd0.  v1:= temp @kind object;
  #L169cd2.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L169cd8.  v2:= temp @kind object;
  #L169cda.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169ce0.  v1:= temp @kind object;
  #L169ce2.  v2:= "'.  Use another class, custom persister, or to serialize it use " @kind object;
  #L169ce6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169cec.  v1:= temp @kind object;
  #L169cee.  v2:= "dataType=DataType.SERIALIZABLE" @kind object;
  #L169cf2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169cf8.  v1:= temp @kind object;
  #L169cfa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169d00.  v1:= temp @kind object;
  #L169d02.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169d08.  throw v0;
  #L169d0a.  v0:= new `java.lang.IllegalArgumentException`;
  #L169d0e.  v1:= new `java.lang.StringBuilder`;
  #L169d12.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169d18.  v2:= "ORMLite does not know how to store " @kind object;
  #L169d1c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169d22.  v1:= temp @kind object;
  #L169d24.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169d2a.  v1:= temp @kind object;
  #L169d2c.  v2:= " for field " @kind object;
  #L169d30.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169d36.  v1:= temp @kind object;
  #L169d38.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L169d3e.  v2:= temp @kind object;
  #L169d40.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169d46.  v1:= temp @kind object;
  #L169d48.  v2:= ". Use another class or a custom persister." @kind object;
  #L169d4c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169d52.  v1:= temp @kind object;
  #L169d54.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169d5a.  v1:= temp @kind object;
  #L169d5c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169d62.  throw v0;
  #L169d64.  call temp:= `getColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L169d6a.  v0:= temp @kind object;
  #L169d6c.  v9.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L169d70.  goto L169bb8;
  #L169d74.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v6 @kind boolean;
  #L169d78.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v8 @kind boolean;
  #L169d7c.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v7 @kind object;
  #L169d80.  v0:= v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` @kind boolean;
  #L169d84.  if v0 == 0 then goto L169ea8;
  #L169d88.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L169d8e.  v0:= temp;
  #L169d90.  if v0 != 0 then goto L169da0;
  #L169d94.  call temp:= `isForeignAutoRefresh`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L169d9a.  v0:= temp;
  #L169d9c.  if v0 == 0 then goto L169ea8;
  #L169da0.  v0:= new `java.lang.IllegalArgumentException`;
  #L169da4.  v1:= new `java.lang.StringBuilder`;
  #L169da8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169dae.  v2:= "Id field " @kind object;
  #L169db2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169db8.  v1:= temp @kind object;
  #L169dba.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L169dc0.  v2:= temp @kind object;
  #L169dc2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169dc8.  v1:= temp @kind object;
  #L169dca.  v2:= " cannot also be a foreign object" @kind object;
  #L169dce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169dd4.  v1:= temp @kind object;
  #L169dd6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169ddc.  v1:= temp @kind object;
  #L169dde.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169de4.  throw v0;
  #L169de6.  call temp:= `isGeneratedId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isGeneratedId:()Z` @kind virtual;
  #L169dec.  v0:= temp;
  #L169dee.  if v0 == 0 then goto L169e60;
  #L169df2.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L169df8.  v0:= temp @kind object;
  #L169dfa.  if v0 == 0 then goto L169e38;
  #L169dfe.  v0:= new `java.lang.IllegalArgumentException`;
  #L169e02.  v1:= new `java.lang.StringBuilder`;
  #L169e06.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169e0c.  v2:= "Must specify one of id, generatedId, and generatedIdSequence with " @kind object;
  #L169e10.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169e16.  v1:= temp @kind object;
  #L169e18.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L169e1e.  v2:= temp @kind object;
  #L169e20.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169e26.  v1:= temp @kind object;
  #L169e28.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169e2e.  v1:= temp @kind object;
  #L169e30.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169e36.  throw v0;
  #L169e38.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v6 @kind boolean;
  #L169e3c.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v6 @kind boolean;
  #L169e40.  call temp:= `isIdSequenceNeeded`(v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.isIdSequenceNeeded:()Z` @kind interface;
  #L169e46.  v0:= temp;
  #L169e48.  if v0 == 0 then goto L169e5a;
  #L169e4c.  call temp:= `generateIdSequenceName`(v3, v11, v9) @signature `Lcom/j256/ormlite/db/DatabaseType;.generateIdSequenceName:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind interface;
  #L169e52.  v0:= temp @kind object;
  #L169e54.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v0 @kind object;
  #L169e58.  goto L169d80;
  #L169e5a.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v7 @kind object;
  #L169e5e.  goto L169d80;
  #L169e60.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L169e66.  v0:= temp @kind object;
  #L169e68.  if v0 == 0 then goto L169e98;
  #L169e6c.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v6 @kind boolean;
  #L169e70.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v6 @kind boolean;
  #L169e74.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L169e7a.  v0:= temp @kind object;
  #L169e7c.  call temp:= `isEntityNamesMustBeUpCase`(v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.isEntityNamesMustBeUpCase:()Z` @kind interface;
  #L169e82.  v2:= temp;
  #L169e84.  if v2 == 0 then goto L169e90;
  #L169e88.  call temp:= `upCaseEntityName`(v3, v0) @signature `Lcom/j256/ormlite/db/DatabaseType;.upCaseEntityName:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L169e8e.  v0:= temp @kind object;
  #L169e90.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v0 @kind object;
  #L169e94.  goto L169d80;
  #L169e98.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v8 @kind boolean;
  #L169e9c.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v8 @kind boolean;
  #L169ea0.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v7 @kind object;
  #L169ea4.  goto L169d80;
  #L169ea8.  call temp:= `isUseGetSet`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isUseGetSet:()Z` @kind virtual;
  #L169eae.  v0:= temp;
  #L169eb0.  if v0 == 0 then goto L169f2a;
  #L169eb4.  call temp:= `findGetMethod`(v12, v6) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.findGetMethod:(Ljava/lang/reflect/Field;Z)Ljava/lang/reflect/Method;` @kind static;
  #L169eba.  v0:= temp @kind object;
  #L169ebc.  v9.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L169ec0.  call temp:= `findSetMethod`(v12, v6) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.findSetMethod:(Ljava/lang/reflect/Field;Z)Ljava/lang/reflect/Method;` @kind static;
  #L169ec6.  v0:= temp @kind object;
  #L169ec8.  v9.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L169ecc.  call temp:= `isAllowGeneratedIdInsert`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isAllowGeneratedIdInsert:()Z` @kind virtual;
  #L169ed2.  v0:= temp;
  #L169ed4.  if v0 == 0 then goto L169f94;
  #L169ed8.  call temp:= `isGeneratedId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isGeneratedId:()Z` @kind virtual;
  #L169ede.  v0:= temp;
  #L169ee0.  if v0 != 0 then goto L169f94;
  #L169ee4.  v0:= new `java.lang.IllegalArgumentException`;
  #L169ee8.  v1:= new `java.lang.StringBuilder`;
  #L169eec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169ef2.  v2:= "Field " @kind object;
  #L169ef6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169efc.  v1:= temp @kind object;
  #L169efe.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L169f04.  v2:= temp @kind object;
  #L169f06.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169f0c.  v1:= temp @kind object;
  #L169f0e.  v2:= " must be a generated-id if allowGeneratedIdInsert = true" @kind object;
  #L169f12.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169f18.  v1:= temp @kind object;
  #L169f1a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169f20.  v1:= temp @kind object;
  #L169f22.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169f28.  throw v0;
  #L169f2a.  call temp:= `isAccessible`(v12) @signature `Ljava/lang/reflect/Field;.isAccessible:()Z` @kind virtual;
  #L169f30.  v0:= temp;
  #L169f32.  if v0 != 0 then goto L169f42;
  #Try_start3.  
  #L169f36.  v0:= v9.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L169f3a.  v2:= 1I;
  #L169f3c.  call `setAccessible`(v0, v2) @signature `Ljava/lang/reflect/Field;.setAccessible:(Z)V` @kind virtual;
  #Try_end3.  
  #L169f42.  v9.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` := v7 @kind object;
  #L169f46.  v9.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` := v7 @kind object;
  #L169f4a.  goto L169ecc;
  #L169f4c.  v0:= Exception @type ^`java.lang.SecurityException` @kind object;
  #L169f4e.  v0:= new `java.lang.IllegalArgumentException`;
  #L169f52.  v1:= new `java.lang.StringBuilder`;
  #L169f56.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169f5c.  v2:= "Could not open access to field " @kind object;
  #L169f60.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169f66.  v1:= temp @kind object;
  #L169f68.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L169f6e.  v2:= temp @kind object;
  #L169f70.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169f76.  v1:= temp @kind object;
  #L169f78.  v2:= ".  You may have to set useGetSet=true to fix." @kind object;
  #L169f7c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169f82.  v1:= temp @kind object;
  #L169f84.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169f8a.  v1:= temp @kind object;
  #L169f8c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169f92.  throw v0;
  #L169f94.  call temp:= `isForeignAutoRefresh`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L169f9a.  v0:= temp;
  #L169f9c.  if v0 == 0 then goto L169ff2;
  #L169fa0.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L169fa6.  v0:= temp;
  #L169fa8.  if v0 != 0 then goto L169ff2;
  #L169fac.  v0:= new `java.lang.IllegalArgumentException`;
  #L169fb0.  v1:= new `java.lang.StringBuilder`;
  #L169fb4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L169fba.  v2:= "Field " @kind object;
  #L169fbe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169fc4.  v1:= temp @kind object;
  #L169fc6.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L169fcc.  v2:= temp @kind object;
  #L169fce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169fd4.  v1:= temp @kind object;
  #L169fd6.  v2:= " must have foreign = true if foreignAutoRefresh = true" @kind object;
  #L169fda.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L169fe0.  v1:= temp @kind object;
  #L169fe2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L169fe8.  v1:= temp @kind object;
  #L169fea.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L169ff0.  throw v0;
  #L169ff2.  call temp:= `isForeignAutoCreate`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoCreate:()Z` @kind virtual;
  #L169ff8.  v0:= temp;
  #L169ffa.  if v0 == 0 then goto L16a050;
  #L169ffe.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L16a004.  v0:= temp;
  #L16a006.  if v0 != 0 then goto L16a050;
  #L16a00a.  v0:= new `java.lang.IllegalArgumentException`;
  #L16a00e.  v1:= new `java.lang.StringBuilder`;
  #L16a012.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16a018.  v2:= "Field " @kind object;
  #L16a01c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a022.  v1:= temp @kind object;
  #L16a024.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16a02a.  v2:= temp @kind object;
  #L16a02c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a032.  v1:= temp @kind object;
  #L16a034.  v2:= " must have foreign = true if foreignAutoCreate = true" @kind object;
  #L16a038.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a03e.  v1:= temp @kind object;
  #L16a040.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a046.  v1:= temp @kind object;
  #L16a048.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a04e.  throw v0;
  #L16a050.  call temp:= `getForeignColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignColumnName:()Ljava/lang/String;` @kind virtual;
  #L16a056.  v0:= temp @kind object;
  #L16a058.  if v0 == 0 then goto L16a0ae;
  #L16a05c.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L16a062.  v0:= temp;
  #L16a064.  if v0 != 0 then goto L16a0ae;
  #L16a068.  v0:= new `java.lang.IllegalArgumentException`;
  #L16a06c.  v1:= new `java.lang.StringBuilder`;
  #L16a070.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16a076.  v2:= "Field " @kind object;
  #L16a07a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a080.  v1:= temp @kind object;
  #L16a082.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16a088.  v2:= temp @kind object;
  #L16a08a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a090.  v1:= temp @kind object;
  #L16a092.  v2:= " must have foreign = true if foreignColumnName is set" @kind object;
  #L16a096.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a09c.  v1:= temp @kind object;
  #L16a09e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a0a4.  v1:= temp @kind object;
  #L16a0a6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a0ac.  throw v0;
  #L16a0ae.  call temp:= `isVersion`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isVersion:()Z` @kind virtual;
  #L16a0b4.  v0:= temp;
  #L16a0b6.  if v0 == 0 then goto L16a110;
  #L16a0ba.  if v1 == 0 then goto L16a0ca;
  #L16a0be.  call temp:= `isValidForVersion`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidForVersion:()Z` @kind interface;
  #L16a0c4.  v0:= temp;
  #L16a0c6.  if v0 != 0 then goto L16a110;
  #L16a0ca.  v0:= new `java.lang.IllegalArgumentException`;
  #L16a0ce.  v1:= new `java.lang.StringBuilder`;
  #L16a0d2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16a0d8.  v2:= "Field " @kind object;
  #L16a0dc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a0e2.  v1:= temp @kind object;
  #L16a0e4.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16a0ea.  v2:= temp @kind object;
  #L16a0ec.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a0f2.  v1:= temp @kind object;
  #L16a0f4.  v2:= " is not a valid type to be a version field" @kind object;
  #L16a0f8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a0fe.  v1:= temp @kind object;
  #L16a100.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a106.  v1:= temp @kind object;
  #L16a108.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a10e.  throw v0;
  #L16a110.  call `assignDataType`(v9, v3, v1) @signature `Lcom/j256/ormlite/field/FieldType;.assignDataType:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/DataPersister;)V` @kind direct;
  #L16a116.  return @kind void;
  #L16a118.  v0:= v2 @kind object;
  #L16a11a.  goto L169ba8;
  #L16a11e.  v1:= v0 @kind object;
  #L16a120.  goto L169724;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L16980a;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start1..Try_end1] goto L16983c;
  catch `java.lang.Exception` @[Try_start1..Try_end1] goto L169876;
  catch `java.lang.Exception` @[Try_start2..Try_end2] goto L1698b0;
  catch `java.lang.SecurityException` @[Try_start3..Try_end3] goto L169f4c;
}
procedure `void` `assignDataType`(`com.j256.ormlite.field.FieldType` v6 @kind this, `com.j256.ormlite.db.DatabaseType` v7 @kind object, `com.j256.ormlite.field.DataPersister` v8 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.assignDataType:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/DataPersister;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16a170.  call temp:= `getDataPersister`(v7, v8, v6) @signature `Lcom/j256/ormlite/db/DatabaseType;.getDataPersister:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/DataPersister;` @kind interface;
  #L16a176.  v0:= temp @kind object;
  #L16a178.  v6.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` := v0 @kind object;
  #L16a17c.  if v0 != 0 then goto L16a1de;
  #L16a180.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16a184.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L16a18a.  v0:= temp;
  #L16a18c.  if v0 != 0 then goto L16a3c2;
  #L16a190.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16a194.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L16a19a.  v0:= temp;
  #L16a19c.  if v0 != 0 then goto L16a3c2;
  #L16a1a0.  v0:= new `java.sql.SQLException`;
  #L16a1a4.  v1:= new `java.lang.StringBuilder`;
  #L16a1a8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16a1ae.  v2:= "Data persister for field " @kind object;
  #L16a1b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a1b8.  v1:= temp @kind object;
  #L16a1ba.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a1c0.  v1:= temp @kind object;
  #L16a1c2.  v2:= " is null but the field is not a foreign or foreignCollection" @kind object;
  #L16a1c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a1cc.  v1:= temp @kind object;
  #L16a1ce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a1d4.  v1:= temp @kind object;
  #L16a1d6.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a1dc.  throw v0;
  #L16a1de.  call temp:= `getFieldConverter`(v7, v0, v6) @signature `Lcom/j256/ormlite/db/DatabaseType;.getFieldConverter:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/FieldConverter;` @kind interface;
  #L16a1e4.  v1:= temp @kind object;
  #L16a1e6.  v6.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` := v1 @kind object;
  #L16a1ea.  v1:= v6.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` @kind boolean;
  #L16a1ee.  if v1 == 0 then goto L16a2c8;
  #L16a1f2.  call temp:= `isValidGeneratedType`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidGeneratedType:()Z` @kind interface;
  #L16a1f8.  v1:= temp;
  #L16a1fa.  if v1 != 0 then goto L16a2c8;
  #L16a1fe.  v1:= new `java.lang.StringBuilder`;
  #L16a202.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16a208.  v2:= "Generated-id field '" @kind object;
  #L16a20c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a212.  v2:= temp @kind object;
  #L16a214.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16a218.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16a21e.  v3:= temp @kind object;
  #L16a220.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a226.  v2:= "' in " @kind object;
  #L16a22a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a230.  v2:= temp @kind object;
  #L16a232.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16a236.  call temp:= `getDeclaringClass`(v3) @signature `Ljava/lang/reflect/Field;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L16a23c.  v3:= temp @kind object;
  #L16a23e.  call temp:= `getSimpleName`(v3) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L16a244.  v3:= temp @kind object;
  #L16a246.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a24c.  v2:= " can't be type " @kind object;
  #L16a250.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a256.  v2:= temp @kind object;
  #L16a258.  call temp:= `getSqlType`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L16a25e.  v0:= temp @kind object;
  #L16a260.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a266.  v0:= ".  Must be one of: " @kind object;
  #L16a26a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a270.  call temp:= `values`() @signature `Lcom/j256/ormlite/field/DataType;.values:()[Lcom/j256/ormlite/field/DataType;` @kind static;
  #L16a276.  v2:= temp @kind object;
  #L16a278.  v3:= length @variable v2;
  #L16a27a.  v0:= 0I;
  #L16a27c.  if v0 >= v3 then goto L16a2b4;
  #L16a280.  v4:= v2[v0] @kind object;
  #L16a284.  call temp:= `getDataPersister`(v4) @signature `Lcom/j256/ormlite/field/DataType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L16a28a.  v5:= temp @kind object;
  #L16a28c.  if v5 == 0 then goto L16a2ae;
  #L16a290.  call temp:= `isValidGeneratedType`(v5) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidGeneratedType:()Z` @kind interface;
  #L16a296.  v5:= temp;
  #L16a298.  if v5 == 0 then goto L16a2ae;
  #L16a29c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a2a2.  v4:= temp @kind object;
  #L16a2a4.  v5:= 32I;
  #L16a2a8.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a2ae.  v0:= v0 + 1;
  #L16a2b2.  goto L16a27c;
  #L16a2b4.  v0:= new `java.lang.IllegalArgumentException`;
  #L16a2b8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a2be.  v1:= temp @kind object;
  #L16a2c0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a2c6.  throw v0;
  #L16a2c8.  v1:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16a2cc.  call temp:= `isThrowIfNull`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isThrowIfNull:()Z` @kind virtual;
  #L16a2d2.  v1:= temp;
  #L16a2d4.  if v1 == 0 then goto L16a32e;
  #L16a2d8.  call temp:= `isPrimitive`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L16a2de.  v1:= temp;
  #L16a2e0.  if v1 != 0 then goto L16a32e;
  #L16a2e4.  v0:= new `java.sql.SQLException`;
  #L16a2e8.  v1:= new `java.lang.StringBuilder`;
  #L16a2ec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16a2f2.  v2:= "Field " @kind object;
  #L16a2f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a2fc.  v1:= temp @kind object;
  #L16a2fe.  v2:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16a302.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16a308.  v2:= temp @kind object;
  #L16a30a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a310.  v1:= temp @kind object;
  #L16a312.  v2:= " must be a primitive if set with throwIfNull" @kind object;
  #L16a316.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a31c.  v1:= temp @kind object;
  #L16a31e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a324.  v1:= temp @kind object;
  #L16a326.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a32c.  throw v0;
  #L16a32e.  v1:= v6.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` @kind boolean;
  #L16a332.  if v1 == 0 then goto L16a3a0;
  #L16a336.  call temp:= `isAppropriateId`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isAppropriateId:()Z` @kind interface;
  #L16a33c.  v1:= temp;
  #L16a33e.  if v1 != 0 then goto L16a3a0;
  #L16a342.  v1:= new `java.sql.SQLException`;
  #L16a346.  v2:= new `java.lang.StringBuilder`;
  #L16a34a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16a350.  v3:= "Field '" @kind object;
  #L16a354.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a35a.  v2:= temp @kind object;
  #L16a35c.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16a360.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16a366.  v3:= temp @kind object;
  #L16a368.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a36e.  v2:= temp @kind object;
  #L16a370.  v3:= "' is of data type " @kind object;
  #L16a374.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a37a.  v2:= temp @kind object;
  #L16a37c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a382.  v0:= temp @kind object;
  #L16a384.  v2:= " which cannot be the ID field" @kind object;
  #L16a388.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a38e.  v0:= temp @kind object;
  #L16a390.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a396.  v0:= temp @kind object;
  #L16a398.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a39e.  throw v1;
  #L16a3a0.  call temp:= `makeConfigObject`(v0, v6) @signature `Lcom/j256/ormlite/field/DataPersister;.makeConfigObject:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;` @kind interface;
  #L16a3a6.  v0:= temp @kind object;
  #L16a3a8.  v6.`com.j256.ormlite.field.FieldType.dataTypeConfigObj` @type ^`java.lang.Object` := v0 @kind object;
  #L16a3ac.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16a3b0.  call temp:= `getDefaultValue`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getDefaultValue:()Ljava/lang/String;` @kind virtual;
  #L16a3b6.  v0:= temp @kind object;
  #L16a3b8.  if v0 != 0 then goto L16a3c4;
  #L16a3bc.  v0:= 0I;
  #L16a3be.  v6.`com.j256.ormlite.field.FieldType.defaultValue` @type ^`java.lang.Object` := v0 @kind object;
  #L16a3c2.  return @kind void;
  #L16a3c4.  v1:= v6.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` @kind boolean;
  #L16a3c8.  if v1 == 0 then goto L16a42a;
  #L16a3cc.  v1:= new `java.sql.SQLException`;
  #L16a3d0.  v2:= new `java.lang.StringBuilder`;
  #L16a3d4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16a3da.  v3:= "Field '" @kind object;
  #L16a3de.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a3e4.  v2:= temp @kind object;
  #L16a3e6.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16a3ea.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16a3f0.  v3:= temp @kind object;
  #L16a3f2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a3f8.  v2:= temp @kind object;
  #L16a3fa.  v3:= "' cannot be a generatedId and have a default value '" @kind object;
  #L16a3fe.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a404.  v2:= temp @kind object;
  #L16a406.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a40c.  v0:= temp @kind object;
  #L16a40e.  v2:= "'" @kind object;
  #L16a412.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a418.  v0:= temp @kind object;
  #L16a41a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a420.  v0:= temp @kind object;
  #L16a422.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a428.  throw v1;
  #L16a42a.  v1:= v6.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L16a42e.  call temp:= `parseDefaultString`(v1, v6, v0) @signature `Lcom/j256/ormlite/field/FieldConverter;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @kind interface;
  #L16a434.  v0:= temp @kind object;
  #L16a436.  v6.`com.j256.ormlite.field.FieldType.defaultValue` @type ^`java.lang.Object` := v0 @kind object;
  #L16a43a.  goto L16a3c2;
}
procedure `com.j256.ormlite.field.FieldType` `createFieldType`(`com.j256.ormlite.support.ConnectionSource` v6 @kind object, `java.lang.String` v7 @kind object, `java.lang.reflect.Field` v8 @kind object, `java.lang.Class` v9 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createFieldType:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Ljava/lang/Class;)Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16a44c.  call temp:= `getDatabaseType`(v6) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L16a452.  v0:= temp @kind object;
  #L16a454.  call temp:= `fromField`(v0, v7, v8) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.fromField:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/reflect/Field;)Lcom/j256/ormlite/field/DatabaseFieldConfig;` @kind static;
  #L16a45a.  v4:= temp @kind object;
  #L16a45c.  if v4 != 0 then goto L16a464;
  #L16a460.  v0:= 0I;
  #L16a462.  return v0 @kind object;
  #L16a464.  v0:= new `com.j256.ormlite.field.FieldType`;
  #L16a468.  v1:= v6 @kind object;
  #L16a46a.  v2:= v7 @kind object;
  #L16a46c.  v3:= v8 @kind object;
  #L16a46e.  v5:= v9 @kind object;
  #L16a470.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/field/FieldType;.<init>:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Lcom/j256/ormlite/field/DatabaseFieldConfig;Ljava/lang/Class;)V` @kind direct;
  #L16a476.  goto L16a462;
}
procedure `java.lang.Object` `createForeignObject`(`com.j256.ormlite.field.FieldType` v4 @kind this, `java.lang.Object` v5 @kind object, `com.j256.ormlite.dao.ObjectCache` v6 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignObject:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16a488.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L16a48c.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L16a492.  v0:= temp @kind object;
  #L16a494.  v0:= (`com.j256.ormlite.field.FieldType$LevelCounters`) v0 @kind object;
  #L16a498.  if v0 != 0 then goto L16a4cc;
  #L16a49c.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16a4a0.  call temp:= `isForeignAutoRefresh`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L16a4a6.  v0:= temp;
  #L16a4a8.  if v0 != 0 then goto L16a4b6;
  #L16a4ac.  call temp:= `createForeignShell`(v4, v5, v6) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L16a4b2.  v0:= temp @kind object;
  #L16a4b4.  return v0 @kind object;
  #L16a4b6.  v0:= new `com.j256.ormlite.field.FieldType$LevelCounters`;
  #L16a4ba.  v1:= 0I;
  #L16a4bc.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/FieldType$LevelCounters;.<init>:(Lcom/j256/ormlite/field/FieldType$1;)V` @kind direct;
  #L16a4c2.  v1:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L16a4c6.  call `set`(v1, v0) @signature `Ljava/lang/ThreadLocal;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L16a4cc.  v1:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L16a4d0.  if v1 != 0 then goto L16a4fe;
  #L16a4d4.  v1:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16a4d8.  call temp:= `isForeignAutoRefresh`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L16a4de.  v1:= temp;
  #L16a4e0.  if v1 != 0 then goto L16a4ee;
  #L16a4e4.  call temp:= `createForeignShell`(v4, v5, v6) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L16a4ea.  v0:= temp @kind object;
  #L16a4ec.  goto L16a4b4;
  #L16a4ee.  v1:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16a4f2.  call temp:= `getMaxForeignAutoRefreshLevel`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getMaxForeignAutoRefreshLevel:()I` @kind virtual;
  #L16a4f8.  v1:= temp;
  #L16a4fa.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevelMax` @type ^`int` := v1;
  #L16a4fe.  v1:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L16a502.  v2:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevelMax` @type ^`int`;
  #L16a506.  if v1 < v2 then goto L16a514;
  #L16a50a.  call temp:= `createForeignShell`(v4, v5, v6) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L16a510.  v0:= temp @kind object;
  #L16a512.  goto L16a4b4;
  #L16a514.  v1:= v4.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` @kind object;
  #L16a518.  if v1 != 0 then goto L16a544;
  #L16a51c.  v1:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L16a520.  call temp:= `getDatabaseType`(v1) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L16a526.  v1:= temp @kind object;
  #L16a528.  v2:= v4.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L16a52c.  call temp:= `getTableInfo`(v2) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L16a532.  v2:= temp @kind object;
  #L16a534.  v3:= v4.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16a538.  call temp:= `build`(v1, v2, v3) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.build:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;` @kind static;
  #L16a53e.  v1:= temp @kind object;
  #L16a540.  v4.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` := v1 @kind object;
  #L16a544.  v1:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L16a548.  v1:= v1 + 1;
  #L16a54c.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int` := v1;
  #Try_start0.  
  #L16a550.  v1:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L16a554.  v2:= v4.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L16a558.  call temp:= `getReadOnlyConnection`(v1, v2) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getReadOnlyConnection:(Ljava/lang/String;)Lcom/j256/ormlite/support/DatabaseConnection;` @kind interface;
  #Try_end0.  
  #L16a55e.  v2:= temp @kind object;
  #Try_start1.  
  #L16a560.  v1:= v4.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` @kind object;
  #L16a564.  call temp:= `execute`(v1, v2, v5, v6) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.execute:(Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L16a56a.  v1:= temp @kind object;
  #Try_start2.  
  #L16a56c.  v3:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L16a570.  call `releaseConnection`(v3, v2) @signature `Lcom/j256/ormlite/support/ConnectionSource;.releaseConnection:(Lcom/j256/ormlite/support/DatabaseConnection;)V` @kind interface;
  #Try_end2.  
  #L16a576.  v2:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L16a57a.  v2:= v2 + -1;
  #L16a57e.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int` := v2;
  #L16a582.  v0:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L16a586.  if v0 > 0 then goto L16a594;
  #L16a58a.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L16a58e.  call `remove`(v0) @signature `Ljava/lang/ThreadLocal;.remove:()V` @kind virtual;
  #L16a594.  v0:= v1 @kind object;
  #L16a596.  goto L16a4b4;
  #L16a598.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L16a59a.  v3:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L16a59e.  call `releaseConnection`(v3, v2) @signature `Lcom/j256/ormlite/support/ConnectionSource;.releaseConnection:(Lcom/j256/ormlite/support/DatabaseConnection;)V` @kind interface;
  #L16a5a4.  throw v1;
  #Try_end3.  
  #L16a5a6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L16a5a8.  v2:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L16a5ac.  v2:= v2 + -1;
  #L16a5b0.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int` := v2;
  #L16a5b4.  v0:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L16a5b8.  if v0 > 0 then goto L16a5c6;
  #L16a5bc.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L16a5c0.  call `remove`(v0) @signature `Ljava/lang/ThreadLocal;.remove:()V` @kind virtual;
  #L16a5c6.  throw v1;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L16a5a6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L16a598;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L16a5a6;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L16a5a6;
}
procedure `java.lang.Object` `createForeignShell`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object, `com.j256.ormlite.dao.ObjectCache` v5 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L16a600.  v0:= v3.`com.j256.ormlite.field.FieldType.foreignTableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L16a604.  call temp:= `createObject`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.createObject:()Ljava/lang/Object;` @kind virtual;
  #L16a60a.  v0:= temp @kind object;
  #L16a60c.  v1:= v3.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16a610.  v2:= 0I;
  #L16a612.  call `assignField`(v1, v0, v4, v2, v5) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L16a618.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `findForeignFieldType`(`com.j256.ormlite.field.FieldType` v6 @kind this, `java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object, `com.j256.ormlite.dao.BaseDaoImpl` v9 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.findForeignFieldType:(Ljava/lang/Class;Ljava/lang/Class;Lcom/j256/ormlite/dao/BaseDaoImpl;)Lcom/j256/ormlite/field/FieldType;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16a62c.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16a630.  call temp:= `getForeignCollectionForeignFieldName`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionForeignFieldName:()Ljava/lang/String;` @kind virtual;
  #L16a636.  v1:= temp @kind object;
  #L16a638.  call temp:= `getTableInfo`(v9) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L16a63e.  v0:= temp @kind object;
  #L16a640.  call temp:= `getFieldTypes`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16a646.  v2:= temp @kind object;
  #L16a648.  v3:= length @variable v2;
  #L16a64a.  v0:= 0I;
  #L16a64c.  if v0 >= v3 then goto L16a718;
  #L16a650.  v4:= v2[v0] @kind object;
  #L16a654.  call temp:= `getType`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16a65a.  v5:= temp @kind object;
  #L16a65c.  if v5 != v8 then goto L16a712;
  #L16a660.  if v1 == 0 then goto L16a680;
  #L16a664.  call temp:= `getField`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getField:()Ljava/lang/reflect/Field;` @kind virtual;
  #L16a66a.  v5:= temp @kind object;
  #L16a66c.  call temp:= `getName`(v5) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16a672.  v5:= temp @kind object;
  #L16a674.  call temp:= `equals`(v5, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L16a67a.  v5:= temp;
  #L16a67c.  if v5 == 0 then goto L16a712;
  #L16a680.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16a684.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L16a68a.  v0:= temp;
  #L16a68c.  if v0 != 0 then goto L16a7b6;
  #L16a690.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16a694.  call temp:= `isForeignAutoRefresh`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L16a69a.  v0:= temp;
  #L16a69c.  if v0 != 0 then goto L16a7b6;
  #L16a6a0.  v0:= new `java.sql.SQLException`;
  #L16a6a4.  v1:= new `java.lang.StringBuilder`;
  #L16a6a8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16a6ae.  v2:= "Foreign collection object " @kind object;
  #L16a6b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a6b8.  v1:= temp @kind object;
  #L16a6ba.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a6c0.  v1:= temp @kind object;
  #L16a6c2.  v2:= " for field '" @kind object;
  #L16a6c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a6cc.  v1:= temp @kind object;
  #L16a6ce.  v2:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16a6d2.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16a6d8.  v2:= temp @kind object;
  #L16a6da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a6e0.  v1:= temp @kind object;
  #L16a6e2.  v2:= "' contains a field of class " @kind object;
  #L16a6e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a6ec.  v1:= temp @kind object;
  #L16a6ee.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a6f4.  v1:= temp @kind object;
  #L16a6f6.  v2:= " but it's not foreign" @kind object;
  #L16a6fa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a700.  v1:= temp @kind object;
  #L16a702.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a708.  v1:= temp @kind object;
  #L16a70a.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a710.  throw v0;
  #L16a712.  v0:= v0 + 1;
  #L16a716.  goto L16a64c;
  #L16a718.  v0:= new `java.lang.StringBuilder`;
  #L16a71c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16a722.  v2:= "Foreign collection class " @kind object;
  #L16a726.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a72c.  v2:= temp @kind object;
  #L16a72e.  call temp:= `getName`(v7) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L16a734.  v3:= temp @kind object;
  #L16a736.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a73c.  v2:= " for field '" @kind object;
  #L16a740.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a746.  v2:= temp @kind object;
  #L16a748.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16a74c.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16a752.  v3:= temp @kind object;
  #L16a754.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a75a.  v2:= temp @kind object;
  #L16a75c.  v3:= "' column-name does not contain a foreign field" @kind object;
  #L16a760.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a766.  if v1 == 0 then goto L16a788;
  #L16a76a.  v2:= " named '" @kind object;
  #L16a76e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a774.  v2:= temp @kind object;
  #L16a776.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a77c.  v1:= temp @kind object;
  #L16a77e.  v2:= 39I;
  #L16a782.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a788.  v1:= " of class " @kind object;
  #L16a78c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a792.  v1:= temp @kind object;
  #L16a794.  call temp:= `getName`(v8) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L16a79a.  v2:= temp @kind object;
  #L16a79c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a7a2.  v1:= new `java.sql.SQLException`;
  #L16a7a6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a7ac.  v0:= temp @kind object;
  #L16a7ae.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16a7b4.  throw v1;
  #L16a7b6.  return v4 @kind object;
}
procedure `boolean` `isFieldValueDefault`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.isFieldValueDefault:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L16a7c8.  if v2 != 0 then goto L16a7d0;
  #L16a7cc.  v0:= 1I;
  #L16a7ce.  return v0;
  #L16a7d0.  call temp:= `getJavaDefaultValueDefault`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getJavaDefaultValueDefault:()Ljava/lang/Object;` @kind virtual;
  #L16a7d6.  v0:= temp @kind object;
  #L16a7d8.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L16a7de.  v0:= temp;
  #L16a7e0.  goto L16a7ce;
}
procedure `void` `assignField`(`com.j256.ormlite.field.FieldType` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `boolean` v7 , `com.j256.ormlite.dao.ObjectCache` v8 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16a7f4.  v0:= `@@com.j256.ormlite.field.FieldType.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16a7f8.  v1:= `@@com.j256.ormlite.logger.Log$Level.TRACE` @type ^`com.j256.ormlite.logger.Log$Level` @kind object;
  #L16a7fc.  call temp:= `isLevelEnabled`(v0, v1) @signature `Lcom/j256/ormlite/logger/Logger;.isLevelEnabled:(Lcom/j256/ormlite/logger/Log$Level;)Z` @kind virtual;
  #L16a802.  v0:= temp;
  #L16a804.  if v0 == 0 then goto L16a828;
  #L16a808.  v2:= `@@com.j256.ormlite.field.FieldType.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16a80c.  v3:= "assiging from data {}, val {}: {}" @kind object;
  #L16a810.  if v5 != 0 then goto L16a84e;
  #L16a814.  v0:= "null" @kind object;
  #L16a818.  v1:= v0 @kind object;
  #L16a81a.  if v6 != 0 then goto L16a85a;
  #L16a81e.  v0:= "null" @kind object;
  #L16a822.  call `trace`(v2, v3, v1, v0, v6) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L16a828.  v0:= v4.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16a82c.  if v0 == 0 then goto L16a87c;
  #L16a830.  if v6 == 0 then goto L16a87c;
  #L16a834.  call temp:= `extractJavaFieldValue`(v4, v5) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16a83a.  v0:= temp @kind object;
  #L16a83c.  if v0 == 0 then goto L16a864;
  #L16a840.  call temp:= `equals`(v0, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L16a846.  v0:= temp;
  #L16a848.  if v0 == 0 then goto L16a864;
  #L16a84c.  return @kind void;
  #L16a84e.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L16a854.  v0:= temp @kind object;
  #L16a856.  v1:= v0 @kind object;
  #L16a858.  goto L16a81a;
  #L16a85a.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L16a860.  v0:= temp @kind object;
  #L16a862.  goto L16a822;
  #L16a864.  v0:= v4.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L16a868.  call temp:= `getObjectCache`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getObjectCache:()Lcom/j256/ormlite/dao/ObjectCache;` @kind virtual;
  #L16a86e.  v0:= temp @kind object;
  #L16a870.  if v0 != 0 then goto L16a8f2;
  #L16a874.  v0:= 0I;
  #L16a876.  if v0 == 0 then goto L16a904;
  #L16a87a.  v6:= v0 @kind object;
  #L16a87c.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L16a880.  if v0 != 0 then goto L16a974;
  #Try_start0.  
  #L16a884.  v0:= v4.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16a888.  call `set`(v0, v5, v6) @signature `Ljava/lang/reflect/Field;.set:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #Try_end0.  
  #L16a88e.  goto L16a84c;
  #L16a890.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L16a892.  v1:= new `java.lang.StringBuilder`;
  #L16a896.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16a89c.  v2:= "Could not assign object '" @kind object;
  #L16a8a0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a8a6.  v1:= temp @kind object;
  #L16a8a8.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a8ae.  v1:= temp @kind object;
  #L16a8b0.  v2:= "' of type " @kind object;
  #L16a8b4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a8ba.  v1:= temp @kind object;
  #L16a8bc.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L16a8c2.  v2:= temp @kind object;
  #L16a8c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a8ca.  v1:= temp @kind object;
  #L16a8cc.  v2:= " to field " @kind object;
  #L16a8d0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a8d6.  v1:= temp @kind object;
  #L16a8d8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a8de.  v1:= temp @kind object;
  #L16a8e0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a8e6.  v1:= temp @kind object;
  #L16a8e8.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16a8ee.  v0:= temp @kind object;
  #L16a8f0.  throw v0;
  #L16a8f2.  call temp:= `getType`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16a8f8.  v1:= temp @kind object;
  #L16a8fa.  call temp:= `get`(v0, v1, v6) @signature `Lcom/j256/ormlite/dao/ObjectCache;.get:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L16a900.  v0:= temp @kind object;
  #L16a902.  goto L16a876;
  #L16a904.  if v7 != 0 then goto L16a87c;
  #L16a908.  call temp:= `createForeignObject`(v4, v6, v8) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignObject:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L16a90e.  v6:= temp @kind object;
  #L16a910.  goto L16a87c;
  #L16a912.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L16a914.  v1:= new `java.lang.StringBuilder`;
  #L16a918.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16a91e.  v2:= "Could not assign object '" @kind object;
  #L16a922.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a928.  v1:= temp @kind object;
  #L16a92a.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a930.  v1:= temp @kind object;
  #L16a932.  v2:= "' of type " @kind object;
  #L16a936.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a93c.  v1:= temp @kind object;
  #L16a93e.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L16a944.  v2:= temp @kind object;
  #L16a946.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a94c.  v1:= temp @kind object;
  #L16a94e.  v2:= "' to field " @kind object;
  #L16a952.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a958.  v1:= temp @kind object;
  #L16a95a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a960.  v1:= temp @kind object;
  #L16a962.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a968.  v1:= temp @kind object;
  #L16a96a.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16a970.  v0:= temp @kind object;
  #L16a972.  throw v0;
  #Try_start1.  
  #L16a974.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L16a978.  v1:= 1I;
  #L16a97a.  v1:= new `java.lang.Object`[v1];
  #L16a97e.  v2:= 0I;
  #L16a980.  v1[v2]:= v6 @kind object;
  #L16a984.  call temp:= `invoke`(v0, v5, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L16a98a.  goto L16a84c;
  #L16a98e.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L16a990.  v1:= new `java.lang.StringBuilder`;
  #L16a994.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16a99a.  v2:= "Could not call " @kind object;
  #L16a99e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a9a4.  v1:= temp @kind object;
  #L16a9a6.  v2:= v4.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L16a9aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a9b0.  v1:= temp @kind object;
  #L16a9b2.  v2:= " on object with '" @kind object;
  #L16a9b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a9bc.  v1:= temp @kind object;
  #L16a9be.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a9c4.  v1:= temp @kind object;
  #L16a9c6.  v2:= "' for " @kind object;
  #L16a9ca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a9d0.  v1:= temp @kind object;
  #L16a9d2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16a9d8.  v1:= temp @kind object;
  #L16a9da.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16a9e0.  v1:= temp @kind object;
  #L16a9e2.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16a9e8.  v0:= temp @kind object;
  #L16a9ea.  throw v0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L16a890;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L16a912;
  catch `java.lang.Exception` @[Try_start1..Try_end1] goto L16a98e;
}
procedure `java.lang.Object` `assignIdValue`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Number` v5 @kind object, `com.j256.ormlite.dao.ObjectCache` v6 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16aa1c.  v0:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L16aa20.  call temp:= `convertIdNumber`(v0, v5) @signature `Lcom/j256/ormlite/field/DataPersister;.convertIdNumber:(Ljava/lang/Number;)Ljava/lang/Object;` @kind interface;
  #L16aa26.  v0:= temp @kind object;
  #L16aa28.  if v0 != 0 then goto L16aa76;
  #L16aa2c.  v0:= new `java.sql.SQLException`;
  #L16aa30.  v1:= new `java.lang.StringBuilder`;
  #L16aa34.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16aa3a.  v2:= "Invalid class " @kind object;
  #L16aa3e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16aa44.  v1:= temp @kind object;
  #L16aa46.  v2:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L16aa4a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16aa50.  v1:= temp @kind object;
  #L16aa52.  v2:= " for sequence-id " @kind object;
  #L16aa56.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16aa5c.  v1:= temp @kind object;
  #L16aa5e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16aa64.  v1:= temp @kind object;
  #L16aa66.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16aa6c.  v1:= temp @kind object;
  #L16aa6e.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16aa74.  throw v0;
  #L16aa76.  v1:= 0I;
  #L16aa78.  call `assignField`(v3, v4, v0, v1, v6) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L16aa7e.  return v0 @kind object;
}
procedure `com.j256.ormlite.dao.BaseForeignCollection` `buildForeignCollection`(`com.j256.ormlite.field.FieldType` v8 @kind this, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.buildForeignCollection:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/j256/ormlite/dao/BaseForeignCollection;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L16aa90.  v2:= 0I;
  #L16aa92.  v0:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16aa96.  if v0 != 0 then goto L16aa9e;
  #L16aa9a.  v0:= v2 @kind object;
  #L16aa9c.  return v0 @kind object;
  #L16aa9e.  v1:= v8.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L16aaa2.  v0:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16aaa6.  call temp:= `isForeignCollectionEager`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionEager:()Z` @kind virtual;
  #L16aaac.  v0:= temp;
  #L16aaae.  if v0 != 0 then goto L16aade;
  #L16aab2.  v0:= new `com.j256.ormlite.dao.LazyForeignCollection`;
  #L16aab6.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16aaba.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16aabe.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L16aac4.  v5:= temp @kind object;
  #L16aac6.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16aaca.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L16aad0.  v6:= temp;
  #L16aad2.  v2:= v9 @kind object;
  #L16aad4.  v3:= v10 @kind object;
  #L16aad6.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/LazyForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #L16aadc.  goto L16aa9c;
  #L16aade.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L16aae2.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L16aae8.  v0:= temp @kind object;
  #L16aaea.  v0:= (`com.j256.ormlite.field.FieldType$LevelCounters`) v0 @kind object;
  #L16aaee.  if v0 != 0 then goto L16abea;
  #L16aaf2.  v0:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16aaf6.  call temp:= `getForeignCollectionMaxEagerLevel`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionMaxEagerLevel:()I` @kind virtual;
  #L16aafc.  v0:= temp;
  #L16aafe.  if v0 != 0 then goto L16ab2e;
  #L16ab02.  v0:= new `com.j256.ormlite.dao.LazyForeignCollection`;
  #L16ab06.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16ab0a.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16ab0e.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L16ab14.  v5:= temp @kind object;
  #L16ab16.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16ab1a.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L16ab20.  v6:= temp;
  #L16ab22.  v2:= v9 @kind object;
  #L16ab24.  v3:= v10 @kind object;
  #L16ab26.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/LazyForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #L16ab2c.  goto L16aa9c;
  #L16ab2e.  v0:= new `com.j256.ormlite.field.FieldType$LevelCounters`;
  #L16ab32.  call `<init>`(v0, v2) @signature `Lcom/j256/ormlite/field/FieldType$LevelCounters;.<init>:(Lcom/j256/ormlite/field/FieldType$1;)V` @kind direct;
  #L16ab38.  v2:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L16ab3c.  call `set`(v2, v0) @signature `Ljava/lang/ThreadLocal;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L16ab42.  v7:= v0 @kind object;
  #L16ab44.  v0:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L16ab48.  if v0 != 0 then goto L16ab5c;
  #L16ab4c.  v0:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16ab50.  call temp:= `getForeignCollectionMaxEagerLevel`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionMaxEagerLevel:()I` @kind virtual;
  #L16ab56.  v0:= temp;
  #L16ab58.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevelMax` @type ^`int` := v0;
  #L16ab5c.  v0:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L16ab60.  v2:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevelMax` @type ^`int`;
  #L16ab64.  if v0 < v2 then goto L16ab94;
  #L16ab68.  v0:= new `com.j256.ormlite.dao.LazyForeignCollection`;
  #L16ab6c.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16ab70.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16ab74.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L16ab7a.  v5:= temp @kind object;
  #L16ab7c.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16ab80.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L16ab86.  v6:= temp;
  #L16ab88.  v2:= v9 @kind object;
  #L16ab8a.  v3:= v10 @kind object;
  #L16ab8c.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/LazyForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #L16ab92.  goto L16aa9c;
  #L16ab94.  v0:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L16ab98.  v0:= v0 + 1;
  #L16ab9c.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int` := v0;
  #Try_start0.  
  #L16aba0.  v0:= new `com.j256.ormlite.dao.EagerForeignCollection`;
  #L16aba4.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16aba8.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16abac.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L16abb2.  v5:= temp @kind object;
  #L16abb4.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16abb8.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L16abbe.  v6:= temp;
  #L16abc0.  v2:= v9 @kind object;
  #L16abc2.  v3:= v10 @kind object;
  #L16abc4.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #Try_end0.  
  #L16abca.  v1:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L16abce.  v1:= v1 + -1;
  #L16abd2.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int` := v1;
  #L16abd6.  goto L16aa9c;
  #L16abda.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L16abdc.  v1:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L16abe0.  v1:= v1 + -1;
  #L16abe4.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int` := v1;
  #L16abe8.  throw v0;
  #L16abea.  v7:= v0 @kind object;
  #L16abec.  goto L16ab44;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L16abda;
}
procedure `void` `configDaoInformation`(`com.j256.ormlite.field.FieldType` v10 @kind this, `com.j256.ormlite.support.ConnectionSource` v11 @kind object, `java.lang.Class` v12 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.configDaoInformation:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L16ac0c.  v8:= 0I;
  #L16ac0e.  v4:= 0I;
  #L16ac10.  v0:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16ac14.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16ac1a.  v5:= temp @kind object;
  #L16ac1c.  call temp:= `getDatabaseType`(v11) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L16ac22.  v6:= temp @kind object;
  #L16ac24.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16ac28.  call temp:= `getForeignColumnName`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignColumnName:()Ljava/lang/String;` @kind virtual;
  #L16ac2e.  v7:= temp @kind object;
  #L16ac30.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16ac34.  call temp:= `isForeignAutoRefresh`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L16ac3a.  v0:= temp;
  #L16ac3c.  if v0 != 0 then goto L16ac44;
  #L16ac40.  if v7 == 0 then goto L16ad76;
  #L16ac44.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16ac48.  call temp:= `getForeignTableConfig`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignTableConfig:()Lcom/j256/ormlite/table/DatabaseTableConfig;` @kind virtual;
  #L16ac4e.  v0:= temp @kind object;
  #L16ac50.  if v0 != 0 then goto L16acb2;
  #L16ac54.  call temp:= `createDao`(v11, v5) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L16ac5a.  v0:= temp @kind object;
  #L16ac5c.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L16ac60.  call temp:= `getTableInfo`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L16ac66.  v1:= temp @kind object;
  #L16ac68.  call temp:= `getIdField`(v1) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16ac6e.  v3:= temp @kind object;
  #L16ac70.  if v3 != 0 then goto L16acce;
  #L16ac74.  v0:= new `java.lang.IllegalArgumentException`;
  #L16ac78.  v1:= new `java.lang.StringBuilder`;
  #L16ac7c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16ac82.  v2:= "Foreign field " @kind object;
  #L16ac86.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ac8c.  v1:= temp @kind object;
  #L16ac8e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ac94.  v1:= temp @kind object;
  #L16ac96.  v2:= " does not have id field" @kind object;
  #L16ac9a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16aca0.  v1:= temp @kind object;
  #L16aca2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16aca8.  v1:= temp @kind object;
  #L16acaa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16acb0.  throw v0;
  #L16acb2.  call `extractFieldTypes`(v0, v11) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;)V` @kind virtual;
  #L16acb8.  call temp:= `createDao`(v11, v0) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Lcom/j256/ormlite/table/DatabaseTableConfig;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L16acbe.  v0:= temp @kind object;
  #L16acc0.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L16acc4.  call temp:= `getTableInfo`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L16acca.  v1:= temp @kind object;
  #L16accc.  goto L16ac68;
  #L16acce.  if v7 != 0 then goto L16ad18;
  #L16acd2.  v2:= v3 @kind object;
  #L16acd4.  call temp:= `build`(v6, v1, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.build:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;` @kind static;
  #L16acda.  v5:= temp @kind object;
  #L16acdc.  v9:= v5 @kind object;
  #L16acde.  v5:= v1 @kind object;
  #L16ace0.  v1:= v0 @kind object;
  #L16ace2.  v0:= v9 @kind object;
  #L16ace4.  v10.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` := v0 @kind object;
  #L16ace8.  v10.`com.j256.ormlite.field.FieldType.foreignTableInfo` @type ^`com.j256.ormlite.table.TableInfo` := v5 @kind object;
  #L16acec.  v10.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` := v4 @kind object;
  #L16acf0.  v10.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` := v1 @kind object;
  #L16acf4.  v10.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` := v3 @kind object;
  #L16acf8.  v10.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` := v2 @kind object;
  #L16acfc.  v0:= v10.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16ad00.  if v0 == 0 then goto L16ad16;
  #L16ad04.  v0:= v10.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16ad08.  call temp:= `getDataPersister`(v0) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L16ad0e.  v0:= temp @kind object;
  #L16ad10.  call `assignDataType`(v10, v6, v0) @signature `Lcom/j256/ormlite/field/FieldType;.assignDataType:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/DataPersister;)V` @kind direct;
  #L16ad16.  return @kind void;
  #L16ad18.  call temp:= `getFieldTypeByColumnName`(v1, v7) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypeByColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16ad1e.  v2:= temp @kind object;
  #L16ad20.  if v2 != 0 then goto L16acd4;
  #L16ad24.  v0:= new `java.lang.IllegalArgumentException`;
  #L16ad28.  v1:= new `java.lang.StringBuilder`;
  #L16ad2c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16ad32.  v2:= "Foreign field " @kind object;
  #L16ad36.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ad3c.  v1:= temp @kind object;
  #L16ad3e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ad44.  v1:= temp @kind object;
  #L16ad46.  v2:= " does not have field named '" @kind object;
  #L16ad4a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ad50.  v1:= temp @kind object;
  #L16ad52.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ad58.  v1:= temp @kind object;
  #L16ad5a.  v2:= "'" @kind object;
  #L16ad5e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ad64.  v1:= temp @kind object;
  #L16ad66.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16ad6c.  v1:= temp @kind object;
  #L16ad6e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16ad74.  throw v0;
  #L16ad76.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16ad7a.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L16ad80.  v0:= temp;
  #L16ad82.  if v0 == 0 then goto L16aefc;
  #L16ad86.  v0:= v10.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L16ad8a.  if v0 == 0 then goto L16adf0;
  #L16ad8e.  v0:= v10.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L16ad92.  call temp:= `isPrimitive`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L16ad98.  v0:= temp;
  #L16ad9a.  if v0 == 0 then goto L16adf0;
  #L16ad9e.  v0:= new `java.lang.IllegalArgumentException`;
  #L16ada2.  v1:= new `java.lang.StringBuilder`;
  #L16ada6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16adac.  v2:= "Field " @kind object;
  #L16adb0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16adb6.  v1:= temp @kind object;
  #L16adb8.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16adbe.  v1:= temp @kind object;
  #L16adc0.  v2:= " is a primitive class " @kind object;
  #L16adc4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16adca.  v1:= temp @kind object;
  #L16adcc.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16add2.  v1:= temp @kind object;
  #L16add4.  v2:= " but marked as foreign" @kind object;
  #L16add8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16adde.  v1:= temp @kind object;
  #L16ade0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16ade6.  v1:= temp @kind object;
  #L16ade8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16adee.  throw v0;
  #L16adf0.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16adf4.  call temp:= `getForeignTableConfig`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignTableConfig:()Lcom/j256/ormlite/table/DatabaseTableConfig;` @kind virtual;
  #L16adfa.  v0:= temp @kind object;
  #L16adfc.  if v0 == 0 then goto L16ae64;
  #L16ae00.  call `extractFieldTypes`(v0, v11) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;)V` @kind virtual;
  #L16ae06.  call temp:= `createDao`(v11, v0) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Lcom/j256/ormlite/table/DatabaseTableConfig;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L16ae0c.  v0:= temp @kind object;
  #L16ae0e.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L16ae12.  call temp:= `getTableInfo`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L16ae18.  v1:= temp @kind object;
  #L16ae1a.  call temp:= `getIdField`(v1) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16ae20.  v2:= temp @kind object;
  #L16ae22.  if v2 != 0 then goto L16ae72;
  #L16ae26.  v0:= new `java.lang.IllegalArgumentException`;
  #L16ae2a.  v1:= new `java.lang.StringBuilder`;
  #L16ae2e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16ae34.  v2:= "Foreign field " @kind object;
  #L16ae38.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ae3e.  v1:= temp @kind object;
  #L16ae40.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ae46.  v1:= temp @kind object;
  #L16ae48.  v2:= " does not have id field" @kind object;
  #L16ae4c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ae52.  v1:= temp @kind object;
  #L16ae54.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16ae5a.  v1:= temp @kind object;
  #L16ae5c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16ae62.  throw v0;
  #L16ae64.  call temp:= `createDao`(v11, v5) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L16ae6a.  v0:= temp @kind object;
  #L16ae6c.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L16ae70.  goto L16ae12;
  #L16ae72.  call temp:= `isForeignAutoCreate`(v10) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignAutoCreate:()Z` @kind virtual;
  #L16ae78.  v3:= temp;
  #L16ae7a.  if v3 == 0 then goto L16aef0;
  #L16ae7e.  call temp:= `isGeneratedId`(v2) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L16ae84.  v3:= temp;
  #L16ae86.  if v3 != 0 then goto L16aef0;
  #L16ae8a.  v0:= new `java.lang.IllegalArgumentException`;
  #L16ae8e.  v1:= new `java.lang.StringBuilder`;
  #L16ae92.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16ae98.  v2:= "Field " @kind object;
  #L16ae9c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16aea2.  v1:= temp @kind object;
  #L16aea4.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16aea8.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16aeae.  v2:= temp @kind object;
  #L16aeb0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16aeb6.  v1:= temp @kind object;
  #L16aeb8.  v2:= ", if foreignAutoCreate = true then class " @kind object;
  #L16aebc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16aec2.  v1:= temp @kind object;
  #L16aec4.  call temp:= `getSimpleName`(v5) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L16aeca.  v2:= temp @kind object;
  #L16aecc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16aed2.  v1:= temp @kind object;
  #L16aed4.  v2:= " must have id field with generatedId = true" @kind object;
  #L16aed8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16aede.  v1:= temp @kind object;
  #L16aee0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16aee6.  v1:= temp @kind object;
  #L16aee8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16aeee.  throw v0;
  #L16aef0.  v3:= v2 @kind object;
  #L16aef2.  v5:= v1 @kind object;
  #L16aef4.  v1:= v0 @kind object;
  #L16aef6.  v0:= v4 @kind object;
  #L16aef8.  goto L16ace4;
  #L16aefc.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16af00.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L16af06.  v0:= temp;
  #L16af08.  if v0 == 0 then goto L16b114;
  #L16af0c.  v0:= constclass @type ^`java.util.Collection` @kind object;
  #L16af10.  if v5 == v0 then goto L16af8e;
  #L16af14.  v0:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L16af18.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L16af1e.  v0:= temp;
  #L16af20.  if v0 != 0 then goto L16af8e;
  #L16af24.  v0:= new `java.sql.SQLException`;
  #L16af28.  v1:= new `java.lang.StringBuilder`;
  #L16af2c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16af32.  v2:= "Field class for '" @kind object;
  #L16af36.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16af3c.  v1:= temp @kind object;
  #L16af3e.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16af42.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16af48.  v2:= temp @kind object;
  #L16af4a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16af50.  v1:= temp @kind object;
  #L16af52.  v2:= "' must be of class " @kind object;
  #L16af56.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16af5c.  v1:= temp @kind object;
  #L16af5e.  v2:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L16af62.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L16af68.  v2:= temp @kind object;
  #L16af6a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16af70.  v1:= temp @kind object;
  #L16af72.  v2:= " or Collection." @kind object;
  #L16af76.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16af7c.  v1:= temp @kind object;
  #L16af7e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16af84.  v1:= temp @kind object;
  #L16af86.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16af8c.  throw v0;
  #L16af8e.  v0:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16af92.  call temp:= `getGenericType`(v0) @signature `Ljava/lang/reflect/Field;.getGenericType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L16af98.  v0:= temp @kind object;
  #L16af9a.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L16af9e.  if v1 != 0 then goto L16afec;
  #L16afa2.  v0:= new `java.sql.SQLException`;
  #L16afa6.  v1:= new `java.lang.StringBuilder`;
  #L16afaa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16afb0.  v2:= "Field class for '" @kind object;
  #L16afb4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16afba.  v1:= temp @kind object;
  #L16afbc.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16afc0.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16afc6.  v2:= temp @kind object;
  #L16afc8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16afce.  v1:= temp @kind object;
  #L16afd0.  v2:= "' must be a parameterized Collection." @kind object;
  #L16afd4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16afda.  v1:= temp @kind object;
  #L16afdc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16afe2.  v1:= temp @kind object;
  #L16afe4.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16afea.  throw v0;
  #L16afec.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L16aff0.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L16aff6.  v0:= temp @kind object;
  #L16aff8.  v1:= length @variable v0;
  #L16affa.  if v1 != 0 then goto L16b048;
  #L16affe.  v0:= new `java.sql.SQLException`;
  #L16b002.  v1:= new `java.lang.StringBuilder`;
  #L16b006.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16b00c.  v2:= "Field class for '" @kind object;
  #L16b010.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16b016.  v1:= temp @kind object;
  #L16b018.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b01c.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16b022.  v2:= temp @kind object;
  #L16b024.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16b02a.  v1:= temp @kind object;
  #L16b02c.  v2:= "' must be a parameterized Collection with at least 1 type." @kind object;
  #L16b030.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16b036.  v1:= temp @kind object;
  #L16b038.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16b03e.  v1:= temp @kind object;
  #L16b040.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16b046.  throw v0;
  #L16b048.  v1:= v0[v8] @kind object;
  #L16b04c.  v1:= instanceof @variable v1 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L16b050.  if v1 == 0 then goto L16b068;
  #L16b054.  call temp:= `getGenericSuperclass`(v12) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L16b05a.  v0:= temp @kind object;
  #L16b05c.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L16b060.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L16b066.  v0:= temp @kind object;
  #L16b068.  v1:= v0[v8] @kind object;
  #L16b06c.  v1:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L16b070.  if v1 != 0 then goto L16b0ca;
  #L16b074.  v1:= new `java.sql.SQLException`;
  #L16b078.  v2:= new `java.lang.StringBuilder`;
  #L16b07c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16b082.  v3:= "Field class for '" @kind object;
  #L16b086.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16b08c.  v2:= temp @kind object;
  #L16b08e.  v3:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b092.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16b098.  v3:= temp @kind object;
  #L16b09a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16b0a0.  v2:= temp @kind object;
  #L16b0a2.  v3:= "' must be a parameterized Collection whose generic argument is an entity class not: " @kind object;
  #L16b0a6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16b0ac.  v2:= temp @kind object;
  #L16b0ae.  v0:= v0[v8] @kind object;
  #L16b0b2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16b0b8.  v0:= temp @kind object;
  #L16b0ba.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16b0c0.  v0:= temp @kind object;
  #L16b0c2.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16b0c8.  throw v1;
  #L16b0ca.  v0:= v0[v8] @kind object;
  #L16b0ce.  v0:= (`java.lang.Class`) v0 @kind object;
  #L16b0d2.  v1:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b0d6.  call temp:= `getForeignTableConfig`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignTableConfig:()Lcom/j256/ormlite/table/DatabaseTableConfig;` @kind virtual;
  #L16b0dc.  v1:= temp @kind object;
  #L16b0de.  if v1 != 0 then goto L16b106;
  #L16b0e2.  call temp:= `createDao`(v11, v0) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L16b0e8.  v1:= temp @kind object;
  #L16b0ea.  v1:= (`com.j256.ormlite.dao.BaseDaoImpl`) v1 @kind object;
  #L16b0ee.  call temp:= `findForeignFieldType`(v10, v0, v12, v1) @signature `Lcom/j256/ormlite/field/FieldType;.findForeignFieldType:(Ljava/lang/Class;Ljava/lang/Class;Lcom/j256/ormlite/dao/BaseDaoImpl;)Lcom/j256/ormlite/field/FieldType;` @kind direct;
  #L16b0f4.  v0:= temp @kind object;
  #L16b0f6.  v2:= v4 @kind object;
  #L16b0f8.  v3:= v4 @kind object;
  #L16b0fa.  v5:= v4 @kind object;
  #L16b0fc.  v9:= v0 @kind object;
  #L16b0fe.  v0:= v4 @kind object;
  #L16b100.  v4:= v9 @kind object;
  #L16b102.  goto L16ace4;
  #L16b106.  call temp:= `createDao`(v11, v1) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Lcom/j256/ormlite/table/DatabaseTableConfig;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L16b10c.  v1:= temp @kind object;
  #L16b10e.  v1:= (`com.j256.ormlite.dao.BaseDaoImpl`) v1 @kind object;
  #L16b112.  goto L16b0ee;
  #L16b114.  v0:= v4 @kind object;
  #L16b116.  v1:= v4 @kind object;
  #L16b118.  v2:= v4 @kind object;
  #L16b11a.  v3:= v4 @kind object;
  #L16b11c.  v5:= v4 @kind object;
  #L16b11e.  goto L16ace4;
}
procedure `java.lang.Object` `convertJavaFieldToSqlArgValue`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b134.  if v2 != 0 then goto L16b13c;
  #L16b138.  v0:= 0I;
  #L16b13a.  return v0 @kind object;
  #L16b13c.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L16b140.  call temp:= `javaToSqlArg`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/FieldConverter;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L16b146.  v0:= temp @kind object;
  #L16b148.  goto L16b13a;
}
procedure `java.lang.Object` `convertStringToJavaField`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lcom/j256/ormlite/field/FieldType;.convertStringToJavaField:(Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b15c.  if v2 != 0 then goto L16b164;
  #L16b160.  v0:= 0I;
  #L16b162.  return v0 @kind object;
  #L16b164.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L16b168.  call temp:= `resultStringToJava`(v0, v1, v2, v3) @signature `Lcom/j256/ormlite/field/FieldConverter;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @kind interface;
  #L16b16e.  v0:= temp @kind object;
  #L16b170.  goto L16b162;
}
procedure `int` `createWithForeignDao`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createWithForeignDao:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b184.  v0:= v1.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L16b188.  call temp:= `create`(v0, v2) @signature `Lcom/j256/ormlite/dao/Dao;.create:(Ljava/lang/Object;)I` @kind interface;
  #L16b18e.  v0:= temp;
  #L16b190.  return v0;
}
procedure `boolean` `equals`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16b1a4.  v0:= 0I;
  #L16b1a6.  if v4 == 0 then goto L16b1be;
  #L16b1aa.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L16b1b0.  v1:= temp @kind object;
  #L16b1b2.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L16b1b8.  v2:= temp @kind object;
  #L16b1ba.  if v1 == v2 then goto L16b1c0;
  #L16b1be.  return v0;
  #L16b1c0.  v4:= (`com.j256.ormlite.field.FieldType`) v4 @kind object;
  #L16b1c4.  v1:= v3.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b1c8.  v2:= v4.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b1cc.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/reflect/Field;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L16b1d2.  v1:= temp;
  #L16b1d4.  if v1 == 0 then goto L16b1be;
  #L16b1d8.  v1:= v3.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L16b1dc.  if v1 != 0 then goto L16b1ec;
  #L16b1e0.  v1:= v4.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L16b1e4.  if v1 != 0 then goto L16b1be;
  #L16b1e8.  v0:= 1I;
  #L16b1ea.  goto L16b1be;
  #L16b1ec.  v1:= v3.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L16b1f0.  v2:= v4.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L16b1f4.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L16b1fa.  v1:= temp;
  #L16b1fc.  if v1 == 0 then goto L16b1be;
  #L16b200.  goto L16b1e8;
}
procedure `java.lang.Object` `extractJavaFieldToSqlArgValue`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b214.  call temp:= `extractJavaFieldValue`(v1, v2) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16b21a.  v0:= temp @kind object;
  #L16b21c.  call temp:= `convertJavaFieldToSqlArgValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16b222.  v0:= temp @kind object;
  #L16b224.  return v0 @kind object;
}
procedure `java.lang.Object` `extractJavaFieldValue`(`com.j256.ormlite.field.FieldType` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16b238.  call temp:= `extractRawJavaFieldValue`(v2, v3) @signature `Lcom/j256/ormlite/field/FieldType;.extractRawJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16b23e.  v0:= temp @kind object;
  #L16b240.  v1:= v2.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16b244.  if v1 == 0 then goto L16b258;
  #L16b248.  if v0 == 0 then goto L16b258;
  #L16b24c.  v1:= v2.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16b250.  call temp:= `extractRawJavaFieldValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.extractRawJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16b256.  v0:= temp @kind object;
  #L16b258.  return v0 @kind object;
}
procedure `java.lang.Object` `extractRawJavaFieldValue`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.extractRawJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16b26c.  v0:= v3.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L16b270.  if v0 != 0 then goto L16b2b4;
  #Try_start0.  
  #L16b274.  v0:= v3.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b278.  call temp:= `get`(v0, v4) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L16b27e.  v0:= temp @kind object;
  #L16b280.  return v0 @kind object;
  #L16b282.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L16b284.  v1:= new `java.lang.StringBuilder`;
  #L16b288.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16b28e.  v2:= "Could not get field value for " @kind object;
  #L16b292.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16b298.  v1:= temp @kind object;
  #L16b29a.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16b2a0.  v1:= temp @kind object;
  #L16b2a2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16b2a8.  v1:= temp @kind object;
  #L16b2aa.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16b2b0.  v0:= temp @kind object;
  #L16b2b2.  throw v0;
  #Try_start1.  
  #L16b2b4.  v0:= v3.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L16b2b8.  v1:= 0I;
  #L16b2ba.  v1:= new `java.lang.Object`[v1];
  #L16b2be.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L16b2c4.  v0:= temp @kind object;
  #L16b2c6.  goto L16b280;
  #L16b2c8.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L16b2ca.  v1:= new `java.lang.StringBuilder`;
  #L16b2ce.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16b2d4.  v2:= "Could not call " @kind object;
  #L16b2d8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16b2de.  v1:= temp @kind object;
  #L16b2e0.  v2:= v3.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L16b2e4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16b2ea.  v1:= temp @kind object;
  #L16b2ec.  v2:= " for " @kind object;
  #L16b2f0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16b2f6.  v1:= temp @kind object;
  #L16b2f8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16b2fe.  v1:= temp @kind object;
  #L16b300.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16b306.  v1:= temp @kind object;
  #L16b308.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16b30e.  v0:= temp @kind object;
  #L16b310.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L16b282;
  catch `java.lang.Exception` @[Try_start1..Try_end1] goto L16b2c8;
}
procedure `java.lang.Object` `generateId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.generateId:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b340.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L16b344.  call temp:= `generateId`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.generateId:()Ljava/lang/Object;` @kind interface;
  #L16b34a.  v0:= temp @kind object;
  #L16b34c.  return v0 @kind object;
}
procedure `java.lang.String` `getColumnDefinition`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnDefinition:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b360.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b364.  call temp:= `getColumnDefinition`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getColumnDefinition:()Ljava/lang/String;` @kind virtual;
  #L16b36a.  v0:= temp @kind object;
  #L16b36c.  return v0 @kind object;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b380.  v0:= v1.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L16b384.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.DataPersister` `getDataPersister`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b398.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L16b39c.  return v0 @kind object;
}
procedure `java.lang.Object` `getDataTypeConfigObj`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b3b0.  v0:= v1.`com.j256.ormlite.field.FieldType.dataTypeConfigObj` @type ^`java.lang.Object` @kind object;
  #L16b3b4.  return v0 @kind object;
}
procedure `java.lang.Object` `getDefaultValue`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getDefaultValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b3c8.  v0:= v1.`com.j256.ormlite.field.FieldType.defaultValue` @type ^`java.lang.Object` @kind object;
  #L16b3cc.  return v0 @kind object;
}
procedure `java.lang.reflect.Field` `getField`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getField:()Ljava/lang/reflect/Field;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b3e0.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b3e4.  return v0 @kind object;
}
procedure `java.lang.String` `getFieldName`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b3f8.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b3fc.  call temp:= `getName`(v0) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16b402.  v0:= temp @kind object;
  #L16b404.  return v0 @kind object;
}
procedure `java.lang.Object` `getFieldValueIfNotDefault`(`com.j256.ormlite.field.FieldType` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldValueIfNotDefault:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16b418.  call temp:= `extractJavaFieldValue`(v2, v3) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16b41e.  v0:= temp @kind object;
  #L16b420.  call temp:= `isFieldValueDefault`(v2, v0) @signature `Lcom/j256/ormlite/field/FieldType;.isFieldValueDefault:(Ljava/lang/Object;)Z` @kind direct;
  #L16b426.  v1:= temp;
  #L16b428.  if v1 == 0 then goto L16b42e;
  #L16b42c.  v0:= 0I;
  #L16b42e.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `getForeignIdField`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignIdField:()Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b440.  v0:= v1.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16b444.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `getForeignRefField`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignRefField:()Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b458.  v0:= v1.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16b45c.  return v0 @kind object;
}
procedure `java.lang.String` `getFormat`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b470.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b474.  call temp:= `getFormat`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L16b47a.  v0:= temp @kind object;
  #L16b47c.  return v0 @kind object;
}
procedure `java.lang.String` `getGeneratedIdSequence`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getGeneratedIdSequence:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b490.  v0:= v1.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` @kind object;
  #L16b494.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getGenericType`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getGenericType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b4a8.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b4ac.  call temp:= `getGenericType`(v0) @signature `Ljava/lang/reflect/Field;.getGenericType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L16b4b2.  v0:= temp @kind object;
  #L16b4b4.  return v0 @kind object;
}
procedure `java.lang.String` `getIndexName`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getIndexName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16b4c8.  v0:= v2.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b4cc.  v1:= v2.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L16b4d0.  call temp:= `getIndexName`(v0, v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getIndexName:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L16b4d6.  v0:= temp @kind object;
  #L16b4d8.  return v0 @kind object;
}
procedure `java.lang.Object` `getJavaDefaultValueDefault`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getJavaDefaultValueDefault:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16b4ec.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b4f0.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b4f6.  v0:= temp @kind object;
  #L16b4f8.  v1:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L16b4fc.  if v0 != v1 then goto L16b50e;
  #L16b500.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BOOLEAN` @type ^`boolean` @kind boolean;
  #L16b504.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L16b50a.  v0:= temp @kind object;
  #L16b50c.  return v0 @kind object;
  #L16b50e.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b512.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b518.  v0:= temp @kind object;
  #L16b51a.  v1:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L16b51e.  if v0 == v1 then goto L16b536;
  #L16b522.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b526.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b52c.  v0:= temp @kind object;
  #L16b52e.  v1:= constclass @type ^`java.lang.Byte` @kind object;
  #L16b532.  if v0 != v1 then goto L16b544;
  #L16b536.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BYTE` @type ^`byte` @kind byte;
  #L16b53a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L16b540.  v0:= temp @kind object;
  #L16b542.  goto L16b50c;
  #L16b544.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b548.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b54e.  v0:= temp @kind object;
  #L16b550.  v1:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L16b554.  if v0 == v1 then goto L16b56c;
  #L16b558.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b55c.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b562.  v0:= temp @kind object;
  #L16b564.  v1:= constclass @type ^`java.lang.Character` @kind object;
  #L16b568.  if v0 != v1 then goto L16b57a;
  #L16b56c.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_CHAR` @type ^`char` @kind char;
  #L16b570.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L16b576.  v0:= temp @kind object;
  #L16b578.  goto L16b50c;
  #L16b57a.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b57e.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b584.  v0:= temp @kind object;
  #L16b586.  v1:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L16b58a.  if v0 == v1 then goto L16b5a2;
  #L16b58e.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b592.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b598.  v0:= temp @kind object;
  #L16b59a.  v1:= constclass @type ^`java.lang.Short` @kind object;
  #L16b59e.  if v0 != v1 then goto L16b5b0;
  #L16b5a2.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_SHORT` @type ^`short` @kind short;
  #L16b5a6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Short;.valueOf:(S)Ljava/lang/Short;` @kind static;
  #L16b5ac.  v0:= temp @kind object;
  #L16b5ae.  goto L16b50c;
  #L16b5b0.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b5b4.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b5ba.  v0:= temp @kind object;
  #L16b5bc.  v1:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L16b5c0.  if v0 == v1 then goto L16b5d8;
  #L16b5c4.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b5c8.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b5ce.  v0:= temp @kind object;
  #L16b5d0.  v1:= constclass @type ^`java.lang.Integer` @kind object;
  #L16b5d4.  if v0 != v1 then goto L16b5e6;
  #L16b5d8.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_INT` @type ^`int`;
  #L16b5dc.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L16b5e2.  v0:= temp @kind object;
  #L16b5e4.  goto L16b50c;
  #L16b5e6.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b5ea.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b5f0.  v0:= temp @kind object;
  #L16b5f2.  v1:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L16b5f6.  if v0 == v1 then goto L16b60e;
  #L16b5fa.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b5fe.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b604.  v0:= temp @kind object;
  #L16b606.  v1:= constclass @type ^`java.lang.Long` @kind object;
  #L16b60a.  if v0 != v1 then goto L16b61e;
  #L16b60e.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_LONG` @type ^`long` @kind wide;
  #L16b612.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L16b618.  v0:= temp @kind object;
  #L16b61a.  goto L16b50c;
  #L16b61e.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b622.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b628.  v0:= temp @kind object;
  #L16b62a.  v1:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L16b62e.  if v0 == v1 then goto L16b646;
  #L16b632.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b636.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b63c.  v0:= temp @kind object;
  #L16b63e.  v1:= constclass @type ^`java.lang.Float` @kind object;
  #L16b642.  if v0 != v1 then goto L16b656;
  #L16b646.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_FLOAT` @type ^`float`;
  #L16b64a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L16b650.  v0:= temp @kind object;
  #L16b652.  goto L16b50c;
  #L16b656.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b65a.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b660.  v0:= temp @kind object;
  #L16b662.  v1:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L16b666.  if v0 == v1 then goto L16b67e;
  #L16b66a.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b66e.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b674.  v0:= temp @kind object;
  #L16b676.  v1:= constclass @type ^`java.lang.Double` @kind object;
  #L16b67a.  if v0 != v1 then goto L16b68e;
  #L16b67e.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_DOUBLE` @type ^`double` @kind wide;
  #L16b682.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L16b688.  v0:= temp @kind object;
  #L16b68a.  goto L16b50c;
  #L16b68e.  v0:= 0I;
  #L16b690.  goto L16b50c;
}
procedure `com.j256.ormlite.field.SqlType` `getSqlType`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b6a4.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L16b6a8.  call temp:= `getSqlType`(v0) @signature `Lcom/j256/ormlite/field/FieldConverter;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L16b6ae.  v0:= temp @kind object;
  #L16b6b0.  return v0 @kind object;
}
procedure `java.lang.String` `getTableName`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getTableName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b6c4.  v0:= v1.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L16b6c8.  return v0 @kind object;
}
procedure `java.lang.Class` `getType`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b6dc.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b6e0.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16b6e6.  v0:= temp @kind object;
  #L16b6e8.  return v0 @kind object;
}
procedure `java.lang.String` `getUniqueIndexName`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getUniqueIndexName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16b6fc.  v0:= v2.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b700.  v1:= v2.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L16b704.  call temp:= `getUniqueIndexName`(v0, v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getUniqueIndexName:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L16b70a.  v0:= temp @kind object;
  #L16b70c.  return v0 @kind object;
}
procedure `java.lang.Enum` `getUnknownEnumVal`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getUnknownEnumVal:()Ljava/lang/Enum;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b720.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b724.  call temp:= `getUnknownEnumValue`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getUnknownEnumValue:()Ljava/lang/Enum;` @kind virtual;
  #L16b72a.  v0:= temp @kind object;
  #L16b72c.  return v0 @kind object;
}
procedure `int` `getWidth`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b740.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b744.  call temp:= `getWidth`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getWidth:()I` @kind virtual;
  #L16b74a.  v0:= temp;
  #L16b74c.  return v0;
}
procedure `int` `hashCode`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b760.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16b764.  call temp:= `hashCode`(v0) @signature `Ljava/lang/reflect/Field;.hashCode:()I` @kind virtual;
  #L16b76a.  v0:= temp;
  #L16b76c.  return v0;
}
procedure `boolean` `isAllowGeneratedIdInsert`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isAllowGeneratedIdInsert:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b780.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b784.  call temp:= `isAllowGeneratedIdInsert`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isAllowGeneratedIdInsert:()Z` @kind virtual;
  #L16b78a.  v0:= temp;
  #L16b78c.  return v0;
}
procedure `boolean` `isArgumentHolderRequired`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isArgumentHolderRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b7a0.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L16b7a4.  call temp:= `isArgumentHolderRequired`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isArgumentHolderRequired:()Z` @kind interface;
  #L16b7aa.  v0:= temp;
  #L16b7ac.  return v0;
}
procedure `boolean` `isCanBeNull`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isCanBeNull:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b7c0.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b7c4.  call temp:= `isCanBeNull`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isCanBeNull:()Z` @kind virtual;
  #L16b7ca.  v0:= temp;
  #L16b7cc.  return v0;
}
procedure `boolean` `isComparable`(`com.j256.ormlite.field.FieldType` v3 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isComparable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16b7e0.  v0:= v3.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b7e4.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L16b7ea.  v0:= temp;
  #L16b7ec.  if v0 == 0 then goto L16b7f4;
  #L16b7f0.  v0:= 0I;
  #L16b7f2.  return v0;
  #L16b7f4.  v0:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L16b7f8.  if v0 != 0 then goto L16b82e;
  #L16b7fc.  v0:= new `java.sql.SQLException`;
  #L16b800.  v1:= new `java.lang.StringBuilder`;
  #L16b804.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16b80a.  v2:= "Internal error.  Data-persister is not configured for field.  Please post _full_ exception with associated data objects to mailing list: " @kind object;
  #L16b80e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16b814.  v1:= temp @kind object;
  #L16b816.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16b81c.  v1:= temp @kind object;
  #L16b81e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16b824.  v1:= temp @kind object;
  #L16b826.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16b82c.  throw v0;
  #L16b82e.  v0:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L16b832.  call temp:= `isComparable`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isComparable:()Z` @kind interface;
  #L16b838.  v0:= temp;
  #L16b83a.  goto L16b7f2;
}
procedure `boolean` `isEscapedDefaultValue`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedDefaultValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b84c.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L16b850.  call temp:= `isEscapedDefaultValue`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isEscapedDefaultValue:()Z` @kind interface;
  #L16b856.  v0:= temp;
  #L16b858.  return v0;
}
procedure `boolean` `isEscapedValue`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b86c.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L16b870.  call temp:= `isEscapedValue`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isEscapedValue:()Z` @kind interface;
  #L16b876.  v0:= temp;
  #L16b878.  return v0;
}
procedure `boolean` `isForeign`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b88c.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b890.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L16b896.  v0:= temp;
  #L16b898.  return v0;
}
procedure `boolean` `isForeignAutoCreate`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignAutoCreate:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b8ac.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b8b0.  call temp:= `isForeignAutoCreate`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoCreate:()Z` @kind virtual;
  #L16b8b6.  v0:= temp;
  #L16b8b8.  return v0;
}
procedure `boolean` `isForeignCollection`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b8cc.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b8d0.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L16b8d6.  v0:= temp;
  #L16b8d8.  return v0;
}
procedure `boolean` `isGeneratedId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b8ec.  v0:= v1.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` @kind boolean;
  #L16b8f0.  return v0;
}
procedure `boolean` `isGeneratedIdSequence`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedIdSequence:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b904.  v0:= v1.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` @kind object;
  #L16b908.  if v0 == 0 then goto L16b910;
  #L16b90c.  v0:= 1I;
  #L16b90e.  return v0;
  #L16b910.  v0:= 0I;
  #L16b912.  goto L16b90e;
}
procedure `boolean` `isId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b924.  v0:= v1.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` @kind boolean;
  #L16b928.  return v0;
}
procedure `boolean` `isObjectsFieldValueDefault`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.isObjectsFieldValueDefault:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b93c.  call temp:= `extractJavaFieldValue`(v1, v2) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16b942.  v0:= temp @kind object;
  #L16b944.  call temp:= `isFieldValueDefault`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.isFieldValueDefault:(Ljava/lang/Object;)Z` @kind direct;
  #L16b94a.  v0:= temp;
  #L16b94c.  return v0;
}
procedure `boolean` `isReadOnly`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isReadOnly:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b960.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b964.  call temp:= `isReadOnly`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isReadOnly:()Z` @kind virtual;
  #L16b96a.  v0:= temp;
  #L16b96c.  return v0;
}
procedure `boolean` `isSelfGeneratedId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b980.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L16b984.  call temp:= `isSelfGeneratedId`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isSelfGeneratedId:()Z` @kind interface;
  #L16b98a.  v0:= temp;
  #L16b98c.  return v0;
}
procedure `boolean` `isUnique`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isUnique:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b9a0.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b9a4.  call temp:= `isUnique`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isUnique:()Z` @kind virtual;
  #L16b9aa.  v0:= temp;
  #L16b9ac.  return v0;
}
procedure `boolean` `isUniqueCombo`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isUniqueCombo:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b9c0.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b9c4.  call temp:= `isUniqueCombo`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isUniqueCombo:()Z` @kind virtual;
  #L16b9ca.  v0:= temp;
  #L16b9cc.  return v0;
}
procedure `boolean` `isVersion`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16b9e0.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16b9e4.  call temp:= `isVersion`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isVersion:()Z` @kind virtual;
  #L16b9ea.  v0:= temp;
  #L16b9ec.  return v0;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16ba00.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L16ba04.  if v0 != 0 then goto L16ba0c;
  #L16ba08.  v0:= 0I;
  #L16ba0a.  return v0 @kind object;
  #L16ba0c.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L16ba10.  call temp:= `moveToNextValue`(v0, v2) @signature `Lcom/j256/ormlite/field/DataPersister;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L16ba16.  v0:= temp @kind object;
  #L16ba18.  goto L16ba0a;
}
procedure `java.lang.Object` `resultToJava`(`com.j256.ormlite.field.FieldType` v4 @kind this, `com.j256.ormlite.support.DatabaseResults` v5 @kind object, `java.util.Map` v6 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.resultToJava:(Lcom/j256/ormlite/support/DatabaseResults;Ljava/util/Map;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16ba2c.  v1:= 0I;
  #L16ba2e.  v0:= v4.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L16ba32.  call temp:= `get`(v6, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L16ba38.  v0:= temp @kind object;
  #L16ba3a.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L16ba3e.  if v0 != 0 then goto L16ba60;
  #L16ba42.  v0:= v4.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L16ba46.  call temp:= `findColumn`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.findColumn:(Ljava/lang/String;)I` @kind interface;
  #L16ba4c.  v0:= temp;
  #L16ba4e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L16ba54.  v0:= temp @kind object;
  #L16ba56.  v2:= v4.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L16ba5a.  call temp:= `put`(v6, v2, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L16ba60.  v2:= v4.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L16ba64.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L16ba6a.  v3:= temp;
  #L16ba6c.  call temp:= `resultToJava`(v2, v4, v5, v3) @signature `Lcom/j256/ormlite/field/FieldConverter;.resultToJava:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @kind interface;
  #L16ba72.  v2:= temp @kind object;
  #L16ba74.  v3:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16ba78.  call temp:= `isForeign`(v3) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L16ba7e.  v3:= temp;
  #L16ba80.  if v3 == 0 then goto L16ba9c;
  #L16ba84.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L16ba8a.  v0:= temp;
  #L16ba8c.  call temp:= `wasNull`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.wasNull:(I)Z` @kind interface;
  #L16ba92.  v0:= temp;
  #L16ba94.  if v0 == 0 then goto L16bb42;
  #L16ba98.  v0:= v1 @kind object;
  #L16ba9a.  return v0 @kind object;
  #L16ba9c.  v3:= v4.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L16baa0.  call temp:= `isPrimitive`(v3) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L16baa6.  v3:= temp;
  #L16baa8.  if v3 == 0 then goto L16bb1a;
  #L16baac.  v1:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16bab0.  call temp:= `isThrowIfNull`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isThrowIfNull:()Z` @kind virtual;
  #L16bab6.  v1:= temp;
  #L16bab8.  if v1 == 0 then goto L16bb42;
  #L16babc.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L16bac2.  v0:= temp;
  #L16bac4.  call temp:= `wasNull`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.wasNull:(I)Z` @kind interface;
  #L16baca.  v0:= temp;
  #L16bacc.  if v0 == 0 then goto L16bb42;
  #L16bad0.  v0:= new `java.sql.SQLException`;
  #L16bad4.  v1:= new `java.lang.StringBuilder`;
  #L16bad8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16bade.  v2:= "Results value for primitive field '" @kind object;
  #L16bae2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16bae8.  v1:= temp @kind object;
  #L16baea.  v2:= v4.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16baee.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16baf4.  v2:= temp @kind object;
  #L16baf6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16bafc.  v1:= temp @kind object;
  #L16bafe.  v2:= "' was an invalid null value" @kind object;
  #L16bb02.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16bb08.  v1:= temp @kind object;
  #L16bb0a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16bb10.  v1:= temp @kind object;
  #L16bb12.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16bb18.  throw v0;
  #L16bb1a.  v3:= v4.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L16bb1e.  call temp:= `isStreamType`(v3) @signature `Lcom/j256/ormlite/field/FieldConverter;.isStreamType:()Z` @kind interface;
  #L16bb24.  v3:= temp;
  #L16bb26.  if v3 != 0 then goto L16bb42;
  #L16bb2a.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L16bb30.  v0:= temp;
  #L16bb32.  call temp:= `wasNull`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.wasNull:(I)Z` @kind interface;
  #L16bb38.  v0:= temp;
  #L16bb3a.  if v0 == 0 then goto L16bb42;
  #L16bb3e.  v0:= v1 @kind object;
  #L16bb40.  goto L16ba9a;
  #L16bb42.  v0:= v2 @kind object;
  #L16bb44.  goto L16ba9a;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16bb58.  v0:= new `java.lang.StringBuilder`;
  #L16bb5c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16bb62.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L16bb68.  v1:= temp @kind object;
  #L16bb6a.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L16bb70.  v1:= temp @kind object;
  #L16bb72.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16bb78.  v0:= temp @kind object;
  #L16bb7a.  v1:= ":name=" @kind object;
  #L16bb7e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16bb84.  v0:= temp @kind object;
  #L16bb86.  v1:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16bb8a.  call temp:= `getName`(v1) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L16bb90.  v1:= temp @kind object;
  #L16bb92.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16bb98.  v0:= temp @kind object;
  #L16bb9a.  v1:= ",class=" @kind object;
  #L16bb9e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16bba4.  v0:= temp @kind object;
  #L16bba6.  v1:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16bbaa.  call temp:= `getDeclaringClass`(v1) @signature `Ljava/lang/reflect/Field;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L16bbb0.  v1:= temp @kind object;
  #L16bbb2.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L16bbb8.  v1:= temp @kind object;
  #L16bbba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16bbc0.  v0:= temp @kind object;
  #L16bbc2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16bbc8.  v0:= temp @kind object;
  #L16bbca.  return v0 @kind object;
}
