record `com.j256.ormlite.stmt.mapped.BaseMappedQuery` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.stmt.mapped.BaseMappedStatement` @kind class, `com.j256.ormlite.stmt.GenericRowMapper` @kind interface {
  `java.util.Map` `com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.stmt.mapped.BaseMappedQuery.parentId` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType`[] `com.j256.ormlite.stmt.mapped.BaseMappedQuery.resultsFieldTypes` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.mapped.BaseMappedQuery` v1 @kind this, `com.j256.ormlite.table.TableInfo` v2 @kind object, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType`[] v4 @kind object, `com.j256.ormlite.field.FieldType`[] v5 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L177464.  v0:= 0I;
  #L177466.  call `<init>`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L17746c.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @type ^`java.util.Map` := v0 @kind object;
  #L177470.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @type ^`java.lang.Object` := v0 @kind object;
  #L177474.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parentId` @type ^`java.lang.Object` := v0 @kind object;
  #L177478.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.resultsFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] := v5 @kind object;
  #L17747c.  return @kind void;
}
procedure `java.lang.Object` `mapRow`(`com.j256.ormlite.stmt.mapped.BaseMappedQuery` v14 @kind this, `com.j256.ormlite.support.DatabaseResults` v15 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.mapRow:(Lcom/j256/ormlite/support/DatabaseResults;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L177490.  v2:= 1I;
  #L177492.  v6:= 0I;
  #L177494.  v0:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @type ^`java.util.Map` @kind object;
  #L177498.  if v0 != 0 then goto L1774d2;
  #L17749c.  v0:= new `java.util.HashMap`;
  #L1774a0.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L1774a6.  call temp:= `getObjectCacheForRetrieve`(v15) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getObjectCacheForRetrieve:()Lcom/j256/ormlite/dao/ObjectCache;` @kind interface;
  #L1774ac.  v8:= temp @kind object;
  #L1774ae.  if v8 == 0 then goto L1774d8;
  #L1774b2.  v1:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1774b6.  call temp:= `resultToJava`(v1, v15, v0) @signature `Lcom/j256/ormlite/field/FieldType;.resultToJava:(Lcom/j256/ormlite/support/DatabaseResults;Ljava/util/Map;)Ljava/lang/Object;` @kind virtual;
  #L1774bc.  v1:= temp @kind object;
  #L1774be.  v3:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.clazz` @type ^`java.lang.Class` @kind object;
  #L1774c2.  call temp:= `get`(v8, v3, v1) @signature `Lcom/j256/ormlite/dao/ObjectCache;.get:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1774c8.  v1:= temp @kind object;
  #L1774ca.  if v1 == 0 then goto L1774d8;
  #L1774ce.  v0:= v1 @kind object;
  #L1774d0.  return v0 @kind object;
  #L1774d2.  v0:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @type ^`java.util.Map` @kind object;
  #L1774d6.  goto L1774a6;
  #L1774d8.  v1:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L1774dc.  call temp:= `createObject`(v1) @signature `Lcom/j256/ormlite/table/TableInfo;.createObject:()Ljava/lang/Object;` @kind virtual;
  #L1774e2.  v5:= temp @kind object;
  #L1774e4.  v3:= 0I;
  #L1774e6.  v9:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.resultsFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L1774ea.  v10:= length @variable v9;
  #L1774ec.  v7:= v6;
  #L1774ee.  v1:= v6;
  #L1774f0.  if v7 >= v10 then goto L177574;
  #L1774f4.  v11:= v9[v7] @kind object;
  #L1774f8.  call temp:= `isForeignCollection`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L1774fe.  v4:= temp;
  #L177500.  if v4 == 0 then goto L17750e;
  #L177504.  v1:= v2;
  #L177506.  v4:= v7 + 1;
  #L17750a.  v7:= v4;
  #L17750c.  goto L1774f0;
  #L17750e.  call temp:= `resultToJava`(v11, v15, v0) @signature `Lcom/j256/ormlite/field/FieldType;.resultToJava:(Lcom/j256/ormlite/support/DatabaseResults;Ljava/util/Map;)Ljava/lang/Object;` @kind virtual;
  #L177514.  v4:= temp @kind object;
  #L177516.  if v4 == 0 then goto L17756c;
  #L17751a.  v12:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @type ^`java.lang.Object` @kind object;
  #L17751e.  if v12 == 0 then goto L17756c;
  #L177522.  call temp:= `getField`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getField:()Ljava/lang/reflect/Field;` @kind virtual;
  #L177528.  v12:= temp @kind object;
  #L17752a.  call temp:= `getType`(v12) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L177530.  v12:= temp @kind object;
  #L177532.  v13:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @type ^`java.lang.Object` @kind object;
  #L177536.  call temp:= `getClass`(v13) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L17753c.  v13:= temp @kind object;
  #L17753e.  if v12 != v13 then goto L17756c;
  #L177542.  v12:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parentId` @type ^`java.lang.Object` @kind object;
  #L177546.  call temp:= `equals`(v4, v12) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L17754c.  v12:= temp;
  #L17754e.  if v12 == 0 then goto L17756c;
  #L177552.  v12:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @type ^`java.lang.Object` @kind object;
  #L177556.  call `assignField`(v11, v5, v12, v2, v8) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L17755c.  call temp:= `isId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isId:()Z` @kind virtual;
  #L177562.  v11:= temp;
  #L177564.  if v11 == 0 then goto L177506;
  #L177568.  v3:= v4 @kind object;
  #L17756a.  goto L177506;
  #L17756c.  call `assignField`(v11, v5, v4, v6, v8) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L177572.  goto L17755c;
  #L177574.  if v1 == 0 then goto L1775ac;
  #L177578.  v2:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.resultsFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L17757c.  v4:= length @variable v2;
  #L17757e.  v1:= v6;
  #L177580.  if v1 >= v4 then goto L1775ac;
  #L177584.  v7:= v2[v1] @kind object;
  #L177588.  call temp:= `isForeignCollection`(v7) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L17758e.  v9:= temp;
  #L177590.  if v9 == 0 then goto L1775a6;
  #L177594.  call temp:= `buildForeignCollection`(v7, v5, v3) @signature `Lcom/j256/ormlite/field/FieldType;.buildForeignCollection:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/j256/ormlite/dao/BaseForeignCollection;` @kind virtual;
  #L17759a.  v9:= temp @kind object;
  #L17759c.  if v9 == 0 then goto L1775a6;
  #L1775a0.  call `assignField`(v7, v5, v9, v6, v8) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L1775a6.  v1:= v1 + 1;
  #L1775aa.  goto L177580;
  #L1775ac.  call temp:= `getObjectCacheForStore`(v15) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getObjectCacheForStore:()Lcom/j256/ormlite/dao/ObjectCache;` @kind interface;
  #L1775b2.  v1:= temp @kind object;
  #L1775b4.  if v1 == 0 then goto L1775c6;
  #L1775b8.  if v3 == 0 then goto L1775c6;
  #L1775bc.  v2:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.clazz` @type ^`java.lang.Class` @kind object;
  #L1775c0.  call `put`(v1, v2, v3, v5) @signature `Lcom/j256/ormlite/dao/ObjectCache;.put:(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L1775c6.  v1:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @type ^`java.util.Map` @kind object;
  #L1775ca.  if v1 != 0 then goto L1775d2;
  #L1775ce.  v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @type ^`java.util.Map` := v0 @kind object;
  #L1775d2.  v0:= v5 @kind object;
  #L1775d4.  goto L1774d0;
}
procedure `void` `setParentInformation`(`com.j256.ormlite.stmt.mapped.BaseMappedQuery` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.setParentInformation:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L1775e8.  v0.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @type ^`java.lang.Object` := v1 @kind object;
  #L1775ec.  v0.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parentId` @type ^`java.lang.Object` := v2 @kind object;
  #L1775f0.  return @kind void;
}
