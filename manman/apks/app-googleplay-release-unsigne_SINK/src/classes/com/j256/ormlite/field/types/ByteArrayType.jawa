record `com.j256.ormlite.field.types.ByteArrayType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `com.j256.ormlite.field.types.ByteArrayType` `@@com.j256.ormlite.field.types.ByteArrayType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L16cea4.  v0:= new `com.j256.ormlite.field.types.ByteArrayType`;
  #L16cea8.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.<init>:()V` @kind direct;
  #L16ceae.  `@@com.j256.ormlite.field.types.ByteArrayType.singleTon` @type ^`com.j256.ormlite.field.types.ByteArrayType` := v0 @kind object;
  #L16ceb2.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.ByteArrayType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L16cec4.  v0:= `@@com.j256.ormlite.field.SqlType.BYTE_ARRAY` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L16cec8.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L16cece.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.ByteArrayType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16cee0.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16cee6.  return @kind void;
}
procedure `com.j256.ormlite.field.types.ByteArrayType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.getSingleton:()Lcom/j256/ormlite/field/types/ByteArrayType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L16cef8.  v0:= `@@com.j256.ormlite.field.types.ByteArrayType.singleTon` @type ^`com.j256.ormlite.field.types.ByteArrayType` @kind object;
  #L16cefc.  return v0 @kind object;
}
procedure `boolean` `dataIsEqual`(`com.j256.ormlite.field.types.ByteArrayType` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.dataIsEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16cf10.  v0:= 0I;
  #L16cf12.  if v2 != 0 then goto L16cf1e;
  #L16cf16.  if v3 != 0 then goto L16cf1c;
  #L16cf1a.  v0:= 1I;
  #L16cf1c.  return v0;
  #L16cf1e.  if v3 == 0 then goto L16cf1c;
  #L16cf22.  v2:= (`byte`[]) v2 @kind object;
  #L16cf26.  v2:= (`byte`[]) v2 @kind object;
  #L16cf2a.  v3:= (`byte`[]) v3 @kind object;
  #L16cf2e.  v3:= (`byte`[]) v3 @kind object;
  #L16cf32.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([B[B)Z` @kind static;
  #L16cf38.  v0:= temp;
  #L16cf3a.  goto L16cf1c;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.ByteArrayType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16cf4c.  v0:= constclass @type ^`byte`[] @kind object;
  #L16cf50.  return v0 @kind object;
}
procedure `boolean` `isArgumentHolderRequired`(`com.j256.ormlite.field.types.ByteArrayType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.isArgumentHolderRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16cf64.  v0:= 1I;
  #L16cf66.  return v0;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.ByteArrayType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16cf78.  if v3 != 0 then goto L16cf80;
  #L16cf7c.  v0:= 0I;
  #L16cf7e.  return v0 @kind object;
  #L16cf80.  call temp:= `getBytes`(v3) @signature `Ljava/lang/String;.getBytes:()[B` @kind virtual;
  #L16cf86.  v0:= temp @kind object;
  #L16cf88.  goto L16cf7e;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.ByteArrayType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16cf9c.  call temp:= `getBytes`(v3) @signature `Ljava/lang/String;.getBytes:()[B` @kind virtual;
  #L16cfa2.  v0:= temp @kind object;
  #L16cfa4.  return v0 @kind object;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.ByteArrayType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16cfb8.  call temp:= `getBytes`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getBytes:(I)[B` @kind interface;
  #L16cfbe.  v0:= temp @kind object;
  #L16cfc0.  v0:= (`byte`[]) v0 @kind object;
  #L16cfc4.  return v0 @kind object;
}
