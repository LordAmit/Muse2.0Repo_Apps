record `com.j256.ormlite.stmt.mapped.MappedPreparedStmt` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.mapped.BaseMappedQuery` @kind class, `com.j256.ormlite.stmt.PreparedDelete` @kind interface, `com.j256.ormlite.stmt.PreparedQuery` @kind interface, `com.j256.ormlite.stmt.PreparedUpdate` @kind interface {
  `com.j256.ormlite.stmt.ArgumentHolder`[] `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.cacheStore` @AccessFlag PRIVATE_FINAL;
  `java.lang.Long` `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.stmt.StatementBuilder$StatementType` `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v0 @kind this, `com.j256.ormlite.table.TableInfo` v1 @kind object, `java.lang.String` v2 @kind object, `com.j256.ormlite.field.FieldType`[] v3 @kind object, `com.j256.ormlite.field.FieldType`[] v4 @kind object, `com.j256.ormlite.stmt.ArgumentHolder`[] v5 @kind object, `java.lang.Long` v6 @kind object, `com.j256.ormlite.stmt.StatementBuilder$StatementType` v7 @kind object, `boolean` v8 ) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/stmt/ArgumentHolder;Ljava/lang/Long;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L178294.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L17829a.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] := v5 @kind object;
  #L17829e.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @type ^`java.lang.Long` := v6 @kind object;
  #L1782a2.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` := v7 @kind object;
  #L1782a6.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.cacheStore` @type ^`boolean` := v8 @kind boolean;
  #L1782aa.  return @kind void;
}
procedure `com.j256.ormlite.support.CompiledStatement` `assignStatementArguments`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v5 @kind this, `com.j256.ormlite.support.CompiledStatement` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.assignStatementArguments:(Lcom/j256/ormlite/support/CompiledStatement;)Lcom/j256/ormlite/support/CompiledStatement;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #Try_start0.  
  #L1782bc.  v0:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @type ^`java.lang.Long` @kind object;
  #L1782c0.  if v0 == 0 then goto L1782d6;
  #L1782c4.  v0:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @type ^`java.lang.Long` @kind object;
  #L1782c8.  call temp:= `intValue`(v0) @signature `Ljava/lang/Long;.intValue:()I` @kind virtual;
  #L1782ce.  v0:= temp;
  #L1782d0.  call `setMaxRows`(v6, v0) @signature `Lcom/j256/ormlite/support/CompiledStatement;.setMaxRows:(I)V` @kind interface;
  #L1782d6.  v0:= 0I;
  #L1782d8.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedPreparedStmt.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L1782dc.  v2:= `@@com.j256.ormlite.logger.Log$Level.TRACE` @type ^`com.j256.ormlite.logger.Log$Level` @kind object;
  #L1782e0.  call temp:= `isLevelEnabled`(v1, v2) @signature `Lcom/j256/ormlite/logger/Logger;.isLevelEnabled:(Lcom/j256/ormlite/logger/Log$Level;)Z` @kind virtual;
  #L1782e6.  v1:= temp;
  #L1782e8.  if v1 == 0 then goto L178300;
  #L1782ec.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L1782f0.  v1:= length @variable v1;
  #L1782f2.  if v1 <= 0 then goto L178300;
  #L1782f6.  v0:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L1782fa.  v0:= length @variable v0;
  #L1782fc.  v0:= new `java.lang.Object`[v0];
  #L178300.  v1:= 0I;
  #L178302.  v2:= v1;
  #L178304.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L178308.  v1:= length @variable v1;
  #L17830a.  if v2 >= v1 then goto L17835a;
  #L17830e.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L178312.  v1:= v1[v2] @kind object;
  #L178316.  call temp:= `getSqlArgValue`(v1) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.getSqlArgValue:()Ljava/lang/Object;` @kind interface;
  #L17831c.  v3:= temp @kind object;
  #L17831e.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L178322.  v1:= v1[v2] @kind object;
  #L178326.  if v1 != 0 then goto L178350;
  #L17832a.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L17832e.  v1:= v1[v2] @kind object;
  #L178332.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L178338.  v1:= temp @kind object;
  #L17833a.  call `setObject`(v6, v2, v3, v1) @signature `Lcom/j256/ormlite/support/CompiledStatement;.setObject:(ILjava/lang/Object;Lcom/j256/ormlite/field/SqlType;)V` @kind interface;
  #L178340.  if v0 == 0 then goto L178348;
  #L178344.  v0[v2]:= v3 @kind object;
  #L178348.  v1:= v2 + 1;
  #L17834c.  v2:= v1;
  #L17834e.  goto L178304;
  #L178350.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L178356.  v1:= temp @kind object;
  #L178358.  goto L17833a;
  #L17835a.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedPreparedStmt.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L17835e.  v2:= "prepared statement '{}' with {} args" @kind object;
  #L178362.  v3:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.statement` @type ^`java.lang.String` @kind object;
  #L178366.  v4:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L17836a.  v4:= length @variable v4;
  #L17836c.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L178372.  v4:= temp @kind object;
  #L178374.  call `debug`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L17837a.  if v0 == 0 then goto L17838c;
  #L17837e.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedPreparedStmt.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L178382.  v2:= "prepared statement arguments: {}" @kind object;
  #L178386.  call `trace`(v1, v2, v0) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #Try_end0.  
  #L17838c.  return v6 @kind object;
  #L17838e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L178390.  v1:= "statement" @kind object;
  #L178394.  call `closeThrowSqlException`(v6, v1) @signature `Lcom/j256/ormlite/misc/IOUtils;.closeThrowSqlException:(Ljava/io/Closeable;Ljava/lang/String;)V` @kind static;
  #L17839a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L17838e;
}
procedure `com.j256.ormlite.support.CompiledStatement` `compile`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v1 @kind this, `com.j256.ormlite.support.DatabaseConnection` v2 @kind object, `com.j256.ormlite.stmt.StatementBuilder$StatementType` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.compile:(Lcom/j256/ormlite/support/DatabaseConnection;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;)Lcom/j256/ormlite/support/CompiledStatement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1783b8.  v0:= -1I;
  #L1783ba.  call temp:= `compile`(v1, v2, v3, v0) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.compile:(Lcom/j256/ormlite/support/DatabaseConnection;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;I)Lcom/j256/ormlite/support/CompiledStatement;` @kind virtual;
  #L1783c0.  v0:= temp @kind object;
  #L1783c2.  return v0 @kind object;
}
procedure `com.j256.ormlite.support.CompiledStatement` `compile`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v6 @kind this, `com.j256.ormlite.support.DatabaseConnection` v7 @kind object, `com.j256.ormlite.stmt.StatementBuilder$StatementType` v8 @kind object, `int` v9 ) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.compile:(Lcom/j256/ormlite/support/DatabaseConnection;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;I)Lcom/j256/ormlite/support/CompiledStatement;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1783d4.  v0:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L1783d8.  if v0 == v8 then goto L178432;
  #L1783dc.  v0:= new `java.sql.SQLException`;
  #L1783e0.  v1:= new `java.lang.StringBuilder`;
  #L1783e4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1783ea.  v2:= "Could not compile this " @kind object;
  #L1783ee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1783f4.  v1:= temp @kind object;
  #L1783f6.  v2:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L1783fa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L178400.  v1:= temp @kind object;
  #L178402.  v2:= " statement since the caller is expecting a " @kind object;
  #L178406.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17840c.  v1:= temp @kind object;
  #L17840e.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L178414.  v1:= temp @kind object;
  #L178416.  v2:= " statement.  Check your QueryBuilder methods." @kind object;
  #L17841a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L178420.  v1:= temp @kind object;
  #L178422.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L178428.  v1:= temp @kind object;
  #L17842a.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L178430.  throw v0;
  #L178432.  v1:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.statement` @type ^`java.lang.String` @kind object;
  #L178436.  v3:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L17843a.  v5:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.cacheStore` @type ^`boolean` @kind boolean;
  #L17843e.  v0:= v7 @kind object;
  #L178440.  v2:= v8 @kind object;
  #L178442.  v4:= v9;
  #L178444.  call temp:= `compileStatement`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/support/DatabaseConnection;.compileStatement:(Ljava/lang/String;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;[Lcom/j256/ormlite/field/FieldType;IZ)Lcom/j256/ormlite/support/CompiledStatement;` @kind interface;
  #L17844a.  v0:= temp @kind object;
  #L17844c.  call temp:= `assignStatementArguments`(v6, v0) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.assignStatementArguments:(Lcom/j256/ormlite/support/CompiledStatement;)Lcom/j256/ormlite/support/CompiledStatement;` @kind direct;
  #L178452.  v0:= temp @kind object;
  #L178454.  return v0 @kind object;
}
procedure `java.lang.String` `getStatement`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.getStatement:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L178468.  v0:= v1.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.statement` @type ^`java.lang.String` @kind object;
  #L17846c.  return v0 @kind object;
}
procedure `com.j256.ormlite.stmt.StatementBuilder$StatementType` `getType`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.getType:()Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L178480.  v0:= v1.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L178484.  return v0 @kind object;
}
procedure `void` `setArgumentHolderValue`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v3 @kind this, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.setArgumentHolderValue:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L178498.  if v4 >= 0 then goto L1784da;
  #L17849c.  v0:= new `java.sql.SQLException`;
  #L1784a0.  v1:= new `java.lang.StringBuilder`;
  #L1784a4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1784aa.  v2:= "argument holder index " @kind object;
  #L1784ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1784b4.  v1:= temp @kind object;
  #L1784b6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1784bc.  v1:= temp @kind object;
  #L1784be.  v2:= " must be >= 0" @kind object;
  #L1784c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1784c8.  v1:= temp @kind object;
  #L1784ca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1784d0.  v1:= temp @kind object;
  #L1784d2.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1784d8.  throw v0;
  #L1784da.  v0:= v3.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L1784de.  v0:= length @variable v0;
  #L1784e0.  if v0 > v4 then goto L17853c;
  #L1784e4.  v0:= new `java.sql.SQLException`;
  #L1784e8.  v1:= new `java.lang.StringBuilder`;
  #L1784ec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1784f2.  v2:= "argument holder index " @kind object;
  #L1784f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1784fc.  v1:= temp @kind object;
  #L1784fe.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L178504.  v1:= temp @kind object;
  #L178506.  v2:= " is not valid, only " @kind object;
  #L17850a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L178510.  v1:= temp @kind object;
  #L178512.  v2:= v3.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L178516.  v2:= length @variable v2;
  #L178518.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L17851e.  v1:= temp @kind object;
  #L178520.  v2:= " in statement (index starts at 0)" @kind object;
  #L178524.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17852a.  v1:= temp @kind object;
  #L17852c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L178532.  v1:= temp @kind object;
  #L178534.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L17853a.  throw v0;
  #L17853c.  v0:= v3.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L178540.  v0:= v0[v4] @kind object;
  #L178544.  call `setValue`(v0, v5) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setValue:(Ljava/lang/Object;)V` @kind interface;
  #L17854a.  return @kind void;
}
