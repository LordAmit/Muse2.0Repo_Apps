record `com.adonai.manman.parser.HtmlEscaper` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`com.adonai.manman.parser.HtmlEscaper` v0 @kind this) @signature `Lcom/adonai/manman/parser/HtmlEscaper;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1447cc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1447d2.  return @kind void;
}
procedure `java.lang.String` `escapeHtml`(`java.lang.CharSequence` v3 @kind object) @signature `Lcom/adonai/manman/parser/HtmlEscaper;.escapeHtml:(Ljava/lang/CharSequence;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1447e4.  v0:= new `java.lang.StringBuilder`;
  #L1447e8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1447ee.  v1:= 0I;
  #L1447f0.  call temp:= `length`(v3) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L1447f6.  v2:= temp;
  #L1447f8.  call `withinStyle`(v0, v3, v1, v2) @signature `Lcom/adonai/manman/parser/HtmlEscaper;.withinStyle:(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;II)V` @kind static;
  #L1447fe.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L144804.  v0:= temp @kind object;
  #L144806.  return v0 @kind object;
}
procedure `void` `withinStyle`(`java.lang.StringBuilder` v8 @kind object, `java.lang.CharSequence` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lcom/adonai/manman/parser/HtmlEscaper;.withinStyle:(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;II)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L144818.  v7:= 57343I;
  #L14481e.  v6:= 55296I;
  #L144824.  v5:= 56320I;
  #L14482a.  v4:= 32I;
  #L14482e.  v0:= v10;
  #L144830.  if v0 >= v11 then goto L144940;
  #L144834.  call temp:= `charAt`(v9, v0) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L14483a.  v1:= temp;
  #L14483c.  v2:= 60I;
  #L144840.  if v1 != v2 then goto L144854;
  #L144844.  v1:= "&lt;" @kind object;
  #L144848.  call temp:= `append`(v8, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14484e.  v0:= v0 + 1;
  #L144852.  goto L144830;
  #L144854.  v2:= 62I;
  #L144858.  if v1 != v2 then goto L144868;
  #L14485c.  v1:= "&gt;" @kind object;
  #L144860.  call temp:= `append`(v8, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144866.  goto L14484e;
  #L144868.  v2:= 38I;
  #L14486c.  if v1 != v2 then goto L14487c;
  #L144870.  v1:= "&amp;" @kind object;
  #L144874.  call temp:= `append`(v8, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14487a.  goto L14484e;
  #L14487c.  if v1 < v6 then goto L1448d8;
  #L144880.  if v1 > v7 then goto L1448d8;
  #L144884.  if v1 >= v5 then goto L14484e;
  #L144888.  v2:= v0 + 1;
  #L14488c.  if v2 >= v11 then goto L14484e;
  #L144890.  v2:= v0 + 1;
  #L144894.  call temp:= `charAt`(v9, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L14489a.  v2:= temp;
  #L14489c.  if v2 < v5 then goto L14484e;
  #L1448a0.  if v2 > v7 then goto L14484e;
  #L1448a4.  v0:= v0 + 1;
  #L1448a8.  v3:= 65536I;
  #L1448ac.  v1:= v1 - v6 @kind int;
  #L1448ae.  v1:= v1 ^< 10;
  #L1448b2.  v1:= v1 ^| v3 @kind int;
  #L1448b4.  v2:= v2 - v5 @kind int;
  #L1448b6.  v1:= v1 ^| v2 @kind int;
  #L1448b8.  v2:= "&#" @kind object;
  #L1448bc.  call temp:= `append`(v8, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1448c2.  v2:= temp @kind object;
  #L1448c4.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1448ca.  v1:= temp @kind object;
  #L1448cc.  v2:= ";" @kind object;
  #L1448d0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1448d6.  goto L14484e;
  #L1448d8.  v2:= 126I;
  #L1448dc.  if v1 > v2 then goto L1448e4;
  #L1448e0.  if v1 >= v4 then goto L144904;
  #L1448e4.  v2:= "&#" @kind object;
  #L1448e8.  call temp:= `append`(v8, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1448ee.  v2:= temp @kind object;
  #L1448f0.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1448f6.  v1:= temp @kind object;
  #L1448f8.  v2:= ";" @kind object;
  #L1448fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144902.  goto L14484e;
  #L144904.  if v1 != v4 then goto L144938;
  #L144908.  v1:= v0 + 1;
  #L14490c.  if v1 >= v11 then goto L144930;
  #L144910.  v1:= v0 + 1;
  #L144914.  call temp:= `charAt`(v9, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L14491a.  v1:= temp;
  #L14491c.  if v1 != v4 then goto L144930;
  #L144920.  v1:= "&nbsp;" @kind object;
  #L144924.  call temp:= `append`(v8, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14492a.  v0:= v0 + 1;
  #L14492e.  goto L144908;
  #L144930.  call temp:= `append`(v8, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L144936.  goto L14484e;
  #L144938.  call temp:= `append`(v8, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14493e.  goto L14484e;
  #L144940.  return @kind void;
}
