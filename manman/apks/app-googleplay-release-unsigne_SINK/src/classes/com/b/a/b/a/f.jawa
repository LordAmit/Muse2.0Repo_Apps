record `com.b.a.b.a.f` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.d.c` @kind class {
  `java.util.List` `com.b.a.b.a.f.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.b.a.b.a.f.d` @AccessFlag PRIVATE;
  `com.b.a.l` `com.b.a.b.a.f.e` @AccessFlag PRIVATE;
}
global `java.io.Writer` `@@com.b.a.b.a.f.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.b.a.q` `@@com.b.a.b.a.f.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/a/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L151270.  v0:= new `com.b.a.b.a.f$1`;
  #L151274.  call `<init>`(v0) @signature `Lcom/b/a/b/a/f$1;.<init>:()V` @kind direct;
  #L15127a.  `@@com.b.a.b.a.f.a` @type ^`java.io.Writer` := v0 @kind object;
  #L15127e.  v0:= new `com.b.a.q`;
  #L151282.  v1:= "closed" @kind object;
  #L151286.  call `<init>`(v0, v1) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15128c.  `@@com.b.a.b.a.f.b` @type ^`com.b.a.q` := v0 @kind object;
  #L151290.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.b.a.f` v1 @kind this) @signature `Lcom/b/a/b/a/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1512a4.  v0:= `@@com.b.a.b.a.f.a` @type ^`java.io.Writer` @kind object;
  #L1512a8.  call `<init>`(v1, v0) @signature `Lcom/b/a/d/c;.<init>:(Ljava/io/Writer;)V` @kind direct;
  #L1512ae.  v0:= new `java.util.ArrayList`;
  #L1512b2.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L1512b8.  v1.`com.b.a.b.a.f.c` @type ^`java.util.List` := v0 @kind object;
  #L1512bc.  v0:= `@@com.b.a.n.a` @type ^`com.b.a.n` @kind object;
  #L1512c0.  v1.`com.b.a.b.a.f.e` @type ^`com.b.a.l` := v0 @kind object;
  #L1512c4.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.f` v2 @kind this, `com.b.a.l` v3 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1512d8.  v0:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L1512dc.  if v0 == 0 then goto L151316;
  #L1512e0.  call temp:= `j`(v3) @signature `Lcom/b/a/l;.j:()Z` @kind virtual;
  #L1512e6.  v0:= temp;
  #L1512e8.  if v0 == 0 then goto L1512f8;
  #L1512ec.  call temp:= `h`(v2) @signature `Lcom/b/a/b/a/f;.h:()Z` @kind virtual;
  #L1512f2.  v0:= temp;
  #L1512f4.  if v0 == 0 then goto L15130e;
  #L1512f8.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L1512fe.  v0:= temp @kind object;
  #L151300.  v0:= (`com.b.a.o`) v0 @kind object;
  #L151304.  v1:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L151308.  call `a`(v0, v1, v3) @signature `Lcom/b/a/o;.a:(Ljava/lang/String;Lcom/b/a/l;)V` @kind virtual;
  #L15130e.  v0:= 0I;
  #L151310.  v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` := v0 @kind object;
  #L151314.  return @kind void;
  #L151316.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L15131a.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L151320.  v0:= temp;
  #L151322.  if v0 == 0 then goto L15132c;
  #L151326.  v2.`com.b.a.b.a.f.e` @type ^`com.b.a.l` := v3 @kind object;
  #L15132a.  goto L151314;
  #L15132c.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L151332.  v0:= temp @kind object;
  #L151334.  v1:= instanceof @variable v0 @type ^`com.b.a.i` @kind boolean;
  #L151338.  if v1 == 0 then goto L151348;
  #L15133c.  v0:= (`com.b.a.i`) v0 @kind object;
  #L151340.  call `a`(v0, v3) @signature `Lcom/b/a/i;.a:(Lcom/b/a/l;)V` @kind virtual;
  #L151346.  goto L151314;
  #L151348.  v0:= new `java.lang.IllegalStateException`;
  #L15134c.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L151352.  throw v0;
}
procedure `com.b.a.l` `i`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L151364.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L151368.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L15136c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L151372.  v1:= temp;
  #L151374.  v1:= v1 + -1;
  #L151378.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L15137e.  v0:= temp @kind object;
  #L151380.  v0:= (`com.b.a.l`) v0 @kind object;
  #L151384.  return v0 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v3 @kind this, `long` v4 ) @signature `Lcom/b/a/b/a/f;.a:(J)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L151398.  v0:= new `com.b.a.q`;
  #L15139c.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1513a2.  v1:= temp @kind object;
  #L1513a4.  call `<init>`(v0, v1) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Number;)V` @kind direct;
  #L1513aa.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L1513b0.  return v3 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v1 @kind this, `java.lang.Boolean` v2 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Ljava/lang/Boolean;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1513c4.  if v2 != 0 then goto L1513d2;
  #L1513c8.  call temp:= `f`(v1) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L1513ce.  v1:= temp @kind object;
  #L1513d0.  return v1 @kind object;
  #L1513d2.  v0:= new `com.b.a.q`;
  #L1513d6.  call `<init>`(v0, v2) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Boolean;)V` @kind direct;
  #L1513dc.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L1513e2.  goto L1513d0;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v3 @kind this, `java.lang.Number` v4 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Ljava/lang/Number;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1513f4.  if v4 != 0 then goto L151402;
  #L1513f8.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L1513fe.  v3:= temp @kind object;
  #L151400.  return v3 @kind object;
  #L151402.  call temp:= `g`(v3) @signature `Lcom/b/a/b/a/f;.g:()Z` @kind virtual;
  #L151408.  v0:= temp;
  #L15140a.  if v0 != 0 then goto L151460;
  #L15140e.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L151414.  v0:= temp @kind wide;
  #L151416.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L15141c.  v2:= temp;
  #L15141e.  if v2 != 0 then goto L15142e;
  #L151422.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L151428.  v0:= temp;
  #L15142a.  if v0 == 0 then goto L151460;
  #L15142e.  v0:= new `java.lang.IllegalArgumentException`;
  #L151432.  v1:= new `java.lang.StringBuilder`;
  #L151436.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15143c.  v2:= "JSON forbids NaN and infinities: " @kind object;
  #L151440.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L151446.  v1:= temp @kind object;
  #L151448.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15144e.  v1:= temp @kind object;
  #L151450.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L151456.  v1:= temp @kind object;
  #L151458.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15145e.  throw v0;
  #L151460.  v0:= new `com.b.a.q`;
  #L151464.  call `<init>`(v0, v4) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Number;)V` @kind direct;
  #L15146a.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L151470.  goto L151400;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L151484.  v0:= v1.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L151488.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L15148e.  v0:= temp;
  #L151490.  if v0 != 0 then goto L15149c;
  #L151494.  v0:= v1.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L151498.  if v0 == 0 then goto L1514a8;
  #L15149c.  v0:= new `java.lang.IllegalStateException`;
  #L1514a0.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1514a6.  throw v0;
  #L1514a8.  call temp:= `i`(v1) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L1514ae.  v0:= temp @kind object;
  #L1514b0.  v0:= instanceof @variable v0 @type ^`com.b.a.o` @kind boolean;
  #L1514b4.  if v0 == 0 then goto L1514be;
  #L1514b8.  v1.`com.b.a.b.a.f.d` @type ^`java.lang.String` := v2 @kind object;
  #L1514bc.  return v1 @kind object;
  #L1514be.  v0:= new `java.lang.IllegalStateException`;
  #L1514c2.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1514c8.  throw v0;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v2 @kind this, `boolean` v3 ) @signature `Lcom/b/a/b/a/f;.a:(Z)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1514dc.  v0:= new `com.b.a.q`;
  #L1514e0.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1514e6.  v1:= temp @kind object;
  #L1514e8.  call `<init>`(v0, v1) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Boolean;)V` @kind direct;
  #L1514ee.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L1514f4.  return v2 @kind object;
}
procedure `com.b.a.l` `a`(`com.b.a.b.a.f` v3 @kind this) @signature `Lcom/b/a/b/a/f;.a:()Lcom/b/a/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L151508.  v0:= v3.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L15150c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L151512.  v0:= temp;
  #L151514.  if v0 != 0 then goto L15154e;
  #L151518.  v0:= new `java.lang.IllegalStateException`;
  #L15151c.  v1:= new `java.lang.StringBuilder`;
  #L151520.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L151526.  v2:= "Expected one JSON element but was " @kind object;
  #L15152a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L151530.  v1:= temp @kind object;
  #L151532.  v2:= v3.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L151536.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15153c.  v1:= temp @kind object;
  #L15153e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L151544.  v1:= temp @kind object;
  #L151546.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15154c.  throw v0;
  #L15154e.  v0:= v3.`com.b.a.b.a.f.e` @type ^`com.b.a.l` @kind object;
  #L151552.  return v0 @kind object;
}
procedure `com.b.a.d.c` `b`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.b:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L151564.  v0:= new `com.b.a.i`;
  #L151568.  call `<init>`(v0) @signature `Lcom/b/a/i;.<init>:()V` @kind direct;
  #L15156e.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L151574.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L151578.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15157e.  return v2 @kind object;
}
procedure `com.b.a.d.c` `b`(`com.b.a.b.a.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/b/a/b/a/f;.b:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L151590.  if v2 != 0 then goto L15159e;
  #L151594.  call temp:= `f`(v1) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L15159a.  v1:= temp @kind object;
  #L15159c.  return v1 @kind object;
  #L15159e.  v0:= new `com.b.a.q`;
  #L1515a2.  call `<init>`(v0, v2) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1515a8.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L1515ae.  goto L15159c;
}
procedure `com.b.a.d.c` `c`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.c:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1515c0.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L1515c4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1515ca.  v0:= temp;
  #L1515cc.  if v0 != 0 then goto L1515d8;
  #L1515d0.  v0:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L1515d4.  if v0 == 0 then goto L1515e4;
  #L1515d8.  v0:= new `java.lang.IllegalStateException`;
  #L1515dc.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1515e2.  throw v0;
  #L1515e4.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L1515ea.  v0:= temp @kind object;
  #L1515ec.  v0:= instanceof @variable v0 @type ^`com.b.a.i` @kind boolean;
  #L1515f0.  if v0 == 0 then goto L151610;
  #L1515f4.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L1515f8.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L1515fc.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L151602.  v1:= temp;
  #L151604.  v1:= v1 + -1;
  #L151608.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L15160e.  return v2 @kind object;
  #L151610.  v0:= new `java.lang.IllegalStateException`;
  #L151614.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L15161a.  throw v0;
}
procedure `void` `close`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15162c.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L151630.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L151636.  v0:= temp;
  #L151638.  if v0 != 0 then goto L15164c;
  #L15163c.  v0:= new `java.io.IOException`;
  #L151640.  v1:= "Incomplete document" @kind object;
  #L151644.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15164a.  throw v0;
  #L15164c.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L151650.  v1:= `@@com.b.a.b.a.f.b` @type ^`com.b.a.q` @kind object;
  #L151654.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15165a.  return @kind void;
}
procedure `com.b.a.d.c` `d`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.d:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15166c.  v0:= new `com.b.a.o`;
  #L151670.  call `<init>`(v0) @signature `Lcom/b/a/o;.<init>:()V` @kind direct;
  #L151676.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L15167c.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L151680.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L151686.  return v2 @kind object;
}
procedure `com.b.a.d.c` `e`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.e:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L151698.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L15169c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1516a2.  v0:= temp;
  #L1516a4.  if v0 != 0 then goto L1516b0;
  #L1516a8.  v0:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L1516ac.  if v0 == 0 then goto L1516bc;
  #L1516b0.  v0:= new `java.lang.IllegalStateException`;
  #L1516b4.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1516ba.  throw v0;
  #L1516bc.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L1516c2.  v0:= temp @kind object;
  #L1516c4.  v0:= instanceof @variable v0 @type ^`com.b.a.o` @kind boolean;
  #L1516c8.  if v0 == 0 then goto L1516e8;
  #L1516cc.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L1516d0.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L1516d4.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1516da.  v1:= temp;
  #L1516dc.  v1:= v1 + -1;
  #L1516e0.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1516e6.  return v2 @kind object;
  #L1516e8.  v0:= new `java.lang.IllegalStateException`;
  #L1516ec.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1516f2.  throw v0;
}
procedure `com.b.a.d.c` `f`(`com.b.a.b.a.f` v1 @kind this) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L151704.  v0:= `@@com.b.a.n.a` @type ^`com.b.a.n` @kind object;
  #L151708.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L15170e.  return v1 @kind object;
}
procedure `void` `flush`(`com.b.a.b.a.f` v0 @kind this) @signature `Lcom/b/a/b/a/f;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L151720.  return @kind void;
}
