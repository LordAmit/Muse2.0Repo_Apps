record `com.b.a.l` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`com.b.a.l` v0 @kind this) @signature `Lcom/b/a/l;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1599f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1599f6.  return @kind void;
}
procedure `java.lang.Number` `a`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.a:()Ljava/lang/Number;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159a08.  v0:= new `java.lang.UnsupportedOperationException`;
  #L159a0c.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L159a12.  v1:= temp @kind object;
  #L159a14.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L159a1a.  v1:= temp @kind object;
  #L159a1c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159a22.  throw v0;
}
procedure `java.lang.String` `b`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159a34.  v0:= new `java.lang.UnsupportedOperationException`;
  #L159a38.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L159a3e.  v1:= temp @kind object;
  #L159a40.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L159a46.  v1:= temp @kind object;
  #L159a48.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159a4e.  throw v0;
}
procedure `double` `c`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.c:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159a60.  v0:= new `java.lang.UnsupportedOperationException`;
  #L159a64.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L159a6a.  v1:= temp @kind object;
  #L159a6c.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L159a72.  v1:= temp @kind object;
  #L159a74.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159a7a.  throw v0;
}
procedure `long` `d`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159a8c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L159a90.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L159a96.  v1:= temp @kind object;
  #L159a98.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L159a9e.  v1:= temp @kind object;
  #L159aa0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159aa6.  throw v0;
}
procedure `int` `e`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159ab8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L159abc.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L159ac2.  v1:= temp @kind object;
  #L159ac4.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L159aca.  v1:= temp @kind object;
  #L159acc.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159ad2.  throw v0;
}
procedure `boolean` `f`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159ae4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L159ae8.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L159aee.  v1:= temp @kind object;
  #L159af0.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L159af6.  v1:= temp @kind object;
  #L159af8.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159afe.  throw v0;
}
procedure `boolean` `g`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159b10.  v0:= instanceof @variable v1 @type ^`com.b.a.i` @kind boolean;
  #L159b14.  return v0;
}
procedure `boolean` `h`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159b28.  v0:= instanceof @variable v1 @type ^`com.b.a.o` @kind boolean;
  #L159b2c.  return v0;
}
procedure `boolean` `i`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159b40.  v0:= instanceof @variable v1 @type ^`com.b.a.q` @kind boolean;
  #L159b44.  return v0;
}
procedure `boolean` `j`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.j:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159b58.  v0:= instanceof @variable v1 @type ^`com.b.a.n` @kind boolean;
  #L159b5c.  return v0;
}
procedure `com.b.a.o` `k`(`com.b.a.l` v3 @kind this) @signature `Lcom/b/a/l;.k:()Lcom/b/a/o;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L159b70.  call temp:= `h`(v3) @signature `Lcom/b/a/l;.h:()Z` @kind virtual;
  #L159b76.  v0:= temp;
  #L159b78.  if v0 == 0 then goto L159b82;
  #L159b7c.  v3:= (`com.b.a.o`) v3 @kind object;
  #L159b80.  return v3 @kind object;
  #L159b82.  v0:= new `java.lang.IllegalStateException`;
  #L159b86.  v1:= new `java.lang.StringBuilder`;
  #L159b8a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L159b90.  v2:= "Not a JSON Object: " @kind object;
  #L159b94.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159b9a.  v1:= temp @kind object;
  #L159b9c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159ba2.  v1:= temp @kind object;
  #L159ba4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L159baa.  v1:= temp @kind object;
  #L159bac.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159bb2.  throw v0;
}
procedure `com.b.a.i` `l`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.l:()Lcom/b/a/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159bc4.  call temp:= `g`(v2) @signature `Lcom/b/a/l;.g:()Z` @kind virtual;
  #L159bca.  v0:= temp;
  #L159bcc.  if v0 == 0 then goto L159bd6;
  #L159bd0.  v2:= (`com.b.a.i`) v2 @kind object;
  #L159bd4.  return v2 @kind object;
  #L159bd6.  v0:= new `java.lang.IllegalStateException`;
  #L159bda.  v1:= "This is not a JSON Array." @kind object;
  #L159bde.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159be4.  throw v0;
}
procedure `com.b.a.q` `m`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.m:()Lcom/b/a/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159bf8.  call temp:= `i`(v2) @signature `Lcom/b/a/l;.i:()Z` @kind virtual;
  #L159bfe.  v0:= temp;
  #L159c00.  if v0 == 0 then goto L159c0a;
  #L159c04.  v2:= (`com.b.a.q`) v2 @kind object;
  #L159c08.  return v2 @kind object;
  #L159c0a.  v0:= new `java.lang.IllegalStateException`;
  #L159c0e.  v1:= "This is not a JSON Primitive." @kind object;
  #L159c12.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159c18.  throw v0;
}
procedure `java.lang.Boolean` `n`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.n:()Ljava/lang/Boolean;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L159c2c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L159c30.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L159c36.  v1:= temp @kind object;
  #L159c38.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L159c3e.  v1:= temp @kind object;
  #L159c40.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159c46.  throw v0;
}
procedure `java.lang.String` `toString`(`com.b.a.l` v3 @kind this) @signature `Lcom/b/a/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L159c58.  v0:= new `java.io.StringWriter`;
  #L159c5c.  call `<init>`(v0) @signature `Ljava/io/StringWriter;.<init>:()V` @kind direct;
  #L159c62.  v1:= new `com.b.a.d.c`;
  #L159c66.  call `<init>`(v1, v0) @signature `Lcom/b/a/d/c;.<init>:(Ljava/io/Writer;)V` @kind direct;
  #L159c6c.  v2:= 1I;
  #L159c6e.  call `b`(v1, v2) @signature `Lcom/b/a/d/c;.b:(Z)V` @kind virtual;
  #L159c74.  call `a`(v3, v1) @signature `Lcom/b/a/b/j;.a:(Lcom/b/a/l;Lcom/b/a/d/c;)V` @kind static;
  #L159c7a.  call temp:= `toString`(v0) @signature `Ljava/io/StringWriter;.toString:()Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L159c80.  v0:= temp @kind object;
  #L159c82.  return v0 @kind object;
  #L159c84.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L159c86.  v1:= new `java.lang.AssertionError`;
  #L159c8a.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L159c90.  throw v1;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L159c84;
}
