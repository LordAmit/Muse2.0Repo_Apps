record `com.b.a.f$a` @kind class @AccessFlag  extends `com.b.a.v` @kind class {
  `com.b.a.v` `com.b.a.f$a.a` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.b.a.f$a` v0 @kind this) @signature `Lcom/b/a/f$a;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L158f1c.  call `<init>`(v0) @signature `Lcom/b/a/v;.<init>:()V` @kind direct;
  #L158f22.  return @kind void;
}
procedure `void` `a`(`com.b.a.f$a` v1 @kind this, `com.b.a.d.c` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/f$a;.a:(Lcom/b/a/d/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L158f34.  v0:= v1.`com.b.a.f$a.a` @type ^`com.b.a.v` @kind object;
  #L158f38.  if v0 != 0 then goto L158f48;
  #L158f3c.  v0:= new `java.lang.IllegalStateException`;
  #L158f40.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L158f46.  throw v0;
  #L158f48.  v0:= v1.`com.b.a.f$a.a` @type ^`com.b.a.v` @kind object;
  #L158f4c.  call `a`(v0, v2, v3) @signature `Lcom/b/a/v;.a:(Lcom/b/a/d/c;Ljava/lang/Object;)V` @kind virtual;
  #L158f52.  return @kind void;
}
procedure `void` `a`(`com.b.a.f$a` v1 @kind this, `com.b.a.v` v2 @kind object) @signature `Lcom/b/a/f$a;.a:(Lcom/b/a/v;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L158f64.  v0:= v1.`com.b.a.f$a.a` @type ^`com.b.a.v` @kind object;
  #L158f68.  if v0 == 0 then goto L158f78;
  #L158f6c.  v0:= new `java.lang.AssertionError`;
  #L158f70.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L158f76.  throw v0;
  #L158f78.  v1.`com.b.a.f$a.a` @type ^`com.b.a.v` := v2 @kind object;
  #L158f7c.  return @kind void;
}
procedure `java.lang.Object` `b`(`com.b.a.f$a` v1 @kind this, `com.b.a.d.a` v2 @kind object) @signature `Lcom/b/a/f$a;.b:(Lcom/b/a/d/a;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L158f90.  v0:= v1.`com.b.a.f$a.a` @type ^`com.b.a.v` @kind object;
  #L158f94.  if v0 != 0 then goto L158fa4;
  #L158f98.  v0:= new `java.lang.IllegalStateException`;
  #L158f9c.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L158fa2.  throw v0;
  #L158fa4.  v0:= v1.`com.b.a.f$a.a` @type ^`com.b.a.v` @kind object;
  #L158fa8.  call temp:= `b`(v0, v2) @signature `Lcom/b/a/v;.b:(Lcom/b/a/d/a;)Ljava/lang/Object;` @kind virtual;
  #L158fae.  v0:= temp @kind object;
  #L158fb0.  return v0 @kind object;
}
