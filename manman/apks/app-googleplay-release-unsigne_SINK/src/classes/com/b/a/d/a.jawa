record `com.b.a.d.a` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface {
  `int` `com.b.a.d.a.a` @AccessFlag ;
  `java.io.Reader` `com.b.a.d.a.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.b.a.d.a.d` @AccessFlag PRIVATE;
  `char`[] `com.b.a.d.a.e` @AccessFlag PRIVATE_FINAL;
  `int` `com.b.a.d.a.f` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.g` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.h` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.i` @AccessFlag PRIVATE;
  `long` `com.b.a.d.a.j` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.k` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.a.l` @AccessFlag PRIVATE;
  `int`[] `com.b.a.d.a.m` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.n` @AccessFlag PRIVATE;
  `java.lang.String`[] `com.b.a.d.a.o` @AccessFlag PRIVATE;
  `int`[] `com.b.a.d.a.p` @AccessFlag PRIVATE;
}
global `char`[] `@@com.b.a.d.a.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/d/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L14dca8.  v0:= ")]}'\n" @kind object;
  #L14dcac.  call temp:= `toCharArray`(v0) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L14dcb2.  v0:= temp @kind object;
  #L14dcb4.  `@@com.b.a.d.a.b` @type ^`char`[] := v0 @kind object;
  #L14dcb8.  v0:= new `com.b.a.d.a$1`;
  #L14dcbc.  call `<init>`(v0) @signature `Lcom/b/a/d/a$1;.<init>:()V` @kind direct;
  #L14dcc2.  `@@com.b.a.b.e.a` @type ^`com.b.a.b.e` := v0 @kind object;
  #L14dcc6.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.d.a` v4 @kind this, `java.io.Reader` v5 @kind object) @signature `Lcom/b/a/d/a;.<init>:(Ljava/io/Reader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14dcd8.  v3:= 32I;
  #L14dcdc.  v1:= 0I;
  #L14dcde.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L14dce4.  v4.`com.b.a.d.a.d` @type ^`boolean` := v1 @kind boolean;
  #L14dce8.  v0:= 1024I;
  #L14dcec.  v0:= new `char`[v0];
  #L14dcf0.  v4.`com.b.a.d.a.e` @type ^`char`[] := v0 @kind object;
  #L14dcf4.  v4.`com.b.a.d.a.f` @type ^`int` := v1;
  #L14dcf8.  v4.`com.b.a.d.a.g` @type ^`int` := v1;
  #L14dcfc.  v4.`com.b.a.d.a.h` @type ^`int` := v1;
  #L14dd00.  v4.`com.b.a.d.a.i` @type ^`int` := v1;
  #L14dd04.  v4.`com.b.a.d.a.a` @type ^`int` := v1;
  #L14dd08.  v0:= new `int`[v3];
  #L14dd0c.  v4.`com.b.a.d.a.m` @type ^`int`[] := v0 @kind object;
  #L14dd10.  v4.`com.b.a.d.a.n` @type ^`int` := v1;
  #L14dd14.  v0:= v4.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14dd18.  v1:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L14dd1c.  v2:= v1 + 1;
  #L14dd20.  v4.`com.b.a.d.a.n` @type ^`int` := v2;
  #L14dd24.  v2:= 6I;
  #L14dd26.  v0[v1]:= v2;
  #L14dd2a.  v0:= new `java.lang.String`[v3];
  #L14dd2e.  v4.`com.b.a.d.a.o` @type ^`java.lang.String`[] := v0 @kind object;
  #L14dd32.  v0:= new `int`[v3];
  #L14dd36.  v4.`com.b.a.d.a.p` @type ^`int`[] := v0 @kind object;
  #L14dd3a.  if v5 != 0 then goto L14dd4e;
  #L14dd3e.  v0:= new `java.lang.NullPointerException`;
  #L14dd42.  v1:= "in == null" @kind object;
  #L14dd46.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14dd4c.  throw v0;
  #L14dd4e.  v4.`com.b.a.d.a.c` @type ^`java.io.Reader` := v5 @kind object;
  #L14dd52.  return @kind void;
}
procedure `java.lang.String` `a`(`com.b.a.d.a` v1 @kind object) @signature `Lcom/b/a/d/a;.a:(Lcom/b/a/d/a;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L14dd64.  call temp:= `x`(v1) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14dd6a.  v0:= temp @kind object;
  #L14dd6c.  return v0 @kind object;
}
procedure `void` `a`(`com.b.a.d.a` v6 @kind this, `int` v7 ) @signature `Lcom/b/a/d/a;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14dd80.  v5:= 0I;
  #L14dd82.  v0:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14dd86.  v1:= v6.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14dd8a.  v1:= length @variable v1;
  #L14dd8c.  if v0 != v1 then goto L14ddea;
  #L14dd90.  v0:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14dd94.  v0:= v0 * 2;
  #L14dd98.  v0:= new `int`[v0];
  #L14dd9c.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14dda0.  v1:= v1 * 2;
  #L14dda4.  v1:= new `int`[v1];
  #L14dda8.  v2:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14ddac.  v2:= v2 * 2;
  #L14ddb0.  v2:= new `java.lang.String`[v2];
  #L14ddb4.  v3:= v6.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14ddb8.  v4:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14ddbc.  call `arraycopy`(v3, v5, v0, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L14ddc2.  v3:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14ddc6.  v4:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14ddca.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L14ddd0.  v3:= v6.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L14ddd4.  v4:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14ddd8.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L14ddde.  v6.`com.b.a.d.a.m` @type ^`int`[] := v0 @kind object;
  #L14dde2.  v6.`com.b.a.d.a.p` @type ^`int`[] := v1 @kind object;
  #L14dde6.  v6.`com.b.a.d.a.o` @type ^`java.lang.String`[] := v2 @kind object;
  #L14ddea.  v0:= v6.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14ddee.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14ddf2.  v2:= v1 + 1;
  #L14ddf6.  v6.`com.b.a.d.a.n` @type ^`int` := v2;
  #L14ddfa.  v0[v1]:= v7;
  #L14ddfe.  return @kind void;
}
procedure `boolean` `a`(`com.b.a.d.a` v1 @kind this, `char` v2 ) @signature `Lcom/b/a/d/a;.a:(C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L14de10.  goto L14de24;
  #L14de16.  v0:= 1I;
  #L14de18.  return v0;
  #L14de1a.  call `v`(v1) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L14de20.  v0:= 0I;
  #L14de22.  goto L14de18;
  #L14de24.  switch v2
                  | 9 => goto L14de20
                  | 10 => goto L14de20
                  | 12 => goto L14de20
                  | 13 => goto L14de20
                  | 32 => goto L14de20
                  | 35 => goto L14de1a
                  | 44 => goto L14de20
                  | 47 => goto L14de1a
                  | 58 => goto L14de20
                  | 59 => goto L14de1a
                  | 61 => goto L14de1a
                  | 91 => goto L14de20
                  | 92 => goto L14de1a
                  | 93 => goto L14de20
                  | 123 => goto L14de20
                  | 125 => goto L14de20
                  | else => goto L14de16;
}
procedure `boolean` `a`(`com.b.a.d.a` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lcom/b/a/d/a;.a:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14deb8.  v1:= 0I;
  #L14deba.  v0:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L14debe.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L14dec4.  v2:= temp;
  #L14dec6.  v0:= v0 + v2 @kind int;
  #L14dec8.  v2:= v4.`com.b.a.d.a.g` @type ^`int`;
  #L14decc.  if v0 <= v2 then goto L14dee4;
  #L14ded0.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L14ded6.  v0:= temp;
  #L14ded8.  call temp:= `b`(v4, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14dede.  v0:= temp;
  #L14dee0.  if v0 == 0 then goto L14df4e;
  #L14dee4.  v0:= v4.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14dee8.  v2:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L14deec.  v0:= v0[v2] @kind char;
  #L14def0.  v2:= 10I;
  #L14def4.  if v0 != v2 then goto L14df1e;
  #L14def8.  v0:= v4.`com.b.a.d.a.h` @type ^`int`;
  #L14defc.  v0:= v0 + 1;
  #L14df00.  v4.`com.b.a.d.a.h` @type ^`int` := v0;
  #L14df04.  v0:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L14df08.  v0:= v0 + 1;
  #L14df0c.  v4.`com.b.a.d.a.i` @type ^`int` := v0;
  #L14df10.  v0:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L14df14.  v0:= v0 + 1;
  #L14df18.  v4.`com.b.a.d.a.f` @type ^`int` := v0;
  #L14df1c.  goto L14deba;
  #L14df1e.  v0:= v1;
  #L14df20.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L14df26.  v2:= temp;
  #L14df28.  if v0 >= v2 then goto L14df4c;
  #L14df2c.  v2:= v4.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14df30.  v3:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L14df34.  v3:= v3 + v0 @kind int;
  #L14df36.  v2:= v2[v3] @kind char;
  #L14df3a.  call temp:= `charAt`(v5, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L14df40.  v3:= temp;
  #L14df42.  if v2 != v3 then goto L14df10;
  #L14df46.  v0:= v0 + 1;
  #L14df4a.  goto L14df20;
  #L14df4c.  v1:= 1I;
  #L14df4e.  return v1;
}
procedure `int` `b`(`com.b.a.d.a` v5 @kind this, `boolean` v6 ) @signature `Lcom/b/a/d/a;.b:(Z)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L14df60.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14df64.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14df68.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L14df6c.  if v1 != v0 then goto L14dfc8;
  #L14df70.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L14df74.  v0:= 1I;
  #L14df76.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14df7c.  v0:= temp;
  #L14df7e.  if v0 != 0 then goto L14dfc0;
  #L14df82.  if v6 == 0 then goto L14e0de;
  #L14df86.  v0:= new `java.io.EOFException`;
  #L14df8a.  v1:= new `java.lang.StringBuilder`;
  #L14df8e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14df94.  v2:= "End of input" @kind object;
  #L14df98.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14df9e.  v1:= temp @kind object;
  #L14dfa0.  call temp:= `x`(v5) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14dfa6.  v2:= temp @kind object;
  #L14dfa8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14dfae.  v1:= temp @kind object;
  #L14dfb0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14dfb6.  v1:= temp @kind object;
  #L14dfb8.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14dfbe.  throw v0;
  #L14dfc0.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14dfc4.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L14dfc8.  v2:= v1 + 1;
  #L14dfcc.  v1:= v3[v1] @kind char;
  #L14dfd0.  v4:= 10I;
  #L14dfd4.  if v1 != v4 then goto L14dfec;
  #L14dfd8.  v1:= v5.`com.b.a.d.a.h` @type ^`int`;
  #L14dfdc.  v1:= v1 + 1;
  #L14dfe0.  v5.`com.b.a.d.a.h` @type ^`int` := v1;
  #L14dfe4.  v5.`com.b.a.d.a.i` @type ^`int` := v2;
  #L14dfe8.  v1:= v2;
  #L14dfea.  goto L14df6c;
  #L14dfec.  v4:= 32I;
  #L14dff0.  if v1 == v4 then goto L14e0e2;
  #L14dff4.  v4:= 13I;
  #L14dff8.  if v1 == v4 then goto L14e0e2;
  #L14dffc.  v4:= 9I;
  #L14e000.  if v1 != v4 then goto L14e008;
  #L14e004.  v1:= v2;
  #L14e006.  goto L14df6c;
  #L14e008.  v4:= 47I;
  #L14e00c.  if v1 != v4 then goto L14e0b2;
  #L14e010.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L14e014.  if v2 != v0 then goto L14e042;
  #L14e018.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e01c.  v0:= v0 + -1;
  #L14e020.  v5.`com.b.a.d.a.f` @type ^`int` := v0;
  #L14e024.  v0:= 2I;
  #L14e026.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14e02c.  v0:= temp;
  #L14e02e.  v2:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e032.  v2:= v2 + 1;
  #L14e036.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L14e03a.  if v0 != 0 then goto L14e042;
  #L14e03e.  v0:= v1;
  #L14e040.  return v0;
  #L14e042.  call `v`(v5) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L14e048.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e04c.  v0:= v3[v0] @kind char;
  #L14e050.  goto L14e0e8;
  #L14e056.  v0:= v1;
  #L14e058.  goto L14e040;
  #L14e05a.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e05e.  v0:= v0 + 1;
  #L14e062.  v5.`com.b.a.d.a.f` @type ^`int` := v0;
  #L14e066.  v0:= "*/" @kind object;
  #L14e06a.  call temp:= `a`(v5, v0) @signature `Lcom/b/a/d/a;.a:(Ljava/lang/String;)Z` @kind direct;
  #L14e070.  v0:= temp;
  #L14e072.  if v0 != 0 then goto L14e084;
  #L14e076.  v0:= "Unterminated comment" @kind object;
  #L14e07a.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L14e080.  v0:= temp @kind object;
  #L14e082.  throw v0;
  #L14e084.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e088.  v1:= v0 + 2;
  #L14e08c.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L14e090.  goto L14df6c;
  #L14e094.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e098.  v0:= v0 + 1;
  #L14e09c.  v5.`com.b.a.d.a.f` @type ^`int` := v0;
  #L14e0a0.  call `w`(v5) @signature `Lcom/b/a/d/a;.w:()V` @kind direct;
  #L14e0a6.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e0aa.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L14e0ae.  goto L14df6c;
  #L14e0b2.  v0:= 35I;
  #L14e0b6.  if v1 != v0 then goto L14e0d6;
  #L14e0ba.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L14e0be.  call `v`(v5) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L14e0c4.  call `w`(v5) @signature `Lcom/b/a/d/a;.w:()V` @kind direct;
  #L14e0ca.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e0ce.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L14e0d2.  goto L14df6c;
  #L14e0d6.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L14e0da.  v0:= v1;
  #L14e0dc.  goto L14e040;
  #L14e0de.  v0:= -1I;
  #L14e0e0.  goto L14e040;
  #L14e0e2.  v1:= v2;
  #L14e0e4.  goto L14df6c;
  #L14e0e8.  switch v0
                  | 42 => goto L14e05a
                  | 47 => goto L14e094
                  | else => goto L14e056;
}
procedure `java.io.IOException` `b`(`com.b.a.d.a` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L14e10c.  v0:= new `com.b.a.d.d`;
  #L14e110.  v1:= new `java.lang.StringBuilder`;
  #L14e114.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e11a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e120.  v1:= temp @kind object;
  #L14e122.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14e128.  v2:= temp @kind object;
  #L14e12a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e130.  v1:= temp @kind object;
  #L14e132.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e138.  v1:= temp @kind object;
  #L14e13a.  call `<init>`(v0, v1) @signature `Lcom/b/a/d/d;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e140.  throw v0;
}
procedure `java.lang.String` `b`(`com.b.a.d.a` v7 @kind this, `char` v8 ) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L14e154.  v4:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14e158.  v5:= new `java.lang.StringBuilder`;
  #L14e15c.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e162.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L14e166.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L14e16a.  v3:= v0;
  #L14e16c.  if v3 >= v1 then goto L14e1e8;
  #L14e170.  v2:= v3 + 1;
  #L14e174.  v3:= v4[v3] @kind char;
  #L14e178.  if v3 != v8 then goto L14e198;
  #L14e17c.  v7.`com.b.a.d.a.f` @type ^`int` := v2;
  #L14e180.  v1:= v2 - v0 @kind int;
  #L14e184.  v1:= v1 + -1;
  #L14e188.  call temp:= `append`(v5, v4, v0, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e18e.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e194.  v0:= temp @kind object;
  #L14e196.  return v0 @kind object;
  #L14e198.  v6:= 92I;
  #L14e19c.  if v3 != v6 then goto L14e1ce;
  #L14e1a0.  v7.`com.b.a.d.a.f` @type ^`int` := v2;
  #L14e1a4.  v1:= v2 - v0 @kind int;
  #L14e1a8.  v1:= v1 + -1;
  #L14e1ac.  call temp:= `append`(v5, v4, v0, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e1b2.  call temp:= `y`(v7) @signature `Lcom/b/a/d/a;.y:()C` @kind direct;
  #L14e1b8.  v0:= temp;
  #L14e1ba.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e1c0.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L14e1c4.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L14e1c8.  v2:= v0;
  #L14e1ca.  v3:= v2;
  #L14e1cc.  goto L14e16c;
  #L14e1ce.  v6:= 10I;
  #L14e1d2.  if v3 != v6 then goto L14e1ca;
  #L14e1d6.  v3:= v7.`com.b.a.d.a.h` @type ^`int`;
  #L14e1da.  v3:= v3 + 1;
  #L14e1de.  v7.`com.b.a.d.a.h` @type ^`int` := v3;
  #L14e1e2.  v7.`com.b.a.d.a.i` @type ^`int` := v2;
  #L14e1e6.  goto L14e1ca;
  #L14e1e8.  v1:= v3 - v0 @kind int;
  #L14e1ec.  call temp:= `append`(v5, v4, v0, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e1f2.  v7.`com.b.a.d.a.f` @type ^`int` := v3;
  #L14e1f6.  v0:= 1I;
  #L14e1f8.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14e1fe.  v0:= temp;
  #L14e200.  if v0 != 0 then goto L14e162;
  #L14e204.  v0:= "Unterminated string" @kind object;
  #L14e208.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L14e20e.  v0:= temp @kind object;
  #L14e210.  throw v0;
}
procedure `boolean` `b`(`com.b.a.d.a` v6 @kind this, `int` v7 ) @signature `Lcom/b/a/d/a;.b:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14e224.  v0:= 0I;
  #L14e226.  v1:= v6.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14e22a.  v2:= v6.`com.b.a.d.a.i` @type ^`int`;
  #L14e22e.  v3:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L14e232.  v2:= v2 - v3 @kind int;
  #L14e234.  v6.`com.b.a.d.a.i` @type ^`int` := v2;
  #L14e238.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L14e23c.  v3:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L14e240.  if v2 == v3 then goto L14e2da;
  #L14e244.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L14e248.  v3:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L14e24c.  v2:= v2 - v3 @kind int;
  #L14e24e.  v6.`com.b.a.d.a.g` @type ^`int` := v2;
  #L14e252.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L14e256.  v3:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L14e25a.  call `arraycopy`(v1, v2, v1, v0, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L14e260.  v6.`com.b.a.d.a.f` @type ^`int` := v0;
  #L14e264.  v2:= v6.`com.b.a.d.a.c` @type ^`java.io.Reader` @kind object;
  #L14e268.  v3:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L14e26c.  v4:= length @variable v1;
  #L14e26e.  v5:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L14e272.  v4:= v4 - v5 @kind int;
  #L14e274.  call temp:= `read`(v2, v1, v3, v4) @signature `Ljava/io/Reader;.read:([CII)I` @kind virtual;
  #L14e27a.  v2:= temp;
  #L14e27c.  v3:= -1I;
  #L14e27e.  if v2 == v3 then goto L14e2d8;
  #L14e282.  v3:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L14e286.  v2:= v2 + v3 @kind int;
  #L14e288.  v6.`com.b.a.d.a.g` @type ^`int` := v2;
  #L14e28c.  v2:= v6.`com.b.a.d.a.h` @type ^`int`;
  #L14e290.  if v2 != 0 then goto L14e2ce;
  #L14e294.  v2:= v6.`com.b.a.d.a.i` @type ^`int`;
  #L14e298.  if v2 != 0 then goto L14e2ce;
  #L14e29c.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L14e2a0.  if v2 <= 0 then goto L14e2ce;
  #L14e2a4.  v2:= v1[v0] @kind char;
  #L14e2a8.  v3:= 65279I;
  #L14e2ae.  if v2 != v3 then goto L14e2ce;
  #L14e2b2.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L14e2b6.  v2:= v2 + 1;
  #L14e2ba.  v6.`com.b.a.d.a.f` @type ^`int` := v2;
  #L14e2be.  v2:= v6.`com.b.a.d.a.i` @type ^`int`;
  #L14e2c2.  v2:= v2 + 1;
  #L14e2c6.  v6.`com.b.a.d.a.i` @type ^`int` := v2;
  #L14e2ca.  v7:= v7 + 1;
  #L14e2ce.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L14e2d2.  if v2 < v7 then goto L14e264;
  #L14e2d6.  v0:= 1I;
  #L14e2d8.  return v0;
  #L14e2da.  v6.`com.b.a.d.a.g` @type ^`int` := v0;
  #L14e2de.  goto L14e260;
}
procedure `void` `c`(`com.b.a.d.a` v5 @kind this, `char` v6 ) @signature `Lcom/b/a/d/a;.c:(C)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L14e2f0.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14e2f4.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e2f8.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L14e2fc.  v2:= v1;
  #L14e2fe.  if v2 >= v0 then goto L14e34c;
  #L14e302.  v1:= v2 + 1;
  #L14e306.  v2:= v3[v2] @kind char;
  #L14e30a.  if v2 != v6 then goto L14e314;
  #L14e30e.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L14e312.  return @kind void;
  #L14e314.  v4:= 92I;
  #L14e318.  if v2 != v4 then goto L14e332;
  #L14e31c.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L14e320.  call temp:= `y`(v5) @signature `Lcom/b/a/d/a;.y:()C` @kind direct;
  #L14e326.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e32a.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L14e32e.  v2:= v1;
  #L14e330.  goto L14e2fe;
  #L14e332.  v4:= 10I;
  #L14e336.  if v2 != v4 then goto L14e32e;
  #L14e33a.  v2:= v5.`com.b.a.d.a.h` @type ^`int`;
  #L14e33e.  v2:= v2 + 1;
  #L14e342.  v5.`com.b.a.d.a.h` @type ^`int` := v2;
  #L14e346.  v5.`com.b.a.d.a.i` @type ^`int` := v1;
  #L14e34a.  goto L14e32e;
  #L14e34c.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L14e350.  v0:= 1I;
  #L14e352.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14e358.  v0:= temp;
  #L14e35a.  if v0 != 0 then goto L14e2f4;
  #L14e35e.  v0:= "Unterminated string" @kind object;
  #L14e362.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L14e368.  v0:= temp @kind object;
  #L14e36a.  throw v0;
}
procedure `int` `o`(`com.b.a.d.a` v8 @kind this) @signature `Lcom/b/a/d/a;.o:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L14e37c.  v3:= 0I;
  #L14e37e.  v0:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14e382.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L14e386.  v0:= v0[v1] @kind char;
  #L14e38a.  v1:= 116I;
  #L14e38e.  if v0 == v1 then goto L14e39a;
  #L14e392.  v1:= 84I;
  #L14e396.  if v0 != v1 then goto L14e3d4;
  #L14e39a.  v2:= "true" @kind object;
  #L14e39e.  v1:= "TRUE" @kind object;
  #L14e3a2.  v0:= 5I;
  #L14e3a4.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L14e3aa.  v5:= temp;
  #L14e3ac.  v4:= 1I;
  #L14e3ae.  if v4 >= v5 then goto L14e440;
  #L14e3b2.  v6:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L14e3b6.  v6:= v6 + v4 @kind int;
  #L14e3b8.  v7:= v8.`com.b.a.d.a.g` @type ^`int`;
  #L14e3bc.  if v6 < v7 then goto L14e410;
  #L14e3c0.  v6:= v4 + 1;
  #L14e3c4.  call temp:= `b`(v8, v6) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14e3ca.  v6:= temp;
  #L14e3cc.  if v6 != 0 then goto L14e410;
  #L14e3d0.  v0:= v3;
  #L14e3d2.  return v0;
  #L14e3d4.  v1:= 102I;
  #L14e3d8.  if v0 == v1 then goto L14e3e4;
  #L14e3dc.  v1:= 70I;
  #L14e3e0.  if v0 != v1 then goto L14e3f0;
  #L14e3e4.  v2:= "false" @kind object;
  #L14e3e8.  v1:= "FALSE" @kind object;
  #L14e3ec.  v0:= 6I;
  #L14e3ee.  goto L14e3a4;
  #L14e3f0.  v1:= 110I;
  #L14e3f4.  if v0 == v1 then goto L14e400;
  #L14e3f8.  v1:= 78I;
  #L14e3fc.  if v0 != v1 then goto L14e40c;
  #L14e400.  v2:= "null" @kind object;
  #L14e404.  v1:= "NULL" @kind object;
  #L14e408.  v0:= 7I;
  #L14e40a.  goto L14e3a4;
  #L14e40c.  v0:= v3;
  #L14e40e.  goto L14e3d2;
  #L14e410.  v6:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14e414.  v7:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L14e418.  v7:= v7 + v4 @kind int;
  #L14e41a.  v6:= v6[v7] @kind char;
  #L14e41e.  call temp:= `charAt`(v2, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L14e424.  v7:= temp;
  #L14e426.  if v6 == v7 then goto L14e43a;
  #L14e42a.  call temp:= `charAt`(v1, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L14e430.  v7:= temp;
  #L14e432.  if v6 == v7 then goto L14e43a;
  #L14e436.  v0:= v3;
  #L14e438.  goto L14e3d2;
  #L14e43a.  v4:= v4 + 1;
  #L14e43e.  goto L14e3ae;
  #L14e440.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L14e444.  v1:= v1 + v5 @kind int;
  #L14e446.  v2:= v8.`com.b.a.d.a.g` @type ^`int`;
  #L14e44a.  if v1 < v2 then goto L14e45e;
  #L14e44e.  v1:= v5 + 1;
  #L14e452.  call temp:= `b`(v8, v1) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14e458.  v1:= temp;
  #L14e45a.  if v1 == 0 then goto L14e47c;
  #L14e45e.  v1:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14e462.  v2:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L14e466.  v2:= v2 + v5 @kind int;
  #L14e468.  v1:= v1[v2] @kind char;
  #L14e46c.  call temp:= `a`(v8, v1) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L14e472.  v1:= temp;
  #L14e474.  if v1 == 0 then goto L14e47c;
  #L14e478.  v0:= v3;
  #L14e47a.  goto L14e3d2;
  #L14e47c.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L14e480.  v1:= v1 + v5 @kind int;
  #L14e482.  v8.`com.b.a.d.a.f` @type ^`int` := v1;
  #L14e486.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14e48a.  goto L14e3d2;
}
procedure `int` `s`(`com.b.a.d.a` v15 @kind this) @signature `Lcom/b/a/d/a;.s:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L14e49c.  v11:= v15.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14e4a0.  v2:= v15.`com.b.a.d.a.f` @type ^`int`;
  #L14e4a4.  v1:= v15.`com.b.a.d.a.g` @type ^`int`;
  #L14e4a8.  v6:= 0L;
  #L14e4ac.  v5:= 0I;
  #L14e4ae.  v4:= 1I;
  #L14e4b0.  v3:= 0I;
  #L14e4b2.  v0:= 0I;
  #L14e4b4.  v10:= v0;
  #L14e4b6.  v0:= v1;
  #L14e4b8.  v1:= v2;
  #L14e4ba.  v2:= v1 + v10 @kind int;
  #L14e4be.  if v2 != v0 then goto L14e51a;
  #L14e4c2.  v0:= length @variable v11;
  #L14e4c4.  if v10 != v0 then goto L14e4cc;
  #L14e4c8.  v0:= 0I;
  #L14e4ca.  return v0;
  #L14e4cc.  v0:= v10 + 1;
  #L14e4d0.  call temp:= `b`(v15, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14e4d6.  v0:= temp;
  #L14e4d8.  if v0 != 0 then goto L14e512;
  #L14e4dc.  v0:= 2I;
  #L14e4de.  if v3 != v0 then goto L14e65a;
  #L14e4e2.  if v4 == 0 then goto L14e65a;
  #L14e4e6.  v0:= -9223372036854775808L;
  #L14e4ea.  v0:= lcmp(v6, v0);
  #L14e4ee.  if v0 != 0 then goto L14e4f6;
  #L14e4f2.  if v5 == 0 then goto L14e65a;
  #L14e4f6.  if v5 == 0 then goto L14e654;
  #L14e4fa.  v15.`com.b.a.d.a.j` @type ^`long` := v6 @kind wide;
  #L14e4fe.  v0:= v15.`com.b.a.d.a.f` @type ^`int`;
  #L14e502.  v0:= v0 + v10 @kind int;
  #L14e504.  v15.`com.b.a.d.a.f` @type ^`int` := v0;
  #L14e508.  v0:= 15I;
  #L14e50c.  v15.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14e510.  goto L14e4ca;
  #L14e512.  v1:= v15.`com.b.a.d.a.f` @type ^`int`;
  #L14e516.  v0:= v15.`com.b.a.d.a.g` @type ^`int`;
  #L14e51a.  v2:= v1 + v10 @kind int;
  #L14e51e.  v2:= v11[v2] @kind char;
  #L14e522.  goto L14e68c;
  #L14e528.  v8:= 48I;
  #L14e52c.  if v2 < v8 then goto L14e538;
  #L14e530.  v8:= 57I;
  #L14e534.  if v2 <= v8 then goto L14e5b2;
  #L14e538.  call temp:= `a`(v15, v2) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L14e53e.  v0:= temp;
  #L14e540.  if v0 == 0 then goto L14e4dc;
  #L14e544.  v0:= 0I;
  #L14e546.  goto L14e4ca;
  #L14e548.  if v3 != 0 then goto L14e564;
  #L14e54c.  v3:= 1I;
  #L14e54e.  v2:= 1I;
  #L14e550.  v14:= v4;
  #L14e552.  v4:= v3;
  #L14e554.  v3:= v14;
  #L14e556.  v5:= v10 + 1;
  #L14e55a.  v10:= v5;
  #L14e55c.  v5:= v4;
  #L14e55e.  v4:= v3;
  #L14e560.  v3:= v2;
  #L14e562.  goto L14e4ba;
  #L14e564.  v2:= 5I;
  #L14e566.  if v3 != v2 then goto L14e572;
  #L14e56a.  v2:= 6I;
  #L14e56c.  v3:= v4;
  #L14e56e.  v4:= v5;
  #L14e570.  goto L14e556;
  #L14e572.  v0:= 0I;
  #L14e574.  goto L14e4ca;
  #L14e576.  v2:= 5I;
  #L14e578.  if v3 != v2 then goto L14e584;
  #L14e57c.  v2:= 6I;
  #L14e57e.  v3:= v4;
  #L14e580.  v4:= v5;
  #L14e582.  goto L14e556;
  #L14e584.  v0:= 0I;
  #L14e586.  goto L14e4ca;
  #L14e588.  v2:= 2I;
  #L14e58a.  if v3 == v2 then goto L14e594;
  #L14e58e.  v2:= 4I;
  #L14e590.  if v3 != v2 then goto L14e59c;
  #L14e594.  v2:= 5I;
  #L14e596.  v3:= v4;
  #L14e598.  v4:= v5;
  #L14e59a.  goto L14e556;
  #L14e59c.  v0:= 0I;
  #L14e59e.  goto L14e4ca;
  #L14e5a0.  v2:= 2I;
  #L14e5a2.  if v3 != v2 then goto L14e5ae;
  #L14e5a6.  v2:= 3I;
  #L14e5a8.  v3:= v4;
  #L14e5aa.  v4:= v5;
  #L14e5ac.  goto L14e556;
  #L14e5ae.  v0:= 0I;
  #L14e5b0.  goto L14e4ca;
  #L14e5b2.  v8:= 1I;
  #L14e5b4.  if v3 == v8 then goto L14e5bc;
  #L14e5b8.  if v3 != 0 then goto L14e5cc;
  #L14e5bc.  v2:= v2 + -48;
  #L14e5c0.  v2:= -v2 @kind int;
  #L14e5c2.  v6:= (`long`) v2 @kind i2l;
  #L14e5c4.  v2:= 2I;
  #L14e5c6.  v3:= v4;
  #L14e5c8.  v4:= v5;
  #L14e5ca.  goto L14e556;
  #L14e5cc.  v8:= 2I;
  #L14e5ce.  if v3 != v8 then goto L14e632;
  #L14e5d2.  v8:= 0L;
  #L14e5d6.  v8:= lcmp(v6, v8);
  #L14e5da.  if v8 != 0 then goto L14e5e4;
  #L14e5de.  v0:= 0I;
  #L14e5e0.  goto L14e4ca;
  #L14e5e4.  v8:= 10L;
  #L14e5e8.  v8:= v8 * v6 @kind long;
  #L14e5ea.  v2:= v2 + -48;
  #L14e5ee.  v12:= (`long`) v2 @kind i2l;
  #L14e5f0.  v8:= v8 - v12 @kind long;
  #L14e5f2.  v12:= -922337203685477580L;
  #L14e5fc.  v2:= lcmp(v6, v12);
  #L14e600.  if v2 > 0 then goto L14e61e;
  #L14e604.  v12:= -922337203685477580L;
  #L14e60e.  v2:= lcmp(v6, v12);
  #L14e612.  if v2 != 0 then goto L14e62e;
  #L14e616.  v2:= lcmp(v8, v6);
  #L14e61a.  if v2 >= 0 then goto L14e62e;
  #L14e61e.  v2:= 1I;
  #L14e620.  v2:= v2 ^& v4 @kind int;
  #L14e622.  v4:= v5;
  #L14e624.  v6:= v8 @kind wide;
  #L14e626.  v14:= v3;
  #L14e628.  v3:= v2;
  #L14e62a.  v2:= v14;
  #L14e62c.  goto L14e556;
  #L14e62e.  v2:= 0I;
  #L14e630.  goto L14e620;
  #L14e632.  v2:= 3I;
  #L14e634.  if v3 != v2 then goto L14e640;
  #L14e638.  v2:= 4I;
  #L14e63a.  v3:= v4;
  #L14e63c.  v4:= v5;
  #L14e63e.  goto L14e556;
  #L14e640.  v2:= 5I;
  #L14e642.  if v3 == v2 then goto L14e64c;
  #L14e646.  v2:= 6I;
  #L14e648.  if v3 != v2 then goto L14e682;
  #L14e64c.  v2:= 7I;
  #L14e64e.  v3:= v4;
  #L14e650.  v4:= v5;
  #L14e652.  goto L14e556;
  #L14e654.  v6:= -v6 @kind long;
  #L14e656.  goto L14e4fa;
  #L14e65a.  v0:= 2I;
  #L14e65c.  if v3 == v0 then goto L14e66c;
  #L14e660.  v0:= 4I;
  #L14e662.  if v3 == v0 then goto L14e66c;
  #L14e666.  v0:= 7I;
  #L14e668.  if v3 != v0 then goto L14e67c;
  #L14e66c.  v15.`com.b.a.d.a.k` @type ^`int` := v10;
  #L14e670.  v0:= 16I;
  #L14e674.  v15.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14e678.  goto L14e4ca;
  #L14e67c.  v0:= 0I;
  #L14e67e.  goto L14e4ca;
  #L14e682.  v2:= v3;
  #L14e684.  v3:= v4;
  #L14e686.  v4:= v5;
  #L14e688.  goto L14e556;
  #L14e68c.  switch v2
                  | 43 => goto L14e576
                  | 45 => goto L14e548
                  | 46 => goto L14e5a0
                  | 69 => goto L14e588
                  | 101 => goto L14e588
                  | else => goto L14e528;
}
procedure `java.lang.String` `t`(`com.b.a.d.a` v5 @kind this) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L14e6c8.  v2:= 0I;
  #L14e6ca.  v0:= 0I;
  #L14e6cc.  v1:= v2;
  #L14e6ce.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e6d2.  v3:= v3 + v1 @kind int;
  #L14e6d4.  v4:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L14e6d8.  if v3 >= v4 then goto L14e71e;
  #L14e6dc.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14e6e0.  v4:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e6e4.  v4:= v4 + v1 @kind int;
  #L14e6e6.  v3:= v3[v4] @kind char;
  #L14e6ea.  goto L14e790;
  #L14e6f0.  v1:= v1 + 1;
  #L14e6f4.  goto L14e6ce;
  #L14e6f6.  call `v`(v5) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L14e6fc.  if v0 != 0 then goto L14e772;
  #L14e700.  v0:= new `java.lang.String`;
  #L14e704.  v2:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14e708.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e70c.  call `<init>`(v0, v2, v3, v1) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L14e712.  v2:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e716.  v1:= v1 + v2 @kind int;
  #L14e718.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L14e71c.  return v0 @kind object;
  #L14e71e.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14e722.  v3:= length @variable v3;
  #L14e724.  if v1 >= v3 then goto L14e73a;
  #L14e728.  v3:= v1 + 1;
  #L14e72c.  call temp:= `b`(v5, v3) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14e732.  v3:= temp;
  #L14e734.  if v3 == 0 then goto L14e6fc;
  #L14e738.  goto L14e6ce;
  #L14e73a.  if v0 != 0 then goto L14e748;
  #L14e73e.  v0:= new `java.lang.StringBuilder`;
  #L14e742.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e748.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14e74c.  v4:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e750.  call temp:= `append`(v0, v3, v4, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e756.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e75a.  v1:= v1 + v3 @kind int;
  #L14e75c.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L14e760.  v1:= 1I;
  #L14e762.  call temp:= `b`(v5, v1) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14e768.  v1:= temp;
  #L14e76a.  if v1 != 0 then goto L14e78a;
  #L14e76e.  v1:= v2;
  #L14e770.  goto L14e6fc;
  #L14e772.  v2:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14e776.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14e77a.  call temp:= `append`(v0, v2, v3, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e780.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e786.  v0:= temp @kind object;
  #L14e788.  goto L14e712;
  #L14e78a.  v1:= v2;
  #L14e78c.  goto L14e6ce;
  #L14e78e.  
  #L14e790.  switch v3
                  | 9 => goto L14e6fc
                  | 10 => goto L14e6fc
                  | 12 => goto L14e6fc
                  | 13 => goto L14e6fc
                  | 32 => goto L14e6fc
                  | 35 => goto L14e6f6
                  | 44 => goto L14e6fc
                  | 47 => goto L14e6f6
                  | 58 => goto L14e6fc
                  | 59 => goto L14e6f6
                  | 61 => goto L14e6f6
                  | 91 => goto L14e6fc
                  | 92 => goto L14e6f6
                  | 93 => goto L14e6fc
                  | 123 => goto L14e6fc
                  | 125 => goto L14e6fc
                  | else => goto L14e6f0;
}
procedure `void` `u`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.u:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L14e824.  v0:= 0I;
  #L14e826.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L14e82a.  v1:= v1 + v0 @kind int;
  #L14e82c.  v2:= v3.`com.b.a.d.a.g` @type ^`int`;
  #L14e830.  if v1 >= v2 then goto L14e860;
  #L14e834.  v1:= v3.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14e838.  v2:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L14e83c.  v2:= v2 + v0 @kind int;
  #L14e83e.  v1:= v1[v2] @kind char;
  #L14e842.  goto L14e87c;
  #L14e848.  v0:= v0 + 1;
  #L14e84c.  goto L14e826;
  #L14e84e.  call `v`(v3) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L14e854.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L14e858.  v0:= v0 + v1 @kind int;
  #L14e85a.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L14e85e.  return @kind void;
  #L14e860.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L14e864.  v0:= v0 + v1 @kind int;
  #L14e866.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L14e86a.  v0:= 1I;
  #L14e86c.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14e872.  v0:= temp;
  #L14e874.  if v0 != 0 then goto L14e824;
  #L14e878.  goto L14e85e;
  #L14e87a.  
  #L14e87c.  switch v1
                  | 9 => goto L14e854
                  | 10 => goto L14e854
                  | 12 => goto L14e854
                  | 13 => goto L14e854
                  | 32 => goto L14e854
                  | 35 => goto L14e84e
                  | 44 => goto L14e854
                  | 47 => goto L14e84e
                  | 58 => goto L14e854
                  | 59 => goto L14e84e
                  | 61 => goto L14e84e
                  | 91 => goto L14e854
                  | 92 => goto L14e84e
                  | 93 => goto L14e854
                  | 123 => goto L14e854
                  | 125 => goto L14e854
                  | else => goto L14e848;
}
procedure `void` `v`(`com.b.a.d.a` v1 @kind this) @signature `Lcom/b/a/d/a;.v:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L14e910.  v0:= v1.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L14e914.  if v0 != 0 then goto L14e926;
  #L14e918.  v0:= "Use JsonReader.setLenient(true) to accept malformed JSON" @kind object;
  #L14e91c.  call temp:= `b`(v1, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L14e922.  v0:= temp @kind object;
  #L14e924.  throw v0;
  #L14e926.  return @kind void;
}
procedure `void` `w`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.w:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L14e938.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L14e93c.  v1:= v3.`com.b.a.d.a.g` @type ^`int`;
  #L14e940.  if v0 < v1 then goto L14e952;
  #L14e944.  v0:= 1I;
  #L14e946.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14e94c.  v0:= temp;
  #L14e94e.  if v0 == 0 then goto L14e982;
  #L14e952.  v0:= v3.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14e956.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L14e95a.  v2:= v1 + 1;
  #L14e95e.  v3.`com.b.a.d.a.f` @type ^`int` := v2;
  #L14e962.  v0:= v0[v1] @kind char;
  #L14e966.  v1:= 10I;
  #L14e96a.  if v0 != v1 then goto L14e984;
  #L14e96e.  v0:= v3.`com.b.a.d.a.h` @type ^`int`;
  #L14e972.  v0:= v0 + 1;
  #L14e976.  v3.`com.b.a.d.a.h` @type ^`int` := v0;
  #L14e97a.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L14e97e.  v3.`com.b.a.d.a.i` @type ^`int` := v0;
  #L14e982.  return @kind void;
  #L14e984.  v1:= 13I;
  #L14e988.  if v0 != v1 then goto L14e938;
  #L14e98c.  goto L14e982;
}
procedure `java.lang.String` `x`(`com.b.a.d.a` v4 @kind this) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14e9a0.  v0:= v4.`com.b.a.d.a.h` @type ^`int`;
  #L14e9a4.  v0:= v0 + 1;
  #L14e9a8.  v1:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L14e9ac.  v2:= v4.`com.b.a.d.a.i` @type ^`int`;
  #L14e9b0.  v1:= v1 - v2 @kind int;
  #L14e9b2.  v1:= v1 + 1;
  #L14e9b6.  v2:= new `java.lang.StringBuilder`;
  #L14e9ba.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e9c0.  v3:= " at line " @kind object;
  #L14e9c4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e9ca.  v2:= temp @kind object;
  #L14e9cc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e9d2.  v0:= temp @kind object;
  #L14e9d4.  v2:= " column " @kind object;
  #L14e9d8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e9de.  v0:= temp @kind object;
  #L14e9e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e9e6.  v0:= temp @kind object;
  #L14e9e8.  v1:= " path " @kind object;
  #L14e9ec.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e9f2.  v0:= temp @kind object;
  #L14e9f4.  call temp:= `p`(v4) @signature `Lcom/b/a/d/a;.p:()Ljava/lang/String;` @kind virtual;
  #L14e9fa.  v1:= temp @kind object;
  #L14e9fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ea02.  v0:= temp @kind object;
  #L14ea04.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ea0a.  v0:= temp @kind object;
  #L14ea0c.  return v0 @kind object;
}
procedure `char` `y`(`com.b.a.d.a` v7 @kind this) @signature `Lcom/b/a/d/a;.y:()C` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L14ea20.  v5:= 4I;
  #L14ea22.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L14ea26.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L14ea2a.  if v0 != v1 then goto L14ea4a;
  #L14ea2e.  v0:= 1I;
  #L14ea30.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14ea36.  v0:= temp;
  #L14ea38.  if v0 != 0 then goto L14ea4a;
  #L14ea3c.  v0:= "Unterminated escape sequence" @kind object;
  #L14ea40.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L14ea46.  v0:= temp @kind object;
  #L14ea48.  throw v0;
  #L14ea4a.  v0:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14ea4e.  v1:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L14ea52.  v2:= v1 + 1;
  #L14ea56.  v7.`com.b.a.d.a.f` @type ^`int` := v2;
  #L14ea5a.  v0:= v0[v1] @kind char;
  #L14ea5e.  goto L14eba0;
  #L14ea64.  v0:= "Invalid escape sequence" @kind object;
  #L14ea68.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L14ea6e.  v0:= temp @kind object;
  #L14ea70.  throw v0;
  #L14ea72.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L14ea76.  v0:= v0 + 4;
  #L14ea7a.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L14ea7e.  if v0 <= v1 then goto L14ea9c;
  #L14ea82.  call temp:= `b`(v7, v5) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14ea88.  v0:= temp;
  #L14ea8a.  if v0 != 0 then goto L14ea9c;
  #L14ea8e.  v0:= "Unterminated escape sequence" @kind object;
  #L14ea92.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L14ea98.  v0:= temp @kind object;
  #L14ea9a.  throw v0;
  #L14ea9c.  v1:= 0I;
  #L14ea9e.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L14eaa2.  v2:= v0 + 4;
  #L14eaa6.  v6:= v0;
  #L14eaa8.  v0:= v1;
  #L14eaaa.  v1:= v6;
  #L14eaac.  if v1 >= v2 then goto L14eb5c;
  #L14eab0.  v3:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14eab4.  v3:= v3[v1] @kind char;
  #L14eab8.  v0:= v0 ^< 4;
  #L14eabc.  v0:= (`char`) v0 @kind i2c;
  #L14eabe.  v4:= 48I;
  #L14eac2.  if v3 < v4 then goto L14eadc;
  #L14eac6.  v4:= 57I;
  #L14eaca.  if v3 > v4 then goto L14eadc;
  #L14eace.  v3:= v3 + -48;
  #L14ead2.  v0:= v0 + v3 @kind int;
  #L14ead4.  v0:= (`char`) v0 @kind i2c;
  #L14ead6.  v1:= v1 + 1;
  #L14eada.  goto L14eaac;
  #L14eadc.  v4:= 97I;
  #L14eae0.  if v3 < v4 then goto L14eafa;
  #L14eae4.  v4:= 102I;
  #L14eae8.  if v3 > v4 then goto L14eafa;
  #L14eaec.  v3:= v3 + -97;
  #L14eaf0.  v3:= v3 + 10;
  #L14eaf4.  v0:= v0 + v3 @kind int;
  #L14eaf6.  v0:= (`char`) v0 @kind i2c;
  #L14eaf8.  goto L14ead6;
  #L14eafa.  v4:= 65I;
  #L14eafe.  if v3 < v4 then goto L14eb18;
  #L14eb02.  v4:= 70I;
  #L14eb06.  if v3 > v4 then goto L14eb18;
  #L14eb0a.  v3:= v3 + -65;
  #L14eb0e.  v3:= v3 + 10;
  #L14eb12.  v0:= v0 + v3 @kind int;
  #L14eb14.  v0:= (`char`) v0 @kind i2c;
  #L14eb16.  goto L14ead6;
  #L14eb18.  v0:= new `java.lang.NumberFormatException`;
  #L14eb1c.  v1:= new `java.lang.StringBuilder`;
  #L14eb20.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14eb26.  v2:= "\\u" @kind object;
  #L14eb2a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eb30.  v1:= temp @kind object;
  #L14eb32.  v2:= new `java.lang.String`;
  #L14eb36.  v3:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14eb3a.  v4:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L14eb3e.  call `<init>`(v2, v3, v4, v5) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L14eb44.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eb4a.  v1:= temp @kind object;
  #L14eb4c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14eb52.  v1:= temp @kind object;
  #L14eb54.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14eb5a.  throw v0;
  #L14eb5c.  v1:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L14eb60.  v1:= v1 + 4;
  #L14eb64.  v7.`com.b.a.d.a.f` @type ^`int` := v1;
  #L14eb68.  return v0;
  #L14eb6a.  v0:= 9I;
  #L14eb6e.  goto L14eb68;
  #L14eb70.  v0:= 8I;
  #L14eb74.  goto L14eb68;
  #L14eb76.  v0:= 10I;
  #L14eb7a.  goto L14eb68;
  #L14eb7c.  v0:= 13I;
  #L14eb80.  goto L14eb68;
  #L14eb82.  v0:= 12I;
  #L14eb86.  goto L14eb68;
  #L14eb88.  v1:= v7.`com.b.a.d.a.h` @type ^`int`;
  #L14eb8c.  v1:= v1 + 1;
  #L14eb90.  v7.`com.b.a.d.a.h` @type ^`int` := v1;
  #L14eb94.  v1:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L14eb98.  v7.`com.b.a.d.a.i` @type ^`int` := v1;
  #L14eb9c.  goto L14eb68;
  #L14eb9e.  
  #L14eba0.  switch v0
                  | 10 => goto L14eb88
                  | 34 => goto L14eb68
                  | 39 => goto L14eb68
                  | 47 => goto L14eb68
                  | 92 => goto L14eb68
                  | 98 => goto L14eb70
                  | 102 => goto L14eb82
                  | 110 => goto L14eb76
                  | 114 => goto L14eb7c
                  | 116 => goto L14eb6a
                  | 117 => goto L14ea72
                  | else => goto L14ea64;
}
procedure `void` `z`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.z:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L14ec0c.  v0:= 1I;
  #L14ec0e.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L14ec14.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L14ec18.  v0:= v0 + -1;
  #L14ec1c.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L14ec20.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L14ec24.  v1:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L14ec28.  v1:= length @variable v1;
  #L14ec2a.  v0:= v0 + v1 @kind int;
  #L14ec2c.  v1:= v3.`com.b.a.d.a.g` @type ^`int`;
  #L14ec30.  if v0 <= v1 then goto L14ec48;
  #L14ec34.  v0:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L14ec38.  v0:= length @variable v0;
  #L14ec3a.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14ec40.  v0:= temp;
  #L14ec42.  if v0 != 0 then goto L14ec48;
  #L14ec46.  return @kind void;
  #L14ec48.  v0:= 0I;
  #L14ec4a.  v1:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L14ec4e.  v1:= length @variable v1;
  #L14ec50.  if v0 >= v1 then goto L14ec74;
  #L14ec54.  v1:= v3.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14ec58.  v2:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L14ec5c.  v2:= v2 + v0 @kind int;
  #L14ec5e.  v1:= v1[v2] @kind char;
  #L14ec62.  v2:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L14ec66.  v2:= v2[v0] @kind char;
  #L14ec6a.  if v1 != v2 then goto L14ec46;
  #L14ec6e.  v0:= v0 + 1;
  #L14ec72.  goto L14ec4a;
  #L14ec74.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L14ec78.  v1:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L14ec7c.  v1:= length @variable v1;
  #L14ec7e.  v0:= v0 + v1 @kind int;
  #L14ec80.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L14ec84.  goto L14ec46;
}
procedure `void` `a`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L14ec98.  v2:= 0I;
  #L14ec9a.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L14ec9e.  if v0 != 0 then goto L14ecaa;
  #L14eca2.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14eca8.  v0:= temp;
  #L14ecaa.  v1:= 3I;
  #L14ecac.  if v0 != v1 then goto L14ecce;
  #L14ecb0.  v0:= 1I;
  #L14ecb2.  call `a`(v3, v0) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L14ecb8.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14ecbc.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L14ecc0.  v1:= v1 + -1;
  #L14ecc4.  v0[v1]:= v2;
  #L14ecc8.  v3.`com.b.a.d.a.a` @type ^`int` := v2;
  #L14eccc.  return @kind void;
  #L14ecce.  v0:= new `java.lang.IllegalStateException`;
  #L14ecd2.  v1:= new `java.lang.StringBuilder`;
  #L14ecd6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14ecdc.  v2:= "Expected BEGIN_ARRAY but was " @kind object;
  #L14ece0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ece6.  v1:= temp @kind object;
  #L14ece8.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L14ecee.  v2:= temp @kind object;
  #L14ecf0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ecf6.  v1:= temp @kind object;
  #L14ecf8.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14ecfe.  v2:= temp @kind object;
  #L14ed00.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ed06.  v1:= temp @kind object;
  #L14ed08.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ed0e.  v1:= temp @kind object;
  #L14ed10.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14ed16.  throw v0;
}
procedure `void` `a`(`com.b.a.d.a` v0 @kind this, `boolean` v1 ) @signature `Lcom/b/a/d/a;.a:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L14ed28.  v0.`com.b.a.d.a.d` @type ^`boolean` := v1 @kind boolean;
  #L14ed2c.  return @kind void;
}
procedure `void` `b`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L14ed40.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L14ed44.  if v0 != 0 then goto L14ed50;
  #L14ed48.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14ed4e.  v0:= temp;
  #L14ed50.  v1:= 4I;
  #L14ed52.  if v0 != v1 then goto L14ed82;
  #L14ed56.  v0:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L14ed5a.  v0:= v0 + -1;
  #L14ed5e.  v3.`com.b.a.d.a.n` @type ^`int` := v0;
  #L14ed62.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14ed66.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L14ed6a.  v1:= v1 + -1;
  #L14ed6e.  v2:= v0[v1];
  #L14ed72.  v2:= v2 + 1;
  #L14ed76.  v0[v1]:= v2;
  #L14ed7a.  v0:= 0I;
  #L14ed7c.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14ed80.  return @kind void;
  #L14ed82.  v0:= new `java.lang.IllegalStateException`;
  #L14ed86.  v1:= new `java.lang.StringBuilder`;
  #L14ed8a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14ed90.  v2:= "Expected END_ARRAY but was " @kind object;
  #L14ed94.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ed9a.  v1:= temp @kind object;
  #L14ed9c.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L14eda2.  v2:= temp @kind object;
  #L14eda4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14edaa.  v1:= temp @kind object;
  #L14edac.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14edb2.  v2:= temp @kind object;
  #L14edb4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14edba.  v1:= temp @kind object;
  #L14edbc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14edc2.  v1:= temp @kind object;
  #L14edc4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14edca.  throw v0;
}
procedure `void` `c`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L14eddc.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L14ede0.  if v0 != 0 then goto L14edec;
  #L14ede4.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14edea.  v0:= temp;
  #L14edec.  v1:= 1I;
  #L14edee.  if v0 != v1 then goto L14ee02;
  #L14edf2.  v0:= 3I;
  #L14edf4.  call `a`(v3, v0) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L14edfa.  v0:= 0I;
  #L14edfc.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14ee00.  return @kind void;
  #L14ee02.  v0:= new `java.lang.IllegalStateException`;
  #L14ee06.  v1:= new `java.lang.StringBuilder`;
  #L14ee0a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14ee10.  v2:= "Expected BEGIN_OBJECT but was " @kind object;
  #L14ee14.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ee1a.  v1:= temp @kind object;
  #L14ee1c.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L14ee22.  v2:= temp @kind object;
  #L14ee24.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ee2a.  v1:= temp @kind object;
  #L14ee2c.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14ee32.  v2:= temp @kind object;
  #L14ee34.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ee3a.  v1:= temp @kind object;
  #L14ee3c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ee42.  v1:= temp @kind object;
  #L14ee44.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14ee4a.  throw v0;
}
procedure `void` `close`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L14ee5c.  v2:= 0I;
  #L14ee5e.  v3.`com.b.a.d.a.a` @type ^`int` := v2;
  #L14ee62.  v0:= v3.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14ee66.  v1:= 8I;
  #L14ee6a.  v0[v2]:= v1;
  #L14ee6e.  v0:= 1I;
  #L14ee70.  v3.`com.b.a.d.a.n` @type ^`int` := v0;
  #L14ee74.  v0:= v3.`com.b.a.d.a.c` @type ^`java.io.Reader` @kind object;
  #L14ee78.  call `close`(v0) @signature `Ljava/io/Reader;.close:()V` @kind virtual;
  #L14ee7e.  return @kind void;
}
procedure `void` `d`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L14ee90.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L14ee94.  if v0 != 0 then goto L14eea0;
  #L14ee98.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14ee9e.  v0:= temp;
  #L14eea0.  v1:= 2I;
  #L14eea2.  if v0 != v1 then goto L14eee0;
  #L14eea6.  v0:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L14eeaa.  v0:= v0 + -1;
  #L14eeae.  v3.`com.b.a.d.a.n` @type ^`int` := v0;
  #L14eeb2.  v0:= v3.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L14eeb6.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L14eeba.  v2:= 0I;
  #L14eebc.  v0[v1]:= v2 @kind object;
  #L14eec0.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14eec4.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L14eec8.  v1:= v1 + -1;
  #L14eecc.  v2:= v0[v1];
  #L14eed0.  v2:= v2 + 1;
  #L14eed4.  v0[v1]:= v2;
  #L14eed8.  v0:= 0I;
  #L14eeda.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14eede.  return @kind void;
  #L14eee0.  v0:= new `java.lang.IllegalStateException`;
  #L14eee4.  v1:= new `java.lang.StringBuilder`;
  #L14eee8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14eeee.  v2:= "Expected END_OBJECT but was " @kind object;
  #L14eef2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eef8.  v1:= temp @kind object;
  #L14eefa.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L14ef00.  v2:= temp @kind object;
  #L14ef02.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ef08.  v1:= temp @kind object;
  #L14ef0a.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14ef10.  v2:= temp @kind object;
  #L14ef12.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ef18.  v1:= temp @kind object;
  #L14ef1a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ef20.  v1:= temp @kind object;
  #L14ef22.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14ef28.  throw v0;
}
procedure `boolean` `e`(`com.b.a.d.a` v2 @kind this) @signature `Lcom/b/a/d/a;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14ef3c.  v0:= v2.`com.b.a.d.a.a` @type ^`int`;
  #L14ef40.  if v0 != 0 then goto L14ef4c;
  #L14ef44.  call temp:= `r`(v2) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14ef4a.  v0:= temp;
  #L14ef4c.  v1:= 2I;
  #L14ef4e.  if v0 == v1 then goto L14ef5c;
  #L14ef52.  v1:= 4I;
  #L14ef54.  if v0 == v1 then goto L14ef5c;
  #L14ef58.  v0:= 1I;
  #L14ef5a.  return v0;
  #L14ef5c.  v0:= 0I;
  #L14ef5e.  goto L14ef5a;
}
procedure `com.b.a.d.b` `f`(`com.b.a.d.a` v1 @kind this) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14ef70.  v0:= v1.`com.b.a.d.a.a` @type ^`int`;
  #L14ef74.  if v0 != 0 then goto L14ef80;
  #L14ef78.  call temp:= `r`(v1) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14ef7e.  v0:= temp;
  #L14ef80.  goto L14efd0;
  #L14ef86.  v0:= new `java.lang.AssertionError`;
  #L14ef8a.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L14ef90.  throw v0;
  #L14ef92.  v0:= `@@com.b.a.d.b.c` @type ^`com.b.a.d.b` @kind object;
  #L14ef96.  return v0 @kind object;
  #L14ef98.  v0:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L14ef9c.  goto L14ef96;
  #L14ef9e.  v0:= `@@com.b.a.d.b.a` @type ^`com.b.a.d.b` @kind object;
  #L14efa2.  goto L14ef96;
  #L14efa4.  v0:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L14efa8.  goto L14ef96;
  #L14efaa.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L14efae.  goto L14ef96;
  #L14efb0.  v0:= `@@com.b.a.d.b.h` @type ^`com.b.a.d.b` @kind object;
  #L14efb4.  goto L14ef96;
  #L14efb6.  v0:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L14efba.  goto L14ef96;
  #L14efbc.  v0:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L14efc0.  goto L14ef96;
  #L14efc2.  v0:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L14efc6.  goto L14ef96;
  #L14efc8.  v0:= `@@com.b.a.d.b.j` @type ^`com.b.a.d.b` @kind object;
  #L14efcc.  goto L14ef96;
  #L14efce.  
  #L14efd0.  switch v0
                  | 1 => goto L14ef92
                  | 2 => goto L14ef98
                  | 3 => goto L14ef9e
                  | 4 => goto L14efa4
                  | 5 => goto L14efb0
                  | 6 => goto L14efb0
                  | 7 => goto L14efb6
                  | 8 => goto L14efbc
                  | 9 => goto L14efbc
                  | 10 => goto L14efbc
                  | 11 => goto L14efbc
                  | 12 => goto L14efaa
                  | 13 => goto L14efaa
                  | 14 => goto L14efaa
                  | 15 => goto L14efc2
                  | 16 => goto L14efc2
                  | 17 => goto L14efc8
                  | else => goto L14ef86;
}
procedure `java.lang.String` `g`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.g:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L14f02c.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L14f030.  if v0 != 0 then goto L14f03c;
  #L14f034.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14f03a.  v0:= temp;
  #L14f03c.  v1:= 14I;
  #L14f040.  if v0 != v1 then goto L14f064;
  #L14f044.  call temp:= `t`(v3) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L14f04a.  v0:= temp @kind object;
  #L14f04c.  v1:= 0I;
  #L14f04e.  v3.`com.b.a.d.a.a` @type ^`int` := v1;
  #L14f052.  v1:= v3.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L14f056.  v2:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L14f05a.  v2:= v2 + -1;
  #L14f05e.  v1[v2]:= v0 @kind object;
  #L14f062.  return v0 @kind object;
  #L14f064.  v1:= 12I;
  #L14f068.  if v0 != v1 then goto L14f07a;
  #L14f06c.  v0:= 39I;
  #L14f070.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L14f076.  v0:= temp @kind object;
  #L14f078.  goto L14f04c;
  #L14f07a.  v1:= 13I;
  #L14f07e.  if v0 != v1 then goto L14f090;
  #L14f082.  v0:= 34I;
  #L14f086.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L14f08c.  v0:= temp @kind object;
  #L14f08e.  goto L14f04c;
  #L14f090.  v0:= new `java.lang.IllegalStateException`;
  #L14f094.  v1:= new `java.lang.StringBuilder`;
  #L14f098.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f09e.  v2:= "Expected a name but was " @kind object;
  #L14f0a2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f0a8.  v1:= temp @kind object;
  #L14f0aa.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L14f0b0.  v2:= temp @kind object;
  #L14f0b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f0b8.  v1:= temp @kind object;
  #L14f0ba.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14f0c0.  v2:= temp @kind object;
  #L14f0c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f0c8.  v1:= temp @kind object;
  #L14f0ca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f0d0.  v1:= temp @kind object;
  #L14f0d2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f0d8.  throw v0;
}
procedure `java.lang.String` `h`(`com.b.a.d.a` v4 @kind this) @signature `Lcom/b/a/d/a;.h:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14f0ec.  v0:= v4.`com.b.a.d.a.a` @type ^`int`;
  #L14f0f0.  if v0 != 0 then goto L14f0fc;
  #L14f0f4.  call temp:= `r`(v4) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14f0fa.  v0:= temp;
  #L14f0fc.  v1:= 10I;
  #L14f100.  if v0 != v1 then goto L14f12c;
  #L14f104.  call temp:= `t`(v4) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L14f10a.  v0:= temp @kind object;
  #L14f10c.  v1:= 0I;
  #L14f10e.  v4.`com.b.a.d.a.a` @type ^`int` := v1;
  #L14f112.  v1:= v4.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14f116.  v2:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L14f11a.  v2:= v2 + -1;
  #L14f11e.  v3:= v1[v2];
  #L14f122.  v3:= v3 + 1;
  #L14f126.  v1[v2]:= v3;
  #L14f12a.  return v0 @kind object;
  #L14f12c.  v1:= 8I;
  #L14f130.  if v0 != v1 then goto L14f142;
  #L14f134.  v0:= 39I;
  #L14f138.  call temp:= `b`(v4, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L14f13e.  v0:= temp @kind object;
  #L14f140.  goto L14f10c;
  #L14f142.  v1:= 9I;
  #L14f146.  if v0 != v1 then goto L14f158;
  #L14f14a.  v0:= 34I;
  #L14f14e.  call temp:= `b`(v4, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L14f154.  v0:= temp @kind object;
  #L14f156.  goto L14f10c;
  #L14f158.  v1:= 11I;
  #L14f15c.  if v0 != v1 then goto L14f16c;
  #L14f160.  v0:= v4.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L14f164.  v1:= 0I;
  #L14f166.  v4.`com.b.a.d.a.l` @type ^`java.lang.String` := v1 @kind object;
  #L14f16a.  goto L14f10c;
  #L14f16c.  v1:= 15I;
  #L14f170.  if v0 != v1 then goto L14f182;
  #L14f174.  v0:= v4.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L14f178.  call temp:= `toString`(v0) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L14f17e.  v0:= temp @kind object;
  #L14f180.  goto L14f10c;
  #L14f182.  v1:= 16I;
  #L14f186.  if v0 != v1 then goto L14f1b0;
  #L14f18a.  v0:= new `java.lang.String`;
  #L14f18e.  v1:= v4.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14f192.  v2:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L14f196.  v3:= v4.`com.b.a.d.a.k` @type ^`int`;
  #L14f19a.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L14f1a0.  v1:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L14f1a4.  v2:= v4.`com.b.a.d.a.k` @type ^`int`;
  #L14f1a8.  v1:= v1 + v2 @kind int;
  #L14f1aa.  v4.`com.b.a.d.a.f` @type ^`int` := v1;
  #L14f1ae.  goto L14f10c;
  #L14f1b0.  v0:= new `java.lang.IllegalStateException`;
  #L14f1b4.  v1:= new `java.lang.StringBuilder`;
  #L14f1b8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f1be.  v2:= "Expected a string but was " @kind object;
  #L14f1c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f1c8.  v1:= temp @kind object;
  #L14f1ca.  call temp:= `f`(v4) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L14f1d0.  v2:= temp @kind object;
  #L14f1d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f1d8.  v1:= temp @kind object;
  #L14f1da.  call temp:= `x`(v4) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14f1e0.  v2:= temp @kind object;
  #L14f1e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f1e8.  v1:= temp @kind object;
  #L14f1ea.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f1f0.  v1:= temp @kind object;
  #L14f1f2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f1f8.  throw v0;
}
procedure `boolean` `i`(`com.b.a.d.a` v4 @kind this) @signature `Lcom/b/a/d/a;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14f20c.  v0:= 0I;
  #L14f20e.  v1:= v4.`com.b.a.d.a.a` @type ^`int`;
  #L14f212.  if v1 != 0 then goto L14f21e;
  #L14f216.  call temp:= `r`(v4) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14f21c.  v1:= temp;
  #L14f21e.  v2:= 5I;
  #L14f220.  if v1 != v2 then goto L14f244;
  #L14f224.  v4.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14f228.  v0:= v4.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14f22c.  v1:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L14f230.  v1:= v1 + -1;
  #L14f234.  v2:= v0[v1];
  #L14f238.  v2:= v2 + 1;
  #L14f23c.  v0[v1]:= v2;
  #L14f240.  v0:= 1I;
  #L14f242.  return v0;
  #L14f244.  v2:= 6I;
  #L14f246.  if v1 != v2 then goto L14f268;
  #L14f24a.  v4.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14f24e.  v1:= v4.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14f252.  v2:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L14f256.  v2:= v2 + -1;
  #L14f25a.  v3:= v1[v2];
  #L14f25e.  v3:= v3 + 1;
  #L14f262.  v1[v2]:= v3;
  #L14f266.  goto L14f242;
  #L14f268.  v0:= new `java.lang.IllegalStateException`;
  #L14f26c.  v1:= new `java.lang.StringBuilder`;
  #L14f270.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f276.  v2:= "Expected a boolean but was " @kind object;
  #L14f27a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f280.  v1:= temp @kind object;
  #L14f282.  call temp:= `f`(v4) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L14f288.  v2:= temp @kind object;
  #L14f28a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f290.  v1:= temp @kind object;
  #L14f292.  call temp:= `x`(v4) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14f298.  v2:= temp @kind object;
  #L14f29a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f2a0.  v1:= temp @kind object;
  #L14f2a2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f2a8.  v1:= temp @kind object;
  #L14f2aa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f2b0.  throw v0;
}
procedure `void` `j`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.j:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L14f2c4.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L14f2c8.  if v0 != 0 then goto L14f2d4;
  #L14f2cc.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14f2d2.  v0:= temp;
  #L14f2d4.  v1:= 7I;
  #L14f2d6.  if v0 != v1 then goto L14f2fa;
  #L14f2da.  v0:= 0I;
  #L14f2dc.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14f2e0.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14f2e4.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L14f2e8.  v1:= v1 + -1;
  #L14f2ec.  v2:= v0[v1];
  #L14f2f0.  v2:= v2 + 1;
  #L14f2f4.  v0[v1]:= v2;
  #L14f2f8.  return @kind void;
  #L14f2fa.  v0:= new `java.lang.IllegalStateException`;
  #L14f2fe.  v1:= new `java.lang.StringBuilder`;
  #L14f302.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f308.  v2:= "Expected null but was " @kind object;
  #L14f30c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f312.  v1:= temp @kind object;
  #L14f314.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L14f31a.  v2:= temp @kind object;
  #L14f31c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f322.  v1:= temp @kind object;
  #L14f324.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14f32a.  v2:= temp @kind object;
  #L14f32c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f332.  v1:= temp @kind object;
  #L14f334.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f33a.  v1:= temp @kind object;
  #L14f33c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f342.  throw v0;
}
procedure `double` `k`(`com.b.a.d.a` v6 @kind this) @signature `Lcom/b/a/d/a;.k:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14f354.  v5:= 11I;
  #L14f358.  v2:= 8I;
  #L14f35c.  v4:= 0I;
  #L14f35e.  v0:= v6.`com.b.a.d.a.a` @type ^`int`;
  #L14f362.  if v0 != 0 then goto L14f36e;
  #L14f366.  call temp:= `r`(v6) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14f36c.  v0:= temp;
  #L14f36e.  v1:= 15I;
  #L14f372.  if v0 != v1 then goto L14f39a;
  #L14f376.  v6.`com.b.a.d.a.a` @type ^`int` := v4;
  #L14f37a.  v0:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14f37e.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14f382.  v1:= v1 + -1;
  #L14f386.  v2:= v0[v1];
  #L14f38a.  v2:= v2 + 1;
  #L14f38e.  v0[v1]:= v2;
  #L14f392.  v0:= v6.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L14f396.  v0:= (`double`) v0 @kind l2d;
  #L14f398.  return v0 @kind wide;
  #L14f39a.  v1:= 16I;
  #L14f39e.  if v0 != v1 then goto L14f43c;
  #L14f3a2.  v0:= new `java.lang.String`;
  #L14f3a6.  v1:= v6.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14f3aa.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L14f3ae.  v3:= v6.`com.b.a.d.a.k` @type ^`int`;
  #L14f3b2.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L14f3b8.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L14f3bc.  v0:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L14f3c0.  v1:= v6.`com.b.a.d.a.k` @type ^`int`;
  #L14f3c4.  v0:= v0 + v1 @kind int;
  #L14f3c6.  v6.`com.b.a.d.a.f` @type ^`int` := v0;
  #L14f3ca.  v6.`com.b.a.d.a.a` @type ^`int` := v5;
  #L14f3ce.  v0:= v6.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L14f3d2.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L14f3d8.  v0:= temp @kind wide;
  #L14f3da.  v2:= v6.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L14f3de.  if v2 != 0 then goto L14f4c8;
  #L14f3e2.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L14f3e8.  v2:= temp;
  #L14f3ea.  if v2 != 0 then goto L14f3fa;
  #L14f3ee.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L14f3f4.  v2:= temp;
  #L14f3f6.  if v2 == 0 then goto L14f4c8;
  #L14f3fa.  v2:= new `com.b.a.d.d`;
  #L14f3fe.  v3:= new `java.lang.StringBuilder`;
  #L14f402.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f408.  v4:= "JSON forbids NaN and infinities: " @kind object;
  #L14f40c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f412.  v3:= temp @kind object;
  #L14f414.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f41a.  v0:= temp @kind object;
  #L14f41c.  call temp:= `x`(v6) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14f422.  v1:= temp @kind object;
  #L14f424.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f42a.  v0:= temp @kind object;
  #L14f42c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f432.  v0:= temp @kind object;
  #L14f434.  call `<init>`(v2, v0) @signature `Lcom/b/a/d/d;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f43a.  throw v2;
  #L14f43c.  if v0 == v2 then goto L14f448;
  #L14f440.  v1:= 9I;
  #L14f444.  if v0 != v1 then goto L14f464;
  #L14f448.  if v0 != v2 then goto L14f45e;
  #L14f44c.  v0:= 39I;
  #L14f450.  call temp:= `b`(v6, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L14f456.  v0:= temp @kind object;
  #L14f458.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L14f45c.  goto L14f3ca;
  #L14f45e.  v0:= 34I;
  #L14f462.  goto L14f450;
  #L14f464.  v1:= 10I;
  #L14f468.  if v0 != v1 then goto L14f47a;
  #L14f46c.  call temp:= `t`(v6) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L14f472.  v0:= temp @kind object;
  #L14f474.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L14f478.  goto L14f3ca;
  #L14f47a.  if v0 == v5 then goto L14f3ca;
  #L14f47e.  v0:= new `java.lang.IllegalStateException`;
  #L14f482.  v1:= new `java.lang.StringBuilder`;
  #L14f486.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f48c.  v2:= "Expected a double but was " @kind object;
  #L14f490.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f496.  v1:= temp @kind object;
  #L14f498.  call temp:= `f`(v6) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L14f49e.  v2:= temp @kind object;
  #L14f4a0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f4a6.  v1:= temp @kind object;
  #L14f4a8.  call temp:= `x`(v6) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14f4ae.  v2:= temp @kind object;
  #L14f4b0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f4b6.  v1:= temp @kind object;
  #L14f4b8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f4be.  v1:= temp @kind object;
  #L14f4c0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f4c6.  throw v0;
  #L14f4c8.  v2:= 0I;
  #L14f4ca.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v2 @kind object;
  #L14f4ce.  v6.`com.b.a.d.a.a` @type ^`int` := v4;
  #L14f4d2.  v2:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14f4d6.  v3:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14f4da.  v3:= v3 + -1;
  #L14f4de.  v4:= v2[v3];
  #L14f4e2.  v4:= v4 + 1;
  #L14f4e6.  v2[v3]:= v4;
  #L14f4ea.  goto L14f398;
}
procedure `long` `l`(`com.b.a.d.a` v7 @kind this) @signature `Lcom/b/a/d/a;.l:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L14f500.  v3:= 10I;
  #L14f504.  v2:= 8I;
  #L14f508.  v6:= 0I;
  #L14f50a.  v0:= v7.`com.b.a.d.a.a` @type ^`int`;
  #L14f50e.  if v0 != 0 then goto L14f51a;
  #L14f512.  call temp:= `r`(v7) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14f518.  v0:= temp;
  #L14f51a.  v1:= 15I;
  #L14f51e.  if v0 != v1 then goto L14f544;
  #L14f522.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L14f526.  v0:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14f52a.  v1:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L14f52e.  v1:= v1 + -1;
  #L14f532.  v2:= v0[v1];
  #L14f536.  v2:= v2 + 1;
  #L14f53a.  v0[v1]:= v2;
  #L14f53e.  v0:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L14f542.  return v0 @kind wide;
  #L14f544.  v1:= 16I;
  #L14f548.  if v0 != v1 then goto L14f5da;
  #L14f54c.  v0:= new `java.lang.String`;
  #L14f550.  v1:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14f554.  v2:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L14f558.  v3:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L14f55c.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L14f562.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L14f566.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L14f56a.  v1:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L14f56e.  v0:= v0 + v1 @kind int;
  #L14f570.  v7.`com.b.a.d.a.f` @type ^`int` := v0;
  #L14f574.  v0:= 11I;
  #L14f578.  v7.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14f57c.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L14f580.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L14f586.  v2:= temp @kind wide;
  #L14f588.  v0:= (`long`) v2 @kind d2l;
  #L14f58a.  v4:= (`double`) v0 @kind l2d;
  #L14f58c.  v2:= dcmpl(v4, v2);
  #L14f590.  if v2 == 0 then goto L14f690;
  #L14f594.  v0:= new `java.lang.NumberFormatException`;
  #L14f598.  v1:= new `java.lang.StringBuilder`;
  #L14f59c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f5a2.  v2:= "Expected a long but was " @kind object;
  #L14f5a6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f5ac.  v1:= temp @kind object;
  #L14f5ae.  v2:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L14f5b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f5b8.  v1:= temp @kind object;
  #L14f5ba.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14f5c0.  v2:= temp @kind object;
  #L14f5c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f5c8.  v1:= temp @kind object;
  #L14f5ca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f5d0.  v1:= temp @kind object;
  #L14f5d2.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f5d8.  throw v0;
  #L14f5da.  if v0 == v2 then goto L14f5ea;
  #L14f5de.  v1:= 9I;
  #L14f5e2.  if v0 == v1 then goto L14f5ea;
  #L14f5e6.  if v0 != v3 then goto L14f646;
  #L14f5ea.  if v0 != v3 then goto L14f62a;
  #L14f5ee.  call temp:= `t`(v7) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L14f5f4.  v0:= temp @kind object;
  #L14f5f6.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #Try_start0.  
  #L14f5fa.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L14f5fe.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L14f604.  v0:= temp @kind wide;
  #L14f606.  v2:= 0I;
  #L14f608.  v7.`com.b.a.d.a.a` @type ^`int` := v2;
  #L14f60c.  v2:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14f610.  v3:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L14f614.  v3:= v3 + -1;
  #L14f618.  v4:= v2[v3];
  #L14f61c.  v4:= v4 + 1;
  #L14f620.  v2[v3]:= v4;
  #Try_end0.  
  #L14f624.  goto L14f542;
  #L14f626.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L14f628.  goto L14f574;
  #L14f62a.  if v0 != v2 then goto L14f640;
  #L14f62e.  v0:= 39I;
  #L14f632.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L14f638.  v0:= temp @kind object;
  #L14f63a.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L14f63e.  goto L14f5fa;
  #L14f640.  v0:= 34I;
  #L14f644.  goto L14f632;
  #L14f646.  v0:= new `java.lang.IllegalStateException`;
  #L14f64a.  v1:= new `java.lang.StringBuilder`;
  #L14f64e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f654.  v2:= "Expected a long but was " @kind object;
  #L14f658.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f65e.  v1:= temp @kind object;
  #L14f660.  call temp:= `f`(v7) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L14f666.  v2:= temp @kind object;
  #L14f668.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f66e.  v1:= temp @kind object;
  #L14f670.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14f676.  v2:= temp @kind object;
  #L14f678.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f67e.  v1:= temp @kind object;
  #L14f680.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f686.  v1:= temp @kind object;
  #L14f688.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f68e.  throw v0;
  #L14f690.  v2:= 0I;
  #L14f692.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v2 @kind object;
  #L14f696.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L14f69a.  v2:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14f69e.  v3:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L14f6a2.  v3:= v3 + -1;
  #L14f6a6.  v4:= v2[v3];
  #L14f6aa.  v4:= v4 + 1;
  #L14f6ae.  v2[v3]:= v4;
  #L14f6b2.  goto L14f542;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L14f626;
}
procedure `int` `m`(`com.b.a.d.a` v7 @kind this) @signature `Lcom/b/a/d/a;.m:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L14f6d8.  v3:= 10I;
  #L14f6dc.  v2:= 8I;
  #L14f6e0.  v6:= 0I;
  #L14f6e2.  v0:= v7.`com.b.a.d.a.a` @type ^`int`;
  #L14f6e6.  if v0 != 0 then goto L14f6f2;
  #L14f6ea.  call temp:= `r`(v7) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14f6f0.  v0:= temp;
  #L14f6f2.  v1:= 15I;
  #L14f6f6.  if v0 != v1 then goto L14f772;
  #L14f6fa.  v0:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L14f6fe.  v0:= (`int`) v0 @kind l2i;
  #L14f700.  v2:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L14f704.  v4:= (`long`) v0 @kind i2l;
  #L14f706.  v1:= lcmp(v2, v4);
  #L14f70a.  if v1 == 0 then goto L14f754;
  #L14f70e.  v0:= new `java.lang.NumberFormatException`;
  #L14f712.  v1:= new `java.lang.StringBuilder`;
  #L14f716.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f71c.  v2:= "Expected an int but was " @kind object;
  #L14f720.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f726.  v1:= temp @kind object;
  #L14f728.  v2:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L14f72c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f732.  v1:= temp @kind object;
  #L14f734.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14f73a.  v2:= temp @kind object;
  #L14f73c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f742.  v1:= temp @kind object;
  #L14f744.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f74a.  v1:= temp @kind object;
  #L14f74c.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f752.  throw v0;
  #L14f754.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L14f758.  v1:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14f75c.  v2:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L14f760.  v2:= v2 + -1;
  #L14f764.  v3:= v1[v2];
  #L14f768.  v3:= v3 + 1;
  #L14f76c.  v1[v2]:= v3;
  #L14f770.  return v0;
  #L14f772.  v1:= 16I;
  #L14f776.  if v0 != v1 then goto L14f808;
  #L14f77a.  v0:= new `java.lang.String`;
  #L14f77e.  v1:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14f782.  v2:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L14f786.  v3:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L14f78a.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L14f790.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L14f794.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L14f798.  v1:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L14f79c.  v0:= v0 + v1 @kind int;
  #L14f79e.  v7.`com.b.a.d.a.f` @type ^`int` := v0;
  #L14f7a2.  v0:= 11I;
  #L14f7a6.  v7.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14f7aa.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L14f7ae.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L14f7b4.  v2:= temp @kind wide;
  #L14f7b6.  v0:= (`int`) v2 @kind d2i;
  #L14f7b8.  v4:= (`double`) v0 @kind i2d;
  #L14f7ba.  v1:= dcmpl(v4, v2);
  #L14f7be.  if v1 == 0 then goto L14f8be;
  #L14f7c2.  v0:= new `java.lang.NumberFormatException`;
  #L14f7c6.  v1:= new `java.lang.StringBuilder`;
  #L14f7ca.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f7d0.  v2:= "Expected an int but was " @kind object;
  #L14f7d4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f7da.  v1:= temp @kind object;
  #L14f7dc.  v2:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L14f7e0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f7e6.  v1:= temp @kind object;
  #L14f7e8.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14f7ee.  v2:= temp @kind object;
  #L14f7f0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f7f6.  v1:= temp @kind object;
  #L14f7f8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f7fe.  v1:= temp @kind object;
  #L14f800.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f806.  throw v0;
  #L14f808.  if v0 == v2 then goto L14f818;
  #L14f80c.  v1:= 9I;
  #L14f810.  if v0 == v1 then goto L14f818;
  #L14f814.  if v0 != v3 then goto L14f874;
  #L14f818.  if v0 != v3 then goto L14f858;
  #L14f81c.  call temp:= `t`(v7) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L14f822.  v0:= temp @kind object;
  #L14f824.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #Try_start0.  
  #L14f828.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L14f82c.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L14f832.  v0:= temp;
  #L14f834.  v1:= 0I;
  #L14f836.  v7.`com.b.a.d.a.a` @type ^`int` := v1;
  #L14f83a.  v1:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14f83e.  v2:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L14f842.  v2:= v2 + -1;
  #L14f846.  v3:= v1[v2];
  #L14f84a.  v3:= v3 + 1;
  #L14f84e.  v1[v2]:= v3;
  #Try_end0.  
  #L14f852.  goto L14f770;
  #L14f854.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L14f856.  goto L14f7a2;
  #L14f858.  if v0 != v2 then goto L14f86e;
  #L14f85c.  v0:= 39I;
  #L14f860.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L14f866.  v0:= temp @kind object;
  #L14f868.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L14f86c.  goto L14f828;
  #L14f86e.  v0:= 34I;
  #L14f872.  goto L14f860;
  #L14f874.  v0:= new `java.lang.IllegalStateException`;
  #L14f878.  v1:= new `java.lang.StringBuilder`;
  #L14f87c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f882.  v2:= "Expected an int but was " @kind object;
  #L14f886.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f88c.  v1:= temp @kind object;
  #L14f88e.  call temp:= `f`(v7) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L14f894.  v2:= temp @kind object;
  #L14f896.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f89c.  v1:= temp @kind object;
  #L14f89e.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14f8a4.  v2:= temp @kind object;
  #L14f8a6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f8ac.  v1:= temp @kind object;
  #L14f8ae.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f8b4.  v1:= temp @kind object;
  #L14f8b6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f8bc.  throw v0;
  #L14f8be.  v1:= 0I;
  #L14f8c0.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v1 @kind object;
  #L14f8c4.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L14f8c8.  v1:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14f8cc.  v2:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L14f8d0.  v2:= v2 + -1;
  #L14f8d4.  v3:= v1[v2];
  #L14f8d8.  v3:= v3 + 1;
  #L14f8dc.  v1[v2]:= v3;
  #L14f8e0.  goto L14f770;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L14f854;
}
procedure `void` `n`(`com.b.a.d.a` v6 @kind this) @signature `Lcom/b/a/d/a;.n:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14f904.  v5:= 3I;
  #L14f906.  v4:= 1I;
  #L14f908.  v1:= 0I;
  #L14f90a.  v0:= v1;
  #L14f90c.  v2:= v6.`com.b.a.d.a.a` @type ^`int`;
  #L14f910.  if v2 != 0 then goto L14f91c;
  #L14f914.  call temp:= `r`(v6) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14f91a.  v2:= temp;
  #L14f91c.  if v2 != v5 then goto L14f960;
  #L14f920.  call `a`(v6, v4) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L14f926.  v0:= v0 + 1;
  #L14f92a.  v6.`com.b.a.d.a.a` @type ^`int` := v1;
  #L14f92e.  if v0 != 0 then goto L14f90c;
  #L14f932.  v0:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14f936.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14f93a.  v1:= v1 + -1;
  #L14f93e.  v2:= v0[v1];
  #L14f942.  v2:= v2 + 1;
  #L14f946.  v0[v1]:= v2;
  #L14f94a.  v0:= v6.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L14f94e.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14f952.  v1:= v1 + -1;
  #L14f956.  v2:= "null" @kind object;
  #L14f95a.  v0[v1]:= v2 @kind object;
  #L14f95e.  return @kind void;
  #L14f960.  if v2 != v4 then goto L14f970;
  #L14f964.  call `a`(v6, v5) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L14f96a.  v0:= v0 + 1;
  #L14f96e.  goto L14f92a;
  #L14f970.  v3:= 4I;
  #L14f972.  if v2 != v3 then goto L14f988;
  #L14f976.  v2:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14f97a.  v2:= v2 + -1;
  #L14f97e.  v6.`com.b.a.d.a.n` @type ^`int` := v2;
  #L14f982.  v0:= v0 + -1;
  #L14f986.  goto L14f92a;
  #L14f988.  v3:= 2I;
  #L14f98a.  if v2 != v3 then goto L14f9a0;
  #L14f98e.  v2:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14f992.  v2:= v2 + -1;
  #L14f996.  v6.`com.b.a.d.a.n` @type ^`int` := v2;
  #L14f99a.  v0:= v0 + -1;
  #L14f99e.  goto L14f92a;
  #L14f9a0.  v3:= 14I;
  #L14f9a4.  if v2 == v3 then goto L14f9b0;
  #L14f9a8.  v3:= 10I;
  #L14f9ac.  if v2 != v3 then goto L14f9b8;
  #L14f9b0.  call `u`(v6) @signature `Lcom/b/a/d/a;.u:()V` @kind direct;
  #L14f9b6.  goto L14f92a;
  #L14f9b8.  v3:= 8I;
  #L14f9bc.  if v2 == v3 then goto L14f9c8;
  #L14f9c0.  v3:= 12I;
  #L14f9c4.  if v2 != v3 then goto L14f9d4;
  #L14f9c8.  v2:= 39I;
  #L14f9cc.  call `c`(v6, v2) @signature `Lcom/b/a/d/a;.c:(C)V` @kind direct;
  #L14f9d2.  goto L14f92a;
  #L14f9d4.  v3:= 9I;
  #L14f9d8.  if v2 == v3 then goto L14f9e4;
  #L14f9dc.  v3:= 13I;
  #L14f9e0.  if v2 != v3 then goto L14f9f0;
  #L14f9e4.  v2:= 34I;
  #L14f9e8.  call `c`(v6, v2) @signature `Lcom/b/a/d/a;.c:(C)V` @kind direct;
  #L14f9ee.  goto L14f92a;
  #L14f9f0.  v3:= 16I;
  #L14f9f4.  if v2 != v3 then goto L14f92a;
  #L14f9f8.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L14f9fc.  v3:= v6.`com.b.a.d.a.k` @type ^`int`;
  #L14fa00.  v2:= v2 + v3 @kind int;
  #L14fa02.  v6.`com.b.a.d.a.f` @type ^`int` := v2;
  #L14fa06.  goto L14f92a;
}
procedure `java.lang.String` `p`(`com.b.a.d.a` v5 @kind this) @signature `Lcom/b/a/d/a;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L14fa18.  v0:= new `java.lang.StringBuilder`;
  #L14fa1c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14fa22.  v1:= 36I;
  #L14fa26.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fa2c.  v1:= temp @kind object;
  #L14fa2e.  v0:= 0I;
  #L14fa30.  v2:= v5.`com.b.a.d.a.n` @type ^`int`;
  #L14fa34.  if v0 >= v2 then goto L14fa9a;
  #L14fa38.  v3:= v5.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14fa3c.  v3:= v3[v0];
  #L14fa40.  goto L14faa4;
  #L14fa46.  v0:= v0 + 1;
  #L14fa4a.  goto L14fa34;
  #L14fa4c.  v3:= 91I;
  #L14fa50.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fa56.  v3:= temp @kind object;
  #L14fa58.  v4:= v5.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14fa5c.  v4:= v4[v0];
  #L14fa60.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fa66.  v3:= temp @kind object;
  #L14fa68.  v4:= 93I;
  #L14fa6c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fa72.  goto L14fa46;
  #L14fa74.  v3:= 46I;
  #L14fa78.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fa7e.  v3:= v5.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L14fa82.  v3:= v3[v0] @kind object;
  #L14fa86.  if v3 == 0 then goto L14fa46;
  #L14fa8a.  v3:= v5.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L14fa8e.  v3:= v3[v0] @kind object;
  #L14fa92.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fa98.  goto L14fa46;
  #L14fa9a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14faa0.  v0:= temp @kind object;
  #L14faa2.  return v0 @kind object;
  #L14faa4.  switch v3
                  | 1 => goto L14fa4c
                  | 2 => goto L14fa4c
                  | 3 => goto L14fa74
                  | 4 => goto L14fa74
                  | 5 => goto L14fa74
                  | else => goto L14fa46;
}
procedure `boolean` `q`(`com.b.a.d.a` v1 @kind this) @signature `Lcom/b/a/d/a;.q:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L14fad0.  v0:= v1.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L14fad4.  return v0;
}
procedure `int` `r`(`com.b.a.d.a` v8 @kind this) @signature `Lcom/b/a/d/a;.r:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L14fae8.  v3:= 7I;
  #L14faea.  v7:= 5I;
  #L14faec.  v0:= 4I;
  #L14faee.  v1:= 2I;
  #L14faf0.  v2:= 1I;
  #L14faf2.  v4:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14faf6.  v5:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L14fafa.  v5:= v5 + -1;
  #L14fafe.  v4:= v4[v5];
  #L14fb02.  if v4 != v2 then goto L14fb3e;
  #L14fb06.  v5:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14fb0a.  v6:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L14fb0e.  v6:= v6 + -1;
  #L14fb12.  v5[v6]:= v1;
  #L14fb16.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L14fb1c.  v5:= temp;
  #L14fb1e.  goto L14fdcc;
  #L14fb24.  v0:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L14fb28.  v0:= v0 + -1;
  #L14fb2c.  v8.`com.b.a.d.a.f` @type ^`int` := v0;
  #L14fb30.  call temp:= `o`(v8) @signature `Lcom/b/a/d/a;.o:()I` @kind direct;
  #L14fb36.  v0:= temp;
  #L14fb38.  if v0 == 0 then goto L14fd86;
  #L14fb3c.  return v0;
  #L14fb3e.  if v4 != v1 then goto L14fb6c;
  #L14fb42.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L14fb48.  v5:= temp;
  #L14fb4a.  goto L14fe08;
  #L14fb50.  v0:= "Unterminated array" @kind object;
  #L14fb54.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L14fb5a.  v0:= temp @kind object;
  #L14fb5c.  throw v0;
  #L14fb5e.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14fb62.  goto L14fb3c;
  #L14fb64.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L14fb6a.  goto L14fb16;
  #L14fb6c.  v5:= 3I;
  #L14fb6e.  if v4 == v5 then goto L14fb76;
  #L14fb72.  if v4 != v7 then goto L14fc2e;
  #L14fb76.  v3:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14fb7a.  v5:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L14fb7e.  v5:= v5 + -1;
  #L14fb82.  v3[v5]:= v0;
  #L14fb86.  if v4 != v7 then goto L14fbb4;
  #L14fb8a.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L14fb90.  v0:= temp;
  #L14fb92.  goto L14fe24;
  #L14fb98.  v0:= "Unterminated object" @kind object;
  #L14fb9c.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L14fba2.  v0:= temp @kind object;
  #L14fba4.  throw v0;
  #L14fba6.  v8.`com.b.a.d.a.a` @type ^`int` := v1;
  #L14fbaa.  v0:= v1;
  #L14fbac.  goto L14fb3c;
  #L14fbae.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L14fbb4.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L14fbba.  v0:= temp;
  #L14fbbc.  goto L14fe40;
  #L14fbc2.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L14fbc8.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L14fbcc.  v1:= v1 + -1;
  #L14fbd0.  v8.`com.b.a.d.a.f` @type ^`int` := v1;
  #L14fbd4.  v0:= (`char`) v0 @kind i2c;
  #L14fbd6.  call temp:= `a`(v8, v0) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L14fbdc.  v0:= temp;
  #L14fbde.  if v0 == 0 then goto L14fc20;
  #L14fbe2.  v0:= 14I;
  #L14fbe6.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14fbea.  goto L14fb3c;
  #L14fbec.  v0:= 13I;
  #L14fbf0.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14fbf4.  goto L14fb3c;
  #L14fbf6.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L14fbfc.  v0:= 12I;
  #L14fc00.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14fc04.  goto L14fb3c;
  #L14fc06.  if v4 == v7 then goto L14fc12;
  #L14fc0a.  v8.`com.b.a.d.a.a` @type ^`int` := v1;
  #L14fc0e.  v0:= v1;
  #L14fc10.  goto L14fb3c;
  #L14fc12.  v0:= "Expected name" @kind object;
  #L14fc16.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L14fc1c.  v0:= temp @kind object;
  #L14fc1e.  throw v0;
  #L14fc20.  v0:= "Expected name" @kind object;
  #L14fc24.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L14fc2a.  v0:= temp @kind object;
  #L14fc2c.  throw v0;
  #L14fc2e.  if v4 != v0 then goto L14fca0;
  #L14fc32.  v5:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14fc36.  v6:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L14fc3a.  v6:= v6 + -1;
  #L14fc3e.  v5[v6]:= v7;
  #L14fc42.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L14fc48.  v5:= temp;
  #L14fc4a.  goto L14fe5c;
  #L14fc50.  v0:= "Expected ':'" @kind object;
  #L14fc54.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L14fc5a.  v0:= temp @kind object;
  #L14fc5c.  throw v0;
  #L14fc5e.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L14fc64.  v5:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L14fc68.  v6:= v8.`com.b.a.d.a.g` @type ^`int`;
  #L14fc6c.  if v5 < v6 then goto L14fc7c;
  #L14fc70.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14fc76.  v5:= temp;
  #L14fc78.  if v5 == 0 then goto L14fb16;
  #L14fc7c.  v5:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14fc80.  v6:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L14fc84.  v5:= v5[v6] @kind char;
  #L14fc88.  v6:= 62I;
  #L14fc8c.  if v5 != v6 then goto L14fb16;
  #L14fc90.  v5:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L14fc94.  v5:= v5 + 1;
  #L14fc98.  v8.`com.b.a.d.a.f` @type ^`int` := v5;
  #L14fc9c.  goto L14fb16;
  #L14fca0.  v5:= 6I;
  #L14fca2.  if v4 != v5 then goto L14fcc8;
  #L14fca6.  v5:= v8.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L14fcaa.  if v5 == 0 then goto L14fcb4;
  #L14fcae.  call `z`(v8) @signature `Lcom/b/a/d/a;.z:()V` @kind direct;
  #L14fcb4.  v5:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14fcb8.  v6:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L14fcbc.  v6:= v6 + -1;
  #L14fcc0.  v5[v6]:= v3;
  #L14fcc4.  goto L14fb16;
  #L14fcc8.  if v4 != v3 then goto L14fcfe;
  #L14fccc.  v5:= 0I;
  #L14fcce.  call temp:= `b`(v8, v5) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L14fcd4.  v5:= temp;
  #L14fcd6.  v6:= -1I;
  #L14fcd8.  if v5 != v6 then goto L14fce8;
  #L14fcdc.  v0:= 17I;
  #L14fce0.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14fce4.  goto L14fb3c;
  #L14fce8.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L14fcee.  v5:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L14fcf2.  v5:= v5 + -1;
  #L14fcf6.  v8.`com.b.a.d.a.f` @type ^`int` := v5;
  #L14fcfa.  goto L14fb16;
  #L14fcfe.  v5:= 8I;
  #L14fd02.  if v4 != v5 then goto L14fb16;
  #L14fd06.  v0:= new `java.lang.IllegalStateException`;
  #L14fd0a.  v1:= "JsonReader is closed" @kind object;
  #L14fd0e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14fd14.  throw v0;
  #L14fd16.  if v4 != v2 then goto L14fd22;
  #L14fd1a.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14fd1e.  goto L14fb3c;
  #L14fd22.  if v4 == v2 then goto L14fd2a;
  #L14fd26.  if v4 != v1 then goto L14fd46;
  #L14fd2a.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L14fd30.  v0:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L14fd34.  v0:= v0 + -1;
  #L14fd38.  v8.`com.b.a.d.a.f` @type ^`int` := v0;
  #L14fd3c.  v8.`com.b.a.d.a.a` @type ^`int` := v3;
  #L14fd40.  v0:= v3;
  #L14fd42.  goto L14fb3c;
  #L14fd46.  v0:= "Unexpected value" @kind object;
  #L14fd4a.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L14fd50.  v0:= temp @kind object;
  #L14fd52.  throw v0;
  #L14fd54.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L14fd5a.  v0:= 8I;
  #L14fd5e.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14fd62.  goto L14fb3c;
  #L14fd66.  v0:= 9I;
  #L14fd6a.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14fd6e.  goto L14fb3c;
  #L14fd72.  v0:= 3I;
  #L14fd74.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14fd78.  goto L14fb3c;
  #L14fd7c.  v8.`com.b.a.d.a.a` @type ^`int` := v2;
  #L14fd80.  v0:= v2;
  #L14fd82.  goto L14fb3c;
  #L14fd86.  call temp:= `s`(v8) @signature `Lcom/b/a/d/a;.s:()I` @kind direct;
  #L14fd8c.  v0:= temp;
  #L14fd8e.  if v0 != 0 then goto L14fb3c;
  #L14fd92.  v0:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14fd96.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L14fd9a.  v0:= v0[v1] @kind char;
  #L14fd9e.  call temp:= `a`(v8, v0) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L14fda4.  v0:= temp;
  #L14fda6.  if v0 != 0 then goto L14fdb8;
  #L14fdaa.  v0:= "Expected value" @kind object;
  #L14fdae.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L14fdb4.  v0:= temp @kind object;
  #L14fdb6.  throw v0;
  #L14fdb8.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L14fdbe.  v0:= 10I;
  #L14fdc2.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14fdc6.  goto L14fb3c;
  #L14fdca.  
  #L14fdcc.  switch v5
                  | 34 => goto L14fd66
                  | 39 => goto L14fd54
                  | 44 => goto L14fd22
                  | 59 => goto L14fd22
                  | 91 => goto L14fd72
                  | 93 => goto L14fd16
                  | 123 => goto L14fd7c
                  | else => goto L14fb24;
  #L14fe08.  switch v5
                  | 44 => goto L14fb16
                  | 59 => goto L14fb64
                  | 93 => goto L14fb5e
                  | else => goto L14fb50;
  #L14fe24.  switch v0
                  | 44 => goto L14fbb4
                  | 59 => goto L14fbae
                  | 125 => goto L14fba6
                  | else => goto L14fb98;
  #L14fe40.  switch v0
                  | 34 => goto L14fbec
                  | 39 => goto L14fbf6
                  | 125 => goto L14fc06
                  | else => goto L14fbc2;
  #L14fe5c.  switch v5
                  | 58 => goto L14fb16
                  | 59 => goto L14fc50
                  | 60 => goto L14fc50
                  | 61 => goto L14fc5e
                  | else => goto L14fc50;
}
procedure `java.lang.String` `toString`(`com.b.a.d.a` v2 @kind this) @signature `Lcom/b/a/d/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14fe84.  v0:= new `java.lang.StringBuilder`;
  #L14fe88.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14fe8e.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L14fe94.  v1:= temp @kind object;
  #L14fe96.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L14fe9c.  v1:= temp @kind object;
  #L14fe9e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fea4.  v0:= temp @kind object;
  #L14fea6.  call temp:= `x`(v2) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14feac.  v1:= temp @kind object;
  #L14feae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14feb4.  v0:= temp @kind object;
  #L14feb6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14febc.  v0:= temp @kind object;
  #L14febe.  return v0 @kind object;
}
