record `com.b.a.b.f` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Number` @kind class {
  `java.lang.String` `com.b.a.b.f.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.b.f` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/b/a/b/f;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L156e3c.  call `<init>`(v0) @signature `Ljava/lang/Number;.<init>:()V` @kind direct;
  #L156e42.  v0.`com.b.a.b.f.a` @type ^`java.lang.String` := v1 @kind object;
  #L156e46.  return @kind void;
}
procedure `double` `doubleValue`(`com.b.a.b.f` v2 @kind this) @signature `Lcom/b/a/b/f;.doubleValue:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L156e58.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L156e5c.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L156e62.  v0:= temp @kind wide;
  #L156e64.  return v0 @kind wide;
}
procedure `boolean` `equals`(`com.b.a.b.f` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/b/a/b/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L156e78.  v1:= 1I;
  #L156e7a.  v0:= 0I;
  #L156e7c.  if v4 != v5 then goto L156e84;
  #L156e80.  v0:= v1;
  #L156e82.  return v0;
  #L156e84.  v2:= instanceof @variable v5 @type ^`com.b.a.b.f` @kind boolean;
  #L156e88.  if v2 == 0 then goto L156e82;
  #L156e8c.  v5:= (`com.b.a.b.f`) v5 @kind object;
  #L156e90.  v2:= v4.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L156e94.  v3:= v5.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L156e98.  if v2 == v3 then goto L156eb0;
  #L156e9c.  v2:= v4.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L156ea0.  v3:= v5.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L156ea4.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L156eaa.  v2:= temp;
  #L156eac.  if v2 == 0 then goto L156e82;
  #L156eb0.  v0:= v1;
  #L156eb2.  goto L156e82;
}
procedure `float` `floatValue`(`com.b.a.b.f` v1 @kind this) @signature `Lcom/b/a/b/f;.floatValue:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L156ec4.  v0:= v1.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L156ec8.  call temp:= `parseFloat`(v0) @signature `Ljava/lang/Float;.parseFloat:(Ljava/lang/String;)F` @kind static;
  #L156ece.  v0:= temp;
  #L156ed0.  return v0;
}
procedure `int` `hashCode`(`com.b.a.b.f` v1 @kind this) @signature `Lcom/b/a/b/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L156ee4.  v0:= v1.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L156ee8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L156eee.  v0:= temp;
  #L156ef0.  return v0;
}
procedure `int` `intValue`(`com.b.a.b.f` v2 @kind this) @signature `Lcom/b/a/b/f;.intValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L156f04.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L156f08.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #Try_end0.  
  #L156f0e.  v0:= temp;
  #L156f10.  return v0;
  #L156f12.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #Try_start1.  
  #L156f14.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L156f18.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #Try_end1.  
  #L156f1e.  v0:= temp @kind wide;
  #L156f20.  v0:= (`int`) v0 @kind l2i;
  #L156f22.  goto L156f10;
  #L156f24.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L156f26.  v0:= new `java.math.BigDecimal`;
  #L156f2a.  v1:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L156f2e.  call `<init>`(v0, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L156f34.  call temp:= `intValue`(v0) @signature `Ljava/math/BigDecimal;.intValue:()I` @kind virtual;
  #L156f3a.  v0:= temp;
  #L156f3c.  goto L156f10;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L156f12;
  catch `java.lang.NumberFormatException` @[Try_start1..Try_end1] goto L156f24;
}
procedure `long` `longValue`(`com.b.a.b.f` v2 @kind this) @signature `Lcom/b/a/b/f;.longValue:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L156f6c.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L156f70.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #Try_end0.  
  #L156f76.  v0:= temp @kind wide;
  #L156f78.  return v0 @kind wide;
  #L156f7a.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L156f7c.  v0:= new `java.math.BigDecimal`;
  #L156f80.  v1:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L156f84.  call `<init>`(v0, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L156f8a.  call temp:= `longValue`(v0) @signature `Ljava/math/BigDecimal;.longValue:()J` @kind virtual;
  #L156f90.  v0:= temp @kind wide;
  #L156f92.  goto L156f78;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L156f7a;
}
procedure `java.lang.String` `toString`(`com.b.a.b.f` v1 @kind this) @signature `Lcom/b/a/b/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L156fb4.  v0:= v1.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L156fb8.  return v0 @kind object;
}
