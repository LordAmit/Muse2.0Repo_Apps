record `com.b.a.b.a.e` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.d.a` @kind class {
  `java.lang.Object`[] `com.b.a.b.a.e.d` @AccessFlag PRIVATE;
  `int` `com.b.a.b.a.e.e` @AccessFlag PRIVATE;
  `java.lang.String`[] `com.b.a.b.a.e.f` @AccessFlag PRIVATE;
  `int`[] `com.b.a.b.a.e.g` @AccessFlag PRIVATE;
}
global `java.io.Reader` `@@com.b.a.b.a.e.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object` `@@com.b.a.b.a.e.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/a/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L14fed0.  v0:= new `com.b.a.b.a.e$1`;
  #L14fed4.  call `<init>`(v0) @signature `Lcom/b/a/b/a/e$1;.<init>:()V` @kind direct;
  #L14feda.  `@@com.b.a.b.a.e.b` @type ^`java.io.Reader` := v0 @kind object;
  #L14fede.  v0:= new `java.lang.Object`;
  #L14fee2.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L14fee8.  `@@com.b.a.b.a.e.c` @type ^`java.lang.Object` := v0 @kind object;
  #L14feec.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.e` v3 @kind this, `com.b.a.d.b` v4 @kind object) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L14ff00.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L14ff06.  v0:= temp @kind object;
  #L14ff08.  if v0 == v4 then goto L14ff6a;
  #L14ff0c.  v0:= new `java.lang.IllegalStateException`;
  #L14ff10.  v1:= new `java.lang.StringBuilder`;
  #L14ff14.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14ff1a.  v2:= "Expected " @kind object;
  #L14ff1e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ff24.  v1:= temp @kind object;
  #L14ff26.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ff2c.  v1:= temp @kind object;
  #L14ff2e.  v2:= " but was " @kind object;
  #L14ff32.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ff38.  v1:= temp @kind object;
  #L14ff3a.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L14ff40.  v2:= temp @kind object;
  #L14ff42.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ff48.  v1:= temp @kind object;
  #L14ff4a.  call temp:= `u`(v3) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L14ff50.  v2:= temp @kind object;
  #L14ff52.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ff58.  v1:= temp @kind object;
  #L14ff5a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ff60.  v1:= temp @kind object;
  #L14ff62.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14ff68.  throw v0;
  #L14ff6a.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.e` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14ff7c.  v5:= 0I;
  #L14ff7e.  v0:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L14ff82.  v1:= v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L14ff86.  v1:= length @variable v1;
  #L14ff88.  if v0 != v1 then goto L14ffe6;
  #L14ff8c.  v0:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L14ff90.  v0:= v0 * 2;
  #L14ff94.  v0:= new `java.lang.Object`[v0];
  #L14ff98.  v1:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L14ff9c.  v1:= v1 * 2;
  #L14ffa0.  v1:= new `int`[v1];
  #L14ffa4.  v2:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L14ffa8.  v2:= v2 * 2;
  #L14ffac.  v2:= new `java.lang.String`[v2];
  #L14ffb0.  v3:= v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L14ffb4.  v4:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L14ffb8.  call `arraycopy`(v3, v5, v0, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L14ffbe.  v3:= v6.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L14ffc2.  v4:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L14ffc6.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L14ffcc.  v3:= v6.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L14ffd0.  v4:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L14ffd4.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L14ffda.  v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] := v0 @kind object;
  #L14ffde.  v6.`com.b.a.b.a.e.g` @type ^`int`[] := v1 @kind object;
  #L14ffe2.  v6.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] := v2 @kind object;
  #L14ffe6.  v0:= v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L14ffea.  v1:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L14ffee.  v2:= v1 + 1;
  #L14fff2.  v6.`com.b.a.b.a.e.e` @type ^`int` := v2;
  #L14fff6.  v0[v1]:= v7 @kind object;
  #L14fffa.  return @kind void;
}
procedure `java.lang.Object` `s`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L15000c.  v0:= v2.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L150010.  v1:= v2.`com.b.a.b.a.e.e` @type ^`int`;
  #L150014.  v1:= v1 + -1;
  #L150018.  v0:= v0[v1] @kind object;
  #L15001c.  return v0 @kind object;
}
procedure `java.lang.Object` `t`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L150030.  v0:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L150034.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L150038.  v1:= v1 + -1;
  #L15003c.  v4.`com.b.a.b.a.e.e` @type ^`int` := v1;
  #L150040.  v0:= v0[v1] @kind object;
  #L150044.  v1:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L150048.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L15004c.  v3:= 0I;
  #L15004e.  v1[v2]:= v3 @kind object;
  #L150052.  return v0 @kind object;
}
procedure `java.lang.String` `u`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L150064.  v0:= new `java.lang.StringBuilder`;
  #L150068.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15006e.  v1:= " at path " @kind object;
  #L150072.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150078.  v0:= temp @kind object;
  #L15007a.  call temp:= `p`(v2) @signature `Lcom/b/a/b/a/e;.p:()Ljava/lang/String;` @kind virtual;
  #L150080.  v1:= temp @kind object;
  #L150082.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150088.  v0:= temp @kind object;
  #L15008a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L150090.  v0:= temp @kind object;
  #L150092.  return v0 @kind object;
}
procedure `void` `a`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1500a4.  v0:= `@@com.b.a.d.b.a` @type ^`com.b.a.d.b` @kind object;
  #L1500a8.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L1500ae.  call temp:= `s`(v3) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L1500b4.  v0:= temp @kind object;
  #L1500b6.  v0:= (`com.b.a.i`) v0 @kind object;
  #L1500ba.  call temp:= `iterator`(v0) @signature `Lcom/b/a/i;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L1500c0.  v0:= temp @kind object;
  #L1500c2.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L1500c8.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L1500cc.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L1500d0.  v1:= v1 + -1;
  #L1500d4.  v2:= 0I;
  #L1500d6.  v0[v1]:= v2;
  #L1500da.  return @kind void;
}
procedure `void` `b`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1500ec.  v0:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L1500f0.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L1500f6.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L1500fc.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L150102.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L150106.  if v0 <= 0 then goto L150122;
  #L15010a.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L15010e.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L150112.  v1:= v1 + -1;
  #L150116.  v2:= v0[v1];
  #L15011a.  v2:= v2 + 1;
  #L15011e.  v0[v1]:= v2;
  #L150122.  return @kind void;
}
procedure `void` `c`(`com.b.a.b.a.e` v1 @kind this) @signature `Lcom/b/a/b/a/e;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150134.  v0:= `@@com.b.a.d.b.c` @type ^`com.b.a.d.b` @kind object;
  #L150138.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L15013e.  call temp:= `s`(v1) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L150144.  v0:= temp @kind object;
  #L150146.  v0:= (`com.b.a.o`) v0 @kind object;
  #L15014a.  call temp:= `o`(v0) @signature `Lcom/b/a/o;.o:()Ljava/util/Set;` @kind virtual;
  #L150150.  v0:= temp @kind object;
  #L150152.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L150158.  v0:= temp @kind object;
  #L15015a.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L150160.  return @kind void;
}
procedure `void` `close`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L150174.  v3:= 1I;
  #L150176.  v0:= new `java.lang.Object`[v3];
  #L15017a.  v1:= 0I;
  #L15017c.  v2:= `@@com.b.a.b.a.e.c` @type ^`java.lang.Object` @kind object;
  #L150180.  v0[v1]:= v2 @kind object;
  #L150184.  v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] := v0 @kind object;
  #L150188.  v4.`com.b.a.b.a.e.e` @type ^`int` := v3;
  #L15018c.  return @kind void;
}
procedure `void` `d`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1501a0.  v0:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L1501a4.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L1501aa.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L1501b0.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L1501b6.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L1501ba.  if v0 <= 0 then goto L1501d6;
  #L1501be.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L1501c2.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L1501c6.  v1:= v1 + -1;
  #L1501ca.  v2:= v0[v1];
  #L1501ce.  v2:= v2 + 1;
  #L1501d2.  v0[v1]:= v2;
  #L1501d6.  return @kind void;
}
procedure `boolean` `e`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1501e8.  call temp:= `f`(v2) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L1501ee.  v0:= temp @kind object;
  #L1501f0.  v1:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L1501f4.  if v0 == v1 then goto L150204;
  #L1501f8.  v1:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L1501fc.  if v0 == v1 then goto L150204;
  #L150200.  v0:= 1I;
  #L150202.  return v0;
  #L150204.  v0:= 0I;
  #L150206.  goto L150202;
}
procedure `com.b.a.d.b` `f`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L150218.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L15021c.  if v0 != 0 then goto L150226;
  #L150220.  v0:= `@@com.b.a.d.b.j` @type ^`com.b.a.d.b` @kind object;
  #L150224.  return v0 @kind object;
  #L150226.  call temp:= `s`(v3) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L15022c.  v0:= temp @kind object;
  #L15022e.  v1:= instanceof @variable v0 @type ^`java.util.Iterator` @kind boolean;
  #L150232.  if v1 == 0 then goto L15028c;
  #L150236.  v1:= v3.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L15023a.  v2:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L15023e.  v2:= v2 + -2;
  #L150242.  v1:= v1[v2] @kind object;
  #L150246.  v1:= instanceof @variable v1 @type ^`com.b.a.o` @kind boolean;
  #L15024a.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L15024e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L150254.  v2:= temp;
  #L150256.  if v2 == 0 then goto L15027c;
  #L15025a.  if v1 == 0 then goto L150264;
  #L15025e.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L150262.  goto L150224;
  #L150264.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15026a.  v0:= temp @kind object;
  #L15026c.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L150272.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L150278.  v0:= temp @kind object;
  #L15027a.  goto L150224;
  #L15027c.  if v1 == 0 then goto L150286;
  #L150280.  v0:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L150284.  goto L150224;
  #L150286.  v0:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L15028a.  goto L150224;
  #L15028c.  v1:= instanceof @variable v0 @type ^`com.b.a.o` @kind boolean;
  #L150290.  if v1 == 0 then goto L15029a;
  #L150294.  v0:= `@@com.b.a.d.b.c` @type ^`com.b.a.d.b` @kind object;
  #L150298.  goto L150224;
  #L15029a.  v1:= instanceof @variable v0 @type ^`com.b.a.i` @kind boolean;
  #L15029e.  if v1 == 0 then goto L1502a8;
  #L1502a2.  v0:= `@@com.b.a.d.b.a` @type ^`com.b.a.d.b` @kind object;
  #L1502a6.  goto L150224;
  #L1502a8.  v1:= instanceof @variable v0 @type ^`com.b.a.q` @kind boolean;
  #L1502ac.  if v1 == 0 then goto L1502f6;
  #L1502b0.  v0:= (`com.b.a.q`) v0 @kind object;
  #L1502b4.  call temp:= `q`(v0) @signature `Lcom/b/a/q;.q:()Z` @kind virtual;
  #L1502ba.  v1:= temp;
  #L1502bc.  if v1 == 0 then goto L1502c6;
  #L1502c0.  v0:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L1502c4.  goto L150224;
  #L1502c6.  call temp:= `o`(v0) @signature `Lcom/b/a/q;.o:()Z` @kind virtual;
  #L1502cc.  v1:= temp;
  #L1502ce.  if v1 == 0 then goto L1502d8;
  #L1502d2.  v0:= `@@com.b.a.d.b.h` @type ^`com.b.a.d.b` @kind object;
  #L1502d6.  goto L150224;
  #L1502d8.  call temp:= `p`(v0) @signature `Lcom/b/a/q;.p:()Z` @kind virtual;
  #L1502de.  v0:= temp;
  #L1502e0.  if v0 == 0 then goto L1502ea;
  #L1502e4.  v0:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L1502e8.  goto L150224;
  #L1502ea.  v0:= new `java.lang.AssertionError`;
  #L1502ee.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1502f4.  throw v0;
  #L1502f6.  v1:= instanceof @variable v0 @type ^`com.b.a.n` @kind boolean;
  #L1502fa.  if v1 == 0 then goto L150304;
  #L1502fe.  v0:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L150302.  goto L150224;
  #L150304.  v1:= `@@com.b.a.b.a.e.c` @type ^`java.lang.Object` @kind object;
  #L150308.  if v0 != v1 then goto L15031c;
  #L15030c.  v0:= new `java.lang.IllegalStateException`;
  #L150310.  v1:= "JsonReader is closed" @kind object;
  #L150314.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15031a.  throw v0;
  #L15031c.  v0:= new `java.lang.AssertionError`;
  #L150320.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L150326.  throw v0;
}
procedure `java.lang.String` `g`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.g:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L150338.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L15033c.  call `a`(v4, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L150342.  call temp:= `s`(v4) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L150348.  v0:= temp @kind object;
  #L15034a.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L15034e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L150354.  v0:= temp @kind object;
  #L150356.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L15035a.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L150360.  v1:= temp @kind object;
  #L150362.  v1:= (`java.lang.String`) v1 @kind object;
  #L150366.  v2:= v4.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L15036a.  v3:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L15036e.  v3:= v3 + -1;
  #L150372.  v2[v3]:= v1 @kind object;
  #L150376.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L15037c.  v0:= temp @kind object;
  #L15037e.  call `a`(v4, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L150384.  return v1 @kind object;
}
procedure `java.lang.String` `h`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.h:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L150398.  call temp:= `f`(v4) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L15039e.  v0:= temp @kind object;
  #L1503a0.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L1503a4.  if v0 == v1 then goto L15040a;
  #L1503a8.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L1503ac.  if v0 == v1 then goto L15040a;
  #L1503b0.  v1:= new `java.lang.IllegalStateException`;
  #L1503b4.  v2:= new `java.lang.StringBuilder`;
  #L1503b8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1503be.  v3:= "Expected " @kind object;
  #L1503c2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1503c8.  v2:= temp @kind object;
  #L1503ca.  v3:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L1503ce.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1503d4.  v2:= temp @kind object;
  #L1503d6.  v3:= " but was " @kind object;
  #L1503da.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1503e0.  v2:= temp @kind object;
  #L1503e2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1503e8.  v0:= temp @kind object;
  #L1503ea.  call temp:= `u`(v4) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L1503f0.  v2:= temp @kind object;
  #L1503f2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1503f8.  v0:= temp @kind object;
  #L1503fa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L150400.  v0:= temp @kind object;
  #L150402.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L150408.  throw v1;
  #L15040a.  call temp:= `t`(v4) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L150410.  v0:= temp @kind object;
  #L150412.  v0:= (`com.b.a.q`) v0 @kind object;
  #L150416.  call temp:= `b`(v0) @signature `Lcom/b/a/q;.b:()Ljava/lang/String;` @kind virtual;
  #L15041c.  v0:= temp @kind object;
  #L15041e.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L150422.  if v1 <= 0 then goto L15043e;
  #L150426.  v1:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L15042a.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L15042e.  v2:= v2 + -1;
  #L150432.  v3:= v1[v2];
  #L150436.  v3:= v3 + 1;
  #L15043a.  v1[v2]:= v3;
  #L15043e.  return v0 @kind object;
}
procedure `boolean` `i`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L150450.  v0:= `@@com.b.a.d.b.h` @type ^`com.b.a.d.b` @kind object;
  #L150454.  call `a`(v4, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L15045a.  call temp:= `t`(v4) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L150460.  v0:= temp @kind object;
  #L150462.  v0:= (`com.b.a.q`) v0 @kind object;
  #L150466.  call temp:= `f`(v0) @signature `Lcom/b/a/q;.f:()Z` @kind virtual;
  #L15046c.  v0:= temp;
  #L15046e.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L150472.  if v1 <= 0 then goto L15048e;
  #L150476.  v1:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L15047a.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L15047e.  v2:= v2 + -1;
  #L150482.  v3:= v1[v2];
  #L150486.  v3:= v3 + 1;
  #L15048a.  v1[v2]:= v3;
  #L15048e.  return v0;
}
procedure `void` `j`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.j:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1504a0.  v0:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L1504a4.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L1504aa.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L1504b0.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L1504b4.  if v0 <= 0 then goto L1504d0;
  #L1504b8.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L1504bc.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L1504c0.  v1:= v1 + -1;
  #L1504c4.  v2:= v0[v1];
  #L1504c8.  v2:= v2 + 1;
  #L1504cc.  v0[v1]:= v2;
  #L1504d0.  return @kind void;
}
procedure `double` `k`(`com.b.a.b.a.e` v5 @kind this) @signature `Lcom/b/a/b/a/e;.k:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1504e4.  call temp:= `f`(v5) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L1504ea.  v0:= temp @kind object;
  #L1504ec.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L1504f0.  if v0 == v1 then goto L150556;
  #L1504f4.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L1504f8.  if v0 == v1 then goto L150556;
  #L1504fc.  v1:= new `java.lang.IllegalStateException`;
  #L150500.  v2:= new `java.lang.StringBuilder`;
  #L150504.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15050a.  v3:= "Expected " @kind object;
  #L15050e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150514.  v2:= temp @kind object;
  #L150516.  v3:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L15051a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150520.  v2:= temp @kind object;
  #L150522.  v3:= " but was " @kind object;
  #L150526.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15052c.  v2:= temp @kind object;
  #L15052e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150534.  v0:= temp @kind object;
  #L150536.  call temp:= `u`(v5) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L15053c.  v2:= temp @kind object;
  #L15053e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150544.  v0:= temp @kind object;
  #L150546.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15054c.  v0:= temp @kind object;
  #L15054e.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L150554.  throw v1;
  #L150556.  call temp:= `s`(v5) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L15055c.  v0:= temp @kind object;
  #L15055e.  v0:= (`com.b.a.q`) v0 @kind object;
  #L150562.  call temp:= `c`(v0) @signature `Lcom/b/a/q;.c:()D` @kind virtual;
  #L150568.  v0:= temp @kind wide;
  #L15056a.  call temp:= `q`(v5) @signature `Lcom/b/a/b/a/e;.q:()Z` @kind virtual;
  #L150570.  v2:= temp;
  #L150572.  if v2 != 0 then goto L1505c0;
  #L150576.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L15057c.  v2:= temp;
  #L15057e.  if v2 != 0 then goto L15058e;
  #L150582.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L150588.  v2:= temp;
  #L15058a.  if v2 == 0 then goto L1505c0;
  #L15058e.  v2:= new `java.lang.NumberFormatException`;
  #L150592.  v3:= new `java.lang.StringBuilder`;
  #L150596.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15059c.  v4:= "JSON forbids NaN and infinities: " @kind object;
  #L1505a0.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1505a6.  v3:= temp @kind object;
  #L1505a8.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L1505ae.  v0:= temp @kind object;
  #L1505b0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1505b6.  v0:= temp @kind object;
  #L1505b8.  call `<init>`(v2, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1505be.  throw v2;
  #L1505c0.  call temp:= `t`(v5) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L1505c6.  v2:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L1505ca.  if v2 <= 0 then goto L1505e6;
  #L1505ce.  v2:= v5.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L1505d2.  v3:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L1505d6.  v3:= v3 + -1;
  #L1505da.  v4:= v2[v3];
  #L1505de.  v4:= v4 + 1;
  #L1505e2.  v2[v3]:= v4;
  #L1505e6.  return v0 @kind wide;
}
procedure `long` `l`(`com.b.a.b.a.e` v5 @kind this) @signature `Lcom/b/a/b/a/e;.l:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1505f8.  call temp:= `f`(v5) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L1505fe.  v0:= temp @kind object;
  #L150600.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L150604.  if v0 == v1 then goto L15066a;
  #L150608.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L15060c.  if v0 == v1 then goto L15066a;
  #L150610.  v1:= new `java.lang.IllegalStateException`;
  #L150614.  v2:= new `java.lang.StringBuilder`;
  #L150618.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15061e.  v3:= "Expected " @kind object;
  #L150622.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150628.  v2:= temp @kind object;
  #L15062a.  v3:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L15062e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150634.  v2:= temp @kind object;
  #L150636.  v3:= " but was " @kind object;
  #L15063a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150640.  v2:= temp @kind object;
  #L150642.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150648.  v0:= temp @kind object;
  #L15064a.  call temp:= `u`(v5) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L150650.  v2:= temp @kind object;
  #L150652.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150658.  v0:= temp @kind object;
  #L15065a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L150660.  v0:= temp @kind object;
  #L150662.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L150668.  throw v1;
  #L15066a.  call temp:= `s`(v5) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L150670.  v0:= temp @kind object;
  #L150672.  v0:= (`com.b.a.q`) v0 @kind object;
  #L150676.  call temp:= `d`(v0) @signature `Lcom/b/a/q;.d:()J` @kind virtual;
  #L15067c.  v0:= temp @kind wide;
  #L15067e.  call temp:= `t`(v5) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L150684.  v2:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L150688.  if v2 <= 0 then goto L1506a4;
  #L15068c.  v2:= v5.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L150690.  v3:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L150694.  v3:= v3 + -1;
  #L150698.  v4:= v2[v3];
  #L15069c.  v4:= v4 + 1;
  #L1506a0.  v2[v3]:= v4;
  #L1506a4.  return v0 @kind wide;
}
procedure `int` `m`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.m:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1506b8.  call temp:= `f`(v4) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L1506be.  v0:= temp @kind object;
  #L1506c0.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L1506c4.  if v0 == v1 then goto L15072a;
  #L1506c8.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L1506cc.  if v0 == v1 then goto L15072a;
  #L1506d0.  v1:= new `java.lang.IllegalStateException`;
  #L1506d4.  v2:= new `java.lang.StringBuilder`;
  #L1506d8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1506de.  v3:= "Expected " @kind object;
  #L1506e2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1506e8.  v2:= temp @kind object;
  #L1506ea.  v3:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L1506ee.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1506f4.  v2:= temp @kind object;
  #L1506f6.  v3:= " but was " @kind object;
  #L1506fa.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150700.  v2:= temp @kind object;
  #L150702.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150708.  v0:= temp @kind object;
  #L15070a.  call temp:= `u`(v4) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L150710.  v2:= temp @kind object;
  #L150712.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150718.  v0:= temp @kind object;
  #L15071a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L150720.  v0:= temp @kind object;
  #L150722.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L150728.  throw v1;
  #L15072a.  call temp:= `s`(v4) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L150730.  v0:= temp @kind object;
  #L150732.  v0:= (`com.b.a.q`) v0 @kind object;
  #L150736.  call temp:= `e`(v0) @signature `Lcom/b/a/q;.e:()I` @kind virtual;
  #L15073c.  v0:= temp;
  #L15073e.  call temp:= `t`(v4) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L150744.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L150748.  if v1 <= 0 then goto L150764;
  #L15074c.  v1:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L150750.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L150754.  v2:= v2 + -1;
  #L150758.  v3:= v1[v2];
  #L15075c.  v3:= v3 + 1;
  #L150760.  v1[v2]:= v3;
  #L150764.  return v0;
}
procedure `void` `n`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.n:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L150778.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L15077e.  v0:= temp @kind object;
  #L150780.  v1:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L150784.  if v0 != v1 then goto L1507bc;
  #L150788.  call temp:= `g`(v3) @signature `Lcom/b/a/b/a/e;.g:()Ljava/lang/String;` @kind virtual;
  #L15078e.  v0:= v3.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L150792.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L150796.  v1:= v1 + -2;
  #L15079a.  v2:= "null" @kind object;
  #L15079e.  v0[v1]:= v2 @kind object;
  #L1507a2.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L1507a6.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L1507aa.  v1:= v1 + -1;
  #L1507ae.  v2:= v0[v1];
  #L1507b2.  v2:= v2 + 1;
  #L1507b6.  v0[v1]:= v2;
  #L1507ba.  return @kind void;
  #L1507bc.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L1507c2.  v0:= v3.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L1507c6.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L1507ca.  v1:= v1 + -1;
  #L1507ce.  v2:= "null" @kind object;
  #L1507d2.  v0[v1]:= v2 @kind object;
  #L1507d6.  goto L1507a2;
}
procedure `void` `o`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.o:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1507e8.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L1507ec.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L1507f2.  call temp:= `s`(v2) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L1507f8.  v0:= temp @kind object;
  #L1507fa.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L1507fe.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L150804.  v0:= temp @kind object;
  #L150806.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L15080a.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L150810.  v1:= temp @kind object;
  #L150812.  call `a`(v2, v1) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L150818.  v1:= new `com.b.a.q`;
  #L15081c.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L150822.  v0:= temp @kind object;
  #L150824.  v0:= (`java.lang.String`) v0 @kind object;
  #L150828.  call `<init>`(v1, v0) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15082e.  call `a`(v2, v1) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L150834.  return @kind void;
}
procedure `java.lang.String` `p`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L150848.  v0:= new `java.lang.StringBuilder`;
  #L15084c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L150852.  v1:= 36I;
  #L150856.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15085c.  v1:= temp @kind object;
  #L15085e.  v0:= 0I;
  #L150860.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L150864.  if v0 >= v2 then goto L150902;
  #L150868.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L15086c.  v2:= v2[v0] @kind object;
  #L150870.  v2:= instanceof @variable v2 @type ^`com.b.a.i` @kind boolean;
  #L150874.  if v2 == 0 then goto L1508b8;
  #L150878.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L15087c.  v0:= v0 + 1;
  #L150880.  v2:= v2[v0] @kind object;
  #L150884.  v2:= instanceof @variable v2 @type ^`java.util.Iterator` @kind boolean;
  #L150888.  if v2 == 0 then goto L1508b2;
  #L15088c.  v2:= 91I;
  #L150890.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L150896.  v2:= temp @kind object;
  #L150898.  v3:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L15089c.  v3:= v3[v0];
  #L1508a0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1508a6.  v2:= temp @kind object;
  #L1508a8.  v3:= 93I;
  #L1508ac.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1508b2.  v0:= v0 + 1;
  #L1508b6.  goto L150860;
  #L1508b8.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L1508bc.  v2:= v2[v0] @kind object;
  #L1508c0.  v2:= instanceof @variable v2 @type ^`com.b.a.o` @kind boolean;
  #L1508c4.  if v2 == 0 then goto L1508b2;
  #L1508c8.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L1508cc.  v0:= v0 + 1;
  #L1508d0.  v2:= v2[v0] @kind object;
  #L1508d4.  v2:= instanceof @variable v2 @type ^`java.util.Iterator` @kind boolean;
  #L1508d8.  if v2 == 0 then goto L1508b2;
  #L1508dc.  v2:= 46I;
  #L1508e0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1508e6.  v2:= v4.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L1508ea.  v2:= v2[v0] @kind object;
  #L1508ee.  if v2 == 0 then goto L1508b2;
  #L1508f2.  v2:= v4.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L1508f6.  v2:= v2[v0] @kind object;
  #L1508fa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150900.  goto L1508b2;
  #L150902.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L150908.  v0:= temp @kind object;
  #L15090a.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.b.a.b.a.e` v1 @kind this) @signature `Lcom/b/a/b/a/e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15091c.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L150922.  v0:= temp @kind object;
  #L150924.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L15092a.  v0:= temp @kind object;
  #L15092c.  return v0 @kind object;
}
