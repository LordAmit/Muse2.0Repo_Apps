record `com.b.a.i` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.l` @kind class, `java.lang.Iterable` @kind interface {
  `java.util.List` `com.b.a.i.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.i` v1 @kind this) @signature `Lcom/b/a/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L159cb4.  call `<init>`(v1) @signature `Lcom/b/a/l;.<init>:()V` @kind direct;
  #L159cba.  v0:= new `java.util.ArrayList`;
  #L159cbe.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L159cc4.  v1.`com.b.a.i.a` @type ^`java.util.List` := v0 @kind object;
  #L159cc8.  return @kind void;
}
procedure `java.lang.Number` `a`(`com.b.a.i` v2 @kind this) @signature `Lcom/b/a/i;.a:()Ljava/lang/Number;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159cdc.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159ce0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L159ce6.  v0:= temp;
  #L159ce8.  v1:= 1I;
  #L159cea.  if v0 != v1 then goto L159d0a;
  #L159cee.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159cf2.  v1:= 0I;
  #L159cf4.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L159cfa.  v0:= temp @kind object;
  #L159cfc.  v0:= (`com.b.a.l`) v0 @kind object;
  #L159d00.  call temp:= `a`(v0) @signature `Lcom/b/a/l;.a:()Ljava/lang/Number;` @kind virtual;
  #L159d06.  v0:= temp @kind object;
  #L159d08.  return v0 @kind object;
  #L159d0a.  v0:= new `java.lang.IllegalStateException`;
  #L159d0e.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L159d14.  throw v0;
}
procedure `void` `a`(`com.b.a.i` v1 @kind this, `com.b.a.l` v2 @kind object) @signature `Lcom/b/a/i;.a:(Lcom/b/a/l;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159d28.  if v2 != 0 then goto L159d30;
  #L159d2c.  v2:= `@@com.b.a.n.a` @type ^`com.b.a.n` @kind object;
  #L159d30.  v0:= v1.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159d34.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L159d3a.  return @kind void;
}
procedure `java.lang.String` `b`(`com.b.a.i` v2 @kind this) @signature `Lcom/b/a/i;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159d4c.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159d50.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L159d56.  v0:= temp;
  #L159d58.  v1:= 1I;
  #L159d5a.  if v0 != v1 then goto L159d7a;
  #L159d5e.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159d62.  v1:= 0I;
  #L159d64.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L159d6a.  v0:= temp @kind object;
  #L159d6c.  v0:= (`com.b.a.l`) v0 @kind object;
  #L159d70.  call temp:= `b`(v0) @signature `Lcom/b/a/l;.b:()Ljava/lang/String;` @kind virtual;
  #L159d76.  v0:= temp @kind object;
  #L159d78.  return v0 @kind object;
  #L159d7a.  v0:= new `java.lang.IllegalStateException`;
  #L159d7e.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L159d84.  throw v0;
}
procedure `double` `c`(`com.b.a.i` v2 @kind this) @signature `Lcom/b/a/i;.c:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159d98.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159d9c.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L159da2.  v0:= temp;
  #L159da4.  v1:= 1I;
  #L159da6.  if v0 != v1 then goto L159dc6;
  #L159daa.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159dae.  v1:= 0I;
  #L159db0.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L159db6.  v0:= temp @kind object;
  #L159db8.  v0:= (`com.b.a.l`) v0 @kind object;
  #L159dbc.  call temp:= `c`(v0) @signature `Lcom/b/a/l;.c:()D` @kind virtual;
  #L159dc2.  v0:= temp @kind wide;
  #L159dc4.  return v0 @kind wide;
  #L159dc6.  v0:= new `java.lang.IllegalStateException`;
  #L159dca.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L159dd0.  throw v0;
}
procedure `long` `d`(`com.b.a.i` v2 @kind this) @signature `Lcom/b/a/i;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159de4.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159de8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L159dee.  v0:= temp;
  #L159df0.  v1:= 1I;
  #L159df2.  if v0 != v1 then goto L159e12;
  #L159df6.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159dfa.  v1:= 0I;
  #L159dfc.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L159e02.  v0:= temp @kind object;
  #L159e04.  v0:= (`com.b.a.l`) v0 @kind object;
  #L159e08.  call temp:= `d`(v0) @signature `Lcom/b/a/l;.d:()J` @kind virtual;
  #L159e0e.  v0:= temp @kind wide;
  #L159e10.  return v0 @kind wide;
  #L159e12.  v0:= new `java.lang.IllegalStateException`;
  #L159e16.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L159e1c.  throw v0;
}
procedure `int` `e`(`com.b.a.i` v2 @kind this) @signature `Lcom/b/a/i;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159e30.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159e34.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L159e3a.  v0:= temp;
  #L159e3c.  v1:= 1I;
  #L159e3e.  if v0 != v1 then goto L159e5e;
  #L159e42.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159e46.  v1:= 0I;
  #L159e48.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L159e4e.  v0:= temp @kind object;
  #L159e50.  v0:= (`com.b.a.l`) v0 @kind object;
  #L159e54.  call temp:= `e`(v0) @signature `Lcom/b/a/l;.e:()I` @kind virtual;
  #L159e5a.  v0:= temp;
  #L159e5c.  return v0;
  #L159e5e.  v0:= new `java.lang.IllegalStateException`;
  #L159e62.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L159e68.  throw v0;
}
procedure `boolean` `equals`(`com.b.a.i` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/i;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159e7c.  if v3 == v2 then goto L159ea0;
  #L159e80.  v0:= instanceof @variable v3 @type ^`com.b.a.i` @kind boolean;
  #L159e84.  if v0 == 0 then goto L159ea4;
  #L159e88.  v3:= (`com.b.a.i`) v3 @kind object;
  #L159e8c.  v0:= v3.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159e90.  v1:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159e94.  call temp:= `equals`(v0, v1) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L159e9a.  v0:= temp;
  #L159e9c.  if v0 == 0 then goto L159ea4;
  #L159ea0.  v0:= 1I;
  #L159ea2.  return v0;
  #L159ea4.  v0:= 0I;
  #L159ea6.  goto L159ea2;
}
procedure `boolean` `f`(`com.b.a.i` v2 @kind this) @signature `Lcom/b/a/i;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159eb8.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159ebc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L159ec2.  v0:= temp;
  #L159ec4.  v1:= 1I;
  #L159ec6.  if v0 != v1 then goto L159ee6;
  #L159eca.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159ece.  v1:= 0I;
  #L159ed0.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L159ed6.  v0:= temp @kind object;
  #L159ed8.  v0:= (`com.b.a.l`) v0 @kind object;
  #L159edc.  call temp:= `f`(v0) @signature `Lcom/b/a/l;.f:()Z` @kind virtual;
  #L159ee2.  v0:= temp;
  #L159ee4.  return v0;
  #L159ee6.  v0:= new `java.lang.IllegalStateException`;
  #L159eea.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L159ef0.  throw v0;
}
procedure `int` `hashCode`(`com.b.a.i` v1 @kind this) @signature `Lcom/b/a/i;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159f04.  v0:= v1.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159f08.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L159f0e.  v0:= temp;
  #L159f10.  return v0;
}
procedure `java.util.Iterator` `iterator`(`com.b.a.i` v1 @kind this) @signature `Lcom/b/a/i;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159f24.  v0:= v1.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L159f28.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L159f2e.  v0:= temp @kind object;
  #L159f30.  return v0 @kind object;
}
