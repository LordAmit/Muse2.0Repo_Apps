record `com.b.a.b.d` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.w` @kind interface, `java.lang.Cloneable` @kind interface {
  `double` `com.b.a.b.d.b` @AccessFlag PRIVATE;
  `int` `com.b.a.b.d.c` @AccessFlag PRIVATE;
  `boolean` `com.b.a.b.d.d` @AccessFlag PRIVATE;
  `boolean` `com.b.a.b.d.e` @AccessFlag PRIVATE;
  `java.util.List` `com.b.a.b.d.f` @AccessFlag PRIVATE;
  `java.util.List` `com.b.a.b.d.g` @AccessFlag PRIVATE;
}
global `com.b.a.b.d` `@@com.b.a.b.d.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1569ec.  v0:= new `com.b.a.b.d`;
  #L1569f0.  call `<init>`(v0) @signature `Lcom/b/a/b/d;.<init>:()V` @kind direct;
  #L1569f6.  `@@com.b.a.b.d.a` @type ^`com.b.a.b.d` := v0 @kind object;
  #L1569fa.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.b.d` v2 @kind this) @signature `Lcom/b/a/b/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L156a0c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L156a12.  v0:= -1.0D;
  #L156a16.  v2.`com.b.a.b.d.b` @type ^`double` := v0 @kind wide;
  #L156a1a.  v0:= 136I;
  #L156a1e.  v2.`com.b.a.b.d.c` @type ^`int` := v0;
  #L156a22.  v0:= 1I;
  #L156a24.  v2.`com.b.a.b.d.d` @type ^`boolean` := v0 @kind boolean;
  #L156a28.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L156a2e.  v0:= temp @kind object;
  #L156a30.  v2.`com.b.a.b.d.f` @type ^`java.util.List` := v0 @kind object;
  #L156a34.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L156a3a.  v0:= temp @kind object;
  #L156a3c.  v2.`com.b.a.b.d.g` @type ^`java.util.List` := v0 @kind object;
  #L156a40.  return @kind void;
}
procedure `boolean` `a`(`com.b.a.b.d` v4 @kind this, `com.b.a.a.d` v5 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L156a54.  if v5 == 0 then goto L156a70;
  #L156a58.  call temp:= `a`(v5) @signature `Lcom/b/a/a/d;.a:()D` @kind interface;
  #L156a5e.  v0:= temp @kind wide;
  #L156a60.  v2:= v4.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L156a64.  v0:= dcmpl(v0, v2);
  #L156a68.  if v0 <= 0 then goto L156a70;
  #L156a6c.  v0:= 0I;
  #L156a6e.  return v0;
  #L156a70.  v0:= 1I;
  #L156a72.  goto L156a6e;
}
procedure `boolean` `a`(`com.b.a.b.d` v1 @kind this, `com.b.a.a.d` v2 @kind object, `com.b.a.a.e` v3 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;Lcom/b/a/a/e;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L156a84.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;)Z` @kind direct;
  #L156a8a.  v0:= temp;
  #L156a8c.  if v0 == 0 then goto L156aa0;
  #L156a90.  call temp:= `a`(v1, v3) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/e;)Z` @kind direct;
  #L156a96.  v0:= temp;
  #L156a98.  if v0 == 0 then goto L156aa0;
  #L156a9c.  v0:= 1I;
  #L156a9e.  return v0;
  #L156aa0.  v0:= 0I;
  #L156aa2.  goto L156a9e;
}
procedure `boolean` `a`(`com.b.a.b.d` v4 @kind this, `com.b.a.a.e` v5 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/e;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L156ab4.  if v5 == 0 then goto L156ad0;
  #L156ab8.  call temp:= `a`(v5) @signature `Lcom/b/a/a/e;.a:()D` @kind interface;
  #L156abe.  v0:= temp @kind wide;
  #L156ac0.  v2:= v4.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L156ac4.  v0:= dcmpg(v0, v2);
  #L156ac8.  if v0 > 0 then goto L156ad0;
  #L156acc.  v0:= 0I;
  #L156ace.  return v0;
  #L156ad0.  v0:= 1I;
  #L156ad2.  goto L156ace;
}
procedure `boolean` `a`(`com.b.a.b.d` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L156ae4.  v0:= constclass @type ^`java.lang.Enum` @kind object;
  #L156ae8.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L156aee.  v0:= temp;
  #L156af0.  if v0 != 0 then goto L156b10;
  #L156af4.  call temp:= `isAnonymousClass`(v2) @signature `Ljava/lang/Class;.isAnonymousClass:()Z` @kind virtual;
  #L156afa.  v0:= temp;
  #L156afc.  if v0 != 0 then goto L156b0c;
  #L156b00.  call temp:= `isLocalClass`(v2) @signature `Ljava/lang/Class;.isLocalClass:()Z` @kind virtual;
  #L156b06.  v0:= temp;
  #L156b08.  if v0 == 0 then goto L156b10;
  #L156b0c.  v0:= 1I;
  #L156b0e.  return v0;
  #L156b10.  v0:= 0I;
  #L156b12.  goto L156b0e;
}
procedure `boolean` `b`(`com.b.a.b.d` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/b/a/b/d;.b:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L156b24.  call temp:= `isMemberClass`(v2) @signature `Ljava/lang/Class;.isMemberClass:()Z` @kind virtual;
  #L156b2a.  v0:= temp;
  #L156b2c.  if v0 == 0 then goto L156b40;
  #L156b30.  call temp:= `c`(v1, v2) @signature `Lcom/b/a/b/d;.c:(Ljava/lang/Class;)Z` @kind direct;
  #L156b36.  v0:= temp;
  #L156b38.  if v0 != 0 then goto L156b40;
  #L156b3c.  v0:= 1I;
  #L156b3e.  return v0;
  #L156b40.  v0:= 0I;
  #L156b42.  goto L156b3e;
}
procedure `boolean` `c`(`com.b.a.b.d` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/b/a/b/d;.c:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L156b54.  call temp:= `getModifiers`(v2) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L156b5a.  v0:= temp;
  #L156b5c.  v0:= v0 ^& 8;
  #L156b60.  if v0 == 0 then goto L156b68;
  #L156b64.  v0:= 1I;
  #L156b66.  return v0;
  #L156b68.  v0:= 0I;
  #L156b6a.  goto L156b66;
}
procedure `com.b.a.b.d` `a`(`com.b.a.b.d` v2 @kind this) @signature `Lcom/b/a/b/d;.a:()Lcom/b/a/b/d;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L156b7c.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L156b82.  v0:= temp @kind object;
  #L156b84.  v0:= (`com.b.a.b.d`) v0 @kind object;
  #Try_end0.  
  #L156b88.  return v0 @kind object;
  #L156b8a.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L156b8c.  v1:= new `java.lang.AssertionError`;
  #L156b90.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L156b96.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[Try_start0..Try_end0] goto L156b8a;
}
procedure `com.b.a.v` `a`(`com.b.a.b.d` v6 @kind this, `com.b.a.f` v7 @kind object, `com.b.a.c.a` v8 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/f;Lcom/b/a/c/a;)Lcom/b/a/v;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L156bb8.  call temp:= `a`(v8) @signature `Lcom/b/a/c/a;.a:()Ljava/lang/Class;` @kind virtual;
  #L156bbe.  v0:= temp @kind object;
  #L156bc0.  v1:= 1I;
  #L156bc2.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;Z)Z` @kind virtual;
  #L156bc8.  v3:= temp;
  #L156bca.  v1:= 0I;
  #L156bcc.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;Z)Z` @kind virtual;
  #L156bd2.  v2:= temp;
  #L156bd4.  if v3 != 0 then goto L156be0;
  #L156bd8.  if v2 != 0 then goto L156be0;
  #L156bdc.  v0:= 0I;
  #L156bde.  return v0 @kind object;
  #L156be0.  v0:= new `com.b.a.b.d$1`;
  #L156be4.  v1:= v6 @kind object;
  #L156be6.  v4:= v7 @kind object;
  #L156be8.  v5:= v8 @kind object;
  #L156bea.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/b/a/b/d$1;.<init>:(Lcom/b/a/b/d;ZZLcom/b/a/f;Lcom/b/a/c/a;)V` @kind direct;
  #L156bf0.  goto L156bde;
}
procedure `boolean` `a`(`com.b.a.b.d` v6 @kind this, `java.lang.Class` v7 @kind object, `boolean` v8 ) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L156c04.  v2:= 1I;
  #L156c06.  v0:= v6.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L156c0a.  v4:= -1.0D;
  #L156c0e.  v0:= dcmpl(v0, v4);
  #L156c12.  if v0 == 0 then goto L156c46;
  #L156c16.  v0:= constclass @type ^`com.b.a.a.d` @kind object;
  #L156c1a.  call temp:= `getAnnotation`(v7, v0) @signature `Ljava/lang/Class;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L156c20.  v0:= temp @kind object;
  #L156c22.  v0:= (`com.b.a.a.d`) v0 @kind object;
  #L156c26.  v1:= constclass @type ^`com.b.a.a.e` @kind object;
  #L156c2a.  call temp:= `getAnnotation`(v7, v1) @signature `Ljava/lang/Class;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L156c30.  v1:= temp @kind object;
  #L156c32.  v1:= (`com.b.a.a.e`) v1 @kind object;
  #L156c36.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;Lcom/b/a/a/e;)Z` @kind direct;
  #L156c3c.  v0:= temp;
  #L156c3e.  if v0 != 0 then goto L156c46;
  #L156c42.  v0:= v2;
  #L156c44.  return v0;
  #L156c46.  v0:= v6.`com.b.a.b.d.d` @type ^`boolean` @kind boolean;
  #L156c4a.  if v0 != 0 then goto L156c5e;
  #L156c4e.  call temp:= `b`(v6, v7) @signature `Lcom/b/a/b/d;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L156c54.  v0:= temp;
  #L156c56.  if v0 == 0 then goto L156c5e;
  #L156c5a.  v0:= v2;
  #L156c5c.  goto L156c44;
  #L156c5e.  call temp:= `a`(v6, v7) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;)Z` @kind direct;
  #L156c64.  v0:= temp;
  #L156c66.  if v0 == 0 then goto L156c6e;
  #L156c6a.  v0:= v2;
  #L156c6c.  goto L156c44;
  #L156c6e.  if v8 == 0 then goto L156ca6;
  #L156c72.  v0:= v6.`com.b.a.b.d.f` @type ^`java.util.List` @kind object;
  #L156c76.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L156c7c.  v1:= temp @kind object;
  #L156c7e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L156c84.  v0:= temp;
  #L156c86.  if v0 == 0 then goto L156cac;
  #L156c8a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L156c90.  v0:= temp @kind object;
  #L156c92.  v0:= (`com.b.a.b`) v0 @kind object;
  #L156c96.  call temp:= `a`(v0, v7) @signature `Lcom/b/a/b;.a:(Ljava/lang/Class;)Z` @kind interface;
  #L156c9c.  v0:= temp;
  #L156c9e.  if v0 == 0 then goto L156c7e;
  #L156ca2.  v0:= v2;
  #L156ca4.  goto L156c44;
  #L156ca6.  v0:= v6.`com.b.a.b.d.g` @type ^`java.util.List` @kind object;
  #L156caa.  goto L156c76;
  #L156cac.  v0:= 0I;
  #L156cae.  goto L156c44;
}
procedure `boolean` `a`(`com.b.a.b.d` v6 @kind this, `java.lang.reflect.Field` v7 @kind object, `boolean` v8 ) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/reflect/Field;Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L156cc0.  v2:= 1I;
  #L156cc2.  v0:= v6.`com.b.a.b.d.c` @type ^`int`;
  #L156cc6.  call temp:= `getModifiers`(v7) @signature `Ljava/lang/reflect/Field;.getModifiers:()I` @kind virtual;
  #L156ccc.  v1:= temp;
  #L156cce.  v0:= v0 ^& v1 @kind int;
  #L156cd0.  if v0 == 0 then goto L156cd8;
  #L156cd4.  v0:= v2;
  #L156cd6.  return v0;
  #L156cd8.  v0:= v6.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L156cdc.  v4:= -1.0D;
  #L156ce0.  v0:= dcmpl(v0, v4);
  #L156ce4.  if v0 == 0 then goto L156d18;
  #L156ce8.  v0:= constclass @type ^`com.b.a.a.d` @kind object;
  #L156cec.  call temp:= `getAnnotation`(v7, v0) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L156cf2.  v0:= temp @kind object;
  #L156cf4.  v0:= (`com.b.a.a.d`) v0 @kind object;
  #L156cf8.  v1:= constclass @type ^`com.b.a.a.e` @kind object;
  #L156cfc.  call temp:= `getAnnotation`(v7, v1) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L156d02.  v1:= temp @kind object;
  #L156d04.  v1:= (`com.b.a.a.e`) v1 @kind object;
  #L156d08.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;Lcom/b/a/a/e;)Z` @kind direct;
  #L156d0e.  v0:= temp;
  #L156d10.  if v0 != 0 then goto L156d18;
  #L156d14.  v0:= v2;
  #L156d16.  goto L156cd6;
  #L156d18.  call temp:= `isSynthetic`(v7) @signature `Ljava/lang/reflect/Field;.isSynthetic:()Z` @kind virtual;
  #L156d1e.  v0:= temp;
  #L156d20.  if v0 == 0 then goto L156d28;
  #L156d24.  v0:= v2;
  #L156d26.  goto L156cd6;
  #L156d28.  v0:= v6.`com.b.a.b.d.e` @type ^`boolean` @kind boolean;
  #L156d2c.  if v0 == 0 then goto L156d64;
  #L156d30.  v0:= constclass @type ^`com.b.a.a.a` @kind object;
  #L156d34.  call temp:= `getAnnotation`(v7, v0) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L156d3a.  v0:= temp @kind object;
  #L156d3c.  v0:= (`com.b.a.a.a`) v0 @kind object;
  #L156d40.  if v0 == 0 then goto L156d54;
  #L156d44.  if v8 == 0 then goto L156d58;
  #L156d48.  call temp:= `a`(v0) @signature `Lcom/b/a/a/a;.a:()Z` @kind interface;
  #L156d4e.  v0:= temp;
  #L156d50.  if v0 != 0 then goto L156d64;
  #L156d54.  v0:= v2;
  #L156d56.  goto L156cd6;
  #L156d58.  call temp:= `b`(v0) @signature `Lcom/b/a/a/a;.b:()Z` @kind interface;
  #L156d5e.  v0:= temp;
  #L156d60.  if v0 == 0 then goto L156d54;
  #L156d64.  v0:= v6.`com.b.a.b.d.d` @type ^`boolean` @kind boolean;
  #L156d68.  if v0 != 0 then goto L156d84;
  #L156d6c.  call temp:= `getType`(v7) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L156d72.  v0:= temp @kind object;
  #L156d74.  call temp:= `b`(v6, v0) @signature `Lcom/b/a/b/d;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L156d7a.  v0:= temp;
  #L156d7c.  if v0 == 0 then goto L156d84;
  #L156d80.  v0:= v2;
  #L156d82.  goto L156cd6;
  #L156d84.  call temp:= `getType`(v7) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L156d8a.  v0:= temp @kind object;
  #L156d8c.  call temp:= `a`(v6, v0) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;)Z` @kind direct;
  #L156d92.  v0:= temp;
  #L156d94.  if v0 == 0 then goto L156d9c;
  #L156d98.  v0:= v2;
  #L156d9a.  goto L156cd6;
  #L156d9c.  if v8 == 0 then goto L156dec;
  #L156da0.  v0:= v6.`com.b.a.b.d.f` @type ^`java.util.List` @kind object;
  #L156da4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L156daa.  v1:= temp;
  #L156dac.  if v1 != 0 then goto L156df2;
  #L156db0.  v1:= new `com.b.a.c`;
  #L156db4.  call `<init>`(v1, v7) @signature `Lcom/b/a/c;.<init>:(Ljava/lang/reflect/Field;)V` @kind direct;
  #L156dba.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L156dc0.  v3:= temp @kind object;
  #L156dc2.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L156dc8.  v0:= temp;
  #L156dca.  if v0 == 0 then goto L156df2;
  #L156dce.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L156dd4.  v0:= temp @kind object;
  #L156dd6.  v0:= (`com.b.a.b`) v0 @kind object;
  #L156dda.  call temp:= `a`(v0, v1) @signature `Lcom/b/a/b;.a:(Lcom/b/a/c;)Z` @kind interface;
  #L156de0.  v0:= temp;
  #L156de2.  if v0 == 0 then goto L156dc2;
  #L156de6.  v0:= v2;
  #L156de8.  goto L156cd6;
  #L156dec.  v0:= v6.`com.b.a.b.d.g` @type ^`java.util.List` @kind object;
  #L156df0.  goto L156da4;
  #L156df2.  v0:= 0I;
  #L156df4.  goto L156cd6;
}
procedure `java.lang.Object` `clone`(`com.b.a.b.d` v1 @kind this) @signature `Lcom/b/a/b/d;.clone:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L156e08.  call temp:= `a`(v1) @signature `Lcom/b/a/b/d;.a:()Lcom/b/a/b/d;` @kind virtual;
  #L156e0e.  v0:= temp @kind object;
  #L156e10.  return v0 @kind object;
}
