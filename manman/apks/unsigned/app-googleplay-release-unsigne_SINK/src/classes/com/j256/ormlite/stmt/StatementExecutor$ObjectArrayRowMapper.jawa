record `com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper` @kind class @AccessFlag  extends `com.j256.ormlite.stmt.GenericRowMapper` @kind interface {
  `com.j256.ormlite.field.DataType`[] `com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper.columnTypes` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper` v0 @kind this, `com.j256.ormlite.field.DataType`[] v1 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$ObjectArrayRowMapper;.<init>:([Lcom/j256/ormlite/field/DataType;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L174c74.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L174c7a.  v0.`com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper.columnTypes` @type ^`com.j256.ormlite.field.DataType`[] := v1 @kind object;
  #L174c7e.  return @kind void;
}
procedure `java.lang.Object` `mapRow`(`com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper` v1 @kind this, `com.j256.ormlite.support.DatabaseResults` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$ObjectArrayRowMapper;.mapRow:(Lcom/j256/ormlite/support/DatabaseResults;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L174c90.  call temp:= `mapRow`(v1, v2) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$ObjectArrayRowMapper;.mapRow:(Lcom/j256/ormlite/support/DatabaseResults;)[Ljava/lang/Object;` @kind virtual;
  #L174c96.  v0:= temp @kind object;
  #L174c98.  return v0 @kind object;
}
procedure `java.lang.Object`[] `mapRow`(`com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper` v5 @kind this, `com.j256.ormlite.support.DatabaseResults` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$ObjectArrayRowMapper;.mapRow:(Lcom/j256/ormlite/support/DatabaseResults;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L174cac.  call temp:= `getColumnCount`(v6) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getColumnCount:()I` @kind interface;
  #L174cb2.  v2:= temp;
  #L174cb4.  v3:= new `java.lang.Object`[v2];
  #L174cb8.  v0:= 0I;
  #L174cba.  v1:= v0;
  #L174cbc.  if v1 >= v2 then goto L174cf6;
  #L174cc0.  v0:= v5.`com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper.columnTypes` @type ^`com.j256.ormlite.field.DataType`[] @kind object;
  #L174cc4.  v0:= length @variable v0;
  #L174cc6.  if v1 < v0 then goto L174cec;
  #L174cca.  v0:= `@@com.j256.ormlite.field.DataType.STRING` @type ^`com.j256.ormlite.field.DataType` @kind object;
  #L174cce.  call temp:= `getDataPersister`(v0) @signature `Lcom/j256/ormlite/field/DataType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L174cd4.  v0:= temp @kind object;
  #L174cd6.  v4:= 0I;
  #L174cd8.  call temp:= `resultToJava`(v0, v4, v6, v1) @signature `Lcom/j256/ormlite/field/DataPersister;.resultToJava:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @kind interface;
  #L174cde.  v0:= temp @kind object;
  #L174ce0.  v3[v1]:= v0 @kind object;
  #L174ce4.  v0:= v1 + 1;
  #L174ce8.  v1:= v0;
  #L174cea.  goto L174cbc;
  #L174cec.  v0:= v5.`com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper.columnTypes` @type ^`com.j256.ormlite.field.DataType`[] @kind object;
  #L174cf0.  v0:= v0[v1] @kind object;
  #L174cf4.  goto L174cce;
  #L174cf6.  return v3 @kind object;
}
