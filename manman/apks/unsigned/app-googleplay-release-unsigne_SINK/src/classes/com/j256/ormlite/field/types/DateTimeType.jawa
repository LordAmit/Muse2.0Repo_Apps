record `com.j256.ormlite.field.types.DateTimeType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `java.lang.String`[] `@@com.j256.ormlite.field.types.DateTimeType.associatedClassNames` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Class` `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @AccessFlag PRIVATE_STATIC;
global `java.lang.reflect.Method` `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @AccessFlag PRIVATE_STATIC;
global `java.lang.reflect.Constructor` `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @AccessFlag PRIVATE_STATIC;
global `com.j256.ormlite.field.types.DateTimeType` `@@com.j256.ormlite.field.types.DateTimeType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L16d758.  v1:= 0I;
  #L16d75a.  v0:= new `com.j256.ormlite.field.types.DateTimeType`;
  #L16d75e.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<init>:()V` @kind direct;
  #L16d764.  `@@com.j256.ormlite.field.types.DateTimeType.singleTon` @type ^`com.j256.ormlite.field.types.DateTimeType` := v0 @kind object;
  #L16d768.  `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` := v1 @kind object;
  #L16d76c.  `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L16d770.  `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` := v1 @kind object;
  #L16d774.  v0:= 1I;
  #L16d776.  v0:= new `java.lang.String`[v0];
  #L16d77a.  v1:= 0I;
  #L16d77c.  v2:= "org.joda.time.DateTime" @kind object;
  #L16d780.  v0[v1]:= v2 @kind object;
  #L16d784.  `@@com.j256.ormlite.field.types.DateTimeType.associatedClassNames` @type ^`java.lang.String`[] := v0 @kind object;
  #L16d788.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L16d79c.  v0:= `@@com.j256.ormlite.field.SqlType.LONG` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L16d7a0.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L16d7a6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateTimeType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16d7b8.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16d7be.  return @kind void;
}
procedure `java.lang.Object` `createInstance`(`com.j256.ormlite.field.types.DateTimeType` v4 @kind this, `java.lang.Long` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L16d7d0.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` @kind object;
  #L16d7d4.  if v0 != 0 then goto L16d7fc;
  #L16d7d8.  call temp:= `getDateTimeClass`(v4) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @kind direct;
  #L16d7de.  v0:= temp @kind object;
  #L16d7e0.  v1:= 1I;
  #L16d7e2.  v1:= new `java.lang.Class`[v1];
  #L16d7e6.  v2:= 0I;
  #L16d7e8.  v3:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L16d7ec.  v1[v2]:= v3 @kind object;
  #L16d7f0.  call temp:= `getConstructor`(v0, v1) @signature `Ljava/lang/Class;.getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L16d7f6.  v0:= temp @kind object;
  #L16d7f8.  `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` := v0 @kind object;
  #L16d7fc.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` @kind object;
  #L16d800.  v1:= 1I;
  #L16d802.  v1:= new `java.lang.Object`[v1];
  #L16d806.  v2:= 0I;
  #L16d808.  v1[v2]:= v5 @kind object;
  #L16d80c.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L16d812.  v0:= temp @kind object;
  #L16d814.  return v0 @kind object;
  #L16d816.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L16d818.  v1:= "Could not use reflection to construct a Joda DateTime" @kind object;
  #L16d81c.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16d822.  v0:= temp @kind object;
  #L16d824.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L16d816;
}
procedure `java.lang.Long` `extractMillis`(`com.j256.ormlite.field.types.DateTimeType` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.extractMillis:(Ljava/lang/Object;)Ljava/lang/Long;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L16d848.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L16d84c.  if v0 != 0 then goto L16d86e;
  #L16d850.  call temp:= `getDateTimeClass`(v3) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @kind direct;
  #L16d856.  v0:= temp @kind object;
  #L16d858.  v1:= "getMillis" @kind object;
  #L16d85c.  v2:= 0I;
  #L16d85e.  v2:= new `java.lang.Class`[v2];
  #L16d862.  call temp:= `getMethod`(v0, v1, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L16d868.  v0:= temp @kind object;
  #L16d86a.  `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L16d86e.  if v4 != 0 then goto L16d876;
  #L16d872.  v0:= 0I;
  #L16d874.  return v0 @kind object;
  #L16d876.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L16d87a.  v1:= 0I;
  #L16d87c.  v1:= new `java.lang.Object`[v1];
  #L16d880.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16d886.  v0:= temp @kind object;
  #L16d888.  v0:= (`java.lang.Long`) v0 @kind object;
  #Try_end0.  
  #L16d88c.  goto L16d874;
  #L16d88e.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L16d890.  v1:= new `java.lang.StringBuilder`;
  #L16d894.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16d89a.  v2:= "Could not use reflection to get millis from Joda DateTime: " @kind object;
  #L16d89e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d8a4.  v1:= temp @kind object;
  #L16d8a6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d8ac.  v1:= temp @kind object;
  #L16d8ae.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16d8b4.  v1:= temp @kind object;
  #L16d8b6.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16d8bc.  v0:= temp @kind object;
  #L16d8be.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L16d88e;
}
procedure `java.lang.Class` `getDateTimeClass`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L16d8e0.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` @kind object;
  #L16d8e4.  if v0 != 0 then goto L16d8f8;
  #L16d8e8.  v0:= "org.joda.time.DateTime" @kind object;
  #L16d8ec.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L16d8f2.  v0:= temp @kind object;
  #L16d8f4.  `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` := v0 @kind object;
  #L16d8f8.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` @kind object;
  #L16d8fc.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.types.DateTimeType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getSingleton:()Lcom/j256/ormlite/field/types/DateTimeType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L16d910.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.singleTon` @type ^`com.j256.ormlite.field.types.DateTimeType` @kind object;
  #L16d914.  return v0 @kind object;
}
procedure `java.lang.String`[] `getAssociatedClassNames`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getAssociatedClassNames:()[Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d928.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.associatedClassNames` @type ^`java.lang.String`[] @kind object;
  #L16d92c.  return v0 @kind object;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #Try_start0.  
  #L16d940.  call temp:= `getDateTimeClass`(v1) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @kind direct;
  #Try_end0.  
  #L16d946.  v0:= temp @kind object;
  #L16d948.  return v0 @kind object;
  #L16d94a.  v0:= Exception @type ^`java.lang.ClassNotFoundException` @kind object;
  #L16d94c.  v0:= 0I;
  #L16d94e.  goto L16d948;
  catch `java.lang.ClassNotFoundException` @[Try_start0..Try_end0] goto L16d94a;
}
procedure `boolean` `isAppropriateId`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.isAppropriateId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d970.  v0:= 0I;
  #L16d972.  return v0;
}
procedure `boolean` `isEscapedValue`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.isEscapedValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d984.  v0:= 0I;
  #L16d986.  return v0;
}
procedure `boolean` `isValidForVersion`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.isValidForVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d998.  v0:= 1I;
  #L16d99a.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d9ac.  call temp:= `extractMillis`(v1, v3) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.extractMillis:(Ljava/lang/Object;)Ljava/lang/Long;` @kind direct;
  #L16d9b2.  v0:= temp @kind object;
  #L16d9b4.  return v0 @kind object;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.DateTimeType` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16d9c8.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L16d9ce.  v0:= temp @kind wide;
  #L16d9d0.  if v5 != 0 then goto L16d9e6;
  #L16d9d4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L16d9da.  v0:= temp @kind object;
  #L16d9dc.  call temp:= `createInstance`(v4, v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L16d9e2.  v0:= temp @kind object;
  #L16d9e4.  return v0 @kind object;
  #L16d9e6.  call temp:= `extractMillis`(v4, v5) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.extractMillis:(Ljava/lang/Object;)Ljava/lang/Long;` @kind direct;
  #L16d9ec.  v2:= temp @kind object;
  #L16d9ee.  call temp:= `longValue`(v2) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L16d9f4.  v2:= temp @kind wide;
  #L16d9f6.  v2:= lcmp(v0, v2);
  #L16d9fa.  if v2 != 0 then goto L16da16;
  #L16d9fe.  v2:= 1L;
  #L16da02.  v0:= v0 + v2 @kind long;
  #L16da04.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L16da0a.  v0:= temp @kind object;
  #L16da0c.  call temp:= `createInstance`(v4, v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L16da12.  v0:= temp @kind object;
  #L16da14.  goto L16d9e4;
  #L16da16.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L16da1c.  v0:= temp @kind object;
  #L16da1e.  call temp:= `createInstance`(v4, v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L16da24.  v0:= temp @kind object;
  #L16da26.  goto L16d9e4;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.DateTimeType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L16da38.  call temp:= `parseLong`(v5) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L16da3e.  v0:= temp @kind wide;
  #L16da40.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #Try_end0.  
  #L16da46.  v0:= temp @kind object;
  #L16da48.  return v0 @kind object;
  #L16da4a.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L16da4c.  v1:= new `java.lang.StringBuilder`;
  #L16da50.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16da56.  v2:= "Problems with field " @kind object;
  #L16da5a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16da60.  v1:= temp @kind object;
  #L16da62.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16da68.  v1:= temp @kind object;
  #L16da6a.  v2:= " parsing default DateTime value: " @kind object;
  #L16da6e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16da74.  v1:= temp @kind object;
  #L16da76.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16da7c.  v1:= temp @kind object;
  #L16da7e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16da84.  v1:= temp @kind object;
  #L16da86.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16da8c.  v0:= temp @kind object;
  #L16da8e.  throw v0;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L16da4a;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.DateTimeType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `com.j256.ormlite.support.DatabaseResults` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16dab0.  call temp:= `getLong`(v4, v5) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getLong:(I)J` @kind interface;
  #L16dab6.  v0:= temp @kind wide;
  #L16dab8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L16dabe.  v0:= temp @kind object;
  #L16dac0.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16dad4.  v3:= (`java.lang.Long`) v3 @kind object;
  #L16dad8.  call temp:= `createInstance`(v1, v3) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L16dade.  v0:= temp @kind object;
  #L16dae0.  return v0 @kind object;
}
