record `com.j256.ormlite.logger.LoggerFactory` @kind class @AccessFlag PUBLIC {
}
global `java.lang.String` `@@com.j256.ormlite.logger.LoggerFactory.LOG_TYPE_SYSTEM_PROPERTY` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.j256.ormlite.logger.LoggerFactory$LogType` `@@com.j256.ormlite.logger.LoggerFactory.logType` @AccessFlag PRIVATE_STATIC;
procedure `void` `<init>`(`com.j256.ormlite.logger.LoggerFactory` v0 @kind this) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L171050.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L171056.  return @kind void;
}
procedure `com.j256.ormlite.logger.LoggerFactory$LogType` `findLogType`() @signature `Lcom/j256/ormlite/logger/LoggerFactory;.findLogType:()Lcom/j256/ormlite/logger/LoggerFactory$LogType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L171068.  v0:= "com.j256.ormlite.logger.type" @kind object;
  #L17106c.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L171072.  v0:= temp @kind object;
  #L171074.  if v0 == 0 then goto L1710d6;
  #Try_start0.  
  #L171078.  call temp:= `valueOf`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory$LogType;.valueOf:(Ljava/lang/String;)Lcom/j256/ormlite/logger/LoggerFactory$LogType;` @kind static;
  #Try_end0.  
  #L17107e.  v0:= temp @kind object;
  #L171080.  return v0 @kind object;
  #L171082.  v1:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L171084.  v1:= new `com.j256.ormlite.logger.LocalLog`;
  #L171088.  v2:= constclass @type ^`com.j256.ormlite.logger.LoggerFactory` @kind object;
  #L17108c.  call temp:= `getName`(v2) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L171092.  v2:= temp @kind object;
  #L171094.  call `<init>`(v1, v2) @signature `Lcom/j256/ormlite/logger/LocalLog;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L17109a.  v2:= `@@com.j256.ormlite.logger.Log$Level.WARNING` @type ^`com.j256.ormlite.logger.Log$Level` @kind object;
  #L17109e.  v3:= new `java.lang.StringBuilder`;
  #L1710a2.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1710a8.  v4:= "Could not find valid log-type from system property 'com.j256.ormlite.logger.type', value '" @kind object;
  #L1710ac.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1710b2.  v3:= temp @kind object;
  #L1710b4.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1710ba.  v0:= temp @kind object;
  #L1710bc.  v3:= "'" @kind object;
  #L1710c0.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1710c6.  v0:= temp @kind object;
  #L1710c8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1710ce.  v0:= temp @kind object;
  #L1710d0.  call `log`(v1, v2, v0) @signature `Lcom/j256/ormlite/logger/Log;.log:(Lcom/j256/ormlite/logger/Log$Level;Ljava/lang/String;)V` @kind interface;
  #L1710d6.  call temp:= `values`() @signature `Lcom/j256/ormlite/logger/LoggerFactory$LogType;.values:()[Lcom/j256/ormlite/logger/LoggerFactory$LogType;` @kind static;
  #L1710dc.  v2:= temp @kind object;
  #L1710de.  v3:= length @variable v2;
  #L1710e0.  v0:= 0I;
  #L1710e2.  v1:= v0;
  #L1710e4.  if v1 >= v3 then goto L171100;
  #L1710e8.  v0:= v2[v1] @kind object;
  #L1710ec.  call temp:= `isAvailable`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory$LogType;.isAvailable:()Z` @kind virtual;
  #L1710f2.  v4:= temp;
  #L1710f4.  if v4 != 0 then goto L171080;
  #L1710f8.  v0:= v1 + 1;
  #L1710fc.  v1:= v0;
  #L1710fe.  goto L1710e4;
  #L171100.  v0:= `@@com.j256.ormlite.logger.LoggerFactory$LogType.LOCAL` @type ^`com.j256.ormlite.logger.LoggerFactory$LogType` @kind object;
  #L171104.  goto L171080;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L171082;
}
procedure `com.j256.ormlite.logger.Logger` `getLogger`(`java.lang.Class` v1 @kind object) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/Class;)Lcom/j256/ormlite/logger/Logger;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L171128.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L17112e.  v0:= temp @kind object;
  #L171130.  call temp:= `getLogger`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/String;)Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L171136.  v0:= temp @kind object;
  #L171138.  return v0 @kind object;
}
procedure `com.j256.ormlite.logger.Logger` `getLogger`(`java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/String;)Lcom/j256/ormlite/logger/Logger;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L17114c.  v0:= `@@com.j256.ormlite.logger.LoggerFactory.logType` @type ^`com.j256.ormlite.logger.LoggerFactory$LogType` @kind object;
  #L171150.  if v0 != 0 then goto L171160;
  #L171154.  call temp:= `findLogType`() @signature `Lcom/j256/ormlite/logger/LoggerFactory;.findLogType:()Lcom/j256/ormlite/logger/LoggerFactory$LogType;` @kind static;
  #L17115a.  v0:= temp @kind object;
  #L17115c.  `@@com.j256.ormlite.logger.LoggerFactory.logType` @type ^`com.j256.ormlite.logger.LoggerFactory$LogType` := v0 @kind object;
  #L171160.  v0:= new `com.j256.ormlite.logger.Logger`;
  #L171164.  v1:= `@@com.j256.ormlite.logger.LoggerFactory.logType` @type ^`com.j256.ormlite.logger.LoggerFactory$LogType` @kind object;
  #L171168.  call temp:= `createLog`(v1, v2) @signature `Lcom/j256/ormlite/logger/LoggerFactory$LogType;.createLog:(Ljava/lang/String;)Lcom/j256/ormlite/logger/Log;` @kind virtual;
  #L17116e.  v1:= temp @kind object;
  #L171170.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/logger/Logger;.<init>:(Lcom/j256/ormlite/logger/Log;)V` @kind direct;
  #L171176.  return v0 @kind object;
}
procedure `java.lang.String` `getSimpleClassName`(`java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getSimpleClassName:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L171188.  v0:= "\\." @kind object;
  #L17118c.  call temp:= `split`(v3, v0) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L171192.  v0:= temp @kind object;
  #L171194.  v1:= length @variable v0;
  #L171196.  v2:= 1I;
  #L171198.  if v1 > v2 then goto L17119e;
  #L17119c.  return v3 @kind object;
  #L17119e.  v1:= length @variable v0;
  #L1711a0.  v1:= v1 + -1;
  #L1711a4.  v3:= v0[v1] @kind object;
  #L1711a8.  goto L17119c;
}
