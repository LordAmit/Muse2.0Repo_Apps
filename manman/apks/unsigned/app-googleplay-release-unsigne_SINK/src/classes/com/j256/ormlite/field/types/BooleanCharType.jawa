record `com.j256.ormlite.field.types.BooleanCharType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BooleanType` @kind class {
}
global `java.lang.String` `@@com.j256.ormlite.field.types.BooleanCharType.DEFAULT_TRUE_FALSE_FORMAT` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.j256.ormlite.field.types.BooleanCharType` `@@com.j256.ormlite.field.types.BooleanCharType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L16cb60.  v0:= new `com.j256.ormlite.field.types.BooleanCharType`;
  #L16cb64.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.<init>:()V` @kind direct;
  #L16cb6a.  `@@com.j256.ormlite.field.types.BooleanCharType.singleTon` @type ^`com.j256.ormlite.field.types.BooleanCharType` := v0 @kind object;
  #L16cb6e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L16cb80.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L16cb84.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BooleanType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L16cb8a.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BooleanCharType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.getSingleton:()Lcom/j256/ormlite/field/types/BooleanCharType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L16cb9c.  v0:= `@@com.j256.ormlite.field.types.BooleanCharType.singleTon` @type ^`com.j256.ormlite.field.types.BooleanCharType` @kind object;
  #L16cba0.  return v0 @kind object;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.BooleanCharType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16cbb4.  call temp:= `getDataTypeConfigObj`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @kind virtual;
  #L16cbba.  v0:= temp @kind object;
  #L16cbbc.  v0:= (`java.lang.String`) v0 @kind object;
  #L16cbc0.  v4:= (`java.lang.Boolean`) v4 @kind object;
  #L16cbc4.  call temp:= `booleanValue`(v4) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L16cbca.  v1:= temp;
  #L16cbcc.  if v1 == 0 then goto L16cbe4;
  #L16cbd0.  v1:= 0I;
  #L16cbd2.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L16cbd8.  v0:= temp;
  #L16cbda.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L16cbe0.  v0:= temp @kind object;
  #L16cbe2.  return v0 @kind object;
  #L16cbe4.  v1:= 1I;
  #L16cbe6.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L16cbec.  v0:= temp;
  #L16cbee.  goto L16cbda;
}
procedure `java.lang.Object` `makeConfigObject`(`com.j256.ormlite.field.types.BooleanCharType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.makeConfigObject:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16cc00.  call temp:= `getFormat`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L16cc06.  v0:= temp @kind object;
  #L16cc08.  if v0 != 0 then goto L16cc12;
  #L16cc0c.  v0:= "10" @kind object;
  #L16cc10.  return v0 @kind object;
  #L16cc12.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L16cc18.  v1:= temp;
  #L16cc1a.  v2:= 2I;
  #L16cc1c.  if v1 != v2 then goto L16cc38;
  #L16cc20.  v1:= 0I;
  #L16cc22.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L16cc28.  v1:= temp;
  #L16cc2a.  v2:= 1I;
  #L16cc2c.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L16cc32.  v2:= temp;
  #L16cc34.  if v1 != v2 then goto L16cc10;
  #L16cc38.  v1:= new `java.sql.SQLException`;
  #L16cc3c.  v2:= new `java.lang.StringBuilder`;
  #L16cc40.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16cc46.  v3:= "Invalid boolean format must have 2 different characters that represent true/false like \"10\" or \"tf\": " @kind object;
  #L16cc4a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cc50.  v2:= temp @kind object;
  #L16cc52.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cc58.  v0:= temp @kind object;
  #L16cc5a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16cc60.  v0:= temp @kind object;
  #L16cc62.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16cc68.  throw v1;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16cc7c.  call temp:= `parseBoolean`(v3) @signature `Ljava/lang/Boolean;.parseBoolean:(Ljava/lang/String;)Z` @kind static;
  #L16cc82.  v0:= temp;
  #L16cc84.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L16cc8a.  v0:= temp @kind object;
  #L16cc8c.  call temp:= `javaToSqlArg`(v1, v2, v0) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16cc92.  v0:= temp @kind object;
  #L16cc94.  return v0 @kind object;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16cca8.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L16ccae.  v0:= temp;
  #L16ccb0.  if v0 != 0 then goto L16ccba;
  #L16ccb4.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L16ccb8.  return v0 @kind object;
  #L16ccba.  v0:= 0I;
  #L16ccbc.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L16ccc2.  v0:= temp;
  #L16ccc4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L16ccca.  v0:= temp @kind object;
  #L16cccc.  call temp:= `sqlArgToJava`(v1, v2, v0, v4) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L16ccd2.  v0:= temp @kind object;
  #L16ccd4.  goto L16ccb8;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16cce8.  call temp:= `getChar`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getChar:(I)C` @kind interface;
  #L16ccee.  v0:= temp;
  #L16ccf0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L16ccf6.  v0:= temp @kind object;
  #L16ccf8.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.BooleanCharType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.Object` v5 @kind object, `int` v6 ) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16cd0c.  call temp:= `getDataTypeConfigObj`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @kind virtual;
  #L16cd12.  v0:= temp @kind object;
  #L16cd14.  v0:= (`java.lang.String`) v0 @kind object;
  #L16cd18.  v5:= (`java.lang.Character`) v5 @kind object;
  #L16cd1c.  call temp:= `charValue`(v5) @signature `Ljava/lang/Character;.charValue:()C` @kind virtual;
  #L16cd22.  v1:= temp;
  #L16cd24.  v2:= 0I;
  #L16cd26.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L16cd2c.  v0:= temp;
  #L16cd2e.  if v1 != v0 then goto L16cd38;
  #L16cd32.  v0:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L16cd36.  return v0 @kind object;
  #L16cd38.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L16cd3c.  goto L16cd36;
}
