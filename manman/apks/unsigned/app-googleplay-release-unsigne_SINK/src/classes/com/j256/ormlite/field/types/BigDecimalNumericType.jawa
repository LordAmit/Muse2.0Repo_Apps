record `com.j256.ormlite.field.types.BigDecimalNumericType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `com.j256.ormlite.field.types.BigDecimalNumericType` `@@com.j256.ormlite.field.types.BigDecimalNumericType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L16c428.  v0:= new `com.j256.ormlite.field.types.BigDecimalNumericType`;
  #L16c42c.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.<init>:()V` @kind direct;
  #L16c432.  `@@com.j256.ormlite.field.types.BigDecimalNumericType.singleTon` @type ^`com.j256.ormlite.field.types.BigDecimalNumericType` := v0 @kind object;
  #L16c436.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BigDecimalNumericType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L16c448.  v0:= `@@com.j256.ormlite.field.SqlType.BIG_DECIMAL` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L16c44c.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L16c452.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BigDecimalNumericType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16c464.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16c46a.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BigDecimalNumericType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.getSingleton:()Lcom/j256/ormlite/field/types/BigDecimalNumericType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L16c47c.  v0:= `@@com.j256.ormlite.field.types.BigDecimalNumericType.singleTon` @type ^`com.j256.ormlite.field.types.BigDecimalNumericType` @kind object;
  #L16c480.  return v0 @kind object;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.BigDecimalNumericType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16c494.  v0:= constclass @type ^`java.math.BigDecimal` @kind object;
  #L16c498.  return v0 @kind object;
}
procedure `boolean` `isAppropriateId`(`com.j256.ormlite.field.types.BigDecimalNumericType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.isAppropriateId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16c4ac.  v0:= 0I;
  #L16c4ae.  return v0;
}
procedure `boolean` `isEscapedValue`(`com.j256.ormlite.field.types.BigDecimalNumericType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.isEscapedValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16c4c0.  v0:= 0I;
  #L16c4c2.  return v0;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.BigDecimalNumericType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L16c4d4.  v0:= new `java.math.BigDecimal`;
  #L16c4d8.  call `<init>`(v0, v5) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #Try_end0.  
  #L16c4de.  return v0 @kind object;
  #L16c4e0.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L16c4e2.  v1:= new `java.lang.StringBuilder`;
  #L16c4e6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16c4ec.  v2:= "Problems with field " @kind object;
  #L16c4f0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c4f6.  v1:= temp @kind object;
  #L16c4f8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c4fe.  v1:= temp @kind object;
  #L16c500.  v2:= " parsing default BigDecimal string '" @kind object;
  #L16c504.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c50a.  v1:= temp @kind object;
  #L16c50c.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c512.  v1:= temp @kind object;
  #L16c514.  v2:= "'" @kind object;
  #L16c518.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c51e.  v1:= temp @kind object;
  #L16c520.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16c526.  v1:= temp @kind object;
  #L16c528.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16c52e.  v0:= temp @kind object;
  #L16c530.  throw v0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L16c4e0;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.BigDecimalNumericType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BigDecimalNumericType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16c554.  call temp:= `getBigDecimal`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getBigDecimal:(I)Ljava/math/BigDecimal;` @kind interface;
  #L16c55a.  v0:= temp @kind object;
  #L16c55c.  return v0 @kind object;
}
