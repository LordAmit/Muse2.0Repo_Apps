record `com.j256.ormlite.field.types.BaseEnumType` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BaseEnumType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseEnumType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16c370.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L16c376.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BaseEnumType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseEnumType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16c388.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16c38e.  return @kind void;
}
procedure `java.lang.Enum` `enumVal`(`com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Enum` v5 @kind object, `java.lang.Enum` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseEnumType;.enumVal:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Ljava/lang/Enum;Ljava/lang/Enum;)Ljava/lang/Enum;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L16c3a0.  if v5 == 0 then goto L16c3a6;
  #L16c3a4.  return v5 @kind object;
  #L16c3a6.  if v6 != 0 then goto L16c3f0;
  #L16c3aa.  v0:= new `java.sql.SQLException`;
  #L16c3ae.  v1:= new `java.lang.StringBuilder`;
  #L16c3b2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16c3b8.  v2:= "Cannot get enum value of '" @kind object;
  #L16c3bc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c3c2.  v1:= temp @kind object;
  #L16c3c4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c3ca.  v1:= temp @kind object;
  #L16c3cc.  v2:= "' for field " @kind object;
  #L16c3d0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c3d6.  v1:= temp @kind object;
  #L16c3d8.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c3de.  v1:= temp @kind object;
  #L16c3e0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16c3e6.  v1:= temp @kind object;
  #L16c3e8.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16c3ee.  throw v0;
  #L16c3f0.  v5:= v6 @kind object;
  #L16c3f2.  goto L16c3a4;
}
procedure `boolean` `isValidForField`(`com.j256.ormlite.field.types.BaseEnumType` v1 @kind this, `java.lang.reflect.Field` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseEnumType;.isValidForField:(Ljava/lang/reflect/Field;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16c404.  call temp:= `getType`(v2) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16c40a.  v0:= temp @kind object;
  #L16c40c.  call temp:= `isEnum`(v0) @signature `Ljava/lang/Class;.isEnum:()Z` @kind virtual;
  #L16c412.  v0:= temp;
  #L16c414.  return v0;
}
