record `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.mapped.BaseMappedQuery` @kind class {
  `java.lang.String` `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` v0 @kind this, `com.j256.ormlite.table.TableInfo` v1 @kind object, `java.lang.String` v2 @kind object, `com.j256.ormlite.field.FieldType`[] v3 @kind object, `com.j256.ormlite.field.FieldType`[] v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L17855c.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L178562.  v0.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` := v5 @kind object;
  #L178566.  return @kind void;
}
procedure `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` `build`(`com.j256.ormlite.db.DatabaseType` v6 @kind object, `com.j256.ormlite.table.TableInfo` v7 @kind object, `com.j256.ormlite.field.FieldType` v8 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.build:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L178578.  if v8 != 0 then goto L1785ce;
  #L17857c.  call temp:= `getIdField`(v7) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L178582.  v8:= temp @kind object;
  #L178584.  if v8 != 0 then goto L1785ce;
  #L178588.  v0:= new `java.sql.SQLException`;
  #L17858c.  v1:= new `java.lang.StringBuilder`;
  #L178590.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L178596.  v2:= "Cannot query-for-id with " @kind object;
  #L17859a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1785a0.  v1:= temp @kind object;
  #L1785a2.  call temp:= `getDataClass`(v7) @signature `Lcom/j256/ormlite/table/TableInfo;.getDataClass:()Ljava/lang/Class;` @kind virtual;
  #L1785a8.  v2:= temp @kind object;
  #L1785aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1785b0.  v1:= temp @kind object;
  #L1785b2.  v2:= " because it doesn't have an id field" @kind object;
  #L1785b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1785bc.  v1:= temp @kind object;
  #L1785be.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1785c4.  v1:= temp @kind object;
  #L1785c6.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1785cc.  throw v0;
  #L1785ce.  call temp:= `buildStatement`(v6, v7, v8) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.buildStatement:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind static;
  #L1785d4.  v2:= temp @kind object;
  #L1785d6.  v0:= new `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq`;
  #L1785da.  v1:= 1I;
  #L1785dc.  v3:= new `com.j256.ormlite.field.FieldType`[v1];
  #L1785e0.  v1:= 0I;
  #L1785e2.  v3[v1]:= v8 @kind object;
  #L1785e6.  call temp:= `getFieldTypes`(v7) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L1785ec.  v4:= temp @kind object;
  #L1785ee.  v5:= "query-for-id" @kind object;
  #L1785f2.  v1:= v7 @kind object;
  #L1785f4.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)V` @kind direct;
  #L1785fa.  return v0 @kind object;
}
procedure `java.lang.String` `buildStatement`(`com.j256.ormlite.db.DatabaseType` v3 @kind object, `com.j256.ormlite.table.TableInfo` v4 @kind object, `com.j256.ormlite.field.FieldType` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.buildStatement:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L17860c.  v0:= new `java.lang.StringBuilder`;
  #L178610.  v1:= 64I;
  #L178614.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L17861a.  v1:= "SELECT * FROM " @kind object;
  #L17861e.  call temp:= `getTableName`(v4) @signature `Lcom/j256/ormlite/table/TableInfo;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L178624.  v2:= temp @kind object;
  #L178626.  call `appendTableName`(v3, v0, v1, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.appendTableName:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L17862c.  v1:= 0I;
  #L17862e.  call `appendWhereFieldEq`(v3, v5, v0, v1) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.appendWhereFieldEq:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind static;
  #L178634.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L17863a.  v0:= temp @kind object;
  #L17863c.  return v0 @kind object;
}
procedure `void` `logArgs`(`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.logArgs:([Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L178650.  v0:= length @variable v4;
  #L178652.  if v0 <= 0 then goto L178668;
  #L178656.  v0:= `@@com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L17865a.  v1:= "{} arguments: {}" @kind object;
  #L17865e.  v2:= v3.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` @kind object;
  #L178662.  call `trace`(v0, v1, v2, v4) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L178668.  return @kind void;
}
procedure `java.lang.Object` `execute`(`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` v7 @kind this, `com.j256.ormlite.support.DatabaseConnection` v8 @kind object, `java.lang.Object` v9 @kind object, `com.j256.ormlite.dao.ObjectCache` v10 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.execute:(Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L17867c.  if v10 == 0 then goto L178692;
  #L178680.  v0:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.clazz` @type ^`java.lang.Class` @kind object;
  #L178684.  call temp:= `get`(v10, v0, v9) @signature `Lcom/j256/ormlite/dao/ObjectCache;.get:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L17868a.  v0:= temp @kind object;
  #L17868c.  if v0 == 0 then goto L178692;
  #L178690.  return v0 @kind object;
  #L178692.  v0:= 1I;
  #L178694.  v2:= new `java.lang.Object`[v0];
  #L178698.  v0:= 0I;
  #L17869a.  call temp:= `convertIdToFieldObject`(v7, v9) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.convertIdToFieldObject:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1786a0.  v1:= temp @kind object;
  #L1786a2.  v2[v0]:= v1 @kind object;
  #L1786a6.  v1:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement` @type ^`java.lang.String` @kind object;
  #L1786aa.  v3:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L1786ae.  v0:= v8 @kind object;
  #L1786b0.  v4:= v7 @kind object;
  #L1786b2.  v5:= v10 @kind object;
  #L1786b4.  call temp:= `queryForOne`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/support/DatabaseConnection;.queryForOne:(Ljava/lang/String;[Ljava/lang/Object;[Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/stmt/GenericRowMapper;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind interface;
  #L1786ba.  v0:= temp @kind object;
  #L1786bc.  if v0 != 0 then goto L1786e8;
  #L1786c0.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L1786c4.  v3:= "{} using '{}' and {} args, got no results" @kind object;
  #L1786c8.  v4:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` @kind object;
  #L1786cc.  v5:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement` @type ^`java.lang.String` @kind object;
  #L1786d0.  v6:= length @variable v2;
  #L1786d2.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1786d8.  v6:= temp @kind object;
  #L1786da.  call `debug`(v1, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L1786e0.  call `logArgs`(v7, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.logArgs:([Ljava/lang/Object;)V` @kind direct;
  #L1786e6.  goto L178690;
  #L1786e8.  v1:= `@@com.j256.ormlite.support.DatabaseConnection.MORE_THAN_ONE` @type ^`java.lang.Object` @kind object;
  #L1786ec.  if v0 != v1 then goto L178758;
  #L1786f0.  v0:= `@@com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L1786f4.  v1:= "{} using '{}' and {} args, got >1 results" @kind object;
  #L1786f8.  v3:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` @kind object;
  #L1786fc.  v4:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement` @type ^`java.lang.String` @kind object;
  #L178700.  v5:= length @variable v2;
  #L178702.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L178708.  v5:= temp @kind object;
  #L17870a.  call `error`(v0, v1, v3, v4, v5) @signature `Lcom/j256/ormlite/logger/Logger;.error:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L178710.  call `logArgs`(v7, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.logArgs:([Ljava/lang/Object;)V` @kind direct;
  #L178716.  v0:= new `java.sql.SQLException`;
  #L17871a.  v1:= new `java.lang.StringBuilder`;
  #L17871e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L178724.  v2:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` @kind object;
  #L178728.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17872e.  v1:= temp @kind object;
  #L178730.  v2:= " got more than 1 result: " @kind object;
  #L178734.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17873a.  v1:= temp @kind object;
  #L17873c.  v2:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement` @type ^`java.lang.String` @kind object;
  #L178740.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L178746.  v1:= temp @kind object;
  #L178748.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L17874e.  v1:= temp @kind object;
  #L178750.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L178756.  throw v0;
  #L178758.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L17875c.  v3:= "{} using '{}' and {} args, got 1 result" @kind object;
  #L178760.  v4:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` @kind object;
  #L178764.  v5:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement` @type ^`java.lang.String` @kind object;
  #L178768.  v6:= length @variable v2;
  #L17876a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L178770.  v6:= temp @kind object;
  #L178772.  call `debug`(v1, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L178778.  goto L1786e0;
}
