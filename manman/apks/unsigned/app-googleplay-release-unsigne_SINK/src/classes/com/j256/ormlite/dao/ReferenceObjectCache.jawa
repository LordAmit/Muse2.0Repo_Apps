record `com.j256.ormlite.dao.ReferenceObjectCache` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.dao.ObjectCache` @kind interface {
  `java.util.concurrent.ConcurrentHashMap` `com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.j256.ormlite.dao.ReferenceObjectCache.useWeak` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `boolean` v2 ) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L163d18.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L163d1e.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L163d22.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L163d28.  v1.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L163d2c.  v1.`com.j256.ormlite.dao.ReferenceObjectCache.useWeak` @type ^`boolean` := v2 @kind boolean;
  #L163d30.  return @kind void;
}
procedure `void` `cleanMap`(`com.j256.ormlite.dao.ReferenceObjectCache` v2 @kind this, `java.util.Map` v3 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.cleanMap:(Ljava/util/Map;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L163d44.  call temp:= `entrySet`(v3) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L163d4a.  v0:= temp @kind object;
  #L163d4c.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L163d52.  v1:= temp @kind object;
  #L163d54.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L163d5a.  v0:= temp;
  #L163d5c.  if v0 == 0 then goto L163d8c;
  #L163d60.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L163d66.  v0:= temp @kind object;
  #L163d68.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L163d6c.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L163d72.  v0:= temp @kind object;
  #L163d74.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L163d78.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L163d7e.  v0:= temp @kind object;
  #L163d80.  if v0 != 0 then goto L163d54;
  #L163d84.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L163d8a.  goto L163d54;
  #L163d8c.  return @kind void;
}
procedure `java.util.Map` `getMapForClass`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L163da0.  v0:= v1.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L163da4.  call temp:= `get`(v0, v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L163daa.  v0:= temp @kind object;
  #L163dac.  v0:= (`java.util.Map`) v0 @kind object;
  #L163db0.  if v0 != 0 then goto L163db6;
  #L163db4.  v0:= 0I;
  #L163db6.  return v0 @kind object;
}
procedure `com.j256.ormlite.dao.ReferenceObjectCache` `makeSoftCache`() @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.makeSoftCache:()Lcom/j256/ormlite/dao/ReferenceObjectCache;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L163dc8.  v0:= new `com.j256.ormlite.dao.ReferenceObjectCache`;
  #L163dcc.  v1:= 0I;
  #L163dce.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.<init>:(Z)V` @kind direct;
  #L163dd4.  return v0 @kind object;
}
procedure `com.j256.ormlite.dao.ReferenceObjectCache` `makeWeakCache`() @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.makeWeakCache:()Lcom/j256/ormlite/dao/ReferenceObjectCache;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L163de8.  v0:= new `com.j256.ormlite.dao.ReferenceObjectCache`;
  #L163dec.  v1:= 1I;
  #L163dee.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.<init>:(Z)V` @kind direct;
  #L163df4.  return v0 @kind object;
}
procedure `void` `cleanNullReferences`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.cleanNullReferences:(Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L163e08.  call temp:= `getMapForClass`(v1, v2) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L163e0e.  v0:= temp @kind object;
  #L163e10.  if v0 == 0 then goto L163e1a;
  #L163e14.  call `cleanMap`(v1, v0) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.cleanMap:(Ljava/util/Map;)V` @kind direct;
  #L163e1a.  return @kind void;
}
procedure `void` `cleanNullReferencesAll`(`com.j256.ormlite.dao.ReferenceObjectCache` v2 @kind this) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.cleanNullReferencesAll:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L163e2c.  v0:= v2.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L163e30.  call temp:= `values`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L163e36.  v0:= temp @kind object;
  #L163e38.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L163e3e.  v1:= temp @kind object;
  #L163e40.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L163e46.  v0:= temp;
  #L163e48.  if v0 == 0 then goto L163e60;
  #L163e4c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L163e52.  v0:= temp @kind object;
  #L163e54.  v0:= (`java.util.Map`) v0 @kind object;
  #L163e58.  call `cleanMap`(v2, v0) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.cleanMap:(Ljava/util/Map;)V` @kind direct;
  #L163e5e.  goto L163e40;
  #L163e60.  return @kind void;
}
procedure `void` `clear`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.clear:(Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L163e74.  call temp:= `getMapForClass`(v1, v2) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L163e7a.  v0:= temp @kind object;
  #L163e7c.  if v0 == 0 then goto L163e86;
  #L163e80.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L163e86.  return @kind void;
}
procedure `void` `clearAll`(`com.j256.ormlite.dao.ReferenceObjectCache` v2 @kind this) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.clearAll:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L163e98.  v0:= v2.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L163e9c.  call temp:= `values`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L163ea2.  v0:= temp @kind object;
  #L163ea4.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L163eaa.  v1:= temp @kind object;
  #L163eac.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L163eb2.  v0:= temp;
  #L163eb4.  if v0 == 0 then goto L163ecc;
  #L163eb8.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L163ebe.  v0:= temp @kind object;
  #L163ec0.  v0:= (`java.util.Map`) v0 @kind object;
  #L163ec4.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L163eca.  goto L163eac;
  #L163ecc.  return @kind void;
}
procedure `java.lang.Object` `get`(`com.j256.ormlite.dao.ReferenceObjectCache` v3 @kind this, `java.lang.Class` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.get:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L163ee0.  v1:= 0I;
  #L163ee2.  call temp:= `getMapForClass`(v3, v4) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L163ee8.  v2:= temp @kind object;
  #L163eea.  if v2 != 0 then goto L163ef2;
  #L163eee.  v0:= v1 @kind object;
  #L163ef0.  return v0 @kind object;
  #L163ef2.  call temp:= `get`(v2, v5) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L163ef8.  v0:= temp @kind object;
  #L163efa.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L163efe.  if v0 != 0 then goto L163f06;
  #L163f02.  v0:= v1 @kind object;
  #L163f04.  goto L163ef0;
  #L163f06.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L163f0c.  v0:= temp @kind object;
  #L163f0e.  if v0 != 0 then goto L163ef0;
  #L163f12.  call temp:= `remove`(v2, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L163f18.  v0:= v1 @kind object;
  #L163f1a.  goto L163ef0;
}
procedure `void` `put`(`com.j256.ormlite.dao.ReferenceObjectCache` v2 @kind this, `java.lang.Class` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.put:(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L163f2c.  call temp:= `getMapForClass`(v2, v3) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L163f32.  v0:= temp @kind object;
  #L163f34.  if v0 == 0 then goto L163f50;
  #L163f38.  v1:= v2.`com.j256.ormlite.dao.ReferenceObjectCache.useWeak` @type ^`boolean` @kind boolean;
  #L163f3c.  if v1 == 0 then goto L163f52;
  #L163f40.  v1:= new `java.lang.ref.WeakReference`;
  #L163f44.  call `<init>`(v1, v5) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L163f4a.  call temp:= `put`(v0, v4, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L163f50.  return @kind void;
  #L163f52.  v1:= new `java.lang.ref.SoftReference`;
  #L163f56.  call `<init>`(v1, v5) @signature `Ljava/lang/ref/SoftReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L163f5c.  call temp:= `put`(v0, v4, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L163f62.  goto L163f50;
}
procedure `void` `registerClass`(`com.j256.ormlite.dao.ReferenceObjectCache` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.registerClass:(Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L163f74.  @monitorenter v2
  #Try_start0.  
  #L163f76.  v0:= v2.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L163f7a.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L163f80.  v0:= temp @kind object;
  #L163f82.  v0:= (`java.util.Map`) v0 @kind object;
  #L163f86.  if v0 != 0 then goto L163f9e;
  #L163f8a.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L163f8e.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L163f94.  v1:= v2.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L163f98.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L163f9e.  @monitorexit v2
  #L163fa0.  return @kind void;
  #L163fa2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L163fa4.  @monitorexit v2
  #L163fa6.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L163fa2;
}
procedure `void` `remove`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.remove:(Ljava/lang/Class;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L163fc4.  call temp:= `getMapForClass`(v1, v2) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L163fca.  v0:= temp @kind object;
  #L163fcc.  if v0 == 0 then goto L163fd6;
  #L163fd0.  call temp:= `remove`(v0, v3) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L163fd6.  return @kind void;
}
procedure `int` `size`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.size:(Ljava/lang/Class;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L163fe8.  call temp:= `getMapForClass`(v1, v2) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L163fee.  v0:= temp @kind object;
  #L163ff0.  if v0 != 0 then goto L163ff8;
  #L163ff4.  v0:= 0I;
  #L163ff6.  return v0;
  #L163ff8.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L163ffe.  v0:= temp;
  #L164000.  goto L163ff6;
}
procedure `int` `sizeAll`(`com.j256.ormlite.dao.ReferenceObjectCache` v3 @kind this) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.sizeAll:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L164014.  v0:= 0I;
  #L164016.  v1:= v3.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L16401a.  call temp:= `values`(v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L164020.  v1:= temp @kind object;
  #L164022.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L164028.  v2:= temp @kind object;
  #L16402a.  v1:= v0;
  #L16402c.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L164032.  v0:= temp;
  #L164034.  if v0 == 0 then goto L164052;
  #L164038.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L16403e.  v0:= temp @kind object;
  #L164040.  v0:= (`java.util.Map`) v0 @kind object;
  #L164044.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L16404a.  v0:= temp;
  #L16404c.  v0:= v0 + v1 @kind int;
  #L16404e.  v1:= v0;
  #L164050.  goto L16402c;
  #L164052.  return v1;
}
procedure `java.lang.Object` `updateId`(`com.j256.ormlite.dao.ReferenceObjectCache` v3 @kind this, `java.lang.Class` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.updateId:(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L164064.  v1:= 0I;
  #L164066.  call temp:= `getMapForClass`(v3, v4) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L16406c.  v2:= temp @kind object;
  #L16406e.  if v2 != 0 then goto L164076;
  #L164072.  v0:= v1 @kind object;
  #L164074.  return v0 @kind object;
  #L164076.  call temp:= `remove`(v2, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L16407c.  v0:= temp @kind object;
  #L16407e.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L164082.  if v0 != 0 then goto L16408a;
  #L164086.  v0:= v1 @kind object;
  #L164088.  goto L164074;
  #L16408a.  call temp:= `put`(v2, v6, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L164090.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L164096.  v0:= temp @kind object;
  #L164098.  goto L164074;
}
