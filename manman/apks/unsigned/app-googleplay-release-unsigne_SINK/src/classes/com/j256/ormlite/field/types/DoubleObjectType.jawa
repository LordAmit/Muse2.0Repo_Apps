record `com.j256.ormlite.field.types.DoubleObjectType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `com.j256.ormlite.field.types.DoubleObjectType` `@@com.j256.ormlite.field.types.DoubleObjectType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/DoubleObjectType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L16dca8.  v0:= new `com.j256.ormlite.field.types.DoubleObjectType`;
  #L16dcac.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/DoubleObjectType;.<init>:()V` @kind direct;
  #L16dcb2.  `@@com.j256.ormlite.field.types.DoubleObjectType.singleTon` @type ^`com.j256.ormlite.field.types.DoubleObjectType` := v0 @kind object;
  #L16dcb6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DoubleObjectType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/DoubleObjectType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16dcc8.  v0:= `@@com.j256.ormlite.field.SqlType.DOUBLE` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L16dccc.  v1:= 1I;
  #L16dcce.  v1:= new `java.lang.Class`[v1];
  #L16dcd2.  v2:= 0I;
  #L16dcd4.  v3:= constclass @type ^`java.lang.Double` @kind object;
  #L16dcd8.  v1[v2]:= v3 @kind object;
  #L16dcdc.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16dce2.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DoubleObjectType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/DoubleObjectType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16dcf4.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16dcfa.  return @kind void;
}
procedure `com.j256.ormlite.field.types.DoubleObjectType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/DoubleObjectType;.getSingleton:()Lcom/j256/ormlite/field/types/DoubleObjectType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L16dd0c.  v0:= `@@com.j256.ormlite.field.types.DoubleObjectType.singleTon` @type ^`com.j256.ormlite.field.types.DoubleObjectType` @kind object;
  #L16dd10.  return v0 @kind object;
}
procedure `boolean` `isEscapedValue`(`com.j256.ormlite.field.types.DoubleObjectType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DoubleObjectType;.isEscapedValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16dd24.  v0:= 0I;
  #L16dd26.  return v0;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.DoubleObjectType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lcom/j256/ormlite/field/types/DoubleObjectType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16dd38.  call temp:= `parseDouble`(v4) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L16dd3e.  v0:= temp @kind wide;
  #L16dd40.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L16dd46.  v0:= temp @kind object;
  #L16dd48.  return v0 @kind object;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.DoubleObjectType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `com.j256.ormlite.support.DatabaseResults` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/field/types/DoubleObjectType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16dd5c.  call temp:= `getDouble`(v4, v5) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getDouble:(I)D` @kind interface;
  #L16dd62.  v0:= temp @kind wide;
  #L16dd64.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L16dd6a.  v0:= temp @kind object;
  #L16dd6c.  return v0 @kind object;
}
