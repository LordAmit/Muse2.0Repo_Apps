record `com.j256.ormlite.field.types.SqlDateType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.DateType` @kind class {
}
global `com.j256.ormlite.field.types.SqlDateType` `@@com.j256.ormlite.field.types.SqlDateType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` `@@com.j256.ormlite.field.types.SqlDateType.sqlDateFormatConfig` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/SqlDateType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L16f180.  v0:= new `com.j256.ormlite.field.types.SqlDateType`;
  #L16f184.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/SqlDateType;.<init>:()V` @kind direct;
  #L16f18a.  `@@com.j256.ormlite.field.types.SqlDateType.singleTon` @type ^`com.j256.ormlite.field.types.SqlDateType` := v0 @kind object;
  #L16f18e.  v0:= new `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig`;
  #L16f192.  v1:= "yyyy-MM-dd" @kind object;
  #L16f196.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16f19c.  `@@com.j256.ormlite.field.types.SqlDateType.sqlDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` := v0 @kind object;
  #L16f1a0.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.SqlDateType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/SqlDateType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16f1b4.  v0:= `@@com.j256.ormlite.field.SqlType.DATE` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L16f1b8.  v1:= 1I;
  #L16f1ba.  v1:= new `java.lang.Class`[v1];
  #L16f1be.  v2:= 0I;
  #L16f1c0.  v3:= constclass @type ^`java.sql.Date` @kind object;
  #L16f1c4.  v1[v2]:= v3 @kind object;
  #L16f1c8.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/DateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16f1ce.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.SqlDateType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/SqlDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16f1e0.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/DateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16f1e6.  return @kind void;
}
procedure `com.j256.ormlite.field.types.SqlDateType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/SqlDateType;.getSingleton:()Lcom/j256/ormlite/field/types/SqlDateType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L16f1f8.  v0:= `@@com.j256.ormlite.field.types.SqlDateType.singleTon` @type ^`com.j256.ormlite.field.types.SqlDateType` @kind object;
  #L16f1fc.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` `getDefaultDateFormatConfig`(`com.j256.ormlite.field.types.SqlDateType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/SqlDateType;.getDefaultDateFormatConfig:()Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L16f210.  v0:= `@@com.j256.ormlite.field.types.SqlDateType.sqlDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L16f214.  return v0 @kind object;
}
procedure `boolean` `isValidForField`(`com.j256.ormlite.field.types.SqlDateType` v2 @kind this, `java.lang.reflect.Field` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/SqlDateType;.isValidForField:(Ljava/lang/reflect/Field;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16f228.  call temp:= `getType`(v3) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16f22e.  v0:= temp @kind object;
  #L16f230.  v1:= constclass @type ^`java.sql.Date` @kind object;
  #L16f234.  if v0 != v1 then goto L16f23c;
  #L16f238.  v0:= 1I;
  #L16f23a.  return v0;
  #L16f23c.  v0:= 0I;
  #L16f23e.  goto L16f23a;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.SqlDateType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/SqlDateType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16f250.  v6:= (`java.sql.Date`) v6 @kind object;
  #L16f254.  v0:= new `java.sql.Timestamp`;
  #L16f258.  call temp:= `getTime`(v6) @signature `Ljava/sql/Date;.getTime:()J` @kind virtual;
  #L16f25e.  v2:= temp @kind wide;
  #L16f260.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L16f266.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.SqlDateType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/SqlDateType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16f278.  v6:= (`java.sql.Timestamp`) v6 @kind object;
  #L16f27c.  v0:= new `java.sql.Date`;
  #L16f280.  call temp:= `getTime`(v6) @signature `Ljava/sql/Timestamp;.getTime:()J` @kind virtual;
  #L16f286.  v2:= temp @kind wide;
  #L16f288.  call `<init>`(v0, v2) @signature `Ljava/sql/Date;.<init>:(J)V` @kind direct;
  #L16f28e.  return v0 @kind object;
}
