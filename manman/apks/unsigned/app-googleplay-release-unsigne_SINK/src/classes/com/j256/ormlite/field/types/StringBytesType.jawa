record `com.j256.ormlite.field.types.StringBytesType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `java.lang.String` `@@com.j256.ormlite.field.types.StringBytesType.DEFAULT_STRING_BYTES_CHARSET_NAME` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.j256.ormlite.field.types.StringBytesType` `@@com.j256.ormlite.field.types.StringBytesType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/StringBytesType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L16f2a0.  v0:= new `com.j256.ormlite.field.types.StringBytesType`;
  #L16f2a4.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.<init>:()V` @kind direct;
  #L16f2aa.  `@@com.j256.ormlite.field.types.StringBytesType.singleTon` @type ^`com.j256.ormlite.field.types.StringBytesType` := v0 @kind object;
  #L16f2ae.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.StringBytesType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L16f2c0.  v0:= `@@com.j256.ormlite.field.SqlType.BYTE_ARRAY` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L16f2c4.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L16f2ca.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.StringBytesType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16f2dc.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16f2e2.  return @kind void;
}
procedure `java.lang.String` `getCharsetName`(`com.j256.ormlite.field.types.StringBytesType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.getCharsetName:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L16f2f4.  if v2 == 0 then goto L16f304;
  #L16f2f8.  call temp:= `getFormat`(v2) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L16f2fe.  v0:= temp @kind object;
  #L16f300.  if v0 != 0 then goto L16f30a;
  #L16f304.  v0:= "Unicode" @kind object;
  #L16f308.  return v0 @kind object;
  #L16f30a.  call temp:= `getFormat`(v2) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L16f310.  v0:= temp @kind object;
  #L16f312.  goto L16f308;
}
procedure `com.j256.ormlite.field.types.StringBytesType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/StringBytesType;.getSingleton:()Lcom/j256/ormlite/field/types/StringBytesType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L16f324.  v0:= `@@com.j256.ormlite.field.types.StringBytesType.singleTon` @type ^`com.j256.ormlite.field.types.StringBytesType` @kind object;
  #L16f328.  return v0 @kind object;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.StringBytesType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16f33c.  v0:= constclass @type ^`java.lang.String` @kind object;
  #L16f340.  return v0 @kind object;
}
procedure `boolean` `isArgumentHolderRequired`(`com.j256.ormlite.field.types.StringBytesType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.isArgumentHolderRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16f354.  v0:= 1I;
  #L16f356.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.StringBytesType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16f368.  v6:= (`java.lang.String`) v6 @kind object;
  #L16f36c.  call temp:= `getCharsetName`(v4, v5) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.getCharsetName:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind direct;
  #L16f372.  v0:= temp @kind object;
  #Try_start0.  
  #L16f374.  call temp:= `getBytes`(v6, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #Try_end0.  
  #L16f37a.  v0:= temp @kind object;
  #L16f37c.  return v0 @kind object;
  #L16f37e.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L16f380.  v2:= new `java.lang.StringBuilder`;
  #L16f384.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16f38a.  v3:= "Could not convert string with charset name: " @kind object;
  #L16f38e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f394.  v2:= temp @kind object;
  #L16f396.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f39c.  v0:= temp @kind object;
  #L16f39e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16f3a4.  v0:= temp @kind object;
  #L16f3a6.  call temp:= `create`(v0, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16f3ac.  v0:= temp @kind object;
  #L16f3ae.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[Try_start0..Try_end0] goto L16f37e;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.StringBytesType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16f3d0.  if v5 != 0 then goto L16f3d8;
  #L16f3d4.  v0:= 0I;
  #L16f3d6.  return v0 @kind object;
  #Try_start0.  
  #L16f3d8.  call temp:= `getCharsetName`(v3, v4) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.getCharsetName:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind direct;
  #L16f3de.  v0:= temp @kind object;
  #L16f3e0.  call temp:= `getBytes`(v5, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #Try_end0.  
  #L16f3e6.  v0:= temp @kind object;
  #L16f3e8.  goto L16f3d6;
  #L16f3ea.  v0:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L16f3ec.  v1:= new `java.lang.StringBuilder`;
  #L16f3f0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16f3f6.  v2:= "Could not convert default string: " @kind object;
  #L16f3fa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f400.  v1:= temp @kind object;
  #L16f402.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f408.  v1:= temp @kind object;
  #L16f40a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16f410.  v1:= temp @kind object;
  #L16f412.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16f418.  v0:= temp @kind object;
  #L16f41a.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[Try_start0..Try_end0] goto L16f3ea;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.StringBytesType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.String` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16f43c.  v0:= new `java.sql.SQLException`;
  #L16f440.  v1:= "String-bytes type cannot be converted from string to Java" @kind object;
  #L16f444.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16f44a.  throw v0;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.StringBytesType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16f45c.  call temp:= `getBytes`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getBytes:(I)[B` @kind interface;
  #L16f462.  v0:= temp @kind object;
  #L16f464.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.StringBytesType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16f478.  v6:= (`byte`[]) v6 @kind object;
  #L16f47c.  v6:= (`byte`[]) v6 @kind object;
  #L16f480.  call temp:= `getCharsetName`(v4, v5) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.getCharsetName:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind direct;
  #L16f486.  v1:= temp @kind object;
  #Try_start0.  
  #L16f488.  v0:= new `java.lang.String`;
  #L16f48c.  call `<init>`(v0, v6, v1) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #Try_end0.  
  #L16f492.  return v0 @kind object;
  #L16f494.  v0:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L16f496.  v2:= new `java.lang.StringBuilder`;
  #L16f49a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16f4a0.  v3:= "Could not convert string with charset name: " @kind object;
  #L16f4a4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f4aa.  v2:= temp @kind object;
  #L16f4ac.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f4b2.  v1:= temp @kind object;
  #L16f4b4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16f4ba.  v1:= temp @kind object;
  #L16f4bc.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16f4c2.  v0:= temp @kind object;
  #L16f4c4.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[Try_start0..Try_end0] goto L16f494;
}
