record `com.j256.ormlite.stmt.BaseArgumentHolder` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.stmt.ArgumentHolder` @kind interface {
  `java.lang.String` `com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.SqlType` `com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L172160.  v0:= 0I;
  #L172162.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L172168.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L17216c.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v0 @kind object;
  #L172170.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v0 @kind object;
  #L172174.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this, `com.j256.ormlite.field.SqlType` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L172188.  v0:= 0I;
  #L17218a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L172190.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L172194.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v0 @kind object;
  #L172198.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v0 @kind object;
  #L17219c.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v2 @kind object;
  #L1721a0.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1721b4.  v0:= 0I;
  #L1721b6.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1721bc.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L1721c0.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v0 @kind object;
  #L1721c4.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v0 @kind object;
  #L1721c8.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v2 @kind object;
  #L1721cc.  return @kind void;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1721e0.  v0:= v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L1721e4.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `getFieldType`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getFieldType:()Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1721f8.  v0:= v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1721fc.  return v0 @kind object;
}
procedure `java.lang.Object` `getSqlArgValue`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getSqlArgValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L172210.  call temp:= `isValueSet`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.isValueSet:()Z` @kind virtual;
  #L172216.  v0:= temp;
  #L172218.  if v0 != 0 then goto L172252;
  #L17221c.  v0:= new `java.sql.SQLException`;
  #L172220.  v1:= new `java.lang.StringBuilder`;
  #L172224.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L17222a.  v2:= "Column value has not been set for " @kind object;
  #L17222e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L172234.  v1:= temp @kind object;
  #L172236.  v2:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L17223a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L172240.  v1:= temp @kind object;
  #L172242.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L172248.  v1:= temp @kind object;
  #L17224a.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L172250.  throw v0;
  #L172252.  call temp:= `getValue`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L172258.  v0:= temp @kind object;
  #L17225a.  if v0 != 0 then goto L172262;
  #L17225e.  v0:= 0I;
  #L172260.  return v0 @kind object;
  #L172262.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L172266.  if v1 == 0 then goto L172260;
  #L17226a.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L17226e.  call temp:= `isForeign`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @kind virtual;
  #L172274.  v1:= temp;
  #L172276.  if v1 == 0 then goto L1722a8;
  #L17227a.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L17227e.  call temp:= `getType`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L172284.  v1:= temp @kind object;
  #L172286.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L17228c.  v2:= temp @kind object;
  #L17228e.  if v1 != v2 then goto L1722a8;
  #L172292.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L172296.  call temp:= `getForeignRefField`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignRefField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L17229c.  v1:= temp @kind object;
  #L17229e.  call temp:= `extractJavaFieldValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1722a4.  v0:= temp @kind object;
  #L1722a6.  goto L172260;
  #L1722a8.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1722ac.  call temp:= `convertJavaFieldToSqlArgValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1722b2.  v0:= temp @kind object;
  #L1722b4.  goto L172260;
}
procedure `com.j256.ormlite.field.SqlType` `getSqlType`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1722c8.  v0:= v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L1722cc.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`() @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getValue:()Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `isValueSet`() @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.isValueSet:()Z` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `setMetaInfo`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1722e0.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1722e4.  if v0 != 0 then goto L1722ee;
  #L1722e8.  v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v4 @kind object;
  #L1722ec.  return @kind void;
  #L1722ee.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1722f2.  if v0 == v4 then goto L1722e8;
  #L1722f6.  v0:= new `java.lang.IllegalArgumentException`;
  #L1722fa.  v1:= new `java.lang.StringBuilder`;
  #L1722fe.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L172304.  v2:= "FieldType name cannot be set twice from " @kind object;
  #L172308.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17230e.  v1:= temp @kind object;
  #L172310.  v2:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L172314.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17231a.  v1:= temp @kind object;
  #L17231c.  v2:= " to " @kind object;
  #L172320.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L172326.  v1:= temp @kind object;
  #L172328.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17232e.  v1:= temp @kind object;
  #L172330.  v2:= ".  Using a SelectArg twice in query with different columns?" @kind object;
  #L172334.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17233a.  v1:= temp @kind object;
  #L17233c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L172342.  v1:= temp @kind object;
  #L172344.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L17234a.  throw v0;
}
procedure `void` `setMetaInfo`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L17235c.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L172360.  if v0 != 0 then goto L17236a;
  #L172364.  v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v4 @kind object;
  #L172368.  return @kind void;
  #L17236a.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L17236e.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L172374.  v0:= temp;
  #L172376.  if v0 != 0 then goto L172364;
  #L17237a.  v0:= new `java.lang.IllegalArgumentException`;
  #L17237e.  v1:= new `java.lang.StringBuilder`;
  #L172382.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L172388.  v2:= "Column name cannot be set twice from " @kind object;
  #L17238c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L172392.  v1:= temp @kind object;
  #L172394.  v2:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L172398.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17239e.  v1:= temp @kind object;
  #L1723a0.  v2:= " to " @kind object;
  #L1723a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1723aa.  v1:= temp @kind object;
  #L1723ac.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1723b2.  v1:= temp @kind object;
  #L1723b4.  v2:= ".  Using a SelectArg twice in query with different columns?" @kind object;
  #L1723b8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1723be.  v1:= temp @kind object;
  #L1723c0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1723c6.  v1:= temp @kind object;
  #L1723c8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1723ce.  throw v0;
}
procedure `void` `setMetaInfo`(`com.j256.ormlite.stmt.BaseArgumentHolder` v0 @kind this, `java.lang.String` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PUBLIC {
    temp;

  #L1723e0.  call `setMetaInfo`(v0, v1) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Ljava/lang/String;)V` @kind virtual;
  #L1723e6.  call `setMetaInfo`(v0, v2) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Lcom/j256/ormlite/field/FieldType;)V` @kind virtual;
  #L1723ec.  return @kind void;
}
procedure `void` `setValue`(`java.lang.Object` v0 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setValue:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L172400.  call temp:= `isValueSet`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.isValueSet:()Z` @kind virtual;
  #L172406.  v0:= temp;
  #L172408.  if v0 != 0 then goto L172412;
  #L17240c.  v0:= "[unset]" @kind object;
  #L172410.  return v0 @kind object;
  #Try_start0.  
  #L172412.  call temp:= `getSqlArgValue`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getSqlArgValue:()Ljava/lang/Object;` @kind virtual;
  #L172418.  v0:= temp @kind object;
  #L17241a.  if v0 != 0 then goto L172424;
  #L17241e.  v0:= "[null]" @kind object;
  #L172422.  goto L172410;
  #L172424.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L17242a.  v0:= temp @kind object;
  #L17242c.  goto L172410;
  #L17242e.  v0:= Exception @type ^`java.sql.SQLException` @kind object;
  #L172430.  v1:= new `java.lang.StringBuilder`;
  #L172434.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L17243a.  v2:= "[could not get value: " @kind object;
  #L17243e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L172444.  v1:= temp @kind object;
  #L172446.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L17244c.  v0:= temp @kind object;
  #L17244e.  v1:= "]" @kind object;
  #L172452.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L172458.  v0:= temp @kind object;
  #L17245a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L172460.  v0:= temp @kind object;
  #L172462.  goto L172410;
  catch `java.sql.SQLException` @[Try_start0..Try_end0] goto L17242e;
}
