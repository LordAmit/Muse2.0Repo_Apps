record `com.j256.ormlite.field.types.TimeStampStringType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.DateStringType` @kind class {
}
global `com.j256.ormlite.field.types.TimeStampStringType` `@@com.j256.ormlite.field.types.TimeStampStringType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L16f4e8.  v0:= new `com.j256.ormlite.field.types.TimeStampStringType`;
  #L16f4ec.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.<init>:()V` @kind direct;
  #L16f4f2.  `@@com.j256.ormlite.field.types.TimeStampStringType.singleTon` @type ^`com.j256.ormlite.field.types.TimeStampStringType` := v0 @kind object;
  #L16f4f6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.TimeStampStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L16f508.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L16f50c.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L16f512.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.TimeStampStringType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16f524.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16f52a.  return @kind void;
}
procedure `com.j256.ormlite.field.types.TimeStampStringType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.getSingleton:()Lcom/j256/ormlite/field/types/TimeStampStringType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L16f53c.  v0:= `@@com.j256.ormlite.field.types.TimeStampStringType.singleTon` @type ^`com.j256.ormlite.field.types.TimeStampStringType` @kind object;
  #L16f540.  return v0 @kind object;
}
procedure `boolean` `isValidForField`(`com.j256.ormlite.field.types.TimeStampStringType` v2 @kind this, `java.lang.reflect.Field` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.isValidForField:(Ljava/lang/reflect/Field;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16f554.  call temp:= `getType`(v3) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16f55a.  v0:= temp @kind object;
  #L16f55c.  v1:= constclass @type ^`java.sql.Timestamp` @kind object;
  #L16f560.  if v0 != v1 then goto L16f568;
  #L16f564.  v0:= 1I;
  #L16f566.  return v0;
  #L16f568.  v0:= 0I;
  #L16f56a.  goto L16f566;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.TimeStampStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16f57c.  v6:= (`java.sql.Timestamp`) v6 @kind object;
  #L16f580.  v0:= new `java.util.Date`;
  #L16f584.  call temp:= `getTime`(v6) @signature `Ljava/sql/Timestamp;.getTime:()J` @kind virtual;
  #L16f58a.  v2:= temp @kind wide;
  #L16f58c.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L16f592.  call temp:= `javaToSqlArg`(v4, v5, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @kind super;
  #L16f598.  v0:= temp @kind object;
  #L16f59a.  return v0 @kind object;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.TimeStampStringType` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16f5ac.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L16f5b2.  v2:= temp @kind wide;
  #L16f5b4.  if v7 != 0 then goto L16f5c4;
  #L16f5b8.  v0:= new `java.sql.Timestamp`;
  #L16f5bc.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L16f5c2.  return v0 @kind object;
  #L16f5c4.  v7:= (`java.sql.Timestamp`) v7 @kind object;
  #L16f5c8.  call temp:= `getTime`(v7) @signature `Ljava/sql/Timestamp;.getTime:()J` @kind virtual;
  #L16f5ce.  v0:= temp @kind wide;
  #L16f5d0.  v0:= lcmp(v2, v0);
  #L16f5d4.  if v0 != 0 then goto L16f5ea;
  #L16f5d8.  v0:= new `java.sql.Timestamp`;
  #L16f5dc.  v4:= 1L;
  #L16f5e0.  v2:= v2 + v4 @kind long;
  #L16f5e2.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L16f5e8.  goto L16f5c2;
  #L16f5ea.  v0:= new `java.sql.Timestamp`;
  #L16f5ee.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L16f5f4.  goto L16f5c2;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.TimeStampStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16f608.  call temp:= `sqlArgToJava`(v4, v5, v6, v7) @signature `Lcom/j256/ormlite/field/types/DateStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind super;
  #L16f60e.  v0:= temp @kind object;
  #L16f610.  v0:= (`java.util.Date`) v0 @kind object;
  #L16f614.  v1:= new `java.sql.Timestamp`;
  #L16f618.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L16f61e.  v2:= temp @kind wide;
  #L16f620.  call `<init>`(v1, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L16f626.  return v1 @kind object;
}
