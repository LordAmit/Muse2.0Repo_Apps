record `com.j256.ormlite.field.types.ByteObjectType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `com.j256.ormlite.field.types.ByteObjectType` `@@com.j256.ormlite.field.types.ByteObjectType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/ByteObjectType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L16cfd8.  v0:= new `com.j256.ormlite.field.types.ByteObjectType`;
  #L16cfdc.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/ByteObjectType;.<init>:()V` @kind direct;
  #L16cfe2.  `@@com.j256.ormlite.field.types.ByteObjectType.singleTon` @type ^`com.j256.ormlite.field.types.ByteObjectType` := v0 @kind object;
  #L16cfe6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.ByteObjectType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/ByteObjectType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16cff8.  v0:= `@@com.j256.ormlite.field.SqlType.BYTE` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L16cffc.  v1:= 1I;
  #L16cffe.  v1:= new `java.lang.Class`[v1];
  #L16d002.  v2:= 0I;
  #L16d004.  v3:= constclass @type ^`java.lang.Byte` @kind object;
  #L16d008.  v1[v2]:= v3 @kind object;
  #L16d00c.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16d012.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.ByteObjectType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/ByteObjectType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16d024.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16d02a.  return @kind void;
}
procedure `com.j256.ormlite.field.types.ByteObjectType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/ByteObjectType;.getSingleton:()Lcom/j256/ormlite/field/types/ByteObjectType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L16d03c.  v0:= `@@com.j256.ormlite.field.types.ByteObjectType.singleTon` @type ^`com.j256.ormlite.field.types.ByteObjectType` @kind object;
  #L16d040.  return v0 @kind object;
}
procedure `java.lang.Object` `convertIdNumber`(`com.j256.ormlite.field.types.ByteObjectType` v1 @kind this, `java.lang.Number` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/ByteObjectType;.convertIdNumber:(Ljava/lang/Number;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d054.  call temp:= `byteValue`(v2) @signature `Ljava/lang/Number;.byteValue:()B` @kind virtual;
  #L16d05a.  v0:= temp;
  #L16d05c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L16d062.  v0:= temp @kind object;
  #L16d064.  return v0 @kind object;
}
procedure `boolean` `isEscapedValue`(`com.j256.ormlite.field.types.ByteObjectType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/ByteObjectType;.isEscapedValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d078.  v0:= 0I;
  #L16d07a.  return v0;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.ByteObjectType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/ByteObjectType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d08c.  call temp:= `parseByte`(v3) @signature `Ljava/lang/Byte;.parseByte:(Ljava/lang/String;)B` @kind static;
  #L16d092.  v0:= temp;
  #L16d094.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L16d09a.  v0:= temp @kind object;
  #L16d09c.  return v0 @kind object;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.ByteObjectType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/ByteObjectType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d0b0.  call temp:= `getByte`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getByte:(I)B` @kind interface;
  #L16d0b6.  v0:= temp;
  #L16d0b8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L16d0be.  v0:= temp @kind object;
  #L16d0c0.  return v0 @kind object;
}
