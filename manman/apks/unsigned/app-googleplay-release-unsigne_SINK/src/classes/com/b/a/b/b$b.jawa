record `com.b.a.b.b$b` @kind class @AccessFlag FINAL extends `java.io.Serializable` @kind interface, `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type` `com.b.a.b.b$b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `com.b.a.b.b$b.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `com.b.a.b.b$b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.b.b$b` v4 @kind this, `java.lang.reflect.Type` v5 @kind object, `java.lang.reflect.Type` v6 @kind object, `java.lang.reflect.Type`[] v7 @kind object) @signature `Lcom/b/a/b/b$b;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L155448.  v2:= 1I;
  #L15544a.  v1:= 0I;
  #L15544c.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L155452.  v0:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L155456.  if v0 == 0 then goto L155492;
  #L15545a.  v0:= v6 @kind object;
  #L15545c.  v0:= (`java.lang.Class`) v0 @kind object;
  #L155460.  call temp:= `getModifiers`(v0) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L155466.  v3:= temp;
  #L155468.  call temp:= `isStatic`(v3) @signature `Ljava/lang/reflect/Modifier;.isStatic:(I)Z` @kind static;
  #L15546e.  v3:= temp;
  #L155470.  if v3 != 0 then goto L155480;
  #L155474.  call temp:= `getEnclosingClass`(v0) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L15547a.  v0:= temp @kind object;
  #L15547c.  if v0 != 0 then goto L1554fc;
  #L155480.  v0:= v2;
  #L155482.  if v5 != 0 then goto L15548a;
  #L155486.  if v0 == 0 then goto L155500;
  #L15548a.  v0:= v2;
  #L15548c.  call `a`(v0) @signature `Lcom/b/a/b/a;.a:(Z)V` @kind static;
  #L155492.  if v5 != 0 then goto L155504;
  #L155496.  v0:= 0I;
  #L155498.  v4.`com.b.a.b.b$b.a` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L15549c.  call temp:= `d`(v6) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1554a2.  v0:= temp @kind object;
  #L1554a4.  v4.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1554a8.  call temp:= `clone`(v7) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1554ae.  v0:= temp @kind object;
  #L1554b0.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L1554b4.  v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L1554b8.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1554bc.  v0:= length @variable v0;
  #L1554be.  if v1 >= v0 then goto L15550e;
  #L1554c2.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1554c6.  v0:= v0[v1] @kind object;
  #L1554ca.  call temp:= `a`(v0) @signature `Lcom/b/a/b/a;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1554d0.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1554d4.  v0:= v0[v1] @kind object;
  #L1554d8.  call `h`(v0) @signature `Lcom/b/a/b/b;.h:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1554de.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1554e2.  v2:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1554e6.  v2:= v2[v1] @kind object;
  #L1554ea.  call temp:= `d`(v2) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1554f0.  v2:= temp @kind object;
  #L1554f2.  v0[v1]:= v2 @kind object;
  #L1554f6.  v1:= v1 + 1;
  #L1554fa.  goto L1554b8;
  #L1554fc.  v0:= v1;
  #L1554fe.  goto L155482;
  #L155500.  v0:= v1;
  #L155502.  goto L15548c;
  #L155504.  call temp:= `d`(v5) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L15550a.  v0:= temp @kind object;
  #L15550c.  goto L155498;
  #L15550e.  return @kind void;
}
procedure `boolean` `equals`(`com.b.a.b.b$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/b$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L155520.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L155524.  if v0 == 0 then goto L15553c;
  #L155528.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L15552c.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L155532.  v0:= temp;
  #L155534.  if v0 == 0 then goto L15553c;
  #L155538.  v0:= 1I;
  #L15553a.  return v0;
  #L15553c.  v0:= 0I;
  #L15553e.  goto L15553a;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`com.b.a.b.b$b` v1 @kind this) @signature `Lcom/b/a/b/b$b;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L155550.  v0:= v1.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L155554.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L15555a.  v0:= temp @kind object;
  #L15555c.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L155560.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`com.b.a.b.b$b` v1 @kind this) @signature `Lcom/b/a/b/b$b;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L155574.  v0:= v1.`com.b.a.b.b$b.a` @type ^`java.lang.reflect.Type` @kind object;
  #L155578.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`com.b.a.b.b$b` v1 @kind this) @signature `Lcom/b/a/b/b$b;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15558c.  v0:= v1.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L155590.  return v0 @kind object;
}
procedure `int` `hashCode`(`com.b.a.b.b$b` v2 @kind this) @signature `Lcom/b/a/b/b$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1555a4.  v0:= v2.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1555a8.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L1555ae.  v0:= temp;
  #L1555b0.  v1:= v2.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L1555b4.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1555ba.  v1:= temp;
  #L1555bc.  v0:= v0 ^~ v1 @kind int;
  #L1555be.  v1:= v2.`com.b.a.b.b$b.a` @type ^`java.lang.reflect.Type` @kind object;
  #L1555c2.  call temp:= `a`(v1) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/Object;)I` @kind static;
  #L1555c8.  v1:= temp;
  #L1555ca.  v0:= v0 ^~ v1 @kind int;
  #L1555cc.  return v0;
}
procedure `java.lang.String` `toString`(`com.b.a.b.b$b` v4 @kind this) @signature `Lcom/b/a/b/b$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1555e0.  v1:= new `java.lang.StringBuilder`;
  #L1555e4.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1555e8.  v0:= length @variable v0;
  #L1555ea.  v0:= v0 + 1;
  #L1555ee.  v0:= v0 * 30;
  #L1555f2.  call `<init>`(v1, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L1555f8.  v0:= v4.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L1555fc.  call temp:= `f`(v0) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L155602.  v0:= temp @kind object;
  #L155604.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15560a.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L15560e.  v0:= length @variable v0;
  #L155610.  if v0 != 0 then goto L15561e;
  #L155614.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15561a.  v0:= temp @kind object;
  #L15561c.  return v0 @kind object;
  #L15561e.  v0:= "<" @kind object;
  #L155622.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155628.  v0:= temp @kind object;
  #L15562a.  v2:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L15562e.  v3:= 0I;
  #L155630.  v2:= v2[v3] @kind object;
  #L155634.  call temp:= `f`(v2) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L15563a.  v2:= temp @kind object;
  #L15563c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155642.  v0:= 1I;
  #L155644.  v2:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L155648.  v2:= length @variable v2;
  #L15564a.  if v0 >= v2 then goto L155676;
  #L15564e.  v2:= ", " @kind object;
  #L155652.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155658.  v2:= temp @kind object;
  #L15565a.  v3:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L15565e.  v3:= v3[v0] @kind object;
  #L155662.  call temp:= `f`(v3) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L155668.  v3:= temp @kind object;
  #L15566a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155670.  v0:= v0 + 1;
  #L155674.  goto L155644;
  #L155676.  v0:= ">" @kind object;
  #L15567a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155680.  v0:= temp @kind object;
  #L155682.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L155688.  v0:= temp @kind object;
  #L15568a.  goto L15561c;
}
