record `com.b.a.b.g` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.AbstractMap` @kind class, `java.io.Serializable` @kind interface {
  `java.util.Comparator` `com.b.a.b.g.a` @AccessFlag ;
  `com.b.a.b.g$d` `com.b.a.b.g.b` @AccessFlag ;
  `int` `com.b.a.b.g.c` @AccessFlag ;
  `int` `com.b.a.b.g.d` @AccessFlag ;
  `com.b.a.b.g$d` `com.b.a.b.g.e` @AccessFlag FINAL;
  `com.b.a.b.g$a` `com.b.a.b.g.h` @AccessFlag PRIVATE;
  `com.b.a.b.g$b` `com.b.a.b.g.i` @AccessFlag PRIVATE;
}
global `boolean` `@@com.b.a.b.g.f` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.Comparator` `@@com.b.a.b.g.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L157560.  v0:= constclass @type ^`com.b.a.b.g` @kind object;
  #L157564.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L15756a.  v0:= temp;
  #L15756c.  if v0 != 0 then goto L157586;
  #L157570.  v0:= 1I;
  #L157572.  `@@com.b.a.b.g.f` @type ^`boolean` := v0 @kind boolean;
  #L157576.  v0:= new `com.b.a.b.g$1`;
  #L15757a.  call `<init>`(v0) @signature `Lcom/b/a/b/g$1;.<init>:()V` @kind direct;
  #L157580.  `@@com.b.a.b.g.g` @type ^`java.util.Comparator` := v0 @kind object;
  #L157584.  return @kind void;
  #L157586.  v0:= 0I;
  #L157588.  goto L157572;
}
procedure `void` `<init>`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15759c.  v0:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L1575a0.  call `<init>`(v1, v0) @signature `Lcom/b/a/b/g;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L1575a6.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.b.g` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lcom/b/a/b/g;.<init>:(Ljava/util/Comparator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1575b8.  v0:= 0I;
  #L1575ba.  call `<init>`(v1) @signature `Ljava/util/AbstractMap;.<init>:()V` @kind direct;
  #L1575c0.  v1.`com.b.a.b.g.c` @type ^`int` := v0;
  #L1575c4.  v1.`com.b.a.b.g.d` @type ^`int` := v0;
  #L1575c8.  v0:= new `com.b.a.b.g$d`;
  #L1575cc.  call `<init>`(v0) @signature `Lcom/b/a/b/g$d;.<init>:()V` @kind direct;
  #L1575d2.  v1.`com.b.a.b.g.e` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L1575d6.  if v2 == 0 then goto L1575e0;
  #L1575da.  v1.`com.b.a.b.g.a` @type ^`java.util.Comparator` := v2 @kind object;
  #L1575de.  return @kind void;
  #L1575e0.  v2:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L1575e4.  goto L1575da;
}
procedure `void` `a`(`com.b.a.b.g` v6 @kind this, `com.b.a.b.g$d` v7 @kind object) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1575f8.  v1:= 0I;
  #L1575fa.  v0:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L1575fe.  v3:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L157602.  v4:= v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L157606.  v5:= v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L15760a.  v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L15760e.  if v4 == 0 then goto L157616;
  #L157612.  v4.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L157616.  call `a`(v6, v7, v3) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L15761c.  v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L157620.  v7.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L157624.  if v0 == 0 then goto L157664;
  #L157628.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L15762c.  v2:= v0;
  #L15762e.  if v4 == 0 then goto L157668;
  #L157632.  v0:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L157636.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L15763c.  v0:= temp;
  #L15763e.  v0:= v0 + 1;
  #L157642.  v7.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L157646.  v0:= v7.`com.b.a.b.g$d.h` @type ^`int`;
  #L15764a.  if v5 == 0 then goto L157652;
  #L15764e.  v1:= v5.`com.b.a.b.g$d.h` @type ^`int`;
  #L157652.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L157658.  v0:= temp;
  #L15765a.  v0:= v0 + 1;
  #L15765e.  v3.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L157662.  return @kind void;
  #L157664.  v2:= v1;
  #L157666.  goto L15762e;
  #L157668.  v0:= v1;
  #L15766a.  goto L157636;
}
procedure `void` `a`(`com.b.a.b.g` v2 @kind this, `com.b.a.b.g$d` v3 @kind object, `com.b.a.b.g$d` v4 @kind object) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L15767c.  v0:= v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` @kind object;
  #L157680.  v1:= 0I;
  #L157682.  v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v1 @kind object;
  #L157686.  if v4 == 0 then goto L15768e;
  #L15768a.  v4.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L15768e.  if v0 == 0 then goto L1576c2;
  #L157692.  v1:= v0.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L157696.  if v1 != v3 then goto L1576a0;
  #L15769a.  v0.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L15769e.  return @kind void;
  #L1576a0.  v1:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L1576a4.  if v1 != 0 then goto L1576bc;
  #L1576a8.  v1:= v0.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L1576ac.  if v1 == v3 then goto L1576bc;
  #L1576b0.  v0:= new `java.lang.AssertionError`;
  #L1576b4.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1576ba.  throw v0;
  #L1576bc.  v0.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L1576c0.  goto L15769e;
  #L1576c2.  v2.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L1576c6.  goto L15769e;
}
procedure `boolean` `a`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1576d8.  if v2 == v3 then goto L1576ec;
  #L1576dc.  if v2 == 0 then goto L1576f0;
  #L1576e0.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1576e6.  v0:= temp;
  #L1576e8.  if v0 == 0 then goto L1576f0;
  #L1576ec.  v0:= 1I;
  #L1576ee.  return v0;
  #L1576f0.  v0:= 0I;
  #L1576f2.  goto L1576ee;
}
procedure `void` `b`(`com.b.a.b.g` v6 @kind this, `com.b.a.b.g$d` v7 @kind object) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L157704.  v1:= 0I;
  #L157706.  v3:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L15770a.  v0:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L15770e.  v4:= v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L157712.  v5:= v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L157716.  v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L15771a.  if v5 == 0 then goto L157722;
  #L15771e.  v5.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L157722.  call `a`(v6, v7, v3) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L157728.  v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L15772c.  v7.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L157730.  if v0 == 0 then goto L157770;
  #L157734.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L157738.  v2:= v0;
  #L15773a.  if v5 == 0 then goto L157774;
  #L15773e.  v0:= v5.`com.b.a.b.g$d.h` @type ^`int`;
  #L157742.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L157748.  v0:= temp;
  #L15774a.  v0:= v0 + 1;
  #L15774e.  v7.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L157752.  v0:= v7.`com.b.a.b.g$d.h` @type ^`int`;
  #L157756.  if v4 == 0 then goto L15775e;
  #L15775a.  v1:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L15775e.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L157764.  v0:= temp;
  #L157766.  v0:= v0 + 1;
  #L15776a.  v3.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L15776e.  return @kind void;
  #L157770.  v2:= v1;
  #L157772.  goto L15773a;
  #L157774.  v0:= v1;
  #L157776.  goto L157742;
}
procedure `void` `b`(`com.b.a.b.g` v9 @kind this, `com.b.a.b.g$d` v10 @kind object, `boolean` v11 ) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L157788.  v8:= 1I;
  #L15778a.  v7:= -1I;
  #L15778c.  v1:= 0I;
  #L15778e.  if v10 == 0 then goto L1577e8;
  #L157792.  v3:= v10.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L157796.  v4:= v10.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L15779a.  if v3 == 0 then goto L1577ea;
  #L15779e.  v0:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L1577a2.  v2:= v0;
  #L1577a4.  if v4 == 0 then goto L1577ee;
  #L1577a8.  v0:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L1577ac.  v5:= v2 - v0 @kind int;
  #L1577b0.  v6:= -2I;
  #L1577b2.  if v5 != v6 then goto L157820;
  #L1577b6.  v3:= v4.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L1577ba.  v0:= v4.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L1577be.  if v0 == 0 then goto L1577f2;
  #L1577c2.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L1577c6.  v2:= v0;
  #L1577c8.  if v3 == 0 then goto L1577f6;
  #L1577cc.  v0:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L1577d0.  v0:= v0 - v2 @kind int;
  #L1577d2.  if v0 == v7 then goto L1577de;
  #L1577d6.  if v0 != 0 then goto L1577fa;
  #L1577da.  if v11 != 0 then goto L1577fa;
  #L1577de.  call `a`(v9, v10) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L1577e4.  if v11 == 0 then goto L157858;
  #L1577e8.  return @kind void;
  #L1577ea.  v2:= v1;
  #L1577ec.  goto L1577a4;
  #L1577ee.  v0:= v1;
  #L1577f0.  goto L1577ac;
  #L1577f2.  v2:= v1;
  #L1577f4.  goto L1577c8;
  #L1577f6.  v0:= v1;
  #L1577f8.  goto L1577d0;
  #L1577fa.  v2:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L1577fe.  if v2 != 0 then goto L157812;
  #L157802.  if v0 == v8 then goto L157812;
  #L157806.  v0:= new `java.lang.AssertionError`;
  #L15780a.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L157810.  throw v0;
  #L157812.  call `b`(v9, v4) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L157818.  call `a`(v9, v10) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L15781e.  goto L1577e4;
  #L157820.  v4:= 2I;
  #L157822.  if v5 != v4 then goto L15788c;
  #L157826.  v4:= v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L15782a.  v0:= v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L15782e.  if v0 == 0 then goto L15785e;
  #L157832.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L157836.  v2:= v0;
  #L157838.  if v4 == 0 then goto L157862;
  #L15783c.  v0:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L157840.  v0:= v0 - v2 @kind int;
  #L157842.  if v0 == v8 then goto L15784e;
  #L157846.  if v0 != 0 then goto L157866;
  #L15784a.  if v11 != 0 then goto L157866;
  #L15784e.  call `b`(v9, v10) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L157854.  if v11 != 0 then goto L1577e8;
  #L157858.  v10:= v10.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` @kind object;
  #L15785c.  goto L15778e;
  #L15785e.  v2:= v1;
  #L157860.  goto L157838;
  #L157862.  v0:= v1;
  #L157864.  goto L157840;
  #L157866.  v2:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L15786a.  if v2 != 0 then goto L15787e;
  #L15786e.  if v0 == v7 then goto L15787e;
  #L157872.  v0:= new `java.lang.AssertionError`;
  #L157876.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L15787c.  throw v0;
  #L15787e.  call `a`(v9, v3) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L157884.  call `b`(v9, v10) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L15788a.  goto L157854;
  #L15788c.  if v5 != 0 then goto L15789e;
  #L157890.  v0:= v2 + 1;
  #L157894.  v10.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L157898.  if v11 == 0 then goto L157858;
  #L15789c.  goto L1577e8;
  #L15789e.  v3:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L1578a2.  if v3 != 0 then goto L1578ba;
  #L1578a6.  if v5 == v7 then goto L1578ba;
  #L1578aa.  if v5 == v8 then goto L1578ba;
  #L1578ae.  v0:= new `java.lang.AssertionError`;
  #L1578b2.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1578b8.  throw v0;
  #L1578ba.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L1578c0.  v0:= temp;
  #L1578c2.  v0:= v0 + 1;
  #L1578c6.  v10.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L1578ca.  if v11 != 0 then goto L157858;
  #L1578ce.  goto L1577e8;
}
procedure `com.b.a.b.g$d` `a`(`com.b.a.b.g` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L1578e0.  v0:= 0I;
  #L1578e2.  if v3 == 0 then goto L1578f0;
  #L1578e6.  v1:= 0I;
  #Try_start0.  
  #L1578e8.  call temp:= `a`(v2, v3, v1) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Z)Lcom/b/a/b/g$d;` @kind virtual;
  #Try_end0.  
  #L1578ee.  v0:= temp @kind object;
  #L1578f0.  return v0 @kind object;
  #L1578f2.  v1:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L1578f4.  goto L1578f0;
  catch `java.lang.ClassCastException` @[Try_start0..Try_end0] goto L1578f2;
}
procedure `com.b.a.b.g$d` `a`(`com.b.a.b.g` v7 @kind this, `java.lang.Object` v8 @kind object, `boolean` v9 ) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Z)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L157918.  v1:= 0I;
  #L15791a.  v5:= v7.`com.b.a.b.g.a` @type ^`java.util.Comparator` @kind object;
  #L15791e.  v2:= v7.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` @kind object;
  #L157922.  v0:= 0I;
  #L157924.  if v2 == 0 then goto L157a2e;
  #L157928.  v0:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L15792c.  if v5 != v0 then goto L15794e;
  #L157930.  v0:= v8 @kind object;
  #L157932.  v0:= (`java.lang.Comparable`) v0 @kind object;
  #L157936.  if v0 == 0 then goto L157952;
  #L15793a.  v3:= v2.`com.b.a.b.g$d.f` @type ^`java.lang.Object` @kind object;
  #L15793e.  call temp:= `compareTo`(v0, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L157944.  v3:= temp;
  #L157946.  if v3 != 0 then goto L157960;
  #L15794a.  v1:= v2 @kind object;
  #L15794c.  return v1 @kind object;
  #L15794e.  v0:= v1 @kind object;
  #L157950.  goto L157936;
  #L157952.  v3:= v2.`com.b.a.b.g$d.f` @type ^`java.lang.Object` @kind object;
  #L157956.  call temp:= `compare`(v5, v8, v3) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L15795c.  v3:= temp;
  #L15795e.  goto L157946;
  #L157960.  if v3 >= 0 then goto L1579d0;
  #L157964.  v4:= v2.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L157968.  if v4 != 0 then goto L1579d6;
  #L15796c.  v6:= v3;
  #L15796e.  v3:= v2 @kind object;
  #L157970.  v2:= v6;
  #L157972.  if v9 == 0 then goto L15794c;
  #L157976.  v1:= v7.`com.b.a.b.g.e` @type ^`com.b.a.b.g$d` @kind object;
  #L15797a.  if v3 != 0 then goto L157a08;
  #L15797e.  v0:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L157982.  if v5 != v0 then goto L1579da;
  #L157986.  v0:= instanceof @variable v8 @type ^`java.lang.Comparable` @kind boolean;
  #L15798a.  if v0 != 0 then goto L1579da;
  #L15798e.  v0:= new `java.lang.ClassCastException`;
  #L157992.  v1:= new `java.lang.StringBuilder`;
  #L157996.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15799c.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1579a2.  v2:= temp @kind object;
  #L1579a4.  call temp:= `getName`(v2) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1579aa.  v2:= temp @kind object;
  #L1579ac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1579b2.  v1:= temp @kind object;
  #L1579b4.  v2:= " is not Comparable" @kind object;
  #L1579b8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1579be.  v1:= temp @kind object;
  #L1579c0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1579c6.  v1:= temp @kind object;
  #L1579c8.  call `<init>`(v0, v1) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1579ce.  throw v0;
  #L1579d0.  v4:= v2.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L1579d4.  goto L157968;
  #L1579d6.  v2:= v4 @kind object;
  #L1579d8.  goto L157936;
  #L1579da.  v0:= new `com.b.a.b.g$d`;
  #L1579de.  v2:= v1.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L1579e2.  call `<init>`(v0, v3, v8, v1, v2) @signature `Lcom/b/a/b/g$d;.<init>:(Lcom/b/a/b/g$d;Ljava/lang/Object;Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L1579e8.  v7.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L1579ec.  v1:= v7.`com.b.a.b.g.c` @type ^`int`;
  #L1579f0.  v1:= v1 + 1;
  #L1579f4.  v7.`com.b.a.b.g.c` @type ^`int` := v1;
  #L1579f8.  v1:= v7.`com.b.a.b.g.d` @type ^`int`;
  #L1579fc.  v1:= v1 + 1;
  #L157a00.  v7.`com.b.a.b.g.d` @type ^`int` := v1;
  #L157a04.  v1:= v0 @kind object;
  #L157a06.  goto L15794c;
  #L157a08.  v0:= new `com.b.a.b.g$d`;
  #L157a0c.  v4:= v1.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L157a10.  call `<init>`(v0, v3, v8, v1, v4) @signature `Lcom/b/a/b/g$d;.<init>:(Lcom/b/a/b/g$d;Ljava/lang/Object;Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L157a16.  if v2 >= 0 then goto L157a28;
  #L157a1a.  v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L157a1e.  v1:= 1I;
  #L157a20.  call `b`(v7, v3, v1) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;Z)V` @kind direct;
  #L157a26.  goto L1579ec;
  #L157a28.  v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L157a2c.  goto L157a1e;
  #L157a2e.  v3:= v2 @kind object;
  #L157a30.  v2:= v0;
  #L157a32.  goto L157972;
}
procedure `com.b.a.b.g$d` `a`(`com.b.a.b.g` v3 @kind this, `java.util.Map$Entry` v4 @kind object) @signature `Lcom/b/a/b/g;.a:(Ljava/util/Map$Entry;)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L157a44.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L157a4a.  v0:= temp @kind object;
  #L157a4c.  call temp:= `a`(v3, v0) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L157a52.  v0:= temp @kind object;
  #L157a54.  if v0 == 0 then goto L157a78;
  #L157a58.  v1:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L157a5c.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L157a62.  v2:= temp @kind object;
  #L157a64.  call temp:= `a`(v3, v1, v2) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind direct;
  #L157a6a.  v1:= temp;
  #L157a6c.  if v1 == 0 then goto L157a78;
  #L157a70.  v1:= 1I;
  #L157a72.  if v1 == 0 then goto L157a7c;
  #L157a76.  return v0 @kind object;
  #L157a78.  v1:= 0I;
  #L157a7a.  goto L157a72;
  #L157a7c.  v0:= 0I;
  #L157a7e.  goto L157a76;
}
procedure `void` `a`(`com.b.a.b.g` v6 @kind this, `com.b.a.b.g$d` v7 @kind object, `boolean` v8 ) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L157a90.  v2:= 0I;
  #L157a92.  v5:= 0I;
  #L157a94.  if v8 == 0 then goto L157ab0;
  #L157a98.  v0:= v7.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L157a9c.  v1:= v7.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` @kind object;
  #L157aa0.  v0.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` := v1 @kind object;
  #L157aa4.  v0:= v7.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` @kind object;
  #L157aa8.  v1:= v7.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L157aac.  v0.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` := v1 @kind object;
  #L157ab0.  v0:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L157ab4.  v1:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L157ab8.  v3:= v7.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` @kind object;
  #L157abc.  if v0 == 0 then goto L157b30;
  #L157ac0.  if v1 == 0 then goto L157b30;
  #L157ac4.  v3:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L157ac8.  v4:= v1.`com.b.a.b.g$d.h` @type ^`int`;
  #L157acc.  if v3 <= v4 then goto L157b26;
  #L157ad0.  call temp:= `b`(v0) @signature `Lcom/b/a/b/g$d;.b:()Lcom/b/a/b/g$d;` @kind virtual;
  #L157ad6.  v0:= temp @kind object;
  #L157ad8.  call `a`(v6, v0, v2) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Z)V` @kind virtual;
  #L157ade.  v3:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L157ae2.  if v3 == 0 then goto L157b76;
  #L157ae6.  v1:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L157aea.  v0.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L157aee.  v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L157af2.  v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L157af6.  v3:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L157afa.  if v3 == 0 then goto L157b0e;
  #L157afe.  v2:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L157b02.  v0.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L157b06.  v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L157b0a.  v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L157b0e.  call temp:= `max`(v1, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L157b14.  v1:= temp;
  #L157b16.  v1:= v1 + 1;
  #L157b1a.  v0.`com.b.a.b.g$d.h` @type ^`int` := v1;
  #L157b1e.  call `a`(v6, v7, v0) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L157b24.  return @kind void;
  #L157b26.  call temp:= `a`(v1) @signature `Lcom/b/a/b/g$d;.a:()Lcom/b/a/b/g$d;` @kind virtual;
  #L157b2c.  v0:= temp @kind object;
  #L157b2e.  goto L157ad8;
  #L157b30.  if v0 == 0 then goto L157b5e;
  #L157b34.  call `a`(v6, v7, v0) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L157b3a.  v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L157b3e.  call `b`(v6, v3, v2) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;Z)V` @kind direct;
  #L157b44.  v0:= v6.`com.b.a.b.g.c` @type ^`int`;
  #L157b48.  v0:= v0 + -1;
  #L157b4c.  v6.`com.b.a.b.g.c` @type ^`int` := v0;
  #L157b50.  v0:= v6.`com.b.a.b.g.d` @type ^`int`;
  #L157b54.  v0:= v0 + 1;
  #L157b58.  v6.`com.b.a.b.g.d` @type ^`int` := v0;
  #L157b5c.  goto L157b24;
  #L157b5e.  if v1 == 0 then goto L157b6e;
  #L157b62.  call `a`(v6, v7, v1) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L157b68.  v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L157b6c.  goto L157b3e;
  #L157b6e.  call `a`(v6, v7, v5) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L157b74.  goto L157b3e;
  #L157b76.  v1:= v2;
  #L157b78.  goto L157af6;
}
procedure `com.b.a.b.g$d` `b`(`com.b.a.b.g` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/b/g;.b:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L157b8c.  call temp:= `a`(v2, v3) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L157b92.  v0:= temp @kind object;
  #L157b94.  if v0 == 0 then goto L157ba0;
  #L157b98.  v1:= 1I;
  #L157b9a.  call `a`(v2, v0, v1) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Z)V` @kind virtual;
  #L157ba0.  return v0 @kind object;
}
procedure `void` `clear`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L157bb4.  v0:= 0I;
  #L157bb6.  v1.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L157bba.  v0:= 0I;
  #L157bbc.  v1.`com.b.a.b.g.c` @type ^`int` := v0;
  #L157bc0.  v0:= v1.`com.b.a.b.g.d` @type ^`int`;
  #L157bc4.  v0:= v0 + 1;
  #L157bc8.  v1.`com.b.a.b.g.d` @type ^`int` := v0;
  #L157bcc.  v0:= v1.`com.b.a.b.g.e` @type ^`com.b.a.b.g$d` @kind object;
  #L157bd0.  v0.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L157bd4.  v0.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L157bd8.  return @kind void;
}
procedure `boolean` `containsKey`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L157bec.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L157bf2.  v0:= temp @kind object;
  #L157bf4.  if v0 == 0 then goto L157bfc;
  #L157bf8.  v0:= 1I;
  #L157bfa.  return v0;
  #L157bfc.  v0:= 0I;
  #L157bfe.  goto L157bfa;
}
procedure `java.util.Set` `entrySet`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L157c10.  v0:= v1.`com.b.a.b.g.h` @type ^`com.b.a.b.g$a` @kind object;
  #L157c14.  if v0 == 0 then goto L157c1a;
  #L157c18.  return v0 @kind object;
  #L157c1a.  v0:= new `com.b.a.b.g$a`;
  #L157c1e.  call `<init>`(v0, v1) @signature `Lcom/b/a/b/g$a;.<init>:(Lcom/b/a/b/g;)V` @kind direct;
  #L157c24.  v1.`com.b.a.b.g.h` @type ^`com.b.a.b.g$a` := v0 @kind object;
  #L157c28.  goto L157c18;
}
procedure `java.lang.Object` `get`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L157c3c.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L157c42.  v0:= temp @kind object;
  #L157c44.  if v0 == 0 then goto L157c4e;
  #L157c48.  v0:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L157c4c.  return v0 @kind object;
  #L157c4e.  v0:= 0I;
  #L157c50.  goto L157c4c;
}
procedure `java.util.Set` `keySet`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L157c64.  v0:= v1.`com.b.a.b.g.i` @type ^`com.b.a.b.g$b` @kind object;
  #L157c68.  if v0 == 0 then goto L157c6e;
  #L157c6c.  return v0 @kind object;
  #L157c6e.  v0:= new `com.b.a.b.g$b`;
  #L157c72.  call `<init>`(v0, v1) @signature `Lcom/b/a/b/g$b;.<init>:(Lcom/b/a/b/g;)V` @kind direct;
  #L157c78.  v1.`com.b.a.b.g.i` @type ^`com.b.a.b.g$b` := v0 @kind object;
  #L157c7c.  goto L157c6c;
}
procedure `java.lang.Object` `put`(`com.b.a.b.g` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/b/a/b/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L157c90.  if v3 != 0 then goto L157ca4;
  #L157c94.  v0:= new `java.lang.NullPointerException`;
  #L157c98.  v1:= "key == null" @kind object;
  #L157c9c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L157ca2.  throw v0;
  #L157ca4.  v0:= 1I;
  #L157ca6.  call temp:= `a`(v2, v3, v0) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Z)Lcom/b/a/b/g$d;` @kind virtual;
  #L157cac.  v0:= temp @kind object;
  #L157cae.  v1:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L157cb2.  v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` := v4 @kind object;
  #L157cb6.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L157cc8.  call temp:= `b`(v1, v2) @signature `Lcom/b/a/b/g;.b:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L157cce.  v0:= temp @kind object;
  #L157cd0.  if v0 == 0 then goto L157cda;
  #L157cd4.  v0:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L157cd8.  return v0 @kind object;
  #L157cda.  v0:= 0I;
  #L157cdc.  goto L157cd8;
}
procedure `int` `size`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L157cf0.  v0:= v1.`com.b.a.b.g.c` @type ^`int`;
  #L157cf4.  return v0;
}
