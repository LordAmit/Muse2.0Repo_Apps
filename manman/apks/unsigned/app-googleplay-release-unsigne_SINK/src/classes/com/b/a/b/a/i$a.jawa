record `com.b.a.b.a.i$a` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.v` @kind class {
  `com.b.a.b.h` `com.b.a.b.a.i$a.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.b.a.b.a.i$a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.b.a.i$a` v0 @kind this, `com.b.a.b.h` v1 @kind object, `java.util.Map` v2 @kind object) @signature `Lcom/b/a/b/a/i$a;.<init>:(Lcom/b/a/b/h;Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L152020.  call `<init>`(v0) @signature `Lcom/b/a/v;.<init>:()V` @kind direct;
  #L152026.  v0.`com.b.a.b.a.i$a.a` @type ^`com.b.a.b.h` := v1 @kind object;
  #L15202a.  v0.`com.b.a.b.a.i$a.b` @type ^`java.util.Map` := v2 @kind object;
  #L15202e.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.i$a` v3 @kind this, `com.b.a.d.c` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lcom/b/a/b/a/i$a;.a:(Lcom/b/a/d/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L152040.  if v5 != 0 then goto L15204c;
  #L152044.  call temp:= `f`(v4) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L15204a.  return @kind void;
  #L15204c.  call temp:= `d`(v4) @signature `Lcom/b/a/d/c;.d:()Lcom/b/a/d/c;` @kind virtual;
  #Try_start0.  
  #L152052.  v0:= v3.`com.b.a.b.a.i$a.b` @type ^`java.util.Map` @kind object;
  #L152056.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L15205c.  v0:= temp @kind object;
  #L15205e.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L152064.  v1:= temp @kind object;
  #L152066.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15206c.  v0:= temp;
  #L15206e.  if v0 == 0 then goto L1520aa;
  #L152072.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L152078.  v0:= temp @kind object;
  #L15207a.  v0:= (`com.b.a.b.a.i$b`) v0 @kind object;
  #L15207e.  call temp:= `a`(v0, v5) @signature `Lcom/b/a/b/a/i$b;.a:(Ljava/lang/Object;)Z` @kind virtual;
  #L152084.  v2:= temp;
  #L152086.  if v2 == 0 then goto L152066;
  #L15208a.  v2:= v0.`com.b.a.b.a.i$b.h` @type ^`java.lang.String` @kind object;
  #L15208e.  call temp:= `a`(v4, v2) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/String;)Lcom/b/a/d/c;` @kind virtual;
  #L152094.  call `a`(v0, v4, v5) @signature `Lcom/b/a/b/a/i$b;.a:(Lcom/b/a/d/c;Ljava/lang/Object;)V` @kind virtual;
  #Try_end0.  
  #L15209a.  goto L152066;
  #L15209c.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L15209e.  v1:= new `java.lang.AssertionError`;
  #L1520a2.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1520a8.  throw v1;
  #L1520aa.  call temp:= `e`(v4) @signature `Lcom/b/a/d/c;.e:()Lcom/b/a/d/c;` @kind virtual;
  #L1520b0.  goto L15204a;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L15209c;
}
procedure `java.lang.Object` `b`(`com.b.a.b.a.i$a` v3 @kind this, `com.b.a.d.a` v4 @kind object) @signature `Lcom/b/a/b/a/i$a;.b:(Lcom/b/a/d/a;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1520d4.  call temp:= `f`(v4) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L1520da.  v0:= temp @kind object;
  #L1520dc.  v1:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L1520e0.  if v0 != v1 then goto L1520ee;
  #L1520e4.  call `j`(v4) @signature `Lcom/b/a/d/a;.j:()V` @kind virtual;
  #L1520ea.  v0:= 0I;
  #L1520ec.  return v0 @kind object;
  #L1520ee.  v0:= v3.`com.b.a.b.a.i$a.a` @type ^`com.b.a.b.h` @kind object;
  #L1520f2.  call temp:= `a`(v0) @signature `Lcom/b/a/b/h;.a:()Ljava/lang/Object;` @kind interface;
  #L1520f8.  v1:= temp @kind object;
  #Try_start0.  
  #L1520fa.  call `c`(v4) @signature `Lcom/b/a/d/a;.c:()V` @kind virtual;
  #L152100.  call temp:= `e`(v4) @signature `Lcom/b/a/d/a;.e:()Z` @kind virtual;
  #L152106.  v0:= temp;
  #L152108.  if v0 == 0 then goto L15215c;
  #L15210c.  call temp:= `g`(v4) @signature `Lcom/b/a/d/a;.g:()Ljava/lang/String;` @kind virtual;
  #L152112.  v0:= temp @kind object;
  #L152114.  v2:= v3.`com.b.a.b.a.i$a.b` @type ^`java.util.Map` @kind object;
  #L152118.  call temp:= `get`(v2, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15211e.  v0:= temp @kind object;
  #L152120.  v0:= (`com.b.a.b.a.i$b`) v0 @kind object;
  #L152124.  if v0 == 0 then goto L152130;
  #L152128.  v2:= v0.`com.b.a.b.a.i$b.j` @type ^`boolean` @kind boolean;
  #L15212c.  if v2 != 0 then goto L152146;
  #L152130.  call `n`(v4) @signature `Lcom/b/a/d/a;.n:()V` @kind virtual;
  #Try_end0.  
  #L152136.  goto L152100;
  #L152138.  v0:= Exception @type ^`java.lang.IllegalStateException` @kind object;
  #L15213a.  v1:= new `com.b.a.t`;
  #L15213e.  call `<init>`(v1, v0) @signature `Lcom/b/a/t;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L152144.  throw v1;
  #Try_start1.  
  #L152146.  call `a`(v0, v4, v1) @signature `Lcom/b/a/b/a/i$b;.a:(Lcom/b/a/d/a;Ljava/lang/Object;)V` @kind virtual;
  #Try_end1.  
  #L15214c.  goto L152100;
  #L15214e.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L152150.  v1:= new `java.lang.AssertionError`;
  #L152154.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L15215a.  throw v1;
  #L15215c.  call `d`(v4) @signature `Lcom/b/a/d/a;.d:()V` @kind virtual;
  #L152162.  v0:= v1 @kind object;
  #L152164.  goto L1520ec;
  catch `java.lang.IllegalStateException` @[Try_start0..Try_end0] goto L152138;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L15214e;
  catch `java.lang.IllegalStateException` @[Try_start1..Try_end1] goto L152138;
  catch `java.lang.IllegalAccessException` @[Try_start1..Try_end1] goto L15214e;
}
