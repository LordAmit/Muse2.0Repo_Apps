record `com.b.a.d.c` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface, `java.io.Flushable` @kind interface {
  `java.io.Writer` `com.b.a.d.c.c` @AccessFlag PRIVATE_FINAL;
  `int`[] `com.b.a.d.c.d` @AccessFlag PRIVATE;
  `int` `com.b.a.d.c.e` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.c.f` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.c.g` @AccessFlag PRIVATE;
  `boolean` `com.b.a.d.c.h` @AccessFlag PRIVATE;
  `boolean` `com.b.a.d.c.i` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.c.j` @AccessFlag PRIVATE;
  `boolean` `com.b.a.d.c.k` @AccessFlag PRIVATE;
}
global `java.lang.String`[] `@@com.b.a.d.c.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String`[] `@@com.b.a.d.c.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/d/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1509ac.  v1:= 0I;
  #L1509ae.  v0:= 128I;
  #L1509b2.  v0:= new `java.lang.String`[v0];
  #L1509b6.  `@@com.b.a.d.c.a` @type ^`java.lang.String`[] := v0 @kind object;
  #L1509ba.  v0:= v1;
  #L1509bc.  v2:= 31I;
  #L1509c0.  if v0 > v2 then goto L1509f0;
  #L1509c4.  v2:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L1509c8.  v3:= "\\u%04x" @kind object;
  #L1509cc.  v4:= 1I;
  #L1509ce.  v4:= new `java.lang.Object`[v4];
  #L1509d2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1509d8.  v5:= temp @kind object;
  #L1509da.  v4[v1]:= v5 @kind object;
  #L1509de.  call temp:= `format`(v3, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1509e4.  v3:= temp @kind object;
  #L1509e6.  v2[v0]:= v3 @kind object;
  #L1509ea.  v0:= v0 + 1;
  #L1509ee.  goto L1509bc;
  #L1509f0.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L1509f4.  v1:= 34I;
  #L1509f8.  v2:= "\\\"" @kind object;
  #L1509fc.  v0[v1]:= v2 @kind object;
  #L150a00.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L150a04.  v1:= 92I;
  #L150a08.  v2:= "\\\\" @kind object;
  #L150a0c.  v0[v1]:= v2 @kind object;
  #L150a10.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L150a14.  v1:= 9I;
  #L150a18.  v2:= "\\t" @kind object;
  #L150a1c.  v0[v1]:= v2 @kind object;
  #L150a20.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L150a24.  v1:= 8I;
  #L150a28.  v2:= "\\b" @kind object;
  #L150a2c.  v0[v1]:= v2 @kind object;
  #L150a30.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L150a34.  v1:= 10I;
  #L150a38.  v2:= "\\n" @kind object;
  #L150a3c.  v0[v1]:= v2 @kind object;
  #L150a40.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L150a44.  v1:= 13I;
  #L150a48.  v2:= "\\r" @kind object;
  #L150a4c.  v0[v1]:= v2 @kind object;
  #L150a50.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L150a54.  v1:= 12I;
  #L150a58.  v2:= "\\f" @kind object;
  #L150a5c.  v0[v1]:= v2 @kind object;
  #L150a60.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L150a64.  call temp:= `clone`(v0) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L150a6a.  v0:= temp @kind object;
  #L150a6c.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L150a70.  `@@com.b.a.d.c.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L150a74.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L150a78.  v1:= 60I;
  #L150a7c.  v2:= "\\u003c" @kind object;
  #L150a80.  v0[v1]:= v2 @kind object;
  #L150a84.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L150a88.  v1:= 62I;
  #L150a8c.  v2:= "\\u003e" @kind object;
  #L150a90.  v0[v1]:= v2 @kind object;
  #L150a94.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L150a98.  v1:= 38I;
  #L150a9c.  v2:= "\\u0026" @kind object;
  #L150aa0.  v0[v1]:= v2 @kind object;
  #L150aa4.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L150aa8.  v1:= 61I;
  #L150aac.  v2:= "\\u003d" @kind object;
  #L150ab0.  v0[v1]:= v2 @kind object;
  #L150ab4.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L150ab8.  v1:= 39I;
  #L150abc.  v2:= "\\u0027" @kind object;
  #L150ac0.  v0[v1]:= v2 @kind object;
  #L150ac4.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.d.c` v2 @kind this, `java.io.Writer` v3 @kind object) @signature `Lcom/b/a/d/c;.<init>:(Ljava/io/Writer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L150ad8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L150ade.  v0:= 32I;
  #L150ae2.  v0:= new `int`[v0];
  #L150ae6.  v2.`com.b.a.d.c.d` @type ^`int`[] := v0 @kind object;
  #L150aea.  v0:= 0I;
  #L150aec.  v2.`com.b.a.d.c.e` @type ^`int` := v0;
  #L150af0.  v0:= 6I;
  #L150af2.  call `a`(v2, v0) @signature `Lcom/b/a/d/c;.a:(I)V` @kind direct;
  #L150af8.  v0:= ":" @kind object;
  #L150afc.  v2.`com.b.a.d.c.g` @type ^`java.lang.String` := v0 @kind object;
  #L150b00.  v0:= 1I;
  #L150b02.  v2.`com.b.a.d.c.k` @type ^`boolean` := v0 @kind boolean;
  #L150b06.  if v3 != 0 then goto L150b1a;
  #L150b0a.  v0:= new `java.lang.NullPointerException`;
  #L150b0e.  v1:= "out == null" @kind object;
  #L150b12.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L150b18.  throw v0;
  #L150b1a.  v2.`com.b.a.d.c.c` @type ^`java.io.Writer` := v3 @kind object;
  #L150b1e.  return @kind void;
}
procedure `int` `a`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.a:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L150b30.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L150b34.  if v0 != 0 then goto L150b48;
  #L150b38.  v0:= new `java.lang.IllegalStateException`;
  #L150b3c.  v1:= "JsonWriter is closed." @kind object;
  #L150b40.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L150b46.  throw v0;
  #L150b48.  v0:= v2.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L150b4c.  v1:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L150b50.  v1:= v1 + -1;
  #L150b54.  v0:= v0[v1];
  #L150b58.  return v0;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v3 @kind this, `int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Lcom/b/a/d/c;.a:(IILjava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L150b6c.  call temp:= `a`(v3) @signature `Lcom/b/a/d/c;.a:()I` @kind direct;
  #L150b72.  v0:= temp;
  #L150b74.  if v0 == v5 then goto L150b8c;
  #L150b78.  if v0 == v4 then goto L150b8c;
  #L150b7c.  v0:= new `java.lang.IllegalStateException`;
  #L150b80.  v1:= "Nesting problem." @kind object;
  #L150b84.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L150b8a.  throw v0;
  #L150b8c.  v1:= v3.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L150b90.  if v1 == 0 then goto L150bca;
  #L150b94.  v0:= new `java.lang.IllegalStateException`;
  #L150b98.  v1:= new `java.lang.StringBuilder`;
  #L150b9c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L150ba2.  v2:= "Dangling name: " @kind object;
  #L150ba6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150bac.  v1:= temp @kind object;
  #L150bae.  v2:= v3.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L150bb2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150bb8.  v1:= temp @kind object;
  #L150bba.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L150bc0.  v1:= temp @kind object;
  #L150bc2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L150bc8.  throw v0;
  #L150bca.  v1:= v3.`com.b.a.d.c.e` @type ^`int`;
  #L150bce.  v1:= v1 + -1;
  #L150bd2.  v3.`com.b.a.d.c.e` @type ^`int` := v1;
  #L150bd6.  if v0 != v5 then goto L150be0;
  #L150bda.  call `j`(v3) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L150be0.  v0:= v3.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L150be4.  call `write`(v0, v6) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L150bea.  return v3 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lcom/b/a/d/c;.a:(ILjava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L150bfc.  call `l`(v1) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L150c02.  call `a`(v1, v2) @signature `Lcom/b/a/d/c;.a:(I)V` @kind direct;
  #L150c08.  v0:= v1.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L150c0c.  call `write`(v0, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L150c12.  return v1 @kind object;
}
procedure `void` `a`(`com.b.a.d.c` v4 @kind this, `int` v5 ) @signature `Lcom/b/a/d/c;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L150c24.  v3:= 0I;
  #L150c26.  v0:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L150c2a.  v1:= v4.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L150c2e.  v1:= length @variable v1;
  #L150c30.  if v0 != v1 then goto L150c52;
  #L150c34.  v0:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L150c38.  v0:= v0 * 2;
  #L150c3c.  v0:= new `int`[v0];
  #L150c40.  v1:= v4.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L150c44.  v2:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L150c48.  call `arraycopy`(v1, v3, v0, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L150c4e.  v4.`com.b.a.d.c.d` @type ^`int`[] := v0 @kind object;
  #L150c52.  v0:= v4.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L150c56.  v1:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L150c5a.  v2:= v1 + 1;
  #L150c5e.  v4.`com.b.a.d.c.e` @type ^`int` := v2;
  #L150c62.  v0[v1]:= v5;
  #L150c66.  return @kind void;
}
procedure `void` `b`(`com.b.a.d.c` v2 @kind this, `int` v3 ) @signature `Lcom/b/a/d/c;.b:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L150c78.  v0:= v2.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L150c7c.  v1:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L150c80.  v1:= v1 + -1;
  #L150c84.  v0[v1]:= v3;
  #L150c88.  return @kind void;
}
procedure `void` `c`(`com.b.a.d.c` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lcom/b/a/d/c;.c:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L150c9c.  v1:= 0I;
  #L150c9e.  v0:= v7.`com.b.a.d.c.i` @type ^`boolean` @kind boolean;
  #L150ca2.  if v0 == 0 then goto L150ce6;
  #L150ca6.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L150caa.  v2:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L150cae.  v3:= "\"" @kind object;
  #L150cb2.  call `write`(v2, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L150cb8.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L150cbe.  v4:= temp;
  #L150cc0.  v3:= v1;
  #L150cc2.  if v3 >= v4 then goto L150d28;
  #L150cc6.  call temp:= `charAt`(v8, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L150ccc.  v2:= temp;
  #L150cce.  v5:= 128I;
  #L150cd2.  if v2 >= v5 then goto L150cec;
  #L150cd6.  v2:= v0[v2] @kind object;
  #L150cda.  if v2 != 0 then goto L150cf8;
  #L150cde.  v2:= v3 + 1;
  #L150ce2.  v3:= v2;
  #L150ce4.  goto L150cc2;
  #L150ce6.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L150cea.  goto L150caa;
  #L150cec.  v5:= 8232I;
  #L150cf0.  if v2 != v5 then goto L150d1a;
  #L150cf4.  v2:= "\\u2028" @kind object;
  #L150cf8.  if v1 >= v3 then goto L150d0a;
  #L150cfc.  v5:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L150d00.  v6:= v3 - v1 @kind int;
  #L150d04.  call `write`(v5, v8, v1, v6) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L150d0a.  v1:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L150d0e.  call `write`(v1, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L150d14.  v1:= v3 + 1;
  #L150d18.  goto L150cde;
  #L150d1a.  v5:= 8233I;
  #L150d1e.  if v2 != v5 then goto L150cde;
  #L150d22.  v2:= "\\u2029" @kind object;
  #L150d26.  goto L150cf8;
  #L150d28.  if v1 >= v4 then goto L150d3a;
  #L150d2c.  v0:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L150d30.  v2:= v4 - v1 @kind int;
  #L150d34.  call `write`(v0, v8, v1, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L150d3a.  v0:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L150d3e.  v1:= "\"" @kind object;
  #L150d42.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L150d48.  return @kind void;
}
procedure `void` `i`(`com.b.a.d.c` v1 @kind this) @signature `Lcom/b/a/d/c;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L150d5c.  v0:= v1.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L150d60.  if v0 == 0 then goto L150d7a;
  #L150d64.  call `k`(v1) @signature `Lcom/b/a/d/c;.k:()V` @kind direct;
  #L150d6a.  v0:= v1.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L150d6e.  call `c`(v1, v0) @signature `Lcom/b/a/d/c;.c:(Ljava/lang/String;)V` @kind direct;
  #L150d74.  v0:= 0I;
  #L150d76.  v1.`com.b.a.d.c.j` @type ^`java.lang.String` := v0 @kind object;
  #L150d7a.  return @kind void;
}
procedure `void` `j`(`com.b.a.d.c` v4 @kind this) @signature `Lcom/b/a/d/c;.j:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L150d8c.  v0:= v4.`com.b.a.d.c.f` @type ^`java.lang.String` @kind object;
  #L150d90.  if v0 != 0 then goto L150d96;
  #L150d94.  return @kind void;
  #L150d96.  v0:= v4.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L150d9a.  v1:= "\n" @kind object;
  #L150d9e.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L150da4.  v0:= 1I;
  #L150da6.  v1:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L150daa.  if v0 >= v1 then goto L150d94;
  #L150dae.  v2:= v4.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L150db2.  v3:= v4.`com.b.a.d.c.f` @type ^`java.lang.String` @kind object;
  #L150db6.  call `write`(v2, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L150dbc.  v0:= v0 + 1;
  #L150dc0.  goto L150daa;
}
procedure `void` `k`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.k:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L150dd4.  call temp:= `a`(v2) @signature `Lcom/b/a/d/c;.a:()I` @kind direct;
  #L150dda.  v0:= temp;
  #L150ddc.  v1:= 5I;
  #L150dde.  if v0 != v1 then goto L150e00;
  #L150de2.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L150de6.  v1:= 44I;
  #L150dea.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L150df0.  call `j`(v2) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L150df6.  v0:= 4I;
  #L150df8.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L150dfe.  return @kind void;
  #L150e00.  v1:= 3I;
  #L150e02.  if v0 == v1 then goto L150df0;
  #L150e06.  v0:= new `java.lang.IllegalStateException`;
  #L150e0a.  v1:= "Nesting problem." @kind object;
  #L150e0e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L150e14.  throw v0;
}
procedure `void` `l`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.l:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L150e28.  call temp:= `a`(v2) @signature `Lcom/b/a/d/c;.a:()I` @kind direct;
  #L150e2e.  v0:= temp;
  #L150e30.  goto L150ea8;
  #L150e36.  v0:= new `java.lang.IllegalStateException`;
  #L150e3a.  v1:= "Nesting problem." @kind object;
  #L150e3e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L150e44.  throw v0;
  #L150e46.  v0:= v2.`com.b.a.d.c.h` @type ^`boolean` @kind boolean;
  #L150e4a.  if v0 != 0 then goto L150e5e;
  #L150e4e.  v0:= new `java.lang.IllegalStateException`;
  #L150e52.  v1:= "JSON must have only one top-level value." @kind object;
  #L150e56.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L150e5c.  throw v0;
  #L150e5e.  v0:= 7I;
  #L150e60.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L150e66.  return @kind void;
  #L150e68.  v0:= 2I;
  #L150e6a.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L150e70.  call `j`(v2) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L150e76.  goto L150e66;
  #L150e78.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L150e7c.  v1:= 44I;
  #L150e80.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(C)Ljava/io/Writer;` @kind virtual;
  #L150e86.  call `j`(v2) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L150e8c.  goto L150e66;
  #L150e8e.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L150e92.  v1:= v2.`com.b.a.d.c.g` @type ^`java.lang.String` @kind object;
  #L150e96.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L150e9c.  v0:= 5I;
  #L150e9e.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L150ea4.  goto L150e66;
  #L150ea6.  
  #L150ea8.  switch v0
                  | 1 => goto L150e68
                  | 2 => goto L150e78
                  | 3 => goto L150e36
                  | 4 => goto L150e8e
                  | 5 => goto L150e36
                  | 6 => goto L150e5e
                  | 7 => goto L150e46
                  | else => goto L150e36;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v3 @kind this, `long` v4 ) @signature `Lcom/b/a/d/c;.a:(J)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L150edc.  call `i`(v3) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L150ee2.  call `l`(v3) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L150ee8.  v0:= v3.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L150eec.  call temp:= `toString`(v4) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L150ef2.  v1:= temp @kind object;
  #L150ef4.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L150efa.  return v3 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v2 @kind this, `java.lang.Boolean` v3 @kind object) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/Boolean;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L150f0c.  if v3 != 0 then goto L150f1a;
  #L150f10.  call temp:= `f`(v2) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L150f16.  v2:= temp @kind object;
  #L150f18.  return v2 @kind object;
  #L150f1a.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L150f20.  call `l`(v2) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L150f26.  v1:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L150f2a.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L150f30.  v0:= temp;
  #L150f32.  if v0 == 0 then goto L150f42;
  #L150f36.  v0:= "true" @kind object;
  #L150f3a.  call `write`(v1, v0) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L150f40.  goto L150f18;
  #L150f42.  v0:= "false" @kind object;
  #L150f46.  goto L150f3a;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v3 @kind this, `java.lang.Number` v4 @kind object) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/Number;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L150f58.  if v4 != 0 then goto L150f66;
  #L150f5c.  call temp:= `f`(v3) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L150f62.  v3:= temp @kind object;
  #L150f64.  return v3 @kind object;
  #L150f66.  call `i`(v3) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L150f6c.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L150f72.  v0:= temp @kind object;
  #L150f74.  v1:= v3.`com.b.a.d.c.h` @type ^`boolean` @kind boolean;
  #L150f78.  if v1 != 0 then goto L150fde;
  #L150f7c.  v1:= "-Infinity" @kind object;
  #L150f80.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L150f86.  v1:= temp;
  #L150f88.  if v1 != 0 then goto L150fac;
  #L150f8c.  v1:= "Infinity" @kind object;
  #L150f90.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L150f96.  v1:= temp;
  #L150f98.  if v1 != 0 then goto L150fac;
  #L150f9c.  v1:= "NaN" @kind object;
  #L150fa0.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L150fa6.  v1:= temp;
  #L150fa8.  if v1 == 0 then goto L150fde;
  #L150fac.  v0:= new `java.lang.IllegalArgumentException`;
  #L150fb0.  v1:= new `java.lang.StringBuilder`;
  #L150fb4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L150fba.  v2:= "Numeric values must be finite, but was " @kind object;
  #L150fbe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150fc4.  v1:= temp @kind object;
  #L150fc6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150fcc.  v1:= temp @kind object;
  #L150fce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L150fd4.  v1:= temp @kind object;
  #L150fd6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L150fdc.  throw v0;
  #L150fde.  call `l`(v3) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L150fe4.  v1:= v3.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L150fe8.  call temp:= `append`(v1, v0) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L150fee.  goto L150f64;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L151000.  if v3 != 0 then goto L151014;
  #L151004.  v0:= new `java.lang.NullPointerException`;
  #L151008.  v1:= "name == null" @kind object;
  #L15100c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L151012.  throw v0;
  #L151014.  v0:= v2.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L151018.  if v0 == 0 then goto L151028;
  #L15101c.  v0:= new `java.lang.IllegalStateException`;
  #L151020.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L151026.  throw v0;
  #L151028.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L15102c.  if v0 != 0 then goto L151040;
  #L151030.  v0:= new `java.lang.IllegalStateException`;
  #L151034.  v1:= "JsonWriter is closed." @kind object;
  #L151038.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15103e.  throw v0;
  #L151040.  v2.`com.b.a.d.c.j` @type ^`java.lang.String` := v3 @kind object;
  #L151044.  return v2 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v2 @kind this, `boolean` v3 ) @signature `Lcom/b/a/d/c;.a:(Z)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L151058.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L15105e.  call `l`(v2) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L151064.  v1:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L151068.  if v3 == 0 then goto L151078;
  #L15106c.  v0:= "true" @kind object;
  #L151070.  call `write`(v1, v0) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L151076.  return v2 @kind object;
  #L151078.  v0:= "false" @kind object;
  #L15107c.  goto L151070;
}
procedure `com.b.a.d.c` `b`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.b:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L151090.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L151096.  v0:= 1I;
  #L151098.  v1:= "[" @kind object;
  #L15109c.  call temp:= `a`(v2, v0, v1) @signature `Lcom/b/a/d/c;.a:(ILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L1510a2.  v0:= temp @kind object;
  #L1510a4.  return v0 @kind object;
}
procedure `com.b.a.d.c` `b`(`com.b.a.d.c` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/b/a/d/c;.b:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;

  #L1510b8.  if v1 != 0 then goto L1510c6;
  #L1510bc.  call temp:= `f`(v0) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L1510c2.  v0:= temp @kind object;
  #L1510c4.  return v0 @kind object;
  #L1510c6.  call `i`(v0) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L1510cc.  call `l`(v0) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L1510d2.  call `c`(v0, v1) @signature `Lcom/b/a/d/c;.c:(Ljava/lang/String;)V` @kind direct;
  #L1510d8.  goto L1510c4;
}
procedure `void` `b`(`com.b.a.d.c` v0 @kind this, `boolean` v1 ) @signature `Lcom/b/a/d/c;.b:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1510ec.  v0.`com.b.a.d.c.h` @type ^`boolean` := v1 @kind boolean;
  #L1510f0.  return @kind void;
}
procedure `com.b.a.d.c` `c`(`com.b.a.d.c` v3 @kind this) @signature `Lcom/b/a/d/c;.c:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L151104.  v0:= 1I;
  #L151106.  v1:= 2I;
  #L151108.  v2:= "]" @kind object;
  #L15110c.  call temp:= `a`(v3, v0, v1, v2) @signature `Lcom/b/a/d/c;.a:(IILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L151112.  v0:= temp @kind object;
  #L151114.  return v0 @kind object;
}
procedure `void` `close`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L151128.  v1:= 1I;
  #L15112a.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L15112e.  call `close`(v0) @signature `Ljava/io/Writer;.close:()V` @kind virtual;
  #L151134.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L151138.  if v0 > v1 then goto L151152;
  #L15113c.  if v0 != v1 then goto L151162;
  #L151140.  v1:= v2.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L151144.  v0:= v0 + -1;
  #L151148.  v0:= v1[v0];
  #L15114c.  v1:= 7I;
  #L15114e.  if v0 == v1 then goto L151162;
  #L151152.  v0:= new `java.io.IOException`;
  #L151156.  v1:= "Incomplete document" @kind object;
  #L15115a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L151160.  throw v0;
  #L151162.  v0:= 0I;
  #L151164.  v2.`com.b.a.d.c.e` @type ^`int` := v0;
  #L151168.  return @kind void;
}
procedure `com.b.a.d.c` `d`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.d:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15117c.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L151182.  v0:= 3I;
  #L151184.  v1:= "{" @kind object;
  #L151188.  call temp:= `a`(v2, v0, v1) @signature `Lcom/b/a/d/c;.a:(ILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L15118e.  v0:= temp @kind object;
  #L151190.  return v0 @kind object;
}
procedure `com.b.a.d.c` `e`(`com.b.a.d.c` v3 @kind this) @signature `Lcom/b/a/d/c;.e:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1511a4.  v0:= 3I;
  #L1511a6.  v1:= 5I;
  #L1511a8.  v2:= "}" @kind object;
  #L1511ac.  call temp:= `a`(v3, v0, v1, v2) @signature `Lcom/b/a/d/c;.a:(IILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L1511b2.  v0:= temp @kind object;
  #L1511b4.  return v0 @kind object;
}
procedure `com.b.a.d.c` `f`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1511c8.  v0:= v2.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L1511cc.  if v0 == 0 then goto L1511de;
  #L1511d0.  v0:= v2.`com.b.a.d.c.k` @type ^`boolean` @kind boolean;
  #L1511d4.  if v0 == 0 then goto L1511f4;
  #L1511d8.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L1511de.  call `l`(v2) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L1511e4.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L1511e8.  v1:= "null" @kind object;
  #L1511ec.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L1511f2.  return v2 @kind object;
  #L1511f4.  v0:= 0I;
  #L1511f6.  v2.`com.b.a.d.c.j` @type ^`java.lang.String` := v0 @kind object;
  #L1511fa.  goto L1511f2;
}
procedure `void` `flush`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15120c.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L151210.  if v0 != 0 then goto L151224;
  #L151214.  v0:= new `java.lang.IllegalStateException`;
  #L151218.  v1:= "JsonWriter is closed." @kind object;
  #L15121c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L151222.  throw v0;
  #L151224.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L151228.  call `flush`(v0) @signature `Ljava/io/Writer;.flush:()V` @kind virtual;
  #L15122e.  return @kind void;
}
procedure `boolean` `g`(`com.b.a.d.c` v1 @kind this) @signature `Lcom/b/a/d/c;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L151240.  v0:= v1.`com.b.a.d.c.h` @type ^`boolean` @kind boolean;
  #L151244.  return v0;
}
procedure `boolean` `h`(`com.b.a.d.c` v1 @kind this) @signature `Lcom/b/a/d/c;.h:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L151258.  v0:= v1.`com.b.a.d.c.k` @type ^`boolean` @kind boolean;
  #L15125c.  return v0;
}
