record `com.b.a.d` @kind class @AccessFlag PUBLIC_ABSTRACT_ENUM extends `java.lang.Enum` @kind class, `com.b.a.e` @kind interface {
}
global `com.b.a.d` `@@com.b.a.d.a` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.b.a.d` `@@com.b.a.d.b` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.b.a.d` `@@com.b.a.d.c` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.b.a.d` `@@com.b.a.d.d` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.b.a.d` `@@com.b.a.d.e` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.b.a.d`[] `@@com.b.a.d.f` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lcom/b/a/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L158470.  v6:= 4I;
  #L158472.  v5:= 3I;
  #L158474.  v4:= 2I;
  #L158476.  v3:= 1I;
  #L158478.  v2:= 0I;
  #L15847a.  v0:= new `com.b.a.d$1`;
  #L15847e.  v1:= "IDENTITY" @kind object;
  #L158482.  call `<init>`(v0, v1, v2) @signature `Lcom/b/a/d$1;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L158488.  `@@com.b.a.d.a` @type ^`com.b.a.d` := v0 @kind object;
  #L15848c.  v0:= new `com.b.a.d$2`;
  #L158490.  v1:= "UPPER_CAMEL_CASE" @kind object;
  #L158494.  call `<init>`(v0, v1, v3) @signature `Lcom/b/a/d$2;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L15849a.  `@@com.b.a.d.b` @type ^`com.b.a.d` := v0 @kind object;
  #L15849e.  v0:= new `com.b.a.d$3`;
  #L1584a2.  v1:= "UPPER_CAMEL_CASE_WITH_SPACES" @kind object;
  #L1584a6.  call `<init>`(v0, v1, v4) @signature `Lcom/b/a/d$3;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1584ac.  `@@com.b.a.d.c` @type ^`com.b.a.d` := v0 @kind object;
  #L1584b0.  v0:= new `com.b.a.d$4`;
  #L1584b4.  v1:= "LOWER_CASE_WITH_UNDERSCORES" @kind object;
  #L1584b8.  call `<init>`(v0, v1, v5) @signature `Lcom/b/a/d$4;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1584be.  `@@com.b.a.d.d` @type ^`com.b.a.d` := v0 @kind object;
  #L1584c2.  v0:= new `com.b.a.d$5`;
  #L1584c6.  v1:= "LOWER_CASE_WITH_DASHES" @kind object;
  #L1584ca.  call `<init>`(v0, v1, v6) @signature `Lcom/b/a/d$5;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L1584d0.  `@@com.b.a.d.e` @type ^`com.b.a.d` := v0 @kind object;
  #L1584d4.  v0:= 5I;
  #L1584d6.  v0:= new `com.b.a.d`[v0];
  #L1584da.  v1:= `@@com.b.a.d.a` @type ^`com.b.a.d` @kind object;
  #L1584de.  v0[v2]:= v1 @kind object;
  #L1584e2.  v1:= `@@com.b.a.d.b` @type ^`com.b.a.d` @kind object;
  #L1584e6.  v0[v3]:= v1 @kind object;
  #L1584ea.  v1:= `@@com.b.a.d.c` @type ^`com.b.a.d` @kind object;
  #L1584ee.  v0[v4]:= v1 @kind object;
  #L1584f2.  v1:= `@@com.b.a.d.d` @type ^`com.b.a.d` @kind object;
  #L1584f6.  v0[v5]:= v1 @kind object;
  #L1584fa.  v1:= `@@com.b.a.d.e` @type ^`com.b.a.d` @kind object;
  #L1584fe.  v0[v6]:= v1 @kind object;
  #L158502.  `@@com.b.a.d.f` @type ^`com.b.a.d`[] := v0 @kind object;
  #L158506.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.d` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lcom/b/a/d;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L158518.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L15851e.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.d` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `com.b.a.d$1` v3 @kind object) @signature `Lcom/b/a/d;.<init>:(Ljava/lang/String;ILcom/b/a/d$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L158530.  call `<init>`(v0, v1, v2) @signature `Lcom/b/a/d;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L158536.  return @kind void;
}
procedure `java.lang.String` `a`(`char` v2 , `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/b/a/d;.a:(CLjava/lang/String;I)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L158548.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15854e.  v0:= temp;
  #L158550.  if v4 >= v0 then goto L158580;
  #L158554.  v0:= new `java.lang.StringBuilder`;
  #L158558.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15855e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L158564.  v0:= temp @kind object;
  #L158566.  call temp:= `substring`(v3, v4) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L15856c.  v1:= temp @kind object;
  #L15856e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158574.  v0:= temp @kind object;
  #L158576.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15857c.  v0:= temp @kind object;
  #L15857e.  return v0 @kind object;
  #L158580.  call temp:= `valueOf`(v2) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L158586.  v0:= temp @kind object;
  #L158588.  goto L15857e;
}
procedure `java.lang.String` `a`(`java.lang.String` v4 @kind object) @signature `Lcom/b/a/d;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15859c.  v2:= new `java.lang.StringBuilder`;
  #L1585a0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1585a6.  v1:= 0I;
  #L1585a8.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1585ae.  v0:= temp;
  #L1585b0.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1585b6.  v3:= temp;
  #L1585b8.  v3:= v3 + -1;
  #L1585bc.  if v1 >= v3 then goto L1585cc;
  #L1585c0.  call temp:= `isLetter`(v0) @signature `Ljava/lang/Character;.isLetter:(C)Z` @kind static;
  #L1585c6.  v3:= temp;
  #L1585c8.  if v3 == 0 then goto L1585e2;
  #L1585cc.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1585d2.  v3:= temp;
  #L1585d4.  if v1 != v3 then goto L1585f6;
  #L1585d8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1585de.  v4:= temp @kind object;
  #L1585e0.  return v4 @kind object;
  #L1585e2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1585e8.  v1:= v1 + 1;
  #L1585ec.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1585f2.  v0:= temp;
  #L1585f4.  goto L1585b0;
  #L1585f6.  call temp:= `isUpperCase`(v0) @signature `Ljava/lang/Character;.isUpperCase:(C)Z` @kind static;
  #L1585fc.  v3:= temp;
  #L1585fe.  if v3 != 0 then goto L1585e0;
  #L158602.  call temp:= `toUpperCase`(v0) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L158608.  v0:= temp;
  #L15860a.  v1:= v1 + 1;
  #L15860e.  call temp:= `a`(v0, v4, v1) @signature `Lcom/b/a/d;.a:(CLjava/lang/String;I)Ljava/lang/String;` @kind static;
  #L158614.  v0:= temp @kind object;
  #L158616.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15861c.  v0:= temp @kind object;
  #L15861e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158624.  v4:= temp @kind object;
  #L158626.  goto L1585e0;
}
procedure `java.lang.String` `a`(`java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/b/a/d;.a:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L158638.  v1:= new `java.lang.StringBuilder`;
  #L15863c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158642.  v0:= 0I;
  #L158644.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15864a.  v2:= temp;
  #L15864c.  if v0 >= v2 then goto L158682;
  #L158650.  call temp:= `charAt`(v4, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L158656.  v2:= temp;
  #L158658.  call temp:= `isUpperCase`(v2) @signature `Ljava/lang/Character;.isUpperCase:(C)Z` @kind static;
  #L15865e.  v3:= temp;
  #L158660.  if v3 == 0 then goto L158676;
  #L158664.  call temp:= `length`(v1) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L15866a.  v3:= temp;
  #L15866c.  if v3 == 0 then goto L158676;
  #L158670.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158676.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15867c.  v0:= v0 + 1;
  #L158680.  goto L158644;
  #L158682.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158688.  v0:= temp @kind object;
  #L15868a.  return v0 @kind object;
}
procedure `com.b.a.d` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lcom/b/a/d;.valueOf:(Ljava/lang/String;)Lcom/b/a/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15869c.  v0:= constclass @type ^`com.b.a.d` @kind object;
  #L1586a0.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L1586a6.  v0:= temp @kind object;
  #L1586a8.  v0:= (`com.b.a.d`) v0 @kind object;
  #L1586ac.  return v0 @kind object;
}
procedure `com.b.a.d`[] `values`() @signature `Lcom/b/a/d;.values:()[Lcom/b/a/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1586c0.  v0:= `@@com.b.a.d.f` @type ^`com.b.a.d`[] @kind object;
  #L1586c4.  call temp:= `clone`(v0) @signature `[Lcom/b/a/d;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1586ca.  v0:= temp @kind object;
  #L1586cc.  v0:= (`com.b.a.d`[]) v0 @kind object;
  #L1586d0.  return v0 @kind object;
}
