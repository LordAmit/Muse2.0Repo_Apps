record `b.c` @kind class @AccessFlag PUBLIC_FINAL extends `b.d` @kind interface, `b.e` @kind interface, `java.lang.Cloneable` @kind interface {
  `b.n` `b.c.a` @AccessFlag ;
  `long` `b.c.b` @AccessFlag ;
}
global `byte`[] `@@b.c.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L11ee64.  v0:= 16I;
  #L11ee68.  v0:= new `byte`[v0];
  #L11ee6c.  goto L11ee78;
  #L11ee72.  `@@b.c.c` @type ^`byte`[] := v0 @kind object;
  #L11ee76.  return @kind void;
  #L11ee78.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L11ee8f.  goto L11ee72;
}
procedure `void` `<init>`(`b.c` v0 @kind this) @signature `Lb/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L11eea0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11eea6.  return @kind void;
}
procedure `int` `a`(`b.c` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lb/c;.a:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11eeb8.  v0:= length @variable v7;
  #L11eeba.  v0:= (`long`) v0 @kind i2l;
  #L11eebc.  v2:= (`long`) v8 @kind i2l;
  #L11eebe.  v4:= (`long`) v9 @kind i2l;
  #L11eec0.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11eec6.  v1:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L11eeca.  if v1 != 0 then goto L11eed2;
  #L11eece.  v0:= -1I;
  #L11eed0.  return v0;
  #L11eed2.  v0:= v1.`b.n.c` @type ^`int`;
  #L11eed6.  v2:= v1.`b.n.b` @type ^`int`;
  #L11eeda.  v0:= v0 - v2 @kind int;
  #L11eedc.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11eee2.  v0:= temp;
  #L11eee4.  v2:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11eee8.  v3:= v1.`b.n.b` @type ^`int`;
  #L11eeec.  call `arraycopy`(v2, v3, v7, v8, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11eef2.  v2:= v1.`b.n.b` @type ^`int`;
  #L11eef6.  v2:= v2 + v0 @kind int;
  #L11eef8.  v1.`b.n.b` @type ^`int` := v2;
  #L11eefc.  v2:= v6.`b.c.b` @type ^`long` @kind wide;
  #L11ef00.  v4:= (`long`) v0 @kind i2l;
  #L11ef02.  v2:= v2 - v4 @kind long;
  #L11ef04.  v6.`b.c.b` @type ^`long` := v2 @kind wide;
  #L11ef08.  v2:= v1.`b.n.b` @type ^`int`;
  #L11ef0c.  v3:= v1.`b.n.c` @type ^`int`;
  #L11ef10.  if v2 != v3 then goto L11eed0;
  #L11ef14.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11ef1a.  v2:= temp @kind object;
  #L11ef1c.  v6.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L11ef20.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11ef26.  goto L11eed0;
}
procedure `long` `a`(`b.c` v2 @kind this, `byte` v3 ) @signature `Lb/c;.a:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11ef38.  v0:= 0L;
  #L11ef3c.  call temp:= `a`(v2, v3, v0) @signature `Lb/c;.a:(BJ)J` @kind virtual;
  #L11ef42.  v0:= temp @kind wide;
  #L11ef44.  return v0 @kind wide;
}
procedure `long` `a`(`b.c` v10 @kind this, `byte` v11 , `long` v12 ) @signature `Lb/c;.a:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11ef58.  v0:= 0L;
  #L11ef5c.  v6:= -1L;
  #L11ef60.  v2:= lcmp(v12, v0);
  #L11ef64.  if v2 >= 0 then goto L11ef78;
  #L11ef68.  v0:= new `java.lang.IllegalArgumentException`;
  #L11ef6c.  v1:= "fromIndex < 0" @kind object;
  #L11ef70.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ef76.  throw v0;
  #L11ef78.  v2:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L11ef7c.  if v2 != 0 then goto L11ef84;
  #L11ef80.  v0:= v6 @kind wide;
  #L11ef82.  return v0 @kind wide;
  #L11ef84.  v4:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11ef88.  v4:= v4 - v12 @kind long;
  #L11ef8a.  v3:= lcmp(v4, v12);
  #L11ef8e.  if v3 >= 0 then goto L11efb4;
  #L11ef92.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11ef96.  v4:= v2 @kind object;
  #L11ef98.  v2:= lcmp(v0, v12);
  #L11ef9c.  if v2 <= 0 then goto L11efea;
  #L11efa0.  v4:= v4.`b.n.g` @type ^`b.n` @kind object;
  #L11efa4.  v2:= v4.`b.n.c` @type ^`int`;
  #L11efa8.  v3:= v4.`b.n.b` @type ^`int`;
  #L11efac.  v2:= v2 - v3 @kind int;
  #L11efae.  v2:= (`long`) v2 @kind i2l;
  #L11efb0.  v0:= v0 - v2 @kind long;
  #L11efb2.  goto L11ef98;
  #L11efb4.  v4:= v2 @kind object;
  #L11efb6.  v2:= v4.`b.n.c` @type ^`int`;
  #L11efba.  v3:= v4.`b.n.b` @type ^`int`;
  #L11efbe.  v2:= v2 - v3 @kind int;
  #L11efc0.  v2:= (`long`) v2 @kind i2l;
  #L11efc2.  v2:= v2 + v0 @kind long;
  #L11efc4.  v5:= lcmp(v2, v12);
  #L11efc8.  if v5 >= 0 then goto L11efea;
  #L11efcc.  v0:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11efd0.  v4:= v0 @kind object;
  #L11efd2.  v0:= v2 @kind wide;
  #L11efd4.  goto L11efb6;
  #L11efd6.  v2:= v4.`b.n.c` @type ^`int`;
  #L11efda.  v3:= v4.`b.n.b` @type ^`int`;
  #L11efde.  v2:= v2 - v3 @kind int;
  #L11efe0.  v2:= (`long`) v2 @kind i2l;
  #L11efe2.  v0:= v0 + v2 @kind long;
  #L11efe4.  v4:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11efe8.  v12:= v0 @kind wide;
  #L11efea.  v2:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11efee.  v2:= lcmp(v0, v2);
  #L11eff2.  if v2 >= 0 then goto L11f028;
  #L11eff6.  v3:= v4.`b.n.a` @type ^`byte`[] @kind object;
  #L11effa.  v2:= v4.`b.n.b` @type ^`int`;
  #L11effe.  v8:= (`long`) v2 @kind i2l;
  #L11f000.  v8:= v8 + v12 @kind long;
  #L11f002.  v8:= v8 - v0 @kind long;
  #L11f004.  v2:= (`int`) v8 @kind l2i;
  #L11f006.  v5:= v4.`b.n.c` @type ^`int`;
  #L11f00a.  if v2 >= v5 then goto L11efd6;
  #L11f00e.  v8:= v3[v2] @kind byte;
  #L11f012.  if v8 != v11 then goto L11f022;
  #L11f016.  v3:= v4.`b.n.b` @type ^`int`;
  #L11f01a.  v2:= v2 - v3 @kind int;
  #L11f01c.  v2:= (`long`) v2 @kind i2l;
  #L11f01e.  v0:= v0 + v2 @kind long;
  #L11f020.  goto L11ef82;
  #L11f022.  v2:= v2 + 1;
  #L11f026.  goto L11f00a;
  #L11f028.  v0:= v6 @kind wide;
  #L11f02a.  goto L11ef82;
}
procedure `long` `a`(`b.c` v4 @kind this, `b.c` v5 @kind object, `long` v6 ) @signature `Lb/c;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11f03c.  v2:= 0L;
  #L11f040.  if v5 != 0 then goto L11f054;
  #L11f044.  v0:= new `java.lang.IllegalArgumentException`;
  #L11f048.  v1:= "sink == null" @kind object;
  #L11f04c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f052.  throw v0;
  #L11f054.  v0:= lcmp(v6, v2);
  #L11f058.  if v0 >= 0 then goto L11f08e;
  #L11f05c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11f060.  v1:= new `java.lang.StringBuilder`;
  #L11f064.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11f06a.  v2:= "byteCount < 0: " @kind object;
  #L11f06e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f074.  v1:= temp @kind object;
  #L11f076.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f07c.  v1:= temp @kind object;
  #L11f07e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11f084.  v1:= temp @kind object;
  #L11f086.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f08c.  throw v0;
  #L11f08e.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11f092.  v0:= lcmp(v0, v2);
  #L11f096.  if v0 != 0 then goto L11f0a0;
  #L11f09a.  v6:= -1L;
  #L11f09e.  return v6 @kind wide;
  #L11f0a0.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11f0a4.  v0:= lcmp(v6, v0);
  #L11f0a8.  if v0 <= 0 then goto L11f0b0;
  #L11f0ac.  v6:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11f0b0.  call `a_`(v5, v4, v6) @signature `Lb/c;.a_:(Lb/c;J)V` @kind virtual;
  #L11f0b6.  goto L11f09e;
}
procedure `long` `a`(`b.c` v6 @kind this, `b.r` v7 @kind object) @signature `Lb/c;.a:(Lb/r;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11f0c8.  if v7 != 0 then goto L11f0dc;
  #L11f0cc.  v0:= new `java.lang.IllegalArgumentException`;
  #L11f0d0.  v1:= "source == null" @kind object;
  #L11f0d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f0da.  throw v0;
  #L11f0dc.  v0:= 0L;
  #L11f0e0.  v2:= 8192L;
  #L11f0e4.  call temp:= `a`(v7, v6, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11f0ea.  v2:= temp @kind wide;
  #L11f0ec.  v4:= -1L;
  #L11f0f0.  v4:= lcmp(v2, v4);
  #L11f0f4.  if v4 == 0 then goto L11f0fc;
  #L11f0f8.  v0:= v0 + v2 @kind long;
  #L11f0fa.  goto L11f0e0;
  #L11f0fc.  return v0 @kind wide;
}
procedure `b.c` `a`(`b.c` v3 @kind this, `int` v4 ) @signature `Lb/c;.a:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11f110.  v0:= 128I;
  #L11f114.  if v4 >= v0 then goto L11f120;
  #L11f118.  call temp:= `b`(v3, v4) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f11e.  return v3 @kind object;
  #L11f120.  v0:= 2048I;
  #L11f124.  if v4 >= v0 then goto L11f146;
  #L11f128.  v0:= v4 ^> 6;
  #L11f12c.  v0:= v0 ^| 192;
  #L11f130.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f136.  v0:= v4 ^& 63;
  #L11f13a.  v0:= v0 ^| 128;
  #L11f13e.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f144.  goto L11f11e;
  #L11f146.  v0:= 65536I;
  #L11f14a.  if v4 >= v0 then goto L11f1cc;
  #L11f14e.  v0:= 55296I;
  #L11f154.  if v4 < v0 then goto L11f19c;
  #L11f158.  v0:= 57343I;
  #L11f15e.  if v4 > v0 then goto L11f19c;
  #L11f162.  v0:= new `java.lang.IllegalArgumentException`;
  #L11f166.  v1:= new `java.lang.StringBuilder`;
  #L11f16a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11f170.  v2:= "Unexpected code point: " @kind object;
  #L11f174.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f17a.  v1:= temp @kind object;
  #L11f17c.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L11f182.  v2:= temp @kind object;
  #L11f184.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f18a.  v1:= temp @kind object;
  #L11f18c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11f192.  v1:= temp @kind object;
  #L11f194.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f19a.  throw v0;
  #L11f19c.  v0:= v4 ^> 12;
  #L11f1a0.  v0:= v0 ^| 224;
  #L11f1a4.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f1aa.  v0:= v4 ^> 6;
  #L11f1ae.  v0:= v0 ^& 63;
  #L11f1b2.  v0:= v0 ^| 128;
  #L11f1b6.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f1bc.  v0:= v4 ^& 63;
  #L11f1c0.  v0:= v0 ^| 128;
  #L11f1c4.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f1ca.  goto L11f11e;
  #L11f1cc.  v0:= 1114111I;
  #L11f1d2.  if v4 > v0 then goto L11f218;
  #L11f1d6.  v0:= v4 ^> 18;
  #L11f1da.  v0:= v0 ^| 240;
  #L11f1de.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f1e4.  v0:= v4 ^> 12;
  #L11f1e8.  v0:= v0 ^& 63;
  #L11f1ec.  v0:= v0 ^| 128;
  #L11f1f0.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f1f6.  v0:= v4 ^> 6;
  #L11f1fa.  v0:= v0 ^& 63;
  #L11f1fe.  v0:= v0 ^| 128;
  #L11f202.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f208.  v0:= v4 ^& 63;
  #L11f20c.  v0:= v0 ^| 128;
  #L11f210.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f216.  goto L11f11e;
  #L11f218.  v0:= new `java.lang.IllegalArgumentException`;
  #L11f21c.  v1:= new `java.lang.StringBuilder`;
  #L11f220.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11f226.  v2:= "Unexpected code point: " @kind object;
  #L11f22a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f230.  v1:= temp @kind object;
  #L11f232.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L11f238.  v2:= temp @kind object;
  #L11f23a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f240.  v1:= temp @kind object;
  #L11f242.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11f248.  v1:= temp @kind object;
  #L11f24a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f250.  throw v0;
}
procedure `b.c` `a`(`b.c` v8 @kind this, `b.c` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lb/c;.a:(Lb/c;JJ)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11f264.  v6:= 0L;
  #L11f268.  if v9 != 0 then goto L11f27c;
  #L11f26c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11f270.  v1:= "out == null" @kind object;
  #L11f274.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f27a.  throw v0;
  #L11f27c.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L11f280.  v2:= v10 @kind wide;
  #L11f282.  v4:= v12 @kind wide;
  #L11f284.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11f28a.  v0:= lcmp(v12, v6);
  #L11f28e.  if v0 != 0 then goto L11f294;
  #L11f292.  return v8 @kind object;
  #L11f294.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11f298.  v0:= v0 + v12 @kind long;
  #L11f29a.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11f29e.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11f2a2.  v1:= v0.`b.n.c` @type ^`int`;
  #L11f2a6.  v2:= v0.`b.n.b` @type ^`int`;
  #L11f2aa.  v1:= v1 - v2 @kind int;
  #L11f2ac.  v2:= (`long`) v1 @kind i2l;
  #L11f2ae.  v1:= lcmp(v10, v2);
  #L11f2b2.  if v1 < 0 then goto L11f2ca;
  #L11f2b6.  v1:= v0.`b.n.c` @type ^`int`;
  #L11f2ba.  v2:= v0.`b.n.b` @type ^`int`;
  #L11f2be.  v1:= v1 - v2 @kind int;
  #L11f2c0.  v2:= (`long`) v1 @kind i2l;
  #L11f2c2.  v10:= v10 - v2 @kind long;
  #L11f2c4.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11f2c8.  goto L11f2a2;
  #L11f2ca.  v1:= lcmp(v12, v6);
  #L11f2ce.  if v1 <= 0 then goto L11f292;
  #L11f2d2.  v1:= new `b.n`;
  #L11f2d6.  call `<init>`(v1, v0) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L11f2dc.  v2:= v1.`b.n.b` @type ^`int`;
  #L11f2e0.  v2:= (`long`) v2 @kind i2l;
  #L11f2e2.  v2:= v2 + v10 @kind long;
  #L11f2e4.  v2:= (`int`) v2 @kind l2i;
  #L11f2e6.  v1.`b.n.b` @type ^`int` := v2;
  #L11f2ea.  v2:= v1.`b.n.b` @type ^`int`;
  #L11f2ee.  v3:= (`int`) v12 @kind l2i;
  #L11f2f0.  v2:= v2 + v3 @kind int;
  #L11f2f2.  v3:= v1.`b.n.c` @type ^`int`;
  #L11f2f6.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11f2fc.  v2:= temp;
  #L11f2fe.  v1.`b.n.c` @type ^`int` := v2;
  #L11f302.  v2:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11f306.  if v2 != 0 then goto L11f32e;
  #L11f30a.  v1.`b.n.g` @type ^`b.n` := v1 @kind object;
  #L11f30e.  v1.`b.n.f` @type ^`b.n` := v1 @kind object;
  #L11f312.  v9.`b.c.a` @type ^`b.n` := v1 @kind object;
  #L11f316.  v2:= v1.`b.n.c` @type ^`int`;
  #L11f31a.  v1:= v1.`b.n.b` @type ^`int`;
  #L11f31e.  v1:= v2 - v1 @kind int;
  #L11f322.  v2:= (`long`) v1 @kind i2l;
  #L11f324.  v12:= v12 - v2 @kind long;
  #L11f326.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11f32a.  v10:= v6 @kind wide;
  #L11f32c.  goto L11f2ca;
  #L11f32e.  v2:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11f332.  v2:= v2.`b.n.g` @type ^`b.n` @kind object;
  #L11f336.  call temp:= `a`(v2, v1) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11f33c.  goto L11f316;
}
procedure `b.c` `a`(`b.c` v2 @kind this, `b.f` v3 @kind object) @signature `Lb/c;.a:(Lb/f;)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11f350.  if v3 != 0 then goto L11f364;
  #L11f354.  v0:= new `java.lang.IllegalArgumentException`;
  #L11f358.  v1:= "byteString == null" @kind object;
  #L11f35c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f362.  throw v0;
  #L11f364.  call `a`(v3, v2) @signature `Lb/f;.a:(Lb/c;)V` @kind virtual;
  #L11f36a.  return v2 @kind object;
}
procedure `b.c` `a`(`b.c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11f37c.  v0:= 0I;
  #L11f37e.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11f384.  v1:= temp;
  #L11f386.  call temp:= `a`(v2, v3, v0, v1) @signature `Lb/c;.a:(Ljava/lang/String;II)Lb/c;` @kind virtual;
  #L11f38c.  v0:= temp @kind object;
  #L11f38e.  return v0 @kind object;
}
procedure `b.c` `a`(`b.c` v9 @kind this, `java.lang.String` v10 @kind object, `int` v11 , `int` v12 ) @signature `Lb/c;.a:(Ljava/lang/String;II)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11f3a0.  v8:= 57343I;
  #L11f3a6.  v7:= 128I;
  #L11f3aa.  if v10 != 0 then goto L11f3be;
  #L11f3ae.  v0:= new `java.lang.IllegalArgumentException`;
  #L11f3b2.  v1:= "string == null" @kind object;
  #L11f3b6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f3bc.  throw v0;
  #L11f3be.  if v11 >= 0 then goto L11f3f4;
  #L11f3c2.  v0:= new `java.lang.IllegalAccessError`;
  #L11f3c6.  v1:= new `java.lang.StringBuilder`;
  #L11f3ca.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11f3d0.  v2:= "beginIndex < 0: " @kind object;
  #L11f3d4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f3da.  v1:= temp @kind object;
  #L11f3dc.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f3e2.  v1:= temp @kind object;
  #L11f3e4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11f3ea.  v1:= temp @kind object;
  #L11f3ec.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f3f2.  throw v0;
  #L11f3f4.  if v12 >= v11 then goto L11f43e;
  #L11f3f8.  v0:= new `java.lang.IllegalArgumentException`;
  #L11f3fc.  v1:= new `java.lang.StringBuilder`;
  #L11f400.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11f406.  v2:= "endIndex < beginIndex: " @kind object;
  #L11f40a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f410.  v1:= temp @kind object;
  #L11f412.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f418.  v1:= temp @kind object;
  #L11f41a.  v2:= " < " @kind object;
  #L11f41e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f424.  v1:= temp @kind object;
  #L11f426.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f42c.  v1:= temp @kind object;
  #L11f42e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11f434.  v1:= temp @kind object;
  #L11f436.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f43c.  throw v0;
  #L11f43e.  call temp:= `length`(v10) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11f444.  v0:= temp;
  #L11f446.  if v12 <= v0 then goto L11f4c0;
  #L11f44a.  v0:= new `java.lang.IllegalArgumentException`;
  #L11f44e.  v1:= new `java.lang.StringBuilder`;
  #L11f452.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11f458.  v2:= "endIndex > string.length: " @kind object;
  #L11f45c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f462.  v1:= temp @kind object;
  #L11f464.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f46a.  v1:= temp @kind object;
  #L11f46c.  v2:= " > " @kind object;
  #L11f470.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f476.  v1:= temp @kind object;
  #L11f478.  call temp:= `length`(v10) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11f47e.  v2:= temp;
  #L11f480.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f486.  v1:= temp @kind object;
  #L11f488.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11f48e.  v1:= temp @kind object;
  #L11f490.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f496.  throw v0;
  #L11f498.  v0:= 0I;
  #L11f49a.  v2:= 56319I;
  #L11f4a0.  if v1 > v2 then goto L11f4b2;
  #L11f4a4.  v2:= 56320I;
  #L11f4aa.  if v0 < v2 then goto L11f4b2;
  #L11f4ae.  if v0 <= v8 then goto L11f5c8;
  #L11f4b2.  v0:= 63I;
  #L11f4b6.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f4bc.  v11:= v11 + 1;
  #L11f4c0.  if v11 >= v12 then goto L11f62a;
  #L11f4c4.  call temp:= `charAt`(v10, v11) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L11f4ca.  v1:= temp;
  #L11f4cc.  if v1 >= v7 then goto L11f544;
  #L11f4d0.  v0:= 1I;
  #L11f4d2.  call temp:= `e`(v9, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11f4d8.  v2:= temp @kind object;
  #L11f4da.  v3:= v2.`b.n.a` @type ^`byte`[] @kind object;
  #L11f4de.  v0:= v2.`b.n.c` @type ^`int`;
  #L11f4e2.  v4:= v0 - v11 @kind int;
  #L11f4e6.  v0:= v4 - 8192;
  #L11f4ea.  call temp:= `min`(v12, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11f4f0.  v5:= temp;
  #L11f4f2.  v0:= v11 + 1;
  #L11f4f6.  v6:= v4 + v11 @kind int;
  #L11f4fa.  v1:= (`byte`) v1 @kind i2b;
  #L11f4fc.  v3[v6]:= v1 @kind byte;
  #L11f500.  if v0 >= v5 then goto L11f510;
  #L11f504.  call temp:= `charAt`(v10, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L11f50a.  v6:= temp;
  #L11f50c.  if v6 < v7 then goto L11f534;
  #L11f510.  v1:= v0 + v4 @kind int;
  #L11f514.  v3:= v2.`b.n.c` @type ^`int`;
  #L11f518.  v1:= v1 - v3 @kind int;
  #L11f51a.  v3:= v2.`b.n.c` @type ^`int`;
  #L11f51e.  v3:= v3 + v1 @kind int;
  #L11f520.  v2.`b.n.c` @type ^`int` := v3;
  #L11f524.  v2:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11f528.  v4:= (`long`) v1 @kind i2l;
  #L11f52a.  v2:= v2 + v4 @kind long;
  #L11f52c.  v9.`b.c.b` @type ^`long` := v2 @kind wide;
  #L11f530.  v11:= v0;
  #L11f532.  goto L11f4c0;
  #L11f534.  v1:= v0 + 1;
  #L11f538.  v0:= v0 + v4 @kind int;
  #L11f53a.  v6:= (`byte`) v6 @kind i2b;
  #L11f53c.  v3[v0]:= v6 @kind byte;
  #L11f540.  v0:= v1;
  #L11f542.  goto L11f500;
  #L11f544.  v0:= 2048I;
  #L11f548.  if v1 >= v0 then goto L11f56e;
  #L11f54c.  v0:= v1 ^> 6;
  #L11f550.  v0:= v0 ^| 192;
  #L11f554.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f55a.  v0:= v1 ^& 63;
  #L11f55e.  v0:= v0 ^| 128;
  #L11f562.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f568.  v0:= v11 + 1;
  #L11f56c.  goto L11f530;
  #L11f56e.  v0:= 55296I;
  #L11f574.  if v1 < v0 then goto L11f57c;
  #L11f578.  if v1 <= v8 then goto L11f5b0;
  #L11f57c.  v0:= v1 ^> 12;
  #L11f580.  v0:= v0 ^| 224;
  #L11f584.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f58a.  v0:= v1 ^> 6;
  #L11f58e.  v0:= v0 ^& 63;
  #L11f592.  v0:= v0 ^| 128;
  #L11f596.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f59c.  v0:= v1 ^& 63;
  #L11f5a0.  v0:= v0 ^| 128;
  #L11f5a4.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f5aa.  v0:= v11 + 1;
  #L11f5ae.  goto L11f530;
  #L11f5b0.  v0:= v11 + 1;
  #L11f5b4.  if v0 >= v12 then goto L11f498;
  #L11f5b8.  v0:= v11 + 1;
  #L11f5bc.  call temp:= `charAt`(v10, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L11f5c2.  v0:= temp;
  #L11f5c4.  goto L11f49a;
  #L11f5c8.  v2:= 65536I;
  #L11f5cc.  v3:= -55297I;
  #L11f5d2.  v1:= v1 ^& v3 @kind int;
  #L11f5d4.  v1:= v1 ^< 10;
  #L11f5d8.  v3:= -56321I;
  #L11f5de.  v0:= v0 ^& v3 @kind int;
  #L11f5e0.  v0:= v0 ^| v1 @kind int;
  #L11f5e2.  v0:= v0 + v2 @kind int;
  #L11f5e4.  v1:= v0 ^> 18;
  #L11f5e8.  v1:= v1 ^| 240;
  #L11f5ec.  call temp:= `b`(v9, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f5f2.  v1:= v0 ^> 12;
  #L11f5f6.  v1:= v1 ^& 63;
  #L11f5fa.  v1:= v1 ^| 128;
  #L11f5fe.  call temp:= `b`(v9, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f604.  v1:= v0 ^> 6;
  #L11f608.  v1:= v1 ^& 63;
  #L11f60c.  v1:= v1 ^| 128;
  #L11f610.  call temp:= `b`(v9, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f616.  v0:= v0 ^& 63;
  #L11f61a.  v0:= v0 ^| 128;
  #L11f61e.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11f624.  v0:= v11 + 2;
  #L11f628.  goto L11f530;
  #L11f62a.  return v9 @kind object;
}
procedure `b.s` `a`(`b.c` v1 @kind this) @signature `Lb/c;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11f63c.  v0:= `@@b.s.b` @type ^`b.s` @kind object;
  #L11f640.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`b.c` v7 @kind this, `long` v8 , `java.nio.charset.Charset` v10 @kind object) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11f654.  v2:= 0L;
  #L11f658.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11f65c.  v4:= v8 @kind wide;
  #L11f65e.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11f664.  if v10 != 0 then goto L11f678;
  #L11f668.  v0:= new `java.lang.IllegalArgumentException`;
  #L11f66c.  v1:= "charset == null" @kind object;
  #L11f670.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f676.  throw v0;
  #L11f678.  v0:= 2147483647L;
  #L11f67e.  v0:= lcmp(v8, v0);
  #L11f682.  if v0 <= 0 then goto L11f6b8;
  #L11f686.  v0:= new `java.lang.IllegalArgumentException`;
  #L11f68a.  v1:= new `java.lang.StringBuilder`;
  #L11f68e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11f694.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L11f698.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f69e.  v1:= temp @kind object;
  #L11f6a0.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11f6a6.  v1:= temp @kind object;
  #L11f6a8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11f6ae.  v1:= temp @kind object;
  #L11f6b0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f6b6.  throw v0;
  #L11f6b8.  v0:= lcmp(v8, v2);
  #L11f6bc.  if v0 != 0 then goto L11f6c6;
  #L11f6c0.  v0:= "" @kind object;
  #L11f6c4.  return v0 @kind object;
  #L11f6c6.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11f6ca.  v0:= v1.`b.n.b` @type ^`int`;
  #L11f6ce.  v2:= (`long`) v0 @kind i2l;
  #L11f6d0.  v2:= v2 + v8 @kind long;
  #L11f6d2.  v0:= v1.`b.n.c` @type ^`int`;
  #L11f6d6.  v4:= (`long`) v0 @kind i2l;
  #L11f6d8.  v0:= lcmp(v2, v4);
  #L11f6dc.  if v0 <= 0 then goto L11f6f4;
  #L11f6e0.  v0:= new `java.lang.String`;
  #L11f6e4.  call temp:= `f`(v7, v8) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #L11f6ea.  v1:= temp @kind object;
  #L11f6ec.  call `<init>`(v0, v1, v10) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L11f6f2.  goto L11f6c4;
  #L11f6f4.  v0:= new `java.lang.String`;
  #L11f6f8.  v2:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11f6fc.  v3:= v1.`b.n.b` @type ^`int`;
  #L11f700.  v4:= (`int`) v8 @kind l2i;
  #L11f702.  call `<init>`(v0, v2, v3, v4, v10) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L11f708.  v2:= v1.`b.n.b` @type ^`int`;
  #L11f70c.  v2:= (`long`) v2 @kind i2l;
  #L11f70e.  v2:= v2 + v8 @kind long;
  #L11f710.  v2:= (`int`) v2 @kind l2i;
  #L11f712.  v1.`b.n.b` @type ^`int` := v2;
  #L11f716.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11f71a.  v2:= v2 - v8 @kind long;
  #L11f71c.  v7.`b.c.b` @type ^`long` := v2 @kind wide;
  #L11f720.  v2:= v1.`b.n.b` @type ^`int`;
  #L11f724.  v3:= v1.`b.n.c` @type ^`int`;
  #L11f728.  if v2 != v3 then goto L11f6c4;
  #L11f72c.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11f732.  v2:= temp @kind object;
  #L11f734.  v7.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L11f738.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11f73e.  goto L11f6c4;
}
procedure `java.lang.String` `a`(`b.c` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lb/c;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L11f750.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11f754.  call temp:= `a`(v2, v0, v3) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L11f75a.  v0:= temp @kind object;
  #L11f75c.  return v0 @kind object;
  #L11f75e.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L11f760.  v1:= new `java.lang.AssertionError`;
  #L11f764.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11f76a.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L11f75e;
}
procedure `void` `a`(`b.c` v3 @kind this, `long` v4 ) @signature `Lb/c;.a:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11f78c.  v0:= v3.`b.c.b` @type ^`long` @kind wide;
  #L11f790.  v0:= lcmp(v0, v4);
  #L11f794.  if v0 >= 0 then goto L11f7a4;
  #L11f798.  v0:= new `java.io.EOFException`;
  #L11f79c.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11f7a2.  throw v0;
  #L11f7a4.  return @kind void;
}
procedure `void` `a`(`b.c` v3 @kind this, `byte`[] v4 @kind object) @signature `Lb/c;.a:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11f7b8.  v0:= 0I;
  #L11f7ba.  v1:= length @variable v4;
  #L11f7bc.  if v0 >= v1 then goto L11f7e2;
  #L11f7c0.  v1:= length @variable v4;
  #L11f7c2.  v1:= v1 - v0 @kind int;
  #L11f7c4.  call temp:= `a`(v3, v4, v0, v1) @signature `Lb/c;.a:([BII)I` @kind virtual;
  #L11f7ca.  v1:= temp;
  #L11f7cc.  v2:= -1I;
  #L11f7ce.  if v1 != v2 then goto L11f7de;
  #L11f7d2.  v0:= new `java.io.EOFException`;
  #L11f7d6.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11f7dc.  throw v0;
  #L11f7de.  v0:= v0 + v1 @kind int;
  #L11f7e0.  goto L11f7ba;
  #L11f7e2.  return @kind void;
}
procedure `boolean` `a`(`b.c` v7 @kind this, `long` v8 , `b.f` v10 @kind object) @signature `Lb/c;.a:(JLb/f;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11f7f4.  v5:= 0I;
  #L11f7f6.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11f7fc.  v6:= temp;
  #L11f7fe.  v1:= v7 @kind object;
  #L11f800.  v2:= v8 @kind wide;
  #L11f802.  v4:= v10 @kind object;
  #L11f804.  call temp:= `a`(v1, v2, v4, v5, v6) @signature `Lb/c;.a:(JLb/f;II)Z` @kind virtual;
  #L11f80a.  v0:= temp;
  #L11f80c.  return v0;
}
procedure `boolean` `a`(`b.c` v7 @kind this, `long` v8 , `b.f` v10 @kind object, `int` v11 , `int` v12 ) @signature `Lb/c;.a:(JLb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11f820.  v0:= 0I;
  #L11f822.  v2:= 0L;
  #L11f826.  v1:= lcmp(v8, v2);
  #L11f82a.  if v1 < 0 then goto L11f854;
  #L11f82e.  if v11 < 0 then goto L11f854;
  #L11f832.  if v12 < 0 then goto L11f854;
  #L11f836.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11f83a.  v2:= v2 - v8 @kind long;
  #L11f83c.  v4:= (`long`) v12 @kind i2l;
  #L11f83e.  v1:= lcmp(v2, v4);
  #L11f842.  if v1 < 0 then goto L11f854;
  #L11f846.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11f84c.  v1:= temp;
  #L11f84e.  v1:= v1 - v11 @kind int;
  #L11f850.  if v1 >= v12 then goto L11f856;
  #L11f854.  return v0;
  #L11f856.  v1:= v0;
  #L11f858.  if v1 >= v12 then goto L11f87e;
  #L11f85c.  v2:= (`long`) v1 @kind i2l;
  #L11f85e.  v2:= v2 + v8 @kind long;
  #L11f860.  call temp:= `b`(v7, v2) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L11f866.  v2:= temp;
  #L11f868.  v3:= v11 + v1 @kind int;
  #L11f86c.  call temp:= `a`(v10, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L11f872.  v3:= temp;
  #L11f874.  if v2 != v3 then goto L11f854;
  #L11f878.  v1:= v1 + 1;
  #L11f87c.  goto L11f858;
  #L11f87e.  v0:= 1I;
  #L11f880.  goto L11f854;
}
procedure `void` `a_`(`b.c` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `Lb/c;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11f894.  v2:= 0L;
  #L11f898.  if v9 != 0 then goto L11f8ac;
  #L11f89c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11f8a0.  v1:= "source == null" @kind object;
  #L11f8a4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f8aa.  throw v0;
  #L11f8ac.  if v9 != v8 then goto L11f8c0;
  #L11f8b0.  v0:= new `java.lang.IllegalArgumentException`;
  #L11f8b4.  v1:= "source == this" @kind object;
  #L11f8b8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f8be.  throw v0;
  #L11f8c0.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11f8c4.  v4:= v10 @kind wide;
  #L11f8c6.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11f8cc.  v0:= lcmp(v10, v2);
  #L11f8d0.  if v0 <= 0 then goto L11f950;
  #L11f8d4.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11f8d8.  v0:= v0.`b.n.c` @type ^`int`;
  #L11f8dc.  v1:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11f8e0.  v1:= v1.`b.n.b` @type ^`int`;
  #L11f8e4.  v0:= v0 - v1 @kind int;
  #L11f8e6.  v0:= (`long`) v0 @kind i2l;
  #L11f8e8.  v0:= lcmp(v10, v0);
  #L11f8ec.  if v0 >= 0 then goto L11f970;
  #L11f8f0.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11f8f4.  if v0 == 0 then goto L11f952;
  #L11f8f8.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11f8fc.  v0:= v0.`b.n.g` @type ^`b.n` @kind object;
  #L11f900.  v1:= v0 @kind object;
  #L11f902.  if v1 == 0 then goto L11f95e;
  #L11f906.  v0:= v1.`b.n.e` @type ^`boolean` @kind boolean;
  #L11f90a.  if v0 == 0 then goto L11f95e;
  #L11f90e.  v0:= v1.`b.n.c` @type ^`int`;
  #L11f912.  v4:= (`long`) v0 @kind i2l;
  #L11f914.  v4:= v4 + v10 @kind long;
  #L11f916.  v0:= v1.`b.n.d` @type ^`boolean` @kind boolean;
  #L11f91a.  if v0 == 0 then goto L11f958;
  #L11f91e.  v0:= 0I;
  #L11f920.  v6:= (`long`) v0 @kind i2l;
  #L11f922.  v4:= v4 - v6 @kind long;
  #L11f924.  v6:= 8192L;
  #L11f928.  v0:= lcmp(v4, v6);
  #L11f92c.  if v0 > 0 then goto L11f95e;
  #L11f930.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11f934.  v2:= (`int`) v10 @kind l2i;
  #L11f936.  call `a`(v0, v1, v2) @signature `Lb/n;.a:(Lb/n;I)V` @kind virtual;
  #L11f93c.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11f940.  v0:= v0 - v10 @kind long;
  #L11f942.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11f946.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L11f94a.  v0:= v0 + v10 @kind long;
  #L11f94c.  v8.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11f950.  return @kind void;
  #L11f952.  v0:= 0I;
  #L11f954.  v1:= v0 @kind object;
  #L11f956.  goto L11f902;
  #L11f958.  v0:= v1.`b.n.b` @type ^`int`;
  #L11f95c.  goto L11f920;
  #L11f95e.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11f962.  v1:= (`int`) v10 @kind l2i;
  #L11f964.  call temp:= `a`(v0, v1) @signature `Lb/n;.a:(I)Lb/n;` @kind virtual;
  #L11f96a.  v0:= temp @kind object;
  #L11f96c.  v9.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L11f970.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11f974.  v1:= v0.`b.n.c` @type ^`int`;
  #L11f978.  v4:= v0.`b.n.b` @type ^`int`;
  #L11f97c.  v1:= v1 - v4 @kind int;
  #L11f97e.  v4:= (`long`) v1 @kind i2l;
  #L11f980.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11f986.  v1:= temp @kind object;
  #L11f988.  v9.`b.c.a` @type ^`b.n` := v1 @kind object;
  #L11f98c.  v1:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11f990.  if v1 != 0 then goto L11f9c4;
  #L11f994.  v8.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L11f998.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11f99c.  v1:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11f9a0.  v6:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11f9a4.  v1.`b.n.g` @type ^`b.n` := v6 @kind object;
  #L11f9a8.  v0.`b.n.f` @type ^`b.n` := v6 @kind object;
  #L11f9ac.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11f9b0.  v0:= v0 - v4 @kind long;
  #L11f9b2.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11f9b6.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L11f9ba.  v0:= v0 + v4 @kind long;
  #L11f9bc.  v8.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11f9c0.  v10:= v10 - v4 @kind long;
  #L11f9c2.  goto L11f8cc;
  #L11f9c4.  v1:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11f9c8.  v1:= v1.`b.n.g` @type ^`b.n` @kind object;
  #L11f9cc.  call temp:= `a`(v1, v0) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11f9d2.  v0:= temp @kind object;
  #L11f9d4.  call `b`(v0) @signature `Lb/n;.b:()V` @kind virtual;
  #L11f9da.  goto L11f9ac;
}
procedure `byte` `b`(`b.c` v7 @kind this, `long` v8 ) @signature `Lb/c;.b:(J)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11f9ec.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11f9f0.  v4:= 1L;
  #L11f9f4.  v2:= v8 @kind wide;
  #L11f9f6.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11f9fc.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11fa00.  v1:= v0.`b.n.c` @type ^`int`;
  #L11fa04.  v2:= v0.`b.n.b` @type ^`int`;
  #L11fa08.  v1:= v1 - v2 @kind int;
  #L11fa0a.  v2:= (`long`) v1 @kind i2l;
  #L11fa0c.  v2:= lcmp(v8, v2);
  #L11fa10.  if v2 >= 0 then goto L11fa26;
  #L11fa14.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11fa18.  v0:= v0.`b.n.b` @type ^`int`;
  #L11fa1c.  v2:= (`int`) v8 @kind l2i;
  #L11fa1e.  v0:= v0 + v2 @kind int;
  #L11fa20.  v0:= v1[v0] @kind byte;
  #L11fa24.  return v0;
  #L11fa26.  v2:= (`long`) v1 @kind i2l;
  #L11fa28.  v8:= v8 - v2 @kind long;
  #L11fa2a.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11fa2e.  goto L11fa00;
}
procedure `long` `b`(`b.c` v2 @kind this) @signature `Lb/c;.b:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11fa40.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11fa44.  return v0 @kind wide;
}
procedure `b.c` `b`(`b.c` v4 @kind this, `int` v5 ) @signature `Lb/c;.b:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11fa58.  v0:= 1I;
  #L11fa5a.  call temp:= `e`(v4, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11fa60.  v0:= temp @kind object;
  #L11fa62.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11fa66.  v2:= v0.`b.n.c` @type ^`int`;
  #L11fa6a.  v3:= v2 + 1;
  #L11fa6e.  v0.`b.n.c` @type ^`int` := v3;
  #L11fa72.  v0:= (`byte`) v5 @kind i2b;
  #L11fa74.  v1[v2]:= v0 @kind byte;
  #L11fa78.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11fa7c.  v2:= 1L;
  #L11fa80.  v0:= v0 + v2 @kind long;
  #L11fa82.  v4.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11fa86.  return v4 @kind object;
}
procedure `b.c` `b`(`b.c` v2 @kind this, `byte`[] v3 @kind object) @signature `Lb/c;.b:([B)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11fa98.  if v3 != 0 then goto L11faac;
  #L11fa9c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11faa0.  v1:= "source == null" @kind object;
  #L11faa4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11faaa.  throw v0;
  #L11faac.  v0:= 0I;
  #L11faae.  v1:= length @variable v3;
  #L11fab0.  call temp:= `b`(v2, v3, v0, v1) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L11fab6.  v0:= temp @kind object;
  #L11fab8.  return v0 @kind object;
}
procedure `b.c` `b`(`b.c` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lb/c;.b:([BII)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11facc.  if v7 != 0 then goto L11fae0;
  #L11fad0.  v0:= new `java.lang.IllegalArgumentException`;
  #L11fad4.  v1:= "source == null" @kind object;
  #L11fad8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11fade.  throw v0;
  #L11fae0.  v0:= length @variable v7;
  #L11fae2.  v0:= (`long`) v0 @kind i2l;
  #L11fae4.  v2:= (`long`) v8 @kind i2l;
  #L11fae6.  v4:= (`long`) v9 @kind i2l;
  #L11fae8.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11faee.  v0:= v8 + v9 @kind int;
  #L11faf2.  if v8 >= v0 then goto L11fb30;
  #L11faf6.  v1:= 1I;
  #L11faf8.  call temp:= `e`(v6, v1) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11fafe.  v1:= temp @kind object;
  #L11fb00.  v2:= v0 - v8 @kind int;
  #L11fb04.  v3:= v1.`b.n.c` @type ^`int`;
  #L11fb08.  v3:= v3 - 8192;
  #L11fb0c.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11fb12.  v2:= temp;
  #L11fb14.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11fb18.  v4:= v1.`b.n.c` @type ^`int`;
  #L11fb1c.  call `arraycopy`(v7, v8, v3, v4, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11fb22.  v8:= v8 + v2 @kind int;
  #L11fb24.  v3:= v1.`b.n.c` @type ^`int`;
  #L11fb28.  v2:= v2 + v3 @kind int;
  #L11fb2a.  v1.`b.n.c` @type ^`int` := v2;
  #L11fb2e.  goto L11faf2;
  #L11fb30.  v0:= v6.`b.c.b` @type ^`long` @kind wide;
  #L11fb34.  v2:= (`long`) v9 @kind i2l;
  #L11fb36.  v0:= v0 + v2 @kind long;
  #L11fb38.  v6.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11fb3c.  return v6 @kind object;
}
procedure `b.d` `b`(`b.c` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lb/c;.b:(Ljava/lang/String;)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11fb50.  call temp:= `a`(v1, v2) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @kind virtual;
  #L11fb56.  v0:= temp @kind object;
  #L11fb58.  return v0 @kind object;
}
procedure `b.c` `c`(`b.c` v0 @kind this) @signature `Lb/c;.c:()Lb/c;` @AccessFlag PUBLIC {
    temp;

  #L11fb6c.  return v0 @kind object;
}
procedure `b.c` `c`(`b.c` v5 @kind this, `int` v6 ) @signature `Lb/c;.c:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11fb80.  v0:= 2I;
  #L11fb82.  call temp:= `e`(v5, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11fb88.  v0:= temp @kind object;
  #L11fb8a.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11fb8e.  v2:= v0.`b.n.c` @type ^`int`;
  #L11fb92.  v3:= v2 + 1;
  #L11fb96.  v4:= v6 ^>> 8;
  #L11fb9a.  v4:= v4 ^& 255;
  #L11fb9e.  v4:= (`byte`) v4 @kind i2b;
  #L11fba0.  v1[v2]:= v4 @kind byte;
  #L11fba4.  v2:= v3 + 1;
  #L11fba8.  v4:= v6 ^& 255;
  #L11fbac.  v4:= (`byte`) v4 @kind i2b;
  #L11fbae.  v1[v3]:= v4 @kind byte;
  #L11fbb2.  v0.`b.n.c` @type ^`int` := v2;
  #L11fbb6.  v0:= v5.`b.c.b` @type ^`long` @kind wide;
  #L11fbba.  v2:= 2L;
  #L11fbbe.  v0:= v0 + v2 @kind long;
  #L11fbc0.  v5.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11fbc4.  return v5 @kind object;
}
procedure `b.d` `c`(`b.c` v1 @kind this, `byte`[] v2 @kind object) @signature `Lb/c;.c:([B)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11fbd8.  call temp:= `b`(v1, v2) @signature `Lb/c;.b:([B)Lb/c;` @kind virtual;
  #L11fbde.  v0:= temp @kind object;
  #L11fbe0.  return v0 @kind object;
}
procedure `b.d` `c`(`b.c` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lb/c;.c:([BII)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11fbf4.  call temp:= `b`(v1, v2, v3, v4) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L11fbfa.  v0:= temp @kind object;
  #L11fbfc.  return v0 @kind object;
}
procedure `b.f` `c`(`b.c` v3 @kind this, `long` v4 ) @signature `Lb/c;.c:(J)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11fc10.  v0:= new `b.f`;
  #L11fc14.  call temp:= `f`(v3, v4) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #L11fc1a.  v1:= temp @kind object;
  #L11fc1c.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11fc22.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`b.c` v1 @kind this) @signature `Lb/c;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11fc34.  call temp:= `s`(v1) @signature `Lb/c;.s:()Lb/c;` @kind virtual;
  #L11fc3a.  v0:= temp @kind object;
  #L11fc3c.  return v0 @kind object;
}
procedure `void` `close`(`b.c` v0 @kind this) @signature `Lb/c;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L11fc50.  return @kind void;
}
procedure `b.c` `d`(`b.c` v0 @kind this) @signature `Lb/c;.d:()Lb/c;` @AccessFlag PUBLIC {
    temp;

  #L11fc64.  return v0 @kind object;
}
procedure `b.c` `d`(`b.c` v5 @kind this, `int` v6 ) @signature `Lb/c;.d:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11fc78.  v0:= 4I;
  #L11fc7a.  call temp:= `e`(v5, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11fc80.  v0:= temp @kind object;
  #L11fc82.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11fc86.  v2:= v0.`b.n.c` @type ^`int`;
  #L11fc8a.  v3:= v2 + 1;
  #L11fc8e.  v4:= v6 ^>> 24;
  #L11fc92.  v4:= v4 ^& 255;
  #L11fc96.  v4:= (`byte`) v4 @kind i2b;
  #L11fc98.  v1[v2]:= v4 @kind byte;
  #L11fc9c.  v2:= v3 + 1;
  #L11fca0.  v4:= v6 ^>> 16;
  #L11fca4.  v4:= v4 ^& 255;
  #L11fca8.  v4:= (`byte`) v4 @kind i2b;
  #L11fcaa.  v1[v3]:= v4 @kind byte;
  #L11fcae.  v3:= v2 + 1;
  #L11fcb2.  v4:= v6 ^>> 8;
  #L11fcb6.  v4:= v4 ^& 255;
  #L11fcba.  v4:= (`byte`) v4 @kind i2b;
  #L11fcbc.  v1[v2]:= v4 @kind byte;
  #L11fcc0.  v2:= v3 + 1;
  #L11fcc4.  v4:= v6 ^& 255;
  #L11fcc8.  v4:= (`byte`) v4 @kind i2b;
  #L11fcca.  v1[v3]:= v4 @kind byte;
  #L11fcce.  v0.`b.n.c` @type ^`int` := v2;
  #L11fcd2.  v0:= v5.`b.c.b` @type ^`long` @kind wide;
  #L11fcd6.  v2:= 4L;
  #L11fcda.  v0:= v0 + v2 @kind long;
  #L11fcdc.  v5.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11fce0.  return v5 @kind object;
}
procedure `java.lang.String` `d`(`b.c` v1 @kind this, `long` v2 ) @signature `Lb/c;.d:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11fcf4.  v0:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L11fcf8.  call temp:= `a`(v1, v2, v0) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L11fcfe.  v0:= temp @kind object;
  #L11fd00.  return v0 @kind object;
}
procedure `b.n` `e`(`b.c` v3 @kind this, `int` v4 ) @signature `Lb/c;.e:(I)Lb/n;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L11fd14.  v2:= 8192I;
  #L11fd18.  v0:= 1I;
  #L11fd1a.  if v4 < v0 then goto L11fd22;
  #L11fd1e.  if v4 <= v2 then goto L11fd2e;
  #L11fd22.  v0:= new `java.lang.IllegalArgumentException`;
  #L11fd26.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11fd2c.  throw v0;
  #L11fd2e.  v0:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L11fd32.  if v0 != 0 then goto L11fd58;
  #L11fd36.  call temp:= `a`() @signature `Lb/o;.a:()Lb/n;` @kind static;
  #L11fd3c.  v0:= temp @kind object;
  #L11fd3e.  v3.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L11fd42.  v1:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L11fd46.  v2:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L11fd4a.  v0:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L11fd4e.  v2.`b.n.g` @type ^`b.n` := v0 @kind object;
  #L11fd52.  v1.`b.n.f` @type ^`b.n` := v0 @kind object;
  #L11fd56.  return v0 @kind object;
  #L11fd58.  v0:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L11fd5c.  v0:= v0.`b.n.g` @type ^`b.n` @kind object;
  #L11fd60.  v1:= v0.`b.n.c` @type ^`int`;
  #L11fd64.  v1:= v1 + v4 @kind int;
  #L11fd66.  if v1 > v2 then goto L11fd72;
  #L11fd6a.  v1:= v0.`b.n.e` @type ^`boolean` @kind boolean;
  #L11fd6e.  if v1 != 0 then goto L11fd56;
  #L11fd72.  call temp:= `a`() @signature `Lb/o;.a:()Lb/n;` @kind static;
  #L11fd78.  v1:= temp @kind object;
  #L11fd7a.  call temp:= `a`(v0, v1) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11fd80.  v0:= temp @kind object;
  #L11fd82.  goto L11fd56;
}
procedure `java.lang.String` `e`(`b.c` v5 @kind this, `long` v6 ) @signature `Lb/c;.e:(J)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11fd94.  v2:= 1L;
  #L11fd98.  v0:= 0L;
  #L11fd9c.  v0:= lcmp(v6, v0);
  #L11fda0.  if v0 <= 0 then goto L11fdd0;
  #L11fda4.  v0:= v6 - v2 @kind long;
  #L11fda8.  call temp:= `b`(v5, v0) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L11fdae.  v0:= temp;
  #L11fdb0.  v1:= 13I;
  #L11fdb4.  if v0 != v1 then goto L11fdd0;
  #L11fdb8.  v0:= v6 - v2 @kind long;
  #L11fdbc.  call temp:= `d`(v5, v0) @signature `Lb/c;.d:(J)Ljava/lang/String;` @kind virtual;
  #L11fdc2.  v0:= temp @kind object;
  #L11fdc4.  v2:= 2L;
  #L11fdc8.  call `g`(v5, v2) @signature `Lb/c;.g:(J)V` @kind virtual;
  #L11fdce.  return v0 @kind object;
  #L11fdd0.  call temp:= `d`(v5, v6) @signature `Lb/c;.d:(J)Ljava/lang/String;` @kind virtual;
  #L11fdd6.  v0:= temp @kind object;
  #L11fdd8.  call `g`(v5, v2) @signature `Lb/c;.g:(J)V` @kind virtual;
  #L11fdde.  goto L11fdce;
}
procedure `boolean` `e`(`b.c` v4 @kind this) @signature `Lb/c;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11fdf0.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11fdf4.  v2:= 0L;
  #L11fdf8.  v0:= lcmp(v0, v2);
  #L11fdfc.  if v0 != 0 then goto L11fe04;
  #L11fe00.  v0:= 1I;
  #L11fe02.  return v0;
  #L11fe04.  v0:= 0I;
  #L11fe06.  goto L11fe02;
}
procedure `boolean` `equals`(`b.c` v14 @kind this, `java.lang.Object` v15 @kind object) @signature `Lb/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L11fe18.  v0:= 0L;
  #L11fe1c.  v6:= 1I;
  #L11fe1e.  v7:= 0I;
  #L11fe20.  if v14 != v15 then goto L11fe28;
  #L11fe24.  v0:= v6;
  #L11fe26.  return v0;
  #L11fe28.  v2:= instanceof @variable v15 @type ^`b.c` @kind boolean;
  #L11fe2c.  if v2 != 0 then goto L11fe34;
  #L11fe30.  v0:= v7;
  #L11fe32.  goto L11fe26;
  #L11fe34.  v15:= (`b.c`) v15 @kind object;
  #L11fe38.  v2:= v14.`b.c.b` @type ^`long` @kind wide;
  #L11fe3c.  v4:= v15.`b.c.b` @type ^`long` @kind wide;
  #L11fe40.  v2:= lcmp(v2, v4);
  #L11fe44.  if v2 == 0 then goto L11fe4c;
  #L11fe48.  v0:= v7;
  #L11fe4a.  goto L11fe26;
  #L11fe4c.  v2:= v14.`b.c.b` @type ^`long` @kind wide;
  #L11fe50.  v2:= lcmp(v2, v0);
  #L11fe54.  if v2 != 0 then goto L11fe5c;
  #L11fe58.  v0:= v6;
  #L11fe5a.  goto L11fe26;
  #L11fe5c.  v5:= v14.`b.c.a` @type ^`b.n` @kind object;
  #L11fe60.  v4:= v15.`b.c.a` @type ^`b.n` @kind object;
  #L11fe64.  v3:= v5.`b.n.b` @type ^`int`;
  #L11fe68.  v2:= v4.`b.n.b` @type ^`int`;
  #L11fe6c.  v8:= v14.`b.c.b` @type ^`long` @kind wide;
  #L11fe70.  v8:= lcmp(v0, v8);
  #L11fe74.  if v8 >= 0 then goto L11feea;
  #L11fe78.  v8:= v5.`b.n.c` @type ^`int`;
  #L11fe7c.  v8:= v8 - v3 @kind int;
  #L11fe7e.  v9:= v4.`b.n.c` @type ^`int`;
  #L11fe82.  v9:= v9 - v2 @kind int;
  #L11fe84.  call temp:= `min`(v8, v9) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11fe8a.  v8:= temp;
  #L11fe8c.  v10:= (`long`) v8 @kind i2l;
  #L11fe8e.  v8:= v7;
  #L11fe90.  v12:= (`long`) v8 @kind i2l;
  #L11fe92.  v9:= lcmp(v12, v10);
  #L11fe96.  if v9 >= 0 then goto L11fec6;
  #L11fe9a.  v12:= v5.`b.n.a` @type ^`byte`[] @kind object;
  #L11fe9e.  v9:= v3 + 1;
  #L11fea2.  v12:= v12[v3] @kind byte;
  #L11fea6.  v13:= v4.`b.n.a` @type ^`byte`[] @kind object;
  #L11feaa.  v3:= v2 + 1;
  #L11feae.  v2:= v13[v2] @kind byte;
  #L11feb2.  if v12 == v2 then goto L11feba;
  #L11feb6.  v0:= v7;
  #L11feb8.  goto L11fe26;
  #L11feba.  v2:= v8 + 1;
  #L11febe.  v8:= v2;
  #L11fec0.  v2:= v3;
  #L11fec2.  v3:= v9;
  #L11fec4.  goto L11fe90;
  #L11fec6.  v8:= v5.`b.n.c` @type ^`int`;
  #L11feca.  if v3 != v8 then goto L11fed6;
  #L11fece.  v5:= v5.`b.n.f` @type ^`b.n` @kind object;
  #L11fed2.  v3:= v5.`b.n.b` @type ^`int`;
  #L11fed6.  v8:= v4.`b.n.c` @type ^`int`;
  #L11feda.  if v2 != v8 then goto L11fee6;
  #L11fede.  v4:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11fee2.  v2:= v4.`b.n.b` @type ^`int`;
  #L11fee6.  v0:= v0 + v10 @kind long;
  #L11fee8.  goto L11fe6c;
  #L11feea.  v0:= v6;
  #L11feec.  goto L11fe26;
}
procedure `b.f` `f`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.f:(I)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11ff00.  if v2 != 0 then goto L11ff0a;
  #L11ff04.  v0:= `@@b.f.b` @type ^`b.f` @kind object;
  #L11ff08.  return v0 @kind object;
  #L11ff0a.  v0:= new `b.p`;
  #L11ff0e.  call `<init>`(v0, v1, v2) @signature `Lb/p;.<init>:(Lb/c;I)V` @kind direct;
  #L11ff14.  goto L11ff08;
}
procedure `java.io.InputStream` `f`(`b.c` v1 @kind this) @signature `Lb/c;.f:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11ff28.  v0:= new `b.c$1`;
  #L11ff2c.  call `<init>`(v0, v1) @signature `Lb/c$1;.<init>:(Lb/c;)V` @kind direct;
  #L11ff32.  return v0 @kind object;
}
procedure `byte`[] `f`(`b.c` v7 @kind this, `long` v8 ) @signature `Lb/c;.f:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11ff44.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11ff48.  v2:= 0L;
  #L11ff4c.  v4:= v8 @kind wide;
  #L11ff4e.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11ff54.  v0:= 2147483647L;
  #L11ff5a.  v0:= lcmp(v8, v0);
  #L11ff5e.  if v0 <= 0 then goto L11ff94;
  #L11ff62.  v0:= new `java.lang.IllegalArgumentException`;
  #L11ff66.  v1:= new `java.lang.StringBuilder`;
  #L11ff6a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11ff70.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L11ff74.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ff7a.  v1:= temp @kind object;
  #L11ff7c.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ff82.  v1:= temp @kind object;
  #L11ff84.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11ff8a.  v1:= temp @kind object;
  #L11ff8c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ff92.  throw v0;
  #L11ff94.  v0:= (`int`) v8 @kind l2i;
  #L11ff96.  v0:= new `byte`[v0];
  #L11ff9a.  call `a`(v7, v0) @signature `Lb/c;.a:([B)V` @kind virtual;
  #L11ffa0.  return v0 @kind object;
}
procedure `void` `flush`(`b.c` v0 @kind this) @signature `Lb/c;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L11ffb4.  return @kind void;
}
procedure `long` `g`(`b.c` v5 @kind this) @signature `Lb/c;.g:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11ffc8.  v2:= 0L;
  #L11ffcc.  v0:= v5.`b.c.b` @type ^`long` @kind wide;
  #L11ffd0.  v4:= lcmp(v0, v2);
  #L11ffd4.  if v4 != 0 then goto L11ffdc;
  #L11ffd8.  v0:= v2 @kind wide;
  #L11ffda.  return v0 @kind wide;
  #L11ffdc.  v2:= v5.`b.c.a` @type ^`b.n` @kind object;
  #L11ffe0.  v2:= v2.`b.n.g` @type ^`b.n` @kind object;
  #L11ffe4.  v3:= v2.`b.n.c` @type ^`int`;
  #L11ffe8.  v4:= 8192I;
  #L11ffec.  if v3 >= v4 then goto L11ffda;
  #L11fff0.  v3:= v2.`b.n.e` @type ^`boolean` @kind boolean;
  #L11fff4.  if v3 == 0 then goto L11ffda;
  #L11fff8.  v3:= v2.`b.n.c` @type ^`int`;
  #L11fffc.  v2:= v2.`b.n.b` @type ^`int`;
  #L120000.  v2:= v3 - v2 @kind int;
  #L120004.  v2:= (`long`) v2 @kind i2l;
  #L120006.  v0:= v0 - v2 @kind long;
  #L120008.  goto L11ffda;
}
procedure `b.d` `g`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.g:(I)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L12001c.  call temp:= `d`(v1, v2) @signature `Lb/c;.d:(I)Lb/c;` @kind virtual;
  #L120022.  v0:= temp @kind object;
  #L120024.  return v0 @kind object;
}
procedure `void` `g`(`b.c` v7 @kind this, `long` v8 ) @signature `Lb/c;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L120038.  v0:= 0L;
  #L12003c.  v0:= lcmp(v8, v0);
  #L120040.  if v0 <= 0 then goto L1200c0;
  #L120044.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L120048.  if v0 != 0 then goto L120058;
  #L12004c.  v0:= new `java.io.EOFException`;
  #L120050.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L120056.  throw v0;
  #L120058.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L12005c.  v0:= v0.`b.n.c` @type ^`int`;
  #L120060.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L120064.  v1:= v1.`b.n.b` @type ^`int`;
  #L120068.  v0:= v0 - v1 @kind int;
  #L12006a.  v0:= (`long`) v0 @kind i2l;
  #L12006c.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L120072.  v0:= temp @kind wide;
  #L120074.  v0:= (`int`) v0 @kind l2i;
  #L120076.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L12007a.  v4:= (`long`) v0 @kind i2l;
  #L12007c.  v2:= v2 - v4 @kind long;
  #L12007e.  v7.`b.c.b` @type ^`long` := v2 @kind wide;
  #L120082.  v2:= (`long`) v0 @kind i2l;
  #L120084.  v8:= v8 - v2 @kind long;
  #L120086.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L12008a.  v2:= v1.`b.n.b` @type ^`int`;
  #L12008e.  v0:= v0 + v2 @kind int;
  #L120090.  v1.`b.n.b` @type ^`int` := v0;
  #L120094.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L120098.  v0:= v0.`b.n.b` @type ^`int`;
  #L12009c.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L1200a0.  v1:= v1.`b.n.c` @type ^`int`;
  #L1200a4.  if v0 != v1 then goto L120038;
  #L1200a8.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L1200ac.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L1200b2.  v1:= temp @kind object;
  #L1200b4.  v7.`b.c.a` @type ^`b.n` := v1 @kind object;
  #L1200b8.  call `a`(v0) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L1200be.  goto L120038;
  #L1200c0.  return @kind void;
}
procedure `byte` `h`(`b.c` v10 @kind this) @signature `Lb/c;.h:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1200d4.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L1200d8.  v2:= 0L;
  #L1200dc.  v0:= lcmp(v0, v2);
  #L1200e0.  if v0 != 0 then goto L1200f4;
  #L1200e4.  v0:= new `java.lang.IllegalStateException`;
  #L1200e8.  v1:= "size == 0" @kind object;
  #L1200ec.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1200f2.  throw v0;
  #L1200f4.  v0:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L1200f8.  v1:= v0.`b.n.b` @type ^`int`;
  #L1200fc.  v2:= v0.`b.n.c` @type ^`int`;
  #L120100.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L120104.  v4:= v1 + 1;
  #L120108.  v1:= v3[v1] @kind byte;
  #L12010c.  v6:= v10.`b.c.b` @type ^`long` @kind wide;
  #L120110.  v8:= 1L;
  #L120114.  v6:= v6 - v8 @kind long;
  #L120116.  v10.`b.c.b` @type ^`long` := v6 @kind wide;
  #L12011a.  if v4 != v2 then goto L120132;
  #L12011e.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L120124.  v2:= temp @kind object;
  #L120126.  v10.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L12012a.  call `a`(v0) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L120130.  return v1;
  #L120132.  v0.`b.n.b` @type ^`int` := v4;
  #L120136.  goto L120130;
}
procedure `b.c` `h`(`b.c` v11 @kind this, `long` v12 ) @signature `Lb/c;.h:(J)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L120148.  v0:= 0L;
  #L12014c.  v0:= lcmp(v12, v0);
  #L120150.  if v0 != 0 then goto L120162;
  #L120154.  v0:= 48I;
  #L120158.  call temp:= `b`(v11, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L12015e.  v11:= temp @kind object;
  #L120160.  return v11 @kind object;
  #L120162.  v0:= 0I;
  #L120164.  v2:= 0L;
  #L120168.  v1:= lcmp(v12, v2);
  #L12016c.  if v1 >= 0 then goto L12038a;
  #L120170.  v2:= -v12 @kind long;
  #L120172.  v0:= 0L;
  #L120176.  v0:= lcmp(v2, v0);
  #L12017a.  if v0 >= 0 then goto L12018c;
  #L12017e.  v0:= "-9223372036854775808" @kind object;
  #L120182.  call temp:= `a`(v11, v0) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @kind virtual;
  #L120188.  v11:= temp @kind object;
  #L12018a.  goto L120160;
  #L12018c.  v0:= 1I;
  #L12018e.  v4:= v0;
  #L120190.  v0:= 100000000L;
  #L120196.  v0:= lcmp(v2, v0);
  #L12019a.  if v0 >= 0 then goto L120260;
  #L12019e.  v0:= 10000L;
  #L1201a2.  v0:= lcmp(v2, v0);
  #L1201a6.  if v0 >= 0 then goto L120224;
  #L1201aa.  v0:= 100L;
  #L1201ae.  v0:= lcmp(v2, v0);
  #L1201b2.  if v0 >= 0 then goto L120210;
  #L1201b6.  v0:= 10L;
  #L1201ba.  v0:= lcmp(v2, v0);
  #L1201be.  if v0 >= 0 then goto L12020c;
  #L1201c2.  v0:= 1I;
  #L1201c4.  if v4 == 0 then goto L1201cc;
  #L1201c8.  v0:= v0 + 1;
  #L1201cc.  call temp:= `e`(v11, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L1201d2.  v5:= temp @kind object;
  #L1201d4.  v6:= v5.`b.n.a` @type ^`byte`[] @kind object;
  #L1201d8.  v1:= v5.`b.n.c` @type ^`int`;
  #L1201dc.  v1:= v1 + v0 @kind int;
  #L1201de.  v8:= 0L;
  #L1201e2.  v7:= lcmp(v2, v8);
  #L1201e6.  if v7 == 0 then goto L120360;
  #L1201ea.  v8:= 10L;
  #L1201ee.  v8:= v2 %% v8 @kind long;
  #L1201f2.  v7:= (`int`) v8 @kind l2i;
  #L1201f4.  v1:= v1 + -1;
  #L1201f8.  v8:= `@@b.c.c` @type ^`byte`[] @kind object;
  #L1201fc.  v7:= v8[v7] @kind byte;
  #L120200.  v6[v1]:= v7 @kind byte;
  #L120204.  v8:= 10L;
  #L120208.  v2:= v2 / v8 @kind long;
  #L12020a.  goto L1201de;
  #L12020c.  v0:= 2I;
  #L12020e.  goto L1201c4;
  #L120210.  v0:= 1000L;
  #L120214.  v0:= lcmp(v2, v0);
  #L120218.  if v0 >= 0 then goto L120220;
  #L12021c.  v0:= 3I;
  #L12021e.  goto L1201c4;
  #L120220.  v0:= 4I;
  #L120222.  goto L1201c4;
  #L120224.  v0:= 1000000L;
  #L12022a.  v0:= lcmp(v2, v0);
  #L12022e.  if v0 >= 0 then goto L120248;
  #L120232.  v0:= 100000L;
  #L120238.  v0:= lcmp(v2, v0);
  #L12023c.  if v0 >= 0 then goto L120244;
  #L120240.  v0:= 5I;
  #L120242.  goto L1201c4;
  #L120244.  v0:= 6I;
  #L120246.  goto L1201c4;
  #L120248.  v0:= 10000000L;
  #L12024e.  v0:= lcmp(v2, v0);
  #L120252.  if v0 >= 0 then goto L12025a;
  #L120256.  v0:= 7I;
  #L120258.  goto L1201c4;
  #L12025a.  v0:= 8I;
  #L12025e.  goto L1201c4;
  #L120260.  v0:= 1000000000000L;
  #L12026a.  v0:= lcmp(v2, v0);
  #L12026e.  if v0 >= 0 then goto L1202bc;
  #L120272.  v0:= 10000000000L;
  #L12027c.  v0:= lcmp(v2, v0);
  #L120280.  if v0 >= 0 then goto L12029e;
  #L120284.  v0:= 1000000000L;
  #L12028a.  v0:= lcmp(v2, v0);
  #L12028e.  if v0 >= 0 then goto L120298;
  #L120292.  v0:= 9I;
  #L120296.  goto L1201c4;
  #L120298.  v0:= 10I;
  #L12029c.  goto L1201c4;
  #L12029e.  v0:= 100000000000L;
  #L1202a8.  v0:= lcmp(v2, v0);
  #L1202ac.  if v0 >= 0 then goto L1202b6;
  #L1202b0.  v0:= 11I;
  #L1202b4.  goto L1201c4;
  #L1202b6.  v0:= 12I;
  #L1202ba.  goto L1201c4;
  #L1202bc.  v0:= 1000000000000000L;
  #L1202c6.  v0:= lcmp(v2, v0);
  #L1202ca.  if v0 >= 0 then goto L12030a;
  #L1202ce.  v0:= 10000000000000L;
  #L1202d8.  v0:= lcmp(v2, v0);
  #L1202dc.  if v0 >= 0 then goto L1202e8;
  #L1202e0.  v0:= 13I;
  #L1202e4.  goto L1201c4;
  #L1202e8.  v0:= 100000000000000L;
  #L1202f2.  v0:= lcmp(v2, v0);
  #L1202f6.  if v0 >= 0 then goto L120302;
  #L1202fa.  v0:= 14I;
  #L1202fe.  goto L1201c4;
  #L120302.  v0:= 15I;
  #L120306.  goto L1201c4;
  #L12030a.  v0:= 100000000000000000L;
  #L120314.  v0:= lcmp(v2, v0);
  #L120318.  if v0 >= 0 then goto L12033e;
  #L12031c.  v0:= 10000000000000000L;
  #L120326.  v0:= lcmp(v2, v0);
  #L12032a.  if v0 >= 0 then goto L120336;
  #L12032e.  v0:= 16I;
  #L120332.  goto L1201c4;
  #L120336.  v0:= 17I;
  #L12033a.  goto L1201c4;
  #L12033e.  v0:= 1000000000000000000L;
  #L120348.  v0:= lcmp(v2, v0);
  #L12034c.  if v0 >= 0 then goto L120358;
  #L120350.  v0:= 18I;
  #L120354.  goto L1201c4;
  #L120358.  v0:= 19I;
  #L12035c.  goto L1201c4;
  #L120360.  if v4 == 0 then goto L120370;
  #L120364.  v1:= v1 + -1;
  #L120368.  v2:= 45I;
  #L12036c.  v6[v1]:= v2 @kind byte;
  #L120370.  v1:= v5.`b.n.c` @type ^`int`;
  #L120374.  v1:= v1 + v0 @kind int;
  #L120376.  v5.`b.n.c` @type ^`int` := v1;
  #L12037a.  v2:= v11.`b.c.b` @type ^`long` @kind wide;
  #L12037e.  v0:= (`long`) v0 @kind i2l;
  #L120380.  v0:= v0 + v2 @kind long;
  #L120382.  v11.`b.c.b` @type ^`long` := v0 @kind wide;
  #L120386.  goto L120160;
  #L12038a.  v4:= v0;
  #L12038c.  v2:= v12 @kind wide;
  #L12038e.  goto L120190;
}
procedure `b.d` `h`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.h:(I)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1203a4.  call temp:= `c`(v1, v2) @signature `Lb/c;.c:(I)Lb/c;` @kind virtual;
  #L1203aa.  v0:= temp @kind object;
  #L1203ac.  return v0 @kind object;
}
procedure `int` `hashCode`(`b.c` v5 @kind this) @signature `Lb/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1203c0.  v1:= v5.`b.c.a` @type ^`b.n` @kind object;
  #L1203c4.  if v1 != 0 then goto L1203cc;
  #L1203c8.  v0:= 0I;
  #L1203ca.  return v0;
  #L1203cc.  v0:= 1I;
  #L1203ce.  v2:= v1.`b.n.b` @type ^`int`;
  #L1203d2.  v4:= v1.`b.n.c` @type ^`int`;
  #L1203d6.  if v2 >= v4 then goto L1203f2;
  #L1203da.  v0:= v0 * 31;
  #L1203de.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L1203e2.  v3:= v3[v2] @kind byte;
  #L1203e6.  v3:= v3 + v0 @kind int;
  #L1203e8.  v0:= v2 + 1;
  #L1203ec.  v2:= v0;
  #L1203ee.  v0:= v3;
  #L1203f0.  goto L1203d6;
  #L1203f2.  v1:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L1203f6.  v2:= v5.`b.c.a` @type ^`b.n` @kind object;
  #L1203fa.  if v1 != v2 then goto L1203ce;
  #L1203fe.  goto L1203ca;
}
procedure `b.c` `i`(`b.c` v9 @kind this, `long` v10 ) @signature `Lb/c;.i:(J)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L120410.  v0:= 0L;
  #L120414.  v0:= lcmp(v10, v0);
  #L120418.  if v0 != 0 then goto L12042a;
  #L12041c.  v0:= 48I;
  #L120420.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L120426.  v9:= temp @kind object;
  #L120428.  return v9 @kind object;
  #L12042a.  call temp:= `highestOneBit`(v10) @signature `Ljava/lang/Long;.highestOneBit:(J)J` @kind static;
  #L120430.  v0:= temp @kind wide;
  #L120432.  call temp:= `numberOfTrailingZeros`(v0) @signature `Ljava/lang/Long;.numberOfTrailingZeros:(J)I` @kind static;
  #L120438.  v0:= temp;
  #L12043a.  v0:= v0 / 4;
  #L12043e.  v1:= v0 + 1;
  #L120442.  call temp:= `e`(v9, v1) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L120448.  v2:= temp @kind object;
  #L12044a.  v3:= v2.`b.n.a` @type ^`byte`[] @kind object;
  #L12044e.  v0:= v2.`b.n.c` @type ^`int`;
  #L120452.  v0:= v0 + v1 @kind int;
  #L120454.  v0:= v0 + -1;
  #L120458.  v4:= v2.`b.n.c` @type ^`int`;
  #L12045c.  if v0 < v4 then goto L12047e;
  #L120460.  v5:= `@@b.c.c` @type ^`byte`[] @kind object;
  #L120464.  v6:= 15L;
  #L120468.  v6:= v6 ^& v10 @kind long;
  #L12046a.  v6:= (`int`) v6 @kind l2i;
  #L12046c.  v5:= v5[v6] @kind byte;
  #L120470.  v3[v0]:= v5 @kind byte;
  #L120474.  v5:= 4I;
  #L120476.  v10:= v10 ^>> v5 @kind long;
  #L120478.  v0:= v0 + -1;
  #L12047c.  goto L12045c;
  #L12047e.  v0:= v2.`b.n.c` @type ^`int`;
  #L120482.  v0:= v0 + v1 @kind int;
  #L120484.  v2.`b.n.c` @type ^`int` := v0;
  #L120488.  v2:= v9.`b.c.b` @type ^`long` @kind wide;
  #L12048c.  v0:= (`long`) v1 @kind i2l;
  #L12048e.  v0:= v0 + v2 @kind long;
  #L120490.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L120494.  goto L120428;
}
procedure `b.d` `i`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.i:(I)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1204a8.  call temp:= `b`(v1, v2) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L1204ae.  v0:= temp @kind object;
  #L1204b0.  return v0 @kind object;
}
procedure `short` `i`(`b.c` v10 @kind this) @signature `Lb/c;.i:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1204c4.  v8:= 2L;
  #L1204c8.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L1204cc.  v0:= lcmp(v0, v8);
  #L1204d0.  if v0 >= 0 then goto L12050a;
  #L1204d4.  v0:= new `java.lang.IllegalStateException`;
  #L1204d8.  v1:= new `java.lang.StringBuilder`;
  #L1204dc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1204e2.  v2:= "size < 2: " @kind object;
  #L1204e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1204ec.  v1:= temp @kind object;
  #L1204ee.  v2:= v10.`b.c.b` @type ^`long` @kind wide;
  #L1204f2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1204f8.  v1:= temp @kind object;
  #L1204fa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L120500.  v1:= temp @kind object;
  #L120502.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120508.  throw v0;
  #L12050a.  v0:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L12050e.  v1:= v0.`b.n.b` @type ^`int`;
  #L120512.  v2:= v0.`b.n.c` @type ^`int`;
  #L120516.  v3:= v2 - v1 @kind int;
  #L12051a.  v4:= 2I;
  #L12051c.  if v3 >= v4 then goto L120542;
  #L120520.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L120526.  v0:= temp;
  #L120528.  v0:= v0 ^& 255;
  #L12052c.  v0:= v0 ^< 8;
  #L120530.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L120536.  v1:= temp;
  #L120538.  v1:= v1 ^& 255;
  #L12053c.  v0:= v0 ^| v1 @kind int;
  #L12053e.  v0:= (`short`) v0 @kind i2s;
  #L120540.  return v0;
  #L120542.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L120546.  v4:= v1 + 1;
  #L12054a.  v1:= v3[v1] @kind byte;
  #L12054e.  v1:= v1 ^& 255;
  #L120552.  v1:= v1 ^< 8;
  #L120556.  v5:= v4 + 1;
  #L12055a.  v3:= v3[v4] @kind byte;
  #L12055e.  v3:= v3 ^& 255;
  #L120562.  v1:= v1 ^| v3 @kind int;
  #L120564.  v6:= v10.`b.c.b` @type ^`long` @kind wide;
  #L120568.  v6:= v6 - v8 @kind long;
  #L12056a.  v10.`b.c.b` @type ^`long` := v6 @kind wide;
  #L12056e.  if v5 != v2 then goto L120588;
  #L120572.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L120578.  v2:= temp @kind object;
  #L12057a.  v10.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L12057e.  call `a`(v0) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L120584.  v0:= (`short`) v1 @kind i2s;
  #L120586.  goto L120540;
  #L120588.  v0.`b.n.b` @type ^`int` := v5;
  #L12058c.  goto L120584;
}
procedure `int` `j`(`b.c` v10 @kind this) @signature `Lb/c;.j:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L1205a0.  v8:= 4L;
  #L1205a4.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L1205a8.  v0:= lcmp(v0, v8);
  #L1205ac.  if v0 >= 0 then goto L1205e6;
  #L1205b0.  v0:= new `java.lang.IllegalStateException`;
  #L1205b4.  v1:= new `java.lang.StringBuilder`;
  #L1205b8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1205be.  v2:= "size < 4: " @kind object;
  #L1205c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1205c8.  v1:= temp @kind object;
  #L1205ca.  v2:= v10.`b.c.b` @type ^`long` @kind wide;
  #L1205ce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1205d4.  v1:= temp @kind object;
  #L1205d6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1205dc.  v1:= temp @kind object;
  #L1205de.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1205e4.  throw v0;
  #L1205e6.  v1:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L1205ea.  v0:= v1.`b.n.b` @type ^`int`;
  #L1205ee.  v2:= v1.`b.n.c` @type ^`int`;
  #L1205f2.  v3:= v2 - v0 @kind int;
  #L1205f6.  v4:= 4I;
  #L1205f8.  if v3 >= v4 then goto L120640;
  #L1205fc.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L120602.  v0:= temp;
  #L120604.  v0:= v0 ^& 255;
  #L120608.  v0:= v0 ^< 24;
  #L12060c.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L120612.  v1:= temp;
  #L120614.  v1:= v1 ^& 255;
  #L120618.  v1:= v1 ^< 16;
  #L12061c.  v0:= v0 ^| v1 @kind int;
  #L12061e.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L120624.  v1:= temp;
  #L120626.  v1:= v1 ^& 255;
  #L12062a.  v1:= v1 ^< 8;
  #L12062e.  v0:= v0 ^| v1 @kind int;
  #L120630.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L120636.  v1:= temp;
  #L120638.  v1:= v1 ^& 255;
  #L12063c.  v0:= v0 ^| v1 @kind int;
  #L12063e.  return v0;
  #L120640.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L120644.  v4:= v0 + 1;
  #L120648.  v0:= v3[v0] @kind byte;
  #L12064c.  v0:= v0 ^& 255;
  #L120650.  v0:= v0 ^< 24;
  #L120654.  v5:= v4 + 1;
  #L120658.  v4:= v3[v4] @kind byte;
  #L12065c.  v4:= v4 ^& 255;
  #L120660.  v4:= v4 ^< 16;
  #L120664.  v0:= v0 ^| v4 @kind int;
  #L120666.  v4:= v5 + 1;
  #L12066a.  v5:= v3[v5] @kind byte;
  #L12066e.  v5:= v5 ^& 255;
  #L120672.  v5:= v5 ^< 8;
  #L120676.  v0:= v0 ^| v5 @kind int;
  #L120678.  v5:= v4 + 1;
  #L12067c.  v3:= v3[v4] @kind byte;
  #L120680.  v3:= v3 ^& 255;
  #L120684.  v0:= v0 ^| v3 @kind int;
  #L120686.  v6:= v10.`b.c.b` @type ^`long` @kind wide;
  #L12068a.  v6:= v6 - v8 @kind long;
  #L12068c.  v10.`b.c.b` @type ^`long` := v6 @kind wide;
  #L120690.  if v5 != v2 then goto L1206a8;
  #L120694.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L12069a.  v2:= temp @kind object;
  #L12069c.  v10.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L1206a0.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L1206a6.  goto L12063e;
  #L1206a8.  v1.`b.n.b` @type ^`int` := v5;
  #L1206ac.  goto L12063e;
}
procedure `b.d` `j`(`b.c` v1 @kind this, `long` v2 ) @signature `Lb/c;.j:(J)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1206c0.  call temp:= `i`(v1, v2) @signature `Lb/c;.i:(J)Lb/c;` @kind virtual;
  #L1206c6.  v0:= temp @kind object;
  #L1206c8.  return v0 @kind object;
}
procedure `b.d` `k`(`b.c` v1 @kind this, `long` v2 ) @signature `Lb/c;.k:(J)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L1206dc.  call temp:= `h`(v1, v2) @signature `Lb/c;.h:(J)Lb/c;` @kind virtual;
  #L1206e2.  v0:= temp @kind object;
  #L1206e4.  return v0 @kind object;
}
procedure `short` `k`(`b.c` v1 @kind this) @signature `Lb/c;.k:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1206f8.  call temp:= `i`(v1) @signature `Lb/c;.i:()S` @kind virtual;
  #L1206fe.  v0:= temp;
  #L120700.  call temp:= `a`(v0) @signature `Lb/t;.a:(S)S` @kind static;
  #L120706.  v0:= temp;
  #L120708.  return v0;
}
procedure `int` `l`(`b.c` v1 @kind this) @signature `Lb/c;.l:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L12071c.  call temp:= `j`(v1) @signature `Lb/c;.j:()I` @kind virtual;
  #L120722.  v0:= temp;
  #L120724.  call temp:= `a`(v0) @signature `Lb/t;.a:(I)I` @kind static;
  #L12072a.  v0:= temp;
  #L12072c.  return v0;
}
procedure `long` `m`(`b.c` v18 @kind this) @signature `Lb/c;.m:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L120740.  v0:= v18 @kind object;
  #L120744.  v2:= v0.`b.c.b` @type ^`long` @kind wide;
  #L120748.  v4:= 0L;
  #L12074c.  v2:= lcmp(v2, v4);
  #L120750.  if v2 != 0 then goto L120764;
  #L120754.  v2:= new `java.lang.IllegalStateException`;
  #L120758.  v3:= "size == 0" @kind object;
  #L12075c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120762.  throw v2;
  #L120764.  v4:= 0L;
  #L120768.  v3:= 0I;
  #L12076a.  v2:= 0I;
  #L12076c.  v0:= v18 @kind object;
  #L120770.  v10:= v0.`b.c.a` @type ^`b.n` @kind object;
  #L120774.  v11:= v10.`b.n.a` @type ^`byte`[] @kind object;
  #L120778.  v6:= v10.`b.n.b` @type ^`int`;
  #L12077c.  v12:= v10.`b.n.c` @type ^`int`;
  #L120780.  v7:= v6;
  #L120782.  if v7 >= v12 then goto L120878;
  #L120786.  v8:= v11[v7] @kind byte;
  #L12078a.  v6:= 48I;
  #L12078e.  if v8 < v6 then goto L120804;
  #L120792.  v6:= 57I;
  #L120796.  if v8 > v6 then goto L120804;
  #L12079a.  v6:= v8 + -48;
  #L12079e.  v14:= -3.105036184601418E231D;
  #L1207a2.  v14:= v14 ^& v4 @kind long;
  #L1207a4.  v16:= 0L;
  #L1207a8.  v9:= lcmp(v14, v16);
  #L1207ac.  if v9 == 0 then goto L1208ba;
  #L1207b0.  v2:= new `b.c`;
  #L1207b4.  call `<init>`(v2) @signature `Lb/c;.<init>:()V` @kind direct;
  #L1207ba.  call temp:= `i`(v2, v4) @signature `Lb/c;.i:(J)Lb/c;` @kind virtual;
  #L1207c0.  v2:= temp @kind object;
  #L1207c2.  call temp:= `b`(v2, v8) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L1207c8.  v2:= temp @kind object;
  #L1207ca.  v3:= new `java.lang.NumberFormatException`;
  #L1207ce.  v4:= new `java.lang.StringBuilder`;
  #L1207d2.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1207d8.  v5:= "Number too large: " @kind object;
  #L1207dc.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1207e2.  v4:= temp @kind object;
  #L1207e4.  call temp:= `o`(v2) @signature `Lb/c;.o:()Ljava/lang/String;` @kind virtual;
  #L1207ea.  v2:= temp @kind object;
  #L1207ec.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1207f2.  v2:= temp @kind object;
  #L1207f4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1207fa.  v2:= temp @kind object;
  #L1207fc.  call `<init>`(v3, v2) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120802.  throw v3;
  #L120804.  v6:= 97I;
  #L120808.  if v8 < v6 then goto L12081e;
  #L12080c.  v6:= 102I;
  #L120810.  if v8 > v6 then goto L12081e;
  #L120814.  v6:= v8 + -97;
  #L120818.  v6:= v6 + 10;
  #L12081c.  goto L12079e;
  #L12081e.  v6:= 65I;
  #L120822.  if v8 < v6 then goto L120838;
  #L120826.  v6:= 70I;
  #L12082a.  if v8 > v6 then goto L120838;
  #L12082e.  v6:= v8 + -65;
  #L120832.  v6:= v6 + 10;
  #L120836.  goto L12079e;
  #L120838.  if v3 != 0 then goto L120876;
  #L12083c.  v2:= new `java.lang.NumberFormatException`;
  #L120840.  v3:= new `java.lang.StringBuilder`;
  #L120844.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12084a.  v4:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L12084e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L120854.  v3:= temp @kind object;
  #L120856.  call temp:= `toHexString`(v8) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L12085c.  v4:= temp @kind object;
  #L12085e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L120864.  v3:= temp @kind object;
  #L120866.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12086c.  v3:= temp @kind object;
  #L12086e.  call `<init>`(v2, v3) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120874.  throw v2;
  #L120876.  v2:= 1I;
  #L120878.  if v7 != v12 then goto L1208d2;
  #L12087c.  call temp:= `a`(v10) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L120882.  v6:= temp @kind object;
  #L120884.  v0:= v18 @kind object;
  #L120888.  v0.`b.c.a` @type ^`b.n` := v6 @kind object;
  #L12088c.  call `a`(v10) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L120892.  if v2 != 0 then goto L1208a2;
  #L120896.  v0:= v18 @kind object;
  #L12089a.  v6:= v0.`b.c.a` @type ^`b.n` @kind object;
  #L12089e.  if v6 != 0 then goto L12076c;
  #L1208a2.  v0:= v18 @kind object;
  #L1208a6.  v6:= v0.`b.c.b` @type ^`long` @kind wide;
  #L1208aa.  v2:= (`long`) v3 @kind i2l;
  #L1208ac.  v2:= v6 - v2 @kind long;
  #L1208b0.  v0:= v18 @kind object;
  #L1208b4.  v0.`b.c.b` @type ^`long` := v2 @kind wide;
  #L1208b8.  return v4 @kind wide;
  #L1208ba.  v8:= 4I;
  #L1208bc.  v4:= v4 ^< v8 @kind long;
  #L1208be.  v8:= (`long`) v6 @kind i2l;
  #L1208c0.  v8:= v8 ^| v4 @kind long;
  #L1208c2.  v4:= v7 + 1;
  #L1208c6.  v3:= v3 + 1;
  #L1208ca.  v7:= v4;
  #L1208cc.  v4:= v8 @kind wide;
  #L1208ce.  goto L120782;
  #L1208d2.  v10.`b.n.b` @type ^`int` := v7;
  #L1208d6.  goto L120892;
}
procedure `b.f` `n`(`b.c` v2 @kind this) @signature `Lb/c;.n:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1208e8.  v0:= new `b.f`;
  #L1208ec.  call temp:= `q`(v2) @signature `Lb/c;.q:()[B` @kind virtual;
  #L1208f2.  v1:= temp @kind object;
  #L1208f4.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L1208fa.  return v0 @kind object;
}
procedure `java.lang.String` `o`(`b.c` v3 @kind this) @signature `Lb/c;.o:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L12090c.  v0:= v3.`b.c.b` @type ^`long` @kind wide;
  #L120910.  v2:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L120914.  call temp:= `a`(v3, v0, v2) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L12091a.  v0:= temp @kind object;
  #L12091c.  return v0 @kind object;
  #L12091e.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L120920.  v1:= new `java.lang.AssertionError`;
  #L120924.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L12092a.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L12091e;
}
procedure `java.lang.String` `p`(`b.c` v8 @kind this) @signature `Lb/c;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L12094c.  v0:= 10I;
  #L120950.  call temp:= `a`(v8, v0) @signature `Lb/c;.a:(B)J` @kind virtual;
  #L120956.  v0:= temp @kind wide;
  #L120958.  v2:= -1L;
  #L12095c.  v2:= lcmp(v0, v2);
  #L120960.  if v2 != 0 then goto L1209f4;
  #L120964.  v1:= new `b.c`;
  #L120968.  call `<init>`(v1) @signature `Lb/c;.<init>:()V` @kind direct;
  #L12096e.  v2:= 0L;
  #L120972.  v4:= 32L;
  #L120976.  v6:= v8.`b.c.b` @type ^`long` @kind wide;
  #L12097a.  call temp:= `min`(v4, v6) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L120980.  v4:= temp @kind wide;
  #L120982.  v0:= v8 @kind object;
  #L120984.  call temp:= `a`(v0, v1, v2, v4) @signature `Lb/c;.a:(Lb/c;JJ)Lb/c;` @kind virtual;
  #L12098a.  v0:= new `java.io.EOFException`;
  #L12098e.  v2:= new `java.lang.StringBuilder`;
  #L120992.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L120998.  v3:= "\\n not found: size=" @kind object;
  #L12099c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1209a2.  v2:= temp @kind object;
  #L1209a4.  call temp:= `b`(v8) @signature `Lb/c;.b:()J` @kind virtual;
  #L1209aa.  v4:= temp @kind wide;
  #L1209ac.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1209b2.  v2:= temp @kind object;
  #L1209b4.  v3:= " content=" @kind object;
  #L1209b8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1209be.  v2:= temp @kind object;
  #L1209c0.  call temp:= `n`(v1) @signature `Lb/c;.n:()Lb/f;` @kind virtual;
  #L1209c6.  v1:= temp @kind object;
  #L1209c8.  call temp:= `e`(v1) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L1209ce.  v1:= temp @kind object;
  #L1209d0.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1209d6.  v1:= temp @kind object;
  #L1209d8.  v2:= "…" @kind object;
  #L1209dc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1209e2.  v1:= temp @kind object;
  #L1209e4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1209ea.  v1:= temp @kind object;
  #L1209ec.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1209f2.  throw v0;
  #L1209f4.  call temp:= `e`(v8, v0) @signature `Lb/c;.e:(J)Ljava/lang/String;` @kind virtual;
  #L1209fa.  v0:= temp @kind object;
  #L1209fc.  return v0 @kind object;
}
procedure `byte`[] `q`(`b.c` v2 @kind this) @signature `Lb/c;.q:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L120a10.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L120a14.  call temp:= `f`(v2, v0) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #Try_end0.  
  #L120a1a.  v0:= temp @kind object;
  #L120a1c.  return v0 @kind object;
  #L120a1e.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L120a20.  v1:= new `java.lang.AssertionError`;
  #L120a24.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L120a2a.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L120a1e;
}
procedure `void` `r`(`b.c` v2 @kind this) @signature `Lb/c;.r:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L120a4c.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L120a50.  call `g`(v2, v0) @signature `Lb/c;.g:(J)V` @kind virtual;
  #Try_end0.  
  #L120a56.  return @kind void;
  #L120a58.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L120a5a.  v1:= new `java.lang.AssertionError`;
  #L120a5e.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L120a64.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L120a58;
}
procedure `b.c` `s`(`b.c` v6 @kind this) @signature `Lb/c;.s:()Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L120a88.  v1:= new `b.c`;
  #L120a8c.  call `<init>`(v1) @signature `Lb/c;.<init>:()V` @kind direct;
  #L120a92.  v2:= v6.`b.c.b` @type ^`long` @kind wide;
  #L120a96.  v4:= 0L;
  #L120a9a.  v0:= lcmp(v2, v4);
  #L120a9e.  if v0 != 0 then goto L120aa6;
  #L120aa2.  v0:= v1 @kind object;
  #L120aa4.  return v0 @kind object;
  #L120aa6.  v0:= new `b.n`;
  #L120aaa.  v2:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L120aae.  call `<init>`(v0, v2) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L120ab4.  v1.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L120ab8.  v0:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L120abc.  v2:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L120ac0.  v3:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L120ac4.  v2.`b.n.g` @type ^`b.n` := v3 @kind object;
  #L120ac8.  v0.`b.n.f` @type ^`b.n` := v3 @kind object;
  #L120acc.  v0:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L120ad0.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L120ad4.  v2:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L120ad8.  if v0 == v2 then goto L120afa;
  #L120adc.  v2:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L120ae0.  v2:= v2.`b.n.g` @type ^`b.n` @kind object;
  #L120ae4.  v3:= new `b.n`;
  #L120ae8.  call `<init>`(v3, v0) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L120aee.  call temp:= `a`(v2, v3) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L120af4.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L120af8.  goto L120ad4;
  #L120afa.  v2:= v6.`b.c.b` @type ^`long` @kind wide;
  #L120afe.  v1.`b.c.b` @type ^`long` := v2 @kind wide;
  #L120b02.  v0:= v1 @kind object;
  #L120b04.  goto L120aa4;
}
procedure `b.f` `t`(`b.c` v4 @kind this) @signature `Lb/c;.t:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L120b18.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L120b1c.  v2:= 2147483647L;
  #L120b22.  v0:= lcmp(v0, v2);
  #L120b26.  if v0 <= 0 then goto L120b60;
  #L120b2a.  v0:= new `java.lang.IllegalArgumentException`;
  #L120b2e.  v1:= new `java.lang.StringBuilder`;
  #L120b32.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L120b38.  v2:= "size > Integer.MAX_VALUE: " @kind object;
  #L120b3c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L120b42.  v1:= temp @kind object;
  #L120b44.  v2:= v4.`b.c.b` @type ^`long` @kind wide;
  #L120b48.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L120b4e.  v1:= temp @kind object;
  #L120b50.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L120b56.  v1:= temp @kind object;
  #L120b58.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L120b5e.  throw v0;
  #L120b60.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L120b64.  v0:= (`int`) v0 @kind l2i;
  #L120b66.  call temp:= `f`(v4, v0) @signature `Lb/c;.f:(I)Lb/f;` @kind virtual;
  #L120b6c.  v0:= temp @kind object;
  #L120b6e.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`b.c` v1 @kind this) @signature `Lb/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L120b80.  call temp:= `t`(v1) @signature `Lb/c;.t:()Lb/f;` @kind virtual;
  #L120b86.  v0:= temp @kind object;
  #L120b88.  call temp:= `toString`(v0) @signature `Lb/f;.toString:()Ljava/lang/String;` @kind virtual;
  #L120b8e.  v0:= temp @kind object;
  #L120b90.  return v0 @kind object;
}
procedure `b.d` `u`(`b.c` v1 @kind this) @signature `Lb/c;.u:()Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L120ba4.  call temp:= `d`(v1) @signature `Lb/c;.d:()Lb/c;` @kind virtual;
  #L120baa.  v0:= temp @kind object;
  #L120bac.  return v0 @kind object;
}
