record `b.a` @kind class @AccessFlag PUBLIC extends `b.s` @kind class {
  `boolean` `b.a.e` @AccessFlag PRIVATE;
  `b.a` `b.a.f` @AccessFlag PRIVATE;
  `long` `b.a.g` @AccessFlag PRIVATE;
}
global `long` `@@b.a.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@b.a.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `b.a` `@@b.a.d` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lb/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L085718.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L08571c.  v2:= 60L;
  #L085720.  call temp:= `toMillis`(v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L085726.  v0:= temp @kind wide;
  #L085728.  `@@b.a.a` @type ^`long` := v0 @kind wide;
  #L08572c.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L085730.  v2:= `@@b.a.a` @type ^`long` @kind wide;
  #L085734.  call temp:= `toNanos`(v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L08573a.  v0:= temp @kind wide;
  #L08573c.  `@@b.a.c` @type ^`long` := v0 @kind wide;
  #L085740.  return @kind void;
}
procedure `void` `<init>`(`b.a` v0 @kind this) @signature `Lb/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L085754.  call `<init>`(v0) @signature `Lb/s;.<init>:()V` @kind direct;
  #L08575a.  return @kind void;
}
procedure `b.a` `a`(`b.a` v0 @kind object) @signature `Lb/a;.a:(Lb/a;)Lb/a;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L08576c.  `@@b.a.d` @type ^`b.a` := v0 @kind object;
  #L085770.  return v0 @kind object;
}
procedure `void` `a`(`b.a` v9 @kind object, `long` v10 , `boolean` v12 ) @signature `Lb/a;.a:(Lb/a;JZ)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L085784.  v4:= 0L;
  #L085788.  v1:= constclass @type ^`b.a` @kind object;
  #L08578c.  @monitorenter v1
  #Try_start0.  
  #L08578e.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L085792.  if v0 != 0 then goto L0857b4;
  #L085796.  v0:= new `b.a`;
  #L08579a.  call `<init>`(v0) @signature `Lb/a;.<init>:()V` @kind direct;
  #L0857a0.  `@@b.a.d` @type ^`b.a` := v0 @kind object;
  #L0857a4.  v0:= new `b.a$a`;
  #L0857a8.  call `<init>`(v0) @signature `Lb/a$a;.<init>:()V` @kind direct;
  #L0857ae.  call `start`(v0) @signature `Lb/a$a;.start:()V` @kind virtual;
  #L0857b4.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L0857ba.  v2:= temp @kind wide;
  #L0857bc.  v0:= lcmp(v10, v4);
  #L0857c0.  if v0 == 0 then goto L08582a;
  #L0857c4.  if v12 == 0 then goto L08582a;
  #L0857c8.  call temp:= `d`(v9) @signature `Lb/a;.d:()J` @kind virtual;
  #L0857ce.  v4:= temp @kind wide;
  #L0857d0.  v4:= v4 - v2 @kind long;
  #L0857d2.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L0857d8.  v4:= temp @kind wide;
  #L0857da.  v4:= v4 + v2 @kind long;
  #L0857dc.  v9.`b.a.g` @type ^`long` := v4 @kind wide;
  #L0857e0.  call temp:= `b`(v9, v2) @signature `Lb/a;.b:(J)J` @kind direct;
  #L0857e6.  v4:= temp @kind wide;
  #L0857e8.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L0857ec.  v6:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L0857f0.  if v6 == 0 then goto L085808;
  #L0857f4.  v6:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L0857f8.  call temp:= `b`(v6, v2) @signature `Lb/a;.b:(J)J` @kind direct;
  #L0857fe.  v6:= temp @kind wide;
  #L085800.  v6:= lcmp(v4, v6);
  #L085804.  if v6 >= 0 then goto L085860;
  #L085808.  v2:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L08580c.  v9.`b.a.f` @type ^`b.a` := v2 @kind object;
  #L085810.  v0.`b.a.f` @type ^`b.a` := v9 @kind object;
  #L085814.  v2:= `@@b.a.d` @type ^`b.a` @kind object;
  #L085818.  if v0 != v2 then goto L085826;
  #L08581c.  v0:= constclass @type ^`b.a` @kind object;
  #L085820.  call `notify`(v0) @signature `Ljava/lang/Object;.notify:()V` @kind virtual;
  #Try_end0.  
  #L085826.  @monitorexit v1
  #L085828.  return @kind void;
  #L08582a.  v0:= lcmp(v10, v4);
  #L08582e.  if v0 == 0 then goto L085842;
  #L085832.  v4:= v2 + v10 @kind long;
  #Try_start1.  
  #L085836.  v9.`b.a.g` @type ^`long` := v4 @kind wide;
  #Try_end1.  
  #L08583a.  goto L0857e0;
  #L08583c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08583e.  @monitorexit v1
  #L085840.  throw v0;
  #L085842.  if v12 == 0 then goto L085854;
  #Try_start2.  
  #L085846.  call temp:= `d`(v9) @signature `Lb/a;.d:()J` @kind virtual;
  #L08584c.  v4:= temp @kind wide;
  #L08584e.  v9.`b.a.g` @type ^`long` := v4 @kind wide;
  #L085852.  goto L0857e0;
  #L085854.  v0:= new `java.lang.AssertionError`;
  #L085858.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L08585e.  throw v0;
  #L085860.  v0:= v0.`b.a.f` @type ^`b.a` @kind object;
  #Try_end2.  
  #L085864.  goto L0857ec;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08583c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08583c;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L08583c;
}
procedure `long` `b`(`b.a` v3 @kind this, `long` v4 ) @signature `Lb/a;.b:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L085894.  v0:= v3.`b.a.g` @type ^`long` @kind wide;
  #L085898.  v0:= v0 - v4 @kind long;
  #L08589a.  return v0 @kind wide;
}
procedure `boolean` `b`(`b.a` v3 @kind object) @signature `Lb/a;.b:(Lb/a;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L0858ac.  v1:= constclass @type ^`b.a` @kind object;
  #L0858b0.  @monitorenter v1
  #Try_start0.  
  #L0858b2.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L0858b6.  if v0 == 0 then goto L0858dc;
  #L0858ba.  v2:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L0858be.  if v2 != v3 then goto L0858d6;
  #L0858c2.  v2:= v3.`b.a.f` @type ^`b.a` @kind object;
  #L0858c6.  v0.`b.a.f` @type ^`b.a` := v2 @kind object;
  #L0858ca.  v0:= 0I;
  #L0858cc.  v3.`b.a.f` @type ^`b.a` := v0 @kind object;
  #Try_end0.  
  #L0858d0.  v0:= 0I;
  #L0858d2.  @monitorexit v1
  #L0858d4.  return v0;
  #Try_start1.  
  #L0858d6.  v0:= v0.`b.a.f` @type ^`b.a` @kind object;
  #Try_end1.  
  #L0858da.  goto L0858b6;
  #L0858dc.  v0:= 1I;
  #L0858de.  goto L0858d2;
  #L0858e0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0858e2.  @monitorexit v1
  #L0858e4.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0858e0;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0858e0;
}
procedure `b.a` `e`() @signature `Lb/a;.e:()Lb/a;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L08590c.  v6:= 1000000L;
  #L085912.  v0:= 0I;
  #L085914.  v1:= `@@b.a.d` @type ^`b.a` @kind object;
  #L085918.  v1:= v1.`b.a.f` @type ^`b.a` @kind object;
  #L08591c.  if v1 != 0 then goto L085960;
  #L085920.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L085926.  v2:= temp @kind wide;
  #L085928.  v1:= constclass @type ^`b.a` @kind object;
  #L08592c.  v4:= `@@b.a.a` @type ^`long` @kind wide;
  #L085930.  call `wait`(v1, v4) @signature `Ljava/lang/Object;.wait:(J)V` @kind virtual;
  #L085936.  v1:= `@@b.a.d` @type ^`b.a` @kind object;
  #L08593a.  v1:= v1.`b.a.f` @type ^`b.a` @kind object;
  #L08593e.  if v1 != 0 then goto L08595e;
  #L085942.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L085948.  v4:= temp @kind wide;
  #L08594a.  v2:= v4 - v2 @kind long;
  #L08594e.  v4:= `@@b.a.c` @type ^`long` @kind wide;
  #L085952.  v1:= lcmp(v2, v4);
  #L085956.  if v1 < 0 then goto L08595e;
  #L08595a.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L08595e.  return v0 @kind object;
  #L085960.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L085966.  v2:= temp @kind wide;
  #L085968.  call temp:= `b`(v1, v2) @signature `Lb/a;.b:(J)J` @kind direct;
  #L08596e.  v2:= temp @kind wide;
  #L085970.  v4:= 0L;
  #L085974.  v4:= lcmp(v2, v4);
  #L085978.  if v4 <= 0 then goto L085992;
  #L08597c.  v4:= v2 / v6 @kind long;
  #L085980.  v6:= v6 * v4 @kind long;
  #L085982.  v2:= v2 - v6 @kind long;
  #L085984.  v1:= constclass @type ^`b.a` @kind object;
  #L085988.  v2:= (`int`) v2 @kind l2i;
  #L08598a.  call `wait`(v1, v4, v2) @signature `Ljava/lang/Object;.wait:(JI)V` @kind virtual;
  #L085990.  goto L08595e;
  #L085992.  v2:= `@@b.a.d` @type ^`b.a` @kind object;
  #L085996.  v3:= v1.`b.a.f` @type ^`b.a` @kind object;
  #L08599a.  v2.`b.a.f` @type ^`b.a` := v3 @kind object;
  #L08599e.  v1.`b.a.f` @type ^`b.a` := v0 @kind object;
  #L0859a2.  v0:= v1 @kind object;
  #L0859a4.  goto L08595e;
}
procedure `b.a` `f`() @signature `Lb/a;.f:()Lb/a;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L0859b8.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L0859bc.  return v0 @kind object;
}
procedure `b.q` `a`(`b.a` v1 @kind this, `b.q` v2 @kind object) @signature `Lb/a;.a:(Lb/q;)Lb/q;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0859d0.  v0:= new `b.a$1`;
  #L0859d4.  call `<init>`(v0, v1, v2) @signature `Lb/a$1;.<init>:(Lb/a;Lb/q;)V` @kind direct;
  #L0859da.  return v0 @kind object;
}
procedure `b.r` `a`(`b.a` v1 @kind this, `b.r` v2 @kind object) @signature `Lb/a;.a:(Lb/r;)Lb/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0859ec.  v0:= new `b.a$2`;
  #L0859f0.  call `<init>`(v0, v1, v2) @signature `Lb/a$2;.<init>:(Lb/a;Lb/r;)V` @kind direct;
  #L0859f6.  return v0 @kind object;
}
procedure `java.io.IOException` `a`(`b.a` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lb/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L085a08.  v0:= new `java.io.InterruptedIOException`;
  #L085a0c.  v1:= "timeout" @kind object;
  #L085a10.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L085a16.  if v3 == 0 then goto L085a20;
  #L085a1a.  call temp:= `initCause`(v0, v3) @signature `Ljava/io/InterruptedIOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L085a20.  return v0 @kind object;
}
procedure `void` `a`(`b.a` v0 @kind this) @signature `Lb/a;.a:()V` @AccessFlag PROTECTED {
    temp;

  #L085a34.  return @kind void;
}
procedure `void` `a`(`b.a` v1 @kind this, `boolean` v2 ) @signature `Lb/a;.a:(Z)V` @AccessFlag FINAL {
    temp;
    v0;

  #L085a48.  call temp:= `a_`(v1) @signature `Lb/a;.a_:()Z` @kind virtual;
  #L085a4e.  v0:= temp;
  #L085a50.  if v0 == 0 then goto L085a64;
  #L085a54.  if v2 == 0 then goto L085a64;
  #L085a58.  v0:= 0I;
  #L085a5a.  call temp:= `a`(v1, v0) @signature `Lb/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L085a60.  v0:= temp @kind object;
  #L085a62.  throw v0;
  #L085a64.  return @kind void;
}
procedure `boolean` `a_`(`b.a` v2 @kind this) @signature `Lb/a;.a_:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L085a78.  v0:= 0I;
  #L085a7a.  v1:= v2.`b.a.e` @type ^`boolean` @kind boolean;
  #L085a7e.  if v1 != 0 then goto L085a84;
  #L085a82.  return v0;
  #L085a84.  v2.`b.a.e` @type ^`boolean` := v0 @kind boolean;
  #L085a88.  call temp:= `b`(v2) @signature `Lb/a;.b:(Lb/a;)Z` @kind static;
  #L085a8e.  v0:= temp;
  #L085a90.  goto L085a82;
}
procedure `java.io.IOException` `b`(`b.a` v1 @kind this, `java.io.IOException` v2 @kind object) @signature `Lb/a;.b:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag FINAL {
    temp;
    v0;

  #L085aa4.  call temp:= `a_`(v1) @signature `Lb/a;.a_:()Z` @kind virtual;
  #L085aaa.  v0:= temp;
  #L085aac.  if v0 != 0 then goto L085ab2;
  #L085ab0.  return v2 @kind object;
  #L085ab2.  call temp:= `a`(v1, v2) @signature `Lb/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L085ab8.  v2:= temp @kind object;
  #L085aba.  goto L085ab0;
}
procedure `void` `c`(`b.a` v6 @kind this) @signature `Lb/a;.c:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L085acc.  v0:= v6.`b.a.e` @type ^`boolean` @kind boolean;
  #L085ad0.  if v0 == 0 then goto L085ae4;
  #L085ad4.  v0:= new `java.lang.IllegalStateException`;
  #L085ad8.  v1:= "Unbalanced enter/exit" @kind object;
  #L085adc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L085ae2.  throw v0;
  #L085ae4.  call temp:= `b_`(v6) @signature `Lb/a;.b_:()J` @kind virtual;
  #L085aea.  v0:= temp @kind wide;
  #L085aec.  call temp:= `c_`(v6) @signature `Lb/a;.c_:()Z` @kind virtual;
  #L085af2.  v2:= temp;
  #L085af4.  v4:= 0L;
  #L085af8.  v3:= lcmp(v0, v4);
  #L085afc.  if v3 != 0 then goto L085b06;
  #L085b00.  if v2 != 0 then goto L085b06;
  #L085b04.  return @kind void;
  #L085b06.  v3:= 1I;
  #L085b08.  v6.`b.a.e` @type ^`boolean` := v3 @kind boolean;
  #L085b0c.  call `a`(v6, v0, v2) @signature `Lb/a;.a:(Lb/a;JZ)V` @kind static;
  #L085b12.  goto L085b04;
}
