record `b.n` @kind class @AccessFlag FINAL {
  `byte`[] `b.n.a` @AccessFlag FINAL;
  `int` `b.n.b` @AccessFlag ;
  `int` `b.n.c` @AccessFlag ;
  `boolean` `b.n.d` @AccessFlag ;
  `boolean` `b.n.e` @AccessFlag ;
  `b.n` `b.n.f` @AccessFlag ;
  `b.n` `b.n.g` @AccessFlag ;
}
procedure `void` `<init>`(`b.n` v1 @kind this) @signature `Lb/n;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L123164.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L12316a.  v0:= 8192I;
  #L12316e.  v0:= new `byte`[v0];
  #L123172.  v1.`b.n.a` @type ^`byte`[] := v0 @kind object;
  #L123176.  v0:= 1I;
  #L123178.  v1.`b.n.e` @type ^`boolean` := v0 @kind boolean;
  #L12317c.  v0:= 0I;
  #L12317e.  v1.`b.n.d` @type ^`boolean` := v0 @kind boolean;
  #L123182.  return @kind void;
}
procedure `void` `<init>`(`b.n` v3 @kind this, `b.n` v4 @kind object) @signature `Lb/n;.<init>:(Lb/n;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L123194.  v0:= v4.`b.n.a` @type ^`byte`[] @kind object;
  #L123198.  v1:= v4.`b.n.b` @type ^`int`;
  #L12319c.  v2:= v4.`b.n.c` @type ^`int`;
  #L1231a0.  call `<init>`(v3, v0, v1, v2) @signature `Lb/n;.<init>:([BII)V` @kind direct;
  #L1231a6.  v0:= 1I;
  #L1231a8.  v4.`b.n.d` @type ^`boolean` := v0 @kind boolean;
  #L1231ac.  return @kind void;
}
procedure `void` `<init>`(`b.n` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lb/n;.<init>:([BII)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L1231c0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1231c6.  v1.`b.n.a` @type ^`byte`[] := v2 @kind object;
  #L1231ca.  v1.`b.n.b` @type ^`int` := v3;
  #L1231ce.  v1.`b.n.c` @type ^`int` := v4;
  #L1231d2.  v0:= 0I;
  #L1231d4.  v1.`b.n.e` @type ^`boolean` := v0 @kind boolean;
  #L1231d8.  v0:= 1I;
  #L1231da.  v1.`b.n.d` @type ^`boolean` := v0 @kind boolean;
  #L1231de.  return @kind void;
}
procedure `b.n` `a`(`b.n` v4 @kind this) @signature `Lb/n;.a:()Lb/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1231f0.  v1:= 0I;
  #L1231f2.  v0:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L1231f6.  if v0 == v4 then goto L123220;
  #L1231fa.  v0:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L1231fe.  v2:= v4.`b.n.g` @type ^`b.n` @kind object;
  #L123202.  v3:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L123206.  v2.`b.n.f` @type ^`b.n` := v3 @kind object;
  #L12320a.  v2:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L12320e.  v3:= v4.`b.n.g` @type ^`b.n` @kind object;
  #L123212.  v2.`b.n.g` @type ^`b.n` := v3 @kind object;
  #L123216.  v4.`b.n.f` @type ^`b.n` := v1 @kind object;
  #L12321a.  v4.`b.n.g` @type ^`b.n` := v1 @kind object;
  #L12321e.  return v0 @kind object;
  #L123220.  v0:= v1 @kind object;
  #L123222.  goto L1231fe;
}
procedure `b.n` `a`(`b.n` v5 @kind this, `int` v6 ) @signature `Lb/n;.a:(I)Lb/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L123234.  if v6 <= 0 then goto L123246;
  #L123238.  v0:= v5.`b.n.c` @type ^`int`;
  #L12323c.  v1:= v5.`b.n.b` @type ^`int`;
  #L123240.  v0:= v0 - v1 @kind int;
  #L123242.  if v6 <= v0 then goto L123252;
  #L123246.  v0:= new `java.lang.IllegalArgumentException`;
  #L12324a.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L123250.  throw v0;
  #L123252.  v0:= 1024I;
  #L123256.  if v6 < v0 then goto L123284;
  #L12325a.  v0:= new `b.n`;
  #L12325e.  call `<init>`(v0, v5) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L123264.  v1:= v0.`b.n.b` @type ^`int`;
  #L123268.  v1:= v1 + v6 @kind int;
  #L12326a.  v0.`b.n.c` @type ^`int` := v1;
  #L12326e.  v1:= v5.`b.n.b` @type ^`int`;
  #L123272.  v1:= v1 + v6 @kind int;
  #L123274.  v5.`b.n.b` @type ^`int` := v1;
  #L123278.  v1:= v5.`b.n.g` @type ^`b.n` @kind object;
  #L12327c.  call temp:= `a`(v1, v0) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L123282.  return v0 @kind object;
  #L123284.  call temp:= `a`() @signature `Lb/o;.a:()Lb/n;` @kind static;
  #L12328a.  v0:= temp @kind object;
  #L12328c.  v1:= v5.`b.n.a` @type ^`byte`[] @kind object;
  #L123290.  v2:= v5.`b.n.b` @type ^`int`;
  #L123294.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L123298.  v4:= 0I;
  #L12329a.  call `arraycopy`(v1, v2, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1232a0.  goto L123264;
}
procedure `b.n` `a`(`b.n` v1 @kind this, `b.n` v2 @kind object) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1232b4.  v2.`b.n.g` @type ^`b.n` := v1 @kind object;
  #L1232b8.  v0:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L1232bc.  v2.`b.n.f` @type ^`b.n` := v0 @kind object;
  #L1232c0.  v0:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L1232c4.  v0.`b.n.g` @type ^`b.n` := v2 @kind object;
  #L1232c8.  v1.`b.n.f` @type ^`b.n` := v2 @kind object;
  #L1232cc.  return v2 @kind object;
}
procedure `void` `a`(`b.n` v6 @kind this, `b.n` v7 @kind object, `int` v8 ) @signature `Lb/n;.a:(Lb/n;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1232e0.  v2:= 8192I;
  #L1232e4.  v5:= 0I;
  #L1232e6.  v0:= v7.`b.n.e` @type ^`boolean` @kind boolean;
  #L1232ea.  if v0 != 0 then goto L1232fa;
  #L1232ee.  v0:= new `java.lang.IllegalArgumentException`;
  #L1232f2.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L1232f8.  throw v0;
  #L1232fa.  v0:= v7.`b.n.c` @type ^`int`;
  #L1232fe.  v0:= v0 + v8 @kind int;
  #L123300.  if v0 <= v2 then goto L123362;
  #L123304.  v0:= v7.`b.n.d` @type ^`boolean` @kind boolean;
  #L123308.  if v0 == 0 then goto L123318;
  #L12330c.  v0:= new `java.lang.IllegalArgumentException`;
  #L123310.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L123316.  throw v0;
  #L123318.  v0:= v7.`b.n.c` @type ^`int`;
  #L12331c.  v0:= v0 + v8 @kind int;
  #L12331e.  v1:= v7.`b.n.b` @type ^`int`;
  #L123322.  v0:= v0 - v1 @kind int;
  #L123324.  if v0 <= v2 then goto L123334;
  #L123328.  v0:= new `java.lang.IllegalArgumentException`;
  #L12332c.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L123332.  throw v0;
  #L123334.  v0:= v7.`b.n.a` @type ^`byte`[] @kind object;
  #L123338.  v1:= v7.`b.n.b` @type ^`int`;
  #L12333c.  v2:= v7.`b.n.a` @type ^`byte`[] @kind object;
  #L123340.  v3:= v7.`b.n.c` @type ^`int`;
  #L123344.  v4:= v7.`b.n.b` @type ^`int`;
  #L123348.  v3:= v3 - v4 @kind int;
  #L12334a.  call `arraycopy`(v0, v1, v2, v5, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L123350.  v0:= v7.`b.n.c` @type ^`int`;
  #L123354.  v1:= v7.`b.n.b` @type ^`int`;
  #L123358.  v0:= v0 - v1 @kind int;
  #L12335a.  v7.`b.n.c` @type ^`int` := v0;
  #L12335e.  v7.`b.n.b` @type ^`int` := v5;
  #L123362.  v0:= v6.`b.n.a` @type ^`byte`[] @kind object;
  #L123366.  v1:= v6.`b.n.b` @type ^`int`;
  #L12336a.  v2:= v7.`b.n.a` @type ^`byte`[] @kind object;
  #L12336e.  v3:= v7.`b.n.c` @type ^`int`;
  #L123372.  call `arraycopy`(v0, v1, v2, v3, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L123378.  v0:= v7.`b.n.c` @type ^`int`;
  #L12337c.  v0:= v0 + v8 @kind int;
  #L12337e.  v7.`b.n.c` @type ^`int` := v0;
  #L123382.  v0:= v6.`b.n.b` @type ^`int`;
  #L123386.  v0:= v0 + v8 @kind int;
  #L123388.  v6.`b.n.b` @type ^`int` := v0;
  #L12338c.  return @kind void;
}
procedure `void` `b`(`b.n` v3 @kind this) @signature `Lb/n;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1233a0.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L1233a4.  if v0 != v3 then goto L1233b4;
  #L1233a8.  v0:= new `java.lang.IllegalStateException`;
  #L1233ac.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1233b2.  throw v0;
  #L1233b4.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L1233b8.  v0:= v0.`b.n.e` @type ^`boolean` @kind boolean;
  #L1233bc.  if v0 != 0 then goto L1233c2;
  #L1233c0.  return @kind void;
  #L1233c2.  v0:= v3.`b.n.c` @type ^`int`;
  #L1233c6.  v1:= v3.`b.n.b` @type ^`int`;
  #L1233ca.  v1:= v0 - v1 @kind int;
  #L1233ce.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L1233d2.  v0:= v0.`b.n.c` @type ^`int`;
  #L1233d6.  v2:= v0 - 8192;
  #L1233da.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L1233de.  v0:= v0.`b.n.d` @type ^`boolean` @kind boolean;
  #L1233e2.  if v0 == 0 then goto L123406;
  #L1233e6.  v0:= 0I;
  #L1233e8.  v0:= v0 + v2 @kind int;
  #L1233ea.  if v1 > v0 then goto L1233c0;
  #L1233ee.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L1233f2.  call `a`(v3, v0, v1) @signature `Lb/n;.a:(Lb/n;I)V` @kind virtual;
  #L1233f8.  call temp:= `a`(v3) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L1233fe.  call `a`(v3) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L123404.  goto L1233c0;
  #L123406.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L12340a.  v0:= v0.`b.n.b` @type ^`int`;
  #L12340e.  goto L1233e8;
}
