record `b.g` @kind class @AccessFlag PUBLIC_ABSTRACT extends `b.r` @kind interface {
  `b.r` `b.g.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`b.g` v2 @kind this, `b.r` v3 @kind object) @signature `Lb/g;.<init>:(Lb/r;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L082334.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08233a.  if v3 != 0 then goto L08234e;
  #L08233e.  v0:= new `java.lang.IllegalArgumentException`;
  #L082342.  v1:= "delegate == null" @kind object;
  #L082346.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08234c.  throw v0;
  #L08234e.  v2.`b.g.a` @type ^`b.r` := v3 @kind object;
  #L082352.  return @kind void;
}
procedure `long` `a`(`b.g` v2 @kind this, `b.c` v3 @kind object, `long` v4 ) @signature `Lb/g;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L082364.  v0:= v2.`b.g.a` @type ^`b.r` @kind object;
  #L082368.  call temp:= `a`(v0, v3, v4) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L08236e.  v0:= temp @kind wide;
  #L082370.  return v0 @kind wide;
}
procedure `b.s` `a`(`b.g` v1 @kind this) @signature `Lb/g;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L082384.  v0:= v1.`b.g.a` @type ^`b.r` @kind object;
  #L082388.  call temp:= `a`(v0) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L08238e.  v0:= temp @kind object;
  #L082390.  return v0 @kind object;
}
procedure `void` `close`(`b.g` v1 @kind this) @signature `Lb/g;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0823a4.  v0:= v1.`b.g.a` @type ^`b.r` @kind object;
  #L0823a8.  call `close`(v0) @signature `Lb/r;.close:()V` @kind interface;
  #L0823ae.  return @kind void;
}
procedure `java.lang.String` `toString`(`b.g` v2 @kind this) @signature `Lb/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0823c0.  v0:= new `java.lang.StringBuilder`;
  #L0823c4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0823ca.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L0823d0.  v1:= temp @kind object;
  #L0823d2.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L0823d8.  v1:= temp @kind object;
  #L0823da.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0823e0.  v0:= temp @kind object;
  #L0823e2.  v1:= "(" @kind object;
  #L0823e6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0823ec.  v0:= temp @kind object;
  #L0823ee.  v1:= v2.`b.g.a` @type ^`b.r` @kind object;
  #L0823f2.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0823f8.  v1:= temp @kind object;
  #L0823fa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082400.  v0:= temp @kind object;
  #L082402.  v1:= ")" @kind object;
  #L082406.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08240c.  v0:= temp @kind object;
  #L08240e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L082414.  v0:= temp @kind object;
  #L082416.  return v0 @kind object;
}
