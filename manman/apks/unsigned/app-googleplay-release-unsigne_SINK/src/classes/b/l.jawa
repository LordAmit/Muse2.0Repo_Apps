record `b.l` @kind class @AccessFlag FINAL extends `b.d` @kind interface {
  `b.c` `b.l.a` @AccessFlag PUBLIC_FINAL;
  `b.q` `b.l.b` @AccessFlag PUBLIC_FINAL;
  `boolean` `b.l.c` @AccessFlag ;
}
procedure `void` `<init>`(`b.l` v2 @kind this, `b.q` v3 @kind object) @signature `Lb/l;.<init>:(Lb/q;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1223b0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1223b6.  v0:= new `b.c`;
  #L1223ba.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L1223c0.  v2.`b.l.a` @type ^`b.c` := v0 @kind object;
  #L1223c4.  if v3 != 0 then goto L1223d8;
  #L1223c8.  v0:= new `java.lang.NullPointerException`;
  #L1223cc.  v1:= "sink == null" @kind object;
  #L1223d0.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1223d6.  throw v0;
  #L1223d8.  v2.`b.l.b` @type ^`b.q` := v3 @kind object;
  #L1223dc.  return @kind void;
}
procedure `b.s` `a`(`b.l` v1 @kind this) @signature `Lb/l;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1223f0.  v0:= v1.`b.l.b` @type ^`b.q` @kind object;
  #L1223f4.  call temp:= `a`(v0) @signature `Lb/q;.a:()Lb/s;` @kind interface;
  #L1223fa.  v0:= temp @kind object;
  #L1223fc.  return v0 @kind object;
}
procedure `void` `a_`(`b.l` v2 @kind this, `b.c` v3 @kind object, `long` v4 ) @signature `Lb/l;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L122410.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L122414.  if v0 == 0 then goto L122428;
  #L122418.  v0:= new `java.lang.IllegalStateException`;
  #L12241c.  v1:= "closed" @kind object;
  #L122420.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122426.  throw v0;
  #L122428.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L12242c.  call `a_`(v0, v3, v4) @signature `Lb/c;.a_:(Lb/c;J)V` @kind virtual;
  #L122432.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L122438.  return @kind void;
}
procedure `b.d` `b`(`b.l` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lb/l;.b:(Ljava/lang/String;)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L12244c.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L122450.  if v0 == 0 then goto L122464;
  #L122454.  v0:= new `java.lang.IllegalStateException`;
  #L122458.  v1:= "closed" @kind object;
  #L12245c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122462.  throw v0;
  #L122464.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L122468.  call temp:= `a`(v0, v3) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @kind virtual;
  #L12246e.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L122474.  v0:= temp @kind object;
  #L122476.  return v0 @kind object;
}
procedure `b.c` `c`(`b.l` v1 @kind this) @signature `Lb/l;.c:()Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L122488.  v0:= v1.`b.l.a` @type ^`b.c` @kind object;
  #L12248c.  return v0 @kind object;
}
procedure `b.d` `c`(`b.l` v2 @kind this, `byte`[] v3 @kind object) @signature `Lb/l;.c:([B)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1224a0.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L1224a4.  if v0 == 0 then goto L1224b8;
  #L1224a8.  v0:= new `java.lang.IllegalStateException`;
  #L1224ac.  v1:= "closed" @kind object;
  #L1224b0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1224b6.  throw v0;
  #L1224b8.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L1224bc.  call temp:= `b`(v0, v3) @signature `Lb/c;.b:([B)Lb/c;` @kind virtual;
  #L1224c2.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L1224c8.  v0:= temp @kind object;
  #L1224ca.  return v0 @kind object;
}
procedure `b.d` `c`(`b.l` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lb/l;.c:([BII)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1224dc.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L1224e0.  if v0 == 0 then goto L1224f4;
  #L1224e4.  v0:= new `java.lang.IllegalStateException`;
  #L1224e8.  v1:= "closed" @kind object;
  #L1224ec.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1224f2.  throw v0;
  #L1224f4.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L1224f8.  call temp:= `b`(v0, v3, v4, v5) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L1224fe.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L122504.  v0:= temp @kind object;
  #L122506.  return v0 @kind object;
}
procedure `void` `close`(`b.l` v6 @kind this) @signature `Lb/l;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L122518.  v0:= v6.`b.l.c` @type ^`boolean` @kind boolean;
  #L12251c.  if v0 == 0 then goto L122522;
  #L122520.  return @kind void;
  #L122522.  v0:= 0I;
  #Try_start0.  
  #L122524.  v1:= v6.`b.l.a` @type ^`b.c` @kind object;
  #L122528.  v2:= v1.`b.c.b` @type ^`long` @kind wide;
  #L12252c.  v4:= 0L;
  #L122530.  v1:= lcmp(v2, v4);
  #L122534.  if v1 <= 0 then goto L12254e;
  #L122538.  v1:= v6.`b.l.b` @type ^`b.q` @kind object;
  #L12253c.  v2:= v6.`b.l.a` @type ^`b.c` @kind object;
  #L122540.  v3:= v6.`b.l.a` @type ^`b.c` @kind object;
  #L122544.  v4:= v3.`b.c.b` @type ^`long` @kind wide;
  #L122548.  call `a_`(v1, v2, v4) @signature `Lb/q;.a_:(Lb/c;J)V` @kind interface;
  #Try_end0.  
  #Try_start1.  
  #L12254e.  v1:= v6.`b.l.b` @type ^`b.q` @kind object;
  #L122552.  call `close`(v1) @signature `Lb/q;.close:()V` @kind interface;
  #Try_end1.  
  #L122558.  v1:= 1I;
  #L12255a.  v6.`b.l.c` @type ^`boolean` := v1 @kind boolean;
  #L12255e.  if v0 == 0 then goto L122520;
  #L122562.  call `a`(v0) @signature `Lb/t;.a:(Ljava/lang/Throwable;)V` @kind static;
  #L122568.  goto L122520;
  #L12256a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L12256c.  if v0 != 0 then goto L122558;
  #L122570.  v0:= v1 @kind object;
  #L122572.  goto L122558;
  #L122574.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L122576.  goto L12254e;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L122574;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L12256a;
}
procedure `void` `flush`(`b.l` v4 @kind this) @signature `Lb/l;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1225a4.  v0:= v4.`b.l.c` @type ^`boolean` @kind boolean;
  #L1225a8.  if v0 == 0 then goto L1225bc;
  #L1225ac.  v0:= new `java.lang.IllegalStateException`;
  #L1225b0.  v1:= "closed" @kind object;
  #L1225b4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1225ba.  throw v0;
  #L1225bc.  v0:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L1225c0.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L1225c4.  v2:= 0L;
  #L1225c8.  v0:= lcmp(v0, v2);
  #L1225cc.  if v0 <= 0 then goto L1225e6;
  #L1225d0.  v0:= v4.`b.l.b` @type ^`b.q` @kind object;
  #L1225d4.  v1:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L1225d8.  v2:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L1225dc.  v2:= v2.`b.c.b` @type ^`long` @kind wide;
  #L1225e0.  call `a_`(v0, v1, v2) @signature `Lb/q;.a_:(Lb/c;J)V` @kind interface;
  #L1225e6.  v0:= v4.`b.l.b` @type ^`b.q` @kind object;
  #L1225ea.  call `flush`(v0) @signature `Lb/q;.flush:()V` @kind interface;
  #L1225f0.  return @kind void;
}
procedure `b.d` `g`(`b.l` v2 @kind this, `int` v3 ) @signature `Lb/l;.g:(I)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L122604.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L122608.  if v0 == 0 then goto L12261c;
  #L12260c.  v0:= new `java.lang.IllegalStateException`;
  #L122610.  v1:= "closed" @kind object;
  #L122614.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12261a.  throw v0;
  #L12261c.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L122620.  call temp:= `d`(v0, v3) @signature `Lb/c;.d:(I)Lb/c;` @kind virtual;
  #L122626.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L12262c.  v0:= temp @kind object;
  #L12262e.  return v0 @kind object;
}
procedure `b.d` `h`(`b.l` v2 @kind this, `int` v3 ) @signature `Lb/l;.h:(I)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L122640.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L122644.  if v0 == 0 then goto L122658;
  #L122648.  v0:= new `java.lang.IllegalStateException`;
  #L12264c.  v1:= "closed" @kind object;
  #L122650.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122656.  throw v0;
  #L122658.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L12265c.  call temp:= `c`(v0, v3) @signature `Lb/c;.c:(I)Lb/c;` @kind virtual;
  #L122662.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L122668.  v0:= temp @kind object;
  #L12266a.  return v0 @kind object;
}
procedure `b.d` `i`(`b.l` v2 @kind this, `int` v3 ) @signature `Lb/l;.i:(I)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L12267c.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L122680.  if v0 == 0 then goto L122694;
  #L122684.  v0:= new `java.lang.IllegalStateException`;
  #L122688.  v1:= "closed" @kind object;
  #L12268c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122692.  throw v0;
  #L122694.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L122698.  call temp:= `b`(v0, v3) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L12269e.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L1226a4.  v0:= temp @kind object;
  #L1226a6.  return v0 @kind object;
}
procedure `b.d` `j`(`b.l` v3 @kind this, `long` v4 ) @signature `Lb/l;.j:(J)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1226b8.  v0:= v3.`b.l.c` @type ^`boolean` @kind boolean;
  #L1226bc.  if v0 == 0 then goto L1226d0;
  #L1226c0.  v0:= new `java.lang.IllegalStateException`;
  #L1226c4.  v1:= "closed" @kind object;
  #L1226c8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1226ce.  throw v0;
  #L1226d0.  v0:= v3.`b.l.a` @type ^`b.c` @kind object;
  #L1226d4.  call temp:= `i`(v0, v4) @signature `Lb/c;.i:(J)Lb/c;` @kind virtual;
  #L1226da.  call temp:= `u`(v3) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L1226e0.  v0:= temp @kind object;
  #L1226e2.  return v0 @kind object;
}
procedure `b.d` `k`(`b.l` v3 @kind this, `long` v4 ) @signature `Lb/l;.k:(J)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1226f4.  v0:= v3.`b.l.c` @type ^`boolean` @kind boolean;
  #L1226f8.  if v0 == 0 then goto L12270c;
  #L1226fc.  v0:= new `java.lang.IllegalStateException`;
  #L122700.  v1:= "closed" @kind object;
  #L122704.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12270a.  throw v0;
  #L12270c.  v0:= v3.`b.l.a` @type ^`b.c` @kind object;
  #L122710.  call temp:= `h`(v0, v4) @signature `Lb/c;.h:(J)Lb/c;` @kind virtual;
  #L122716.  call temp:= `u`(v3) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L12271c.  v0:= temp @kind object;
  #L12271e.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`b.l` v2 @kind this) @signature `Lb/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L122730.  v0:= new `java.lang.StringBuilder`;
  #L122734.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12273a.  v1:= "buffer(" @kind object;
  #L12273e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L122744.  v0:= temp @kind object;
  #L122746.  v1:= v2.`b.l.b` @type ^`b.q` @kind object;
  #L12274a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L122750.  v0:= temp @kind object;
  #L122752.  v1:= ")" @kind object;
  #L122756.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12275c.  v0:= temp @kind object;
  #L12275e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L122764.  v0:= temp @kind object;
  #L122766.  return v0 @kind object;
}
procedure `b.d` `u`(`b.l` v4 @kind this) @signature `Lb/l;.u:()Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L122778.  v0:= v4.`b.l.c` @type ^`boolean` @kind boolean;
  #L12277c.  if v0 == 0 then goto L122790;
  #L122780.  v0:= new `java.lang.IllegalStateException`;
  #L122784.  v1:= "closed" @kind object;
  #L122788.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L12278e.  throw v0;
  #L122790.  v0:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L122794.  call temp:= `g`(v0) @signature `Lb/c;.g:()J` @kind virtual;
  #L12279a.  v0:= temp @kind wide;
  #L12279c.  v2:= 0L;
  #L1227a0.  v2:= lcmp(v0, v2);
  #L1227a4.  if v2 <= 0 then goto L1227b6;
  #L1227a8.  v2:= v4.`b.l.b` @type ^`b.q` @kind object;
  #L1227ac.  v3:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L1227b0.  call `a_`(v2, v3, v0) @signature `Lb/q;.a_:(Lb/c;J)V` @kind interface;
  #L1227b6.  return v4 @kind object;
}
