record `b.m` @kind class @AccessFlag FINAL extends `b.e` @kind interface {
  `b.c` `b.m.a` @AccessFlag PUBLIC_FINAL;
  `b.r` `b.m.b` @AccessFlag PUBLIC_FINAL;
  `boolean` `b.m.c` @AccessFlag ;
}
procedure `void` `<init>`(`b.m` v2 @kind this, `b.r` v3 @kind object) @signature `Lb/m;.<init>:(Lb/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1229a0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1229a6.  v0:= new `b.c`;
  #L1229aa.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L1229b0.  v2.`b.m.a` @type ^`b.c` := v0 @kind object;
  #L1229b4.  if v3 != 0 then goto L1229c8;
  #L1229b8.  v0:= new `java.lang.NullPointerException`;
  #L1229bc.  v1:= "source == null" @kind object;
  #L1229c0.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1229c6.  throw v0;
  #L1229c8.  v2.`b.m.b` @type ^`b.r` := v3 @kind object;
  #L1229cc.  return @kind void;
}
procedure `long` `a`(`b.m` v2 @kind this, `byte` v3 ) @signature `Lb/m;.a:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1229e0.  v0:= 0L;
  #L1229e4.  call temp:= `a`(v2, v3, v0) @signature `Lb/m;.a:(BJ)J` @kind virtual;
  #L1229ea.  v0:= temp @kind wide;
  #L1229ec.  return v0 @kind wide;
}
procedure `long` `a`(`b.m` v8 @kind this, `byte` v9 , `long` v10 ) @signature `Lb/m;.a:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L122a00.  v2:= -1L;
  #L122a04.  v0:= v8.`b.m.c` @type ^`boolean` @kind boolean;
  #L122a08.  if v0 == 0 then goto L122a24;
  #L122a0c.  v0:= new `java.lang.IllegalStateException`;
  #L122a10.  v1:= "closed" @kind object;
  #L122a14.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122a1a.  throw v0;
  #L122a1c.  call temp:= `max`(v10, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L122a22.  v10:= temp @kind wide;
  #L122a24.  v0:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L122a28.  call temp:= `a`(v0, v9, v10) @signature `Lb/c;.a:(BJ)J` @kind virtual;
  #L122a2e.  v0:= temp @kind wide;
  #L122a30.  v4:= lcmp(v0, v2);
  #L122a34.  if v4 == 0 then goto L122a3a;
  #L122a38.  return v0 @kind wide;
  #L122a3a.  v0:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L122a3e.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L122a42.  v4:= v8.`b.m.b` @type ^`b.r` @kind object;
  #L122a46.  v5:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L122a4a.  v6:= 8192L;
  #L122a4e.  call temp:= `a`(v4, v5, v6) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L122a54.  v4:= temp @kind wide;
  #L122a56.  v4:= lcmp(v4, v2);
  #L122a5a.  if v4 != 0 then goto L122a1c;
  #L122a5e.  v0:= v2 @kind wide;
  #L122a60.  goto L122a38;
}
procedure `long` `a`(`b.m` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `Lb/m;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L122a74.  v4:= 0L;
  #L122a78.  v0:= -1L;
  #L122a7c.  if v7 != 0 then goto L122a90;
  #L122a80.  v0:= new `java.lang.IllegalArgumentException`;
  #L122a84.  v1:= "sink == null" @kind object;
  #L122a88.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122a8e.  throw v0;
  #L122a90.  v2:= lcmp(v8, v4);
  #L122a94.  if v2 >= 0 then goto L122aca;
  #L122a98.  v0:= new `java.lang.IllegalArgumentException`;
  #L122a9c.  v1:= new `java.lang.StringBuilder`;
  #L122aa0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L122aa6.  v2:= "byteCount < 0: " @kind object;
  #L122aaa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L122ab0.  v1:= temp @kind object;
  #L122ab2.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L122ab8.  v1:= temp @kind object;
  #L122aba.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L122ac0.  v1:= temp @kind object;
  #L122ac2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122ac8.  throw v0;
  #L122aca.  v2:= v6.`b.m.c` @type ^`boolean` @kind boolean;
  #L122ace.  if v2 == 0 then goto L122ae2;
  #L122ad2.  v0:= new `java.lang.IllegalStateException`;
  #L122ad6.  v1:= "closed" @kind object;
  #L122ada.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122ae0.  throw v0;
  #L122ae2.  v2:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L122ae6.  v2:= v2.`b.c.b` @type ^`long` @kind wide;
  #L122aea.  v2:= lcmp(v2, v4);
  #L122aee.  if v2 != 0 then goto L122b10;
  #L122af2.  v2:= v6.`b.m.b` @type ^`b.r` @kind object;
  #L122af6.  v3:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L122afa.  v4:= 8192L;
  #L122afe.  call temp:= `a`(v2, v3, v4) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L122b04.  v2:= temp @kind wide;
  #L122b06.  v2:= lcmp(v2, v0);
  #L122b0a.  if v2 != 0 then goto L122b10;
  #L122b0e.  return v0 @kind wide;
  #L122b10.  v0:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L122b14.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L122b18.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L122b1e.  v0:= temp @kind wide;
  #L122b20.  v2:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L122b24.  call temp:= `a`(v2, v7, v0) @signature `Lb/c;.a:(Lb/c;J)J` @kind virtual;
  #L122b2a.  v0:= temp @kind wide;
  #L122b2c.  goto L122b0e;
}
procedure `b.s` `a`(`b.m` v1 @kind this) @signature `Lb/m;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L122b40.  v0:= v1.`b.m.b` @type ^`b.r` @kind object;
  #L122b44.  call temp:= `a`(v0) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L122b4a.  v0:= temp @kind object;
  #L122b4c.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`b.m` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lb/m;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L122b60.  if v3 != 0 then goto L122b74;
  #L122b64.  v0:= new `java.lang.IllegalArgumentException`;
  #L122b68.  v1:= "charset == null" @kind object;
  #L122b6c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122b72.  throw v0;
  #L122b74.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L122b78.  v1:= v2.`b.m.b` @type ^`b.r` @kind object;
  #L122b7c.  call temp:= `a`(v0, v1) @signature `Lb/c;.a:(Lb/r;)J` @kind virtual;
  #L122b82.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L122b86.  call temp:= `a`(v0, v3) @signature `Lb/c;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L122b8c.  v0:= temp @kind object;
  #L122b8e.  return v0 @kind object;
}
procedure `void` `a`(`b.m` v1 @kind this, `long` v2 ) @signature `Lb/m;.a:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L122ba0.  call temp:= `b`(v1, v2) @signature `Lb/m;.b:(J)Z` @kind virtual;
  #L122ba6.  v0:= temp;
  #L122ba8.  if v0 != 0 then goto L122bb8;
  #L122bac.  v0:= new `java.io.EOFException`;
  #L122bb0.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L122bb6.  throw v0;
  #L122bb8.  return @kind void;
}
procedure `boolean` `a`(`b.m` v7 @kind this, `long` v8 , `b.f` v10 @kind object) @signature `Lb/m;.a:(JLb/f;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L122bcc.  v5:= 0I;
  #L122bce.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L122bd4.  v6:= temp;
  #L122bd6.  v1:= v7 @kind object;
  #L122bd8.  v2:= v8 @kind wide;
  #L122bda.  v4:= v10 @kind object;
  #L122bdc.  call temp:= `a`(v1, v2, v4, v5, v6) @signature `Lb/m;.a:(JLb/f;II)Z` @kind virtual;
  #L122be2.  v0:= temp;
  #L122be4.  return v0;
}
procedure `boolean` `a`(`b.m` v7 @kind this, `long` v8 , `b.f` v10 @kind object, `int` v11 , `int` v12 ) @signature `Lb/m;.a:(JLb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L122bf8.  v0:= 0I;
  #L122bfa.  v1:= v7.`b.m.c` @type ^`boolean` @kind boolean;
  #L122bfe.  if v1 == 0 then goto L122c12;
  #L122c02.  v0:= new `java.lang.IllegalStateException`;
  #L122c06.  v1:= "closed" @kind object;
  #L122c0a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122c10.  throw v0;
  #L122c12.  v2:= 0L;
  #L122c16.  v1:= lcmp(v8, v2);
  #L122c1a.  if v1 < 0 then goto L122c34;
  #L122c1e.  if v11 < 0 then goto L122c34;
  #L122c22.  if v12 < 0 then goto L122c34;
  #L122c26.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L122c2c.  v1:= temp;
  #L122c2e.  v1:= v1 - v11 @kind int;
  #L122c30.  if v1 >= v12 then goto L122c36;
  #L122c34.  return v0;
  #L122c36.  v1:= v0;
  #L122c38.  if v1 >= v12 then goto L122c74;
  #L122c3c.  v2:= (`long`) v1 @kind i2l;
  #L122c3e.  v2:= v2 + v8 @kind long;
  #L122c40.  v4:= 1L;
  #L122c44.  v4:= v4 + v2 @kind long;
  #L122c46.  call temp:= `b`(v7, v4) @signature `Lb/m;.b:(J)Z` @kind virtual;
  #L122c4c.  v4:= temp;
  #L122c4e.  if v4 == 0 then goto L122c34;
  #L122c52.  v4:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L122c56.  call temp:= `b`(v4, v2) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L122c5c.  v2:= temp;
  #L122c5e.  v3:= v11 + v1 @kind int;
  #L122c62.  call temp:= `a`(v10, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L122c68.  v3:= temp;
  #L122c6a.  if v2 != v3 then goto L122c34;
  #L122c6e.  v1:= v1 + 1;
  #L122c72.  goto L122c38;
  #L122c74.  v0:= 1I;
  #L122c76.  goto L122c34;
}
procedure `boolean` `b`(`b.m` v5 @kind this, `long` v6 ) @signature `Lb/m;.b:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L122c88.  v0:= 0L;
  #L122c8c.  v0:= lcmp(v6, v0);
  #L122c90.  if v0 >= 0 then goto L122cc6;
  #L122c94.  v0:= new `java.lang.IllegalArgumentException`;
  #L122c98.  v1:= new `java.lang.StringBuilder`;
  #L122c9c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L122ca2.  v2:= "byteCount < 0: " @kind object;
  #L122ca6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L122cac.  v1:= temp @kind object;
  #L122cae.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L122cb4.  v1:= temp @kind object;
  #L122cb6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L122cbc.  v1:= temp @kind object;
  #L122cbe.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122cc4.  throw v0;
  #L122cc6.  v0:= v5.`b.m.c` @type ^`boolean` @kind boolean;
  #L122cca.  if v0 == 0 then goto L122cde;
  #L122cce.  v0:= new `java.lang.IllegalStateException`;
  #L122cd2.  v1:= "closed" @kind object;
  #L122cd6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122cdc.  throw v0;
  #L122cde.  v0:= v5.`b.m.a` @type ^`b.c` @kind object;
  #L122ce2.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L122ce6.  v0:= lcmp(v0, v6);
  #L122cea.  if v0 >= 0 then goto L122d12;
  #L122cee.  v0:= v5.`b.m.b` @type ^`b.r` @kind object;
  #L122cf2.  v1:= v5.`b.m.a` @type ^`b.c` @kind object;
  #L122cf6.  v2:= 8192L;
  #L122cfa.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L122d00.  v0:= temp @kind wide;
  #L122d02.  v2:= -1L;
  #L122d06.  v0:= lcmp(v0, v2);
  #L122d0a.  if v0 != 0 then goto L122cde;
  #L122d0e.  v0:= 0I;
  #L122d10.  return v0;
  #L122d12.  v0:= 1I;
  #L122d14.  goto L122d10;
}
procedure `b.c` `c`(`b.m` v1 @kind this) @signature `Lb/m;.c:()Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L122d28.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L122d2c.  return v0 @kind object;
}
procedure `b.f` `c`(`b.m` v1 @kind this, `long` v2 ) @signature `Lb/m;.c:(J)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L122d40.  call `a`(v1, v2) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L122d46.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L122d4a.  call temp:= `c`(v0, v2) @signature `Lb/c;.c:(J)Lb/f;` @kind virtual;
  #L122d50.  v0:= temp @kind object;
  #L122d52.  return v0 @kind object;
}
procedure `void` `close`(`b.m` v1 @kind this) @signature `Lb/m;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L122d64.  v0:= v1.`b.m.c` @type ^`boolean` @kind boolean;
  #L122d68.  if v0 == 0 then goto L122d6e;
  #L122d6c.  return @kind void;
  #L122d6e.  v0:= 1I;
  #L122d70.  v1.`b.m.c` @type ^`boolean` := v0 @kind boolean;
  #L122d74.  v0:= v1.`b.m.b` @type ^`b.r` @kind object;
  #L122d78.  call `close`(v0) @signature `Lb/r;.close:()V` @kind interface;
  #L122d7e.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L122d82.  call `r`(v0) @signature `Lb/c;.r:()V` @kind virtual;
  #L122d88.  goto L122d6c;
}
procedure `boolean` `e`(`b.m` v4 @kind this) @signature `Lb/m;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L122d9c.  v0:= v4.`b.m.c` @type ^`boolean` @kind boolean;
  #L122da0.  if v0 == 0 then goto L122db4;
  #L122da4.  v0:= new `java.lang.IllegalStateException`;
  #L122da8.  v1:= "closed" @kind object;
  #L122dac.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122db2.  throw v0;
  #L122db4.  v0:= v4.`b.m.a` @type ^`b.c` @kind object;
  #L122db8.  call temp:= `e`(v0) @signature `Lb/c;.e:()Z` @kind virtual;
  #L122dbe.  v0:= temp;
  #L122dc0.  if v0 == 0 then goto L122de8;
  #L122dc4.  v0:= v4.`b.m.b` @type ^`b.r` @kind object;
  #L122dc8.  v1:= v4.`b.m.a` @type ^`b.c` @kind object;
  #L122dcc.  v2:= 8192L;
  #L122dd0.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L122dd6.  v0:= temp @kind wide;
  #L122dd8.  v2:= -1L;
  #L122ddc.  v0:= lcmp(v0, v2);
  #L122de0.  if v0 != 0 then goto L122de8;
  #L122de4.  v0:= 1I;
  #L122de6.  return v0;
  #L122de8.  v0:= 0I;
  #L122dea.  goto L122de6;
}
procedure `java.io.InputStream` `f`(`b.m` v1 @kind this) @signature `Lb/m;.f:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L122dfc.  v0:= new `b.m$1`;
  #L122e00.  call `<init>`(v0, v1) @signature `Lb/m$1;.<init>:(Lb/m;)V` @kind direct;
  #L122e06.  return v0 @kind object;
}
procedure `byte`[] `f`(`b.m` v1 @kind this, `long` v2 ) @signature `Lb/m;.f:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L122e18.  call `a`(v1, v2) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L122e1e.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L122e22.  call temp:= `f`(v0, v2) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #L122e28.  v0:= temp @kind object;
  #L122e2a.  return v0 @kind object;
}
procedure `void` `g`(`b.m` v7 @kind this, `long` v8 ) @signature `Lb/m;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L122e3c.  v4:= 0L;
  #L122e40.  v0:= v7.`b.m.c` @type ^`boolean` @kind boolean;
  #L122e44.  if v0 == 0 then goto L122e78;
  #L122e48.  v0:= new `java.lang.IllegalStateException`;
  #L122e4c.  v1:= "closed" @kind object;
  #L122e50.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L122e56.  throw v0;
  #L122e58.  v0:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L122e5c.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L122e62.  v0:= temp @kind wide;
  #L122e64.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L122e6a.  v0:= temp @kind wide;
  #L122e6c.  v2:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L122e70.  call `g`(v2, v0) @signature `Lb/c;.g:(J)V` @kind virtual;
  #L122e76.  v8:= v8 - v0 @kind long;
  #L122e78.  v0:= lcmp(v8, v4);
  #L122e7c.  if v0 <= 0 then goto L122ebc;
  #L122e80.  v0:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L122e84.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L122e88.  v0:= lcmp(v0, v4);
  #L122e8c.  if v0 != 0 then goto L122e58;
  #L122e90.  v0:= v7.`b.m.b` @type ^`b.r` @kind object;
  #L122e94.  v1:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L122e98.  v2:= 8192L;
  #L122e9c.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L122ea2.  v0:= temp @kind wide;
  #L122ea4.  v2:= -1L;
  #L122ea8.  v0:= lcmp(v0, v2);
  #L122eac.  if v0 != 0 then goto L122e58;
  #L122eb0.  v0:= new `java.io.EOFException`;
  #L122eb4.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L122eba.  throw v0;
  #L122ebc.  return @kind void;
}
procedure `byte` `h`(`b.m` v2 @kind this) @signature `Lb/m;.h:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L122ed0.  v0:= 1L;
  #L122ed4.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L122eda.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L122ede.  call temp:= `h`(v0) @signature `Lb/c;.h:()B` @kind virtual;
  #L122ee4.  v0:= temp;
  #L122ee6.  return v0;
}
procedure `short` `i`(`b.m` v2 @kind this) @signature `Lb/m;.i:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L122ef8.  v0:= 2L;
  #L122efc.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L122f02.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L122f06.  call temp:= `i`(v0) @signature `Lb/c;.i:()S` @kind virtual;
  #L122f0c.  v0:= temp;
  #L122f0e.  return v0;
}
procedure `int` `j`(`b.m` v2 @kind this) @signature `Lb/m;.j:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L122f20.  v0:= 4L;
  #L122f24.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L122f2a.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L122f2e.  call temp:= `j`(v0) @signature `Lb/c;.j:()I` @kind virtual;
  #L122f34.  v0:= temp;
  #L122f36.  return v0;
}
procedure `short` `k`(`b.m` v2 @kind this) @signature `Lb/m;.k:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L122f48.  v0:= 2L;
  #L122f4c.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L122f52.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L122f56.  call temp:= `k`(v0) @signature `Lb/c;.k:()S` @kind virtual;
  #L122f5c.  v0:= temp;
  #L122f5e.  return v0;
}
procedure `int` `l`(`b.m` v2 @kind this) @signature `Lb/m;.l:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L122f70.  v0:= 4L;
  #L122f74.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L122f7a.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L122f7e.  call temp:= `l`(v0) @signature `Lb/c;.l:()I` @kind virtual;
  #L122f84.  v0:= temp;
  #L122f86.  return v0;
}
procedure `long` `m`(`b.m` v6 @kind this) @signature `Lb/m;.m:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L122f98.  v1:= 0I;
  #L122f9a.  v2:= 1L;
  #L122f9e.  call `a`(v6, v2) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L122fa4.  v0:= v1;
  #L122fa6.  v2:= v0 + 1;
  #L122faa.  v2:= (`long`) v2 @kind i2l;
  #L122fac.  call temp:= `b`(v6, v2) @signature `Lb/m;.b:(J)Z` @kind virtual;
  #L122fb2.  v2:= temp;
  #L122fb4.  if v2 == 0 then goto L12302a;
  #L122fb8.  v2:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L122fbc.  v4:= (`long`) v0 @kind i2l;
  #L122fbe.  call temp:= `b`(v2, v4) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L122fc4.  v2:= temp;
  #L122fc6.  v3:= 48I;
  #L122fca.  if v2 < v3 then goto L122fd6;
  #L122fce.  v3:= 57I;
  #L122fd2.  if v2 <= v3 then goto L123024;
  #L122fd6.  v3:= 97I;
  #L122fda.  if v2 < v3 then goto L122fe6;
  #L122fde.  v3:= 102I;
  #L122fe2.  if v2 <= v3 then goto L123024;
  #L122fe6.  v3:= 65I;
  #L122fea.  if v2 < v3 then goto L122ff6;
  #L122fee.  v3:= 70I;
  #L122ff2.  if v2 <= v3 then goto L123024;
  #L122ff6.  if v0 != 0 then goto L12302a;
  #L122ffa.  v0:= new `java.lang.NumberFormatException`;
  #L122ffe.  v3:= "Expected leading [0-9a-fA-F] character but was %#x" @kind object;
  #L123002.  v4:= 1I;
  #L123004.  v4:= new `java.lang.Object`[v4];
  #L123008.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L12300e.  v2:= temp @kind object;
  #L123010.  v4[v1]:= v2 @kind object;
  #L123014.  call temp:= `format`(v3, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L12301a.  v1:= temp @kind object;
  #L12301c.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L123022.  throw v0;
  #L123024.  v0:= v0 + 1;
  #L123028.  goto L122fa6;
  #L12302a.  v0:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L12302e.  call temp:= `m`(v0) @signature `Lb/c;.m:()J` @kind virtual;
  #L123034.  v0:= temp @kind wide;
  #L123036.  return v0 @kind wide;
}
procedure `java.lang.String` `p`(`b.m` v8 @kind this) @signature `Lb/m;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L123048.  v0:= 10I;
  #L12304c.  call temp:= `a`(v8, v0) @signature `Lb/m;.a:(B)J` @kind virtual;
  #L123052.  v0:= temp @kind wide;
  #L123054.  v2:= -1L;
  #L123058.  v2:= lcmp(v0, v2);
  #L12305c.  if v2 != 0 then goto L1230fe;
  #L123060.  v1:= new `b.c`;
  #L123064.  call `<init>`(v1) @signature `Lb/c;.<init>:()V` @kind direct;
  #L12306a.  v0:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L12306e.  v2:= 0L;
  #L123072.  v4:= 32L;
  #L123076.  v6:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L12307a.  call temp:= `b`(v6) @signature `Lb/c;.b:()J` @kind virtual;
  #L123080.  v6:= temp @kind wide;
  #L123082.  call temp:= `min`(v4, v6) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L123088.  v4:= temp @kind wide;
  #L12308a.  call temp:= `a`(v0, v1, v2, v4) @signature `Lb/c;.a:(Lb/c;JJ)Lb/c;` @kind virtual;
  #L123090.  v0:= new `java.io.EOFException`;
  #L123094.  v2:= new `java.lang.StringBuilder`;
  #L123098.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12309e.  v3:= "\\n not found: size=" @kind object;
  #L1230a2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1230a8.  v2:= temp @kind object;
  #L1230aa.  v3:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L1230ae.  call temp:= `b`(v3) @signature `Lb/c;.b:()J` @kind virtual;
  #L1230b4.  v4:= temp @kind wide;
  #L1230b6.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1230bc.  v2:= temp @kind object;
  #L1230be.  v3:= " content=" @kind object;
  #L1230c2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1230c8.  v2:= temp @kind object;
  #L1230ca.  call temp:= `n`(v1) @signature `Lb/c;.n:()Lb/f;` @kind virtual;
  #L1230d0.  v1:= temp @kind object;
  #L1230d2.  call temp:= `e`(v1) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L1230d8.  v1:= temp @kind object;
  #L1230da.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1230e0.  v1:= temp @kind object;
  #L1230e2.  v2:= "…" @kind object;
  #L1230e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1230ec.  v1:= temp @kind object;
  #L1230ee.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1230f4.  v1:= temp @kind object;
  #L1230f6.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1230fc.  throw v0;
  #L1230fe.  v2:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L123102.  call temp:= `e`(v2, v0) @signature `Lb/c;.e:(J)Ljava/lang/String;` @kind virtual;
  #L123108.  v0:= temp @kind object;
  #L12310a.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`b.m` v2 @kind this) @signature `Lb/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L12311c.  v0:= new `java.lang.StringBuilder`;
  #L123120.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L123126.  v1:= "buffer(" @kind object;
  #L12312a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L123130.  v0:= temp @kind object;
  #L123132.  v1:= v2.`b.m.b` @type ^`b.r` @kind object;
  #L123136.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12313c.  v0:= temp @kind object;
  #L12313e.  v1:= ")" @kind object;
  #L123142.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L123148.  v0:= temp @kind object;
  #L12314a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L123150.  v0:= temp @kind object;
  #L123152.  return v0 @kind object;
}
