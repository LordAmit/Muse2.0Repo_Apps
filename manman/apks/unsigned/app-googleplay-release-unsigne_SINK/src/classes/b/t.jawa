record `b.t` @kind class @AccessFlag FINAL {
}
global `java.nio.charset.Charset` `@@b.t.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/t;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L123b80.  v0:= "UTF-8" @kind object;
  #L123b84.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L123b8a.  v0:= temp @kind object;
  #L123b8c.  `@@b.t.a` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L123b90.  return @kind void;
}
procedure `int` `a`(`int` v2 ) @signature `Lb/t;.a:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L123ba4.  v0:= -16777216I;
  #L123ba8.  v0:= v0 ^& v2 @kind int;
  #L123baa.  v0:= v0 ^>> 24;
  #L123bae.  v1:= 16711680I;
  #L123bb2.  v1:= v1 ^& v2 @kind int;
  #L123bb4.  v1:= v1 ^>> 8;
  #L123bb8.  v0:= v0 ^| v1 @kind int;
  #L123bba.  v1:= 65280I;
  #L123bc0.  v1:= v1 ^& v2 @kind int;
  #L123bc2.  v1:= v1 ^< 8;
  #L123bc6.  v0:= v0 ^| v1 @kind int;
  #L123bc8.  v1:= v2 ^& 255;
  #L123bcc.  v1:= v1 ^< 24;
  #L123bd0.  v0:= v0 ^| v1 @kind int;
  #L123bd2.  return v0;
}
procedure `short` `a`(`short` v2 ) @signature `Lb/t;.a:(S)S` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L123be4.  v0:= 65535I;
  #L123bea.  v0:= v0 ^& v2 @kind int;
  #L123bec.  v1:= 65280I;
  #L123bf2.  v1:= v1 ^& v0 @kind int;
  #L123bf4.  v1:= v1 ^>> 8;
  #L123bf8.  v0:= v0 ^& 255;
  #L123bfc.  v0:= v0 ^< 8;
  #L123c00.  v0:= v0 ^| v1 @kind int;
  #L123c02.  v0:= (`short`) v0 @kind i2s;
  #L123c04.  return v0;
}
procedure `void` `a`(`long` v6 , `long` v8 , `long` v10 ) @signature `Lb/t;.a:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L123c18.  v0:= v8 ^| v10 @kind long;
  #L123c1c.  v2:= 0L;
  #L123c20.  v0:= lcmp(v0, v2);
  #L123c24.  if v0 < 0 then goto L123c3c;
  #L123c28.  v0:= lcmp(v8, v6);
  #L123c2c.  if v0 > 0 then goto L123c3c;
  #L123c30.  v0:= v6 - v8 @kind long;
  #L123c34.  v0:= lcmp(v0, v10);
  #L123c38.  if v0 >= 0 then goto L123c84;
  #L123c3c.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L123c40.  v1:= "size=%s offset=%s byteCount=%s" @kind object;
  #L123c44.  v2:= 3I;
  #L123c46.  v2:= new `java.lang.Object`[v2];
  #L123c4a.  v3:= 0I;
  #L123c4c.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L123c52.  v4:= temp @kind object;
  #L123c54.  v2[v3]:= v4 @kind object;
  #L123c58.  v3:= 1I;
  #L123c5a.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L123c60.  v4:= temp @kind object;
  #L123c62.  v2[v3]:= v4 @kind object;
  #L123c66.  v3:= 2I;
  #L123c68.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L123c6e.  v4:= temp @kind object;
  #L123c70.  v2[v3]:= v4 @kind object;
  #L123c74.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L123c7a.  v1:= temp @kind object;
  #L123c7c.  call `<init>`(v0, v1) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L123c82.  throw v0;
  #L123c84.  return @kind void;
}
procedure `void` `a`(`java.lang.Throwable` v0 @kind object) @signature `Lb/t;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L123c98.  call `b`(v0) @signature `Lb/t;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L123c9e.  return @kind void;
}
procedure `boolean` `a`(`byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lb/t;.a:([BI[BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L123cb0.  v0:= 0I;
  #L123cb2.  v1:= v0;
  #L123cb4.  if v1 >= v8 then goto L123cd4;
  #L123cb8.  v2:= v1 + v5 @kind int;
  #L123cbc.  v2:= v4[v2] @kind byte;
  #L123cc0.  v3:= v1 + v7 @kind int;
  #L123cc4.  v3:= v6[v3] @kind byte;
  #L123cc8.  if v2 == v3 then goto L123cce;
  #L123ccc.  return v0;
  #L123cce.  v1:= v1 + 1;
  #L123cd2.  goto L123cb4;
  #L123cd4.  v0:= 1I;
  #L123cd6.  goto L123ccc;
}
procedure `void` `b`(`java.lang.Throwable` v0 @kind object) @signature `Lb/t;.b:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L123ce8.  throw v0;
}
