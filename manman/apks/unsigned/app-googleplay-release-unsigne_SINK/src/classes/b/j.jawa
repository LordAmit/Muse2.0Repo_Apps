record `b.j` @kind class @AccessFlag PUBLIC_FINAL extends `b.r` @kind interface {
  `b.e` `b.j.a` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `b.j.b` @AccessFlag PRIVATE_FINAL;
  `int` `b.j.c` @AccessFlag PRIVATE;
  `boolean` `b.j.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`b.j` v2 @kind this, `b.e` v3 @kind object, `java.util.zip.Inflater` v4 @kind object) @signature `Lb/j;.<init>:(Lb/e;Ljava/util/zip/Inflater;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L121b34.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L121b3a.  if v3 != 0 then goto L121b4e;
  #L121b3e.  v0:= new `java.lang.IllegalArgumentException`;
  #L121b42.  v1:= "source == null" @kind object;
  #L121b46.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L121b4c.  throw v0;
  #L121b4e.  if v4 != 0 then goto L121b62;
  #L121b52.  v0:= new `java.lang.IllegalArgumentException`;
  #L121b56.  v1:= "inflater == null" @kind object;
  #L121b5a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L121b60.  throw v0;
  #L121b62.  v2.`b.j.a` @type ^`b.e` := v3 @kind object;
  #L121b66.  v2.`b.j.b` @type ^`java.util.zip.Inflater` := v4 @kind object;
  #L121b6a.  return @kind void;
}
procedure `void` `c`(`b.j` v4 @kind this) @signature `Lb/j;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L121b7c.  v0:= v4.`b.j.c` @type ^`int`;
  #L121b80.  if v0 != 0 then goto L121b86;
  #L121b84.  return @kind void;
  #L121b86.  v0:= v4.`b.j.c` @type ^`int`;
  #L121b8a.  v1:= v4.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L121b8e.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L121b94.  v1:= temp;
  #L121b96.  v0:= v0 - v1 @kind int;
  #L121b98.  v1:= v4.`b.j.c` @type ^`int`;
  #L121b9c.  v1:= v1 - v0 @kind int;
  #L121b9e.  v4.`b.j.c` @type ^`int` := v1;
  #L121ba2.  v1:= v4.`b.j.a` @type ^`b.e` @kind object;
  #L121ba6.  v2:= (`long`) v0 @kind i2l;
  #L121ba8.  call `g`(v1, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L121bae.  goto L121b84;
}
procedure `long` `a`(`b.j` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `Lb/j;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L121bc0.  v0:= 0L;
  #L121bc4.  v2:= lcmp(v8, v0);
  #L121bc8.  if v2 >= 0 then goto L121bfe;
  #L121bcc.  v0:= new `java.lang.IllegalArgumentException`;
  #L121bd0.  v1:= new `java.lang.StringBuilder`;
  #L121bd4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L121bda.  v2:= "byteCount < 0: " @kind object;
  #L121bde.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L121be4.  v1:= temp @kind object;
  #L121be6.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L121bec.  v1:= temp @kind object;
  #L121bee.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L121bf4.  v1:= temp @kind object;
  #L121bf6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L121bfc.  throw v0;
  #L121bfe.  v2:= v6.`b.j.d` @type ^`boolean` @kind boolean;
  #L121c02.  if v2 == 0 then goto L121c16;
  #L121c06.  v0:= new `java.lang.IllegalStateException`;
  #L121c0a.  v1:= "closed" @kind object;
  #L121c0e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L121c14.  throw v0;
  #L121c16.  v2:= lcmp(v8, v0);
  #L121c1a.  if v2 != 0 then goto L121c20;
  #L121c1e.  return v0 @kind wide;
  #L121c20.  call temp:= `b`(v6) @signature `Lb/j;.b:()Z` @kind virtual;
  #L121c26.  v0:= temp;
  #L121c28.  v1:= 1I;
  #Try_start0.  
  #L121c2a.  call temp:= `e`(v7, v1) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L121c30.  v1:= temp @kind object;
  #L121c32.  v2:= v6.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L121c36.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L121c3a.  v4:= v1.`b.n.c` @type ^`int`;
  #L121c3e.  v5:= v1.`b.n.c` @type ^`int`;
  #L121c42.  v5:= v5 - 8192;
  #L121c46.  call temp:= `inflate`(v2, v3, v4, v5) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #L121c4c.  v2:= temp;
  #L121c4e.  if v2 <= 0 then goto L121c6c;
  #L121c52.  v0:= v1.`b.n.c` @type ^`int`;
  #L121c56.  v0:= v0 + v2 @kind int;
  #L121c58.  v1.`b.n.c` @type ^`int` := v0;
  #L121c5c.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L121c60.  v4:= (`long`) v2 @kind i2l;
  #L121c62.  v0:= v0 + v4 @kind long;
  #L121c64.  v7.`b.c.b` @type ^`long` := v0 @kind wide;
  #L121c68.  v0:= (`long`) v2 @kind i2l;
  #L121c6a.  goto L121c1e;
  #L121c6c.  v2:= v6.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L121c70.  call temp:= `finished`(v2) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L121c76.  v2:= temp;
  #L121c78.  if v2 != 0 then goto L121c8c;
  #L121c7c.  v2:= v6.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L121c80.  call temp:= `needsDictionary`(v2) @signature `Ljava/util/zip/Inflater;.needsDictionary:()Z` @kind virtual;
  #L121c86.  v2:= temp;
  #L121c88.  if v2 == 0 then goto L121cb6;
  #L121c8c.  call `c`(v6) @signature `Lb/j;.c:()V` @kind direct;
  #L121c92.  v0:= v1.`b.n.b` @type ^`int`;
  #L121c96.  v2:= v1.`b.n.c` @type ^`int`;
  #L121c9a.  if v0 != v2 then goto L121cb0;
  #L121c9e.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L121ca4.  v0:= temp @kind object;
  #L121ca6.  v7.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L121caa.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L121cb0.  v0:= -1L;
  #L121cb4.  goto L121c1e;
  #L121cb6.  if v0 == 0 then goto L121c20;
  #L121cba.  v0:= new `java.io.EOFException`;
  #L121cbe.  v1:= "source exhausted prematurely" @kind object;
  #L121cc2.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L121cc8.  throw v0;
  #Try_end0.  
  #L121cca.  v0:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L121ccc.  v1:= new `java.io.IOException`;
  #L121cd0.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L121cd6.  throw v1;
  catch `java.util.zip.DataFormatException` @[Try_start0..Try_end0] goto L121cca;
}
procedure `b.s` `a`(`b.j` v1 @kind this) @signature `Lb/j;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L121cf8.  v0:= v1.`b.j.a` @type ^`b.e` @kind object;
  #L121cfc.  call temp:= `a`(v0) @signature `Lb/e;.a:()Lb/s;` @kind interface;
  #L121d02.  v0:= temp @kind object;
  #L121d04.  return v0 @kind object;
}
procedure `boolean` `b`(`b.j` v5 @kind this) @signature `Lb/j;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L121d18.  v0:= 0I;
  #L121d1a.  v1:= v5.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L121d1e.  call temp:= `needsInput`(v1) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L121d24.  v1:= temp;
  #L121d26.  if v1 != 0 then goto L121d2c;
  #L121d2a.  return v0;
  #L121d2c.  call `c`(v5) @signature `Lb/j;.c:()V` @kind direct;
  #L121d32.  v1:= v5.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L121d36.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L121d3c.  v1:= temp;
  #L121d3e.  if v1 == 0 then goto L121d52;
  #L121d42.  v0:= new `java.lang.IllegalStateException`;
  #L121d46.  v1:= "?" @kind object;
  #L121d4a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L121d50.  throw v0;
  #L121d52.  v1:= v5.`b.j.a` @type ^`b.e` @kind object;
  #L121d56.  call temp:= `e`(v1) @signature `Lb/e;.e:()Z` @kind interface;
  #L121d5c.  v1:= temp;
  #L121d5e.  if v1 == 0 then goto L121d66;
  #L121d62.  v0:= 1I;
  #L121d64.  goto L121d2a;
  #L121d66.  v1:= v5.`b.j.a` @type ^`b.e` @kind object;
  #L121d6a.  call temp:= `c`(v1) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L121d70.  v1:= temp @kind object;
  #L121d72.  v1:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L121d76.  v2:= v1.`b.n.c` @type ^`int`;
  #L121d7a.  v3:= v1.`b.n.b` @type ^`int`;
  #L121d7e.  v2:= v2 - v3 @kind int;
  #L121d80.  v5.`b.j.c` @type ^`int` := v2;
  #L121d84.  v2:= v5.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L121d88.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L121d8c.  v1:= v1.`b.n.b` @type ^`int`;
  #L121d90.  v4:= v5.`b.j.c` @type ^`int`;
  #L121d94.  call `setInput`(v2, v3, v1, v4) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L121d9a.  goto L121d2a;
}
procedure `void` `close`(`b.j` v1 @kind this) @signature `Lb/j;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L121dac.  v0:= v1.`b.j.d` @type ^`boolean` @kind boolean;
  #L121db0.  if v0 == 0 then goto L121db6;
  #L121db4.  return @kind void;
  #L121db6.  v0:= v1.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L121dba.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L121dc0.  v0:= 1I;
  #L121dc2.  v1.`b.j.d` @type ^`boolean` := v0 @kind boolean;
  #L121dc6.  v0:= v1.`b.j.a` @type ^`b.e` @kind object;
  #L121dca.  call `close`(v0) @signature `Lb/e;.close:()V` @kind interface;
  #L121dd0.  goto L121db4;
}
