record `a.n` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `a.n.a` @AccessFlag PRIVATE;
  `int` `a.n.b` @AccessFlag PRIVATE;
  `java.lang.Runnable` `a.n.c` @AccessFlag PRIVATE;
  `java.util.concurrent.ExecutorService` `a.n.d` @AccessFlag PRIVATE;
  `java.util.Deque` `a.n.e` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `a.n.f` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `a.n.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.n` v1 @kind this) @signature `La/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L08db24.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08db2a.  v0:= 64I;
  #L08db2e.  v1.`a.n.a` @type ^`int` := v0;
  #L08db32.  v0:= 5I;
  #L08db34.  v1.`a.n.b` @type ^`int` := v0;
  #L08db38.  v0:= new `java.util.ArrayDeque`;
  #L08db3c.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L08db42.  v1.`a.n.e` @type ^`java.util.Deque` := v0 @kind object;
  #L08db46.  v0:= new `java.util.ArrayDeque`;
  #L08db4a.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L08db50.  v1.`a.n.f` @type ^`java.util.Deque` := v0 @kind object;
  #L08db54.  v0:= new `java.util.ArrayDeque`;
  #L08db58.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L08db5e.  v1.`a.n.g` @type ^`java.util.Deque` := v0 @kind object;
  #L08db62.  return @kind void;
}
procedure `void` `a`(`a.n` v2 @kind this, `java.util.Deque` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `La/n;.a:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L08db74.  @monitorenter v2
  #Try_start0.  
  #L08db76.  call temp:= `remove`(v3, v4) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L08db7c.  v0:= temp;
  #L08db7e.  if v0 != 0 then goto L08db98;
  #L08db82.  v0:= new `java.lang.AssertionError`;
  #L08db86.  v1:= "Call wasn't in-flight!" @kind object;
  #L08db8a.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L08db90.  throw v0;
  #L08db92.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08db94.  @monitorexit v2
  #Try_end0.  
  #L08db96.  throw v0;
  #L08db98.  if v5 == 0 then goto L08dba2;
  #Try_start1.  
  #L08db9c.  call `c`(v2) @signature `La/n;.c:()V` @kind direct;
  #L08dba2.  call temp:= `b`(v2) @signature `La/n;.b:()I` @kind virtual;
  #L08dba8.  v0:= temp;
  #L08dbaa.  v1:= v2.`a.n.c` @type ^`java.lang.Runnable` @kind object;
  #L08dbae.  @monitorexit v2
  #Try_end1.  
  #L08dbb0.  if v0 != 0 then goto L08dbbe;
  #L08dbb4.  if v1 == 0 then goto L08dbbe;
  #L08dbb8.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L08dbbe.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08db92;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08db92;
}
procedure `int` `b`(`a.n` v4 @kind this, `a.w$a` v5 @kind object) @signature `La/n;.b:(La/w$a;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08dbe4.  v0:= 0I;
  #L08dbe6.  v1:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L08dbea.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L08dbf0.  v2:= temp @kind object;
  #L08dbf2.  v1:= v0;
  #L08dbf4.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L08dbfa.  v0:= temp;
  #L08dbfc.  if v0 == 0 then goto L08dc30;
  #L08dc00.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L08dc06.  v0:= temp @kind object;
  #L08dc08.  v0:= (`a.w$a`) v0 @kind object;
  #L08dc0c.  call temp:= `a`(v0) @signature `La/w$a;.a:()Ljava/lang/String;` @kind virtual;
  #L08dc12.  v0:= temp @kind object;
  #L08dc14.  call temp:= `a`(v5) @signature `La/w$a;.a:()Ljava/lang/String;` @kind virtual;
  #L08dc1a.  v3:= temp @kind object;
  #L08dc1c.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08dc22.  v0:= temp;
  #L08dc24.  if v0 == 0 then goto L08dc32;
  #L08dc28.  v0:= v1 + 1;
  #L08dc2c.  v1:= v0;
  #L08dc2e.  goto L08dbf4;
  #L08dc30.  return v1;
  #L08dc32.  v0:= v1;
  #L08dc34.  goto L08dc2c;
}
procedure `void` `c`(`a.n` v4 @kind this) @signature `La/n;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08dc48.  v0:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L08dc4c.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L08dc52.  v0:= temp;
  #L08dc54.  v1:= v4.`a.n.a` @type ^`int`;
  #L08dc58.  if v0 < v1 then goto L08dc5e;
  #L08dc5c.  return @kind void;
  #L08dc5e.  v0:= v4.`a.n.e` @type ^`java.util.Deque` @kind object;
  #L08dc62.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L08dc68.  v0:= temp;
  #L08dc6a.  if v0 != 0 then goto L08dc5c;
  #L08dc6e.  v0:= v4.`a.n.e` @type ^`java.util.Deque` @kind object;
  #L08dc72.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L08dc78.  v1:= temp @kind object;
  #L08dc7a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L08dc80.  v0:= temp;
  #L08dc82.  if v0 == 0 then goto L08dc5c;
  #L08dc86.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L08dc8c.  v0:= temp @kind object;
  #L08dc8e.  v0:= (`a.w$a`) v0 @kind object;
  #L08dc92.  call temp:= `b`(v4, v0) @signature `La/n;.b:(La/w$a;)I` @kind direct;
  #L08dc98.  v2:= temp;
  #L08dc9a.  v3:= v4.`a.n.b` @type ^`int`;
  #L08dc9e.  if v2 >= v3 then goto L08dcc0;
  #L08dca2.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L08dca8.  v2:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L08dcac.  call temp:= `add`(v2, v0) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L08dcb2.  call temp:= `a`(v4) @signature `La/n;.a:()Ljava/util/concurrent/ExecutorService;` @kind virtual;
  #L08dcb8.  v2:= temp @kind object;
  #L08dcba.  call `execute`(v2, v0) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L08dcc0.  v0:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L08dcc4.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L08dcca.  v0:= temp;
  #L08dccc.  v2:= v4.`a.n.a` @type ^`int`;
  #L08dcd0.  if v0 < v2 then goto L08dc7a;
  #L08dcd4.  goto L08dc5c;
}
procedure `java.util.concurrent.ExecutorService` `a`(`a.n` v9 @kind this) @signature `La/n;.a:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L08dce8.  @monitorenter v9
  #Try_start0.  
  #L08dcea.  v0:= v9.`a.n.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L08dcee.  if v0 != 0 then goto L08dd28;
  #L08dcf2.  v1:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L08dcf6.  v2:= 0I;
  #L08dcf8.  v3:= 2147483647I;
  #L08dcfe.  v4:= 60L;
  #L08dd02.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L08dd06.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L08dd0a.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L08dd10.  v0:= "OkHttp Dispatcher" @kind object;
  #L08dd14.  v8:= 0I;
  #L08dd16.  call temp:= `a`(v0, v8) @signature `La/a/c;.a:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L08dd1c.  v8:= temp @kind object;
  #L08dd1e.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L08dd24.  v9.`a.n.d` @type ^`java.util.concurrent.ExecutorService` := v1 @kind object;
  #L08dd28.  v0:= v9.`a.n.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #Try_end0.  
  #L08dd2c.  @monitorexit v9
  #L08dd2e.  return v0 @kind object;
  #L08dd30.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08dd32.  @monitorexit v9
  #L08dd34.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08dd30;
}
procedure `void` `a`(`a.n` v2 @kind this, `a.w$a` v3 @kind object) @signature `La/n;.a:(La/w$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L08dd54.  v0:= v2.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L08dd58.  v1:= 1I;
  #L08dd5a.  call `a`(v2, v0, v3, v1) @signature `La/n;.a:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @kind direct;
  #L08dd60.  return @kind void;
}
procedure `void` `a`(`a.n` v1 @kind this, `a.w` v2 @kind object) @signature `La/n;.a:(La/w;)V` @AccessFlag  {
    temp;
    v0;

  #L08dd74.  @monitorenter v1
  #Try_start0.  
  #L08dd76.  v0:= v1.`a.n.g` @type ^`java.util.Deque` @kind object;
  #L08dd7a.  call temp:= `add`(v0, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #Try_end0.  
  #L08dd80.  @monitorexit v1
  #L08dd82.  return @kind void;
  #L08dd84.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08dd86.  @monitorexit v1
  #L08dd88.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08dd84;
}
procedure `int` `b`(`a.n` v2 @kind this) @signature `La/n;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08dda8.  @monitorenter v2
  #Try_start0.  
  #L08ddaa.  v0:= v2.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L08ddae.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L08ddb4.  v0:= temp;
  #L08ddb6.  v1:= v2.`a.n.g` @type ^`java.util.Deque` @kind object;
  #L08ddba.  call temp:= `size`(v1) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #Try_end0.  
  #L08ddc0.  v1:= temp;
  #L08ddc2.  v0:= v0 + v1 @kind int;
  #L08ddc4.  @monitorexit v2
  #L08ddc6.  return v0;
  #L08ddc8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08ddca.  @monitorexit v2
  #L08ddcc.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08ddc8;
}
procedure `void` `b`(`a.n` v2 @kind this, `a.w` v3 @kind object) @signature `La/n;.b:(La/w;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L08ddec.  v0:= v2.`a.n.g` @type ^`java.util.Deque` @kind object;
  #L08ddf0.  v1:= 0I;
  #L08ddf2.  call `a`(v2, v0, v3, v1) @signature `La/n;.a:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @kind direct;
  #L08ddf8.  return @kind void;
}
