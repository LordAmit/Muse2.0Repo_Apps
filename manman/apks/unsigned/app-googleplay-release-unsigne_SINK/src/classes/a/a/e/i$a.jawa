record `a.a.e.i$a` @kind class @AccessFlag FINAL extends `b.q` @kind interface {
  `boolean` `a.a.e.i$a.a` @AccessFlag ;
  `boolean` `a.a.e.i$a.b` @AccessFlag ;
  `a.a.e.i` `a.a.e.i$a.d` @AccessFlag FINAL_SYNTHETIC;
  `b.c` `a.a.e.i$a.e` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.a.e.i$a.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/e/i$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L084d10.  v0:= constclass @type ^`a.a.e.i` @kind object;
  #L084d14.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L084d1a.  v0:= temp;
  #L084d1c.  if v0 != 0 then goto L084d28;
  #L084d20.  v0:= 1I;
  #L084d22.  `@@a.a.e.i$a.c` @type ^`boolean` := v0 @kind boolean;
  #L084d26.  return @kind void;
  #L084d28.  v0:= 0I;
  #L084d2a.  goto L084d22;
}
procedure `void` `<init>`(`a.a.e.i$a` v1 @kind this, `a.a.e.i` v2 @kind object) @signature `La/a/e/i$a;.<init>:(La/a/e/i;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L084d3c.  v1.`a.a.e.i$a.d` @type ^`a.a.e.i` := v2 @kind object;
  #L084d40.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L084d46.  v0:= new `b.c`;
  #L084d4a.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L084d50.  v1.`a.a.e.i$a.e` @type ^`b.c` := v0 @kind object;
  #L084d54.  return @kind void;
}
procedure `void` `a`(`a.a.e.i$a` v6 @kind this, `boolean` v7 ) @signature `La/a/e/i$a;.a:(Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L084d68.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084d6c.  @monitorenter v1
  #Try_start0.  
  #L084d6e.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084d72.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L084d76.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_end0.  
  #Try_start1.  
  #L084d7c.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084d80.  v2:= v0.`a.a.e.i.b` @type ^`long` @kind wide;
  #L084d84.  v4:= 0L;
  #L084d88.  v0:= lcmp(v2, v4);
  #L084d8c.  if v0 > 0 then goto L084dd0;
  #L084d90.  v0:= v6.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L084d94.  if v0 != 0 then goto L084dd0;
  #L084d98.  v0:= v6.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L084d9c.  if v0 != 0 then goto L084dd0;
  #L084da0.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084da4.  v0:= v0.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L084da8.  if v0 != 0 then goto L084dd0;
  #L084dac.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084db0.  call `l`(v0) @signature `La/a/e/i;.l:()V` @kind virtual;
  #Try_end1.  
  #L084db6.  goto L084d7c;
  #L084db8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start2.  
  #L084dba.  v2:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084dbe.  v2:= v2.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L084dc2.  call `b`(v2) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L084dc8.  throw v0;
  #L084dca.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L084dcc.  @monitorexit v1
  #Try_end2.  
  #L084dce.  throw v0;
  #Try_start3.  
  #L084dd0.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084dd4.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L084dd8.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L084dde.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084de2.  call `k`(v0) @signature `La/a/e/i;.k:()V` @kind virtual;
  #L084de8.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084dec.  v2:= v0.`a.a.e.i.b` @type ^`long` @kind wide;
  #L084df0.  v0:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L084df4.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L084dfa.  v4:= temp @kind wide;
  #L084dfc.  call temp:= `min`(v2, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L084e02.  v4:= temp @kind wide;
  #L084e04.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084e08.  v2:= v0.`a.a.e.i.b` @type ^`long` @kind wide;
  #L084e0c.  v2:= v2 - v4 @kind long;
  #L084e0e.  v0.`a.a.e.i.b` @type ^`long` := v2 @kind wide;
  #L084e12.  @monitorexit v1
  #Try_end3.  
  #L084e14.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084e18.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L084e1c.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_start4.  
  #L084e22.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084e26.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L084e2a.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084e2e.  v1:= v1.`a.a.e.i.c` @type ^`int`;
  #L084e32.  if v7 == 0 then goto L084e66;
  #L084e36.  v2:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L084e3a.  call temp:= `b`(v2) @signature `Lb/c;.b:()J` @kind virtual;
  #L084e40.  v2:= temp @kind wide;
  #L084e42.  v2:= lcmp(v4, v2);
  #L084e46.  if v2 != 0 then goto L084e66;
  #L084e4a.  v2:= 1I;
  #L084e4c.  v3:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L084e50.  call `a`(v0, v1, v2, v3, v4) @signature `La/a/e/g;.a:(IZLb/c;J)V` @kind virtual;
  #Try_end4.  
  #L084e56.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084e5a.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L084e5e.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L084e64.  return @kind void;
  #L084e66.  v2:= 0I;
  #L084e68.  goto L084e4c;
  #L084e6a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L084e6c.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084e70.  v1:= v1.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L084e74.  call `b`(v1) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L084e7a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L084dca;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L084db8;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L084dca;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L084dca;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L084e6a;
}
procedure `b.s` `a`(`a.a.e.i$a` v1 @kind this) @signature `La/a/e/i$a;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L084ebc.  v0:= v1.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084ec0.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L084ec4.  return v0 @kind object;
}
procedure `void` `a_`(`a.a.e.i$a` v4 @kind this, `b.c` v5 @kind object, `long` v6 ) @signature `La/a/e/i$a;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L084ed8.  v0:= `@@a.a.e.i$a.c` @type ^`boolean` @kind boolean;
  #L084edc.  if v0 != 0 then goto L084efc;
  #L084ee0.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084ee4.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L084eea.  v0:= temp;
  #L084eec.  if v0 == 0 then goto L084efc;
  #L084ef0.  v0:= new `java.lang.AssertionError`;
  #L084ef4.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L084efa.  throw v0;
  #L084efc.  v0:= v4.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L084f00.  call `a_`(v0, v5, v6) @signature `Lb/c;.a_:(Lb/c;J)V` @kind virtual;
  #L084f06.  v0:= v4.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L084f0a.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L084f10.  v0:= temp @kind wide;
  #L084f12.  v2:= 16384L;
  #L084f16.  v0:= lcmp(v0, v2);
  #L084f1a.  if v0 < 0 then goto L084f28;
  #L084f1e.  v0:= 0I;
  #L084f20.  call `a`(v4, v0) @signature `La/a/e/i$a;.a:(Z)V` @kind direct;
  #L084f26.  goto L084f06;
  #L084f28.  return @kind void;
}
procedure `void` `close`(`a.a.e.i$a` v6 @kind this) @signature `La/a/e/i$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L084f3c.  v4:= 0L;
  #L084f40.  v2:= 1I;
  #L084f42.  v0:= `@@a.a.e.i$a.c` @type ^`boolean` @kind boolean;
  #L084f46.  if v0 != 0 then goto L084f66;
  #L084f4a.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084f4e.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L084f54.  v0:= temp;
  #L084f56.  if v0 == 0 then goto L084f66;
  #L084f5a.  v0:= new `java.lang.AssertionError`;
  #L084f5e.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L084f64.  throw v0;
  #L084f66.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084f6a.  @monitorenter v1
  #Try_start0.  
  #L084f6c.  v0:= v6.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L084f70.  if v0 == 0 then goto L084f78;
  #L084f74.  @monitorexit v1
  #L084f76.  return @kind void;
  #L084f78.  @monitorexit v1
  #Try_end0.  
  #L084f7a.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084f7e.  v0:= v0.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L084f82.  v0:= v0.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L084f86.  if v0 != 0 then goto L084fd8;
  #L084f8a.  v0:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L084f8e.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L084f94.  v0:= temp @kind wide;
  #L084f96.  v0:= lcmp(v0, v4);
  #L084f9a.  if v0 <= 0 then goto L084fc0;
  #L084f9e.  v0:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L084fa2.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L084fa8.  v0:= temp @kind wide;
  #L084faa.  v0:= lcmp(v0, v4);
  #L084fae.  if v0 <= 0 then goto L084fd8;
  #L084fb2.  call `a`(v6, v2) @signature `La/a/e/i$a;.a:(Z)V` @kind direct;
  #L084fb8.  goto L084f9e;
  #L084fba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L084fbc.  @monitorexit v1
  #Try_end1.  
  #L084fbe.  throw v0;
  #L084fc0.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084fc4.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L084fc8.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084fcc.  v1:= v1.`a.a.e.i.c` @type ^`int`;
  #L084fd0.  v3:= 0I;
  #L084fd2.  call `a`(v0, v1, v2, v3, v4) @signature `La/a/e/g;.a:(IZLb/c;J)V` @kind virtual;
  #L084fd8.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084fdc.  @monitorenter v1
  #L084fde.  v0:= 1I;
  #Try_start2.  
  #L084fe0.  v6.`a.a.e.i$a.a` @type ^`boolean` := v0 @kind boolean;
  #L084fe4.  @monitorexit v1
  #Try_end2.  
  #L084fe6.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084fea.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L084fee.  call `b`(v0) @signature `La/a/e/g;.b:()V` @kind virtual;
  #L084ff4.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L084ff8.  call `j`(v0) @signature `La/a/e/i;.j:()V` @kind virtual;
  #L084ffe.  goto L084f76;
  #L085000.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L085002.  @monitorexit v1
  #Try_end3.  
  #L085004.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L084fba;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L084fba;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L085000;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L085000;
}
procedure `void` `flush`(`a.a.e.i$a` v4 @kind this) @signature `La/a/e/i$a;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L085040.  v0:= `@@a.a.e.i$a.c` @type ^`boolean` @kind boolean;
  #L085044.  if v0 != 0 then goto L085064;
  #L085048.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L08504c.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L085052.  v0:= temp;
  #L085054.  if v0 == 0 then goto L085064;
  #L085058.  v0:= new `java.lang.AssertionError`;
  #L08505c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L085062.  throw v0;
  #L085064.  v1:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L085068.  @monitorenter v1
  #Try_start0.  
  #L08506a.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L08506e.  call `k`(v0) @signature `La/a/e/i;.k:()V` @kind virtual;
  #L085074.  @monitorexit v1
  #Try_end0.  
  #L085076.  v0:= v4.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L08507a.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L085080.  v0:= temp @kind wide;
  #L085082.  v2:= 0L;
  #L085086.  v0:= lcmp(v0, v2);
  #L08508a.  if v0 <= 0 then goto L0850ac;
  #L08508e.  v0:= 0I;
  #L085090.  call `a`(v4, v0) @signature `La/a/e/i$a;.a:(Z)V` @kind direct;
  #L085096.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L08509a.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L08509e.  call `b`(v0) @signature `La/a/e/g;.b:()V` @kind virtual;
  #L0850a4.  goto L085076;
  #L0850a6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L0850a8.  @monitorexit v1
  #Try_end1.  
  #L0850aa.  throw v0;
  #L0850ac.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0850a6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0850a6;
}
