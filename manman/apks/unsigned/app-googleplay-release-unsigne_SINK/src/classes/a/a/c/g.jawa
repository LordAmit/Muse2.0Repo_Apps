record `a.a.c.g` @kind class @AccessFlag PUBLIC_FINAL extends `a.s$a` @kind interface {
  `java.util.List` `a.a.c.g.a` @AccessFlag PRIVATE_FINAL;
  `a.a.b.g` `a.a.c.g.b` @AccessFlag PRIVATE_FINAL;
  `a.a.c.c` `a.a.c.g.c` @AccessFlag PRIVATE_FINAL;
  `a.i` `a.a.c.g.d` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.c.g.e` @AccessFlag PRIVATE_FINAL;
  `a.x` `a.a.c.g.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.c.g.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.c.g` v0 @kind this, `java.util.List` v1 @kind object, `a.a.b.g` v2 @kind object, `a.a.c.c` v3 @kind object, `a.i` v4 @kind object, `int` v5 , `a.x` v6 @kind object) @signature `La/a/c/g;.<init>:(Ljava/util/List;La/a/b/g;La/a/c/c;La/i;ILa/x;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L07dfa4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07dfaa.  v0.`a.a.c.g.a` @type ^`java.util.List` := v1 @kind object;
  #L07dfae.  v0.`a.a.c.g.d` @type ^`a.i` := v4 @kind object;
  #L07dfb2.  v0.`a.a.c.g.b` @type ^`a.a.b.g` := v2 @kind object;
  #L07dfb6.  v0.`a.a.c.g.c` @type ^`a.a.c.c` := v3 @kind object;
  #L07dfba.  v0.`a.a.c.g.e` @type ^`int` := v5;
  #L07dfbe.  v0.`a.a.c.g.f` @type ^`a.x` := v6 @kind object;
  #L07dfc2.  return @kind void;
}
procedure `boolean` `a`(`a.a.c.g` v2 @kind this, `a.r` v3 @kind object) @signature `La/a/c/g;.a:(La/r;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07dfd4.  call temp:= `f`(v3) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L07dfda.  v0:= temp @kind object;
  #L07dfdc.  v1:= v2.`a.a.c.g.d` @type ^`a.i` @kind object;
  #L07dfe0.  call temp:= `a`(v1) @signature `La/i;.a:()La/ab;` @kind interface;
  #L07dfe6.  v1:= temp @kind object;
  #L07dfe8.  call temp:= `a`(v1) @signature `La/ab;.a:()La/a;` @kind virtual;
  #L07dfee.  v1:= temp @kind object;
  #L07dff0.  call temp:= `a`(v1) @signature `La/a;.a:()La/r;` @kind virtual;
  #L07dff6.  v1:= temp @kind object;
  #L07dff8.  call temp:= `f`(v1) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L07dffe.  v1:= temp @kind object;
  #L07e000.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L07e006.  v0:= temp;
  #L07e008.  if v0 == 0 then goto L07e040;
  #L07e00c.  call temp:= `g`(v3) @signature `La/r;.g:()I` @kind virtual;
  #L07e012.  v0:= temp;
  #L07e014.  v1:= v2.`a.a.c.g.d` @type ^`a.i` @kind object;
  #L07e018.  call temp:= `a`(v1) @signature `La/i;.a:()La/ab;` @kind interface;
  #L07e01e.  v1:= temp @kind object;
  #L07e020.  call temp:= `a`(v1) @signature `La/ab;.a:()La/a;` @kind virtual;
  #L07e026.  v1:= temp @kind object;
  #L07e028.  call temp:= `a`(v1) @signature `La/a;.a:()La/r;` @kind virtual;
  #L07e02e.  v1:= temp @kind object;
  #L07e030.  call temp:= `g`(v1) @signature `La/r;.g:()I` @kind virtual;
  #L07e036.  v1:= temp;
  #L07e038.  if v0 != v1 then goto L07e040;
  #L07e03c.  v0:= 1I;
  #L07e03e.  return v0;
  #L07e040.  v0:= 0I;
  #L07e042.  goto L07e03e;
}
procedure `a.x` `a`(`a.a.c.g` v1 @kind this) @signature `La/a/c/g;.a:()La/x;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07e054.  v0:= v1.`a.a.c.g.f` @type ^`a.x` @kind object;
  #L07e058.  return v0 @kind object;
}
procedure `a.z` `a`(`a.a.c.g` v3 @kind this, `a.x` v4 @kind object) @signature `La/a/c/g;.a:(La/x;)La/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07e06c.  v0:= v3.`a.a.c.g.b` @type ^`a.a.b.g` @kind object;
  #L07e070.  v1:= v3.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L07e074.  v2:= v3.`a.a.c.g.d` @type ^`a.i` @kind object;
  #L07e078.  call temp:= `a`(v3, v4, v0, v1, v2) @signature `La/a/c/g;.a:(La/x;La/a/b/g;La/a/c/c;La/i;)La/z;` @kind virtual;
  #L07e07e.  v0:= temp @kind object;
  #L07e080.  return v0 @kind object;
}
procedure `a.z` `a`(`a.a.c.g` v8 @kind this, `a.x` v9 @kind object, `a.a.b.g` v10 @kind object, `a.a.c.c` v11 @kind object, `a.i` v12 @kind object) @signature `La/a/c/g;.a:(La/x;La/a/b/g;La/a/c/c;La/i;)La/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L07e094.  v7:= 1I;
  #L07e096.  v0:= v8.`a.a.c.g.e` @type ^`int`;
  #L07e09a.  v1:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L07e09e.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07e0a4.  v1:= temp;
  #L07e0a6.  if v0 < v1 then goto L07e0b6;
  #L07e0aa.  v0:= new `java.lang.AssertionError`;
  #L07e0ae.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07e0b4.  throw v0;
  #L07e0b6.  v0:= v8.`a.a.c.g.g` @type ^`int`;
  #L07e0ba.  v0:= v0 + 1;
  #L07e0be.  v8.`a.a.c.g.g` @type ^`int` := v0;
  #L07e0c2.  v0:= v8.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L07e0c6.  if v0 == 0 then goto L07e130;
  #L07e0ca.  call temp:= `a`(v9) @signature `La/x;.a:()La/r;` @kind virtual;
  #L07e0d0.  v0:= temp @kind object;
  #L07e0d2.  call temp:= `a`(v8, v0) @signature `La/a/c/g;.a:(La/r;)Z` @kind direct;
  #L07e0d8.  v0:= temp;
  #L07e0da.  if v0 != 0 then goto L07e130;
  #L07e0de.  v0:= new `java.lang.IllegalStateException`;
  #L07e0e2.  v1:= new `java.lang.StringBuilder`;
  #L07e0e6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07e0ec.  v2:= "network interceptor " @kind object;
  #L07e0f0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e0f6.  v1:= temp @kind object;
  #L07e0f8.  v2:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L07e0fc.  v3:= v8.`a.a.c.g.e` @type ^`int`;
  #L07e100.  v3:= v3 + -1;
  #L07e104.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07e10a.  v2:= temp @kind object;
  #L07e10c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e112.  v1:= temp @kind object;
  #L07e114.  v2:= " must retain the same host and port" @kind object;
  #L07e118.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e11e.  v1:= temp @kind object;
  #L07e120.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07e126.  v1:= temp @kind object;
  #L07e128.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e12e.  throw v0;
  #L07e130.  v0:= v8.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L07e134.  if v0 == 0 then goto L07e192;
  #L07e138.  v0:= v8.`a.a.c.g.g` @type ^`int`;
  #L07e13c.  if v0 <= v7 then goto L07e192;
  #L07e140.  v0:= new `java.lang.IllegalStateException`;
  #L07e144.  v1:= new `java.lang.StringBuilder`;
  #L07e148.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07e14e.  v2:= "network interceptor " @kind object;
  #L07e152.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e158.  v1:= temp @kind object;
  #L07e15a.  v2:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L07e15e.  v3:= v8.`a.a.c.g.e` @type ^`int`;
  #L07e162.  v3:= v3 + -1;
  #L07e166.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07e16c.  v2:= temp @kind object;
  #L07e16e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e174.  v1:= temp @kind object;
  #L07e176.  v2:= " must call proceed() exactly once" @kind object;
  #L07e17a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e180.  v1:= temp @kind object;
  #L07e182.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07e188.  v1:= temp @kind object;
  #L07e18a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e190.  throw v0;
  #L07e192.  v0:= new `a.a.c.g`;
  #L07e196.  v1:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L07e19a.  v2:= v8.`a.a.c.g.e` @type ^`int`;
  #L07e19e.  v5:= v2 + 1;
  #L07e1a2.  v2:= v10 @kind object;
  #L07e1a4.  v3:= v11 @kind object;
  #L07e1a6.  v4:= v12 @kind object;
  #L07e1a8.  v6:= v9 @kind object;
  #L07e1aa.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `La/a/c/g;.<init>:(Ljava/util/List;La/a/b/g;La/a/c/c;La/i;ILa/x;)V` @kind direct;
  #L07e1b0.  v1:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L07e1b4.  v2:= v8.`a.a.c.g.e` @type ^`int`;
  #L07e1b8.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07e1be.  v1:= temp @kind object;
  #L07e1c0.  v1:= (`a.s`) v1 @kind object;
  #L07e1c4.  call temp:= `a`(v1, v0) @signature `La/s;.a:(La/s$a;)La/z;` @kind interface;
  #L07e1ca.  v2:= temp @kind object;
  #L07e1cc.  if v11 == 0 then goto L07e22e;
  #L07e1d0.  v3:= v8.`a.a.c.g.e` @type ^`int`;
  #L07e1d4.  v3:= v3 + 1;
  #L07e1d8.  v4:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L07e1dc.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07e1e2.  v4:= temp;
  #L07e1e4.  if v3 >= v4 then goto L07e22e;
  #L07e1e8.  v0:= v0.`a.a.c.g.g` @type ^`int`;
  #L07e1ec.  if v0 == v7 then goto L07e22e;
  #L07e1f0.  v0:= new `java.lang.IllegalStateException`;
  #L07e1f4.  v2:= new `java.lang.StringBuilder`;
  #L07e1f8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07e1fe.  v3:= "network interceptor " @kind object;
  #L07e202.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e208.  v2:= temp @kind object;
  #L07e20a.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e210.  v1:= temp @kind object;
  #L07e212.  v2:= " must call proceed() exactly once" @kind object;
  #L07e216.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e21c.  v1:= temp @kind object;
  #L07e21e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07e224.  v1:= temp @kind object;
  #L07e226.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e22c.  throw v0;
  #L07e22e.  if v2 != 0 then goto L07e270;
  #L07e232.  v0:= new `java.lang.NullPointerException`;
  #L07e236.  v2:= new `java.lang.StringBuilder`;
  #L07e23a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07e240.  v3:= "interceptor " @kind object;
  #L07e244.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e24a.  v2:= temp @kind object;
  #L07e24c.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e252.  v1:= temp @kind object;
  #L07e254.  v2:= " returned null" @kind object;
  #L07e258.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07e25e.  v1:= temp @kind object;
  #L07e260.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07e266.  v1:= temp @kind object;
  #L07e268.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07e26e.  throw v0;
  #L07e270.  return v2 @kind object;
}
procedure `a.a.b.g` `b`(`a.a.c.g` v1 @kind this) @signature `La/a/c/g;.b:()La/a/b/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07e284.  v0:= v1.`a.a.c.g.b` @type ^`a.a.b.g` @kind object;
  #L07e288.  return v0 @kind object;
}
procedure `a.a.c.c` `c`(`a.a.c.g` v1 @kind this) @signature `La/a/c/g;.c:()La/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07e29c.  v0:= v1.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L07e2a0.  return v0 @kind object;
}
