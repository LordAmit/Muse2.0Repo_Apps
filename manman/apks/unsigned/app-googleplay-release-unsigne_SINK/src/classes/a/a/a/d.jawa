record `a.a.a.d` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface, `java.io.Flushable` @kind interface {
  `a.a.f.a` `a.a.a.d.b` @AccessFlag FINAL;
  `int` `a.a.a.d.c` @AccessFlag FINAL;
  `b.d` `a.a.a.d.d` @AccessFlag ;
  `java.util.LinkedHashMap` `a.a.a.d.e` @AccessFlag FINAL;
  `int` `a.a.a.d.f` @AccessFlag ;
  `boolean` `a.a.a.d.g` @AccessFlag ;
  `boolean` `a.a.a.d.h` @AccessFlag ;
  `boolean` `a.a.a.d.i` @AccessFlag ;
  `long` `a.a.a.d.k` @AccessFlag PRIVATE;
  `long` `a.a.a.d.l` @AccessFlag PRIVATE;
  `long` `a.a.a.d.m` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `a.a.a.d.n` @AccessFlag PRIVATE_FINAL;
  `java.lang.Runnable` `a.a.a.d.o` @AccessFlag PRIVATE_FINAL;
}
global `java.util.regex.Pattern` `@@a.a.a.d.a` @AccessFlag STATIC_FINAL;
global `boolean` `@@a.a.a.d.j` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/a/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L07ae84.  v0:= constclass @type ^`a.a.a.d` @kind object;
  #L07ae88.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L07ae8e.  v0:= temp;
  #L07ae90.  if v0 != 0 then goto L07aeac;
  #L07ae94.  v0:= 1I;
  #L07ae96.  `@@a.a.a.d.j` @type ^`boolean` := v0 @kind boolean;
  #L07ae9a.  v0:= "[a-z0-9_-]{1,120}" @kind object;
  #L07ae9e.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L07aea4.  v0:= temp @kind object;
  #L07aea6.  `@@a.a.a.d.a` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L07aeaa.  return @kind void;
  #L07aeac.  v0:= 0I;
  #L07aeae.  goto L07ae96;
}
procedure `void` `d`(`a.a.a.d` v2 @kind this) @signature `La/a/a/d;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07aec0.  @monitorenter v2
  #Try_start0.  
  #L07aec2.  call temp:= `b`(v2) @signature `La/a/a/d;.b:()Z` @kind virtual;
  #L07aec8.  v0:= temp;
  #L07aeca.  if v0 == 0 then goto L07aee4;
  #L07aece.  v0:= new `java.lang.IllegalStateException`;
  #L07aed2.  v1:= "cache is closed" @kind object;
  #L07aed6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07aedc.  throw v0;
  #Try_end0.  
  #L07aede.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07aee0.  @monitorexit v2
  #L07aee2.  throw v0;
  #L07aee4.  @monitorexit v2
  #L07aee6.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07aede;
}
procedure `void` `a`(`a.a.a.d` v10 @kind this, `a.a.a.d$a` v11 @kind object, `boolean` v12 ) @signature `La/a/a/d;.a:(La/a/a/d$a;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L07af04.  v0:= 0I;
  #L07af06.  @monitorenter v10
  #Try_start0.  
  #L07af08.  v2:= v11.`a.a.a.d$a.a` @type ^`a.a.a.d$b` @kind object;
  #L07af0c.  v1:= v2.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L07af10.  if v1 == v11 then goto L07af26;
  #L07af14.  v0:= new `java.lang.IllegalStateException`;
  #L07af18.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L07af1e.  throw v0;
  #Try_end0.  
  #L07af20.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07af22.  @monitorexit v10
  #L07af24.  throw v0;
  #L07af26.  if v12 == 0 then goto L07afa8;
  #Try_start1.  
  #L07af2a.  v1:= v2.`a.a.a.d$b.e` @type ^`boolean` @kind boolean;
  #L07af2e.  if v1 != 0 then goto L07afa8;
  #L07af32.  v1:= v0;
  #L07af34.  v3:= v10.`a.a.a.d.c` @type ^`int`;
  #L07af38.  if v1 >= v3 then goto L07afa8;
  #L07af3c.  v3:= v11.`a.a.a.d$a.b` @type ^`boolean`[] @kind object;
  #L07af40.  v3:= v3[v1] @kind boolean;
  #L07af44.  if v3 != 0 then goto L07af80;
  #L07af48.  call `b`(v11) @signature `La/a/a/d$a;.b:()V` @kind virtual;
  #L07af4e.  v0:= new `java.lang.IllegalStateException`;
  #L07af52.  v2:= new `java.lang.StringBuilder`;
  #L07af56.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07af5c.  v3:= "Newly created entry didn't create value for index " @kind object;
  #L07af60.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07af66.  v2:= temp @kind object;
  #L07af68.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07af6e.  v1:= temp @kind object;
  #L07af70.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07af76.  v1:= temp @kind object;
  #L07af78.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07af7e.  throw v0;
  #L07af80.  v3:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L07af84.  v4:= v2.`a.a.a.d$b.d` @type ^`java.io.File`[] @kind object;
  #L07af88.  v4:= v4[v1] @kind object;
  #L07af8c.  call temp:= `b`(v3, v4) @signature `La/a/f/a;.b:(Ljava/io/File;)Z` @kind interface;
  #L07af92.  v3:= temp;
  #L07af94.  if v3 != 0 then goto L07afa2;
  #L07af98.  call `b`(v11) @signature `La/a/a/d$a;.b:()V` @kind virtual;
  #Try_end1.  
  #L07af9e.  @monitorexit v10
  #L07afa0.  return @kind void;
  #L07afa2.  v1:= v1 + 1;
  #L07afa6.  goto L07af34;
  #Try_start2.  
  #L07afa8.  v1:= v10.`a.a.a.d.c` @type ^`int`;
  #L07afac.  if v0 >= v1 then goto L07b01a;
  #L07afb0.  v1:= v2.`a.a.a.d$b.d` @type ^`java.io.File`[] @kind object;
  #L07afb4.  v1:= v1[v0] @kind object;
  #L07afb8.  if v12 == 0 then goto L07b00e;
  #L07afbc.  v3:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L07afc0.  call temp:= `b`(v3, v1) @signature `La/a/f/a;.b:(Ljava/io/File;)Z` @kind interface;
  #L07afc6.  v3:= temp;
  #L07afc8.  if v3 == 0 then goto L07b008;
  #L07afcc.  v3:= v2.`a.a.a.d$b.c` @type ^`java.io.File`[] @kind object;
  #L07afd0.  v3:= v3[v0] @kind object;
  #L07afd4.  v4:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L07afd8.  call `a`(v4, v1, v3) @signature `La/a/f/a;.a:(Ljava/io/File;Ljava/io/File;)V` @kind interface;
  #L07afde.  v1:= v2.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L07afe2.  v4:= v1[v0] @kind wide;
  #L07afe6.  v1:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L07afea.  call temp:= `c`(v1, v3) @signature `La/a/f/a;.c:(Ljava/io/File;)J` @kind interface;
  #L07aff0.  v6:= temp @kind wide;
  #L07aff2.  v1:= v2.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L07aff6.  v1[v0]:= v6 @kind wide;
  #L07affa.  v8:= v10.`a.a.a.d.l` @type ^`long` @kind wide;
  #L07affe.  v4:= v8 - v4 @kind long;
  #L07b002.  v4:= v4 + v6 @kind long;
  #L07b004.  v10.`a.a.a.d.l` @type ^`long` := v4 @kind wide;
  #L07b008.  v0:= v0 + 1;
  #L07b00c.  goto L07afa8;
  #L07b00e.  v3:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L07b012.  call `a`(v3, v1) @signature `La/a/f/a;.a:(Ljava/io/File;)V` @kind interface;
  #L07b018.  goto L07b008;
  #L07b01a.  v0:= v10.`a.a.a.d.f` @type ^`int`;
  #L07b01e.  v0:= v0 + 1;
  #L07b022.  v10.`a.a.a.d.f` @type ^`int` := v0;
  #L07b026.  v0:= 0I;
  #L07b028.  v2.`a.a.a.d$b.f` @type ^`a.a.a.d$a` := v0 @kind object;
  #L07b02c.  v0:= v2.`a.a.a.d$b.e` @type ^`boolean` @kind boolean;
  #L07b030.  v0:= v0 ^| v12 @kind int;
  #L07b032.  if v0 == 0 then goto L07b0ca;
  #L07b036.  v0:= 1I;
  #L07b038.  v2.`a.a.a.d$b.e` @type ^`boolean` := v0 @kind boolean;
  #L07b03c.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07b040.  v1:= "CLEAN" @kind object;
  #L07b044.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07b04a.  v0:= temp @kind object;
  #L07b04c.  v1:= 32I;
  #L07b050.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L07b056.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07b05a.  v1:= v2.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L07b05e.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07b064.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07b068.  call `a`(v2, v0) @signature `La/a/a/d$b;.a:(Lb/d;)V` @kind virtual;
  #L07b06e.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07b072.  v1:= 10I;
  #L07b076.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L07b07c.  if v12 == 0 then goto L07b092;
  #L07b080.  v0:= v10.`a.a.a.d.m` @type ^`long` @kind wide;
  #L07b084.  v4:= 1L;
  #L07b088.  v4:= v4 + v0 @kind long;
  #L07b08a.  v10.`a.a.a.d.m` @type ^`long` := v4 @kind wide;
  #L07b08e.  v2.`a.a.a.d$b.g` @type ^`long` := v0 @kind wide;
  #L07b092.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07b096.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L07b09c.  v0:= v10.`a.a.a.d.l` @type ^`long` @kind wide;
  #L07b0a0.  v2:= v10.`a.a.a.d.k` @type ^`long` @kind wide;
  #L07b0a4.  v0:= lcmp(v0, v2);
  #L07b0a8.  if v0 > 0 then goto L07b0b8;
  #L07b0ac.  call temp:= `a`(v10) @signature `La/a/a/d;.a:()Z` @kind virtual;
  #L07b0b2.  v0:= temp;
  #L07b0b4.  if v0 == 0 then goto L07af9e;
  #L07b0b8.  v0:= v10.`a.a.a.d.n` @type ^`java.util.concurrent.Executor` @kind object;
  #L07b0bc.  v1:= v10.`a.a.a.d.o` @type ^`java.lang.Runnable` @kind object;
  #L07b0c0.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L07b0c6.  goto L07af9e;
  #L07b0ca.  v0:= v10.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L07b0ce.  v1:= v2.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L07b0d2.  call temp:= `remove`(v0, v1) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L07b0d8.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07b0dc.  v1:= "REMOVE" @kind object;
  #L07b0e0.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07b0e6.  v0:= temp @kind object;
  #L07b0e8.  v1:= 32I;
  #L07b0ec.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L07b0f2.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07b0f6.  v1:= v2.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L07b0fa.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07b100.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07b104.  v1:= 10I;
  #L07b108.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #Try_end2.  
  #L07b10e.  goto L07b092;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07af20;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07af20;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L07af20;
}
procedure `boolean` `a`(`a.a.a.d` v2 @kind this) @signature `La/a/a/d;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L07b13c.  v0:= v2.`a.a.a.d.f` @type ^`int`;
  #L07b140.  v1:= 2000I;
  #L07b144.  if v0 < v1 then goto L07b160;
  #L07b148.  v0:= v2.`a.a.a.d.f` @type ^`int`;
  #L07b14c.  v1:= v2.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L07b150.  call temp:= `size`(v1) @signature `Ljava/util/LinkedHashMap;.size:()I` @kind virtual;
  #L07b156.  v1:= temp;
  #L07b158.  if v0 < v1 then goto L07b160;
  #L07b15c.  v0:= 1I;
  #L07b15e.  return v0;
  #L07b160.  v0:= 0I;
  #L07b162.  goto L07b15e;
}
procedure `boolean` `a`(`a.a.a.d` v6 @kind this, `a.a.a.d$b` v7 @kind object) @signature `La/a/a/d;.a:(La/a/a/d$b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07b174.  v0:= v7.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L07b178.  if v0 == 0 then goto L07b186;
  #L07b17c.  v0:= v7.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L07b180.  call `a`(v0) @signature `La/a/a/d$a;.a:()V` @kind virtual;
  #L07b186.  v0:= 0I;
  #L07b188.  v1:= v6.`a.a.a.d.c` @type ^`int`;
  #L07b18c.  if v0 >= v1 then goto L07b1c6;
  #L07b190.  v1:= v6.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L07b194.  v2:= v7.`a.a.a.d$b.c` @type ^`java.io.File`[] @kind object;
  #L07b198.  v2:= v2[v0] @kind object;
  #L07b19c.  call `a`(v1, v2) @signature `La/a/f/a;.a:(Ljava/io/File;)V` @kind interface;
  #L07b1a2.  v2:= v6.`a.a.a.d.l` @type ^`long` @kind wide;
  #L07b1a6.  v1:= v7.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L07b1aa.  v4:= v1[v0] @kind wide;
  #L07b1ae.  v2:= v2 - v4 @kind long;
  #L07b1b0.  v6.`a.a.a.d.l` @type ^`long` := v2 @kind wide;
  #L07b1b4.  v1:= v7.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L07b1b8.  v2:= 0L;
  #L07b1bc.  v1[v0]:= v2 @kind wide;
  #L07b1c0.  v0:= v0 + 1;
  #L07b1c4.  goto L07b188;
  #L07b1c6.  v0:= v6.`a.a.a.d.f` @type ^`int`;
  #L07b1ca.  v0:= v0 + 1;
  #L07b1ce.  v6.`a.a.a.d.f` @type ^`int` := v0;
  #L07b1d2.  v0:= v6.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07b1d6.  v1:= "REMOVE" @kind object;
  #L07b1da.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07b1e0.  v0:= temp @kind object;
  #L07b1e2.  v1:= 32I;
  #L07b1e6.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L07b1ec.  v0:= temp @kind object;
  #L07b1ee.  v1:= v7.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L07b1f2.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07b1f8.  v0:= temp @kind object;
  #L07b1fa.  v1:= 10I;
  #L07b1fe.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L07b204.  v0:= v6.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L07b208.  v1:= v7.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L07b20c.  call temp:= `remove`(v0, v1) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L07b212.  call temp:= `a`(v6) @signature `La/a/a/d;.a:()Z` @kind virtual;
  #L07b218.  v0:= temp;
  #L07b21a.  if v0 == 0 then goto L07b22c;
  #L07b21e.  v0:= v6.`a.a.a.d.n` @type ^`java.util.concurrent.Executor` @kind object;
  #L07b222.  v1:= v6.`a.a.a.d.o` @type ^`java.lang.Runnable` @kind object;
  #L07b226.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L07b22c.  v0:= 1I;
  #L07b22e.  return v0;
}
procedure `boolean` `b`(`a.a.a.d` v1 @kind this) @signature `La/a/a/d;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07b240.  @monitorenter v1
  #Try_start0.  
  #L07b242.  v0:= v1.`a.a.a.d.h` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L07b246.  @monitorexit v1
  #L07b248.  return v0;
  #L07b24a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07b24c.  @monitorexit v1
  #L07b24e.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07b24a;
}
procedure `void` `c`(`a.a.a.d` v4 @kind this) @signature `La/a/a/d;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07b26c.  v0:= v4.`a.a.a.d.l` @type ^`long` @kind wide;
  #L07b270.  v2:= v4.`a.a.a.d.k` @type ^`long` @kind wide;
  #L07b274.  v0:= lcmp(v0, v2);
  #L07b278.  if v0 <= 0 then goto L07b2a4;
  #L07b27c.  v0:= v4.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L07b280.  call temp:= `values`(v0) @signature `Ljava/util/LinkedHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L07b286.  v0:= temp @kind object;
  #L07b288.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L07b28e.  v0:= temp @kind object;
  #L07b290.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L07b296.  v0:= temp @kind object;
  #L07b298.  v0:= (`a.a.a.d$b`) v0 @kind object;
  #L07b29c.  call temp:= `a`(v4, v0) @signature `La/a/a/d;.a:(La/a/a/d$b;)Z` @kind virtual;
  #L07b2a2.  goto L07b26c;
  #L07b2a4.  v0:= 0I;
  #L07b2a6.  v4.`a.a.a.d.i` @type ^`boolean` := v0 @kind boolean;
  #L07b2aa.  return @kind void;
}
procedure `void` `close`(`a.a.a.d` v5 @kind this) @signature `La/a/a/d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L07b2bc.  @monitorenter v5
  #Try_start0.  
  #L07b2be.  v0:= v5.`a.a.a.d.g` @type ^`boolean` @kind boolean;
  #L07b2c2.  if v0 == 0 then goto L07b2ce;
  #L07b2c6.  v0:= v5.`a.a.a.d.h` @type ^`boolean` @kind boolean;
  #L07b2ca.  if v0 == 0 then goto L07b2d8;
  #L07b2ce.  v0:= 1I;
  #L07b2d0.  v5.`a.a.a.d.h` @type ^`boolean` := v0 @kind boolean;
  #Try_end0.  
  #L07b2d4.  @monitorexit v5
  #L07b2d6.  return @kind void;
  #Try_start1.  
  #L07b2d8.  v0:= v5.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L07b2dc.  call temp:= `values`(v0) @signature `Ljava/util/LinkedHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L07b2e2.  v0:= temp @kind object;
  #L07b2e4.  v1:= v5.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L07b2e8.  call temp:= `size`(v1) @signature `Ljava/util/LinkedHashMap;.size:()I` @kind virtual;
  #L07b2ee.  v1:= temp;
  #L07b2f0.  v1:= new `a.a.a.d$b`[v1];
  #L07b2f4.  call temp:= `toArray`(v0, v1) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L07b2fa.  v0:= temp @kind object;
  #L07b2fc.  v0:= (`a.a.a.d$b`[]) v0 @kind object;
  #L07b300.  v2:= length @variable v0;
  #L07b302.  v1:= 0I;
  #L07b304.  if v1 >= v2 then goto L07b324;
  #L07b308.  v3:= v0[v1] @kind object;
  #L07b30c.  v4:= v3.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L07b310.  if v4 == 0 then goto L07b31e;
  #L07b314.  v3:= v3.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L07b318.  call `b`(v3) @signature `La/a/a/d$a;.b:()V` @kind virtual;
  #L07b31e.  v1:= v1 + 1;
  #L07b322.  goto L07b304;
  #L07b324.  call `c`(v5) @signature `La/a/a/d;.c:()V` @kind virtual;
  #L07b32a.  v0:= v5.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07b32e.  call `close`(v0) @signature `Lb/d;.close:()V` @kind interface;
  #L07b334.  v0:= 0I;
  #L07b336.  v5.`a.a.a.d.d` @type ^`b.d` := v0 @kind object;
  #L07b33a.  v0:= 1I;
  #L07b33c.  v5.`a.a.a.d.h` @type ^`boolean` := v0 @kind boolean;
  #Try_end1.  
  #L07b340.  goto L07b2d4;
  #L07b342.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07b344.  @monitorexit v5
  #L07b346.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07b342;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07b342;
}
procedure `void` `flush`(`a.a.a.d` v1 @kind this) @signature `La/a/a/d;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07b36c.  @monitorenter v1
  #Try_start0.  
  #L07b36e.  v0:= v1.`a.a.a.d.g` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L07b372.  if v0 != 0 then goto L07b37a;
  #L07b376.  @monitorexit v1
  #L07b378.  return @kind void;
  #Try_start1.  
  #L07b37a.  call `d`(v1) @signature `La/a/a/d;.d:()V` @kind direct;
  #L07b380.  call `c`(v1) @signature `La/a/a/d;.c:()V` @kind virtual;
  #L07b386.  v0:= v1.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07b38a.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L07b390.  goto L07b376;
  #L07b392.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07b394.  @monitorexit v1
  #L07b396.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07b392;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07b392;
}
