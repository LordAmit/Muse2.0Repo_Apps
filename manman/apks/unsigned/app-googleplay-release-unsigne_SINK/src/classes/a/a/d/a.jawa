record `a.a.d.a` @kind class @AccessFlag PUBLIC_FINAL extends `a.a.c.c` @kind interface {
  `a.u` `a.a.d.a.a` @AccessFlag FINAL;
  `a.a.b.g` `a.a.d.a.b` @AccessFlag FINAL;
  `b.e` `a.a.d.a.c` @AccessFlag FINAL;
  `b.d` `a.a.d.a.d` @AccessFlag FINAL;
  `int` `a.a.d.a.e` @AccessFlag ;
}
procedure `void` `<init>`(`a.a.d.a` v1 @kind this, `a.u` v2 @kind object, `a.a.b.g` v3 @kind object, `b.e` v4 @kind object, `b.d` v5 @kind object) @signature `La/a/d/a;.<init>:(La/u;La/a/b/g;Lb/e;Lb/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0801a8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0801ae.  v0:= 0I;
  #L0801b0.  v1.`a.a.d.a.e` @type ^`int` := v0;
  #L0801b4.  v1.`a.a.d.a.a` @type ^`a.u` := v2 @kind object;
  #L0801b8.  v1.`a.a.d.a.b` @type ^`a.a.b.g` := v3 @kind object;
  #L0801bc.  v1.`a.a.d.a.c` @type ^`b.e` := v4 @kind object;
  #L0801c0.  v1.`a.a.d.a.d` @type ^`b.d` := v5 @kind object;
  #L0801c4.  return @kind void;
}
procedure `b.r` `b`(`a.a.d.a` v4 @kind this, `a.z` v5 @kind object) @signature `La/a/d/a;.b:(La/z;)Lb/r;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0801d8.  call temp:= `b`(v5) @signature `La/a/c/e;.b:(La/z;)Z` @kind static;
  #L0801de.  v0:= temp;
  #L0801e0.  if v0 != 0 then goto L0801f2;
  #L0801e4.  v0:= 0L;
  #L0801e8.  call temp:= `b`(v4, v0) @signature `La/a/d/a;.b:(J)Lb/r;` @kind virtual;
  #L0801ee.  v0:= temp @kind object;
  #L0801f0.  return v0 @kind object;
  #L0801f2.  v0:= "chunked" @kind object;
  #L0801f6.  v1:= "Transfer-Encoding" @kind object;
  #L0801fa.  call temp:= `a`(v5, v1) @signature `La/z;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L080200.  v1:= temp @kind object;
  #L080202.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L080208.  v0:= temp;
  #L08020a.  if v0 == 0 then goto L080228;
  #L08020e.  call temp:= `a`(v5) @signature `La/z;.a:()La/x;` @kind virtual;
  #L080214.  v0:= temp @kind object;
  #L080216.  call temp:= `a`(v0) @signature `La/x;.a:()La/r;` @kind virtual;
  #L08021c.  v0:= temp @kind object;
  #L08021e.  call temp:= `a`(v4, v0) @signature `La/a/d/a;.a:(La/r;)Lb/r;` @kind virtual;
  #L080224.  v0:= temp @kind object;
  #L080226.  goto L0801f0;
  #L080228.  call temp:= `a`(v5) @signature `La/a/c/e;.a:(La/z;)J` @kind static;
  #L08022e.  v0:= temp @kind wide;
  #L080230.  v2:= -1L;
  #L080234.  v2:= lcmp(v0, v2);
  #L080238.  if v2 == 0 then goto L080246;
  #L08023c.  call temp:= `b`(v4, v0) @signature `La/a/d/a;.b:(J)Lb/r;` @kind virtual;
  #L080242.  v0:= temp @kind object;
  #L080244.  goto L0801f0;
  #L080246.  call temp:= `e`(v4) @signature `La/a/d/a;.e:()Lb/r;` @kind virtual;
  #L08024c.  v0:= temp @kind object;
  #L08024e.  goto L0801f0;
}
procedure `a.aa` `a`(`a.a.d.a` v3 @kind this, `a.z` v4 @kind object) @signature `La/a/d/a;.a:(La/z;)La/aa;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L080260.  call temp:= `b`(v3, v4) @signature `La/a/d/a;.b:(La/z;)Lb/r;` @kind direct;
  #L080266.  v0:= temp @kind object;
  #L080268.  v1:= new `a.a.c.h`;
  #L08026c.  call temp:= `e`(v4) @signature `La/z;.e:()La/q;` @kind virtual;
  #L080272.  v2:= temp @kind object;
  #L080274.  call temp:= `a`(v0) @signature `Lb/k;.a:(Lb/r;)Lb/e;` @kind static;
  #L08027a.  v0:= temp @kind object;
  #L08027c.  call `<init>`(v1, v2, v0) @signature `La/a/c/h;.<init>:(La/q;Lb/e;)V` @kind direct;
  #L080282.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.a.d.a` v4 @kind this, `boolean` v5 ) @signature `La/a/d/a;.a:(Z)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L080294.  v0:= v4.`a.a.d.a.e` @type ^`int`;
  #L080298.  v1:= 1I;
  #L08029a.  if v0 == v1 then goto L0802de;
  #L08029e.  v0:= v4.`a.a.d.a.e` @type ^`int`;
  #L0802a2.  v1:= 3I;
  #L0802a4.  if v0 == v1 then goto L0802de;
  #L0802a8.  v0:= new `java.lang.IllegalStateException`;
  #L0802ac.  v1:= new `java.lang.StringBuilder`;
  #L0802b0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0802b6.  v2:= "state: " @kind object;
  #L0802ba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0802c0.  v1:= temp @kind object;
  #L0802c2.  v2:= v4.`a.a.d.a.e` @type ^`int`;
  #L0802c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0802cc.  v1:= temp @kind object;
  #L0802ce.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0802d4.  v1:= temp @kind object;
  #L0802d6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0802dc.  throw v0;
  #Try_start0.  
  #L0802de.  v0:= v4.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L0802e2.  call temp:= `p`(v0) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #L0802e8.  v0:= temp @kind object;
  #L0802ea.  call temp:= `a`(v0) @signature `La/a/c/k;.a:(Ljava/lang/String;)La/a/c/k;` @kind static;
  #L0802f0.  v1:= temp @kind object;
  #L0802f2.  v0:= new `a.z$a`;
  #L0802f6.  call `<init>`(v0) @signature `La/z$a;.<init>:()V` @kind direct;
  #L0802fc.  v2:= v1.`a.a.c.k.a` @type ^`a.v` @kind object;
  #L080300.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(La/v;)La/z$a;` @kind virtual;
  #L080306.  v0:= temp @kind object;
  #L080308.  v2:= v1.`a.a.c.k.b` @type ^`int`;
  #L08030c.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(I)La/z$a;` @kind virtual;
  #L080312.  v0:= temp @kind object;
  #L080314.  v2:= v1.`a.a.c.k.c` @type ^`java.lang.String` @kind object;
  #L080318.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(Ljava/lang/String;)La/z$a;` @kind virtual;
  #L08031e.  v0:= temp @kind object;
  #L080320.  call temp:= `c`(v4) @signature `La/a/d/a;.c:()La/q;` @kind virtual;
  #L080326.  v2:= temp @kind object;
  #L080328.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(La/q;)La/z$a;` @kind virtual;
  #L08032e.  v0:= temp @kind object;
  #L080330.  if v5 == 0 then goto L080344;
  #L080334.  v1:= v1.`a.a.c.k.b` @type ^`int`;
  #L080338.  v2:= 100I;
  #L08033c.  if v1 != v2 then goto L080344;
  #L080340.  v0:= 0I;
  #L080342.  return v0 @kind object;
  #L080344.  v1:= 4I;
  #L080346.  v4.`a.a.d.a.e` @type ^`int` := v1;
  #Try_end0.  
  #L08034a.  goto L080342;
  #L08034c.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L08034e.  v1:= new `java.io.IOException`;
  #L080352.  v2:= new `java.lang.StringBuilder`;
  #L080356.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08035c.  v3:= "unexpected end of stream on " @kind object;
  #L080360.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L080366.  v2:= temp @kind object;
  #L080368.  v3:= v4.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L08036c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L080372.  v2:= temp @kind object;
  #L080374.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08037a.  v2:= temp @kind object;
  #L08037c.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080382.  call temp:= `initCause`(v1, v0) @signature `Ljava/io/IOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L080388.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L08034c;
}
procedure `b.q` `a`(`a.a.d.a` v3 @kind this, `long` v4 ) @signature `La/a/d/a;.a:(J)Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0803ac.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L0803b0.  v1:= 1I;
  #L0803b2.  if v0 == v1 then goto L0803ec;
  #L0803b6.  v0:= new `java.lang.IllegalStateException`;
  #L0803ba.  v1:= new `java.lang.StringBuilder`;
  #L0803be.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0803c4.  v2:= "state: " @kind object;
  #L0803c8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0803ce.  v1:= temp @kind object;
  #L0803d0.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L0803d4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0803da.  v1:= temp @kind object;
  #L0803dc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0803e2.  v1:= temp @kind object;
  #L0803e4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0803ea.  throw v0;
  #L0803ec.  v0:= 2I;
  #L0803ee.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L0803f2.  v0:= new `a.a.d.a$d`;
  #L0803f6.  call `<init>`(v0, v3, v4) @signature `La/a/d/a$d;.<init>:(La/a/d/a;J)V` @kind direct;
  #L0803fc.  return v0 @kind object;
}
procedure `b.q` `a`(`a.a.d.a` v2 @kind this, `a.x` v3 @kind object, `long` v4 ) @signature `La/a/d/a;.a:(La/x;J)Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L080410.  v0:= "chunked" @kind object;
  #L080414.  v1:= "Transfer-Encoding" @kind object;
  #L080418.  call temp:= `a`(v3, v1) @signature `La/x;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L08041e.  v1:= temp @kind object;
  #L080420.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L080426.  v0:= temp;
  #L080428.  if v0 == 0 then goto L080436;
  #L08042c.  call temp:= `d`(v2) @signature `La/a/d/a;.d:()Lb/q;` @kind virtual;
  #L080432.  v0:= temp @kind object;
  #L080434.  return v0 @kind object;
  #L080436.  v0:= -1L;
  #L08043a.  v0:= lcmp(v4, v0);
  #L08043e.  if v0 == 0 then goto L08044c;
  #L080442.  call temp:= `a`(v2, v4) @signature `La/a/d/a;.a:(J)Lb/q;` @kind virtual;
  #L080448.  v0:= temp @kind object;
  #L08044a.  goto L080434;
  #L08044c.  v0:= new `java.lang.IllegalStateException`;
  #L080450.  v1:= "Cannot stream a request body without chunked encoding or a known content length!" @kind object;
  #L080454.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08045a.  throw v0;
}
procedure `b.r` `a`(`a.a.d.a` v3 @kind this, `a.r` v4 @kind object) @signature `La/a/d/a;.a:(La/r;)Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L08046c.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L080470.  v1:= 4I;
  #L080472.  if v0 == v1 then goto L0804ac;
  #L080476.  v0:= new `java.lang.IllegalStateException`;
  #L08047a.  v1:= new `java.lang.StringBuilder`;
  #L08047e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L080484.  v2:= "state: " @kind object;
  #L080488.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08048e.  v1:= temp @kind object;
  #L080490.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L080494.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08049a.  v1:= temp @kind object;
  #L08049c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0804a2.  v1:= temp @kind object;
  #L0804a4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0804aa.  throw v0;
  #L0804ac.  v0:= 5I;
  #L0804ae.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L0804b2.  v0:= new `a.a.d.a$c`;
  #L0804b6.  call `<init>`(v0, v3, v4) @signature `La/a/d/a$c;.<init>:(La/a/d/a;La/r;)V` @kind direct;
  #L0804bc.  return v0 @kind object;
}
procedure `void` `a`(`a.a.d.a` v1 @kind this) @signature `La/a/d/a;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0804d0.  v0:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L0804d4.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L0804da.  return @kind void;
}
procedure `void` `a`(`a.a.d.a` v4 @kind this, `a.q` v5 @kind object, `java.lang.String` v6 @kind object) @signature `La/a/d/a;.a:(La/q;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0804ec.  v0:= v4.`a.a.d.a.e` @type ^`int`;
  #L0804f0.  if v0 == 0 then goto L08052a;
  #L0804f4.  v0:= new `java.lang.IllegalStateException`;
  #L0804f8.  v1:= new `java.lang.StringBuilder`;
  #L0804fc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L080502.  v2:= "state: " @kind object;
  #L080506.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08050c.  v1:= temp @kind object;
  #L08050e.  v2:= v4.`a.a.d.a.e` @type ^`int`;
  #L080512.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L080518.  v1:= temp @kind object;
  #L08051a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L080520.  v1:= temp @kind object;
  #L080522.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080528.  throw v0;
  #L08052a.  v0:= v4.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L08052e.  call temp:= `b`(v0, v6) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L080534.  v0:= temp @kind object;
  #L080536.  v1:= "\r\n" @kind object;
  #L08053a.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L080540.  v0:= 0I;
  #L080542.  call temp:= `a`(v5) @signature `La/q;.a:()I` @kind virtual;
  #L080548.  v1:= temp;
  #L08054a.  if v0 >= v1 then goto L08058e;
  #L08054e.  v2:= v4.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L080552.  call temp:= `a`(v5, v0) @signature `La/q;.a:(I)Ljava/lang/String;` @kind virtual;
  #L080558.  v3:= temp @kind object;
  #L08055a.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L080560.  v2:= temp @kind object;
  #L080562.  v3:= ": " @kind object;
  #L080566.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L08056c.  v2:= temp @kind object;
  #L08056e.  call temp:= `b`(v5, v0) @signature `La/q;.b:(I)Ljava/lang/String;` @kind virtual;
  #L080574.  v3:= temp @kind object;
  #L080576.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L08057c.  v2:= temp @kind object;
  #L08057e.  v3:= "\r\n" @kind object;
  #L080582.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L080588.  v0:= v0 + 1;
  #L08058c.  goto L08054a;
  #L08058e.  v0:= v4.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L080592.  v1:= "\r\n" @kind object;
  #L080596.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L08059c.  v0:= 1I;
  #L08059e.  v4.`a.a.d.a.e` @type ^`int` := v0;
  #L0805a2.  return @kind void;
}
procedure `void` `a`(`a.a.d.a` v2 @kind this, `a.x` v3 @kind object) @signature `La/a/d/a;.a:(La/x;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0805b4.  v0:= v2.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L0805b8.  call temp:= `b`(v0) @signature `La/a/b/g;.b:()La/a/b/c;` @kind virtual;
  #L0805be.  v0:= temp @kind object;
  #L0805c0.  call temp:= `a`(v0) @signature `La/a/b/c;.a:()La/ab;` @kind virtual;
  #L0805c6.  v0:= temp @kind object;
  #L0805c8.  call temp:= `b`(v0) @signature `La/ab;.b:()Ljava/net/Proxy;` @kind virtual;
  #L0805ce.  v0:= temp @kind object;
  #L0805d0.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L0805d6.  v0:= temp @kind object;
  #L0805d8.  call temp:= `a`(v3, v0) @signature `La/a/c/i;.a:(La/x;Ljava/net/Proxy$Type;)Ljava/lang/String;` @kind static;
  #L0805de.  v0:= temp @kind object;
  #L0805e0.  call temp:= `c`(v3) @signature `La/x;.c:()La/q;` @kind virtual;
  #L0805e6.  v1:= temp @kind object;
  #L0805e8.  call `a`(v2, v1, v0) @signature `La/a/d/a;.a:(La/q;Ljava/lang/String;)V` @kind virtual;
  #L0805ee.  return @kind void;
}
procedure `void` `a`(`a.a.d.a` v2 @kind this, `b.h` v3 @kind object) @signature `La/a/d/a;.a:(Lb/h;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L080600.  call temp:= `a`(v3) @signature `Lb/h;.a:()Lb/s;` @kind virtual;
  #L080606.  v0:= temp @kind object;
  #L080608.  v1:= `@@b.s.b` @type ^`b.s` @kind object;
  #L08060c.  call temp:= `a`(v3, v1) @signature `Lb/h;.a:(Lb/s;)Lb/h;` @kind virtual;
  #L080612.  call temp:= `e_`(v0) @signature `Lb/s;.e_:()Lb/s;` @kind virtual;
  #L080618.  call temp:= `d_`(v0) @signature `Lb/s;.d_:()Lb/s;` @kind virtual;
  #L08061e.  return @kind void;
}
procedure `b.r` `b`(`a.a.d.a` v3 @kind this, `long` v4 ) @signature `La/a/d/a;.b:(J)Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L080630.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L080634.  v1:= 4I;
  #L080636.  if v0 == v1 then goto L080670;
  #L08063a.  v0:= new `java.lang.IllegalStateException`;
  #L08063e.  v1:= new `java.lang.StringBuilder`;
  #L080642.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L080648.  v2:= "state: " @kind object;
  #L08064c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L080652.  v1:= temp @kind object;
  #L080654.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L080658.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08065e.  v1:= temp @kind object;
  #L080660.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L080666.  v1:= temp @kind object;
  #L080668.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08066e.  throw v0;
  #L080670.  v0:= 5I;
  #L080672.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L080676.  v0:= new `a.a.d.a$e`;
  #L08067a.  call `<init>`(v0, v3, v4) @signature `La/a/d/a$e;.<init>:(La/a/d/a;J)V` @kind direct;
  #L080680.  return v0 @kind object;
}
procedure `void` `b`(`a.a.d.a` v1 @kind this) @signature `La/a/d/a;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L080694.  v0:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L080698.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L08069e.  return @kind void;
}
procedure `a.q` `c`(`a.a.d.a` v3 @kind this) @signature `La/a/d/a;.c:()La/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0806b0.  v0:= new `a.q$a`;
  #L0806b4.  call `<init>`(v0) @signature `La/q$a;.<init>:()V` @kind direct;
  #L0806ba.  v1:= v3.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L0806be.  call temp:= `p`(v1) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #L0806c4.  v1:= temp @kind object;
  #L0806c6.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L0806cc.  v2:= temp;
  #L0806ce.  if v2 == 0 then goto L0806de;
  #L0806d2.  v2:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L0806d6.  call `a`(v2, v0, v1) @signature `La/a/a;.a:(La/q$a;Ljava/lang/String;)V` @kind virtual;
  #L0806dc.  goto L0806ba;
  #L0806de.  call temp:= `a`(v0) @signature `La/q$a;.a:()La/q;` @kind virtual;
  #L0806e4.  v0:= temp @kind object;
  #L0806e6.  return v0 @kind object;
}
procedure `b.q` `d`(`a.a.d.a` v3 @kind this) @signature `La/a/d/a;.d:()Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0806f8.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L0806fc.  v1:= 1I;
  #L0806fe.  if v0 == v1 then goto L080738;
  #L080702.  v0:= new `java.lang.IllegalStateException`;
  #L080706.  v1:= new `java.lang.StringBuilder`;
  #L08070a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L080710.  v2:= "state: " @kind object;
  #L080714.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08071a.  v1:= temp @kind object;
  #L08071c.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L080720.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L080726.  v1:= temp @kind object;
  #L080728.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08072e.  v1:= temp @kind object;
  #L080730.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080736.  throw v0;
  #L080738.  v0:= 2I;
  #L08073a.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L08073e.  v0:= new `a.a.d.a$b`;
  #L080742.  call `<init>`(v0, v3) @signature `La/a/d/a$b;.<init>:(La/a/d/a;)V` @kind direct;
  #L080748.  return v0 @kind object;
}
procedure `b.r` `e`(`a.a.d.a` v3 @kind this) @signature `La/a/d/a;.e:()Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L08075c.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L080760.  v1:= 4I;
  #L080762.  if v0 == v1 then goto L08079c;
  #L080766.  v0:= new `java.lang.IllegalStateException`;
  #L08076a.  v1:= new `java.lang.StringBuilder`;
  #L08076e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L080774.  v2:= "state: " @kind object;
  #L080778.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08077e.  v1:= temp @kind object;
  #L080780.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L080784.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08078a.  v1:= temp @kind object;
  #L08078c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L080792.  v1:= temp @kind object;
  #L080794.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08079a.  throw v0;
  #L08079c.  v0:= v3.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L0807a0.  if v0 != 0 then goto L0807b4;
  #L0807a4.  v0:= new `java.lang.IllegalStateException`;
  #L0807a8.  v1:= "streamAllocation == null" @kind object;
  #L0807ac.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0807b2.  throw v0;
  #L0807b4.  v0:= 5I;
  #L0807b6.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L0807ba.  v0:= v3.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L0807be.  call `d`(v0) @signature `La/a/b/g;.d:()V` @kind virtual;
  #L0807c4.  v0:= new `a.a.d.a$f`;
  #L0807c8.  call `<init>`(v0, v3) @signature `La/a/d/a$f;.<init>:(La/a/d/a;)V` @kind direct;
  #L0807ce.  return v0 @kind object;
}
