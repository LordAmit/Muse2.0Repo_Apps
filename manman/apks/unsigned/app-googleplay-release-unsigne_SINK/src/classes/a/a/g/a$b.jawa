record `a.a.g.a$b` @kind class @AccessFlag FINAL {
  `java.lang.reflect.Method` `a.a.g.a$b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.g.a$b.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.g.a$b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.g.a$b` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object) @signature `La/a/g/a$b;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L087a84.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L087a8a.  v0.`a.a.g.a$b.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L087a8e.  v0.`a.a.g.a$b.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L087a92.  v0.`a.a.g.a$b.c` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L087a96.  return @kind void;
}
procedure `a.a.g.a$b` `a`() @signature `La/a/g/a$b;.a:()La/a/g/a$b;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L087aa8.  v0:= 0I;
  #Try_start0.  
  #L087aaa.  v1:= "dalvik.system.CloseGuard" @kind object;
  #L087aae.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L087ab4.  v3:= temp @kind object;
  #L087ab6.  v1:= "get" @kind object;
  #L087aba.  v2:= 0I;
  #L087abc.  v2:= new `java.lang.Class`[v2];
  #L087ac0.  call temp:= `getMethod`(v3, v1, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L087ac6.  v2:= temp @kind object;
  #L087ac8.  v1:= "open" @kind object;
  #L087acc.  v4:= 1I;
  #L087ace.  v4:= new `java.lang.Class`[v4];
  #L087ad2.  v5:= 0I;
  #L087ad4.  v6:= constclass @type ^`java.lang.String` @kind object;
  #L087ad8.  v4[v5]:= v6 @kind object;
  #L087adc.  call temp:= `getMethod`(v3, v1, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L087ae2.  v1:= temp @kind object;
  #L087ae4.  v4:= "warnIfOpen" @kind object;
  #L087ae8.  v5:= 0I;
  #L087aea.  v5:= new `java.lang.Class`[v5];
  #L087aee.  call temp:= `getMethod`(v3, v4, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #Try_end0.  
  #L087af4.  v0:= temp @kind object;
  #L087af6.  v3:= new `a.a.g.a$b`;
  #L087afa.  call `<init>`(v3, v2, v1, v0) @signature `La/a/g/a$b;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @kind direct;
  #L087b00.  return v3 @kind object;
  #L087b02.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L087b04.  v1:= v0 @kind object;
  #L087b06.  v2:= v0 @kind object;
  #L087b08.  goto L087af6;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L087b02;
}
procedure `java.lang.Object` `a`(`a.a.g.a$b` v5 @kind this, `java.lang.String` v6 @kind object) @signature `La/a/g/a$b;.a:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L087b2c.  v1:= 0I;
  #L087b2e.  v0:= v5.`a.a.g.a$b.a` @type ^`java.lang.reflect.Method` @kind object;
  #L087b32.  if v0 == 0 then goto L087b64;
  #Try_start0.  
  #L087b36.  v0:= v5.`a.a.g.a$b.a` @type ^`java.lang.reflect.Method` @kind object;
  #L087b3a.  v2:= 0I;
  #L087b3c.  v3:= 0I;
  #L087b3e.  v3:= new `java.lang.Object`[v3];
  #L087b42.  call temp:= `invoke`(v0, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L087b48.  v0:= temp @kind object;
  #L087b4a.  v2:= v5.`a.a.g.a$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L087b4e.  v3:= 1I;
  #L087b50.  v3:= new `java.lang.Object`[v3];
  #L087b54.  v4:= 0I;
  #L087b56.  v3[v4]:= v6 @kind object;
  #L087b5a.  call temp:= `invoke`(v2, v0, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L087b60.  return v0 @kind object;
  #L087b62.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L087b64.  v0:= v1 @kind object;
  #L087b66.  goto L087b60;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L087b62;
}
procedure `boolean` `a`(`a.a.g.a$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `La/a/g/a$b;.a:(Ljava/lang/Object;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L087b88.  v0:= 0I;
  #L087b8a.  if v4 == 0 then goto L087ba0;
  #Try_start0.  
  #L087b8e.  v1:= v3.`a.a.g.a$b.c` @type ^`java.lang.reflect.Method` @kind object;
  #L087b92.  v2:= 0I;
  #L087b94.  v2:= new `java.lang.Object`[v2];
  #L087b98.  call temp:= `invoke`(v1, v4, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L087b9e.  v0:= 1I;
  #L087ba0.  return v0;
  #L087ba2.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L087ba4.  goto L087ba0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L087ba2;
}
