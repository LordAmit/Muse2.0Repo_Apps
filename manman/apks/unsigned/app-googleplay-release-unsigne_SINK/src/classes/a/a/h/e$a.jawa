record `a.a.h.e$a` @kind class @AccessFlag FINAL extends `a.a.h.e` @kind class {
  `javax.net.ssl.X509TrustManager` `a.a.h.e$a.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.h.e$a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.h.e$a` v0 @kind this, `javax.net.ssl.X509TrustManager` v1 @kind object, `java.lang.reflect.Method` v2 @kind object) @signature `La/a/h/e$a;.<init>:(Ljavax/net/ssl/X509TrustManager;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L089f2c.  call `<init>`(v0) @signature `La/a/h/e;.<init>:()V` @kind direct;
  #L089f32.  v0.`a.a.h.e$a.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L089f36.  v0.`a.a.h.e$a.a` @type ^`javax.net.ssl.X509TrustManager` := v1 @kind object;
  #L089f3a.  return @kind void;
}
procedure `java.security.cert.X509Certificate` `a`(`a.a.h.e$a` v5 @kind this, `java.security.cert.X509Certificate` v6 @kind object) @signature `La/a/h/e$a;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L089f4c.  v1:= 0I;
  #Try_start0.  
  #L089f4e.  v0:= v5.`a.a.h.e$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L089f52.  v2:= v5.`a.a.h.e$a.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L089f56.  v3:= 1I;
  #L089f58.  v3:= new `java.lang.Object`[v3];
  #L089f5c.  v4:= 0I;
  #L089f5e.  v3[v4]:= v6 @kind object;
  #L089f62.  call temp:= `invoke`(v0, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L089f68.  v0:= temp @kind object;
  #L089f6a.  v0:= (`java.security.cert.TrustAnchor`) v0 @kind object;
  #L089f6e.  if v0 == 0 then goto L089f7c;
  #L089f72.  call temp:= `getTrustedCert`(v0) @signature `Ljava/security/cert/TrustAnchor;.getTrustedCert:()Ljava/security/cert/X509Certificate;` @kind virtual;
  #Try_end0.  
  #L089f78.  v0:= temp @kind object;
  #L089f7a.  return v0 @kind object;
  #L089f7c.  v0:= v1 @kind object;
  #L089f7e.  goto L089f7a;
  #L089f80.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L089f82.  v0:= new `java.lang.AssertionError`;
  #L089f86.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L089f8c.  throw v0;
  #L089f8e.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L089f90.  v0:= v1 @kind object;
  #L089f92.  goto L089f7a;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L089f80;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L089f8e;
}
procedure `boolean` `equals`(`a.a.h.e$a` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `La/a/h/e$a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L089fb4.  v0:= 1I;
  #L089fb6.  v1:= 0I;
  #L089fb8.  if v5 != v4 then goto L089fbe;
  #L089fbc.  return v0;
  #L089fbe.  v2:= instanceof @variable v5 @type ^`a.a.h.e$a` @kind boolean;
  #L089fc2.  if v2 != 0 then goto L089fca;
  #L089fc6.  v0:= v1;
  #L089fc8.  goto L089fbc;
  #L089fca.  v5:= (`a.a.h.e$a`) v5 @kind object;
  #L089fce.  v2:= v4.`a.a.h.e$a.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L089fd2.  v3:= v5.`a.a.h.e$a.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L089fd6.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L089fdc.  v2:= temp;
  #L089fde.  if v2 == 0 then goto L089ff6;
  #L089fe2.  v2:= v4.`a.a.h.e$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L089fe6.  v3:= v5.`a.a.h.e$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L089fea.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/reflect/Method;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L089ff0.  v2:= temp;
  #L089ff2.  if v2 != 0 then goto L089fbc;
  #L089ff6.  v0:= v1;
  #L089ff8.  goto L089fbc;
}
procedure `int` `hashCode`(`a.a.h.e$a` v2 @kind this) @signature `La/a/h/e$a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08a00c.  v0:= v2.`a.a.h.e$a.a` @type ^`javax.net.ssl.X509TrustManager` @kind object;
  #L08a010.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L08a016.  v0:= temp;
  #L08a018.  v1:= v2.`a.a.h.e$a.b` @type ^`java.lang.reflect.Method` @kind object;
  #L08a01c.  call temp:= `hashCode`(v1) @signature `Ljava/lang/reflect/Method;.hashCode:()I` @kind virtual;
  #L08a022.  v1:= temp;
  #L08a024.  v1:= v1 * 31;
  #L08a028.  v0:= v0 + v1 @kind int;
  #L08a02a.  return v0;
}
