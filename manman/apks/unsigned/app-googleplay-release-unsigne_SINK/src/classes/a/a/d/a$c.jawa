record `a.a.d.a$c` @kind class @AccessFlag  extends `a.a.d.a$a` @kind class {
  `a.a.d.a` `a.a.d.a$c.d` @AccessFlag FINAL_SYNTHETIC;
  `a.r` `a.a.d.a$c.e` @AccessFlag PRIVATE_FINAL;
  `long` `a.a.d.a$c.f` @AccessFlag PRIVATE;
  `boolean` `a.a.d.a$c.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$c` v2 @kind this, `a.a.d.a` v3 @kind object, `a.r` v4 @kind object) @signature `La/a/d/a$c;.<init>:(La/a/d/a;La/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07fb30.  v2.`a.a.d.a$c.d` @type ^`a.a.d.a` := v3 @kind object;
  #L07fb34.  v0:= 0I;
  #L07fb36.  call `<init>`(v2, v3, v0) @signature `La/a/d/a$a;.<init>:(La/a/d/a;La/a/d/a$1;)V` @kind direct;
  #L07fb3c.  v0:= -1L;
  #L07fb40.  v2.`a.a.d.a$c.f` @type ^`long` := v0 @kind wide;
  #L07fb44.  v0:= 1I;
  #L07fb46.  v2.`a.a.d.a$c.g` @type ^`boolean` := v0 @kind boolean;
  #L07fb4a.  v2.`a.a.d.a$c.e` @type ^`a.r` := v4 @kind object;
  #L07fb4e.  return @kind void;
}
procedure `void` `b`(`a.a.d.a$c` v6 @kind this) @signature `La/a/d/a$c;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07fb60.  v4:= 0L;
  #L07fb64.  v0:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07fb68.  v2:= -1L;
  #L07fb6c.  v0:= lcmp(v0, v2);
  #L07fb70.  if v0 == 0 then goto L07fb82;
  #L07fb74.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07fb78.  v0:= v0.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07fb7c.  call temp:= `p`(v0) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #Try_start0.  
  #L07fb82.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07fb86.  v0:= v0.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07fb8a.  call temp:= `m`(v0) @signature `Lb/e;.m:()J` @kind interface;
  #L07fb90.  v0:= temp @kind wide;
  #L07fb92.  v6.`a.a.d.a$c.f` @type ^`long` := v0 @kind wide;
  #L07fb96.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07fb9a.  v0:= v0.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07fb9e.  call temp:= `p`(v0) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #L07fba4.  v0:= temp @kind object;
  #L07fba6.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L07fbac.  v0:= temp @kind object;
  #L07fbae.  v2:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07fbb2.  v1:= lcmp(v2, v4);
  #L07fbb6.  if v1 < 0 then goto L07fbd6;
  #L07fbba.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L07fbc0.  v1:= temp;
  #L07fbc2.  if v1 != 0 then goto L07fc36;
  #L07fbc6.  v1:= ";" @kind object;
  #L07fbca.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L07fbd0.  v1:= temp;
  #L07fbd2.  if v1 != 0 then goto L07fc36;
  #L07fbd6.  v1:= new `java.net.ProtocolException`;
  #L07fbda.  v2:= new `java.lang.StringBuilder`;
  #L07fbde.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07fbe4.  v3:= "expected chunk size and optional extensions but was \"" @kind object;
  #L07fbe8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07fbee.  v2:= temp @kind object;
  #L07fbf0.  v4:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07fbf4.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07fbfa.  v2:= temp @kind object;
  #L07fbfc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07fc02.  v0:= temp @kind object;
  #L07fc04.  v2:= "\"" @kind object;
  #L07fc08.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07fc0e.  v0:= temp @kind object;
  #L07fc10.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07fc16.  v0:= temp @kind object;
  #L07fc18.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07fc1e.  throw v1;
  #Try_end0.  
  #L07fc20.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L07fc22.  v1:= new `java.net.ProtocolException`;
  #L07fc26.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L07fc2c.  v0:= temp @kind object;
  #L07fc2e.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07fc34.  throw v1;
  #L07fc36.  v0:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07fc3a.  v0:= lcmp(v0, v4);
  #L07fc3e.  if v0 != 0 then goto L07fc76;
  #L07fc42.  v0:= 0I;
  #L07fc44.  v6.`a.a.d.a$c.g` @type ^`boolean` := v0 @kind boolean;
  #L07fc48.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07fc4c.  v0:= v0.`a.a.d.a.a` @type ^`a.u` @kind object;
  #L07fc50.  call temp:= `f`(v0) @signature `La/u;.f:()La/m;` @kind virtual;
  #L07fc56.  v0:= temp @kind object;
  #L07fc58.  v1:= v6.`a.a.d.a$c.e` @type ^`a.r` @kind object;
  #L07fc5c.  v2:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07fc60.  call temp:= `c`(v2) @signature `La/a/d/a;.c:()La/q;` @kind virtual;
  #L07fc66.  v2:= temp @kind object;
  #L07fc68.  call `a`(v0, v1, v2) @signature `La/a/c/e;.a:(La/m;La/r;La/q;)V` @kind static;
  #L07fc6e.  v0:= 1I;
  #L07fc70.  call `a`(v6, v0) @signature `La/a/d/a$c;.a:(Z)V` @kind virtual;
  #L07fc76.  return @kind void;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L07fc20;
}
procedure `long` `a`(`a.a.d.a$c` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `La/a/d/a$c;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07fc98.  v4:= 0L;
  #L07fc9c.  v0:= -1L;
  #L07fca0.  v2:= lcmp(v8, v4);
  #L07fca4.  if v2 >= 0 then goto L07fcda;
  #L07fca8.  v0:= new `java.lang.IllegalArgumentException`;
  #L07fcac.  v1:= new `java.lang.StringBuilder`;
  #L07fcb0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07fcb6.  v2:= "byteCount < 0: " @kind object;
  #L07fcba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07fcc0.  v1:= temp @kind object;
  #L07fcc2.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07fcc8.  v1:= temp @kind object;
  #L07fcca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07fcd0.  v1:= temp @kind object;
  #L07fcd2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07fcd8.  throw v0;
  #L07fcda.  v2:= v6.`a.a.d.a$c.b` @type ^`boolean` @kind boolean;
  #L07fcde.  if v2 == 0 then goto L07fcf2;
  #L07fce2.  v0:= new `java.lang.IllegalStateException`;
  #L07fce6.  v1:= "closed" @kind object;
  #L07fcea.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07fcf0.  throw v0;
  #L07fcf2.  v2:= v6.`a.a.d.a$c.g` @type ^`boolean` @kind boolean;
  #L07fcf6.  if v2 != 0 then goto L07fcfc;
  #L07fcfa.  return v0 @kind wide;
  #L07fcfc.  v2:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07fd00.  v2:= lcmp(v2, v4);
  #L07fd04.  if v2 == 0 then goto L07fd14;
  #L07fd08.  v2:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07fd0c.  v2:= lcmp(v2, v0);
  #L07fd10.  if v2 != 0 then goto L07fd22;
  #L07fd14.  call `b`(v6) @signature `La/a/d/a$c;.b:()V` @kind direct;
  #L07fd1a.  v2:= v6.`a.a.d.a$c.g` @type ^`boolean` @kind boolean;
  #L07fd1e.  if v2 == 0 then goto L07fcfa;
  #L07fd22.  v2:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07fd26.  v2:= v2.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07fd2a.  v4:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07fd2e.  call temp:= `min`(v8, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L07fd34.  v4:= temp @kind wide;
  #L07fd36.  call temp:= `a`(v2, v7, v4) @signature `Lb/e;.a:(Lb/c;J)J` @kind interface;
  #L07fd3c.  v2:= temp @kind wide;
  #L07fd3e.  v0:= lcmp(v2, v0);
  #L07fd42.  if v0 != 0 then goto L07fd5e;
  #L07fd46.  v0:= 0I;
  #L07fd48.  call `a`(v6, v0) @signature `La/a/d/a$c;.a:(Z)V` @kind virtual;
  #L07fd4e.  v0:= new `java.net.ProtocolException`;
  #L07fd52.  v1:= "unexpected end of stream" @kind object;
  #L07fd56.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07fd5c.  throw v0;
  #L07fd5e.  v0:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07fd62.  v0:= v0 - v2 @kind long;
  #L07fd64.  v6.`a.a.d.a$c.f` @type ^`long` := v0 @kind wide;
  #L07fd68.  v0:= v2 @kind wide;
  #L07fd6a.  goto L07fcfa;
}
procedure `void` `close`(`a.a.d.a$c` v2 @kind this) @signature `La/a/d/a$c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07fd7c.  v0:= v2.`a.a.d.a$c.b` @type ^`boolean` @kind boolean;
  #L07fd80.  if v0 == 0 then goto L07fd86;
  #L07fd84.  return @kind void;
  #L07fd86.  v0:= v2.`a.a.d.a$c.g` @type ^`boolean` @kind boolean;
  #L07fd8a.  if v0 == 0 then goto L07fdaa;
  #L07fd8e.  v0:= 100I;
  #L07fd92.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L07fd96.  call temp:= `a`(v2, v0, v1) @signature `La/a/c;.a:(Lb/r;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L07fd9c.  v0:= temp;
  #L07fd9e.  if v0 != 0 then goto L07fdaa;
  #L07fda2.  v0:= 0I;
  #L07fda4.  call `a`(v2, v0) @signature `La/a/d/a$c;.a:(Z)V` @kind virtual;
  #L07fdaa.  v0:= 1I;
  #L07fdac.  v2.`a.a.d.a$c.b` @type ^`boolean` := v0 @kind boolean;
  #L07fdb0.  goto L07fd84;
}
