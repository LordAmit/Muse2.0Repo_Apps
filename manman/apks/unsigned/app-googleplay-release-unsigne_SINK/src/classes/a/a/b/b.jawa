record `a.a.b.b` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `a.a.b.b.a` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.b.b.b` @AccessFlag PRIVATE;
  `boolean` `a.a.b.b.c` @AccessFlag PRIVATE;
  `boolean` `a.a.b.b.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.b.b` v1 @kind this, `java.util.List` v2 @kind object) @signature `La/a/b/b;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L07b450.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07b456.  v0:= 0I;
  #L07b458.  v1.`a.a.b.b.b` @type ^`int` := v0;
  #L07b45c.  v1.`a.a.b.b.a` @type ^`java.util.List` := v2 @kind object;
  #L07b460.  return @kind void;
}
procedure `boolean` `b`(`a.a.b.b` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object) @signature `La/a/b/b;.b:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07b474.  v0:= v2.`a.a.b.b.b` @type ^`int`;
  #L07b478.  v1:= v0;
  #L07b47a.  v0:= v2.`a.a.b.b.a` @type ^`java.util.List` @kind object;
  #L07b47e.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07b484.  v0:= temp;
  #L07b486.  if v1 >= v0 then goto L07b4b2;
  #L07b48a.  v0:= v2.`a.a.b.b.a` @type ^`java.util.List` @kind object;
  #L07b48e.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07b494.  v0:= temp @kind object;
  #L07b496.  v0:= (`a.k`) v0 @kind object;
  #L07b49a.  call temp:= `a`(v0, v3) @signature `La/k;.a:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L07b4a0.  v0:= temp;
  #L07b4a2.  if v0 == 0 then goto L07b4aa;
  #L07b4a6.  v0:= 1I;
  #L07b4a8.  return v0;
  #L07b4aa.  v0:= v1 + 1;
  #L07b4ae.  v1:= v0;
  #L07b4b0.  goto L07b47a;
  #L07b4b2.  v0:= 0I;
  #L07b4b4.  goto L07b4a8;
}
procedure `a.k` `a`(`a.a.b.b` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object) @signature `La/a/b/b;.a:(Ljavax/net/ssl/SSLSocket;)La/k;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L07b4c8.  v1:= 0I;
  #L07b4ca.  v0:= v5.`a.a.b.b.b` @type ^`int`;
  #L07b4ce.  v2:= v5.`a.a.b.b.a` @type ^`java.util.List` @kind object;
  #L07b4d2.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07b4d8.  v3:= temp;
  #L07b4da.  v2:= v0;
  #L07b4dc.  if v2 >= v3 then goto L07b59e;
  #L07b4e0.  v0:= v5.`a.a.b.b.a` @type ^`java.util.List` @kind object;
  #L07b4e4.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07b4ea.  v0:= temp @kind object;
  #L07b4ec.  v0:= (`a.k`) v0 @kind object;
  #L07b4f0.  call temp:= `a`(v0, v6) @signature `La/k;.a:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L07b4f6.  v4:= temp;
  #L07b4f8.  if v4 == 0 then goto L07b57a;
  #L07b4fc.  v1:= v2 + 1;
  #L07b500.  v5.`a.a.b.b.b` @type ^`int` := v1;
  #L07b504.  if v0 != 0 then goto L07b582;
  #L07b508.  v0:= new `java.net.UnknownServiceException`;
  #L07b50c.  v1:= new `java.lang.StringBuilder`;
  #L07b510.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07b516.  v2:= "Unable to find acceptable protocols. isFallback=" @kind object;
  #L07b51a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b520.  v1:= temp @kind object;
  #L07b522.  v2:= v5.`a.a.b.b.d` @type ^`boolean` @kind boolean;
  #L07b526.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b52c.  v1:= temp @kind object;
  #L07b52e.  v2:= ", modes=" @kind object;
  #L07b532.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b538.  v1:= temp @kind object;
  #L07b53a.  v2:= v5.`a.a.b.b.a` @type ^`java.util.List` @kind object;
  #L07b53e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b544.  v1:= temp @kind object;
  #L07b546.  v2:= ", supported protocols=" @kind object;
  #L07b54a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b550.  v1:= temp @kind object;
  #L07b552.  call temp:= `getEnabledProtocols`(v6) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L07b558.  v2:= temp @kind object;
  #L07b55a.  call temp:= `toString`(v2) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L07b560.  v2:= temp @kind object;
  #L07b562.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b568.  v1:= temp @kind object;
  #L07b56a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07b570.  v1:= temp @kind object;
  #L07b572.  call `<init>`(v0, v1) @signature `Ljava/net/UnknownServiceException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b578.  throw v0;
  #L07b57a.  v0:= v2 + 1;
  #L07b57e.  v2:= v0;
  #L07b580.  goto L07b4dc;
  #L07b582.  call temp:= `b`(v5, v6) @signature `La/a/b/b;.b:(Ljavax/net/ssl/SSLSocket;)Z` @kind direct;
  #L07b588.  v1:= temp;
  #L07b58a.  v5.`a.a.b.b.c` @type ^`boolean` := v1 @kind boolean;
  #L07b58e.  v1:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L07b592.  v2:= v5.`a.a.b.b.d` @type ^`boolean` @kind boolean;
  #L07b596.  call `a`(v1, v0, v6, v2) @signature `La/a/a;.a:(La/k;Ljavax/net/ssl/SSLSocket;Z)V` @kind virtual;
  #L07b59c.  return v0 @kind object;
  #L07b59e.  v0:= v1 @kind object;
  #L07b5a0.  goto L07b504;
}
procedure `boolean` `a`(`a.a.b.b` v3 @kind this, `java.io.IOException` v4 @kind object) @signature `La/a/b/b;.a:(Ljava/io/IOException;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07b5b4.  v1:= 1I;
  #L07b5b6.  v0:= 0I;
  #L07b5b8.  v3.`a.a.b.b.d` @type ^`boolean` := v1 @kind boolean;
  #L07b5bc.  v2:= v3.`a.a.b.b.c` @type ^`boolean` @kind boolean;
  #L07b5c0.  if v2 != 0 then goto L07b5c6;
  #L07b5c4.  return v0;
  #L07b5c6.  v2:= instanceof @variable v4 @type ^`java.net.ProtocolException` @kind boolean;
  #L07b5ca.  if v2 != 0 then goto L07b5c4;
  #L07b5ce.  v2:= instanceof @variable v4 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L07b5d2.  if v2 != 0 then goto L07b5c4;
  #L07b5d6.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L07b5da.  if v2 == 0 then goto L07b5ee;
  #L07b5de.  call temp:= `getCause`(v4) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L07b5e4.  v2:= temp @kind object;
  #L07b5e6.  v2:= instanceof @variable v2 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L07b5ea.  if v2 != 0 then goto L07b5c4;
  #L07b5ee.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L07b5f2.  if v2 != 0 then goto L07b5c4;
  #L07b5f6.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L07b5fa.  if v2 != 0 then goto L07b606;
  #L07b5fe.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLProtocolException` @kind boolean;
  #L07b602.  if v2 == 0 then goto L07b5c4;
  #L07b606.  v0:= v1;
  #L07b608.  goto L07b5c4;
}
