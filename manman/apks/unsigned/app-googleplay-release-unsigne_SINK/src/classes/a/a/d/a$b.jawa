record `a.a.d.a$b` @kind class @AccessFlag FINAL extends `b.q` @kind interface {
  `a.a.d.a` `a.a.d.a$b.a` @AccessFlag FINAL_SYNTHETIC;
  `b.h` `a.a.d.a$b.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.a.d.a$b.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$b` v2 @kind this, `a.a.d.a` v3 @kind object) @signature `La/a/d/a$b;.<init>:(La/a/d/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07f9b0.  v2.`a.a.d.a$b.a` @type ^`a.a.d.a` := v3 @kind object;
  #L07f9b4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07f9ba.  v0:= new `b.h`;
  #L07f9be.  v1:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07f9c2.  v1:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07f9c6.  call temp:= `a`(v1) @signature `Lb/d;.a:()Lb/s;` @kind interface;
  #L07f9cc.  v1:= temp @kind object;
  #L07f9ce.  call `<init>`(v0, v1) @signature `Lb/h;.<init>:(Lb/s;)V` @kind direct;
  #L07f9d4.  v2.`a.a.d.a$b.b` @type ^`b.h` := v0 @kind object;
  #L07f9d8.  return @kind void;
}
procedure `b.s` `a`(`a.a.d.a$b` v1 @kind this) @signature `La/a/d/a$b;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f9ec.  v0:= v1.`a.a.d.a$b.b` @type ^`b.h` @kind object;
  #L07f9f0.  return v0 @kind object;
}
procedure `void` `a_`(`a.a.d.a$b` v2 @kind this, `b.c` v3 @kind object, `long` v4 ) @signature `La/a/d/a$b;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07fa04.  v0:= v2.`a.a.d.a$b.c` @type ^`boolean` @kind boolean;
  #L07fa08.  if v0 == 0 then goto L07fa1c;
  #L07fa0c.  v0:= new `java.lang.IllegalStateException`;
  #L07fa10.  v1:= "closed" @kind object;
  #L07fa14.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07fa1a.  throw v0;
  #L07fa1c.  v0:= 0L;
  #L07fa20.  v0:= lcmp(v4, v0);
  #L07fa24.  if v0 != 0 then goto L07fa2a;
  #L07fa28.  return @kind void;
  #L07fa2a.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07fa2e.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07fa32.  call temp:= `j`(v0, v4) @signature `Lb/d;.j:(J)Lb/d;` @kind interface;
  #L07fa38.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07fa3c.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07fa40.  v1:= "\r\n" @kind object;
  #L07fa44.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07fa4a.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07fa4e.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07fa52.  call `a_`(v0, v3, v4) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L07fa58.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07fa5c.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07fa60.  v1:= "\r\n" @kind object;
  #L07fa64.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07fa6a.  goto L07fa28;
}
procedure `void` `close`(`a.a.d.a$b` v2 @kind this) @signature `La/a/d/a$b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07fa7c.  @monitorenter v2
  #Try_start0.  
  #L07fa7e.  v0:= v2.`a.a.d.a$b.c` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L07fa82.  if v0 == 0 then goto L07fa8a;
  #L07fa86.  @monitorexit v2
  #L07fa88.  return @kind void;
  #L07fa8a.  v0:= 1I;
  #Try_start1.  
  #L07fa8c.  v2.`a.a.d.a$b.c` @type ^`boolean` := v0 @kind boolean;
  #L07fa90.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07fa94.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07fa98.  v1:= "0\r\n\r\n" @kind object;
  #L07fa9c.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07faa2.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07faa6.  v1:= v2.`a.a.d.a$b.b` @type ^`b.h` @kind object;
  #L07faaa.  call `a`(v0, v1) @signature `La/a/d/a;.a:(Lb/h;)V` @kind virtual;
  #L07fab0.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07fab4.  v1:= 3I;
  #L07fab6.  v0.`a.a.d.a.e` @type ^`int` := v1;
  #Try_end1.  
  #L07faba.  goto L07fa86;
  #L07fabc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07fabe.  @monitorexit v2
  #L07fac0.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07fabc;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07fabc;
}
procedure `void` `flush`(`a.a.d.a$b` v1 @kind this) @signature `La/a/d/a$b;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07fae8.  @monitorenter v1
  #Try_start0.  
  #L07faea.  v0:= v1.`a.a.d.a$b.c` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L07faee.  if v0 == 0 then goto L07faf6;
  #L07faf2.  @monitorexit v1
  #L07faf4.  return @kind void;
  #Try_start1.  
  #L07faf6.  v0:= v1.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07fafa.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07fafe.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L07fb04.  goto L07faf2;
  #L07fb06.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07fb08.  @monitorexit v1
  #L07fb0a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07fb06;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07fb06;
}
