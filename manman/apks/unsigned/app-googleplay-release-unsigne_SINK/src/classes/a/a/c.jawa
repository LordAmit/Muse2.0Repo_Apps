record `a.a.c` @kind class @AccessFlag PUBLIC_FINAL {
}
global `byte`[] `@@a.a.c.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.lang.String`[] `@@a.a.c.b` @AccessFlag PUBLIC_STATIC_FINAL;
global `a.aa` `@@a.a.c.c` @AccessFlag PUBLIC_STATIC_FINAL;
global `a.y` `@@a.a.c.d` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.nio.charset.Charset` `@@a.a.c.e` @AccessFlag PUBLIC_STATIC_FINAL;
global `java.util.TimeZone` `@@a.a.c.f` @AccessFlag PUBLIC_STATIC_FINAL;
global `b.f` `@@a.a.c.g` @AccessFlag PRIVATE_STATIC_FINAL;
global `b.f` `@@a.a.c.h` @AccessFlag PRIVATE_STATIC_FINAL;
global `b.f` `@@a.a.c.i` @AccessFlag PRIVATE_STATIC_FINAL;
global `b.f` `@@a.a.c.j` @AccessFlag PRIVATE_STATIC_FINAL;
global `b.f` `@@a.a.c.k` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.charset.Charset` `@@a.a.c.l` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.charset.Charset` `@@a.a.c.m` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.charset.Charset` `@@a.a.c.n` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.nio.charset.Charset` `@@a.a.c.o` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@a.a.c.p` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/a/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L07ef5c.  v2:= 0I;
  #L07ef5e.  v1:= 0I;
  #L07ef60.  v0:= new `byte`[v1];
  #L07ef64.  `@@a.a.c.a` @type ^`byte`[] := v0 @kind object;
  #L07ef68.  v0:= new `java.lang.String`[v1];
  #L07ef6c.  `@@a.a.c.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L07ef70.  v0:= `@@a.a.c.a` @type ^`byte`[] @kind object;
  #L07ef74.  call temp:= `a`(v2, v0) @signature `La/aa;.a:(La/t;[B)La/aa;` @kind static;
  #L07ef7a.  v0:= temp @kind object;
  #L07ef7c.  `@@a.a.c.c` @type ^`a.aa` := v0 @kind object;
  #L07ef80.  v0:= `@@a.a.c.a` @type ^`byte`[] @kind object;
  #L07ef84.  call temp:= `a`(v2, v0) @signature `La/y;.a:(La/t;[B)La/y;` @kind static;
  #L07ef8a.  v0:= temp @kind object;
  #L07ef8c.  `@@a.a.c.d` @type ^`a.y` := v0 @kind object;
  #L07ef90.  v0:= "efbbbf" @kind object;
  #L07ef94.  call temp:= `b`(v0) @signature `Lb/f;.b:(Ljava/lang/String;)Lb/f;` @kind static;
  #L07ef9a.  v0:= temp @kind object;
  #L07ef9c.  `@@a.a.c.g` @type ^`b.f` := v0 @kind object;
  #L07efa0.  v0:= "feff" @kind object;
  #L07efa4.  call temp:= `b`(v0) @signature `Lb/f;.b:(Ljava/lang/String;)Lb/f;` @kind static;
  #L07efaa.  v0:= temp @kind object;
  #L07efac.  `@@a.a.c.h` @type ^`b.f` := v0 @kind object;
  #L07efb0.  v0:= "fffe" @kind object;
  #L07efb4.  call temp:= `b`(v0) @signature `Lb/f;.b:(Ljava/lang/String;)Lb/f;` @kind static;
  #L07efba.  v0:= temp @kind object;
  #L07efbc.  `@@a.a.c.i` @type ^`b.f` := v0 @kind object;
  #L07efc0.  v0:= "0000ffff" @kind object;
  #L07efc4.  call temp:= `b`(v0) @signature `Lb/f;.b:(Ljava/lang/String;)Lb/f;` @kind static;
  #L07efca.  v0:= temp @kind object;
  #L07efcc.  `@@a.a.c.j` @type ^`b.f` := v0 @kind object;
  #L07efd0.  v0:= "ffff0000" @kind object;
  #L07efd4.  call temp:= `b`(v0) @signature `Lb/f;.b:(Ljava/lang/String;)Lb/f;` @kind static;
  #L07efda.  v0:= temp @kind object;
  #L07efdc.  `@@a.a.c.k` @type ^`b.f` := v0 @kind object;
  #L07efe0.  v0:= "UTF-8" @kind object;
  #L07efe4.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L07efea.  v0:= temp @kind object;
  #L07efec.  `@@a.a.c.e` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L07eff0.  v0:= "UTF-16BE" @kind object;
  #L07eff4.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L07effa.  v0:= temp @kind object;
  #L07effc.  `@@a.a.c.l` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L07f000.  v0:= "UTF-16LE" @kind object;
  #L07f004.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L07f00a.  v0:= temp @kind object;
  #L07f00c.  `@@a.a.c.m` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L07f010.  v0:= "UTF-32BE" @kind object;
  #L07f014.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L07f01a.  v0:= temp @kind object;
  #L07f01c.  `@@a.a.c.n` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L07f020.  v0:= "UTF-32LE" @kind object;
  #L07f024.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L07f02a.  v0:= temp @kind object;
  #L07f02c.  `@@a.a.c.o` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L07f030.  v0:= "GMT" @kind object;
  #L07f034.  call temp:= `getTimeZone`(v0) @signature `Ljava/util/TimeZone;.getTimeZone:(Ljava/lang/String;)Ljava/util/TimeZone;` @kind static;
  #L07f03a.  v0:= temp @kind object;
  #L07f03c.  `@@a.a.c.f` @type ^`java.util.TimeZone` := v0 @kind object;
  #L07f040.  v0:= "([0-9a-fA-F]*:[0-9a-fA-F:.]*)|([\\d.]+)" @kind object;
  #L07f044.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L07f04a.  v0:= temp @kind object;
  #L07f04c.  `@@a.a.c.p` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L07f050.  return @kind void;
}
procedure `int` `a`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `La/a/c;.a:(Ljava/lang/String;II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07f064.  v0:= v3;
  #L07f066.  if v0 >= v4 then goto L07f07a;
  #L07f06a.  call temp:= `charAt`(v2, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L07f070.  v1:= temp;
  #L07f072.  goto L07f084;
  #L07f078.  v4:= v0;
  #L07f07a.  return v4;
  #L07f07c.  v0:= v0 + 1;
  #L07f080.  goto L07f066;
  #L07f082.  
  #L07f084.  switch v1
                  | 9 => goto L07f07c
                  | 10 => goto L07f07c
                  | 12 => goto L07f07c
                  | 13 => goto L07f07c
                  | 32 => goto L07f07c
                  | else => goto L07f078;
}
procedure `int` `a`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 , `char` v5 ) @signature `La/a/c;.a:(Ljava/lang/String;IIC)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07f0c0.  v0:= v3;
  #L07f0c2.  if v0 >= v4 then goto L07f0d4;
  #L07f0c6.  call temp:= `charAt`(v2, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L07f0cc.  v1:= temp;
  #L07f0ce.  if v1 != v5 then goto L07f0d6;
  #L07f0d2.  v4:= v0;
  #L07f0d4.  return v4;
  #L07f0d6.  v0:= v0 + 1;
  #L07f0da.  goto L07f0c2;
}
procedure `int` `a`(`java.lang.String` v3 @kind object, `int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `La/a/c;.a:(Ljava/lang/String;IILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L07f0ec.  v0:= v4;
  #L07f0ee.  if v0 >= v5 then goto L07f10a;
  #L07f0f2.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L07f0f8.  v1:= temp;
  #L07f0fa.  call temp:= `indexOf`(v6, v1) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L07f100.  v1:= temp;
  #L07f102.  v2:= -1I;
  #L07f104.  if v1 == v2 then goto L07f10c;
  #L07f108.  v5:= v0;
  #L07f10a.  return v5;
  #L07f10c.  v0:= v0 + 1;
  #L07f110.  goto L07f0ee;
}
procedure `int` `a`(`java.lang.Object`[] v3 @kind object, `java.lang.Object` v4 @kind object) @signature `La/a/c;.a:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L07f124.  v0:= 0I;
  #L07f126.  v1:= length @variable v3;
  #L07f128.  if v0 >= v1 then goto L07f144;
  #L07f12c.  v2:= v3[v0] @kind object;
  #L07f130.  call temp:= `a`(v2, v4) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07f136.  v2:= temp;
  #L07f138.  if v2 == 0 then goto L07f13e;
  #L07f13c.  return v0;
  #L07f13e.  v0:= v0 + 1;
  #L07f142.  goto L07f128;
  #L07f144.  v0:= -1I;
  #L07f146.  goto L07f13c;
}
procedure `java.lang.String` `a`(`a.r` v3 @kind object, `boolean` v4 ) @signature `La/a/c;.a:(La/r;Z)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L07f158.  call temp:= `f`(v3) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L07f15e.  v0:= temp @kind object;
  #L07f160.  v1:= ":" @kind object;
  #L07f164.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L07f16a.  v0:= temp;
  #L07f16c.  if v0 == 0 then goto L07f202;
  #L07f170.  v0:= new `java.lang.StringBuilder`;
  #L07f174.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07f17a.  v1:= "[" @kind object;
  #L07f17e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07f184.  v0:= temp @kind object;
  #L07f186.  call temp:= `f`(v3) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L07f18c.  v1:= temp @kind object;
  #L07f18e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07f194.  v0:= temp @kind object;
  #L07f196.  v1:= "]" @kind object;
  #L07f19a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07f1a0.  v0:= temp @kind object;
  #L07f1a2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07f1a8.  v0:= temp @kind object;
  #L07f1aa.  if v4 != 0 then goto L07f1ca;
  #L07f1ae.  call temp:= `g`(v3) @signature `La/r;.g:()I` @kind virtual;
  #L07f1b4.  v1:= temp;
  #L07f1b6.  call temp:= `b`(v3) @signature `La/r;.b:()Ljava/lang/String;` @kind virtual;
  #L07f1bc.  v2:= temp @kind object;
  #L07f1be.  call temp:= `a`(v2) @signature `La/r;.a:(Ljava/lang/String;)I` @kind static;
  #L07f1c4.  v2:= temp;
  #L07f1c6.  if v1 == v2 then goto L07f200;
  #L07f1ca.  v1:= new `java.lang.StringBuilder`;
  #L07f1ce.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07f1d4.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07f1da.  v0:= temp @kind object;
  #L07f1dc.  v1:= ":" @kind object;
  #L07f1e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07f1e6.  v0:= temp @kind object;
  #L07f1e8.  call temp:= `g`(v3) @signature `La/r;.g:()I` @kind virtual;
  #L07f1ee.  v1:= temp;
  #L07f1f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07f1f6.  v0:= temp @kind object;
  #L07f1f8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07f1fe.  v0:= temp @kind object;
  #L07f200.  return v0 @kind object;
  #L07f202.  call temp:= `f`(v3) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L07f208.  v0:= temp @kind object;
  #L07f20a.  goto L07f1aa;
}
procedure `java.lang.String` `a`(`java.lang.String` v3 @kind object) @signature `La/a/c;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L07f21c.  v0:= 0I;
  #Try_start0.  
  #L07f21e.  call temp:= `toASCII`(v3) @signature `Ljava/net/IDN;.toASCII:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L07f224.  v1:= temp @kind object;
  #L07f226.  v2:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L07f22a.  call temp:= `toLowerCase`(v1, v2) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L07f230.  v1:= temp @kind object;
  #L07f232.  call temp:= `isEmpty`(v1) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L07f238.  v2:= temp;
  #L07f23a.  if v2 == 0 then goto L07f240;
  #L07f23e.  return v0 @kind object;
  #L07f240.  call temp:= `d`(v1) @signature `La/a/c;.d:(Ljava/lang/String;)Z` @kind static;
  #Try_end0.  
  #L07f246.  v2:= temp;
  #L07f248.  if v2 != 0 then goto L07f23e;
  #L07f24c.  v0:= v1 @kind object;
  #L07f24e.  goto L07f23e;
  #L07f250.  v1:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L07f252.  goto L07f23e;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L07f250;
}
procedure `java.lang.String` `a`(`java.lang.String` v1 @kind object, `java.lang.Object`[] v2 @kind object) @signature `La/a/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L07f274.  v0:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L07f278.  call temp:= `format`(v0, v1, v2) @signature `Ljava/lang/String;.format:(Ljava/util/Locale;Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L07f27e.  v0:= temp @kind object;
  #L07f280.  return v0 @kind object;
}
procedure `java.nio.charset.Charset` `a`(`b.e` v4 @kind object, `java.nio.charset.Charset` v5 @kind object) @signature `La/a/c;.a:(Lb/e;Ljava/nio/charset/Charset;)Ljava/nio/charset/Charset;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07f294.  v2:= 0L;
  #L07f298.  v0:= `@@a.a.c.g` @type ^`b.f` @kind object;
  #L07f29c.  call temp:= `a`(v4, v2, v0) @signature `Lb/e;.a:(JLb/f;)Z` @kind interface;
  #L07f2a2.  v0:= temp;
  #L07f2a4.  if v0 == 0 then goto L07f2c2;
  #L07f2a8.  v0:= `@@a.a.c.g` @type ^`b.f` @kind object;
  #L07f2ac.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L07f2b2.  v0:= temp;
  #L07f2b4.  v0:= (`long`) v0 @kind i2l;
  #L07f2b6.  call `g`(v4, v0) @signature `Lb/e;.g:(J)V` @kind interface;
  #L07f2bc.  v5:= `@@a.a.c.e` @type ^`java.nio.charset.Charset` @kind object;
  #L07f2c0.  return v5 @kind object;
  #L07f2c2.  v0:= `@@a.a.c.h` @type ^`b.f` @kind object;
  #L07f2c6.  call temp:= `a`(v4, v2, v0) @signature `Lb/e;.a:(JLb/f;)Z` @kind interface;
  #L07f2cc.  v0:= temp;
  #L07f2ce.  if v0 == 0 then goto L07f2ec;
  #L07f2d2.  v0:= `@@a.a.c.h` @type ^`b.f` @kind object;
  #L07f2d6.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L07f2dc.  v0:= temp;
  #L07f2de.  v0:= (`long`) v0 @kind i2l;
  #L07f2e0.  call `g`(v4, v0) @signature `Lb/e;.g:(J)V` @kind interface;
  #L07f2e6.  v5:= `@@a.a.c.l` @type ^`java.nio.charset.Charset` @kind object;
  #L07f2ea.  goto L07f2c0;
  #L07f2ec.  v0:= `@@a.a.c.i` @type ^`b.f` @kind object;
  #L07f2f0.  call temp:= `a`(v4, v2, v0) @signature `Lb/e;.a:(JLb/f;)Z` @kind interface;
  #L07f2f6.  v0:= temp;
  #L07f2f8.  if v0 == 0 then goto L07f316;
  #L07f2fc.  v0:= `@@a.a.c.i` @type ^`b.f` @kind object;
  #L07f300.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L07f306.  v0:= temp;
  #L07f308.  v0:= (`long`) v0 @kind i2l;
  #L07f30a.  call `g`(v4, v0) @signature `Lb/e;.g:(J)V` @kind interface;
  #L07f310.  v5:= `@@a.a.c.m` @type ^`java.nio.charset.Charset` @kind object;
  #L07f314.  goto L07f2c0;
  #L07f316.  v0:= `@@a.a.c.j` @type ^`b.f` @kind object;
  #L07f31a.  call temp:= `a`(v4, v2, v0) @signature `Lb/e;.a:(JLb/f;)Z` @kind interface;
  #L07f320.  v0:= temp;
  #L07f322.  if v0 == 0 then goto L07f340;
  #L07f326.  v0:= `@@a.a.c.j` @type ^`b.f` @kind object;
  #L07f32a.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L07f330.  v0:= temp;
  #L07f332.  v0:= (`long`) v0 @kind i2l;
  #L07f334.  call `g`(v4, v0) @signature `Lb/e;.g:(J)V` @kind interface;
  #L07f33a.  v5:= `@@a.a.c.n` @type ^`java.nio.charset.Charset` @kind object;
  #L07f33e.  goto L07f2c0;
  #L07f340.  v0:= `@@a.a.c.k` @type ^`b.f` @kind object;
  #L07f344.  call temp:= `a`(v4, v2, v0) @signature `Lb/e;.a:(JLb/f;)Z` @kind interface;
  #L07f34a.  v0:= temp;
  #L07f34c.  if v0 == 0 then goto L07f2c0;
  #L07f350.  v0:= `@@a.a.c.k` @type ^`b.f` @kind object;
  #L07f354.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L07f35a.  v0:= temp;
  #L07f35c.  v0:= (`long`) v0 @kind i2l;
  #L07f35e.  call `g`(v4, v0) @signature `Lb/e;.g:(J)V` @kind interface;
  #L07f364.  v5:= `@@a.a.c.o` @type ^`java.nio.charset.Charset` @kind object;
  #L07f368.  goto L07f2c0;
}
procedure `java.util.List` `a`(`java.util.List` v1 @kind object) @signature `La/a/c;.a:(Ljava/util/List;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L07f37c.  v0:= new `java.util.ArrayList`;
  #L07f380.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L07f386.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L07f38c.  v0:= temp @kind object;
  #L07f38e.  return v0 @kind object;
}
procedure `java.util.List` `a`(`java.lang.Object`[] v1 @kind object) @signature `La/a/c;.a:([Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L07f3a0.  call temp:= `clone`(v1) @signature `[Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind virtual;
  #L07f3a6.  v0:= temp @kind object;
  #L07f3a8.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L07f3ac.  call temp:= `asList`(v0) @signature `Ljava/util/Arrays;.asList:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L07f3b2.  v0:= temp @kind object;
  #L07f3b4.  call temp:= `unmodifiableList`(v0) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L07f3ba.  v0:= temp @kind object;
  #L07f3bc.  return v0 @kind object;
}
procedure `java.util.List` `a`(`java.lang.Object`[] v9 @kind object, `java.lang.Object`[] v10 @kind object) @signature `La/a/c;.a:([Ljava/lang/Object;[Ljava/lang/Object;)Ljava/util/List;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L07f3d0.  v1:= 0I;
  #L07f3d2.  v3:= new `java.util.ArrayList`;
  #L07f3d6.  call `<init>`(v3) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L07f3dc.  v4:= length @variable v9;
  #L07f3de.  v2:= v1;
  #L07f3e0.  if v2 >= v4 then goto L07f414;
  #L07f3e4.  v5:= v9[v2] @kind object;
  #L07f3e8.  v6:= length @variable v10;
  #L07f3ea.  v0:= v1;
  #L07f3ec.  if v0 >= v6 then goto L07f406;
  #L07f3f0.  v7:= v10[v0] @kind object;
  #L07f3f4.  call temp:= `equals`(v5, v7) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L07f3fa.  v8:= temp;
  #L07f3fc.  if v8 == 0 then goto L07f40e;
  #L07f400.  call temp:= `add`(v3, v7) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07f406.  v0:= v2 + 1;
  #L07f40a.  v2:= v0;
  #L07f40c.  goto L07f3e0;
  #L07f40e.  v0:= v0 + 1;
  #L07f412.  goto L07f3ec;
  #L07f414.  return v3 @kind object;
}
procedure `java.util.concurrent.ThreadFactory` `a`(`java.lang.String` v1 @kind object, `boolean` v2 ) @signature `La/a/c;.a:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L07f428.  v0:= new `a.a.c$1`;
  #L07f42c.  call `<init>`(v0, v1, v2) @signature `La/a/c$1;.<init>:(Ljava/lang/String;Z)V` @kind direct;
  #L07f432.  return v0 @kind object;
}
procedure `void` `a`(`long` v4 , `long` v6 , `long` v8 ) @signature `La/a/c;.a:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07f444.  v0:= v6 ^| v8 @kind long;
  #L07f448.  v2:= 0L;
  #L07f44c.  v0:= lcmp(v0, v2);
  #L07f450.  if v0 < 0 then goto L07f468;
  #L07f454.  v0:= lcmp(v6, v4);
  #L07f458.  if v0 > 0 then goto L07f468;
  #L07f45c.  v0:= v4 - v6 @kind long;
  #L07f460.  v0:= lcmp(v0, v8);
  #L07f464.  if v0 >= 0 then goto L07f474;
  #L07f468.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L07f46c.  call `<init>`(v0) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:()V` @kind direct;
  #L07f472.  throw v0;
  #L07f474.  return @kind void;
}
procedure `void` `a`(`java.io.Closeable` v1 @kind object) @signature `La/a/c;.a:(Ljava/io/Closeable;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L07f488.  if v1 == 0 then goto L07f492;
  #Try_start0.  
  #L07f48c.  call `close`(v1) @signature `Ljava/io/Closeable;.close:()V` @kind interface;
  #Try_end0.  
  #L07f492.  return @kind void;
  #L07f494.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L07f496.  throw v0;
  #L07f498.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L07f49a.  goto L07f492;
  catch `java.lang.RuntimeException` @[Try_start0..Try_end0] goto L07f494;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L07f498;
}
procedure `void` `a`(`java.net.Socket` v2 @kind object) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07f4bc.  if v2 == 0 then goto L07f4c6;
  #Try_start0.  
  #L07f4c0.  call `close`(v2) @signature `Ljava/net/Socket;.close:()V` @kind virtual;
  #Try_end0.  
  #L07f4c6.  return @kind void;
  #L07f4c8.  v0:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L07f4ca.  call temp:= `a`(v0) @signature `La/a/c;.a:(Ljava/lang/AssertionError;)Z` @kind static;
  #L07f4d0.  v1:= temp;
  #L07f4d2.  if v1 != 0 then goto L07f4c6;
  #L07f4d6.  throw v0;
  #L07f4d8.  v0:= Exception @type ^`java.lang.RuntimeException` @kind object;
  #L07f4da.  throw v0;
  #L07f4dc.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L07f4de.  goto L07f4c6;
  catch `java.lang.AssertionError` @[Try_start0..Try_end0] goto L07f4c8;
  catch `java.lang.RuntimeException` @[Try_start0..Try_end0] goto L07f4d8;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L07f4dc;
}
procedure `boolean` `a`(`b.r` v1 @kind object, `int` v2 , `java.util.concurrent.TimeUnit` v3 @kind object) @signature `La/a/c;.a:(Lb/r;ILjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #Try_start0.  
  #L07f504.  call temp:= `b`(v1, v2, v3) @signature `La/a/c;.b:(Lb/r;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #Try_end0.  
  #L07f50a.  v0:= temp;
  #L07f50c.  return v0;
  #L07f50e.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L07f510.  v0:= 0I;
  #L07f512.  goto L07f50c;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L07f50e;
}
procedure `boolean` `a`(`java.lang.AssertionError` v2 @kind object) @signature `La/a/c;.a:(Ljava/lang/AssertionError;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07f534.  call temp:= `getCause`(v2) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L07f53a.  v0:= temp @kind object;
  #L07f53c.  if v0 == 0 then goto L07f568;
  #L07f540.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L07f546.  v0:= temp @kind object;
  #L07f548.  if v0 == 0 then goto L07f568;
  #L07f54c.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L07f552.  v0:= temp @kind object;
  #L07f554.  v1:= "getsockname failed" @kind object;
  #L07f558.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L07f55e.  v0:= temp;
  #L07f560.  if v0 == 0 then goto L07f568;
  #L07f564.  v0:= 1I;
  #L07f566.  return v0;
  #L07f568.  v0:= 0I;
  #L07f56a.  goto L07f566;
}
procedure `boolean` `a`(`java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L07f57c.  if v1 == v2 then goto L07f590;
  #L07f580.  if v1 == 0 then goto L07f594;
  #L07f584.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L07f58a.  v0:= temp;
  #L07f58c.  if v0 == 0 then goto L07f594;
  #L07f590.  v0:= 1I;
  #L07f592.  return v0;
  #L07f594.  v0:= 0I;
  #L07f596.  goto L07f592;
}
procedure `java.lang.Object`[] `a`(`java.lang.Class` v2 @kind object, `java.lang.Object`[] v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `La/a/c;.a:(Ljava/lang/Class;[Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07f5a8.  call temp:= `a`(v3, v4) @signature `La/a/c;.a:([Ljava/lang/Object;[Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L07f5ae.  v1:= temp @kind object;
  #L07f5b0.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07f5b6.  v0:= temp;
  #L07f5b8.  call temp:= `newInstance`(v2, v0) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L07f5be.  v0:= temp @kind object;
  #L07f5c0.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L07f5c4.  v0:= (`java.lang.Object`[]) v0 @kind object;
  #L07f5c8.  call temp:= `toArray`(v1, v0) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L07f5ce.  v0:= temp @kind object;
  #L07f5d0.  return v0 @kind object;
}
procedure `java.lang.String`[] `a`(`java.lang.String`[] v3 @kind object, `java.lang.String` v4 @kind object) @signature `La/a/c;.a:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L07f5e4.  v2:= 0I;
  #L07f5e6.  v0:= length @variable v3;
  #L07f5e8.  v0:= v0 + 1;
  #L07f5ec.  v0:= new `java.lang.String`[v0];
  #L07f5f0.  v1:= length @variable v3;
  #L07f5f2.  call `arraycopy`(v3, v2, v0, v2, v1) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L07f5f8.  v1:= length @variable v0;
  #L07f5fa.  v1:= v1 + -1;
  #L07f5fe.  v0[v1]:= v4 @kind object;
  #L07f602.  return v0 @kind object;
}
procedure `int` `b`(`java.lang.String` v4 @kind object) @signature `La/a/c;.b:(Ljava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07f614.  v0:= 0I;
  #L07f616.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L07f61c.  v1:= temp;
  #L07f61e.  if v0 >= v1 then goto L07f642;
  #L07f622.  call temp:= `charAt`(v4, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L07f628.  v2:= temp;
  #L07f62a.  v3:= 31I;
  #L07f62e.  if v2 <= v3 then goto L07f63a;
  #L07f632.  v3:= 127I;
  #L07f636.  if v2 < v3 then goto L07f63c;
  #L07f63a.  return v0;
  #L07f63c.  v0:= v0 + 1;
  #L07f640.  goto L07f61e;
  #L07f642.  v0:= -1I;
  #L07f644.  goto L07f63a;
}
procedure `int` `b`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `La/a/c;.b:(Ljava/lang/String;II)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07f658.  v0:= v4 + -1;
  #L07f65c.  if v0 < v3 then goto L07f672;
  #L07f660.  call temp:= `charAt`(v2, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L07f666.  v1:= temp;
  #L07f668.  goto L07f67c;
  #L07f66e.  v3:= v0 + 1;
  #L07f672.  return v3;
  #L07f674.  v0:= v0 + -1;
  #L07f678.  goto L07f65c;
  #L07f67a.  
  #L07f67c.  switch v1
                  | 9 => goto L07f674
                  | 10 => goto L07f674
                  | 12 => goto L07f674
                  | 13 => goto L07f674
                  | 32 => goto L07f674
                  | else => goto L07f66e;
}
procedure `boolean` `b`(`b.r` v12 @kind object, `int` v13 , `java.util.concurrent.TimeUnit` v14 @kind object) @signature `La/a/c;.b:(Lb/r;ILjava/util/concurrent/TimeUnit;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L07f6b8.  v2:= 9223372036854775807L;
  #L07f6c2.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L07f6c8.  v6:= temp @kind wide;
  #L07f6ca.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07f6d0.  v0:= temp @kind object;
  #L07f6d2.  call temp:= `c_`(v0) @signature `Lb/s;.c_:()Z` @kind virtual;
  #L07f6d8.  v0:= temp;
  #L07f6da.  if v0 == 0 then goto L07f75a;
  #L07f6de.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07f6e4.  v0:= temp @kind object;
  #L07f6e6.  call temp:= `d`(v0) @signature `Lb/s;.d:()J` @kind virtual;
  #L07f6ec.  v0:= temp @kind wide;
  #L07f6ee.  v0:= v0 - v6 @kind long;
  #L07f6f0.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07f6f6.  v4:= temp @kind object;
  #L07f6f8.  v8:= (`long`) v13 @kind i2l;
  #L07f6fa.  call temp:= `toNanos`(v14, v8) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L07f700.  v8:= temp @kind wide;
  #L07f702.  call temp:= `min`(v0, v8) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L07f708.  v8:= temp @kind wide;
  #L07f70a.  v8:= v8 + v6 @kind long;
  #L07f70c.  call temp:= `a`(v4, v8) @signature `Lb/s;.a:(J)Lb/s;` @kind virtual;
  #Try_start0.  
  #L07f712.  v4:= new `b.c`;
  #L07f716.  call `<init>`(v4) @signature `Lb/c;.<init>:()V` @kind direct;
  #L07f71c.  v8:= 8192L;
  #L07f720.  call temp:= `a`(v12, v4, v8) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L07f726.  v8:= temp @kind wide;
  #L07f728.  v10:= -1L;
  #L07f72c.  v5:= lcmp(v8, v10);
  #L07f730.  if v5 == 0 then goto L07f75e;
  #L07f734.  call `r`(v4) @signature `Lb/c;.r:()V` @kind virtual;
  #Try_end0.  
  #L07f73a.  goto L07f71c;
  #L07f73c.  v4:= Exception @type ^`java.io.InterruptedIOException` @kind object;
  #L07f73e.  v4:= 0I;
  #L07f740.  v2:= lcmp(v0, v2);
  #L07f744.  if v2 != 0 then goto L07f78c;
  #L07f748.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07f74e.  v0:= temp @kind object;
  #L07f750.  call temp:= `e_`(v0) @signature `Lb/s;.e_:()Lb/s;` @kind virtual;
  #L07f756.  v0:= v4;
  #L07f758.  return v0;
  #L07f75a.  v0:= v2 @kind wide;
  #L07f75c.  goto L07f6f0;
  #L07f75e.  v4:= 1I;
  #L07f760.  v2:= lcmp(v0, v2);
  #L07f764.  if v2 != 0 then goto L07f77a;
  #L07f768.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07f76e.  v0:= temp @kind object;
  #L07f770.  call temp:= `e_`(v0) @signature `Lb/s;.e_:()Lb/s;` @kind virtual;
  #L07f776.  v0:= v4;
  #L07f778.  goto L07f758;
  #L07f77a.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07f780.  v2:= temp @kind object;
  #L07f782.  v0:= v0 + v6 @kind long;
  #L07f784.  call temp:= `a`(v2, v0) @signature `Lb/s;.a:(J)Lb/s;` @kind virtual;
  #L07f78a.  goto L07f776;
  #L07f78c.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07f792.  v2:= temp @kind object;
  #L07f794.  v0:= v0 + v6 @kind long;
  #L07f796.  call temp:= `a`(v2, v0) @signature `Lb/s;.a:(J)Lb/s;` @kind virtual;
  #L07f79c.  goto L07f756;
  #L07f79e.  v4:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07f7a0.  v2:= lcmp(v0, v2);
  #L07f7a4.  if v2 != 0 then goto L07f7b8;
  #L07f7a8.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07f7ae.  v0:= temp @kind object;
  #L07f7b0.  call temp:= `e_`(v0) @signature `Lb/s;.e_:()Lb/s;` @kind virtual;
  #L07f7b6.  throw v4;
  #L07f7b8.  call temp:= `a`(v12) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07f7be.  v2:= temp @kind object;
  #L07f7c0.  v0:= v0 + v6 @kind long;
  #L07f7c2.  call temp:= `a`(v2, v0) @signature `Lb/s;.a:(J)Lb/s;` @kind virtual;
  #L07f7c8.  goto L07f7b6;
  catch `java.io.InterruptedIOException` @[Try_start0..Try_end0] goto L07f73c;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07f79e;
}
procedure `java.lang.String` `c`(`java.lang.String` v2 @kind object, `int` v3 , `int` v4 ) @signature `La/a/c;.c:(Ljava/lang/String;II)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L07f7ec.  call temp:= `a`(v2, v3, v4) @signature `La/a/c;.a:(Ljava/lang/String;II)I` @kind static;
  #L07f7f2.  v0:= temp;
  #L07f7f4.  call temp:= `b`(v2, v0, v4) @signature `La/a/c;.b:(Ljava/lang/String;II)I` @kind static;
  #L07f7fa.  v1:= temp;
  #L07f7fc.  call temp:= `substring`(v2, v0, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L07f802.  v0:= temp @kind object;
  #L07f804.  return v0 @kind object;
}
procedure `boolean` `c`(`java.lang.String` v1 @kind object) @signature `La/a/c;.c:(Ljava/lang/String;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L07f818.  v0:= `@@a.a.c.p` @type ^`java.util.regex.Pattern` @kind object;
  #L07f81c.  call temp:= `matcher`(v0, v1) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L07f822.  v0:= temp @kind object;
  #L07f824.  call temp:= `matches`(v0) @signature `Ljava/util/regex/Matcher;.matches:()Z` @kind virtual;
  #L07f82a.  v0:= temp;
  #L07f82c.  return v0;
}
procedure `boolean` `d`(`java.lang.String` v5 @kind object) @signature `La/a/c;.d:(Ljava/lang/String;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L07f840.  v2:= 1I;
  #L07f842.  v1:= 0I;
  #L07f844.  v0:= v1;
  #L07f846.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L07f84c.  v3:= temp;
  #L07f84e.  if v0 >= v3 then goto L07f86c;
  #L07f852.  call temp:= `charAt`(v5, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L07f858.  v3:= temp;
  #L07f85a.  v4:= 31I;
  #L07f85e.  if v3 <= v4 then goto L07f86a;
  #L07f862.  v4:= 127I;
  #L07f866.  if v3 < v4 then goto L07f86e;
  #L07f86a.  v1:= v2;
  #L07f86c.  return v1;
  #L07f86e.  v4:= " #%/:?@[\\]" @kind object;
  #L07f872.  call temp:= `indexOf`(v4, v3) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L07f878.  v3:= temp;
  #L07f87a.  v4:= -1I;
  #L07f87c.  if v3 == v4 then goto L07f884;
  #L07f880.  v1:= v2;
  #L07f882.  goto L07f86c;
  #L07f884.  v0:= v0 + 1;
  #L07f888.  goto L07f846;
}
