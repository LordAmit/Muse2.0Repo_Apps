record `a.k$a` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `a.k$a.a` @AccessFlag ;
  `java.lang.String`[] `a.k$a.b` @AccessFlag ;
  `java.lang.String`[] `a.k$a.c` @AccessFlag ;
  `boolean` `a.k$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`a.k$a` v1 @kind this, `a.k` v2 @kind object) @signature `La/k$a;.<init>:(La/k;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L08c7d8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08c7de.  v0:= v2.`a.k.d` @type ^`boolean` @kind boolean;
  #L08c7e2.  v1.`a.k$a.a` @type ^`boolean` := v0 @kind boolean;
  #L08c7e6.  v0:= v2.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08c7ea.  v1.`a.k$a.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L08c7ee.  v0:= v2.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08c7f2.  v1.`a.k$a.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L08c7f6.  v0:= v2.`a.k.e` @type ^`boolean` @kind boolean;
  #L08c7fa.  v1.`a.k$a.d` @type ^`boolean` := v0 @kind boolean;
  #L08c7fe.  return @kind void;
}
procedure `void` `<init>`(`a.k$a` v0 @kind this, `boolean` v1 ) @signature `La/k$a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L08c810.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08c816.  v0.`a.k$a.a` @type ^`boolean` := v1 @kind boolean;
  #L08c81a.  return @kind void;
}
procedure `a.k$a` `a`(`a.k$a` v2 @kind this, `boolean` v3 ) @signature `La/k$a;.a:(Z)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08c82c.  v0:= v2.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L08c830.  if v0 != 0 then goto L08c844;
  #L08c834.  v0:= new `java.lang.IllegalStateException`;
  #L08c838.  v1:= "no TLS extensions for cleartext connections" @kind object;
  #L08c83c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c842.  throw v0;
  #L08c844.  v2.`a.k$a.d` @type ^`boolean` := v3 @kind boolean;
  #L08c848.  return v2 @kind object;
}
procedure `a.k$a` `a`(`a.k$a` v3 @kind this, `a.ac`[] v4 @kind object) @signature `La/k$a;.a:([La/ac;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L08c85c.  v0:= v3.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L08c860.  if v0 != 0 then goto L08c874;
  #L08c864.  v0:= new `java.lang.IllegalStateException`;
  #L08c868.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L08c86c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c872.  throw v0;
  #L08c874.  v0:= length @variable v4;
  #L08c876.  v1:= new `java.lang.String`[v0];
  #L08c87a.  v0:= 0I;
  #L08c87c.  v2:= length @variable v4;
  #L08c87e.  if v0 >= v2 then goto L08c894;
  #L08c882.  v2:= v4[v0] @kind object;
  #L08c886.  v2:= v2.`a.ac.f` @type ^`java.lang.String` @kind object;
  #L08c88a.  v1[v0]:= v2 @kind object;
  #L08c88e.  v0:= v0 + 1;
  #L08c892.  goto L08c87c;
  #L08c894.  call temp:= `b`(v3, v1) @signature `La/k$a;.b:([Ljava/lang/String;)La/k$a;` @kind virtual;
  #L08c89a.  v0:= temp @kind object;
  #L08c89c.  return v0 @kind object;
}
procedure `a.k$a` `a`(`a.k$a` v3 @kind this, `a.h`[] v4 @kind object) @signature `La/k$a;.a:([La/h;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L08c8b0.  v0:= v3.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L08c8b4.  if v0 != 0 then goto L08c8c8;
  #L08c8b8.  v0:= new `java.lang.IllegalStateException`;
  #L08c8bc.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L08c8c0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c8c6.  throw v0;
  #L08c8c8.  v0:= length @variable v4;
  #L08c8ca.  v1:= new `java.lang.String`[v0];
  #L08c8ce.  v0:= 0I;
  #L08c8d0.  v2:= length @variable v4;
  #L08c8d2.  if v0 >= v2 then goto L08c8e8;
  #L08c8d6.  v2:= v4[v0] @kind object;
  #L08c8da.  v2:= v2.`a.h.bi` @type ^`java.lang.String` @kind object;
  #L08c8de.  v1[v0]:= v2 @kind object;
  #L08c8e2.  v0:= v0 + 1;
  #L08c8e6.  goto L08c8d0;
  #L08c8e8.  call temp:= `a`(v3, v1) @signature `La/k$a;.a:([Ljava/lang/String;)La/k$a;` @kind virtual;
  #L08c8ee.  v0:= temp @kind object;
  #L08c8f0.  return v0 @kind object;
}
procedure `a.k$a` `a`(`a.k$a` v2 @kind this, `java.lang.String`[] v3 @kind object) @signature `La/k$a;.a:([Ljava/lang/String;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08c904.  v0:= v2.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L08c908.  if v0 != 0 then goto L08c91c;
  #L08c90c.  v0:= new `java.lang.IllegalStateException`;
  #L08c910.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L08c914.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c91a.  throw v0;
  #L08c91c.  v0:= length @variable v3;
  #L08c91e.  if v0 != 0 then goto L08c932;
  #L08c922.  v0:= new `java.lang.IllegalArgumentException`;
  #L08c926.  v1:= "At least one cipher suite is required" @kind object;
  #L08c92a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c930.  throw v0;
  #L08c932.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L08c938.  v0:= temp @kind object;
  #L08c93a.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L08c93e.  v2.`a.k$a.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L08c942.  return v2 @kind object;
}
procedure `a.k` `a`(`a.k$a` v1 @kind this) @signature `La/k$a;.a:()La/k;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c954.  v0:= new `a.k`;
  #L08c958.  call `<init>`(v0, v1) @signature `La/k;.<init>:(La/k$a;)V` @kind direct;
  #L08c95e.  return v0 @kind object;
}
procedure `a.k$a` `b`(`a.k$a` v2 @kind this, `java.lang.String`[] v3 @kind object) @signature `La/k$a;.b:([Ljava/lang/String;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08c970.  v0:= v2.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L08c974.  if v0 != 0 then goto L08c988;
  #L08c978.  v0:= new `java.lang.IllegalStateException`;
  #L08c97c.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L08c980.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c986.  throw v0;
  #L08c988.  v0:= length @variable v3;
  #L08c98a.  if v0 != 0 then goto L08c99e;
  #L08c98e.  v0:= new `java.lang.IllegalArgumentException`;
  #L08c992.  v1:= "At least one TLS version is required" @kind object;
  #L08c996.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c99c.  throw v0;
  #L08c99e.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L08c9a4.  v0:= temp @kind object;
  #L08c9a6.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L08c9aa.  v2.`a.k$a.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L08c9ae.  return v2 @kind object;
}
