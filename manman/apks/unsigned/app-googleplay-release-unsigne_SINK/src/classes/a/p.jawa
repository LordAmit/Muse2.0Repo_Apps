record `a.p` @kind class @AccessFlag PUBLIC_FINAL {
  `a.ac` `a.p.a` @AccessFlag PRIVATE_FINAL;
  `a.h` `a.p.b` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `a.p.c` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `a.p.d` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.p` v0 @kind this, `a.ac` v1 @kind object, `a.h` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object) @signature `La/p;.<init>:(La/ac;La/h;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L08de7c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08de82.  v0.`a.p.a` @type ^`a.ac` := v1 @kind object;
  #L08de86.  v0.`a.p.b` @type ^`a.h` := v2 @kind object;
  #L08de8a.  v0.`a.p.c` @type ^`java.util.List` := v3 @kind object;
  #L08de8e.  v0.`a.p.d` @type ^`java.util.List` := v4 @kind object;
  #L08de92.  return @kind void;
}
procedure `a.p` `a`(`javax.net.ssl.SSLSession` v5 @kind object) @signature `La/p;.a:(Ljavax/net/ssl/SSLSession;)La/p;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L08dea4.  call temp:= `getCipherSuite`(v5) @signature `Ljavax/net/ssl/SSLSession;.getCipherSuite:()Ljava/lang/String;` @kind interface;
  #L08deaa.  v0:= temp @kind object;
  #L08deac.  if v0 != 0 then goto L08dec0;
  #L08deb0.  v0:= new `java.lang.IllegalStateException`;
  #L08deb4.  v1:= "cipherSuite == null" @kind object;
  #L08deb8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08debe.  throw v0;
  #L08dec0.  call temp:= `a`(v0) @signature `La/h;.a:(Ljava/lang/String;)La/h;` @kind static;
  #L08dec6.  v2:= temp @kind object;
  #L08dec8.  call temp:= `getProtocol`(v5) @signature `Ljavax/net/ssl/SSLSession;.getProtocol:()Ljava/lang/String;` @kind interface;
  #L08dece.  v0:= temp @kind object;
  #L08ded0.  if v0 != 0 then goto L08dee4;
  #L08ded4.  v0:= new `java.lang.IllegalStateException`;
  #L08ded8.  v1:= "tlsVersion == null" @kind object;
  #L08dedc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08dee2.  throw v0;
  #L08dee4.  call temp:= `a`(v0) @signature `La/ac;.a:(Ljava/lang/String;)La/ac;` @kind static;
  #L08deea.  v3:= temp @kind object;
  #Try_start0.  
  #L08deec.  call temp:= `getPeerCertificates`(v5) @signature `Ljavax/net/ssl/SSLSession;.getPeerCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #Try_end0.  
  #L08def2.  v0:= temp @kind object;
  #L08def4.  if v0 == 0 then goto L08df26;
  #L08def8.  call temp:= `a`(v0) @signature `La/a/c;.a:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L08defe.  v0:= temp @kind object;
  #L08df00.  call temp:= `getLocalCertificates`(v5) @signature `Ljavax/net/ssl/SSLSession;.getLocalCertificates:()[Ljava/security/cert/Certificate;` @kind interface;
  #L08df06.  v1:= temp @kind object;
  #L08df08.  if v1 == 0 then goto L08df30;
  #L08df0c.  call temp:= `a`(v1) @signature `La/a/c;.a:([Ljava/lang/Object;)Ljava/util/List;` @kind static;
  #L08df12.  v1:= temp @kind object;
  #L08df14.  v4:= new `a.p`;
  #L08df18.  call `<init>`(v4, v3, v2, v0, v1) @signature `La/p;.<init>:(La/ac;La/h;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L08df1e.  return v4 @kind object;
  #L08df20.  v0:= Exception @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind object;
  #L08df22.  v0:= 0I;
  #L08df24.  goto L08def4;
  #L08df26.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L08df2c.  v0:= temp @kind object;
  #L08df2e.  goto L08df00;
  #L08df30.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L08df36.  v1:= temp @kind object;
  #L08df38.  goto L08df14;
  catch `javax.net.ssl.SSLPeerUnverifiedException` @[Try_start0..Try_end0] goto L08df20;
}
procedure `a.h` `a`(`a.p` v1 @kind this) @signature `La/p;.a:()La/h;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08df5c.  v0:= v1.`a.p.b` @type ^`a.h` @kind object;
  #L08df60.  return v0 @kind object;
}
procedure `java.util.List` `b`(`a.p` v1 @kind this) @signature `La/p;.b:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08df74.  v0:= v1.`a.p.c` @type ^`java.util.List` @kind object;
  #L08df78.  return v0 @kind object;
}
procedure `boolean` `equals`(`a.p` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `La/p;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L08df8c.  v0:= 0I;
  #L08df8e.  v1:= instanceof @variable v4 @type ^`a.p` @kind boolean;
  #L08df92.  if v1 != 0 then goto L08df98;
  #L08df96.  return v0;
  #L08df98.  v4:= (`a.p`) v4 @kind object;
  #L08df9c.  v1:= v3.`a.p.b` @type ^`a.h` @kind object;
  #L08dfa0.  v2:= v4.`a.p.b` @type ^`a.h` @kind object;
  #L08dfa4.  call temp:= `a`(v1, v2) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L08dfaa.  v1:= temp;
  #L08dfac.  if v1 == 0 then goto L08df96;
  #L08dfb0.  v1:= v3.`a.p.b` @type ^`a.h` @kind object;
  #L08dfb4.  v2:= v4.`a.p.b` @type ^`a.h` @kind object;
  #L08dfb8.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08dfbe.  v1:= temp;
  #L08dfc0.  if v1 == 0 then goto L08df96;
  #L08dfc4.  v1:= v3.`a.p.c` @type ^`java.util.List` @kind object;
  #L08dfc8.  v2:= v4.`a.p.c` @type ^`java.util.List` @kind object;
  #L08dfcc.  call temp:= `equals`(v1, v2) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L08dfd2.  v1:= temp;
  #L08dfd4.  if v1 == 0 then goto L08df96;
  #L08dfd8.  v1:= v3.`a.p.d` @type ^`java.util.List` @kind object;
  #L08dfdc.  v2:= v4.`a.p.d` @type ^`java.util.List` @kind object;
  #L08dfe0.  call temp:= `equals`(v1, v2) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L08dfe6.  v1:= temp;
  #L08dfe8.  if v1 == 0 then goto L08df96;
  #L08dfec.  v0:= 1I;
  #L08dfee.  goto L08df96;
}
procedure `int` `hashCode`(`a.p` v2 @kind this) @signature `La/p;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08e000.  v0:= v2.`a.p.a` @type ^`a.ac` @kind object;
  #L08e004.  if v0 == 0 then goto L08e050;
  #L08e008.  v0:= v2.`a.p.a` @type ^`a.ac` @kind object;
  #L08e00c.  call temp:= `hashCode`(v0) @signature `La/ac;.hashCode:()I` @kind virtual;
  #L08e012.  v0:= temp;
  #L08e014.  v0:= v0 + 527;
  #L08e018.  v0:= v0 * 31;
  #L08e01c.  v1:= v2.`a.p.b` @type ^`a.h` @kind object;
  #L08e020.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L08e026.  v1:= temp;
  #L08e028.  v0:= v0 + v1 @kind int;
  #L08e02a.  v0:= v0 * 31;
  #L08e02e.  v1:= v2.`a.p.c` @type ^`java.util.List` @kind object;
  #L08e032.  call temp:= `hashCode`(v1) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L08e038.  v1:= temp;
  #L08e03a.  v0:= v0 + v1 @kind int;
  #L08e03c.  v0:= v0 * 31;
  #L08e040.  v1:= v2.`a.p.d` @type ^`java.util.List` @kind object;
  #L08e044.  call temp:= `hashCode`(v1) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L08e04a.  v1:= temp;
  #L08e04c.  v0:= v0 + v1 @kind int;
  #L08e04e.  return v0;
  #L08e050.  v0:= 0I;
  #L08e052.  goto L08e014;
}
