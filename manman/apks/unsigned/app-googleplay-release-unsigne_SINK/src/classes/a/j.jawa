record `a.j` @kind class @AccessFlag PUBLIC_FINAL {
  `a.a.b.d` `a.j.a` @AccessFlag FINAL;
  `boolean` `a.j.b` @AccessFlag ;
  `int` `a.j.e` @AccessFlag PRIVATE_FINAL;
  `long` `a.j.f` @AccessFlag PRIVATE_FINAL;
  `java.lang.Runnable` `a.j.g` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `a.j.h` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.j.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.Executor` `@@a.j.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L08c34c.  v8:= 1I;
  #L08c34e.  v2:= 0I;
  #L08c350.  v0:= constclass @type ^`a.j` @kind object;
  #L08c354.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L08c35a.  v0:= temp;
  #L08c35c.  if v0 != 0 then goto L08c39a;
  #L08c360.  v0:= v8;
  #L08c362.  `@@a.j.c` @type ^`boolean` := v0 @kind boolean;
  #L08c366.  v1:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L08c36a.  v3:= 2147483647I;
  #L08c370.  v4:= 60L;
  #L08c374.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L08c378.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L08c37c.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L08c382.  v0:= "OkHttp ConnectionPool" @kind object;
  #L08c386.  call temp:= `a`(v0, v8) @signature `La/a/c;.a:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L08c38c.  v8:= temp @kind object;
  #L08c38e.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L08c394.  `@@a.j.d` @type ^`java.util.concurrent.Executor` := v1 @kind object;
  #L08c398.  return @kind void;
  #L08c39a.  v0:= v2;
  #L08c39c.  goto L08c362;
}
procedure `void` `<init>`(`a.j` v4 @kind this) @signature `La/j;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08c3b0.  v0:= 5I;
  #L08c3b2.  v2:= 5L;
  #L08c3b6.  v1:= `@@java.util.concurrent.TimeUnit.MINUTES` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L08c3ba.  call `<init>`(v4, v0, v2, v1) @signature `La/j;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L08c3c0.  return @kind void;
}
procedure `void` `<init>`(`a.j` v4 @kind this, `int` v5 , `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `La/j;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08c3d4.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08c3da.  v0:= new `a.j$1`;
  #L08c3de.  call `<init>`(v0, v4) @signature `La/j$1;.<init>:(La/j;)V` @kind direct;
  #L08c3e4.  v4.`a.j.g` @type ^`java.lang.Runnable` := v0 @kind object;
  #L08c3e8.  v0:= new `java.util.ArrayDeque`;
  #L08c3ec.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L08c3f2.  v4.`a.j.h` @type ^`java.util.Deque` := v0 @kind object;
  #L08c3f6.  v0:= new `a.a.b.d`;
  #L08c3fa.  call `<init>`(v0) @signature `La/a/b/d;.<init>:()V` @kind direct;
  #L08c400.  v4.`a.j.a` @type ^`a.a.b.d` := v0 @kind object;
  #L08c404.  v4.`a.j.e` @type ^`int` := v5;
  #L08c408.  call temp:= `toNanos`(v8, v6) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L08c40e.  v0:= temp @kind wide;
  #L08c410.  v4.`a.j.f` @type ^`long` := v0 @kind wide;
  #L08c414.  v0:= 0L;
  #L08c418.  v0:= lcmp(v6, v0);
  #L08c41c.  if v0 > 0 then goto L08c452;
  #L08c420.  v0:= new `java.lang.IllegalArgumentException`;
  #L08c424.  v1:= new `java.lang.StringBuilder`;
  #L08c428.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08c42e.  v2:= "keepAliveDuration <= 0: " @kind object;
  #L08c432.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c438.  v1:= temp @kind object;
  #L08c43a.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c440.  v1:= temp @kind object;
  #L08c442.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08c448.  v1:= temp @kind object;
  #L08c44a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c450.  throw v0;
  #L08c452.  return @kind void;
}
procedure `int` `a`(`a.j` v6 @kind this, `a.a.b.c` v7 @kind object, `long` v8 ) @signature `La/j;.a:(La/a/b/c;J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L08c464.  v2:= 0I;
  #L08c466.  v3:= v7.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L08c46a.  v1:= v2;
  #L08c46c.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L08c472.  v0:= temp;
  #L08c474.  if v1 >= v0 then goto L08c51e;
  #L08c478.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L08c47e.  v0:= temp @kind object;
  #L08c480.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L08c484.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L08c48a.  v4:= temp @kind object;
  #L08c48c.  if v4 == 0 then goto L08c498;
  #L08c490.  v0:= v1 + 1;
  #L08c494.  v1:= v0;
  #L08c496.  goto L08c46c;
  #L08c498.  v0:= (`a.a.b.g$a`) v0 @kind object;
  #L08c49c.  v4:= new `java.lang.StringBuilder`;
  #L08c4a0.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08c4a6.  v5:= "A connection to " @kind object;
  #L08c4aa.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c4b0.  v4:= temp @kind object;
  #L08c4b2.  call temp:= `a`(v7) @signature `La/a/b/c;.a:()La/ab;` @kind virtual;
  #L08c4b8.  v5:= temp @kind object;
  #L08c4ba.  call temp:= `a`(v5) @signature `La/ab;.a:()La/a;` @kind virtual;
  #L08c4c0.  v5:= temp @kind object;
  #L08c4c2.  call temp:= `a`(v5) @signature `La/a;.a:()La/r;` @kind virtual;
  #L08c4c8.  v5:= temp @kind object;
  #L08c4ca.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c4d0.  v4:= temp @kind object;
  #L08c4d2.  v5:= " was leaked. Did you forget to close a response body?" @kind object;
  #L08c4d6.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c4dc.  v4:= temp @kind object;
  #L08c4de.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08c4e4.  v4:= temp @kind object;
  #L08c4e6.  call temp:= `b`() @signature `La/a/g/e;.b:()La/a/g/e;` @kind static;
  #L08c4ec.  v5:= temp @kind object;
  #L08c4ee.  v0:= v0.`a.a.b.g$a.a` @type ^`java.lang.Object` @kind object;
  #L08c4f2.  call `a`(v5, v4, v0) @signature `La/a/g/e;.a:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L08c4f8.  call temp:= `remove`(v3, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L08c4fe.  v0:= 1I;
  #L08c500.  v7.`a.a.b.c.a` @type ^`boolean` := v0 @kind boolean;
  #L08c504.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L08c50a.  v0:= temp;
  #L08c50c.  if v0 == 0 then goto L08c46c;
  #L08c510.  v0:= v6.`a.j.f` @type ^`long` @kind wide;
  #L08c514.  v0:= v8 - v0 @kind long;
  #L08c518.  v7.`a.a.b.c.e` @type ^`long` := v0 @kind wide;
  #L08c51c.  return v2;
  #L08c51e.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L08c524.  v2:= temp;
  #L08c526.  goto L08c51c;
}
procedure `long` `a`(`a.j` v13 @kind this, `long` v14 ) @signature `La/j;.a:(J)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L08c538.  v0:= 0I;
  #L08c53a.  v1:= 0I;
  #L08c53c.  v4:= -9223372036854775808L;
  #L08c540.  @monitorenter v13
  #Try_start0.  
  #L08c542.  v2:= v13.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L08c546.  call temp:= `iterator`(v2) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L08c54c.  v8:= temp @kind object;
  #L08c54e.  v2:= v0;
  #L08c550.  v7:= v0;
  #L08c552.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L08c558.  v0:= temp;
  #L08c55a.  if v0 == 0 then goto L08c5a0;
  #L08c55e.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L08c564.  v0:= temp @kind object;
  #L08c566.  v0:= (`a.a.b.c`) v0 @kind object;
  #L08c56a.  call temp:= `a`(v13, v0, v14) @signature `La/j;.a:(La/a/b/c;J)I` @kind direct;
  #L08c570.  v3:= temp;
  #L08c572.  if v3 <= 0 then goto L08c57e;
  #L08c576.  v0:= v7 + 1;
  #L08c57a.  v7:= v0;
  #L08c57c.  goto L08c552;
  #L08c57e.  v6:= v2 + 1;
  #L08c582.  v2:= v0.`a.a.b.c.e` @type ^`long` @kind wide;
  #L08c586.  v2:= v14 - v2 @kind long;
  #L08c58a.  v9:= lcmp(v2, v4);
  #L08c58e.  if v9 <= 0 then goto L08c602;
  #L08c592.  v10:= v2 @kind wide;
  #L08c594.  v2:= v0 @kind object;
  #L08c596.  v0:= v10 @kind wide;
  #L08c598.  v4:= v0 @kind wide;
  #L08c59a.  v1:= v2 @kind object;
  #L08c59c.  v2:= v6;
  #L08c59e.  goto L08c552;
  #L08c5a0.  v8:= v13.`a.j.f` @type ^`long` @kind wide;
  #L08c5a4.  v0:= lcmp(v4, v8);
  #L08c5a8.  if v0 >= 0 then goto L08c5b4;
  #L08c5ac.  v0:= v13.`a.j.e` @type ^`int`;
  #L08c5b0.  if v2 <= v0 then goto L08c5d4;
  #L08c5b4.  v0:= v13.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L08c5b8.  call temp:= `remove`(v0, v1) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L08c5be.  @monitorexit v13
  #Try_end0.  
  #L08c5c0.  call temp:= `b`(v1) @signature `La/a/b/c;.b:()Ljava/net/Socket;` @kind virtual;
  #L08c5c6.  v0:= temp @kind object;
  #L08c5c8.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L08c5ce.  v0:= 0L;
  #L08c5d2.  return v0 @kind wide;
  #L08c5d4.  if v2 <= 0 then goto L08c5e8;
  #Try_start1.  
  #L08c5d8.  v0:= v13.`a.j.f` @type ^`long` @kind wide;
  #L08c5dc.  v0:= v0 - v4 @kind long;
  #L08c5de.  @monitorexit v13
  #L08c5e0.  goto L08c5d2;
  #L08c5e2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08c5e4.  @monitorexit v13
  #Try_end1.  
  #L08c5e6.  throw v0;
  #L08c5e8.  if v7 <= 0 then goto L08c5f4;
  #Try_start2.  
  #L08c5ec.  v0:= v13.`a.j.f` @type ^`long` @kind wide;
  #L08c5f0.  @monitorexit v13
  #L08c5f2.  goto L08c5d2;
  #L08c5f4.  v0:= 0I;
  #L08c5f6.  v13.`a.j.b` @type ^`boolean` := v0 @kind boolean;
  #L08c5fa.  v0:= -1L;
  #L08c5fe.  @monitorexit v13
  #Try_end2.  
  #L08c600.  goto L08c5d2;
  #L08c602.  v2:= v1 @kind object;
  #L08c604.  v0:= v4 @kind wide;
  #L08c606.  goto L08c598;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08c5e2;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08c5e2;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L08c5e2;
}
procedure `a.a.b.c` `a`(`a.j` v3 @kind this, `a.a` v4 @kind object, `a.a.b.g` v5 @kind object) @signature `La/j;.a:(La/a;La/a/b/g;)La/a/b/c;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L08c634.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L08c638.  if v0 != 0 then goto L08c654;
  #L08c63c.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L08c642.  v0:= temp;
  #L08c644.  if v0 != 0 then goto L08c654;
  #L08c648.  v0:= new `java.lang.AssertionError`;
  #L08c64c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L08c652.  throw v0;
  #L08c654.  v0:= v3.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L08c658.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L08c65e.  v1:= temp @kind object;
  #L08c660.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L08c666.  v0:= temp;
  #L08c668.  if v0 == 0 then goto L08c68c;
  #L08c66c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L08c672.  v0:= temp @kind object;
  #L08c674.  v0:= (`a.a.b.c`) v0 @kind object;
  #L08c678.  call temp:= `a`(v0, v4) @signature `La/a/b/c;.a:(La/a;)Z` @kind virtual;
  #L08c67e.  v2:= temp;
  #L08c680.  if v2 == 0 then goto L08c660;
  #L08c684.  call `a`(v5, v0) @signature `La/a/b/g;.a:(La/a/b/c;)V` @kind virtual;
  #L08c68a.  return v0 @kind object;
  #L08c68c.  v0:= 0I;
  #L08c68e.  goto L08c68a;
}
procedure `void` `a`(`a.j` v2 @kind this, `a.a.b.c` v3 @kind object) @signature `La/j;.a:(La/a/b/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L08c6a0.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L08c6a4.  if v0 != 0 then goto L08c6c0;
  #L08c6a8.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L08c6ae.  v0:= temp;
  #L08c6b0.  if v0 != 0 then goto L08c6c0;
  #L08c6b4.  v0:= new `java.lang.AssertionError`;
  #L08c6b8.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L08c6be.  throw v0;
  #L08c6c0.  v0:= v2.`a.j.b` @type ^`boolean` @kind boolean;
  #L08c6c4.  if v0 != 0 then goto L08c6dc;
  #L08c6c8.  v0:= 1I;
  #L08c6ca.  v2.`a.j.b` @type ^`boolean` := v0 @kind boolean;
  #L08c6ce.  v0:= `@@a.j.d` @type ^`java.util.concurrent.Executor` @kind object;
  #L08c6d2.  v1:= v2.`a.j.g` @type ^`java.lang.Runnable` @kind object;
  #L08c6d6.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L08c6dc.  v0:= v2.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L08c6e0.  call temp:= `add`(v0, v3) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L08c6e6.  return @kind void;
}
procedure `java.net.Socket` `b`(`a.j` v3 @kind this, `a.a` v4 @kind object, `a.a.b.g` v5 @kind object) @signature `La/j;.b:(La/a;La/a/b/g;)Ljava/net/Socket;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L08c6f8.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L08c6fc.  if v0 != 0 then goto L08c718;
  #L08c700.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L08c706.  v0:= temp;
  #L08c708.  if v0 != 0 then goto L08c718;
  #L08c70c.  v0:= new `java.lang.AssertionError`;
  #L08c710.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L08c716.  throw v0;
  #L08c718.  v0:= v3.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L08c71c.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L08c722.  v1:= temp @kind object;
  #L08c724.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L08c72a.  v0:= temp;
  #L08c72c.  if v0 == 0 then goto L08c76a;
  #L08c730.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L08c736.  v0:= temp @kind object;
  #L08c738.  v0:= (`a.a.b.c`) v0 @kind object;
  #L08c73c.  call temp:= `a`(v0, v4) @signature `La/a/b/c;.a:(La/a;)Z` @kind virtual;
  #L08c742.  v2:= temp;
  #L08c744.  if v2 == 0 then goto L08c724;
  #L08c748.  call temp:= `d`(v0) @signature `La/a/b/c;.d:()Z` @kind virtual;
  #L08c74e.  v2:= temp;
  #L08c750.  if v2 == 0 then goto L08c724;
  #L08c754.  call temp:= `b`(v5) @signature `La/a/b/g;.b:()La/a/b/c;` @kind virtual;
  #L08c75a.  v2:= temp @kind object;
  #L08c75c.  if v0 == v2 then goto L08c724;
  #L08c760.  call temp:= `b`(v5, v0) @signature `La/a/b/g;.b:(La/a/b/c;)Ljava/net/Socket;` @kind virtual;
  #L08c766.  v0:= temp @kind object;
  #L08c768.  return v0 @kind object;
  #L08c76a.  v0:= 0I;
  #L08c76c.  goto L08c768;
}
procedure `boolean` `b`(`a.j` v1 @kind this, `a.a.b.c` v2 @kind object) @signature `La/j;.b:(La/a/b/c;)Z` @AccessFlag  {
    temp;
    v0;

  #L08c780.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L08c784.  if v0 != 0 then goto L08c7a0;
  #L08c788.  call temp:= `holdsLock`(v1) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L08c78e.  v0:= temp;
  #L08c790.  if v0 != 0 then goto L08c7a0;
  #L08c794.  v0:= new `java.lang.AssertionError`;
  #L08c798.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L08c79e.  throw v0;
  #L08c7a0.  v0:= v2.`a.a.b.c.a` @type ^`boolean` @kind boolean;
  #L08c7a4.  if v0 != 0 then goto L08c7b0;
  #L08c7a8.  v0:= v1.`a.j.e` @type ^`int`;
  #L08c7ac.  if v0 != 0 then goto L08c7be;
  #L08c7b0.  v0:= v1.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L08c7b4.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L08c7ba.  v0:= 1I;
  #L08c7bc.  return v0;
  #L08c7be.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L08c7c4.  v0:= 0I;
  #L08c7c6.  goto L08c7bc;
}
