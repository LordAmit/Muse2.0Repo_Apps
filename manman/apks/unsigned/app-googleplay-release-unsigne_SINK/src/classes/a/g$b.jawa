record `a.g$b` @kind class @AccessFlag FINAL {
  `java.lang.String` `a.g$b.a` @AccessFlag FINAL;
  `java.lang.String` `a.g$b.b` @AccessFlag FINAL;
  `java.lang.String` `a.g$b.c` @AccessFlag FINAL;
  `b.f` `a.g$b.d` @AccessFlag FINAL;
}
procedure `boolean` `a`(`a.g$b` v6 @kind this, `java.lang.String` v7 @kind object) @signature `La/g$b;.a:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L08b348.  v1:= 0I;
  #L08b34a.  v0:= v6.`a.g$b.a` @type ^`java.lang.String` @kind object;
  #L08b34e.  v2:= "*." @kind object;
  #L08b352.  call temp:= `startsWith`(v0, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L08b358.  v0:= temp;
  #L08b35a.  if v0 == 0 then goto L08b38c;
  #L08b35e.  v0:= 46I;
  #L08b362.  call temp:= `indexOf`(v7, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L08b368.  v0:= temp;
  #L08b36a.  v2:= v0 + 1;
  #L08b36e.  v3:= v6.`a.g$b.b` @type ^`java.lang.String` @kind object;
  #L08b372.  v0:= v6.`a.g$b.b` @type ^`java.lang.String` @kind object;
  #L08b376.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08b37c.  v5:= temp;
  #L08b37e.  v0:= v7 @kind object;
  #L08b380.  v4:= v1;
  #L08b382.  call temp:= `regionMatches`(v0, v1, v2, v3, v4, v5) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L08b388.  v0:= temp;
  #L08b38a.  return v0;
  #L08b38c.  v0:= v6.`a.g$b.b` @type ^`java.lang.String` @kind object;
  #L08b390.  call temp:= `equals`(v7, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08b396.  v0:= temp;
  #L08b398.  goto L08b38a;
}
procedure `boolean` `equals`(`a.g$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `La/g$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08b3ac.  v0:= instanceof @variable v3 @type ^`a.g$b` @kind boolean;
  #L08b3b0.  if v0 == 0 then goto L08b404;
  #L08b3b4.  v1:= v2.`a.g$b.a` @type ^`java.lang.String` @kind object;
  #L08b3b8.  v0:= v3 @kind object;
  #L08b3ba.  v0:= (`a.g$b`) v0 @kind object;
  #L08b3be.  v0:= v0.`a.g$b.a` @type ^`java.lang.String` @kind object;
  #L08b3c2.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08b3c8.  v0:= temp;
  #L08b3ca.  if v0 == 0 then goto L08b404;
  #L08b3ce.  v1:= v2.`a.g$b.c` @type ^`java.lang.String` @kind object;
  #L08b3d2.  v0:= v3 @kind object;
  #L08b3d4.  v0:= (`a.g$b`) v0 @kind object;
  #L08b3d8.  v0:= v0.`a.g$b.c` @type ^`java.lang.String` @kind object;
  #L08b3dc.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08b3e2.  v0:= temp;
  #L08b3e4.  if v0 == 0 then goto L08b404;
  #L08b3e8.  v0:= v2.`a.g$b.d` @type ^`b.f` @kind object;
  #L08b3ec.  v3:= (`a.g$b`) v3 @kind object;
  #L08b3f0.  v1:= v3.`a.g$b.d` @type ^`b.f` @kind object;
  #L08b3f4.  call temp:= `equals`(v0, v1) @signature `Lb/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08b3fa.  v0:= temp;
  #L08b3fc.  if v0 == 0 then goto L08b404;
  #L08b400.  v0:= 1I;
  #L08b402.  return v0;
  #L08b404.  v0:= 0I;
  #L08b406.  goto L08b402;
}
procedure `int` `hashCode`(`a.g$b` v2 @kind this) @signature `La/g$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08b418.  v0:= v2.`a.g$b.a` @type ^`java.lang.String` @kind object;
  #L08b41c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L08b422.  v0:= temp;
  #L08b424.  v0:= v0 + 527;
  #L08b428.  v0:= v0 * 31;
  #L08b42c.  v1:= v2.`a.g$b.c` @type ^`java.lang.String` @kind object;
  #L08b430.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L08b436.  v1:= temp;
  #L08b438.  v0:= v0 + v1 @kind int;
  #L08b43a.  v0:= v0 * 31;
  #L08b43e.  v1:= v2.`a.g$b.d` @type ^`b.f` @kind object;
  #L08b442.  call temp:= `hashCode`(v1) @signature `Lb/f;.hashCode:()I` @kind virtual;
  #L08b448.  v1:= temp;
  #L08b44a.  v0:= v0 + v1 @kind int;
  #L08b44c.  return v0;
}
procedure `java.lang.String` `toString`(`a.g$b` v2 @kind this) @signature `La/g$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08b460.  v0:= new `java.lang.StringBuilder`;
  #L08b464.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08b46a.  v1:= v2.`a.g$b.c` @type ^`java.lang.String` @kind object;
  #L08b46e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b474.  v0:= temp @kind object;
  #L08b476.  v1:= v2.`a.g$b.d` @type ^`b.f` @kind object;
  #L08b47a.  call temp:= `b`(v1) @signature `Lb/f;.b:()Ljava/lang/String;` @kind virtual;
  #L08b480.  v1:= temp @kind object;
  #L08b482.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08b488.  v0:= temp @kind object;
  #L08b48a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08b490.  v0:= temp @kind object;
  #L08b492.  return v0 @kind object;
}
