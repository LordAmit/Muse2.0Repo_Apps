record `a.z$a` @kind class @AccessFlag PUBLIC {
  `a.x` `a.z$a.a` @AccessFlag ;
  `a.v` `a.z$a.b` @AccessFlag ;
  `int` `a.z$a.c` @AccessFlag ;
  `java.lang.String` `a.z$a.d` @AccessFlag ;
  `a.p` `a.z$a.e` @AccessFlag ;
  `a.q$a` `a.z$a.f` @AccessFlag ;
  `a.aa` `a.z$a.g` @AccessFlag ;
  `a.z` `a.z$a.h` @AccessFlag ;
  `a.z` `a.z$a.i` @AccessFlag ;
  `a.z` `a.z$a.j` @AccessFlag ;
  `long` `a.z$a.k` @AccessFlag ;
  `long` `a.z$a.l` @AccessFlag ;
}
procedure `void` `<init>`(`a.z$a` v1 @kind this) @signature `La/z$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L091858.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L09185e.  v0:= -1I;
  #L091860.  v1.`a.z$a.c` @type ^`int` := v0;
  #L091864.  v0:= new `a.q$a`;
  #L091868.  call `<init>`(v0) @signature `La/q$a;.<init>:()V` @kind direct;
  #L09186e.  v1.`a.z$a.f` @type ^`a.q$a` := v0 @kind object;
  #L091872.  return @kind void;
}
procedure `void` `<init>`(`a.z$a` v2 @kind this, `a.z` v3 @kind object) @signature `La/z$a;.<init>:(La/z;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L091884.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L09188a.  v0:= -1I;
  #L09188c.  v2.`a.z$a.c` @type ^`int` := v0;
  #L091890.  v0:= v3.`a.z.a` @type ^`a.x` @kind object;
  #L091894.  v2.`a.z$a.a` @type ^`a.x` := v0 @kind object;
  #L091898.  v0:= v3.`a.z.b` @type ^`a.v` @kind object;
  #L09189c.  v2.`a.z$a.b` @type ^`a.v` := v0 @kind object;
  #L0918a0.  v0:= v3.`a.z.c` @type ^`int`;
  #L0918a4.  v2.`a.z$a.c` @type ^`int` := v0;
  #L0918a8.  v0:= v3.`a.z.d` @type ^`java.lang.String` @kind object;
  #L0918ac.  v2.`a.z$a.d` @type ^`java.lang.String` := v0 @kind object;
  #L0918b0.  v0:= v3.`a.z.e` @type ^`a.p` @kind object;
  #L0918b4.  v2.`a.z$a.e` @type ^`a.p` := v0 @kind object;
  #L0918b8.  v0:= v3.`a.z.f` @type ^`a.q` @kind object;
  #L0918bc.  call temp:= `b`(v0) @signature `La/q;.b:()La/q$a;` @kind virtual;
  #L0918c2.  v0:= temp @kind object;
  #L0918c4.  v2.`a.z$a.f` @type ^`a.q$a` := v0 @kind object;
  #L0918c8.  v0:= v3.`a.z.g` @type ^`a.aa` @kind object;
  #L0918cc.  v2.`a.z$a.g` @type ^`a.aa` := v0 @kind object;
  #L0918d0.  v0:= v3.`a.z.h` @type ^`a.z` @kind object;
  #L0918d4.  v2.`a.z$a.h` @type ^`a.z` := v0 @kind object;
  #L0918d8.  v0:= v3.`a.z.i` @type ^`a.z` @kind object;
  #L0918dc.  v2.`a.z$a.i` @type ^`a.z` := v0 @kind object;
  #L0918e0.  v0:= v3.`a.z.j` @type ^`a.z` @kind object;
  #L0918e4.  v2.`a.z$a.j` @type ^`a.z` := v0 @kind object;
  #L0918e8.  v0:= v3.`a.z.k` @type ^`long` @kind wide;
  #L0918ec.  v2.`a.z$a.k` @type ^`long` := v0 @kind wide;
  #L0918f0.  v0:= v3.`a.z.l` @type ^`long` @kind wide;
  #L0918f4.  v2.`a.z$a.l` @type ^`long` := v0 @kind wide;
  #L0918f8.  return @kind void;
}
procedure `void` `a`(`a.z$a` v3 @kind this, `java.lang.String` v4 @kind object, `a.z` v5 @kind object) @signature `La/z$a;.a:(Ljava/lang/String;La/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L09190c.  v0:= v5.`a.z.g` @type ^`a.aa` @kind object;
  #L091910.  if v0 == 0 then goto L091946;
  #L091914.  v0:= new `java.lang.IllegalArgumentException`;
  #L091918.  v1:= new `java.lang.StringBuilder`;
  #L09191c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L091922.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L091928.  v1:= temp @kind object;
  #L09192a.  v2:= ".body != null" @kind object;
  #L09192e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L091934.  v1:= temp @kind object;
  #L091936.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L09193c.  v1:= temp @kind object;
  #L09193e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L091944.  throw v0;
  #L091946.  v0:= v5.`a.z.h` @type ^`a.z` @kind object;
  #L09194a.  if v0 == 0 then goto L091980;
  #L09194e.  v0:= new `java.lang.IllegalArgumentException`;
  #L091952.  v1:= new `java.lang.StringBuilder`;
  #L091956.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L09195c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L091962.  v1:= temp @kind object;
  #L091964.  v2:= ".networkResponse != null" @kind object;
  #L091968.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L09196e.  v1:= temp @kind object;
  #L091970.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L091976.  v1:= temp @kind object;
  #L091978.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L09197e.  throw v0;
  #L091980.  v0:= v5.`a.z.i` @type ^`a.z` @kind object;
  #L091984.  if v0 == 0 then goto L0919ba;
  #L091988.  v0:= new `java.lang.IllegalArgumentException`;
  #L09198c.  v1:= new `java.lang.StringBuilder`;
  #L091990.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L091996.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L09199c.  v1:= temp @kind object;
  #L09199e.  v2:= ".cacheResponse != null" @kind object;
  #L0919a2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0919a8.  v1:= temp @kind object;
  #L0919aa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0919b0.  v1:= temp @kind object;
  #L0919b2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0919b8.  throw v0;
  #L0919ba.  v0:= v5.`a.z.j` @type ^`a.z` @kind object;
  #L0919be.  if v0 == 0 then goto L0919f4;
  #L0919c2.  v0:= new `java.lang.IllegalArgumentException`;
  #L0919c6.  v1:= new `java.lang.StringBuilder`;
  #L0919ca.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0919d0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0919d6.  v1:= temp @kind object;
  #L0919d8.  v2:= ".priorResponse != null" @kind object;
  #L0919dc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0919e2.  v1:= temp @kind object;
  #L0919e4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0919ea.  v1:= temp @kind object;
  #L0919ec.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0919f2.  throw v0;
  #L0919f4.  return @kind void;
}
procedure `void` `d`(`a.z$a` v2 @kind this, `a.z` v3 @kind object) @signature `La/z$a;.d:(La/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L091a08.  v0:= v3.`a.z.g` @type ^`a.aa` @kind object;
  #L091a0c.  if v0 == 0 then goto L091a20;
  #L091a10.  v0:= new `java.lang.IllegalArgumentException`;
  #L091a14.  v1:= "priorResponse.body != null" @kind object;
  #L091a18.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L091a1e.  throw v0;
  #L091a20.  return @kind void;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `int` v1 ) @signature `La/z$a;.a:(I)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L091a34.  v0.`a.z$a.c` @type ^`int` := v1;
  #L091a38.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `long` v2 ) @signature `La/z$a;.a:(J)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L091a4c.  v1.`a.z$a.k` @type ^`long` := v2 @kind wide;
  #L091a50.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.aa` v1 @kind object) @signature `La/z$a;.a:(La/aa;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L091a64.  v0.`a.z$a.g` @type ^`a.aa` := v1 @kind object;
  #L091a68.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.p` v1 @kind object) @signature `La/z$a;.a:(La/p;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L091a7c.  v0.`a.z$a.e` @type ^`a.p` := v1 @kind object;
  #L091a80.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `a.q` v2 @kind object) @signature `La/z$a;.a:(La/q;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L091a94.  call temp:= `b`(v2) @signature `La/q;.b:()La/q$a;` @kind virtual;
  #L091a9a.  v0:= temp @kind object;
  #L091a9c.  v1.`a.z$a.f` @type ^`a.q$a` := v0 @kind object;
  #L091aa0.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.v` v1 @kind object) @signature `La/z$a;.a:(La/v;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L091ab4.  v0.`a.z$a.b` @type ^`a.v` := v1 @kind object;
  #L091ab8.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.x` v1 @kind object) @signature `La/z$a;.a:(La/x;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L091acc.  v0.`a.z$a.a` @type ^`a.x` := v1 @kind object;
  #L091ad0.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `a.z` v2 @kind object) @signature `La/z$a;.a:(La/z;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L091ae4.  if v2 == 0 then goto L091af2;
  #L091ae8.  v0:= "networkResponse" @kind object;
  #L091aec.  call `a`(v1, v0, v2) @signature `La/z$a;.a:(Ljava/lang/String;La/z;)V` @kind direct;
  #L091af2.  v1.`a.z$a.h` @type ^`a.z` := v2 @kind object;
  #L091af6.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `java.lang.String` v1 @kind object) @signature `La/z$a;.a:(Ljava/lang/String;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L091b08.  v0.`a.z$a.d` @type ^`java.lang.String` := v1 @kind object;
  #L091b0c.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `La/z$a;.a:(Ljava/lang/String;Ljava/lang/String;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L091b20.  v0:= v1.`a.z$a.f` @type ^`a.q$a` @kind object;
  #L091b24.  call temp:= `a`(v0, v2, v3) @signature `La/q$a;.a:(Ljava/lang/String;Ljava/lang/String;)La/q$a;` @kind virtual;
  #L091b2a.  return v1 @kind object;
}
procedure `a.z` `a`(`a.z$a` v3 @kind this) @signature `La/z$a;.a:()La/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L091b3c.  v0:= v3.`a.z$a.a` @type ^`a.x` @kind object;
  #L091b40.  if v0 != 0 then goto L091b54;
  #L091b44.  v0:= new `java.lang.IllegalStateException`;
  #L091b48.  v1:= "request == null" @kind object;
  #L091b4c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L091b52.  throw v0;
  #L091b54.  v0:= v3.`a.z$a.b` @type ^`a.v` @kind object;
  #L091b58.  if v0 != 0 then goto L091b6c;
  #L091b5c.  v0:= new `java.lang.IllegalStateException`;
  #L091b60.  v1:= "protocol == null" @kind object;
  #L091b64.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L091b6a.  throw v0;
  #L091b6c.  v0:= v3.`a.z$a.c` @type ^`int`;
  #L091b70.  if v0 >= 0 then goto L091baa;
  #L091b74.  v0:= new `java.lang.IllegalStateException`;
  #L091b78.  v1:= new `java.lang.StringBuilder`;
  #L091b7c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L091b82.  v2:= "code < 0: " @kind object;
  #L091b86.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L091b8c.  v1:= temp @kind object;
  #L091b8e.  v2:= v3.`a.z$a.c` @type ^`int`;
  #L091b92.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L091b98.  v1:= temp @kind object;
  #L091b9a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L091ba0.  v1:= temp @kind object;
  #L091ba2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L091ba8.  throw v0;
  #L091baa.  v0:= new `a.z`;
  #L091bae.  call `<init>`(v0, v3) @signature `La/z;.<init>:(La/z$a;)V` @kind direct;
  #L091bb4.  return v0 @kind object;
}
procedure `a.z$a` `b`(`a.z$a` v1 @kind this, `long` v2 ) @signature `La/z$a;.b:(J)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L091bc8.  v1.`a.z$a.l` @type ^`long` := v2 @kind wide;
  #L091bcc.  return v1 @kind object;
}
procedure `a.z$a` `b`(`a.z$a` v1 @kind this, `a.z` v2 @kind object) @signature `La/z$a;.b:(La/z;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L091be0.  if v2 == 0 then goto L091bee;
  #L091be4.  v0:= "cacheResponse" @kind object;
  #L091be8.  call `a`(v1, v0, v2) @signature `La/z$a;.a:(Ljava/lang/String;La/z;)V` @kind direct;
  #L091bee.  v1.`a.z$a.i` @type ^`a.z` := v2 @kind object;
  #L091bf2.  return v1 @kind object;
}
procedure `a.z$a` `c`(`a.z$a` v0 @kind this, `a.z` v1 @kind object) @signature `La/z$a;.c:(La/z;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L091c04.  if v1 == 0 then goto L091c0e;
  #L091c08.  call `d`(v0, v1) @signature `La/z$a;.d:(La/z;)V` @kind direct;
  #L091c0e.  v0.`a.z$a.j` @type ^`a.z` := v1 @kind object;
  #L091c12.  return v0 @kind object;
}
