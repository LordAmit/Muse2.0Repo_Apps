record `org.b.a.a.l` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b` @kind class {
  `org.b.a.a.d.b` `org.b.a.a.l.a` @AccessFlag PRIVATE;
  `org.b.a.a.b$a` `org.b.a.a.l.b` @AccessFlag PRIVATE;
  `org.b.a.a.a.c` `org.b.a.a.l.c` @AccessFlag PRIVATE;
  `org.b.a.a.b.h` `org.b.a.a.l.d` @AccessFlag PRIVATE;
  `byte`[] `org.b.a.a.l.e` @AccessFlag PRIVATE;
}
global `org.b.a.a.d.m` `@@org.b.a.a.l.f` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/b/a/a/l;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a0fb0.  v0:= new `org.b.a.a.d.l`;
  #L1a0fb4.  call `<init>`(v0) @signature `Lorg/b/a/a/d/l;.<init>:()V` @kind direct;
  #L1a0fba.  `@@org.b.a.a.l.f` @type ^`org.b.a.a.d.m` := v0 @kind object;
  #L1a0fbe.  return @kind void;
}
procedure `void` `<init>`(`org.b.a.a.l` v2 @kind this) @signature `Lorg/b/a/a/l;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1a0fd0.  call `<init>`(v2) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L1a0fd6.  v0:= new `org.b.a.a.d.b`;
  #L1a0fda.  v1:= `@@org.b.a.a.l.f` @type ^`org.b.a.a.d.m` @kind object;
  #L1a0fde.  call `<init>`(v0, v1) @signature `Lorg/b/a/a/d/b;.<init>:(Lorg/b/a/a/d/m;)V` @kind direct;
  #L1a0fe4.  v2.`org.b.a.a.l.a` @type ^`org.b.a.a.d.b` := v0 @kind object;
  #L1a0fe8.  v0:= new `org.b.a.a.a.c`;
  #L1a0fec.  call `<init>`(v0) @signature `Lorg/b/a/a/a/c;.<init>:()V` @kind direct;
  #L1a0ff2.  v2.`org.b.a.a.l.c` @type ^`org.b.a.a.a.c` := v0 @kind object;
  #L1a0ff6.  v0:= new `org.b.a.a.b.h`;
  #L1a0ffa.  call `<init>`(v0) @signature `Lorg/b/a/a/b/h;.<init>:()V` @kind direct;
  #L1a1000.  v2.`org.b.a.a.l.d` @type ^`org.b.a.a.b.h` := v0 @kind object;
  #L1a1004.  v0:= 2I;
  #L1a1006.  v0:= new `byte`[v0];
  #L1a100a.  v2.`org.b.a.a.l.e` @type ^`byte`[] := v0 @kind object;
  #L1a100e.  call `d`(v2) @signature `Lorg/b/a/a/l;.d:()V` @kind virtual;
  #L1a1014.  return @kind void;
}
procedure `java.lang.String` `a`(`org.b.a.a.l` v1 @kind this) @signature `Lorg/b/a/a/l;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a1028.  v0:= `@@org.b.a.b.l` @type ^`java.lang.String` @kind object;
  #L1a102c.  return v0 @kind object;
}
procedure `org.b.a.a.b$a` `a`(`org.b.a.a.l` v8 @kind this, `byte`[] v9 @kind object, `int` v10 , `int` v11 ) @signature `Lorg/b/a/a/l;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a1040.  v7:= 1I;
  #L1a1042.  v6:= 0I;
  #L1a1044.  v1:= v10 + v11 @kind int;
  #L1a1048.  v0:= v10;
  #L1a104a.  if v0 >= v1 then goto L1a106a;
  #L1a104e.  v2:= v8.`org.b.a.a.l.a` @type ^`org.b.a.a.d.b` @kind object;
  #L1a1052.  v3:= v9[v0] @kind byte;
  #L1a1056.  call temp:= `a`(v2, v3) @signature `Lorg/b/a/a/d/b;.a:(B)I` @kind virtual;
  #L1a105c.  v2:= temp;
  #L1a105e.  if v2 != v7 then goto L1a10ba;
  #L1a1062.  v0:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L1a1066.  v8.`org.b.a.a.l.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a106a.  v0:= v8.`org.b.a.a.l.e` @type ^`byte`[] @kind object;
  #L1a106e.  v1:= v1 + -1;
  #L1a1072.  v1:= v9[v1] @kind byte;
  #L1a1076.  v0[v6]:= v1 @kind byte;
  #L1a107a.  v0:= v8.`org.b.a.a.l.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1a107e.  v1:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a1082.  if v0 != v1 then goto L1a10b4;
  #L1a1086.  v0:= v8.`org.b.a.a.l.c` @type ^`org.b.a.a.a.c` @kind object;
  #L1a108a.  call temp:= `c`(v0) @signature `Lorg/b/a/a/a/c;.c:()Z` @kind virtual;
  #L1a1090.  v0:= temp;
  #L1a1092.  if v0 == 0 then goto L1a10b4;
  #L1a1096.  call temp:= `b`(v8) @signature `Lorg/b/a/a/l;.b:()F` @kind virtual;
  #L1a109c.  v0:= temp;
  #L1a109e.  v1:= 1064514355I;
  #L1a10a4.  v0:= fcmpl(v0, v1);
  #L1a10a8.  if v0 <= 0 then goto L1a10b4;
  #L1a10ac.  v0:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1a10b0.  v8.`org.b.a.a.l.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a10b4.  v0:= v8.`org.b.a.a.l.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1a10b8.  return v0 @kind object;
  #L1a10ba.  v3:= 2I;
  #L1a10bc.  if v2 != v3 then goto L1a10ca;
  #L1a10c0.  v0:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1a10c4.  v8.`org.b.a.a.l.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a10c8.  goto L1a106a;
  #L1a10ca.  if v2 != 0 then goto L1a110a;
  #L1a10ce.  v2:= v8.`org.b.a.a.l.a` @type ^`org.b.a.a.d.b` @kind object;
  #L1a10d2.  call temp:= `a`(v2) @signature `Lorg/b/a/a/d/b;.a:()I` @kind virtual;
  #L1a10d8.  v2:= temp;
  #L1a10da.  if v0 != v10 then goto L1a1110;
  #L1a10de.  v3:= v8.`org.b.a.a.l.e` @type ^`byte`[] @kind object;
  #L1a10e2.  v4:= v9[v10] @kind byte;
  #L1a10e6.  v3[v7]:= v4 @kind byte;
  #L1a10ea.  v3:= v8.`org.b.a.a.l.c` @type ^`org.b.a.a.a.c` @kind object;
  #L1a10ee.  v4:= v8.`org.b.a.a.l.e` @type ^`byte`[] @kind object;
  #L1a10f2.  v5:= v2 - 2;
  #L1a10f6.  call `a`(v3, v4, v5, v2) @signature `Lorg/b/a/a/a/c;.a:([BII)V` @kind virtual;
  #L1a10fc.  v3:= v8.`org.b.a.a.l.d` @type ^`org.b.a.a.b.h` @kind object;
  #L1a1100.  v4:= v8.`org.b.a.a.l.e` @type ^`byte`[] @kind object;
  #L1a1104.  call `a`(v3, v4, v6, v2) @signature `Lorg/b/a/a/b/h;.a:([BII)V` @kind virtual;
  #L1a110a.  v0:= v0 + 1;
  #L1a110e.  goto L1a104a;
  #L1a1110.  v3:= v8.`org.b.a.a.l.c` @type ^`org.b.a.a.a.c` @kind object;
  #L1a1114.  v4:= v0 + 1;
  #L1a1118.  v4:= v4 - v2 @kind int;
  #L1a111a.  call `a`(v3, v9, v4, v2) @signature `Lorg/b/a/a/a/c;.a:([BII)V` @kind virtual;
  #L1a1120.  v3:= v8.`org.b.a.a.l.d` @type ^`org.b.a.a.b.h` @kind object;
  #L1a1124.  v4:= v0 + -1;
  #L1a1128.  call `a`(v3, v9, v4, v2) @signature `Lorg/b/a/a/b/h;.a:([BII)V` @kind virtual;
  #L1a112e.  goto L1a110a;
}
procedure `float` `b`(`org.b.a.a.l` v2 @kind this) @signature `Lorg/b/a/a/l;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a1140.  v0:= v2.`org.b.a.a.l.c` @type ^`org.b.a.a.a.c` @kind object;
  #L1a1144.  call temp:= `a`(v0) @signature `Lorg/b/a/a/a/c;.a:()F` @kind virtual;
  #L1a114a.  v0:= temp;
  #L1a114c.  v1:= v2.`org.b.a.a.l.d` @type ^`org.b.a.a.b.h` @kind object;
  #L1a1150.  call temp:= `a`(v1) @signature `Lorg/b/a/a/b/h;.a:()F` @kind virtual;
  #L1a1156.  v1:= temp;
  #L1a1158.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(FF)F` @kind static;
  #L1a115e.  v0:= temp;
  #L1a1160.  return v0;
}
procedure `org.b.a.a.b$a` `c`(`org.b.a.a.l` v1 @kind this) @signature `Lorg/b/a/a/l;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a1174.  v0:= v1.`org.b.a.a.l.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1a1178.  return v0 @kind object;
}
procedure `void` `d`(`org.b.a.a.l` v2 @kind this) @signature `Lorg/b/a/a/l;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a118c.  v0:= v2.`org.b.a.a.l.a` @type ^`org.b.a.a.d.b` @kind object;
  #L1a1190.  call `b`(v0) @signature `Lorg/b/a/a/d/b;.b:()V` @kind virtual;
  #L1a1196.  v0:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a119a.  v2.`org.b.a.a.l.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a119e.  v0:= v2.`org.b.a.a.l.c` @type ^`org.b.a.a.a.c` @kind object;
  #L1a11a2.  call `b`(v0) @signature `Lorg/b/a/a/a/c;.b:()V` @kind virtual;
  #L1a11a8.  v0:= v2.`org.b.a.a.l.d` @type ^`org.b.a.a.b.h` @kind object;
  #L1a11ac.  call `b`(v0) @signature `Lorg/b/a/a/b/h;.b:()V` @kind virtual;
  #L1a11b2.  v0:= v2.`org.b.a.a.l.e` @type ^`byte`[] @kind object;
  #L1a11b6.  v1:= 0I;
  #L1a11b8.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([BB)V` @kind static;
  #L1a11be.  return @kind void;
}
