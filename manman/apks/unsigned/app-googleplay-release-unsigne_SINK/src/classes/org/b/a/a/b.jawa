record `org.b.a.a.b` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`org.b.a.a.b` v0 @kind this) @signature `Lorg/b/a/a/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L180c08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L180c0e.  return @kind void;
}
procedure `boolean` `a`(`org.b.a.a.b` v1 @kind this, `byte` v2 ) @signature `Lorg/b/a/a/b;.a:(B)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L180c20.  v0:= v2 ^& 128;
  #L180c24.  if v0 != 0 then goto L180c2c;
  #L180c28.  v0:= 1I;
  #L180c2a.  return v0;
  #L180c2c.  v0:= 0I;
  #L180c2e.  goto L180c2a;
}
procedure `boolean` `b`(`org.b.a.a.b` v2 @kind this, `byte` v3 ) @signature `Lorg/b/a/a/b;.b:(B)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L180c40.  v0:= v3 ^& 255;
  #L180c44.  v1:= 65I;
  #L180c48.  if v0 < v1 then goto L180c64;
  #L180c4c.  v1:= 90I;
  #L180c50.  if v0 <= v1 then goto L180c5c;
  #L180c54.  v1:= 97I;
  #L180c58.  if v0 < v1 then goto L180c64;
  #L180c5c.  v1:= 122I;
  #L180c60.  if v0 <= v1 then goto L180c68;
  #L180c64.  v0:= 1I;
  #L180c66.  return v0;
  #L180c68.  v0:= 0I;
  #L180c6a.  goto L180c66;
}
procedure `java.lang.String` `a`() @signature `Lorg/b/a/a/b;.a:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.b.a.a.b$a` `a`(`byte`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lorg/b/a/a/b;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `float` `b`() @signature `Lorg/b/a/a/b;.b:()F` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.nio.ByteBuffer` `b`(`org.b.a.a.b` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/b/a/a/b;.b:([BII)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L180c7c.  v2:= 0I;
  #L180c7e.  call temp:= `allocate`(v10) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L180c84.  v3:= temp @kind object;
  #L180c86.  v4:= v9 + v10 @kind int;
  #L180c8a.  v0:= v9;
  #L180c8c.  v1:= v2;
  #L180c8e.  if v9 >= v4 then goto L180ce0;
  #L180c92.  v5:= v8[v9] @kind byte;
  #L180c96.  call temp:= `a`(v7, v5) @signature `Lorg/b/a/a/b;.a:(B)Z` @kind direct;
  #L180c9c.  v6:= temp;
  #L180c9e.  if v6 != 0 then goto L180caa;
  #L180ca2.  v1:= 1I;
  #L180ca4.  v9:= v9 + 1;
  #L180ca8.  goto L180c8e;
  #L180caa.  call temp:= `b`(v7, v5) @signature `Lorg/b/a/a/b;.b:(B)Z` @kind direct;
  #L180cb0.  v5:= temp;
  #L180cb2.  if v5 == 0 then goto L180ca4;
  #L180cb6.  if v1 == 0 then goto L180cda;
  #L180cba.  if v9 <= v0 then goto L180cda;
  #L180cbe.  v1:= v9 - v0 @kind int;
  #L180cc2.  call temp:= `put`(v3, v8, v0, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L180cc8.  v0:= 32I;
  #L180ccc.  call temp:= `put`(v3, v0) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L180cd2.  v0:= v9 + 1;
  #L180cd6.  v1:= v2;
  #L180cd8.  goto L180ca4;
  #L180cda.  v0:= v9 + 1;
  #L180cde.  goto L180ca4;
  #L180ce0.  if v1 == 0 then goto L180cf2;
  #L180ce4.  if v9 <= v0 then goto L180cf2;
  #L180ce8.  v1:= v9 - v0 @kind int;
  #L180cec.  call temp:= `put`(v3, v8, v0, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L180cf2.  return v3 @kind object;
}
procedure `java.nio.ByteBuffer` `c`(`org.b.a.a.b` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/b/a/a/b;.c:([BII)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L180d04.  v1:= 0I;
  #L180d06.  call temp:= `allocate`(v10) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L180d0c.  v3:= temp @kind object;
  #L180d0e.  v4:= v9 + v10 @kind int;
  #L180d12.  v2:= v9;
  #L180d14.  v0:= v1;
  #L180d16.  if v9 >= v4 then goto L180d78;
  #L180d1a.  v5:= v8[v9] @kind byte;
  #L180d1e.  v6:= 62I;
  #L180d22.  if v5 != v6 then goto L180d66;
  #L180d26.  v0:= v1;
  #L180d28.  call temp:= `a`(v7, v5) @signature `Lorg/b/a/a/b;.a:(B)Z` @kind direct;
  #L180d2e.  v6:= temp;
  #L180d30.  if v6 == 0 then goto L180d60;
  #L180d34.  call temp:= `b`(v7, v5) @signature `Lorg/b/a/a/b;.b:(B)Z` @kind direct;
  #L180d3a.  v5:= temp;
  #L180d3c.  if v5 == 0 then goto L180d60;
  #L180d40.  if v9 <= v2 then goto L180d72;
  #L180d44.  if v0 != 0 then goto L180d72;
  #L180d48.  v5:= v9 - v2 @kind int;
  #L180d4c.  call temp:= `put`(v3, v8, v2, v5) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L180d52.  v2:= 32I;
  #L180d56.  call temp:= `put`(v3, v2) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L180d5c.  v2:= v9 + 1;
  #L180d60.  v9:= v9 + 1;
  #L180d64.  goto L180d16;
  #L180d66.  v6:= 60I;
  #L180d6a.  if v5 != v6 then goto L180d28;
  #L180d6e.  v0:= 1I;
  #L180d70.  goto L180d28;
  #L180d72.  v2:= v9 + 1;
  #L180d76.  goto L180d60;
  #L180d78.  if v0 != 0 then goto L180d8a;
  #L180d7c.  if v9 <= v2 then goto L180d8a;
  #L180d80.  v0:= v9 - v2 @kind int;
  #L180d84.  call temp:= `put`(v3, v8, v2, v0) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L180d8a.  return v3 @kind object;
}
procedure `org.b.a.a.b$a` `c`() @signature `Lorg/b/a/a/b;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `d`() @signature `Lorg/b/a/a/b;.d:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
