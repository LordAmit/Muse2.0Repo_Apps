record `org.b.a.a.m` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b` @kind class {
  `org.b.a.a.b$a` `org.b.a.a.m.a` @AccessFlag PRIVATE;
  `org.b.a.a.c.l` `org.b.a.a.m.b` @AccessFlag PRIVATE;
  `boolean` `org.b.a.a.m.c` @AccessFlag PRIVATE;
  `short` `org.b.a.a.m.d` @AccessFlag PRIVATE;
  `int` `org.b.a.a.m.e` @AccessFlag PRIVATE;
  `int`[] `org.b.a.a.m.f` @AccessFlag PRIVATE;
  `int` `org.b.a.a.m.g` @AccessFlag PRIVATE;
  `int` `org.b.a.a.m.h` @AccessFlag PRIVATE;
  `org.b.a.a.b` `org.b.a.a.m.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.b.a.a.m` v1 @kind this, `org.b.a.a.c.l` v2 @kind object) @signature `Lorg/b/a/a/m;.<init>:(Lorg/b/a/a/c/l;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a11d0.  call `<init>`(v1) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L1a11d6.  v1.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` := v2 @kind object;
  #L1a11da.  v0:= 0I;
  #L1a11dc.  v1.`org.b.a.a.m.c` @type ^`boolean` := v0 @kind boolean;
  #L1a11e0.  v0:= 0I;
  #L1a11e2.  v1.`org.b.a.a.m.i` @type ^`org.b.a.a.b` := v0 @kind object;
  #L1a11e6.  v0:= 4I;
  #L1a11e8.  v0:= new `int`[v0];
  #L1a11ec.  v1.`org.b.a.a.m.f` @type ^`int`[] := v0 @kind object;
  #L1a11f0.  call `d`(v1) @signature `Lorg/b/a/a/m;.d:()V` @kind virtual;
  #L1a11f6.  return @kind void;
}
procedure `void` `<init>`(`org.b.a.a.m` v1 @kind this, `org.b.a.a.c.l` v2 @kind object, `boolean` v3 , `org.b.a.a.b` v4 @kind object) @signature `Lorg/b/a/a/m;.<init>:(Lorg/b/a/a/c/l;ZLorg/b/a/a/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a1208.  call `<init>`(v1) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L1a120e.  v1.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` := v2 @kind object;
  #L1a1212.  v1.`org.b.a.a.m.c` @type ^`boolean` := v3 @kind boolean;
  #L1a1216.  v1.`org.b.a.a.m.i` @type ^`org.b.a.a.b` := v4 @kind object;
  #L1a121a.  v0:= 4I;
  #L1a121c.  v0:= new `int`[v0];
  #L1a1220.  v1.`org.b.a.a.m.f` @type ^`int`[] := v0 @kind object;
  #L1a1224.  call `d`(v1) @signature `Lorg/b/a/a/m;.d:()V` @kind virtual;
  #L1a122a.  return @kind void;
}
procedure `java.lang.String` `a`(`org.b.a.a.m` v1 @kind this) @signature `Lorg/b/a/a/m;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a123c.  v0:= v1.`org.b.a.a.m.i` @type ^`org.b.a.a.b` @kind object;
  #L1a1240.  if v0 != 0 then goto L1a1252;
  #L1a1244.  v0:= v1.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` @kind object;
  #L1a1248.  call temp:= `b`(v0) @signature `Lorg/b/a/a/c/l;.b:()Ljava/lang/String;` @kind virtual;
  #L1a124e.  v0:= temp @kind object;
  #L1a1250.  return v0 @kind object;
  #L1a1252.  v0:= v1.`org.b.a.a.m.i` @type ^`org.b.a.a.b` @kind object;
  #L1a1256.  call temp:= `a`(v0) @signature `Lorg/b/a/a/b;.a:()Ljava/lang/String;` @kind virtual;
  #L1a125c.  v0:= temp @kind object;
  #L1a125e.  goto L1a1250;
}
procedure `org.b.a.a.b$a` `a`(`org.b.a.a.m` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/b/a/a/m;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a1270.  v6:= 64I;
  #L1a1274.  v0:= v9 + v10 @kind int;
  #L1a1278.  if v9 >= v0 then goto L1a1324;
  #L1a127c.  v1:= v7.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` @kind object;
  #L1a1280.  v2:= v8[v9] @kind byte;
  #L1a1284.  call temp:= `a`(v1, v2) @signature `Lorg/b/a/a/c/l;.a:(B)S` @kind virtual;
  #L1a128a.  v1:= temp;
  #L1a128c.  v2:= 250I;
  #L1a1290.  if v1 >= v2 then goto L1a12a0;
  #L1a1294.  v2:= v7.`org.b.a.a.m.g` @type ^`int`;
  #L1a1298.  v2:= v2 + 1;
  #L1a129c.  v7.`org.b.a.a.m.g` @type ^`int` := v2;
  #L1a12a0.  if v1 >= v6 then goto L1a12f2;
  #L1a12a4.  v2:= v7.`org.b.a.a.m.h` @type ^`int`;
  #L1a12a8.  v2:= v2 + 1;
  #L1a12ac.  v7.`org.b.a.a.m.h` @type ^`int` := v2;
  #L1a12b0.  v2:= v7.`org.b.a.a.m.d` @type ^`short` @kind short;
  #L1a12b4.  if v2 >= v6 then goto L1a12f2;
  #L1a12b8.  v2:= v7.`org.b.a.a.m.e` @type ^`int`;
  #L1a12bc.  v2:= v2 + 1;
  #L1a12c0.  v7.`org.b.a.a.m.e` @type ^`int` := v2;
  #L1a12c4.  v2:= v7.`org.b.a.a.m.c` @type ^`boolean` @kind boolean;
  #L1a12c8.  if v2 != 0 then goto L1a12fc;
  #L1a12cc.  v2:= v7.`org.b.a.a.m.f` @type ^`int`[] @kind object;
  #L1a12d0.  v3:= v7.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` @kind object;
  #L1a12d4.  v4:= v7.`org.b.a.a.m.d` @type ^`short` @kind short;
  #L1a12d8.  v4:= v4 * 64;
  #L1a12dc.  v4:= v4 + v1 @kind int;
  #L1a12de.  call temp:= `a`(v3, v4) @signature `Lorg/b/a/a/c/l;.a:(I)B` @kind virtual;
  #L1a12e4.  v3:= temp;
  #L1a12e6.  v4:= v2[v3];
  #L1a12ea.  v4:= v4 + 1;
  #L1a12ee.  v2[v3]:= v4;
  #L1a12f2.  v7.`org.b.a.a.m.d` @type ^`short` := v1 @kind char;
  #L1a12f6.  v9:= v9 + 1;
  #L1a12fa.  goto L1a1278;
  #L1a12fc.  v2:= v7.`org.b.a.a.m.f` @type ^`int`[] @kind object;
  #L1a1300.  v3:= v7.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` @kind object;
  #L1a1304.  v4:= v1 * 64;
  #L1a1308.  v5:= v7.`org.b.a.a.m.d` @type ^`short` @kind short;
  #L1a130c.  v4:= v4 + v5 @kind int;
  #L1a130e.  call temp:= `a`(v3, v4) @signature `Lorg/b/a/a/c/l;.a:(I)B` @kind virtual;
  #L1a1314.  v3:= temp;
  #L1a1316.  v4:= v2[v3];
  #L1a131a.  v4:= v4 + 1;
  #L1a131e.  v2[v3]:= v4;
  #L1a1322.  goto L1a12f2;
  #L1a1324.  v0:= v7.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a1328.  v1:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a132c.  if v0 != v1 then goto L1a135a;
  #L1a1330.  v0:= v7.`org.b.a.a.m.e` @type ^`int`;
  #L1a1334.  v1:= 1024I;
  #L1a1338.  if v0 <= v1 then goto L1a135a;
  #L1a133c.  call temp:= `b`(v7) @signature `Lorg/b/a/a/m;.b:()F` @kind virtual;
  #L1a1342.  v0:= temp;
  #L1a1344.  v1:= 1064514355I;
  #L1a134a.  v1:= fcmpl(v0, v1);
  #L1a134e.  if v1 <= 0 then goto L1a1360;
  #L1a1352.  v0:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1a1356.  v7.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a135a.  v0:= v7.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a135e.  return v0 @kind object;
  #L1a1360.  v1:= 1028443341I;
  #L1a1366.  v0:= fcmpg(v0, v1);
  #L1a136a.  if v0 >= 0 then goto L1a135a;
  #L1a136e.  v0:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L1a1372.  v7.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a1376.  goto L1a135a;
}
procedure `float` `b`(`org.b.a.a.m` v3 @kind this) @signature `Lorg/b/a/a/m;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a1388.  v2:= 1.0F;
  #L1a138c.  v0:= v3.`org.b.a.a.m.e` @type ^`int`;
  #L1a1390.  if v0 <= 0 then goto L1a13d8;
  #L1a1394.  v0:= v3.`org.b.a.a.m.f` @type ^`int`[] @kind object;
  #L1a1398.  v1:= 3I;
  #L1a139a.  v0:= v0[v1];
  #L1a139e.  v0:= (`float`) v0 @kind i2f;
  #L1a13a0.  v0:= v0 * v2 @kind float;
  #L1a13a2.  v1:= v3.`org.b.a.a.m.e` @type ^`int`;
  #L1a13a6.  v1:= (`float`) v1 @kind i2f;
  #L1a13a8.  v0:= v0 / v1 @kind float;
  #L1a13aa.  v1:= v3.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` @kind object;
  #L1a13ae.  call temp:= `a`(v1) @signature `Lorg/b/a/a/c/l;.a:()F` @kind virtual;
  #L1a13b4.  v1:= temp;
  #L1a13b6.  v0:= v0 / v1 @kind float;
  #L1a13b8.  v1:= v3.`org.b.a.a.m.h` @type ^`int`;
  #L1a13bc.  v1:= (`float`) v1 @kind i2f;
  #L1a13be.  v0:= v0 * v1 @kind float;
  #L1a13c0.  v1:= v3.`org.b.a.a.m.g` @type ^`int`;
  #L1a13c4.  v1:= (`float`) v1 @kind i2f;
  #L1a13c6.  v0:= v0 / v1 @kind float;
  #L1a13c8.  v1:= fcmpl(v0, v2);
  #L1a13cc.  if v1 < 0 then goto L1a13d6;
  #L1a13d0.  v0:= 1065185444I;
  #L1a13d6.  return v0;
  #L1a13d8.  v0:= 1008981770I;
  #L1a13de.  goto L1a13d6;
}
procedure `org.b.a.a.b$a` `c`(`org.b.a.a.m` v1 @kind this) @signature `Lorg/b/a/a/m;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a13f0.  v0:= v1.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a13f4.  return v0 @kind object;
}
procedure `void` `d`(`org.b.a.a.m` v3 @kind this) @signature `Lorg/b/a/a/m;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a1408.  v1:= 0I;
  #L1a140a.  v0:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a140e.  v3.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a1412.  v0:= 255I;
  #L1a1416.  v3.`org.b.a.a.m.d` @type ^`short` := v0 @kind char;
  #L1a141a.  v0:= v1;
  #L1a141c.  v2:= 4I;
  #L1a141e.  if v0 >= v2 then goto L1a1430;
  #L1a1422.  v2:= v3.`org.b.a.a.m.f` @type ^`int`[] @kind object;
  #L1a1426.  v2[v0]:= v1;
  #L1a142a.  v0:= v0 + 1;
  #L1a142e.  goto L1a141c;
  #L1a1430.  v3.`org.b.a.a.m.e` @type ^`int` := v1;
  #L1a1434.  v3.`org.b.a.a.m.g` @type ^`int` := v1;
  #L1a1438.  v3.`org.b.a.a.m.h` @type ^`int` := v1;
  #L1a143c.  return @kind void;
}
