record `org.b.a.a.b.h` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b.g` @kind class {
}
procedure `void` `<init>`(`org.b.a.a.b.h` v0 @kind this) @signature `Lorg/b/a/a/b/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L196040.  call `<init>`(v0) @signature `Lorg/b/a/a/b/g;.<init>:()V` @kind direct;
  #L196046.  return @kind void;
}
procedure `int` `a`(`org.b.a.a.b.h` v3 @kind this, `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/b/a/a/b/h;.a:([BI)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L196058.  v0:= v4[v5] @kind byte;
  #L19605c.  v0:= v0 ^& 255;
  #L196060.  v1:= 129I;
  #L196064.  if v0 < v1 then goto L196098;
  #L196068.  v1:= 159I;
  #L19606c.  if v0 > v1 then goto L196098;
  #L196070.  v0:= v0 + -129;
  #L196074.  v0:= v0 * 188;
  #L196078.  v1:= v5 + 1;
  #L19607c.  v1:= v4[v1] @kind byte;
  #L196080.  v1:= v1 ^& 255;
  #L196084.  v2:= v1 + -64;
  #L196088.  v0:= v0 + v2 @kind int;
  #L19608a.  v2:= 128I;
  #L19608e.  if v1 < v2 then goto L196096;
  #L196092.  v0:= v0 + -1;
  #L196096.  return v0;
  #L196098.  v1:= 224I;
  #L19609c.  if v0 < v1 then goto L1960b6;
  #L1960a0.  v1:= 239I;
  #L1960a4.  if v0 > v1 then goto L1960b6;
  #L1960a8.  v0:= v0 + -224;
  #L1960ac.  v0:= v0 + 31;
  #L1960b0.  v0:= v0 * 188;
  #L1960b4.  goto L196078;
  #L1960b6.  v0:= -1I;
  #L1960b8.  goto L196096;
}
