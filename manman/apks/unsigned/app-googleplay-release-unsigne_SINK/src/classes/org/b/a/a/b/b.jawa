record `org.b.a.a.b.b` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `int`[] `org.b.a.a.b.b.a` @AccessFlag PROTECTED;
  `float` `org.b.a.a.b.b.b` @AccessFlag PROTECTED;
  `boolean` `org.b.a.a.b.b.c` @AccessFlag PROTECTED;
  `int` `org.b.a.a.b.b.d` @AccessFlag PRIVATE;
  `int` `org.b.a.a.b.b.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.b.a.a.b.b` v0 @kind this) @signature `Lorg/b/a/a/b/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L181040.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L181046.  call `b`(v0) @signature `Lorg/b/a/a/b/b;.b:()V` @kind virtual;
  #L18104c.  return @kind void;
}
procedure `float` `a`(`org.b.a.a.b.b` v4 @kind this) @signature `Lorg/b/a/a/b/b;.a:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L181060.  v1:= 1065185444I;
  #L181066.  v0:= v4.`org.b.a.a.b.b.e` @type ^`int`;
  #L18106a.  if v0 <= 0 then goto L181078;
  #L18106e.  v0:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L181072.  v2:= 4I;
  #L181074.  if v0 > v2 then goto L181080;
  #L181078.  v0:= 1008981770I;
  #L18107e.  return v0;
  #L181080.  v0:= v4.`org.b.a.a.b.b.e` @type ^`int`;
  #L181084.  v2:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L181088.  if v0 == v2 then goto L1810ac;
  #L18108c.  v0:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L181090.  v2:= v4.`org.b.a.a.b.b.e` @type ^`int`;
  #L181094.  v3:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L181098.  v2:= v2 - v3 @kind int;
  #L18109a.  v0:= v0 / v2 @kind int;
  #L18109c.  v0:= (`float`) v0 @kind i2f;
  #L18109e.  v2:= v4.`org.b.a.a.b.b.b` @type ^`float`;
  #L1810a2.  v0:= v0 * v2 @kind float;
  #L1810a4.  v2:= fcmpg(v0, v1);
  #L1810a8.  if v2 < 0 then goto L18107e;
  #L1810ac.  v0:= v1;
  #L1810ae.  goto L18107e;
}
procedure `int` `a`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lorg/b/a/a/b/b;.a:([BI)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `a`(`org.b.a.a.b.b` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lorg/b/a/a/b/b;.a:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1810c0.  v0:= -1I;
  #L1810c2.  v1:= 2I;
  #L1810c4.  if v6 != v1 then goto L1810d0;
  #L1810c8.  call temp:= `a`(v3, v4, v5) @signature `Lorg/b/a/a/b/b;.a:([BI)I` @kind virtual;
  #L1810ce.  v0:= temp;
  #L1810d0.  if v0 < 0 then goto L181106;
  #L1810d4.  v1:= v3.`org.b.a.a.b.b.e` @type ^`int`;
  #L1810d8.  v1:= v1 + 1;
  #L1810dc.  v3.`org.b.a.a.b.b.e` @type ^`int` := v1;
  #L1810e0.  v1:= v3.`org.b.a.a.b.b.a` @type ^`int`[] @kind object;
  #L1810e4.  v1:= length @variable v1;
  #L1810e6.  if v0 >= v1 then goto L181106;
  #L1810ea.  v1:= 512I;
  #L1810ee.  v2:= v3.`org.b.a.a.b.b.a` @type ^`int`[] @kind object;
  #L1810f2.  v0:= v2[v0];
  #L1810f6.  if v1 <= v0 then goto L181106;
  #L1810fa.  v0:= v3.`org.b.a.a.b.b.d` @type ^`int`;
  #L1810fe.  v0:= v0 + 1;
  #L181102.  v3.`org.b.a.a.b.b.d` @type ^`int` := v0;
  #L181106.  return @kind void;
}
procedure `void` `b`(`org.b.a.a.b.b` v1 @kind this) @signature `Lorg/b/a/a/b/b;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L181118.  v0:= 0I;
  #L18111a.  v1.`org.b.a.a.b.b.c` @type ^`boolean` := v0 @kind boolean;
  #L18111e.  v1.`org.b.a.a.b.b.e` @type ^`int` := v0;
  #L181122.  v1.`org.b.a.a.b.b.d` @type ^`int` := v0;
  #L181126.  return @kind void;
}
procedure `boolean` `c`(`org.b.a.a.b.b` v2 @kind this) @signature `Lorg/b/a/a/b/b;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L181138.  v0:= v2.`org.b.a.a.b.b.e` @type ^`int`;
  #L18113c.  v1:= 1024I;
  #L181140.  if v0 <= v1 then goto L181148;
  #L181144.  v0:= 1I;
  #L181146.  return v0;
  #L181148.  v0:= 0I;
  #L18114a.  goto L181146;
}
