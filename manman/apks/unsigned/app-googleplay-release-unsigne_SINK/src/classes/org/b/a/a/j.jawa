record `org.b.a.a.j` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b` @kind class {
  `org.b.a.a.b$a` `org.b.a.a.j.a` @AccessFlag PRIVATE;
  `org.b.a.a.b`[] `org.b.a.a.j.b` @AccessFlag PRIVATE;
  `boolean`[] `org.b.a.a.j.c` @AccessFlag PRIVATE;
  `int` `org.b.a.a.j.d` @AccessFlag PRIVATE;
  `int` `org.b.a.a.j.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.b.a.a.j` v3 @kind this) @signature `Lorg/b/a/a/j;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L1a08d4.  v1:= 7I;
  #L1a08d6.  call `<init>`(v3) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L1a08dc.  v0:= new `org.b.a.a.b`[v1];
  #L1a08e0.  v3.`org.b.a.a.j.b` @type ^`org.b.a.a.b`[] := v0 @kind object;
  #L1a08e4.  v0:= new `boolean`[v1];
  #L1a08e8.  v3.`org.b.a.a.j.c` @type ^`boolean`[] := v0 @kind object;
  #L1a08ec.  v0:= v3.`org.b.a.a.j.b` @type ^`org.b.a.a.b`[] @kind object;
  #L1a08f0.  v1:= 0I;
  #L1a08f2.  v2:= new `org.b.a.a.n`;
  #L1a08f6.  call `<init>`(v2) @signature `Lorg/b/a/a/n;.<init>:()V` @kind direct;
  #L1a08fc.  v0[v1]:= v2 @kind object;
  #L1a0900.  v0:= v3.`org.b.a.a.j.b` @type ^`org.b.a.a.b`[] @kind object;
  #L1a0904.  v1:= 1I;
  #L1a0906.  v2:= new `org.b.a.a.l`;
  #L1a090a.  call `<init>`(v2) @signature `Lorg/b/a/a/l;.<init>:()V` @kind direct;
  #L1a0910.  v0[v1]:= v2 @kind object;
  #L1a0914.  v0:= v3.`org.b.a.a.j.b` @type ^`org.b.a.a.b`[] @kind object;
  #L1a0918.  v1:= 2I;
  #L1a091a.  v2:= new `org.b.a.a.c`;
  #L1a091e.  call `<init>`(v2) @signature `Lorg/b/a/a/c;.<init>:()V` @kind direct;
  #L1a0924.  v0[v1]:= v2 @kind object;
  #L1a0928.  v0:= v3.`org.b.a.a.j.b` @type ^`org.b.a.a.b`[] @kind object;
  #L1a092c.  v1:= 3I;
  #L1a092e.  v2:= new `org.b.a.a.g`;
  #L1a0932.  call `<init>`(v2) @signature `Lorg/b/a/a/g;.<init>:()V` @kind direct;
  #L1a0938.  v0[v1]:= v2 @kind object;
  #L1a093c.  v0:= v3.`org.b.a.a.j.b` @type ^`org.b.a.a.b`[] @kind object;
  #L1a0940.  v1:= 4I;
  #L1a0942.  v2:= new `org.b.a.a.d`;
  #L1a0946.  call `<init>`(v2) @signature `Lorg/b/a/a/d;.<init>:()V` @kind direct;
  #L1a094c.  v0[v1]:= v2 @kind object;
  #L1a0950.  v0:= v3.`org.b.a.a.j.b` @type ^`org.b.a.a.b`[] @kind object;
  #L1a0954.  v1:= 5I;
  #L1a0956.  v2:= new `org.b.a.a.a`;
  #L1a095a.  call `<init>`(v2) @signature `Lorg/b/a/a/a;.<init>:()V` @kind direct;
  #L1a0960.  v0[v1]:= v2 @kind object;
  #L1a0964.  v0:= v3.`org.b.a.a.j.b` @type ^`org.b.a.a.b`[] @kind object;
  #L1a0968.  v1:= 6I;
  #L1a096a.  v2:= new `org.b.a.a.e`;
  #L1a096e.  call `<init>`(v2) @signature `Lorg/b/a/a/e;.<init>:()V` @kind direct;
  #L1a0974.  v0[v1]:= v2 @kind object;
  #L1a0978.  call `d`(v3) @signature `Lorg/b/a/a/j;.d:()V` @kind virtual;
  #L1a097e.  return @kind void;
}
procedure `java.lang.String` `a`(`org.b.a.a.j` v2 @kind this) @signature `Lorg/b/a/a/j;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1a0990.  v1:= -1I;
  #L1a0992.  v0:= v2.`org.b.a.a.j.d` @type ^`int`;
  #L1a0996.  if v0 != v1 then goto L1a09ae;
  #L1a099a.  call temp:= `b`(v2) @signature `Lorg/b/a/a/j;.b:()F` @kind virtual;
  #L1a09a0.  v0:= v2.`org.b.a.a.j.d` @type ^`int`;
  #L1a09a4.  if v0 != v1 then goto L1a09ae;
  #L1a09a8.  v0:= 0I;
  #L1a09aa.  v2.`org.b.a.a.j.d` @type ^`int` := v0;
  #L1a09ae.  v0:= v2.`org.b.a.a.j.b` @type ^`org.b.a.a.b`[] @kind object;
  #L1a09b2.  v1:= v2.`org.b.a.a.j.d` @type ^`int`;
  #L1a09b6.  v0:= v0[v1] @kind object;
  #L1a09ba.  call temp:= `a`(v0) @signature `Lorg/b/a/a/b;.a:()Ljava/lang/String;` @kind virtual;
  #L1a09c0.  v0:= temp @kind object;
  #L1a09c2.  return v0 @kind object;
}
procedure `org.b.a.a.b$a` `a`(`org.b.a.a.j` v8 @kind this, `byte`[] v9 @kind object, `int` v10 , `int` v11 ) @signature `Lorg/b/a/a/j;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1a09d4.  v2:= 1I;
  #L1a09d6.  v3:= 0I;
  #L1a09d8.  v4:= new `byte`[v11];
  #L1a09dc.  v5:= v10 + v11 @kind int;
  #L1a09e0.  v1:= v3;
  #L1a09e2.  v0:= v2;
  #L1a09e4.  if v10 >= v5 then goto L1a0a22;
  #L1a09e8.  v6:= v9[v10] @kind byte;
  #L1a09ec.  v6:= v6 ^& 128;
  #L1a09f0.  if v6 == 0 then goto L1a0a0e;
  #L1a09f4.  v0:= v1 + 1;
  #L1a09f8.  v6:= v9[v10] @kind byte;
  #L1a09fc.  v4[v1]:= v6 @kind byte;
  #L1a0a00.  v1:= v2;
  #L1a0a02.  v10:= v10 + 1;
  #L1a0a06.  v7:= v0;
  #L1a0a08.  v0:= v1;
  #L1a0a0a.  v1:= v7;
  #L1a0a0c.  goto L1a09e4;
  #L1a0a0e.  if v0 == 0 then goto L1a0a98;
  #L1a0a12.  v0:= v1 + 1;
  #L1a0a16.  v6:= v9[v10] @kind byte;
  #L1a0a1a.  v4[v1]:= v6 @kind byte;
  #L1a0a1e.  v1:= v3;
  #L1a0a20.  goto L1a0a02;
  #L1a0a22.  v0:= v3;
  #L1a0a24.  v2:= v8.`org.b.a.a.j.b` @type ^`org.b.a.a.b`[] @kind object;
  #L1a0a28.  v2:= length @variable v2;
  #L1a0a2a.  if v0 >= v2 then goto L1a0a64;
  #L1a0a2e.  v2:= v8.`org.b.a.a.j.c` @type ^`boolean`[] @kind object;
  #L1a0a32.  v2:= v2[v0] @kind boolean;
  #L1a0a36.  if v2 != 0 then goto L1a0a40;
  #L1a0a3a.  v0:= v0 + 1;
  #L1a0a3e.  goto L1a0a24;
  #L1a0a40.  v2:= v8.`org.b.a.a.j.b` @type ^`org.b.a.a.b`[] @kind object;
  #L1a0a44.  v2:= v2[v0] @kind object;
  #L1a0a48.  call temp:= `a`(v2, v4, v3, v1) @signature `Lorg/b/a/a/b;.a:([BII)Lorg/b/a/a/b$a;` @kind virtual;
  #L1a0a4e.  v2:= temp @kind object;
  #L1a0a50.  v5:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1a0a54.  if v2 != v5 then goto L1a0a6a;
  #L1a0a58.  v8.`org.b.a.a.j.d` @type ^`int` := v0;
  #L1a0a5c.  v0:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1a0a60.  v8.`org.b.a.a.j.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a0a64.  v0:= v8.`org.b.a.a.j.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a0a68.  return v0 @kind object;
  #L1a0a6a.  v5:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L1a0a6e.  if v2 != v5 then goto L1a0a3a;
  #L1a0a72.  v2:= v8.`org.b.a.a.j.c` @type ^`boolean`[] @kind object;
  #L1a0a76.  v2[v0]:= v3 @kind boolean;
  #L1a0a7a.  v2:= v8.`org.b.a.a.j.e` @type ^`int`;
  #L1a0a7e.  v2:= v2 + -1;
  #L1a0a82.  v8.`org.b.a.a.j.e` @type ^`int` := v2;
  #L1a0a86.  v2:= v8.`org.b.a.a.j.e` @type ^`int`;
  #L1a0a8a.  if v2 > 0 then goto L1a0a3a;
  #L1a0a8e.  v0:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L1a0a92.  v8.`org.b.a.a.j.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a0a96.  goto L1a0a64;
  #L1a0a98.  v7:= v1;
  #L1a0a9a.  v1:= v0;
  #L1a0a9c.  v0:= v7;
  #L1a0a9e.  goto L1a0a02;
}
procedure `float` `b`(`org.b.a.a.j` v4 @kind this) @signature `Lorg/b/a/a/j;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1a0ab0.  v1:= 0I;
  #L1a0ab2.  v0:= v4.`org.b.a.a.j.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a0ab6.  v2:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1a0aba.  if v0 != v2 then goto L1a0ac6;
  #L1a0abe.  v1:= 1065185444I;
  #L1a0ac4.  return v1;
  #L1a0ac6.  v0:= v4.`org.b.a.a.j.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a0aca.  v2:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L1a0ace.  if v0 != v2 then goto L1a0ada;
  #L1a0ad2.  v1:= 1008981770I;
  #L1a0ad8.  goto L1a0ac4;
  #L1a0ada.  v0:= 0I;
  #L1a0adc.  v2:= v4.`org.b.a.a.j.b` @type ^`org.b.a.a.b`[] @kind object;
  #L1a0ae0.  v2:= length @variable v2;
  #L1a0ae2.  if v0 >= v2 then goto L1a0ac4;
  #L1a0ae6.  v2:= v4.`org.b.a.a.j.c` @type ^`boolean`[] @kind object;
  #L1a0aea.  v2:= v2[v0] @kind boolean;
  #L1a0aee.  if v2 != 0 then goto L1a0af8;
  #L1a0af2.  v0:= v0 + 1;
  #L1a0af6.  goto L1a0adc;
  #L1a0af8.  v2:= v4.`org.b.a.a.j.b` @type ^`org.b.a.a.b`[] @kind object;
  #L1a0afc.  v2:= v2[v0] @kind object;
  #L1a0b00.  call temp:= `b`(v2) @signature `Lorg/b/a/a/b;.b:()F` @kind virtual;
  #L1a0b06.  v2:= temp;
  #L1a0b08.  v3:= fcmpg(v1, v2);
  #L1a0b0c.  if v3 >= 0 then goto L1a0af2;
  #L1a0b10.  v4.`org.b.a.a.j.d` @type ^`int` := v0;
  #L1a0b14.  v1:= v2;
  #L1a0b16.  goto L1a0af2;
}
procedure `org.b.a.a.b$a` `c`(`org.b.a.a.j` v1 @kind this) @signature `Lorg/b/a/a/j;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a0b28.  v0:= v1.`org.b.a.a.j.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a0b2c.  return v0 @kind object;
}
procedure `void` `d`(`org.b.a.a.j` v3 @kind this) @signature `Lorg/b/a/a/j;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a0b40.  v0:= 0I;
  #L1a0b42.  v3.`org.b.a.a.j.e` @type ^`int` := v0;
  #L1a0b46.  v1:= v3.`org.b.a.a.j.b` @type ^`org.b.a.a.b`[] @kind object;
  #L1a0b4a.  v1:= length @variable v1;
  #L1a0b4c.  if v0 >= v1 then goto L1a0b7a;
  #L1a0b50.  v1:= v3.`org.b.a.a.j.b` @type ^`org.b.a.a.b`[] @kind object;
  #L1a0b54.  v1:= v1[v0] @kind object;
  #L1a0b58.  call `d`(v1) @signature `Lorg/b/a/a/b;.d:()V` @kind virtual;
  #L1a0b5e.  v1:= v3.`org.b.a.a.j.c` @type ^`boolean`[] @kind object;
  #L1a0b62.  v2:= 1I;
  #L1a0b64.  v1[v0]:= v2 @kind boolean;
  #L1a0b68.  v1:= v3.`org.b.a.a.j.e` @type ^`int`;
  #L1a0b6c.  v1:= v1 + 1;
  #L1a0b70.  v3.`org.b.a.a.j.e` @type ^`int` := v1;
  #L1a0b74.  v0:= v0 + 1;
  #L1a0b78.  goto L1a0b46;
  #L1a0b7a.  v0:= -1I;
  #L1a0b7c.  v3.`org.b.a.a.j.d` @type ^`int` := v0;
  #L1a0b80.  v0:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a0b84.  v3.`org.b.a.a.j.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a0b88.  return @kind void;
}
