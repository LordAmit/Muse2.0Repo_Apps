record `org.b.a.a.i` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b` @kind class {
  `org.b.a.a.b$a` `org.b.a.a.i.a` @AccessFlag PRIVATE;
  `byte` `org.b.a.a.i.b` @AccessFlag PRIVATE;
  `int`[] `org.b.a.a.i.c` @AccessFlag PRIVATE;
}
global `byte`[] `@@org.b.a.a.i.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@org.b.a.a.i.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/b/a/a/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a05ac.  v0:= 256I;
  #L1a05b0.  v0:= new `byte`[v0];
  #L1a05b4.  goto L1a05d4;
  #L1a05ba.  `@@org.b.a.a.i.d` @type ^`byte`[] := v0 @kind object;
  #L1a05be.  v0:= 64I;
  #L1a05c2.  v0:= new `byte`[v0];
  #L1a05c6.  goto L1a06dc;
  #L1a05cc.  `@@org.b.a.a.i.e` @type ^`byte`[] := v0 @kind object;
  #L1a05d0.  return @kind void;
  #L1a05d2.  
  #L1a05d4.  v0:= (1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 1I, 1I, 1I, 1I, 1I, 1I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 1I, 1I, 1I, 1I, 1I, 1I, 0I, 1I, 7I, 1I, 1I, 1I, 1I, 1I, 1I, 5I, 1I, 5I, 0I, 5I, 0I, 0I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 7I, 1I, 7I, 0I, 7I, 5I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 4I, 4I, 4I, 4I, 4I, 4I, 5I, 5I, 4I, 4I, 4I, 4I, 4I, 4I, 4I, 4I, 5I, 5I, 4I, 4I, 4I, 4I, 4I, 1I, 4I, 4I, 4I, 4I, 4I, 5I, 5I, 5I, 6I, 6I, 6I, 6I, 6I, 6I, 7I, 7I, 6I, 6I, 6I, 6I, 6I, 6I, 6I, 6I, 7I, 7I, 6I, 6I, 6I, 6I, 6I, 1I, 6I, 6I, 6I, 6I, 6I, 7I, 7I, 7I) @kind object;
  #L1a06db.  goto L1a05ba;
  #L1a06dc.  v0:= (0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 0I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 0I, 3I, 3I, 3I, 1I, 1I, 3I, 3I, 0I, 3I, 3I, 3I, 1I, 2I, 1I, 2I, 0I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 0I, 3I, 1I, 3I, 1I, 1I, 1I, 3I, 0I, 3I, 1I, 3I, 1I, 1I, 3I, 3I) @kind object;
  #L1a0723.  goto L1a05cc;
}
procedure `void` `<init>`(`org.b.a.a.i` v1 @kind this) @signature `Lorg/b/a/a/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1a0734.  call `<init>`(v1) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L1a073a.  v0:= 4I;
  #L1a073c.  v0:= new `int`[v0];
  #L1a0740.  v1.`org.b.a.a.i.c` @type ^`int`[] := v0 @kind object;
  #L1a0744.  call `d`(v1) @signature `Lorg/b/a/a/i;.d:()V` @kind virtual;
  #L1a074a.  return @kind void;
}
procedure `java.lang.String` `a`(`org.b.a.a.i` v1 @kind this) @signature `Lorg/b/a/a/i;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a075c.  v0:= `@@org.b.a.b.r` @type ^`java.lang.String` @kind object;
  #L1a0760.  return v0 @kind object;
}
procedure `org.b.a.a.b$a` `a`(`org.b.a.a.i` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/b/a/a/i;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1a0774.  call temp:= `c`(v7, v8, v9, v10) @signature `Lorg/b/a/a/i;.c:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L1a077a.  v0:= temp @kind object;
  #L1a077c.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L1a0782.  v1:= temp @kind object;
  #L1a0784.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L1a078a.  v2:= temp;
  #L1a078c.  v0:= 0I;
  #L1a078e.  if v0 >= v2 then goto L1a07c0;
  #L1a0792.  v3:= v1[v0] @kind byte;
  #L1a0796.  v3:= v3 ^& 255;
  #L1a079a.  v4:= `@@org.b.a.a.i.d` @type ^`byte`[] @kind object;
  #L1a079e.  v3:= v4[v3] @kind byte;
  #L1a07a2.  v4:= `@@org.b.a.a.i.e` @type ^`byte`[] @kind object;
  #L1a07a6.  v5:= v7.`org.b.a.a.i.b` @type ^`byte` @kind byte;
  #L1a07aa.  v5:= v5 * 8;
  #L1a07ae.  v5:= v5 + v3 @kind int;
  #L1a07b0.  v4:= v4[v5] @kind byte;
  #L1a07b4.  if v4 != 0 then goto L1a07c6;
  #L1a07b8.  v0:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L1a07bc.  v7.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a07c0.  v0:= v7.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a07c4.  return v0 @kind object;
  #L1a07c6.  v5:= v7.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L1a07ca.  v6:= v5[v4];
  #L1a07ce.  v6:= v6 + 1;
  #L1a07d2.  v5[v4]:= v6;
  #L1a07d6.  v7.`org.b.a.a.i.b` @type ^`byte` := v3 @kind byte;
  #L1a07da.  v0:= v0 + 1;
  #L1a07de.  goto L1a078e;
}
procedure `float` `b`(`org.b.a.a.i` v5 @kind this) @signature `Lorg/b/a/a/i;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1a07f0.  v0:= 0I;
  #L1a07f2.  v2:= 0I;
  #L1a07f4.  v1:= v5.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a07f8.  v3:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L1a07fc.  if v1 != v3 then goto L1a0808;
  #L1a0800.  v0:= 1008981770I;
  #L1a0806.  return v0;
  #L1a0808.  v1:= v0;
  #L1a080a.  v3:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L1a080e.  v3:= length @variable v3;
  #L1a0810.  if v0 >= v3 then goto L1a0824;
  #L1a0814.  v3:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L1a0818.  v3:= v3[v0];
  #L1a081c.  v1:= v1 + v3 @kind int;
  #L1a081e.  v0:= v0 + 1;
  #L1a0822.  goto L1a080a;
  #L1a0824.  if v1 > 0 then goto L1a083c;
  #L1a0828.  v0:= v2;
  #L1a082a.  v1:= fcmpg(v0, v2);
  #L1a082e.  if v1 >= 0 then goto L1a0834;
  #L1a0832.  v0:= v2;
  #L1a0834.  v1:= 0.5F;
  #L1a0838.  v0:= v0 * v1 @kind float;
  #L1a083a.  goto L1a0806;
  #L1a083c.  v0:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L1a0840.  v3:= 3I;
  #L1a0842.  v0:= v0[v3];
  #L1a0846.  v0:= (`float`) v0 @kind i2f;
  #L1a0848.  v3:= 1.0F;
  #L1a084c.  v0:= v0 * v3 @kind float;
  #L1a084e.  v3:= (`float`) v1 @kind i2f;
  #L1a0850.  v0:= v0 / v3 @kind float;
  #L1a0852.  v3:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L1a0856.  v4:= 1I;
  #L1a0858.  v3:= v3[v4];
  #L1a085c.  v3:= (`float`) v3 @kind i2f;
  #L1a085e.  v4:= 20.0F;
  #L1a0862.  v3:= v3 * v4 @kind float;
  #L1a0864.  v1:= (`float`) v1 @kind i2f;
  #L1a0866.  v1:= v3 / v1 @kind float;
  #L1a086a.  v0:= v0 - v1 @kind float;
  #L1a086c.  goto L1a082a;
}
procedure `org.b.a.a.b$a` `c`(`org.b.a.a.i` v1 @kind this) @signature `Lorg/b/a/a/i;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1a0880.  v0:= v1.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a0884.  return v0 @kind object;
}
procedure `void` `d`(`org.b.a.a.i` v3 @kind this) @signature `Lorg/b/a/a/i;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1a0898.  v1:= 0I;
  #L1a089a.  v0:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1a089e.  v3.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1a08a2.  v0:= 1I;
  #L1a08a4.  v3.`org.b.a.a.i.b` @type ^`byte` := v0 @kind byte;
  #L1a08a8.  v0:= v1;
  #L1a08aa.  v2:= v3.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L1a08ae.  v2:= length @variable v2;
  #L1a08b0.  if v0 >= v2 then goto L1a08c2;
  #L1a08b4.  v2:= v3.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L1a08b8.  v2[v0]:= v1;
  #L1a08bc.  v0:= v0 + 1;
  #L1a08c0.  goto L1a08aa;
  #L1a08c2.  return @kind void;
}
