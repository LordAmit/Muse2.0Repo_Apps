record `b.f` @kind class @AccessFlag PUBLIC extends `java.io.Serializable` @kind interface, `java.lang.Comparable` @kind interface {
  `byte`[] `b.f.c` @AccessFlag FINAL;
  `int` `b.f.d` @AccessFlag TRANSIENT;
  `java.lang.String` `b.f.e` @AccessFlag TRANSIENT;
}
global `char`[] `@@b.f.a` @AccessFlag STATIC_FINAL;
global `b.f` `@@b.f.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L11c070.  v0:= 16I;
  #L11c074.  v0:= new `char`[v0];
  #L11c078.  goto L11c098;
  #L11c07e.  `@@b.f.a` @type ^`char`[] := v0 @kind object;
  #L11c082.  v0:= 0I;
  #L11c084.  v0:= new `byte`[v0];
  #L11c088.  call temp:= `a`(v0) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #L11c08e.  v0:= temp @kind object;
  #L11c090.  `@@b.f.b` @type ^`b.f` := v0 @kind object;
  #L11c094.  return @kind void;
  #L11c096.  
  #L11c098.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L11c0bf.  goto L11c07e;
}
procedure `void` `<init>`(`b.f` v0 @kind this, `byte`[] v1 @kind object) @signature `Lb/f;.<init>:([B)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11c0d0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11c0d6.  v0.`b.f.c` @type ^`byte`[] := v1 @kind object;
  #L11c0da.  return @kind void;
}
procedure `int` `a`(`char` v3 ) @signature `Lb/f;.a:(C)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L11c0ec.  v0:= 48I;
  #L11c0f0.  if v3 < v0 then goto L11c102;
  #L11c0f4.  v0:= 57I;
  #L11c0f8.  if v3 > v0 then goto L11c102;
  #L11c0fc.  v0:= v3 + -48;
  #L11c100.  return v0;
  #L11c102.  v0:= 97I;
  #L11c106.  if v3 < v0 then goto L11c11c;
  #L11c10a.  v0:= 102I;
  #L11c10e.  if v3 > v0 then goto L11c11c;
  #L11c112.  v0:= v3 + -97;
  #L11c116.  v0:= v0 + 10;
  #L11c11a.  goto L11c100;
  #L11c11c.  v0:= 65I;
  #L11c120.  if v3 < v0 then goto L11c136;
  #L11c124.  v0:= 70I;
  #L11c128.  if v3 > v0 then goto L11c136;
  #L11c12c.  v0:= v3 + -65;
  #L11c130.  v0:= v0 + 10;
  #L11c134.  goto L11c100;
  #L11c136.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c13a.  v1:= new `java.lang.StringBuilder`;
  #L11c13e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c144.  v2:= "Unexpected hex digit: " @kind object;
  #L11c148.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c14e.  v1:= temp @kind object;
  #L11c150.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c156.  v1:= temp @kind object;
  #L11c158.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c15e.  v1:= temp @kind object;
  #L11c160.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c166.  throw v0;
}
procedure `int` `a`(`java.lang.String` v5 @kind object, `int` v6 ) @signature `Lb/f;.a:(Ljava/lang/String;I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11c178.  v0:= 0I;
  #L11c17a.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11c180.  v2:= temp;
  #L11c182.  v1:= v0;
  #L11c184.  if v0 >= v2 then goto L11c1d0;
  #L11c188.  if v1 != v6 then goto L11c18e;
  #L11c18c.  return v0;
  #L11c18e.  call temp:= `codePointAt`(v5, v0) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L11c194.  v3:= temp;
  #L11c196.  call temp:= `isISOControl`(v3) @signature `Ljava/lang/Character;.isISOControl:(I)Z` @kind static;
  #L11c19c.  v4:= temp;
  #L11c19e.  if v4 == 0 then goto L11c1b2;
  #L11c1a2.  v4:= 10I;
  #L11c1a6.  if v3 == v4 then goto L11c1b2;
  #L11c1aa.  v4:= 13I;
  #L11c1ae.  if v3 != v4 then goto L11c1bc;
  #L11c1b2.  v4:= 65533I;
  #L11c1b8.  if v3 != v4 then goto L11c1c0;
  #L11c1bc.  v0:= -1I;
  #L11c1be.  goto L11c18c;
  #L11c1c0.  v1:= v1 + 1;
  #L11c1c4.  call temp:= `charCount`(v3) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L11c1ca.  v3:= temp;
  #L11c1cc.  v0:= v0 + v3 @kind int;
  #L11c1ce.  goto L11c184;
  #L11c1d0.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11c1d6.  v0:= temp;
  #L11c1d8.  goto L11c18c;
}
procedure `b.f` `a`(`java.lang.String` v2 @kind object) @signature `Lb/f;.a:(Ljava/lang/String;)Lb/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11c1ec.  if v2 != 0 then goto L11c200;
  #L11c1f0.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c1f4.  v1:= "s == null" @kind object;
  #L11c1f8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c1fe.  throw v0;
  #L11c200.  v0:= new `b.f`;
  #L11c204.  v1:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L11c208.  call temp:= `getBytes`(v2, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L11c20e.  v1:= temp @kind object;
  #L11c210.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11c216.  v0.`b.f.e` @type ^`java.lang.String` := v2 @kind object;
  #L11c21a.  return v0 @kind object;
}
procedure `b.f` `a`(`byte`[] v2 @kind object) @signature `Lb/f;.a:([B)Lb/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11c22c.  if v2 != 0 then goto L11c240;
  #L11c230.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c234.  v1:= "data == null" @kind object;
  #L11c238.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c23e.  throw v0;
  #L11c240.  v1:= new `b.f`;
  #L11c244.  call temp:= `clone`(v2) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L11c24a.  v0:= temp @kind object;
  #L11c24c.  v0:= (`byte`[]) v0 @kind object;
  #L11c250.  call `<init>`(v1, v0) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11c256.  return v1 @kind object;
}
procedure `b.f` `b`(`java.lang.String` v4 @kind object) @signature `Lb/f;.b:(Ljava/lang/String;)Lb/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11c268.  if v4 != 0 then goto L11c27c;
  #L11c26c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c270.  v1:= "hex == null" @kind object;
  #L11c274.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c27a.  throw v0;
  #L11c27c.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11c282.  v0:= temp;
  #L11c284.  v0:= v0 %% 2;
  #L11c288.  if v0 == 0 then goto L11c2be;
  #L11c28c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c290.  v1:= new `java.lang.StringBuilder`;
  #L11c294.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c29a.  v2:= "Unexpected hex string: " @kind object;
  #L11c29e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c2a4.  v1:= temp @kind object;
  #L11c2a6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c2ac.  v1:= temp @kind object;
  #L11c2ae.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c2b4.  v1:= temp @kind object;
  #L11c2b6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c2bc.  throw v0;
  #L11c2be.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11c2c4.  v0:= temp;
  #L11c2c6.  v0:= v0 / 2;
  #L11c2ca.  v1:= new `byte`[v0];
  #L11c2ce.  v0:= 0I;
  #L11c2d0.  v2:= length @variable v1;
  #L11c2d2.  if v0 >= v2 then goto L11c314;
  #L11c2d6.  v2:= v0 * 2;
  #L11c2da.  call temp:= `charAt`(v4, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L11c2e0.  v2:= temp;
  #L11c2e2.  call temp:= `a`(v2) @signature `Lb/f;.a:(C)I` @kind static;
  #L11c2e8.  v2:= temp;
  #L11c2ea.  v2:= v2 ^< 4;
  #L11c2ee.  v3:= v0 * 2;
  #L11c2f2.  v3:= v3 + 1;
  #L11c2f6.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L11c2fc.  v3:= temp;
  #L11c2fe.  call temp:= `a`(v3) @signature `Lb/f;.a:(C)I` @kind static;
  #L11c304.  v3:= temp;
  #L11c306.  v2:= v2 + v3 @kind int;
  #L11c308.  v2:= (`byte`) v2 @kind i2b;
  #L11c30a.  v1[v0]:= v2 @kind byte;
  #L11c30e.  v0:= v0 + 1;
  #L11c312.  goto L11c2d0;
  #L11c314.  call temp:= `a`(v1) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #L11c31a.  v0:= temp @kind object;
  #L11c31c.  return v0 @kind object;
}
procedure `b.f` `c`(`b.f` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lb/f;.c:(Ljava/lang/String;)Lb/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L11c330.  call temp:= `getInstance`(v3) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L11c336.  v0:= temp @kind object;
  #L11c338.  v1:= v2.`b.f.c` @type ^`byte`[] @kind object;
  #L11c33c.  call temp:= `digest`(v0, v1) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L11c342.  v0:= temp @kind object;
  #L11c344.  call temp:= `a`(v0) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #Try_end0.  
  #L11c34a.  v0:= temp @kind object;
  #L11c34c.  return v0 @kind object;
  #L11c34e.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L11c350.  v1:= new `java.lang.AssertionError`;
  #L11c354.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11c35a.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L11c34e;
}
procedure `byte` `a`(`b.f` v1 @kind this, `int` v2 ) @signature `Lb/f;.a:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c37c.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11c380.  v0:= v0[v2] @kind byte;
  #L11c384.  return v0;
}
procedure `b.f` `a`(`b.f` v4 @kind this, `int` v5 , `int` v6 ) @signature `Lb/f;.a:(II)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11c398.  if v5 >= 0 then goto L11c3ac;
  #L11c39c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c3a0.  v1:= "beginIndex < 0" @kind object;
  #L11c3a4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c3aa.  throw v0;
  #L11c3ac.  v0:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11c3b0.  v0:= length @variable v0;
  #L11c3b2.  if v6 <= v0 then goto L11c3fa;
  #L11c3b6.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c3ba.  v1:= new `java.lang.StringBuilder`;
  #L11c3be.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c3c4.  v2:= "endIndex > length(" @kind object;
  #L11c3c8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c3ce.  v1:= temp @kind object;
  #L11c3d0.  v2:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11c3d4.  v2:= length @variable v2;
  #L11c3d6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c3dc.  v1:= temp @kind object;
  #L11c3de.  v2:= ")" @kind object;
  #L11c3e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c3e8.  v1:= temp @kind object;
  #L11c3ea.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c3f0.  v1:= temp @kind object;
  #L11c3f2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c3f8.  throw v0;
  #L11c3fa.  v0:= v6 - v5 @kind int;
  #L11c3fe.  if v0 >= 0 then goto L11c412;
  #L11c402.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c406.  v1:= "endIndex < beginIndex" @kind object;
  #L11c40a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c410.  throw v0;
  #L11c412.  if v5 != 0 then goto L11c422;
  #L11c416.  v1:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11c41a.  v1:= length @variable v1;
  #L11c41c.  if v6 != v1 then goto L11c422;
  #L11c420.  return v4 @kind object;
  #L11c422.  v1:= new `byte`[v0];
  #L11c426.  v2:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11c42a.  v3:= 0I;
  #L11c42c.  call `arraycopy`(v2, v5, v1, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11c432.  v4:= new `b.f`;
  #L11c436.  call `<init>`(v4, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11c43c.  goto L11c420;
}
procedure `java.lang.String` `a`(`b.f` v3 @kind this) @signature `Lb/f;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11c450.  v0:= v3.`b.f.e` @type ^`java.lang.String` @kind object;
  #L11c454.  if v0 == 0 then goto L11c45a;
  #L11c458.  return v0 @kind object;
  #L11c45a.  v0:= new `java.lang.String`;
  #L11c45e.  v1:= v3.`b.f.c` @type ^`byte`[] @kind object;
  #L11c462.  v2:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L11c466.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L11c46c.  v3.`b.f.e` @type ^`java.lang.String` := v0 @kind object;
  #L11c470.  goto L11c458;
}
procedure `void` `a`(`b.f` v3 @kind this, `b.c` v4 @kind object) @signature `Lb/f;.a:(Lb/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L11c484.  v0:= v3.`b.f.c` @type ^`byte`[] @kind object;
  #L11c488.  v1:= 0I;
  #L11c48a.  v2:= v3.`b.f.c` @type ^`byte`[] @kind object;
  #L11c48e.  v2:= length @variable v2;
  #L11c490.  call temp:= `b`(v4, v0, v1, v2) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L11c496.  return @kind void;
}
procedure `boolean` `a`(`b.f` v1 @kind this, `int` v2 , `b.f` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lb/f;.a:(ILb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c4a8.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11c4ac.  call temp:= `a`(v3, v4, v0, v2, v5) @signature `Lb/f;.a:(I[BII)Z` @kind virtual;
  #L11c4b2.  v0:= temp;
  #L11c4b4.  return v0;
}
procedure `boolean` `a`(`b.f` v1 @kind this, `int` v2 , `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lb/f;.a:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c4c8.  if v2 < 0 then goto L11c4f8;
  #L11c4cc.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11c4d0.  v0:= length @variable v0;
  #L11c4d2.  v0:= v0 - v5 @kind int;
  #L11c4d4.  if v2 > v0 then goto L11c4f8;
  #L11c4d8.  if v4 < 0 then goto L11c4f8;
  #L11c4dc.  v0:= length @variable v3;
  #L11c4de.  v0:= v0 - v5 @kind int;
  #L11c4e0.  if v4 > v0 then goto L11c4f8;
  #L11c4e4.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11c4e8.  call temp:= `a`(v0, v2, v3, v4, v5) @signature `Lb/t;.a:([BI[BII)Z` @kind static;
  #L11c4ee.  v0:= temp;
  #L11c4f0.  if v0 == 0 then goto L11c4f8;
  #L11c4f4.  v0:= 1I;
  #L11c4f6.  return v0;
  #L11c4f8.  v0:= 0I;
  #L11c4fa.  goto L11c4f6;
}
procedure `boolean` `a`(`b.f` v2 @kind this, `b.f` v3 @kind object) @signature `Lb/f;.a:(Lb/f;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11c50c.  v1:= 0I;
  #L11c50e.  call temp:= `g`(v3) @signature `Lb/f;.g:()I` @kind virtual;
  #L11c514.  v0:= temp;
  #L11c516.  call temp:= `a`(v2, v1, v3, v1, v0) @signature `Lb/f;.a:(ILb/f;II)Z` @kind virtual;
  #L11c51c.  v0:= temp;
  #L11c51e.  return v0;
}
procedure `int` `b`(`b.f` v9 @kind this, `b.f` v10 @kind object) @signature `Lb/f;.b:(Lb/f;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11c530.  v1:= 1I;
  #L11c532.  v2:= 0I;
  #L11c534.  v0:= -1I;
  #L11c536.  call temp:= `g`(v9) @signature `Lb/f;.g:()I` @kind virtual;
  #L11c53c.  v4:= temp;
  #L11c53e.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11c544.  v5:= temp;
  #L11c546.  call temp:= `min`(v4, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11c54c.  v6:= temp;
  #L11c54e.  v3:= v2;
  #L11c550.  if v3 >= v6 then goto L11c580;
  #L11c554.  call temp:= `a`(v9, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L11c55a.  v7:= temp;
  #L11c55c.  v7:= v7 ^& 255;
  #L11c560.  call temp:= `a`(v10, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L11c566.  v8:= temp;
  #L11c568.  v8:= v8 ^& 255;
  #L11c56c.  if v7 != v8 then goto L11c576;
  #L11c570.  v3:= v3 + 1;
  #L11c574.  goto L11c550;
  #L11c576.  if v7 >= v8 then goto L11c57c;
  #L11c57a.  return v0;
  #L11c57c.  v0:= v1;
  #L11c57e.  goto L11c57a;
  #L11c580.  if v4 != v5 then goto L11c588;
  #L11c584.  v0:= v2;
  #L11c586.  goto L11c57a;
  #L11c588.  if v4 < v5 then goto L11c57a;
  #L11c58c.  v0:= v1;
  #L11c58e.  goto L11c57a;
}
procedure `java.lang.String` `b`(`b.f` v1 @kind this) @signature `Lb/f;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c5a0.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11c5a4.  call temp:= `a`(v0) @signature `Lb/b;.a:([B)Ljava/lang/String;` @kind static;
  #L11c5aa.  v0:= temp @kind object;
  #L11c5ac.  return v0 @kind object;
}
procedure `b.f` `c`(`b.f` v1 @kind this) @signature `Lb/f;.c:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c5c0.  v0:= "SHA-1" @kind object;
  #L11c5c4.  call temp:= `c`(v1, v0) @signature `Lb/f;.c:(Ljava/lang/String;)Lb/f;` @kind direct;
  #L11c5ca.  v0:= temp @kind object;
  #L11c5cc.  return v0 @kind object;
}
procedure `int` `compareTo`(`b.f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lb/f;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11c5e0.  v2:= (`b.f`) v2 @kind object;
  #L11c5e4.  call temp:= `b`(v1, v2) @signature `Lb/f;.b:(Lb/f;)I` @kind virtual;
  #L11c5ea.  v0:= temp;
  #L11c5ec.  return v0;
}
procedure `b.f` `d`(`b.f` v1 @kind this) @signature `Lb/f;.d:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c600.  v0:= "SHA-256" @kind object;
  #L11c604.  call temp:= `c`(v1, v0) @signature `Lb/f;.c:(Ljava/lang/String;)Lb/f;` @kind direct;
  #L11c60a.  v0:= temp @kind object;
  #L11c60c.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`b.f` v9 @kind this) @signature `Lb/f;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11c620.  v0:= 0I;
  #L11c622.  v1:= v9.`b.f.c` @type ^`byte`[] @kind object;
  #L11c626.  v1:= length @variable v1;
  #L11c628.  v1:= v1 * 2;
  #L11c62c.  v2:= new `char`[v1];
  #L11c630.  v3:= v9.`b.f.c` @type ^`byte`[] @kind object;
  #L11c634.  v4:= length @variable v3;
  #L11c636.  v1:= v0;
  #L11c638.  if v0 >= v4 then goto L11c672;
  #L11c63c.  v5:= v3[v0] @kind byte;
  #L11c640.  v6:= v1 + 1;
  #L11c644.  v7:= `@@b.f.a` @type ^`char`[] @kind object;
  #L11c648.  v8:= v5 ^> 4;
  #L11c64c.  v8:= v8 ^& 15;
  #L11c650.  v7:= v7[v8] @kind char;
  #L11c654.  v2[v1]:= v7 @kind char;
  #L11c658.  v1:= v6 + 1;
  #L11c65c.  v7:= `@@b.f.a` @type ^`char`[] @kind object;
  #L11c660.  v5:= v5 ^& 15;
  #L11c664.  v5:= v7[v5] @kind char;
  #L11c668.  v2[v6]:= v5 @kind char;
  #L11c66c.  v0:= v0 + 1;
  #L11c670.  goto L11c638;
  #L11c672.  v0:= new `java.lang.String`;
  #L11c676.  call `<init>`(v0, v2) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L11c67c.  return v0 @kind object;
}
procedure `boolean` `equals`(`b.f` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lb/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11c690.  v1:= 1I;
  #L11c692.  v2:= 0I;
  #L11c694.  if v5 != v4 then goto L11c69a;
  #L11c698.  return v1;
  #L11c69a.  v0:= instanceof @variable v5 @type ^`b.f` @kind boolean;
  #L11c69e.  if v0 == 0 then goto L11c6da;
  #L11c6a2.  v0:= v5 @kind object;
  #L11c6a4.  v0:= (`b.f`) v0 @kind object;
  #L11c6a8.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L11c6ae.  v0:= temp;
  #L11c6b0.  v3:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11c6b4.  v3:= length @variable v3;
  #L11c6b6.  if v0 != v3 then goto L11c6da;
  #L11c6ba.  v5:= (`b.f`) v5 @kind object;
  #L11c6be.  v0:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11c6c2.  v3:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11c6c6.  v3:= length @variable v3;
  #L11c6c8.  call temp:= `a`(v5, v2, v0, v2, v3) @signature `Lb/f;.a:(I[BII)Z` @kind virtual;
  #L11c6ce.  v0:= temp;
  #L11c6d0.  if v0 == 0 then goto L11c6da;
  #L11c6d4.  v0:= v1;
  #L11c6d6.  v1:= v0;
  #L11c6d8.  goto L11c698;
  #L11c6da.  v0:= v2;
  #L11c6dc.  goto L11c6d6;
}
procedure `b.f` `f`(`b.f` v6 @kind this) @signature `Lb/f;.f:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11c6f0.  v5:= 90I;
  #L11c6f4.  v4:= 65I;
  #L11c6f8.  v0:= 0I;
  #L11c6fa.  v1:= v0;
  #L11c6fc.  v0:= v6.`b.f.c` @type ^`byte`[] @kind object;
  #L11c700.  v0:= length @variable v0;
  #L11c702.  if v1 >= v0 then goto L11c76c;
  #L11c706.  v0:= v6.`b.f.c` @type ^`byte`[] @kind object;
  #L11c70a.  v3:= v0[v1] @kind byte;
  #L11c70e.  if v3 < v4 then goto L11c716;
  #L11c712.  if v3 <= v5 then goto L11c71e;
  #L11c716.  v0:= v1 + 1;
  #L11c71a.  v1:= v0;
  #L11c71c.  goto L11c6fc;
  #L11c71e.  v0:= v6.`b.f.c` @type ^`byte`[] @kind object;
  #L11c722.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L11c728.  v0:= temp @kind object;
  #L11c72a.  v0:= (`byte`[]) v0 @kind object;
  #L11c72e.  v2:= v1 + 1;
  #L11c732.  v3:= v3 + 32;
  #L11c736.  v3:= (`byte`) v3 @kind i2b;
  #L11c738.  v0[v1]:= v3 @kind byte;
  #L11c73c.  v1:= v2;
  #L11c73e.  v2:= length @variable v0;
  #L11c740.  if v1 >= v2 then goto L11c762;
  #L11c744.  v2:= v0[v1] @kind byte;
  #L11c748.  if v2 < v4 then goto L11c750;
  #L11c74c.  if v2 <= v5 then goto L11c756;
  #L11c750.  v1:= v1 + 1;
  #L11c754.  goto L11c73e;
  #L11c756.  v2:= v2 + 32;
  #L11c75a.  v2:= (`byte`) v2 @kind i2b;
  #L11c75c.  v0[v1]:= v2 @kind byte;
  #L11c760.  goto L11c750;
  #L11c762.  v6:= new `b.f`;
  #L11c766.  call `<init>`(v6, v0) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11c76c.  return v6 @kind object;
}
procedure `int` `g`(`b.f` v1 @kind this) @signature `Lb/f;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c780.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11c784.  v0:= length @variable v0;
  #L11c786.  return v0;
}
procedure `byte`[] `h`(`b.f` v1 @kind this) @signature `Lb/f;.h:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c798.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11c79c.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L11c7a2.  v0:= temp @kind object;
  #L11c7a4.  v0:= (`byte`[]) v0 @kind object;
  #L11c7a8.  return v0 @kind object;
}
procedure `int` `hashCode`(`b.f` v1 @kind this) @signature `Lb/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c7bc.  v0:= v1.`b.f.d` @type ^`int`;
  #L11c7c0.  if v0 == 0 then goto L11c7c6;
  #L11c7c4.  return v0;
  #L11c7c6.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11c7ca.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L11c7d0.  v0:= temp;
  #L11c7d2.  v1.`b.f.d` @type ^`int` := v0;
  #L11c7d6.  goto L11c7c4;
}
procedure `java.lang.String` `toString`(`b.f` v5 @kind this) @signature `Lb/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11c7e8.  v4:= 0I;
  #L11c7ea.  v3:= 64I;
  #L11c7ee.  v0:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L11c7f2.  v0:= length @variable v0;
  #L11c7f4.  if v0 != 0 then goto L11c7fe;
  #L11c7f8.  v0:= "[size=0]" @kind object;
  #L11c7fc.  return v0 @kind object;
  #L11c7fe.  call temp:= `a`(v5) @signature `Lb/f;.a:()Ljava/lang/String;` @kind virtual;
  #L11c804.  v0:= temp @kind object;
  #L11c806.  call temp:= `a`(v0, v3) @signature `Lb/f;.a:(Ljava/lang/String;I)I` @kind static;
  #L11c80c.  v1:= temp;
  #L11c80e.  v2:= -1I;
  #L11c810.  if v1 != v2 then goto L11c8b8;
  #L11c814.  v0:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L11c818.  v0:= length @variable v0;
  #L11c81a.  if v0 > v3 then goto L11c85a;
  #L11c81e.  v0:= new `java.lang.StringBuilder`;
  #L11c822.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c828.  v1:= "[hex=" @kind object;
  #L11c82c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c832.  v0:= temp @kind object;
  #L11c834.  call temp:= `e`(v5) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L11c83a.  v1:= temp @kind object;
  #L11c83c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c842.  v0:= temp @kind object;
  #L11c844.  v1:= "]" @kind object;
  #L11c848.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c84e.  v0:= temp @kind object;
  #L11c850.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c856.  v0:= temp @kind object;
  #L11c858.  goto L11c7fc;
  #L11c85a.  v0:= new `java.lang.StringBuilder`;
  #L11c85e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c864.  v1:= "[size=" @kind object;
  #L11c868.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c86e.  v0:= temp @kind object;
  #L11c870.  v1:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L11c874.  v1:= length @variable v1;
  #L11c876.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c87c.  v0:= temp @kind object;
  #L11c87e.  v1:= " hex=" @kind object;
  #L11c882.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c888.  v0:= temp @kind object;
  #L11c88a.  call temp:= `a`(v5, v4, v3) @signature `Lb/f;.a:(II)Lb/f;` @kind virtual;
  #L11c890.  v1:= temp @kind object;
  #L11c892.  call temp:= `e`(v1) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L11c898.  v1:= temp @kind object;
  #L11c89a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c8a0.  v0:= temp @kind object;
  #L11c8a2.  v1:= "…]" @kind object;
  #L11c8a6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c8ac.  v0:= temp @kind object;
  #L11c8ae.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c8b4.  v0:= temp @kind object;
  #L11c8b6.  goto L11c7fc;
  #L11c8b8.  call temp:= `substring`(v0, v4, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L11c8be.  v2:= temp @kind object;
  #L11c8c0.  v3:= "\\" @kind object;
  #L11c8c4.  v4:= "\\\\" @kind object;
  #L11c8c8.  call temp:= `replace`(v2, v3, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L11c8ce.  v2:= temp @kind object;
  #L11c8d0.  v3:= "\n" @kind object;
  #L11c8d4.  v4:= "\\n" @kind object;
  #L11c8d8.  call temp:= `replace`(v2, v3, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L11c8de.  v2:= temp @kind object;
  #L11c8e0.  v3:= "\r" @kind object;
  #L11c8e4.  v4:= "\\r" @kind object;
  #L11c8e8.  call temp:= `replace`(v2, v3, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L11c8ee.  v2:= temp @kind object;
  #L11c8f0.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11c8f6.  v0:= temp;
  #L11c8f8.  if v1 >= v0 then goto L11c94c;
  #L11c8fc.  v0:= new `java.lang.StringBuilder`;
  #L11c900.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c906.  v1:= "[size=" @kind object;
  #L11c90a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c910.  v0:= temp @kind object;
  #L11c912.  v1:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L11c916.  v1:= length @variable v1;
  #L11c918.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c91e.  v0:= temp @kind object;
  #L11c920.  v1:= " text=" @kind object;
  #L11c924.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c92a.  v0:= temp @kind object;
  #L11c92c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c932.  v0:= temp @kind object;
  #L11c934.  v1:= "…]" @kind object;
  #L11c938.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c93e.  v0:= temp @kind object;
  #L11c940.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c946.  v0:= temp @kind object;
  #L11c948.  goto L11c7fc;
  #L11c94c.  v0:= new `java.lang.StringBuilder`;
  #L11c950.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c956.  v1:= "[text=" @kind object;
  #L11c95a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c960.  v0:= temp @kind object;
  #L11c962.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c968.  v0:= temp @kind object;
  #L11c96a.  v1:= "]" @kind object;
  #L11c96e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c974.  v0:= temp @kind object;
  #L11c976.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c97c.  v0:= temp @kind object;
  #L11c97e.  goto L11c7fc;
}
