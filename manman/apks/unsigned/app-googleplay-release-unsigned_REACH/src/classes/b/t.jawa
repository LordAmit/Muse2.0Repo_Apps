record `b.t` @kind class @AccessFlag FINAL {
}
global `java.nio.charset.Charset` `@@b.t.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/t;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L11f030.  v0:= "UTF-8" @kind object;
  #L11f034.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L11f03a.  v0:= temp @kind object;
  #L11f03c.  `@@b.t.a` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L11f040.  return @kind void;
}
procedure `int` `a`(`int` v2 ) @signature `Lb/t;.a:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11f054.  v0:= -16777216I;
  #L11f058.  v0:= v0 ^& v2 @kind int;
  #L11f05a.  v0:= v0 ^>> 24;
  #L11f05e.  v1:= 16711680I;
  #L11f062.  v1:= v1 ^& v2 @kind int;
  #L11f064.  v1:= v1 ^>> 8;
  #L11f068.  v0:= v0 ^| v1 @kind int;
  #L11f06a.  v1:= 65280I;
  #L11f070.  v1:= v1 ^& v2 @kind int;
  #L11f072.  v1:= v1 ^< 8;
  #L11f076.  v0:= v0 ^| v1 @kind int;
  #L11f078.  v1:= v2 ^& 255;
  #L11f07c.  v1:= v1 ^< 24;
  #L11f080.  v0:= v0 ^| v1 @kind int;
  #L11f082.  return v0;
}
procedure `short` `a`(`short` v2 ) @signature `Lb/t;.a:(S)S` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11f094.  v0:= 65535I;
  #L11f09a.  v0:= v0 ^& v2 @kind int;
  #L11f09c.  v1:= 65280I;
  #L11f0a2.  v1:= v1 ^& v0 @kind int;
  #L11f0a4.  v1:= v1 ^>> 8;
  #L11f0a8.  v0:= v0 ^& 255;
  #L11f0ac.  v0:= v0 ^< 8;
  #L11f0b0.  v0:= v0 ^| v1 @kind int;
  #L11f0b2.  v0:= (`short`) v0 @kind i2s;
  #L11f0b4.  return v0;
}
procedure `void` `a`(`long` v6 , `long` v8 , `long` v10 ) @signature `Lb/t;.a:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11f0c8.  v0:= v8 ^| v10 @kind long;
  #L11f0cc.  v2:= 0L;
  #L11f0d0.  v0:= lcmp(v0, v2);
  #L11f0d4.  if v0 < 0 then goto L11f0ec;
  #L11f0d8.  v0:= lcmp(v8, v6);
  #L11f0dc.  if v0 > 0 then goto L11f0ec;
  #L11f0e0.  v0:= v6 - v8 @kind long;
  #L11f0e4.  v0:= lcmp(v0, v10);
  #L11f0e8.  if v0 >= 0 then goto L11f134;
  #L11f0ec.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L11f0f0.  v1:= "size=%s offset=%s byteCount=%s" @kind object;
  #L11f0f4.  v2:= 3I;
  #L11f0f6.  v2:= new `java.lang.Object`[v2];
  #L11f0fa.  v3:= 0I;
  #L11f0fc.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L11f102.  v4:= temp @kind object;
  #L11f104.  v2[v3]:= v4 @kind object;
  #L11f108.  v3:= 1I;
  #L11f10a.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L11f110.  v4:= temp @kind object;
  #L11f112.  v2[v3]:= v4 @kind object;
  #L11f116.  v3:= 2I;
  #L11f118.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L11f11e.  v4:= temp @kind object;
  #L11f120.  v2[v3]:= v4 @kind object;
  #L11f124.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11f12a.  v1:= temp @kind object;
  #L11f12c.  call `<init>`(v0, v1) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11f132.  throw v0;
  #L11f134.  return @kind void;
}
procedure `void` `a`(`java.lang.Throwable` v0 @kind object) @signature `Lb/t;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L11f148.  call `b`(v0) @signature `Lb/t;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L11f14e.  return @kind void;
}
procedure `boolean` `a`(`byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lb/t;.a:([BI[BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11f160.  v0:= 0I;
  #L11f162.  v1:= v0;
  #L11f164.  if v1 >= v8 then goto L11f184;
  #L11f168.  v2:= v1 + v5 @kind int;
  #L11f16c.  v2:= v4[v2] @kind byte;
  #L11f170.  v3:= v1 + v7 @kind int;
  #L11f174.  v3:= v6[v3] @kind byte;
  #L11f178.  if v2 == v3 then goto L11f17e;
  #L11f17c.  return v0;
  #L11f17e.  v1:= v1 + 1;
  #L11f182.  goto L11f164;
  #L11f184.  v0:= 1I;
  #L11f186.  goto L11f17c;
}
procedure `void` `b`(`java.lang.Throwable` v0 @kind object) @signature `Lb/t;.b:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L11f198.  throw v0;
}
