record `b.i` @kind class @AccessFlag PUBLIC_FINAL extends `b.r` @kind interface {
  `int` `b.i.a` @AccessFlag PRIVATE;
  `b.e` `b.i.b` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `b.i.c` @AccessFlag PRIVATE_FINAL;
  `b.j` `b.i.d` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.CRC32` `b.i.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`b.i` v3 @kind this, `b.r` v4 @kind object) @signature `Lb/i;.<init>:(Lb/r;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L11cb04.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11cb0a.  v0:= 0I;
  #L11cb0c.  v3.`b.i.a` @type ^`int` := v0;
  #L11cb10.  v0:= new `java.util.zip.CRC32`;
  #L11cb14.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L11cb1a.  v3.`b.i.e` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L11cb1e.  if v4 != 0 then goto L11cb32;
  #L11cb22.  v0:= new `java.lang.IllegalArgumentException`;
  #L11cb26.  v1:= "source == null" @kind object;
  #L11cb2a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cb30.  throw v0;
  #L11cb32.  v0:= new `java.util.zip.Inflater`;
  #L11cb36.  v1:= 1I;
  #L11cb38.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L11cb3e.  v3.`b.i.c` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L11cb42.  call temp:= `a`(v4) @signature `Lb/k;.a:(Lb/r;)Lb/e;` @kind static;
  #L11cb48.  v0:= temp @kind object;
  #L11cb4a.  v3.`b.i.b` @type ^`b.e` := v0 @kind object;
  #L11cb4e.  v0:= new `b.j`;
  #L11cb52.  v1:= v3.`b.i.b` @type ^`b.e` @kind object;
  #L11cb56.  v2:= v3.`b.i.c` @type ^`java.util.zip.Inflater` @kind object;
  #L11cb5a.  call `<init>`(v0, v1, v2) @signature `Lb/j;.<init>:(Lb/e;Ljava/util/zip/Inflater;)V` @kind direct;
  #L11cb60.  v3.`b.i.d` @type ^`b.j` := v0 @kind object;
  #L11cb64.  return @kind void;
}
procedure `void` `a`(`b.i` v8 @kind this, `b.c` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lb/i;.a:(Lb/c;JJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11cb78.  v2:= 0L;
  #L11cb7c.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11cb80.  v1:= v0.`b.n.c` @type ^`int`;
  #L11cb84.  v4:= v0.`b.n.b` @type ^`int`;
  #L11cb88.  v1:= v1 - v4 @kind int;
  #L11cb8a.  v4:= (`long`) v1 @kind i2l;
  #L11cb8c.  v1:= lcmp(v10, v4);
  #L11cb90.  if v1 < 0 then goto L11cba8;
  #L11cb94.  v1:= v0.`b.n.c` @type ^`int`;
  #L11cb98.  v4:= v0.`b.n.b` @type ^`int`;
  #L11cb9c.  v1:= v1 - v4 @kind int;
  #L11cb9e.  v4:= (`long`) v1 @kind i2l;
  #L11cba0.  v10:= v10 - v4 @kind long;
  #L11cba2.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11cba6.  goto L11cb80;
  #L11cba8.  v1:= lcmp(v12, v2);
  #L11cbac.  if v1 <= 0 then goto L11cbe6;
  #L11cbb0.  v1:= v0.`b.n.b` @type ^`int`;
  #L11cbb4.  v4:= (`long`) v1 @kind i2l;
  #L11cbb6.  v4:= v4 + v10 @kind long;
  #L11cbb8.  v1:= (`int`) v4 @kind l2i;
  #L11cbba.  v4:= v0.`b.n.c` @type ^`int`;
  #L11cbbe.  v4:= v4 - v1 @kind int;
  #L11cbc0.  v4:= (`long`) v4 @kind i2l;
  #L11cbc2.  call temp:= `min`(v4, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11cbc8.  v4:= temp @kind wide;
  #L11cbca.  v4:= (`int`) v4 @kind l2i;
  #L11cbcc.  v5:= v8.`b.i.e` @type ^`java.util.zip.CRC32` @kind object;
  #L11cbd0.  v6:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11cbd4.  call `update`(v5, v6, v1, v4) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L11cbda.  v4:= (`long`) v4 @kind i2l;
  #L11cbdc.  v12:= v12 - v4 @kind long;
  #L11cbde.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11cbe2.  v10:= v2 @kind wide;
  #L11cbe4.  goto L11cba8;
  #L11cbe6.  return @kind void;
}
procedure `void` `a`(`b.i` v5 @kind this, `java.lang.String` v6 @kind object, `int` v7 , `int` v8 ) @signature `Lb/i;.a:(Ljava/lang/String;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11cbf8.  if v8 == v7 then goto L11cc3c;
  #L11cbfc.  v0:= new `java.io.IOException`;
  #L11cc00.  v1:= "%s: actual 0x%08x != expected 0x%08x" @kind object;
  #L11cc04.  v2:= 3I;
  #L11cc06.  v2:= new `java.lang.Object`[v2];
  #L11cc0a.  v3:= 0I;
  #L11cc0c.  v2[v3]:= v6 @kind object;
  #L11cc10.  v3:= 1I;
  #L11cc12.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11cc18.  v4:= temp @kind object;
  #L11cc1a.  v2[v3]:= v4 @kind object;
  #L11cc1e.  v3:= 2I;
  #L11cc20.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11cc26.  v4:= temp @kind object;
  #L11cc28.  v2[v3]:= v4 @kind object;
  #L11cc2c.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11cc32.  v1:= temp @kind object;
  #L11cc34.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cc3a.  throw v0;
  #L11cc3c.  return @kind void;
}
procedure `void` `b`(`b.i` v10 @kind this) @signature `Lb/i;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11cc50.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11cc54.  v2:= 10L;
  #L11cc58.  call `a`(v0, v2) @signature `Lb/e;.a:(J)V` @kind interface;
  #L11cc5e.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11cc62.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11cc68.  v0:= temp @kind object;
  #L11cc6a.  v2:= 3L;
  #L11cc6e.  call temp:= `b`(v0, v2) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L11cc74.  v7:= temp;
  #L11cc76.  v0:= v7 ^> 1;
  #L11cc7a.  v0:= v0 ^& 1;
  #L11cc7e.  v1:= 1I;
  #L11cc80.  if v0 != v1 then goto L11cd8a;
  #L11cc84.  v0:= 1I;
  #L11cc86.  v6:= v0;
  #L11cc88.  if v6 == 0 then goto L11cca8;
  #L11cc8c.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11cc90.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11cc96.  v1:= temp @kind object;
  #L11cc98.  v2:= 0L;
  #L11cc9c.  v4:= 10L;
  #L11cca0.  v0:= v10 @kind object;
  #L11cca2.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11cca8.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11ccac.  call temp:= `i`(v0) @signature `Lb/e;.i:()S` @kind interface;
  #L11ccb2.  v0:= temp;
  #L11ccb4.  v1:= "ID1ID2" @kind object;
  #L11ccb8.  v2:= 8075I;
  #L11ccbc.  call `a`(v10, v1, v2, v0) @signature `Lb/i;.a:(Ljava/lang/String;II)V` @kind direct;
  #L11ccc2.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11ccc6.  v2:= 8L;
  #L11ccca.  call `g`(v0, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L11ccd0.  v0:= v7 ^> 2;
  #L11ccd4.  v0:= v0 ^& 1;
  #L11ccd8.  v1:= 1I;
  #L11ccda.  if v0 != v1 then goto L11cd56;
  #L11ccde.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11cce2.  v2:= 2L;
  #L11cce6.  call `a`(v0, v2) @signature `Lb/e;.a:(J)V` @kind interface;
  #L11ccec.  if v6 == 0 then goto L11cd0c;
  #L11ccf0.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11ccf4.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11ccfa.  v1:= temp @kind object;
  #L11ccfc.  v2:= 0L;
  #L11cd00.  v4:= 2L;
  #L11cd04.  v0:= v10 @kind object;
  #L11cd06.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11cd0c.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11cd10.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11cd16.  v0:= temp @kind object;
  #L11cd18.  call temp:= `k`(v0) @signature `Lb/c;.k:()S` @kind virtual;
  #L11cd1e.  v8:= temp;
  #L11cd20.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11cd24.  v2:= (`long`) v8 @kind i2l;
  #L11cd26.  call `a`(v0, v2) @signature `Lb/e;.a:(J)V` @kind interface;
  #L11cd2c.  if v6 == 0 then goto L11cd4a;
  #L11cd30.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11cd34.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11cd3a.  v1:= temp @kind object;
  #L11cd3c.  v2:= 0L;
  #L11cd40.  v4:= (`long`) v8 @kind i2l;
  #L11cd42.  v0:= v10 @kind object;
  #L11cd44.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11cd4a.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11cd4e.  v2:= (`long`) v8 @kind i2l;
  #L11cd50.  call `g`(v0, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L11cd56.  v0:= v7 ^> 3;
  #L11cd5a.  v0:= v0 ^& 1;
  #L11cd5e.  v1:= 1I;
  #L11cd60.  if v0 != v1 then goto L11cdc4;
  #L11cd64.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11cd68.  v1:= 0I;
  #L11cd6a.  call temp:= `a`(v0, v1) @signature `Lb/e;.a:(B)J` @kind interface;
  #L11cd70.  v8:= temp @kind wide;
  #L11cd72.  v0:= -1L;
  #L11cd76.  v0:= lcmp(v8, v0);
  #L11cd7a.  if v0 != 0 then goto L11cd92;
  #L11cd7e.  v0:= new `java.io.EOFException`;
  #L11cd82.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11cd88.  throw v0;
  #L11cd8a.  v0:= 0I;
  #L11cd8c.  v6:= v0;
  #L11cd8e.  goto L11cc88;
  #L11cd92.  if v6 == 0 then goto L11cdb4;
  #L11cd96.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11cd9a.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11cda0.  v1:= temp @kind object;
  #L11cda2.  v2:= 0L;
  #L11cda6.  v4:= 1L;
  #L11cdaa.  v4:= v4 + v8 @kind long;
  #L11cdac.  v0:= v10 @kind object;
  #L11cdae.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11cdb4.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11cdb8.  v2:= 1L;
  #L11cdbc.  v2:= v2 + v8 @kind long;
  #L11cdbe.  call `g`(v0, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L11cdc4.  v0:= v7 ^> 4;
  #L11cdc8.  v0:= v0 ^& 1;
  #L11cdcc.  v1:= 1I;
  #L11cdce.  if v0 != v1 then goto L11ce2a;
  #L11cdd2.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11cdd6.  v1:= 0I;
  #L11cdd8.  call temp:= `a`(v0, v1) @signature `Lb/e;.a:(B)J` @kind interface;
  #L11cdde.  v8:= temp @kind wide;
  #L11cde0.  v0:= -1L;
  #L11cde4.  v0:= lcmp(v8, v0);
  #L11cde8.  if v0 != 0 then goto L11cdf8;
  #L11cdec.  v0:= new `java.io.EOFException`;
  #L11cdf0.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11cdf6.  throw v0;
  #L11cdf8.  if v6 == 0 then goto L11ce1a;
  #L11cdfc.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11ce00.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11ce06.  v1:= temp @kind object;
  #L11ce08.  v2:= 0L;
  #L11ce0c.  v4:= 1L;
  #L11ce10.  v4:= v4 + v8 @kind long;
  #L11ce12.  v0:= v10 @kind object;
  #L11ce14.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11ce1a.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11ce1e.  v2:= 1L;
  #L11ce22.  v2:= v2 + v8 @kind long;
  #L11ce24.  call `g`(v0, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L11ce2a.  if v6 == 0 then goto L11ce5e;
  #L11ce2e.  v0:= "FHCRC" @kind object;
  #L11ce32.  v1:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11ce36.  call temp:= `k`(v1) @signature `Lb/e;.k:()S` @kind interface;
  #L11ce3c.  v1:= temp;
  #L11ce3e.  v2:= v10.`b.i.e` @type ^`java.util.zip.CRC32` @kind object;
  #L11ce42.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L11ce48.  v2:= temp @kind wide;
  #L11ce4a.  v2:= (`int`) v2 @kind l2i;
  #L11ce4c.  v2:= (`short`) v2 @kind i2s;
  #L11ce4e.  call `a`(v10, v0, v1, v2) @signature `Lb/i;.a:(Ljava/lang/String;II)V` @kind direct;
  #L11ce54.  v0:= v10.`b.i.e` @type ^`java.util.zip.CRC32` @kind object;
  #L11ce58.  call `reset`(v0) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L11ce5e.  return @kind void;
}
procedure `void` `c`(`b.i` v4 @kind this) @signature `Lb/i;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11ce70.  v0:= "CRC" @kind object;
  #L11ce74.  v1:= v4.`b.i.b` @type ^`b.e` @kind object;
  #L11ce78.  call temp:= `l`(v1) @signature `Lb/e;.l:()I` @kind interface;
  #L11ce7e.  v1:= temp;
  #L11ce80.  v2:= v4.`b.i.e` @type ^`java.util.zip.CRC32` @kind object;
  #L11ce84.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L11ce8a.  v2:= temp @kind wide;
  #L11ce8c.  v2:= (`int`) v2 @kind l2i;
  #L11ce8e.  call `a`(v4, v0, v1, v2) @signature `Lb/i;.a:(Ljava/lang/String;II)V` @kind direct;
  #L11ce94.  v0:= "ISIZE" @kind object;
  #L11ce98.  v1:= v4.`b.i.b` @type ^`b.e` @kind object;
  #L11ce9c.  call temp:= `l`(v1) @signature `Lb/e;.l:()I` @kind interface;
  #L11cea2.  v1:= temp;
  #L11cea4.  v2:= v4.`b.i.c` @type ^`java.util.zip.Inflater` @kind object;
  #L11cea8.  call temp:= `getBytesWritten`(v2) @signature `Ljava/util/zip/Inflater;.getBytesWritten:()J` @kind virtual;
  #L11ceae.  v2:= temp @kind wide;
  #L11ceb0.  v2:= (`int`) v2 @kind l2i;
  #L11ceb2.  call `a`(v4, v0, v1, v2) @signature `Lb/i;.a:(Ljava/lang/String;II)V` @kind direct;
  #L11ceb8.  return @kind void;
}
procedure `long` `a`(`b.i` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `Lb/i;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11cecc.  v0:= -1L;
  #L11ced0.  v7:= 2I;
  #L11ced2.  v3:= 1I;
  #L11ced4.  v4:= 0L;
  #L11ced8.  v2:= lcmp(v10, v4);
  #L11cedc.  if v2 >= 0 then goto L11cf12;
  #L11cee0.  v0:= new `java.lang.IllegalArgumentException`;
  #L11cee4.  v1:= new `java.lang.StringBuilder`;
  #L11cee8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11ceee.  v2:= "byteCount < 0: " @kind object;
  #L11cef2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11cef8.  v1:= temp @kind object;
  #L11cefa.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11cf00.  v1:= temp @kind object;
  #L11cf02.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11cf08.  v1:= temp @kind object;
  #L11cf0a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cf10.  throw v0;
  #L11cf12.  v2:= lcmp(v10, v4);
  #L11cf16.  if v2 != 0 then goto L11cf1c;
  #L11cf1a.  return v4 @kind wide;
  #L11cf1c.  v2:= v8.`b.i.a` @type ^`int`;
  #L11cf20.  if v2 != 0 then goto L11cf2e;
  #L11cf24.  call `b`(v8) @signature `Lb/i;.b:()V` @kind direct;
  #L11cf2a.  v8.`b.i.a` @type ^`int` := v3;
  #L11cf2e.  v2:= v8.`b.i.a` @type ^`int`;
  #L11cf32.  if v2 != v3 then goto L11cf5e;
  #L11cf36.  v2:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11cf3a.  v4:= v8.`b.i.d` @type ^`b.j` @kind object;
  #L11cf3e.  call temp:= `a`(v4, v9, v10) @signature `Lb/j;.a:(Lb/c;J)J` @kind virtual;
  #L11cf44.  v4:= temp @kind wide;
  #L11cf46.  v6:= lcmp(v4, v0);
  #L11cf4a.  if v6 == 0 then goto L11cf5a;
  #L11cf4e.  v0:= v8 @kind object;
  #L11cf50.  v1:= v9 @kind object;
  #L11cf52.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11cf58.  goto L11cf1a;
  #L11cf5a.  v8.`b.i.a` @type ^`int` := v7;
  #L11cf5e.  v2:= v8.`b.i.a` @type ^`int`;
  #L11cf62.  if v2 != v7 then goto L11cf92;
  #L11cf66.  call `c`(v8) @signature `Lb/i;.c:()V` @kind direct;
  #L11cf6c.  v2:= 3I;
  #L11cf6e.  v8.`b.i.a` @type ^`int` := v2;
  #L11cf72.  v2:= v8.`b.i.b` @type ^`b.e` @kind object;
  #L11cf76.  call temp:= `e`(v2) @signature `Lb/e;.e:()Z` @kind interface;
  #L11cf7c.  v2:= temp;
  #L11cf7e.  if v2 != 0 then goto L11cf92;
  #L11cf82.  v0:= new `java.io.IOException`;
  #L11cf86.  v1:= "gzip finished without exhausting source" @kind object;
  #L11cf8a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cf90.  throw v0;
  #L11cf92.  v4:= v0 @kind wide;
  #L11cf94.  goto L11cf1a;
}
procedure `b.s` `a`(`b.i` v1 @kind this) @signature `Lb/i;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11cfa8.  v0:= v1.`b.i.b` @type ^`b.e` @kind object;
  #L11cfac.  call temp:= `a`(v0) @signature `Lb/e;.a:()Lb/s;` @kind interface;
  #L11cfb2.  v0:= temp @kind object;
  #L11cfb4.  return v0 @kind object;
}
procedure `void` `close`(`b.i` v1 @kind this) @signature `Lb/i;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11cfc8.  v0:= v1.`b.i.d` @type ^`b.j` @kind object;
  #L11cfcc.  call `close`(v0) @signature `Lb/j;.close:()V` @kind virtual;
  #L11cfd2.  return @kind void;
}
