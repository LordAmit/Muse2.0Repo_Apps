record `b.s` @kind class @AccessFlag PUBLIC {
  `boolean` `b.s.a` @AccessFlag PRIVATE;
  `long` `b.s.c` @AccessFlag PRIVATE;
  `long` `b.s.d` @AccessFlag PRIVATE;
}
global `b.s` `@@b.s.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/s;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L080a10.  v0:= new `b.s$1`;
  #L080a14.  call `<init>`(v0) @signature `Lb/s$1;.<init>:()V` @kind direct;
  #L080a1a.  `@@b.s.b` @type ^`b.s` := v0 @kind object;
  #L080a1e.  return @kind void;
}
procedure `void` `<init>`(`b.s` v0 @kind this) @signature `Lb/s;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L080a30.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L080a36.  return @kind void;
}
procedure `b.s` `a`(`b.s` v1 @kind this, `long` v2 ) @signature `Lb/s;.a:(J)Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L080a48.  v0:= 1I;
  #L080a4a.  v1.`b.s.a` @type ^`boolean` := v0 @kind boolean;
  #L080a4e.  v1.`b.s.c` @type ^`long` := v2 @kind wide;
  #L080a52.  return v1 @kind object;
}
procedure `b.s` `a`(`b.s` v3 @kind this, `long` v4 , `java.util.concurrent.TimeUnit` v6 @kind object) @signature `Lb/s;.a:(JLjava/util/concurrent/TimeUnit;)Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L080a64.  v0:= 0L;
  #L080a68.  v0:= lcmp(v4, v0);
  #L080a6c.  if v0 >= 0 then goto L080aa2;
  #L080a70.  v0:= new `java.lang.IllegalArgumentException`;
  #L080a74.  v1:= new `java.lang.StringBuilder`;
  #L080a78.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L080a7e.  v2:= "timeout < 0: " @kind object;
  #L080a82.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L080a88.  v1:= temp @kind object;
  #L080a8a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L080a90.  v1:= temp @kind object;
  #L080a92.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L080a98.  v1:= temp @kind object;
  #L080a9a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080aa0.  throw v0;
  #L080aa2.  if v6 != 0 then goto L080ab6;
  #L080aa6.  v0:= new `java.lang.IllegalArgumentException`;
  #L080aaa.  v1:= "unit == null" @kind object;
  #L080aae.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080ab4.  throw v0;
  #L080ab6.  call temp:= `toNanos`(v6, v4) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L080abc.  v0:= temp @kind wide;
  #L080abe.  v3.`b.s.d` @type ^`long` := v0 @kind wide;
  #L080ac2.  return v3 @kind object;
}
procedure `long` `b_`(`b.s` v2 @kind this) @signature `Lb/s;.b_:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L080ad4.  v0:= v2.`b.s.d` @type ^`long` @kind wide;
  #L080ad8.  return v0 @kind wide;
}
procedure `boolean` `c_`(`b.s` v1 @kind this) @signature `Lb/s;.c_:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L080aec.  v0:= v1.`b.s.a` @type ^`boolean` @kind boolean;
  #L080af0.  return v0;
}
procedure `long` `d`(`b.s` v2 @kind this) @signature `Lb/s;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L080b04.  v0:= v2.`b.s.a` @type ^`boolean` @kind boolean;
  #L080b08.  if v0 != 0 then goto L080b1c;
  #L080b0c.  v0:= new `java.lang.IllegalStateException`;
  #L080b10.  v1:= "No deadline" @kind object;
  #L080b14.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080b1a.  throw v0;
  #L080b1c.  v0:= v2.`b.s.c` @type ^`long` @kind wide;
  #L080b20.  return v0 @kind wide;
}
procedure `b.s` `d_`(`b.s` v2 @kind this) @signature `Lb/s;.d_:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L080b34.  v0:= 0L;
  #L080b38.  v2.`b.s.d` @type ^`long` := v0 @kind wide;
  #L080b3c.  return v2 @kind object;
}
procedure `b.s` `e_`(`b.s` v1 @kind this) @signature `Lb/s;.e_:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L080b50.  v0:= 0I;
  #L080b52.  v1.`b.s.a` @type ^`boolean` := v0 @kind boolean;
  #L080b56.  return v1 @kind object;
}
procedure `void` `g`(`b.s` v4 @kind this) @signature `Lb/s;.g:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L080b68.  call temp:= `interrupted`() @signature `Ljava/lang/Thread;.interrupted:()Z` @kind static;
  #L080b6e.  v0:= temp;
  #L080b70.  if v0 == 0 then goto L080b84;
  #L080b74.  v0:= new `java.io.InterruptedIOException`;
  #L080b78.  v1:= "thread interrupted" @kind object;
  #L080b7c.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080b82.  throw v0;
  #L080b84.  v0:= v4.`b.s.a` @type ^`boolean` @kind boolean;
  #L080b88.  if v0 == 0 then goto L080bb6;
  #L080b8c.  v0:= v4.`b.s.c` @type ^`long` @kind wide;
  #L080b90.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L080b96.  v2:= temp @kind wide;
  #L080b98.  v0:= v0 - v2 @kind long;
  #L080b9a.  v2:= 0L;
  #L080b9e.  v0:= lcmp(v0, v2);
  #L080ba2.  if v0 > 0 then goto L080bb6;
  #L080ba6.  v0:= new `java.io.InterruptedIOException`;
  #L080baa.  v1:= "deadline reached" @kind object;
  #L080bae.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080bb4.  throw v0;
  #L080bb6.  return @kind void;
}
