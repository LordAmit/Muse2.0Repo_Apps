record `b.c` @kind class @AccessFlag PUBLIC_FINAL extends `b.d` @kind interface, `b.e` @kind interface, `java.lang.Cloneable` @kind interface {
  `b.n` `b.c.a` @AccessFlag ;
  `long` `b.c.b` @AccessFlag ;
}
global `byte`[] `@@b.c.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L11a314.  v0:= 16I;
  #L11a318.  v0:= new `byte`[v0];
  #L11a31c.  goto L11a328;
  #L11a322.  `@@b.c.c` @type ^`byte`[] := v0 @kind object;
  #L11a326.  return @kind void;
  #L11a328.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L11a33f.  goto L11a322;
}
procedure `void` `<init>`(`b.c` v0 @kind this) @signature `Lb/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L11a350.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11a356.  return @kind void;
}
procedure `int` `a`(`b.c` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lb/c;.a:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11a368.  v0:= length @variable v7;
  #L11a36a.  v0:= (`long`) v0 @kind i2l;
  #L11a36c.  v2:= (`long`) v8 @kind i2l;
  #L11a36e.  v4:= (`long`) v9 @kind i2l;
  #L11a370.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11a376.  v1:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L11a37a.  if v1 != 0 then goto L11a382;
  #L11a37e.  v0:= -1I;
  #L11a380.  return v0;
  #L11a382.  v0:= v1.`b.n.c` @type ^`int`;
  #L11a386.  v2:= v1.`b.n.b` @type ^`int`;
  #L11a38a.  v0:= v0 - v2 @kind int;
  #L11a38c.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11a392.  v0:= temp;
  #L11a394.  v2:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11a398.  v3:= v1.`b.n.b` @type ^`int`;
  #L11a39c.  call `arraycopy`(v2, v3, v7, v8, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11a3a2.  v2:= v1.`b.n.b` @type ^`int`;
  #L11a3a6.  v2:= v2 + v0 @kind int;
  #L11a3a8.  v1.`b.n.b` @type ^`int` := v2;
  #L11a3ac.  v2:= v6.`b.c.b` @type ^`long` @kind wide;
  #L11a3b0.  v4:= (`long`) v0 @kind i2l;
  #L11a3b2.  v2:= v2 - v4 @kind long;
  #L11a3b4.  v6.`b.c.b` @type ^`long` := v2 @kind wide;
  #L11a3b8.  v2:= v1.`b.n.b` @type ^`int`;
  #L11a3bc.  v3:= v1.`b.n.c` @type ^`int`;
  #L11a3c0.  if v2 != v3 then goto L11a380;
  #L11a3c4.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11a3ca.  v2:= temp @kind object;
  #L11a3cc.  v6.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L11a3d0.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11a3d6.  goto L11a380;
}
procedure `long` `a`(`b.c` v2 @kind this, `byte` v3 ) @signature `Lb/c;.a:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11a3e8.  v0:= 0L;
  #L11a3ec.  call temp:= `a`(v2, v3, v0) @signature `Lb/c;.a:(BJ)J` @kind virtual;
  #L11a3f2.  v0:= temp @kind wide;
  #L11a3f4.  return v0 @kind wide;
}
procedure `long` `a`(`b.c` v10 @kind this, `byte` v11 , `long` v12 ) @signature `Lb/c;.a:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11a408.  v0:= 0L;
  #L11a40c.  v6:= -1L;
  #L11a410.  v2:= lcmp(v12, v0);
  #L11a414.  if v2 >= 0 then goto L11a428;
  #L11a418.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a41c.  v1:= "fromIndex < 0" @kind object;
  #L11a420.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a426.  throw v0;
  #L11a428.  v2:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L11a42c.  if v2 != 0 then goto L11a434;
  #L11a430.  v0:= v6 @kind wide;
  #L11a432.  return v0 @kind wide;
  #L11a434.  v4:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11a438.  v4:= v4 - v12 @kind long;
  #L11a43a.  v3:= lcmp(v4, v12);
  #L11a43e.  if v3 >= 0 then goto L11a464;
  #L11a442.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11a446.  v4:= v2 @kind object;
  #L11a448.  v2:= lcmp(v0, v12);
  #L11a44c.  if v2 <= 0 then goto L11a49a;
  #L11a450.  v4:= v4.`b.n.g` @type ^`b.n` @kind object;
  #L11a454.  v2:= v4.`b.n.c` @type ^`int`;
  #L11a458.  v3:= v4.`b.n.b` @type ^`int`;
  #L11a45c.  v2:= v2 - v3 @kind int;
  #L11a45e.  v2:= (`long`) v2 @kind i2l;
  #L11a460.  v0:= v0 - v2 @kind long;
  #L11a462.  goto L11a448;
  #L11a464.  v4:= v2 @kind object;
  #L11a466.  v2:= v4.`b.n.c` @type ^`int`;
  #L11a46a.  v3:= v4.`b.n.b` @type ^`int`;
  #L11a46e.  v2:= v2 - v3 @kind int;
  #L11a470.  v2:= (`long`) v2 @kind i2l;
  #L11a472.  v2:= v2 + v0 @kind long;
  #L11a474.  v5:= lcmp(v2, v12);
  #L11a478.  if v5 >= 0 then goto L11a49a;
  #L11a47c.  v0:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11a480.  v4:= v0 @kind object;
  #L11a482.  v0:= v2 @kind wide;
  #L11a484.  goto L11a466;
  #L11a486.  v2:= v4.`b.n.c` @type ^`int`;
  #L11a48a.  v3:= v4.`b.n.b` @type ^`int`;
  #L11a48e.  v2:= v2 - v3 @kind int;
  #L11a490.  v2:= (`long`) v2 @kind i2l;
  #L11a492.  v0:= v0 + v2 @kind long;
  #L11a494.  v4:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11a498.  v12:= v0 @kind wide;
  #L11a49a.  v2:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11a49e.  v2:= lcmp(v0, v2);
  #L11a4a2.  if v2 >= 0 then goto L11a4d8;
  #L11a4a6.  v3:= v4.`b.n.a` @type ^`byte`[] @kind object;
  #L11a4aa.  v2:= v4.`b.n.b` @type ^`int`;
  #L11a4ae.  v8:= (`long`) v2 @kind i2l;
  #L11a4b0.  v8:= v8 + v12 @kind long;
  #L11a4b2.  v8:= v8 - v0 @kind long;
  #L11a4b4.  v2:= (`int`) v8 @kind l2i;
  #L11a4b6.  v5:= v4.`b.n.c` @type ^`int`;
  #L11a4ba.  if v2 >= v5 then goto L11a486;
  #L11a4be.  v8:= v3[v2] @kind byte;
  #L11a4c2.  if v8 != v11 then goto L11a4d2;
  #L11a4c6.  v3:= v4.`b.n.b` @type ^`int`;
  #L11a4ca.  v2:= v2 - v3 @kind int;
  #L11a4cc.  v2:= (`long`) v2 @kind i2l;
  #L11a4ce.  v0:= v0 + v2 @kind long;
  #L11a4d0.  goto L11a432;
  #L11a4d2.  v2:= v2 + 1;
  #L11a4d6.  goto L11a4ba;
  #L11a4d8.  v0:= v6 @kind wide;
  #L11a4da.  goto L11a432;
}
procedure `long` `a`(`b.c` v4 @kind this, `b.c` v5 @kind object, `long` v6 ) @signature `Lb/c;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11a4ec.  v2:= 0L;
  #L11a4f0.  if v5 != 0 then goto L11a504;
  #L11a4f4.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a4f8.  v1:= "sink == null" @kind object;
  #L11a4fc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a502.  throw v0;
  #L11a504.  v0:= lcmp(v6, v2);
  #L11a508.  if v0 >= 0 then goto L11a53e;
  #L11a50c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a510.  v1:= new `java.lang.StringBuilder`;
  #L11a514.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11a51a.  v2:= "byteCount < 0: " @kind object;
  #L11a51e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a524.  v1:= temp @kind object;
  #L11a526.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a52c.  v1:= temp @kind object;
  #L11a52e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11a534.  v1:= temp @kind object;
  #L11a536.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a53c.  throw v0;
  #L11a53e.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11a542.  v0:= lcmp(v0, v2);
  #L11a546.  if v0 != 0 then goto L11a550;
  #L11a54a.  v6:= -1L;
  #L11a54e.  return v6 @kind wide;
  #L11a550.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11a554.  v0:= lcmp(v6, v0);
  #L11a558.  if v0 <= 0 then goto L11a560;
  #L11a55c.  v6:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11a560.  call `a_`(v5, v4, v6) @signature `Lb/c;.a_:(Lb/c;J)V` @kind virtual;
  #L11a566.  goto L11a54e;
}
procedure `long` `a`(`b.c` v6 @kind this, `b.r` v7 @kind object) @signature `Lb/c;.a:(Lb/r;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11a578.  if v7 != 0 then goto L11a58c;
  #L11a57c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a580.  v1:= "source == null" @kind object;
  #L11a584.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a58a.  throw v0;
  #L11a58c.  v0:= 0L;
  #L11a590.  v2:= 8192L;
  #L11a594.  call temp:= `a`(v7, v6, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11a59a.  v2:= temp @kind wide;
  #L11a59c.  v4:= -1L;
  #L11a5a0.  v4:= lcmp(v2, v4);
  #L11a5a4.  if v4 == 0 then goto L11a5ac;
  #L11a5a8.  v0:= v0 + v2 @kind long;
  #L11a5aa.  goto L11a590;
  #L11a5ac.  return v0 @kind wide;
}
procedure `b.c` `a`(`b.c` v3 @kind this, `int` v4 ) @signature `Lb/c;.a:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11a5c0.  v0:= 128I;
  #L11a5c4.  if v4 >= v0 then goto L11a5d0;
  #L11a5c8.  call temp:= `b`(v3, v4) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a5ce.  return v3 @kind object;
  #L11a5d0.  v0:= 2048I;
  #L11a5d4.  if v4 >= v0 then goto L11a5f6;
  #L11a5d8.  v0:= v4 ^> 6;
  #L11a5dc.  v0:= v0 ^| 192;
  #L11a5e0.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a5e6.  v0:= v4 ^& 63;
  #L11a5ea.  v0:= v0 ^| 128;
  #L11a5ee.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a5f4.  goto L11a5ce;
  #L11a5f6.  v0:= 65536I;
  #L11a5fa.  if v4 >= v0 then goto L11a67c;
  #L11a5fe.  v0:= 55296I;
  #L11a604.  if v4 < v0 then goto L11a64c;
  #L11a608.  v0:= 57343I;
  #L11a60e.  if v4 > v0 then goto L11a64c;
  #L11a612.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a616.  v1:= new `java.lang.StringBuilder`;
  #L11a61a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11a620.  v2:= "Unexpected code point: " @kind object;
  #L11a624.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a62a.  v1:= temp @kind object;
  #L11a62c.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L11a632.  v2:= temp @kind object;
  #L11a634.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a63a.  v1:= temp @kind object;
  #L11a63c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11a642.  v1:= temp @kind object;
  #L11a644.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a64a.  throw v0;
  #L11a64c.  v0:= v4 ^> 12;
  #L11a650.  v0:= v0 ^| 224;
  #L11a654.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a65a.  v0:= v4 ^> 6;
  #L11a65e.  v0:= v0 ^& 63;
  #L11a662.  v0:= v0 ^| 128;
  #L11a666.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a66c.  v0:= v4 ^& 63;
  #L11a670.  v0:= v0 ^| 128;
  #L11a674.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a67a.  goto L11a5ce;
  #L11a67c.  v0:= 1114111I;
  #L11a682.  if v4 > v0 then goto L11a6c8;
  #L11a686.  v0:= v4 ^> 18;
  #L11a68a.  v0:= v0 ^| 240;
  #L11a68e.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a694.  v0:= v4 ^> 12;
  #L11a698.  v0:= v0 ^& 63;
  #L11a69c.  v0:= v0 ^| 128;
  #L11a6a0.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a6a6.  v0:= v4 ^> 6;
  #L11a6aa.  v0:= v0 ^& 63;
  #L11a6ae.  v0:= v0 ^| 128;
  #L11a6b2.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a6b8.  v0:= v4 ^& 63;
  #L11a6bc.  v0:= v0 ^| 128;
  #L11a6c0.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a6c6.  goto L11a5ce;
  #L11a6c8.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a6cc.  v1:= new `java.lang.StringBuilder`;
  #L11a6d0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11a6d6.  v2:= "Unexpected code point: " @kind object;
  #L11a6da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a6e0.  v1:= temp @kind object;
  #L11a6e2.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L11a6e8.  v2:= temp @kind object;
  #L11a6ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a6f0.  v1:= temp @kind object;
  #L11a6f2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11a6f8.  v1:= temp @kind object;
  #L11a6fa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a700.  throw v0;
}
procedure `b.c` `a`(`b.c` v8 @kind this, `b.c` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lb/c;.a:(Lb/c;JJ)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11a714.  v6:= 0L;
  #L11a718.  if v9 != 0 then goto L11a72c;
  #L11a71c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a720.  v1:= "out == null" @kind object;
  #L11a724.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a72a.  throw v0;
  #L11a72c.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L11a730.  v2:= v10 @kind wide;
  #L11a732.  v4:= v12 @kind wide;
  #L11a734.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11a73a.  v0:= lcmp(v12, v6);
  #L11a73e.  if v0 != 0 then goto L11a744;
  #L11a742.  return v8 @kind object;
  #L11a744.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11a748.  v0:= v0 + v12 @kind long;
  #L11a74a.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11a74e.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11a752.  v1:= v0.`b.n.c` @type ^`int`;
  #L11a756.  v2:= v0.`b.n.b` @type ^`int`;
  #L11a75a.  v1:= v1 - v2 @kind int;
  #L11a75c.  v2:= (`long`) v1 @kind i2l;
  #L11a75e.  v1:= lcmp(v10, v2);
  #L11a762.  if v1 < 0 then goto L11a77a;
  #L11a766.  v1:= v0.`b.n.c` @type ^`int`;
  #L11a76a.  v2:= v0.`b.n.b` @type ^`int`;
  #L11a76e.  v1:= v1 - v2 @kind int;
  #L11a770.  v2:= (`long`) v1 @kind i2l;
  #L11a772.  v10:= v10 - v2 @kind long;
  #L11a774.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11a778.  goto L11a752;
  #L11a77a.  v1:= lcmp(v12, v6);
  #L11a77e.  if v1 <= 0 then goto L11a742;
  #L11a782.  v1:= new `b.n`;
  #L11a786.  call `<init>`(v1, v0) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L11a78c.  v2:= v1.`b.n.b` @type ^`int`;
  #L11a790.  v2:= (`long`) v2 @kind i2l;
  #L11a792.  v2:= v2 + v10 @kind long;
  #L11a794.  v2:= (`int`) v2 @kind l2i;
  #L11a796.  v1.`b.n.b` @type ^`int` := v2;
  #L11a79a.  v2:= v1.`b.n.b` @type ^`int`;
  #L11a79e.  v3:= (`int`) v12 @kind l2i;
  #L11a7a0.  v2:= v2 + v3 @kind int;
  #L11a7a2.  v3:= v1.`b.n.c` @type ^`int`;
  #L11a7a6.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11a7ac.  v2:= temp;
  #L11a7ae.  v1.`b.n.c` @type ^`int` := v2;
  #L11a7b2.  v2:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11a7b6.  if v2 != 0 then goto L11a7de;
  #L11a7ba.  v1.`b.n.g` @type ^`b.n` := v1 @kind object;
  #L11a7be.  v1.`b.n.f` @type ^`b.n` := v1 @kind object;
  #L11a7c2.  v9.`b.c.a` @type ^`b.n` := v1 @kind object;
  #L11a7c6.  v2:= v1.`b.n.c` @type ^`int`;
  #L11a7ca.  v1:= v1.`b.n.b` @type ^`int`;
  #L11a7ce.  v1:= v2 - v1 @kind int;
  #L11a7d2.  v2:= (`long`) v1 @kind i2l;
  #L11a7d4.  v12:= v12 - v2 @kind long;
  #L11a7d6.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11a7da.  v10:= v6 @kind wide;
  #L11a7dc.  goto L11a77a;
  #L11a7de.  v2:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11a7e2.  v2:= v2.`b.n.g` @type ^`b.n` @kind object;
  #L11a7e6.  call temp:= `a`(v2, v1) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11a7ec.  goto L11a7c6;
}
procedure `b.c` `a`(`b.c` v2 @kind this, `b.f` v3 @kind object) @signature `Lb/c;.a:(Lb/f;)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11a800.  if v3 != 0 then goto L11a814;
  #L11a804.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a808.  v1:= "byteString == null" @kind object;
  #L11a80c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a812.  throw v0;
  #L11a814.  call `a`(v3, v2) @signature `Lb/f;.a:(Lb/c;)V` @kind virtual;
  #L11a81a.  return v2 @kind object;
}
procedure `b.c` `a`(`b.c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11a82c.  v0:= 0I;
  #L11a82e.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11a834.  v1:= temp;
  #L11a836.  call temp:= `a`(v2, v3, v0, v1) @signature `Lb/c;.a:(Ljava/lang/String;II)Lb/c;` @kind virtual;
  #L11a83c.  v0:= temp @kind object;
  #L11a83e.  return v0 @kind object;
}
procedure `b.c` `a`(`b.c` v9 @kind this, `java.lang.String` v10 @kind object, `int` v11 , `int` v12 ) @signature `Lb/c;.a:(Ljava/lang/String;II)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11a850.  v8:= 57343I;
  #L11a856.  v7:= 128I;
  #L11a85a.  if v10 != 0 then goto L11a86e;
  #L11a85e.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a862.  v1:= "string == null" @kind object;
  #L11a866.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a86c.  throw v0;
  #L11a86e.  if v11 >= 0 then goto L11a8a4;
  #L11a872.  v0:= new `java.lang.IllegalAccessError`;
  #L11a876.  v1:= new `java.lang.StringBuilder`;
  #L11a87a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11a880.  v2:= "beginIndex < 0: " @kind object;
  #L11a884.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a88a.  v1:= temp @kind object;
  #L11a88c.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a892.  v1:= temp @kind object;
  #L11a894.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11a89a.  v1:= temp @kind object;
  #L11a89c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a8a2.  throw v0;
  #L11a8a4.  if v12 >= v11 then goto L11a8ee;
  #L11a8a8.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a8ac.  v1:= new `java.lang.StringBuilder`;
  #L11a8b0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11a8b6.  v2:= "endIndex < beginIndex: " @kind object;
  #L11a8ba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a8c0.  v1:= temp @kind object;
  #L11a8c2.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a8c8.  v1:= temp @kind object;
  #L11a8ca.  v2:= " < " @kind object;
  #L11a8ce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a8d4.  v1:= temp @kind object;
  #L11a8d6.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a8dc.  v1:= temp @kind object;
  #L11a8de.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11a8e4.  v1:= temp @kind object;
  #L11a8e6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a8ec.  throw v0;
  #L11a8ee.  call temp:= `length`(v10) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11a8f4.  v0:= temp;
  #L11a8f6.  if v12 <= v0 then goto L11a970;
  #L11a8fa.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a8fe.  v1:= new `java.lang.StringBuilder`;
  #L11a902.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11a908.  v2:= "endIndex > string.length: " @kind object;
  #L11a90c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a912.  v1:= temp @kind object;
  #L11a914.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a91a.  v1:= temp @kind object;
  #L11a91c.  v2:= " > " @kind object;
  #L11a920.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a926.  v1:= temp @kind object;
  #L11a928.  call temp:= `length`(v10) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11a92e.  v2:= temp;
  #L11a930.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a936.  v1:= temp @kind object;
  #L11a938.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11a93e.  v1:= temp @kind object;
  #L11a940.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a946.  throw v0;
  #L11a948.  v0:= 0I;
  #L11a94a.  v2:= 56319I;
  #L11a950.  if v1 > v2 then goto L11a962;
  #L11a954.  v2:= 56320I;
  #L11a95a.  if v0 < v2 then goto L11a962;
  #L11a95e.  if v0 <= v8 then goto L11aa78;
  #L11a962.  v0:= 63I;
  #L11a966.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a96c.  v11:= v11 + 1;
  #L11a970.  if v11 >= v12 then goto L11aada;
  #L11a974.  call temp:= `charAt`(v10, v11) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L11a97a.  v1:= temp;
  #L11a97c.  if v1 >= v7 then goto L11a9f4;
  #L11a980.  v0:= 1I;
  #L11a982.  call temp:= `e`(v9, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11a988.  v2:= temp @kind object;
  #L11a98a.  v3:= v2.`b.n.a` @type ^`byte`[] @kind object;
  #L11a98e.  v0:= v2.`b.n.c` @type ^`int`;
  #L11a992.  v4:= v0 - v11 @kind int;
  #L11a996.  v0:= v4 - 8192;
  #L11a99a.  call temp:= `min`(v12, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11a9a0.  v5:= temp;
  #L11a9a2.  v0:= v11 + 1;
  #L11a9a6.  v6:= v4 + v11 @kind int;
  #L11a9aa.  v1:= (`byte`) v1 @kind i2b;
  #L11a9ac.  v3[v6]:= v1 @kind byte;
  #L11a9b0.  if v0 >= v5 then goto L11a9c0;
  #L11a9b4.  call temp:= `charAt`(v10, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L11a9ba.  v6:= temp;
  #L11a9bc.  if v6 < v7 then goto L11a9e4;
  #L11a9c0.  v1:= v0 + v4 @kind int;
  #L11a9c4.  v3:= v2.`b.n.c` @type ^`int`;
  #L11a9c8.  v1:= v1 - v3 @kind int;
  #L11a9ca.  v3:= v2.`b.n.c` @type ^`int`;
  #L11a9ce.  v3:= v3 + v1 @kind int;
  #L11a9d0.  v2.`b.n.c` @type ^`int` := v3;
  #L11a9d4.  v2:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11a9d8.  v4:= (`long`) v1 @kind i2l;
  #L11a9da.  v2:= v2 + v4 @kind long;
  #L11a9dc.  v9.`b.c.b` @type ^`long` := v2 @kind wide;
  #L11a9e0.  v11:= v0;
  #L11a9e2.  goto L11a970;
  #L11a9e4.  v1:= v0 + 1;
  #L11a9e8.  v0:= v0 + v4 @kind int;
  #L11a9ea.  v6:= (`byte`) v6 @kind i2b;
  #L11a9ec.  v3[v0]:= v6 @kind byte;
  #L11a9f0.  v0:= v1;
  #L11a9f2.  goto L11a9b0;
  #L11a9f4.  v0:= 2048I;
  #L11a9f8.  if v1 >= v0 then goto L11aa1e;
  #L11a9fc.  v0:= v1 ^> 6;
  #L11aa00.  v0:= v0 ^| 192;
  #L11aa04.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11aa0a.  v0:= v1 ^& 63;
  #L11aa0e.  v0:= v0 ^| 128;
  #L11aa12.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11aa18.  v0:= v11 + 1;
  #L11aa1c.  goto L11a9e0;
  #L11aa1e.  v0:= 55296I;
  #L11aa24.  if v1 < v0 then goto L11aa2c;
  #L11aa28.  if v1 <= v8 then goto L11aa60;
  #L11aa2c.  v0:= v1 ^> 12;
  #L11aa30.  v0:= v0 ^| 224;
  #L11aa34.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11aa3a.  v0:= v1 ^> 6;
  #L11aa3e.  v0:= v0 ^& 63;
  #L11aa42.  v0:= v0 ^| 128;
  #L11aa46.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11aa4c.  v0:= v1 ^& 63;
  #L11aa50.  v0:= v0 ^| 128;
  #L11aa54.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11aa5a.  v0:= v11 + 1;
  #L11aa5e.  goto L11a9e0;
  #L11aa60.  v0:= v11 + 1;
  #L11aa64.  if v0 >= v12 then goto L11a948;
  #L11aa68.  v0:= v11 + 1;
  #L11aa6c.  call temp:= `charAt`(v10, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L11aa72.  v0:= temp;
  #L11aa74.  goto L11a94a;
  #L11aa78.  v2:= 65536I;
  #L11aa7c.  v3:= -55297I;
  #L11aa82.  v1:= v1 ^& v3 @kind int;
  #L11aa84.  v1:= v1 ^< 10;
  #L11aa88.  v3:= -56321I;
  #L11aa8e.  v0:= v0 ^& v3 @kind int;
  #L11aa90.  v0:= v0 ^| v1 @kind int;
  #L11aa92.  v0:= v0 + v2 @kind int;
  #L11aa94.  v1:= v0 ^> 18;
  #L11aa98.  v1:= v1 ^| 240;
  #L11aa9c.  call temp:= `b`(v9, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11aaa2.  v1:= v0 ^> 12;
  #L11aaa6.  v1:= v1 ^& 63;
  #L11aaaa.  v1:= v1 ^| 128;
  #L11aaae.  call temp:= `b`(v9, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11aab4.  v1:= v0 ^> 6;
  #L11aab8.  v1:= v1 ^& 63;
  #L11aabc.  v1:= v1 ^| 128;
  #L11aac0.  call temp:= `b`(v9, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11aac6.  v0:= v0 ^& 63;
  #L11aaca.  v0:= v0 ^| 128;
  #L11aace.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11aad4.  v0:= v11 + 2;
  #L11aad8.  goto L11a9e0;
  #L11aada.  return v9 @kind object;
}
procedure `b.s` `a`(`b.c` v1 @kind this) @signature `Lb/c;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11aaec.  v0:= `@@b.s.b` @type ^`b.s` @kind object;
  #L11aaf0.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`b.c` v7 @kind this, `long` v8 , `java.nio.charset.Charset` v10 @kind object) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11ab04.  v2:= 0L;
  #L11ab08.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11ab0c.  v4:= v8 @kind wide;
  #L11ab0e.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11ab14.  if v10 != 0 then goto L11ab28;
  #L11ab18.  v0:= new `java.lang.IllegalArgumentException`;
  #L11ab1c.  v1:= "charset == null" @kind object;
  #L11ab20.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ab26.  throw v0;
  #L11ab28.  v0:= 2147483647L;
  #L11ab2e.  v0:= lcmp(v8, v0);
  #L11ab32.  if v0 <= 0 then goto L11ab68;
  #L11ab36.  v0:= new `java.lang.IllegalArgumentException`;
  #L11ab3a.  v1:= new `java.lang.StringBuilder`;
  #L11ab3e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11ab44.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L11ab48.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ab4e.  v1:= temp @kind object;
  #L11ab50.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ab56.  v1:= temp @kind object;
  #L11ab58.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11ab5e.  v1:= temp @kind object;
  #L11ab60.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ab66.  throw v0;
  #L11ab68.  v0:= lcmp(v8, v2);
  #L11ab6c.  if v0 != 0 then goto L11ab76;
  #L11ab70.  v0:= "" @kind object;
  #L11ab74.  return v0 @kind object;
  #L11ab76.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11ab7a.  v0:= v1.`b.n.b` @type ^`int`;
  #L11ab7e.  v2:= (`long`) v0 @kind i2l;
  #L11ab80.  v2:= v2 + v8 @kind long;
  #L11ab82.  v0:= v1.`b.n.c` @type ^`int`;
  #L11ab86.  v4:= (`long`) v0 @kind i2l;
  #L11ab88.  v0:= lcmp(v2, v4);
  #L11ab8c.  if v0 <= 0 then goto L11aba4;
  #L11ab90.  v0:= new `java.lang.String`;
  #L11ab94.  call temp:= `f`(v7, v8) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #L11ab9a.  v1:= temp @kind object;
  #L11ab9c.  call `<init>`(v0, v1, v10) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L11aba2.  goto L11ab74;
  #L11aba4.  v0:= new `java.lang.String`;
  #L11aba8.  v2:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11abac.  v3:= v1.`b.n.b` @type ^`int`;
  #L11abb0.  v4:= (`int`) v8 @kind l2i;
  #L11abb2.  call `<init>`(v0, v2, v3, v4, v10) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L11abb8.  v2:= v1.`b.n.b` @type ^`int`;
  #L11abbc.  v2:= (`long`) v2 @kind i2l;
  #L11abbe.  v2:= v2 + v8 @kind long;
  #L11abc0.  v2:= (`int`) v2 @kind l2i;
  #L11abc2.  v1.`b.n.b` @type ^`int` := v2;
  #L11abc6.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11abca.  v2:= v2 - v8 @kind long;
  #L11abcc.  v7.`b.c.b` @type ^`long` := v2 @kind wide;
  #L11abd0.  v2:= v1.`b.n.b` @type ^`int`;
  #L11abd4.  v3:= v1.`b.n.c` @type ^`int`;
  #L11abd8.  if v2 != v3 then goto L11ab74;
  #L11abdc.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11abe2.  v2:= temp @kind object;
  #L11abe4.  v7.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L11abe8.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11abee.  goto L11ab74;
}
procedure `java.lang.String` `a`(`b.c` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lb/c;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L11ac00.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11ac04.  call temp:= `a`(v2, v0, v3) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L11ac0a.  v0:= temp @kind object;
  #L11ac0c.  return v0 @kind object;
  #L11ac0e.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L11ac10.  v1:= new `java.lang.AssertionError`;
  #L11ac14.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11ac1a.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L11ac0e;
}
procedure `void` `a`(`b.c` v3 @kind this, `long` v4 ) @signature `Lb/c;.a:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11ac3c.  v0:= v3.`b.c.b` @type ^`long` @kind wide;
  #L11ac40.  v0:= lcmp(v0, v4);
  #L11ac44.  if v0 >= 0 then goto L11ac54;
  #L11ac48.  v0:= new `java.io.EOFException`;
  #L11ac4c.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11ac52.  throw v0;
  #L11ac54.  return @kind void;
}
procedure `void` `a`(`b.c` v3 @kind this, `byte`[] v4 @kind object) @signature `Lb/c;.a:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11ac68.  v0:= 0I;
  #L11ac6a.  v1:= length @variable v4;
  #L11ac6c.  if v0 >= v1 then goto L11ac92;
  #L11ac70.  v1:= length @variable v4;
  #L11ac72.  v1:= v1 - v0 @kind int;
  #L11ac74.  call temp:= `a`(v3, v4, v0, v1) @signature `Lb/c;.a:([BII)I` @kind virtual;
  #L11ac7a.  v1:= temp;
  #L11ac7c.  v2:= -1I;
  #L11ac7e.  if v1 != v2 then goto L11ac8e;
  #L11ac82.  v0:= new `java.io.EOFException`;
  #L11ac86.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11ac8c.  throw v0;
  #L11ac8e.  v0:= v0 + v1 @kind int;
  #L11ac90.  goto L11ac6a;
  #L11ac92.  return @kind void;
}
procedure `boolean` `a`(`b.c` v7 @kind this, `long` v8 , `b.f` v10 @kind object) @signature `Lb/c;.a:(JLb/f;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11aca4.  v5:= 0I;
  #L11aca6.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11acac.  v6:= temp;
  #L11acae.  v1:= v7 @kind object;
  #L11acb0.  v2:= v8 @kind wide;
  #L11acb2.  v4:= v10 @kind object;
  #L11acb4.  call temp:= `a`(v1, v2, v4, v5, v6) @signature `Lb/c;.a:(JLb/f;II)Z` @kind virtual;
  #L11acba.  v0:= temp;
  #L11acbc.  return v0;
}
procedure `boolean` `a`(`b.c` v7 @kind this, `long` v8 , `b.f` v10 @kind object, `int` v11 , `int` v12 ) @signature `Lb/c;.a:(JLb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11acd0.  v0:= 0I;
  #L11acd2.  v2:= 0L;
  #L11acd6.  v1:= lcmp(v8, v2);
  #L11acda.  if v1 < 0 then goto L11ad04;
  #L11acde.  if v11 < 0 then goto L11ad04;
  #L11ace2.  if v12 < 0 then goto L11ad04;
  #L11ace6.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11acea.  v2:= v2 - v8 @kind long;
  #L11acec.  v4:= (`long`) v12 @kind i2l;
  #L11acee.  v1:= lcmp(v2, v4);
  #L11acf2.  if v1 < 0 then goto L11ad04;
  #L11acf6.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11acfc.  v1:= temp;
  #L11acfe.  v1:= v1 - v11 @kind int;
  #L11ad00.  if v1 >= v12 then goto L11ad06;
  #L11ad04.  return v0;
  #L11ad06.  v1:= v0;
  #L11ad08.  if v1 >= v12 then goto L11ad2e;
  #L11ad0c.  v2:= (`long`) v1 @kind i2l;
  #L11ad0e.  v2:= v2 + v8 @kind long;
  #L11ad10.  call temp:= `b`(v7, v2) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L11ad16.  v2:= temp;
  #L11ad18.  v3:= v11 + v1 @kind int;
  #L11ad1c.  call temp:= `a`(v10, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L11ad22.  v3:= temp;
  #L11ad24.  if v2 != v3 then goto L11ad04;
  #L11ad28.  v1:= v1 + 1;
  #L11ad2c.  goto L11ad08;
  #L11ad2e.  v0:= 1I;
  #L11ad30.  goto L11ad04;
}
procedure `void` `a_`(`b.c` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `Lb/c;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11ad44.  v2:= 0L;
  #L11ad48.  if v9 != 0 then goto L11ad5c;
  #L11ad4c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11ad50.  v1:= "source == null" @kind object;
  #L11ad54.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ad5a.  throw v0;
  #L11ad5c.  if v9 != v8 then goto L11ad70;
  #L11ad60.  v0:= new `java.lang.IllegalArgumentException`;
  #L11ad64.  v1:= "source == this" @kind object;
  #L11ad68.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ad6e.  throw v0;
  #L11ad70.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11ad74.  v4:= v10 @kind wide;
  #L11ad76.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11ad7c.  v0:= lcmp(v10, v2);
  #L11ad80.  if v0 <= 0 then goto L11ae00;
  #L11ad84.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11ad88.  v0:= v0.`b.n.c` @type ^`int`;
  #L11ad8c.  v1:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11ad90.  v1:= v1.`b.n.b` @type ^`int`;
  #L11ad94.  v0:= v0 - v1 @kind int;
  #L11ad96.  v0:= (`long`) v0 @kind i2l;
  #L11ad98.  v0:= lcmp(v10, v0);
  #L11ad9c.  if v0 >= 0 then goto L11ae20;
  #L11ada0.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11ada4.  if v0 == 0 then goto L11ae02;
  #L11ada8.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11adac.  v0:= v0.`b.n.g` @type ^`b.n` @kind object;
  #L11adb0.  v1:= v0 @kind object;
  #L11adb2.  if v1 == 0 then goto L11ae0e;
  #L11adb6.  v0:= v1.`b.n.e` @type ^`boolean` @kind boolean;
  #L11adba.  if v0 == 0 then goto L11ae0e;
  #L11adbe.  v0:= v1.`b.n.c` @type ^`int`;
  #L11adc2.  v4:= (`long`) v0 @kind i2l;
  #L11adc4.  v4:= v4 + v10 @kind long;
  #L11adc6.  v0:= v1.`b.n.d` @type ^`boolean` @kind boolean;
  #L11adca.  if v0 == 0 then goto L11ae08;
  #L11adce.  v0:= 0I;
  #L11add0.  v6:= (`long`) v0 @kind i2l;
  #L11add2.  v4:= v4 - v6 @kind long;
  #L11add4.  v6:= 8192L;
  #L11add8.  v0:= lcmp(v4, v6);
  #L11addc.  if v0 > 0 then goto L11ae0e;
  #L11ade0.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11ade4.  v2:= (`int`) v10 @kind l2i;
  #L11ade6.  call `a`(v0, v1, v2) @signature `Lb/n;.a:(Lb/n;I)V` @kind virtual;
  #L11adec.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11adf0.  v0:= v0 - v10 @kind long;
  #L11adf2.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11adf6.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L11adfa.  v0:= v0 + v10 @kind long;
  #L11adfc.  v8.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11ae00.  return @kind void;
  #L11ae02.  v0:= 0I;
  #L11ae04.  v1:= v0 @kind object;
  #L11ae06.  goto L11adb2;
  #L11ae08.  v0:= v1.`b.n.b` @type ^`int`;
  #L11ae0c.  goto L11add0;
  #L11ae0e.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11ae12.  v1:= (`int`) v10 @kind l2i;
  #L11ae14.  call temp:= `a`(v0, v1) @signature `Lb/n;.a:(I)Lb/n;` @kind virtual;
  #L11ae1a.  v0:= temp @kind object;
  #L11ae1c.  v9.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L11ae20.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11ae24.  v1:= v0.`b.n.c` @type ^`int`;
  #L11ae28.  v4:= v0.`b.n.b` @type ^`int`;
  #L11ae2c.  v1:= v1 - v4 @kind int;
  #L11ae2e.  v4:= (`long`) v1 @kind i2l;
  #L11ae30.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11ae36.  v1:= temp @kind object;
  #L11ae38.  v9.`b.c.a` @type ^`b.n` := v1 @kind object;
  #L11ae3c.  v1:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11ae40.  if v1 != 0 then goto L11ae74;
  #L11ae44.  v8.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L11ae48.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11ae4c.  v1:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11ae50.  v6:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11ae54.  v1.`b.n.g` @type ^`b.n` := v6 @kind object;
  #L11ae58.  v0.`b.n.f` @type ^`b.n` := v6 @kind object;
  #L11ae5c.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11ae60.  v0:= v0 - v4 @kind long;
  #L11ae62.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11ae66.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L11ae6a.  v0:= v0 + v4 @kind long;
  #L11ae6c.  v8.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11ae70.  v10:= v10 - v4 @kind long;
  #L11ae72.  goto L11ad7c;
  #L11ae74.  v1:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11ae78.  v1:= v1.`b.n.g` @type ^`b.n` @kind object;
  #L11ae7c.  call temp:= `a`(v1, v0) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11ae82.  v0:= temp @kind object;
  #L11ae84.  call `b`(v0) @signature `Lb/n;.b:()V` @kind virtual;
  #L11ae8a.  goto L11ae5c;
}
procedure `byte` `b`(`b.c` v7 @kind this, `long` v8 ) @signature `Lb/c;.b:(J)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11ae9c.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11aea0.  v4:= 1L;
  #L11aea4.  v2:= v8 @kind wide;
  #L11aea6.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11aeac.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11aeb0.  v1:= v0.`b.n.c` @type ^`int`;
  #L11aeb4.  v2:= v0.`b.n.b` @type ^`int`;
  #L11aeb8.  v1:= v1 - v2 @kind int;
  #L11aeba.  v2:= (`long`) v1 @kind i2l;
  #L11aebc.  v2:= lcmp(v8, v2);
  #L11aec0.  if v2 >= 0 then goto L11aed6;
  #L11aec4.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11aec8.  v0:= v0.`b.n.b` @type ^`int`;
  #L11aecc.  v2:= (`int`) v8 @kind l2i;
  #L11aece.  v0:= v0 + v2 @kind int;
  #L11aed0.  v0:= v1[v0] @kind byte;
  #L11aed4.  return v0;
  #L11aed6.  v2:= (`long`) v1 @kind i2l;
  #L11aed8.  v8:= v8 - v2 @kind long;
  #L11aeda.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11aede.  goto L11aeb0;
}
procedure `long` `b`(`b.c` v2 @kind this) @signature `Lb/c;.b:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11aef0.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11aef4.  return v0 @kind wide;
}
procedure `b.c` `b`(`b.c` v4 @kind this, `int` v5 ) @signature `Lb/c;.b:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11af08.  v0:= 1I;
  #L11af0a.  call temp:= `e`(v4, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11af10.  v0:= temp @kind object;
  #L11af12.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11af16.  v2:= v0.`b.n.c` @type ^`int`;
  #L11af1a.  v3:= v2 + 1;
  #L11af1e.  v0.`b.n.c` @type ^`int` := v3;
  #L11af22.  v0:= (`byte`) v5 @kind i2b;
  #L11af24.  v1[v2]:= v0 @kind byte;
  #L11af28.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11af2c.  v2:= 1L;
  #L11af30.  v0:= v0 + v2 @kind long;
  #L11af32.  v4.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11af36.  return v4 @kind object;
}
procedure `b.c` `b`(`b.c` v2 @kind this, `byte`[] v3 @kind object) @signature `Lb/c;.b:([B)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11af48.  if v3 != 0 then goto L11af5c;
  #L11af4c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11af50.  v1:= "source == null" @kind object;
  #L11af54.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11af5a.  throw v0;
  #L11af5c.  v0:= 0I;
  #L11af5e.  v1:= length @variable v3;
  #L11af60.  call temp:= `b`(v2, v3, v0, v1) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L11af66.  v0:= temp @kind object;
  #L11af68.  return v0 @kind object;
}
procedure `b.c` `b`(`b.c` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lb/c;.b:([BII)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11af7c.  if v7 != 0 then goto L11af90;
  #L11af80.  v0:= new `java.lang.IllegalArgumentException`;
  #L11af84.  v1:= "source == null" @kind object;
  #L11af88.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11af8e.  throw v0;
  #L11af90.  v0:= length @variable v7;
  #L11af92.  v0:= (`long`) v0 @kind i2l;
  #L11af94.  v2:= (`long`) v8 @kind i2l;
  #L11af96.  v4:= (`long`) v9 @kind i2l;
  #L11af98.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11af9e.  v0:= v8 + v9 @kind int;
  #L11afa2.  if v8 >= v0 then goto L11afe0;
  #L11afa6.  v1:= 1I;
  #L11afa8.  call temp:= `e`(v6, v1) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11afae.  v1:= temp @kind object;
  #L11afb0.  v2:= v0 - v8 @kind int;
  #L11afb4.  v3:= v1.`b.n.c` @type ^`int`;
  #L11afb8.  v3:= v3 - 8192;
  #L11afbc.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11afc2.  v2:= temp;
  #L11afc4.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11afc8.  v4:= v1.`b.n.c` @type ^`int`;
  #L11afcc.  call `arraycopy`(v7, v8, v3, v4, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11afd2.  v8:= v8 + v2 @kind int;
  #L11afd4.  v3:= v1.`b.n.c` @type ^`int`;
  #L11afd8.  v2:= v2 + v3 @kind int;
  #L11afda.  v1.`b.n.c` @type ^`int` := v2;
  #L11afde.  goto L11afa2;
  #L11afe0.  v0:= v6.`b.c.b` @type ^`long` @kind wide;
  #L11afe4.  v2:= (`long`) v9 @kind i2l;
  #L11afe6.  v0:= v0 + v2 @kind long;
  #L11afe8.  v6.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11afec.  return v6 @kind object;
}
procedure `b.d` `b`(`b.c` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lb/c;.b:(Ljava/lang/String;)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11b000.  call temp:= `a`(v1, v2) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @kind virtual;
  #L11b006.  v0:= temp @kind object;
  #L11b008.  return v0 @kind object;
}
procedure `b.c` `c`(`b.c` v0 @kind this) @signature `Lb/c;.c:()Lb/c;` @AccessFlag PUBLIC {
    temp;

  #L11b01c.  return v0 @kind object;
}
procedure `b.c` `c`(`b.c` v5 @kind this, `int` v6 ) @signature `Lb/c;.c:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11b030.  v0:= 2I;
  #L11b032.  call temp:= `e`(v5, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11b038.  v0:= temp @kind object;
  #L11b03a.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11b03e.  v2:= v0.`b.n.c` @type ^`int`;
  #L11b042.  v3:= v2 + 1;
  #L11b046.  v4:= v6 ^>> 8;
  #L11b04a.  v4:= v4 ^& 255;
  #L11b04e.  v4:= (`byte`) v4 @kind i2b;
  #L11b050.  v1[v2]:= v4 @kind byte;
  #L11b054.  v2:= v3 + 1;
  #L11b058.  v4:= v6 ^& 255;
  #L11b05c.  v4:= (`byte`) v4 @kind i2b;
  #L11b05e.  v1[v3]:= v4 @kind byte;
  #L11b062.  v0.`b.n.c` @type ^`int` := v2;
  #L11b066.  v0:= v5.`b.c.b` @type ^`long` @kind wide;
  #L11b06a.  v2:= 2L;
  #L11b06e.  v0:= v0 + v2 @kind long;
  #L11b070.  v5.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11b074.  return v5 @kind object;
}
procedure `b.d` `c`(`b.c` v1 @kind this, `byte`[] v2 @kind object) @signature `Lb/c;.c:([B)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11b088.  call temp:= `b`(v1, v2) @signature `Lb/c;.b:([B)Lb/c;` @kind virtual;
  #L11b08e.  v0:= temp @kind object;
  #L11b090.  return v0 @kind object;
}
procedure `b.d` `c`(`b.c` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lb/c;.c:([BII)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11b0a4.  call temp:= `b`(v1, v2, v3, v4) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L11b0aa.  v0:= temp @kind object;
  #L11b0ac.  return v0 @kind object;
}
procedure `b.f` `c`(`b.c` v3 @kind this, `long` v4 ) @signature `Lb/c;.c:(J)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11b0c0.  v0:= new `b.f`;
  #L11b0c4.  call temp:= `f`(v3, v4) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #L11b0ca.  v1:= temp @kind object;
  #L11b0cc.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11b0d2.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`b.c` v1 @kind this) @signature `Lb/c;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11b0e4.  call temp:= `s`(v1) @signature `Lb/c;.s:()Lb/c;` @kind virtual;
  #L11b0ea.  v0:= temp @kind object;
  #L11b0ec.  return v0 @kind object;
}
procedure `void` `close`(`b.c` v0 @kind this) @signature `Lb/c;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L11b100.  return @kind void;
}
procedure `b.c` `d`(`b.c` v0 @kind this) @signature `Lb/c;.d:()Lb/c;` @AccessFlag PUBLIC {
    temp;

  #L11b114.  return v0 @kind object;
}
procedure `b.c` `d`(`b.c` v5 @kind this, `int` v6 ) @signature `Lb/c;.d:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11b128.  v0:= 4I;
  #L11b12a.  call temp:= `e`(v5, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11b130.  v0:= temp @kind object;
  #L11b132.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11b136.  v2:= v0.`b.n.c` @type ^`int`;
  #L11b13a.  v3:= v2 + 1;
  #L11b13e.  v4:= v6 ^>> 24;
  #L11b142.  v4:= v4 ^& 255;
  #L11b146.  v4:= (`byte`) v4 @kind i2b;
  #L11b148.  v1[v2]:= v4 @kind byte;
  #L11b14c.  v2:= v3 + 1;
  #L11b150.  v4:= v6 ^>> 16;
  #L11b154.  v4:= v4 ^& 255;
  #L11b158.  v4:= (`byte`) v4 @kind i2b;
  #L11b15a.  v1[v3]:= v4 @kind byte;
  #L11b15e.  v3:= v2 + 1;
  #L11b162.  v4:= v6 ^>> 8;
  #L11b166.  v4:= v4 ^& 255;
  #L11b16a.  v4:= (`byte`) v4 @kind i2b;
  #L11b16c.  v1[v2]:= v4 @kind byte;
  #L11b170.  v2:= v3 + 1;
  #L11b174.  v4:= v6 ^& 255;
  #L11b178.  v4:= (`byte`) v4 @kind i2b;
  #L11b17a.  v1[v3]:= v4 @kind byte;
  #L11b17e.  v0.`b.n.c` @type ^`int` := v2;
  #L11b182.  v0:= v5.`b.c.b` @type ^`long` @kind wide;
  #L11b186.  v2:= 4L;
  #L11b18a.  v0:= v0 + v2 @kind long;
  #L11b18c.  v5.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11b190.  return v5 @kind object;
}
procedure `java.lang.String` `d`(`b.c` v1 @kind this, `long` v2 ) @signature `Lb/c;.d:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b1a4.  v0:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L11b1a8.  call temp:= `a`(v1, v2, v0) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L11b1ae.  v0:= temp @kind object;
  #L11b1b0.  return v0 @kind object;
}
procedure `b.n` `e`(`b.c` v3 @kind this, `int` v4 ) @signature `Lb/c;.e:(I)Lb/n;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L11b1c4.  v2:= 8192I;
  #L11b1c8.  v0:= 1I;
  #L11b1ca.  if v4 < v0 then goto L11b1d2;
  #L11b1ce.  if v4 <= v2 then goto L11b1de;
  #L11b1d2.  v0:= new `java.lang.IllegalArgumentException`;
  #L11b1d6.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11b1dc.  throw v0;
  #L11b1de.  v0:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L11b1e2.  if v0 != 0 then goto L11b208;
  #L11b1e6.  call temp:= `a`() @signature `Lb/o;.a:()Lb/n;` @kind static;
  #L11b1ec.  v0:= temp @kind object;
  #L11b1ee.  v3.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L11b1f2.  v1:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L11b1f6.  v2:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L11b1fa.  v0:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L11b1fe.  v2.`b.n.g` @type ^`b.n` := v0 @kind object;
  #L11b202.  v1.`b.n.f` @type ^`b.n` := v0 @kind object;
  #L11b206.  return v0 @kind object;
  #L11b208.  v0:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L11b20c.  v0:= v0.`b.n.g` @type ^`b.n` @kind object;
  #L11b210.  v1:= v0.`b.n.c` @type ^`int`;
  #L11b214.  v1:= v1 + v4 @kind int;
  #L11b216.  if v1 > v2 then goto L11b222;
  #L11b21a.  v1:= v0.`b.n.e` @type ^`boolean` @kind boolean;
  #L11b21e.  if v1 != 0 then goto L11b206;
  #L11b222.  call temp:= `a`() @signature `Lb/o;.a:()Lb/n;` @kind static;
  #L11b228.  v1:= temp @kind object;
  #L11b22a.  call temp:= `a`(v0, v1) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11b230.  v0:= temp @kind object;
  #L11b232.  goto L11b206;
}
procedure `java.lang.String` `e`(`b.c` v5 @kind this, `long` v6 ) @signature `Lb/c;.e:(J)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11b244.  v2:= 1L;
  #L11b248.  v0:= 0L;
  #L11b24c.  v0:= lcmp(v6, v0);
  #L11b250.  if v0 <= 0 then goto L11b280;
  #L11b254.  v0:= v6 - v2 @kind long;
  #L11b258.  call temp:= `b`(v5, v0) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L11b25e.  v0:= temp;
  #L11b260.  v1:= 13I;
  #L11b264.  if v0 != v1 then goto L11b280;
  #L11b268.  v0:= v6 - v2 @kind long;
  #L11b26c.  call temp:= `d`(v5, v0) @signature `Lb/c;.d:(J)Ljava/lang/String;` @kind virtual;
  #L11b272.  v0:= temp @kind object;
  #L11b274.  v2:= 2L;
  #L11b278.  call `g`(v5, v2) @signature `Lb/c;.g:(J)V` @kind virtual;
  #L11b27e.  return v0 @kind object;
  #L11b280.  call temp:= `d`(v5, v6) @signature `Lb/c;.d:(J)Ljava/lang/String;` @kind virtual;
  #L11b286.  v0:= temp @kind object;
  #L11b288.  call `g`(v5, v2) @signature `Lb/c;.g:(J)V` @kind virtual;
  #L11b28e.  goto L11b27e;
}
procedure `boolean` `e`(`b.c` v4 @kind this) @signature `Lb/c;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11b2a0.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11b2a4.  v2:= 0L;
  #L11b2a8.  v0:= lcmp(v0, v2);
  #L11b2ac.  if v0 != 0 then goto L11b2b4;
  #L11b2b0.  v0:= 1I;
  #L11b2b2.  return v0;
  #L11b2b4.  v0:= 0I;
  #L11b2b6.  goto L11b2b2;
}
procedure `boolean` `equals`(`b.c` v14 @kind this, `java.lang.Object` v15 @kind object) @signature `Lb/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L11b2c8.  v0:= 0L;
  #L11b2cc.  v6:= 1I;
  #L11b2ce.  v7:= 0I;
  #L11b2d0.  if v14 != v15 then goto L11b2d8;
  #L11b2d4.  v0:= v6;
  #L11b2d6.  return v0;
  #L11b2d8.  v2:= instanceof @variable v15 @type ^`b.c` @kind boolean;
  #L11b2dc.  if v2 != 0 then goto L11b2e4;
  #L11b2e0.  v0:= v7;
  #L11b2e2.  goto L11b2d6;
  #L11b2e4.  v15:= (`b.c`) v15 @kind object;
  #L11b2e8.  v2:= v14.`b.c.b` @type ^`long` @kind wide;
  #L11b2ec.  v4:= v15.`b.c.b` @type ^`long` @kind wide;
  #L11b2f0.  v2:= lcmp(v2, v4);
  #L11b2f4.  if v2 == 0 then goto L11b2fc;
  #L11b2f8.  v0:= v7;
  #L11b2fa.  goto L11b2d6;
  #L11b2fc.  v2:= v14.`b.c.b` @type ^`long` @kind wide;
  #L11b300.  v2:= lcmp(v2, v0);
  #L11b304.  if v2 != 0 then goto L11b30c;
  #L11b308.  v0:= v6;
  #L11b30a.  goto L11b2d6;
  #L11b30c.  v5:= v14.`b.c.a` @type ^`b.n` @kind object;
  #L11b310.  v4:= v15.`b.c.a` @type ^`b.n` @kind object;
  #L11b314.  v3:= v5.`b.n.b` @type ^`int`;
  #L11b318.  v2:= v4.`b.n.b` @type ^`int`;
  #L11b31c.  v8:= v14.`b.c.b` @type ^`long` @kind wide;
  #L11b320.  v8:= lcmp(v0, v8);
  #L11b324.  if v8 >= 0 then goto L11b39a;
  #L11b328.  v8:= v5.`b.n.c` @type ^`int`;
  #L11b32c.  v8:= v8 - v3 @kind int;
  #L11b32e.  v9:= v4.`b.n.c` @type ^`int`;
  #L11b332.  v9:= v9 - v2 @kind int;
  #L11b334.  call temp:= `min`(v8, v9) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11b33a.  v8:= temp;
  #L11b33c.  v10:= (`long`) v8 @kind i2l;
  #L11b33e.  v8:= v7;
  #L11b340.  v12:= (`long`) v8 @kind i2l;
  #L11b342.  v9:= lcmp(v12, v10);
  #L11b346.  if v9 >= 0 then goto L11b376;
  #L11b34a.  v12:= v5.`b.n.a` @type ^`byte`[] @kind object;
  #L11b34e.  v9:= v3 + 1;
  #L11b352.  v12:= v12[v3] @kind byte;
  #L11b356.  v13:= v4.`b.n.a` @type ^`byte`[] @kind object;
  #L11b35a.  v3:= v2 + 1;
  #L11b35e.  v2:= v13[v2] @kind byte;
  #L11b362.  if v12 == v2 then goto L11b36a;
  #L11b366.  v0:= v7;
  #L11b368.  goto L11b2d6;
  #L11b36a.  v2:= v8 + 1;
  #L11b36e.  v8:= v2;
  #L11b370.  v2:= v3;
  #L11b372.  v3:= v9;
  #L11b374.  goto L11b340;
  #L11b376.  v8:= v5.`b.n.c` @type ^`int`;
  #L11b37a.  if v3 != v8 then goto L11b386;
  #L11b37e.  v5:= v5.`b.n.f` @type ^`b.n` @kind object;
  #L11b382.  v3:= v5.`b.n.b` @type ^`int`;
  #L11b386.  v8:= v4.`b.n.c` @type ^`int`;
  #L11b38a.  if v2 != v8 then goto L11b396;
  #L11b38e.  v4:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11b392.  v2:= v4.`b.n.b` @type ^`int`;
  #L11b396.  v0:= v0 + v10 @kind long;
  #L11b398.  goto L11b31c;
  #L11b39a.  v0:= v6;
  #L11b39c.  goto L11b2d6;
}
procedure `b.f` `f`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.f:(I)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b3b0.  if v2 != 0 then goto L11b3ba;
  #L11b3b4.  v0:= `@@b.f.b` @type ^`b.f` @kind object;
  #L11b3b8.  return v0 @kind object;
  #L11b3ba.  v0:= new `b.p`;
  #L11b3be.  call `<init>`(v0, v1, v2) @signature `Lb/p;.<init>:(Lb/c;I)V` @kind direct;
  #L11b3c4.  goto L11b3b8;
}
procedure `java.io.InputStream` `f`(`b.c` v1 @kind this) @signature `Lb/c;.f:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b3d8.  v0:= new `b.c$1`;
  #L11b3dc.  call `<init>`(v0, v1) @signature `Lb/c$1;.<init>:(Lb/c;)V` @kind direct;
  #L11b3e2.  return v0 @kind object;
}
procedure `byte`[] `f`(`b.c` v7 @kind this, `long` v8 ) @signature `Lb/c;.f:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11b3f4.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11b3f8.  v2:= 0L;
  #L11b3fc.  v4:= v8 @kind wide;
  #L11b3fe.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11b404.  v0:= 2147483647L;
  #L11b40a.  v0:= lcmp(v8, v0);
  #L11b40e.  if v0 <= 0 then goto L11b444;
  #L11b412.  v0:= new `java.lang.IllegalArgumentException`;
  #L11b416.  v1:= new `java.lang.StringBuilder`;
  #L11b41a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11b420.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L11b424.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b42a.  v1:= temp @kind object;
  #L11b42c.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b432.  v1:= temp @kind object;
  #L11b434.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11b43a.  v1:= temp @kind object;
  #L11b43c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b442.  throw v0;
  #L11b444.  v0:= (`int`) v8 @kind l2i;
  #L11b446.  v0:= new `byte`[v0];
  #L11b44a.  call `a`(v7, v0) @signature `Lb/c;.a:([B)V` @kind virtual;
  #L11b450.  return v0 @kind object;
}
procedure `void` `flush`(`b.c` v0 @kind this) @signature `Lb/c;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L11b464.  return @kind void;
}
procedure `long` `g`(`b.c` v5 @kind this) @signature `Lb/c;.g:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11b478.  v2:= 0L;
  #L11b47c.  v0:= v5.`b.c.b` @type ^`long` @kind wide;
  #L11b480.  v4:= lcmp(v0, v2);
  #L11b484.  if v4 != 0 then goto L11b48c;
  #L11b488.  v0:= v2 @kind wide;
  #L11b48a.  return v0 @kind wide;
  #L11b48c.  v2:= v5.`b.c.a` @type ^`b.n` @kind object;
  #L11b490.  v2:= v2.`b.n.g` @type ^`b.n` @kind object;
  #L11b494.  v3:= v2.`b.n.c` @type ^`int`;
  #L11b498.  v4:= 8192I;
  #L11b49c.  if v3 >= v4 then goto L11b48a;
  #L11b4a0.  v3:= v2.`b.n.e` @type ^`boolean` @kind boolean;
  #L11b4a4.  if v3 == 0 then goto L11b48a;
  #L11b4a8.  v3:= v2.`b.n.c` @type ^`int`;
  #L11b4ac.  v2:= v2.`b.n.b` @type ^`int`;
  #L11b4b0.  v2:= v3 - v2 @kind int;
  #L11b4b4.  v2:= (`long`) v2 @kind i2l;
  #L11b4b6.  v0:= v0 - v2 @kind long;
  #L11b4b8.  goto L11b48a;
}
procedure `b.d` `g`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.g:(I)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11b4cc.  call temp:= `d`(v1, v2) @signature `Lb/c;.d:(I)Lb/c;` @kind virtual;
  #L11b4d2.  v0:= temp @kind object;
  #L11b4d4.  return v0 @kind object;
}
procedure `void` `g`(`b.c` v7 @kind this, `long` v8 ) @signature `Lb/c;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11b4e8.  v0:= 0L;
  #L11b4ec.  v0:= lcmp(v8, v0);
  #L11b4f0.  if v0 <= 0 then goto L11b570;
  #L11b4f4.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11b4f8.  if v0 != 0 then goto L11b508;
  #L11b4fc.  v0:= new `java.io.EOFException`;
  #L11b500.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11b506.  throw v0;
  #L11b508.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11b50c.  v0:= v0.`b.n.c` @type ^`int`;
  #L11b510.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11b514.  v1:= v1.`b.n.b` @type ^`int`;
  #L11b518.  v0:= v0 - v1 @kind int;
  #L11b51a.  v0:= (`long`) v0 @kind i2l;
  #L11b51c.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11b522.  v0:= temp @kind wide;
  #L11b524.  v0:= (`int`) v0 @kind l2i;
  #L11b526.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11b52a.  v4:= (`long`) v0 @kind i2l;
  #L11b52c.  v2:= v2 - v4 @kind long;
  #L11b52e.  v7.`b.c.b` @type ^`long` := v2 @kind wide;
  #L11b532.  v2:= (`long`) v0 @kind i2l;
  #L11b534.  v8:= v8 - v2 @kind long;
  #L11b536.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11b53a.  v2:= v1.`b.n.b` @type ^`int`;
  #L11b53e.  v0:= v0 + v2 @kind int;
  #L11b540.  v1.`b.n.b` @type ^`int` := v0;
  #L11b544.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11b548.  v0:= v0.`b.n.b` @type ^`int`;
  #L11b54c.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11b550.  v1:= v1.`b.n.c` @type ^`int`;
  #L11b554.  if v0 != v1 then goto L11b4e8;
  #L11b558.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11b55c.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11b562.  v1:= temp @kind object;
  #L11b564.  v7.`b.c.a` @type ^`b.n` := v1 @kind object;
  #L11b568.  call `a`(v0) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11b56e.  goto L11b4e8;
  #L11b570.  return @kind void;
}
procedure `byte` `h`(`b.c` v10 @kind this) @signature `Lb/c;.h:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11b584.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11b588.  v2:= 0L;
  #L11b58c.  v0:= lcmp(v0, v2);
  #L11b590.  if v0 != 0 then goto L11b5a4;
  #L11b594.  v0:= new `java.lang.IllegalStateException`;
  #L11b598.  v1:= "size == 0" @kind object;
  #L11b59c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b5a2.  throw v0;
  #L11b5a4.  v0:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L11b5a8.  v1:= v0.`b.n.b` @type ^`int`;
  #L11b5ac.  v2:= v0.`b.n.c` @type ^`int`;
  #L11b5b0.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11b5b4.  v4:= v1 + 1;
  #L11b5b8.  v1:= v3[v1] @kind byte;
  #L11b5bc.  v6:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11b5c0.  v8:= 1L;
  #L11b5c4.  v6:= v6 - v8 @kind long;
  #L11b5c6.  v10.`b.c.b` @type ^`long` := v6 @kind wide;
  #L11b5ca.  if v4 != v2 then goto L11b5e2;
  #L11b5ce.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11b5d4.  v2:= temp @kind object;
  #L11b5d6.  v10.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L11b5da.  call `a`(v0) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11b5e0.  return v1;
  #L11b5e2.  v0.`b.n.b` @type ^`int` := v4;
  #L11b5e6.  goto L11b5e0;
}
procedure `b.c` `h`(`b.c` v11 @kind this, `long` v12 ) @signature `Lb/c;.h:(J)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L11b5f8.  v0:= 0L;
  #L11b5fc.  v0:= lcmp(v12, v0);
  #L11b600.  if v0 != 0 then goto L11b612;
  #L11b604.  v0:= 48I;
  #L11b608.  call temp:= `b`(v11, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11b60e.  v11:= temp @kind object;
  #L11b610.  return v11 @kind object;
  #L11b612.  v0:= 0I;
  #L11b614.  v2:= 0L;
  #L11b618.  v1:= lcmp(v12, v2);
  #L11b61c.  if v1 >= 0 then goto L11b83a;
  #L11b620.  v2:= -v12 @kind long;
  #L11b622.  v0:= 0L;
  #L11b626.  v0:= lcmp(v2, v0);
  #L11b62a.  if v0 >= 0 then goto L11b63c;
  #L11b62e.  v0:= "-9223372036854775808" @kind object;
  #L11b632.  call temp:= `a`(v11, v0) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @kind virtual;
  #L11b638.  v11:= temp @kind object;
  #L11b63a.  goto L11b610;
  #L11b63c.  v0:= 1I;
  #L11b63e.  v4:= v0;
  #L11b640.  v0:= 100000000L;
  #L11b646.  v0:= lcmp(v2, v0);
  #L11b64a.  if v0 >= 0 then goto L11b710;
  #L11b64e.  v0:= 10000L;
  #L11b652.  v0:= lcmp(v2, v0);
  #L11b656.  if v0 >= 0 then goto L11b6d4;
  #L11b65a.  v0:= 100L;
  #L11b65e.  v0:= lcmp(v2, v0);
  #L11b662.  if v0 >= 0 then goto L11b6c0;
  #L11b666.  v0:= 10L;
  #L11b66a.  v0:= lcmp(v2, v0);
  #L11b66e.  if v0 >= 0 then goto L11b6bc;
  #L11b672.  v0:= 1I;
  #L11b674.  if v4 == 0 then goto L11b67c;
  #L11b678.  v0:= v0 + 1;
  #L11b67c.  call temp:= `e`(v11, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11b682.  v5:= temp @kind object;
  #L11b684.  v6:= v5.`b.n.a` @type ^`byte`[] @kind object;
  #L11b688.  v1:= v5.`b.n.c` @type ^`int`;
  #L11b68c.  v1:= v1 + v0 @kind int;
  #L11b68e.  v8:= 0L;
  #L11b692.  v7:= lcmp(v2, v8);
  #L11b696.  if v7 == 0 then goto L11b810;
  #L11b69a.  v8:= 10L;
  #L11b69e.  v8:= v2 %% v8 @kind long;
  #L11b6a2.  v7:= (`int`) v8 @kind l2i;
  #L11b6a4.  v1:= v1 + -1;
  #L11b6a8.  v8:= `@@b.c.c` @type ^`byte`[] @kind object;
  #L11b6ac.  v7:= v8[v7] @kind byte;
  #L11b6b0.  v6[v1]:= v7 @kind byte;
  #L11b6b4.  v8:= 10L;
  #L11b6b8.  v2:= v2 / v8 @kind long;
  #L11b6ba.  goto L11b68e;
  #L11b6bc.  v0:= 2I;
  #L11b6be.  goto L11b674;
  #L11b6c0.  v0:= 1000L;
  #L11b6c4.  v0:= lcmp(v2, v0);
  #L11b6c8.  if v0 >= 0 then goto L11b6d0;
  #L11b6cc.  v0:= 3I;
  #L11b6ce.  goto L11b674;
  #L11b6d0.  v0:= 4I;
  #L11b6d2.  goto L11b674;
  #L11b6d4.  v0:= 1000000L;
  #L11b6da.  v0:= lcmp(v2, v0);
  #L11b6de.  if v0 >= 0 then goto L11b6f8;
  #L11b6e2.  v0:= 100000L;
  #L11b6e8.  v0:= lcmp(v2, v0);
  #L11b6ec.  if v0 >= 0 then goto L11b6f4;
  #L11b6f0.  v0:= 5I;
  #L11b6f2.  goto L11b674;
  #L11b6f4.  v0:= 6I;
  #L11b6f6.  goto L11b674;
  #L11b6f8.  v0:= 10000000L;
  #L11b6fe.  v0:= lcmp(v2, v0);
  #L11b702.  if v0 >= 0 then goto L11b70a;
  #L11b706.  v0:= 7I;
  #L11b708.  goto L11b674;
  #L11b70a.  v0:= 8I;
  #L11b70e.  goto L11b674;
  #L11b710.  v0:= 1000000000000L;
  #L11b71a.  v0:= lcmp(v2, v0);
  #L11b71e.  if v0 >= 0 then goto L11b76c;
  #L11b722.  v0:= 10000000000L;
  #L11b72c.  v0:= lcmp(v2, v0);
  #L11b730.  if v0 >= 0 then goto L11b74e;
  #L11b734.  v0:= 1000000000L;
  #L11b73a.  v0:= lcmp(v2, v0);
  #L11b73e.  if v0 >= 0 then goto L11b748;
  #L11b742.  v0:= 9I;
  #L11b746.  goto L11b674;
  #L11b748.  v0:= 10I;
  #L11b74c.  goto L11b674;
  #L11b74e.  v0:= 100000000000L;
  #L11b758.  v0:= lcmp(v2, v0);
  #L11b75c.  if v0 >= 0 then goto L11b766;
  #L11b760.  v0:= 11I;
  #L11b764.  goto L11b674;
  #L11b766.  v0:= 12I;
  #L11b76a.  goto L11b674;
  #L11b76c.  v0:= 1000000000000000L;
  #L11b776.  v0:= lcmp(v2, v0);
  #L11b77a.  if v0 >= 0 then goto L11b7ba;
  #L11b77e.  v0:= 10000000000000L;
  #L11b788.  v0:= lcmp(v2, v0);
  #L11b78c.  if v0 >= 0 then goto L11b798;
  #L11b790.  v0:= 13I;
  #L11b794.  goto L11b674;
  #L11b798.  v0:= 100000000000000L;
  #L11b7a2.  v0:= lcmp(v2, v0);
  #L11b7a6.  if v0 >= 0 then goto L11b7b2;
  #L11b7aa.  v0:= 14I;
  #L11b7ae.  goto L11b674;
  #L11b7b2.  v0:= 15I;
  #L11b7b6.  goto L11b674;
  #L11b7ba.  v0:= 100000000000000000L;
  #L11b7c4.  v0:= lcmp(v2, v0);
  #L11b7c8.  if v0 >= 0 then goto L11b7ee;
  #L11b7cc.  v0:= 10000000000000000L;
  #L11b7d6.  v0:= lcmp(v2, v0);
  #L11b7da.  if v0 >= 0 then goto L11b7e6;
  #L11b7de.  v0:= 16I;
  #L11b7e2.  goto L11b674;
  #L11b7e6.  v0:= 17I;
  #L11b7ea.  goto L11b674;
  #L11b7ee.  v0:= 1000000000000000000L;
  #L11b7f8.  v0:= lcmp(v2, v0);
  #L11b7fc.  if v0 >= 0 then goto L11b808;
  #L11b800.  v0:= 18I;
  #L11b804.  goto L11b674;
  #L11b808.  v0:= 19I;
  #L11b80c.  goto L11b674;
  #L11b810.  if v4 == 0 then goto L11b820;
  #L11b814.  v1:= v1 + -1;
  #L11b818.  v2:= 45I;
  #L11b81c.  v6[v1]:= v2 @kind byte;
  #L11b820.  v1:= v5.`b.n.c` @type ^`int`;
  #L11b824.  v1:= v1 + v0 @kind int;
  #L11b826.  v5.`b.n.c` @type ^`int` := v1;
  #L11b82a.  v2:= v11.`b.c.b` @type ^`long` @kind wide;
  #L11b82e.  v0:= (`long`) v0 @kind i2l;
  #L11b830.  v0:= v0 + v2 @kind long;
  #L11b832.  v11.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11b836.  goto L11b610;
  #L11b83a.  v4:= v0;
  #L11b83c.  v2:= v12 @kind wide;
  #L11b83e.  goto L11b640;
}
procedure `b.d` `h`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.h:(I)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11b854.  call temp:= `c`(v1, v2) @signature `Lb/c;.c:(I)Lb/c;` @kind virtual;
  #L11b85a.  v0:= temp @kind object;
  #L11b85c.  return v0 @kind object;
}
procedure `int` `hashCode`(`b.c` v5 @kind this) @signature `Lb/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11b870.  v1:= v5.`b.c.a` @type ^`b.n` @kind object;
  #L11b874.  if v1 != 0 then goto L11b87c;
  #L11b878.  v0:= 0I;
  #L11b87a.  return v0;
  #L11b87c.  v0:= 1I;
  #L11b87e.  v2:= v1.`b.n.b` @type ^`int`;
  #L11b882.  v4:= v1.`b.n.c` @type ^`int`;
  #L11b886.  if v2 >= v4 then goto L11b8a2;
  #L11b88a.  v0:= v0 * 31;
  #L11b88e.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11b892.  v3:= v3[v2] @kind byte;
  #L11b896.  v3:= v3 + v0 @kind int;
  #L11b898.  v0:= v2 + 1;
  #L11b89c.  v2:= v0;
  #L11b89e.  v0:= v3;
  #L11b8a0.  goto L11b886;
  #L11b8a2.  v1:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L11b8a6.  v2:= v5.`b.c.a` @type ^`b.n` @kind object;
  #L11b8aa.  if v1 != v2 then goto L11b87e;
  #L11b8ae.  goto L11b87a;
}
procedure `b.c` `i`(`b.c` v9 @kind this, `long` v10 ) @signature `Lb/c;.i:(J)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11b8c0.  v0:= 0L;
  #L11b8c4.  v0:= lcmp(v10, v0);
  #L11b8c8.  if v0 != 0 then goto L11b8da;
  #L11b8cc.  v0:= 48I;
  #L11b8d0.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11b8d6.  v9:= temp @kind object;
  #L11b8d8.  return v9 @kind object;
  #L11b8da.  call temp:= `highestOneBit`(v10) @signature `Ljava/lang/Long;.highestOneBit:(J)J` @kind static;
  #L11b8e0.  v0:= temp @kind wide;
  #L11b8e2.  call temp:= `numberOfTrailingZeros`(v0) @signature `Ljava/lang/Long;.numberOfTrailingZeros:(J)I` @kind static;
  #L11b8e8.  v0:= temp;
  #L11b8ea.  v0:= v0 / 4;
  #L11b8ee.  v1:= v0 + 1;
  #L11b8f2.  call temp:= `e`(v9, v1) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11b8f8.  v2:= temp @kind object;
  #L11b8fa.  v3:= v2.`b.n.a` @type ^`byte`[] @kind object;
  #L11b8fe.  v0:= v2.`b.n.c` @type ^`int`;
  #L11b902.  v0:= v0 + v1 @kind int;
  #L11b904.  v0:= v0 + -1;
  #L11b908.  v4:= v2.`b.n.c` @type ^`int`;
  #L11b90c.  if v0 < v4 then goto L11b92e;
  #L11b910.  v5:= `@@b.c.c` @type ^`byte`[] @kind object;
  #L11b914.  v6:= 15L;
  #L11b918.  v6:= v6 ^& v10 @kind long;
  #L11b91a.  v6:= (`int`) v6 @kind l2i;
  #L11b91c.  v5:= v5[v6] @kind byte;
  #L11b920.  v3[v0]:= v5 @kind byte;
  #L11b924.  v5:= 4I;
  #L11b926.  v10:= v10 ^>> v5 @kind long;
  #L11b928.  v0:= v0 + -1;
  #L11b92c.  goto L11b90c;
  #L11b92e.  v0:= v2.`b.n.c` @type ^`int`;
  #L11b932.  v0:= v0 + v1 @kind int;
  #L11b934.  v2.`b.n.c` @type ^`int` := v0;
  #L11b938.  v2:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11b93c.  v0:= (`long`) v1 @kind i2l;
  #L11b93e.  v0:= v0 + v2 @kind long;
  #L11b940.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11b944.  goto L11b8d8;
}
procedure `b.d` `i`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.i:(I)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11b958.  call temp:= `b`(v1, v2) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11b95e.  v0:= temp @kind object;
  #L11b960.  return v0 @kind object;
}
procedure `short` `i`(`b.c` v10 @kind this) @signature `Lb/c;.i:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11b974.  v8:= 2L;
  #L11b978.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11b97c.  v0:= lcmp(v0, v8);
  #L11b980.  if v0 >= 0 then goto L11b9ba;
  #L11b984.  v0:= new `java.lang.IllegalStateException`;
  #L11b988.  v1:= new `java.lang.StringBuilder`;
  #L11b98c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11b992.  v2:= "size < 2: " @kind object;
  #L11b996.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b99c.  v1:= temp @kind object;
  #L11b99e.  v2:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11b9a2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b9a8.  v1:= temp @kind object;
  #L11b9aa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11b9b0.  v1:= temp @kind object;
  #L11b9b2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b9b8.  throw v0;
  #L11b9ba.  v0:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L11b9be.  v1:= v0.`b.n.b` @type ^`int`;
  #L11b9c2.  v2:= v0.`b.n.c` @type ^`int`;
  #L11b9c6.  v3:= v2 - v1 @kind int;
  #L11b9ca.  v4:= 2I;
  #L11b9cc.  if v3 >= v4 then goto L11b9f2;
  #L11b9d0.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11b9d6.  v0:= temp;
  #L11b9d8.  v0:= v0 ^& 255;
  #L11b9dc.  v0:= v0 ^< 8;
  #L11b9e0.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11b9e6.  v1:= temp;
  #L11b9e8.  v1:= v1 ^& 255;
  #L11b9ec.  v0:= v0 ^| v1 @kind int;
  #L11b9ee.  v0:= (`short`) v0 @kind i2s;
  #L11b9f0.  return v0;
  #L11b9f2.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11b9f6.  v4:= v1 + 1;
  #L11b9fa.  v1:= v3[v1] @kind byte;
  #L11b9fe.  v1:= v1 ^& 255;
  #L11ba02.  v1:= v1 ^< 8;
  #L11ba06.  v5:= v4 + 1;
  #L11ba0a.  v3:= v3[v4] @kind byte;
  #L11ba0e.  v3:= v3 ^& 255;
  #L11ba12.  v1:= v1 ^| v3 @kind int;
  #L11ba14.  v6:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11ba18.  v6:= v6 - v8 @kind long;
  #L11ba1a.  v10.`b.c.b` @type ^`long` := v6 @kind wide;
  #L11ba1e.  if v5 != v2 then goto L11ba38;
  #L11ba22.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11ba28.  v2:= temp @kind object;
  #L11ba2a.  v10.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L11ba2e.  call `a`(v0) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11ba34.  v0:= (`short`) v1 @kind i2s;
  #L11ba36.  goto L11b9f0;
  #L11ba38.  v0.`b.n.b` @type ^`int` := v5;
  #L11ba3c.  goto L11ba34;
}
procedure `int` `j`(`b.c` v10 @kind this) @signature `Lb/c;.j:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11ba50.  v8:= 4L;
  #L11ba54.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11ba58.  v0:= lcmp(v0, v8);
  #L11ba5c.  if v0 >= 0 then goto L11ba96;
  #L11ba60.  v0:= new `java.lang.IllegalStateException`;
  #L11ba64.  v1:= new `java.lang.StringBuilder`;
  #L11ba68.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11ba6e.  v2:= "size < 4: " @kind object;
  #L11ba72.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ba78.  v1:= temp @kind object;
  #L11ba7a.  v2:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11ba7e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ba84.  v1:= temp @kind object;
  #L11ba86.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11ba8c.  v1:= temp @kind object;
  #L11ba8e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ba94.  throw v0;
  #L11ba96.  v1:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L11ba9a.  v0:= v1.`b.n.b` @type ^`int`;
  #L11ba9e.  v2:= v1.`b.n.c` @type ^`int`;
  #L11baa2.  v3:= v2 - v0 @kind int;
  #L11baa6.  v4:= 4I;
  #L11baa8.  if v3 >= v4 then goto L11baf0;
  #L11baac.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11bab2.  v0:= temp;
  #L11bab4.  v0:= v0 ^& 255;
  #L11bab8.  v0:= v0 ^< 24;
  #L11babc.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11bac2.  v1:= temp;
  #L11bac4.  v1:= v1 ^& 255;
  #L11bac8.  v1:= v1 ^< 16;
  #L11bacc.  v0:= v0 ^| v1 @kind int;
  #L11bace.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11bad4.  v1:= temp;
  #L11bad6.  v1:= v1 ^& 255;
  #L11bada.  v1:= v1 ^< 8;
  #L11bade.  v0:= v0 ^| v1 @kind int;
  #L11bae0.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11bae6.  v1:= temp;
  #L11bae8.  v1:= v1 ^& 255;
  #L11baec.  v0:= v0 ^| v1 @kind int;
  #L11baee.  return v0;
  #L11baf0.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11baf4.  v4:= v0 + 1;
  #L11baf8.  v0:= v3[v0] @kind byte;
  #L11bafc.  v0:= v0 ^& 255;
  #L11bb00.  v0:= v0 ^< 24;
  #L11bb04.  v5:= v4 + 1;
  #L11bb08.  v4:= v3[v4] @kind byte;
  #L11bb0c.  v4:= v4 ^& 255;
  #L11bb10.  v4:= v4 ^< 16;
  #L11bb14.  v0:= v0 ^| v4 @kind int;
  #L11bb16.  v4:= v5 + 1;
  #L11bb1a.  v5:= v3[v5] @kind byte;
  #L11bb1e.  v5:= v5 ^& 255;
  #L11bb22.  v5:= v5 ^< 8;
  #L11bb26.  v0:= v0 ^| v5 @kind int;
  #L11bb28.  v5:= v4 + 1;
  #L11bb2c.  v3:= v3[v4] @kind byte;
  #L11bb30.  v3:= v3 ^& 255;
  #L11bb34.  v0:= v0 ^| v3 @kind int;
  #L11bb36.  v6:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11bb3a.  v6:= v6 - v8 @kind long;
  #L11bb3c.  v10.`b.c.b` @type ^`long` := v6 @kind wide;
  #L11bb40.  if v5 != v2 then goto L11bb58;
  #L11bb44.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11bb4a.  v2:= temp @kind object;
  #L11bb4c.  v10.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L11bb50.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11bb56.  goto L11baee;
  #L11bb58.  v1.`b.n.b` @type ^`int` := v5;
  #L11bb5c.  goto L11baee;
}
procedure `b.d` `j`(`b.c` v1 @kind this, `long` v2 ) @signature `Lb/c;.j:(J)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11bb70.  call temp:= `i`(v1, v2) @signature `Lb/c;.i:(J)Lb/c;` @kind virtual;
  #L11bb76.  v0:= temp @kind object;
  #L11bb78.  return v0 @kind object;
}
procedure `b.d` `k`(`b.c` v1 @kind this, `long` v2 ) @signature `Lb/c;.k:(J)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11bb8c.  call temp:= `h`(v1, v2) @signature `Lb/c;.h:(J)Lb/c;` @kind virtual;
  #L11bb92.  v0:= temp @kind object;
  #L11bb94.  return v0 @kind object;
}
procedure `short` `k`(`b.c` v1 @kind this) @signature `Lb/c;.k:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11bba8.  call temp:= `i`(v1) @signature `Lb/c;.i:()S` @kind virtual;
  #L11bbae.  v0:= temp;
  #L11bbb0.  call temp:= `a`(v0) @signature `Lb/t;.a:(S)S` @kind static;
  #L11bbb6.  v0:= temp;
  #L11bbb8.  return v0;
}
procedure `int` `l`(`b.c` v1 @kind this) @signature `Lb/c;.l:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11bbcc.  call temp:= `j`(v1) @signature `Lb/c;.j:()I` @kind virtual;
  #L11bbd2.  v0:= temp;
  #L11bbd4.  call temp:= `a`(v0) @signature `Lb/t;.a:(I)I` @kind static;
  #L11bbda.  v0:= temp;
  #L11bbdc.  return v0;
}
procedure `long` `m`(`b.c` v18 @kind this) @signature `Lb/c;.m:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L11bbf0.  v0:= v18 @kind object;
  #L11bbf4.  v2:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11bbf8.  v4:= 0L;
  #L11bbfc.  v2:= lcmp(v2, v4);
  #L11bc00.  if v2 != 0 then goto L11bc14;
  #L11bc04.  v2:= new `java.lang.IllegalStateException`;
  #L11bc08.  v3:= "size == 0" @kind object;
  #L11bc0c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11bc12.  throw v2;
  #L11bc14.  v4:= 0L;
  #L11bc18.  v3:= 0I;
  #L11bc1a.  v2:= 0I;
  #L11bc1c.  v0:= v18 @kind object;
  #L11bc20.  v10:= v0.`b.c.a` @type ^`b.n` @kind object;
  #L11bc24.  v11:= v10.`b.n.a` @type ^`byte`[] @kind object;
  #L11bc28.  v6:= v10.`b.n.b` @type ^`int`;
  #L11bc2c.  v12:= v10.`b.n.c` @type ^`int`;
  #L11bc30.  v7:= v6;
  #L11bc32.  if v7 >= v12 then goto L11bd28;
  #L11bc36.  v8:= v11[v7] @kind byte;
  #L11bc3a.  v6:= 48I;
  #L11bc3e.  if v8 < v6 then goto L11bcb4;
  #L11bc42.  v6:= 57I;
  #L11bc46.  if v8 > v6 then goto L11bcb4;
  #L11bc4a.  v6:= v8 + -48;
  #L11bc4e.  v14:= -3.105036184601418E231D;
  #L11bc52.  v14:= v14 ^& v4 @kind long;
  #L11bc54.  v16:= 0L;
  #L11bc58.  v9:= lcmp(v14, v16);
  #L11bc5c.  if v9 == 0 then goto L11bd6a;
  #L11bc60.  v2:= new `b.c`;
  #L11bc64.  call `<init>`(v2) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11bc6a.  call temp:= `i`(v2, v4) @signature `Lb/c;.i:(J)Lb/c;` @kind virtual;
  #L11bc70.  v2:= temp @kind object;
  #L11bc72.  call temp:= `b`(v2, v8) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11bc78.  v2:= temp @kind object;
  #L11bc7a.  v3:= new `java.lang.NumberFormatException`;
  #L11bc7e.  v4:= new `java.lang.StringBuilder`;
  #L11bc82.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11bc88.  v5:= "Number too large: " @kind object;
  #L11bc8c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bc92.  v4:= temp @kind object;
  #L11bc94.  call temp:= `o`(v2) @signature `Lb/c;.o:()Ljava/lang/String;` @kind virtual;
  #L11bc9a.  v2:= temp @kind object;
  #L11bc9c.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bca2.  v2:= temp @kind object;
  #L11bca4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11bcaa.  v2:= temp @kind object;
  #L11bcac.  call `<init>`(v3, v2) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11bcb2.  throw v3;
  #L11bcb4.  v6:= 97I;
  #L11bcb8.  if v8 < v6 then goto L11bcce;
  #L11bcbc.  v6:= 102I;
  #L11bcc0.  if v8 > v6 then goto L11bcce;
  #L11bcc4.  v6:= v8 + -97;
  #L11bcc8.  v6:= v6 + 10;
  #L11bccc.  goto L11bc4e;
  #L11bcce.  v6:= 65I;
  #L11bcd2.  if v8 < v6 then goto L11bce8;
  #L11bcd6.  v6:= 70I;
  #L11bcda.  if v8 > v6 then goto L11bce8;
  #L11bcde.  v6:= v8 + -65;
  #L11bce2.  v6:= v6 + 10;
  #L11bce6.  goto L11bc4e;
  #L11bce8.  if v3 != 0 then goto L11bd26;
  #L11bcec.  v2:= new `java.lang.NumberFormatException`;
  #L11bcf0.  v3:= new `java.lang.StringBuilder`;
  #L11bcf4.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11bcfa.  v4:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L11bcfe.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bd04.  v3:= temp @kind object;
  #L11bd06.  call temp:= `toHexString`(v8) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L11bd0c.  v4:= temp @kind object;
  #L11bd0e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bd14.  v3:= temp @kind object;
  #L11bd16.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11bd1c.  v3:= temp @kind object;
  #L11bd1e.  call `<init>`(v2, v3) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11bd24.  throw v2;
  #L11bd26.  v2:= 1I;
  #L11bd28.  if v7 != v12 then goto L11bd82;
  #L11bd2c.  call temp:= `a`(v10) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11bd32.  v6:= temp @kind object;
  #L11bd34.  v0:= v18 @kind object;
  #L11bd38.  v0.`b.c.a` @type ^`b.n` := v6 @kind object;
  #L11bd3c.  call `a`(v10) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11bd42.  if v2 != 0 then goto L11bd52;
  #L11bd46.  v0:= v18 @kind object;
  #L11bd4a.  v6:= v0.`b.c.a` @type ^`b.n` @kind object;
  #L11bd4e.  if v6 != 0 then goto L11bc1c;
  #L11bd52.  v0:= v18 @kind object;
  #L11bd56.  v6:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11bd5a.  v2:= (`long`) v3 @kind i2l;
  #L11bd5c.  v2:= v6 - v2 @kind long;
  #L11bd60.  v0:= v18 @kind object;
  #L11bd64.  v0.`b.c.b` @type ^`long` := v2 @kind wide;
  #L11bd68.  return v4 @kind wide;
  #L11bd6a.  v8:= 4I;
  #L11bd6c.  v4:= v4 ^< v8 @kind long;
  #L11bd6e.  v8:= (`long`) v6 @kind i2l;
  #L11bd70.  v8:= v8 ^| v4 @kind long;
  #L11bd72.  v4:= v7 + 1;
  #L11bd76.  v3:= v3 + 1;
  #L11bd7a.  v7:= v4;
  #L11bd7c.  v4:= v8 @kind wide;
  #L11bd7e.  goto L11bc32;
  #L11bd82.  v10.`b.n.b` @type ^`int` := v7;
  #L11bd86.  goto L11bd42;
}
procedure `b.f` `n`(`b.c` v2 @kind this) @signature `Lb/c;.n:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11bd98.  v0:= new `b.f`;
  #L11bd9c.  call temp:= `q`(v2) @signature `Lb/c;.q:()[B` @kind virtual;
  #L11bda2.  v1:= temp @kind object;
  #L11bda4.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11bdaa.  return v0 @kind object;
}
procedure `java.lang.String` `o`(`b.c` v3 @kind this) @signature `Lb/c;.o:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L11bdbc.  v0:= v3.`b.c.b` @type ^`long` @kind wide;
  #L11bdc0.  v2:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L11bdc4.  call temp:= `a`(v3, v0, v2) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L11bdca.  v0:= temp @kind object;
  #L11bdcc.  return v0 @kind object;
  #L11bdce.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L11bdd0.  v1:= new `java.lang.AssertionError`;
  #L11bdd4.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11bdda.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L11bdce;
}
procedure `java.lang.String` `p`(`b.c` v8 @kind this) @signature `Lb/c;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11bdfc.  v0:= 10I;
  #L11be00.  call temp:= `a`(v8, v0) @signature `Lb/c;.a:(B)J` @kind virtual;
  #L11be06.  v0:= temp @kind wide;
  #L11be08.  v2:= -1L;
  #L11be0c.  v2:= lcmp(v0, v2);
  #L11be10.  if v2 != 0 then goto L11bea4;
  #L11be14.  v1:= new `b.c`;
  #L11be18.  call `<init>`(v1) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11be1e.  v2:= 0L;
  #L11be22.  v4:= 32L;
  #L11be26.  v6:= v8.`b.c.b` @type ^`long` @kind wide;
  #L11be2a.  call temp:= `min`(v4, v6) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11be30.  v4:= temp @kind wide;
  #L11be32.  v0:= v8 @kind object;
  #L11be34.  call temp:= `a`(v0, v1, v2, v4) @signature `Lb/c;.a:(Lb/c;JJ)Lb/c;` @kind virtual;
  #L11be3a.  v0:= new `java.io.EOFException`;
  #L11be3e.  v2:= new `java.lang.StringBuilder`;
  #L11be42.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11be48.  v3:= "\\n not found: size=" @kind object;
  #L11be4c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11be52.  v2:= temp @kind object;
  #L11be54.  call temp:= `b`(v8) @signature `Lb/c;.b:()J` @kind virtual;
  #L11be5a.  v4:= temp @kind wide;
  #L11be5c.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11be62.  v2:= temp @kind object;
  #L11be64.  v3:= " content=" @kind object;
  #L11be68.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11be6e.  v2:= temp @kind object;
  #L11be70.  call temp:= `n`(v1) @signature `Lb/c;.n:()Lb/f;` @kind virtual;
  #L11be76.  v1:= temp @kind object;
  #L11be78.  call temp:= `e`(v1) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L11be7e.  v1:= temp @kind object;
  #L11be80.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11be86.  v1:= temp @kind object;
  #L11be88.  v2:= "…" @kind object;
  #L11be8c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11be92.  v1:= temp @kind object;
  #L11be94.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11be9a.  v1:= temp @kind object;
  #L11be9c.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11bea2.  throw v0;
  #L11bea4.  call temp:= `e`(v8, v0) @signature `Lb/c;.e:(J)Ljava/lang/String;` @kind virtual;
  #L11beaa.  v0:= temp @kind object;
  #L11beac.  return v0 @kind object;
}
procedure `byte`[] `q`(`b.c` v2 @kind this) @signature `Lb/c;.q:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L11bec0.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11bec4.  call temp:= `f`(v2, v0) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #Try_end0.  
  #L11beca.  v0:= temp @kind object;
  #L11becc.  return v0 @kind object;
  #L11bece.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L11bed0.  v1:= new `java.lang.AssertionError`;
  #L11bed4.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11beda.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L11bece;
}
procedure `void` `r`(`b.c` v2 @kind this) @signature `Lb/c;.r:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L11befc.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11bf00.  call `g`(v2, v0) @signature `Lb/c;.g:(J)V` @kind virtual;
  #Try_end0.  
  #L11bf06.  return @kind void;
  #L11bf08.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L11bf0a.  v1:= new `java.lang.AssertionError`;
  #L11bf0e.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11bf14.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L11bf08;
}
procedure `b.c` `s`(`b.c` v6 @kind this) @signature `Lb/c;.s:()Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11bf38.  v1:= new `b.c`;
  #L11bf3c.  call `<init>`(v1) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11bf42.  v2:= v6.`b.c.b` @type ^`long` @kind wide;
  #L11bf46.  v4:= 0L;
  #L11bf4a.  v0:= lcmp(v2, v4);
  #L11bf4e.  if v0 != 0 then goto L11bf56;
  #L11bf52.  v0:= v1 @kind object;
  #L11bf54.  return v0 @kind object;
  #L11bf56.  v0:= new `b.n`;
  #L11bf5a.  v2:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L11bf5e.  call `<init>`(v0, v2) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L11bf64.  v1.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L11bf68.  v0:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L11bf6c.  v2:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L11bf70.  v3:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L11bf74.  v2.`b.n.g` @type ^`b.n` := v3 @kind object;
  #L11bf78.  v0.`b.n.f` @type ^`b.n` := v3 @kind object;
  #L11bf7c.  v0:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L11bf80.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11bf84.  v2:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L11bf88.  if v0 == v2 then goto L11bfaa;
  #L11bf8c.  v2:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L11bf90.  v2:= v2.`b.n.g` @type ^`b.n` @kind object;
  #L11bf94.  v3:= new `b.n`;
  #L11bf98.  call `<init>`(v3, v0) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L11bf9e.  call temp:= `a`(v2, v3) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11bfa4.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11bfa8.  goto L11bf84;
  #L11bfaa.  v2:= v6.`b.c.b` @type ^`long` @kind wide;
  #L11bfae.  v1.`b.c.b` @type ^`long` := v2 @kind wide;
  #L11bfb2.  v0:= v1 @kind object;
  #L11bfb4.  goto L11bf54;
}
procedure `b.f` `t`(`b.c` v4 @kind this) @signature `Lb/c;.t:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11bfc8.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11bfcc.  v2:= 2147483647L;
  #L11bfd2.  v0:= lcmp(v0, v2);
  #L11bfd6.  if v0 <= 0 then goto L11c010;
  #L11bfda.  v0:= new `java.lang.IllegalArgumentException`;
  #L11bfde.  v1:= new `java.lang.StringBuilder`;
  #L11bfe2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11bfe8.  v2:= "size > Integer.MAX_VALUE: " @kind object;
  #L11bfec.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bff2.  v1:= temp @kind object;
  #L11bff4.  v2:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11bff8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bffe.  v1:= temp @kind object;
  #L11c000.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c006.  v1:= temp @kind object;
  #L11c008.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c00e.  throw v0;
  #L11c010.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11c014.  v0:= (`int`) v0 @kind l2i;
  #L11c016.  call temp:= `f`(v4, v0) @signature `Lb/c;.f:(I)Lb/f;` @kind virtual;
  #L11c01c.  v0:= temp @kind object;
  #L11c01e.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`b.c` v1 @kind this) @signature `Lb/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c030.  call temp:= `t`(v1) @signature `Lb/c;.t:()Lb/f;` @kind virtual;
  #L11c036.  v0:= temp @kind object;
  #L11c038.  call temp:= `toString`(v0) @signature `Lb/f;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c03e.  v0:= temp @kind object;
  #L11c040.  return v0 @kind object;
}
procedure `b.d` `u`(`b.c` v1 @kind this) @signature `Lb/c;.u:()Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11c054.  call temp:= `d`(v1) @signature `Lb/c;.d:()Lb/c;` @kind virtual;
  #L11c05a.  v0:= temp @kind object;
  #L11c05c.  return v0 @kind object;
}
