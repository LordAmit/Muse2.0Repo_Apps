record `b.g` @kind class @AccessFlag PUBLIC_ABSTRACT extends `b.r` @kind interface {
  `b.r` `b.g.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`b.g` v2 @kind this, `b.r` v3 @kind object) @signature `Lb/g;.<init>:(Lb/r;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07d7e4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07d7ea.  if v3 != 0 then goto L07d7fe;
  #L07d7ee.  v0:= new `java.lang.IllegalArgumentException`;
  #L07d7f2.  v1:= "delegate == null" @kind object;
  #L07d7f6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07d7fc.  throw v0;
  #L07d7fe.  v2.`b.g.a` @type ^`b.r` := v3 @kind object;
  #L07d802.  return @kind void;
}
procedure `long` `a`(`b.g` v2 @kind this, `b.c` v3 @kind object, `long` v4 ) @signature `Lb/g;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07d814.  v0:= v2.`b.g.a` @type ^`b.r` @kind object;
  #L07d818.  call temp:= `a`(v0, v3, v4) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L07d81e.  v0:= temp @kind wide;
  #L07d820.  return v0 @kind wide;
}
procedure `b.s` `a`(`b.g` v1 @kind this) @signature `Lb/g;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07d834.  v0:= v1.`b.g.a` @type ^`b.r` @kind object;
  #L07d838.  call temp:= `a`(v0) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L07d83e.  v0:= temp @kind object;
  #L07d840.  return v0 @kind object;
}
procedure `void` `close`(`b.g` v1 @kind this) @signature `Lb/g;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07d854.  v0:= v1.`b.g.a` @type ^`b.r` @kind object;
  #L07d858.  call `close`(v0) @signature `Lb/r;.close:()V` @kind interface;
  #L07d85e.  return @kind void;
}
procedure `java.lang.String` `toString`(`b.g` v2 @kind this) @signature `Lb/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07d870.  v0:= new `java.lang.StringBuilder`;
  #L07d874.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07d87a.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L07d880.  v1:= temp @kind object;
  #L07d882.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L07d888.  v1:= temp @kind object;
  #L07d88a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07d890.  v0:= temp @kind object;
  #L07d892.  v1:= "(" @kind object;
  #L07d896.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07d89c.  v0:= temp @kind object;
  #L07d89e.  v1:= v2.`b.g.a` @type ^`b.r` @kind object;
  #L07d8a2.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L07d8a8.  v1:= temp @kind object;
  #L07d8aa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07d8b0.  v0:= temp @kind object;
  #L07d8b2.  v1:= ")" @kind object;
  #L07d8b6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07d8bc.  v0:= temp @kind object;
  #L07d8be.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07d8c4.  v0:= temp @kind object;
  #L07d8c6.  return v0 @kind object;
}
