record `org.b.a.a.h` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b` @kind class {
  `int` `org.b.a.a.h.a` @AccessFlag PRIVATE;
  `int` `org.b.a.a.h.b` @AccessFlag PRIVATE;
  `byte` `org.b.a.a.h.c` @AccessFlag PRIVATE;
  `byte` `org.b.a.a.h.d` @AccessFlag PRIVATE;
  `org.b.a.a.b` `org.b.a.a.h.e` @AccessFlag PRIVATE;
  `org.b.a.a.b` `org.b.a.a.h.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.b.a.a.h` v1 @kind this) @signature `Lorg/b/a/a/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L18ef34.  v0:= 0I;
  #L18ef36.  call `<init>`(v1) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L18ef3c.  v1.`org.b.a.a.h.e` @type ^`org.b.a.a.b` := v0 @kind object;
  #L18ef40.  v1.`org.b.a.a.h.f` @type ^`org.b.a.a.b` := v0 @kind object;
  #L18ef44.  call `d`(v1) @signature `Lorg/b/a/a/h;.d:()V` @kind virtual;
  #L18ef4a.  return @kind void;
}
procedure `boolean` `a`(`byte` v2 ) @signature `Lorg/b/a/a/h;.a:(B)Z` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;

  #L18ef5c.  v0:= v2 ^& 255;
  #L18ef60.  v1:= 234I;
  #L18ef64.  if v0 == v1 then goto L18ef88;
  #L18ef68.  v1:= 237I;
  #L18ef6c.  if v0 == v1 then goto L18ef88;
  #L18ef70.  v1:= 239I;
  #L18ef74.  if v0 == v1 then goto L18ef88;
  #L18ef78.  v1:= 243I;
  #L18ef7c.  if v0 == v1 then goto L18ef88;
  #L18ef80.  v1:= 245I;
  #L18ef84.  if v0 != v1 then goto L18ef8c;
  #L18ef88.  v0:= 1I;
  #L18ef8a.  return v0;
  #L18ef8c.  v0:= 0I;
  #L18ef8e.  goto L18ef8a;
}
procedure `boolean` `b`(`byte` v2 ) @signature `Lorg/b/a/a/h;.b:(B)Z` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;

  #L18efa0.  v0:= v2 ^& 255;
  #L18efa4.  v1:= 235I;
  #L18efa8.  if v0 == v1 then goto L18efc4;
  #L18efac.  v1:= 238I;
  #L18efb0.  if v0 == v1 then goto L18efc4;
  #L18efb4.  v1:= 240I;
  #L18efb8.  if v0 == v1 then goto L18efc4;
  #L18efbc.  v1:= 244I;
  #L18efc0.  if v0 != v1 then goto L18efc8;
  #L18efc4.  v0:= 1I;
  #L18efc6.  return v0;
  #L18efc8.  v0:= 0I;
  #L18efca.  goto L18efc6;
}
procedure `java.lang.String` `a`(`org.b.a.a.h` v3 @kind this) @signature `Lorg/b/a/a/h;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L18efdc.  v0:= v3.`org.b.a.a.h.a` @type ^`int`;
  #L18efe0.  v1:= v3.`org.b.a.a.h.b` @type ^`int`;
  #L18efe4.  v0:= v0 - v1 @kind int;
  #L18efe6.  v1:= 5I;
  #L18efe8.  if v0 < v1 then goto L18eff2;
  #L18efec.  v0:= `@@org.b.a.b.t` @type ^`java.lang.String` @kind object;
  #L18eff0.  return v0 @kind object;
  #L18eff2.  v1:= -5I;
  #L18eff4.  if v0 > v1 then goto L18effe;
  #L18eff8.  v0:= `@@org.b.a.b.f` @type ^`java.lang.String` @kind object;
  #L18effc.  goto L18eff0;
  #L18effe.  v1:= v3.`org.b.a.a.h.e` @type ^`org.b.a.a.b` @kind object;
  #L18f002.  call temp:= `b`(v1) @signature `Lorg/b/a/a/b;.b:()F` @kind virtual;
  #L18f008.  v1:= temp;
  #L18f00a.  v2:= v3.`org.b.a.a.h.f` @type ^`org.b.a.a.b` @kind object;
  #L18f00e.  call temp:= `b`(v2) @signature `Lorg/b/a/a/b;.b:()F` @kind virtual;
  #L18f014.  v2:= temp;
  #L18f016.  v1:= v1 - v2 @kind float;
  #L18f018.  v2:= 1008981770I;
  #L18f01e.  v2:= fcmpl(v1, v2);
  #L18f022.  if v2 <= 0 then goto L18f02c;
  #L18f026.  v0:= `@@org.b.a.b.t` @type ^`java.lang.String` @kind object;
  #L18f02a.  goto L18eff0;
  #L18f02c.  v2:= -1138501878I;
  #L18f032.  v1:= fcmpg(v1, v2);
  #L18f036.  if v1 >= 0 then goto L18f040;
  #L18f03a.  v0:= `@@org.b.a.b.f` @type ^`java.lang.String` @kind object;
  #L18f03e.  goto L18eff0;
  #L18f040.  if v0 >= 0 then goto L18f04a;
  #L18f044.  v0:= `@@org.b.a.b.f` @type ^`java.lang.String` @kind object;
  #L18f048.  goto L18eff0;
  #L18f04a.  v0:= `@@org.b.a.b.t` @type ^`java.lang.String` @kind object;
  #L18f04e.  goto L18eff0;
}
procedure `org.b.a.a.b$a` `a`(`org.b.a.a.h` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lorg/b/a/a/h;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L18f060.  v3:= 32I;
  #L18f064.  call temp:= `c`(v4) @signature `Lorg/b/a/a/h;.c:()Lorg/b/a/a/b$a;` @kind virtual;
  #L18f06a.  v0:= temp @kind object;
  #L18f06c.  v1:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L18f070.  if v0 != v1 then goto L18f07a;
  #L18f074.  v0:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L18f078.  return v0 @kind object;
  #L18f07a.  v0:= v6 + v7 @kind int;
  #L18f07e.  if v6 >= v0 then goto L18f108;
  #L18f082.  v1:= v5[v6] @kind byte;
  #L18f086.  if v1 != v3 then goto L18f0de;
  #L18f08a.  v2:= v4.`org.b.a.a.h.d` @type ^`byte` @kind byte;
  #L18f08e.  if v2 == v3 then goto L18f0ae;
  #L18f092.  v2:= v4.`org.b.a.a.h.c` @type ^`byte` @kind byte;
  #L18f096.  call temp:= `a`(v2) @signature `Lorg/b/a/a/h;.a:(B)Z` @kind static;
  #L18f09c.  v2:= temp;
  #L18f09e.  if v2 == 0 then goto L18f0c0;
  #L18f0a2.  v2:= v4.`org.b.a.a.h.a` @type ^`int`;
  #L18f0a6.  v2:= v2 + 1;
  #L18f0aa.  v4.`org.b.a.a.h.a` @type ^`int` := v2;
  #L18f0ae.  v2:= v4.`org.b.a.a.h.c` @type ^`byte` @kind byte;
  #L18f0b2.  v4.`org.b.a.a.h.d` @type ^`byte` := v2 @kind byte;
  #L18f0b6.  v4.`org.b.a.a.h.c` @type ^`byte` := v1 @kind byte;
  #L18f0ba.  v6:= v6 + 1;
  #L18f0be.  goto L18f07e;
  #L18f0c0.  v2:= v4.`org.b.a.a.h.c` @type ^`byte` @kind byte;
  #L18f0c4.  call temp:= `b`(v2) @signature `Lorg/b/a/a/h;.b:(B)Z` @kind static;
  #L18f0ca.  v2:= temp;
  #L18f0cc.  if v2 == 0 then goto L18f0ae;
  #L18f0d0.  v2:= v4.`org.b.a.a.h.b` @type ^`int`;
  #L18f0d4.  v2:= v2 + 1;
  #L18f0d8.  v4.`org.b.a.a.h.b` @type ^`int` := v2;
  #L18f0dc.  goto L18f0ae;
  #L18f0de.  v2:= v4.`org.b.a.a.h.d` @type ^`byte` @kind byte;
  #L18f0e2.  if v2 != v3 then goto L18f0ae;
  #L18f0e6.  v2:= v4.`org.b.a.a.h.c` @type ^`byte` @kind byte;
  #L18f0ea.  call temp:= `a`(v2) @signature `Lorg/b/a/a/h;.a:(B)Z` @kind static;
  #L18f0f0.  v2:= temp;
  #L18f0f2.  if v2 == 0 then goto L18f0ae;
  #L18f0f6.  if v1 == v3 then goto L18f0ae;
  #L18f0fa.  v2:= v4.`org.b.a.a.h.b` @type ^`int`;
  #L18f0fe.  v2:= v2 + 1;
  #L18f102.  v4.`org.b.a.a.h.b` @type ^`int` := v2;
  #L18f106.  goto L18f0ae;
  #L18f108.  v0:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L18f10c.  goto L18f078;
}
procedure `void` `a`(`org.b.a.a.h` v0 @kind this, `org.b.a.a.b` v1 @kind object, `org.b.a.a.b` v2 @kind object) @signature `Lorg/b/a/a/h;.a:(Lorg/b/a/a/b;Lorg/b/a/a/b;)V` @AccessFlag PUBLIC {
    temp;

  #L18f120.  v0.`org.b.a.a.h.e` @type ^`org.b.a.a.b` := v1 @kind object;
  #L18f124.  v0.`org.b.a.a.h.f` @type ^`org.b.a.a.b` := v2 @kind object;
  #L18f128.  return @kind void;
}
procedure `float` `b`(`org.b.a.a.h` v1 @kind this) @signature `Lorg/b/a/a/h;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18f13c.  v0:= 0I;
  #L18f13e.  return v0;
}
procedure `org.b.a.a.b$a` `c`(`org.b.a.a.h` v2 @kind this) @signature `Lorg/b/a/a/h;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L18f150.  v0:= v2.`org.b.a.a.h.e` @type ^`org.b.a.a.b` @kind object;
  #L18f154.  call temp:= `c`(v0) @signature `Lorg/b/a/a/b;.c:()Lorg/b/a/a/b$a;` @kind virtual;
  #L18f15a.  v0:= temp @kind object;
  #L18f15c.  v1:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L18f160.  if v0 != v1 then goto L18f17e;
  #L18f164.  v0:= v2.`org.b.a.a.h.f` @type ^`org.b.a.a.b` @kind object;
  #L18f168.  call temp:= `c`(v0) @signature `Lorg/b/a/a/b;.c:()Lorg/b/a/a/b$a;` @kind virtual;
  #L18f16e.  v0:= temp @kind object;
  #L18f170.  v1:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L18f174.  if v0 != v1 then goto L18f17e;
  #L18f178.  v0:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L18f17c.  return v0 @kind object;
  #L18f17e.  v0:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L18f182.  goto L18f17c;
}
procedure `void` `d`(`org.b.a.a.h` v2 @kind this) @signature `Lorg/b/a/a/h;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L18f194.  v1:= 32I;
  #L18f198.  v0:= 0I;
  #L18f19a.  v2.`org.b.a.a.h.a` @type ^`int` := v0;
  #L18f19e.  v2.`org.b.a.a.h.b` @type ^`int` := v0;
  #L18f1a2.  v2.`org.b.a.a.h.c` @type ^`byte` := v1 @kind byte;
  #L18f1a6.  v2.`org.b.a.a.h.d` @type ^`byte` := v1 @kind byte;
  #L18f1aa.  return @kind void;
}
