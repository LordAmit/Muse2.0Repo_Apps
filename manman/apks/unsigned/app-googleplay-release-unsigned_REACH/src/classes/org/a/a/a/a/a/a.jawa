record `org.a.a.a.a.a.a` @kind class @AccessFlag PUBLIC extends `org.a.a.a.a.a` @kind class {
  `java.io.InputStream` `org.a.a.a.a.a.a.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.a.a.a.a.a.a.c` @AccessFlag PRIVATE_FINAL;
  `byte`[] `org.a.a.a.a.a.a.d` @AccessFlag PRIVATE_FINAL;
  `int` `org.a.a.a.a.a.a.e` @AccessFlag PRIVATE;
  `java.util.zip.Inflater` `org.a.a.a.a.a.a.f` @AccessFlag PRIVATE;
  `java.util.zip.CRC32` `org.a.a.a.a.a.a.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `org.a.a.a.a.a.a.h` @AccessFlag PRIVATE;
  `byte`[] `org.a.a.a.a.a.a.i` @AccessFlag PRIVATE_FINAL;
  `org.a.a.a.a.a.b` `org.a.a.a.a.a.a.j` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@org.a.a.a.a.a.a.a` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lorg/a/a/a/a/a/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L16cad4.  v0:= constclass @type ^`org.a.a.a.a.a.a` @kind object;
  #L16cad8.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L16cade.  v0:= temp;
  #L16cae0.  if v0 != 0 then goto L16caec;
  #L16cae4.  v0:= 1I;
  #L16cae6.  `@@org.a.a.a.a.a.a.a` @type ^`boolean` := v0 @kind boolean;
  #L16caea.  return @kind void;
  #L16caec.  v0:= 0I;
  #L16caee.  goto L16cae6;
}
procedure `void` `<init>`(`org.a.a.a.a.a.a` v1 @kind this, `java.io.InputStream` v2 @kind object) @signature `Lorg/a/a/a/a/a/a;.<init>:(Ljava/io/InputStream;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L16cb00.  v0:= 0I;
  #L16cb02.  call `<init>`(v1, v2, v0) @signature `Lorg/a/a/a/a/a/a;.<init>:(Ljava/io/InputStream;Z)V` @kind direct;
  #L16cb08.  return @kind void;
}
procedure `void` `<init>`(`org.a.a.a.a.a.a` v3 @kind this, `java.io.InputStream` v4 @kind object, `boolean` v5 ) @signature `Lorg/a/a/a/a/a/a;.<init>:(Ljava/io/InputStream;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L16cb1c.  v2:= 0I;
  #L16cb1e.  v1:= 1I;
  #L16cb20.  call `<init>`(v3) @signature `Lorg/a/a/a/a/a;.<init>:()V` @kind direct;
  #L16cb26.  v0:= 8192I;
  #L16cb2a.  v0:= new `byte`[v0];
  #L16cb2e.  v3.`org.a.a.a.a.a.a.d` @type ^`byte`[] := v0 @kind object;
  #L16cb32.  v3.`org.a.a.a.a.a.a.e` @type ^`int` := v2;
  #L16cb36.  v0:= new `java.util.zip.Inflater`;
  #L16cb3a.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L16cb40.  v3.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L16cb44.  v0:= new `java.util.zip.CRC32`;
  #L16cb48.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L16cb4e.  v3.`org.a.a.a.a.a.a.g` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L16cb52.  v3.`org.a.a.a.a.a.a.h` @type ^`boolean` := v2 @kind boolean;
  #L16cb56.  v0:= new `byte`[v1];
  #L16cb5a.  v3.`org.a.a.a.a.a.a.i` @type ^`byte`[] := v0 @kind object;
  #L16cb5e.  v0:= new `org.a.a.a.a.a.b`;
  #L16cb62.  call `<init>`(v0) @signature `Lorg/a/a/a/a/a/b;.<init>:()V` @kind direct;
  #L16cb68.  v3.`org.a.a.a.a.a.a.j` @type ^`org.a.a.a.a.a.b` := v0 @kind object;
  #L16cb6c.  call temp:= `markSupported`(v4) @signature `Ljava/io/InputStream;.markSupported:()Z` @kind virtual;
  #L16cb72.  v0:= temp;
  #L16cb74.  if v0 == 0 then goto L16cb88;
  #L16cb78.  v3.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` := v4 @kind object;
  #L16cb7c.  v3.`org.a.a.a.a.a.a.c` @type ^`boolean` := v5 @kind boolean;
  #L16cb80.  call temp:= `a`(v3, v1) @signature `Lorg/a/a/a/a/a/a;.a:(Z)Z` @kind direct;
  #L16cb86.  return @kind void;
  #L16cb88.  v0:= new `java.io.BufferedInputStream`;
  #L16cb8c.  call `<init>`(v0, v4) @signature `Ljava/io/BufferedInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L16cb92.  v3.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` := v0 @kind object;
  #L16cb96.  goto L16cb7c;
}
procedure `boolean` `a`(`org.a.a.a.a.a.a` v10 @kind this, `boolean` v11 ) @signature `Lorg/a/a/a/a/a/a;.a:(Z)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L16cba8.  v0:= 1I;
  #L16cbaa.  v1:= `@@org.a.a.a.a.a.a.a` @type ^`boolean` @kind boolean;
  #L16cbae.  if v1 != 0 then goto L16cbca;
  #L16cbb2.  if v11 != 0 then goto L16cbca;
  #L16cbb6.  v1:= v10.`org.a.a.a.a.a.a.c` @type ^`boolean` @kind boolean;
  #L16cbba.  if v1 != 0 then goto L16cbca;
  #L16cbbe.  v0:= new `java.lang.AssertionError`;
  #L16cbc2.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L16cbc8.  throw v0;
  #L16cbca.  v1:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L16cbce.  call temp:= `read`(v1) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L16cbd4.  v1:= temp;
  #L16cbd6.  v2:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L16cbda.  call temp:= `read`(v2) @signature `Ljava/io/InputStream;.read:()I` @kind virtual;
  #L16cbe0.  v2:= temp;
  #L16cbe2.  v3:= -1I;
  #L16cbe4.  if v1 != v3 then goto L16cbf0;
  #L16cbe8.  if v11 != 0 then goto L16cbf0;
  #L16cbec.  v0:= 0I;
  #L16cbee.  return v0;
  #L16cbf0.  v3:= 31I;
  #L16cbf4.  if v1 != v3 then goto L16cc00;
  #L16cbf8.  v1:= 139I;
  #L16cbfc.  if v2 == v1 then goto L16cc1a;
  #L16cc00.  v1:= new `java.io.IOException`;
  #L16cc04.  if v11 == 0 then goto L16cc14;
  #L16cc08.  v0:= "Input is not in the .gz format" @kind object;
  #L16cc0c.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16cc12.  throw v1;
  #L16cc14.  v0:= "Garbage after a valid .gz stream" @kind object;
  #L16cc18.  goto L16cc0c;
  #L16cc1a.  v3:= new `java.io.DataInputStream`;
  #L16cc1e.  v1:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L16cc22.  call `<init>`(v3, v1) @signature `Ljava/io/DataInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L16cc28.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L16cc2e.  v1:= temp;
  #L16cc30.  v2:= 8I;
  #L16cc34.  if v1 == v2 then goto L16cc76;
  #L16cc38.  v0:= new `java.io.IOException`;
  #L16cc3c.  v2:= new `java.lang.StringBuilder`;
  #L16cc40.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16cc46.  v3:= "Unsupported compression method " @kind object;
  #L16cc4a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cc50.  v2:= temp @kind object;
  #L16cc52.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cc58.  v1:= temp @kind object;
  #L16cc5a.  v2:= " in the .gz header" @kind object;
  #L16cc5e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cc64.  v1:= temp @kind object;
  #L16cc66.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16cc6c.  v1:= temp @kind object;
  #L16cc6e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16cc74.  throw v0;
  #L16cc76.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L16cc7c.  v4:= temp;
  #L16cc7e.  v1:= v4 ^& 224;
  #L16cc82.  if v1 == 0 then goto L16cc96;
  #L16cc86.  v0:= new `java.io.IOException`;
  #L16cc8a.  v1:= "Reserved flags are set in the .gz header" @kind object;
  #L16cc8e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16cc94.  throw v0;
  #L16cc96.  v1:= v10.`org.a.a.a.a.a.a.j` @type ^`org.a.a.a.a.a.b` @kind object;
  #L16cc9a.  call temp:= `b`(v10, v3) @signature `Lorg/a/a/a/a/a/a;.b:(Ljava/io/DataInputStream;)J` @kind direct;
  #L16cca0.  v6:= temp @kind wide;
  #L16cca2.  v8:= 1000L;
  #L16cca6.  v6:= v6 * v8 @kind long;
  #L16cca8.  call `a`(v1, v6) @signature `Lorg/a/a/a/a/a/b;.a:(J)V` @kind virtual;
  #L16ccae.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L16ccb4.  v1:= temp;
  #L16ccb6.  goto L16cd90;
  #L16ccbc.  v1:= v10.`org.a.a.a.a.a.a.j` @type ^`org.a.a.a.a.a.b` @kind object;
  #L16ccc0.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L16ccc6.  v2:= temp;
  #L16ccc8.  call `b`(v1, v2) @signature `Lorg/a/a/a/a/a/b;.b:(I)V` @kind virtual;
  #L16ccce.  v1:= v4 ^& 4;
  #L16ccd2.  if v1 == 0 then goto L16cd1a;
  #L16ccd6.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L16ccdc.  v1:= temp;
  #L16ccde.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L16cce4.  v2:= temp;
  #L16cce6.  v2:= v2 ^< 8;
  #L16ccea.  v1:= v1 ^| v2 @kind int;
  #L16ccec.  v2:= v1 + -1;
  #L16ccf0.  if v1 <= 0 then goto L16cd1a;
  #L16ccf4.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L16ccfa.  v1:= v2;
  #L16ccfc.  goto L16ccec;
  #L16ccfe.  v1:= v10.`org.a.a.a.a.a.a.j` @type ^`org.a.a.a.a.a.b` @kind object;
  #L16cd02.  v2:= 9I;
  #L16cd06.  call `a`(v1, v2) @signature `Lorg/a/a/a/a/a/b;.a:(I)V` @kind virtual;
  #L16cd0c.  goto L16ccbc;
  #L16cd0e.  v1:= v10.`org.a.a.a.a.a.a.j` @type ^`org.a.a.a.a.a.b` @kind object;
  #L16cd12.  call `a`(v1, v0) @signature `Lorg/a/a/a/a/a/b;.a:(I)V` @kind virtual;
  #L16cd18.  goto L16ccbc;
  #L16cd1a.  v1:= v4 ^& 8;
  #L16cd1e.  if v1 == 0 then goto L16cd42;
  #L16cd22.  v1:= v10.`org.a.a.a.a.a.a.j` @type ^`org.a.a.a.a.a.b` @kind object;
  #L16cd26.  v2:= new `java.lang.String`;
  #L16cd2a.  call temp:= `a`(v10, v3) @signature `Lorg/a/a/a/a/a/a;.a:(Ljava/io/DataInputStream;)[B` @kind direct;
  #L16cd30.  v5:= temp @kind object;
  #L16cd32.  v6:= "ISO-8859-1" @kind object;
  #L16cd36.  call `<init>`(v2, v5, v6) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L16cd3c.  call `a`(v1, v2) @signature `Lorg/a/a/a/a/a/b;.a:(Ljava/lang/String;)V` @kind virtual;
  #L16cd42.  v1:= v4 ^& 16;
  #L16cd46.  if v1 == 0 then goto L16cd6a;
  #L16cd4a.  v1:= v10.`org.a.a.a.a.a.a.j` @type ^`org.a.a.a.a.a.b` @kind object;
  #L16cd4e.  v2:= new `java.lang.String`;
  #L16cd52.  call temp:= `a`(v10, v3) @signature `Lorg/a/a/a/a/a/a;.a:(Ljava/io/DataInputStream;)[B` @kind direct;
  #L16cd58.  v5:= temp @kind object;
  #L16cd5a.  v6:= "ISO-8859-1" @kind object;
  #L16cd5e.  call `<init>`(v2, v5, v6) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #L16cd64.  call `b`(v1, v2) @signature `Lorg/a/a/a/a/a/b;.b:(Ljava/lang/String;)V` @kind virtual;
  #L16cd6a.  v1:= v4 ^& 2;
  #L16cd6e.  if v1 == 0 then goto L16cd78;
  #L16cd72.  call temp:= `readShort`(v3) @signature `Ljava/io/DataInputStream;.readShort:()S` @kind virtual;
  #L16cd78.  v1:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L16cd7c.  call `reset`(v1) @signature `Ljava/util/zip/Inflater;.reset:()V` @kind virtual;
  #L16cd82.  v1:= v10.`org.a.a.a.a.a.a.g` @type ^`java.util.zip.CRC32` @kind object;
  #L16cd86.  call `reset`(v1) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L16cd8c.  goto L16cbee;
  #L16cd90.  switch v1
                  | 2 => goto L16ccfe
                  | 3 => goto L16ccbc
                  | 4 => goto L16cd0e
                  | else => goto L16ccbc;
}
procedure `byte`[] `a`(`org.a.a.a.a.a.a` v2 @kind this, `java.io.DataInputStream` v3 @kind object) @signature `Lorg/a/a/a/a/a/a;.a:(Ljava/io/DataInputStream;)[B` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L16cdb4.  v0:= new `java.io.ByteArrayOutputStream`;
  #L16cdb8.  call `<init>`(v0) @signature `Ljava/io/ByteArrayOutputStream;.<init>:()V` @kind direct;
  #L16cdbe.  call temp:= `readUnsignedByte`(v3) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L16cdc4.  v1:= temp;
  #L16cdc6.  if v1 == 0 then goto L16cdd2;
  #L16cdca.  call `write`(v0, v1) @signature `Ljava/io/ByteArrayOutputStream;.write:(I)V` @kind virtual;
  #L16cdd0.  goto L16cdbe;
  #L16cdd2.  call temp:= `toByteArray`(v0) @signature `Ljava/io/ByteArrayOutputStream;.toByteArray:()[B` @kind virtual;
  #L16cdd8.  v0:= temp @kind object;
  #L16cdda.  return v0 @kind object;
}
procedure `long` `b`(`org.a.a.a.a.a.a` v5 @kind this, `java.io.DataInputStream` v6 @kind object) @signature `Lorg/a/a/a/a/a/a;.b:(Ljava/io/DataInputStream;)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16cdec.  call temp:= `readUnsignedByte`(v6) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L16cdf2.  v0:= temp;
  #L16cdf4.  call temp:= `readUnsignedByte`(v6) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L16cdfa.  v1:= temp;
  #L16cdfc.  v1:= v1 ^< 8;
  #L16ce00.  v0:= v0 ^| v1 @kind int;
  #L16ce02.  call temp:= `readUnsignedByte`(v6) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L16ce08.  v1:= temp;
  #L16ce0a.  v1:= v1 ^< 16;
  #L16ce0e.  v0:= v0 ^| v1 @kind int;
  #L16ce10.  v0:= (`long`) v0 @kind i2l;
  #L16ce12.  call temp:= `readUnsignedByte`(v6) @signature `Ljava/io/DataInputStream;.readUnsignedByte:()I` @kind virtual;
  #L16ce18.  v2:= temp;
  #L16ce1a.  v2:= (`long`) v2 @kind i2l;
  #L16ce1c.  v4:= 24I;
  #L16ce20.  v2:= v2 ^< v4 @kind long;
  #L16ce22.  v0:= v0 ^| v2 @kind long;
  #L16ce24.  return v0 @kind wide;
}
procedure `void` `close`(`org.a.a.a.a.a.a` v2 @kind this) @signature `Lorg/a/a/a/a/a/a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16ce38.  v0:= v2.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L16ce3c.  if v0 == 0 then goto L16ce50;
  #L16ce40.  v0:= v2.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L16ce44.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L16ce4a.  v0:= 0I;
  #L16ce4c.  v2.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L16ce50.  v0:= v2.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L16ce54.  v1:= `@@java.lang.System.in` @type ^`java.io.InputStream` @kind object;
  #L16ce58.  if v0 == v1 then goto L16ce66;
  #L16ce5c.  v0:= v2.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L16ce60.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L16ce66.  return @kind void;
}
procedure `int` `read`(`org.a.a.a.a.a.a` v4 @kind this) @signature `Lorg/a/a/a/a/a/a;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16ce78.  v3:= 0I;
  #L16ce7a.  v0:= -1I;
  #L16ce7c.  v1:= v4.`org.a.a.a.a.a.a.i` @type ^`byte`[] @kind object;
  #L16ce80.  v2:= 1I;
  #L16ce82.  call temp:= `read`(v4, v1, v3, v2) @signature `Lorg/a/a/a/a/a/a;.read:([BII)I` @kind virtual;
  #L16ce88.  v1:= temp;
  #L16ce8a.  if v1 != v0 then goto L16ce90;
  #L16ce8e.  return v0;
  #L16ce90.  v0:= v4.`org.a.a.a.a.a.a.i` @type ^`byte`[] @kind object;
  #L16ce94.  v0:= v0[v3] @kind byte;
  #L16ce98.  v0:= v0 ^& 255;
  #L16ce9c.  goto L16ce8e;
}
procedure `int` `read`(`org.a.a.a.a.a.a` v10 @kind this, `byte`[] v11 @kind object, `int` v12 , `int` v13 ) @signature `Lorg/a/a/a/a/a/a;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L16ceb0.  v0:= -1I;
  #L16ceb2.  v2:= 0I;
  #L16ceb4.  v1:= v10.`org.a.a.a.a.a.a.h` @type ^`boolean` @kind boolean;
  #L16ceb8.  if v1 == 0 then goto L16cebe;
  #L16cebc.  return v0;
  #L16cebe.  v1:= v2;
  #L16cec0.  if v13 <= 0 then goto L16d04c;
  #L16cec4.  v3:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L16cec8.  call temp:= `needsInput`(v3) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L16cece.  v3:= temp;
  #L16ced0.  if v3 == 0 then goto L16cf1e;
  #L16ced4.  v3:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L16ced8.  v4:= v10.`org.a.a.a.a.a.a.d` @type ^`byte`[] @kind object;
  #L16cedc.  v4:= length @variable v4;
  #L16cede.  call `mark`(v3, v4) @signature `Ljava/io/InputStream;.mark:(I)V` @kind virtual;
  #L16cee4.  v3:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L16cee8.  v4:= v10.`org.a.a.a.a.a.a.d` @type ^`byte`[] @kind object;
  #L16ceec.  call temp:= `read`(v3, v4) @signature `Ljava/io/InputStream;.read:([B)I` @kind virtual;
  #L16cef2.  v3:= temp;
  #L16cef4.  v10.`org.a.a.a.a.a.a.e` @type ^`int` := v3;
  #L16cef8.  v3:= v10.`org.a.a.a.a.a.a.e` @type ^`int`;
  #L16cefc.  if v3 != v0 then goto L16cf0c;
  #L16cf00.  v0:= new `java.io.EOFException`;
  #L16cf04.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L16cf0a.  throw v0;
  #L16cf0c.  v3:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L16cf10.  v4:= v10.`org.a.a.a.a.a.a.d` @type ^`byte`[] @kind object;
  #L16cf14.  v5:= v10.`org.a.a.a.a.a.a.e` @type ^`int`;
  #L16cf18.  call `setInput`(v3, v4, v2, v5) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #Try_start0.  
  #L16cf1e.  v3:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L16cf22.  call temp:= `inflate`(v3, v11, v12, v13) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #Try_end0.  
  #L16cf28.  v3:= temp;
  #L16cf2a.  v4:= v10.`org.a.a.a.a.a.a.g` @type ^`java.util.zip.CRC32` @kind object;
  #L16cf2e.  call `update`(v4, v11, v12, v3) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L16cf34.  v12:= v12 + v3 @kind int;
  #L16cf36.  v13:= v13 - v3 @kind int;
  #L16cf38.  v1:= v1 + v3 @kind int;
  #L16cf3a.  call `a`(v10, v3) @signature `Lorg/a/a/a/a/a/a;.a:(I)V` @kind virtual;
  #L16cf40.  v3:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L16cf44.  call temp:= `finished`(v3) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L16cf4a.  v3:= temp;
  #L16cf4c.  if v3 == 0 then goto L16cec0;
  #L16cf50.  v3:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L16cf54.  call `reset`(v3) @signature `Ljava/io/InputStream;.reset:()V` @kind virtual;
  #L16cf5a.  v3:= v10.`org.a.a.a.a.a.a.e` @type ^`int`;
  #L16cf5e.  v4:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L16cf62.  call temp:= `getRemaining`(v4) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L16cf68.  v4:= temp;
  #L16cf6a.  v3:= v3 - v4 @kind int;
  #L16cf6c.  v4:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L16cf70.  v6:= (`long`) v3 @kind i2l;
  #L16cf72.  call temp:= `skip`(v4, v6) @signature `Ljava/io/InputStream;.skip:(J)J` @kind virtual;
  #L16cf78.  v4:= temp @kind wide;
  #L16cf7a.  v6:= (`long`) v3 @kind i2l;
  #L16cf7c.  v3:= lcmp(v4, v6);
  #L16cf80.  if v3 == 0 then goto L16cfa2;
  #L16cf84.  v0:= new `java.io.IOException`;
  #L16cf88.  call `<init>`(v0) @signature `Ljava/io/IOException;.<init>:()V` @kind direct;
  #L16cf8e.  throw v0;
  #L16cf90.  v0:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L16cf92.  v0:= new `java.io.IOException`;
  #L16cf96.  v1:= "Gzip-compressed data is corrupt" @kind object;
  #L16cf9a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16cfa0.  throw v0;
  #L16cfa2.  v10.`org.a.a.a.a.a.a.e` @type ^`int` := v2;
  #L16cfa6.  v3:= new `java.io.DataInputStream`;
  #L16cfaa.  v4:= v10.`org.a.a.a.a.a.a.b` @type ^`java.io.InputStream` @kind object;
  #L16cfae.  call `<init>`(v3, v4) @signature `Ljava/io/DataInputStream;.<init>:(Ljava/io/InputStream;)V` @kind direct;
  #L16cfb4.  call temp:= `b`(v10, v3) @signature `Lorg/a/a/a/a/a/a;.b:(Ljava/io/DataInputStream;)J` @kind direct;
  #L16cfba.  v4:= temp @kind wide;
  #L16cfbc.  v6:= v10.`org.a.a.a.a.a.a.g` @type ^`java.util.zip.CRC32` @kind object;
  #L16cfc0.  call temp:= `getValue`(v6) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L16cfc6.  v6:= temp @kind wide;
  #L16cfc8.  v4:= lcmp(v4, v6);
  #L16cfcc.  if v4 == 0 then goto L16cfe0;
  #L16cfd0.  v0:= new `java.io.IOException`;
  #L16cfd4.  v1:= "Gzip-compressed data is corrupt (CRC32 error)" @kind object;
  #L16cfd8.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16cfde.  throw v0;
  #L16cfe0.  call temp:= `b`(v10, v3) @signature `Lorg/a/a/a/a/a/a;.b:(Ljava/io/DataInputStream;)J` @kind direct;
  #L16cfe6.  v4:= temp @kind wide;
  #L16cfe8.  v3:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L16cfec.  call temp:= `getBytesWritten`(v3) @signature `Ljava/util/zip/Inflater;.getBytesWritten:()J` @kind virtual;
  #L16cff2.  v6:= temp @kind wide;
  #L16cff4.  v8:= 4294967295L;
  #L16cffe.  v6:= v6 ^& v8 @kind long;
  #L16d000.  v3:= lcmp(v4, v6);
  #L16d004.  if v3 == 0 then goto L16d018;
  #L16d008.  v0:= new `java.io.IOException`;
  #L16d00c.  v1:= "Gzip-compressed data is corrupt(uncompressed size mismatch)" @kind object;
  #L16d010.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16d016.  throw v0;
  #L16d018.  v3:= v10.`org.a.a.a.a.a.a.c` @type ^`boolean` @kind boolean;
  #L16d01c.  if v3 == 0 then goto L16d02c;
  #L16d020.  call temp:= `a`(v10, v2) @signature `Lorg/a/a/a/a/a/a;.a:(Z)Z` @kind direct;
  #L16d026.  v3:= temp;
  #L16d028.  if v3 != 0 then goto L16cec0;
  #L16d02c.  v2:= v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` @kind object;
  #L16d030.  call `end`(v2) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L16d036.  v2:= 0I;
  #L16d038.  v10.`org.a.a.a.a.a.a.f` @type ^`java.util.zip.Inflater` := v2 @kind object;
  #L16d03c.  v2:= 1I;
  #L16d03e.  v10.`org.a.a.a.a.a.a.h` @type ^`boolean` := v2 @kind boolean;
  #L16d042.  if v1 == 0 then goto L16cebc;
  #L16d046.  v0:= v1;
  #L16d048.  goto L16cebc;
  #L16d04c.  v0:= v1;
  #L16d04e.  goto L16cebc;
  catch `java.util.zip.DataFormatException` @[Try_start0..Try_end0] goto L16cf90;
}
