record `com.b.a.b.a.i$a` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.v` @kind class {
  `com.b.a.b.h` `com.b.a.b.a.i$a.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.b.a.b.a.i$a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.b.a.i$a` v0 @kind this, `com.b.a.b.h` v1 @kind object, `java.util.Map` v2 @kind object) @signature `Lcom/b/a/b/a/i$a;.<init>:(Lcom/b/a/b/h;Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L140c30.  call `<init>`(v0) @signature `Lcom/b/a/v;.<init>:()V` @kind direct;
  #L140c36.  v0.`com.b.a.b.a.i$a.a` @type ^`com.b.a.b.h` := v1 @kind object;
  #L140c3a.  v0.`com.b.a.b.a.i$a.b` @type ^`java.util.Map` := v2 @kind object;
  #L140c3e.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.i$a` v3 @kind this, `com.b.a.d.c` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lcom/b/a/b/a/i$a;.a:(Lcom/b/a/d/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L140c50.  if v5 != 0 then goto L140c5c;
  #L140c54.  call temp:= `f`(v4) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L140c5a.  return @kind void;
  #L140c5c.  call temp:= `d`(v4) @signature `Lcom/b/a/d/c;.d:()Lcom/b/a/d/c;` @kind virtual;
  #Try_start0.  
  #L140c62.  v0:= v3.`com.b.a.b.a.i$a.b` @type ^`java.util.Map` @kind object;
  #L140c66.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L140c6c.  v0:= temp @kind object;
  #L140c6e.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L140c74.  v1:= temp @kind object;
  #L140c76.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L140c7c.  v0:= temp;
  #L140c7e.  if v0 == 0 then goto L140cba;
  #L140c82.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L140c88.  v0:= temp @kind object;
  #L140c8a.  v0:= (`com.b.a.b.a.i$b`) v0 @kind object;
  #L140c8e.  call temp:= `a`(v0, v5) @signature `Lcom/b/a/b/a/i$b;.a:(Ljava/lang/Object;)Z` @kind virtual;
  #L140c94.  v2:= temp;
  #L140c96.  if v2 == 0 then goto L140c76;
  #L140c9a.  v2:= v0.`com.b.a.b.a.i$b.h` @type ^`java.lang.String` @kind object;
  #L140c9e.  call temp:= `a`(v4, v2) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/String;)Lcom/b/a/d/c;` @kind virtual;
  #L140ca4.  call `a`(v0, v4, v5) @signature `Lcom/b/a/b/a/i$b;.a:(Lcom/b/a/d/c;Ljava/lang/Object;)V` @kind virtual;
  #Try_end0.  
  #L140caa.  goto L140c76;
  #L140cac.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L140cae.  v1:= new `java.lang.AssertionError`;
  #L140cb2.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L140cb8.  throw v1;
  #L140cba.  call temp:= `e`(v4) @signature `Lcom/b/a/d/c;.e:()Lcom/b/a/d/c;` @kind virtual;
  #L140cc0.  goto L140c5a;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L140cac;
}
procedure `java.lang.Object` `b`(`com.b.a.b.a.i$a` v3 @kind this, `com.b.a.d.a` v4 @kind object) @signature `Lcom/b/a/b/a/i$a;.b:(Lcom/b/a/d/a;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L140ce4.  call temp:= `f`(v4) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L140cea.  v0:= temp @kind object;
  #L140cec.  v1:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L140cf0.  if v0 != v1 then goto L140cfe;
  #L140cf4.  call `j`(v4) @signature `Lcom/b/a/d/a;.j:()V` @kind virtual;
  #L140cfa.  v0:= 0I;
  #L140cfc.  return v0 @kind object;
  #L140cfe.  v0:= v3.`com.b.a.b.a.i$a.a` @type ^`com.b.a.b.h` @kind object;
  #L140d02.  call temp:= `a`(v0) @signature `Lcom/b/a/b/h;.a:()Ljava/lang/Object;` @kind interface;
  #L140d08.  v1:= temp @kind object;
  #Try_start0.  
  #L140d0a.  call `c`(v4) @signature `Lcom/b/a/d/a;.c:()V` @kind virtual;
  #L140d10.  call temp:= `e`(v4) @signature `Lcom/b/a/d/a;.e:()Z` @kind virtual;
  #L140d16.  v0:= temp;
  #L140d18.  if v0 == 0 then goto L140d6c;
  #L140d1c.  call temp:= `g`(v4) @signature `Lcom/b/a/d/a;.g:()Ljava/lang/String;` @kind virtual;
  #L140d22.  v0:= temp @kind object;
  #L140d24.  v2:= v3.`com.b.a.b.a.i$a.b` @type ^`java.util.Map` @kind object;
  #L140d28.  call temp:= `get`(v2, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L140d2e.  v0:= temp @kind object;
  #L140d30.  v0:= (`com.b.a.b.a.i$b`) v0 @kind object;
  #L140d34.  if v0 == 0 then goto L140d40;
  #L140d38.  v2:= v0.`com.b.a.b.a.i$b.j` @type ^`boolean` @kind boolean;
  #L140d3c.  if v2 != 0 then goto L140d56;
  #L140d40.  call `n`(v4) @signature `Lcom/b/a/d/a;.n:()V` @kind virtual;
  #Try_end0.  
  #L140d46.  goto L140d10;
  #L140d48.  v0:= Exception @type ^`java.lang.IllegalStateException` @kind object;
  #L140d4a.  v1:= new `com.b.a.t`;
  #L140d4e.  call `<init>`(v1, v0) @signature `Lcom/b/a/t;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L140d54.  throw v1;
  #Try_start1.  
  #L140d56.  call `a`(v0, v4, v1) @signature `Lcom/b/a/b/a/i$b;.a:(Lcom/b/a/d/a;Ljava/lang/Object;)V` @kind virtual;
  #Try_end1.  
  #L140d5c.  goto L140d10;
  #L140d5e.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L140d60.  v1:= new `java.lang.AssertionError`;
  #L140d64.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L140d6a.  throw v1;
  #L140d6c.  call `d`(v4) @signature `Lcom/b/a/d/a;.d:()V` @kind virtual;
  #L140d72.  v0:= v1 @kind object;
  #L140d74.  goto L140cfc;
  catch `java.lang.IllegalStateException` @[Try_start0..Try_end0] goto L140d48;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L140d5e;
  catch `java.lang.IllegalStateException` @[Try_start1..Try_end1] goto L140d48;
  catch `java.lang.IllegalAccessException` @[Try_start1..Try_end1] goto L140d5e;
}
