record `com.b.a.b.f` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Number` @kind class {
  `java.lang.String` `com.b.a.b.f.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.b.f` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/b/a/b/f;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L145a4c.  call `<init>`(v0) @signature `Ljava/lang/Number;.<init>:()V` @kind direct;
  #L145a52.  v0.`com.b.a.b.f.a` @type ^`java.lang.String` := v1 @kind object;
  #L145a56.  return @kind void;
}
procedure `double` `doubleValue`(`com.b.a.b.f` v2 @kind this) @signature `Lcom/b/a/b/f;.doubleValue:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L145a68.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L145a6c.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L145a72.  v0:= temp @kind wide;
  #L145a74.  return v0 @kind wide;
}
procedure `boolean` `equals`(`com.b.a.b.f` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/b/a/b/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L145a88.  v1:= 1I;
  #L145a8a.  v0:= 0I;
  #L145a8c.  if v4 != v5 then goto L145a94;
  #L145a90.  v0:= v1;
  #L145a92.  return v0;
  #L145a94.  v2:= instanceof @variable v5 @type ^`com.b.a.b.f` @kind boolean;
  #L145a98.  if v2 == 0 then goto L145a92;
  #L145a9c.  v5:= (`com.b.a.b.f`) v5 @kind object;
  #L145aa0.  v2:= v4.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L145aa4.  v3:= v5.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L145aa8.  if v2 == v3 then goto L145ac0;
  #L145aac.  v2:= v4.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L145ab0.  v3:= v5.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L145ab4.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L145aba.  v2:= temp;
  #L145abc.  if v2 == 0 then goto L145a92;
  #L145ac0.  v0:= v1;
  #L145ac2.  goto L145a92;
}
procedure `float` `floatValue`(`com.b.a.b.f` v1 @kind this) @signature `Lcom/b/a/b/f;.floatValue:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145ad4.  v0:= v1.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L145ad8.  call temp:= `parseFloat`(v0) @signature `Ljava/lang/Float;.parseFloat:(Ljava/lang/String;)F` @kind static;
  #L145ade.  v0:= temp;
  #L145ae0.  return v0;
}
procedure `int` `hashCode`(`com.b.a.b.f` v1 @kind this) @signature `Lcom/b/a/b/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145af4.  v0:= v1.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L145af8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L145afe.  v0:= temp;
  #L145b00.  return v0;
}
procedure `int` `intValue`(`com.b.a.b.f` v2 @kind this) @signature `Lcom/b/a/b/f;.intValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L145b14.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L145b18.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #Try_end0.  
  #L145b1e.  v0:= temp;
  #L145b20.  return v0;
  #L145b22.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #Try_start1.  
  #L145b24.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L145b28.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #Try_end1.  
  #L145b2e.  v0:= temp @kind wide;
  #L145b30.  v0:= (`int`) v0 @kind l2i;
  #L145b32.  goto L145b20;
  #L145b34.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L145b36.  v0:= new `java.math.BigDecimal`;
  #L145b3a.  v1:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L145b3e.  call `<init>`(v0, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L145b44.  call temp:= `intValue`(v0) @signature `Ljava/math/BigDecimal;.intValue:()I` @kind virtual;
  #L145b4a.  v0:= temp;
  #L145b4c.  goto L145b20;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L145b22;
  catch `java.lang.NumberFormatException` @[Try_start1..Try_end1] goto L145b34;
}
procedure `long` `longValue`(`com.b.a.b.f` v2 @kind this) @signature `Lcom/b/a/b/f;.longValue:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L145b7c.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L145b80.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #Try_end0.  
  #L145b86.  v0:= temp @kind wide;
  #L145b88.  return v0 @kind wide;
  #L145b8a.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L145b8c.  v0:= new `java.math.BigDecimal`;
  #L145b90.  v1:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L145b94.  call `<init>`(v0, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L145b9a.  call temp:= `longValue`(v0) @signature `Ljava/math/BigDecimal;.longValue:()J` @kind virtual;
  #L145ba0.  v0:= temp @kind wide;
  #L145ba2.  goto L145b88;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L145b8a;
}
procedure `java.lang.String` `toString`(`com.b.a.b.f` v1 @kind this) @signature `Lcom/b/a/b/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145bc4.  v0:= v1.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L145bc8.  return v0 @kind object;
}
