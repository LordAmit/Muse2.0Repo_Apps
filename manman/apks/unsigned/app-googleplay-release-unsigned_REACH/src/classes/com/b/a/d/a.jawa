record `com.b.a.d.a` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface {
  `int` `com.b.a.d.a.a` @AccessFlag ;
  `java.io.Reader` `com.b.a.d.a.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.b.a.d.a.d` @AccessFlag PRIVATE;
  `char`[] `com.b.a.d.a.e` @AccessFlag PRIVATE_FINAL;
  `int` `com.b.a.d.a.f` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.g` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.h` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.i` @AccessFlag PRIVATE;
  `long` `com.b.a.d.a.j` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.k` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.a.l` @AccessFlag PRIVATE;
  `int`[] `com.b.a.d.a.m` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.n` @AccessFlag PRIVATE;
  `java.lang.String`[] `com.b.a.d.a.o` @AccessFlag PRIVATE;
  `int`[] `com.b.a.d.a.p` @AccessFlag PRIVATE;
}
global `char`[] `@@com.b.a.d.a.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/d/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L13c8b8.  v0:= ")]}'\n" @kind object;
  #L13c8bc.  call temp:= `toCharArray`(v0) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L13c8c2.  v0:= temp @kind object;
  #L13c8c4.  `@@com.b.a.d.a.b` @type ^`char`[] := v0 @kind object;
  #L13c8c8.  v0:= new `com.b.a.d.a$1`;
  #L13c8cc.  call `<init>`(v0) @signature `Lcom/b/a/d/a$1;.<init>:()V` @kind direct;
  #L13c8d2.  `@@com.b.a.b.e.a` @type ^`com.b.a.b.e` := v0 @kind object;
  #L13c8d6.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.d.a` v4 @kind this, `java.io.Reader` v5 @kind object) @signature `Lcom/b/a/d/a;.<init>:(Ljava/io/Reader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13c8e8.  v3:= 32I;
  #L13c8ec.  v1:= 0I;
  #L13c8ee.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13c8f4.  v4.`com.b.a.d.a.d` @type ^`boolean` := v1 @kind boolean;
  #L13c8f8.  v0:= 1024I;
  #L13c8fc.  v0:= new `char`[v0];
  #L13c900.  v4.`com.b.a.d.a.e` @type ^`char`[] := v0 @kind object;
  #L13c904.  v4.`com.b.a.d.a.f` @type ^`int` := v1;
  #L13c908.  v4.`com.b.a.d.a.g` @type ^`int` := v1;
  #L13c90c.  v4.`com.b.a.d.a.h` @type ^`int` := v1;
  #L13c910.  v4.`com.b.a.d.a.i` @type ^`int` := v1;
  #L13c914.  v4.`com.b.a.d.a.a` @type ^`int` := v1;
  #L13c918.  v0:= new `int`[v3];
  #L13c91c.  v4.`com.b.a.d.a.m` @type ^`int`[] := v0 @kind object;
  #L13c920.  v4.`com.b.a.d.a.n` @type ^`int` := v1;
  #L13c924.  v0:= v4.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L13c928.  v1:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L13c92c.  v2:= v1 + 1;
  #L13c930.  v4.`com.b.a.d.a.n` @type ^`int` := v2;
  #L13c934.  v2:= 6I;
  #L13c936.  v0[v1]:= v2;
  #L13c93a.  v0:= new `java.lang.String`[v3];
  #L13c93e.  v4.`com.b.a.d.a.o` @type ^`java.lang.String`[] := v0 @kind object;
  #L13c942.  v0:= new `int`[v3];
  #L13c946.  v4.`com.b.a.d.a.p` @type ^`int`[] := v0 @kind object;
  #L13c94a.  if v5 != 0 then goto L13c95e;
  #L13c94e.  v0:= new `java.lang.NullPointerException`;
  #L13c952.  v1:= "in == null" @kind object;
  #L13c956.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c95c.  throw v0;
  #L13c95e.  v4.`com.b.a.d.a.c` @type ^`java.io.Reader` := v5 @kind object;
  #L13c962.  return @kind void;
}
procedure `java.lang.String` `a`(`com.b.a.d.a` v1 @kind object) @signature `Lcom/b/a/d/a;.a:(Lcom/b/a/d/a;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L13c974.  call temp:= `x`(v1) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13c97a.  v0:= temp @kind object;
  #L13c97c.  return v0 @kind object;
}
procedure `void` `a`(`com.b.a.d.a` v6 @kind this, `int` v7 ) @signature `Lcom/b/a/d/a;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13c990.  v5:= 0I;
  #L13c992.  v0:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13c996.  v1:= v6.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L13c99a.  v1:= length @variable v1;
  #L13c99c.  if v0 != v1 then goto L13c9fa;
  #L13c9a0.  v0:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13c9a4.  v0:= v0 * 2;
  #L13c9a8.  v0:= new `int`[v0];
  #L13c9ac.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13c9b0.  v1:= v1 * 2;
  #L13c9b4.  v1:= new `int`[v1];
  #L13c9b8.  v2:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13c9bc.  v2:= v2 * 2;
  #L13c9c0.  v2:= new `java.lang.String`[v2];
  #L13c9c4.  v3:= v6.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L13c9c8.  v4:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13c9cc.  call `arraycopy`(v3, v5, v0, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L13c9d2.  v3:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13c9d6.  v4:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13c9da.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L13c9e0.  v3:= v6.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L13c9e4.  v4:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13c9e8.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L13c9ee.  v6.`com.b.a.d.a.m` @type ^`int`[] := v0 @kind object;
  #L13c9f2.  v6.`com.b.a.d.a.p` @type ^`int`[] := v1 @kind object;
  #L13c9f6.  v6.`com.b.a.d.a.o` @type ^`java.lang.String`[] := v2 @kind object;
  #L13c9fa.  v0:= v6.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L13c9fe.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13ca02.  v2:= v1 + 1;
  #L13ca06.  v6.`com.b.a.d.a.n` @type ^`int` := v2;
  #L13ca0a.  v0[v1]:= v7;
  #L13ca0e.  return @kind void;
}
procedure `boolean` `a`(`com.b.a.d.a` v1 @kind this, `char` v2 ) @signature `Lcom/b/a/d/a;.a:(C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L13ca20.  goto L13ca34;
  #L13ca26.  v0:= 1I;
  #L13ca28.  return v0;
  #L13ca2a.  call `v`(v1) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L13ca30.  v0:= 0I;
  #L13ca32.  goto L13ca28;
  #L13ca34.  switch v2
                  | 9 => goto L13ca30
                  | 10 => goto L13ca30
                  | 12 => goto L13ca30
                  | 13 => goto L13ca30
                  | 32 => goto L13ca30
                  | 35 => goto L13ca2a
                  | 44 => goto L13ca30
                  | 47 => goto L13ca2a
                  | 58 => goto L13ca30
                  | 59 => goto L13ca2a
                  | 61 => goto L13ca2a
                  | 91 => goto L13ca30
                  | 92 => goto L13ca2a
                  | 93 => goto L13ca30
                  | 123 => goto L13ca30
                  | 125 => goto L13ca30
                  | else => goto L13ca26;
}
procedure `boolean` `a`(`com.b.a.d.a` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lcom/b/a/d/a;.a:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13cac8.  v1:= 0I;
  #L13caca.  v0:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L13cace.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13cad4.  v2:= temp;
  #L13cad6.  v0:= v0 + v2 @kind int;
  #L13cad8.  v2:= v4.`com.b.a.d.a.g` @type ^`int`;
  #L13cadc.  if v0 <= v2 then goto L13caf4;
  #L13cae0.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13cae6.  v0:= temp;
  #L13cae8.  call temp:= `b`(v4, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13caee.  v0:= temp;
  #L13caf0.  if v0 == 0 then goto L13cb5e;
  #L13caf4.  v0:= v4.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13caf8.  v2:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L13cafc.  v0:= v0[v2] @kind char;
  #L13cb00.  v2:= 10I;
  #L13cb04.  if v0 != v2 then goto L13cb2e;
  #L13cb08.  v0:= v4.`com.b.a.d.a.h` @type ^`int`;
  #L13cb0c.  v0:= v0 + 1;
  #L13cb10.  v4.`com.b.a.d.a.h` @type ^`int` := v0;
  #L13cb14.  v0:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L13cb18.  v0:= v0 + 1;
  #L13cb1c.  v4.`com.b.a.d.a.i` @type ^`int` := v0;
  #L13cb20.  v0:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L13cb24.  v0:= v0 + 1;
  #L13cb28.  v4.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13cb2c.  goto L13caca;
  #L13cb2e.  v0:= v1;
  #L13cb30.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13cb36.  v2:= temp;
  #L13cb38.  if v0 >= v2 then goto L13cb5c;
  #L13cb3c.  v2:= v4.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13cb40.  v3:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L13cb44.  v3:= v3 + v0 @kind int;
  #L13cb46.  v2:= v2[v3] @kind char;
  #L13cb4a.  call temp:= `charAt`(v5, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13cb50.  v3:= temp;
  #L13cb52.  if v2 != v3 then goto L13cb20;
  #L13cb56.  v0:= v0 + 1;
  #L13cb5a.  goto L13cb30;
  #L13cb5c.  v1:= 1I;
  #L13cb5e.  return v1;
}
procedure `int` `b`(`com.b.a.d.a` v5 @kind this, `boolean` v6 ) @signature `Lcom/b/a/d/a;.b:(Z)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13cb70.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13cb74.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13cb78.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L13cb7c.  if v1 != v0 then goto L13cbd8;
  #L13cb80.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L13cb84.  v0:= 1I;
  #L13cb86.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13cb8c.  v0:= temp;
  #L13cb8e.  if v0 != 0 then goto L13cbd0;
  #L13cb92.  if v6 == 0 then goto L13ccee;
  #L13cb96.  v0:= new `java.io.EOFException`;
  #L13cb9a.  v1:= new `java.lang.StringBuilder`;
  #L13cb9e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13cba4.  v2:= "End of input" @kind object;
  #L13cba8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13cbae.  v1:= temp @kind object;
  #L13cbb0.  call temp:= `x`(v5) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13cbb6.  v2:= temp @kind object;
  #L13cbb8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13cbbe.  v1:= temp @kind object;
  #L13cbc0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13cbc6.  v1:= temp @kind object;
  #L13cbc8.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13cbce.  throw v0;
  #L13cbd0.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13cbd4.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L13cbd8.  v2:= v1 + 1;
  #L13cbdc.  v1:= v3[v1] @kind char;
  #L13cbe0.  v4:= 10I;
  #L13cbe4.  if v1 != v4 then goto L13cbfc;
  #L13cbe8.  v1:= v5.`com.b.a.d.a.h` @type ^`int`;
  #L13cbec.  v1:= v1 + 1;
  #L13cbf0.  v5.`com.b.a.d.a.h` @type ^`int` := v1;
  #L13cbf4.  v5.`com.b.a.d.a.i` @type ^`int` := v2;
  #L13cbf8.  v1:= v2;
  #L13cbfa.  goto L13cb7c;
  #L13cbfc.  v4:= 32I;
  #L13cc00.  if v1 == v4 then goto L13ccf2;
  #L13cc04.  v4:= 13I;
  #L13cc08.  if v1 == v4 then goto L13ccf2;
  #L13cc0c.  v4:= 9I;
  #L13cc10.  if v1 != v4 then goto L13cc18;
  #L13cc14.  v1:= v2;
  #L13cc16.  goto L13cb7c;
  #L13cc18.  v4:= 47I;
  #L13cc1c.  if v1 != v4 then goto L13ccc2;
  #L13cc20.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L13cc24.  if v2 != v0 then goto L13cc52;
  #L13cc28.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13cc2c.  v0:= v0 + -1;
  #L13cc30.  v5.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13cc34.  v0:= 2I;
  #L13cc36.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13cc3c.  v0:= temp;
  #L13cc3e.  v2:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13cc42.  v2:= v2 + 1;
  #L13cc46.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L13cc4a.  if v0 != 0 then goto L13cc52;
  #L13cc4e.  v0:= v1;
  #L13cc50.  return v0;
  #L13cc52.  call `v`(v5) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L13cc58.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13cc5c.  v0:= v3[v0] @kind char;
  #L13cc60.  goto L13ccf8;
  #L13cc66.  v0:= v1;
  #L13cc68.  goto L13cc50;
  #L13cc6a.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13cc6e.  v0:= v0 + 1;
  #L13cc72.  v5.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13cc76.  v0:= "*/" @kind object;
  #L13cc7a.  call temp:= `a`(v5, v0) @signature `Lcom/b/a/d/a;.a:(Ljava/lang/String;)Z` @kind direct;
  #L13cc80.  v0:= temp;
  #L13cc82.  if v0 != 0 then goto L13cc94;
  #L13cc86.  v0:= "Unterminated comment" @kind object;
  #L13cc8a.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L13cc90.  v0:= temp @kind object;
  #L13cc92.  throw v0;
  #L13cc94.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13cc98.  v1:= v0 + 2;
  #L13cc9c.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L13cca0.  goto L13cb7c;
  #L13cca4.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13cca8.  v0:= v0 + 1;
  #L13ccac.  v5.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13ccb0.  call `w`(v5) @signature `Lcom/b/a/d/a;.w:()V` @kind direct;
  #L13ccb6.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13ccba.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L13ccbe.  goto L13cb7c;
  #L13ccc2.  v0:= 35I;
  #L13ccc6.  if v1 != v0 then goto L13cce6;
  #L13ccca.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L13ccce.  call `v`(v5) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L13ccd4.  call `w`(v5) @signature `Lcom/b/a/d/a;.w:()V` @kind direct;
  #L13ccda.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13ccde.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L13cce2.  goto L13cb7c;
  #L13cce6.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L13ccea.  v0:= v1;
  #L13ccec.  goto L13cc50;
  #L13ccee.  v0:= -1I;
  #L13ccf0.  goto L13cc50;
  #L13ccf2.  v1:= v2;
  #L13ccf4.  goto L13cb7c;
  #L13ccf8.  switch v0
                  | 42 => goto L13cc6a
                  | 47 => goto L13cca4
                  | else => goto L13cc66;
}
procedure `java.io.IOException` `b`(`com.b.a.d.a` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L13cd1c.  v0:= new `com.b.a.d.d`;
  #L13cd20.  v1:= new `java.lang.StringBuilder`;
  #L13cd24.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13cd2a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13cd30.  v1:= temp @kind object;
  #L13cd32.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13cd38.  v2:= temp @kind object;
  #L13cd3a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13cd40.  v1:= temp @kind object;
  #L13cd42.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13cd48.  v1:= temp @kind object;
  #L13cd4a.  call `<init>`(v0, v1) @signature `Lcom/b/a/d/d;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13cd50.  throw v0;
}
procedure `java.lang.String` `b`(`com.b.a.d.a` v7 @kind this, `char` v8 ) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13cd64.  v4:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13cd68.  v5:= new `java.lang.StringBuilder`;
  #L13cd6c.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13cd72.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13cd76.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L13cd7a.  v3:= v0;
  #L13cd7c.  if v3 >= v1 then goto L13cdf8;
  #L13cd80.  v2:= v3 + 1;
  #L13cd84.  v3:= v4[v3] @kind char;
  #L13cd88.  if v3 != v8 then goto L13cda8;
  #L13cd8c.  v7.`com.b.a.d.a.f` @type ^`int` := v2;
  #L13cd90.  v1:= v2 - v0 @kind int;
  #L13cd94.  v1:= v1 + -1;
  #L13cd98.  call temp:= `append`(v5, v4, v0, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L13cd9e.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13cda4.  v0:= temp @kind object;
  #L13cda6.  return v0 @kind object;
  #L13cda8.  v6:= 92I;
  #L13cdac.  if v3 != v6 then goto L13cdde;
  #L13cdb0.  v7.`com.b.a.d.a.f` @type ^`int` := v2;
  #L13cdb4.  v1:= v2 - v0 @kind int;
  #L13cdb8.  v1:= v1 + -1;
  #L13cdbc.  call temp:= `append`(v5, v4, v0, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L13cdc2.  call temp:= `y`(v7) @signature `Lcom/b/a/d/a;.y:()C` @kind direct;
  #L13cdc8.  v0:= temp;
  #L13cdca.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13cdd0.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13cdd4.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L13cdd8.  v2:= v0;
  #L13cdda.  v3:= v2;
  #L13cddc.  goto L13cd7c;
  #L13cdde.  v6:= 10I;
  #L13cde2.  if v3 != v6 then goto L13cdda;
  #L13cde6.  v3:= v7.`com.b.a.d.a.h` @type ^`int`;
  #L13cdea.  v3:= v3 + 1;
  #L13cdee.  v7.`com.b.a.d.a.h` @type ^`int` := v3;
  #L13cdf2.  v7.`com.b.a.d.a.i` @type ^`int` := v2;
  #L13cdf6.  goto L13cdda;
  #L13cdf8.  v1:= v3 - v0 @kind int;
  #L13cdfc.  call temp:= `append`(v5, v4, v0, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L13ce02.  v7.`com.b.a.d.a.f` @type ^`int` := v3;
  #L13ce06.  v0:= 1I;
  #L13ce08.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13ce0e.  v0:= temp;
  #L13ce10.  if v0 != 0 then goto L13cd72;
  #L13ce14.  v0:= "Unterminated string" @kind object;
  #L13ce18.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L13ce1e.  v0:= temp @kind object;
  #L13ce20.  throw v0;
}
procedure `boolean` `b`(`com.b.a.d.a` v6 @kind this, `int` v7 ) @signature `Lcom/b/a/d/a;.b:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13ce34.  v0:= 0I;
  #L13ce36.  v1:= v6.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13ce3a.  v2:= v6.`com.b.a.d.a.i` @type ^`int`;
  #L13ce3e.  v3:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L13ce42.  v2:= v2 - v3 @kind int;
  #L13ce44.  v6.`com.b.a.d.a.i` @type ^`int` := v2;
  #L13ce48.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L13ce4c.  v3:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L13ce50.  if v2 == v3 then goto L13ceea;
  #L13ce54.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L13ce58.  v3:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L13ce5c.  v2:= v2 - v3 @kind int;
  #L13ce5e.  v6.`com.b.a.d.a.g` @type ^`int` := v2;
  #L13ce62.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L13ce66.  v3:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L13ce6a.  call `arraycopy`(v1, v2, v1, v0, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L13ce70.  v6.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13ce74.  v2:= v6.`com.b.a.d.a.c` @type ^`java.io.Reader` @kind object;
  #L13ce78.  v3:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L13ce7c.  v4:= length @variable v1;
  #L13ce7e.  v5:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L13ce82.  v4:= v4 - v5 @kind int;
  #L13ce84.  call temp:= `read`(v2, v1, v3, v4) @signature `Ljava/io/Reader;.read:([CII)I` @kind virtual;
  #L13ce8a.  v2:= temp;
  #L13ce8c.  v3:= -1I;
  #L13ce8e.  if v2 == v3 then goto L13cee8;
  #L13ce92.  v3:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L13ce96.  v2:= v2 + v3 @kind int;
  #L13ce98.  v6.`com.b.a.d.a.g` @type ^`int` := v2;
  #L13ce9c.  v2:= v6.`com.b.a.d.a.h` @type ^`int`;
  #L13cea0.  if v2 != 0 then goto L13cede;
  #L13cea4.  v2:= v6.`com.b.a.d.a.i` @type ^`int`;
  #L13cea8.  if v2 != 0 then goto L13cede;
  #L13ceac.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L13ceb0.  if v2 <= 0 then goto L13cede;
  #L13ceb4.  v2:= v1[v0] @kind char;
  #L13ceb8.  v3:= 65279I;
  #L13cebe.  if v2 != v3 then goto L13cede;
  #L13cec2.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L13cec6.  v2:= v2 + 1;
  #L13ceca.  v6.`com.b.a.d.a.f` @type ^`int` := v2;
  #L13cece.  v2:= v6.`com.b.a.d.a.i` @type ^`int`;
  #L13ced2.  v2:= v2 + 1;
  #L13ced6.  v6.`com.b.a.d.a.i` @type ^`int` := v2;
  #L13ceda.  v7:= v7 + 1;
  #L13cede.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L13cee2.  if v2 < v7 then goto L13ce74;
  #L13cee6.  v0:= 1I;
  #L13cee8.  return v0;
  #L13ceea.  v6.`com.b.a.d.a.g` @type ^`int` := v0;
  #L13ceee.  goto L13ce70;
}
procedure `void` `c`(`com.b.a.d.a` v5 @kind this, `char` v6 ) @signature `Lcom/b/a/d/a;.c:(C)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13cf00.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13cf04.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13cf08.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L13cf0c.  v2:= v1;
  #L13cf0e.  if v2 >= v0 then goto L13cf5c;
  #L13cf12.  v1:= v2 + 1;
  #L13cf16.  v2:= v3[v2] @kind char;
  #L13cf1a.  if v2 != v6 then goto L13cf24;
  #L13cf1e.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L13cf22.  return @kind void;
  #L13cf24.  v4:= 92I;
  #L13cf28.  if v2 != v4 then goto L13cf42;
  #L13cf2c.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L13cf30.  call temp:= `y`(v5) @signature `Lcom/b/a/d/a;.y:()C` @kind direct;
  #L13cf36.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13cf3a.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L13cf3e.  v2:= v1;
  #L13cf40.  goto L13cf0e;
  #L13cf42.  v4:= 10I;
  #L13cf46.  if v2 != v4 then goto L13cf3e;
  #L13cf4a.  v2:= v5.`com.b.a.d.a.h` @type ^`int`;
  #L13cf4e.  v2:= v2 + 1;
  #L13cf52.  v5.`com.b.a.d.a.h` @type ^`int` := v2;
  #L13cf56.  v5.`com.b.a.d.a.i` @type ^`int` := v1;
  #L13cf5a.  goto L13cf3e;
  #L13cf5c.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L13cf60.  v0:= 1I;
  #L13cf62.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13cf68.  v0:= temp;
  #L13cf6a.  if v0 != 0 then goto L13cf04;
  #L13cf6e.  v0:= "Unterminated string" @kind object;
  #L13cf72.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L13cf78.  v0:= temp @kind object;
  #L13cf7a.  throw v0;
}
procedure `int` `o`(`com.b.a.d.a` v8 @kind this) @signature `Lcom/b/a/d/a;.o:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L13cf8c.  v3:= 0I;
  #L13cf8e.  v0:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13cf92.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13cf96.  v0:= v0[v1] @kind char;
  #L13cf9a.  v1:= 116I;
  #L13cf9e.  if v0 == v1 then goto L13cfaa;
  #L13cfa2.  v1:= 84I;
  #L13cfa6.  if v0 != v1 then goto L13cfe4;
  #L13cfaa.  v2:= "true" @kind object;
  #L13cfae.  v1:= "TRUE" @kind object;
  #L13cfb2.  v0:= 5I;
  #L13cfb4.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13cfba.  v5:= temp;
  #L13cfbc.  v4:= 1I;
  #L13cfbe.  if v4 >= v5 then goto L13d050;
  #L13cfc2.  v6:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13cfc6.  v6:= v6 + v4 @kind int;
  #L13cfc8.  v7:= v8.`com.b.a.d.a.g` @type ^`int`;
  #L13cfcc.  if v6 < v7 then goto L13d020;
  #L13cfd0.  v6:= v4 + 1;
  #L13cfd4.  call temp:= `b`(v8, v6) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13cfda.  v6:= temp;
  #L13cfdc.  if v6 != 0 then goto L13d020;
  #L13cfe0.  v0:= v3;
  #L13cfe2.  return v0;
  #L13cfe4.  v1:= 102I;
  #L13cfe8.  if v0 == v1 then goto L13cff4;
  #L13cfec.  v1:= 70I;
  #L13cff0.  if v0 != v1 then goto L13d000;
  #L13cff4.  v2:= "false" @kind object;
  #L13cff8.  v1:= "FALSE" @kind object;
  #L13cffc.  v0:= 6I;
  #L13cffe.  goto L13cfb4;
  #L13d000.  v1:= 110I;
  #L13d004.  if v0 == v1 then goto L13d010;
  #L13d008.  v1:= 78I;
  #L13d00c.  if v0 != v1 then goto L13d01c;
  #L13d010.  v2:= "null" @kind object;
  #L13d014.  v1:= "NULL" @kind object;
  #L13d018.  v0:= 7I;
  #L13d01a.  goto L13cfb4;
  #L13d01c.  v0:= v3;
  #L13d01e.  goto L13cfe2;
  #L13d020.  v6:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13d024.  v7:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13d028.  v7:= v7 + v4 @kind int;
  #L13d02a.  v6:= v6[v7] @kind char;
  #L13d02e.  call temp:= `charAt`(v2, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13d034.  v7:= temp;
  #L13d036.  if v6 == v7 then goto L13d04a;
  #L13d03a.  call temp:= `charAt`(v1, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13d040.  v7:= temp;
  #L13d042.  if v6 == v7 then goto L13d04a;
  #L13d046.  v0:= v3;
  #L13d048.  goto L13cfe2;
  #L13d04a.  v4:= v4 + 1;
  #L13d04e.  goto L13cfbe;
  #L13d050.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13d054.  v1:= v1 + v5 @kind int;
  #L13d056.  v2:= v8.`com.b.a.d.a.g` @type ^`int`;
  #L13d05a.  if v1 < v2 then goto L13d06e;
  #L13d05e.  v1:= v5 + 1;
  #L13d062.  call temp:= `b`(v8, v1) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13d068.  v1:= temp;
  #L13d06a.  if v1 == 0 then goto L13d08c;
  #L13d06e.  v1:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13d072.  v2:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13d076.  v2:= v2 + v5 @kind int;
  #L13d078.  v1:= v1[v2] @kind char;
  #L13d07c.  call temp:= `a`(v8, v1) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L13d082.  v1:= temp;
  #L13d084.  if v1 == 0 then goto L13d08c;
  #L13d088.  v0:= v3;
  #L13d08a.  goto L13cfe2;
  #L13d08c.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13d090.  v1:= v1 + v5 @kind int;
  #L13d092.  v8.`com.b.a.d.a.f` @type ^`int` := v1;
  #L13d096.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13d09a.  goto L13cfe2;
}
procedure `int` `s`(`com.b.a.d.a` v15 @kind this) @signature `Lcom/b/a/d/a;.s:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L13d0ac.  v11:= v15.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13d0b0.  v2:= v15.`com.b.a.d.a.f` @type ^`int`;
  #L13d0b4.  v1:= v15.`com.b.a.d.a.g` @type ^`int`;
  #L13d0b8.  v6:= 0L;
  #L13d0bc.  v5:= 0I;
  #L13d0be.  v4:= 1I;
  #L13d0c0.  v3:= 0I;
  #L13d0c2.  v0:= 0I;
  #L13d0c4.  v10:= v0;
  #L13d0c6.  v0:= v1;
  #L13d0c8.  v1:= v2;
  #L13d0ca.  v2:= v1 + v10 @kind int;
  #L13d0ce.  if v2 != v0 then goto L13d12a;
  #L13d0d2.  v0:= length @variable v11;
  #L13d0d4.  if v10 != v0 then goto L13d0dc;
  #L13d0d8.  v0:= 0I;
  #L13d0da.  return v0;
  #L13d0dc.  v0:= v10 + 1;
  #L13d0e0.  call temp:= `b`(v15, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13d0e6.  v0:= temp;
  #L13d0e8.  if v0 != 0 then goto L13d122;
  #L13d0ec.  v0:= 2I;
  #L13d0ee.  if v3 != v0 then goto L13d26a;
  #L13d0f2.  if v4 == 0 then goto L13d26a;
  #L13d0f6.  v0:= -9223372036854775808L;
  #L13d0fa.  v0:= lcmp(v6, v0);
  #L13d0fe.  if v0 != 0 then goto L13d106;
  #L13d102.  if v5 == 0 then goto L13d26a;
  #L13d106.  if v5 == 0 then goto L13d264;
  #L13d10a.  v15.`com.b.a.d.a.j` @type ^`long` := v6 @kind wide;
  #L13d10e.  v0:= v15.`com.b.a.d.a.f` @type ^`int`;
  #L13d112.  v0:= v0 + v10 @kind int;
  #L13d114.  v15.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13d118.  v0:= 15I;
  #L13d11c.  v15.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13d120.  goto L13d0da;
  #L13d122.  v1:= v15.`com.b.a.d.a.f` @type ^`int`;
  #L13d126.  v0:= v15.`com.b.a.d.a.g` @type ^`int`;
  #L13d12a.  v2:= v1 + v10 @kind int;
  #L13d12e.  v2:= v11[v2] @kind char;
  #L13d132.  goto L13d29c;
  #L13d138.  v8:= 48I;
  #L13d13c.  if v2 < v8 then goto L13d148;
  #L13d140.  v8:= 57I;
  #L13d144.  if v2 <= v8 then goto L13d1c2;
  #L13d148.  call temp:= `a`(v15, v2) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L13d14e.  v0:= temp;
  #L13d150.  if v0 == 0 then goto L13d0ec;
  #L13d154.  v0:= 0I;
  #L13d156.  goto L13d0da;
  #L13d158.  if v3 != 0 then goto L13d174;
  #L13d15c.  v3:= 1I;
  #L13d15e.  v2:= 1I;
  #L13d160.  v14:= v4;
  #L13d162.  v4:= v3;
  #L13d164.  v3:= v14;
  #L13d166.  v5:= v10 + 1;
  #L13d16a.  v10:= v5;
  #L13d16c.  v5:= v4;
  #L13d16e.  v4:= v3;
  #L13d170.  v3:= v2;
  #L13d172.  goto L13d0ca;
  #L13d174.  v2:= 5I;
  #L13d176.  if v3 != v2 then goto L13d182;
  #L13d17a.  v2:= 6I;
  #L13d17c.  v3:= v4;
  #L13d17e.  v4:= v5;
  #L13d180.  goto L13d166;
  #L13d182.  v0:= 0I;
  #L13d184.  goto L13d0da;
  #L13d186.  v2:= 5I;
  #L13d188.  if v3 != v2 then goto L13d194;
  #L13d18c.  v2:= 6I;
  #L13d18e.  v3:= v4;
  #L13d190.  v4:= v5;
  #L13d192.  goto L13d166;
  #L13d194.  v0:= 0I;
  #L13d196.  goto L13d0da;
  #L13d198.  v2:= 2I;
  #L13d19a.  if v3 == v2 then goto L13d1a4;
  #L13d19e.  v2:= 4I;
  #L13d1a0.  if v3 != v2 then goto L13d1ac;
  #L13d1a4.  v2:= 5I;
  #L13d1a6.  v3:= v4;
  #L13d1a8.  v4:= v5;
  #L13d1aa.  goto L13d166;
  #L13d1ac.  v0:= 0I;
  #L13d1ae.  goto L13d0da;
  #L13d1b0.  v2:= 2I;
  #L13d1b2.  if v3 != v2 then goto L13d1be;
  #L13d1b6.  v2:= 3I;
  #L13d1b8.  v3:= v4;
  #L13d1ba.  v4:= v5;
  #L13d1bc.  goto L13d166;
  #L13d1be.  v0:= 0I;
  #L13d1c0.  goto L13d0da;
  #L13d1c2.  v8:= 1I;
  #L13d1c4.  if v3 == v8 then goto L13d1cc;
  #L13d1c8.  if v3 != 0 then goto L13d1dc;
  #L13d1cc.  v2:= v2 + -48;
  #L13d1d0.  v2:= -v2 @kind int;
  #L13d1d2.  v6:= (`long`) v2 @kind i2l;
  #L13d1d4.  v2:= 2I;
  #L13d1d6.  v3:= v4;
  #L13d1d8.  v4:= v5;
  #L13d1da.  goto L13d166;
  #L13d1dc.  v8:= 2I;
  #L13d1de.  if v3 != v8 then goto L13d242;
  #L13d1e2.  v8:= 0L;
  #L13d1e6.  v8:= lcmp(v6, v8);
  #L13d1ea.  if v8 != 0 then goto L13d1f4;
  #L13d1ee.  v0:= 0I;
  #L13d1f0.  goto L13d0da;
  #L13d1f4.  v8:= 10L;
  #L13d1f8.  v8:= v8 * v6 @kind long;
  #L13d1fa.  v2:= v2 + -48;
  #L13d1fe.  v12:= (`long`) v2 @kind i2l;
  #L13d200.  v8:= v8 - v12 @kind long;
  #L13d202.  v12:= -922337203685477580L;
  #L13d20c.  v2:= lcmp(v6, v12);
  #L13d210.  if v2 > 0 then goto L13d22e;
  #L13d214.  v12:= -922337203685477580L;
  #L13d21e.  v2:= lcmp(v6, v12);
  #L13d222.  if v2 != 0 then goto L13d23e;
  #L13d226.  v2:= lcmp(v8, v6);
  #L13d22a.  if v2 >= 0 then goto L13d23e;
  #L13d22e.  v2:= 1I;
  #L13d230.  v2:= v2 ^& v4 @kind int;
  #L13d232.  v4:= v5;
  #L13d234.  v6:= v8 @kind wide;
  #L13d236.  v14:= v3;
  #L13d238.  v3:= v2;
  #L13d23a.  v2:= v14;
  #L13d23c.  goto L13d166;
  #L13d23e.  v2:= 0I;
  #L13d240.  goto L13d230;
  #L13d242.  v2:= 3I;
  #L13d244.  if v3 != v2 then goto L13d250;
  #L13d248.  v2:= 4I;
  #L13d24a.  v3:= v4;
  #L13d24c.  v4:= v5;
  #L13d24e.  goto L13d166;
  #L13d250.  v2:= 5I;
  #L13d252.  if v3 == v2 then goto L13d25c;
  #L13d256.  v2:= 6I;
  #L13d258.  if v3 != v2 then goto L13d292;
  #L13d25c.  v2:= 7I;
  #L13d25e.  v3:= v4;
  #L13d260.  v4:= v5;
  #L13d262.  goto L13d166;
  #L13d264.  v6:= -v6 @kind long;
  #L13d266.  goto L13d10a;
  #L13d26a.  v0:= 2I;
  #L13d26c.  if v3 == v0 then goto L13d27c;
  #L13d270.  v0:= 4I;
  #L13d272.  if v3 == v0 then goto L13d27c;
  #L13d276.  v0:= 7I;
  #L13d278.  if v3 != v0 then goto L13d28c;
  #L13d27c.  v15.`com.b.a.d.a.k` @type ^`int` := v10;
  #L13d280.  v0:= 16I;
  #L13d284.  v15.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13d288.  goto L13d0da;
  #L13d28c.  v0:= 0I;
  #L13d28e.  goto L13d0da;
  #L13d292.  v2:= v3;
  #L13d294.  v3:= v4;
  #L13d296.  v4:= v5;
  #L13d298.  goto L13d166;
  #L13d29c.  switch v2
                  | 43 => goto L13d186
                  | 45 => goto L13d158
                  | 46 => goto L13d1b0
                  | 69 => goto L13d198
                  | 101 => goto L13d198
                  | else => goto L13d138;
}
procedure `java.lang.String` `t`(`com.b.a.d.a` v5 @kind this) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13d2d8.  v2:= 0I;
  #L13d2da.  v0:= 0I;
  #L13d2dc.  v1:= v2;
  #L13d2de.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13d2e2.  v3:= v3 + v1 @kind int;
  #L13d2e4.  v4:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L13d2e8.  if v3 >= v4 then goto L13d32e;
  #L13d2ec.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13d2f0.  v4:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13d2f4.  v4:= v4 + v1 @kind int;
  #L13d2f6.  v3:= v3[v4] @kind char;
  #L13d2fa.  goto L13d3a0;
  #L13d300.  v1:= v1 + 1;
  #L13d304.  goto L13d2de;
  #L13d306.  call `v`(v5) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L13d30c.  if v0 != 0 then goto L13d382;
  #L13d310.  v0:= new `java.lang.String`;
  #L13d314.  v2:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13d318.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13d31c.  call `<init>`(v0, v2, v3, v1) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L13d322.  v2:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13d326.  v1:= v1 + v2 @kind int;
  #L13d328.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L13d32c.  return v0 @kind object;
  #L13d32e.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13d332.  v3:= length @variable v3;
  #L13d334.  if v1 >= v3 then goto L13d34a;
  #L13d338.  v3:= v1 + 1;
  #L13d33c.  call temp:= `b`(v5, v3) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13d342.  v3:= temp;
  #L13d344.  if v3 == 0 then goto L13d30c;
  #L13d348.  goto L13d2de;
  #L13d34a.  if v0 != 0 then goto L13d358;
  #L13d34e.  v0:= new `java.lang.StringBuilder`;
  #L13d352.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13d358.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13d35c.  v4:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13d360.  call temp:= `append`(v0, v3, v4, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d366.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13d36a.  v1:= v1 + v3 @kind int;
  #L13d36c.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L13d370.  v1:= 1I;
  #L13d372.  call temp:= `b`(v5, v1) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13d378.  v1:= temp;
  #L13d37a.  if v1 != 0 then goto L13d39a;
  #L13d37e.  v1:= v2;
  #L13d380.  goto L13d30c;
  #L13d382.  v2:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13d386.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L13d38a.  call temp:= `append`(v0, v2, v3, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d390.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13d396.  v0:= temp @kind object;
  #L13d398.  goto L13d322;
  #L13d39a.  v1:= v2;
  #L13d39c.  goto L13d2de;
  #L13d39e.  
  #L13d3a0.  switch v3
                  | 9 => goto L13d30c
                  | 10 => goto L13d30c
                  | 12 => goto L13d30c
                  | 13 => goto L13d30c
                  | 32 => goto L13d30c
                  | 35 => goto L13d306
                  | 44 => goto L13d30c
                  | 47 => goto L13d306
                  | 58 => goto L13d30c
                  | 59 => goto L13d306
                  | 61 => goto L13d306
                  | 91 => goto L13d30c
                  | 92 => goto L13d306
                  | 93 => goto L13d30c
                  | 123 => goto L13d30c
                  | 125 => goto L13d30c
                  | else => goto L13d300;
}
procedure `void` `u`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.u:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L13d434.  v0:= 0I;
  #L13d436.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L13d43a.  v1:= v1 + v0 @kind int;
  #L13d43c.  v2:= v3.`com.b.a.d.a.g` @type ^`int`;
  #L13d440.  if v1 >= v2 then goto L13d470;
  #L13d444.  v1:= v3.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13d448.  v2:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L13d44c.  v2:= v2 + v0 @kind int;
  #L13d44e.  v1:= v1[v2] @kind char;
  #L13d452.  goto L13d48c;
  #L13d458.  v0:= v0 + 1;
  #L13d45c.  goto L13d436;
  #L13d45e.  call `v`(v3) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L13d464.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L13d468.  v0:= v0 + v1 @kind int;
  #L13d46a.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13d46e.  return @kind void;
  #L13d470.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L13d474.  v0:= v0 + v1 @kind int;
  #L13d476.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13d47a.  v0:= 1I;
  #L13d47c.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13d482.  v0:= temp;
  #L13d484.  if v0 != 0 then goto L13d434;
  #L13d488.  goto L13d46e;
  #L13d48a.  
  #L13d48c.  switch v1
                  | 9 => goto L13d464
                  | 10 => goto L13d464
                  | 12 => goto L13d464
                  | 13 => goto L13d464
                  | 32 => goto L13d464
                  | 35 => goto L13d45e
                  | 44 => goto L13d464
                  | 47 => goto L13d45e
                  | 58 => goto L13d464
                  | 59 => goto L13d45e
                  | 61 => goto L13d45e
                  | 91 => goto L13d464
                  | 92 => goto L13d45e
                  | 93 => goto L13d464
                  | 123 => goto L13d464
                  | 125 => goto L13d464
                  | else => goto L13d458;
}
procedure `void` `v`(`com.b.a.d.a` v1 @kind this) @signature `Lcom/b/a/d/a;.v:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L13d520.  v0:= v1.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L13d524.  if v0 != 0 then goto L13d536;
  #L13d528.  v0:= "Use JsonReader.setLenient(true) to accept malformed JSON" @kind object;
  #L13d52c.  call temp:= `b`(v1, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L13d532.  v0:= temp @kind object;
  #L13d534.  throw v0;
  #L13d536.  return @kind void;
}
procedure `void` `w`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.w:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L13d548.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L13d54c.  v1:= v3.`com.b.a.d.a.g` @type ^`int`;
  #L13d550.  if v0 < v1 then goto L13d562;
  #L13d554.  v0:= 1I;
  #L13d556.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13d55c.  v0:= temp;
  #L13d55e.  if v0 == 0 then goto L13d592;
  #L13d562.  v0:= v3.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13d566.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L13d56a.  v2:= v1 + 1;
  #L13d56e.  v3.`com.b.a.d.a.f` @type ^`int` := v2;
  #L13d572.  v0:= v0[v1] @kind char;
  #L13d576.  v1:= 10I;
  #L13d57a.  if v0 != v1 then goto L13d594;
  #L13d57e.  v0:= v3.`com.b.a.d.a.h` @type ^`int`;
  #L13d582.  v0:= v0 + 1;
  #L13d586.  v3.`com.b.a.d.a.h` @type ^`int` := v0;
  #L13d58a.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L13d58e.  v3.`com.b.a.d.a.i` @type ^`int` := v0;
  #L13d592.  return @kind void;
  #L13d594.  v1:= 13I;
  #L13d598.  if v0 != v1 then goto L13d548;
  #L13d59c.  goto L13d592;
}
procedure `java.lang.String` `x`(`com.b.a.d.a` v4 @kind this) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13d5b0.  v0:= v4.`com.b.a.d.a.h` @type ^`int`;
  #L13d5b4.  v0:= v0 + 1;
  #L13d5b8.  v1:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L13d5bc.  v2:= v4.`com.b.a.d.a.i` @type ^`int`;
  #L13d5c0.  v1:= v1 - v2 @kind int;
  #L13d5c2.  v1:= v1 + 1;
  #L13d5c6.  v2:= new `java.lang.StringBuilder`;
  #L13d5ca.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13d5d0.  v3:= " at line " @kind object;
  #L13d5d4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d5da.  v2:= temp @kind object;
  #L13d5dc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d5e2.  v0:= temp @kind object;
  #L13d5e4.  v2:= " column " @kind object;
  #L13d5e8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d5ee.  v0:= temp @kind object;
  #L13d5f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d5f6.  v0:= temp @kind object;
  #L13d5f8.  v1:= " path " @kind object;
  #L13d5fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d602.  v0:= temp @kind object;
  #L13d604.  call temp:= `p`(v4) @signature `Lcom/b/a/d/a;.p:()Ljava/lang/String;` @kind virtual;
  #L13d60a.  v1:= temp @kind object;
  #L13d60c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d612.  v0:= temp @kind object;
  #L13d614.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13d61a.  v0:= temp @kind object;
  #L13d61c.  return v0 @kind object;
}
procedure `char` `y`(`com.b.a.d.a` v7 @kind this) @signature `Lcom/b/a/d/a;.y:()C` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13d630.  v5:= 4I;
  #L13d632.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13d636.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L13d63a.  if v0 != v1 then goto L13d65a;
  #L13d63e.  v0:= 1I;
  #L13d640.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13d646.  v0:= temp;
  #L13d648.  if v0 != 0 then goto L13d65a;
  #L13d64c.  v0:= "Unterminated escape sequence" @kind object;
  #L13d650.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L13d656.  v0:= temp @kind object;
  #L13d658.  throw v0;
  #L13d65a.  v0:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13d65e.  v1:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13d662.  v2:= v1 + 1;
  #L13d666.  v7.`com.b.a.d.a.f` @type ^`int` := v2;
  #L13d66a.  v0:= v0[v1] @kind char;
  #L13d66e.  goto L13d7b0;
  #L13d674.  v0:= "Invalid escape sequence" @kind object;
  #L13d678.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L13d67e.  v0:= temp @kind object;
  #L13d680.  throw v0;
  #L13d682.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13d686.  v0:= v0 + 4;
  #L13d68a.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L13d68e.  if v0 <= v1 then goto L13d6ac;
  #L13d692.  call temp:= `b`(v7, v5) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13d698.  v0:= temp;
  #L13d69a.  if v0 != 0 then goto L13d6ac;
  #L13d69e.  v0:= "Unterminated escape sequence" @kind object;
  #L13d6a2.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L13d6a8.  v0:= temp @kind object;
  #L13d6aa.  throw v0;
  #L13d6ac.  v1:= 0I;
  #L13d6ae.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13d6b2.  v2:= v0 + 4;
  #L13d6b6.  v6:= v0;
  #L13d6b8.  v0:= v1;
  #L13d6ba.  v1:= v6;
  #L13d6bc.  if v1 >= v2 then goto L13d76c;
  #L13d6c0.  v3:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13d6c4.  v3:= v3[v1] @kind char;
  #L13d6c8.  v0:= v0 ^< 4;
  #L13d6cc.  v0:= (`char`) v0 @kind i2c;
  #L13d6ce.  v4:= 48I;
  #L13d6d2.  if v3 < v4 then goto L13d6ec;
  #L13d6d6.  v4:= 57I;
  #L13d6da.  if v3 > v4 then goto L13d6ec;
  #L13d6de.  v3:= v3 + -48;
  #L13d6e2.  v0:= v0 + v3 @kind int;
  #L13d6e4.  v0:= (`char`) v0 @kind i2c;
  #L13d6e6.  v1:= v1 + 1;
  #L13d6ea.  goto L13d6bc;
  #L13d6ec.  v4:= 97I;
  #L13d6f0.  if v3 < v4 then goto L13d70a;
  #L13d6f4.  v4:= 102I;
  #L13d6f8.  if v3 > v4 then goto L13d70a;
  #L13d6fc.  v3:= v3 + -97;
  #L13d700.  v3:= v3 + 10;
  #L13d704.  v0:= v0 + v3 @kind int;
  #L13d706.  v0:= (`char`) v0 @kind i2c;
  #L13d708.  goto L13d6e6;
  #L13d70a.  v4:= 65I;
  #L13d70e.  if v3 < v4 then goto L13d728;
  #L13d712.  v4:= 70I;
  #L13d716.  if v3 > v4 then goto L13d728;
  #L13d71a.  v3:= v3 + -65;
  #L13d71e.  v3:= v3 + 10;
  #L13d722.  v0:= v0 + v3 @kind int;
  #L13d724.  v0:= (`char`) v0 @kind i2c;
  #L13d726.  goto L13d6e6;
  #L13d728.  v0:= new `java.lang.NumberFormatException`;
  #L13d72c.  v1:= new `java.lang.StringBuilder`;
  #L13d730.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13d736.  v2:= "\\u" @kind object;
  #L13d73a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d740.  v1:= temp @kind object;
  #L13d742.  v2:= new `java.lang.String`;
  #L13d746.  v3:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13d74a.  v4:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13d74e.  call `<init>`(v2, v3, v4, v5) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L13d754.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d75a.  v1:= temp @kind object;
  #L13d75c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13d762.  v1:= temp @kind object;
  #L13d764.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13d76a.  throw v0;
  #L13d76c.  v1:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13d770.  v1:= v1 + 4;
  #L13d774.  v7.`com.b.a.d.a.f` @type ^`int` := v1;
  #L13d778.  return v0;
  #L13d77a.  v0:= 9I;
  #L13d77e.  goto L13d778;
  #L13d780.  v0:= 8I;
  #L13d784.  goto L13d778;
  #L13d786.  v0:= 10I;
  #L13d78a.  goto L13d778;
  #L13d78c.  v0:= 13I;
  #L13d790.  goto L13d778;
  #L13d792.  v0:= 12I;
  #L13d796.  goto L13d778;
  #L13d798.  v1:= v7.`com.b.a.d.a.h` @type ^`int`;
  #L13d79c.  v1:= v1 + 1;
  #L13d7a0.  v7.`com.b.a.d.a.h` @type ^`int` := v1;
  #L13d7a4.  v1:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13d7a8.  v7.`com.b.a.d.a.i` @type ^`int` := v1;
  #L13d7ac.  goto L13d778;
  #L13d7ae.  
  #L13d7b0.  switch v0
                  | 10 => goto L13d798
                  | 34 => goto L13d778
                  | 39 => goto L13d778
                  | 47 => goto L13d778
                  | 92 => goto L13d778
                  | 98 => goto L13d780
                  | 102 => goto L13d792
                  | 110 => goto L13d786
                  | 114 => goto L13d78c
                  | 116 => goto L13d77a
                  | 117 => goto L13d682
                  | else => goto L13d674;
}
procedure `void` `z`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.z:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L13d81c.  v0:= 1I;
  #L13d81e.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L13d824.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L13d828.  v0:= v0 + -1;
  #L13d82c.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13d830.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L13d834.  v1:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L13d838.  v1:= length @variable v1;
  #L13d83a.  v0:= v0 + v1 @kind int;
  #L13d83c.  v1:= v3.`com.b.a.d.a.g` @type ^`int`;
  #L13d840.  if v0 <= v1 then goto L13d858;
  #L13d844.  v0:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L13d848.  v0:= length @variable v0;
  #L13d84a.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13d850.  v0:= temp;
  #L13d852.  if v0 != 0 then goto L13d858;
  #L13d856.  return @kind void;
  #L13d858.  v0:= 0I;
  #L13d85a.  v1:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L13d85e.  v1:= length @variable v1;
  #L13d860.  if v0 >= v1 then goto L13d884;
  #L13d864.  v1:= v3.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13d868.  v2:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L13d86c.  v2:= v2 + v0 @kind int;
  #L13d86e.  v1:= v1[v2] @kind char;
  #L13d872.  v2:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L13d876.  v2:= v2[v0] @kind char;
  #L13d87a.  if v1 != v2 then goto L13d856;
  #L13d87e.  v0:= v0 + 1;
  #L13d882.  goto L13d85a;
  #L13d884.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L13d888.  v1:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L13d88c.  v1:= length @variable v1;
  #L13d88e.  v0:= v0 + v1 @kind int;
  #L13d890.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13d894.  goto L13d856;
}
procedure `void` `a`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13d8a8.  v2:= 0I;
  #L13d8aa.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L13d8ae.  if v0 != 0 then goto L13d8ba;
  #L13d8b2.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L13d8b8.  v0:= temp;
  #L13d8ba.  v1:= 3I;
  #L13d8bc.  if v0 != v1 then goto L13d8de;
  #L13d8c0.  v0:= 1I;
  #L13d8c2.  call `a`(v3, v0) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L13d8c8.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13d8cc.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L13d8d0.  v1:= v1 + -1;
  #L13d8d4.  v0[v1]:= v2;
  #L13d8d8.  v3.`com.b.a.d.a.a` @type ^`int` := v2;
  #L13d8dc.  return @kind void;
  #L13d8de.  v0:= new `java.lang.IllegalStateException`;
  #L13d8e2.  v1:= new `java.lang.StringBuilder`;
  #L13d8e6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13d8ec.  v2:= "Expected BEGIN_ARRAY but was " @kind object;
  #L13d8f0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d8f6.  v1:= temp @kind object;
  #L13d8f8.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13d8fe.  v2:= temp @kind object;
  #L13d900.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d906.  v1:= temp @kind object;
  #L13d908.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13d90e.  v2:= temp @kind object;
  #L13d910.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d916.  v1:= temp @kind object;
  #L13d918.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13d91e.  v1:= temp @kind object;
  #L13d920.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13d926.  throw v0;
}
procedure `void` `a`(`com.b.a.d.a` v0 @kind this, `boolean` v1 ) @signature `Lcom/b/a/d/a;.a:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L13d938.  v0.`com.b.a.d.a.d` @type ^`boolean` := v1 @kind boolean;
  #L13d93c.  return @kind void;
}
procedure `void` `b`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13d950.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L13d954.  if v0 != 0 then goto L13d960;
  #L13d958.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L13d95e.  v0:= temp;
  #L13d960.  v1:= 4I;
  #L13d962.  if v0 != v1 then goto L13d992;
  #L13d966.  v0:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L13d96a.  v0:= v0 + -1;
  #L13d96e.  v3.`com.b.a.d.a.n` @type ^`int` := v0;
  #L13d972.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13d976.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L13d97a.  v1:= v1 + -1;
  #L13d97e.  v2:= v0[v1];
  #L13d982.  v2:= v2 + 1;
  #L13d986.  v0[v1]:= v2;
  #L13d98a.  v0:= 0I;
  #L13d98c.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13d990.  return @kind void;
  #L13d992.  v0:= new `java.lang.IllegalStateException`;
  #L13d996.  v1:= new `java.lang.StringBuilder`;
  #L13d99a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13d9a0.  v2:= "Expected END_ARRAY but was " @kind object;
  #L13d9a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d9aa.  v1:= temp @kind object;
  #L13d9ac.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13d9b2.  v2:= temp @kind object;
  #L13d9b4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d9ba.  v1:= temp @kind object;
  #L13d9bc.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13d9c2.  v2:= temp @kind object;
  #L13d9c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d9ca.  v1:= temp @kind object;
  #L13d9cc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13d9d2.  v1:= temp @kind object;
  #L13d9d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13d9da.  throw v0;
}
procedure `void` `c`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13d9ec.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L13d9f0.  if v0 != 0 then goto L13d9fc;
  #L13d9f4.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L13d9fa.  v0:= temp;
  #L13d9fc.  v1:= 1I;
  #L13d9fe.  if v0 != v1 then goto L13da12;
  #L13da02.  v0:= 3I;
  #L13da04.  call `a`(v3, v0) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L13da0a.  v0:= 0I;
  #L13da0c.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13da10.  return @kind void;
  #L13da12.  v0:= new `java.lang.IllegalStateException`;
  #L13da16.  v1:= new `java.lang.StringBuilder`;
  #L13da1a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13da20.  v2:= "Expected BEGIN_OBJECT but was " @kind object;
  #L13da24.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13da2a.  v1:= temp @kind object;
  #L13da2c.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13da32.  v2:= temp @kind object;
  #L13da34.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13da3a.  v1:= temp @kind object;
  #L13da3c.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13da42.  v2:= temp @kind object;
  #L13da44.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13da4a.  v1:= temp @kind object;
  #L13da4c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13da52.  v1:= temp @kind object;
  #L13da54.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13da5a.  throw v0;
}
procedure `void` `close`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13da6c.  v2:= 0I;
  #L13da6e.  v3.`com.b.a.d.a.a` @type ^`int` := v2;
  #L13da72.  v0:= v3.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L13da76.  v1:= 8I;
  #L13da7a.  v0[v2]:= v1;
  #L13da7e.  v0:= 1I;
  #L13da80.  v3.`com.b.a.d.a.n` @type ^`int` := v0;
  #L13da84.  v0:= v3.`com.b.a.d.a.c` @type ^`java.io.Reader` @kind object;
  #L13da88.  call `close`(v0) @signature `Ljava/io/Reader;.close:()V` @kind virtual;
  #L13da8e.  return @kind void;
}
procedure `void` `d`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13daa0.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L13daa4.  if v0 != 0 then goto L13dab0;
  #L13daa8.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L13daae.  v0:= temp;
  #L13dab0.  v1:= 2I;
  #L13dab2.  if v0 != v1 then goto L13daf0;
  #L13dab6.  v0:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L13daba.  v0:= v0 + -1;
  #L13dabe.  v3.`com.b.a.d.a.n` @type ^`int` := v0;
  #L13dac2.  v0:= v3.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L13dac6.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L13daca.  v2:= 0I;
  #L13dacc.  v0[v1]:= v2 @kind object;
  #L13dad0.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13dad4.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L13dad8.  v1:= v1 + -1;
  #L13dadc.  v2:= v0[v1];
  #L13dae0.  v2:= v2 + 1;
  #L13dae4.  v0[v1]:= v2;
  #L13dae8.  v0:= 0I;
  #L13daea.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13daee.  return @kind void;
  #L13daf0.  v0:= new `java.lang.IllegalStateException`;
  #L13daf4.  v1:= new `java.lang.StringBuilder`;
  #L13daf8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13dafe.  v2:= "Expected END_OBJECT but was " @kind object;
  #L13db02.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13db08.  v1:= temp @kind object;
  #L13db0a.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13db10.  v2:= temp @kind object;
  #L13db12.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13db18.  v1:= temp @kind object;
  #L13db1a.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13db20.  v2:= temp @kind object;
  #L13db22.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13db28.  v1:= temp @kind object;
  #L13db2a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13db30.  v1:= temp @kind object;
  #L13db32.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13db38.  throw v0;
}
procedure `boolean` `e`(`com.b.a.d.a` v2 @kind this) @signature `Lcom/b/a/d/a;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13db4c.  v0:= v2.`com.b.a.d.a.a` @type ^`int`;
  #L13db50.  if v0 != 0 then goto L13db5c;
  #L13db54.  call temp:= `r`(v2) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L13db5a.  v0:= temp;
  #L13db5c.  v1:= 2I;
  #L13db5e.  if v0 == v1 then goto L13db6c;
  #L13db62.  v1:= 4I;
  #L13db64.  if v0 == v1 then goto L13db6c;
  #L13db68.  v0:= 1I;
  #L13db6a.  return v0;
  #L13db6c.  v0:= 0I;
  #L13db6e.  goto L13db6a;
}
procedure `com.b.a.d.b` `f`(`com.b.a.d.a` v1 @kind this) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13db80.  v0:= v1.`com.b.a.d.a.a` @type ^`int`;
  #L13db84.  if v0 != 0 then goto L13db90;
  #L13db88.  call temp:= `r`(v1) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L13db8e.  v0:= temp;
  #L13db90.  goto L13dbe0;
  #L13db96.  v0:= new `java.lang.AssertionError`;
  #L13db9a.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L13dba0.  throw v0;
  #L13dba2.  v0:= `@@com.b.a.d.b.c` @type ^`com.b.a.d.b` @kind object;
  #L13dba6.  return v0 @kind object;
  #L13dba8.  v0:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L13dbac.  goto L13dba6;
  #L13dbae.  v0:= `@@com.b.a.d.b.a` @type ^`com.b.a.d.b` @kind object;
  #L13dbb2.  goto L13dba6;
  #L13dbb4.  v0:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L13dbb8.  goto L13dba6;
  #L13dbba.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L13dbbe.  goto L13dba6;
  #L13dbc0.  v0:= `@@com.b.a.d.b.h` @type ^`com.b.a.d.b` @kind object;
  #L13dbc4.  goto L13dba6;
  #L13dbc6.  v0:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L13dbca.  goto L13dba6;
  #L13dbcc.  v0:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L13dbd0.  goto L13dba6;
  #L13dbd2.  v0:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L13dbd6.  goto L13dba6;
  #L13dbd8.  v0:= `@@com.b.a.d.b.j` @type ^`com.b.a.d.b` @kind object;
  #L13dbdc.  goto L13dba6;
  #L13dbde.  
  #L13dbe0.  switch v0
                  | 1 => goto L13dba2
                  | 2 => goto L13dba8
                  | 3 => goto L13dbae
                  | 4 => goto L13dbb4
                  | 5 => goto L13dbc0
                  | 6 => goto L13dbc0
                  | 7 => goto L13dbc6
                  | 8 => goto L13dbcc
                  | 9 => goto L13dbcc
                  | 10 => goto L13dbcc
                  | 11 => goto L13dbcc
                  | 12 => goto L13dbba
                  | 13 => goto L13dbba
                  | 14 => goto L13dbba
                  | 15 => goto L13dbd2
                  | 16 => goto L13dbd2
                  | 17 => goto L13dbd8
                  | else => goto L13db96;
}
procedure `java.lang.String` `g`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.g:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13dc3c.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L13dc40.  if v0 != 0 then goto L13dc4c;
  #L13dc44.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L13dc4a.  v0:= temp;
  #L13dc4c.  v1:= 14I;
  #L13dc50.  if v0 != v1 then goto L13dc74;
  #L13dc54.  call temp:= `t`(v3) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L13dc5a.  v0:= temp @kind object;
  #L13dc5c.  v1:= 0I;
  #L13dc5e.  v3.`com.b.a.d.a.a` @type ^`int` := v1;
  #L13dc62.  v1:= v3.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L13dc66.  v2:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L13dc6a.  v2:= v2 + -1;
  #L13dc6e.  v1[v2]:= v0 @kind object;
  #L13dc72.  return v0 @kind object;
  #L13dc74.  v1:= 12I;
  #L13dc78.  if v0 != v1 then goto L13dc8a;
  #L13dc7c.  v0:= 39I;
  #L13dc80.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L13dc86.  v0:= temp @kind object;
  #L13dc88.  goto L13dc5c;
  #L13dc8a.  v1:= 13I;
  #L13dc8e.  if v0 != v1 then goto L13dca0;
  #L13dc92.  v0:= 34I;
  #L13dc96.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L13dc9c.  v0:= temp @kind object;
  #L13dc9e.  goto L13dc5c;
  #L13dca0.  v0:= new `java.lang.IllegalStateException`;
  #L13dca4.  v1:= new `java.lang.StringBuilder`;
  #L13dca8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13dcae.  v2:= "Expected a name but was " @kind object;
  #L13dcb2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13dcb8.  v1:= temp @kind object;
  #L13dcba.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13dcc0.  v2:= temp @kind object;
  #L13dcc2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13dcc8.  v1:= temp @kind object;
  #L13dcca.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13dcd0.  v2:= temp @kind object;
  #L13dcd2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13dcd8.  v1:= temp @kind object;
  #L13dcda.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13dce0.  v1:= temp @kind object;
  #L13dce2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13dce8.  throw v0;
}
procedure `java.lang.String` `h`(`com.b.a.d.a` v4 @kind this) @signature `Lcom/b/a/d/a;.h:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13dcfc.  v0:= v4.`com.b.a.d.a.a` @type ^`int`;
  #L13dd00.  if v0 != 0 then goto L13dd0c;
  #L13dd04.  call temp:= `r`(v4) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L13dd0a.  v0:= temp;
  #L13dd0c.  v1:= 10I;
  #L13dd10.  if v0 != v1 then goto L13dd3c;
  #L13dd14.  call temp:= `t`(v4) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L13dd1a.  v0:= temp @kind object;
  #L13dd1c.  v1:= 0I;
  #L13dd1e.  v4.`com.b.a.d.a.a` @type ^`int` := v1;
  #L13dd22.  v1:= v4.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13dd26.  v2:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L13dd2a.  v2:= v2 + -1;
  #L13dd2e.  v3:= v1[v2];
  #L13dd32.  v3:= v3 + 1;
  #L13dd36.  v1[v2]:= v3;
  #L13dd3a.  return v0 @kind object;
  #L13dd3c.  v1:= 8I;
  #L13dd40.  if v0 != v1 then goto L13dd52;
  #L13dd44.  v0:= 39I;
  #L13dd48.  call temp:= `b`(v4, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L13dd4e.  v0:= temp @kind object;
  #L13dd50.  goto L13dd1c;
  #L13dd52.  v1:= 9I;
  #L13dd56.  if v0 != v1 then goto L13dd68;
  #L13dd5a.  v0:= 34I;
  #L13dd5e.  call temp:= `b`(v4, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L13dd64.  v0:= temp @kind object;
  #L13dd66.  goto L13dd1c;
  #L13dd68.  v1:= 11I;
  #L13dd6c.  if v0 != v1 then goto L13dd7c;
  #L13dd70.  v0:= v4.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L13dd74.  v1:= 0I;
  #L13dd76.  v4.`com.b.a.d.a.l` @type ^`java.lang.String` := v1 @kind object;
  #L13dd7a.  goto L13dd1c;
  #L13dd7c.  v1:= 15I;
  #L13dd80.  if v0 != v1 then goto L13dd92;
  #L13dd84.  v0:= v4.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L13dd88.  call temp:= `toString`(v0) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L13dd8e.  v0:= temp @kind object;
  #L13dd90.  goto L13dd1c;
  #L13dd92.  v1:= 16I;
  #L13dd96.  if v0 != v1 then goto L13ddc0;
  #L13dd9a.  v0:= new `java.lang.String`;
  #L13dd9e.  v1:= v4.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13dda2.  v2:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L13dda6.  v3:= v4.`com.b.a.d.a.k` @type ^`int`;
  #L13ddaa.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L13ddb0.  v1:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L13ddb4.  v2:= v4.`com.b.a.d.a.k` @type ^`int`;
  #L13ddb8.  v1:= v1 + v2 @kind int;
  #L13ddba.  v4.`com.b.a.d.a.f` @type ^`int` := v1;
  #L13ddbe.  goto L13dd1c;
  #L13ddc0.  v0:= new `java.lang.IllegalStateException`;
  #L13ddc4.  v1:= new `java.lang.StringBuilder`;
  #L13ddc8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13ddce.  v2:= "Expected a string but was " @kind object;
  #L13ddd2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13ddd8.  v1:= temp @kind object;
  #L13ddda.  call temp:= `f`(v4) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13dde0.  v2:= temp @kind object;
  #L13dde2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13dde8.  v1:= temp @kind object;
  #L13ddea.  call temp:= `x`(v4) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13ddf0.  v2:= temp @kind object;
  #L13ddf2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13ddf8.  v1:= temp @kind object;
  #L13ddfa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13de00.  v1:= temp @kind object;
  #L13de02.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13de08.  throw v0;
}
procedure `boolean` `i`(`com.b.a.d.a` v4 @kind this) @signature `Lcom/b/a/d/a;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13de1c.  v0:= 0I;
  #L13de1e.  v1:= v4.`com.b.a.d.a.a` @type ^`int`;
  #L13de22.  if v1 != 0 then goto L13de2e;
  #L13de26.  call temp:= `r`(v4) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L13de2c.  v1:= temp;
  #L13de2e.  v2:= 5I;
  #L13de30.  if v1 != v2 then goto L13de54;
  #L13de34.  v4.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13de38.  v0:= v4.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13de3c.  v1:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L13de40.  v1:= v1 + -1;
  #L13de44.  v2:= v0[v1];
  #L13de48.  v2:= v2 + 1;
  #L13de4c.  v0[v1]:= v2;
  #L13de50.  v0:= 1I;
  #L13de52.  return v0;
  #L13de54.  v2:= 6I;
  #L13de56.  if v1 != v2 then goto L13de78;
  #L13de5a.  v4.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13de5e.  v1:= v4.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13de62.  v2:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L13de66.  v2:= v2 + -1;
  #L13de6a.  v3:= v1[v2];
  #L13de6e.  v3:= v3 + 1;
  #L13de72.  v1[v2]:= v3;
  #L13de76.  goto L13de52;
  #L13de78.  v0:= new `java.lang.IllegalStateException`;
  #L13de7c.  v1:= new `java.lang.StringBuilder`;
  #L13de80.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13de86.  v2:= "Expected a boolean but was " @kind object;
  #L13de8a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13de90.  v1:= temp @kind object;
  #L13de92.  call temp:= `f`(v4) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13de98.  v2:= temp @kind object;
  #L13de9a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13dea0.  v1:= temp @kind object;
  #L13dea2.  call temp:= `x`(v4) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13dea8.  v2:= temp @kind object;
  #L13deaa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13deb0.  v1:= temp @kind object;
  #L13deb2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13deb8.  v1:= temp @kind object;
  #L13deba.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13dec0.  throw v0;
}
procedure `void` `j`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.j:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13ded4.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L13ded8.  if v0 != 0 then goto L13dee4;
  #L13dedc.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L13dee2.  v0:= temp;
  #L13dee4.  v1:= 7I;
  #L13dee6.  if v0 != v1 then goto L13df0a;
  #L13deea.  v0:= 0I;
  #L13deec.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13def0.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13def4.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L13def8.  v1:= v1 + -1;
  #L13defc.  v2:= v0[v1];
  #L13df00.  v2:= v2 + 1;
  #L13df04.  v0[v1]:= v2;
  #L13df08.  return @kind void;
  #L13df0a.  v0:= new `java.lang.IllegalStateException`;
  #L13df0e.  v1:= new `java.lang.StringBuilder`;
  #L13df12.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13df18.  v2:= "Expected null but was " @kind object;
  #L13df1c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13df22.  v1:= temp @kind object;
  #L13df24.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13df2a.  v2:= temp @kind object;
  #L13df2c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13df32.  v1:= temp @kind object;
  #L13df34.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13df3a.  v2:= temp @kind object;
  #L13df3c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13df42.  v1:= temp @kind object;
  #L13df44.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13df4a.  v1:= temp @kind object;
  #L13df4c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13df52.  throw v0;
}
procedure `double` `k`(`com.b.a.d.a` v6 @kind this) @signature `Lcom/b/a/d/a;.k:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13df64.  v5:= 11I;
  #L13df68.  v2:= 8I;
  #L13df6c.  v4:= 0I;
  #L13df6e.  v0:= v6.`com.b.a.d.a.a` @type ^`int`;
  #L13df72.  if v0 != 0 then goto L13df7e;
  #L13df76.  call temp:= `r`(v6) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L13df7c.  v0:= temp;
  #L13df7e.  v1:= 15I;
  #L13df82.  if v0 != v1 then goto L13dfaa;
  #L13df86.  v6.`com.b.a.d.a.a` @type ^`int` := v4;
  #L13df8a.  v0:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13df8e.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13df92.  v1:= v1 + -1;
  #L13df96.  v2:= v0[v1];
  #L13df9a.  v2:= v2 + 1;
  #L13df9e.  v0[v1]:= v2;
  #L13dfa2.  v0:= v6.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L13dfa6.  v0:= (`double`) v0 @kind l2d;
  #L13dfa8.  return v0 @kind wide;
  #L13dfaa.  v1:= 16I;
  #L13dfae.  if v0 != v1 then goto L13e04c;
  #L13dfb2.  v0:= new `java.lang.String`;
  #L13dfb6.  v1:= v6.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13dfba.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L13dfbe.  v3:= v6.`com.b.a.d.a.k` @type ^`int`;
  #L13dfc2.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L13dfc8.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L13dfcc.  v0:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L13dfd0.  v1:= v6.`com.b.a.d.a.k` @type ^`int`;
  #L13dfd4.  v0:= v0 + v1 @kind int;
  #L13dfd6.  v6.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13dfda.  v6.`com.b.a.d.a.a` @type ^`int` := v5;
  #L13dfde.  v0:= v6.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L13dfe2.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L13dfe8.  v0:= temp @kind wide;
  #L13dfea.  v2:= v6.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L13dfee.  if v2 != 0 then goto L13e0d8;
  #L13dff2.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L13dff8.  v2:= temp;
  #L13dffa.  if v2 != 0 then goto L13e00a;
  #L13dffe.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L13e004.  v2:= temp;
  #L13e006.  if v2 == 0 then goto L13e0d8;
  #L13e00a.  v2:= new `com.b.a.d.d`;
  #L13e00e.  v3:= new `java.lang.StringBuilder`;
  #L13e012.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13e018.  v4:= "JSON forbids NaN and infinities: " @kind object;
  #L13e01c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e022.  v3:= temp @kind object;
  #L13e024.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e02a.  v0:= temp @kind object;
  #L13e02c.  call temp:= `x`(v6) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13e032.  v1:= temp @kind object;
  #L13e034.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e03a.  v0:= temp @kind object;
  #L13e03c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13e042.  v0:= temp @kind object;
  #L13e044.  call `<init>`(v2, v0) @signature `Lcom/b/a/d/d;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e04a.  throw v2;
  #L13e04c.  if v0 == v2 then goto L13e058;
  #L13e050.  v1:= 9I;
  #L13e054.  if v0 != v1 then goto L13e074;
  #L13e058.  if v0 != v2 then goto L13e06e;
  #L13e05c.  v0:= 39I;
  #L13e060.  call temp:= `b`(v6, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L13e066.  v0:= temp @kind object;
  #L13e068.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L13e06c.  goto L13dfda;
  #L13e06e.  v0:= 34I;
  #L13e072.  goto L13e060;
  #L13e074.  v1:= 10I;
  #L13e078.  if v0 != v1 then goto L13e08a;
  #L13e07c.  call temp:= `t`(v6) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L13e082.  v0:= temp @kind object;
  #L13e084.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L13e088.  goto L13dfda;
  #L13e08a.  if v0 == v5 then goto L13dfda;
  #L13e08e.  v0:= new `java.lang.IllegalStateException`;
  #L13e092.  v1:= new `java.lang.StringBuilder`;
  #L13e096.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13e09c.  v2:= "Expected a double but was " @kind object;
  #L13e0a0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e0a6.  v1:= temp @kind object;
  #L13e0a8.  call temp:= `f`(v6) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13e0ae.  v2:= temp @kind object;
  #L13e0b0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e0b6.  v1:= temp @kind object;
  #L13e0b8.  call temp:= `x`(v6) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13e0be.  v2:= temp @kind object;
  #L13e0c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e0c6.  v1:= temp @kind object;
  #L13e0c8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13e0ce.  v1:= temp @kind object;
  #L13e0d0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e0d6.  throw v0;
  #L13e0d8.  v2:= 0I;
  #L13e0da.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v2 @kind object;
  #L13e0de.  v6.`com.b.a.d.a.a` @type ^`int` := v4;
  #L13e0e2.  v2:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13e0e6.  v3:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13e0ea.  v3:= v3 + -1;
  #L13e0ee.  v4:= v2[v3];
  #L13e0f2.  v4:= v4 + 1;
  #L13e0f6.  v2[v3]:= v4;
  #L13e0fa.  goto L13dfa8;
}
procedure `long` `l`(`com.b.a.d.a` v7 @kind this) @signature `Lcom/b/a/d/a;.l:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13e110.  v3:= 10I;
  #L13e114.  v2:= 8I;
  #L13e118.  v6:= 0I;
  #L13e11a.  v0:= v7.`com.b.a.d.a.a` @type ^`int`;
  #L13e11e.  if v0 != 0 then goto L13e12a;
  #L13e122.  call temp:= `r`(v7) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L13e128.  v0:= temp;
  #L13e12a.  v1:= 15I;
  #L13e12e.  if v0 != v1 then goto L13e154;
  #L13e132.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L13e136.  v0:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13e13a.  v1:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L13e13e.  v1:= v1 + -1;
  #L13e142.  v2:= v0[v1];
  #L13e146.  v2:= v2 + 1;
  #L13e14a.  v0[v1]:= v2;
  #L13e14e.  v0:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L13e152.  return v0 @kind wide;
  #L13e154.  v1:= 16I;
  #L13e158.  if v0 != v1 then goto L13e1ea;
  #L13e15c.  v0:= new `java.lang.String`;
  #L13e160.  v1:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13e164.  v2:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13e168.  v3:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L13e16c.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L13e172.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L13e176.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13e17a.  v1:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L13e17e.  v0:= v0 + v1 @kind int;
  #L13e180.  v7.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13e184.  v0:= 11I;
  #L13e188.  v7.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13e18c.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L13e190.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L13e196.  v2:= temp @kind wide;
  #L13e198.  v0:= (`long`) v2 @kind d2l;
  #L13e19a.  v4:= (`double`) v0 @kind l2d;
  #L13e19c.  v2:= dcmpl(v4, v2);
  #L13e1a0.  if v2 == 0 then goto L13e2a0;
  #L13e1a4.  v0:= new `java.lang.NumberFormatException`;
  #L13e1a8.  v1:= new `java.lang.StringBuilder`;
  #L13e1ac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13e1b2.  v2:= "Expected a long but was " @kind object;
  #L13e1b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e1bc.  v1:= temp @kind object;
  #L13e1be.  v2:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L13e1c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e1c8.  v1:= temp @kind object;
  #L13e1ca.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13e1d0.  v2:= temp @kind object;
  #L13e1d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e1d8.  v1:= temp @kind object;
  #L13e1da.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13e1e0.  v1:= temp @kind object;
  #L13e1e2.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e1e8.  throw v0;
  #L13e1ea.  if v0 == v2 then goto L13e1fa;
  #L13e1ee.  v1:= 9I;
  #L13e1f2.  if v0 == v1 then goto L13e1fa;
  #L13e1f6.  if v0 != v3 then goto L13e256;
  #L13e1fa.  if v0 != v3 then goto L13e23a;
  #L13e1fe.  call temp:= `t`(v7) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L13e204.  v0:= temp @kind object;
  #L13e206.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #Try_start0.  
  #L13e20a.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L13e20e.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L13e214.  v0:= temp @kind wide;
  #L13e216.  v2:= 0I;
  #L13e218.  v7.`com.b.a.d.a.a` @type ^`int` := v2;
  #L13e21c.  v2:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13e220.  v3:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L13e224.  v3:= v3 + -1;
  #L13e228.  v4:= v2[v3];
  #L13e22c.  v4:= v4 + 1;
  #L13e230.  v2[v3]:= v4;
  #Try_end0.  
  #L13e234.  goto L13e152;
  #L13e236.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L13e238.  goto L13e184;
  #L13e23a.  if v0 != v2 then goto L13e250;
  #L13e23e.  v0:= 39I;
  #L13e242.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L13e248.  v0:= temp @kind object;
  #L13e24a.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L13e24e.  goto L13e20a;
  #L13e250.  v0:= 34I;
  #L13e254.  goto L13e242;
  #L13e256.  v0:= new `java.lang.IllegalStateException`;
  #L13e25a.  v1:= new `java.lang.StringBuilder`;
  #L13e25e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13e264.  v2:= "Expected a long but was " @kind object;
  #L13e268.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e26e.  v1:= temp @kind object;
  #L13e270.  call temp:= `f`(v7) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13e276.  v2:= temp @kind object;
  #L13e278.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e27e.  v1:= temp @kind object;
  #L13e280.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13e286.  v2:= temp @kind object;
  #L13e288.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e28e.  v1:= temp @kind object;
  #L13e290.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13e296.  v1:= temp @kind object;
  #L13e298.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e29e.  throw v0;
  #L13e2a0.  v2:= 0I;
  #L13e2a2.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v2 @kind object;
  #L13e2a6.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L13e2aa.  v2:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13e2ae.  v3:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L13e2b2.  v3:= v3 + -1;
  #L13e2b6.  v4:= v2[v3];
  #L13e2ba.  v4:= v4 + 1;
  #L13e2be.  v2[v3]:= v4;
  #L13e2c2.  goto L13e152;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L13e236;
}
procedure `int` `m`(`com.b.a.d.a` v7 @kind this) @signature `Lcom/b/a/d/a;.m:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13e2e8.  v3:= 10I;
  #L13e2ec.  v2:= 8I;
  #L13e2f0.  v6:= 0I;
  #L13e2f2.  v0:= v7.`com.b.a.d.a.a` @type ^`int`;
  #L13e2f6.  if v0 != 0 then goto L13e302;
  #L13e2fa.  call temp:= `r`(v7) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L13e300.  v0:= temp;
  #L13e302.  v1:= 15I;
  #L13e306.  if v0 != v1 then goto L13e382;
  #L13e30a.  v0:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L13e30e.  v0:= (`int`) v0 @kind l2i;
  #L13e310.  v2:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L13e314.  v4:= (`long`) v0 @kind i2l;
  #L13e316.  v1:= lcmp(v2, v4);
  #L13e31a.  if v1 == 0 then goto L13e364;
  #L13e31e.  v0:= new `java.lang.NumberFormatException`;
  #L13e322.  v1:= new `java.lang.StringBuilder`;
  #L13e326.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13e32c.  v2:= "Expected an int but was " @kind object;
  #L13e330.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e336.  v1:= temp @kind object;
  #L13e338.  v2:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L13e33c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e342.  v1:= temp @kind object;
  #L13e344.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13e34a.  v2:= temp @kind object;
  #L13e34c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e352.  v1:= temp @kind object;
  #L13e354.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13e35a.  v1:= temp @kind object;
  #L13e35c.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e362.  throw v0;
  #L13e364.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L13e368.  v1:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13e36c.  v2:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L13e370.  v2:= v2 + -1;
  #L13e374.  v3:= v1[v2];
  #L13e378.  v3:= v3 + 1;
  #L13e37c.  v1[v2]:= v3;
  #L13e380.  return v0;
  #L13e382.  v1:= 16I;
  #L13e386.  if v0 != v1 then goto L13e418;
  #L13e38a.  v0:= new `java.lang.String`;
  #L13e38e.  v1:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13e392.  v2:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13e396.  v3:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L13e39a.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L13e3a0.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L13e3a4.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L13e3a8.  v1:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L13e3ac.  v0:= v0 + v1 @kind int;
  #L13e3ae.  v7.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13e3b2.  v0:= 11I;
  #L13e3b6.  v7.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13e3ba.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L13e3be.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L13e3c4.  v2:= temp @kind wide;
  #L13e3c6.  v0:= (`int`) v2 @kind d2i;
  #L13e3c8.  v4:= (`double`) v0 @kind i2d;
  #L13e3ca.  v1:= dcmpl(v4, v2);
  #L13e3ce.  if v1 == 0 then goto L13e4ce;
  #L13e3d2.  v0:= new `java.lang.NumberFormatException`;
  #L13e3d6.  v1:= new `java.lang.StringBuilder`;
  #L13e3da.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13e3e0.  v2:= "Expected an int but was " @kind object;
  #L13e3e4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e3ea.  v1:= temp @kind object;
  #L13e3ec.  v2:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L13e3f0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e3f6.  v1:= temp @kind object;
  #L13e3f8.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13e3fe.  v2:= temp @kind object;
  #L13e400.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e406.  v1:= temp @kind object;
  #L13e408.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13e40e.  v1:= temp @kind object;
  #L13e410.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e416.  throw v0;
  #L13e418.  if v0 == v2 then goto L13e428;
  #L13e41c.  v1:= 9I;
  #L13e420.  if v0 == v1 then goto L13e428;
  #L13e424.  if v0 != v3 then goto L13e484;
  #L13e428.  if v0 != v3 then goto L13e468;
  #L13e42c.  call temp:= `t`(v7) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L13e432.  v0:= temp @kind object;
  #L13e434.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #Try_start0.  
  #L13e438.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L13e43c.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L13e442.  v0:= temp;
  #L13e444.  v1:= 0I;
  #L13e446.  v7.`com.b.a.d.a.a` @type ^`int` := v1;
  #L13e44a.  v1:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13e44e.  v2:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L13e452.  v2:= v2 + -1;
  #L13e456.  v3:= v1[v2];
  #L13e45a.  v3:= v3 + 1;
  #L13e45e.  v1[v2]:= v3;
  #Try_end0.  
  #L13e462.  goto L13e380;
  #L13e464.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L13e466.  goto L13e3b2;
  #L13e468.  if v0 != v2 then goto L13e47e;
  #L13e46c.  v0:= 39I;
  #L13e470.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L13e476.  v0:= temp @kind object;
  #L13e478.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L13e47c.  goto L13e438;
  #L13e47e.  v0:= 34I;
  #L13e482.  goto L13e470;
  #L13e484.  v0:= new `java.lang.IllegalStateException`;
  #L13e488.  v1:= new `java.lang.StringBuilder`;
  #L13e48c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13e492.  v2:= "Expected an int but was " @kind object;
  #L13e496.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e49c.  v1:= temp @kind object;
  #L13e49e.  call temp:= `f`(v7) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13e4a4.  v2:= temp @kind object;
  #L13e4a6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e4ac.  v1:= temp @kind object;
  #L13e4ae.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13e4b4.  v2:= temp @kind object;
  #L13e4b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e4bc.  v1:= temp @kind object;
  #L13e4be.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13e4c4.  v1:= temp @kind object;
  #L13e4c6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e4cc.  throw v0;
  #L13e4ce.  v1:= 0I;
  #L13e4d0.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v1 @kind object;
  #L13e4d4.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L13e4d8.  v1:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13e4dc.  v2:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L13e4e0.  v2:= v2 + -1;
  #L13e4e4.  v3:= v1[v2];
  #L13e4e8.  v3:= v3 + 1;
  #L13e4ec.  v1[v2]:= v3;
  #L13e4f0.  goto L13e380;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L13e464;
}
procedure `void` `n`(`com.b.a.d.a` v6 @kind this) @signature `Lcom/b/a/d/a;.n:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13e514.  v5:= 3I;
  #L13e516.  v4:= 1I;
  #L13e518.  v1:= 0I;
  #L13e51a.  v0:= v1;
  #L13e51c.  v2:= v6.`com.b.a.d.a.a` @type ^`int`;
  #L13e520.  if v2 != 0 then goto L13e52c;
  #L13e524.  call temp:= `r`(v6) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L13e52a.  v2:= temp;
  #L13e52c.  if v2 != v5 then goto L13e570;
  #L13e530.  call `a`(v6, v4) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L13e536.  v0:= v0 + 1;
  #L13e53a.  v6.`com.b.a.d.a.a` @type ^`int` := v1;
  #L13e53e.  if v0 != 0 then goto L13e51c;
  #L13e542.  v0:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13e546.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13e54a.  v1:= v1 + -1;
  #L13e54e.  v2:= v0[v1];
  #L13e552.  v2:= v2 + 1;
  #L13e556.  v0[v1]:= v2;
  #L13e55a.  v0:= v6.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L13e55e.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13e562.  v1:= v1 + -1;
  #L13e566.  v2:= "null" @kind object;
  #L13e56a.  v0[v1]:= v2 @kind object;
  #L13e56e.  return @kind void;
  #L13e570.  if v2 != v4 then goto L13e580;
  #L13e574.  call `a`(v6, v5) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L13e57a.  v0:= v0 + 1;
  #L13e57e.  goto L13e53a;
  #L13e580.  v3:= 4I;
  #L13e582.  if v2 != v3 then goto L13e598;
  #L13e586.  v2:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13e58a.  v2:= v2 + -1;
  #L13e58e.  v6.`com.b.a.d.a.n` @type ^`int` := v2;
  #L13e592.  v0:= v0 + -1;
  #L13e596.  goto L13e53a;
  #L13e598.  v3:= 2I;
  #L13e59a.  if v2 != v3 then goto L13e5b0;
  #L13e59e.  v2:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L13e5a2.  v2:= v2 + -1;
  #L13e5a6.  v6.`com.b.a.d.a.n` @type ^`int` := v2;
  #L13e5aa.  v0:= v0 + -1;
  #L13e5ae.  goto L13e53a;
  #L13e5b0.  v3:= 14I;
  #L13e5b4.  if v2 == v3 then goto L13e5c0;
  #L13e5b8.  v3:= 10I;
  #L13e5bc.  if v2 != v3 then goto L13e5c8;
  #L13e5c0.  call `u`(v6) @signature `Lcom/b/a/d/a;.u:()V` @kind direct;
  #L13e5c6.  goto L13e53a;
  #L13e5c8.  v3:= 8I;
  #L13e5cc.  if v2 == v3 then goto L13e5d8;
  #L13e5d0.  v3:= 12I;
  #L13e5d4.  if v2 != v3 then goto L13e5e4;
  #L13e5d8.  v2:= 39I;
  #L13e5dc.  call `c`(v6, v2) @signature `Lcom/b/a/d/a;.c:(C)V` @kind direct;
  #L13e5e2.  goto L13e53a;
  #L13e5e4.  v3:= 9I;
  #L13e5e8.  if v2 == v3 then goto L13e5f4;
  #L13e5ec.  v3:= 13I;
  #L13e5f0.  if v2 != v3 then goto L13e600;
  #L13e5f4.  v2:= 34I;
  #L13e5f8.  call `c`(v6, v2) @signature `Lcom/b/a/d/a;.c:(C)V` @kind direct;
  #L13e5fe.  goto L13e53a;
  #L13e600.  v3:= 16I;
  #L13e604.  if v2 != v3 then goto L13e53a;
  #L13e608.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L13e60c.  v3:= v6.`com.b.a.d.a.k` @type ^`int`;
  #L13e610.  v2:= v2 + v3 @kind int;
  #L13e612.  v6.`com.b.a.d.a.f` @type ^`int` := v2;
  #L13e616.  goto L13e53a;
}
procedure `java.lang.String` `p`(`com.b.a.d.a` v5 @kind this) @signature `Lcom/b/a/d/a;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13e628.  v0:= new `java.lang.StringBuilder`;
  #L13e62c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13e632.  v1:= 36I;
  #L13e636.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e63c.  v1:= temp @kind object;
  #L13e63e.  v0:= 0I;
  #L13e640.  v2:= v5.`com.b.a.d.a.n` @type ^`int`;
  #L13e644.  if v0 >= v2 then goto L13e6aa;
  #L13e648.  v3:= v5.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L13e64c.  v3:= v3[v0];
  #L13e650.  goto L13e6b4;
  #L13e656.  v0:= v0 + 1;
  #L13e65a.  goto L13e644;
  #L13e65c.  v3:= 91I;
  #L13e660.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e666.  v3:= temp @kind object;
  #L13e668.  v4:= v5.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L13e66c.  v4:= v4[v0];
  #L13e670.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e676.  v3:= temp @kind object;
  #L13e678.  v4:= 93I;
  #L13e67c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e682.  goto L13e656;
  #L13e684.  v3:= 46I;
  #L13e688.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e68e.  v3:= v5.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L13e692.  v3:= v3[v0] @kind object;
  #L13e696.  if v3 == 0 then goto L13e656;
  #L13e69a.  v3:= v5.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L13e69e.  v3:= v3[v0] @kind object;
  #L13e6a2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13e6a8.  goto L13e656;
  #L13e6aa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13e6b0.  v0:= temp @kind object;
  #L13e6b2.  return v0 @kind object;
  #L13e6b4.  switch v3
                  | 1 => goto L13e65c
                  | 2 => goto L13e65c
                  | 3 => goto L13e684
                  | 4 => goto L13e684
                  | 5 => goto L13e684
                  | else => goto L13e656;
}
procedure `boolean` `q`(`com.b.a.d.a` v1 @kind this) @signature `Lcom/b/a/d/a;.q:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13e6e0.  v0:= v1.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L13e6e4.  return v0;
}
procedure `int` `r`(`com.b.a.d.a` v8 @kind this) @signature `Lcom/b/a/d/a;.r:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L13e6f8.  v3:= 7I;
  #L13e6fa.  v7:= 5I;
  #L13e6fc.  v0:= 4I;
  #L13e6fe.  v1:= 2I;
  #L13e700.  v2:= 1I;
  #L13e702.  v4:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L13e706.  v5:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L13e70a.  v5:= v5 + -1;
  #L13e70e.  v4:= v4[v5];
  #L13e712.  if v4 != v2 then goto L13e74e;
  #L13e716.  v5:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L13e71a.  v6:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L13e71e.  v6:= v6 + -1;
  #L13e722.  v5[v6]:= v1;
  #L13e726.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L13e72c.  v5:= temp;
  #L13e72e.  goto L13e9dc;
  #L13e734.  v0:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13e738.  v0:= v0 + -1;
  #L13e73c.  v8.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13e740.  call temp:= `o`(v8) @signature `Lcom/b/a/d/a;.o:()I` @kind direct;
  #L13e746.  v0:= temp;
  #L13e748.  if v0 == 0 then goto L13e996;
  #L13e74c.  return v0;
  #L13e74e.  if v4 != v1 then goto L13e77c;
  #L13e752.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L13e758.  v5:= temp;
  #L13e75a.  goto L13ea18;
  #L13e760.  v0:= "Unterminated array" @kind object;
  #L13e764.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L13e76a.  v0:= temp @kind object;
  #L13e76c.  throw v0;
  #L13e76e.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13e772.  goto L13e74c;
  #L13e774.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L13e77a.  goto L13e726;
  #L13e77c.  v5:= 3I;
  #L13e77e.  if v4 == v5 then goto L13e786;
  #L13e782.  if v4 != v7 then goto L13e83e;
  #L13e786.  v3:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L13e78a.  v5:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L13e78e.  v5:= v5 + -1;
  #L13e792.  v3[v5]:= v0;
  #L13e796.  if v4 != v7 then goto L13e7c4;
  #L13e79a.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L13e7a0.  v0:= temp;
  #L13e7a2.  goto L13ea34;
  #L13e7a8.  v0:= "Unterminated object" @kind object;
  #L13e7ac.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L13e7b2.  v0:= temp @kind object;
  #L13e7b4.  throw v0;
  #L13e7b6.  v8.`com.b.a.d.a.a` @type ^`int` := v1;
  #L13e7ba.  v0:= v1;
  #L13e7bc.  goto L13e74c;
  #L13e7be.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L13e7c4.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L13e7ca.  v0:= temp;
  #L13e7cc.  goto L13ea50;
  #L13e7d2.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L13e7d8.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13e7dc.  v1:= v1 + -1;
  #L13e7e0.  v8.`com.b.a.d.a.f` @type ^`int` := v1;
  #L13e7e4.  v0:= (`char`) v0 @kind i2c;
  #L13e7e6.  call temp:= `a`(v8, v0) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L13e7ec.  v0:= temp;
  #L13e7ee.  if v0 == 0 then goto L13e830;
  #L13e7f2.  v0:= 14I;
  #L13e7f6.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13e7fa.  goto L13e74c;
  #L13e7fc.  v0:= 13I;
  #L13e800.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13e804.  goto L13e74c;
  #L13e806.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L13e80c.  v0:= 12I;
  #L13e810.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13e814.  goto L13e74c;
  #L13e816.  if v4 == v7 then goto L13e822;
  #L13e81a.  v8.`com.b.a.d.a.a` @type ^`int` := v1;
  #L13e81e.  v0:= v1;
  #L13e820.  goto L13e74c;
  #L13e822.  v0:= "Expected name" @kind object;
  #L13e826.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L13e82c.  v0:= temp @kind object;
  #L13e82e.  throw v0;
  #L13e830.  v0:= "Expected name" @kind object;
  #L13e834.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L13e83a.  v0:= temp @kind object;
  #L13e83c.  throw v0;
  #L13e83e.  if v4 != v0 then goto L13e8b0;
  #L13e842.  v5:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L13e846.  v6:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L13e84a.  v6:= v6 + -1;
  #L13e84e.  v5[v6]:= v7;
  #L13e852.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L13e858.  v5:= temp;
  #L13e85a.  goto L13ea6c;
  #L13e860.  v0:= "Expected ':'" @kind object;
  #L13e864.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L13e86a.  v0:= temp @kind object;
  #L13e86c.  throw v0;
  #L13e86e.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L13e874.  v5:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13e878.  v6:= v8.`com.b.a.d.a.g` @type ^`int`;
  #L13e87c.  if v5 < v6 then goto L13e88c;
  #L13e880.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L13e886.  v5:= temp;
  #L13e888.  if v5 == 0 then goto L13e726;
  #L13e88c.  v5:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13e890.  v6:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13e894.  v5:= v5[v6] @kind char;
  #L13e898.  v6:= 62I;
  #L13e89c.  if v5 != v6 then goto L13e726;
  #L13e8a0.  v5:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13e8a4.  v5:= v5 + 1;
  #L13e8a8.  v8.`com.b.a.d.a.f` @type ^`int` := v5;
  #L13e8ac.  goto L13e726;
  #L13e8b0.  v5:= 6I;
  #L13e8b2.  if v4 != v5 then goto L13e8d8;
  #L13e8b6.  v5:= v8.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L13e8ba.  if v5 == 0 then goto L13e8c4;
  #L13e8be.  call `z`(v8) @signature `Lcom/b/a/d/a;.z:()V` @kind direct;
  #L13e8c4.  v5:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L13e8c8.  v6:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L13e8cc.  v6:= v6 + -1;
  #L13e8d0.  v5[v6]:= v3;
  #L13e8d4.  goto L13e726;
  #L13e8d8.  if v4 != v3 then goto L13e90e;
  #L13e8dc.  v5:= 0I;
  #L13e8de.  call temp:= `b`(v8, v5) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L13e8e4.  v5:= temp;
  #L13e8e6.  v6:= -1I;
  #L13e8e8.  if v5 != v6 then goto L13e8f8;
  #L13e8ec.  v0:= 17I;
  #L13e8f0.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13e8f4.  goto L13e74c;
  #L13e8f8.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L13e8fe.  v5:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13e902.  v5:= v5 + -1;
  #L13e906.  v8.`com.b.a.d.a.f` @type ^`int` := v5;
  #L13e90a.  goto L13e726;
  #L13e90e.  v5:= 8I;
  #L13e912.  if v4 != v5 then goto L13e726;
  #L13e916.  v0:= new `java.lang.IllegalStateException`;
  #L13e91a.  v1:= "JsonReader is closed" @kind object;
  #L13e91e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13e924.  throw v0;
  #L13e926.  if v4 != v2 then goto L13e932;
  #L13e92a.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13e92e.  goto L13e74c;
  #L13e932.  if v4 == v2 then goto L13e93a;
  #L13e936.  if v4 != v1 then goto L13e956;
  #L13e93a.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L13e940.  v0:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13e944.  v0:= v0 + -1;
  #L13e948.  v8.`com.b.a.d.a.f` @type ^`int` := v0;
  #L13e94c.  v8.`com.b.a.d.a.a` @type ^`int` := v3;
  #L13e950.  v0:= v3;
  #L13e952.  goto L13e74c;
  #L13e956.  v0:= "Unexpected value" @kind object;
  #L13e95a.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L13e960.  v0:= temp @kind object;
  #L13e962.  throw v0;
  #L13e964.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L13e96a.  v0:= 8I;
  #L13e96e.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13e972.  goto L13e74c;
  #L13e976.  v0:= 9I;
  #L13e97a.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13e97e.  goto L13e74c;
  #L13e982.  v0:= 3I;
  #L13e984.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13e988.  goto L13e74c;
  #L13e98c.  v8.`com.b.a.d.a.a` @type ^`int` := v2;
  #L13e990.  v0:= v2;
  #L13e992.  goto L13e74c;
  #L13e996.  call temp:= `s`(v8) @signature `Lcom/b/a/d/a;.s:()I` @kind direct;
  #L13e99c.  v0:= temp;
  #L13e99e.  if v0 != 0 then goto L13e74c;
  #L13e9a2.  v0:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L13e9a6.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L13e9aa.  v0:= v0[v1] @kind char;
  #L13e9ae.  call temp:= `a`(v8, v0) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L13e9b4.  v0:= temp;
  #L13e9b6.  if v0 != 0 then goto L13e9c8;
  #L13e9ba.  v0:= "Expected value" @kind object;
  #L13e9be.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L13e9c4.  v0:= temp @kind object;
  #L13e9c6.  throw v0;
  #L13e9c8.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L13e9ce.  v0:= 10I;
  #L13e9d2.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L13e9d6.  goto L13e74c;
  #L13e9da.  
  #L13e9dc.  switch v5
                  | 34 => goto L13e976
                  | 39 => goto L13e964
                  | 44 => goto L13e932
                  | 59 => goto L13e932
                  | 91 => goto L13e982
                  | 93 => goto L13e926
                  | 123 => goto L13e98c
                  | else => goto L13e734;
  #L13ea18.  switch v5
                  | 44 => goto L13e726
                  | 59 => goto L13e774
                  | 93 => goto L13e76e
                  | else => goto L13e760;
  #L13ea34.  switch v0
                  | 44 => goto L13e7c4
                  | 59 => goto L13e7be
                  | 125 => goto L13e7b6
                  | else => goto L13e7a8;
  #L13ea50.  switch v0
                  | 34 => goto L13e7fc
                  | 39 => goto L13e806
                  | 125 => goto L13e816
                  | else => goto L13e7d2;
  #L13ea6c.  switch v5
                  | 58 => goto L13e726
                  | 59 => goto L13e860
                  | 60 => goto L13e860
                  | 61 => goto L13e86e
                  | else => goto L13e860;
}
procedure `java.lang.String` `toString`(`com.b.a.d.a` v2 @kind this) @signature `Lcom/b/a/d/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13ea94.  v0:= new `java.lang.StringBuilder`;
  #L13ea98.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13ea9e.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13eaa4.  v1:= temp @kind object;
  #L13eaa6.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L13eaac.  v1:= temp @kind object;
  #L13eaae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13eab4.  v0:= temp @kind object;
  #L13eab6.  call temp:= `x`(v2) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L13eabc.  v1:= temp @kind object;
  #L13eabe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13eac4.  v0:= temp @kind object;
  #L13eac6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13eacc.  v0:= temp @kind object;
  #L13eace.  return v0 @kind object;
}
