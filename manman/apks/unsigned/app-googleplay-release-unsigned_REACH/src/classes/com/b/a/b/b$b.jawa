record `com.b.a.b.b$b` @kind class @AccessFlag FINAL extends `java.io.Serializable` @kind interface, `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type` `com.b.a.b.b$b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `com.b.a.b.b$b.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `com.b.a.b.b$b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.b.b$b` v4 @kind this, `java.lang.reflect.Type` v5 @kind object, `java.lang.reflect.Type` v6 @kind object, `java.lang.reflect.Type`[] v7 @kind object) @signature `Lcom/b/a/b/b$b;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L144058.  v2:= 1I;
  #L14405a.  v1:= 0I;
  #L14405c.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L144062.  v0:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L144066.  if v0 == 0 then goto L1440a2;
  #L14406a.  v0:= v6 @kind object;
  #L14406c.  v0:= (`java.lang.Class`) v0 @kind object;
  #L144070.  call temp:= `getModifiers`(v0) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L144076.  v3:= temp;
  #L144078.  call temp:= `isStatic`(v3) @signature `Ljava/lang/reflect/Modifier;.isStatic:(I)Z` @kind static;
  #L14407e.  v3:= temp;
  #L144080.  if v3 != 0 then goto L144090;
  #L144084.  call temp:= `getEnclosingClass`(v0) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L14408a.  v0:= temp @kind object;
  #L14408c.  if v0 != 0 then goto L14410c;
  #L144090.  v0:= v2;
  #L144092.  if v5 != 0 then goto L14409a;
  #L144096.  if v0 == 0 then goto L144110;
  #L14409a.  v0:= v2;
  #L14409c.  call `a`(v0) @signature `Lcom/b/a/b/a;.a:(Z)V` @kind static;
  #L1440a2.  if v5 != 0 then goto L144114;
  #L1440a6.  v0:= 0I;
  #L1440a8.  v4.`com.b.a.b.b$b.a` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1440ac.  call temp:= `d`(v6) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L1440b2.  v0:= temp @kind object;
  #L1440b4.  v4.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L1440b8.  call temp:= `clone`(v7) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1440be.  v0:= temp @kind object;
  #L1440c0.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L1440c4.  v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L1440c8.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1440cc.  v0:= length @variable v0;
  #L1440ce.  if v1 >= v0 then goto L14411e;
  #L1440d2.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1440d6.  v0:= v0[v1] @kind object;
  #L1440da.  call temp:= `a`(v0) @signature `Lcom/b/a/b/a;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L1440e0.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1440e4.  v0:= v0[v1] @kind object;
  #L1440e8.  call `h`(v0) @signature `Lcom/b/a/b/b;.h:(Ljava/lang/reflect/Type;)V` @kind static;
  #L1440ee.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1440f2.  v2:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1440f6.  v2:= v2[v1] @kind object;
  #L1440fa.  call temp:= `d`(v2) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L144100.  v2:= temp @kind object;
  #L144102.  v0[v1]:= v2 @kind object;
  #L144106.  v1:= v1 + 1;
  #L14410a.  goto L1440c8;
  #L14410c.  v0:= v1;
  #L14410e.  goto L144092;
  #L144110.  v0:= v1;
  #L144112.  goto L14409c;
  #L144114.  call temp:= `d`(v5) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L14411a.  v0:= temp @kind object;
  #L14411c.  goto L1440a8;
  #L14411e.  return @kind void;
}
procedure `boolean` `equals`(`com.b.a.b.b$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/b$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L144130.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L144134.  if v0 == 0 then goto L14414c;
  #L144138.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L14413c.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L144142.  v0:= temp;
  #L144144.  if v0 == 0 then goto L14414c;
  #L144148.  v0:= 1I;
  #L14414a.  return v0;
  #L14414c.  v0:= 0I;
  #L14414e.  goto L14414a;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`com.b.a.b.b$b` v1 @kind this) @signature `Lcom/b/a/b/b$b;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L144160.  v0:= v1.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L144164.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L14416a.  v0:= temp @kind object;
  #L14416c.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L144170.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`com.b.a.b.b$b` v1 @kind this) @signature `Lcom/b/a/b/b$b;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L144184.  v0:= v1.`com.b.a.b.b$b.a` @type ^`java.lang.reflect.Type` @kind object;
  #L144188.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`com.b.a.b.b$b` v1 @kind this) @signature `Lcom/b/a/b/b$b;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14419c.  v0:= v1.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L1441a0.  return v0 @kind object;
}
procedure `int` `hashCode`(`com.b.a.b.b$b` v2 @kind this) @signature `Lcom/b/a/b/b$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1441b4.  v0:= v2.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1441b8.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L1441be.  v0:= temp;
  #L1441c0.  v1:= v2.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L1441c4.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L1441ca.  v1:= temp;
  #L1441cc.  v0:= v0 ^~ v1 @kind int;
  #L1441ce.  v1:= v2.`com.b.a.b.b$b.a` @type ^`java.lang.reflect.Type` @kind object;
  #L1441d2.  call temp:= `a`(v1) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/Object;)I` @kind static;
  #L1441d8.  v1:= temp;
  #L1441da.  v0:= v0 ^~ v1 @kind int;
  #L1441dc.  return v0;
}
procedure `java.lang.String` `toString`(`com.b.a.b.b$b` v4 @kind this) @signature `Lcom/b/a/b/b$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1441f0.  v1:= new `java.lang.StringBuilder`;
  #L1441f4.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L1441f8.  v0:= length @variable v0;
  #L1441fa.  v0:= v0 + 1;
  #L1441fe.  v0:= v0 * 30;
  #L144202.  call `<init>`(v1, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L144208.  v0:= v4.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L14420c.  call temp:= `f`(v0) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L144212.  v0:= temp @kind object;
  #L144214.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14421a.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L14421e.  v0:= length @variable v0;
  #L144220.  if v0 != 0 then goto L14422e;
  #L144224.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14422a.  v0:= temp @kind object;
  #L14422c.  return v0 @kind object;
  #L14422e.  v0:= "<" @kind object;
  #L144232.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144238.  v0:= temp @kind object;
  #L14423a.  v2:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L14423e.  v3:= 0I;
  #L144240.  v2:= v2[v3] @kind object;
  #L144244.  call temp:= `f`(v2) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L14424a.  v2:= temp @kind object;
  #L14424c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144252.  v0:= 1I;
  #L144254.  v2:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L144258.  v2:= length @variable v2;
  #L14425a.  if v0 >= v2 then goto L144286;
  #L14425e.  v2:= ", " @kind object;
  #L144262.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144268.  v2:= temp @kind object;
  #L14426a.  v3:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L14426e.  v3:= v3[v0] @kind object;
  #L144272.  call temp:= `f`(v3) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L144278.  v3:= temp @kind object;
  #L14427a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144280.  v0:= v0 + 1;
  #L144284.  goto L144254;
  #L144286.  v0:= ">" @kind object;
  #L14428a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144290.  v0:= temp @kind object;
  #L144292.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L144298.  v0:= temp @kind object;
  #L14429a.  goto L14422c;
}
