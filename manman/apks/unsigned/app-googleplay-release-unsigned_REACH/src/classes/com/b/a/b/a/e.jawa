record `com.b.a.b.a.e` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.d.a` @kind class {
  `java.lang.Object`[] `com.b.a.b.a.e.d` @AccessFlag PRIVATE;
  `int` `com.b.a.b.a.e.e` @AccessFlag PRIVATE;
  `java.lang.String`[] `com.b.a.b.a.e.f` @AccessFlag PRIVATE;
  `int`[] `com.b.a.b.a.e.g` @AccessFlag PRIVATE;
}
global `java.io.Reader` `@@com.b.a.b.a.e.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object` `@@com.b.a.b.a.e.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/a/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L13eae0.  v0:= new `com.b.a.b.a.e$1`;
  #L13eae4.  call `<init>`(v0) @signature `Lcom/b/a/b/a/e$1;.<init>:()V` @kind direct;
  #L13eaea.  `@@com.b.a.b.a.e.b` @type ^`java.io.Reader` := v0 @kind object;
  #L13eaee.  v0:= new `java.lang.Object`;
  #L13eaf2.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13eaf8.  `@@com.b.a.b.a.e.c` @type ^`java.lang.Object` := v0 @kind object;
  #L13eafc.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.e` v3 @kind this, `com.b.a.d.b` v4 @kind object) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L13eb10.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13eb16.  v0:= temp @kind object;
  #L13eb18.  if v0 == v4 then goto L13eb7a;
  #L13eb1c.  v0:= new `java.lang.IllegalStateException`;
  #L13eb20.  v1:= new `java.lang.StringBuilder`;
  #L13eb24.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13eb2a.  v2:= "Expected " @kind object;
  #L13eb2e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13eb34.  v1:= temp @kind object;
  #L13eb36.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13eb3c.  v1:= temp @kind object;
  #L13eb3e.  v2:= " but was " @kind object;
  #L13eb42.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13eb48.  v1:= temp @kind object;
  #L13eb4a.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13eb50.  v2:= temp @kind object;
  #L13eb52.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13eb58.  v1:= temp @kind object;
  #L13eb5a.  call temp:= `u`(v3) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L13eb60.  v2:= temp @kind object;
  #L13eb62.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13eb68.  v1:= temp @kind object;
  #L13eb6a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13eb70.  v1:= temp @kind object;
  #L13eb72.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13eb78.  throw v0;
  #L13eb7a.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.e` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13eb8c.  v5:= 0I;
  #L13eb8e.  v0:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L13eb92.  v1:= v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L13eb96.  v1:= length @variable v1;
  #L13eb98.  if v0 != v1 then goto L13ebf6;
  #L13eb9c.  v0:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L13eba0.  v0:= v0 * 2;
  #L13eba4.  v0:= new `java.lang.Object`[v0];
  #L13eba8.  v1:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L13ebac.  v1:= v1 * 2;
  #L13ebb0.  v1:= new `int`[v1];
  #L13ebb4.  v2:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L13ebb8.  v2:= v2 * 2;
  #L13ebbc.  v2:= new `java.lang.String`[v2];
  #L13ebc0.  v3:= v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L13ebc4.  v4:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L13ebc8.  call `arraycopy`(v3, v5, v0, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L13ebce.  v3:= v6.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L13ebd2.  v4:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L13ebd6.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L13ebdc.  v3:= v6.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L13ebe0.  v4:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L13ebe4.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L13ebea.  v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] := v0 @kind object;
  #L13ebee.  v6.`com.b.a.b.a.e.g` @type ^`int`[] := v1 @kind object;
  #L13ebf2.  v6.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] := v2 @kind object;
  #L13ebf6.  v0:= v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L13ebfa.  v1:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L13ebfe.  v2:= v1 + 1;
  #L13ec02.  v6.`com.b.a.b.a.e.e` @type ^`int` := v2;
  #L13ec06.  v0[v1]:= v7 @kind object;
  #L13ec0a.  return @kind void;
}
procedure `java.lang.Object` `s`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L13ec1c.  v0:= v2.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L13ec20.  v1:= v2.`com.b.a.b.a.e.e` @type ^`int`;
  #L13ec24.  v1:= v1 + -1;
  #L13ec28.  v0:= v0[v1] @kind object;
  #L13ec2c.  return v0 @kind object;
}
procedure `java.lang.Object` `t`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13ec40.  v0:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L13ec44.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L13ec48.  v1:= v1 + -1;
  #L13ec4c.  v4.`com.b.a.b.a.e.e` @type ^`int` := v1;
  #L13ec50.  v0:= v0[v1] @kind object;
  #L13ec54.  v1:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L13ec58.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L13ec5c.  v3:= 0I;
  #L13ec5e.  v1[v2]:= v3 @kind object;
  #L13ec62.  return v0 @kind object;
}
procedure `java.lang.String` `u`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L13ec74.  v0:= new `java.lang.StringBuilder`;
  #L13ec78.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13ec7e.  v1:= " at path " @kind object;
  #L13ec82.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13ec88.  v0:= temp @kind object;
  #L13ec8a.  call temp:= `p`(v2) @signature `Lcom/b/a/b/a/e;.p:()Ljava/lang/String;` @kind virtual;
  #L13ec90.  v1:= temp @kind object;
  #L13ec92.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13ec98.  v0:= temp @kind object;
  #L13ec9a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13eca0.  v0:= temp @kind object;
  #L13eca2.  return v0 @kind object;
}
procedure `void` `a`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13ecb4.  v0:= `@@com.b.a.d.b.a` @type ^`com.b.a.d.b` @kind object;
  #L13ecb8.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L13ecbe.  call temp:= `s`(v3) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L13ecc4.  v0:= temp @kind object;
  #L13ecc6.  v0:= (`com.b.a.i`) v0 @kind object;
  #L13ecca.  call temp:= `iterator`(v0) @signature `Lcom/b/a/i;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L13ecd0.  v0:= temp @kind object;
  #L13ecd2.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L13ecd8.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L13ecdc.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L13ece0.  v1:= v1 + -1;
  #L13ece4.  v2:= 0I;
  #L13ece6.  v0[v1]:= v2;
  #L13ecea.  return @kind void;
}
procedure `void` `b`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13ecfc.  v0:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L13ed00.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L13ed06.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13ed0c.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13ed12.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L13ed16.  if v0 <= 0 then goto L13ed32;
  #L13ed1a.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L13ed1e.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L13ed22.  v1:= v1 + -1;
  #L13ed26.  v2:= v0[v1];
  #L13ed2a.  v2:= v2 + 1;
  #L13ed2e.  v0[v1]:= v2;
  #L13ed32.  return @kind void;
}
procedure `void` `c`(`com.b.a.b.a.e` v1 @kind this) @signature `Lcom/b/a/b/a/e;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13ed44.  v0:= `@@com.b.a.d.b.c` @type ^`com.b.a.d.b` @kind object;
  #L13ed48.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L13ed4e.  call temp:= `s`(v1) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L13ed54.  v0:= temp @kind object;
  #L13ed56.  v0:= (`com.b.a.o`) v0 @kind object;
  #L13ed5a.  call temp:= `o`(v0) @signature `Lcom/b/a/o;.o:()Ljava/util/Set;` @kind virtual;
  #L13ed60.  v0:= temp @kind object;
  #L13ed62.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13ed68.  v0:= temp @kind object;
  #L13ed6a.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L13ed70.  return @kind void;
}
procedure `void` `close`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13ed84.  v3:= 1I;
  #L13ed86.  v0:= new `java.lang.Object`[v3];
  #L13ed8a.  v1:= 0I;
  #L13ed8c.  v2:= `@@com.b.a.b.a.e.c` @type ^`java.lang.Object` @kind object;
  #L13ed90.  v0[v1]:= v2 @kind object;
  #L13ed94.  v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] := v0 @kind object;
  #L13ed98.  v4.`com.b.a.b.a.e.e` @type ^`int` := v3;
  #L13ed9c.  return @kind void;
}
procedure `void` `d`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13edb0.  v0:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L13edb4.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L13edba.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13edc0.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13edc6.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L13edca.  if v0 <= 0 then goto L13ede6;
  #L13edce.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L13edd2.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L13edd6.  v1:= v1 + -1;
  #L13edda.  v2:= v0[v1];
  #L13edde.  v2:= v2 + 1;
  #L13ede2.  v0[v1]:= v2;
  #L13ede6.  return @kind void;
}
procedure `boolean` `e`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13edf8.  call temp:= `f`(v2) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13edfe.  v0:= temp @kind object;
  #L13ee00.  v1:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L13ee04.  if v0 == v1 then goto L13ee14;
  #L13ee08.  v1:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L13ee0c.  if v0 == v1 then goto L13ee14;
  #L13ee10.  v0:= 1I;
  #L13ee12.  return v0;
  #L13ee14.  v0:= 0I;
  #L13ee16.  goto L13ee12;
}
procedure `com.b.a.d.b` `f`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13ee28.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L13ee2c.  if v0 != 0 then goto L13ee36;
  #L13ee30.  v0:= `@@com.b.a.d.b.j` @type ^`com.b.a.d.b` @kind object;
  #L13ee34.  return v0 @kind object;
  #L13ee36.  call temp:= `s`(v3) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L13ee3c.  v0:= temp @kind object;
  #L13ee3e.  v1:= instanceof @variable v0 @type ^`java.util.Iterator` @kind boolean;
  #L13ee42.  if v1 == 0 then goto L13ee9c;
  #L13ee46.  v1:= v3.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L13ee4a.  v2:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L13ee4e.  v2:= v2 + -2;
  #L13ee52.  v1:= v1[v2] @kind object;
  #L13ee56.  v1:= instanceof @variable v1 @type ^`com.b.a.o` @kind boolean;
  #L13ee5a.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L13ee5e.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13ee64.  v2:= temp;
  #L13ee66.  if v2 == 0 then goto L13ee8c;
  #L13ee6a.  if v1 == 0 then goto L13ee74;
  #L13ee6e.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L13ee72.  goto L13ee34;
  #L13ee74.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13ee7a.  v0:= temp @kind object;
  #L13ee7c.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L13ee82.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13ee88.  v0:= temp @kind object;
  #L13ee8a.  goto L13ee34;
  #L13ee8c.  if v1 == 0 then goto L13ee96;
  #L13ee90.  v0:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L13ee94.  goto L13ee34;
  #L13ee96.  v0:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L13ee9a.  goto L13ee34;
  #L13ee9c.  v1:= instanceof @variable v0 @type ^`com.b.a.o` @kind boolean;
  #L13eea0.  if v1 == 0 then goto L13eeaa;
  #L13eea4.  v0:= `@@com.b.a.d.b.c` @type ^`com.b.a.d.b` @kind object;
  #L13eea8.  goto L13ee34;
  #L13eeaa.  v1:= instanceof @variable v0 @type ^`com.b.a.i` @kind boolean;
  #L13eeae.  if v1 == 0 then goto L13eeb8;
  #L13eeb2.  v0:= `@@com.b.a.d.b.a` @type ^`com.b.a.d.b` @kind object;
  #L13eeb6.  goto L13ee34;
  #L13eeb8.  v1:= instanceof @variable v0 @type ^`com.b.a.q` @kind boolean;
  #L13eebc.  if v1 == 0 then goto L13ef06;
  #L13eec0.  v0:= (`com.b.a.q`) v0 @kind object;
  #L13eec4.  call temp:= `q`(v0) @signature `Lcom/b/a/q;.q:()Z` @kind virtual;
  #L13eeca.  v1:= temp;
  #L13eecc.  if v1 == 0 then goto L13eed6;
  #L13eed0.  v0:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L13eed4.  goto L13ee34;
  #L13eed6.  call temp:= `o`(v0) @signature `Lcom/b/a/q;.o:()Z` @kind virtual;
  #L13eedc.  v1:= temp;
  #L13eede.  if v1 == 0 then goto L13eee8;
  #L13eee2.  v0:= `@@com.b.a.d.b.h` @type ^`com.b.a.d.b` @kind object;
  #L13eee6.  goto L13ee34;
  #L13eee8.  call temp:= `p`(v0) @signature `Lcom/b/a/q;.p:()Z` @kind virtual;
  #L13eeee.  v0:= temp;
  #L13eef0.  if v0 == 0 then goto L13eefa;
  #L13eef4.  v0:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L13eef8.  goto L13ee34;
  #L13eefa.  v0:= new `java.lang.AssertionError`;
  #L13eefe.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L13ef04.  throw v0;
  #L13ef06.  v1:= instanceof @variable v0 @type ^`com.b.a.n` @kind boolean;
  #L13ef0a.  if v1 == 0 then goto L13ef14;
  #L13ef0e.  v0:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L13ef12.  goto L13ee34;
  #L13ef14.  v1:= `@@com.b.a.b.a.e.c` @type ^`java.lang.Object` @kind object;
  #L13ef18.  if v0 != v1 then goto L13ef2c;
  #L13ef1c.  v0:= new `java.lang.IllegalStateException`;
  #L13ef20.  v1:= "JsonReader is closed" @kind object;
  #L13ef24.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13ef2a.  throw v0;
  #L13ef2c.  v0:= new `java.lang.AssertionError`;
  #L13ef30.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L13ef36.  throw v0;
}
procedure `java.lang.String` `g`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.g:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13ef48.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L13ef4c.  call `a`(v4, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L13ef52.  call temp:= `s`(v4) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L13ef58.  v0:= temp @kind object;
  #L13ef5a.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L13ef5e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13ef64.  v0:= temp @kind object;
  #L13ef66.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L13ef6a.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L13ef70.  v1:= temp @kind object;
  #L13ef72.  v1:= (`java.lang.String`) v1 @kind object;
  #L13ef76.  v2:= v4.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L13ef7a.  v3:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L13ef7e.  v3:= v3 + -1;
  #L13ef82.  v2[v3]:= v1 @kind object;
  #L13ef86.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L13ef8c.  v0:= temp @kind object;
  #L13ef8e.  call `a`(v4, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L13ef94.  return v1 @kind object;
}
procedure `java.lang.String` `h`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.h:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13efa8.  call temp:= `f`(v4) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13efae.  v0:= temp @kind object;
  #L13efb0.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L13efb4.  if v0 == v1 then goto L13f01a;
  #L13efb8.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L13efbc.  if v0 == v1 then goto L13f01a;
  #L13efc0.  v1:= new `java.lang.IllegalStateException`;
  #L13efc4.  v2:= new `java.lang.StringBuilder`;
  #L13efc8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13efce.  v3:= "Expected " @kind object;
  #L13efd2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13efd8.  v2:= temp @kind object;
  #L13efda.  v3:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L13efde.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13efe4.  v2:= temp @kind object;
  #L13efe6.  v3:= " but was " @kind object;
  #L13efea.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13eff0.  v2:= temp @kind object;
  #L13eff2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13eff8.  v0:= temp @kind object;
  #L13effa.  call temp:= `u`(v4) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L13f000.  v2:= temp @kind object;
  #L13f002.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f008.  v0:= temp @kind object;
  #L13f00a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13f010.  v0:= temp @kind object;
  #L13f012.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f018.  throw v1;
  #L13f01a.  call temp:= `t`(v4) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13f020.  v0:= temp @kind object;
  #L13f022.  v0:= (`com.b.a.q`) v0 @kind object;
  #L13f026.  call temp:= `b`(v0) @signature `Lcom/b/a/q;.b:()Ljava/lang/String;` @kind virtual;
  #L13f02c.  v0:= temp @kind object;
  #L13f02e.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f032.  if v1 <= 0 then goto L13f04e;
  #L13f036.  v1:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L13f03a.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f03e.  v2:= v2 + -1;
  #L13f042.  v3:= v1[v2];
  #L13f046.  v3:= v3 + 1;
  #L13f04a.  v1[v2]:= v3;
  #L13f04e.  return v0 @kind object;
}
procedure `boolean` `i`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13f060.  v0:= `@@com.b.a.d.b.h` @type ^`com.b.a.d.b` @kind object;
  #L13f064.  call `a`(v4, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L13f06a.  call temp:= `t`(v4) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13f070.  v0:= temp @kind object;
  #L13f072.  v0:= (`com.b.a.q`) v0 @kind object;
  #L13f076.  call temp:= `f`(v0) @signature `Lcom/b/a/q;.f:()Z` @kind virtual;
  #L13f07c.  v0:= temp;
  #L13f07e.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f082.  if v1 <= 0 then goto L13f09e;
  #L13f086.  v1:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L13f08a.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f08e.  v2:= v2 + -1;
  #L13f092.  v3:= v1[v2];
  #L13f096.  v3:= v3 + 1;
  #L13f09a.  v1[v2]:= v3;
  #L13f09e.  return v0;
}
procedure `void` `j`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.j:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13f0b0.  v0:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L13f0b4.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L13f0ba.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13f0c0.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f0c4.  if v0 <= 0 then goto L13f0e0;
  #L13f0c8.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L13f0cc.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f0d0.  v1:= v1 + -1;
  #L13f0d4.  v2:= v0[v1];
  #L13f0d8.  v2:= v2 + 1;
  #L13f0dc.  v0[v1]:= v2;
  #L13f0e0.  return @kind void;
}
procedure `double` `k`(`com.b.a.b.a.e` v5 @kind this) @signature `Lcom/b/a/b/a/e;.k:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13f0f4.  call temp:= `f`(v5) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13f0fa.  v0:= temp @kind object;
  #L13f0fc.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L13f100.  if v0 == v1 then goto L13f166;
  #L13f104.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L13f108.  if v0 == v1 then goto L13f166;
  #L13f10c.  v1:= new `java.lang.IllegalStateException`;
  #L13f110.  v2:= new `java.lang.StringBuilder`;
  #L13f114.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13f11a.  v3:= "Expected " @kind object;
  #L13f11e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f124.  v2:= temp @kind object;
  #L13f126.  v3:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L13f12a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f130.  v2:= temp @kind object;
  #L13f132.  v3:= " but was " @kind object;
  #L13f136.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f13c.  v2:= temp @kind object;
  #L13f13e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f144.  v0:= temp @kind object;
  #L13f146.  call temp:= `u`(v5) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L13f14c.  v2:= temp @kind object;
  #L13f14e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f154.  v0:= temp @kind object;
  #L13f156.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13f15c.  v0:= temp @kind object;
  #L13f15e.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f164.  throw v1;
  #L13f166.  call temp:= `s`(v5) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L13f16c.  v0:= temp @kind object;
  #L13f16e.  v0:= (`com.b.a.q`) v0 @kind object;
  #L13f172.  call temp:= `c`(v0) @signature `Lcom/b/a/q;.c:()D` @kind virtual;
  #L13f178.  v0:= temp @kind wide;
  #L13f17a.  call temp:= `q`(v5) @signature `Lcom/b/a/b/a/e;.q:()Z` @kind virtual;
  #L13f180.  v2:= temp;
  #L13f182.  if v2 != 0 then goto L13f1d0;
  #L13f186.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L13f18c.  v2:= temp;
  #L13f18e.  if v2 != 0 then goto L13f19e;
  #L13f192.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L13f198.  v2:= temp;
  #L13f19a.  if v2 == 0 then goto L13f1d0;
  #L13f19e.  v2:= new `java.lang.NumberFormatException`;
  #L13f1a2.  v3:= new `java.lang.StringBuilder`;
  #L13f1a6.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13f1ac.  v4:= "JSON forbids NaN and infinities: " @kind object;
  #L13f1b0.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f1b6.  v3:= temp @kind object;
  #L13f1b8.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f1be.  v0:= temp @kind object;
  #L13f1c0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13f1c6.  v0:= temp @kind object;
  #L13f1c8.  call `<init>`(v2, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f1ce.  throw v2;
  #L13f1d0.  call temp:= `t`(v5) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13f1d6.  v2:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f1da.  if v2 <= 0 then goto L13f1f6;
  #L13f1de.  v2:= v5.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L13f1e2.  v3:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f1e6.  v3:= v3 + -1;
  #L13f1ea.  v4:= v2[v3];
  #L13f1ee.  v4:= v4 + 1;
  #L13f1f2.  v2[v3]:= v4;
  #L13f1f6.  return v0 @kind wide;
}
procedure `long` `l`(`com.b.a.b.a.e` v5 @kind this) @signature `Lcom/b/a/b/a/e;.l:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13f208.  call temp:= `f`(v5) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13f20e.  v0:= temp @kind object;
  #L13f210.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L13f214.  if v0 == v1 then goto L13f27a;
  #L13f218.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L13f21c.  if v0 == v1 then goto L13f27a;
  #L13f220.  v1:= new `java.lang.IllegalStateException`;
  #L13f224.  v2:= new `java.lang.StringBuilder`;
  #L13f228.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13f22e.  v3:= "Expected " @kind object;
  #L13f232.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f238.  v2:= temp @kind object;
  #L13f23a.  v3:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L13f23e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f244.  v2:= temp @kind object;
  #L13f246.  v3:= " but was " @kind object;
  #L13f24a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f250.  v2:= temp @kind object;
  #L13f252.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f258.  v0:= temp @kind object;
  #L13f25a.  call temp:= `u`(v5) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L13f260.  v2:= temp @kind object;
  #L13f262.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f268.  v0:= temp @kind object;
  #L13f26a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13f270.  v0:= temp @kind object;
  #L13f272.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f278.  throw v1;
  #L13f27a.  call temp:= `s`(v5) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L13f280.  v0:= temp @kind object;
  #L13f282.  v0:= (`com.b.a.q`) v0 @kind object;
  #L13f286.  call temp:= `d`(v0) @signature `Lcom/b/a/q;.d:()J` @kind virtual;
  #L13f28c.  v0:= temp @kind wide;
  #L13f28e.  call temp:= `t`(v5) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13f294.  v2:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f298.  if v2 <= 0 then goto L13f2b4;
  #L13f29c.  v2:= v5.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L13f2a0.  v3:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f2a4.  v3:= v3 + -1;
  #L13f2a8.  v4:= v2[v3];
  #L13f2ac.  v4:= v4 + 1;
  #L13f2b0.  v2[v3]:= v4;
  #L13f2b4.  return v0 @kind wide;
}
procedure `int` `m`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.m:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13f2c8.  call temp:= `f`(v4) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13f2ce.  v0:= temp @kind object;
  #L13f2d0.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L13f2d4.  if v0 == v1 then goto L13f33a;
  #L13f2d8.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L13f2dc.  if v0 == v1 then goto L13f33a;
  #L13f2e0.  v1:= new `java.lang.IllegalStateException`;
  #L13f2e4.  v2:= new `java.lang.StringBuilder`;
  #L13f2e8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13f2ee.  v3:= "Expected " @kind object;
  #L13f2f2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f2f8.  v2:= temp @kind object;
  #L13f2fa.  v3:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L13f2fe.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f304.  v2:= temp @kind object;
  #L13f306.  v3:= " but was " @kind object;
  #L13f30a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f310.  v2:= temp @kind object;
  #L13f312.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f318.  v0:= temp @kind object;
  #L13f31a.  call temp:= `u`(v4) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L13f320.  v2:= temp @kind object;
  #L13f322.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f328.  v0:= temp @kind object;
  #L13f32a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13f330.  v0:= temp @kind object;
  #L13f332.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f338.  throw v1;
  #L13f33a.  call temp:= `s`(v4) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L13f340.  v0:= temp @kind object;
  #L13f342.  v0:= (`com.b.a.q`) v0 @kind object;
  #L13f346.  call temp:= `e`(v0) @signature `Lcom/b/a/q;.e:()I` @kind virtual;
  #L13f34c.  v0:= temp;
  #L13f34e.  call temp:= `t`(v4) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13f354.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f358.  if v1 <= 0 then goto L13f374;
  #L13f35c.  v1:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L13f360.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f364.  v2:= v2 + -1;
  #L13f368.  v3:= v1[v2];
  #L13f36c.  v3:= v3 + 1;
  #L13f370.  v1[v2]:= v3;
  #L13f374.  return v0;
}
procedure `void` `n`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.n:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13f388.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L13f38e.  v0:= temp @kind object;
  #L13f390.  v1:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L13f394.  if v0 != v1 then goto L13f3cc;
  #L13f398.  call temp:= `g`(v3) @signature `Lcom/b/a/b/a/e;.g:()Ljava/lang/String;` @kind virtual;
  #L13f39e.  v0:= v3.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L13f3a2.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f3a6.  v1:= v1 + -2;
  #L13f3aa.  v2:= "null" @kind object;
  #L13f3ae.  v0[v1]:= v2 @kind object;
  #L13f3b2.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L13f3b6.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f3ba.  v1:= v1 + -1;
  #L13f3be.  v2:= v0[v1];
  #L13f3c2.  v2:= v2 + 1;
  #L13f3c6.  v0[v1]:= v2;
  #L13f3ca.  return @kind void;
  #L13f3cc.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13f3d2.  v0:= v3.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L13f3d6.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f3da.  v1:= v1 + -1;
  #L13f3de.  v2:= "null" @kind object;
  #L13f3e2.  v0[v1]:= v2 @kind object;
  #L13f3e6.  goto L13f3b2;
}
procedure `void` `o`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.o:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13f3f8.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L13f3fc.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L13f402.  call temp:= `s`(v2) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L13f408.  v0:= temp @kind object;
  #L13f40a.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L13f40e.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13f414.  v0:= temp @kind object;
  #L13f416.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L13f41a.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L13f420.  v1:= temp @kind object;
  #L13f422.  call `a`(v2, v1) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L13f428.  v1:= new `com.b.a.q`;
  #L13f42c.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L13f432.  v0:= temp @kind object;
  #L13f434.  v0:= (`java.lang.String`) v0 @kind object;
  #L13f438.  call `<init>`(v1, v0) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f43e.  call `a`(v2, v1) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L13f444.  return @kind void;
}
procedure `java.lang.String` `p`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13f458.  v0:= new `java.lang.StringBuilder`;
  #L13f45c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13f462.  v1:= 36I;
  #L13f466.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f46c.  v1:= temp @kind object;
  #L13f46e.  v0:= 0I;
  #L13f470.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L13f474.  if v0 >= v2 then goto L13f512;
  #L13f478.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L13f47c.  v2:= v2[v0] @kind object;
  #L13f480.  v2:= instanceof @variable v2 @type ^`com.b.a.i` @kind boolean;
  #L13f484.  if v2 == 0 then goto L13f4c8;
  #L13f488.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L13f48c.  v0:= v0 + 1;
  #L13f490.  v2:= v2[v0] @kind object;
  #L13f494.  v2:= instanceof @variable v2 @type ^`java.util.Iterator` @kind boolean;
  #L13f498.  if v2 == 0 then goto L13f4c2;
  #L13f49c.  v2:= 91I;
  #L13f4a0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f4a6.  v2:= temp @kind object;
  #L13f4a8.  v3:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L13f4ac.  v3:= v3[v0];
  #L13f4b0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f4b6.  v2:= temp @kind object;
  #L13f4b8.  v3:= 93I;
  #L13f4bc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f4c2.  v0:= v0 + 1;
  #L13f4c6.  goto L13f470;
  #L13f4c8.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L13f4cc.  v2:= v2[v0] @kind object;
  #L13f4d0.  v2:= instanceof @variable v2 @type ^`com.b.a.o` @kind boolean;
  #L13f4d4.  if v2 == 0 then goto L13f4c2;
  #L13f4d8.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L13f4dc.  v0:= v0 + 1;
  #L13f4e0.  v2:= v2[v0] @kind object;
  #L13f4e4.  v2:= instanceof @variable v2 @type ^`java.util.Iterator` @kind boolean;
  #L13f4e8.  if v2 == 0 then goto L13f4c2;
  #L13f4ec.  v2:= 46I;
  #L13f4f0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f4f6.  v2:= v4.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L13f4fa.  v2:= v2[v0] @kind object;
  #L13f4fe.  if v2 == 0 then goto L13f4c2;
  #L13f502.  v2:= v4.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L13f506.  v2:= v2[v0] @kind object;
  #L13f50a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13f510.  goto L13f4c2;
  #L13f512.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13f518.  v0:= temp @kind object;
  #L13f51a.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.b.a.b.a.e` v1 @kind this) @signature `Lcom/b/a/b/a/e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13f52c.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13f532.  v0:= temp @kind object;
  #L13f534.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L13f53a.  v0:= temp @kind object;
  #L13f53c.  return v0 @kind object;
}
