record `com.b.a.b.g$b` @kind class @AccessFlag FINAL extends `java.util.AbstractSet` @kind class {
  `com.b.a.b.g` `com.b.a.b.g$b.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.b.a.b.g$b` v0 @kind this, `com.b.a.b.g` v1 @kind object) @signature `Lcom/b/a/b/g$b;.<init>:(Lcom/b/a/b/g;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L145eb8.  v0.`com.b.a.b.g$b.a` @type ^`com.b.a.b.g` := v1 @kind object;
  #L145ebc.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L145ec2.  return @kind void;
}
procedure `void` `clear`(`com.b.a.b.g$b` v1 @kind this) @signature `Lcom/b/a/b/g$b;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145ed4.  v0:= v1.`com.b.a.b.g$b.a` @type ^`com.b.a.b.g` @kind object;
  #L145ed8.  call `clear`(v0) @signature `Lcom/b/a/b/g;.clear:()V` @kind virtual;
  #L145ede.  return @kind void;
}
procedure `boolean` `contains`(`com.b.a.b.g$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g$b;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145ef0.  v0:= v1.`com.b.a.b.g$b.a` @type ^`com.b.a.b.g` @kind object;
  #L145ef4.  call temp:= `containsKey`(v0, v2) @signature `Lcom/b/a/b/g;.containsKey:(Ljava/lang/Object;)Z` @kind virtual;
  #L145efa.  v0:= temp;
  #L145efc.  return v0;
}
procedure `java.util.Iterator` `iterator`(`com.b.a.b.g$b` v1 @kind this) @signature `Lcom/b/a/b/g$b;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145f10.  v0:= new `com.b.a.b.g$b$1`;
  #L145f14.  call `<init>`(v0, v1) @signature `Lcom/b/a/b/g$b$1;.<init>:(Lcom/b/a/b/g$b;)V` @kind direct;
  #L145f1a.  return v0 @kind object;
}
procedure `boolean` `remove`(`com.b.a.b.g$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g$b;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145f2c.  v0:= v1.`com.b.a.b.g$b.a` @type ^`com.b.a.b.g` @kind object;
  #L145f30.  call temp:= `b`(v0, v2) @signature `Lcom/b/a/b/g;.b:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L145f36.  v0:= temp @kind object;
  #L145f38.  if v0 == 0 then goto L145f40;
  #L145f3c.  v0:= 1I;
  #L145f3e.  return v0;
  #L145f40.  v0:= 0I;
  #L145f42.  goto L145f3e;
}
procedure `int` `size`(`com.b.a.b.g$b` v1 @kind this) @signature `Lcom/b/a/b/g$b;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145f54.  v0:= v1.`com.b.a.b.g$b.a` @type ^`com.b.a.b.g` @kind object;
  #L145f58.  v0:= v0.`com.b.a.b.g.c` @type ^`int`;
  #L145f5c.  return v0;
}
