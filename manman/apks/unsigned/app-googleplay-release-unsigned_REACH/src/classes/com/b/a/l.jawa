record `com.b.a.l` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`com.b.a.l` v0 @kind this) @signature `Lcom/b/a/l;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L148600.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L148606.  return @kind void;
}
procedure `java.lang.Number` `a`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.a:()Ljava/lang/Number;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L148618.  v0:= new `java.lang.UnsupportedOperationException`;
  #L14861c.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L148622.  v1:= temp @kind object;
  #L148624.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L14862a.  v1:= temp @kind object;
  #L14862c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L148632.  throw v0;
}
procedure `java.lang.String` `b`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L148644.  v0:= new `java.lang.UnsupportedOperationException`;
  #L148648.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L14864e.  v1:= temp @kind object;
  #L148650.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L148656.  v1:= temp @kind object;
  #L148658.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14865e.  throw v0;
}
procedure `double` `c`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.c:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L148670.  v0:= new `java.lang.UnsupportedOperationException`;
  #L148674.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L14867a.  v1:= temp @kind object;
  #L14867c.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L148682.  v1:= temp @kind object;
  #L148684.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14868a.  throw v0;
}
procedure `long` `d`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14869c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1486a0.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1486a6.  v1:= temp @kind object;
  #L1486a8.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1486ae.  v1:= temp @kind object;
  #L1486b0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1486b6.  throw v0;
}
procedure `int` `e`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1486c8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1486cc.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1486d2.  v1:= temp @kind object;
  #L1486d4.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1486da.  v1:= temp @kind object;
  #L1486dc.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1486e2.  throw v0;
}
procedure `boolean` `f`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1486f4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L1486f8.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1486fe.  v1:= temp @kind object;
  #L148700.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L148706.  v1:= temp @kind object;
  #L148708.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14870e.  throw v0;
}
procedure `boolean` `g`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L148720.  v0:= instanceof @variable v1 @type ^`com.b.a.i` @kind boolean;
  #L148724.  return v0;
}
procedure `boolean` `h`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L148738.  v0:= instanceof @variable v1 @type ^`com.b.a.o` @kind boolean;
  #L14873c.  return v0;
}
procedure `boolean` `i`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L148750.  v0:= instanceof @variable v1 @type ^`com.b.a.q` @kind boolean;
  #L148754.  return v0;
}
procedure `boolean` `j`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.j:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L148768.  v0:= instanceof @variable v1 @type ^`com.b.a.n` @kind boolean;
  #L14876c.  return v0;
}
procedure `com.b.a.o` `k`(`com.b.a.l` v3 @kind this) @signature `Lcom/b/a/l;.k:()Lcom/b/a/o;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L148780.  call temp:= `h`(v3) @signature `Lcom/b/a/l;.h:()Z` @kind virtual;
  #L148786.  v0:= temp;
  #L148788.  if v0 == 0 then goto L148792;
  #L14878c.  v3:= (`com.b.a.o`) v3 @kind object;
  #L148790.  return v3 @kind object;
  #L148792.  v0:= new `java.lang.IllegalStateException`;
  #L148796.  v1:= new `java.lang.StringBuilder`;
  #L14879a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1487a0.  v2:= "Not a JSON Object: " @kind object;
  #L1487a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1487aa.  v1:= temp @kind object;
  #L1487ac.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1487b2.  v1:= temp @kind object;
  #L1487b4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1487ba.  v1:= temp @kind object;
  #L1487bc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1487c2.  throw v0;
}
procedure `com.b.a.i` `l`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.l:()Lcom/b/a/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1487d4.  call temp:= `g`(v2) @signature `Lcom/b/a/l;.g:()Z` @kind virtual;
  #L1487da.  v0:= temp;
  #L1487dc.  if v0 == 0 then goto L1487e6;
  #L1487e0.  v2:= (`com.b.a.i`) v2 @kind object;
  #L1487e4.  return v2 @kind object;
  #L1487e6.  v0:= new `java.lang.IllegalStateException`;
  #L1487ea.  v1:= "This is not a JSON Array." @kind object;
  #L1487ee.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1487f4.  throw v0;
}
procedure `com.b.a.q` `m`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.m:()Lcom/b/a/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L148808.  call temp:= `i`(v2) @signature `Lcom/b/a/l;.i:()Z` @kind virtual;
  #L14880e.  v0:= temp;
  #L148810.  if v0 == 0 then goto L14881a;
  #L148814.  v2:= (`com.b.a.q`) v2 @kind object;
  #L148818.  return v2 @kind object;
  #L14881a.  v0:= new `java.lang.IllegalStateException`;
  #L14881e.  v1:= "This is not a JSON Primitive." @kind object;
  #L148822.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L148828.  throw v0;
}
procedure `java.lang.Boolean` `n`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.n:()Ljava/lang/Boolean;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L14883c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L148840.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L148846.  v1:= temp @kind object;
  #L148848.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L14884e.  v1:= temp @kind object;
  #L148850.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L148856.  throw v0;
}
procedure `java.lang.String` `toString`(`com.b.a.l` v3 @kind this) @signature `Lcom/b/a/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L148868.  v0:= new `java.io.StringWriter`;
  #L14886c.  call `<init>`(v0) @signature `Ljava/io/StringWriter;.<init>:()V` @kind direct;
  #L148872.  v1:= new `com.b.a.d.c`;
  #L148876.  call `<init>`(v1, v0) @signature `Lcom/b/a/d/c;.<init>:(Ljava/io/Writer;)V` @kind direct;
  #L14887c.  v2:= 1I;
  #L14887e.  call `b`(v1, v2) @signature `Lcom/b/a/d/c;.b:(Z)V` @kind virtual;
  #L148884.  call `a`(v3, v1) @signature `Lcom/b/a/b/j;.a:(Lcom/b/a/l;Lcom/b/a/d/c;)V` @kind static;
  #L14888a.  call temp:= `toString`(v0) @signature `Ljava/io/StringWriter;.toString:()Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L148890.  v0:= temp @kind object;
  #L148892.  return v0 @kind object;
  #L148894.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L148896.  v1:= new `java.lang.AssertionError`;
  #L14889a.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1488a0.  throw v1;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L148894;
}
