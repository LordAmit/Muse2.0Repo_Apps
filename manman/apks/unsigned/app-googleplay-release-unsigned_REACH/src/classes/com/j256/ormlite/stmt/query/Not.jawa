record `com.j256.ormlite.stmt.query.Not` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.query.Clause` @kind interface, `com.j256.ormlite.stmt.query.NeedsFutureClause` @kind interface {
  `com.j256.ormlite.stmt.query.Comparison` `com.j256.ormlite.stmt.query.Not.comparison` @AccessFlag PRIVATE;
  `com.j256.ormlite.stmt.query.Exists` `com.j256.ormlite.stmt.query.Not.exists` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.Not` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/Not;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1685ec.  v0:= 0I;
  #L1685ee.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1685f4.  v1.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` := v0 @kind object;
  #L1685f8.  v1.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` := v0 @kind object;
  #L1685fc.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.Not` v1 @kind this, `com.j256.ormlite.stmt.query.Clause` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Not;.<init>:(Lcom/j256/ormlite/stmt/query/Clause;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L168610.  v0:= 0I;
  #L168612.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L168618.  v1.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` := v0 @kind object;
  #L16861c.  v1.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` := v0 @kind object;
  #L168620.  call `setMissingClause`(v1, v2) @signature `Lcom/j256/ormlite/stmt/query/Not;.setMissingClause:(Lcom/j256/ormlite/stmt/query/Clause;)V` @kind virtual;
  #L168626.  return @kind void;
}
procedure `void` `appendSql`(`com.j256.ormlite.stmt.query.Not` v2 @kind this, `com.j256.ormlite.db.DatabaseType` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.StringBuilder` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Not;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L168638.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L16863c.  if v0 != 0 then goto L168658;
  #L168640.  v0:= v2.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` @kind object;
  #L168644.  if v0 != 0 then goto L168658;
  #L168648.  v0:= new `java.lang.IllegalStateException`;
  #L16864c.  v1:= "Clause has not been set in NOT operation" @kind object;
  #L168650.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L168656.  throw v0;
  #L168658.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L16865c.  if v0 != 0 then goto L168680;
  #L168660.  v0:= "(NOT " @kind object;
  #L168664.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16866a.  v0:= v2.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` @kind object;
  #L16866e.  call `appendSql`(v0, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/stmt/query/Exists;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L168674.  v0:= ") " @kind object;
  #L168678.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16867e.  return @kind void;
  #L168680.  v0:= "(NOT " @kind object;
  #L168684.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16868a.  if v4 == 0 then goto L16869e;
  #L16868e.  call `appendEscapedEntityName`(v3, v5, v4) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L168694.  v0:= 46I;
  #L168698.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16869e.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L1686a2.  call temp:= `getColumnName`(v0) @signature `Lcom/j256/ormlite/stmt/query/Comparison;.getColumnName:()Ljava/lang/String;` @kind interface;
  #L1686a8.  v0:= temp @kind object;
  #L1686aa.  call `appendEscapedEntityName`(v3, v5, v0) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L1686b0.  v0:= 32I;
  #L1686b4.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1686ba.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L1686be.  call `appendOperation`(v0, v5) @signature `Lcom/j256/ormlite/stmt/query/Comparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @kind interface;
  #L1686c4.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L1686c8.  call `appendValue`(v0, v3, v5, v6) @signature `Lcom/j256/ormlite/stmt/query/Comparison;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind interface;
  #L1686ce.  goto L168674;
}
procedure `void` `setMissingClause`(`com.j256.ormlite.stmt.query.Not` v3 @kind this, `com.j256.ormlite.stmt.query.Clause` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Not;.setMissingClause:(Lcom/j256/ormlite/stmt/query/Clause;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1686e0.  v0:= v3.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L1686e4.  if v0 == 0 then goto L1686f8;
  #L1686e8.  v0:= new `java.lang.IllegalArgumentException`;
  #L1686ec.  v1:= "NOT operation already has a comparison set" @kind object;
  #L1686f0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1686f6.  throw v0;
  #L1686f8.  v0:= instanceof @variable v4 @type ^`com.j256.ormlite.stmt.query.Comparison` @kind boolean;
  #L1686fc.  if v0 == 0 then goto L16870a;
  #L168700.  v4:= (`com.j256.ormlite.stmt.query.Comparison`) v4 @kind object;
  #L168704.  v3.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` := v4 @kind object;
  #L168708.  return @kind void;
  #L16870a.  v0:= instanceof @variable v4 @type ^`com.j256.ormlite.stmt.query.Exists` @kind boolean;
  #L16870e.  if v0 == 0 then goto L16871c;
  #L168712.  v4:= (`com.j256.ormlite.stmt.query.Exists`) v4 @kind object;
  #L168716.  v3.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` := v4 @kind object;
  #L16871a.  goto L168708;
  #L16871c.  v0:= new `java.lang.IllegalArgumentException`;
  #L168720.  v1:= new `java.lang.StringBuilder`;
  #L168724.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16872a.  v2:= "NOT operation can only work with comparison SQL clauses, not " @kind object;
  #L16872e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L168734.  v1:= temp @kind object;
  #L168736.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16873c.  v1:= temp @kind object;
  #L16873e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L168744.  v1:= temp @kind object;
  #L168746.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16874c.  throw v0;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.query.Not` v2 @kind this) @signature `Lcom/j256/ormlite/stmt/query/Not;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L168760.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L168764.  if v0 != 0 then goto L16876e;
  #L168768.  v0:= "NOT without comparison" @kind object;
  #L16876c.  return v0 @kind object;
  #L16876e.  v0:= new `java.lang.StringBuilder`;
  #L168772.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L168778.  v1:= "NOT comparison " @kind object;
  #L16877c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L168782.  v0:= temp @kind object;
  #L168784.  v1:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L168788.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16878e.  v0:= temp @kind object;
  #L168790.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L168796.  v0:= temp @kind object;
  #L168798.  goto L16876c;
}
