record `com.j256.ormlite.stmt.query.BaseComparison` @kind class @AccessFlag ABSTRACT extends `com.j256.ormlite.stmt.query.Comparison` @kind interface {
  `java.lang.String` `com.j256.ormlite.stmt.query.BaseComparison.columnName` @AccessFlag PROTECTED_FINAL;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.stmt.query.BaseComparison.fieldType` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `com.j256.ormlite.stmt.query.BaseComparison.value` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@com.j256.ormlite.stmt.query.BaseComparison.NUMBER_CHARACTERS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.BaseComparison` v3 @kind this, `java.lang.String` v4 @kind object, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `boolean` v7 ) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Z)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L167a4c.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L167a52.  if v7 == 0 then goto L167ac0;
  #L167a56.  if v5 == 0 then goto L167ac0;
  #L167a5a.  call temp:= `isComparable`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.isComparable:()Z` @kind virtual;
  #L167a60.  v0:= temp;
  #L167a62.  if v0 != 0 then goto L167ac0;
  #L167a66.  v0:= new `java.sql.SQLException`;
  #L167a6a.  v1:= new `java.lang.StringBuilder`;
  #L167a6e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L167a74.  v2:= "Field '" @kind object;
  #L167a78.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167a7e.  v1:= temp @kind object;
  #L167a80.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167a86.  v1:= temp @kind object;
  #L167a88.  v2:= "' is of data type " @kind object;
  #L167a8c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167a92.  v1:= temp @kind object;
  #L167a94.  call temp:= `getDataPersister`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L167a9a.  v2:= temp @kind object;
  #L167a9c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167aa2.  v1:= temp @kind object;
  #L167aa4.  v2:= " which can not be compared" @kind object;
  #L167aa8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167aae.  v1:= temp @kind object;
  #L167ab0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L167ab6.  v1:= temp @kind object;
  #L167ab8.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L167abe.  throw v0;
  #L167ac0.  v3.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` := v4 @kind object;
  #L167ac4.  v3.`com.j256.ormlite.stmt.query.BaseComparison.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v5 @kind object;
  #L167ac8.  v3.`com.j256.ormlite.stmt.query.BaseComparison.value` @type ^`java.lang.Object` := v6 @kind object;
  #L167acc.  return @kind void;
}
procedure `void` `appendArgOrValue`(`com.j256.ormlite.stmt.query.BaseComparison` v7 @kind this, `com.j256.ormlite.db.DatabaseType` v8 @kind object, `com.j256.ormlite.field.FieldType` v9 @kind object, `java.lang.StringBuilder` v10 @kind object, `java.util.List` v11 @kind object, `java.lang.Object` v12 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L167ae0.  v2:= 63I;
  #L167ae4.  v6:= 0I;
  #L167ae6.  v0:= 1I;
  #L167ae8.  if v12 != 0 then goto L167b32;
  #L167aec.  v0:= new `java.sql.SQLException`;
  #L167af0.  v1:= new `java.lang.StringBuilder`;
  #L167af4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L167afa.  v2:= "argument for '" @kind object;
  #L167afe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167b04.  v1:= temp @kind object;
  #L167b06.  call temp:= `getFieldName`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldName:()Ljava/lang/String;` @kind virtual;
  #L167b0c.  v2:= temp @kind object;
  #L167b0e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167b14.  v1:= temp @kind object;
  #L167b16.  v2:= "' is null" @kind object;
  #L167b1a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167b20.  v1:= temp @kind object;
  #L167b22.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L167b28.  v1:= temp @kind object;
  #L167b2a.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L167b30.  throw v0;
  #L167b32.  v1:= instanceof @variable v12 @type ^`com.j256.ormlite.stmt.ArgumentHolder` @kind boolean;
  #L167b36.  if v1 == 0 then goto L167b64;
  #L167b3a.  call temp:= `append`(v10, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L167b40.  v12:= (`com.j256.ormlite.stmt.ArgumentHolder`) v12 @kind object;
  #L167b44.  v1:= v7.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L167b48.  call `setMetaInfo`(v12, v1, v9) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setMetaInfo:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)V` @kind interface;
  #L167b4e.  call temp:= `add`(v11, v12) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L167b54.  if v0 == 0 then goto L167b62;
  #L167b58.  v0:= 32I;
  #L167b5c.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L167b62.  return @kind void;
  #L167b64.  v1:= instanceof @variable v12 @type ^`com.j256.ormlite.stmt.ColumnArg` @kind boolean;
  #L167b68.  if v1 == 0 then goto L167b9c;
  #L167b6c.  v12:= (`com.j256.ormlite.stmt.ColumnArg`) v12 @kind object;
  #L167b70.  call temp:= `getTableName`(v12) @signature `Lcom/j256/ormlite/stmt/ColumnArg;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L167b76.  v1:= temp @kind object;
  #L167b78.  if v1 == 0 then goto L167b8c;
  #L167b7c.  call `appendEscapedEntityName`(v8, v10, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L167b82.  v1:= 46I;
  #L167b86.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L167b8c.  call temp:= `getColumnName`(v12) @signature `Lcom/j256/ormlite/stmt/ColumnArg;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L167b92.  v1:= temp @kind object;
  #L167b94.  call `appendEscapedEntityName`(v8, v10, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L167b9a.  goto L167b54;
  #L167b9c.  call temp:= `isArgumentHolderRequired`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isArgumentHolderRequired:()Z` @kind virtual;
  #L167ba2.  v1:= temp;
  #L167ba4.  if v1 == 0 then goto L167bd0;
  #L167ba8.  call temp:= `append`(v10, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L167bae.  v1:= new `com.j256.ormlite.stmt.SelectArg`;
  #L167bb2.  call `<init>`(v1) @signature `Lcom/j256/ormlite/stmt/SelectArg;.<init>:()V` @kind direct;
  #L167bb8.  v2:= v7.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L167bbc.  call `setMetaInfo`(v1, v2, v9) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setMetaInfo:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)V` @kind interface;
  #L167bc2.  call `setValue`(v1, v12) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setValue:(Ljava/lang/Object;)V` @kind interface;
  #L167bc8.  call temp:= `add`(v11, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L167bce.  goto L167b54;
  #L167bd0.  call temp:= `isForeign`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @kind virtual;
  #L167bd6.  v1:= temp;
  #L167bd8.  if v1 == 0 then goto L167c1a;
  #L167bdc.  call temp:= `getType`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L167be2.  v1:= temp @kind object;
  #L167be4.  call temp:= `getClass`(v12) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L167bea.  v2:= temp @kind object;
  #L167bec.  call temp:= `isAssignableFrom`(v1, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L167bf2.  v1:= temp;
  #L167bf4.  if v1 == 0 then goto L167c1a;
  #L167bf8.  call temp:= `getForeignIdField`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L167bfe.  v2:= temp @kind object;
  #L167c00.  call temp:= `extractJavaFieldValue`(v2, v12) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L167c06.  v5:= temp @kind object;
  #L167c08.  v0:= v7 @kind object;
  #L167c0a.  v1:= v8 @kind object;
  #L167c0c.  v3:= v10 @kind object;
  #L167c0e.  v4:= v11 @kind object;
  #L167c10.  call `appendArgOrValue`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @kind virtual;
  #L167c16.  v0:= v6;
  #L167c18.  goto L167b54;
  #L167c1a.  call temp:= `isEscapedValue`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedValue:()Z` @kind virtual;
  #L167c20.  v1:= temp;
  #L167c22.  if v1 == 0 then goto L167c3e;
  #L167c26.  call temp:= `convertJavaFieldToSqlArgValue`(v9, v12) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L167c2c.  v1:= temp @kind object;
  #L167c2e.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L167c34.  v1:= temp @kind object;
  #L167c36.  call `appendEscapedWord`(v8, v10, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L167c3c.  goto L167b54;
  #L167c3e.  call temp:= `isForeign`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @kind virtual;
  #L167c44.  v1:= temp;
  #L167c46.  if v1 == 0 then goto L167ce2;
  #L167c4a.  call temp:= `convertJavaFieldToSqlArgValue`(v9, v12) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L167c50.  v1:= temp @kind object;
  #L167c52.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L167c58.  v1:= temp @kind object;
  #L167c5a.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L167c60.  v2:= temp;
  #L167c62.  if v2 <= 0 then goto L167cd8;
  #L167c66.  v2:= "0123456789.-+" @kind object;
  #L167c6a.  call temp:= `charAt`(v1, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L167c70.  v3:= temp;
  #L167c72.  call temp:= `indexOf`(v2, v3) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L167c78.  v2:= temp;
  #L167c7a.  if v2 >= 0 then goto L167cd8;
  #L167c7e.  v0:= new `java.sql.SQLException`;
  #L167c82.  v2:= new `java.lang.StringBuilder`;
  #L167c86.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L167c8c.  v3:= "Foreign field " @kind object;
  #L167c90.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167c96.  v2:= temp @kind object;
  #L167c98.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167c9e.  v2:= temp @kind object;
  #L167ca0.  v3:= " does not seem to be producing a numerical value '" @kind object;
  #L167ca4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167caa.  v2:= temp @kind object;
  #L167cac.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167cb2.  v1:= temp @kind object;
  #L167cb4.  v2:= "'. Maybe you are passing the wrong object to comparison: " @kind object;
  #L167cb8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167cbe.  v1:= temp @kind object;
  #L167cc0.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167cc6.  v1:= temp @kind object;
  #L167cc8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L167cce.  v1:= temp @kind object;
  #L167cd0.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L167cd6.  throw v0;
  #L167cd8.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167cde.  goto L167b54;
  #L167ce2.  call temp:= `convertJavaFieldToSqlArgValue`(v9, v12) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L167ce8.  v1:= temp @kind object;
  #L167cea.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167cf0.  goto L167b54;
}
procedure `void` `appendOperation`(`java.lang.StringBuilder` v0 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `appendSql`(`com.j256.ormlite.stmt.query.BaseComparison` v1 @kind this, `com.j256.ormlite.db.DatabaseType` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.StringBuilder` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L167d04.  if v3 == 0 then goto L167d18;
  #L167d08.  call `appendEscapedEntityName`(v2, v4, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L167d0e.  v0:= 46I;
  #L167d12.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L167d18.  v0:= v1.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L167d1c.  call `appendEscapedEntityName`(v2, v4, v0) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L167d22.  v0:= 32I;
  #L167d26.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L167d2c.  call `appendOperation`(v1, v4) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @kind virtual;
  #L167d32.  call `appendValue`(v1, v2, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L167d38.  return @kind void;
}
procedure `void` `appendValue`(`com.j256.ormlite.stmt.query.BaseComparison` v6 @kind this, `com.j256.ormlite.db.DatabaseType` v7 @kind object, `java.lang.StringBuilder` v8 @kind object, `java.util.List` v9 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L167d4c.  v2:= v6.`com.j256.ormlite.stmt.query.BaseComparison.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L167d50.  v5:= v6.`com.j256.ormlite.stmt.query.BaseComparison.value` @type ^`java.lang.Object` @kind object;
  #L167d54.  v0:= v6 @kind object;
  #L167d56.  v1:= v7 @kind object;
  #L167d58.  v3:= v8 @kind object;
  #L167d5a.  v4:= v9 @kind object;
  #L167d5c.  call `appendArgOrValue`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @kind virtual;
  #L167d62.  return @kind void;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.stmt.query.BaseComparison` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L167d74.  v0:= v1.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L167d78.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.query.BaseComparison` v3 @kind this) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L167d8c.  v2:= 32I;
  #L167d90.  v0:= new `java.lang.StringBuilder`;
  #L167d94.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L167d9a.  v1:= v3.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L167d9e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167da4.  v1:= temp @kind object;
  #L167da6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L167dac.  call `appendOperation`(v3, v0) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @kind virtual;
  #L167db2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L167db8.  v1:= v3.`com.j256.ormlite.stmt.query.BaseComparison.value` @type ^`java.lang.Object` @kind object;
  #L167dbc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167dc2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L167dc8.  v0:= temp @kind object;
  #L167dca.  return v0 @kind object;
}
