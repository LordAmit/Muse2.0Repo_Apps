record `com.j256.ormlite.field.types.DateStringType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDateType` @kind class {
}
global `int` `@@com.j256.ormlite.field.types.DateStringType.DEFAULT_WIDTH` @AccessFlag PUBLIC_STATIC;
global `com.j256.ormlite.field.types.DateStringType` `@@com.j256.ormlite.field.types.DateStringType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/DateStringType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15c0d4.  v0:= 50I;
  #L15c0d8.  `@@com.j256.ormlite.field.types.DateStringType.DEFAULT_WIDTH` @type ^`int` := v0;
  #L15c0dc.  v0:= new `com.j256.ormlite.field.types.DateStringType`;
  #L15c0e0.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:()V` @kind direct;
  #L15c0e6.  `@@com.j256.ormlite.field.types.DateStringType.singleTon` @type ^`com.j256.ormlite.field.types.DateStringType` := v0 @kind object;
  #L15c0ea.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L15c0fc.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15c100.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L15c106.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateStringType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15c118.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L15c11e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateStringType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15c130.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15c136.  return @kind void;
}
procedure `com.j256.ormlite.field.types.DateStringType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/DateStringType;.getSingleton:()Lcom/j256/ormlite/field/types/DateStringType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15c148.  v0:= `@@com.j256.ormlite.field.types.DateStringType.singleTon` @type ^`com.j256.ormlite.field.types.DateStringType` @kind object;
  #L15c14c.  return v0 @kind object;
}
procedure `int` `getDefaultWidth`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateStringType;.getDefaultWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c160.  v0:= `@@com.j256.ormlite.field.types.DateStringType.DEFAULT_WIDTH` @type ^`int`;
  #L15c164.  return v0;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateStringType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c178.  v0:= constclass @type ^`byte`[] @kind object;
  #L15c17c.  return v0 @kind object;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c190.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L15c194.  call temp:= `convertDateStringConfig`(v2, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind static;
  #L15c19a.  v0:= temp @kind object;
  #L15c19c.  call temp:= `getDateFormat`(v0) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.getDateFormat:()Ljava/text/DateFormat;` @kind virtual;
  #L15c1a2.  v0:= temp @kind object;
  #L15c1a4.  v3:= (`java.util.Date`) v3 @kind object;
  #L15c1a8.  call temp:= `format`(v0, v3) @signature `Ljava/text/DateFormat;.format:(Ljava/util/Date;)Ljava/lang/String;` @kind virtual;
  #L15c1ae.  v0:= temp @kind object;
  #L15c1b0.  return v0 @kind object;
}
procedure `java.lang.Object` `makeConfigObject`(`com.j256.ormlite.field.types.DateStringType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.makeConfigObject:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15c1c4.  call temp:= `getFormat`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L15c1ca.  v1:= temp @kind object;
  #L15c1cc.  if v1 != 0 then goto L15c1d6;
  #L15c1d0.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L15c1d4.  return v0 @kind object;
  #L15c1d6.  v0:= new `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig`;
  #L15c1da.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15c1e0.  goto L15c1d4;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.DateStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c1f4.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L15c1f8.  call temp:= `convertDateStringConfig`(v5, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind static;
  #L15c1fe.  v0:= temp @kind object;
  #Try_start0.  
  #L15c200.  call temp:= `normalizeDateString`(v0, v6) @signature `Lcom/j256/ormlite/field/types/DateStringType;.normalizeDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #Try_end0.  
  #L15c206.  v0:= temp @kind object;
  #L15c208.  return v0 @kind object;
  #L15c20a.  v1:= Exception @type ^`java.text.ParseException` @kind object;
  #L15c20c.  v2:= new `java.lang.StringBuilder`;
  #L15c210.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15c216.  v3:= "Problems with field " @kind object;
  #L15c21a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c220.  v2:= temp @kind object;
  #L15c222.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c228.  v2:= temp @kind object;
  #L15c22a.  v3:= " parsing default date-string '" @kind object;
  #L15c22e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c234.  v2:= temp @kind object;
  #L15c236.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c23c.  v2:= temp @kind object;
  #L15c23e.  v3:= "' using '" @kind object;
  #L15c242.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c248.  v2:= temp @kind object;
  #L15c24a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c250.  v0:= temp @kind object;
  #L15c252.  v2:= "'" @kind object;
  #L15c256.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c25c.  v0:= temp @kind object;
  #L15c25e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15c264.  v0:= temp @kind object;
  #L15c266.  call temp:= `create`(v0, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15c26c.  v0:= temp @kind object;
  #L15c26e.  throw v0;
  catch `java.text.ParseException` @[Try_start0..Try_end0] goto L15c20a;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/DateStringType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c290.  call temp:= `sqlArgToJava`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/field/types/DateStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L15c296.  v0:= temp @kind object;
  #L15c298.  return v0 @kind object;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/DateStringType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c2ac.  call temp:= `getString`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getString:(I)Ljava/lang/String;` @kind interface;
  #L15c2b2.  v0:= temp @kind object;
  #L15c2b4.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.DateStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/DateStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c2c8.  v6:= (`java.lang.String`) v6 @kind object;
  #L15c2cc.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L15c2d0.  call temp:= `convertDateStringConfig`(v5, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind static;
  #L15c2d6.  v0:= temp @kind object;
  #Try_start0.  
  #L15c2d8.  call temp:= `parseDateString`(v0, v6) @signature `Lcom/j256/ormlite/field/types/DateStringType;.parseDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #Try_end0.  
  #L15c2de.  v0:= temp @kind object;
  #L15c2e0.  return v0 @kind object;
  #L15c2e2.  v1:= Exception @type ^`java.text.ParseException` @kind object;
  #L15c2e4.  v2:= new `java.lang.StringBuilder`;
  #L15c2e8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15c2ee.  v3:= "Problems with column " @kind object;
  #L15c2f2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c2f8.  v2:= temp @kind object;
  #L15c2fa.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c300.  v2:= temp @kind object;
  #L15c302.  v3:= " parsing date-string '" @kind object;
  #L15c306.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c30c.  v2:= temp @kind object;
  #L15c30e.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c314.  v2:= temp @kind object;
  #L15c316.  v3:= "' using '" @kind object;
  #L15c31a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c320.  v2:= temp @kind object;
  #L15c322.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c328.  v0:= temp @kind object;
  #L15c32a.  v2:= "'" @kind object;
  #L15c32e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c334.  v0:= temp @kind object;
  #L15c336.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15c33c.  v0:= temp @kind object;
  #L15c33e.  call temp:= `create`(v0, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15c344.  v0:= temp @kind object;
  #L15c346.  throw v0;
  catch `java.text.ParseException` @[Try_start0..Try_end0] goto L15c2e2;
}
