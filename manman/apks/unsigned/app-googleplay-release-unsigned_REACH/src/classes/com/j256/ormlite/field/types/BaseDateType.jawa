record `com.j256.ormlite.field.types.BaseDateType` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` `@@com.j256.ormlite.field.types.BaseDateType.defaultDateFormatConfig` @AccessFlag PROTECTED_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L15ae18.  v0:= new `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig`;
  #L15ae1c.  v1:= "yyyy-MM-dd HH:mm:ss.SSSSSS" @kind object;
  #L15ae20.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15ae26.  `@@com.j256.ormlite.field.types.BaseDateType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` := v0 @kind object;
  #L15ae2a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BaseDateType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15ae3c.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L15ae42.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BaseDateType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15ae54.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15ae5a.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` `convertDateStringConfig`(`com.j256.ormlite.field.FieldType` v1 @kind object, `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;

  #L15ae6c.  if v1 != 0 then goto L15ae72;
  #L15ae70.  return v2 @kind object;
  #L15ae72.  call temp:= `getDataTypeConfigObj`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @kind virtual;
  #L15ae78.  v0:= temp @kind object;
  #L15ae7a.  v0:= (`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig`) v0 @kind object;
  #L15ae7e.  if v0 == 0 then goto L15ae70;
  #L15ae82.  v2:= v0 @kind object;
  #L15ae84.  goto L15ae70;
}
procedure `java.lang.String` `normalizeDateString`(`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.normalizeDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;

  #L15ae98.  call temp:= `getDateFormat`(v2) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.getDateFormat:()Ljava/text/DateFormat;` @kind virtual;
  #L15ae9e.  v0:= temp @kind object;
  #L15aea0.  call temp:= `parse`(v0, v3) @signature `Ljava/text/DateFormat;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L15aea6.  v1:= temp @kind object;
  #L15aea8.  call temp:= `format`(v0, v1) @signature `Ljava/text/DateFormat;.format:(Ljava/util/Date;)Ljava/lang/String;` @kind virtual;
  #L15aeae.  v0:= temp @kind object;
  #L15aeb0.  return v0 @kind object;
}
procedure `java.util.Date` `parseDateString`(`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.parseDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;

  #L15aec4.  call temp:= `getDateFormat`(v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.getDateFormat:()Ljava/text/DateFormat;` @kind virtual;
  #L15aeca.  v0:= temp @kind object;
  #L15aecc.  call temp:= `parse`(v0, v2) @signature `Ljava/text/DateFormat;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L15aed2.  v0:= temp @kind object;
  #L15aed4.  return v0 @kind object;
}
procedure `boolean` `isValidForField`(`com.j256.ormlite.field.types.BaseDateType` v2 @kind this, `java.lang.reflect.Field` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.isValidForField:(Ljava/lang/reflect/Field;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15aee8.  call temp:= `getType`(v3) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15aeee.  v0:= temp @kind object;
  #L15aef0.  v1:= constclass @type ^`java.util.Date` @kind object;
  #L15aef4.  if v0 != v1 then goto L15aefc;
  #L15aef8.  v0:= 1I;
  #L15aefa.  return v0;
  #L15aefc.  v0:= 0I;
  #L15aefe.  goto L15aefa;
}
procedure `boolean` `isValidForVersion`(`com.j256.ormlite.field.types.BaseDateType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.isValidForVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15af10.  v0:= 1I;
  #L15af12.  return v0;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.BaseDateType` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15af24.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L15af2a.  v2:= temp @kind wide;
  #L15af2c.  if v7 != 0 then goto L15af3c;
  #L15af30.  v0:= new `java.util.Date`;
  #L15af34.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L15af3a.  return v0 @kind object;
  #L15af3c.  v7:= (`java.util.Date`) v7 @kind object;
  #L15af40.  call temp:= `getTime`(v7) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L15af46.  v0:= temp @kind wide;
  #L15af48.  v0:= lcmp(v2, v0);
  #L15af4c.  if v0 != 0 then goto L15af62;
  #L15af50.  v0:= new `java.util.Date`;
  #L15af54.  v4:= 1L;
  #L15af58.  v2:= v2 + v4 @kind long;
  #L15af5a.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L15af60.  goto L15af3a;
  #L15af62.  v0:= new `java.util.Date`;
  #L15af66.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L15af6c.  goto L15af3a;
}
