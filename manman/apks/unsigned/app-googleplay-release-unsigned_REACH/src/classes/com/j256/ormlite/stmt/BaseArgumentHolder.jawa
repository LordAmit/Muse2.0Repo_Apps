record `com.j256.ormlite.stmt.BaseArgumentHolder` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.stmt.ArgumentHolder` @kind interface {
  `java.lang.String` `com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.SqlType` `com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L160d70.  v0:= 0I;
  #L160d72.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L160d78.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L160d7c.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v0 @kind object;
  #L160d80.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v0 @kind object;
  #L160d84.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this, `com.j256.ormlite.field.SqlType` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L160d98.  v0:= 0I;
  #L160d9a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L160da0.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L160da4.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v0 @kind object;
  #L160da8.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v0 @kind object;
  #L160dac.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v2 @kind object;
  #L160db0.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L160dc4.  v0:= 0I;
  #L160dc6.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L160dcc.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L160dd0.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v0 @kind object;
  #L160dd4.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v0 @kind object;
  #L160dd8.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v2 @kind object;
  #L160ddc.  return @kind void;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160df0.  v0:= v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L160df4.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `getFieldType`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getFieldType:()Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160e08.  v0:= v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L160e0c.  return v0 @kind object;
}
procedure `java.lang.Object` `getSqlArgValue`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getSqlArgValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L160e20.  call temp:= `isValueSet`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.isValueSet:()Z` @kind virtual;
  #L160e26.  v0:= temp;
  #L160e28.  if v0 != 0 then goto L160e62;
  #L160e2c.  v0:= new `java.sql.SQLException`;
  #L160e30.  v1:= new `java.lang.StringBuilder`;
  #L160e34.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160e3a.  v2:= "Column value has not been set for " @kind object;
  #L160e3e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160e44.  v1:= temp @kind object;
  #L160e46.  v2:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L160e4a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160e50.  v1:= temp @kind object;
  #L160e52.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160e58.  v1:= temp @kind object;
  #L160e5a.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L160e60.  throw v0;
  #L160e62.  call temp:= `getValue`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L160e68.  v0:= temp @kind object;
  #L160e6a.  if v0 != 0 then goto L160e72;
  #L160e6e.  v0:= 0I;
  #L160e70.  return v0 @kind object;
  #L160e72.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L160e76.  if v1 == 0 then goto L160e70;
  #L160e7a.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L160e7e.  call temp:= `isForeign`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @kind virtual;
  #L160e84.  v1:= temp;
  #L160e86.  if v1 == 0 then goto L160eb8;
  #L160e8a.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L160e8e.  call temp:= `getType`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L160e94.  v1:= temp @kind object;
  #L160e96.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L160e9c.  v2:= temp @kind object;
  #L160e9e.  if v1 != v2 then goto L160eb8;
  #L160ea2.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L160ea6.  call temp:= `getForeignRefField`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignRefField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L160eac.  v1:= temp @kind object;
  #L160eae.  call temp:= `extractJavaFieldValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L160eb4.  v0:= temp @kind object;
  #L160eb6.  goto L160e70;
  #L160eb8.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L160ebc.  call temp:= `convertJavaFieldToSqlArgValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L160ec2.  v0:= temp @kind object;
  #L160ec4.  goto L160e70;
}
procedure `com.j256.ormlite.field.SqlType` `getSqlType`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160ed8.  v0:= v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L160edc.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`() @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getValue:()Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `isValueSet`() @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.isValueSet:()Z` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `setMetaInfo`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L160ef0.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L160ef4.  if v0 != 0 then goto L160efe;
  #L160ef8.  v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v4 @kind object;
  #L160efc.  return @kind void;
  #L160efe.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L160f02.  if v0 == v4 then goto L160ef8;
  #L160f06.  v0:= new `java.lang.IllegalArgumentException`;
  #L160f0a.  v1:= new `java.lang.StringBuilder`;
  #L160f0e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160f14.  v2:= "FieldType name cannot be set twice from " @kind object;
  #L160f18.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160f1e.  v1:= temp @kind object;
  #L160f20.  v2:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L160f24.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160f2a.  v1:= temp @kind object;
  #L160f2c.  v2:= " to " @kind object;
  #L160f30.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160f36.  v1:= temp @kind object;
  #L160f38.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160f3e.  v1:= temp @kind object;
  #L160f40.  v2:= ".  Using a SelectArg twice in query with different columns?" @kind object;
  #L160f44.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160f4a.  v1:= temp @kind object;
  #L160f4c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160f52.  v1:= temp @kind object;
  #L160f54.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L160f5a.  throw v0;
}
procedure `void` `setMetaInfo`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L160f6c.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L160f70.  if v0 != 0 then goto L160f7a;
  #L160f74.  v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v4 @kind object;
  #L160f78.  return @kind void;
  #L160f7a.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L160f7e.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L160f84.  v0:= temp;
  #L160f86.  if v0 != 0 then goto L160f74;
  #L160f8a.  v0:= new `java.lang.IllegalArgumentException`;
  #L160f8e.  v1:= new `java.lang.StringBuilder`;
  #L160f92.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160f98.  v2:= "Column name cannot be set twice from " @kind object;
  #L160f9c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160fa2.  v1:= temp @kind object;
  #L160fa4.  v2:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L160fa8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160fae.  v1:= temp @kind object;
  #L160fb0.  v2:= " to " @kind object;
  #L160fb4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160fba.  v1:= temp @kind object;
  #L160fbc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160fc2.  v1:= temp @kind object;
  #L160fc4.  v2:= ".  Using a SelectArg twice in query with different columns?" @kind object;
  #L160fc8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160fce.  v1:= temp @kind object;
  #L160fd0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160fd6.  v1:= temp @kind object;
  #L160fd8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L160fde.  throw v0;
}
procedure `void` `setMetaInfo`(`com.j256.ormlite.stmt.BaseArgumentHolder` v0 @kind this, `java.lang.String` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PUBLIC {
    temp;

  #L160ff0.  call `setMetaInfo`(v0, v1) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Ljava/lang/String;)V` @kind virtual;
  #L160ff6.  call `setMetaInfo`(v0, v2) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Lcom/j256/ormlite/field/FieldType;)V` @kind virtual;
  #L160ffc.  return @kind void;
}
procedure `void` `setValue`(`java.lang.Object` v0 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setValue:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L161010.  call temp:= `isValueSet`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.isValueSet:()Z` @kind virtual;
  #L161016.  v0:= temp;
  #L161018.  if v0 != 0 then goto L161022;
  #L16101c.  v0:= "[unset]" @kind object;
  #L161020.  return v0 @kind object;
  #Try_start0.  
  #L161022.  call temp:= `getSqlArgValue`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getSqlArgValue:()Ljava/lang/Object;` @kind virtual;
  #L161028.  v0:= temp @kind object;
  #L16102a.  if v0 != 0 then goto L161034;
  #L16102e.  v0:= "[null]" @kind object;
  #L161032.  goto L161020;
  #L161034.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L16103a.  v0:= temp @kind object;
  #L16103c.  goto L161020;
  #L16103e.  v0:= Exception @type ^`java.sql.SQLException` @kind object;
  #L161040.  v1:= new `java.lang.StringBuilder`;
  #L161044.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16104a.  v2:= "[could not get value: " @kind object;
  #L16104e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161054.  v1:= temp @kind object;
  #L161056.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16105c.  v0:= temp @kind object;
  #L16105e.  v1:= "]" @kind object;
  #L161062.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161068.  v0:= temp @kind object;
  #L16106a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L161070.  v0:= temp @kind object;
  #L161072.  goto L161020;
  catch `java.sql.SQLException` @[Try_start0..Try_end0] goto L16103e;
}
