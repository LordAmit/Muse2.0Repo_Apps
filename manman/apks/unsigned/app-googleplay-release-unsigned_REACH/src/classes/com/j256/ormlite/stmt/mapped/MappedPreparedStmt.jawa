record `com.j256.ormlite.stmt.mapped.MappedPreparedStmt` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.mapped.BaseMappedQuery` @kind class, `com.j256.ormlite.stmt.PreparedDelete` @kind interface, `com.j256.ormlite.stmt.PreparedQuery` @kind interface, `com.j256.ormlite.stmt.PreparedUpdate` @kind interface {
  `com.j256.ormlite.stmt.ArgumentHolder`[] `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.cacheStore` @AccessFlag PRIVATE_FINAL;
  `java.lang.Long` `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.stmt.StatementBuilder$StatementType` `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v0 @kind this, `com.j256.ormlite.table.TableInfo` v1 @kind object, `java.lang.String` v2 @kind object, `com.j256.ormlite.field.FieldType`[] v3 @kind object, `com.j256.ormlite.field.FieldType`[] v4 @kind object, `com.j256.ormlite.stmt.ArgumentHolder`[] v5 @kind object, `java.lang.Long` v6 @kind object, `com.j256.ormlite.stmt.StatementBuilder$StatementType` v7 @kind object, `boolean` v8 ) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/stmt/ArgumentHolder;Ljava/lang/Long;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L166ea4.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L166eaa.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] := v5 @kind object;
  #L166eae.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @type ^`java.lang.Long` := v6 @kind object;
  #L166eb2.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` := v7 @kind object;
  #L166eb6.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.cacheStore` @type ^`boolean` := v8 @kind boolean;
  #L166eba.  return @kind void;
}
procedure `com.j256.ormlite.support.CompiledStatement` `assignStatementArguments`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v5 @kind this, `com.j256.ormlite.support.CompiledStatement` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.assignStatementArguments:(Lcom/j256/ormlite/support/CompiledStatement;)Lcom/j256/ormlite/support/CompiledStatement;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #Try_start0.  
  #L166ecc.  v0:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @type ^`java.lang.Long` @kind object;
  #L166ed0.  if v0 == 0 then goto L166ee6;
  #L166ed4.  v0:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @type ^`java.lang.Long` @kind object;
  #L166ed8.  call temp:= `intValue`(v0) @signature `Ljava/lang/Long;.intValue:()I` @kind virtual;
  #L166ede.  v0:= temp;
  #L166ee0.  call `setMaxRows`(v6, v0) @signature `Lcom/j256/ormlite/support/CompiledStatement;.setMaxRows:(I)V` @kind interface;
  #L166ee6.  v0:= 0I;
  #L166ee8.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedPreparedStmt.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L166eec.  v2:= `@@com.j256.ormlite.logger.Log$Level.TRACE` @type ^`com.j256.ormlite.logger.Log$Level` @kind object;
  #L166ef0.  call temp:= `isLevelEnabled`(v1, v2) @signature `Lcom/j256/ormlite/logger/Logger;.isLevelEnabled:(Lcom/j256/ormlite/logger/Log$Level;)Z` @kind virtual;
  #L166ef6.  v1:= temp;
  #L166ef8.  if v1 == 0 then goto L166f10;
  #L166efc.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L166f00.  v1:= length @variable v1;
  #L166f02.  if v1 <= 0 then goto L166f10;
  #L166f06.  v0:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L166f0a.  v0:= length @variable v0;
  #L166f0c.  v0:= new `java.lang.Object`[v0];
  #L166f10.  v1:= 0I;
  #L166f12.  v2:= v1;
  #L166f14.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L166f18.  v1:= length @variable v1;
  #L166f1a.  if v2 >= v1 then goto L166f6a;
  #L166f1e.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L166f22.  v1:= v1[v2] @kind object;
  #L166f26.  call temp:= `getSqlArgValue`(v1) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.getSqlArgValue:()Ljava/lang/Object;` @kind interface;
  #L166f2c.  v3:= temp @kind object;
  #L166f2e.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L166f32.  v1:= v1[v2] @kind object;
  #L166f36.  if v1 != 0 then goto L166f60;
  #L166f3a.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L166f3e.  v1:= v1[v2] @kind object;
  #L166f42.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L166f48.  v1:= temp @kind object;
  #L166f4a.  call `setObject`(v6, v2, v3, v1) @signature `Lcom/j256/ormlite/support/CompiledStatement;.setObject:(ILjava/lang/Object;Lcom/j256/ormlite/field/SqlType;)V` @kind interface;
  #L166f50.  if v0 == 0 then goto L166f58;
  #L166f54.  v0[v2]:= v3 @kind object;
  #L166f58.  v1:= v2 + 1;
  #L166f5c.  v2:= v1;
  #L166f5e.  goto L166f14;
  #L166f60.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L166f66.  v1:= temp @kind object;
  #L166f68.  goto L166f4a;
  #L166f6a.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedPreparedStmt.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L166f6e.  v2:= "prepared statement '{}' with {} args" @kind object;
  #L166f72.  v3:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.statement` @type ^`java.lang.String` @kind object;
  #L166f76.  v4:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L166f7a.  v4:= length @variable v4;
  #L166f7c.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L166f82.  v4:= temp @kind object;
  #L166f84.  call `debug`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L166f8a.  if v0 == 0 then goto L166f9c;
  #L166f8e.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedPreparedStmt.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L166f92.  v2:= "prepared statement arguments: {}" @kind object;
  #L166f96.  call `trace`(v1, v2, v0) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #Try_end0.  
  #L166f9c.  return v6 @kind object;
  #L166f9e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L166fa0.  v1:= "statement" @kind object;
  #L166fa4.  call `closeThrowSqlException`(v6, v1) @signature `Lcom/j256/ormlite/misc/IOUtils;.closeThrowSqlException:(Ljava/io/Closeable;Ljava/lang/String;)V` @kind static;
  #L166faa.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L166f9e;
}
procedure `com.j256.ormlite.support.CompiledStatement` `compile`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v1 @kind this, `com.j256.ormlite.support.DatabaseConnection` v2 @kind object, `com.j256.ormlite.stmt.StatementBuilder$StatementType` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.compile:(Lcom/j256/ormlite/support/DatabaseConnection;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;)Lcom/j256/ormlite/support/CompiledStatement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L166fc8.  v0:= -1I;
  #L166fca.  call temp:= `compile`(v1, v2, v3, v0) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.compile:(Lcom/j256/ormlite/support/DatabaseConnection;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;I)Lcom/j256/ormlite/support/CompiledStatement;` @kind virtual;
  #L166fd0.  v0:= temp @kind object;
  #L166fd2.  return v0 @kind object;
}
procedure `com.j256.ormlite.support.CompiledStatement` `compile`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v6 @kind this, `com.j256.ormlite.support.DatabaseConnection` v7 @kind object, `com.j256.ormlite.stmt.StatementBuilder$StatementType` v8 @kind object, `int` v9 ) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.compile:(Lcom/j256/ormlite/support/DatabaseConnection;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;I)Lcom/j256/ormlite/support/CompiledStatement;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L166fe4.  v0:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L166fe8.  if v0 == v8 then goto L167042;
  #L166fec.  v0:= new `java.sql.SQLException`;
  #L166ff0.  v1:= new `java.lang.StringBuilder`;
  #L166ff4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L166ffa.  v2:= "Could not compile this " @kind object;
  #L166ffe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167004.  v1:= temp @kind object;
  #L167006.  v2:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L16700a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167010.  v1:= temp @kind object;
  #L167012.  v2:= " statement since the caller is expecting a " @kind object;
  #L167016.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16701c.  v1:= temp @kind object;
  #L16701e.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167024.  v1:= temp @kind object;
  #L167026.  v2:= " statement.  Check your QueryBuilder methods." @kind object;
  #L16702a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167030.  v1:= temp @kind object;
  #L167032.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L167038.  v1:= temp @kind object;
  #L16703a.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L167040.  throw v0;
  #L167042.  v1:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.statement` @type ^`java.lang.String` @kind object;
  #L167046.  v3:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L16704a.  v5:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.cacheStore` @type ^`boolean` @kind boolean;
  #L16704e.  v0:= v7 @kind object;
  #L167050.  v2:= v8 @kind object;
  #L167052.  v4:= v9;
  #L167054.  call temp:= `compileStatement`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/support/DatabaseConnection;.compileStatement:(Ljava/lang/String;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;[Lcom/j256/ormlite/field/FieldType;IZ)Lcom/j256/ormlite/support/CompiledStatement;` @kind interface;
  #L16705a.  v0:= temp @kind object;
  #L16705c.  call temp:= `assignStatementArguments`(v6, v0) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.assignStatementArguments:(Lcom/j256/ormlite/support/CompiledStatement;)Lcom/j256/ormlite/support/CompiledStatement;` @kind direct;
  #L167062.  v0:= temp @kind object;
  #L167064.  return v0 @kind object;
}
procedure `java.lang.String` `getStatement`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.getStatement:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L167078.  v0:= v1.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.statement` @type ^`java.lang.String` @kind object;
  #L16707c.  return v0 @kind object;
}
procedure `com.j256.ormlite.stmt.StatementBuilder$StatementType` `getType`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.getType:()Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L167090.  v0:= v1.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L167094.  return v0 @kind object;
}
procedure `void` `setArgumentHolderValue`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v3 @kind this, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.setArgumentHolderValue:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1670a8.  if v4 >= 0 then goto L1670ea;
  #L1670ac.  v0:= new `java.sql.SQLException`;
  #L1670b0.  v1:= new `java.lang.StringBuilder`;
  #L1670b4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1670ba.  v2:= "argument holder index " @kind object;
  #L1670be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1670c4.  v1:= temp @kind object;
  #L1670c6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1670cc.  v1:= temp @kind object;
  #L1670ce.  v2:= " must be >= 0" @kind object;
  #L1670d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1670d8.  v1:= temp @kind object;
  #L1670da.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1670e0.  v1:= temp @kind object;
  #L1670e2.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1670e8.  throw v0;
  #L1670ea.  v0:= v3.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L1670ee.  v0:= length @variable v0;
  #L1670f0.  if v0 > v4 then goto L16714c;
  #L1670f4.  v0:= new `java.sql.SQLException`;
  #L1670f8.  v1:= new `java.lang.StringBuilder`;
  #L1670fc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L167102.  v2:= "argument holder index " @kind object;
  #L167106.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16710c.  v1:= temp @kind object;
  #L16710e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L167114.  v1:= temp @kind object;
  #L167116.  v2:= " is not valid, only " @kind object;
  #L16711a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L167120.  v1:= temp @kind object;
  #L167122.  v2:= v3.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L167126.  v2:= length @variable v2;
  #L167128.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L16712e.  v1:= temp @kind object;
  #L167130.  v2:= " in statement (index starts at 0)" @kind object;
  #L167134.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16713a.  v1:= temp @kind object;
  #L16713c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L167142.  v1:= temp @kind object;
  #L167144.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16714a.  throw v0;
  #L16714c.  v0:= v3.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L167150.  v0:= v0[v4] @kind object;
  #L167154.  call `setValue`(v0, v5) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setValue:(Ljava/lang/Object;)V` @kind interface;
  #L16715a.  return @kind void;
}
