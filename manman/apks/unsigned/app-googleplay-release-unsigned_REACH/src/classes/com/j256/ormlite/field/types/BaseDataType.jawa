record `com.j256.ormlite.field.types.BaseDataType` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.field.BaseFieldConverter` @kind class, `com.j256.ormlite.field.DataPersister` @kind interface {
  `java.lang.Class`[] `com.j256.ormlite.field.types.BaseDataType.classes` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.field.SqlType` `com.j256.ormlite.field.types.BaseDataType.sqlType` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.Class`[] `@@com.j256.ormlite.field.types.BaseDataType.NO_CLASSES` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15aaa4.  v0:= 0I;
  #L15aaa6.  v0:= new `java.lang.Class`[v0];
  #L15aaaa.  `@@com.j256.ormlite.field.types.BaseDataType.NO_CLASSES` @type ^`java.lang.Class`[] := v0 @kind object;
  #L15aaae.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this, `com.j256.ormlite.field.SqlType` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15aac0.  call `<init>`(v1) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.<init>:()V` @kind direct;
  #L15aac6.  v1.`com.j256.ormlite.field.types.BaseDataType.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v2 @kind object;
  #L15aaca.  v0:= `@@com.j256.ormlite.field.types.BaseDataType.NO_CLASSES` @type ^`java.lang.Class`[] @kind object;
  #L15aace.  v1.`com.j256.ormlite.field.types.BaseDataType.classes` @type ^`java.lang.Class`[] := v0 @kind object;
  #L15aad2.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BaseDataType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15aae4.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.<init>:()V` @kind direct;
  #L15aaea.  v0.`com.j256.ormlite.field.types.BaseDataType.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v1 @kind object;
  #L15aaee.  v0.`com.j256.ormlite.field.types.BaseDataType.classes` @type ^`java.lang.Class`[] := v2 @kind object;
  #L15aaf2.  return @kind void;
}
procedure `java.lang.Object` `convertIdNumber`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this, `java.lang.Number` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.convertIdNumber:(Ljava/lang/Number;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ab04.  v0:= 0I;
  #L15ab06.  return v0 @kind object;
}
procedure `boolean` `dataIsEqual`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.dataIsEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ab18.  v0:= 0I;
  #L15ab1a.  if v2 != 0 then goto L15ab26;
  #L15ab1e.  if v3 != 0 then goto L15ab24;
  #L15ab22.  v0:= 1I;
  #L15ab24.  return v0;
  #L15ab26.  if v3 == 0 then goto L15ab24;
  #L15ab2a.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15ab30.  v0:= temp;
  #L15ab32.  goto L15ab24;
}
procedure `java.lang.Object` `generateId`(`com.j256.ormlite.field.types.BaseDataType` v2 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.generateId:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15ab44.  v0:= new `java.lang.IllegalStateException`;
  #L15ab48.  v1:= "Should not have tried to generate this type" @kind object;
  #L15ab4c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15ab52.  throw v0;
}
procedure `java.lang.String`[] `getAssociatedClassNames`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.getAssociatedClassNames:()[Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ab64.  v0:= 0I;
  #L15ab66.  return v0 @kind object;
}
procedure `java.lang.Class`[] `getAssociatedClasses`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.getAssociatedClasses:()[Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ab78.  v0:= v1.`com.j256.ormlite.field.types.BaseDataType.classes` @type ^`java.lang.Class`[] @kind object;
  #L15ab7c.  return v0 @kind object;
}
procedure `int` `getDefaultWidth`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.getDefaultWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ab90.  v0:= 0I;
  #L15ab92.  return v0;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.BaseDataType` v2 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15aba4.  v0:= v2.`com.j256.ormlite.field.types.BaseDataType.classes` @type ^`java.lang.Class`[] @kind object;
  #L15aba8.  v0:= length @variable v0;
  #L15abaa.  if v0 != 0 then goto L15abb2;
  #L15abae.  v0:= 0I;
  #L15abb0.  return v0 @kind object;
  #L15abb2.  v0:= v2.`com.j256.ormlite.field.types.BaseDataType.classes` @type ^`java.lang.Class`[] @kind object;
  #L15abb6.  v1:= 0I;
  #L15abb8.  v0:= v0[v1] @kind object;
  #L15abbc.  goto L15abb0;
}
procedure `java.lang.String` `getSqlOtherType`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.getSqlOtherType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15abd0.  v0:= 0I;
  #L15abd2.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.SqlType` `getSqlType`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15abe4.  v0:= v1.`com.j256.ormlite.field.types.BaseDataType.sqlType` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15abe8.  return v0 @kind object;
}
procedure `boolean` `isAppropriateId`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isAppropriateId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15abfc.  v0:= 1I;
  #L15abfe.  return v0;
}
procedure `boolean` `isArgumentHolderRequired`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isArgumentHolderRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ac10.  v0:= 0I;
  #L15ac12.  return v0;
}
procedure `boolean` `isComparable`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isComparable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ac24.  v0:= 1I;
  #L15ac26.  return v0;
}
procedure `boolean` `isEscapedDefaultValue`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isEscapedDefaultValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ac38.  call temp:= `isEscapedValue`(v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isEscapedValue:()Z` @kind virtual;
  #L15ac3e.  v0:= temp;
  #L15ac40.  return v0;
}
procedure `boolean` `isEscapedValue`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isEscapedValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ac54.  v0:= 1I;
  #L15ac56.  return v0;
}
procedure `boolean` `isPrimitive`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isPrimitive:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ac68.  v0:= 0I;
  #L15ac6a.  return v0;
}
procedure `boolean` `isSelfGeneratedId`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isSelfGeneratedId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ac7c.  v0:= 0I;
  #L15ac7e.  return v0;
}
procedure `boolean` `isValidForField`(`com.j256.ormlite.field.types.BaseDataType` v7 @kind this, `java.lang.reflect.Field` v8 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isValidForField:(Ljava/lang/reflect/Field;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L15ac90.  v0:= 1I;
  #L15ac92.  v1:= 0I;
  #L15ac94.  v2:= v7.`com.j256.ormlite.field.types.BaseDataType.classes` @type ^`java.lang.Class`[] @kind object;
  #L15ac98.  v2:= length @variable v2;
  #L15ac9a.  if v2 != 0 then goto L15aca0;
  #L15ac9e.  return v0;
  #L15aca0.  v3:= v7.`com.j256.ormlite.field.types.BaseDataType.classes` @type ^`java.lang.Class`[] @kind object;
  #L15aca4.  v4:= length @variable v3;
  #L15aca6.  v2:= v1;
  #L15aca8.  if v2 >= v4 then goto L15acca;
  #L15acac.  v5:= v3[v2] @kind object;
  #L15acb0.  call temp:= `getType`(v8) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15acb6.  v6:= temp @kind object;
  #L15acb8.  call temp:= `isAssignableFrom`(v5, v6) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L15acbe.  v5:= temp;
  #L15acc0.  if v5 != 0 then goto L15ac9e;
  #L15acc4.  v2:= v2 + 1;
  #L15acc8.  goto L15aca8;
  #L15acca.  v0:= v1;
  #L15accc.  goto L15ac9e;
}
procedure `boolean` `isValidForVersion`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isValidForVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ace0.  v0:= 0I;
  #L15ace2.  return v0;
}
procedure `boolean` `isValidGeneratedType`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isValidGeneratedType:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15acf4.  v0:= 0I;
  #L15acf6.  return v0;
}
procedure `java.lang.Object` `makeConfigObject`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.makeConfigObject:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ad08.  v0:= 0I;
  #L15ad0a.  return v0 @kind object;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ad1c.  v0:= 0I;
  #L15ad1e.  return v0 @kind object;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ad30.  call temp:= `parseDefaultString`(v1, v2, v3) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L15ad36.  v0:= temp @kind object;
  #L15ad38.  call temp:= `sqlArgToJava`(v1, v2, v0, v4) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L15ad3e.  v0:= temp @kind object;
  #L15ad40.  return v0 @kind object;
}
