record `com.j256.ormlite.db.BaseDatabaseType` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.db.DatabaseType` @kind interface {
  `java.sql.Driver` `com.j256.ormlite.db.BaseDatabaseType.driver` @AccessFlag PROTECTED;
}
global `java.lang.String` `@@com.j256.ormlite.db.BaseDatabaseType.DEFAULT_SEQUENCE_SUFFIX` @AccessFlag PROTECTED_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1549d4.  v0:= "_id_seq" @kind object;
  #L1549d8.  `@@com.j256.ormlite.db.BaseDatabaseType.DEFAULT_SEQUENCE_SUFFIX` @type ^`java.lang.String` := v0 @kind object;
  #L1549dc.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1549f0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1549f6.  return @kind void;
}
procedure `void` `addSingleUnique`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.util.List` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addSingleUnique:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L154a08.  v0:= new `java.lang.StringBuilder`;
  #L154a0c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L154a12.  v1:= " UNIQUE (" @kind object;
  #L154a16.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154a1c.  call temp:= `getColumnName`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L154a22.  v1:= temp @kind object;
  #L154a24.  call `appendEscapedEntityName`(v2, v0, v1) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L154a2a.  v1:= 41I;
  #L154a2e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L154a34.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L154a3a.  v0:= temp @kind object;
  #L154a3c.  call temp:= `add`(v5, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L154a42.  return @kind void;
}
procedure `void` `appendCanBeNull`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCanBeNull:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PRIVATE {
    temp;

  #L154a54.  return @kind void;
}
procedure `void` `appendDefaultValue`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDefaultValue:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L154a68.  call temp:= `isEscapedDefaultValue`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedDefaultValue:()Z` @kind virtual;
  #L154a6e.  v0:= temp;
  #L154a70.  if v0 == 0 then goto L154a84;
  #L154a74.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L154a7a.  v0:= temp @kind object;
  #L154a7c.  call `appendEscapedWord`(v1, v2, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L154a82.  return @kind void;
  #L154a84.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154a8a.  goto L154a82;
}
procedure `void` `appendDoubleType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDoubleType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L154a9c.  v0:= "DOUBLE PRECISION" @kind object;
  #L154aa0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154aa6.  return @kind void;
}
procedure `void` `appendFloatType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendFloatType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L154ab8.  v0:= "FLOAT" @kind object;
  #L154abc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154ac2.  return @kind void;
}
procedure `void` `appendIntegerType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendIntegerType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L154ad4.  v0:= "INTEGER" @kind object;
  #L154ad8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154ade.  return @kind void;
}
procedure `void` `addPrimaryKeySql`(`com.j256.ormlite.db.BaseDatabaseType` v6 @kind this, `com.j256.ormlite.field.FieldType`[] v7 @kind object, `java.util.List` v8 @kind object, `java.util.List` v9 @kind object, `java.util.List` v10 @kind object, `java.util.List` v11 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addPrimaryKeySql:([Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L154af0.  v1:= 0I;
  #L154af2.  v2:= length @variable v7;
  #L154af4.  v0:= 0I;
  #L154af6.  v5:= v0;
  #L154af8.  v0:= v1 @kind object;
  #L154afa.  v1:= v5;
  #L154afc.  if v1 >= v2 then goto L154b72;
  #L154b00.  v3:= v7[v1] @kind object;
  #L154b04.  call temp:= `isGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L154b0a.  v4:= temp;
  #L154b0c.  if v4 == 0 then goto L154b2e;
  #L154b10.  call temp:= `generatedIdSqlAtEnd`(v6) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.generatedIdSqlAtEnd:()Z` @kind virtual;
  #L154b16.  v4:= temp;
  #L154b18.  if v4 != 0 then goto L154b2e;
  #L154b1c.  call temp:= `isSelfGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L154b22.  v4:= temp;
  #L154b24.  if v4 != 0 then goto L154b2e;
  #L154b28.  v1:= v1 + 1;
  #L154b2c.  goto L154afc;
  #L154b2e.  call temp:= `isId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isId:()Z` @kind virtual;
  #L154b34.  v4:= temp;
  #L154b36.  if v4 == 0 then goto L154b28;
  #L154b3a.  if v0 != 0 then goto L154b66;
  #L154b3e.  v0:= new `java.lang.StringBuilder`;
  #L154b42.  v4:= 48I;
  #L154b46.  call `<init>`(v0, v4) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L154b4c.  v4:= "PRIMARY KEY (" @kind object;
  #L154b50.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154b56.  call temp:= `getColumnName`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L154b5c.  v3:= temp @kind object;
  #L154b5e.  call `appendEscapedEntityName`(v6, v0, v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L154b64.  goto L154b28;
  #L154b66.  v4:= 44I;
  #L154b6a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L154b70.  goto L154b56;
  #L154b72.  if v0 == 0 then goto L154b8e;
  #L154b76.  v1:= ") " @kind object;
  #L154b7a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154b80.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L154b86.  v0:= temp @kind object;
  #L154b88.  call temp:= `add`(v8, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L154b8e.  return @kind void;
}
procedure `void` `addUniqueComboSql`(`com.j256.ormlite.db.BaseDatabaseType` v6 @kind this, `com.j256.ormlite.field.FieldType`[] v7 @kind object, `java.util.List` v8 @kind object, `java.util.List` v9 @kind object, `java.util.List` v10 @kind object, `java.util.List` v11 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addUniqueComboSql:([Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L154ba0.  v1:= 0I;
  #L154ba2.  v2:= length @variable v7;
  #L154ba4.  v0:= 0I;
  #L154ba6.  v5:= v0;
  #L154ba8.  v0:= v1 @kind object;
  #L154baa.  v1:= v5;
  #L154bac.  if v1 >= v2 then goto L154bfc;
  #L154bb0.  v3:= v7[v1] @kind object;
  #L154bb4.  call temp:= `isUniqueCombo`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isUniqueCombo:()Z` @kind virtual;
  #L154bba.  v4:= temp;
  #L154bbc.  if v4 == 0 then goto L154bea;
  #L154bc0.  if v0 != 0 then goto L154bf0;
  #L154bc4.  v0:= new `java.lang.StringBuilder`;
  #L154bc8.  v4:= 48I;
  #L154bcc.  call `<init>`(v0, v4) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L154bd2.  v4:= "UNIQUE (" @kind object;
  #L154bd6.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154bdc.  call temp:= `getColumnName`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L154be2.  v3:= temp @kind object;
  #L154be4.  call `appendEscapedEntityName`(v6, v0, v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L154bea.  v1:= v1 + 1;
  #L154bee.  goto L154bac;
  #L154bf0.  v4:= 44I;
  #L154bf4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L154bfa.  goto L154bdc;
  #L154bfc.  if v0 == 0 then goto L154c18;
  #L154c00.  v1:= ") " @kind object;
  #L154c04.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154c0a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L154c10.  v0:= temp @kind object;
  #L154c12.  call temp:= `add`(v8, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L154c18.  return @kind void;
}
procedure `void` `appendBigDecimalNumericType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBigDecimalNumericType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L154c2c.  v0:= "NUMERIC" @kind object;
  #L154c30.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154c36.  return @kind void;
}
procedure `void` `appendBooleanType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBooleanType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L154c48.  v0:= "BOOLEAN" @kind object;
  #L154c4c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154c52.  return @kind void;
}
procedure `void` `appendByteArrayType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteArrayType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L154c64.  v0:= "BLOB" @kind object;
  #L154c68.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154c6e.  return @kind void;
}
procedure `void` `appendByteType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L154c80.  v0:= "TINYINT" @kind object;
  #L154c84.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154c8a.  return @kind void;
}
procedure `void` `appendCharType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCharType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L154c9c.  v0:= "CHAR" @kind object;
  #L154ca0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154ca6.  return @kind void;
}
procedure `void` `appendColumnArg`(`com.j256.ormlite.db.BaseDatabaseType` v8 @kind this, `java.lang.String` v9 @kind object, `java.lang.StringBuilder` v10 @kind object, `com.j256.ormlite.field.FieldType` v11 @kind object, `java.util.List` v12 @kind object, `java.util.List` v13 @kind object, `java.util.List` v14 @kind object, `java.util.List` v15 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendColumnArg:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L154cb8.  call temp:= `getColumnName`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L154cbe.  v0:= temp @kind object;
  #L154cc0.  call `appendEscapedEntityName`(v8, v10, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L154cc6.  v0:= 32I;
  #L154cca.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L154cd0.  call temp:= `getDataPersister`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L154cd6.  v1:= temp @kind object;
  #L154cd8.  call temp:= `getWidth`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getWidth:()I` @kind virtual;
  #L154cde.  v0:= temp;
  #L154ce0.  if v0 != 0 then goto L154cec;
  #L154ce4.  call temp:= `getDefaultWidth`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getDefaultWidth:()I` @kind interface;
  #L154cea.  v0:= temp;
  #L154cec.  v2:= `@@com.j256.ormlite.db.BaseDatabaseType$1.$SwitchMap$com$j256$ormlite$field$SqlType` @type ^`int`[] @kind object;
  #L154cf0.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L154cf6.  v3:= temp @kind object;
  #L154cf8.  call temp:= `ordinal`(v3) @signature `Lcom/j256/ormlite/field/SqlType;.ordinal:()I` @kind virtual;
  #L154cfe.  v3:= temp;
  #L154d00.  v2:= v2[v3];
  #L154d04.  goto L154ebc;
  #L154d0a.  v0:= new `java.lang.IllegalArgumentException`;
  #L154d0e.  v2:= new `java.lang.StringBuilder`;
  #L154d12.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L154d18.  v3:= "Unknown SQL-type " @kind object;
  #L154d1c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154d22.  v2:= temp @kind object;
  #L154d24.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L154d2a.  v1:= temp @kind object;
  #L154d2c.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154d32.  v1:= temp @kind object;
  #L154d34.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L154d3a.  v1:= temp @kind object;
  #L154d3c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L154d42.  throw v0;
  #L154d44.  call `appendStringType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L154d4a.  v0:= 32I;
  #L154d4e.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L154d54.  call temp:= `isGeneratedIdSequence`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedIdSequence:()Z` @kind virtual;
  #L154d5a.  v0:= temp;
  #L154d5c.  if v0 == 0 then goto L154e5c;
  #L154d60.  call temp:= `isSelfGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L154d66.  v0:= temp;
  #L154d68.  if v0 != 0 then goto L154e5c;
  #L154d6c.  v0:= v8 @kind object;
  #L154d6e.  v1:= v10 @kind object;
  #L154d70.  v2:= v11 @kind object;
  #L154d72.  v3:= v13 @kind object;
  #L154d74.  v4:= v12 @kind object;
  #L154d76.  v5:= v15 @kind object;
  #L154d78.  call `configureGeneratedIdSequence`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedIdSequence:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @kind virtual;
  #L154d7e.  call temp:= `isGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L154d84.  v0:= temp;
  #L154d86.  if v0 != 0 then goto L154dd4;
  #L154d8a.  call temp:= `getDefaultValue`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getDefaultValue:()Ljava/lang/Object;` @kind virtual;
  #L154d90.  v0:= temp @kind object;
  #L154d92.  if v0 == 0 then goto L154db0;
  #L154d96.  v1:= "DEFAULT " @kind object;
  #L154d9a.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154da0.  call `appendDefaultValue`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDefaultValue:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)V` @kind direct;
  #L154da6.  v0:= 32I;
  #L154daa.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L154db0.  call temp:= `isCanBeNull`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isCanBeNull:()Z` @kind virtual;
  #L154db6.  v0:= temp;
  #L154db8.  if v0 == 0 then goto L154eb0;
  #L154dbc.  call `appendCanBeNull`(v8, v10, v11) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCanBeNull:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L154dc2.  call temp:= `isUnique`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isUnique:()Z` @kind virtual;
  #L154dc8.  v0:= temp;
  #L154dca.  if v0 == 0 then goto L154dd4;
  #L154dce.  call `addSingleUnique`(v8, v10, v11, v12, v14) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addSingleUnique:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L154dd4.  return @kind void;
  #L154dd6.  call `appendLongStringType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L154ddc.  goto L154d4a;
  #L154dde.  call `appendBooleanType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBooleanType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L154de4.  goto L154d4a;
  #L154de6.  call `appendDateType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDateType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L154dec.  goto L154d4a;
  #L154dee.  call `appendCharType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCharType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L154df4.  goto L154d4a;
  #L154df6.  call `appendByteType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L154dfc.  goto L154d4a;
  #L154dfe.  call `appendByteArrayType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteArrayType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L154e04.  goto L154d4a;
  #L154e06.  call `appendShortType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendShortType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L154e0c.  goto L154d4a;
  #L154e0e.  call `appendIntegerType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendIntegerType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind direct;
  #L154e14.  goto L154d4a;
  #L154e16.  call `appendLongType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L154e1c.  goto L154d4a;
  #L154e1e.  call `appendFloatType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendFloatType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind direct;
  #L154e24.  goto L154d4a;
  #L154e26.  call `appendDoubleType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDoubleType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind direct;
  #L154e2c.  goto L154d4a;
  #L154e2e.  call `appendSerializableType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendSerializableType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L154e34.  goto L154d4a;
  #L154e36.  call `appendBigDecimalNumericType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBigDecimalNumericType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L154e3c.  goto L154d4a;
  #L154e3e.  call `appendUuidNativeType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendUuidNativeType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L154e44.  goto L154d4a;
  #L154e46.  call temp:= `getSqlOtherType`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlOtherType:()Ljava/lang/String;` @kind interface;
  #L154e4c.  v0:= temp @kind object;
  #L154e4e.  if v0 == 0 then goto L154d4a;
  #L154e52.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154e58.  goto L154d4a;
  #L154e5c.  call temp:= `isGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L154e62.  v0:= temp;
  #L154e64.  if v0 == 0 then goto L154e8e;
  #L154e68.  call temp:= `isSelfGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L154e6e.  v0:= temp;
  #L154e70.  if v0 != 0 then goto L154e8e;
  #L154e74.  v0:= v8 @kind object;
  #L154e76.  v1:= v9 @kind object;
  #L154e78.  v2:= v10 @kind object;
  #L154e7a.  v3:= v11 @kind object;
  #L154e7c.  v4:= v13 @kind object;
  #L154e7e.  v5:= v14 @kind object;
  #L154e80.  v6:= v12 @kind object;
  #L154e82.  v7:= v15 @kind object;
  #L154e84.  call `configureGeneratedId`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedId:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @kind virtual;
  #L154e8a.  goto L154d7e;
  #L154e8e.  call temp:= `isId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isId:()Z` @kind virtual;
  #L154e94.  v0:= temp;
  #L154e96.  if v0 == 0 then goto L154d7e;
  #L154e9a.  v0:= v8 @kind object;
  #L154e9c.  v1:= v10 @kind object;
  #L154e9e.  v2:= v11 @kind object;
  #L154ea0.  v3:= v13 @kind object;
  #L154ea2.  v4:= v12 @kind object;
  #L154ea4.  v5:= v15 @kind object;
  #L154ea6.  call `configureId`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureId:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @kind virtual;
  #L154eac.  goto L154d7e;
  #L154eb0.  v0:= "NOT NULL " @kind object;
  #L154eb4.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154eba.  goto L154dc2;
  #L154ebc.  switch v2
                  | 1 => goto L154d44
                  | 2 => goto L154dd6
                  | 3 => goto L154dde
                  | 4 => goto L154de6
                  | 5 => goto L154dee
                  | 6 => goto L154df6
                  | 7 => goto L154dfe
                  | 8 => goto L154e06
                  | 9 => goto L154e0e
                  | 10 => goto L154e16
                  | 11 => goto L154e1e
                  | 12 => goto L154e26
                  | 13 => goto L154e2e
                  | 14 => goto L154e36
                  | 15 => goto L154e3e
                  | 16 => goto L154e46
                  | else => goto L154d0a;
}
procedure `void` `appendCreateTableSuffix`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCreateTableSuffix:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;

  #L154f14.  return @kind void;
}
procedure `void` `appendDateType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDateType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L154f28.  v0:= "TIMESTAMP" @kind object;
  #L154f2c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154f32.  return @kind void;
}
procedure `void` `appendEscapedEntityName`(`com.j256.ormlite.db.BaseDatabaseType` v3 @kind this, `java.lang.StringBuilder` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L154f44.  v2:= 96I;
  #L154f48.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L154f4e.  v0:= 46I;
  #L154f52.  call temp:= `indexOf`(v5, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L154f58.  v0:= temp;
  #L154f5a.  if v0 <= 0 then goto L154f92;
  #L154f5e.  v1:= 0I;
  #L154f60.  call temp:= `substring`(v5, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L154f66.  v1:= temp @kind object;
  #L154f68.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154f6e.  v1:= "`.`" @kind object;
  #L154f72.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154f78.  v0:= v0 + 1;
  #L154f7c.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L154f82.  v0:= temp @kind object;
  #L154f84.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154f8a.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L154f90.  return @kind void;
  #L154f92.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154f98.  goto L154f8a;
}
procedure `void` `appendEscapedWord`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L154fac.  v1:= 39I;
  #L154fb0.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L154fb6.  v0:= temp @kind object;
  #L154fb8.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154fbe.  v0:= temp @kind object;
  #L154fc0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L154fc6.  return @kind void;
}
procedure `void` `appendInsertNoColumns`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendInsertNoColumns:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L154fd8.  v0:= "() VALUES ()" @kind object;
  #L154fdc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154fe2.  return @kind void;
}
procedure `void` `appendLimitValue`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `long` v4 , `java.lang.Long` v6 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLimitValue:(Ljava/lang/StringBuilder;JLjava/lang/Long;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L154ff4.  v0:= "LIMIT " @kind object;
  #L154ff8.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154ffe.  v0:= temp @kind object;
  #L155000.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L155006.  v0:= temp @kind object;
  #L155008.  v1:= 32I;
  #L15500c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L155012.  return @kind void;
}
procedure `void` `appendLongStringType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L155024.  v0:= "TEXT" @kind object;
  #L155028.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15502e.  return @kind void;
}
procedure `void` `appendLongType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L155040.  v0:= "BIGINT" @kind object;
  #L155044.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15504a.  return @kind void;
}
procedure `void` `appendOffsetValue`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `long` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendOffsetValue:(Ljava/lang/StringBuilder;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15505c.  v0:= "OFFSET " @kind object;
  #L155060.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155066.  v0:= temp @kind object;
  #L155068.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L15506e.  v0:= temp @kind object;
  #L155070.  v1:= 32I;
  #L155074.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15507a.  return @kind void;
}
procedure `void` `appendSelectNextValFromSequence`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendSelectNextValFromSequence:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L15508c.  return @kind void;
}
procedure `void` `appendSerializableType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendSerializableType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1550a0.  v0:= "BLOB" @kind object;
  #L1550a4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1550aa.  return @kind void;
}
procedure `void` `appendShortType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendShortType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1550bc.  v0:= "SMALLINT" @kind object;
  #L1550c0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1550c6.  return @kind void;
}
procedure `void` `appendStringType`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L1550d8.  call temp:= `isVarcharFieldWidthSupported`(v2) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isVarcharFieldWidthSupported:()Z` @kind virtual;
  #L1550de.  v0:= temp;
  #L1550e0.  if v0 == 0 then goto L155104;
  #L1550e4.  v0:= "VARCHAR(" @kind object;
  #L1550e8.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1550ee.  v0:= temp @kind object;
  #L1550f0.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1550f6.  v0:= temp @kind object;
  #L1550f8.  v1:= 41I;
  #L1550fc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L155102.  return @kind void;
  #L155104.  v0:= "VARCHAR" @kind object;
  #L155108.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15510e.  goto L155102;
}
procedure `void` `appendUuidNativeType`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendUuidNativeType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L155120.  v0:= new `java.lang.UnsupportedOperationException`;
  #L155124.  v1:= "UUID is not supported by this database type" @kind object;
  #L155128.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15512e.  throw v0;
}
procedure `void` `configureGeneratedId`(`com.j256.ormlite.db.BaseDatabaseType` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.StringBuilder` v5 @kind object, `com.j256.ormlite.field.FieldType` v6 @kind object, `java.util.List` v7 @kind object, `java.util.List` v8 @kind object, `java.util.List` v9 @kind object, `java.util.List` v10 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedId:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L155140.  v0:= new `java.lang.IllegalStateException`;
  #L155144.  v1:= new `java.lang.StringBuilder`;
  #L155148.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15514e.  v2:= "GeneratedId is not supported by database " @kind object;
  #L155152.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155158.  v1:= temp @kind object;
  #L15515a.  call temp:= `getDatabaseName`(v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDatabaseName:()Ljava/lang/String;` @kind virtual;
  #L155160.  v2:= temp @kind object;
  #L155162.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155168.  v1:= temp @kind object;
  #L15516a.  v2:= " for field " @kind object;
  #L15516e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155174.  v1:= temp @kind object;
  #L155176.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15517c.  v1:= temp @kind object;
  #L15517e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L155184.  v1:= temp @kind object;
  #L155186.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15518c.  throw v0;
}
procedure `void` `configureGeneratedIdSequence`(`com.j256.ormlite.db.BaseDatabaseType` v3 @kind this, `java.lang.StringBuilder` v4 @kind object, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.util.List` v6 @kind object, `java.util.List` v7 @kind object, `java.util.List` v8 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedIdSequence:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L1551a0.  v0:= new `java.sql.SQLException`;
  #L1551a4.  v1:= new `java.lang.StringBuilder`;
  #L1551a8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1551ae.  v2:= "GeneratedIdSequence is not supported by database " @kind object;
  #L1551b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1551b8.  v1:= temp @kind object;
  #L1551ba.  call temp:= `getDatabaseName`(v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDatabaseName:()Ljava/lang/String;` @kind virtual;
  #L1551c0.  v2:= temp @kind object;
  #L1551c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1551c8.  v1:= temp @kind object;
  #L1551ca.  v2:= " for field " @kind object;
  #L1551ce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1551d4.  v1:= temp @kind object;
  #L1551d6.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1551dc.  v1:= temp @kind object;
  #L1551de.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1551e4.  v1:= temp @kind object;
  #L1551e6.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1551ec.  throw v0;
}
procedure `void` `configureId`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureId:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;

  #L155200.  return @kind void;
}
procedure `void` `dropColumnArg`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `com.j256.ormlite.field.FieldType` v1 @kind object, `java.util.List` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.dropColumnArg:(Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L155214.  return @kind void;
}
procedure `com.j256.ormlite.table.DatabaseTableConfig` `extractDatabaseTableConfig`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `com.j256.ormlite.support.ConnectionSource` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.extractDatabaseTableConfig:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/table/DatabaseTableConfig;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L155228.  v0:= 0I;
  #L15522a.  return v0 @kind object;
}
procedure `java.lang.String` `generateIdSequenceName`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.generateIdSequenceName:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15523c.  v0:= new `java.lang.StringBuilder`;
  #L155240.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L155246.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15524c.  v0:= temp @kind object;
  #L15524e.  v1:= `@@com.j256.ormlite.db.BaseDatabaseType.DEFAULT_SEQUENCE_SUFFIX` @type ^`java.lang.String` @kind object;
  #L155252.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155258.  v0:= temp @kind object;
  #L15525a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L155260.  v0:= temp @kind object;
  #L155262.  call temp:= `isEntityNamesMustBeUpCase`(v2) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isEntityNamesMustBeUpCase:()Z` @kind virtual;
  #L155268.  v1:= temp;
  #L15526a.  if v1 == 0 then goto L155276;
  #L15526e.  call temp:= `upCaseEntityName`(v2, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.upCaseEntityName:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L155274.  v0:= temp @kind object;
  #L155276.  return v0 @kind object;
}
procedure `boolean` `generatedIdSqlAtEnd`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.generatedIdSqlAtEnd:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L155288.  v0:= 1I;
  #L15528a.  return v0;
}
procedure `java.lang.String` `getCommentLinePrefix`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getCommentLinePrefix:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15529c.  v0:= "-- " @kind object;
  #L1552a0.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.DataPersister` `getDataPersister`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `com.j256.ormlite.field.DataPersister` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDataPersister:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/DataPersister;` @AccessFlag PUBLIC {
    temp;

  #L1552b4.  return v1 @kind object;
}
procedure `java.lang.String` `getDriverClassName`() @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDriverClassName:()Ljava/lang/String;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `com.j256.ormlite.field.FieldConverter` `getFieldConverter`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `com.j256.ormlite.field.DataPersister` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getFieldConverter:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/FieldConverter;` @AccessFlag PUBLIC {
    temp;

  #L1552c8.  return v1 @kind object;
}
procedure `java.lang.String` `getPingStatement`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getPingStatement:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1552dc.  v0:= "SELECT 1" @kind object;
  #L1552e0.  return v0 @kind object;
}
procedure `boolean` `isAllowGeneratedIdInsertSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isAllowGeneratedIdInsertSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1552f4.  v0:= 1I;
  #L1552f6.  return v0;
}
procedure `boolean` `isBatchUseTransaction`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isBatchUseTransaction:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L155308.  v0:= 0I;
  #L15530a.  return v0;
}
procedure `boolean` `isCreateIfNotExistsSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateIfNotExistsSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15531c.  v0:= 0I;
  #L15531e.  return v0;
}
procedure `boolean` `isCreateIndexIfNotExistsSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateIndexIfNotExistsSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L155330.  call temp:= `isCreateIfNotExistsSupported`(v1) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateIfNotExistsSupported:()Z` @kind virtual;
  #L155336.  v0:= temp;
  #L155338.  return v0;
}
procedure `boolean` `isCreateTableReturnsNegative`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateTableReturnsNegative:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15534c.  v0:= 0I;
  #L15534e.  return v0;
}
procedure `boolean` `isCreateTableReturnsZero`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateTableReturnsZero:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L155360.  v0:= 1I;
  #L155362.  return v0;
}
procedure `boolean` `isEntityNamesMustBeUpCase`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isEntityNamesMustBeUpCase:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L155374.  v0:= 0I;
  #L155376.  return v0;
}
procedure `boolean` `isIdSequenceNeeded`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isIdSequenceNeeded:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L155388.  v0:= 0I;
  #L15538a.  return v0;
}
procedure `boolean` `isLimitAfterSelect`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isLimitAfterSelect:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15539c.  v0:= 0I;
  #L15539e.  return v0;
}
procedure `boolean` `isLimitSqlSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isLimitSqlSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1553b0.  v0:= 1I;
  #L1553b2.  return v0;
}
procedure `boolean` `isNestedSavePointsSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isNestedSavePointsSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1553c4.  v0:= 1I;
  #L1553c6.  return v0;
}
procedure `boolean` `isOffsetLimitArgument`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isOffsetLimitArgument:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1553d8.  v0:= 0I;
  #L1553da.  return v0;
}
procedure `boolean` `isOffsetSqlSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isOffsetSqlSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1553ec.  v0:= 1I;
  #L1553ee.  return v0;
}
procedure `boolean` `isSelectSequenceBeforeInsert`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isSelectSequenceBeforeInsert:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L155400.  v0:= 0I;
  #L155402.  return v0;
}
procedure `boolean` `isTruncateSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isTruncateSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L155414.  v0:= 0I;
  #L155416.  return v0;
}
procedure `boolean` `isVarcharFieldWidthSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isVarcharFieldWidthSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L155428.  v0:= 1I;
  #L15542a.  return v0;
}
procedure `void` `loadDriver`(`com.j256.ormlite.db.BaseDatabaseType` v4 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.loadDriver:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15543c.  call temp:= `getDriverClassName`(v4) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDriverClassName:()Ljava/lang/String;` @kind virtual;
  #L155442.  v0:= temp @kind object;
  #L155444.  if v0 == 0 then goto L15544e;
  #Try_start0.  
  #L155448.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #Try_end0.  
  #L15544e.  return @kind void;
  #L155450.  v1:= Exception @type ^`java.lang.ClassNotFoundException` @kind object;
  #L155452.  v2:= new `java.lang.StringBuilder`;
  #L155456.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15545c.  v3:= "Driver class was not found for " @kind object;
  #L155460.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155466.  v2:= temp @kind object;
  #L155468.  call temp:= `getDatabaseName`(v4) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDatabaseName:()Ljava/lang/String;` @kind virtual;
  #L15546e.  v3:= temp @kind object;
  #L155470.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155476.  v2:= temp @kind object;
  #L155478.  v3:= " database.  Missing jar with class " @kind object;
  #L15547c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155482.  v2:= temp @kind object;
  #L155484.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15548a.  v0:= temp @kind object;
  #L15548c.  v2:= "." @kind object;
  #L155490.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155496.  v0:= temp @kind object;
  #L155498.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15549e.  v0:= temp @kind object;
  #L1554a0.  call temp:= `create`(v0, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1554a6.  v0:= temp @kind object;
  #L1554a8.  throw v0;
  catch `java.lang.ClassNotFoundException` @[Try_start0..Try_end0] goto L155450;
}
procedure `void` `setDriver`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.sql.Driver` v1 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.setDriver:(Ljava/sql/Driver;)V` @AccessFlag PUBLIC {
    temp;

  #L1554cc.  v0.`com.j256.ormlite.db.BaseDatabaseType.driver` @type ^`java.sql.Driver` := v1 @kind object;
  #L1554d0.  return @kind void;
}
procedure `java.lang.String` `upCaseEntityName`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.upCaseEntityName:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1554e4.  v0:= `@@java.util.Locale.ENGLISH` @type ^`java.util.Locale` @kind object;
  #L1554e8.  call temp:= `toUpperCase`(v2, v0) @signature `Ljava/lang/String;.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L1554ee.  v0:= temp @kind object;
  #L1554f0.  return v0 @kind object;
}
