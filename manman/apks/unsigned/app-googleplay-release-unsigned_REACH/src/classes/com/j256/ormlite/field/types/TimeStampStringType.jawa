record `com.j256.ormlite.field.types.TimeStampStringType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.DateStringType` @kind class {
}
global `com.j256.ormlite.field.types.TimeStampStringType` `@@com.j256.ormlite.field.types.TimeStampStringType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15e0f8.  v0:= new `com.j256.ormlite.field.types.TimeStampStringType`;
  #L15e0fc.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.<init>:()V` @kind direct;
  #L15e102.  `@@com.j256.ormlite.field.types.TimeStampStringType.singleTon` @type ^`com.j256.ormlite.field.types.TimeStampStringType` := v0 @kind object;
  #L15e106.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.TimeStampStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L15e118.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15e11c.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L15e122.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.TimeStampStringType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15e134.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15e13a.  return @kind void;
}
procedure `com.j256.ormlite.field.types.TimeStampStringType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.getSingleton:()Lcom/j256/ormlite/field/types/TimeStampStringType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15e14c.  v0:= `@@com.j256.ormlite.field.types.TimeStampStringType.singleTon` @type ^`com.j256.ormlite.field.types.TimeStampStringType` @kind object;
  #L15e150.  return v0 @kind object;
}
procedure `boolean` `isValidForField`(`com.j256.ormlite.field.types.TimeStampStringType` v2 @kind this, `java.lang.reflect.Field` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.isValidForField:(Ljava/lang/reflect/Field;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15e164.  call temp:= `getType`(v3) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15e16a.  v0:= temp @kind object;
  #L15e16c.  v1:= constclass @type ^`java.sql.Timestamp` @kind object;
  #L15e170.  if v0 != v1 then goto L15e178;
  #L15e174.  v0:= 1I;
  #L15e176.  return v0;
  #L15e178.  v0:= 0I;
  #L15e17a.  goto L15e176;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.TimeStampStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15e18c.  v6:= (`java.sql.Timestamp`) v6 @kind object;
  #L15e190.  v0:= new `java.util.Date`;
  #L15e194.  call temp:= `getTime`(v6) @signature `Ljava/sql/Timestamp;.getTime:()J` @kind virtual;
  #L15e19a.  v2:= temp @kind wide;
  #L15e19c.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L15e1a2.  call temp:= `javaToSqlArg`(v4, v5, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @kind super;
  #L15e1a8.  v0:= temp @kind object;
  #L15e1aa.  return v0 @kind object;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.TimeStampStringType` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15e1bc.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L15e1c2.  v2:= temp @kind wide;
  #L15e1c4.  if v7 != 0 then goto L15e1d4;
  #L15e1c8.  v0:= new `java.sql.Timestamp`;
  #L15e1cc.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L15e1d2.  return v0 @kind object;
  #L15e1d4.  v7:= (`java.sql.Timestamp`) v7 @kind object;
  #L15e1d8.  call temp:= `getTime`(v7) @signature `Ljava/sql/Timestamp;.getTime:()J` @kind virtual;
  #L15e1de.  v0:= temp @kind wide;
  #L15e1e0.  v0:= lcmp(v2, v0);
  #L15e1e4.  if v0 != 0 then goto L15e1fa;
  #L15e1e8.  v0:= new `java.sql.Timestamp`;
  #L15e1ec.  v4:= 1L;
  #L15e1f0.  v2:= v2 + v4 @kind long;
  #L15e1f2.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L15e1f8.  goto L15e1d2;
  #L15e1fa.  v0:= new `java.sql.Timestamp`;
  #L15e1fe.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L15e204.  goto L15e1d2;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.TimeStampStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15e218.  call temp:= `sqlArgToJava`(v4, v5, v6, v7) @signature `Lcom/j256/ormlite/field/types/DateStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind super;
  #L15e21e.  v0:= temp @kind object;
  #L15e220.  v0:= (`java.util.Date`) v0 @kind object;
  #L15e224.  v1:= new `java.sql.Timestamp`;
  #L15e228.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L15e22e.  v2:= temp @kind wide;
  #L15e230.  call `<init>`(v1, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L15e236.  return v1 @kind object;
}
