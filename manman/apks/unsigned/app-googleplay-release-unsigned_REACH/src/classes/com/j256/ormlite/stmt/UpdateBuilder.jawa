record `com.j256.ormlite.stmt.UpdateBuilder` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.StatementBuilder` @kind class {
  `java.util.List` `com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `com.j256.ormlite.db.DatabaseType` v2 @kind object, `com.j256.ormlite.table.TableInfo` v3 @kind object, `com.j256.ormlite.dao.Dao` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.<init>:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/dao/Dao;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L164e90.  v0:= `@@com.j256.ormlite.stmt.StatementBuilder$StatementType.UPDATE` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L164e94.  call `<init>`(v1, v2, v3, v4, v0) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.<init>:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/dao/Dao;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;)V` @kind direct;
  #L164e9a.  v0:= 0I;
  #L164e9c.  v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` := v0 @kind object;
  #L164ea0.  return @kind void;
}
procedure `void` `addUpdateColumnToList`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `java.lang.String` v2 @kind object, `com.j256.ormlite.stmt.query.Clause` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.addUpdateColumnToList:(Ljava/lang/String;Lcom/j256/ormlite/stmt/query/Clause;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L164eb4.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L164eb8.  if v0 != 0 then goto L164eca;
  #L164ebc.  v0:= new `java.util.ArrayList`;
  #L164ec0.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L164ec6.  v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` := v0 @kind object;
  #L164eca.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L164ece.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L164ed4.  return @kind void;
}
procedure `void` `appendStatementEnd`(`com.j256.ormlite.stmt.UpdateBuilder` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `java.util.List` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.appendStatementEnd:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;

  #L164ee8.  return @kind void;
}
procedure `void` `appendStatementStart`(`com.j256.ormlite.stmt.UpdateBuilder` v5 @kind this, `java.lang.StringBuilder` v6 @kind object, `java.util.List` v7 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.appendStatementStart:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L164efc.  v0:= v5.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L164f00.  if v0 == 0 then goto L164f14;
  #L164f04.  v0:= v5.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L164f08.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L164f0e.  v0:= temp;
  #L164f10.  if v0 == 0 then goto L164f24;
  #L164f14.  v0:= new `java.lang.IllegalArgumentException`;
  #L164f18.  v1:= "UPDATE statements must have at least one SET column" @kind object;
  #L164f1c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L164f22.  throw v0;
  #L164f24.  v0:= "UPDATE " @kind object;
  #L164f28.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L164f2e.  v0:= v5.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L164f32.  v1:= v5.`com.j256.ormlite.stmt.UpdateBuilder.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L164f36.  call temp:= `getTableName`(v1) @signature `Lcom/j256/ormlite/table/TableInfo;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L164f3c.  v1:= temp @kind object;
  #L164f3e.  call `appendEscapedEntityName`(v0, v6, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L164f44.  v0:= " SET " @kind object;
  #L164f48.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L164f4e.  v0:= 1I;
  #L164f50.  v1:= v5.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L164f54.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L164f5a.  v2:= temp @kind object;
  #L164f5c.  v1:= v0;
  #L164f5e.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L164f64.  v0:= temp;
  #L164f66.  if v0 == 0 then goto L164f96;
  #L164f6a.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L164f70.  v0:= temp @kind object;
  #L164f72.  v0:= (`com.j256.ormlite.stmt.query.Clause`) v0 @kind object;
  #L164f76.  if v1 == 0 then goto L164f8a;
  #L164f7a.  v1:= 0I;
  #L164f7c.  v3:= v5.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L164f80.  v4:= 0I;
  #L164f82.  call `appendSql`(v0, v3, v4, v6, v7) @signature `Lcom/j256/ormlite/stmt/query/Clause;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind interface;
  #L164f88.  goto L164f5e;
  #L164f8a.  v3:= 44I;
  #L164f8e.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L164f94.  goto L164f7c;
  #L164f96.  return @kind void;
}
procedure `java.lang.String` `escapeColumnName`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeColumnName:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L164fa8.  v0:= new `java.lang.StringBuilder`;
  #L164fac.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L164fb2.  v1:= temp;
  #L164fb4.  v1:= v1 + 4;
  #L164fb8.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L164fbe.  v1:= v2.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L164fc2.  call `appendEscapedEntityName`(v1, v0, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L164fc8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L164fce.  v0:= temp @kind object;
  #L164fd0.  return v0 @kind object;
}
procedure `void` `escapeColumnName`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeColumnName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L164fe4.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L164fe8.  call `appendEscapedEntityName`(v0, v2, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L164fee.  return @kind void;
}
procedure `java.lang.String` `escapeValue`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeValue:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L165000.  v0:= new `java.lang.StringBuilder`;
  #L165004.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L16500a.  v1:= temp;
  #L16500c.  v1:= v1 + 4;
  #L165010.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L165016.  v1:= v2.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L16501a.  call `appendEscapedWord`(v1, v0, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L165020.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L165026.  v0:= temp @kind object;
  #L165028.  return v0 @kind object;
}
procedure `void` `escapeValue`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeValue:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16503c.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L165040.  call `appendEscapedWord`(v0, v2, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L165046.  return @kind void;
}
procedure `com.j256.ormlite.stmt.PreparedUpdate` `prepare`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.prepare:()Lcom/j256/ormlite/stmt/PreparedUpdate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L165058.  v0:= 0I;
  #L16505a.  v1:= 0I;
  #L16505c.  call temp:= `prepareStatement`(v2, v0, v1) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.prepareStatement:(Ljava/lang/Long;Z)Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;` @kind super;
  #L165062.  v0:= temp @kind object;
  #L165064.  return v0 @kind object;
}
procedure `void` `reset`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L165078.  call `reset`(v1) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.reset:()V` @kind super;
  #L16507e.  v0:= 0I;
  #L165080.  v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` := v0 @kind object;
  #L165084.  return @kind void;
}
procedure `int` `update`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.update:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L165098.  v0:= v2.`com.j256.ormlite.stmt.UpdateBuilder.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L16509c.  call temp:= `prepare`(v2) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.prepare:()Lcom/j256/ormlite/stmt/PreparedUpdate;` @kind virtual;
  #L1650a2.  v1:= temp @kind object;
  #L1650a4.  call temp:= `update`(v0, v1) @signature `Lcom/j256/ormlite/dao/Dao;.update:(Lcom/j256/ormlite/stmt/PreparedUpdate;)I` @kind interface;
  #L1650aa.  v0:= temp;
  #L1650ac.  return v0;
}
procedure `com.j256.ormlite.stmt.UpdateBuilder` `updateColumnExpression`(`com.j256.ormlite.stmt.UpdateBuilder` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.updateColumnExpression:(Ljava/lang/String;Ljava/lang/String;)Lcom/j256/ormlite/stmt/UpdateBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1650c0.  call temp:= `verifyColumnName`(v3, v4) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.verifyColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L1650c6.  v0:= temp @kind object;
  #L1650c8.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L1650ce.  v1:= temp;
  #L1650d0.  if v1 == 0 then goto L165106;
  #L1650d4.  v0:= new `java.sql.SQLException`;
  #L1650d8.  v1:= new `java.lang.StringBuilder`;
  #L1650dc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1650e2.  v2:= "Can't update foreign colletion field: " @kind object;
  #L1650e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1650ec.  v1:= temp @kind object;
  #L1650ee.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1650f4.  v1:= temp @kind object;
  #L1650f6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1650fc.  v1:= temp @kind object;
  #L1650fe.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L165104.  throw v0;
  #L165106.  v1:= new `com.j256.ormlite.stmt.query.SetExpression`;
  #L16510a.  call `<init>`(v1, v4, v0, v5) @signature `Lcom/j256/ormlite/stmt/query/SetExpression;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)V` @kind direct;
  #L165110.  call `addUpdateColumnToList`(v3, v4, v1) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.addUpdateColumnToList:(Ljava/lang/String;Lcom/j256/ormlite/stmt/query/Clause;)V` @kind direct;
  #L165116.  return v3 @kind object;
}
procedure `com.j256.ormlite.stmt.UpdateBuilder` `updateColumnValue`(`com.j256.ormlite.stmt.UpdateBuilder` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.updateColumnValue:(Ljava/lang/String;Ljava/lang/Object;)Lcom/j256/ormlite/stmt/UpdateBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L165128.  call temp:= `verifyColumnName`(v3, v4) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.verifyColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16512e.  v0:= temp @kind object;
  #L165130.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L165136.  v1:= temp;
  #L165138.  if v1 == 0 then goto L16516e;
  #L16513c.  v0:= new `java.sql.SQLException`;
  #L165140.  v1:= new `java.lang.StringBuilder`;
  #L165144.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16514a.  v2:= "Can't update foreign colletion field: " @kind object;
  #L16514e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165154.  v1:= temp @kind object;
  #L165156.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16515c.  v1:= temp @kind object;
  #L16515e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L165164.  v1:= temp @kind object;
  #L165166.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16516c.  throw v0;
  #L16516e.  v1:= new `com.j256.ormlite.stmt.query.SetValue`;
  #L165172.  call `<init>`(v1, v4, v0, v5) @signature `Lcom/j256/ormlite/stmt/query/SetValue;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)V` @kind direct;
  #L165178.  call `addUpdateColumnToList`(v3, v4, v1) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.addUpdateColumnToList:(Ljava/lang/String;Lcom/j256/ormlite/stmt/query/Clause;)V` @kind direct;
  #L16517e.  return v3 @kind object;
}
