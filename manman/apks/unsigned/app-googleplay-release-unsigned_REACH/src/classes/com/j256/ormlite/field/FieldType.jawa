record `com.j256.ormlite.field.FieldType` @kind class @AccessFlag PUBLIC {
  `java.lang.String` `com.j256.ormlite.field.FieldType.columnName` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.support.ConnectionSource` `com.j256.ormlite.field.FieldType.connectionSource` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.field.DataPersister` `com.j256.ormlite.field.FieldType.dataPersister` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.field.FieldType.dataTypeConfigObj` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.field.FieldType.defaultValue` @AccessFlag PRIVATE;
  `java.lang.reflect.Field` `com.j256.ormlite.field.FieldType.field` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.field.DatabaseFieldConfig` `com.j256.ormlite.field.FieldType.fieldConfig` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.field.FieldConverter` `com.j256.ormlite.field.FieldType.fieldConverter` @AccessFlag PRIVATE;
  `java.lang.reflect.Method` `com.j256.ormlite.field.FieldType.fieldGetMethod` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `com.j256.ormlite.field.FieldType.fieldSetMethod` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.dao.BaseDaoImpl` `com.j256.ormlite.field.FieldType.foreignDao` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.field.FieldType.foreignFieldType` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.field.FieldType.foreignIdField` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.field.FieldType.foreignRefField` @AccessFlag PRIVATE;
  `com.j256.ormlite.table.TableInfo` `com.j256.ormlite.field.FieldType.foreignTableInfo` @AccessFlag PRIVATE;
  `java.lang.String` `com.j256.ormlite.field.FieldType.generatedIdSequence` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.j256.ormlite.field.FieldType.isGeneratedId` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.j256.ormlite.field.FieldType.isId` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` `com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @AccessFlag PRIVATE;
  `java.lang.Class` `com.j256.ormlite.field.FieldType.parentClass` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.j256.ormlite.field.FieldType.tableName` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BOOLEAN` @AccessFlag PRIVATE_STATIC;
global `byte` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BYTE` @AccessFlag PRIVATE_STATIC;
global `char` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_CHAR` @AccessFlag PRIVATE_STATIC;
global `double` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_DOUBLE` @AccessFlag PRIVATE_STATIC;
global `float` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_FLOAT` @AccessFlag PRIVATE_STATIC;
global `int` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_INT` @AccessFlag PRIVATE_STATIC;
global `long` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_LONG` @AccessFlag PRIVATE_STATIC;
global `short` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_SHORT` @AccessFlag PRIVATE_STATIC;
global `java.lang.String` `@@com.j256.ormlite.field.FieldType.FOREIGN_ID_FIELD_SUFFIX` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.j256.ormlite.logger.Logger` `@@com.j256.ormlite.field.FieldType.logger` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.ThreadLocal` `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/FieldType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1582a8.  v0:= new `java.lang.ThreadLocal`;
  #L1582ac.  call `<init>`(v0) @signature `Ljava/lang/ThreadLocal;.<init>:()V` @kind direct;
  #L1582b2.  `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` := v0 @kind object;
  #L1582b6.  v0:= constclass @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1582ba.  call temp:= `getLogger`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/Class;)Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L1582c0.  v0:= temp @kind object;
  #L1582c2.  `@@com.j256.ormlite.field.FieldType.logger` @type ^`com.j256.ormlite.logger.Logger` := v0 @kind object;
  #L1582c6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.FieldType` v9 @kind this, `com.j256.ormlite.support.ConnectionSource` v10 @kind object, `java.lang.String` v11 @kind object, `java.lang.reflect.Field` v12 @kind object, `com.j256.ormlite.field.DatabaseFieldConfig` v13 @kind object, `java.lang.Class` v14 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.<init>:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Lcom/j256/ormlite/field/DatabaseFieldConfig;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1582d8.  v8:= 0I;
  #L1582da.  v7:= 0I;
  #L1582dc.  v6:= 1I;
  #L1582de.  call `<init>`(v9) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1582e4.  v9.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` := v10 @kind object;
  #L1582e8.  v9.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` := v11 @kind object;
  #L1582ec.  call temp:= `getDatabaseType`(v10) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L1582f2.  v3:= temp @kind object;
  #L1582f4.  v9.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` := v12 @kind object;
  #L1582f8.  v9.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` := v14 @kind object;
  #L1582fc.  call `postProcess`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.postProcess:()V` @kind virtual;
  #L158302.  call temp:= `getType`(v12) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L158308.  v4:= temp @kind object;
  #L15830a.  call temp:= `getDataPersister`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L158310.  v0:= temp @kind object;
  #L158312.  if v0 != 0 then goto L1584f2;
  #L158316.  call temp:= `getPersisterClass`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getPersisterClass:()Ljava/lang/Class;` @kind virtual;
  #L15831c.  v1:= temp @kind object;
  #L15831e.  if v1 == 0 then goto L15832a;
  #L158322.  v0:= constclass @type ^`com.j256.ormlite.field.types.VoidType` @kind object;
  #L158326.  if v1 != v0 then goto L1583c2;
  #L15832a.  call temp:= `lookupForField`(v12) @signature `Lcom/j256/ormlite/field/DataPersisterManager;.lookupForField:(Ljava/lang/reflect/Field;)Lcom/j256/ormlite/field/DataPersister;` @kind static;
  #L158330.  v0:= temp @kind object;
  #L158332.  v1:= v0 @kind object;
  #L158334.  call temp:= `getForeignColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignColumnName:()Ljava/lang/String;` @kind virtual;
  #L15833a.  v0:= temp @kind object;
  #L15833c.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L158342.  v2:= temp @kind object;
  #L158344.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L15834a.  v5:= temp;
  #L15834c.  if v5 != 0 then goto L158360;
  #L158350.  call temp:= `isForeignAutoRefresh`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L158356.  v5:= temp;
  #L158358.  if v5 != 0 then goto L158360;
  #L15835c.  if v0 == 0 then goto L15867e;
  #L158360.  if v1 == 0 then goto L15859a;
  #L158364.  call temp:= `isPrimitive`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L15836a.  v5:= temp;
  #L15836c.  if v5 == 0 then goto L15859a;
  #L158370.  v0:= new `java.lang.IllegalArgumentException`;
  #L158374.  v1:= new `java.lang.StringBuilder`;
  #L158378.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15837e.  v2:= "Field " @kind object;
  #L158382.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158388.  v1:= temp @kind object;
  #L15838a.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158390.  v1:= temp @kind object;
  #L158392.  v2:= " is a primitive class " @kind object;
  #L158396.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15839c.  v1:= temp @kind object;
  #L15839e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1583a4.  v1:= temp @kind object;
  #L1583a6.  v2:= " but marked as foreign" @kind object;
  #L1583aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1583b0.  v1:= temp @kind object;
  #L1583b2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1583b8.  v1:= temp @kind object;
  #L1583ba.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1583c0.  throw v0;
  #Try_start0.  
  #L1583c2.  v0:= "getSingleton" @kind object;
  #L1583c6.  v2:= 0I;
  #L1583c8.  v2:= new `java.lang.Class`[v2];
  #L1583cc.  call temp:= `getDeclaredMethod`(v1, v0, v2) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #Try_end0.  
  #L1583d2.  v0:= temp @kind object;
  #L1583d4.  v2:= 0I;
  #L1583d6.  v5:= 0I;
  #Try_start1.  
  #L1583d8.  v5:= new `java.lang.Object`[v5];
  #L1583dc.  call temp:= `invoke`(v0, v2, v5) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L1583e2.  v0:= temp @kind object;
  #L1583e4.  if v0 != 0 then goto L1584b8;
  #L1583e8.  v0:= new `java.sql.SQLException`;
  #L1583ec.  v2:= new `java.lang.StringBuilder`;
  #L1583f0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1583f6.  v3:= "Static getSingleton method should not return null on class " @kind object;
  #L1583fa.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158400.  v2:= temp @kind object;
  #L158402.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158408.  v1:= temp @kind object;
  #L15840a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158410.  v1:= temp @kind object;
  #L158412.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158418.  throw v0;
  #L15841a.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L15841c.  v2:= new `java.lang.StringBuilder`;
  #L158420.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158426.  v3:= "Could not find getSingleton static method on class " @kind object;
  #L15842a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158430.  v2:= temp @kind object;
  #L158432.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158438.  v1:= temp @kind object;
  #L15843a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158440.  v1:= temp @kind object;
  #L158442.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L158448.  v0:= temp @kind object;
  #L15844a.  throw v0;
  #L15844c.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L15844e.  v2:= new `java.lang.StringBuilder`;
  #L158452.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158458.  v3:= "Could not run getSingleton method on class " @kind object;
  #L15845c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158462.  v2:= temp @kind object;
  #L158464.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15846a.  v1:= temp @kind object;
  #L15846c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158472.  v1:= temp @kind object;
  #L158474.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L15847a.  v0:= temp @kind object;
  #L15847c.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L158482.  v0:= temp @kind object;
  #L158484.  throw v0;
  #L158486.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L158488.  v2:= new `java.lang.StringBuilder`;
  #L15848c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158492.  v3:= "Could not run getSingleton method on class " @kind object;
  #L158496.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15849c.  v2:= temp @kind object;
  #L15849e.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1584a4.  v1:= temp @kind object;
  #L1584a6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1584ac.  v1:= temp @kind object;
  #L1584ae.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1584b4.  v0:= temp @kind object;
  #L1584b6.  throw v0;
  #Try_start2.  
  #L1584b8.  v0:= (`com.j256.ormlite.field.DataPersister`) v0 @kind object;
  #Try_end2.  
  #L1584bc.  goto L158332;
  #L1584c0.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L1584c2.  v2:= new `java.lang.StringBuilder`;
  #L1584c6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1584cc.  v3:= "Could not cast result of static getSingleton method to DataPersister from class " @kind object;
  #L1584d0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1584d6.  v2:= temp @kind object;
  #L1584d8.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1584de.  v1:= temp @kind object;
  #L1584e0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1584e6.  v1:= temp @kind object;
  #L1584e8.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1584ee.  v0:= temp @kind object;
  #L1584f0.  throw v0;
  #L1584f2.  call temp:= `getDataPersister`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L1584f8.  v0:= temp @kind object;
  #L1584fa.  call temp:= `isValidForField`(v0, v12) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidForField:(Ljava/lang/reflect/Field;)Z` @kind interface;
  #L158500.  v1:= temp;
  #L158502.  if v1 != 0 then goto L158d2e;
  #L158506.  v1:= new `java.lang.StringBuilder`;
  #L15850a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158510.  v2:= "Field class " @kind object;
  #L158514.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15851a.  v2:= temp @kind object;
  #L15851c.  call temp:= `getName`(v4) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L158522.  v3:= temp @kind object;
  #L158524.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15852a.  v2:= " for field " @kind object;
  #L15852e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158534.  v2:= temp @kind object;
  #L158536.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15853c.  v2:= " is not valid for type " @kind object;
  #L158540.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158546.  v2:= temp @kind object;
  #L158548.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15854e.  call temp:= `getPrimaryClass`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.getPrimaryClass:()Ljava/lang/Class;` @kind interface;
  #L158554.  v0:= temp @kind object;
  #L158556.  if v0 == 0 then goto L158586;
  #L15855a.  v2:= new `java.lang.StringBuilder`;
  #L15855e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158564.  v3:= ", maybe should be " @kind object;
  #L158568.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15856e.  v2:= temp @kind object;
  #L158570.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158576.  v0:= temp @kind object;
  #L158578.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15857e.  v0:= temp @kind object;
  #L158580.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158586.  v0:= new `java.lang.IllegalArgumentException`;
  #L15858a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158590.  v1:= temp @kind object;
  #L158592.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158598.  throw v0;
  #L15859a.  if v0 != 0 then goto L15864e;
  #L15859e.  v0:= new `java.lang.StringBuilder`;
  #L1585a2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1585a8.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1585ae.  v0:= temp @kind object;
  #L1585b0.  v2:= "_id" @kind object;
  #L1585b4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1585ba.  v0:= temp @kind object;
  #L1585bc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1585c2.  v0:= temp @kind object;
  #L1585c4.  v2:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L1585c8.  call temp:= `isAssignableFrom`(v2, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1585ce.  v2:= temp;
  #L1585d0.  if v2 == 0 then goto L1587b8;
  #L1585d4.  v0:= new `java.sql.SQLException`;
  #L1585d8.  v1:= new `java.lang.StringBuilder`;
  #L1585dc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1585e2.  v2:= "Field '" @kind object;
  #L1585e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1585ec.  v1:= temp @kind object;
  #L1585ee.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L1585f4.  v2:= temp @kind object;
  #L1585f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1585fc.  v1:= temp @kind object;
  #L1585fe.  v2:= "' in class " @kind object;
  #L158602.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158608.  v1:= temp @kind object;
  #L15860a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158610.  v1:= temp @kind object;
  #L158612.  v2:= "' should use the @" @kind object;
  #L158616.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15861c.  v1:= temp @kind object;
  #L15861e.  v2:= constclass @type ^`com.j256.ormlite.field.ForeignCollectionField` @kind object;
  #L158622.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L158628.  v2:= temp @kind object;
  #L15862a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158630.  v1:= temp @kind object;
  #L158632.  v2:= " annotation not foreign=true" @kind object;
  #L158636.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15863c.  v1:= temp @kind object;
  #L15863e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158644.  v1:= temp @kind object;
  #L158646.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15864c.  throw v0;
  #L15864e.  v5:= new `java.lang.StringBuilder`;
  #L158652.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158658.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15865e.  v2:= temp @kind object;
  #L158660.  v5:= "_" @kind object;
  #L158664.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15866a.  v2:= temp @kind object;
  #L15866c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158672.  v0:= temp @kind object;
  #L158674.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15867a.  v0:= temp @kind object;
  #L15867c.  goto L1585c4;
  #L15867e.  call temp:= `isForeignCollection`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L158684.  v0:= temp;
  #L158686.  if v0 == 0 then goto L15882a;
  #L15868a.  v0:= constclass @type ^`java.util.Collection` @kind object;
  #L15868e.  if v4 == v0 then goto L158708;
  #L158692.  v0:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L158696.  call temp:= `isAssignableFrom`(v0, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L15869c.  v0:= temp;
  #L15869e.  if v0 != 0 then goto L158708;
  #L1586a2.  v0:= new `java.sql.SQLException`;
  #L1586a6.  v1:= new `java.lang.StringBuilder`;
  #L1586aa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1586b0.  v2:= "Field class for '" @kind object;
  #L1586b4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1586ba.  v1:= temp @kind object;
  #L1586bc.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L1586c2.  v2:= temp @kind object;
  #L1586c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1586ca.  v1:= temp @kind object;
  #L1586cc.  v2:= "' must be of class " @kind object;
  #L1586d0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1586d6.  v1:= temp @kind object;
  #L1586d8.  v2:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L1586dc.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1586e2.  v2:= temp @kind object;
  #L1586e4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1586ea.  v1:= temp @kind object;
  #L1586ec.  v2:= " or Collection." @kind object;
  #L1586f0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1586f6.  v1:= temp @kind object;
  #L1586f8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1586fe.  v1:= temp @kind object;
  #L158700.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158706.  throw v0;
  #L158708.  call temp:= `getGenericType`(v12) @signature `Ljava/lang/reflect/Field;.getGenericType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L15870e.  v0:= temp @kind object;
  #L158710.  v4:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L158714.  if v4 != 0 then goto L15875e;
  #L158718.  v0:= new `java.sql.SQLException`;
  #L15871c.  v1:= new `java.lang.StringBuilder`;
  #L158720.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158726.  v2:= "Field class for '" @kind object;
  #L15872a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158730.  v1:= temp @kind object;
  #L158732.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L158738.  v2:= temp @kind object;
  #L15873a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158740.  v1:= temp @kind object;
  #L158742.  v2:= "' must be a parameterized Collection." @kind object;
  #L158746.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15874c.  v1:= temp @kind object;
  #L15874e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158754.  v1:= temp @kind object;
  #L158756.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15875c.  throw v0;
  #L15875e.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L158762.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L158768.  v0:= temp @kind object;
  #L15876a.  v0:= length @variable v0;
  #L15876c.  if v0 != 0 then goto L1587b6;
  #L158770.  v0:= new `java.sql.SQLException`;
  #L158774.  v1:= new `java.lang.StringBuilder`;
  #L158778.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15877e.  v2:= "Field class for '" @kind object;
  #L158782.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158788.  v1:= temp @kind object;
  #L15878a.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L158790.  v2:= temp @kind object;
  #L158792.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158798.  v1:= temp @kind object;
  #L15879a.  v2:= "' must be a parameterized Collection with at least 1 type." @kind object;
  #L15879e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1587a4.  v1:= temp @kind object;
  #L1587a6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1587ac.  v1:= temp @kind object;
  #L1587ae.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1587b4.  throw v0;
  #L1587b6.  v0:= v2 @kind object;
  #L1587b8.  call temp:= `getColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L1587be.  v2:= temp @kind object;
  #L1587c0.  if v2 != 0 then goto L158974;
  #L1587c4.  v9.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L1587c8.  v9.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` := v13 @kind object;
  #L1587cc.  call temp:= `isId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isId:()Z` @kind virtual;
  #L1587d2.  v0:= temp;
  #L1587d4.  if v0 == 0 then goto L1589f6;
  #L1587d8.  call temp:= `isGeneratedId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isGeneratedId:()Z` @kind virtual;
  #L1587de.  v0:= temp;
  #L1587e0.  if v0 != 0 then goto L1587f0;
  #L1587e4.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L1587ea.  v0:= temp @kind object;
  #L1587ec.  if v0 == 0 then goto L158984;
  #L1587f0.  v0:= new `java.lang.IllegalArgumentException`;
  #L1587f4.  v1:= new `java.lang.StringBuilder`;
  #L1587f8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1587fe.  v2:= "Must specify one of id, generatedId, and generatedIdSequence with " @kind object;
  #L158802.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158808.  v1:= temp @kind object;
  #L15880a.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L158810.  v2:= temp @kind object;
  #L158812.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158818.  v1:= temp @kind object;
  #L15881a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158820.  v1:= temp @kind object;
  #L158822.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158828.  throw v0;
  #L15882a.  if v1 != 0 then goto L158d28;
  #L15882e.  call temp:= `isForeignCollection`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L158834.  v0:= temp;
  #L158836.  if v0 != 0 then goto L158d28;
  #L15883a.  v0:= constclass @type ^`byte`[] @kind object;
  #L15883e.  call temp:= `isAssignableFrom`(v0, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L158844.  v0:= temp;
  #L158846.  if v0 == 0 then goto L1588a4;
  #L15884a.  v0:= new `java.sql.SQLException`;
  #L15884e.  v1:= new `java.lang.StringBuilder`;
  #L158852.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158858.  v2:= "ORMLite does not know how to store " @kind object;
  #L15885c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158862.  v1:= temp @kind object;
  #L158864.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15886a.  v1:= temp @kind object;
  #L15886c.  v2:= " for field '" @kind object;
  #L158870.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158876.  v1:= temp @kind object;
  #L158878.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15887e.  v2:= temp @kind object;
  #L158880.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158886.  v1:= temp @kind object;
  #L158888.  v2:= "'. byte[] fields must specify dataType=DataType.BYTE_ARRAY or SERIALIZABLE" @kind object;
  #L15888c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158892.  v1:= temp @kind object;
  #L158894.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15889a.  v1:= temp @kind object;
  #L15889c.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1588a2.  throw v0;
  #L1588a4.  v0:= constclass @type ^`java.io.Serializable` @kind object;
  #L1588a8.  call temp:= `isAssignableFrom`(v0, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L1588ae.  v0:= temp;
  #L1588b0.  if v0 == 0 then goto L15891a;
  #L1588b4.  v0:= new `java.sql.SQLException`;
  #L1588b8.  v1:= new `java.lang.StringBuilder`;
  #L1588bc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1588c2.  v2:= "ORMLite does not know how to store " @kind object;
  #L1588c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1588cc.  v1:= temp @kind object;
  #L1588ce.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1588d4.  v1:= temp @kind object;
  #L1588d6.  v2:= " for field '" @kind object;
  #L1588da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1588e0.  v1:= temp @kind object;
  #L1588e2.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L1588e8.  v2:= temp @kind object;
  #L1588ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1588f0.  v1:= temp @kind object;
  #L1588f2.  v2:= "'.  Use another class, custom persister, or to serialize it use " @kind object;
  #L1588f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1588fc.  v1:= temp @kind object;
  #L1588fe.  v2:= "dataType=DataType.SERIALIZABLE" @kind object;
  #L158902.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158908.  v1:= temp @kind object;
  #L15890a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158910.  v1:= temp @kind object;
  #L158912.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158918.  throw v0;
  #L15891a.  v0:= new `java.lang.IllegalArgumentException`;
  #L15891e.  v1:= new `java.lang.StringBuilder`;
  #L158922.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158928.  v2:= "ORMLite does not know how to store " @kind object;
  #L15892c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158932.  v1:= temp @kind object;
  #L158934.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15893a.  v1:= temp @kind object;
  #L15893c.  v2:= " for field " @kind object;
  #L158940.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158946.  v1:= temp @kind object;
  #L158948.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15894e.  v2:= temp @kind object;
  #L158950.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158956.  v1:= temp @kind object;
  #L158958.  v2:= ". Use another class or a custom persister." @kind object;
  #L15895c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158962.  v1:= temp @kind object;
  #L158964.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15896a.  v1:= temp @kind object;
  #L15896c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158972.  throw v0;
  #L158974.  call temp:= `getColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L15897a.  v0:= temp @kind object;
  #L15897c.  v9.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L158980.  goto L1587c8;
  #L158984.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v6 @kind boolean;
  #L158988.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v8 @kind boolean;
  #L15898c.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v7 @kind object;
  #L158990.  v0:= v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` @kind boolean;
  #L158994.  if v0 == 0 then goto L158ab8;
  #L158998.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L15899e.  v0:= temp;
  #L1589a0.  if v0 != 0 then goto L1589b0;
  #L1589a4.  call temp:= `isForeignAutoRefresh`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L1589aa.  v0:= temp;
  #L1589ac.  if v0 == 0 then goto L158ab8;
  #L1589b0.  v0:= new `java.lang.IllegalArgumentException`;
  #L1589b4.  v1:= new `java.lang.StringBuilder`;
  #L1589b8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1589be.  v2:= "Id field " @kind object;
  #L1589c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1589c8.  v1:= temp @kind object;
  #L1589ca.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L1589d0.  v2:= temp @kind object;
  #L1589d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1589d8.  v1:= temp @kind object;
  #L1589da.  v2:= " cannot also be a foreign object" @kind object;
  #L1589de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1589e4.  v1:= temp @kind object;
  #L1589e6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1589ec.  v1:= temp @kind object;
  #L1589ee.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1589f4.  throw v0;
  #L1589f6.  call temp:= `isGeneratedId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isGeneratedId:()Z` @kind virtual;
  #L1589fc.  v0:= temp;
  #L1589fe.  if v0 == 0 then goto L158a70;
  #L158a02.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L158a08.  v0:= temp @kind object;
  #L158a0a.  if v0 == 0 then goto L158a48;
  #L158a0e.  v0:= new `java.lang.IllegalArgumentException`;
  #L158a12.  v1:= new `java.lang.StringBuilder`;
  #L158a16.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158a1c.  v2:= "Must specify one of id, generatedId, and generatedIdSequence with " @kind object;
  #L158a20.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158a26.  v1:= temp @kind object;
  #L158a28.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L158a2e.  v2:= temp @kind object;
  #L158a30.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158a36.  v1:= temp @kind object;
  #L158a38.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158a3e.  v1:= temp @kind object;
  #L158a40.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158a46.  throw v0;
  #L158a48.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v6 @kind boolean;
  #L158a4c.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v6 @kind boolean;
  #L158a50.  call temp:= `isIdSequenceNeeded`(v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.isIdSequenceNeeded:()Z` @kind interface;
  #L158a56.  v0:= temp;
  #L158a58.  if v0 == 0 then goto L158a6a;
  #L158a5c.  call temp:= `generateIdSequenceName`(v3, v11, v9) @signature `Lcom/j256/ormlite/db/DatabaseType;.generateIdSequenceName:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind interface;
  #L158a62.  v0:= temp @kind object;
  #L158a64.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v0 @kind object;
  #L158a68.  goto L158990;
  #L158a6a.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v7 @kind object;
  #L158a6e.  goto L158990;
  #L158a70.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L158a76.  v0:= temp @kind object;
  #L158a78.  if v0 == 0 then goto L158aa8;
  #L158a7c.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v6 @kind boolean;
  #L158a80.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v6 @kind boolean;
  #L158a84.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L158a8a.  v0:= temp @kind object;
  #L158a8c.  call temp:= `isEntityNamesMustBeUpCase`(v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.isEntityNamesMustBeUpCase:()Z` @kind interface;
  #L158a92.  v2:= temp;
  #L158a94.  if v2 == 0 then goto L158aa0;
  #L158a98.  call temp:= `upCaseEntityName`(v3, v0) @signature `Lcom/j256/ormlite/db/DatabaseType;.upCaseEntityName:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L158a9e.  v0:= temp @kind object;
  #L158aa0.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v0 @kind object;
  #L158aa4.  goto L158990;
  #L158aa8.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v8 @kind boolean;
  #L158aac.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v8 @kind boolean;
  #L158ab0.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v7 @kind object;
  #L158ab4.  goto L158990;
  #L158ab8.  call temp:= `isUseGetSet`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isUseGetSet:()Z` @kind virtual;
  #L158abe.  v0:= temp;
  #L158ac0.  if v0 == 0 then goto L158b3a;
  #L158ac4.  call temp:= `findGetMethod`(v12, v6) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.findGetMethod:(Ljava/lang/reflect/Field;Z)Ljava/lang/reflect/Method;` @kind static;
  #L158aca.  v0:= temp @kind object;
  #L158acc.  v9.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L158ad0.  call temp:= `findSetMethod`(v12, v6) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.findSetMethod:(Ljava/lang/reflect/Field;Z)Ljava/lang/reflect/Method;` @kind static;
  #L158ad6.  v0:= temp @kind object;
  #L158ad8.  v9.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L158adc.  call temp:= `isAllowGeneratedIdInsert`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isAllowGeneratedIdInsert:()Z` @kind virtual;
  #L158ae2.  v0:= temp;
  #L158ae4.  if v0 == 0 then goto L158ba4;
  #L158ae8.  call temp:= `isGeneratedId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isGeneratedId:()Z` @kind virtual;
  #L158aee.  v0:= temp;
  #L158af0.  if v0 != 0 then goto L158ba4;
  #L158af4.  v0:= new `java.lang.IllegalArgumentException`;
  #L158af8.  v1:= new `java.lang.StringBuilder`;
  #L158afc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158b02.  v2:= "Field " @kind object;
  #L158b06.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158b0c.  v1:= temp @kind object;
  #L158b0e.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L158b14.  v2:= temp @kind object;
  #L158b16.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158b1c.  v1:= temp @kind object;
  #L158b1e.  v2:= " must be a generated-id if allowGeneratedIdInsert = true" @kind object;
  #L158b22.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158b28.  v1:= temp @kind object;
  #L158b2a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158b30.  v1:= temp @kind object;
  #L158b32.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158b38.  throw v0;
  #L158b3a.  call temp:= `isAccessible`(v12) @signature `Ljava/lang/reflect/Field;.isAccessible:()Z` @kind virtual;
  #L158b40.  v0:= temp;
  #L158b42.  if v0 != 0 then goto L158b52;
  #Try_start3.  
  #L158b46.  v0:= v9.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L158b4a.  v2:= 1I;
  #L158b4c.  call `setAccessible`(v0, v2) @signature `Ljava/lang/reflect/Field;.setAccessible:(Z)V` @kind virtual;
  #Try_end3.  
  #L158b52.  v9.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` := v7 @kind object;
  #L158b56.  v9.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` := v7 @kind object;
  #L158b5a.  goto L158adc;
  #L158b5c.  v0:= Exception @type ^`java.lang.SecurityException` @kind object;
  #L158b5e.  v0:= new `java.lang.IllegalArgumentException`;
  #L158b62.  v1:= new `java.lang.StringBuilder`;
  #L158b66.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158b6c.  v2:= "Could not open access to field " @kind object;
  #L158b70.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158b76.  v1:= temp @kind object;
  #L158b78.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L158b7e.  v2:= temp @kind object;
  #L158b80.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158b86.  v1:= temp @kind object;
  #L158b88.  v2:= ".  You may have to set useGetSet=true to fix." @kind object;
  #L158b8c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158b92.  v1:= temp @kind object;
  #L158b94.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158b9a.  v1:= temp @kind object;
  #L158b9c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158ba2.  throw v0;
  #L158ba4.  call temp:= `isForeignAutoRefresh`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L158baa.  v0:= temp;
  #L158bac.  if v0 == 0 then goto L158c02;
  #L158bb0.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L158bb6.  v0:= temp;
  #L158bb8.  if v0 != 0 then goto L158c02;
  #L158bbc.  v0:= new `java.lang.IllegalArgumentException`;
  #L158bc0.  v1:= new `java.lang.StringBuilder`;
  #L158bc4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158bca.  v2:= "Field " @kind object;
  #L158bce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158bd4.  v1:= temp @kind object;
  #L158bd6.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L158bdc.  v2:= temp @kind object;
  #L158bde.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158be4.  v1:= temp @kind object;
  #L158be6.  v2:= " must have foreign = true if foreignAutoRefresh = true" @kind object;
  #L158bea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158bf0.  v1:= temp @kind object;
  #L158bf2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158bf8.  v1:= temp @kind object;
  #L158bfa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158c00.  throw v0;
  #L158c02.  call temp:= `isForeignAutoCreate`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoCreate:()Z` @kind virtual;
  #L158c08.  v0:= temp;
  #L158c0a.  if v0 == 0 then goto L158c60;
  #L158c0e.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L158c14.  v0:= temp;
  #L158c16.  if v0 != 0 then goto L158c60;
  #L158c1a.  v0:= new `java.lang.IllegalArgumentException`;
  #L158c1e.  v1:= new `java.lang.StringBuilder`;
  #L158c22.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158c28.  v2:= "Field " @kind object;
  #L158c2c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158c32.  v1:= temp @kind object;
  #L158c34.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L158c3a.  v2:= temp @kind object;
  #L158c3c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158c42.  v1:= temp @kind object;
  #L158c44.  v2:= " must have foreign = true if foreignAutoCreate = true" @kind object;
  #L158c48.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158c4e.  v1:= temp @kind object;
  #L158c50.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158c56.  v1:= temp @kind object;
  #L158c58.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158c5e.  throw v0;
  #L158c60.  call temp:= `getForeignColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignColumnName:()Ljava/lang/String;` @kind virtual;
  #L158c66.  v0:= temp @kind object;
  #L158c68.  if v0 == 0 then goto L158cbe;
  #L158c6c.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L158c72.  v0:= temp;
  #L158c74.  if v0 != 0 then goto L158cbe;
  #L158c78.  v0:= new `java.lang.IllegalArgumentException`;
  #L158c7c.  v1:= new `java.lang.StringBuilder`;
  #L158c80.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158c86.  v2:= "Field " @kind object;
  #L158c8a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158c90.  v1:= temp @kind object;
  #L158c92.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L158c98.  v2:= temp @kind object;
  #L158c9a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158ca0.  v1:= temp @kind object;
  #L158ca2.  v2:= " must have foreign = true if foreignColumnName is set" @kind object;
  #L158ca6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158cac.  v1:= temp @kind object;
  #L158cae.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158cb4.  v1:= temp @kind object;
  #L158cb6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158cbc.  throw v0;
  #L158cbe.  call temp:= `isVersion`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isVersion:()Z` @kind virtual;
  #L158cc4.  v0:= temp;
  #L158cc6.  if v0 == 0 then goto L158d20;
  #L158cca.  if v1 == 0 then goto L158cda;
  #L158cce.  call temp:= `isValidForVersion`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidForVersion:()Z` @kind interface;
  #L158cd4.  v0:= temp;
  #L158cd6.  if v0 != 0 then goto L158d20;
  #L158cda.  v0:= new `java.lang.IllegalArgumentException`;
  #L158cde.  v1:= new `java.lang.StringBuilder`;
  #L158ce2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158ce8.  v2:= "Field " @kind object;
  #L158cec.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158cf2.  v1:= temp @kind object;
  #L158cf4.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L158cfa.  v2:= temp @kind object;
  #L158cfc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158d02.  v1:= temp @kind object;
  #L158d04.  v2:= " is not a valid type to be a version field" @kind object;
  #L158d08.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158d0e.  v1:= temp @kind object;
  #L158d10.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158d16.  v1:= temp @kind object;
  #L158d18.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158d1e.  throw v0;
  #L158d20.  call `assignDataType`(v9, v3, v1) @signature `Lcom/j256/ormlite/field/FieldType;.assignDataType:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/DataPersister;)V` @kind direct;
  #L158d26.  return @kind void;
  #L158d28.  v0:= v2 @kind object;
  #L158d2a.  goto L1587b8;
  #L158d2e.  v1:= v0 @kind object;
  #L158d30.  goto L158334;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L15841a;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start1..Try_end1] goto L15844c;
  catch `java.lang.Exception` @[Try_start1..Try_end1] goto L158486;
  catch `java.lang.Exception` @[Try_start2..Try_end2] goto L1584c0;
  catch `java.lang.SecurityException` @[Try_start3..Try_end3] goto L158b5c;
}
procedure `void` `assignDataType`(`com.j256.ormlite.field.FieldType` v6 @kind this, `com.j256.ormlite.db.DatabaseType` v7 @kind object, `com.j256.ormlite.field.DataPersister` v8 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.assignDataType:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/DataPersister;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L158d80.  call temp:= `getDataPersister`(v7, v8, v6) @signature `Lcom/j256/ormlite/db/DatabaseType;.getDataPersister:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/DataPersister;` @kind interface;
  #L158d86.  v0:= temp @kind object;
  #L158d88.  v6.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` := v0 @kind object;
  #L158d8c.  if v0 != 0 then goto L158dee;
  #L158d90.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L158d94.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L158d9a.  v0:= temp;
  #L158d9c.  if v0 != 0 then goto L158fd2;
  #L158da0.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L158da4.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L158daa.  v0:= temp;
  #L158dac.  if v0 != 0 then goto L158fd2;
  #L158db0.  v0:= new `java.sql.SQLException`;
  #L158db4.  v1:= new `java.lang.StringBuilder`;
  #L158db8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158dbe.  v2:= "Data persister for field " @kind object;
  #L158dc2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158dc8.  v1:= temp @kind object;
  #L158dca.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158dd0.  v1:= temp @kind object;
  #L158dd2.  v2:= " is null but the field is not a foreign or foreignCollection" @kind object;
  #L158dd6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158ddc.  v1:= temp @kind object;
  #L158dde.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158de4.  v1:= temp @kind object;
  #L158de6.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158dec.  throw v0;
  #L158dee.  call temp:= `getFieldConverter`(v7, v0, v6) @signature `Lcom/j256/ormlite/db/DatabaseType;.getFieldConverter:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/FieldConverter;` @kind interface;
  #L158df4.  v1:= temp @kind object;
  #L158df6.  v6.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` := v1 @kind object;
  #L158dfa.  v1:= v6.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` @kind boolean;
  #L158dfe.  if v1 == 0 then goto L158ed8;
  #L158e02.  call temp:= `isValidGeneratedType`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidGeneratedType:()Z` @kind interface;
  #L158e08.  v1:= temp;
  #L158e0a.  if v1 != 0 then goto L158ed8;
  #L158e0e.  v1:= new `java.lang.StringBuilder`;
  #L158e12.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158e18.  v2:= "Generated-id field '" @kind object;
  #L158e1c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158e22.  v2:= temp @kind object;
  #L158e24.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L158e28.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L158e2e.  v3:= temp @kind object;
  #L158e30.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158e36.  v2:= "' in " @kind object;
  #L158e3a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158e40.  v2:= temp @kind object;
  #L158e42.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L158e46.  call temp:= `getDeclaringClass`(v3) @signature `Ljava/lang/reflect/Field;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L158e4c.  v3:= temp @kind object;
  #L158e4e.  call temp:= `getSimpleName`(v3) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L158e54.  v3:= temp @kind object;
  #L158e56.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158e5c.  v2:= " can't be type " @kind object;
  #L158e60.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158e66.  v2:= temp @kind object;
  #L158e68.  call temp:= `getSqlType`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L158e6e.  v0:= temp @kind object;
  #L158e70.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158e76.  v0:= ".  Must be one of: " @kind object;
  #L158e7a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158e80.  call temp:= `values`() @signature `Lcom/j256/ormlite/field/DataType;.values:()[Lcom/j256/ormlite/field/DataType;` @kind static;
  #L158e86.  v2:= temp @kind object;
  #L158e88.  v3:= length @variable v2;
  #L158e8a.  v0:= 0I;
  #L158e8c.  if v0 >= v3 then goto L158ec4;
  #L158e90.  v4:= v2[v0] @kind object;
  #L158e94.  call temp:= `getDataPersister`(v4) @signature `Lcom/j256/ormlite/field/DataType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L158e9a.  v5:= temp @kind object;
  #L158e9c.  if v5 == 0 then goto L158ebe;
  #L158ea0.  call temp:= `isValidGeneratedType`(v5) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidGeneratedType:()Z` @kind interface;
  #L158ea6.  v5:= temp;
  #L158ea8.  if v5 == 0 then goto L158ebe;
  #L158eac.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158eb2.  v4:= temp @kind object;
  #L158eb4.  v5:= 32I;
  #L158eb8.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L158ebe.  v0:= v0 + 1;
  #L158ec2.  goto L158e8c;
  #L158ec4.  v0:= new `java.lang.IllegalArgumentException`;
  #L158ec8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158ece.  v1:= temp @kind object;
  #L158ed0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158ed6.  throw v0;
  #L158ed8.  v1:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L158edc.  call temp:= `isThrowIfNull`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isThrowIfNull:()Z` @kind virtual;
  #L158ee2.  v1:= temp;
  #L158ee4.  if v1 == 0 then goto L158f3e;
  #L158ee8.  call temp:= `isPrimitive`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L158eee.  v1:= temp;
  #L158ef0.  if v1 != 0 then goto L158f3e;
  #L158ef4.  v0:= new `java.sql.SQLException`;
  #L158ef8.  v1:= new `java.lang.StringBuilder`;
  #L158efc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158f02.  v2:= "Field " @kind object;
  #L158f06.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158f0c.  v1:= temp @kind object;
  #L158f0e.  v2:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L158f12.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L158f18.  v2:= temp @kind object;
  #L158f1a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158f20.  v1:= temp @kind object;
  #L158f22.  v2:= " must be a primitive if set with throwIfNull" @kind object;
  #L158f26.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158f2c.  v1:= temp @kind object;
  #L158f2e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158f34.  v1:= temp @kind object;
  #L158f36.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158f3c.  throw v0;
  #L158f3e.  v1:= v6.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` @kind boolean;
  #L158f42.  if v1 == 0 then goto L158fb0;
  #L158f46.  call temp:= `isAppropriateId`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isAppropriateId:()Z` @kind interface;
  #L158f4c.  v1:= temp;
  #L158f4e.  if v1 != 0 then goto L158fb0;
  #L158f52.  v1:= new `java.sql.SQLException`;
  #L158f56.  v2:= new `java.lang.StringBuilder`;
  #L158f5a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158f60.  v3:= "Field '" @kind object;
  #L158f64.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158f6a.  v2:= temp @kind object;
  #L158f6c.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L158f70.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L158f76.  v3:= temp @kind object;
  #L158f78.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158f7e.  v2:= temp @kind object;
  #L158f80.  v3:= "' is of data type " @kind object;
  #L158f84.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158f8a.  v2:= temp @kind object;
  #L158f8c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158f92.  v0:= temp @kind object;
  #L158f94.  v2:= " which cannot be the ID field" @kind object;
  #L158f98.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158f9e.  v0:= temp @kind object;
  #L158fa0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L158fa6.  v0:= temp @kind object;
  #L158fa8.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L158fae.  throw v1;
  #L158fb0.  call temp:= `makeConfigObject`(v0, v6) @signature `Lcom/j256/ormlite/field/DataPersister;.makeConfigObject:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;` @kind interface;
  #L158fb6.  v0:= temp @kind object;
  #L158fb8.  v6.`com.j256.ormlite.field.FieldType.dataTypeConfigObj` @type ^`java.lang.Object` := v0 @kind object;
  #L158fbc.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L158fc0.  call temp:= `getDefaultValue`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getDefaultValue:()Ljava/lang/String;` @kind virtual;
  #L158fc6.  v0:= temp @kind object;
  #L158fc8.  if v0 != 0 then goto L158fd4;
  #L158fcc.  v0:= 0I;
  #L158fce.  v6.`com.j256.ormlite.field.FieldType.defaultValue` @type ^`java.lang.Object` := v0 @kind object;
  #L158fd2.  return @kind void;
  #L158fd4.  v1:= v6.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` @kind boolean;
  #L158fd8.  if v1 == 0 then goto L15903a;
  #L158fdc.  v1:= new `java.sql.SQLException`;
  #L158fe0.  v2:= new `java.lang.StringBuilder`;
  #L158fe4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L158fea.  v3:= "Field '" @kind object;
  #L158fee.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L158ff4.  v2:= temp @kind object;
  #L158ff6.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L158ffa.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L159000.  v3:= temp @kind object;
  #L159002.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159008.  v2:= temp @kind object;
  #L15900a.  v3:= "' cannot be a generatedId and have a default value '" @kind object;
  #L15900e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159014.  v2:= temp @kind object;
  #L159016.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15901c.  v0:= temp @kind object;
  #L15901e.  v2:= "'" @kind object;
  #L159022.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159028.  v0:= temp @kind object;
  #L15902a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L159030.  v0:= temp @kind object;
  #L159032.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159038.  throw v1;
  #L15903a.  v1:= v6.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L15903e.  call temp:= `parseDefaultString`(v1, v6, v0) @signature `Lcom/j256/ormlite/field/FieldConverter;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @kind interface;
  #L159044.  v0:= temp @kind object;
  #L159046.  v6.`com.j256.ormlite.field.FieldType.defaultValue` @type ^`java.lang.Object` := v0 @kind object;
  #L15904a.  goto L158fd2;
}
procedure `com.j256.ormlite.field.FieldType` `createFieldType`(`com.j256.ormlite.support.ConnectionSource` v6 @kind object, `java.lang.String` v7 @kind object, `java.lang.reflect.Field` v8 @kind object, `java.lang.Class` v9 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createFieldType:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Ljava/lang/Class;)Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15905c.  call temp:= `getDatabaseType`(v6) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L159062.  v0:= temp @kind object;
  #L159064.  call temp:= `fromField`(v0, v7, v8) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.fromField:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/reflect/Field;)Lcom/j256/ormlite/field/DatabaseFieldConfig;` @kind static;
  #L15906a.  v4:= temp @kind object;
  #L15906c.  if v4 != 0 then goto L159074;
  #L159070.  v0:= 0I;
  #L159072.  return v0 @kind object;
  #L159074.  v0:= new `com.j256.ormlite.field.FieldType`;
  #L159078.  v1:= v6 @kind object;
  #L15907a.  v2:= v7 @kind object;
  #L15907c.  v3:= v8 @kind object;
  #L15907e.  v5:= v9 @kind object;
  #L159080.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/field/FieldType;.<init>:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Lcom/j256/ormlite/field/DatabaseFieldConfig;Ljava/lang/Class;)V` @kind direct;
  #L159086.  goto L159072;
}
procedure `java.lang.Object` `createForeignObject`(`com.j256.ormlite.field.FieldType` v4 @kind this, `java.lang.Object` v5 @kind object, `com.j256.ormlite.dao.ObjectCache` v6 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignObject:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L159098.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L15909c.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L1590a2.  v0:= temp @kind object;
  #L1590a4.  v0:= (`com.j256.ormlite.field.FieldType$LevelCounters`) v0 @kind object;
  #L1590a8.  if v0 != 0 then goto L1590dc;
  #L1590ac.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L1590b0.  call temp:= `isForeignAutoRefresh`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L1590b6.  v0:= temp;
  #L1590b8.  if v0 != 0 then goto L1590c6;
  #L1590bc.  call temp:= `createForeignShell`(v4, v5, v6) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L1590c2.  v0:= temp @kind object;
  #L1590c4.  return v0 @kind object;
  #L1590c6.  v0:= new `com.j256.ormlite.field.FieldType$LevelCounters`;
  #L1590ca.  v1:= 0I;
  #L1590cc.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/FieldType$LevelCounters;.<init>:(Lcom/j256/ormlite/field/FieldType$1;)V` @kind direct;
  #L1590d2.  v1:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L1590d6.  call `set`(v1, v0) @signature `Ljava/lang/ThreadLocal;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L1590dc.  v1:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L1590e0.  if v1 != 0 then goto L15910e;
  #L1590e4.  v1:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L1590e8.  call temp:= `isForeignAutoRefresh`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L1590ee.  v1:= temp;
  #L1590f0.  if v1 != 0 then goto L1590fe;
  #L1590f4.  call temp:= `createForeignShell`(v4, v5, v6) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L1590fa.  v0:= temp @kind object;
  #L1590fc.  goto L1590c4;
  #L1590fe.  v1:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L159102.  call temp:= `getMaxForeignAutoRefreshLevel`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getMaxForeignAutoRefreshLevel:()I` @kind virtual;
  #L159108.  v1:= temp;
  #L15910a.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevelMax` @type ^`int` := v1;
  #L15910e.  v1:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L159112.  v2:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevelMax` @type ^`int`;
  #L159116.  if v1 < v2 then goto L159124;
  #L15911a.  call temp:= `createForeignShell`(v4, v5, v6) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L159120.  v0:= temp @kind object;
  #L159122.  goto L1590c4;
  #L159124.  v1:= v4.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` @kind object;
  #L159128.  if v1 != 0 then goto L159154;
  #L15912c.  v1:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L159130.  call temp:= `getDatabaseType`(v1) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L159136.  v1:= temp @kind object;
  #L159138.  v2:= v4.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L15913c.  call temp:= `getTableInfo`(v2) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L159142.  v2:= temp @kind object;
  #L159144.  v3:= v4.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L159148.  call temp:= `build`(v1, v2, v3) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.build:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;` @kind static;
  #L15914e.  v1:= temp @kind object;
  #L159150.  v4.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` := v1 @kind object;
  #L159154.  v1:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L159158.  v1:= v1 + 1;
  #L15915c.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int` := v1;
  #Try_start0.  
  #L159160.  v1:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L159164.  v2:= v4.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L159168.  call temp:= `getReadOnlyConnection`(v1, v2) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getReadOnlyConnection:(Ljava/lang/String;)Lcom/j256/ormlite/support/DatabaseConnection;` @kind interface;
  #Try_end0.  
  #L15916e.  v2:= temp @kind object;
  #Try_start1.  
  #L159170.  v1:= v4.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` @kind object;
  #L159174.  call temp:= `execute`(v1, v2, v5, v6) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.execute:(Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L15917a.  v1:= temp @kind object;
  #Try_start2.  
  #L15917c.  v3:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L159180.  call `releaseConnection`(v3, v2) @signature `Lcom/j256/ormlite/support/ConnectionSource;.releaseConnection:(Lcom/j256/ormlite/support/DatabaseConnection;)V` @kind interface;
  #Try_end2.  
  #L159186.  v2:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L15918a.  v2:= v2 + -1;
  #L15918e.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int` := v2;
  #L159192.  v0:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L159196.  if v0 > 0 then goto L1591a4;
  #L15919a.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L15919e.  call `remove`(v0) @signature `Ljava/lang/ThreadLocal;.remove:()V` @kind virtual;
  #L1591a4.  v0:= v1 @kind object;
  #L1591a6.  goto L1590c4;
  #L1591a8.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L1591aa.  v3:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L1591ae.  call `releaseConnection`(v3, v2) @signature `Lcom/j256/ormlite/support/ConnectionSource;.releaseConnection:(Lcom/j256/ormlite/support/DatabaseConnection;)V` @kind interface;
  #L1591b4.  throw v1;
  #Try_end3.  
  #L1591b6.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1591b8.  v2:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L1591bc.  v2:= v2 + -1;
  #L1591c0.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int` := v2;
  #L1591c4.  v0:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L1591c8.  if v0 > 0 then goto L1591d6;
  #L1591cc.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L1591d0.  call `remove`(v0) @signature `Ljava/lang/ThreadLocal;.remove:()V` @kind virtual;
  #L1591d6.  throw v1;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1591b6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L1591a8;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L1591b6;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L1591b6;
}
procedure `java.lang.Object` `createForeignShell`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object, `com.j256.ormlite.dao.ObjectCache` v5 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L159210.  v0:= v3.`com.j256.ormlite.field.FieldType.foreignTableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L159214.  call temp:= `createObject`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.createObject:()Ljava/lang/Object;` @kind virtual;
  #L15921a.  v0:= temp @kind object;
  #L15921c.  v1:= v3.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L159220.  v2:= 0I;
  #L159222.  call `assignField`(v1, v0, v4, v2, v5) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L159228.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `findForeignFieldType`(`com.j256.ormlite.field.FieldType` v6 @kind this, `java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object, `com.j256.ormlite.dao.BaseDaoImpl` v9 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.findForeignFieldType:(Ljava/lang/Class;Ljava/lang/Class;Lcom/j256/ormlite/dao/BaseDaoImpl;)Lcom/j256/ormlite/field/FieldType;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15923c.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L159240.  call temp:= `getForeignCollectionForeignFieldName`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionForeignFieldName:()Ljava/lang/String;` @kind virtual;
  #L159246.  v1:= temp @kind object;
  #L159248.  call temp:= `getTableInfo`(v9) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L15924e.  v0:= temp @kind object;
  #L159250.  call temp:= `getFieldTypes`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L159256.  v2:= temp @kind object;
  #L159258.  v3:= length @variable v2;
  #L15925a.  v0:= 0I;
  #L15925c.  if v0 >= v3 then goto L159328;
  #L159260.  v4:= v2[v0] @kind object;
  #L159264.  call temp:= `getType`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15926a.  v5:= temp @kind object;
  #L15926c.  if v5 != v8 then goto L159322;
  #L159270.  if v1 == 0 then goto L159290;
  #L159274.  call temp:= `getField`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getField:()Ljava/lang/reflect/Field;` @kind virtual;
  #L15927a.  v5:= temp @kind object;
  #L15927c.  call temp:= `getName`(v5) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L159282.  v5:= temp @kind object;
  #L159284.  call temp:= `equals`(v5, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15928a.  v5:= temp;
  #L15928c.  if v5 == 0 then goto L159322;
  #L159290.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L159294.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L15929a.  v0:= temp;
  #L15929c.  if v0 != 0 then goto L1593c6;
  #L1592a0.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L1592a4.  call temp:= `isForeignAutoRefresh`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L1592aa.  v0:= temp;
  #L1592ac.  if v0 != 0 then goto L1593c6;
  #L1592b0.  v0:= new `java.sql.SQLException`;
  #L1592b4.  v1:= new `java.lang.StringBuilder`;
  #L1592b8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1592be.  v2:= "Foreign collection object " @kind object;
  #L1592c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1592c8.  v1:= temp @kind object;
  #L1592ca.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1592d0.  v1:= temp @kind object;
  #L1592d2.  v2:= " for field '" @kind object;
  #L1592d6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1592dc.  v1:= temp @kind object;
  #L1592de.  v2:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L1592e2.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L1592e8.  v2:= temp @kind object;
  #L1592ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1592f0.  v1:= temp @kind object;
  #L1592f2.  v2:= "' contains a field of class " @kind object;
  #L1592f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1592fc.  v1:= temp @kind object;
  #L1592fe.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159304.  v1:= temp @kind object;
  #L159306.  v2:= " but it's not foreign" @kind object;
  #L15930a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159310.  v1:= temp @kind object;
  #L159312.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L159318.  v1:= temp @kind object;
  #L15931a.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159320.  throw v0;
  #L159322.  v0:= v0 + 1;
  #L159326.  goto L15925c;
  #L159328.  v0:= new `java.lang.StringBuilder`;
  #L15932c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L159332.  v2:= "Foreign collection class " @kind object;
  #L159336.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15933c.  v2:= temp @kind object;
  #L15933e.  call temp:= `getName`(v7) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L159344.  v3:= temp @kind object;
  #L159346.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15934c.  v2:= " for field '" @kind object;
  #L159350.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159356.  v2:= temp @kind object;
  #L159358.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15935c.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L159362.  v3:= temp @kind object;
  #L159364.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15936a.  v2:= temp @kind object;
  #L15936c.  v3:= "' column-name does not contain a foreign field" @kind object;
  #L159370.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159376.  if v1 == 0 then goto L159398;
  #L15937a.  v2:= " named '" @kind object;
  #L15937e.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159384.  v2:= temp @kind object;
  #L159386.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15938c.  v1:= temp @kind object;
  #L15938e.  v2:= 39I;
  #L159392.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L159398.  v1:= " of class " @kind object;
  #L15939c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1593a2.  v1:= temp @kind object;
  #L1593a4.  call temp:= `getName`(v8) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1593aa.  v2:= temp @kind object;
  #L1593ac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1593b2.  v1:= new `java.sql.SQLException`;
  #L1593b6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1593bc.  v0:= temp @kind object;
  #L1593be.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1593c4.  throw v1;
  #L1593c6.  return v4 @kind object;
}
procedure `boolean` `isFieldValueDefault`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.isFieldValueDefault:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1593d8.  if v2 != 0 then goto L1593e0;
  #L1593dc.  v0:= 1I;
  #L1593de.  return v0;
  #L1593e0.  call temp:= `getJavaDefaultValueDefault`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getJavaDefaultValueDefault:()Ljava/lang/Object;` @kind virtual;
  #L1593e6.  v0:= temp @kind object;
  #L1593e8.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1593ee.  v0:= temp;
  #L1593f0.  goto L1593de;
}
procedure `void` `assignField`(`com.j256.ormlite.field.FieldType` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `boolean` v7 , `com.j256.ormlite.dao.ObjectCache` v8 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L159404.  v0:= `@@com.j256.ormlite.field.FieldType.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L159408.  v1:= `@@com.j256.ormlite.logger.Log$Level.TRACE` @type ^`com.j256.ormlite.logger.Log$Level` @kind object;
  #L15940c.  call temp:= `isLevelEnabled`(v0, v1) @signature `Lcom/j256/ormlite/logger/Logger;.isLevelEnabled:(Lcom/j256/ormlite/logger/Log$Level;)Z` @kind virtual;
  #L159412.  v0:= temp;
  #L159414.  if v0 == 0 then goto L159438;
  #L159418.  v2:= `@@com.j256.ormlite.field.FieldType.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15941c.  v3:= "assiging from data {}, val {}: {}" @kind object;
  #L159420.  if v5 != 0 then goto L15945e;
  #L159424.  v0:= "null" @kind object;
  #L159428.  v1:= v0 @kind object;
  #L15942a.  if v6 != 0 then goto L15946a;
  #L15942e.  v0:= "null" @kind object;
  #L159432.  call `trace`(v2, v3, v1, v0, v6) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L159438.  v0:= v4.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15943c.  if v0 == 0 then goto L15948c;
  #L159440.  if v6 == 0 then goto L15948c;
  #L159444.  call temp:= `extractJavaFieldValue`(v4, v5) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15944a.  v0:= temp @kind object;
  #L15944c.  if v0 == 0 then goto L159474;
  #L159450.  call temp:= `equals`(v0, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L159456.  v0:= temp;
  #L159458.  if v0 == 0 then goto L159474;
  #L15945c.  return @kind void;
  #L15945e.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L159464.  v0:= temp @kind object;
  #L159466.  v1:= v0 @kind object;
  #L159468.  goto L15942a;
  #L15946a.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L159470.  v0:= temp @kind object;
  #L159472.  goto L159432;
  #L159474.  v0:= v4.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L159478.  call temp:= `getObjectCache`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getObjectCache:()Lcom/j256/ormlite/dao/ObjectCache;` @kind virtual;
  #L15947e.  v0:= temp @kind object;
  #L159480.  if v0 != 0 then goto L159502;
  #L159484.  v0:= 0I;
  #L159486.  if v0 == 0 then goto L159514;
  #L15948a.  v6:= v0 @kind object;
  #L15948c.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L159490.  if v0 != 0 then goto L159584;
  #Try_start0.  
  #L159494.  v0:= v4.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L159498.  call `set`(v0, v5, v6) @signature `Ljava/lang/reflect/Field;.set:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #Try_end0.  
  #L15949e.  goto L15945c;
  #L1594a0.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L1594a2.  v1:= new `java.lang.StringBuilder`;
  #L1594a6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1594ac.  v2:= "Could not assign object '" @kind object;
  #L1594b0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1594b6.  v1:= temp @kind object;
  #L1594b8.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1594be.  v1:= temp @kind object;
  #L1594c0.  v2:= "' of type " @kind object;
  #L1594c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1594ca.  v1:= temp @kind object;
  #L1594cc.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1594d2.  v2:= temp @kind object;
  #L1594d4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1594da.  v1:= temp @kind object;
  #L1594dc.  v2:= " to field " @kind object;
  #L1594e0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1594e6.  v1:= temp @kind object;
  #L1594e8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1594ee.  v1:= temp @kind object;
  #L1594f0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1594f6.  v1:= temp @kind object;
  #L1594f8.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1594fe.  v0:= temp @kind object;
  #L159500.  throw v0;
  #L159502.  call temp:= `getType`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L159508.  v1:= temp @kind object;
  #L15950a.  call temp:= `get`(v0, v1, v6) @signature `Lcom/j256/ormlite/dao/ObjectCache;.get:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L159510.  v0:= temp @kind object;
  #L159512.  goto L159486;
  #L159514.  if v7 != 0 then goto L15948c;
  #L159518.  call temp:= `createForeignObject`(v4, v6, v8) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignObject:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L15951e.  v6:= temp @kind object;
  #L159520.  goto L15948c;
  #L159522.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L159524.  v1:= new `java.lang.StringBuilder`;
  #L159528.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15952e.  v2:= "Could not assign object '" @kind object;
  #L159532.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159538.  v1:= temp @kind object;
  #L15953a.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159540.  v1:= temp @kind object;
  #L159542.  v2:= "' of type " @kind object;
  #L159546.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15954c.  v1:= temp @kind object;
  #L15954e.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L159554.  v2:= temp @kind object;
  #L159556.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15955c.  v1:= temp @kind object;
  #L15955e.  v2:= "' to field " @kind object;
  #L159562.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159568.  v1:= temp @kind object;
  #L15956a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159570.  v1:= temp @kind object;
  #L159572.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L159578.  v1:= temp @kind object;
  #L15957a.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L159580.  v0:= temp @kind object;
  #L159582.  throw v0;
  #Try_start1.  
  #L159584.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L159588.  v1:= 1I;
  #L15958a.  v1:= new `java.lang.Object`[v1];
  #L15958e.  v2:= 0I;
  #L159590.  v1[v2]:= v6 @kind object;
  #L159594.  call temp:= `invoke`(v0, v5, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L15959a.  goto L15945c;
  #L15959e.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L1595a0.  v1:= new `java.lang.StringBuilder`;
  #L1595a4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1595aa.  v2:= "Could not call " @kind object;
  #L1595ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1595b4.  v1:= temp @kind object;
  #L1595b6.  v2:= v4.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L1595ba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1595c0.  v1:= temp @kind object;
  #L1595c2.  v2:= " on object with '" @kind object;
  #L1595c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1595cc.  v1:= temp @kind object;
  #L1595ce.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1595d4.  v1:= temp @kind object;
  #L1595d6.  v2:= "' for " @kind object;
  #L1595da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1595e0.  v1:= temp @kind object;
  #L1595e2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1595e8.  v1:= temp @kind object;
  #L1595ea.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1595f0.  v1:= temp @kind object;
  #L1595f2.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1595f8.  v0:= temp @kind object;
  #L1595fa.  throw v0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L1594a0;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L159522;
  catch `java.lang.Exception` @[Try_start1..Try_end1] goto L15959e;
}
procedure `java.lang.Object` `assignIdValue`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Number` v5 @kind object, `com.j256.ormlite.dao.ObjectCache` v6 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15962c.  v0:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L159630.  call temp:= `convertIdNumber`(v0, v5) @signature `Lcom/j256/ormlite/field/DataPersister;.convertIdNumber:(Ljava/lang/Number;)Ljava/lang/Object;` @kind interface;
  #L159636.  v0:= temp @kind object;
  #L159638.  if v0 != 0 then goto L159686;
  #L15963c.  v0:= new `java.sql.SQLException`;
  #L159640.  v1:= new `java.lang.StringBuilder`;
  #L159644.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15964a.  v2:= "Invalid class " @kind object;
  #L15964e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159654.  v1:= temp @kind object;
  #L159656.  v2:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15965a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159660.  v1:= temp @kind object;
  #L159662.  v2:= " for sequence-id " @kind object;
  #L159666.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15966c.  v1:= temp @kind object;
  #L15966e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159674.  v1:= temp @kind object;
  #L159676.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15967c.  v1:= temp @kind object;
  #L15967e.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159684.  throw v0;
  #L159686.  v1:= 0I;
  #L159688.  call `assignField`(v3, v4, v0, v1, v6) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L15968e.  return v0 @kind object;
}
procedure `com.j256.ormlite.dao.BaseForeignCollection` `buildForeignCollection`(`com.j256.ormlite.field.FieldType` v8 @kind this, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.buildForeignCollection:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/j256/ormlite/dao/BaseForeignCollection;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1596a0.  v2:= 0I;
  #L1596a2.  v0:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1596a6.  if v0 != 0 then goto L1596ae;
  #L1596aa.  v0:= v2 @kind object;
  #L1596ac.  return v0 @kind object;
  #L1596ae.  v1:= v8.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L1596b2.  v0:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L1596b6.  call temp:= `isForeignCollectionEager`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionEager:()Z` @kind virtual;
  #L1596bc.  v0:= temp;
  #L1596be.  if v0 != 0 then goto L1596ee;
  #L1596c2.  v0:= new `com.j256.ormlite.dao.LazyForeignCollection`;
  #L1596c6.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1596ca.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L1596ce.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L1596d4.  v5:= temp @kind object;
  #L1596d6.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L1596da.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L1596e0.  v6:= temp;
  #L1596e2.  v2:= v9 @kind object;
  #L1596e4.  v3:= v10 @kind object;
  #L1596e6.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/LazyForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #L1596ec.  goto L1596ac;
  #L1596ee.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L1596f2.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L1596f8.  v0:= temp @kind object;
  #L1596fa.  v0:= (`com.j256.ormlite.field.FieldType$LevelCounters`) v0 @kind object;
  #L1596fe.  if v0 != 0 then goto L1597fa;
  #L159702.  v0:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L159706.  call temp:= `getForeignCollectionMaxEagerLevel`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionMaxEagerLevel:()I` @kind virtual;
  #L15970c.  v0:= temp;
  #L15970e.  if v0 != 0 then goto L15973e;
  #L159712.  v0:= new `com.j256.ormlite.dao.LazyForeignCollection`;
  #L159716.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15971a.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15971e.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L159724.  v5:= temp @kind object;
  #L159726.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15972a.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L159730.  v6:= temp;
  #L159732.  v2:= v9 @kind object;
  #L159734.  v3:= v10 @kind object;
  #L159736.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/LazyForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #L15973c.  goto L1596ac;
  #L15973e.  v0:= new `com.j256.ormlite.field.FieldType$LevelCounters`;
  #L159742.  call `<init>`(v0, v2) @signature `Lcom/j256/ormlite/field/FieldType$LevelCounters;.<init>:(Lcom/j256/ormlite/field/FieldType$1;)V` @kind direct;
  #L159748.  v2:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L15974c.  call `set`(v2, v0) @signature `Ljava/lang/ThreadLocal;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L159752.  v7:= v0 @kind object;
  #L159754.  v0:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L159758.  if v0 != 0 then goto L15976c;
  #L15975c.  v0:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L159760.  call temp:= `getForeignCollectionMaxEagerLevel`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionMaxEagerLevel:()I` @kind virtual;
  #L159766.  v0:= temp;
  #L159768.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevelMax` @type ^`int` := v0;
  #L15976c.  v0:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L159770.  v2:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevelMax` @type ^`int`;
  #L159774.  if v0 < v2 then goto L1597a4;
  #L159778.  v0:= new `com.j256.ormlite.dao.LazyForeignCollection`;
  #L15977c.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L159780.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L159784.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L15978a.  v5:= temp @kind object;
  #L15978c.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L159790.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L159796.  v6:= temp;
  #L159798.  v2:= v9 @kind object;
  #L15979a.  v3:= v10 @kind object;
  #L15979c.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/LazyForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #L1597a2.  goto L1596ac;
  #L1597a4.  v0:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L1597a8.  v0:= v0 + 1;
  #L1597ac.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int` := v0;
  #Try_start0.  
  #L1597b0.  v0:= new `com.j256.ormlite.dao.EagerForeignCollection`;
  #L1597b4.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1597b8.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L1597bc.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L1597c2.  v5:= temp @kind object;
  #L1597c4.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L1597c8.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L1597ce.  v6:= temp;
  #L1597d0.  v2:= v9 @kind object;
  #L1597d2.  v3:= v10 @kind object;
  #L1597d4.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #Try_end0.  
  #L1597da.  v1:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L1597de.  v1:= v1 + -1;
  #L1597e2.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int` := v1;
  #L1597e6.  goto L1596ac;
  #L1597ea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L1597ec.  v1:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L1597f0.  v1:= v1 + -1;
  #L1597f4.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int` := v1;
  #L1597f8.  throw v0;
  #L1597fa.  v7:= v0 @kind object;
  #L1597fc.  goto L159754;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L1597ea;
}
procedure `void` `configDaoInformation`(`com.j256.ormlite.field.FieldType` v10 @kind this, `com.j256.ormlite.support.ConnectionSource` v11 @kind object, `java.lang.Class` v12 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.configDaoInformation:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L15981c.  v8:= 0I;
  #L15981e.  v4:= 0I;
  #L159820.  v0:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L159824.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15982a.  v5:= temp @kind object;
  #L15982c.  call temp:= `getDatabaseType`(v11) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L159832.  v6:= temp @kind object;
  #L159834.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L159838.  call temp:= `getForeignColumnName`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignColumnName:()Ljava/lang/String;` @kind virtual;
  #L15983e.  v7:= temp @kind object;
  #L159840.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L159844.  call temp:= `isForeignAutoRefresh`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L15984a.  v0:= temp;
  #L15984c.  if v0 != 0 then goto L159854;
  #L159850.  if v7 == 0 then goto L159986;
  #L159854.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L159858.  call temp:= `getForeignTableConfig`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignTableConfig:()Lcom/j256/ormlite/table/DatabaseTableConfig;` @kind virtual;
  #L15985e.  v0:= temp @kind object;
  #L159860.  if v0 != 0 then goto L1598c2;
  #L159864.  call temp:= `createDao`(v11, v5) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L15986a.  v0:= temp @kind object;
  #L15986c.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L159870.  call temp:= `getTableInfo`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L159876.  v1:= temp @kind object;
  #L159878.  call temp:= `getIdField`(v1) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15987e.  v3:= temp @kind object;
  #L159880.  if v3 != 0 then goto L1598de;
  #L159884.  v0:= new `java.lang.IllegalArgumentException`;
  #L159888.  v1:= new `java.lang.StringBuilder`;
  #L15988c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L159892.  v2:= "Foreign field " @kind object;
  #L159896.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15989c.  v1:= temp @kind object;
  #L15989e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1598a4.  v1:= temp @kind object;
  #L1598a6.  v2:= " does not have id field" @kind object;
  #L1598aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1598b0.  v1:= temp @kind object;
  #L1598b2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1598b8.  v1:= temp @kind object;
  #L1598ba.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1598c0.  throw v0;
  #L1598c2.  call `extractFieldTypes`(v0, v11) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;)V` @kind virtual;
  #L1598c8.  call temp:= `createDao`(v11, v0) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Lcom/j256/ormlite/table/DatabaseTableConfig;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L1598ce.  v0:= temp @kind object;
  #L1598d0.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L1598d4.  call temp:= `getTableInfo`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L1598da.  v1:= temp @kind object;
  #L1598dc.  goto L159878;
  #L1598de.  if v7 != 0 then goto L159928;
  #L1598e2.  v2:= v3 @kind object;
  #L1598e4.  call temp:= `build`(v6, v1, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.build:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;` @kind static;
  #L1598ea.  v5:= temp @kind object;
  #L1598ec.  v9:= v5 @kind object;
  #L1598ee.  v5:= v1 @kind object;
  #L1598f0.  v1:= v0 @kind object;
  #L1598f2.  v0:= v9 @kind object;
  #L1598f4.  v10.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` := v0 @kind object;
  #L1598f8.  v10.`com.j256.ormlite.field.FieldType.foreignTableInfo` @type ^`com.j256.ormlite.table.TableInfo` := v5 @kind object;
  #L1598fc.  v10.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` := v4 @kind object;
  #L159900.  v10.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` := v1 @kind object;
  #L159904.  v10.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` := v3 @kind object;
  #L159908.  v10.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` := v2 @kind object;
  #L15990c.  v0:= v10.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L159910.  if v0 == 0 then goto L159926;
  #L159914.  v0:= v10.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L159918.  call temp:= `getDataPersister`(v0) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L15991e.  v0:= temp @kind object;
  #L159920.  call `assignDataType`(v10, v6, v0) @signature `Lcom/j256/ormlite/field/FieldType;.assignDataType:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/DataPersister;)V` @kind direct;
  #L159926.  return @kind void;
  #L159928.  call temp:= `getFieldTypeByColumnName`(v1, v7) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypeByColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15992e.  v2:= temp @kind object;
  #L159930.  if v2 != 0 then goto L1598e4;
  #L159934.  v0:= new `java.lang.IllegalArgumentException`;
  #L159938.  v1:= new `java.lang.StringBuilder`;
  #L15993c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L159942.  v2:= "Foreign field " @kind object;
  #L159946.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15994c.  v1:= temp @kind object;
  #L15994e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159954.  v1:= temp @kind object;
  #L159956.  v2:= " does not have field named '" @kind object;
  #L15995a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159960.  v1:= temp @kind object;
  #L159962.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159968.  v1:= temp @kind object;
  #L15996a.  v2:= "'" @kind object;
  #L15996e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159974.  v1:= temp @kind object;
  #L159976.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15997c.  v1:= temp @kind object;
  #L15997e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159984.  throw v0;
  #L159986.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15998a.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L159990.  v0:= temp;
  #L159992.  if v0 == 0 then goto L159b0c;
  #L159996.  v0:= v10.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15999a.  if v0 == 0 then goto L159a00;
  #L15999e.  v0:= v10.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L1599a2.  call temp:= `isPrimitive`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L1599a8.  v0:= temp;
  #L1599aa.  if v0 == 0 then goto L159a00;
  #L1599ae.  v0:= new `java.lang.IllegalArgumentException`;
  #L1599b2.  v1:= new `java.lang.StringBuilder`;
  #L1599b6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1599bc.  v2:= "Field " @kind object;
  #L1599c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1599c6.  v1:= temp @kind object;
  #L1599c8.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1599ce.  v1:= temp @kind object;
  #L1599d0.  v2:= " is a primitive class " @kind object;
  #L1599d4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1599da.  v1:= temp @kind object;
  #L1599dc.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1599e2.  v1:= temp @kind object;
  #L1599e4.  v2:= " but marked as foreign" @kind object;
  #L1599e8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1599ee.  v1:= temp @kind object;
  #L1599f0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1599f6.  v1:= temp @kind object;
  #L1599f8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1599fe.  throw v0;
  #L159a00.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L159a04.  call temp:= `getForeignTableConfig`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignTableConfig:()Lcom/j256/ormlite/table/DatabaseTableConfig;` @kind virtual;
  #L159a0a.  v0:= temp @kind object;
  #L159a0c.  if v0 == 0 then goto L159a74;
  #L159a10.  call `extractFieldTypes`(v0, v11) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;)V` @kind virtual;
  #L159a16.  call temp:= `createDao`(v11, v0) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Lcom/j256/ormlite/table/DatabaseTableConfig;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L159a1c.  v0:= temp @kind object;
  #L159a1e.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L159a22.  call temp:= `getTableInfo`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L159a28.  v1:= temp @kind object;
  #L159a2a.  call temp:= `getIdField`(v1) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L159a30.  v2:= temp @kind object;
  #L159a32.  if v2 != 0 then goto L159a82;
  #L159a36.  v0:= new `java.lang.IllegalArgumentException`;
  #L159a3a.  v1:= new `java.lang.StringBuilder`;
  #L159a3e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L159a44.  v2:= "Foreign field " @kind object;
  #L159a48.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159a4e.  v1:= temp @kind object;
  #L159a50.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159a56.  v1:= temp @kind object;
  #L159a58.  v2:= " does not have id field" @kind object;
  #L159a5c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159a62.  v1:= temp @kind object;
  #L159a64.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L159a6a.  v1:= temp @kind object;
  #L159a6c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159a72.  throw v0;
  #L159a74.  call temp:= `createDao`(v11, v5) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L159a7a.  v0:= temp @kind object;
  #L159a7c.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L159a80.  goto L159a22;
  #L159a82.  call temp:= `isForeignAutoCreate`(v10) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignAutoCreate:()Z` @kind virtual;
  #L159a88.  v3:= temp;
  #L159a8a.  if v3 == 0 then goto L159b00;
  #L159a8e.  call temp:= `isGeneratedId`(v2) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L159a94.  v3:= temp;
  #L159a96.  if v3 != 0 then goto L159b00;
  #L159a9a.  v0:= new `java.lang.IllegalArgumentException`;
  #L159a9e.  v1:= new `java.lang.StringBuilder`;
  #L159aa2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L159aa8.  v2:= "Field " @kind object;
  #L159aac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159ab2.  v1:= temp @kind object;
  #L159ab4.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L159ab8.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L159abe.  v2:= temp @kind object;
  #L159ac0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159ac6.  v1:= temp @kind object;
  #L159ac8.  v2:= ", if foreignAutoCreate = true then class " @kind object;
  #L159acc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159ad2.  v1:= temp @kind object;
  #L159ad4.  call temp:= `getSimpleName`(v5) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L159ada.  v2:= temp @kind object;
  #L159adc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159ae2.  v1:= temp @kind object;
  #L159ae4.  v2:= " must have id field with generatedId = true" @kind object;
  #L159ae8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159aee.  v1:= temp @kind object;
  #L159af0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L159af6.  v1:= temp @kind object;
  #L159af8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159afe.  throw v0;
  #L159b00.  v3:= v2 @kind object;
  #L159b02.  v5:= v1 @kind object;
  #L159b04.  v1:= v0 @kind object;
  #L159b06.  v0:= v4 @kind object;
  #L159b08.  goto L1598f4;
  #L159b0c.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L159b10.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L159b16.  v0:= temp;
  #L159b18.  if v0 == 0 then goto L159d24;
  #L159b1c.  v0:= constclass @type ^`java.util.Collection` @kind object;
  #L159b20.  if v5 == v0 then goto L159b9e;
  #L159b24.  v0:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L159b28.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L159b2e.  v0:= temp;
  #L159b30.  if v0 != 0 then goto L159b9e;
  #L159b34.  v0:= new `java.sql.SQLException`;
  #L159b38.  v1:= new `java.lang.StringBuilder`;
  #L159b3c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L159b42.  v2:= "Field class for '" @kind object;
  #L159b46.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159b4c.  v1:= temp @kind object;
  #L159b4e.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L159b52.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L159b58.  v2:= temp @kind object;
  #L159b5a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159b60.  v1:= temp @kind object;
  #L159b62.  v2:= "' must be of class " @kind object;
  #L159b66.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159b6c.  v1:= temp @kind object;
  #L159b6e.  v2:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L159b72.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L159b78.  v2:= temp @kind object;
  #L159b7a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159b80.  v1:= temp @kind object;
  #L159b82.  v2:= " or Collection." @kind object;
  #L159b86.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159b8c.  v1:= temp @kind object;
  #L159b8e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L159b94.  v1:= temp @kind object;
  #L159b96.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159b9c.  throw v0;
  #L159b9e.  v0:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L159ba2.  call temp:= `getGenericType`(v0) @signature `Ljava/lang/reflect/Field;.getGenericType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L159ba8.  v0:= temp @kind object;
  #L159baa.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L159bae.  if v1 != 0 then goto L159bfc;
  #L159bb2.  v0:= new `java.sql.SQLException`;
  #L159bb6.  v1:= new `java.lang.StringBuilder`;
  #L159bba.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L159bc0.  v2:= "Field class for '" @kind object;
  #L159bc4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159bca.  v1:= temp @kind object;
  #L159bcc.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L159bd0.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L159bd6.  v2:= temp @kind object;
  #L159bd8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159bde.  v1:= temp @kind object;
  #L159be0.  v2:= "' must be a parameterized Collection." @kind object;
  #L159be4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159bea.  v1:= temp @kind object;
  #L159bec.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L159bf2.  v1:= temp @kind object;
  #L159bf4.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159bfa.  throw v0;
  #L159bfc.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L159c00.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L159c06.  v0:= temp @kind object;
  #L159c08.  v1:= length @variable v0;
  #L159c0a.  if v1 != 0 then goto L159c58;
  #L159c0e.  v0:= new `java.sql.SQLException`;
  #L159c12.  v1:= new `java.lang.StringBuilder`;
  #L159c16.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L159c1c.  v2:= "Field class for '" @kind object;
  #L159c20.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159c26.  v1:= temp @kind object;
  #L159c28.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L159c2c.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L159c32.  v2:= temp @kind object;
  #L159c34.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159c3a.  v1:= temp @kind object;
  #L159c3c.  v2:= "' must be a parameterized Collection with at least 1 type." @kind object;
  #L159c40.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159c46.  v1:= temp @kind object;
  #L159c48.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L159c4e.  v1:= temp @kind object;
  #L159c50.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159c56.  throw v0;
  #L159c58.  v1:= v0[v8] @kind object;
  #L159c5c.  v1:= instanceof @variable v1 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L159c60.  if v1 == 0 then goto L159c78;
  #L159c64.  call temp:= `getGenericSuperclass`(v12) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L159c6a.  v0:= temp @kind object;
  #L159c6c.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L159c70.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L159c76.  v0:= temp @kind object;
  #L159c78.  v1:= v0[v8] @kind object;
  #L159c7c.  v1:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L159c80.  if v1 != 0 then goto L159cda;
  #L159c84.  v1:= new `java.sql.SQLException`;
  #L159c88.  v2:= new `java.lang.StringBuilder`;
  #L159c8c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L159c92.  v3:= "Field class for '" @kind object;
  #L159c96.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159c9c.  v2:= temp @kind object;
  #L159c9e.  v3:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L159ca2.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L159ca8.  v3:= temp @kind object;
  #L159caa.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159cb0.  v2:= temp @kind object;
  #L159cb2.  v3:= "' must be a parameterized Collection whose generic argument is an entity class not: " @kind object;
  #L159cb6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159cbc.  v2:= temp @kind object;
  #L159cbe.  v0:= v0[v8] @kind object;
  #L159cc2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159cc8.  v0:= temp @kind object;
  #L159cca.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L159cd0.  v0:= temp @kind object;
  #L159cd2.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L159cd8.  throw v1;
  #L159cda.  v0:= v0[v8] @kind object;
  #L159cde.  v0:= (`java.lang.Class`) v0 @kind object;
  #L159ce2.  v1:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L159ce6.  call temp:= `getForeignTableConfig`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignTableConfig:()Lcom/j256/ormlite/table/DatabaseTableConfig;` @kind virtual;
  #L159cec.  v1:= temp @kind object;
  #L159cee.  if v1 != 0 then goto L159d16;
  #L159cf2.  call temp:= `createDao`(v11, v0) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L159cf8.  v1:= temp @kind object;
  #L159cfa.  v1:= (`com.j256.ormlite.dao.BaseDaoImpl`) v1 @kind object;
  #L159cfe.  call temp:= `findForeignFieldType`(v10, v0, v12, v1) @signature `Lcom/j256/ormlite/field/FieldType;.findForeignFieldType:(Ljava/lang/Class;Ljava/lang/Class;Lcom/j256/ormlite/dao/BaseDaoImpl;)Lcom/j256/ormlite/field/FieldType;` @kind direct;
  #L159d04.  v0:= temp @kind object;
  #L159d06.  v2:= v4 @kind object;
  #L159d08.  v3:= v4 @kind object;
  #L159d0a.  v5:= v4 @kind object;
  #L159d0c.  v9:= v0 @kind object;
  #L159d0e.  v0:= v4 @kind object;
  #L159d10.  v4:= v9 @kind object;
  #L159d12.  goto L1598f4;
  #L159d16.  call temp:= `createDao`(v11, v1) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Lcom/j256/ormlite/table/DatabaseTableConfig;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L159d1c.  v1:= temp @kind object;
  #L159d1e.  v1:= (`com.j256.ormlite.dao.BaseDaoImpl`) v1 @kind object;
  #L159d22.  goto L159cfe;
  #L159d24.  v0:= v4 @kind object;
  #L159d26.  v1:= v4 @kind object;
  #L159d28.  v2:= v4 @kind object;
  #L159d2a.  v3:= v4 @kind object;
  #L159d2c.  v5:= v4 @kind object;
  #L159d2e.  goto L1598f4;
}
procedure `java.lang.Object` `convertJavaFieldToSqlArgValue`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159d44.  if v2 != 0 then goto L159d4c;
  #L159d48.  v0:= 0I;
  #L159d4a.  return v0 @kind object;
  #L159d4c.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L159d50.  call temp:= `javaToSqlArg`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/FieldConverter;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L159d56.  v0:= temp @kind object;
  #L159d58.  goto L159d4a;
}
procedure `java.lang.Object` `convertStringToJavaField`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lcom/j256/ormlite/field/FieldType;.convertStringToJavaField:(Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159d6c.  if v2 != 0 then goto L159d74;
  #L159d70.  v0:= 0I;
  #L159d72.  return v0 @kind object;
  #L159d74.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L159d78.  call temp:= `resultStringToJava`(v0, v1, v2, v3) @signature `Lcom/j256/ormlite/field/FieldConverter;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @kind interface;
  #L159d7e.  v0:= temp @kind object;
  #L159d80.  goto L159d72;
}
procedure `int` `createWithForeignDao`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createWithForeignDao:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159d94.  v0:= v1.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L159d98.  call temp:= `create`(v0, v2) @signature `Lcom/j256/ormlite/dao/Dao;.create:(Ljava/lang/Object;)I` @kind interface;
  #L159d9e.  v0:= temp;
  #L159da0.  return v0;
}
procedure `boolean` `equals`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L159db4.  v0:= 0I;
  #L159db6.  if v4 == 0 then goto L159dce;
  #L159dba.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L159dc0.  v1:= temp @kind object;
  #L159dc2.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L159dc8.  v2:= temp @kind object;
  #L159dca.  if v1 == v2 then goto L159dd0;
  #L159dce.  return v0;
  #L159dd0.  v4:= (`com.j256.ormlite.field.FieldType`) v4 @kind object;
  #L159dd4.  v1:= v3.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L159dd8.  v2:= v4.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L159ddc.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/reflect/Field;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L159de2.  v1:= temp;
  #L159de4.  if v1 == 0 then goto L159dce;
  #L159de8.  v1:= v3.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L159dec.  if v1 != 0 then goto L159dfc;
  #L159df0.  v1:= v4.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L159df4.  if v1 != 0 then goto L159dce;
  #L159df8.  v0:= 1I;
  #L159dfa.  goto L159dce;
  #L159dfc.  v1:= v3.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L159e00.  v2:= v4.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L159e04.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L159e0a.  v1:= temp;
  #L159e0c.  if v1 == 0 then goto L159dce;
  #L159e10.  goto L159df8;
}
procedure `java.lang.Object` `extractJavaFieldToSqlArgValue`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159e24.  call temp:= `extractJavaFieldValue`(v1, v2) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L159e2a.  v0:= temp @kind object;
  #L159e2c.  call temp:= `convertJavaFieldToSqlArgValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L159e32.  v0:= temp @kind object;
  #L159e34.  return v0 @kind object;
}
procedure `java.lang.Object` `extractJavaFieldValue`(`com.j256.ormlite.field.FieldType` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L159e48.  call temp:= `extractRawJavaFieldValue`(v2, v3) @signature `Lcom/j256/ormlite/field/FieldType;.extractRawJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L159e4e.  v0:= temp @kind object;
  #L159e50.  v1:= v2.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L159e54.  if v1 == 0 then goto L159e68;
  #L159e58.  if v0 == 0 then goto L159e68;
  #L159e5c.  v1:= v2.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L159e60.  call temp:= `extractRawJavaFieldValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.extractRawJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L159e66.  v0:= temp @kind object;
  #L159e68.  return v0 @kind object;
}
procedure `java.lang.Object` `extractRawJavaFieldValue`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.extractRawJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L159e7c.  v0:= v3.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L159e80.  if v0 != 0 then goto L159ec4;
  #Try_start0.  
  #L159e84.  v0:= v3.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L159e88.  call temp:= `get`(v0, v4) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L159e8e.  v0:= temp @kind object;
  #L159e90.  return v0 @kind object;
  #L159e92.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L159e94.  v1:= new `java.lang.StringBuilder`;
  #L159e98.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L159e9e.  v2:= "Could not get field value for " @kind object;
  #L159ea2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159ea8.  v1:= temp @kind object;
  #L159eaa.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159eb0.  v1:= temp @kind object;
  #L159eb2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L159eb8.  v1:= temp @kind object;
  #L159eba.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L159ec0.  v0:= temp @kind object;
  #L159ec2.  throw v0;
  #Try_start1.  
  #L159ec4.  v0:= v3.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L159ec8.  v1:= 0I;
  #L159eca.  v1:= new `java.lang.Object`[v1];
  #L159ece.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L159ed4.  v0:= temp @kind object;
  #L159ed6.  goto L159e90;
  #L159ed8.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L159eda.  v1:= new `java.lang.StringBuilder`;
  #L159ede.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L159ee4.  v2:= "Could not call " @kind object;
  #L159ee8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159eee.  v1:= temp @kind object;
  #L159ef0.  v2:= v3.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L159ef4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159efa.  v1:= temp @kind object;
  #L159efc.  v2:= " for " @kind object;
  #L159f00.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159f06.  v1:= temp @kind object;
  #L159f08.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L159f0e.  v1:= temp @kind object;
  #L159f10.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L159f16.  v1:= temp @kind object;
  #L159f18.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L159f1e.  v0:= temp @kind object;
  #L159f20.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L159e92;
  catch `java.lang.Exception` @[Try_start1..Try_end1] goto L159ed8;
}
procedure `java.lang.Object` `generateId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.generateId:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159f50.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L159f54.  call temp:= `generateId`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.generateId:()Ljava/lang/Object;` @kind interface;
  #L159f5a.  v0:= temp @kind object;
  #L159f5c.  return v0 @kind object;
}
procedure `java.lang.String` `getColumnDefinition`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnDefinition:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159f70.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L159f74.  call temp:= `getColumnDefinition`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getColumnDefinition:()Ljava/lang/String;` @kind virtual;
  #L159f7a.  v0:= temp @kind object;
  #L159f7c.  return v0 @kind object;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159f90.  v0:= v1.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L159f94.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.DataPersister` `getDataPersister`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159fa8.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L159fac.  return v0 @kind object;
}
procedure `java.lang.Object` `getDataTypeConfigObj`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159fc0.  v0:= v1.`com.j256.ormlite.field.FieldType.dataTypeConfigObj` @type ^`java.lang.Object` @kind object;
  #L159fc4.  return v0 @kind object;
}
procedure `java.lang.Object` `getDefaultValue`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getDefaultValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159fd8.  v0:= v1.`com.j256.ormlite.field.FieldType.defaultValue` @type ^`java.lang.Object` @kind object;
  #L159fdc.  return v0 @kind object;
}
procedure `java.lang.reflect.Field` `getField`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getField:()Ljava/lang/reflect/Field;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L159ff0.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L159ff4.  return v0 @kind object;
}
procedure `java.lang.String` `getFieldName`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a008.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a00c.  call temp:= `getName`(v0) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15a012.  v0:= temp @kind object;
  #L15a014.  return v0 @kind object;
}
procedure `java.lang.Object` `getFieldValueIfNotDefault`(`com.j256.ormlite.field.FieldType` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldValueIfNotDefault:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15a028.  call temp:= `extractJavaFieldValue`(v2, v3) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15a02e.  v0:= temp @kind object;
  #L15a030.  call temp:= `isFieldValueDefault`(v2, v0) @signature `Lcom/j256/ormlite/field/FieldType;.isFieldValueDefault:(Ljava/lang/Object;)Z` @kind direct;
  #L15a036.  v1:= temp;
  #L15a038.  if v1 == 0 then goto L15a03e;
  #L15a03c.  v0:= 0I;
  #L15a03e.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `getForeignIdField`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignIdField:()Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a050.  v0:= v1.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15a054.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `getForeignRefField`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignRefField:()Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a068.  v0:= v1.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15a06c.  return v0 @kind object;
}
procedure `java.lang.String` `getFormat`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a080.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a084.  call temp:= `getFormat`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L15a08a.  v0:= temp @kind object;
  #L15a08c.  return v0 @kind object;
}
procedure `java.lang.String` `getGeneratedIdSequence`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getGeneratedIdSequence:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a0a0.  v0:= v1.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` @kind object;
  #L15a0a4.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getGenericType`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getGenericType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a0b8.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a0bc.  call temp:= `getGenericType`(v0) @signature `Ljava/lang/reflect/Field;.getGenericType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L15a0c2.  v0:= temp @kind object;
  #L15a0c4.  return v0 @kind object;
}
procedure `java.lang.String` `getIndexName`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getIndexName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15a0d8.  v0:= v2.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a0dc.  v1:= v2.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L15a0e0.  call temp:= `getIndexName`(v0, v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getIndexName:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L15a0e6.  v0:= temp @kind object;
  #L15a0e8.  return v0 @kind object;
}
procedure `java.lang.Object` `getJavaDefaultValueDefault`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getJavaDefaultValueDefault:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15a0fc.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a100.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a106.  v0:= temp @kind object;
  #L15a108.  v1:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L15a10c.  if v0 != v1 then goto L15a11e;
  #L15a110.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BOOLEAN` @type ^`boolean` @kind boolean;
  #L15a114.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L15a11a.  v0:= temp @kind object;
  #L15a11c.  return v0 @kind object;
  #L15a11e.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a122.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a128.  v0:= temp @kind object;
  #L15a12a.  v1:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L15a12e.  if v0 == v1 then goto L15a146;
  #L15a132.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a136.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a13c.  v0:= temp @kind object;
  #L15a13e.  v1:= constclass @type ^`java.lang.Byte` @kind object;
  #L15a142.  if v0 != v1 then goto L15a154;
  #L15a146.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BYTE` @type ^`byte` @kind byte;
  #L15a14a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L15a150.  v0:= temp @kind object;
  #L15a152.  goto L15a11c;
  #L15a154.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a158.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a15e.  v0:= temp @kind object;
  #L15a160.  v1:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L15a164.  if v0 == v1 then goto L15a17c;
  #L15a168.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a16c.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a172.  v0:= temp @kind object;
  #L15a174.  v1:= constclass @type ^`java.lang.Character` @kind object;
  #L15a178.  if v0 != v1 then goto L15a18a;
  #L15a17c.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_CHAR` @type ^`char` @kind char;
  #L15a180.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L15a186.  v0:= temp @kind object;
  #L15a188.  goto L15a11c;
  #L15a18a.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a18e.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a194.  v0:= temp @kind object;
  #L15a196.  v1:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L15a19a.  if v0 == v1 then goto L15a1b2;
  #L15a19e.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a1a2.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a1a8.  v0:= temp @kind object;
  #L15a1aa.  v1:= constclass @type ^`java.lang.Short` @kind object;
  #L15a1ae.  if v0 != v1 then goto L15a1c0;
  #L15a1b2.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_SHORT` @type ^`short` @kind short;
  #L15a1b6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Short;.valueOf:(S)Ljava/lang/Short;` @kind static;
  #L15a1bc.  v0:= temp @kind object;
  #L15a1be.  goto L15a11c;
  #L15a1c0.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a1c4.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a1ca.  v0:= temp @kind object;
  #L15a1cc.  v1:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L15a1d0.  if v0 == v1 then goto L15a1e8;
  #L15a1d4.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a1d8.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a1de.  v0:= temp @kind object;
  #L15a1e0.  v1:= constclass @type ^`java.lang.Integer` @kind object;
  #L15a1e4.  if v0 != v1 then goto L15a1f6;
  #L15a1e8.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_INT` @type ^`int`;
  #L15a1ec.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15a1f2.  v0:= temp @kind object;
  #L15a1f4.  goto L15a11c;
  #L15a1f6.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a1fa.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a200.  v0:= temp @kind object;
  #L15a202.  v1:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L15a206.  if v0 == v1 then goto L15a21e;
  #L15a20a.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a20e.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a214.  v0:= temp @kind object;
  #L15a216.  v1:= constclass @type ^`java.lang.Long` @kind object;
  #L15a21a.  if v0 != v1 then goto L15a22e;
  #L15a21e.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_LONG` @type ^`long` @kind wide;
  #L15a222.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L15a228.  v0:= temp @kind object;
  #L15a22a.  goto L15a11c;
  #L15a22e.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a232.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a238.  v0:= temp @kind object;
  #L15a23a.  v1:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L15a23e.  if v0 == v1 then goto L15a256;
  #L15a242.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a246.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a24c.  v0:= temp @kind object;
  #L15a24e.  v1:= constclass @type ^`java.lang.Float` @kind object;
  #L15a252.  if v0 != v1 then goto L15a266;
  #L15a256.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_FLOAT` @type ^`float`;
  #L15a25a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L15a260.  v0:= temp @kind object;
  #L15a262.  goto L15a11c;
  #L15a266.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a26a.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a270.  v0:= temp @kind object;
  #L15a272.  v1:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L15a276.  if v0 == v1 then goto L15a28e;
  #L15a27a.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a27e.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a284.  v0:= temp @kind object;
  #L15a286.  v1:= constclass @type ^`java.lang.Double` @kind object;
  #L15a28a.  if v0 != v1 then goto L15a29e;
  #L15a28e.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_DOUBLE` @type ^`double` @kind wide;
  #L15a292.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L15a298.  v0:= temp @kind object;
  #L15a29a.  goto L15a11c;
  #L15a29e.  v0:= 0I;
  #L15a2a0.  goto L15a11c;
}
procedure `com.j256.ormlite.field.SqlType` `getSqlType`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a2b4.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L15a2b8.  call temp:= `getSqlType`(v0) @signature `Lcom/j256/ormlite/field/FieldConverter;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L15a2be.  v0:= temp @kind object;
  #L15a2c0.  return v0 @kind object;
}
procedure `java.lang.String` `getTableName`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getTableName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a2d4.  v0:= v1.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L15a2d8.  return v0 @kind object;
}
procedure `java.lang.Class` `getType`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a2ec.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a2f0.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15a2f6.  v0:= temp @kind object;
  #L15a2f8.  return v0 @kind object;
}
procedure `java.lang.String` `getUniqueIndexName`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getUniqueIndexName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15a30c.  v0:= v2.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a310.  v1:= v2.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L15a314.  call temp:= `getUniqueIndexName`(v0, v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getUniqueIndexName:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L15a31a.  v0:= temp @kind object;
  #L15a31c.  return v0 @kind object;
}
procedure `java.lang.Enum` `getUnknownEnumVal`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getUnknownEnumVal:()Ljava/lang/Enum;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a330.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a334.  call temp:= `getUnknownEnumValue`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getUnknownEnumValue:()Ljava/lang/Enum;` @kind virtual;
  #L15a33a.  v0:= temp @kind object;
  #L15a33c.  return v0 @kind object;
}
procedure `int` `getWidth`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a350.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a354.  call temp:= `getWidth`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getWidth:()I` @kind virtual;
  #L15a35a.  v0:= temp;
  #L15a35c.  return v0;
}
procedure `int` `hashCode`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a370.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a374.  call temp:= `hashCode`(v0) @signature `Ljava/lang/reflect/Field;.hashCode:()I` @kind virtual;
  #L15a37a.  v0:= temp;
  #L15a37c.  return v0;
}
procedure `boolean` `isAllowGeneratedIdInsert`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isAllowGeneratedIdInsert:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a390.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a394.  call temp:= `isAllowGeneratedIdInsert`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isAllowGeneratedIdInsert:()Z` @kind virtual;
  #L15a39a.  v0:= temp;
  #L15a39c.  return v0;
}
procedure `boolean` `isArgumentHolderRequired`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isArgumentHolderRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a3b0.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15a3b4.  call temp:= `isArgumentHolderRequired`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isArgumentHolderRequired:()Z` @kind interface;
  #L15a3ba.  v0:= temp;
  #L15a3bc.  return v0;
}
procedure `boolean` `isCanBeNull`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isCanBeNull:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a3d0.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a3d4.  call temp:= `isCanBeNull`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isCanBeNull:()Z` @kind virtual;
  #L15a3da.  v0:= temp;
  #L15a3dc.  return v0;
}
procedure `boolean` `isComparable`(`com.j256.ormlite.field.FieldType` v3 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isComparable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15a3f0.  v0:= v3.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a3f4.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L15a3fa.  v0:= temp;
  #L15a3fc.  if v0 == 0 then goto L15a404;
  #L15a400.  v0:= 0I;
  #L15a402.  return v0;
  #L15a404.  v0:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15a408.  if v0 != 0 then goto L15a43e;
  #L15a40c.  v0:= new `java.sql.SQLException`;
  #L15a410.  v1:= new `java.lang.StringBuilder`;
  #L15a414.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15a41a.  v2:= "Internal error.  Data-persister is not configured for field.  Please post _full_ exception with associated data objects to mailing list: " @kind object;
  #L15a41e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a424.  v1:= temp @kind object;
  #L15a426.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a42c.  v1:= temp @kind object;
  #L15a42e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15a434.  v1:= temp @kind object;
  #L15a436.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15a43c.  throw v0;
  #L15a43e.  v0:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15a442.  call temp:= `isComparable`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isComparable:()Z` @kind interface;
  #L15a448.  v0:= temp;
  #L15a44a.  goto L15a402;
}
procedure `boolean` `isEscapedDefaultValue`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedDefaultValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a45c.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15a460.  call temp:= `isEscapedDefaultValue`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isEscapedDefaultValue:()Z` @kind interface;
  #L15a466.  v0:= temp;
  #L15a468.  return v0;
}
procedure `boolean` `isEscapedValue`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a47c.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15a480.  call temp:= `isEscapedValue`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isEscapedValue:()Z` @kind interface;
  #L15a486.  v0:= temp;
  #L15a488.  return v0;
}
procedure `boolean` `isForeign`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a49c.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a4a0.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L15a4a6.  v0:= temp;
  #L15a4a8.  return v0;
}
procedure `boolean` `isForeignAutoCreate`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignAutoCreate:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a4bc.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a4c0.  call temp:= `isForeignAutoCreate`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoCreate:()Z` @kind virtual;
  #L15a4c6.  v0:= temp;
  #L15a4c8.  return v0;
}
procedure `boolean` `isForeignCollection`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a4dc.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a4e0.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L15a4e6.  v0:= temp;
  #L15a4e8.  return v0;
}
procedure `boolean` `isGeneratedId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a4fc.  v0:= v1.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` @kind boolean;
  #L15a500.  return v0;
}
procedure `boolean` `isGeneratedIdSequence`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedIdSequence:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a514.  v0:= v1.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` @kind object;
  #L15a518.  if v0 == 0 then goto L15a520;
  #L15a51c.  v0:= 1I;
  #L15a51e.  return v0;
  #L15a520.  v0:= 0I;
  #L15a522.  goto L15a51e;
}
procedure `boolean` `isId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a534.  v0:= v1.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` @kind boolean;
  #L15a538.  return v0;
}
procedure `boolean` `isObjectsFieldValueDefault`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.isObjectsFieldValueDefault:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a54c.  call temp:= `extractJavaFieldValue`(v1, v2) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15a552.  v0:= temp @kind object;
  #L15a554.  call temp:= `isFieldValueDefault`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.isFieldValueDefault:(Ljava/lang/Object;)Z` @kind direct;
  #L15a55a.  v0:= temp;
  #L15a55c.  return v0;
}
procedure `boolean` `isReadOnly`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isReadOnly:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a570.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a574.  call temp:= `isReadOnly`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isReadOnly:()Z` @kind virtual;
  #L15a57a.  v0:= temp;
  #L15a57c.  return v0;
}
procedure `boolean` `isSelfGeneratedId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a590.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15a594.  call temp:= `isSelfGeneratedId`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isSelfGeneratedId:()Z` @kind interface;
  #L15a59a.  v0:= temp;
  #L15a59c.  return v0;
}
procedure `boolean` `isUnique`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isUnique:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a5b0.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a5b4.  call temp:= `isUnique`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isUnique:()Z` @kind virtual;
  #L15a5ba.  v0:= temp;
  #L15a5bc.  return v0;
}
procedure `boolean` `isUniqueCombo`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isUniqueCombo:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a5d0.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a5d4.  call temp:= `isUniqueCombo`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isUniqueCombo:()Z` @kind virtual;
  #L15a5da.  v0:= temp;
  #L15a5dc.  return v0;
}
procedure `boolean` `isVersion`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a5f0.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a5f4.  call temp:= `isVersion`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isVersion:()Z` @kind virtual;
  #L15a5fa.  v0:= temp;
  #L15a5fc.  return v0;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a610.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15a614.  if v0 != 0 then goto L15a61c;
  #L15a618.  v0:= 0I;
  #L15a61a.  return v0 @kind object;
  #L15a61c.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15a620.  call temp:= `moveToNextValue`(v0, v2) @signature `Lcom/j256/ormlite/field/DataPersister;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15a626.  v0:= temp @kind object;
  #L15a628.  goto L15a61a;
}
procedure `java.lang.Object` `resultToJava`(`com.j256.ormlite.field.FieldType` v4 @kind this, `com.j256.ormlite.support.DatabaseResults` v5 @kind object, `java.util.Map` v6 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.resultToJava:(Lcom/j256/ormlite/support/DatabaseResults;Ljava/util/Map;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15a63c.  v1:= 0I;
  #L15a63e.  v0:= v4.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L15a642.  call temp:= `get`(v6, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15a648.  v0:= temp @kind object;
  #L15a64a.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L15a64e.  if v0 != 0 then goto L15a670;
  #L15a652.  v0:= v4.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L15a656.  call temp:= `findColumn`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.findColumn:(Ljava/lang/String;)I` @kind interface;
  #L15a65c.  v0:= temp;
  #L15a65e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15a664.  v0:= temp @kind object;
  #L15a666.  v2:= v4.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L15a66a.  call temp:= `put`(v6, v2, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15a670.  v2:= v4.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L15a674.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L15a67a.  v3:= temp;
  #L15a67c.  call temp:= `resultToJava`(v2, v4, v5, v3) @signature `Lcom/j256/ormlite/field/FieldConverter;.resultToJava:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @kind interface;
  #L15a682.  v2:= temp @kind object;
  #L15a684.  v3:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a688.  call temp:= `isForeign`(v3) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L15a68e.  v3:= temp;
  #L15a690.  if v3 == 0 then goto L15a6ac;
  #L15a694.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L15a69a.  v0:= temp;
  #L15a69c.  call temp:= `wasNull`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.wasNull:(I)Z` @kind interface;
  #L15a6a2.  v0:= temp;
  #L15a6a4.  if v0 == 0 then goto L15a752;
  #L15a6a8.  v0:= v1 @kind object;
  #L15a6aa.  return v0 @kind object;
  #L15a6ac.  v3:= v4.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15a6b0.  call temp:= `isPrimitive`(v3) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L15a6b6.  v3:= temp;
  #L15a6b8.  if v3 == 0 then goto L15a72a;
  #L15a6bc.  v1:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15a6c0.  call temp:= `isThrowIfNull`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isThrowIfNull:()Z` @kind virtual;
  #L15a6c6.  v1:= temp;
  #L15a6c8.  if v1 == 0 then goto L15a752;
  #L15a6cc.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L15a6d2.  v0:= temp;
  #L15a6d4.  call temp:= `wasNull`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.wasNull:(I)Z` @kind interface;
  #L15a6da.  v0:= temp;
  #L15a6dc.  if v0 == 0 then goto L15a752;
  #L15a6e0.  v0:= new `java.sql.SQLException`;
  #L15a6e4.  v1:= new `java.lang.StringBuilder`;
  #L15a6e8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15a6ee.  v2:= "Results value for primitive field '" @kind object;
  #L15a6f2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a6f8.  v1:= temp @kind object;
  #L15a6fa.  v2:= v4.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a6fe.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15a704.  v2:= temp @kind object;
  #L15a706.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a70c.  v1:= temp @kind object;
  #L15a70e.  v2:= "' was an invalid null value" @kind object;
  #L15a712.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a718.  v1:= temp @kind object;
  #L15a71a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15a720.  v1:= temp @kind object;
  #L15a722.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15a728.  throw v0;
  #L15a72a.  v3:= v4.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L15a72e.  call temp:= `isStreamType`(v3) @signature `Lcom/j256/ormlite/field/FieldConverter;.isStreamType:()Z` @kind interface;
  #L15a734.  v3:= temp;
  #L15a736.  if v3 != 0 then goto L15a752;
  #L15a73a.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L15a740.  v0:= temp;
  #L15a742.  call temp:= `wasNull`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.wasNull:(I)Z` @kind interface;
  #L15a748.  v0:= temp;
  #L15a74a.  if v0 == 0 then goto L15a752;
  #L15a74e.  v0:= v1 @kind object;
  #L15a750.  goto L15a6aa;
  #L15a752.  v0:= v2 @kind object;
  #L15a754.  goto L15a6aa;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15a768.  v0:= new `java.lang.StringBuilder`;
  #L15a76c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15a772.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15a778.  v1:= temp @kind object;
  #L15a77a.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L15a780.  v1:= temp @kind object;
  #L15a782.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a788.  v0:= temp @kind object;
  #L15a78a.  v1:= ":name=" @kind object;
  #L15a78e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a794.  v0:= temp @kind object;
  #L15a796.  v1:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a79a.  call temp:= `getName`(v1) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15a7a0.  v1:= temp @kind object;
  #L15a7a2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a7a8.  v0:= temp @kind object;
  #L15a7aa.  v1:= ",class=" @kind object;
  #L15a7ae.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a7b4.  v0:= temp @kind object;
  #L15a7b6.  v1:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15a7ba.  call temp:= `getDeclaringClass`(v1) @signature `Ljava/lang/reflect/Field;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L15a7c0.  v1:= temp @kind object;
  #L15a7c2.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L15a7c8.  v1:= temp @kind object;
  #L15a7ca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a7d0.  v0:= temp @kind object;
  #L15a7d2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15a7d8.  v0:= temp @kind object;
  #L15a7da.  return v0 @kind object;
}
