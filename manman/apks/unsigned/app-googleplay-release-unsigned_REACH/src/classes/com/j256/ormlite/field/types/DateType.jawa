record `com.j256.ormlite.field.types.DateType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDateType` @kind class {
}
global `com.j256.ormlite.field.types.DateType` `@@com.j256.ormlite.field.types.DateType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/DateType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15c704.  v0:= new `com.j256.ormlite.field.types.DateType`;
  #L15c708.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/DateType;.<init>:()V` @kind direct;
  #L15c70e.  `@@com.j256.ormlite.field.types.DateType.singleTon` @type ^`com.j256.ormlite.field.types.DateType` := v0 @kind object;
  #L15c712.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/DateType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c724.  v0:= `@@com.j256.ormlite.field.SqlType.DATE` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15c728.  v1:= 1I;
  #L15c72a.  v1:= new `java.lang.Class`[v1];
  #L15c72e.  v2:= 0I;
  #L15c730.  v3:= constclass @type ^`java.util.Date` @kind object;
  #L15c734.  v1[v2]:= v3 @kind object;
  #L15c738.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15c73e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/DateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15c750.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15c756.  return @kind void;
}
procedure `com.j256.ormlite.field.types.DateType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/DateType;.getSingleton:()Lcom/j256/ormlite/field/types/DateType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15c768.  v0:= `@@com.j256.ormlite.field.types.DateType.singleTon` @type ^`com.j256.ormlite.field.types.DateType` @kind object;
  #L15c76c.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` `getDefaultDateFormatConfig`(`com.j256.ormlite.field.types.DateType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateType;.getDefaultDateFormatConfig:()Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15c780.  v0:= `@@com.j256.ormlite.field.types.DateType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L15c784.  return v0 @kind object;
}
procedure `boolean` `isArgumentHolderRequired`(`com.j256.ormlite.field.types.DateType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateType;.isArgumentHolderRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c798.  v0:= 1I;
  #L15c79a.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.DateType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/DateType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c7ac.  v6:= (`java.util.Date`) v6 @kind object;
  #L15c7b0.  v0:= new `java.sql.Timestamp`;
  #L15c7b4.  call temp:= `getTime`(v6) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L15c7ba.  v2:= temp @kind wide;
  #L15c7bc.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L15c7c2.  return v0 @kind object;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.DateType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/DateType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c7d4.  call temp:= `getDefaultDateFormatConfig`(v4) @signature `Lcom/j256/ormlite/field/types/DateType;.getDefaultDateFormatConfig:()Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind virtual;
  #L15c7da.  v0:= temp @kind object;
  #L15c7dc.  call temp:= `convertDateStringConfig`(v5, v0) @signature `Lcom/j256/ormlite/field/types/DateType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind static;
  #L15c7e2.  v1:= temp @kind object;
  #Try_start0.  
  #L15c7e4.  v0:= new `java.sql.Timestamp`;
  #L15c7e8.  call temp:= `parseDateString`(v1, v6) @signature `Lcom/j256/ormlite/field/types/DateType;.parseDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L15c7ee.  v2:= temp @kind object;
  #L15c7f0.  call temp:= `getTime`(v2) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L15c7f6.  v2:= temp @kind wide;
  #L15c7f8.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #Try_end0.  
  #L15c7fe.  return v0 @kind object;
  #L15c800.  v0:= Exception @type ^`java.text.ParseException` @kind object;
  #L15c802.  v2:= new `java.lang.StringBuilder`;
  #L15c806.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15c80c.  v3:= "Problems parsing default date string '" @kind object;
  #L15c810.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c816.  v2:= temp @kind object;
  #L15c818.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c81e.  v2:= temp @kind object;
  #L15c820.  v3:= "' using '" @kind object;
  #L15c824.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c82a.  v2:= temp @kind object;
  #L15c82c.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c832.  v1:= temp @kind object;
  #L15c834.  v2:= 39I;
  #L15c838.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c83e.  v1:= temp @kind object;
  #L15c840.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15c846.  v1:= temp @kind object;
  #L15c848.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15c84e.  v0:= temp @kind object;
  #L15c850.  throw v0;
  catch `java.text.ParseException` @[Try_start0..Try_end0] goto L15c800;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.DateType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/DateType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15c874.  call temp:= `getTimestamp`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getTimestamp:(I)Ljava/sql/Timestamp;` @kind interface;
  #L15c87a.  v0:= temp @kind object;
  #L15c87c.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.DateType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/DateType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c890.  v6:= (`java.sql.Timestamp`) v6 @kind object;
  #L15c894.  v0:= new `java.util.Date`;
  #L15c898.  call temp:= `getTime`(v6) @signature `Ljava/sql/Timestamp;.getTime:()J` @kind virtual;
  #L15c89e.  v2:= temp @kind wide;
  #L15c8a0.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L15c8a6.  return v0 @kind object;
}
