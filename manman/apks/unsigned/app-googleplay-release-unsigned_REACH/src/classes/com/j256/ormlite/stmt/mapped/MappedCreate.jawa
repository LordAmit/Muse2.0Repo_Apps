record `com.j256.ormlite.stmt.mapped.MappedCreate` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.mapped.BaseMappedStatement` @kind class {
  `java.lang.String` `com.j256.ormlite.stmt.mapped.MappedCreate.dataClassName` @AccessFlag PRIVATE;
  `java.lang.String` `com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt` @AccessFlag PRIVATE_FINAL;
  `int` `com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.mapped.MappedCreate` v1 @kind this, `com.j256.ormlite.table.TableInfo` v2 @kind object, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType`[] v4 @kind object, `java.lang.String` v5 @kind object, `int` v6 ) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L1662c4.  call `<init>`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L1662ca.  call temp:= `getDataClass`(v2) @signature `Lcom/j256/ormlite/table/TableInfo;.getDataClass:()Ljava/lang/Class;` @kind virtual;
  #L1662d0.  v0:= temp @kind object;
  #L1662d2.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1662d8.  v0:= temp @kind object;
  #L1662da.  v1.`com.j256.ormlite.stmt.mapped.MappedCreate.dataClassName` @type ^`java.lang.String` := v0 @kind object;
  #L1662de.  v1.`com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt` @type ^`java.lang.String` := v5 @kind object;
  #L1662e2.  v1.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int` := v6;
  #L1662e6.  return @kind void;
}
procedure `void` `assignIdValue`(`com.j256.ormlite.stmt.mapped.MappedCreate` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Number` v7 @kind object, `java.lang.String` v8 @kind object, `com.j256.ormlite.dao.ObjectCache` v9 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Ljava/lang/String;Lcom/j256/ormlite/dao/ObjectCache;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1662f8.  v0:= v5.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1662fc.  call temp:= `assignIdValue`(v0, v6, v7, v9) @signature `Lcom/j256/ormlite/field/FieldType;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind virtual;
  #L166302.  v0:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L166306.  v1:= `@@com.j256.ormlite.logger.Log$Level.DEBUG` @type ^`com.j256.ormlite.logger.Log$Level` @kind object;
  #L16630a.  call temp:= `isLevelEnabled`(v0, v1) @signature `Lcom/j256/ormlite/logger/Logger;.isLevelEnabled:(Lcom/j256/ormlite/logger/Log$Level;)Z` @kind virtual;
  #L166310.  v0:= temp;
  #L166312.  if v0 == 0 then goto L166352;
  #L166316.  v0:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16631a.  v1:= "assigned id '{}' from {} to '{}' in {} object" @kind object;
  #L16631e.  v2:= 4I;
  #L166320.  v2:= new `java.lang.Object`[v2];
  #L166324.  v3:= 0I;
  #L166326.  v2[v3]:= v7 @kind object;
  #L16632a.  v3:= 1I;
  #L16632c.  v2[v3]:= v8 @kind object;
  #L166330.  v3:= 2I;
  #L166332.  v4:= v5.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L166336.  call temp:= `getFieldName`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldName:()Ljava/lang/String;` @kind virtual;
  #L16633c.  v4:= temp @kind object;
  #L16633e.  v2[v3]:= v4 @kind object;
  #L166342.  v3:= 3I;
  #L166344.  v4:= v5.`com.j256.ormlite.stmt.mapped.MappedCreate.dataClassName` @type ^`java.lang.String` @kind object;
  #L166348.  v2[v3]:= v4 @kind object;
  #L16634c.  call `debug`(v0, v1, v2) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L166352.  return @kind void;
}
procedure `void` `assignSequenceId`(`com.j256.ormlite.stmt.mapped.MappedCreate` v6 @kind this, `com.j256.ormlite.support.DatabaseConnection` v7 @kind object, `java.lang.Object` v8 @kind object, `com.j256.ormlite.dao.ObjectCache` v9 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.assignSequenceId:(Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L166364.  v0:= v6.`com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt` @type ^`java.lang.String` @kind object;
  #L166368.  call temp:= `queryForLong`(v7, v0) @signature `Lcom/j256/ormlite/support/DatabaseConnection;.queryForLong:(Ljava/lang/String;)J` @kind interface;
  #L16636e.  v0:= temp @kind wide;
  #L166370.  v2:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L166374.  v3:= "queried for sequence {} using stmt: {}" @kind object;
  #L166378.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L16637e.  v4:= temp @kind object;
  #L166380.  v5:= v6.`com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt` @type ^`java.lang.String` @kind object;
  #L166384.  call `debug`(v2, v3, v4, v5) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L16638a.  v2:= 0L;
  #L16638e.  v2:= lcmp(v0, v2);
  #L166392.  if v2 != 0 then goto L1663cc;
  #L166396.  v0:= new `java.sql.SQLException`;
  #L16639a.  v1:= new `java.lang.StringBuilder`;
  #L16639e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1663a4.  v2:= "Should not have returned 0 for stmt: " @kind object;
  #L1663a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1663ae.  v1:= temp @kind object;
  #L1663b0.  v2:= v6.`com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt` @type ^`java.lang.String` @kind object;
  #L1663b4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1663ba.  v1:= temp @kind object;
  #L1663bc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1663c2.  v1:= temp @kind object;
  #L1663c4.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1663ca.  throw v0;
  #L1663cc.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1663d2.  v0:= temp @kind object;
  #L1663d4.  v1:= "sequence" @kind object;
  #L1663d8.  call `assignIdValue`(v6, v8, v0, v1, v9) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Ljava/lang/String;Lcom/j256/ormlite/dao/ObjectCache;)V` @kind direct;
  #L1663de.  return @kind void;
}
procedure `com.j256.ormlite.stmt.mapped.MappedCreate` `build`(`com.j256.ormlite.db.DatabaseType` v13 @kind object, `com.j256.ormlite.table.TableInfo` v14 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.build:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;)Lcom/j256/ormlite/stmt/mapped/MappedCreate;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L1663f0.  v12:= 44I;
  #L1663f4.  v6:= 1I;
  #L1663f6.  v1:= 0I;
  #L1663f8.  v8:= new `java.lang.StringBuilder`;
  #L1663fc.  v0:= 128I;
  #L166400.  call `<init>`(v8, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L166406.  v0:= "INSERT INTO " @kind object;
  #L16640a.  call temp:= `getTableName`(v14) @signature `Lcom/j256/ormlite/table/TableInfo;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L166410.  v2:= temp @kind object;
  #L166412.  call `appendTableName`(v13, v8, v0, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.appendTableName:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L166418.  v5:= -1I;
  #L16641a.  call temp:= `getFieldTypes`(v14) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L166420.  v3:= temp @kind object;
  #L166422.  v4:= length @variable v3;
  #L166424.  v2:= v1;
  #L166426.  v0:= v1;
  #L166428.  if v2 >= v4 then goto L166454;
  #L16642c.  v7:= v3[v2] @kind object;
  #L166430.  call temp:= `isFieldCreatable`(v13, v7) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.isFieldCreatable:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Z` @kind static;
  #L166436.  v9:= temp;
  #L166438.  if v9 == 0 then goto L16644e;
  #L16643c.  call temp:= `isVersion`(v7) @signature `Lcom/j256/ormlite/field/FieldType;.isVersion:()Z` @kind virtual;
  #L166442.  v7:= temp;
  #L166444.  if v7 == 0 then goto L16644a;
  #L166448.  v5:= v0;
  #L16644a.  v0:= v0 + 1;
  #L16644e.  v2:= v2 + 1;
  #L166452.  goto L166428;
  #L166454.  v3:= new `com.j256.ormlite.field.FieldType`[v0];
  #L166458.  if v0 != 0 then goto L166488;
  #L16645c.  call `appendInsertNoColumns`(v13, v8) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendInsertNoColumns:(Ljava/lang/StringBuilder;)V` @kind interface;
  #L166462.  call temp:= `getIdField`(v14) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L166468.  v0:= temp @kind object;
  #L16646a.  call temp:= `buildQueryNextSequence`(v13, v0) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.buildQueryNextSequence:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind static;
  #L166470.  v4:= temp @kind object;
  #L166472.  v0:= new `com.j256.ormlite.stmt.mapped.MappedCreate`;
  #L166476.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16647c.  v2:= temp @kind object;
  #L16647e.  v1:= v14 @kind object;
  #L166480.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)V` @kind direct;
  #L166486.  return v0 @kind object;
  #L166488.  v0:= 40I;
  #L16648c.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L166492.  call temp:= `getFieldTypes`(v14) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L166498.  v9:= temp @kind object;
  #L16649a.  v10:= length @variable v9;
  #L16649c.  v7:= v1;
  #L16649e.  v0:= v6;
  #L1664a0.  v2:= v1;
  #L1664a2.  if v7 >= v10 then goto L1664e0;
  #L1664a6.  v11:= v9[v7] @kind object;
  #L1664aa.  call temp:= `isFieldCreatable`(v13, v11) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.isFieldCreatable:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Z` @kind static;
  #L1664b0.  v4:= temp;
  #L1664b2.  if v4 != 0 then goto L1664be;
  #L1664b6.  v4:= v7 + 1;
  #L1664ba.  v7:= v4;
  #L1664bc.  goto L1664a2;
  #L1664be.  if v0 == 0 then goto L1664d8;
  #L1664c2.  v0:= v1;
  #L1664c4.  v4:= 0I;
  #L1664c6.  call `appendFieldColumnName`(v13, v8, v11, v4) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.appendFieldColumnName:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;)V` @kind static;
  #L1664cc.  v4:= v2 + 1;
  #L1664d0.  v3[v2]:= v11 @kind object;
  #L1664d4.  v2:= v4;
  #L1664d6.  goto L1664b6;
  #L1664d8.  call temp:= `append`(v8, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1664de.  goto L1664c4;
  #L1664e0.  v0:= ") VALUES (" @kind object;
  #L1664e4.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1664ea.  call temp:= `getFieldTypes`(v14) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L1664f0.  v4:= temp @kind object;
  #L1664f2.  v7:= length @variable v4;
  #L1664f4.  v2:= v1;
  #L1664f6.  v0:= v6;
  #L1664f8.  if v2 >= v7 then goto L16652c;
  #L1664fc.  v6:= v4[v2] @kind object;
  #L166500.  call temp:= `isFieldCreatable`(v13, v6) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.isFieldCreatable:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Z` @kind static;
  #L166506.  v6:= temp;
  #L166508.  if v6 != 0 then goto L166512;
  #L16650c.  v2:= v2 + 1;
  #L166510.  goto L1664f8;
  #L166512.  if v0 == 0 then goto L166524;
  #L166516.  v0:= v1;
  #L166518.  v6:= 63I;
  #L16651c.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L166522.  goto L16650c;
  #L166524.  call temp:= `append`(v8, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16652a.  goto L166518;
  #L16652c.  v0:= 41I;
  #L166530.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L166536.  goto L166462;
}
procedure `java.lang.String` `buildQueryNextSequence`(`com.j256.ormlite.db.DatabaseType` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.buildQueryNextSequence:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L166548.  v0:= 0I;
  #L16654a.  if v4 != 0 then goto L166550;
  #L16654e.  return v0 @kind object;
  #L166550.  call temp:= `getGeneratedIdSequence`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L166556.  v1:= temp @kind object;
  #L166558.  if v1 == 0 then goto L16654e;
  #L16655c.  v0:= new `java.lang.StringBuilder`;
  #L166560.  v2:= 64I;
  #L166564.  call `<init>`(v0, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L16656a.  call `appendSelectNextValFromSequence`(v3, v0, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendSelectNextValFromSequence:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L166570.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L166576.  v0:= temp @kind object;
  #L166578.  goto L16654e;
}
procedure `boolean` `foreignCollectionsAreAssigned`(`com.j256.ormlite.stmt.mapped.MappedCreate` v4 @kind this, `com.j256.ormlite.field.FieldType`[] v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.foreignCollectionsAreAssigned:([Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16658c.  v0:= 0I;
  #L16658e.  v2:= length @variable v5;
  #L166590.  v1:= v0;
  #L166592.  if v1 >= v2 then goto L1665ae;
  #L166596.  v3:= v5[v1] @kind object;
  #L16659a.  call temp:= `extractJavaFieldValue`(v3, v6) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1665a0.  v3:= temp @kind object;
  #L1665a2.  if v3 != 0 then goto L1665a8;
  #L1665a6.  return v0;
  #L1665a8.  v1:= v1 + 1;
  #L1665ac.  goto L166592;
  #L1665ae.  v0:= 1I;
  #L1665b0.  goto L1665a6;
}
procedure `boolean` `isFieldCreatable`(`com.j256.ormlite.db.DatabaseType` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.isFieldCreatable:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L1665c4.  v1:= 1I;
  #L1665c6.  v0:= 0I;
  #L1665c8.  call temp:= `isForeignCollection`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L1665ce.  v2:= temp;
  #L1665d0.  if v2 == 0 then goto L1665d6;
  #L1665d4.  return v0;
  #L1665d6.  call temp:= `isReadOnly`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isReadOnly:()Z` @kind virtual;
  #L1665dc.  v2:= temp;
  #L1665de.  if v2 != 0 then goto L1665d4;
  #L1665e2.  call temp:= `isIdSequenceNeeded`(v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.isIdSequenceNeeded:()Z` @kind interface;
  #L1665e8.  v2:= temp;
  #L1665ea.  if v2 == 0 then goto L1665fe;
  #L1665ee.  call temp:= `isSelectSequenceBeforeInsert`(v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.isSelectSequenceBeforeInsert:()Z` @kind interface;
  #L1665f4.  v2:= temp;
  #L1665f6.  if v2 == 0 then goto L1665fe;
  #L1665fa.  v0:= v1;
  #L1665fc.  goto L1665d4;
  #L1665fe.  call temp:= `isGeneratedId`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L166604.  v2:= temp;
  #L166606.  if v2 == 0 then goto L166622;
  #L16660a.  call temp:= `isSelfGeneratedId`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L166610.  v2:= temp;
  #L166612.  if v2 != 0 then goto L166622;
  #L166616.  call temp:= `isAllowGeneratedIdInsert`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isAllowGeneratedIdInsert:()Z` @kind virtual;
  #L16661c.  v2:= temp;
  #L16661e.  if v2 == 0 then goto L1665d4;
  #L166622.  v0:= v1;
  #L166624.  goto L1665d4;
}
procedure `int` `insert`(`com.j256.ormlite.stmt.mapped.MappedCreate` v9 @kind this, `com.j256.ormlite.db.DatabaseType` v10 @kind object, `com.j256.ormlite.support.DatabaseConnection` v11 @kind object, `java.lang.Object` v12 @kind object, `com.j256.ormlite.dao.ObjectCache` v13 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.insert:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L166638.  v1:= 0I;
  #L16663a.  v2:= 0I;
  #L16663c.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L166640.  if v0 == 0 then goto L166900;
  #L166644.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L166648.  call temp:= `isAllowGeneratedIdInsert`(v0) @signature `Lcom/j256/ormlite/field/FieldType;.isAllowGeneratedIdInsert:()Z` @kind virtual;
  #L16664e.  v0:= temp;
  #L166650.  if v0 == 0 then goto L1666da;
  #L166654.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L166658.  call temp:= `isObjectsFieldValueDefault`(v0, v12) @signature `Lcom/j256/ormlite/field/FieldType;.isObjectsFieldValueDefault:(Ljava/lang/Object;)Z` @kind virtual;
  #L16665e.  v0:= temp;
  #L166660.  if v0 != 0 then goto L1666da;
  #L166664.  v0:= v1;
  #L166666.  v3:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16666a.  call temp:= `isSelfGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L166670.  v3:= temp;
  #L166672.  if v3 == 0 then goto L1666de;
  #L166676.  v3:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16667a.  call temp:= `isGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L166680.  v3:= temp;
  #L166682.  if v3 == 0 then goto L1666de;
  #L166686.  if v0 == 0 then goto L166900;
  #L16668a.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16668e.  v3:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L166692.  call temp:= `generateId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.generateId:()Ljava/lang/Object;` @kind virtual;
  #L166698.  v3:= temp @kind object;
  #L16669a.  call `assignField`(v0, v12, v3, v1, v13) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L1666a0.  v3:= v2 @kind object;
  #Try_start0.  
  #L1666a2.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L1666a6.  call temp:= `isForeignAutoCreate`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.isForeignAutoCreate:()Z` @kind virtual;
  #L1666ac.  v0:= temp;
  #L1666ae.  if v0 == 0 then goto L16679c;
  #L1666b2.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L1666b6.  call temp:= `getFieldTypes`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L1666bc.  v0:= temp @kind object;
  #L1666be.  v4:= length @variable v0;
  #L1666c0.  if v1 >= v4 then goto L16679c;
  #L1666c4.  v5:= v0[v1] @kind object;
  #L1666c8.  call temp:= `isForeignAutoCreate`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignAutoCreate:()Z` @kind virtual;
  #Try_end0.  
  #L1666ce.  v6:= temp;
  #L1666d0.  if v6 != 0 then goto L16672a;
  #L1666d4.  v1:= v1 + 1;
  #L1666d8.  goto L1666c0;
  #L1666da.  v0:= 1I;
  #L1666dc.  goto L166666;
  #L1666de.  v3:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1666e2.  call temp:= `isGeneratedIdSequence`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedIdSequence:()Z` @kind virtual;
  #L1666e8.  v3:= temp;
  #L1666ea.  if v3 == 0 then goto L166708;
  #L1666ee.  call temp:= `isSelectSequenceBeforeInsert`(v10) @signature `Lcom/j256/ormlite/db/DatabaseType;.isSelectSequenceBeforeInsert:()Z` @kind interface;
  #L1666f4.  v3:= temp;
  #L1666f6.  if v3 == 0 then goto L166708;
  #L1666fa.  if v0 == 0 then goto L166900;
  #L1666fe.  call `assignSequenceId`(v9, v11, v12, v13) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.assignSequenceId:(Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)V` @kind direct;
  #L166704.  v3:= v2 @kind object;
  #L166706.  goto L1666a2;
  #L166708.  v3:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16670c.  call temp:= `isGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L166712.  v3:= temp;
  #L166714.  if v3 == 0 then goto L166900;
  #L166718.  if v0 == 0 then goto L166900;
  #L16671c.  v0:= new `com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder`;
  #L166720.  call `<init>`(v0, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate$KeyHolder;.<init>:(Lcom/j256/ormlite/stmt/mapped/MappedCreate$1;)V` @kind direct;
  #L166726.  v3:= v0 @kind object;
  #L166728.  goto L1666a2;
  #Try_start1.  
  #L16672a.  call temp:= `extractRawJavaFieldValue`(v5, v12) @signature `Lcom/j256/ormlite/field/FieldType;.extractRawJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L166730.  v6:= temp @kind object;
  #L166732.  if v6 == 0 then goto L1666d4;
  #L166736.  call temp:= `getForeignIdField`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16673c.  v7:= temp @kind object;
  #L16673e.  call temp:= `isObjectsFieldValueDefault`(v7, v6) @signature `Lcom/j256/ormlite/field/FieldType;.isObjectsFieldValueDefault:(Ljava/lang/Object;)Z` @kind virtual;
  #L166744.  v7:= temp;
  #L166746.  if v7 == 0 then goto L1666d4;
  #L16674a.  call temp:= `createWithForeignDao`(v5, v6) @signature `Lcom/j256/ormlite/field/FieldType;.createWithForeignDao:(Ljava/lang/Object;)I` @kind virtual;
  #Try_end1.  
  #L166750.  goto L1666d4;
  #L166752.  v0:= Exception @type ^`java.sql.SQLException` @kind object;
  #L166754.  v1:= new `java.lang.StringBuilder`;
  #L166758.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16675e.  v2:= "Unable to run insert stmt on object " @kind object;
  #L166762.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166768.  v1:= temp @kind object;
  #L16676a.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166770.  v1:= temp @kind object;
  #L166772.  v2:= ": " @kind object;
  #L166776.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16677c.  v1:= temp @kind object;
  #L16677e.  v2:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.statement` @type ^`java.lang.String` @kind object;
  #L166782.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166788.  v1:= temp @kind object;
  #L16678a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L166790.  v1:= temp @kind object;
  #L166792.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L166798.  v0:= temp @kind object;
  #L16679a.  throw v0;
  #Try_start2.  
  #L16679c.  call temp:= `getFieldObjects`(v9, v12) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.getFieldObjects:(Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L1667a2.  v1:= temp @kind object;
  #L1667a4.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int`;
  #L1667a8.  if v0 < 0 then goto L1668fa;
  #L1667ac.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int`;
  #L1667b0.  v0:= v1[v0] @kind object;
  #L1667b4.  if v0 != 0 then goto L1668fa;
  #L1667b8.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L1667bc.  v2:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int`;
  #L1667c0.  v2:= v0[v2] @kind object;
  #L1667c4.  v0:= 0I;
  #L1667c6.  call temp:= `moveToNextValue`(v2, v0) @signature `Lcom/j256/ormlite/field/FieldType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1667cc.  v0:= temp @kind object;
  #L1667ce.  v4:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int`;
  #L1667d2.  call temp:= `convertJavaFieldToSqlArgValue`(v2, v0) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1667d8.  v2:= temp @kind object;
  #L1667da.  v1[v4]:= v2 @kind object;
  #Try_end2.  
  #Try_start3.  
  #L1667de.  v2:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.statement` @type ^`java.lang.String` @kind object;
  #L1667e2.  v4:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L1667e6.  call temp:= `insert`(v11, v2, v1, v4, v3) @signature `Lcom/j256/ormlite/support/DatabaseConnection;.insert:(Ljava/lang/String;[Ljava/lang/Object;[Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/GeneratedKeyHolder;)I` @kind interface;
  #Try_end3.  
  #L1667ec.  v2:= temp;
  #Try_start4.  
  #L1667ee.  v4:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L1667f2.  v5:= "insert data with statement '{}' and {} args, changed {} rows" @kind object;
  #L1667f6.  v6:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.statement` @type ^`java.lang.String` @kind object;
  #L1667fa.  v7:= length @variable v1;
  #L1667fc.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L166802.  v7:= temp @kind object;
  #L166804.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L16680a.  v8:= temp @kind object;
  #L16680c.  call `debug`(v4, v5, v6, v7, v8) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L166812.  v4:= length @variable v1;
  #L166814.  if v4 <= 0 then goto L166826;
  #L166818.  v4:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16681c.  v5:= "insert arguments: {}" @kind object;
  #L166820.  call `trace`(v4, v5, v1) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L166826.  if v2 <= 0 then goto L1668f8;
  #L16682a.  if v0 == 0 then goto L166844;
  #L16682e.  v1:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L166832.  v4:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int`;
  #L166836.  v1:= v1[v4] @kind object;
  #L16683a.  v4:= 0I;
  #L16683c.  v5:= 0I;
  #L16683e.  call `assignField`(v1, v12, v0, v4, v5) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L166844.  if v3 == 0 then goto L1668c6;
  #L166848.  call temp:= `getKey`(v3) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate$KeyHolder;.getKey:()Ljava/lang/Number;` @kind virtual;
  #L16684e.  v0:= temp @kind object;
  #L166850.  if v0 != 0 then goto L166898;
  #L166854.  v0:= new `java.sql.SQLException`;
  #L166858.  v1:= "generated-id key was not set by the update call, maybe a schema mismatch between entity and database table?" @kind object;
  #L16685c.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L166862.  throw v0;
  #L166864.  v0:= Exception @type ^`java.sql.SQLException` @kind object;
  #L166866.  v2:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16686a.  v3:= "insert data with statement '{}' and {} args, threw exception: {}" @kind object;
  #L16686e.  v4:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.statement` @type ^`java.lang.String` @kind object;
  #L166872.  v5:= length @variable v1;
  #L166874.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L16687a.  v5:= temp @kind object;
  #L16687c.  call `debug`(v2, v3, v4, v5, v0) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L166882.  v2:= length @variable v1;
  #L166884.  if v2 <= 0 then goto L166896;
  #L166888.  v2:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16688c.  v3:= "insert arguments: {}" @kind object;
  #L166890.  call `trace`(v2, v3, v1) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L166896.  throw v0;
  #L166898.  call temp:= `longValue`(v0) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L16689e.  v4:= temp @kind wide;
  #L1668a0.  v6:= 0L;
  #L1668a4.  v1:= lcmp(v4, v6);
  #L1668a8.  if v1 != 0 then goto L1668bc;
  #L1668ac.  v0:= new `java.sql.SQLException`;
  #L1668b0.  v1:= "generated-id key must not be 0 value, maybe a schema mismatch between entity and database table?" @kind object;
  #L1668b4.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1668ba.  throw v0;
  #L1668bc.  v1:= "keyholder" @kind object;
  #L1668c0.  call `assignIdValue`(v9, v12, v0, v1, v13) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Ljava/lang/String;Lcom/j256/ormlite/dao/ObjectCache;)V` @kind direct;
  #L1668c6.  if v13 == 0 then goto L1668f8;
  #L1668ca.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L1668ce.  call temp:= `getForeignCollections`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.getForeignCollections:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L1668d4.  v0:= temp @kind object;
  #L1668d6.  call temp:= `foreignCollectionsAreAssigned`(v9, v0, v12) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.foreignCollectionsAreAssigned:([Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Z` @kind direct;
  #L1668dc.  v0:= temp;
  #L1668de.  if v0 == 0 then goto L1668f8;
  #L1668e2.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1668e6.  call temp:= `extractJavaFieldValue`(v0, v12) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1668ec.  v0:= temp @kind object;
  #L1668ee.  v1:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.clazz` @type ^`java.lang.Class` @kind object;
  #L1668f2.  call `put`(v13, v1, v0, v12) @signature `Lcom/j256/ormlite/dao/ObjectCache;.put:(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #Try_end4.  
  #L1668f8.  return v2;
  #L1668fa.  v0:= v2 @kind object;
  #L1668fc.  goto L1667de;
  #L166900.  v3:= v2 @kind object;
  #L166902.  goto L1666a2;
  catch `java.sql.SQLException` @[Try_start0..Try_end0] goto L166752;
  catch `java.sql.SQLException` @[Try_start1..Try_end1] goto L166752;
  catch `java.sql.SQLException` @[Try_start2..Try_end2] goto L166752;
  catch `java.sql.SQLException` @[Try_start3..Try_end3] goto L166864;
  catch `java.sql.SQLException` @[Try_start4..Try_end4] goto L166752;
}
