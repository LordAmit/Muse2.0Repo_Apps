record `com.j256.ormlite.misc.BaseDaoEnabled` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `com.j256.ormlite.dao.Dao` `com.j256.ormlite.misc.BaseDaoEnabled.dao` @AccessFlag PROTECTED_TRANSIENT;
}
procedure `void` `<init>`(`com.j256.ormlite.misc.BaseDaoEnabled` v0 @kind this) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1600dc.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1600e2.  return @kind void;
}
procedure `void` `checkForDao`(`com.j256.ormlite.misc.BaseDaoEnabled` v3 @kind this) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.checkForDao:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1600f4.  v0:= v3.`com.j256.ormlite.misc.BaseDaoEnabled.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L1600f8.  if v0 != 0 then goto L16014a;
  #L1600fc.  v0:= new `java.sql.SQLException`;
  #L160100.  v1:= new `java.lang.StringBuilder`;
  #L160104.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16010a.  v2:= "Dao has not been set on " @kind object;
  #L16010e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160114.  v1:= temp @kind object;
  #L160116.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L16011c.  v2:= temp @kind object;
  #L16011e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160124.  v1:= temp @kind object;
  #L160126.  v2:= " object: " @kind object;
  #L16012a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160130.  v1:= temp @kind object;
  #L160132.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160138.  v1:= temp @kind object;
  #L16013a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L160140.  v1:= temp @kind object;
  #L160142.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L160148.  throw v0;
  #L16014a.  return @kind void;
}
procedure `int` `create`(`com.j256.ormlite.misc.BaseDaoEnabled` v1 @kind this) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.create:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16015c.  call `checkForDao`(v1) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.checkForDao:()V` @kind direct;
  #L160162.  v0:= v1.`com.j256.ormlite.misc.BaseDaoEnabled.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L160166.  call temp:= `create`(v0, v1) @signature `Lcom/j256/ormlite/dao/Dao;.create:(Ljava/lang/Object;)I` @kind interface;
  #L16016c.  v0:= temp;
  #L16016e.  return v0;
}
procedure `int` `delete`(`com.j256.ormlite.misc.BaseDaoEnabled` v1 @kind this) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.delete:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160180.  call `checkForDao`(v1) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.checkForDao:()V` @kind direct;
  #L160186.  v0:= v1.`com.j256.ormlite.misc.BaseDaoEnabled.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L16018a.  call temp:= `delete`(v0, v1) @signature `Lcom/j256/ormlite/dao/Dao;.delete:(Ljava/lang/Object;)I` @kind interface;
  #L160190.  v0:= temp;
  #L160192.  return v0;
}
procedure `java.lang.Object` `extractId`(`com.j256.ormlite.misc.BaseDaoEnabled` v1 @kind this) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.extractId:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1601a4.  call `checkForDao`(v1) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.checkForDao:()V` @kind direct;
  #L1601aa.  v0:= v1.`com.j256.ormlite.misc.BaseDaoEnabled.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L1601ae.  call temp:= `extractId`(v0, v1) @signature `Lcom/j256/ormlite/dao/Dao;.extractId:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1601b4.  v0:= temp @kind object;
  #L1601b6.  return v0 @kind object;
}
procedure `com.j256.ormlite.dao.Dao` `getDao`(`com.j256.ormlite.misc.BaseDaoEnabled` v1 @kind this) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.getDao:()Lcom/j256/ormlite/dao/Dao;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1601c8.  v0:= v1.`com.j256.ormlite.misc.BaseDaoEnabled.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L1601cc.  return v0 @kind object;
}
procedure `java.lang.String` `objectToString`(`com.j256.ormlite.misc.BaseDaoEnabled` v2 @kind this) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.objectToString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L1601e0.  call `checkForDao`(v2) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.checkForDao:()V` @kind direct;
  #Try_end0.  
  #L1601e6.  v0:= v2.`com.j256.ormlite.misc.BaseDaoEnabled.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L1601ea.  call temp:= `objectToString`(v0, v2) @signature `Lcom/j256/ormlite/dao/Dao;.objectToString:(Ljava/lang/Object;)Ljava/lang/String;` @kind interface;
  #L1601f0.  v0:= temp @kind object;
  #L1601f2.  return v0 @kind object;
  #L1601f4.  v0:= Exception @type ^`java.sql.SQLException` @kind object;
  #L1601f6.  v1:= new `java.lang.IllegalArgumentException`;
  #L1601fa.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L160200.  throw v1;
  catch `java.sql.SQLException` @[Try_start0..Try_end0] goto L1601f4;
}
procedure `boolean` `objectsEqual`(`com.j256.ormlite.misc.BaseDaoEnabled` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.objectsEqual:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160224.  call `checkForDao`(v1) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.checkForDao:()V` @kind direct;
  #L16022a.  v0:= v1.`com.j256.ormlite.misc.BaseDaoEnabled.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L16022e.  call temp:= `objectsEqual`(v0, v1, v2) @signature `Lcom/j256/ormlite/dao/Dao;.objectsEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind interface;
  #L160234.  v0:= temp;
  #L160236.  return v0;
}
procedure `int` `refresh`(`com.j256.ormlite.misc.BaseDaoEnabled` v1 @kind this) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.refresh:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160248.  call `checkForDao`(v1) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.checkForDao:()V` @kind direct;
  #L16024e.  v0:= v1.`com.j256.ormlite.misc.BaseDaoEnabled.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L160252.  call temp:= `refresh`(v0, v1) @signature `Lcom/j256/ormlite/dao/Dao;.refresh:(Ljava/lang/Object;)I` @kind interface;
  #L160258.  v0:= temp;
  #L16025a.  return v0;
}
procedure `void` `setDao`(`com.j256.ormlite.misc.BaseDaoEnabled` v0 @kind this, `com.j256.ormlite.dao.Dao` v1 @kind object) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.setDao:(Lcom/j256/ormlite/dao/Dao;)V` @AccessFlag PUBLIC {
    temp;

  #L16026c.  v0.`com.j256.ormlite.misc.BaseDaoEnabled.dao` @type ^`com.j256.ormlite.dao.Dao` := v1 @kind object;
  #L160270.  return @kind void;
}
procedure `int` `update`(`com.j256.ormlite.misc.BaseDaoEnabled` v1 @kind this) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.update:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160284.  call `checkForDao`(v1) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.checkForDao:()V` @kind direct;
  #L16028a.  v0:= v1.`com.j256.ormlite.misc.BaseDaoEnabled.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L16028e.  call temp:= `update`(v0, v1) @signature `Lcom/j256/ormlite/dao/Dao;.update:(Ljava/lang/Object;)I` @kind interface;
  #L160294.  v0:= temp;
  #L160296.  return v0;
}
procedure `int` `updateId`(`com.j256.ormlite.misc.BaseDaoEnabled` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.updateId:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1602a8.  call `checkForDao`(v1) @signature `Lcom/j256/ormlite/misc/BaseDaoEnabled;.checkForDao:()V` @kind direct;
  #L1602ae.  v0:= v1.`com.j256.ormlite.misc.BaseDaoEnabled.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L1602b2.  call temp:= `updateId`(v0, v1, v2) @signature `Lcom/j256/ormlite/dao/Dao;.updateId:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L1602b8.  v0:= temp;
  #L1602ba.  return v0;
}
