record `com.j256.ormlite.field.types.UuidType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `int` `@@com.j256.ormlite.field.types.UuidType.DEFAULT_WIDTH` @AccessFlag PUBLIC_STATIC;
global `com.j256.ormlite.field.types.UuidType` `@@com.j256.ormlite.field.types.UuidType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/UuidType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15d5a0.  v0:= 48I;
  #L15d5a4.  `@@com.j256.ormlite.field.types.UuidType.DEFAULT_WIDTH` @type ^`int` := v0;
  #L15d5a8.  v0:= new `com.j256.ormlite.field.types.UuidType`;
  #L15d5ac.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:()V` @kind direct;
  #L15d5b2.  `@@com.j256.ormlite.field.types.UuidType.singleTon` @type ^`com.j256.ormlite.field.types.UuidType` := v0 @kind object;
  #L15d5b6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.UuidType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15d5c8.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15d5cc.  v1:= 1I;
  #L15d5ce.  v1:= new `java.lang.Class`[v1];
  #L15d5d2.  v2:= 0I;
  #L15d5d4.  v3:= constclass @type ^`java.util.UUID` @kind object;
  #L15d5d8.  v1[v2]:= v3 @kind object;
  #L15d5dc.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15d5e2.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.UuidType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15d5f4.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L15d5fa.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.UuidType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15d60c.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L15d612.  return @kind void;
}
procedure `com.j256.ormlite.field.types.UuidType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/UuidType;.getSingleton:()Lcom/j256/ormlite/field/types/UuidType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15d624.  v0:= `@@com.j256.ormlite.field.types.UuidType.singleTon` @type ^`com.j256.ormlite.field.types.UuidType` @kind object;
  #L15d628.  return v0 @kind object;
}
procedure `java.lang.Object` `generateId`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.generateId:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15d63c.  call temp:= `randomUUID`() @signature `Ljava/util/UUID;.randomUUID:()Ljava/util/UUID;` @kind static;
  #L15d642.  v0:= temp @kind object;
  #L15d644.  return v0 @kind object;
}
procedure `int` `getDefaultWidth`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.getDefaultWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15d658.  v0:= `@@com.j256.ormlite.field.types.UuidType.DEFAULT_WIDTH` @type ^`int`;
  #L15d65c.  return v0;
}
procedure `boolean` `isSelfGeneratedId`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.isSelfGeneratedId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15d670.  v0:= 1I;
  #L15d672.  return v0;
}
procedure `boolean` `isValidGeneratedType`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.isValidGeneratedType:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15d684.  v0:= 1I;
  #L15d686.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.UuidType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15d698.  v3:= (`java.util.UUID`) v3 @kind object;
  #L15d69c.  call temp:= `toString`(v3) @signature `Ljava/util/UUID;.toString:()Ljava/lang/String;` @kind virtual;
  #L15d6a2.  v0:= temp @kind object;
  #L15d6a4.  return v0 @kind object;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.UuidType` v0 @kind this, `com.j256.ormlite.field.FieldType` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L15d6b8.  return v2 @kind object;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.UuidType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/UuidType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15d6cc.  call temp:= `getString`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getString:(I)Ljava/lang/String;` @kind interface;
  #L15d6d2.  v0:= temp @kind object;
  #L15d6d4.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.UuidType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.Object` v5 @kind object, `int` v6 ) @signature `Lcom/j256/ormlite/field/types/UuidType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15d6e8.  v5:= (`java.lang.String`) v5 @kind object;
  #Try_start0.  
  #L15d6ec.  call temp:= `fromString`(v5) @signature `Ljava/util/UUID;.fromString:(Ljava/lang/String;)Ljava/util/UUID;` @kind static;
  #Try_end0.  
  #L15d6f2.  v0:= temp @kind object;
  #L15d6f4.  return v0 @kind object;
  #L15d6f6.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L15d6f8.  v1:= new `java.lang.StringBuilder`;
  #L15d6fc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15d702.  v2:= "Problems with column " @kind object;
  #L15d706.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d70c.  v1:= temp @kind object;
  #L15d70e.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d714.  v1:= temp @kind object;
  #L15d716.  v2:= " parsing UUID-string '" @kind object;
  #L15d71a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d720.  v1:= temp @kind object;
  #L15d722.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d728.  v1:= temp @kind object;
  #L15d72a.  v2:= "'" @kind object;
  #L15d72e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d734.  v1:= temp @kind object;
  #L15d736.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15d73c.  v1:= temp @kind object;
  #L15d73e.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15d744.  v0:= temp @kind object;
  #L15d746.  throw v0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L15d6f6;
}
