record `com.j256.ormlite.field.types.BooleanCharType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BooleanType` @kind class {
}
global `java.lang.String` `@@com.j256.ormlite.field.types.BooleanCharType.DEFAULT_TRUE_FALSE_FORMAT` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.j256.ormlite.field.types.BooleanCharType` `@@com.j256.ormlite.field.types.BooleanCharType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15b770.  v0:= new `com.j256.ormlite.field.types.BooleanCharType`;
  #L15b774.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.<init>:()V` @kind direct;
  #L15b77a.  `@@com.j256.ormlite.field.types.BooleanCharType.singleTon` @type ^`com.j256.ormlite.field.types.BooleanCharType` := v0 @kind object;
  #L15b77e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15b790.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15b794.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BooleanType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L15b79a.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BooleanCharType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.getSingleton:()Lcom/j256/ormlite/field/types/BooleanCharType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L15b7ac.  v0:= `@@com.j256.ormlite.field.types.BooleanCharType.singleTon` @type ^`com.j256.ormlite.field.types.BooleanCharType` @kind object;
  #L15b7b0.  return v0 @kind object;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.BooleanCharType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15b7c4.  call temp:= `getDataTypeConfigObj`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @kind virtual;
  #L15b7ca.  v0:= temp @kind object;
  #L15b7cc.  v0:= (`java.lang.String`) v0 @kind object;
  #L15b7d0.  v4:= (`java.lang.Boolean`) v4 @kind object;
  #L15b7d4.  call temp:= `booleanValue`(v4) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L15b7da.  v1:= temp;
  #L15b7dc.  if v1 == 0 then goto L15b7f4;
  #L15b7e0.  v1:= 0I;
  #L15b7e2.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15b7e8.  v0:= temp;
  #L15b7ea.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L15b7f0.  v0:= temp @kind object;
  #L15b7f2.  return v0 @kind object;
  #L15b7f4.  v1:= 1I;
  #L15b7f6.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15b7fc.  v0:= temp;
  #L15b7fe.  goto L15b7ea;
}
procedure `java.lang.Object` `makeConfigObject`(`com.j256.ormlite.field.types.BooleanCharType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.makeConfigObject:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15b810.  call temp:= `getFormat`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L15b816.  v0:= temp @kind object;
  #L15b818.  if v0 != 0 then goto L15b822;
  #L15b81c.  v0:= "10" @kind object;
  #L15b820.  return v0 @kind object;
  #L15b822.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15b828.  v1:= temp;
  #L15b82a.  v2:= 2I;
  #L15b82c.  if v1 != v2 then goto L15b848;
  #L15b830.  v1:= 0I;
  #L15b832.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15b838.  v1:= temp;
  #L15b83a.  v2:= 1I;
  #L15b83c.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15b842.  v2:= temp;
  #L15b844.  if v1 != v2 then goto L15b820;
  #L15b848.  v1:= new `java.sql.SQLException`;
  #L15b84c.  v2:= new `java.lang.StringBuilder`;
  #L15b850.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15b856.  v3:= "Invalid boolean format must have 2 different characters that represent true/false like \"10\" or \"tf\": " @kind object;
  #L15b85a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b860.  v2:= temp @kind object;
  #L15b862.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b868.  v0:= temp @kind object;
  #L15b86a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15b870.  v0:= temp @kind object;
  #L15b872.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15b878.  throw v1;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b88c.  call temp:= `parseBoolean`(v3) @signature `Ljava/lang/Boolean;.parseBoolean:(Ljava/lang/String;)Z` @kind static;
  #L15b892.  v0:= temp;
  #L15b894.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L15b89a.  v0:= temp @kind object;
  #L15b89c.  call temp:= `javaToSqlArg`(v1, v2, v0) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15b8a2.  v0:= temp @kind object;
  #L15b8a4.  return v0 @kind object;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b8b8.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15b8be.  v0:= temp;
  #L15b8c0.  if v0 != 0 then goto L15b8ca;
  #L15b8c4.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L15b8c8.  return v0 @kind object;
  #L15b8ca.  v0:= 0I;
  #L15b8cc.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15b8d2.  v0:= temp;
  #L15b8d4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L15b8da.  v0:= temp @kind object;
  #L15b8dc.  call temp:= `sqlArgToJava`(v1, v2, v0, v4) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L15b8e2.  v0:= temp @kind object;
  #L15b8e4.  goto L15b8c8;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b8f8.  call temp:= `getChar`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getChar:(I)C` @kind interface;
  #L15b8fe.  v0:= temp;
  #L15b900.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L15b906.  v0:= temp @kind object;
  #L15b908.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.BooleanCharType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.Object` v5 @kind object, `int` v6 ) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15b91c.  call temp:= `getDataTypeConfigObj`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @kind virtual;
  #L15b922.  v0:= temp @kind object;
  #L15b924.  v0:= (`java.lang.String`) v0 @kind object;
  #L15b928.  v5:= (`java.lang.Character`) v5 @kind object;
  #L15b92c.  call temp:= `charValue`(v5) @signature `Ljava/lang/Character;.charValue:()C` @kind virtual;
  #L15b932.  v1:= temp;
  #L15b934.  v2:= 0I;
  #L15b936.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L15b93c.  v0:= temp;
  #L15b93e.  if v1 != v0 then goto L15b948;
  #L15b942.  v0:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L15b946.  return v0 @kind object;
  #L15b948.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L15b94c.  goto L15b946;
}
