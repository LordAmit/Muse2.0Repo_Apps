record `a.k$a` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `a.k$a.a` @AccessFlag ;
  `java.lang.String`[] `a.k$a.b` @AccessFlag ;
  `java.lang.String`[] `a.k$a.c` @AccessFlag ;
  `boolean` `a.k$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`a.k$a` v1 @kind this, `a.k` v2 @kind object) @signature `La/k$a;.<init>:(La/k;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L087c88.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L087c8e.  v0:= v2.`a.k.d` @type ^`boolean` @kind boolean;
  #L087c92.  v1.`a.k$a.a` @type ^`boolean` := v0 @kind boolean;
  #L087c96.  v0:= v2.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L087c9a.  v1.`a.k$a.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L087c9e.  v0:= v2.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L087ca2.  v1.`a.k$a.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L087ca6.  v0:= v2.`a.k.e` @type ^`boolean` @kind boolean;
  #L087caa.  v1.`a.k$a.d` @type ^`boolean` := v0 @kind boolean;
  #L087cae.  return @kind void;
}
procedure `void` `<init>`(`a.k$a` v0 @kind this, `boolean` v1 ) @signature `La/k$a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L087cc0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L087cc6.  v0.`a.k$a.a` @type ^`boolean` := v1 @kind boolean;
  #L087cca.  return @kind void;
}
procedure `a.k$a` `a`(`a.k$a` v2 @kind this, `boolean` v3 ) @signature `La/k$a;.a:(Z)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L087cdc.  v0:= v2.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L087ce0.  if v0 != 0 then goto L087cf4;
  #L087ce4.  v0:= new `java.lang.IllegalStateException`;
  #L087ce8.  v1:= "no TLS extensions for cleartext connections" @kind object;
  #L087cec.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L087cf2.  throw v0;
  #L087cf4.  v2.`a.k$a.d` @type ^`boolean` := v3 @kind boolean;
  #L087cf8.  return v2 @kind object;
}
procedure `a.k$a` `a`(`a.k$a` v3 @kind this, `a.ac`[] v4 @kind object) @signature `La/k$a;.a:([La/ac;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L087d0c.  v0:= v3.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L087d10.  if v0 != 0 then goto L087d24;
  #L087d14.  v0:= new `java.lang.IllegalStateException`;
  #L087d18.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L087d1c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L087d22.  throw v0;
  #L087d24.  v0:= length @variable v4;
  #L087d26.  v1:= new `java.lang.String`[v0];
  #L087d2a.  v0:= 0I;
  #L087d2c.  v2:= length @variable v4;
  #L087d2e.  if v0 >= v2 then goto L087d44;
  #L087d32.  v2:= v4[v0] @kind object;
  #L087d36.  v2:= v2.`a.ac.f` @type ^`java.lang.String` @kind object;
  #L087d3a.  v1[v0]:= v2 @kind object;
  #L087d3e.  v0:= v0 + 1;
  #L087d42.  goto L087d2c;
  #L087d44.  call temp:= `b`(v3, v1) @signature `La/k$a;.b:([Ljava/lang/String;)La/k$a;` @kind virtual;
  #L087d4a.  v0:= temp @kind object;
  #L087d4c.  return v0 @kind object;
}
procedure `a.k$a` `a`(`a.k$a` v3 @kind this, `a.h`[] v4 @kind object) @signature `La/k$a;.a:([La/h;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L087d60.  v0:= v3.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L087d64.  if v0 != 0 then goto L087d78;
  #L087d68.  v0:= new `java.lang.IllegalStateException`;
  #L087d6c.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L087d70.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L087d76.  throw v0;
  #L087d78.  v0:= length @variable v4;
  #L087d7a.  v1:= new `java.lang.String`[v0];
  #L087d7e.  v0:= 0I;
  #L087d80.  v2:= length @variable v4;
  #L087d82.  if v0 >= v2 then goto L087d98;
  #L087d86.  v2:= v4[v0] @kind object;
  #L087d8a.  v2:= v2.`a.h.bi` @type ^`java.lang.String` @kind object;
  #L087d8e.  v1[v0]:= v2 @kind object;
  #L087d92.  v0:= v0 + 1;
  #L087d96.  goto L087d80;
  #L087d98.  call temp:= `a`(v3, v1) @signature `La/k$a;.a:([Ljava/lang/String;)La/k$a;` @kind virtual;
  #L087d9e.  v0:= temp @kind object;
  #L087da0.  return v0 @kind object;
}
procedure `a.k$a` `a`(`a.k$a` v2 @kind this, `java.lang.String`[] v3 @kind object) @signature `La/k$a;.a:([Ljava/lang/String;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L087db4.  v0:= v2.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L087db8.  if v0 != 0 then goto L087dcc;
  #L087dbc.  v0:= new `java.lang.IllegalStateException`;
  #L087dc0.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L087dc4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L087dca.  throw v0;
  #L087dcc.  v0:= length @variable v3;
  #L087dce.  if v0 != 0 then goto L087de2;
  #L087dd2.  v0:= new `java.lang.IllegalArgumentException`;
  #L087dd6.  v1:= "At least one cipher suite is required" @kind object;
  #L087dda.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L087de0.  throw v0;
  #L087de2.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L087de8.  v0:= temp @kind object;
  #L087dea.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L087dee.  v2.`a.k$a.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L087df2.  return v2 @kind object;
}
procedure `a.k` `a`(`a.k$a` v1 @kind this) @signature `La/k$a;.a:()La/k;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L087e04.  v0:= new `a.k`;
  #L087e08.  call `<init>`(v0, v1) @signature `La/k;.<init>:(La/k$a;)V` @kind direct;
  #L087e0e.  return v0 @kind object;
}
procedure `a.k$a` `b`(`a.k$a` v2 @kind this, `java.lang.String`[] v3 @kind object) @signature `La/k$a;.b:([Ljava/lang/String;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L087e20.  v0:= v2.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L087e24.  if v0 != 0 then goto L087e38;
  #L087e28.  v0:= new `java.lang.IllegalStateException`;
  #L087e2c.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L087e30.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L087e36.  throw v0;
  #L087e38.  v0:= length @variable v3;
  #L087e3a.  if v0 != 0 then goto L087e4e;
  #L087e3e.  v0:= new `java.lang.IllegalArgumentException`;
  #L087e42.  v1:= "At least one TLS version is required" @kind object;
  #L087e46.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L087e4c.  throw v0;
  #L087e4e.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L087e54.  v0:= temp @kind object;
  #L087e56.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L087e5a.  v2.`a.k$a.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L087e5e.  return v2 @kind object;
}
