record `a.j` @kind class @AccessFlag PUBLIC_FINAL {
  `a.a.b.d` `a.j.a` @AccessFlag FINAL;
  `boolean` `a.j.b` @AccessFlag ;
  `int` `a.j.e` @AccessFlag PRIVATE_FINAL;
  `long` `a.j.f` @AccessFlag PRIVATE_FINAL;
  `java.lang.Runnable` `a.j.g` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `a.j.h` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.j.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.Executor` `@@a.j.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L0877fc.  v8:= 1I;
  #L0877fe.  v2:= 0I;
  #L087800.  v0:= constclass @type ^`a.j` @kind object;
  #L087804.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L08780a.  v0:= temp;
  #L08780c.  if v0 != 0 then goto L08784a;
  #L087810.  v0:= v8;
  #L087812.  `@@a.j.c` @type ^`boolean` := v0 @kind boolean;
  #L087816.  v1:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L08781a.  v3:= 2147483647I;
  #L087820.  v4:= 60L;
  #L087824.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L087828.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L08782c.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L087832.  v0:= "OkHttp ConnectionPool" @kind object;
  #L087836.  call temp:= `a`(v0, v8) @signature `La/a/c;.a:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L08783c.  v8:= temp @kind object;
  #L08783e.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L087844.  `@@a.j.d` @type ^`java.util.concurrent.Executor` := v1 @kind object;
  #L087848.  return @kind void;
  #L08784a.  v0:= v2;
  #L08784c.  goto L087812;
}
procedure `void` `<init>`(`a.j` v4 @kind this) @signature `La/j;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L087860.  v0:= 5I;
  #L087862.  v2:= 5L;
  #L087866.  v1:= `@@java.util.concurrent.TimeUnit.MINUTES` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L08786a.  call `<init>`(v4, v0, v2, v1) @signature `La/j;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L087870.  return @kind void;
}
procedure `void` `<init>`(`a.j` v4 @kind this, `int` v5 , `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `La/j;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L087884.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08788a.  v0:= new `a.j$1`;
  #L08788e.  call `<init>`(v0, v4) @signature `La/j$1;.<init>:(La/j;)V` @kind direct;
  #L087894.  v4.`a.j.g` @type ^`java.lang.Runnable` := v0 @kind object;
  #L087898.  v0:= new `java.util.ArrayDeque`;
  #L08789c.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L0878a2.  v4.`a.j.h` @type ^`java.util.Deque` := v0 @kind object;
  #L0878a6.  v0:= new `a.a.b.d`;
  #L0878aa.  call `<init>`(v0) @signature `La/a/b/d;.<init>:()V` @kind direct;
  #L0878b0.  v4.`a.j.a` @type ^`a.a.b.d` := v0 @kind object;
  #L0878b4.  v4.`a.j.e` @type ^`int` := v5;
  #L0878b8.  call temp:= `toNanos`(v8, v6) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L0878be.  v0:= temp @kind wide;
  #L0878c0.  v4.`a.j.f` @type ^`long` := v0 @kind wide;
  #L0878c4.  v0:= 0L;
  #L0878c8.  v0:= lcmp(v6, v0);
  #L0878cc.  if v0 > 0 then goto L087902;
  #L0878d0.  v0:= new `java.lang.IllegalArgumentException`;
  #L0878d4.  v1:= new `java.lang.StringBuilder`;
  #L0878d8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0878de.  v2:= "keepAliveDuration <= 0: " @kind object;
  #L0878e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0878e8.  v1:= temp @kind object;
  #L0878ea.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L0878f0.  v1:= temp @kind object;
  #L0878f2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0878f8.  v1:= temp @kind object;
  #L0878fa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L087900.  throw v0;
  #L087902.  return @kind void;
}
procedure `int` `a`(`a.j` v6 @kind this, `a.a.b.c` v7 @kind object, `long` v8 ) @signature `La/j;.a:(La/a/b/c;J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L087914.  v2:= 0I;
  #L087916.  v3:= v7.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L08791a.  v1:= v2;
  #L08791c.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L087922.  v0:= temp;
  #L087924.  if v1 >= v0 then goto L0879ce;
  #L087928.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L08792e.  v0:= temp @kind object;
  #L087930.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L087934.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L08793a.  v4:= temp @kind object;
  #L08793c.  if v4 == 0 then goto L087948;
  #L087940.  v0:= v1 + 1;
  #L087944.  v1:= v0;
  #L087946.  goto L08791c;
  #L087948.  v0:= (`a.a.b.g$a`) v0 @kind object;
  #L08794c.  v4:= new `java.lang.StringBuilder`;
  #L087950.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L087956.  v5:= "A connection to " @kind object;
  #L08795a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L087960.  v4:= temp @kind object;
  #L087962.  call temp:= `a`(v7) @signature `La/a/b/c;.a:()La/ab;` @kind virtual;
  #L087968.  v5:= temp @kind object;
  #L08796a.  call temp:= `a`(v5) @signature `La/ab;.a:()La/a;` @kind virtual;
  #L087970.  v5:= temp @kind object;
  #L087972.  call temp:= `a`(v5) @signature `La/a;.a:()La/r;` @kind virtual;
  #L087978.  v5:= temp @kind object;
  #L08797a.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L087980.  v4:= temp @kind object;
  #L087982.  v5:= " was leaked. Did you forget to close a response body?" @kind object;
  #L087986.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08798c.  v4:= temp @kind object;
  #L08798e.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L087994.  v4:= temp @kind object;
  #L087996.  call temp:= `b`() @signature `La/a/g/e;.b:()La/a/g/e;` @kind static;
  #L08799c.  v5:= temp @kind object;
  #L08799e.  v0:= v0.`a.a.b.g$a.a` @type ^`java.lang.Object` @kind object;
  #L0879a2.  call `a`(v5, v4, v0) @signature `La/a/g/e;.a:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L0879a8.  call temp:= `remove`(v3, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L0879ae.  v0:= 1I;
  #L0879b0.  v7.`a.a.b.c.a` @type ^`boolean` := v0 @kind boolean;
  #L0879b4.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L0879ba.  v0:= temp;
  #L0879bc.  if v0 == 0 then goto L08791c;
  #L0879c0.  v0:= v6.`a.j.f` @type ^`long` @kind wide;
  #L0879c4.  v0:= v8 - v0 @kind long;
  #L0879c8.  v7.`a.a.b.c.e` @type ^`long` := v0 @kind wide;
  #L0879cc.  return v2;
  #L0879ce.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L0879d4.  v2:= temp;
  #L0879d6.  goto L0879cc;
}
procedure `long` `a`(`a.j` v13 @kind this, `long` v14 ) @signature `La/j;.a:(J)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L0879e8.  v0:= 0I;
  #L0879ea.  v1:= 0I;
  #L0879ec.  v4:= -9223372036854775808L;
  #L0879f0.  @monitorenter v13
  #Try_start0.  
  #L0879f2.  v2:= v13.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L0879f6.  call temp:= `iterator`(v2) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0879fc.  v8:= temp @kind object;
  #L0879fe.  v2:= v0;
  #L087a00.  v7:= v0;
  #L087a02.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L087a08.  v0:= temp;
  #L087a0a.  if v0 == 0 then goto L087a50;
  #L087a0e.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L087a14.  v0:= temp @kind object;
  #L087a16.  v0:= (`a.a.b.c`) v0 @kind object;
  #L087a1a.  call temp:= `a`(v13, v0, v14) @signature `La/j;.a:(La/a/b/c;J)I` @kind direct;
  #L087a20.  v3:= temp;
  #L087a22.  if v3 <= 0 then goto L087a2e;
  #L087a26.  v0:= v7 + 1;
  #L087a2a.  v7:= v0;
  #L087a2c.  goto L087a02;
  #L087a2e.  v6:= v2 + 1;
  #L087a32.  v2:= v0.`a.a.b.c.e` @type ^`long` @kind wide;
  #L087a36.  v2:= v14 - v2 @kind long;
  #L087a3a.  v9:= lcmp(v2, v4);
  #L087a3e.  if v9 <= 0 then goto L087ab2;
  #L087a42.  v10:= v2 @kind wide;
  #L087a44.  v2:= v0 @kind object;
  #L087a46.  v0:= v10 @kind wide;
  #L087a48.  v4:= v0 @kind wide;
  #L087a4a.  v1:= v2 @kind object;
  #L087a4c.  v2:= v6;
  #L087a4e.  goto L087a02;
  #L087a50.  v8:= v13.`a.j.f` @type ^`long` @kind wide;
  #L087a54.  v0:= lcmp(v4, v8);
  #L087a58.  if v0 >= 0 then goto L087a64;
  #L087a5c.  v0:= v13.`a.j.e` @type ^`int`;
  #L087a60.  if v2 <= v0 then goto L087a84;
  #L087a64.  v0:= v13.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L087a68.  call temp:= `remove`(v0, v1) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L087a6e.  @monitorexit v13
  #Try_end0.  
  #L087a70.  call temp:= `b`(v1) @signature `La/a/b/c;.b:()Ljava/net/Socket;` @kind virtual;
  #L087a76.  v0:= temp @kind object;
  #L087a78.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L087a7e.  v0:= 0L;
  #L087a82.  return v0 @kind wide;
  #L087a84.  if v2 <= 0 then goto L087a98;
  #Try_start1.  
  #L087a88.  v0:= v13.`a.j.f` @type ^`long` @kind wide;
  #L087a8c.  v0:= v0 - v4 @kind long;
  #L087a8e.  @monitorexit v13
  #L087a90.  goto L087a82;
  #L087a92.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L087a94.  @monitorexit v13
  #Try_end1.  
  #L087a96.  throw v0;
  #L087a98.  if v7 <= 0 then goto L087aa4;
  #Try_start2.  
  #L087a9c.  v0:= v13.`a.j.f` @type ^`long` @kind wide;
  #L087aa0.  @monitorexit v13
  #L087aa2.  goto L087a82;
  #L087aa4.  v0:= 0I;
  #L087aa6.  v13.`a.j.b` @type ^`boolean` := v0 @kind boolean;
  #L087aaa.  v0:= -1L;
  #L087aae.  @monitorexit v13
  #Try_end2.  
  #L087ab0.  goto L087a82;
  #L087ab2.  v2:= v1 @kind object;
  #L087ab4.  v0:= v4 @kind wide;
  #L087ab6.  goto L087a48;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L087a92;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L087a92;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L087a92;
}
procedure `a.a.b.c` `a`(`a.j` v3 @kind this, `a.a` v4 @kind object, `a.a.b.g` v5 @kind object) @signature `La/j;.a:(La/a;La/a/b/g;)La/a/b/c;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L087ae4.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L087ae8.  if v0 != 0 then goto L087b04;
  #L087aec.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L087af2.  v0:= temp;
  #L087af4.  if v0 != 0 then goto L087b04;
  #L087af8.  v0:= new `java.lang.AssertionError`;
  #L087afc.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L087b02.  throw v0;
  #L087b04.  v0:= v3.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L087b08.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L087b0e.  v1:= temp @kind object;
  #L087b10.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L087b16.  v0:= temp;
  #L087b18.  if v0 == 0 then goto L087b3c;
  #L087b1c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L087b22.  v0:= temp @kind object;
  #L087b24.  v0:= (`a.a.b.c`) v0 @kind object;
  #L087b28.  call temp:= `a`(v0, v4) @signature `La/a/b/c;.a:(La/a;)Z` @kind virtual;
  #L087b2e.  v2:= temp;
  #L087b30.  if v2 == 0 then goto L087b10;
  #L087b34.  call `a`(v5, v0) @signature `La/a/b/g;.a:(La/a/b/c;)V` @kind virtual;
  #L087b3a.  return v0 @kind object;
  #L087b3c.  v0:= 0I;
  #L087b3e.  goto L087b3a;
}
procedure `void` `a`(`a.j` v2 @kind this, `a.a.b.c` v3 @kind object) @signature `La/j;.a:(La/a/b/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L087b50.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L087b54.  if v0 != 0 then goto L087b70;
  #L087b58.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L087b5e.  v0:= temp;
  #L087b60.  if v0 != 0 then goto L087b70;
  #L087b64.  v0:= new `java.lang.AssertionError`;
  #L087b68.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L087b6e.  throw v0;
  #L087b70.  v0:= v2.`a.j.b` @type ^`boolean` @kind boolean;
  #L087b74.  if v0 != 0 then goto L087b8c;
  #L087b78.  v0:= 1I;
  #L087b7a.  v2.`a.j.b` @type ^`boolean` := v0 @kind boolean;
  #L087b7e.  v0:= `@@a.j.d` @type ^`java.util.concurrent.Executor` @kind object;
  #L087b82.  v1:= v2.`a.j.g` @type ^`java.lang.Runnable` @kind object;
  #L087b86.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L087b8c.  v0:= v2.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L087b90.  call temp:= `add`(v0, v3) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L087b96.  return @kind void;
}
procedure `java.net.Socket` `b`(`a.j` v3 @kind this, `a.a` v4 @kind object, `a.a.b.g` v5 @kind object) @signature `La/j;.b:(La/a;La/a/b/g;)Ljava/net/Socket;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L087ba8.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L087bac.  if v0 != 0 then goto L087bc8;
  #L087bb0.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L087bb6.  v0:= temp;
  #L087bb8.  if v0 != 0 then goto L087bc8;
  #L087bbc.  v0:= new `java.lang.AssertionError`;
  #L087bc0.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L087bc6.  throw v0;
  #L087bc8.  v0:= v3.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L087bcc.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L087bd2.  v1:= temp @kind object;
  #L087bd4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L087bda.  v0:= temp;
  #L087bdc.  if v0 == 0 then goto L087c1a;
  #L087be0.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L087be6.  v0:= temp @kind object;
  #L087be8.  v0:= (`a.a.b.c`) v0 @kind object;
  #L087bec.  call temp:= `a`(v0, v4) @signature `La/a/b/c;.a:(La/a;)Z` @kind virtual;
  #L087bf2.  v2:= temp;
  #L087bf4.  if v2 == 0 then goto L087bd4;
  #L087bf8.  call temp:= `d`(v0) @signature `La/a/b/c;.d:()Z` @kind virtual;
  #L087bfe.  v2:= temp;
  #L087c00.  if v2 == 0 then goto L087bd4;
  #L087c04.  call temp:= `b`(v5) @signature `La/a/b/g;.b:()La/a/b/c;` @kind virtual;
  #L087c0a.  v2:= temp @kind object;
  #L087c0c.  if v0 == v2 then goto L087bd4;
  #L087c10.  call temp:= `b`(v5, v0) @signature `La/a/b/g;.b:(La/a/b/c;)Ljava/net/Socket;` @kind virtual;
  #L087c16.  v0:= temp @kind object;
  #L087c18.  return v0 @kind object;
  #L087c1a.  v0:= 0I;
  #L087c1c.  goto L087c18;
}
procedure `boolean` `b`(`a.j` v1 @kind this, `a.a.b.c` v2 @kind object) @signature `La/j;.b:(La/a/b/c;)Z` @AccessFlag  {
    temp;
    v0;

  #L087c30.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L087c34.  if v0 != 0 then goto L087c50;
  #L087c38.  call temp:= `holdsLock`(v1) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L087c3e.  v0:= temp;
  #L087c40.  if v0 != 0 then goto L087c50;
  #L087c44.  v0:= new `java.lang.AssertionError`;
  #L087c48.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L087c4e.  throw v0;
  #L087c50.  v0:= v2.`a.a.b.c.a` @type ^`boolean` @kind boolean;
  #L087c54.  if v0 != 0 then goto L087c60;
  #L087c58.  v0:= v1.`a.j.e` @type ^`int`;
  #L087c5c.  if v0 != 0 then goto L087c6e;
  #L087c60.  v0:= v1.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L087c64.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L087c6a.  v0:= 1I;
  #L087c6c.  return v0;
  #L087c6e.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L087c74.  v0:= 0I;
  #L087c76.  goto L087c6c;
}
