record `a.ab` @kind class @AccessFlag PUBLIC_FINAL {
  `a.a` `a.ab.a` @AccessFlag FINAL;
  `java.net.Proxy` `a.ab.b` @AccessFlag FINAL;
  `java.net.InetSocketAddress` `a.ab.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`a.ab` v2 @kind this, `a.a` v3 @kind object, `java.net.Proxy` v4 @kind object, `java.net.InetSocketAddress` v5 @kind object) @signature `La/ab;.<init>:(La/a;Ljava/net/Proxy;Ljava/net/InetSocketAddress;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L085b34.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L085b3a.  if v3 != 0 then goto L085b4e;
  #L085b3e.  v0:= new `java.lang.NullPointerException`;
  #L085b42.  v1:= "address == null" @kind object;
  #L085b46.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L085b4c.  throw v0;
  #L085b4e.  if v4 != 0 then goto L085b62;
  #L085b52.  v0:= new `java.lang.NullPointerException`;
  #L085b56.  v1:= "proxy == null" @kind object;
  #L085b5a.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L085b60.  throw v0;
  #L085b62.  if v5 != 0 then goto L085b76;
  #L085b66.  v0:= new `java.lang.NullPointerException`;
  #L085b6a.  v1:= "inetSocketAddress == null" @kind object;
  #L085b6e.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L085b74.  throw v0;
  #L085b76.  v2.`a.ab.a` @type ^`a.a` := v3 @kind object;
  #L085b7a.  v2.`a.ab.b` @type ^`java.net.Proxy` := v4 @kind object;
  #L085b7e.  v2.`a.ab.c` @type ^`java.net.InetSocketAddress` := v5 @kind object;
  #L085b82.  return @kind void;
}
procedure `a.a` `a`(`a.ab` v1 @kind this) @signature `La/ab;.a:()La/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L085b94.  v0:= v1.`a.ab.a` @type ^`a.a` @kind object;
  #L085b98.  return v0 @kind object;
}
procedure `java.net.Proxy` `b`(`a.ab` v1 @kind this) @signature `La/ab;.b:()Ljava/net/Proxy;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L085bac.  v0:= v1.`a.ab.b` @type ^`java.net.Proxy` @kind object;
  #L085bb0.  return v0 @kind object;
}
procedure `java.net.InetSocketAddress` `c`(`a.ab` v1 @kind this) @signature `La/ab;.c:()Ljava/net/InetSocketAddress;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L085bc4.  v0:= v1.`a.ab.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L085bc8.  return v0 @kind object;
}
procedure `boolean` `d`(`a.ab` v2 @kind this) @signature `La/ab;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L085bdc.  v0:= v2.`a.ab.a` @type ^`a.a` @kind object;
  #L085be0.  v0:= v0.`a.a.i` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L085be4.  if v0 == 0 then goto L085c00;
  #L085be8.  v0:= v2.`a.ab.b` @type ^`java.net.Proxy` @kind object;
  #L085bec.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L085bf2.  v0:= temp @kind object;
  #L085bf4.  v1:= `@@java.net.Proxy$Type.HTTP` @type ^`java.net.Proxy$Type` @kind object;
  #L085bf8.  if v0 != v1 then goto L085c00;
  #L085bfc.  v0:= 1I;
  #L085bfe.  return v0;
  #L085c00.  v0:= 0I;
  #L085c02.  goto L085bfe;
}
procedure `boolean` `equals`(`a.ab` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `La/ab;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L085c14.  v0:= 0I;
  #L085c16.  v1:= instanceof @variable v4 @type ^`a.ab` @kind boolean;
  #L085c1a.  if v1 == 0 then goto L085c60;
  #L085c1e.  v4:= (`a.ab`) v4 @kind object;
  #L085c22.  v1:= v3.`a.ab.a` @type ^`a.a` @kind object;
  #L085c26.  v2:= v4.`a.ab.a` @type ^`a.a` @kind object;
  #L085c2a.  call temp:= `equals`(v1, v2) @signature `La/a;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L085c30.  v1:= temp;
  #L085c32.  if v1 == 0 then goto L085c60;
  #L085c36.  v1:= v3.`a.ab.b` @type ^`java.net.Proxy` @kind object;
  #L085c3a.  v2:= v4.`a.ab.b` @type ^`java.net.Proxy` @kind object;
  #L085c3e.  call temp:= `equals`(v1, v2) @signature `Ljava/net/Proxy;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L085c44.  v1:= temp;
  #L085c46.  if v1 == 0 then goto L085c60;
  #L085c4a.  v1:= v3.`a.ab.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L085c4e.  v2:= v4.`a.ab.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L085c52.  call temp:= `equals`(v1, v2) @signature `Ljava/net/InetSocketAddress;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L085c58.  v1:= temp;
  #L085c5a.  if v1 == 0 then goto L085c60;
  #L085c5e.  v0:= 1I;
  #L085c60.  return v0;
}
procedure `int` `hashCode`(`a.ab` v2 @kind this) @signature `La/ab;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L085c74.  v0:= v2.`a.ab.a` @type ^`a.a` @kind object;
  #L085c78.  call temp:= `hashCode`(v0) @signature `La/a;.hashCode:()I` @kind virtual;
  #L085c7e.  v0:= temp;
  #L085c80.  v0:= v0 + 527;
  #L085c84.  v0:= v0 * 31;
  #L085c88.  v1:= v2.`a.ab.b` @type ^`java.net.Proxy` @kind object;
  #L085c8c.  call temp:= `hashCode`(v1) @signature `Ljava/net/Proxy;.hashCode:()I` @kind virtual;
  #L085c92.  v1:= temp;
  #L085c94.  v0:= v0 + v1 @kind int;
  #L085c96.  v0:= v0 * 31;
  #L085c9a.  v1:= v2.`a.ab.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L085c9e.  call temp:= `hashCode`(v1) @signature `Ljava/net/InetSocketAddress;.hashCode:()I` @kind virtual;
  #L085ca4.  v1:= temp;
  #L085ca6.  v0:= v0 + v1 @kind int;
  #L085ca8.  return v0;
}
procedure `java.lang.String` `toString`(`a.ab` v2 @kind this) @signature `La/ab;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L085cbc.  v0:= new `java.lang.StringBuilder`;
  #L085cc0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L085cc6.  v1:= "Route{" @kind object;
  #L085cca.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085cd0.  v0:= temp @kind object;
  #L085cd2.  v1:= v2.`a.ab.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L085cd6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085cdc.  v0:= temp @kind object;
  #L085cde.  v1:= "}" @kind object;
  #L085ce2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085ce8.  v0:= temp @kind object;
  #L085cea.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L085cf0.  v0:= temp @kind object;
  #L085cf2.  return v0 @kind object;
}
