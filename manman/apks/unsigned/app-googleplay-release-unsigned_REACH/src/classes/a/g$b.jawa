record `a.g$b` @kind class @AccessFlag FINAL {
  `java.lang.String` `a.g$b.a` @AccessFlag FINAL;
  `java.lang.String` `a.g$b.b` @AccessFlag FINAL;
  `java.lang.String` `a.g$b.c` @AccessFlag FINAL;
  `b.f` `a.g$b.d` @AccessFlag FINAL;
}
procedure `boolean` `a`(`a.g$b` v6 @kind this, `java.lang.String` v7 @kind object) @signature `La/g$b;.a:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0867f8.  v1:= 0I;
  #L0867fa.  v0:= v6.`a.g$b.a` @type ^`java.lang.String` @kind object;
  #L0867fe.  v2:= "*." @kind object;
  #L086802.  call temp:= `startsWith`(v0, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L086808.  v0:= temp;
  #L08680a.  if v0 == 0 then goto L08683c;
  #L08680e.  v0:= 46I;
  #L086812.  call temp:= `indexOf`(v7, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L086818.  v0:= temp;
  #L08681a.  v2:= v0 + 1;
  #L08681e.  v3:= v6.`a.g$b.b` @type ^`java.lang.String` @kind object;
  #L086822.  v0:= v6.`a.g$b.b` @type ^`java.lang.String` @kind object;
  #L086826.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08682c.  v5:= temp;
  #L08682e.  v0:= v7 @kind object;
  #L086830.  v4:= v1;
  #L086832.  call temp:= `regionMatches`(v0, v1, v2, v3, v4, v5) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L086838.  v0:= temp;
  #L08683a.  return v0;
  #L08683c.  v0:= v6.`a.g$b.b` @type ^`java.lang.String` @kind object;
  #L086840.  call temp:= `equals`(v7, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L086846.  v0:= temp;
  #L086848.  goto L08683a;
}
procedure `boolean` `equals`(`a.g$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `La/g$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08685c.  v0:= instanceof @variable v3 @type ^`a.g$b` @kind boolean;
  #L086860.  if v0 == 0 then goto L0868b4;
  #L086864.  v1:= v2.`a.g$b.a` @type ^`java.lang.String` @kind object;
  #L086868.  v0:= v3 @kind object;
  #L08686a.  v0:= (`a.g$b`) v0 @kind object;
  #L08686e.  v0:= v0.`a.g$b.a` @type ^`java.lang.String` @kind object;
  #L086872.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L086878.  v0:= temp;
  #L08687a.  if v0 == 0 then goto L0868b4;
  #L08687e.  v1:= v2.`a.g$b.c` @type ^`java.lang.String` @kind object;
  #L086882.  v0:= v3 @kind object;
  #L086884.  v0:= (`a.g$b`) v0 @kind object;
  #L086888.  v0:= v0.`a.g$b.c` @type ^`java.lang.String` @kind object;
  #L08688c.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L086892.  v0:= temp;
  #L086894.  if v0 == 0 then goto L0868b4;
  #L086898.  v0:= v2.`a.g$b.d` @type ^`b.f` @kind object;
  #L08689c.  v3:= (`a.g$b`) v3 @kind object;
  #L0868a0.  v1:= v3.`a.g$b.d` @type ^`b.f` @kind object;
  #L0868a4.  call temp:= `equals`(v0, v1) @signature `Lb/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L0868aa.  v0:= temp;
  #L0868ac.  if v0 == 0 then goto L0868b4;
  #L0868b0.  v0:= 1I;
  #L0868b2.  return v0;
  #L0868b4.  v0:= 0I;
  #L0868b6.  goto L0868b2;
}
procedure `int` `hashCode`(`a.g$b` v2 @kind this) @signature `La/g$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0868c8.  v0:= v2.`a.g$b.a` @type ^`java.lang.String` @kind object;
  #L0868cc.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L0868d2.  v0:= temp;
  #L0868d4.  v0:= v0 + 527;
  #L0868d8.  v0:= v0 * 31;
  #L0868dc.  v1:= v2.`a.g$b.c` @type ^`java.lang.String` @kind object;
  #L0868e0.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L0868e6.  v1:= temp;
  #L0868e8.  v0:= v0 + v1 @kind int;
  #L0868ea.  v0:= v0 * 31;
  #L0868ee.  v1:= v2.`a.g$b.d` @type ^`b.f` @kind object;
  #L0868f2.  call temp:= `hashCode`(v1) @signature `Lb/f;.hashCode:()I` @kind virtual;
  #L0868f8.  v1:= temp;
  #L0868fa.  v0:= v0 + v1 @kind int;
  #L0868fc.  return v0;
}
procedure `java.lang.String` `toString`(`a.g$b` v2 @kind this) @signature `La/g$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L086910.  v0:= new `java.lang.StringBuilder`;
  #L086914.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08691a.  v1:= v2.`a.g$b.c` @type ^`java.lang.String` @kind object;
  #L08691e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L086924.  v0:= temp @kind object;
  #L086926.  v1:= v2.`a.g$b.d` @type ^`b.f` @kind object;
  #L08692a.  call temp:= `b`(v1) @signature `Lb/f;.b:()Ljava/lang/String;` @kind virtual;
  #L086930.  v1:= temp @kind object;
  #L086932.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L086938.  v0:= temp @kind object;
  #L08693a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L086940.  v0:= temp @kind object;
  #L086942.  return v0 @kind object;
}
