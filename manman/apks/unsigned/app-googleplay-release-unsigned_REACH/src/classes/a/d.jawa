record `a.d` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `a.d.c` @AccessFlag ;
  `boolean` `a.d.d` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.e` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.h` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.i` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.j` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.k` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.l` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.m` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.n` @AccessFlag PRIVATE_FINAL;
}
global `a.d` `@@a.d.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `a.d` `@@a.d.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L0860b0.  v0:= new `a.d$a`;
  #L0860b4.  call `<init>`(v0) @signature `La/d$a;.<init>:()V` @kind direct;
  #L0860ba.  call temp:= `a`(v0) @signature `La/d$a;.a:()La/d$a;` @kind virtual;
  #L0860c0.  v0:= temp @kind object;
  #L0860c2.  call temp:= `c`(v0) @signature `La/d$a;.c:()La/d;` @kind virtual;
  #L0860c8.  v0:= temp @kind object;
  #L0860ca.  `@@a.d.a` @type ^`a.d` := v0 @kind object;
  #L0860ce.  v0:= new `a.d$a`;
  #L0860d2.  call `<init>`(v0) @signature `La/d$a;.<init>:()V` @kind direct;
  #L0860d8.  call temp:= `b`(v0) @signature `La/d$a;.b:()La/d$a;` @kind virtual;
  #L0860de.  v0:= temp @kind object;
  #L0860e0.  v1:= 2147483647I;
  #L0860e6.  v2:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L0860ea.  call temp:= `a`(v0, v1, v2) @signature `La/d$a;.a:(ILjava/util/concurrent/TimeUnit;)La/d$a;` @kind virtual;
  #L0860f0.  v0:= temp @kind object;
  #L0860f2.  call temp:= `c`(v0) @signature `La/d$a;.c:()La/d;` @kind virtual;
  #L0860f8.  v0:= temp @kind object;
  #L0860fa.  `@@a.d.b` @type ^`a.d` := v0 @kind object;
  #L0860fe.  return @kind void;
}
procedure `void` `<init>`(`a.d` v2 @kind this, `a.d$a` v3 @kind object) @signature `La/d;.<init>:(La/d$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L086110.  v1:= 0I;
  #L086112.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L086118.  v0:= v3.`a.d$a.a` @type ^`boolean` @kind boolean;
  #L08611c.  v2.`a.d.d` @type ^`boolean` := v0 @kind boolean;
  #L086120.  v0:= v3.`a.d$a.b` @type ^`boolean` @kind boolean;
  #L086124.  v2.`a.d.e` @type ^`boolean` := v0 @kind boolean;
  #L086128.  v0:= v3.`a.d$a.c` @type ^`int`;
  #L08612c.  v2.`a.d.f` @type ^`int` := v0;
  #L086130.  v0:= -1I;
  #L086132.  v2.`a.d.g` @type ^`int` := v0;
  #L086136.  v2.`a.d.h` @type ^`boolean` := v1 @kind boolean;
  #L08613a.  v2.`a.d.i` @type ^`boolean` := v1 @kind boolean;
  #L08613e.  v2.`a.d.j` @type ^`boolean` := v1 @kind boolean;
  #L086142.  v0:= v3.`a.d$a.d` @type ^`int`;
  #L086146.  v2.`a.d.k` @type ^`int` := v0;
  #L08614a.  v0:= v3.`a.d$a.e` @type ^`int`;
  #L08614e.  v2.`a.d.l` @type ^`int` := v0;
  #L086152.  v0:= v3.`a.d$a.f` @type ^`boolean` @kind boolean;
  #L086156.  v2.`a.d.m` @type ^`boolean` := v0 @kind boolean;
  #L08615a.  v0:= v3.`a.d$a.g` @type ^`boolean` @kind boolean;
  #L08615e.  v2.`a.d.n` @type ^`boolean` := v0 @kind boolean;
  #L086162.  return @kind void;
}
procedure `void` `<init>`(`a.d` v0 @kind this, `boolean` v1 , `boolean` v2 , `int` v3 , `int` v4 , `boolean` v5 , `boolean` v6 , `boolean` v7 , `int` v8 , `int` v9 , `boolean` v10 , `boolean` v11 , `java.lang.String` v12 @kind object) @signature `La/d;.<init>:(ZZIIZZZIIZZLjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L086174.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08617a.  v0.`a.d.d` @type ^`boolean` := v1 @kind boolean;
  #L08617e.  v0.`a.d.e` @type ^`boolean` := v2 @kind boolean;
  #L086182.  v0.`a.d.f` @type ^`int` := v3;
  #L086186.  v0.`a.d.g` @type ^`int` := v4;
  #L08618a.  v0.`a.d.h` @type ^`boolean` := v5 @kind boolean;
  #L08618e.  v0.`a.d.i` @type ^`boolean` := v6 @kind boolean;
  #L086192.  v0.`a.d.j` @type ^`boolean` := v7 @kind boolean;
  #L086196.  v0.`a.d.k` @type ^`int` := v8;
  #L08619a.  v0.`a.d.l` @type ^`int` := v9;
  #L08619e.  v0.`a.d.m` @type ^`boolean` := v10 @kind boolean;
  #L0861a2.  v0.`a.d.n` @type ^`boolean` := v11 @kind boolean;
  #L0861a6.  v0.`a.d.c` @type ^`java.lang.String` := v12 @kind object;
  #L0861aa.  return @kind void;
}
procedure `a.d` `a`(`a.q` v23 @kind object) @signature `La/d;.a:(La/q;)La/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L0861bc.  v16:= 0I;
  #L0861c0.  v4:= 0I;
  #L0861c2.  v5:= -1I;
  #L0861c4.  v6:= -1I;
  #L0861c6.  v7:= 0I;
  #L0861c8.  v8:= 0I;
  #L0861ca.  v9:= 0I;
  #L0861cc.  v10:= -1I;
  #L0861ce.  v11:= -1I;
  #L0861d0.  v12:= 0I;
  #L0861d2.  v13:= 0I;
  #L0861d4.  v15:= 1I;
  #L0861d6.  v3:= 0I;
  #L0861d8.  v2:= 0I;
  #L0861da.  call temp:= `a`(v23) @signature `La/q;.a:()I` @kind virtual;
  #L0861e0.  v19:= temp;
  #L0861e2.  v18:= v2;
  #L0861e6.  v2:= v3 @kind object;
  #L0861e8.  v3:= v16;
  #L0861ec.  v0:= v18;
  #L0861f0.  v1:= v19;
  #L0861f4.  if v0 >= v1 then goto L086506;
  #L0861f8.  v0:= v23 @kind object;
  #L0861fc.  v1:= v18;
  #L086200.  call temp:= `a`(v0, v1) @signature `La/q;.a:(I)Ljava/lang/String;` @kind virtual;
  #L086206.  v16:= temp @kind object;
  #L086208.  v0:= v23 @kind object;
  #L08620c.  v1:= v18;
  #L086210.  call temp:= `b`(v0, v1) @signature `La/q;.b:(I)Ljava/lang/String;` @kind virtual;
  #L086216.  v14:= temp @kind object;
  #L086218.  v17:= "Cache-Control" @kind object;
  #L08621c.  call temp:= `equalsIgnoreCase`(v16, v17) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L086222.  v17:= temp;
  #L086224.  if v17 == 0 then goto L0862e6;
  #L086228.  if v2 == 0 then goto L0862e2;
  #L08622c.  v15:= 0I;
  #L08622e.  v16:= 0I;
  #L086232.  v22:= v16;
  #L086236.  v16:= v3;
  #L08623a.  v3:= v22;
  #L08623e.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L086244.  v17:= temp;
  #L086246.  v0:= v17;
  #L08624a.  if v3 >= v0 then goto L0864f6;
  #L08624e.  v17:= "=,;" @kind object;
  #L086252.  v0:= v17 @kind object;
  #L086256.  call temp:= `a`(v14, v3, v0) @signature `La/a/c/e;.a:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L08625c.  v17:= temp;
  #L08625e.  v0:= v17;
  #L086262.  call temp:= `substring`(v14, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L086268.  v3:= temp @kind object;
  #L08626a.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L086270.  v20:= temp @kind object;
  #L086272.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L086278.  v3:= temp;
  #L08627a.  v0:= v17;
  #L08627e.  if v0 == v3 then goto L0862b2;
  #L086282.  v0:= v17;
  #L086286.  call temp:= `charAt`(v14, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L08628c.  v3:= temp;
  #L08628e.  v21:= 44I;
  #L086292.  v0:= v21;
  #L086296.  if v3 == v0 then goto L0862b2;
  #L08629a.  v0:= v17;
  #L08629e.  call temp:= `charAt`(v14, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L0862a4.  v3:= temp;
  #L0862a6.  v21:= 59I;
  #L0862aa.  v0:= v21;
  #L0862ae.  if v3 != v0 then goto L0862fa;
  #L0862b2.  v17:= v17 + 1;
  #L0862b6.  v3:= 0I;
  #L0862b8.  v22:= v3 @kind object;
  #L0862bc.  v3:= v17;
  #L0862c0.  v17:= v22 @kind object;
  #L0862c4.  v21:= "no-cache" @kind object;
  #L0862c8.  v0:= v21 @kind object;
  #L0862cc.  v1:= v20 @kind object;
  #L0862d0.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L0862d6.  v21:= temp;
  #L0862d8.  if v21 == 0 then goto L086392;
  #L0862dc.  v16:= 1I;
  #L0862e0.  goto L08623e;
  #L0862e2.  v2:= v14 @kind object;
  #L0862e4.  goto L08622e;
  #L0862e6.  v17:= "Pragma" @kind object;
  #L0862ea.  call temp:= `equalsIgnoreCase`(v16, v17) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L0862f0.  v16:= temp;
  #L0862f2.  if v16 == 0 then goto L0864f2;
  #L0862f6.  v15:= 0I;
  #L0862f8.  goto L08622e;
  #L0862fa.  v3:= v17 + 1;
  #L0862fe.  call temp:= `a`(v14, v3) @signature `La/a/c/e;.a:(Ljava/lang/String;I)I` @kind static;
  #L086304.  v3:= temp;
  #L086306.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08630c.  v17:= temp;
  #L08630e.  v0:= v17;
  #L086312.  if v3 >= v0 then goto L086360;
  #L086316.  call temp:= `charAt`(v14, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L08631c.  v17:= temp;
  #L08631e.  v21:= 34I;
  #L086322.  v0:= v17;
  #L086326.  v1:= v21;
  #L08632a.  if v0 != v1 then goto L086360;
  #L08632e.  v3:= v3 + 1;
  #L086332.  v17:= "\"" @kind object;
  #L086336.  v0:= v17 @kind object;
  #L08633a.  call temp:= `a`(v14, v3, v0) @signature `La/a/c/e;.a:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L086340.  v17:= temp;
  #L086342.  v0:= v17;
  #L086346.  call temp:= `substring`(v14, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08634c.  v3:= temp @kind object;
  #L08634e.  v17:= v17 + 1;
  #L086352.  v22:= v3 @kind object;
  #L086356.  v3:= v17;
  #L08635a.  v17:= v22 @kind object;
  #L08635e.  goto L0862c4;
  #L086360.  v17:= ",;" @kind object;
  #L086364.  v0:= v17 @kind object;
  #L086368.  call temp:= `a`(v14, v3, v0) @signature `La/a/c/e;.a:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L08636e.  v17:= temp;
  #L086370.  v0:= v17;
  #L086374.  call temp:= `substring`(v14, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08637a.  v3:= temp @kind object;
  #L08637c.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L086382.  v3:= temp @kind object;
  #L086384.  v22:= v3 @kind object;
  #L086388.  v3:= v17;
  #L08638c.  v17:= v22 @kind object;
  #L086390.  goto L0862c4;
  #L086392.  v21:= "no-store" @kind object;
  #L086396.  v0:= v21 @kind object;
  #L08639a.  v1:= v20 @kind object;
  #L08639e.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L0863a4.  v21:= temp;
  #L0863a6.  if v21 == 0 then goto L0863b0;
  #L0863aa.  v4:= 1I;
  #L0863ac.  goto L08623e;
  #L0863b0.  v21:= "max-age" @kind object;
  #L0863b4.  v0:= v21 @kind object;
  #L0863b8.  v1:= v20 @kind object;
  #L0863bc.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L0863c2.  v21:= temp;
  #L0863c4.  if v21 == 0 then goto L0863da;
  #L0863c8.  v5:= -1I;
  #L0863ca.  v0:= v17 @kind object;
  #L0863ce.  call temp:= `b`(v0, v5) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L0863d4.  v5:= temp;
  #L0863d6.  goto L08623e;
  #L0863da.  v21:= "s-maxage" @kind object;
  #L0863de.  v0:= v21 @kind object;
  #L0863e2.  v1:= v20 @kind object;
  #L0863e6.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L0863ec.  v21:= temp;
  #L0863ee.  if v21 == 0 then goto L086404;
  #L0863f2.  v6:= -1I;
  #L0863f4.  v0:= v17 @kind object;
  #L0863f8.  call temp:= `b`(v0, v6) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L0863fe.  v6:= temp;
  #L086400.  goto L08623e;
  #L086404.  v21:= "private" @kind object;
  #L086408.  v0:= v21 @kind object;
  #L08640c.  v1:= v20 @kind object;
  #L086410.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L086416.  v21:= temp;
  #L086418.  if v21 == 0 then goto L086422;
  #L08641c.  v7:= 1I;
  #L08641e.  goto L08623e;
  #L086422.  v21:= "public" @kind object;
  #L086426.  v0:= v21 @kind object;
  #L08642a.  v1:= v20 @kind object;
  #L08642e.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L086434.  v21:= temp;
  #L086436.  if v21 == 0 then goto L086440;
  #L08643a.  v8:= 1I;
  #L08643c.  goto L08623e;
  #L086440.  v21:= "must-revalidate" @kind object;
  #L086444.  v0:= v21 @kind object;
  #L086448.  v1:= v20 @kind object;
  #L08644c.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L086452.  v21:= temp;
  #L086454.  if v21 == 0 then goto L08645e;
  #L086458.  v9:= 1I;
  #L08645a.  goto L08623e;
  #L08645e.  v21:= "max-stale" @kind object;
  #L086462.  v0:= v21 @kind object;
  #L086466.  v1:= v20 @kind object;
  #L08646a.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L086470.  v21:= temp;
  #L086472.  if v21 == 0 then goto L08648c;
  #L086476.  v10:= 2147483647I;
  #L08647c.  v0:= v17 @kind object;
  #L086480.  call temp:= `b`(v0, v10) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L086486.  v10:= temp;
  #L086488.  goto L08623e;
  #L08648c.  v21:= "min-fresh" @kind object;
  #L086490.  v0:= v21 @kind object;
  #L086494.  v1:= v20 @kind object;
  #L086498.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08649e.  v21:= temp;
  #L0864a0.  if v21 == 0 then goto L0864b6;
  #L0864a4.  v11:= -1I;
  #L0864a6.  v0:= v17 @kind object;
  #L0864aa.  call temp:= `b`(v0, v11) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L0864b0.  v11:= temp;
  #L0864b2.  goto L08623e;
  #L0864b6.  v17:= "only-if-cached" @kind object;
  #L0864ba.  v0:= v17 @kind object;
  #L0864be.  v1:= v20 @kind object;
  #L0864c2.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L0864c8.  v17:= temp;
  #L0864ca.  if v17 == 0 then goto L0864d4;
  #L0864ce.  v12:= 1I;
  #L0864d0.  goto L08623e;
  #L0864d4.  v17:= "no-transform" @kind object;
  #L0864d8.  v0:= v17 @kind object;
  #L0864dc.  v1:= v20 @kind object;
  #L0864e0.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L0864e6.  v17:= temp;
  #L0864e8.  if v17 == 0 then goto L08623e;
  #L0864ec.  v13:= 1I;
  #L0864ee.  goto L08623e;
  #L0864f2.  v16:= v3;
  #L0864f6.  v3:= v18 + 1;
  #L0864fa.  v18:= v3;
  #L0864fe.  v3:= v16;
  #L086502.  goto L0861ec;
  #L086506.  if v15 != 0 then goto L086518;
  #L08650a.  v14:= 0I;
  #L08650c.  v2:= new `a.d`;
  #L086510.  call `<init>`(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) @signature `La/d;.<init>:(ZZIIZZZIIZZLjava/lang/String;)V` @kind direct;
  #L086516.  return v2 @kind object;
  #L086518.  v14:= v2 @kind object;
  #L08651a.  goto L08650c;
}
procedure `java.lang.String` `j`(`a.d` v4 @kind this) @signature `La/d;.j:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08652c.  v3:= -1I;
  #L08652e.  v0:= new `java.lang.StringBuilder`;
  #L086532.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L086538.  v1:= v4.`a.d.d` @type ^`boolean` @kind boolean;
  #L08653c.  if v1 == 0 then goto L08654a;
  #L086540.  v1:= "no-cache, " @kind object;
  #L086544.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08654a.  v1:= v4.`a.d.e` @type ^`boolean` @kind boolean;
  #L08654e.  if v1 == 0 then goto L08655c;
  #L086552.  v1:= "no-store, " @kind object;
  #L086556.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08655c.  v1:= v4.`a.d.f` @type ^`int`;
  #L086560.  if v1 == v3 then goto L086586;
  #L086564.  v1:= "max-age=" @kind object;
  #L086568.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08656e.  v1:= temp @kind object;
  #L086570.  v2:= v4.`a.d.f` @type ^`int`;
  #L086574.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08657a.  v1:= temp @kind object;
  #L08657c.  v2:= ", " @kind object;
  #L086580.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L086586.  v1:= v4.`a.d.g` @type ^`int`;
  #L08658a.  if v1 == v3 then goto L0865b0;
  #L08658e.  v1:= "s-maxage=" @kind object;
  #L086592.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L086598.  v1:= temp @kind object;
  #L08659a.  v2:= v4.`a.d.g` @type ^`int`;
  #L08659e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0865a4.  v1:= temp @kind object;
  #L0865a6.  v2:= ", " @kind object;
  #L0865aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0865b0.  v1:= v4.`a.d.h` @type ^`boolean` @kind boolean;
  #L0865b4.  if v1 == 0 then goto L0865c2;
  #L0865b8.  v1:= "private, " @kind object;
  #L0865bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0865c2.  v1:= v4.`a.d.i` @type ^`boolean` @kind boolean;
  #L0865c6.  if v1 == 0 then goto L0865d4;
  #L0865ca.  v1:= "public, " @kind object;
  #L0865ce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0865d4.  v1:= v4.`a.d.j` @type ^`boolean` @kind boolean;
  #L0865d8.  if v1 == 0 then goto L0865e6;
  #L0865dc.  v1:= "must-revalidate, " @kind object;
  #L0865e0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0865e6.  v1:= v4.`a.d.k` @type ^`int`;
  #L0865ea.  if v1 == v3 then goto L086610;
  #L0865ee.  v1:= "max-stale=" @kind object;
  #L0865f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0865f8.  v1:= temp @kind object;
  #L0865fa.  v2:= v4.`a.d.k` @type ^`int`;
  #L0865fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L086604.  v1:= temp @kind object;
  #L086606.  v2:= ", " @kind object;
  #L08660a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L086610.  v1:= v4.`a.d.l` @type ^`int`;
  #L086614.  if v1 == v3 then goto L08663a;
  #L086618.  v1:= "min-fresh=" @kind object;
  #L08661c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L086622.  v1:= temp @kind object;
  #L086624.  v2:= v4.`a.d.l` @type ^`int`;
  #L086628.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08662e.  v1:= temp @kind object;
  #L086630.  v2:= ", " @kind object;
  #L086634.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08663a.  v1:= v4.`a.d.m` @type ^`boolean` @kind boolean;
  #L08663e.  if v1 == 0 then goto L08664c;
  #L086642.  v1:= "only-if-cached, " @kind object;
  #L086646.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08664c.  v1:= v4.`a.d.n` @type ^`boolean` @kind boolean;
  #L086650.  if v1 == 0 then goto L08665e;
  #L086654.  v1:= "no-transform, " @kind object;
  #L086658.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08665e.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L086664.  v1:= temp;
  #L086666.  if v1 != 0 then goto L086670;
  #L08666a.  v0:= "" @kind object;
  #L08666e.  return v0 @kind object;
  #L086670.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L086676.  v1:= temp;
  #L086678.  v1:= v1 + -2;
  #L08667c.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L086682.  v2:= temp;
  #L086684.  call temp:= `delete`(v0, v1, v2) @signature `Ljava/lang/StringBuilder;.delete:(II)Ljava/lang/StringBuilder;` @kind virtual;
  #L08668a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L086690.  v0:= temp @kind object;
  #L086692.  goto L08666e;
}
procedure `boolean` `a`(`a.d` v1 @kind this) @signature `La/d;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0866a4.  v0:= v1.`a.d.d` @type ^`boolean` @kind boolean;
  #L0866a8.  return v0;
}
procedure `boolean` `b`(`a.d` v1 @kind this) @signature `La/d;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0866bc.  v0:= v1.`a.d.e` @type ^`boolean` @kind boolean;
  #L0866c0.  return v0;
}
procedure `int` `c`(`a.d` v1 @kind this) @signature `La/d;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0866d4.  v0:= v1.`a.d.f` @type ^`int`;
  #L0866d8.  return v0;
}
procedure `boolean` `d`(`a.d` v1 @kind this) @signature `La/d;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0866ec.  v0:= v1.`a.d.h` @type ^`boolean` @kind boolean;
  #L0866f0.  return v0;
}
procedure `boolean` `e`(`a.d` v1 @kind this) @signature `La/d;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L086704.  v0:= v1.`a.d.i` @type ^`boolean` @kind boolean;
  #L086708.  return v0;
}
procedure `boolean` `f`(`a.d` v1 @kind this) @signature `La/d;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08671c.  v0:= v1.`a.d.j` @type ^`boolean` @kind boolean;
  #L086720.  return v0;
}
procedure `int` `g`(`a.d` v1 @kind this) @signature `La/d;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L086734.  v0:= v1.`a.d.k` @type ^`int`;
  #L086738.  return v0;
}
procedure `int` `h`(`a.d` v1 @kind this) @signature `La/d;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08674c.  v0:= v1.`a.d.l` @type ^`int`;
  #L086750.  return v0;
}
procedure `boolean` `i`(`a.d` v1 @kind this) @signature `La/d;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L086764.  v0:= v1.`a.d.m` @type ^`boolean` @kind boolean;
  #L086768.  return v0;
}
procedure `java.lang.String` `toString`(`a.d` v1 @kind this) @signature `La/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08677c.  v0:= v1.`a.d.c` @type ^`java.lang.String` @kind object;
  #L086780.  if v0 == 0 then goto L086786;
  #L086784.  return v0 @kind object;
  #L086786.  call temp:= `j`(v1) @signature `La/d;.j:()Ljava/lang/String;` @kind direct;
  #L08678c.  v0:= temp @kind object;
  #L08678e.  v1.`a.d.c` @type ^`java.lang.String` := v0 @kind object;
  #L086792.  goto L086784;
}
