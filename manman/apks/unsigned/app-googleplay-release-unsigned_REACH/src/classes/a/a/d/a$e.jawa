record `a.a.d.a$e` @kind class @AccessFlag  extends `a.a.d.a$a` @kind class {
  `a.a.d.a` `a.a.d.a$e.d` @AccessFlag FINAL_SYNTHETIC;
  `long` `a.a.d.a$e.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$e` v4 @kind this, `a.a.d.a` v5 @kind object, `long` v6 ) @signature `La/a/d/a$e;.<init>:(La/a/d/a;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07b400.  v4.`a.a.d.a$e.d` @type ^`a.a.d.a` := v5 @kind object;
  #L07b404.  v0:= 0I;
  #L07b406.  call `<init>`(v4, v5, v0) @signature `La/a/d/a$a;.<init>:(La/a/d/a;La/a/d/a$1;)V` @kind direct;
  #L07b40c.  v4.`a.a.d.a$e.e` @type ^`long` := v6 @kind wide;
  #L07b410.  v0:= v4.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07b414.  v2:= 0L;
  #L07b418.  v0:= lcmp(v0, v2);
  #L07b41c.  if v0 != 0 then goto L07b428;
  #L07b420.  v0:= 1I;
  #L07b422.  call `a`(v4, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L07b428.  return @kind void;
}
procedure `long` `a`(`a.a.d.a$e` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `La/a/d/a$e;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L07b43c.  v0:= -1L;
  #L07b440.  v6:= 0L;
  #L07b444.  v2:= lcmp(v10, v6);
  #L07b448.  if v2 >= 0 then goto L07b47e;
  #L07b44c.  v0:= new `java.lang.IllegalArgumentException`;
  #L07b450.  v1:= new `java.lang.StringBuilder`;
  #L07b454.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07b45a.  v2:= "byteCount < 0: " @kind object;
  #L07b45e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b464.  v1:= temp @kind object;
  #L07b466.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b46c.  v1:= temp @kind object;
  #L07b46e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07b474.  v1:= temp @kind object;
  #L07b476.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b47c.  throw v0;
  #L07b47e.  v2:= v8.`a.a.d.a$e.b` @type ^`boolean` @kind boolean;
  #L07b482.  if v2 == 0 then goto L07b496;
  #L07b486.  v0:= new `java.lang.IllegalStateException`;
  #L07b48a.  v1:= "closed" @kind object;
  #L07b48e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b494.  throw v0;
  #L07b496.  v2:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07b49a.  v2:= lcmp(v2, v6);
  #L07b49e.  if v2 != 0 then goto L07b4a4;
  #L07b4a2.  return v0 @kind wide;
  #L07b4a4.  v2:= v8.`a.a.d.a$e.d` @type ^`a.a.d.a` @kind object;
  #L07b4a8.  v2:= v2.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07b4ac.  v4:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07b4b0.  call temp:= `min`(v4, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L07b4b6.  v4:= temp @kind wide;
  #L07b4b8.  call temp:= `a`(v2, v9, v4) @signature `Lb/e;.a:(Lb/c;J)J` @kind interface;
  #L07b4be.  v2:= temp @kind wide;
  #L07b4c0.  v0:= lcmp(v2, v0);
  #L07b4c4.  if v0 != 0 then goto L07b4e0;
  #L07b4c8.  v0:= 0I;
  #L07b4ca.  call `a`(v8, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L07b4d0.  v0:= new `java.net.ProtocolException`;
  #L07b4d4.  v1:= "unexpected end of stream" @kind object;
  #L07b4d8.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b4de.  throw v0;
  #L07b4e0.  v0:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07b4e4.  v0:= v0 - v2 @kind long;
  #L07b4e6.  v8.`a.a.d.a$e.e` @type ^`long` := v0 @kind wide;
  #L07b4ea.  v0:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07b4ee.  v0:= lcmp(v0, v6);
  #L07b4f2.  if v0 != 0 then goto L07b4fe;
  #L07b4f6.  v0:= 1I;
  #L07b4f8.  call `a`(v8, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L07b4fe.  v0:= v2 @kind wide;
  #L07b500.  goto L07b4a2;
}
procedure `void` `close`(`a.a.d.a$e` v4 @kind this) @signature `La/a/d/a$e;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07b514.  v0:= v4.`a.a.d.a$e.b` @type ^`boolean` @kind boolean;
  #L07b518.  if v0 == 0 then goto L07b51e;
  #L07b51c.  return @kind void;
  #L07b51e.  v0:= v4.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07b522.  v2:= 0L;
  #L07b526.  v0:= lcmp(v0, v2);
  #L07b52a.  if v0 == 0 then goto L07b54a;
  #L07b52e.  v0:= 100I;
  #L07b532.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L07b536.  call temp:= `a`(v4, v0, v1) @signature `La/a/c;.a:(Lb/r;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L07b53c.  v0:= temp;
  #L07b53e.  if v0 != 0 then goto L07b54a;
  #L07b542.  v0:= 0I;
  #L07b544.  call `a`(v4, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L07b54a.  v0:= 1I;
  #L07b54c.  v4.`a.a.d.a$e.b` @type ^`boolean` := v0 @kind boolean;
  #L07b550.  goto L07b51c;
}
