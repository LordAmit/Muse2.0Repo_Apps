record `a.a.d.a$b` @kind class @AccessFlag FINAL extends `b.q` @kind interface {
  `a.a.d.a` `a.a.d.a$b.a` @AccessFlag FINAL_SYNTHETIC;
  `b.h` `a.a.d.a$b.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.a.d.a$b.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$b` v2 @kind this, `a.a.d.a` v3 @kind object) @signature `La/a/d/a$b;.<init>:(La/a/d/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07ae60.  v2.`a.a.d.a$b.a` @type ^`a.a.d.a` := v3 @kind object;
  #L07ae64.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07ae6a.  v0:= new `b.h`;
  #L07ae6e.  v1:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07ae72.  v1:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07ae76.  call temp:= `a`(v1) @signature `Lb/d;.a:()Lb/s;` @kind interface;
  #L07ae7c.  v1:= temp @kind object;
  #L07ae7e.  call `<init>`(v0, v1) @signature `Lb/h;.<init>:(Lb/s;)V` @kind direct;
  #L07ae84.  v2.`a.a.d.a$b.b` @type ^`b.h` := v0 @kind object;
  #L07ae88.  return @kind void;
}
procedure `b.s` `a`(`a.a.d.a$b` v1 @kind this) @signature `La/a/d/a$b;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07ae9c.  v0:= v1.`a.a.d.a$b.b` @type ^`b.h` @kind object;
  #L07aea0.  return v0 @kind object;
}
procedure `void` `a_`(`a.a.d.a$b` v2 @kind this, `b.c` v3 @kind object, `long` v4 ) @signature `La/a/d/a$b;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07aeb4.  v0:= v2.`a.a.d.a$b.c` @type ^`boolean` @kind boolean;
  #L07aeb8.  if v0 == 0 then goto L07aecc;
  #L07aebc.  v0:= new `java.lang.IllegalStateException`;
  #L07aec0.  v1:= "closed" @kind object;
  #L07aec4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07aeca.  throw v0;
  #L07aecc.  v0:= 0L;
  #L07aed0.  v0:= lcmp(v4, v0);
  #L07aed4.  if v0 != 0 then goto L07aeda;
  #L07aed8.  return @kind void;
  #L07aeda.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07aede.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07aee2.  call temp:= `j`(v0, v4) @signature `Lb/d;.j:(J)Lb/d;` @kind interface;
  #L07aee8.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07aeec.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07aef0.  v1:= "\r\n" @kind object;
  #L07aef4.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07aefa.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07aefe.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07af02.  call `a_`(v0, v3, v4) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L07af08.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07af0c.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07af10.  v1:= "\r\n" @kind object;
  #L07af14.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07af1a.  goto L07aed8;
}
procedure `void` `close`(`a.a.d.a$b` v2 @kind this) @signature `La/a/d/a$b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07af2c.  @monitorenter v2
  #Try_start0.  
  #L07af2e.  v0:= v2.`a.a.d.a$b.c` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L07af32.  if v0 == 0 then goto L07af3a;
  #L07af36.  @monitorexit v2
  #L07af38.  return @kind void;
  #L07af3a.  v0:= 1I;
  #Try_start1.  
  #L07af3c.  v2.`a.a.d.a$b.c` @type ^`boolean` := v0 @kind boolean;
  #L07af40.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07af44.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07af48.  v1:= "0\r\n\r\n" @kind object;
  #L07af4c.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07af52.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07af56.  v1:= v2.`a.a.d.a$b.b` @type ^`b.h` @kind object;
  #L07af5a.  call `a`(v0, v1) @signature `La/a/d/a;.a:(Lb/h;)V` @kind virtual;
  #L07af60.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07af64.  v1:= 3I;
  #L07af66.  v0.`a.a.d.a.e` @type ^`int` := v1;
  #Try_end1.  
  #L07af6a.  goto L07af36;
  #L07af6c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07af6e.  @monitorexit v2
  #L07af70.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07af6c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07af6c;
}
procedure `void` `flush`(`a.a.d.a$b` v1 @kind this) @signature `La/a/d/a$b;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07af98.  @monitorenter v1
  #Try_start0.  
  #L07af9a.  v0:= v1.`a.a.d.a$b.c` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L07af9e.  if v0 == 0 then goto L07afa6;
  #L07afa2.  @monitorexit v1
  #L07afa4.  return @kind void;
  #Try_start1.  
  #L07afa6.  v0:= v1.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07afaa.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07afae.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L07afb4.  goto L07afa2;
  #L07afb6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07afb8.  @monitorexit v1
  #L07afba.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07afb6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07afb6;
}
