record `a.a.h.a` @kind class @AccessFlag PUBLIC_FINAL extends `a.a.h.b` @kind class {
  `a.a.h.e` `a.a.h.a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.h.a` v0 @kind this, `a.a.h.e` v1 @kind object) @signature `La/a/h/a;.<init>:(La/a/h/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L08406c.  call `<init>`(v0) @signature `La/a/h/b;.<init>:()V` @kind direct;
  #L084072.  v0.`a.a.h.a.a` @type ^`a.a.h.e` := v1 @kind object;
  #L084076.  return @kind void;
}
procedure `boolean` `a`(`a.a.h.a` v3 @kind this, `java.security.cert.X509Certificate` v4 @kind object, `java.security.cert.X509Certificate` v5 @kind object) @signature `La/a/h/a;.a:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L084088.  v0:= 0I;
  #L08408a.  call temp:= `getIssuerDN`(v4) @signature `Ljava/security/cert/X509Certificate;.getIssuerDN:()Ljava/security/Principal;` @kind virtual;
  #L084090.  v1:= temp @kind object;
  #L084092.  call temp:= `getSubjectDN`(v5) @signature `Ljava/security/cert/X509Certificate;.getSubjectDN:()Ljava/security/Principal;` @kind virtual;
  #L084098.  v2:= temp @kind object;
  #L08409a.  call temp:= `equals`(v1, v2) @signature `Ljava/security/Principal;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L0840a0.  v1:= temp;
  #L0840a2.  if v1 != 0 then goto L0840a8;
  #L0840a6.  return v0;
  #Try_start0.  
  #L0840a8.  call temp:= `getPublicKey`(v5) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L0840ae.  v1:= temp @kind object;
  #L0840b0.  call `verify`(v4, v1) @signature `Ljava/security/cert/X509Certificate;.verify:(Ljava/security/PublicKey;)V` @kind virtual;
  #Try_end0.  
  #L0840b6.  v0:= 1I;
  #L0840b8.  goto L0840a6;
  #L0840ba.  v1:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L0840bc.  goto L0840a6;
  catch `java.security.GeneralSecurityException` @[Try_start0..Try_end0] goto L0840ba;
}
procedure `java.util.List` `a`(`a.a.h.a` v9 @kind this, `java.util.List` v10 @kind object, `java.lang.String` v11 @kind object) @signature `La/a/h/a;.a:(Ljava/util/List;Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L0840e0.  v2:= 1I;
  #L0840e2.  v0:= 0I;
  #L0840e4.  v6:= new `java.util.ArrayDeque`;
  #L0840e8.  call `<init>`(v6, v10) @signature `Ljava/util/ArrayDeque;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L0840ee.  v4:= new `java.util.ArrayList`;
  #L0840f2.  call `<init>`(v4) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L0840f8.  call temp:= `removeFirst`(v6) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L0840fe.  v1:= temp @kind object;
  #L084100.  call temp:= `add`(v4, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L084106.  v5:= v0;
  #L084108.  v3:= v0;
  #L08410a.  v0:= 9I;
  #L08410e.  if v5 >= v0 then goto L0841ea;
  #L084112.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L084118.  v0:= temp;
  #L08411a.  v0:= v0 + -1;
  #L08411e.  call temp:= `get`(v4, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L084124.  v0:= temp @kind object;
  #L084126.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L08412a.  v1:= v9.`a.a.h.a.a` @type ^`a.a.h.e` @kind object;
  #L08412e.  call temp:= `a`(v1, v0) @signature `La/a/h/e;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @kind virtual;
  #L084134.  v1:= temp @kind object;
  #L084136.  if v1 == 0 then goto L084174;
  #L08413a.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L084140.  v3:= temp;
  #L084142.  if v3 > v2 then goto L084152;
  #L084146.  call temp:= `equals`(v0, v1) @signature `Ljava/security/cert/X509Certificate;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08414c.  v0:= temp;
  #L08414e.  if v0 != 0 then goto L084158;
  #L084152.  call temp:= `add`(v4, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L084158.  call temp:= `a`(v9, v1, v1) @signature `La/a/h/a;.a:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L08415e.  v0:= temp;
  #L084160.  if v0 == 0 then goto L084168;
  #L084164.  v0:= v4 @kind object;
  #L084166.  return v0 @kind object;
  #L084168.  v0:= v2;
  #L08416a.  v1:= v5 + 1;
  #L08416e.  v5:= v1;
  #L084170.  v3:= v0;
  #L084172.  goto L08410a;
  #L084174.  call temp:= `iterator`(v6) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L08417a.  v7:= temp @kind object;
  #L08417c.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L084182.  v1:= temp;
  #L084184.  if v1 == 0 then goto L0841b0;
  #L084188.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L08418e.  v1:= temp @kind object;
  #L084190.  v1:= (`java.security.cert.X509Certificate`) v1 @kind object;
  #L084194.  call temp:= `a`(v9, v0, v1) @signature `La/a/h/a;.a:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L08419a.  v8:= temp;
  #L08419c.  if v8 == 0 then goto L08417c;
  #L0841a0.  call `remove`(v7) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L0841a6.  call temp:= `add`(v4, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L0841ac.  v0:= v3;
  #L0841ae.  goto L08416a;
  #L0841b0.  if v3 == 0 then goto L0841b8;
  #L0841b4.  v0:= v4 @kind object;
  #L0841b6.  goto L084166;
  #L0841b8.  v1:= new `javax.net.ssl.SSLPeerUnverifiedException`;
  #L0841bc.  v2:= new `java.lang.StringBuilder`;
  #L0841c0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0841c6.  v3:= "Failed to find a trusted cert that signed " @kind object;
  #L0841ca.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0841d0.  v2:= temp @kind object;
  #L0841d2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0841d8.  v0:= temp @kind object;
  #L0841da.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0841e0.  v0:= temp @kind object;
  #L0841e2.  call `<init>`(v1, v0) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0841e8.  throw v1;
  #L0841ea.  v0:= new `javax.net.ssl.SSLPeerUnverifiedException`;
  #L0841ee.  v1:= new `java.lang.StringBuilder`;
  #L0841f2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0841f8.  v2:= "Certificate chain too long: " @kind object;
  #L0841fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L084202.  v1:= temp @kind object;
  #L084204.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08420a.  v1:= temp @kind object;
  #L08420c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L084212.  v1:= temp @kind object;
  #L084214.  call `<init>`(v0, v1) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08421a.  throw v0;
}
procedure `boolean` `equals`(`a.a.h.a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `La/a/h/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L08422c.  v0:= 1I;
  #L08422e.  if v4 != v3 then goto L084234;
  #L084232.  return v0;
  #L084234.  v1:= instanceof @variable v4 @type ^`a.a.h.a` @kind boolean;
  #L084238.  if v1 == 0 then goto L084254;
  #L08423c.  v4:= (`a.a.h.a`) v4 @kind object;
  #L084240.  v1:= v4.`a.a.h.a.a` @type ^`a.a.h.e` @kind object;
  #L084244.  v2:= v3.`a.a.h.a.a` @type ^`a.a.h.e` @kind object;
  #L084248.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08424e.  v1:= temp;
  #L084250.  if v1 != 0 then goto L084232;
  #L084254.  v0:= 0I;
  #L084256.  goto L084232;
}
procedure `int` `hashCode`(`a.a.h.a` v1 @kind this) @signature `La/a/h/a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L084268.  v0:= v1.`a.a.h.a.a` @type ^`a.a.h.e` @kind object;
  #L08426c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L084272.  v0:= temp;
  #L084274.  return v0;
}
