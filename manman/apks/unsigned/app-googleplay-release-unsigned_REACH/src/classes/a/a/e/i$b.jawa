record `a.a.e.i$b` @kind class @AccessFlag FINAL extends `b.r` @kind interface {
  `boolean` `a.a.e.i$b.a` @AccessFlag ;
  `boolean` `a.a.e.i$b.b` @AccessFlag ;
  `a.a.e.i` `a.a.e.i$b.d` @AccessFlag FINAL_SYNTHETIC;
  `b.c` `a.a.e.i$b.e` @AccessFlag PRIVATE_FINAL;
  `b.c` `a.a.e.i$b.f` @AccessFlag PRIVATE_FINAL;
  `long` `a.a.e.i$b.g` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.a.e.i$b.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/e/i$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L080584.  v0:= constclass @type ^`a.a.e.i` @kind object;
  #L080588.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L08058e.  v0:= temp;
  #L080590.  if v0 != 0 then goto L08059c;
  #L080594.  v0:= 1I;
  #L080596.  `@@a.a.e.i$b.c` @type ^`boolean` := v0 @kind boolean;
  #L08059a.  return @kind void;
  #L08059c.  v0:= 0I;
  #L08059e.  goto L080596;
}
procedure `void` `<init>`(`a.a.e.i$b` v2 @kind this, `a.a.e.i` v3 @kind object, `long` v4 ) @signature `La/a/e/i$b;.<init>:(La/a/e/i;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L0805b0.  v2.`a.a.e.i$b.d` @type ^`a.a.e.i` := v3 @kind object;
  #L0805b4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0805ba.  v0:= new `b.c`;
  #L0805be.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L0805c4.  v2.`a.a.e.i$b.e` @type ^`b.c` := v0 @kind object;
  #L0805c8.  v0:= new `b.c`;
  #L0805cc.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L0805d2.  v2.`a.a.e.i$b.f` @type ^`b.c` := v0 @kind object;
  #L0805d6.  v2.`a.a.e.i$b.g` @type ^`long` := v4 @kind wide;
  #L0805da.  return @kind void;
}
procedure `void` `b`(`a.a.e.i$b` v4 @kind this) @signature `La/a/e/i$b;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0805ec.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0805f0.  v0:= v0.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L0805f4.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_start0.  
  #L0805fa.  v0:= v4.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L0805fe.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L080604.  v0:= temp @kind wide;
  #L080606.  v2:= 0L;
  #L08060a.  v0:= lcmp(v0, v2);
  #L08060e.  if v0 != 0 then goto L08064c;
  #L080612.  v0:= v4.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L080616.  if v0 != 0 then goto L08064c;
  #L08061a.  v0:= v4.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L08061e.  if v0 != 0 then goto L08064c;
  #L080622.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L080626.  v0:= v0.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L08062a.  if v0 != 0 then goto L08064c;
  #L08062e.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L080632.  call `l`(v0) @signature `La/a/e/i;.l:()V` @kind virtual;
  #Try_end0.  
  #L080638.  goto L0805fa;
  #L08063a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08063c.  v1:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L080640.  v1:= v1.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L080644.  call `b`(v1) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L08064a.  throw v0;
  #L08064c.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L080650.  v0:= v0.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L080654.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L08065a.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08063a;
}
procedure `void` `c`(`a.a.e.i$b` v2 @kind this) @signature `La/a/e/i$b;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L080678.  v0:= v2.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L08067c.  if v0 == 0 then goto L080690;
  #L080680.  v0:= new `java.io.IOException`;
  #L080684.  v1:= "stream closed" @kind object;
  #L080688.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08068e.  throw v0;
  #L080690.  v0:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L080694.  v0:= v0.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L080698.  if v0 == 0 then goto L0806b0;
  #L08069c.  v0:= new `a.a.e.o`;
  #L0806a0.  v1:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0806a4.  v1:= v1.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L0806a8.  call `<init>`(v0, v1) @signature `La/a/e/o;.<init>:(La/a/e/b;)V` @kind direct;
  #L0806ae.  throw v0;
  #L0806b0.  return @kind void;
}
procedure `long` `a`(`a.a.e.i$b` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `La/a/e/i$b;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L0806c4.  v4:= 0L;
  #L0806c8.  v0:= lcmp(v10, v4);
  #L0806cc.  if v0 >= 0 then goto L080702;
  #L0806d0.  v0:= new `java.lang.IllegalArgumentException`;
  #L0806d4.  v1:= new `java.lang.StringBuilder`;
  #L0806d8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0806de.  v2:= "byteCount < 0: " @kind object;
  #L0806e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0806e8.  v1:= temp @kind object;
  #L0806ea.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L0806f0.  v1:= temp @kind object;
  #L0806f2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0806f8.  v1:= temp @kind object;
  #L0806fa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080700.  throw v0;
  #L080702.  v2:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L080706.  @monitorenter v2
  #Try_start0.  
  #L080708.  call `b`(v8) @signature `La/a/e/i$b;.b:()V` @kind direct;
  #L08070e.  call `c`(v8) @signature `La/a/e/i$b;.c:()V` @kind direct;
  #L080714.  v0:= v8.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L080718.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L08071e.  v0:= temp @kind wide;
  #L080720.  v0:= lcmp(v0, v4);
  #L080724.  if v0 != 0 then goto L080730;
  #L080728.  v0:= -1L;
  #L08072c.  @monitorexit v2
  #L08072e.  return v0 @kind wide;
  #L080730.  v0:= v8.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L080734.  v1:= v8.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L080738.  call temp:= `b`(v1) @signature `Lb/c;.b:()J` @kind virtual;
  #L08073e.  v4:= temp @kind wide;
  #L080740.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L080746.  v4:= temp @kind wide;
  #L080748.  call temp:= `a`(v0, v9, v4) @signature `Lb/c;.a:(Lb/c;J)J` @kind virtual;
  #L08074e.  v0:= temp @kind wide;
  #L080750.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L080754.  v4:= v3.`a.a.e.i.a` @type ^`long` @kind wide;
  #L080758.  v4:= v4 + v0 @kind long;
  #L08075a.  v3.`a.a.e.i.a` @type ^`long` := v4 @kind wide;
  #L08075e.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L080762.  v4:= v3.`a.a.e.i.a` @type ^`long` @kind wide;
  #L080766.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L08076a.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L08076e.  v3:= v3.`a.a.e.g.l` @type ^`a.a.e.n` @kind object;
  #L080772.  call temp:= `d`(v3) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L080778.  v3:= temp;
  #L08077a.  v3:= v3 / 2;
  #L08077e.  v6:= (`long`) v3 @kind i2l;
  #L080780.  v3:= lcmp(v4, v6);
  #L080784.  if v3 < 0 then goto L0807b2;
  #L080788.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L08078c.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L080790.  v4:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L080794.  v4:= v4.`a.a.e.i.c` @type ^`int`;
  #L080798.  v5:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L08079c.  v6:= v5.`a.a.e.i.a` @type ^`long` @kind wide;
  #L0807a0.  call `a`(v3, v4, v6) @signature `La/a/e/g;.a:(IJ)V` @kind virtual;
  #L0807a6.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0807aa.  v4:= 0L;
  #L0807ae.  v3.`a.a.e.i.a` @type ^`long` := v4 @kind wide;
  #L0807b2.  @monitorexit v2
  #Try_end0.  
  #L0807b4.  v2:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0807b8.  v2:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L0807bc.  @monitorenter v2
  #Try_start1.  
  #L0807be.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0807c2.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L0807c6.  v4:= v3.`a.a.e.g.j` @type ^`long` @kind wide;
  #L0807ca.  v4:= v4 + v0 @kind long;
  #L0807cc.  v3.`a.a.e.g.j` @type ^`long` := v4 @kind wide;
  #L0807d0.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0807d4.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L0807d8.  v4:= v3.`a.a.e.g.j` @type ^`long` @kind wide;
  #L0807dc.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0807e0.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L0807e4.  v3:= v3.`a.a.e.g.l` @type ^`a.a.e.n` @kind object;
  #L0807e8.  call temp:= `d`(v3) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L0807ee.  v3:= temp;
  #L0807f0.  v3:= v3 / 2;
  #L0807f4.  v6:= (`long`) v3 @kind i2l;
  #L0807f6.  v3:= lcmp(v4, v6);
  #L0807fa.  if v3 < 0 then goto L08082a;
  #L0807fe.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L080802.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L080806.  v4:= 0I;
  #L080808.  v5:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L08080c.  v5:= v5.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L080810.  v6:= v5.`a.a.e.g.j` @type ^`long` @kind wide;
  #L080814.  call `a`(v3, v4, v6) @signature `La/a/e/g;.a:(IJ)V` @kind virtual;
  #L08081a.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L08081e.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L080822.  v4:= 0L;
  #L080826.  v3.`a.a.e.g.j` @type ^`long` := v4 @kind wide;
  #L08082a.  @monitorexit v2
  #L08082c.  goto L08072e;
  #L08082e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L080830.  @monitorexit v2
  #Try_end1.  
  #L080832.  throw v0;
  #L080834.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start2.  
  #L080836.  @monitorexit v2
  #Try_end2.  
  #L080838.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L080834;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08082e;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L080834;
}
procedure `b.s` `a`(`a.a.e.i$b` v1 @kind this) @signature `La/a/e/i$b;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08086c.  v0:= v1.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L080870.  v0:= v0.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L080874.  return v0 @kind object;
}
procedure `void` `a`(`a.a.e.i$b` v12 @kind this, `b.e` v13 @kind object, `long` v14 ) @signature `La/a/e/i$b;.a:(Lb/e;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L080888.  v10:= 0L;
  #L08088c.  v1:= 1I;
  #L08088e.  v2:= 0I;
  #L080890.  v0:= `@@a.a.e.i$b.c` @type ^`boolean` @kind boolean;
  #L080894.  if v0 != 0 then goto L0808f0;
  #L080898.  v0:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L08089c.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L0808a2.  v0:= temp;
  #L0808a4.  if v0 == 0 then goto L0808f0;
  #L0808a8.  v0:= new `java.lang.AssertionError`;
  #L0808ac.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0808b2.  throw v0;
  #L0808b4.  v14:= v14 - v4 @kind long;
  #L0808b6.  v3:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0808ba.  @monitorenter v3
  #Try_start0.  
  #L0808bc.  v0:= v12.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L0808c0.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L0808c6.  v4:= temp @kind wide;
  #L0808c8.  v0:= lcmp(v4, v10);
  #L0808cc.  if v0 != 0 then goto L080974;
  #L0808d0.  v0:= v1;
  #L0808d2.  v4:= v12.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L0808d6.  v5:= v12.`a.a.e.i$b.e` @type ^`b.c` @kind object;
  #L0808da.  call temp:= `a`(v4, v5) @signature `Lb/c;.a:(Lb/r;)J` @kind virtual;
  #L0808e0.  if v0 == 0 then goto L0808ee;
  #L0808e4.  v0:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0808e8.  call `notifyAll`(v0) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L0808ee.  @monitorexit v3
  #Try_end0.  
  #L0808f0.  v0:= lcmp(v14, v10);
  #L0808f4.  if v0 <= 0 then goto L080938;
  #L0808f8.  v3:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0808fc.  @monitorenter v3
  #Try_start1.  
  #L0808fe.  v4:= v12.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L080902.  v0:= v12.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L080906.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L08090c.  v6:= temp @kind wide;
  #L08090e.  v6:= v6 + v14 @kind long;
  #L080910.  v8:= v12.`a.a.e.i$b.g` @type ^`long` @kind wide;
  #L080914.  v0:= lcmp(v6, v8);
  #L080918.  if v0 <= 0 then goto L08093a;
  #L08091c.  v0:= v1;
  #L08091e.  @monitorexit v3
  #Try_end1.  
  #L080920.  if v0 == 0 then goto L080944;
  #L080924.  call `g`(v13, v14) @signature `Lb/e;.g:(J)V` @kind interface;
  #L08092a.  v0:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L08092e.  v1:= `@@a.a.e.b.d` @type ^`a.a.e.b` @kind object;
  #L080932.  call `b`(v0, v1) @signature `La/a/e/i;.b:(La/a/e/b;)V` @kind virtual;
  #L080938.  return @kind void;
  #L08093a.  v0:= v2;
  #L08093c.  goto L08091e;
  #L08093e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start2.  
  #L080940.  @monitorexit v3
  #Try_end2.  
  #L080942.  throw v0;
  #L080944.  if v4 == 0 then goto L080950;
  #L080948.  call `g`(v13, v14) @signature `Lb/e;.g:(J)V` @kind interface;
  #L08094e.  goto L080938;
  #L080950.  v0:= v12.`a.a.e.i$b.e` @type ^`b.c` @kind object;
  #L080954.  call temp:= `a`(v13, v0, v14) @signature `Lb/e;.a:(Lb/c;J)J` @kind interface;
  #L08095a.  v4:= temp @kind wide;
  #L08095c.  v6:= -1L;
  #L080960.  v0:= lcmp(v4, v6);
  #L080964.  if v0 != 0 then goto L0808b4;
  #L080968.  v0:= new `java.io.EOFException`;
  #L08096c.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L080972.  throw v0;
  #L080974.  v0:= v2;
  #L080976.  goto L0808d2;
  #L080978.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L08097a.  @monitorexit v3
  #Try_end3.  
  #L08097c.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L080978;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08093e;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L08093e;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L080978;
}
procedure `void` `close`(`a.a.e.i$b` v2 @kind this) @signature `La/a/e/i$b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0809b8.  v1:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0809bc.  @monitorenter v1
  #L0809be.  v0:= 1I;
  #Try_start0.  
  #L0809c0.  v2.`a.a.e.i$b.a` @type ^`boolean` := v0 @kind boolean;
  #L0809c4.  v0:= v2.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L0809c8.  call `r`(v0) @signature `Lb/c;.r:()V` @kind virtual;
  #L0809ce.  v0:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0809d2.  call `notifyAll`(v0) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L0809d8.  @monitorexit v1
  #Try_end0.  
  #L0809da.  v0:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L0809de.  call `j`(v0) @signature `La/a/e/i;.j:()V` @kind virtual;
  #L0809e4.  return @kind void;
  #L0809e6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L0809e8.  @monitorexit v1
  #Try_end1.  
  #L0809ea.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0809e6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0809e6;
}
