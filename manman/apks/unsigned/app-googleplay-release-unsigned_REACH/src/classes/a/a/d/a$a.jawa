record `a.a.d.a$a` @kind class @AccessFlag ABSTRACT extends `b.r` @kind interface {
  `b.h` `a.a.d.a$a.a` @AccessFlag PROTECTED_FINAL;
  `boolean` `a.a.d.a$a.b` @AccessFlag PROTECTED;
  `a.a.d.a` `a.a.d.a$a.c` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`a.a.d.a$a` v2 @kind this, `a.a.d.a` v3 @kind object) @signature `La/a/d/a$a;.<init>:(La/a/d/a;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07ad4c.  v2.`a.a.d.a$a.c` @type ^`a.a.d.a` := v3 @kind object;
  #L07ad50.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07ad56.  v0:= new `b.h`;
  #L07ad5a.  v1:= v2.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L07ad5e.  v1:= v1.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07ad62.  call temp:= `a`(v1) @signature `Lb/e;.a:()Lb/s;` @kind interface;
  #L07ad68.  v1:= temp @kind object;
  #L07ad6a.  call `<init>`(v0, v1) @signature `Lb/h;.<init>:(Lb/s;)V` @kind direct;
  #L07ad70.  v2.`a.a.d.a$a.a` @type ^`b.h` := v0 @kind object;
  #L07ad74.  return @kind void;
}
procedure `void` `<init>`(`a.a.d.a$a` v0 @kind this, `a.a.d.a` v1 @kind object, `a.a.d.a$1` v2 @kind object) @signature `La/a/d/a$a;.<init>:(La/a/d/a;La/a/d/a$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L07ad88.  call `<init>`(v0, v1) @signature `La/a/d/a$a;.<init>:(La/a/d/a;)V` @kind direct;
  #L07ad8e.  return @kind void;
}
procedure `b.s` `a`(`a.a.d.a$a` v1 @kind this) @signature `La/a/d/a$a;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07ada0.  v0:= v1.`a.a.d.a$a.a` @type ^`b.h` @kind object;
  #L07ada4.  return v0 @kind object;
}
procedure `void` `a`(`a.a.d.a$a` v3 @kind this, `boolean` v4 ) @signature `La/a/d/a$a;.a:(Z)V` @AccessFlag PROTECTED_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L07adb8.  v2:= 6I;
  #L07adba.  v0:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L07adbe.  v0:= v0.`a.a.d.a.e` @type ^`int`;
  #L07adc2.  if v0 != v2 then goto L07adc8;
  #L07adc6.  return @kind void;
  #L07adc8.  v0:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L07adcc.  v0:= v0.`a.a.d.a.e` @type ^`int`;
  #L07add0.  v1:= 5I;
  #L07add2.  if v0 == v1 then goto L07ae10;
  #L07add6.  v0:= new `java.lang.IllegalStateException`;
  #L07adda.  v1:= new `java.lang.StringBuilder`;
  #L07adde.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07ade4.  v2:= "state: " @kind object;
  #L07ade8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07adee.  v1:= temp @kind object;
  #L07adf0.  v2:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L07adf4.  v2:= v2.`a.a.d.a.e` @type ^`int`;
  #L07adf8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07adfe.  v1:= temp @kind object;
  #L07ae00.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07ae06.  v1:= temp @kind object;
  #L07ae08.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07ae0e.  throw v0;
  #L07ae10.  v0:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L07ae14.  v1:= v3.`a.a.d.a$a.a` @type ^`b.h` @kind object;
  #L07ae18.  call `a`(v0, v1) @signature `La/a/d/a;.a:(Lb/h;)V` @kind virtual;
  #L07ae1e.  v0:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L07ae22.  v0.`a.a.d.a.e` @type ^`int` := v2;
  #L07ae26.  v0:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L07ae2a.  v0:= v0.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L07ae2e.  if v0 == 0 then goto L07adc6;
  #L07ae32.  v0:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L07ae36.  v1:= v0.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L07ae3a.  if v4 != 0 then goto L07ae4c;
  #L07ae3e.  v0:= 1I;
  #L07ae40.  v2:= v3.`a.a.d.a$a.c` @type ^`a.a.d.a` @kind object;
  #L07ae44.  call `a`(v1, v0, v2) @signature `La/a/b/g;.a:(ZLa/a/c/c;)V` @kind virtual;
  #L07ae4a.  goto L07adc6;
  #L07ae4c.  v0:= 0I;
  #L07ae4e.  goto L07ae40;
}
