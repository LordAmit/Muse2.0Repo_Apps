record `a.a.g.a$b` @kind class @AccessFlag FINAL {
  `java.lang.reflect.Method` `a.a.g.a$b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.g.a$b.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.g.a$b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.g.a$b` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object) @signature `La/a/g/a$b;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L082f34.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L082f3a.  v0.`a.a.g.a$b.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L082f3e.  v0.`a.a.g.a$b.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L082f42.  v0.`a.a.g.a$b.c` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L082f46.  return @kind void;
}
procedure `a.a.g.a$b` `a`() @signature `La/a/g/a$b;.a:()La/a/g/a$b;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L082f58.  v0:= 0I;
  #Try_start0.  
  #L082f5a.  v1:= "dalvik.system.CloseGuard" @kind object;
  #L082f5e.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L082f64.  v3:= temp @kind object;
  #L082f66.  v1:= "get" @kind object;
  #L082f6a.  v2:= 0I;
  #L082f6c.  v2:= new `java.lang.Class`[v2];
  #L082f70.  call temp:= `getMethod`(v3, v1, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L082f76.  v2:= temp @kind object;
  #L082f78.  v1:= "open" @kind object;
  #L082f7c.  v4:= 1I;
  #L082f7e.  v4:= new `java.lang.Class`[v4];
  #L082f82.  v5:= 0I;
  #L082f84.  v6:= constclass @type ^`java.lang.String` @kind object;
  #L082f88.  v4[v5]:= v6 @kind object;
  #L082f8c.  call temp:= `getMethod`(v3, v1, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L082f92.  v1:= temp @kind object;
  #L082f94.  v4:= "warnIfOpen" @kind object;
  #L082f98.  v5:= 0I;
  #L082f9a.  v5:= new `java.lang.Class`[v5];
  #L082f9e.  call temp:= `getMethod`(v3, v4, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #Try_end0.  
  #L082fa4.  v0:= temp @kind object;
  #L082fa6.  v3:= new `a.a.g.a$b`;
  #L082faa.  call `<init>`(v3, v2, v1, v0) @signature `La/a/g/a$b;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @kind direct;
  #L082fb0.  return v3 @kind object;
  #L082fb2.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L082fb4.  v1:= v0 @kind object;
  #L082fb6.  v2:= v0 @kind object;
  #L082fb8.  goto L082fa6;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L082fb2;
}
procedure `java.lang.Object` `a`(`a.a.g.a$b` v5 @kind this, `java.lang.String` v6 @kind object) @signature `La/a/g/a$b;.a:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L082fdc.  v1:= 0I;
  #L082fde.  v0:= v5.`a.a.g.a$b.a` @type ^`java.lang.reflect.Method` @kind object;
  #L082fe2.  if v0 == 0 then goto L083014;
  #Try_start0.  
  #L082fe6.  v0:= v5.`a.a.g.a$b.a` @type ^`java.lang.reflect.Method` @kind object;
  #L082fea.  v2:= 0I;
  #L082fec.  v3:= 0I;
  #L082fee.  v3:= new `java.lang.Object`[v3];
  #L082ff2.  call temp:= `invoke`(v0, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L082ff8.  v0:= temp @kind object;
  #L082ffa.  v2:= v5.`a.a.g.a$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L082ffe.  v3:= 1I;
  #L083000.  v3:= new `java.lang.Object`[v3];
  #L083004.  v4:= 0I;
  #L083006.  v3[v4]:= v6 @kind object;
  #L08300a.  call temp:= `invoke`(v2, v0, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L083010.  return v0 @kind object;
  #L083012.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L083014.  v0:= v1 @kind object;
  #L083016.  goto L083010;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L083012;
}
procedure `boolean` `a`(`a.a.g.a$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `La/a/g/a$b;.a:(Ljava/lang/Object;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L083038.  v0:= 0I;
  #L08303a.  if v4 == 0 then goto L083050;
  #Try_start0.  
  #L08303e.  v1:= v3.`a.a.g.a$b.c` @type ^`java.lang.reflect.Method` @kind object;
  #L083042.  v2:= 0I;
  #L083044.  v2:= new `java.lang.Object`[v2];
  #L083048.  call temp:= `invoke`(v1, v4, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L08304e.  v0:= 1I;
  #L083050.  return v0;
  #L083052.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L083054.  goto L083050;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L083052;
}
