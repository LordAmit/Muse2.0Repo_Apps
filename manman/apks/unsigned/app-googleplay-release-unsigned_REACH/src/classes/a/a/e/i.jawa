record `a.a.e.i` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `a.a.e.i.a` @AccessFlag ;
  `long` `a.a.e.i.b` @AccessFlag ;
  `int` `a.a.e.i.c` @AccessFlag FINAL;
  `a.a.e.g` `a.a.e.i.d` @AccessFlag FINAL;
  `a.a.e.i$a` `a.a.e.i.e` @AccessFlag FINAL;
  `a.a.e.i$c` `a.a.e.i.f` @AccessFlag FINAL;
  `a.a.e.i$c` `a.a.e.i.g` @AccessFlag FINAL;
  `a.a.e.b` `a.a.e.i.h` @AccessFlag ;
  `java.util.List` `a.a.e.i.j` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `a.a.e.i.k` @AccessFlag PRIVATE;
  `boolean` `a.a.e.i.l` @AccessFlag PRIVATE;
  `a.a.e.i$b` `a.a.e.i.m` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.a.e.i.i` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/e/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L081068.  v0:= constclass @type ^`a.a.e.i` @kind object;
  #L08106c.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L081072.  v0:= temp;
  #L081074.  if v0 != 0 then goto L081080;
  #L081078.  v0:= 1I;
  #L08107a.  `@@a.a.e.i.i` @type ^`boolean` := v0 @kind boolean;
  #L08107e.  return @kind void;
  #L081080.  v0:= 0I;
  #L081082.  goto L08107a;
}
procedure `void` `<init>`(`a.a.e.i` v4 @kind this, `int` v5 , `a.a.e.g` v6 @kind object, `boolean` v7 , `boolean` v8 , `java.util.List` v9 @kind object) @signature `La/a/e/i;.<init>:(ILa/a/e/g;ZZLjava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L081094.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08109a.  v0:= 0L;
  #L08109e.  v4.`a.a.e.i.a` @type ^`long` := v0 @kind wide;
  #L0810a2.  v0:= new `a.a.e.i$c`;
  #L0810a6.  call `<init>`(v0, v4) @signature `La/a/e/i$c;.<init>:(La/a/e/i;)V` @kind direct;
  #L0810ac.  v4.`a.a.e.i.f` @type ^`a.a.e.i$c` := v0 @kind object;
  #L0810b0.  v0:= new `a.a.e.i$c`;
  #L0810b4.  call `<init>`(v0, v4) @signature `La/a/e/i$c;.<init>:(La/a/e/i;)V` @kind direct;
  #L0810ba.  v4.`a.a.e.i.g` @type ^`a.a.e.i$c` := v0 @kind object;
  #L0810be.  v0:= 0I;
  #L0810c0.  v4.`a.a.e.i.h` @type ^`a.a.e.b` := v0 @kind object;
  #L0810c4.  if v6 != 0 then goto L0810d8;
  #L0810c8.  v0:= new `java.lang.NullPointerException`;
  #L0810cc.  v1:= "connection == null" @kind object;
  #L0810d0.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0810d6.  throw v0;
  #L0810d8.  if v9 != 0 then goto L0810ec;
  #L0810dc.  v0:= new `java.lang.NullPointerException`;
  #L0810e0.  v1:= "requestHeaders == null" @kind object;
  #L0810e4.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0810ea.  throw v0;
  #L0810ec.  v4.`a.a.e.i.c` @type ^`int` := v5;
  #L0810f0.  v4.`a.a.e.i.d` @type ^`a.a.e.g` := v6 @kind object;
  #L0810f4.  v0:= v6.`a.a.e.g.m` @type ^`a.a.e.n` @kind object;
  #L0810f8.  call temp:= `d`(v0) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L0810fe.  v0:= temp;
  #L081100.  v0:= (`long`) v0 @kind i2l;
  #L081102.  v4.`a.a.e.i.b` @type ^`long` := v0 @kind wide;
  #L081106.  v0:= new `a.a.e.i$b`;
  #L08110a.  v1:= v6.`a.a.e.g.l` @type ^`a.a.e.n` @kind object;
  #L08110e.  call temp:= `d`(v1) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L081114.  v1:= temp;
  #L081116.  v2:= (`long`) v1 @kind i2l;
  #L081118.  call `<init>`(v0, v4, v2) @signature `La/a/e/i$b;.<init>:(La/a/e/i;J)V` @kind direct;
  #L08111e.  v4.`a.a.e.i.m` @type ^`a.a.e.i$b` := v0 @kind object;
  #L081122.  v0:= new `a.a.e.i$a`;
  #L081126.  call `<init>`(v0, v4) @signature `La/a/e/i$a;.<init>:(La/a/e/i;)V` @kind direct;
  #L08112c.  v4.`a.a.e.i.e` @type ^`a.a.e.i$a` := v0 @kind object;
  #L081130.  v0:= v4.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L081134.  v0.`a.a.e.i$b.b` @type ^`boolean` := v8 @kind boolean;
  #L081138.  v0:= v4.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L08113c.  v0.`a.a.e.i$a.b` @type ^`boolean` := v7 @kind boolean;
  #L081140.  v4.`a.a.e.i.j` @type ^`java.util.List` := v9 @kind object;
  #L081144.  return @kind void;
}
procedure `boolean` `d`(`a.a.e.i` v2 @kind this, `a.a.e.b` v3 @kind object) @signature `La/a/e/i;.d:(La/a/e/b;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L081158.  v0:= 0I;
  #L08115a.  v1:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L08115e.  if v1 != 0 then goto L08117a;
  #L081162.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L081168.  v1:= temp;
  #L08116a.  if v1 == 0 then goto L08117a;
  #L08116e.  v0:= new `java.lang.AssertionError`;
  #L081172.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L081178.  throw v0;
  #L08117a.  @monitorenter v2
  #Try_start0.  
  #L08117c.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L081180.  if v1 == 0 then goto L081188;
  #L081184.  @monitorexit v2
  #L081186.  return v0;
  #L081188.  v1:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L08118c.  v1:= v1.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L081190.  if v1 == 0 then goto L0811aa;
  #L081194.  v1:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L081198.  v1:= v1.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L08119c.  if v1 == 0 then goto L0811aa;
  #L0811a0.  @monitorexit v2
  #L0811a2.  goto L081186;
  #L0811a4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0811a6.  @monitorexit v2
  #Try_end0.  
  #L0811a8.  throw v0;
  #Try_start1.  
  #L0811aa.  v2.`a.a.e.i.h` @type ^`a.a.e.b` := v3 @kind object;
  #L0811ae.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L0811b4.  @monitorexit v2
  #Try_end1.  
  #L0811b6.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L0811ba.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L0811be.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L0811c4.  v0:= 1I;
  #L0811c6.  goto L081186;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0811a4;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0811a4;
}
procedure `int` `a`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0811ec.  v0:= v1.`a.a.e.i.c` @type ^`int`;
  #L0811f0.  return v0;
}
procedure `void` `a`(`a.a.e.i` v3 @kind this, `long` v4 ) @signature `La/a/e/i;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L081204.  v0:= v3.`a.a.e.i.b` @type ^`long` @kind wide;
  #L081208.  v0:= v0 + v4 @kind long;
  #L08120a.  v3.`a.a.e.i.b` @type ^`long` := v0 @kind wide;
  #L08120e.  v0:= 0L;
  #L081212.  v0:= lcmp(v4, v0);
  #L081216.  if v0 <= 0 then goto L081220;
  #L08121a.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L081220.  return @kind void;
}
procedure `void` `a`(`a.a.e.i` v2 @kind this, `a.a.e.b` v3 @kind object) @signature `La/a/e/i;.a:(La/a/e/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L081234.  call temp:= `d`(v2, v3) @signature `La/a/e/i;.d:(La/a/e/b;)Z` @kind direct;
  #L08123a.  v0:= temp;
  #L08123c.  if v0 != 0 then goto L081242;
  #L081240.  return @kind void;
  #L081242.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L081246.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L08124a.  call `b`(v0, v1, v3) @signature `La/a/e/g;.b:(ILa/a/e/b;)V` @kind virtual;
  #L081250.  goto L081240;
}
procedure `void` `a`(`a.a.e.i` v4 @kind this, `b.e` v5 @kind object, `int` v6 ) @signature `La/a/e/i;.a:(Lb/e;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L081264.  v0:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L081268.  if v0 != 0 then goto L081284;
  #L08126c.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L081272.  v0:= temp;
  #L081274.  if v0 == 0 then goto L081284;
  #L081278.  v0:= new `java.lang.AssertionError`;
  #L08127c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L081282.  throw v0;
  #L081284.  v0:= v4.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L081288.  v2:= (`long`) v6 @kind i2l;
  #L08128a.  call `a`(v0, v5, v2) @signature `La/a/e/i$b;.a:(Lb/e;J)V` @kind virtual;
  #L081290.  return @kind void;
}
procedure `void` `a`(`a.a.e.i` v3 @kind this, `java.util.List` v4 @kind object) @signature `La/a/e/i;.a:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L0812a4.  v0:= 1I;
  #L0812a6.  v1:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L0812aa.  if v1 != 0 then goto L0812c6;
  #L0812ae.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L0812b4.  v1:= temp;
  #L0812b6.  if v1 == 0 then goto L0812c6;
  #L0812ba.  v0:= new `java.lang.AssertionError`;
  #L0812be.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0812c4.  throw v0;
  #L0812c6.  @monitorenter v3
  #L0812c8.  v1:= 1I;
  #Try_start0.  
  #L0812ca.  v3.`a.a.e.i.l` @type ^`boolean` := v1 @kind boolean;
  #L0812ce.  v1:= v3.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L0812d2.  if v1 != 0 then goto L0812fe;
  #L0812d6.  v3.`a.a.e.i.k` @type ^`java.util.List` := v4 @kind object;
  #L0812da.  call temp:= `b`(v3) @signature `La/a/e/i;.b:()Z` @kind virtual;
  #L0812e0.  v0:= temp;
  #L0812e2.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L0812e8.  @monitorexit v3
  #Try_end0.  
  #L0812ea.  if v0 != 0 then goto L0812fc;
  #L0812ee.  v0:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L0812f2.  v1:= v3.`a.a.e.i.c` @type ^`int`;
  #L0812f6.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L0812fc.  return @kind void;
  #Try_start1.  
  #L0812fe.  v1:= new `java.util.ArrayList`;
  #L081302.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L081308.  v2:= v3.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L08130c.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L081312.  v2:= 0I;
  #L081314.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L08131a.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L081320.  v3.`a.a.e.i.k` @type ^`java.util.List` := v1 @kind object;
  #L081324.  goto L0812e8;
  #L081326.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L081328.  @monitorexit v3
  #Try_end1.  
  #L08132a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L081326;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L081326;
}
procedure `void` `b`(`a.a.e.i` v2 @kind this, `a.a.e.b` v3 @kind object) @signature `La/a/e/i;.b:(La/a/e/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L081350.  call temp:= `d`(v2, v3) @signature `La/a/e/i;.d:(La/a/e/b;)Z` @kind direct;
  #L081356.  v0:= temp;
  #L081358.  if v0 != 0 then goto L08135e;
  #L08135c.  return @kind void;
  #L08135e.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L081362.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L081366.  call `a`(v0, v1, v3) @signature `La/a/e/g;.a:(ILa/a/e/b;)V` @kind virtual;
  #L08136c.  goto L08135c;
}
procedure `boolean` `b`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L081380.  v0:= 0I;
  #L081382.  @monitorenter v2
  #Try_start0.  
  #L081384.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #Try_end0.  
  #L081388.  if v1 == 0 then goto L081390;
  #L08138c.  @monitorexit v2
  #L08138e.  return v0;
  #Try_start1.  
  #L081390.  v1:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L081394.  v1:= v1.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L081398.  if v1 != 0 then goto L0813a8;
  #L08139c.  v1:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L0813a0.  v1:= v1.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L0813a4.  if v1 == 0 then goto L0813c8;
  #L0813a8.  v1:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L0813ac.  v1:= v1.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L0813b0.  if v1 != 0 then goto L0813c0;
  #L0813b4.  v1:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L0813b8.  v1:= v1.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L0813bc.  if v1 == 0 then goto L0813c8;
  #L0813c0.  v1:= v2.`a.a.e.i.l` @type ^`boolean` @kind boolean;
  #Try_end1.  
  #L0813c4.  if v1 != 0 then goto L08138c;
  #L0813c8.  v0:= 1I;
  #L0813ca.  goto L08138c;
  #L0813cc.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0813ce.  @monitorexit v2
  #L0813d0.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0813cc;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0813cc;
}
procedure `void` `c`(`a.a.e.i` v1 @kind this, `a.a.e.b` v2 @kind object) @signature `La/a/e/i;.c:(La/a/e/b;)V` @AccessFlag  {
    temp;
    v0;

  #L0813f8.  @monitorenter v1
  #Try_start0.  
  #L0813fa.  v0:= v1.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L0813fe.  if v0 != 0 then goto L08140c;
  #L081402.  v1.`a.a.e.i.h` @type ^`a.a.e.b` := v2 @kind object;
  #L081406.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #Try_end0.  
  #L08140c.  @monitorexit v1
  #L08140e.  return @kind void;
  #L081410.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L081412.  @monitorexit v1
  #L081414.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L081410;
}
procedure `boolean` `c`(`a.a.e.i` v4 @kind this) @signature `La/a/e/i;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L081434.  v2:= 0I;
  #L081436.  v1:= 1I;
  #L081438.  v0:= v4.`a.a.e.i.c` @type ^`int`;
  #L08143c.  v0:= v0 ^& 1;
  #L081440.  if v0 != v1 then goto L081454;
  #L081444.  v0:= v1;
  #L081446.  v3:= v4.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L08144a.  v3:= v3.`a.a.e.g.b` @type ^`boolean` @kind boolean;
  #L08144e.  if v3 != v0 then goto L081458;
  #L081452.  return v1;
  #L081454.  v0:= v2;
  #L081456.  goto L081446;
  #L081458.  v1:= v2;
  #L08145a.  goto L081452;
}
procedure `java.util.List` `d`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.d:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08146c.  @monitorenter v2
  #Try_start0.  
  #L08146e.  call temp:= `c`(v2) @signature `La/a/e/i;.c:()Z` @kind virtual;
  #L081474.  v0:= temp;
  #L081476.  if v0 != 0 then goto L081490;
  #L08147a.  v0:= new `java.lang.IllegalStateException`;
  #L08147e.  v1:= "servers cannot read response headers" @kind object;
  #L081482.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081488.  throw v0;
  #Try_end0.  
  #L08148a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08148c.  @monitorexit v2
  #L08148e.  throw v0;
  #Try_start1.  
  #L081490.  v0:= v2.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L081494.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_end1.  
  #Try_start2.  
  #L08149a.  v0:= v2.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L08149e.  if v0 != 0 then goto L0814c0;
  #L0814a2.  v0:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L0814a6.  if v0 != 0 then goto L0814c0;
  #L0814aa.  call `l`(v2) @signature `La/a/e/i;.l:()V` @kind virtual;
  #Try_end2.  
  #L0814b0.  goto L08149a;
  #L0814b2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L0814b4.  v1:= v2.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L0814b8.  call `b`(v1) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L0814be.  throw v0;
  #L0814c0.  v0:= v2.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L0814c4.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L0814ca.  v0:= v2.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L0814ce.  if v0 == 0 then goto L0814dc;
  #L0814d2.  v1:= 0I;
  #L0814d4.  v2.`a.a.e.i.k` @type ^`java.util.List` := v1 @kind object;
  #Try_end3.  
  #L0814d8.  @monitorexit v2
  #L0814da.  return v0 @kind object;
  #Try_start4.  
  #L0814dc.  v0:= new `a.a.e.o`;
  #L0814e0.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L0814e4.  call `<init>`(v0, v1) @signature `La/a/e/o;.<init>:(La/a/e/b;)V` @kind direct;
  #L0814ea.  throw v0;
  #Try_end4.  
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08148a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08148a;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L0814b2;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L08148a;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L08148a;
}
procedure `b.s` `e`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.e:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08152c.  v0:= v1.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L081530.  return v0 @kind object;
}
procedure `b.s` `f`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.f:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L081544.  v0:= v1.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L081548.  return v0 @kind object;
}
procedure `b.r` `g`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.g:()Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08155c.  v0:= v1.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L081560.  return v0 @kind object;
}
procedure `b.q` `h`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.h:()Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L081574.  @monitorenter v2
  #Try_start0.  
  #L081576.  v0:= v2.`a.a.e.i.l` @type ^`boolean` @kind boolean;
  #L08157a.  if v0 != 0 then goto L0815a0;
  #L08157e.  call temp:= `c`(v2) @signature `La/a/e/i;.c:()Z` @kind virtual;
  #L081584.  v0:= temp;
  #L081586.  if v0 != 0 then goto L0815a0;
  #L08158a.  v0:= new `java.lang.IllegalStateException`;
  #L08158e.  v1:= "reply before requesting the sink" @kind object;
  #L081592.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081598.  throw v0;
  #L08159a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08159c.  @monitorexit v2
  #Try_end0.  
  #L08159e.  throw v0;
  #Try_start1.  
  #L0815a0.  @monitorexit v2
  #Try_end1.  
  #L0815a2.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L0815a6.  return v0 @kind object;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08159a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08159a;
}
procedure `void` `i`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.i:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L0815cc.  v0:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L0815d0.  if v0 != 0 then goto L0815ec;
  #L0815d4.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L0815da.  v0:= temp;
  #L0815dc.  if v0 == 0 then goto L0815ec;
  #L0815e0.  v0:= new `java.lang.AssertionError`;
  #L0815e4.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0815ea.  throw v0;
  #L0815ec.  @monitorenter v2
  #Try_start0.  
  #L0815ee.  v0:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L0815f2.  v1:= 1I;
  #L0815f4.  v0.`a.a.e.i$b.b` @type ^`boolean` := v1 @kind boolean;
  #L0815f8.  call temp:= `b`(v2) @signature `La/a/e/i;.b:()Z` @kind virtual;
  #L0815fe.  v0:= temp;
  #L081600.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L081606.  @monitorexit v2
  #Try_end0.  
  #L081608.  if v0 != 0 then goto L08161a;
  #L08160c.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L081610.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L081614.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L08161a.  return @kind void;
  #L08161c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L08161e.  @monitorexit v2
  #Try_end1.  
  #L081620.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08161c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08161c;
}
procedure `void` `j`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.j:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L081648.  v0:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L08164c.  if v0 != 0 then goto L081668;
  #L081650.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L081656.  v0:= temp;
  #L081658.  if v0 == 0 then goto L081668;
  #L08165c.  v0:= new `java.lang.AssertionError`;
  #L081660.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L081666.  throw v0;
  #L081668.  @monitorenter v2
  #Try_start0.  
  #L08166a.  v0:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L08166e.  v0:= v0.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L081672.  if v0 != 0 then goto L0816b6;
  #L081676.  v0:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L08167a.  v0:= v0.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L08167e.  if v0 == 0 then goto L0816b6;
  #L081682.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L081686.  v0:= v0.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L08168a.  if v0 != 0 then goto L08169a;
  #L08168e.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L081692.  v0:= v0.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L081696.  if v0 == 0 then goto L0816b6;
  #L08169a.  v0:= 1I;
  #L08169c.  call temp:= `b`(v2) @signature `La/a/e/i;.b:()Z` @kind virtual;
  #L0816a2.  v1:= temp;
  #L0816a4.  @monitorexit v2
  #Try_end0.  
  #L0816a6.  if v0 == 0 then goto L0816c0;
  #L0816aa.  v0:= `@@a.a.e.b.f` @type ^`a.a.e.b` @kind object;
  #L0816ae.  call `a`(v2, v0) @signature `La/a/e/i;.a:(La/a/e/b;)V` @kind virtual;
  #L0816b4.  return @kind void;
  #L0816b6.  v0:= 0I;
  #L0816b8.  goto L08169c;
  #L0816ba.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L0816bc.  @monitorexit v2
  #Try_end1.  
  #L0816be.  throw v0;
  #L0816c0.  if v1 != 0 then goto L0816b4;
  #L0816c4.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L0816c8.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L0816cc.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L0816d2.  goto L0816b4;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0816ba;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0816ba;
}
procedure `void` `k`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L0816f8.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L0816fc.  v0:= v0.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L081700.  if v0 == 0 then goto L081714;
  #L081704.  v0:= new `java.io.IOException`;
  #L081708.  v1:= "stream closed" @kind object;
  #L08170c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081712.  throw v0;
  #L081714.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L081718.  v0:= v0.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L08171c.  if v0 == 0 then goto L081730;
  #L081720.  v0:= new `java.io.IOException`;
  #L081724.  v1:= "stream finished" @kind object;
  #L081728.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08172e.  throw v0;
  #L081730.  v0:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L081734.  if v0 == 0 then goto L081748;
  #L081738.  v0:= new `a.a.e.o`;
  #L08173c.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L081740.  call `<init>`(v0, v1) @signature `La/a/e/o;.<init>:(La/a/e/b;)V` @kind direct;
  #L081746.  throw v0;
  #L081748.  return @kind void;
}
procedure `void` `l`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.l:()V` @AccessFlag  {
    temp;
    v0;

  #Try_start0.  
  #L08175c.  call `wait`(v1) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #Try_end0.  
  #L081762.  return @kind void;
  #L081764.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L081766.  v0:= new `java.io.InterruptedIOException`;
  #L08176a.  call `<init>`(v0) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L081770.  throw v0;
  catch `java.lang.InterruptedException` @[Try_start0..Try_end0] goto L081764;
}
