record `a.a.e.i$a` @kind class @AccessFlag FINAL extends `b.q` @kind interface {
  `boolean` `a.a.e.i$a.a` @AccessFlag ;
  `boolean` `a.a.e.i$a.b` @AccessFlag ;
  `a.a.e.i` `a.a.e.i$a.d` @AccessFlag FINAL_SYNTHETIC;
  `b.c` `a.a.e.i$a.e` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.a.e.i$a.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/e/i$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L0801c0.  v0:= constclass @type ^`a.a.e.i` @kind object;
  #L0801c4.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L0801ca.  v0:= temp;
  #L0801cc.  if v0 != 0 then goto L0801d8;
  #L0801d0.  v0:= 1I;
  #L0801d2.  `@@a.a.e.i$a.c` @type ^`boolean` := v0 @kind boolean;
  #L0801d6.  return @kind void;
  #L0801d8.  v0:= 0I;
  #L0801da.  goto L0801d2;
}
procedure `void` `<init>`(`a.a.e.i$a` v1 @kind this, `a.a.e.i` v2 @kind object) @signature `La/a/e/i$a;.<init>:(La/a/e/i;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L0801ec.  v1.`a.a.e.i$a.d` @type ^`a.a.e.i` := v2 @kind object;
  #L0801f0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0801f6.  v0:= new `b.c`;
  #L0801fa.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L080200.  v1.`a.a.e.i$a.e` @type ^`b.c` := v0 @kind object;
  #L080204.  return @kind void;
}
procedure `void` `a`(`a.a.e.i$a` v6 @kind this, `boolean` v7 ) @signature `La/a/e/i$a;.a:(Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L080218.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L08021c.  @monitorenter v1
  #Try_start0.  
  #L08021e.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L080222.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L080226.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_end0.  
  #Try_start1.  
  #L08022c.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L080230.  v2:= v0.`a.a.e.i.b` @type ^`long` @kind wide;
  #L080234.  v4:= 0L;
  #L080238.  v0:= lcmp(v2, v4);
  #L08023c.  if v0 > 0 then goto L080280;
  #L080240.  v0:= v6.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L080244.  if v0 != 0 then goto L080280;
  #L080248.  v0:= v6.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L08024c.  if v0 != 0 then goto L080280;
  #L080250.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L080254.  v0:= v0.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L080258.  if v0 != 0 then goto L080280;
  #L08025c.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L080260.  call `l`(v0) @signature `La/a/e/i;.l:()V` @kind virtual;
  #Try_end1.  
  #L080266.  goto L08022c;
  #L080268.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start2.  
  #L08026a.  v2:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L08026e.  v2:= v2.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L080272.  call `b`(v2) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L080278.  throw v0;
  #L08027a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08027c.  @monitorexit v1
  #Try_end2.  
  #L08027e.  throw v0;
  #Try_start3.  
  #L080280.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L080284.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L080288.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L08028e.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L080292.  call `k`(v0) @signature `La/a/e/i;.k:()V` @kind virtual;
  #L080298.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L08029c.  v2:= v0.`a.a.e.i.b` @type ^`long` @kind wide;
  #L0802a0.  v0:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L0802a4.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L0802aa.  v4:= temp @kind wide;
  #L0802ac.  call temp:= `min`(v2, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L0802b2.  v4:= temp @kind wide;
  #L0802b4.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L0802b8.  v2:= v0.`a.a.e.i.b` @type ^`long` @kind wide;
  #L0802bc.  v2:= v2 - v4 @kind long;
  #L0802be.  v0.`a.a.e.i.b` @type ^`long` := v2 @kind wide;
  #L0802c2.  @monitorexit v1
  #Try_end3.  
  #L0802c4.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L0802c8.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L0802cc.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_start4.  
  #L0802d2.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L0802d6.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L0802da.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L0802de.  v1:= v1.`a.a.e.i.c` @type ^`int`;
  #L0802e2.  if v7 == 0 then goto L080316;
  #L0802e6.  v2:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L0802ea.  call temp:= `b`(v2) @signature `Lb/c;.b:()J` @kind virtual;
  #L0802f0.  v2:= temp @kind wide;
  #L0802f2.  v2:= lcmp(v4, v2);
  #L0802f6.  if v2 != 0 then goto L080316;
  #L0802fa.  v2:= 1I;
  #L0802fc.  v3:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L080300.  call `a`(v0, v1, v2, v3, v4) @signature `La/a/e/g;.a:(IZLb/c;J)V` @kind virtual;
  #Try_end4.  
  #L080306.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L08030a.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L08030e.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L080314.  return @kind void;
  #L080316.  v2:= 0I;
  #L080318.  goto L0802fc;
  #L08031a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08031c.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L080320.  v1:= v1.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L080324.  call `b`(v1) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L08032a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08027a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L080268;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L08027a;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L08027a;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L08031a;
}
procedure `b.s` `a`(`a.a.e.i$a` v1 @kind this) @signature `La/a/e/i$a;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08036c.  v0:= v1.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L080370.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L080374.  return v0 @kind object;
}
procedure `void` `a_`(`a.a.e.i$a` v4 @kind this, `b.c` v5 @kind object, `long` v6 ) @signature `La/a/e/i$a;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L080388.  v0:= `@@a.a.e.i$a.c` @type ^`boolean` @kind boolean;
  #L08038c.  if v0 != 0 then goto L0803ac;
  #L080390.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L080394.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L08039a.  v0:= temp;
  #L08039c.  if v0 == 0 then goto L0803ac;
  #L0803a0.  v0:= new `java.lang.AssertionError`;
  #L0803a4.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0803aa.  throw v0;
  #L0803ac.  v0:= v4.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L0803b0.  call `a_`(v0, v5, v6) @signature `Lb/c;.a_:(Lb/c;J)V` @kind virtual;
  #L0803b6.  v0:= v4.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L0803ba.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L0803c0.  v0:= temp @kind wide;
  #L0803c2.  v2:= 16384L;
  #L0803c6.  v0:= lcmp(v0, v2);
  #L0803ca.  if v0 < 0 then goto L0803d8;
  #L0803ce.  v0:= 0I;
  #L0803d0.  call `a`(v4, v0) @signature `La/a/e/i$a;.a:(Z)V` @kind direct;
  #L0803d6.  goto L0803b6;
  #L0803d8.  return @kind void;
}
procedure `void` `close`(`a.a.e.i$a` v6 @kind this) @signature `La/a/e/i$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0803ec.  v4:= 0L;
  #L0803f0.  v2:= 1I;
  #L0803f2.  v0:= `@@a.a.e.i$a.c` @type ^`boolean` @kind boolean;
  #L0803f6.  if v0 != 0 then goto L080416;
  #L0803fa.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L0803fe.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L080404.  v0:= temp;
  #L080406.  if v0 == 0 then goto L080416;
  #L08040a.  v0:= new `java.lang.AssertionError`;
  #L08040e.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L080414.  throw v0;
  #L080416.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L08041a.  @monitorenter v1
  #Try_start0.  
  #L08041c.  v0:= v6.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L080420.  if v0 == 0 then goto L080428;
  #L080424.  @monitorexit v1
  #L080426.  return @kind void;
  #L080428.  @monitorexit v1
  #Try_end0.  
  #L08042a.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L08042e.  v0:= v0.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L080432.  v0:= v0.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L080436.  if v0 != 0 then goto L080488;
  #L08043a.  v0:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L08043e.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L080444.  v0:= temp @kind wide;
  #L080446.  v0:= lcmp(v0, v4);
  #L08044a.  if v0 <= 0 then goto L080470;
  #L08044e.  v0:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L080452.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L080458.  v0:= temp @kind wide;
  #L08045a.  v0:= lcmp(v0, v4);
  #L08045e.  if v0 <= 0 then goto L080488;
  #L080462.  call `a`(v6, v2) @signature `La/a/e/i$a;.a:(Z)V` @kind direct;
  #L080468.  goto L08044e;
  #L08046a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L08046c.  @monitorexit v1
  #Try_end1.  
  #L08046e.  throw v0;
  #L080470.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L080474.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L080478.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L08047c.  v1:= v1.`a.a.e.i.c` @type ^`int`;
  #L080480.  v3:= 0I;
  #L080482.  call `a`(v0, v1, v2, v3, v4) @signature `La/a/e/g;.a:(IZLb/c;J)V` @kind virtual;
  #L080488.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L08048c.  @monitorenter v1
  #L08048e.  v0:= 1I;
  #Try_start2.  
  #L080490.  v6.`a.a.e.i$a.a` @type ^`boolean` := v0 @kind boolean;
  #L080494.  @monitorexit v1
  #Try_end2.  
  #L080496.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L08049a.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L08049e.  call `b`(v0) @signature `La/a/e/g;.b:()V` @kind virtual;
  #L0804a4.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L0804a8.  call `j`(v0) @signature `La/a/e/i;.j:()V` @kind virtual;
  #L0804ae.  goto L080426;
  #L0804b0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L0804b2.  @monitorexit v1
  #Try_end3.  
  #L0804b4.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08046a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08046a;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L0804b0;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L0804b0;
}
procedure `void` `flush`(`a.a.e.i$a` v4 @kind this) @signature `La/a/e/i$a;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0804f0.  v0:= `@@a.a.e.i$a.c` @type ^`boolean` @kind boolean;
  #L0804f4.  if v0 != 0 then goto L080514;
  #L0804f8.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L0804fc.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L080502.  v0:= temp;
  #L080504.  if v0 == 0 then goto L080514;
  #L080508.  v0:= new `java.lang.AssertionError`;
  #L08050c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L080512.  throw v0;
  #L080514.  v1:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L080518.  @monitorenter v1
  #Try_start0.  
  #L08051a.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L08051e.  call `k`(v0) @signature `La/a/e/i;.k:()V` @kind virtual;
  #L080524.  @monitorexit v1
  #Try_end0.  
  #L080526.  v0:= v4.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L08052a.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L080530.  v0:= temp @kind wide;
  #L080532.  v2:= 0L;
  #L080536.  v0:= lcmp(v0, v2);
  #L08053a.  if v0 <= 0 then goto L08055c;
  #L08053e.  v0:= 0I;
  #L080540.  call `a`(v4, v0) @signature `La/a/e/i$a;.a:(Z)V` @kind direct;
  #L080546.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L08054a.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L08054e.  call `b`(v0) @signature `La/a/e/g;.b:()V` @kind virtual;
  #L080554.  goto L080526;
  #L080556.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L080558.  @monitorexit v1
  #Try_end1.  
  #L08055a.  throw v0;
  #L08055c.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L080556;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L080556;
}
