record `a.a.e.d$a` @kind class @AccessFlag FINAL {
  `a.a.e.c`[] `a.a.e.d$a.a` @AccessFlag ;
  `int` `a.a.e.d$a.b` @AccessFlag ;
  `int` `a.a.e.d$a.c` @AccessFlag ;
  `int` `a.a.e.d$a.d` @AccessFlag ;
  `java.util.List` `a.a.e.d$a.e` @AccessFlag PRIVATE_FINAL;
  `b.e` `a.a.e.d$a.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.e.d$a.g` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.e.d$a.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.e.d$a` v2 @kind this, `int` v3 , `int` v4 , `b.r` v5 @kind object) @signature `La/a/e/d$a;.<init>:(IILb/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07bfec.  v1:= 0I;
  #L07bfee.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07bff4.  v0:= new `java.util.ArrayList`;
  #L07bff8.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L07bffe.  v2.`a.a.e.d$a.e` @type ^`java.util.List` := v0 @kind object;
  #L07c002.  v0:= 8I;
  #L07c006.  v0:= new `a.a.e.c`[v0];
  #L07c00a.  v2.`a.a.e.d$a.a` @type ^`a.a.e.c`[] := v0 @kind object;
  #L07c00e.  v0:= v2.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c012.  v0:= length @variable v0;
  #L07c014.  v0:= v0 + -1;
  #L07c018.  v2.`a.a.e.d$a.b` @type ^`int` := v0;
  #L07c01c.  v2.`a.a.e.d$a.c` @type ^`int` := v1;
  #L07c020.  v2.`a.a.e.d$a.d` @type ^`int` := v1;
  #L07c024.  v2.`a.a.e.d$a.g` @type ^`int` := v3;
  #L07c028.  v2.`a.a.e.d$a.h` @type ^`int` := v4;
  #L07c02c.  call temp:= `a`(v5) @signature `Lb/k;.a:(Lb/r;)Lb/e;` @kind static;
  #L07c032.  v0:= temp @kind object;
  #L07c034.  v2.`a.a.e.d$a.f` @type ^`b.e` := v0 @kind object;
  #L07c038.  return @kind void;
}
procedure `void` `<init>`(`a.a.e.d$a` v0 @kind this, `int` v1 , `b.r` v2 @kind object) @signature `La/a/e/d$a;.<init>:(ILb/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L07c04c.  call `<init>`(v0, v1, v1, v2) @signature `La/a/e/d$a;.<init>:(IILb/r;)V` @kind direct;
  #L07c052.  return @kind void;
}
procedure `int` `a`(`a.a.e.d$a` v6 @kind this, `int` v7 ) @signature `La/a/e/d$a;.a:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07c064.  v1:= 0I;
  #L07c066.  if v7 <= 0 then goto L07c0e8;
  #L07c06a.  v0:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c06e.  v0:= length @variable v0;
  #L07c070.  v0:= v0 + -1;
  #L07c074.  v2:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L07c078.  if v0 < v2 then goto L07c0ba;
  #L07c07c.  if v7 <= 0 then goto L07c0ba;
  #L07c080.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c084.  v2:= v2[v0] @kind object;
  #L07c088.  v2:= v2.`a.a.e.c.i` @type ^`int`;
  #L07c08c.  v7:= v7 - v2 @kind int;
  #L07c08e.  v2:= v6.`a.a.e.d$a.d` @type ^`int`;
  #L07c092.  v3:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c096.  v3:= v3[v0] @kind object;
  #L07c09a.  v3:= v3.`a.a.e.c.i` @type ^`int`;
  #L07c09e.  v2:= v2 - v3 @kind int;
  #L07c0a0.  v6.`a.a.e.d$a.d` @type ^`int` := v2;
  #L07c0a4.  v2:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L07c0a8.  v2:= v2 + -1;
  #L07c0ac.  v6.`a.a.e.d$a.c` @type ^`int` := v2;
  #L07c0b0.  v1:= v1 + 1;
  #L07c0b4.  v0:= v0 + -1;
  #L07c0b8.  goto L07c074;
  #L07c0ba.  v0:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c0be.  v2:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L07c0c2.  v2:= v2 + 1;
  #L07c0c6.  v3:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c0ca.  v4:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L07c0ce.  v4:= v4 + 1;
  #L07c0d2.  v4:= v4 + v1 @kind int;
  #L07c0d4.  v5:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L07c0d8.  call `arraycopy`(v0, v2, v3, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L07c0de.  v0:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L07c0e2.  v0:= v0 + v1 @kind int;
  #L07c0e4.  v6.`a.a.e.d$a.b` @type ^`int` := v0;
  #L07c0e8.  return v1;
}
procedure `void` `a`(`a.a.e.d$a` v6 @kind this, `int` v7 , `a.a.e.c` v8 @kind object) @signature `La/a/e/d$a;.a:(ILa/a/e/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07c0fc.  v3:= -1I;
  #L07c0fe.  v0:= v6.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07c102.  call temp:= `add`(v0, v8) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07c108.  v0:= v8.`a.a.e.c.i` @type ^`int`;
  #L07c10c.  if v7 == v3 then goto L07c126;
  #L07c110.  v1:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c114.  call temp:= `c`(v6, v7) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L07c11a.  v2:= temp;
  #L07c11c.  v1:= v1[v2] @kind object;
  #L07c120.  v1:= v1.`a.a.e.c.i` @type ^`int`;
  #L07c124.  v0:= v0 - v1 @kind int;
  #L07c126.  v1:= v6.`a.a.e.d$a.h` @type ^`int`;
  #L07c12a.  if v0 <= v1 then goto L07c136;
  #L07c12e.  call `e`(v6) @signature `La/a/e/d$a;.e:()V` @kind direct;
  #L07c134.  return @kind void;
  #L07c136.  v1:= v6.`a.a.e.d$a.d` @type ^`int`;
  #L07c13a.  v1:= v1 + v0 @kind int;
  #L07c13c.  v2:= v6.`a.a.e.d$a.h` @type ^`int`;
  #L07c140.  v1:= v1 - v2 @kind int;
  #L07c142.  call temp:= `a`(v6, v1) @signature `La/a/e/d$a;.a:(I)I` @kind direct;
  #L07c148.  v1:= temp;
  #L07c14a.  if v7 != v3 then goto L07c1c4;
  #L07c14e.  v1:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L07c152.  v1:= v1 + 1;
  #L07c156.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c15a.  v2:= length @variable v2;
  #L07c15c.  if v1 <= v2 then goto L07c198;
  #L07c160.  v1:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c164.  v1:= length @variable v1;
  #L07c166.  v1:= v1 * 2;
  #L07c16a.  v1:= new `a.a.e.c`[v1];
  #L07c16e.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c172.  v3:= 0I;
  #L07c174.  v4:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c178.  v4:= length @variable v4;
  #L07c17a.  v5:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c17e.  v5:= length @variable v5;
  #L07c180.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L07c186.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c18a.  v2:= length @variable v2;
  #L07c18c.  v2:= v2 + -1;
  #L07c190.  v6.`a.a.e.d$a.b` @type ^`int` := v2;
  #L07c194.  v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] := v1 @kind object;
  #L07c198.  v1:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L07c19c.  v2:= v1 + -1;
  #L07c1a0.  v6.`a.a.e.d$a.b` @type ^`int` := v2;
  #L07c1a4.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c1a8.  v2[v1]:= v8 @kind object;
  #L07c1ac.  v1:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L07c1b0.  v1:= v1 + 1;
  #L07c1b4.  v6.`a.a.e.d$a.c` @type ^`int` := v1;
  #L07c1b8.  v1:= v6.`a.a.e.d$a.d` @type ^`int`;
  #L07c1bc.  v0:= v0 + v1 @kind int;
  #L07c1be.  v6.`a.a.e.d$a.d` @type ^`int` := v0;
  #L07c1c2.  goto L07c134;
  #L07c1c4.  call temp:= `c`(v6, v7) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L07c1ca.  v2:= temp;
  #L07c1cc.  v1:= v1 + v2 @kind int;
  #L07c1ce.  v1:= v1 + v7 @kind int;
  #L07c1d0.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c1d4.  v2[v1]:= v8 @kind object;
  #L07c1d8.  goto L07c1b8;
}
procedure `void` `b`(`a.a.e.d$a` v3 @kind this, `int` v4 ) @signature `La/a/e/d$a;.b:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07c1ec.  call temp:= `g`(v3, v4) @signature `La/a/e/d$a;.g:(I)Z` @kind direct;
  #L07c1f2.  v0:= temp;
  #L07c1f4.  if v0 == 0 then goto L07c20c;
  #L07c1f8.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07c1fc.  v0:= v0[v4] @kind object;
  #L07c200.  v1:= v3.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07c204.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07c20a.  return @kind void;
  #L07c20c.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07c210.  v0:= length @variable v0;
  #L07c212.  v0:= v4 - v0 @kind int;
  #L07c216.  call temp:= `c`(v3, v0) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L07c21c.  v0:= temp;
  #L07c21e.  if v0 < 0 then goto L07c230;
  #L07c222.  v1:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c226.  v1:= length @variable v1;
  #L07c228.  v1:= v1 + -1;
  #L07c22c.  if v0 <= v1 then goto L07c266;
  #L07c230.  v0:= new `java.io.IOException`;
  #L07c234.  v1:= new `java.lang.StringBuilder`;
  #L07c238.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07c23e.  v2:= "Header index too large " @kind object;
  #L07c242.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c248.  v1:= temp @kind object;
  #L07c24a.  v2:= v4 + 1;
  #L07c24e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c254.  v1:= temp @kind object;
  #L07c256.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07c25c.  v1:= temp @kind object;
  #L07c25e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07c264.  throw v0;
  #L07c266.  v1:= v3.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07c26a.  v2:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c26e.  v0:= v2[v0] @kind object;
  #L07c272.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07c278.  goto L07c20a;
}
procedure `int` `c`(`a.a.e.d$a` v1 @kind this, `int` v2 ) @signature `La/a/e/d$a;.c:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L07c28c.  v0:= v1.`a.a.e.d$a.b` @type ^`int`;
  #L07c290.  v0:= v0 + 1;
  #L07c294.  v0:= v0 + v2 @kind int;
  #L07c296.  return v0;
}
procedure `void` `d`(`a.a.e.d$a` v2 @kind this) @signature `La/a/e/d$a;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07c2a8.  v0:= v2.`a.a.e.d$a.h` @type ^`int`;
  #L07c2ac.  v1:= v2.`a.a.e.d$a.d` @type ^`int`;
  #L07c2b0.  if v0 >= v1 then goto L07c2c2;
  #L07c2b4.  v0:= v2.`a.a.e.d$a.h` @type ^`int`;
  #L07c2b8.  if v0 != 0 then goto L07c2c4;
  #L07c2bc.  call `e`(v2) @signature `La/a/e/d$a;.e:()V` @kind direct;
  #L07c2c2.  return @kind void;
  #L07c2c4.  v0:= v2.`a.a.e.d$a.d` @type ^`int`;
  #L07c2c8.  v1:= v2.`a.a.e.d$a.h` @type ^`int`;
  #L07c2cc.  v0:= v0 - v1 @kind int;
  #L07c2ce.  call temp:= `a`(v2, v0) @signature `La/a/e/d$a;.a:(I)I` @kind direct;
  #L07c2d4.  goto L07c2c2;
}
procedure `void` `d`(`a.a.e.d$a` v4 @kind this, `int` v5 ) @signature `La/a/e/d$a;.d:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07c2e8.  call temp:= `f`(v4, v5) @signature `La/a/e/d$a;.f:(I)Lb/f;` @kind direct;
  #L07c2ee.  v0:= temp @kind object;
  #L07c2f0.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07c2f6.  v1:= temp @kind object;
  #L07c2f8.  v2:= v4.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07c2fc.  v3:= new `a.a.e.c`;
  #L07c300.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L07c306.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07c30c.  return @kind void;
}
procedure `void` `e`(`a.a.e.d$a` v3 @kind this) @signature `La/a/e/d$a;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07c320.  v2:= 0I;
  #L07c322.  v0:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c326.  v1:= 0I;
  #L07c328.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L07c32e.  v0:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c332.  v0:= length @variable v0;
  #L07c334.  v0:= v0 + -1;
  #L07c338.  v3.`a.a.e.d$a.b` @type ^`int` := v0;
  #L07c33c.  v3.`a.a.e.d$a.c` @type ^`int` := v2;
  #L07c340.  v3.`a.a.e.d$a.d` @type ^`int` := v2;
  #L07c344.  return @kind void;
}
procedure `void` `e`(`a.a.e.d$a` v4 @kind this, `int` v5 ) @signature `La/a/e/d$a;.e:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07c358.  call temp:= `f`(v4, v5) @signature `La/a/e/d$a;.f:(I)Lb/f;` @kind direct;
  #L07c35e.  v0:= temp @kind object;
  #L07c360.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07c366.  v1:= temp @kind object;
  #L07c368.  v2:= -1I;
  #L07c36a.  v3:= new `a.a.e.c`;
  #L07c36e.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L07c374.  call `a`(v4, v2, v3) @signature `La/a/e/d$a;.a:(ILa/a/e/c;)V` @kind direct;
  #L07c37a.  return @kind void;
}
procedure `b.f` `f`(`a.a.e.d$a` v2 @kind this, `int` v3 ) @signature `La/a/e/d$a;.f:(I)Lb/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07c38c.  call temp:= `g`(v2, v3) @signature `La/a/e/d$a;.g:(I)Z` @kind direct;
  #L07c392.  v0:= temp;
  #L07c394.  if v0 == 0 then goto L07c3a6;
  #L07c398.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07c39c.  v0:= v0[v3] @kind object;
  #L07c3a0.  v0:= v0.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L07c3a4.  return v0 @kind object;
  #L07c3a6.  v0:= v2.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07c3aa.  v1:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07c3ae.  v1:= length @variable v1;
  #L07c3b0.  v1:= v3 - v1 @kind int;
  #L07c3b4.  call temp:= `c`(v2, v1) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L07c3ba.  v1:= temp;
  #L07c3bc.  v0:= v0[v1] @kind object;
  #L07c3c0.  v0:= v0.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L07c3c4.  goto L07c3a4;
}
procedure `void` `f`(`a.a.e.d$a` v4 @kind this) @signature `La/a/e/d$a;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07c3d8.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07c3de.  v0:= temp @kind object;
  #L07c3e0.  call temp:= `a`(v0) @signature `La/a/e/d;.a:(Lb/f;)Lb/f;` @kind static;
  #L07c3e6.  v0:= temp @kind object;
  #L07c3e8.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07c3ee.  v1:= temp @kind object;
  #L07c3f0.  v2:= v4.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07c3f4.  v3:= new `a.a.e.c`;
  #L07c3f8.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L07c3fe.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07c404.  return @kind void;
}
procedure `void` `g`(`a.a.e.d$a` v4 @kind this) @signature `La/a/e/d$a;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07c418.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07c41e.  v0:= temp @kind object;
  #L07c420.  call temp:= `a`(v0) @signature `La/a/e/d;.a:(Lb/f;)Lb/f;` @kind static;
  #L07c426.  v0:= temp @kind object;
  #L07c428.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07c42e.  v1:= temp @kind object;
  #L07c430.  v2:= -1I;
  #L07c432.  v3:= new `a.a.e.c`;
  #L07c436.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L07c43c.  call `a`(v4, v2, v3) @signature `La/a/e/d$a;.a:(ILa/a/e/c;)V` @kind direct;
  #L07c442.  return @kind void;
}
procedure `boolean` `g`(`a.a.e.d$a` v1 @kind this, `int` v2 ) @signature `La/a/e/d$a;.g:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L07c454.  if v2 < 0 then goto L07c46a;
  #L07c458.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07c45c.  v0:= length @variable v0;
  #L07c45e.  v0:= v0 + -1;
  #L07c462.  if v2 > v0 then goto L07c46a;
  #L07c466.  v0:= 1I;
  #L07c468.  return v0;
  #L07c46a.  v0:= 0I;
  #L07c46c.  goto L07c468;
}
procedure `int` `h`(`a.a.e.d$a` v1 @kind this) @signature `La/a/e/d$a;.h:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L07c480.  v0:= v1.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L07c484.  call temp:= `h`(v0) @signature `Lb/e;.h:()B` @kind interface;
  #L07c48a.  v0:= temp;
  #L07c48c.  v0:= v0 ^& 255;
  #L07c490.  return v0;
}
procedure `int` `a`(`a.a.e.d$a` v3 @kind this, `int` v4 , `int` v5 ) @signature `La/a/e/d$a;.a:(II)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L07c4a4.  v0:= v4 ^& v5 @kind int;
  #L07c4a8.  if v0 >= v5 then goto L07c4ae;
  #L07c4ac.  return v0;
  #L07c4ae.  v0:= 0I;
  #L07c4b0.  call temp:= `h`(v3) @signature `La/a/e/d$a;.h:()I` @kind direct;
  #L07c4b6.  v1:= temp;
  #L07c4b8.  v2:= v1 ^& 128;
  #L07c4bc.  if v2 == 0 then goto L07c4ce;
  #L07c4c0.  v1:= v1 ^& 127;
  #L07c4c4.  v1:= v1 ^< v0 @kind int;
  #L07c4c6.  v5:= v5 + v1 @kind int;
  #L07c4c8.  v0:= v0 + 7;
  #L07c4cc.  goto L07c4b0;
  #L07c4ce.  v0:= v1 ^< v0 @kind int;
  #L07c4d2.  v0:= v0 + v5 @kind int;
  #L07c4d4.  goto L07c4ac;
}
procedure `void` `a`(`a.a.e.d$a` v5 @kind this) @signature `La/a/e/d$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L07c4e8.  v4:= 128I;
  #L07c4ec.  v3:= 64I;
  #L07c4f0.  v0:= v5.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L07c4f4.  call temp:= `e`(v0) @signature `Lb/e;.e:()Z` @kind interface;
  #L07c4fa.  v0:= temp;
  #L07c4fc.  if v0 != 0 then goto L07c60c;
  #L07c500.  v0:= v5.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L07c504.  call temp:= `h`(v0) @signature `Lb/e;.h:()B` @kind interface;
  #L07c50a.  v0:= temp;
  #L07c50c.  v0:= v0 ^& 255;
  #L07c510.  if v0 != v4 then goto L07c524;
  #L07c514.  v0:= new `java.io.IOException`;
  #L07c518.  v1:= "index == 0" @kind object;
  #L07c51c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07c522.  throw v0;
  #L07c524.  v1:= v0 ^& 128;
  #L07c528.  if v1 != v4 then goto L07c544;
  #L07c52c.  v1:= 127I;
  #L07c530.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L07c536.  v0:= temp;
  #L07c538.  v0:= v0 + -1;
  #L07c53c.  call `b`(v5, v0) @signature `La/a/e/d$a;.b:(I)V` @kind direct;
  #L07c542.  goto L07c4f0;
  #L07c544.  if v0 != v3 then goto L07c550;
  #L07c548.  call `g`(v5) @signature `La/a/e/d$a;.g:()V` @kind direct;
  #L07c54e.  goto L07c4f0;
  #L07c550.  v1:= v0 ^& 64;
  #L07c554.  if v1 != v3 then goto L07c570;
  #L07c558.  v1:= 63I;
  #L07c55c.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L07c562.  v0:= temp;
  #L07c564.  v0:= v0 + -1;
  #L07c568.  call `e`(v5, v0) @signature `La/a/e/d$a;.e:(I)V` @kind direct;
  #L07c56e.  goto L07c4f0;
  #L07c570.  v1:= v0 ^& 32;
  #L07c574.  v2:= 32I;
  #L07c578.  if v1 != v2 then goto L07c5de;
  #L07c57c.  v1:= 31I;
  #L07c580.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L07c586.  v0:= temp;
  #L07c588.  v5.`a.a.e.d$a.h` @type ^`int` := v0;
  #L07c58c.  v0:= v5.`a.a.e.d$a.h` @type ^`int`;
  #L07c590.  if v0 < 0 then goto L07c5a0;
  #L07c594.  v0:= v5.`a.a.e.d$a.h` @type ^`int`;
  #L07c598.  v1:= v5.`a.a.e.d$a.g` @type ^`int`;
  #L07c59c.  if v0 <= v1 then goto L07c5d6;
  #L07c5a0.  v0:= new `java.io.IOException`;
  #L07c5a4.  v1:= new `java.lang.StringBuilder`;
  #L07c5a8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07c5ae.  v2:= "Invalid dynamic table size update " @kind object;
  #L07c5b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c5b8.  v1:= temp @kind object;
  #L07c5ba.  v2:= v5.`a.a.e.d$a.h` @type ^`int`;
  #L07c5be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07c5c4.  v1:= temp @kind object;
  #L07c5c6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07c5cc.  v1:= temp @kind object;
  #L07c5ce.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07c5d4.  throw v0;
  #L07c5d6.  call `d`(v5) @signature `La/a/e/d$a;.d:()V` @kind direct;
  #L07c5dc.  goto L07c4f0;
  #L07c5de.  v1:= 16I;
  #L07c5e2.  if v0 == v1 then goto L07c5ea;
  #L07c5e6.  if v0 != 0 then goto L07c5f2;
  #L07c5ea.  call `f`(v5) @signature `La/a/e/d$a;.f:()V` @kind direct;
  #L07c5f0.  goto L07c4f0;
  #L07c5f2.  v1:= 15I;
  #L07c5f6.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L07c5fc.  v0:= temp;
  #L07c5fe.  v0:= v0 + -1;
  #L07c602.  call `d`(v5, v0) @signature `La/a/e/d$a;.d:(I)V` @kind direct;
  #L07c608.  goto L07c4f0;
  #L07c60c.  return @kind void;
}
procedure `java.util.List` `b`(`a.a.e.d$a` v2 @kind this) @signature `La/a/e/d$a;.b:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07c620.  v0:= new `java.util.ArrayList`;
  #L07c624.  v1:= v2.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07c628.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L07c62e.  v1:= v2.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07c632.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L07c638.  return v0 @kind object;
}
procedure `b.f` `c`(`a.a.e.d$a` v6 @kind this) @signature `La/a/e/d$a;.c:()Lb/f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07c64c.  call temp:= `h`(v6) @signature `La/a/e/d$a;.h:()I` @kind direct;
  #L07c652.  v1:= temp;
  #L07c654.  v0:= v1 ^& 128;
  #L07c658.  v2:= 128I;
  #L07c65c.  if v0 != v2 then goto L07c69a;
  #L07c660.  v0:= 1I;
  #L07c662.  v2:= 127I;
  #L07c666.  call temp:= `a`(v6, v1, v2) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L07c66c.  v1:= temp;
  #L07c66e.  if v0 == 0 then goto L07c69e;
  #L07c672.  call temp:= `a`() @signature `La/a/e/k;.a:()La/a/e/k;` @kind static;
  #L07c678.  v0:= temp @kind object;
  #L07c67a.  v2:= v6.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L07c67e.  v4:= (`long`) v1 @kind i2l;
  #L07c680.  call temp:= `f`(v2, v4) @signature `Lb/e;.f:(J)[B` @kind interface;
  #L07c686.  v1:= temp @kind object;
  #L07c688.  call temp:= `a`(v0, v1) @signature `La/a/e/k;.a:([B)[B` @kind virtual;
  #L07c68e.  v0:= temp @kind object;
  #L07c690.  call temp:= `a`(v0) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #L07c696.  v0:= temp @kind object;
  #L07c698.  return v0 @kind object;
  #L07c69a.  v0:= 0I;
  #L07c69c.  goto L07c662;
  #L07c69e.  v0:= v6.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L07c6a2.  v2:= (`long`) v1 @kind i2l;
  #L07c6a4.  call temp:= `c`(v0, v2) @signature `Lb/e;.c:(J)Lb/f;` @kind interface;
  #L07c6aa.  v0:= temp @kind object;
  #L07c6ac.  goto L07c698;
}
