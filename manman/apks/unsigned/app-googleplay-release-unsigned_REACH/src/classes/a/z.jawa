record `a.z` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `a.x` `a.z.a` @AccessFlag FINAL;
  `a.v` `a.z.b` @AccessFlag FINAL;
  `int` `a.z.c` @AccessFlag FINAL;
  `java.lang.String` `a.z.d` @AccessFlag FINAL;
  `a.p` `a.z.e` @AccessFlag FINAL;
  `a.q` `a.z.f` @AccessFlag FINAL;
  `a.aa` `a.z.g` @AccessFlag FINAL;
  `a.z` `a.z.h` @AccessFlag FINAL;
  `a.z` `a.z.i` @AccessFlag FINAL;
  `a.z` `a.z.j` @AccessFlag FINAL;
  `long` `a.z.k` @AccessFlag FINAL;
  `long` `a.z.l` @AccessFlag FINAL;
  `a.d` `a.z.m` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`a.z` v2 @kind this, `a.z$a` v3 @kind object) @signature `La/z;.<init>:(La/z$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L08d0d4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08d0da.  v0:= v3.`a.z$a.a` @type ^`a.x` @kind object;
  #L08d0de.  v2.`a.z.a` @type ^`a.x` := v0 @kind object;
  #L08d0e2.  v0:= v3.`a.z$a.b` @type ^`a.v` @kind object;
  #L08d0e6.  v2.`a.z.b` @type ^`a.v` := v0 @kind object;
  #L08d0ea.  v0:= v3.`a.z$a.c` @type ^`int`;
  #L08d0ee.  v2.`a.z.c` @type ^`int` := v0;
  #L08d0f2.  v0:= v3.`a.z$a.d` @type ^`java.lang.String` @kind object;
  #L08d0f6.  v2.`a.z.d` @type ^`java.lang.String` := v0 @kind object;
  #L08d0fa.  v0:= v3.`a.z$a.e` @type ^`a.p` @kind object;
  #L08d0fe.  v2.`a.z.e` @type ^`a.p` := v0 @kind object;
  #L08d102.  v0:= v3.`a.z$a.f` @type ^`a.q$a` @kind object;
  #L08d106.  call temp:= `a`(v0) @signature `La/q$a;.a:()La/q;` @kind virtual;
  #L08d10c.  v0:= temp @kind object;
  #L08d10e.  v2.`a.z.f` @type ^`a.q` := v0 @kind object;
  #L08d112.  v0:= v3.`a.z$a.g` @type ^`a.aa` @kind object;
  #L08d116.  v2.`a.z.g` @type ^`a.aa` := v0 @kind object;
  #L08d11a.  v0:= v3.`a.z$a.h` @type ^`a.z` @kind object;
  #L08d11e.  v2.`a.z.h` @type ^`a.z` := v0 @kind object;
  #L08d122.  v0:= v3.`a.z$a.i` @type ^`a.z` @kind object;
  #L08d126.  v2.`a.z.i` @type ^`a.z` := v0 @kind object;
  #L08d12a.  v0:= v3.`a.z$a.j` @type ^`a.z` @kind object;
  #L08d12e.  v2.`a.z.j` @type ^`a.z` := v0 @kind object;
  #L08d132.  v0:= v3.`a.z$a.k` @type ^`long` @kind wide;
  #L08d136.  v2.`a.z.k` @type ^`long` := v0 @kind wide;
  #L08d13a.  v0:= v3.`a.z$a.l` @type ^`long` @kind wide;
  #L08d13e.  v2.`a.z.l` @type ^`long` := v0 @kind wide;
  #L08d142.  return @kind void;
}
procedure `a.x` `a`(`a.z` v1 @kind this) @signature `La/z;.a:()La/x;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08d154.  v0:= v1.`a.z.a` @type ^`a.x` @kind object;
  #L08d158.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`a.z` v1 @kind this, `java.lang.String` v2 @kind object) @signature `La/z;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08d16c.  v0:= 0I;
  #L08d16e.  call temp:= `a`(v1, v2, v0) @signature `La/z;.a:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L08d174.  v0:= temp @kind object;
  #L08d176.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`a.z` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `La/z;.a:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08d188.  v0:= v1.`a.z.f` @type ^`a.q` @kind object;
  #L08d18c.  call temp:= `a`(v0, v2) @signature `La/q;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L08d192.  v0:= temp @kind object;
  #L08d194.  if v0 == 0 then goto L08d19a;
  #L08d198.  v3:= v0 @kind object;
  #L08d19a.  return v3 @kind object;
}
procedure `int` `b`(`a.z` v1 @kind this) @signature `La/z;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08d1ac.  v0:= v1.`a.z.c` @type ^`int`;
  #L08d1b0.  return v0;
}
procedure `boolean` `c`(`a.z` v2 @kind this) @signature `La/z;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08d1c4.  v0:= v2.`a.z.c` @type ^`int`;
  #L08d1c8.  v1:= 200I;
  #L08d1cc.  if v0 < v1 then goto L08d1e0;
  #L08d1d0.  v0:= v2.`a.z.c` @type ^`int`;
  #L08d1d4.  v1:= 300I;
  #L08d1d8.  if v0 >= v1 then goto L08d1e0;
  #L08d1dc.  v0:= 1I;
  #L08d1de.  return v0;
  #L08d1e0.  v0:= 0I;
  #L08d1e2.  goto L08d1de;
}
procedure `void` `close`(`a.z` v1 @kind this) @signature `La/z;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08d1f4.  v0:= v1.`a.z.g` @type ^`a.aa` @kind object;
  #L08d1f8.  call `close`(v0) @signature `La/aa;.close:()V` @kind virtual;
  #L08d1fe.  return @kind void;
}
procedure `a.p` `d`(`a.z` v1 @kind this) @signature `La/z;.d:()La/p;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08d210.  v0:= v1.`a.z.e` @type ^`a.p` @kind object;
  #L08d214.  return v0 @kind object;
}
procedure `a.q` `e`(`a.z` v1 @kind this) @signature `La/z;.e:()La/q;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08d228.  v0:= v1.`a.z.f` @type ^`a.q` @kind object;
  #L08d22c.  return v0 @kind object;
}
procedure `a.aa` `f`(`a.z` v1 @kind this) @signature `La/z;.f:()La/aa;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08d240.  v0:= v1.`a.z.g` @type ^`a.aa` @kind object;
  #L08d244.  return v0 @kind object;
}
procedure `a.z$a` `g`(`a.z` v1 @kind this) @signature `La/z;.g:()La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08d258.  v0:= new `a.z$a`;
  #L08d25c.  call `<init>`(v0, v1) @signature `La/z$a;.<init>:(La/z;)V` @kind direct;
  #L08d262.  return v0 @kind object;
}
procedure `a.d` `h`(`a.z` v1 @kind this) @signature `La/z;.h:()La/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08d274.  v0:= v1.`a.z.m` @type ^`a.d` @kind object;
  #L08d278.  if v0 == 0 then goto L08d27e;
  #L08d27c.  return v0 @kind object;
  #L08d27e.  v0:= v1.`a.z.f` @type ^`a.q` @kind object;
  #L08d282.  call temp:= `a`(v0) @signature `La/d;.a:(La/q;)La/d;` @kind static;
  #L08d288.  v0:= temp @kind object;
  #L08d28a.  v1.`a.z.m` @type ^`a.d` := v0 @kind object;
  #L08d28e.  goto L08d27c;
}
procedure `long` `i`(`a.z` v2 @kind this) @signature `La/z;.i:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08d2a0.  v0:= v2.`a.z.k` @type ^`long` @kind wide;
  #L08d2a4.  return v0 @kind wide;
}
procedure `long` `j`(`a.z` v2 @kind this) @signature `La/z;.j:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08d2b8.  v0:= v2.`a.z.l` @type ^`long` @kind wide;
  #L08d2bc.  return v0 @kind wide;
}
procedure `java.lang.String` `toString`(`a.z` v2 @kind this) @signature `La/z;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08d2d0.  v0:= new `java.lang.StringBuilder`;
  #L08d2d4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08d2da.  v1:= "Response{protocol=" @kind object;
  #L08d2de.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08d2e4.  v0:= temp @kind object;
  #L08d2e6.  v1:= v2.`a.z.b` @type ^`a.v` @kind object;
  #L08d2ea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08d2f0.  v0:= temp @kind object;
  #L08d2f2.  v1:= ", code=" @kind object;
  #L08d2f6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08d2fc.  v0:= temp @kind object;
  #L08d2fe.  v1:= v2.`a.z.c` @type ^`int`;
  #L08d302.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08d308.  v0:= temp @kind object;
  #L08d30a.  v1:= ", message=" @kind object;
  #L08d30e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08d314.  v0:= temp @kind object;
  #L08d316.  v1:= v2.`a.z.d` @type ^`java.lang.String` @kind object;
  #L08d31a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08d320.  v0:= temp @kind object;
  #L08d322.  v1:= ", url=" @kind object;
  #L08d326.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08d32c.  v0:= temp @kind object;
  #L08d32e.  v1:= v2.`a.z.a` @type ^`a.x` @kind object;
  #L08d332.  call temp:= `a`(v1) @signature `La/x;.a:()La/r;` @kind virtual;
  #L08d338.  v1:= temp @kind object;
  #L08d33a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08d340.  v0:= temp @kind object;
  #L08d342.  v1:= 125I;
  #L08d346.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L08d34c.  v0:= temp @kind object;
  #L08d34e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08d354.  v0:= temp @kind object;
  #L08d356.  return v0 @kind object;
}
