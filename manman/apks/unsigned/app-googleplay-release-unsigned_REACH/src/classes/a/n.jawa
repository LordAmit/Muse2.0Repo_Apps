record `a.n` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `a.n.a` @AccessFlag PRIVATE;
  `int` `a.n.b` @AccessFlag PRIVATE;
  `java.lang.Runnable` `a.n.c` @AccessFlag PRIVATE;
  `java.util.concurrent.ExecutorService` `a.n.d` @AccessFlag PRIVATE;
  `java.util.Deque` `a.n.e` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `a.n.f` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `a.n.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.n` v1 @kind this) @signature `La/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L088fd4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L088fda.  v0:= 64I;
  #L088fde.  v1.`a.n.a` @type ^`int` := v0;
  #L088fe2.  v0:= 5I;
  #L088fe4.  v1.`a.n.b` @type ^`int` := v0;
  #L088fe8.  v0:= new `java.util.ArrayDeque`;
  #L088fec.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L088ff2.  v1.`a.n.e` @type ^`java.util.Deque` := v0 @kind object;
  #L088ff6.  v0:= new `java.util.ArrayDeque`;
  #L088ffa.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L089000.  v1.`a.n.f` @type ^`java.util.Deque` := v0 @kind object;
  #L089004.  v0:= new `java.util.ArrayDeque`;
  #L089008.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L08900e.  v1.`a.n.g` @type ^`java.util.Deque` := v0 @kind object;
  #L089012.  return @kind void;
}
procedure `void` `a`(`a.n` v2 @kind this, `java.util.Deque` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `La/n;.a:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L089024.  @monitorenter v2
  #Try_start0.  
  #L089026.  call temp:= `remove`(v3, v4) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L08902c.  v0:= temp;
  #L08902e.  if v0 != 0 then goto L089048;
  #L089032.  v0:= new `java.lang.AssertionError`;
  #L089036.  v1:= "Call wasn't in-flight!" @kind object;
  #L08903a.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L089040.  throw v0;
  #L089042.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L089044.  @monitorexit v2
  #Try_end0.  
  #L089046.  throw v0;
  #L089048.  if v5 == 0 then goto L089052;
  #Try_start1.  
  #L08904c.  call `c`(v2) @signature `La/n;.c:()V` @kind direct;
  #L089052.  call temp:= `b`(v2) @signature `La/n;.b:()I` @kind virtual;
  #L089058.  v0:= temp;
  #L08905a.  v1:= v2.`a.n.c` @type ^`java.lang.Runnable` @kind object;
  #L08905e.  @monitorexit v2
  #Try_end1.  
  #L089060.  if v0 != 0 then goto L08906e;
  #L089064.  if v1 == 0 then goto L08906e;
  #L089068.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L08906e.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L089042;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L089042;
}
procedure `int` `b`(`a.n` v4 @kind this, `a.w$a` v5 @kind object) @signature `La/n;.b:(La/w$a;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L089094.  v0:= 0I;
  #L089096.  v1:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L08909a.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0890a0.  v2:= temp @kind object;
  #L0890a2.  v1:= v0;
  #L0890a4.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0890aa.  v0:= temp;
  #L0890ac.  if v0 == 0 then goto L0890e0;
  #L0890b0.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0890b6.  v0:= temp @kind object;
  #L0890b8.  v0:= (`a.w$a`) v0 @kind object;
  #L0890bc.  call temp:= `a`(v0) @signature `La/w$a;.a:()Ljava/lang/String;` @kind virtual;
  #L0890c2.  v0:= temp @kind object;
  #L0890c4.  call temp:= `a`(v5) @signature `La/w$a;.a:()Ljava/lang/String;` @kind virtual;
  #L0890ca.  v3:= temp @kind object;
  #L0890cc.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L0890d2.  v0:= temp;
  #L0890d4.  if v0 == 0 then goto L0890e2;
  #L0890d8.  v0:= v1 + 1;
  #L0890dc.  v1:= v0;
  #L0890de.  goto L0890a4;
  #L0890e0.  return v1;
  #L0890e2.  v0:= v1;
  #L0890e4.  goto L0890dc;
}
procedure `void` `c`(`a.n` v4 @kind this) @signature `La/n;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0890f8.  v0:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L0890fc.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L089102.  v0:= temp;
  #L089104.  v1:= v4.`a.n.a` @type ^`int`;
  #L089108.  if v0 < v1 then goto L08910e;
  #L08910c.  return @kind void;
  #L08910e.  v0:= v4.`a.n.e` @type ^`java.util.Deque` @kind object;
  #L089112.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L089118.  v0:= temp;
  #L08911a.  if v0 != 0 then goto L08910c;
  #L08911e.  v0:= v4.`a.n.e` @type ^`java.util.Deque` @kind object;
  #L089122.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L089128.  v1:= temp @kind object;
  #L08912a.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L089130.  v0:= temp;
  #L089132.  if v0 == 0 then goto L08910c;
  #L089136.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L08913c.  v0:= temp @kind object;
  #L08913e.  v0:= (`a.w$a`) v0 @kind object;
  #L089142.  call temp:= `b`(v4, v0) @signature `La/n;.b:(La/w$a;)I` @kind direct;
  #L089148.  v2:= temp;
  #L08914a.  v3:= v4.`a.n.b` @type ^`int`;
  #L08914e.  if v2 >= v3 then goto L089170;
  #L089152.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L089158.  v2:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L08915c.  call temp:= `add`(v2, v0) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L089162.  call temp:= `a`(v4) @signature `La/n;.a:()Ljava/util/concurrent/ExecutorService;` @kind virtual;
  #L089168.  v2:= temp @kind object;
  #L08916a.  call `execute`(v2, v0) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L089170.  v0:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L089174.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L08917a.  v0:= temp;
  #L08917c.  v2:= v4.`a.n.a` @type ^`int`;
  #L089180.  if v0 < v2 then goto L08912a;
  #L089184.  goto L08910c;
}
procedure `java.util.concurrent.ExecutorService` `a`(`a.n` v9 @kind this) @signature `La/n;.a:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L089198.  @monitorenter v9
  #Try_start0.  
  #L08919a.  v0:= v9.`a.n.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L08919e.  if v0 != 0 then goto L0891d8;
  #L0891a2.  v1:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L0891a6.  v2:= 0I;
  #L0891a8.  v3:= 2147483647I;
  #L0891ae.  v4:= 60L;
  #L0891b2.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L0891b6.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L0891ba.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L0891c0.  v0:= "OkHttp Dispatcher" @kind object;
  #L0891c4.  v8:= 0I;
  #L0891c6.  call temp:= `a`(v0, v8) @signature `La/a/c;.a:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L0891cc.  v8:= temp @kind object;
  #L0891ce.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L0891d4.  v9.`a.n.d` @type ^`java.util.concurrent.ExecutorService` := v1 @kind object;
  #L0891d8.  v0:= v9.`a.n.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #Try_end0.  
  #L0891dc.  @monitorexit v9
  #L0891de.  return v0 @kind object;
  #L0891e0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0891e2.  @monitorexit v9
  #L0891e4.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0891e0;
}
procedure `void` `a`(`a.n` v2 @kind this, `a.w$a` v3 @kind object) @signature `La/n;.a:(La/w$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L089204.  v0:= v2.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L089208.  v1:= 1I;
  #L08920a.  call `a`(v2, v0, v3, v1) @signature `La/n;.a:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @kind direct;
  #L089210.  return @kind void;
}
procedure `void` `a`(`a.n` v1 @kind this, `a.w` v2 @kind object) @signature `La/n;.a:(La/w;)V` @AccessFlag  {
    temp;
    v0;

  #L089224.  @monitorenter v1
  #Try_start0.  
  #L089226.  v0:= v1.`a.n.g` @type ^`java.util.Deque` @kind object;
  #L08922a.  call temp:= `add`(v0, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #Try_end0.  
  #L089230.  @monitorexit v1
  #L089232.  return @kind void;
  #L089234.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L089236.  @monitorexit v1
  #L089238.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L089234;
}
procedure `int` `b`(`a.n` v2 @kind this) @signature `La/n;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L089258.  @monitorenter v2
  #Try_start0.  
  #L08925a.  v0:= v2.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L08925e.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L089264.  v0:= temp;
  #L089266.  v1:= v2.`a.n.g` @type ^`java.util.Deque` @kind object;
  #L08926a.  call temp:= `size`(v1) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #Try_end0.  
  #L089270.  v1:= temp;
  #L089272.  v0:= v0 + v1 @kind int;
  #L089274.  @monitorexit v2
  #L089276.  return v0;
  #L089278.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08927a.  @monitorexit v2
  #L08927c.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L089278;
}
procedure `void` `b`(`a.n` v2 @kind this, `a.w` v3 @kind object) @signature `La/n;.b:(La/w;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L08929c.  v0:= v2.`a.n.g` @type ^`java.util.Deque` @kind object;
  #L0892a0.  v1:= 0I;
  #L0892a2.  call `a`(v2, v0, v3, v1) @signature `La/n;.a:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @kind direct;
  #L0892a8.  return @kind void;
}
