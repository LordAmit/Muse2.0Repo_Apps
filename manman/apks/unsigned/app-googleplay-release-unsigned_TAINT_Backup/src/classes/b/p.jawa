record `b.p` @kind class @AccessFlag FINAL extends `b.f` @kind class {
  `byte`[][] `b.p.f` @AccessFlag FINAL_TRANSIENT;
  `int`[] `b.p.g` @AccessFlag FINAL_TRANSIENT;
}
procedure `void` `<init>`(`b.p` v7 @kind this, `b.c` v8 @kind object, `int` v9 ) @signature `Lb/p;.<init>:(Lb/c;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11d57c.  v6:= 0I;
  #L11d57e.  v0:= 0I;
  #L11d580.  call `<init>`(v7, v0) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11d586.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L11d58a.  v2:= 0L;
  #L11d58e.  v4:= (`long`) v9 @kind i2l;
  #L11d590.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11d596.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11d59a.  v1:= v6;
  #L11d59c.  v2:= v6;
  #L11d59e.  if v2 >= v9 then goto L11d5d4;
  #L11d5a2.  v3:= v0.`b.n.c` @type ^`int`;
  #L11d5a6.  v4:= v0.`b.n.b` @type ^`int`;
  #L11d5aa.  if v3 != v4 then goto L11d5be;
  #L11d5ae.  v0:= new `java.lang.AssertionError`;
  #L11d5b2.  v1:= "s.limit == s.pos" @kind object;
  #L11d5b6.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11d5bc.  throw v0;
  #L11d5be.  v3:= v0.`b.n.c` @type ^`int`;
  #L11d5c2.  v4:= v0.`b.n.b` @type ^`int`;
  #L11d5c6.  v3:= v3 - v4 @kind int;
  #L11d5c8.  v2:= v2 + v3 @kind int;
  #L11d5ca.  v1:= v1 + 1;
  #L11d5ce.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11d5d2.  goto L11d59e;
  #L11d5d4.  v0:= new `byte`[][v1];
  #L11d5d8.  v7.`b.p.f` @type ^`byte`[][] := v0 @kind object;
  #L11d5dc.  v0:= v1 * 2;
  #L11d5e0.  v0:= new `int`[v0];
  #L11d5e4.  v7.`b.p.g` @type ^`int`[] := v0 @kind object;
  #L11d5e8.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11d5ec.  v1:= v0 @kind object;
  #L11d5ee.  v2:= v6;
  #L11d5f0.  if v6 >= v9 then goto L11d640;
  #L11d5f4.  v0:= v7.`b.p.f` @type ^`byte`[][] @kind object;
  #L11d5f8.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11d5fc.  v0[v2]:= v3 @kind object;
  #L11d600.  v0:= v1.`b.n.c` @type ^`int`;
  #L11d604.  v3:= v1.`b.n.b` @type ^`int`;
  #L11d608.  v0:= v0 - v3 @kind int;
  #L11d60a.  v0:= v0 + v6 @kind int;
  #L11d60c.  if v0 <= v9 then goto L11d612;
  #L11d610.  v0:= v9;
  #L11d612.  v3:= v7.`b.p.g` @type ^`int`[] @kind object;
  #L11d616.  v3[v2]:= v0;
  #L11d61a.  v3:= v7.`b.p.g` @type ^`int`[] @kind object;
  #L11d61e.  v4:= v7.`b.p.f` @type ^`byte`[][] @kind object;
  #L11d622.  v4:= length @variable v4;
  #L11d624.  v4:= v4 + v2 @kind int;
  #L11d626.  v5:= v1.`b.n.b` @type ^`int`;
  #L11d62a.  v3[v4]:= v5;
  #L11d62e.  v3:= 1I;
  #L11d630.  v1.`b.n.d` @type ^`boolean` := v3 @kind boolean;
  #L11d634.  v2:= v2 + 1;
  #L11d638.  v1:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L11d63c.  v6:= v0;
  #L11d63e.  goto L11d5f0;
  #L11d640.  return @kind void;
}
procedure `int` `b`(`b.p` v4 @kind this, `int` v5 ) @signature `Lb/p;.b:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11d654.  v0:= v4.`b.p.g` @type ^`int`[] @kind object;
  #L11d658.  v1:= 0I;
  #L11d65a.  v2:= v4.`b.p.f` @type ^`byte`[][] @kind object;
  #L11d65e.  v2:= length @variable v2;
  #L11d660.  v3:= v5 + 1;
  #L11d664.  call temp:= `binarySearch`(v0, v1, v2, v3) @signature `Ljava/util/Arrays;.binarySearch:([IIII)I` @kind static;
  #L11d66a.  v0:= temp;
  #L11d66c.  if v0 < 0 then goto L11d672;
  #L11d670.  return v0;
  #L11d672.  v0:= v0 ^~ -1;
  #L11d676.  goto L11d670;
}
procedure `b.f` `i`(`b.p` v2 @kind this) @signature `Lb/p;.i:()Lb/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L11d688.  v0:= new `b.f`;
  #L11d68c.  call temp:= `h`(v2) @signature `Lb/p;.h:()[B` @kind virtual;
  #L11d692.  v1:= temp @kind object;
  #L11d694.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11d69a.  return v0 @kind object;
}
procedure `byte` `a`(`b.p` v6 @kind this, `int` v7 ) @signature `Lb/p;.a:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11d6ac.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11d6b0.  v1:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11d6b4.  v1:= length @variable v1;
  #L11d6b6.  v1:= v1 + -1;
  #L11d6ba.  v0:= v0[v1];
  #L11d6be.  v0:= (`long`) v0 @kind i2l;
  #L11d6c0.  v2:= (`long`) v7 @kind i2l;
  #L11d6c2.  v4:= 1L;
  #L11d6c6.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11d6cc.  call temp:= `b`(v6, v7) @signature `Lb/p;.b:(I)I` @kind direct;
  #L11d6d2.  v1:= temp;
  #L11d6d4.  if v1 != 0 then goto L11d6fe;
  #L11d6d8.  v0:= 0I;
  #L11d6da.  v2:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11d6de.  v3:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11d6e2.  v3:= length @variable v3;
  #L11d6e4.  v3:= v3 + v1 @kind int;
  #L11d6e6.  v2:= v2[v3];
  #L11d6ea.  v3:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11d6ee.  v1:= v3[v1] @kind object;
  #L11d6f2.  v0:= v7 - v0 @kind int;
  #L11d6f6.  v0:= v0 + v2 @kind int;
  #L11d6f8.  v0:= v1[v0] @kind byte;
  #L11d6fc.  return v0;
  #L11d6fe.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11d702.  v2:= v1 + -1;
  #L11d706.  v0:= v0[v2];
  #L11d70a.  goto L11d6da;
}
procedure `b.f` `a`(`b.p` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lb/p;.a:(II)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d71c.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11d722.  v0:= temp @kind object;
  #L11d724.  call temp:= `a`(v0, v2, v3) @signature `Lb/f;.a:(II)Lb/f;` @kind virtual;
  #L11d72a.  v0:= temp @kind object;
  #L11d72c.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`b.p` v1 @kind this) @signature `Lb/p;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d740.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11d746.  v0:= temp @kind object;
  #L11d748.  call temp:= `a`(v0) @signature `Lb/f;.a:()Ljava/lang/String;` @kind virtual;
  #L11d74e.  v0:= temp @kind object;
  #L11d750.  return v0 @kind object;
}
procedure `void` `a`(`b.p` v8 @kind this, `b.c` v9 @kind object) @signature `Lb/p;.a:(Lb/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11d764.  v0:= 0I;
  #L11d766.  v1:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L11d76a.  v3:= length @variable v1;
  #L11d76c.  v1:= v0;
  #L11d76e.  if v0 >= v3 then goto L11d7cc;
  #L11d772.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L11d776.  v4:= v3 + v0 @kind int;
  #L11d77a.  v4:= v2[v4];
  #L11d77e.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L11d782.  v2:= v2[v0];
  #L11d786.  v5:= new `b.n`;
  #L11d78a.  v6:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L11d78e.  v6:= v6[v0] @kind object;
  #L11d792.  v7:= v4 + v2 @kind int;
  #L11d796.  v1:= v7 - v1 @kind int;
  #L11d79a.  call `<init>`(v5, v6, v4, v1) @signature `Lb/n;.<init>:([BII)V` @kind direct;
  #L11d7a0.  v1:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11d7a4.  if v1 != 0 then goto L11d7bc;
  #L11d7a8.  v5.`b.n.g` @type ^`b.n` := v5 @kind object;
  #L11d7ac.  v5.`b.n.f` @type ^`b.n` := v5 @kind object;
  #L11d7b0.  v9.`b.c.a` @type ^`b.n` := v5 @kind object;
  #L11d7b4.  v0:= v0 + 1;
  #L11d7b8.  v1:= v2;
  #L11d7ba.  goto L11d76e;
  #L11d7bc.  v1:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11d7c0.  v1:= v1.`b.n.g` @type ^`b.n` @kind object;
  #L11d7c4.  call temp:= `a`(v1, v5) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11d7ca.  goto L11d7b4;
  #L11d7cc.  v2:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11d7d0.  v0:= (`long`) v1 @kind i2l;
  #L11d7d2.  v0:= v0 + v2 @kind long;
  #L11d7d4.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11d7d8.  return @kind void;
}
procedure `boolean` `a`(`b.p` v6 @kind this, `int` v7 , `b.f` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lb/p;.a:(ILb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11d7ec.  v1:= 0I;
  #L11d7ee.  if v7 < 0 then goto L11d800;
  #L11d7f2.  call temp:= `g`(v6) @signature `Lb/p;.g:()I` @kind virtual;
  #L11d7f8.  v0:= temp;
  #L11d7fa.  v0:= v0 - v10 @kind int;
  #L11d7fc.  if v7 <= v0 then goto L11d802;
  #L11d800.  return v1;
  #L11d802.  call temp:= `b`(v6, v7) @signature `Lb/p;.b:(I)I` @kind direct;
  #L11d808.  v0:= temp;
  #L11d80a.  v2:= v0;
  #L11d80c.  if v10 <= 0 then goto L11d872;
  #L11d810.  if v2 != 0 then goto L11d864;
  #L11d814.  v0:= v1;
  #L11d816.  v3:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11d81a.  v3:= v3[v2];
  #L11d81e.  v3:= v3 - v0 @kind int;
  #L11d820.  v3:= v3 + v0 @kind int;
  #L11d822.  v3:= v3 - v7 @kind int;
  #L11d824.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11d82a.  v3:= temp;
  #L11d82c.  v4:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11d830.  v5:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11d834.  v5:= length @variable v5;
  #L11d836.  v5:= v5 + v2 @kind int;
  #L11d838.  v4:= v4[v5];
  #L11d83c.  v0:= v7 - v0 @kind int;
  #L11d840.  v0:= v0 + v4 @kind int;
  #L11d842.  v4:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11d846.  v4:= v4[v2] @kind object;
  #L11d84a.  call temp:= `a`(v8, v9, v4, v0, v3) @signature `Lb/f;.a:(I[BII)Z` @kind virtual;
  #L11d850.  v0:= temp;
  #L11d852.  if v0 == 0 then goto L11d800;
  #L11d856.  v7:= v7 + v3 @kind int;
  #L11d858.  v9:= v9 + v3 @kind int;
  #L11d85a.  v10:= v10 - v3 @kind int;
  #L11d85c.  v0:= v2 + 1;
  #L11d860.  v2:= v0;
  #L11d862.  goto L11d80c;
  #L11d864.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11d868.  v3:= v2 + -1;
  #L11d86c.  v0:= v0[v3];
  #L11d870.  goto L11d816;
  #L11d872.  v1:= 1I;
  #L11d874.  goto L11d800;
}
procedure `boolean` `a`(`b.p` v6 @kind this, `int` v7 , `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lb/p;.a:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11d888.  v1:= 0I;
  #L11d88a.  if v7 < 0 then goto L11d8a8;
  #L11d88e.  call temp:= `g`(v6) @signature `Lb/p;.g:()I` @kind virtual;
  #L11d894.  v0:= temp;
  #L11d896.  v0:= v0 - v10 @kind int;
  #L11d898.  if v7 > v0 then goto L11d8a8;
  #L11d89c.  if v9 < 0 then goto L11d8a8;
  #L11d8a0.  v0:= length @variable v8;
  #L11d8a2.  v0:= v0 - v10 @kind int;
  #L11d8a4.  if v9 <= v0 then goto L11d8aa;
  #L11d8a8.  return v1;
  #L11d8aa.  call temp:= `b`(v6, v7) @signature `Lb/p;.b:(I)I` @kind direct;
  #L11d8b0.  v0:= temp;
  #L11d8b2.  v2:= v0;
  #L11d8b4.  if v10 <= 0 then goto L11d91a;
  #L11d8b8.  if v2 != 0 then goto L11d90c;
  #L11d8bc.  v0:= v1;
  #L11d8be.  v3:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11d8c2.  v3:= v3[v2];
  #L11d8c6.  v3:= v3 - v0 @kind int;
  #L11d8c8.  v3:= v3 + v0 @kind int;
  #L11d8ca.  v3:= v3 - v7 @kind int;
  #L11d8cc.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11d8d2.  v3:= temp;
  #L11d8d4.  v4:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11d8d8.  v5:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11d8dc.  v5:= length @variable v5;
  #L11d8de.  v5:= v5 + v2 @kind int;
  #L11d8e0.  v4:= v4[v5];
  #L11d8e4.  v0:= v7 - v0 @kind int;
  #L11d8e8.  v0:= v0 + v4 @kind int;
  #L11d8ea.  v4:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11d8ee.  v4:= v4[v2] @kind object;
  #L11d8f2.  call temp:= `a`(v4, v0, v8, v9, v3) @signature `Lb/t;.a:([BI[BII)Z` @kind static;
  #L11d8f8.  v0:= temp;
  #L11d8fa.  if v0 == 0 then goto L11d8a8;
  #L11d8fe.  v7:= v7 + v3 @kind int;
  #L11d900.  v9:= v9 + v3 @kind int;
  #L11d902.  v10:= v10 - v3 @kind int;
  #L11d904.  v0:= v2 + 1;
  #L11d908.  v2:= v0;
  #L11d90a.  goto L11d8b4;
  #L11d90c.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11d910.  v3:= v2 + -1;
  #L11d914.  v0:= v0[v3];
  #L11d918.  goto L11d8be;
  #L11d91a.  v1:= 1I;
  #L11d91c.  goto L11d8a8;
}
procedure `java.lang.String` `b`(`b.p` v1 @kind this) @signature `Lb/p;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d930.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11d936.  v0:= temp @kind object;
  #L11d938.  call temp:= `b`(v0) @signature `Lb/f;.b:()Ljava/lang/String;` @kind virtual;
  #L11d93e.  v0:= temp @kind object;
  #L11d940.  return v0 @kind object;
}
procedure `b.f` `c`(`b.p` v1 @kind this) @signature `Lb/p;.c:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d954.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11d95a.  v0:= temp @kind object;
  #L11d95c.  call temp:= `c`(v0) @signature `Lb/f;.c:()Lb/f;` @kind virtual;
  #L11d962.  v0:= temp @kind object;
  #L11d964.  return v0 @kind object;
}
procedure `b.f` `d`(`b.p` v1 @kind this) @signature `Lb/p;.d:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d978.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11d97e.  v0:= temp @kind object;
  #L11d980.  call temp:= `d`(v0) @signature `Lb/f;.d:()Lb/f;` @kind virtual;
  #L11d986.  v0:= temp @kind object;
  #L11d988.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`b.p` v1 @kind this) @signature `Lb/p;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d99c.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11d9a2.  v0:= temp @kind object;
  #L11d9a4.  call temp:= `e`(v0) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L11d9aa.  v0:= temp @kind object;
  #L11d9ac.  return v0 @kind object;
}
procedure `boolean` `equals`(`b.p` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lb/p;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11d9c0.  v1:= 1I;
  #L11d9c2.  v2:= 0I;
  #L11d9c4.  if v5 != v4 then goto L11d9ca;
  #L11d9c8.  return v1;
  #L11d9ca.  v0:= instanceof @variable v5 @type ^`b.f` @kind boolean;
  #L11d9ce.  if v0 == 0 then goto L11da0a;
  #L11d9d2.  v0:= v5 @kind object;
  #L11d9d4.  v0:= (`b.f`) v0 @kind object;
  #L11d9d8.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L11d9de.  v0:= temp;
  #L11d9e0.  call temp:= `g`(v4) @signature `Lb/p;.g:()I` @kind virtual;
  #L11d9e6.  v3:= temp;
  #L11d9e8.  if v0 != v3 then goto L11da0a;
  #L11d9ec.  v5:= (`b.f`) v5 @kind object;
  #L11d9f0.  call temp:= `g`(v4) @signature `Lb/p;.g:()I` @kind virtual;
  #L11d9f6.  v0:= temp;
  #L11d9f8.  call temp:= `a`(v4, v2, v5, v2, v0) @signature `Lb/p;.a:(ILb/f;II)Z` @kind virtual;
  #L11d9fe.  v0:= temp;
  #L11da00.  if v0 == 0 then goto L11da0a;
  #L11da04.  v0:= v1;
  #L11da06.  v1:= v0;
  #L11da08.  goto L11d9c8;
  #L11da0a.  v0:= v2;
  #L11da0c.  goto L11da06;
}
procedure `b.f` `f`(`b.p` v1 @kind this) @signature `Lb/p;.f:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11da20.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11da26.  v0:= temp @kind object;
  #L11da28.  call temp:= `f`(v0) @signature `Lb/f;.f:()Lb/f;` @kind virtual;
  #L11da2e.  v0:= temp @kind object;
  #L11da30.  return v0 @kind object;
}
procedure `int` `g`(`b.p` v2 @kind this) @signature `Lb/p;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11da44.  v0:= v2.`b.p.g` @type ^`int`[] @kind object;
  #L11da48.  v1:= v2.`b.p.f` @type ^`byte`[][] @kind object;
  #L11da4c.  v1:= length @variable v1;
  #L11da4e.  v1:= v1 + -1;
  #L11da52.  v0:= v0[v1];
  #L11da56.  return v0;
}
procedure `byte`[] `h`(`b.p` v8 @kind this) @signature `Lb/p;.h:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11da68.  v0:= 0I;
  #L11da6a.  v1:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L11da6e.  v2:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L11da72.  v2:= length @variable v2;
  #L11da74.  v2:= v2 + -1;
  #L11da78.  v1:= v1[v2];
  #L11da7c.  v3:= new `byte`[v1];
  #L11da80.  v1:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L11da84.  v4:= length @variable v1;
  #L11da86.  v1:= v0;
  #L11da88.  if v0 >= v4 then goto L11daba;
  #L11da8c.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L11da90.  v5:= v4 + v0 @kind int;
  #L11da94.  v5:= v2[v5];
  #L11da98.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L11da9c.  v2:= v2[v0];
  #L11daa0.  v6:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L11daa4.  v6:= v6[v0] @kind object;
  #L11daa8.  v7:= v2 - v1 @kind int;
  #L11daac.  call `arraycopy`(v6, v5, v3, v1, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11dab2.  v0:= v0 + 1;
  #L11dab6.  v1:= v2;
  #L11dab8.  goto L11da88;
  #L11daba.  return v3 @kind object;
}
procedure `int` `hashCode`(`b.p` v9 @kind this) @signature `Lb/p;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11dacc.  v1:= 0I;
  #L11dace.  v0:= v9.`b.p.d` @type ^`int`;
  #L11dad2.  if v0 == 0 then goto L11dad8;
  #L11dad6.  return v0;
  #L11dad8.  v0:= 1I;
  #L11dada.  v2:= v9.`b.p.f` @type ^`byte`[][] @kind object;
  #L11dade.  v5:= length @variable v2;
  #L11dae0.  v2:= v1;
  #L11dae2.  v3:= v1;
  #L11dae4.  if v2 >= v5 then goto L11db30;
  #L11dae8.  v1:= v9.`b.p.f` @type ^`byte`[][] @kind object;
  #L11daec.  v6:= v1[v2] @kind object;
  #L11daf0.  v1:= v9.`b.p.g` @type ^`int`[] @kind object;
  #L11daf4.  v4:= v5 + v2 @kind int;
  #L11daf8.  v1:= v1[v4];
  #L11dafc.  v4:= v9.`b.p.g` @type ^`int`[] @kind object;
  #L11db00.  v4:= v4[v2];
  #L11db04.  v3:= v4 - v3 @kind int;
  #L11db08.  v3:= v3 + v1 @kind int;
  #L11db0a.  v8:= v1;
  #L11db0c.  v1:= v0;
  #L11db0e.  v0:= v8;
  #L11db10.  if v0 >= v3 then goto L11db24;
  #L11db14.  v1:= v1 * 31;
  #L11db18.  v7:= v6[v0] @kind byte;
  #L11db1c.  v1:= v1 + v7 @kind int;
  #L11db1e.  v0:= v0 + 1;
  #L11db22.  goto L11db10;
  #L11db24.  v0:= v2 + 1;
  #L11db28.  v2:= v0;
  #L11db2a.  v3:= v4;
  #L11db2c.  v0:= v1;
  #L11db2e.  goto L11dae4;
  #L11db30.  v9.`b.p.d` @type ^`int` := v0;
  #L11db34.  goto L11dad6;
}
procedure `java.lang.String` `toString`(`b.p` v1 @kind this) @signature `Lb/p;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11db48.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11db4e.  v0:= temp @kind object;
  #L11db50.  call temp:= `toString`(v0) @signature `Lb/f;.toString:()Ljava/lang/String;` @kind virtual;
  #L11db56.  v0:= temp @kind object;
  #L11db58.  return v0 @kind object;
}
