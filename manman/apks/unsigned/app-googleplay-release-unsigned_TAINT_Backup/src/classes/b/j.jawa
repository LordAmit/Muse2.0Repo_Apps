record `b.j` @kind class @AccessFlag PUBLIC_FINAL extends `b.r` @kind interface {
  `b.e` `b.j.a` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `b.j.b` @AccessFlag PRIVATE_FINAL;
  `int` `b.j.c` @AccessFlag PRIVATE;
  `boolean` `b.j.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`b.j` v2 @kind this, `b.e` v3 @kind object, `java.util.zip.Inflater` v4 @kind object) @signature `Lb/j;.<init>:(Lb/e;Ljava/util/zip/Inflater;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L11bb74.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11bb7a.  if v3 != 0 then goto L11bb8e;
  #L11bb7e.  v0:= new `java.lang.IllegalArgumentException`;
  #L11bb82.  v1:= "source == null" @kind object;
  #L11bb86.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11bb8c.  throw v0;
  #L11bb8e.  if v4 != 0 then goto L11bba2;
  #L11bb92.  v0:= new `java.lang.IllegalArgumentException`;
  #L11bb96.  v1:= "inflater == null" @kind object;
  #L11bb9a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11bba0.  throw v0;
  #L11bba2.  v2.`b.j.a` @type ^`b.e` := v3 @kind object;
  #L11bba6.  v2.`b.j.b` @type ^`java.util.zip.Inflater` := v4 @kind object;
  #L11bbaa.  return @kind void;
}
procedure `void` `c`(`b.j` v4 @kind this) @signature `Lb/j;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11bbbc.  v0:= v4.`b.j.c` @type ^`int`;
  #L11bbc0.  if v0 != 0 then goto L11bbc6;
  #L11bbc4.  return @kind void;
  #L11bbc6.  v0:= v4.`b.j.c` @type ^`int`;
  #L11bbca.  v1:= v4.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11bbce.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L11bbd4.  v1:= temp;
  #L11bbd6.  v0:= v0 - v1 @kind int;
  #L11bbd8.  v1:= v4.`b.j.c` @type ^`int`;
  #L11bbdc.  v1:= v1 - v0 @kind int;
  #L11bbde.  v4.`b.j.c` @type ^`int` := v1;
  #L11bbe2.  v1:= v4.`b.j.a` @type ^`b.e` @kind object;
  #L11bbe6.  v2:= (`long`) v0 @kind i2l;
  #L11bbe8.  call `g`(v1, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L11bbee.  goto L11bbc4;
}
procedure `long` `a`(`b.j` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `Lb/j;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11bc00.  v0:= 0L;
  #L11bc04.  v2:= lcmp(v8, v0);
  #L11bc08.  if v2 >= 0 then goto L11bc3e;
  #L11bc0c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11bc10.  v1:= new `java.lang.StringBuilder`;
  #L11bc14.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11bc1a.  v2:= "byteCount < 0: " @kind object;
  #L11bc1e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bc24.  v1:= temp @kind object;
  #L11bc26.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bc2c.  v1:= temp @kind object;
  #L11bc2e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11bc34.  v1:= temp @kind object;
  #L11bc36.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11bc3c.  throw v0;
  #L11bc3e.  v2:= v6.`b.j.d` @type ^`boolean` @kind boolean;
  #L11bc42.  if v2 == 0 then goto L11bc56;
  #L11bc46.  v0:= new `java.lang.IllegalStateException`;
  #L11bc4a.  v1:= "closed" @kind object;
  #L11bc4e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11bc54.  throw v0;
  #L11bc56.  v2:= lcmp(v8, v0);
  #L11bc5a.  if v2 != 0 then goto L11bc60;
  #L11bc5e.  return v0 @kind wide;
  #L11bc60.  call temp:= `b`(v6) @signature `Lb/j;.b:()Z` @kind virtual;
  #L11bc66.  v0:= temp;
  #L11bc68.  v1:= 1I;
  #Try_start0.  
  #L11bc6a.  call temp:= `e`(v7, v1) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11bc70.  v1:= temp @kind object;
  #L11bc72.  v2:= v6.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11bc76.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11bc7a.  v4:= v1.`b.n.c` @type ^`int`;
  #L11bc7e.  v5:= v1.`b.n.c` @type ^`int`;
  #L11bc82.  v5:= v5 - 8192;
  #L11bc86.  call temp:= `inflate`(v2, v3, v4, v5) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #L11bc8c.  v2:= temp;
  #L11bc8e.  if v2 <= 0 then goto L11bcac;
  #L11bc92.  v0:= v1.`b.n.c` @type ^`int`;
  #L11bc96.  v0:= v0 + v2 @kind int;
  #L11bc98.  v1.`b.n.c` @type ^`int` := v0;
  #L11bc9c.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11bca0.  v4:= (`long`) v2 @kind i2l;
  #L11bca2.  v0:= v0 + v4 @kind long;
  #L11bca4.  v7.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11bca8.  v0:= (`long`) v2 @kind i2l;
  #L11bcaa.  goto L11bc5e;
  #L11bcac.  v2:= v6.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11bcb0.  call temp:= `finished`(v2) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L11bcb6.  v2:= temp;
  #L11bcb8.  if v2 != 0 then goto L11bccc;
  #L11bcbc.  v2:= v6.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11bcc0.  call temp:= `needsDictionary`(v2) @signature `Ljava/util/zip/Inflater;.needsDictionary:()Z` @kind virtual;
  #L11bcc6.  v2:= temp;
  #L11bcc8.  if v2 == 0 then goto L11bcf6;
  #L11bccc.  call `c`(v6) @signature `Lb/j;.c:()V` @kind direct;
  #L11bcd2.  v0:= v1.`b.n.b` @type ^`int`;
  #L11bcd6.  v2:= v1.`b.n.c` @type ^`int`;
  #L11bcda.  if v0 != v2 then goto L11bcf0;
  #L11bcde.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11bce4.  v0:= temp @kind object;
  #L11bce6.  v7.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L11bcea.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11bcf0.  v0:= -1L;
  #L11bcf4.  goto L11bc5e;
  #L11bcf6.  if v0 == 0 then goto L11bc60;
  #L11bcfa.  v0:= new `java.io.EOFException`;
  #L11bcfe.  v1:= "source exhausted prematurely" @kind object;
  #L11bd02.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11bd08.  throw v0;
  #Try_end0.  
  #L11bd0a.  v0:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L11bd0c.  v1:= new `java.io.IOException`;
  #L11bd10.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L11bd16.  throw v1;
  catch `java.util.zip.DataFormatException` @[Try_start0..Try_end0] goto L11bd0a;
}
procedure `b.s` `a`(`b.j` v1 @kind this) @signature `Lb/j;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11bd38.  v0:= v1.`b.j.a` @type ^`b.e` @kind object;
  #L11bd3c.  call temp:= `a`(v0) @signature `Lb/e;.a:()Lb/s;` @kind interface;
  #L11bd42.  v0:= temp @kind object;
  #L11bd44.  return v0 @kind object;
}
procedure `boolean` `b`(`b.j` v5 @kind this) @signature `Lb/j;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11bd58.  v0:= 0I;
  #L11bd5a.  v1:= v5.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11bd5e.  call temp:= `needsInput`(v1) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L11bd64.  v1:= temp;
  #L11bd66.  if v1 != 0 then goto L11bd6c;
  #L11bd6a.  return v0;
  #L11bd6c.  call `c`(v5) @signature `Lb/j;.c:()V` @kind direct;
  #L11bd72.  v1:= v5.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11bd76.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L11bd7c.  v1:= temp;
  #L11bd7e.  if v1 == 0 then goto L11bd92;
  #L11bd82.  v0:= new `java.lang.IllegalStateException`;
  #L11bd86.  v1:= "?" @kind object;
  #L11bd8a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11bd90.  throw v0;
  #L11bd92.  v1:= v5.`b.j.a` @type ^`b.e` @kind object;
  #L11bd96.  call temp:= `e`(v1) @signature `Lb/e;.e:()Z` @kind interface;
  #L11bd9c.  v1:= temp;
  #L11bd9e.  if v1 == 0 then goto L11bda6;
  #L11bda2.  v0:= 1I;
  #L11bda4.  goto L11bd6a;
  #L11bda6.  v1:= v5.`b.j.a` @type ^`b.e` @kind object;
  #L11bdaa.  call temp:= `c`(v1) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11bdb0.  v1:= temp @kind object;
  #L11bdb2.  v1:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L11bdb6.  v2:= v1.`b.n.c` @type ^`int`;
  #L11bdba.  v3:= v1.`b.n.b` @type ^`int`;
  #L11bdbe.  v2:= v2 - v3 @kind int;
  #L11bdc0.  v5.`b.j.c` @type ^`int` := v2;
  #L11bdc4.  v2:= v5.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11bdc8.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11bdcc.  v1:= v1.`b.n.b` @type ^`int`;
  #L11bdd0.  v4:= v5.`b.j.c` @type ^`int`;
  #L11bdd4.  call `setInput`(v2, v3, v1, v4) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L11bdda.  goto L11bd6a;
}
procedure `void` `close`(`b.j` v1 @kind this) @signature `Lb/j;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11bdec.  v0:= v1.`b.j.d` @type ^`boolean` @kind boolean;
  #L11bdf0.  if v0 == 0 then goto L11bdf6;
  #L11bdf4.  return @kind void;
  #L11bdf6.  v0:= v1.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11bdfa.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L11be00.  v0:= 1I;
  #L11be02.  v1.`b.j.d` @type ^`boolean` := v0 @kind boolean;
  #L11be06.  v0:= v1.`b.j.a` @type ^`b.e` @kind object;
  #L11be0a.  call `close`(v0) @signature `Lb/e;.close:()V` @kind interface;
  #L11be10.  goto L11bdf4;
}
