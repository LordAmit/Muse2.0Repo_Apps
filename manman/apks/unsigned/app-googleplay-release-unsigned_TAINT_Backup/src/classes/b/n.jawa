record `b.n` @kind class @AccessFlag FINAL {
  `byte`[] `b.n.a` @AccessFlag FINAL;
  `int` `b.n.b` @AccessFlag ;
  `int` `b.n.c` @AccessFlag ;
  `boolean` `b.n.d` @AccessFlag ;
  `boolean` `b.n.e` @AccessFlag ;
  `b.n` `b.n.f` @AccessFlag ;
  `b.n` `b.n.g` @AccessFlag ;
}
procedure `void` `<init>`(`b.n` v1 @kind this) @signature `Lb/n;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L11d1a4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11d1aa.  v0:= 8192I;
  #L11d1ae.  v0:= new `byte`[v0];
  #L11d1b2.  v1.`b.n.a` @type ^`byte`[] := v0 @kind object;
  #L11d1b6.  v0:= 1I;
  #L11d1b8.  v1.`b.n.e` @type ^`boolean` := v0 @kind boolean;
  #L11d1bc.  v0:= 0I;
  #L11d1be.  v1.`b.n.d` @type ^`boolean` := v0 @kind boolean;
  #L11d1c2.  return @kind void;
}
procedure `void` `<init>`(`b.n` v3 @kind this, `b.n` v4 @kind object) @signature `Lb/n;.<init>:(Lb/n;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L11d1d4.  v0:= v4.`b.n.a` @type ^`byte`[] @kind object;
  #L11d1d8.  v1:= v4.`b.n.b` @type ^`int`;
  #L11d1dc.  v2:= v4.`b.n.c` @type ^`int`;
  #L11d1e0.  call `<init>`(v3, v0, v1, v2) @signature `Lb/n;.<init>:([BII)V` @kind direct;
  #L11d1e6.  v0:= 1I;
  #L11d1e8.  v4.`b.n.d` @type ^`boolean` := v0 @kind boolean;
  #L11d1ec.  return @kind void;
}
procedure `void` `<init>`(`b.n` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lb/n;.<init>:([BII)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L11d200.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11d206.  v1.`b.n.a` @type ^`byte`[] := v2 @kind object;
  #L11d20a.  v1.`b.n.b` @type ^`int` := v3;
  #L11d20e.  v1.`b.n.c` @type ^`int` := v4;
  #L11d212.  v0:= 0I;
  #L11d214.  v1.`b.n.e` @type ^`boolean` := v0 @kind boolean;
  #L11d218.  v0:= 1I;
  #L11d21a.  v1.`b.n.d` @type ^`boolean` := v0 @kind boolean;
  #L11d21e.  return @kind void;
}
procedure `b.n` `a`(`b.n` v4 @kind this) @signature `Lb/n;.a:()Lb/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11d230.  v1:= 0I;
  #L11d232.  v0:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11d236.  if v0 == v4 then goto L11d260;
  #L11d23a.  v0:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11d23e.  v2:= v4.`b.n.g` @type ^`b.n` @kind object;
  #L11d242.  v3:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11d246.  v2.`b.n.f` @type ^`b.n` := v3 @kind object;
  #L11d24a.  v2:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11d24e.  v3:= v4.`b.n.g` @type ^`b.n` @kind object;
  #L11d252.  v2.`b.n.g` @type ^`b.n` := v3 @kind object;
  #L11d256.  v4.`b.n.f` @type ^`b.n` := v1 @kind object;
  #L11d25a.  v4.`b.n.g` @type ^`b.n` := v1 @kind object;
  #L11d25e.  return v0 @kind object;
  #L11d260.  v0:= v1 @kind object;
  #L11d262.  goto L11d23e;
}
procedure `b.n` `a`(`b.n` v5 @kind this, `int` v6 ) @signature `Lb/n;.a:(I)Lb/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11d274.  if v6 <= 0 then goto L11d286;
  #L11d278.  v0:= v5.`b.n.c` @type ^`int`;
  #L11d27c.  v1:= v5.`b.n.b` @type ^`int`;
  #L11d280.  v0:= v0 - v1 @kind int;
  #L11d282.  if v6 <= v0 then goto L11d292;
  #L11d286.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d28a.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11d290.  throw v0;
  #L11d292.  v0:= 1024I;
  #L11d296.  if v6 < v0 then goto L11d2c4;
  #L11d29a.  v0:= new `b.n`;
  #L11d29e.  call `<init>`(v0, v5) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L11d2a4.  v1:= v0.`b.n.b` @type ^`int`;
  #L11d2a8.  v1:= v1 + v6 @kind int;
  #L11d2aa.  v0.`b.n.c` @type ^`int` := v1;
  #L11d2ae.  v1:= v5.`b.n.b` @type ^`int`;
  #L11d2b2.  v1:= v1 + v6 @kind int;
  #L11d2b4.  v5.`b.n.b` @type ^`int` := v1;
  #L11d2b8.  v1:= v5.`b.n.g` @type ^`b.n` @kind object;
  #L11d2bc.  call temp:= `a`(v1, v0) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11d2c2.  return v0 @kind object;
  #L11d2c4.  call temp:= `a`() @signature `Lb/o;.a:()Lb/n;` @kind static;
  #L11d2ca.  v0:= temp @kind object;
  #L11d2cc.  v1:= v5.`b.n.a` @type ^`byte`[] @kind object;
  #L11d2d0.  v2:= v5.`b.n.b` @type ^`int`;
  #L11d2d4.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11d2d8.  v4:= 0I;
  #L11d2da.  call `arraycopy`(v1, v2, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11d2e0.  goto L11d2a4;
}
procedure `b.n` `a`(`b.n` v1 @kind this, `b.n` v2 @kind object) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d2f4.  v2.`b.n.g` @type ^`b.n` := v1 @kind object;
  #L11d2f8.  v0:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L11d2fc.  v2.`b.n.f` @type ^`b.n` := v0 @kind object;
  #L11d300.  v0:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L11d304.  v0.`b.n.g` @type ^`b.n` := v2 @kind object;
  #L11d308.  v1.`b.n.f` @type ^`b.n` := v2 @kind object;
  #L11d30c.  return v2 @kind object;
}
procedure `void` `a`(`b.n` v6 @kind this, `b.n` v7 @kind object, `int` v8 ) @signature `Lb/n;.a:(Lb/n;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11d320.  v2:= 8192I;
  #L11d324.  v5:= 0I;
  #L11d326.  v0:= v7.`b.n.e` @type ^`boolean` @kind boolean;
  #L11d32a.  if v0 != 0 then goto L11d33a;
  #L11d32e.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d332.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11d338.  throw v0;
  #L11d33a.  v0:= v7.`b.n.c` @type ^`int`;
  #L11d33e.  v0:= v0 + v8 @kind int;
  #L11d340.  if v0 <= v2 then goto L11d3a2;
  #L11d344.  v0:= v7.`b.n.d` @type ^`boolean` @kind boolean;
  #L11d348.  if v0 == 0 then goto L11d358;
  #L11d34c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d350.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11d356.  throw v0;
  #L11d358.  v0:= v7.`b.n.c` @type ^`int`;
  #L11d35c.  v0:= v0 + v8 @kind int;
  #L11d35e.  v1:= v7.`b.n.b` @type ^`int`;
  #L11d362.  v0:= v0 - v1 @kind int;
  #L11d364.  if v0 <= v2 then goto L11d374;
  #L11d368.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d36c.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11d372.  throw v0;
  #L11d374.  v0:= v7.`b.n.a` @type ^`byte`[] @kind object;
  #L11d378.  v1:= v7.`b.n.b` @type ^`int`;
  #L11d37c.  v2:= v7.`b.n.a` @type ^`byte`[] @kind object;
  #L11d380.  v3:= v7.`b.n.c` @type ^`int`;
  #L11d384.  v4:= v7.`b.n.b` @type ^`int`;
  #L11d388.  v3:= v3 - v4 @kind int;
  #L11d38a.  call `arraycopy`(v0, v1, v2, v5, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11d390.  v0:= v7.`b.n.c` @type ^`int`;
  #L11d394.  v1:= v7.`b.n.b` @type ^`int`;
  #L11d398.  v0:= v0 - v1 @kind int;
  #L11d39a.  v7.`b.n.c` @type ^`int` := v0;
  #L11d39e.  v7.`b.n.b` @type ^`int` := v5;
  #L11d3a2.  v0:= v6.`b.n.a` @type ^`byte`[] @kind object;
  #L11d3a6.  v1:= v6.`b.n.b` @type ^`int`;
  #L11d3aa.  v2:= v7.`b.n.a` @type ^`byte`[] @kind object;
  #L11d3ae.  v3:= v7.`b.n.c` @type ^`int`;
  #L11d3b2.  call `arraycopy`(v0, v1, v2, v3, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11d3b8.  v0:= v7.`b.n.c` @type ^`int`;
  #L11d3bc.  v0:= v0 + v8 @kind int;
  #L11d3be.  v7.`b.n.c` @type ^`int` := v0;
  #L11d3c2.  v0:= v6.`b.n.b` @type ^`int`;
  #L11d3c6.  v0:= v0 + v8 @kind int;
  #L11d3c8.  v6.`b.n.b` @type ^`int` := v0;
  #L11d3cc.  return @kind void;
}
procedure `void` `b`(`b.n` v3 @kind this) @signature `Lb/n;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11d3e0.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11d3e4.  if v0 != v3 then goto L11d3f4;
  #L11d3e8.  v0:= new `java.lang.IllegalStateException`;
  #L11d3ec.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L11d3f2.  throw v0;
  #L11d3f4.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11d3f8.  v0:= v0.`b.n.e` @type ^`boolean` @kind boolean;
  #L11d3fc.  if v0 != 0 then goto L11d402;
  #L11d400.  return @kind void;
  #L11d402.  v0:= v3.`b.n.c` @type ^`int`;
  #L11d406.  v1:= v3.`b.n.b` @type ^`int`;
  #L11d40a.  v1:= v0 - v1 @kind int;
  #L11d40e.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11d412.  v0:= v0.`b.n.c` @type ^`int`;
  #L11d416.  v2:= v0 - 8192;
  #L11d41a.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11d41e.  v0:= v0.`b.n.d` @type ^`boolean` @kind boolean;
  #L11d422.  if v0 == 0 then goto L11d446;
  #L11d426.  v0:= 0I;
  #L11d428.  v0:= v0 + v2 @kind int;
  #L11d42a.  if v1 > v0 then goto L11d400;
  #L11d42e.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11d432.  call `a`(v3, v0, v1) @signature `Lb/n;.a:(Lb/n;I)V` @kind virtual;
  #L11d438.  call temp:= `a`(v3) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11d43e.  call `a`(v3) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11d444.  goto L11d400;
  #L11d446.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11d44a.  v0:= v0.`b.n.b` @type ^`int`;
  #L11d44e.  goto L11d428;
}
