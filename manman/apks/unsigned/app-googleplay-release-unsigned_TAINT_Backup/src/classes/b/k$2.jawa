record `b.k$2` @kind class @AccessFlag FINAL extends `b.r` @kind interface {
  `b.s` `b.k$2.a` @AccessFlag FINAL_SYNTHETIC;
  `java.io.InputStream` `b.k$2.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.k$2` v0 @kind this, `b.s` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Lb/k$2;.<init>:(Lb/s;Ljava/io/InputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11bf78.  v0.`b.k$2.a` @type ^`b.s` := v1 @kind object;
  #L11bf7c.  v0.`b.k$2.b` @type ^`java.io.InputStream` := v2 @kind object;
  #L11bf80.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11bf86.  return @kind void;
}
procedure `long` `a`(`b.k$2` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `Lb/k$2;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11bf98.  v0:= 0L;
  #L11bf9c.  v2:= lcmp(v8, v0);
  #L11bfa0.  if v2 >= 0 then goto L11bfd6;
  #L11bfa4.  v0:= new `java.lang.IllegalArgumentException`;
  #L11bfa8.  v1:= new `java.lang.StringBuilder`;
  #L11bfac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11bfb2.  v2:= "byteCount < 0: " @kind object;
  #L11bfb6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bfbc.  v1:= temp @kind object;
  #L11bfbe.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bfc4.  v1:= temp @kind object;
  #L11bfc6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11bfcc.  v1:= temp @kind object;
  #L11bfce.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11bfd4.  throw v0;
  #L11bfd6.  v2:= lcmp(v8, v0);
  #L11bfda.  if v2 != 0 then goto L11bfe0;
  #L11bfde.  return v0 @kind wide;
  #Try_start0.  
  #L11bfe0.  v0:= v6.`b.k$2.a` @type ^`b.s` @kind object;
  #L11bfe4.  call `g`(v0) @signature `Lb/s;.g:()V` @kind virtual;
  #L11bfea.  v0:= 1I;
  #L11bfec.  call temp:= `e`(v7, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11bff2.  v0:= temp @kind object;
  #L11bff4.  v1:= v0.`b.n.c` @type ^`int`;
  #L11bff8.  v1:= v1 - 8192;
  #L11bffc.  v2:= (`long`) v1 @kind i2l;
  #L11bffe.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11c004.  v2:= temp @kind wide;
  #L11c006.  v1:= (`int`) v2 @kind l2i;
  #L11c008.  v2:= v6.`b.k$2.b` @type ^`java.io.InputStream` @kind object;
  #L11c00c.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11c010.  v4:= v0.`b.n.c` @type ^`int`;
  #L11c014.  call temp:= `read`(v2, v3, v4, v1) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L11c01a.  v1:= temp;
  #L11c01c.  v2:= -1I;
  #L11c01e.  if v1 != v2 then goto L11c028;
  #L11c022.  v0:= -1L;
  #L11c026.  goto L11bfde;
  #L11c028.  v2:= v0.`b.n.c` @type ^`int`;
  #L11c02c.  v2:= v2 + v1 @kind int;
  #L11c02e.  v0.`b.n.c` @type ^`int` := v2;
  #L11c032.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11c036.  v4:= (`long`) v1 @kind i2l;
  #L11c038.  v2:= v2 + v4 @kind long;
  #L11c03a.  v7.`b.c.b` @type ^`long` := v2 @kind wide;
  #Try_end0.  
  #L11c03e.  v0:= (`long`) v1 @kind i2l;
  #L11c040.  goto L11bfde;
  #L11c042.  v0:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L11c044.  call temp:= `a`(v0) @signature `Lb/k;.a:(Ljava/lang/AssertionError;)Z` @kind static;
  #L11c04a.  v1:= temp;
  #L11c04c.  if v1 == 0 then goto L11c05c;
  #L11c050.  v1:= new `java.io.IOException`;
  #L11c054.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L11c05a.  throw v1;
  #L11c05c.  throw v0;
  catch `java.lang.AssertionError` @[Try_start0..Try_end0] goto L11c042;
}
procedure `b.s` `a`(`b.k$2` v1 @kind this) @signature `Lb/k$2;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c080.  v0:= v1.`b.k$2.a` @type ^`b.s` @kind object;
  #L11c084.  return v0 @kind object;
}
procedure `void` `close`(`b.k$2` v1 @kind this) @signature `Lb/k$2;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c098.  v0:= v1.`b.k$2.b` @type ^`java.io.InputStream` @kind object;
  #L11c09c.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L11c0a2.  return @kind void;
}
procedure `java.lang.String` `toString`(`b.k$2` v2 @kind this) @signature `Lb/k$2;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11c0b4.  v0:= new `java.lang.StringBuilder`;
  #L11c0b8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c0be.  v1:= "source(" @kind object;
  #L11c0c2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c0c8.  v0:= temp @kind object;
  #L11c0ca.  v1:= v2.`b.k$2.b` @type ^`java.io.InputStream` @kind object;
  #L11c0ce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c0d4.  v0:= temp @kind object;
  #L11c0d6.  v1:= ")" @kind object;
  #L11c0da.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c0e0.  v0:= temp @kind object;
  #L11c0e2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c0e8.  v0:= temp @kind object;
  #L11c0ea.  return v0 @kind object;
}
