record `org.b.a.a.n` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b` @kind class {
  `org.b.a.a.d.b` `org.b.a.a.n.a` @AccessFlag PRIVATE;
  `org.b.a.a.b$a` `org.b.a.a.n.b` @AccessFlag PRIVATE;
  `int` `org.b.a.a.n.c` @AccessFlag PRIVATE;
}
global `org.b.a.a.d.m` `@@org.b.a.a.n.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/b/a/a/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L186318.  v0:= new `org.b.a.a.d.n`;
  #L18631c.  call `<init>`(v0) @signature `Lorg/b/a/a/d/n;.<init>:()V` @kind direct;
  #L186322.  `@@org.b.a.a.n.d` @type ^`org.b.a.a.d.m` := v0 @kind object;
  #L186326.  return @kind void;
}
procedure `void` `<init>`(`org.b.a.a.n` v2 @kind this) @signature `Lorg/b/a/a/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L186338.  call `<init>`(v2) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L18633e.  v0:= 0I;
  #L186340.  v2.`org.b.a.a.n.c` @type ^`int` := v0;
  #L186344.  v0:= new `org.b.a.a.d.b`;
  #L186348.  v1:= `@@org.b.a.a.n.d` @type ^`org.b.a.a.d.m` @kind object;
  #L18634c.  call `<init>`(v0, v1) @signature `Lorg/b/a/a/d/b;.<init>:(Lorg/b/a/a/d/m;)V` @kind direct;
  #L186352.  v2.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` := v0 @kind object;
  #L186356.  call `d`(v2) @signature `Lorg/b/a/a/n;.d:()V` @kind virtual;
  #L18635c.  return @kind void;
}
procedure `java.lang.String` `a`(`org.b.a.a.n` v1 @kind this) @signature `Lorg/b/a/a/n;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L186370.  v0:= `@@org.b.a.b.u` @type ^`java.lang.String` @kind object;
  #L186374.  return v0 @kind object;
}
procedure `org.b.a.a.b$a` `a`(`org.b.a.a.n` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lorg/b/a/a/n;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L186388.  v3:= 2I;
  #L18638a.  v0:= v6 + v7 @kind int;
  #L18638e.  if v6 >= v0 then goto L1863b0;
  #L186392.  v1:= v4.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` @kind object;
  #L186396.  v2:= v5[v6] @kind byte;
  #L18639a.  call temp:= `a`(v1, v2) @signature `Lorg/b/a/a/d/b;.a:(B)I` @kind virtual;
  #L1863a0.  v1:= temp;
  #L1863a2.  v2:= 1I;
  #L1863a4.  if v1 != v2 then goto L1863e0;
  #L1863a8.  v0:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L1863ac.  v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1863b0.  v0:= v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1863b4.  v1:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L1863b8.  if v0 != v1 then goto L1863da;
  #L1863bc.  call temp:= `b`(v4) @signature `Lorg/b/a/a/n;.b:()F` @kind virtual;
  #L1863c2.  v0:= temp;
  #L1863c4.  v1:= 1064514355I;
  #L1863ca.  v0:= fcmpl(v0, v1);
  #L1863ce.  if v0 <= 0 then goto L1863da;
  #L1863d2.  v0:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1863d6.  v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1863da.  v0:= v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1863de.  return v0 @kind object;
  #L1863e0.  if v1 != v3 then goto L1863ee;
  #L1863e4.  v0:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L1863e8.  v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L1863ec.  goto L1863b0;
  #L1863ee.  if v1 != 0 then goto L18640e;
  #L1863f2.  v1:= v4.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` @kind object;
  #L1863f6.  call temp:= `a`(v1) @signature `Lorg/b/a/a/d/b;.a:()I` @kind virtual;
  #L1863fc.  v1:= temp;
  #L1863fe.  if v1 < v3 then goto L18640e;
  #L186402.  v1:= v4.`org.b.a.a.n.c` @type ^`int`;
  #L186406.  v1:= v1 + 1;
  #L18640a.  v4.`org.b.a.a.n.c` @type ^`int` := v1;
  #L18640e.  v6:= v6 + 1;
  #L186412.  goto L18638e;
}
procedure `float` `b`(`org.b.a.a.n` v3 @kind this) @signature `Lorg/b/a/a/n;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L186424.  v1:= 1065185444I;
  #L18642a.  v0:= v3.`org.b.a.a.n.c` @type ^`int`;
  #L18642e.  v2:= 6I;
  #L186430.  if v0 >= v2 then goto L186452;
  #L186434.  v0:= 0I;
  #L186436.  v2:= v3.`org.b.a.a.n.c` @type ^`int`;
  #L18643a.  if v0 >= v2 then goto L18644a;
  #L18643e.  v2:= 0.5F;
  #L186442.  v1:= v1 * v2 @kind float;
  #L186444.  v0:= v0 + 1;
  #L186448.  goto L186436;
  #L18644a.  v0:= 1.0F;
  #L18644e.  v1:= v0 - v1 @kind float;
  #L186452.  return v1;
}
procedure `org.b.a.a.b$a` `c`(`org.b.a.a.n` v1 @kind this) @signature `Lorg/b/a/a/n;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L186464.  v0:= v1.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` @kind object;
  #L186468.  return v0 @kind object;
}
procedure `void` `d`(`org.b.a.a.n` v1 @kind this) @signature `Lorg/b/a/a/n;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L18647c.  v0:= v1.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` @kind object;
  #L186480.  call `b`(v0) @signature `Lorg/b/a/a/d/b;.b:()V` @kind virtual;
  #L186486.  v0:= 0I;
  #L186488.  v1.`org.b.a.a.n.c` @type ^`int` := v0;
  #L18648c.  v0:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L186490.  v1.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L186494.  return @kind void;
}
