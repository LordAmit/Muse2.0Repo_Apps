record `a.t` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `a.t.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.t.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.t.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.t.f` @AccessFlag PRIVATE_FINAL;
}
global `java.util.regex.Pattern` `@@a.t.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@a.t.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/t;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L08a2fc.  v0:= "([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)/([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)" @kind object;
  #L08a300.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L08a306.  v0:= temp @kind object;
  #L08a308.  `@@a.t.a` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L08a30c.  v0:= ";\\s*(?:([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)=(?:([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)|\"([^\"]*)\"))?" @kind object;
  #L08a310.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L08a316.  v0:= temp @kind object;
  #L08a318.  `@@a.t.b` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L08a31c.  return @kind void;
}
procedure `void` `<init>`(`a.t` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `La/t;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L08a330.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08a336.  v0.`a.t.c` @type ^`java.lang.String` := v1 @kind object;
  #L08a33a.  v0.`a.t.d` @type ^`java.lang.String` := v2 @kind object;
  #L08a33e.  v0.`a.t.e` @type ^`java.lang.String` := v3 @kind object;
  #L08a342.  v0.`a.t.f` @type ^`java.lang.String` := v4 @kind object;
  #L08a346.  return @kind void;
}
procedure `a.t` `a`(`java.lang.String` v9 @kind object) @signature `La/t;.a:(Ljava/lang/String;)La/t;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L08a358.  v2:= 0I;
  #L08a35a.  v8:= 2I;
  #L08a35c.  v7:= 1I;
  #L08a35e.  v0:= `@@a.t.a` @type ^`java.util.regex.Pattern` @kind object;
  #L08a362.  call temp:= `matcher`(v0, v9) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L08a368.  v0:= temp @kind object;
  #L08a36a.  call temp:= `lookingAt`(v0) @signature `Ljava/util/regex/Matcher;.lookingAt:()Z` @kind virtual;
  #L08a370.  v1:= temp;
  #L08a372.  if v1 != 0 then goto L08a378;
  #L08a376.  return v2 @kind object;
  #L08a378.  call temp:= `group`(v0, v7) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L08a37e.  v1:= temp @kind object;
  #L08a380.  v3:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L08a384.  call temp:= `toLowerCase`(v1, v3) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L08a38a.  v3:= temp @kind object;
  #L08a38c.  call temp:= `group`(v0, v8) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L08a392.  v1:= temp @kind object;
  #L08a394.  v4:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L08a398.  call temp:= `toLowerCase`(v1, v4) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L08a39e.  v4:= temp @kind object;
  #L08a3a0.  v1:= `@@a.t.b` @type ^`java.util.regex.Pattern` @kind object;
  #L08a3a4.  call temp:= `matcher`(v1, v9) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L08a3aa.  v5:= temp @kind object;
  #L08a3ac.  call temp:= `end`(v0) @signature `Ljava/util/regex/Matcher;.end:()I` @kind virtual;
  #L08a3b2.  v0:= temp;
  #L08a3b4.  v1:= v0;
  #L08a3b6.  v0:= v2 @kind object;
  #L08a3b8.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08a3be.  v6:= temp;
  #L08a3c0.  if v1 >= v6 then goto L08a4a2;
  #L08a3c4.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08a3ca.  v6:= temp;
  #L08a3cc.  call temp:= `region`(v5, v1, v6) @signature `Ljava/util/regex/Matcher;.region:(II)Ljava/util/regex/Matcher;` @kind virtual;
  #L08a3d2.  call temp:= `lookingAt`(v5) @signature `Ljava/util/regex/Matcher;.lookingAt:()Z` @kind virtual;
  #L08a3d8.  v1:= temp;
  #L08a3da.  if v1 == 0 then goto L08a376;
  #L08a3de.  call temp:= `group`(v5, v7) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L08a3e4.  v1:= temp @kind object;
  #L08a3e6.  if v1 == 0 then goto L08a3fa;
  #L08a3ea.  v6:= "charset" @kind object;
  #L08a3ee.  call temp:= `equalsIgnoreCase`(v1, v6) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08a3f4.  v1:= temp;
  #L08a3f6.  if v1 != 0 then goto L08a404;
  #L08a3fa.  call temp:= `end`(v5) @signature `Ljava/util/regex/Matcher;.end:()I` @kind virtual;
  #L08a400.  v1:= temp;
  #L08a402.  goto L08a3b8;
  #L08a404.  call temp:= `group`(v5, v8) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L08a40a.  v1:= temp @kind object;
  #L08a40c.  if v1 == 0 then goto L08a492;
  #L08a410.  v6:= "'" @kind object;
  #L08a414.  call temp:= `startsWith`(v1, v6) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L08a41a.  v6:= temp;
  #L08a41c.  if v6 == 0 then goto L08a450;
  #L08a420.  v6:= "'" @kind object;
  #L08a424.  call temp:= `endsWith`(v1, v6) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L08a42a.  v6:= temp;
  #L08a42c.  if v6 == 0 then goto L08a450;
  #L08a430.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08a436.  v6:= temp;
  #L08a438.  if v6 <= v8 then goto L08a450;
  #L08a43c.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08a442.  v6:= temp;
  #L08a444.  v6:= v6 + -1;
  #L08a448.  call temp:= `substring`(v1, v7, v6) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08a44e.  v1:= temp @kind object;
  #L08a450.  if v0 == 0 then goto L08a49e;
  #L08a454.  call temp:= `equalsIgnoreCase`(v1, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08a45a.  v0:= temp;
  #L08a45c.  if v0 != 0 then goto L08a49e;
  #L08a460.  v0:= new `java.lang.IllegalArgumentException`;
  #L08a464.  v1:= new `java.lang.StringBuilder`;
  #L08a468.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08a46e.  v2:= "Multiple different charsets: " @kind object;
  #L08a472.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08a478.  v1:= temp @kind object;
  #L08a47a.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08a480.  v1:= temp @kind object;
  #L08a482.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08a488.  v1:= temp @kind object;
  #L08a48a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08a490.  throw v0;
  #L08a492.  v1:= 3I;
  #L08a494.  call temp:= `group`(v5, v1) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L08a49a.  v1:= temp @kind object;
  #L08a49c.  goto L08a450;
  #L08a49e.  v0:= v1 @kind object;
  #L08a4a0.  goto L08a3fa;
  #L08a4a2.  v2:= new `a.t`;
  #L08a4a6.  call `<init>`(v2, v9, v3, v4, v0) @signature `La/t;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L08a4ac.  goto L08a376;
}
procedure `java.nio.charset.Charset` `a`(`a.t` v1 @kind this, `java.nio.charset.Charset` v2 @kind object) @signature `La/t;.a:(Ljava/nio/charset/Charset;)Ljava/nio/charset/Charset;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08a4c0.  v0:= v1.`a.t.f` @type ^`java.lang.String` @kind object;
  #L08a4c4.  if v0 == 0 then goto L08a4d4;
  #L08a4c8.  v0:= v1.`a.t.f` @type ^`java.lang.String` @kind object;
  #L08a4cc.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L08a4d2.  v2:= temp @kind object;
  #L08a4d4.  return v2 @kind object;
}
procedure `boolean` `equals`(`a.t` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `La/t;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08a4e8.  v0:= instanceof @variable v3 @type ^`a.t` @kind boolean;
  #L08a4ec.  if v0 == 0 then goto L08a50c;
  #L08a4f0.  v3:= (`a.t`) v3 @kind object;
  #L08a4f4.  v0:= v3.`a.t.c` @type ^`java.lang.String` @kind object;
  #L08a4f8.  v1:= v2.`a.t.c` @type ^`java.lang.String` @kind object;
  #L08a4fc.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08a502.  v0:= temp;
  #L08a504.  if v0 == 0 then goto L08a50c;
  #L08a508.  v0:= 1I;
  #L08a50a.  return v0;
  #L08a50c.  v0:= 0I;
  #L08a50e.  goto L08a50a;
}
procedure `int` `hashCode`(`a.t` v1 @kind this) @signature `La/t;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08a520.  v0:= v1.`a.t.c` @type ^`java.lang.String` @kind object;
  #L08a524.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L08a52a.  v0:= temp;
  #L08a52c.  return v0;
}
procedure `java.lang.String` `toString`(`a.t` v1 @kind this) @signature `La/t;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08a540.  v0:= v1.`a.t.c` @type ^`java.lang.String` @kind object;
  #L08a544.  return v0 @kind object;
}
