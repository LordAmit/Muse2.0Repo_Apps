record `a.a.e.d$a` @kind class @AccessFlag FINAL {
  `a.a.e.c`[] `a.a.e.d$a.a` @AccessFlag ;
  `int` `a.a.e.d$a.b` @AccessFlag ;
  `int` `a.a.e.d$a.c` @AccessFlag ;
  `int` `a.a.e.d$a.d` @AccessFlag ;
  `java.util.List` `a.a.e.d$a.e` @AccessFlag PRIVATE_FINAL;
  `b.e` `a.a.e.d$a.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.e.d$a.g` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.e.d$a.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.e.d$a` v2 @kind this, `int` v3 , `int` v4 , `b.r` v5 @kind object) @signature `La/a/e/d$a;.<init>:(IILb/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07ab7c.  v1:= 0I;
  #L07ab7e.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07ab84.  v0:= new `java.util.ArrayList`;
  #L07ab88.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L07ab8e.  v2.`a.a.e.d$a.e` @type ^`java.util.List` := v0 @kind object;
  #L07ab92.  v0:= 8I;
  #L07ab96.  v0:= new `a.a.e.c`[v0];
  #L07ab9a.  v2.`a.a.e.d$a.a` @type ^`a.a.e.c`[] := v0 @kind object;
  #L07ab9e.  v0:= v2.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07aba2.  v0:= length @variable v0;
  #L07aba4.  v0:= v0 + -1;
  #L07aba8.  v2.`a.a.e.d$a.b` @type ^`int` := v0;
  #L07abac.  v2.`a.a.e.d$a.c` @type ^`int` := v1;
  #L07abb0.  v2.`a.a.e.d$a.d` @type ^`int` := v1;
  #L07abb4.  v2.`a.a.e.d$a.g` @type ^`int` := v3;
  #L07abb8.  v2.`a.a.e.d$a.h` @type ^`int` := v4;
  #L07abbc.  call temp:= `a`(v5) @signature `Lb/k;.a:(Lb/r;)Lb/e;` @kind static;
  #L07abc2.  v0:= temp @kind object;
  #L07abc4.  v2.`a.a.e.d$a.f` @type ^`b.e` := v0 @kind object;
  #L07abc8.  return @kind void;
}
procedure `void` `<init>`(`a.a.e.d$a` v0 @kind this, `int` v1 , `b.r` v2 @kind object) @signature `La/a/e/d$a;.<init>:(ILb/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L07abdc.  call `<init>`(v0, v1, v1, v2) @signature `La/a/e/d$a;.<init>:(IILb/r;)V` @kind direct;
  #L07abe2.  return @kind void;
}
procedure `int` `a`(`a.a.e.d$a` v6 @kind this, `int` v7 ) @signature `La/a/e/d$a;.a:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07abf4.  v1:= 0I;
  #L07abf6.  if v7 <= 0 then goto L07ac78;
  #L07abfa.  v0:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07abfe.  v0:= length @variable v0;
  #L07ac00.  v0:= v0 + -1;
  #L07ac04.  v2:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L07ac08.  if v0 < v2 then goto L07ac4a;
  #L07ac0c.  if v7 <= 0 then goto L07ac4a;
  #L07ac10.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07ac14.  v2:= v2[v0] @kind object;
  #L07ac18.  v2:= v2.`a.a.e.c.i` @type ^`int`;
  #L07ac1c.  v7:= v7 - v2 @kind int;
  #L07ac1e.  v2:= v6.`a.a.e.d$a.d` @type ^`int`;
  #L07ac22.  v3:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07ac26.  v3:= v3[v0] @kind object;
  #L07ac2a.  v3:= v3.`a.a.e.c.i` @type ^`int`;
  #L07ac2e.  v2:= v2 - v3 @kind int;
  #L07ac30.  v6.`a.a.e.d$a.d` @type ^`int` := v2;
  #L07ac34.  v2:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L07ac38.  v2:= v2 + -1;
  #L07ac3c.  v6.`a.a.e.d$a.c` @type ^`int` := v2;
  #L07ac40.  v1:= v1 + 1;
  #L07ac44.  v0:= v0 + -1;
  #L07ac48.  goto L07ac04;
  #L07ac4a.  v0:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07ac4e.  v2:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L07ac52.  v2:= v2 + 1;
  #L07ac56.  v3:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07ac5a.  v4:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L07ac5e.  v4:= v4 + 1;
  #L07ac62.  v4:= v4 + v1 @kind int;
  #L07ac64.  v5:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L07ac68.  call `arraycopy`(v0, v2, v3, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L07ac6e.  v0:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L07ac72.  v0:= v0 + v1 @kind int;
  #L07ac74.  v6.`a.a.e.d$a.b` @type ^`int` := v0;
  #L07ac78.  return v1;
}
procedure `void` `a`(`a.a.e.d$a` v6 @kind this, `int` v7 , `a.a.e.c` v8 @kind object) @signature `La/a/e/d$a;.a:(ILa/a/e/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07ac8c.  v3:= -1I;
  #L07ac8e.  v0:= v6.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07ac92.  call temp:= `add`(v0, v8) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07ac98.  v0:= v8.`a.a.e.c.i` @type ^`int`;
  #L07ac9c.  if v7 == v3 then goto L07acb6;
  #L07aca0.  v1:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07aca4.  call temp:= `c`(v6, v7) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L07acaa.  v2:= temp;
  #L07acac.  v1:= v1[v2] @kind object;
  #L07acb0.  v1:= v1.`a.a.e.c.i` @type ^`int`;
  #L07acb4.  v0:= v0 - v1 @kind int;
  #L07acb6.  v1:= v6.`a.a.e.d$a.h` @type ^`int`;
  #L07acba.  if v0 <= v1 then goto L07acc6;
  #L07acbe.  call `e`(v6) @signature `La/a/e/d$a;.e:()V` @kind direct;
  #L07acc4.  return @kind void;
  #L07acc6.  v1:= v6.`a.a.e.d$a.d` @type ^`int`;
  #L07acca.  v1:= v1 + v0 @kind int;
  #L07accc.  v2:= v6.`a.a.e.d$a.h` @type ^`int`;
  #L07acd0.  v1:= v1 - v2 @kind int;
  #L07acd2.  call temp:= `a`(v6, v1) @signature `La/a/e/d$a;.a:(I)I` @kind direct;
  #L07acd8.  v1:= temp;
  #L07acda.  if v7 != v3 then goto L07ad54;
  #L07acde.  v1:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L07ace2.  v1:= v1 + 1;
  #L07ace6.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07acea.  v2:= length @variable v2;
  #L07acec.  if v1 <= v2 then goto L07ad28;
  #L07acf0.  v1:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07acf4.  v1:= length @variable v1;
  #L07acf6.  v1:= v1 * 2;
  #L07acfa.  v1:= new `a.a.e.c`[v1];
  #L07acfe.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07ad02.  v3:= 0I;
  #L07ad04.  v4:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07ad08.  v4:= length @variable v4;
  #L07ad0a.  v5:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07ad0e.  v5:= length @variable v5;
  #L07ad10.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L07ad16.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07ad1a.  v2:= length @variable v2;
  #L07ad1c.  v2:= v2 + -1;
  #L07ad20.  v6.`a.a.e.d$a.b` @type ^`int` := v2;
  #L07ad24.  v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] := v1 @kind object;
  #L07ad28.  v1:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L07ad2c.  v2:= v1 + -1;
  #L07ad30.  v6.`a.a.e.d$a.b` @type ^`int` := v2;
  #L07ad34.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07ad38.  v2[v1]:= v8 @kind object;
  #L07ad3c.  v1:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L07ad40.  v1:= v1 + 1;
  #L07ad44.  v6.`a.a.e.d$a.c` @type ^`int` := v1;
  #L07ad48.  v1:= v6.`a.a.e.d$a.d` @type ^`int`;
  #L07ad4c.  v0:= v0 + v1 @kind int;
  #L07ad4e.  v6.`a.a.e.d$a.d` @type ^`int` := v0;
  #L07ad52.  goto L07acc4;
  #L07ad54.  call temp:= `c`(v6, v7) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L07ad5a.  v2:= temp;
  #L07ad5c.  v1:= v1 + v2 @kind int;
  #L07ad5e.  v1:= v1 + v7 @kind int;
  #L07ad60.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07ad64.  v2[v1]:= v8 @kind object;
  #L07ad68.  goto L07ad48;
}
procedure `void` `b`(`a.a.e.d$a` v3 @kind this, `int` v4 ) @signature `La/a/e/d$a;.b:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07ad7c.  call temp:= `g`(v3, v4) @signature `La/a/e/d$a;.g:(I)Z` @kind direct;
  #L07ad82.  v0:= temp;
  #L07ad84.  if v0 == 0 then goto L07ad9c;
  #L07ad88.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07ad8c.  v0:= v0[v4] @kind object;
  #L07ad90.  v1:= v3.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07ad94.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07ad9a.  return @kind void;
  #L07ad9c.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07ada0.  v0:= length @variable v0;
  #L07ada2.  v0:= v4 - v0 @kind int;
  #L07ada6.  call temp:= `c`(v3, v0) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L07adac.  v0:= temp;
  #L07adae.  if v0 < 0 then goto L07adc0;
  #L07adb2.  v1:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07adb6.  v1:= length @variable v1;
  #L07adb8.  v1:= v1 + -1;
  #L07adbc.  if v0 <= v1 then goto L07adf6;
  #L07adc0.  v0:= new `java.io.IOException`;
  #L07adc4.  v1:= new `java.lang.StringBuilder`;
  #L07adc8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07adce.  v2:= "Header index too large " @kind object;
  #L07add2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07add8.  v1:= temp @kind object;
  #L07adda.  v2:= v4 + 1;
  #L07adde.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07ade4.  v1:= temp @kind object;
  #L07ade6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07adec.  v1:= temp @kind object;
  #L07adee.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07adf4.  throw v0;
  #L07adf6.  v1:= v3.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07adfa.  v2:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07adfe.  v0:= v2[v0] @kind object;
  #L07ae02.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07ae08.  goto L07ad9a;
}
procedure `int` `c`(`a.a.e.d$a` v1 @kind this, `int` v2 ) @signature `La/a/e/d$a;.c:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L07ae1c.  v0:= v1.`a.a.e.d$a.b` @type ^`int`;
  #L07ae20.  v0:= v0 + 1;
  #L07ae24.  v0:= v0 + v2 @kind int;
  #L07ae26.  return v0;
}
procedure `void` `d`(`a.a.e.d$a` v2 @kind this) @signature `La/a/e/d$a;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07ae38.  v0:= v2.`a.a.e.d$a.h` @type ^`int`;
  #L07ae3c.  v1:= v2.`a.a.e.d$a.d` @type ^`int`;
  #L07ae40.  if v0 >= v1 then goto L07ae52;
  #L07ae44.  v0:= v2.`a.a.e.d$a.h` @type ^`int`;
  #L07ae48.  if v0 != 0 then goto L07ae54;
  #L07ae4c.  call `e`(v2) @signature `La/a/e/d$a;.e:()V` @kind direct;
  #L07ae52.  return @kind void;
  #L07ae54.  v0:= v2.`a.a.e.d$a.d` @type ^`int`;
  #L07ae58.  v1:= v2.`a.a.e.d$a.h` @type ^`int`;
  #L07ae5c.  v0:= v0 - v1 @kind int;
  #L07ae5e.  call temp:= `a`(v2, v0) @signature `La/a/e/d$a;.a:(I)I` @kind direct;
  #L07ae64.  goto L07ae52;
}
procedure `void` `d`(`a.a.e.d$a` v4 @kind this, `int` v5 ) @signature `La/a/e/d$a;.d:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07ae78.  call temp:= `f`(v4, v5) @signature `La/a/e/d$a;.f:(I)Lb/f;` @kind direct;
  #L07ae7e.  v0:= temp @kind object;
  #L07ae80.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07ae86.  v1:= temp @kind object;
  #L07ae88.  v2:= v4.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07ae8c.  v3:= new `a.a.e.c`;
  #L07ae90.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L07ae96.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07ae9c.  return @kind void;
}
procedure `void` `e`(`a.a.e.d$a` v3 @kind this) @signature `La/a/e/d$a;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07aeb0.  v2:= 0I;
  #L07aeb2.  v0:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07aeb6.  v1:= 0I;
  #L07aeb8.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L07aebe.  v0:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07aec2.  v0:= length @variable v0;
  #L07aec4.  v0:= v0 + -1;
  #L07aec8.  v3.`a.a.e.d$a.b` @type ^`int` := v0;
  #L07aecc.  v3.`a.a.e.d$a.c` @type ^`int` := v2;
  #L07aed0.  v3.`a.a.e.d$a.d` @type ^`int` := v2;
  #L07aed4.  return @kind void;
}
procedure `void` `e`(`a.a.e.d$a` v4 @kind this, `int` v5 ) @signature `La/a/e/d$a;.e:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07aee8.  call temp:= `f`(v4, v5) @signature `La/a/e/d$a;.f:(I)Lb/f;` @kind direct;
  #L07aeee.  v0:= temp @kind object;
  #L07aef0.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07aef6.  v1:= temp @kind object;
  #L07aef8.  v2:= -1I;
  #L07aefa.  v3:= new `a.a.e.c`;
  #L07aefe.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L07af04.  call `a`(v4, v2, v3) @signature `La/a/e/d$a;.a:(ILa/a/e/c;)V` @kind direct;
  #L07af0a.  return @kind void;
}
procedure `b.f` `f`(`a.a.e.d$a` v2 @kind this, `int` v3 ) @signature `La/a/e/d$a;.f:(I)Lb/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07af1c.  call temp:= `g`(v2, v3) @signature `La/a/e/d$a;.g:(I)Z` @kind direct;
  #L07af22.  v0:= temp;
  #L07af24.  if v0 == 0 then goto L07af36;
  #L07af28.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07af2c.  v0:= v0[v3] @kind object;
  #L07af30.  v0:= v0.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L07af34.  return v0 @kind object;
  #L07af36.  v0:= v2.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07af3a.  v1:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07af3e.  v1:= length @variable v1;
  #L07af40.  v1:= v3 - v1 @kind int;
  #L07af44.  call temp:= `c`(v2, v1) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L07af4a.  v1:= temp;
  #L07af4c.  v0:= v0[v1] @kind object;
  #L07af50.  v0:= v0.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L07af54.  goto L07af34;
}
procedure `void` `f`(`a.a.e.d$a` v4 @kind this) @signature `La/a/e/d$a;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07af68.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07af6e.  v0:= temp @kind object;
  #L07af70.  call temp:= `a`(v0) @signature `La/a/e/d;.a:(Lb/f;)Lb/f;` @kind static;
  #L07af76.  v0:= temp @kind object;
  #L07af78.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07af7e.  v1:= temp @kind object;
  #L07af80.  v2:= v4.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07af84.  v3:= new `a.a.e.c`;
  #L07af88.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L07af8e.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07af94.  return @kind void;
}
procedure `void` `g`(`a.a.e.d$a` v4 @kind this) @signature `La/a/e/d$a;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07afa8.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07afae.  v0:= temp @kind object;
  #L07afb0.  call temp:= `a`(v0) @signature `La/a/e/d;.a:(Lb/f;)Lb/f;` @kind static;
  #L07afb6.  v0:= temp @kind object;
  #L07afb8.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07afbe.  v1:= temp @kind object;
  #L07afc0.  v2:= -1I;
  #L07afc2.  v3:= new `a.a.e.c`;
  #L07afc6.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L07afcc.  call `a`(v4, v2, v3) @signature `La/a/e/d$a;.a:(ILa/a/e/c;)V` @kind direct;
  #L07afd2.  return @kind void;
}
procedure `boolean` `g`(`a.a.e.d$a` v1 @kind this, `int` v2 ) @signature `La/a/e/d$a;.g:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L07afe4.  if v2 < 0 then goto L07affa;
  #L07afe8.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07afec.  v0:= length @variable v0;
  #L07afee.  v0:= v0 + -1;
  #L07aff2.  if v2 > v0 then goto L07affa;
  #L07aff6.  v0:= 1I;
  #L07aff8.  return v0;
  #L07affa.  v0:= 0I;
  #L07affc.  goto L07aff8;
}
procedure `int` `h`(`a.a.e.d$a` v1 @kind this) @signature `La/a/e/d$a;.h:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L07b010.  v0:= v1.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L07b014.  call temp:= `h`(v0) @signature `Lb/e;.h:()B` @kind interface;
  #L07b01a.  v0:= temp;
  #L07b01c.  v0:= v0 ^& 255;
  #L07b020.  return v0;
}
procedure `int` `a`(`a.a.e.d$a` v3 @kind this, `int` v4 , `int` v5 ) @signature `La/a/e/d$a;.a:(II)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L07b034.  v0:= v4 ^& v5 @kind int;
  #L07b038.  if v0 >= v5 then goto L07b03e;
  #L07b03c.  return v0;
  #L07b03e.  v0:= 0I;
  #L07b040.  call temp:= `h`(v3) @signature `La/a/e/d$a;.h:()I` @kind direct;
  #L07b046.  v1:= temp;
  #L07b048.  v2:= v1 ^& 128;
  #L07b04c.  if v2 == 0 then goto L07b05e;
  #L07b050.  v1:= v1 ^& 127;
  #L07b054.  v1:= v1 ^< v0 @kind int;
  #L07b056.  v5:= v5 + v1 @kind int;
  #L07b058.  v0:= v0 + 7;
  #L07b05c.  goto L07b040;
  #L07b05e.  v0:= v1 ^< v0 @kind int;
  #L07b062.  v0:= v0 + v5 @kind int;
  #L07b064.  goto L07b03c;
}
procedure `void` `a`(`a.a.e.d$a` v5 @kind this) @signature `La/a/e/d$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L07b078.  v4:= 128I;
  #L07b07c.  v3:= 64I;
  #L07b080.  v0:= v5.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L07b084.  call temp:= `e`(v0) @signature `Lb/e;.e:()Z` @kind interface;
  #L07b08a.  v0:= temp;
  #L07b08c.  if v0 != 0 then goto L07b19c;
  #L07b090.  v0:= v5.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L07b094.  call temp:= `h`(v0) @signature `Lb/e;.h:()B` @kind interface;
  #L07b09a.  v0:= temp;
  #L07b09c.  v0:= v0 ^& 255;
  #L07b0a0.  if v0 != v4 then goto L07b0b4;
  #L07b0a4.  v0:= new `java.io.IOException`;
  #L07b0a8.  v1:= "index == 0" @kind object;
  #L07b0ac.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b0b2.  throw v0;
  #L07b0b4.  v1:= v0 ^& 128;
  #L07b0b8.  if v1 != v4 then goto L07b0d4;
  #L07b0bc.  v1:= 127I;
  #L07b0c0.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L07b0c6.  v0:= temp;
  #L07b0c8.  v0:= v0 + -1;
  #L07b0cc.  call `b`(v5, v0) @signature `La/a/e/d$a;.b:(I)V` @kind direct;
  #L07b0d2.  goto L07b080;
  #L07b0d4.  if v0 != v3 then goto L07b0e0;
  #L07b0d8.  call `g`(v5) @signature `La/a/e/d$a;.g:()V` @kind direct;
  #L07b0de.  goto L07b080;
  #L07b0e0.  v1:= v0 ^& 64;
  #L07b0e4.  if v1 != v3 then goto L07b100;
  #L07b0e8.  v1:= 63I;
  #L07b0ec.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L07b0f2.  v0:= temp;
  #L07b0f4.  v0:= v0 + -1;
  #L07b0f8.  call `e`(v5, v0) @signature `La/a/e/d$a;.e:(I)V` @kind direct;
  #L07b0fe.  goto L07b080;
  #L07b100.  v1:= v0 ^& 32;
  #L07b104.  v2:= 32I;
  #L07b108.  if v1 != v2 then goto L07b16e;
  #L07b10c.  v1:= 31I;
  #L07b110.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L07b116.  v0:= temp;
  #L07b118.  v5.`a.a.e.d$a.h` @type ^`int` := v0;
  #L07b11c.  v0:= v5.`a.a.e.d$a.h` @type ^`int`;
  #L07b120.  if v0 < 0 then goto L07b130;
  #L07b124.  v0:= v5.`a.a.e.d$a.h` @type ^`int`;
  #L07b128.  v1:= v5.`a.a.e.d$a.g` @type ^`int`;
  #L07b12c.  if v0 <= v1 then goto L07b166;
  #L07b130.  v0:= new `java.io.IOException`;
  #L07b134.  v1:= new `java.lang.StringBuilder`;
  #L07b138.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07b13e.  v2:= "Invalid dynamic table size update " @kind object;
  #L07b142.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b148.  v1:= temp @kind object;
  #L07b14a.  v2:= v5.`a.a.e.d$a.h` @type ^`int`;
  #L07b14e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b154.  v1:= temp @kind object;
  #L07b156.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07b15c.  v1:= temp @kind object;
  #L07b15e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b164.  throw v0;
  #L07b166.  call `d`(v5) @signature `La/a/e/d$a;.d:()V` @kind direct;
  #L07b16c.  goto L07b080;
  #L07b16e.  v1:= 16I;
  #L07b172.  if v0 == v1 then goto L07b17a;
  #L07b176.  if v0 != 0 then goto L07b182;
  #L07b17a.  call `f`(v5) @signature `La/a/e/d$a;.f:()V` @kind direct;
  #L07b180.  goto L07b080;
  #L07b182.  v1:= 15I;
  #L07b186.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L07b18c.  v0:= temp;
  #L07b18e.  v0:= v0 + -1;
  #L07b192.  call `d`(v5, v0) @signature `La/a/e/d$a;.d:(I)V` @kind direct;
  #L07b198.  goto L07b080;
  #L07b19c.  return @kind void;
}
procedure `java.util.List` `b`(`a.a.e.d$a` v2 @kind this) @signature `La/a/e/d$a;.b:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07b1b0.  v0:= new `java.util.ArrayList`;
  #L07b1b4.  v1:= v2.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07b1b8.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L07b1be.  v1:= v2.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07b1c2.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L07b1c8.  return v0 @kind object;
}
procedure `b.f` `c`(`a.a.e.d$a` v6 @kind this) @signature `La/a/e/d$a;.c:()Lb/f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07b1dc.  call temp:= `h`(v6) @signature `La/a/e/d$a;.h:()I` @kind direct;
  #L07b1e2.  v1:= temp;
  #L07b1e4.  v0:= v1 ^& 128;
  #L07b1e8.  v2:= 128I;
  #L07b1ec.  if v0 != v2 then goto L07b22a;
  #L07b1f0.  v0:= 1I;
  #L07b1f2.  v2:= 127I;
  #L07b1f6.  call temp:= `a`(v6, v1, v2) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L07b1fc.  v1:= temp;
  #L07b1fe.  if v0 == 0 then goto L07b22e;
  #L07b202.  call temp:= `a`() @signature `La/a/e/k;.a:()La/a/e/k;` @kind static;
  #L07b208.  v0:= temp @kind object;
  #L07b20a.  v2:= v6.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L07b20e.  v4:= (`long`) v1 @kind i2l;
  #L07b210.  call temp:= `f`(v2, v4) @signature `Lb/e;.f:(J)[B` @kind interface;
  #L07b216.  v1:= temp @kind object;
  #L07b218.  call temp:= `a`(v0, v1) @signature `La/a/e/k;.a:([B)[B` @kind virtual;
  #L07b21e.  v0:= temp @kind object;
  #L07b220.  call temp:= `a`(v0) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #L07b226.  v0:= temp @kind object;
  #L07b228.  return v0 @kind object;
  #L07b22a.  v0:= 0I;
  #L07b22c.  goto L07b1f2;
  #L07b22e.  v0:= v6.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L07b232.  v2:= (`long`) v1 @kind i2l;
  #L07b234.  call temp:= `c`(v0, v2) @signature `Lb/e;.c:(J)Lb/f;` @kind interface;
  #L07b23a.  v0:= temp @kind object;
  #L07b23c.  goto L07b228;
}
