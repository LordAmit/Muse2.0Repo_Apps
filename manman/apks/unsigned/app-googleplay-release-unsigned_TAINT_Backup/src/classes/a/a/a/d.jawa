record `a.a.a.d` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface, `java.io.Flushable` @kind interface {
  `a.a.f.a` `a.a.a.d.b` @AccessFlag FINAL;
  `int` `a.a.a.d.c` @AccessFlag FINAL;
  `b.d` `a.a.a.d.d` @AccessFlag ;
  `java.util.LinkedHashMap` `a.a.a.d.e` @AccessFlag FINAL;
  `int` `a.a.a.d.f` @AccessFlag ;
  `boolean` `a.a.a.d.g` @AccessFlag ;
  `boolean` `a.a.a.d.h` @AccessFlag ;
  `boolean` `a.a.a.d.i` @AccessFlag ;
  `long` `a.a.a.d.k` @AccessFlag PRIVATE;
  `long` `a.a.a.d.l` @AccessFlag PRIVATE;
  `long` `a.a.a.d.m` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `a.a.a.d.n` @AccessFlag PRIVATE_FINAL;
  `java.lang.Runnable` `a.a.a.d.o` @AccessFlag PRIVATE_FINAL;
}
global `java.util.regex.Pattern` `@@a.a.a.d.a` @AccessFlag STATIC_FINAL;
global `boolean` `@@a.a.a.d.j` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/a/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L074ec4.  v0:= constclass @type ^`a.a.a.d` @kind object;
  #L074ec8.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L074ece.  v0:= temp;
  #L074ed0.  if v0 != 0 then goto L074eec;
  #L074ed4.  v0:= 1I;
  #L074ed6.  `@@a.a.a.d.j` @type ^`boolean` := v0 @kind boolean;
  #L074eda.  v0:= "[a-z0-9_-]{1,120}" @kind object;
  #L074ede.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L074ee4.  v0:= temp @kind object;
  #L074ee6.  `@@a.a.a.d.a` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L074eea.  return @kind void;
  #L074eec.  v0:= 0I;
  #L074eee.  goto L074ed6;
}
procedure `void` `d`(`a.a.a.d` v2 @kind this) @signature `La/a/a/d;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L074f00.  @monitorenter v2
  #Try_start0.  
  #L074f02.  call temp:= `b`(v2) @signature `La/a/a/d;.b:()Z` @kind virtual;
  #L074f08.  v0:= temp;
  #L074f0a.  if v0 == 0 then goto L074f24;
  #L074f0e.  v0:= new `java.lang.IllegalStateException`;
  #L074f12.  v1:= "cache is closed" @kind object;
  #L074f16.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L074f1c.  throw v0;
  #Try_end0.  
  #L074f1e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L074f20.  @monitorexit v2
  #L074f22.  throw v0;
  #L074f24.  @monitorexit v2
  #L074f26.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L074f1e;
}
procedure `void` `a`(`a.a.a.d` v10 @kind this, `a.a.a.d$a` v11 @kind object, `boolean` v12 ) @signature `La/a/a/d;.a:(La/a/a/d$a;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L074f44.  v0:= 0I;
  #L074f46.  @monitorenter v10
  #Try_start0.  
  #L074f48.  v2:= v11.`a.a.a.d$a.a` @type ^`a.a.a.d$b` @kind object;
  #L074f4c.  v1:= v2.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L074f50.  if v1 == v11 then goto L074f66;
  #L074f54.  v0:= new `java.lang.IllegalStateException`;
  #L074f58.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L074f5e.  throw v0;
  #Try_end0.  
  #L074f60.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L074f62.  @monitorexit v10
  #L074f64.  throw v0;
  #L074f66.  if v12 == 0 then goto L074fe8;
  #Try_start1.  
  #L074f6a.  v1:= v2.`a.a.a.d$b.e` @type ^`boolean` @kind boolean;
  #L074f6e.  if v1 != 0 then goto L074fe8;
  #L074f72.  v1:= v0;
  #L074f74.  v3:= v10.`a.a.a.d.c` @type ^`int`;
  #L074f78.  if v1 >= v3 then goto L074fe8;
  #L074f7c.  v3:= v11.`a.a.a.d$a.b` @type ^`boolean`[] @kind object;
  #L074f80.  v3:= v3[v1] @kind boolean;
  #L074f84.  if v3 != 0 then goto L074fc0;
  #L074f88.  call `b`(v11) @signature `La/a/a/d$a;.b:()V` @kind virtual;
  #L074f8e.  v0:= new `java.lang.IllegalStateException`;
  #L074f92.  v2:= new `java.lang.StringBuilder`;
  #L074f96.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L074f9c.  v3:= "Newly created entry didn't create value for index " @kind object;
  #L074fa0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L074fa6.  v2:= temp @kind object;
  #L074fa8.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L074fae.  v1:= temp @kind object;
  #L074fb0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L074fb6.  v1:= temp @kind object;
  #L074fb8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L074fbe.  throw v0;
  #L074fc0.  v3:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L074fc4.  v4:= v2.`a.a.a.d$b.d` @type ^`java.io.File`[] @kind object;
  #L074fc8.  v4:= v4[v1] @kind object;
  #L074fcc.  call temp:= `b`(v3, v4) @signature `La/a/f/a;.b:(Ljava/io/File;)Z` @kind interface;
  #L074fd2.  v3:= temp;
  #L074fd4.  if v3 != 0 then goto L074fe2;
  #L074fd8.  call `b`(v11) @signature `La/a/a/d$a;.b:()V` @kind virtual;
  #Try_end1.  
  #L074fde.  @monitorexit v10
  #L074fe0.  return @kind void;
  #L074fe2.  v1:= v1 + 1;
  #L074fe6.  goto L074f74;
  #Try_start2.  
  #L074fe8.  v1:= v10.`a.a.a.d.c` @type ^`int`;
  #L074fec.  if v0 >= v1 then goto L07505a;
  #L074ff0.  v1:= v2.`a.a.a.d$b.d` @type ^`java.io.File`[] @kind object;
  #L074ff4.  v1:= v1[v0] @kind object;
  #L074ff8.  if v12 == 0 then goto L07504e;
  #L074ffc.  v3:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L075000.  call temp:= `b`(v3, v1) @signature `La/a/f/a;.b:(Ljava/io/File;)Z` @kind interface;
  #L075006.  v3:= temp;
  #L075008.  if v3 == 0 then goto L075048;
  #L07500c.  v3:= v2.`a.a.a.d$b.c` @type ^`java.io.File`[] @kind object;
  #L075010.  v3:= v3[v0] @kind object;
  #L075014.  v4:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L075018.  call `a`(v4, v1, v3) @signature `La/a/f/a;.a:(Ljava/io/File;Ljava/io/File;)V` @kind interface;
  #L07501e.  v1:= v2.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L075022.  v4:= v1[v0] @kind wide;
  #L075026.  v1:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L07502a.  call temp:= `c`(v1, v3) @signature `La/a/f/a;.c:(Ljava/io/File;)J` @kind interface;
  #L075030.  v6:= temp @kind wide;
  #L075032.  v1:= v2.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L075036.  v1[v0]:= v6 @kind wide;
  #L07503a.  v8:= v10.`a.a.a.d.l` @type ^`long` @kind wide;
  #L07503e.  v4:= v8 - v4 @kind long;
  #L075042.  v4:= v4 + v6 @kind long;
  #L075044.  v10.`a.a.a.d.l` @type ^`long` := v4 @kind wide;
  #L075048.  v0:= v0 + 1;
  #L07504c.  goto L074fe8;
  #L07504e.  v3:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L075052.  call `a`(v3, v1) @signature `La/a/f/a;.a:(Ljava/io/File;)V` @kind interface;
  #L075058.  goto L075048;
  #L07505a.  v0:= v10.`a.a.a.d.f` @type ^`int`;
  #L07505e.  v0:= v0 + 1;
  #L075062.  v10.`a.a.a.d.f` @type ^`int` := v0;
  #L075066.  v0:= 0I;
  #L075068.  v2.`a.a.a.d$b.f` @type ^`a.a.a.d$a` := v0 @kind object;
  #L07506c.  v0:= v2.`a.a.a.d$b.e` @type ^`boolean` @kind boolean;
  #L075070.  v0:= v0 ^| v12 @kind int;
  #L075072.  if v0 == 0 then goto L07510a;
  #L075076.  v0:= 1I;
  #L075078.  v2.`a.a.a.d$b.e` @type ^`boolean` := v0 @kind boolean;
  #L07507c.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L075080.  v1:= "CLEAN" @kind object;
  #L075084.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07508a.  v0:= temp @kind object;
  #L07508c.  v1:= 32I;
  #L075090.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L075096.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07509a.  v1:= v2.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L07509e.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L0750a4.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L0750a8.  call `a`(v2, v0) @signature `La/a/a/d$b;.a:(Lb/d;)V` @kind virtual;
  #L0750ae.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L0750b2.  v1:= 10I;
  #L0750b6.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L0750bc.  if v12 == 0 then goto L0750d2;
  #L0750c0.  v0:= v10.`a.a.a.d.m` @type ^`long` @kind wide;
  #L0750c4.  v4:= 1L;
  #L0750c8.  v4:= v4 + v0 @kind long;
  #L0750ca.  v10.`a.a.a.d.m` @type ^`long` := v4 @kind wide;
  #L0750ce.  v2.`a.a.a.d$b.g` @type ^`long` := v0 @kind wide;
  #L0750d2.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L0750d6.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L0750dc.  v0:= v10.`a.a.a.d.l` @type ^`long` @kind wide;
  #L0750e0.  v2:= v10.`a.a.a.d.k` @type ^`long` @kind wide;
  #L0750e4.  v0:= lcmp(v0, v2);
  #L0750e8.  if v0 > 0 then goto L0750f8;
  #L0750ec.  call temp:= `a`(v10) @signature `La/a/a/d;.a:()Z` @kind virtual;
  #L0750f2.  v0:= temp;
  #L0750f4.  if v0 == 0 then goto L074fde;
  #L0750f8.  v0:= v10.`a.a.a.d.n` @type ^`java.util.concurrent.Executor` @kind object;
  #L0750fc.  v1:= v10.`a.a.a.d.o` @type ^`java.lang.Runnable` @kind object;
  #L075100.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L075106.  goto L074fde;
  #L07510a.  v0:= v10.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L07510e.  v1:= v2.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L075112.  call temp:= `remove`(v0, v1) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L075118.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07511c.  v1:= "REMOVE" @kind object;
  #L075120.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L075126.  v0:= temp @kind object;
  #L075128.  v1:= 32I;
  #L07512c.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L075132.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L075136.  v1:= v2.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L07513a.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L075140.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L075144.  v1:= 10I;
  #L075148.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #Try_end2.  
  #L07514e.  goto L0750d2;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L074f60;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L074f60;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L074f60;
}
procedure `boolean` `a`(`a.a.a.d` v2 @kind this) @signature `La/a/a/d;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L07517c.  v0:= v2.`a.a.a.d.f` @type ^`int`;
  #L075180.  v1:= 2000I;
  #L075184.  if v0 < v1 then goto L0751a0;
  #L075188.  v0:= v2.`a.a.a.d.f` @type ^`int`;
  #L07518c.  v1:= v2.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L075190.  call temp:= `size`(v1) @signature `Ljava/util/LinkedHashMap;.size:()I` @kind virtual;
  #L075196.  v1:= temp;
  #L075198.  if v0 < v1 then goto L0751a0;
  #L07519c.  v0:= 1I;
  #L07519e.  return v0;
  #L0751a0.  v0:= 0I;
  #L0751a2.  goto L07519e;
}
procedure `boolean` `a`(`a.a.a.d` v6 @kind this, `a.a.a.d$b` v7 @kind object) @signature `La/a/a/d;.a:(La/a/a/d$b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0751b4.  v0:= v7.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L0751b8.  if v0 == 0 then goto L0751c6;
  #L0751bc.  v0:= v7.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L0751c0.  call `a`(v0) @signature `La/a/a/d$a;.a:()V` @kind virtual;
  #L0751c6.  v0:= 0I;
  #L0751c8.  v1:= v6.`a.a.a.d.c` @type ^`int`;
  #L0751cc.  if v0 >= v1 then goto L075206;
  #L0751d0.  v1:= v6.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L0751d4.  v2:= v7.`a.a.a.d$b.c` @type ^`java.io.File`[] @kind object;
  #L0751d8.  v2:= v2[v0] @kind object;
  #L0751dc.  call `a`(v1, v2) @signature `La/a/f/a;.a:(Ljava/io/File;)V` @kind interface;
  #L0751e2.  v2:= v6.`a.a.a.d.l` @type ^`long` @kind wide;
  #L0751e6.  v1:= v7.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L0751ea.  v4:= v1[v0] @kind wide;
  #L0751ee.  v2:= v2 - v4 @kind long;
  #L0751f0.  v6.`a.a.a.d.l` @type ^`long` := v2 @kind wide;
  #L0751f4.  v1:= v7.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L0751f8.  v2:= 0L;
  #L0751fc.  v1[v0]:= v2 @kind wide;
  #L075200.  v0:= v0 + 1;
  #L075204.  goto L0751c8;
  #L075206.  v0:= v6.`a.a.a.d.f` @type ^`int`;
  #L07520a.  v0:= v0 + 1;
  #L07520e.  v6.`a.a.a.d.f` @type ^`int` := v0;
  #L075212.  v0:= v6.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L075216.  v1:= "REMOVE" @kind object;
  #L07521a.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L075220.  v0:= temp @kind object;
  #L075222.  v1:= 32I;
  #L075226.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L07522c.  v0:= temp @kind object;
  #L07522e.  v1:= v7.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L075232.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L075238.  v0:= temp @kind object;
  #L07523a.  v1:= 10I;
  #L07523e.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L075244.  v0:= v6.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L075248.  v1:= v7.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L07524c.  call temp:= `remove`(v0, v1) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L075252.  call temp:= `a`(v6) @signature `La/a/a/d;.a:()Z` @kind virtual;
  #L075258.  v0:= temp;
  #L07525a.  if v0 == 0 then goto L07526c;
  #L07525e.  v0:= v6.`a.a.a.d.n` @type ^`java.util.concurrent.Executor` @kind object;
  #L075262.  v1:= v6.`a.a.a.d.o` @type ^`java.lang.Runnable` @kind object;
  #L075266.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L07526c.  v0:= 1I;
  #L07526e.  return v0;
}
procedure `boolean` `b`(`a.a.a.d` v1 @kind this) @signature `La/a/a/d;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L075280.  @monitorenter v1
  #Try_start0.  
  #L075282.  v0:= v1.`a.a.a.d.h` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L075286.  @monitorexit v1
  #L075288.  return v0;
  #L07528a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07528c.  @monitorexit v1
  #L07528e.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07528a;
}
procedure `void` `c`(`a.a.a.d` v4 @kind this) @signature `La/a/a/d;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0752ac.  v0:= v4.`a.a.a.d.l` @type ^`long` @kind wide;
  #L0752b0.  v2:= v4.`a.a.a.d.k` @type ^`long` @kind wide;
  #L0752b4.  v0:= lcmp(v0, v2);
  #L0752b8.  if v0 <= 0 then goto L0752e4;
  #L0752bc.  v0:= v4.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L0752c0.  call temp:= `values`(v0) @signature `Ljava/util/LinkedHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L0752c6.  v0:= temp @kind object;
  #L0752c8.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0752ce.  v0:= temp @kind object;
  #L0752d0.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0752d6.  v0:= temp @kind object;
  #L0752d8.  v0:= (`a.a.a.d$b`) v0 @kind object;
  #L0752dc.  call temp:= `a`(v4, v0) @signature `La/a/a/d;.a:(La/a/a/d$b;)Z` @kind virtual;
  #L0752e2.  goto L0752ac;
  #L0752e4.  v0:= 0I;
  #L0752e6.  v4.`a.a.a.d.i` @type ^`boolean` := v0 @kind boolean;
  #L0752ea.  return @kind void;
}
procedure `void` `close`(`a.a.a.d` v5 @kind this) @signature `La/a/a/d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0752fc.  @monitorenter v5
  #Try_start0.  
  #L0752fe.  v0:= v5.`a.a.a.d.g` @type ^`boolean` @kind boolean;
  #L075302.  if v0 == 0 then goto L07530e;
  #L075306.  v0:= v5.`a.a.a.d.h` @type ^`boolean` @kind boolean;
  #L07530a.  if v0 == 0 then goto L075318;
  #L07530e.  v0:= 1I;
  #L075310.  v5.`a.a.a.d.h` @type ^`boolean` := v0 @kind boolean;
  #Try_end0.  
  #L075314.  @monitorexit v5
  #L075316.  return @kind void;
  #Try_start1.  
  #L075318.  v0:= v5.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L07531c.  call temp:= `values`(v0) @signature `Ljava/util/LinkedHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L075322.  v0:= temp @kind object;
  #L075324.  v1:= v5.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L075328.  call temp:= `size`(v1) @signature `Ljava/util/LinkedHashMap;.size:()I` @kind virtual;
  #L07532e.  v1:= temp;
  #L075330.  v1:= new `a.a.a.d$b`[v1];
  #L075334.  call temp:= `toArray`(v0, v1) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L07533a.  v0:= temp @kind object;
  #L07533c.  v0:= (`a.a.a.d$b`[]) v0 @kind object;
  #L075340.  v2:= length @variable v0;
  #L075342.  v1:= 0I;
  #L075344.  if v1 >= v2 then goto L075364;
  #L075348.  v3:= v0[v1] @kind object;
  #L07534c.  v4:= v3.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L075350.  if v4 == 0 then goto L07535e;
  #L075354.  v3:= v3.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L075358.  call `b`(v3) @signature `La/a/a/d$a;.b:()V` @kind virtual;
  #L07535e.  v1:= v1 + 1;
  #L075362.  goto L075344;
  #L075364.  call `c`(v5) @signature `La/a/a/d;.c:()V` @kind virtual;
  #L07536a.  v0:= v5.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07536e.  call `close`(v0) @signature `Lb/d;.close:()V` @kind interface;
  #L075374.  v0:= 0I;
  #L075376.  v5.`a.a.a.d.d` @type ^`b.d` := v0 @kind object;
  #L07537a.  v0:= 1I;
  #L07537c.  v5.`a.a.a.d.h` @type ^`boolean` := v0 @kind boolean;
  #Try_end1.  
  #L075380.  goto L075314;
  #L075382.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L075384.  @monitorexit v5
  #L075386.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L075382;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L075382;
}
procedure `void` `flush`(`a.a.a.d` v1 @kind this) @signature `La/a/a/d;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0753ac.  @monitorenter v1
  #Try_start0.  
  #L0753ae.  v0:= v1.`a.a.a.d.g` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L0753b2.  if v0 != 0 then goto L0753ba;
  #L0753b6.  @monitorexit v1
  #L0753b8.  return @kind void;
  #Try_start1.  
  #L0753ba.  call `d`(v1) @signature `La/a/a/d;.d:()V` @kind direct;
  #L0753c0.  call `c`(v1) @signature `La/a/a/d;.c:()V` @kind virtual;
  #L0753c6.  v0:= v1.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L0753ca.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L0753d0.  goto L0753b6;
  #L0753d2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0753d4.  @monitorexit v1
  #L0753d6.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0753d2;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0753d2;
}
