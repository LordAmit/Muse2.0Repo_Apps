record `a.a.h.a` @kind class @AccessFlag PUBLIC_FINAL extends `a.a.h.b` @kind class {
  `a.a.h.e` `a.a.h.a.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.h.a` v0 @kind this, `a.a.h.e` v1 @kind object) @signature `La/a/h/a;.<init>:(La/a/h/e;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L082bfc.  call `<init>`(v0) @signature `La/a/h/b;.<init>:()V` @kind direct;
  #L082c02.  v0.`a.a.h.a.a` @type ^`a.a.h.e` := v1 @kind object;
  #L082c06.  return @kind void;
}
procedure `boolean` `a`(`a.a.h.a` v3 @kind this, `java.security.cert.X509Certificate` v4 @kind object, `java.security.cert.X509Certificate` v5 @kind object) @signature `La/a/h/a;.a:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L082c18.  v0:= 0I;
  #L082c1a.  call temp:= `getIssuerDN`(v4) @signature `Ljava/security/cert/X509Certificate;.getIssuerDN:()Ljava/security/Principal;` @kind virtual;
  #L082c20.  v1:= temp @kind object;
  #L082c22.  call temp:= `getSubjectDN`(v5) @signature `Ljava/security/cert/X509Certificate;.getSubjectDN:()Ljava/security/Principal;` @kind virtual;
  #L082c28.  v2:= temp @kind object;
  #L082c2a.  call temp:= `equals`(v1, v2) @signature `Ljava/security/Principal;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L082c30.  v1:= temp;
  #L082c32.  if v1 != 0 then goto L082c38;
  #L082c36.  return v0;
  #Try_start0.  
  #L082c38.  call temp:= `getPublicKey`(v5) @signature `Ljava/security/cert/X509Certificate;.getPublicKey:()Ljava/security/PublicKey;` @kind virtual;
  #L082c3e.  v1:= temp @kind object;
  #L082c40.  call `verify`(v4, v1) @signature `Ljava/security/cert/X509Certificate;.verify:(Ljava/security/PublicKey;)V` @kind virtual;
  #Try_end0.  
  #L082c46.  v0:= 1I;
  #L082c48.  goto L082c36;
  #L082c4a.  v1:= Exception @type ^`java.security.GeneralSecurityException` @kind object;
  #L082c4c.  goto L082c36;
  catch `java.security.GeneralSecurityException` @[Try_start0..Try_end0] goto L082c4a;
}
procedure `java.util.List` `a`(`a.a.h.a` v9 @kind this, `java.util.List` v10 @kind object, `java.lang.String` v11 @kind object) @signature `La/a/h/a;.a:(Ljava/util/List;Ljava/lang/String;)Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L082c70.  v2:= 1I;
  #L082c72.  v0:= 0I;
  #L082c74.  v6:= new `java.util.ArrayDeque`;
  #L082c78.  call `<init>`(v6, v10) @signature `Ljava/util/ArrayDeque;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L082c7e.  v4:= new `java.util.ArrayList`;
  #L082c82.  call `<init>`(v4) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L082c88.  call temp:= `removeFirst`(v6) @signature `Ljava/util/Deque;.removeFirst:()Ljava/lang/Object;` @kind interface;
  #L082c8e.  v1:= temp @kind object;
  #L082c90.  call temp:= `add`(v4, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L082c96.  v5:= v0;
  #L082c98.  v3:= v0;
  #L082c9a.  v0:= 9I;
  #L082c9e.  if v5 >= v0 then goto L082d7a;
  #L082ca2.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L082ca8.  v0:= temp;
  #L082caa.  v0:= v0 + -1;
  #L082cae.  call temp:= `get`(v4, v0) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L082cb4.  v0:= temp @kind object;
  #L082cb6.  v0:= (`java.security.cert.X509Certificate`) v0 @kind object;
  #L082cba.  v1:= v9.`a.a.h.a.a` @type ^`a.a.h.e` @kind object;
  #L082cbe.  call temp:= `a`(v1, v0) @signature `La/a/h/e;.a:(Ljava/security/cert/X509Certificate;)Ljava/security/cert/X509Certificate;` @kind virtual;
  #L082cc4.  v1:= temp @kind object;
  #L082cc6.  if v1 == 0 then goto L082d04;
  #L082cca.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L082cd0.  v3:= temp;
  #L082cd2.  if v3 > v2 then goto L082ce2;
  #L082cd6.  call temp:= `equals`(v0, v1) @signature `Ljava/security/cert/X509Certificate;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L082cdc.  v0:= temp;
  #L082cde.  if v0 != 0 then goto L082ce8;
  #L082ce2.  call temp:= `add`(v4, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L082ce8.  call temp:= `a`(v9, v1, v1) @signature `La/a/h/a;.a:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L082cee.  v0:= temp;
  #L082cf0.  if v0 == 0 then goto L082cf8;
  #L082cf4.  v0:= v4 @kind object;
  #L082cf6.  return v0 @kind object;
  #L082cf8.  v0:= v2;
  #L082cfa.  v1:= v5 + 1;
  #L082cfe.  v5:= v1;
  #L082d00.  v3:= v0;
  #L082d02.  goto L082c9a;
  #L082d04.  call temp:= `iterator`(v6) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L082d0a.  v7:= temp @kind object;
  #L082d0c.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L082d12.  v1:= temp;
  #L082d14.  if v1 == 0 then goto L082d40;
  #L082d18.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L082d1e.  v1:= temp @kind object;
  #L082d20.  v1:= (`java.security.cert.X509Certificate`) v1 @kind object;
  #L082d24.  call temp:= `a`(v9, v0, v1) @signature `La/a/h/a;.a:(Ljava/security/cert/X509Certificate;Ljava/security/cert/X509Certificate;)Z` @kind direct;
  #L082d2a.  v8:= temp;
  #L082d2c.  if v8 == 0 then goto L082d0c;
  #L082d30.  call `remove`(v7) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L082d36.  call temp:= `add`(v4, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L082d3c.  v0:= v3;
  #L082d3e.  goto L082cfa;
  #L082d40.  if v3 == 0 then goto L082d48;
  #L082d44.  v0:= v4 @kind object;
  #L082d46.  goto L082cf6;
  #L082d48.  v1:= new `javax.net.ssl.SSLPeerUnverifiedException`;
  #L082d4c.  v2:= new `java.lang.StringBuilder`;
  #L082d50.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L082d56.  v3:= "Failed to find a trusted cert that signed " @kind object;
  #L082d5a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082d60.  v2:= temp @kind object;
  #L082d62.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082d68.  v0:= temp @kind object;
  #L082d6a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L082d70.  v0:= temp @kind object;
  #L082d72.  call `<init>`(v1, v0) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L082d78.  throw v1;
  #L082d7a.  v0:= new `javax.net.ssl.SSLPeerUnverifiedException`;
  #L082d7e.  v1:= new `java.lang.StringBuilder`;
  #L082d82.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L082d88.  v2:= "Certificate chain too long: " @kind object;
  #L082d8c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082d92.  v1:= temp @kind object;
  #L082d94.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082d9a.  v1:= temp @kind object;
  #L082d9c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L082da2.  v1:= temp @kind object;
  #L082da4.  call `<init>`(v0, v1) @signature `Ljavax/net/ssl/SSLPeerUnverifiedException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L082daa.  throw v0;
}
procedure `boolean` `equals`(`a.a.h.a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `La/a/h/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L082dbc.  v0:= 1I;
  #L082dbe.  if v4 != v3 then goto L082dc4;
  #L082dc2.  return v0;
  #L082dc4.  v1:= instanceof @variable v4 @type ^`a.a.h.a` @kind boolean;
  #L082dc8.  if v1 == 0 then goto L082de4;
  #L082dcc.  v4:= (`a.a.h.a`) v4 @kind object;
  #L082dd0.  v1:= v4.`a.a.h.a.a` @type ^`a.a.h.e` @kind object;
  #L082dd4.  v2:= v3.`a.a.h.a.a` @type ^`a.a.h.e` @kind object;
  #L082dd8.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L082dde.  v1:= temp;
  #L082de0.  if v1 != 0 then goto L082dc2;
  #L082de4.  v0:= 0I;
  #L082de6.  goto L082dc2;
}
procedure `int` `hashCode`(`a.a.h.a` v1 @kind this) @signature `La/a/h/a;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L082df8.  v0:= v1.`a.a.h.a.a` @type ^`a.a.h.e` @kind object;
  #L082dfc.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L082e02.  v0:= temp;
  #L082e04.  return v0;
}
