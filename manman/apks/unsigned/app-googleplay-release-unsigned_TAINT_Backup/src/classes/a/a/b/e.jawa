record `a.a.b.e` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `java.io.IOException` `a.a.b.e.b` @AccessFlag PRIVATE;
}
global `java.lang.reflect.Method` `@@a.a.b.e.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/a/b/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #Try_start0.  
  #L0764b4.  v0:= constclass @type ^`java.lang.Throwable` @kind object;
  #L0764b8.  v1:= "addSuppressed" @kind object;
  #L0764bc.  v2:= 1I;
  #L0764be.  v2:= new `java.lang.Class`[v2];
  #L0764c2.  v3:= 0I;
  #L0764c4.  v4:= constclass @type ^`java.lang.Throwable` @kind object;
  #L0764c8.  v2[v3]:= v4 @kind object;
  #L0764cc.  call temp:= `getDeclaredMethod`(v0, v1, v2) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #Try_end0.  
  #L0764d2.  v0:= temp @kind object;
  #L0764d4.  `@@a.a.b.e.a` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L0764d8.  return @kind void;
  #L0764da.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L0764dc.  v0:= 0I;
  #L0764de.  goto L0764d4;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L0764da;
}
procedure `void` `<init>`(`a.a.b.e` v0 @kind this, `java.io.IOException` v1 @kind object) @signature `La/a/b/e;.<init>:(Ljava/io/IOException;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L076500.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L076506.  v0.`a.a.b.e.b` @type ^`java.io.IOException` := v1 @kind object;
  #L07650a.  return @kind void;
}
procedure `void` `a`(`a.a.b.e` v3 @kind this, `java.io.IOException` v4 @kind object, `java.io.IOException` v5 @kind object) @signature `La/a/b/e;.a:(Ljava/io/IOException;Ljava/io/IOException;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07651c.  v0:= `@@a.a.b.e.a` @type ^`java.lang.reflect.Method` @kind object;
  #L076520.  if v0 == 0 then goto L07653a;
  #Try_start0.  
  #L076524.  v0:= `@@a.a.b.e.a` @type ^`java.lang.reflect.Method` @kind object;
  #L076528.  v1:= 1I;
  #L07652a.  v1:= new `java.lang.Object`[v1];
  #L07652e.  v2:= 0I;
  #L076530.  v1[v2]:= v5 @kind object;
  #L076534.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L07653a.  return @kind void;
  #L07653c.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L07653e.  goto L07653a;
  #L076540.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L076542.  goto L07653a;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L076540;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L07653c;
}
procedure `java.io.IOException` `a`(`a.a.b.e` v1 @kind this) @signature `La/a/b/e;.a:()Ljava/io/IOException;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L076564.  v0:= v1.`a.a.b.e.b` @type ^`java.io.IOException` @kind object;
  #L076568.  return v0 @kind object;
}
procedure `void` `a`(`a.a.b.e` v1 @kind this, `java.io.IOException` v2 @kind object) @signature `La/a/b/e;.a:(Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07657c.  v0:= v1.`a.a.b.e.b` @type ^`java.io.IOException` @kind object;
  #L076580.  call `a`(v1, v2, v0) @signature `La/a/b/e;.a:(Ljava/io/IOException;Ljava/io/IOException;)V` @kind direct;
  #L076586.  v1.`a.a.b.e.b` @type ^`java.io.IOException` := v2 @kind object;
  #L07658a.  return @kind void;
}
