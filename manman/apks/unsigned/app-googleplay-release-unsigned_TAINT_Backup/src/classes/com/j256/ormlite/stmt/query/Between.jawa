record `com.j256.ormlite.stmt.query.Between` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.query.BaseComparison` @kind class {
  `java.lang.Object` `com.j256.ormlite.stmt.query.Between.high` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.stmt.query.Between.low` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.Between` v2 @kind this, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Between;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L15e094.  v0:= 0I;
  #L15e096.  v1:= 1I;
  #L15e098.  call `<init>`(v2, v3, v4, v0, v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Z)V` @kind direct;
  #L15e09e.  v2.`com.j256.ormlite.stmt.query.Between.low` @type ^`java.lang.Object` := v5 @kind object;
  #L15e0a2.  v2.`com.j256.ormlite.stmt.query.Between.high` @type ^`java.lang.Object` := v6 @kind object;
  #L15e0a6.  return @kind void;
}
procedure `void` `appendOperation`(`com.j256.ormlite.stmt.query.Between` v1 @kind this, `java.lang.StringBuilder` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Between;.appendOperation:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15e0b8.  v0:= "BETWEEN " @kind object;
  #L15e0bc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e0c2.  return @kind void;
}
procedure `void` `appendSql`(`com.j256.ormlite.stmt.query.Between` v0 @kind this, `com.j256.ormlite.db.DatabaseType` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.StringBuilder` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Between;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L15e0d4.  call `appendSql`(v0, v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind super;
  #L15e0da.  return @kind void;
}
procedure `void` `appendValue`(`com.j256.ormlite.stmt.query.Between` v6 @kind this, `com.j256.ormlite.db.DatabaseType` v7 @kind object, `java.lang.StringBuilder` v8 @kind object, `java.util.List` v9 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Between;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15e0ec.  v0:= v6.`com.j256.ormlite.stmt.query.Between.low` @type ^`java.lang.Object` @kind object;
  #L15e0f0.  if v0 != 0 then goto L15e136;
  #L15e0f4.  v0:= new `java.lang.IllegalArgumentException`;
  #L15e0f8.  v1:= new `java.lang.StringBuilder`;
  #L15e0fc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e102.  v2:= "BETWEEN low value for '" @kind object;
  #L15e106.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e10c.  v1:= temp @kind object;
  #L15e10e.  v2:= v6.`com.j256.ormlite.stmt.query.Between.columnName` @type ^`java.lang.String` @kind object;
  #L15e112.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e118.  v1:= temp @kind object;
  #L15e11a.  v2:= "' is null" @kind object;
  #L15e11e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e124.  v1:= temp @kind object;
  #L15e126.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e12c.  v1:= temp @kind object;
  #L15e12e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e134.  throw v0;
  #L15e136.  v0:= v6.`com.j256.ormlite.stmt.query.Between.high` @type ^`java.lang.Object` @kind object;
  #L15e13a.  if v0 != 0 then goto L15e180;
  #L15e13e.  v0:= new `java.lang.IllegalArgumentException`;
  #L15e142.  v1:= new `java.lang.StringBuilder`;
  #L15e146.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e14c.  v2:= "BETWEEN high value for '" @kind object;
  #L15e150.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e156.  v1:= temp @kind object;
  #L15e158.  v2:= v6.`com.j256.ormlite.stmt.query.Between.columnName` @type ^`java.lang.String` @kind object;
  #L15e15c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e162.  v1:= temp @kind object;
  #L15e164.  v2:= "' is null" @kind object;
  #L15e168.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e16e.  v1:= temp @kind object;
  #L15e170.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e176.  v1:= temp @kind object;
  #L15e178.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e17e.  throw v0;
  #L15e180.  v2:= v6.`com.j256.ormlite.stmt.query.Between.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15e184.  v5:= v6.`com.j256.ormlite.stmt.query.Between.low` @type ^`java.lang.Object` @kind object;
  #L15e188.  v0:= v6 @kind object;
  #L15e18a.  v1:= v7 @kind object;
  #L15e18c.  v3:= v8 @kind object;
  #L15e18e.  v4:= v9 @kind object;
  #L15e190.  call `appendArgOrValue`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/Between;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @kind virtual;
  #L15e196.  v0:= "AND " @kind object;
  #L15e19a.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e1a0.  v2:= v6.`com.j256.ormlite.stmt.query.Between.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15e1a4.  v5:= v6.`com.j256.ormlite.stmt.query.Between.high` @type ^`java.lang.Object` @kind object;
  #L15e1a8.  v0:= v6 @kind object;
  #L15e1aa.  v1:= v7 @kind object;
  #L15e1ac.  v3:= v8 @kind object;
  #L15e1ae.  v4:= v9 @kind object;
  #L15e1b0.  call `appendArgOrValue`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/Between;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @kind virtual;
  #L15e1b6.  return @kind void;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.stmt.query.Between` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/Between;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L15e1c8.  call temp:= `getColumnName`(v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.getColumnName:()Ljava/lang/String;` @kind super;
  #L15e1ce.  v0:= temp @kind object;
  #L15e1d0.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.query.Between` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/Between;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L15e1e4.  call temp:= `toString`(v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.toString:()Ljava/lang/String;` @kind super;
  #L15e1ea.  v0:= temp @kind object;
  #L15e1ec.  return v0 @kind object;
}
