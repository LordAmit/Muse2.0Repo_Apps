record `com.j256.ormlite.field.types.BaseDataType` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.field.BaseFieldConverter` @kind class, `com.j256.ormlite.field.DataPersister` @kind interface {
  `java.lang.Class`[] `com.j256.ormlite.field.types.BaseDataType.classes` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.field.SqlType` `com.j256.ormlite.field.types.BaseDataType.sqlType` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.Class`[] `@@com.j256.ormlite.field.types.BaseDataType.NO_CLASSES` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L150d5c.  v0:= 0I;
  #L150d5e.  v0:= new `java.lang.Class`[v0];
  #L150d62.  `@@com.j256.ormlite.field.types.BaseDataType.NO_CLASSES` @type ^`java.lang.Class`[] := v0 @kind object;
  #L150d66.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this, `com.j256.ormlite.field.SqlType` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L150d78.  call `<init>`(v1) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.<init>:()V` @kind direct;
  #L150d7e.  v1.`com.j256.ormlite.field.types.BaseDataType.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v2 @kind object;
  #L150d82.  v0:= `@@com.j256.ormlite.field.types.BaseDataType.NO_CLASSES` @type ^`java.lang.Class`[] @kind object;
  #L150d86.  v1.`com.j256.ormlite.field.types.BaseDataType.classes` @type ^`java.lang.Class`[] := v0 @kind object;
  #L150d8a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BaseDataType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L150d9c.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.<init>:()V` @kind direct;
  #L150da2.  v0.`com.j256.ormlite.field.types.BaseDataType.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v1 @kind object;
  #L150da6.  v0.`com.j256.ormlite.field.types.BaseDataType.classes` @type ^`java.lang.Class`[] := v2 @kind object;
  #L150daa.  return @kind void;
}
procedure `java.lang.Object` `convertIdNumber`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this, `java.lang.Number` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.convertIdNumber:(Ljava/lang/Number;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150dbc.  v0:= 0I;
  #L150dbe.  return v0 @kind object;
}
procedure `boolean` `dataIsEqual`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.dataIsEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150dd0.  v0:= 0I;
  #L150dd2.  if v2 != 0 then goto L150dde;
  #L150dd6.  if v3 != 0 then goto L150ddc;
  #L150dda.  v0:= 1I;
  #L150ddc.  return v0;
  #L150dde.  if v3 == 0 then goto L150ddc;
  #L150de2.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L150de8.  v0:= temp;
  #L150dea.  goto L150ddc;
}
procedure `java.lang.Object` `generateId`(`com.j256.ormlite.field.types.BaseDataType` v2 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.generateId:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L150dfc.  v0:= new `java.lang.IllegalStateException`;
  #L150e00.  v1:= "Should not have tried to generate this type" @kind object;
  #L150e04.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L150e0a.  throw v0;
}
procedure `java.lang.String`[] `getAssociatedClassNames`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.getAssociatedClassNames:()[Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150e1c.  v0:= 0I;
  #L150e1e.  return v0 @kind object;
}
procedure `java.lang.Class`[] `getAssociatedClasses`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.getAssociatedClasses:()[Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150e30.  v0:= v1.`com.j256.ormlite.field.types.BaseDataType.classes` @type ^`java.lang.Class`[] @kind object;
  #L150e34.  return v0 @kind object;
}
procedure `int` `getDefaultWidth`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.getDefaultWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150e48.  v0:= 0I;
  #L150e4a.  return v0;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.BaseDataType` v2 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L150e5c.  v0:= v2.`com.j256.ormlite.field.types.BaseDataType.classes` @type ^`java.lang.Class`[] @kind object;
  #L150e60.  v0:= length @variable v0;
  #L150e62.  if v0 != 0 then goto L150e6a;
  #L150e66.  v0:= 0I;
  #L150e68.  return v0 @kind object;
  #L150e6a.  v0:= v2.`com.j256.ormlite.field.types.BaseDataType.classes` @type ^`java.lang.Class`[] @kind object;
  #L150e6e.  v1:= 0I;
  #L150e70.  v0:= v0[v1] @kind object;
  #L150e74.  goto L150e68;
}
procedure `java.lang.String` `getSqlOtherType`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.getSqlOtherType:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150e88.  v0:= 0I;
  #L150e8a.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.SqlType` `getSqlType`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150e9c.  v0:= v1.`com.j256.ormlite.field.types.BaseDataType.sqlType` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L150ea0.  return v0 @kind object;
}
procedure `boolean` `isAppropriateId`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isAppropriateId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150eb4.  v0:= 1I;
  #L150eb6.  return v0;
}
procedure `boolean` `isArgumentHolderRequired`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isArgumentHolderRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150ec8.  v0:= 0I;
  #L150eca.  return v0;
}
procedure `boolean` `isComparable`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isComparable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150edc.  v0:= 1I;
  #L150ede.  return v0;
}
procedure `boolean` `isEscapedDefaultValue`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isEscapedDefaultValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150ef0.  call temp:= `isEscapedValue`(v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isEscapedValue:()Z` @kind virtual;
  #L150ef6.  v0:= temp;
  #L150ef8.  return v0;
}
procedure `boolean` `isEscapedValue`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isEscapedValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150f0c.  v0:= 1I;
  #L150f0e.  return v0;
}
procedure `boolean` `isPrimitive`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isPrimitive:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150f20.  v0:= 0I;
  #L150f22.  return v0;
}
procedure `boolean` `isSelfGeneratedId`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isSelfGeneratedId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150f34.  v0:= 0I;
  #L150f36.  return v0;
}
procedure `boolean` `isValidForField`(`com.j256.ormlite.field.types.BaseDataType` v7 @kind this, `java.lang.reflect.Field` v8 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isValidForField:(Ljava/lang/reflect/Field;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L150f48.  v0:= 1I;
  #L150f4a.  v1:= 0I;
  #L150f4c.  v2:= v7.`com.j256.ormlite.field.types.BaseDataType.classes` @type ^`java.lang.Class`[] @kind object;
  #L150f50.  v2:= length @variable v2;
  #L150f52.  if v2 != 0 then goto L150f58;
  #L150f56.  return v0;
  #L150f58.  v3:= v7.`com.j256.ormlite.field.types.BaseDataType.classes` @type ^`java.lang.Class`[] @kind object;
  #L150f5c.  v4:= length @variable v3;
  #L150f5e.  v2:= v1;
  #L150f60.  if v2 >= v4 then goto L150f82;
  #L150f64.  v5:= v3[v2] @kind object;
  #L150f68.  call temp:= `getType`(v8) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L150f6e.  v6:= temp @kind object;
  #L150f70.  call temp:= `isAssignableFrom`(v5, v6) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L150f76.  v5:= temp;
  #L150f78.  if v5 != 0 then goto L150f56;
  #L150f7c.  v2:= v2 + 1;
  #L150f80.  goto L150f60;
  #L150f82.  v0:= v1;
  #L150f84.  goto L150f56;
}
procedure `boolean` `isValidForVersion`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isValidForVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150f98.  v0:= 0I;
  #L150f9a.  return v0;
}
procedure `boolean` `isValidGeneratedType`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.isValidGeneratedType:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150fac.  v0:= 0I;
  #L150fae.  return v0;
}
procedure `java.lang.Object` `makeConfigObject`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.makeConfigObject:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150fc0.  v0:= 0I;
  #L150fc2.  return v0 @kind object;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150fd4.  v0:= 0I;
  #L150fd6.  return v0 @kind object;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.BaseDataType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150fe8.  call temp:= `parseDefaultString`(v1, v2, v3) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @kind virtual;
  #L150fee.  v0:= temp @kind object;
  #L150ff0.  call temp:= `sqlArgToJava`(v1, v2, v0, v4) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L150ff6.  v0:= temp @kind object;
  #L150ff8.  return v0 @kind object;
}
