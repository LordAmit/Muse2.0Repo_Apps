record `com.j256.ormlite.stmt.mapped.MappedPreparedStmt` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.mapped.BaseMappedQuery` @kind class, `com.j256.ormlite.stmt.PreparedDelete` @kind interface, `com.j256.ormlite.stmt.PreparedQuery` @kind interface, `com.j256.ormlite.stmt.PreparedUpdate` @kind interface {
  `com.j256.ormlite.stmt.ArgumentHolder`[] `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.cacheStore` @AccessFlag PRIVATE_FINAL;
  `java.lang.Long` `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.stmt.StatementBuilder$StatementType` `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v0 @kind this, `com.j256.ormlite.table.TableInfo` v1 @kind object, `java.lang.String` v2 @kind object, `com.j256.ormlite.field.FieldType`[] v3 @kind object, `com.j256.ormlite.field.FieldType`[] v4 @kind object, `com.j256.ormlite.stmt.ArgumentHolder`[] v5 @kind object, `java.lang.Long` v6 @kind object, `com.j256.ormlite.stmt.StatementBuilder$StatementType` v7 @kind object, `boolean` v8 ) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/stmt/ArgumentHolder;Ljava/lang/Long;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15d15c.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L15d162.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] := v5 @kind object;
  #L15d166.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @type ^`java.lang.Long` := v6 @kind object;
  #L15d16a.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` := v7 @kind object;
  #L15d16e.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.cacheStore` @type ^`boolean` := v8 @kind boolean;
  #L15d172.  return @kind void;
}
procedure `com.j256.ormlite.support.CompiledStatement` `assignStatementArguments`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v5 @kind this, `com.j256.ormlite.support.CompiledStatement` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.assignStatementArguments:(Lcom/j256/ormlite/support/CompiledStatement;)Lcom/j256/ormlite/support/CompiledStatement;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #Try_start0.  
  #L15d184.  v0:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @type ^`java.lang.Long` @kind object;
  #L15d188.  if v0 == 0 then goto L15d19e;
  #L15d18c.  v0:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @type ^`java.lang.Long` @kind object;
  #L15d190.  call temp:= `intValue`(v0) @signature `Ljava/lang/Long;.intValue:()I` @kind virtual;
  #L15d196.  v0:= temp;
  #L15d198.  call `setMaxRows`(v6, v0) @signature `Lcom/j256/ormlite/support/CompiledStatement;.setMaxRows:(I)V` @kind interface;
  #L15d19e.  v0:= 0I;
  #L15d1a0.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedPreparedStmt.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15d1a4.  v2:= `@@com.j256.ormlite.logger.Log$Level.TRACE` @type ^`com.j256.ormlite.logger.Log$Level` @kind object;
  #L15d1a8.  call temp:= `isLevelEnabled`(v1, v2) @signature `Lcom/j256/ormlite/logger/Logger;.isLevelEnabled:(Lcom/j256/ormlite/logger/Log$Level;)Z` @kind virtual;
  #L15d1ae.  v1:= temp;
  #L15d1b0.  if v1 == 0 then goto L15d1c8;
  #L15d1b4.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L15d1b8.  v1:= length @variable v1;
  #L15d1ba.  if v1 <= 0 then goto L15d1c8;
  #L15d1be.  v0:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L15d1c2.  v0:= length @variable v0;
  #L15d1c4.  v0:= new `java.lang.Object`[v0];
  #L15d1c8.  v1:= 0I;
  #L15d1ca.  v2:= v1;
  #L15d1cc.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L15d1d0.  v1:= length @variable v1;
  #L15d1d2.  if v2 >= v1 then goto L15d222;
  #L15d1d6.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L15d1da.  v1:= v1[v2] @kind object;
  #L15d1de.  call temp:= `getSqlArgValue`(v1) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.getSqlArgValue:()Ljava/lang/Object;` @kind interface;
  #L15d1e4.  v3:= temp @kind object;
  #L15d1e6.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L15d1ea.  v1:= v1[v2] @kind object;
  #L15d1ee.  if v1 != 0 then goto L15d218;
  #L15d1f2.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L15d1f6.  v1:= v1[v2] @kind object;
  #L15d1fa.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L15d200.  v1:= temp @kind object;
  #L15d202.  call `setObject`(v6, v2, v3, v1) @signature `Lcom/j256/ormlite/support/CompiledStatement;.setObject:(ILjava/lang/Object;Lcom/j256/ormlite/field/SqlType;)V` @kind interface;
  #L15d208.  if v0 == 0 then goto L15d210;
  #L15d20c.  v0[v2]:= v3 @kind object;
  #L15d210.  v1:= v2 + 1;
  #L15d214.  v2:= v1;
  #L15d216.  goto L15d1cc;
  #L15d218.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L15d21e.  v1:= temp @kind object;
  #L15d220.  goto L15d202;
  #L15d222.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedPreparedStmt.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15d226.  v2:= "prepared statement '{}' with {} args" @kind object;
  #L15d22a.  v3:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.statement` @type ^`java.lang.String` @kind object;
  #L15d22e.  v4:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L15d232.  v4:= length @variable v4;
  #L15d234.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15d23a.  v4:= temp @kind object;
  #L15d23c.  call `debug`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L15d242.  if v0 == 0 then goto L15d254;
  #L15d246.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedPreparedStmt.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15d24a.  v2:= "prepared statement arguments: {}" @kind object;
  #L15d24e.  call `trace`(v1, v2, v0) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #Try_end0.  
  #L15d254.  return v6 @kind object;
  #L15d256.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15d258.  v1:= "statement" @kind object;
  #L15d25c.  call `closeThrowSqlException`(v6, v1) @signature `Lcom/j256/ormlite/misc/IOUtils;.closeThrowSqlException:(Ljava/io/Closeable;Ljava/lang/String;)V` @kind static;
  #L15d262.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L15d256;
}
procedure `com.j256.ormlite.support.CompiledStatement` `compile`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v1 @kind this, `com.j256.ormlite.support.DatabaseConnection` v2 @kind object, `com.j256.ormlite.stmt.StatementBuilder$StatementType` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.compile:(Lcom/j256/ormlite/support/DatabaseConnection;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;)Lcom/j256/ormlite/support/CompiledStatement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15d280.  v0:= -1I;
  #L15d282.  call temp:= `compile`(v1, v2, v3, v0) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.compile:(Lcom/j256/ormlite/support/DatabaseConnection;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;I)Lcom/j256/ormlite/support/CompiledStatement;` @kind virtual;
  #L15d288.  v0:= temp @kind object;
  #L15d28a.  return v0 @kind object;
}
procedure `com.j256.ormlite.support.CompiledStatement` `compile`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v6 @kind this, `com.j256.ormlite.support.DatabaseConnection` v7 @kind object, `com.j256.ormlite.stmt.StatementBuilder$StatementType` v8 @kind object, `int` v9 ) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.compile:(Lcom/j256/ormlite/support/DatabaseConnection;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;I)Lcom/j256/ormlite/support/CompiledStatement;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15d29c.  v0:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L15d2a0.  if v0 == v8 then goto L15d2fa;
  #L15d2a4.  v0:= new `java.sql.SQLException`;
  #L15d2a8.  v1:= new `java.lang.StringBuilder`;
  #L15d2ac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15d2b2.  v2:= "Could not compile this " @kind object;
  #L15d2b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d2bc.  v1:= temp @kind object;
  #L15d2be.  v2:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L15d2c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d2c8.  v1:= temp @kind object;
  #L15d2ca.  v2:= " statement since the caller is expecting a " @kind object;
  #L15d2ce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d2d4.  v1:= temp @kind object;
  #L15d2d6.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d2dc.  v1:= temp @kind object;
  #L15d2de.  v2:= " statement.  Check your QueryBuilder methods." @kind object;
  #L15d2e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d2e8.  v1:= temp @kind object;
  #L15d2ea.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15d2f0.  v1:= temp @kind object;
  #L15d2f2.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d2f8.  throw v0;
  #L15d2fa.  v1:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.statement` @type ^`java.lang.String` @kind object;
  #L15d2fe.  v3:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L15d302.  v5:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.cacheStore` @type ^`boolean` @kind boolean;
  #L15d306.  v0:= v7 @kind object;
  #L15d308.  v2:= v8 @kind object;
  #L15d30a.  v4:= v9;
  #L15d30c.  call temp:= `compileStatement`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/support/DatabaseConnection;.compileStatement:(Ljava/lang/String;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;[Lcom/j256/ormlite/field/FieldType;IZ)Lcom/j256/ormlite/support/CompiledStatement;` @kind interface;
  #L15d312.  v0:= temp @kind object;
  #L15d314.  call temp:= `assignStatementArguments`(v6, v0) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.assignStatementArguments:(Lcom/j256/ormlite/support/CompiledStatement;)Lcom/j256/ormlite/support/CompiledStatement;` @kind direct;
  #L15d31a.  v0:= temp @kind object;
  #L15d31c.  return v0 @kind object;
}
procedure `java.lang.String` `getStatement`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.getStatement:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15d330.  v0:= v1.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.statement` @type ^`java.lang.String` @kind object;
  #L15d334.  return v0 @kind object;
}
procedure `com.j256.ormlite.stmt.StatementBuilder$StatementType` `getType`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.getType:()Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15d348.  v0:= v1.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L15d34c.  return v0 @kind object;
}
procedure `void` `setArgumentHolderValue`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v3 @kind this, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.setArgumentHolderValue:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15d360.  if v4 >= 0 then goto L15d3a2;
  #L15d364.  v0:= new `java.sql.SQLException`;
  #L15d368.  v1:= new `java.lang.StringBuilder`;
  #L15d36c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15d372.  v2:= "argument holder index " @kind object;
  #L15d376.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d37c.  v1:= temp @kind object;
  #L15d37e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d384.  v1:= temp @kind object;
  #L15d386.  v2:= " must be >= 0" @kind object;
  #L15d38a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d390.  v1:= temp @kind object;
  #L15d392.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15d398.  v1:= temp @kind object;
  #L15d39a.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d3a0.  throw v0;
  #L15d3a2.  v0:= v3.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L15d3a6.  v0:= length @variable v0;
  #L15d3a8.  if v0 > v4 then goto L15d404;
  #L15d3ac.  v0:= new `java.sql.SQLException`;
  #L15d3b0.  v1:= new `java.lang.StringBuilder`;
  #L15d3b4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15d3ba.  v2:= "argument holder index " @kind object;
  #L15d3be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d3c4.  v1:= temp @kind object;
  #L15d3c6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d3cc.  v1:= temp @kind object;
  #L15d3ce.  v2:= " is not valid, only " @kind object;
  #L15d3d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d3d8.  v1:= temp @kind object;
  #L15d3da.  v2:= v3.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L15d3de.  v2:= length @variable v2;
  #L15d3e0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d3e6.  v1:= temp @kind object;
  #L15d3e8.  v2:= " in statement (index starts at 0)" @kind object;
  #L15d3ec.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d3f2.  v1:= temp @kind object;
  #L15d3f4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15d3fa.  v1:= temp @kind object;
  #L15d3fc.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d402.  throw v0;
  #L15d404.  v0:= v3.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L15d408.  v0:= v0[v4] @kind object;
  #L15d40c.  call `setValue`(v0, v5) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setValue:(Ljava/lang/Object;)V` @kind interface;
  #L15d412.  return @kind void;
}
