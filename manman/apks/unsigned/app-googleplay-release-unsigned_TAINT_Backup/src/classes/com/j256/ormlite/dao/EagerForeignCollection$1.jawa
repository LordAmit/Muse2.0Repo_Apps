record `com.j256.ormlite.dao.EagerForeignCollection$1` @kind class @AccessFlag  extends `com.j256.ormlite.dao.CloseableIterator` @kind interface {
  `int` `com.j256.ormlite.dao.EagerForeignCollection$1.offset` @AccessFlag PRIVATE;
  `com.j256.ormlite.dao.EagerForeignCollection` `com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.j256.ormlite.dao.EagerForeignCollection$1` v1 @kind this, `com.j256.ormlite.dao.EagerForeignCollection` v2 @kind object) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.<init>:(Lcom/j256/ormlite/dao/EagerForeignCollection;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L147a90.  v1.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` := v2 @kind object;
  #L147a94.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L147a9a.  v0:= -1I;
  #L147a9c.  v1.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L147aa0.  return @kind void;
}
procedure `void` `close`(`com.j256.ormlite.dao.EagerForeignCollection$1` v0 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L147ab4.  return @kind void;
}
procedure `void` `closeQuietly`(`com.j256.ormlite.dao.EagerForeignCollection$1` v0 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.closeQuietly:()V` @AccessFlag PUBLIC {
    temp;

  #L147ac8.  return @kind void;
}
procedure `java.lang.Object` `current`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.current:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L147adc.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147ae0.  if v0 >= 0 then goto L147aea;
  #L147ae4.  v0:= 0I;
  #L147ae6.  v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L147aea.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147aee.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147af2.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L147af8.  v1:= temp @kind object;
  #L147afa.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L147b00.  v1:= temp;
  #L147b02.  if v0 < v1 then goto L147b0a;
  #L147b06.  v0:= 0I;
  #L147b08.  return v0 @kind object;
  #L147b0a.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147b0e.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L147b14.  v0:= temp @kind object;
  #L147b16.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147b1a.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L147b20.  v0:= temp @kind object;
  #L147b22.  goto L147b08;
}
procedure `java.lang.Object` `first`(`com.j256.ormlite.dao.EagerForeignCollection$1` v3 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.first:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L147b34.  v2:= 0I;
  #L147b36.  v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v2;
  #L147b3a.  v0:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147b3e.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147b42.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L147b48.  v1:= temp @kind object;
  #L147b4a.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L147b50.  v1:= temp;
  #L147b52.  if v0 < v1 then goto L147b5a;
  #L147b56.  v0:= 0I;
  #L147b58.  return v0 @kind object;
  #L147b5a.  v0:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147b5e.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L147b64.  v0:= temp @kind object;
  #L147b66.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L147b6c.  v0:= temp @kind object;
  #L147b6e.  goto L147b58;
}
procedure `com.j256.ormlite.support.DatabaseResults` `getRawResults`(`com.j256.ormlite.dao.EagerForeignCollection$1` v1 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.getRawResults:()Lcom/j256/ormlite/support/DatabaseResults;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L147b80.  v0:= 0I;
  #L147b82.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L147b94.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147b98.  v0:= v0 + 1;
  #L147b9c.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147ba0.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L147ba6.  v1:= temp @kind object;
  #L147ba8.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L147bae.  v1:= temp;
  #L147bb0.  if v0 >= v1 then goto L147bb8;
  #L147bb4.  v0:= 1I;
  #L147bb6.  return v0;
  #L147bb8.  v0:= 0I;
  #L147bba.  goto L147bb6;
}
procedure `java.lang.Object` `moveRelative`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this, `int` v3 ) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.moveRelative:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L147bcc.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147bd0.  v0:= v0 + v3 @kind int;
  #L147bd2.  v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L147bd6.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147bda.  if v0 < 0 then goto L147bfa;
  #L147bde.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147be2.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147be6.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L147bec.  v1:= temp @kind object;
  #L147bee.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L147bf4.  v1:= temp;
  #L147bf6.  if v0 < v1 then goto L147bfe;
  #L147bfa.  v0:= 0I;
  #L147bfc.  return v0 @kind object;
  #L147bfe.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147c02.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L147c08.  v0:= temp @kind object;
  #L147c0a.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147c0e.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L147c14.  v0:= temp @kind object;
  #L147c16.  goto L147bfc;
}
procedure `void` `moveToNext`(`com.j256.ormlite.dao.EagerForeignCollection$1` v1 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.moveToNext:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L147c28.  v0:= v1.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147c2c.  v0:= v0 + 1;
  #L147c30.  v1.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L147c34.  return @kind void;
}
procedure `java.lang.Object` `next`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L147c48.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147c4c.  v0:= v0 + 1;
  #L147c50.  v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L147c54.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147c58.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L147c5e.  v0:= temp @kind object;
  #L147c60.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147c64.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L147c6a.  v0:= temp @kind object;
  #L147c6c.  return v0 @kind object;
}
procedure `java.lang.Object` `nextThrow`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.nextThrow:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L147c80.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147c84.  v0:= v0 + 1;
  #L147c88.  v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L147c8c.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147c90.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147c94.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L147c9a.  v1:= temp @kind object;
  #L147c9c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L147ca2.  v1:= temp;
  #L147ca4.  if v0 < v1 then goto L147cac;
  #L147ca8.  v0:= 0I;
  #L147caa.  return v0 @kind object;
  #L147cac.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147cb0.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L147cb6.  v0:= temp @kind object;
  #L147cb8.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147cbc.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L147cc2.  v0:= temp @kind object;
  #L147cc4.  goto L147caa;
}
procedure `java.lang.Object` `previous`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L147cd8.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147cdc.  v0:= v0 + -1;
  #L147ce0.  v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L147ce4.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147ce8.  if v0 < 0 then goto L147d08;
  #L147cec.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147cf0.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147cf4.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L147cfa.  v1:= temp @kind object;
  #L147cfc.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L147d02.  v1:= temp;
  #L147d04.  if v0 < v1 then goto L147d0c;
  #L147d08.  v0:= 0I;
  #L147d0a.  return v0 @kind object;
  #L147d0c.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147d10.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L147d16.  v0:= temp @kind object;
  #L147d18.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147d1c.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L147d22.  v0:= temp @kind object;
  #L147d24.  goto L147d0a;
}
procedure `void` `remove`(`com.j256.ormlite.dao.EagerForeignCollection$1` v3 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L147d38.  v0:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147d3c.  if v0 >= 0 then goto L147d50;
  #L147d40.  v0:= new `java.lang.IllegalStateException`;
  #L147d44.  v1:= "next() must be called before remove()" @kind object;
  #L147d48.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L147d4e.  throw v0;
  #L147d50.  v0:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147d54.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147d58.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L147d5e.  v1:= temp @kind object;
  #L147d60.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L147d66.  v1:= temp;
  #L147d68.  if v0 < v1 then goto L147dae;
  #L147d6c.  v0:= new `java.lang.IllegalStateException`;
  #L147d70.  v1:= new `java.lang.StringBuilder`;
  #L147d74.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L147d7a.  v2:= "current results position (" @kind object;
  #L147d7e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147d84.  v1:= temp @kind object;
  #L147d86.  v2:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147d8a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L147d90.  v1:= temp @kind object;
  #L147d92.  v2:= ") is out of bounds" @kind object;
  #L147d96.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L147d9c.  v1:= temp @kind object;
  #L147d9e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L147da4.  v1:= temp @kind object;
  #L147da6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L147dac.  throw v0;
  #L147dae.  v0:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147db2.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L147db8.  v0:= temp @kind object;
  #L147dba.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147dbe.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L147dc4.  v0:= temp @kind object;
  #L147dc6.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L147dca.  v1:= v1 + -1;
  #L147dce.  v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v1;
  #L147dd2.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147dd6.  v1:= v1.`com.j256.ormlite.dao.EagerForeignCollection.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L147dda.  if v1 == 0 then goto L147dec;
  #Try_start0.  
  #L147dde.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L147de2.  v1:= v1.`com.j256.ormlite.dao.EagerForeignCollection.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L147de6.  call temp:= `delete`(v1, v0) @signature `Lcom/j256/ormlite/dao/Dao;.delete:(Ljava/lang/Object;)I` @kind interface;
  #Try_end0.  
  #L147dec.  return @kind void;
  #L147dee.  v0:= Exception @type ^`java.sql.SQLException` @kind object;
  #L147df0.  v1:= new `java.lang.RuntimeException`;
  #L147df4.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L147dfa.  throw v1;
  catch `java.sql.SQLException` @[Try_start0..Try_end0] goto L147dee;
}
