record `com.j256.ormlite.field.BaseFieldConverter` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.field.FieldConverter` @kind interface {
}
procedure `void` `<init>`(`com.j256.ormlite.field.BaseFieldConverter` v0 @kind this) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L14aae8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L14aaee.  return @kind void;
}
procedure `boolean` `isStreamType`(`com.j256.ormlite.field.BaseFieldConverter` v1 @kind this) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.isStreamType:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14ab00.  v0:= 0I;
  #L14ab02.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.BaseFieldConverter` v0 @kind this, `com.j256.ormlite.field.FieldType` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L14ab14.  return v2 @kind object;
}
procedure `java.lang.Object` `resultToJava`(`com.j256.ormlite.field.BaseFieldConverter` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.resultToJava:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14ab28.  call temp:= `resultToSqlArg`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @kind virtual;
  #L14ab2e.  v0:= temp @kind object;
  #L14ab30.  if v0 != 0 then goto L14ab38;
  #L14ab34.  v0:= 0I;
  #L14ab36.  return v0 @kind object;
  #L14ab38.  call temp:= `sqlArgToJava`(v1, v2, v0, v4) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L14ab3e.  v0:= temp @kind object;
  #L14ab40.  goto L14ab36;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.BaseFieldConverter` v0 @kind this, `com.j256.ormlite.field.FieldType` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L14ab54.  return v2 @kind object;
}
