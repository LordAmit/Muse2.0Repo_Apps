record `com.j256.ormlite.field.types.StringBytesType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `java.lang.String` `@@com.j256.ormlite.field.types.StringBytesType.DEFAULT_STRING_BYTES_CHARSET_NAME` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.j256.ormlite.field.types.StringBytesType` `@@com.j256.ormlite.field.types.StringBytesType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/StringBytesType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L154168.  v0:= new `com.j256.ormlite.field.types.StringBytesType`;
  #L15416c.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.<init>:()V` @kind direct;
  #L154172.  `@@com.j256.ormlite.field.types.StringBytesType.singleTon` @type ^`com.j256.ormlite.field.types.StringBytesType` := v0 @kind object;
  #L154176.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.StringBytesType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L154188.  v0:= `@@com.j256.ormlite.field.SqlType.BYTE_ARRAY` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15418c.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L154192.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.StringBytesType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L1541a4.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L1541aa.  return @kind void;
}
procedure `java.lang.String` `getCharsetName`(`com.j256.ormlite.field.types.StringBytesType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.getCharsetName:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1541bc.  if v2 == 0 then goto L1541cc;
  #L1541c0.  call temp:= `getFormat`(v2) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L1541c6.  v0:= temp @kind object;
  #L1541c8.  if v0 != 0 then goto L1541d2;
  #L1541cc.  v0:= "Unicode" @kind object;
  #L1541d0.  return v0 @kind object;
  #L1541d2.  call temp:= `getFormat`(v2) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L1541d8.  v0:= temp @kind object;
  #L1541da.  goto L1541d0;
}
procedure `com.j256.ormlite.field.types.StringBytesType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/StringBytesType;.getSingleton:()Lcom/j256/ormlite/field/types/StringBytesType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1541ec.  v0:= `@@com.j256.ormlite.field.types.StringBytesType.singleTon` @type ^`com.j256.ormlite.field.types.StringBytesType` @kind object;
  #L1541f0.  return v0 @kind object;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.StringBytesType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L154204.  v0:= constclass @type ^`java.lang.String` @kind object;
  #L154208.  return v0 @kind object;
}
procedure `boolean` `isArgumentHolderRequired`(`com.j256.ormlite.field.types.StringBytesType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.isArgumentHolderRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15421c.  v0:= 1I;
  #L15421e.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.StringBytesType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L154230.  v6:= (`java.lang.String`) v6 @kind object;
  #L154234.  call temp:= `getCharsetName`(v4, v5) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.getCharsetName:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind direct;
  #L15423a.  v0:= temp @kind object;
  #Try_start0.  
  #L15423c.  call temp:= `getBytes`(v6, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #Try_end0.  
  #L154242.  v0:= temp @kind object;
  #L154244.  return v0 @kind object;
  #L154246.  v1:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L154248.  v2:= new `java.lang.StringBuilder`;
  #L15424c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L154252.  v3:= "Could not convert string with charset name: " @kind object;
  #L154256.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15425c.  v2:= temp @kind object;
  #L15425e.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154264.  v0:= temp @kind object;
  #L154266.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15426c.  v0:= temp @kind object;
  #L15426e.  call temp:= `create`(v0, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L154274.  v0:= temp @kind object;
  #L154276.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[Try_start0..Try_end0] goto L154246;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.StringBytesType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L154298.  if v5 != 0 then goto L1542a0;
  #L15429c.  v0:= 0I;
  #L15429e.  return v0 @kind object;
  #Try_start0.  
  #L1542a0.  call temp:= `getCharsetName`(v3, v4) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.getCharsetName:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind direct;
  #L1542a6.  v0:= temp @kind object;
  #L1542a8.  call temp:= `getBytes`(v5, v0) @signature `Ljava/lang/String;.getBytes:(Ljava/lang/String;)[B` @kind virtual;
  #Try_end0.  
  #L1542ae.  v0:= temp @kind object;
  #L1542b0.  goto L15429e;
  #L1542b2.  v0:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L1542b4.  v1:= new `java.lang.StringBuilder`;
  #L1542b8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1542be.  v2:= "Could not convert default string: " @kind object;
  #L1542c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1542c8.  v1:= temp @kind object;
  #L1542ca.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1542d0.  v1:= temp @kind object;
  #L1542d2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1542d8.  v1:= temp @kind object;
  #L1542da.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1542e0.  v0:= temp @kind object;
  #L1542e2.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[Try_start0..Try_end0] goto L1542b2;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.StringBytesType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.String` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L154304.  v0:= new `java.sql.SQLException`;
  #L154308.  v1:= "String-bytes type cannot be converted from string to Java" @kind object;
  #L15430c.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L154312.  throw v0;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.StringBytesType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L154324.  call temp:= `getBytes`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getBytes:(I)[B` @kind interface;
  #L15432a.  v0:= temp @kind object;
  #L15432c.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.StringBytesType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L154340.  v6:= (`byte`[]) v6 @kind object;
  #L154344.  v6:= (`byte`[]) v6 @kind object;
  #L154348.  call temp:= `getCharsetName`(v4, v5) @signature `Lcom/j256/ormlite/field/types/StringBytesType;.getCharsetName:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind direct;
  #L15434e.  v1:= temp @kind object;
  #Try_start0.  
  #L154350.  v0:= new `java.lang.String`;
  #L154354.  call `<init>`(v0, v6, v1) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #Try_end0.  
  #L15435a.  return v0 @kind object;
  #L15435c.  v0:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L15435e.  v2:= new `java.lang.StringBuilder`;
  #L154362.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L154368.  v3:= "Could not convert string with charset name: " @kind object;
  #L15436c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L154372.  v2:= temp @kind object;
  #L154374.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15437a.  v1:= temp @kind object;
  #L15437c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L154382.  v1:= temp @kind object;
  #L154384.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15438a.  v0:= temp @kind object;
  #L15438c.  throw v0;
  catch `java.io.UnsupportedEncodingException` @[Try_start0..Try_end0] goto L15435c;
}
