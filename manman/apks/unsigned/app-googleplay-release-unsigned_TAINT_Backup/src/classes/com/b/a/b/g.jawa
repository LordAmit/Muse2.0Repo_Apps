record `com.b.a.b.g` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.AbstractMap` @kind class, `java.io.Serializable` @kind interface {
  `java.util.Comparator` `com.b.a.b.g.a` @AccessFlag ;
  `com.b.a.b.g$d` `com.b.a.b.g.b` @AccessFlag ;
  `int` `com.b.a.b.g.c` @AccessFlag ;
  `int` `com.b.a.b.g.d` @AccessFlag ;
  `com.b.a.b.g$d` `com.b.a.b.g.e` @AccessFlag FINAL;
  `com.b.a.b.g$a` `com.b.a.b.g.h` @AccessFlag PRIVATE;
  `com.b.a.b.g$b` `com.b.a.b.g.i` @AccessFlag PRIVATE;
}
global `boolean` `@@com.b.a.b.g.f` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.Comparator` `@@com.b.a.b.g.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L13c428.  v0:= constclass @type ^`com.b.a.b.g` @kind object;
  #L13c42c.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L13c432.  v0:= temp;
  #L13c434.  if v0 != 0 then goto L13c44e;
  #L13c438.  v0:= 1I;
  #L13c43a.  `@@com.b.a.b.g.f` @type ^`boolean` := v0 @kind boolean;
  #L13c43e.  v0:= new `com.b.a.b.g$1`;
  #L13c442.  call `<init>`(v0) @signature `Lcom/b/a/b/g$1;.<init>:()V` @kind direct;
  #L13c448.  `@@com.b.a.b.g.g` @type ^`java.util.Comparator` := v0 @kind object;
  #L13c44c.  return @kind void;
  #L13c44e.  v0:= 0I;
  #L13c450.  goto L13c43a;
}
procedure `void` `<init>`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L13c464.  v0:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L13c468.  call `<init>`(v1, v0) @signature `Lcom/b/a/b/g;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L13c46e.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.b.g` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lcom/b/a/b/g;.<init>:(Ljava/util/Comparator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L13c480.  v0:= 0I;
  #L13c482.  call `<init>`(v1) @signature `Ljava/util/AbstractMap;.<init>:()V` @kind direct;
  #L13c488.  v1.`com.b.a.b.g.c` @type ^`int` := v0;
  #L13c48c.  v1.`com.b.a.b.g.d` @type ^`int` := v0;
  #L13c490.  v0:= new `com.b.a.b.g$d`;
  #L13c494.  call `<init>`(v0) @signature `Lcom/b/a/b/g$d;.<init>:()V` @kind direct;
  #L13c49a.  v1.`com.b.a.b.g.e` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L13c49e.  if v2 == 0 then goto L13c4a8;
  #L13c4a2.  v1.`com.b.a.b.g.a` @type ^`java.util.Comparator` := v2 @kind object;
  #L13c4a6.  return @kind void;
  #L13c4a8.  v2:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L13c4ac.  goto L13c4a2;
}
procedure `void` `a`(`com.b.a.b.g` v6 @kind this, `com.b.a.b.g$d` v7 @kind object) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13c4c0.  v1:= 0I;
  #L13c4c2.  v0:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L13c4c6.  v3:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L13c4ca.  v4:= v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L13c4ce.  v5:= v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L13c4d2.  v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L13c4d6.  if v4 == 0 then goto L13c4de;
  #L13c4da.  v4.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L13c4de.  call `a`(v6, v7, v3) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L13c4e4.  v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L13c4e8.  v7.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L13c4ec.  if v0 == 0 then goto L13c52c;
  #L13c4f0.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c4f4.  v2:= v0;
  #L13c4f6.  if v4 == 0 then goto L13c530;
  #L13c4fa.  v0:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c4fe.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L13c504.  v0:= temp;
  #L13c506.  v0:= v0 + 1;
  #L13c50a.  v7.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L13c50e.  v0:= v7.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c512.  if v5 == 0 then goto L13c51a;
  #L13c516.  v1:= v5.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c51a.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L13c520.  v0:= temp;
  #L13c522.  v0:= v0 + 1;
  #L13c526.  v3.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L13c52a.  return @kind void;
  #L13c52c.  v2:= v1;
  #L13c52e.  goto L13c4f6;
  #L13c530.  v0:= v1;
  #L13c532.  goto L13c4fe;
}
procedure `void` `a`(`com.b.a.b.g` v2 @kind this, `com.b.a.b.g$d` v3 @kind object, `com.b.a.b.g$d` v4 @kind object) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L13c544.  v0:= v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` @kind object;
  #L13c548.  v1:= 0I;
  #L13c54a.  v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v1 @kind object;
  #L13c54e.  if v4 == 0 then goto L13c556;
  #L13c552.  v4.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L13c556.  if v0 == 0 then goto L13c58a;
  #L13c55a.  v1:= v0.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L13c55e.  if v1 != v3 then goto L13c568;
  #L13c562.  v0.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L13c566.  return @kind void;
  #L13c568.  v1:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L13c56c.  if v1 != 0 then goto L13c584;
  #L13c570.  v1:= v0.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L13c574.  if v1 == v3 then goto L13c584;
  #L13c578.  v0:= new `java.lang.AssertionError`;
  #L13c57c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L13c582.  throw v0;
  #L13c584.  v0.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L13c588.  goto L13c566;
  #L13c58a.  v2.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L13c58e.  goto L13c566;
}
procedure `boolean` `a`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L13c5a0.  if v2 == v3 then goto L13c5b4;
  #L13c5a4.  if v2 == 0 then goto L13c5b8;
  #L13c5a8.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13c5ae.  v0:= temp;
  #L13c5b0.  if v0 == 0 then goto L13c5b8;
  #L13c5b4.  v0:= 1I;
  #L13c5b6.  return v0;
  #L13c5b8.  v0:= 0I;
  #L13c5ba.  goto L13c5b6;
}
procedure `void` `b`(`com.b.a.b.g` v6 @kind this, `com.b.a.b.g$d` v7 @kind object) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13c5cc.  v1:= 0I;
  #L13c5ce.  v3:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L13c5d2.  v0:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L13c5d6.  v4:= v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L13c5da.  v5:= v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L13c5de.  v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L13c5e2.  if v5 == 0 then goto L13c5ea;
  #L13c5e6.  v5.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L13c5ea.  call `a`(v6, v7, v3) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L13c5f0.  v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L13c5f4.  v7.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L13c5f8.  if v0 == 0 then goto L13c638;
  #L13c5fc.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c600.  v2:= v0;
  #L13c602.  if v5 == 0 then goto L13c63c;
  #L13c606.  v0:= v5.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c60a.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L13c610.  v0:= temp;
  #L13c612.  v0:= v0 + 1;
  #L13c616.  v7.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L13c61a.  v0:= v7.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c61e.  if v4 == 0 then goto L13c626;
  #L13c622.  v1:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c626.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L13c62c.  v0:= temp;
  #L13c62e.  v0:= v0 + 1;
  #L13c632.  v3.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L13c636.  return @kind void;
  #L13c638.  v2:= v1;
  #L13c63a.  goto L13c602;
  #L13c63c.  v0:= v1;
  #L13c63e.  goto L13c60a;
}
procedure `void` `b`(`com.b.a.b.g` v9 @kind this, `com.b.a.b.g$d` v10 @kind object, `boolean` v11 ) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L13c650.  v8:= 1I;
  #L13c652.  v7:= -1I;
  #L13c654.  v1:= 0I;
  #L13c656.  if v10 == 0 then goto L13c6b0;
  #L13c65a.  v3:= v10.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L13c65e.  v4:= v10.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L13c662.  if v3 == 0 then goto L13c6b2;
  #L13c666.  v0:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c66a.  v2:= v0;
  #L13c66c.  if v4 == 0 then goto L13c6b6;
  #L13c670.  v0:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c674.  v5:= v2 - v0 @kind int;
  #L13c678.  v6:= -2I;
  #L13c67a.  if v5 != v6 then goto L13c6e8;
  #L13c67e.  v3:= v4.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L13c682.  v0:= v4.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L13c686.  if v0 == 0 then goto L13c6ba;
  #L13c68a.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c68e.  v2:= v0;
  #L13c690.  if v3 == 0 then goto L13c6be;
  #L13c694.  v0:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c698.  v0:= v0 - v2 @kind int;
  #L13c69a.  if v0 == v7 then goto L13c6a6;
  #L13c69e.  if v0 != 0 then goto L13c6c2;
  #L13c6a2.  if v11 != 0 then goto L13c6c2;
  #L13c6a6.  call `a`(v9, v10) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L13c6ac.  if v11 == 0 then goto L13c720;
  #L13c6b0.  return @kind void;
  #L13c6b2.  v2:= v1;
  #L13c6b4.  goto L13c66c;
  #L13c6b6.  v0:= v1;
  #L13c6b8.  goto L13c674;
  #L13c6ba.  v2:= v1;
  #L13c6bc.  goto L13c690;
  #L13c6be.  v0:= v1;
  #L13c6c0.  goto L13c698;
  #L13c6c2.  v2:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L13c6c6.  if v2 != 0 then goto L13c6da;
  #L13c6ca.  if v0 == v8 then goto L13c6da;
  #L13c6ce.  v0:= new `java.lang.AssertionError`;
  #L13c6d2.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L13c6d8.  throw v0;
  #L13c6da.  call `b`(v9, v4) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L13c6e0.  call `a`(v9, v10) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L13c6e6.  goto L13c6ac;
  #L13c6e8.  v4:= 2I;
  #L13c6ea.  if v5 != v4 then goto L13c754;
  #L13c6ee.  v4:= v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L13c6f2.  v0:= v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L13c6f6.  if v0 == 0 then goto L13c726;
  #L13c6fa.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c6fe.  v2:= v0;
  #L13c700.  if v4 == 0 then goto L13c72a;
  #L13c704.  v0:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c708.  v0:= v0 - v2 @kind int;
  #L13c70a.  if v0 == v8 then goto L13c716;
  #L13c70e.  if v0 != 0 then goto L13c72e;
  #L13c712.  if v11 != 0 then goto L13c72e;
  #L13c716.  call `b`(v9, v10) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L13c71c.  if v11 != 0 then goto L13c6b0;
  #L13c720.  v10:= v10.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` @kind object;
  #L13c724.  goto L13c656;
  #L13c726.  v2:= v1;
  #L13c728.  goto L13c700;
  #L13c72a.  v0:= v1;
  #L13c72c.  goto L13c708;
  #L13c72e.  v2:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L13c732.  if v2 != 0 then goto L13c746;
  #L13c736.  if v0 == v7 then goto L13c746;
  #L13c73a.  v0:= new `java.lang.AssertionError`;
  #L13c73e.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L13c744.  throw v0;
  #L13c746.  call `a`(v9, v3) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L13c74c.  call `b`(v9, v10) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L13c752.  goto L13c71c;
  #L13c754.  if v5 != 0 then goto L13c766;
  #L13c758.  v0:= v2 + 1;
  #L13c75c.  v10.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L13c760.  if v11 == 0 then goto L13c720;
  #L13c764.  goto L13c6b0;
  #L13c766.  v3:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L13c76a.  if v3 != 0 then goto L13c782;
  #L13c76e.  if v5 == v7 then goto L13c782;
  #L13c772.  if v5 == v8 then goto L13c782;
  #L13c776.  v0:= new `java.lang.AssertionError`;
  #L13c77a.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L13c780.  throw v0;
  #L13c782.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L13c788.  v0:= temp;
  #L13c78a.  v0:= v0 + 1;
  #L13c78e.  v10.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L13c792.  if v11 != 0 then goto L13c720;
  #L13c796.  goto L13c6b0;
}
procedure `com.b.a.b.g$d` `a`(`com.b.a.b.g` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L13c7a8.  v0:= 0I;
  #L13c7aa.  if v3 == 0 then goto L13c7b8;
  #L13c7ae.  v1:= 0I;
  #Try_start0.  
  #L13c7b0.  call temp:= `a`(v2, v3, v1) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Z)Lcom/b/a/b/g$d;` @kind virtual;
  #Try_end0.  
  #L13c7b6.  v0:= temp @kind object;
  #L13c7b8.  return v0 @kind object;
  #L13c7ba.  v1:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L13c7bc.  goto L13c7b8;
  catch `java.lang.ClassCastException` @[Try_start0..Try_end0] goto L13c7ba;
}
procedure `com.b.a.b.g$d` `a`(`com.b.a.b.g` v7 @kind this, `java.lang.Object` v8 @kind object, `boolean` v9 ) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Z)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13c7e0.  v1:= 0I;
  #L13c7e2.  v5:= v7.`com.b.a.b.g.a` @type ^`java.util.Comparator` @kind object;
  #L13c7e6.  v2:= v7.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` @kind object;
  #L13c7ea.  v0:= 0I;
  #L13c7ec.  if v2 == 0 then goto L13c8f6;
  #L13c7f0.  v0:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L13c7f4.  if v5 != v0 then goto L13c816;
  #L13c7f8.  v0:= v8 @kind object;
  #L13c7fa.  v0:= (`java.lang.Comparable`) v0 @kind object;
  #L13c7fe.  if v0 == 0 then goto L13c81a;
  #L13c802.  v3:= v2.`com.b.a.b.g$d.f` @type ^`java.lang.Object` @kind object;
  #L13c806.  call temp:= `compareTo`(v0, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L13c80c.  v3:= temp;
  #L13c80e.  if v3 != 0 then goto L13c828;
  #L13c812.  v1:= v2 @kind object;
  #L13c814.  return v1 @kind object;
  #L13c816.  v0:= v1 @kind object;
  #L13c818.  goto L13c7fe;
  #L13c81a.  v3:= v2.`com.b.a.b.g$d.f` @type ^`java.lang.Object` @kind object;
  #L13c81e.  call temp:= `compare`(v5, v8, v3) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L13c824.  v3:= temp;
  #L13c826.  goto L13c80e;
  #L13c828.  if v3 >= 0 then goto L13c898;
  #L13c82c.  v4:= v2.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L13c830.  if v4 != 0 then goto L13c89e;
  #L13c834.  v6:= v3;
  #L13c836.  v3:= v2 @kind object;
  #L13c838.  v2:= v6;
  #L13c83a.  if v9 == 0 then goto L13c814;
  #L13c83e.  v1:= v7.`com.b.a.b.g.e` @type ^`com.b.a.b.g$d` @kind object;
  #L13c842.  if v3 != 0 then goto L13c8d0;
  #L13c846.  v0:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L13c84a.  if v5 != v0 then goto L13c8a2;
  #L13c84e.  v0:= instanceof @variable v8 @type ^`java.lang.Comparable` @kind boolean;
  #L13c852.  if v0 != 0 then goto L13c8a2;
  #L13c856.  v0:= new `java.lang.ClassCastException`;
  #L13c85a.  v1:= new `java.lang.StringBuilder`;
  #L13c85e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13c864.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13c86a.  v2:= temp @kind object;
  #L13c86c.  call temp:= `getName`(v2) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L13c872.  v2:= temp @kind object;
  #L13c874.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c87a.  v1:= temp @kind object;
  #L13c87c.  v2:= " is not Comparable" @kind object;
  #L13c880.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13c886.  v1:= temp @kind object;
  #L13c888.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13c88e.  v1:= temp @kind object;
  #L13c890.  call `<init>`(v0, v1) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13c896.  throw v0;
  #L13c898.  v4:= v2.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L13c89c.  goto L13c830;
  #L13c89e.  v2:= v4 @kind object;
  #L13c8a0.  goto L13c7fe;
  #L13c8a2.  v0:= new `com.b.a.b.g$d`;
  #L13c8a6.  v2:= v1.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L13c8aa.  call `<init>`(v0, v3, v8, v1, v2) @signature `Lcom/b/a/b/g$d;.<init>:(Lcom/b/a/b/g$d;Ljava/lang/Object;Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L13c8b0.  v7.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L13c8b4.  v1:= v7.`com.b.a.b.g.c` @type ^`int`;
  #L13c8b8.  v1:= v1 + 1;
  #L13c8bc.  v7.`com.b.a.b.g.c` @type ^`int` := v1;
  #L13c8c0.  v1:= v7.`com.b.a.b.g.d` @type ^`int`;
  #L13c8c4.  v1:= v1 + 1;
  #L13c8c8.  v7.`com.b.a.b.g.d` @type ^`int` := v1;
  #L13c8cc.  v1:= v0 @kind object;
  #L13c8ce.  goto L13c814;
  #L13c8d0.  v0:= new `com.b.a.b.g$d`;
  #L13c8d4.  v4:= v1.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L13c8d8.  call `<init>`(v0, v3, v8, v1, v4) @signature `Lcom/b/a/b/g$d;.<init>:(Lcom/b/a/b/g$d;Ljava/lang/Object;Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L13c8de.  if v2 >= 0 then goto L13c8f0;
  #L13c8e2.  v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L13c8e6.  v1:= 1I;
  #L13c8e8.  call `b`(v7, v3, v1) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;Z)V` @kind direct;
  #L13c8ee.  goto L13c8b4;
  #L13c8f0.  v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L13c8f4.  goto L13c8e6;
  #L13c8f6.  v3:= v2 @kind object;
  #L13c8f8.  v2:= v0;
  #L13c8fa.  goto L13c83a;
}
procedure `com.b.a.b.g$d` `a`(`com.b.a.b.g` v3 @kind this, `java.util.Map$Entry` v4 @kind object) @signature `Lcom/b/a/b/g;.a:(Ljava/util/Map$Entry;)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L13c90c.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L13c912.  v0:= temp @kind object;
  #L13c914.  call temp:= `a`(v3, v0) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L13c91a.  v0:= temp @kind object;
  #L13c91c.  if v0 == 0 then goto L13c940;
  #L13c920.  v1:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L13c924.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L13c92a.  v2:= temp @kind object;
  #L13c92c.  call temp:= `a`(v3, v1, v2) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind direct;
  #L13c932.  v1:= temp;
  #L13c934.  if v1 == 0 then goto L13c940;
  #L13c938.  v1:= 1I;
  #L13c93a.  if v1 == 0 then goto L13c944;
  #L13c93e.  return v0 @kind object;
  #L13c940.  v1:= 0I;
  #L13c942.  goto L13c93a;
  #L13c944.  v0:= 0I;
  #L13c946.  goto L13c93e;
}
procedure `void` `a`(`com.b.a.b.g` v6 @kind this, `com.b.a.b.g$d` v7 @kind object, `boolean` v8 ) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13c958.  v2:= 0I;
  #L13c95a.  v5:= 0I;
  #L13c95c.  if v8 == 0 then goto L13c978;
  #L13c960.  v0:= v7.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L13c964.  v1:= v7.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` @kind object;
  #L13c968.  v0.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` := v1 @kind object;
  #L13c96c.  v0:= v7.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` @kind object;
  #L13c970.  v1:= v7.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L13c974.  v0.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` := v1 @kind object;
  #L13c978.  v0:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L13c97c.  v1:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L13c980.  v3:= v7.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` @kind object;
  #L13c984.  if v0 == 0 then goto L13c9f8;
  #L13c988.  if v1 == 0 then goto L13c9f8;
  #L13c98c.  v3:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c990.  v4:= v1.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c994.  if v3 <= v4 then goto L13c9ee;
  #L13c998.  call temp:= `b`(v0) @signature `Lcom/b/a/b/g$d;.b:()Lcom/b/a/b/g$d;` @kind virtual;
  #L13c99e.  v0:= temp @kind object;
  #L13c9a0.  call `a`(v6, v0, v2) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Z)V` @kind virtual;
  #L13c9a6.  v3:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L13c9aa.  if v3 == 0 then goto L13ca3e;
  #L13c9ae.  v1:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c9b2.  v0.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L13c9b6.  v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L13c9ba.  v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L13c9be.  v3:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L13c9c2.  if v3 == 0 then goto L13c9d6;
  #L13c9c6.  v2:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L13c9ca.  v0.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L13c9ce.  v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L13c9d2.  v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L13c9d6.  call temp:= `max`(v1, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L13c9dc.  v1:= temp;
  #L13c9de.  v1:= v1 + 1;
  #L13c9e2.  v0.`com.b.a.b.g$d.h` @type ^`int` := v1;
  #L13c9e6.  call `a`(v6, v7, v0) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L13c9ec.  return @kind void;
  #L13c9ee.  call temp:= `a`(v1) @signature `Lcom/b/a/b/g$d;.a:()Lcom/b/a/b/g$d;` @kind virtual;
  #L13c9f4.  v0:= temp @kind object;
  #L13c9f6.  goto L13c9a0;
  #L13c9f8.  if v0 == 0 then goto L13ca26;
  #L13c9fc.  call `a`(v6, v7, v0) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L13ca02.  v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L13ca06.  call `b`(v6, v3, v2) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;Z)V` @kind direct;
  #L13ca0c.  v0:= v6.`com.b.a.b.g.c` @type ^`int`;
  #L13ca10.  v0:= v0 + -1;
  #L13ca14.  v6.`com.b.a.b.g.c` @type ^`int` := v0;
  #L13ca18.  v0:= v6.`com.b.a.b.g.d` @type ^`int`;
  #L13ca1c.  v0:= v0 + 1;
  #L13ca20.  v6.`com.b.a.b.g.d` @type ^`int` := v0;
  #L13ca24.  goto L13c9ec;
  #L13ca26.  if v1 == 0 then goto L13ca36;
  #L13ca2a.  call `a`(v6, v7, v1) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L13ca30.  v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L13ca34.  goto L13ca06;
  #L13ca36.  call `a`(v6, v7, v5) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L13ca3c.  goto L13ca06;
  #L13ca3e.  v1:= v2;
  #L13ca40.  goto L13c9be;
}
procedure `com.b.a.b.g$d` `b`(`com.b.a.b.g` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/b/g;.b:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L13ca54.  call temp:= `a`(v2, v3) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L13ca5a.  v0:= temp @kind object;
  #L13ca5c.  if v0 == 0 then goto L13ca68;
  #L13ca60.  v1:= 1I;
  #L13ca62.  call `a`(v2, v0, v1) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Z)V` @kind virtual;
  #L13ca68.  return v0 @kind object;
}
procedure `void` `clear`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13ca7c.  v0:= 0I;
  #L13ca7e.  v1.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L13ca82.  v0:= 0I;
  #L13ca84.  v1.`com.b.a.b.g.c` @type ^`int` := v0;
  #L13ca88.  v0:= v1.`com.b.a.b.g.d` @type ^`int`;
  #L13ca8c.  v0:= v0 + 1;
  #L13ca90.  v1.`com.b.a.b.g.d` @type ^`int` := v0;
  #L13ca94.  v0:= v1.`com.b.a.b.g.e` @type ^`com.b.a.b.g$d` @kind object;
  #L13ca98.  v0.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L13ca9c.  v0.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L13caa0.  return @kind void;
}
procedure `boolean` `containsKey`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13cab4.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L13caba.  v0:= temp @kind object;
  #L13cabc.  if v0 == 0 then goto L13cac4;
  #L13cac0.  v0:= 1I;
  #L13cac2.  return v0;
  #L13cac4.  v0:= 0I;
  #L13cac6.  goto L13cac2;
}
procedure `java.util.Set` `entrySet`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13cad8.  v0:= v1.`com.b.a.b.g.h` @type ^`com.b.a.b.g$a` @kind object;
  #L13cadc.  if v0 == 0 then goto L13cae2;
  #L13cae0.  return v0 @kind object;
  #L13cae2.  v0:= new `com.b.a.b.g$a`;
  #L13cae6.  call `<init>`(v0, v1) @signature `Lcom/b/a/b/g$a;.<init>:(Lcom/b/a/b/g;)V` @kind direct;
  #L13caec.  v1.`com.b.a.b.g.h` @type ^`com.b.a.b.g$a` := v0 @kind object;
  #L13caf0.  goto L13cae0;
}
procedure `java.lang.Object` `get`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13cb04.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L13cb0a.  v0:= temp @kind object;
  #L13cb0c.  if v0 == 0 then goto L13cb16;
  #L13cb10.  v0:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L13cb14.  return v0 @kind object;
  #L13cb16.  v0:= 0I;
  #L13cb18.  goto L13cb14;
}
procedure `java.util.Set` `keySet`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13cb2c.  v0:= v1.`com.b.a.b.g.i` @type ^`com.b.a.b.g$b` @kind object;
  #L13cb30.  if v0 == 0 then goto L13cb36;
  #L13cb34.  return v0 @kind object;
  #L13cb36.  v0:= new `com.b.a.b.g$b`;
  #L13cb3a.  call `<init>`(v0, v1) @signature `Lcom/b/a/b/g$b;.<init>:(Lcom/b/a/b/g;)V` @kind direct;
  #L13cb40.  v1.`com.b.a.b.g.i` @type ^`com.b.a.b.g$b` := v0 @kind object;
  #L13cb44.  goto L13cb34;
}
procedure `java.lang.Object` `put`(`com.b.a.b.g` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/b/a/b/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13cb58.  if v3 != 0 then goto L13cb6c;
  #L13cb5c.  v0:= new `java.lang.NullPointerException`;
  #L13cb60.  v1:= "key == null" @kind object;
  #L13cb64.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13cb6a.  throw v0;
  #L13cb6c.  v0:= 1I;
  #L13cb6e.  call temp:= `a`(v2, v3, v0) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Z)Lcom/b/a/b/g$d;` @kind virtual;
  #L13cb74.  v0:= temp @kind object;
  #L13cb76.  v1:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L13cb7a.  v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` := v4 @kind object;
  #L13cb7e.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13cb90.  call temp:= `b`(v1, v2) @signature `Lcom/b/a/b/g;.b:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L13cb96.  v0:= temp @kind object;
  #L13cb98.  if v0 == 0 then goto L13cba2;
  #L13cb9c.  v0:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L13cba0.  return v0 @kind object;
  #L13cba2.  v0:= 0I;
  #L13cba4.  goto L13cba0;
}
procedure `int` `size`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13cbb8.  v0:= v1.`com.b.a.b.g.c` @type ^`int`;
  #L13cbbc.  return v0;
}
