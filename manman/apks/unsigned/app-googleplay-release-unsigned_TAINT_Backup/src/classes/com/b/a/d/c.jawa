record `com.b.a.d.c` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface, `java.io.Flushable` @kind interface {
  `java.io.Writer` `com.b.a.d.c.c` @AccessFlag PRIVATE_FINAL;
  `int`[] `com.b.a.d.c.d` @AccessFlag PRIVATE;
  `int` `com.b.a.d.c.e` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.c.f` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.c.g` @AccessFlag PRIVATE;
  `boolean` `com.b.a.d.c.h` @AccessFlag PRIVATE;
  `boolean` `com.b.a.d.c.i` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.c.j` @AccessFlag PRIVATE;
  `boolean` `com.b.a.d.c.k` @AccessFlag PRIVATE;
}
global `java.lang.String`[] `@@com.b.a.d.c.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String`[] `@@com.b.a.d.c.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/d/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L135874.  v1:= 0I;
  #L135876.  v0:= 128I;
  #L13587a.  v0:= new `java.lang.String`[v0];
  #L13587e.  `@@com.b.a.d.c.a` @type ^`java.lang.String`[] := v0 @kind object;
  #L135882.  v0:= v1;
  #L135884.  v2:= 31I;
  #L135888.  if v0 > v2 then goto L1358b8;
  #L13588c.  v2:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L135890.  v3:= "\\u%04x" @kind object;
  #L135894.  v4:= 1I;
  #L135896.  v4:= new `java.lang.Object`[v4];
  #L13589a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1358a0.  v5:= temp @kind object;
  #L1358a2.  v4[v1]:= v5 @kind object;
  #L1358a6.  call temp:= `format`(v3, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L1358ac.  v3:= temp @kind object;
  #L1358ae.  v2[v0]:= v3 @kind object;
  #L1358b2.  v0:= v0 + 1;
  #L1358b6.  goto L135884;
  #L1358b8.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L1358bc.  v1:= 34I;
  #L1358c0.  v2:= "\\\"" @kind object;
  #L1358c4.  v0[v1]:= v2 @kind object;
  #L1358c8.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L1358cc.  v1:= 92I;
  #L1358d0.  v2:= "\\\\" @kind object;
  #L1358d4.  v0[v1]:= v2 @kind object;
  #L1358d8.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L1358dc.  v1:= 9I;
  #L1358e0.  v2:= "\\t" @kind object;
  #L1358e4.  v0[v1]:= v2 @kind object;
  #L1358e8.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L1358ec.  v1:= 8I;
  #L1358f0.  v2:= "\\b" @kind object;
  #L1358f4.  v0[v1]:= v2 @kind object;
  #L1358f8.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L1358fc.  v1:= 10I;
  #L135900.  v2:= "\\n" @kind object;
  #L135904.  v0[v1]:= v2 @kind object;
  #L135908.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L13590c.  v1:= 13I;
  #L135910.  v2:= "\\r" @kind object;
  #L135914.  v0[v1]:= v2 @kind object;
  #L135918.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L13591c.  v1:= 12I;
  #L135920.  v2:= "\\f" @kind object;
  #L135924.  v0[v1]:= v2 @kind object;
  #L135928.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L13592c.  call temp:= `clone`(v0) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L135932.  v0:= temp @kind object;
  #L135934.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L135938.  `@@com.b.a.d.c.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L13593c.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L135940.  v1:= 60I;
  #L135944.  v2:= "\\u003c" @kind object;
  #L135948.  v0[v1]:= v2 @kind object;
  #L13594c.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L135950.  v1:= 62I;
  #L135954.  v2:= "\\u003e" @kind object;
  #L135958.  v0[v1]:= v2 @kind object;
  #L13595c.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L135960.  v1:= 38I;
  #L135964.  v2:= "\\u0026" @kind object;
  #L135968.  v0[v1]:= v2 @kind object;
  #L13596c.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L135970.  v1:= 61I;
  #L135974.  v2:= "\\u003d" @kind object;
  #L135978.  v0[v1]:= v2 @kind object;
  #L13597c.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L135980.  v1:= 39I;
  #L135984.  v2:= "\\u0027" @kind object;
  #L135988.  v0[v1]:= v2 @kind object;
  #L13598c.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.d.c` v2 @kind this, `java.io.Writer` v3 @kind object) @signature `Lcom/b/a/d/c;.<init>:(Ljava/io/Writer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1359a0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1359a6.  v0:= 32I;
  #L1359aa.  v0:= new `int`[v0];
  #L1359ae.  v2.`com.b.a.d.c.d` @type ^`int`[] := v0 @kind object;
  #L1359b2.  v0:= 0I;
  #L1359b4.  v2.`com.b.a.d.c.e` @type ^`int` := v0;
  #L1359b8.  v0:= 6I;
  #L1359ba.  call `a`(v2, v0) @signature `Lcom/b/a/d/c;.a:(I)V` @kind direct;
  #L1359c0.  v0:= ":" @kind object;
  #L1359c4.  v2.`com.b.a.d.c.g` @type ^`java.lang.String` := v0 @kind object;
  #L1359c8.  v0:= 1I;
  #L1359ca.  v2.`com.b.a.d.c.k` @type ^`boolean` := v0 @kind boolean;
  #L1359ce.  if v3 != 0 then goto L1359e2;
  #L1359d2.  v0:= new `java.lang.NullPointerException`;
  #L1359d6.  v1:= "out == null" @kind object;
  #L1359da.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1359e0.  throw v0;
  #L1359e2.  v2.`com.b.a.d.c.c` @type ^`java.io.Writer` := v3 @kind object;
  #L1359e6.  return @kind void;
}
procedure `int` `a`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.a:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1359f8.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L1359fc.  if v0 != 0 then goto L135a10;
  #L135a00.  v0:= new `java.lang.IllegalStateException`;
  #L135a04.  v1:= "JsonWriter is closed." @kind object;
  #L135a08.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L135a0e.  throw v0;
  #L135a10.  v0:= v2.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L135a14.  v1:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L135a18.  v1:= v1 + -1;
  #L135a1c.  v0:= v0[v1];
  #L135a20.  return v0;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v3 @kind this, `int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Lcom/b/a/d/c;.a:(IILjava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L135a34.  call temp:= `a`(v3) @signature `Lcom/b/a/d/c;.a:()I` @kind direct;
  #L135a3a.  v0:= temp;
  #L135a3c.  if v0 == v5 then goto L135a54;
  #L135a40.  if v0 == v4 then goto L135a54;
  #L135a44.  v0:= new `java.lang.IllegalStateException`;
  #L135a48.  v1:= "Nesting problem." @kind object;
  #L135a4c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L135a52.  throw v0;
  #L135a54.  v1:= v3.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L135a58.  if v1 == 0 then goto L135a92;
  #L135a5c.  v0:= new `java.lang.IllegalStateException`;
  #L135a60.  v1:= new `java.lang.StringBuilder`;
  #L135a64.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L135a6a.  v2:= "Dangling name: " @kind object;
  #L135a6e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135a74.  v1:= temp @kind object;
  #L135a76.  v2:= v3.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L135a7a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135a80.  v1:= temp @kind object;
  #L135a82.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L135a88.  v1:= temp @kind object;
  #L135a8a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L135a90.  throw v0;
  #L135a92.  v1:= v3.`com.b.a.d.c.e` @type ^`int`;
  #L135a96.  v1:= v1 + -1;
  #L135a9a.  v3.`com.b.a.d.c.e` @type ^`int` := v1;
  #L135a9e.  if v0 != v5 then goto L135aa8;
  #L135aa2.  call `j`(v3) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L135aa8.  v0:= v3.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135aac.  call `write`(v0, v6) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L135ab2.  return v3 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lcom/b/a/d/c;.a:(ILjava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L135ac4.  call `l`(v1) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L135aca.  call `a`(v1, v2) @signature `Lcom/b/a/d/c;.a:(I)V` @kind direct;
  #L135ad0.  v0:= v1.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135ad4.  call `write`(v0, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L135ada.  return v1 @kind object;
}
procedure `void` `a`(`com.b.a.d.c` v4 @kind this, `int` v5 ) @signature `Lcom/b/a/d/c;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L135aec.  v3:= 0I;
  #L135aee.  v0:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L135af2.  v1:= v4.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L135af6.  v1:= length @variable v1;
  #L135af8.  if v0 != v1 then goto L135b1a;
  #L135afc.  v0:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L135b00.  v0:= v0 * 2;
  #L135b04.  v0:= new `int`[v0];
  #L135b08.  v1:= v4.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L135b0c.  v2:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L135b10.  call `arraycopy`(v1, v3, v0, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L135b16.  v4.`com.b.a.d.c.d` @type ^`int`[] := v0 @kind object;
  #L135b1a.  v0:= v4.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L135b1e.  v1:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L135b22.  v2:= v1 + 1;
  #L135b26.  v4.`com.b.a.d.c.e` @type ^`int` := v2;
  #L135b2a.  v0[v1]:= v5;
  #L135b2e.  return @kind void;
}
procedure `void` `b`(`com.b.a.d.c` v2 @kind this, `int` v3 ) @signature `Lcom/b/a/d/c;.b:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L135b40.  v0:= v2.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L135b44.  v1:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L135b48.  v1:= v1 + -1;
  #L135b4c.  v0[v1]:= v3;
  #L135b50.  return @kind void;
}
procedure `void` `c`(`com.b.a.d.c` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lcom/b/a/d/c;.c:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L135b64.  v1:= 0I;
  #L135b66.  v0:= v7.`com.b.a.d.c.i` @type ^`boolean` @kind boolean;
  #L135b6a.  if v0 == 0 then goto L135bae;
  #L135b6e.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L135b72.  v2:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135b76.  v3:= "\"" @kind object;
  #L135b7a.  call `write`(v2, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L135b80.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L135b86.  v4:= temp;
  #L135b88.  v3:= v1;
  #L135b8a.  if v3 >= v4 then goto L135bf0;
  #L135b8e.  call temp:= `charAt`(v8, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L135b94.  v2:= temp;
  #L135b96.  v5:= 128I;
  #L135b9a.  if v2 >= v5 then goto L135bb4;
  #L135b9e.  v2:= v0[v2] @kind object;
  #L135ba2.  if v2 != 0 then goto L135bc0;
  #L135ba6.  v2:= v3 + 1;
  #L135baa.  v3:= v2;
  #L135bac.  goto L135b8a;
  #L135bae.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L135bb2.  goto L135b72;
  #L135bb4.  v5:= 8232I;
  #L135bb8.  if v2 != v5 then goto L135be2;
  #L135bbc.  v2:= "\\u2028" @kind object;
  #L135bc0.  if v1 >= v3 then goto L135bd2;
  #L135bc4.  v5:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135bc8.  v6:= v3 - v1 @kind int;
  #L135bcc.  call `write`(v5, v8, v1, v6) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L135bd2.  v1:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135bd6.  call `write`(v1, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L135bdc.  v1:= v3 + 1;
  #L135be0.  goto L135ba6;
  #L135be2.  v5:= 8233I;
  #L135be6.  if v2 != v5 then goto L135ba6;
  #L135bea.  v2:= "\\u2029" @kind object;
  #L135bee.  goto L135bc0;
  #L135bf0.  if v1 >= v4 then goto L135c02;
  #L135bf4.  v0:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135bf8.  v2:= v4 - v1 @kind int;
  #L135bfc.  call `write`(v0, v8, v1, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L135c02.  v0:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135c06.  v1:= "\"" @kind object;
  #L135c0a.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L135c10.  return @kind void;
}
procedure `void` `i`(`com.b.a.d.c` v1 @kind this) @signature `Lcom/b/a/d/c;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L135c24.  v0:= v1.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L135c28.  if v0 == 0 then goto L135c42;
  #L135c2c.  call `k`(v1) @signature `Lcom/b/a/d/c;.k:()V` @kind direct;
  #L135c32.  v0:= v1.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L135c36.  call `c`(v1, v0) @signature `Lcom/b/a/d/c;.c:(Ljava/lang/String;)V` @kind direct;
  #L135c3c.  v0:= 0I;
  #L135c3e.  v1.`com.b.a.d.c.j` @type ^`java.lang.String` := v0 @kind object;
  #L135c42.  return @kind void;
}
procedure `void` `j`(`com.b.a.d.c` v4 @kind this) @signature `Lcom/b/a/d/c;.j:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L135c54.  v0:= v4.`com.b.a.d.c.f` @type ^`java.lang.String` @kind object;
  #L135c58.  if v0 != 0 then goto L135c5e;
  #L135c5c.  return @kind void;
  #L135c5e.  v0:= v4.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135c62.  v1:= "\n" @kind object;
  #L135c66.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L135c6c.  v0:= 1I;
  #L135c6e.  v1:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L135c72.  if v0 >= v1 then goto L135c5c;
  #L135c76.  v2:= v4.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135c7a.  v3:= v4.`com.b.a.d.c.f` @type ^`java.lang.String` @kind object;
  #L135c7e.  call `write`(v2, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L135c84.  v0:= v0 + 1;
  #L135c88.  goto L135c72;
}
procedure `void` `k`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.k:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L135c9c.  call temp:= `a`(v2) @signature `Lcom/b/a/d/c;.a:()I` @kind direct;
  #L135ca2.  v0:= temp;
  #L135ca4.  v1:= 5I;
  #L135ca6.  if v0 != v1 then goto L135cc8;
  #L135caa.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135cae.  v1:= 44I;
  #L135cb2.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L135cb8.  call `j`(v2) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L135cbe.  v0:= 4I;
  #L135cc0.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L135cc6.  return @kind void;
  #L135cc8.  v1:= 3I;
  #L135cca.  if v0 == v1 then goto L135cb8;
  #L135cce.  v0:= new `java.lang.IllegalStateException`;
  #L135cd2.  v1:= "Nesting problem." @kind object;
  #L135cd6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L135cdc.  throw v0;
}
procedure `void` `l`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.l:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L135cf0.  call temp:= `a`(v2) @signature `Lcom/b/a/d/c;.a:()I` @kind direct;
  #L135cf6.  v0:= temp;
  #L135cf8.  goto L135d70;
  #L135cfe.  v0:= new `java.lang.IllegalStateException`;
  #L135d02.  v1:= "Nesting problem." @kind object;
  #L135d06.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L135d0c.  throw v0;
  #L135d0e.  v0:= v2.`com.b.a.d.c.h` @type ^`boolean` @kind boolean;
  #L135d12.  if v0 != 0 then goto L135d26;
  #L135d16.  v0:= new `java.lang.IllegalStateException`;
  #L135d1a.  v1:= "JSON must have only one top-level value." @kind object;
  #L135d1e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L135d24.  throw v0;
  #L135d26.  v0:= 7I;
  #L135d28.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L135d2e.  return @kind void;
  #L135d30.  v0:= 2I;
  #L135d32.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L135d38.  call `j`(v2) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L135d3e.  goto L135d2e;
  #L135d40.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135d44.  v1:= 44I;
  #L135d48.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(C)Ljava/io/Writer;` @kind virtual;
  #L135d4e.  call `j`(v2) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L135d54.  goto L135d2e;
  #L135d56.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135d5a.  v1:= v2.`com.b.a.d.c.g` @type ^`java.lang.String` @kind object;
  #L135d5e.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L135d64.  v0:= 5I;
  #L135d66.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L135d6c.  goto L135d2e;
  #L135d6e.  
  #L135d70.  switch v0
                  | 1 => goto L135d30
                  | 2 => goto L135d40
                  | 3 => goto L135cfe
                  | 4 => goto L135d56
                  | 5 => goto L135cfe
                  | 6 => goto L135d26
                  | 7 => goto L135d0e
                  | else => goto L135cfe;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v3 @kind this, `long` v4 ) @signature `Lcom/b/a/d/c;.a:(J)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L135da4.  call `i`(v3) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L135daa.  call `l`(v3) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L135db0.  v0:= v3.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135db4.  call temp:= `toString`(v4) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L135dba.  v1:= temp @kind object;
  #L135dbc.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L135dc2.  return v3 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v2 @kind this, `java.lang.Boolean` v3 @kind object) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/Boolean;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L135dd4.  if v3 != 0 then goto L135de2;
  #L135dd8.  call temp:= `f`(v2) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L135dde.  v2:= temp @kind object;
  #L135de0.  return v2 @kind object;
  #L135de2.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L135de8.  call `l`(v2) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L135dee.  v1:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135df2.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L135df8.  v0:= temp;
  #L135dfa.  if v0 == 0 then goto L135e0a;
  #L135dfe.  v0:= "true" @kind object;
  #L135e02.  call `write`(v1, v0) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L135e08.  goto L135de0;
  #L135e0a.  v0:= "false" @kind object;
  #L135e0e.  goto L135e02;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v3 @kind this, `java.lang.Number` v4 @kind object) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/Number;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L135e20.  if v4 != 0 then goto L135e2e;
  #L135e24.  call temp:= `f`(v3) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L135e2a.  v3:= temp @kind object;
  #L135e2c.  return v3 @kind object;
  #L135e2e.  call `i`(v3) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L135e34.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L135e3a.  v0:= temp @kind object;
  #L135e3c.  v1:= v3.`com.b.a.d.c.h` @type ^`boolean` @kind boolean;
  #L135e40.  if v1 != 0 then goto L135ea6;
  #L135e44.  v1:= "-Infinity" @kind object;
  #L135e48.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L135e4e.  v1:= temp;
  #L135e50.  if v1 != 0 then goto L135e74;
  #L135e54.  v1:= "Infinity" @kind object;
  #L135e58.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L135e5e.  v1:= temp;
  #L135e60.  if v1 != 0 then goto L135e74;
  #L135e64.  v1:= "NaN" @kind object;
  #L135e68.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L135e6e.  v1:= temp;
  #L135e70.  if v1 == 0 then goto L135ea6;
  #L135e74.  v0:= new `java.lang.IllegalArgumentException`;
  #L135e78.  v1:= new `java.lang.StringBuilder`;
  #L135e7c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L135e82.  v2:= "Numeric values must be finite, but was " @kind object;
  #L135e86.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135e8c.  v1:= temp @kind object;
  #L135e8e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135e94.  v1:= temp @kind object;
  #L135e96.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L135e9c.  v1:= temp @kind object;
  #L135e9e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L135ea4.  throw v0;
  #L135ea6.  call `l`(v3) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L135eac.  v1:= v3.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135eb0.  call temp:= `append`(v1, v0) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L135eb6.  goto L135e2c;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L135ec8.  if v3 != 0 then goto L135edc;
  #L135ecc.  v0:= new `java.lang.NullPointerException`;
  #L135ed0.  v1:= "name == null" @kind object;
  #L135ed4.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L135eda.  throw v0;
  #L135edc.  v0:= v2.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L135ee0.  if v0 == 0 then goto L135ef0;
  #L135ee4.  v0:= new `java.lang.IllegalStateException`;
  #L135ee8.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L135eee.  throw v0;
  #L135ef0.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L135ef4.  if v0 != 0 then goto L135f08;
  #L135ef8.  v0:= new `java.lang.IllegalStateException`;
  #L135efc.  v1:= "JsonWriter is closed." @kind object;
  #L135f00.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L135f06.  throw v0;
  #L135f08.  v2.`com.b.a.d.c.j` @type ^`java.lang.String` := v3 @kind object;
  #L135f0c.  return v2 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v2 @kind this, `boolean` v3 ) @signature `Lcom/b/a/d/c;.a:(Z)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L135f20.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L135f26.  call `l`(v2) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L135f2c.  v1:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135f30.  if v3 == 0 then goto L135f40;
  #L135f34.  v0:= "true" @kind object;
  #L135f38.  call `write`(v1, v0) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L135f3e.  return v2 @kind object;
  #L135f40.  v0:= "false" @kind object;
  #L135f44.  goto L135f38;
}
procedure `com.b.a.d.c` `b`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.b:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L135f58.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L135f5e.  v0:= 1I;
  #L135f60.  v1:= "[" @kind object;
  #L135f64.  call temp:= `a`(v2, v0, v1) @signature `Lcom/b/a/d/c;.a:(ILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L135f6a.  v0:= temp @kind object;
  #L135f6c.  return v0 @kind object;
}
procedure `com.b.a.d.c` `b`(`com.b.a.d.c` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/b/a/d/c;.b:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;

  #L135f80.  if v1 != 0 then goto L135f8e;
  #L135f84.  call temp:= `f`(v0) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L135f8a.  v0:= temp @kind object;
  #L135f8c.  return v0 @kind object;
  #L135f8e.  call `i`(v0) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L135f94.  call `l`(v0) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L135f9a.  call `c`(v0, v1) @signature `Lcom/b/a/d/c;.c:(Ljava/lang/String;)V` @kind direct;
  #L135fa0.  goto L135f8c;
}
procedure `void` `b`(`com.b.a.d.c` v0 @kind this, `boolean` v1 ) @signature `Lcom/b/a/d/c;.b:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L135fb4.  v0.`com.b.a.d.c.h` @type ^`boolean` := v1 @kind boolean;
  #L135fb8.  return @kind void;
}
procedure `com.b.a.d.c` `c`(`com.b.a.d.c` v3 @kind this) @signature `Lcom/b/a/d/c;.c:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L135fcc.  v0:= 1I;
  #L135fce.  v1:= 2I;
  #L135fd0.  v2:= "]" @kind object;
  #L135fd4.  call temp:= `a`(v3, v0, v1, v2) @signature `Lcom/b/a/d/c;.a:(IILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L135fda.  v0:= temp @kind object;
  #L135fdc.  return v0 @kind object;
}
procedure `void` `close`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L135ff0.  v1:= 1I;
  #L135ff2.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L135ff6.  call `close`(v0) @signature `Ljava/io/Writer;.close:()V` @kind virtual;
  #L135ffc.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L136000.  if v0 > v1 then goto L13601a;
  #L136004.  if v0 != v1 then goto L13602a;
  #L136008.  v1:= v2.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L13600c.  v0:= v0 + -1;
  #L136010.  v0:= v1[v0];
  #L136014.  v1:= 7I;
  #L136016.  if v0 == v1 then goto L13602a;
  #L13601a.  v0:= new `java.io.IOException`;
  #L13601e.  v1:= "Incomplete document" @kind object;
  #L136022.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L136028.  throw v0;
  #L13602a.  v0:= 0I;
  #L13602c.  v2.`com.b.a.d.c.e` @type ^`int` := v0;
  #L136030.  return @kind void;
}
procedure `com.b.a.d.c` `d`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.d:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L136044.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L13604a.  v0:= 3I;
  #L13604c.  v1:= "{" @kind object;
  #L136050.  call temp:= `a`(v2, v0, v1) @signature `Lcom/b/a/d/c;.a:(ILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L136056.  v0:= temp @kind object;
  #L136058.  return v0 @kind object;
}
procedure `com.b.a.d.c` `e`(`com.b.a.d.c` v3 @kind this) @signature `Lcom/b/a/d/c;.e:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13606c.  v0:= 3I;
  #L13606e.  v1:= 5I;
  #L136070.  v2:= "}" @kind object;
  #L136074.  call temp:= `a`(v3, v0, v1, v2) @signature `Lcom/b/a/d/c;.a:(IILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L13607a.  v0:= temp @kind object;
  #L13607c.  return v0 @kind object;
}
procedure `com.b.a.d.c` `f`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L136090.  v0:= v2.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L136094.  if v0 == 0 then goto L1360a6;
  #L136098.  v0:= v2.`com.b.a.d.c.k` @type ^`boolean` @kind boolean;
  #L13609c.  if v0 == 0 then goto L1360bc;
  #L1360a0.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L1360a6.  call `l`(v2) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L1360ac.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L1360b0.  v1:= "null" @kind object;
  #L1360b4.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L1360ba.  return v2 @kind object;
  #L1360bc.  v0:= 0I;
  #L1360be.  v2.`com.b.a.d.c.j` @type ^`java.lang.String` := v0 @kind object;
  #L1360c2.  goto L1360ba;
}
procedure `void` `flush`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1360d4.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L1360d8.  if v0 != 0 then goto L1360ec;
  #L1360dc.  v0:= new `java.lang.IllegalStateException`;
  #L1360e0.  v1:= "JsonWriter is closed." @kind object;
  #L1360e4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1360ea.  throw v0;
  #L1360ec.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L1360f0.  call `flush`(v0) @signature `Ljava/io/Writer;.flush:()V` @kind virtual;
  #L1360f6.  return @kind void;
}
procedure `boolean` `g`(`com.b.a.d.c` v1 @kind this) @signature `Lcom/b/a/d/c;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L136108.  v0:= v1.`com.b.a.d.c.h` @type ^`boolean` @kind boolean;
  #L13610c.  return v0;
}
procedure `boolean` `h`(`com.b.a.d.c` v1 @kind this) @signature `Lcom/b/a/d/c;.h:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L136120.  v0:= v1.`com.b.a.d.c.k` @type ^`boolean` @kind boolean;
  #L136124.  return v0;
}
