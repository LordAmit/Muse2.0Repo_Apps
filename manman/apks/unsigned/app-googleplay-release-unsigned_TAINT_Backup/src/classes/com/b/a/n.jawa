record `com.b.a.n` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.l` @kind class {
}
global `com.b.a.n` `@@com.b.a.n.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L13ee84.  v0:= new `com.b.a.n`;
  #L13ee88.  call `<init>`(v0) @signature `Lcom/b/a/n;.<init>:()V` @kind direct;
  #L13ee8e.  `@@com.b.a.n.a` @type ^`com.b.a.n` := v0 @kind object;
  #L13ee92.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.n` v0 @kind this) @signature `Lcom/b/a/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L13eea4.  call `<init>`(v0) @signature `Lcom/b/a/l;.<init>:()V` @kind direct;
  #L13eeaa.  return @kind void;
}
procedure `boolean` `equals`(`com.b.a.n` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/n;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13eebc.  if v1 == v2 then goto L13eec8;
  #L13eec0.  v0:= instanceof @variable v2 @type ^`com.b.a.n` @kind boolean;
  #L13eec4.  if v0 == 0 then goto L13eecc;
  #L13eec8.  v0:= 1I;
  #L13eeca.  return v0;
  #L13eecc.  v0:= 0I;
  #L13eece.  goto L13eeca;
}
procedure `int` `hashCode`(`com.b.a.n` v1 @kind this) @signature `Lcom/b/a/n;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13eee0.  v0:= constclass @type ^`com.b.a.n` @kind object;
  #L13eee4.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L13eeea.  v0:= temp;
  #L13eeec.  return v0;
}
