record `com.b.a.b.b$c` @kind class @AccessFlag FINAL extends `java.io.Serializable` @kind interface, `java.lang.reflect.WildcardType` @kind interface {
  `java.lang.reflect.Type` `com.b.a.b.b$c.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `com.b.a.b.b$c.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.b.b$c` v4 @kind this, `java.lang.reflect.Type`[] v5 @kind object, `java.lang.reflect.Type`[] v6 @kind object) @signature `Lcom/b/a/b/b$c;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13a564.  v1:= 1I;
  #L13a566.  v2:= 0I;
  #L13a568.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13a56e.  v0:= length @variable v6;
  #L13a570.  if v0 > v1 then goto L13a5d0;
  #L13a574.  v0:= v1;
  #L13a576.  call `a`(v0) @signature `Lcom/b/a/b/a;.a:(Z)V` @kind static;
  #L13a57c.  v0:= length @variable v5;
  #L13a57e.  if v0 != v1 then goto L13a5d4;
  #L13a582.  v0:= v1;
  #L13a584.  call `a`(v0) @signature `Lcom/b/a/b/a;.a:(Z)V` @kind static;
  #L13a58a.  v0:= length @variable v6;
  #L13a58c.  if v0 != v1 then goto L13a5dc;
  #L13a590.  v0:= v6[v2] @kind object;
  #L13a594.  call temp:= `a`(v0) @signature `Lcom/b/a/b/a;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L13a59a.  v0:= v6[v2] @kind object;
  #L13a59e.  call `h`(v0) @signature `Lcom/b/a/b/b;.h:(Ljava/lang/reflect/Type;)V` @kind static;
  #L13a5a4.  v0:= v5[v2] @kind object;
  #L13a5a8.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L13a5ac.  if v0 != v3 then goto L13a5d8;
  #L13a5b0.  call `a`(v1) @signature `Lcom/b/a/b/a;.a:(Z)V` @kind static;
  #L13a5b6.  v0:= v6[v2] @kind object;
  #L13a5ba.  call temp:= `d`(v0) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L13a5c0.  v0:= temp @kind object;
  #L13a5c2.  v4.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L13a5c6.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L13a5ca.  v4.`com.b.a.b.b$c.a` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L13a5ce.  return @kind void;
  #L13a5d0.  v0:= v2;
  #L13a5d2.  goto L13a576;
  #L13a5d4.  v0:= v2;
  #L13a5d6.  goto L13a584;
  #L13a5d8.  v1:= v2;
  #L13a5da.  goto L13a5b0;
  #L13a5dc.  v0:= v5[v2] @kind object;
  #L13a5e0.  call temp:= `a`(v0) @signature `Lcom/b/a/b/a;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L13a5e6.  v0:= v5[v2] @kind object;
  #L13a5ea.  call `h`(v0) @signature `Lcom/b/a/b/b;.h:(Ljava/lang/reflect/Type;)V` @kind static;
  #L13a5f0.  v0:= 0I;
  #L13a5f2.  v4.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L13a5f6.  v0:= v5[v2] @kind object;
  #L13a5fa.  call temp:= `d`(v0) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L13a600.  v0:= temp @kind object;
  #L13a602.  v4.`com.b.a.b.b$c.a` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L13a606.  goto L13a5ce;
}
procedure `boolean` `equals`(`com.b.a.b.b$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/b$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13a618.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L13a61c.  if v0 == 0 then goto L13a634;
  #L13a620.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L13a624.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L13a62a.  v0:= temp;
  #L13a62c.  if v0 == 0 then goto L13a634;
  #L13a630.  v0:= 1I;
  #L13a632.  return v0;
  #L13a634.  v0:= 0I;
  #L13a636.  goto L13a632;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`com.b.a.b.b$c` v3 @kind this) @signature `Lcom/b/a/b/b$c;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13a648.  v0:= v3.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13a64c.  if v0 == 0 then goto L13a662;
  #L13a650.  v0:= 1I;
  #L13a652.  v0:= new `java.lang.reflect.Type`[v0];
  #L13a656.  v1:= 0I;
  #L13a658.  v2:= v3.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13a65c.  v0[v1]:= v2 @kind object;
  #L13a660.  return v0 @kind object;
  #L13a662.  v0:= `@@com.b.a.b.b.a` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13a666.  goto L13a660;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`com.b.a.b.b$c` v3 @kind this) @signature `Lcom/b/a/b/b$c;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13a678.  v0:= 1I;
  #L13a67a.  v0:= new `java.lang.reflect.Type`[v0];
  #L13a67e.  v1:= 0I;
  #L13a680.  v2:= v3.`com.b.a.b.b$c.a` @type ^`java.lang.reflect.Type` @kind object;
  #L13a684.  v0[v1]:= v2 @kind object;
  #L13a688.  return v0 @kind object;
}
procedure `int` `hashCode`(`com.b.a.b.b$c` v2 @kind this) @signature `Lcom/b/a/b/b$c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13a69c.  v0:= v2.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13a6a0.  if v0 == 0 then goto L13a6c8;
  #L13a6a4.  v0:= v2.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13a6a8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L13a6ae.  v0:= temp;
  #L13a6b0.  v0:= v0 + 31;
  #L13a6b4.  v1:= v2.`com.b.a.b.b$c.a` @type ^`java.lang.reflect.Type` @kind object;
  #L13a6b8.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L13a6be.  v1:= temp;
  #L13a6c0.  v1:= v1 + 31;
  #L13a6c4.  v0:= v0 ^~ v1 @kind int;
  #L13a6c6.  return v0;
  #L13a6c8.  v0:= 1I;
  #L13a6ca.  goto L13a6b4;
}
procedure `java.lang.String` `toString`(`com.b.a.b.b$c` v2 @kind this) @signature `Lcom/b/a/b/b$c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13a6dc.  v0:= v2.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13a6e0.  if v0 == 0 then goto L13a718;
  #L13a6e4.  v0:= new `java.lang.StringBuilder`;
  #L13a6e8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13a6ee.  v1:= "? super " @kind object;
  #L13a6f2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a6f8.  v0:= temp @kind object;
  #L13a6fa.  v1:= v2.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13a6fe.  call temp:= `f`(v1) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L13a704.  v1:= temp @kind object;
  #L13a706.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a70c.  v0:= temp @kind object;
  #L13a70e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13a714.  v0:= temp @kind object;
  #L13a716.  return v0 @kind object;
  #L13a718.  v0:= v2.`com.b.a.b.b$c.a` @type ^`java.lang.reflect.Type` @kind object;
  #L13a71c.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L13a720.  if v0 != v1 then goto L13a72a;
  #L13a724.  v0:= "?" @kind object;
  #L13a728.  goto L13a716;
  #L13a72a.  v0:= new `java.lang.StringBuilder`;
  #L13a72e.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13a734.  v1:= "? extends " @kind object;
  #L13a738.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a73e.  v0:= temp @kind object;
  #L13a740.  v1:= v2.`com.b.a.b.b$c.a` @type ^`java.lang.reflect.Type` @kind object;
  #L13a744.  call temp:= `f`(v1) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L13a74a.  v1:= temp @kind object;
  #L13a74c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13a752.  v0:= temp @kind object;
  #L13a754.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13a75a.  v0:= temp @kind object;
  #L13a75c.  goto L13a716;
}
