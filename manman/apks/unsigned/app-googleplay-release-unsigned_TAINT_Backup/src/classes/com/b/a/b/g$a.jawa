record `com.b.a.b.g$a` @kind class @AccessFlag  extends `java.util.AbstractSet` @kind class {
  `com.b.a.b.g` `com.b.a.b.g$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.b.a.b.g$a` v0 @kind this, `com.b.a.b.g` v1 @kind object) @signature `Lcom/b/a/b/g$a;.<init>:(Lcom/b/a/b/g;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L13c04c.  v0.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` := v1 @kind object;
  #L13c050.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L13c056.  return @kind void;
}
procedure `void` `clear`(`com.b.a.b.g$a` v1 @kind this) @signature `Lcom/b/a/b/g$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c068.  v0:= v1.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` @kind object;
  #L13c06c.  call `clear`(v0) @signature `Lcom/b/a/b/g;.clear:()V` @kind virtual;
  #L13c072.  return @kind void;
}
procedure `boolean` `contains`(`com.b.a.b.g$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g$a;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c084.  v0:= instanceof @variable v2 @type ^`java.util.Map$Entry` @kind boolean;
  #L13c088.  if v0 == 0 then goto L13c0a4;
  #L13c08c.  v0:= v1.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` @kind object;
  #L13c090.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L13c094.  call temp:= `a`(v0, v2) @signature `Lcom/b/a/b/g;.a:(Ljava/util/Map$Entry;)Lcom/b/a/b/g$d;` @kind virtual;
  #L13c09a.  v0:= temp @kind object;
  #L13c09c.  if v0 == 0 then goto L13c0a4;
  #L13c0a0.  v0:= 1I;
  #L13c0a2.  return v0;
  #L13c0a4.  v0:= 0I;
  #L13c0a6.  goto L13c0a2;
}
procedure `java.util.Iterator` `iterator`(`com.b.a.b.g$a` v1 @kind this) @signature `Lcom/b/a/b/g$a;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c0b8.  v0:= new `com.b.a.b.g$a$1`;
  #L13c0bc.  call `<init>`(v0, v1) @signature `Lcom/b/a/b/g$a$1;.<init>:(Lcom/b/a/b/g$a;)V` @kind direct;
  #L13c0c2.  return v0 @kind object;
}
procedure `boolean` `remove`(`com.b.a.b.g$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/b/a/b/g$a;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13c0d4.  v1:= 1I;
  #L13c0d6.  v0:= 0I;
  #L13c0d8.  v2:= instanceof @variable v4 @type ^`java.util.Map$Entry` @kind boolean;
  #L13c0dc.  if v2 != 0 then goto L13c0e2;
  #L13c0e0.  return v0;
  #L13c0e2.  v2:= v3.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` @kind object;
  #L13c0e6.  v4:= (`java.util.Map$Entry`) v4 @kind object;
  #L13c0ea.  call temp:= `a`(v2, v4) @signature `Lcom/b/a/b/g;.a:(Ljava/util/Map$Entry;)Lcom/b/a/b/g$d;` @kind virtual;
  #L13c0f0.  v2:= temp @kind object;
  #L13c0f2.  if v2 == 0 then goto L13c0e0;
  #L13c0f6.  v0:= v3.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` @kind object;
  #L13c0fa.  call `a`(v0, v2, v1) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Z)V` @kind virtual;
  #L13c100.  v0:= v1;
  #L13c102.  goto L13c0e0;
}
procedure `int` `size`(`com.b.a.b.g$a` v1 @kind this) @signature `Lcom/b/a/b/g$a;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13c114.  v0:= v1.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` @kind object;
  #L13c118.  v0:= v0.`com.b.a.b.g.c` @type ^`int`;
  #L13c11c.  return v0;
}
