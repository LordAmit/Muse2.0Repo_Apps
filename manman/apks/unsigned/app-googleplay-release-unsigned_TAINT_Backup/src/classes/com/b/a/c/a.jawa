record `com.b.a.c.a` @kind class @AccessFlag PUBLIC {
  `java.lang.Class` `com.b.a.c.a.a` @AccessFlag FINAL;
  `java.lang.reflect.Type` `com.b.a.c.a.b` @AccessFlag FINAL;
  `int` `com.b.a.c.a.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`com.b.a.c.a` v1 @kind this) @signature `Lcom/b/a/c/a;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L13d154.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13d15a.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13d160.  v0:= temp @kind object;
  #L13d162.  call temp:= `a`(v0) @signature `Lcom/b/a/c/a;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L13d168.  v0:= temp @kind object;
  #L13d16a.  v1.`com.b.a.c.a.b` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L13d16e.  v0:= v1.`com.b.a.c.a.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13d172.  call temp:= `e`(v0) @signature `Lcom/b/a/b/b;.e:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L13d178.  v0:= temp @kind object;
  #L13d17a.  v1.`com.b.a.c.a.a` @type ^`java.lang.Class` := v0 @kind object;
  #L13d17e.  v0:= v1.`com.b.a.c.a.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13d182.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L13d188.  v0:= temp;
  #L13d18a.  v1.`com.b.a.c.a.c` @type ^`int` := v0;
  #L13d18e.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.c.a` v1 @kind this, `java.lang.reflect.Type` v2 @kind object) @signature `Lcom/b/a/c/a;.<init>:(Ljava/lang/reflect/Type;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L13d1a0.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13d1a6.  call temp:= `a`(v2) @signature `Lcom/b/a/b/a;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L13d1ac.  v0:= temp @kind object;
  #L13d1ae.  v0:= (`java.lang.reflect.Type`) v0 @kind object;
  #L13d1b2.  call temp:= `d`(v0) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L13d1b8.  v0:= temp @kind object;
  #L13d1ba.  v1.`com.b.a.c.a.b` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L13d1be.  v0:= v1.`com.b.a.c.a.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13d1c2.  call temp:= `e`(v0) @signature `Lcom/b/a/b/b;.e:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L13d1c8.  v0:= temp @kind object;
  #L13d1ca.  v1.`com.b.a.c.a.a` @type ^`java.lang.Class` := v0 @kind object;
  #L13d1ce.  v0:= v1.`com.b.a.c.a.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13d1d2.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L13d1d8.  v0:= temp;
  #L13d1da.  v1.`com.b.a.c.a.c` @type ^`int` := v0;
  #L13d1de.  return @kind void;
}
procedure `com.b.a.c.a` `a`(`java.lang.reflect.Type` v1 @kind object) @signature `Lcom/b/a/c/a;.a:(Ljava/lang/reflect/Type;)Lcom/b/a/c/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13d1f0.  v0:= new `com.b.a.c.a`;
  #L13d1f4.  call `<init>`(v0, v1) @signature `Lcom/b/a/c/a;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L13d1fa.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `a`(`java.lang.Class` v2 @kind object) @signature `Lcom/b/a/c/a;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L13d20c.  call temp:= `getGenericSuperclass`(v2) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L13d212.  v0:= temp @kind object;
  #L13d214.  v1:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L13d218.  if v1 == 0 then goto L13d22c;
  #L13d21c.  v0:= new `java.lang.RuntimeException`;
  #L13d220.  v1:= "Missing type parameter." @kind object;
  #L13d224.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13d22a.  throw v0;
  #L13d22c.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L13d230.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13d236.  v0:= temp @kind object;
  #L13d238.  v1:= 0I;
  #L13d23a.  v0:= v0[v1] @kind object;
  #L13d23e.  call temp:= `d`(v0) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L13d244.  v0:= temp @kind object;
  #L13d246.  return v0 @kind object;
}
procedure `com.b.a.c.a` `b`(`java.lang.Class` v1 @kind object) @signature `Lcom/b/a/c/a;.b:(Ljava/lang/Class;)Lcom/b/a/c/a;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13d258.  v0:= new `com.b.a.c.a`;
  #L13d25c.  call `<init>`(v0, v1) @signature `Lcom/b/a/c/a;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L13d262.  return v0 @kind object;
}
procedure `java.lang.Class` `a`(`com.b.a.c.a` v1 @kind this) @signature `Lcom/b/a/c/a;.a:()Ljava/lang/Class;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13d274.  v0:= v1.`com.b.a.c.a.a` @type ^`java.lang.Class` @kind object;
  #L13d278.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `b`(`com.b.a.c.a` v1 @kind this) @signature `Lcom/b/a/c/a;.b:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13d28c.  v0:= v1.`com.b.a.c.a.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13d290.  return v0 @kind object;
}
procedure `boolean` `equals`(`com.b.a.c.a` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/c/a;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L13d2a4.  v0:= instanceof @variable v3 @type ^`com.b.a.c.a` @kind boolean;
  #L13d2a8.  if v0 == 0 then goto L13d2c8;
  #L13d2ac.  v0:= v2.`com.b.a.c.a.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13d2b0.  v3:= (`com.b.a.c.a`) v3 @kind object;
  #L13d2b4.  v1:= v3.`com.b.a.c.a.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13d2b8.  call temp:= `a`(v0, v1) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L13d2be.  v0:= temp;
  #L13d2c0.  if v0 == 0 then goto L13d2c8;
  #L13d2c4.  v0:= 1I;
  #L13d2c6.  return v0;
  #L13d2c8.  v0:= 0I;
  #L13d2ca.  goto L13d2c6;
}
procedure `int` `hashCode`(`com.b.a.c.a` v1 @kind this) @signature `Lcom/b/a/c/a;.hashCode:()I` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13d2dc.  v0:= v1.`com.b.a.c.a.c` @type ^`int`;
  #L13d2e0.  return v0;
}
procedure `java.lang.String` `toString`(`com.b.a.c.a` v1 @kind this) @signature `Lcom/b/a/c/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L13d2f4.  v0:= v1.`com.b.a.c.a.b` @type ^`java.lang.reflect.Type` @kind object;
  #L13d2f8.  call temp:= `f`(v0) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L13d2fe.  v0:= temp @kind object;
  #L13d300.  return v0 @kind object;
}
