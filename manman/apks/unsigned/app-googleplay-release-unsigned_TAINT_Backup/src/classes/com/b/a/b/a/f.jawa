record `com.b.a.b.a.f` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.d.c` @kind class {
  `java.util.List` `com.b.a.b.a.f.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.b.a.b.a.f.d` @AccessFlag PRIVATE;
  `com.b.a.l` `com.b.a.b.a.f.e` @AccessFlag PRIVATE;
}
global `java.io.Writer` `@@com.b.a.b.a.f.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.b.a.q` `@@com.b.a.b.a.f.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/a/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L136138.  v0:= new `com.b.a.b.a.f$1`;
  #L13613c.  call `<init>`(v0) @signature `Lcom/b/a/b/a/f$1;.<init>:()V` @kind direct;
  #L136142.  `@@com.b.a.b.a.f.a` @type ^`java.io.Writer` := v0 @kind object;
  #L136146.  v0:= new `com.b.a.q`;
  #L13614a.  v1:= "closed" @kind object;
  #L13614e.  call `<init>`(v0, v1) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L136154.  `@@com.b.a.b.a.f.b` @type ^`com.b.a.q` := v0 @kind object;
  #L136158.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.b.a.f` v1 @kind this) @signature `Lcom/b/a/b/a/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L13616c.  v0:= `@@com.b.a.b.a.f.a` @type ^`java.io.Writer` @kind object;
  #L136170.  call `<init>`(v1, v0) @signature `Lcom/b/a/d/c;.<init>:(Ljava/io/Writer;)V` @kind direct;
  #L136176.  v0:= new `java.util.ArrayList`;
  #L13617a.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L136180.  v1.`com.b.a.b.a.f.c` @type ^`java.util.List` := v0 @kind object;
  #L136184.  v0:= `@@com.b.a.n.a` @type ^`com.b.a.n` @kind object;
  #L136188.  v1.`com.b.a.b.a.f.e` @type ^`com.b.a.l` := v0 @kind object;
  #L13618c.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.f` v2 @kind this, `com.b.a.l` v3 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1361a0.  v0:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L1361a4.  if v0 == 0 then goto L1361de;
  #L1361a8.  call temp:= `j`(v3) @signature `Lcom/b/a/l;.j:()Z` @kind virtual;
  #L1361ae.  v0:= temp;
  #L1361b0.  if v0 == 0 then goto L1361c0;
  #L1361b4.  call temp:= `h`(v2) @signature `Lcom/b/a/b/a/f;.h:()Z` @kind virtual;
  #L1361ba.  v0:= temp;
  #L1361bc.  if v0 == 0 then goto L1361d6;
  #L1361c0.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L1361c6.  v0:= temp @kind object;
  #L1361c8.  v0:= (`com.b.a.o`) v0 @kind object;
  #L1361cc.  v1:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L1361d0.  call `a`(v0, v1, v3) @signature `Lcom/b/a/o;.a:(Ljava/lang/String;Lcom/b/a/l;)V` @kind virtual;
  #L1361d6.  v0:= 0I;
  #L1361d8.  v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` := v0 @kind object;
  #L1361dc.  return @kind void;
  #L1361de.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L1361e2.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1361e8.  v0:= temp;
  #L1361ea.  if v0 == 0 then goto L1361f4;
  #L1361ee.  v2.`com.b.a.b.a.f.e` @type ^`com.b.a.l` := v3 @kind object;
  #L1361f2.  goto L1361dc;
  #L1361f4.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L1361fa.  v0:= temp @kind object;
  #L1361fc.  v1:= instanceof @variable v0 @type ^`com.b.a.i` @kind boolean;
  #L136200.  if v1 == 0 then goto L136210;
  #L136204.  v0:= (`com.b.a.i`) v0 @kind object;
  #L136208.  call `a`(v0, v3) @signature `Lcom/b/a/i;.a:(Lcom/b/a/l;)V` @kind virtual;
  #L13620e.  goto L1361dc;
  #L136210.  v0:= new `java.lang.IllegalStateException`;
  #L136214.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L13621a.  throw v0;
}
procedure `com.b.a.l` `i`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L13622c.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L136230.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L136234.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L13623a.  v1:= temp;
  #L13623c.  v1:= v1 + -1;
  #L136240.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L136246.  v0:= temp @kind object;
  #L136248.  v0:= (`com.b.a.l`) v0 @kind object;
  #L13624c.  return v0 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v3 @kind this, `long` v4 ) @signature `Lcom/b/a/b/a/f;.a:(J)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L136260.  v0:= new `com.b.a.q`;
  #L136264.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L13626a.  v1:= temp @kind object;
  #L13626c.  call `<init>`(v0, v1) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Number;)V` @kind direct;
  #L136272.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L136278.  return v3 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v1 @kind this, `java.lang.Boolean` v2 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Ljava/lang/Boolean;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13628c.  if v2 != 0 then goto L13629a;
  #L136290.  call temp:= `f`(v1) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L136296.  v1:= temp @kind object;
  #L136298.  return v1 @kind object;
  #L13629a.  v0:= new `com.b.a.q`;
  #L13629e.  call `<init>`(v0, v2) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Boolean;)V` @kind direct;
  #L1362a4.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L1362aa.  goto L136298;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v3 @kind this, `java.lang.Number` v4 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Ljava/lang/Number;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1362bc.  if v4 != 0 then goto L1362ca;
  #L1362c0.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L1362c6.  v3:= temp @kind object;
  #L1362c8.  return v3 @kind object;
  #L1362ca.  call temp:= `g`(v3) @signature `Lcom/b/a/b/a/f;.g:()Z` @kind virtual;
  #L1362d0.  v0:= temp;
  #L1362d2.  if v0 != 0 then goto L136328;
  #L1362d6.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L1362dc.  v0:= temp @kind wide;
  #L1362de.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L1362e4.  v2:= temp;
  #L1362e6.  if v2 != 0 then goto L1362f6;
  #L1362ea.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L1362f0.  v0:= temp;
  #L1362f2.  if v0 == 0 then goto L136328;
  #L1362f6.  v0:= new `java.lang.IllegalArgumentException`;
  #L1362fa.  v1:= new `java.lang.StringBuilder`;
  #L1362fe.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L136304.  v2:= "JSON forbids NaN and infinities: " @kind object;
  #L136308.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13630e.  v1:= temp @kind object;
  #L136310.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136316.  v1:= temp @kind object;
  #L136318.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13631e.  v1:= temp @kind object;
  #L136320.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L136326.  throw v0;
  #L136328.  v0:= new `com.b.a.q`;
  #L13632c.  call `<init>`(v0, v4) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Number;)V` @kind direct;
  #L136332.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L136338.  goto L1362c8;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13634c.  v0:= v1.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L136350.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L136356.  v0:= temp;
  #L136358.  if v0 != 0 then goto L136364;
  #L13635c.  v0:= v1.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L136360.  if v0 == 0 then goto L136370;
  #L136364.  v0:= new `java.lang.IllegalStateException`;
  #L136368.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L13636e.  throw v0;
  #L136370.  call temp:= `i`(v1) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L136376.  v0:= temp @kind object;
  #L136378.  v0:= instanceof @variable v0 @type ^`com.b.a.o` @kind boolean;
  #L13637c.  if v0 == 0 then goto L136386;
  #L136380.  v1.`com.b.a.b.a.f.d` @type ^`java.lang.String` := v2 @kind object;
  #L136384.  return v1 @kind object;
  #L136386.  v0:= new `java.lang.IllegalStateException`;
  #L13638a.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L136390.  throw v0;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v2 @kind this, `boolean` v3 ) @signature `Lcom/b/a/b/a/f;.a:(Z)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1363a4.  v0:= new `com.b.a.q`;
  #L1363a8.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1363ae.  v1:= temp @kind object;
  #L1363b0.  call `<init>`(v0, v1) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Boolean;)V` @kind direct;
  #L1363b6.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L1363bc.  return v2 @kind object;
}
procedure `com.b.a.l` `a`(`com.b.a.b.a.f` v3 @kind this) @signature `Lcom/b/a/b/a/f;.a:()Lcom/b/a/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1363d0.  v0:= v3.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L1363d4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1363da.  v0:= temp;
  #L1363dc.  if v0 != 0 then goto L136416;
  #L1363e0.  v0:= new `java.lang.IllegalStateException`;
  #L1363e4.  v1:= new `java.lang.StringBuilder`;
  #L1363e8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1363ee.  v2:= "Expected one JSON element but was " @kind object;
  #L1363f2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1363f8.  v1:= temp @kind object;
  #L1363fa.  v2:= v3.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L1363fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L136404.  v1:= temp @kind object;
  #L136406.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13640c.  v1:= temp @kind object;
  #L13640e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L136414.  throw v0;
  #L136416.  v0:= v3.`com.b.a.b.a.f.e` @type ^`com.b.a.l` @kind object;
  #L13641a.  return v0 @kind object;
}
procedure `com.b.a.d.c` `b`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.b:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13642c.  v0:= new `com.b.a.i`;
  #L136430.  call `<init>`(v0) @signature `Lcom/b/a/i;.<init>:()V` @kind direct;
  #L136436.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L13643c.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L136440.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L136446.  return v2 @kind object;
}
procedure `com.b.a.d.c` `b`(`com.b.a.b.a.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/b/a/b/a/f;.b:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L136458.  if v2 != 0 then goto L136466;
  #L13645c.  call temp:= `f`(v1) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L136462.  v1:= temp @kind object;
  #L136464.  return v1 @kind object;
  #L136466.  v0:= new `com.b.a.q`;
  #L13646a.  call `<init>`(v0, v2) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L136470.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L136476.  goto L136464;
}
procedure `com.b.a.d.c` `c`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.c:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L136488.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L13648c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L136492.  v0:= temp;
  #L136494.  if v0 != 0 then goto L1364a0;
  #L136498.  v0:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L13649c.  if v0 == 0 then goto L1364ac;
  #L1364a0.  v0:= new `java.lang.IllegalStateException`;
  #L1364a4.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1364aa.  throw v0;
  #L1364ac.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L1364b2.  v0:= temp @kind object;
  #L1364b4.  v0:= instanceof @variable v0 @type ^`com.b.a.i` @kind boolean;
  #L1364b8.  if v0 == 0 then goto L1364d8;
  #L1364bc.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L1364c0.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L1364c4.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1364ca.  v1:= temp;
  #L1364cc.  v1:= v1 + -1;
  #L1364d0.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1364d6.  return v2 @kind object;
  #L1364d8.  v0:= new `java.lang.IllegalStateException`;
  #L1364dc.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1364e2.  throw v0;
}
procedure `void` `close`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1364f4.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L1364f8.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L1364fe.  v0:= temp;
  #L136500.  if v0 != 0 then goto L136514;
  #L136504.  v0:= new `java.io.IOException`;
  #L136508.  v1:= "Incomplete document" @kind object;
  #L13650c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L136512.  throw v0;
  #L136514.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L136518.  v1:= `@@com.b.a.b.a.f.b` @type ^`com.b.a.q` @kind object;
  #L13651c.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L136522.  return @kind void;
}
procedure `com.b.a.d.c` `d`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.d:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L136534.  v0:= new `com.b.a.o`;
  #L136538.  call `<init>`(v0) @signature `Lcom/b/a/o;.<init>:()V` @kind direct;
  #L13653e.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L136544.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L136548.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13654e.  return v2 @kind object;
}
procedure `com.b.a.d.c` `e`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.e:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L136560.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L136564.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L13656a.  v0:= temp;
  #L13656c.  if v0 != 0 then goto L136578;
  #L136570.  v0:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L136574.  if v0 == 0 then goto L136584;
  #L136578.  v0:= new `java.lang.IllegalStateException`;
  #L13657c.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L136582.  throw v0;
  #L136584.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L13658a.  v0:= temp @kind object;
  #L13658c.  v0:= instanceof @variable v0 @type ^`com.b.a.o` @kind boolean;
  #L136590.  if v0 == 0 then goto L1365b0;
  #L136594.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L136598.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L13659c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1365a2.  v1:= temp;
  #L1365a4.  v1:= v1 + -1;
  #L1365a8.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L1365ae.  return v2 @kind object;
  #L1365b0.  v0:= new `java.lang.IllegalStateException`;
  #L1365b4.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1365ba.  throw v0;
}
procedure `com.b.a.d.c` `f`(`com.b.a.b.a.f` v1 @kind this) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1365cc.  v0:= `@@com.b.a.n.a` @type ^`com.b.a.n` @kind object;
  #L1365d0.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L1365d6.  return v1 @kind object;
}
procedure `void` `flush`(`com.b.a.b.a.f` v0 @kind this) @signature `Lcom/b/a/b/a/f;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L1365e8.  return @kind void;
}
