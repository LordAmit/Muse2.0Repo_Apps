record `com.b.a.i` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.l` @kind class, `java.lang.Iterable` @kind interface {
  `java.util.List` `com.b.a.i.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.i` v1 @kind this) @signature `Lcom/b/a/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L13eb7c.  call `<init>`(v1) @signature `Lcom/b/a/l;.<init>:()V` @kind direct;
  #L13eb82.  v0:= new `java.util.ArrayList`;
  #L13eb86.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L13eb8c.  v1.`com.b.a.i.a` @type ^`java.util.List` := v0 @kind object;
  #L13eb90.  return @kind void;
}
procedure `java.lang.Number` `a`(`com.b.a.i` v2 @kind this) @signature `Lcom/b/a/i;.a:()Ljava/lang/Number;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13eba4.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13eba8.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L13ebae.  v0:= temp;
  #L13ebb0.  v1:= 1I;
  #L13ebb2.  if v0 != v1 then goto L13ebd2;
  #L13ebb6.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13ebba.  v1:= 0I;
  #L13ebbc.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L13ebc2.  v0:= temp @kind object;
  #L13ebc4.  v0:= (`com.b.a.l`) v0 @kind object;
  #L13ebc8.  call temp:= `a`(v0) @signature `Lcom/b/a/l;.a:()Ljava/lang/Number;` @kind virtual;
  #L13ebce.  v0:= temp @kind object;
  #L13ebd0.  return v0 @kind object;
  #L13ebd2.  v0:= new `java.lang.IllegalStateException`;
  #L13ebd6.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L13ebdc.  throw v0;
}
procedure `void` `a`(`com.b.a.i` v1 @kind this, `com.b.a.l` v2 @kind object) @signature `Lcom/b/a/i;.a:(Lcom/b/a/l;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13ebf0.  if v2 != 0 then goto L13ebf8;
  #L13ebf4.  v2:= `@@com.b.a.n.a` @type ^`com.b.a.n` @kind object;
  #L13ebf8.  v0:= v1.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13ebfc.  call temp:= `add`(v0, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L13ec02.  return @kind void;
}
procedure `java.lang.String` `b`(`com.b.a.i` v2 @kind this) @signature `Lcom/b/a/i;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13ec14.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13ec18.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L13ec1e.  v0:= temp;
  #L13ec20.  v1:= 1I;
  #L13ec22.  if v0 != v1 then goto L13ec42;
  #L13ec26.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13ec2a.  v1:= 0I;
  #L13ec2c.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L13ec32.  v0:= temp @kind object;
  #L13ec34.  v0:= (`com.b.a.l`) v0 @kind object;
  #L13ec38.  call temp:= `b`(v0) @signature `Lcom/b/a/l;.b:()Ljava/lang/String;` @kind virtual;
  #L13ec3e.  v0:= temp @kind object;
  #L13ec40.  return v0 @kind object;
  #L13ec42.  v0:= new `java.lang.IllegalStateException`;
  #L13ec46.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L13ec4c.  throw v0;
}
procedure `double` `c`(`com.b.a.i` v2 @kind this) @signature `Lcom/b/a/i;.c:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13ec60.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13ec64.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L13ec6a.  v0:= temp;
  #L13ec6c.  v1:= 1I;
  #L13ec6e.  if v0 != v1 then goto L13ec8e;
  #L13ec72.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13ec76.  v1:= 0I;
  #L13ec78.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L13ec7e.  v0:= temp @kind object;
  #L13ec80.  v0:= (`com.b.a.l`) v0 @kind object;
  #L13ec84.  call temp:= `c`(v0) @signature `Lcom/b/a/l;.c:()D` @kind virtual;
  #L13ec8a.  v0:= temp @kind wide;
  #L13ec8c.  return v0 @kind wide;
  #L13ec8e.  v0:= new `java.lang.IllegalStateException`;
  #L13ec92.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L13ec98.  throw v0;
}
procedure `long` `d`(`com.b.a.i` v2 @kind this) @signature `Lcom/b/a/i;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13ecac.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13ecb0.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L13ecb6.  v0:= temp;
  #L13ecb8.  v1:= 1I;
  #L13ecba.  if v0 != v1 then goto L13ecda;
  #L13ecbe.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13ecc2.  v1:= 0I;
  #L13ecc4.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L13ecca.  v0:= temp @kind object;
  #L13eccc.  v0:= (`com.b.a.l`) v0 @kind object;
  #L13ecd0.  call temp:= `d`(v0) @signature `Lcom/b/a/l;.d:()J` @kind virtual;
  #L13ecd6.  v0:= temp @kind wide;
  #L13ecd8.  return v0 @kind wide;
  #L13ecda.  v0:= new `java.lang.IllegalStateException`;
  #L13ecde.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L13ece4.  throw v0;
}
procedure `int` `e`(`com.b.a.i` v2 @kind this) @signature `Lcom/b/a/i;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13ecf8.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13ecfc.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L13ed02.  v0:= temp;
  #L13ed04.  v1:= 1I;
  #L13ed06.  if v0 != v1 then goto L13ed26;
  #L13ed0a.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13ed0e.  v1:= 0I;
  #L13ed10.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L13ed16.  v0:= temp @kind object;
  #L13ed18.  v0:= (`com.b.a.l`) v0 @kind object;
  #L13ed1c.  call temp:= `e`(v0) @signature `Lcom/b/a/l;.e:()I` @kind virtual;
  #L13ed22.  v0:= temp;
  #L13ed24.  return v0;
  #L13ed26.  v0:= new `java.lang.IllegalStateException`;
  #L13ed2a.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L13ed30.  throw v0;
}
procedure `boolean` `equals`(`com.b.a.i` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/i;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13ed44.  if v3 == v2 then goto L13ed68;
  #L13ed48.  v0:= instanceof @variable v3 @type ^`com.b.a.i` @kind boolean;
  #L13ed4c.  if v0 == 0 then goto L13ed6c;
  #L13ed50.  v3:= (`com.b.a.i`) v3 @kind object;
  #L13ed54.  v0:= v3.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13ed58.  v1:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13ed5c.  call temp:= `equals`(v0, v1) @signature `Ljava/util/List;.equals:(Ljava/lang/Object;)Z` @kind interface;
  #L13ed62.  v0:= temp;
  #L13ed64.  if v0 == 0 then goto L13ed6c;
  #L13ed68.  v0:= 1I;
  #L13ed6a.  return v0;
  #L13ed6c.  v0:= 0I;
  #L13ed6e.  goto L13ed6a;
}
procedure `boolean` `f`(`com.b.a.i` v2 @kind this) @signature `Lcom/b/a/i;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13ed80.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13ed84.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L13ed8a.  v0:= temp;
  #L13ed8c.  v1:= 1I;
  #L13ed8e.  if v0 != v1 then goto L13edae;
  #L13ed92.  v0:= v2.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13ed96.  v1:= 0I;
  #L13ed98.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L13ed9e.  v0:= temp @kind object;
  #L13eda0.  v0:= (`com.b.a.l`) v0 @kind object;
  #L13eda4.  call temp:= `f`(v0) @signature `Lcom/b/a/l;.f:()Z` @kind virtual;
  #L13edaa.  v0:= temp;
  #L13edac.  return v0;
  #L13edae.  v0:= new `java.lang.IllegalStateException`;
  #L13edb2.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L13edb8.  throw v0;
}
procedure `int` `hashCode`(`com.b.a.i` v1 @kind this) @signature `Lcom/b/a/i;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13edcc.  v0:= v1.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13edd0.  call temp:= `hashCode`(v0) @signature `Ljava/util/List;.hashCode:()I` @kind interface;
  #L13edd6.  v0:= temp;
  #L13edd8.  return v0;
}
procedure `java.util.Iterator` `iterator`(`com.b.a.i` v1 @kind this) @signature `Lcom/b/a/i;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13edec.  v0:= v1.`com.b.a.i.a` @type ^`java.util.List` @kind object;
  #L13edf0.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13edf6.  v0:= temp @kind object;
  #L13edf8.  return v0 @kind object;
}
