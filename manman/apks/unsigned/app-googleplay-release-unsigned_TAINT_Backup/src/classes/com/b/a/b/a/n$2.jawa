record `com.b.a.b.a.n$2` @kind class @AccessFlag FINAL extends `com.b.a.v` @kind class {
}
procedure `void` `<init>`(`com.b.a.b.a.n$2` v0 @kind this) @signature `Lcom/b/a/b/a/n$2;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;

  #L139140.  call `<init>`(v0) @signature `Lcom/b/a/v;.<init>:()V` @kind direct;
  #L139146.  return @kind void;
}
procedure `java.util.concurrent.atomic.AtomicIntegerArray` `a`(`com.b.a.b.a.n$2` v5 @kind this, `com.b.a.d.a` v6 @kind object) @signature `Lcom/b/a/b/a/n$2;.a:(Lcom/b/a/d/a;)Ljava/util/concurrent/atomic/AtomicIntegerArray;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L139158.  v2:= new `java.util.ArrayList`;
  #L13915c.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L139162.  call `a`(v6) @signature `Lcom/b/a/d/a;.a:()V` @kind virtual;
  #L139168.  call temp:= `e`(v6) @signature `Lcom/b/a/d/a;.e:()Z` @kind virtual;
  #L13916e.  v0:= temp;
  #L139170.  if v0 == 0 then goto L13919a;
  #Try_start0.  
  #L139174.  call temp:= `m`(v6) @signature `Lcom/b/a/d/a;.m:()I` @kind virtual;
  #L13917a.  v0:= temp;
  #L13917c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L139182.  v0:= temp @kind object;
  #L139184.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #Try_end0.  
  #L13918a.  goto L139168;
  #L13918c.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L13918e.  v1:= new `com.b.a.t`;
  #L139192.  call `<init>`(v1, v0) @signature `Lcom/b/a/t;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L139198.  throw v1;
  #L13919a.  call `b`(v6) @signature `Lcom/b/a/d/a;.b:()V` @kind virtual;
  #L1391a0.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1391a6.  v3:= temp;
  #L1391a8.  v4:= new `java.util.concurrent.atomic.AtomicIntegerArray`;
  #L1391ac.  call `<init>`(v4, v3) @signature `Ljava/util/concurrent/atomic/AtomicIntegerArray;.<init>:(I)V` @kind direct;
  #L1391b2.  v0:= 0I;
  #L1391b4.  v1:= v0;
  #L1391b6.  if v1 >= v3 then goto L1391dc;
  #L1391ba.  call temp:= `get`(v2, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1391c0.  v0:= temp @kind object;
  #L1391c2.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L1391c6.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1391cc.  v0:= temp;
  #L1391ce.  call `set`(v4, v1, v0) @signature `Ljava/util/concurrent/atomic/AtomicIntegerArray;.set:(II)V` @kind virtual;
  #L1391d4.  v0:= v1 + 1;
  #L1391d8.  v1:= v0;
  #L1391da.  goto L1391b6;
  #L1391dc.  return v4 @kind object;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L13918c;
}
procedure `void` `a`(`com.b.a.b.a.n$2` v0 @kind this, `com.b.a.d.c` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/a/n$2;.a:(Lcom/b/a/d/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L139200.  v2:= (`java.util.concurrent.atomic.AtomicIntegerArray`) v2 @kind object;
  #L139204.  call `a`(v0, v1, v2) @signature `Lcom/b/a/b/a/n$2;.a:(Lcom/b/a/d/c;Ljava/util/concurrent/atomic/AtomicIntegerArray;)V` @kind virtual;
  #L13920a.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.n$2` v4 @kind this, `com.b.a.d.c` v5 @kind object, `java.util.concurrent.atomic.AtomicIntegerArray` v6 @kind object) @signature `Lcom/b/a/b/a/n$2;.a:(Lcom/b/a/d/c;Ljava/util/concurrent/atomic/AtomicIntegerArray;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13921c.  call temp:= `b`(v5) @signature `Lcom/b/a/d/c;.b:()Lcom/b/a/d/c;` @kind virtual;
  #L139222.  v0:= 0I;
  #L139224.  call temp:= `length`(v6) @signature `Ljava/util/concurrent/atomic/AtomicIntegerArray;.length:()I` @kind virtual;
  #L13922a.  v1:= temp;
  #L13922c.  if v0 >= v1 then goto L139246;
  #L139230.  call temp:= `get`(v6, v0) @signature `Ljava/util/concurrent/atomic/AtomicIntegerArray;.get:(I)I` @kind virtual;
  #L139236.  v2:= temp;
  #L139238.  v2:= (`long`) v2 @kind i2l;
  #L13923a.  call temp:= `a`(v5, v2) @signature `Lcom/b/a/d/c;.a:(J)Lcom/b/a/d/c;` @kind virtual;
  #L139240.  v0:= v0 + 1;
  #L139244.  goto L13922c;
  #L139246.  call temp:= `c`(v5) @signature `Lcom/b/a/d/c;.c:()Lcom/b/a/d/c;` @kind virtual;
  #L13924c.  return @kind void;
}
procedure `java.lang.Object` `b`(`com.b.a.b.a.n$2` v1 @kind this, `com.b.a.d.a` v2 @kind object) @signature `Lcom/b/a/b/a/n$2;.b:(Lcom/b/a/d/a;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L139260.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/a/n$2;.a:(Lcom/b/a/d/a;)Ljava/util/concurrent/atomic/AtomicIntegerArray;` @kind virtual;
  #L139266.  v0:= temp @kind object;
  #L139268.  return v0 @kind object;
}
