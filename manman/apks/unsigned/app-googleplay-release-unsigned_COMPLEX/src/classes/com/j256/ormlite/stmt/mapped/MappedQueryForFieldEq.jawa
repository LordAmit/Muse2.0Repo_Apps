record `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.mapped.BaseMappedQuery` @kind class {
  `java.lang.String` `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` v0 @kind this, `com.j256.ormlite.table.TableInfo` v1 @kind object, `java.lang.String` v2 @kind object, `com.j256.ormlite.field.FieldType`[] v3 @kind object, `com.j256.ormlite.field.FieldType`[] v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16ccf0.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L16ccf6.  v0.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` := v5 @kind object;
  #L16ccfa.  return @kind void;
}
procedure `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` `build`(`com.j256.ormlite.db.DatabaseType` v6 @kind object, `com.j256.ormlite.table.TableInfo` v7 @kind object, `com.j256.ormlite.field.FieldType` v8 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.build:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16cd0c.  if v8 != 0 then goto L16cd62;
  #L16cd10.  call temp:= `getIdField`(v7) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16cd16.  v8:= temp @kind object;
  #L16cd18.  if v8 != 0 then goto L16cd62;
  #L16cd1c.  v0:= new `java.sql.SQLException`;
  #L16cd20.  v1:= new `java.lang.StringBuilder`;
  #L16cd24.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16cd2a.  v2:= "Cannot query-for-id with " @kind object;
  #L16cd2e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cd34.  v1:= temp @kind object;
  #L16cd36.  call temp:= `getDataClass`(v7) @signature `Lcom/j256/ormlite/table/TableInfo;.getDataClass:()Ljava/lang/Class;` @kind virtual;
  #L16cd3c.  v2:= temp @kind object;
  #L16cd3e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cd44.  v1:= temp @kind object;
  #L16cd46.  v2:= " because it doesn't have an id field" @kind object;
  #L16cd4a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cd50.  v1:= temp @kind object;
  #L16cd52.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16cd58.  v1:= temp @kind object;
  #L16cd5a.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16cd60.  throw v0;
  #L16cd62.  call temp:= `buildStatement`(v6, v7, v8) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.buildStatement:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind static;
  #L16cd68.  v2:= temp @kind object;
  #L16cd6a.  v0:= new `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq`;
  #L16cd6e.  v1:= 1I;
  #L16cd70.  v3:= new `com.j256.ormlite.field.FieldType`[v1];
  #L16cd74.  v1:= 0I;
  #L16cd76.  v3[v1]:= v8 @kind object;
  #L16cd7a.  call temp:= `getFieldTypes`(v7) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16cd80.  v4:= temp @kind object;
  #L16cd82.  v5:= "query-for-id" @kind object;
  #L16cd86.  v1:= v7 @kind object;
  #L16cd88.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)V` @kind direct;
  #L16cd8e.  return v0 @kind object;
}
procedure `java.lang.String` `buildStatement`(`com.j256.ormlite.db.DatabaseType` v3 @kind object, `com.j256.ormlite.table.TableInfo` v4 @kind object, `com.j256.ormlite.field.FieldType` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.buildStatement:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L16cda0.  v0:= new `java.lang.StringBuilder`;
  #L16cda4.  v1:= 64I;
  #L16cda8.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L16cdae.  v1:= "SELECT * FROM " @kind object;
  #L16cdb2.  call temp:= `getTableName`(v4) @signature `Lcom/j256/ormlite/table/TableInfo;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L16cdb8.  v2:= temp @kind object;
  #L16cdba.  call `appendTableName`(v3, v0, v1, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.appendTableName:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L16cdc0.  v1:= 0I;
  #L16cdc2.  call `appendWhereFieldEq`(v3, v5, v0, v1) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.appendWhereFieldEq:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind static;
  #L16cdc8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16cdce.  v0:= temp @kind object;
  #L16cdd0.  return v0 @kind object;
}
procedure `void` `logArgs`(`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.logArgs:([Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L16cde4.  v0:= length @variable v4;
  #L16cde6.  if v0 <= 0 then goto L16cdfc;
  #L16cdea.  v0:= `@@com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16cdee.  v1:= "{} arguments: {}" @kind object;
  #L16cdf2.  v2:= v3.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` @kind object;
  #L16cdf6.  call `trace`(v0, v1, v2, v4) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L16cdfc.  return @kind void;
}
procedure `java.lang.Object` `execute`(`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` v7 @kind this, `com.j256.ormlite.support.DatabaseConnection` v8 @kind object, `java.lang.Object` v9 @kind object, `com.j256.ormlite.dao.ObjectCache` v10 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.execute:(Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L16ce10.  if v10 == 0 then goto L16ce26;
  #L16ce14.  v0:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.clazz` @type ^`java.lang.Class` @kind object;
  #L16ce18.  call temp:= `get`(v10, v0, v9) @signature `Lcom/j256/ormlite/dao/ObjectCache;.get:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L16ce1e.  v0:= temp @kind object;
  #L16ce20.  if v0 == 0 then goto L16ce26;
  #L16ce24.  return v0 @kind object;
  #L16ce26.  v0:= 1I;
  #L16ce28.  v2:= new `java.lang.Object`[v0];
  #L16ce2c.  v0:= 0I;
  #L16ce2e.  call temp:= `convertIdToFieldObject`(v7, v9) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.convertIdToFieldObject:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16ce34.  v1:= temp @kind object;
  #L16ce36.  v2[v0]:= v1 @kind object;
  #L16ce3a.  v1:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement` @type ^`java.lang.String` @kind object;
  #L16ce3e.  v3:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L16ce42.  v0:= v8 @kind object;
  #L16ce44.  v4:= v7 @kind object;
  #L16ce46.  v5:= v10 @kind object;
  #L16ce48.  call temp:= `queryForOne`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/support/DatabaseConnection;.queryForOne:(Ljava/lang/String;[Ljava/lang/Object;[Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/stmt/GenericRowMapper;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind interface;
  #L16ce4e.  v0:= temp @kind object;
  #L16ce50.  if v0 != 0 then goto L16ce7c;
  #L16ce54.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16ce58.  v3:= "{} using '{}' and {} args, got no results" @kind object;
  #L16ce5c.  v4:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` @kind object;
  #L16ce60.  v5:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement` @type ^`java.lang.String` @kind object;
  #L16ce64.  v6:= length @variable v2;
  #L16ce66.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L16ce6c.  v6:= temp @kind object;
  #L16ce6e.  call `debug`(v1, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L16ce74.  call `logArgs`(v7, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.logArgs:([Ljava/lang/Object;)V` @kind direct;
  #L16ce7a.  goto L16ce24;
  #L16ce7c.  v1:= `@@com.j256.ormlite.support.DatabaseConnection.MORE_THAN_ONE` @type ^`java.lang.Object` @kind object;
  #L16ce80.  if v0 != v1 then goto L16ceec;
  #L16ce84.  v0:= `@@com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16ce88.  v1:= "{} using '{}' and {} args, got >1 results" @kind object;
  #L16ce8c.  v3:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` @kind object;
  #L16ce90.  v4:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement` @type ^`java.lang.String` @kind object;
  #L16ce94.  v5:= length @variable v2;
  #L16ce96.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L16ce9c.  v5:= temp @kind object;
  #L16ce9e.  call `error`(v0, v1, v3, v4, v5) @signature `Lcom/j256/ormlite/logger/Logger;.error:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L16cea4.  call `logArgs`(v7, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.logArgs:([Ljava/lang/Object;)V` @kind direct;
  #L16ceaa.  v0:= new `java.sql.SQLException`;
  #L16ceae.  v1:= new `java.lang.StringBuilder`;
  #L16ceb2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16ceb8.  v2:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` @kind object;
  #L16cebc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cec2.  v1:= temp @kind object;
  #L16cec4.  v2:= " got more than 1 result: " @kind object;
  #L16cec8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cece.  v1:= temp @kind object;
  #L16ced0.  v2:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement` @type ^`java.lang.String` @kind object;
  #L16ced4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ceda.  v1:= temp @kind object;
  #L16cedc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16cee2.  v1:= temp @kind object;
  #L16cee4.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16ceea.  throw v0;
  #L16ceec.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16cef0.  v3:= "{} using '{}' and {} args, got 1 result" @kind object;
  #L16cef4.  v4:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` @kind object;
  #L16cef8.  v5:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement` @type ^`java.lang.String` @kind object;
  #L16cefc.  v6:= length @variable v2;
  #L16cefe.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L16cf04.  v6:= temp @kind object;
  #L16cf06.  call `debug`(v1, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L16cf0c.  goto L16ce74;
}
