record `com.j256.ormlite.stmt.query.Between` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.query.BaseComparison` @kind class {
  `java.lang.Object` `com.j256.ormlite.stmt.query.Between.high` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.stmt.query.Between.low` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.Between` v2 @kind this, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Between;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L16d960.  v0:= 0I;
  #L16d962.  v1:= 1I;
  #L16d964.  call `<init>`(v2, v3, v4, v0, v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Z)V` @kind direct;
  #L16d96a.  v2.`com.j256.ormlite.stmt.query.Between.low` @type ^`java.lang.Object` := v5 @kind object;
  #L16d96e.  v2.`com.j256.ormlite.stmt.query.Between.high` @type ^`java.lang.Object` := v6 @kind object;
  #L16d972.  return @kind void;
}
procedure `void` `appendOperation`(`com.j256.ormlite.stmt.query.Between` v1 @kind this, `java.lang.StringBuilder` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Between;.appendOperation:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d984.  v0:= "BETWEEN " @kind object;
  #L16d988.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d98e.  return @kind void;
}
procedure `void` `appendSql`(`com.j256.ormlite.stmt.query.Between` v0 @kind this, `com.j256.ormlite.db.DatabaseType` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.StringBuilder` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Between;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L16d9a0.  call `appendSql`(v0, v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind super;
  #L16d9a6.  return @kind void;
}
procedure `void` `appendValue`(`com.j256.ormlite.stmt.query.Between` v6 @kind this, `com.j256.ormlite.db.DatabaseType` v7 @kind object, `java.lang.StringBuilder` v8 @kind object, `java.util.List` v9 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Between;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16d9b8.  v0:= v6.`com.j256.ormlite.stmt.query.Between.low` @type ^`java.lang.Object` @kind object;
  #L16d9bc.  if v0 != 0 then goto L16da02;
  #L16d9c0.  v0:= new `java.lang.IllegalArgumentException`;
  #L16d9c4.  v1:= new `java.lang.StringBuilder`;
  #L16d9c8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16d9ce.  v2:= "BETWEEN low value for '" @kind object;
  #L16d9d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d9d8.  v1:= temp @kind object;
  #L16d9da.  v2:= v6.`com.j256.ormlite.stmt.query.Between.columnName` @type ^`java.lang.String` @kind object;
  #L16d9de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d9e4.  v1:= temp @kind object;
  #L16d9e6.  v2:= "' is null" @kind object;
  #L16d9ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d9f0.  v1:= temp @kind object;
  #L16d9f2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16d9f8.  v1:= temp @kind object;
  #L16d9fa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16da00.  throw v0;
  #L16da02.  v0:= v6.`com.j256.ormlite.stmt.query.Between.high` @type ^`java.lang.Object` @kind object;
  #L16da06.  if v0 != 0 then goto L16da4c;
  #L16da0a.  v0:= new `java.lang.IllegalArgumentException`;
  #L16da0e.  v1:= new `java.lang.StringBuilder`;
  #L16da12.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16da18.  v2:= "BETWEEN high value for '" @kind object;
  #L16da1c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16da22.  v1:= temp @kind object;
  #L16da24.  v2:= v6.`com.j256.ormlite.stmt.query.Between.columnName` @type ^`java.lang.String` @kind object;
  #L16da28.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16da2e.  v1:= temp @kind object;
  #L16da30.  v2:= "' is null" @kind object;
  #L16da34.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16da3a.  v1:= temp @kind object;
  #L16da3c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16da42.  v1:= temp @kind object;
  #L16da44.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16da4a.  throw v0;
  #L16da4c.  v2:= v6.`com.j256.ormlite.stmt.query.Between.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16da50.  v5:= v6.`com.j256.ormlite.stmt.query.Between.low` @type ^`java.lang.Object` @kind object;
  #L16da54.  v0:= v6 @kind object;
  #L16da56.  v1:= v7 @kind object;
  #L16da58.  v3:= v8 @kind object;
  #L16da5a.  v4:= v9 @kind object;
  #L16da5c.  call `appendArgOrValue`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/Between;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @kind virtual;
  #L16da62.  v0:= "AND " @kind object;
  #L16da66.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16da6c.  v2:= v6.`com.j256.ormlite.stmt.query.Between.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16da70.  v5:= v6.`com.j256.ormlite.stmt.query.Between.high` @type ^`java.lang.Object` @kind object;
  #L16da74.  v0:= v6 @kind object;
  #L16da76.  v1:= v7 @kind object;
  #L16da78.  v3:= v8 @kind object;
  #L16da7a.  v4:= v9 @kind object;
  #L16da7c.  call `appendArgOrValue`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/Between;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @kind virtual;
  #L16da82.  return @kind void;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.stmt.query.Between` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/Between;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L16da94.  call temp:= `getColumnName`(v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.getColumnName:()Ljava/lang/String;` @kind super;
  #L16da9a.  v0:= temp @kind object;
  #L16da9c.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.query.Between` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/Between;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L16dab0.  call temp:= `toString`(v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.toString:()Ljava/lang/String;` @kind super;
  #L16dab6.  v0:= temp @kind object;
  #L16dab8.  return v0 @kind object;
}
