record `com.j256.ormlite.field.types.SqlDateStringType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.DateStringType` @kind class {
}
global `com.j256.ormlite.field.types.SqlDateStringType` `@@com.j256.ormlite.field.types.SqlDateStringType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L163820.  v0:= new `com.j256.ormlite.field.types.SqlDateStringType`;
  #L163824.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.<init>:()V` @kind direct;
  #L16382a.  `@@com.j256.ormlite.field.types.SqlDateStringType.singleTon` @type ^`com.j256.ormlite.field.types.SqlDateStringType` := v0 @kind object;
  #L16382e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.SqlDateStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L163840.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L163844.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L16384a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.SqlDateStringType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L16385c.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L163862.  return @kind void;
}
procedure `com.j256.ormlite.field.types.SqlDateStringType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.getSingleton:()Lcom/j256/ormlite/field/types/SqlDateStringType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L163874.  v0:= `@@com.j256.ormlite.field.types.SqlDateStringType.singleTon` @type ^`com.j256.ormlite.field.types.SqlDateStringType` @kind object;
  #L163878.  return v0 @kind object;
}
procedure `boolean` `isValidForField`(`com.j256.ormlite.field.types.SqlDateStringType` v2 @kind this, `java.lang.reflect.Field` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.isValidForField:(Ljava/lang/reflect/Field;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16388c.  call temp:= `getType`(v3) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L163892.  v0:= temp @kind object;
  #L163894.  v1:= constclass @type ^`java.sql.Date` @kind object;
  #L163898.  if v0 != v1 then goto L1638a0;
  #L16389c.  v0:= 1I;
  #L16389e.  return v0;
  #L1638a0.  v0:= 0I;
  #L1638a2.  goto L16389e;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.SqlDateStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1638b4.  v6:= (`java.sql.Date`) v6 @kind object;
  #L1638b8.  v0:= new `java.util.Date`;
  #L1638bc.  call temp:= `getTime`(v6) @signature `Ljava/sql/Date;.getTime:()J` @kind virtual;
  #L1638c2.  v2:= temp @kind wide;
  #L1638c4.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L1638ca.  call temp:= `javaToSqlArg`(v4, v5, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @kind super;
  #L1638d0.  v0:= temp @kind object;
  #L1638d2.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.SqlDateStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/SqlDateStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1638e4.  call temp:= `sqlArgToJava`(v4, v5, v6, v7) @signature `Lcom/j256/ormlite/field/types/DateStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind super;
  #L1638ea.  v0:= temp @kind object;
  #L1638ec.  v0:= (`java.util.Date`) v0 @kind object;
  #L1638f0.  v1:= new `java.sql.Date`;
  #L1638f4.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L1638fa.  v2:= temp @kind wide;
  #L1638fc.  call `<init>`(v1, v2) @signature `Ljava/sql/Date;.<init>:(J)V` @kind direct;
  #L163902.  return v1 @kind object;
}
