record `com.j256.ormlite.stmt.mapped.MappedRefresh` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` @kind class {
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.mapped.MappedRefresh` v6 @kind this, `com.j256.ormlite.table.TableInfo` v7 @kind object, `java.lang.String` v8 @kind object, `com.j256.ormlite.field.FieldType`[] v9 @kind object, `com.j256.ormlite.field.FieldType`[] v10 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedRefresh;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16cf20.  v5:= "refresh" @kind object;
  #L16cf24.  v0:= v6 @kind object;
  #L16cf26.  v1:= v7 @kind object;
  #L16cf28.  v2:= v8 @kind object;
  #L16cf2a.  v3:= v9 @kind object;
  #L16cf2c.  v4:= v10 @kind object;
  #L16cf2e.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)V` @kind direct;
  #L16cf34.  return @kind void;
}
procedure `com.j256.ormlite.stmt.mapped.MappedRefresh` `build`(`com.j256.ormlite.db.DatabaseType` v5 @kind object, `com.j256.ormlite.table.TableInfo` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedRefresh;.build:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;)Lcom/j256/ormlite/stmt/mapped/MappedRefresh;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16cf48.  call temp:= `getIdField`(v6) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16cf4e.  v0:= temp @kind object;
  #L16cf50.  if v0 != 0 then goto L16cf9a;
  #L16cf54.  v0:= new `java.sql.SQLException`;
  #L16cf58.  v1:= new `java.lang.StringBuilder`;
  #L16cf5c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16cf62.  v2:= "Cannot refresh " @kind object;
  #L16cf66.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cf6c.  v1:= temp @kind object;
  #L16cf6e.  call temp:= `getDataClass`(v6) @signature `Lcom/j256/ormlite/table/TableInfo;.getDataClass:()Ljava/lang/Class;` @kind virtual;
  #L16cf74.  v2:= temp @kind object;
  #L16cf76.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cf7c.  v1:= temp @kind object;
  #L16cf7e.  v2:= " because it doesn't have an id field" @kind object;
  #L16cf82.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cf88.  v1:= temp @kind object;
  #L16cf8a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16cf90.  v1:= temp @kind object;
  #L16cf92.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16cf98.  throw v0;
  #L16cf9a.  call temp:= `buildStatement`(v5, v6, v0) @signature `Lcom/j256/ormlite/stmt/mapped/MappedRefresh;.buildStatement:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind static;
  #L16cfa0.  v0:= temp @kind object;
  #L16cfa2.  v1:= new `com.j256.ormlite.stmt.mapped.MappedRefresh`;
  #L16cfa6.  v2:= 1I;
  #L16cfa8.  v2:= new `com.j256.ormlite.field.FieldType`[v2];
  #L16cfac.  v3:= 0I;
  #L16cfae.  call temp:= `getIdField`(v6) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16cfb4.  v4:= temp @kind object;
  #L16cfb6.  v2[v3]:= v4 @kind object;
  #L16cfba.  call temp:= `getFieldTypes`(v6) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16cfc0.  v3:= temp @kind object;
  #L16cfc2.  call `<init>`(v1, v6, v0, v2, v3) @signature `Lcom/j256/ormlite/stmt/mapped/MappedRefresh;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L16cfc8.  return v1 @kind object;
}
procedure `int` `executeRefresh`(`com.j256.ormlite.stmt.mapped.MappedRefresh` v7 @kind this, `com.j256.ormlite.support.DatabaseConnection` v8 @kind object, `java.lang.Object` v9 @kind object, `com.j256.ormlite.dao.ObjectCache` v10 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedRefresh;.executeRefresh:(Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L16cfdc.  v0:= 0I;
  #L16cfde.  v1:= v7.`com.j256.ormlite.stmt.mapped.MappedRefresh.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16cfe2.  call temp:= `extractJavaFieldValue`(v1, v9) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16cfe8.  v1:= temp @kind object;
  #L16cfea.  v2:= 0I;
  #L16cfec.  call temp:= `execute`(v7, v8, v1, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.execute:(Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind super;
  #L16cff2.  v2:= temp @kind object;
  #L16cff4.  if v2 != 0 then goto L16cffa;
  #L16cff8.  return v0;
  #L16cffa.  v3:= v7.`com.j256.ormlite.stmt.mapped.MappedRefresh.resultsFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L16cffe.  v4:= length @variable v3;
  #L16d000.  v1:= v0;
  #L16d002.  if v1 >= v4 then goto L16d026;
  #L16d006.  v5:= v3[v1] @kind object;
  #L16d00a.  v6:= v7.`com.j256.ormlite.stmt.mapped.MappedRefresh.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16d00e.  if v5 == v6 then goto L16d020;
  #L16d012.  call temp:= `extractJavaFieldValue`(v5, v2) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16d018.  v6:= temp @kind object;
  #L16d01a.  call `assignField`(v5, v9, v6, v0, v10) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L16d020.  v1:= v1 + 1;
  #L16d024.  goto L16d002;
  #L16d026.  v0:= 1I;
  #L16d028.  goto L16cff8;
}
