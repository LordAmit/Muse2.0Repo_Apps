record `com.j256.ormlite.stmt.query.InSubQuery` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.query.BaseComparison` @kind class {
  `boolean` `com.j256.ormlite.stmt.query.InSubQuery.in` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper` `com.j256.ormlite.stmt.query.InSubQuery.subQueryBuilder` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.InSubQuery` v2 @kind this, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper` v5 @kind object, `boolean` v6 ) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/stmt/QueryBuilder$InternalQueryBuilderWrapper;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L16dd54.  v0:= 0I;
  #L16dd56.  v1:= 1I;
  #L16dd58.  call `<init>`(v2, v3, v4, v0, v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Z)V` @kind direct;
  #L16dd5e.  v2.`com.j256.ormlite.stmt.query.InSubQuery.subQueryBuilder` @type ^`com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper` := v5 @kind object;
  #L16dd62.  v2.`com.j256.ormlite.stmt.query.InSubQuery.in` @type ^`boolean` := v6 @kind boolean;
  #L16dd66.  return @kind void;
}
procedure `void` `appendOperation`(`com.j256.ormlite.stmt.query.InSubQuery` v1 @kind this, `java.lang.StringBuilder` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.appendOperation:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16dd78.  v0:= v1.`com.j256.ormlite.stmt.query.InSubQuery.in` @type ^`boolean` @kind boolean;
  #L16dd7c.  if v0 == 0 then goto L16dd8c;
  #L16dd80.  v0:= "IN " @kind object;
  #L16dd84.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16dd8a.  return @kind void;
  #L16dd8c.  v0:= "NOT IN " @kind object;
  #L16dd90.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16dd96.  goto L16dd8a;
}
procedure `void` `appendSql`(`com.j256.ormlite.stmt.query.InSubQuery` v0 @kind this, `com.j256.ormlite.db.DatabaseType` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.StringBuilder` v3 @kind object, `java.util.List` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC_SYNTHETIC {
    temp;

  #L16dda8.  call `appendSql`(v0, v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind super;
  #L16ddae.  return @kind void;
}
procedure `void` `appendValue`(`com.j256.ormlite.stmt.query.InSubQuery` v5 @kind this, `com.j256.ormlite.db.DatabaseType` v6 @kind object, `java.lang.StringBuilder` v7 @kind object, `java.util.List` v8 @kind object) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16ddc0.  v4:= 0I;
  #L16ddc2.  v0:= 40I;
  #L16ddc6.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ddcc.  v0:= v5.`com.j256.ormlite.stmt.query.InSubQuery.subQueryBuilder` @type ^`com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper` @kind object;
  #L16ddd0.  call `appendStatementString`(v0, v7, v8) @signature `Lcom/j256/ormlite/stmt/QueryBuilder$InternalQueryBuilderWrapper;.appendStatementString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L16ddd6.  v0:= v5.`com.j256.ormlite.stmt.query.InSubQuery.subQueryBuilder` @type ^`com.j256.ormlite.stmt.QueryBuilder$InternalQueryBuilderWrapper` @kind object;
  #L16ddda.  call temp:= `getResultFieldTypes`(v0) @signature `Lcom/j256/ormlite/stmt/QueryBuilder$InternalQueryBuilderWrapper;.getResultFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16dde0.  v0:= temp @kind object;
  #L16dde2.  if v0 != 0 then goto L16ddf2;
  #L16dde6.  v0:= ") " @kind object;
  #L16ddea.  call temp:= `append`(v7, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ddf0.  return @kind void;
  #L16ddf2.  v1:= length @variable v0;
  #L16ddf4.  v2:= 1I;
  #L16ddf6.  if v1 == v2 then goto L16de2e;
  #L16ddfa.  v1:= new `java.sql.SQLException`;
  #L16ddfe.  v2:= new `java.lang.StringBuilder`;
  #L16de02.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16de08.  v3:= "There must be only 1 result column in sub-query but we found " @kind object;
  #L16de0c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16de12.  v2:= temp @kind object;
  #L16de14.  v0:= length @variable v0;
  #L16de16.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L16de1c.  v0:= temp @kind object;
  #L16de1e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16de24.  v0:= temp @kind object;
  #L16de26.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16de2c.  throw v1;
  #L16de2e.  v1:= v5.`com.j256.ormlite.stmt.query.InSubQuery.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16de32.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L16de38.  v1:= temp @kind object;
  #L16de3a.  v2:= v0[v4] @kind object;
  #L16de3e.  call temp:= `getSqlType`(v2) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L16de44.  v2:= temp @kind object;
  #L16de46.  if v1 == v2 then goto L16dde6;
  #L16de4a.  v1:= new `java.sql.SQLException`;
  #L16de4e.  v2:= new `java.lang.StringBuilder`;
  #L16de52.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16de58.  v3:= "Outer column " @kind object;
  #L16de5c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16de62.  v2:= temp @kind object;
  #L16de64.  v3:= v5.`com.j256.ormlite.stmt.query.InSubQuery.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16de68.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16de6e.  v2:= temp @kind object;
  #L16de70.  v3:= " is not the same type as inner column " @kind object;
  #L16de74.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16de7a.  v2:= temp @kind object;
  #L16de7c.  v0:= v0[v4] @kind object;
  #L16de80.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16de86.  v0:= temp @kind object;
  #L16de88.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16de8e.  v0:= temp @kind object;
  #L16de90.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16de96.  throw v1;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.stmt.query.InSubQuery` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L16dea8.  call temp:= `getColumnName`(v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.getColumnName:()Ljava/lang/String;` @kind super;
  #L16deae.  v0:= temp @kind object;
  #L16deb0.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.query.InSubQuery` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/InSubQuery;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L16dec4.  call temp:= `toString`(v1) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.toString:()Ljava/lang/String;` @kind super;
  #L16deca.  v0:= temp @kind object;
  #L16decc.  return v0 @kind object;
}
