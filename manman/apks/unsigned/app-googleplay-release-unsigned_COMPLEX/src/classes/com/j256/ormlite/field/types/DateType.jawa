record `com.j256.ormlite.field.types.DateType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDateType` @kind class {
}
global `com.j256.ormlite.field.types.DateType` `@@com.j256.ormlite.field.types.DateType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/DateType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L162288.  v0:= new `com.j256.ormlite.field.types.DateType`;
  #L16228c.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/DateType;.<init>:()V` @kind direct;
  #L162292.  `@@com.j256.ormlite.field.types.DateType.singleTon` @type ^`com.j256.ormlite.field.types.DateType` := v0 @kind object;
  #L162296.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/DateType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1622a8.  v0:= `@@com.j256.ormlite.field.SqlType.DATE` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L1622ac.  v1:= 1I;
  #L1622ae.  v1:= new `java.lang.Class`[v1];
  #L1622b2.  v2:= 0I;
  #L1622b4.  v3:= constclass @type ^`java.util.Date` @kind object;
  #L1622b8.  v1[v2]:= v3 @kind object;
  #L1622bc.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L1622c2.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/DateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L1622d4.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L1622da.  return @kind void;
}
procedure `com.j256.ormlite.field.types.DateType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/DateType;.getSingleton:()Lcom/j256/ormlite/field/types/DateType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1622ec.  v0:= `@@com.j256.ormlite.field.types.DateType.singleTon` @type ^`com.j256.ormlite.field.types.DateType` @kind object;
  #L1622f0.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` `getDefaultDateFormatConfig`(`com.j256.ormlite.field.types.DateType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateType;.getDefaultDateFormatConfig:()Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L162304.  v0:= `@@com.j256.ormlite.field.types.DateType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L162308.  return v0 @kind object;
}
procedure `boolean` `isArgumentHolderRequired`(`com.j256.ormlite.field.types.DateType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateType;.isArgumentHolderRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16231c.  v0:= 1I;
  #L16231e.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.DateType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/DateType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L162330.  v6:= (`java.util.Date`) v6 @kind object;
  #L162334.  v0:= new `java.sql.Timestamp`;
  #L162338.  call temp:= `getTime`(v6) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L16233e.  v2:= temp @kind wide;
  #L162340.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L162346.  return v0 @kind object;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.DateType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/DateType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L162358.  call temp:= `getDefaultDateFormatConfig`(v4) @signature `Lcom/j256/ormlite/field/types/DateType;.getDefaultDateFormatConfig:()Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind virtual;
  #L16235e.  v0:= temp @kind object;
  #L162360.  call temp:= `convertDateStringConfig`(v5, v0) @signature `Lcom/j256/ormlite/field/types/DateType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind static;
  #L162366.  v1:= temp @kind object;
  #Try_start0.  
  #L162368.  v0:= new `java.sql.Timestamp`;
  #L16236c.  call temp:= `parseDateString`(v1, v6) @signature `Lcom/j256/ormlite/field/types/DateType;.parseDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #L162372.  v2:= temp @kind object;
  #L162374.  call temp:= `getTime`(v2) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L16237a.  v2:= temp @kind wide;
  #L16237c.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #Try_end0.  
  #L162382.  return v0 @kind object;
  #L162384.  v0:= Exception @type ^`java.text.ParseException` @kind object;
  #L162386.  v2:= new `java.lang.StringBuilder`;
  #L16238a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L162390.  v3:= "Problems parsing default date string '" @kind object;
  #L162394.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16239a.  v2:= temp @kind object;
  #L16239c.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1623a2.  v2:= temp @kind object;
  #L1623a4.  v3:= "' using '" @kind object;
  #L1623a8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1623ae.  v2:= temp @kind object;
  #L1623b0.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1623b6.  v1:= temp @kind object;
  #L1623b8.  v2:= 39I;
  #L1623bc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1623c2.  v1:= temp @kind object;
  #L1623c4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1623ca.  v1:= temp @kind object;
  #L1623cc.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1623d2.  v0:= temp @kind object;
  #L1623d4.  throw v0;
  catch `java.text.ParseException` @[Try_start0..Try_end0] goto L162384;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.DateType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/DateType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1623f8.  call temp:= `getTimestamp`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getTimestamp:(I)Ljava/sql/Timestamp;` @kind interface;
  #L1623fe.  v0:= temp @kind object;
  #L162400.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.DateType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/DateType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L162414.  v6:= (`java.sql.Timestamp`) v6 @kind object;
  #L162418.  v0:= new `java.util.Date`;
  #L16241c.  call temp:= `getTime`(v6) @signature `Ljava/sql/Timestamp;.getTime:()J` @kind virtual;
  #L162422.  v2:= temp @kind wide;
  #L162424.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L16242a.  return v0 @kind object;
}
