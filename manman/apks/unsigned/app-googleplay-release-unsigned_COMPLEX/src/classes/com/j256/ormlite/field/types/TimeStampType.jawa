record `com.j256.ormlite.field.types.TimeStampType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.DateType` @kind class {
}
global `com.j256.ormlite.field.types.TimeStampType` `@@com.j256.ormlite.field.types.TimeStampType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/TimeStampType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L163dcc.  v0:= new `com.j256.ormlite.field.types.TimeStampType`;
  #L163dd0.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/TimeStampType;.<init>:()V` @kind direct;
  #L163dd6.  `@@com.j256.ormlite.field.types.TimeStampType.singleTon` @type ^`com.j256.ormlite.field.types.TimeStampType` := v0 @kind object;
  #L163dda.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.TimeStampType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/TimeStampType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L163dec.  v0:= `@@com.j256.ormlite.field.SqlType.DATE` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L163df0.  v1:= 1I;
  #L163df2.  v1:= new `java.lang.Class`[v1];
  #L163df6.  v2:= 0I;
  #L163df8.  v3:= constclass @type ^`java.sql.Timestamp` @kind object;
  #L163dfc.  v1[v2]:= v3 @kind object;
  #L163e00.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/DateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L163e06.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.TimeStampType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L163e18.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/DateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L163e1e.  return @kind void;
}
procedure `com.j256.ormlite.field.types.TimeStampType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/TimeStampType;.getSingleton:()Lcom/j256/ormlite/field/types/TimeStampType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L163e30.  v0:= `@@com.j256.ormlite.field.types.TimeStampType.singleTon` @type ^`com.j256.ormlite.field.types.TimeStampType` @kind object;
  #L163e34.  return v0 @kind object;
}
procedure `boolean` `isValidForField`(`com.j256.ormlite.field.types.TimeStampType` v2 @kind this, `java.lang.reflect.Field` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampType;.isValidForField:(Ljava/lang/reflect/Field;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L163e48.  call temp:= `getType`(v3) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L163e4e.  v0:= temp @kind object;
  #L163e50.  v1:= constclass @type ^`java.sql.Timestamp` @kind object;
  #L163e54.  if v0 != v1 then goto L163e5c;
  #L163e58.  v0:= 1I;
  #L163e5a.  return v0;
  #L163e5c.  v0:= 0I;
  #L163e5e.  goto L163e5a;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.TimeStampType` v0 @kind this, `com.j256.ormlite.field.FieldType` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L163e70.  return v2 @kind object;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.TimeStampType` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L163e84.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L163e8a.  v2:= temp @kind wide;
  #L163e8c.  if v7 != 0 then goto L163e9c;
  #L163e90.  v0:= new `java.sql.Timestamp`;
  #L163e94.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L163e9a.  return v0 @kind object;
  #L163e9c.  v7:= (`java.sql.Timestamp`) v7 @kind object;
  #L163ea0.  call temp:= `getTime`(v7) @signature `Ljava/sql/Timestamp;.getTime:()J` @kind virtual;
  #L163ea6.  v0:= temp @kind wide;
  #L163ea8.  v0:= lcmp(v2, v0);
  #L163eac.  if v0 != 0 then goto L163ec2;
  #L163eb0.  v0:= new `java.sql.Timestamp`;
  #L163eb4.  v4:= 1L;
  #L163eb8.  v2:= v2 + v4 @kind long;
  #L163eba.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L163ec0.  goto L163e9a;
  #L163ec2.  v0:= new `java.sql.Timestamp`;
  #L163ec6.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L163ecc.  goto L163e9a;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.TimeStampType` v0 @kind this, `com.j256.ormlite.field.FieldType` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lcom/j256/ormlite/field/types/TimeStampType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L163ee0.  return v2 @kind object;
}
