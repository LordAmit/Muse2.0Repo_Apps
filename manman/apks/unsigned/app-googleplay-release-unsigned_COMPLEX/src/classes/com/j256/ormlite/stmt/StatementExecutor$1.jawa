record `com.j256.ormlite.stmt.StatementExecutor$1` @kind class @AccessFlag  extends `java.lang.ThreadLocal` @kind class {
  `com.j256.ormlite.stmt.StatementExecutor` `com.j256.ormlite.stmt.StatementExecutor$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.StatementExecutor$1` v0 @kind this, `com.j256.ormlite.stmt.StatementExecutor` v1 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$1;.<init>:(Lcom/j256/ormlite/stmt/StatementExecutor;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1693b4.  v0.`com.j256.ormlite.stmt.StatementExecutor$1.this$0` @type ^`com.j256.ormlite.stmt.StatementExecutor` := v1 @kind object;
  #L1693b8.  call `<init>`(v0) @signature `Ljava/lang/ThreadLocal;.<init>:()V` @kind direct;
  #L1693be.  return @kind void;
}
procedure `java.lang.Boolean` `initialValue`(`com.j256.ormlite.stmt.StatementExecutor$1` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$1;.initialValue:()Ljava/lang/Boolean;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L1693d0.  v0:= 0I;
  #L1693d2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1693d8.  v0:= temp @kind object;
  #L1693da.  return v0 @kind object;
}
procedure `java.lang.Object` `initialValue`(`com.j256.ormlite.stmt.StatementExecutor$1` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$1;.initialValue:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L1693ec.  call temp:= `initialValue`(v1) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$1;.initialValue:()Ljava/lang/Boolean;` @kind virtual;
  #L1693f2.  v0:= temp @kind object;
  #L1693f4.  return v0 @kind object;
}
