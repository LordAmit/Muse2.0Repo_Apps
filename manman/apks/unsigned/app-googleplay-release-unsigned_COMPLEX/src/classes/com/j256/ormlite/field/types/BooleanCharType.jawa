record `com.j256.ormlite.field.types.BooleanCharType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BooleanType` @kind class {
}
global `java.lang.String` `@@com.j256.ormlite.field.types.BooleanCharType.DEFAULT_TRUE_FALSE_FORMAT` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.j256.ormlite.field.types.BooleanCharType` `@@com.j256.ormlite.field.types.BooleanCharType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1612f4.  v0:= new `com.j256.ormlite.field.types.BooleanCharType`;
  #L1612f8.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.<init>:()V` @kind direct;
  #L1612fe.  `@@com.j256.ormlite.field.types.BooleanCharType.singleTon` @type ^`com.j256.ormlite.field.types.BooleanCharType` := v0 @kind object;
  #L161302.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L161314.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L161318.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BooleanType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L16131e.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BooleanCharType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.getSingleton:()Lcom/j256/ormlite/field/types/BooleanCharType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L161330.  v0:= `@@com.j256.ormlite.field.types.BooleanCharType.singleTon` @type ^`com.j256.ormlite.field.types.BooleanCharType` @kind object;
  #L161334.  return v0 @kind object;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.BooleanCharType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L161348.  call temp:= `getDataTypeConfigObj`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @kind virtual;
  #L16134e.  v0:= temp @kind object;
  #L161350.  v0:= (`java.lang.String`) v0 @kind object;
  #L161354.  v4:= (`java.lang.Boolean`) v4 @kind object;
  #L161358.  call temp:= `booleanValue`(v4) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L16135e.  v1:= temp;
  #L161360.  if v1 == 0 then goto L161378;
  #L161364.  v1:= 0I;
  #L161366.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L16136c.  v0:= temp;
  #L16136e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L161374.  v0:= temp @kind object;
  #L161376.  return v0 @kind object;
  #L161378.  v1:= 1I;
  #L16137a.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L161380.  v0:= temp;
  #L161382.  goto L16136e;
}
procedure `java.lang.Object` `makeConfigObject`(`com.j256.ormlite.field.types.BooleanCharType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.makeConfigObject:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L161394.  call temp:= `getFormat`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L16139a.  v0:= temp @kind object;
  #L16139c.  if v0 != 0 then goto L1613a6;
  #L1613a0.  v0:= "10" @kind object;
  #L1613a4.  return v0 @kind object;
  #L1613a6.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1613ac.  v1:= temp;
  #L1613ae.  v2:= 2I;
  #L1613b0.  if v1 != v2 then goto L1613cc;
  #L1613b4.  v1:= 0I;
  #L1613b6.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1613bc.  v1:= temp;
  #L1613be.  v2:= 1I;
  #L1613c0.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1613c6.  v2:= temp;
  #L1613c8.  if v1 != v2 then goto L1613a4;
  #L1613cc.  v1:= new `java.sql.SQLException`;
  #L1613d0.  v2:= new `java.lang.StringBuilder`;
  #L1613d4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1613da.  v3:= "Invalid boolean format must have 2 different characters that represent true/false like \"10\" or \"tf\": " @kind object;
  #L1613de.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1613e4.  v2:= temp @kind object;
  #L1613e6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1613ec.  v0:= temp @kind object;
  #L1613ee.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1613f4.  v0:= temp @kind object;
  #L1613f6.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1613fc.  throw v1;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L161410.  call temp:= `parseBoolean`(v3) @signature `Ljava/lang/Boolean;.parseBoolean:(Ljava/lang/String;)Z` @kind static;
  #L161416.  v0:= temp;
  #L161418.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L16141e.  v0:= temp @kind object;
  #L161420.  call temp:= `javaToSqlArg`(v1, v2, v0) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L161426.  v0:= temp @kind object;
  #L161428.  return v0 @kind object;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16143c.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L161442.  v0:= temp;
  #L161444.  if v0 != 0 then goto L16144e;
  #L161448.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L16144c.  return v0 @kind object;
  #L16144e.  v0:= 0I;
  #L161450.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L161456.  v0:= temp;
  #L161458.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L16145e.  v0:= temp @kind object;
  #L161460.  call temp:= `sqlArgToJava`(v1, v2, v0, v4) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L161466.  v0:= temp @kind object;
  #L161468.  goto L16144c;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16147c.  call temp:= `getChar`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getChar:(I)C` @kind interface;
  #L161482.  v0:= temp;
  #L161484.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L16148a.  v0:= temp @kind object;
  #L16148c.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.BooleanCharType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.Object` v5 @kind object, `int` v6 ) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1614a0.  call temp:= `getDataTypeConfigObj`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @kind virtual;
  #L1614a6.  v0:= temp @kind object;
  #L1614a8.  v0:= (`java.lang.String`) v0 @kind object;
  #L1614ac.  v5:= (`java.lang.Character`) v5 @kind object;
  #L1614b0.  call temp:= `charValue`(v5) @signature `Ljava/lang/Character;.charValue:()C` @kind virtual;
  #L1614b6.  v1:= temp;
  #L1614b8.  v2:= 0I;
  #L1614ba.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1614c0.  v0:= temp;
  #L1614c2.  if v1 != v0 then goto L1614cc;
  #L1614c6.  v0:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L1614ca.  return v0 @kind object;
  #L1614cc.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L1614d0.  goto L1614ca;
}
