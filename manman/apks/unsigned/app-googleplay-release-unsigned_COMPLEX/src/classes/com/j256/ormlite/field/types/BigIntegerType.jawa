record `com.j256.ormlite.field.types.BigIntegerType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `int` `@@com.j256.ormlite.field.types.BigIntegerType.DEFAULT_WIDTH` @AccessFlag PUBLIC_STATIC;
global `com.j256.ormlite.field.types.BigIntegerType` `@@com.j256.ormlite.field.types.BigIntegerType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L160f00.  v0:= 255I;
  #L160f04.  `@@com.j256.ormlite.field.types.BigIntegerType.DEFAULT_WIDTH` @type ^`int` := v0;
  #L160f08.  v0:= new `com.j256.ormlite.field.types.BigIntegerType`;
  #L160f0c.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.<init>:()V` @kind direct;
  #L160f12.  `@@com.j256.ormlite.field.types.BigIntegerType.singleTon` @type ^`com.j256.ormlite.field.types.BigIntegerType` := v0 @kind object;
  #L160f16.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BigIntegerType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L160f28.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L160f2c.  v1:= 1I;
  #L160f2e.  v1:= new `java.lang.Class`[v1];
  #L160f32.  v2:= 0I;
  #L160f34.  v3:= constclass @type ^`java.math.BigInteger` @kind object;
  #L160f38.  v1[v2]:= v3 @kind object;
  #L160f3c.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L160f42.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BigIntegerType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L160f54.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L160f5a.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BigIntegerType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.getSingleton:()Lcom/j256/ormlite/field/types/BigIntegerType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L160f6c.  v0:= `@@com.j256.ormlite.field.types.BigIntegerType.singleTon` @type ^`com.j256.ormlite.field.types.BigIntegerType` @kind object;
  #L160f70.  return v0 @kind object;
}
procedure `java.lang.Object` `convertIdNumber`(`com.j256.ormlite.field.types.BigIntegerType` v2 @kind this, `java.lang.Number` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.convertIdNumber:(Ljava/lang/Number;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L160f84.  call temp:= `longValue`(v3) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L160f8a.  v0:= temp @kind wide;
  #L160f8c.  call temp:= `valueOf`(v0) @signature `Ljava/math/BigInteger;.valueOf:(J)Ljava/math/BigInteger;` @kind static;
  #L160f92.  v0:= temp @kind object;
  #L160f94.  return v0 @kind object;
}
procedure `boolean` `isValidForVersion`(`com.j256.ormlite.field.types.BigIntegerType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.isValidForVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160fa8.  v0:= 1I;
  #L160faa.  return v0;
}
procedure `boolean` `isValidGeneratedType`(`com.j256.ormlite.field.types.BigIntegerType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.isValidGeneratedType:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160fbc.  v0:= 1I;
  #L160fbe.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.BigIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160fd0.  v3:= (`java.math.BigInteger`) v3 @kind object;
  #L160fd4.  call temp:= `toString`(v3) @signature `Ljava/math/BigInteger;.toString:()Ljava/lang/String;` @kind virtual;
  #L160fda.  v0:= temp @kind object;
  #L160fdc.  return v0 @kind object;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.BigIntegerType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160ff0.  if v2 != 0 then goto L160ffa;
  #L160ff4.  v0:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L160ff8.  return v0 @kind object;
  #L160ffa.  v2:= (`java.math.BigInteger`) v2 @kind object;
  #L160ffe.  v0:= `@@java.math.BigInteger.ONE` @type ^`java.math.BigInteger` @kind object;
  #L161002.  call temp:= `add`(v2, v0) @signature `Ljava/math/BigInteger;.add:(Ljava/math/BigInteger;)Ljava/math/BigInteger;` @kind virtual;
  #L161008.  v0:= temp @kind object;
  #L16100a.  goto L160ff8;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.BigIntegerType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L16101c.  v0:= new `java.math.BigInteger`;
  #L161020.  call `<init>`(v0, v5) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L161026.  call temp:= `toString`(v0) @signature `Ljava/math/BigInteger;.toString:()Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L16102c.  v0:= temp @kind object;
  #L16102e.  return v0 @kind object;
  #L161030.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L161032.  v1:= new `java.lang.StringBuilder`;
  #L161036.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16103c.  v2:= "Problems with field " @kind object;
  #L161040.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161046.  v1:= temp @kind object;
  #L161048.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16104e.  v1:= temp @kind object;
  #L161050.  v2:= " parsing default BigInteger string '" @kind object;
  #L161054.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16105a.  v1:= temp @kind object;
  #L16105c.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161062.  v1:= temp @kind object;
  #L161064.  v2:= "'" @kind object;
  #L161068.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16106e.  v1:= temp @kind object;
  #L161070.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L161076.  v1:= temp @kind object;
  #L161078.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16107e.  v0:= temp @kind object;
  #L161080.  throw v0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L161030;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.BigIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1610a4.  call temp:= `getString`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getString:(I)Ljava/lang/String;` @kind interface;
  #L1610aa.  v0:= temp @kind object;
  #L1610ac.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.BigIntegerType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/BigIntegerType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L1610c0.  v2:= new `java.math.BigInteger`;
  #L1610c4.  v0:= v6 @kind object;
  #L1610c6.  v0:= (`java.lang.String`) v0 @kind object;
  #L1610ca.  v1:= v0 @kind object;
  #L1610cc.  call `<init>`(v2, v1) @signature `Ljava/math/BigInteger;.<init>:(Ljava/lang/String;)V` @kind direct;
  #Try_end0.  
  #L1610d2.  return v2 @kind object;
  #L1610d4.  v1:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L1610d6.  v2:= new `java.lang.StringBuilder`;
  #L1610da.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1610e0.  v3:= "Problems with column " @kind object;
  #L1610e4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1610ea.  v2:= temp @kind object;
  #L1610ec.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1610f2.  v2:= temp @kind object;
  #L1610f4.  v3:= " parsing BigInteger string '" @kind object;
  #L1610f8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1610fe.  v2:= temp @kind object;
  #L161100.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161106.  v2:= temp @kind object;
  #L161108.  v3:= "'" @kind object;
  #L16110c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161112.  v2:= temp @kind object;
  #L161114.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16111a.  v2:= temp @kind object;
  #L16111c.  call temp:= `create`(v2, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L161122.  v1:= temp @kind object;
  #L161124.  throw v1;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L1610d4;
}
