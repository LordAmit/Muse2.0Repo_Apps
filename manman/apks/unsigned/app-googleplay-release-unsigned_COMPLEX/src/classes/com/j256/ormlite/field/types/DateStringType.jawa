record `com.j256.ormlite.field.types.DateStringType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDateType` @kind class {
}
global `int` `@@com.j256.ormlite.field.types.DateStringType.DEFAULT_WIDTH` @AccessFlag PUBLIC_STATIC;
global `com.j256.ormlite.field.types.DateStringType` `@@com.j256.ormlite.field.types.DateStringType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/DateStringType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L161c58.  v0:= 50I;
  #L161c5c.  `@@com.j256.ormlite.field.types.DateStringType.DEFAULT_WIDTH` @type ^`int` := v0;
  #L161c60.  v0:= new `com.j256.ormlite.field.types.DateStringType`;
  #L161c64.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:()V` @kind direct;
  #L161c6a.  `@@com.j256.ormlite.field.types.DateStringType.singleTon` @type ^`com.j256.ormlite.field.types.DateStringType` := v0 @kind object;
  #L161c6e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L161c80.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L161c84.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L161c8a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateStringType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L161c9c.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L161ca2.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateStringType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L161cb4.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L161cba.  return @kind void;
}
procedure `com.j256.ormlite.field.types.DateStringType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/DateStringType;.getSingleton:()Lcom/j256/ormlite/field/types/DateStringType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L161ccc.  v0:= `@@com.j256.ormlite.field.types.DateStringType.singleTon` @type ^`com.j256.ormlite.field.types.DateStringType` @kind object;
  #L161cd0.  return v0 @kind object;
}
procedure `int` `getDefaultWidth`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateStringType;.getDefaultWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L161ce4.  v0:= `@@com.j256.ormlite.field.types.DateStringType.DEFAULT_WIDTH` @type ^`int`;
  #L161ce8.  return v0;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateStringType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L161cfc.  v0:= constclass @type ^`byte`[] @kind object;
  #L161d00.  return v0 @kind object;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L161d14.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L161d18.  call temp:= `convertDateStringConfig`(v2, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind static;
  #L161d1e.  v0:= temp @kind object;
  #L161d20.  call temp:= `getDateFormat`(v0) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.getDateFormat:()Ljava/text/DateFormat;` @kind virtual;
  #L161d26.  v0:= temp @kind object;
  #L161d28.  v3:= (`java.util.Date`) v3 @kind object;
  #L161d2c.  call temp:= `format`(v0, v3) @signature `Ljava/text/DateFormat;.format:(Ljava/util/Date;)Ljava/lang/String;` @kind virtual;
  #L161d32.  v0:= temp @kind object;
  #L161d34.  return v0 @kind object;
}
procedure `java.lang.Object` `makeConfigObject`(`com.j256.ormlite.field.types.DateStringType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.makeConfigObject:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L161d48.  call temp:= `getFormat`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L161d4e.  v1:= temp @kind object;
  #L161d50.  if v1 != 0 then goto L161d5a;
  #L161d54.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L161d58.  return v0 @kind object;
  #L161d5a.  v0:= new `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig`;
  #L161d5e.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L161d64.  goto L161d58;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.DateStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.String` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/DateStringType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L161d78.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L161d7c.  call temp:= `convertDateStringConfig`(v5, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind static;
  #L161d82.  v0:= temp @kind object;
  #Try_start0.  
  #L161d84.  call temp:= `normalizeDateString`(v0, v6) @signature `Lcom/j256/ormlite/field/types/DateStringType;.normalizeDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #Try_end0.  
  #L161d8a.  v0:= temp @kind object;
  #L161d8c.  return v0 @kind object;
  #L161d8e.  v1:= Exception @type ^`java.text.ParseException` @kind object;
  #L161d90.  v2:= new `java.lang.StringBuilder`;
  #L161d94.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L161d9a.  v3:= "Problems with field " @kind object;
  #L161d9e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161da4.  v2:= temp @kind object;
  #L161da6.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161dac.  v2:= temp @kind object;
  #L161dae.  v3:= " parsing default date-string '" @kind object;
  #L161db2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161db8.  v2:= temp @kind object;
  #L161dba.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161dc0.  v2:= temp @kind object;
  #L161dc2.  v3:= "' using '" @kind object;
  #L161dc6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161dcc.  v2:= temp @kind object;
  #L161dce.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161dd4.  v0:= temp @kind object;
  #L161dd6.  v2:= "'" @kind object;
  #L161dda.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161de0.  v0:= temp @kind object;
  #L161de2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L161de8.  v0:= temp @kind object;
  #L161dea.  call temp:= `create`(v0, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L161df0.  v0:= temp @kind object;
  #L161df2.  throw v0;
  catch `java.text.ParseException` @[Try_start0..Try_end0] goto L161d8e;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/DateStringType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L161e14.  call temp:= `sqlArgToJava`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/field/types/DateStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L161e1a.  v0:= temp @kind object;
  #L161e1c.  return v0 @kind object;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.DateStringType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/DateStringType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L161e30.  call temp:= `getString`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getString:(I)Ljava/lang/String;` @kind interface;
  #L161e36.  v0:= temp @kind object;
  #L161e38.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.DateStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/DateStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L161e4c.  v6:= (`java.lang.String`) v6 @kind object;
  #L161e50.  v0:= `@@com.j256.ormlite.field.types.DateStringType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` @kind object;
  #L161e54.  call temp:= `convertDateStringConfig`(v5, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @kind static;
  #L161e5a.  v0:= temp @kind object;
  #Try_start0.  
  #L161e5c.  call temp:= `parseDateString`(v0, v6) @signature `Lcom/j256/ormlite/field/types/DateStringType;.parseDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/util/Date;` @kind static;
  #Try_end0.  
  #L161e62.  v0:= temp @kind object;
  #L161e64.  return v0 @kind object;
  #L161e66.  v1:= Exception @type ^`java.text.ParseException` @kind object;
  #L161e68.  v2:= new `java.lang.StringBuilder`;
  #L161e6c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L161e72.  v3:= "Problems with column " @kind object;
  #L161e76.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161e7c.  v2:= temp @kind object;
  #L161e7e.  call temp:= `append`(v2, v7) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L161e84.  v2:= temp @kind object;
  #L161e86.  v3:= " parsing date-string '" @kind object;
  #L161e8a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161e90.  v2:= temp @kind object;
  #L161e92.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161e98.  v2:= temp @kind object;
  #L161e9a.  v3:= "' using '" @kind object;
  #L161e9e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161ea4.  v2:= temp @kind object;
  #L161ea6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161eac.  v0:= temp @kind object;
  #L161eae.  v2:= "'" @kind object;
  #L161eb2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L161eb8.  v0:= temp @kind object;
  #L161eba.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L161ec0.  v0:= temp @kind object;
  #L161ec2.  call temp:= `create`(v0, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L161ec8.  v0:= temp @kind object;
  #L161eca.  throw v0;
  catch `java.text.ParseException` @[Try_start0..Try_end0] goto L161e66;
}
