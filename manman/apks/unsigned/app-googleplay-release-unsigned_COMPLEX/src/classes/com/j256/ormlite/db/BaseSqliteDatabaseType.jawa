record `com.j256.ormlite.db.BaseSqliteDatabaseType` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.db.BaseDatabaseType` @kind class {
}
global `com.j256.ormlite.field.FieldConverter` `@@com.j256.ormlite.db.BaseSqliteDatabaseType.booleanConverter` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15b0fc.  v0:= new `com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter`;
  #L15b100.  call `<init>`(v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.<init>:()V` @kind direct;
  #L15b106.  `@@com.j256.ormlite.db.BaseSqliteDatabaseType.booleanConverter` @type ^`com.j256.ormlite.field.FieldConverter` := v0 @kind object;
  #L15b10a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v0 @kind this) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15b11c.  call `<init>`(v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.<init>:()V` @kind direct;
  #L15b122.  return @kind void;
}
procedure `void` `appendInsertNoColumns`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.appendInsertNoColumns:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b134.  v0:= "DEFAULT VALUES" @kind object;
  #L15b138.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b13e.  return @kind void;
}
procedure `void` `appendLongType`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.appendLongType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L15b150.  call temp:= `getSqlType`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L15b156.  v0:= temp @kind object;
  #L15b158.  v1:= `@@com.j256.ormlite.field.SqlType.LONG` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15b15c.  if v0 != v1 then goto L15b178;
  #L15b160.  call temp:= `isGeneratedId`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L15b166.  v0:= temp;
  #L15b168.  if v0 == 0 then goto L15b178;
  #L15b16c.  v0:= "INTEGER" @kind object;
  #L15b170.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b176.  return @kind void;
  #L15b178.  v0:= "BIGINT" @kind object;
  #L15b17c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b182.  goto L15b176;
}
procedure `void` `configureGeneratedId`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.StringBuilder` v4 @kind object, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.util.List` v6 @kind object, `java.util.List` v7 @kind object, `java.util.List` v8 @kind object, `java.util.List` v9 @kind object) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.configureGeneratedId:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L15b194.  call temp:= `getSqlType`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L15b19a.  v0:= temp @kind object;
  #L15b19c.  v1:= `@@com.j256.ormlite.field.SqlType.INTEGER` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15b1a0.  if v0 == v1 then goto L15b1c4;
  #L15b1a4.  call temp:= `getSqlType`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L15b1aa.  v0:= temp @kind object;
  #L15b1ac.  v1:= `@@com.j256.ormlite.field.SqlType.LONG` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15b1b0.  if v0 == v1 then goto L15b1c4;
  #L15b1b4.  v0:= new `java.lang.IllegalArgumentException`;
  #L15b1b8.  v1:= "Sqlite requires that auto-increment generated-id be integer or long type" @kind object;
  #L15b1bc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15b1c2.  throw v0;
  #L15b1c4.  v0:= "PRIMARY KEY AUTOINCREMENT " @kind object;
  #L15b1c8.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b1ce.  return @kind void;
}
procedure `boolean` `generatedIdSqlAtEnd`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.generatedIdSqlAtEnd:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15b1e0.  v0:= 0I;
  #L15b1e2.  return v0;
}
procedure `com.j256.ormlite.field.FieldConverter` `getFieldConverter`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v2 @kind this, `com.j256.ormlite.field.DataPersister` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.getFieldConverter:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/FieldConverter;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15b1f4.  v0:= `@@com.j256.ormlite.db.BaseSqliteDatabaseType$1.$SwitchMap$com$j256$ormlite$field$SqlType` @type ^`int`[] @kind object;
  #L15b1f8.  call temp:= `getSqlType`(v3) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L15b1fe.  v1:= temp @kind object;
  #L15b200.  call temp:= `ordinal`(v1) @signature `Lcom/j256/ormlite/field/SqlType;.ordinal:()I` @kind virtual;
  #L15b206.  v1:= temp;
  #L15b208.  v0:= v0[v1];
  #L15b20c.  goto L15b22c;
  #L15b212.  call temp:= `getFieldConverter`(v2, v3, v4) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getFieldConverter:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/FieldConverter;` @kind super;
  #L15b218.  v0:= temp @kind object;
  #L15b21a.  return v0 @kind object;
  #L15b21c.  v0:= `@@com.j256.ormlite.db.BaseSqliteDatabaseType.booleanConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L15b220.  goto L15b21a;
  #L15b222.  call temp:= `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.getSingleton:()Lcom/j256/ormlite/field/types/BigDecimalStringType;` @kind static;
  #L15b228.  v0:= temp @kind object;
  #L15b22a.  goto L15b21a;
  #L15b22c.  switch v0
                  | 1 => goto L15b21c
                  | 2 => goto L15b222
                  | else => goto L15b212;
}
procedure `boolean` `isCreateIfNotExistsSupported`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.isCreateIfNotExistsSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b24c.  v0:= 1I;
  #L15b24e.  return v0;
}
procedure `boolean` `isCreateTableReturnsZero`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.isCreateTableReturnsZero:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b260.  v0:= 0I;
  #L15b262.  return v0;
}
procedure `boolean` `isVarcharFieldWidthSupported`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.isVarcharFieldWidthSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b274.  v0:= 0I;
  #L15b276.  return v0;
}
