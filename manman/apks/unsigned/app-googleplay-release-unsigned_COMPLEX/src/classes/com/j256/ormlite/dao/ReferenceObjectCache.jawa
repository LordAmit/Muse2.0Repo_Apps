record `com.j256.ormlite.dao.ReferenceObjectCache` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.dao.ObjectCache` @kind interface {
  `java.util.concurrent.ConcurrentHashMap` `com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.j256.ormlite.dao.ReferenceObjectCache.useWeak` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `boolean` v2 ) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.<init>:(Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1584ac.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1584b2.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L1584b6.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L1584bc.  v1.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` := v0 @kind object;
  #L1584c0.  v1.`com.j256.ormlite.dao.ReferenceObjectCache.useWeak` @type ^`boolean` := v2 @kind boolean;
  #L1584c4.  return @kind void;
}
procedure `void` `cleanMap`(`com.j256.ormlite.dao.ReferenceObjectCache` v2 @kind this, `java.util.Map` v3 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.cleanMap:(Ljava/util/Map;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1584d8.  call temp:= `entrySet`(v3) @signature `Ljava/util/Map;.entrySet:()Ljava/util/Set;` @kind interface;
  #L1584de.  v0:= temp @kind object;
  #L1584e0.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1584e6.  v1:= temp @kind object;
  #L1584e8.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1584ee.  v0:= temp;
  #L1584f0.  if v0 == 0 then goto L158520;
  #L1584f4.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1584fa.  v0:= temp @kind object;
  #L1584fc.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L158500.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L158506.  v0:= temp @kind object;
  #L158508.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L15850c.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L158512.  v0:= temp @kind object;
  #L158514.  if v0 != 0 then goto L1584e8;
  #L158518.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L15851e.  goto L1584e8;
  #L158520.  return @kind void;
}
procedure `java.util.Map` `getMapForClass`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L158534.  v0:= v1.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L158538.  call temp:= `get`(v0, v2) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15853e.  v0:= temp @kind object;
  #L158540.  v0:= (`java.util.Map`) v0 @kind object;
  #L158544.  if v0 != 0 then goto L15854a;
  #L158548.  v0:= 0I;
  #L15854a.  return v0 @kind object;
}
procedure `com.j256.ormlite.dao.ReferenceObjectCache` `makeSoftCache`() @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.makeSoftCache:()Lcom/j256/ormlite/dao/ReferenceObjectCache;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L15855c.  v0:= new `com.j256.ormlite.dao.ReferenceObjectCache`;
  #L158560.  v1:= 0I;
  #L158562.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.<init>:(Z)V` @kind direct;
  #L158568.  return v0 @kind object;
}
procedure `com.j256.ormlite.dao.ReferenceObjectCache` `makeWeakCache`() @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.makeWeakCache:()Lcom/j256/ormlite/dao/ReferenceObjectCache;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L15857c.  v0:= new `com.j256.ormlite.dao.ReferenceObjectCache`;
  #L158580.  v1:= 1I;
  #L158582.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.<init>:(Z)V` @kind direct;
  #L158588.  return v0 @kind object;
}
procedure `void` `cleanNullReferences`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.cleanNullReferences:(Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15859c.  call temp:= `getMapForClass`(v1, v2) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L1585a2.  v0:= temp @kind object;
  #L1585a4.  if v0 == 0 then goto L1585ae;
  #L1585a8.  call `cleanMap`(v1, v0) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.cleanMap:(Ljava/util/Map;)V` @kind direct;
  #L1585ae.  return @kind void;
}
procedure `void` `cleanNullReferencesAll`(`com.j256.ormlite.dao.ReferenceObjectCache` v2 @kind this) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.cleanNullReferencesAll:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1585c0.  v0:= v2.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L1585c4.  call temp:= `values`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L1585ca.  v0:= temp @kind object;
  #L1585cc.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1585d2.  v1:= temp @kind object;
  #L1585d4.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1585da.  v0:= temp;
  #L1585dc.  if v0 == 0 then goto L1585f4;
  #L1585e0.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1585e6.  v0:= temp @kind object;
  #L1585e8.  v0:= (`java.util.Map`) v0 @kind object;
  #L1585ec.  call `cleanMap`(v2, v0) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.cleanMap:(Ljava/util/Map;)V` @kind direct;
  #L1585f2.  goto L1585d4;
  #L1585f4.  return @kind void;
}
procedure `void` `clear`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.clear:(Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L158608.  call temp:= `getMapForClass`(v1, v2) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L15860e.  v0:= temp @kind object;
  #L158610.  if v0 == 0 then goto L15861a;
  #L158614.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L15861a.  return @kind void;
}
procedure `void` `clearAll`(`com.j256.ormlite.dao.ReferenceObjectCache` v2 @kind this) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.clearAll:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15862c.  v0:= v2.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L158630.  call temp:= `values`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L158636.  v0:= temp @kind object;
  #L158638.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15863e.  v1:= temp @kind object;
  #L158640.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L158646.  v0:= temp;
  #L158648.  if v0 == 0 then goto L158660;
  #L15864c.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L158652.  v0:= temp @kind object;
  #L158654.  v0:= (`java.util.Map`) v0 @kind object;
  #L158658.  call `clear`(v0) @signature `Ljava/util/Map;.clear:()V` @kind interface;
  #L15865e.  goto L158640;
  #L158660.  return @kind void;
}
procedure `java.lang.Object` `get`(`com.j256.ormlite.dao.ReferenceObjectCache` v3 @kind this, `java.lang.Class` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.get:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L158674.  v1:= 0I;
  #L158676.  call temp:= `getMapForClass`(v3, v4) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L15867c.  v2:= temp @kind object;
  #L15867e.  if v2 != 0 then goto L158686;
  #L158682.  v0:= v1 @kind object;
  #L158684.  return v0 @kind object;
  #L158686.  call temp:= `get`(v2, v5) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15868c.  v0:= temp @kind object;
  #L15868e.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L158692.  if v0 != 0 then goto L15869a;
  #L158696.  v0:= v1 @kind object;
  #L158698.  goto L158684;
  #L15869a.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L1586a0.  v0:= temp @kind object;
  #L1586a2.  if v0 != 0 then goto L158684;
  #L1586a6.  call temp:= `remove`(v2, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1586ac.  v0:= v1 @kind object;
  #L1586ae.  goto L158684;
}
procedure `void` `put`(`com.j256.ormlite.dao.ReferenceObjectCache` v2 @kind this, `java.lang.Class` v3 @kind object, `java.lang.Object` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.put:(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1586c0.  call temp:= `getMapForClass`(v2, v3) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L1586c6.  v0:= temp @kind object;
  #L1586c8.  if v0 == 0 then goto L1586e4;
  #L1586cc.  v1:= v2.`com.j256.ormlite.dao.ReferenceObjectCache.useWeak` @type ^`boolean` @kind boolean;
  #L1586d0.  if v1 == 0 then goto L1586e6;
  #L1586d4.  v1:= new `java.lang.ref.WeakReference`;
  #L1586d8.  call `<init>`(v1, v5) @signature `Ljava/lang/ref/WeakReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1586de.  call temp:= `put`(v0, v4, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1586e4.  return @kind void;
  #L1586e6.  v1:= new `java.lang.ref.SoftReference`;
  #L1586ea.  call `<init>`(v1, v5) @signature `Ljava/lang/ref/SoftReference;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1586f0.  call temp:= `put`(v0, v4, v1) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1586f6.  goto L1586e4;
}
procedure `void` `registerClass`(`com.j256.ormlite.dao.ReferenceObjectCache` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.registerClass:(Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L158708.  @monitorenter v2
  #Try_start0.  
  #L15870a.  v0:= v2.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L15870e.  call temp:= `get`(v0, v3) @signature `Ljava/util/concurrent/ConcurrentHashMap;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L158714.  v0:= temp @kind object;
  #L158716.  v0:= (`java.util.Map`) v0 @kind object;
  #L15871a.  if v0 != 0 then goto L158732;
  #L15871e.  v0:= new `java.util.concurrent.ConcurrentHashMap`;
  #L158722.  call `<init>`(v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.<init>:()V` @kind direct;
  #L158728.  v1:= v2.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L15872c.  call temp:= `put`(v1, v3, v0) @signature `Ljava/util/concurrent/ConcurrentHashMap;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L158732.  @monitorexit v2
  #L158734.  return @kind void;
  #L158736.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L158738.  @monitorexit v2
  #L15873a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L158736;
}
procedure `void` `remove`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `java.lang.Class` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.remove:(Ljava/lang/Class;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L158758.  call temp:= `getMapForClass`(v1, v2) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L15875e.  v0:= temp @kind object;
  #L158760.  if v0 == 0 then goto L15876a;
  #L158764.  call temp:= `remove`(v0, v3) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15876a.  return @kind void;
}
procedure `int` `size`(`com.j256.ormlite.dao.ReferenceObjectCache` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.size:(Ljava/lang/Class;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15877c.  call temp:= `getMapForClass`(v1, v2) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L158782.  v0:= temp @kind object;
  #L158784.  if v0 != 0 then goto L15878c;
  #L158788.  v0:= 0I;
  #L15878a.  return v0;
  #L15878c.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L158792.  v0:= temp;
  #L158794.  goto L15878a;
}
procedure `int` `sizeAll`(`com.j256.ormlite.dao.ReferenceObjectCache` v3 @kind this) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.sizeAll:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1587a8.  v0:= 0I;
  #L1587aa.  v1:= v3.`com.j256.ormlite.dao.ReferenceObjectCache.classMaps` @type ^`java.util.concurrent.ConcurrentHashMap` @kind object;
  #L1587ae.  call temp:= `values`(v1) @signature `Ljava/util/concurrent/ConcurrentHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L1587b4.  v1:= temp @kind object;
  #L1587b6.  call temp:= `iterator`(v1) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1587bc.  v2:= temp @kind object;
  #L1587be.  v1:= v0;
  #L1587c0.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1587c6.  v0:= temp;
  #L1587c8.  if v0 == 0 then goto L1587e6;
  #L1587cc.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1587d2.  v0:= temp @kind object;
  #L1587d4.  v0:= (`java.util.Map`) v0 @kind object;
  #L1587d8.  call temp:= `size`(v0) @signature `Ljava/util/Map;.size:()I` @kind interface;
  #L1587de.  v0:= temp;
  #L1587e0.  v0:= v0 + v1 @kind int;
  #L1587e2.  v1:= v0;
  #L1587e4.  goto L1587c0;
  #L1587e6.  return v1;
}
procedure `java.lang.Object` `updateId`(`com.j256.ormlite.dao.ReferenceObjectCache` v3 @kind this, `java.lang.Class` v4 @kind object, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.updateId:(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1587f8.  v1:= 0I;
  #L1587fa.  call temp:= `getMapForClass`(v3, v4) @signature `Lcom/j256/ormlite/dao/ReferenceObjectCache;.getMapForClass:(Ljava/lang/Class;)Ljava/util/Map;` @kind direct;
  #L158800.  v2:= temp @kind object;
  #L158802.  if v2 != 0 then goto L15880a;
  #L158806.  v0:= v1 @kind object;
  #L158808.  return v0 @kind object;
  #L15880a.  call temp:= `remove`(v2, v5) @signature `Ljava/util/Map;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L158810.  v0:= temp @kind object;
  #L158812.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L158816.  if v0 != 0 then goto L15881e;
  #L15881a.  v0:= v1 @kind object;
  #L15881c.  goto L158808;
  #L15881e.  call temp:= `put`(v2, v6, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L158824.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L15882a.  v0:= temp @kind object;
  #L15882c.  goto L158808;
}
