record `com.j256.ormlite.logger.LoggerFactory` @kind class @AccessFlag PUBLIC {
}
global `java.lang.String` `@@com.j256.ormlite.logger.LoggerFactory.LOG_TYPE_SYSTEM_PROPERTY` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.j256.ormlite.logger.LoggerFactory$LogType` `@@com.j256.ormlite.logger.LoggerFactory.logType` @AccessFlag PRIVATE_STATIC;
procedure `void` `<init>`(`com.j256.ormlite.logger.LoggerFactory` v0 @kind this) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L1657e4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1657ea.  return @kind void;
}
procedure `com.j256.ormlite.logger.LoggerFactory$LogType` `findLogType`() @signature `Lcom/j256/ormlite/logger/LoggerFactory;.findLogType:()Lcom/j256/ormlite/logger/LoggerFactory$LogType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1657fc.  v0:= "com.j256.ormlite.logger.type" @kind object;
  #L165800.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L165806.  v0:= temp @kind object;
  #L165808.  if v0 == 0 then goto L16586a;
  #Try_start0.  
  #L16580c.  call temp:= `valueOf`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory$LogType;.valueOf:(Ljava/lang/String;)Lcom/j256/ormlite/logger/LoggerFactory$LogType;` @kind static;
  #Try_end0.  
  #L165812.  v0:= temp @kind object;
  #L165814.  return v0 @kind object;
  #L165816.  v1:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L165818.  v1:= new `com.j256.ormlite.logger.LocalLog`;
  #L16581c.  v2:= constclass @type ^`com.j256.ormlite.logger.LoggerFactory` @kind object;
  #L165820.  call temp:= `getName`(v2) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L165826.  v2:= temp @kind object;
  #L165828.  call `<init>`(v1, v2) @signature `Lcom/j256/ormlite/logger/LocalLog;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16582e.  v2:= `@@com.j256.ormlite.logger.Log$Level.WARNING` @type ^`com.j256.ormlite.logger.Log$Level` @kind object;
  #L165832.  v3:= new `java.lang.StringBuilder`;
  #L165836.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16583c.  v4:= "Could not find valid log-type from system property 'com.j256.ormlite.logger.type', value '" @kind object;
  #L165840.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L165846.  v3:= temp @kind object;
  #L165848.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16584e.  v0:= temp @kind object;
  #L165850.  v3:= "'" @kind object;
  #L165854.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16585a.  v0:= temp @kind object;
  #L16585c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L165862.  v0:= temp @kind object;
  #L165864.  call `log`(v1, v2, v0) @signature `Lcom/j256/ormlite/logger/Log;.log:(Lcom/j256/ormlite/logger/Log$Level;Ljava/lang/String;)V` @kind interface;
  #L16586a.  call temp:= `values`() @signature `Lcom/j256/ormlite/logger/LoggerFactory$LogType;.values:()[Lcom/j256/ormlite/logger/LoggerFactory$LogType;` @kind static;
  #L165870.  v2:= temp @kind object;
  #L165872.  v3:= length @variable v2;
  #L165874.  v0:= 0I;
  #L165876.  v1:= v0;
  #L165878.  if v1 >= v3 then goto L165894;
  #L16587c.  v0:= v2[v1] @kind object;
  #L165880.  call temp:= `isAvailable`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory$LogType;.isAvailable:()Z` @kind virtual;
  #L165886.  v4:= temp;
  #L165888.  if v4 != 0 then goto L165814;
  #L16588c.  v0:= v1 + 1;
  #L165890.  v1:= v0;
  #L165892.  goto L165878;
  #L165894.  v0:= `@@com.j256.ormlite.logger.LoggerFactory$LogType.LOCAL` @type ^`com.j256.ormlite.logger.LoggerFactory$LogType` @kind object;
  #L165898.  goto L165814;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L165816;
}
procedure `com.j256.ormlite.logger.Logger` `getLogger`(`java.lang.Class` v1 @kind object) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/Class;)Lcom/j256/ormlite/logger/Logger;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1658bc.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L1658c2.  v0:= temp @kind object;
  #L1658c4.  call temp:= `getLogger`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/String;)Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L1658ca.  v0:= temp @kind object;
  #L1658cc.  return v0 @kind object;
}
procedure `com.j256.ormlite.logger.Logger` `getLogger`(`java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/String;)Lcom/j256/ormlite/logger/Logger;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L1658e0.  v0:= `@@com.j256.ormlite.logger.LoggerFactory.logType` @type ^`com.j256.ormlite.logger.LoggerFactory$LogType` @kind object;
  #L1658e4.  if v0 != 0 then goto L1658f4;
  #L1658e8.  call temp:= `findLogType`() @signature `Lcom/j256/ormlite/logger/LoggerFactory;.findLogType:()Lcom/j256/ormlite/logger/LoggerFactory$LogType;` @kind static;
  #L1658ee.  v0:= temp @kind object;
  #L1658f0.  `@@com.j256.ormlite.logger.LoggerFactory.logType` @type ^`com.j256.ormlite.logger.LoggerFactory$LogType` := v0 @kind object;
  #L1658f4.  v0:= new `com.j256.ormlite.logger.Logger`;
  #L1658f8.  v1:= `@@com.j256.ormlite.logger.LoggerFactory.logType` @type ^`com.j256.ormlite.logger.LoggerFactory$LogType` @kind object;
  #L1658fc.  call temp:= `createLog`(v1, v2) @signature `Lcom/j256/ormlite/logger/LoggerFactory$LogType;.createLog:(Ljava/lang/String;)Lcom/j256/ormlite/logger/Log;` @kind virtual;
  #L165902.  v1:= temp @kind object;
  #L165904.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/logger/Logger;.<init>:(Lcom/j256/ormlite/logger/Log;)V` @kind direct;
  #L16590a.  return v0 @kind object;
}
procedure `java.lang.String` `getSimpleClassName`(`java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getSimpleClassName:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L16591c.  v0:= "\\." @kind object;
  #L165920.  call temp:= `split`(v3, v0) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L165926.  v0:= temp @kind object;
  #L165928.  v1:= length @variable v0;
  #L16592a.  v2:= 1I;
  #L16592c.  if v1 > v2 then goto L165932;
  #L165930.  return v3 @kind object;
  #L165932.  v1:= length @variable v0;
  #L165934.  v1:= v1 + -1;
  #L165938.  v3:= v0[v1] @kind object;
  #L16593c.  goto L165930;
}
