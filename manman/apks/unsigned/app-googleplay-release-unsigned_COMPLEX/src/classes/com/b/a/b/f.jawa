record `com.b.a.b.f` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Number` @kind class {
  `java.lang.String` `com.b.a.b.f.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.b.f` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/b/a/b/f;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L14b5d0.  call `<init>`(v0) @signature `Ljava/lang/Number;.<init>:()V` @kind direct;
  #L14b5d6.  v0.`com.b.a.b.f.a` @type ^`java.lang.String` := v1 @kind object;
  #L14b5da.  return @kind void;
}
procedure `double` `doubleValue`(`com.b.a.b.f` v2 @kind this) @signature `Lcom/b/a/b/f;.doubleValue:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14b5ec.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L14b5f0.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L14b5f6.  v0:= temp @kind wide;
  #L14b5f8.  return v0 @kind wide;
}
procedure `boolean` `equals`(`com.b.a.b.f` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/b/a/b/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14b60c.  v1:= 1I;
  #L14b60e.  v0:= 0I;
  #L14b610.  if v4 != v5 then goto L14b618;
  #L14b614.  v0:= v1;
  #L14b616.  return v0;
  #L14b618.  v2:= instanceof @variable v5 @type ^`com.b.a.b.f` @kind boolean;
  #L14b61c.  if v2 == 0 then goto L14b616;
  #L14b620.  v5:= (`com.b.a.b.f`) v5 @kind object;
  #L14b624.  v2:= v4.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L14b628.  v3:= v5.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L14b62c.  if v2 == v3 then goto L14b644;
  #L14b630.  v2:= v4.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L14b634.  v3:= v5.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L14b638.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L14b63e.  v2:= temp;
  #L14b640.  if v2 == 0 then goto L14b616;
  #L14b644.  v0:= v1;
  #L14b646.  goto L14b616;
}
procedure `float` `floatValue`(`com.b.a.b.f` v1 @kind this) @signature `Lcom/b/a/b/f;.floatValue:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b658.  v0:= v1.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L14b65c.  call temp:= `parseFloat`(v0) @signature `Ljava/lang/Float;.parseFloat:(Ljava/lang/String;)F` @kind static;
  #L14b662.  v0:= temp;
  #L14b664.  return v0;
}
procedure `int` `hashCode`(`com.b.a.b.f` v1 @kind this) @signature `Lcom/b/a/b/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b678.  v0:= v1.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L14b67c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L14b682.  v0:= temp;
  #L14b684.  return v0;
}
procedure `int` `intValue`(`com.b.a.b.f` v2 @kind this) @signature `Lcom/b/a/b/f;.intValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L14b698.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L14b69c.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #Try_end0.  
  #L14b6a2.  v0:= temp;
  #L14b6a4.  return v0;
  #L14b6a6.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #Try_start1.  
  #L14b6a8.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L14b6ac.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #Try_end1.  
  #L14b6b2.  v0:= temp @kind wide;
  #L14b6b4.  v0:= (`int`) v0 @kind l2i;
  #L14b6b6.  goto L14b6a4;
  #L14b6b8.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L14b6ba.  v0:= new `java.math.BigDecimal`;
  #L14b6be.  v1:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L14b6c2.  call `<init>`(v0, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14b6c8.  call temp:= `intValue`(v0) @signature `Ljava/math/BigDecimal;.intValue:()I` @kind virtual;
  #L14b6ce.  v0:= temp;
  #L14b6d0.  goto L14b6a4;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L14b6a6;
  catch `java.lang.NumberFormatException` @[Try_start1..Try_end1] goto L14b6b8;
}
procedure `long` `longValue`(`com.b.a.b.f` v2 @kind this) @signature `Lcom/b/a/b/f;.longValue:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L14b700.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L14b704.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #Try_end0.  
  #L14b70a.  v0:= temp @kind wide;
  #L14b70c.  return v0 @kind wide;
  #L14b70e.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L14b710.  v0:= new `java.math.BigDecimal`;
  #L14b714.  v1:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L14b718.  call `<init>`(v0, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14b71e.  call temp:= `longValue`(v0) @signature `Ljava/math/BigDecimal;.longValue:()J` @kind virtual;
  #L14b724.  v0:= temp @kind wide;
  #L14b726.  goto L14b70c;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L14b70e;
}
procedure `java.lang.String` `toString`(`com.b.a.b.f` v1 @kind this) @signature `Lcom/b/a/b/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b748.  v0:= v1.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L14b74c.  return v0 @kind object;
}
