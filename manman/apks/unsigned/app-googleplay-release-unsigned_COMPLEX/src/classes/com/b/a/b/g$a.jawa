record `com.b.a.b.g$a` @kind class @AccessFlag  extends `java.util.AbstractSet` @kind class {
  `com.b.a.b.g` `com.b.a.b.g$a.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.b.a.b.g$a` v0 @kind this, `com.b.a.b.g` v1 @kind object) @signature `Lcom/b/a/b/g$a;.<init>:(Lcom/b/a/b/g;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L14b918.  v0.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` := v1 @kind object;
  #L14b91c.  call `<init>`(v0) @signature `Ljava/util/AbstractSet;.<init>:()V` @kind direct;
  #L14b922.  return @kind void;
}
procedure `void` `clear`(`com.b.a.b.g$a` v1 @kind this) @signature `Lcom/b/a/b/g$a;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b934.  v0:= v1.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` @kind object;
  #L14b938.  call `clear`(v0) @signature `Lcom/b/a/b/g;.clear:()V` @kind virtual;
  #L14b93e.  return @kind void;
}
procedure `boolean` `contains`(`com.b.a.b.g$a` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g$a;.contains:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b950.  v0:= instanceof @variable v2 @type ^`java.util.Map$Entry` @kind boolean;
  #L14b954.  if v0 == 0 then goto L14b970;
  #L14b958.  v0:= v1.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` @kind object;
  #L14b95c.  v2:= (`java.util.Map$Entry`) v2 @kind object;
  #L14b960.  call temp:= `a`(v0, v2) @signature `Lcom/b/a/b/g;.a:(Ljava/util/Map$Entry;)Lcom/b/a/b/g$d;` @kind virtual;
  #L14b966.  v0:= temp @kind object;
  #L14b968.  if v0 == 0 then goto L14b970;
  #L14b96c.  v0:= 1I;
  #L14b96e.  return v0;
  #L14b970.  v0:= 0I;
  #L14b972.  goto L14b96e;
}
procedure `java.util.Iterator` `iterator`(`com.b.a.b.g$a` v1 @kind this) @signature `Lcom/b/a/b/g$a;.iterator:()Ljava/util/Iterator;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b984.  v0:= new `com.b.a.b.g$a$1`;
  #L14b988.  call `<init>`(v0, v1) @signature `Lcom/b/a/b/g$a$1;.<init>:(Lcom/b/a/b/g$a;)V` @kind direct;
  #L14b98e.  return v0 @kind object;
}
procedure `boolean` `remove`(`com.b.a.b.g$a` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/b/a/b/g$a;.remove:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L14b9a0.  v1:= 1I;
  #L14b9a2.  v0:= 0I;
  #L14b9a4.  v2:= instanceof @variable v4 @type ^`java.util.Map$Entry` @kind boolean;
  #L14b9a8.  if v2 != 0 then goto L14b9ae;
  #L14b9ac.  return v0;
  #L14b9ae.  v2:= v3.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` @kind object;
  #L14b9b2.  v4:= (`java.util.Map$Entry`) v4 @kind object;
  #L14b9b6.  call temp:= `a`(v2, v4) @signature `Lcom/b/a/b/g;.a:(Ljava/util/Map$Entry;)Lcom/b/a/b/g$d;` @kind virtual;
  #L14b9bc.  v2:= temp @kind object;
  #L14b9be.  if v2 == 0 then goto L14b9ac;
  #L14b9c2.  v0:= v3.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` @kind object;
  #L14b9c6.  call `a`(v0, v2, v1) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Z)V` @kind virtual;
  #L14b9cc.  v0:= v1;
  #L14b9ce.  goto L14b9ac;
}
procedure `int` `size`(`com.b.a.b.g$a` v1 @kind this) @signature `Lcom/b/a/b/g$a;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b9e0.  v0:= v1.`com.b.a.b.g$a.a` @type ^`com.b.a.b.g` @kind object;
  #L14b9e4.  v0:= v0.`com.b.a.b.g.c` @type ^`int`;
  #L14b9e8.  return v0;
}
