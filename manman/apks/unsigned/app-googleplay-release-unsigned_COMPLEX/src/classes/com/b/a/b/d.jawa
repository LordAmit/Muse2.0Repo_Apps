record `com.b.a.b.d` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.w` @kind interface, `java.lang.Cloneable` @kind interface {
  `double` `com.b.a.b.d.b` @AccessFlag PRIVATE;
  `int` `com.b.a.b.d.c` @AccessFlag PRIVATE;
  `boolean` `com.b.a.b.d.d` @AccessFlag PRIVATE;
  `boolean` `com.b.a.b.d.e` @AccessFlag PRIVATE;
  `java.util.List` `com.b.a.b.d.f` @AccessFlag PRIVATE;
  `java.util.List` `com.b.a.b.d.g` @AccessFlag PRIVATE;
}
global `com.b.a.b.d` `@@com.b.a.b.d.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L14b180.  v0:= new `com.b.a.b.d`;
  #L14b184.  call `<init>`(v0) @signature `Lcom/b/a/b/d;.<init>:()V` @kind direct;
  #L14b18a.  `@@com.b.a.b.d.a` @type ^`com.b.a.b.d` := v0 @kind object;
  #L14b18e.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.b.d` v2 @kind this) @signature `Lcom/b/a/b/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L14b1a0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L14b1a6.  v0:= -1.0D;
  #L14b1aa.  v2.`com.b.a.b.d.b` @type ^`double` := v0 @kind wide;
  #L14b1ae.  v0:= 136I;
  #L14b1b2.  v2.`com.b.a.b.d.c` @type ^`int` := v0;
  #L14b1b6.  v0:= 1I;
  #L14b1b8.  v2.`com.b.a.b.d.d` @type ^`boolean` := v0 @kind boolean;
  #L14b1bc.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L14b1c2.  v0:= temp @kind object;
  #L14b1c4.  v2.`com.b.a.b.d.f` @type ^`java.util.List` := v0 @kind object;
  #L14b1c8.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L14b1ce.  v0:= temp @kind object;
  #L14b1d0.  v2.`com.b.a.b.d.g` @type ^`java.util.List` := v0 @kind object;
  #L14b1d4.  return @kind void;
}
procedure `boolean` `a`(`com.b.a.b.d` v4 @kind this, `com.b.a.a.d` v5 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14b1e8.  if v5 == 0 then goto L14b204;
  #L14b1ec.  call temp:= `a`(v5) @signature `Lcom/b/a/a/d;.a:()D` @kind interface;
  #L14b1f2.  v0:= temp @kind wide;
  #L14b1f4.  v2:= v4.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L14b1f8.  v0:= dcmpl(v0, v2);
  #L14b1fc.  if v0 <= 0 then goto L14b204;
  #L14b200.  v0:= 0I;
  #L14b202.  return v0;
  #L14b204.  v0:= 1I;
  #L14b206.  goto L14b202;
}
procedure `boolean` `a`(`com.b.a.b.d` v1 @kind this, `com.b.a.a.d` v2 @kind object, `com.b.a.a.e` v3 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;Lcom/b/a/a/e;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L14b218.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;)Z` @kind direct;
  #L14b21e.  v0:= temp;
  #L14b220.  if v0 == 0 then goto L14b234;
  #L14b224.  call temp:= `a`(v1, v3) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/e;)Z` @kind direct;
  #L14b22a.  v0:= temp;
  #L14b22c.  if v0 == 0 then goto L14b234;
  #L14b230.  v0:= 1I;
  #L14b232.  return v0;
  #L14b234.  v0:= 0I;
  #L14b236.  goto L14b232;
}
procedure `boolean` `a`(`com.b.a.b.d` v4 @kind this, `com.b.a.a.e` v5 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/e;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14b248.  if v5 == 0 then goto L14b264;
  #L14b24c.  call temp:= `a`(v5) @signature `Lcom/b/a/a/e;.a:()D` @kind interface;
  #L14b252.  v0:= temp @kind wide;
  #L14b254.  v2:= v4.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L14b258.  v0:= dcmpg(v0, v2);
  #L14b25c.  if v0 > 0 then goto L14b264;
  #L14b260.  v0:= 0I;
  #L14b262.  return v0;
  #L14b264.  v0:= 1I;
  #L14b266.  goto L14b262;
}
procedure `boolean` `a`(`com.b.a.b.d` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L14b278.  v0:= constclass @type ^`java.lang.Enum` @kind object;
  #L14b27c.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L14b282.  v0:= temp;
  #L14b284.  if v0 != 0 then goto L14b2a4;
  #L14b288.  call temp:= `isAnonymousClass`(v2) @signature `Ljava/lang/Class;.isAnonymousClass:()Z` @kind virtual;
  #L14b28e.  v0:= temp;
  #L14b290.  if v0 != 0 then goto L14b2a0;
  #L14b294.  call temp:= `isLocalClass`(v2) @signature `Ljava/lang/Class;.isLocalClass:()Z` @kind virtual;
  #L14b29a.  v0:= temp;
  #L14b29c.  if v0 == 0 then goto L14b2a4;
  #L14b2a0.  v0:= 1I;
  #L14b2a2.  return v0;
  #L14b2a4.  v0:= 0I;
  #L14b2a6.  goto L14b2a2;
}
procedure `boolean` `b`(`com.b.a.b.d` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/b/a/b/d;.b:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L14b2b8.  call temp:= `isMemberClass`(v2) @signature `Ljava/lang/Class;.isMemberClass:()Z` @kind virtual;
  #L14b2be.  v0:= temp;
  #L14b2c0.  if v0 == 0 then goto L14b2d4;
  #L14b2c4.  call temp:= `c`(v1, v2) @signature `Lcom/b/a/b/d;.c:(Ljava/lang/Class;)Z` @kind direct;
  #L14b2ca.  v0:= temp;
  #L14b2cc.  if v0 != 0 then goto L14b2d4;
  #L14b2d0.  v0:= 1I;
  #L14b2d2.  return v0;
  #L14b2d4.  v0:= 0I;
  #L14b2d6.  goto L14b2d2;
}
procedure `boolean` `c`(`com.b.a.b.d` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/b/a/b/d;.c:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L14b2e8.  call temp:= `getModifiers`(v2) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L14b2ee.  v0:= temp;
  #L14b2f0.  v0:= v0 ^& 8;
  #L14b2f4.  if v0 == 0 then goto L14b2fc;
  #L14b2f8.  v0:= 1I;
  #L14b2fa.  return v0;
  #L14b2fc.  v0:= 0I;
  #L14b2fe.  goto L14b2fa;
}
procedure `com.b.a.b.d` `a`(`com.b.a.b.d` v2 @kind this) @signature `Lcom/b/a/b/d;.a:()Lcom/b/a/b/d;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L14b310.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L14b316.  v0:= temp @kind object;
  #L14b318.  v0:= (`com.b.a.b.d`) v0 @kind object;
  #Try_end0.  
  #L14b31c.  return v0 @kind object;
  #L14b31e.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L14b320.  v1:= new `java.lang.AssertionError`;
  #L14b324.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L14b32a.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[Try_start0..Try_end0] goto L14b31e;
}
procedure `com.b.a.v` `a`(`com.b.a.b.d` v6 @kind this, `com.b.a.f` v7 @kind object, `com.b.a.c.a` v8 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/f;Lcom/b/a/c/a;)Lcom/b/a/v;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14b34c.  call temp:= `a`(v8) @signature `Lcom/b/a/c/a;.a:()Ljava/lang/Class;` @kind virtual;
  #L14b352.  v0:= temp @kind object;
  #L14b354.  v1:= 1I;
  #L14b356.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;Z)Z` @kind virtual;
  #L14b35c.  v3:= temp;
  #L14b35e.  v1:= 0I;
  #L14b360.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;Z)Z` @kind virtual;
  #L14b366.  v2:= temp;
  #L14b368.  if v3 != 0 then goto L14b374;
  #L14b36c.  if v2 != 0 then goto L14b374;
  #L14b370.  v0:= 0I;
  #L14b372.  return v0 @kind object;
  #L14b374.  v0:= new `com.b.a.b.d$1`;
  #L14b378.  v1:= v6 @kind object;
  #L14b37a.  v4:= v7 @kind object;
  #L14b37c.  v5:= v8 @kind object;
  #L14b37e.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/b/a/b/d$1;.<init>:(Lcom/b/a/b/d;ZZLcom/b/a/f;Lcom/b/a/c/a;)V` @kind direct;
  #L14b384.  goto L14b372;
}
procedure `boolean` `a`(`com.b.a.b.d` v6 @kind this, `java.lang.Class` v7 @kind object, `boolean` v8 ) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14b398.  v2:= 1I;
  #L14b39a.  v0:= v6.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L14b39e.  v4:= -1.0D;
  #L14b3a2.  v0:= dcmpl(v0, v4);
  #L14b3a6.  if v0 == 0 then goto L14b3da;
  #L14b3aa.  v0:= constclass @type ^`com.b.a.a.d` @kind object;
  #L14b3ae.  call temp:= `getAnnotation`(v7, v0) @signature `Ljava/lang/Class;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L14b3b4.  v0:= temp @kind object;
  #L14b3b6.  v0:= (`com.b.a.a.d`) v0 @kind object;
  #L14b3ba.  v1:= constclass @type ^`com.b.a.a.e` @kind object;
  #L14b3be.  call temp:= `getAnnotation`(v7, v1) @signature `Ljava/lang/Class;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L14b3c4.  v1:= temp @kind object;
  #L14b3c6.  v1:= (`com.b.a.a.e`) v1 @kind object;
  #L14b3ca.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;Lcom/b/a/a/e;)Z` @kind direct;
  #L14b3d0.  v0:= temp;
  #L14b3d2.  if v0 != 0 then goto L14b3da;
  #L14b3d6.  v0:= v2;
  #L14b3d8.  return v0;
  #L14b3da.  v0:= v6.`com.b.a.b.d.d` @type ^`boolean` @kind boolean;
  #L14b3de.  if v0 != 0 then goto L14b3f2;
  #L14b3e2.  call temp:= `b`(v6, v7) @signature `Lcom/b/a/b/d;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L14b3e8.  v0:= temp;
  #L14b3ea.  if v0 == 0 then goto L14b3f2;
  #L14b3ee.  v0:= v2;
  #L14b3f0.  goto L14b3d8;
  #L14b3f2.  call temp:= `a`(v6, v7) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;)Z` @kind direct;
  #L14b3f8.  v0:= temp;
  #L14b3fa.  if v0 == 0 then goto L14b402;
  #L14b3fe.  v0:= v2;
  #L14b400.  goto L14b3d8;
  #L14b402.  if v8 == 0 then goto L14b43a;
  #L14b406.  v0:= v6.`com.b.a.b.d.f` @type ^`java.util.List` @kind object;
  #L14b40a.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L14b410.  v1:= temp @kind object;
  #L14b412.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L14b418.  v0:= temp;
  #L14b41a.  if v0 == 0 then goto L14b440;
  #L14b41e.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L14b424.  v0:= temp @kind object;
  #L14b426.  v0:= (`com.b.a.b`) v0 @kind object;
  #L14b42a.  call temp:= `a`(v0, v7) @signature `Lcom/b/a/b;.a:(Ljava/lang/Class;)Z` @kind interface;
  #L14b430.  v0:= temp;
  #L14b432.  if v0 == 0 then goto L14b412;
  #L14b436.  v0:= v2;
  #L14b438.  goto L14b3d8;
  #L14b43a.  v0:= v6.`com.b.a.b.d.g` @type ^`java.util.List` @kind object;
  #L14b43e.  goto L14b40a;
  #L14b440.  v0:= 0I;
  #L14b442.  goto L14b3d8;
}
procedure `boolean` `a`(`com.b.a.b.d` v6 @kind this, `java.lang.reflect.Field` v7 @kind object, `boolean` v8 ) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/reflect/Field;Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14b454.  v2:= 1I;
  #L14b456.  v0:= v6.`com.b.a.b.d.c` @type ^`int`;
  #L14b45a.  call temp:= `getModifiers`(v7) @signature `Ljava/lang/reflect/Field;.getModifiers:()I` @kind virtual;
  #L14b460.  v1:= temp;
  #L14b462.  v0:= v0 ^& v1 @kind int;
  #L14b464.  if v0 == 0 then goto L14b46c;
  #L14b468.  v0:= v2;
  #L14b46a.  return v0;
  #L14b46c.  v0:= v6.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L14b470.  v4:= -1.0D;
  #L14b474.  v0:= dcmpl(v0, v4);
  #L14b478.  if v0 == 0 then goto L14b4ac;
  #L14b47c.  v0:= constclass @type ^`com.b.a.a.d` @kind object;
  #L14b480.  call temp:= `getAnnotation`(v7, v0) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L14b486.  v0:= temp @kind object;
  #L14b488.  v0:= (`com.b.a.a.d`) v0 @kind object;
  #L14b48c.  v1:= constclass @type ^`com.b.a.a.e` @kind object;
  #L14b490.  call temp:= `getAnnotation`(v7, v1) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L14b496.  v1:= temp @kind object;
  #L14b498.  v1:= (`com.b.a.a.e`) v1 @kind object;
  #L14b49c.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;Lcom/b/a/a/e;)Z` @kind direct;
  #L14b4a2.  v0:= temp;
  #L14b4a4.  if v0 != 0 then goto L14b4ac;
  #L14b4a8.  v0:= v2;
  #L14b4aa.  goto L14b46a;
  #L14b4ac.  call temp:= `isSynthetic`(v7) @signature `Ljava/lang/reflect/Field;.isSynthetic:()Z` @kind virtual;
  #L14b4b2.  v0:= temp;
  #L14b4b4.  if v0 == 0 then goto L14b4bc;
  #L14b4b8.  v0:= v2;
  #L14b4ba.  goto L14b46a;
  #L14b4bc.  v0:= v6.`com.b.a.b.d.e` @type ^`boolean` @kind boolean;
  #L14b4c0.  if v0 == 0 then goto L14b4f8;
  #L14b4c4.  v0:= constclass @type ^`com.b.a.a.a` @kind object;
  #L14b4c8.  call temp:= `getAnnotation`(v7, v0) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L14b4ce.  v0:= temp @kind object;
  #L14b4d0.  v0:= (`com.b.a.a.a`) v0 @kind object;
  #L14b4d4.  if v0 == 0 then goto L14b4e8;
  #L14b4d8.  if v8 == 0 then goto L14b4ec;
  #L14b4dc.  call temp:= `a`(v0) @signature `Lcom/b/a/a/a;.a:()Z` @kind interface;
  #L14b4e2.  v0:= temp;
  #L14b4e4.  if v0 != 0 then goto L14b4f8;
  #L14b4e8.  v0:= v2;
  #L14b4ea.  goto L14b46a;
  #L14b4ec.  call temp:= `b`(v0) @signature `Lcom/b/a/a/a;.b:()Z` @kind interface;
  #L14b4f2.  v0:= temp;
  #L14b4f4.  if v0 == 0 then goto L14b4e8;
  #L14b4f8.  v0:= v6.`com.b.a.b.d.d` @type ^`boolean` @kind boolean;
  #L14b4fc.  if v0 != 0 then goto L14b518;
  #L14b500.  call temp:= `getType`(v7) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L14b506.  v0:= temp @kind object;
  #L14b508.  call temp:= `b`(v6, v0) @signature `Lcom/b/a/b/d;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L14b50e.  v0:= temp;
  #L14b510.  if v0 == 0 then goto L14b518;
  #L14b514.  v0:= v2;
  #L14b516.  goto L14b46a;
  #L14b518.  call temp:= `getType`(v7) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L14b51e.  v0:= temp @kind object;
  #L14b520.  call temp:= `a`(v6, v0) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;)Z` @kind direct;
  #L14b526.  v0:= temp;
  #L14b528.  if v0 == 0 then goto L14b530;
  #L14b52c.  v0:= v2;
  #L14b52e.  goto L14b46a;
  #L14b530.  if v8 == 0 then goto L14b580;
  #L14b534.  v0:= v6.`com.b.a.b.d.f` @type ^`java.util.List` @kind object;
  #L14b538.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L14b53e.  v1:= temp;
  #L14b540.  if v1 != 0 then goto L14b586;
  #L14b544.  v1:= new `com.b.a.c`;
  #L14b548.  call `<init>`(v1, v7) @signature `Lcom/b/a/c;.<init>:(Ljava/lang/reflect/Field;)V` @kind direct;
  #L14b54e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L14b554.  v3:= temp @kind object;
  #L14b556.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L14b55c.  v0:= temp;
  #L14b55e.  if v0 == 0 then goto L14b586;
  #L14b562.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L14b568.  v0:= temp @kind object;
  #L14b56a.  v0:= (`com.b.a.b`) v0 @kind object;
  #L14b56e.  call temp:= `a`(v0, v1) @signature `Lcom/b/a/b;.a:(Lcom/b/a/c;)Z` @kind interface;
  #L14b574.  v0:= temp;
  #L14b576.  if v0 == 0 then goto L14b556;
  #L14b57a.  v0:= v2;
  #L14b57c.  goto L14b46a;
  #L14b580.  v0:= v6.`com.b.a.b.d.g` @type ^`java.util.List` @kind object;
  #L14b584.  goto L14b538;
  #L14b586.  v0:= 0I;
  #L14b588.  goto L14b46a;
}
procedure `java.lang.Object` `clone`(`com.b.a.b.d` v1 @kind this) @signature `Lcom/b/a/b/d;.clone:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L14b59c.  call temp:= `a`(v1) @signature `Lcom/b/a/b/d;.a:()Lcom/b/a/b/d;` @kind virtual;
  #L14b5a2.  v0:= temp @kind object;
  #L14b5a4.  return v0 @kind object;
}
