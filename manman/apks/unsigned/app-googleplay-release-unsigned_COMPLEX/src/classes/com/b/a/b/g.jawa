record `com.b.a.b.g` @kind class @AccessFlag PUBLIC_FINAL extends `java.util.AbstractMap` @kind class, `java.io.Serializable` @kind interface {
  `java.util.Comparator` `com.b.a.b.g.a` @AccessFlag ;
  `com.b.a.b.g$d` `com.b.a.b.g.b` @AccessFlag ;
  `int` `com.b.a.b.g.c` @AccessFlag ;
  `int` `com.b.a.b.g.d` @AccessFlag ;
  `com.b.a.b.g$d` `com.b.a.b.g.e` @AccessFlag FINAL;
  `com.b.a.b.g$a` `com.b.a.b.g.h` @AccessFlag PRIVATE;
  `com.b.a.b.g$b` `com.b.a.b.g.i` @AccessFlag PRIVATE;
}
global `boolean` `@@com.b.a.b.g.f` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.Comparator` `@@com.b.a.b.g.g` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L14bcf4.  v0:= constclass @type ^`com.b.a.b.g` @kind object;
  #L14bcf8.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L14bcfe.  v0:= temp;
  #L14bd00.  if v0 != 0 then goto L14bd1a;
  #L14bd04.  v0:= 1I;
  #L14bd06.  `@@com.b.a.b.g.f` @type ^`boolean` := v0 @kind boolean;
  #L14bd0a.  v0:= new `com.b.a.b.g$1`;
  #L14bd0e.  call `<init>`(v0) @signature `Lcom/b/a/b/g$1;.<init>:()V` @kind direct;
  #L14bd14.  `@@com.b.a.b.g.g` @type ^`java.util.Comparator` := v0 @kind object;
  #L14bd18.  return @kind void;
  #L14bd1a.  v0:= 0I;
  #L14bd1c.  goto L14bd06;
}
procedure `void` `<init>`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L14bd30.  v0:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L14bd34.  call `<init>`(v1, v0) @signature `Lcom/b/a/b/g;.<init>:(Ljava/util/Comparator;)V` @kind direct;
  #L14bd3a.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.b.g` v1 @kind this, `java.util.Comparator` v2 @kind object) @signature `Lcom/b/a/b/g;.<init>:(Ljava/util/Comparator;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L14bd4c.  v0:= 0I;
  #L14bd4e.  call `<init>`(v1) @signature `Ljava/util/AbstractMap;.<init>:()V` @kind direct;
  #L14bd54.  v1.`com.b.a.b.g.c` @type ^`int` := v0;
  #L14bd58.  v1.`com.b.a.b.g.d` @type ^`int` := v0;
  #L14bd5c.  v0:= new `com.b.a.b.g$d`;
  #L14bd60.  call `<init>`(v0) @signature `Lcom/b/a/b/g$d;.<init>:()V` @kind direct;
  #L14bd66.  v1.`com.b.a.b.g.e` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L14bd6a.  if v2 == 0 then goto L14bd74;
  #L14bd6e.  v1.`com.b.a.b.g.a` @type ^`java.util.Comparator` := v2 @kind object;
  #L14bd72.  return @kind void;
  #L14bd74.  v2:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L14bd78.  goto L14bd6e;
}
procedure `void` `a`(`com.b.a.b.g` v6 @kind this, `com.b.a.b.g$d` v7 @kind object) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14bd8c.  v1:= 0I;
  #L14bd8e.  v0:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L14bd92.  v3:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L14bd96.  v4:= v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L14bd9a.  v5:= v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L14bd9e.  v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L14bda2.  if v4 == 0 then goto L14bdaa;
  #L14bda6.  v4.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L14bdaa.  call `a`(v6, v7, v3) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L14bdb0.  v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L14bdb4.  v7.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L14bdb8.  if v0 == 0 then goto L14bdf8;
  #L14bdbc.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L14bdc0.  v2:= v0;
  #L14bdc2.  if v4 == 0 then goto L14bdfc;
  #L14bdc6.  v0:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L14bdca.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L14bdd0.  v0:= temp;
  #L14bdd2.  v0:= v0 + 1;
  #L14bdd6.  v7.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L14bdda.  v0:= v7.`com.b.a.b.g$d.h` @type ^`int`;
  #L14bdde.  if v5 == 0 then goto L14bde6;
  #L14bde2.  v1:= v5.`com.b.a.b.g$d.h` @type ^`int`;
  #L14bde6.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L14bdec.  v0:= temp;
  #L14bdee.  v0:= v0 + 1;
  #L14bdf2.  v3.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L14bdf6.  return @kind void;
  #L14bdf8.  v2:= v1;
  #L14bdfa.  goto L14bdc2;
  #L14bdfc.  v0:= v1;
  #L14bdfe.  goto L14bdca;
}
procedure `void` `a`(`com.b.a.b.g` v2 @kind this, `com.b.a.b.g$d` v3 @kind object, `com.b.a.b.g$d` v4 @kind object) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L14be10.  v0:= v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` @kind object;
  #L14be14.  v1:= 0I;
  #L14be16.  v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v1 @kind object;
  #L14be1a.  if v4 == 0 then goto L14be22;
  #L14be1e.  v4.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L14be22.  if v0 == 0 then goto L14be56;
  #L14be26.  v1:= v0.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L14be2a.  if v1 != v3 then goto L14be34;
  #L14be2e.  v0.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L14be32.  return @kind void;
  #L14be34.  v1:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L14be38.  if v1 != 0 then goto L14be50;
  #L14be3c.  v1:= v0.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L14be40.  if v1 == v3 then goto L14be50;
  #L14be44.  v0:= new `java.lang.AssertionError`;
  #L14be48.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L14be4e.  throw v0;
  #L14be50.  v0.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L14be54.  goto L14be32;
  #L14be56.  v2.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` := v4 @kind object;
  #L14be5a.  goto L14be32;
}
procedure `boolean` `a`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L14be6c.  if v2 == v3 then goto L14be80;
  #L14be70.  if v2 == 0 then goto L14be84;
  #L14be74.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L14be7a.  v0:= temp;
  #L14be7c.  if v0 == 0 then goto L14be84;
  #L14be80.  v0:= 1I;
  #L14be82.  return v0;
  #L14be84.  v0:= 0I;
  #L14be86.  goto L14be82;
}
procedure `void` `b`(`com.b.a.b.g` v6 @kind this, `com.b.a.b.g$d` v7 @kind object) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14be98.  v1:= 0I;
  #L14be9a.  v3:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L14be9e.  v0:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L14bea2.  v4:= v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L14bea6.  v5:= v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L14beaa.  v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L14beae.  if v5 == 0 then goto L14beb6;
  #L14beb2.  v5.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L14beb6.  call `a`(v6, v7, v3) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L14bebc.  v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v7 @kind object;
  #L14bec0.  v7.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L14bec4.  if v0 == 0 then goto L14bf04;
  #L14bec8.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L14becc.  v2:= v0;
  #L14bece.  if v5 == 0 then goto L14bf08;
  #L14bed2.  v0:= v5.`com.b.a.b.g$d.h` @type ^`int`;
  #L14bed6.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L14bedc.  v0:= temp;
  #L14bede.  v0:= v0 + 1;
  #L14bee2.  v7.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L14bee6.  v0:= v7.`com.b.a.b.g$d.h` @type ^`int`;
  #L14beea.  if v4 == 0 then goto L14bef2;
  #L14beee.  v1:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L14bef2.  call temp:= `max`(v0, v1) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L14bef8.  v0:= temp;
  #L14befa.  v0:= v0 + 1;
  #L14befe.  v3.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L14bf02.  return @kind void;
  #L14bf04.  v2:= v1;
  #L14bf06.  goto L14bece;
  #L14bf08.  v0:= v1;
  #L14bf0a.  goto L14bed6;
}
procedure `void` `b`(`com.b.a.b.g` v9 @kind this, `com.b.a.b.g$d` v10 @kind object, `boolean` v11 ) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L14bf1c.  v8:= 1I;
  #L14bf1e.  v7:= -1I;
  #L14bf20.  v1:= 0I;
  #L14bf22.  if v10 == 0 then goto L14bf7c;
  #L14bf26.  v3:= v10.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L14bf2a.  v4:= v10.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L14bf2e.  if v3 == 0 then goto L14bf7e;
  #L14bf32.  v0:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L14bf36.  v2:= v0;
  #L14bf38.  if v4 == 0 then goto L14bf82;
  #L14bf3c.  v0:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L14bf40.  v5:= v2 - v0 @kind int;
  #L14bf44.  v6:= -2I;
  #L14bf46.  if v5 != v6 then goto L14bfb4;
  #L14bf4a.  v3:= v4.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L14bf4e.  v0:= v4.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L14bf52.  if v0 == 0 then goto L14bf86;
  #L14bf56.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L14bf5a.  v2:= v0;
  #L14bf5c.  if v3 == 0 then goto L14bf8a;
  #L14bf60.  v0:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L14bf64.  v0:= v0 - v2 @kind int;
  #L14bf66.  if v0 == v7 then goto L14bf72;
  #L14bf6a.  if v0 != 0 then goto L14bf8e;
  #L14bf6e.  if v11 != 0 then goto L14bf8e;
  #L14bf72.  call `a`(v9, v10) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L14bf78.  if v11 == 0 then goto L14bfec;
  #L14bf7c.  return @kind void;
  #L14bf7e.  v2:= v1;
  #L14bf80.  goto L14bf38;
  #L14bf82.  v0:= v1;
  #L14bf84.  goto L14bf40;
  #L14bf86.  v2:= v1;
  #L14bf88.  goto L14bf5c;
  #L14bf8a.  v0:= v1;
  #L14bf8c.  goto L14bf64;
  #L14bf8e.  v2:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L14bf92.  if v2 != 0 then goto L14bfa6;
  #L14bf96.  if v0 == v8 then goto L14bfa6;
  #L14bf9a.  v0:= new `java.lang.AssertionError`;
  #L14bf9e.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L14bfa4.  throw v0;
  #L14bfa6.  call `b`(v9, v4) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L14bfac.  call `a`(v9, v10) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L14bfb2.  goto L14bf78;
  #L14bfb4.  v4:= 2I;
  #L14bfb6.  if v5 != v4 then goto L14c020;
  #L14bfba.  v4:= v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L14bfbe.  v0:= v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L14bfc2.  if v0 == 0 then goto L14bff2;
  #L14bfc6.  v0:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L14bfca.  v2:= v0;
  #L14bfcc.  if v4 == 0 then goto L14bff6;
  #L14bfd0.  v0:= v4.`com.b.a.b.g$d.h` @type ^`int`;
  #L14bfd4.  v0:= v0 - v2 @kind int;
  #L14bfd6.  if v0 == v8 then goto L14bfe2;
  #L14bfda.  if v0 != 0 then goto L14bffa;
  #L14bfde.  if v11 != 0 then goto L14bffa;
  #L14bfe2.  call `b`(v9, v10) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L14bfe8.  if v11 != 0 then goto L14bf7c;
  #L14bfec.  v10:= v10.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` @kind object;
  #L14bff0.  goto L14bf22;
  #L14bff2.  v2:= v1;
  #L14bff4.  goto L14bfcc;
  #L14bff6.  v0:= v1;
  #L14bff8.  goto L14bfd4;
  #L14bffa.  v2:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L14bffe.  if v2 != 0 then goto L14c012;
  #L14c002.  if v0 == v7 then goto L14c012;
  #L14c006.  v0:= new `java.lang.AssertionError`;
  #L14c00a.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L14c010.  throw v0;
  #L14c012.  call `a`(v9, v3) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L14c018.  call `b`(v9, v10) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;)V` @kind direct;
  #L14c01e.  goto L14bfe8;
  #L14c020.  if v5 != 0 then goto L14c032;
  #L14c024.  v0:= v2 + 1;
  #L14c028.  v10.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L14c02c.  if v11 == 0 then goto L14bfec;
  #L14c030.  goto L14bf7c;
  #L14c032.  v3:= `@@com.b.a.b.g.f` @type ^`boolean` @kind boolean;
  #L14c036.  if v3 != 0 then goto L14c04e;
  #L14c03a.  if v5 == v7 then goto L14c04e;
  #L14c03e.  if v5 == v8 then goto L14c04e;
  #L14c042.  v0:= new `java.lang.AssertionError`;
  #L14c046.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L14c04c.  throw v0;
  #L14c04e.  call temp:= `max`(v2, v0) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L14c054.  v0:= temp;
  #L14c056.  v0:= v0 + 1;
  #L14c05a.  v10.`com.b.a.b.g$d.h` @type ^`int` := v0;
  #L14c05e.  if v11 != 0 then goto L14bfec;
  #L14c062.  goto L14bf7c;
}
procedure `com.b.a.b.g$d` `a`(`com.b.a.b.g` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L14c074.  v0:= 0I;
  #L14c076.  if v3 == 0 then goto L14c084;
  #L14c07a.  v1:= 0I;
  #Try_start0.  
  #L14c07c.  call temp:= `a`(v2, v3, v1) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Z)Lcom/b/a/b/g$d;` @kind virtual;
  #Try_end0.  
  #L14c082.  v0:= temp @kind object;
  #L14c084.  return v0 @kind object;
  #L14c086.  v1:= Exception @type ^`java.lang.ClassCastException` @kind object;
  #L14c088.  goto L14c084;
  catch `java.lang.ClassCastException` @[Try_start0..Try_end0] goto L14c086;
}
procedure `com.b.a.b.g$d` `a`(`com.b.a.b.g` v7 @kind this, `java.lang.Object` v8 @kind object, `boolean` v9 ) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Z)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L14c0ac.  v1:= 0I;
  #L14c0ae.  v5:= v7.`com.b.a.b.g.a` @type ^`java.util.Comparator` @kind object;
  #L14c0b2.  v2:= v7.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` @kind object;
  #L14c0b6.  v0:= 0I;
  #L14c0b8.  if v2 == 0 then goto L14c1c2;
  #L14c0bc.  v0:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L14c0c0.  if v5 != v0 then goto L14c0e2;
  #L14c0c4.  v0:= v8 @kind object;
  #L14c0c6.  v0:= (`java.lang.Comparable`) v0 @kind object;
  #L14c0ca.  if v0 == 0 then goto L14c0e6;
  #L14c0ce.  v3:= v2.`com.b.a.b.g$d.f` @type ^`java.lang.Object` @kind object;
  #L14c0d2.  call temp:= `compareTo`(v0, v3) @signature `Ljava/lang/Comparable;.compareTo:(Ljava/lang/Object;)I` @kind interface;
  #L14c0d8.  v3:= temp;
  #L14c0da.  if v3 != 0 then goto L14c0f4;
  #L14c0de.  v1:= v2 @kind object;
  #L14c0e0.  return v1 @kind object;
  #L14c0e2.  v0:= v1 @kind object;
  #L14c0e4.  goto L14c0ca;
  #L14c0e6.  v3:= v2.`com.b.a.b.g$d.f` @type ^`java.lang.Object` @kind object;
  #L14c0ea.  call temp:= `compare`(v5, v8, v3) @signature `Ljava/util/Comparator;.compare:(Ljava/lang/Object;Ljava/lang/Object;)I` @kind interface;
  #L14c0f0.  v3:= temp;
  #L14c0f2.  goto L14c0da;
  #L14c0f4.  if v3 >= 0 then goto L14c164;
  #L14c0f8.  v4:= v2.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L14c0fc.  if v4 != 0 then goto L14c16a;
  #L14c100.  v6:= v3;
  #L14c102.  v3:= v2 @kind object;
  #L14c104.  v2:= v6;
  #L14c106.  if v9 == 0 then goto L14c0e0;
  #L14c10a.  v1:= v7.`com.b.a.b.g.e` @type ^`com.b.a.b.g$d` @kind object;
  #L14c10e.  if v3 != 0 then goto L14c19c;
  #L14c112.  v0:= `@@com.b.a.b.g.g` @type ^`java.util.Comparator` @kind object;
  #L14c116.  if v5 != v0 then goto L14c16e;
  #L14c11a.  v0:= instanceof @variable v8 @type ^`java.lang.Comparable` @kind boolean;
  #L14c11e.  if v0 != 0 then goto L14c16e;
  #L14c122.  v0:= new `java.lang.ClassCastException`;
  #L14c126.  v1:= new `java.lang.StringBuilder`;
  #L14c12a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14c130.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L14c136.  v2:= temp @kind object;
  #L14c138.  call temp:= `getName`(v2) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L14c13e.  v2:= temp @kind object;
  #L14c140.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14c146.  v1:= temp @kind object;
  #L14c148.  v2:= " is not Comparable" @kind object;
  #L14c14c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14c152.  v1:= temp @kind object;
  #L14c154.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14c15a.  v1:= temp @kind object;
  #L14c15c.  call `<init>`(v0, v1) @signature `Ljava/lang/ClassCastException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14c162.  throw v0;
  #L14c164.  v4:= v2.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L14c168.  goto L14c0fc;
  #L14c16a.  v2:= v4 @kind object;
  #L14c16c.  goto L14c0ca;
  #L14c16e.  v0:= new `com.b.a.b.g$d`;
  #L14c172.  v2:= v1.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L14c176.  call `<init>`(v0, v3, v8, v1, v2) @signature `Lcom/b/a/b/g$d;.<init>:(Lcom/b/a/b/g$d;Ljava/lang/Object;Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L14c17c.  v7.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L14c180.  v1:= v7.`com.b.a.b.g.c` @type ^`int`;
  #L14c184.  v1:= v1 + 1;
  #L14c188.  v7.`com.b.a.b.g.c` @type ^`int` := v1;
  #L14c18c.  v1:= v7.`com.b.a.b.g.d` @type ^`int`;
  #L14c190.  v1:= v1 + 1;
  #L14c194.  v7.`com.b.a.b.g.d` @type ^`int` := v1;
  #L14c198.  v1:= v0 @kind object;
  #L14c19a.  goto L14c0e0;
  #L14c19c.  v0:= new `com.b.a.b.g$d`;
  #L14c1a0.  v4:= v1.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L14c1a4.  call `<init>`(v0, v3, v8, v1, v4) @signature `Lcom/b/a/b/g$d;.<init>:(Lcom/b/a/b/g$d;Ljava/lang/Object;Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L14c1aa.  if v2 >= 0 then goto L14c1bc;
  #L14c1ae.  v3.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L14c1b2.  v1:= 1I;
  #L14c1b4.  call `b`(v7, v3, v1) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;Z)V` @kind direct;
  #L14c1ba.  goto L14c180;
  #L14c1bc.  v3.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L14c1c0.  goto L14c1b2;
  #L14c1c2.  v3:= v2 @kind object;
  #L14c1c4.  v2:= v0;
  #L14c1c6.  goto L14c106;
}
procedure `com.b.a.b.g$d` `a`(`com.b.a.b.g` v3 @kind this, `java.util.Map$Entry` v4 @kind object) @signature `Lcom/b/a/b/g;.a:(Ljava/util/Map$Entry;)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L14c1d8.  call temp:= `getKey`(v4) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L14c1de.  v0:= temp @kind object;
  #L14c1e0.  call temp:= `a`(v3, v0) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L14c1e6.  v0:= temp @kind object;
  #L14c1e8.  if v0 == 0 then goto L14c20c;
  #L14c1ec.  v1:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L14c1f0.  call temp:= `getValue`(v4) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L14c1f6.  v2:= temp @kind object;
  #L14c1f8.  call temp:= `a`(v3, v1, v2) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind direct;
  #L14c1fe.  v1:= temp;
  #L14c200.  if v1 == 0 then goto L14c20c;
  #L14c204.  v1:= 1I;
  #L14c206.  if v1 == 0 then goto L14c210;
  #L14c20a.  return v0 @kind object;
  #L14c20c.  v1:= 0I;
  #L14c20e.  goto L14c206;
  #L14c210.  v0:= 0I;
  #L14c212.  goto L14c20a;
}
procedure `void` `a`(`com.b.a.b.g` v6 @kind this, `com.b.a.b.g$d` v7 @kind object, `boolean` v8 ) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14c224.  v2:= 0I;
  #L14c226.  v5:= 0I;
  #L14c228.  if v8 == 0 then goto L14c244;
  #L14c22c.  v0:= v7.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L14c230.  v1:= v7.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` @kind object;
  #L14c234.  v0.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` := v1 @kind object;
  #L14c238.  v0:= v7.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` @kind object;
  #L14c23c.  v1:= v7.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` @kind object;
  #L14c240.  v0.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` := v1 @kind object;
  #L14c244.  v0:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L14c248.  v1:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L14c24c.  v3:= v7.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` @kind object;
  #L14c250.  if v0 == 0 then goto L14c2c4;
  #L14c254.  if v1 == 0 then goto L14c2c4;
  #L14c258.  v3:= v0.`com.b.a.b.g$d.h` @type ^`int`;
  #L14c25c.  v4:= v1.`com.b.a.b.g$d.h` @type ^`int`;
  #L14c260.  if v3 <= v4 then goto L14c2ba;
  #L14c264.  call temp:= `b`(v0) @signature `Lcom/b/a/b/g$d;.b:()Lcom/b/a/b/g$d;` @kind virtual;
  #L14c26a.  v0:= temp @kind object;
  #L14c26c.  call `a`(v6, v0, v2) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Z)V` @kind virtual;
  #L14c272.  v3:= v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` @kind object;
  #L14c276.  if v3 == 0 then goto L14c30a;
  #L14c27a.  v1:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L14c27e.  v0.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L14c282.  v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L14c286.  v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L14c28a.  v3:= v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` @kind object;
  #L14c28e.  if v3 == 0 then goto L14c2a2;
  #L14c292.  v2:= v3.`com.b.a.b.g$d.h` @type ^`int`;
  #L14c296.  v0.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v3 @kind object;
  #L14c29a.  v3.`com.b.a.b.g$d.a` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L14c29e.  v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L14c2a2.  call temp:= `max`(v1, v2) @signature `Ljava/lang/Math;.max:(II)I` @kind static;
  #L14c2a8.  v1:= temp;
  #L14c2aa.  v1:= v1 + 1;
  #L14c2ae.  v0.`com.b.a.b.g$d.h` @type ^`int` := v1;
  #L14c2b2.  call `a`(v6, v7, v0) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L14c2b8.  return @kind void;
  #L14c2ba.  call temp:= `a`(v1) @signature `Lcom/b/a/b/g$d;.a:()Lcom/b/a/b/g$d;` @kind virtual;
  #L14c2c0.  v0:= temp @kind object;
  #L14c2c2.  goto L14c26c;
  #L14c2c4.  if v0 == 0 then goto L14c2f2;
  #L14c2c8.  call `a`(v6, v7, v0) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L14c2ce.  v7.`com.b.a.b.g$d.b` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L14c2d2.  call `b`(v6, v3, v2) @signature `Lcom/b/a/b/g;.b:(Lcom/b/a/b/g$d;Z)V` @kind direct;
  #L14c2d8.  v0:= v6.`com.b.a.b.g.c` @type ^`int`;
  #L14c2dc.  v0:= v0 + -1;
  #L14c2e0.  v6.`com.b.a.b.g.c` @type ^`int` := v0;
  #L14c2e4.  v0:= v6.`com.b.a.b.g.d` @type ^`int`;
  #L14c2e8.  v0:= v0 + 1;
  #L14c2ec.  v6.`com.b.a.b.g.d` @type ^`int` := v0;
  #L14c2f0.  goto L14c2b8;
  #L14c2f2.  if v1 == 0 then goto L14c302;
  #L14c2f6.  call `a`(v6, v7, v1) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L14c2fc.  v7.`com.b.a.b.g$d.c` @type ^`com.b.a.b.g$d` := v5 @kind object;
  #L14c300.  goto L14c2d2;
  #L14c302.  call `a`(v6, v7, v5) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Lcom/b/a/b/g$d;)V` @kind direct;
  #L14c308.  goto L14c2d2;
  #L14c30a.  v1:= v2;
  #L14c30c.  goto L14c28a;
}
procedure `com.b.a.b.g$d` `b`(`com.b.a.b.g` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/b/g;.b:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L14c320.  call temp:= `a`(v2, v3) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L14c326.  v0:= temp @kind object;
  #L14c328.  if v0 == 0 then goto L14c334;
  #L14c32c.  v1:= 1I;
  #L14c32e.  call `a`(v2, v0, v1) @signature `Lcom/b/a/b/g;.a:(Lcom/b/a/b/g$d;Z)V` @kind virtual;
  #L14c334.  return v0 @kind object;
}
procedure `void` `clear`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.clear:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14c348.  v0:= 0I;
  #L14c34a.  v1.`com.b.a.b.g.b` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L14c34e.  v0:= 0I;
  #L14c350.  v1.`com.b.a.b.g.c` @type ^`int` := v0;
  #L14c354.  v0:= v1.`com.b.a.b.g.d` @type ^`int`;
  #L14c358.  v0:= v0 + 1;
  #L14c35c.  v1.`com.b.a.b.g.d` @type ^`int` := v0;
  #L14c360.  v0:= v1.`com.b.a.b.g.e` @type ^`com.b.a.b.g$d` @kind object;
  #L14c364.  v0.`com.b.a.b.g$d.e` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L14c368.  v0.`com.b.a.b.g$d.d` @type ^`com.b.a.b.g$d` := v0 @kind object;
  #L14c36c.  return @kind void;
}
procedure `boolean` `containsKey`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g;.containsKey:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14c380.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L14c386.  v0:= temp @kind object;
  #L14c388.  if v0 == 0 then goto L14c390;
  #L14c38c.  v0:= 1I;
  #L14c38e.  return v0;
  #L14c390.  v0:= 0I;
  #L14c392.  goto L14c38e;
}
procedure `java.util.Set` `entrySet`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.entrySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14c3a4.  v0:= v1.`com.b.a.b.g.h` @type ^`com.b.a.b.g$a` @kind object;
  #L14c3a8.  if v0 == 0 then goto L14c3ae;
  #L14c3ac.  return v0 @kind object;
  #L14c3ae.  v0:= new `com.b.a.b.g$a`;
  #L14c3b2.  call `<init>`(v0, v1) @signature `Lcom/b/a/b/g$a;.<init>:(Lcom/b/a/b/g;)V` @kind direct;
  #L14c3b8.  v1.`com.b.a.b.g.h` @type ^`com.b.a.b.g$a` := v0 @kind object;
  #L14c3bc.  goto L14c3ac;
}
procedure `java.lang.Object` `get`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14c3d0.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L14c3d6.  v0:= temp @kind object;
  #L14c3d8.  if v0 == 0 then goto L14c3e2;
  #L14c3dc.  v0:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L14c3e0.  return v0 @kind object;
  #L14c3e2.  v0:= 0I;
  #L14c3e4.  goto L14c3e0;
}
procedure `java.util.Set` `keySet`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.keySet:()Ljava/util/Set;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14c3f8.  v0:= v1.`com.b.a.b.g.i` @type ^`com.b.a.b.g$b` @kind object;
  #L14c3fc.  if v0 == 0 then goto L14c402;
  #L14c400.  return v0 @kind object;
  #L14c402.  v0:= new `com.b.a.b.g$b`;
  #L14c406.  call `<init>`(v0, v1) @signature `Lcom/b/a/b/g$b;.<init>:(Lcom/b/a/b/g;)V` @kind direct;
  #L14c40c.  v1.`com.b.a.b.g.i` @type ^`com.b.a.b.g$b` := v0 @kind object;
  #L14c410.  goto L14c400;
}
procedure `java.lang.Object` `put`(`com.b.a.b.g` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/b/a/b/g;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14c424.  if v3 != 0 then goto L14c438;
  #L14c428.  v0:= new `java.lang.NullPointerException`;
  #L14c42c.  v1:= "key == null" @kind object;
  #L14c430.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14c436.  throw v0;
  #L14c438.  v0:= 1I;
  #L14c43a.  call temp:= `a`(v2, v3, v0) @signature `Lcom/b/a/b/g;.a:(Ljava/lang/Object;Z)Lcom/b/a/b/g$d;` @kind virtual;
  #L14c440.  v0:= temp @kind object;
  #L14c442.  v1:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L14c446.  v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` := v4 @kind object;
  #L14c44a.  return v1 @kind object;
}
procedure `java.lang.Object` `remove`(`com.b.a.b.g` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/g;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14c45c.  call temp:= `b`(v1, v2) @signature `Lcom/b/a/b/g;.b:(Ljava/lang/Object;)Lcom/b/a/b/g$d;` @kind virtual;
  #L14c462.  v0:= temp @kind object;
  #L14c464.  if v0 == 0 then goto L14c46e;
  #L14c468.  v0:= v0.`com.b.a.b.g$d.g` @type ^`java.lang.Object` @kind object;
  #L14c46c.  return v0 @kind object;
  #L14c46e.  v0:= 0I;
  #L14c470.  goto L14c46c;
}
procedure `int` `size`(`com.b.a.b.g` v1 @kind this) @signature `Lcom/b/a/b/g;.size:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14c484.  v0:= v1.`com.b.a.b.g.c` @type ^`int`;
  #L14c488.  return v0;
}
