record `com.b.a.b.a.e` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.d.a` @kind class {
  `java.lang.Object`[] `com.b.a.b.a.e.d` @AccessFlag PRIVATE;
  `int` `com.b.a.b.a.e.e` @AccessFlag PRIVATE;
  `java.lang.String`[] `com.b.a.b.a.e.f` @AccessFlag PRIVATE;
  `int`[] `com.b.a.b.a.e.g` @AccessFlag PRIVATE;
}
global `java.io.Reader` `@@com.b.a.b.a.e.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object` `@@com.b.a.b.a.e.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/a/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L144664.  v0:= new `com.b.a.b.a.e$1`;
  #L144668.  call `<init>`(v0) @signature `Lcom/b/a/b/a/e$1;.<init>:()V` @kind direct;
  #L14466e.  `@@com.b.a.b.a.e.b` @type ^`java.io.Reader` := v0 @kind object;
  #L144672.  v0:= new `java.lang.Object`;
  #L144676.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L14467c.  `@@com.b.a.b.a.e.c` @type ^`java.lang.Object` := v0 @kind object;
  #L144680.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.e` v3 @kind this, `com.b.a.d.b` v4 @kind object) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L144694.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L14469a.  v0:= temp @kind object;
  #L14469c.  if v0 == v4 then goto L1446fe;
  #L1446a0.  v0:= new `java.lang.IllegalStateException`;
  #L1446a4.  v1:= new `java.lang.StringBuilder`;
  #L1446a8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1446ae.  v2:= "Expected " @kind object;
  #L1446b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1446b8.  v1:= temp @kind object;
  #L1446ba.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1446c0.  v1:= temp @kind object;
  #L1446c2.  v2:= " but was " @kind object;
  #L1446c6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1446cc.  v1:= temp @kind object;
  #L1446ce.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L1446d4.  v2:= temp @kind object;
  #L1446d6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1446dc.  v1:= temp @kind object;
  #L1446de.  call temp:= `u`(v3) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L1446e4.  v2:= temp @kind object;
  #L1446e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1446ec.  v1:= temp @kind object;
  #L1446ee.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1446f4.  v1:= temp @kind object;
  #L1446f6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1446fc.  throw v0;
  #L1446fe.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.e` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L144710.  v5:= 0I;
  #L144712.  v0:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L144716.  v1:= v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L14471a.  v1:= length @variable v1;
  #L14471c.  if v0 != v1 then goto L14477a;
  #L144720.  v0:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L144724.  v0:= v0 * 2;
  #L144728.  v0:= new `java.lang.Object`[v0];
  #L14472c.  v1:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L144730.  v1:= v1 * 2;
  #L144734.  v1:= new `int`[v1];
  #L144738.  v2:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L14473c.  v2:= v2 * 2;
  #L144740.  v2:= new `java.lang.String`[v2];
  #L144744.  v3:= v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L144748.  v4:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L14474c.  call `arraycopy`(v3, v5, v0, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L144752.  v3:= v6.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L144756.  v4:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L14475a.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L144760.  v3:= v6.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L144764.  v4:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L144768.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L14476e.  v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] := v0 @kind object;
  #L144772.  v6.`com.b.a.b.a.e.g` @type ^`int`[] := v1 @kind object;
  #L144776.  v6.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] := v2 @kind object;
  #L14477a.  v0:= v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L14477e.  v1:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L144782.  v2:= v1 + 1;
  #L144786.  v6.`com.b.a.b.a.e.e` @type ^`int` := v2;
  #L14478a.  v0[v1]:= v7 @kind object;
  #L14478e.  return @kind void;
}
procedure `java.lang.Object` `s`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1447a0.  v0:= v2.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L1447a4.  v1:= v2.`com.b.a.b.a.e.e` @type ^`int`;
  #L1447a8.  v1:= v1 + -1;
  #L1447ac.  v0:= v0[v1] @kind object;
  #L1447b0.  return v0 @kind object;
}
procedure `java.lang.Object` `t`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1447c4.  v0:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L1447c8.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L1447cc.  v1:= v1 + -1;
  #L1447d0.  v4.`com.b.a.b.a.e.e` @type ^`int` := v1;
  #L1447d4.  v0:= v0[v1] @kind object;
  #L1447d8.  v1:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L1447dc.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L1447e0.  v3:= 0I;
  #L1447e2.  v1[v2]:= v3 @kind object;
  #L1447e6.  return v0 @kind object;
}
procedure `java.lang.String` `u`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1447f8.  v0:= new `java.lang.StringBuilder`;
  #L1447fc.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L144802.  v1:= " at path " @kind object;
  #L144806.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14480c.  v0:= temp @kind object;
  #L14480e.  call temp:= `p`(v2) @signature `Lcom/b/a/b/a/e;.p:()Ljava/lang/String;` @kind virtual;
  #L144814.  v1:= temp @kind object;
  #L144816.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14481c.  v0:= temp @kind object;
  #L14481e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L144824.  v0:= temp @kind object;
  #L144826.  return v0 @kind object;
}
procedure `void` `a`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L144838.  v0:= `@@com.b.a.d.b.a` @type ^`com.b.a.d.b` @kind object;
  #L14483c.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L144842.  call temp:= `s`(v3) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L144848.  v0:= temp @kind object;
  #L14484a.  v0:= (`com.b.a.i`) v0 @kind object;
  #L14484e.  call temp:= `iterator`(v0) @signature `Lcom/b/a/i;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L144854.  v0:= temp @kind object;
  #L144856.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L14485c.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L144860.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L144864.  v1:= v1 + -1;
  #L144868.  v2:= 0I;
  #L14486a.  v0[v1]:= v2;
  #L14486e.  return @kind void;
}
procedure `void` `b`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L144880.  v0:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L144884.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L14488a.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L144890.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L144896.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L14489a.  if v0 <= 0 then goto L1448b6;
  #L14489e.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L1448a2.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L1448a6.  v1:= v1 + -1;
  #L1448aa.  v2:= v0[v1];
  #L1448ae.  v2:= v2 + 1;
  #L1448b2.  v0[v1]:= v2;
  #L1448b6.  return @kind void;
}
procedure `void` `c`(`com.b.a.b.a.e` v1 @kind this) @signature `Lcom/b/a/b/a/e;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1448c8.  v0:= `@@com.b.a.d.b.c` @type ^`com.b.a.d.b` @kind object;
  #L1448cc.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L1448d2.  call temp:= `s`(v1) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L1448d8.  v0:= temp @kind object;
  #L1448da.  v0:= (`com.b.a.o`) v0 @kind object;
  #L1448de.  call temp:= `o`(v0) @signature `Lcom/b/a/o;.o:()Ljava/util/Set;` @kind virtual;
  #L1448e4.  v0:= temp @kind object;
  #L1448e6.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1448ec.  v0:= temp @kind object;
  #L1448ee.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L1448f4.  return @kind void;
}
procedure `void` `close`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L144908.  v3:= 1I;
  #L14490a.  v0:= new `java.lang.Object`[v3];
  #L14490e.  v1:= 0I;
  #L144910.  v2:= `@@com.b.a.b.a.e.c` @type ^`java.lang.Object` @kind object;
  #L144914.  v0[v1]:= v2 @kind object;
  #L144918.  v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] := v0 @kind object;
  #L14491c.  v4.`com.b.a.b.a.e.e` @type ^`int` := v3;
  #L144920.  return @kind void;
}
procedure `void` `d`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L144934.  v0:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L144938.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L14493e.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L144944.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L14494a.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L14494e.  if v0 <= 0 then goto L14496a;
  #L144952.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L144956.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L14495a.  v1:= v1 + -1;
  #L14495e.  v2:= v0[v1];
  #L144962.  v2:= v2 + 1;
  #L144966.  v0[v1]:= v2;
  #L14496a.  return @kind void;
}
procedure `boolean` `e`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14497c.  call temp:= `f`(v2) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L144982.  v0:= temp @kind object;
  #L144984.  v1:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L144988.  if v0 == v1 then goto L144998;
  #L14498c.  v1:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L144990.  if v0 == v1 then goto L144998;
  #L144994.  v0:= 1I;
  #L144996.  return v0;
  #L144998.  v0:= 0I;
  #L14499a.  goto L144996;
}
procedure `com.b.a.d.b` `f`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1449ac.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L1449b0.  if v0 != 0 then goto L1449ba;
  #L1449b4.  v0:= `@@com.b.a.d.b.j` @type ^`com.b.a.d.b` @kind object;
  #L1449b8.  return v0 @kind object;
  #L1449ba.  call temp:= `s`(v3) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L1449c0.  v0:= temp @kind object;
  #L1449c2.  v1:= instanceof @variable v0 @type ^`java.util.Iterator` @kind boolean;
  #L1449c6.  if v1 == 0 then goto L144a20;
  #L1449ca.  v1:= v3.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L1449ce.  v2:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L1449d2.  v2:= v2 + -2;
  #L1449d6.  v1:= v1[v2] @kind object;
  #L1449da.  v1:= instanceof @variable v1 @type ^`com.b.a.o` @kind boolean;
  #L1449de.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L1449e2.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L1449e8.  v2:= temp;
  #L1449ea.  if v2 == 0 then goto L144a10;
  #L1449ee.  if v1 == 0 then goto L1449f8;
  #L1449f2.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L1449f6.  goto L1449b8;
  #L1449f8.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1449fe.  v0:= temp @kind object;
  #L144a00.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L144a06.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L144a0c.  v0:= temp @kind object;
  #L144a0e.  goto L1449b8;
  #L144a10.  if v1 == 0 then goto L144a1a;
  #L144a14.  v0:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L144a18.  goto L1449b8;
  #L144a1a.  v0:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L144a1e.  goto L1449b8;
  #L144a20.  v1:= instanceof @variable v0 @type ^`com.b.a.o` @kind boolean;
  #L144a24.  if v1 == 0 then goto L144a2e;
  #L144a28.  v0:= `@@com.b.a.d.b.c` @type ^`com.b.a.d.b` @kind object;
  #L144a2c.  goto L1449b8;
  #L144a2e.  v1:= instanceof @variable v0 @type ^`com.b.a.i` @kind boolean;
  #L144a32.  if v1 == 0 then goto L144a3c;
  #L144a36.  v0:= `@@com.b.a.d.b.a` @type ^`com.b.a.d.b` @kind object;
  #L144a3a.  goto L1449b8;
  #L144a3c.  v1:= instanceof @variable v0 @type ^`com.b.a.q` @kind boolean;
  #L144a40.  if v1 == 0 then goto L144a8a;
  #L144a44.  v0:= (`com.b.a.q`) v0 @kind object;
  #L144a48.  call temp:= `q`(v0) @signature `Lcom/b/a/q;.q:()Z` @kind virtual;
  #L144a4e.  v1:= temp;
  #L144a50.  if v1 == 0 then goto L144a5a;
  #L144a54.  v0:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L144a58.  goto L1449b8;
  #L144a5a.  call temp:= `o`(v0) @signature `Lcom/b/a/q;.o:()Z` @kind virtual;
  #L144a60.  v1:= temp;
  #L144a62.  if v1 == 0 then goto L144a6c;
  #L144a66.  v0:= `@@com.b.a.d.b.h` @type ^`com.b.a.d.b` @kind object;
  #L144a6a.  goto L1449b8;
  #L144a6c.  call temp:= `p`(v0) @signature `Lcom/b/a/q;.p:()Z` @kind virtual;
  #L144a72.  v0:= temp;
  #L144a74.  if v0 == 0 then goto L144a7e;
  #L144a78.  v0:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L144a7c.  goto L1449b8;
  #L144a7e.  v0:= new `java.lang.AssertionError`;
  #L144a82.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L144a88.  throw v0;
  #L144a8a.  v1:= instanceof @variable v0 @type ^`com.b.a.n` @kind boolean;
  #L144a8e.  if v1 == 0 then goto L144a98;
  #L144a92.  v0:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L144a96.  goto L1449b8;
  #L144a98.  v1:= `@@com.b.a.b.a.e.c` @type ^`java.lang.Object` @kind object;
  #L144a9c.  if v0 != v1 then goto L144ab0;
  #L144aa0.  v0:= new `java.lang.IllegalStateException`;
  #L144aa4.  v1:= "JsonReader is closed" @kind object;
  #L144aa8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L144aae.  throw v0;
  #L144ab0.  v0:= new `java.lang.AssertionError`;
  #L144ab4.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L144aba.  throw v0;
}
procedure `java.lang.String` `g`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.g:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L144acc.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L144ad0.  call `a`(v4, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L144ad6.  call temp:= `s`(v4) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L144adc.  v0:= temp @kind object;
  #L144ade.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L144ae2.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L144ae8.  v0:= temp @kind object;
  #L144aea.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L144aee.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L144af4.  v1:= temp @kind object;
  #L144af6.  v1:= (`java.lang.String`) v1 @kind object;
  #L144afa.  v2:= v4.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L144afe.  v3:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L144b02.  v3:= v3 + -1;
  #L144b06.  v2[v3]:= v1 @kind object;
  #L144b0a.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L144b10.  v0:= temp @kind object;
  #L144b12.  call `a`(v4, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L144b18.  return v1 @kind object;
}
procedure `java.lang.String` `h`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.h:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L144b2c.  call temp:= `f`(v4) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L144b32.  v0:= temp @kind object;
  #L144b34.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L144b38.  if v0 == v1 then goto L144b9e;
  #L144b3c.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L144b40.  if v0 == v1 then goto L144b9e;
  #L144b44.  v1:= new `java.lang.IllegalStateException`;
  #L144b48.  v2:= new `java.lang.StringBuilder`;
  #L144b4c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L144b52.  v3:= "Expected " @kind object;
  #L144b56.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144b5c.  v2:= temp @kind object;
  #L144b5e.  v3:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L144b62.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144b68.  v2:= temp @kind object;
  #L144b6a.  v3:= " but was " @kind object;
  #L144b6e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144b74.  v2:= temp @kind object;
  #L144b76.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144b7c.  v0:= temp @kind object;
  #L144b7e.  call temp:= `u`(v4) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L144b84.  v2:= temp @kind object;
  #L144b86.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144b8c.  v0:= temp @kind object;
  #L144b8e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L144b94.  v0:= temp @kind object;
  #L144b96.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L144b9c.  throw v1;
  #L144b9e.  call temp:= `t`(v4) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L144ba4.  v0:= temp @kind object;
  #L144ba6.  v0:= (`com.b.a.q`) v0 @kind object;
  #L144baa.  call temp:= `b`(v0) @signature `Lcom/b/a/q;.b:()Ljava/lang/String;` @kind virtual;
  #L144bb0.  v0:= temp @kind object;
  #L144bb2.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L144bb6.  if v1 <= 0 then goto L144bd2;
  #L144bba.  v1:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L144bbe.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L144bc2.  v2:= v2 + -1;
  #L144bc6.  v3:= v1[v2];
  #L144bca.  v3:= v3 + 1;
  #L144bce.  v1[v2]:= v3;
  #L144bd2.  return v0 @kind object;
}
procedure `boolean` `i`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L144be4.  v0:= `@@com.b.a.d.b.h` @type ^`com.b.a.d.b` @kind object;
  #L144be8.  call `a`(v4, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L144bee.  call temp:= `t`(v4) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L144bf4.  v0:= temp @kind object;
  #L144bf6.  v0:= (`com.b.a.q`) v0 @kind object;
  #L144bfa.  call temp:= `f`(v0) @signature `Lcom/b/a/q;.f:()Z` @kind virtual;
  #L144c00.  v0:= temp;
  #L144c02.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L144c06.  if v1 <= 0 then goto L144c22;
  #L144c0a.  v1:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L144c0e.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L144c12.  v2:= v2 + -1;
  #L144c16.  v3:= v1[v2];
  #L144c1a.  v3:= v3 + 1;
  #L144c1e.  v1[v2]:= v3;
  #L144c22.  return v0;
}
procedure `void` `j`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.j:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L144c34.  v0:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L144c38.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L144c3e.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L144c44.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L144c48.  if v0 <= 0 then goto L144c64;
  #L144c4c.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L144c50.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L144c54.  v1:= v1 + -1;
  #L144c58.  v2:= v0[v1];
  #L144c5c.  v2:= v2 + 1;
  #L144c60.  v0[v1]:= v2;
  #L144c64.  return @kind void;
}
procedure `double` `k`(`com.b.a.b.a.e` v5 @kind this) @signature `Lcom/b/a/b/a/e;.k:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L144c78.  call temp:= `f`(v5) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L144c7e.  v0:= temp @kind object;
  #L144c80.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L144c84.  if v0 == v1 then goto L144cea;
  #L144c88.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L144c8c.  if v0 == v1 then goto L144cea;
  #L144c90.  v1:= new `java.lang.IllegalStateException`;
  #L144c94.  v2:= new `java.lang.StringBuilder`;
  #L144c98.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L144c9e.  v3:= "Expected " @kind object;
  #L144ca2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144ca8.  v2:= temp @kind object;
  #L144caa.  v3:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L144cae.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144cb4.  v2:= temp @kind object;
  #L144cb6.  v3:= " but was " @kind object;
  #L144cba.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144cc0.  v2:= temp @kind object;
  #L144cc2.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144cc8.  v0:= temp @kind object;
  #L144cca.  call temp:= `u`(v5) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L144cd0.  v2:= temp @kind object;
  #L144cd2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144cd8.  v0:= temp @kind object;
  #L144cda.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L144ce0.  v0:= temp @kind object;
  #L144ce2.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L144ce8.  throw v1;
  #L144cea.  call temp:= `s`(v5) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L144cf0.  v0:= temp @kind object;
  #L144cf2.  v0:= (`com.b.a.q`) v0 @kind object;
  #L144cf6.  call temp:= `c`(v0) @signature `Lcom/b/a/q;.c:()D` @kind virtual;
  #L144cfc.  v0:= temp @kind wide;
  #L144cfe.  call temp:= `q`(v5) @signature `Lcom/b/a/b/a/e;.q:()Z` @kind virtual;
  #L144d04.  v2:= temp;
  #L144d06.  if v2 != 0 then goto L144d54;
  #L144d0a.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L144d10.  v2:= temp;
  #L144d12.  if v2 != 0 then goto L144d22;
  #L144d16.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L144d1c.  v2:= temp;
  #L144d1e.  if v2 == 0 then goto L144d54;
  #L144d22.  v2:= new `java.lang.NumberFormatException`;
  #L144d26.  v3:= new `java.lang.StringBuilder`;
  #L144d2a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L144d30.  v4:= "JSON forbids NaN and infinities: " @kind object;
  #L144d34.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144d3a.  v3:= temp @kind object;
  #L144d3c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L144d42.  v0:= temp @kind object;
  #L144d44.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L144d4a.  v0:= temp @kind object;
  #L144d4c.  call `<init>`(v2, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L144d52.  throw v2;
  #L144d54.  call temp:= `t`(v5) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L144d5a.  v2:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L144d5e.  if v2 <= 0 then goto L144d7a;
  #L144d62.  v2:= v5.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L144d66.  v3:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L144d6a.  v3:= v3 + -1;
  #L144d6e.  v4:= v2[v3];
  #L144d72.  v4:= v4 + 1;
  #L144d76.  v2[v3]:= v4;
  #L144d7a.  return v0 @kind wide;
}
procedure `long` `l`(`com.b.a.b.a.e` v5 @kind this) @signature `Lcom/b/a/b/a/e;.l:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L144d8c.  call temp:= `f`(v5) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L144d92.  v0:= temp @kind object;
  #L144d94.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L144d98.  if v0 == v1 then goto L144dfe;
  #L144d9c.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L144da0.  if v0 == v1 then goto L144dfe;
  #L144da4.  v1:= new `java.lang.IllegalStateException`;
  #L144da8.  v2:= new `java.lang.StringBuilder`;
  #L144dac.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L144db2.  v3:= "Expected " @kind object;
  #L144db6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144dbc.  v2:= temp @kind object;
  #L144dbe.  v3:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L144dc2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144dc8.  v2:= temp @kind object;
  #L144dca.  v3:= " but was " @kind object;
  #L144dce.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144dd4.  v2:= temp @kind object;
  #L144dd6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144ddc.  v0:= temp @kind object;
  #L144dde.  call temp:= `u`(v5) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L144de4.  v2:= temp @kind object;
  #L144de6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144dec.  v0:= temp @kind object;
  #L144dee.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L144df4.  v0:= temp @kind object;
  #L144df6.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L144dfc.  throw v1;
  #L144dfe.  call temp:= `s`(v5) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L144e04.  v0:= temp @kind object;
  #L144e06.  v0:= (`com.b.a.q`) v0 @kind object;
  #L144e0a.  call temp:= `d`(v0) @signature `Lcom/b/a/q;.d:()J` @kind virtual;
  #L144e10.  v0:= temp @kind wide;
  #L144e12.  call temp:= `t`(v5) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L144e18.  v2:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L144e1c.  if v2 <= 0 then goto L144e38;
  #L144e20.  v2:= v5.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L144e24.  v3:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L144e28.  v3:= v3 + -1;
  #L144e2c.  v4:= v2[v3];
  #L144e30.  v4:= v4 + 1;
  #L144e34.  v2[v3]:= v4;
  #L144e38.  return v0 @kind wide;
}
procedure `int` `m`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.m:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L144e4c.  call temp:= `f`(v4) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L144e52.  v0:= temp @kind object;
  #L144e54.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L144e58.  if v0 == v1 then goto L144ebe;
  #L144e5c.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L144e60.  if v0 == v1 then goto L144ebe;
  #L144e64.  v1:= new `java.lang.IllegalStateException`;
  #L144e68.  v2:= new `java.lang.StringBuilder`;
  #L144e6c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L144e72.  v3:= "Expected " @kind object;
  #L144e76.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144e7c.  v2:= temp @kind object;
  #L144e7e.  v3:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L144e82.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144e88.  v2:= temp @kind object;
  #L144e8a.  v3:= " but was " @kind object;
  #L144e8e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144e94.  v2:= temp @kind object;
  #L144e96.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144e9c.  v0:= temp @kind object;
  #L144e9e.  call temp:= `u`(v4) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L144ea4.  v2:= temp @kind object;
  #L144ea6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144eac.  v0:= temp @kind object;
  #L144eae.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L144eb4.  v0:= temp @kind object;
  #L144eb6.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L144ebc.  throw v1;
  #L144ebe.  call temp:= `s`(v4) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L144ec4.  v0:= temp @kind object;
  #L144ec6.  v0:= (`com.b.a.q`) v0 @kind object;
  #L144eca.  call temp:= `e`(v0) @signature `Lcom/b/a/q;.e:()I` @kind virtual;
  #L144ed0.  v0:= temp;
  #L144ed2.  call temp:= `t`(v4) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L144ed8.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L144edc.  if v1 <= 0 then goto L144ef8;
  #L144ee0.  v1:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L144ee4.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L144ee8.  v2:= v2 + -1;
  #L144eec.  v3:= v1[v2];
  #L144ef0.  v3:= v3 + 1;
  #L144ef4.  v1[v2]:= v3;
  #L144ef8.  return v0;
}
procedure `void` `n`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.n:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L144f0c.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L144f12.  v0:= temp @kind object;
  #L144f14.  v1:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L144f18.  if v0 != v1 then goto L144f50;
  #L144f1c.  call temp:= `g`(v3) @signature `Lcom/b/a/b/a/e;.g:()Ljava/lang/String;` @kind virtual;
  #L144f22.  v0:= v3.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L144f26.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L144f2a.  v1:= v1 + -2;
  #L144f2e.  v2:= "null" @kind object;
  #L144f32.  v0[v1]:= v2 @kind object;
  #L144f36.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L144f3a.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L144f3e.  v1:= v1 + -1;
  #L144f42.  v2:= v0[v1];
  #L144f46.  v2:= v2 + 1;
  #L144f4a.  v0[v1]:= v2;
  #L144f4e.  return @kind void;
  #L144f50.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L144f56.  v0:= v3.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L144f5a.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L144f5e.  v1:= v1 + -1;
  #L144f62.  v2:= "null" @kind object;
  #L144f66.  v0[v1]:= v2 @kind object;
  #L144f6a.  goto L144f36;
}
procedure `void` `o`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.o:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L144f7c.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L144f80.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L144f86.  call temp:= `s`(v2) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L144f8c.  v0:= temp @kind object;
  #L144f8e.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L144f92.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L144f98.  v0:= temp @kind object;
  #L144f9a.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L144f9e.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L144fa4.  v1:= temp @kind object;
  #L144fa6.  call `a`(v2, v1) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L144fac.  v1:= new `com.b.a.q`;
  #L144fb0.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L144fb6.  v0:= temp @kind object;
  #L144fb8.  v0:= (`java.lang.String`) v0 @kind object;
  #L144fbc.  call `<init>`(v1, v0) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L144fc2.  call `a`(v2, v1) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L144fc8.  return @kind void;
}
procedure `java.lang.String` `p`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L144fdc.  v0:= new `java.lang.StringBuilder`;
  #L144fe0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L144fe6.  v1:= 36I;
  #L144fea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L144ff0.  v1:= temp @kind object;
  #L144ff2.  v0:= 0I;
  #L144ff4.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L144ff8.  if v0 >= v2 then goto L145096;
  #L144ffc.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L145000.  v2:= v2[v0] @kind object;
  #L145004.  v2:= instanceof @variable v2 @type ^`com.b.a.i` @kind boolean;
  #L145008.  if v2 == 0 then goto L14504c;
  #L14500c.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L145010.  v0:= v0 + 1;
  #L145014.  v2:= v2[v0] @kind object;
  #L145018.  v2:= instanceof @variable v2 @type ^`java.util.Iterator` @kind boolean;
  #L14501c.  if v2 == 0 then goto L145046;
  #L145020.  v2:= 91I;
  #L145024.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14502a.  v2:= temp @kind object;
  #L14502c.  v3:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L145030.  v3:= v3[v0];
  #L145034.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14503a.  v2:= temp @kind object;
  #L14503c.  v3:= 93I;
  #L145040.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L145046.  v0:= v0 + 1;
  #L14504a.  goto L144ff4;
  #L14504c.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L145050.  v2:= v2[v0] @kind object;
  #L145054.  v2:= instanceof @variable v2 @type ^`com.b.a.o` @kind boolean;
  #L145058.  if v2 == 0 then goto L145046;
  #L14505c.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L145060.  v0:= v0 + 1;
  #L145064.  v2:= v2[v0] @kind object;
  #L145068.  v2:= instanceof @variable v2 @type ^`java.util.Iterator` @kind boolean;
  #L14506c.  if v2 == 0 then goto L145046;
  #L145070.  v2:= 46I;
  #L145074.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14507a.  v2:= v4.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L14507e.  v2:= v2[v0] @kind object;
  #L145082.  if v2 == 0 then goto L145046;
  #L145086.  v2:= v4.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L14508a.  v2:= v2[v0] @kind object;
  #L14508e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145094.  goto L145046;
  #L145096.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14509c.  v0:= temp @kind object;
  #L14509e.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.b.a.b.a.e` v1 @kind this) @signature `Lcom/b/a/b/a/e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1450b0.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1450b6.  v0:= temp @kind object;
  #L1450b8.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1450be.  v0:= temp @kind object;
  #L1450c0.  return v0 @kind object;
}
