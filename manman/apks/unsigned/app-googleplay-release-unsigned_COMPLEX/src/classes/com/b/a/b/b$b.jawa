record `com.b.a.b.b$b` @kind class @AccessFlag FINAL extends `java.io.Serializable` @kind interface, `java.lang.reflect.ParameterizedType` @kind interface {
  `java.lang.reflect.Type` `com.b.a.b.b$b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `com.b.a.b.b$b.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type`[] `com.b.a.b.b$b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.b.b$b` v4 @kind this, `java.lang.reflect.Type` v5 @kind object, `java.lang.reflect.Type` v6 @kind object, `java.lang.reflect.Type`[] v7 @kind object) @signature `Lcom/b/a/b/b$b;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L149bdc.  v2:= 1I;
  #L149bde.  v1:= 0I;
  #L149be0.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L149be6.  v0:= instanceof @variable v6 @type ^`java.lang.Class` @kind boolean;
  #L149bea.  if v0 == 0 then goto L149c26;
  #L149bee.  v0:= v6 @kind object;
  #L149bf0.  v0:= (`java.lang.Class`) v0 @kind object;
  #L149bf4.  call temp:= `getModifiers`(v0) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L149bfa.  v3:= temp;
  #L149bfc.  call temp:= `isStatic`(v3) @signature `Ljava/lang/reflect/Modifier;.isStatic:(I)Z` @kind static;
  #L149c02.  v3:= temp;
  #L149c04.  if v3 != 0 then goto L149c14;
  #L149c08.  call temp:= `getEnclosingClass`(v0) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L149c0e.  v0:= temp @kind object;
  #L149c10.  if v0 != 0 then goto L149c90;
  #L149c14.  v0:= v2;
  #L149c16.  if v5 != 0 then goto L149c1e;
  #L149c1a.  if v0 == 0 then goto L149c94;
  #L149c1e.  v0:= v2;
  #L149c20.  call `a`(v0) @signature `Lcom/b/a/b/a;.a:(Z)V` @kind static;
  #L149c26.  if v5 != 0 then goto L149c98;
  #L149c2a.  v0:= 0I;
  #L149c2c.  v4.`com.b.a.b.b$b.a` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L149c30.  call temp:= `d`(v6) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L149c36.  v0:= temp @kind object;
  #L149c38.  v4.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L149c3c.  call temp:= `clone`(v7) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L149c42.  v0:= temp @kind object;
  #L149c44.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L149c48.  v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L149c4c.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L149c50.  v0:= length @variable v0;
  #L149c52.  if v1 >= v0 then goto L149ca2;
  #L149c56.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L149c5a.  v0:= v0[v1] @kind object;
  #L149c5e.  call temp:= `a`(v0) @signature `Lcom/b/a/b/a;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L149c64.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L149c68.  v0:= v0[v1] @kind object;
  #L149c6c.  call `h`(v0) @signature `Lcom/b/a/b/b;.h:(Ljava/lang/reflect/Type;)V` @kind static;
  #L149c72.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L149c76.  v2:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L149c7a.  v2:= v2[v1] @kind object;
  #L149c7e.  call temp:= `d`(v2) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L149c84.  v2:= temp @kind object;
  #L149c86.  v0[v1]:= v2 @kind object;
  #L149c8a.  v1:= v1 + 1;
  #L149c8e.  goto L149c4c;
  #L149c90.  v0:= v1;
  #L149c92.  goto L149c16;
  #L149c94.  v0:= v1;
  #L149c96.  goto L149c20;
  #L149c98.  call temp:= `d`(v5) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L149c9e.  v0:= temp @kind object;
  #L149ca0.  goto L149c2c;
  #L149ca2.  return @kind void;
}
procedure `boolean` `equals`(`com.b.a.b.b$b` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/b$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L149cb4.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L149cb8.  if v0 == 0 then goto L149cd0;
  #L149cbc.  v2:= (`java.lang.reflect.ParameterizedType`) v2 @kind object;
  #L149cc0.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L149cc6.  v0:= temp;
  #L149cc8.  if v0 == 0 then goto L149cd0;
  #L149ccc.  v0:= 1I;
  #L149cce.  return v0;
  #L149cd0.  v0:= 0I;
  #L149cd2.  goto L149cce;
}
procedure `java.lang.reflect.Type`[] `getActualTypeArguments`(`com.b.a.b.b$b` v1 @kind this) @signature `Lcom/b/a/b/b$b;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L149ce4.  v0:= v1.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L149ce8.  call temp:= `clone`(v0) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L149cee.  v0:= temp @kind object;
  #L149cf0.  v0:= (`java.lang.reflect.Type`[]) v0 @kind object;
  #L149cf4.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getOwnerType`(`com.b.a.b.b$b` v1 @kind this) @signature `Lcom/b/a/b/b$b;.getOwnerType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L149d08.  v0:= v1.`com.b.a.b.b$b.a` @type ^`java.lang.reflect.Type` @kind object;
  #L149d0c.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getRawType`(`com.b.a.b.b$b` v1 @kind this) @signature `Lcom/b/a/b/b$b;.getRawType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L149d20.  v0:= v1.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L149d24.  return v0 @kind object;
}
procedure `int` `hashCode`(`com.b.a.b.b$b` v2 @kind this) @signature `Lcom/b/a/b/b$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L149d38.  v0:= v2.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L149d3c.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L149d42.  v0:= temp;
  #L149d44.  v1:= v2.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L149d48.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L149d4e.  v1:= temp;
  #L149d50.  v0:= v0 ^~ v1 @kind int;
  #L149d52.  v1:= v2.`com.b.a.b.b$b.a` @type ^`java.lang.reflect.Type` @kind object;
  #L149d56.  call temp:= `a`(v1) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/Object;)I` @kind static;
  #L149d5c.  v1:= temp;
  #L149d5e.  v0:= v0 ^~ v1 @kind int;
  #L149d60.  return v0;
}
procedure `java.lang.String` `toString`(`com.b.a.b.b$b` v4 @kind this) @signature `Lcom/b/a/b/b$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L149d74.  v1:= new `java.lang.StringBuilder`;
  #L149d78.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L149d7c.  v0:= length @variable v0;
  #L149d7e.  v0:= v0 + 1;
  #L149d82.  v0:= v0 * 30;
  #L149d86.  call `<init>`(v1, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L149d8c.  v0:= v4.`com.b.a.b.b$b.b` @type ^`java.lang.reflect.Type` @kind object;
  #L149d90.  call temp:= `f`(v0) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L149d96.  v0:= temp @kind object;
  #L149d98.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L149d9e.  v0:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L149da2.  v0:= length @variable v0;
  #L149da4.  if v0 != 0 then goto L149db2;
  #L149da8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L149dae.  v0:= temp @kind object;
  #L149db0.  return v0 @kind object;
  #L149db2.  v0:= "<" @kind object;
  #L149db6.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L149dbc.  v0:= temp @kind object;
  #L149dbe.  v2:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L149dc2.  v3:= 0I;
  #L149dc4.  v2:= v2[v3] @kind object;
  #L149dc8.  call temp:= `f`(v2) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L149dce.  v2:= temp @kind object;
  #L149dd0.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L149dd6.  v0:= 1I;
  #L149dd8.  v2:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L149ddc.  v2:= length @variable v2;
  #L149dde.  if v0 >= v2 then goto L149e0a;
  #L149de2.  v2:= ", " @kind object;
  #L149de6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L149dec.  v2:= temp @kind object;
  #L149dee.  v3:= v4.`com.b.a.b.b$b.c` @type ^`java.lang.reflect.Type`[] @kind object;
  #L149df2.  v3:= v3[v0] @kind object;
  #L149df6.  call temp:= `f`(v3) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L149dfc.  v3:= temp @kind object;
  #L149dfe.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L149e04.  v0:= v0 + 1;
  #L149e08.  goto L149dd8;
  #L149e0a.  v0:= ">" @kind object;
  #L149e0e.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L149e14.  v0:= temp @kind object;
  #L149e16.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L149e1c.  v0:= temp @kind object;
  #L149e1e.  goto L149db0;
}
