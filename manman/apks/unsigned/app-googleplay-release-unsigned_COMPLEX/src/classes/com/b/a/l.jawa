record `com.b.a.l` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`com.b.a.l` v0 @kind this) @signature `Lcom/b/a/l;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L14e184.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L14e18a.  return @kind void;
}
procedure `java.lang.Number` `a`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.a:()Ljava/lang/Number;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14e19c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L14e1a0.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L14e1a6.  v1:= temp @kind object;
  #L14e1a8.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L14e1ae.  v1:= temp @kind object;
  #L14e1b0.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e1b6.  throw v0;
}
procedure `java.lang.String` `b`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14e1c8.  v0:= new `java.lang.UnsupportedOperationException`;
  #L14e1cc.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L14e1d2.  v1:= temp @kind object;
  #L14e1d4.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L14e1da.  v1:= temp @kind object;
  #L14e1dc.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e1e2.  throw v0;
}
procedure `double` `c`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.c:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14e1f4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L14e1f8.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L14e1fe.  v1:= temp @kind object;
  #L14e200.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L14e206.  v1:= temp @kind object;
  #L14e208.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e20e.  throw v0;
}
procedure `long` `d`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14e220.  v0:= new `java.lang.UnsupportedOperationException`;
  #L14e224.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L14e22a.  v1:= temp @kind object;
  #L14e22c.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L14e232.  v1:= temp @kind object;
  #L14e234.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e23a.  throw v0;
}
procedure `int` `e`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14e24c.  v0:= new `java.lang.UnsupportedOperationException`;
  #L14e250.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L14e256.  v1:= temp @kind object;
  #L14e258.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L14e25e.  v1:= temp @kind object;
  #L14e260.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e266.  throw v0;
}
procedure `boolean` `f`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14e278.  v0:= new `java.lang.UnsupportedOperationException`;
  #L14e27c.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L14e282.  v1:= temp @kind object;
  #L14e284.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L14e28a.  v1:= temp @kind object;
  #L14e28c.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e292.  throw v0;
}
procedure `boolean` `g`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14e2a4.  v0:= instanceof @variable v1 @type ^`com.b.a.i` @kind boolean;
  #L14e2a8.  return v0;
}
procedure `boolean` `h`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.h:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14e2bc.  v0:= instanceof @variable v1 @type ^`com.b.a.o` @kind boolean;
  #L14e2c0.  return v0;
}
procedure `boolean` `i`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14e2d4.  v0:= instanceof @variable v1 @type ^`com.b.a.q` @kind boolean;
  #L14e2d8.  return v0;
}
procedure `boolean` `j`(`com.b.a.l` v1 @kind this) @signature `Lcom/b/a/l;.j:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14e2ec.  v0:= instanceof @variable v1 @type ^`com.b.a.n` @kind boolean;
  #L14e2f0.  return v0;
}
procedure `com.b.a.o` `k`(`com.b.a.l` v3 @kind this) @signature `Lcom/b/a/l;.k:()Lcom/b/a/o;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L14e304.  call temp:= `h`(v3) @signature `Lcom/b/a/l;.h:()Z` @kind virtual;
  #L14e30a.  v0:= temp;
  #L14e30c.  if v0 == 0 then goto L14e316;
  #L14e310.  v3:= (`com.b.a.o`) v3 @kind object;
  #L14e314.  return v3 @kind object;
  #L14e316.  v0:= new `java.lang.IllegalStateException`;
  #L14e31a.  v1:= new `java.lang.StringBuilder`;
  #L14e31e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e324.  v2:= "Not a JSON Object: " @kind object;
  #L14e328.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e32e.  v1:= temp @kind object;
  #L14e330.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e336.  v1:= temp @kind object;
  #L14e338.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e33e.  v1:= temp @kind object;
  #L14e340.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e346.  throw v0;
}
procedure `com.b.a.i` `l`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.l:()Lcom/b/a/i;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14e358.  call temp:= `g`(v2) @signature `Lcom/b/a/l;.g:()Z` @kind virtual;
  #L14e35e.  v0:= temp;
  #L14e360.  if v0 == 0 then goto L14e36a;
  #L14e364.  v2:= (`com.b.a.i`) v2 @kind object;
  #L14e368.  return v2 @kind object;
  #L14e36a.  v0:= new `java.lang.IllegalStateException`;
  #L14e36e.  v1:= "This is not a JSON Array." @kind object;
  #L14e372.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e378.  throw v0;
}
procedure `com.b.a.q` `m`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.m:()Lcom/b/a/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14e38c.  call temp:= `i`(v2) @signature `Lcom/b/a/l;.i:()Z` @kind virtual;
  #L14e392.  v0:= temp;
  #L14e394.  if v0 == 0 then goto L14e39e;
  #L14e398.  v2:= (`com.b.a.q`) v2 @kind object;
  #L14e39c.  return v2 @kind object;
  #L14e39e.  v0:= new `java.lang.IllegalStateException`;
  #L14e3a2.  v1:= "This is not a JSON Primitive." @kind object;
  #L14e3a6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e3ac.  throw v0;
}
procedure `java.lang.Boolean` `n`(`com.b.a.l` v2 @kind this) @signature `Lcom/b/a/l;.n:()Ljava/lang/Boolean;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L14e3c0.  v0:= new `java.lang.UnsupportedOperationException`;
  #L14e3c4.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L14e3ca.  v1:= temp @kind object;
  #L14e3cc.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L14e3d2.  v1:= temp @kind object;
  #L14e3d4.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e3da.  throw v0;
}
procedure `java.lang.String` `toString`(`com.b.a.l` v3 @kind this) @signature `Lcom/b/a/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L14e3ec.  v0:= new `java.io.StringWriter`;
  #L14e3f0.  call `<init>`(v0) @signature `Ljava/io/StringWriter;.<init>:()V` @kind direct;
  #L14e3f6.  v1:= new `com.b.a.d.c`;
  #L14e3fa.  call `<init>`(v1, v0) @signature `Lcom/b/a/d/c;.<init>:(Ljava/io/Writer;)V` @kind direct;
  #L14e400.  v2:= 1I;
  #L14e402.  call `b`(v1, v2) @signature `Lcom/b/a/d/c;.b:(Z)V` @kind virtual;
  #L14e408.  call `a`(v3, v1) @signature `Lcom/b/a/b/j;.a:(Lcom/b/a/l;Lcom/b/a/d/c;)V` @kind static;
  #L14e40e.  call temp:= `toString`(v0) @signature `Ljava/io/StringWriter;.toString:()Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L14e414.  v0:= temp @kind object;
  #L14e416.  return v0 @kind object;
  #L14e418.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L14e41a.  v1:= new `java.lang.AssertionError`;
  #L14e41e.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L14e424.  throw v1;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L14e418;
}
