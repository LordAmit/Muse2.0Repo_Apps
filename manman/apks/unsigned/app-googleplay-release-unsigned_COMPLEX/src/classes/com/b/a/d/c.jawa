record `com.b.a.d.c` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface, `java.io.Flushable` @kind interface {
  `java.io.Writer` `com.b.a.d.c.c` @AccessFlag PRIVATE_FINAL;
  `int`[] `com.b.a.d.c.d` @AccessFlag PRIVATE;
  `int` `com.b.a.d.c.e` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.c.f` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.c.g` @AccessFlag PRIVATE;
  `boolean` `com.b.a.d.c.h` @AccessFlag PRIVATE;
  `boolean` `com.b.a.d.c.i` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.c.j` @AccessFlag PRIVATE;
  `boolean` `com.b.a.d.c.k` @AccessFlag PRIVATE;
}
global `java.lang.String`[] `@@com.b.a.d.c.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String`[] `@@com.b.a.d.c.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/d/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L145140.  v1:= 0I;
  #L145142.  v0:= 128I;
  #L145146.  v0:= new `java.lang.String`[v0];
  #L14514a.  `@@com.b.a.d.c.a` @type ^`java.lang.String`[] := v0 @kind object;
  #L14514e.  v0:= v1;
  #L145150.  v2:= 31I;
  #L145154.  if v0 > v2 then goto L145184;
  #L145158.  v2:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L14515c.  v3:= "\\u%04x" @kind object;
  #L145160.  v4:= 1I;
  #L145162.  v4:= new `java.lang.Object`[v4];
  #L145166.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L14516c.  v5:= temp @kind object;
  #L14516e.  v4[v1]:= v5 @kind object;
  #L145172.  call temp:= `format`(v3, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L145178.  v3:= temp @kind object;
  #L14517a.  v2[v0]:= v3 @kind object;
  #L14517e.  v0:= v0 + 1;
  #L145182.  goto L145150;
  #L145184.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L145188.  v1:= 34I;
  #L14518c.  v2:= "\\\"" @kind object;
  #L145190.  v0[v1]:= v2 @kind object;
  #L145194.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L145198.  v1:= 92I;
  #L14519c.  v2:= "\\\\" @kind object;
  #L1451a0.  v0[v1]:= v2 @kind object;
  #L1451a4.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L1451a8.  v1:= 9I;
  #L1451ac.  v2:= "\\t" @kind object;
  #L1451b0.  v0[v1]:= v2 @kind object;
  #L1451b4.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L1451b8.  v1:= 8I;
  #L1451bc.  v2:= "\\b" @kind object;
  #L1451c0.  v0[v1]:= v2 @kind object;
  #L1451c4.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L1451c8.  v1:= 10I;
  #L1451cc.  v2:= "\\n" @kind object;
  #L1451d0.  v0[v1]:= v2 @kind object;
  #L1451d4.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L1451d8.  v1:= 13I;
  #L1451dc.  v2:= "\\r" @kind object;
  #L1451e0.  v0[v1]:= v2 @kind object;
  #L1451e4.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L1451e8.  v1:= 12I;
  #L1451ec.  v2:= "\\f" @kind object;
  #L1451f0.  v0[v1]:= v2 @kind object;
  #L1451f4.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L1451f8.  call temp:= `clone`(v0) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L1451fe.  v0:= temp @kind object;
  #L145200.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L145204.  `@@com.b.a.d.c.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L145208.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L14520c.  v1:= 60I;
  #L145210.  v2:= "\\u003c" @kind object;
  #L145214.  v0[v1]:= v2 @kind object;
  #L145218.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L14521c.  v1:= 62I;
  #L145220.  v2:= "\\u003e" @kind object;
  #L145224.  v0[v1]:= v2 @kind object;
  #L145228.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L14522c.  v1:= 38I;
  #L145230.  v2:= "\\u0026" @kind object;
  #L145234.  v0[v1]:= v2 @kind object;
  #L145238.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L14523c.  v1:= 61I;
  #L145240.  v2:= "\\u003d" @kind object;
  #L145244.  v0[v1]:= v2 @kind object;
  #L145248.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L14524c.  v1:= 39I;
  #L145250.  v2:= "\\u0027" @kind object;
  #L145254.  v0[v1]:= v2 @kind object;
  #L145258.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.d.c` v2 @kind this, `java.io.Writer` v3 @kind object) @signature `Lcom/b/a/d/c;.<init>:(Ljava/io/Writer;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L14526c.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L145272.  v0:= 32I;
  #L145276.  v0:= new `int`[v0];
  #L14527a.  v2.`com.b.a.d.c.d` @type ^`int`[] := v0 @kind object;
  #L14527e.  v0:= 0I;
  #L145280.  v2.`com.b.a.d.c.e` @type ^`int` := v0;
  #L145284.  v0:= 6I;
  #L145286.  call `a`(v2, v0) @signature `Lcom/b/a/d/c;.a:(I)V` @kind direct;
  #L14528c.  v0:= ":" @kind object;
  #L145290.  v2.`com.b.a.d.c.g` @type ^`java.lang.String` := v0 @kind object;
  #L145294.  v0:= 1I;
  #L145296.  v2.`com.b.a.d.c.k` @type ^`boolean` := v0 @kind boolean;
  #L14529a.  if v3 != 0 then goto L1452ae;
  #L14529e.  v0:= new `java.lang.NullPointerException`;
  #L1452a2.  v1:= "out == null" @kind object;
  #L1452a6.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1452ac.  throw v0;
  #L1452ae.  v2.`com.b.a.d.c.c` @type ^`java.io.Writer` := v3 @kind object;
  #L1452b2.  return @kind void;
}
procedure `int` `a`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.a:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1452c4.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L1452c8.  if v0 != 0 then goto L1452dc;
  #L1452cc.  v0:= new `java.lang.IllegalStateException`;
  #L1452d0.  v1:= "JsonWriter is closed." @kind object;
  #L1452d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1452da.  throw v0;
  #L1452dc.  v0:= v2.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L1452e0.  v1:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L1452e4.  v1:= v1 + -1;
  #L1452e8.  v0:= v0[v1];
  #L1452ec.  return v0;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v3 @kind this, `int` v4 , `int` v5 , `java.lang.String` v6 @kind object) @signature `Lcom/b/a/d/c;.a:(IILjava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L145300.  call temp:= `a`(v3) @signature `Lcom/b/a/d/c;.a:()I` @kind direct;
  #L145306.  v0:= temp;
  #L145308.  if v0 == v5 then goto L145320;
  #L14530c.  if v0 == v4 then goto L145320;
  #L145310.  v0:= new `java.lang.IllegalStateException`;
  #L145314.  v1:= "Nesting problem." @kind object;
  #L145318.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14531e.  throw v0;
  #L145320.  v1:= v3.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L145324.  if v1 == 0 then goto L14535e;
  #L145328.  v0:= new `java.lang.IllegalStateException`;
  #L14532c.  v1:= new `java.lang.StringBuilder`;
  #L145330.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L145336.  v2:= "Dangling name: " @kind object;
  #L14533a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145340.  v1:= temp @kind object;
  #L145342.  v2:= v3.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L145346.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14534c.  v1:= temp @kind object;
  #L14534e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L145354.  v1:= temp @kind object;
  #L145356.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14535c.  throw v0;
  #L14535e.  v1:= v3.`com.b.a.d.c.e` @type ^`int`;
  #L145362.  v1:= v1 + -1;
  #L145366.  v3.`com.b.a.d.c.e` @type ^`int` := v1;
  #L14536a.  if v0 != v5 then goto L145374;
  #L14536e.  call `j`(v3) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L145374.  v0:= v3.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L145378.  call `write`(v0, v6) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L14537e.  return v3 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v1 @kind this, `int` v2 , `java.lang.String` v3 @kind object) @signature `Lcom/b/a/d/c;.a:(ILjava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L145390.  call `l`(v1) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L145396.  call `a`(v1, v2) @signature `Lcom/b/a/d/c;.a:(I)V` @kind direct;
  #L14539c.  v0:= v1.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L1453a0.  call `write`(v0, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L1453a6.  return v1 @kind object;
}
procedure `void` `a`(`com.b.a.d.c` v4 @kind this, `int` v5 ) @signature `Lcom/b/a/d/c;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1453b8.  v3:= 0I;
  #L1453ba.  v0:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L1453be.  v1:= v4.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L1453c2.  v1:= length @variable v1;
  #L1453c4.  if v0 != v1 then goto L1453e6;
  #L1453c8.  v0:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L1453cc.  v0:= v0 * 2;
  #L1453d0.  v0:= new `int`[v0];
  #L1453d4.  v1:= v4.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L1453d8.  v2:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L1453dc.  call `arraycopy`(v1, v3, v0, v3, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1453e2.  v4.`com.b.a.d.c.d` @type ^`int`[] := v0 @kind object;
  #L1453e6.  v0:= v4.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L1453ea.  v1:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L1453ee.  v2:= v1 + 1;
  #L1453f2.  v4.`com.b.a.d.c.e` @type ^`int` := v2;
  #L1453f6.  v0[v1]:= v5;
  #L1453fa.  return @kind void;
}
procedure `void` `b`(`com.b.a.d.c` v2 @kind this, `int` v3 ) @signature `Lcom/b/a/d/c;.b:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L14540c.  v0:= v2.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L145410.  v1:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L145414.  v1:= v1 + -1;
  #L145418.  v0[v1]:= v3;
  #L14541c.  return @kind void;
}
procedure `void` `c`(`com.b.a.d.c` v7 @kind this, `java.lang.String` v8 @kind object) @signature `Lcom/b/a/d/c;.c:(Ljava/lang/String;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L145430.  v1:= 0I;
  #L145432.  v0:= v7.`com.b.a.d.c.i` @type ^`boolean` @kind boolean;
  #L145436.  if v0 == 0 then goto L14547a;
  #L14543a.  v0:= `@@com.b.a.d.c.b` @type ^`java.lang.String`[] @kind object;
  #L14543e.  v2:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L145442.  v3:= "\"" @kind object;
  #L145446.  call `write`(v2, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L14544c.  call temp:= `length`(v8) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L145452.  v4:= temp;
  #L145454.  v3:= v1;
  #L145456.  if v3 >= v4 then goto L1454bc;
  #L14545a.  call temp:= `charAt`(v8, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L145460.  v2:= temp;
  #L145462.  v5:= 128I;
  #L145466.  if v2 >= v5 then goto L145480;
  #L14546a.  v2:= v0[v2] @kind object;
  #L14546e.  if v2 != 0 then goto L14548c;
  #L145472.  v2:= v3 + 1;
  #L145476.  v3:= v2;
  #L145478.  goto L145456;
  #L14547a.  v0:= `@@com.b.a.d.c.a` @type ^`java.lang.String`[] @kind object;
  #L14547e.  goto L14543e;
  #L145480.  v5:= 8232I;
  #L145484.  if v2 != v5 then goto L1454ae;
  #L145488.  v2:= "\\u2028" @kind object;
  #L14548c.  if v1 >= v3 then goto L14549e;
  #L145490.  v5:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L145494.  v6:= v3 - v1 @kind int;
  #L145498.  call `write`(v5, v8, v1, v6) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L14549e.  v1:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L1454a2.  call `write`(v1, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L1454a8.  v1:= v3 + 1;
  #L1454ac.  goto L145472;
  #L1454ae.  v5:= 8233I;
  #L1454b2.  if v2 != v5 then goto L145472;
  #L1454b6.  v2:= "\\u2029" @kind object;
  #L1454ba.  goto L14548c;
  #L1454bc.  if v1 >= v4 then goto L1454ce;
  #L1454c0.  v0:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L1454c4.  v2:= v4 - v1 @kind int;
  #L1454c8.  call `write`(v0, v8, v1, v2) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;II)V` @kind virtual;
  #L1454ce.  v0:= v7.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L1454d2.  v1:= "\"" @kind object;
  #L1454d6.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L1454dc.  return @kind void;
}
procedure `void` `i`(`com.b.a.d.c` v1 @kind this) @signature `Lcom/b/a/d/c;.i:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1454f0.  v0:= v1.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L1454f4.  if v0 == 0 then goto L14550e;
  #L1454f8.  call `k`(v1) @signature `Lcom/b/a/d/c;.k:()V` @kind direct;
  #L1454fe.  v0:= v1.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L145502.  call `c`(v1, v0) @signature `Lcom/b/a/d/c;.c:(Ljava/lang/String;)V` @kind direct;
  #L145508.  v0:= 0I;
  #L14550a.  v1.`com.b.a.d.c.j` @type ^`java.lang.String` := v0 @kind object;
  #L14550e.  return @kind void;
}
procedure `void` `j`(`com.b.a.d.c` v4 @kind this) @signature `Lcom/b/a/d/c;.j:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L145520.  v0:= v4.`com.b.a.d.c.f` @type ^`java.lang.String` @kind object;
  #L145524.  if v0 != 0 then goto L14552a;
  #L145528.  return @kind void;
  #L14552a.  v0:= v4.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L14552e.  v1:= "\n" @kind object;
  #L145532.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L145538.  v0:= 1I;
  #L14553a.  v1:= v4.`com.b.a.d.c.e` @type ^`int`;
  #L14553e.  if v0 >= v1 then goto L145528;
  #L145542.  v2:= v4.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L145546.  v3:= v4.`com.b.a.d.c.f` @type ^`java.lang.String` @kind object;
  #L14554a.  call `write`(v2, v3) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L145550.  v0:= v0 + 1;
  #L145554.  goto L14553e;
}
procedure `void` `k`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.k:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L145568.  call temp:= `a`(v2) @signature `Lcom/b/a/d/c;.a:()I` @kind direct;
  #L14556e.  v0:= temp;
  #L145570.  v1:= 5I;
  #L145572.  if v0 != v1 then goto L145594;
  #L145576.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L14557a.  v1:= 44I;
  #L14557e.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(I)V` @kind virtual;
  #L145584.  call `j`(v2) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L14558a.  v0:= 4I;
  #L14558c.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L145592.  return @kind void;
  #L145594.  v1:= 3I;
  #L145596.  if v0 == v1 then goto L145584;
  #L14559a.  v0:= new `java.lang.IllegalStateException`;
  #L14559e.  v1:= "Nesting problem." @kind object;
  #L1455a2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1455a8.  throw v0;
}
procedure `void` `l`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.l:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L1455bc.  call temp:= `a`(v2) @signature `Lcom/b/a/d/c;.a:()I` @kind direct;
  #L1455c2.  v0:= temp;
  #L1455c4.  goto L14563c;
  #L1455ca.  v0:= new `java.lang.IllegalStateException`;
  #L1455ce.  v1:= "Nesting problem." @kind object;
  #L1455d2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1455d8.  throw v0;
  #L1455da.  v0:= v2.`com.b.a.d.c.h` @type ^`boolean` @kind boolean;
  #L1455de.  if v0 != 0 then goto L1455f2;
  #L1455e2.  v0:= new `java.lang.IllegalStateException`;
  #L1455e6.  v1:= "JSON must have only one top-level value." @kind object;
  #L1455ea.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1455f0.  throw v0;
  #L1455f2.  v0:= 7I;
  #L1455f4.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L1455fa.  return @kind void;
  #L1455fc.  v0:= 2I;
  #L1455fe.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L145604.  call `j`(v2) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L14560a.  goto L1455fa;
  #L14560c.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L145610.  v1:= 44I;
  #L145614.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(C)Ljava/io/Writer;` @kind virtual;
  #L14561a.  call `j`(v2) @signature `Lcom/b/a/d/c;.j:()V` @kind direct;
  #L145620.  goto L1455fa;
  #L145622.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L145626.  v1:= v2.`com.b.a.d.c.g` @type ^`java.lang.String` @kind object;
  #L14562a.  call temp:= `append`(v0, v1) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L145630.  v0:= 5I;
  #L145632.  call `b`(v2, v0) @signature `Lcom/b/a/d/c;.b:(I)V` @kind direct;
  #L145638.  goto L1455fa;
  #L14563a.  
  #L14563c.  switch v0
                  | 1 => goto L1455fc
                  | 2 => goto L14560c
                  | 3 => goto L1455ca
                  | 4 => goto L145622
                  | 5 => goto L1455ca
                  | 6 => goto L1455f2
                  | 7 => goto L1455da
                  | else => goto L1455ca;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v3 @kind this, `long` v4 ) @signature `Lcom/b/a/d/c;.a:(J)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L145670.  call `i`(v3) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L145676.  call `l`(v3) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L14567c.  v0:= v3.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L145680.  call temp:= `toString`(v4) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L145686.  v1:= temp @kind object;
  #L145688.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L14568e.  return v3 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v2 @kind this, `java.lang.Boolean` v3 @kind object) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/Boolean;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1456a0.  if v3 != 0 then goto L1456ae;
  #L1456a4.  call temp:= `f`(v2) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L1456aa.  v2:= temp @kind object;
  #L1456ac.  return v2 @kind object;
  #L1456ae.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L1456b4.  call `l`(v2) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L1456ba.  v1:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L1456be.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L1456c4.  v0:= temp;
  #L1456c6.  if v0 == 0 then goto L1456d6;
  #L1456ca.  v0:= "true" @kind object;
  #L1456ce.  call `write`(v1, v0) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L1456d4.  goto L1456ac;
  #L1456d6.  v0:= "false" @kind object;
  #L1456da.  goto L1456ce;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v3 @kind this, `java.lang.Number` v4 @kind object) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/Number;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1456ec.  if v4 != 0 then goto L1456fa;
  #L1456f0.  call temp:= `f`(v3) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L1456f6.  v3:= temp @kind object;
  #L1456f8.  return v3 @kind object;
  #L1456fa.  call `i`(v3) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L145700.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L145706.  v0:= temp @kind object;
  #L145708.  v1:= v3.`com.b.a.d.c.h` @type ^`boolean` @kind boolean;
  #L14570c.  if v1 != 0 then goto L145772;
  #L145710.  v1:= "-Infinity" @kind object;
  #L145714.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L14571a.  v1:= temp;
  #L14571c.  if v1 != 0 then goto L145740;
  #L145720.  v1:= "Infinity" @kind object;
  #L145724.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L14572a.  v1:= temp;
  #L14572c.  if v1 != 0 then goto L145740;
  #L145730.  v1:= "NaN" @kind object;
  #L145734.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L14573a.  v1:= temp;
  #L14573c.  if v1 == 0 then goto L145772;
  #L145740.  v0:= new `java.lang.IllegalArgumentException`;
  #L145744.  v1:= new `java.lang.StringBuilder`;
  #L145748.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14574e.  v2:= "Numeric values must be finite, but was " @kind object;
  #L145752.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145758.  v1:= temp @kind object;
  #L14575a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145760.  v1:= temp @kind object;
  #L145762.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L145768.  v1:= temp @kind object;
  #L14576a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L145770.  throw v0;
  #L145772.  call `l`(v3) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L145778.  v1:= v3.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L14577c.  call temp:= `append`(v1, v0) @signature `Ljava/io/Writer;.append:(Ljava/lang/CharSequence;)Ljava/io/Writer;` @kind virtual;
  #L145782.  goto L1456f8;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L145794.  if v3 != 0 then goto L1457a8;
  #L145798.  v0:= new `java.lang.NullPointerException`;
  #L14579c.  v1:= "name == null" @kind object;
  #L1457a0.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1457a6.  throw v0;
  #L1457a8.  v0:= v2.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L1457ac.  if v0 == 0 then goto L1457bc;
  #L1457b0.  v0:= new `java.lang.IllegalStateException`;
  #L1457b4.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L1457ba.  throw v0;
  #L1457bc.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L1457c0.  if v0 != 0 then goto L1457d4;
  #L1457c4.  v0:= new `java.lang.IllegalStateException`;
  #L1457c8.  v1:= "JsonWriter is closed." @kind object;
  #L1457cc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1457d2.  throw v0;
  #L1457d4.  v2.`com.b.a.d.c.j` @type ^`java.lang.String` := v3 @kind object;
  #L1457d8.  return v2 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.d.c` v2 @kind this, `boolean` v3 ) @signature `Lcom/b/a/d/c;.a:(Z)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1457ec.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L1457f2.  call `l`(v2) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L1457f8.  v1:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L1457fc.  if v3 == 0 then goto L14580c;
  #L145800.  v0:= "true" @kind object;
  #L145804.  call `write`(v1, v0) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L14580a.  return v2 @kind object;
  #L14580c.  v0:= "false" @kind object;
  #L145810.  goto L145804;
}
procedure `com.b.a.d.c` `b`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.b:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L145824.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L14582a.  v0:= 1I;
  #L14582c.  v1:= "[" @kind object;
  #L145830.  call temp:= `a`(v2, v0, v1) @signature `Lcom/b/a/d/c;.a:(ILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L145836.  v0:= temp @kind object;
  #L145838.  return v0 @kind object;
}
procedure `com.b.a.d.c` `b`(`com.b.a.d.c` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/b/a/d/c;.b:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;

  #L14584c.  if v1 != 0 then goto L14585a;
  #L145850.  call temp:= `f`(v0) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L145856.  v0:= temp @kind object;
  #L145858.  return v0 @kind object;
  #L14585a.  call `i`(v0) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L145860.  call `l`(v0) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L145866.  call `c`(v0, v1) @signature `Lcom/b/a/d/c;.c:(Ljava/lang/String;)V` @kind direct;
  #L14586c.  goto L145858;
}
procedure `void` `b`(`com.b.a.d.c` v0 @kind this, `boolean` v1 ) @signature `Lcom/b/a/d/c;.b:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L145880.  v0.`com.b.a.d.c.h` @type ^`boolean` := v1 @kind boolean;
  #L145884.  return @kind void;
}
procedure `com.b.a.d.c` `c`(`com.b.a.d.c` v3 @kind this) @signature `Lcom/b/a/d/c;.c:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L145898.  v0:= 1I;
  #L14589a.  v1:= 2I;
  #L14589c.  v2:= "]" @kind object;
  #L1458a0.  call temp:= `a`(v3, v0, v1, v2) @signature `Lcom/b/a/d/c;.a:(IILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L1458a6.  v0:= temp @kind object;
  #L1458a8.  return v0 @kind object;
}
procedure `void` `close`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1458bc.  v1:= 1I;
  #L1458be.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L1458c2.  call `close`(v0) @signature `Ljava/io/Writer;.close:()V` @kind virtual;
  #L1458c8.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L1458cc.  if v0 > v1 then goto L1458e6;
  #L1458d0.  if v0 != v1 then goto L1458f6;
  #L1458d4.  v1:= v2.`com.b.a.d.c.d` @type ^`int`[] @kind object;
  #L1458d8.  v0:= v0 + -1;
  #L1458dc.  v0:= v1[v0];
  #L1458e0.  v1:= 7I;
  #L1458e2.  if v0 == v1 then goto L1458f6;
  #L1458e6.  v0:= new `java.io.IOException`;
  #L1458ea.  v1:= "Incomplete document" @kind object;
  #L1458ee.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1458f4.  throw v0;
  #L1458f6.  v0:= 0I;
  #L1458f8.  v2.`com.b.a.d.c.e` @type ^`int` := v0;
  #L1458fc.  return @kind void;
}
procedure `com.b.a.d.c` `d`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.d:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L145910.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L145916.  v0:= 3I;
  #L145918.  v1:= "{" @kind object;
  #L14591c.  call temp:= `a`(v2, v0, v1) @signature `Lcom/b/a/d/c;.a:(ILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L145922.  v0:= temp @kind object;
  #L145924.  return v0 @kind object;
}
procedure `com.b.a.d.c` `e`(`com.b.a.d.c` v3 @kind this) @signature `Lcom/b/a/d/c;.e:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L145938.  v0:= 3I;
  #L14593a.  v1:= 5I;
  #L14593c.  v2:= "}" @kind object;
  #L145940.  call temp:= `a`(v3, v0, v1, v2) @signature `Lcom/b/a/d/c;.a:(IILjava/lang/String;)Lcom/b/a/d/c;` @kind direct;
  #L145946.  v0:= temp @kind object;
  #L145948.  return v0 @kind object;
}
procedure `com.b.a.d.c` `f`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14595c.  v0:= v2.`com.b.a.d.c.j` @type ^`java.lang.String` @kind object;
  #L145960.  if v0 == 0 then goto L145972;
  #L145964.  v0:= v2.`com.b.a.d.c.k` @type ^`boolean` @kind boolean;
  #L145968.  if v0 == 0 then goto L145988;
  #L14596c.  call `i`(v2) @signature `Lcom/b/a/d/c;.i:()V` @kind direct;
  #L145972.  call `l`(v2) @signature `Lcom/b/a/d/c;.l:()V` @kind direct;
  #L145978.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L14597c.  v1:= "null" @kind object;
  #L145980.  call `write`(v0, v1) @signature `Ljava/io/Writer;.write:(Ljava/lang/String;)V` @kind virtual;
  #L145986.  return v2 @kind object;
  #L145988.  v0:= 0I;
  #L14598a.  v2.`com.b.a.d.c.j` @type ^`java.lang.String` := v0 @kind object;
  #L14598e.  goto L145986;
}
procedure `void` `flush`(`com.b.a.d.c` v2 @kind this) @signature `Lcom/b/a/d/c;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1459a0.  v0:= v2.`com.b.a.d.c.e` @type ^`int`;
  #L1459a4.  if v0 != 0 then goto L1459b8;
  #L1459a8.  v0:= new `java.lang.IllegalStateException`;
  #L1459ac.  v1:= "JsonWriter is closed." @kind object;
  #L1459b0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1459b6.  throw v0;
  #L1459b8.  v0:= v2.`com.b.a.d.c.c` @type ^`java.io.Writer` @kind object;
  #L1459bc.  call `flush`(v0) @signature `Ljava/io/Writer;.flush:()V` @kind virtual;
  #L1459c2.  return @kind void;
}
procedure `boolean` `g`(`com.b.a.d.c` v1 @kind this) @signature `Lcom/b/a/d/c;.g:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1459d4.  v0:= v1.`com.b.a.d.c.h` @type ^`boolean` @kind boolean;
  #L1459d8.  return v0;
}
procedure `boolean` `h`(`com.b.a.d.c` v1 @kind this) @signature `Lcom/b/a/d/c;.h:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L1459ec.  v0:= v1.`com.b.a.d.c.k` @type ^`boolean` @kind boolean;
  #L1459f0.  return v0;
}
