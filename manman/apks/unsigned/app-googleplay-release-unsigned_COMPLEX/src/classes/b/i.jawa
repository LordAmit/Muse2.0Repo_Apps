record `b.i` @kind class @AccessFlag PUBLIC_FINAL extends `b.r` @kind interface {
  `int` `b.i.a` @AccessFlag PRIVATE;
  `b.e` `b.i.b` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `b.i.c` @AccessFlag PRIVATE_FINAL;
  `b.j` `b.i.d` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.CRC32` `b.i.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`b.i` v3 @kind this, `b.r` v4 @kind object) @signature `Lb/i;.<init>:(Lb/r;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L11be38.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11be3e.  v0:= 0I;
  #L11be40.  v3.`b.i.a` @type ^`int` := v0;
  #L11be44.  v0:= new `java.util.zip.CRC32`;
  #L11be48.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L11be4e.  v3.`b.i.e` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L11be52.  if v4 != 0 then goto L11be66;
  #L11be56.  v0:= new `java.lang.IllegalArgumentException`;
  #L11be5a.  v1:= "source == null" @kind object;
  #L11be5e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11be64.  throw v0;
  #L11be66.  v0:= new `java.util.zip.Inflater`;
  #L11be6a.  v1:= 1I;
  #L11be6c.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L11be72.  v3.`b.i.c` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L11be76.  call temp:= `a`(v4) @signature `Lb/k;.a:(Lb/r;)Lb/e;` @kind static;
  #L11be7c.  v0:= temp @kind object;
  #L11be7e.  v3.`b.i.b` @type ^`b.e` := v0 @kind object;
  #L11be82.  v0:= new `b.j`;
  #L11be86.  v1:= v3.`b.i.b` @type ^`b.e` @kind object;
  #L11be8a.  v2:= v3.`b.i.c` @type ^`java.util.zip.Inflater` @kind object;
  #L11be8e.  call `<init>`(v0, v1, v2) @signature `Lb/j;.<init>:(Lb/e;Ljava/util/zip/Inflater;)V` @kind direct;
  #L11be94.  v3.`b.i.d` @type ^`b.j` := v0 @kind object;
  #L11be98.  return @kind void;
}
procedure `void` `a`(`b.i` v8 @kind this, `b.c` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lb/i;.a:(Lb/c;JJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11beac.  v2:= 0L;
  #L11beb0.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11beb4.  v1:= v0.`b.n.c` @type ^`int`;
  #L11beb8.  v4:= v0.`b.n.b` @type ^`int`;
  #L11bebc.  v1:= v1 - v4 @kind int;
  #L11bebe.  v4:= (`long`) v1 @kind i2l;
  #L11bec0.  v1:= lcmp(v10, v4);
  #L11bec4.  if v1 < 0 then goto L11bedc;
  #L11bec8.  v1:= v0.`b.n.c` @type ^`int`;
  #L11becc.  v4:= v0.`b.n.b` @type ^`int`;
  #L11bed0.  v1:= v1 - v4 @kind int;
  #L11bed2.  v4:= (`long`) v1 @kind i2l;
  #L11bed4.  v10:= v10 - v4 @kind long;
  #L11bed6.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11beda.  goto L11beb4;
  #L11bedc.  v1:= lcmp(v12, v2);
  #L11bee0.  if v1 <= 0 then goto L11bf1a;
  #L11bee4.  v1:= v0.`b.n.b` @type ^`int`;
  #L11bee8.  v4:= (`long`) v1 @kind i2l;
  #L11beea.  v4:= v4 + v10 @kind long;
  #L11beec.  v1:= (`int`) v4 @kind l2i;
  #L11beee.  v4:= v0.`b.n.c` @type ^`int`;
  #L11bef2.  v4:= v4 - v1 @kind int;
  #L11bef4.  v4:= (`long`) v4 @kind i2l;
  #L11bef6.  call temp:= `min`(v4, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11befc.  v4:= temp @kind wide;
  #L11befe.  v4:= (`int`) v4 @kind l2i;
  #L11bf00.  v5:= v8.`b.i.e` @type ^`java.util.zip.CRC32` @kind object;
  #L11bf04.  v6:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11bf08.  call `update`(v5, v6, v1, v4) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L11bf0e.  v4:= (`long`) v4 @kind i2l;
  #L11bf10.  v12:= v12 - v4 @kind long;
  #L11bf12.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11bf16.  v10:= v2 @kind wide;
  #L11bf18.  goto L11bedc;
  #L11bf1a.  return @kind void;
}
procedure `void` `a`(`b.i` v5 @kind this, `java.lang.String` v6 @kind object, `int` v7 , `int` v8 ) @signature `Lb/i;.a:(Ljava/lang/String;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11bf2c.  if v8 == v7 then goto L11bf70;
  #L11bf30.  v0:= new `java.io.IOException`;
  #L11bf34.  v1:= "%s: actual 0x%08x != expected 0x%08x" @kind object;
  #L11bf38.  v2:= 3I;
  #L11bf3a.  v2:= new `java.lang.Object`[v2];
  #L11bf3e.  v3:= 0I;
  #L11bf40.  v2[v3]:= v6 @kind object;
  #L11bf44.  v3:= 1I;
  #L11bf46.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11bf4c.  v4:= temp @kind object;
  #L11bf4e.  v2[v3]:= v4 @kind object;
  #L11bf52.  v3:= 2I;
  #L11bf54.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11bf5a.  v4:= temp @kind object;
  #L11bf5c.  v2[v3]:= v4 @kind object;
  #L11bf60.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11bf66.  v1:= temp @kind object;
  #L11bf68.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11bf6e.  throw v0;
  #L11bf70.  return @kind void;
}
procedure `void` `b`(`b.i` v10 @kind this) @signature `Lb/i;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11bf84.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11bf88.  v2:= 10L;
  #L11bf8c.  call `a`(v0, v2) @signature `Lb/e;.a:(J)V` @kind interface;
  #L11bf92.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11bf96.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11bf9c.  v0:= temp @kind object;
  #L11bf9e.  v2:= 3L;
  #L11bfa2.  call temp:= `b`(v0, v2) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L11bfa8.  v7:= temp;
  #L11bfaa.  v0:= v7 ^> 1;
  #L11bfae.  v0:= v0 ^& 1;
  #L11bfb2.  v1:= 1I;
  #L11bfb4.  if v0 != v1 then goto L11c0be;
  #L11bfb8.  v0:= 1I;
  #L11bfba.  v6:= v0;
  #L11bfbc.  if v6 == 0 then goto L11bfdc;
  #L11bfc0.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11bfc4.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11bfca.  v1:= temp @kind object;
  #L11bfcc.  v2:= 0L;
  #L11bfd0.  v4:= 10L;
  #L11bfd4.  v0:= v10 @kind object;
  #L11bfd6.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11bfdc.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11bfe0.  call temp:= `i`(v0) @signature `Lb/e;.i:()S` @kind interface;
  #L11bfe6.  v0:= temp;
  #L11bfe8.  v1:= "ID1ID2" @kind object;
  #L11bfec.  v2:= 8075I;
  #L11bff0.  call `a`(v10, v1, v2, v0) @signature `Lb/i;.a:(Ljava/lang/String;II)V` @kind direct;
  #L11bff6.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11bffa.  v2:= 8L;
  #L11bffe.  call `g`(v0, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L11c004.  v0:= v7 ^> 2;
  #L11c008.  v0:= v0 ^& 1;
  #L11c00c.  v1:= 1I;
  #L11c00e.  if v0 != v1 then goto L11c08a;
  #L11c012.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11c016.  v2:= 2L;
  #L11c01a.  call `a`(v0, v2) @signature `Lb/e;.a:(J)V` @kind interface;
  #L11c020.  if v6 == 0 then goto L11c040;
  #L11c024.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11c028.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11c02e.  v1:= temp @kind object;
  #L11c030.  v2:= 0L;
  #L11c034.  v4:= 2L;
  #L11c038.  v0:= v10 @kind object;
  #L11c03a.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11c040.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11c044.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11c04a.  v0:= temp @kind object;
  #L11c04c.  call temp:= `k`(v0) @signature `Lb/c;.k:()S` @kind virtual;
  #L11c052.  v8:= temp;
  #L11c054.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11c058.  v2:= (`long`) v8 @kind i2l;
  #L11c05a.  call `a`(v0, v2) @signature `Lb/e;.a:(J)V` @kind interface;
  #L11c060.  if v6 == 0 then goto L11c07e;
  #L11c064.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11c068.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11c06e.  v1:= temp @kind object;
  #L11c070.  v2:= 0L;
  #L11c074.  v4:= (`long`) v8 @kind i2l;
  #L11c076.  v0:= v10 @kind object;
  #L11c078.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11c07e.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11c082.  v2:= (`long`) v8 @kind i2l;
  #L11c084.  call `g`(v0, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L11c08a.  v0:= v7 ^> 3;
  #L11c08e.  v0:= v0 ^& 1;
  #L11c092.  v1:= 1I;
  #L11c094.  if v0 != v1 then goto L11c0f8;
  #L11c098.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11c09c.  v1:= 0I;
  #L11c09e.  call temp:= `a`(v0, v1) @signature `Lb/e;.a:(B)J` @kind interface;
  #L11c0a4.  v8:= temp @kind wide;
  #L11c0a6.  v0:= -1L;
  #L11c0aa.  v0:= lcmp(v8, v0);
  #L11c0ae.  if v0 != 0 then goto L11c0c6;
  #L11c0b2.  v0:= new `java.io.EOFException`;
  #L11c0b6.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11c0bc.  throw v0;
  #L11c0be.  v0:= 0I;
  #L11c0c0.  v6:= v0;
  #L11c0c2.  goto L11bfbc;
  #L11c0c6.  if v6 == 0 then goto L11c0e8;
  #L11c0ca.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11c0ce.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11c0d4.  v1:= temp @kind object;
  #L11c0d6.  v2:= 0L;
  #L11c0da.  v4:= 1L;
  #L11c0de.  v4:= v4 + v8 @kind long;
  #L11c0e0.  v0:= v10 @kind object;
  #L11c0e2.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11c0e8.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11c0ec.  v2:= 1L;
  #L11c0f0.  v2:= v2 + v8 @kind long;
  #L11c0f2.  call `g`(v0, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L11c0f8.  v0:= v7 ^> 4;
  #L11c0fc.  v0:= v0 ^& 1;
  #L11c100.  v1:= 1I;
  #L11c102.  if v0 != v1 then goto L11c15e;
  #L11c106.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11c10a.  v1:= 0I;
  #L11c10c.  call temp:= `a`(v0, v1) @signature `Lb/e;.a:(B)J` @kind interface;
  #L11c112.  v8:= temp @kind wide;
  #L11c114.  v0:= -1L;
  #L11c118.  v0:= lcmp(v8, v0);
  #L11c11c.  if v0 != 0 then goto L11c12c;
  #L11c120.  v0:= new `java.io.EOFException`;
  #L11c124.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11c12a.  throw v0;
  #L11c12c.  if v6 == 0 then goto L11c14e;
  #L11c130.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11c134.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11c13a.  v1:= temp @kind object;
  #L11c13c.  v2:= 0L;
  #L11c140.  v4:= 1L;
  #L11c144.  v4:= v4 + v8 @kind long;
  #L11c146.  v0:= v10 @kind object;
  #L11c148.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11c14e.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11c152.  v2:= 1L;
  #L11c156.  v2:= v2 + v8 @kind long;
  #L11c158.  call `g`(v0, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L11c15e.  if v6 == 0 then goto L11c192;
  #L11c162.  v0:= "FHCRC" @kind object;
  #L11c166.  v1:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11c16a.  call temp:= `k`(v1) @signature `Lb/e;.k:()S` @kind interface;
  #L11c170.  v1:= temp;
  #L11c172.  v2:= v10.`b.i.e` @type ^`java.util.zip.CRC32` @kind object;
  #L11c176.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L11c17c.  v2:= temp @kind wide;
  #L11c17e.  v2:= (`int`) v2 @kind l2i;
  #L11c180.  v2:= (`short`) v2 @kind i2s;
  #L11c182.  call `a`(v10, v0, v1, v2) @signature `Lb/i;.a:(Ljava/lang/String;II)V` @kind direct;
  #L11c188.  v0:= v10.`b.i.e` @type ^`java.util.zip.CRC32` @kind object;
  #L11c18c.  call `reset`(v0) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L11c192.  return @kind void;
}
procedure `void` `c`(`b.i` v4 @kind this) @signature `Lb/i;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11c1a4.  v0:= "CRC" @kind object;
  #L11c1a8.  v1:= v4.`b.i.b` @type ^`b.e` @kind object;
  #L11c1ac.  call temp:= `l`(v1) @signature `Lb/e;.l:()I` @kind interface;
  #L11c1b2.  v1:= temp;
  #L11c1b4.  v2:= v4.`b.i.e` @type ^`java.util.zip.CRC32` @kind object;
  #L11c1b8.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L11c1be.  v2:= temp @kind wide;
  #L11c1c0.  v2:= (`int`) v2 @kind l2i;
  #L11c1c2.  call `a`(v4, v0, v1, v2) @signature `Lb/i;.a:(Ljava/lang/String;II)V` @kind direct;
  #L11c1c8.  v0:= "ISIZE" @kind object;
  #L11c1cc.  v1:= v4.`b.i.b` @type ^`b.e` @kind object;
  #L11c1d0.  call temp:= `l`(v1) @signature `Lb/e;.l:()I` @kind interface;
  #L11c1d6.  v1:= temp;
  #L11c1d8.  v2:= v4.`b.i.c` @type ^`java.util.zip.Inflater` @kind object;
  #L11c1dc.  call temp:= `getBytesWritten`(v2) @signature `Ljava/util/zip/Inflater;.getBytesWritten:()J` @kind virtual;
  #L11c1e2.  v2:= temp @kind wide;
  #L11c1e4.  v2:= (`int`) v2 @kind l2i;
  #L11c1e6.  call `a`(v4, v0, v1, v2) @signature `Lb/i;.a:(Ljava/lang/String;II)V` @kind direct;
  #L11c1ec.  return @kind void;
}
procedure `long` `a`(`b.i` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `Lb/i;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11c200.  v0:= -1L;
  #L11c204.  v7:= 2I;
  #L11c206.  v3:= 1I;
  #L11c208.  v4:= 0L;
  #L11c20c.  v2:= lcmp(v10, v4);
  #L11c210.  if v2 >= 0 then goto L11c246;
  #L11c214.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c218.  v1:= new `java.lang.StringBuilder`;
  #L11c21c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c222.  v2:= "byteCount < 0: " @kind object;
  #L11c226.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c22c.  v1:= temp @kind object;
  #L11c22e.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c234.  v1:= temp @kind object;
  #L11c236.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c23c.  v1:= temp @kind object;
  #L11c23e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c244.  throw v0;
  #L11c246.  v2:= lcmp(v10, v4);
  #L11c24a.  if v2 != 0 then goto L11c250;
  #L11c24e.  return v4 @kind wide;
  #L11c250.  v2:= v8.`b.i.a` @type ^`int`;
  #L11c254.  if v2 != 0 then goto L11c262;
  #L11c258.  call `b`(v8) @signature `Lb/i;.b:()V` @kind direct;
  #L11c25e.  v8.`b.i.a` @type ^`int` := v3;
  #L11c262.  v2:= v8.`b.i.a` @type ^`int`;
  #L11c266.  if v2 != v3 then goto L11c292;
  #L11c26a.  v2:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11c26e.  v4:= v8.`b.i.d` @type ^`b.j` @kind object;
  #L11c272.  call temp:= `a`(v4, v9, v10) @signature `Lb/j;.a:(Lb/c;J)J` @kind virtual;
  #L11c278.  v4:= temp @kind wide;
  #L11c27a.  v6:= lcmp(v4, v0);
  #L11c27e.  if v6 == 0 then goto L11c28e;
  #L11c282.  v0:= v8 @kind object;
  #L11c284.  v1:= v9 @kind object;
  #L11c286.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11c28c.  goto L11c24e;
  #L11c28e.  v8.`b.i.a` @type ^`int` := v7;
  #L11c292.  v2:= v8.`b.i.a` @type ^`int`;
  #L11c296.  if v2 != v7 then goto L11c2c6;
  #L11c29a.  call `c`(v8) @signature `Lb/i;.c:()V` @kind direct;
  #L11c2a0.  v2:= 3I;
  #L11c2a2.  v8.`b.i.a` @type ^`int` := v2;
  #L11c2a6.  v2:= v8.`b.i.b` @type ^`b.e` @kind object;
  #L11c2aa.  call temp:= `e`(v2) @signature `Lb/e;.e:()Z` @kind interface;
  #L11c2b0.  v2:= temp;
  #L11c2b2.  if v2 != 0 then goto L11c2c6;
  #L11c2b6.  v0:= new `java.io.IOException`;
  #L11c2ba.  v1:= "gzip finished without exhausting source" @kind object;
  #L11c2be.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c2c4.  throw v0;
  #L11c2c6.  v4:= v0 @kind wide;
  #L11c2c8.  goto L11c24e;
}
procedure `b.s` `a`(`b.i` v1 @kind this) @signature `Lb/i;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c2dc.  v0:= v1.`b.i.b` @type ^`b.e` @kind object;
  #L11c2e0.  call temp:= `a`(v0) @signature `Lb/e;.a:()Lb/s;` @kind interface;
  #L11c2e6.  v0:= temp @kind object;
  #L11c2e8.  return v0 @kind object;
}
procedure `void` `close`(`b.i` v1 @kind this) @signature `Lb/i;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c2fc.  v0:= v1.`b.i.d` @type ^`b.j` @kind object;
  #L11c300.  call `close`(v0) @signature `Lb/j;.close:()V` @kind virtual;
  #L11c306.  return @kind void;
}
