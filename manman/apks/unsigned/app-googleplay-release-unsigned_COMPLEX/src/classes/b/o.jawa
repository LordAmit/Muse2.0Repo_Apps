record `b.o` @kind class @AccessFlag FINAL {
}
global `b.n` `@@b.o.a` @AccessFlag STATIC;
global `long` `@@b.o.b` @AccessFlag STATIC;
procedure `void` `<init>`(`b.o` v0 @kind this) @signature `Lb/o;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L11dc04.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11dc0a.  return @kind void;
}
procedure `b.n` `a`() @signature `Lb/o;.a:()Lb/n;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11dc1c.  v1:= constclass @type ^`b.o` @kind object;
  #L11dc20.  @monitorenter v1
  #Try_start0.  
  #L11dc22.  v0:= `@@b.o.a` @type ^`b.n` @kind object;
  #L11dc26.  if v0 == 0 then goto L11dc4e;
  #L11dc2a.  v0:= `@@b.o.a` @type ^`b.n` @kind object;
  #L11dc2e.  v2:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11dc32.  `@@b.o.a` @type ^`b.n` := v2 @kind object;
  #L11dc36.  v2:= 0I;
  #L11dc38.  v0.`b.n.f` @type ^`b.n` := v2 @kind object;
  #L11dc3c.  v2:= `@@b.o.b` @type ^`long` @kind wide;
  #L11dc40.  v4:= 8192L;
  #L11dc44.  v2:= v2 - v4 @kind long;
  #L11dc46.  `@@b.o.b` @type ^`long` := v2 @kind wide;
  #L11dc4a.  @monitorexit v1
  #L11dc4c.  return v0 @kind object;
  #L11dc4e.  @monitorexit v1
  #Try_end0.  
  #L11dc50.  v0:= new `b.n`;
  #L11dc54.  call `<init>`(v0) @signature `Lb/n;.<init>:()V` @kind direct;
  #L11dc5a.  goto L11dc4c;
  #L11dc5c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L11dc5e.  @monitorexit v1
  #Try_end1.  
  #L11dc60.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L11dc5c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L11dc5c;
}
procedure `void` `a`(`b.n` v8 @kind object) @signature `Lb/o;.a:(Lb/n;)V` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11dc88.  v6:= 8192L;
  #L11dc8c.  v0:= v8.`b.n.f` @type ^`b.n` @kind object;
  #L11dc90.  if v0 != 0 then goto L11dc9c;
  #L11dc94.  v0:= v8.`b.n.g` @type ^`b.n` @kind object;
  #L11dc98.  if v0 == 0 then goto L11dca8;
  #L11dc9c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11dca0.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11dca6.  throw v0;
  #L11dca8.  v0:= v8.`b.n.d` @type ^`boolean` @kind boolean;
  #L11dcac.  if v0 == 0 then goto L11dcb2;
  #L11dcb0.  return @kind void;
  #L11dcb2.  v1:= constclass @type ^`b.o` @kind object;
  #L11dcb6.  @monitorenter v1
  #Try_start0.  
  #L11dcb8.  v2:= `@@b.o.b` @type ^`long` @kind wide;
  #L11dcbc.  v2:= v2 + v6 @kind long;
  #L11dcbe.  v4:= 65536L;
  #L11dcc4.  v0:= lcmp(v2, v4);
  #L11dcc8.  if v0 <= 0 then goto L11dcd6;
  #L11dccc.  @monitorexit v1
  #L11dcce.  goto L11dcb0;
  #L11dcd0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11dcd2.  @monitorexit v1
  #Try_end0.  
  #L11dcd4.  throw v0;
  #Try_start1.  
  #L11dcd6.  v2:= `@@b.o.b` @type ^`long` @kind wide;
  #L11dcda.  v2:= v2 + v6 @kind long;
  #L11dcdc.  `@@b.o.b` @type ^`long` := v2 @kind wide;
  #L11dce0.  v0:= `@@b.o.a` @type ^`b.n` @kind object;
  #L11dce4.  v8.`b.n.f` @type ^`b.n` := v0 @kind object;
  #L11dce8.  v0:= 0I;
  #L11dcea.  v8.`b.n.c` @type ^`int` := v0;
  #L11dcee.  v8.`b.n.b` @type ^`int` := v0;
  #L11dcf2.  `@@b.o.a` @type ^`b.n` := v8 @kind object;
  #L11dcf6.  @monitorexit v1
  #Try_end1.  
  #L11dcf8.  goto L11dcb0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L11dcd0;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L11dcd0;
}
