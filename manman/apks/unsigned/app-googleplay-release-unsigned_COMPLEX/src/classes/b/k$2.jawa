record `b.k$2` @kind class @AccessFlag FINAL extends `b.r` @kind interface {
  `b.s` `b.k$2.a` @AccessFlag FINAL_SYNTHETIC;
  `java.io.InputStream` `b.k$2.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.k$2` v0 @kind this, `b.s` v1 @kind object, `java.io.InputStream` v2 @kind object) @signature `Lb/k$2;.<init>:(Lb/s;Ljava/io/InputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11c71c.  v0.`b.k$2.a` @type ^`b.s` := v1 @kind object;
  #L11c720.  v0.`b.k$2.b` @type ^`java.io.InputStream` := v2 @kind object;
  #L11c724.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11c72a.  return @kind void;
}
procedure `long` `a`(`b.k$2` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `Lb/k$2;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11c73c.  v0:= 0L;
  #L11c740.  v2:= lcmp(v8, v0);
  #L11c744.  if v2 >= 0 then goto L11c77a;
  #L11c748.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c74c.  v1:= new `java.lang.StringBuilder`;
  #L11c750.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c756.  v2:= "byteCount < 0: " @kind object;
  #L11c75a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c760.  v1:= temp @kind object;
  #L11c762.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c768.  v1:= temp @kind object;
  #L11c76a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c770.  v1:= temp @kind object;
  #L11c772.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c778.  throw v0;
  #L11c77a.  v2:= lcmp(v8, v0);
  #L11c77e.  if v2 != 0 then goto L11c784;
  #L11c782.  return v0 @kind wide;
  #Try_start0.  
  #L11c784.  v0:= v6.`b.k$2.a` @type ^`b.s` @kind object;
  #L11c788.  call `g`(v0) @signature `Lb/s;.g:()V` @kind virtual;
  #L11c78e.  v0:= 1I;
  #L11c790.  call temp:= `e`(v7, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11c796.  v0:= temp @kind object;
  #L11c798.  v1:= v0.`b.n.c` @type ^`int`;
  #L11c79c.  v1:= v1 - 8192;
  #L11c7a0.  v2:= (`long`) v1 @kind i2l;
  #L11c7a2.  call temp:= `min`(v8, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11c7a8.  v2:= temp @kind wide;
  #L11c7aa.  v1:= (`int`) v2 @kind l2i;
  #L11c7ac.  v2:= v6.`b.k$2.b` @type ^`java.io.InputStream` @kind object;
  #L11c7b0.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11c7b4.  v4:= v0.`b.n.c` @type ^`int`;
  #L11c7b8.  call temp:= `read`(v2, v3, v4, v1) @signature `Ljava/io/InputStream;.read:([BII)I` @kind virtual;
  #L11c7be.  v1:= temp;
  #L11c7c0.  v2:= -1I;
  #L11c7c2.  if v1 != v2 then goto L11c7cc;
  #L11c7c6.  v0:= -1L;
  #L11c7ca.  goto L11c782;
  #L11c7cc.  v2:= v0.`b.n.c` @type ^`int`;
  #L11c7d0.  v2:= v2 + v1 @kind int;
  #L11c7d2.  v0.`b.n.c` @type ^`int` := v2;
  #L11c7d6.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11c7da.  v4:= (`long`) v1 @kind i2l;
  #L11c7dc.  v2:= v2 + v4 @kind long;
  #L11c7de.  v7.`b.c.b` @type ^`long` := v2 @kind wide;
  #Try_end0.  
  #L11c7e2.  v0:= (`long`) v1 @kind i2l;
  #L11c7e4.  goto L11c782;
  #L11c7e6.  v0:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L11c7e8.  call temp:= `a`(v0) @signature `Lb/k;.a:(Ljava/lang/AssertionError;)Z` @kind static;
  #L11c7ee.  v1:= temp;
  #L11c7f0.  if v1 == 0 then goto L11c800;
  #L11c7f4.  v1:= new `java.io.IOException`;
  #L11c7f8.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L11c7fe.  throw v1;
  #L11c800.  throw v0;
  catch `java.lang.AssertionError` @[Try_start0..Try_end0] goto L11c7e6;
}
procedure `b.s` `a`(`b.k$2` v1 @kind this) @signature `Lb/k$2;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c824.  v0:= v1.`b.k$2.a` @type ^`b.s` @kind object;
  #L11c828.  return v0 @kind object;
}
procedure `void` `close`(`b.k$2` v1 @kind this) @signature `Lb/k$2;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c83c.  v0:= v1.`b.k$2.b` @type ^`java.io.InputStream` @kind object;
  #L11c840.  call `close`(v0) @signature `Ljava/io/InputStream;.close:()V` @kind virtual;
  #L11c846.  return @kind void;
}
procedure `java.lang.String` `toString`(`b.k$2` v2 @kind this) @signature `Lb/k$2;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11c858.  v0:= new `java.lang.StringBuilder`;
  #L11c85c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c862.  v1:= "source(" @kind object;
  #L11c866.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c86c.  v0:= temp @kind object;
  #L11c86e.  v1:= v2.`b.k$2.b` @type ^`java.io.InputStream` @kind object;
  #L11c872.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c878.  v0:= temp @kind object;
  #L11c87a.  v1:= ")" @kind object;
  #L11c87e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c884.  v0:= temp @kind object;
  #L11c886.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c88c.  v0:= temp @kind object;
  #L11c88e.  return v0 @kind object;
}
