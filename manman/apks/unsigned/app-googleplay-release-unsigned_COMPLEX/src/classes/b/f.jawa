record `b.f` @kind class @AccessFlag PUBLIC extends `java.io.Serializable` @kind interface, `java.lang.Comparable` @kind interface {
  `byte`[] `b.f.c` @AccessFlag FINAL;
  `int` `b.f.d` @AccessFlag TRANSIENT;
  `java.lang.String` `b.f.e` @AccessFlag TRANSIENT;
}
global `char`[] `@@b.f.a` @AccessFlag STATIC_FINAL;
global `b.f` `@@b.f.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L11b3a4.  v0:= 16I;
  #L11b3a8.  v0:= new `char`[v0];
  #L11b3ac.  goto L11b3cc;
  #L11b3b2.  `@@b.f.a` @type ^`char`[] := v0 @kind object;
  #L11b3b6.  v0:= 0I;
  #L11b3b8.  v0:= new `byte`[v0];
  #L11b3bc.  call temp:= `a`(v0) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #L11b3c2.  v0:= temp @kind object;
  #L11b3c4.  `@@b.f.b` @type ^`b.f` := v0 @kind object;
  #L11b3c8.  return @kind void;
  #L11b3ca.  
  #L11b3cc.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L11b3f3.  goto L11b3b2;
}
procedure `void` `<init>`(`b.f` v0 @kind this, `byte`[] v1 @kind object) @signature `Lb/f;.<init>:([B)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11b404.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11b40a.  v0.`b.f.c` @type ^`byte`[] := v1 @kind object;
  #L11b40e.  return @kind void;
}
procedure `int` `a`(`char` v3 ) @signature `Lb/f;.a:(C)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L11b420.  v0:= 48I;
  #L11b424.  if v3 < v0 then goto L11b436;
  #L11b428.  v0:= 57I;
  #L11b42c.  if v3 > v0 then goto L11b436;
  #L11b430.  v0:= v3 + -48;
  #L11b434.  return v0;
  #L11b436.  v0:= 97I;
  #L11b43a.  if v3 < v0 then goto L11b450;
  #L11b43e.  v0:= 102I;
  #L11b442.  if v3 > v0 then goto L11b450;
  #L11b446.  v0:= v3 + -97;
  #L11b44a.  v0:= v0 + 10;
  #L11b44e.  goto L11b434;
  #L11b450.  v0:= 65I;
  #L11b454.  if v3 < v0 then goto L11b46a;
  #L11b458.  v0:= 70I;
  #L11b45c.  if v3 > v0 then goto L11b46a;
  #L11b460.  v0:= v3 + -65;
  #L11b464.  v0:= v0 + 10;
  #L11b468.  goto L11b434;
  #L11b46a.  v0:= new `java.lang.IllegalArgumentException`;
  #L11b46e.  v1:= new `java.lang.StringBuilder`;
  #L11b472.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11b478.  v2:= "Unexpected hex digit: " @kind object;
  #L11b47c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b482.  v1:= temp @kind object;
  #L11b484.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b48a.  v1:= temp @kind object;
  #L11b48c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11b492.  v1:= temp @kind object;
  #L11b494.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b49a.  throw v0;
}
procedure `int` `a`(`java.lang.String` v5 @kind object, `int` v6 ) @signature `Lb/f;.a:(Ljava/lang/String;I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11b4ac.  v0:= 0I;
  #L11b4ae.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11b4b4.  v2:= temp;
  #L11b4b6.  v1:= v0;
  #L11b4b8.  if v0 >= v2 then goto L11b504;
  #L11b4bc.  if v1 != v6 then goto L11b4c2;
  #L11b4c0.  return v0;
  #L11b4c2.  call temp:= `codePointAt`(v5, v0) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L11b4c8.  v3:= temp;
  #L11b4ca.  call temp:= `isISOControl`(v3) @signature `Ljava/lang/Character;.isISOControl:(I)Z` @kind static;
  #L11b4d0.  v4:= temp;
  #L11b4d2.  if v4 == 0 then goto L11b4e6;
  #L11b4d6.  v4:= 10I;
  #L11b4da.  if v3 == v4 then goto L11b4e6;
  #L11b4de.  v4:= 13I;
  #L11b4e2.  if v3 != v4 then goto L11b4f0;
  #L11b4e6.  v4:= 65533I;
  #L11b4ec.  if v3 != v4 then goto L11b4f4;
  #L11b4f0.  v0:= -1I;
  #L11b4f2.  goto L11b4c0;
  #L11b4f4.  v1:= v1 + 1;
  #L11b4f8.  call temp:= `charCount`(v3) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L11b4fe.  v3:= temp;
  #L11b500.  v0:= v0 + v3 @kind int;
  #L11b502.  goto L11b4b8;
  #L11b504.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11b50a.  v0:= temp;
  #L11b50c.  goto L11b4c0;
}
procedure `b.f` `a`(`java.lang.String` v2 @kind object) @signature `Lb/f;.a:(Ljava/lang/String;)Lb/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11b520.  if v2 != 0 then goto L11b534;
  #L11b524.  v0:= new `java.lang.IllegalArgumentException`;
  #L11b528.  v1:= "s == null" @kind object;
  #L11b52c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b532.  throw v0;
  #L11b534.  v0:= new `b.f`;
  #L11b538.  v1:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L11b53c.  call temp:= `getBytes`(v2, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L11b542.  v1:= temp @kind object;
  #L11b544.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11b54a.  v0.`b.f.e` @type ^`java.lang.String` := v2 @kind object;
  #L11b54e.  return v0 @kind object;
}
procedure `b.f` `a`(`byte`[] v2 @kind object) @signature `Lb/f;.a:([B)Lb/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11b560.  if v2 != 0 then goto L11b574;
  #L11b564.  v0:= new `java.lang.IllegalArgumentException`;
  #L11b568.  v1:= "data == null" @kind object;
  #L11b56c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b572.  throw v0;
  #L11b574.  v1:= new `b.f`;
  #L11b578.  call temp:= `clone`(v2) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L11b57e.  v0:= temp @kind object;
  #L11b580.  v0:= (`byte`[]) v0 @kind object;
  #L11b584.  call `<init>`(v1, v0) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11b58a.  return v1 @kind object;
}
procedure `b.f` `b`(`java.lang.String` v4 @kind object) @signature `Lb/f;.b:(Ljava/lang/String;)Lb/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11b59c.  if v4 != 0 then goto L11b5b0;
  #L11b5a0.  v0:= new `java.lang.IllegalArgumentException`;
  #L11b5a4.  v1:= "hex == null" @kind object;
  #L11b5a8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b5ae.  throw v0;
  #L11b5b0.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11b5b6.  v0:= temp;
  #L11b5b8.  v0:= v0 %% 2;
  #L11b5bc.  if v0 == 0 then goto L11b5f2;
  #L11b5c0.  v0:= new `java.lang.IllegalArgumentException`;
  #L11b5c4.  v1:= new `java.lang.StringBuilder`;
  #L11b5c8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11b5ce.  v2:= "Unexpected hex string: " @kind object;
  #L11b5d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b5d8.  v1:= temp @kind object;
  #L11b5da.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b5e0.  v1:= temp @kind object;
  #L11b5e2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11b5e8.  v1:= temp @kind object;
  #L11b5ea.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b5f0.  throw v0;
  #L11b5f2.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11b5f8.  v0:= temp;
  #L11b5fa.  v0:= v0 / 2;
  #L11b5fe.  v1:= new `byte`[v0];
  #L11b602.  v0:= 0I;
  #L11b604.  v2:= length @variable v1;
  #L11b606.  if v0 >= v2 then goto L11b648;
  #L11b60a.  v2:= v0 * 2;
  #L11b60e.  call temp:= `charAt`(v4, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L11b614.  v2:= temp;
  #L11b616.  call temp:= `a`(v2) @signature `Lb/f;.a:(C)I` @kind static;
  #L11b61c.  v2:= temp;
  #L11b61e.  v2:= v2 ^< 4;
  #L11b622.  v3:= v0 * 2;
  #L11b626.  v3:= v3 + 1;
  #L11b62a.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L11b630.  v3:= temp;
  #L11b632.  call temp:= `a`(v3) @signature `Lb/f;.a:(C)I` @kind static;
  #L11b638.  v3:= temp;
  #L11b63a.  v2:= v2 + v3 @kind int;
  #L11b63c.  v2:= (`byte`) v2 @kind i2b;
  #L11b63e.  v1[v0]:= v2 @kind byte;
  #L11b642.  v0:= v0 + 1;
  #L11b646.  goto L11b604;
  #L11b648.  call temp:= `a`(v1) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #L11b64e.  v0:= temp @kind object;
  #L11b650.  return v0 @kind object;
}
procedure `b.f` `c`(`b.f` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lb/f;.c:(Ljava/lang/String;)Lb/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L11b664.  call temp:= `getInstance`(v3) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L11b66a.  v0:= temp @kind object;
  #L11b66c.  v1:= v2.`b.f.c` @type ^`byte`[] @kind object;
  #L11b670.  call temp:= `digest`(v0, v1) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L11b676.  v0:= temp @kind object;
  #L11b678.  call temp:= `a`(v0) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #Try_end0.  
  #L11b67e.  v0:= temp @kind object;
  #L11b680.  return v0 @kind object;
  #L11b682.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L11b684.  v1:= new `java.lang.AssertionError`;
  #L11b688.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11b68e.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L11b682;
}
procedure `byte` `a`(`b.f` v1 @kind this, `int` v2 ) @signature `Lb/f;.a:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b6b0.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11b6b4.  v0:= v0[v2] @kind byte;
  #L11b6b8.  return v0;
}
procedure `b.f` `a`(`b.f` v4 @kind this, `int` v5 , `int` v6 ) @signature `Lb/f;.a:(II)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11b6cc.  if v5 >= 0 then goto L11b6e0;
  #L11b6d0.  v0:= new `java.lang.IllegalArgumentException`;
  #L11b6d4.  v1:= "beginIndex < 0" @kind object;
  #L11b6d8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b6de.  throw v0;
  #L11b6e0.  v0:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11b6e4.  v0:= length @variable v0;
  #L11b6e6.  if v6 <= v0 then goto L11b72e;
  #L11b6ea.  v0:= new `java.lang.IllegalArgumentException`;
  #L11b6ee.  v1:= new `java.lang.StringBuilder`;
  #L11b6f2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11b6f8.  v2:= "endIndex > length(" @kind object;
  #L11b6fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b702.  v1:= temp @kind object;
  #L11b704.  v2:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11b708.  v2:= length @variable v2;
  #L11b70a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b710.  v1:= temp @kind object;
  #L11b712.  v2:= ")" @kind object;
  #L11b716.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b71c.  v1:= temp @kind object;
  #L11b71e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11b724.  v1:= temp @kind object;
  #L11b726.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b72c.  throw v0;
  #L11b72e.  v0:= v6 - v5 @kind int;
  #L11b732.  if v0 >= 0 then goto L11b746;
  #L11b736.  v0:= new `java.lang.IllegalArgumentException`;
  #L11b73a.  v1:= "endIndex < beginIndex" @kind object;
  #L11b73e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b744.  throw v0;
  #L11b746.  if v5 != 0 then goto L11b756;
  #L11b74a.  v1:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11b74e.  v1:= length @variable v1;
  #L11b750.  if v6 != v1 then goto L11b756;
  #L11b754.  return v4 @kind object;
  #L11b756.  v1:= new `byte`[v0];
  #L11b75a.  v2:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11b75e.  v3:= 0I;
  #L11b760.  call `arraycopy`(v2, v5, v1, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11b766.  v4:= new `b.f`;
  #L11b76a.  call `<init>`(v4, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11b770.  goto L11b754;
}
procedure `java.lang.String` `a`(`b.f` v3 @kind this) @signature `Lb/f;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11b784.  v0:= v3.`b.f.e` @type ^`java.lang.String` @kind object;
  #L11b788.  if v0 == 0 then goto L11b78e;
  #L11b78c.  return v0 @kind object;
  #L11b78e.  v0:= new `java.lang.String`;
  #L11b792.  v1:= v3.`b.f.c` @type ^`byte`[] @kind object;
  #L11b796.  v2:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L11b79a.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L11b7a0.  v3.`b.f.e` @type ^`java.lang.String` := v0 @kind object;
  #L11b7a4.  goto L11b78c;
}
procedure `void` `a`(`b.f` v3 @kind this, `b.c` v4 @kind object) @signature `Lb/f;.a:(Lb/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L11b7b8.  v0:= v3.`b.f.c` @type ^`byte`[] @kind object;
  #L11b7bc.  v1:= 0I;
  #L11b7be.  v2:= v3.`b.f.c` @type ^`byte`[] @kind object;
  #L11b7c2.  v2:= length @variable v2;
  #L11b7c4.  call temp:= `b`(v4, v0, v1, v2) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L11b7ca.  return @kind void;
}
procedure `boolean` `a`(`b.f` v1 @kind this, `int` v2 , `b.f` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lb/f;.a:(ILb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b7dc.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11b7e0.  call temp:= `a`(v3, v4, v0, v2, v5) @signature `Lb/f;.a:(I[BII)Z` @kind virtual;
  #L11b7e6.  v0:= temp;
  #L11b7e8.  return v0;
}
procedure `boolean` `a`(`b.f` v1 @kind this, `int` v2 , `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lb/f;.a:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b7fc.  if v2 < 0 then goto L11b82c;
  #L11b800.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11b804.  v0:= length @variable v0;
  #L11b806.  v0:= v0 - v5 @kind int;
  #L11b808.  if v2 > v0 then goto L11b82c;
  #L11b80c.  if v4 < 0 then goto L11b82c;
  #L11b810.  v0:= length @variable v3;
  #L11b812.  v0:= v0 - v5 @kind int;
  #L11b814.  if v4 > v0 then goto L11b82c;
  #L11b818.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11b81c.  call temp:= `a`(v0, v2, v3, v4, v5) @signature `Lb/t;.a:([BI[BII)Z` @kind static;
  #L11b822.  v0:= temp;
  #L11b824.  if v0 == 0 then goto L11b82c;
  #L11b828.  v0:= 1I;
  #L11b82a.  return v0;
  #L11b82c.  v0:= 0I;
  #L11b82e.  goto L11b82a;
}
procedure `boolean` `a`(`b.f` v2 @kind this, `b.f` v3 @kind object) @signature `Lb/f;.a:(Lb/f;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11b840.  v1:= 0I;
  #L11b842.  call temp:= `g`(v3) @signature `Lb/f;.g:()I` @kind virtual;
  #L11b848.  v0:= temp;
  #L11b84a.  call temp:= `a`(v2, v1, v3, v1, v0) @signature `Lb/f;.a:(ILb/f;II)Z` @kind virtual;
  #L11b850.  v0:= temp;
  #L11b852.  return v0;
}
procedure `int` `b`(`b.f` v9 @kind this, `b.f` v10 @kind object) @signature `Lb/f;.b:(Lb/f;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11b864.  v1:= 1I;
  #L11b866.  v2:= 0I;
  #L11b868.  v0:= -1I;
  #L11b86a.  call temp:= `g`(v9) @signature `Lb/f;.g:()I` @kind virtual;
  #L11b870.  v4:= temp;
  #L11b872.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11b878.  v5:= temp;
  #L11b87a.  call temp:= `min`(v4, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11b880.  v6:= temp;
  #L11b882.  v3:= v2;
  #L11b884.  if v3 >= v6 then goto L11b8b4;
  #L11b888.  call temp:= `a`(v9, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L11b88e.  v7:= temp;
  #L11b890.  v7:= v7 ^& 255;
  #L11b894.  call temp:= `a`(v10, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L11b89a.  v8:= temp;
  #L11b89c.  v8:= v8 ^& 255;
  #L11b8a0.  if v7 != v8 then goto L11b8aa;
  #L11b8a4.  v3:= v3 + 1;
  #L11b8a8.  goto L11b884;
  #L11b8aa.  if v7 >= v8 then goto L11b8b0;
  #L11b8ae.  return v0;
  #L11b8b0.  v0:= v1;
  #L11b8b2.  goto L11b8ae;
  #L11b8b4.  if v4 != v5 then goto L11b8bc;
  #L11b8b8.  v0:= v2;
  #L11b8ba.  goto L11b8ae;
  #L11b8bc.  if v4 < v5 then goto L11b8ae;
  #L11b8c0.  v0:= v1;
  #L11b8c2.  goto L11b8ae;
}
procedure `java.lang.String` `b`(`b.f` v1 @kind this) @signature `Lb/f;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b8d4.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11b8d8.  call temp:= `a`(v0) @signature `Lb/b;.a:([B)Ljava/lang/String;` @kind static;
  #L11b8de.  v0:= temp @kind object;
  #L11b8e0.  return v0 @kind object;
}
procedure `b.f` `c`(`b.f` v1 @kind this) @signature `Lb/f;.c:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b8f4.  v0:= "SHA-1" @kind object;
  #L11b8f8.  call temp:= `c`(v1, v0) @signature `Lb/f;.c:(Ljava/lang/String;)Lb/f;` @kind direct;
  #L11b8fe.  v0:= temp @kind object;
  #L11b900.  return v0 @kind object;
}
procedure `int` `compareTo`(`b.f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lb/f;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11b914.  v2:= (`b.f`) v2 @kind object;
  #L11b918.  call temp:= `b`(v1, v2) @signature `Lb/f;.b:(Lb/f;)I` @kind virtual;
  #L11b91e.  v0:= temp;
  #L11b920.  return v0;
}
procedure `b.f` `d`(`b.f` v1 @kind this) @signature `Lb/f;.d:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b934.  v0:= "SHA-256" @kind object;
  #L11b938.  call temp:= `c`(v1, v0) @signature `Lb/f;.c:(Ljava/lang/String;)Lb/f;` @kind direct;
  #L11b93e.  v0:= temp @kind object;
  #L11b940.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`b.f` v9 @kind this) @signature `Lb/f;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11b954.  v0:= 0I;
  #L11b956.  v1:= v9.`b.f.c` @type ^`byte`[] @kind object;
  #L11b95a.  v1:= length @variable v1;
  #L11b95c.  v1:= v1 * 2;
  #L11b960.  v2:= new `char`[v1];
  #L11b964.  v3:= v9.`b.f.c` @type ^`byte`[] @kind object;
  #L11b968.  v4:= length @variable v3;
  #L11b96a.  v1:= v0;
  #L11b96c.  if v0 >= v4 then goto L11b9a6;
  #L11b970.  v5:= v3[v0] @kind byte;
  #L11b974.  v6:= v1 + 1;
  #L11b978.  v7:= `@@b.f.a` @type ^`char`[] @kind object;
  #L11b97c.  v8:= v5 ^> 4;
  #L11b980.  v8:= v8 ^& 15;
  #L11b984.  v7:= v7[v8] @kind char;
  #L11b988.  v2[v1]:= v7 @kind char;
  #L11b98c.  v1:= v6 + 1;
  #L11b990.  v7:= `@@b.f.a` @type ^`char`[] @kind object;
  #L11b994.  v5:= v5 ^& 15;
  #L11b998.  v5:= v7[v5] @kind char;
  #L11b99c.  v2[v6]:= v5 @kind char;
  #L11b9a0.  v0:= v0 + 1;
  #L11b9a4.  goto L11b96c;
  #L11b9a6.  v0:= new `java.lang.String`;
  #L11b9aa.  call `<init>`(v0, v2) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L11b9b0.  return v0 @kind object;
}
procedure `boolean` `equals`(`b.f` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lb/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11b9c4.  v1:= 1I;
  #L11b9c6.  v2:= 0I;
  #L11b9c8.  if v5 != v4 then goto L11b9ce;
  #L11b9cc.  return v1;
  #L11b9ce.  v0:= instanceof @variable v5 @type ^`b.f` @kind boolean;
  #L11b9d2.  if v0 == 0 then goto L11ba0e;
  #L11b9d6.  v0:= v5 @kind object;
  #L11b9d8.  v0:= (`b.f`) v0 @kind object;
  #L11b9dc.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L11b9e2.  v0:= temp;
  #L11b9e4.  v3:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11b9e8.  v3:= length @variable v3;
  #L11b9ea.  if v0 != v3 then goto L11ba0e;
  #L11b9ee.  v5:= (`b.f`) v5 @kind object;
  #L11b9f2.  v0:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11b9f6.  v3:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11b9fa.  v3:= length @variable v3;
  #L11b9fc.  call temp:= `a`(v5, v2, v0, v2, v3) @signature `Lb/f;.a:(I[BII)Z` @kind virtual;
  #L11ba02.  v0:= temp;
  #L11ba04.  if v0 == 0 then goto L11ba0e;
  #L11ba08.  v0:= v1;
  #L11ba0a.  v1:= v0;
  #L11ba0c.  goto L11b9cc;
  #L11ba0e.  v0:= v2;
  #L11ba10.  goto L11ba0a;
}
procedure `b.f` `f`(`b.f` v6 @kind this) @signature `Lb/f;.f:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11ba24.  v5:= 90I;
  #L11ba28.  v4:= 65I;
  #L11ba2c.  v0:= 0I;
  #L11ba2e.  v1:= v0;
  #L11ba30.  v0:= v6.`b.f.c` @type ^`byte`[] @kind object;
  #L11ba34.  v0:= length @variable v0;
  #L11ba36.  if v1 >= v0 then goto L11baa0;
  #L11ba3a.  v0:= v6.`b.f.c` @type ^`byte`[] @kind object;
  #L11ba3e.  v3:= v0[v1] @kind byte;
  #L11ba42.  if v3 < v4 then goto L11ba4a;
  #L11ba46.  if v3 <= v5 then goto L11ba52;
  #L11ba4a.  v0:= v1 + 1;
  #L11ba4e.  v1:= v0;
  #L11ba50.  goto L11ba30;
  #L11ba52.  v0:= v6.`b.f.c` @type ^`byte`[] @kind object;
  #L11ba56.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L11ba5c.  v0:= temp @kind object;
  #L11ba5e.  v0:= (`byte`[]) v0 @kind object;
  #L11ba62.  v2:= v1 + 1;
  #L11ba66.  v3:= v3 + 32;
  #L11ba6a.  v3:= (`byte`) v3 @kind i2b;
  #L11ba6c.  v0[v1]:= v3 @kind byte;
  #L11ba70.  v1:= v2;
  #L11ba72.  v2:= length @variable v0;
  #L11ba74.  if v1 >= v2 then goto L11ba96;
  #L11ba78.  v2:= v0[v1] @kind byte;
  #L11ba7c.  if v2 < v4 then goto L11ba84;
  #L11ba80.  if v2 <= v5 then goto L11ba8a;
  #L11ba84.  v1:= v1 + 1;
  #L11ba88.  goto L11ba72;
  #L11ba8a.  v2:= v2 + 32;
  #L11ba8e.  v2:= (`byte`) v2 @kind i2b;
  #L11ba90.  v0[v1]:= v2 @kind byte;
  #L11ba94.  goto L11ba84;
  #L11ba96.  v6:= new `b.f`;
  #L11ba9a.  call `<init>`(v6, v0) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11baa0.  return v6 @kind object;
}
procedure `int` `g`(`b.f` v1 @kind this) @signature `Lb/f;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11bab4.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11bab8.  v0:= length @variable v0;
  #L11baba.  return v0;
}
procedure `byte`[] `h`(`b.f` v1 @kind this) @signature `Lb/f;.h:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11bacc.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11bad0.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L11bad6.  v0:= temp @kind object;
  #L11bad8.  v0:= (`byte`[]) v0 @kind object;
  #L11badc.  return v0 @kind object;
}
procedure `int` `hashCode`(`b.f` v1 @kind this) @signature `Lb/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11baf0.  v0:= v1.`b.f.d` @type ^`int`;
  #L11baf4.  if v0 == 0 then goto L11bafa;
  #L11baf8.  return v0;
  #L11bafa.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11bafe.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L11bb04.  v0:= temp;
  #L11bb06.  v1.`b.f.d` @type ^`int` := v0;
  #L11bb0a.  goto L11baf8;
}
procedure `java.lang.String` `toString`(`b.f` v5 @kind this) @signature `Lb/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11bb1c.  v4:= 0I;
  #L11bb1e.  v3:= 64I;
  #L11bb22.  v0:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L11bb26.  v0:= length @variable v0;
  #L11bb28.  if v0 != 0 then goto L11bb32;
  #L11bb2c.  v0:= "[size=0]" @kind object;
  #L11bb30.  return v0 @kind object;
  #L11bb32.  call temp:= `a`(v5) @signature `Lb/f;.a:()Ljava/lang/String;` @kind virtual;
  #L11bb38.  v0:= temp @kind object;
  #L11bb3a.  call temp:= `a`(v0, v3) @signature `Lb/f;.a:(Ljava/lang/String;I)I` @kind static;
  #L11bb40.  v1:= temp;
  #L11bb42.  v2:= -1I;
  #L11bb44.  if v1 != v2 then goto L11bbec;
  #L11bb48.  v0:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L11bb4c.  v0:= length @variable v0;
  #L11bb4e.  if v0 > v3 then goto L11bb8e;
  #L11bb52.  v0:= new `java.lang.StringBuilder`;
  #L11bb56.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11bb5c.  v1:= "[hex=" @kind object;
  #L11bb60.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bb66.  v0:= temp @kind object;
  #L11bb68.  call temp:= `e`(v5) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L11bb6e.  v1:= temp @kind object;
  #L11bb70.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bb76.  v0:= temp @kind object;
  #L11bb78.  v1:= "]" @kind object;
  #L11bb7c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bb82.  v0:= temp @kind object;
  #L11bb84.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11bb8a.  v0:= temp @kind object;
  #L11bb8c.  goto L11bb30;
  #L11bb8e.  v0:= new `java.lang.StringBuilder`;
  #L11bb92.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11bb98.  v1:= "[size=" @kind object;
  #L11bb9c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bba2.  v0:= temp @kind object;
  #L11bba4.  v1:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L11bba8.  v1:= length @variable v1;
  #L11bbaa.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bbb0.  v0:= temp @kind object;
  #L11bbb2.  v1:= " hex=" @kind object;
  #L11bbb6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bbbc.  v0:= temp @kind object;
  #L11bbbe.  call temp:= `a`(v5, v4, v3) @signature `Lb/f;.a:(II)Lb/f;` @kind virtual;
  #L11bbc4.  v1:= temp @kind object;
  #L11bbc6.  call temp:= `e`(v1) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L11bbcc.  v1:= temp @kind object;
  #L11bbce.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bbd4.  v0:= temp @kind object;
  #L11bbd6.  v1:= "…]" @kind object;
  #L11bbda.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bbe0.  v0:= temp @kind object;
  #L11bbe2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11bbe8.  v0:= temp @kind object;
  #L11bbea.  goto L11bb30;
  #L11bbec.  call temp:= `substring`(v0, v4, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L11bbf2.  v2:= temp @kind object;
  #L11bbf4.  v3:= "\\" @kind object;
  #L11bbf8.  v4:= "\\\\" @kind object;
  #L11bbfc.  call temp:= `replace`(v2, v3, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L11bc02.  v2:= temp @kind object;
  #L11bc04.  v3:= "\n" @kind object;
  #L11bc08.  v4:= "\\n" @kind object;
  #L11bc0c.  call temp:= `replace`(v2, v3, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L11bc12.  v2:= temp @kind object;
  #L11bc14.  v3:= "\r" @kind object;
  #L11bc18.  v4:= "\\r" @kind object;
  #L11bc1c.  call temp:= `replace`(v2, v3, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L11bc22.  v2:= temp @kind object;
  #L11bc24.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11bc2a.  v0:= temp;
  #L11bc2c.  if v1 >= v0 then goto L11bc80;
  #L11bc30.  v0:= new `java.lang.StringBuilder`;
  #L11bc34.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11bc3a.  v1:= "[size=" @kind object;
  #L11bc3e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bc44.  v0:= temp @kind object;
  #L11bc46.  v1:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L11bc4a.  v1:= length @variable v1;
  #L11bc4c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bc52.  v0:= temp @kind object;
  #L11bc54.  v1:= " text=" @kind object;
  #L11bc58.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bc5e.  v0:= temp @kind object;
  #L11bc60.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bc66.  v0:= temp @kind object;
  #L11bc68.  v1:= "…]" @kind object;
  #L11bc6c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bc72.  v0:= temp @kind object;
  #L11bc74.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11bc7a.  v0:= temp @kind object;
  #L11bc7c.  goto L11bb30;
  #L11bc80.  v0:= new `java.lang.StringBuilder`;
  #L11bc84.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11bc8a.  v1:= "[text=" @kind object;
  #L11bc8e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bc94.  v0:= temp @kind object;
  #L11bc96.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bc9c.  v0:= temp @kind object;
  #L11bc9e.  v1:= "]" @kind object;
  #L11bca2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bca8.  v0:= temp @kind object;
  #L11bcaa.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11bcb0.  v0:= temp @kind object;
  #L11bcb2.  goto L11bb30;
}
