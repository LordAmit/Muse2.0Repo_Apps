record `b.k` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.logging.Logger` `@@b.k.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L11c99c.  v0:= constclass @type ^`b.k` @kind object;
  #L11c9a0.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L11c9a6.  v0:= temp @kind object;
  #L11c9a8.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L11c9ae.  v0:= temp @kind object;
  #L11c9b0.  `@@b.k.a` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L11c9b4.  return @kind void;
}
procedure `void` `<init>`(`b.k` v0 @kind this) @signature `Lb/k;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L11c9c8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11c9ce.  return @kind void;
}
procedure `b.d` `a`(`b.q` v1 @kind object) @signature `Lb/k;.a:(Lb/q;)Lb/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L11c9e0.  v0:= new `b.l`;
  #L11c9e4.  call `<init>`(v0, v1) @signature `Lb/l;.<init>:(Lb/q;)V` @kind direct;
  #L11c9ea.  return v0 @kind object;
}
procedure `b.e` `a`(`b.r` v1 @kind object) @signature `Lb/k;.a:(Lb/r;)Lb/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L11c9fc.  v0:= new `b.m`;
  #L11ca00.  call `<init>`(v0, v1) @signature `Lb/m;.<init>:(Lb/r;)V` @kind direct;
  #L11ca06.  return v0 @kind object;
}
procedure `b.q` `a`(`java.io.OutputStream` v2 @kind object, `b.s` v3 @kind object) @signature `Lb/k;.a:(Ljava/io/OutputStream;Lb/s;)Lb/q;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L11ca18.  if v2 != 0 then goto L11ca2c;
  #L11ca1c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11ca20.  v1:= "out == null" @kind object;
  #L11ca24.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ca2a.  throw v0;
  #L11ca2c.  if v3 != 0 then goto L11ca40;
  #L11ca30.  v0:= new `java.lang.IllegalArgumentException`;
  #L11ca34.  v1:= "timeout == null" @kind object;
  #L11ca38.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ca3e.  throw v0;
  #L11ca40.  v0:= new `b.k$1`;
  #L11ca44.  call `<init>`(v0, v3, v2) @signature `Lb/k$1;.<init>:(Lb/s;Ljava/io/OutputStream;)V` @kind direct;
  #L11ca4a.  return v0 @kind object;
}
procedure `b.q` `a`(`java.net.Socket` v2 @kind object) @signature `Lb/k;.a:(Ljava/net/Socket;)Lb/q;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11ca5c.  if v2 != 0 then goto L11ca70;
  #L11ca60.  v0:= new `java.lang.IllegalArgumentException`;
  #L11ca64.  v1:= "socket == null" @kind object;
  #L11ca68.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ca6e.  throw v0;
  #L11ca70.  call temp:= `c`(v2) @signature `Lb/k;.c:(Ljava/net/Socket;)Lb/a;` @kind static;
  #L11ca76.  v0:= temp @kind object;
  #L11ca78.  call temp:= `getOutputStream`(v2) @signature `Ljava/net/Socket;.getOutputStream:()Ljava/io/OutputStream;` @kind virtual;
  #L11ca7e.  v1:= temp @kind object;
  #L11ca80.  call temp:= `a`(v1, v0) @signature `Lb/k;.a:(Ljava/io/OutputStream;Lb/s;)Lb/q;` @kind static;
  #L11ca86.  v1:= temp @kind object;
  #L11ca88.  call temp:= `a`(v0, v1) @signature `Lb/a;.a:(Lb/q;)Lb/q;` @kind virtual;
  #L11ca8e.  v0:= temp @kind object;
  #L11ca90.  return v0 @kind object;
}
procedure `b.r` `a`(`java.io.InputStream` v2 @kind object, `b.s` v3 @kind object) @signature `Lb/k;.a:(Ljava/io/InputStream;Lb/s;)Lb/r;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L11caa4.  if v2 != 0 then goto L11cab8;
  #L11caa8.  v0:= new `java.lang.IllegalArgumentException`;
  #L11caac.  v1:= "in == null" @kind object;
  #L11cab0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cab6.  throw v0;
  #L11cab8.  if v3 != 0 then goto L11cacc;
  #L11cabc.  v0:= new `java.lang.IllegalArgumentException`;
  #L11cac0.  v1:= "timeout == null" @kind object;
  #L11cac4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11caca.  throw v0;
  #L11cacc.  v0:= new `b.k$2`;
  #L11cad0.  call `<init>`(v0, v3, v2) @signature `Lb/k$2;.<init>:(Lb/s;Ljava/io/InputStream;)V` @kind direct;
  #L11cad6.  return v0 @kind object;
}
procedure `boolean` `a`(`java.lang.AssertionError` v2 @kind object) @signature `Lb/k;.a:(Ljava/lang/AssertionError;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L11cae8.  call temp:= `getCause`(v2) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L11caee.  v0:= temp @kind object;
  #L11caf0.  if v0 == 0 then goto L11cb1c;
  #L11caf4.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L11cafa.  v0:= temp @kind object;
  #L11cafc.  if v0 == 0 then goto L11cb1c;
  #L11cb00.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L11cb06.  v0:= temp @kind object;
  #L11cb08.  v1:= "getsockname failed" @kind object;
  #L11cb0c.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L11cb12.  v0:= temp;
  #L11cb14.  if v0 == 0 then goto L11cb1c;
  #L11cb18.  v0:= 1I;
  #L11cb1a.  return v0;
  #L11cb1c.  v0:= 0I;
  #L11cb1e.  goto L11cb1a;
}
procedure `b.r` `b`(`java.net.Socket` v2 @kind object) @signature `Lb/k;.b:(Ljava/net/Socket;)Lb/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11cb30.  if v2 != 0 then goto L11cb44;
  #L11cb34.  v0:= new `java.lang.IllegalArgumentException`;
  #L11cb38.  v1:= "socket == null" @kind object;
  #L11cb3c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cb42.  throw v0;
  #L11cb44.  call temp:= `c`(v2) @signature `Lb/k;.c:(Ljava/net/Socket;)Lb/a;` @kind static;
  #L11cb4a.  v0:= temp @kind object;
  #L11cb4c.  call temp:= `getInputStream`(v2) @signature `Ljava/net/Socket;.getInputStream:()Ljava/io/InputStream;` @kind virtual;
  #L11cb52.  v1:= temp @kind object;
  #L11cb54.  call temp:= `a`(v1, v0) @signature `Lb/k;.a:(Ljava/io/InputStream;Lb/s;)Lb/r;` @kind static;
  #L11cb5a.  v1:= temp @kind object;
  #L11cb5c.  call temp:= `a`(v0, v1) @signature `Lb/a;.a:(Lb/r;)Lb/r;` @kind virtual;
  #L11cb62.  v0:= temp @kind object;
  #L11cb64.  return v0 @kind object;
}
procedure `b.a` `c`(`java.net.Socket` v1 @kind object) @signature `Lb/k;.c:(Ljava/net/Socket;)Lb/a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L11cb78.  v0:= new `b.k$3`;
  #L11cb7c.  call `<init>`(v0, v1) @signature `Lb/k$3;.<init>:(Ljava/net/Socket;)V` @kind direct;
  #L11cb82.  return v0 @kind object;
}
