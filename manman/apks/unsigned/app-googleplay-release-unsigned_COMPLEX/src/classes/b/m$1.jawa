record `b.m$1` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `b.m` `b.m$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.m$1` v0 @kind this, `b.m` v1 @kind object) @signature `Lb/m$1;.<init>:(Lb/m;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11cfac.  v0.`b.m$1.a` @type ^`b.m` := v1 @kind object;
  #L11cfb0.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L11cfb6.  return @kind void;
}
procedure `int` `available`(`b.m$1` v4 @kind this) @signature `Lb/m$1;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11cfc8.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11cfcc.  v0:= v0.`b.m.c` @type ^`boolean` @kind boolean;
  #L11cfd0.  if v0 == 0 then goto L11cfe4;
  #L11cfd4.  v0:= new `java.io.IOException`;
  #L11cfd8.  v1:= "closed" @kind object;
  #L11cfdc.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cfe2.  throw v0;
  #L11cfe4.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11cfe8.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L11cfec.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11cff0.  v2:= 2147483647L;
  #L11cff6.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11cffc.  v0:= temp @kind wide;
  #L11cffe.  v0:= (`int`) v0 @kind l2i;
  #L11d000.  return v0;
}
procedure `void` `close`(`b.m$1` v1 @kind this) @signature `Lb/m$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d014.  v0:= v1.`b.m$1.a` @type ^`b.m` @kind object;
  #L11d018.  call `close`(v0) @signature `Lb/m;.close:()V` @kind virtual;
  #L11d01e.  return @kind void;
}
procedure `int` `read`(`b.m$1` v4 @kind this) @signature `Lb/m$1;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11d030.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11d034.  v0:= v0.`b.m.c` @type ^`boolean` @kind boolean;
  #L11d038.  if v0 == 0 then goto L11d04c;
  #L11d03c.  v0:= new `java.io.IOException`;
  #L11d040.  v1:= "closed" @kind object;
  #L11d044.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d04a.  throw v0;
  #L11d04c.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11d050.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L11d054.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11d058.  v2:= 0L;
  #L11d05c.  v0:= lcmp(v0, v2);
  #L11d060.  if v0 != 0 then goto L11d090;
  #L11d064.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11d068.  v0:= v0.`b.m.b` @type ^`b.r` @kind object;
  #L11d06c.  v1:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11d070.  v1:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11d074.  v2:= 8192L;
  #L11d078.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11d07e.  v0:= temp @kind wide;
  #L11d080.  v2:= -1L;
  #L11d084.  v0:= lcmp(v0, v2);
  #L11d088.  if v0 != 0 then goto L11d090;
  #L11d08c.  v0:= -1I;
  #L11d08e.  return v0;
  #L11d090.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11d094.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L11d098.  call temp:= `h`(v0) @signature `Lb/c;.h:()B` @kind virtual;
  #L11d09e.  v0:= temp;
  #L11d0a0.  v0:= v0 ^& 255;
  #L11d0a4.  goto L11d08e;
}
procedure `int` `read`(`b.m$1` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lb/m$1;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11d0b8.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L11d0bc.  v0:= v0.`b.m.c` @type ^`boolean` @kind boolean;
  #L11d0c0.  if v0 == 0 then goto L11d0d4;
  #L11d0c4.  v0:= new `java.io.IOException`;
  #L11d0c8.  v1:= "closed" @kind object;
  #L11d0cc.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d0d2.  throw v0;
  #L11d0d4.  v0:= length @variable v7;
  #L11d0d6.  v0:= (`long`) v0 @kind i2l;
  #L11d0d8.  v2:= (`long`) v8 @kind i2l;
  #L11d0da.  v4:= (`long`) v9 @kind i2l;
  #L11d0dc.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11d0e2.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L11d0e6.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L11d0ea.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11d0ee.  v2:= 0L;
  #L11d0f2.  v0:= lcmp(v0, v2);
  #L11d0f6.  if v0 != 0 then goto L11d126;
  #L11d0fa.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L11d0fe.  v0:= v0.`b.m.b` @type ^`b.r` @kind object;
  #L11d102.  v1:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L11d106.  v1:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11d10a.  v2:= 8192L;
  #L11d10e.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11d114.  v0:= temp @kind wide;
  #L11d116.  v2:= -1L;
  #L11d11a.  v0:= lcmp(v0, v2);
  #L11d11e.  if v0 != 0 then goto L11d126;
  #L11d122.  v0:= -1I;
  #L11d124.  return v0;
  #L11d126.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L11d12a.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L11d12e.  call temp:= `a`(v0, v7, v8, v9) @signature `Lb/c;.a:([BII)I` @kind virtual;
  #L11d134.  v0:= temp;
  #L11d136.  goto L11d124;
}
procedure `java.lang.String` `toString`(`b.m$1` v2 @kind this) @signature `Lb/m$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d148.  v0:= new `java.lang.StringBuilder`;
  #L11d14c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11d152.  v1:= v2.`b.m$1.a` @type ^`b.m` @kind object;
  #L11d156.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d15c.  v0:= temp @kind object;
  #L11d15e.  v1:= ".inputStream()" @kind object;
  #L11d162.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d168.  v0:= temp @kind object;
  #L11d16a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11d170.  v0:= temp @kind object;
  #L11d172.  return v0 @kind object;
}
