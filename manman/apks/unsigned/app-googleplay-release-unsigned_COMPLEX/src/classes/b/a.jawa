record `b.a` @kind class @AccessFlag PUBLIC extends `b.s` @kind class {
  `boolean` `b.a.e` @AccessFlag PRIVATE;
  `b.a` `b.a.f` @AccessFlag PRIVATE;
  `long` `b.a.g` @AccessFlag PRIVATE;
}
global `long` `@@b.a.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@b.a.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `b.a` `@@b.a.d` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lb/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07fefc.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L07ff00.  v2:= 60L;
  #L07ff04.  call temp:= `toMillis`(v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L07ff0a.  v0:= temp @kind wide;
  #L07ff0c.  `@@b.a.a` @type ^`long` := v0 @kind wide;
  #L07ff10.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L07ff14.  v2:= `@@b.a.a` @type ^`long` @kind wide;
  #L07ff18.  call temp:= `toNanos`(v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L07ff1e.  v0:= temp @kind wide;
  #L07ff20.  `@@b.a.c` @type ^`long` := v0 @kind wide;
  #L07ff24.  return @kind void;
}
procedure `void` `<init>`(`b.a` v0 @kind this) @signature `Lb/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L07ff38.  call `<init>`(v0) @signature `Lb/s;.<init>:()V` @kind direct;
  #L07ff3e.  return @kind void;
}
procedure `b.a` `a`(`b.a` v0 @kind object) @signature `Lb/a;.a:(Lb/a;)Lb/a;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L07ff50.  `@@b.a.d` @type ^`b.a` := v0 @kind object;
  #L07ff54.  return v0 @kind object;
}
procedure `void` `a`(`b.a` v9 @kind object, `long` v10 , `boolean` v12 ) @signature `Lb/a;.a:(Lb/a;JZ)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L07ff68.  v4:= 0L;
  #L07ff6c.  v1:= constclass @type ^`b.a` @kind object;
  #L07ff70.  @monitorenter v1
  #Try_start0.  
  #L07ff72.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L07ff76.  if v0 != 0 then goto L07ff98;
  #L07ff7a.  v0:= new `b.a`;
  #L07ff7e.  call `<init>`(v0) @signature `Lb/a;.<init>:()V` @kind direct;
  #L07ff84.  `@@b.a.d` @type ^`b.a` := v0 @kind object;
  #L07ff88.  v0:= new `b.a$a`;
  #L07ff8c.  call `<init>`(v0) @signature `Lb/a$a;.<init>:()V` @kind direct;
  #L07ff92.  call `start`(v0) @signature `Lb/a$a;.start:()V` @kind virtual;
  #L07ff98.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L07ff9e.  v2:= temp @kind wide;
  #L07ffa0.  v0:= lcmp(v10, v4);
  #L07ffa4.  if v0 == 0 then goto L08000e;
  #L07ffa8.  if v12 == 0 then goto L08000e;
  #L07ffac.  call temp:= `d`(v9) @signature `Lb/a;.d:()J` @kind virtual;
  #L07ffb2.  v4:= temp @kind wide;
  #L07ffb4.  v4:= v4 - v2 @kind long;
  #L07ffb6.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L07ffbc.  v4:= temp @kind wide;
  #L07ffbe.  v4:= v4 + v2 @kind long;
  #L07ffc0.  v9.`b.a.g` @type ^`long` := v4 @kind wide;
  #L07ffc4.  call temp:= `b`(v9, v2) @signature `Lb/a;.b:(J)J` @kind direct;
  #L07ffca.  v4:= temp @kind wide;
  #L07ffcc.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L07ffd0.  v6:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L07ffd4.  if v6 == 0 then goto L07ffec;
  #L07ffd8.  v6:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L07ffdc.  call temp:= `b`(v6, v2) @signature `Lb/a;.b:(J)J` @kind direct;
  #L07ffe2.  v6:= temp @kind wide;
  #L07ffe4.  v6:= lcmp(v4, v6);
  #L07ffe8.  if v6 >= 0 then goto L080044;
  #L07ffec.  v2:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L07fff0.  v9.`b.a.f` @type ^`b.a` := v2 @kind object;
  #L07fff4.  v0.`b.a.f` @type ^`b.a` := v9 @kind object;
  #L07fff8.  v2:= `@@b.a.d` @type ^`b.a` @kind object;
  #L07fffc.  if v0 != v2 then goto L08000a;
  #L080000.  v0:= constclass @type ^`b.a` @kind object;
  #L080004.  call `notify`(v0) @signature `Ljava/lang/Object;.notify:()V` @kind virtual;
  #Try_end0.  
  #L08000a.  @monitorexit v1
  #L08000c.  return @kind void;
  #L08000e.  v0:= lcmp(v10, v4);
  #L080012.  if v0 == 0 then goto L080026;
  #L080016.  v4:= v2 + v10 @kind long;
  #Try_start1.  
  #L08001a.  v9.`b.a.g` @type ^`long` := v4 @kind wide;
  #Try_end1.  
  #L08001e.  goto L07ffc4;
  #L080020.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L080022.  @monitorexit v1
  #L080024.  throw v0;
  #L080026.  if v12 == 0 then goto L080038;
  #Try_start2.  
  #L08002a.  call temp:= `d`(v9) @signature `Lb/a;.d:()J` @kind virtual;
  #L080030.  v4:= temp @kind wide;
  #L080032.  v9.`b.a.g` @type ^`long` := v4 @kind wide;
  #L080036.  goto L07ffc4;
  #L080038.  v0:= new `java.lang.AssertionError`;
  #L08003c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L080042.  throw v0;
  #L080044.  v0:= v0.`b.a.f` @type ^`b.a` @kind object;
  #Try_end2.  
  #L080048.  goto L07ffd0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L080020;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L080020;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L080020;
}
procedure `long` `b`(`b.a` v3 @kind this, `long` v4 ) @signature `Lb/a;.b:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L080078.  v0:= v3.`b.a.g` @type ^`long` @kind wide;
  #L08007c.  v0:= v0 - v4 @kind long;
  #L08007e.  return v0 @kind wide;
}
procedure `boolean` `b`(`b.a` v3 @kind object) @signature `Lb/a;.b:(Lb/a;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L080090.  v1:= constclass @type ^`b.a` @kind object;
  #L080094.  @monitorenter v1
  #Try_start0.  
  #L080096.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L08009a.  if v0 == 0 then goto L0800c0;
  #L08009e.  v2:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L0800a2.  if v2 != v3 then goto L0800ba;
  #L0800a6.  v2:= v3.`b.a.f` @type ^`b.a` @kind object;
  #L0800aa.  v0.`b.a.f` @type ^`b.a` := v2 @kind object;
  #L0800ae.  v0:= 0I;
  #L0800b0.  v3.`b.a.f` @type ^`b.a` := v0 @kind object;
  #Try_end0.  
  #L0800b4.  v0:= 0I;
  #L0800b6.  @monitorexit v1
  #L0800b8.  return v0;
  #Try_start1.  
  #L0800ba.  v0:= v0.`b.a.f` @type ^`b.a` @kind object;
  #Try_end1.  
  #L0800be.  goto L08009a;
  #L0800c0.  v0:= 1I;
  #L0800c2.  goto L0800b6;
  #L0800c4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0800c6.  @monitorexit v1
  #L0800c8.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0800c4;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0800c4;
}
procedure `b.a` `e`() @signature `Lb/a;.e:()Lb/a;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L0800f0.  v6:= 1000000L;
  #L0800f6.  v0:= 0I;
  #L0800f8.  v1:= `@@b.a.d` @type ^`b.a` @kind object;
  #L0800fc.  v1:= v1.`b.a.f` @type ^`b.a` @kind object;
  #L080100.  if v1 != 0 then goto L080144;
  #L080104.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L08010a.  v2:= temp @kind wide;
  #L08010c.  v1:= constclass @type ^`b.a` @kind object;
  #L080110.  v4:= `@@b.a.a` @type ^`long` @kind wide;
  #L080114.  call `wait`(v1, v4) @signature `Ljava/lang/Object;.wait:(J)V` @kind virtual;
  #L08011a.  v1:= `@@b.a.d` @type ^`b.a` @kind object;
  #L08011e.  v1:= v1.`b.a.f` @type ^`b.a` @kind object;
  #L080122.  if v1 != 0 then goto L080142;
  #L080126.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L08012c.  v4:= temp @kind wide;
  #L08012e.  v2:= v4 - v2 @kind long;
  #L080132.  v4:= `@@b.a.c` @type ^`long` @kind wide;
  #L080136.  v1:= lcmp(v2, v4);
  #L08013a.  if v1 < 0 then goto L080142;
  #L08013e.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L080142.  return v0 @kind object;
  #L080144.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L08014a.  v2:= temp @kind wide;
  #L08014c.  call temp:= `b`(v1, v2) @signature `Lb/a;.b:(J)J` @kind direct;
  #L080152.  v2:= temp @kind wide;
  #L080154.  v4:= 0L;
  #L080158.  v4:= lcmp(v2, v4);
  #L08015c.  if v4 <= 0 then goto L080176;
  #L080160.  v4:= v2 / v6 @kind long;
  #L080164.  v6:= v6 * v4 @kind long;
  #L080166.  v2:= v2 - v6 @kind long;
  #L080168.  v1:= constclass @type ^`b.a` @kind object;
  #L08016c.  v2:= (`int`) v2 @kind l2i;
  #L08016e.  call `wait`(v1, v4, v2) @signature `Ljava/lang/Object;.wait:(JI)V` @kind virtual;
  #L080174.  goto L080142;
  #L080176.  v2:= `@@b.a.d` @type ^`b.a` @kind object;
  #L08017a.  v3:= v1.`b.a.f` @type ^`b.a` @kind object;
  #L08017e.  v2.`b.a.f` @type ^`b.a` := v3 @kind object;
  #L080182.  v1.`b.a.f` @type ^`b.a` := v0 @kind object;
  #L080186.  v0:= v1 @kind object;
  #L080188.  goto L080142;
}
procedure `b.a` `f`() @signature `Lb/a;.f:()Lb/a;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L08019c.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L0801a0.  return v0 @kind object;
}
procedure `b.q` `a`(`b.a` v1 @kind this, `b.q` v2 @kind object) @signature `Lb/a;.a:(Lb/q;)Lb/q;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0801b4.  v0:= new `b.a$1`;
  #L0801b8.  call `<init>`(v0, v1, v2) @signature `Lb/a$1;.<init>:(Lb/a;Lb/q;)V` @kind direct;
  #L0801be.  return v0 @kind object;
}
procedure `b.r` `a`(`b.a` v1 @kind this, `b.r` v2 @kind object) @signature `Lb/a;.a:(Lb/r;)Lb/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L0801d0.  v0:= new `b.a$2`;
  #L0801d4.  call `<init>`(v0, v1, v2) @signature `Lb/a$2;.<init>:(Lb/a;Lb/r;)V` @kind direct;
  #L0801da.  return v0 @kind object;
}
procedure `java.io.IOException` `a`(`b.a` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lb/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L0801ec.  v0:= new `java.io.InterruptedIOException`;
  #L0801f0.  v1:= "timeout" @kind object;
  #L0801f4.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0801fa.  if v3 == 0 then goto L080204;
  #L0801fe.  call temp:= `initCause`(v0, v3) @signature `Ljava/io/InterruptedIOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L080204.  return v0 @kind object;
}
procedure `void` `a`(`b.a` v0 @kind this) @signature `Lb/a;.a:()V` @AccessFlag PROTECTED {
    temp;

  #L080218.  return @kind void;
}
procedure `void` `a`(`b.a` v1 @kind this, `boolean` v2 ) @signature `Lb/a;.a:(Z)V` @AccessFlag FINAL {
    temp;
    v0;

  #L08022c.  call temp:= `a_`(v1) @signature `Lb/a;.a_:()Z` @kind virtual;
  #L080232.  v0:= temp;
  #L080234.  if v0 == 0 then goto L080248;
  #L080238.  if v2 == 0 then goto L080248;
  #L08023c.  v0:= 0I;
  #L08023e.  call temp:= `a`(v1, v0) @signature `Lb/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L080244.  v0:= temp @kind object;
  #L080246.  throw v0;
  #L080248.  return @kind void;
}
procedure `boolean` `a_`(`b.a` v2 @kind this) @signature `Lb/a;.a_:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L08025c.  v0:= 0I;
  #L08025e.  v1:= v2.`b.a.e` @type ^`boolean` @kind boolean;
  #L080262.  if v1 != 0 then goto L080268;
  #L080266.  return v0;
  #L080268.  v2.`b.a.e` @type ^`boolean` := v0 @kind boolean;
  #L08026c.  call temp:= `b`(v2) @signature `Lb/a;.b:(Lb/a;)Z` @kind static;
  #L080272.  v0:= temp;
  #L080274.  goto L080266;
}
procedure `java.io.IOException` `b`(`b.a` v1 @kind this, `java.io.IOException` v2 @kind object) @signature `Lb/a;.b:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag FINAL {
    temp;
    v0;

  #L080288.  call temp:= `a_`(v1) @signature `Lb/a;.a_:()Z` @kind virtual;
  #L08028e.  v0:= temp;
  #L080290.  if v0 != 0 then goto L080296;
  #L080294.  return v2 @kind object;
  #L080296.  call temp:= `a`(v1, v2) @signature `Lb/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L08029c.  v2:= temp @kind object;
  #L08029e.  goto L080294;
}
procedure `void` `c`(`b.a` v6 @kind this) @signature `Lb/a;.c:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0802b0.  v0:= v6.`b.a.e` @type ^`boolean` @kind boolean;
  #L0802b4.  if v0 == 0 then goto L0802c8;
  #L0802b8.  v0:= new `java.lang.IllegalStateException`;
  #L0802bc.  v1:= "Unbalanced enter/exit" @kind object;
  #L0802c0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0802c6.  throw v0;
  #L0802c8.  call temp:= `b_`(v6) @signature `Lb/a;.b_:()J` @kind virtual;
  #L0802ce.  v0:= temp @kind wide;
  #L0802d0.  call temp:= `c_`(v6) @signature `Lb/a;.c_:()Z` @kind virtual;
  #L0802d6.  v2:= temp;
  #L0802d8.  v4:= 0L;
  #L0802dc.  v3:= lcmp(v0, v4);
  #L0802e0.  if v3 != 0 then goto L0802ea;
  #L0802e4.  if v2 != 0 then goto L0802ea;
  #L0802e8.  return @kind void;
  #L0802ea.  v3:= 1I;
  #L0802ec.  v6.`b.a.e` @type ^`boolean` := v3 @kind boolean;
  #L0802f0.  call `a`(v6, v0, v2) @signature `Lb/a;.a:(Lb/a;JZ)V` @kind static;
  #L0802f6.  goto L0802e8;
}
