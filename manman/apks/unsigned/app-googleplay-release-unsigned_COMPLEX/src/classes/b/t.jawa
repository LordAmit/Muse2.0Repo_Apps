record `b.t` @kind class @AccessFlag FINAL {
}
global `java.nio.charset.Charset` `@@b.t.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/t;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L11e364.  v0:= "UTF-8" @kind object;
  #L11e368.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L11e36e.  v0:= temp @kind object;
  #L11e370.  `@@b.t.a` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L11e374.  return @kind void;
}
procedure `int` `a`(`int` v2 ) @signature `Lb/t;.a:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11e388.  v0:= -16777216I;
  #L11e38c.  v0:= v0 ^& v2 @kind int;
  #L11e38e.  v0:= v0 ^>> 24;
  #L11e392.  v1:= 16711680I;
  #L11e396.  v1:= v1 ^& v2 @kind int;
  #L11e398.  v1:= v1 ^>> 8;
  #L11e39c.  v0:= v0 ^| v1 @kind int;
  #L11e39e.  v1:= 65280I;
  #L11e3a4.  v1:= v1 ^& v2 @kind int;
  #L11e3a6.  v1:= v1 ^< 8;
  #L11e3aa.  v0:= v0 ^| v1 @kind int;
  #L11e3ac.  v1:= v2 ^& 255;
  #L11e3b0.  v1:= v1 ^< 24;
  #L11e3b4.  v0:= v0 ^| v1 @kind int;
  #L11e3b6.  return v0;
}
procedure `short` `a`(`short` v2 ) @signature `Lb/t;.a:(S)S` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11e3c8.  v0:= 65535I;
  #L11e3ce.  v0:= v0 ^& v2 @kind int;
  #L11e3d0.  v1:= 65280I;
  #L11e3d6.  v1:= v1 ^& v0 @kind int;
  #L11e3d8.  v1:= v1 ^>> 8;
  #L11e3dc.  v0:= v0 ^& 255;
  #L11e3e0.  v0:= v0 ^< 8;
  #L11e3e4.  v0:= v0 ^| v1 @kind int;
  #L11e3e6.  v0:= (`short`) v0 @kind i2s;
  #L11e3e8.  return v0;
}
procedure `void` `a`(`long` v6 , `long` v8 , `long` v10 ) @signature `Lb/t;.a:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11e3fc.  v0:= v8 ^| v10 @kind long;
  #L11e400.  v2:= 0L;
  #L11e404.  v0:= lcmp(v0, v2);
  #L11e408.  if v0 < 0 then goto L11e420;
  #L11e40c.  v0:= lcmp(v8, v6);
  #L11e410.  if v0 > 0 then goto L11e420;
  #L11e414.  v0:= v6 - v8 @kind long;
  #L11e418.  v0:= lcmp(v0, v10);
  #L11e41c.  if v0 >= 0 then goto L11e468;
  #L11e420.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L11e424.  v1:= "size=%s offset=%s byteCount=%s" @kind object;
  #L11e428.  v2:= 3I;
  #L11e42a.  v2:= new `java.lang.Object`[v2];
  #L11e42e.  v3:= 0I;
  #L11e430.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L11e436.  v4:= temp @kind object;
  #L11e438.  v2[v3]:= v4 @kind object;
  #L11e43c.  v3:= 1I;
  #L11e43e.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L11e444.  v4:= temp @kind object;
  #L11e446.  v2[v3]:= v4 @kind object;
  #L11e44a.  v3:= 2I;
  #L11e44c.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L11e452.  v4:= temp @kind object;
  #L11e454.  v2[v3]:= v4 @kind object;
  #L11e458.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11e45e.  v1:= temp @kind object;
  #L11e460.  call `<init>`(v0, v1) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11e466.  throw v0;
  #L11e468.  return @kind void;
}
procedure `void` `a`(`java.lang.Throwable` v0 @kind object) @signature `Lb/t;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L11e47c.  call `b`(v0) @signature `Lb/t;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L11e482.  return @kind void;
}
procedure `boolean` `a`(`byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lb/t;.a:([BI[BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11e494.  v0:= 0I;
  #L11e496.  v1:= v0;
  #L11e498.  if v1 >= v8 then goto L11e4b8;
  #L11e49c.  v2:= v1 + v5 @kind int;
  #L11e4a0.  v2:= v4[v2] @kind byte;
  #L11e4a4.  v3:= v1 + v7 @kind int;
  #L11e4a8.  v3:= v6[v3] @kind byte;
  #L11e4ac.  if v2 == v3 then goto L11e4b2;
  #L11e4b0.  return v0;
  #L11e4b2.  v1:= v1 + 1;
  #L11e4b6.  goto L11e498;
  #L11e4b8.  v0:= 1I;
  #L11e4ba.  goto L11e4b0;
}
procedure `void` `b`(`java.lang.Throwable` v0 @kind object) @signature `Lb/t;.b:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L11e4cc.  throw v0;
}
