record `b.p` @kind class @AccessFlag FINAL extends `b.f` @kind class {
  `byte`[][] `b.p.f` @AccessFlag FINAL_TRANSIENT;
  `int`[] `b.p.g` @AccessFlag FINAL_TRANSIENT;
}
procedure `void` `<init>`(`b.p` v7 @kind this, `b.c` v8 @kind object, `int` v9 ) @signature `Lb/p;.<init>:(Lb/c;I)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11dd20.  v6:= 0I;
  #L11dd22.  v0:= 0I;
  #L11dd24.  call `<init>`(v7, v0) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11dd2a.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L11dd2e.  v2:= 0L;
  #L11dd32.  v4:= (`long`) v9 @kind i2l;
  #L11dd34.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11dd3a.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11dd3e.  v1:= v6;
  #L11dd40.  v2:= v6;
  #L11dd42.  if v2 >= v9 then goto L11dd78;
  #L11dd46.  v3:= v0.`b.n.c` @type ^`int`;
  #L11dd4a.  v4:= v0.`b.n.b` @type ^`int`;
  #L11dd4e.  if v3 != v4 then goto L11dd62;
  #L11dd52.  v0:= new `java.lang.AssertionError`;
  #L11dd56.  v1:= "s.limit == s.pos" @kind object;
  #L11dd5a.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11dd60.  throw v0;
  #L11dd62.  v3:= v0.`b.n.c` @type ^`int`;
  #L11dd66.  v4:= v0.`b.n.b` @type ^`int`;
  #L11dd6a.  v3:= v3 - v4 @kind int;
  #L11dd6c.  v2:= v2 + v3 @kind int;
  #L11dd6e.  v1:= v1 + 1;
  #L11dd72.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11dd76.  goto L11dd42;
  #L11dd78.  v0:= new `byte`[][v1];
  #L11dd7c.  v7.`b.p.f` @type ^`byte`[][] := v0 @kind object;
  #L11dd80.  v0:= v1 * 2;
  #L11dd84.  v0:= new `int`[v0];
  #L11dd88.  v7.`b.p.g` @type ^`int`[] := v0 @kind object;
  #L11dd8c.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11dd90.  v1:= v0 @kind object;
  #L11dd92.  v2:= v6;
  #L11dd94.  if v6 >= v9 then goto L11dde4;
  #L11dd98.  v0:= v7.`b.p.f` @type ^`byte`[][] @kind object;
  #L11dd9c.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11dda0.  v0[v2]:= v3 @kind object;
  #L11dda4.  v0:= v1.`b.n.c` @type ^`int`;
  #L11dda8.  v3:= v1.`b.n.b` @type ^`int`;
  #L11ddac.  v0:= v0 - v3 @kind int;
  #L11ddae.  v0:= v0 + v6 @kind int;
  #L11ddb0.  if v0 <= v9 then goto L11ddb6;
  #L11ddb4.  v0:= v9;
  #L11ddb6.  v3:= v7.`b.p.g` @type ^`int`[] @kind object;
  #L11ddba.  v3[v2]:= v0;
  #L11ddbe.  v3:= v7.`b.p.g` @type ^`int`[] @kind object;
  #L11ddc2.  v4:= v7.`b.p.f` @type ^`byte`[][] @kind object;
  #L11ddc6.  v4:= length @variable v4;
  #L11ddc8.  v4:= v4 + v2 @kind int;
  #L11ddca.  v5:= v1.`b.n.b` @type ^`int`;
  #L11ddce.  v3[v4]:= v5;
  #L11ddd2.  v3:= 1I;
  #L11ddd4.  v1.`b.n.d` @type ^`boolean` := v3 @kind boolean;
  #L11ddd8.  v2:= v2 + 1;
  #L11dddc.  v1:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L11dde0.  v6:= v0;
  #L11dde2.  goto L11dd94;
  #L11dde4.  return @kind void;
}
procedure `int` `b`(`b.p` v4 @kind this, `int` v5 ) @signature `Lb/p;.b:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11ddf8.  v0:= v4.`b.p.g` @type ^`int`[] @kind object;
  #L11ddfc.  v1:= 0I;
  #L11ddfe.  v2:= v4.`b.p.f` @type ^`byte`[][] @kind object;
  #L11de02.  v2:= length @variable v2;
  #L11de04.  v3:= v5 + 1;
  #L11de08.  call temp:= `binarySearch`(v0, v1, v2, v3) @signature `Ljava/util/Arrays;.binarySearch:([IIII)I` @kind static;
  #L11de0e.  v0:= temp;
  #L11de10.  if v0 < 0 then goto L11de16;
  #L11de14.  return v0;
  #L11de16.  v0:= v0 ^~ -1;
  #L11de1a.  goto L11de14;
}
procedure `b.f` `i`(`b.p` v2 @kind this) @signature `Lb/p;.i:()Lb/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L11de2c.  v0:= new `b.f`;
  #L11de30.  call temp:= `h`(v2) @signature `Lb/p;.h:()[B` @kind virtual;
  #L11de36.  v1:= temp @kind object;
  #L11de38.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11de3e.  return v0 @kind object;
}
procedure `byte` `a`(`b.p` v6 @kind this, `int` v7 ) @signature `Lb/p;.a:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11de50.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11de54.  v1:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11de58.  v1:= length @variable v1;
  #L11de5a.  v1:= v1 + -1;
  #L11de5e.  v0:= v0[v1];
  #L11de62.  v0:= (`long`) v0 @kind i2l;
  #L11de64.  v2:= (`long`) v7 @kind i2l;
  #L11de66.  v4:= 1L;
  #L11de6a.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11de70.  call temp:= `b`(v6, v7) @signature `Lb/p;.b:(I)I` @kind direct;
  #L11de76.  v1:= temp;
  #L11de78.  if v1 != 0 then goto L11dea2;
  #L11de7c.  v0:= 0I;
  #L11de7e.  v2:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11de82.  v3:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11de86.  v3:= length @variable v3;
  #L11de88.  v3:= v3 + v1 @kind int;
  #L11de8a.  v2:= v2[v3];
  #L11de8e.  v3:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11de92.  v1:= v3[v1] @kind object;
  #L11de96.  v0:= v7 - v0 @kind int;
  #L11de9a.  v0:= v0 + v2 @kind int;
  #L11de9c.  v0:= v1[v0] @kind byte;
  #L11dea0.  return v0;
  #L11dea2.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11dea6.  v2:= v1 + -1;
  #L11deaa.  v0:= v0[v2];
  #L11deae.  goto L11de7e;
}
procedure `b.f` `a`(`b.p` v1 @kind this, `int` v2 , `int` v3 ) @signature `Lb/p;.a:(II)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11dec0.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11dec6.  v0:= temp @kind object;
  #L11dec8.  call temp:= `a`(v0, v2, v3) @signature `Lb/f;.a:(II)Lb/f;` @kind virtual;
  #L11dece.  v0:= temp @kind object;
  #L11ded0.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`b.p` v1 @kind this) @signature `Lb/p;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11dee4.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11deea.  v0:= temp @kind object;
  #L11deec.  call temp:= `a`(v0) @signature `Lb/f;.a:()Ljava/lang/String;` @kind virtual;
  #L11def2.  v0:= temp @kind object;
  #L11def4.  return v0 @kind object;
}
procedure `void` `a`(`b.p` v8 @kind this, `b.c` v9 @kind object) @signature `Lb/p;.a:(Lb/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11df08.  v0:= 0I;
  #L11df0a.  v1:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L11df0e.  v3:= length @variable v1;
  #L11df10.  v1:= v0;
  #L11df12.  if v0 >= v3 then goto L11df70;
  #L11df16.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L11df1a.  v4:= v3 + v0 @kind int;
  #L11df1e.  v4:= v2[v4];
  #L11df22.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L11df26.  v2:= v2[v0];
  #L11df2a.  v5:= new `b.n`;
  #L11df2e.  v6:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L11df32.  v6:= v6[v0] @kind object;
  #L11df36.  v7:= v4 + v2 @kind int;
  #L11df3a.  v1:= v7 - v1 @kind int;
  #L11df3e.  call `<init>`(v5, v6, v4, v1) @signature `Lb/n;.<init>:([BII)V` @kind direct;
  #L11df44.  v1:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11df48.  if v1 != 0 then goto L11df60;
  #L11df4c.  v5.`b.n.g` @type ^`b.n` := v5 @kind object;
  #L11df50.  v5.`b.n.f` @type ^`b.n` := v5 @kind object;
  #L11df54.  v9.`b.c.a` @type ^`b.n` := v5 @kind object;
  #L11df58.  v0:= v0 + 1;
  #L11df5c.  v1:= v2;
  #L11df5e.  goto L11df12;
  #L11df60.  v1:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11df64.  v1:= v1.`b.n.g` @type ^`b.n` @kind object;
  #L11df68.  call temp:= `a`(v1, v5) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11df6e.  goto L11df58;
  #L11df70.  v2:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11df74.  v0:= (`long`) v1 @kind i2l;
  #L11df76.  v0:= v0 + v2 @kind long;
  #L11df78.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11df7c.  return @kind void;
}
procedure `boolean` `a`(`b.p` v6 @kind this, `int` v7 , `b.f` v8 @kind object, `int` v9 , `int` v10 ) @signature `Lb/p;.a:(ILb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11df90.  v1:= 0I;
  #L11df92.  if v7 < 0 then goto L11dfa4;
  #L11df96.  call temp:= `g`(v6) @signature `Lb/p;.g:()I` @kind virtual;
  #L11df9c.  v0:= temp;
  #L11df9e.  v0:= v0 - v10 @kind int;
  #L11dfa0.  if v7 <= v0 then goto L11dfa6;
  #L11dfa4.  return v1;
  #L11dfa6.  call temp:= `b`(v6, v7) @signature `Lb/p;.b:(I)I` @kind direct;
  #L11dfac.  v0:= temp;
  #L11dfae.  v2:= v0;
  #L11dfb0.  if v10 <= 0 then goto L11e016;
  #L11dfb4.  if v2 != 0 then goto L11e008;
  #L11dfb8.  v0:= v1;
  #L11dfba.  v3:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11dfbe.  v3:= v3[v2];
  #L11dfc2.  v3:= v3 - v0 @kind int;
  #L11dfc4.  v3:= v3 + v0 @kind int;
  #L11dfc6.  v3:= v3 - v7 @kind int;
  #L11dfc8.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11dfce.  v3:= temp;
  #L11dfd0.  v4:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11dfd4.  v5:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11dfd8.  v5:= length @variable v5;
  #L11dfda.  v5:= v5 + v2 @kind int;
  #L11dfdc.  v4:= v4[v5];
  #L11dfe0.  v0:= v7 - v0 @kind int;
  #L11dfe4.  v0:= v0 + v4 @kind int;
  #L11dfe6.  v4:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11dfea.  v4:= v4[v2] @kind object;
  #L11dfee.  call temp:= `a`(v8, v9, v4, v0, v3) @signature `Lb/f;.a:(I[BII)Z` @kind virtual;
  #L11dff4.  v0:= temp;
  #L11dff6.  if v0 == 0 then goto L11dfa4;
  #L11dffa.  v7:= v7 + v3 @kind int;
  #L11dffc.  v9:= v9 + v3 @kind int;
  #L11dffe.  v10:= v10 - v3 @kind int;
  #L11e000.  v0:= v2 + 1;
  #L11e004.  v2:= v0;
  #L11e006.  goto L11dfb0;
  #L11e008.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11e00c.  v3:= v2 + -1;
  #L11e010.  v0:= v0[v3];
  #L11e014.  goto L11dfba;
  #L11e016.  v1:= 1I;
  #L11e018.  goto L11dfa4;
}
procedure `boolean` `a`(`b.p` v6 @kind this, `int` v7 , `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lb/p;.a:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11e02c.  v1:= 0I;
  #L11e02e.  if v7 < 0 then goto L11e04c;
  #L11e032.  call temp:= `g`(v6) @signature `Lb/p;.g:()I` @kind virtual;
  #L11e038.  v0:= temp;
  #L11e03a.  v0:= v0 - v10 @kind int;
  #L11e03c.  if v7 > v0 then goto L11e04c;
  #L11e040.  if v9 < 0 then goto L11e04c;
  #L11e044.  v0:= length @variable v8;
  #L11e046.  v0:= v0 - v10 @kind int;
  #L11e048.  if v9 <= v0 then goto L11e04e;
  #L11e04c.  return v1;
  #L11e04e.  call temp:= `b`(v6, v7) @signature `Lb/p;.b:(I)I` @kind direct;
  #L11e054.  v0:= temp;
  #L11e056.  v2:= v0;
  #L11e058.  if v10 <= 0 then goto L11e0be;
  #L11e05c.  if v2 != 0 then goto L11e0b0;
  #L11e060.  v0:= v1;
  #L11e062.  v3:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11e066.  v3:= v3[v2];
  #L11e06a.  v3:= v3 - v0 @kind int;
  #L11e06c.  v3:= v3 + v0 @kind int;
  #L11e06e.  v3:= v3 - v7 @kind int;
  #L11e070.  call temp:= `min`(v10, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11e076.  v3:= temp;
  #L11e078.  v4:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11e07c.  v5:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11e080.  v5:= length @variable v5;
  #L11e082.  v5:= v5 + v2 @kind int;
  #L11e084.  v4:= v4[v5];
  #L11e088.  v0:= v7 - v0 @kind int;
  #L11e08c.  v0:= v0 + v4 @kind int;
  #L11e08e.  v4:= v6.`b.p.f` @type ^`byte`[][] @kind object;
  #L11e092.  v4:= v4[v2] @kind object;
  #L11e096.  call temp:= `a`(v4, v0, v8, v9, v3) @signature `Lb/t;.a:([BI[BII)Z` @kind static;
  #L11e09c.  v0:= temp;
  #L11e09e.  if v0 == 0 then goto L11e04c;
  #L11e0a2.  v7:= v7 + v3 @kind int;
  #L11e0a4.  v9:= v9 + v3 @kind int;
  #L11e0a6.  v10:= v10 - v3 @kind int;
  #L11e0a8.  v0:= v2 + 1;
  #L11e0ac.  v2:= v0;
  #L11e0ae.  goto L11e058;
  #L11e0b0.  v0:= v6.`b.p.g` @type ^`int`[] @kind object;
  #L11e0b4.  v3:= v2 + -1;
  #L11e0b8.  v0:= v0[v3];
  #L11e0bc.  goto L11e062;
  #L11e0be.  v1:= 1I;
  #L11e0c0.  goto L11e04c;
}
procedure `java.lang.String` `b`(`b.p` v1 @kind this) @signature `Lb/p;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11e0d4.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11e0da.  v0:= temp @kind object;
  #L11e0dc.  call temp:= `b`(v0) @signature `Lb/f;.b:()Ljava/lang/String;` @kind virtual;
  #L11e0e2.  v0:= temp @kind object;
  #L11e0e4.  return v0 @kind object;
}
procedure `b.f` `c`(`b.p` v1 @kind this) @signature `Lb/p;.c:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11e0f8.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11e0fe.  v0:= temp @kind object;
  #L11e100.  call temp:= `c`(v0) @signature `Lb/f;.c:()Lb/f;` @kind virtual;
  #L11e106.  v0:= temp @kind object;
  #L11e108.  return v0 @kind object;
}
procedure `b.f` `d`(`b.p` v1 @kind this) @signature `Lb/p;.d:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11e11c.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11e122.  v0:= temp @kind object;
  #L11e124.  call temp:= `d`(v0) @signature `Lb/f;.d:()Lb/f;` @kind virtual;
  #L11e12a.  v0:= temp @kind object;
  #L11e12c.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`b.p` v1 @kind this) @signature `Lb/p;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11e140.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11e146.  v0:= temp @kind object;
  #L11e148.  call temp:= `e`(v0) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L11e14e.  v0:= temp @kind object;
  #L11e150.  return v0 @kind object;
}
procedure `boolean` `equals`(`b.p` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lb/p;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11e164.  v1:= 1I;
  #L11e166.  v2:= 0I;
  #L11e168.  if v5 != v4 then goto L11e16e;
  #L11e16c.  return v1;
  #L11e16e.  v0:= instanceof @variable v5 @type ^`b.f` @kind boolean;
  #L11e172.  if v0 == 0 then goto L11e1ae;
  #L11e176.  v0:= v5 @kind object;
  #L11e178.  v0:= (`b.f`) v0 @kind object;
  #L11e17c.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L11e182.  v0:= temp;
  #L11e184.  call temp:= `g`(v4) @signature `Lb/p;.g:()I` @kind virtual;
  #L11e18a.  v3:= temp;
  #L11e18c.  if v0 != v3 then goto L11e1ae;
  #L11e190.  v5:= (`b.f`) v5 @kind object;
  #L11e194.  call temp:= `g`(v4) @signature `Lb/p;.g:()I` @kind virtual;
  #L11e19a.  v0:= temp;
  #L11e19c.  call temp:= `a`(v4, v2, v5, v2, v0) @signature `Lb/p;.a:(ILb/f;II)Z` @kind virtual;
  #L11e1a2.  v0:= temp;
  #L11e1a4.  if v0 == 0 then goto L11e1ae;
  #L11e1a8.  v0:= v1;
  #L11e1aa.  v1:= v0;
  #L11e1ac.  goto L11e16c;
  #L11e1ae.  v0:= v2;
  #L11e1b0.  goto L11e1aa;
}
procedure `b.f` `f`(`b.p` v1 @kind this) @signature `Lb/p;.f:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11e1c4.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11e1ca.  v0:= temp @kind object;
  #L11e1cc.  call temp:= `f`(v0) @signature `Lb/f;.f:()Lb/f;` @kind virtual;
  #L11e1d2.  v0:= temp @kind object;
  #L11e1d4.  return v0 @kind object;
}
procedure `int` `g`(`b.p` v2 @kind this) @signature `Lb/p;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11e1e8.  v0:= v2.`b.p.g` @type ^`int`[] @kind object;
  #L11e1ec.  v1:= v2.`b.p.f` @type ^`byte`[][] @kind object;
  #L11e1f0.  v1:= length @variable v1;
  #L11e1f2.  v1:= v1 + -1;
  #L11e1f6.  v0:= v0[v1];
  #L11e1fa.  return v0;
}
procedure `byte`[] `h`(`b.p` v8 @kind this) @signature `Lb/p;.h:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11e20c.  v0:= 0I;
  #L11e20e.  v1:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L11e212.  v2:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L11e216.  v2:= length @variable v2;
  #L11e218.  v2:= v2 + -1;
  #L11e21c.  v1:= v1[v2];
  #L11e220.  v3:= new `byte`[v1];
  #L11e224.  v1:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L11e228.  v4:= length @variable v1;
  #L11e22a.  v1:= v0;
  #L11e22c.  if v0 >= v4 then goto L11e25e;
  #L11e230.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L11e234.  v5:= v4 + v0 @kind int;
  #L11e238.  v5:= v2[v5];
  #L11e23c.  v2:= v8.`b.p.g` @type ^`int`[] @kind object;
  #L11e240.  v2:= v2[v0];
  #L11e244.  v6:= v8.`b.p.f` @type ^`byte`[][] @kind object;
  #L11e248.  v6:= v6[v0] @kind object;
  #L11e24c.  v7:= v2 - v1 @kind int;
  #L11e250.  call `arraycopy`(v6, v5, v3, v1, v7) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11e256.  v0:= v0 + 1;
  #L11e25a.  v1:= v2;
  #L11e25c.  goto L11e22c;
  #L11e25e.  return v3 @kind object;
}
procedure `int` `hashCode`(`b.p` v9 @kind this) @signature `Lb/p;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11e270.  v1:= 0I;
  #L11e272.  v0:= v9.`b.p.d` @type ^`int`;
  #L11e276.  if v0 == 0 then goto L11e27c;
  #L11e27a.  return v0;
  #L11e27c.  v0:= 1I;
  #L11e27e.  v2:= v9.`b.p.f` @type ^`byte`[][] @kind object;
  #L11e282.  v5:= length @variable v2;
  #L11e284.  v2:= v1;
  #L11e286.  v3:= v1;
  #L11e288.  if v2 >= v5 then goto L11e2d4;
  #L11e28c.  v1:= v9.`b.p.f` @type ^`byte`[][] @kind object;
  #L11e290.  v6:= v1[v2] @kind object;
  #L11e294.  v1:= v9.`b.p.g` @type ^`int`[] @kind object;
  #L11e298.  v4:= v5 + v2 @kind int;
  #L11e29c.  v1:= v1[v4];
  #L11e2a0.  v4:= v9.`b.p.g` @type ^`int`[] @kind object;
  #L11e2a4.  v4:= v4[v2];
  #L11e2a8.  v3:= v4 - v3 @kind int;
  #L11e2ac.  v3:= v3 + v1 @kind int;
  #L11e2ae.  v8:= v1;
  #L11e2b0.  v1:= v0;
  #L11e2b2.  v0:= v8;
  #L11e2b4.  if v0 >= v3 then goto L11e2c8;
  #L11e2b8.  v1:= v1 * 31;
  #L11e2bc.  v7:= v6[v0] @kind byte;
  #L11e2c0.  v1:= v1 + v7 @kind int;
  #L11e2c2.  v0:= v0 + 1;
  #L11e2c6.  goto L11e2b4;
  #L11e2c8.  v0:= v2 + 1;
  #L11e2cc.  v2:= v0;
  #L11e2ce.  v3:= v4;
  #L11e2d0.  v0:= v1;
  #L11e2d2.  goto L11e288;
  #L11e2d4.  v9.`b.p.d` @type ^`int` := v0;
  #L11e2d8.  goto L11e27a;
}
procedure `java.lang.String` `toString`(`b.p` v1 @kind this) @signature `Lb/p;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11e2ec.  call temp:= `i`(v1) @signature `Lb/p;.i:()Lb/f;` @kind direct;
  #L11e2f2.  v0:= temp @kind object;
  #L11e2f4.  call temp:= `toString`(v0) @signature `Lb/f;.toString:()Ljava/lang/String;` @kind virtual;
  #L11e2fa.  v0:= temp @kind object;
  #L11e2fc.  return v0 @kind object;
}
