record `a.k$a` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `a.k$a.a` @AccessFlag ;
  `java.lang.String`[] `a.k$a.b` @AccessFlag ;
  `java.lang.String`[] `a.k$a.c` @AccessFlag ;
  `boolean` `a.k$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`a.k$a` v1 @kind this, `a.k` v2 @kind object) @signature `La/k$a;.<init>:(La/k;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L086fbc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L086fc2.  v0:= v2.`a.k.d` @type ^`boolean` @kind boolean;
  #L086fc6.  v1.`a.k$a.a` @type ^`boolean` := v0 @kind boolean;
  #L086fca.  v0:= v2.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L086fce.  v1.`a.k$a.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L086fd2.  v0:= v2.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L086fd6.  v1.`a.k$a.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L086fda.  v0:= v2.`a.k.e` @type ^`boolean` @kind boolean;
  #L086fde.  v1.`a.k$a.d` @type ^`boolean` := v0 @kind boolean;
  #L086fe2.  return @kind void;
}
procedure `void` `<init>`(`a.k$a` v0 @kind this, `boolean` v1 ) @signature `La/k$a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L086ff4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L086ffa.  v0.`a.k$a.a` @type ^`boolean` := v1 @kind boolean;
  #L086ffe.  return @kind void;
}
procedure `a.k$a` `a`(`a.k$a` v2 @kind this, `boolean` v3 ) @signature `La/k$a;.a:(Z)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L087010.  v0:= v2.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L087014.  if v0 != 0 then goto L087028;
  #L087018.  v0:= new `java.lang.IllegalStateException`;
  #L08701c.  v1:= "no TLS extensions for cleartext connections" @kind object;
  #L087020.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L087026.  throw v0;
  #L087028.  v2.`a.k$a.d` @type ^`boolean` := v3 @kind boolean;
  #L08702c.  return v2 @kind object;
}
procedure `a.k$a` `a`(`a.k$a` v3 @kind this, `a.ac`[] v4 @kind object) @signature `La/k$a;.a:([La/ac;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L087040.  v0:= v3.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L087044.  if v0 != 0 then goto L087058;
  #L087048.  v0:= new `java.lang.IllegalStateException`;
  #L08704c.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L087050.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L087056.  throw v0;
  #L087058.  v0:= length @variable v4;
  #L08705a.  v1:= new `java.lang.String`[v0];
  #L08705e.  v0:= 0I;
  #L087060.  v2:= length @variable v4;
  #L087062.  if v0 >= v2 then goto L087078;
  #L087066.  v2:= v4[v0] @kind object;
  #L08706a.  v2:= v2.`a.ac.f` @type ^`java.lang.String` @kind object;
  #L08706e.  v1[v0]:= v2 @kind object;
  #L087072.  v0:= v0 + 1;
  #L087076.  goto L087060;
  #L087078.  call temp:= `b`(v3, v1) @signature `La/k$a;.b:([Ljava/lang/String;)La/k$a;` @kind virtual;
  #L08707e.  v0:= temp @kind object;
  #L087080.  return v0 @kind object;
}
procedure `a.k$a` `a`(`a.k$a` v3 @kind this, `a.h`[] v4 @kind object) @signature `La/k$a;.a:([La/h;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L087094.  v0:= v3.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L087098.  if v0 != 0 then goto L0870ac;
  #L08709c.  v0:= new `java.lang.IllegalStateException`;
  #L0870a0.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L0870a4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0870aa.  throw v0;
  #L0870ac.  v0:= length @variable v4;
  #L0870ae.  v1:= new `java.lang.String`[v0];
  #L0870b2.  v0:= 0I;
  #L0870b4.  v2:= length @variable v4;
  #L0870b6.  if v0 >= v2 then goto L0870cc;
  #L0870ba.  v2:= v4[v0] @kind object;
  #L0870be.  v2:= v2.`a.h.bi` @type ^`java.lang.String` @kind object;
  #L0870c2.  v1[v0]:= v2 @kind object;
  #L0870c6.  v0:= v0 + 1;
  #L0870ca.  goto L0870b4;
  #L0870cc.  call temp:= `a`(v3, v1) @signature `La/k$a;.a:([Ljava/lang/String;)La/k$a;` @kind virtual;
  #L0870d2.  v0:= temp @kind object;
  #L0870d4.  return v0 @kind object;
}
procedure `a.k$a` `a`(`a.k$a` v2 @kind this, `java.lang.String`[] v3 @kind object) @signature `La/k$a;.a:([Ljava/lang/String;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0870e8.  v0:= v2.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L0870ec.  if v0 != 0 then goto L087100;
  #L0870f0.  v0:= new `java.lang.IllegalStateException`;
  #L0870f4.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L0870f8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0870fe.  throw v0;
  #L087100.  v0:= length @variable v3;
  #L087102.  if v0 != 0 then goto L087116;
  #L087106.  v0:= new `java.lang.IllegalArgumentException`;
  #L08710a.  v1:= "At least one cipher suite is required" @kind object;
  #L08710e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L087114.  throw v0;
  #L087116.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L08711c.  v0:= temp @kind object;
  #L08711e.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L087122.  v2.`a.k$a.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L087126.  return v2 @kind object;
}
procedure `a.k` `a`(`a.k$a` v1 @kind this) @signature `La/k$a;.a:()La/k;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L087138.  v0:= new `a.k`;
  #L08713c.  call `<init>`(v0, v1) @signature `La/k;.<init>:(La/k$a;)V` @kind direct;
  #L087142.  return v0 @kind object;
}
procedure `a.k$a` `b`(`a.k$a` v2 @kind this, `java.lang.String`[] v3 @kind object) @signature `La/k$a;.b:([Ljava/lang/String;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L087154.  v0:= v2.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L087158.  if v0 != 0 then goto L08716c;
  #L08715c.  v0:= new `java.lang.IllegalStateException`;
  #L087160.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L087164.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08716a.  throw v0;
  #L08716c.  v0:= length @variable v3;
  #L08716e.  if v0 != 0 then goto L087182;
  #L087172.  v0:= new `java.lang.IllegalArgumentException`;
  #L087176.  v1:= "At least one TLS version is required" @kind object;
  #L08717a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L087180.  throw v0;
  #L087182.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L087188.  v0:= temp @kind object;
  #L08718a.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L08718e.  v2.`a.k$a.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L087192.  return v2 @kind object;
}
