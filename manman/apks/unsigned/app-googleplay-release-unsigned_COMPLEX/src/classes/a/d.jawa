record `a.d` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `a.d.c` @AccessFlag ;
  `boolean` `a.d.d` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.e` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.h` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.i` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.j` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.k` @AccessFlag PRIVATE_FINAL;
  `int` `a.d.l` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.m` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.d.n` @AccessFlag PRIVATE_FINAL;
}
global `a.d` `@@a.d.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `a.d` `@@a.d.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L0853e4.  v0:= new `a.d$a`;
  #L0853e8.  call `<init>`(v0) @signature `La/d$a;.<init>:()V` @kind direct;
  #L0853ee.  call temp:= `a`(v0) @signature `La/d$a;.a:()La/d$a;` @kind virtual;
  #L0853f4.  v0:= temp @kind object;
  #L0853f6.  call temp:= `c`(v0) @signature `La/d$a;.c:()La/d;` @kind virtual;
  #L0853fc.  v0:= temp @kind object;
  #L0853fe.  `@@a.d.a` @type ^`a.d` := v0 @kind object;
  #L085402.  v0:= new `a.d$a`;
  #L085406.  call `<init>`(v0) @signature `La/d$a;.<init>:()V` @kind direct;
  #L08540c.  call temp:= `b`(v0) @signature `La/d$a;.b:()La/d$a;` @kind virtual;
  #L085412.  v0:= temp @kind object;
  #L085414.  v1:= 2147483647I;
  #L08541a.  v2:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L08541e.  call temp:= `a`(v0, v1, v2) @signature `La/d$a;.a:(ILjava/util/concurrent/TimeUnit;)La/d$a;` @kind virtual;
  #L085424.  v0:= temp @kind object;
  #L085426.  call temp:= `c`(v0) @signature `La/d$a;.c:()La/d;` @kind virtual;
  #L08542c.  v0:= temp @kind object;
  #L08542e.  `@@a.d.b` @type ^`a.d` := v0 @kind object;
  #L085432.  return @kind void;
}
procedure `void` `<init>`(`a.d` v2 @kind this, `a.d$a` v3 @kind object) @signature `La/d;.<init>:(La/d$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L085444.  v1:= 0I;
  #L085446.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08544c.  v0:= v3.`a.d$a.a` @type ^`boolean` @kind boolean;
  #L085450.  v2.`a.d.d` @type ^`boolean` := v0 @kind boolean;
  #L085454.  v0:= v3.`a.d$a.b` @type ^`boolean` @kind boolean;
  #L085458.  v2.`a.d.e` @type ^`boolean` := v0 @kind boolean;
  #L08545c.  v0:= v3.`a.d$a.c` @type ^`int`;
  #L085460.  v2.`a.d.f` @type ^`int` := v0;
  #L085464.  v0:= -1I;
  #L085466.  v2.`a.d.g` @type ^`int` := v0;
  #L08546a.  v2.`a.d.h` @type ^`boolean` := v1 @kind boolean;
  #L08546e.  v2.`a.d.i` @type ^`boolean` := v1 @kind boolean;
  #L085472.  v2.`a.d.j` @type ^`boolean` := v1 @kind boolean;
  #L085476.  v0:= v3.`a.d$a.d` @type ^`int`;
  #L08547a.  v2.`a.d.k` @type ^`int` := v0;
  #L08547e.  v0:= v3.`a.d$a.e` @type ^`int`;
  #L085482.  v2.`a.d.l` @type ^`int` := v0;
  #L085486.  v0:= v3.`a.d$a.f` @type ^`boolean` @kind boolean;
  #L08548a.  v2.`a.d.m` @type ^`boolean` := v0 @kind boolean;
  #L08548e.  v0:= v3.`a.d$a.g` @type ^`boolean` @kind boolean;
  #L085492.  v2.`a.d.n` @type ^`boolean` := v0 @kind boolean;
  #L085496.  return @kind void;
}
procedure `void` `<init>`(`a.d` v0 @kind this, `boolean` v1 , `boolean` v2 , `int` v3 , `int` v4 , `boolean` v5 , `boolean` v6 , `boolean` v7 , `int` v8 , `int` v9 , `boolean` v10 , `boolean` v11 , `java.lang.String` v12 @kind object) @signature `La/d;.<init>:(ZZIIZZZIIZZLjava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L0854a8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0854ae.  v0.`a.d.d` @type ^`boolean` := v1 @kind boolean;
  #L0854b2.  v0.`a.d.e` @type ^`boolean` := v2 @kind boolean;
  #L0854b6.  v0.`a.d.f` @type ^`int` := v3;
  #L0854ba.  v0.`a.d.g` @type ^`int` := v4;
  #L0854be.  v0.`a.d.h` @type ^`boolean` := v5 @kind boolean;
  #L0854c2.  v0.`a.d.i` @type ^`boolean` := v6 @kind boolean;
  #L0854c6.  v0.`a.d.j` @type ^`boolean` := v7 @kind boolean;
  #L0854ca.  v0.`a.d.k` @type ^`int` := v8;
  #L0854ce.  v0.`a.d.l` @type ^`int` := v9;
  #L0854d2.  v0.`a.d.m` @type ^`boolean` := v10 @kind boolean;
  #L0854d6.  v0.`a.d.n` @type ^`boolean` := v11 @kind boolean;
  #L0854da.  v0.`a.d.c` @type ^`java.lang.String` := v12 @kind object;
  #L0854de.  return @kind void;
}
procedure `a.d` `a`(`a.q` v23 @kind object) @signature `La/d;.a:(La/q;)La/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;
    v18;
    v19;
    v20;
    v21;
    v22;

  #L0854f0.  v16:= 0I;
  #L0854f4.  v4:= 0I;
  #L0854f6.  v5:= -1I;
  #L0854f8.  v6:= -1I;
  #L0854fa.  v7:= 0I;
  #L0854fc.  v8:= 0I;
  #L0854fe.  v9:= 0I;
  #L085500.  v10:= -1I;
  #L085502.  v11:= -1I;
  #L085504.  v12:= 0I;
  #L085506.  v13:= 0I;
  #L085508.  v15:= 1I;
  #L08550a.  v3:= 0I;
  #L08550c.  v2:= 0I;
  #L08550e.  call temp:= `a`(v23) @signature `La/q;.a:()I` @kind virtual;
  #L085514.  v19:= temp;
  #L085516.  v18:= v2;
  #L08551a.  v2:= v3 @kind object;
  #L08551c.  v3:= v16;
  #L085520.  v0:= v18;
  #L085524.  v1:= v19;
  #L085528.  if v0 >= v1 then goto L08583a;
  #L08552c.  v0:= v23 @kind object;
  #L085530.  v1:= v18;
  #L085534.  call temp:= `a`(v0, v1) @signature `La/q;.a:(I)Ljava/lang/String;` @kind virtual;
  #L08553a.  v16:= temp @kind object;
  #L08553c.  v0:= v23 @kind object;
  #L085540.  v1:= v18;
  #L085544.  call temp:= `b`(v0, v1) @signature `La/q;.b:(I)Ljava/lang/String;` @kind virtual;
  #L08554a.  v14:= temp @kind object;
  #L08554c.  v17:= "Cache-Control" @kind object;
  #L085550.  call temp:= `equalsIgnoreCase`(v16, v17) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L085556.  v17:= temp;
  #L085558.  if v17 == 0 then goto L08561a;
  #L08555c.  if v2 == 0 then goto L085616;
  #L085560.  v15:= 0I;
  #L085562.  v16:= 0I;
  #L085566.  v22:= v16;
  #L08556a.  v16:= v3;
  #L08556e.  v3:= v22;
  #L085572.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L085578.  v17:= temp;
  #L08557a.  v0:= v17;
  #L08557e.  if v3 >= v0 then goto L08582a;
  #L085582.  v17:= "=,;" @kind object;
  #L085586.  v0:= v17 @kind object;
  #L08558a.  call temp:= `a`(v14, v3, v0) @signature `La/a/c/e;.a:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L085590.  v17:= temp;
  #L085592.  v0:= v17;
  #L085596.  call temp:= `substring`(v14, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08559c.  v3:= temp @kind object;
  #L08559e.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L0855a4.  v20:= temp @kind object;
  #L0855a6.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L0855ac.  v3:= temp;
  #L0855ae.  v0:= v17;
  #L0855b2.  if v0 == v3 then goto L0855e6;
  #L0855b6.  v0:= v17;
  #L0855ba.  call temp:= `charAt`(v14, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L0855c0.  v3:= temp;
  #L0855c2.  v21:= 44I;
  #L0855c6.  v0:= v21;
  #L0855ca.  if v3 == v0 then goto L0855e6;
  #L0855ce.  v0:= v17;
  #L0855d2.  call temp:= `charAt`(v14, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L0855d8.  v3:= temp;
  #L0855da.  v21:= 59I;
  #L0855de.  v0:= v21;
  #L0855e2.  if v3 != v0 then goto L08562e;
  #L0855e6.  v17:= v17 + 1;
  #L0855ea.  v3:= 0I;
  #L0855ec.  v22:= v3 @kind object;
  #L0855f0.  v3:= v17;
  #L0855f4.  v17:= v22 @kind object;
  #L0855f8.  v21:= "no-cache" @kind object;
  #L0855fc.  v0:= v21 @kind object;
  #L085600.  v1:= v20 @kind object;
  #L085604.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08560a.  v21:= temp;
  #L08560c.  if v21 == 0 then goto L0856c6;
  #L085610.  v16:= 1I;
  #L085614.  goto L085572;
  #L085616.  v2:= v14 @kind object;
  #L085618.  goto L085562;
  #L08561a.  v17:= "Pragma" @kind object;
  #L08561e.  call temp:= `equalsIgnoreCase`(v16, v17) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L085624.  v16:= temp;
  #L085626.  if v16 == 0 then goto L085826;
  #L08562a.  v15:= 0I;
  #L08562c.  goto L085562;
  #L08562e.  v3:= v17 + 1;
  #L085632.  call temp:= `a`(v14, v3) @signature `La/a/c/e;.a:(Ljava/lang/String;I)I` @kind static;
  #L085638.  v3:= temp;
  #L08563a.  call temp:= `length`(v14) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L085640.  v17:= temp;
  #L085642.  v0:= v17;
  #L085646.  if v3 >= v0 then goto L085694;
  #L08564a.  call temp:= `charAt`(v14, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L085650.  v17:= temp;
  #L085652.  v21:= 34I;
  #L085656.  v0:= v17;
  #L08565a.  v1:= v21;
  #L08565e.  if v0 != v1 then goto L085694;
  #L085662.  v3:= v3 + 1;
  #L085666.  v17:= "\"" @kind object;
  #L08566a.  v0:= v17 @kind object;
  #L08566e.  call temp:= `a`(v14, v3, v0) @signature `La/a/c/e;.a:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L085674.  v17:= temp;
  #L085676.  v0:= v17;
  #L08567a.  call temp:= `substring`(v14, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L085680.  v3:= temp @kind object;
  #L085682.  v17:= v17 + 1;
  #L085686.  v22:= v3 @kind object;
  #L08568a.  v3:= v17;
  #L08568e.  v17:= v22 @kind object;
  #L085692.  goto L0855f8;
  #L085694.  v17:= ",;" @kind object;
  #L085698.  v0:= v17 @kind object;
  #L08569c.  call temp:= `a`(v14, v3, v0) @signature `La/a/c/e;.a:(Ljava/lang/String;ILjava/lang/String;)I` @kind static;
  #L0856a2.  v17:= temp;
  #L0856a4.  v0:= v17;
  #L0856a8.  call temp:= `substring`(v14, v3, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L0856ae.  v3:= temp @kind object;
  #L0856b0.  call temp:= `trim`(v3) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L0856b6.  v3:= temp @kind object;
  #L0856b8.  v22:= v3 @kind object;
  #L0856bc.  v3:= v17;
  #L0856c0.  v17:= v22 @kind object;
  #L0856c4.  goto L0855f8;
  #L0856c6.  v21:= "no-store" @kind object;
  #L0856ca.  v0:= v21 @kind object;
  #L0856ce.  v1:= v20 @kind object;
  #L0856d2.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L0856d8.  v21:= temp;
  #L0856da.  if v21 == 0 then goto L0856e4;
  #L0856de.  v4:= 1I;
  #L0856e0.  goto L085572;
  #L0856e4.  v21:= "max-age" @kind object;
  #L0856e8.  v0:= v21 @kind object;
  #L0856ec.  v1:= v20 @kind object;
  #L0856f0.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L0856f6.  v21:= temp;
  #L0856f8.  if v21 == 0 then goto L08570e;
  #L0856fc.  v5:= -1I;
  #L0856fe.  v0:= v17 @kind object;
  #L085702.  call temp:= `b`(v0, v5) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L085708.  v5:= temp;
  #L08570a.  goto L085572;
  #L08570e.  v21:= "s-maxage" @kind object;
  #L085712.  v0:= v21 @kind object;
  #L085716.  v1:= v20 @kind object;
  #L08571a.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L085720.  v21:= temp;
  #L085722.  if v21 == 0 then goto L085738;
  #L085726.  v6:= -1I;
  #L085728.  v0:= v17 @kind object;
  #L08572c.  call temp:= `b`(v0, v6) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L085732.  v6:= temp;
  #L085734.  goto L085572;
  #L085738.  v21:= "private" @kind object;
  #L08573c.  v0:= v21 @kind object;
  #L085740.  v1:= v20 @kind object;
  #L085744.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08574a.  v21:= temp;
  #L08574c.  if v21 == 0 then goto L085756;
  #L085750.  v7:= 1I;
  #L085752.  goto L085572;
  #L085756.  v21:= "public" @kind object;
  #L08575a.  v0:= v21 @kind object;
  #L08575e.  v1:= v20 @kind object;
  #L085762.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L085768.  v21:= temp;
  #L08576a.  if v21 == 0 then goto L085774;
  #L08576e.  v8:= 1I;
  #L085770.  goto L085572;
  #L085774.  v21:= "must-revalidate" @kind object;
  #L085778.  v0:= v21 @kind object;
  #L08577c.  v1:= v20 @kind object;
  #L085780.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L085786.  v21:= temp;
  #L085788.  if v21 == 0 then goto L085792;
  #L08578c.  v9:= 1I;
  #L08578e.  goto L085572;
  #L085792.  v21:= "max-stale" @kind object;
  #L085796.  v0:= v21 @kind object;
  #L08579a.  v1:= v20 @kind object;
  #L08579e.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L0857a4.  v21:= temp;
  #L0857a6.  if v21 == 0 then goto L0857c0;
  #L0857aa.  v10:= 2147483647I;
  #L0857b0.  v0:= v17 @kind object;
  #L0857b4.  call temp:= `b`(v0, v10) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L0857ba.  v10:= temp;
  #L0857bc.  goto L085572;
  #L0857c0.  v21:= "min-fresh" @kind object;
  #L0857c4.  v0:= v21 @kind object;
  #L0857c8.  v1:= v20 @kind object;
  #L0857cc.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L0857d2.  v21:= temp;
  #L0857d4.  if v21 == 0 then goto L0857ea;
  #L0857d8.  v11:= -1I;
  #L0857da.  v0:= v17 @kind object;
  #L0857de.  call temp:= `b`(v0, v11) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @kind static;
  #L0857e4.  v11:= temp;
  #L0857e6.  goto L085572;
  #L0857ea.  v17:= "only-if-cached" @kind object;
  #L0857ee.  v0:= v17 @kind object;
  #L0857f2.  v1:= v20 @kind object;
  #L0857f6.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L0857fc.  v17:= temp;
  #L0857fe.  if v17 == 0 then goto L085808;
  #L085802.  v12:= 1I;
  #L085804.  goto L085572;
  #L085808.  v17:= "no-transform" @kind object;
  #L08580c.  v0:= v17 @kind object;
  #L085810.  v1:= v20 @kind object;
  #L085814.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08581a.  v17:= temp;
  #L08581c.  if v17 == 0 then goto L085572;
  #L085820.  v13:= 1I;
  #L085822.  goto L085572;
  #L085826.  v16:= v3;
  #L08582a.  v3:= v18 + 1;
  #L08582e.  v18:= v3;
  #L085832.  v3:= v16;
  #L085836.  goto L085520;
  #L08583a.  if v15 != 0 then goto L08584c;
  #L08583e.  v14:= 0I;
  #L085840.  v2:= new `a.d`;
  #L085844.  call `<init>`(v2, v3, v4, v5, v6, v7, v8, v9, v10, v11, v12, v13, v14) @signature `La/d;.<init>:(ZZIIZZZIIZZLjava/lang/String;)V` @kind direct;
  #L08584a.  return v2 @kind object;
  #L08584c.  v14:= v2 @kind object;
  #L08584e.  goto L085840;
}
procedure `java.lang.String` `j`(`a.d` v4 @kind this) @signature `La/d;.j:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L085860.  v3:= -1I;
  #L085862.  v0:= new `java.lang.StringBuilder`;
  #L085866.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08586c.  v1:= v4.`a.d.d` @type ^`boolean` @kind boolean;
  #L085870.  if v1 == 0 then goto L08587e;
  #L085874.  v1:= "no-cache, " @kind object;
  #L085878.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08587e.  v1:= v4.`a.d.e` @type ^`boolean` @kind boolean;
  #L085882.  if v1 == 0 then goto L085890;
  #L085886.  v1:= "no-store, " @kind object;
  #L08588a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085890.  v1:= v4.`a.d.f` @type ^`int`;
  #L085894.  if v1 == v3 then goto L0858ba;
  #L085898.  v1:= "max-age=" @kind object;
  #L08589c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0858a2.  v1:= temp @kind object;
  #L0858a4.  v2:= v4.`a.d.f` @type ^`int`;
  #L0858a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0858ae.  v1:= temp @kind object;
  #L0858b0.  v2:= ", " @kind object;
  #L0858b4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0858ba.  v1:= v4.`a.d.g` @type ^`int`;
  #L0858be.  if v1 == v3 then goto L0858e4;
  #L0858c2.  v1:= "s-maxage=" @kind object;
  #L0858c6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0858cc.  v1:= temp @kind object;
  #L0858ce.  v2:= v4.`a.d.g` @type ^`int`;
  #L0858d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L0858d8.  v1:= temp @kind object;
  #L0858da.  v2:= ", " @kind object;
  #L0858de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0858e4.  v1:= v4.`a.d.h` @type ^`boolean` @kind boolean;
  #L0858e8.  if v1 == 0 then goto L0858f6;
  #L0858ec.  v1:= "private, " @kind object;
  #L0858f0.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0858f6.  v1:= v4.`a.d.i` @type ^`boolean` @kind boolean;
  #L0858fa.  if v1 == 0 then goto L085908;
  #L0858fe.  v1:= "public, " @kind object;
  #L085902.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085908.  v1:= v4.`a.d.j` @type ^`boolean` @kind boolean;
  #L08590c.  if v1 == 0 then goto L08591a;
  #L085910.  v1:= "must-revalidate, " @kind object;
  #L085914.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08591a.  v1:= v4.`a.d.k` @type ^`int`;
  #L08591e.  if v1 == v3 then goto L085944;
  #L085922.  v1:= "max-stale=" @kind object;
  #L085926.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08592c.  v1:= temp @kind object;
  #L08592e.  v2:= v4.`a.d.k` @type ^`int`;
  #L085932.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L085938.  v1:= temp @kind object;
  #L08593a.  v2:= ", " @kind object;
  #L08593e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085944.  v1:= v4.`a.d.l` @type ^`int`;
  #L085948.  if v1 == v3 then goto L08596e;
  #L08594c.  v1:= "min-fresh=" @kind object;
  #L085950.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085956.  v1:= temp @kind object;
  #L085958.  v2:= v4.`a.d.l` @type ^`int`;
  #L08595c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L085962.  v1:= temp @kind object;
  #L085964.  v2:= ", " @kind object;
  #L085968.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08596e.  v1:= v4.`a.d.m` @type ^`boolean` @kind boolean;
  #L085972.  if v1 == 0 then goto L085980;
  #L085976.  v1:= "only-if-cached, " @kind object;
  #L08597a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085980.  v1:= v4.`a.d.n` @type ^`boolean` @kind boolean;
  #L085984.  if v1 == 0 then goto L085992;
  #L085988.  v1:= "no-transform, " @kind object;
  #L08598c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085992.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L085998.  v1:= temp;
  #L08599a.  if v1 != 0 then goto L0859a4;
  #L08599e.  v0:= "" @kind object;
  #L0859a2.  return v0 @kind object;
  #L0859a4.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L0859aa.  v1:= temp;
  #L0859ac.  v1:= v1 + -2;
  #L0859b0.  call temp:= `length`(v0) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L0859b6.  v2:= temp;
  #L0859b8.  call temp:= `delete`(v0, v1, v2) @signature `Ljava/lang/StringBuilder;.delete:(II)Ljava/lang/StringBuilder;` @kind virtual;
  #L0859be.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0859c4.  v0:= temp @kind object;
  #L0859c6.  goto L0859a2;
}
procedure `boolean` `a`(`a.d` v1 @kind this) @signature `La/d;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0859d8.  v0:= v1.`a.d.d` @type ^`boolean` @kind boolean;
  #L0859dc.  return v0;
}
procedure `boolean` `b`(`a.d` v1 @kind this) @signature `La/d;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0859f0.  v0:= v1.`a.d.e` @type ^`boolean` @kind boolean;
  #L0859f4.  return v0;
}
procedure `int` `c`(`a.d` v1 @kind this) @signature `La/d;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L085a08.  v0:= v1.`a.d.f` @type ^`int`;
  #L085a0c.  return v0;
}
procedure `boolean` `d`(`a.d` v1 @kind this) @signature `La/d;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L085a20.  v0:= v1.`a.d.h` @type ^`boolean` @kind boolean;
  #L085a24.  return v0;
}
procedure `boolean` `e`(`a.d` v1 @kind this) @signature `La/d;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L085a38.  v0:= v1.`a.d.i` @type ^`boolean` @kind boolean;
  #L085a3c.  return v0;
}
procedure `boolean` `f`(`a.d` v1 @kind this) @signature `La/d;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L085a50.  v0:= v1.`a.d.j` @type ^`boolean` @kind boolean;
  #L085a54.  return v0;
}
procedure `int` `g`(`a.d` v1 @kind this) @signature `La/d;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L085a68.  v0:= v1.`a.d.k` @type ^`int`;
  #L085a6c.  return v0;
}
procedure `int` `h`(`a.d` v1 @kind this) @signature `La/d;.h:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L085a80.  v0:= v1.`a.d.l` @type ^`int`;
  #L085a84.  return v0;
}
procedure `boolean` `i`(`a.d` v1 @kind this) @signature `La/d;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L085a98.  v0:= v1.`a.d.m` @type ^`boolean` @kind boolean;
  #L085a9c.  return v0;
}
procedure `java.lang.String` `toString`(`a.d` v1 @kind this) @signature `La/d;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L085ab0.  v0:= v1.`a.d.c` @type ^`java.lang.String` @kind object;
  #L085ab4.  if v0 == 0 then goto L085aba;
  #L085ab8.  return v0 @kind object;
  #L085aba.  call temp:= `j`(v1) @signature `La/d;.j:()Ljava/lang/String;` @kind direct;
  #L085ac0.  v0:= temp @kind object;
  #L085ac2.  v1.`a.d.c` @type ^`java.lang.String` := v0 @kind object;
  #L085ac6.  goto L085ab8;
}
