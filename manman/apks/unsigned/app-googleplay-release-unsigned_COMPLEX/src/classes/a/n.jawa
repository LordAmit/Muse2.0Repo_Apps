record `a.n` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `a.n.a` @AccessFlag PRIVATE;
  `int` `a.n.b` @AccessFlag PRIVATE;
  `java.lang.Runnable` `a.n.c` @AccessFlag PRIVATE;
  `java.util.concurrent.ExecutorService` `a.n.d` @AccessFlag PRIVATE;
  `java.util.Deque` `a.n.e` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `a.n.f` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `a.n.g` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.n` v1 @kind this) @signature `La/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L088308.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08830e.  v0:= 64I;
  #L088312.  v1.`a.n.a` @type ^`int` := v0;
  #L088316.  v0:= 5I;
  #L088318.  v1.`a.n.b` @type ^`int` := v0;
  #L08831c.  v0:= new `java.util.ArrayDeque`;
  #L088320.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L088326.  v1.`a.n.e` @type ^`java.util.Deque` := v0 @kind object;
  #L08832a.  v0:= new `java.util.ArrayDeque`;
  #L08832e.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L088334.  v1.`a.n.f` @type ^`java.util.Deque` := v0 @kind object;
  #L088338.  v0:= new `java.util.ArrayDeque`;
  #L08833c.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L088342.  v1.`a.n.g` @type ^`java.util.Deque` := v0 @kind object;
  #L088346.  return @kind void;
}
procedure `void` `a`(`a.n` v2 @kind this, `java.util.Deque` v3 @kind object, `java.lang.Object` v4 @kind object, `boolean` v5 ) @signature `La/n;.a:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L088358.  @monitorenter v2
  #Try_start0.  
  #L08835a.  call temp:= `remove`(v3, v4) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L088360.  v0:= temp;
  #L088362.  if v0 != 0 then goto L08837c;
  #L088366.  v0:= new `java.lang.AssertionError`;
  #L08836a.  v1:= "Call wasn't in-flight!" @kind object;
  #L08836e.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L088374.  throw v0;
  #L088376.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L088378.  @monitorexit v2
  #Try_end0.  
  #L08837a.  throw v0;
  #L08837c.  if v5 == 0 then goto L088386;
  #Try_start1.  
  #L088380.  call `c`(v2) @signature `La/n;.c:()V` @kind direct;
  #L088386.  call temp:= `b`(v2) @signature `La/n;.b:()I` @kind virtual;
  #L08838c.  v0:= temp;
  #L08838e.  v1:= v2.`a.n.c` @type ^`java.lang.Runnable` @kind object;
  #L088392.  @monitorexit v2
  #Try_end1.  
  #L088394.  if v0 != 0 then goto L0883a2;
  #L088398.  if v1 == 0 then goto L0883a2;
  #L08839c.  call `run`(v1) @signature `Ljava/lang/Runnable;.run:()V` @kind interface;
  #L0883a2.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L088376;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L088376;
}
procedure `int` `b`(`a.n` v4 @kind this, `a.w$a` v5 @kind object) @signature `La/n;.b:(La/w$a;)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0883c8.  v0:= 0I;
  #L0883ca.  v1:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L0883ce.  call temp:= `iterator`(v1) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L0883d4.  v2:= temp @kind object;
  #L0883d6.  v1:= v0;
  #L0883d8.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L0883de.  v0:= temp;
  #L0883e0.  if v0 == 0 then goto L088414;
  #L0883e4.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L0883ea.  v0:= temp @kind object;
  #L0883ec.  v0:= (`a.w$a`) v0 @kind object;
  #L0883f0.  call temp:= `a`(v0) @signature `La/w$a;.a:()Ljava/lang/String;` @kind virtual;
  #L0883f6.  v0:= temp @kind object;
  #L0883f8.  call temp:= `a`(v5) @signature `La/w$a;.a:()Ljava/lang/String;` @kind virtual;
  #L0883fe.  v3:= temp @kind object;
  #L088400.  call temp:= `equals`(v0, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L088406.  v0:= temp;
  #L088408.  if v0 == 0 then goto L088416;
  #L08840c.  v0:= v1 + 1;
  #L088410.  v1:= v0;
  #L088412.  goto L0883d8;
  #L088414.  return v1;
  #L088416.  v0:= v1;
  #L088418.  goto L088410;
}
procedure `void` `c`(`a.n` v4 @kind this) @signature `La/n;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08842c.  v0:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L088430.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L088436.  v0:= temp;
  #L088438.  v1:= v4.`a.n.a` @type ^`int`;
  #L08843c.  if v0 < v1 then goto L088442;
  #L088440.  return @kind void;
  #L088442.  v0:= v4.`a.n.e` @type ^`java.util.Deque` @kind object;
  #L088446.  call temp:= `isEmpty`(v0) @signature `Ljava/util/Deque;.isEmpty:()Z` @kind interface;
  #L08844c.  v0:= temp;
  #L08844e.  if v0 != 0 then goto L088440;
  #L088452.  v0:= v4.`a.n.e` @type ^`java.util.Deque` @kind object;
  #L088456.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L08845c.  v1:= temp @kind object;
  #L08845e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L088464.  v0:= temp;
  #L088466.  if v0 == 0 then goto L088440;
  #L08846a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L088470.  v0:= temp @kind object;
  #L088472.  v0:= (`a.w$a`) v0 @kind object;
  #L088476.  call temp:= `b`(v4, v0) @signature `La/n;.b:(La/w$a;)I` @kind direct;
  #L08847c.  v2:= temp;
  #L08847e.  v3:= v4.`a.n.b` @type ^`int`;
  #L088482.  if v2 >= v3 then goto L0884a4;
  #L088486.  call `remove`(v1) @signature `Ljava/util/Iterator;.remove:()V` @kind interface;
  #L08848c.  v2:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L088490.  call temp:= `add`(v2, v0) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L088496.  call temp:= `a`(v4) @signature `La/n;.a:()Ljava/util/concurrent/ExecutorService;` @kind virtual;
  #L08849c.  v2:= temp @kind object;
  #L08849e.  call `execute`(v2, v0) @signature `Ljava/util/concurrent/ExecutorService;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L0884a4.  v0:= v4.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L0884a8.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L0884ae.  v0:= temp;
  #L0884b0.  v2:= v4.`a.n.a` @type ^`int`;
  #L0884b4.  if v0 < v2 then goto L08845e;
  #L0884b8.  goto L088440;
}
procedure `java.util.concurrent.ExecutorService` `a`(`a.n` v9 @kind this) @signature `La/n;.a:()Ljava/util/concurrent/ExecutorService;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L0884cc.  @monitorenter v9
  #Try_start0.  
  #L0884ce.  v0:= v9.`a.n.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #L0884d2.  if v0 != 0 then goto L08850c;
  #L0884d6.  v1:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L0884da.  v2:= 0I;
  #L0884dc.  v3:= 2147483647I;
  #L0884e2.  v4:= 60L;
  #L0884e6.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L0884ea.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L0884ee.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L0884f4.  v0:= "OkHttp Dispatcher" @kind object;
  #L0884f8.  v8:= 0I;
  #L0884fa.  call temp:= `a`(v0, v8) @signature `La/a/c;.a:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L088500.  v8:= temp @kind object;
  #L088502.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L088508.  v9.`a.n.d` @type ^`java.util.concurrent.ExecutorService` := v1 @kind object;
  #L08850c.  v0:= v9.`a.n.d` @type ^`java.util.concurrent.ExecutorService` @kind object;
  #Try_end0.  
  #L088510.  @monitorexit v9
  #L088512.  return v0 @kind object;
  #L088514.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L088516.  @monitorexit v9
  #L088518.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L088514;
}
procedure `void` `a`(`a.n` v2 @kind this, `a.w$a` v3 @kind object) @signature `La/n;.a:(La/w$a;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L088538.  v0:= v2.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L08853c.  v1:= 1I;
  #L08853e.  call `a`(v2, v0, v3, v1) @signature `La/n;.a:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @kind direct;
  #L088544.  return @kind void;
}
procedure `void` `a`(`a.n` v1 @kind this, `a.w` v2 @kind object) @signature `La/n;.a:(La/w;)V` @AccessFlag  {
    temp;
    v0;

  #L088558.  @monitorenter v1
  #Try_start0.  
  #L08855a.  v0:= v1.`a.n.g` @type ^`java.util.Deque` @kind object;
  #L08855e.  call temp:= `add`(v0, v2) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #Try_end0.  
  #L088564.  @monitorexit v1
  #L088566.  return @kind void;
  #L088568.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08856a.  @monitorexit v1
  #L08856c.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L088568;
}
procedure `int` `b`(`a.n` v2 @kind this) @signature `La/n;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08858c.  @monitorenter v2
  #Try_start0.  
  #L08858e.  v0:= v2.`a.n.f` @type ^`java.util.Deque` @kind object;
  #L088592.  call temp:= `size`(v0) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #L088598.  v0:= temp;
  #L08859a.  v1:= v2.`a.n.g` @type ^`java.util.Deque` @kind object;
  #L08859e.  call temp:= `size`(v1) @signature `Ljava/util/Deque;.size:()I` @kind interface;
  #Try_end0.  
  #L0885a4.  v1:= temp;
  #L0885a6.  v0:= v0 + v1 @kind int;
  #L0885a8.  @monitorexit v2
  #L0885aa.  return v0;
  #L0885ac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0885ae.  @monitorexit v2
  #L0885b0.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0885ac;
}
procedure `void` `b`(`a.n` v2 @kind this, `a.w` v3 @kind object) @signature `La/n;.b:(La/w;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L0885d0.  v0:= v2.`a.n.g` @type ^`java.util.Deque` @kind object;
  #L0885d4.  v1:= 0I;
  #L0885d6.  call `a`(v2, v0, v3, v1) @signature `La/n;.a:(Ljava/util/Deque;Ljava/lang/Object;Z)V` @kind direct;
  #L0885dc.  return @kind void;
}
