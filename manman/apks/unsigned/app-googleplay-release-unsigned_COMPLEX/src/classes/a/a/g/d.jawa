record `a.a.g.d` @kind class @AccessFlag  {
  `java.lang.Class` `a.a.g.d.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.a.g.d.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `a.a.g.d.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.g.d` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `La/a/g/d;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L0830e8.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0830ee.  v0.`a.a.g.d.a` @type ^`java.lang.Class` := v1 @kind object;
  #L0830f2.  v0.`a.a.g.d.b` @type ^`java.lang.String` := v2 @kind object;
  #L0830f6.  v0.`a.a.g.d.c` @type ^`java.lang.Class`[] := v3 @kind object;
  #L0830fa.  return @kind void;
}
procedure `java.lang.reflect.Method` `a`(`a.a.g.d` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08310c.  v0:= 0I;
  #L08310e.  v1:= v4.`a.a.g.d.b` @type ^`java.lang.String` @kind object;
  #L083112.  if v1 == 0 then goto L08314a;
  #L083116.  v1:= v4.`a.a.g.d.b` @type ^`java.lang.String` @kind object;
  #L08311a.  v2:= v4.`a.a.g.d.c` @type ^`java.lang.Class`[] @kind object;
  #L08311e.  call temp:= `a`(v5, v1, v2) @signature `La/a/g/d;.a:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L083124.  v1:= temp @kind object;
  #L083126.  if v1 == 0 then goto L08314c;
  #L08312a.  v2:= v4.`a.a.g.d.a` @type ^`java.lang.Class` @kind object;
  #L08312e.  if v2 == 0 then goto L08314c;
  #L083132.  v2:= v4.`a.a.g.d.a` @type ^`java.lang.Class` @kind object;
  #L083136.  call temp:= `getReturnType`(v1) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L08313c.  v3:= temp @kind object;
  #L08313e.  call temp:= `isAssignableFrom`(v2, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L083144.  v2:= temp;
  #L083146.  if v2 != 0 then goto L08314c;
  #L08314a.  return v0 @kind object;
  #L08314c.  v0:= v1 @kind object;
  #L08314e.  goto L08314a;
}
procedure `java.lang.reflect.Method` `a`(`java.lang.Class` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.Class`[] v5 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L083160.  v0:= 0I;
  #Try_start0.  
  #L083162.  call temp:= `getMethod`(v3, v4, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #Try_end0.  
  #L083168.  v1:= temp @kind object;
  #Try_start1.  
  #L08316a.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #Try_end1.  
  #L083170.  v2:= temp;
  #L083172.  v2:= v2 ^& 1;
  #L083176.  if v2 != 0 then goto L083186;
  #L08317a.  return v0 @kind object;
  #L08317c.  v1:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L08317e.  goto L08317a;
  #L083180.  v0:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L083182.  v0:= v1 @kind object;
  #L083184.  goto L08317a;
  #L083186.  v0:= v1 @kind object;
  #L083188.  goto L08317a;
  catch `java.lang.NoSuchMethodException` @[Try_start0..Try_end0] goto L08317c;
  catch `java.lang.NoSuchMethodException` @[Try_start1..Try_end1] goto L083180;
}
procedure `java.lang.Object` `a`(`a.a.g.d` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0831b8.  v0:= 0I;
  #L0831ba.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L0831c0.  v1:= temp @kind object;
  #L0831c2.  call temp:= `a`(v2, v1) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L0831c8.  v1:= temp @kind object;
  #L0831ca.  if v1 != 0 then goto L0831d0;
  #L0831ce.  return v0 @kind object;
  #Try_start0.  
  #L0831d0.  call temp:= `invoke`(v1, v3, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L0831d6.  v0:= temp @kind object;
  #L0831d8.  goto L0831ce;
  #L0831da.  v1:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L0831dc.  goto L0831ce;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L0831da;
}
procedure `boolean` `a`(`a.a.g.d` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L083200.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L083206.  v0:= temp @kind object;
  #L083208.  call temp:= `a`(v1, v0) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L08320e.  v0:= temp @kind object;
  #L083210.  if v0 == 0 then goto L083218;
  #L083214.  v0:= 1I;
  #L083216.  return v0;
  #L083218.  v0:= 0I;
  #L08321a.  goto L083216;
}
procedure `java.lang.Object` `b`(`a.a.g.d` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `La/a/g/d;.b:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L08322c.  call temp:= `a`(v3, v4, v5) @signature `La/a/g/d;.a:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L083232.  v0:= temp @kind object;
  #L083234.  return v0 @kind object;
  #L083236.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L083238.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L08323e.  v0:= temp @kind object;
  #L083240.  v1:= instanceof @variable v0 @type ^`java.lang.RuntimeException` @kind boolean;
  #L083244.  if v1 == 0 then goto L08324e;
  #L083248.  v0:= (`java.lang.RuntimeException`) v0 @kind object;
  #L08324c.  throw v0;
  #L08324e.  v1:= new `java.lang.AssertionError`;
  #L083252.  v2:= "Unexpected exception" @kind object;
  #L083256.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L08325c.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L083262.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L083236;
}
procedure `java.lang.Object` `c`(`a.a.g.d` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Object`[] v7 @kind object) @signature `La/a/g/d;.c:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L083284.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L08328a.  v0:= temp @kind object;
  #L08328c.  call temp:= `a`(v5, v0) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L083292.  v0:= temp @kind object;
  #L083294.  if v0 != 0 then goto L0832e2;
  #L083298.  v0:= new `java.lang.AssertionError`;
  #L08329c.  v1:= new `java.lang.StringBuilder`;
  #L0832a0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0832a6.  v2:= "Method " @kind object;
  #L0832aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0832b0.  v1:= temp @kind object;
  #L0832b2.  v2:= v5.`a.a.g.d.b` @type ^`java.lang.String` @kind object;
  #L0832b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0832bc.  v1:= temp @kind object;
  #L0832be.  v2:= " not supported for object " @kind object;
  #L0832c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0832c8.  v1:= temp @kind object;
  #L0832ca.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0832d0.  v1:= temp @kind object;
  #L0832d2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0832d8.  v1:= temp @kind object;
  #L0832da.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L0832e0.  throw v0;
  #Try_start0.  
  #L0832e2.  call temp:= `invoke`(v0, v6, v7) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L0832e8.  v0:= temp @kind object;
  #L0832ea.  return v0 @kind object;
  #L0832ec.  v1:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L0832ee.  v2:= new `java.lang.AssertionError`;
  #L0832f2.  v3:= new `java.lang.StringBuilder`;
  #L0832f6.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0832fc.  v4:= "Unexpectedly could not call: " @kind object;
  #L083300.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083306.  v3:= temp @kind object;
  #L083308.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08330e.  v0:= temp @kind object;
  #L083310.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L083316.  v0:= temp @kind object;
  #L083318.  call `<init>`(v2, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L08331e.  call temp:= `initCause`(v2, v1) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L083324.  throw v2;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L0832ec;
}
procedure `java.lang.Object` `d`(`a.a.g.d` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `La/a/g/d;.d:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L083348.  call temp:= `c`(v3, v4, v5) @signature `La/a/g/d;.c:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L08334e.  v0:= temp @kind object;
  #L083350.  return v0 @kind object;
  #L083352.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L083354.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L08335a.  v0:= temp @kind object;
  #L08335c.  v1:= instanceof @variable v0 @type ^`java.lang.RuntimeException` @kind boolean;
  #L083360.  if v1 == 0 then goto L08336a;
  #L083364.  v0:= (`java.lang.RuntimeException`) v0 @kind object;
  #L083368.  throw v0;
  #L08336a.  v1:= new `java.lang.AssertionError`;
  #L08336e.  v2:= "Unexpected exception" @kind object;
  #L083372.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L083378.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L08337e.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L083352;
}
