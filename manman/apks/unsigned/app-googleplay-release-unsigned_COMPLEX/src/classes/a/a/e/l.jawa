record `a.a.e.l` @kind class @AccessFlag FINAL {
  `java.util.concurrent.CountDownLatch` `a.a.e.l.a` @AccessFlag PRIVATE_FINAL;
  `long` `a.a.e.l.b` @AccessFlag PRIVATE;
  `long` `a.a.e.l.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.e.l` v4 @kind this) @signature `La/a/e/l;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L081c54.  v2:= -1L;
  #L081c58.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L081c5e.  v0:= new `java.util.concurrent.CountDownLatch`;
  #L081c62.  v1:= 1I;
  #L081c64.  call `<init>`(v0, v1) @signature `Ljava/util/concurrent/CountDownLatch;.<init>:(I)V` @kind direct;
  #L081c6a.  v4.`a.a.e.l.a` @type ^`java.util.concurrent.CountDownLatch` := v0 @kind object;
  #L081c6e.  v4.`a.a.e.l.b` @type ^`long` := v2 @kind wide;
  #L081c72.  v4.`a.a.e.l.c` @type ^`long` := v2 @kind wide;
  #L081c76.  return @kind void;
}
procedure `void` `a`(`a.a.e.l` v4 @kind this) @signature `La/a/e/l;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L081c88.  v0:= v4.`a.a.e.l.b` @type ^`long` @kind wide;
  #L081c8c.  v2:= -1L;
  #L081c90.  v0:= lcmp(v0, v2);
  #L081c94.  if v0 == 0 then goto L081ca4;
  #L081c98.  v0:= new `java.lang.IllegalStateException`;
  #L081c9c.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L081ca2.  throw v0;
  #L081ca4.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L081caa.  v0:= temp @kind wide;
  #L081cac.  v4.`a.a.e.l.b` @type ^`long` := v0 @kind wide;
  #L081cb0.  return @kind void;
}
procedure `void` `b`(`a.a.e.l` v4 @kind this) @signature `La/a/e/l;.b:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L081cc4.  v2:= -1L;
  #L081cc8.  v0:= v4.`a.a.e.l.c` @type ^`long` @kind wide;
  #L081ccc.  v0:= lcmp(v0, v2);
  #L081cd0.  if v0 != 0 then goto L081ce0;
  #L081cd4.  v0:= v4.`a.a.e.l.b` @type ^`long` @kind wide;
  #L081cd8.  v0:= lcmp(v0, v2);
  #L081cdc.  if v0 != 0 then goto L081cec;
  #L081ce0.  v0:= new `java.lang.IllegalStateException`;
  #L081ce4.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L081cea.  throw v0;
  #L081cec.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L081cf2.  v0:= temp @kind wide;
  #L081cf4.  v4.`a.a.e.l.c` @type ^`long` := v0 @kind wide;
  #L081cf8.  v0:= v4.`a.a.e.l.a` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L081cfc.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L081d02.  return @kind void;
}
procedure `void` `c`(`a.a.e.l` v4 @kind this) @signature `La/a/e/l;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L081d14.  v2:= -1L;
  #L081d18.  v0:= v4.`a.a.e.l.c` @type ^`long` @kind wide;
  #L081d1c.  v0:= lcmp(v0, v2);
  #L081d20.  if v0 != 0 then goto L081d30;
  #L081d24.  v0:= v4.`a.a.e.l.b` @type ^`long` @kind wide;
  #L081d28.  v0:= lcmp(v0, v2);
  #L081d2c.  if v0 != 0 then goto L081d3c;
  #L081d30.  v0:= new `java.lang.IllegalStateException`;
  #L081d34.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L081d3a.  throw v0;
  #L081d3c.  v0:= v4.`a.a.e.l.b` @type ^`long` @kind wide;
  #L081d40.  v2:= 1L;
  #L081d44.  v0:= v0 - v2 @kind long;
  #L081d46.  v4.`a.a.e.l.c` @type ^`long` := v0 @kind wide;
  #L081d4a.  v0:= v4.`a.a.e.l.a` @type ^`java.util.concurrent.CountDownLatch` @kind object;
  #L081d4e.  call `countDown`(v0) @signature `Ljava/util/concurrent/CountDownLatch;.countDown:()V` @kind virtual;
  #L081d54.  return @kind void;
}
