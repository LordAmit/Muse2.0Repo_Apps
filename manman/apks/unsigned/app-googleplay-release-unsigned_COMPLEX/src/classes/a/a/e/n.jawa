record `a.a.e.n` @kind class @AccessFlag PUBLIC_FINAL {
  `int` `a.a.e.n.a` @AccessFlag PRIVATE;
  `int`[] `a.a.e.n.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.e.n` v1 @kind this) @signature `La/a/e/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L081df8.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L081dfe.  v0:= 10I;
  #L081e02.  v0:= new `int`[v0];
  #L081e06.  v1.`a.a.e.n.b` @type ^`int`[] := v0 @kind object;
  #L081e0a.  return @kind void;
}
procedure `a.a.e.n` `a`(`a.a.e.n` v2 @kind this, `int` v3 , `int` v4 ) @signature `La/a/e/n;.a:(II)La/a/e/n;` @AccessFlag  {
    temp;
    v0;
    v1;

  #L081e1c.  v0:= v2.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L081e20.  v0:= length @variable v0;
  #L081e22.  if v3 < v0 then goto L081e28;
  #L081e26.  return v2 @kind object;
  #L081e28.  v0:= 1I;
  #L081e2a.  v0:= v0 ^< v3 @kind int;
  #L081e2c.  v1:= v2.`a.a.e.n.a` @type ^`int`;
  #L081e30.  v0:= v0 ^| v1 @kind int;
  #L081e32.  v2.`a.a.e.n.a` @type ^`int` := v0;
  #L081e36.  v0:= v2.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L081e3a.  v0[v3]:= v4;
  #L081e3e.  goto L081e26;
}
procedure `void` `a`(`a.a.e.n` v2 @kind this) @signature `La/a/e/n;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L081e50.  v1:= 0I;
  #L081e52.  v2.`a.a.e.n.a` @type ^`int` := v1;
  #L081e56.  v0:= v2.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L081e5a.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([II)V` @kind static;
  #L081e60.  return @kind void;
}
procedure `void` `a`(`a.a.e.n` v2 @kind this, `a.a.e.n` v3 @kind object) @signature `La/a/e/n;.a:(La/a/e/n;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L081e74.  v0:= 0I;
  #L081e76.  v1:= 10I;
  #L081e7a.  if v0 >= v1 then goto L081ea0;
  #L081e7e.  call temp:= `a`(v3, v0) @signature `La/a/e/n;.a:(I)Z` @kind virtual;
  #L081e84.  v1:= temp;
  #L081e86.  if v1 != 0 then goto L081e90;
  #L081e8a.  v0:= v0 + 1;
  #L081e8e.  goto L081e76;
  #L081e90.  call temp:= `b`(v3, v0) @signature `La/a/e/n;.b:(I)I` @kind virtual;
  #L081e96.  v1:= temp;
  #L081e98.  call temp:= `a`(v2, v0, v1) @signature `La/a/e/n;.a:(II)La/a/e/n;` @kind virtual;
  #L081e9e.  goto L081e8a;
  #L081ea0.  return @kind void;
}
procedure `boolean` `a`(`a.a.e.n` v3 @kind this, `int` v4 ) @signature `La/a/e/n;.a:(I)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L081eb4.  v0:= 1I;
  #L081eb6.  v1:= v0 ^< v4 @kind int;
  #L081eba.  v2:= v3.`a.a.e.n.a` @type ^`int`;
  #L081ebe.  v1:= v1 ^& v2 @kind int;
  #L081ec0.  if v1 == 0 then goto L081ec6;
  #L081ec4.  return v0;
  #L081ec6.  v0:= 0I;
  #L081ec8.  goto L081ec4;
}
procedure `int` `b`(`a.a.e.n` v1 @kind this) @signature `La/a/e/n;.b:()I` @AccessFlag  {
    temp;
    v0;

  #L081edc.  v0:= v1.`a.a.e.n.a` @type ^`int`;
  #L081ee0.  call temp:= `bitCount`(v0) @signature `Ljava/lang/Integer;.bitCount:(I)I` @kind static;
  #L081ee6.  v0:= temp;
  #L081ee8.  return v0;
}
procedure `int` `b`(`a.a.e.n` v1 @kind this, `int` v2 ) @signature `La/a/e/n;.b:(I)I` @AccessFlag  {
    temp;
    v0;

  #L081efc.  v0:= v1.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L081f00.  v0:= v0[v2];
  #L081f04.  return v0;
}
procedure `int` `c`(`a.a.e.n` v2 @kind this) @signature `La/a/e/n;.c:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L081f18.  v0:= 2I;
  #L081f1a.  v1:= v2.`a.a.e.n.a` @type ^`int`;
  #L081f1e.  v0:= v0 ^& v1 @kind int;
  #L081f20.  if v0 == 0 then goto L081f30;
  #L081f24.  v0:= v2.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L081f28.  v1:= 1I;
  #L081f2a.  v0:= v0[v1];
  #L081f2e.  return v0;
  #L081f30.  v0:= -1I;
  #L081f32.  goto L081f2e;
}
procedure `int` `c`(`a.a.e.n` v2 @kind this, `int` v3 ) @signature `La/a/e/n;.c:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L081f44.  v0:= 16I;
  #L081f48.  v1:= v2.`a.a.e.n.a` @type ^`int`;
  #L081f4c.  v0:= v0 ^& v1 @kind int;
  #L081f4e.  if v0 == 0 then goto L081f5c;
  #L081f52.  v0:= v2.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L081f56.  v1:= 4I;
  #L081f58.  v3:= v0[v1];
  #L081f5c.  return v3;
}
procedure `int` `d`(`a.a.e.n` v2 @kind this) @signature `La/a/e/n;.d:()I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L081f70.  v0:= 128I;
  #L081f74.  v1:= v2.`a.a.e.n.a` @type ^`int`;
  #L081f78.  v0:= v0 ^& v1 @kind int;
  #L081f7a.  if v0 == 0 then goto L081f8a;
  #L081f7e.  v0:= v2.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L081f82.  v1:= 7I;
  #L081f84.  v0:= v0[v1];
  #L081f88.  return v0;
  #L081f8a.  v0:= 65535I;
  #L081f90.  goto L081f88;
}
procedure `int` `d`(`a.a.e.n` v2 @kind this, `int` v3 ) @signature `La/a/e/n;.d:(I)I` @AccessFlag  {
    temp;
    v0;
    v1;

  #L081fa4.  v0:= 32I;
  #L081fa8.  v1:= v2.`a.a.e.n.a` @type ^`int`;
  #L081fac.  v0:= v0 ^& v1 @kind int;
  #L081fae.  if v0 == 0 then goto L081fbc;
  #L081fb2.  v0:= v2.`a.a.e.n.b` @type ^`int`[] @kind object;
  #L081fb6.  v1:= 5I;
  #L081fb8.  v3:= v0[v1];
  #L081fbc.  return v3;
}
