record `a.a.e.i$a` @kind class @AccessFlag FINAL extends `b.q` @kind interface {
  `boolean` `a.a.e.i$a.a` @AccessFlag ;
  `boolean` `a.a.e.i$a.b` @AccessFlag ;
  `a.a.e.i` `a.a.e.i$a.d` @AccessFlag FINAL_SYNTHETIC;
  `b.c` `a.a.e.i$a.e` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.a.e.i$a.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/e/i$a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L07f4f4.  v0:= constclass @type ^`a.a.e.i` @kind object;
  #L07f4f8.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L07f4fe.  v0:= temp;
  #L07f500.  if v0 != 0 then goto L07f50c;
  #L07f504.  v0:= 1I;
  #L07f506.  `@@a.a.e.i$a.c` @type ^`boolean` := v0 @kind boolean;
  #L07f50a.  return @kind void;
  #L07f50c.  v0:= 0I;
  #L07f50e.  goto L07f506;
}
procedure `void` `<init>`(`a.a.e.i$a` v1 @kind this, `a.a.e.i` v2 @kind object) @signature `La/a/e/i$a;.<init>:(La/a/e/i;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L07f520.  v1.`a.a.e.i$a.d` @type ^`a.a.e.i` := v2 @kind object;
  #L07f524.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07f52a.  v0:= new `b.c`;
  #L07f52e.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L07f534.  v1.`a.a.e.i$a.e` @type ^`b.c` := v0 @kind object;
  #L07f538.  return @kind void;
}
procedure `void` `a`(`a.a.e.i$a` v6 @kind this, `boolean` v7 ) @signature `La/a/e/i$a;.a:(Z)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07f54c.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f550.  @monitorenter v1
  #Try_start0.  
  #L07f552.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f556.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L07f55a.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_end0.  
  #Try_start1.  
  #L07f560.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f564.  v2:= v0.`a.a.e.i.b` @type ^`long` @kind wide;
  #L07f568.  v4:= 0L;
  #L07f56c.  v0:= lcmp(v2, v4);
  #L07f570.  if v0 > 0 then goto L07f5b4;
  #L07f574.  v0:= v6.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L07f578.  if v0 != 0 then goto L07f5b4;
  #L07f57c.  v0:= v6.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L07f580.  if v0 != 0 then goto L07f5b4;
  #L07f584.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f588.  v0:= v0.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L07f58c.  if v0 != 0 then goto L07f5b4;
  #L07f590.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f594.  call `l`(v0) @signature `La/a/e/i;.l:()V` @kind virtual;
  #Try_end1.  
  #L07f59a.  goto L07f560;
  #L07f59c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start2.  
  #L07f59e.  v2:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f5a2.  v2:= v2.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L07f5a6.  call `b`(v2) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L07f5ac.  throw v0;
  #L07f5ae.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07f5b0.  @monitorexit v1
  #Try_end2.  
  #L07f5b2.  throw v0;
  #Try_start3.  
  #L07f5b4.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f5b8.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L07f5bc.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L07f5c2.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f5c6.  call `k`(v0) @signature `La/a/e/i;.k:()V` @kind virtual;
  #L07f5cc.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f5d0.  v2:= v0.`a.a.e.i.b` @type ^`long` @kind wide;
  #L07f5d4.  v0:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07f5d8.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07f5de.  v4:= temp @kind wide;
  #L07f5e0.  call temp:= `min`(v2, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L07f5e6.  v4:= temp @kind wide;
  #L07f5e8.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f5ec.  v2:= v0.`a.a.e.i.b` @type ^`long` @kind wide;
  #L07f5f0.  v2:= v2 - v4 @kind long;
  #L07f5f2.  v0.`a.a.e.i.b` @type ^`long` := v2 @kind wide;
  #L07f5f6.  @monitorexit v1
  #Try_end3.  
  #L07f5f8.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f5fc.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L07f600.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_start4.  
  #L07f606.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f60a.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f60e.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f612.  v1:= v1.`a.a.e.i.c` @type ^`int`;
  #L07f616.  if v7 == 0 then goto L07f64a;
  #L07f61a.  v2:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07f61e.  call temp:= `b`(v2) @signature `Lb/c;.b:()J` @kind virtual;
  #L07f624.  v2:= temp @kind wide;
  #L07f626.  v2:= lcmp(v4, v2);
  #L07f62a.  if v2 != 0 then goto L07f64a;
  #L07f62e.  v2:= 1I;
  #L07f630.  v3:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07f634.  call `a`(v0, v1, v2, v3, v4) @signature `La/a/e/g;.a:(IZLb/c;J)V` @kind virtual;
  #Try_end4.  
  #L07f63a.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f63e.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L07f642.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L07f648.  return @kind void;
  #L07f64a.  v2:= 0I;
  #L07f64c.  goto L07f630;
  #L07f64e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07f650.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f654.  v1:= v1.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L07f658.  call `b`(v1) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L07f65e.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07f5ae;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07f59c;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L07f5ae;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L07f5ae;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L07f64e;
}
procedure `b.s` `a`(`a.a.e.i$a` v1 @kind this) @signature `La/a/e/i$a;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07f6a0.  v0:= v1.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f6a4.  v0:= v0.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L07f6a8.  return v0 @kind object;
}
procedure `void` `a_`(`a.a.e.i$a` v4 @kind this, `b.c` v5 @kind object, `long` v6 ) @signature `La/a/e/i$a;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07f6bc.  v0:= `@@a.a.e.i$a.c` @type ^`boolean` @kind boolean;
  #L07f6c0.  if v0 != 0 then goto L07f6e0;
  #L07f6c4.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f6c8.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07f6ce.  v0:= temp;
  #L07f6d0.  if v0 == 0 then goto L07f6e0;
  #L07f6d4.  v0:= new `java.lang.AssertionError`;
  #L07f6d8.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07f6de.  throw v0;
  #L07f6e0.  v0:= v4.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07f6e4.  call `a_`(v0, v5, v6) @signature `Lb/c;.a_:(Lb/c;J)V` @kind virtual;
  #L07f6ea.  v0:= v4.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07f6ee.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07f6f4.  v0:= temp @kind wide;
  #L07f6f6.  v2:= 16384L;
  #L07f6fa.  v0:= lcmp(v0, v2);
  #L07f6fe.  if v0 < 0 then goto L07f70c;
  #L07f702.  v0:= 0I;
  #L07f704.  call `a`(v4, v0) @signature `La/a/e/i$a;.a:(Z)V` @kind direct;
  #L07f70a.  goto L07f6ea;
  #L07f70c.  return @kind void;
}
procedure `void` `close`(`a.a.e.i$a` v6 @kind this) @signature `La/a/e/i$a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07f720.  v4:= 0L;
  #L07f724.  v2:= 1I;
  #L07f726.  v0:= `@@a.a.e.i$a.c` @type ^`boolean` @kind boolean;
  #L07f72a.  if v0 != 0 then goto L07f74a;
  #L07f72e.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f732.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07f738.  v0:= temp;
  #L07f73a.  if v0 == 0 then goto L07f74a;
  #L07f73e.  v0:= new `java.lang.AssertionError`;
  #L07f742.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07f748.  throw v0;
  #L07f74a.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f74e.  @monitorenter v1
  #Try_start0.  
  #L07f750.  v0:= v6.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L07f754.  if v0 == 0 then goto L07f75c;
  #L07f758.  @monitorexit v1
  #L07f75a.  return @kind void;
  #L07f75c.  @monitorexit v1
  #Try_end0.  
  #L07f75e.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f762.  v0:= v0.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L07f766.  v0:= v0.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L07f76a.  if v0 != 0 then goto L07f7bc;
  #L07f76e.  v0:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07f772.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07f778.  v0:= temp @kind wide;
  #L07f77a.  v0:= lcmp(v0, v4);
  #L07f77e.  if v0 <= 0 then goto L07f7a4;
  #L07f782.  v0:= v6.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07f786.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07f78c.  v0:= temp @kind wide;
  #L07f78e.  v0:= lcmp(v0, v4);
  #L07f792.  if v0 <= 0 then goto L07f7bc;
  #L07f796.  call `a`(v6, v2) @signature `La/a/e/i$a;.a:(Z)V` @kind direct;
  #L07f79c.  goto L07f782;
  #L07f79e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L07f7a0.  @monitorexit v1
  #Try_end1.  
  #L07f7a2.  throw v0;
  #L07f7a4.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f7a8.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f7ac.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f7b0.  v1:= v1.`a.a.e.i.c` @type ^`int`;
  #L07f7b4.  v3:= 0I;
  #L07f7b6.  call `a`(v0, v1, v2, v3, v4) @signature `La/a/e/g;.a:(IZLb/c;J)V` @kind virtual;
  #L07f7bc.  v1:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f7c0.  @monitorenter v1
  #L07f7c2.  v0:= 1I;
  #Try_start2.  
  #L07f7c4.  v6.`a.a.e.i$a.a` @type ^`boolean` := v0 @kind boolean;
  #L07f7c8.  @monitorexit v1
  #Try_end2.  
  #L07f7ca.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f7ce.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f7d2.  call `b`(v0) @signature `La/a/e/g;.b:()V` @kind virtual;
  #L07f7d8.  v0:= v6.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f7dc.  call `j`(v0) @signature `La/a/e/i;.j:()V` @kind virtual;
  #L07f7e2.  goto L07f75a;
  #L07f7e4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L07f7e6.  @monitorexit v1
  #Try_end3.  
  #L07f7e8.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07f79e;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07f79e;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L07f7e4;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L07f7e4;
}
procedure `void` `flush`(`a.a.e.i$a` v4 @kind this) @signature `La/a/e/i$a;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07f824.  v0:= `@@a.a.e.i$a.c` @type ^`boolean` @kind boolean;
  #L07f828.  if v0 != 0 then goto L07f848;
  #L07f82c.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f830.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07f836.  v0:= temp;
  #L07f838.  if v0 == 0 then goto L07f848;
  #L07f83c.  v0:= new `java.lang.AssertionError`;
  #L07f840.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07f846.  throw v0;
  #L07f848.  v1:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f84c.  @monitorenter v1
  #Try_start0.  
  #L07f84e.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f852.  call `k`(v0) @signature `La/a/e/i;.k:()V` @kind virtual;
  #L07f858.  @monitorexit v1
  #Try_end0.  
  #L07f85a.  v0:= v4.`a.a.e.i$a.e` @type ^`b.c` @kind object;
  #L07f85e.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07f864.  v0:= temp @kind wide;
  #L07f866.  v2:= 0L;
  #L07f86a.  v0:= lcmp(v0, v2);
  #L07f86e.  if v0 <= 0 then goto L07f890;
  #L07f872.  v0:= 0I;
  #L07f874.  call `a`(v4, v0) @signature `La/a/e/i$a;.a:(Z)V` @kind direct;
  #L07f87a.  v0:= v4.`a.a.e.i$a.d` @type ^`a.a.e.i` @kind object;
  #L07f87e.  v0:= v0.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07f882.  call `b`(v0) @signature `La/a/e/g;.b:()V` @kind virtual;
  #L07f888.  goto L07f85a;
  #L07f88a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L07f88c.  @monitorexit v1
  #Try_end1.  
  #L07f88e.  throw v0;
  #L07f890.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07f88a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07f88a;
}
