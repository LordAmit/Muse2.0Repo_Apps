record `a.a.e.i` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `a.a.e.i.a` @AccessFlag ;
  `long` `a.a.e.i.b` @AccessFlag ;
  `int` `a.a.e.i.c` @AccessFlag FINAL;
  `a.a.e.g` `a.a.e.i.d` @AccessFlag FINAL;
  `a.a.e.i$a` `a.a.e.i.e` @AccessFlag FINAL;
  `a.a.e.i$c` `a.a.e.i.f` @AccessFlag FINAL;
  `a.a.e.i$c` `a.a.e.i.g` @AccessFlag FINAL;
  `a.a.e.b` `a.a.e.i.h` @AccessFlag ;
  `java.util.List` `a.a.e.i.j` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `a.a.e.i.k` @AccessFlag PRIVATE;
  `boolean` `a.a.e.i.l` @AccessFlag PRIVATE;
  `a.a.e.i$b` `a.a.e.i.m` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.a.e.i.i` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/e/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L08039c.  v0:= constclass @type ^`a.a.e.i` @kind object;
  #L0803a0.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L0803a6.  v0:= temp;
  #L0803a8.  if v0 != 0 then goto L0803b4;
  #L0803ac.  v0:= 1I;
  #L0803ae.  `@@a.a.e.i.i` @type ^`boolean` := v0 @kind boolean;
  #L0803b2.  return @kind void;
  #L0803b4.  v0:= 0I;
  #L0803b6.  goto L0803ae;
}
procedure `void` `<init>`(`a.a.e.i` v4 @kind this, `int` v5 , `a.a.e.g` v6 @kind object, `boolean` v7 , `boolean` v8 , `java.util.List` v9 @kind object) @signature `La/a/e/i;.<init>:(ILa/a/e/g;ZZLjava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0803c8.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0803ce.  v0:= 0L;
  #L0803d2.  v4.`a.a.e.i.a` @type ^`long` := v0 @kind wide;
  #L0803d6.  v0:= new `a.a.e.i$c`;
  #L0803da.  call `<init>`(v0, v4) @signature `La/a/e/i$c;.<init>:(La/a/e/i;)V` @kind direct;
  #L0803e0.  v4.`a.a.e.i.f` @type ^`a.a.e.i$c` := v0 @kind object;
  #L0803e4.  v0:= new `a.a.e.i$c`;
  #L0803e8.  call `<init>`(v0, v4) @signature `La/a/e/i$c;.<init>:(La/a/e/i;)V` @kind direct;
  #L0803ee.  v4.`a.a.e.i.g` @type ^`a.a.e.i$c` := v0 @kind object;
  #L0803f2.  v0:= 0I;
  #L0803f4.  v4.`a.a.e.i.h` @type ^`a.a.e.b` := v0 @kind object;
  #L0803f8.  if v6 != 0 then goto L08040c;
  #L0803fc.  v0:= new `java.lang.NullPointerException`;
  #L080400.  v1:= "connection == null" @kind object;
  #L080404.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08040a.  throw v0;
  #L08040c.  if v9 != 0 then goto L080420;
  #L080410.  v0:= new `java.lang.NullPointerException`;
  #L080414.  v1:= "requestHeaders == null" @kind object;
  #L080418.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08041e.  throw v0;
  #L080420.  v4.`a.a.e.i.c` @type ^`int` := v5;
  #L080424.  v4.`a.a.e.i.d` @type ^`a.a.e.g` := v6 @kind object;
  #L080428.  v0:= v6.`a.a.e.g.m` @type ^`a.a.e.n` @kind object;
  #L08042c.  call temp:= `d`(v0) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L080432.  v0:= temp;
  #L080434.  v0:= (`long`) v0 @kind i2l;
  #L080436.  v4.`a.a.e.i.b` @type ^`long` := v0 @kind wide;
  #L08043a.  v0:= new `a.a.e.i$b`;
  #L08043e.  v1:= v6.`a.a.e.g.l` @type ^`a.a.e.n` @kind object;
  #L080442.  call temp:= `d`(v1) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L080448.  v1:= temp;
  #L08044a.  v2:= (`long`) v1 @kind i2l;
  #L08044c.  call `<init>`(v0, v4, v2) @signature `La/a/e/i$b;.<init>:(La/a/e/i;J)V` @kind direct;
  #L080452.  v4.`a.a.e.i.m` @type ^`a.a.e.i$b` := v0 @kind object;
  #L080456.  v0:= new `a.a.e.i$a`;
  #L08045a.  call `<init>`(v0, v4) @signature `La/a/e/i$a;.<init>:(La/a/e/i;)V` @kind direct;
  #L080460.  v4.`a.a.e.i.e` @type ^`a.a.e.i$a` := v0 @kind object;
  #L080464.  v0:= v4.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L080468.  v0.`a.a.e.i$b.b` @type ^`boolean` := v8 @kind boolean;
  #L08046c.  v0:= v4.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L080470.  v0.`a.a.e.i$a.b` @type ^`boolean` := v7 @kind boolean;
  #L080474.  v4.`a.a.e.i.j` @type ^`java.util.List` := v9 @kind object;
  #L080478.  return @kind void;
}
procedure `boolean` `d`(`a.a.e.i` v2 @kind this, `a.a.e.b` v3 @kind object) @signature `La/a/e/i;.d:(La/a/e/b;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L08048c.  v0:= 0I;
  #L08048e.  v1:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L080492.  if v1 != 0 then goto L0804ae;
  #L080496.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L08049c.  v1:= temp;
  #L08049e.  if v1 == 0 then goto L0804ae;
  #L0804a2.  v0:= new `java.lang.AssertionError`;
  #L0804a6.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0804ac.  throw v0;
  #L0804ae.  @monitorenter v2
  #Try_start0.  
  #L0804b0.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L0804b4.  if v1 == 0 then goto L0804bc;
  #L0804b8.  @monitorexit v2
  #L0804ba.  return v0;
  #L0804bc.  v1:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L0804c0.  v1:= v1.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L0804c4.  if v1 == 0 then goto L0804de;
  #L0804c8.  v1:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L0804cc.  v1:= v1.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L0804d0.  if v1 == 0 then goto L0804de;
  #L0804d4.  @monitorexit v2
  #L0804d6.  goto L0804ba;
  #L0804d8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0804da.  @monitorexit v2
  #Try_end0.  
  #L0804dc.  throw v0;
  #Try_start1.  
  #L0804de.  v2.`a.a.e.i.h` @type ^`a.a.e.b` := v3 @kind object;
  #L0804e2.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L0804e8.  @monitorexit v2
  #Try_end1.  
  #L0804ea.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L0804ee.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L0804f2.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L0804f8.  v0:= 1I;
  #L0804fa.  goto L0804ba;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0804d8;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0804d8;
}
procedure `int` `a`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L080520.  v0:= v1.`a.a.e.i.c` @type ^`int`;
  #L080524.  return v0;
}
procedure `void` `a`(`a.a.e.i` v3 @kind this, `long` v4 ) @signature `La/a/e/i;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L080538.  v0:= v3.`a.a.e.i.b` @type ^`long` @kind wide;
  #L08053c.  v0:= v0 + v4 @kind long;
  #L08053e.  v3.`a.a.e.i.b` @type ^`long` := v0 @kind wide;
  #L080542.  v0:= 0L;
  #L080546.  v0:= lcmp(v4, v0);
  #L08054a.  if v0 <= 0 then goto L080554;
  #L08054e.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L080554.  return @kind void;
}
procedure `void` `a`(`a.a.e.i` v2 @kind this, `a.a.e.b` v3 @kind object) @signature `La/a/e/i;.a:(La/a/e/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L080568.  call temp:= `d`(v2, v3) @signature `La/a/e/i;.d:(La/a/e/b;)Z` @kind direct;
  #L08056e.  v0:= temp;
  #L080570.  if v0 != 0 then goto L080576;
  #L080574.  return @kind void;
  #L080576.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L08057a.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L08057e.  call `b`(v0, v1, v3) @signature `La/a/e/g;.b:(ILa/a/e/b;)V` @kind virtual;
  #L080584.  goto L080574;
}
procedure `void` `a`(`a.a.e.i` v4 @kind this, `b.e` v5 @kind object, `int` v6 ) @signature `La/a/e/i;.a:(Lb/e;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L080598.  v0:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L08059c.  if v0 != 0 then goto L0805b8;
  #L0805a0.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L0805a6.  v0:= temp;
  #L0805a8.  if v0 == 0 then goto L0805b8;
  #L0805ac.  v0:= new `java.lang.AssertionError`;
  #L0805b0.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0805b6.  throw v0;
  #L0805b8.  v0:= v4.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L0805bc.  v2:= (`long`) v6 @kind i2l;
  #L0805be.  call `a`(v0, v5, v2) @signature `La/a/e/i$b;.a:(Lb/e;J)V` @kind virtual;
  #L0805c4.  return @kind void;
}
procedure `void` `a`(`a.a.e.i` v3 @kind this, `java.util.List` v4 @kind object) @signature `La/a/e/i;.a:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L0805d8.  v0:= 1I;
  #L0805da.  v1:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L0805de.  if v1 != 0 then goto L0805fa;
  #L0805e2.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L0805e8.  v1:= temp;
  #L0805ea.  if v1 == 0 then goto L0805fa;
  #L0805ee.  v0:= new `java.lang.AssertionError`;
  #L0805f2.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0805f8.  throw v0;
  #L0805fa.  @monitorenter v3
  #L0805fc.  v1:= 1I;
  #Try_start0.  
  #L0805fe.  v3.`a.a.e.i.l` @type ^`boolean` := v1 @kind boolean;
  #L080602.  v1:= v3.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L080606.  if v1 != 0 then goto L080632;
  #L08060a.  v3.`a.a.e.i.k` @type ^`java.util.List` := v4 @kind object;
  #L08060e.  call temp:= `b`(v3) @signature `La/a/e/i;.b:()Z` @kind virtual;
  #L080614.  v0:= temp;
  #L080616.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L08061c.  @monitorexit v3
  #Try_end0.  
  #L08061e.  if v0 != 0 then goto L080630;
  #L080622.  v0:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L080626.  v1:= v3.`a.a.e.i.c` @type ^`int`;
  #L08062a.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L080630.  return @kind void;
  #Try_start1.  
  #L080632.  v1:= new `java.util.ArrayList`;
  #L080636.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L08063c.  v2:= v3.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L080640.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L080646.  v2:= 0I;
  #L080648.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L08064e.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L080654.  v3.`a.a.e.i.k` @type ^`java.util.List` := v1 @kind object;
  #L080658.  goto L08061c;
  #L08065a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08065c.  @monitorexit v3
  #Try_end1.  
  #L08065e.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08065a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08065a;
}
procedure `void` `b`(`a.a.e.i` v2 @kind this, `a.a.e.b` v3 @kind object) @signature `La/a/e/i;.b:(La/a/e/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L080684.  call temp:= `d`(v2, v3) @signature `La/a/e/i;.d:(La/a/e/b;)Z` @kind direct;
  #L08068a.  v0:= temp;
  #L08068c.  if v0 != 0 then goto L080692;
  #L080690.  return @kind void;
  #L080692.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L080696.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L08069a.  call `a`(v0, v1, v3) @signature `La/a/e/g;.a:(ILa/a/e/b;)V` @kind virtual;
  #L0806a0.  goto L080690;
}
procedure `boolean` `b`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0806b4.  v0:= 0I;
  #L0806b6.  @monitorenter v2
  #Try_start0.  
  #L0806b8.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #Try_end0.  
  #L0806bc.  if v1 == 0 then goto L0806c4;
  #L0806c0.  @monitorexit v2
  #L0806c2.  return v0;
  #Try_start1.  
  #L0806c4.  v1:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L0806c8.  v1:= v1.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L0806cc.  if v1 != 0 then goto L0806dc;
  #L0806d0.  v1:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L0806d4.  v1:= v1.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L0806d8.  if v1 == 0 then goto L0806fc;
  #L0806dc.  v1:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L0806e0.  v1:= v1.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L0806e4.  if v1 != 0 then goto L0806f4;
  #L0806e8.  v1:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L0806ec.  v1:= v1.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L0806f0.  if v1 == 0 then goto L0806fc;
  #L0806f4.  v1:= v2.`a.a.e.i.l` @type ^`boolean` @kind boolean;
  #Try_end1.  
  #L0806f8.  if v1 != 0 then goto L0806c0;
  #L0806fc.  v0:= 1I;
  #L0806fe.  goto L0806c0;
  #L080700.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L080702.  @monitorexit v2
  #L080704.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L080700;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L080700;
}
procedure `void` `c`(`a.a.e.i` v1 @kind this, `a.a.e.b` v2 @kind object) @signature `La/a/e/i;.c:(La/a/e/b;)V` @AccessFlag  {
    temp;
    v0;

  #L08072c.  @monitorenter v1
  #Try_start0.  
  #L08072e.  v0:= v1.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L080732.  if v0 != 0 then goto L080740;
  #L080736.  v1.`a.a.e.i.h` @type ^`a.a.e.b` := v2 @kind object;
  #L08073a.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #Try_end0.  
  #L080740.  @monitorexit v1
  #L080742.  return @kind void;
  #L080744.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L080746.  @monitorexit v1
  #L080748.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L080744;
}
procedure `boolean` `c`(`a.a.e.i` v4 @kind this) @signature `La/a/e/i;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L080768.  v2:= 0I;
  #L08076a.  v1:= 1I;
  #L08076c.  v0:= v4.`a.a.e.i.c` @type ^`int`;
  #L080770.  v0:= v0 ^& 1;
  #L080774.  if v0 != v1 then goto L080788;
  #L080778.  v0:= v1;
  #L08077a.  v3:= v4.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L08077e.  v3:= v3.`a.a.e.g.b` @type ^`boolean` @kind boolean;
  #L080782.  if v3 != v0 then goto L08078c;
  #L080786.  return v1;
  #L080788.  v0:= v2;
  #L08078a.  goto L08077a;
  #L08078c.  v1:= v2;
  #L08078e.  goto L080786;
}
procedure `java.util.List` `d`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.d:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0807a0.  @monitorenter v2
  #Try_start0.  
  #L0807a2.  call temp:= `c`(v2) @signature `La/a/e/i;.c:()Z` @kind virtual;
  #L0807a8.  v0:= temp;
  #L0807aa.  if v0 != 0 then goto L0807c4;
  #L0807ae.  v0:= new `java.lang.IllegalStateException`;
  #L0807b2.  v1:= "servers cannot read response headers" @kind object;
  #L0807b6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0807bc.  throw v0;
  #Try_end0.  
  #L0807be.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0807c0.  @monitorexit v2
  #L0807c2.  throw v0;
  #Try_start1.  
  #L0807c4.  v0:= v2.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L0807c8.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_end1.  
  #Try_start2.  
  #L0807ce.  v0:= v2.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L0807d2.  if v0 != 0 then goto L0807f4;
  #L0807d6.  v0:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L0807da.  if v0 != 0 then goto L0807f4;
  #L0807de.  call `l`(v2) @signature `La/a/e/i;.l:()V` @kind virtual;
  #Try_end2.  
  #L0807e4.  goto L0807ce;
  #L0807e6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L0807e8.  v1:= v2.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L0807ec.  call `b`(v1) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L0807f2.  throw v0;
  #L0807f4.  v0:= v2.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L0807f8.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L0807fe.  v0:= v2.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L080802.  if v0 == 0 then goto L080810;
  #L080806.  v1:= 0I;
  #L080808.  v2.`a.a.e.i.k` @type ^`java.util.List` := v1 @kind object;
  #Try_end3.  
  #L08080c.  @monitorexit v2
  #L08080e.  return v0 @kind object;
  #Try_start4.  
  #L080810.  v0:= new `a.a.e.o`;
  #L080814.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L080818.  call `<init>`(v0, v1) @signature `La/a/e/o;.<init>:(La/a/e/b;)V` @kind direct;
  #L08081e.  throw v0;
  #Try_end4.  
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0807be;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0807be;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L0807e6;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L0807be;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L0807be;
}
procedure `b.s` `e`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.e:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L080860.  v0:= v1.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L080864.  return v0 @kind object;
}
procedure `b.s` `f`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.f:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L080878.  v0:= v1.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L08087c.  return v0 @kind object;
}
procedure `b.r` `g`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.g:()Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L080890.  v0:= v1.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L080894.  return v0 @kind object;
}
procedure `b.q` `h`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.h:()Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0808a8.  @monitorenter v2
  #Try_start0.  
  #L0808aa.  v0:= v2.`a.a.e.i.l` @type ^`boolean` @kind boolean;
  #L0808ae.  if v0 != 0 then goto L0808d4;
  #L0808b2.  call temp:= `c`(v2) @signature `La/a/e/i;.c:()Z` @kind virtual;
  #L0808b8.  v0:= temp;
  #L0808ba.  if v0 != 0 then goto L0808d4;
  #L0808be.  v0:= new `java.lang.IllegalStateException`;
  #L0808c2.  v1:= "reply before requesting the sink" @kind object;
  #L0808c6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0808cc.  throw v0;
  #L0808ce.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0808d0.  @monitorexit v2
  #Try_end0.  
  #L0808d2.  throw v0;
  #Try_start1.  
  #L0808d4.  @monitorexit v2
  #Try_end1.  
  #L0808d6.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L0808da.  return v0 @kind object;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0808ce;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0808ce;
}
procedure `void` `i`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.i:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L080900.  v0:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L080904.  if v0 != 0 then goto L080920;
  #L080908.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L08090e.  v0:= temp;
  #L080910.  if v0 == 0 then goto L080920;
  #L080914.  v0:= new `java.lang.AssertionError`;
  #L080918.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L08091e.  throw v0;
  #L080920.  @monitorenter v2
  #Try_start0.  
  #L080922.  v0:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L080926.  v1:= 1I;
  #L080928.  v0.`a.a.e.i$b.b` @type ^`boolean` := v1 @kind boolean;
  #L08092c.  call temp:= `b`(v2) @signature `La/a/e/i;.b:()Z` @kind virtual;
  #L080932.  v0:= temp;
  #L080934.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L08093a.  @monitorexit v2
  #Try_end0.  
  #L08093c.  if v0 != 0 then goto L08094e;
  #L080940.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L080944.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L080948.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L08094e.  return @kind void;
  #L080950.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L080952.  @monitorexit v2
  #Try_end1.  
  #L080954.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L080950;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L080950;
}
procedure `void` `j`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.j:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L08097c.  v0:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L080980.  if v0 != 0 then goto L08099c;
  #L080984.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L08098a.  v0:= temp;
  #L08098c.  if v0 == 0 then goto L08099c;
  #L080990.  v0:= new `java.lang.AssertionError`;
  #L080994.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L08099a.  throw v0;
  #L08099c.  @monitorenter v2
  #Try_start0.  
  #L08099e.  v0:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L0809a2.  v0:= v0.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L0809a6.  if v0 != 0 then goto L0809ea;
  #L0809aa.  v0:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L0809ae.  v0:= v0.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L0809b2.  if v0 == 0 then goto L0809ea;
  #L0809b6.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L0809ba.  v0:= v0.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L0809be.  if v0 != 0 then goto L0809ce;
  #L0809c2.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L0809c6.  v0:= v0.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L0809ca.  if v0 == 0 then goto L0809ea;
  #L0809ce.  v0:= 1I;
  #L0809d0.  call temp:= `b`(v2) @signature `La/a/e/i;.b:()Z` @kind virtual;
  #L0809d6.  v1:= temp;
  #L0809d8.  @monitorexit v2
  #Try_end0.  
  #L0809da.  if v0 == 0 then goto L0809f4;
  #L0809de.  v0:= `@@a.a.e.b.f` @type ^`a.a.e.b` @kind object;
  #L0809e2.  call `a`(v2, v0) @signature `La/a/e/i;.a:(La/a/e/b;)V` @kind virtual;
  #L0809e8.  return @kind void;
  #L0809ea.  v0:= 0I;
  #L0809ec.  goto L0809d0;
  #L0809ee.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L0809f0.  @monitorexit v2
  #Try_end1.  
  #L0809f2.  throw v0;
  #L0809f4.  if v1 != 0 then goto L0809e8;
  #L0809f8.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L0809fc.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L080a00.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L080a06.  goto L0809e8;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0809ee;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0809ee;
}
procedure `void` `k`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L080a2c.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L080a30.  v0:= v0.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L080a34.  if v0 == 0 then goto L080a48;
  #L080a38.  v0:= new `java.io.IOException`;
  #L080a3c.  v1:= "stream closed" @kind object;
  #L080a40.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080a46.  throw v0;
  #L080a48.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L080a4c.  v0:= v0.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L080a50.  if v0 == 0 then goto L080a64;
  #L080a54.  v0:= new `java.io.IOException`;
  #L080a58.  v1:= "stream finished" @kind object;
  #L080a5c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080a62.  throw v0;
  #L080a64.  v0:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L080a68.  if v0 == 0 then goto L080a7c;
  #L080a6c.  v0:= new `a.a.e.o`;
  #L080a70.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L080a74.  call `<init>`(v0, v1) @signature `La/a/e/o;.<init>:(La/a/e/b;)V` @kind direct;
  #L080a7a.  throw v0;
  #L080a7c.  return @kind void;
}
procedure `void` `l`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.l:()V` @AccessFlag  {
    temp;
    v0;

  #Try_start0.  
  #L080a90.  call `wait`(v1) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #Try_end0.  
  #L080a96.  return @kind void;
  #L080a98.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L080a9a.  v0:= new `java.io.InterruptedIOException`;
  #L080a9e.  call `<init>`(v0) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L080aa4.  throw v0;
  catch `java.lang.InterruptedException` @[Try_start0..Try_end0] goto L080a98;
}
