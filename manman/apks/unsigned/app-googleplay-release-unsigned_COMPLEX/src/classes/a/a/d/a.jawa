record `a.a.d.a` @kind class @AccessFlag PUBLIC_FINAL extends `a.a.c.c` @kind interface {
  `a.u` `a.a.d.a.a` @AccessFlag FINAL;
  `a.a.b.g` `a.a.d.a.b` @AccessFlag FINAL;
  `b.e` `a.a.d.a.c` @AccessFlag FINAL;
  `b.d` `a.a.d.a.d` @AccessFlag FINAL;
  `int` `a.a.d.a.e` @AccessFlag ;
}
procedure `void` `<init>`(`a.a.d.a` v1 @kind this, `a.u` v2 @kind object, `a.a.b.g` v3 @kind object, `b.e` v4 @kind object, `b.d` v5 @kind object) @signature `La/a/d/a;.<init>:(La/u;La/a/b/g;Lb/e;Lb/d;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L07a98c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07a992.  v0:= 0I;
  #L07a994.  v1.`a.a.d.a.e` @type ^`int` := v0;
  #L07a998.  v1.`a.a.d.a.a` @type ^`a.u` := v2 @kind object;
  #L07a99c.  v1.`a.a.d.a.b` @type ^`a.a.b.g` := v3 @kind object;
  #L07a9a0.  v1.`a.a.d.a.c` @type ^`b.e` := v4 @kind object;
  #L07a9a4.  v1.`a.a.d.a.d` @type ^`b.d` := v5 @kind object;
  #L07a9a8.  return @kind void;
}
procedure `b.r` `b`(`a.a.d.a` v4 @kind this, `a.z` v5 @kind object) @signature `La/a/d/a;.b:(La/z;)Lb/r;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07a9bc.  call temp:= `b`(v5) @signature `La/a/c/e;.b:(La/z;)Z` @kind static;
  #L07a9c2.  v0:= temp;
  #L07a9c4.  if v0 != 0 then goto L07a9d6;
  #L07a9c8.  v0:= 0L;
  #L07a9cc.  call temp:= `b`(v4, v0) @signature `La/a/d/a;.b:(J)Lb/r;` @kind virtual;
  #L07a9d2.  v0:= temp @kind object;
  #L07a9d4.  return v0 @kind object;
  #L07a9d6.  v0:= "chunked" @kind object;
  #L07a9da.  v1:= "Transfer-Encoding" @kind object;
  #L07a9de.  call temp:= `a`(v5, v1) @signature `La/z;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L07a9e4.  v1:= temp @kind object;
  #L07a9e6.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L07a9ec.  v0:= temp;
  #L07a9ee.  if v0 == 0 then goto L07aa0c;
  #L07a9f2.  call temp:= `a`(v5) @signature `La/z;.a:()La/x;` @kind virtual;
  #L07a9f8.  v0:= temp @kind object;
  #L07a9fa.  call temp:= `a`(v0) @signature `La/x;.a:()La/r;` @kind virtual;
  #L07aa00.  v0:= temp @kind object;
  #L07aa02.  call temp:= `a`(v4, v0) @signature `La/a/d/a;.a:(La/r;)Lb/r;` @kind virtual;
  #L07aa08.  v0:= temp @kind object;
  #L07aa0a.  goto L07a9d4;
  #L07aa0c.  call temp:= `a`(v5) @signature `La/a/c/e;.a:(La/z;)J` @kind static;
  #L07aa12.  v0:= temp @kind wide;
  #L07aa14.  v2:= -1L;
  #L07aa18.  v2:= lcmp(v0, v2);
  #L07aa1c.  if v2 == 0 then goto L07aa2a;
  #L07aa20.  call temp:= `b`(v4, v0) @signature `La/a/d/a;.b:(J)Lb/r;` @kind virtual;
  #L07aa26.  v0:= temp @kind object;
  #L07aa28.  goto L07a9d4;
  #L07aa2a.  call temp:= `e`(v4) @signature `La/a/d/a;.e:()Lb/r;` @kind virtual;
  #L07aa30.  v0:= temp @kind object;
  #L07aa32.  goto L07a9d4;
}
procedure `a.aa` `a`(`a.a.d.a` v3 @kind this, `a.z` v4 @kind object) @signature `La/a/d/a;.a:(La/z;)La/aa;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07aa44.  call temp:= `b`(v3, v4) @signature `La/a/d/a;.b:(La/z;)Lb/r;` @kind direct;
  #L07aa4a.  v0:= temp @kind object;
  #L07aa4c.  v1:= new `a.a.c.h`;
  #L07aa50.  call temp:= `e`(v4) @signature `La/z;.e:()La/q;` @kind virtual;
  #L07aa56.  v2:= temp @kind object;
  #L07aa58.  call temp:= `a`(v0) @signature `Lb/k;.a:(Lb/r;)Lb/e;` @kind static;
  #L07aa5e.  v0:= temp @kind object;
  #L07aa60.  call `<init>`(v1, v2, v0) @signature `La/a/c/h;.<init>:(La/q;Lb/e;)V` @kind direct;
  #L07aa66.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.a.d.a` v4 @kind this, `boolean` v5 ) @signature `La/a/d/a;.a:(Z)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07aa78.  v0:= v4.`a.a.d.a.e` @type ^`int`;
  #L07aa7c.  v1:= 1I;
  #L07aa7e.  if v0 == v1 then goto L07aac2;
  #L07aa82.  v0:= v4.`a.a.d.a.e` @type ^`int`;
  #L07aa86.  v1:= 3I;
  #L07aa88.  if v0 == v1 then goto L07aac2;
  #L07aa8c.  v0:= new `java.lang.IllegalStateException`;
  #L07aa90.  v1:= new `java.lang.StringBuilder`;
  #L07aa94.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07aa9a.  v2:= "state: " @kind object;
  #L07aa9e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07aaa4.  v1:= temp @kind object;
  #L07aaa6.  v2:= v4.`a.a.d.a.e` @type ^`int`;
  #L07aaaa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07aab0.  v1:= temp @kind object;
  #L07aab2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07aab8.  v1:= temp @kind object;
  #L07aaba.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07aac0.  throw v0;
  #Try_start0.  
  #L07aac2.  v0:= v4.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07aac6.  call temp:= `p`(v0) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #L07aacc.  v0:= temp @kind object;
  #L07aace.  call temp:= `a`(v0) @signature `La/a/c/k;.a:(Ljava/lang/String;)La/a/c/k;` @kind static;
  #L07aad4.  v1:= temp @kind object;
  #L07aad6.  v0:= new `a.z$a`;
  #L07aada.  call `<init>`(v0) @signature `La/z$a;.<init>:()V` @kind direct;
  #L07aae0.  v2:= v1.`a.a.c.k.a` @type ^`a.v` @kind object;
  #L07aae4.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(La/v;)La/z$a;` @kind virtual;
  #L07aaea.  v0:= temp @kind object;
  #L07aaec.  v2:= v1.`a.a.c.k.b` @type ^`int`;
  #L07aaf0.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(I)La/z$a;` @kind virtual;
  #L07aaf6.  v0:= temp @kind object;
  #L07aaf8.  v2:= v1.`a.a.c.k.c` @type ^`java.lang.String` @kind object;
  #L07aafc.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(Ljava/lang/String;)La/z$a;` @kind virtual;
  #L07ab02.  v0:= temp @kind object;
  #L07ab04.  call temp:= `c`(v4) @signature `La/a/d/a;.c:()La/q;` @kind virtual;
  #L07ab0a.  v2:= temp @kind object;
  #L07ab0c.  call temp:= `a`(v0, v2) @signature `La/z$a;.a:(La/q;)La/z$a;` @kind virtual;
  #L07ab12.  v0:= temp @kind object;
  #L07ab14.  if v5 == 0 then goto L07ab28;
  #L07ab18.  v1:= v1.`a.a.c.k.b` @type ^`int`;
  #L07ab1c.  v2:= 100I;
  #L07ab20.  if v1 != v2 then goto L07ab28;
  #L07ab24.  v0:= 0I;
  #L07ab26.  return v0 @kind object;
  #L07ab28.  v1:= 4I;
  #L07ab2a.  v4.`a.a.d.a.e` @type ^`int` := v1;
  #Try_end0.  
  #L07ab2e.  goto L07ab26;
  #L07ab30.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L07ab32.  v1:= new `java.io.IOException`;
  #L07ab36.  v2:= new `java.lang.StringBuilder`;
  #L07ab3a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07ab40.  v3:= "unexpected end of stream on " @kind object;
  #L07ab44.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07ab4a.  v2:= temp @kind object;
  #L07ab4c.  v3:= v4.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L07ab50.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07ab56.  v2:= temp @kind object;
  #L07ab58.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07ab5e.  v2:= temp @kind object;
  #L07ab60.  call `<init>`(v1, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07ab66.  call temp:= `initCause`(v1, v0) @signature `Ljava/io/IOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L07ab6c.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L07ab30;
}
procedure `b.q` `a`(`a.a.d.a` v3 @kind this, `long` v4 ) @signature `La/a/d/a;.a:(J)Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07ab90.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L07ab94.  v1:= 1I;
  #L07ab96.  if v0 == v1 then goto L07abd0;
  #L07ab9a.  v0:= new `java.lang.IllegalStateException`;
  #L07ab9e.  v1:= new `java.lang.StringBuilder`;
  #L07aba2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07aba8.  v2:= "state: " @kind object;
  #L07abac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07abb2.  v1:= temp @kind object;
  #L07abb4.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L07abb8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07abbe.  v1:= temp @kind object;
  #L07abc0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07abc6.  v1:= temp @kind object;
  #L07abc8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07abce.  throw v0;
  #L07abd0.  v0:= 2I;
  #L07abd2.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L07abd6.  v0:= new `a.a.d.a$d`;
  #L07abda.  call `<init>`(v0, v3, v4) @signature `La/a/d/a$d;.<init>:(La/a/d/a;J)V` @kind direct;
  #L07abe0.  return v0 @kind object;
}
procedure `b.q` `a`(`a.a.d.a` v2 @kind this, `a.x` v3 @kind object, `long` v4 ) @signature `La/a/d/a;.a:(La/x;J)Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07abf4.  v0:= "chunked" @kind object;
  #L07abf8.  v1:= "Transfer-Encoding" @kind object;
  #L07abfc.  call temp:= `a`(v3, v1) @signature `La/x;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L07ac02.  v1:= temp @kind object;
  #L07ac04.  call temp:= `equalsIgnoreCase`(v0, v1) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L07ac0a.  v0:= temp;
  #L07ac0c.  if v0 == 0 then goto L07ac1a;
  #L07ac10.  call temp:= `d`(v2) @signature `La/a/d/a;.d:()Lb/q;` @kind virtual;
  #L07ac16.  v0:= temp @kind object;
  #L07ac18.  return v0 @kind object;
  #L07ac1a.  v0:= -1L;
  #L07ac1e.  v0:= lcmp(v4, v0);
  #L07ac22.  if v0 == 0 then goto L07ac30;
  #L07ac26.  call temp:= `a`(v2, v4) @signature `La/a/d/a;.a:(J)Lb/q;` @kind virtual;
  #L07ac2c.  v0:= temp @kind object;
  #L07ac2e.  goto L07ac18;
  #L07ac30.  v0:= new `java.lang.IllegalStateException`;
  #L07ac34.  v1:= "Cannot stream a request body without chunked encoding or a known content length!" @kind object;
  #L07ac38.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07ac3e.  throw v0;
}
procedure `b.r` `a`(`a.a.d.a` v3 @kind this, `a.r` v4 @kind object) @signature `La/a/d/a;.a:(La/r;)Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07ac50.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L07ac54.  v1:= 4I;
  #L07ac56.  if v0 == v1 then goto L07ac90;
  #L07ac5a.  v0:= new `java.lang.IllegalStateException`;
  #L07ac5e.  v1:= new `java.lang.StringBuilder`;
  #L07ac62.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07ac68.  v2:= "state: " @kind object;
  #L07ac6c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07ac72.  v1:= temp @kind object;
  #L07ac74.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L07ac78.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07ac7e.  v1:= temp @kind object;
  #L07ac80.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07ac86.  v1:= temp @kind object;
  #L07ac88.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07ac8e.  throw v0;
  #L07ac90.  v0:= 5I;
  #L07ac92.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L07ac96.  v0:= new `a.a.d.a$c`;
  #L07ac9a.  call `<init>`(v0, v3, v4) @signature `La/a/d/a$c;.<init>:(La/a/d/a;La/r;)V` @kind direct;
  #L07aca0.  return v0 @kind object;
}
procedure `void` `a`(`a.a.d.a` v1 @kind this) @signature `La/a/d/a;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07acb4.  v0:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07acb8.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L07acbe.  return @kind void;
}
procedure `void` `a`(`a.a.d.a` v4 @kind this, `a.q` v5 @kind object, `java.lang.String` v6 @kind object) @signature `La/a/d/a;.a:(La/q;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07acd0.  v0:= v4.`a.a.d.a.e` @type ^`int`;
  #L07acd4.  if v0 == 0 then goto L07ad0e;
  #L07acd8.  v0:= new `java.lang.IllegalStateException`;
  #L07acdc.  v1:= new `java.lang.StringBuilder`;
  #L07ace0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07ace6.  v2:= "state: " @kind object;
  #L07acea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07acf0.  v1:= temp @kind object;
  #L07acf2.  v2:= v4.`a.a.d.a.e` @type ^`int`;
  #L07acf6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07acfc.  v1:= temp @kind object;
  #L07acfe.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07ad04.  v1:= temp @kind object;
  #L07ad06.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07ad0c.  throw v0;
  #L07ad0e.  v0:= v4.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07ad12.  call temp:= `b`(v0, v6) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07ad18.  v0:= temp @kind object;
  #L07ad1a.  v1:= "\r\n" @kind object;
  #L07ad1e.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07ad24.  v0:= 0I;
  #L07ad26.  call temp:= `a`(v5) @signature `La/q;.a:()I` @kind virtual;
  #L07ad2c.  v1:= temp;
  #L07ad2e.  if v0 >= v1 then goto L07ad72;
  #L07ad32.  v2:= v4.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07ad36.  call temp:= `a`(v5, v0) @signature `La/q;.a:(I)Ljava/lang/String;` @kind virtual;
  #L07ad3c.  v3:= temp @kind object;
  #L07ad3e.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07ad44.  v2:= temp @kind object;
  #L07ad46.  v3:= ": " @kind object;
  #L07ad4a.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07ad50.  v2:= temp @kind object;
  #L07ad52.  call temp:= `b`(v5, v0) @signature `La/q;.b:(I)Ljava/lang/String;` @kind virtual;
  #L07ad58.  v3:= temp @kind object;
  #L07ad5a.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07ad60.  v2:= temp @kind object;
  #L07ad62.  v3:= "\r\n" @kind object;
  #L07ad66.  call temp:= `b`(v2, v3) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07ad6c.  v0:= v0 + 1;
  #L07ad70.  goto L07ad2e;
  #L07ad72.  v0:= v4.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07ad76.  v1:= "\r\n" @kind object;
  #L07ad7a.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07ad80.  v0:= 1I;
  #L07ad82.  v4.`a.a.d.a.e` @type ^`int` := v0;
  #L07ad86.  return @kind void;
}
procedure `void` `a`(`a.a.d.a` v2 @kind this, `a.x` v3 @kind object) @signature `La/a/d/a;.a:(La/x;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07ad98.  v0:= v2.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L07ad9c.  call temp:= `b`(v0) @signature `La/a/b/g;.b:()La/a/b/c;` @kind virtual;
  #L07ada2.  v0:= temp @kind object;
  #L07ada4.  call temp:= `a`(v0) @signature `La/a/b/c;.a:()La/ab;` @kind virtual;
  #L07adaa.  v0:= temp @kind object;
  #L07adac.  call temp:= `b`(v0) @signature `La/ab;.b:()Ljava/net/Proxy;` @kind virtual;
  #L07adb2.  v0:= temp @kind object;
  #L07adb4.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L07adba.  v0:= temp @kind object;
  #L07adbc.  call temp:= `a`(v3, v0) @signature `La/a/c/i;.a:(La/x;Ljava/net/Proxy$Type;)Ljava/lang/String;` @kind static;
  #L07adc2.  v0:= temp @kind object;
  #L07adc4.  call temp:= `c`(v3) @signature `La/x;.c:()La/q;` @kind virtual;
  #L07adca.  v1:= temp @kind object;
  #L07adcc.  call `a`(v2, v1, v0) @signature `La/a/d/a;.a:(La/q;Ljava/lang/String;)V` @kind virtual;
  #L07add2.  return @kind void;
}
procedure `void` `a`(`a.a.d.a` v2 @kind this, `b.h` v3 @kind object) @signature `La/a/d/a;.a:(Lb/h;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L07ade4.  call temp:= `a`(v3) @signature `Lb/h;.a:()Lb/s;` @kind virtual;
  #L07adea.  v0:= temp @kind object;
  #L07adec.  v1:= `@@b.s.b` @type ^`b.s` @kind object;
  #L07adf0.  call temp:= `a`(v3, v1) @signature `Lb/h;.a:(Lb/s;)Lb/h;` @kind virtual;
  #L07adf6.  call temp:= `e_`(v0) @signature `Lb/s;.e_:()Lb/s;` @kind virtual;
  #L07adfc.  call temp:= `d_`(v0) @signature `Lb/s;.d_:()Lb/s;` @kind virtual;
  #L07ae02.  return @kind void;
}
procedure `b.r` `b`(`a.a.d.a` v3 @kind this, `long` v4 ) @signature `La/a/d/a;.b:(J)Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07ae14.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L07ae18.  v1:= 4I;
  #L07ae1a.  if v0 == v1 then goto L07ae54;
  #L07ae1e.  v0:= new `java.lang.IllegalStateException`;
  #L07ae22.  v1:= new `java.lang.StringBuilder`;
  #L07ae26.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07ae2c.  v2:= "state: " @kind object;
  #L07ae30.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07ae36.  v1:= temp @kind object;
  #L07ae38.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L07ae3c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07ae42.  v1:= temp @kind object;
  #L07ae44.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07ae4a.  v1:= temp @kind object;
  #L07ae4c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07ae52.  throw v0;
  #L07ae54.  v0:= 5I;
  #L07ae56.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L07ae5a.  v0:= new `a.a.d.a$e`;
  #L07ae5e.  call `<init>`(v0, v3, v4) @signature `La/a/d/a$e;.<init>:(La/a/d/a;J)V` @kind direct;
  #L07ae64.  return v0 @kind object;
}
procedure `void` `b`(`a.a.d.a` v1 @kind this) @signature `La/a/d/a;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07ae78.  v0:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07ae7c.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L07ae82.  return @kind void;
}
procedure `a.q` `c`(`a.a.d.a` v3 @kind this) @signature `La/a/d/a;.c:()La/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07ae94.  v0:= new `a.q$a`;
  #L07ae98.  call `<init>`(v0) @signature `La/q$a;.<init>:()V` @kind direct;
  #L07ae9e.  v1:= v3.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07aea2.  call temp:= `p`(v1) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #L07aea8.  v1:= temp @kind object;
  #L07aeaa.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L07aeb0.  v2:= temp;
  #L07aeb2.  if v2 == 0 then goto L07aec2;
  #L07aeb6.  v2:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L07aeba.  call `a`(v2, v0, v1) @signature `La/a/a;.a:(La/q$a;Ljava/lang/String;)V` @kind virtual;
  #L07aec0.  goto L07ae9e;
  #L07aec2.  call temp:= `a`(v0) @signature `La/q$a;.a:()La/q;` @kind virtual;
  #L07aec8.  v0:= temp @kind object;
  #L07aeca.  return v0 @kind object;
}
procedure `b.q` `d`(`a.a.d.a` v3 @kind this) @signature `La/a/d/a;.d:()Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07aedc.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L07aee0.  v1:= 1I;
  #L07aee2.  if v0 == v1 then goto L07af1c;
  #L07aee6.  v0:= new `java.lang.IllegalStateException`;
  #L07aeea.  v1:= new `java.lang.StringBuilder`;
  #L07aeee.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07aef4.  v2:= "state: " @kind object;
  #L07aef8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07aefe.  v1:= temp @kind object;
  #L07af00.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L07af04.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07af0a.  v1:= temp @kind object;
  #L07af0c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07af12.  v1:= temp @kind object;
  #L07af14.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07af1a.  throw v0;
  #L07af1c.  v0:= 2I;
  #L07af1e.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L07af22.  v0:= new `a.a.d.a$b`;
  #L07af26.  call `<init>`(v0, v3) @signature `La/a/d/a$b;.<init>:(La/a/d/a;)V` @kind direct;
  #L07af2c.  return v0 @kind object;
}
procedure `b.r` `e`(`a.a.d.a` v3 @kind this) @signature `La/a/d/a;.e:()Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L07af40.  v0:= v3.`a.a.d.a.e` @type ^`int`;
  #L07af44.  v1:= 4I;
  #L07af46.  if v0 == v1 then goto L07af80;
  #L07af4a.  v0:= new `java.lang.IllegalStateException`;
  #L07af4e.  v1:= new `java.lang.StringBuilder`;
  #L07af52.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07af58.  v2:= "state: " @kind object;
  #L07af5c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07af62.  v1:= temp @kind object;
  #L07af64.  v2:= v3.`a.a.d.a.e` @type ^`int`;
  #L07af68.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07af6e.  v1:= temp @kind object;
  #L07af70.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07af76.  v1:= temp @kind object;
  #L07af78.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07af7e.  throw v0;
  #L07af80.  v0:= v3.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L07af84.  if v0 != 0 then goto L07af98;
  #L07af88.  v0:= new `java.lang.IllegalStateException`;
  #L07af8c.  v1:= "streamAllocation == null" @kind object;
  #L07af90.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07af96.  throw v0;
  #L07af98.  v0:= 5I;
  #L07af9a.  v3.`a.a.d.a.e` @type ^`int` := v0;
  #L07af9e.  v0:= v3.`a.a.d.a.b` @type ^`a.a.b.g` @kind object;
  #L07afa2.  call `d`(v0) @signature `La/a/b/g;.d:()V` @kind virtual;
  #L07afa8.  v0:= new `a.a.d.a$f`;
  #L07afac.  call `<init>`(v0, v3) @signature `La/a/d/a$f;.<init>:(La/a/d/a;)V` @kind direct;
  #L07afb2.  return v0 @kind object;
}
