record `a.a.d.a$e` @kind class @AccessFlag  extends `a.a.d.a$a` @kind class {
  `a.a.d.a` `a.a.d.a$e.d` @AccessFlag FINAL_SYNTHETIC;
  `long` `a.a.d.a$e.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$e` v4 @kind this, `a.a.d.a` v5 @kind object, `long` v6 ) @signature `La/a/d/a$e;.<init>:(La/a/d/a;J)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07a734.  v4.`a.a.d.a$e.d` @type ^`a.a.d.a` := v5 @kind object;
  #L07a738.  v0:= 0I;
  #L07a73a.  call `<init>`(v4, v5, v0) @signature `La/a/d/a$a;.<init>:(La/a/d/a;La/a/d/a$1;)V` @kind direct;
  #L07a740.  v4.`a.a.d.a$e.e` @type ^`long` := v6 @kind wide;
  #L07a744.  v0:= v4.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07a748.  v2:= 0L;
  #L07a74c.  v0:= lcmp(v0, v2);
  #L07a750.  if v0 != 0 then goto L07a75c;
  #L07a754.  v0:= 1I;
  #L07a756.  call `a`(v4, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L07a75c.  return @kind void;
}
procedure `long` `a`(`a.a.d.a$e` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `La/a/d/a$e;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L07a770.  v0:= -1L;
  #L07a774.  v6:= 0L;
  #L07a778.  v2:= lcmp(v10, v6);
  #L07a77c.  if v2 >= 0 then goto L07a7b2;
  #L07a780.  v0:= new `java.lang.IllegalArgumentException`;
  #L07a784.  v1:= new `java.lang.StringBuilder`;
  #L07a788.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a78e.  v2:= "byteCount < 0: " @kind object;
  #L07a792.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a798.  v1:= temp @kind object;
  #L07a79a.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a7a0.  v1:= temp @kind object;
  #L07a7a2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a7a8.  v1:= temp @kind object;
  #L07a7aa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a7b0.  throw v0;
  #L07a7b2.  v2:= v8.`a.a.d.a$e.b` @type ^`boolean` @kind boolean;
  #L07a7b6.  if v2 == 0 then goto L07a7ca;
  #L07a7ba.  v0:= new `java.lang.IllegalStateException`;
  #L07a7be.  v1:= "closed" @kind object;
  #L07a7c2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a7c8.  throw v0;
  #L07a7ca.  v2:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07a7ce.  v2:= lcmp(v2, v6);
  #L07a7d2.  if v2 != 0 then goto L07a7d8;
  #L07a7d6.  return v0 @kind wide;
  #L07a7d8.  v2:= v8.`a.a.d.a$e.d` @type ^`a.a.d.a` @kind object;
  #L07a7dc.  v2:= v2.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07a7e0.  v4:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07a7e4.  call temp:= `min`(v4, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L07a7ea.  v4:= temp @kind wide;
  #L07a7ec.  call temp:= `a`(v2, v9, v4) @signature `Lb/e;.a:(Lb/c;J)J` @kind interface;
  #L07a7f2.  v2:= temp @kind wide;
  #L07a7f4.  v0:= lcmp(v2, v0);
  #L07a7f8.  if v0 != 0 then goto L07a814;
  #L07a7fc.  v0:= 0I;
  #L07a7fe.  call `a`(v8, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L07a804.  v0:= new `java.net.ProtocolException`;
  #L07a808.  v1:= "unexpected end of stream" @kind object;
  #L07a80c.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a812.  throw v0;
  #L07a814.  v0:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07a818.  v0:= v0 - v2 @kind long;
  #L07a81a.  v8.`a.a.d.a$e.e` @type ^`long` := v0 @kind wide;
  #L07a81e.  v0:= v8.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07a822.  v0:= lcmp(v0, v6);
  #L07a826.  if v0 != 0 then goto L07a832;
  #L07a82a.  v0:= 1I;
  #L07a82c.  call `a`(v8, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L07a832.  v0:= v2 @kind wide;
  #L07a834.  goto L07a7d6;
}
procedure `void` `close`(`a.a.d.a$e` v4 @kind this) @signature `La/a/d/a$e;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07a848.  v0:= v4.`a.a.d.a$e.b` @type ^`boolean` @kind boolean;
  #L07a84c.  if v0 == 0 then goto L07a852;
  #L07a850.  return @kind void;
  #L07a852.  v0:= v4.`a.a.d.a$e.e` @type ^`long` @kind wide;
  #L07a856.  v2:= 0L;
  #L07a85a.  v0:= lcmp(v0, v2);
  #L07a85e.  if v0 == 0 then goto L07a87e;
  #L07a862.  v0:= 100I;
  #L07a866.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L07a86a.  call temp:= `a`(v4, v0, v1) @signature `La/a/c;.a:(Lb/r;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L07a870.  v0:= temp;
  #L07a872.  if v0 != 0 then goto L07a87e;
  #L07a876.  v0:= 0I;
  #L07a878.  call `a`(v4, v0) @signature `La/a/d/a$e;.a:(Z)V` @kind virtual;
  #L07a87e.  v0:= 1I;
  #L07a880.  v4.`a.a.d.a$e.b` @type ^`boolean` := v0 @kind boolean;
  #L07a884.  goto L07a850;
}
