record `a.a.b.g` @kind class @AccessFlag PUBLIC_FINAL {
  `a.a` `a.a.b.g.a` @AccessFlag PUBLIC_FINAL;
  `a.ab` `a.a.b.g.c` @AccessFlag PRIVATE;
  `a.j` `a.a.b.g.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Object` `a.a.b.g.e` @AccessFlag PRIVATE_FINAL;
  `a.a.b.f` `a.a.b.g.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.b.g.g` @AccessFlag PRIVATE;
  `a.a.b.c` `a.a.b.g.h` @AccessFlag PRIVATE;
  `boolean` `a.a.b.g.i` @AccessFlag PRIVATE;
  `boolean` `a.a.b.g.j` @AccessFlag PRIVATE;
  `a.a.c.c` `a.a.b.g.k` @AccessFlag PRIVATE;
}
global `boolean` `@@a.a.b.g.b` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/b/g;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L077338.  v0:= constclass @type ^`a.a.b.g` @kind object;
  #L07733c.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L077342.  v0:= temp;
  #L077344.  if v0 != 0 then goto L077350;
  #L077348.  v0:= 1I;
  #L07734a.  `@@a.a.b.g.b` @type ^`boolean` := v0 @kind boolean;
  #L07734e.  return @kind void;
  #L077350.  v0:= 0I;
  #L077352.  goto L07734a;
}
procedure `void` `<init>`(`a.a.b.g` v2 @kind this, `a.j` v3 @kind object, `a.a` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `La/a/b/g;.<init>:(La/j;La/a;Ljava/lang/Object;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L077364.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07736a.  v2.`a.a.b.g.d` @type ^`a.j` := v3 @kind object;
  #L07736e.  v2.`a.a.b.g.a` @type ^`a.a` := v4 @kind object;
  #L077372.  v0:= new `a.a.b.f`;
  #L077376.  call temp:= `f`(v2) @signature `La/a/b/g;.f:()La/a/b/d;` @kind direct;
  #L07737c.  v1:= temp @kind object;
  #L07737e.  call `<init>`(v0, v4, v1) @signature `La/a/b/f;.<init>:(La/a;La/a/b/d;)V` @kind direct;
  #L077384.  v2.`a.a.b.g.f` @type ^`a.a.b.f` := v0 @kind object;
  #L077388.  v2.`a.a.b.g.e` @type ^`java.lang.Object` := v5 @kind object;
  #L07738c.  return @kind void;
}
procedure `a.a.b.c` `a`(`a.a.b.g` v6 @kind this, `int` v7 , `int` v8 , `int` v9 , `boolean` v10 ) @signature `La/a/b/g;.a:(IIIZ)La/a/b/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0773a0.  v1:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0773a4.  @monitorenter v1
  #Try_start0.  
  #L0773a6.  v0:= v6.`a.a.b.g.i` @type ^`boolean` @kind boolean;
  #L0773aa.  if v0 == 0 then goto L0773c4;
  #L0773ae.  v0:= new `java.lang.IllegalStateException`;
  #L0773b2.  v2:= "released" @kind object;
  #L0773b6.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0773bc.  throw v0;
  #L0773be.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0773c0.  @monitorexit v1
  #Try_end0.  
  #L0773c2.  throw v0;
  #Try_start1.  
  #L0773c4.  v0:= v6.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L0773c8.  if v0 == 0 then goto L0773dc;
  #L0773cc.  v0:= new `java.lang.IllegalStateException`;
  #L0773d0.  v2:= "codec != null" @kind object;
  #L0773d4.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0773da.  throw v0;
  #L0773dc.  v0:= v6.`a.a.b.g.j` @type ^`boolean` @kind boolean;
  #L0773e0.  if v0 == 0 then goto L0773f4;
  #L0773e4.  v0:= new `java.io.IOException`;
  #L0773e8.  v2:= "Canceled" @kind object;
  #L0773ec.  call `<init>`(v0, v2) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0773f2.  throw v0;
  #L0773f4.  v0:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0773f8.  if v0 == 0 then goto L077408;
  #L0773fc.  v2:= v0.`a.a.b.c.a` @type ^`boolean` @kind boolean;
  #L077400.  if v2 != 0 then goto L077408;
  #L077404.  @monitorexit v1
  #L077406.  return v0 @kind object;
  #L077408.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L07740c.  v2:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L077410.  v3:= v6.`a.a.b.g.a` @type ^`a.a` @kind object;
  #L077414.  call temp:= `a`(v0, v2, v3, v6) @signature `La/a/a;.a:(La/j;La/a;La/a/b/g;)La/a/b/c;` @kind virtual;
  #L07741a.  v0:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07741e.  if v0 == 0 then goto L07742a;
  #L077422.  v0:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L077426.  @monitorexit v1
  #L077428.  goto L077406;
  #L07742a.  v0:= v6.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L07742e.  @monitorexit v1
  #Try_end1.  
  #L077430.  if v0 != 0 then goto L077440;
  #L077434.  v0:= v6.`a.a.b.g.f` @type ^`a.a.b.f` @kind object;
  #L077438.  call temp:= `b`(v0) @signature `La/a/b/f;.b:()La/ab;` @kind virtual;
  #L07743e.  v0:= temp @kind object;
  #L077440.  v2:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L077444.  @monitorenter v2
  #Try_start2.  
  #L077446.  v6.`a.a.b.g.c` @type ^`a.ab` := v0 @kind object;
  #L07744a.  v1:= 0I;
  #L07744c.  v6.`a.a.b.g.g` @type ^`int` := v1;
  #L077450.  v1:= new `a.a.b.c`;
  #L077454.  v3:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L077458.  call `<init>`(v1, v3, v0) @signature `La/a/b/c;.<init>:(La/j;La/ab;)V` @kind direct;
  #L07745e.  call `a`(v6, v1) @signature `La/a/b/g;.a:(La/a/b/c;)V` @kind virtual;
  #L077464.  v0:= v6.`a.a.b.g.j` @type ^`boolean` @kind boolean;
  #L077468.  if v0 == 0 then goto L077482;
  #L07746c.  v0:= new `java.io.IOException`;
  #L077470.  v1:= "Canceled" @kind object;
  #L077474.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07747a.  throw v0;
  #L07747c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07747e.  @monitorexit v2
  #Try_end2.  
  #L077480.  throw v0;
  #Try_start3.  
  #L077482.  @monitorexit v2
  #Try_end3.  
  #L077484.  call `a`(v1, v7, v8, v9, v10) @signature `La/a/b/c;.a:(IIIZ)V` @kind virtual;
  #L07748a.  call temp:= `f`(v6) @signature `La/a/b/g;.f:()La/a/b/d;` @kind direct;
  #L077490.  v0:= temp @kind object;
  #L077492.  call temp:= `a`(v1) @signature `La/a/b/c;.a:()La/ab;` @kind virtual;
  #L077498.  v2:= temp @kind object;
  #L07749a.  call `b`(v0, v2) @signature `La/a/b/d;.b:(La/ab;)V` @kind virtual;
  #L0774a0.  v0:= 0I;
  #L0774a2.  v2:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0774a6.  @monitorenter v2
  #Try_start4.  
  #L0774a8.  v3:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L0774ac.  v4:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0774b0.  call `b`(v3, v4, v1) @signature `La/a/a;.b:(La/j;La/a/b/c;)V` @kind virtual;
  #L0774b6.  call temp:= `d`(v1) @signature `La/a/b/c;.d:()Z` @kind virtual;
  #L0774bc.  v3:= temp;
  #L0774be.  if v3 == 0 then goto L0774f0;
  #L0774c2.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L0774c6.  v1:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0774ca.  v3:= v6.`a.a.b.g.a` @type ^`a.a` @kind object;
  #L0774ce.  call temp:= `b`(v0, v1, v3, v6) @signature `La/a/a;.b:(La/j;La/a;La/a/b/g;)Ljava/net/Socket;` @kind virtual;
  #L0774d4.  v0:= temp @kind object;
  #L0774d6.  v1:= v6.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0774da.  v5:= v0 @kind object;
  #L0774dc.  v0:= v1 @kind object;
  #L0774de.  v1:= v5 @kind object;
  #L0774e0.  @monitorexit v2
  #Try_end4.  
  #L0774e2.  call `a`(v1) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L0774e8.  goto L077406;
  #L0774ea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start5.  
  #L0774ec.  @monitorexit v2
  #Try_end5.  
  #L0774ee.  throw v0;
  #L0774f0.  v5:= v0 @kind object;
  #L0774f2.  v0:= v1 @kind object;
  #L0774f4.  v1:= v5 @kind object;
  #L0774f6.  goto L0774e0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0773be;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0773be;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L07747c;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L07747c;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L0774ea;
  catch `java.lang.Throwable` @[Try_start5..Try_end5] goto L0774ea;
}
procedure `a.a.b.c` `a`(`a.a.b.g` v3 @kind this, `int` v4 , `int` v5 , `int` v6 , `boolean` v7 , `boolean` v8 ) @signature `La/a/b/g;.a:(IIIZZ)La/a/b/c;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L077540.  call temp:= `a`(v3, v4, v5, v6, v7) @signature `La/a/b/g;.a:(IIIZ)La/a/b/c;` @kind direct;
  #L077546.  v0:= temp @kind object;
  #L077548.  v1:= v3.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07754c.  @monitorenter v1
  #Try_start0.  
  #L07754e.  v2:= v0.`a.a.b.c.b` @type ^`int`;
  #L077552.  if v2 != 0 then goto L07755a;
  #L077556.  @monitorexit v1
  #L077558.  return v0 @kind object;
  #L07755a.  @monitorexit v1
  #Try_end0.  
  #L07755c.  call temp:= `a`(v0, v8) @signature `La/a/b/c;.a:(Z)Z` @kind virtual;
  #L077562.  v1:= temp;
  #L077564.  if v1 != 0 then goto L077558;
  #L077568.  call `d`(v3) @signature `La/a/b/g;.d:()V` @kind virtual;
  #L07756e.  goto L077540;
  #L077570.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L077572.  @monitorexit v1
  #Try_end1.  
  #L077574.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L077570;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L077570;
}
procedure `java.net.Socket` `a`(`a.a.b.g` v4 @kind this, `boolean` v5 , `boolean` v6 , `boolean` v7 ) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07759c.  v2:= 1I;
  #L07759e.  v1:= 0I;
  #L0775a0.  v0:= `@@a.a.b.g.b` @type ^`boolean` @kind boolean;
  #L0775a4.  if v0 != 0 then goto L0775c4;
  #L0775a8.  v0:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0775ac.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L0775b2.  v0:= temp;
  #L0775b4.  if v0 != 0 then goto L0775c4;
  #L0775b8.  v0:= new `java.lang.AssertionError`;
  #L0775bc.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0775c2.  throw v0;
  #L0775c4.  if v7 == 0 then goto L0775cc;
  #L0775c8.  v4.`a.a.b.g.k` @type ^`a.a.c.c` := v1 @kind object;
  #L0775cc.  if v6 == 0 then goto L0775d4;
  #L0775d0.  v4.`a.a.b.g.i` @type ^`boolean` := v2 @kind boolean;
  #L0775d4.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0775d8.  if v0 == 0 then goto L07765c;
  #L0775dc.  if v5 == 0 then goto L0775e8;
  #L0775e0.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0775e4.  v0.`a.a.b.c.a` @type ^`boolean` := v2 @kind boolean;
  #L0775e8.  v0:= v4.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L0775ec.  if v0 != 0 then goto L07765c;
  #L0775f0.  v0:= v4.`a.a.b.g.i` @type ^`boolean` @kind boolean;
  #L0775f4.  if v0 != 0 then goto L077604;
  #L0775f8.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0775fc.  v0:= v0.`a.a.b.c.a` @type ^`boolean` @kind boolean;
  #L077600.  if v0 == 0 then goto L07765c;
  #L077604.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L077608.  call `c`(v4, v0) @signature `La/a/b/g;.c:(La/a/b/c;)V` @kind direct;
  #L07760e.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L077612.  v0:= v0.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L077616.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L07761c.  v0:= temp;
  #L07761e.  if v0 == 0 then goto L07765e;
  #L077622.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L077626.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L07762c.  v2:= temp @kind wide;
  #L07762e.  v0.`a.a.b.c.e` @type ^`long` := v2 @kind wide;
  #L077632.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L077636.  v2:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L07763a.  v3:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07763e.  call temp:= `a`(v0, v2, v3) @signature `La/a/a;.a:(La/j;La/a/b/c;)Z` @kind virtual;
  #L077644.  v0:= temp;
  #L077646.  if v0 == 0 then goto L07765e;
  #L07764a.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07764e.  call temp:= `b`(v0) @signature `La/a/b/c;.b:()Ljava/net/Socket;` @kind virtual;
  #L077654.  v0:= temp @kind object;
  #L077656.  v4.`a.a.b.g.h` @type ^`a.a.b.c` := v1 @kind object;
  #L07765a.  v1:= v0 @kind object;
  #L07765c.  return v1 @kind object;
  #L07765e.  v0:= v1 @kind object;
  #L077660.  goto L077656;
}
procedure `void` `c`(`a.a.b.g` v3 @kind this, `a.a.b.c` v4 @kind object) @signature `La/a/b/g;.c:(La/a/b/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L077674.  v0:= 0I;
  #L077676.  v1:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L07767a.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L077680.  v2:= temp;
  #L077682.  v1:= v0;
  #L077684.  if v1 >= v2 then goto L0776b8;
  #L077688.  v0:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L07768c.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L077692.  v0:= temp @kind object;
  #L077694.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L077698.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L07769e.  v0:= temp @kind object;
  #L0776a0.  if v0 != v3 then goto L0776b0;
  #L0776a4.  v0:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L0776a8.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L0776ae.  return @kind void;
  #L0776b0.  v0:= v1 + 1;
  #L0776b4.  v1:= v0;
  #L0776b6.  goto L077684;
  #L0776b8.  v0:= new `java.lang.IllegalStateException`;
  #L0776bc.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L0776c2.  throw v0;
}
procedure `a.a.b.d` `f`(`a.a.b.g` v2 @kind this) @signature `La/a/b/g;.f:()La/a/b/d;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L0776d4.  v0:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L0776d8.  v1:= v2.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0776dc.  call temp:= `a`(v0, v1) @signature `La/a/a;.a:(La/j;)La/a/b/d;` @kind virtual;
  #L0776e2.  v0:= temp @kind object;
  #L0776e4.  return v0 @kind object;
}
procedure `a.a.c.c` `a`(`a.a.b.g` v2 @kind this) @signature `La/a/b/g;.a:()La/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0776f8.  v1:= v2.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0776fc.  @monitorenter v1
  #Try_start0.  
  #L0776fe.  v0:= v2.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L077702.  @monitorexit v1
  #L077704.  return v0 @kind object;
  #L077706.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L077708.  @monitorexit v1
  #Try_end0.  
  #L07770a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L077706;
}
procedure `a.a.c.c` `a`(`a.a.b.g` v6 @kind this, `a.u` v7 @kind object, `boolean` v8 ) @signature `La/a/b/g;.a:(La/u;Z)La/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L077728.  call temp:= `a`(v7) @signature `La/u;.a:()I` @kind virtual;
  #L07772e.  v1:= temp;
  #L077730.  call temp:= `b`(v7) @signature `La/u;.b:()I` @kind virtual;
  #L077736.  v2:= temp;
  #L077738.  call temp:= `c`(v7) @signature `La/u;.c:()I` @kind virtual;
  #L07773e.  v3:= temp;
  #L077740.  call temp:= `r`(v7) @signature `La/u;.r:()Z` @kind virtual;
  #L077746.  v4:= temp;
  #L077748.  v0:= v6 @kind object;
  #L07774a.  v5:= v8;
  #Try_start0.  
  #L07774c.  call temp:= `a`(v0, v1, v2, v3, v4, v5) @signature `La/a/b/g;.a:(IIIZZ)La/a/b/c;` @kind direct;
  #L077752.  v0:= temp @kind object;
  #L077754.  call temp:= `a`(v0, v7, v6) @signature `La/a/b/c;.a:(La/u;La/a/b/g;)La/a/c/c;` @kind virtual;
  #L07775a.  v0:= temp @kind object;
  #L07775c.  v1:= v6.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L077760.  @monitorenter v1
  #Try_end0.  
  #Try_start1.  
  #L077762.  v6.`a.a.b.g.k` @type ^`a.a.c.c` := v0 @kind object;
  #L077766.  @monitorexit v1
  #L077768.  return v0 @kind object;
  #L07776a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07776c.  @monitorexit v1
  #Try_end1.  
  #Try_start2.  
  #L07776e.  throw v0;
  #Try_end2.  
  #L077770.  v0:= Exception @type ^`java.io.IOException` @kind object;
  #L077772.  v1:= new `a.a.b.e`;
  #L077776.  call `<init>`(v1, v0) @signature `La/a/b/e;.<init>:(Ljava/io/IOException;)V` @kind direct;
  #L07777c.  throw v1;
  catch `java.io.IOException` @[Try_start0..Try_end0] goto L077770;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07776a;
  catch `java.io.IOException` @[Try_start2..Try_end2] goto L077770;
}
procedure `void` `a`(`a.a.b.g` v3 @kind this, `a.a.b.c` v4 @kind object) @signature `La/a/b/g;.a:(La/a/b/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0777b0.  v0:= `@@a.a.b.g.b` @type ^`boolean` @kind boolean;
  #L0777b4.  if v0 != 0 then goto L0777d4;
  #L0777b8.  v0:= v3.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0777bc.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L0777c2.  v0:= temp;
  #L0777c4.  if v0 != 0 then goto L0777d4;
  #L0777c8.  v0:= new `java.lang.AssertionError`;
  #L0777cc.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0777d2.  throw v0;
  #L0777d4.  v0:= v3.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L0777d8.  if v0 == 0 then goto L0777e8;
  #L0777dc.  v0:= new `java.lang.IllegalStateException`;
  #L0777e0.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L0777e6.  throw v0;
  #L0777e8.  v3.`a.a.b.g.h` @type ^`a.a.b.c` := v4 @kind object;
  #L0777ec.  v0:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L0777f0.  v1:= new `a.a.b.g$a`;
  #L0777f4.  v2:= v3.`a.a.b.g.e` @type ^`java.lang.Object` @kind object;
  #L0777f8.  call `<init>`(v1, v3, v2) @signature `La/a/b/g$a;.<init>:(La/a/b/g;Ljava/lang/Object;)V` @kind direct;
  #L0777fe.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L077804.  return @kind void;
}
procedure `void` `a`(`a.a.b.g` v5 @kind this, `java.io.IOException` v6 @kind object) @signature `La/a/b/g;.a:(Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L077818.  v0:= 0I;
  #L07781a.  v1:= 1I;
  #L07781c.  v2:= v5.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L077820.  @monitorenter v2
  #Try_start0.  
  #L077822.  v3:= instanceof @variable v6 @type ^`a.a.e.o` @kind boolean;
  #L077826.  if v3 == 0 then goto L077878;
  #L07782a.  v6:= (`a.a.e.o`) v6 @kind object;
  #L07782e.  v3:= v6.`a.a.e.o.a` @type ^`a.a.e.b` @kind object;
  #L077832.  v4:= `@@a.a.e.b.e` @type ^`a.a.e.b` @kind object;
  #L077836.  if v3 != v4 then goto L077846;
  #L07783a.  v3:= v5.`a.a.b.g.g` @type ^`int`;
  #L07783e.  v3:= v3 + 1;
  #L077842.  v5.`a.a.b.g.g` @type ^`int` := v3;
  #L077846.  v3:= v6.`a.a.e.o.a` @type ^`a.a.e.b` @kind object;
  #L07784a.  v4:= `@@a.a.e.b.e` @type ^`a.a.e.b` @kind object;
  #L07784e.  if v3 != v4 then goto L07785a;
  #L077852.  v3:= v5.`a.a.b.g.g` @type ^`int`;
  #L077856.  if v3 <= v1 then goto L077862;
  #L07785a.  v0:= 0I;
  #L07785c.  v5.`a.a.b.g.c` @type ^`a.ab` := v0 @kind object;
  #L077860.  v0:= v1;
  #L077862.  v1:= 0I;
  #L077864.  v3:= 1I;
  #L077866.  call temp:= `a`(v5, v0, v1, v3) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L07786c.  v0:= temp @kind object;
  #L07786e.  @monitorexit v2
  #Try_end0.  
  #L077870.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L077876.  return @kind void;
  #Try_start1.  
  #L077878.  v3:= v5.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07787c.  if v3 == 0 then goto L077862;
  #L077880.  v3:= v5.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L077884.  call temp:= `d`(v3) @signature `La/a/b/c;.d:()Z` @kind virtual;
  #L07788a.  v3:= temp;
  #L07788c.  if v3 == 0 then goto L077898;
  #L077890.  v3:= instanceof @variable v6 @type ^`a.a.e.a` @kind boolean;
  #L077894.  if v3 == 0 then goto L077862;
  #L077898.  v0:= v5.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07789c.  v0:= v0.`a.a.b.c.b` @type ^`int`;
  #L0778a0.  if v0 != 0 then goto L077860;
  #L0778a4.  v0:= v5.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L0778a8.  if v0 == 0 then goto L0778be;
  #L0778ac.  if v6 == 0 then goto L0778be;
  #L0778b0.  v0:= v5.`a.a.b.g.f` @type ^`a.a.b.f` @kind object;
  #L0778b4.  v3:= v5.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L0778b8.  call `a`(v0, v3, v6) @signature `La/a/b/f;.a:(La/ab;Ljava/io/IOException;)V` @kind virtual;
  #L0778be.  v0:= 0I;
  #L0778c0.  v5.`a.a.b.g.c` @type ^`a.ab` := v0 @kind object;
  #L0778c4.  goto L077860;
  #L0778c6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0778c8.  @monitorexit v2
  #Try_end1.  
  #L0778ca.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0778c6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0778c6;
}
procedure `void` `a`(`a.a.b.g` v4 @kind this, `boolean` v5 , `a.a.c.c` v6 @kind object) @signature `La/a/b/g;.a:(ZLa/a/c/c;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0778f0.  v1:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0778f4.  @monitorenter v1
  #L0778f6.  if v6 == 0 then goto L077902;
  #Try_start0.  
  #L0778fa.  v0:= v4.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L0778fe.  if v6 == v0 then goto L077952;
  #L077902.  v0:= new `java.lang.IllegalStateException`;
  #L077906.  v2:= new `java.lang.StringBuilder`;
  #L07790a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L077910.  v3:= "expected " @kind object;
  #L077914.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07791a.  v2:= temp @kind object;
  #L07791c.  v3:= v4.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L077920.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L077926.  v2:= temp @kind object;
  #L077928.  v3:= " but was " @kind object;
  #L07792c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L077932.  v2:= temp @kind object;
  #L077934.  call temp:= `append`(v2, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07793a.  v2:= temp @kind object;
  #L07793c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L077942.  v2:= temp @kind object;
  #L077944.  call `<init>`(v0, v2) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07794a.  throw v0;
  #L07794c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07794e.  @monitorexit v1
  #Try_end0.  
  #L077950.  throw v0;
  #L077952.  if v5 != 0 then goto L077966;
  #Try_start1.  
  #L077956.  v0:= v4.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L07795a.  v2:= v0.`a.a.b.c.b` @type ^`int`;
  #L07795e.  v2:= v2 + 1;
  #L077962.  v0.`a.a.b.c.b` @type ^`int` := v2;
  #L077966.  v0:= 0I;
  #L077968.  v2:= 1I;
  #L07796a.  call temp:= `a`(v4, v5, v0, v2) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L077970.  v0:= temp @kind object;
  #L077972.  @monitorexit v1
  #Try_end1.  
  #L077974.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L07797a.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07794c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07794c;
}
procedure `a.a.b.c` `b`(`a.a.b.g` v1 @kind this) @signature `La/a/b/g;.b:()La/a/b/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0779a0.  @monitorenter v1
  #Try_start0.  
  #L0779a2.  v0:= v1.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #Try_end0.  
  #L0779a6.  @monitorexit v1
  #L0779a8.  return v0 @kind object;
  #L0779aa.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0779ac.  @monitorexit v1
  #L0779ae.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0779aa;
}
procedure `java.net.Socket` `b`(`a.a.b.g` v3 @kind this, `a.a.b.c` v4 @kind object) @signature `La/a/b/g;.b:(La/a/b/c;)Ljava/net/Socket;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0779cc.  v2:= 1I;
  #L0779ce.  v1:= 0I;
  #L0779d0.  v0:= `@@a.a.b.g.b` @type ^`boolean` @kind boolean;
  #L0779d4.  if v0 != 0 then goto L0779f4;
  #L0779d8.  v0:= v3.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L0779dc.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L0779e2.  v0:= temp;
  #L0779e4.  if v0 != 0 then goto L0779f4;
  #L0779e8.  v0:= new `java.lang.AssertionError`;
  #L0779ec.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0779f2.  throw v0;
  #L0779f4.  v0:= v3.`a.a.b.g.k` @type ^`a.a.c.c` @kind object;
  #L0779f8.  if v0 != 0 then goto L077a10;
  #L0779fc.  v0:= v3.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L077a00.  v0:= v0.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L077a04.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L077a0a.  v0:= temp;
  #L077a0c.  if v0 == v2 then goto L077a1c;
  #L077a10.  v0:= new `java.lang.IllegalStateException`;
  #L077a14.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L077a1a.  throw v0;
  #L077a1c.  v0:= v3.`a.a.b.g.h` @type ^`a.a.b.c` @kind object;
  #L077a20.  v0:= v0.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L077a24.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L077a2a.  v0:= temp @kind object;
  #L077a2c.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L077a30.  call temp:= `a`(v3, v2, v1, v1) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L077a36.  v1:= temp @kind object;
  #L077a38.  v3.`a.a.b.g.h` @type ^`a.a.b.c` := v4 @kind object;
  #L077a3c.  v2:= v4.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L077a40.  call temp:= `add`(v2, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L077a46.  return v1 @kind object;
}
procedure `void` `c`(`a.a.b.g` v4 @kind this) @signature `La/a/b/g;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L077a58.  v1:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L077a5c.  @monitorenter v1
  #L077a5e.  v0:= 0I;
  #L077a60.  v2:= 1I;
  #L077a62.  v3:= 0I;
  #Try_start0.  
  #L077a64.  call temp:= `a`(v4, v0, v2, v3) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L077a6a.  v0:= temp @kind object;
  #L077a6c.  @monitorexit v1
  #Try_end0.  
  #L077a6e.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L077a74.  return @kind void;
  #L077a76.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L077a78.  @monitorexit v1
  #Try_end1.  
  #L077a7a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L077a76;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L077a76;
}
procedure `void` `d`(`a.a.b.g` v4 @kind this) @signature `La/a/b/g;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L077aa0.  v1:= v4.`a.a.b.g.d` @type ^`a.j` @kind object;
  #L077aa4.  @monitorenter v1
  #L077aa6.  v0:= 1I;
  #L077aa8.  v2:= 0I;
  #L077aaa.  v3:= 0I;
  #Try_start0.  
  #L077aac.  call temp:= `a`(v4, v0, v2, v3) @signature `La/a/b/g;.a:(ZZZ)Ljava/net/Socket;` @kind direct;
  #L077ab2.  v0:= temp @kind object;
  #L077ab4.  @monitorexit v1
  #Try_end0.  
  #L077ab6.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L077abc.  return @kind void;
  #L077abe.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L077ac0.  @monitorexit v1
  #Try_end1.  
  #L077ac2.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L077abe;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L077abe;
}
procedure `boolean` `e`(`a.a.b.g` v1 @kind this) @signature `La/a/b/g;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L077ae8.  v0:= v1.`a.a.b.g.c` @type ^`a.ab` @kind object;
  #L077aec.  if v0 != 0 then goto L077b00;
  #L077af0.  v0:= v1.`a.a.b.g.f` @type ^`a.a.b.f` @kind object;
  #L077af4.  call temp:= `a`(v0) @signature `La/a/b/f;.a:()Z` @kind virtual;
  #L077afa.  v0:= temp;
  #L077afc.  if v0 == 0 then goto L077b04;
  #L077b00.  v0:= 1I;
  #L077b02.  return v0;
  #L077b04.  v0:= 0I;
  #L077b06.  goto L077b02;
}
procedure `java.lang.String` `toString`(`a.a.b.g` v1 @kind this) @signature `La/a/b/g;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L077b18.  call temp:= `b`(v1) @signature `La/a/b/g;.b:()La/a/b/c;` @kind virtual;
  #L077b1e.  v0:= temp @kind object;
  #L077b20.  if v0 == 0 then goto L077b2e;
  #L077b24.  call temp:= `toString`(v0) @signature `La/a/b/c;.toString:()Ljava/lang/String;` @kind virtual;
  #L077b2a.  v0:= temp @kind object;
  #L077b2c.  return v0 @kind object;
  #L077b2e.  v0:= v1.`a.a.b.g.a` @type ^`a.a` @kind object;
  #L077b32.  call temp:= `toString`(v0) @signature `La/a;.toString:()Ljava/lang/String;` @kind virtual;
  #L077b38.  v0:= temp @kind object;
  #L077b3a.  goto L077b2c;
}
