record `a.a.c.g` @kind class @AccessFlag PUBLIC_FINAL extends `a.s$a` @kind interface {
  `java.util.List` `a.a.c.g.a` @AccessFlag PRIVATE_FINAL;
  `a.a.b.g` `a.a.c.g.b` @AccessFlag PRIVATE_FINAL;
  `a.a.c.c` `a.a.c.g.c` @AccessFlag PRIVATE_FINAL;
  `a.i` `a.a.c.g.d` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.c.g.e` @AccessFlag PRIVATE_FINAL;
  `a.x` `a.a.c.g.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.c.g.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.c.g` v0 @kind this, `java.util.List` v1 @kind object, `a.a.b.g` v2 @kind object, `a.a.c.c` v3 @kind object, `a.i` v4 @kind object, `int` v5 , `a.x` v6 @kind object) @signature `La/a/c/g;.<init>:(Ljava/util/List;La/a/b/g;La/a/c/c;La/i;ILa/x;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L078788.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07878e.  v0.`a.a.c.g.a` @type ^`java.util.List` := v1 @kind object;
  #L078792.  v0.`a.a.c.g.d` @type ^`a.i` := v4 @kind object;
  #L078796.  v0.`a.a.c.g.b` @type ^`a.a.b.g` := v2 @kind object;
  #L07879a.  v0.`a.a.c.g.c` @type ^`a.a.c.c` := v3 @kind object;
  #L07879e.  v0.`a.a.c.g.e` @type ^`int` := v5;
  #L0787a2.  v0.`a.a.c.g.f` @type ^`a.x` := v6 @kind object;
  #L0787a6.  return @kind void;
}
procedure `boolean` `a`(`a.a.c.g` v2 @kind this, `a.r` v3 @kind object) @signature `La/a/c/g;.a:(La/r;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L0787b8.  call temp:= `f`(v3) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L0787be.  v0:= temp @kind object;
  #L0787c0.  v1:= v2.`a.a.c.g.d` @type ^`a.i` @kind object;
  #L0787c4.  call temp:= `a`(v1) @signature `La/i;.a:()La/ab;` @kind interface;
  #L0787ca.  v1:= temp @kind object;
  #L0787cc.  call temp:= `a`(v1) @signature `La/ab;.a:()La/a;` @kind virtual;
  #L0787d2.  v1:= temp @kind object;
  #L0787d4.  call temp:= `a`(v1) @signature `La/a;.a:()La/r;` @kind virtual;
  #L0787da.  v1:= temp @kind object;
  #L0787dc.  call temp:= `f`(v1) @signature `La/r;.f:()Ljava/lang/String;` @kind virtual;
  #L0787e2.  v1:= temp @kind object;
  #L0787e4.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L0787ea.  v0:= temp;
  #L0787ec.  if v0 == 0 then goto L078824;
  #L0787f0.  call temp:= `g`(v3) @signature `La/r;.g:()I` @kind virtual;
  #L0787f6.  v0:= temp;
  #L0787f8.  v1:= v2.`a.a.c.g.d` @type ^`a.i` @kind object;
  #L0787fc.  call temp:= `a`(v1) @signature `La/i;.a:()La/ab;` @kind interface;
  #L078802.  v1:= temp @kind object;
  #L078804.  call temp:= `a`(v1) @signature `La/ab;.a:()La/a;` @kind virtual;
  #L07880a.  v1:= temp @kind object;
  #L07880c.  call temp:= `a`(v1) @signature `La/a;.a:()La/r;` @kind virtual;
  #L078812.  v1:= temp @kind object;
  #L078814.  call temp:= `g`(v1) @signature `La/r;.g:()I` @kind virtual;
  #L07881a.  v1:= temp;
  #L07881c.  if v0 != v1 then goto L078824;
  #L078820.  v0:= 1I;
  #L078822.  return v0;
  #L078824.  v0:= 0I;
  #L078826.  goto L078822;
}
procedure `a.x` `a`(`a.a.c.g` v1 @kind this) @signature `La/a/c/g;.a:()La/x;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L078838.  v0:= v1.`a.a.c.g.f` @type ^`a.x` @kind object;
  #L07883c.  return v0 @kind object;
}
procedure `a.z` `a`(`a.a.c.g` v3 @kind this, `a.x` v4 @kind object) @signature `La/a/c/g;.a:(La/x;)La/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L078850.  v0:= v3.`a.a.c.g.b` @type ^`a.a.b.g` @kind object;
  #L078854.  v1:= v3.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L078858.  v2:= v3.`a.a.c.g.d` @type ^`a.i` @kind object;
  #L07885c.  call temp:= `a`(v3, v4, v0, v1, v2) @signature `La/a/c/g;.a:(La/x;La/a/b/g;La/a/c/c;La/i;)La/z;` @kind virtual;
  #L078862.  v0:= temp @kind object;
  #L078864.  return v0 @kind object;
}
procedure `a.z` `a`(`a.a.c.g` v8 @kind this, `a.x` v9 @kind object, `a.a.b.g` v10 @kind object, `a.a.c.c` v11 @kind object, `a.i` v12 @kind object) @signature `La/a/c/g;.a:(La/x;La/a/b/g;La/a/c/c;La/i;)La/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L078878.  v7:= 1I;
  #L07887a.  v0:= v8.`a.a.c.g.e` @type ^`int`;
  #L07887e.  v1:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L078882.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L078888.  v1:= temp;
  #L07888a.  if v0 < v1 then goto L07889a;
  #L07888e.  v0:= new `java.lang.AssertionError`;
  #L078892.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L078898.  throw v0;
  #L07889a.  v0:= v8.`a.a.c.g.g` @type ^`int`;
  #L07889e.  v0:= v0 + 1;
  #L0788a2.  v8.`a.a.c.g.g` @type ^`int` := v0;
  #L0788a6.  v0:= v8.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L0788aa.  if v0 == 0 then goto L078914;
  #L0788ae.  call temp:= `a`(v9) @signature `La/x;.a:()La/r;` @kind virtual;
  #L0788b4.  v0:= temp @kind object;
  #L0788b6.  call temp:= `a`(v8, v0) @signature `La/a/c/g;.a:(La/r;)Z` @kind direct;
  #L0788bc.  v0:= temp;
  #L0788be.  if v0 != 0 then goto L078914;
  #L0788c2.  v0:= new `java.lang.IllegalStateException`;
  #L0788c6.  v1:= new `java.lang.StringBuilder`;
  #L0788ca.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0788d0.  v2:= "network interceptor " @kind object;
  #L0788d4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0788da.  v1:= temp @kind object;
  #L0788dc.  v2:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L0788e0.  v3:= v8.`a.a.c.g.e` @type ^`int`;
  #L0788e4.  v3:= v3 + -1;
  #L0788e8.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L0788ee.  v2:= temp @kind object;
  #L0788f0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0788f6.  v1:= temp @kind object;
  #L0788f8.  v2:= " must retain the same host and port" @kind object;
  #L0788fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L078902.  v1:= temp @kind object;
  #L078904.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07890a.  v1:= temp @kind object;
  #L07890c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L078912.  throw v0;
  #L078914.  v0:= v8.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L078918.  if v0 == 0 then goto L078976;
  #L07891c.  v0:= v8.`a.a.c.g.g` @type ^`int`;
  #L078920.  if v0 <= v7 then goto L078976;
  #L078924.  v0:= new `java.lang.IllegalStateException`;
  #L078928.  v1:= new `java.lang.StringBuilder`;
  #L07892c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L078932.  v2:= "network interceptor " @kind object;
  #L078936.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07893c.  v1:= temp @kind object;
  #L07893e.  v2:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L078942.  v3:= v8.`a.a.c.g.e` @type ^`int`;
  #L078946.  v3:= v3 + -1;
  #L07894a.  call temp:= `get`(v2, v3) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L078950.  v2:= temp @kind object;
  #L078952.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L078958.  v1:= temp @kind object;
  #L07895a.  v2:= " must call proceed() exactly once" @kind object;
  #L07895e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L078964.  v1:= temp @kind object;
  #L078966.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07896c.  v1:= temp @kind object;
  #L07896e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L078974.  throw v0;
  #L078976.  v0:= new `a.a.c.g`;
  #L07897a.  v1:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L07897e.  v2:= v8.`a.a.c.g.e` @type ^`int`;
  #L078982.  v5:= v2 + 1;
  #L078986.  v2:= v10 @kind object;
  #L078988.  v3:= v11 @kind object;
  #L07898a.  v4:= v12 @kind object;
  #L07898c.  v6:= v9 @kind object;
  #L07898e.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `La/a/c/g;.<init>:(Ljava/util/List;La/a/b/g;La/a/c/c;La/i;ILa/x;)V` @kind direct;
  #L078994.  v1:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L078998.  v2:= v8.`a.a.c.g.e` @type ^`int`;
  #L07899c.  call temp:= `get`(v1, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L0789a2.  v1:= temp @kind object;
  #L0789a4.  v1:= (`a.s`) v1 @kind object;
  #L0789a8.  call temp:= `a`(v1, v0) @signature `La/s;.a:(La/s$a;)La/z;` @kind interface;
  #L0789ae.  v2:= temp @kind object;
  #L0789b0.  if v11 == 0 then goto L078a12;
  #L0789b4.  v3:= v8.`a.a.c.g.e` @type ^`int`;
  #L0789b8.  v3:= v3 + 1;
  #L0789bc.  v4:= v8.`a.a.c.g.a` @type ^`java.util.List` @kind object;
  #L0789c0.  call temp:= `size`(v4) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L0789c6.  v4:= temp;
  #L0789c8.  if v3 >= v4 then goto L078a12;
  #L0789cc.  v0:= v0.`a.a.c.g.g` @type ^`int`;
  #L0789d0.  if v0 == v7 then goto L078a12;
  #L0789d4.  v0:= new `java.lang.IllegalStateException`;
  #L0789d8.  v2:= new `java.lang.StringBuilder`;
  #L0789dc.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0789e2.  v3:= "network interceptor " @kind object;
  #L0789e6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0789ec.  v2:= temp @kind object;
  #L0789ee.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0789f4.  v1:= temp @kind object;
  #L0789f6.  v2:= " must call proceed() exactly once" @kind object;
  #L0789fa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L078a00.  v1:= temp @kind object;
  #L078a02.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L078a08.  v1:= temp @kind object;
  #L078a0a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L078a10.  throw v0;
  #L078a12.  if v2 != 0 then goto L078a54;
  #L078a16.  v0:= new `java.lang.NullPointerException`;
  #L078a1a.  v2:= new `java.lang.StringBuilder`;
  #L078a1e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L078a24.  v3:= "interceptor " @kind object;
  #L078a28.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L078a2e.  v2:= temp @kind object;
  #L078a30.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L078a36.  v1:= temp @kind object;
  #L078a38.  v2:= " returned null" @kind object;
  #L078a3c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L078a42.  v1:= temp @kind object;
  #L078a44.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L078a4a.  v1:= temp @kind object;
  #L078a4c.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L078a52.  throw v0;
  #L078a54.  return v2 @kind object;
}
procedure `a.a.b.g` `b`(`a.a.c.g` v1 @kind this) @signature `La/a/c/g;.b:()La/a/b/g;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L078a68.  v0:= v1.`a.a.c.g.b` @type ^`a.a.b.g` @kind object;
  #L078a6c.  return v0 @kind object;
}
procedure `a.a.c.c` `c`(`a.a.c.g` v1 @kind this) @signature `La/a/c/g;.c:()La/a/c/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L078a80.  v0:= v1.`a.a.c.g.c` @type ^`a.a.c.c` @kind object;
  #L078a84.  return v0 @kind object;
}
