record `a.a.b.e` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.RuntimeException` @kind class {
  `java.io.IOException` `a.a.b.e.b` @AccessFlag PRIVATE;
}
global `java.lang.reflect.Method` `@@a.a.b.e.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/a/b/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #Try_start0.  
  #L076c58.  v0:= constclass @type ^`java.lang.Throwable` @kind object;
  #L076c5c.  v1:= "addSuppressed" @kind object;
  #L076c60.  v2:= 1I;
  #L076c62.  v2:= new `java.lang.Class`[v2];
  #L076c66.  v3:= 0I;
  #L076c68.  v4:= constclass @type ^`java.lang.Throwable` @kind object;
  #L076c6c.  v2[v3]:= v4 @kind object;
  #L076c70.  call temp:= `getDeclaredMethod`(v0, v1, v2) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #Try_end0.  
  #L076c76.  v0:= temp @kind object;
  #L076c78.  `@@a.a.b.e.a` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L076c7c.  return @kind void;
  #L076c7e.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L076c80.  v0:= 0I;
  #L076c82.  goto L076c78;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L076c7e;
}
procedure `void` `<init>`(`a.a.b.e` v0 @kind this, `java.io.IOException` v1 @kind object) @signature `La/a/b/e;.<init>:(Ljava/io/IOException;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L076ca4.  call `<init>`(v0, v1) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L076caa.  v0.`a.a.b.e.b` @type ^`java.io.IOException` := v1 @kind object;
  #L076cae.  return @kind void;
}
procedure `void` `a`(`a.a.b.e` v3 @kind this, `java.io.IOException` v4 @kind object, `java.io.IOException` v5 @kind object) @signature `La/a/b/e;.a:(Ljava/io/IOException;Ljava/io/IOException;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L076cc0.  v0:= `@@a.a.b.e.a` @type ^`java.lang.reflect.Method` @kind object;
  #L076cc4.  if v0 == 0 then goto L076cde;
  #Try_start0.  
  #L076cc8.  v0:= `@@a.a.b.e.a` @type ^`java.lang.reflect.Method` @kind object;
  #L076ccc.  v1:= 1I;
  #L076cce.  v1:= new `java.lang.Object`[v1];
  #L076cd2.  v2:= 0I;
  #L076cd4.  v1[v2]:= v5 @kind object;
  #L076cd8.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L076cde.  return @kind void;
  #L076ce0.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L076ce2.  goto L076cde;
  #L076ce4.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L076ce6.  goto L076cde;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L076ce4;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L076ce0;
}
procedure `java.io.IOException` `a`(`a.a.b.e` v1 @kind this) @signature `La/a/b/e;.a:()Ljava/io/IOException;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L076d08.  v0:= v1.`a.a.b.e.b` @type ^`java.io.IOException` @kind object;
  #L076d0c.  return v0 @kind object;
}
procedure `void` `a`(`a.a.b.e` v1 @kind this, `java.io.IOException` v2 @kind object) @signature `La/a/b/e;.a:(Ljava/io/IOException;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L076d20.  v0:= v1.`a.a.b.e.b` @type ^`java.io.IOException` @kind object;
  #L076d24.  call `a`(v1, v2, v0) @signature `La/a/b/e;.a:(Ljava/io/IOException;Ljava/io/IOException;)V` @kind direct;
  #L076d2a.  v1.`a.a.b.e.b` @type ^`java.io.IOException` := v2 @kind object;
  #L076d2e.  return @kind void;
}
