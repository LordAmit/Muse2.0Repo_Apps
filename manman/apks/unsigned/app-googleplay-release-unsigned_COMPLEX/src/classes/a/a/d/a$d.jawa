record `a.a.d.a$d` @kind class @AccessFlag FINAL extends `b.q` @kind interface {
  `a.a.d.a` `a.a.d.a$d.a` @AccessFlag FINAL_SYNTHETIC;
  `b.h` `a.a.d.a$d.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.a.d.a$d.c` @AccessFlag PRIVATE;
  `long` `a.a.d.a$d.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$d` v2 @kind this, `a.a.d.a` v3 @kind object, `long` v4 ) @signature `La/a/d/a$d;.<init>:(La/a/d/a;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07a5a8.  v2.`a.a.d.a$d.a` @type ^`a.a.d.a` := v3 @kind object;
  #L07a5ac.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07a5b2.  v0:= new `b.h`;
  #L07a5b6.  v1:= v2.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L07a5ba.  v1:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07a5be.  call temp:= `a`(v1) @signature `Lb/d;.a:()Lb/s;` @kind interface;
  #L07a5c4.  v1:= temp @kind object;
  #L07a5c6.  call `<init>`(v0, v1) @signature `Lb/h;.<init>:(Lb/s;)V` @kind direct;
  #L07a5cc.  v2.`a.a.d.a$d.b` @type ^`b.h` := v0 @kind object;
  #L07a5d0.  v2.`a.a.d.a$d.d` @type ^`long` := v4 @kind wide;
  #L07a5d4.  return @kind void;
}
procedure `b.s` `a`(`a.a.d.a$d` v1 @kind this) @signature `La/a/d/a$d;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07a5e8.  v0:= v1.`a.a.d.a$d.b` @type ^`b.h` @kind object;
  #L07a5ec.  return v0 @kind object;
}
procedure `void` `a_`(`a.a.d.a$d` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `La/a/d/a$d;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07a600.  v0:= v6.`a.a.d.a$d.c` @type ^`boolean` @kind boolean;
  #L07a604.  if v0 == 0 then goto L07a618;
  #L07a608.  v0:= new `java.lang.IllegalStateException`;
  #L07a60c.  v1:= "closed" @kind object;
  #L07a610.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a616.  throw v0;
  #L07a618.  call temp:= `b`(v7) @signature `Lb/c;.b:()J` @kind virtual;
  #L07a61e.  v0:= temp @kind wide;
  #L07a620.  v2:= 0L;
  #L07a624.  v4:= v8 @kind wide;
  #L07a626.  call `a`(v0, v2, v4) @signature `La/a/c;.a:(JJJ)V` @kind static;
  #L07a62c.  v0:= v6.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L07a630.  v0:= lcmp(v8, v0);
  #L07a634.  if v0 <= 0 then goto L07a682;
  #L07a638.  v0:= new `java.net.ProtocolException`;
  #L07a63c.  v1:= new `java.lang.StringBuilder`;
  #L07a640.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a646.  v2:= "expected " @kind object;
  #L07a64a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a650.  v1:= temp @kind object;
  #L07a652.  v2:= v6.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L07a656.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a65c.  v1:= temp @kind object;
  #L07a65e.  v2:= " bytes but received " @kind object;
  #L07a662.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a668.  v1:= temp @kind object;
  #L07a66a.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a670.  v1:= temp @kind object;
  #L07a672.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a678.  v1:= temp @kind object;
  #L07a67a.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a680.  throw v0;
  #L07a682.  v0:= v6.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L07a686.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07a68a.  call `a_`(v0, v7, v8) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L07a690.  v0:= v6.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L07a694.  v0:= v0 - v8 @kind long;
  #L07a696.  v6.`a.a.d.a$d.d` @type ^`long` := v0 @kind wide;
  #L07a69a.  return @kind void;
}
procedure `void` `close`(`a.a.d.a$d` v4 @kind this) @signature `La/a/d/a$d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07a6ac.  v0:= v4.`a.a.d.a$d.c` @type ^`boolean` @kind boolean;
  #L07a6b0.  if v0 == 0 then goto L07a6b6;
  #L07a6b4.  return @kind void;
  #L07a6b6.  v0:= 1I;
  #L07a6b8.  v4.`a.a.d.a$d.c` @type ^`boolean` := v0 @kind boolean;
  #L07a6bc.  v0:= v4.`a.a.d.a$d.d` @type ^`long` @kind wide;
  #L07a6c0.  v2:= 0L;
  #L07a6c4.  v0:= lcmp(v0, v2);
  #L07a6c8.  if v0 <= 0 then goto L07a6dc;
  #L07a6cc.  v0:= new `java.net.ProtocolException`;
  #L07a6d0.  v1:= "unexpected end of stream" @kind object;
  #L07a6d4.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a6da.  throw v0;
  #L07a6dc.  v0:= v4.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L07a6e0.  v1:= v4.`a.a.d.a$d.b` @type ^`b.h` @kind object;
  #L07a6e4.  call `a`(v0, v1) @signature `La/a/d/a;.a:(Lb/h;)V` @kind virtual;
  #L07a6ea.  v0:= v4.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L07a6ee.  v1:= 3I;
  #L07a6f0.  v0.`a.a.d.a.e` @type ^`int` := v1;
  #L07a6f4.  goto L07a6b4;
}
procedure `void` `flush`(`a.a.d.a$d` v1 @kind this) @signature `La/a/d/a$d;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07a708.  v0:= v1.`a.a.d.a$d.c` @type ^`boolean` @kind boolean;
  #L07a70c.  if v0 == 0 then goto L07a712;
  #L07a710.  return @kind void;
  #L07a712.  v0:= v1.`a.a.d.a$d.a` @type ^`a.a.d.a` @kind object;
  #L07a716.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07a71a.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L07a720.  goto L07a710;
}
