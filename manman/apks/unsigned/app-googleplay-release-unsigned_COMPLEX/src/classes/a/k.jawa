record `a.k` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `a.k.d` @AccessFlag FINAL;
  `boolean` `a.k.e` @AccessFlag FINAL;
  `java.lang.String`[] `a.k.f` @AccessFlag FINAL;
  `java.lang.String`[] `a.k.g` @AccessFlag FINAL;
}
global `a.k` `@@a.k.a` @AccessFlag PUBLIC_STATIC_FINAL;
global `a.k` `@@a.k.b` @AccessFlag PUBLIC_STATIC_FINAL;
global `a.k` `@@a.k.c` @AccessFlag PUBLIC_STATIC_FINAL;
global `a.h`[] `@@a.k.h` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L0871a4.  v7:= 4I;
  #L0871a6.  v6:= 3I;
  #L0871a8.  v5:= 2I;
  #L0871aa.  v4:= 0I;
  #L0871ac.  v3:= 1I;
  #L0871ae.  v0:= 15I;
  #L0871b2.  v0:= new `a.h`[v0];
  #L0871b6.  v1:= `@@a.h.aW` @type ^`a.h` @kind object;
  #L0871ba.  v0[v4]:= v1 @kind object;
  #L0871be.  v1:= `@@a.h.ba` @type ^`a.h` @kind object;
  #L0871c2.  v0[v3]:= v1 @kind object;
  #L0871c6.  v1:= `@@a.h.aX` @type ^`a.h` @kind object;
  #L0871ca.  v0[v5]:= v1 @kind object;
  #L0871ce.  v1:= `@@a.h.bb` @type ^`a.h` @kind object;
  #L0871d2.  v0[v6]:= v1 @kind object;
  #L0871d6.  v1:= `@@a.h.bh` @type ^`a.h` @kind object;
  #L0871da.  v0[v7]:= v1 @kind object;
  #L0871de.  v1:= 5I;
  #L0871e0.  v2:= `@@a.h.bg` @type ^`a.h` @kind object;
  #L0871e4.  v0[v1]:= v2 @kind object;
  #L0871e8.  v1:= 6I;
  #L0871ea.  v2:= `@@a.h.ax` @type ^`a.h` @kind object;
  #L0871ee.  v0[v1]:= v2 @kind object;
  #L0871f2.  v1:= 7I;
  #L0871f4.  v2:= `@@a.h.aH` @type ^`a.h` @kind object;
  #L0871f8.  v0[v1]:= v2 @kind object;
  #L0871fc.  v1:= 8I;
  #L087200.  v2:= `@@a.h.ay` @type ^`a.h` @kind object;
  #L087204.  v0[v1]:= v2 @kind object;
  #L087208.  v1:= 9I;
  #L08720c.  v2:= `@@a.h.aI` @type ^`a.h` @kind object;
  #L087210.  v0[v1]:= v2 @kind object;
  #L087214.  v1:= 10I;
  #L087218.  v2:= `@@a.h.af` @type ^`a.h` @kind object;
  #L08721c.  v0[v1]:= v2 @kind object;
  #L087220.  v1:= 11I;
  #L087224.  v2:= `@@a.h.ag` @type ^`a.h` @kind object;
  #L087228.  v0[v1]:= v2 @kind object;
  #L08722c.  v1:= 12I;
  #L087230.  v2:= `@@a.h.D` @type ^`a.h` @kind object;
  #L087234.  v0[v1]:= v2 @kind object;
  #L087238.  v1:= 13I;
  #L08723c.  v2:= `@@a.h.H` @type ^`a.h` @kind object;
  #L087240.  v0[v1]:= v2 @kind object;
  #L087244.  v1:= 14I;
  #L087248.  v2:= `@@a.h.h` @type ^`a.h` @kind object;
  #L08724c.  v0[v1]:= v2 @kind object;
  #L087250.  `@@a.k.h` @type ^`a.h`[] := v0 @kind object;
  #L087254.  v0:= new `a.k$a`;
  #L087258.  call `<init>`(v0, v3) @signature `La/k$a;.<init>:(Z)V` @kind direct;
  #L08725e.  v1:= `@@a.k.h` @type ^`a.h`[] @kind object;
  #L087262.  call temp:= `a`(v0, v1) @signature `La/k$a;.a:([La/h;)La/k$a;` @kind virtual;
  #L087268.  v0:= temp @kind object;
  #L08726a.  v1:= new `a.ac`[v7];
  #L08726e.  v2:= `@@a.ac.a` @type ^`a.ac` @kind object;
  #L087272.  v1[v4]:= v2 @kind object;
  #L087276.  v2:= `@@a.ac.b` @type ^`a.ac` @kind object;
  #L08727a.  v1[v3]:= v2 @kind object;
  #L08727e.  v2:= `@@a.ac.c` @type ^`a.ac` @kind object;
  #L087282.  v1[v5]:= v2 @kind object;
  #L087286.  v2:= `@@a.ac.d` @type ^`a.ac` @kind object;
  #L08728a.  v1[v6]:= v2 @kind object;
  #L08728e.  call temp:= `a`(v0, v1) @signature `La/k$a;.a:([La/ac;)La/k$a;` @kind virtual;
  #L087294.  v0:= temp @kind object;
  #L087296.  call temp:= `a`(v0, v3) @signature `La/k$a;.a:(Z)La/k$a;` @kind virtual;
  #L08729c.  v0:= temp @kind object;
  #L08729e.  call temp:= `a`(v0) @signature `La/k$a;.a:()La/k;` @kind virtual;
  #L0872a4.  v0:= temp @kind object;
  #L0872a6.  `@@a.k.a` @type ^`a.k` := v0 @kind object;
  #L0872aa.  v0:= new `a.k$a`;
  #L0872ae.  v1:= `@@a.k.a` @type ^`a.k` @kind object;
  #L0872b2.  call `<init>`(v0, v1) @signature `La/k$a;.<init>:(La/k;)V` @kind direct;
  #L0872b8.  v1:= new `a.ac`[v3];
  #L0872bc.  v2:= `@@a.ac.d` @type ^`a.ac` @kind object;
  #L0872c0.  v1[v4]:= v2 @kind object;
  #L0872c4.  call temp:= `a`(v0, v1) @signature `La/k$a;.a:([La/ac;)La/k$a;` @kind virtual;
  #L0872ca.  v0:= temp @kind object;
  #L0872cc.  call temp:= `a`(v0, v3) @signature `La/k$a;.a:(Z)La/k$a;` @kind virtual;
  #L0872d2.  v0:= temp @kind object;
  #L0872d4.  call temp:= `a`(v0) @signature `La/k$a;.a:()La/k;` @kind virtual;
  #L0872da.  v0:= temp @kind object;
  #L0872dc.  `@@a.k.b` @type ^`a.k` := v0 @kind object;
  #L0872e0.  v0:= new `a.k$a`;
  #L0872e4.  call `<init>`(v0, v4) @signature `La/k$a;.<init>:(Z)V` @kind direct;
  #L0872ea.  call temp:= `a`(v0) @signature `La/k$a;.a:()La/k;` @kind virtual;
  #L0872f0.  v0:= temp @kind object;
  #L0872f2.  `@@a.k.c` @type ^`a.k` := v0 @kind object;
  #L0872f6.  return @kind void;
}
procedure `void` `<init>`(`a.k` v1 @kind this, `a.k$a` v2 @kind object) @signature `La/k;.<init>:(La/k$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L087308.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08730e.  v0:= v2.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L087312.  v1.`a.k.d` @type ^`boolean` := v0 @kind boolean;
  #L087316.  v0:= v2.`a.k$a.b` @type ^`java.lang.String`[] @kind object;
  #L08731a.  v1.`a.k.f` @type ^`java.lang.String`[] := v0 @kind object;
  #L08731e.  v0:= v2.`a.k$a.c` @type ^`java.lang.String`[] @kind object;
  #L087322.  v1.`a.k.g` @type ^`java.lang.String`[] := v0 @kind object;
  #L087326.  v0:= v2.`a.k$a.d` @type ^`boolean` @kind boolean;
  #L08732a.  v1.`a.k.e` @type ^`boolean` := v0 @kind boolean;
  #L08732e.  return @kind void;
}
procedure `boolean` `a`(`java.lang.String`[] v5 @kind object, `java.lang.String`[] v6 @kind object) @signature `La/k;.a:([Ljava/lang/String;[Ljava/lang/String;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L087340.  v0:= 0I;
  #L087342.  if v5 == 0 then goto L087356;
  #L087346.  if v6 == 0 then goto L087356;
  #L08734a.  v1:= length @variable v5;
  #L08734c.  if v1 == 0 then goto L087356;
  #L087350.  v1:= length @variable v6;
  #L087352.  if v1 != 0 then goto L087358;
  #L087356.  return v0;
  #L087358.  v2:= length @variable v5;
  #L08735a.  v1:= v0;
  #L08735c.  if v1 >= v2 then goto L087356;
  #L087360.  v3:= v5[v1] @kind object;
  #L087364.  call temp:= `a`(v6, v3) @signature `La/a/c;.a:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L08736a.  v3:= temp;
  #L08736c.  v4:= -1I;
  #L08736e.  if v3 == v4 then goto L087376;
  #L087372.  v0:= 1I;
  #L087374.  goto L087356;
  #L087376.  v1:= v1 + 1;
  #L08737a.  goto L08735c;
}
procedure `a.k` `b`(`a.k` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object, `boolean` v6 ) @signature `La/k;.b:(Ljavax/net/ssl/SSLSocket;Z)La/k;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08738c.  v0:= v4.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L087390.  if v0 == 0 then goto L087424;
  #L087394.  v0:= constclass @type ^`java.lang.String` @kind object;
  #L087398.  v1:= v4.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08739c.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L0873a2.  v2:= temp @kind object;
  #L0873a4.  call temp:= `a`(v0, v1, v2) @signature `La/a/c;.a:(Ljava/lang/Class;[Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L0873aa.  v0:= temp @kind object;
  #L0873ac.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L0873b0.  v1:= v0 @kind object;
  #L0873b2.  v0:= v4.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L0873b6.  if v0 == 0 then goto L087430;
  #L0873ba.  v0:= constclass @type ^`java.lang.String` @kind object;
  #L0873be.  v2:= v4.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L0873c2.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L0873c8.  v3:= temp @kind object;
  #L0873ca.  call temp:= `a`(v0, v2, v3) @signature `La/a/c;.a:(Ljava/lang/Class;[Ljava/lang/Object;[Ljava/lang/Object;)[Ljava/lang/Object;` @kind static;
  #L0873d0.  v0:= temp @kind object;
  #L0873d2.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L0873d6.  if v6 == 0 then goto L087400;
  #L0873da.  call temp:= `getSupportedCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getSupportedCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L0873e0.  v2:= temp @kind object;
  #L0873e2.  v3:= "TLS_FALLBACK_SCSV" @kind object;
  #L0873e6.  call temp:= `a`(v2, v3) @signature `La/a/c;.a:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L0873ec.  v2:= temp;
  #L0873ee.  v3:= -1I;
  #L0873f0.  if v2 == v3 then goto L087400;
  #L0873f4.  v2:= "TLS_FALLBACK_SCSV" @kind object;
  #L0873f8.  call temp:= `a`(v1, v2) @signature `La/a/c;.a:([Ljava/lang/String;Ljava/lang/String;)[Ljava/lang/String;` @kind static;
  #L0873fe.  v1:= temp @kind object;
  #L087400.  v2:= new `a.k$a`;
  #L087404.  call `<init>`(v2, v4) @signature `La/k$a;.<init>:(La/k;)V` @kind direct;
  #L08740a.  call temp:= `a`(v2, v1) @signature `La/k$a;.a:([Ljava/lang/String;)La/k$a;` @kind virtual;
  #L087410.  v1:= temp @kind object;
  #L087412.  call temp:= `b`(v1, v0) @signature `La/k$a;.b:([Ljava/lang/String;)La/k$a;` @kind virtual;
  #L087418.  v0:= temp @kind object;
  #L08741a.  call temp:= `a`(v0) @signature `La/k$a;.a:()La/k;` @kind virtual;
  #L087420.  v0:= temp @kind object;
  #L087422.  return v0 @kind object;
  #L087424.  call temp:= `getEnabledCipherSuites`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L08742a.  v0:= temp @kind object;
  #L08742c.  v1:= v0 @kind object;
  #L08742e.  goto L0873b2;
  #L087430.  call temp:= `getEnabledProtocols`(v5) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L087436.  v0:= temp @kind object;
  #L087438.  goto L0873d6;
}
procedure `void` `a`(`a.k` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object, `boolean` v4 ) @signature `La/k;.a:(Ljavax/net/ssl/SSLSocket;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L08744c.  call temp:= `b`(v2, v3, v4) @signature `La/k;.b:(Ljavax/net/ssl/SSLSocket;Z)La/k;` @kind direct;
  #L087452.  v0:= temp @kind object;
  #L087454.  v1:= v0.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L087458.  if v1 == 0 then goto L087466;
  #L08745c.  v1:= v0.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L087460.  call `setEnabledProtocols`(v3, v1) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledProtocols:([Ljava/lang/String;)V` @kind virtual;
  #L087466.  v1:= v0.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08746a.  if v1 == 0 then goto L087478;
  #L08746e.  v0:= v0.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L087472.  call `setEnabledCipherSuites`(v3, v0) @signature `Ljavax/net/ssl/SSLSocket;.setEnabledCipherSuites:([Ljava/lang/String;)V` @kind virtual;
  #L087478.  return @kind void;
}
procedure `boolean` `a`(`a.k` v1 @kind this) @signature `La/k;.a:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08748c.  v0:= v1.`a.k.d` @type ^`boolean` @kind boolean;
  #L087490.  return v0;
}
procedure `boolean` `a`(`a.k` v3 @kind this, `javax.net.ssl.SSLSocket` v4 @kind object) @signature `La/k;.a:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0874a4.  v0:= 0I;
  #L0874a6.  v1:= v3.`a.k.d` @type ^`boolean` @kind boolean;
  #L0874aa.  if v1 != 0 then goto L0874b0;
  #L0874ae.  return v0;
  #L0874b0.  v1:= v3.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L0874b4.  if v1 == 0 then goto L0874d0;
  #L0874b8.  v1:= v3.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L0874bc.  call temp:= `getEnabledProtocols`(v4) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L0874c2.  v2:= temp @kind object;
  #L0874c4.  call temp:= `a`(v1, v2) @signature `La/k;.a:([Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L0874ca.  v1:= temp;
  #L0874cc.  if v1 == 0 then goto L0874ae;
  #L0874d0.  v1:= v3.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L0874d4.  if v1 == 0 then goto L0874f0;
  #L0874d8.  v1:= v3.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L0874dc.  call temp:= `getEnabledCipherSuites`(v4) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledCipherSuites:()[Ljava/lang/String;` @kind virtual;
  #L0874e2.  v2:= temp @kind object;
  #L0874e4.  call temp:= `a`(v1, v2) @signature `La/k;.a:([Ljava/lang/String;[Ljava/lang/String;)Z` @kind static;
  #L0874ea.  v1:= temp;
  #L0874ec.  if v1 == 0 then goto L0874ae;
  #L0874f0.  v0:= 1I;
  #L0874f2.  goto L0874ae;
}
procedure `java.util.List` `b`(`a.k` v5 @kind this) @signature `La/k;.b:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L087504.  v0:= v5.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L087508.  if v0 != 0 then goto L087510;
  #L08750c.  v0:= 0I;
  #L08750e.  return v0 @kind object;
  #L087510.  v1:= new `java.util.ArrayList`;
  #L087514.  v0:= v5.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L087518.  v0:= length @variable v0;
  #L08751a.  call `<init>`(v1, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L087520.  v2:= v5.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L087524.  v3:= length @variable v2;
  #L087526.  v0:= 0I;
  #L087528.  if v0 >= v3 then goto L087544;
  #L08752c.  v4:= v2[v0] @kind object;
  #L087530.  call temp:= `a`(v4) @signature `La/h;.a:(Ljava/lang/String;)La/h;` @kind static;
  #L087536.  v4:= temp @kind object;
  #L087538.  call temp:= `add`(v1, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L08753e.  v0:= v0 + 1;
  #L087542.  goto L087528;
  #L087544.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L08754a.  v0:= temp @kind object;
  #L08754c.  goto L08750e;
}
procedure `java.util.List` `c`(`a.k` v5 @kind this) @signature `La/k;.c:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L087560.  v0:= v5.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L087564.  if v0 != 0 then goto L08756c;
  #L087568.  v0:= 0I;
  #L08756a.  return v0 @kind object;
  #L08756c.  v1:= new `java.util.ArrayList`;
  #L087570.  v0:= v5.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L087574.  v0:= length @variable v0;
  #L087576.  call `<init>`(v1, v0) @signature `Ljava/util/ArrayList;.<init>:(I)V` @kind direct;
  #L08757c.  v2:= v5.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L087580.  v3:= length @variable v2;
  #L087582.  v0:= 0I;
  #L087584.  if v0 >= v3 then goto L0875a0;
  #L087588.  v4:= v2[v0] @kind object;
  #L08758c.  call temp:= `a`(v4) @signature `La/ac;.a:(Ljava/lang/String;)La/ac;` @kind static;
  #L087592.  v4:= temp @kind object;
  #L087594.  call temp:= `add`(v1, v4) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L08759a.  v0:= v0 + 1;
  #L08759e.  goto L087584;
  #L0875a0.  call temp:= `unmodifiableList`(v1) @signature `Ljava/util/Collections;.unmodifiableList:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L0875a6.  v0:= temp @kind object;
  #L0875a8.  goto L08756a;
}
procedure `boolean` `d`(`a.k` v1 @kind this) @signature `La/k;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0875bc.  v0:= v1.`a.k.e` @type ^`boolean` @kind boolean;
  #L0875c0.  return v0;
}
procedure `boolean` `equals`(`a.k` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `La/k;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0875d4.  v1:= 1I;
  #L0875d6.  v0:= 0I;
  #L0875d8.  v2:= instanceof @variable v5 @type ^`a.k` @kind boolean;
  #L0875dc.  if v2 != 0 then goto L0875e2;
  #L0875e0.  return v0;
  #L0875e2.  if v5 != v4 then goto L0875ea;
  #L0875e6.  v0:= v1;
  #L0875e8.  goto L0875e0;
  #L0875ea.  v5:= (`a.k`) v5 @kind object;
  #L0875ee.  v2:= v4.`a.k.d` @type ^`boolean` @kind boolean;
  #L0875f2.  v3:= v5.`a.k.d` @type ^`boolean` @kind boolean;
  #L0875f6.  if v2 != v3 then goto L0875e0;
  #L0875fa.  v2:= v4.`a.k.d` @type ^`boolean` @kind boolean;
  #L0875fe.  if v2 == 0 then goto L087636;
  #L087602.  v2:= v4.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L087606.  v3:= v5.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08760a.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L087610.  v2:= temp;
  #L087612.  if v2 == 0 then goto L0875e0;
  #L087616.  v2:= v4.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08761a.  v3:= v5.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L08761e.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L087624.  v2:= temp;
  #L087626.  if v2 == 0 then goto L0875e0;
  #L08762a.  v2:= v4.`a.k.e` @type ^`boolean` @kind boolean;
  #L08762e.  v3:= v5.`a.k.e` @type ^`boolean` @kind boolean;
  #L087632.  if v2 != v3 then goto L0875e0;
  #L087636.  v0:= v1;
  #L087638.  goto L0875e0;
}
procedure `int` `hashCode`(`a.k` v2 @kind this) @signature `La/k;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08764c.  v0:= 17I;
  #L087650.  v1:= v2.`a.k.d` @type ^`boolean` @kind boolean;
  #L087654.  if v1 == 0 then goto L08768a;
  #L087658.  v0:= v2.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08765c.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L087662.  v0:= temp;
  #L087664.  v0:= v0 + 527;
  #L087668.  v0:= v0 * 31;
  #L08766c.  v1:= v2.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L087670.  call temp:= `hashCode`(v1) @signature `Ljava/util/Arrays;.hashCode:([Ljava/lang/Object;)I` @kind static;
  #L087676.  v1:= temp;
  #L087678.  v0:= v0 + v1 @kind int;
  #L08767a.  v1:= v0 * 31;
  #L08767e.  v0:= v2.`a.k.e` @type ^`boolean` @kind boolean;
  #L087682.  if v0 == 0 then goto L08768c;
  #L087686.  v0:= 0I;
  #L087688.  v0:= v0 + v1 @kind int;
  #L08768a.  return v0;
  #L08768c.  v0:= 1I;
  #L08768e.  goto L087688;
}
procedure `java.lang.String` `toString`(`a.k` v4 @kind this) @signature `La/k;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0876a0.  v0:= v4.`a.k.d` @type ^`boolean` @kind boolean;
  #L0876a4.  if v0 != 0 then goto L0876ae;
  #L0876a8.  v0:= "ConnectionSpec()" @kind object;
  #L0876ac.  return v0 @kind object;
  #L0876ae.  v0:= v4.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L0876b2.  if v0 == 0 then goto L08773e;
  #L0876b6.  call temp:= `b`(v4) @signature `La/k;.b:()Ljava/util/List;` @kind virtual;
  #L0876bc.  v0:= temp @kind object;
  #L0876be.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0876c4.  v0:= temp @kind object;
  #L0876c6.  v1:= v4.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L0876ca.  if v1 == 0 then goto L087744;
  #L0876ce.  call temp:= `c`(v4) @signature `La/k;.c:()Ljava/util/List;` @kind virtual;
  #L0876d4.  v1:= temp @kind object;
  #L0876d6.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L0876dc.  v1:= temp @kind object;
  #L0876de.  v2:= new `java.lang.StringBuilder`;
  #L0876e2.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0876e8.  v3:= "ConnectionSpec(cipherSuites=" @kind object;
  #L0876ec.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0876f2.  v2:= temp @kind object;
  #L0876f4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0876fa.  v0:= temp @kind object;
  #L0876fc.  v2:= ", tlsVersions=" @kind object;
  #L087700.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L087706.  v0:= temp @kind object;
  #L087708.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08770e.  v0:= temp @kind object;
  #L087710.  v1:= ", supportsTlsExtensions=" @kind object;
  #L087714.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08771a.  v0:= temp @kind object;
  #L08771c.  v1:= v4.`a.k.e` @type ^`boolean` @kind boolean;
  #L087720.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L087726.  v0:= temp @kind object;
  #L087728.  v1:= ")" @kind object;
  #L08772c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L087732.  v0:= temp @kind object;
  #L087734.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08773a.  v0:= temp @kind object;
  #L08773c.  goto L0876ac;
  #L08773e.  v0:= "[all enabled]" @kind object;
  #L087742.  goto L0876c6;
  #L087744.  v1:= "[all enabled]" @kind object;
  #L087748.  goto L0876de;
}
