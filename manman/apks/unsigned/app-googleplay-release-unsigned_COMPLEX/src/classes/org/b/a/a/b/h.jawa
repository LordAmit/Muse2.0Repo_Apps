record `org.b.a.a.b.h` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b.g` @kind class {
}
procedure `void` `<init>`(`org.b.a.a.b.h` v0 @kind this) @signature `Lorg/b/a/a/b/h;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L18a7d4.  call `<init>`(v0) @signature `Lorg/b/a/a/b/g;.<init>:()V` @kind direct;
  #L18a7da.  return @kind void;
}
procedure `int` `a`(`org.b.a.a.b.h` v3 @kind this, `byte`[] v4 @kind object, `int` v5 ) @signature `Lorg/b/a/a/b/h;.a:([BI)I` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L18a7ec.  v0:= v4[v5] @kind byte;
  #L18a7f0.  v0:= v0 ^& 255;
  #L18a7f4.  v1:= 129I;
  #L18a7f8.  if v0 < v1 then goto L18a82c;
  #L18a7fc.  v1:= 159I;
  #L18a800.  if v0 > v1 then goto L18a82c;
  #L18a804.  v0:= v0 + -129;
  #L18a808.  v0:= v0 * 188;
  #L18a80c.  v1:= v5 + 1;
  #L18a810.  v1:= v4[v1] @kind byte;
  #L18a814.  v1:= v1 ^& 255;
  #L18a818.  v2:= v1 + -64;
  #L18a81c.  v0:= v0 + v2 @kind int;
  #L18a81e.  v2:= 128I;
  #L18a822.  if v1 < v2 then goto L18a82a;
  #L18a826.  v0:= v0 + -1;
  #L18a82a.  return v0;
  #L18a82c.  v1:= 224I;
  #L18a830.  if v0 < v1 then goto L18a84a;
  #L18a834.  v1:= 239I;
  #L18a838.  if v0 > v1 then goto L18a84a;
  #L18a83c.  v0:= v0 + -224;
  #L18a840.  v0:= v0 + 31;
  #L18a844.  v0:= v0 * 188;
  #L18a848.  goto L18a80c;
  #L18a84a.  v0:= -1I;
  #L18a84c.  goto L18a82a;
}
