record `org.b.a.a.m` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b` @kind class {
  `org.b.a.a.b$a` `org.b.a.a.m.a` @AccessFlag PRIVATE;
  `org.b.a.a.c.l` `org.b.a.a.m.b` @AccessFlag PRIVATE;
  `boolean` `org.b.a.a.m.c` @AccessFlag PRIVATE;
  `short` `org.b.a.a.m.d` @AccessFlag PRIVATE;
  `int` `org.b.a.a.m.e` @AccessFlag PRIVATE;
  `int`[] `org.b.a.a.m.f` @AccessFlag PRIVATE;
  `int` `org.b.a.a.m.g` @AccessFlag PRIVATE;
  `int` `org.b.a.a.m.h` @AccessFlag PRIVATE;
  `org.b.a.a.b` `org.b.a.a.m.i` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.b.a.a.m` v1 @kind this, `org.b.a.a.c.l` v2 @kind object) @signature `Lorg/b/a/a/m;.<init>:(Lorg/b/a/a/c/l;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L195964.  call `<init>`(v1) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L19596a.  v1.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` := v2 @kind object;
  #L19596e.  v0:= 0I;
  #L195970.  v1.`org.b.a.a.m.c` @type ^`boolean` := v0 @kind boolean;
  #L195974.  v0:= 0I;
  #L195976.  v1.`org.b.a.a.m.i` @type ^`org.b.a.a.b` := v0 @kind object;
  #L19597a.  v0:= 4I;
  #L19597c.  v0:= new `int`[v0];
  #L195980.  v1.`org.b.a.a.m.f` @type ^`int`[] := v0 @kind object;
  #L195984.  call `d`(v1) @signature `Lorg/b/a/a/m;.d:()V` @kind virtual;
  #L19598a.  return @kind void;
}
procedure `void` `<init>`(`org.b.a.a.m` v1 @kind this, `org.b.a.a.c.l` v2 @kind object, `boolean` v3 , `org.b.a.a.b` v4 @kind object) @signature `Lorg/b/a/a/m;.<init>:(Lorg/b/a/a/c/l;ZLorg/b/a/a/b;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L19599c.  call `<init>`(v1) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L1959a2.  v1.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` := v2 @kind object;
  #L1959a6.  v1.`org.b.a.a.m.c` @type ^`boolean` := v3 @kind boolean;
  #L1959aa.  v1.`org.b.a.a.m.i` @type ^`org.b.a.a.b` := v4 @kind object;
  #L1959ae.  v0:= 4I;
  #L1959b0.  v0:= new `int`[v0];
  #L1959b4.  v1.`org.b.a.a.m.f` @type ^`int`[] := v0 @kind object;
  #L1959b8.  call `d`(v1) @signature `Lorg/b/a/a/m;.d:()V` @kind virtual;
  #L1959be.  return @kind void;
}
procedure `java.lang.String` `a`(`org.b.a.a.m` v1 @kind this) @signature `Lorg/b/a/a/m;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1959d0.  v0:= v1.`org.b.a.a.m.i` @type ^`org.b.a.a.b` @kind object;
  #L1959d4.  if v0 != 0 then goto L1959e6;
  #L1959d8.  v0:= v1.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` @kind object;
  #L1959dc.  call temp:= `b`(v0) @signature `Lorg/b/a/a/c/l;.b:()Ljava/lang/String;` @kind virtual;
  #L1959e2.  v0:= temp @kind object;
  #L1959e4.  return v0 @kind object;
  #L1959e6.  v0:= v1.`org.b.a.a.m.i` @type ^`org.b.a.a.b` @kind object;
  #L1959ea.  call temp:= `a`(v0) @signature `Lorg/b/a/a/b;.a:()Ljava/lang/String;` @kind virtual;
  #L1959f0.  v0:= temp @kind object;
  #L1959f2.  goto L1959e4;
}
procedure `org.b.a.a.b$a` `a`(`org.b.a.a.m` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/b/a/a/m;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L195a04.  v6:= 64I;
  #L195a08.  v0:= v9 + v10 @kind int;
  #L195a0c.  if v9 >= v0 then goto L195ab8;
  #L195a10.  v1:= v7.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` @kind object;
  #L195a14.  v2:= v8[v9] @kind byte;
  #L195a18.  call temp:= `a`(v1, v2) @signature `Lorg/b/a/a/c/l;.a:(B)S` @kind virtual;
  #L195a1e.  v1:= temp;
  #L195a20.  v2:= 250I;
  #L195a24.  if v1 >= v2 then goto L195a34;
  #L195a28.  v2:= v7.`org.b.a.a.m.g` @type ^`int`;
  #L195a2c.  v2:= v2 + 1;
  #L195a30.  v7.`org.b.a.a.m.g` @type ^`int` := v2;
  #L195a34.  if v1 >= v6 then goto L195a86;
  #L195a38.  v2:= v7.`org.b.a.a.m.h` @type ^`int`;
  #L195a3c.  v2:= v2 + 1;
  #L195a40.  v7.`org.b.a.a.m.h` @type ^`int` := v2;
  #L195a44.  v2:= v7.`org.b.a.a.m.d` @type ^`short` @kind short;
  #L195a48.  if v2 >= v6 then goto L195a86;
  #L195a4c.  v2:= v7.`org.b.a.a.m.e` @type ^`int`;
  #L195a50.  v2:= v2 + 1;
  #L195a54.  v7.`org.b.a.a.m.e` @type ^`int` := v2;
  #L195a58.  v2:= v7.`org.b.a.a.m.c` @type ^`boolean` @kind boolean;
  #L195a5c.  if v2 != 0 then goto L195a90;
  #L195a60.  v2:= v7.`org.b.a.a.m.f` @type ^`int`[] @kind object;
  #L195a64.  v3:= v7.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` @kind object;
  #L195a68.  v4:= v7.`org.b.a.a.m.d` @type ^`short` @kind short;
  #L195a6c.  v4:= v4 * 64;
  #L195a70.  v4:= v4 + v1 @kind int;
  #L195a72.  call temp:= `a`(v3, v4) @signature `Lorg/b/a/a/c/l;.a:(I)B` @kind virtual;
  #L195a78.  v3:= temp;
  #L195a7a.  v4:= v2[v3];
  #L195a7e.  v4:= v4 + 1;
  #L195a82.  v2[v3]:= v4;
  #L195a86.  v7.`org.b.a.a.m.d` @type ^`short` := v1 @kind char;
  #L195a8a.  v9:= v9 + 1;
  #L195a8e.  goto L195a0c;
  #L195a90.  v2:= v7.`org.b.a.a.m.f` @type ^`int`[] @kind object;
  #L195a94.  v3:= v7.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` @kind object;
  #L195a98.  v4:= v1 * 64;
  #L195a9c.  v5:= v7.`org.b.a.a.m.d` @type ^`short` @kind short;
  #L195aa0.  v4:= v4 + v5 @kind int;
  #L195aa2.  call temp:= `a`(v3, v4) @signature `Lorg/b/a/a/c/l;.a:(I)B` @kind virtual;
  #L195aa8.  v3:= temp;
  #L195aaa.  v4:= v2[v3];
  #L195aae.  v4:= v4 + 1;
  #L195ab2.  v2[v3]:= v4;
  #L195ab6.  goto L195a86;
  #L195ab8.  v0:= v7.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` @kind object;
  #L195abc.  v1:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L195ac0.  if v0 != v1 then goto L195aee;
  #L195ac4.  v0:= v7.`org.b.a.a.m.e` @type ^`int`;
  #L195ac8.  v1:= 1024I;
  #L195acc.  if v0 <= v1 then goto L195aee;
  #L195ad0.  call temp:= `b`(v7) @signature `Lorg/b/a/a/m;.b:()F` @kind virtual;
  #L195ad6.  v0:= temp;
  #L195ad8.  v1:= 1064514355I;
  #L195ade.  v1:= fcmpl(v0, v1);
  #L195ae2.  if v1 <= 0 then goto L195af4;
  #L195ae6.  v0:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L195aea.  v7.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L195aee.  v0:= v7.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` @kind object;
  #L195af2.  return v0 @kind object;
  #L195af4.  v1:= 1028443341I;
  #L195afa.  v0:= fcmpg(v0, v1);
  #L195afe.  if v0 >= 0 then goto L195aee;
  #L195b02.  v0:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L195b06.  v7.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L195b0a.  goto L195aee;
}
procedure `float` `b`(`org.b.a.a.m` v3 @kind this) @signature `Lorg/b/a/a/m;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L195b1c.  v2:= 1.0F;
  #L195b20.  v0:= v3.`org.b.a.a.m.e` @type ^`int`;
  #L195b24.  if v0 <= 0 then goto L195b6c;
  #L195b28.  v0:= v3.`org.b.a.a.m.f` @type ^`int`[] @kind object;
  #L195b2c.  v1:= 3I;
  #L195b2e.  v0:= v0[v1];
  #L195b32.  v0:= (`float`) v0 @kind i2f;
  #L195b34.  v0:= v0 * v2 @kind float;
  #L195b36.  v1:= v3.`org.b.a.a.m.e` @type ^`int`;
  #L195b3a.  v1:= (`float`) v1 @kind i2f;
  #L195b3c.  v0:= v0 / v1 @kind float;
  #L195b3e.  v1:= v3.`org.b.a.a.m.b` @type ^`org.b.a.a.c.l` @kind object;
  #L195b42.  call temp:= `a`(v1) @signature `Lorg/b/a/a/c/l;.a:()F` @kind virtual;
  #L195b48.  v1:= temp;
  #L195b4a.  v0:= v0 / v1 @kind float;
  #L195b4c.  v1:= v3.`org.b.a.a.m.h` @type ^`int`;
  #L195b50.  v1:= (`float`) v1 @kind i2f;
  #L195b52.  v0:= v0 * v1 @kind float;
  #L195b54.  v1:= v3.`org.b.a.a.m.g` @type ^`int`;
  #L195b58.  v1:= (`float`) v1 @kind i2f;
  #L195b5a.  v0:= v0 / v1 @kind float;
  #L195b5c.  v1:= fcmpl(v0, v2);
  #L195b60.  if v1 < 0 then goto L195b6a;
  #L195b64.  v0:= 1065185444I;
  #L195b6a.  return v0;
  #L195b6c.  v0:= 1008981770I;
  #L195b72.  goto L195b6a;
}
procedure `org.b.a.a.b$a` `c`(`org.b.a.a.m` v1 @kind this) @signature `Lorg/b/a/a/m;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L195b84.  v0:= v1.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` @kind object;
  #L195b88.  return v0 @kind object;
}
procedure `void` `d`(`org.b.a.a.m` v3 @kind this) @signature `Lorg/b/a/a/m;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L195b9c.  v1:= 0I;
  #L195b9e.  v0:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L195ba2.  v3.`org.b.a.a.m.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L195ba6.  v0:= 255I;
  #L195baa.  v3.`org.b.a.a.m.d` @type ^`short` := v0 @kind char;
  #L195bae.  v0:= v1;
  #L195bb0.  v2:= 4I;
  #L195bb2.  if v0 >= v2 then goto L195bc4;
  #L195bb6.  v2:= v3.`org.b.a.a.m.f` @type ^`int`[] @kind object;
  #L195bba.  v2[v0]:= v1;
  #L195bbe.  v0:= v0 + 1;
  #L195bc2.  goto L195bb0;
  #L195bc4.  v3.`org.b.a.a.m.e` @type ^`int` := v1;
  #L195bc8.  v3.`org.b.a.a.m.g` @type ^`int` := v1;
  #L195bcc.  v3.`org.b.a.a.m.h` @type ^`int` := v1;
  #L195bd0.  return @kind void;
}
