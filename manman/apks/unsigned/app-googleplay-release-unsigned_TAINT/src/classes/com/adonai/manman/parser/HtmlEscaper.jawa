record `com.adonai.manman.parser.HtmlEscaper` @kind class @AccessFlag PUBLIC {
}
procedure `void` `<init>`(`com.adonai.manman.parser.HtmlEscaper` v0 @kind this) @signature `Lcom/adonai/manman/parser/HtmlEscaper;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L12ab10.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L12ab16.  return @kind void;
}
procedure `java.lang.String` `escapeHtml`(`java.lang.CharSequence` v3 @kind object) @signature `Lcom/adonai/manman/parser/HtmlEscaper;.escapeHtml:(Ljava/lang/CharSequence;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L12ab28.  v0:= new `java.lang.StringBuilder`;
  #L12ab2c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L12ab32.  v1:= 0I;
  #L12ab34.  call temp:= `length`(v3) @signature `Ljava/lang/CharSequence;.length:()I` @kind interface;
  #L12ab3a.  v2:= temp;
  #L12ab3c.  call `withinStyle`(v0, v3, v1, v2) @signature `Lcom/adonai/manman/parser/HtmlEscaper;.withinStyle:(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;II)V` @kind static;
  #L12ab42.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L12ab48.  v0:= temp @kind object;
  #L12ab4a.  return v0 @kind object;
}
procedure `void` `withinStyle`(`java.lang.StringBuilder` v8 @kind object, `java.lang.CharSequence` v9 @kind object, `int` v10 , `int` v11 ) @signature `Lcom/adonai/manman/parser/HtmlEscaper;.withinStyle:(Ljava/lang/StringBuilder;Ljava/lang/CharSequence;II)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L12ab5c.  v7:= 57343I;
  #L12ab62.  v6:= 55296I;
  #L12ab68.  v5:= 56320I;
  #L12ab6e.  v4:= 32I;
  #L12ab72.  v0:= v10;
  #L12ab74.  if v0 >= v11 then goto L12ac84;
  #L12ab78.  call temp:= `charAt`(v9, v0) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L12ab7e.  v1:= temp;
  #L12ab80.  v2:= 60I;
  #L12ab84.  if v1 != v2 then goto L12ab98;
  #L12ab88.  v1:= "&lt;" @kind object;
  #L12ab8c.  call temp:= `append`(v8, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ab92.  v0:= v0 + 1;
  #L12ab96.  goto L12ab74;
  #L12ab98.  v2:= 62I;
  #L12ab9c.  if v1 != v2 then goto L12abac;
  #L12aba0.  v1:= "&gt;" @kind object;
  #L12aba4.  call temp:= `append`(v8, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12abaa.  goto L12ab92;
  #L12abac.  v2:= 38I;
  #L12abb0.  if v1 != v2 then goto L12abc0;
  #L12abb4.  v1:= "&amp;" @kind object;
  #L12abb8.  call temp:= `append`(v8, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12abbe.  goto L12ab92;
  #L12abc0.  if v1 < v6 then goto L12ac1c;
  #L12abc4.  if v1 > v7 then goto L12ac1c;
  #L12abc8.  if v1 >= v5 then goto L12ab92;
  #L12abcc.  v2:= v0 + 1;
  #L12abd0.  if v2 >= v11 then goto L12ab92;
  #L12abd4.  v2:= v0 + 1;
  #L12abd8.  call temp:= `charAt`(v9, v2) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L12abde.  v2:= temp;
  #L12abe0.  if v2 < v5 then goto L12ab92;
  #L12abe4.  if v2 > v7 then goto L12ab92;
  #L12abe8.  v0:= v0 + 1;
  #L12abec.  v3:= 65536I;
  #L12abf0.  v1:= v1 - v6 @kind int;
  #L12abf2.  v1:= v1 ^< 10;
  #L12abf6.  v1:= v1 ^| v3 @kind int;
  #L12abf8.  v2:= v2 - v5 @kind int;
  #L12abfa.  v1:= v1 ^| v2 @kind int;
  #L12abfc.  v2:= "&#" @kind object;
  #L12ac00.  call temp:= `append`(v8, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ac06.  v2:= temp @kind object;
  #L12ac08.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ac0e.  v1:= temp @kind object;
  #L12ac10.  v2:= ";" @kind object;
  #L12ac14.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ac1a.  goto L12ab92;
  #L12ac1c.  v2:= 126I;
  #L12ac20.  if v1 > v2 then goto L12ac28;
  #L12ac24.  if v1 >= v4 then goto L12ac48;
  #L12ac28.  v2:= "&#" @kind object;
  #L12ac2c.  call temp:= `append`(v8, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ac32.  v2:= temp @kind object;
  #L12ac34.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ac3a.  v1:= temp @kind object;
  #L12ac3c.  v2:= ";" @kind object;
  #L12ac40.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ac46.  goto L12ab92;
  #L12ac48.  if v1 != v4 then goto L12ac7c;
  #L12ac4c.  v1:= v0 + 1;
  #L12ac50.  if v1 >= v11 then goto L12ac74;
  #L12ac54.  v1:= v0 + 1;
  #L12ac58.  call temp:= `charAt`(v9, v1) @signature `Ljava/lang/CharSequence;.charAt:(I)C` @kind interface;
  #L12ac5e.  v1:= temp;
  #L12ac60.  if v1 != v4 then goto L12ac74;
  #L12ac64.  v1:= "&nbsp;" @kind object;
  #L12ac68.  call temp:= `append`(v8, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ac6e.  v0:= v0 + 1;
  #L12ac72.  goto L12ac4c;
  #L12ac74.  call temp:= `append`(v8, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ac7a.  goto L12ab92;
  #L12ac7c.  call temp:= `append`(v8, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L12ac82.  goto L12ab92;
  #L12ac84.  return @kind void;
}
