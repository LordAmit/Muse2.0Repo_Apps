record `com.j256.ormlite.stmt.mapped.BaseMappedQuery` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.stmt.mapped.BaseMappedStatement` @kind class, `com.j256.ormlite.stmt.GenericRowMapper` @kind interface {
  `java.util.Map` `com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.stmt.mapped.BaseMappedQuery.parentId` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType`[] `com.j256.ormlite.stmt.mapped.BaseMappedQuery.resultsFieldTypes` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.mapped.BaseMappedQuery` v1 @kind this, `com.j256.ormlite.table.TableInfo` v2 @kind object, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType`[] v4 @kind object, `com.j256.ormlite.field.FieldType`[] v5 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L15c32c.  v0:= 0I;
  #L15c32e.  call `<init>`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L15c334.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @type ^`java.util.Map` := v0 @kind object;
  #L15c338.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @type ^`java.lang.Object` := v0 @kind object;
  #L15c33c.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parentId` @type ^`java.lang.Object` := v0 @kind object;
  #L15c340.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.resultsFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] := v5 @kind object;
  #L15c344.  return @kind void;
}
procedure `java.lang.Object` `mapRow`(`com.j256.ormlite.stmt.mapped.BaseMappedQuery` v14 @kind this, `com.j256.ormlite.support.DatabaseResults` v15 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.mapRow:(Lcom/j256/ormlite/support/DatabaseResults;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L15c358.  v2:= 1I;
  #L15c35a.  v6:= 0I;
  #L15c35c.  v0:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @type ^`java.util.Map` @kind object;
  #L15c360.  if v0 != 0 then goto L15c39a;
  #L15c364.  v0:= new `java.util.HashMap`;
  #L15c368.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L15c36e.  call temp:= `getObjectCacheForRetrieve`(v15) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getObjectCacheForRetrieve:()Lcom/j256/ormlite/dao/ObjectCache;` @kind interface;
  #L15c374.  v8:= temp @kind object;
  #L15c376.  if v8 == 0 then goto L15c3a0;
  #L15c37a.  v1:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15c37e.  call temp:= `resultToJava`(v1, v15, v0) @signature `Lcom/j256/ormlite/field/FieldType;.resultToJava:(Lcom/j256/ormlite/support/DatabaseResults;Ljava/util/Map;)Ljava/lang/Object;` @kind virtual;
  #L15c384.  v1:= temp @kind object;
  #L15c386.  v3:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.clazz` @type ^`java.lang.Class` @kind object;
  #L15c38a.  call temp:= `get`(v8, v3, v1) @signature `Lcom/j256/ormlite/dao/ObjectCache;.get:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15c390.  v1:= temp @kind object;
  #L15c392.  if v1 == 0 then goto L15c3a0;
  #L15c396.  v0:= v1 @kind object;
  #L15c398.  return v0 @kind object;
  #L15c39a.  v0:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @type ^`java.util.Map` @kind object;
  #L15c39e.  goto L15c36e;
  #L15c3a0.  v1:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L15c3a4.  call temp:= `createObject`(v1) @signature `Lcom/j256/ormlite/table/TableInfo;.createObject:()Ljava/lang/Object;` @kind virtual;
  #L15c3aa.  v5:= temp @kind object;
  #L15c3ac.  v3:= 0I;
  #L15c3ae.  v9:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.resultsFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L15c3b2.  v10:= length @variable v9;
  #L15c3b4.  v7:= v6;
  #L15c3b6.  v1:= v6;
  #L15c3b8.  if v7 >= v10 then goto L15c43c;
  #L15c3bc.  v11:= v9[v7] @kind object;
  #L15c3c0.  call temp:= `isForeignCollection`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L15c3c6.  v4:= temp;
  #L15c3c8.  if v4 == 0 then goto L15c3d6;
  #L15c3cc.  v1:= v2;
  #L15c3ce.  v4:= v7 + 1;
  #L15c3d2.  v7:= v4;
  #L15c3d4.  goto L15c3b8;
  #L15c3d6.  call temp:= `resultToJava`(v11, v15, v0) @signature `Lcom/j256/ormlite/field/FieldType;.resultToJava:(Lcom/j256/ormlite/support/DatabaseResults;Ljava/util/Map;)Ljava/lang/Object;` @kind virtual;
  #L15c3dc.  v4:= temp @kind object;
  #L15c3de.  if v4 == 0 then goto L15c434;
  #L15c3e2.  v12:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @type ^`java.lang.Object` @kind object;
  #L15c3e6.  if v12 == 0 then goto L15c434;
  #L15c3ea.  call temp:= `getField`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getField:()Ljava/lang/reflect/Field;` @kind virtual;
  #L15c3f0.  v12:= temp @kind object;
  #L15c3f2.  call temp:= `getType`(v12) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15c3f8.  v12:= temp @kind object;
  #L15c3fa.  v13:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @type ^`java.lang.Object` @kind object;
  #L15c3fe.  call temp:= `getClass`(v13) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15c404.  v13:= temp @kind object;
  #L15c406.  if v12 != v13 then goto L15c434;
  #L15c40a.  v12:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parentId` @type ^`java.lang.Object` @kind object;
  #L15c40e.  call temp:= `equals`(v4, v12) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15c414.  v12:= temp;
  #L15c416.  if v12 == 0 then goto L15c434;
  #L15c41a.  v12:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @type ^`java.lang.Object` @kind object;
  #L15c41e.  call `assignField`(v11, v5, v12, v2, v8) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L15c424.  call temp:= `isId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isId:()Z` @kind virtual;
  #L15c42a.  v11:= temp;
  #L15c42c.  if v11 == 0 then goto L15c3ce;
  #L15c430.  v3:= v4 @kind object;
  #L15c432.  goto L15c3ce;
  #L15c434.  call `assignField`(v11, v5, v4, v6, v8) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L15c43a.  goto L15c424;
  #L15c43c.  if v1 == 0 then goto L15c474;
  #L15c440.  v2:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.resultsFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L15c444.  v4:= length @variable v2;
  #L15c446.  v1:= v6;
  #L15c448.  if v1 >= v4 then goto L15c474;
  #L15c44c.  v7:= v2[v1] @kind object;
  #L15c450.  call temp:= `isForeignCollection`(v7) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L15c456.  v9:= temp;
  #L15c458.  if v9 == 0 then goto L15c46e;
  #L15c45c.  call temp:= `buildForeignCollection`(v7, v5, v3) @signature `Lcom/j256/ormlite/field/FieldType;.buildForeignCollection:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/j256/ormlite/dao/BaseForeignCollection;` @kind virtual;
  #L15c462.  v9:= temp @kind object;
  #L15c464.  if v9 == 0 then goto L15c46e;
  #L15c468.  call `assignField`(v7, v5, v9, v6, v8) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L15c46e.  v1:= v1 + 1;
  #L15c472.  goto L15c448;
  #L15c474.  call temp:= `getObjectCacheForStore`(v15) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getObjectCacheForStore:()Lcom/j256/ormlite/dao/ObjectCache;` @kind interface;
  #L15c47a.  v1:= temp @kind object;
  #L15c47c.  if v1 == 0 then goto L15c48e;
  #L15c480.  if v3 == 0 then goto L15c48e;
  #L15c484.  v2:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.clazz` @type ^`java.lang.Class` @kind object;
  #L15c488.  call `put`(v1, v2, v3, v5) @signature `Lcom/j256/ormlite/dao/ObjectCache;.put:(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L15c48e.  v1:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @type ^`java.util.Map` @kind object;
  #L15c492.  if v1 != 0 then goto L15c49a;
  #L15c496.  v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @type ^`java.util.Map` := v0 @kind object;
  #L15c49a.  v0:= v5 @kind object;
  #L15c49c.  goto L15c398;
}
procedure `void` `setParentInformation`(`com.j256.ormlite.stmt.mapped.BaseMappedQuery` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.setParentInformation:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L15c4b0.  v0.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @type ^`java.lang.Object` := v1 @kind object;
  #L15c4b4.  v0.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parentId` @type ^`java.lang.Object` := v2 @kind object;
  #L15c4b8.  return @kind void;
}
