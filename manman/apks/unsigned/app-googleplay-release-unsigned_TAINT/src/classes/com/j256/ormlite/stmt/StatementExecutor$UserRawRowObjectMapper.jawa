record `com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper` @kind class @AccessFlag  extends `com.j256.ormlite.stmt.GenericRowMapper` @kind interface {
  `java.lang.String`[] `com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper.columnNames` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.DataType`[] `com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper.columnTypes` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.dao.RawRowObjectMapper` `com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper.mapper` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper` v0 @kind this, `com.j256.ormlite.dao.RawRowObjectMapper` v1 @kind object, `com.j256.ormlite.field.DataType`[] v2 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$UserRawRowObjectMapper;.<init>:(Lcom/j256/ormlite/dao/RawRowObjectMapper;[Lcom/j256/ormlite/field/DataType;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L159cac.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L159cb2.  v0.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper.mapper` @type ^`com.j256.ormlite.dao.RawRowObjectMapper` := v1 @kind object;
  #L159cb6.  v0.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper.columnTypes` @type ^`com.j256.ormlite.field.DataType`[] := v2 @kind object;
  #L159cba.  return @kind void;
}
procedure `java.lang.String`[] `getColumnNames`(`com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper` v1 @kind this, `com.j256.ormlite.support.DatabaseResults` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$UserRawRowObjectMapper;.getColumnNames:(Lcom/j256/ormlite/support/DatabaseResults;)[Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L159ccc.  v0:= v1.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper.columnNames` @type ^`java.lang.String`[] @kind object;
  #L159cd0.  if v0 == 0 then goto L159cda;
  #L159cd4.  v0:= v1.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper.columnNames` @type ^`java.lang.String`[] @kind object;
  #L159cd8.  return v0 @kind object;
  #L159cda.  call temp:= `getColumnNames`(v2) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getColumnNames:()[Ljava/lang/String;` @kind interface;
  #L159ce0.  v0:= temp @kind object;
  #L159ce2.  v1.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper.columnNames` @type ^`java.lang.String`[] := v0 @kind object;
  #L159ce6.  v0:= v1.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper.columnNames` @type ^`java.lang.String`[] @kind object;
  #L159cea.  goto L159cd8;
}
procedure `java.lang.Object` `mapRow`(`com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper` v5 @kind this, `com.j256.ormlite.support.DatabaseResults` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$UserRawRowObjectMapper;.mapRow:(Lcom/j256/ormlite/support/DatabaseResults;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L159cfc.  v4:= 0I;
  #L159cfe.  call temp:= `getColumnCount`(v6) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getColumnCount:()I` @kind interface;
  #L159d04.  v1:= temp;
  #L159d06.  v2:= new `java.lang.Object`[v1];
  #L159d0a.  v0:= 0I;
  #L159d0c.  if v0 >= v1 then goto L159d42;
  #L159d10.  v3:= v5.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper.columnTypes` @type ^`com.j256.ormlite.field.DataType`[] @kind object;
  #L159d14.  v3:= length @variable v3;
  #L159d16.  if v0 < v3 then goto L159d24;
  #L159d1a.  v2[v0]:= v4 @kind object;
  #L159d1e.  v0:= v0 + 1;
  #L159d22.  goto L159d0c;
  #L159d24.  v3:= v5.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper.columnTypes` @type ^`com.j256.ormlite.field.DataType`[] @kind object;
  #L159d28.  v3:= v3[v0] @kind object;
  #L159d2c.  call temp:= `getDataPersister`(v3) @signature `Lcom/j256/ormlite/field/DataType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L159d32.  v3:= temp @kind object;
  #L159d34.  call temp:= `resultToJava`(v3, v4, v6, v0) @signature `Lcom/j256/ormlite/field/DataPersister;.resultToJava:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @kind interface;
  #L159d3a.  v3:= temp @kind object;
  #L159d3c.  v2[v0]:= v3 @kind object;
  #L159d40.  goto L159d1e;
  #L159d42.  v0:= v5.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper.mapper` @type ^`com.j256.ormlite.dao.RawRowObjectMapper` @kind object;
  #L159d46.  call temp:= `getColumnNames`(v5, v6) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$UserRawRowObjectMapper;.getColumnNames:(Lcom/j256/ormlite/support/DatabaseResults;)[Ljava/lang/String;` @kind direct;
  #L159d4c.  v1:= temp @kind object;
  #L159d4e.  v3:= v5.`com.j256.ormlite.stmt.StatementExecutor$UserRawRowObjectMapper.columnTypes` @type ^`com.j256.ormlite.field.DataType`[] @kind object;
  #L159d52.  call temp:= `mapRow`(v0, v1, v3, v2) @signature `Lcom/j256/ormlite/dao/RawRowObjectMapper;.mapRow:([Ljava/lang/String;[Lcom/j256/ormlite/field/DataType;[Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L159d58.  v0:= temp @kind object;
  #L159d5a.  return v0 @kind object;
}
