record `com.j256.ormlite.db.BaseSqliteDatabaseType` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.db.BaseDatabaseType` @kind class {
}
global `com.j256.ormlite.field.FieldConverter` `@@com.j256.ormlite.db.BaseSqliteDatabaseType.booleanConverter` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L14b830.  v0:= new `com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter`;
  #L14b834.  call `<init>`(v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.<init>:()V` @kind direct;
  #L14b83a.  `@@com.j256.ormlite.db.BaseSqliteDatabaseType.booleanConverter` @type ^`com.j256.ormlite.field.FieldConverter` := v0 @kind object;
  #L14b83e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v0 @kind this) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L14b850.  call `<init>`(v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.<init>:()V` @kind direct;
  #L14b856.  return @kind void;
}
procedure `void` `appendInsertNoColumns`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.appendInsertNoColumns:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b868.  v0:= "DEFAULT VALUES" @kind object;
  #L14b86c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b872.  return @kind void;
}
procedure `void` `appendLongType`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.appendLongType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L14b884.  call temp:= `getSqlType`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L14b88a.  v0:= temp @kind object;
  #L14b88c.  v1:= `@@com.j256.ormlite.field.SqlType.LONG` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L14b890.  if v0 != v1 then goto L14b8ac;
  #L14b894.  call temp:= `isGeneratedId`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L14b89a.  v0:= temp;
  #L14b89c.  if v0 == 0 then goto L14b8ac;
  #L14b8a0.  v0:= "INTEGER" @kind object;
  #L14b8a4.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b8aa.  return @kind void;
  #L14b8ac.  v0:= "BIGINT" @kind object;
  #L14b8b0.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b8b6.  goto L14b8aa;
}
procedure `void` `configureGeneratedId`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v2 @kind this, `java.lang.String` v3 @kind object, `java.lang.StringBuilder` v4 @kind object, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.util.List` v6 @kind object, `java.util.List` v7 @kind object, `java.util.List` v8 @kind object, `java.util.List` v9 @kind object) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.configureGeneratedId:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L14b8c8.  call temp:= `getSqlType`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L14b8ce.  v0:= temp @kind object;
  #L14b8d0.  v1:= `@@com.j256.ormlite.field.SqlType.INTEGER` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L14b8d4.  if v0 == v1 then goto L14b8f8;
  #L14b8d8.  call temp:= `getSqlType`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L14b8de.  v0:= temp @kind object;
  #L14b8e0.  v1:= `@@com.j256.ormlite.field.SqlType.LONG` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L14b8e4.  if v0 == v1 then goto L14b8f8;
  #L14b8e8.  v0:= new `java.lang.IllegalArgumentException`;
  #L14b8ec.  v1:= "Sqlite requires that auto-increment generated-id be integer or long type" @kind object;
  #L14b8f0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14b8f6.  throw v0;
  #L14b8f8.  v0:= "PRIMARY KEY AUTOINCREMENT " @kind object;
  #L14b8fc.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14b902.  return @kind void;
}
procedure `boolean` `generatedIdSqlAtEnd`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.generatedIdSqlAtEnd:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L14b914.  v0:= 0I;
  #L14b916.  return v0;
}
procedure `com.j256.ormlite.field.FieldConverter` `getFieldConverter`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v2 @kind this, `com.j256.ormlite.field.DataPersister` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.getFieldConverter:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/FieldConverter;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L14b928.  v0:= `@@com.j256.ormlite.db.BaseSqliteDatabaseType$1.$SwitchMap$com$j256$ormlite$field$SqlType` @type ^`int`[] @kind object;
  #L14b92c.  call temp:= `getSqlType`(v3) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L14b932.  v1:= temp @kind object;
  #L14b934.  call temp:= `ordinal`(v1) @signature `Lcom/j256/ormlite/field/SqlType;.ordinal:()I` @kind virtual;
  #L14b93a.  v1:= temp;
  #L14b93c.  v0:= v0[v1];
  #L14b940.  goto L14b960;
  #L14b946.  call temp:= `getFieldConverter`(v2, v3, v4) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getFieldConverter:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/FieldConverter;` @kind super;
  #L14b94c.  v0:= temp @kind object;
  #L14b94e.  return v0 @kind object;
  #L14b950.  v0:= `@@com.j256.ormlite.db.BaseSqliteDatabaseType.booleanConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L14b954.  goto L14b94e;
  #L14b956.  call temp:= `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BigDecimalStringType;.getSingleton:()Lcom/j256/ormlite/field/types/BigDecimalStringType;` @kind static;
  #L14b95c.  v0:= temp @kind object;
  #L14b95e.  goto L14b94e;
  #L14b960.  switch v0
                  | 1 => goto L14b950
                  | 2 => goto L14b956
                  | else => goto L14b946;
}
procedure `boolean` `isCreateIfNotExistsSupported`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.isCreateIfNotExistsSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b980.  v0:= 1I;
  #L14b982.  return v0;
}
procedure `boolean` `isCreateTableReturnsZero`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.isCreateTableReturnsZero:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b994.  v0:= 0I;
  #L14b996.  return v0;
}
procedure `boolean` `isVarcharFieldWidthSupported`(`com.j256.ormlite.db.BaseSqliteDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseSqliteDatabaseType;.isVarcharFieldWidthSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14b9a8.  v0:= 0I;
  #L14b9aa.  return v0;
}
