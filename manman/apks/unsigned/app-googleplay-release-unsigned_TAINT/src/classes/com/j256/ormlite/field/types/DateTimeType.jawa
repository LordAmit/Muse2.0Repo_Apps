record `com.j256.ormlite.field.types.DateTimeType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `java.lang.String`[] `@@com.j256.ormlite.field.types.DateTimeType.associatedClassNames` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Class` `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @AccessFlag PRIVATE_STATIC;
global `java.lang.reflect.Method` `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @AccessFlag PRIVATE_STATIC;
global `java.lang.reflect.Constructor` `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @AccessFlag PRIVATE_STATIC;
global `com.j256.ormlite.field.types.DateTimeType` `@@com.j256.ormlite.field.types.DateTimeType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L152620.  v1:= 0I;
  #L152622.  v0:= new `com.j256.ormlite.field.types.DateTimeType`;
  #L152626.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<init>:()V` @kind direct;
  #L15262c.  `@@com.j256.ormlite.field.types.DateTimeType.singleTon` @type ^`com.j256.ormlite.field.types.DateTimeType` := v0 @kind object;
  #L152630.  `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` := v1 @kind object;
  #L152634.  `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L152638.  `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` := v1 @kind object;
  #L15263c.  v0:= 1I;
  #L15263e.  v0:= new `java.lang.String`[v0];
  #L152642.  v1:= 0I;
  #L152644.  v2:= "org.joda.time.DateTime" @kind object;
  #L152648.  v0[v1]:= v2 @kind object;
  #L15264c.  `@@com.j256.ormlite.field.types.DateTimeType.associatedClassNames` @type ^`java.lang.String`[] := v0 @kind object;
  #L152650.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L152664.  v0:= `@@com.j256.ormlite.field.SqlType.LONG` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L152668.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L15266e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateTimeType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L152680.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L152686.  return @kind void;
}
procedure `java.lang.Object` `createInstance`(`com.j256.ormlite.field.types.DateTimeType` v4 @kind this, `java.lang.Long` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L152698.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` @kind object;
  #L15269c.  if v0 != 0 then goto L1526c4;
  #L1526a0.  call temp:= `getDateTimeClass`(v4) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @kind direct;
  #L1526a6.  v0:= temp @kind object;
  #L1526a8.  v1:= 1I;
  #L1526aa.  v1:= new `java.lang.Class`[v1];
  #L1526ae.  v2:= 0I;
  #L1526b0.  v3:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L1526b4.  v1[v2]:= v3 @kind object;
  #L1526b8.  call temp:= `getConstructor`(v0, v1) @signature `Ljava/lang/Class;.getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L1526be.  v0:= temp @kind object;
  #L1526c0.  `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` := v0 @kind object;
  #L1526c4.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` @kind object;
  #L1526c8.  v1:= 1I;
  #L1526ca.  v1:= new `java.lang.Object`[v1];
  #L1526ce.  v2:= 0I;
  #L1526d0.  v1[v2]:= v5 @kind object;
  #L1526d4.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L1526da.  v0:= temp @kind object;
  #L1526dc.  return v0 @kind object;
  #L1526de.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L1526e0.  v1:= "Could not use reflection to construct a Joda DateTime" @kind object;
  #L1526e4.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1526ea.  v0:= temp @kind object;
  #L1526ec.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L1526de;
}
procedure `java.lang.Long` `extractMillis`(`com.j256.ormlite.field.types.DateTimeType` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.extractMillis:(Ljava/lang/Object;)Ljava/lang/Long;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L152710.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L152714.  if v0 != 0 then goto L152736;
  #L152718.  call temp:= `getDateTimeClass`(v3) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @kind direct;
  #L15271e.  v0:= temp @kind object;
  #L152720.  v1:= "getMillis" @kind object;
  #L152724.  v2:= 0I;
  #L152726.  v2:= new `java.lang.Class`[v2];
  #L15272a.  call temp:= `getMethod`(v0, v1, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L152730.  v0:= temp @kind object;
  #L152732.  `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L152736.  if v4 != 0 then goto L15273e;
  #L15273a.  v0:= 0I;
  #L15273c.  return v0 @kind object;
  #L15273e.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L152742.  v1:= 0I;
  #L152744.  v1:= new `java.lang.Object`[v1];
  #L152748.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15274e.  v0:= temp @kind object;
  #L152750.  v0:= (`java.lang.Long`) v0 @kind object;
  #Try_end0.  
  #L152754.  goto L15273c;
  #L152756.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L152758.  v1:= new `java.lang.StringBuilder`;
  #L15275c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L152762.  v2:= "Could not use reflection to get millis from Joda DateTime: " @kind object;
  #L152766.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15276c.  v1:= temp @kind object;
  #L15276e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L152774.  v1:= temp @kind object;
  #L152776.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15277c.  v1:= temp @kind object;
  #L15277e.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L152784.  v0:= temp @kind object;
  #L152786.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L152756;
}
procedure `java.lang.Class` `getDateTimeClass`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1527a8.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` @kind object;
  #L1527ac.  if v0 != 0 then goto L1527c0;
  #L1527b0.  v0:= "org.joda.time.DateTime" @kind object;
  #L1527b4.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L1527ba.  v0:= temp @kind object;
  #L1527bc.  `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` := v0 @kind object;
  #L1527c0.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` @kind object;
  #L1527c4.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.types.DateTimeType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getSingleton:()Lcom/j256/ormlite/field/types/DateTimeType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1527d8.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.singleTon` @type ^`com.j256.ormlite.field.types.DateTimeType` @kind object;
  #L1527dc.  return v0 @kind object;
}
procedure `java.lang.String`[] `getAssociatedClassNames`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getAssociatedClassNames:()[Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1527f0.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.associatedClassNames` @type ^`java.lang.String`[] @kind object;
  #L1527f4.  return v0 @kind object;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #Try_start0.  
  #L152808.  call temp:= `getDateTimeClass`(v1) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @kind direct;
  #Try_end0.  
  #L15280e.  v0:= temp @kind object;
  #L152810.  return v0 @kind object;
  #L152812.  v0:= Exception @type ^`java.lang.ClassNotFoundException` @kind object;
  #L152814.  v0:= 0I;
  #L152816.  goto L152810;
  catch `java.lang.ClassNotFoundException` @[Try_start0..Try_end0] goto L152812;
}
procedure `boolean` `isAppropriateId`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.isAppropriateId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L152838.  v0:= 0I;
  #L15283a.  return v0;
}
procedure `boolean` `isEscapedValue`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.isEscapedValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15284c.  v0:= 0I;
  #L15284e.  return v0;
}
procedure `boolean` `isValidForVersion`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.isValidForVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L152860.  v0:= 1I;
  #L152862.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L152874.  call temp:= `extractMillis`(v1, v3) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.extractMillis:(Ljava/lang/Object;)Ljava/lang/Long;` @kind direct;
  #L15287a.  v0:= temp @kind object;
  #L15287c.  return v0 @kind object;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.DateTimeType` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L152890.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L152896.  v0:= temp @kind wide;
  #L152898.  if v5 != 0 then goto L1528ae;
  #L15289c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1528a2.  v0:= temp @kind object;
  #L1528a4.  call temp:= `createInstance`(v4, v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L1528aa.  v0:= temp @kind object;
  #L1528ac.  return v0 @kind object;
  #L1528ae.  call temp:= `extractMillis`(v4, v5) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.extractMillis:(Ljava/lang/Object;)Ljava/lang/Long;` @kind direct;
  #L1528b4.  v2:= temp @kind object;
  #L1528b6.  call temp:= `longValue`(v2) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L1528bc.  v2:= temp @kind wide;
  #L1528be.  v2:= lcmp(v0, v2);
  #L1528c2.  if v2 != 0 then goto L1528de;
  #L1528c6.  v2:= 1L;
  #L1528ca.  v0:= v0 + v2 @kind long;
  #L1528cc.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1528d2.  v0:= temp @kind object;
  #L1528d4.  call temp:= `createInstance`(v4, v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L1528da.  v0:= temp @kind object;
  #L1528dc.  goto L1528ac;
  #L1528de.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1528e4.  v0:= temp @kind object;
  #L1528e6.  call temp:= `createInstance`(v4, v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L1528ec.  v0:= temp @kind object;
  #L1528ee.  goto L1528ac;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.DateTimeType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L152900.  call temp:= `parseLong`(v5) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L152906.  v0:= temp @kind wide;
  #L152908.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #Try_end0.  
  #L15290e.  v0:= temp @kind object;
  #L152910.  return v0 @kind object;
  #L152912.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L152914.  v1:= new `java.lang.StringBuilder`;
  #L152918.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15291e.  v2:= "Problems with field " @kind object;
  #L152922.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L152928.  v1:= temp @kind object;
  #L15292a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L152930.  v1:= temp @kind object;
  #L152932.  v2:= " parsing default DateTime value: " @kind object;
  #L152936.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15293c.  v1:= temp @kind object;
  #L15293e.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L152944.  v1:= temp @kind object;
  #L152946.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15294c.  v1:= temp @kind object;
  #L15294e.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L152954.  v0:= temp @kind object;
  #L152956.  throw v0;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L152912;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.DateTimeType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `com.j256.ormlite.support.DatabaseResults` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L152978.  call temp:= `getLong`(v4, v5) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getLong:(I)J` @kind interface;
  #L15297e.  v0:= temp @kind wide;
  #L152980.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L152986.  v0:= temp @kind object;
  #L152988.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15299c.  v3:= (`java.lang.Long`) v3 @kind object;
  #L1529a0.  call temp:= `createInstance`(v1, v3) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L1529a6.  v0:= temp @kind object;
  #L1529a8.  return v0 @kind object;
}
