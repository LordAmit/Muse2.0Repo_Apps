record `com.j256.ormlite.field.FieldType` @kind class @AccessFlag PUBLIC {
  `java.lang.String` `com.j256.ormlite.field.FieldType.columnName` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.support.ConnectionSource` `com.j256.ormlite.field.FieldType.connectionSource` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.field.DataPersister` `com.j256.ormlite.field.FieldType.dataPersister` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.field.FieldType.dataTypeConfigObj` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.field.FieldType.defaultValue` @AccessFlag PRIVATE;
  `java.lang.reflect.Field` `com.j256.ormlite.field.FieldType.field` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.field.DatabaseFieldConfig` `com.j256.ormlite.field.FieldType.fieldConfig` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.field.FieldConverter` `com.j256.ormlite.field.FieldType.fieldConverter` @AccessFlag PRIVATE;
  `java.lang.reflect.Method` `com.j256.ormlite.field.FieldType.fieldGetMethod` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `com.j256.ormlite.field.FieldType.fieldSetMethod` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.dao.BaseDaoImpl` `com.j256.ormlite.field.FieldType.foreignDao` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.field.FieldType.foreignFieldType` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.field.FieldType.foreignIdField` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.field.FieldType.foreignRefField` @AccessFlag PRIVATE;
  `com.j256.ormlite.table.TableInfo` `com.j256.ormlite.field.FieldType.foreignTableInfo` @AccessFlag PRIVATE;
  `java.lang.String` `com.j256.ormlite.field.FieldType.generatedIdSequence` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.j256.ormlite.field.FieldType.isGeneratedId` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.j256.ormlite.field.FieldType.isId` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` `com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @AccessFlag PRIVATE;
  `java.lang.Class` `com.j256.ormlite.field.FieldType.parentClass` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.j256.ormlite.field.FieldType.tableName` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BOOLEAN` @AccessFlag PRIVATE_STATIC;
global `byte` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BYTE` @AccessFlag PRIVATE_STATIC;
global `char` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_CHAR` @AccessFlag PRIVATE_STATIC;
global `double` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_DOUBLE` @AccessFlag PRIVATE_STATIC;
global `float` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_FLOAT` @AccessFlag PRIVATE_STATIC;
global `int` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_INT` @AccessFlag PRIVATE_STATIC;
global `long` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_LONG` @AccessFlag PRIVATE_STATIC;
global `short` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_SHORT` @AccessFlag PRIVATE_STATIC;
global `java.lang.String` `@@com.j256.ormlite.field.FieldType.FOREIGN_ID_FIELD_SUFFIX` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.j256.ormlite.logger.Logger` `@@com.j256.ormlite.field.FieldType.logger` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.ThreadLocal` `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/FieldType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L14e560.  v0:= new `java.lang.ThreadLocal`;
  #L14e564.  call `<init>`(v0) @signature `Ljava/lang/ThreadLocal;.<init>:()V` @kind direct;
  #L14e56a.  `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` := v0 @kind object;
  #L14e56e.  v0:= constclass @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L14e572.  call temp:= `getLogger`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/Class;)Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L14e578.  v0:= temp @kind object;
  #L14e57a.  `@@com.j256.ormlite.field.FieldType.logger` @type ^`com.j256.ormlite.logger.Logger` := v0 @kind object;
  #L14e57e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.FieldType` v9 @kind this, `com.j256.ormlite.support.ConnectionSource` v10 @kind object, `java.lang.String` v11 @kind object, `java.lang.reflect.Field` v12 @kind object, `com.j256.ormlite.field.DatabaseFieldConfig` v13 @kind object, `java.lang.Class` v14 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.<init>:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Lcom/j256/ormlite/field/DatabaseFieldConfig;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L14e590.  v8:= 0I;
  #L14e592.  v7:= 0I;
  #L14e594.  v6:= 1I;
  #L14e596.  call `<init>`(v9) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L14e59c.  v9.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` := v10 @kind object;
  #L14e5a0.  v9.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` := v11 @kind object;
  #L14e5a4.  call temp:= `getDatabaseType`(v10) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L14e5aa.  v3:= temp @kind object;
  #L14e5ac.  v9.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` := v12 @kind object;
  #L14e5b0.  v9.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` := v14 @kind object;
  #L14e5b4.  call `postProcess`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.postProcess:()V` @kind virtual;
  #L14e5ba.  call temp:= `getType`(v12) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L14e5c0.  v4:= temp @kind object;
  #L14e5c2.  call temp:= `getDataPersister`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L14e5c8.  v0:= temp @kind object;
  #L14e5ca.  if v0 != 0 then goto L14e7aa;
  #L14e5ce.  call temp:= `getPersisterClass`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getPersisterClass:()Ljava/lang/Class;` @kind virtual;
  #L14e5d4.  v1:= temp @kind object;
  #L14e5d6.  if v1 == 0 then goto L14e5e2;
  #L14e5da.  v0:= constclass @type ^`com.j256.ormlite.field.types.VoidType` @kind object;
  #L14e5de.  if v1 != v0 then goto L14e67a;
  #L14e5e2.  call temp:= `lookupForField`(v12) @signature `Lcom/j256/ormlite/field/DataPersisterManager;.lookupForField:(Ljava/lang/reflect/Field;)Lcom/j256/ormlite/field/DataPersister;` @kind static;
  #L14e5e8.  v0:= temp @kind object;
  #L14e5ea.  v1:= v0 @kind object;
  #L14e5ec.  call temp:= `getForeignColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignColumnName:()Ljava/lang/String;` @kind virtual;
  #L14e5f2.  v0:= temp @kind object;
  #L14e5f4.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14e5fa.  v2:= temp @kind object;
  #L14e5fc.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L14e602.  v5:= temp;
  #L14e604.  if v5 != 0 then goto L14e618;
  #L14e608.  call temp:= `isForeignAutoRefresh`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L14e60e.  v5:= temp;
  #L14e610.  if v5 != 0 then goto L14e618;
  #L14e614.  if v0 == 0 then goto L14e936;
  #L14e618.  if v1 == 0 then goto L14e852;
  #L14e61c.  call temp:= `isPrimitive`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L14e622.  v5:= temp;
  #L14e624.  if v5 == 0 then goto L14e852;
  #L14e628.  v0:= new `java.lang.IllegalArgumentException`;
  #L14e62c.  v1:= new `java.lang.StringBuilder`;
  #L14e630.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e636.  v2:= "Field " @kind object;
  #L14e63a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e640.  v1:= temp @kind object;
  #L14e642.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e648.  v1:= temp @kind object;
  #L14e64a.  v2:= " is a primitive class " @kind object;
  #L14e64e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e654.  v1:= temp @kind object;
  #L14e656.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e65c.  v1:= temp @kind object;
  #L14e65e.  v2:= " but marked as foreign" @kind object;
  #L14e662.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e668.  v1:= temp @kind object;
  #L14e66a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e670.  v1:= temp @kind object;
  #L14e672.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e678.  throw v0;
  #Try_start0.  
  #L14e67a.  v0:= "getSingleton" @kind object;
  #L14e67e.  v2:= 0I;
  #L14e680.  v2:= new `java.lang.Class`[v2];
  #L14e684.  call temp:= `getDeclaredMethod`(v1, v0, v2) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #Try_end0.  
  #L14e68a.  v0:= temp @kind object;
  #L14e68c.  v2:= 0I;
  #L14e68e.  v5:= 0I;
  #Try_start1.  
  #L14e690.  v5:= new `java.lang.Object`[v5];
  #L14e694.  call temp:= `invoke`(v0, v2, v5) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L14e69a.  v0:= temp @kind object;
  #L14e69c.  if v0 != 0 then goto L14e770;
  #L14e6a0.  v0:= new `java.sql.SQLException`;
  #L14e6a4.  v2:= new `java.lang.StringBuilder`;
  #L14e6a8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e6ae.  v3:= "Static getSingleton method should not return null on class " @kind object;
  #L14e6b2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e6b8.  v2:= temp @kind object;
  #L14e6ba.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e6c0.  v1:= temp @kind object;
  #L14e6c2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e6c8.  v1:= temp @kind object;
  #L14e6ca.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e6d0.  throw v0;
  #L14e6d2.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L14e6d4.  v2:= new `java.lang.StringBuilder`;
  #L14e6d8.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e6de.  v3:= "Could not find getSingleton static method on class " @kind object;
  #L14e6e2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e6e8.  v2:= temp @kind object;
  #L14e6ea.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e6f0.  v1:= temp @kind object;
  #L14e6f2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e6f8.  v1:= temp @kind object;
  #L14e6fa.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L14e700.  v0:= temp @kind object;
  #L14e702.  throw v0;
  #L14e704.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L14e706.  v2:= new `java.lang.StringBuilder`;
  #L14e70a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e710.  v3:= "Could not run getSingleton method on class " @kind object;
  #L14e714.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e71a.  v2:= temp @kind object;
  #L14e71c.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e722.  v1:= temp @kind object;
  #L14e724.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e72a.  v1:= temp @kind object;
  #L14e72c.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L14e732.  v0:= temp @kind object;
  #L14e734.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L14e73a.  v0:= temp @kind object;
  #L14e73c.  throw v0;
  #L14e73e.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L14e740.  v2:= new `java.lang.StringBuilder`;
  #L14e744.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e74a.  v3:= "Could not run getSingleton method on class " @kind object;
  #L14e74e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e754.  v2:= temp @kind object;
  #L14e756.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e75c.  v1:= temp @kind object;
  #L14e75e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e764.  v1:= temp @kind object;
  #L14e766.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L14e76c.  v0:= temp @kind object;
  #L14e76e.  throw v0;
  #Try_start2.  
  #L14e770.  v0:= (`com.j256.ormlite.field.DataPersister`) v0 @kind object;
  #Try_end2.  
  #L14e774.  goto L14e5ea;
  #L14e778.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L14e77a.  v2:= new `java.lang.StringBuilder`;
  #L14e77e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e784.  v3:= "Could not cast result of static getSingleton method to DataPersister from class " @kind object;
  #L14e788.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e78e.  v2:= temp @kind object;
  #L14e790.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e796.  v1:= temp @kind object;
  #L14e798.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e79e.  v1:= temp @kind object;
  #L14e7a0.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L14e7a6.  v0:= temp @kind object;
  #L14e7a8.  throw v0;
  #L14e7aa.  call temp:= `getDataPersister`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L14e7b0.  v0:= temp @kind object;
  #L14e7b2.  call temp:= `isValidForField`(v0, v12) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidForField:(Ljava/lang/reflect/Field;)Z` @kind interface;
  #L14e7b8.  v1:= temp;
  #L14e7ba.  if v1 != 0 then goto L14efe6;
  #L14e7be.  v1:= new `java.lang.StringBuilder`;
  #L14e7c2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e7c8.  v2:= "Field class " @kind object;
  #L14e7cc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e7d2.  v2:= temp @kind object;
  #L14e7d4.  call temp:= `getName`(v4) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L14e7da.  v3:= temp @kind object;
  #L14e7dc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e7e2.  v2:= " for field " @kind object;
  #L14e7e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e7ec.  v2:= temp @kind object;
  #L14e7ee.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e7f4.  v2:= " is not valid for type " @kind object;
  #L14e7f8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e7fe.  v2:= temp @kind object;
  #L14e800.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e806.  call temp:= `getPrimaryClass`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.getPrimaryClass:()Ljava/lang/Class;` @kind interface;
  #L14e80c.  v0:= temp @kind object;
  #L14e80e.  if v0 == 0 then goto L14e83e;
  #L14e812.  v2:= new `java.lang.StringBuilder`;
  #L14e816.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e81c.  v3:= ", maybe should be " @kind object;
  #L14e820.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e826.  v2:= temp @kind object;
  #L14e828.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e82e.  v0:= temp @kind object;
  #L14e830.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e836.  v0:= temp @kind object;
  #L14e838.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e83e.  v0:= new `java.lang.IllegalArgumentException`;
  #L14e842.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e848.  v1:= temp @kind object;
  #L14e84a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e850.  throw v0;
  #L14e852.  if v0 != 0 then goto L14e906;
  #L14e856.  v0:= new `java.lang.StringBuilder`;
  #L14e85a.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e860.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e866.  v0:= temp @kind object;
  #L14e868.  v2:= "_id" @kind object;
  #L14e86c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e872.  v0:= temp @kind object;
  #L14e874.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e87a.  v0:= temp @kind object;
  #L14e87c.  v2:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L14e880.  call temp:= `isAssignableFrom`(v2, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L14e886.  v2:= temp;
  #L14e888.  if v2 == 0 then goto L14ea70;
  #L14e88c.  v0:= new `java.sql.SQLException`;
  #L14e890.  v1:= new `java.lang.StringBuilder`;
  #L14e894.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e89a.  v2:= "Field '" @kind object;
  #L14e89e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e8a4.  v1:= temp @kind object;
  #L14e8a6.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14e8ac.  v2:= temp @kind object;
  #L14e8ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e8b4.  v1:= temp @kind object;
  #L14e8b6.  v2:= "' in class " @kind object;
  #L14e8ba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e8c0.  v1:= temp @kind object;
  #L14e8c2.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e8c8.  v1:= temp @kind object;
  #L14e8ca.  v2:= "' should use the @" @kind object;
  #L14e8ce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e8d4.  v1:= temp @kind object;
  #L14e8d6.  v2:= constclass @type ^`com.j256.ormlite.field.ForeignCollectionField` @kind object;
  #L14e8da.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L14e8e0.  v2:= temp @kind object;
  #L14e8e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e8e8.  v1:= temp @kind object;
  #L14e8ea.  v2:= " annotation not foreign=true" @kind object;
  #L14e8ee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e8f4.  v1:= temp @kind object;
  #L14e8f6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e8fc.  v1:= temp @kind object;
  #L14e8fe.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e904.  throw v0;
  #L14e906.  v5:= new `java.lang.StringBuilder`;
  #L14e90a.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e910.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e916.  v2:= temp @kind object;
  #L14e918.  v5:= "_" @kind object;
  #L14e91c.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e922.  v2:= temp @kind object;
  #L14e924.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e92a.  v0:= temp @kind object;
  #L14e92c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e932.  v0:= temp @kind object;
  #L14e934.  goto L14e87c;
  #L14e936.  call temp:= `isForeignCollection`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L14e93c.  v0:= temp;
  #L14e93e.  if v0 == 0 then goto L14eae2;
  #L14e942.  v0:= constclass @type ^`java.util.Collection` @kind object;
  #L14e946.  if v4 == v0 then goto L14e9c0;
  #L14e94a.  v0:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L14e94e.  call temp:= `isAssignableFrom`(v0, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L14e954.  v0:= temp;
  #L14e956.  if v0 != 0 then goto L14e9c0;
  #L14e95a.  v0:= new `java.sql.SQLException`;
  #L14e95e.  v1:= new `java.lang.StringBuilder`;
  #L14e962.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e968.  v2:= "Field class for '" @kind object;
  #L14e96c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e972.  v1:= temp @kind object;
  #L14e974.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14e97a.  v2:= temp @kind object;
  #L14e97c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e982.  v1:= temp @kind object;
  #L14e984.  v2:= "' must be of class " @kind object;
  #L14e988.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e98e.  v1:= temp @kind object;
  #L14e990.  v2:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L14e994.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L14e99a.  v2:= temp @kind object;
  #L14e99c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e9a2.  v1:= temp @kind object;
  #L14e9a4.  v2:= " or Collection." @kind object;
  #L14e9a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e9ae.  v1:= temp @kind object;
  #L14e9b0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14e9b6.  v1:= temp @kind object;
  #L14e9b8.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14e9be.  throw v0;
  #L14e9c0.  call temp:= `getGenericType`(v12) @signature `Ljava/lang/reflect/Field;.getGenericType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L14e9c6.  v0:= temp @kind object;
  #L14e9c8.  v4:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L14e9cc.  if v4 != 0 then goto L14ea16;
  #L14e9d0.  v0:= new `java.sql.SQLException`;
  #L14e9d4.  v1:= new `java.lang.StringBuilder`;
  #L14e9d8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14e9de.  v2:= "Field class for '" @kind object;
  #L14e9e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e9e8.  v1:= temp @kind object;
  #L14e9ea.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14e9f0.  v2:= temp @kind object;
  #L14e9f2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14e9f8.  v1:= temp @kind object;
  #L14e9fa.  v2:= "' must be a parameterized Collection." @kind object;
  #L14e9fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ea04.  v1:= temp @kind object;
  #L14ea06.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ea0c.  v1:= temp @kind object;
  #L14ea0e.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14ea14.  throw v0;
  #L14ea16.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L14ea1a.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L14ea20.  v0:= temp @kind object;
  #L14ea22.  v0:= length @variable v0;
  #L14ea24.  if v0 != 0 then goto L14ea6e;
  #L14ea28.  v0:= new `java.sql.SQLException`;
  #L14ea2c.  v1:= new `java.lang.StringBuilder`;
  #L14ea30.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14ea36.  v2:= "Field class for '" @kind object;
  #L14ea3a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ea40.  v1:= temp @kind object;
  #L14ea42.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14ea48.  v2:= temp @kind object;
  #L14ea4a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ea50.  v1:= temp @kind object;
  #L14ea52.  v2:= "' must be a parameterized Collection with at least 1 type." @kind object;
  #L14ea56.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ea5c.  v1:= temp @kind object;
  #L14ea5e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ea64.  v1:= temp @kind object;
  #L14ea66.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14ea6c.  throw v0;
  #L14ea6e.  v0:= v2 @kind object;
  #L14ea70.  call temp:= `getColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L14ea76.  v2:= temp @kind object;
  #L14ea78.  if v2 != 0 then goto L14ec2c;
  #L14ea7c.  v9.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L14ea80.  v9.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` := v13 @kind object;
  #L14ea84.  call temp:= `isId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isId:()Z` @kind virtual;
  #L14ea8a.  v0:= temp;
  #L14ea8c.  if v0 == 0 then goto L14ecae;
  #L14ea90.  call temp:= `isGeneratedId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isGeneratedId:()Z` @kind virtual;
  #L14ea96.  v0:= temp;
  #L14ea98.  if v0 != 0 then goto L14eaa8;
  #L14ea9c.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L14eaa2.  v0:= temp @kind object;
  #L14eaa4.  if v0 == 0 then goto L14ec3c;
  #L14eaa8.  v0:= new `java.lang.IllegalArgumentException`;
  #L14eaac.  v1:= new `java.lang.StringBuilder`;
  #L14eab0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14eab6.  v2:= "Must specify one of id, generatedId, and generatedIdSequence with " @kind object;
  #L14eaba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eac0.  v1:= temp @kind object;
  #L14eac2.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14eac8.  v2:= temp @kind object;
  #L14eaca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ead0.  v1:= temp @kind object;
  #L14ead2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ead8.  v1:= temp @kind object;
  #L14eada.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14eae0.  throw v0;
  #L14eae2.  if v1 != 0 then goto L14efe0;
  #L14eae6.  call temp:= `isForeignCollection`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L14eaec.  v0:= temp;
  #L14eaee.  if v0 != 0 then goto L14efe0;
  #L14eaf2.  v0:= constclass @type ^`byte`[] @kind object;
  #L14eaf6.  call temp:= `isAssignableFrom`(v0, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L14eafc.  v0:= temp;
  #L14eafe.  if v0 == 0 then goto L14eb5c;
  #L14eb02.  v0:= new `java.sql.SQLException`;
  #L14eb06.  v1:= new `java.lang.StringBuilder`;
  #L14eb0a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14eb10.  v2:= "ORMLite does not know how to store " @kind object;
  #L14eb14.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eb1a.  v1:= temp @kind object;
  #L14eb1c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eb22.  v1:= temp @kind object;
  #L14eb24.  v2:= " for field '" @kind object;
  #L14eb28.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eb2e.  v1:= temp @kind object;
  #L14eb30.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14eb36.  v2:= temp @kind object;
  #L14eb38.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eb3e.  v1:= temp @kind object;
  #L14eb40.  v2:= "'. byte[] fields must specify dataType=DataType.BYTE_ARRAY or SERIALIZABLE" @kind object;
  #L14eb44.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eb4a.  v1:= temp @kind object;
  #L14eb4c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14eb52.  v1:= temp @kind object;
  #L14eb54.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14eb5a.  throw v0;
  #L14eb5c.  v0:= constclass @type ^`java.io.Serializable` @kind object;
  #L14eb60.  call temp:= `isAssignableFrom`(v0, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L14eb66.  v0:= temp;
  #L14eb68.  if v0 == 0 then goto L14ebd2;
  #L14eb6c.  v0:= new `java.sql.SQLException`;
  #L14eb70.  v1:= new `java.lang.StringBuilder`;
  #L14eb74.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14eb7a.  v2:= "ORMLite does not know how to store " @kind object;
  #L14eb7e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eb84.  v1:= temp @kind object;
  #L14eb86.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eb8c.  v1:= temp @kind object;
  #L14eb8e.  v2:= " for field '" @kind object;
  #L14eb92.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eb98.  v1:= temp @kind object;
  #L14eb9a.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14eba0.  v2:= temp @kind object;
  #L14eba2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eba8.  v1:= temp @kind object;
  #L14ebaa.  v2:= "'.  Use another class, custom persister, or to serialize it use " @kind object;
  #L14ebae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ebb4.  v1:= temp @kind object;
  #L14ebb6.  v2:= "dataType=DataType.SERIALIZABLE" @kind object;
  #L14ebba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ebc0.  v1:= temp @kind object;
  #L14ebc2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ebc8.  v1:= temp @kind object;
  #L14ebca.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14ebd0.  throw v0;
  #L14ebd2.  v0:= new `java.lang.IllegalArgumentException`;
  #L14ebd6.  v1:= new `java.lang.StringBuilder`;
  #L14ebda.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14ebe0.  v2:= "ORMLite does not know how to store " @kind object;
  #L14ebe4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ebea.  v1:= temp @kind object;
  #L14ebec.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ebf2.  v1:= temp @kind object;
  #L14ebf4.  v2:= " for field " @kind object;
  #L14ebf8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ebfe.  v1:= temp @kind object;
  #L14ec00.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14ec06.  v2:= temp @kind object;
  #L14ec08.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ec0e.  v1:= temp @kind object;
  #L14ec10.  v2:= ". Use another class or a custom persister." @kind object;
  #L14ec14.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ec1a.  v1:= temp @kind object;
  #L14ec1c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ec22.  v1:= temp @kind object;
  #L14ec24.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14ec2a.  throw v0;
  #L14ec2c.  call temp:= `getColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L14ec32.  v0:= temp @kind object;
  #L14ec34.  v9.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L14ec38.  goto L14ea80;
  #L14ec3c.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v6 @kind boolean;
  #L14ec40.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v8 @kind boolean;
  #L14ec44.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v7 @kind object;
  #L14ec48.  v0:= v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` @kind boolean;
  #L14ec4c.  if v0 == 0 then goto L14ed70;
  #L14ec50.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L14ec56.  v0:= temp;
  #L14ec58.  if v0 != 0 then goto L14ec68;
  #L14ec5c.  call temp:= `isForeignAutoRefresh`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L14ec62.  v0:= temp;
  #L14ec64.  if v0 == 0 then goto L14ed70;
  #L14ec68.  v0:= new `java.lang.IllegalArgumentException`;
  #L14ec6c.  v1:= new `java.lang.StringBuilder`;
  #L14ec70.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14ec76.  v2:= "Id field " @kind object;
  #L14ec7a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ec80.  v1:= temp @kind object;
  #L14ec82.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14ec88.  v2:= temp @kind object;
  #L14ec8a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ec90.  v1:= temp @kind object;
  #L14ec92.  v2:= " cannot also be a foreign object" @kind object;
  #L14ec96.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ec9c.  v1:= temp @kind object;
  #L14ec9e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14eca4.  v1:= temp @kind object;
  #L14eca6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14ecac.  throw v0;
  #L14ecae.  call temp:= `isGeneratedId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isGeneratedId:()Z` @kind virtual;
  #L14ecb4.  v0:= temp;
  #L14ecb6.  if v0 == 0 then goto L14ed28;
  #L14ecba.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L14ecc0.  v0:= temp @kind object;
  #L14ecc2.  if v0 == 0 then goto L14ed00;
  #L14ecc6.  v0:= new `java.lang.IllegalArgumentException`;
  #L14ecca.  v1:= new `java.lang.StringBuilder`;
  #L14ecce.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14ecd4.  v2:= "Must specify one of id, generatedId, and generatedIdSequence with " @kind object;
  #L14ecd8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ecde.  v1:= temp @kind object;
  #L14ece0.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14ece6.  v2:= temp @kind object;
  #L14ece8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ecee.  v1:= temp @kind object;
  #L14ecf0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ecf6.  v1:= temp @kind object;
  #L14ecf8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14ecfe.  throw v0;
  #L14ed00.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v6 @kind boolean;
  #L14ed04.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v6 @kind boolean;
  #L14ed08.  call temp:= `isIdSequenceNeeded`(v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.isIdSequenceNeeded:()Z` @kind interface;
  #L14ed0e.  v0:= temp;
  #L14ed10.  if v0 == 0 then goto L14ed22;
  #L14ed14.  call temp:= `generateIdSequenceName`(v3, v11, v9) @signature `Lcom/j256/ormlite/db/DatabaseType;.generateIdSequenceName:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind interface;
  #L14ed1a.  v0:= temp @kind object;
  #L14ed1c.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v0 @kind object;
  #L14ed20.  goto L14ec48;
  #L14ed22.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v7 @kind object;
  #L14ed26.  goto L14ec48;
  #L14ed28.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L14ed2e.  v0:= temp @kind object;
  #L14ed30.  if v0 == 0 then goto L14ed60;
  #L14ed34.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v6 @kind boolean;
  #L14ed38.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v6 @kind boolean;
  #L14ed3c.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L14ed42.  v0:= temp @kind object;
  #L14ed44.  call temp:= `isEntityNamesMustBeUpCase`(v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.isEntityNamesMustBeUpCase:()Z` @kind interface;
  #L14ed4a.  v2:= temp;
  #L14ed4c.  if v2 == 0 then goto L14ed58;
  #L14ed50.  call temp:= `upCaseEntityName`(v3, v0) @signature `Lcom/j256/ormlite/db/DatabaseType;.upCaseEntityName:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L14ed56.  v0:= temp @kind object;
  #L14ed58.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v0 @kind object;
  #L14ed5c.  goto L14ec48;
  #L14ed60.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v8 @kind boolean;
  #L14ed64.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v8 @kind boolean;
  #L14ed68.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v7 @kind object;
  #L14ed6c.  goto L14ec48;
  #L14ed70.  call temp:= `isUseGetSet`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isUseGetSet:()Z` @kind virtual;
  #L14ed76.  v0:= temp;
  #L14ed78.  if v0 == 0 then goto L14edf2;
  #L14ed7c.  call temp:= `findGetMethod`(v12, v6) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.findGetMethod:(Ljava/lang/reflect/Field;Z)Ljava/lang/reflect/Method;` @kind static;
  #L14ed82.  v0:= temp @kind object;
  #L14ed84.  v9.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L14ed88.  call temp:= `findSetMethod`(v12, v6) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.findSetMethod:(Ljava/lang/reflect/Field;Z)Ljava/lang/reflect/Method;` @kind static;
  #L14ed8e.  v0:= temp @kind object;
  #L14ed90.  v9.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L14ed94.  call temp:= `isAllowGeneratedIdInsert`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isAllowGeneratedIdInsert:()Z` @kind virtual;
  #L14ed9a.  v0:= temp;
  #L14ed9c.  if v0 == 0 then goto L14ee5c;
  #L14eda0.  call temp:= `isGeneratedId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isGeneratedId:()Z` @kind virtual;
  #L14eda6.  v0:= temp;
  #L14eda8.  if v0 != 0 then goto L14ee5c;
  #L14edac.  v0:= new `java.lang.IllegalArgumentException`;
  #L14edb0.  v1:= new `java.lang.StringBuilder`;
  #L14edb4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14edba.  v2:= "Field " @kind object;
  #L14edbe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14edc4.  v1:= temp @kind object;
  #L14edc6.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14edcc.  v2:= temp @kind object;
  #L14edce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14edd4.  v1:= temp @kind object;
  #L14edd6.  v2:= " must be a generated-id if allowGeneratedIdInsert = true" @kind object;
  #L14edda.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ede0.  v1:= temp @kind object;
  #L14ede2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ede8.  v1:= temp @kind object;
  #L14edea.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14edf0.  throw v0;
  #L14edf2.  call temp:= `isAccessible`(v12) @signature `Ljava/lang/reflect/Field;.isAccessible:()Z` @kind virtual;
  #L14edf8.  v0:= temp;
  #L14edfa.  if v0 != 0 then goto L14ee0a;
  #Try_start3.  
  #L14edfe.  v0:= v9.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14ee02.  v2:= 1I;
  #L14ee04.  call `setAccessible`(v0, v2) @signature `Ljava/lang/reflect/Field;.setAccessible:(Z)V` @kind virtual;
  #Try_end3.  
  #L14ee0a.  v9.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` := v7 @kind object;
  #L14ee0e.  v9.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` := v7 @kind object;
  #L14ee12.  goto L14ed94;
  #L14ee14.  v0:= Exception @type ^`java.lang.SecurityException` @kind object;
  #L14ee16.  v0:= new `java.lang.IllegalArgumentException`;
  #L14ee1a.  v1:= new `java.lang.StringBuilder`;
  #L14ee1e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14ee24.  v2:= "Could not open access to field " @kind object;
  #L14ee28.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ee2e.  v1:= temp @kind object;
  #L14ee30.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14ee36.  v2:= temp @kind object;
  #L14ee38.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ee3e.  v1:= temp @kind object;
  #L14ee40.  v2:= ".  You may have to set useGetSet=true to fix." @kind object;
  #L14ee44.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ee4a.  v1:= temp @kind object;
  #L14ee4c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ee52.  v1:= temp @kind object;
  #L14ee54.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14ee5a.  throw v0;
  #L14ee5c.  call temp:= `isForeignAutoRefresh`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L14ee62.  v0:= temp;
  #L14ee64.  if v0 == 0 then goto L14eeba;
  #L14ee68.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L14ee6e.  v0:= temp;
  #L14ee70.  if v0 != 0 then goto L14eeba;
  #L14ee74.  v0:= new `java.lang.IllegalArgumentException`;
  #L14ee78.  v1:= new `java.lang.StringBuilder`;
  #L14ee7c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14ee82.  v2:= "Field " @kind object;
  #L14ee86.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ee8c.  v1:= temp @kind object;
  #L14ee8e.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14ee94.  v2:= temp @kind object;
  #L14ee96.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ee9c.  v1:= temp @kind object;
  #L14ee9e.  v2:= " must have foreign = true if foreignAutoRefresh = true" @kind object;
  #L14eea2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eea8.  v1:= temp @kind object;
  #L14eeaa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14eeb0.  v1:= temp @kind object;
  #L14eeb2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14eeb8.  throw v0;
  #L14eeba.  call temp:= `isForeignAutoCreate`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoCreate:()Z` @kind virtual;
  #L14eec0.  v0:= temp;
  #L14eec2.  if v0 == 0 then goto L14ef18;
  #L14eec6.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L14eecc.  v0:= temp;
  #L14eece.  if v0 != 0 then goto L14ef18;
  #L14eed2.  v0:= new `java.lang.IllegalArgumentException`;
  #L14eed6.  v1:= new `java.lang.StringBuilder`;
  #L14eeda.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14eee0.  v2:= "Field " @kind object;
  #L14eee4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eeea.  v1:= temp @kind object;
  #L14eeec.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14eef2.  v2:= temp @kind object;
  #L14eef4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14eefa.  v1:= temp @kind object;
  #L14eefc.  v2:= " must have foreign = true if foreignAutoCreate = true" @kind object;
  #L14ef00.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ef06.  v1:= temp @kind object;
  #L14ef08.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ef0e.  v1:= temp @kind object;
  #L14ef10.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14ef16.  throw v0;
  #L14ef18.  call temp:= `getForeignColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignColumnName:()Ljava/lang/String;` @kind virtual;
  #L14ef1e.  v0:= temp @kind object;
  #L14ef20.  if v0 == 0 then goto L14ef76;
  #L14ef24.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L14ef2a.  v0:= temp;
  #L14ef2c.  if v0 != 0 then goto L14ef76;
  #L14ef30.  v0:= new `java.lang.IllegalArgumentException`;
  #L14ef34.  v1:= new `java.lang.StringBuilder`;
  #L14ef38.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14ef3e.  v2:= "Field " @kind object;
  #L14ef42.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ef48.  v1:= temp @kind object;
  #L14ef4a.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14ef50.  v2:= temp @kind object;
  #L14ef52.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ef58.  v1:= temp @kind object;
  #L14ef5a.  v2:= " must have foreign = true if foreignColumnName is set" @kind object;
  #L14ef5e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ef64.  v1:= temp @kind object;
  #L14ef66.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ef6c.  v1:= temp @kind object;
  #L14ef6e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14ef74.  throw v0;
  #L14ef76.  call temp:= `isVersion`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isVersion:()Z` @kind virtual;
  #L14ef7c.  v0:= temp;
  #L14ef7e.  if v0 == 0 then goto L14efd8;
  #L14ef82.  if v1 == 0 then goto L14ef92;
  #L14ef86.  call temp:= `isValidForVersion`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidForVersion:()Z` @kind interface;
  #L14ef8c.  v0:= temp;
  #L14ef8e.  if v0 != 0 then goto L14efd8;
  #L14ef92.  v0:= new `java.lang.IllegalArgumentException`;
  #L14ef96.  v1:= new `java.lang.StringBuilder`;
  #L14ef9a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14efa0.  v2:= "Field " @kind object;
  #L14efa4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14efaa.  v1:= temp @kind object;
  #L14efac.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14efb2.  v2:= temp @kind object;
  #L14efb4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14efba.  v1:= temp @kind object;
  #L14efbc.  v2:= " is not a valid type to be a version field" @kind object;
  #L14efc0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14efc6.  v1:= temp @kind object;
  #L14efc8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14efce.  v1:= temp @kind object;
  #L14efd0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14efd6.  throw v0;
  #L14efd8.  call `assignDataType`(v9, v3, v1) @signature `Lcom/j256/ormlite/field/FieldType;.assignDataType:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/DataPersister;)V` @kind direct;
  #L14efde.  return @kind void;
  #L14efe0.  v0:= v2 @kind object;
  #L14efe2.  goto L14ea70;
  #L14efe6.  v1:= v0 @kind object;
  #L14efe8.  goto L14e5ec;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L14e6d2;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start1..Try_end1] goto L14e704;
  catch `java.lang.Exception` @[Try_start1..Try_end1] goto L14e73e;
  catch `java.lang.Exception` @[Try_start2..Try_end2] goto L14e778;
  catch `java.lang.SecurityException` @[Try_start3..Try_end3] goto L14ee14;
}
procedure `void` `assignDataType`(`com.j256.ormlite.field.FieldType` v6 @kind this, `com.j256.ormlite.db.DatabaseType` v7 @kind object, `com.j256.ormlite.field.DataPersister` v8 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.assignDataType:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/DataPersister;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14f038.  call temp:= `getDataPersister`(v7, v8, v6) @signature `Lcom/j256/ormlite/db/DatabaseType;.getDataPersister:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/DataPersister;` @kind interface;
  #L14f03e.  v0:= temp @kind object;
  #L14f040.  v6.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` := v0 @kind object;
  #L14f044.  if v0 != 0 then goto L14f0a6;
  #L14f048.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f04c.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L14f052.  v0:= temp;
  #L14f054.  if v0 != 0 then goto L14f28a;
  #L14f058.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f05c.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L14f062.  v0:= temp;
  #L14f064.  if v0 != 0 then goto L14f28a;
  #L14f068.  v0:= new `java.sql.SQLException`;
  #L14f06c.  v1:= new `java.lang.StringBuilder`;
  #L14f070.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f076.  v2:= "Data persister for field " @kind object;
  #L14f07a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f080.  v1:= temp @kind object;
  #L14f082.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f088.  v1:= temp @kind object;
  #L14f08a.  v2:= " is null but the field is not a foreign or foreignCollection" @kind object;
  #L14f08e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f094.  v1:= temp @kind object;
  #L14f096.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f09c.  v1:= temp @kind object;
  #L14f09e.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f0a4.  throw v0;
  #L14f0a6.  call temp:= `getFieldConverter`(v7, v0, v6) @signature `Lcom/j256/ormlite/db/DatabaseType;.getFieldConverter:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/FieldConverter;` @kind interface;
  #L14f0ac.  v1:= temp @kind object;
  #L14f0ae.  v6.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` := v1 @kind object;
  #L14f0b2.  v1:= v6.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` @kind boolean;
  #L14f0b6.  if v1 == 0 then goto L14f190;
  #L14f0ba.  call temp:= `isValidGeneratedType`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidGeneratedType:()Z` @kind interface;
  #L14f0c0.  v1:= temp;
  #L14f0c2.  if v1 != 0 then goto L14f190;
  #L14f0c6.  v1:= new `java.lang.StringBuilder`;
  #L14f0ca.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f0d0.  v2:= "Generated-id field '" @kind object;
  #L14f0d4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f0da.  v2:= temp @kind object;
  #L14f0dc.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14f0e0.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14f0e6.  v3:= temp @kind object;
  #L14f0e8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f0ee.  v2:= "' in " @kind object;
  #L14f0f2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f0f8.  v2:= temp @kind object;
  #L14f0fa.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14f0fe.  call temp:= `getDeclaringClass`(v3) @signature `Ljava/lang/reflect/Field;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L14f104.  v3:= temp @kind object;
  #L14f106.  call temp:= `getSimpleName`(v3) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L14f10c.  v3:= temp @kind object;
  #L14f10e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f114.  v2:= " can't be type " @kind object;
  #L14f118.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f11e.  v2:= temp @kind object;
  #L14f120.  call temp:= `getSqlType`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L14f126.  v0:= temp @kind object;
  #L14f128.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f12e.  v0:= ".  Must be one of: " @kind object;
  #L14f132.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f138.  call temp:= `values`() @signature `Lcom/j256/ormlite/field/DataType;.values:()[Lcom/j256/ormlite/field/DataType;` @kind static;
  #L14f13e.  v2:= temp @kind object;
  #L14f140.  v3:= length @variable v2;
  #L14f142.  v0:= 0I;
  #L14f144.  if v0 >= v3 then goto L14f17c;
  #L14f148.  v4:= v2[v0] @kind object;
  #L14f14c.  call temp:= `getDataPersister`(v4) @signature `Lcom/j256/ormlite/field/DataType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L14f152.  v5:= temp @kind object;
  #L14f154.  if v5 == 0 then goto L14f176;
  #L14f158.  call temp:= `isValidGeneratedType`(v5) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidGeneratedType:()Z` @kind interface;
  #L14f15e.  v5:= temp;
  #L14f160.  if v5 == 0 then goto L14f176;
  #L14f164.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f16a.  v4:= temp @kind object;
  #L14f16c.  v5:= 32I;
  #L14f170.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f176.  v0:= v0 + 1;
  #L14f17a.  goto L14f144;
  #L14f17c.  v0:= new `java.lang.IllegalArgumentException`;
  #L14f180.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f186.  v1:= temp @kind object;
  #L14f188.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f18e.  throw v0;
  #L14f190.  v1:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f194.  call temp:= `isThrowIfNull`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isThrowIfNull:()Z` @kind virtual;
  #L14f19a.  v1:= temp;
  #L14f19c.  if v1 == 0 then goto L14f1f6;
  #L14f1a0.  call temp:= `isPrimitive`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L14f1a6.  v1:= temp;
  #L14f1a8.  if v1 != 0 then goto L14f1f6;
  #L14f1ac.  v0:= new `java.sql.SQLException`;
  #L14f1b0.  v1:= new `java.lang.StringBuilder`;
  #L14f1b4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f1ba.  v2:= "Field " @kind object;
  #L14f1be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f1c4.  v1:= temp @kind object;
  #L14f1c6.  v2:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14f1ca.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14f1d0.  v2:= temp @kind object;
  #L14f1d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f1d8.  v1:= temp @kind object;
  #L14f1da.  v2:= " must be a primitive if set with throwIfNull" @kind object;
  #L14f1de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f1e4.  v1:= temp @kind object;
  #L14f1e6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f1ec.  v1:= temp @kind object;
  #L14f1ee.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f1f4.  throw v0;
  #L14f1f6.  v1:= v6.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` @kind boolean;
  #L14f1fa.  if v1 == 0 then goto L14f268;
  #L14f1fe.  call temp:= `isAppropriateId`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isAppropriateId:()Z` @kind interface;
  #L14f204.  v1:= temp;
  #L14f206.  if v1 != 0 then goto L14f268;
  #L14f20a.  v1:= new `java.sql.SQLException`;
  #L14f20e.  v2:= new `java.lang.StringBuilder`;
  #L14f212.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f218.  v3:= "Field '" @kind object;
  #L14f21c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f222.  v2:= temp @kind object;
  #L14f224.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14f228.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14f22e.  v3:= temp @kind object;
  #L14f230.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f236.  v2:= temp @kind object;
  #L14f238.  v3:= "' is of data type " @kind object;
  #L14f23c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f242.  v2:= temp @kind object;
  #L14f244.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f24a.  v0:= temp @kind object;
  #L14f24c.  v2:= " which cannot be the ID field" @kind object;
  #L14f250.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f256.  v0:= temp @kind object;
  #L14f258.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f25e.  v0:= temp @kind object;
  #L14f260.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f266.  throw v1;
  #L14f268.  call temp:= `makeConfigObject`(v0, v6) @signature `Lcom/j256/ormlite/field/DataPersister;.makeConfigObject:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;` @kind interface;
  #L14f26e.  v0:= temp @kind object;
  #L14f270.  v6.`com.j256.ormlite.field.FieldType.dataTypeConfigObj` @type ^`java.lang.Object` := v0 @kind object;
  #L14f274.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f278.  call temp:= `getDefaultValue`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getDefaultValue:()Ljava/lang/String;` @kind virtual;
  #L14f27e.  v0:= temp @kind object;
  #L14f280.  if v0 != 0 then goto L14f28c;
  #L14f284.  v0:= 0I;
  #L14f286.  v6.`com.j256.ormlite.field.FieldType.defaultValue` @type ^`java.lang.Object` := v0 @kind object;
  #L14f28a.  return @kind void;
  #L14f28c.  v1:= v6.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` @kind boolean;
  #L14f290.  if v1 == 0 then goto L14f2f2;
  #L14f294.  v1:= new `java.sql.SQLException`;
  #L14f298.  v2:= new `java.lang.StringBuilder`;
  #L14f29c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f2a2.  v3:= "Field '" @kind object;
  #L14f2a6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f2ac.  v2:= temp @kind object;
  #L14f2ae.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14f2b2.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14f2b8.  v3:= temp @kind object;
  #L14f2ba.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f2c0.  v2:= temp @kind object;
  #L14f2c2.  v3:= "' cannot be a generatedId and have a default value '" @kind object;
  #L14f2c6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f2cc.  v2:= temp @kind object;
  #L14f2ce.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f2d4.  v0:= temp @kind object;
  #L14f2d6.  v2:= "'" @kind object;
  #L14f2da.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f2e0.  v0:= temp @kind object;
  #L14f2e2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f2e8.  v0:= temp @kind object;
  #L14f2ea.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f2f0.  throw v1;
  #L14f2f2.  v1:= v6.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L14f2f6.  call temp:= `parseDefaultString`(v1, v6, v0) @signature `Lcom/j256/ormlite/field/FieldConverter;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @kind interface;
  #L14f2fc.  v0:= temp @kind object;
  #L14f2fe.  v6.`com.j256.ormlite.field.FieldType.defaultValue` @type ^`java.lang.Object` := v0 @kind object;
  #L14f302.  goto L14f28a;
}
procedure `com.j256.ormlite.field.FieldType` `createFieldType`(`com.j256.ormlite.support.ConnectionSource` v6 @kind object, `java.lang.String` v7 @kind object, `java.lang.reflect.Field` v8 @kind object, `java.lang.Class` v9 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createFieldType:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Ljava/lang/Class;)Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14f314.  call temp:= `getDatabaseType`(v6) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L14f31a.  v0:= temp @kind object;
  #L14f31c.  call temp:= `fromField`(v0, v7, v8) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.fromField:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/reflect/Field;)Lcom/j256/ormlite/field/DatabaseFieldConfig;` @kind static;
  #L14f322.  v4:= temp @kind object;
  #L14f324.  if v4 != 0 then goto L14f32c;
  #L14f328.  v0:= 0I;
  #L14f32a.  return v0 @kind object;
  #L14f32c.  v0:= new `com.j256.ormlite.field.FieldType`;
  #L14f330.  v1:= v6 @kind object;
  #L14f332.  v2:= v7 @kind object;
  #L14f334.  v3:= v8 @kind object;
  #L14f336.  v5:= v9 @kind object;
  #L14f338.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/field/FieldType;.<init>:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Lcom/j256/ormlite/field/DatabaseFieldConfig;Ljava/lang/Class;)V` @kind direct;
  #L14f33e.  goto L14f32a;
}
procedure `java.lang.Object` `createForeignObject`(`com.j256.ormlite.field.FieldType` v4 @kind this, `java.lang.Object` v5 @kind object, `com.j256.ormlite.dao.ObjectCache` v6 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignObject:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14f350.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L14f354.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L14f35a.  v0:= temp @kind object;
  #L14f35c.  v0:= (`com.j256.ormlite.field.FieldType$LevelCounters`) v0 @kind object;
  #L14f360.  if v0 != 0 then goto L14f394;
  #L14f364.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f368.  call temp:= `isForeignAutoRefresh`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L14f36e.  v0:= temp;
  #L14f370.  if v0 != 0 then goto L14f37e;
  #L14f374.  call temp:= `createForeignShell`(v4, v5, v6) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L14f37a.  v0:= temp @kind object;
  #L14f37c.  return v0 @kind object;
  #L14f37e.  v0:= new `com.j256.ormlite.field.FieldType$LevelCounters`;
  #L14f382.  v1:= 0I;
  #L14f384.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/FieldType$LevelCounters;.<init>:(Lcom/j256/ormlite/field/FieldType$1;)V` @kind direct;
  #L14f38a.  v1:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L14f38e.  call `set`(v1, v0) @signature `Ljava/lang/ThreadLocal;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L14f394.  v1:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L14f398.  if v1 != 0 then goto L14f3c6;
  #L14f39c.  v1:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f3a0.  call temp:= `isForeignAutoRefresh`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L14f3a6.  v1:= temp;
  #L14f3a8.  if v1 != 0 then goto L14f3b6;
  #L14f3ac.  call temp:= `createForeignShell`(v4, v5, v6) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L14f3b2.  v0:= temp @kind object;
  #L14f3b4.  goto L14f37c;
  #L14f3b6.  v1:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f3ba.  call temp:= `getMaxForeignAutoRefreshLevel`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getMaxForeignAutoRefreshLevel:()I` @kind virtual;
  #L14f3c0.  v1:= temp;
  #L14f3c2.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevelMax` @type ^`int` := v1;
  #L14f3c6.  v1:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L14f3ca.  v2:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevelMax` @type ^`int`;
  #L14f3ce.  if v1 < v2 then goto L14f3dc;
  #L14f3d2.  call temp:= `createForeignShell`(v4, v5, v6) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L14f3d8.  v0:= temp @kind object;
  #L14f3da.  goto L14f37c;
  #L14f3dc.  v1:= v4.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` @kind object;
  #L14f3e0.  if v1 != 0 then goto L14f40c;
  #L14f3e4.  v1:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L14f3e8.  call temp:= `getDatabaseType`(v1) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L14f3ee.  v1:= temp @kind object;
  #L14f3f0.  v2:= v4.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L14f3f4.  call temp:= `getTableInfo`(v2) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L14f3fa.  v2:= temp @kind object;
  #L14f3fc.  v3:= v4.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L14f400.  call temp:= `build`(v1, v2, v3) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.build:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;` @kind static;
  #L14f406.  v1:= temp @kind object;
  #L14f408.  v4.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` := v1 @kind object;
  #L14f40c.  v1:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L14f410.  v1:= v1 + 1;
  #L14f414.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int` := v1;
  #Try_start0.  
  #L14f418.  v1:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L14f41c.  v2:= v4.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L14f420.  call temp:= `getReadOnlyConnection`(v1, v2) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getReadOnlyConnection:(Ljava/lang/String;)Lcom/j256/ormlite/support/DatabaseConnection;` @kind interface;
  #Try_end0.  
  #L14f426.  v2:= temp @kind object;
  #Try_start1.  
  #L14f428.  v1:= v4.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` @kind object;
  #L14f42c.  call temp:= `execute`(v1, v2, v5, v6) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.execute:(Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L14f432.  v1:= temp @kind object;
  #Try_start2.  
  #L14f434.  v3:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L14f438.  call `releaseConnection`(v3, v2) @signature `Lcom/j256/ormlite/support/ConnectionSource;.releaseConnection:(Lcom/j256/ormlite/support/DatabaseConnection;)V` @kind interface;
  #Try_end2.  
  #L14f43e.  v2:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L14f442.  v2:= v2 + -1;
  #L14f446.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int` := v2;
  #L14f44a.  v0:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L14f44e.  if v0 > 0 then goto L14f45c;
  #L14f452.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L14f456.  call `remove`(v0) @signature `Ljava/lang/ThreadLocal;.remove:()V` @kind virtual;
  #L14f45c.  v0:= v1 @kind object;
  #L14f45e.  goto L14f37c;
  #L14f460.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L14f462.  v3:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L14f466.  call `releaseConnection`(v3, v2) @signature `Lcom/j256/ormlite/support/ConnectionSource;.releaseConnection:(Lcom/j256/ormlite/support/DatabaseConnection;)V` @kind interface;
  #L14f46c.  throw v1;
  #Try_end3.  
  #L14f46e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L14f470.  v2:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L14f474.  v2:= v2 + -1;
  #L14f478.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int` := v2;
  #L14f47c.  v0:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L14f480.  if v0 > 0 then goto L14f48e;
  #L14f484.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L14f488.  call `remove`(v0) @signature `Ljava/lang/ThreadLocal;.remove:()V` @kind virtual;
  #L14f48e.  throw v1;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L14f46e;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L14f460;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L14f46e;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L14f46e;
}
procedure `java.lang.Object` `createForeignShell`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object, `com.j256.ormlite.dao.ObjectCache` v5 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L14f4c8.  v0:= v3.`com.j256.ormlite.field.FieldType.foreignTableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L14f4cc.  call temp:= `createObject`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.createObject:()Ljava/lang/Object;` @kind virtual;
  #L14f4d2.  v0:= temp @kind object;
  #L14f4d4.  v1:= v3.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L14f4d8.  v2:= 0I;
  #L14f4da.  call `assignField`(v1, v0, v4, v2, v5) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L14f4e0.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `findForeignFieldType`(`com.j256.ormlite.field.FieldType` v6 @kind this, `java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object, `com.j256.ormlite.dao.BaseDaoImpl` v9 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.findForeignFieldType:(Ljava/lang/Class;Ljava/lang/Class;Lcom/j256/ormlite/dao/BaseDaoImpl;)Lcom/j256/ormlite/field/FieldType;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L14f4f4.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f4f8.  call temp:= `getForeignCollectionForeignFieldName`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionForeignFieldName:()Ljava/lang/String;` @kind virtual;
  #L14f4fe.  v1:= temp @kind object;
  #L14f500.  call temp:= `getTableInfo`(v9) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L14f506.  v0:= temp @kind object;
  #L14f508.  call temp:= `getFieldTypes`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L14f50e.  v2:= temp @kind object;
  #L14f510.  v3:= length @variable v2;
  #L14f512.  v0:= 0I;
  #L14f514.  if v0 >= v3 then goto L14f5e0;
  #L14f518.  v4:= v2[v0] @kind object;
  #L14f51c.  call temp:= `getType`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L14f522.  v5:= temp @kind object;
  #L14f524.  if v5 != v8 then goto L14f5da;
  #L14f528.  if v1 == 0 then goto L14f548;
  #L14f52c.  call temp:= `getField`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getField:()Ljava/lang/reflect/Field;` @kind virtual;
  #L14f532.  v5:= temp @kind object;
  #L14f534.  call temp:= `getName`(v5) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14f53a.  v5:= temp @kind object;
  #L14f53c.  call temp:= `equals`(v5, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L14f542.  v5:= temp;
  #L14f544.  if v5 == 0 then goto L14f5da;
  #L14f548.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f54c.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L14f552.  v0:= temp;
  #L14f554.  if v0 != 0 then goto L14f67e;
  #L14f558.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f55c.  call temp:= `isForeignAutoRefresh`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L14f562.  v0:= temp;
  #L14f564.  if v0 != 0 then goto L14f67e;
  #L14f568.  v0:= new `java.sql.SQLException`;
  #L14f56c.  v1:= new `java.lang.StringBuilder`;
  #L14f570.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f576.  v2:= "Foreign collection object " @kind object;
  #L14f57a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f580.  v1:= temp @kind object;
  #L14f582.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f588.  v1:= temp @kind object;
  #L14f58a.  v2:= " for field '" @kind object;
  #L14f58e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f594.  v1:= temp @kind object;
  #L14f596.  v2:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14f59a.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14f5a0.  v2:= temp @kind object;
  #L14f5a2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f5a8.  v1:= temp @kind object;
  #L14f5aa.  v2:= "' contains a field of class " @kind object;
  #L14f5ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f5b4.  v1:= temp @kind object;
  #L14f5b6.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f5bc.  v1:= temp @kind object;
  #L14f5be.  v2:= " but it's not foreign" @kind object;
  #L14f5c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f5c8.  v1:= temp @kind object;
  #L14f5ca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f5d0.  v1:= temp @kind object;
  #L14f5d2.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f5d8.  throw v0;
  #L14f5da.  v0:= v0 + 1;
  #L14f5de.  goto L14f514;
  #L14f5e0.  v0:= new `java.lang.StringBuilder`;
  #L14f5e4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f5ea.  v2:= "Foreign collection class " @kind object;
  #L14f5ee.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f5f4.  v2:= temp @kind object;
  #L14f5f6.  call temp:= `getName`(v7) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L14f5fc.  v3:= temp @kind object;
  #L14f5fe.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f604.  v2:= " for field '" @kind object;
  #L14f608.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f60e.  v2:= temp @kind object;
  #L14f610.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14f614.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14f61a.  v3:= temp @kind object;
  #L14f61c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f622.  v2:= temp @kind object;
  #L14f624.  v3:= "' column-name does not contain a foreign field" @kind object;
  #L14f628.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f62e.  if v1 == 0 then goto L14f650;
  #L14f632.  v2:= " named '" @kind object;
  #L14f636.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f63c.  v2:= temp @kind object;
  #L14f63e.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f644.  v1:= temp @kind object;
  #L14f646.  v2:= 39I;
  #L14f64a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f650.  v1:= " of class " @kind object;
  #L14f654.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f65a.  v1:= temp @kind object;
  #L14f65c.  call temp:= `getName`(v8) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L14f662.  v2:= temp @kind object;
  #L14f664.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f66a.  v1:= new `java.sql.SQLException`;
  #L14f66e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f674.  v0:= temp @kind object;
  #L14f676.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f67c.  throw v1;
  #L14f67e.  return v4 @kind object;
}
procedure `boolean` `isFieldValueDefault`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.isFieldValueDefault:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L14f690.  if v2 != 0 then goto L14f698;
  #L14f694.  v0:= 1I;
  #L14f696.  return v0;
  #L14f698.  call temp:= `getJavaDefaultValueDefault`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getJavaDefaultValueDefault:()Ljava/lang/Object;` @kind virtual;
  #L14f69e.  v0:= temp @kind object;
  #L14f6a0.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L14f6a6.  v0:= temp;
  #L14f6a8.  goto L14f696;
}
procedure `void` `assignField`(`com.j256.ormlite.field.FieldType` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `boolean` v7 , `com.j256.ormlite.dao.ObjectCache` v8 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14f6bc.  v0:= `@@com.j256.ormlite.field.FieldType.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L14f6c0.  v1:= `@@com.j256.ormlite.logger.Log$Level.TRACE` @type ^`com.j256.ormlite.logger.Log$Level` @kind object;
  #L14f6c4.  call temp:= `isLevelEnabled`(v0, v1) @signature `Lcom/j256/ormlite/logger/Logger;.isLevelEnabled:(Lcom/j256/ormlite/logger/Log$Level;)Z` @kind virtual;
  #L14f6ca.  v0:= temp;
  #L14f6cc.  if v0 == 0 then goto L14f6f0;
  #L14f6d0.  v2:= `@@com.j256.ormlite.field.FieldType.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L14f6d4.  v3:= "assiging from data {}, val {}: {}" @kind object;
  #L14f6d8.  if v5 != 0 then goto L14f716;
  #L14f6dc.  v0:= "null" @kind object;
  #L14f6e0.  v1:= v0 @kind object;
  #L14f6e2.  if v6 != 0 then goto L14f722;
  #L14f6e6.  v0:= "null" @kind object;
  #L14f6ea.  call `trace`(v2, v3, v1, v0, v6) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L14f6f0.  v0:= v4.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L14f6f4.  if v0 == 0 then goto L14f744;
  #L14f6f8.  if v6 == 0 then goto L14f744;
  #L14f6fc.  call temp:= `extractJavaFieldValue`(v4, v5) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L14f702.  v0:= temp @kind object;
  #L14f704.  if v0 == 0 then goto L14f72c;
  #L14f708.  call temp:= `equals`(v0, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L14f70e.  v0:= temp;
  #L14f710.  if v0 == 0 then goto L14f72c;
  #L14f714.  return @kind void;
  #L14f716.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L14f71c.  v0:= temp @kind object;
  #L14f71e.  v1:= v0 @kind object;
  #L14f720.  goto L14f6e2;
  #L14f722.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L14f728.  v0:= temp @kind object;
  #L14f72a.  goto L14f6ea;
  #L14f72c.  v0:= v4.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L14f730.  call temp:= `getObjectCache`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getObjectCache:()Lcom/j256/ormlite/dao/ObjectCache;` @kind virtual;
  #L14f736.  v0:= temp @kind object;
  #L14f738.  if v0 != 0 then goto L14f7ba;
  #L14f73c.  v0:= 0I;
  #L14f73e.  if v0 == 0 then goto L14f7cc;
  #L14f742.  v6:= v0 @kind object;
  #L14f744.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L14f748.  if v0 != 0 then goto L14f83c;
  #Try_start0.  
  #L14f74c.  v0:= v4.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14f750.  call `set`(v0, v5, v6) @signature `Ljava/lang/reflect/Field;.set:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #Try_end0.  
  #L14f756.  goto L14f714;
  #L14f758.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L14f75a.  v1:= new `java.lang.StringBuilder`;
  #L14f75e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f764.  v2:= "Could not assign object '" @kind object;
  #L14f768.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f76e.  v1:= temp @kind object;
  #L14f770.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f776.  v1:= temp @kind object;
  #L14f778.  v2:= "' of type " @kind object;
  #L14f77c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f782.  v1:= temp @kind object;
  #L14f784.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L14f78a.  v2:= temp @kind object;
  #L14f78c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f792.  v1:= temp @kind object;
  #L14f794.  v2:= " to field " @kind object;
  #L14f798.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f79e.  v1:= temp @kind object;
  #L14f7a0.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f7a6.  v1:= temp @kind object;
  #L14f7a8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f7ae.  v1:= temp @kind object;
  #L14f7b0.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L14f7b6.  v0:= temp @kind object;
  #L14f7b8.  throw v0;
  #L14f7ba.  call temp:= `getType`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L14f7c0.  v1:= temp @kind object;
  #L14f7c2.  call temp:= `get`(v0, v1, v6) @signature `Lcom/j256/ormlite/dao/ObjectCache;.get:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L14f7c8.  v0:= temp @kind object;
  #L14f7ca.  goto L14f73e;
  #L14f7cc.  if v7 != 0 then goto L14f744;
  #L14f7d0.  call temp:= `createForeignObject`(v4, v6, v8) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignObject:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L14f7d6.  v6:= temp @kind object;
  #L14f7d8.  goto L14f744;
  #L14f7da.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L14f7dc.  v1:= new `java.lang.StringBuilder`;
  #L14f7e0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f7e6.  v2:= "Could not assign object '" @kind object;
  #L14f7ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f7f0.  v1:= temp @kind object;
  #L14f7f2.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f7f8.  v1:= temp @kind object;
  #L14f7fa.  v2:= "' of type " @kind object;
  #L14f7fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f804.  v1:= temp @kind object;
  #L14f806.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L14f80c.  v2:= temp @kind object;
  #L14f80e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f814.  v1:= temp @kind object;
  #L14f816.  v2:= "' to field " @kind object;
  #L14f81a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f820.  v1:= temp @kind object;
  #L14f822.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f828.  v1:= temp @kind object;
  #L14f82a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f830.  v1:= temp @kind object;
  #L14f832.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L14f838.  v0:= temp @kind object;
  #L14f83a.  throw v0;
  #Try_start1.  
  #L14f83c.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L14f840.  v1:= 1I;
  #L14f842.  v1:= new `java.lang.Object`[v1];
  #L14f846.  v2:= 0I;
  #L14f848.  v1[v2]:= v6 @kind object;
  #L14f84c.  call temp:= `invoke`(v0, v5, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L14f852.  goto L14f714;
  #L14f856.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L14f858.  v1:= new `java.lang.StringBuilder`;
  #L14f85c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f862.  v2:= "Could not call " @kind object;
  #L14f866.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f86c.  v1:= temp @kind object;
  #L14f86e.  v2:= v4.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L14f872.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f878.  v1:= temp @kind object;
  #L14f87a.  v2:= " on object with '" @kind object;
  #L14f87e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f884.  v1:= temp @kind object;
  #L14f886.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f88c.  v1:= temp @kind object;
  #L14f88e.  v2:= "' for " @kind object;
  #L14f892.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f898.  v1:= temp @kind object;
  #L14f89a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f8a0.  v1:= temp @kind object;
  #L14f8a2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f8a8.  v1:= temp @kind object;
  #L14f8aa.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L14f8b0.  v0:= temp @kind object;
  #L14f8b2.  throw v0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L14f758;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L14f7da;
  catch `java.lang.Exception` @[Try_start1..Try_end1] goto L14f856;
}
procedure `java.lang.Object` `assignIdValue`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Number` v5 @kind object, `com.j256.ormlite.dao.ObjectCache` v6 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L14f8e4.  v0:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L14f8e8.  call temp:= `convertIdNumber`(v0, v5) @signature `Lcom/j256/ormlite/field/DataPersister;.convertIdNumber:(Ljava/lang/Number;)Ljava/lang/Object;` @kind interface;
  #L14f8ee.  v0:= temp @kind object;
  #L14f8f0.  if v0 != 0 then goto L14f93e;
  #L14f8f4.  v0:= new `java.sql.SQLException`;
  #L14f8f8.  v1:= new `java.lang.StringBuilder`;
  #L14f8fc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14f902.  v2:= "Invalid class " @kind object;
  #L14f906.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f90c.  v1:= temp @kind object;
  #L14f90e.  v2:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L14f912.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f918.  v1:= temp @kind object;
  #L14f91a.  v2:= " for sequence-id " @kind object;
  #L14f91e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f924.  v1:= temp @kind object;
  #L14f926.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14f92c.  v1:= temp @kind object;
  #L14f92e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14f934.  v1:= temp @kind object;
  #L14f936.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14f93c.  throw v0;
  #L14f93e.  v1:= 0I;
  #L14f940.  call `assignField`(v3, v4, v0, v1, v6) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L14f946.  return v0 @kind object;
}
procedure `com.j256.ormlite.dao.BaseForeignCollection` `buildForeignCollection`(`com.j256.ormlite.field.FieldType` v8 @kind this, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.buildForeignCollection:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/j256/ormlite/dao/BaseForeignCollection;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L14f958.  v2:= 0I;
  #L14f95a.  v0:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L14f95e.  if v0 != 0 then goto L14f966;
  #L14f962.  v0:= v2 @kind object;
  #L14f964.  return v0 @kind object;
  #L14f966.  v1:= v8.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L14f96a.  v0:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f96e.  call temp:= `isForeignCollectionEager`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionEager:()Z` @kind virtual;
  #L14f974.  v0:= temp;
  #L14f976.  if v0 != 0 then goto L14f9a6;
  #L14f97a.  v0:= new `com.j256.ormlite.dao.LazyForeignCollection`;
  #L14f97e.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L14f982.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f986.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L14f98c.  v5:= temp @kind object;
  #L14f98e.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f992.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L14f998.  v6:= temp;
  #L14f99a.  v2:= v9 @kind object;
  #L14f99c.  v3:= v10 @kind object;
  #L14f99e.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/LazyForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #L14f9a4.  goto L14f964;
  #L14f9a6.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L14f9aa.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L14f9b0.  v0:= temp @kind object;
  #L14f9b2.  v0:= (`com.j256.ormlite.field.FieldType$LevelCounters`) v0 @kind object;
  #L14f9b6.  if v0 != 0 then goto L14fab2;
  #L14f9ba.  v0:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f9be.  call temp:= `getForeignCollectionMaxEagerLevel`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionMaxEagerLevel:()I` @kind virtual;
  #L14f9c4.  v0:= temp;
  #L14f9c6.  if v0 != 0 then goto L14f9f6;
  #L14f9ca.  v0:= new `com.j256.ormlite.dao.LazyForeignCollection`;
  #L14f9ce.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L14f9d2.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f9d6.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L14f9dc.  v5:= temp @kind object;
  #L14f9de.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14f9e2.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L14f9e8.  v6:= temp;
  #L14f9ea.  v2:= v9 @kind object;
  #L14f9ec.  v3:= v10 @kind object;
  #L14f9ee.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/LazyForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #L14f9f4.  goto L14f964;
  #L14f9f6.  v0:= new `com.j256.ormlite.field.FieldType$LevelCounters`;
  #L14f9fa.  call `<init>`(v0, v2) @signature `Lcom/j256/ormlite/field/FieldType$LevelCounters;.<init>:(Lcom/j256/ormlite/field/FieldType$1;)V` @kind direct;
  #L14fa00.  v2:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L14fa04.  call `set`(v2, v0) @signature `Ljava/lang/ThreadLocal;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L14fa0a.  v7:= v0 @kind object;
  #L14fa0c.  v0:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L14fa10.  if v0 != 0 then goto L14fa24;
  #L14fa14.  v0:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14fa18.  call temp:= `getForeignCollectionMaxEagerLevel`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionMaxEagerLevel:()I` @kind virtual;
  #L14fa1e.  v0:= temp;
  #L14fa20.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevelMax` @type ^`int` := v0;
  #L14fa24.  v0:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L14fa28.  v2:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevelMax` @type ^`int`;
  #L14fa2c.  if v0 < v2 then goto L14fa5c;
  #L14fa30.  v0:= new `com.j256.ormlite.dao.LazyForeignCollection`;
  #L14fa34.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L14fa38.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14fa3c.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L14fa42.  v5:= temp @kind object;
  #L14fa44.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14fa48.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L14fa4e.  v6:= temp;
  #L14fa50.  v2:= v9 @kind object;
  #L14fa52.  v3:= v10 @kind object;
  #L14fa54.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/LazyForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #L14fa5a.  goto L14f964;
  #L14fa5c.  v0:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L14fa60.  v0:= v0 + 1;
  #L14fa64.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int` := v0;
  #Try_start0.  
  #L14fa68.  v0:= new `com.j256.ormlite.dao.EagerForeignCollection`;
  #L14fa6c.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L14fa70.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14fa74.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L14fa7a.  v5:= temp @kind object;
  #L14fa7c.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14fa80.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L14fa86.  v6:= temp;
  #L14fa88.  v2:= v9 @kind object;
  #L14fa8a.  v3:= v10 @kind object;
  #L14fa8c.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #Try_end0.  
  #L14fa92.  v1:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L14fa96.  v1:= v1 + -1;
  #L14fa9a.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int` := v1;
  #L14fa9e.  goto L14f964;
  #L14faa2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L14faa4.  v1:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L14faa8.  v1:= v1 + -1;
  #L14faac.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int` := v1;
  #L14fab0.  throw v0;
  #L14fab2.  v7:= v0 @kind object;
  #L14fab4.  goto L14fa0c;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L14faa2;
}
procedure `void` `configDaoInformation`(`com.j256.ormlite.field.FieldType` v10 @kind this, `com.j256.ormlite.support.ConnectionSource` v11 @kind object, `java.lang.Class` v12 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.configDaoInformation:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L14fad4.  v8:= 0I;
  #L14fad6.  v4:= 0I;
  #L14fad8.  v0:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14fadc.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L14fae2.  v5:= temp @kind object;
  #L14fae4.  call temp:= `getDatabaseType`(v11) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L14faea.  v6:= temp @kind object;
  #L14faec.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14faf0.  call temp:= `getForeignColumnName`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignColumnName:()Ljava/lang/String;` @kind virtual;
  #L14faf6.  v7:= temp @kind object;
  #L14faf8.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14fafc.  call temp:= `isForeignAutoRefresh`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L14fb02.  v0:= temp;
  #L14fb04.  if v0 != 0 then goto L14fb0c;
  #L14fb08.  if v7 == 0 then goto L14fc3e;
  #L14fb0c.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14fb10.  call temp:= `getForeignTableConfig`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignTableConfig:()Lcom/j256/ormlite/table/DatabaseTableConfig;` @kind virtual;
  #L14fb16.  v0:= temp @kind object;
  #L14fb18.  if v0 != 0 then goto L14fb7a;
  #L14fb1c.  call temp:= `createDao`(v11, v5) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L14fb22.  v0:= temp @kind object;
  #L14fb24.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L14fb28.  call temp:= `getTableInfo`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L14fb2e.  v1:= temp @kind object;
  #L14fb30.  call temp:= `getIdField`(v1) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L14fb36.  v3:= temp @kind object;
  #L14fb38.  if v3 != 0 then goto L14fb96;
  #L14fb3c.  v0:= new `java.lang.IllegalArgumentException`;
  #L14fb40.  v1:= new `java.lang.StringBuilder`;
  #L14fb44.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14fb4a.  v2:= "Foreign field " @kind object;
  #L14fb4e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fb54.  v1:= temp @kind object;
  #L14fb56.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fb5c.  v1:= temp @kind object;
  #L14fb5e.  v2:= " does not have id field" @kind object;
  #L14fb62.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fb68.  v1:= temp @kind object;
  #L14fb6a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14fb70.  v1:= temp @kind object;
  #L14fb72.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14fb78.  throw v0;
  #L14fb7a.  call `extractFieldTypes`(v0, v11) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;)V` @kind virtual;
  #L14fb80.  call temp:= `createDao`(v11, v0) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Lcom/j256/ormlite/table/DatabaseTableConfig;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L14fb86.  v0:= temp @kind object;
  #L14fb88.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L14fb8c.  call temp:= `getTableInfo`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L14fb92.  v1:= temp @kind object;
  #L14fb94.  goto L14fb30;
  #L14fb96.  if v7 != 0 then goto L14fbe0;
  #L14fb9a.  v2:= v3 @kind object;
  #L14fb9c.  call temp:= `build`(v6, v1, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.build:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;` @kind static;
  #L14fba2.  v5:= temp @kind object;
  #L14fba4.  v9:= v5 @kind object;
  #L14fba6.  v5:= v1 @kind object;
  #L14fba8.  v1:= v0 @kind object;
  #L14fbaa.  v0:= v9 @kind object;
  #L14fbac.  v10.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` := v0 @kind object;
  #L14fbb0.  v10.`com.j256.ormlite.field.FieldType.foreignTableInfo` @type ^`com.j256.ormlite.table.TableInfo` := v5 @kind object;
  #L14fbb4.  v10.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` := v4 @kind object;
  #L14fbb8.  v10.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` := v1 @kind object;
  #L14fbbc.  v10.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` := v3 @kind object;
  #L14fbc0.  v10.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` := v2 @kind object;
  #L14fbc4.  v0:= v10.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L14fbc8.  if v0 == 0 then goto L14fbde;
  #L14fbcc.  v0:= v10.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L14fbd0.  call temp:= `getDataPersister`(v0) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L14fbd6.  v0:= temp @kind object;
  #L14fbd8.  call `assignDataType`(v10, v6, v0) @signature `Lcom/j256/ormlite/field/FieldType;.assignDataType:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/DataPersister;)V` @kind direct;
  #L14fbde.  return @kind void;
  #L14fbe0.  call temp:= `getFieldTypeByColumnName`(v1, v7) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypeByColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L14fbe6.  v2:= temp @kind object;
  #L14fbe8.  if v2 != 0 then goto L14fb9c;
  #L14fbec.  v0:= new `java.lang.IllegalArgumentException`;
  #L14fbf0.  v1:= new `java.lang.StringBuilder`;
  #L14fbf4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14fbfa.  v2:= "Foreign field " @kind object;
  #L14fbfe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fc04.  v1:= temp @kind object;
  #L14fc06.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fc0c.  v1:= temp @kind object;
  #L14fc0e.  v2:= " does not have field named '" @kind object;
  #L14fc12.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fc18.  v1:= temp @kind object;
  #L14fc1a.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fc20.  v1:= temp @kind object;
  #L14fc22.  v2:= "'" @kind object;
  #L14fc26.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fc2c.  v1:= temp @kind object;
  #L14fc2e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14fc34.  v1:= temp @kind object;
  #L14fc36.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14fc3c.  throw v0;
  #L14fc3e.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14fc42.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L14fc48.  v0:= temp;
  #L14fc4a.  if v0 == 0 then goto L14fdc4;
  #L14fc4e.  v0:= v10.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L14fc52.  if v0 == 0 then goto L14fcb8;
  #L14fc56.  v0:= v10.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L14fc5a.  call temp:= `isPrimitive`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L14fc60.  v0:= temp;
  #L14fc62.  if v0 == 0 then goto L14fcb8;
  #L14fc66.  v0:= new `java.lang.IllegalArgumentException`;
  #L14fc6a.  v1:= new `java.lang.StringBuilder`;
  #L14fc6e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14fc74.  v2:= "Field " @kind object;
  #L14fc78.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fc7e.  v1:= temp @kind object;
  #L14fc80.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fc86.  v1:= temp @kind object;
  #L14fc88.  v2:= " is a primitive class " @kind object;
  #L14fc8c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fc92.  v1:= temp @kind object;
  #L14fc94.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fc9a.  v1:= temp @kind object;
  #L14fc9c.  v2:= " but marked as foreign" @kind object;
  #L14fca0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fca6.  v1:= temp @kind object;
  #L14fca8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14fcae.  v1:= temp @kind object;
  #L14fcb0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14fcb6.  throw v0;
  #L14fcb8.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14fcbc.  call temp:= `getForeignTableConfig`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignTableConfig:()Lcom/j256/ormlite/table/DatabaseTableConfig;` @kind virtual;
  #L14fcc2.  v0:= temp @kind object;
  #L14fcc4.  if v0 == 0 then goto L14fd2c;
  #L14fcc8.  call `extractFieldTypes`(v0, v11) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;)V` @kind virtual;
  #L14fcce.  call temp:= `createDao`(v11, v0) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Lcom/j256/ormlite/table/DatabaseTableConfig;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L14fcd4.  v0:= temp @kind object;
  #L14fcd6.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L14fcda.  call temp:= `getTableInfo`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L14fce0.  v1:= temp @kind object;
  #L14fce2.  call temp:= `getIdField`(v1) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L14fce8.  v2:= temp @kind object;
  #L14fcea.  if v2 != 0 then goto L14fd3a;
  #L14fcee.  v0:= new `java.lang.IllegalArgumentException`;
  #L14fcf2.  v1:= new `java.lang.StringBuilder`;
  #L14fcf6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14fcfc.  v2:= "Foreign field " @kind object;
  #L14fd00.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fd06.  v1:= temp @kind object;
  #L14fd08.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fd0e.  v1:= temp @kind object;
  #L14fd10.  v2:= " does not have id field" @kind object;
  #L14fd14.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fd1a.  v1:= temp @kind object;
  #L14fd1c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14fd22.  v1:= temp @kind object;
  #L14fd24.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14fd2a.  throw v0;
  #L14fd2c.  call temp:= `createDao`(v11, v5) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L14fd32.  v0:= temp @kind object;
  #L14fd34.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L14fd38.  goto L14fcda;
  #L14fd3a.  call temp:= `isForeignAutoCreate`(v10) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignAutoCreate:()Z` @kind virtual;
  #L14fd40.  v3:= temp;
  #L14fd42.  if v3 == 0 then goto L14fdb8;
  #L14fd46.  call temp:= `isGeneratedId`(v2) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L14fd4c.  v3:= temp;
  #L14fd4e.  if v3 != 0 then goto L14fdb8;
  #L14fd52.  v0:= new `java.lang.IllegalArgumentException`;
  #L14fd56.  v1:= new `java.lang.StringBuilder`;
  #L14fd5a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14fd60.  v2:= "Field " @kind object;
  #L14fd64.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fd6a.  v1:= temp @kind object;
  #L14fd6c.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14fd70.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14fd76.  v2:= temp @kind object;
  #L14fd78.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fd7e.  v1:= temp @kind object;
  #L14fd80.  v2:= ", if foreignAutoCreate = true then class " @kind object;
  #L14fd84.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fd8a.  v1:= temp @kind object;
  #L14fd8c.  call temp:= `getSimpleName`(v5) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L14fd92.  v2:= temp @kind object;
  #L14fd94.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fd9a.  v1:= temp @kind object;
  #L14fd9c.  v2:= " must have id field with generatedId = true" @kind object;
  #L14fda0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fda6.  v1:= temp @kind object;
  #L14fda8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14fdae.  v1:= temp @kind object;
  #L14fdb0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14fdb6.  throw v0;
  #L14fdb8.  v3:= v2 @kind object;
  #L14fdba.  v5:= v1 @kind object;
  #L14fdbc.  v1:= v0 @kind object;
  #L14fdbe.  v0:= v4 @kind object;
  #L14fdc0.  goto L14fbac;
  #L14fdc4.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14fdc8.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L14fdce.  v0:= temp;
  #L14fdd0.  if v0 == 0 then goto L14ffdc;
  #L14fdd4.  v0:= constclass @type ^`java.util.Collection` @kind object;
  #L14fdd8.  if v5 == v0 then goto L14fe56;
  #L14fddc.  v0:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L14fde0.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L14fde6.  v0:= temp;
  #L14fde8.  if v0 != 0 then goto L14fe56;
  #L14fdec.  v0:= new `java.sql.SQLException`;
  #L14fdf0.  v1:= new `java.lang.StringBuilder`;
  #L14fdf4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14fdfa.  v2:= "Field class for '" @kind object;
  #L14fdfe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fe04.  v1:= temp @kind object;
  #L14fe06.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14fe0a.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14fe10.  v2:= temp @kind object;
  #L14fe12.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fe18.  v1:= temp @kind object;
  #L14fe1a.  v2:= "' must be of class " @kind object;
  #L14fe1e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fe24.  v1:= temp @kind object;
  #L14fe26.  v2:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L14fe2a.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L14fe30.  v2:= temp @kind object;
  #L14fe32.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fe38.  v1:= temp @kind object;
  #L14fe3a.  v2:= " or Collection." @kind object;
  #L14fe3e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fe44.  v1:= temp @kind object;
  #L14fe46.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14fe4c.  v1:= temp @kind object;
  #L14fe4e.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14fe54.  throw v0;
  #L14fe56.  v0:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14fe5a.  call temp:= `getGenericType`(v0) @signature `Ljava/lang/reflect/Field;.getGenericType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L14fe60.  v0:= temp @kind object;
  #L14fe62.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L14fe66.  if v1 != 0 then goto L14feb4;
  #L14fe6a.  v0:= new `java.sql.SQLException`;
  #L14fe6e.  v1:= new `java.lang.StringBuilder`;
  #L14fe72.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14fe78.  v2:= "Field class for '" @kind object;
  #L14fe7c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fe82.  v1:= temp @kind object;
  #L14fe84.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14fe88.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14fe8e.  v2:= temp @kind object;
  #L14fe90.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fe96.  v1:= temp @kind object;
  #L14fe98.  v2:= "' must be a parameterized Collection." @kind object;
  #L14fe9c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fea2.  v1:= temp @kind object;
  #L14fea4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14feaa.  v1:= temp @kind object;
  #L14feac.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14feb2.  throw v0;
  #L14feb4.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L14feb8.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L14febe.  v0:= temp @kind object;
  #L14fec0.  v1:= length @variable v0;
  #L14fec2.  if v1 != 0 then goto L14ff10;
  #L14fec6.  v0:= new `java.sql.SQLException`;
  #L14feca.  v1:= new `java.lang.StringBuilder`;
  #L14fece.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14fed4.  v2:= "Field class for '" @kind object;
  #L14fed8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fede.  v1:= temp @kind object;
  #L14fee0.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14fee4.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14feea.  v2:= temp @kind object;
  #L14feec.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fef2.  v1:= temp @kind object;
  #L14fef4.  v2:= "' must be a parameterized Collection with at least 1 type." @kind object;
  #L14fef8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14fefe.  v1:= temp @kind object;
  #L14ff00.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ff06.  v1:= temp @kind object;
  #L14ff08.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14ff0e.  throw v0;
  #L14ff10.  v1:= v0[v8] @kind object;
  #L14ff14.  v1:= instanceof @variable v1 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L14ff18.  if v1 == 0 then goto L14ff30;
  #L14ff1c.  call temp:= `getGenericSuperclass`(v12) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L14ff22.  v0:= temp @kind object;
  #L14ff24.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L14ff28.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L14ff2e.  v0:= temp @kind object;
  #L14ff30.  v1:= v0[v8] @kind object;
  #L14ff34.  v1:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L14ff38.  if v1 != 0 then goto L14ff92;
  #L14ff3c.  v1:= new `java.sql.SQLException`;
  #L14ff40.  v2:= new `java.lang.StringBuilder`;
  #L14ff44.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14ff4a.  v3:= "Field class for '" @kind object;
  #L14ff4e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ff54.  v2:= temp @kind object;
  #L14ff56.  v3:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L14ff5a.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L14ff60.  v3:= temp @kind object;
  #L14ff62.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ff68.  v2:= temp @kind object;
  #L14ff6a.  v3:= "' must be a parameterized Collection whose generic argument is an entity class not: " @kind object;
  #L14ff6e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ff74.  v2:= temp @kind object;
  #L14ff76.  v0:= v0[v8] @kind object;
  #L14ff7a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14ff80.  v0:= temp @kind object;
  #L14ff82.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14ff88.  v0:= temp @kind object;
  #L14ff8a.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14ff90.  throw v1;
  #L14ff92.  v0:= v0[v8] @kind object;
  #L14ff96.  v0:= (`java.lang.Class`) v0 @kind object;
  #L14ff9a.  v1:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L14ff9e.  call temp:= `getForeignTableConfig`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignTableConfig:()Lcom/j256/ormlite/table/DatabaseTableConfig;` @kind virtual;
  #L14ffa4.  v1:= temp @kind object;
  #L14ffa6.  if v1 != 0 then goto L14ffce;
  #L14ffaa.  call temp:= `createDao`(v11, v0) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L14ffb0.  v1:= temp @kind object;
  #L14ffb2.  v1:= (`com.j256.ormlite.dao.BaseDaoImpl`) v1 @kind object;
  #L14ffb6.  call temp:= `findForeignFieldType`(v10, v0, v12, v1) @signature `Lcom/j256/ormlite/field/FieldType;.findForeignFieldType:(Ljava/lang/Class;Ljava/lang/Class;Lcom/j256/ormlite/dao/BaseDaoImpl;)Lcom/j256/ormlite/field/FieldType;` @kind direct;
  #L14ffbc.  v0:= temp @kind object;
  #L14ffbe.  v2:= v4 @kind object;
  #L14ffc0.  v3:= v4 @kind object;
  #L14ffc2.  v5:= v4 @kind object;
  #L14ffc4.  v9:= v0 @kind object;
  #L14ffc6.  v0:= v4 @kind object;
  #L14ffc8.  v4:= v9 @kind object;
  #L14ffca.  goto L14fbac;
  #L14ffce.  call temp:= `createDao`(v11, v1) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Lcom/j256/ormlite/table/DatabaseTableConfig;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L14ffd4.  v1:= temp @kind object;
  #L14ffd6.  v1:= (`com.j256.ormlite.dao.BaseDaoImpl`) v1 @kind object;
  #L14ffda.  goto L14ffb6;
  #L14ffdc.  v0:= v4 @kind object;
  #L14ffde.  v1:= v4 @kind object;
  #L14ffe0.  v2:= v4 @kind object;
  #L14ffe2.  v3:= v4 @kind object;
  #L14ffe4.  v5:= v4 @kind object;
  #L14ffe6.  goto L14fbac;
}
procedure `java.lang.Object` `convertJavaFieldToSqlArgValue`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L14fffc.  if v2 != 0 then goto L150004;
  #L150000.  v0:= 0I;
  #L150002.  return v0 @kind object;
  #L150004.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L150008.  call temp:= `javaToSqlArg`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/FieldConverter;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15000e.  v0:= temp @kind object;
  #L150010.  goto L150002;
}
procedure `java.lang.Object` `convertStringToJavaField`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lcom/j256/ormlite/field/FieldType;.convertStringToJavaField:(Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150024.  if v2 != 0 then goto L15002c;
  #L150028.  v0:= 0I;
  #L15002a.  return v0 @kind object;
  #L15002c.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L150030.  call temp:= `resultStringToJava`(v0, v1, v2, v3) @signature `Lcom/j256/ormlite/field/FieldConverter;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @kind interface;
  #L150036.  v0:= temp @kind object;
  #L150038.  goto L15002a;
}
procedure `int` `createWithForeignDao`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createWithForeignDao:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15004c.  v0:= v1.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L150050.  call temp:= `create`(v0, v2) @signature `Lcom/j256/ormlite/dao/Dao;.create:(Ljava/lang/Object;)I` @kind interface;
  #L150056.  v0:= temp;
  #L150058.  return v0;
}
procedure `boolean` `equals`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15006c.  v0:= 0I;
  #L15006e.  if v4 == 0 then goto L150086;
  #L150072.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L150078.  v1:= temp @kind object;
  #L15007a.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L150080.  v2:= temp @kind object;
  #L150082.  if v1 == v2 then goto L150088;
  #L150086.  return v0;
  #L150088.  v4:= (`com.j256.ormlite.field.FieldType`) v4 @kind object;
  #L15008c.  v1:= v3.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L150090.  v2:= v4.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L150094.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/reflect/Field;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15009a.  v1:= temp;
  #L15009c.  if v1 == 0 then goto L150086;
  #L1500a0.  v1:= v3.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L1500a4.  if v1 != 0 then goto L1500b4;
  #L1500a8.  v1:= v4.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L1500ac.  if v1 != 0 then goto L150086;
  #L1500b0.  v0:= 1I;
  #L1500b2.  goto L150086;
  #L1500b4.  v1:= v3.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L1500b8.  v2:= v4.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L1500bc.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L1500c2.  v1:= temp;
  #L1500c4.  if v1 == 0 then goto L150086;
  #L1500c8.  goto L1500b0;
}
procedure `java.lang.Object` `extractJavaFieldToSqlArgValue`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1500dc.  call temp:= `extractJavaFieldValue`(v1, v2) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1500e2.  v0:= temp @kind object;
  #L1500e4.  call temp:= `convertJavaFieldToSqlArgValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1500ea.  v0:= temp @kind object;
  #L1500ec.  return v0 @kind object;
}
procedure `java.lang.Object` `extractJavaFieldValue`(`com.j256.ormlite.field.FieldType` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L150100.  call temp:= `extractRawJavaFieldValue`(v2, v3) @signature `Lcom/j256/ormlite/field/FieldType;.extractRawJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L150106.  v0:= temp @kind object;
  #L150108.  v1:= v2.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15010c.  if v1 == 0 then goto L150120;
  #L150110.  if v0 == 0 then goto L150120;
  #L150114.  v1:= v2.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L150118.  call temp:= `extractRawJavaFieldValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.extractRawJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15011e.  v0:= temp @kind object;
  #L150120.  return v0 @kind object;
}
procedure `java.lang.Object` `extractRawJavaFieldValue`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.extractRawJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L150134.  v0:= v3.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L150138.  if v0 != 0 then goto L15017c;
  #Try_start0.  
  #L15013c.  v0:= v3.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L150140.  call temp:= `get`(v0, v4) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L150146.  v0:= temp @kind object;
  #L150148.  return v0 @kind object;
  #L15014a.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L15014c.  v1:= new `java.lang.StringBuilder`;
  #L150150.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L150156.  v2:= "Could not get field value for " @kind object;
  #L15015a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150160.  v1:= temp @kind object;
  #L150162.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150168.  v1:= temp @kind object;
  #L15016a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L150170.  v1:= temp @kind object;
  #L150172.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L150178.  v0:= temp @kind object;
  #L15017a.  throw v0;
  #Try_start1.  
  #L15017c.  v0:= v3.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L150180.  v1:= 0I;
  #L150182.  v1:= new `java.lang.Object`[v1];
  #L150186.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L15018c.  v0:= temp @kind object;
  #L15018e.  goto L150148;
  #L150190.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L150192.  v1:= new `java.lang.StringBuilder`;
  #L150196.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15019c.  v2:= "Could not call " @kind object;
  #L1501a0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1501a6.  v1:= temp @kind object;
  #L1501a8.  v2:= v3.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L1501ac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1501b2.  v1:= temp @kind object;
  #L1501b4.  v2:= " for " @kind object;
  #L1501b8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1501be.  v1:= temp @kind object;
  #L1501c0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1501c6.  v1:= temp @kind object;
  #L1501c8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1501ce.  v1:= temp @kind object;
  #L1501d0.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1501d6.  v0:= temp @kind object;
  #L1501d8.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L15014a;
  catch `java.lang.Exception` @[Try_start1..Try_end1] goto L150190;
}
procedure `java.lang.Object` `generateId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.generateId:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150208.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15020c.  call temp:= `generateId`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.generateId:()Ljava/lang/Object;` @kind interface;
  #L150212.  v0:= temp @kind object;
  #L150214.  return v0 @kind object;
}
procedure `java.lang.String` `getColumnDefinition`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnDefinition:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150228.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15022c.  call temp:= `getColumnDefinition`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getColumnDefinition:()Ljava/lang/String;` @kind virtual;
  #L150232.  v0:= temp @kind object;
  #L150234.  return v0 @kind object;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150248.  v0:= v1.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L15024c.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.DataPersister` `getDataPersister`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150260.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L150264.  return v0 @kind object;
}
procedure `java.lang.Object` `getDataTypeConfigObj`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150278.  v0:= v1.`com.j256.ormlite.field.FieldType.dataTypeConfigObj` @type ^`java.lang.Object` @kind object;
  #L15027c.  return v0 @kind object;
}
procedure `java.lang.Object` `getDefaultValue`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getDefaultValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150290.  v0:= v1.`com.j256.ormlite.field.FieldType.defaultValue` @type ^`java.lang.Object` @kind object;
  #L150294.  return v0 @kind object;
}
procedure `java.lang.reflect.Field` `getField`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getField:()Ljava/lang/reflect/Field;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1502a8.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L1502ac.  return v0 @kind object;
}
procedure `java.lang.String` `getFieldName`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1502c0.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L1502c4.  call temp:= `getName`(v0) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L1502ca.  v0:= temp @kind object;
  #L1502cc.  return v0 @kind object;
}
procedure `java.lang.Object` `getFieldValueIfNotDefault`(`com.j256.ormlite.field.FieldType` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldValueIfNotDefault:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1502e0.  call temp:= `extractJavaFieldValue`(v2, v3) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1502e6.  v0:= temp @kind object;
  #L1502e8.  call temp:= `isFieldValueDefault`(v2, v0) @signature `Lcom/j256/ormlite/field/FieldType;.isFieldValueDefault:(Ljava/lang/Object;)Z` @kind direct;
  #L1502ee.  v1:= temp;
  #L1502f0.  if v1 == 0 then goto L1502f6;
  #L1502f4.  v0:= 0I;
  #L1502f6.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `getForeignIdField`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignIdField:()Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150308.  v0:= v1.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15030c.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `getForeignRefField`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignRefField:()Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150320.  v0:= v1.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L150324.  return v0 @kind object;
}
procedure `java.lang.String` `getFormat`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150338.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15033c.  call temp:= `getFormat`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L150342.  v0:= temp @kind object;
  #L150344.  return v0 @kind object;
}
procedure `java.lang.String` `getGeneratedIdSequence`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getGeneratedIdSequence:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150358.  v0:= v1.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` @kind object;
  #L15035c.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getGenericType`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getGenericType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150370.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L150374.  call temp:= `getGenericType`(v0) @signature `Ljava/lang/reflect/Field;.getGenericType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L15037a.  v0:= temp @kind object;
  #L15037c.  return v0 @kind object;
}
procedure `java.lang.String` `getIndexName`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getIndexName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L150390.  v0:= v2.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L150394.  v1:= v2.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L150398.  call temp:= `getIndexName`(v0, v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getIndexName:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L15039e.  v0:= temp @kind object;
  #L1503a0.  return v0 @kind object;
}
procedure `java.lang.Object` `getJavaDefaultValueDefault`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getJavaDefaultValueDefault:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1503b4.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L1503b8.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1503be.  v0:= temp @kind object;
  #L1503c0.  v1:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L1503c4.  if v0 != v1 then goto L1503d6;
  #L1503c8.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BOOLEAN` @type ^`boolean` @kind boolean;
  #L1503cc.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L1503d2.  v0:= temp @kind object;
  #L1503d4.  return v0 @kind object;
  #L1503d6.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L1503da.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1503e0.  v0:= temp @kind object;
  #L1503e2.  v1:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L1503e6.  if v0 == v1 then goto L1503fe;
  #L1503ea.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L1503ee.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1503f4.  v0:= temp @kind object;
  #L1503f6.  v1:= constclass @type ^`java.lang.Byte` @kind object;
  #L1503fa.  if v0 != v1 then goto L15040c;
  #L1503fe.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BYTE` @type ^`byte` @kind byte;
  #L150402.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L150408.  v0:= temp @kind object;
  #L15040a.  goto L1503d4;
  #L15040c.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L150410.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L150416.  v0:= temp @kind object;
  #L150418.  v1:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L15041c.  if v0 == v1 then goto L150434;
  #L150420.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L150424.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15042a.  v0:= temp @kind object;
  #L15042c.  v1:= constclass @type ^`java.lang.Character` @kind object;
  #L150430.  if v0 != v1 then goto L150442;
  #L150434.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_CHAR` @type ^`char` @kind char;
  #L150438.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L15043e.  v0:= temp @kind object;
  #L150440.  goto L1503d4;
  #L150442.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L150446.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15044c.  v0:= temp @kind object;
  #L15044e.  v1:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L150452.  if v0 == v1 then goto L15046a;
  #L150456.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15045a.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L150460.  v0:= temp @kind object;
  #L150462.  v1:= constclass @type ^`java.lang.Short` @kind object;
  #L150466.  if v0 != v1 then goto L150478;
  #L15046a.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_SHORT` @type ^`short` @kind short;
  #L15046e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Short;.valueOf:(S)Ljava/lang/Short;` @kind static;
  #L150474.  v0:= temp @kind object;
  #L150476.  goto L1503d4;
  #L150478.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15047c.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L150482.  v0:= temp @kind object;
  #L150484.  v1:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L150488.  if v0 == v1 then goto L1504a0;
  #L15048c.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L150490.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L150496.  v0:= temp @kind object;
  #L150498.  v1:= constclass @type ^`java.lang.Integer` @kind object;
  #L15049c.  if v0 != v1 then goto L1504ae;
  #L1504a0.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_INT` @type ^`int`;
  #L1504a4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1504aa.  v0:= temp @kind object;
  #L1504ac.  goto L1503d4;
  #L1504ae.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L1504b2.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1504b8.  v0:= temp @kind object;
  #L1504ba.  v1:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L1504be.  if v0 == v1 then goto L1504d6;
  #L1504c2.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L1504c6.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1504cc.  v0:= temp @kind object;
  #L1504ce.  v1:= constclass @type ^`java.lang.Long` @kind object;
  #L1504d2.  if v0 != v1 then goto L1504e6;
  #L1504d6.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_LONG` @type ^`long` @kind wide;
  #L1504da.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1504e0.  v0:= temp @kind object;
  #L1504e2.  goto L1503d4;
  #L1504e6.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L1504ea.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1504f0.  v0:= temp @kind object;
  #L1504f2.  v1:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L1504f6.  if v0 == v1 then goto L15050e;
  #L1504fa.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L1504fe.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L150504.  v0:= temp @kind object;
  #L150506.  v1:= constclass @type ^`java.lang.Float` @kind object;
  #L15050a.  if v0 != v1 then goto L15051e;
  #L15050e.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_FLOAT` @type ^`float`;
  #L150512.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L150518.  v0:= temp @kind object;
  #L15051a.  goto L1503d4;
  #L15051e.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L150522.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L150528.  v0:= temp @kind object;
  #L15052a.  v1:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L15052e.  if v0 == v1 then goto L150546;
  #L150532.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L150536.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15053c.  v0:= temp @kind object;
  #L15053e.  v1:= constclass @type ^`java.lang.Double` @kind object;
  #L150542.  if v0 != v1 then goto L150556;
  #L150546.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_DOUBLE` @type ^`double` @kind wide;
  #L15054a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L150550.  v0:= temp @kind object;
  #L150552.  goto L1503d4;
  #L150556.  v0:= 0I;
  #L150558.  goto L1503d4;
}
procedure `com.j256.ormlite.field.SqlType` `getSqlType`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15056c.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L150570.  call temp:= `getSqlType`(v0) @signature `Lcom/j256/ormlite/field/FieldConverter;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L150576.  v0:= temp @kind object;
  #L150578.  return v0 @kind object;
}
procedure `java.lang.String` `getTableName`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getTableName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15058c.  v0:= v1.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L150590.  return v0 @kind object;
}
procedure `java.lang.Class` `getType`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1505a4.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L1505a8.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L1505ae.  v0:= temp @kind object;
  #L1505b0.  return v0 @kind object;
}
procedure `java.lang.String` `getUniqueIndexName`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getUniqueIndexName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1505c4.  v0:= v2.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L1505c8.  v1:= v2.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L1505cc.  call temp:= `getUniqueIndexName`(v0, v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getUniqueIndexName:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L1505d2.  v0:= temp @kind object;
  #L1505d4.  return v0 @kind object;
}
procedure `java.lang.Enum` `getUnknownEnumVal`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getUnknownEnumVal:()Ljava/lang/Enum;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1505e8.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L1505ec.  call temp:= `getUnknownEnumValue`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getUnknownEnumValue:()Ljava/lang/Enum;` @kind virtual;
  #L1505f2.  v0:= temp @kind object;
  #L1505f4.  return v0 @kind object;
}
procedure `int` `getWidth`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150608.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15060c.  call temp:= `getWidth`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getWidth:()I` @kind virtual;
  #L150612.  v0:= temp;
  #L150614.  return v0;
}
procedure `int` `hashCode`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150628.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15062c.  call temp:= `hashCode`(v0) @signature `Ljava/lang/reflect/Field;.hashCode:()I` @kind virtual;
  #L150632.  v0:= temp;
  #L150634.  return v0;
}
procedure `boolean` `isAllowGeneratedIdInsert`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isAllowGeneratedIdInsert:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150648.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15064c.  call temp:= `isAllowGeneratedIdInsert`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isAllowGeneratedIdInsert:()Z` @kind virtual;
  #L150652.  v0:= temp;
  #L150654.  return v0;
}
procedure `boolean` `isArgumentHolderRequired`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isArgumentHolderRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150668.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15066c.  call temp:= `isArgumentHolderRequired`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isArgumentHolderRequired:()Z` @kind interface;
  #L150672.  v0:= temp;
  #L150674.  return v0;
}
procedure `boolean` `isCanBeNull`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isCanBeNull:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150688.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15068c.  call temp:= `isCanBeNull`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isCanBeNull:()Z` @kind virtual;
  #L150692.  v0:= temp;
  #L150694.  return v0;
}
procedure `boolean` `isComparable`(`com.j256.ormlite.field.FieldType` v3 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isComparable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1506a8.  v0:= v3.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L1506ac.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L1506b2.  v0:= temp;
  #L1506b4.  if v0 == 0 then goto L1506bc;
  #L1506b8.  v0:= 0I;
  #L1506ba.  return v0;
  #L1506bc.  v0:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L1506c0.  if v0 != 0 then goto L1506f6;
  #L1506c4.  v0:= new `java.sql.SQLException`;
  #L1506c8.  v1:= new `java.lang.StringBuilder`;
  #L1506cc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1506d2.  v2:= "Internal error.  Data-persister is not configured for field.  Please post _full_ exception with associated data objects to mailing list: " @kind object;
  #L1506d6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1506dc.  v1:= temp @kind object;
  #L1506de.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1506e4.  v1:= temp @kind object;
  #L1506e6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1506ec.  v1:= temp @kind object;
  #L1506ee.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1506f4.  throw v0;
  #L1506f6.  v0:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L1506fa.  call temp:= `isComparable`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isComparable:()Z` @kind interface;
  #L150700.  v0:= temp;
  #L150702.  goto L1506ba;
}
procedure `boolean` `isEscapedDefaultValue`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedDefaultValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150714.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L150718.  call temp:= `isEscapedDefaultValue`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isEscapedDefaultValue:()Z` @kind interface;
  #L15071e.  v0:= temp;
  #L150720.  return v0;
}
procedure `boolean` `isEscapedValue`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150734.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L150738.  call temp:= `isEscapedValue`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isEscapedValue:()Z` @kind interface;
  #L15073e.  v0:= temp;
  #L150740.  return v0;
}
procedure `boolean` `isForeign`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150754.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L150758.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L15075e.  v0:= temp;
  #L150760.  return v0;
}
procedure `boolean` `isForeignAutoCreate`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignAutoCreate:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150774.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L150778.  call temp:= `isForeignAutoCreate`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoCreate:()Z` @kind virtual;
  #L15077e.  v0:= temp;
  #L150780.  return v0;
}
procedure `boolean` `isForeignCollection`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150794.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L150798.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L15079e.  v0:= temp;
  #L1507a0.  return v0;
}
procedure `boolean` `isGeneratedId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1507b4.  v0:= v1.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` @kind boolean;
  #L1507b8.  return v0;
}
procedure `boolean` `isGeneratedIdSequence`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedIdSequence:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1507cc.  v0:= v1.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` @kind object;
  #L1507d0.  if v0 == 0 then goto L1507d8;
  #L1507d4.  v0:= 1I;
  #L1507d6.  return v0;
  #L1507d8.  v0:= 0I;
  #L1507da.  goto L1507d6;
}
procedure `boolean` `isId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1507ec.  v0:= v1.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` @kind boolean;
  #L1507f0.  return v0;
}
procedure `boolean` `isObjectsFieldValueDefault`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.isObjectsFieldValueDefault:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150804.  call temp:= `extractJavaFieldValue`(v1, v2) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15080a.  v0:= temp @kind object;
  #L15080c.  call temp:= `isFieldValueDefault`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.isFieldValueDefault:(Ljava/lang/Object;)Z` @kind direct;
  #L150812.  v0:= temp;
  #L150814.  return v0;
}
procedure `boolean` `isReadOnly`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isReadOnly:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150828.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15082c.  call temp:= `isReadOnly`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isReadOnly:()Z` @kind virtual;
  #L150832.  v0:= temp;
  #L150834.  return v0;
}
procedure `boolean` `isSelfGeneratedId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150848.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15084c.  call temp:= `isSelfGeneratedId`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isSelfGeneratedId:()Z` @kind interface;
  #L150852.  v0:= temp;
  #L150854.  return v0;
}
procedure `boolean` `isUnique`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isUnique:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150868.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15086c.  call temp:= `isUnique`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isUnique:()Z` @kind virtual;
  #L150872.  v0:= temp;
  #L150874.  return v0;
}
procedure `boolean` `isUniqueCombo`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isUniqueCombo:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L150888.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15088c.  call temp:= `isUniqueCombo`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isUniqueCombo:()Z` @kind virtual;
  #L150892.  v0:= temp;
  #L150894.  return v0;
}
procedure `boolean` `isVersion`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1508a8.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L1508ac.  call temp:= `isVersion`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isVersion:()Z` @kind virtual;
  #L1508b2.  v0:= temp;
  #L1508b4.  return v0;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1508c8.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L1508cc.  if v0 != 0 then goto L1508d4;
  #L1508d0.  v0:= 0I;
  #L1508d2.  return v0 @kind object;
  #L1508d4.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L1508d8.  call temp:= `moveToNextValue`(v0, v2) @signature `Lcom/j256/ormlite/field/DataPersister;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1508de.  v0:= temp @kind object;
  #L1508e0.  goto L1508d2;
}
procedure `java.lang.Object` `resultToJava`(`com.j256.ormlite.field.FieldType` v4 @kind this, `com.j256.ormlite.support.DatabaseResults` v5 @kind object, `java.util.Map` v6 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.resultToJava:(Lcom/j256/ormlite/support/DatabaseResults;Ljava/util/Map;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1508f4.  v1:= 0I;
  #L1508f6.  v0:= v4.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L1508fa.  call temp:= `get`(v6, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L150900.  v0:= temp @kind object;
  #L150902.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L150906.  if v0 != 0 then goto L150928;
  #L15090a.  v0:= v4.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L15090e.  call temp:= `findColumn`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.findColumn:(Ljava/lang/String;)I` @kind interface;
  #L150914.  v0:= temp;
  #L150916.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15091c.  v0:= temp @kind object;
  #L15091e.  v2:= v4.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L150922.  call temp:= `put`(v6, v2, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L150928.  v2:= v4.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L15092c.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L150932.  v3:= temp;
  #L150934.  call temp:= `resultToJava`(v2, v4, v5, v3) @signature `Lcom/j256/ormlite/field/FieldConverter;.resultToJava:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @kind interface;
  #L15093a.  v2:= temp @kind object;
  #L15093c.  v3:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L150940.  call temp:= `isForeign`(v3) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L150946.  v3:= temp;
  #L150948.  if v3 == 0 then goto L150964;
  #L15094c.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L150952.  v0:= temp;
  #L150954.  call temp:= `wasNull`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.wasNull:(I)Z` @kind interface;
  #L15095a.  v0:= temp;
  #L15095c.  if v0 == 0 then goto L150a0a;
  #L150960.  v0:= v1 @kind object;
  #L150962.  return v0 @kind object;
  #L150964.  v3:= v4.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L150968.  call temp:= `isPrimitive`(v3) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L15096e.  v3:= temp;
  #L150970.  if v3 == 0 then goto L1509e2;
  #L150974.  v1:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L150978.  call temp:= `isThrowIfNull`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isThrowIfNull:()Z` @kind virtual;
  #L15097e.  v1:= temp;
  #L150980.  if v1 == 0 then goto L150a0a;
  #L150984.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L15098a.  v0:= temp;
  #L15098c.  call temp:= `wasNull`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.wasNull:(I)Z` @kind interface;
  #L150992.  v0:= temp;
  #L150994.  if v0 == 0 then goto L150a0a;
  #L150998.  v0:= new `java.sql.SQLException`;
  #L15099c.  v1:= new `java.lang.StringBuilder`;
  #L1509a0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1509a6.  v2:= "Results value for primitive field '" @kind object;
  #L1509aa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1509b0.  v1:= temp @kind object;
  #L1509b2.  v2:= v4.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L1509b6.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L1509bc.  v2:= temp @kind object;
  #L1509be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1509c4.  v1:= temp @kind object;
  #L1509c6.  v2:= "' was an invalid null value" @kind object;
  #L1509ca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1509d0.  v1:= temp @kind object;
  #L1509d2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1509d8.  v1:= temp @kind object;
  #L1509da.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1509e0.  throw v0;
  #L1509e2.  v3:= v4.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L1509e6.  call temp:= `isStreamType`(v3) @signature `Lcom/j256/ormlite/field/FieldConverter;.isStreamType:()Z` @kind interface;
  #L1509ec.  v3:= temp;
  #L1509ee.  if v3 != 0 then goto L150a0a;
  #L1509f2.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1509f8.  v0:= temp;
  #L1509fa.  call temp:= `wasNull`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.wasNull:(I)Z` @kind interface;
  #L150a00.  v0:= temp;
  #L150a02.  if v0 == 0 then goto L150a0a;
  #L150a06.  v0:= v1 @kind object;
  #L150a08.  goto L150962;
  #L150a0a.  v0:= v2 @kind object;
  #L150a0c.  goto L150962;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L150a20.  v0:= new `java.lang.StringBuilder`;
  #L150a24.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L150a2a.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L150a30.  v1:= temp @kind object;
  #L150a32.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L150a38.  v1:= temp @kind object;
  #L150a3a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150a40.  v0:= temp @kind object;
  #L150a42.  v1:= ":name=" @kind object;
  #L150a46.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150a4c.  v0:= temp @kind object;
  #L150a4e.  v1:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L150a52.  call temp:= `getName`(v1) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L150a58.  v1:= temp @kind object;
  #L150a5a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150a60.  v0:= temp @kind object;
  #L150a62.  v1:= ",class=" @kind object;
  #L150a66.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150a6c.  v0:= temp @kind object;
  #L150a6e.  v1:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L150a72.  call temp:= `getDeclaringClass`(v1) @signature `Ljava/lang/reflect/Field;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L150a78.  v1:= temp @kind object;
  #L150a7a.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L150a80.  v1:= temp @kind object;
  #L150a82.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L150a88.  v0:= temp @kind object;
  #L150a8a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L150a90.  v0:= temp @kind object;
  #L150a92.  return v0 @kind object;
}
