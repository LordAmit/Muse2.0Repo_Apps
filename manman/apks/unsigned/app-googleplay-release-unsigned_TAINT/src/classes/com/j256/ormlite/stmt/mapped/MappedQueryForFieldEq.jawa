record `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.mapped.BaseMappedQuery` @kind class {
  `java.lang.String` `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` v0 @kind this, `com.j256.ormlite.table.TableInfo` v1 @kind object, `java.lang.String` v2 @kind object, `com.j256.ormlite.field.FieldType`[] v3 @kind object, `com.j256.ormlite.field.FieldType`[] v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15d424.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L15d42a.  v0.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` := v5 @kind object;
  #L15d42e.  return @kind void;
}
procedure `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` `build`(`com.j256.ormlite.db.DatabaseType` v6 @kind object, `com.j256.ormlite.table.TableInfo` v7 @kind object, `com.j256.ormlite.field.FieldType` v8 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.build:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15d440.  if v8 != 0 then goto L15d496;
  #L15d444.  call temp:= `getIdField`(v7) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15d44a.  v8:= temp @kind object;
  #L15d44c.  if v8 != 0 then goto L15d496;
  #L15d450.  v0:= new `java.sql.SQLException`;
  #L15d454.  v1:= new `java.lang.StringBuilder`;
  #L15d458.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15d45e.  v2:= "Cannot query-for-id with " @kind object;
  #L15d462.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d468.  v1:= temp @kind object;
  #L15d46a.  call temp:= `getDataClass`(v7) @signature `Lcom/j256/ormlite/table/TableInfo;.getDataClass:()Ljava/lang/Class;` @kind virtual;
  #L15d470.  v2:= temp @kind object;
  #L15d472.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d478.  v1:= temp @kind object;
  #L15d47a.  v2:= " because it doesn't have an id field" @kind object;
  #L15d47e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d484.  v1:= temp @kind object;
  #L15d486.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15d48c.  v1:= temp @kind object;
  #L15d48e.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d494.  throw v0;
  #L15d496.  call temp:= `buildStatement`(v6, v7, v8) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.buildStatement:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind static;
  #L15d49c.  v2:= temp @kind object;
  #L15d49e.  v0:= new `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq`;
  #L15d4a2.  v1:= 1I;
  #L15d4a4.  v3:= new `com.j256.ormlite.field.FieldType`[v1];
  #L15d4a8.  v1:= 0I;
  #L15d4aa.  v3[v1]:= v8 @kind object;
  #L15d4ae.  call temp:= `getFieldTypes`(v7) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15d4b4.  v4:= temp @kind object;
  #L15d4b6.  v5:= "query-for-id" @kind object;
  #L15d4ba.  v1:= v7 @kind object;
  #L15d4bc.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)V` @kind direct;
  #L15d4c2.  return v0 @kind object;
}
procedure `java.lang.String` `buildStatement`(`com.j256.ormlite.db.DatabaseType` v3 @kind object, `com.j256.ormlite.table.TableInfo` v4 @kind object, `com.j256.ormlite.field.FieldType` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.buildStatement:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L15d4d4.  v0:= new `java.lang.StringBuilder`;
  #L15d4d8.  v1:= 64I;
  #L15d4dc.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L15d4e2.  v1:= "SELECT * FROM " @kind object;
  #L15d4e6.  call temp:= `getTableName`(v4) @signature `Lcom/j256/ormlite/table/TableInfo;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L15d4ec.  v2:= temp @kind object;
  #L15d4ee.  call `appendTableName`(v3, v0, v1, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.appendTableName:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L15d4f4.  v1:= 0I;
  #L15d4f6.  call `appendWhereFieldEq`(v3, v5, v0, v1) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.appendWhereFieldEq:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind static;
  #L15d4fc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15d502.  v0:= temp @kind object;
  #L15d504.  return v0 @kind object;
}
procedure `void` `logArgs`(`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` v3 @kind this, `java.lang.Object`[] v4 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.logArgs:([Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L15d518.  v0:= length @variable v4;
  #L15d51a.  if v0 <= 0 then goto L15d530;
  #L15d51e.  v0:= `@@com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15d522.  v1:= "{} arguments: {}" @kind object;
  #L15d526.  v2:= v3.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` @kind object;
  #L15d52a.  call `trace`(v0, v1, v2, v4) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L15d530.  return @kind void;
}
procedure `java.lang.Object` `execute`(`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` v7 @kind this, `com.j256.ormlite.support.DatabaseConnection` v8 @kind object, `java.lang.Object` v9 @kind object, `com.j256.ormlite.dao.ObjectCache` v10 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.execute:(Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L15d544.  if v10 == 0 then goto L15d55a;
  #L15d548.  v0:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.clazz` @type ^`java.lang.Class` @kind object;
  #L15d54c.  call temp:= `get`(v10, v0, v9) @signature `Lcom/j256/ormlite/dao/ObjectCache;.get:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15d552.  v0:= temp @kind object;
  #L15d554.  if v0 == 0 then goto L15d55a;
  #L15d558.  return v0 @kind object;
  #L15d55a.  v0:= 1I;
  #L15d55c.  v2:= new `java.lang.Object`[v0];
  #L15d560.  v0:= 0I;
  #L15d562.  call temp:= `convertIdToFieldObject`(v7, v9) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.convertIdToFieldObject:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15d568.  v1:= temp @kind object;
  #L15d56a.  v2[v0]:= v1 @kind object;
  #L15d56e.  v1:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement` @type ^`java.lang.String` @kind object;
  #L15d572.  v3:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L15d576.  v0:= v8 @kind object;
  #L15d578.  v4:= v7 @kind object;
  #L15d57a.  v5:= v10 @kind object;
  #L15d57c.  call temp:= `queryForOne`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/support/DatabaseConnection;.queryForOne:(Ljava/lang/String;[Ljava/lang/Object;[Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/stmt/GenericRowMapper;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind interface;
  #L15d582.  v0:= temp @kind object;
  #L15d584.  if v0 != 0 then goto L15d5b0;
  #L15d588.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15d58c.  v3:= "{} using '{}' and {} args, got no results" @kind object;
  #L15d590.  v4:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` @kind object;
  #L15d594.  v5:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement` @type ^`java.lang.String` @kind object;
  #L15d598.  v6:= length @variable v2;
  #L15d59a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15d5a0.  v6:= temp @kind object;
  #L15d5a2.  call `debug`(v1, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L15d5a8.  call `logArgs`(v7, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.logArgs:([Ljava/lang/Object;)V` @kind direct;
  #L15d5ae.  goto L15d558;
  #L15d5b0.  v1:= `@@com.j256.ormlite.support.DatabaseConnection.MORE_THAN_ONE` @type ^`java.lang.Object` @kind object;
  #L15d5b4.  if v0 != v1 then goto L15d620;
  #L15d5b8.  v0:= `@@com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15d5bc.  v1:= "{} using '{}' and {} args, got >1 results" @kind object;
  #L15d5c0.  v3:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` @kind object;
  #L15d5c4.  v4:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement` @type ^`java.lang.String` @kind object;
  #L15d5c8.  v5:= length @variable v2;
  #L15d5ca.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15d5d0.  v5:= temp @kind object;
  #L15d5d2.  call `error`(v0, v1, v3, v4, v5) @signature `Lcom/j256/ormlite/logger/Logger;.error:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L15d5d8.  call `logArgs`(v7, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.logArgs:([Ljava/lang/Object;)V` @kind direct;
  #L15d5de.  v0:= new `java.sql.SQLException`;
  #L15d5e2.  v1:= new `java.lang.StringBuilder`;
  #L15d5e6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15d5ec.  v2:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` @kind object;
  #L15d5f0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d5f6.  v1:= temp @kind object;
  #L15d5f8.  v2:= " got more than 1 result: " @kind object;
  #L15d5fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d602.  v1:= temp @kind object;
  #L15d604.  v2:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement` @type ^`java.lang.String` @kind object;
  #L15d608.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15d60e.  v1:= temp @kind object;
  #L15d610.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15d616.  v1:= temp @kind object;
  #L15d618.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15d61e.  throw v0;
  #L15d620.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15d624.  v3:= "{} using '{}' and {} args, got 1 result" @kind object;
  #L15d628.  v4:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.label` @type ^`java.lang.String` @kind object;
  #L15d62c.  v5:= v7.`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq.statement` @type ^`java.lang.String` @kind object;
  #L15d630.  v6:= length @variable v2;
  #L15d632.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15d638.  v6:= temp @kind object;
  #L15d63a.  call `debug`(v1, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L15d640.  goto L15d5a8;
}
