record `com.j256.ormlite.stmt.mapped.MappedCreate` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.mapped.BaseMappedStatement` @kind class {
  `java.lang.String` `com.j256.ormlite.stmt.mapped.MappedCreate.dataClassName` @AccessFlag PRIVATE;
  `java.lang.String` `com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt` @AccessFlag PRIVATE_FINAL;
  `int` `com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.mapped.MappedCreate` v1 @kind this, `com.j256.ormlite.table.TableInfo` v2 @kind object, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType`[] v4 @kind object, `java.lang.String` v5 @kind object, `int` v6 ) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L15c57c.  call `<init>`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L15c582.  call temp:= `getDataClass`(v2) @signature `Lcom/j256/ormlite/table/TableInfo;.getDataClass:()Ljava/lang/Class;` @kind virtual;
  #L15c588.  v0:= temp @kind object;
  #L15c58a.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L15c590.  v0:= temp @kind object;
  #L15c592.  v1.`com.j256.ormlite.stmt.mapped.MappedCreate.dataClassName` @type ^`java.lang.String` := v0 @kind object;
  #L15c596.  v1.`com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt` @type ^`java.lang.String` := v5 @kind object;
  #L15c59a.  v1.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int` := v6;
  #L15c59e.  return @kind void;
}
procedure `void` `assignIdValue`(`com.j256.ormlite.stmt.mapped.MappedCreate` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Number` v7 @kind object, `java.lang.String` v8 @kind object, `com.j256.ormlite.dao.ObjectCache` v9 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Ljava/lang/String;Lcom/j256/ormlite/dao/ObjectCache;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L15c5b0.  v0:= v5.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15c5b4.  call temp:= `assignIdValue`(v0, v6, v7, v9) @signature `Lcom/j256/ormlite/field/FieldType;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind virtual;
  #L15c5ba.  v0:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15c5be.  v1:= `@@com.j256.ormlite.logger.Log$Level.DEBUG` @type ^`com.j256.ormlite.logger.Log$Level` @kind object;
  #L15c5c2.  call temp:= `isLevelEnabled`(v0, v1) @signature `Lcom/j256/ormlite/logger/Logger;.isLevelEnabled:(Lcom/j256/ormlite/logger/Log$Level;)Z` @kind virtual;
  #L15c5c8.  v0:= temp;
  #L15c5ca.  if v0 == 0 then goto L15c60a;
  #L15c5ce.  v0:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15c5d2.  v1:= "assigned id '{}' from {} to '{}' in {} object" @kind object;
  #L15c5d6.  v2:= 4I;
  #L15c5d8.  v2:= new `java.lang.Object`[v2];
  #L15c5dc.  v3:= 0I;
  #L15c5de.  v2[v3]:= v7 @kind object;
  #L15c5e2.  v3:= 1I;
  #L15c5e4.  v2[v3]:= v8 @kind object;
  #L15c5e8.  v3:= 2I;
  #L15c5ea.  v4:= v5.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15c5ee.  call temp:= `getFieldName`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldName:()Ljava/lang/String;` @kind virtual;
  #L15c5f4.  v4:= temp @kind object;
  #L15c5f6.  v2[v3]:= v4 @kind object;
  #L15c5fa.  v3:= 3I;
  #L15c5fc.  v4:= v5.`com.j256.ormlite.stmt.mapped.MappedCreate.dataClassName` @type ^`java.lang.String` @kind object;
  #L15c600.  v2[v3]:= v4 @kind object;
  #L15c604.  call `debug`(v0, v1, v2) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L15c60a.  return @kind void;
}
procedure `void` `assignSequenceId`(`com.j256.ormlite.stmt.mapped.MappedCreate` v6 @kind this, `com.j256.ormlite.support.DatabaseConnection` v7 @kind object, `java.lang.Object` v8 @kind object, `com.j256.ormlite.dao.ObjectCache` v9 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.assignSequenceId:(Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15c61c.  v0:= v6.`com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt` @type ^`java.lang.String` @kind object;
  #L15c620.  call temp:= `queryForLong`(v7, v0) @signature `Lcom/j256/ormlite/support/DatabaseConnection;.queryForLong:(Ljava/lang/String;)J` @kind interface;
  #L15c626.  v0:= temp @kind wide;
  #L15c628.  v2:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15c62c.  v3:= "queried for sequence {} using stmt: {}" @kind object;
  #L15c630.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L15c636.  v4:= temp @kind object;
  #L15c638.  v5:= v6.`com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt` @type ^`java.lang.String` @kind object;
  #L15c63c.  call `debug`(v2, v3, v4, v5) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L15c642.  v2:= 0L;
  #L15c646.  v2:= lcmp(v0, v2);
  #L15c64a.  if v2 != 0 then goto L15c684;
  #L15c64e.  v0:= new `java.sql.SQLException`;
  #L15c652.  v1:= new `java.lang.StringBuilder`;
  #L15c656.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15c65c.  v2:= "Should not have returned 0 for stmt: " @kind object;
  #L15c660.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c666.  v1:= temp @kind object;
  #L15c668.  v2:= v6.`com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt` @type ^`java.lang.String` @kind object;
  #L15c66c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c672.  v1:= temp @kind object;
  #L15c674.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15c67a.  v1:= temp @kind object;
  #L15c67c.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15c682.  throw v0;
  #L15c684.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L15c68a.  v0:= temp @kind object;
  #L15c68c.  v1:= "sequence" @kind object;
  #L15c690.  call `assignIdValue`(v6, v8, v0, v1, v9) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Ljava/lang/String;Lcom/j256/ormlite/dao/ObjectCache;)V` @kind direct;
  #L15c696.  return @kind void;
}
procedure `com.j256.ormlite.stmt.mapped.MappedCreate` `build`(`com.j256.ormlite.db.DatabaseType` v13 @kind object, `com.j256.ormlite.table.TableInfo` v14 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.build:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;)Lcom/j256/ormlite/stmt/mapped/MappedCreate;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L15c6a8.  v12:= 44I;
  #L15c6ac.  v6:= 1I;
  #L15c6ae.  v1:= 0I;
  #L15c6b0.  v8:= new `java.lang.StringBuilder`;
  #L15c6b4.  v0:= 128I;
  #L15c6b8.  call `<init>`(v8, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L15c6be.  v0:= "INSERT INTO " @kind object;
  #L15c6c2.  call temp:= `getTableName`(v14) @signature `Lcom/j256/ormlite/table/TableInfo;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L15c6c8.  v2:= temp @kind object;
  #L15c6ca.  call `appendTableName`(v13, v8, v0, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.appendTableName:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L15c6d0.  v5:= -1I;
  #L15c6d2.  call temp:= `getFieldTypes`(v14) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15c6d8.  v3:= temp @kind object;
  #L15c6da.  v4:= length @variable v3;
  #L15c6dc.  v2:= v1;
  #L15c6de.  v0:= v1;
  #L15c6e0.  if v2 >= v4 then goto L15c70c;
  #L15c6e4.  v7:= v3[v2] @kind object;
  #L15c6e8.  call temp:= `isFieldCreatable`(v13, v7) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.isFieldCreatable:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Z` @kind static;
  #L15c6ee.  v9:= temp;
  #L15c6f0.  if v9 == 0 then goto L15c706;
  #L15c6f4.  call temp:= `isVersion`(v7) @signature `Lcom/j256/ormlite/field/FieldType;.isVersion:()Z` @kind virtual;
  #L15c6fa.  v7:= temp;
  #L15c6fc.  if v7 == 0 then goto L15c702;
  #L15c700.  v5:= v0;
  #L15c702.  v0:= v0 + 1;
  #L15c706.  v2:= v2 + 1;
  #L15c70a.  goto L15c6e0;
  #L15c70c.  v3:= new `com.j256.ormlite.field.FieldType`[v0];
  #L15c710.  if v0 != 0 then goto L15c740;
  #L15c714.  call `appendInsertNoColumns`(v13, v8) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendInsertNoColumns:(Ljava/lang/StringBuilder;)V` @kind interface;
  #L15c71a.  call temp:= `getIdField`(v14) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15c720.  v0:= temp @kind object;
  #L15c722.  call temp:= `buildQueryNextSequence`(v13, v0) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.buildQueryNextSequence:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind static;
  #L15c728.  v4:= temp @kind object;
  #L15c72a.  v0:= new `com.j256.ormlite.stmt.mapped.MappedCreate`;
  #L15c72e.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15c734.  v2:= temp @kind object;
  #L15c736.  v1:= v14 @kind object;
  #L15c738.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)V` @kind direct;
  #L15c73e.  return v0 @kind object;
  #L15c740.  v0:= 40I;
  #L15c744.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c74a.  call temp:= `getFieldTypes`(v14) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15c750.  v9:= temp @kind object;
  #L15c752.  v10:= length @variable v9;
  #L15c754.  v7:= v1;
  #L15c756.  v0:= v6;
  #L15c758.  v2:= v1;
  #L15c75a.  if v7 >= v10 then goto L15c798;
  #L15c75e.  v11:= v9[v7] @kind object;
  #L15c762.  call temp:= `isFieldCreatable`(v13, v11) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.isFieldCreatable:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Z` @kind static;
  #L15c768.  v4:= temp;
  #L15c76a.  if v4 != 0 then goto L15c776;
  #L15c76e.  v4:= v7 + 1;
  #L15c772.  v7:= v4;
  #L15c774.  goto L15c75a;
  #L15c776.  if v0 == 0 then goto L15c790;
  #L15c77a.  v0:= v1;
  #L15c77c.  v4:= 0I;
  #L15c77e.  call `appendFieldColumnName`(v13, v8, v11, v4) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.appendFieldColumnName:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;)V` @kind static;
  #L15c784.  v4:= v2 + 1;
  #L15c788.  v3[v2]:= v11 @kind object;
  #L15c78c.  v2:= v4;
  #L15c78e.  goto L15c76e;
  #L15c790.  call temp:= `append`(v8, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c796.  goto L15c77c;
  #L15c798.  v0:= ") VALUES (" @kind object;
  #L15c79c.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c7a2.  call temp:= `getFieldTypes`(v14) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15c7a8.  v4:= temp @kind object;
  #L15c7aa.  v7:= length @variable v4;
  #L15c7ac.  v2:= v1;
  #L15c7ae.  v0:= v6;
  #L15c7b0.  if v2 >= v7 then goto L15c7e4;
  #L15c7b4.  v6:= v4[v2] @kind object;
  #L15c7b8.  call temp:= `isFieldCreatable`(v13, v6) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.isFieldCreatable:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Z` @kind static;
  #L15c7be.  v6:= temp;
  #L15c7c0.  if v6 != 0 then goto L15c7ca;
  #L15c7c4.  v2:= v2 + 1;
  #L15c7c8.  goto L15c7b0;
  #L15c7ca.  if v0 == 0 then goto L15c7dc;
  #L15c7ce.  v0:= v1;
  #L15c7d0.  v6:= 63I;
  #L15c7d4.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c7da.  goto L15c7c4;
  #L15c7dc.  call temp:= `append`(v8, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c7e2.  goto L15c7d0;
  #L15c7e4.  v0:= 41I;
  #L15c7e8.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15c7ee.  goto L15c71a;
}
procedure `java.lang.String` `buildQueryNextSequence`(`com.j256.ormlite.db.DatabaseType` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.buildQueryNextSequence:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L15c800.  v0:= 0I;
  #L15c802.  if v4 != 0 then goto L15c808;
  #L15c806.  return v0 @kind object;
  #L15c808.  call temp:= `getGeneratedIdSequence`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L15c80e.  v1:= temp @kind object;
  #L15c810.  if v1 == 0 then goto L15c806;
  #L15c814.  v0:= new `java.lang.StringBuilder`;
  #L15c818.  v2:= 64I;
  #L15c81c.  call `<init>`(v0, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L15c822.  call `appendSelectNextValFromSequence`(v3, v0, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendSelectNextValFromSequence:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L15c828.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15c82e.  v0:= temp @kind object;
  #L15c830.  goto L15c806;
}
procedure `boolean` `foreignCollectionsAreAssigned`(`com.j256.ormlite.stmt.mapped.MappedCreate` v4 @kind this, `com.j256.ormlite.field.FieldType`[] v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.foreignCollectionsAreAssigned:([Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15c844.  v0:= 0I;
  #L15c846.  v2:= length @variable v5;
  #L15c848.  v1:= v0;
  #L15c84a.  if v1 >= v2 then goto L15c866;
  #L15c84e.  v3:= v5[v1] @kind object;
  #L15c852.  call temp:= `extractJavaFieldValue`(v3, v6) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15c858.  v3:= temp @kind object;
  #L15c85a.  if v3 != 0 then goto L15c860;
  #L15c85e.  return v0;
  #L15c860.  v1:= v1 + 1;
  #L15c864.  goto L15c84a;
  #L15c866.  v0:= 1I;
  #L15c868.  goto L15c85e;
}
procedure `boolean` `isFieldCreatable`(`com.j256.ormlite.db.DatabaseType` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.isFieldCreatable:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L15c87c.  v1:= 1I;
  #L15c87e.  v0:= 0I;
  #L15c880.  call temp:= `isForeignCollection`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L15c886.  v2:= temp;
  #L15c888.  if v2 == 0 then goto L15c88e;
  #L15c88c.  return v0;
  #L15c88e.  call temp:= `isReadOnly`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isReadOnly:()Z` @kind virtual;
  #L15c894.  v2:= temp;
  #L15c896.  if v2 != 0 then goto L15c88c;
  #L15c89a.  call temp:= `isIdSequenceNeeded`(v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.isIdSequenceNeeded:()Z` @kind interface;
  #L15c8a0.  v2:= temp;
  #L15c8a2.  if v2 == 0 then goto L15c8b6;
  #L15c8a6.  call temp:= `isSelectSequenceBeforeInsert`(v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.isSelectSequenceBeforeInsert:()Z` @kind interface;
  #L15c8ac.  v2:= temp;
  #L15c8ae.  if v2 == 0 then goto L15c8b6;
  #L15c8b2.  v0:= v1;
  #L15c8b4.  goto L15c88c;
  #L15c8b6.  call temp:= `isGeneratedId`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L15c8bc.  v2:= temp;
  #L15c8be.  if v2 == 0 then goto L15c8da;
  #L15c8c2.  call temp:= `isSelfGeneratedId`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L15c8c8.  v2:= temp;
  #L15c8ca.  if v2 != 0 then goto L15c8da;
  #L15c8ce.  call temp:= `isAllowGeneratedIdInsert`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isAllowGeneratedIdInsert:()Z` @kind virtual;
  #L15c8d4.  v2:= temp;
  #L15c8d6.  if v2 == 0 then goto L15c88c;
  #L15c8da.  v0:= v1;
  #L15c8dc.  goto L15c88c;
}
procedure `int` `insert`(`com.j256.ormlite.stmt.mapped.MappedCreate` v9 @kind this, `com.j256.ormlite.db.DatabaseType` v10 @kind object, `com.j256.ormlite.support.DatabaseConnection` v11 @kind object, `java.lang.Object` v12 @kind object, `com.j256.ormlite.dao.ObjectCache` v13 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.insert:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L15c8f0.  v1:= 0I;
  #L15c8f2.  v2:= 0I;
  #L15c8f4.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15c8f8.  if v0 == 0 then goto L15cbb8;
  #L15c8fc.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15c900.  call temp:= `isAllowGeneratedIdInsert`(v0) @signature `Lcom/j256/ormlite/field/FieldType;.isAllowGeneratedIdInsert:()Z` @kind virtual;
  #L15c906.  v0:= temp;
  #L15c908.  if v0 == 0 then goto L15c992;
  #L15c90c.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15c910.  call temp:= `isObjectsFieldValueDefault`(v0, v12) @signature `Lcom/j256/ormlite/field/FieldType;.isObjectsFieldValueDefault:(Ljava/lang/Object;)Z` @kind virtual;
  #L15c916.  v0:= temp;
  #L15c918.  if v0 != 0 then goto L15c992;
  #L15c91c.  v0:= v1;
  #L15c91e.  v3:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15c922.  call temp:= `isSelfGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L15c928.  v3:= temp;
  #L15c92a.  if v3 == 0 then goto L15c996;
  #L15c92e.  v3:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15c932.  call temp:= `isGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L15c938.  v3:= temp;
  #L15c93a.  if v3 == 0 then goto L15c996;
  #L15c93e.  if v0 == 0 then goto L15cbb8;
  #L15c942.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15c946.  v3:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15c94a.  call temp:= `generateId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.generateId:()Ljava/lang/Object;` @kind virtual;
  #L15c950.  v3:= temp @kind object;
  #L15c952.  call `assignField`(v0, v12, v3, v1, v13) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L15c958.  v3:= v2 @kind object;
  #Try_start0.  
  #L15c95a.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L15c95e.  call temp:= `isForeignAutoCreate`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.isForeignAutoCreate:()Z` @kind virtual;
  #L15c964.  v0:= temp;
  #L15c966.  if v0 == 0 then goto L15ca54;
  #L15c96a.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L15c96e.  call temp:= `getFieldTypes`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15c974.  v0:= temp @kind object;
  #L15c976.  v4:= length @variable v0;
  #L15c978.  if v1 >= v4 then goto L15ca54;
  #L15c97c.  v5:= v0[v1] @kind object;
  #L15c980.  call temp:= `isForeignAutoCreate`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignAutoCreate:()Z` @kind virtual;
  #Try_end0.  
  #L15c986.  v6:= temp;
  #L15c988.  if v6 != 0 then goto L15c9e2;
  #L15c98c.  v1:= v1 + 1;
  #L15c990.  goto L15c978;
  #L15c992.  v0:= 1I;
  #L15c994.  goto L15c91e;
  #L15c996.  v3:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15c99a.  call temp:= `isGeneratedIdSequence`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedIdSequence:()Z` @kind virtual;
  #L15c9a0.  v3:= temp;
  #L15c9a2.  if v3 == 0 then goto L15c9c0;
  #L15c9a6.  call temp:= `isSelectSequenceBeforeInsert`(v10) @signature `Lcom/j256/ormlite/db/DatabaseType;.isSelectSequenceBeforeInsert:()Z` @kind interface;
  #L15c9ac.  v3:= temp;
  #L15c9ae.  if v3 == 0 then goto L15c9c0;
  #L15c9b2.  if v0 == 0 then goto L15cbb8;
  #L15c9b6.  call `assignSequenceId`(v9, v11, v12, v13) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.assignSequenceId:(Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)V` @kind direct;
  #L15c9bc.  v3:= v2 @kind object;
  #L15c9be.  goto L15c95a;
  #L15c9c0.  v3:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15c9c4.  call temp:= `isGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L15c9ca.  v3:= temp;
  #L15c9cc.  if v3 == 0 then goto L15cbb8;
  #L15c9d0.  if v0 == 0 then goto L15cbb8;
  #L15c9d4.  v0:= new `com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder`;
  #L15c9d8.  call `<init>`(v0, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate$KeyHolder;.<init>:(Lcom/j256/ormlite/stmt/mapped/MappedCreate$1;)V` @kind direct;
  #L15c9de.  v3:= v0 @kind object;
  #L15c9e0.  goto L15c95a;
  #Try_start1.  
  #L15c9e2.  call temp:= `extractRawJavaFieldValue`(v5, v12) @signature `Lcom/j256/ormlite/field/FieldType;.extractRawJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15c9e8.  v6:= temp @kind object;
  #L15c9ea.  if v6 == 0 then goto L15c98c;
  #L15c9ee.  call temp:= `getForeignIdField`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15c9f4.  v7:= temp @kind object;
  #L15c9f6.  call temp:= `isObjectsFieldValueDefault`(v7, v6) @signature `Lcom/j256/ormlite/field/FieldType;.isObjectsFieldValueDefault:(Ljava/lang/Object;)Z` @kind virtual;
  #L15c9fc.  v7:= temp;
  #L15c9fe.  if v7 == 0 then goto L15c98c;
  #L15ca02.  call temp:= `createWithForeignDao`(v5, v6) @signature `Lcom/j256/ormlite/field/FieldType;.createWithForeignDao:(Ljava/lang/Object;)I` @kind virtual;
  #Try_end1.  
  #L15ca08.  goto L15c98c;
  #L15ca0a.  v0:= Exception @type ^`java.sql.SQLException` @kind object;
  #L15ca0c.  v1:= new `java.lang.StringBuilder`;
  #L15ca10.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15ca16.  v2:= "Unable to run insert stmt on object " @kind object;
  #L15ca1a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ca20.  v1:= temp @kind object;
  #L15ca22.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ca28.  v1:= temp @kind object;
  #L15ca2a.  v2:= ": " @kind object;
  #L15ca2e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ca34.  v1:= temp @kind object;
  #L15ca36.  v2:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.statement` @type ^`java.lang.String` @kind object;
  #L15ca3a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ca40.  v1:= temp @kind object;
  #L15ca42.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15ca48.  v1:= temp @kind object;
  #L15ca4a.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15ca50.  v0:= temp @kind object;
  #L15ca52.  throw v0;
  #Try_start2.  
  #L15ca54.  call temp:= `getFieldObjects`(v9, v12) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.getFieldObjects:(Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L15ca5a.  v1:= temp @kind object;
  #L15ca5c.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int`;
  #L15ca60.  if v0 < 0 then goto L15cbb2;
  #L15ca64.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int`;
  #L15ca68.  v0:= v1[v0] @kind object;
  #L15ca6c.  if v0 != 0 then goto L15cbb2;
  #L15ca70.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L15ca74.  v2:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int`;
  #L15ca78.  v2:= v0[v2] @kind object;
  #L15ca7c.  v0:= 0I;
  #L15ca7e.  call temp:= `moveToNextValue`(v2, v0) @signature `Lcom/j256/ormlite/field/FieldType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15ca84.  v0:= temp @kind object;
  #L15ca86.  v4:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int`;
  #L15ca8a.  call temp:= `convertJavaFieldToSqlArgValue`(v2, v0) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15ca90.  v2:= temp @kind object;
  #L15ca92.  v1[v4]:= v2 @kind object;
  #Try_end2.  
  #Try_start3.  
  #L15ca96.  v2:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.statement` @type ^`java.lang.String` @kind object;
  #L15ca9a.  v4:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L15ca9e.  call temp:= `insert`(v11, v2, v1, v4, v3) @signature `Lcom/j256/ormlite/support/DatabaseConnection;.insert:(Ljava/lang/String;[Ljava/lang/Object;[Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/GeneratedKeyHolder;)I` @kind interface;
  #Try_end3.  
  #L15caa4.  v2:= temp;
  #Try_start4.  
  #L15caa6.  v4:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15caaa.  v5:= "insert data with statement '{}' and {} args, changed {} rows" @kind object;
  #L15caae.  v6:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.statement` @type ^`java.lang.String` @kind object;
  #L15cab2.  v7:= length @variable v1;
  #L15cab4.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15caba.  v7:= temp @kind object;
  #L15cabc.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15cac2.  v8:= temp @kind object;
  #L15cac4.  call `debug`(v4, v5, v6, v7, v8) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L15caca.  v4:= length @variable v1;
  #L15cacc.  if v4 <= 0 then goto L15cade;
  #L15cad0.  v4:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15cad4.  v5:= "insert arguments: {}" @kind object;
  #L15cad8.  call `trace`(v4, v5, v1) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L15cade.  if v2 <= 0 then goto L15cbb0;
  #L15cae2.  if v0 == 0 then goto L15cafc;
  #L15cae6.  v1:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L15caea.  v4:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int`;
  #L15caee.  v1:= v1[v4] @kind object;
  #L15caf2.  v4:= 0I;
  #L15caf4.  v5:= 0I;
  #L15caf6.  call `assignField`(v1, v12, v0, v4, v5) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L15cafc.  if v3 == 0 then goto L15cb7e;
  #L15cb00.  call temp:= `getKey`(v3) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate$KeyHolder;.getKey:()Ljava/lang/Number;` @kind virtual;
  #L15cb06.  v0:= temp @kind object;
  #L15cb08.  if v0 != 0 then goto L15cb50;
  #L15cb0c.  v0:= new `java.sql.SQLException`;
  #L15cb10.  v1:= "generated-id key was not set by the update call, maybe a schema mismatch between entity and database table?" @kind object;
  #L15cb14.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15cb1a.  throw v0;
  #L15cb1c.  v0:= Exception @type ^`java.sql.SQLException` @kind object;
  #L15cb1e.  v2:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15cb22.  v3:= "insert data with statement '{}' and {} args, threw exception: {}" @kind object;
  #L15cb26.  v4:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.statement` @type ^`java.lang.String` @kind object;
  #L15cb2a.  v5:= length @variable v1;
  #L15cb2c.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15cb32.  v5:= temp @kind object;
  #L15cb34.  call `debug`(v2, v3, v4, v5, v0) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L15cb3a.  v2:= length @variable v1;
  #L15cb3c.  if v2 <= 0 then goto L15cb4e;
  #L15cb40.  v2:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15cb44.  v3:= "insert arguments: {}" @kind object;
  #L15cb48.  call `trace`(v2, v3, v1) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L15cb4e.  throw v0;
  #L15cb50.  call temp:= `longValue`(v0) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L15cb56.  v4:= temp @kind wide;
  #L15cb58.  v6:= 0L;
  #L15cb5c.  v1:= lcmp(v4, v6);
  #L15cb60.  if v1 != 0 then goto L15cb74;
  #L15cb64.  v0:= new `java.sql.SQLException`;
  #L15cb68.  v1:= "generated-id key must not be 0 value, maybe a schema mismatch between entity and database table?" @kind object;
  #L15cb6c.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15cb72.  throw v0;
  #L15cb74.  v1:= "keyholder" @kind object;
  #L15cb78.  call `assignIdValue`(v9, v12, v0, v1, v13) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Ljava/lang/String;Lcom/j256/ormlite/dao/ObjectCache;)V` @kind direct;
  #L15cb7e.  if v13 == 0 then goto L15cbb0;
  #L15cb82.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L15cb86.  call temp:= `getForeignCollections`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.getForeignCollections:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15cb8c.  v0:= temp @kind object;
  #L15cb8e.  call temp:= `foreignCollectionsAreAssigned`(v9, v0, v12) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.foreignCollectionsAreAssigned:([Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Z` @kind direct;
  #L15cb94.  v0:= temp;
  #L15cb96.  if v0 == 0 then goto L15cbb0;
  #L15cb9a.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15cb9e.  call temp:= `extractJavaFieldValue`(v0, v12) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15cba4.  v0:= temp @kind object;
  #L15cba6.  v1:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.clazz` @type ^`java.lang.Class` @kind object;
  #L15cbaa.  call `put`(v13, v1, v0, v12) @signature `Lcom/j256/ormlite/dao/ObjectCache;.put:(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #Try_end4.  
  #L15cbb0.  return v2;
  #L15cbb2.  v0:= v2 @kind object;
  #L15cbb4.  goto L15ca96;
  #L15cbb8.  v3:= v2 @kind object;
  #L15cbba.  goto L15c95a;
  catch `java.sql.SQLException` @[Try_start0..Try_end0] goto L15ca0a;
  catch `java.sql.SQLException` @[Try_start1..Try_end1] goto L15ca0a;
  catch `java.sql.SQLException` @[Try_start2..Try_end2] goto L15ca0a;
  catch `java.sql.SQLException` @[Try_start3..Try_end3] goto L15cb1c;
  catch `java.sql.SQLException` @[Try_start4..Try_end4] goto L15ca0a;
}
