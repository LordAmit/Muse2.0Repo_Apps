record `com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper` @kind class @AccessFlag  extends `com.j256.ormlite.stmt.GenericRowMapper` @kind interface {
  `com.j256.ormlite.field.DataType`[] `com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper.columnTypes` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper` v0 @kind this, `com.j256.ormlite.field.DataType`[] v1 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$ObjectArrayRowMapper;.<init>:([Lcom/j256/ormlite/field/DataType;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L159b3c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L159b42.  v0.`com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper.columnTypes` @type ^`com.j256.ormlite.field.DataType`[] := v1 @kind object;
  #L159b46.  return @kind void;
}
procedure `java.lang.Object` `mapRow`(`com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper` v1 @kind this, `com.j256.ormlite.support.DatabaseResults` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$ObjectArrayRowMapper;.mapRow:(Lcom/j256/ormlite/support/DatabaseResults;)Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L159b58.  call temp:= `mapRow`(v1, v2) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$ObjectArrayRowMapper;.mapRow:(Lcom/j256/ormlite/support/DatabaseResults;)[Ljava/lang/Object;` @kind virtual;
  #L159b5e.  v0:= temp @kind object;
  #L159b60.  return v0 @kind object;
}
procedure `java.lang.Object`[] `mapRow`(`com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper` v5 @kind this, `com.j256.ormlite.support.DatabaseResults` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementExecutor$ObjectArrayRowMapper;.mapRow:(Lcom/j256/ormlite/support/DatabaseResults;)[Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L159b74.  call temp:= `getColumnCount`(v6) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getColumnCount:()I` @kind interface;
  #L159b7a.  v2:= temp;
  #L159b7c.  v3:= new `java.lang.Object`[v2];
  #L159b80.  v0:= 0I;
  #L159b82.  v1:= v0;
  #L159b84.  if v1 >= v2 then goto L159bbe;
  #L159b88.  v0:= v5.`com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper.columnTypes` @type ^`com.j256.ormlite.field.DataType`[] @kind object;
  #L159b8c.  v0:= length @variable v0;
  #L159b8e.  if v1 < v0 then goto L159bb4;
  #L159b92.  v0:= `@@com.j256.ormlite.field.DataType.STRING` @type ^`com.j256.ormlite.field.DataType` @kind object;
  #L159b96.  call temp:= `getDataPersister`(v0) @signature `Lcom/j256/ormlite/field/DataType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L159b9c.  v0:= temp @kind object;
  #L159b9e.  v4:= 0I;
  #L159ba0.  call temp:= `resultToJava`(v0, v4, v6, v1) @signature `Lcom/j256/ormlite/field/DataPersister;.resultToJava:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @kind interface;
  #L159ba6.  v0:= temp @kind object;
  #L159ba8.  v3[v1]:= v0 @kind object;
  #L159bac.  v0:= v1 + 1;
  #L159bb0.  v1:= v0;
  #L159bb2.  goto L159b84;
  #L159bb4.  v0:= v5.`com.j256.ormlite.stmt.StatementExecutor$ObjectArrayRowMapper.columnTypes` @type ^`com.j256.ormlite.field.DataType`[] @kind object;
  #L159bb8.  v0:= v0[v1] @kind object;
  #L159bbc.  goto L159b96;
  #L159bbe.  return v3 @kind object;
}
