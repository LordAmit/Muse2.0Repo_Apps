record `com.j256.ormlite.table.DatabaseTableConfig` @kind class @AccessFlag PUBLIC {
  `java.lang.reflect.Constructor` `com.j256.ormlite.table.DatabaseTableConfig.constructor` @AccessFlag PRIVATE;
  `java.lang.Class` `com.j256.ormlite.table.DatabaseTableConfig.dataClass` @AccessFlag PRIVATE;
  `java.util.List` `com.j256.ormlite.table.DatabaseTableConfig.fieldConfigs` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType`[] `com.j256.ormlite.table.DatabaseTableConfig.fieldTypes` @AccessFlag PRIVATE;
  `java.lang.String` `com.j256.ormlite.table.DatabaseTableConfig.tableName` @AccessFlag PRIVATE;
}
global `com.j256.ormlite.misc.JavaxPersistenceConfigurer` `@@com.j256.ormlite.table.DatabaseTableConfig.javaxPersistenceConfigurer` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L15f230.  v0:= "javax.persistence.Entity" @kind object;
  #L15f234.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L15f23a.  v0:= "com.j256.ormlite.misc.JavaxPersistenceImpl" @kind object;
  #L15f23e.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L15f244.  v0:= temp @kind object;
  #L15f246.  v1:= 0I;
  #L15f248.  v1:= new `java.lang.Class`[v1];
  #L15f24c.  call temp:= `getConstructor`(v0, v1) @signature `Ljava/lang/Class;.getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L15f252.  v0:= temp @kind object;
  #L15f254.  v1:= 0I;
  #L15f256.  v1:= new `java.lang.Object`[v1];
  #L15f25a.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15f260.  v0:= temp @kind object;
  #L15f262.  v0:= (`com.j256.ormlite.misc.JavaxPersistenceConfigurer`) v0 @kind object;
  #L15f266.  `@@com.j256.ormlite.table.DatabaseTableConfig.javaxPersistenceConfigurer` @type ^`com.j256.ormlite.misc.JavaxPersistenceConfigurer` := v0 @kind object;
  #Try_end0.  
  #L15f26a.  return @kind void;
  #L15f26c.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L15f26e.  v0:= 0I;
  #L15f270.  `@@com.j256.ormlite.table.DatabaseTableConfig.javaxPersistenceConfigurer` @type ^`com.j256.ormlite.misc.JavaxPersistenceConfigurer` := v0 @kind object;
  #L15f274.  goto L15f26a;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L15f26c;
}
procedure `void` `<init>`(`com.j256.ormlite.table.DatabaseTableConfig` v0 @kind this) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15f298.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15f29e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.table.DatabaseTableConfig` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.<init>:(Ljava/lang/Class;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15f2b0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15f2b6.  v0.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` := v1 @kind object;
  #L15f2ba.  v0.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` := v2 @kind object;
  #L15f2be.  v0.`com.j256.ormlite.table.DatabaseTableConfig.fieldConfigs` @type ^`java.util.List` := v3 @kind object;
  #L15f2c2.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.table.DatabaseTableConfig` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `com.j256.ormlite.field.FieldType`[] v3 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L15f2d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15f2da.  v0.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` := v1 @kind object;
  #L15f2de.  v0.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` := v2 @kind object;
  #L15f2e2.  v0.`com.j256.ormlite.table.DatabaseTableConfig.fieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] := v3 @kind object;
  #L15f2e6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.table.DatabaseTableConfig` v1 @kind this, `java.lang.Class` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.<init>:(Ljava/lang/Class;Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L15f2f8.  call temp:= `extractTableName`(v2) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractTableName:(Ljava/lang/Class;)Ljava/lang/String;` @kind static;
  #L15f2fe.  v0:= temp @kind object;
  #L15f300.  call `<init>`(v1, v2, v0, v3) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.<init>:(Ljava/lang/Class;Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L15f306.  return @kind void;
}
procedure `com.j256.ormlite.field.FieldType`[] `convertFieldConfigs`(`com.j256.ormlite.table.DatabaseTableConfig` v8 @kind this, `com.j256.ormlite.support.ConnectionSource` v9 @kind object, `java.lang.String` v10 @kind object, `java.util.List` v11 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.convertFieldConfigs:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/util/List;)[Lcom/j256/ormlite/field/FieldType;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L15f318.  v6:= new `java.util.ArrayList`;
  #L15f31c.  call `<init>`(v6) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L15f322.  call temp:= `iterator`(v11) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L15f328.  v7:= temp @kind object;
  #L15f32a.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L15f330.  v0:= temp;
  #L15f332.  if v0 == 0 then goto L15f3dc;
  #L15f336.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L15f33c.  v4:= temp @kind object;
  #L15f33e.  v4:= (`com.j256.ormlite.field.DatabaseFieldConfig`) v4 @kind object;
  #L15f342.  v0:= 0I;
  #L15f344.  v1:= v8.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L15f348.  if v1 == 0 then goto L15f372;
  #Try_start0.  
  #L15f34c.  call temp:= `getFieldName`(v4) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getFieldName:()Ljava/lang/String;` @kind virtual;
  #L15f352.  v2:= temp @kind object;
  #L15f354.  call temp:= `getDeclaredField`(v1, v2) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #Try_end0.  
  #L15f35a.  v3:= temp @kind object;
  #L15f35c.  if v3 == 0 then goto L15f3ca;
  #L15f360.  v0:= new `com.j256.ormlite.field.FieldType`;
  #L15f364.  v5:= v8.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L15f368.  v1:= v9 @kind object;
  #L15f36a.  v2:= v10 @kind object;
  #L15f36c.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/field/FieldType;.<init>:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Lcom/j256/ormlite/field/DatabaseFieldConfig;Ljava/lang/Class;)V` @kind direct;
  #L15f372.  if v0 != 0 then goto L15f3d4;
  #L15f376.  v0:= new `java.sql.SQLException`;
  #L15f37a.  v1:= new `java.lang.StringBuilder`;
  #L15f37e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f384.  v2:= "Could not find declared field with name '" @kind object;
  #L15f388.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f38e.  v1:= temp @kind object;
  #L15f390.  call temp:= `getFieldName`(v4) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getFieldName:()Ljava/lang/String;` @kind virtual;
  #L15f396.  v2:= temp @kind object;
  #L15f398.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f39e.  v1:= temp @kind object;
  #L15f3a0.  v2:= "' for " @kind object;
  #L15f3a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f3aa.  v1:= temp @kind object;
  #L15f3ac.  v2:= v8.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L15f3b0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f3b6.  v1:= temp @kind object;
  #L15f3b8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f3be.  v1:= temp @kind object;
  #L15f3c0.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f3c6.  throw v0;
  #L15f3c8.  v2:= Exception @type ^`java.lang.NoSuchFieldException` @kind object;
  #L15f3ca.  call temp:= `getSuperclass`(v1) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L15f3d0.  v1:= temp @kind object;
  #L15f3d2.  goto L15f348;
  #L15f3d4.  call temp:= `add`(v6, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15f3da.  goto L15f32a;
  #L15f3dc.  call temp:= `isEmpty`(v6) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L15f3e2.  v0:= temp;
  #L15f3e4.  if v0 == 0 then goto L15f41e;
  #L15f3e8.  v0:= new `java.sql.SQLException`;
  #L15f3ec.  v1:= new `java.lang.StringBuilder`;
  #L15f3f0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f3f6.  v2:= "No fields were configured for class " @kind object;
  #L15f3fa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f400.  v1:= temp @kind object;
  #L15f402.  v2:= v8.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L15f406.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f40c.  v1:= temp @kind object;
  #L15f40e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f414.  v1:= temp @kind object;
  #L15f416.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f41c.  throw v0;
  #L15f41e.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L15f424.  v0:= temp;
  #L15f426.  v0:= new `com.j256.ormlite.field.FieldType`[v0];
  #L15f42a.  call temp:= `toArray`(v6, v0) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L15f430.  v0:= temp @kind object;
  #L15f432.  v0:= (`com.j256.ormlite.field.FieldType`[]) v0 @kind object;
  #L15f436.  return v0 @kind object;
  catch `java.lang.NoSuchFieldException` @[Try_start0..Try_end0] goto L15f3c8;
}
procedure `com.j256.ormlite.field.FieldType`[] `extractFieldTypes`(`com.j256.ormlite.support.ConnectionSource` v6 @kind object, `java.lang.Class` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;Ljava/lang/String;)[Lcom/j256/ormlite/field/FieldType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15f458.  v2:= new `java.util.ArrayList`;
  #L15f45c.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L15f462.  v1:= v7 @kind object;
  #L15f464.  if v1 == 0 then goto L15f4a0;
  #L15f468.  call temp:= `getDeclaredFields`(v1) @signature `Ljava/lang/Class;.getDeclaredFields:()[Ljava/lang/reflect/Field;` @kind virtual;
  #L15f46e.  v3:= temp @kind object;
  #L15f470.  v4:= length @variable v3;
  #L15f472.  v0:= 0I;
  #L15f474.  if v0 >= v4 then goto L15f494;
  #L15f478.  v5:= v3[v0] @kind object;
  #L15f47c.  call temp:= `createFieldType`(v6, v8, v5, v7) @signature `Lcom/j256/ormlite/field/FieldType;.createFieldType:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Ljava/lang/Class;)Lcom/j256/ormlite/field/FieldType;` @kind static;
  #L15f482.  v5:= temp @kind object;
  #L15f484.  if v5 == 0 then goto L15f48e;
  #L15f488.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15f48e.  v0:= v0 + 1;
  #L15f492.  goto L15f474;
  #L15f494.  call temp:= `getSuperclass`(v1) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L15f49a.  v0:= temp @kind object;
  #L15f49c.  v1:= v0 @kind object;
  #L15f49e.  goto L15f464;
  #L15f4a0.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L15f4a6.  v0:= temp;
  #L15f4a8.  if v0 == 0 then goto L15f4fe;
  #L15f4ac.  v0:= new `java.lang.IllegalArgumentException`;
  #L15f4b0.  v1:= new `java.lang.StringBuilder`;
  #L15f4b4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f4ba.  v2:= "No fields have a " @kind object;
  #L15f4be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f4c4.  v1:= temp @kind object;
  #L15f4c6.  v2:= constclass @type ^`com.j256.ormlite.field.DatabaseField` @kind object;
  #L15f4ca.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L15f4d0.  v2:= temp @kind object;
  #L15f4d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f4d8.  v1:= temp @kind object;
  #L15f4da.  v2:= " annotation in " @kind object;
  #L15f4de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f4e4.  v1:= temp @kind object;
  #L15f4e6.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f4ec.  v1:= temp @kind object;
  #L15f4ee.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f4f4.  v1:= temp @kind object;
  #L15f4f6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f4fc.  throw v0;
  #L15f4fe.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L15f504.  v0:= temp;
  #L15f506.  v0:= new `com.j256.ormlite.field.FieldType`[v0];
  #L15f50a.  call temp:= `toArray`(v2, v0) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L15f510.  v0:= temp @kind object;
  #L15f512.  v0:= (`com.j256.ormlite.field.FieldType`[]) v0 @kind object;
  #L15f516.  return v0 @kind object;
}
procedure `java.lang.String` `extractTableName`(`java.lang.Class` v3 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractTableName:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L15f528.  v0:= constclass @type ^`com.j256.ormlite.table.DatabaseTable` @kind object;
  #L15f52c.  call temp:= `getAnnotation`(v3, v0) @signature `Ljava/lang/Class;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L15f532.  v0:= temp @kind object;
  #L15f534.  v0:= (`com.j256.ormlite.table.DatabaseTable`) v0 @kind object;
  #L15f538.  v1:= 0I;
  #L15f53a.  if v0 == 0 then goto L15f594;
  #L15f53e.  call temp:= `tableName`(v0) @signature `Lcom/j256/ormlite/table/DatabaseTable;.tableName:()Ljava/lang/String;` @kind interface;
  #L15f544.  v2:= temp @kind object;
  #L15f546.  if v2 == 0 then goto L15f594;
  #L15f54a.  call temp:= `tableName`(v0) @signature `Lcom/j256/ormlite/table/DatabaseTable;.tableName:()Ljava/lang/String;` @kind interface;
  #L15f550.  v2:= temp @kind object;
  #L15f552.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L15f558.  v2:= temp;
  #L15f55a.  if v2 <= 0 then goto L15f594;
  #L15f55e.  call temp:= `tableName`(v0) @signature `Lcom/j256/ormlite/table/DatabaseTable;.tableName:()Ljava/lang/String;` @kind interface;
  #L15f564.  v0:= temp @kind object;
  #L15f566.  if v0 != 0 then goto L15f57e;
  #L15f56a.  v1:= `@@com.j256.ormlite.table.DatabaseTableConfig.javaxPersistenceConfigurer` @type ^`com.j256.ormlite.misc.JavaxPersistenceConfigurer` @kind object;
  #L15f56e.  if v1 == 0 then goto L15f57e;
  #L15f572.  v0:= `@@com.j256.ormlite.table.DatabaseTableConfig.javaxPersistenceConfigurer` @type ^`com.j256.ormlite.misc.JavaxPersistenceConfigurer` @kind object;
  #L15f576.  call temp:= `getEntityName`(v0, v3) @signature `Lcom/j256/ormlite/misc/JavaxPersistenceConfigurer;.getEntityName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L15f57c.  v0:= temp @kind object;
  #L15f57e.  if v0 != 0 then goto L15f592;
  #L15f582.  call temp:= `getSimpleName`(v3) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L15f588.  v0:= temp @kind object;
  #L15f58a.  call temp:= `toLowerCase`(v0) @signature `Ljava/lang/String;.toLowerCase:()Ljava/lang/String;` @kind virtual;
  #L15f590.  v0:= temp @kind object;
  #L15f592.  return v0 @kind object;
  #L15f594.  v0:= v1 @kind object;
  #L15f596.  goto L15f566;
}
procedure `java.lang.reflect.Constructor` `findNoArgConstructor`(`java.lang.Class` v5 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.findNoArgConstructor:(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #Try_start0.  
  #L15f5a8.  call temp:= `getDeclaredConstructors`(v5) @signature `Ljava/lang/Class;.getDeclaredConstructors:()[Ljava/lang/reflect/Constructor;` @kind virtual;
  #L15f5ae.  v0:= temp @kind object;
  #L15f5b0.  v0:= (`java.lang.reflect.Constructor`[]) v0 @kind object;
  #Try_end0.  
  #L15f5b4.  v2:= length @variable v0;
  #L15f5b6.  v1:= 0I;
  #L15f5b8.  if v1 >= v2 then goto L15f652;
  #L15f5bc.  v3:= v0[v1] @kind object;
  #L15f5c0.  call temp:= `getParameterTypes`(v3) @signature `Ljava/lang/reflect/Constructor;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L15f5c6.  v4:= temp @kind object;
  #L15f5c8.  v4:= length @variable v4;
  #L15f5ca.  if v4 != 0 then goto L15f64c;
  #L15f5ce.  call temp:= `isAccessible`(v3) @signature `Ljava/lang/reflect/Constructor;.isAccessible:()Z` @kind virtual;
  #L15f5d4.  v0:= temp;
  #L15f5d6.  if v0 != 0 then goto L15f5e2;
  #L15f5da.  v0:= 1I;
  #Try_start1.  
  #L15f5dc.  call `setAccessible`(v3, v0) @signature `Ljava/lang/reflect/Constructor;.setAccessible:(Z)V` @kind virtual;
  #Try_end1.  
  #L15f5e2.  return v3 @kind object;
  #L15f5e4.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L15f5e6.  v1:= new `java.lang.IllegalArgumentException`;
  #L15f5ea.  v2:= new `java.lang.StringBuilder`;
  #L15f5ee.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f5f4.  v3:= "Can't lookup declared constructors for " @kind object;
  #L15f5f8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f5fe.  v2:= temp @kind object;
  #L15f600.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f606.  v2:= temp @kind object;
  #L15f608.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f60e.  v2:= temp @kind object;
  #L15f610.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L15f616.  throw v1;
  #L15f618.  v0:= Exception @type ^`java.lang.SecurityException` @kind object;
  #L15f61a.  v0:= new `java.lang.IllegalArgumentException`;
  #L15f61e.  v1:= new `java.lang.StringBuilder`;
  #L15f622.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f628.  v2:= "Could not open access to constructor for " @kind object;
  #L15f62c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f632.  v1:= temp @kind object;
  #L15f634.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f63a.  v1:= temp @kind object;
  #L15f63c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f642.  v1:= temp @kind object;
  #L15f644.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f64a.  throw v0;
  #L15f64c.  v1:= v1 + 1;
  #L15f650.  goto L15f5b8;
  #L15f652.  call temp:= `getEnclosingClass`(v5) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L15f658.  v0:= temp @kind object;
  #L15f65a.  if v0 != 0 then goto L15f690;
  #L15f65e.  v0:= new `java.lang.IllegalArgumentException`;
  #L15f662.  v1:= new `java.lang.StringBuilder`;
  #L15f666.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f66c.  v2:= "Can't find a no-arg constructor for " @kind object;
  #L15f670.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f676.  v1:= temp @kind object;
  #L15f678.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f67e.  v1:= temp @kind object;
  #L15f680.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f686.  v1:= temp @kind object;
  #L15f688.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f68e.  throw v0;
  #L15f690.  v0:= new `java.lang.IllegalArgumentException`;
  #L15f694.  v1:= new `java.lang.StringBuilder`;
  #L15f698.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f69e.  v2:= "Can't find a no-arg constructor for " @kind object;
  #L15f6a2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f6a8.  v1:= temp @kind object;
  #L15f6aa.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f6b0.  v1:= temp @kind object;
  #L15f6b2.  v2:= ".  Missing static on inner class?" @kind object;
  #L15f6b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f6bc.  v1:= temp @kind object;
  #L15f6be.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f6c4.  v1:= temp @kind object;
  #L15f6c6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f6cc.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L15f5e4;
  catch `java.lang.SecurityException` @[Try_start1..Try_end1] goto L15f618;
}
procedure `com.j256.ormlite.table.DatabaseTableConfig` `fromClass`(`com.j256.ormlite.support.ConnectionSource` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.fromClass:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/table/DatabaseTableConfig;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L15f6fc.  call temp:= `extractTableName`(v4) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractTableName:(Ljava/lang/Class;)Ljava/lang/String;` @kind static;
  #L15f702.  v0:= temp @kind object;
  #L15f704.  call temp:= `getDatabaseType`(v3) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L15f70a.  v1:= temp @kind object;
  #L15f70c.  call temp:= `isEntityNamesMustBeUpCase`(v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.isEntityNamesMustBeUpCase:()Z` @kind interface;
  #L15f712.  v2:= temp;
  #L15f714.  if v2 == 0 then goto L15f720;
  #L15f718.  call temp:= `upCaseEntityName`(v1, v0) @signature `Lcom/j256/ormlite/db/DatabaseType;.upCaseEntityName:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L15f71e.  v0:= temp @kind object;
  #L15f720.  v1:= new `com.j256.ormlite.table.DatabaseTableConfig`;
  #L15f724.  call temp:= `extractFieldTypes`(v3, v4, v0) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;Ljava/lang/String;)[Lcom/j256/ormlite/field/FieldType;` @kind static;
  #L15f72a.  v2:= temp @kind object;
  #L15f72c.  call `<init>`(v1, v4, v0, v2) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L15f732.  return v1 @kind object;
}
procedure `void` `extractFieldTypes`(`com.j256.ormlite.table.DatabaseTableConfig` v2 @kind this, `com.j256.ormlite.support.ConnectionSource` v3 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15f744.  v0:= v2.`com.j256.ormlite.table.DatabaseTableConfig.fieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L15f748.  if v0 != 0 then goto L15f768;
  #L15f74c.  v0:= v2.`com.j256.ormlite.table.DatabaseTableConfig.fieldConfigs` @type ^`java.util.List` @kind object;
  #L15f750.  if v0 != 0 then goto L15f76a;
  #L15f754.  v0:= v2.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L15f758.  v1:= v2.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` @kind object;
  #L15f75c.  call temp:= `extractFieldTypes`(v3, v0, v1) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;Ljava/lang/String;)[Lcom/j256/ormlite/field/FieldType;` @kind static;
  #L15f762.  v0:= temp @kind object;
  #L15f764.  v2.`com.j256.ormlite.table.DatabaseTableConfig.fieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] := v0 @kind object;
  #L15f768.  return @kind void;
  #L15f76a.  v0:= v2.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` @kind object;
  #L15f76e.  v1:= v2.`com.j256.ormlite.table.DatabaseTableConfig.fieldConfigs` @type ^`java.util.List` @kind object;
  #L15f772.  call temp:= `convertFieldConfigs`(v2, v3, v0, v1) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.convertFieldConfigs:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/util/List;)[Lcom/j256/ormlite/field/FieldType;` @kind direct;
  #L15f778.  v0:= temp @kind object;
  #L15f77a.  v2.`com.j256.ormlite.table.DatabaseTableConfig.fieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] := v0 @kind object;
  #L15f77e.  goto L15f768;
}
procedure `java.lang.reflect.Constructor` `getConstructor`(`com.j256.ormlite.table.DatabaseTableConfig` v1 @kind this) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.getConstructor:()Ljava/lang/reflect/Constructor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15f790.  v0:= v1.`com.j256.ormlite.table.DatabaseTableConfig.constructor` @type ^`java.lang.reflect.Constructor` @kind object;
  #L15f794.  if v0 != 0 then goto L15f7a8;
  #L15f798.  v0:= v1.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L15f79c.  call temp:= `findNoArgConstructor`(v0) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.findNoArgConstructor:(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind static;
  #L15f7a2.  v0:= temp @kind object;
  #L15f7a4.  v1.`com.j256.ormlite.table.DatabaseTableConfig.constructor` @type ^`java.lang.reflect.Constructor` := v0 @kind object;
  #L15f7a8.  v0:= v1.`com.j256.ormlite.table.DatabaseTableConfig.constructor` @type ^`java.lang.reflect.Constructor` @kind object;
  #L15f7ac.  return v0 @kind object;
}
procedure `java.lang.Class` `getDataClass`(`com.j256.ormlite.table.DatabaseTableConfig` v1 @kind this) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.getDataClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15f7c0.  v0:= v1.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L15f7c4.  return v0 @kind object;
}
procedure `java.util.List` `getFieldConfigs`(`com.j256.ormlite.table.DatabaseTableConfig` v1 @kind this) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.getFieldConfigs:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15f7d8.  v0:= v1.`com.j256.ormlite.table.DatabaseTableConfig.fieldConfigs` @type ^`java.util.List` @kind object;
  #L15f7dc.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType`[] `getFieldTypes`(`com.j256.ormlite.table.DatabaseTableConfig` v2 @kind this, `com.j256.ormlite.db.DatabaseType` v3 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.getFieldTypes:(Lcom/j256/ormlite/db/DatabaseType;)[Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15f7f0.  v0:= v2.`com.j256.ormlite.table.DatabaseTableConfig.fieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L15f7f4.  if v0 != 0 then goto L15f808;
  #L15f7f8.  v0:= new `java.sql.SQLException`;
  #L15f7fc.  v1:= "Field types have not been extracted in table config" @kind object;
  #L15f800.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f806.  throw v0;
  #L15f808.  v0:= v2.`com.j256.ormlite.table.DatabaseTableConfig.fieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L15f80c.  return v0 @kind object;
}
procedure `java.lang.String` `getTableName`(`com.j256.ormlite.table.DatabaseTableConfig` v1 @kind this) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.getTableName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15f820.  v0:= v1.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` @kind object;
  #L15f824.  return v0 @kind object;
}
procedure `void` `initialize`(`com.j256.ormlite.table.DatabaseTableConfig` v3 @kind this) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.initialize:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15f838.  v0:= v3.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L15f83c.  if v0 != 0 then goto L15f882;
  #L15f840.  v0:= new `java.lang.IllegalStateException`;
  #L15f844.  v1:= new `java.lang.StringBuilder`;
  #L15f848.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f84e.  v2:= "dataClass was never set on " @kind object;
  #L15f852.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f858.  v1:= temp @kind object;
  #L15f85a.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15f860.  v2:= temp @kind object;
  #L15f862.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L15f868.  v2:= temp @kind object;
  #L15f86a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f870.  v1:= temp @kind object;
  #L15f872.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f878.  v1:= temp @kind object;
  #L15f87a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f880.  throw v0;
  #L15f882.  v0:= v3.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` @kind object;
  #L15f886.  if v0 != 0 then goto L15f89a;
  #L15f88a.  v0:= v3.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L15f88e.  call temp:= `extractTableName`(v0) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractTableName:(Ljava/lang/Class;)Ljava/lang/String;` @kind static;
  #L15f894.  v0:= temp @kind object;
  #L15f896.  v3.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` := v0 @kind object;
  #L15f89a.  return @kind void;
}
procedure `void` `setConstructor`(`com.j256.ormlite.table.DatabaseTableConfig` v0 @kind this, `java.lang.reflect.Constructor` v1 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.setConstructor:(Ljava/lang/reflect/Constructor;)V` @AccessFlag PUBLIC {
    temp;

  #L15f8ac.  v0.`com.j256.ormlite.table.DatabaseTableConfig.constructor` @type ^`java.lang.reflect.Constructor` := v1 @kind object;
  #L15f8b0.  return @kind void;
}
procedure `void` `setDataClass`(`com.j256.ormlite.table.DatabaseTableConfig` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.setDataClass:(Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;

  #L15f8c4.  v0.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` := v1 @kind object;
  #L15f8c8.  return @kind void;
}
procedure `void` `setFieldConfigs`(`com.j256.ormlite.table.DatabaseTableConfig` v0 @kind this, `java.util.List` v1 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.setFieldConfigs:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L15f8dc.  v0.`com.j256.ormlite.table.DatabaseTableConfig.fieldConfigs` @type ^`java.util.List` := v1 @kind object;
  #L15f8e0.  return @kind void;
}
procedure `void` `setTableName`(`com.j256.ormlite.table.DatabaseTableConfig` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.setTableName:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L15f8f4.  v0.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` := v1 @kind object;
  #L15f8f8.  return @kind void;
}
