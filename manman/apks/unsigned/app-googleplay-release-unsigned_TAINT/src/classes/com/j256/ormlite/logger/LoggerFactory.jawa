record `com.j256.ormlite.logger.LoggerFactory` @kind class @AccessFlag PUBLIC {
}
global `java.lang.String` `@@com.j256.ormlite.logger.LoggerFactory.LOG_TYPE_SYSTEM_PROPERTY` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.j256.ormlite.logger.LoggerFactory$LogType` `@@com.j256.ormlite.logger.LoggerFactory.logType` @AccessFlag PRIVATE_STATIC;
procedure `void` `<init>`(`com.j256.ormlite.logger.LoggerFactory` v0 @kind this) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L155f18.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L155f1e.  return @kind void;
}
procedure `com.j256.ormlite.logger.LoggerFactory$LogType` `findLogType`() @signature `Lcom/j256/ormlite/logger/LoggerFactory;.findLogType:()Lcom/j256/ormlite/logger/LoggerFactory$LogType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L155f30.  v0:= "com.j256.ormlite.logger.type" @kind object;
  #L155f34.  call temp:= `getProperty`(v0) @signature `Ljava/lang/System;.getProperty:(Ljava/lang/String;)Ljava/lang/String;` @kind static;
  #L155f3a.  v0:= temp @kind object;
  #L155f3c.  if v0 == 0 then goto L155f9e;
  #Try_start0.  
  #L155f40.  call temp:= `valueOf`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory$LogType;.valueOf:(Ljava/lang/String;)Lcom/j256/ormlite/logger/LoggerFactory$LogType;` @kind static;
  #Try_end0.  
  #L155f46.  v0:= temp @kind object;
  #L155f48.  return v0 @kind object;
  #L155f4a.  v1:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L155f4c.  v1:= new `com.j256.ormlite.logger.LocalLog`;
  #L155f50.  v2:= constclass @type ^`com.j256.ormlite.logger.LoggerFactory` @kind object;
  #L155f54.  call temp:= `getName`(v2) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L155f5a.  v2:= temp @kind object;
  #L155f5c.  call `<init>`(v1, v2) @signature `Lcom/j256/ormlite/logger/LocalLog;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L155f62.  v2:= `@@com.j256.ormlite.logger.Log$Level.WARNING` @type ^`com.j256.ormlite.logger.Log$Level` @kind object;
  #L155f66.  v3:= new `java.lang.StringBuilder`;
  #L155f6a.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L155f70.  v4:= "Could not find valid log-type from system property 'com.j256.ormlite.logger.type', value '" @kind object;
  #L155f74.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155f7a.  v3:= temp @kind object;
  #L155f7c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155f82.  v0:= temp @kind object;
  #L155f84.  v3:= "'" @kind object;
  #L155f88.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L155f8e.  v0:= temp @kind object;
  #L155f90.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L155f96.  v0:= temp @kind object;
  #L155f98.  call `log`(v1, v2, v0) @signature `Lcom/j256/ormlite/logger/Log;.log:(Lcom/j256/ormlite/logger/Log$Level;Ljava/lang/String;)V` @kind interface;
  #L155f9e.  call temp:= `values`() @signature `Lcom/j256/ormlite/logger/LoggerFactory$LogType;.values:()[Lcom/j256/ormlite/logger/LoggerFactory$LogType;` @kind static;
  #L155fa4.  v2:= temp @kind object;
  #L155fa6.  v3:= length @variable v2;
  #L155fa8.  v0:= 0I;
  #L155faa.  v1:= v0;
  #L155fac.  if v1 >= v3 then goto L155fc8;
  #L155fb0.  v0:= v2[v1] @kind object;
  #L155fb4.  call temp:= `isAvailable`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory$LogType;.isAvailable:()Z` @kind virtual;
  #L155fba.  v4:= temp;
  #L155fbc.  if v4 != 0 then goto L155f48;
  #L155fc0.  v0:= v1 + 1;
  #L155fc4.  v1:= v0;
  #L155fc6.  goto L155fac;
  #L155fc8.  v0:= `@@com.j256.ormlite.logger.LoggerFactory$LogType.LOCAL` @type ^`com.j256.ormlite.logger.LoggerFactory$LogType` @kind object;
  #L155fcc.  goto L155f48;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L155f4a;
}
procedure `com.j256.ormlite.logger.Logger` `getLogger`(`java.lang.Class` v1 @kind object) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/Class;)Lcom/j256/ormlite/logger/Logger;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L155ff0.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L155ff6.  v0:= temp @kind object;
  #L155ff8.  call temp:= `getLogger`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/String;)Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L155ffe.  v0:= temp @kind object;
  #L156000.  return v0 @kind object;
}
procedure `com.j256.ormlite.logger.Logger` `getLogger`(`java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/String;)Lcom/j256/ormlite/logger/Logger;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L156014.  v0:= `@@com.j256.ormlite.logger.LoggerFactory.logType` @type ^`com.j256.ormlite.logger.LoggerFactory$LogType` @kind object;
  #L156018.  if v0 != 0 then goto L156028;
  #L15601c.  call temp:= `findLogType`() @signature `Lcom/j256/ormlite/logger/LoggerFactory;.findLogType:()Lcom/j256/ormlite/logger/LoggerFactory$LogType;` @kind static;
  #L156022.  v0:= temp @kind object;
  #L156024.  `@@com.j256.ormlite.logger.LoggerFactory.logType` @type ^`com.j256.ormlite.logger.LoggerFactory$LogType` := v0 @kind object;
  #L156028.  v0:= new `com.j256.ormlite.logger.Logger`;
  #L15602c.  v1:= `@@com.j256.ormlite.logger.LoggerFactory.logType` @type ^`com.j256.ormlite.logger.LoggerFactory$LogType` @kind object;
  #L156030.  call temp:= `createLog`(v1, v2) @signature `Lcom/j256/ormlite/logger/LoggerFactory$LogType;.createLog:(Ljava/lang/String;)Lcom/j256/ormlite/logger/Log;` @kind virtual;
  #L156036.  v1:= temp @kind object;
  #L156038.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/logger/Logger;.<init>:(Lcom/j256/ormlite/logger/Log;)V` @kind direct;
  #L15603e.  return v0 @kind object;
}
procedure `java.lang.String` `getSimpleClassName`(`java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getSimpleClassName:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L156050.  v0:= "\\." @kind object;
  #L156054.  call temp:= `split`(v3, v0) @signature `Ljava/lang/String;.split:(Ljava/lang/String;)[Ljava/lang/String;` @kind virtual;
  #L15605a.  v0:= temp @kind object;
  #L15605c.  v1:= length @variable v0;
  #L15605e.  v2:= 1I;
  #L156060.  if v1 > v2 then goto L156066;
  #L156064.  return v3 @kind object;
  #L156066.  v1:= length @variable v0;
  #L156068.  v1:= v1 + -1;
  #L15606c.  v3:= v0[v1] @kind object;
  #L156070.  goto L156064;
}
