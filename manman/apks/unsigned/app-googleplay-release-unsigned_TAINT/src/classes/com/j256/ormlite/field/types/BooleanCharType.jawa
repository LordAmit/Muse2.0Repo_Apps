record `com.j256.ormlite.field.types.BooleanCharType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BooleanType` @kind class {
}
global `java.lang.String` `@@com.j256.ormlite.field.types.BooleanCharType.DEFAULT_TRUE_FALSE_FORMAT` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.j256.ormlite.field.types.BooleanCharType` `@@com.j256.ormlite.field.types.BooleanCharType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L151a28.  v0:= new `com.j256.ormlite.field.types.BooleanCharType`;
  #L151a2c.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.<init>:()V` @kind direct;
  #L151a32.  `@@com.j256.ormlite.field.types.BooleanCharType.singleTon` @type ^`com.j256.ormlite.field.types.BooleanCharType` := v0 @kind object;
  #L151a36.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L151a48.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L151a4c.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BooleanType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L151a52.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BooleanCharType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.getSingleton:()Lcom/j256/ormlite/field/types/BooleanCharType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L151a64.  v0:= `@@com.j256.ormlite.field.types.BooleanCharType.singleTon` @type ^`com.j256.ormlite.field.types.BooleanCharType` @kind object;
  #L151a68.  return v0 @kind object;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.BooleanCharType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L151a7c.  call temp:= `getDataTypeConfigObj`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @kind virtual;
  #L151a82.  v0:= temp @kind object;
  #L151a84.  v0:= (`java.lang.String`) v0 @kind object;
  #L151a88.  v4:= (`java.lang.Boolean`) v4 @kind object;
  #L151a8c.  call temp:= `booleanValue`(v4) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L151a92.  v1:= temp;
  #L151a94.  if v1 == 0 then goto L151aac;
  #L151a98.  v1:= 0I;
  #L151a9a.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L151aa0.  v0:= temp;
  #L151aa2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L151aa8.  v0:= temp @kind object;
  #L151aaa.  return v0 @kind object;
  #L151aac.  v1:= 1I;
  #L151aae.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L151ab4.  v0:= temp;
  #L151ab6.  goto L151aa2;
}
procedure `java.lang.Object` `makeConfigObject`(`com.j256.ormlite.field.types.BooleanCharType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.makeConfigObject:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L151ac8.  call temp:= `getFormat`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L151ace.  v0:= temp @kind object;
  #L151ad0.  if v0 != 0 then goto L151ada;
  #L151ad4.  v0:= "10" @kind object;
  #L151ad8.  return v0 @kind object;
  #L151ada.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L151ae0.  v1:= temp;
  #L151ae2.  v2:= 2I;
  #L151ae4.  if v1 != v2 then goto L151b00;
  #L151ae8.  v1:= 0I;
  #L151aea.  call temp:= `charAt`(v0, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L151af0.  v1:= temp;
  #L151af2.  v2:= 1I;
  #L151af4.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L151afa.  v2:= temp;
  #L151afc.  if v1 != v2 then goto L151ad8;
  #L151b00.  v1:= new `java.sql.SQLException`;
  #L151b04.  v2:= new `java.lang.StringBuilder`;
  #L151b08.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L151b0e.  v3:= "Invalid boolean format must have 2 different characters that represent true/false like \"10\" or \"tf\": " @kind object;
  #L151b12.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L151b18.  v2:= temp @kind object;
  #L151b1a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L151b20.  v0:= temp @kind object;
  #L151b22.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L151b28.  v0:= temp @kind object;
  #L151b2a.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L151b30.  throw v1;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L151b44.  call temp:= `parseBoolean`(v3) @signature `Ljava/lang/Boolean;.parseBoolean:(Ljava/lang/String;)Z` @kind static;
  #L151b4a.  v0:= temp;
  #L151b4c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L151b52.  v0:= temp @kind object;
  #L151b54.  call temp:= `javaToSqlArg`(v1, v2, v0) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L151b5a.  v0:= temp @kind object;
  #L151b5c.  return v0 @kind object;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L151b70.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L151b76.  v0:= temp;
  #L151b78.  if v0 != 0 then goto L151b82;
  #L151b7c.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L151b80.  return v0 @kind object;
  #L151b82.  v0:= 0I;
  #L151b84.  call temp:= `charAt`(v3, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L151b8a.  v0:= temp;
  #L151b8c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L151b92.  v0:= temp @kind object;
  #L151b94.  call temp:= `sqlArgToJava`(v1, v2, v0, v4) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L151b9a.  v0:= temp @kind object;
  #L151b9c.  goto L151b80;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.BooleanCharType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L151bb0.  call temp:= `getChar`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getChar:(I)C` @kind interface;
  #L151bb6.  v0:= temp;
  #L151bb8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L151bbe.  v0:= temp @kind object;
  #L151bc0.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.BooleanCharType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.Object` v5 @kind object, `int` v6 ) @signature `Lcom/j256/ormlite/field/types/BooleanCharType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L151bd4.  call temp:= `getDataTypeConfigObj`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @kind virtual;
  #L151bda.  v0:= temp @kind object;
  #L151bdc.  v0:= (`java.lang.String`) v0 @kind object;
  #L151be0.  v5:= (`java.lang.Character`) v5 @kind object;
  #L151be4.  call temp:= `charValue`(v5) @signature `Ljava/lang/Character;.charValue:()C` @kind virtual;
  #L151bea.  v1:= temp;
  #L151bec.  v2:= 0I;
  #L151bee.  call temp:= `charAt`(v0, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L151bf4.  v0:= temp;
  #L151bf6.  if v1 != v0 then goto L151c00;
  #L151bfa.  v0:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L151bfe.  return v0 @kind object;
  #L151c00.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L151c04.  goto L151bfe;
}
