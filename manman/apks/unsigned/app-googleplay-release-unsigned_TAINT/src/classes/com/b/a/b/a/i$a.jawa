record `com.b.a.b.a.i$a` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.v` @kind class {
  `com.b.a.b.h` `com.b.a.b.a.i$a.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.b.a.b.a.i$a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.b.a.i$a` v0 @kind this, `com.b.a.b.h` v1 @kind object, `java.util.Map` v2 @kind object) @signature `Lcom/b/a/b/a/i$a;.<init>:(Lcom/b/a/b/h;Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L136ee8.  call `<init>`(v0) @signature `Lcom/b/a/v;.<init>:()V` @kind direct;
  #L136eee.  v0.`com.b.a.b.a.i$a.a` @type ^`com.b.a.b.h` := v1 @kind object;
  #L136ef2.  v0.`com.b.a.b.a.i$a.b` @type ^`java.util.Map` := v2 @kind object;
  #L136ef6.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.i$a` v3 @kind this, `com.b.a.d.c` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lcom/b/a/b/a/i$a;.a:(Lcom/b/a/d/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L136f08.  if v5 != 0 then goto L136f14;
  #L136f0c.  call temp:= `f`(v4) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L136f12.  return @kind void;
  #L136f14.  call temp:= `d`(v4) @signature `Lcom/b/a/d/c;.d:()Lcom/b/a/d/c;` @kind virtual;
  #Try_start0.  
  #L136f1a.  v0:= v3.`com.b.a.b.a.i$a.b` @type ^`java.util.Map` @kind object;
  #L136f1e.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L136f24.  v0:= temp @kind object;
  #L136f26.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L136f2c.  v1:= temp @kind object;
  #L136f2e.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L136f34.  v0:= temp;
  #L136f36.  if v0 == 0 then goto L136f72;
  #L136f3a.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L136f40.  v0:= temp @kind object;
  #L136f42.  v0:= (`com.b.a.b.a.i$b`) v0 @kind object;
  #L136f46.  call temp:= `a`(v0, v5) @signature `Lcom/b/a/b/a/i$b;.a:(Ljava/lang/Object;)Z` @kind virtual;
  #L136f4c.  v2:= temp;
  #L136f4e.  if v2 == 0 then goto L136f2e;
  #L136f52.  v2:= v0.`com.b.a.b.a.i$b.h` @type ^`java.lang.String` @kind object;
  #L136f56.  call temp:= `a`(v4, v2) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/String;)Lcom/b/a/d/c;` @kind virtual;
  #L136f5c.  call `a`(v0, v4, v5) @signature `Lcom/b/a/b/a/i$b;.a:(Lcom/b/a/d/c;Ljava/lang/Object;)V` @kind virtual;
  #Try_end0.  
  #L136f62.  goto L136f2e;
  #L136f64.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L136f66.  v1:= new `java.lang.AssertionError`;
  #L136f6a.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L136f70.  throw v1;
  #L136f72.  call temp:= `e`(v4) @signature `Lcom/b/a/d/c;.e:()Lcom/b/a/d/c;` @kind virtual;
  #L136f78.  goto L136f12;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L136f64;
}
procedure `java.lang.Object` `b`(`com.b.a.b.a.i$a` v3 @kind this, `com.b.a.d.a` v4 @kind object) @signature `Lcom/b/a/b/a/i$a;.b:(Lcom/b/a/d/a;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L136f9c.  call temp:= `f`(v4) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L136fa2.  v0:= temp @kind object;
  #L136fa4.  v1:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L136fa8.  if v0 != v1 then goto L136fb6;
  #L136fac.  call `j`(v4) @signature `Lcom/b/a/d/a;.j:()V` @kind virtual;
  #L136fb2.  v0:= 0I;
  #L136fb4.  return v0 @kind object;
  #L136fb6.  v0:= v3.`com.b.a.b.a.i$a.a` @type ^`com.b.a.b.h` @kind object;
  #L136fba.  call temp:= `a`(v0) @signature `Lcom/b/a/b/h;.a:()Ljava/lang/Object;` @kind interface;
  #L136fc0.  v1:= temp @kind object;
  #Try_start0.  
  #L136fc2.  call `c`(v4) @signature `Lcom/b/a/d/a;.c:()V` @kind virtual;
  #L136fc8.  call temp:= `e`(v4) @signature `Lcom/b/a/d/a;.e:()Z` @kind virtual;
  #L136fce.  v0:= temp;
  #L136fd0.  if v0 == 0 then goto L137024;
  #L136fd4.  call temp:= `g`(v4) @signature `Lcom/b/a/d/a;.g:()Ljava/lang/String;` @kind virtual;
  #L136fda.  v0:= temp @kind object;
  #L136fdc.  v2:= v3.`com.b.a.b.a.i$a.b` @type ^`java.util.Map` @kind object;
  #L136fe0.  call temp:= `get`(v2, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L136fe6.  v0:= temp @kind object;
  #L136fe8.  v0:= (`com.b.a.b.a.i$b`) v0 @kind object;
  #L136fec.  if v0 == 0 then goto L136ff8;
  #L136ff0.  v2:= v0.`com.b.a.b.a.i$b.j` @type ^`boolean` @kind boolean;
  #L136ff4.  if v2 != 0 then goto L13700e;
  #L136ff8.  call `n`(v4) @signature `Lcom/b/a/d/a;.n:()V` @kind virtual;
  #Try_end0.  
  #L136ffe.  goto L136fc8;
  #L137000.  v0:= Exception @type ^`java.lang.IllegalStateException` @kind object;
  #L137002.  v1:= new `com.b.a.t`;
  #L137006.  call `<init>`(v1, v0) @signature `Lcom/b/a/t;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L13700c.  throw v1;
  #Try_start1.  
  #L13700e.  call `a`(v0, v4, v1) @signature `Lcom/b/a/b/a/i$b;.a:(Lcom/b/a/d/a;Ljava/lang/Object;)V` @kind virtual;
  #Try_end1.  
  #L137014.  goto L136fc8;
  #L137016.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L137018.  v1:= new `java.lang.AssertionError`;
  #L13701c.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L137022.  throw v1;
  #L137024.  call `d`(v4) @signature `Lcom/b/a/d/a;.d:()V` @kind virtual;
  #L13702a.  v0:= v1 @kind object;
  #L13702c.  goto L136fb4;
  catch `java.lang.IllegalStateException` @[Try_start0..Try_end0] goto L137000;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L137016;
  catch `java.lang.IllegalStateException` @[Try_start1..Try_end1] goto L137000;
  catch `java.lang.IllegalAccessException` @[Try_start1..Try_end1] goto L137016;
}
