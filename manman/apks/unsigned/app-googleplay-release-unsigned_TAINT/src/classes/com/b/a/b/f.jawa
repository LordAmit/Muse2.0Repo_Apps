record `com.b.a.b.f` @kind class @AccessFlag PUBLIC_FINAL extends `java.lang.Number` @kind class {
  `java.lang.String` `com.b.a.b.f.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.b.f` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/b/a/b/f;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L13bd04.  call `<init>`(v0) @signature `Ljava/lang/Number;.<init>:()V` @kind direct;
  #L13bd0a.  v0.`com.b.a.b.f.a` @type ^`java.lang.String` := v1 @kind object;
  #L13bd0e.  return @kind void;
}
procedure `double` `doubleValue`(`com.b.a.b.f` v2 @kind this) @signature `Lcom/b/a/b/f;.doubleValue:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13bd20.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L13bd24.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L13bd2a.  v0:= temp @kind wide;
  #L13bd2c.  return v0 @kind wide;
}
procedure `boolean` `equals`(`com.b.a.b.f` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/b/a/b/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13bd40.  v1:= 1I;
  #L13bd42.  v0:= 0I;
  #L13bd44.  if v4 != v5 then goto L13bd4c;
  #L13bd48.  v0:= v1;
  #L13bd4a.  return v0;
  #L13bd4c.  v2:= instanceof @variable v5 @type ^`com.b.a.b.f` @kind boolean;
  #L13bd50.  if v2 == 0 then goto L13bd4a;
  #L13bd54.  v5:= (`com.b.a.b.f`) v5 @kind object;
  #L13bd58.  v2:= v4.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L13bd5c.  v3:= v5.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L13bd60.  if v2 == v3 then goto L13bd78;
  #L13bd64.  v2:= v4.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L13bd68.  v3:= v5.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L13bd6c.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13bd72.  v2:= temp;
  #L13bd74.  if v2 == 0 then goto L13bd4a;
  #L13bd78.  v0:= v1;
  #L13bd7a.  goto L13bd4a;
}
procedure `float` `floatValue`(`com.b.a.b.f` v1 @kind this) @signature `Lcom/b/a/b/f;.floatValue:()F` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13bd8c.  v0:= v1.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L13bd90.  call temp:= `parseFloat`(v0) @signature `Ljava/lang/Float;.parseFloat:(Ljava/lang/String;)F` @kind static;
  #L13bd96.  v0:= temp;
  #L13bd98.  return v0;
}
procedure `int` `hashCode`(`com.b.a.b.f` v1 @kind this) @signature `Lcom/b/a/b/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13bdac.  v0:= v1.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L13bdb0.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L13bdb6.  v0:= temp;
  #L13bdb8.  return v0;
}
procedure `int` `intValue`(`com.b.a.b.f` v2 @kind this) @signature `Lcom/b/a/b/f;.intValue:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L13bdcc.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L13bdd0.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #Try_end0.  
  #L13bdd6.  v0:= temp;
  #L13bdd8.  return v0;
  #L13bdda.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #Try_start1.  
  #L13bddc.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L13bde0.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #Try_end1.  
  #L13bde6.  v0:= temp @kind wide;
  #L13bde8.  v0:= (`int`) v0 @kind l2i;
  #L13bdea.  goto L13bdd8;
  #L13bdec.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L13bdee.  v0:= new `java.math.BigDecimal`;
  #L13bdf2.  v1:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L13bdf6.  call `<init>`(v0, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13bdfc.  call temp:= `intValue`(v0) @signature `Ljava/math/BigDecimal;.intValue:()I` @kind virtual;
  #L13be02.  v0:= temp;
  #L13be04.  goto L13bdd8;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L13bdda;
  catch `java.lang.NumberFormatException` @[Try_start1..Try_end1] goto L13bdec;
}
procedure `long` `longValue`(`com.b.a.b.f` v2 @kind this) @signature `Lcom/b/a/b/f;.longValue:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L13be34.  v0:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L13be38.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #Try_end0.  
  #L13be3e.  v0:= temp @kind wide;
  #L13be40.  return v0 @kind wide;
  #L13be42.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L13be44.  v0:= new `java.math.BigDecimal`;
  #L13be48.  v1:= v2.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L13be4c.  call `<init>`(v0, v1) @signature `Ljava/math/BigDecimal;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13be52.  call temp:= `longValue`(v0) @signature `Ljava/math/BigDecimal;.longValue:()J` @kind virtual;
  #L13be58.  v0:= temp @kind wide;
  #L13be5a.  goto L13be40;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L13be42;
}
procedure `java.lang.String` `toString`(`com.b.a.b.f` v1 @kind this) @signature `Lcom/b/a/b/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13be7c.  v0:= v1.`com.b.a.b.f.a` @type ^`java.lang.String` @kind object;
  #L13be80.  return v0 @kind object;
}
