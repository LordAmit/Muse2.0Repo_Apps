record `com.b.a.q` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.l` @kind class {
  `java.lang.Object` `com.b.a.q.b` @AccessFlag PRIVATE;
}
global `java.lang.Class`[] `@@com.b.a.q.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/q;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L13efc8.  v0:= 16I;
  #L13efcc.  v0:= new `java.lang.Class`[v0];
  #L13efd0.  v1:= 0I;
  #L13efd2.  v2:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L13efd6.  v0[v1]:= v2 @kind object;
  #L13efda.  v1:= 1I;
  #L13efdc.  v2:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L13efe0.  v0[v1]:= v2 @kind object;
  #L13efe4.  v1:= 2I;
  #L13efe6.  v2:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L13efea.  v0[v1]:= v2 @kind object;
  #L13efee.  v1:= 3I;
  #L13eff0.  v2:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L13eff4.  v0[v1]:= v2 @kind object;
  #L13eff8.  v1:= 4I;
  #L13effa.  v2:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L13effe.  v0[v1]:= v2 @kind object;
  #L13f002.  v1:= 5I;
  #L13f004.  v2:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L13f008.  v0[v1]:= v2 @kind object;
  #L13f00c.  v1:= 6I;
  #L13f00e.  v2:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L13f012.  v0[v1]:= v2 @kind object;
  #L13f016.  v1:= 7I;
  #L13f018.  v2:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L13f01c.  v0[v1]:= v2 @kind object;
  #L13f020.  v1:= 8I;
  #L13f024.  v2:= constclass @type ^`java.lang.Integer` @kind object;
  #L13f028.  v0[v1]:= v2 @kind object;
  #L13f02c.  v1:= 9I;
  #L13f030.  v2:= constclass @type ^`java.lang.Long` @kind object;
  #L13f034.  v0[v1]:= v2 @kind object;
  #L13f038.  v1:= 10I;
  #L13f03c.  v2:= constclass @type ^`java.lang.Short` @kind object;
  #L13f040.  v0[v1]:= v2 @kind object;
  #L13f044.  v1:= 11I;
  #L13f048.  v2:= constclass @type ^`java.lang.Float` @kind object;
  #L13f04c.  v0[v1]:= v2 @kind object;
  #L13f050.  v1:= 12I;
  #L13f054.  v2:= constclass @type ^`java.lang.Double` @kind object;
  #L13f058.  v0[v1]:= v2 @kind object;
  #L13f05c.  v1:= 13I;
  #L13f060.  v2:= constclass @type ^`java.lang.Byte` @kind object;
  #L13f064.  v0[v1]:= v2 @kind object;
  #L13f068.  v1:= 14I;
  #L13f06c.  v2:= constclass @type ^`java.lang.Boolean` @kind object;
  #L13f070.  v0[v1]:= v2 @kind object;
  #L13f074.  v1:= 15I;
  #L13f078.  v2:= constclass @type ^`java.lang.Character` @kind object;
  #L13f07c.  v0[v1]:= v2 @kind object;
  #L13f080.  `@@com.b.a.q.a` @type ^`java.lang.Class`[] := v0 @kind object;
  #L13f084.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.q` v0 @kind this, `java.lang.Boolean` v1 @kind object) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Boolean;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L13f098.  call `<init>`(v0) @signature `Lcom/b/a/l;.<init>:()V` @kind direct;
  #L13f09e.  call `a`(v0, v1) @signature `Lcom/b/a/q;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L13f0a4.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.q` v0 @kind this, `java.lang.Number` v1 @kind object) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Number;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L13f0b8.  call `<init>`(v0) @signature `Lcom/b/a/l;.<init>:()V` @kind direct;
  #L13f0be.  call `a`(v0, v1) @signature `Lcom/b/a/q;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L13f0c4.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.q` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L13f0d8.  call `<init>`(v0) @signature `Lcom/b/a/l;.<init>:()V` @kind direct;
  #L13f0de.  call `a`(v0, v1) @signature `Lcom/b/a/q;.a:(Ljava/lang/Object;)V` @kind virtual;
  #L13f0e4.  return @kind void;
}
procedure `boolean` `a`(`com.b.a.q` v3 @kind object) @signature `Lcom/b/a/q;.a:(Lcom/b/a/q;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L13f0f8.  v1:= 0I;
  #L13f0fa.  v0:= v3.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f0fe.  v0:= instanceof @variable v0 @type ^`java.lang.Number` @kind boolean;
  #L13f102.  if v0 == 0 then goto L13f13e;
  #L13f106.  v0:= v3.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f10a.  v0:= (`java.lang.Number`) v0 @kind object;
  #L13f10e.  v2:= instanceof @variable v0 @type ^`java.math.BigInteger` @kind boolean;
  #L13f112.  if v2 != 0 then goto L13f136;
  #L13f116.  v2:= instanceof @variable v0 @type ^`java.lang.Long` @kind boolean;
  #L13f11a.  if v2 != 0 then goto L13f136;
  #L13f11e.  v2:= instanceof @variable v0 @type ^`java.lang.Integer` @kind boolean;
  #L13f122.  if v2 != 0 then goto L13f136;
  #L13f126.  v2:= instanceof @variable v0 @type ^`java.lang.Short` @kind boolean;
  #L13f12a.  if v2 != 0 then goto L13f136;
  #L13f12e.  v0:= instanceof @variable v0 @type ^`java.lang.Byte` @kind boolean;
  #L13f132.  if v0 == 0 then goto L13f13a;
  #L13f136.  v0:= 1I;
  #L13f138.  return v0;
  #L13f13a.  v0:= v1;
  #L13f13c.  goto L13f138;
  #L13f13e.  v0:= v1;
  #L13f140.  goto L13f138;
}
procedure `boolean` `b`(`java.lang.Object` v7 @kind object) @signature `Lcom/b/a/q;.b:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13f154.  v0:= 1I;
  #L13f156.  v1:= 0I;
  #L13f158.  v2:= instanceof @variable v7 @type ^`java.lang.String` @kind boolean;
  #L13f15c.  if v2 == 0 then goto L13f162;
  #L13f160.  return v0;
  #L13f162.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13f168.  v3:= temp @kind object;
  #L13f16a.  v4:= `@@com.b.a.q.a` @type ^`java.lang.Class`[] @kind object;
  #L13f16e.  v5:= length @variable v4;
  #L13f170.  v2:= v1;
  #L13f172.  if v2 >= v5 then goto L13f18c;
  #L13f176.  v6:= v4[v2] @kind object;
  #L13f17a.  call temp:= `isAssignableFrom`(v6, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L13f180.  v6:= temp;
  #L13f182.  if v6 != 0 then goto L13f160;
  #L13f186.  v2:= v2 + 1;
  #L13f18a.  goto L13f172;
  #L13f18c.  v0:= v1;
  #L13f18e.  goto L13f160;
}
procedure `java.lang.Number` `a`(`com.b.a.q` v2 @kind this) @signature `Lcom/b/a/q;.a:()Ljava/lang/Number;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13f1a0.  v0:= v2.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f1a4.  v0:= instanceof @variable v0 @type ^`java.lang.String` @kind boolean;
  #L13f1a8.  if v0 == 0 then goto L13f1c2;
  #L13f1ac.  v1:= new `com.b.a.b.f`;
  #L13f1b0.  v0:= v2.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f1b4.  v0:= (`java.lang.String`) v0 @kind object;
  #L13f1b8.  call `<init>`(v1, v0) @signature `Lcom/b/a/b/f;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13f1be.  v0:= v1 @kind object;
  #L13f1c0.  return v0 @kind object;
  #L13f1c2.  v0:= v2.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f1c6.  v0:= (`java.lang.Number`) v0 @kind object;
  #L13f1ca.  goto L13f1c0;
}
procedure `void` `a`(`com.b.a.q` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/q;.a:(Ljava/lang/Object;)V` @AccessFlag  {
    temp;
    v0;

  #L13f1dc.  v0:= instanceof @variable v2 @type ^`java.lang.Character` @kind boolean;
  #L13f1e0.  if v0 == 0 then goto L13f1fe;
  #L13f1e4.  v2:= (`java.lang.Character`) v2 @kind object;
  #L13f1e8.  call temp:= `charValue`(v2) @signature `Ljava/lang/Character;.charValue:()C` @kind virtual;
  #L13f1ee.  v0:= temp;
  #L13f1f0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L13f1f6.  v0:= temp @kind object;
  #L13f1f8.  v1.`com.b.a.q.b` @type ^`java.lang.Object` := v0 @kind object;
  #L13f1fc.  return @kind void;
  #L13f1fe.  v0:= instanceof @variable v2 @type ^`java.lang.Number` @kind boolean;
  #L13f202.  if v0 != 0 then goto L13f212;
  #L13f206.  call temp:= `b`(v2) @signature `Lcom/b/a/q;.b:(Ljava/lang/Object;)Z` @kind static;
  #L13f20c.  v0:= temp;
  #L13f20e.  if v0 == 0 then goto L13f220;
  #L13f212.  v0:= 1I;
  #L13f214.  call `a`(v0) @signature `Lcom/b/a/b/a;.a:(Z)V` @kind static;
  #L13f21a.  v1.`com.b.a.q.b` @type ^`java.lang.Object` := v2 @kind object;
  #L13f21e.  goto L13f1fc;
  #L13f220.  v0:= 0I;
  #L13f222.  goto L13f214;
}
procedure `java.lang.String` `b`(`com.b.a.q` v1 @kind this) @signature `Lcom/b/a/q;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13f234.  call temp:= `p`(v1) @signature `Lcom/b/a/q;.p:()Z` @kind virtual;
  #L13f23a.  v0:= temp;
  #L13f23c.  if v0 == 0 then goto L13f252;
  #L13f240.  call temp:= `a`(v1) @signature `Lcom/b/a/q;.a:()Ljava/lang/Number;` @kind virtual;
  #L13f246.  v0:= temp @kind object;
  #L13f248.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L13f24e.  v0:= temp @kind object;
  #L13f250.  return v0 @kind object;
  #L13f252.  call temp:= `o`(v1) @signature `Lcom/b/a/q;.o:()Z` @kind virtual;
  #L13f258.  v0:= temp;
  #L13f25a.  if v0 == 0 then goto L13f270;
  #L13f25e.  call temp:= `n`(v1) @signature `Lcom/b/a/q;.n:()Ljava/lang/Boolean;` @kind virtual;
  #L13f264.  v0:= temp @kind object;
  #L13f266.  call temp:= `toString`(v0) @signature `Ljava/lang/Boolean;.toString:()Ljava/lang/String;` @kind virtual;
  #L13f26c.  v0:= temp @kind object;
  #L13f26e.  goto L13f250;
  #L13f270.  v0:= v1.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f274.  v0:= (`java.lang.String`) v0 @kind object;
  #L13f278.  goto L13f250;
}
procedure `double` `c`(`com.b.a.q` v2 @kind this) @signature `Lcom/b/a/q;.c:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13f28c.  call temp:= `p`(v2) @signature `Lcom/b/a/q;.p:()Z` @kind virtual;
  #L13f292.  v0:= temp;
  #L13f294.  if v0 == 0 then goto L13f2aa;
  #L13f298.  call temp:= `a`(v2) @signature `Lcom/b/a/q;.a:()Ljava/lang/Number;` @kind virtual;
  #L13f29e.  v0:= temp @kind object;
  #L13f2a0.  call temp:= `doubleValue`(v0) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L13f2a6.  v0:= temp @kind wide;
  #L13f2a8.  return v0 @kind wide;
  #L13f2aa.  call temp:= `b`(v2) @signature `Lcom/b/a/q;.b:()Ljava/lang/String;` @kind virtual;
  #L13f2b0.  v0:= temp @kind object;
  #L13f2b2.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L13f2b8.  v0:= temp @kind wide;
  #L13f2ba.  goto L13f2a8;
}
procedure `long` `d`(`com.b.a.q` v2 @kind this) @signature `Lcom/b/a/q;.d:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L13f2cc.  call temp:= `p`(v2) @signature `Lcom/b/a/q;.p:()Z` @kind virtual;
  #L13f2d2.  v0:= temp;
  #L13f2d4.  if v0 == 0 then goto L13f2ea;
  #L13f2d8.  call temp:= `a`(v2) @signature `Lcom/b/a/q;.a:()Ljava/lang/Number;` @kind virtual;
  #L13f2de.  v0:= temp @kind object;
  #L13f2e0.  call temp:= `longValue`(v0) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L13f2e6.  v0:= temp @kind wide;
  #L13f2e8.  return v0 @kind wide;
  #L13f2ea.  call temp:= `b`(v2) @signature `Lcom/b/a/q;.b:()Ljava/lang/String;` @kind virtual;
  #L13f2f0.  v0:= temp @kind object;
  #L13f2f2.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L13f2f8.  v0:= temp @kind wide;
  #L13f2fa.  goto L13f2e8;
}
procedure `int` `e`(`com.b.a.q` v1 @kind this) @signature `Lcom/b/a/q;.e:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13f30c.  call temp:= `p`(v1) @signature `Lcom/b/a/q;.p:()Z` @kind virtual;
  #L13f312.  v0:= temp;
  #L13f314.  if v0 == 0 then goto L13f32a;
  #L13f318.  call temp:= `a`(v1) @signature `Lcom/b/a/q;.a:()Ljava/lang/Number;` @kind virtual;
  #L13f31e.  v0:= temp @kind object;
  #L13f320.  call temp:= `intValue`(v0) @signature `Ljava/lang/Number;.intValue:()I` @kind virtual;
  #L13f326.  v0:= temp;
  #L13f328.  return v0;
  #L13f32a.  call temp:= `b`(v1) @signature `Lcom/b/a/q;.b:()Ljava/lang/String;` @kind virtual;
  #L13f330.  v0:= temp @kind object;
  #L13f332.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L13f338.  v0:= temp;
  #L13f33a.  goto L13f328;
}
procedure `boolean` `equals`(`com.b.a.q` v7 @kind this, `java.lang.Object` v8 @kind object) @signature `Lcom/b/a/q;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13f34c.  v0:= 1I;
  #L13f34e.  v1:= 0I;
  #L13f350.  if v7 != v8 then goto L13f356;
  #L13f354.  return v0;
  #L13f356.  if v8 == 0 then goto L13f36e;
  #L13f35a.  call temp:= `getClass`(v7) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13f360.  v2:= temp @kind object;
  #L13f362.  call temp:= `getClass`(v8) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13f368.  v3:= temp @kind object;
  #L13f36a.  if v2 == v3 then goto L13f372;
  #L13f36e.  v0:= v1;
  #L13f370.  goto L13f354;
  #L13f372.  v8:= (`com.b.a.q`) v8 @kind object;
  #L13f376.  v2:= v7.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f37a.  if v2 != 0 then goto L13f38a;
  #L13f37e.  v2:= v8.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f382.  if v2 == 0 then goto L13f354;
  #L13f386.  v0:= v1;
  #L13f388.  goto L13f354;
  #L13f38a.  call temp:= `a`(v7) @signature `Lcom/b/a/q;.a:(Lcom/b/a/q;)Z` @kind static;
  #L13f390.  v2:= temp;
  #L13f392.  if v2 == 0 then goto L13f3ce;
  #L13f396.  call temp:= `a`(v8) @signature `Lcom/b/a/q;.a:(Lcom/b/a/q;)Z` @kind static;
  #L13f39c.  v2:= temp;
  #L13f39e.  if v2 == 0 then goto L13f3ce;
  #L13f3a2.  call temp:= `a`(v7) @signature `Lcom/b/a/q;.a:()Ljava/lang/Number;` @kind virtual;
  #L13f3a8.  v2:= temp @kind object;
  #L13f3aa.  call temp:= `longValue`(v2) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L13f3b0.  v2:= temp @kind wide;
  #L13f3b2.  call temp:= `a`(v8) @signature `Lcom/b/a/q;.a:()Ljava/lang/Number;` @kind virtual;
  #L13f3b8.  v4:= temp @kind object;
  #L13f3ba.  call temp:= `longValue`(v4) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L13f3c0.  v4:= temp @kind wide;
  #L13f3c2.  v2:= lcmp(v2, v4);
  #L13f3c6.  if v2 == 0 then goto L13f354;
  #L13f3ca.  v0:= v1;
  #L13f3cc.  goto L13f354;
  #L13f3ce.  v2:= v7.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f3d2.  v2:= instanceof @variable v2 @type ^`java.lang.Number` @kind boolean;
  #L13f3d6.  if v2 == 0 then goto L13f42c;
  #L13f3da.  v2:= v8.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f3de.  v2:= instanceof @variable v2 @type ^`java.lang.Number` @kind boolean;
  #L13f3e2.  if v2 == 0 then goto L13f42c;
  #L13f3e6.  call temp:= `a`(v7) @signature `Lcom/b/a/q;.a:()Ljava/lang/Number;` @kind virtual;
  #L13f3ec.  v2:= temp @kind object;
  #L13f3ee.  call temp:= `doubleValue`(v2) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L13f3f4.  v2:= temp @kind wide;
  #L13f3f6.  call temp:= `a`(v8) @signature `Lcom/b/a/q;.a:()Ljava/lang/Number;` @kind virtual;
  #L13f3fc.  v4:= temp @kind object;
  #L13f3fe.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L13f404.  v4:= temp @kind wide;
  #L13f406.  v6:= dcmpl(v2, v4);
  #L13f40a.  if v6 == 0 then goto L13f426;
  #L13f40e.  call temp:= `isNaN`(v2) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L13f414.  v2:= temp;
  #L13f416.  if v2 == 0 then goto L13f428;
  #L13f41a.  call temp:= `isNaN`(v4) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L13f420.  v2:= temp;
  #L13f422.  if v2 == 0 then goto L13f428;
  #L13f426.  v1:= v0;
  #L13f428.  v0:= v1;
  #L13f42a.  goto L13f354;
  #L13f42c.  v0:= v7.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f430.  v1:= v8.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f434.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13f43a.  v0:= temp;
  #L13f43c.  goto L13f354;
}
procedure `boolean` `f`(`com.b.a.q` v1 @kind this) @signature `Lcom/b/a/q;.f:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13f450.  call temp:= `o`(v1) @signature `Lcom/b/a/q;.o:()Z` @kind virtual;
  #L13f456.  v0:= temp;
  #L13f458.  if v0 == 0 then goto L13f46e;
  #L13f45c.  call temp:= `n`(v1) @signature `Lcom/b/a/q;.n:()Ljava/lang/Boolean;` @kind virtual;
  #L13f462.  v0:= temp @kind object;
  #L13f464.  call temp:= `booleanValue`(v0) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L13f46a.  v0:= temp;
  #L13f46c.  return v0;
  #L13f46e.  call temp:= `b`(v1) @signature `Lcom/b/a/q;.b:()Ljava/lang/String;` @kind virtual;
  #L13f474.  v0:= temp @kind object;
  #L13f476.  call temp:= `parseBoolean`(v0) @signature `Ljava/lang/Boolean;.parseBoolean:(Ljava/lang/String;)Z` @kind static;
  #L13f47c.  v0:= temp;
  #L13f47e.  goto L13f46c;
}
procedure `int` `hashCode`(`com.b.a.q` v4 @kind this) @signature `Lcom/b/a/q;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13f490.  v2:= 32I;
  #L13f494.  v0:= v4.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f498.  if v0 != 0 then goto L13f4a2;
  #L13f49c.  v0:= 31I;
  #L13f4a0.  return v0;
  #L13f4a2.  call temp:= `a`(v4) @signature `Lcom/b/a/q;.a:(Lcom/b/a/q;)Z` @kind static;
  #L13f4a8.  v0:= temp;
  #L13f4aa.  if v0 == 0 then goto L13f4c8;
  #L13f4ae.  call temp:= `a`(v4) @signature `Lcom/b/a/q;.a:()Ljava/lang/Number;` @kind virtual;
  #L13f4b4.  v0:= temp @kind object;
  #L13f4b6.  call temp:= `longValue`(v0) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L13f4bc.  v0:= temp @kind wide;
  #L13f4be.  v2:= v0 ^>> v2 @kind long;
  #L13f4c2.  v0:= v0 ^~ v2 @kind long;
  #L13f4c4.  v0:= (`int`) v0 @kind l2i;
  #L13f4c6.  goto L13f4a0;
  #L13f4c8.  v0:= v4.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f4cc.  v0:= instanceof @variable v0 @type ^`java.lang.Number` @kind boolean;
  #L13f4d0.  if v0 == 0 then goto L13f4f6;
  #L13f4d4.  call temp:= `a`(v4) @signature `Lcom/b/a/q;.a:()Ljava/lang/Number;` @kind virtual;
  #L13f4da.  v0:= temp @kind object;
  #L13f4dc.  call temp:= `doubleValue`(v0) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L13f4e2.  v0:= temp @kind wide;
  #L13f4e4.  call temp:= `doubleToLongBits`(v0) @signature `Ljava/lang/Double;.doubleToLongBits:(D)J` @kind static;
  #L13f4ea.  v0:= temp @kind wide;
  #L13f4ec.  v2:= v0 ^>> v2 @kind long;
  #L13f4f0.  v0:= v0 ^~ v2 @kind long;
  #L13f4f2.  v0:= (`int`) v0 @kind l2i;
  #L13f4f4.  goto L13f4a0;
  #L13f4f6.  v0:= v4.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f4fa.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L13f500.  v0:= temp;
  #L13f502.  goto L13f4a0;
}
procedure `java.lang.Boolean` `n`(`com.b.a.q` v1 @kind this) @signature `Lcom/b/a/q;.n:()Ljava/lang/Boolean;` @AccessFlag  {
    temp;
    v0;

  #L13f514.  v0:= v1.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f518.  v0:= (`java.lang.Boolean`) v0 @kind object;
  #L13f51c.  return v0 @kind object;
}
procedure `boolean` `o`(`com.b.a.q` v1 @kind this) @signature `Lcom/b/a/q;.o:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13f530.  v0:= v1.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f534.  v0:= instanceof @variable v0 @type ^`java.lang.Boolean` @kind boolean;
  #L13f538.  return v0;
}
procedure `boolean` `p`(`com.b.a.q` v1 @kind this) @signature `Lcom/b/a/q;.p:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13f54c.  v0:= v1.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f550.  v0:= instanceof @variable v0 @type ^`java.lang.Number` @kind boolean;
  #L13f554.  return v0;
}
procedure `boolean` `q`(`com.b.a.q` v1 @kind this) @signature `Lcom/b/a/q;.q:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13f568.  v0:= v1.`com.b.a.q.b` @type ^`java.lang.Object` @kind object;
  #L13f56c.  v0:= instanceof @variable v0 @type ^`java.lang.String` @kind boolean;
  #L13f570.  return v0;
}
