record `com.b.a.b.a.e` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.d.a` @kind class {
  `java.lang.Object`[] `com.b.a.b.a.e.d` @AccessFlag PRIVATE;
  `int` `com.b.a.b.a.e.e` @AccessFlag PRIVATE;
  `java.lang.String`[] `com.b.a.b.a.e.f` @AccessFlag PRIVATE;
  `int`[] `com.b.a.b.a.e.g` @AccessFlag PRIVATE;
}
global `java.io.Reader` `@@com.b.a.b.a.e.b` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Object` `@@com.b.a.b.a.e.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/a/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L134d98.  v0:= new `com.b.a.b.a.e$1`;
  #L134d9c.  call `<init>`(v0) @signature `Lcom/b/a/b/a/e$1;.<init>:()V` @kind direct;
  #L134da2.  `@@com.b.a.b.a.e.b` @type ^`java.io.Reader` := v0 @kind object;
  #L134da6.  v0:= new `java.lang.Object`;
  #L134daa.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L134db0.  `@@com.b.a.b.a.e.c` @type ^`java.lang.Object` := v0 @kind object;
  #L134db4.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.e` v3 @kind this, `com.b.a.d.b` v4 @kind object) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L134dc8.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L134dce.  v0:= temp @kind object;
  #L134dd0.  if v0 == v4 then goto L134e32;
  #L134dd4.  v0:= new `java.lang.IllegalStateException`;
  #L134dd8.  v1:= new `java.lang.StringBuilder`;
  #L134ddc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L134de2.  v2:= "Expected " @kind object;
  #L134de6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134dec.  v1:= temp @kind object;
  #L134dee.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134df4.  v1:= temp @kind object;
  #L134df6.  v2:= " but was " @kind object;
  #L134dfa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134e00.  v1:= temp @kind object;
  #L134e02.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L134e08.  v2:= temp @kind object;
  #L134e0a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134e10.  v1:= temp @kind object;
  #L134e12.  call temp:= `u`(v3) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L134e18.  v2:= temp @kind object;
  #L134e1a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134e20.  v1:= temp @kind object;
  #L134e22.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L134e28.  v1:= temp @kind object;
  #L134e2a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L134e30.  throw v0;
  #L134e32.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.e` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L134e44.  v5:= 0I;
  #L134e46.  v0:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L134e4a.  v1:= v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L134e4e.  v1:= length @variable v1;
  #L134e50.  if v0 != v1 then goto L134eae;
  #L134e54.  v0:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L134e58.  v0:= v0 * 2;
  #L134e5c.  v0:= new `java.lang.Object`[v0];
  #L134e60.  v1:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L134e64.  v1:= v1 * 2;
  #L134e68.  v1:= new `int`[v1];
  #L134e6c.  v2:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L134e70.  v2:= v2 * 2;
  #L134e74.  v2:= new `java.lang.String`[v2];
  #L134e78.  v3:= v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L134e7c.  v4:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L134e80.  call `arraycopy`(v3, v5, v0, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L134e86.  v3:= v6.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L134e8a.  v4:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L134e8e.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L134e94.  v3:= v6.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L134e98.  v4:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L134e9c.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L134ea2.  v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] := v0 @kind object;
  #L134ea6.  v6.`com.b.a.b.a.e.g` @type ^`int`[] := v1 @kind object;
  #L134eaa.  v6.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] := v2 @kind object;
  #L134eae.  v0:= v6.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L134eb2.  v1:= v6.`com.b.a.b.a.e.e` @type ^`int`;
  #L134eb6.  v2:= v1 + 1;
  #L134eba.  v6.`com.b.a.b.a.e.e` @type ^`int` := v2;
  #L134ebe.  v0[v1]:= v7 @kind object;
  #L134ec2.  return @kind void;
}
procedure `java.lang.Object` `s`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L134ed4.  v0:= v2.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L134ed8.  v1:= v2.`com.b.a.b.a.e.e` @type ^`int`;
  #L134edc.  v1:= v1 + -1;
  #L134ee0.  v0:= v0[v1] @kind object;
  #L134ee4.  return v0 @kind object;
}
procedure `java.lang.Object` `t`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L134ef8.  v0:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L134efc.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L134f00.  v1:= v1 + -1;
  #L134f04.  v4.`com.b.a.b.a.e.e` @type ^`int` := v1;
  #L134f08.  v0:= v0[v1] @kind object;
  #L134f0c.  v1:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L134f10.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L134f14.  v3:= 0I;
  #L134f16.  v1[v2]:= v3 @kind object;
  #L134f1a.  return v0 @kind object;
}
procedure `java.lang.String` `u`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L134f2c.  v0:= new `java.lang.StringBuilder`;
  #L134f30.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L134f36.  v1:= " at path " @kind object;
  #L134f3a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134f40.  v0:= temp @kind object;
  #L134f42.  call temp:= `p`(v2) @signature `Lcom/b/a/b/a/e;.p:()Ljava/lang/String;` @kind virtual;
  #L134f48.  v1:= temp @kind object;
  #L134f4a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L134f50.  v0:= temp @kind object;
  #L134f52.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L134f58.  v0:= temp @kind object;
  #L134f5a.  return v0 @kind object;
}
procedure `void` `a`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L134f6c.  v0:= `@@com.b.a.d.b.a` @type ^`com.b.a.d.b` @kind object;
  #L134f70.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L134f76.  call temp:= `s`(v3) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L134f7c.  v0:= temp @kind object;
  #L134f7e.  v0:= (`com.b.a.i`) v0 @kind object;
  #L134f82.  call temp:= `iterator`(v0) @signature `Lcom/b/a/i;.iterator:()Ljava/util/Iterator;` @kind virtual;
  #L134f88.  v0:= temp @kind object;
  #L134f8a.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L134f90.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L134f94.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L134f98.  v1:= v1 + -1;
  #L134f9c.  v2:= 0I;
  #L134f9e.  v0[v1]:= v2;
  #L134fa2.  return @kind void;
}
procedure `void` `b`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L134fb4.  v0:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L134fb8.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L134fbe.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L134fc4.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L134fca.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L134fce.  if v0 <= 0 then goto L134fea;
  #L134fd2.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L134fd6.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L134fda.  v1:= v1 + -1;
  #L134fde.  v2:= v0[v1];
  #L134fe2.  v2:= v2 + 1;
  #L134fe6.  v0[v1]:= v2;
  #L134fea.  return @kind void;
}
procedure `void` `c`(`com.b.a.b.a.e` v1 @kind this) @signature `Lcom/b/a/b/a/e;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L134ffc.  v0:= `@@com.b.a.d.b.c` @type ^`com.b.a.d.b` @kind object;
  #L135000.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L135006.  call temp:= `s`(v1) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L13500c.  v0:= temp @kind object;
  #L13500e.  v0:= (`com.b.a.o`) v0 @kind object;
  #L135012.  call temp:= `o`(v0) @signature `Lcom/b/a/o;.o:()Ljava/util/Set;` @kind virtual;
  #L135018.  v0:= temp @kind object;
  #L13501a.  call temp:= `iterator`(v0) @signature `Ljava/util/Set;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L135020.  v0:= temp @kind object;
  #L135022.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L135028.  return @kind void;
}
procedure `void` `close`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13503c.  v3:= 1I;
  #L13503e.  v0:= new `java.lang.Object`[v3];
  #L135042.  v1:= 0I;
  #L135044.  v2:= `@@com.b.a.b.a.e.c` @type ^`java.lang.Object` @kind object;
  #L135048.  v0[v1]:= v2 @kind object;
  #L13504c.  v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] := v0 @kind object;
  #L135050.  v4.`com.b.a.b.a.e.e` @type ^`int` := v3;
  #L135054.  return @kind void;
}
procedure `void` `d`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L135068.  v0:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L13506c.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L135072.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L135078.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13507e.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L135082.  if v0 <= 0 then goto L13509e;
  #L135086.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L13508a.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L13508e.  v1:= v1 + -1;
  #L135092.  v2:= v0[v1];
  #L135096.  v2:= v2 + 1;
  #L13509a.  v0[v1]:= v2;
  #L13509e.  return @kind void;
}
procedure `boolean` `e`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1350b0.  call temp:= `f`(v2) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L1350b6.  v0:= temp @kind object;
  #L1350b8.  v1:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L1350bc.  if v0 == v1 then goto L1350cc;
  #L1350c0.  v1:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L1350c4.  if v0 == v1 then goto L1350cc;
  #L1350c8.  v0:= 1I;
  #L1350ca.  return v0;
  #L1350cc.  v0:= 0I;
  #L1350ce.  goto L1350ca;
}
procedure `com.b.a.d.b` `f`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1350e0.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L1350e4.  if v0 != 0 then goto L1350ee;
  #L1350e8.  v0:= `@@com.b.a.d.b.j` @type ^`com.b.a.d.b` @kind object;
  #L1350ec.  return v0 @kind object;
  #L1350ee.  call temp:= `s`(v3) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L1350f4.  v0:= temp @kind object;
  #L1350f6.  v1:= instanceof @variable v0 @type ^`java.util.Iterator` @kind boolean;
  #L1350fa.  if v1 == 0 then goto L135154;
  #L1350fe.  v1:= v3.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L135102.  v2:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L135106.  v2:= v2 + -2;
  #L13510a.  v1:= v1[v2] @kind object;
  #L13510e.  v1:= instanceof @variable v1 @type ^`com.b.a.o` @kind boolean;
  #L135112.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L135116.  call temp:= `hasNext`(v0) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13511c.  v2:= temp;
  #L13511e.  if v2 == 0 then goto L135144;
  #L135122.  if v1 == 0 then goto L13512c;
  #L135126.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L13512a.  goto L1350ec;
  #L13512c.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L135132.  v0:= temp @kind object;
  #L135134.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L13513a.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L135140.  v0:= temp @kind object;
  #L135142.  goto L1350ec;
  #L135144.  if v1 == 0 then goto L13514e;
  #L135148.  v0:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L13514c.  goto L1350ec;
  #L13514e.  v0:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L135152.  goto L1350ec;
  #L135154.  v1:= instanceof @variable v0 @type ^`com.b.a.o` @kind boolean;
  #L135158.  if v1 == 0 then goto L135162;
  #L13515c.  v0:= `@@com.b.a.d.b.c` @type ^`com.b.a.d.b` @kind object;
  #L135160.  goto L1350ec;
  #L135162.  v1:= instanceof @variable v0 @type ^`com.b.a.i` @kind boolean;
  #L135166.  if v1 == 0 then goto L135170;
  #L13516a.  v0:= `@@com.b.a.d.b.a` @type ^`com.b.a.d.b` @kind object;
  #L13516e.  goto L1350ec;
  #L135170.  v1:= instanceof @variable v0 @type ^`com.b.a.q` @kind boolean;
  #L135174.  if v1 == 0 then goto L1351be;
  #L135178.  v0:= (`com.b.a.q`) v0 @kind object;
  #L13517c.  call temp:= `q`(v0) @signature `Lcom/b/a/q;.q:()Z` @kind virtual;
  #L135182.  v1:= temp;
  #L135184.  if v1 == 0 then goto L13518e;
  #L135188.  v0:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L13518c.  goto L1350ec;
  #L13518e.  call temp:= `o`(v0) @signature `Lcom/b/a/q;.o:()Z` @kind virtual;
  #L135194.  v1:= temp;
  #L135196.  if v1 == 0 then goto L1351a0;
  #L13519a.  v0:= `@@com.b.a.d.b.h` @type ^`com.b.a.d.b` @kind object;
  #L13519e.  goto L1350ec;
  #L1351a0.  call temp:= `p`(v0) @signature `Lcom/b/a/q;.p:()Z` @kind virtual;
  #L1351a6.  v0:= temp;
  #L1351a8.  if v0 == 0 then goto L1351b2;
  #L1351ac.  v0:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L1351b0.  goto L1350ec;
  #L1351b2.  v0:= new `java.lang.AssertionError`;
  #L1351b6.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1351bc.  throw v0;
  #L1351be.  v1:= instanceof @variable v0 @type ^`com.b.a.n` @kind boolean;
  #L1351c2.  if v1 == 0 then goto L1351cc;
  #L1351c6.  v0:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L1351ca.  goto L1350ec;
  #L1351cc.  v1:= `@@com.b.a.b.a.e.c` @type ^`java.lang.Object` @kind object;
  #L1351d0.  if v0 != v1 then goto L1351e4;
  #L1351d4.  v0:= new `java.lang.IllegalStateException`;
  #L1351d8.  v1:= "JsonReader is closed" @kind object;
  #L1351dc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1351e2.  throw v0;
  #L1351e4.  v0:= new `java.lang.AssertionError`;
  #L1351e8.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L1351ee.  throw v0;
}
procedure `java.lang.String` `g`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.g:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L135200.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L135204.  call `a`(v4, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L13520a.  call temp:= `s`(v4) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L135210.  v0:= temp @kind object;
  #L135212.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L135216.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13521c.  v0:= temp @kind object;
  #L13521e.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L135222.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L135228.  v1:= temp @kind object;
  #L13522a.  v1:= (`java.lang.String`) v1 @kind object;
  #L13522e.  v2:= v4.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L135232.  v3:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L135236.  v3:= v3 + -1;
  #L13523a.  v2[v3]:= v1 @kind object;
  #L13523e.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L135244.  v0:= temp @kind object;
  #L135246.  call `a`(v4, v0) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L13524c.  return v1 @kind object;
}
procedure `java.lang.String` `h`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.h:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L135260.  call temp:= `f`(v4) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L135266.  v0:= temp @kind object;
  #L135268.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L13526c.  if v0 == v1 then goto L1352d2;
  #L135270.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L135274.  if v0 == v1 then goto L1352d2;
  #L135278.  v1:= new `java.lang.IllegalStateException`;
  #L13527c.  v2:= new `java.lang.StringBuilder`;
  #L135280.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L135286.  v3:= "Expected " @kind object;
  #L13528a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135290.  v2:= temp @kind object;
  #L135292.  v3:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L135296.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13529c.  v2:= temp @kind object;
  #L13529e.  v3:= " but was " @kind object;
  #L1352a2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1352a8.  v2:= temp @kind object;
  #L1352aa.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1352b0.  v0:= temp @kind object;
  #L1352b2.  call temp:= `u`(v4) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L1352b8.  v2:= temp @kind object;
  #L1352ba.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1352c0.  v0:= temp @kind object;
  #L1352c2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1352c8.  v0:= temp @kind object;
  #L1352ca.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1352d0.  throw v1;
  #L1352d2.  call temp:= `t`(v4) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L1352d8.  v0:= temp @kind object;
  #L1352da.  v0:= (`com.b.a.q`) v0 @kind object;
  #L1352de.  call temp:= `b`(v0) @signature `Lcom/b/a/q;.b:()Ljava/lang/String;` @kind virtual;
  #L1352e4.  v0:= temp @kind object;
  #L1352e6.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L1352ea.  if v1 <= 0 then goto L135306;
  #L1352ee.  v1:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L1352f2.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L1352f6.  v2:= v2 + -1;
  #L1352fa.  v3:= v1[v2];
  #L1352fe.  v3:= v3 + 1;
  #L135302.  v1[v2]:= v3;
  #L135306.  return v0 @kind object;
}
procedure `boolean` `i`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L135318.  v0:= `@@com.b.a.d.b.h` @type ^`com.b.a.d.b` @kind object;
  #L13531c.  call `a`(v4, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L135322.  call temp:= `t`(v4) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L135328.  v0:= temp @kind object;
  #L13532a.  v0:= (`com.b.a.q`) v0 @kind object;
  #L13532e.  call temp:= `f`(v0) @signature `Lcom/b/a/q;.f:()Z` @kind virtual;
  #L135334.  v0:= temp;
  #L135336.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L13533a.  if v1 <= 0 then goto L135356;
  #L13533e.  v1:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L135342.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L135346.  v2:= v2 + -1;
  #L13534a.  v3:= v1[v2];
  #L13534e.  v3:= v3 + 1;
  #L135352.  v1[v2]:= v3;
  #L135356.  return v0;
}
procedure `void` `j`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.j:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L135368.  v0:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L13536c.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L135372.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L135378.  v0:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L13537c.  if v0 <= 0 then goto L135398;
  #L135380.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L135384.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L135388.  v1:= v1 + -1;
  #L13538c.  v2:= v0[v1];
  #L135390.  v2:= v2 + 1;
  #L135394.  v0[v1]:= v2;
  #L135398.  return @kind void;
}
procedure `double` `k`(`com.b.a.b.a.e` v5 @kind this) @signature `Lcom/b/a/b/a/e;.k:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1353ac.  call temp:= `f`(v5) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L1353b2.  v0:= temp @kind object;
  #L1353b4.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L1353b8.  if v0 == v1 then goto L13541e;
  #L1353bc.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L1353c0.  if v0 == v1 then goto L13541e;
  #L1353c4.  v1:= new `java.lang.IllegalStateException`;
  #L1353c8.  v2:= new `java.lang.StringBuilder`;
  #L1353cc.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1353d2.  v3:= "Expected " @kind object;
  #L1353d6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1353dc.  v2:= temp @kind object;
  #L1353de.  v3:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L1353e2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1353e8.  v2:= temp @kind object;
  #L1353ea.  v3:= " but was " @kind object;
  #L1353ee.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1353f4.  v2:= temp @kind object;
  #L1353f6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1353fc.  v0:= temp @kind object;
  #L1353fe.  call temp:= `u`(v5) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L135404.  v2:= temp @kind object;
  #L135406.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13540c.  v0:= temp @kind object;
  #L13540e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L135414.  v0:= temp @kind object;
  #L135416.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13541c.  throw v1;
  #L13541e.  call temp:= `s`(v5) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L135424.  v0:= temp @kind object;
  #L135426.  v0:= (`com.b.a.q`) v0 @kind object;
  #L13542a.  call temp:= `c`(v0) @signature `Lcom/b/a/q;.c:()D` @kind virtual;
  #L135430.  v0:= temp @kind wide;
  #L135432.  call temp:= `q`(v5) @signature `Lcom/b/a/b/a/e;.q:()Z` @kind virtual;
  #L135438.  v2:= temp;
  #L13543a.  if v2 != 0 then goto L135488;
  #L13543e.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L135444.  v2:= temp;
  #L135446.  if v2 != 0 then goto L135456;
  #L13544a.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L135450.  v2:= temp;
  #L135452.  if v2 == 0 then goto L135488;
  #L135456.  v2:= new `java.lang.NumberFormatException`;
  #L13545a.  v3:= new `java.lang.StringBuilder`;
  #L13545e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L135464.  v4:= "JSON forbids NaN and infinities: " @kind object;
  #L135468.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13546e.  v3:= temp @kind object;
  #L135470.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L135476.  v0:= temp @kind object;
  #L135478.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13547e.  v0:= temp @kind object;
  #L135480.  call `<init>`(v2, v0) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L135486.  throw v2;
  #L135488.  call temp:= `t`(v5) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13548e.  v2:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L135492.  if v2 <= 0 then goto L1354ae;
  #L135496.  v2:= v5.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L13549a.  v3:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L13549e.  v3:= v3 + -1;
  #L1354a2.  v4:= v2[v3];
  #L1354a6.  v4:= v4 + 1;
  #L1354aa.  v2[v3]:= v4;
  #L1354ae.  return v0 @kind wide;
}
procedure `long` `l`(`com.b.a.b.a.e` v5 @kind this) @signature `Lcom/b/a/b/a/e;.l:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1354c0.  call temp:= `f`(v5) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L1354c6.  v0:= temp @kind object;
  #L1354c8.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L1354cc.  if v0 == v1 then goto L135532;
  #L1354d0.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L1354d4.  if v0 == v1 then goto L135532;
  #L1354d8.  v1:= new `java.lang.IllegalStateException`;
  #L1354dc.  v2:= new `java.lang.StringBuilder`;
  #L1354e0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1354e6.  v3:= "Expected " @kind object;
  #L1354ea.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1354f0.  v2:= temp @kind object;
  #L1354f2.  v3:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L1354f6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1354fc.  v2:= temp @kind object;
  #L1354fe.  v3:= " but was " @kind object;
  #L135502.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135508.  v2:= temp @kind object;
  #L13550a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135510.  v0:= temp @kind object;
  #L135512.  call temp:= `u`(v5) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L135518.  v2:= temp @kind object;
  #L13551a.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L135520.  v0:= temp @kind object;
  #L135522.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L135528.  v0:= temp @kind object;
  #L13552a.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L135530.  throw v1;
  #L135532.  call temp:= `s`(v5) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L135538.  v0:= temp @kind object;
  #L13553a.  v0:= (`com.b.a.q`) v0 @kind object;
  #L13553e.  call temp:= `d`(v0) @signature `Lcom/b/a/q;.d:()J` @kind virtual;
  #L135544.  v0:= temp @kind wide;
  #L135546.  call temp:= `t`(v5) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13554c.  v2:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L135550.  if v2 <= 0 then goto L13556c;
  #L135554.  v2:= v5.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L135558.  v3:= v5.`com.b.a.b.a.e.e` @type ^`int`;
  #L13555c.  v3:= v3 + -1;
  #L135560.  v4:= v2[v3];
  #L135564.  v4:= v4 + 1;
  #L135568.  v2[v3]:= v4;
  #L13556c.  return v0 @kind wide;
}
procedure `int` `m`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.m:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L135580.  call temp:= `f`(v4) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L135586.  v0:= temp @kind object;
  #L135588.  v1:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L13558c.  if v0 == v1 then goto L1355f2;
  #L135590.  v1:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L135594.  if v0 == v1 then goto L1355f2;
  #L135598.  v1:= new `java.lang.IllegalStateException`;
  #L13559c.  v2:= new `java.lang.StringBuilder`;
  #L1355a0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1355a6.  v3:= "Expected " @kind object;
  #L1355aa.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1355b0.  v2:= temp @kind object;
  #L1355b2.  v3:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L1355b6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1355bc.  v2:= temp @kind object;
  #L1355be.  v3:= " but was " @kind object;
  #L1355c2.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1355c8.  v2:= temp @kind object;
  #L1355ca.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1355d0.  v0:= temp @kind object;
  #L1355d2.  call temp:= `u`(v4) @signature `Lcom/b/a/b/a/e;.u:()Ljava/lang/String;` @kind direct;
  #L1355d8.  v2:= temp @kind object;
  #L1355da.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1355e0.  v0:= temp @kind object;
  #L1355e2.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1355e8.  v0:= temp @kind object;
  #L1355ea.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1355f0.  throw v1;
  #L1355f2.  call temp:= `s`(v4) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L1355f8.  v0:= temp @kind object;
  #L1355fa.  v0:= (`com.b.a.q`) v0 @kind object;
  #L1355fe.  call temp:= `e`(v0) @signature `Lcom/b/a/q;.e:()I` @kind virtual;
  #L135604.  v0:= temp;
  #L135606.  call temp:= `t`(v4) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13560c.  v1:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L135610.  if v1 <= 0 then goto L13562c;
  #L135614.  v1:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L135618.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L13561c.  v2:= v2 + -1;
  #L135620.  v3:= v1[v2];
  #L135624.  v3:= v3 + 1;
  #L135628.  v1[v2]:= v3;
  #L13562c.  return v0;
}
procedure `void` `n`(`com.b.a.b.a.e` v3 @kind this) @signature `Lcom/b/a/b/a/e;.n:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L135640.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/e;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L135646.  v0:= temp @kind object;
  #L135648.  v1:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L13564c.  if v0 != v1 then goto L135684;
  #L135650.  call temp:= `g`(v3) @signature `Lcom/b/a/b/a/e;.g:()Ljava/lang/String;` @kind virtual;
  #L135656.  v0:= v3.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L13565a.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L13565e.  v1:= v1 + -2;
  #L135662.  v2:= "null" @kind object;
  #L135666.  v0[v1]:= v2 @kind object;
  #L13566a.  v0:= v3.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L13566e.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L135672.  v1:= v1 + -1;
  #L135676.  v2:= v0[v1];
  #L13567a.  v2:= v2 + 1;
  #L13567e.  v0[v1]:= v2;
  #L135682.  return @kind void;
  #L135684.  call temp:= `t`(v3) @signature `Lcom/b/a/b/a/e;.t:()Ljava/lang/Object;` @kind direct;
  #L13568a.  v0:= v3.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L13568e.  v1:= v3.`com.b.a.b.a.e.e` @type ^`int`;
  #L135692.  v1:= v1 + -1;
  #L135696.  v2:= "null" @kind object;
  #L13569a.  v0[v1]:= v2 @kind object;
  #L13569e.  goto L13566a;
}
procedure `void` `o`(`com.b.a.b.a.e` v2 @kind this) @signature `Lcom/b/a/b/a/e;.o:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1356b0.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L1356b4.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/e;.a:(Lcom/b/a/d/b;)V` @kind direct;
  #L1356ba.  call temp:= `s`(v2) @signature `Lcom/b/a/b/a/e;.s:()Ljava/lang/Object;` @kind direct;
  #L1356c0.  v0:= temp @kind object;
  #L1356c2.  v0:= (`java.util.Iterator`) v0 @kind object;
  #L1356c6.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L1356cc.  v0:= temp @kind object;
  #L1356ce.  v0:= (`java.util.Map$Entry`) v0 @kind object;
  #L1356d2.  call temp:= `getValue`(v0) @signature `Ljava/util/Map$Entry;.getValue:()Ljava/lang/Object;` @kind interface;
  #L1356d8.  v1:= temp @kind object;
  #L1356da.  call `a`(v2, v1) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L1356e0.  v1:= new `com.b.a.q`;
  #L1356e4.  call temp:= `getKey`(v0) @signature `Ljava/util/Map$Entry;.getKey:()Ljava/lang/Object;` @kind interface;
  #L1356ea.  v0:= temp @kind object;
  #L1356ec.  v0:= (`java.lang.String`) v0 @kind object;
  #L1356f0.  call `<init>`(v1, v0) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1356f6.  call `a`(v2, v1) @signature `Lcom/b/a/b/a/e;.a:(Ljava/lang/Object;)V` @kind direct;
  #L1356fc.  return @kind void;
}
procedure `java.lang.String` `p`(`com.b.a.b.a.e` v4 @kind this) @signature `Lcom/b/a/b/a/e;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L135710.  v0:= new `java.lang.StringBuilder`;
  #L135714.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13571a.  v1:= 36I;
  #L13571e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L135724.  v1:= temp @kind object;
  #L135726.  v0:= 0I;
  #L135728.  v2:= v4.`com.b.a.b.a.e.e` @type ^`int`;
  #L13572c.  if v0 >= v2 then goto L1357ca;
  #L135730.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L135734.  v2:= v2[v0] @kind object;
  #L135738.  v2:= instanceof @variable v2 @type ^`com.b.a.i` @kind boolean;
  #L13573c.  if v2 == 0 then goto L135780;
  #L135740.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L135744.  v0:= v0 + 1;
  #L135748.  v2:= v2[v0] @kind object;
  #L13574c.  v2:= instanceof @variable v2 @type ^`java.util.Iterator` @kind boolean;
  #L135750.  if v2 == 0 then goto L13577a;
  #L135754.  v2:= 91I;
  #L135758.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13575e.  v2:= temp @kind object;
  #L135760.  v3:= v4.`com.b.a.b.a.e.g` @type ^`int`[] @kind object;
  #L135764.  v3:= v3[v0];
  #L135768.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L13576e.  v2:= temp @kind object;
  #L135770.  v3:= 93I;
  #L135774.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13577a.  v0:= v0 + 1;
  #L13577e.  goto L135728;
  #L135780.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L135784.  v2:= v2[v0] @kind object;
  #L135788.  v2:= instanceof @variable v2 @type ^`com.b.a.o` @kind boolean;
  #L13578c.  if v2 == 0 then goto L13577a;
  #L135790.  v2:= v4.`com.b.a.b.a.e.d` @type ^`java.lang.Object`[] @kind object;
  #L135794.  v0:= v0 + 1;
  #L135798.  v2:= v2[v0] @kind object;
  #L13579c.  v2:= instanceof @variable v2 @type ^`java.util.Iterator` @kind boolean;
  #L1357a0.  if v2 == 0 then goto L13577a;
  #L1357a4.  v2:= 46I;
  #L1357a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1357ae.  v2:= v4.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L1357b2.  v2:= v2[v0] @kind object;
  #L1357b6.  if v2 == 0 then goto L13577a;
  #L1357ba.  v2:= v4.`com.b.a.b.a.e.f` @type ^`java.lang.String`[] @kind object;
  #L1357be.  v2:= v2[v0] @kind object;
  #L1357c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1357c8.  goto L13577a;
  #L1357ca.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1357d0.  v0:= temp @kind object;
  #L1357d2.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.b.a.b.a.e` v1 @kind this) @signature `Lcom/b/a/b/a/e;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1357e4.  call temp:= `getClass`(v1) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1357ea.  v0:= temp @kind object;
  #L1357ec.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L1357f2.  v0:= temp @kind object;
  #L1357f4.  return v0 @kind object;
}
