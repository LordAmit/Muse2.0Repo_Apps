record `com.b.a.b.b` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.lang.reflect.Type`[] `@@com.b.a.b.b.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L13a770.  v0:= 0I;
  #L13a772.  v0:= new `java.lang.reflect.Type`[v0];
  #L13a776.  `@@com.b.a.b.b.a` @type ^`java.lang.reflect.Type`[] := v0 @kind object;
  #L13a77a.  return @kind void;
}
procedure `int` `a`(`java.lang.Object` v1 @kind object) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/Object;)I` @AccessFlag STATIC {
    temp;
    v0;

  #L13a78c.  if v1 == 0 then goto L13a79a;
  #L13a790.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L13a796.  v0:= temp;
  #L13a798.  return v0;
  #L13a79a.  v0:= 0I;
  #L13a79c.  goto L13a798;
}
procedure `int` `a`(`java.lang.Object`[] v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/b/b;.a:([Ljava/lang/Object;Ljava/lang/Object;)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L13a7b0.  v0:= 0I;
  #L13a7b2.  v1:= length @variable v2;
  #L13a7b4.  if v0 >= v1 then goto L13a7d0;
  #L13a7b8.  v1:= v2[v0] @kind object;
  #L13a7bc.  call temp:= `equals`(v3, v1) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13a7c2.  v1:= temp;
  #L13a7c4.  if v1 == 0 then goto L13a7ca;
  #L13a7c8.  return v0;
  #L13a7ca.  v0:= v0 + 1;
  #L13a7ce.  goto L13a7b2;
  #L13a7d0.  v0:= new `java.util.NoSuchElementException`;
  #L13a7d4.  call `<init>`(v0) @signature `Ljava/util/NoSuchElementException;.<init>:()V` @kind direct;
  #L13a7da.  throw v0;
}
procedure `java.lang.Class` `a`(`java.lang.reflect.TypeVariable` v2 @kind object) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L13a7ec.  call temp:= `getGenericDeclaration`(v2) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L13a7f2.  v0:= temp @kind object;
  #L13a7f4.  v1:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L13a7f8.  if v1 == 0 then goto L13a802;
  #L13a7fc.  v0:= (`java.lang.Class`) v0 @kind object;
  #L13a800.  return v0 @kind object;
  #L13a802.  v0:= 0I;
  #L13a804.  goto L13a800;
}
procedure `java.lang.reflect.GenericArrayType` `a`(`java.lang.reflect.Type` v1 @kind object) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/GenericArrayType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13a818.  v0:= new `com.b.a.b.b$a`;
  #L13a81c.  call `<init>`(v0, v1) @signature `Lcom/b/a/b/b$a;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L13a822.  return v0 @kind object;
}
procedure `java.lang.reflect.ParameterizedType` `a`(`java.lang.reflect.Type` v1 @kind object, `java.lang.reflect.Type` v2 @kind object, `java.lang.reflect.Type`[] v3 @kind object) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13a834.  v0:= new `com.b.a.b.b$b`;
  #L13a838.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/b/a/b/b$b;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L13a83e.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `a`(`java.lang.reflect.Type` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L13a850.  v2:= 0I;
  #L13a852.  v0:= constclass @type ^`java.util.Collection` @kind object;
  #L13a856.  call temp:= `b`(v3, v4, v0) @signature `Lcom/b/a/b/b;.b:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L13a85c.  v0:= temp @kind object;
  #L13a85e.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L13a862.  if v1 == 0 then goto L13a876;
  #L13a866.  v0:= (`java.lang.reflect.WildcardType`) v0 @kind object;
  #L13a86a.  call temp:= `getUpperBounds`(v0) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13a870.  v0:= temp @kind object;
  #L13a872.  v0:= v0[v2] @kind object;
  #L13a876.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L13a87a.  if v1 == 0 then goto L13a890;
  #L13a87e.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L13a882.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13a888.  v0:= temp @kind object;
  #L13a88a.  v0:= v0[v2] @kind object;
  #L13a88e.  return v0 @kind object;
  #L13a890.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L13a894.  goto L13a88e;
}
procedure `java.lang.reflect.Type` `a`(`java.lang.reflect.Type` v4 @kind object, `java.lang.Class` v5 @kind object, `java.lang.Class` v6 @kind object) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13a8a8.  if v6 != v5 then goto L13a8ae;
  #L13a8ac.  return v4 @kind object;
  #L13a8ae.  call temp:= `isInterface`(v6) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L13a8b4.  v0:= temp;
  #L13a8b6.  if v0 == 0 then goto L13a910;
  #L13a8ba.  call temp:= `getInterfaces`(v5) @signature `Ljava/lang/Class;.getInterfaces:()[Ljava/lang/Class;` @kind virtual;
  #L13a8c0.  v1:= temp @kind object;
  #L13a8c2.  v0:= 0I;
  #L13a8c4.  v2:= length @variable v1;
  #L13a8c6.  if v0 >= v2 then goto L13a910;
  #L13a8ca.  v3:= v1[v0] @kind object;
  #L13a8ce.  if v3 != v6 then goto L13a8e0;
  #L13a8d2.  call temp:= `getGenericInterfaces`(v5) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L13a8d8.  v1:= temp @kind object;
  #L13a8da.  v4:= v1[v0] @kind object;
  #L13a8de.  goto L13a8ac;
  #L13a8e0.  v3:= v1[v0] @kind object;
  #L13a8e4.  call temp:= `isAssignableFrom`(v6, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L13a8ea.  v3:= temp;
  #L13a8ec.  if v3 == 0 then goto L13a90a;
  #L13a8f0.  call temp:= `getGenericInterfaces`(v5) @signature `Ljava/lang/Class;.getGenericInterfaces:()[Ljava/lang/reflect/Type;` @kind virtual;
  #L13a8f6.  v2:= temp @kind object;
  #L13a8f8.  v2:= v2[v0] @kind object;
  #L13a8fc.  v0:= v1[v0] @kind object;
  #L13a900.  call temp:= `a`(v2, v0, v6) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L13a906.  v4:= temp @kind object;
  #L13a908.  goto L13a8ac;
  #L13a90a.  v0:= v0 + 1;
  #L13a90e.  goto L13a8c6;
  #L13a910.  call temp:= `isInterface`(v5) @signature `Ljava/lang/Class;.isInterface:()Z` @kind virtual;
  #L13a916.  v0:= temp;
  #L13a918.  if v0 != 0 then goto L13a95c;
  #L13a91c.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L13a920.  if v5 == v0 then goto L13a95c;
  #L13a924.  call temp:= `getSuperclass`(v5) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L13a92a.  v0:= temp @kind object;
  #L13a92c.  if v0 != v6 then goto L13a93a;
  #L13a930.  call temp:= `getGenericSuperclass`(v5) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L13a936.  v4:= temp @kind object;
  #L13a938.  goto L13a8ac;
  #L13a93a.  call temp:= `isAssignableFrom`(v6, v0) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L13a940.  v1:= temp;
  #L13a942.  if v1 == 0 then goto L13a958;
  #L13a946.  call temp:= `getGenericSuperclass`(v5) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L13a94c.  v1:= temp @kind object;
  #L13a94e.  call temp:= `a`(v1, v0, v6) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L13a954.  v4:= temp @kind object;
  #L13a956.  goto L13a8ac;
  #L13a958.  v5:= v0 @kind object;
  #L13a95a.  goto L13a91c;
  #L13a95c.  v4:= v6 @kind object;
  #L13a95e.  goto L13a8ac;
}
procedure `java.lang.reflect.Type` `a`(`java.lang.reflect.Type` v10 @kind object, `java.lang.Class` v11 @kind object, `java.lang.reflect.Type` v12 @kind object) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L13a970.  v2:= 1I;
  #L13a972.  v3:= 0I;
  #L13a974.  v0:= v12 @kind object;
  #L13a976.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L13a97a.  if v1 == 0 then goto L13a996;
  #L13a97e.  v0:= (`java.lang.reflect.TypeVariable`) v0 @kind object;
  #L13a982.  call temp:= `a`(v10, v11, v0) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @kind static;
  #L13a988.  v12:= temp @kind object;
  #L13a98a.  if v12 != v0 then goto L13a992;
  #L13a98e.  v0:= v12 @kind object;
  #L13a990.  return v0 @kind object;
  #L13a992.  v0:= v12 @kind object;
  #L13a994.  goto L13a976;
  #L13a996.  v1:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L13a99a.  if v1 == 0 then goto L13a9d2;
  #L13a99e.  v1:= v0 @kind object;
  #L13a9a0.  v1:= (`java.lang.Class`) v1 @kind object;
  #L13a9a4.  call temp:= `isArray`(v1) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L13a9aa.  v1:= temp;
  #L13a9ac.  if v1 == 0 then goto L13a9d2;
  #L13a9b0.  v0:= (`java.lang.Class`) v0 @kind object;
  #L13a9b4.  call temp:= `getComponentType`(v0) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L13a9ba.  v1:= temp @kind object;
  #L13a9bc.  call temp:= `a`(v10, v11, v1) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L13a9c2.  v2:= temp @kind object;
  #L13a9c4.  if v1 == v2 then goto L13a990;
  #L13a9c8.  call temp:= `a`(v2) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/GenericArrayType;` @kind static;
  #L13a9ce.  v0:= temp @kind object;
  #L13a9d0.  goto L13a990;
  #L13a9d2.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L13a9d6.  if v1 == 0 then goto L13a9fc;
  #L13a9da.  v0:= (`java.lang.reflect.GenericArrayType`) v0 @kind object;
  #L13a9de.  call temp:= `getGenericComponentType`(v0) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13a9e4.  v1:= temp @kind object;
  #L13a9e6.  call temp:= `a`(v10, v11, v1) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L13a9ec.  v2:= temp @kind object;
  #L13a9ee.  if v1 == v2 then goto L13a990;
  #L13a9f2.  call temp:= `a`(v2) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/GenericArrayType;` @kind static;
  #L13a9f8.  v0:= temp @kind object;
  #L13a9fa.  goto L13a990;
  #L13a9fc.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L13aa00.  if v1 == 0 then goto L13aa7e;
  #L13aa04.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L13aa08.  call temp:= `getOwnerType`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13aa0e.  v1:= temp @kind object;
  #L13aa10.  call temp:= `a`(v10, v11, v1) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L13aa16.  v5:= temp @kind object;
  #L13aa18.  if v5 == v1 then goto L13aa64;
  #L13aa1c.  v1:= v2;
  #L13aa1e.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13aa24.  v4:= temp @kind object;
  #L13aa26.  v6:= length @variable v4;
  #L13aa28.  v9:= v3;
  #L13aa2a.  v3:= v1;
  #L13aa2c.  v1:= v4 @kind object;
  #L13aa2e.  v4:= v9;
  #L13aa30.  if v4 >= v6 then goto L13aa68;
  #L13aa34.  v7:= v1[v4] @kind object;
  #L13aa38.  call temp:= `a`(v10, v11, v7) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L13aa3e.  v7:= temp @kind object;
  #L13aa40.  v8:= v1[v4] @kind object;
  #L13aa44.  if v7 == v8 then goto L13aa5e;
  #L13aa48.  if v3 != 0 then goto L13aa5a;
  #L13aa4c.  call temp:= `clone`(v1) @signature `[Ljava/lang/reflect/Type;.clone:()Ljava/lang/Object;` @kind virtual;
  #L13aa52.  v1:= temp @kind object;
  #L13aa54.  v1:= (`java.lang.reflect.Type`[]) v1 @kind object;
  #L13aa58.  v3:= v2;
  #L13aa5a.  v1[v4]:= v7 @kind object;
  #L13aa5e.  v4:= v4 + 1;
  #L13aa62.  goto L13aa30;
  #L13aa64.  v1:= v3;
  #L13aa66.  goto L13aa1e;
  #L13aa68.  if v3 == 0 then goto L13a990;
  #L13aa6c.  call temp:= `getRawType`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13aa72.  v0:= temp @kind object;
  #L13aa74.  call temp:= `a`(v5, v0, v1) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)Ljava/lang/reflect/ParameterizedType;` @kind static;
  #L13aa7a.  v0:= temp @kind object;
  #L13aa7c.  goto L13a990;
  #L13aa7e.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L13aa82.  if v1 == 0 then goto L13a990;
  #L13aa86.  v0:= (`java.lang.reflect.WildcardType`) v0 @kind object;
  #L13aa8a.  call temp:= `getLowerBounds`(v0) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13aa90.  v1:= temp @kind object;
  #L13aa92.  call temp:= `getUpperBounds`(v0) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13aa98.  v4:= temp @kind object;
  #L13aa9a.  v5:= length @variable v1;
  #L13aa9c.  if v5 != v2 then goto L13aac0;
  #L13aaa0.  v2:= v1[v3] @kind object;
  #L13aaa4.  call temp:= `a`(v10, v11, v2) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L13aaaa.  v2:= temp @kind object;
  #L13aaac.  v1:= v1[v3] @kind object;
  #L13aab0.  if v2 == v1 then goto L13a990;
  #L13aab4.  call temp:= `c`(v2) @signature `Lcom/b/a/b/b;.c:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/WildcardType;` @kind static;
  #L13aaba.  v0:= temp @kind object;
  #L13aabc.  goto L13a990;
  #L13aac0.  v1:= length @variable v4;
  #L13aac2.  if v1 != v2 then goto L13a990;
  #L13aac6.  v1:= v4[v3] @kind object;
  #L13aaca.  call temp:= `a`(v10, v11, v1) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L13aad0.  v1:= temp @kind object;
  #L13aad2.  v2:= v4[v3] @kind object;
  #L13aad6.  if v1 == v2 then goto L13a990;
  #L13aada.  call temp:= `b`(v1) @signature `Lcom/b/a/b/b;.b:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/WildcardType;` @kind static;
  #L13aae0.  v0:= temp @kind object;
  #L13aae2.  goto L13a990;
}
procedure `java.lang.reflect.Type` `a`(`java.lang.reflect.Type` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.reflect.TypeVariable` v5 @kind object) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/TypeVariable;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;

  #L13aaf8.  call temp:= `a`(v5) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/TypeVariable;)Ljava/lang/Class;` @kind static;
  #L13aafe.  v1:= temp @kind object;
  #L13ab00.  if v1 != 0 then goto L13ab06;
  #L13ab04.  return v5 @kind object;
  #L13ab06.  call temp:= `a`(v3, v4, v1) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L13ab0c.  v0:= temp @kind object;
  #L13ab0e.  v2:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L13ab12.  if v2 == 0 then goto L13ab04;
  #L13ab16.  call temp:= `getTypeParameters`(v1) @signature `Ljava/lang/Class;.getTypeParameters:()[Ljava/lang/reflect/TypeVariable;` @kind virtual;
  #L13ab1c.  v1:= temp @kind object;
  #L13ab1e.  call temp:= `a`(v1, v5) @signature `Lcom/b/a/b/b;.a:([Ljava/lang/Object;Ljava/lang/Object;)I` @kind static;
  #L13ab24.  v1:= temp;
  #L13ab26.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L13ab2a.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13ab30.  v0:= temp @kind object;
  #L13ab32.  v5:= v0[v1] @kind object;
  #L13ab36.  goto L13ab04;
}
procedure `boolean` `a`(`java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag STATIC {
    temp;
    v0;

  #L13ab48.  if v1 == v2 then goto L13ab5c;
  #L13ab4c.  if v1 == 0 then goto L13ab60;
  #L13ab50.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13ab56.  v0:= temp;
  #L13ab58.  if v0 == 0 then goto L13ab60;
  #L13ab5c.  v0:= 1I;
  #L13ab5e.  return v0;
  #L13ab60.  v0:= 0I;
  #L13ab62.  goto L13ab5e;
}
procedure `boolean` `a`(`java.lang.reflect.Type` v4 @kind object, `java.lang.reflect.Type` v5 @kind object) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13ab74.  v0:= 1I;
  #L13ab76.  v1:= 0I;
  #L13ab78.  if v4 != v5 then goto L13ab80;
  #L13ab7c.  v1:= v0;
  #L13ab7e.  return v1;
  #L13ab80.  v2:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L13ab84.  if v2 == 0 then goto L13ab92;
  #L13ab88.  call temp:= `equals`(v4, v5) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13ab8e.  v1:= temp;
  #L13ab90.  goto L13ab7e;
  #L13ab92.  v2:= instanceof @variable v4 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L13ab96.  if v2 == 0 then goto L13ac06;
  #L13ab9a.  v2:= instanceof @variable v5 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L13ab9e.  if v2 == 0 then goto L13ab7e;
  #L13aba2.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L13aba6.  v5:= (`java.lang.reflect.ParameterizedType`) v5 @kind object;
  #L13abaa.  call temp:= `getOwnerType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13abb0.  v2:= temp @kind object;
  #L13abb2.  call temp:= `getOwnerType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13abb8.  v3:= temp @kind object;
  #L13abba.  call temp:= `a`(v2, v3) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L13abc0.  v2:= temp;
  #L13abc2.  if v2 == 0 then goto L13ac02;
  #L13abc6.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13abcc.  v2:= temp @kind object;
  #L13abce.  call temp:= `getRawType`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13abd4.  v3:= temp @kind object;
  #L13abd6.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13abdc.  v2:= temp;
  #L13abde.  if v2 == 0 then goto L13ac02;
  #L13abe2.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13abe8.  v2:= temp @kind object;
  #L13abea.  call temp:= `getActualTypeArguments`(v5) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13abf0.  v3:= temp @kind object;
  #L13abf2.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L13abf8.  v2:= temp;
  #L13abfa.  if v2 == 0 then goto L13ac02;
  #L13abfe.  v1:= v0;
  #L13ac00.  goto L13ab7e;
  #L13ac02.  v0:= v1;
  #L13ac04.  goto L13abfe;
  #L13ac06.  v2:= instanceof @variable v4 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L13ac0a.  if v2 == 0 then goto L13ac38;
  #L13ac0e.  v0:= instanceof @variable v5 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L13ac12.  if v0 == 0 then goto L13ab7e;
  #L13ac16.  v4:= (`java.lang.reflect.GenericArrayType`) v4 @kind object;
  #L13ac1a.  v5:= (`java.lang.reflect.GenericArrayType`) v5 @kind object;
  #L13ac1e.  call temp:= `getGenericComponentType`(v4) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13ac24.  v0:= temp @kind object;
  #L13ac26.  call temp:= `getGenericComponentType`(v5) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13ac2c.  v1:= temp @kind object;
  #L13ac2e.  call temp:= `a`(v0, v1) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L13ac34.  v1:= temp;
  #L13ac36.  goto L13ab7e;
  #L13ac38.  v2:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L13ac3c.  if v2 == 0 then goto L13ac92;
  #L13ac40.  v2:= instanceof @variable v5 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L13ac44.  if v2 == 0 then goto L13ab7e;
  #L13ac48.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L13ac4c.  v5:= (`java.lang.reflect.WildcardType`) v5 @kind object;
  #L13ac50.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13ac56.  v2:= temp @kind object;
  #L13ac58.  call temp:= `getUpperBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13ac5e.  v3:= temp @kind object;
  #L13ac60.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L13ac66.  v2:= temp;
  #L13ac68.  if v2 == 0 then goto L13ac8e;
  #L13ac6c.  call temp:= `getLowerBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13ac72.  v2:= temp @kind object;
  #L13ac74.  call temp:= `getLowerBounds`(v5) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13ac7a.  v3:= temp @kind object;
  #L13ac7c.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([Ljava/lang/Object;[Ljava/lang/Object;)Z` @kind static;
  #L13ac82.  v2:= temp;
  #L13ac84.  if v2 == 0 then goto L13ac8e;
  #L13ac88.  v1:= v0;
  #L13ac8a.  goto L13ab7e;
  #L13ac8e.  v0:= v1;
  #L13ac90.  goto L13ac88;
  #L13ac92.  v2:= instanceof @variable v4 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L13ac96.  if v2 == 0 then goto L13ab7e;
  #L13ac9a.  v2:= instanceof @variable v5 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L13ac9e.  if v2 == 0 then goto L13ab7e;
  #L13aca2.  v4:= (`java.lang.reflect.TypeVariable`) v4 @kind object;
  #L13aca6.  v5:= (`java.lang.reflect.TypeVariable`) v5 @kind object;
  #L13acaa.  call temp:= `getGenericDeclaration`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L13acb0.  v2:= temp @kind object;
  #L13acb2.  call temp:= `getGenericDeclaration`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getGenericDeclaration:()Ljava/lang/reflect/GenericDeclaration;` @kind interface;
  #L13acb8.  v3:= temp @kind object;
  #L13acba.  if v2 != v3 then goto L13ace0;
  #L13acbe.  call temp:= `getName`(v4) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L13acc4.  v2:= temp @kind object;
  #L13acc6.  call temp:= `getName`(v5) @signature `Ljava/lang/reflect/TypeVariable;.getName:()Ljava/lang/String;` @kind interface;
  #L13accc.  v3:= temp @kind object;
  #L13acce.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L13acd4.  v2:= temp;
  #L13acd6.  if v2 == 0 then goto L13ace0;
  #L13acda.  v1:= v0;
  #L13acdc.  goto L13ab7e;
  #L13ace0.  v0:= v1;
  #L13ace2.  goto L13acda;
}
procedure `java.lang.reflect.Type` `b`(`java.lang.reflect.Type` v1 @kind object, `java.lang.Class` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/b/a/b/b;.b:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @AccessFlag STATIC {
    temp;
    v0;

  #L13acf4.  call temp:= `isAssignableFrom`(v3, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L13acfa.  v0:= temp;
  #L13acfc.  call `a`(v0) @signature `Lcom/b/a/b/a;.a:(Z)V` @kind static;
  #L13ad02.  call temp:= `a`(v1, v2, v3) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L13ad08.  v0:= temp @kind object;
  #L13ad0a.  call temp:= `a`(v1, v2, v0) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L13ad10.  v0:= temp @kind object;
  #L13ad12.  return v0 @kind object;
}
procedure `java.lang.reflect.WildcardType` `b`(`java.lang.reflect.Type` v3 @kind object) @signature `Lcom/b/a/b/b;.b:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/WildcardType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L13ad24.  v0:= new `com.b.a.b.b$c`;
  #L13ad28.  v1:= 1I;
  #L13ad2a.  v1:= new `java.lang.reflect.Type`[v1];
  #L13ad2e.  v2:= 0I;
  #L13ad30.  v1[v2]:= v3 @kind object;
  #L13ad34.  v2:= `@@com.b.a.b.b.a` @type ^`java.lang.reflect.Type`[] @kind object;
  #L13ad38.  call `<init>`(v0, v1, v2) @signature `Lcom/b/a/b/b$c;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L13ad3e.  return v0 @kind object;
}
procedure `java.lang.reflect.Type`[] `b`(`java.lang.reflect.Type` v5 @kind object, `java.lang.Class` v6 @kind object) @signature `Lcom/b/a/b/b;.b:(Ljava/lang/reflect/Type;Ljava/lang/Class;)[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13ad50.  v4:= 2I;
  #L13ad52.  v3:= 1I;
  #L13ad54.  v2:= 0I;
  #L13ad56.  v0:= constclass @type ^`java.util.Properties` @kind object;
  #L13ad5a.  if v5 != v0 then goto L13ad74;
  #L13ad5e.  v0:= new `java.lang.reflect.Type`[v4];
  #L13ad62.  v1:= constclass @type ^`java.lang.String` @kind object;
  #L13ad66.  v0[v2]:= v1 @kind object;
  #L13ad6a.  v1:= constclass @type ^`java.lang.String` @kind object;
  #L13ad6e.  v0[v3]:= v1 @kind object;
  #L13ad72.  return v0 @kind object;
  #L13ad74.  v0:= constclass @type ^`java.util.Map` @kind object;
  #L13ad78.  call temp:= `b`(v5, v6, v0) @signature `Lcom/b/a/b/b;.b:(Ljava/lang/reflect/Type;Ljava/lang/Class;Ljava/lang/Class;)Ljava/lang/reflect/Type;` @kind static;
  #L13ad7e.  v0:= temp @kind object;
  #L13ad80.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L13ad84.  if v1 == 0 then goto L13ad96;
  #L13ad88.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L13ad8c.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13ad92.  v0:= temp @kind object;
  #L13ad94.  goto L13ad72;
  #L13ad96.  v0:= new `java.lang.reflect.Type`[v4];
  #L13ad9a.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L13ad9e.  v0[v2]:= v1 @kind object;
  #L13ada2.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L13ada6.  v0[v3]:= v1 @kind object;
  #L13adaa.  goto L13ad72;
}
procedure `java.lang.reflect.WildcardType` `c`(`java.lang.reflect.Type` v5 @kind object) @signature `Lcom/b/a/b/b;.c:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/WildcardType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L13adbc.  v4:= 1I;
  #L13adbe.  v3:= 0I;
  #L13adc0.  v0:= new `com.b.a.b.b$c`;
  #L13adc4.  v1:= new `java.lang.reflect.Type`[v4];
  #L13adc8.  v2:= constclass @type ^`java.lang.Object` @kind object;
  #L13adcc.  v1[v3]:= v2 @kind object;
  #L13add0.  v2:= new `java.lang.reflect.Type`[v4];
  #L13add4.  v2[v3]:= v5 @kind object;
  #L13add8.  call `<init>`(v0, v1, v2) @signature `Lcom/b/a/b/b$c;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L13adde.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `d`(`java.lang.reflect.Type` v4 @kind object) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13adf0.  v0:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L13adf4.  if v0 == 0 then goto L13ae2c;
  #L13adf8.  v4:= (`java.lang.Class`) v4 @kind object;
  #L13adfc.  call temp:= `isArray`(v4) @signature `Ljava/lang/Class;.isArray:()Z` @kind virtual;
  #L13ae02.  v0:= temp;
  #L13ae04.  if v0 == 0 then goto L13ae28;
  #L13ae08.  v0:= new `com.b.a.b.b$a`;
  #L13ae0c.  call temp:= `getComponentType`(v4) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L13ae12.  v1:= temp @kind object;
  #L13ae14.  call temp:= `d`(v1) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L13ae1a.  v1:= temp @kind object;
  #L13ae1c.  call `<init>`(v0, v1) @signature `Lcom/b/a/b/b$a;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L13ae22.  v0:= (`java.lang.reflect.Type`) v0 @kind object;
  #L13ae26.  return v0 @kind object;
  #L13ae28.  v0:= v4 @kind object;
  #L13ae2a.  goto L13ae22;
  #L13ae2c.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L13ae30.  if v0 == 0 then goto L13ae5c;
  #L13ae34.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L13ae38.  v0:= new `com.b.a.b.b$b`;
  #L13ae3c.  call temp:= `getOwnerType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getOwnerType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13ae42.  v1:= temp @kind object;
  #L13ae44.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13ae4a.  v2:= temp @kind object;
  #L13ae4c.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13ae52.  v3:= temp @kind object;
  #L13ae54.  call `<init>`(v0, v1, v2, v3) @signature `Lcom/b/a/b/b$b;.<init>:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L13ae5a.  goto L13ae26;
  #L13ae5c.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L13ae60.  if v0 == 0 then goto L13ae7c;
  #L13ae64.  v4:= (`java.lang.reflect.GenericArrayType`) v4 @kind object;
  #L13ae68.  v0:= new `com.b.a.b.b$a`;
  #L13ae6c.  call temp:= `getGenericComponentType`(v4) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13ae72.  v1:= temp @kind object;
  #L13ae74.  call `<init>`(v0, v1) @signature `Lcom/b/a/b/b$a;.<init>:(Ljava/lang/reflect/Type;)V` @kind direct;
  #L13ae7a.  goto L13ae26;
  #L13ae7c.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L13ae80.  if v0 == 0 then goto L13aea4;
  #L13ae84.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L13ae88.  v0:= new `com.b.a.b.b$c`;
  #L13ae8c.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13ae92.  v1:= temp @kind object;
  #L13ae94.  call temp:= `getLowerBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getLowerBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13ae9a.  v2:= temp @kind object;
  #L13ae9c.  call `<init>`(v0, v1, v2) @signature `Lcom/b/a/b/b$c;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @kind direct;
  #L13aea2.  goto L13ae26;
  #L13aea4.  v0:= v4 @kind object;
  #L13aea6.  goto L13ae26;
}
procedure `java.lang.Class` `e`(`java.lang.reflect.Type` v4 @kind object) @signature `Lcom/b/a/b/b;.e:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13aeb8.  v1:= 0I;
  #L13aeba.  v0:= instanceof @variable v4 @type ^`java.lang.Class` @kind boolean;
  #L13aebe.  if v0 == 0 then goto L13aec8;
  #L13aec2.  v4:= (`java.lang.Class`) v4 @kind object;
  #L13aec6.  return v4 @kind object;
  #L13aec8.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L13aecc.  if v0 == 0 then goto L13aeee;
  #L13aed0.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L13aed4.  call temp:= `getRawType`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getRawType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13aeda.  v0:= temp @kind object;
  #L13aedc.  v1:= instanceof @variable v0 @type ^`java.lang.Class` @kind boolean;
  #L13aee0.  call `a`(v1) @signature `Lcom/b/a/b/a;.a:(Z)V` @kind static;
  #L13aee6.  v0:= (`java.lang.Class`) v0 @kind object;
  #L13aeea.  v4:= v0 @kind object;
  #L13aeec.  goto L13aec6;
  #L13aeee.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L13aef2.  if v0 == 0 then goto L13af1c;
  #L13aef6.  v4:= (`java.lang.reflect.GenericArrayType`) v4 @kind object;
  #L13aefa.  call temp:= `getGenericComponentType`(v4) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13af00.  v0:= temp @kind object;
  #L13af02.  call temp:= `e`(v0) @signature `Lcom/b/a/b/b;.e:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L13af08.  v0:= temp @kind object;
  #L13af0a.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Array;.newInstance:(Ljava/lang/Class;I)Ljava/lang/Object;` @kind static;
  #L13af10.  v0:= temp @kind object;
  #L13af12.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13af18.  v4:= temp @kind object;
  #L13af1a.  goto L13aec6;
  #L13af1c.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L13af20.  if v0 == 0 then goto L13af2a;
  #L13af24.  v4:= constclass @type ^`java.lang.Object` @kind object;
  #L13af28.  goto L13aec6;
  #L13af2a.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L13af2e.  if v0 == 0 then goto L13af4c;
  #L13af32.  v4:= (`java.lang.reflect.WildcardType`) v4 @kind object;
  #L13af36.  call temp:= `getUpperBounds`(v4) @signature `Ljava/lang/reflect/WildcardType;.getUpperBounds:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13af3c.  v0:= temp @kind object;
  #L13af3e.  v0:= v0[v1] @kind object;
  #L13af42.  call temp:= `e`(v0) @signature `Lcom/b/a/b/b;.e:(Ljava/lang/reflect/Type;)Ljava/lang/Class;` @kind static;
  #L13af48.  v4:= temp @kind object;
  #L13af4a.  goto L13aec6;
  #L13af4c.  if v4 != 0 then goto L13af9a;
  #L13af50.  v0:= "null" @kind object;
  #L13af54.  v1:= new `java.lang.IllegalArgumentException`;
  #L13af58.  v2:= new `java.lang.StringBuilder`;
  #L13af5c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13af62.  v3:= "Expected a Class, ParameterizedType, or GenericArrayType, but <" @kind object;
  #L13af66.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13af6c.  v2:= temp @kind object;
  #L13af6e.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13af74.  v2:= temp @kind object;
  #L13af76.  v3:= "> is of type " @kind object;
  #L13af7a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13af80.  v2:= temp @kind object;
  #L13af82.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13af88.  v0:= temp @kind object;
  #L13af8a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13af90.  v0:= temp @kind object;
  #L13af92.  call `<init>`(v1, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L13af98.  throw v1;
  #L13af9a.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L13afa0.  v0:= temp @kind object;
  #L13afa2.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L13afa8.  v0:= temp @kind object;
  #L13afaa.  goto L13af54;
}
procedure `java.lang.String` `f`(`java.lang.reflect.Type` v1 @kind object) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13afbc.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L13afc0.  if v0 == 0 then goto L13afd2;
  #L13afc4.  v1:= (`java.lang.Class`) v1 @kind object;
  #L13afc8.  call temp:= `getName`(v1) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L13afce.  v0:= temp @kind object;
  #L13afd0.  return v0 @kind object;
  #L13afd2.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L13afd8.  v0:= temp @kind object;
  #L13afda.  goto L13afd0;
}
procedure `java.lang.reflect.Type` `g`(`java.lang.reflect.Type` v1 @kind object) @signature `Lcom/b/a/b/b;.g:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13afec.  v0:= instanceof @variable v1 @type ^`java.lang.reflect.GenericArrayType` @kind boolean;
  #L13aff0.  if v0 == 0 then goto L13b002;
  #L13aff4.  v1:= (`java.lang.reflect.GenericArrayType`) v1 @kind object;
  #L13aff8.  call temp:= `getGenericComponentType`(v1) @signature `Ljava/lang/reflect/GenericArrayType;.getGenericComponentType:()Ljava/lang/reflect/Type;` @kind interface;
  #L13affe.  v0:= temp @kind object;
  #L13b000.  return v0 @kind object;
  #L13b002.  v1:= (`java.lang.Class`) v1 @kind object;
  #L13b006.  call temp:= `getComponentType`(v1) @signature `Ljava/lang/Class;.getComponentType:()Ljava/lang/Class;` @kind virtual;
  #L13b00c.  v0:= temp @kind object;
  #L13b00e.  goto L13b000;
}
procedure `void` `h`(`java.lang.reflect.Type` v1 @kind object) @signature `Lcom/b/a/b/b;.h:(Ljava/lang/reflect/Type;)V` @AccessFlag STATIC {
    temp;
    v0;

  #L13b020.  v0:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L13b024.  if v0 == 0 then goto L13b038;
  #L13b028.  v1:= (`java.lang.Class`) v1 @kind object;
  #L13b02c.  call temp:= `isPrimitive`(v1) @signature `Ljava/lang/Class;.isPrimitive:()Z` @kind virtual;
  #L13b032.  v0:= temp;
  #L13b034.  if v0 != 0 then goto L13b042;
  #L13b038.  v0:= 1I;
  #L13b03a.  call `a`(v0) @signature `Lcom/b/a/b/a;.a:(Z)V` @kind static;
  #L13b040.  return @kind void;
  #L13b042.  v0:= 0I;
  #L13b044.  goto L13b03a;
}
