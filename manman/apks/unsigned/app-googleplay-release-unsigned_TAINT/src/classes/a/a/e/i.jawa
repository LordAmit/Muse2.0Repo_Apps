record `a.a.e.i` @kind class @AccessFlag PUBLIC_FINAL {
  `long` `a.a.e.i.a` @AccessFlag ;
  `long` `a.a.e.i.b` @AccessFlag ;
  `int` `a.a.e.i.c` @AccessFlag FINAL;
  `a.a.e.g` `a.a.e.i.d` @AccessFlag FINAL;
  `a.a.e.i$a` `a.a.e.i.e` @AccessFlag FINAL;
  `a.a.e.i$c` `a.a.e.i.f` @AccessFlag FINAL;
  `a.a.e.i$c` `a.a.e.i.g` @AccessFlag FINAL;
  `a.a.e.b` `a.a.e.i.h` @AccessFlag ;
  `java.util.List` `a.a.e.i.j` @AccessFlag PRIVATE_FINAL;
  `java.util.List` `a.a.e.i.k` @AccessFlag PRIVATE;
  `boolean` `a.a.e.i.l` @AccessFlag PRIVATE;
  `a.a.e.i$b` `a.a.e.i.m` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.a.e.i.i` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/e/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L07fbf8.  v0:= constclass @type ^`a.a.e.i` @kind object;
  #L07fbfc.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L07fc02.  v0:= temp;
  #L07fc04.  if v0 != 0 then goto L07fc10;
  #L07fc08.  v0:= 1I;
  #L07fc0a.  `@@a.a.e.i.i` @type ^`boolean` := v0 @kind boolean;
  #L07fc0e.  return @kind void;
  #L07fc10.  v0:= 0I;
  #L07fc12.  goto L07fc0a;
}
procedure `void` `<init>`(`a.a.e.i` v4 @kind this, `int` v5 , `a.a.e.g` v6 @kind object, `boolean` v7 , `boolean` v8 , `java.util.List` v9 @kind object) @signature `La/a/e/i;.<init>:(ILa/a/e/g;ZZLjava/util/List;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07fc24.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07fc2a.  v0:= 0L;
  #L07fc2e.  v4.`a.a.e.i.a` @type ^`long` := v0 @kind wide;
  #L07fc32.  v0:= new `a.a.e.i$c`;
  #L07fc36.  call `<init>`(v0, v4) @signature `La/a/e/i$c;.<init>:(La/a/e/i;)V` @kind direct;
  #L07fc3c.  v4.`a.a.e.i.f` @type ^`a.a.e.i$c` := v0 @kind object;
  #L07fc40.  v0:= new `a.a.e.i$c`;
  #L07fc44.  call `<init>`(v0, v4) @signature `La/a/e/i$c;.<init>:(La/a/e/i;)V` @kind direct;
  #L07fc4a.  v4.`a.a.e.i.g` @type ^`a.a.e.i$c` := v0 @kind object;
  #L07fc4e.  v0:= 0I;
  #L07fc50.  v4.`a.a.e.i.h` @type ^`a.a.e.b` := v0 @kind object;
  #L07fc54.  if v6 != 0 then goto L07fc68;
  #L07fc58.  v0:= new `java.lang.NullPointerException`;
  #L07fc5c.  v1:= "connection == null" @kind object;
  #L07fc60.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07fc66.  throw v0;
  #L07fc68.  if v9 != 0 then goto L07fc7c;
  #L07fc6c.  v0:= new `java.lang.NullPointerException`;
  #L07fc70.  v1:= "requestHeaders == null" @kind object;
  #L07fc74.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07fc7a.  throw v0;
  #L07fc7c.  v4.`a.a.e.i.c` @type ^`int` := v5;
  #L07fc80.  v4.`a.a.e.i.d` @type ^`a.a.e.g` := v6 @kind object;
  #L07fc84.  v0:= v6.`a.a.e.g.m` @type ^`a.a.e.n` @kind object;
  #L07fc88.  call temp:= `d`(v0) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L07fc8e.  v0:= temp;
  #L07fc90.  v0:= (`long`) v0 @kind i2l;
  #L07fc92.  v4.`a.a.e.i.b` @type ^`long` := v0 @kind wide;
  #L07fc96.  v0:= new `a.a.e.i$b`;
  #L07fc9a.  v1:= v6.`a.a.e.g.l` @type ^`a.a.e.n` @kind object;
  #L07fc9e.  call temp:= `d`(v1) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L07fca4.  v1:= temp;
  #L07fca6.  v2:= (`long`) v1 @kind i2l;
  #L07fca8.  call `<init>`(v0, v4, v2) @signature `La/a/e/i$b;.<init>:(La/a/e/i;J)V` @kind direct;
  #L07fcae.  v4.`a.a.e.i.m` @type ^`a.a.e.i$b` := v0 @kind object;
  #L07fcb2.  v0:= new `a.a.e.i$a`;
  #L07fcb6.  call `<init>`(v0, v4) @signature `La/a/e/i$a;.<init>:(La/a/e/i;)V` @kind direct;
  #L07fcbc.  v4.`a.a.e.i.e` @type ^`a.a.e.i$a` := v0 @kind object;
  #L07fcc0.  v0:= v4.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L07fcc4.  v0.`a.a.e.i$b.b` @type ^`boolean` := v8 @kind boolean;
  #L07fcc8.  v0:= v4.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L07fccc.  v0.`a.a.e.i$a.b` @type ^`boolean` := v7 @kind boolean;
  #L07fcd0.  v4.`a.a.e.i.j` @type ^`java.util.List` := v9 @kind object;
  #L07fcd4.  return @kind void;
}
procedure `boolean` `d`(`a.a.e.i` v2 @kind this, `a.a.e.b` v3 @kind object) @signature `La/a/e/i;.d:(La/a/e/b;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07fce8.  v0:= 0I;
  #L07fcea.  v1:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L07fcee.  if v1 != 0 then goto L07fd0a;
  #L07fcf2.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07fcf8.  v1:= temp;
  #L07fcfa.  if v1 == 0 then goto L07fd0a;
  #L07fcfe.  v0:= new `java.lang.AssertionError`;
  #L07fd02.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07fd08.  throw v0;
  #L07fd0a.  @monitorenter v2
  #Try_start0.  
  #L07fd0c.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L07fd10.  if v1 == 0 then goto L07fd18;
  #L07fd14.  @monitorexit v2
  #L07fd16.  return v0;
  #L07fd18.  v1:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L07fd1c.  v1:= v1.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L07fd20.  if v1 == 0 then goto L07fd3a;
  #L07fd24.  v1:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L07fd28.  v1:= v1.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L07fd2c.  if v1 == 0 then goto L07fd3a;
  #L07fd30.  @monitorexit v2
  #L07fd32.  goto L07fd16;
  #L07fd34.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07fd36.  @monitorexit v2
  #Try_end0.  
  #L07fd38.  throw v0;
  #Try_start1.  
  #L07fd3a.  v2.`a.a.e.i.h` @type ^`a.a.e.b` := v3 @kind object;
  #L07fd3e.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L07fd44.  @monitorexit v2
  #Try_end1.  
  #L07fd46.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07fd4a.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L07fd4e.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L07fd54.  v0:= 1I;
  #L07fd56.  goto L07fd16;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07fd34;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07fd34;
}
procedure `int` `a`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.a:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07fd7c.  v0:= v1.`a.a.e.i.c` @type ^`int`;
  #L07fd80.  return v0;
}
procedure `void` `a`(`a.a.e.i` v3 @kind this, `long` v4 ) @signature `La/a/e/i;.a:(J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L07fd94.  v0:= v3.`a.a.e.i.b` @type ^`long` @kind wide;
  #L07fd98.  v0:= v0 + v4 @kind long;
  #L07fd9a.  v3.`a.a.e.i.b` @type ^`long` := v0 @kind wide;
  #L07fd9e.  v0:= 0L;
  #L07fda2.  v0:= lcmp(v4, v0);
  #L07fda6.  if v0 <= 0 then goto L07fdb0;
  #L07fdaa.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L07fdb0.  return @kind void;
}
procedure `void` `a`(`a.a.e.i` v2 @kind this, `a.a.e.b` v3 @kind object) @signature `La/a/e/i;.a:(La/a/e/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07fdc4.  call temp:= `d`(v2, v3) @signature `La/a/e/i;.d:(La/a/e/b;)Z` @kind direct;
  #L07fdca.  v0:= temp;
  #L07fdcc.  if v0 != 0 then goto L07fdd2;
  #L07fdd0.  return @kind void;
  #L07fdd2.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07fdd6.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L07fdda.  call `b`(v0, v1, v3) @signature `La/a/e/g;.b:(ILa/a/e/b;)V` @kind virtual;
  #L07fde0.  goto L07fdd0;
}
procedure `void` `a`(`a.a.e.i` v4 @kind this, `b.e` v5 @kind object, `int` v6 ) @signature `La/a/e/i;.a:(Lb/e;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07fdf4.  v0:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L07fdf8.  if v0 != 0 then goto L07fe14;
  #L07fdfc.  call temp:= `holdsLock`(v4) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07fe02.  v0:= temp;
  #L07fe04.  if v0 == 0 then goto L07fe14;
  #L07fe08.  v0:= new `java.lang.AssertionError`;
  #L07fe0c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07fe12.  throw v0;
  #L07fe14.  v0:= v4.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L07fe18.  v2:= (`long`) v6 @kind i2l;
  #L07fe1a.  call `a`(v0, v5, v2) @signature `La/a/e/i$b;.a:(Lb/e;J)V` @kind virtual;
  #L07fe20.  return @kind void;
}
procedure `void` `a`(`a.a.e.i` v3 @kind this, `java.util.List` v4 @kind object) @signature `La/a/e/i;.a:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L07fe34.  v0:= 1I;
  #L07fe36.  v1:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L07fe3a.  if v1 != 0 then goto L07fe56;
  #L07fe3e.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07fe44.  v1:= temp;
  #L07fe46.  if v1 == 0 then goto L07fe56;
  #L07fe4a.  v0:= new `java.lang.AssertionError`;
  #L07fe4e.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07fe54.  throw v0;
  #L07fe56.  @monitorenter v3
  #L07fe58.  v1:= 1I;
  #Try_start0.  
  #L07fe5a.  v3.`a.a.e.i.l` @type ^`boolean` := v1 @kind boolean;
  #L07fe5e.  v1:= v3.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L07fe62.  if v1 != 0 then goto L07fe8e;
  #L07fe66.  v3.`a.a.e.i.k` @type ^`java.util.List` := v4 @kind object;
  #L07fe6a.  call temp:= `b`(v3) @signature `La/a/e/i;.b:()Z` @kind virtual;
  #L07fe70.  v0:= temp;
  #L07fe72.  call `notifyAll`(v3) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L07fe78.  @monitorexit v3
  #Try_end0.  
  #L07fe7a.  if v0 != 0 then goto L07fe8c;
  #L07fe7e.  v0:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07fe82.  v1:= v3.`a.a.e.i.c` @type ^`int`;
  #L07fe86.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L07fe8c.  return @kind void;
  #Try_start1.  
  #L07fe8e.  v1:= new `java.util.ArrayList`;
  #L07fe92.  call `<init>`(v1) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L07fe98.  v2:= v3.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L07fe9c.  call temp:= `addAll`(v1, v2) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L07fea2.  v2:= 0I;
  #L07fea4.  call temp:= `add`(v1, v2) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07feaa.  call temp:= `addAll`(v1, v4) @signature `Ljava/util/List;.addAll:(Ljava/util/Collection;)Z` @kind interface;
  #L07feb0.  v3.`a.a.e.i.k` @type ^`java.util.List` := v1 @kind object;
  #L07feb4.  goto L07fe78;
  #L07feb6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07feb8.  @monitorexit v3
  #Try_end1.  
  #L07feba.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07feb6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07feb6;
}
procedure `void` `b`(`a.a.e.i` v2 @kind this, `a.a.e.b` v3 @kind object) @signature `La/a/e/i;.b:(La/a/e/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07fee0.  call temp:= `d`(v2, v3) @signature `La/a/e/i;.d:(La/a/e/b;)Z` @kind direct;
  #L07fee6.  v0:= temp;
  #L07fee8.  if v0 != 0 then goto L07feee;
  #L07feec.  return @kind void;
  #L07feee.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07fef2.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L07fef6.  call `a`(v0, v1, v3) @signature `La/a/e/g;.a:(ILa/a/e/b;)V` @kind virtual;
  #L07fefc.  goto L07feec;
}
procedure `boolean` `b`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07ff10.  v0:= 0I;
  #L07ff12.  @monitorenter v2
  #Try_start0.  
  #L07ff14.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #Try_end0.  
  #L07ff18.  if v1 == 0 then goto L07ff20;
  #L07ff1c.  @monitorexit v2
  #L07ff1e.  return v0;
  #Try_start1.  
  #L07ff20.  v1:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L07ff24.  v1:= v1.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L07ff28.  if v1 != 0 then goto L07ff38;
  #L07ff2c.  v1:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L07ff30.  v1:= v1.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L07ff34.  if v1 == 0 then goto L07ff58;
  #L07ff38.  v1:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L07ff3c.  v1:= v1.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L07ff40.  if v1 != 0 then goto L07ff50;
  #L07ff44.  v1:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L07ff48.  v1:= v1.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L07ff4c.  if v1 == 0 then goto L07ff58;
  #L07ff50.  v1:= v2.`a.a.e.i.l` @type ^`boolean` @kind boolean;
  #Try_end1.  
  #L07ff54.  if v1 != 0 then goto L07ff1c;
  #L07ff58.  v0:= 1I;
  #L07ff5a.  goto L07ff1c;
  #L07ff5c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07ff5e.  @monitorexit v2
  #L07ff60.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07ff5c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07ff5c;
}
procedure `void` `c`(`a.a.e.i` v1 @kind this, `a.a.e.b` v2 @kind object) @signature `La/a/e/i;.c:(La/a/e/b;)V` @AccessFlag  {
    temp;
    v0;

  #L07ff88.  @monitorenter v1
  #Try_start0.  
  #L07ff8a.  v0:= v1.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L07ff8e.  if v0 != 0 then goto L07ff9c;
  #L07ff92.  v1.`a.a.e.i.h` @type ^`a.a.e.b` := v2 @kind object;
  #L07ff96.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #Try_end0.  
  #L07ff9c.  @monitorexit v1
  #L07ff9e.  return @kind void;
  #L07ffa0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07ffa2.  @monitorexit v1
  #L07ffa4.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07ffa0;
}
procedure `boolean` `c`(`a.a.e.i` v4 @kind this) @signature `La/a/e/i;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07ffc4.  v2:= 0I;
  #L07ffc6.  v1:= 1I;
  #L07ffc8.  v0:= v4.`a.a.e.i.c` @type ^`int`;
  #L07ffcc.  v0:= v0 ^& 1;
  #L07ffd0.  if v0 != v1 then goto L07ffe4;
  #L07ffd4.  v0:= v1;
  #L07ffd6.  v3:= v4.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07ffda.  v3:= v3.`a.a.e.g.b` @type ^`boolean` @kind boolean;
  #L07ffde.  if v3 != v0 then goto L07ffe8;
  #L07ffe2.  return v1;
  #L07ffe4.  v0:= v2;
  #L07ffe6.  goto L07ffd6;
  #L07ffe8.  v1:= v2;
  #L07ffea.  goto L07ffe2;
}
procedure `java.util.List` `d`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.d:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07fffc.  @monitorenter v2
  #Try_start0.  
  #L07fffe.  call temp:= `c`(v2) @signature `La/a/e/i;.c:()Z` @kind virtual;
  #L080004.  v0:= temp;
  #L080006.  if v0 != 0 then goto L080020;
  #L08000a.  v0:= new `java.lang.IllegalStateException`;
  #L08000e.  v1:= "servers cannot read response headers" @kind object;
  #L080012.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080018.  throw v0;
  #Try_end0.  
  #L08001a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08001c.  @monitorexit v2
  #L08001e.  throw v0;
  #Try_start1.  
  #L080020.  v0:= v2.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L080024.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_end1.  
  #Try_start2.  
  #L08002a.  v0:= v2.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L08002e.  if v0 != 0 then goto L080050;
  #L080032.  v0:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L080036.  if v0 != 0 then goto L080050;
  #L08003a.  call `l`(v2) @signature `La/a/e/i;.l:()V` @kind virtual;
  #Try_end2.  
  #L080040.  goto L08002a;
  #L080042.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L080044.  v1:= v2.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L080048.  call `b`(v1) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L08004e.  throw v0;
  #L080050.  v0:= v2.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L080054.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L08005a.  v0:= v2.`a.a.e.i.k` @type ^`java.util.List` @kind object;
  #L08005e.  if v0 == 0 then goto L08006c;
  #L080062.  v1:= 0I;
  #L080064.  v2.`a.a.e.i.k` @type ^`java.util.List` := v1 @kind object;
  #Try_end3.  
  #L080068.  @monitorexit v2
  #L08006a.  return v0 @kind object;
  #Try_start4.  
  #L08006c.  v0:= new `a.a.e.o`;
  #L080070.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L080074.  call `<init>`(v0, v1) @signature `La/a/e/o;.<init>:(La/a/e/b;)V` @kind direct;
  #L08007a.  throw v0;
  #Try_end4.  
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08001a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08001a;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L080042;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L08001a;
  catch `java.lang.Throwable` @[Try_start4..Try_end4] goto L08001a;
}
procedure `b.s` `e`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.e:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0800bc.  v0:= v1.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L0800c0.  return v0 @kind object;
}
procedure `b.s` `f`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.f:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0800d4.  v0:= v1.`a.a.e.i.g` @type ^`a.a.e.i$c` @kind object;
  #L0800d8.  return v0 @kind object;
}
procedure `b.r` `g`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.g:()Lb/r;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0800ec.  v0:= v1.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L0800f0.  return v0 @kind object;
}
procedure `b.q` `h`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.h:()Lb/q;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L080104.  @monitorenter v2
  #Try_start0.  
  #L080106.  v0:= v2.`a.a.e.i.l` @type ^`boolean` @kind boolean;
  #L08010a.  if v0 != 0 then goto L080130;
  #L08010e.  call temp:= `c`(v2) @signature `La/a/e/i;.c:()Z` @kind virtual;
  #L080114.  v0:= temp;
  #L080116.  if v0 != 0 then goto L080130;
  #L08011a.  v0:= new `java.lang.IllegalStateException`;
  #L08011e.  v1:= "reply before requesting the sink" @kind object;
  #L080122.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080128.  throw v0;
  #L08012a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L08012c.  @monitorexit v2
  #Try_end0.  
  #L08012e.  throw v0;
  #Try_start1.  
  #L080130.  @monitorexit v2
  #Try_end1.  
  #L080132.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L080136.  return v0 @kind object;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08012a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08012a;
}
procedure `void` `i`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.i:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L08015c.  v0:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L080160.  if v0 != 0 then goto L08017c;
  #L080164.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L08016a.  v0:= temp;
  #L08016c.  if v0 == 0 then goto L08017c;
  #L080170.  v0:= new `java.lang.AssertionError`;
  #L080174.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L08017a.  throw v0;
  #L08017c.  @monitorenter v2
  #Try_start0.  
  #L08017e.  v0:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L080182.  v1:= 1I;
  #L080184.  v0.`a.a.e.i$b.b` @type ^`boolean` := v1 @kind boolean;
  #L080188.  call temp:= `b`(v2) @signature `La/a/e/i;.b:()Z` @kind virtual;
  #L08018e.  v0:= temp;
  #L080190.  call `notifyAll`(v2) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L080196.  @monitorexit v2
  #Try_end0.  
  #L080198.  if v0 != 0 then goto L0801aa;
  #L08019c.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L0801a0.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L0801a4.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L0801aa.  return @kind void;
  #L0801ac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L0801ae.  @monitorexit v2
  #Try_end1.  
  #L0801b0.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0801ac;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0801ac;
}
procedure `void` `j`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.j:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L0801d8.  v0:= `@@a.a.e.i.i` @type ^`boolean` @kind boolean;
  #L0801dc.  if v0 != 0 then goto L0801f8;
  #L0801e0.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L0801e6.  v0:= temp;
  #L0801e8.  if v0 == 0 then goto L0801f8;
  #L0801ec.  v0:= new `java.lang.AssertionError`;
  #L0801f0.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0801f6.  throw v0;
  #L0801f8.  @monitorenter v2
  #Try_start0.  
  #L0801fa.  v0:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L0801fe.  v0:= v0.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L080202.  if v0 != 0 then goto L080246;
  #L080206.  v0:= v2.`a.a.e.i.m` @type ^`a.a.e.i$b` @kind object;
  #L08020a.  v0:= v0.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L08020e.  if v0 == 0 then goto L080246;
  #L080212.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L080216.  v0:= v0.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L08021a.  if v0 != 0 then goto L08022a;
  #L08021e.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L080222.  v0:= v0.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L080226.  if v0 == 0 then goto L080246;
  #L08022a.  v0:= 1I;
  #L08022c.  call temp:= `b`(v2) @signature `La/a/e/i;.b:()Z` @kind virtual;
  #L080232.  v1:= temp;
  #L080234.  @monitorexit v2
  #Try_end0.  
  #L080236.  if v0 == 0 then goto L080250;
  #L08023a.  v0:= `@@a.a.e.b.f` @type ^`a.a.e.b` @kind object;
  #L08023e.  call `a`(v2, v0) @signature `La/a/e/i;.a:(La/a/e/b;)V` @kind virtual;
  #L080244.  return @kind void;
  #L080246.  v0:= 0I;
  #L080248.  goto L08022c;
  #L08024a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L08024c.  @monitorexit v2
  #Try_end1.  
  #L08024e.  throw v0;
  #L080250.  if v1 != 0 then goto L080244;
  #L080254.  v0:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L080258.  v1:= v2.`a.a.e.i.c` @type ^`int`;
  #L08025c.  call temp:= `b`(v0, v1) @signature `La/a/e/g;.b:(I)La/a/e/i;` @kind virtual;
  #L080262.  goto L080244;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L08024a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L08024a;
}
procedure `void` `k`(`a.a.e.i` v2 @kind this) @signature `La/a/e/i;.k:()V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L080288.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L08028c.  v0:= v0.`a.a.e.i$a.a` @type ^`boolean` @kind boolean;
  #L080290.  if v0 == 0 then goto L0802a4;
  #L080294.  v0:= new `java.io.IOException`;
  #L080298.  v1:= "stream closed" @kind object;
  #L08029c.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0802a2.  throw v0;
  #L0802a4.  v0:= v2.`a.a.e.i.e` @type ^`a.a.e.i$a` @kind object;
  #L0802a8.  v0:= v0.`a.a.e.i$a.b` @type ^`boolean` @kind boolean;
  #L0802ac.  if v0 == 0 then goto L0802c0;
  #L0802b0.  v0:= new `java.io.IOException`;
  #L0802b4.  v1:= "stream finished" @kind object;
  #L0802b8.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0802be.  throw v0;
  #L0802c0.  v0:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L0802c4.  if v0 == 0 then goto L0802d8;
  #L0802c8.  v0:= new `a.a.e.o`;
  #L0802cc.  v1:= v2.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L0802d0.  call `<init>`(v0, v1) @signature `La/a/e/o;.<init>:(La/a/e/b;)V` @kind direct;
  #L0802d6.  throw v0;
  #L0802d8.  return @kind void;
}
procedure `void` `l`(`a.a.e.i` v1 @kind this) @signature `La/a/e/i;.l:()V` @AccessFlag  {
    temp;
    v0;

  #Try_start0.  
  #L0802ec.  call `wait`(v1) @signature `Ljava/lang/Object;.wait:()V` @kind virtual;
  #Try_end0.  
  #L0802f2.  return @kind void;
  #L0802f4.  v0:= Exception @type ^`java.lang.InterruptedException` @kind object;
  #L0802f6.  v0:= new `java.io.InterruptedIOException`;
  #L0802fa.  call `<init>`(v0) @signature `Ljava/io/InterruptedIOException;.<init>:()V` @kind direct;
  #L080300.  throw v0;
  catch `java.lang.InterruptedException` @[Try_start0..Try_end0] goto L0802f4;
}
