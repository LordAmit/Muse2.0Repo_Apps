record `a.a.e.d$b` @kind class @AccessFlag FINAL {
  `int` `a.a.e.d$b.a` @AccessFlag ;
  `int` `a.a.e.d$b.b` @AccessFlag ;
  `a.a.e.c`[] `a.a.e.d$b.c` @AccessFlag ;
  `int` `a.a.e.d$b.d` @AccessFlag ;
  `int` `a.a.e.d$b.e` @AccessFlag ;
  `int` `a.a.e.d$b.f` @AccessFlag ;
  `b.c` `a.a.e.d$b.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.a.e.d$b.h` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.e.d$b.i` @AccessFlag PRIVATE;
  `boolean` `a.a.e.d$b.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.e.d$b` v2 @kind this, `int` v3 , `boolean` v4 , `b.c` v5 @kind object) @signature `La/a/e/d$b;.<init>:(IZLb/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07b250.  v1:= 0I;
  #L07b252.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07b258.  v0:= 2147483647I;
  #L07b25e.  v2.`a.a.e.d$b.i` @type ^`int` := v0;
  #L07b262.  v0:= 8I;
  #L07b266.  v0:= new `a.a.e.c`[v0];
  #L07b26a.  v2.`a.a.e.d$b.c` @type ^`a.a.e.c`[] := v0 @kind object;
  #L07b26e.  v0:= v2.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b272.  v0:= length @variable v0;
  #L07b274.  v0:= v0 + -1;
  #L07b278.  v2.`a.a.e.d$b.d` @type ^`int` := v0;
  #L07b27c.  v2.`a.a.e.d$b.e` @type ^`int` := v1;
  #L07b280.  v2.`a.a.e.d$b.f` @type ^`int` := v1;
  #L07b284.  v2.`a.a.e.d$b.a` @type ^`int` := v3;
  #L07b288.  v2.`a.a.e.d$b.b` @type ^`int` := v3;
  #L07b28c.  v2.`a.a.e.d$b.h` @type ^`boolean` := v4 @kind boolean;
  #L07b290.  v2.`a.a.e.d$b.g` @type ^`b.c` := v5 @kind object;
  #L07b294.  return @kind void;
}
procedure `void` `<init>`(`a.a.e.d$b` v2 @kind this, `b.c` v3 @kind object) @signature `La/a/e/d$b;.<init>:(Lb/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07b2a8.  v0:= 4096I;
  #L07b2ac.  v1:= 1I;
  #L07b2ae.  call `<init>`(v2, v0, v1, v3) @signature `La/a/e/d$b;.<init>:(IZLb/c;)V` @kind direct;
  #L07b2b4.  return @kind void;
}
procedure `void` `a`(`a.a.e.d$b` v3 @kind this) @signature `La/a/e/d$b;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07b2c8.  v2:= 0I;
  #L07b2ca.  v0:= v3.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b2ce.  v1:= 0I;
  #L07b2d0.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L07b2d6.  v0:= v3.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b2da.  v0:= length @variable v0;
  #L07b2dc.  v0:= v0 + -1;
  #L07b2e0.  v3.`a.a.e.d$b.d` @type ^`int` := v0;
  #L07b2e4.  v3.`a.a.e.d$b.e` @type ^`int` := v2;
  #L07b2e8.  v3.`a.a.e.d$b.f` @type ^`int` := v2;
  #L07b2ec.  return @kind void;
}
procedure `void` `a`(`a.a.e.d$b` v6 @kind this, `a.a.e.c` v7 @kind object) @signature `La/a/e/d$b;.a:(La/a/e/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07b300.  v0:= v7.`a.a.e.c.i` @type ^`int`;
  #L07b304.  v1:= v6.`a.a.e.d$b.b` @type ^`int`;
  #L07b308.  if v0 <= v1 then goto L07b314;
  #L07b30c.  call `a`(v6) @signature `La/a/e/d$b;.a:()V` @kind direct;
  #L07b312.  return @kind void;
  #L07b314.  v1:= v6.`a.a.e.d$b.f` @type ^`int`;
  #L07b318.  v1:= v1 + v0 @kind int;
  #L07b31a.  v2:= v6.`a.a.e.d$b.b` @type ^`int`;
  #L07b31e.  v1:= v1 - v2 @kind int;
  #L07b320.  call temp:= `b`(v6, v1) @signature `La/a/e/d$b;.b:(I)I` @kind direct;
  #L07b326.  v1:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L07b32a.  v1:= v1 + 1;
  #L07b32e.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b332.  v2:= length @variable v2;
  #L07b334.  if v1 <= v2 then goto L07b370;
  #L07b338.  v1:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b33c.  v1:= length @variable v1;
  #L07b33e.  v1:= v1 * 2;
  #L07b342.  v1:= new `a.a.e.c`[v1];
  #L07b346.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b34a.  v3:= 0I;
  #L07b34c.  v4:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b350.  v4:= length @variable v4;
  #L07b352.  v5:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b356.  v5:= length @variable v5;
  #L07b358.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L07b35e.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b362.  v2:= length @variable v2;
  #L07b364.  v2:= v2 + -1;
  #L07b368.  v6.`a.a.e.d$b.d` @type ^`int` := v2;
  #L07b36c.  v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] := v1 @kind object;
  #L07b370.  v1:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07b374.  v2:= v1 + -1;
  #L07b378.  v6.`a.a.e.d$b.d` @type ^`int` := v2;
  #L07b37c.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b380.  v2[v1]:= v7 @kind object;
  #L07b384.  v1:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L07b388.  v1:= v1 + 1;
  #L07b38c.  v6.`a.a.e.d$b.e` @type ^`int` := v1;
  #L07b390.  v1:= v6.`a.a.e.d$b.f` @type ^`int`;
  #L07b394.  v0:= v0 + v1 @kind int;
  #L07b396.  v6.`a.a.e.d$b.f` @type ^`int` := v0;
  #L07b39a.  goto L07b312;
}
procedure `int` `b`(`a.a.e.d$b` v6 @kind this, `int` v7 ) @signature `La/a/e/d$b;.b:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07b3ac.  v1:= 0I;
  #L07b3ae.  if v7 <= 0 then goto L07b44e;
  #L07b3b2.  v0:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b3b6.  v0:= length @variable v0;
  #L07b3b8.  v0:= v0 + -1;
  #L07b3bc.  v2:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07b3c0.  if v0 < v2 then goto L07b402;
  #L07b3c4.  if v7 <= 0 then goto L07b402;
  #L07b3c8.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b3cc.  v2:= v2[v0] @kind object;
  #L07b3d0.  v2:= v2.`a.a.e.c.i` @type ^`int`;
  #L07b3d4.  v7:= v7 - v2 @kind int;
  #L07b3d6.  v2:= v6.`a.a.e.d$b.f` @type ^`int`;
  #L07b3da.  v3:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b3de.  v3:= v3[v0] @kind object;
  #L07b3e2.  v3:= v3.`a.a.e.c.i` @type ^`int`;
  #L07b3e6.  v2:= v2 - v3 @kind int;
  #L07b3e8.  v6.`a.a.e.d$b.f` @type ^`int` := v2;
  #L07b3ec.  v2:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L07b3f0.  v2:= v2 + -1;
  #L07b3f4.  v6.`a.a.e.d$b.e` @type ^`int` := v2;
  #L07b3f8.  v1:= v1 + 1;
  #L07b3fc.  v0:= v0 + -1;
  #L07b400.  goto L07b3bc;
  #L07b402.  v0:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b406.  v2:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07b40a.  v2:= v2 + 1;
  #L07b40e.  v3:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b412.  v4:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07b416.  v4:= v4 + 1;
  #L07b41a.  v4:= v4 + v1 @kind int;
  #L07b41c.  v5:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L07b420.  call `arraycopy`(v0, v2, v3, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L07b426.  v0:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b42a.  v2:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07b42e.  v2:= v2 + 1;
  #L07b432.  v3:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07b436.  v3:= v3 + 1;
  #L07b43a.  v3:= v3 + v1 @kind int;
  #L07b43c.  v4:= 0I;
  #L07b43e.  call `fill`(v0, v2, v3, v4) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L07b444.  v0:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07b448.  v0:= v0 + v1 @kind int;
  #L07b44a.  v6.`a.a.e.d$b.d` @type ^`int` := v0;
  #L07b44e.  return v1;
}
procedure `void` `b`(`a.a.e.d$b` v2 @kind this) @signature `La/a/e/d$b;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07b460.  v0:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L07b464.  v1:= v2.`a.a.e.d$b.f` @type ^`int`;
  #L07b468.  if v0 >= v1 then goto L07b47a;
  #L07b46c.  v0:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L07b470.  if v0 != 0 then goto L07b47c;
  #L07b474.  call `a`(v2) @signature `La/a/e/d$b;.a:()V` @kind direct;
  #L07b47a.  return @kind void;
  #L07b47c.  v0:= v2.`a.a.e.d$b.f` @type ^`int`;
  #L07b480.  v1:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L07b484.  v0:= v0 - v1 @kind int;
  #L07b486.  call temp:= `b`(v2, v0) @signature `La/a/e/d$b;.b:(I)I` @kind direct;
  #L07b48c.  goto L07b47a;
}
procedure `void` `a`(`a.a.e.d$b` v2 @kind this, `int` v3 ) @signature `La/a/e/d$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L07b4a0.  v2.`a.a.e.d$b.a` @type ^`int` := v3;
  #L07b4a4.  v0:= 16384I;
  #L07b4a8.  call temp:= `min`(v3, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L07b4ae.  v0:= temp;
  #L07b4b0.  v1:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L07b4b4.  if v1 != v0 then goto L07b4ba;
  #L07b4b8.  return @kind void;
  #L07b4ba.  v1:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L07b4be.  if v0 >= v1 then goto L07b4d2;
  #L07b4c2.  v1:= v2.`a.a.e.d$b.i` @type ^`int`;
  #L07b4c6.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L07b4cc.  v1:= temp;
  #L07b4ce.  v2.`a.a.e.d$b.i` @type ^`int` := v1;
  #L07b4d2.  v1:= 1I;
  #L07b4d4.  v2.`a.a.e.d$b.j` @type ^`boolean` := v1 @kind boolean;
  #L07b4d8.  v2.`a.a.e.d$b.b` @type ^`int` := v0;
  #L07b4dc.  call `b`(v2) @signature `La/a/e/d$b;.b:()V` @kind direct;
  #L07b4e2.  goto L07b4b8;
}
procedure `void` `a`(`a.a.e.d$b` v3 @kind this, `int` v4 , `int` v5 , `int` v6 ) @signature `La/a/e/d$b;.a:(III)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L07b4f4.  if v4 >= v5 then goto L07b508;
  #L07b4f8.  v0:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07b4fc.  v1:= v6 ^| v4 @kind int;
  #L07b500.  call temp:= `b`(v0, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L07b506.  return @kind void;
  #L07b508.  v0:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07b50c.  v1:= v6 ^| v5 @kind int;
  #L07b510.  call temp:= `b`(v0, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L07b516.  v0:= v4 - v5 @kind int;
  #L07b51a.  v1:= 128I;
  #L07b51e.  if v0 < v1 then goto L07b53a;
  #L07b522.  v1:= v0 ^& 127;
  #L07b526.  v2:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07b52a.  v1:= v1 ^| 128;
  #L07b52e.  call temp:= `b`(v2, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L07b534.  v0:= v0 ^>> 7;
  #L07b538.  goto L07b51a;
  #L07b53a.  v1:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07b53e.  call temp:= `b`(v1, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L07b544.  goto L07b506;
}
procedure `void` `a`(`a.a.e.d$b` v4 @kind this, `b.f` v5 @kind object) @signature `La/a/e/d$b;.a:(Lb/f;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07b558.  v3:= 127I;
  #L07b55c.  v0:= v4.`a.a.e.d$b.h` @type ^`boolean` @kind boolean;
  #L07b560.  if v0 == 0 then goto L07b5be;
  #L07b564.  call temp:= `a`() @signature `La/a/e/k;.a:()La/a/e/k;` @kind static;
  #L07b56a.  v0:= temp @kind object;
  #L07b56c.  call temp:= `a`(v0, v5) @signature `La/a/e/k;.a:(Lb/f;)I` @kind virtual;
  #L07b572.  v0:= temp;
  #L07b574.  call temp:= `g`(v5) @signature `Lb/f;.g:()I` @kind virtual;
  #L07b57a.  v1:= temp;
  #L07b57c.  if v0 >= v1 then goto L07b5be;
  #L07b580.  v0:= new `b.c`;
  #L07b584.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L07b58a.  call temp:= `a`() @signature `La/a/e/k;.a:()La/a/e/k;` @kind static;
  #L07b590.  v1:= temp @kind object;
  #L07b592.  call `a`(v1, v5, v0) @signature `La/a/e/k;.a:(Lb/f;Lb/d;)V` @kind virtual;
  #L07b598.  call temp:= `n`(v0) @signature `Lb/c;.n:()Lb/f;` @kind virtual;
  #L07b59e.  v0:= temp @kind object;
  #L07b5a0.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L07b5a6.  v1:= temp;
  #L07b5a8.  v2:= 128I;
  #L07b5ac.  call `a`(v4, v1, v3, v2) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07b5b2.  v1:= v4.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07b5b6.  call temp:= `a`(v1, v0) @signature `Lb/c;.a:(Lb/f;)Lb/c;` @kind virtual;
  #L07b5bc.  return @kind void;
  #L07b5be.  call temp:= `g`(v5) @signature `Lb/f;.g:()I` @kind virtual;
  #L07b5c4.  v0:= temp;
  #L07b5c6.  v1:= 0I;
  #L07b5c8.  call `a`(v4, v0, v3, v1) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07b5ce.  v0:= v4.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07b5d2.  call temp:= `a`(v0, v5) @signature `Lb/c;.a:(Lb/f;)Lb/c;` @kind virtual;
  #L07b5d8.  goto L07b5bc;
}
procedure `void` `a`(`a.a.e.d$b` v13 @kind this, `java.util.List` v14 @kind object) @signature `La/a/e/d$b;.a:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L07b5ec.  v12:= 64I;
  #L07b5f0.  v3:= 32I;
  #L07b5f4.  v2:= 31I;
  #L07b5f8.  v6:= 0I;
  #L07b5fa.  v4:= -1I;
  #L07b5fc.  v0:= v13.`a.a.e.d$b.j` @type ^`boolean` @kind boolean;
  #L07b600.  if v0 == 0 then goto L07b632;
  #L07b604.  v0:= v13.`a.a.e.d$b.i` @type ^`int`;
  #L07b608.  v1:= v13.`a.a.e.d$b.b` @type ^`int`;
  #L07b60c.  if v0 >= v1 then goto L07b61a;
  #L07b610.  v0:= v13.`a.a.e.d$b.i` @type ^`int`;
  #L07b614.  call `a`(v13, v0, v2, v3) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07b61a.  v13.`a.a.e.d$b.j` @type ^`boolean` := v6 @kind boolean;
  #L07b61e.  v0:= 2147483647I;
  #L07b624.  v13.`a.a.e.d$b.i` @type ^`int` := v0;
  #L07b628.  v0:= v13.`a.a.e.d$b.b` @type ^`int`;
  #L07b62c.  call `a`(v13, v0, v2, v3) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07b632.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07b638.  v7:= temp;
  #L07b63a.  v5:= v6;
  #L07b63c.  if v5 >= v7 then goto L07b7bc;
  #L07b640.  call temp:= `get`(v14, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07b646.  v0:= temp @kind object;
  #L07b648.  v0:= (`a.a.e.c`) v0 @kind object;
  #L07b64c.  v1:= v0.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L07b650.  call temp:= `f`(v1) @signature `Lb/f;.f:()Lb/f;` @kind virtual;
  #L07b656.  v8:= temp @kind object;
  #L07b658.  v9:= v0.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L07b65c.  v1:= `@@a.a.e.d.b` @type ^`java.util.Map` @kind object;
  #L07b660.  call temp:= `get`(v1, v8) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L07b666.  v1:= temp @kind object;
  #L07b668.  v1:= (`java.lang.Integer`) v1 @kind object;
  #L07b66c.  if v1 == 0 then goto L07b7c4;
  #L07b670.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L07b676.  v1:= temp;
  #L07b678.  v1:= v1 + 1;
  #L07b67c.  v2:= 1I;
  #L07b67e.  if v1 <= v2 then goto L07b7be;
  #L07b682.  v2:= 8I;
  #L07b686.  if v1 >= v2 then goto L07b7be;
  #L07b68a.  v2:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07b68e.  v3:= v1 + -1;
  #L07b692.  v2:= v2[v3] @kind object;
  #L07b696.  v2:= v2.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L07b69a.  call temp:= `a`(v2, v9) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07b6a0.  v2:= temp;
  #L07b6a2.  if v2 == 0 then goto L07b718;
  #L07b6a6.  v2:= v1;
  #L07b6a8.  if v2 != v4 then goto L07b6fe;
  #L07b6ac.  v3:= v13.`a.a.e.d$b.d` @type ^`int`;
  #L07b6b0.  v3:= v3 + 1;
  #L07b6b4.  v10:= v13.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b6b8.  v10:= length @variable v10;
  #L07b6ba.  if v3 >= v10 then goto L07b6fe;
  #L07b6be.  v11:= v13.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b6c2.  v11:= v11[v3] @kind object;
  #L07b6c6.  v11:= v11.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L07b6ca.  call temp:= `a`(v11, v8) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07b6d0.  v11:= temp;
  #L07b6d2.  if v11 == 0 then goto L07b74a;
  #L07b6d6.  v11:= v13.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07b6da.  v11:= v11[v3] @kind object;
  #L07b6de.  v11:= v11.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L07b6e2.  call temp:= `a`(v11, v9) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07b6e8.  v11:= temp;
  #L07b6ea.  if v11 == 0 then goto L07b736;
  #L07b6ee.  v2:= v13.`a.a.e.d$b.d` @type ^`int`;
  #L07b6f2.  v2:= v3 - v2 @kind int;
  #L07b6f6.  v3:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07b6fa.  v3:= length @variable v3;
  #L07b6fc.  v2:= v2 + v3 @kind int;
  #L07b6fe.  if v2 == v4 then goto L07b750;
  #L07b702.  v0:= 127I;
  #L07b706.  v1:= 128I;
  #L07b70a.  call `a`(v13, v2, v0, v1) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07b710.  v0:= v5 + 1;
  #L07b714.  v5:= v0;
  #L07b716.  goto L07b63c;
  #L07b718.  v2:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07b71c.  v2:= v2[v1] @kind object;
  #L07b720.  v2:= v2.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L07b724.  call temp:= `a`(v2, v9) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07b72a.  v2:= temp;
  #L07b72c.  if v2 == 0 then goto L07b7be;
  #L07b730.  v2:= v1 + 1;
  #L07b734.  goto L07b6a8;
  #L07b736.  if v1 != v4 then goto L07b74a;
  #L07b73a.  v1:= v13.`a.a.e.d$b.d` @type ^`int`;
  #L07b73e.  v1:= v3 - v1 @kind int;
  #L07b742.  v11:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07b746.  v11:= length @variable v11;
  #L07b748.  v1:= v1 + v11 @kind int;
  #L07b74a.  v3:= v3 + 1;
  #L07b74e.  goto L07b6ba;
  #L07b750.  if v1 != v4 then goto L07b772;
  #L07b754.  v1:= v13.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07b758.  call temp:= `b`(v1, v12) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L07b75e.  call `a`(v13, v8) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L07b764.  call `a`(v13, v9) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L07b76a.  call `a`(v13, v0) @signature `La/a/e/d$b;.a:(La/a/e/c;)V` @kind direct;
  #L07b770.  goto L07b710;
  #L07b772.  v2:= `@@a.a.e.c.a` @type ^`b.f` @kind object;
  #L07b776.  call temp:= `a`(v8, v2) @signature `Lb/f;.a:(Lb/f;)Z` @kind virtual;
  #L07b77c.  v2:= temp;
  #L07b77e.  if v2 == 0 then goto L07b7a4;
  #L07b782.  v2:= `@@a.a.e.c.f` @type ^`b.f` @kind object;
  #L07b786.  call temp:= `equals`(v2, v8) @signature `Lb/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L07b78c.  v2:= temp;
  #L07b78e.  if v2 != 0 then goto L07b7a4;
  #L07b792.  v0:= 15I;
  #L07b796.  call `a`(v13, v1, v0, v6) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07b79c.  call `a`(v13, v9) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L07b7a2.  goto L07b710;
  #L07b7a4.  v2:= 63I;
  #L07b7a8.  call `a`(v13, v1, v2, v12) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07b7ae.  call `a`(v13, v9) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L07b7b4.  call `a`(v13, v0) @signature `La/a/e/d$b;.a:(La/a/e/c;)V` @kind direct;
  #L07b7ba.  goto L07b710;
  #L07b7bc.  return @kind void;
  #L07b7be.  v2:= v4;
  #L07b7c0.  goto L07b6a8;
  #L07b7c4.  v1:= v4;
  #L07b7c6.  v2:= v4;
  #L07b7c8.  goto L07b6a8;
}
