record `a.a.g.d` @kind class @AccessFlag  {
  `java.lang.Class` `a.a.g.d.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.a.g.d.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class`[] `a.a.g.d.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.g.d` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.Class`[] v3 @kind object) @signature `La/a/g/d;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L082944.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08294a.  v0.`a.a.g.d.a` @type ^`java.lang.Class` := v1 @kind object;
  #L08294e.  v0.`a.a.g.d.b` @type ^`java.lang.String` := v2 @kind object;
  #L082952.  v0.`a.a.g.d.c` @type ^`java.lang.Class`[] := v3 @kind object;
  #L082956.  return @kind void;
}
procedure `java.lang.reflect.Method` `a`(`a.a.g.d` v4 @kind this, `java.lang.Class` v5 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L082968.  v0:= 0I;
  #L08296a.  v1:= v4.`a.a.g.d.b` @type ^`java.lang.String` @kind object;
  #L08296e.  if v1 == 0 then goto L0829a6;
  #L082972.  v1:= v4.`a.a.g.d.b` @type ^`java.lang.String` @kind object;
  #L082976.  v2:= v4.`a.a.g.d.c` @type ^`java.lang.Class`[] @kind object;
  #L08297a.  call temp:= `a`(v5, v1, v2) @signature `La/a/g/d;.a:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind static;
  #L082980.  v1:= temp @kind object;
  #L082982.  if v1 == 0 then goto L0829a8;
  #L082986.  v2:= v4.`a.a.g.d.a` @type ^`java.lang.Class` @kind object;
  #L08298a.  if v2 == 0 then goto L0829a8;
  #L08298e.  v2:= v4.`a.a.g.d.a` @type ^`java.lang.Class` @kind object;
  #L082992.  call temp:= `getReturnType`(v1) @signature `Ljava/lang/reflect/Method;.getReturnType:()Ljava/lang/Class;` @kind virtual;
  #L082998.  v3:= temp @kind object;
  #L08299a.  call temp:= `isAssignableFrom`(v2, v3) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L0829a0.  v2:= temp;
  #L0829a2.  if v2 != 0 then goto L0829a8;
  #L0829a6.  return v0 @kind object;
  #L0829a8.  v0:= v1 @kind object;
  #L0829aa.  goto L0829a6;
}
procedure `java.lang.reflect.Method` `a`(`java.lang.Class` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.Class`[] v5 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Class;Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L0829bc.  v0:= 0I;
  #Try_start0.  
  #L0829be.  call temp:= `getMethod`(v3, v4, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #Try_end0.  
  #L0829c4.  v1:= temp @kind object;
  #Try_start1.  
  #L0829c6.  call temp:= `getModifiers`(v1) @signature `Ljava/lang/reflect/Method;.getModifiers:()I` @kind virtual;
  #Try_end1.  
  #L0829cc.  v2:= temp;
  #L0829ce.  v2:= v2 ^& 1;
  #L0829d2.  if v2 != 0 then goto L0829e2;
  #L0829d6.  return v0 @kind object;
  #L0829d8.  v1:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L0829da.  goto L0829d6;
  #L0829dc.  v0:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L0829de.  v0:= v1 @kind object;
  #L0829e0.  goto L0829d6;
  #L0829e2.  v0:= v1 @kind object;
  #L0829e4.  goto L0829d6;
  catch `java.lang.NoSuchMethodException` @[Try_start0..Try_end0] goto L0829d8;
  catch `java.lang.NoSuchMethodException` @[Try_start1..Try_end1] goto L0829dc;
}
procedure `java.lang.Object` `a`(`a.a.g.d` v2 @kind this, `java.lang.Object` v3 @kind object, `java.lang.Object`[] v4 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L082a14.  v0:= 0I;
  #L082a16.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L082a1c.  v1:= temp @kind object;
  #L082a1e.  call temp:= `a`(v2, v1) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L082a24.  v1:= temp @kind object;
  #L082a26.  if v1 != 0 then goto L082a2c;
  #L082a2a.  return v0 @kind object;
  #Try_start0.  
  #L082a2c.  call temp:= `invoke`(v1, v3, v4) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L082a32.  v0:= temp @kind object;
  #L082a34.  goto L082a2a;
  #L082a36.  v1:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L082a38.  goto L082a2a;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L082a36;
}
procedure `boolean` `a`(`a.a.g.d` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `La/a/g/d;.a:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L082a5c.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L082a62.  v0:= temp @kind object;
  #L082a64.  call temp:= `a`(v1, v0) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L082a6a.  v0:= temp @kind object;
  #L082a6c.  if v0 == 0 then goto L082a74;
  #L082a70.  v0:= 1I;
  #L082a72.  return v0;
  #L082a74.  v0:= 0I;
  #L082a76.  goto L082a72;
}
procedure `java.lang.Object` `b`(`a.a.g.d` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `La/a/g/d;.b:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L082a88.  call temp:= `a`(v3, v4, v5) @signature `La/a/g/d;.a:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L082a8e.  v0:= temp @kind object;
  #L082a90.  return v0 @kind object;
  #L082a92.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L082a94.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L082a9a.  v0:= temp @kind object;
  #L082a9c.  v1:= instanceof @variable v0 @type ^`java.lang.RuntimeException` @kind boolean;
  #L082aa0.  if v1 == 0 then goto L082aaa;
  #L082aa4.  v0:= (`java.lang.RuntimeException`) v0 @kind object;
  #L082aa8.  throw v0;
  #L082aaa.  v1:= new `java.lang.AssertionError`;
  #L082aae.  v2:= "Unexpected exception" @kind object;
  #L082ab2.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L082ab8.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L082abe.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L082a92;
}
procedure `java.lang.Object` `c`(`a.a.g.d` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Object`[] v7 @kind object) @signature `La/a/g/d;.c:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L082ae0.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L082ae6.  v0:= temp @kind object;
  #L082ae8.  call temp:= `a`(v5, v0) @signature `La/a/g/d;.a:(Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind direct;
  #L082aee.  v0:= temp @kind object;
  #L082af0.  if v0 != 0 then goto L082b3e;
  #L082af4.  v0:= new `java.lang.AssertionError`;
  #L082af8.  v1:= new `java.lang.StringBuilder`;
  #L082afc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L082b02.  v2:= "Method " @kind object;
  #L082b06.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082b0c.  v1:= temp @kind object;
  #L082b0e.  v2:= v5.`a.a.g.d.b` @type ^`java.lang.String` @kind object;
  #L082b12.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082b18.  v1:= temp @kind object;
  #L082b1a.  v2:= " not supported for object " @kind object;
  #L082b1e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082b24.  v1:= temp @kind object;
  #L082b26.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082b2c.  v1:= temp @kind object;
  #L082b2e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L082b34.  v1:= temp @kind object;
  #L082b36.  call `<init>`(v0, v1) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L082b3c.  throw v0;
  #Try_start0.  
  #L082b3e.  call temp:= `invoke`(v0, v6, v7) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L082b44.  v0:= temp @kind object;
  #L082b46.  return v0 @kind object;
  #L082b48.  v1:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L082b4a.  v2:= new `java.lang.AssertionError`;
  #L082b4e.  v3:= new `java.lang.StringBuilder`;
  #L082b52.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L082b58.  v4:= "Unexpectedly could not call: " @kind object;
  #L082b5c.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082b62.  v3:= temp @kind object;
  #L082b64.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082b6a.  v0:= temp @kind object;
  #L082b6c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L082b72.  v0:= temp @kind object;
  #L082b74.  call `<init>`(v2, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L082b7a.  call temp:= `initCause`(v2, v1) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L082b80.  throw v2;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L082b48;
}
procedure `java.lang.Object` `d`(`a.a.g.d` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Object`[] v5 @kind object) @signature `La/a/g/d;.d:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L082ba4.  call temp:= `c`(v3, v4, v5) @signature `La/a/g/d;.c:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L082baa.  v0:= temp @kind object;
  #L082bac.  return v0 @kind object;
  #L082bae.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L082bb0.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L082bb6.  v0:= temp @kind object;
  #L082bb8.  v1:= instanceof @variable v0 @type ^`java.lang.RuntimeException` @kind boolean;
  #L082bbc.  if v1 == 0 then goto L082bc6;
  #L082bc0.  v0:= (`java.lang.RuntimeException`) v0 @kind object;
  #L082bc4.  throw v0;
  #L082bc6.  v1:= new `java.lang.AssertionError`;
  #L082bca.  v2:= "Unexpected exception" @kind object;
  #L082bce.  call `<init>`(v1, v2) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L082bd4.  call temp:= `initCause`(v1, v0) @signature `Ljava/lang/AssertionError;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L082bda.  throw v1;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L082bae;
}
