record `a.k$a` @kind class @AccessFlag PUBLIC_FINAL {
  `boolean` `a.k$a.a` @AccessFlag ;
  `java.lang.String`[] `a.k$a.b` @AccessFlag ;
  `java.lang.String`[] `a.k$a.c` @AccessFlag ;
  `boolean` `a.k$a.d` @AccessFlag ;
}
procedure `void` `<init>`(`a.k$a` v1 @kind this, `a.k` v2 @kind object) @signature `La/k$a;.<init>:(La/k;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L086818.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08681e.  v0:= v2.`a.k.d` @type ^`boolean` @kind boolean;
  #L086822.  v1.`a.k$a.a` @type ^`boolean` := v0 @kind boolean;
  #L086826.  v0:= v2.`a.k.f` @type ^`java.lang.String`[] @kind object;
  #L08682a.  v1.`a.k$a.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L08682e.  v0:= v2.`a.k.g` @type ^`java.lang.String`[] @kind object;
  #L086832.  v1.`a.k$a.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L086836.  v0:= v2.`a.k.e` @type ^`boolean` @kind boolean;
  #L08683a.  v1.`a.k$a.d` @type ^`boolean` := v0 @kind boolean;
  #L08683e.  return @kind void;
}
procedure `void` `<init>`(`a.k$a` v0 @kind this, `boolean` v1 ) @signature `La/k$a;.<init>:(Z)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L086850.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L086856.  v0.`a.k$a.a` @type ^`boolean` := v1 @kind boolean;
  #L08685a.  return @kind void;
}
procedure `a.k$a` `a`(`a.k$a` v2 @kind this, `boolean` v3 ) @signature `La/k$a;.a:(Z)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08686c.  v0:= v2.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L086870.  if v0 != 0 then goto L086884;
  #L086874.  v0:= new `java.lang.IllegalStateException`;
  #L086878.  v1:= "no TLS extensions for cleartext connections" @kind object;
  #L08687c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L086882.  throw v0;
  #L086884.  v2.`a.k$a.d` @type ^`boolean` := v3 @kind boolean;
  #L086888.  return v2 @kind object;
}
procedure `a.k$a` `a`(`a.k$a` v3 @kind this, `a.ac`[] v4 @kind object) @signature `La/k$a;.a:([La/ac;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L08689c.  v0:= v3.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L0868a0.  if v0 != 0 then goto L0868b4;
  #L0868a4.  v0:= new `java.lang.IllegalStateException`;
  #L0868a8.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L0868ac.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0868b2.  throw v0;
  #L0868b4.  v0:= length @variable v4;
  #L0868b6.  v1:= new `java.lang.String`[v0];
  #L0868ba.  v0:= 0I;
  #L0868bc.  v2:= length @variable v4;
  #L0868be.  if v0 >= v2 then goto L0868d4;
  #L0868c2.  v2:= v4[v0] @kind object;
  #L0868c6.  v2:= v2.`a.ac.f` @type ^`java.lang.String` @kind object;
  #L0868ca.  v1[v0]:= v2 @kind object;
  #L0868ce.  v0:= v0 + 1;
  #L0868d2.  goto L0868bc;
  #L0868d4.  call temp:= `b`(v3, v1) @signature `La/k$a;.b:([Ljava/lang/String;)La/k$a;` @kind virtual;
  #L0868da.  v0:= temp @kind object;
  #L0868dc.  return v0 @kind object;
}
procedure `a.k$a` `a`(`a.k$a` v3 @kind this, `a.h`[] v4 @kind object) @signature `La/k$a;.a:([La/h;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L0868f0.  v0:= v3.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L0868f4.  if v0 != 0 then goto L086908;
  #L0868f8.  v0:= new `java.lang.IllegalStateException`;
  #L0868fc.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L086900.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L086906.  throw v0;
  #L086908.  v0:= length @variable v4;
  #L08690a.  v1:= new `java.lang.String`[v0];
  #L08690e.  v0:= 0I;
  #L086910.  v2:= length @variable v4;
  #L086912.  if v0 >= v2 then goto L086928;
  #L086916.  v2:= v4[v0] @kind object;
  #L08691a.  v2:= v2.`a.h.bi` @type ^`java.lang.String` @kind object;
  #L08691e.  v1[v0]:= v2 @kind object;
  #L086922.  v0:= v0 + 1;
  #L086926.  goto L086910;
  #L086928.  call temp:= `a`(v3, v1) @signature `La/k$a;.a:([Ljava/lang/String;)La/k$a;` @kind virtual;
  #L08692e.  v0:= temp @kind object;
  #L086930.  return v0 @kind object;
}
procedure `a.k$a` `a`(`a.k$a` v2 @kind this, `java.lang.String`[] v3 @kind object) @signature `La/k$a;.a:([Ljava/lang/String;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L086944.  v0:= v2.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L086948.  if v0 != 0 then goto L08695c;
  #L08694c.  v0:= new `java.lang.IllegalStateException`;
  #L086950.  v1:= "no cipher suites for cleartext connections" @kind object;
  #L086954.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08695a.  throw v0;
  #L08695c.  v0:= length @variable v3;
  #L08695e.  if v0 != 0 then goto L086972;
  #L086962.  v0:= new `java.lang.IllegalArgumentException`;
  #L086966.  v1:= "At least one cipher suite is required" @kind object;
  #L08696a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L086970.  throw v0;
  #L086972.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L086978.  v0:= temp @kind object;
  #L08697a.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L08697e.  v2.`a.k$a.b` @type ^`java.lang.String`[] := v0 @kind object;
  #L086982.  return v2 @kind object;
}
procedure `a.k` `a`(`a.k$a` v1 @kind this) @signature `La/k$a;.a:()La/k;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L086994.  v0:= new `a.k`;
  #L086998.  call `<init>`(v0, v1) @signature `La/k;.<init>:(La/k$a;)V` @kind direct;
  #L08699e.  return v0 @kind object;
}
procedure `a.k$a` `b`(`a.k$a` v2 @kind this, `java.lang.String`[] v3 @kind object) @signature `La/k$a;.b:([Ljava/lang/String;)La/k$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L0869b0.  v0:= v2.`a.k$a.a` @type ^`boolean` @kind boolean;
  #L0869b4.  if v0 != 0 then goto L0869c8;
  #L0869b8.  v0:= new `java.lang.IllegalStateException`;
  #L0869bc.  v1:= "no TLS versions for cleartext connections" @kind object;
  #L0869c0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0869c6.  throw v0;
  #L0869c8.  v0:= length @variable v3;
  #L0869ca.  if v0 != 0 then goto L0869de;
  #L0869ce.  v0:= new `java.lang.IllegalArgumentException`;
  #L0869d2.  v1:= "At least one TLS version is required" @kind object;
  #L0869d6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0869dc.  throw v0;
  #L0869de.  call temp:= `clone`(v3) @signature `[Ljava/lang/String;.clone:()Ljava/lang/Object;` @kind virtual;
  #L0869e4.  v0:= temp @kind object;
  #L0869e6.  v0:= (`java.lang.String`[]) v0 @kind object;
  #L0869ea.  v2.`a.k$a.c` @type ^`java.lang.String`[] := v0 @kind object;
  #L0869ee.  return v2 @kind object;
}
