record `b.l` @kind class @AccessFlag FINAL extends `b.d` @kind interface {
  `b.c` `b.l.a` @AccessFlag PUBLIC_FINAL;
  `b.q` `b.l.b` @AccessFlag PUBLIC_FINAL;
  `boolean` `b.l.c` @AccessFlag ;
}
procedure `void` `<init>`(`b.l` v2 @kind this, `b.q` v3 @kind object) @signature `Lb/l;.<init>:(Lb/q;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L11c3f0.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11c3f6.  v0:= new `b.c`;
  #L11c3fa.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11c400.  v2.`b.l.a` @type ^`b.c` := v0 @kind object;
  #L11c404.  if v3 != 0 then goto L11c418;
  #L11c408.  v0:= new `java.lang.NullPointerException`;
  #L11c40c.  v1:= "sink == null" @kind object;
  #L11c410.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c416.  throw v0;
  #L11c418.  v2.`b.l.b` @type ^`b.q` := v3 @kind object;
  #L11c41c.  return @kind void;
}
procedure `b.s` `a`(`b.l` v1 @kind this) @signature `Lb/l;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c430.  v0:= v1.`b.l.b` @type ^`b.q` @kind object;
  #L11c434.  call temp:= `a`(v0) @signature `Lb/q;.a:()Lb/s;` @kind interface;
  #L11c43a.  v0:= temp @kind object;
  #L11c43c.  return v0 @kind object;
}
procedure `void` `a_`(`b.l` v2 @kind this, `b.c` v3 @kind object, `long` v4 ) @signature `Lb/l;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11c450.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11c454.  if v0 == 0 then goto L11c468;
  #L11c458.  v0:= new `java.lang.IllegalStateException`;
  #L11c45c.  v1:= "closed" @kind object;
  #L11c460.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c466.  throw v0;
  #L11c468.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11c46c.  call `a_`(v0, v3, v4) @signature `Lb/c;.a_:(Lb/c;J)V` @kind virtual;
  #L11c472.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11c478.  return @kind void;
}
procedure `b.d` `b`(`b.l` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lb/l;.b:(Ljava/lang/String;)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11c48c.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11c490.  if v0 == 0 then goto L11c4a4;
  #L11c494.  v0:= new `java.lang.IllegalStateException`;
  #L11c498.  v1:= "closed" @kind object;
  #L11c49c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c4a2.  throw v0;
  #L11c4a4.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11c4a8.  call temp:= `a`(v0, v3) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @kind virtual;
  #L11c4ae.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11c4b4.  v0:= temp @kind object;
  #L11c4b6.  return v0 @kind object;
}
procedure `b.c` `c`(`b.l` v1 @kind this) @signature `Lb/l;.c:()Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c4c8.  v0:= v1.`b.l.a` @type ^`b.c` @kind object;
  #L11c4cc.  return v0 @kind object;
}
procedure `b.d` `c`(`b.l` v2 @kind this, `byte`[] v3 @kind object) @signature `Lb/l;.c:([B)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11c4e0.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11c4e4.  if v0 == 0 then goto L11c4f8;
  #L11c4e8.  v0:= new `java.lang.IllegalStateException`;
  #L11c4ec.  v1:= "closed" @kind object;
  #L11c4f0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c4f6.  throw v0;
  #L11c4f8.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11c4fc.  call temp:= `b`(v0, v3) @signature `Lb/c;.b:([B)Lb/c;` @kind virtual;
  #L11c502.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11c508.  v0:= temp @kind object;
  #L11c50a.  return v0 @kind object;
}
procedure `b.d` `c`(`b.l` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lb/l;.c:([BII)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11c51c.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11c520.  if v0 == 0 then goto L11c534;
  #L11c524.  v0:= new `java.lang.IllegalStateException`;
  #L11c528.  v1:= "closed" @kind object;
  #L11c52c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c532.  throw v0;
  #L11c534.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11c538.  call temp:= `b`(v0, v3, v4, v5) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L11c53e.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11c544.  v0:= temp @kind object;
  #L11c546.  return v0 @kind object;
}
procedure `void` `close`(`b.l` v6 @kind this) @signature `Lb/l;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11c558.  v0:= v6.`b.l.c` @type ^`boolean` @kind boolean;
  #L11c55c.  if v0 == 0 then goto L11c562;
  #L11c560.  return @kind void;
  #L11c562.  v0:= 0I;
  #Try_start0.  
  #L11c564.  v1:= v6.`b.l.a` @type ^`b.c` @kind object;
  #L11c568.  v2:= v1.`b.c.b` @type ^`long` @kind wide;
  #L11c56c.  v4:= 0L;
  #L11c570.  v1:= lcmp(v2, v4);
  #L11c574.  if v1 <= 0 then goto L11c58e;
  #L11c578.  v1:= v6.`b.l.b` @type ^`b.q` @kind object;
  #L11c57c.  v2:= v6.`b.l.a` @type ^`b.c` @kind object;
  #L11c580.  v3:= v6.`b.l.a` @type ^`b.c` @kind object;
  #L11c584.  v4:= v3.`b.c.b` @type ^`long` @kind wide;
  #L11c588.  call `a_`(v1, v2, v4) @signature `Lb/q;.a_:(Lb/c;J)V` @kind interface;
  #Try_end0.  
  #Try_start1.  
  #L11c58e.  v1:= v6.`b.l.b` @type ^`b.q` @kind object;
  #L11c592.  call `close`(v1) @signature `Lb/q;.close:()V` @kind interface;
  #Try_end1.  
  #L11c598.  v1:= 1I;
  #L11c59a.  v6.`b.l.c` @type ^`boolean` := v1 @kind boolean;
  #L11c59e.  if v0 == 0 then goto L11c560;
  #L11c5a2.  call `a`(v0) @signature `Lb/t;.a:(Ljava/lang/Throwable;)V` @kind static;
  #L11c5a8.  goto L11c560;
  #L11c5aa.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11c5ac.  if v0 != 0 then goto L11c598;
  #L11c5b0.  v0:= v1 @kind object;
  #L11c5b2.  goto L11c598;
  #L11c5b4.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11c5b6.  goto L11c58e;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L11c5b4;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L11c5aa;
}
procedure `void` `flush`(`b.l` v4 @kind this) @signature `Lb/l;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11c5e4.  v0:= v4.`b.l.c` @type ^`boolean` @kind boolean;
  #L11c5e8.  if v0 == 0 then goto L11c5fc;
  #L11c5ec.  v0:= new `java.lang.IllegalStateException`;
  #L11c5f0.  v1:= "closed" @kind object;
  #L11c5f4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c5fa.  throw v0;
  #L11c5fc.  v0:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L11c600.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11c604.  v2:= 0L;
  #L11c608.  v0:= lcmp(v0, v2);
  #L11c60c.  if v0 <= 0 then goto L11c626;
  #L11c610.  v0:= v4.`b.l.b` @type ^`b.q` @kind object;
  #L11c614.  v1:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L11c618.  v2:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L11c61c.  v2:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11c620.  call `a_`(v0, v1, v2) @signature `Lb/q;.a_:(Lb/c;J)V` @kind interface;
  #L11c626.  v0:= v4.`b.l.b` @type ^`b.q` @kind object;
  #L11c62a.  call `flush`(v0) @signature `Lb/q;.flush:()V` @kind interface;
  #L11c630.  return @kind void;
}
procedure `b.d` `g`(`b.l` v2 @kind this, `int` v3 ) @signature `Lb/l;.g:(I)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11c644.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11c648.  if v0 == 0 then goto L11c65c;
  #L11c64c.  v0:= new `java.lang.IllegalStateException`;
  #L11c650.  v1:= "closed" @kind object;
  #L11c654.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c65a.  throw v0;
  #L11c65c.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11c660.  call temp:= `d`(v0, v3) @signature `Lb/c;.d:(I)Lb/c;` @kind virtual;
  #L11c666.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11c66c.  v0:= temp @kind object;
  #L11c66e.  return v0 @kind object;
}
procedure `b.d` `h`(`b.l` v2 @kind this, `int` v3 ) @signature `Lb/l;.h:(I)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11c680.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11c684.  if v0 == 0 then goto L11c698;
  #L11c688.  v0:= new `java.lang.IllegalStateException`;
  #L11c68c.  v1:= "closed" @kind object;
  #L11c690.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c696.  throw v0;
  #L11c698.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11c69c.  call temp:= `c`(v0, v3) @signature `Lb/c;.c:(I)Lb/c;` @kind virtual;
  #L11c6a2.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11c6a8.  v0:= temp @kind object;
  #L11c6aa.  return v0 @kind object;
}
procedure `b.d` `i`(`b.l` v2 @kind this, `int` v3 ) @signature `Lb/l;.i:(I)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11c6bc.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11c6c0.  if v0 == 0 then goto L11c6d4;
  #L11c6c4.  v0:= new `java.lang.IllegalStateException`;
  #L11c6c8.  v1:= "closed" @kind object;
  #L11c6cc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c6d2.  throw v0;
  #L11c6d4.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11c6d8.  call temp:= `b`(v0, v3) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11c6de.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11c6e4.  v0:= temp @kind object;
  #L11c6e6.  return v0 @kind object;
}
procedure `b.d` `j`(`b.l` v3 @kind this, `long` v4 ) @signature `Lb/l;.j:(J)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11c6f8.  v0:= v3.`b.l.c` @type ^`boolean` @kind boolean;
  #L11c6fc.  if v0 == 0 then goto L11c710;
  #L11c700.  v0:= new `java.lang.IllegalStateException`;
  #L11c704.  v1:= "closed" @kind object;
  #L11c708.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c70e.  throw v0;
  #L11c710.  v0:= v3.`b.l.a` @type ^`b.c` @kind object;
  #L11c714.  call temp:= `i`(v0, v4) @signature `Lb/c;.i:(J)Lb/c;` @kind virtual;
  #L11c71a.  call temp:= `u`(v3) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11c720.  v0:= temp @kind object;
  #L11c722.  return v0 @kind object;
}
procedure `b.d` `k`(`b.l` v3 @kind this, `long` v4 ) @signature `Lb/l;.k:(J)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11c734.  v0:= v3.`b.l.c` @type ^`boolean` @kind boolean;
  #L11c738.  if v0 == 0 then goto L11c74c;
  #L11c73c.  v0:= new `java.lang.IllegalStateException`;
  #L11c740.  v1:= "closed" @kind object;
  #L11c744.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c74a.  throw v0;
  #L11c74c.  v0:= v3.`b.l.a` @type ^`b.c` @kind object;
  #L11c750.  call temp:= `h`(v0, v4) @signature `Lb/c;.h:(J)Lb/c;` @kind virtual;
  #L11c756.  call temp:= `u`(v3) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11c75c.  v0:= temp @kind object;
  #L11c75e.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`b.l` v2 @kind this) @signature `Lb/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11c770.  v0:= new `java.lang.StringBuilder`;
  #L11c774.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c77a.  v1:= "buffer(" @kind object;
  #L11c77e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c784.  v0:= temp @kind object;
  #L11c786.  v1:= v2.`b.l.b` @type ^`b.q` @kind object;
  #L11c78a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c790.  v0:= temp @kind object;
  #L11c792.  v1:= ")" @kind object;
  #L11c796.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c79c.  v0:= temp @kind object;
  #L11c79e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c7a4.  v0:= temp @kind object;
  #L11c7a6.  return v0 @kind object;
}
procedure `b.d` `u`(`b.l` v4 @kind this) @signature `Lb/l;.u:()Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11c7b8.  v0:= v4.`b.l.c` @type ^`boolean` @kind boolean;
  #L11c7bc.  if v0 == 0 then goto L11c7d0;
  #L11c7c0.  v0:= new `java.lang.IllegalStateException`;
  #L11c7c4.  v1:= "closed" @kind object;
  #L11c7c8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c7ce.  throw v0;
  #L11c7d0.  v0:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L11c7d4.  call temp:= `g`(v0) @signature `Lb/c;.g:()J` @kind virtual;
  #L11c7da.  v0:= temp @kind wide;
  #L11c7dc.  v2:= 0L;
  #L11c7e0.  v2:= lcmp(v0, v2);
  #L11c7e4.  if v2 <= 0 then goto L11c7f6;
  #L11c7e8.  v2:= v4.`b.l.b` @type ^`b.q` @kind object;
  #L11c7ec.  v3:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L11c7f0.  call `a_`(v2, v3, v0) @signature `Lb/q;.a_:(Lb/c;J)V` @kind interface;
  #L11c7f6.  return v4 @kind object;
}
