record `b.a` @kind class @AccessFlag PUBLIC extends `b.s` @kind class {
  `boolean` `b.a.e` @AccessFlag PRIVATE;
  `b.a` `b.a.f` @AccessFlag PRIVATE;
  `long` `b.a.g` @AccessFlag PRIVATE;
}
global `long` `@@b.a.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `long` `@@b.a.c` @AccessFlag PRIVATE_STATIC_FINAL;
global `b.a` `@@b.a.d` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lb/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07f758.  v0:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L07f75c.  v2:= 60L;
  #L07f760.  call temp:= `toMillis`(v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.toMillis:(J)J` @kind virtual;
  #L07f766.  v0:= temp @kind wide;
  #L07f768.  `@@b.a.a` @type ^`long` := v0 @kind wide;
  #L07f76c.  v0:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L07f770.  v2:= `@@b.a.a` @type ^`long` @kind wide;
  #L07f774.  call temp:= `toNanos`(v0, v2) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L07f77a.  v0:= temp @kind wide;
  #L07f77c.  `@@b.a.c` @type ^`long` := v0 @kind wide;
  #L07f780.  return @kind void;
}
procedure `void` `<init>`(`b.a` v0 @kind this) @signature `Lb/a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L07f794.  call `<init>`(v0) @signature `Lb/s;.<init>:()V` @kind direct;
  #L07f79a.  return @kind void;
}
procedure `b.a` `a`(`b.a` v0 @kind object) @signature `Lb/a;.a:(Lb/a;)Lb/a;` @AccessFlag STATIC_SYNTHETIC {
    temp;

  #L07f7ac.  `@@b.a.d` @type ^`b.a` := v0 @kind object;
  #L07f7b0.  return v0 @kind object;
}
procedure `void` `a`(`b.a` v9 @kind object, `long` v10 , `boolean` v12 ) @signature `Lb/a;.a:(Lb/a;JZ)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L07f7c4.  v4:= 0L;
  #L07f7c8.  v1:= constclass @type ^`b.a` @kind object;
  #L07f7cc.  @monitorenter v1
  #Try_start0.  
  #L07f7ce.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L07f7d2.  if v0 != 0 then goto L07f7f4;
  #L07f7d6.  v0:= new `b.a`;
  #L07f7da.  call `<init>`(v0) @signature `Lb/a;.<init>:()V` @kind direct;
  #L07f7e0.  `@@b.a.d` @type ^`b.a` := v0 @kind object;
  #L07f7e4.  v0:= new `b.a$a`;
  #L07f7e8.  call `<init>`(v0) @signature `Lb/a$a;.<init>:()V` @kind direct;
  #L07f7ee.  call `start`(v0) @signature `Lb/a$a;.start:()V` @kind virtual;
  #L07f7f4.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L07f7fa.  v2:= temp @kind wide;
  #L07f7fc.  v0:= lcmp(v10, v4);
  #L07f800.  if v0 == 0 then goto L07f86a;
  #L07f804.  if v12 == 0 then goto L07f86a;
  #L07f808.  call temp:= `d`(v9) @signature `Lb/a;.d:()J` @kind virtual;
  #L07f80e.  v4:= temp @kind wide;
  #L07f810.  v4:= v4 - v2 @kind long;
  #L07f812.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L07f818.  v4:= temp @kind wide;
  #L07f81a.  v4:= v4 + v2 @kind long;
  #L07f81c.  v9.`b.a.g` @type ^`long` := v4 @kind wide;
  #L07f820.  call temp:= `b`(v9, v2) @signature `Lb/a;.b:(J)J` @kind direct;
  #L07f826.  v4:= temp @kind wide;
  #L07f828.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L07f82c.  v6:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L07f830.  if v6 == 0 then goto L07f848;
  #L07f834.  v6:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L07f838.  call temp:= `b`(v6, v2) @signature `Lb/a;.b:(J)J` @kind direct;
  #L07f83e.  v6:= temp @kind wide;
  #L07f840.  v6:= lcmp(v4, v6);
  #L07f844.  if v6 >= 0 then goto L07f8a0;
  #L07f848.  v2:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L07f84c.  v9.`b.a.f` @type ^`b.a` := v2 @kind object;
  #L07f850.  v0.`b.a.f` @type ^`b.a` := v9 @kind object;
  #L07f854.  v2:= `@@b.a.d` @type ^`b.a` @kind object;
  #L07f858.  if v0 != v2 then goto L07f866;
  #L07f85c.  v0:= constclass @type ^`b.a` @kind object;
  #L07f860.  call `notify`(v0) @signature `Ljava/lang/Object;.notify:()V` @kind virtual;
  #Try_end0.  
  #L07f866.  @monitorexit v1
  #L07f868.  return @kind void;
  #L07f86a.  v0:= lcmp(v10, v4);
  #L07f86e.  if v0 == 0 then goto L07f882;
  #L07f872.  v4:= v2 + v10 @kind long;
  #Try_start1.  
  #L07f876.  v9.`b.a.g` @type ^`long` := v4 @kind wide;
  #Try_end1.  
  #L07f87a.  goto L07f820;
  #L07f87c.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07f87e.  @monitorexit v1
  #L07f880.  throw v0;
  #L07f882.  if v12 == 0 then goto L07f894;
  #Try_start2.  
  #L07f886.  call temp:= `d`(v9) @signature `Lb/a;.d:()J` @kind virtual;
  #L07f88c.  v4:= temp @kind wide;
  #L07f88e.  v9.`b.a.g` @type ^`long` := v4 @kind wide;
  #L07f892.  goto L07f820;
  #L07f894.  v0:= new `java.lang.AssertionError`;
  #L07f898.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07f89e.  throw v0;
  #L07f8a0.  v0:= v0.`b.a.f` @type ^`b.a` @kind object;
  #Try_end2.  
  #L07f8a4.  goto L07f82c;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07f87c;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07f87c;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L07f87c;
}
procedure `long` `b`(`b.a` v3 @kind this, `long` v4 ) @signature `Lb/a;.b:(J)J` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07f8d4.  v0:= v3.`b.a.g` @type ^`long` @kind wide;
  #L07f8d8.  v0:= v0 - v4 @kind long;
  #L07f8da.  return v0 @kind wide;
}
procedure `boolean` `b`(`b.a` v3 @kind object) @signature `Lb/a;.b:(Lb/a;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L07f8ec.  v1:= constclass @type ^`b.a` @kind object;
  #L07f8f0.  @monitorenter v1
  #Try_start0.  
  #L07f8f2.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L07f8f6.  if v0 == 0 then goto L07f91c;
  #L07f8fa.  v2:= v0.`b.a.f` @type ^`b.a` @kind object;
  #L07f8fe.  if v2 != v3 then goto L07f916;
  #L07f902.  v2:= v3.`b.a.f` @type ^`b.a` @kind object;
  #L07f906.  v0.`b.a.f` @type ^`b.a` := v2 @kind object;
  #L07f90a.  v0:= 0I;
  #L07f90c.  v3.`b.a.f` @type ^`b.a` := v0 @kind object;
  #Try_end0.  
  #L07f910.  v0:= 0I;
  #L07f912.  @monitorexit v1
  #L07f914.  return v0;
  #Try_start1.  
  #L07f916.  v0:= v0.`b.a.f` @type ^`b.a` @kind object;
  #Try_end1.  
  #L07f91a.  goto L07f8f6;
  #L07f91c.  v0:= 1I;
  #L07f91e.  goto L07f912;
  #L07f920.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07f922.  @monitorexit v1
  #L07f924.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07f920;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07f920;
}
procedure `b.a` `e`() @signature `Lb/a;.e:()Lb/a;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L07f94c.  v6:= 1000000L;
  #L07f952.  v0:= 0I;
  #L07f954.  v1:= `@@b.a.d` @type ^`b.a` @kind object;
  #L07f958.  v1:= v1.`b.a.f` @type ^`b.a` @kind object;
  #L07f95c.  if v1 != 0 then goto L07f9a0;
  #L07f960.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L07f966.  v2:= temp @kind wide;
  #L07f968.  v1:= constclass @type ^`b.a` @kind object;
  #L07f96c.  v4:= `@@b.a.a` @type ^`long` @kind wide;
  #L07f970.  call `wait`(v1, v4) @signature `Ljava/lang/Object;.wait:(J)V` @kind virtual;
  #L07f976.  v1:= `@@b.a.d` @type ^`b.a` @kind object;
  #L07f97a.  v1:= v1.`b.a.f` @type ^`b.a` @kind object;
  #L07f97e.  if v1 != 0 then goto L07f99e;
  #L07f982.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L07f988.  v4:= temp @kind wide;
  #L07f98a.  v2:= v4 - v2 @kind long;
  #L07f98e.  v4:= `@@b.a.c` @type ^`long` @kind wide;
  #L07f992.  v1:= lcmp(v2, v4);
  #L07f996.  if v1 < 0 then goto L07f99e;
  #L07f99a.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L07f99e.  return v0 @kind object;
  #L07f9a0.  call temp:= `nanoTime`() @signature `Ljava/lang/System;.nanoTime:()J` @kind static;
  #L07f9a6.  v2:= temp @kind wide;
  #L07f9a8.  call temp:= `b`(v1, v2) @signature `Lb/a;.b:(J)J` @kind direct;
  #L07f9ae.  v2:= temp @kind wide;
  #L07f9b0.  v4:= 0L;
  #L07f9b4.  v4:= lcmp(v2, v4);
  #L07f9b8.  if v4 <= 0 then goto L07f9d2;
  #L07f9bc.  v4:= v2 / v6 @kind long;
  #L07f9c0.  v6:= v6 * v4 @kind long;
  #L07f9c2.  v2:= v2 - v6 @kind long;
  #L07f9c4.  v1:= constclass @type ^`b.a` @kind object;
  #L07f9c8.  v2:= (`int`) v2 @kind l2i;
  #L07f9ca.  call `wait`(v1, v4, v2) @signature `Ljava/lang/Object;.wait:(JI)V` @kind virtual;
  #L07f9d0.  goto L07f99e;
  #L07f9d2.  v2:= `@@b.a.d` @type ^`b.a` @kind object;
  #L07f9d6.  v3:= v1.`b.a.f` @type ^`b.a` @kind object;
  #L07f9da.  v2.`b.a.f` @type ^`b.a` := v3 @kind object;
  #L07f9de.  v1.`b.a.f` @type ^`b.a` := v0 @kind object;
  #L07f9e2.  v0:= v1 @kind object;
  #L07f9e4.  goto L07f99e;
}
procedure `b.a` `f`() @signature `Lb/a;.f:()Lb/a;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L07f9f8.  v0:= `@@b.a.d` @type ^`b.a` @kind object;
  #L07f9fc.  return v0 @kind object;
}
procedure `b.q` `a`(`b.a` v1 @kind this, `b.q` v2 @kind object) @signature `Lb/a;.a:(Lb/q;)Lb/q;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L07fa10.  v0:= new `b.a$1`;
  #L07fa14.  call `<init>`(v0, v1, v2) @signature `Lb/a$1;.<init>:(Lb/a;Lb/q;)V` @kind direct;
  #L07fa1a.  return v0 @kind object;
}
procedure `b.r` `a`(`b.a` v1 @kind this, `b.r` v2 @kind object) @signature `Lb/a;.a:(Lb/r;)Lb/r;` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L07fa2c.  v0:= new `b.a$2`;
  #L07fa30.  call `<init>`(v0, v1, v2) @signature `Lb/a$2;.<init>:(Lb/a;Lb/r;)V` @kind direct;
  #L07fa36.  return v0 @kind object;
}
procedure `java.io.IOException` `a`(`b.a` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lb/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L07fa48.  v0:= new `java.io.InterruptedIOException`;
  #L07fa4c.  v1:= "timeout" @kind object;
  #L07fa50.  call `<init>`(v0, v1) @signature `Ljava/io/InterruptedIOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07fa56.  if v3 == 0 then goto L07fa60;
  #L07fa5a.  call temp:= `initCause`(v0, v3) @signature `Ljava/io/InterruptedIOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L07fa60.  return v0 @kind object;
}
procedure `void` `a`(`b.a` v0 @kind this) @signature `Lb/a;.a:()V` @AccessFlag PROTECTED {
    temp;

  #L07fa74.  return @kind void;
}
procedure `void` `a`(`b.a` v1 @kind this, `boolean` v2 ) @signature `Lb/a;.a:(Z)V` @AccessFlag FINAL {
    temp;
    v0;

  #L07fa88.  call temp:= `a_`(v1) @signature `Lb/a;.a_:()Z` @kind virtual;
  #L07fa8e.  v0:= temp;
  #L07fa90.  if v0 == 0 then goto L07faa4;
  #L07fa94.  if v2 == 0 then goto L07faa4;
  #L07fa98.  v0:= 0I;
  #L07fa9a.  call temp:= `a`(v1, v0) @signature `Lb/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L07faa0.  v0:= temp @kind object;
  #L07faa2.  throw v0;
  #L07faa4.  return @kind void;
}
procedure `boolean` `a_`(`b.a` v2 @kind this) @signature `Lb/a;.a_:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L07fab8.  v0:= 0I;
  #L07faba.  v1:= v2.`b.a.e` @type ^`boolean` @kind boolean;
  #L07fabe.  if v1 != 0 then goto L07fac4;
  #L07fac2.  return v0;
  #L07fac4.  v2.`b.a.e` @type ^`boolean` := v0 @kind boolean;
  #L07fac8.  call temp:= `b`(v2) @signature `Lb/a;.b:(Lb/a;)Z` @kind static;
  #L07face.  v0:= temp;
  #L07fad0.  goto L07fac2;
}
procedure `java.io.IOException` `b`(`b.a` v1 @kind this, `java.io.IOException` v2 @kind object) @signature `Lb/a;.b:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag FINAL {
    temp;
    v0;

  #L07fae4.  call temp:= `a_`(v1) @signature `Lb/a;.a_:()Z` @kind virtual;
  #L07faea.  v0:= temp;
  #L07faec.  if v0 != 0 then goto L07faf2;
  #L07faf0.  return v2 @kind object;
  #L07faf2.  call temp:= `a`(v1, v2) @signature `Lb/a;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @kind virtual;
  #L07faf8.  v2:= temp @kind object;
  #L07fafa.  goto L07faf0;
}
procedure `void` `c`(`b.a` v6 @kind this) @signature `Lb/a;.c:()V` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07fb0c.  v0:= v6.`b.a.e` @type ^`boolean` @kind boolean;
  #L07fb10.  if v0 == 0 then goto L07fb24;
  #L07fb14.  v0:= new `java.lang.IllegalStateException`;
  #L07fb18.  v1:= "Unbalanced enter/exit" @kind object;
  #L07fb1c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07fb22.  throw v0;
  #L07fb24.  call temp:= `b_`(v6) @signature `Lb/a;.b_:()J` @kind virtual;
  #L07fb2a.  v0:= temp @kind wide;
  #L07fb2c.  call temp:= `c_`(v6) @signature `Lb/a;.c_:()Z` @kind virtual;
  #L07fb32.  v2:= temp;
  #L07fb34.  v4:= 0L;
  #L07fb38.  v3:= lcmp(v0, v4);
  #L07fb3c.  if v3 != 0 then goto L07fb46;
  #L07fb40.  if v2 != 0 then goto L07fb46;
  #L07fb44.  return @kind void;
  #L07fb46.  v3:= 1I;
  #L07fb48.  v6.`b.a.e` @type ^`boolean` := v3 @kind boolean;
  #L07fb4c.  call `a`(v6, v0, v2) @signature `Lb/a;.a:(Lb/a;JZ)V` @kind static;
  #L07fb52.  goto L07fb44;
}
