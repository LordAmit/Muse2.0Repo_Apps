record `b.m$1` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `b.m` `b.m$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.m$1` v0 @kind this, `b.m` v1 @kind object) @signature `Lb/m$1;.<init>:(Lb/m;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11c808.  v0.`b.m$1.a` @type ^`b.m` := v1 @kind object;
  #L11c80c.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L11c812.  return @kind void;
}
procedure `int` `available`(`b.m$1` v4 @kind this) @signature `Lb/m$1;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11c824.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11c828.  v0:= v0.`b.m.c` @type ^`boolean` @kind boolean;
  #L11c82c.  if v0 == 0 then goto L11c840;
  #L11c830.  v0:= new `java.io.IOException`;
  #L11c834.  v1:= "closed" @kind object;
  #L11c838.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c83e.  throw v0;
  #L11c840.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11c844.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L11c848.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11c84c.  v2:= 2147483647L;
  #L11c852.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11c858.  v0:= temp @kind wide;
  #L11c85a.  v0:= (`int`) v0 @kind l2i;
  #L11c85c.  return v0;
}
procedure `void` `close`(`b.m$1` v1 @kind this) @signature `Lb/m$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c870.  v0:= v1.`b.m$1.a` @type ^`b.m` @kind object;
  #L11c874.  call `close`(v0) @signature `Lb/m;.close:()V` @kind virtual;
  #L11c87a.  return @kind void;
}
procedure `int` `read`(`b.m$1` v4 @kind this) @signature `Lb/m$1;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11c88c.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11c890.  v0:= v0.`b.m.c` @type ^`boolean` @kind boolean;
  #L11c894.  if v0 == 0 then goto L11c8a8;
  #L11c898.  v0:= new `java.io.IOException`;
  #L11c89c.  v1:= "closed" @kind object;
  #L11c8a0.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c8a6.  throw v0;
  #L11c8a8.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11c8ac.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L11c8b0.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11c8b4.  v2:= 0L;
  #L11c8b8.  v0:= lcmp(v0, v2);
  #L11c8bc.  if v0 != 0 then goto L11c8ec;
  #L11c8c0.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11c8c4.  v0:= v0.`b.m.b` @type ^`b.r` @kind object;
  #L11c8c8.  v1:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11c8cc.  v1:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11c8d0.  v2:= 8192L;
  #L11c8d4.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11c8da.  v0:= temp @kind wide;
  #L11c8dc.  v2:= -1L;
  #L11c8e0.  v0:= lcmp(v0, v2);
  #L11c8e4.  if v0 != 0 then goto L11c8ec;
  #L11c8e8.  v0:= -1I;
  #L11c8ea.  return v0;
  #L11c8ec.  v0:= v4.`b.m$1.a` @type ^`b.m` @kind object;
  #L11c8f0.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L11c8f4.  call temp:= `h`(v0) @signature `Lb/c;.h:()B` @kind virtual;
  #L11c8fa.  v0:= temp;
  #L11c8fc.  v0:= v0 ^& 255;
  #L11c900.  goto L11c8ea;
}
procedure `int` `read`(`b.m$1` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lb/m$1;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11c914.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L11c918.  v0:= v0.`b.m.c` @type ^`boolean` @kind boolean;
  #L11c91c.  if v0 == 0 then goto L11c930;
  #L11c920.  v0:= new `java.io.IOException`;
  #L11c924.  v1:= "closed" @kind object;
  #L11c928.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c92e.  throw v0;
  #L11c930.  v0:= length @variable v7;
  #L11c932.  v0:= (`long`) v0 @kind i2l;
  #L11c934.  v2:= (`long`) v8 @kind i2l;
  #L11c936.  v4:= (`long`) v9 @kind i2l;
  #L11c938.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11c93e.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L11c942.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L11c946.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11c94a.  v2:= 0L;
  #L11c94e.  v0:= lcmp(v0, v2);
  #L11c952.  if v0 != 0 then goto L11c982;
  #L11c956.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L11c95a.  v0:= v0.`b.m.b` @type ^`b.r` @kind object;
  #L11c95e.  v1:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L11c962.  v1:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11c966.  v2:= 8192L;
  #L11c96a.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11c970.  v0:= temp @kind wide;
  #L11c972.  v2:= -1L;
  #L11c976.  v0:= lcmp(v0, v2);
  #L11c97a.  if v0 != 0 then goto L11c982;
  #L11c97e.  v0:= -1I;
  #L11c980.  return v0;
  #L11c982.  v0:= v6.`b.m$1.a` @type ^`b.m` @kind object;
  #L11c986.  v0:= v0.`b.m.a` @type ^`b.c` @kind object;
  #L11c98a.  call temp:= `a`(v0, v7, v8, v9) @signature `Lb/c;.a:([BII)I` @kind virtual;
  #L11c990.  v0:= temp;
  #L11c992.  goto L11c980;
}
procedure `java.lang.String` `toString`(`b.m$1` v2 @kind this) @signature `Lb/m$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11c9a4.  v0:= new `java.lang.StringBuilder`;
  #L11c9a8.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c9ae.  v1:= v2.`b.m$1.a` @type ^`b.m` @kind object;
  #L11c9b2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c9b8.  v0:= temp @kind object;
  #L11c9ba.  v1:= ".inputStream()" @kind object;
  #L11c9be.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c9c4.  v0:= temp @kind object;
  #L11c9c6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c9cc.  v0:= temp @kind object;
  #L11c9ce.  return v0 @kind object;
}
