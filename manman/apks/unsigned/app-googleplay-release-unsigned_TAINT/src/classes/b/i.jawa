record `b.i` @kind class @AccessFlag PUBLIC_FINAL extends `b.r` @kind interface {
  `int` `b.i.a` @AccessFlag PRIVATE;
  `b.e` `b.i.b` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `b.i.c` @AccessFlag PRIVATE_FINAL;
  `b.j` `b.i.d` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.CRC32` `b.i.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`b.i` v3 @kind this, `b.r` v4 @kind object) @signature `Lb/i;.<init>:(Lb/r;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L11b694.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11b69a.  v0:= 0I;
  #L11b69c.  v3.`b.i.a` @type ^`int` := v0;
  #L11b6a0.  v0:= new `java.util.zip.CRC32`;
  #L11b6a4.  call `<init>`(v0) @signature `Ljava/util/zip/CRC32;.<init>:()V` @kind direct;
  #L11b6aa.  v3.`b.i.e` @type ^`java.util.zip.CRC32` := v0 @kind object;
  #L11b6ae.  if v4 != 0 then goto L11b6c2;
  #L11b6b2.  v0:= new `java.lang.IllegalArgumentException`;
  #L11b6b6.  v1:= "source == null" @kind object;
  #L11b6ba.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b6c0.  throw v0;
  #L11b6c2.  v0:= new `java.util.zip.Inflater`;
  #L11b6c6.  v1:= 1I;
  #L11b6c8.  call `<init>`(v0, v1) @signature `Ljava/util/zip/Inflater;.<init>:(Z)V` @kind direct;
  #L11b6ce.  v3.`b.i.c` @type ^`java.util.zip.Inflater` := v0 @kind object;
  #L11b6d2.  call temp:= `a`(v4) @signature `Lb/k;.a:(Lb/r;)Lb/e;` @kind static;
  #L11b6d8.  v0:= temp @kind object;
  #L11b6da.  v3.`b.i.b` @type ^`b.e` := v0 @kind object;
  #L11b6de.  v0:= new `b.j`;
  #L11b6e2.  v1:= v3.`b.i.b` @type ^`b.e` @kind object;
  #L11b6e6.  v2:= v3.`b.i.c` @type ^`java.util.zip.Inflater` @kind object;
  #L11b6ea.  call `<init>`(v0, v1, v2) @signature `Lb/j;.<init>:(Lb/e;Ljava/util/zip/Inflater;)V` @kind direct;
  #L11b6f0.  v3.`b.i.d` @type ^`b.j` := v0 @kind object;
  #L11b6f4.  return @kind void;
}
procedure `void` `a`(`b.i` v8 @kind this, `b.c` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lb/i;.a:(Lb/c;JJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11b708.  v2:= 0L;
  #L11b70c.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11b710.  v1:= v0.`b.n.c` @type ^`int`;
  #L11b714.  v4:= v0.`b.n.b` @type ^`int`;
  #L11b718.  v1:= v1 - v4 @kind int;
  #L11b71a.  v4:= (`long`) v1 @kind i2l;
  #L11b71c.  v1:= lcmp(v10, v4);
  #L11b720.  if v1 < 0 then goto L11b738;
  #L11b724.  v1:= v0.`b.n.c` @type ^`int`;
  #L11b728.  v4:= v0.`b.n.b` @type ^`int`;
  #L11b72c.  v1:= v1 - v4 @kind int;
  #L11b72e.  v4:= (`long`) v1 @kind i2l;
  #L11b730.  v10:= v10 - v4 @kind long;
  #L11b732.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11b736.  goto L11b710;
  #L11b738.  v1:= lcmp(v12, v2);
  #L11b73c.  if v1 <= 0 then goto L11b776;
  #L11b740.  v1:= v0.`b.n.b` @type ^`int`;
  #L11b744.  v4:= (`long`) v1 @kind i2l;
  #L11b746.  v4:= v4 + v10 @kind long;
  #L11b748.  v1:= (`int`) v4 @kind l2i;
  #L11b74a.  v4:= v0.`b.n.c` @type ^`int`;
  #L11b74e.  v4:= v4 - v1 @kind int;
  #L11b750.  v4:= (`long`) v4 @kind i2l;
  #L11b752.  call temp:= `min`(v4, v12) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11b758.  v4:= temp @kind wide;
  #L11b75a.  v4:= (`int`) v4 @kind l2i;
  #L11b75c.  v5:= v8.`b.i.e` @type ^`java.util.zip.CRC32` @kind object;
  #L11b760.  v6:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11b764.  call `update`(v5, v6, v1, v4) @signature `Ljava/util/zip/CRC32;.update:([BII)V` @kind virtual;
  #L11b76a.  v4:= (`long`) v4 @kind i2l;
  #L11b76c.  v12:= v12 - v4 @kind long;
  #L11b76e.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11b772.  v10:= v2 @kind wide;
  #L11b774.  goto L11b738;
  #L11b776.  return @kind void;
}
procedure `void` `a`(`b.i` v5 @kind this, `java.lang.String` v6 @kind object, `int` v7 , `int` v8 ) @signature `Lb/i;.a:(Ljava/lang/String;II)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11b788.  if v8 == v7 then goto L11b7cc;
  #L11b78c.  v0:= new `java.io.IOException`;
  #L11b790.  v1:= "%s: actual 0x%08x != expected 0x%08x" @kind object;
  #L11b794.  v2:= 3I;
  #L11b796.  v2:= new `java.lang.Object`[v2];
  #L11b79a.  v3:= 0I;
  #L11b79c.  v2[v3]:= v6 @kind object;
  #L11b7a0.  v3:= 1I;
  #L11b7a2.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11b7a8.  v4:= temp @kind object;
  #L11b7aa.  v2[v3]:= v4 @kind object;
  #L11b7ae.  v3:= 2I;
  #L11b7b0.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L11b7b6.  v4:= temp @kind object;
  #L11b7b8.  v2[v3]:= v4 @kind object;
  #L11b7bc.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11b7c2.  v1:= temp @kind object;
  #L11b7c4.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b7ca.  throw v0;
  #L11b7cc.  return @kind void;
}
procedure `void` `b`(`b.i` v10 @kind this) @signature `Lb/i;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11b7e0.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b7e4.  v2:= 10L;
  #L11b7e8.  call `a`(v0, v2) @signature `Lb/e;.a:(J)V` @kind interface;
  #L11b7ee.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b7f2.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11b7f8.  v0:= temp @kind object;
  #L11b7fa.  v2:= 3L;
  #L11b7fe.  call temp:= `b`(v0, v2) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L11b804.  v7:= temp;
  #L11b806.  v0:= v7 ^> 1;
  #L11b80a.  v0:= v0 ^& 1;
  #L11b80e.  v1:= 1I;
  #L11b810.  if v0 != v1 then goto L11b91a;
  #L11b814.  v0:= 1I;
  #L11b816.  v6:= v0;
  #L11b818.  if v6 == 0 then goto L11b838;
  #L11b81c.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b820.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11b826.  v1:= temp @kind object;
  #L11b828.  v2:= 0L;
  #L11b82c.  v4:= 10L;
  #L11b830.  v0:= v10 @kind object;
  #L11b832.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11b838.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b83c.  call temp:= `i`(v0) @signature `Lb/e;.i:()S` @kind interface;
  #L11b842.  v0:= temp;
  #L11b844.  v1:= "ID1ID2" @kind object;
  #L11b848.  v2:= 8075I;
  #L11b84c.  call `a`(v10, v1, v2, v0) @signature `Lb/i;.a:(Ljava/lang/String;II)V` @kind direct;
  #L11b852.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b856.  v2:= 8L;
  #L11b85a.  call `g`(v0, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L11b860.  v0:= v7 ^> 2;
  #L11b864.  v0:= v0 ^& 1;
  #L11b868.  v1:= 1I;
  #L11b86a.  if v0 != v1 then goto L11b8e6;
  #L11b86e.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b872.  v2:= 2L;
  #L11b876.  call `a`(v0, v2) @signature `Lb/e;.a:(J)V` @kind interface;
  #L11b87c.  if v6 == 0 then goto L11b89c;
  #L11b880.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b884.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11b88a.  v1:= temp @kind object;
  #L11b88c.  v2:= 0L;
  #L11b890.  v4:= 2L;
  #L11b894.  v0:= v10 @kind object;
  #L11b896.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11b89c.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b8a0.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11b8a6.  v0:= temp @kind object;
  #L11b8a8.  call temp:= `k`(v0) @signature `Lb/c;.k:()S` @kind virtual;
  #L11b8ae.  v8:= temp;
  #L11b8b0.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b8b4.  v2:= (`long`) v8 @kind i2l;
  #L11b8b6.  call `a`(v0, v2) @signature `Lb/e;.a:(J)V` @kind interface;
  #L11b8bc.  if v6 == 0 then goto L11b8da;
  #L11b8c0.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b8c4.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11b8ca.  v1:= temp @kind object;
  #L11b8cc.  v2:= 0L;
  #L11b8d0.  v4:= (`long`) v8 @kind i2l;
  #L11b8d2.  v0:= v10 @kind object;
  #L11b8d4.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11b8da.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b8de.  v2:= (`long`) v8 @kind i2l;
  #L11b8e0.  call `g`(v0, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L11b8e6.  v0:= v7 ^> 3;
  #L11b8ea.  v0:= v0 ^& 1;
  #L11b8ee.  v1:= 1I;
  #L11b8f0.  if v0 != v1 then goto L11b954;
  #L11b8f4.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b8f8.  v1:= 0I;
  #L11b8fa.  call temp:= `a`(v0, v1) @signature `Lb/e;.a:(B)J` @kind interface;
  #L11b900.  v8:= temp @kind wide;
  #L11b902.  v0:= -1L;
  #L11b906.  v0:= lcmp(v8, v0);
  #L11b90a.  if v0 != 0 then goto L11b922;
  #L11b90e.  v0:= new `java.io.EOFException`;
  #L11b912.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11b918.  throw v0;
  #L11b91a.  v0:= 0I;
  #L11b91c.  v6:= v0;
  #L11b91e.  goto L11b818;
  #L11b922.  if v6 == 0 then goto L11b944;
  #L11b926.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b92a.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11b930.  v1:= temp @kind object;
  #L11b932.  v2:= 0L;
  #L11b936.  v4:= 1L;
  #L11b93a.  v4:= v4 + v8 @kind long;
  #L11b93c.  v0:= v10 @kind object;
  #L11b93e.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11b944.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b948.  v2:= 1L;
  #L11b94c.  v2:= v2 + v8 @kind long;
  #L11b94e.  call `g`(v0, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L11b954.  v0:= v7 ^> 4;
  #L11b958.  v0:= v0 ^& 1;
  #L11b95c.  v1:= 1I;
  #L11b95e.  if v0 != v1 then goto L11b9ba;
  #L11b962.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b966.  v1:= 0I;
  #L11b968.  call temp:= `a`(v0, v1) @signature `Lb/e;.a:(B)J` @kind interface;
  #L11b96e.  v8:= temp @kind wide;
  #L11b970.  v0:= -1L;
  #L11b974.  v0:= lcmp(v8, v0);
  #L11b978.  if v0 != 0 then goto L11b988;
  #L11b97c.  v0:= new `java.io.EOFException`;
  #L11b980.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11b986.  throw v0;
  #L11b988.  if v6 == 0 then goto L11b9aa;
  #L11b98c.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b990.  call temp:= `c`(v0) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11b996.  v1:= temp @kind object;
  #L11b998.  v2:= 0L;
  #L11b99c.  v4:= 1L;
  #L11b9a0.  v4:= v4 + v8 @kind long;
  #L11b9a2.  v0:= v10 @kind object;
  #L11b9a4.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11b9aa.  v0:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b9ae.  v2:= 1L;
  #L11b9b2.  v2:= v2 + v8 @kind long;
  #L11b9b4.  call `g`(v0, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L11b9ba.  if v6 == 0 then goto L11b9ee;
  #L11b9be.  v0:= "FHCRC" @kind object;
  #L11b9c2.  v1:= v10.`b.i.b` @type ^`b.e` @kind object;
  #L11b9c6.  call temp:= `k`(v1) @signature `Lb/e;.k:()S` @kind interface;
  #L11b9cc.  v1:= temp;
  #L11b9ce.  v2:= v10.`b.i.e` @type ^`java.util.zip.CRC32` @kind object;
  #L11b9d2.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L11b9d8.  v2:= temp @kind wide;
  #L11b9da.  v2:= (`int`) v2 @kind l2i;
  #L11b9dc.  v2:= (`short`) v2 @kind i2s;
  #L11b9de.  call `a`(v10, v0, v1, v2) @signature `Lb/i;.a:(Ljava/lang/String;II)V` @kind direct;
  #L11b9e4.  v0:= v10.`b.i.e` @type ^`java.util.zip.CRC32` @kind object;
  #L11b9e8.  call `reset`(v0) @signature `Ljava/util/zip/CRC32;.reset:()V` @kind virtual;
  #L11b9ee.  return @kind void;
}
procedure `void` `c`(`b.i` v4 @kind this) @signature `Lb/i;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11ba00.  v0:= "CRC" @kind object;
  #L11ba04.  v1:= v4.`b.i.b` @type ^`b.e` @kind object;
  #L11ba08.  call temp:= `l`(v1) @signature `Lb/e;.l:()I` @kind interface;
  #L11ba0e.  v1:= temp;
  #L11ba10.  v2:= v4.`b.i.e` @type ^`java.util.zip.CRC32` @kind object;
  #L11ba14.  call temp:= `getValue`(v2) @signature `Ljava/util/zip/CRC32;.getValue:()J` @kind virtual;
  #L11ba1a.  v2:= temp @kind wide;
  #L11ba1c.  v2:= (`int`) v2 @kind l2i;
  #L11ba1e.  call `a`(v4, v0, v1, v2) @signature `Lb/i;.a:(Ljava/lang/String;II)V` @kind direct;
  #L11ba24.  v0:= "ISIZE" @kind object;
  #L11ba28.  v1:= v4.`b.i.b` @type ^`b.e` @kind object;
  #L11ba2c.  call temp:= `l`(v1) @signature `Lb/e;.l:()I` @kind interface;
  #L11ba32.  v1:= temp;
  #L11ba34.  v2:= v4.`b.i.c` @type ^`java.util.zip.Inflater` @kind object;
  #L11ba38.  call temp:= `getBytesWritten`(v2) @signature `Ljava/util/zip/Inflater;.getBytesWritten:()J` @kind virtual;
  #L11ba3e.  v2:= temp @kind wide;
  #L11ba40.  v2:= (`int`) v2 @kind l2i;
  #L11ba42.  call `a`(v4, v0, v1, v2) @signature `Lb/i;.a:(Ljava/lang/String;II)V` @kind direct;
  #L11ba48.  return @kind void;
}
procedure `long` `a`(`b.i` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `Lb/i;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11ba5c.  v0:= -1L;
  #L11ba60.  v7:= 2I;
  #L11ba62.  v3:= 1I;
  #L11ba64.  v4:= 0L;
  #L11ba68.  v2:= lcmp(v10, v4);
  #L11ba6c.  if v2 >= 0 then goto L11baa2;
  #L11ba70.  v0:= new `java.lang.IllegalArgumentException`;
  #L11ba74.  v1:= new `java.lang.StringBuilder`;
  #L11ba78.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11ba7e.  v2:= "byteCount < 0: " @kind object;
  #L11ba82.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ba88.  v1:= temp @kind object;
  #L11ba8a.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ba90.  v1:= temp @kind object;
  #L11ba92.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11ba98.  v1:= temp @kind object;
  #L11ba9a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11baa0.  throw v0;
  #L11baa2.  v2:= lcmp(v10, v4);
  #L11baa6.  if v2 != 0 then goto L11baac;
  #L11baaa.  return v4 @kind wide;
  #L11baac.  v2:= v8.`b.i.a` @type ^`int`;
  #L11bab0.  if v2 != 0 then goto L11babe;
  #L11bab4.  call `b`(v8) @signature `Lb/i;.b:()V` @kind direct;
  #L11baba.  v8.`b.i.a` @type ^`int` := v3;
  #L11babe.  v2:= v8.`b.i.a` @type ^`int`;
  #L11bac2.  if v2 != v3 then goto L11baee;
  #L11bac6.  v2:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11baca.  v4:= v8.`b.i.d` @type ^`b.j` @kind object;
  #L11bace.  call temp:= `a`(v4, v9, v10) @signature `Lb/j;.a:(Lb/c;J)J` @kind virtual;
  #L11bad4.  v4:= temp @kind wide;
  #L11bad6.  v6:= lcmp(v4, v0);
  #L11bada.  if v6 == 0 then goto L11baea;
  #L11bade.  v0:= v8 @kind object;
  #L11bae0.  v1:= v9 @kind object;
  #L11bae2.  call `a`(v0, v1, v2, v4) @signature `Lb/i;.a:(Lb/c;JJ)V` @kind direct;
  #L11bae8.  goto L11baaa;
  #L11baea.  v8.`b.i.a` @type ^`int` := v7;
  #L11baee.  v2:= v8.`b.i.a` @type ^`int`;
  #L11baf2.  if v2 != v7 then goto L11bb22;
  #L11baf6.  call `c`(v8) @signature `Lb/i;.c:()V` @kind direct;
  #L11bafc.  v2:= 3I;
  #L11bafe.  v8.`b.i.a` @type ^`int` := v2;
  #L11bb02.  v2:= v8.`b.i.b` @type ^`b.e` @kind object;
  #L11bb06.  call temp:= `e`(v2) @signature `Lb/e;.e:()Z` @kind interface;
  #L11bb0c.  v2:= temp;
  #L11bb0e.  if v2 != 0 then goto L11bb22;
  #L11bb12.  v0:= new `java.io.IOException`;
  #L11bb16.  v1:= "gzip finished without exhausting source" @kind object;
  #L11bb1a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11bb20.  throw v0;
  #L11bb22.  v4:= v0 @kind wide;
  #L11bb24.  goto L11baaa;
}
procedure `b.s` `a`(`b.i` v1 @kind this) @signature `Lb/i;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11bb38.  v0:= v1.`b.i.b` @type ^`b.e` @kind object;
  #L11bb3c.  call temp:= `a`(v0) @signature `Lb/e;.a:()Lb/s;` @kind interface;
  #L11bb42.  v0:= temp @kind object;
  #L11bb44.  return v0 @kind object;
}
procedure `void` `close`(`b.i` v1 @kind this) @signature `Lb/i;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11bb58.  v0:= v1.`b.i.d` @type ^`b.j` @kind object;
  #L11bb5c.  call `close`(v0) @signature `Lb/j;.close:()V` @kind virtual;
  #L11bb62.  return @kind void;
}
