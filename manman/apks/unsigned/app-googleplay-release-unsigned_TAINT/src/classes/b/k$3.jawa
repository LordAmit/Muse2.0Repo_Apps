record `b.k$3` @kind class @AccessFlag FINAL extends `b.a` @kind class {
  `java.net.Socket` `b.k$3.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.k$3` v0 @kind this, `java.net.Socket` v1 @kind object) @signature `Lb/k$3;.<init>:(Ljava/net/Socket;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11c0fc.  v0.`b.k$3.a` @type ^`java.net.Socket` := v1 @kind object;
  #L11c100.  call `<init>`(v0) @signature `Lb/a;.<init>:()V` @kind direct;
  #L11c106.  return @kind void;
}
procedure `java.io.IOException` `a`(`b.k$3` v2 @kind this, `java.io.IOException` v3 @kind object) @signature `Lb/k$3;.a:(Ljava/io/IOException;)Ljava/io/IOException;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L11c118.  v0:= new `java.net.SocketTimeoutException`;
  #L11c11c.  v1:= "timeout" @kind object;
  #L11c120.  call `<init>`(v0, v1) @signature `Ljava/net/SocketTimeoutException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c126.  if v3 == 0 then goto L11c130;
  #L11c12a.  call temp:= `initCause`(v0, v3) @signature `Ljava/io/InterruptedIOException;.initCause:(Ljava/lang/Throwable;)Ljava/lang/Throwable;` @kind virtual;
  #L11c130.  return v0 @kind object;
}
procedure `void` `a`(`b.k$3` v5 @kind this) @signature `Lb/k$3;.a:()V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #Try_start0.  
  #L11c144.  v0:= v5.`b.k$3.a` @type ^`java.net.Socket` @kind object;
  #L11c148.  call `close`(v0) @signature `Ljava/net/Socket;.close:()V` @kind virtual;
  #Try_end0.  
  #L11c14e.  return @kind void;
  #L11c150.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L11c152.  v1:= `@@b.k.a` @type ^`java.util.logging.Logger` @kind object;
  #L11c156.  v2:= `@@java.util.logging.Level.WARNING` @type ^`java.util.logging.Level` @kind object;
  #L11c15a.  v3:= new `java.lang.StringBuilder`;
  #L11c15e.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c164.  v4:= "Failed to close timed out socket " @kind object;
  #L11c168.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c16e.  v3:= temp @kind object;
  #L11c170.  v4:= v5.`b.k$3.a` @type ^`java.net.Socket` @kind object;
  #L11c174.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c17a.  v3:= temp @kind object;
  #L11c17c.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c182.  v3:= temp @kind object;
  #L11c184.  call `log`(v1, v2, v3, v0) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L11c18a.  goto L11c14e;
  #L11c18c.  v0:= Exception @type ^`java.lang.AssertionError` @kind object;
  #L11c18e.  call temp:= `a`(v0) @signature `Lb/k;.a:(Ljava/lang/AssertionError;)Z` @kind static;
  #L11c194.  v1:= temp;
  #L11c196.  if v1 == 0 then goto L11c1d4;
  #L11c19a.  v1:= `@@b.k.a` @type ^`java.util.logging.Logger` @kind object;
  #L11c19e.  v2:= `@@java.util.logging.Level.WARNING` @type ^`java.util.logging.Level` @kind object;
  #L11c1a2.  v3:= new `java.lang.StringBuilder`;
  #L11c1a6.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c1ac.  v4:= "Failed to close timed out socket " @kind object;
  #L11c1b0.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c1b6.  v3:= temp @kind object;
  #L11c1b8.  v4:= v5.`b.k$3.a` @type ^`java.net.Socket` @kind object;
  #L11c1bc.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c1c2.  v3:= temp @kind object;
  #L11c1c4.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c1ca.  v3:= temp @kind object;
  #L11c1cc.  call `log`(v1, v2, v3, v0) @signature `Ljava/util/logging/Logger;.log:(Ljava/util/logging/Level;Ljava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L11c1d2.  goto L11c14e;
  #L11c1d4.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L11c150;
  catch `java.lang.AssertionError` @[Try_start0..Try_end0] goto L11c18c;
}
