record `b.c$1` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `b.c` `b.c$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.c$1` v0 @kind this, `b.c` v1 @kind object) @signature `Lb/c$1;.<init>:(Lb/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L118db0.  v0.`b.c$1.a` @type ^`b.c` := v1 @kind object;
  #L118db4.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L118dba.  return @kind void;
}
procedure `int` `available`(`b.c$1` v4 @kind this) @signature `Lb/c$1;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L118dcc.  v0:= v4.`b.c$1.a` @type ^`b.c` @kind object;
  #L118dd0.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L118dd4.  v2:= 2147483647L;
  #L118dda.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L118de0.  v0:= temp @kind wide;
  #L118de2.  v0:= (`int`) v0 @kind l2i;
  #L118de4.  return v0;
}
procedure `void` `close`(`b.c$1` v0 @kind this) @signature `Lb/c$1;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L118df8.  return @kind void;
}
procedure `int` `read`(`b.c$1` v4 @kind this) @signature `Lb/c$1;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L118e0c.  v0:= v4.`b.c$1.a` @type ^`b.c` @kind object;
  #L118e10.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L118e14.  v2:= 0L;
  #L118e18.  v0:= lcmp(v0, v2);
  #L118e1c.  if v0 <= 0 then goto L118e32;
  #L118e20.  v0:= v4.`b.c$1.a` @type ^`b.c` @kind object;
  #L118e24.  call temp:= `h`(v0) @signature `Lb/c;.h:()B` @kind virtual;
  #L118e2a.  v0:= temp;
  #L118e2c.  v0:= v0 ^& 255;
  #L118e30.  return v0;
  #L118e32.  v0:= -1I;
  #L118e34.  goto L118e30;
}
procedure `int` `read`(`b.c$1` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lb/c$1;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L118e48.  v0:= v1.`b.c$1.a` @type ^`b.c` @kind object;
  #L118e4c.  call temp:= `a`(v0, v2, v3, v4) @signature `Lb/c;.a:([BII)I` @kind virtual;
  #L118e52.  v0:= temp;
  #L118e54.  return v0;
}
procedure `java.lang.String` `toString`(`b.c$1` v2 @kind this) @signature `Lb/c$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L118e68.  v0:= new `java.lang.StringBuilder`;
  #L118e6c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L118e72.  v1:= v2.`b.c$1.a` @type ^`b.c` @kind object;
  #L118e76.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L118e7c.  v0:= temp @kind object;
  #L118e7e.  v1:= ".inputStream()" @kind object;
  #L118e82.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L118e88.  v0:= temp @kind object;
  #L118e8a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L118e90.  v0:= temp @kind object;
  #L118e92.  return v0 @kind object;
}
