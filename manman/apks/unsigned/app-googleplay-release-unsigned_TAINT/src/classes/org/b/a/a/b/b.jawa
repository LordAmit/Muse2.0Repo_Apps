record `org.b.a.a.b.b` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `int`[] `org.b.a.a.b.b.a` @AccessFlag PROTECTED;
  `float` `org.b.a.a.b.b.b` @AccessFlag PROTECTED;
  `boolean` `org.b.a.a.b.b.c` @AccessFlag PROTECTED;
  `int` `org.b.a.a.b.b.d` @AccessFlag PRIVATE;
  `int` `org.b.a.a.b.b.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.b.a.a.b.b` v0 @kind this) @signature `Lorg/b/a/a/b/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L165f08.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L165f0e.  call `b`(v0) @signature `Lorg/b/a/a/b/b;.b:()V` @kind virtual;
  #L165f14.  return @kind void;
}
procedure `float` `a`(`org.b.a.a.b.b` v4 @kind this) @signature `Lorg/b/a/a/b/b;.a:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L165f28.  v1:= 1065185444I;
  #L165f2e.  v0:= v4.`org.b.a.a.b.b.e` @type ^`int`;
  #L165f32.  if v0 <= 0 then goto L165f40;
  #L165f36.  v0:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L165f3a.  v2:= 4I;
  #L165f3c.  if v0 > v2 then goto L165f48;
  #L165f40.  v0:= 1008981770I;
  #L165f46.  return v0;
  #L165f48.  v0:= v4.`org.b.a.a.b.b.e` @type ^`int`;
  #L165f4c.  v2:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L165f50.  if v0 == v2 then goto L165f74;
  #L165f54.  v0:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L165f58.  v2:= v4.`org.b.a.a.b.b.e` @type ^`int`;
  #L165f5c.  v3:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L165f60.  v2:= v2 - v3 @kind int;
  #L165f62.  v0:= v0 / v2 @kind int;
  #L165f64.  v0:= (`float`) v0 @kind i2f;
  #L165f66.  v2:= v4.`org.b.a.a.b.b.b` @type ^`float`;
  #L165f6a.  v0:= v0 * v2 @kind float;
  #L165f6c.  v2:= fcmpg(v0, v1);
  #L165f70.  if v2 < 0 then goto L165f46;
  #L165f74.  v0:= v1;
  #L165f76.  goto L165f46;
}
procedure `int` `a`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lorg/b/a/a/b/b;.a:([BI)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `a`(`org.b.a.a.b.b` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lorg/b/a/a/b/b;.a:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L165f88.  v0:= -1I;
  #L165f8a.  v1:= 2I;
  #L165f8c.  if v6 != v1 then goto L165f98;
  #L165f90.  call temp:= `a`(v3, v4, v5) @signature `Lorg/b/a/a/b/b;.a:([BI)I` @kind virtual;
  #L165f96.  v0:= temp;
  #L165f98.  if v0 < 0 then goto L165fce;
  #L165f9c.  v1:= v3.`org.b.a.a.b.b.e` @type ^`int`;
  #L165fa0.  v1:= v1 + 1;
  #L165fa4.  v3.`org.b.a.a.b.b.e` @type ^`int` := v1;
  #L165fa8.  v1:= v3.`org.b.a.a.b.b.a` @type ^`int`[] @kind object;
  #L165fac.  v1:= length @variable v1;
  #L165fae.  if v0 >= v1 then goto L165fce;
  #L165fb2.  v1:= 512I;
  #L165fb6.  v2:= v3.`org.b.a.a.b.b.a` @type ^`int`[] @kind object;
  #L165fba.  v0:= v2[v0];
  #L165fbe.  if v1 <= v0 then goto L165fce;
  #L165fc2.  v0:= v3.`org.b.a.a.b.b.d` @type ^`int`;
  #L165fc6.  v0:= v0 + 1;
  #L165fca.  v3.`org.b.a.a.b.b.d` @type ^`int` := v0;
  #L165fce.  return @kind void;
}
procedure `void` `b`(`org.b.a.a.b.b` v1 @kind this) @signature `Lorg/b/a/a/b/b;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L165fe0.  v0:= 0I;
  #L165fe2.  v1.`org.b.a.a.b.b.c` @type ^`boolean` := v0 @kind boolean;
  #L165fe6.  v1.`org.b.a.a.b.b.e` @type ^`int` := v0;
  #L165fea.  v1.`org.b.a.a.b.b.d` @type ^`int` := v0;
  #L165fee.  return @kind void;
}
procedure `boolean` `c`(`org.b.a.a.b.b` v2 @kind this) @signature `Lorg/b/a/a/b/b;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L166000.  v0:= v2.`org.b.a.a.b.b.e` @type ^`int`;
  #L166004.  v1:= 1024I;
  #L166008.  if v0 <= v1 then goto L166010;
  #L16600c.  v0:= 1I;
  #L16600e.  return v0;
  #L166010.  v0:= 0I;
  #L166012.  goto L16600e;
}
