record `org.b.a.a.b` @kind class @AccessFlag PUBLIC_ABSTRACT {
}
procedure `void` `<init>`(`org.b.a.a.b` v0 @kind this) @signature `Lorg/b/a/a/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L165ad0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L165ad6.  return @kind void;
}
procedure `boolean` `a`(`org.b.a.a.b` v1 @kind this, `byte` v2 ) @signature `Lorg/b/a/a/b;.a:(B)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L165ae8.  v0:= v2 ^& 128;
  #L165aec.  if v0 != 0 then goto L165af4;
  #L165af0.  v0:= 1I;
  #L165af2.  return v0;
  #L165af4.  v0:= 0I;
  #L165af6.  goto L165af2;
}
procedure `boolean` `b`(`org.b.a.a.b` v2 @kind this, `byte` v3 ) @signature `Lorg/b/a/a/b;.b:(B)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L165b08.  v0:= v3 ^& 255;
  #L165b0c.  v1:= 65I;
  #L165b10.  if v0 < v1 then goto L165b2c;
  #L165b14.  v1:= 90I;
  #L165b18.  if v0 <= v1 then goto L165b24;
  #L165b1c.  v1:= 97I;
  #L165b20.  if v0 < v1 then goto L165b2c;
  #L165b24.  v1:= 122I;
  #L165b28.  if v0 <= v1 then goto L165b30;
  #L165b2c.  v0:= 1I;
  #L165b2e.  return v0;
  #L165b30.  v0:= 0I;
  #L165b32.  goto L165b2e;
}
procedure `java.lang.String` `a`() @signature `Lorg/b/a/a/b;.a:()Ljava/lang/String;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `org.b.a.a.b$a` `a`(`byte`[] v0 @kind object, `int` v1 , `int` v2 ) @signature `Lorg/b/a/a/b;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `float` `b`() @signature `Lorg/b/a/a/b;.b:()F` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.nio.ByteBuffer` `b`(`org.b.a.a.b` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/b/a/a/b;.b:([BII)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L165b44.  v2:= 0I;
  #L165b46.  call temp:= `allocate`(v10) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L165b4c.  v3:= temp @kind object;
  #L165b4e.  v4:= v9 + v10 @kind int;
  #L165b52.  v0:= v9;
  #L165b54.  v1:= v2;
  #L165b56.  if v9 >= v4 then goto L165ba8;
  #L165b5a.  v5:= v8[v9] @kind byte;
  #L165b5e.  call temp:= `a`(v7, v5) @signature `Lorg/b/a/a/b;.a:(B)Z` @kind direct;
  #L165b64.  v6:= temp;
  #L165b66.  if v6 != 0 then goto L165b72;
  #L165b6a.  v1:= 1I;
  #L165b6c.  v9:= v9 + 1;
  #L165b70.  goto L165b56;
  #L165b72.  call temp:= `b`(v7, v5) @signature `Lorg/b/a/a/b;.b:(B)Z` @kind direct;
  #L165b78.  v5:= temp;
  #L165b7a.  if v5 == 0 then goto L165b6c;
  #L165b7e.  if v1 == 0 then goto L165ba2;
  #L165b82.  if v9 <= v0 then goto L165ba2;
  #L165b86.  v1:= v9 - v0 @kind int;
  #L165b8a.  call temp:= `put`(v3, v8, v0, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L165b90.  v0:= 32I;
  #L165b94.  call temp:= `put`(v3, v0) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L165b9a.  v0:= v9 + 1;
  #L165b9e.  v1:= v2;
  #L165ba0.  goto L165b6c;
  #L165ba2.  v0:= v9 + 1;
  #L165ba6.  goto L165b6c;
  #L165ba8.  if v1 == 0 then goto L165bba;
  #L165bac.  if v9 <= v0 then goto L165bba;
  #L165bb0.  v1:= v9 - v0 @kind int;
  #L165bb4.  call temp:= `put`(v3, v8, v0, v1) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L165bba.  return v3 @kind object;
}
procedure `java.nio.ByteBuffer` `c`(`org.b.a.a.b` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/b/a/a/b;.c:([BII)Ljava/nio/ByteBuffer;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L165bcc.  v1:= 0I;
  #L165bce.  call temp:= `allocate`(v10) @signature `Ljava/nio/ByteBuffer;.allocate:(I)Ljava/nio/ByteBuffer;` @kind static;
  #L165bd4.  v3:= temp @kind object;
  #L165bd6.  v4:= v9 + v10 @kind int;
  #L165bda.  v2:= v9;
  #L165bdc.  v0:= v1;
  #L165bde.  if v9 >= v4 then goto L165c40;
  #L165be2.  v5:= v8[v9] @kind byte;
  #L165be6.  v6:= 62I;
  #L165bea.  if v5 != v6 then goto L165c2e;
  #L165bee.  v0:= v1;
  #L165bf0.  call temp:= `a`(v7, v5) @signature `Lorg/b/a/a/b;.a:(B)Z` @kind direct;
  #L165bf6.  v6:= temp;
  #L165bf8.  if v6 == 0 then goto L165c28;
  #L165bfc.  call temp:= `b`(v7, v5) @signature `Lorg/b/a/a/b;.b:(B)Z` @kind direct;
  #L165c02.  v5:= temp;
  #L165c04.  if v5 == 0 then goto L165c28;
  #L165c08.  if v9 <= v2 then goto L165c3a;
  #L165c0c.  if v0 != 0 then goto L165c3a;
  #L165c10.  v5:= v9 - v2 @kind int;
  #L165c14.  call temp:= `put`(v3, v8, v2, v5) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L165c1a.  v2:= 32I;
  #L165c1e.  call temp:= `put`(v3, v2) @signature `Ljava/nio/ByteBuffer;.put:(B)Ljava/nio/ByteBuffer;` @kind virtual;
  #L165c24.  v2:= v9 + 1;
  #L165c28.  v9:= v9 + 1;
  #L165c2c.  goto L165bde;
  #L165c2e.  v6:= 60I;
  #L165c32.  if v5 != v6 then goto L165bf0;
  #L165c36.  v0:= 1I;
  #L165c38.  goto L165bf0;
  #L165c3a.  v2:= v9 + 1;
  #L165c3e.  goto L165c28;
  #L165c40.  if v0 != 0 then goto L165c52;
  #L165c44.  if v9 <= v2 then goto L165c52;
  #L165c48.  v0:= v9 - v2 @kind int;
  #L165c4c.  call temp:= `put`(v3, v8, v2, v0) @signature `Ljava/nio/ByteBuffer;.put:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L165c52.  return v3 @kind object;
}
procedure `org.b.a.a.b$a` `c`() @signature `Lorg/b/a/a/b;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `d`() @signature `Lorg/b/a/a/b;.d:()V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
