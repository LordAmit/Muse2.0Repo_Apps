record `org.b.a.a.n` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b` @kind class {
  `org.b.a.a.d.b` `org.b.a.a.n.a` @AccessFlag PRIVATE;
  `org.b.a.a.b$a` `org.b.a.a.n.b` @AccessFlag PRIVATE;
  `int` `org.b.a.a.n.c` @AccessFlag PRIVATE;
}
global `org.b.a.a.d.m` `@@org.b.a.a.n.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/b/a/a/n;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L195be4.  v0:= new `org.b.a.a.d.n`;
  #L195be8.  call `<init>`(v0) @signature `Lorg/b/a/a/d/n;.<init>:()V` @kind direct;
  #L195bee.  `@@org.b.a.a.n.d` @type ^`org.b.a.a.d.m` := v0 @kind object;
  #L195bf2.  return @kind void;
}
procedure `void` `<init>`(`org.b.a.a.n` v2 @kind this) @signature `Lorg/b/a/a/n;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L195c04.  call `<init>`(v2) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L195c0a.  v0:= 0I;
  #L195c0c.  v2.`org.b.a.a.n.c` @type ^`int` := v0;
  #L195c10.  v0:= new `org.b.a.a.d.b`;
  #L195c14.  v1:= `@@org.b.a.a.n.d` @type ^`org.b.a.a.d.m` @kind object;
  #L195c18.  call `<init>`(v0, v1) @signature `Lorg/b/a/a/d/b;.<init>:(Lorg/b/a/a/d/m;)V` @kind direct;
  #L195c1e.  v2.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` := v0 @kind object;
  #L195c22.  call `d`(v2) @signature `Lorg/b/a/a/n;.d:()V` @kind virtual;
  #L195c28.  return @kind void;
}
procedure `java.lang.String` `a`(`org.b.a.a.n` v1 @kind this) @signature `Lorg/b/a/a/n;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L195c3c.  v0:= `@@org.b.a.b.u` @type ^`java.lang.String` @kind object;
  #L195c40.  return v0 @kind object;
}
procedure `org.b.a.a.b$a` `a`(`org.b.a.a.n` v4 @kind this, `byte`[] v5 @kind object, `int` v6 , `int` v7 ) @signature `Lorg/b/a/a/n;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L195c54.  v3:= 2I;
  #L195c56.  v0:= v6 + v7 @kind int;
  #L195c5a.  if v6 >= v0 then goto L195c7c;
  #L195c5e.  v1:= v4.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` @kind object;
  #L195c62.  v2:= v5[v6] @kind byte;
  #L195c66.  call temp:= `a`(v1, v2) @signature `Lorg/b/a/a/d/b;.a:(B)I` @kind virtual;
  #L195c6c.  v1:= temp;
  #L195c6e.  v2:= 1I;
  #L195c70.  if v1 != v2 then goto L195cac;
  #L195c74.  v0:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L195c78.  v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L195c7c.  v0:= v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` @kind object;
  #L195c80.  v1:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L195c84.  if v0 != v1 then goto L195ca6;
  #L195c88.  call temp:= `b`(v4) @signature `Lorg/b/a/a/n;.b:()F` @kind virtual;
  #L195c8e.  v0:= temp;
  #L195c90.  v1:= 1064514355I;
  #L195c96.  v0:= fcmpl(v0, v1);
  #L195c9a.  if v0 <= 0 then goto L195ca6;
  #L195c9e.  v0:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L195ca2.  v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L195ca6.  v0:= v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` @kind object;
  #L195caa.  return v0 @kind object;
  #L195cac.  if v1 != v3 then goto L195cba;
  #L195cb0.  v0:= `@@org.b.a.a.b$a.b` @type ^`org.b.a.a.b$a` @kind object;
  #L195cb4.  v4.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L195cb8.  goto L195c7c;
  #L195cba.  if v1 != 0 then goto L195cda;
  #L195cbe.  v1:= v4.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` @kind object;
  #L195cc2.  call temp:= `a`(v1) @signature `Lorg/b/a/a/d/b;.a:()I` @kind virtual;
  #L195cc8.  v1:= temp;
  #L195cca.  if v1 < v3 then goto L195cda;
  #L195cce.  v1:= v4.`org.b.a.a.n.c` @type ^`int`;
  #L195cd2.  v1:= v1 + 1;
  #L195cd6.  v4.`org.b.a.a.n.c` @type ^`int` := v1;
  #L195cda.  v6:= v6 + 1;
  #L195cde.  goto L195c5a;
}
procedure `float` `b`(`org.b.a.a.n` v3 @kind this) @signature `Lorg/b/a/a/n;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L195cf0.  v1:= 1065185444I;
  #L195cf6.  v0:= v3.`org.b.a.a.n.c` @type ^`int`;
  #L195cfa.  v2:= 6I;
  #L195cfc.  if v0 >= v2 then goto L195d1e;
  #L195d00.  v0:= 0I;
  #L195d02.  v2:= v3.`org.b.a.a.n.c` @type ^`int`;
  #L195d06.  if v0 >= v2 then goto L195d16;
  #L195d0a.  v2:= 0.5F;
  #L195d0e.  v1:= v1 * v2 @kind float;
  #L195d10.  v0:= v0 + 1;
  #L195d14.  goto L195d02;
  #L195d16.  v0:= 1.0F;
  #L195d1a.  v1:= v0 - v1 @kind float;
  #L195d1e.  return v1;
}
procedure `org.b.a.a.b$a` `c`(`org.b.a.a.n` v1 @kind this) @signature `Lorg/b/a/a/n;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L195d30.  v0:= v1.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` @kind object;
  #L195d34.  return v0 @kind object;
}
procedure `void` `d`(`org.b.a.a.n` v1 @kind this) @signature `Lorg/b/a/a/n;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L195d48.  v0:= v1.`org.b.a.a.n.a` @type ^`org.b.a.a.d.b` @kind object;
  #L195d4c.  call `b`(v0) @signature `Lorg/b/a/a/d/b;.b:()V` @kind virtual;
  #L195d52.  v0:= 0I;
  #L195d54.  v1.`org.b.a.a.n.c` @type ^`int` := v0;
  #L195d58.  v0:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L195d5c.  v1.`org.b.a.a.n.b` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L195d60.  return @kind void;
}
