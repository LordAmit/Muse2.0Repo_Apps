record `org.b.a.a.i` @kind class @AccessFlag PUBLIC extends `org.b.a.a.b` @kind class {
  `org.b.a.a.b$a` `org.b.a.a.i.a` @AccessFlag PRIVATE;
  `byte` `org.b.a.a.i.b` @AccessFlag PRIVATE;
  `int`[] `org.b.a.a.i.c` @AccessFlag PRIVATE;
}
global `byte`[] `@@org.b.a.a.i.d` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@org.b.a.a.i.e` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lorg/b/a/a/i;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L194d40.  v0:= 256I;
  #L194d44.  v0:= new `byte`[v0];
  #L194d48.  goto L194d68;
  #L194d4e.  `@@org.b.a.a.i.d` @type ^`byte`[] := v0 @kind object;
  #L194d52.  v0:= 64I;
  #L194d56.  v0:= new `byte`[v0];
  #L194d5a.  goto L194e70;
  #L194d60.  `@@org.b.a.a.i.e` @type ^`byte`[] := v0 @kind object;
  #L194d64.  return @kind void;
  #L194d66.  
  #L194d68.  v0:= (1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 2I, 1I, 1I, 1I, 1I, 1I, 1I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 1I, 1I, 1I, 1I, 1I, 1I, 0I, 1I, 7I, 1I, 1I, 1I, 1I, 1I, 1I, 5I, 1I, 5I, 0I, 5I, 0I, 0I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 7I, 1I, 7I, 0I, 7I, 5I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 1I, 4I, 4I, 4I, 4I, 4I, 4I, 5I, 5I, 4I, 4I, 4I, 4I, 4I, 4I, 4I, 4I, 5I, 5I, 4I, 4I, 4I, 4I, 4I, 1I, 4I, 4I, 4I, 4I, 4I, 5I, 5I, 5I, 6I, 6I, 6I, 6I, 6I, 6I, 7I, 7I, 6I, 6I, 6I, 6I, 6I, 6I, 6I, 6I, 7I, 7I, 6I, 6I, 6I, 6I, 6I, 1I, 6I, 6I, 6I, 6I, 6I, 7I, 7I, 7I) @kind object;
  #L194e6f.  goto L194d4e;
  #L194e70.  v0:= (0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 0I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 0I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 0I, 3I, 3I, 3I, 1I, 1I, 3I, 3I, 0I, 3I, 3I, 3I, 1I, 2I, 1I, 2I, 0I, 3I, 3I, 3I, 3I, 3I, 3I, 3I, 0I, 3I, 1I, 3I, 1I, 1I, 1I, 3I, 0I, 3I, 1I, 3I, 1I, 1I, 3I, 3I) @kind object;
  #L194eb7.  goto L194d60;
}
procedure `void` `<init>`(`org.b.a.a.i` v1 @kind this) @signature `Lorg/b/a/a/i;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L194ec8.  call `<init>`(v1) @signature `Lorg/b/a/a/b;.<init>:()V` @kind direct;
  #L194ece.  v0:= 4I;
  #L194ed0.  v0:= new `int`[v0];
  #L194ed4.  v1.`org.b.a.a.i.c` @type ^`int`[] := v0 @kind object;
  #L194ed8.  call `d`(v1) @signature `Lorg/b/a/a/i;.d:()V` @kind virtual;
  #L194ede.  return @kind void;
}
procedure `java.lang.String` `a`(`org.b.a.a.i` v1 @kind this) @signature `Lorg/b/a/a/i;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L194ef0.  v0:= `@@org.b.a.b.r` @type ^`java.lang.String` @kind object;
  #L194ef4.  return v0 @kind object;
}
procedure `org.b.a.a.b$a` `a`(`org.b.a.a.i` v7 @kind this, `byte`[] v8 @kind object, `int` v9 , `int` v10 ) @signature `Lorg/b/a/a/i;.a:([BII)Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L194f08.  call temp:= `c`(v7, v8, v9, v10) @signature `Lorg/b/a/a/i;.c:([BII)Ljava/nio/ByteBuffer;` @kind virtual;
  #L194f0e.  v0:= temp @kind object;
  #L194f10.  call temp:= `array`(v0) @signature `Ljava/nio/ByteBuffer;.array:()[B` @kind virtual;
  #L194f16.  v1:= temp @kind object;
  #L194f18.  call temp:= `position`(v0) @signature `Ljava/nio/ByteBuffer;.position:()I` @kind virtual;
  #L194f1e.  v2:= temp;
  #L194f20.  v0:= 0I;
  #L194f22.  if v0 >= v2 then goto L194f54;
  #L194f26.  v3:= v1[v0] @kind byte;
  #L194f2a.  v3:= v3 ^& 255;
  #L194f2e.  v4:= `@@org.b.a.a.i.d` @type ^`byte`[] @kind object;
  #L194f32.  v3:= v4[v3] @kind byte;
  #L194f36.  v4:= `@@org.b.a.a.i.e` @type ^`byte`[] @kind object;
  #L194f3a.  v5:= v7.`org.b.a.a.i.b` @type ^`byte` @kind byte;
  #L194f3e.  v5:= v5 * 8;
  #L194f42.  v5:= v5 + v3 @kind int;
  #L194f44.  v4:= v4[v5] @kind byte;
  #L194f48.  if v4 != 0 then goto L194f5a;
  #L194f4c.  v0:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L194f50.  v7.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L194f54.  v0:= v7.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` @kind object;
  #L194f58.  return v0 @kind object;
  #L194f5a.  v5:= v7.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L194f5e.  v6:= v5[v4];
  #L194f62.  v6:= v6 + 1;
  #L194f66.  v5[v4]:= v6;
  #L194f6a.  v7.`org.b.a.a.i.b` @type ^`byte` := v3 @kind byte;
  #L194f6e.  v0:= v0 + 1;
  #L194f72.  goto L194f22;
}
procedure `float` `b`(`org.b.a.a.i` v5 @kind this) @signature `Lorg/b/a/a/i;.b:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L194f84.  v0:= 0I;
  #L194f86.  v2:= 0I;
  #L194f88.  v1:= v5.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` @kind object;
  #L194f8c.  v3:= `@@org.b.a.a.b$a.c` @type ^`org.b.a.a.b$a` @kind object;
  #L194f90.  if v1 != v3 then goto L194f9c;
  #L194f94.  v0:= 1008981770I;
  #L194f9a.  return v0;
  #L194f9c.  v1:= v0;
  #L194f9e.  v3:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L194fa2.  v3:= length @variable v3;
  #L194fa4.  if v0 >= v3 then goto L194fb8;
  #L194fa8.  v3:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L194fac.  v3:= v3[v0];
  #L194fb0.  v1:= v1 + v3 @kind int;
  #L194fb2.  v0:= v0 + 1;
  #L194fb6.  goto L194f9e;
  #L194fb8.  if v1 > 0 then goto L194fd0;
  #L194fbc.  v0:= v2;
  #L194fbe.  v1:= fcmpg(v0, v2);
  #L194fc2.  if v1 >= 0 then goto L194fc8;
  #L194fc6.  v0:= v2;
  #L194fc8.  v1:= 0.5F;
  #L194fcc.  v0:= v0 * v1 @kind float;
  #L194fce.  goto L194f9a;
  #L194fd0.  v0:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L194fd4.  v3:= 3I;
  #L194fd6.  v0:= v0[v3];
  #L194fda.  v0:= (`float`) v0 @kind i2f;
  #L194fdc.  v3:= 1.0F;
  #L194fe0.  v0:= v0 * v3 @kind float;
  #L194fe2.  v3:= (`float`) v1 @kind i2f;
  #L194fe4.  v0:= v0 / v3 @kind float;
  #L194fe6.  v3:= v5.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L194fea.  v4:= 1I;
  #L194fec.  v3:= v3[v4];
  #L194ff0.  v3:= (`float`) v3 @kind i2f;
  #L194ff2.  v4:= 20.0F;
  #L194ff6.  v3:= v3 * v4 @kind float;
  #L194ff8.  v1:= (`float`) v1 @kind i2f;
  #L194ffa.  v1:= v3 / v1 @kind float;
  #L194ffe.  v0:= v0 - v1 @kind float;
  #L195000.  goto L194fbe;
}
procedure `org.b.a.a.b$a` `c`(`org.b.a.a.i` v1 @kind this) @signature `Lorg/b/a/a/i;.c:()Lorg/b/a/a/b$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L195014.  v0:= v1.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` @kind object;
  #L195018.  return v0 @kind object;
}
procedure `void` `d`(`org.b.a.a.i` v3 @kind this) @signature `Lorg/b/a/a/i;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L19502c.  v1:= 0I;
  #L19502e.  v0:= `@@org.b.a.a.b$a.a` @type ^`org.b.a.a.b$a` @kind object;
  #L195032.  v3.`org.b.a.a.i.a` @type ^`org.b.a.a.b$a` := v0 @kind object;
  #L195036.  v0:= 1I;
  #L195038.  v3.`org.b.a.a.i.b` @type ^`byte` := v0 @kind byte;
  #L19503c.  v0:= v1;
  #L19503e.  v2:= v3.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L195042.  v2:= length @variable v2;
  #L195044.  if v0 >= v2 then goto L195056;
  #L195048.  v2:= v3.`org.b.a.a.i.c` @type ^`int`[] @kind object;
  #L19504c.  v2[v0]:= v1;
  #L195050.  v0:= v0 + 1;
  #L195054.  goto L19503e;
  #L195056.  return @kind void;
}
