record `org.b.a.a.b.b` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `int`[] `org.b.a.a.b.b.a` @AccessFlag PROTECTED;
  `float` `org.b.a.a.b.b.b` @AccessFlag PROTECTED;
  `boolean` `org.b.a.a.b.b.c` @AccessFlag PROTECTED;
  `int` `org.b.a.a.b.b.d` @AccessFlag PRIVATE;
  `int` `org.b.a.a.b.b.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`org.b.a.a.b.b` v0 @kind this) @signature `Lorg/b/a/a/b/b;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L1757d4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1757da.  call `b`(v0) @signature `Lorg/b/a/a/b/b;.b:()V` @kind virtual;
  #L1757e0.  return @kind void;
}
procedure `float` `a`(`org.b.a.a.b.b` v4 @kind this) @signature `Lorg/b/a/a/b/b;.a:()F` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1757f4.  v1:= 1065185444I;
  #L1757fa.  v0:= v4.`org.b.a.a.b.b.e` @type ^`int`;
  #L1757fe.  if v0 <= 0 then goto L17580c;
  #L175802.  v0:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L175806.  v2:= 4I;
  #L175808.  if v0 > v2 then goto L175814;
  #L17580c.  v0:= 1008981770I;
  #L175812.  return v0;
  #L175814.  v0:= v4.`org.b.a.a.b.b.e` @type ^`int`;
  #L175818.  v2:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L17581c.  if v0 == v2 then goto L175840;
  #L175820.  v0:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L175824.  v2:= v4.`org.b.a.a.b.b.e` @type ^`int`;
  #L175828.  v3:= v4.`org.b.a.a.b.b.d` @type ^`int`;
  #L17582c.  v2:= v2 - v3 @kind int;
  #L17582e.  v0:= v0 / v2 @kind int;
  #L175830.  v0:= (`float`) v0 @kind i2f;
  #L175832.  v2:= v4.`org.b.a.a.b.b.b` @type ^`float`;
  #L175836.  v0:= v0 * v2 @kind float;
  #L175838.  v2:= fcmpg(v0, v1);
  #L17583c.  if v2 < 0 then goto L175812;
  #L175840.  v0:= v1;
  #L175842.  goto L175812;
}
procedure `int` `a`(`byte`[] v0 @kind object, `int` v1 ) @signature `Lorg/b/a/a/b/b;.a:([BI)I` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `a`(`org.b.a.a.b.b` v3 @kind this, `byte`[] v4 @kind object, `int` v5 , `int` v6 ) @signature `Lorg/b/a/a/b/b;.a:([BII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L175854.  v0:= -1I;
  #L175856.  v1:= 2I;
  #L175858.  if v6 != v1 then goto L175864;
  #L17585c.  call temp:= `a`(v3, v4, v5) @signature `Lorg/b/a/a/b/b;.a:([BI)I` @kind virtual;
  #L175862.  v0:= temp;
  #L175864.  if v0 < 0 then goto L17589a;
  #L175868.  v1:= v3.`org.b.a.a.b.b.e` @type ^`int`;
  #L17586c.  v1:= v1 + 1;
  #L175870.  v3.`org.b.a.a.b.b.e` @type ^`int` := v1;
  #L175874.  v1:= v3.`org.b.a.a.b.b.a` @type ^`int`[] @kind object;
  #L175878.  v1:= length @variable v1;
  #L17587a.  if v0 >= v1 then goto L17589a;
  #L17587e.  v1:= 512I;
  #L175882.  v2:= v3.`org.b.a.a.b.b.a` @type ^`int`[] @kind object;
  #L175886.  v0:= v2[v0];
  #L17588a.  if v1 <= v0 then goto L17589a;
  #L17588e.  v0:= v3.`org.b.a.a.b.b.d` @type ^`int`;
  #L175892.  v0:= v0 + 1;
  #L175896.  v3.`org.b.a.a.b.b.d` @type ^`int` := v0;
  #L17589a.  return @kind void;
}
procedure `void` `b`(`org.b.a.a.b.b` v1 @kind this) @signature `Lorg/b/a/a/b/b;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1758ac.  v0:= 0I;
  #L1758ae.  v1.`org.b.a.a.b.b.c` @type ^`boolean` := v0 @kind boolean;
  #L1758b2.  v1.`org.b.a.a.b.b.e` @type ^`int` := v0;
  #L1758b6.  v1.`org.b.a.a.b.b.d` @type ^`int` := v0;
  #L1758ba.  return @kind void;
}
procedure `boolean` `c`(`org.b.a.a.b.b` v2 @kind this) @signature `Lorg/b/a/a/b/b;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1758cc.  v0:= v2.`org.b.a.a.b.b.e` @type ^`int`;
  #L1758d0.  v1:= 1024I;
  #L1758d4.  if v0 <= v1 then goto L1758dc;
  #L1758d8.  v0:= 1I;
  #L1758da.  return v0;
  #L1758dc.  v0:= 0I;
  #L1758de.  goto L1758da;
}
