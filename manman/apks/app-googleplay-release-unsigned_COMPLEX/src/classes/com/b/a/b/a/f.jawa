record `com.b.a.b.a.f` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.d.c` @kind class {
  `java.util.List` `com.b.a.b.a.f.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.b.a.b.a.f.d` @AccessFlag PRIVATE;
  `com.b.a.l` `com.b.a.b.a.f.e` @AccessFlag PRIVATE;
}
global `java.io.Writer` `@@com.b.a.b.a.f.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.b.a.q` `@@com.b.a.b.a.f.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/a/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L145a04.  v0:= new `com.b.a.b.a.f$1`;
  #L145a08.  call `<init>`(v0) @signature `Lcom/b/a/b/a/f$1;.<init>:()V` @kind direct;
  #L145a0e.  `@@com.b.a.b.a.f.a` @type ^`java.io.Writer` := v0 @kind object;
  #L145a12.  v0:= new `com.b.a.q`;
  #L145a16.  v1:= "closed" @kind object;
  #L145a1a.  call `<init>`(v0, v1) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L145a20.  `@@com.b.a.b.a.f.b` @type ^`com.b.a.q` := v0 @kind object;
  #L145a24.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.b.a.f` v1 @kind this) @signature `Lcom/b/a/b/a/f;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L145a38.  v0:= `@@com.b.a.b.a.f.a` @type ^`java.io.Writer` @kind object;
  #L145a3c.  call `<init>`(v1, v0) @signature `Lcom/b/a/d/c;.<init>:(Ljava/io/Writer;)V` @kind direct;
  #L145a42.  v0:= new `java.util.ArrayList`;
  #L145a46.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L145a4c.  v1.`com.b.a.b.a.f.c` @type ^`java.util.List` := v0 @kind object;
  #L145a50.  v0:= `@@com.b.a.n.a` @type ^`com.b.a.n` @kind object;
  #L145a54.  v1.`com.b.a.b.a.f.e` @type ^`com.b.a.l` := v0 @kind object;
  #L145a58.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.f` v2 @kind this, `com.b.a.l` v3 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L145a6c.  v0:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L145a70.  if v0 == 0 then goto L145aaa;
  #L145a74.  call temp:= `j`(v3) @signature `Lcom/b/a/l;.j:()Z` @kind virtual;
  #L145a7a.  v0:= temp;
  #L145a7c.  if v0 == 0 then goto L145a8c;
  #L145a80.  call temp:= `h`(v2) @signature `Lcom/b/a/b/a/f;.h:()Z` @kind virtual;
  #L145a86.  v0:= temp;
  #L145a88.  if v0 == 0 then goto L145aa2;
  #L145a8c.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L145a92.  v0:= temp @kind object;
  #L145a94.  v0:= (`com.b.a.o`) v0 @kind object;
  #L145a98.  v1:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L145a9c.  call `a`(v0, v1, v3) @signature `Lcom/b/a/o;.a:(Ljava/lang/String;Lcom/b/a/l;)V` @kind virtual;
  #L145aa2.  v0:= 0I;
  #L145aa4.  v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` := v0 @kind object;
  #L145aa8.  return @kind void;
  #L145aaa.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145aae.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L145ab4.  v0:= temp;
  #L145ab6.  if v0 == 0 then goto L145ac0;
  #L145aba.  v2.`com.b.a.b.a.f.e` @type ^`com.b.a.l` := v3 @kind object;
  #L145abe.  goto L145aa8;
  #L145ac0.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L145ac6.  v0:= temp @kind object;
  #L145ac8.  v1:= instanceof @variable v0 @type ^`com.b.a.i` @kind boolean;
  #L145acc.  if v1 == 0 then goto L145adc;
  #L145ad0.  v0:= (`com.b.a.i`) v0 @kind object;
  #L145ad4.  call `a`(v0, v3) @signature `Lcom/b/a/i;.a:(Lcom/b/a/l;)V` @kind virtual;
  #L145ada.  goto L145aa8;
  #L145adc.  v0:= new `java.lang.IllegalStateException`;
  #L145ae0.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L145ae6.  throw v0;
}
procedure `com.b.a.l` `i`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L145af8.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145afc.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145b00.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L145b06.  v1:= temp;
  #L145b08.  v1:= v1 + -1;
  #L145b0c.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L145b12.  v0:= temp @kind object;
  #L145b14.  v0:= (`com.b.a.l`) v0 @kind object;
  #L145b18.  return v0 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v3 @kind this, `long` v4 ) @signature `Lcom/b/a/b/a/f;.a:(J)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L145b2c.  v0:= new `com.b.a.q`;
  #L145b30.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L145b36.  v1:= temp @kind object;
  #L145b38.  call `<init>`(v0, v1) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Number;)V` @kind direct;
  #L145b3e.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L145b44.  return v3 @kind object;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v1 @kind this, `java.lang.Boolean` v2 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Ljava/lang/Boolean;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145b58.  if v2 != 0 then goto L145b66;
  #L145b5c.  call temp:= `f`(v1) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L145b62.  v1:= temp @kind object;
  #L145b64.  return v1 @kind object;
  #L145b66.  v0:= new `com.b.a.q`;
  #L145b6a.  call `<init>`(v0, v2) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Boolean;)V` @kind direct;
  #L145b70.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L145b76.  goto L145b64;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v3 @kind this, `java.lang.Number` v4 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Ljava/lang/Number;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L145b88.  if v4 != 0 then goto L145b96;
  #L145b8c.  call temp:= `f`(v3) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L145b92.  v3:= temp @kind object;
  #L145b94.  return v3 @kind object;
  #L145b96.  call temp:= `g`(v3) @signature `Lcom/b/a/b/a/f;.g:()Z` @kind virtual;
  #L145b9c.  v0:= temp;
  #L145b9e.  if v0 != 0 then goto L145bf4;
  #L145ba2.  call temp:= `doubleValue`(v4) @signature `Ljava/lang/Number;.doubleValue:()D` @kind virtual;
  #L145ba8.  v0:= temp @kind wide;
  #L145baa.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L145bb0.  v2:= temp;
  #L145bb2.  if v2 != 0 then goto L145bc2;
  #L145bb6.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L145bbc.  v0:= temp;
  #L145bbe.  if v0 == 0 then goto L145bf4;
  #L145bc2.  v0:= new `java.lang.IllegalArgumentException`;
  #L145bc6.  v1:= new `java.lang.StringBuilder`;
  #L145bca.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L145bd0.  v2:= "JSON forbids NaN and infinities: " @kind object;
  #L145bd4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145bda.  v1:= temp @kind object;
  #L145bdc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145be2.  v1:= temp @kind object;
  #L145be4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L145bea.  v1:= temp @kind object;
  #L145bec.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L145bf2.  throw v0;
  #L145bf4.  v0:= new `com.b.a.q`;
  #L145bf8.  call `<init>`(v0, v4) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Number;)V` @kind direct;
  #L145bfe.  call `a`(v3, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L145c04.  goto L145b94;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/b/a/b/a/f;.a:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145c18.  v0:= v1.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145c1c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L145c22.  v0:= temp;
  #L145c24.  if v0 != 0 then goto L145c30;
  #L145c28.  v0:= v1.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L145c2c.  if v0 == 0 then goto L145c3c;
  #L145c30.  v0:= new `java.lang.IllegalStateException`;
  #L145c34.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L145c3a.  throw v0;
  #L145c3c.  call temp:= `i`(v1) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L145c42.  v0:= temp @kind object;
  #L145c44.  v0:= instanceof @variable v0 @type ^`com.b.a.o` @kind boolean;
  #L145c48.  if v0 == 0 then goto L145c52;
  #L145c4c.  v1.`com.b.a.b.a.f.d` @type ^`java.lang.String` := v2 @kind object;
  #L145c50.  return v1 @kind object;
  #L145c52.  v0:= new `java.lang.IllegalStateException`;
  #L145c56.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L145c5c.  throw v0;
}
procedure `com.b.a.d.c` `a`(`com.b.a.b.a.f` v2 @kind this, `boolean` v3 ) @signature `Lcom/b/a/b/a/f;.a:(Z)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L145c70.  v0:= new `com.b.a.q`;
  #L145c74.  call temp:= `valueOf`(v3) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L145c7a.  v1:= temp @kind object;
  #L145c7c.  call `<init>`(v0, v1) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/Boolean;)V` @kind direct;
  #L145c82.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L145c88.  return v2 @kind object;
}
procedure `com.b.a.l` `a`(`com.b.a.b.a.f` v3 @kind this) @signature `Lcom/b/a/b/a/f;.a:()Lcom/b/a/l;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L145c9c.  v0:= v3.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145ca0.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L145ca6.  v0:= temp;
  #L145ca8.  if v0 != 0 then goto L145ce2;
  #L145cac.  v0:= new `java.lang.IllegalStateException`;
  #L145cb0.  v1:= new `java.lang.StringBuilder`;
  #L145cb4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L145cba.  v2:= "Expected one JSON element but was " @kind object;
  #L145cbe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145cc4.  v1:= temp @kind object;
  #L145cc6.  v2:= v3.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145cca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L145cd0.  v1:= temp @kind object;
  #L145cd2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L145cd8.  v1:= temp @kind object;
  #L145cda.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L145ce0.  throw v0;
  #L145ce2.  v0:= v3.`com.b.a.b.a.f.e` @type ^`com.b.a.l` @kind object;
  #L145ce6.  return v0 @kind object;
}
procedure `com.b.a.d.c` `b`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.b:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L145cf8.  v0:= new `com.b.a.i`;
  #L145cfc.  call `<init>`(v0) @signature `Lcom/b/a/i;.<init>:()V` @kind direct;
  #L145d02.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L145d08.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145d0c.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L145d12.  return v2 @kind object;
}
procedure `com.b.a.d.c` `b`(`com.b.a.b.a.f` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/b/a/b/a/f;.b:(Ljava/lang/String;)Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145d24.  if v2 != 0 then goto L145d32;
  #L145d28.  call temp:= `f`(v1) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L145d2e.  v1:= temp @kind object;
  #L145d30.  return v1 @kind object;
  #L145d32.  v0:= new `com.b.a.q`;
  #L145d36.  call `<init>`(v0, v2) @signature `Lcom/b/a/q;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L145d3c.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L145d42.  goto L145d30;
}
procedure `com.b.a.d.c` `c`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.c:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L145d54.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145d58.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L145d5e.  v0:= temp;
  #L145d60.  if v0 != 0 then goto L145d6c;
  #L145d64.  v0:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L145d68.  if v0 == 0 then goto L145d78;
  #L145d6c.  v0:= new `java.lang.IllegalStateException`;
  #L145d70.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L145d76.  throw v0;
  #L145d78.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L145d7e.  v0:= temp @kind object;
  #L145d80.  v0:= instanceof @variable v0 @type ^`com.b.a.i` @kind boolean;
  #L145d84.  if v0 == 0 then goto L145da4;
  #L145d88.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145d8c.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145d90.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L145d96.  v1:= temp;
  #L145d98.  v1:= v1 + -1;
  #L145d9c.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L145da2.  return v2 @kind object;
  #L145da4.  v0:= new `java.lang.IllegalStateException`;
  #L145da8.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L145dae.  throw v0;
}
procedure `void` `close`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L145dc0.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145dc4.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L145dca.  v0:= temp;
  #L145dcc.  if v0 != 0 then goto L145de0;
  #L145dd0.  v0:= new `java.io.IOException`;
  #L145dd4.  v1:= "Incomplete document" @kind object;
  #L145dd8.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L145dde.  throw v0;
  #L145de0.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145de4.  v1:= `@@com.b.a.b.a.f.b` @type ^`com.b.a.q` @kind object;
  #L145de8.  call temp:= `add`(v0, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L145dee.  return @kind void;
}
procedure `com.b.a.d.c` `d`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.d:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L145e00.  v0:= new `com.b.a.o`;
  #L145e04.  call `<init>`(v0) @signature `Lcom/b/a/o;.<init>:()V` @kind direct;
  #L145e0a.  call `a`(v2, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L145e10.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145e14.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L145e1a.  return v2 @kind object;
}
procedure `com.b.a.d.c` `e`(`com.b.a.b.a.f` v2 @kind this) @signature `Lcom/b/a/b/a/f;.e:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L145e2c.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145e30.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L145e36.  v0:= temp;
  #L145e38.  if v0 != 0 then goto L145e44;
  #L145e3c.  v0:= v2.`com.b.a.b.a.f.d` @type ^`java.lang.String` @kind object;
  #L145e40.  if v0 == 0 then goto L145e50;
  #L145e44.  v0:= new `java.lang.IllegalStateException`;
  #L145e48.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L145e4e.  throw v0;
  #L145e50.  call temp:= `i`(v2) @signature `Lcom/b/a/b/a/f;.i:()Lcom/b/a/l;` @kind direct;
  #L145e56.  v0:= temp @kind object;
  #L145e58.  v0:= instanceof @variable v0 @type ^`com.b.a.o` @kind boolean;
  #L145e5c.  if v0 == 0 then goto L145e7c;
  #L145e60.  v0:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145e64.  v1:= v2.`com.b.a.b.a.f.c` @type ^`java.util.List` @kind object;
  #L145e68.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L145e6e.  v1:= temp;
  #L145e70.  v1:= v1 + -1;
  #L145e74.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L145e7a.  return v2 @kind object;
  #L145e7c.  v0:= new `java.lang.IllegalStateException`;
  #L145e80.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L145e86.  throw v0;
}
procedure `com.b.a.d.c` `f`(`com.b.a.b.a.f` v1 @kind this) @signature `Lcom/b/a/b/a/f;.f:()Lcom/b/a/d/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L145e98.  v0:= `@@com.b.a.n.a` @type ^`com.b.a.n` @kind object;
  #L145e9c.  call `a`(v1, v0) @signature `Lcom/b/a/b/a/f;.a:(Lcom/b/a/l;)V` @kind direct;
  #L145ea2.  return v1 @kind object;
}
procedure `void` `flush`(`com.b.a.b.a.f` v0 @kind this) @signature `Lcom/b/a/b/a/f;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L145eb4.  return @kind void;
}
