record `com.b.a.b.b$c` @kind class @AccessFlag FINAL extends `java.io.Serializable` @kind interface, `java.lang.reflect.WildcardType` @kind interface {
  `java.lang.reflect.Type` `com.b.a.b.b$c.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Type` `com.b.a.b.b$c.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.b.b$c` v4 @kind this, `java.lang.reflect.Type`[] v5 @kind object, `java.lang.reflect.Type`[] v6 @kind object) @signature `Lcom/b/a/b/b$c;.<init>:([Ljava/lang/reflect/Type;[Ljava/lang/reflect/Type;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L149e30.  v1:= 1I;
  #L149e32.  v2:= 0I;
  #L149e34.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L149e3a.  v0:= length @variable v6;
  #L149e3c.  if v0 > v1 then goto L149e9c;
  #L149e40.  v0:= v1;
  #L149e42.  call `a`(v0) @signature `Lcom/b/a/b/a;.a:(Z)V` @kind static;
  #L149e48.  v0:= length @variable v5;
  #L149e4a.  if v0 != v1 then goto L149ea0;
  #L149e4e.  v0:= v1;
  #L149e50.  call `a`(v0) @signature `Lcom/b/a/b/a;.a:(Z)V` @kind static;
  #L149e56.  v0:= length @variable v6;
  #L149e58.  if v0 != v1 then goto L149ea8;
  #L149e5c.  v0:= v6[v2] @kind object;
  #L149e60.  call temp:= `a`(v0) @signature `Lcom/b/a/b/a;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L149e66.  v0:= v6[v2] @kind object;
  #L149e6a.  call `h`(v0) @signature `Lcom/b/a/b/b;.h:(Ljava/lang/reflect/Type;)V` @kind static;
  #L149e70.  v0:= v5[v2] @kind object;
  #L149e74.  v3:= constclass @type ^`java.lang.Object` @kind object;
  #L149e78.  if v0 != v3 then goto L149ea4;
  #L149e7c.  call `a`(v1) @signature `Lcom/b/a/b/a;.a:(Z)V` @kind static;
  #L149e82.  v0:= v6[v2] @kind object;
  #L149e86.  call temp:= `d`(v0) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L149e8c.  v0:= temp @kind object;
  #L149e8e.  v4.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L149e92.  v0:= constclass @type ^`java.lang.Object` @kind object;
  #L149e96.  v4.`com.b.a.b.b$c.a` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L149e9a.  return @kind void;
  #L149e9c.  v0:= v2;
  #L149e9e.  goto L149e42;
  #L149ea0.  v0:= v2;
  #L149ea2.  goto L149e50;
  #L149ea4.  v1:= v2;
  #L149ea6.  goto L149e7c;
  #L149ea8.  v0:= v5[v2] @kind object;
  #L149eac.  call temp:= `a`(v0) @signature `Lcom/b/a/b/a;.a:(Ljava/lang/Object;)Ljava/lang/Object;` @kind static;
  #L149eb2.  v0:= v5[v2] @kind object;
  #L149eb6.  call `h`(v0) @signature `Lcom/b/a/b/b;.h:(Ljava/lang/reflect/Type;)V` @kind static;
  #L149ebc.  v0:= 0I;
  #L149ebe.  v4.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L149ec2.  v0:= v5[v2] @kind object;
  #L149ec6.  call temp:= `d`(v0) @signature `Lcom/b/a/b/b;.d:(Ljava/lang/reflect/Type;)Ljava/lang/reflect/Type;` @kind static;
  #L149ecc.  v0:= temp @kind object;
  #L149ece.  v4.`com.b.a.b.b$c.a` @type ^`java.lang.reflect.Type` := v0 @kind object;
  #L149ed2.  goto L149e9a;
}
procedure `boolean` `equals`(`com.b.a.b.b$c` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/b/a/b/b$c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L149ee4.  v0:= instanceof @variable v2 @type ^`java.lang.reflect.WildcardType` @kind boolean;
  #L149ee8.  if v0 == 0 then goto L149f00;
  #L149eec.  v2:= (`java.lang.reflect.WildcardType`) v2 @kind object;
  #L149ef0.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/b;.a:(Ljava/lang/reflect/Type;Ljava/lang/reflect/Type;)Z` @kind static;
  #L149ef6.  v0:= temp;
  #L149ef8.  if v0 == 0 then goto L149f00;
  #L149efc.  v0:= 1I;
  #L149efe.  return v0;
  #L149f00.  v0:= 0I;
  #L149f02.  goto L149efe;
}
procedure `java.lang.reflect.Type`[] `getLowerBounds`(`com.b.a.b.b$c` v3 @kind this) @signature `Lcom/b/a/b/b$c;.getLowerBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L149f14.  v0:= v3.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L149f18.  if v0 == 0 then goto L149f2e;
  #L149f1c.  v0:= 1I;
  #L149f1e.  v0:= new `java.lang.reflect.Type`[v0];
  #L149f22.  v1:= 0I;
  #L149f24.  v2:= v3.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L149f28.  v0[v1]:= v2 @kind object;
  #L149f2c.  return v0 @kind object;
  #L149f2e.  v0:= `@@com.b.a.b.b.a` @type ^`java.lang.reflect.Type`[] @kind object;
  #L149f32.  goto L149f2c;
}
procedure `java.lang.reflect.Type`[] `getUpperBounds`(`com.b.a.b.b$c` v3 @kind this) @signature `Lcom/b/a/b/b$c;.getUpperBounds:()[Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L149f44.  v0:= 1I;
  #L149f46.  v0:= new `java.lang.reflect.Type`[v0];
  #L149f4a.  v1:= 0I;
  #L149f4c.  v2:= v3.`com.b.a.b.b$c.a` @type ^`java.lang.reflect.Type` @kind object;
  #L149f50.  v0[v1]:= v2 @kind object;
  #L149f54.  return v0 @kind object;
}
procedure `int` `hashCode`(`com.b.a.b.b$c` v2 @kind this) @signature `Lcom/b/a/b/b$c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L149f68.  v0:= v2.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L149f6c.  if v0 == 0 then goto L149f94;
  #L149f70.  v0:= v2.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L149f74.  call temp:= `hashCode`(v0) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L149f7a.  v0:= temp;
  #L149f7c.  v0:= v0 + 31;
  #L149f80.  v1:= v2.`com.b.a.b.b$c.a` @type ^`java.lang.reflect.Type` @kind object;
  #L149f84.  call temp:= `hashCode`(v1) @signature `Ljava/lang/Object;.hashCode:()I` @kind virtual;
  #L149f8a.  v1:= temp;
  #L149f8c.  v1:= v1 + 31;
  #L149f90.  v0:= v0 ^~ v1 @kind int;
  #L149f92.  return v0;
  #L149f94.  v0:= 1I;
  #L149f96.  goto L149f80;
}
procedure `java.lang.String` `toString`(`com.b.a.b.b$c` v2 @kind this) @signature `Lcom/b/a/b/b$c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L149fa8.  v0:= v2.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L149fac.  if v0 == 0 then goto L149fe4;
  #L149fb0.  v0:= new `java.lang.StringBuilder`;
  #L149fb4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L149fba.  v1:= "? super " @kind object;
  #L149fbe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L149fc4.  v0:= temp @kind object;
  #L149fc6.  v1:= v2.`com.b.a.b.b$c.b` @type ^`java.lang.reflect.Type` @kind object;
  #L149fca.  call temp:= `f`(v1) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L149fd0.  v1:= temp @kind object;
  #L149fd2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L149fd8.  v0:= temp @kind object;
  #L149fda.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L149fe0.  v0:= temp @kind object;
  #L149fe2.  return v0 @kind object;
  #L149fe4.  v0:= v2.`com.b.a.b.b$c.a` @type ^`java.lang.reflect.Type` @kind object;
  #L149fe8.  v1:= constclass @type ^`java.lang.Object` @kind object;
  #L149fec.  if v0 != v1 then goto L149ff6;
  #L149ff0.  v0:= "?" @kind object;
  #L149ff4.  goto L149fe2;
  #L149ff6.  v0:= new `java.lang.StringBuilder`;
  #L149ffa.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L14a000.  v1:= "? extends " @kind object;
  #L14a004.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14a00a.  v0:= temp @kind object;
  #L14a00c.  v1:= v2.`com.b.a.b.b$c.a` @type ^`java.lang.reflect.Type` @kind object;
  #L14a010.  call temp:= `f`(v1) @signature `Lcom/b/a/b/b;.f:(Ljava/lang/reflect/Type;)Ljava/lang/String;` @kind static;
  #L14a016.  v1:= temp @kind object;
  #L14a018.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14a01e.  v0:= temp @kind object;
  #L14a020.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14a026.  v0:= temp @kind object;
  #L14a028.  goto L149fe2;
}
