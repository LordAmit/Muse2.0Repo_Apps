record `com.b.a.d.a` @kind class @AccessFlag PUBLIC extends `java.io.Closeable` @kind interface {
  `int` `com.b.a.d.a.a` @AccessFlag ;
  `java.io.Reader` `com.b.a.d.a.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.b.a.d.a.d` @AccessFlag PRIVATE;
  `char`[] `com.b.a.d.a.e` @AccessFlag PRIVATE_FINAL;
  `int` `com.b.a.d.a.f` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.g` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.h` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.i` @AccessFlag PRIVATE;
  `long` `com.b.a.d.a.j` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.k` @AccessFlag PRIVATE;
  `java.lang.String` `com.b.a.d.a.l` @AccessFlag PRIVATE;
  `int`[] `com.b.a.d.a.m` @AccessFlag PRIVATE;
  `int` `com.b.a.d.a.n` @AccessFlag PRIVATE;
  `java.lang.String`[] `com.b.a.d.a.o` @AccessFlag PRIVATE;
  `int`[] `com.b.a.d.a.p` @AccessFlag PRIVATE;
}
global `char`[] `@@com.b.a.d.a.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/d/a;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L14243c.  v0:= ")]}'\n" @kind object;
  #L142440.  call temp:= `toCharArray`(v0) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L142446.  v0:= temp @kind object;
  #L142448.  `@@com.b.a.d.a.b` @type ^`char`[] := v0 @kind object;
  #L14244c.  v0:= new `com.b.a.d.a$1`;
  #L142450.  call `<init>`(v0) @signature `Lcom/b/a/d/a$1;.<init>:()V` @kind direct;
  #L142456.  `@@com.b.a.b.e.a` @type ^`com.b.a.b.e` := v0 @kind object;
  #L14245a.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.d.a` v4 @kind this, `java.io.Reader` v5 @kind object) @signature `Lcom/b/a/d/a;.<init>:(Ljava/io/Reader;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14246c.  v3:= 32I;
  #L142470.  v1:= 0I;
  #L142472.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L142478.  v4.`com.b.a.d.a.d` @type ^`boolean` := v1 @kind boolean;
  #L14247c.  v0:= 1024I;
  #L142480.  v0:= new `char`[v0];
  #L142484.  v4.`com.b.a.d.a.e` @type ^`char`[] := v0 @kind object;
  #L142488.  v4.`com.b.a.d.a.f` @type ^`int` := v1;
  #L14248c.  v4.`com.b.a.d.a.g` @type ^`int` := v1;
  #L142490.  v4.`com.b.a.d.a.h` @type ^`int` := v1;
  #L142494.  v4.`com.b.a.d.a.i` @type ^`int` := v1;
  #L142498.  v4.`com.b.a.d.a.a` @type ^`int` := v1;
  #L14249c.  v0:= new `int`[v3];
  #L1424a0.  v4.`com.b.a.d.a.m` @type ^`int`[] := v0 @kind object;
  #L1424a4.  v4.`com.b.a.d.a.n` @type ^`int` := v1;
  #L1424a8.  v0:= v4.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L1424ac.  v1:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L1424b0.  v2:= v1 + 1;
  #L1424b4.  v4.`com.b.a.d.a.n` @type ^`int` := v2;
  #L1424b8.  v2:= 6I;
  #L1424ba.  v0[v1]:= v2;
  #L1424be.  v0:= new `java.lang.String`[v3];
  #L1424c2.  v4.`com.b.a.d.a.o` @type ^`java.lang.String`[] := v0 @kind object;
  #L1424c6.  v0:= new `int`[v3];
  #L1424ca.  v4.`com.b.a.d.a.p` @type ^`int`[] := v0 @kind object;
  #L1424ce.  if v5 != 0 then goto L1424e2;
  #L1424d2.  v0:= new `java.lang.NullPointerException`;
  #L1424d6.  v1:= "in == null" @kind object;
  #L1424da.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1424e0.  throw v0;
  #L1424e2.  v4.`com.b.a.d.a.c` @type ^`java.io.Reader` := v5 @kind object;
  #L1424e6.  return @kind void;
}
procedure `java.lang.String` `a`(`com.b.a.d.a` v1 @kind object) @signature `Lcom/b/a/d/a;.a:(Lcom/b/a/d/a;)Ljava/lang/String;` @AccessFlag STATIC_SYNTHETIC {
    temp;
    v0;

  #L1424f8.  call temp:= `x`(v1) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L1424fe.  v0:= temp @kind object;
  #L142500.  return v0 @kind object;
}
procedure `void` `a`(`com.b.a.d.a` v6 @kind this, `int` v7 ) @signature `Lcom/b/a/d/a;.a:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L142514.  v5:= 0I;
  #L142516.  v0:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14251a.  v1:= v6.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14251e.  v1:= length @variable v1;
  #L142520.  if v0 != v1 then goto L14257e;
  #L142524.  v0:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L142528.  v0:= v0 * 2;
  #L14252c.  v0:= new `int`[v0];
  #L142530.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L142534.  v1:= v1 * 2;
  #L142538.  v1:= new `int`[v1];
  #L14253c.  v2:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L142540.  v2:= v2 * 2;
  #L142544.  v2:= new `java.lang.String`[v2];
  #L142548.  v3:= v6.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14254c.  v4:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L142550.  call `arraycopy`(v3, v5, v0, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L142556.  v3:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L14255a.  v4:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14255e.  call `arraycopy`(v3, v5, v1, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L142564.  v3:= v6.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L142568.  v4:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14256c.  call `arraycopy`(v3, v5, v2, v5, v4) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L142572.  v6.`com.b.a.d.a.m` @type ^`int`[] := v0 @kind object;
  #L142576.  v6.`com.b.a.d.a.p` @type ^`int`[] := v1 @kind object;
  #L14257a.  v6.`com.b.a.d.a.o` @type ^`java.lang.String`[] := v2 @kind object;
  #L14257e.  v0:= v6.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L142582.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L142586.  v2:= v1 + 1;
  #L14258a.  v6.`com.b.a.d.a.n` @type ^`int` := v2;
  #L14258e.  v0[v1]:= v7;
  #L142592.  return @kind void;
}
procedure `boolean` `a`(`com.b.a.d.a` v1 @kind this, `char` v2 ) @signature `Lcom/b/a/d/a;.a:(C)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1425a4.  goto L1425b8;
  #L1425aa.  v0:= 1I;
  #L1425ac.  return v0;
  #L1425ae.  call `v`(v1) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L1425b4.  v0:= 0I;
  #L1425b6.  goto L1425ac;
  #L1425b8.  switch v2
                  | 9 => goto L1425b4
                  | 10 => goto L1425b4
                  | 12 => goto L1425b4
                  | 13 => goto L1425b4
                  | 32 => goto L1425b4
                  | 35 => goto L1425ae
                  | 44 => goto L1425b4
                  | 47 => goto L1425ae
                  | 58 => goto L1425b4
                  | 59 => goto L1425ae
                  | 61 => goto L1425ae
                  | 91 => goto L1425b4
                  | 92 => goto L1425ae
                  | 93 => goto L1425b4
                  | 123 => goto L1425b4
                  | 125 => goto L1425b4
                  | else => goto L1425aa;
}
procedure `boolean` `a`(`com.b.a.d.a` v4 @kind this, `java.lang.String` v5 @kind object) @signature `Lcom/b/a/d/a;.a:(Ljava/lang/String;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L14264c.  v1:= 0I;
  #L14264e.  v0:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L142652.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L142658.  v2:= temp;
  #L14265a.  v0:= v0 + v2 @kind int;
  #L14265c.  v2:= v4.`com.b.a.d.a.g` @type ^`int`;
  #L142660.  if v0 <= v2 then goto L142678;
  #L142664.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L14266a.  v0:= temp;
  #L14266c.  call temp:= `b`(v4, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L142672.  v0:= temp;
  #L142674.  if v0 == 0 then goto L1426e2;
  #L142678.  v0:= v4.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14267c.  v2:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L142680.  v0:= v0[v2] @kind char;
  #L142684.  v2:= 10I;
  #L142688.  if v0 != v2 then goto L1426b2;
  #L14268c.  v0:= v4.`com.b.a.d.a.h` @type ^`int`;
  #L142690.  v0:= v0 + 1;
  #L142694.  v4.`com.b.a.d.a.h` @type ^`int` := v0;
  #L142698.  v0:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L14269c.  v0:= v0 + 1;
  #L1426a0.  v4.`com.b.a.d.a.i` @type ^`int` := v0;
  #L1426a4.  v0:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L1426a8.  v0:= v0 + 1;
  #L1426ac.  v4.`com.b.a.d.a.f` @type ^`int` := v0;
  #L1426b0.  goto L14264e;
  #L1426b2.  v0:= v1;
  #L1426b4.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1426ba.  v2:= temp;
  #L1426bc.  if v0 >= v2 then goto L1426e0;
  #L1426c0.  v2:= v4.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L1426c4.  v3:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L1426c8.  v3:= v3 + v0 @kind int;
  #L1426ca.  v2:= v2[v3] @kind char;
  #L1426ce.  call temp:= `charAt`(v5, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L1426d4.  v3:= temp;
  #L1426d6.  if v2 != v3 then goto L1426a4;
  #L1426da.  v0:= v0 + 1;
  #L1426de.  goto L1426b4;
  #L1426e0.  v1:= 1I;
  #L1426e2.  return v1;
}
procedure `int` `b`(`com.b.a.d.a` v5 @kind this, `boolean` v6 ) @signature `Lcom/b/a/d/a;.b:(Z)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1426f4.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L1426f8.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L1426fc.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L142700.  if v1 != v0 then goto L14275c;
  #L142704.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L142708.  v0:= 1I;
  #L14270a.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L142710.  v0:= temp;
  #L142712.  if v0 != 0 then goto L142754;
  #L142716.  if v6 == 0 then goto L142872;
  #L14271a.  v0:= new `java.io.EOFException`;
  #L14271e.  v1:= new `java.lang.StringBuilder`;
  #L142722.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L142728.  v2:= "End of input" @kind object;
  #L14272c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L142732.  v1:= temp @kind object;
  #L142734.  call temp:= `x`(v5) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L14273a.  v2:= temp @kind object;
  #L14273c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L142742.  v1:= temp @kind object;
  #L142744.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14274a.  v1:= temp @kind object;
  #L14274c.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L142752.  throw v0;
  #L142754.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L142758.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L14275c.  v2:= v1 + 1;
  #L142760.  v1:= v3[v1] @kind char;
  #L142764.  v4:= 10I;
  #L142768.  if v1 != v4 then goto L142780;
  #L14276c.  v1:= v5.`com.b.a.d.a.h` @type ^`int`;
  #L142770.  v1:= v1 + 1;
  #L142774.  v5.`com.b.a.d.a.h` @type ^`int` := v1;
  #L142778.  v5.`com.b.a.d.a.i` @type ^`int` := v2;
  #L14277c.  v1:= v2;
  #L14277e.  goto L142700;
  #L142780.  v4:= 32I;
  #L142784.  if v1 == v4 then goto L142876;
  #L142788.  v4:= 13I;
  #L14278c.  if v1 == v4 then goto L142876;
  #L142790.  v4:= 9I;
  #L142794.  if v1 != v4 then goto L14279c;
  #L142798.  v1:= v2;
  #L14279a.  goto L142700;
  #L14279c.  v4:= 47I;
  #L1427a0.  if v1 != v4 then goto L142846;
  #L1427a4.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L1427a8.  if v2 != v0 then goto L1427d6;
  #L1427ac.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L1427b0.  v0:= v0 + -1;
  #L1427b4.  v5.`com.b.a.d.a.f` @type ^`int` := v0;
  #L1427b8.  v0:= 2I;
  #L1427ba.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L1427c0.  v0:= temp;
  #L1427c2.  v2:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L1427c6.  v2:= v2 + 1;
  #L1427ca.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L1427ce.  if v0 != 0 then goto L1427d6;
  #L1427d2.  v0:= v1;
  #L1427d4.  return v0;
  #L1427d6.  call `v`(v5) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L1427dc.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L1427e0.  v0:= v3[v0] @kind char;
  #L1427e4.  goto L14287c;
  #L1427ea.  v0:= v1;
  #L1427ec.  goto L1427d4;
  #L1427ee.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L1427f2.  v0:= v0 + 1;
  #L1427f6.  v5.`com.b.a.d.a.f` @type ^`int` := v0;
  #L1427fa.  v0:= "*/" @kind object;
  #L1427fe.  call temp:= `a`(v5, v0) @signature `Lcom/b/a/d/a;.a:(Ljava/lang/String;)Z` @kind direct;
  #L142804.  v0:= temp;
  #L142806.  if v0 != 0 then goto L142818;
  #L14280a.  v0:= "Unterminated comment" @kind object;
  #L14280e.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L142814.  v0:= temp @kind object;
  #L142816.  throw v0;
  #L142818.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14281c.  v1:= v0 + 2;
  #L142820.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L142824.  goto L142700;
  #L142828.  v0:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14282c.  v0:= v0 + 1;
  #L142830.  v5.`com.b.a.d.a.f` @type ^`int` := v0;
  #L142834.  call `w`(v5) @signature `Lcom/b/a/d/a;.w:()V` @kind direct;
  #L14283a.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L14283e.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L142842.  goto L142700;
  #L142846.  v0:= 35I;
  #L14284a.  if v1 != v0 then goto L14286a;
  #L14284e.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L142852.  call `v`(v5) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L142858.  call `w`(v5) @signature `Lcom/b/a/d/a;.w:()V` @kind direct;
  #L14285e.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L142862.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L142866.  goto L142700;
  #L14286a.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L14286e.  v0:= v1;
  #L142870.  goto L1427d4;
  #L142872.  v0:= -1I;
  #L142874.  goto L1427d4;
  #L142876.  v1:= v2;
  #L142878.  goto L142700;
  #L14287c.  switch v0
                  | 42 => goto L1427ee
                  | 47 => goto L142828
                  | else => goto L1427ea;
}
procedure `java.io.IOException` `b`(`com.b.a.d.a` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1428a0.  v0:= new `com.b.a.d.d`;
  #L1428a4.  v1:= new `java.lang.StringBuilder`;
  #L1428a8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1428ae.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1428b4.  v1:= temp @kind object;
  #L1428b6.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L1428bc.  v2:= temp @kind object;
  #L1428be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1428c4.  v1:= temp @kind object;
  #L1428c6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1428cc.  v1:= temp @kind object;
  #L1428ce.  call `<init>`(v0, v1) @signature `Lcom/b/a/d/d;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1428d4.  throw v0;
}
procedure `java.lang.String` `b`(`com.b.a.d.a` v7 @kind this, `char` v8 ) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1428e8.  v4:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L1428ec.  v5:= new `java.lang.StringBuilder`;
  #L1428f0.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1428f6.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L1428fa.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L1428fe.  v3:= v0;
  #L142900.  if v3 >= v1 then goto L14297c;
  #L142904.  v2:= v3 + 1;
  #L142908.  v3:= v4[v3] @kind char;
  #L14290c.  if v3 != v8 then goto L14292c;
  #L142910.  v7.`com.b.a.d.a.f` @type ^`int` := v2;
  #L142914.  v1:= v2 - v0 @kind int;
  #L142918.  v1:= v1 + -1;
  #L14291c.  call temp:= `append`(v5, v4, v0, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L142922.  call temp:= `toString`(v5) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L142928.  v0:= temp @kind object;
  #L14292a.  return v0 @kind object;
  #L14292c.  v6:= 92I;
  #L142930.  if v3 != v6 then goto L142962;
  #L142934.  v7.`com.b.a.d.a.f` @type ^`int` := v2;
  #L142938.  v1:= v2 - v0 @kind int;
  #L14293c.  v1:= v1 + -1;
  #L142940.  call temp:= `append`(v5, v4, v0, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L142946.  call temp:= `y`(v7) @signature `Lcom/b/a/d/a;.y:()C` @kind direct;
  #L14294c.  v0:= temp;
  #L14294e.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L142954.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L142958.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L14295c.  v2:= v0;
  #L14295e.  v3:= v2;
  #L142960.  goto L142900;
  #L142962.  v6:= 10I;
  #L142966.  if v3 != v6 then goto L14295e;
  #L14296a.  v3:= v7.`com.b.a.d.a.h` @type ^`int`;
  #L14296e.  v3:= v3 + 1;
  #L142972.  v7.`com.b.a.d.a.h` @type ^`int` := v3;
  #L142976.  v7.`com.b.a.d.a.i` @type ^`int` := v2;
  #L14297a.  goto L14295e;
  #L14297c.  v1:= v3 - v0 @kind int;
  #L142980.  call temp:= `append`(v5, v4, v0, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L142986.  v7.`com.b.a.d.a.f` @type ^`int` := v3;
  #L14298a.  v0:= 1I;
  #L14298c.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L142992.  v0:= temp;
  #L142994.  if v0 != 0 then goto L1428f6;
  #L142998.  v0:= "Unterminated string" @kind object;
  #L14299c.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L1429a2.  v0:= temp @kind object;
  #L1429a4.  throw v0;
}
procedure `boolean` `b`(`com.b.a.d.a` v6 @kind this, `int` v7 ) @signature `Lcom/b/a/d/a;.b:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1429b8.  v0:= 0I;
  #L1429ba.  v1:= v6.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L1429be.  v2:= v6.`com.b.a.d.a.i` @type ^`int`;
  #L1429c2.  v3:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L1429c6.  v2:= v2 - v3 @kind int;
  #L1429c8.  v6.`com.b.a.d.a.i` @type ^`int` := v2;
  #L1429cc.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L1429d0.  v3:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L1429d4.  if v2 == v3 then goto L142a6e;
  #L1429d8.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L1429dc.  v3:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L1429e0.  v2:= v2 - v3 @kind int;
  #L1429e2.  v6.`com.b.a.d.a.g` @type ^`int` := v2;
  #L1429e6.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L1429ea.  v3:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L1429ee.  call `arraycopy`(v1, v2, v1, v0, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1429f4.  v6.`com.b.a.d.a.f` @type ^`int` := v0;
  #L1429f8.  v2:= v6.`com.b.a.d.a.c` @type ^`java.io.Reader` @kind object;
  #L1429fc.  v3:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L142a00.  v4:= length @variable v1;
  #L142a02.  v5:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L142a06.  v4:= v4 - v5 @kind int;
  #L142a08.  call temp:= `read`(v2, v1, v3, v4) @signature `Ljava/io/Reader;.read:([CII)I` @kind virtual;
  #L142a0e.  v2:= temp;
  #L142a10.  v3:= -1I;
  #L142a12.  if v2 == v3 then goto L142a6c;
  #L142a16.  v3:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L142a1a.  v2:= v2 + v3 @kind int;
  #L142a1c.  v6.`com.b.a.d.a.g` @type ^`int` := v2;
  #L142a20.  v2:= v6.`com.b.a.d.a.h` @type ^`int`;
  #L142a24.  if v2 != 0 then goto L142a62;
  #L142a28.  v2:= v6.`com.b.a.d.a.i` @type ^`int`;
  #L142a2c.  if v2 != 0 then goto L142a62;
  #L142a30.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L142a34.  if v2 <= 0 then goto L142a62;
  #L142a38.  v2:= v1[v0] @kind char;
  #L142a3c.  v3:= 65279I;
  #L142a42.  if v2 != v3 then goto L142a62;
  #L142a46.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L142a4a.  v2:= v2 + 1;
  #L142a4e.  v6.`com.b.a.d.a.f` @type ^`int` := v2;
  #L142a52.  v2:= v6.`com.b.a.d.a.i` @type ^`int`;
  #L142a56.  v2:= v2 + 1;
  #L142a5a.  v6.`com.b.a.d.a.i` @type ^`int` := v2;
  #L142a5e.  v7:= v7 + 1;
  #L142a62.  v2:= v6.`com.b.a.d.a.g` @type ^`int`;
  #L142a66.  if v2 < v7 then goto L1429f8;
  #L142a6a.  v0:= 1I;
  #L142a6c.  return v0;
  #L142a6e.  v6.`com.b.a.d.a.g` @type ^`int` := v0;
  #L142a72.  goto L1429f4;
}
procedure `void` `c`(`com.b.a.d.a` v5 @kind this, `char` v6 ) @signature `Lcom/b/a/d/a;.c:(C)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L142a84.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L142a88.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L142a8c.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L142a90.  v2:= v1;
  #L142a92.  if v2 >= v0 then goto L142ae0;
  #L142a96.  v1:= v2 + 1;
  #L142a9a.  v2:= v3[v2] @kind char;
  #L142a9e.  if v2 != v6 then goto L142aa8;
  #L142aa2.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L142aa6.  return @kind void;
  #L142aa8.  v4:= 92I;
  #L142aac.  if v2 != v4 then goto L142ac6;
  #L142ab0.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L142ab4.  call temp:= `y`(v5) @signature `Lcom/b/a/d/a;.y:()C` @kind direct;
  #L142aba.  v1:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L142abe.  v0:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L142ac2.  v2:= v1;
  #L142ac4.  goto L142a92;
  #L142ac6.  v4:= 10I;
  #L142aca.  if v2 != v4 then goto L142ac2;
  #L142ace.  v2:= v5.`com.b.a.d.a.h` @type ^`int`;
  #L142ad2.  v2:= v2 + 1;
  #L142ad6.  v5.`com.b.a.d.a.h` @type ^`int` := v2;
  #L142ada.  v5.`com.b.a.d.a.i` @type ^`int` := v1;
  #L142ade.  goto L142ac2;
  #L142ae0.  v5.`com.b.a.d.a.f` @type ^`int` := v2;
  #L142ae4.  v0:= 1I;
  #L142ae6.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L142aec.  v0:= temp;
  #L142aee.  if v0 != 0 then goto L142a88;
  #L142af2.  v0:= "Unterminated string" @kind object;
  #L142af6.  call temp:= `b`(v5, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L142afc.  v0:= temp @kind object;
  #L142afe.  throw v0;
}
procedure `int` `o`(`com.b.a.d.a` v8 @kind this) @signature `Lcom/b/a/d/a;.o:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L142b10.  v3:= 0I;
  #L142b12.  v0:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L142b16.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L142b1a.  v0:= v0[v1] @kind char;
  #L142b1e.  v1:= 116I;
  #L142b22.  if v0 == v1 then goto L142b2e;
  #L142b26.  v1:= 84I;
  #L142b2a.  if v0 != v1 then goto L142b68;
  #L142b2e.  v2:= "true" @kind object;
  #L142b32.  v1:= "TRUE" @kind object;
  #L142b36.  v0:= 5I;
  #L142b38.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L142b3e.  v5:= temp;
  #L142b40.  v4:= 1I;
  #L142b42.  if v4 >= v5 then goto L142bd4;
  #L142b46.  v6:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L142b4a.  v6:= v6 + v4 @kind int;
  #L142b4c.  v7:= v8.`com.b.a.d.a.g` @type ^`int`;
  #L142b50.  if v6 < v7 then goto L142ba4;
  #L142b54.  v6:= v4 + 1;
  #L142b58.  call temp:= `b`(v8, v6) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L142b5e.  v6:= temp;
  #L142b60.  if v6 != 0 then goto L142ba4;
  #L142b64.  v0:= v3;
  #L142b66.  return v0;
  #L142b68.  v1:= 102I;
  #L142b6c.  if v0 == v1 then goto L142b78;
  #L142b70.  v1:= 70I;
  #L142b74.  if v0 != v1 then goto L142b84;
  #L142b78.  v2:= "false" @kind object;
  #L142b7c.  v1:= "FALSE" @kind object;
  #L142b80.  v0:= 6I;
  #L142b82.  goto L142b38;
  #L142b84.  v1:= 110I;
  #L142b88.  if v0 == v1 then goto L142b94;
  #L142b8c.  v1:= 78I;
  #L142b90.  if v0 != v1 then goto L142ba0;
  #L142b94.  v2:= "null" @kind object;
  #L142b98.  v1:= "NULL" @kind object;
  #L142b9c.  v0:= 7I;
  #L142b9e.  goto L142b38;
  #L142ba0.  v0:= v3;
  #L142ba2.  goto L142b66;
  #L142ba4.  v6:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L142ba8.  v7:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L142bac.  v7:= v7 + v4 @kind int;
  #L142bae.  v6:= v6[v7] @kind char;
  #L142bb2.  call temp:= `charAt`(v2, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L142bb8.  v7:= temp;
  #L142bba.  if v6 == v7 then goto L142bce;
  #L142bbe.  call temp:= `charAt`(v1, v4) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L142bc4.  v7:= temp;
  #L142bc6.  if v6 == v7 then goto L142bce;
  #L142bca.  v0:= v3;
  #L142bcc.  goto L142b66;
  #L142bce.  v4:= v4 + 1;
  #L142bd2.  goto L142b42;
  #L142bd4.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L142bd8.  v1:= v1 + v5 @kind int;
  #L142bda.  v2:= v8.`com.b.a.d.a.g` @type ^`int`;
  #L142bde.  if v1 < v2 then goto L142bf2;
  #L142be2.  v1:= v5 + 1;
  #L142be6.  call temp:= `b`(v8, v1) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L142bec.  v1:= temp;
  #L142bee.  if v1 == 0 then goto L142c10;
  #L142bf2.  v1:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L142bf6.  v2:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L142bfa.  v2:= v2 + v5 @kind int;
  #L142bfc.  v1:= v1[v2] @kind char;
  #L142c00.  call temp:= `a`(v8, v1) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L142c06.  v1:= temp;
  #L142c08.  if v1 == 0 then goto L142c10;
  #L142c0c.  v0:= v3;
  #L142c0e.  goto L142b66;
  #L142c10.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L142c14.  v1:= v1 + v5 @kind int;
  #L142c16.  v8.`com.b.a.d.a.f` @type ^`int` := v1;
  #L142c1a.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L142c1e.  goto L142b66;
}
procedure `int` `s`(`com.b.a.d.a` v15 @kind this) @signature `Lcom/b/a/d/a;.s:()I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;

  #L142c30.  v11:= v15.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L142c34.  v2:= v15.`com.b.a.d.a.f` @type ^`int`;
  #L142c38.  v1:= v15.`com.b.a.d.a.g` @type ^`int`;
  #L142c3c.  v6:= 0L;
  #L142c40.  v5:= 0I;
  #L142c42.  v4:= 1I;
  #L142c44.  v3:= 0I;
  #L142c46.  v0:= 0I;
  #L142c48.  v10:= v0;
  #L142c4a.  v0:= v1;
  #L142c4c.  v1:= v2;
  #L142c4e.  v2:= v1 + v10 @kind int;
  #L142c52.  if v2 != v0 then goto L142cae;
  #L142c56.  v0:= length @variable v11;
  #L142c58.  if v10 != v0 then goto L142c60;
  #L142c5c.  v0:= 0I;
  #L142c5e.  return v0;
  #L142c60.  v0:= v10 + 1;
  #L142c64.  call temp:= `b`(v15, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L142c6a.  v0:= temp;
  #L142c6c.  if v0 != 0 then goto L142ca6;
  #L142c70.  v0:= 2I;
  #L142c72.  if v3 != v0 then goto L142dee;
  #L142c76.  if v4 == 0 then goto L142dee;
  #L142c7a.  v0:= -9223372036854775808L;
  #L142c7e.  v0:= lcmp(v6, v0);
  #L142c82.  if v0 != 0 then goto L142c8a;
  #L142c86.  if v5 == 0 then goto L142dee;
  #L142c8a.  if v5 == 0 then goto L142de8;
  #L142c8e.  v15.`com.b.a.d.a.j` @type ^`long` := v6 @kind wide;
  #L142c92.  v0:= v15.`com.b.a.d.a.f` @type ^`int`;
  #L142c96.  v0:= v0 + v10 @kind int;
  #L142c98.  v15.`com.b.a.d.a.f` @type ^`int` := v0;
  #L142c9c.  v0:= 15I;
  #L142ca0.  v15.`com.b.a.d.a.a` @type ^`int` := v0;
  #L142ca4.  goto L142c5e;
  #L142ca6.  v1:= v15.`com.b.a.d.a.f` @type ^`int`;
  #L142caa.  v0:= v15.`com.b.a.d.a.g` @type ^`int`;
  #L142cae.  v2:= v1 + v10 @kind int;
  #L142cb2.  v2:= v11[v2] @kind char;
  #L142cb6.  goto L142e20;
  #L142cbc.  v8:= 48I;
  #L142cc0.  if v2 < v8 then goto L142ccc;
  #L142cc4.  v8:= 57I;
  #L142cc8.  if v2 <= v8 then goto L142d46;
  #L142ccc.  call temp:= `a`(v15, v2) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L142cd2.  v0:= temp;
  #L142cd4.  if v0 == 0 then goto L142c70;
  #L142cd8.  v0:= 0I;
  #L142cda.  goto L142c5e;
  #L142cdc.  if v3 != 0 then goto L142cf8;
  #L142ce0.  v3:= 1I;
  #L142ce2.  v2:= 1I;
  #L142ce4.  v14:= v4;
  #L142ce6.  v4:= v3;
  #L142ce8.  v3:= v14;
  #L142cea.  v5:= v10 + 1;
  #L142cee.  v10:= v5;
  #L142cf0.  v5:= v4;
  #L142cf2.  v4:= v3;
  #L142cf4.  v3:= v2;
  #L142cf6.  goto L142c4e;
  #L142cf8.  v2:= 5I;
  #L142cfa.  if v3 != v2 then goto L142d06;
  #L142cfe.  v2:= 6I;
  #L142d00.  v3:= v4;
  #L142d02.  v4:= v5;
  #L142d04.  goto L142cea;
  #L142d06.  v0:= 0I;
  #L142d08.  goto L142c5e;
  #L142d0a.  v2:= 5I;
  #L142d0c.  if v3 != v2 then goto L142d18;
  #L142d10.  v2:= 6I;
  #L142d12.  v3:= v4;
  #L142d14.  v4:= v5;
  #L142d16.  goto L142cea;
  #L142d18.  v0:= 0I;
  #L142d1a.  goto L142c5e;
  #L142d1c.  v2:= 2I;
  #L142d1e.  if v3 == v2 then goto L142d28;
  #L142d22.  v2:= 4I;
  #L142d24.  if v3 != v2 then goto L142d30;
  #L142d28.  v2:= 5I;
  #L142d2a.  v3:= v4;
  #L142d2c.  v4:= v5;
  #L142d2e.  goto L142cea;
  #L142d30.  v0:= 0I;
  #L142d32.  goto L142c5e;
  #L142d34.  v2:= 2I;
  #L142d36.  if v3 != v2 then goto L142d42;
  #L142d3a.  v2:= 3I;
  #L142d3c.  v3:= v4;
  #L142d3e.  v4:= v5;
  #L142d40.  goto L142cea;
  #L142d42.  v0:= 0I;
  #L142d44.  goto L142c5e;
  #L142d46.  v8:= 1I;
  #L142d48.  if v3 == v8 then goto L142d50;
  #L142d4c.  if v3 != 0 then goto L142d60;
  #L142d50.  v2:= v2 + -48;
  #L142d54.  v2:= -v2 @kind int;
  #L142d56.  v6:= (`long`) v2 @kind i2l;
  #L142d58.  v2:= 2I;
  #L142d5a.  v3:= v4;
  #L142d5c.  v4:= v5;
  #L142d5e.  goto L142cea;
  #L142d60.  v8:= 2I;
  #L142d62.  if v3 != v8 then goto L142dc6;
  #L142d66.  v8:= 0L;
  #L142d6a.  v8:= lcmp(v6, v8);
  #L142d6e.  if v8 != 0 then goto L142d78;
  #L142d72.  v0:= 0I;
  #L142d74.  goto L142c5e;
  #L142d78.  v8:= 10L;
  #L142d7c.  v8:= v8 * v6 @kind long;
  #L142d7e.  v2:= v2 + -48;
  #L142d82.  v12:= (`long`) v2 @kind i2l;
  #L142d84.  v8:= v8 - v12 @kind long;
  #L142d86.  v12:= -922337203685477580L;
  #L142d90.  v2:= lcmp(v6, v12);
  #L142d94.  if v2 > 0 then goto L142db2;
  #L142d98.  v12:= -922337203685477580L;
  #L142da2.  v2:= lcmp(v6, v12);
  #L142da6.  if v2 != 0 then goto L142dc2;
  #L142daa.  v2:= lcmp(v8, v6);
  #L142dae.  if v2 >= 0 then goto L142dc2;
  #L142db2.  v2:= 1I;
  #L142db4.  v2:= v2 ^& v4 @kind int;
  #L142db6.  v4:= v5;
  #L142db8.  v6:= v8 @kind wide;
  #L142dba.  v14:= v3;
  #L142dbc.  v3:= v2;
  #L142dbe.  v2:= v14;
  #L142dc0.  goto L142cea;
  #L142dc2.  v2:= 0I;
  #L142dc4.  goto L142db4;
  #L142dc6.  v2:= 3I;
  #L142dc8.  if v3 != v2 then goto L142dd4;
  #L142dcc.  v2:= 4I;
  #L142dce.  v3:= v4;
  #L142dd0.  v4:= v5;
  #L142dd2.  goto L142cea;
  #L142dd4.  v2:= 5I;
  #L142dd6.  if v3 == v2 then goto L142de0;
  #L142dda.  v2:= 6I;
  #L142ddc.  if v3 != v2 then goto L142e16;
  #L142de0.  v2:= 7I;
  #L142de2.  v3:= v4;
  #L142de4.  v4:= v5;
  #L142de6.  goto L142cea;
  #L142de8.  v6:= -v6 @kind long;
  #L142dea.  goto L142c8e;
  #L142dee.  v0:= 2I;
  #L142df0.  if v3 == v0 then goto L142e00;
  #L142df4.  v0:= 4I;
  #L142df6.  if v3 == v0 then goto L142e00;
  #L142dfa.  v0:= 7I;
  #L142dfc.  if v3 != v0 then goto L142e10;
  #L142e00.  v15.`com.b.a.d.a.k` @type ^`int` := v10;
  #L142e04.  v0:= 16I;
  #L142e08.  v15.`com.b.a.d.a.a` @type ^`int` := v0;
  #L142e0c.  goto L142c5e;
  #L142e10.  v0:= 0I;
  #L142e12.  goto L142c5e;
  #L142e16.  v2:= v3;
  #L142e18.  v3:= v4;
  #L142e1a.  v4:= v5;
  #L142e1c.  goto L142cea;
  #L142e20.  switch v2
                  | 43 => goto L142d0a
                  | 45 => goto L142cdc
                  | 46 => goto L142d34
                  | 69 => goto L142d1c
                  | 101 => goto L142d1c
                  | else => goto L142cbc;
}
procedure `java.lang.String` `t`(`com.b.a.d.a` v5 @kind this) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L142e5c.  v2:= 0I;
  #L142e5e.  v0:= 0I;
  #L142e60.  v1:= v2;
  #L142e62.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L142e66.  v3:= v3 + v1 @kind int;
  #L142e68.  v4:= v5.`com.b.a.d.a.g` @type ^`int`;
  #L142e6c.  if v3 >= v4 then goto L142eb2;
  #L142e70.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L142e74.  v4:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L142e78.  v4:= v4 + v1 @kind int;
  #L142e7a.  v3:= v3[v4] @kind char;
  #L142e7e.  goto L142f24;
  #L142e84.  v1:= v1 + 1;
  #L142e88.  goto L142e62;
  #L142e8a.  call `v`(v5) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L142e90.  if v0 != 0 then goto L142f06;
  #L142e94.  v0:= new `java.lang.String`;
  #L142e98.  v2:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L142e9c.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L142ea0.  call `<init>`(v0, v2, v3, v1) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L142ea6.  v2:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L142eaa.  v1:= v1 + v2 @kind int;
  #L142eac.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L142eb0.  return v0 @kind object;
  #L142eb2.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L142eb6.  v3:= length @variable v3;
  #L142eb8.  if v1 >= v3 then goto L142ece;
  #L142ebc.  v3:= v1 + 1;
  #L142ec0.  call temp:= `b`(v5, v3) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L142ec6.  v3:= temp;
  #L142ec8.  if v3 == 0 then goto L142e90;
  #L142ecc.  goto L142e62;
  #L142ece.  if v0 != 0 then goto L142edc;
  #L142ed2.  v0:= new `java.lang.StringBuilder`;
  #L142ed6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L142edc.  v3:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L142ee0.  v4:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L142ee4.  call temp:= `append`(v0, v3, v4, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L142eea.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L142eee.  v1:= v1 + v3 @kind int;
  #L142ef0.  v5.`com.b.a.d.a.f` @type ^`int` := v1;
  #L142ef4.  v1:= 1I;
  #L142ef6.  call temp:= `b`(v5, v1) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L142efc.  v1:= temp;
  #L142efe.  if v1 != 0 then goto L142f1e;
  #L142f02.  v1:= v2;
  #L142f04.  goto L142e90;
  #L142f06.  v2:= v5.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L142f0a.  v3:= v5.`com.b.a.d.a.f` @type ^`int`;
  #L142f0e.  call temp:= `append`(v0, v2, v3, v1) @signature `Ljava/lang/StringBuilder;.append:([CII)Ljava/lang/StringBuilder;` @kind virtual;
  #L142f14.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L142f1a.  v0:= temp @kind object;
  #L142f1c.  goto L142ea6;
  #L142f1e.  v1:= v2;
  #L142f20.  goto L142e62;
  #L142f22.  
  #L142f24.  switch v3
                  | 9 => goto L142e90
                  | 10 => goto L142e90
                  | 12 => goto L142e90
                  | 13 => goto L142e90
                  | 32 => goto L142e90
                  | 35 => goto L142e8a
                  | 44 => goto L142e90
                  | 47 => goto L142e8a
                  | 58 => goto L142e90
                  | 59 => goto L142e8a
                  | 61 => goto L142e8a
                  | 91 => goto L142e90
                  | 92 => goto L142e8a
                  | 93 => goto L142e90
                  | 123 => goto L142e90
                  | 125 => goto L142e90
                  | else => goto L142e84;
}
procedure `void` `u`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.u:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L142fb8.  v0:= 0I;
  #L142fba.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L142fbe.  v1:= v1 + v0 @kind int;
  #L142fc0.  v2:= v3.`com.b.a.d.a.g` @type ^`int`;
  #L142fc4.  if v1 >= v2 then goto L142ff4;
  #L142fc8.  v1:= v3.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L142fcc.  v2:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L142fd0.  v2:= v2 + v0 @kind int;
  #L142fd2.  v1:= v1[v2] @kind char;
  #L142fd6.  goto L143010;
  #L142fdc.  v0:= v0 + 1;
  #L142fe0.  goto L142fba;
  #L142fe2.  call `v`(v3) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L142fe8.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L142fec.  v0:= v0 + v1 @kind int;
  #L142fee.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L142ff2.  return @kind void;
  #L142ff4.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L142ff8.  v0:= v0 + v1 @kind int;
  #L142ffa.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L142ffe.  v0:= 1I;
  #L143000.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L143006.  v0:= temp;
  #L143008.  if v0 != 0 then goto L142fb8;
  #L14300c.  goto L142ff2;
  #L14300e.  
  #L143010.  switch v1
                  | 9 => goto L142fe8
                  | 10 => goto L142fe8
                  | 12 => goto L142fe8
                  | 13 => goto L142fe8
                  | 32 => goto L142fe8
                  | 35 => goto L142fe2
                  | 44 => goto L142fe8
                  | 47 => goto L142fe2
                  | 58 => goto L142fe8
                  | 59 => goto L142fe2
                  | 61 => goto L142fe2
                  | 91 => goto L142fe8
                  | 92 => goto L142fe2
                  | 93 => goto L142fe8
                  | 123 => goto L142fe8
                  | 125 => goto L142fe8
                  | else => goto L142fdc;
}
procedure `void` `v`(`com.b.a.d.a` v1 @kind this) @signature `Lcom/b/a/d/a;.v:()V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L1430a4.  v0:= v1.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L1430a8.  if v0 != 0 then goto L1430ba;
  #L1430ac.  v0:= "Use JsonReader.setLenient(true) to accept malformed JSON" @kind object;
  #L1430b0.  call temp:= `b`(v1, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L1430b6.  v0:= temp @kind object;
  #L1430b8.  throw v0;
  #L1430ba.  return @kind void;
}
procedure `void` `w`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.w:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1430cc.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L1430d0.  v1:= v3.`com.b.a.d.a.g` @type ^`int`;
  #L1430d4.  if v0 < v1 then goto L1430e6;
  #L1430d8.  v0:= 1I;
  #L1430da.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L1430e0.  v0:= temp;
  #L1430e2.  if v0 == 0 then goto L143116;
  #L1430e6.  v0:= v3.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L1430ea.  v1:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L1430ee.  v2:= v1 + 1;
  #L1430f2.  v3.`com.b.a.d.a.f` @type ^`int` := v2;
  #L1430f6.  v0:= v0[v1] @kind char;
  #L1430fa.  v1:= 10I;
  #L1430fe.  if v0 != v1 then goto L143118;
  #L143102.  v0:= v3.`com.b.a.d.a.h` @type ^`int`;
  #L143106.  v0:= v0 + 1;
  #L14310a.  v3.`com.b.a.d.a.h` @type ^`int` := v0;
  #L14310e.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L143112.  v3.`com.b.a.d.a.i` @type ^`int` := v0;
  #L143116.  return @kind void;
  #L143118.  v1:= 13I;
  #L14311c.  if v0 != v1 then goto L1430cc;
  #L143120.  goto L143116;
}
procedure `java.lang.String` `x`(`com.b.a.d.a` v4 @kind this) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L143134.  v0:= v4.`com.b.a.d.a.h` @type ^`int`;
  #L143138.  v0:= v0 + 1;
  #L14313c.  v1:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L143140.  v2:= v4.`com.b.a.d.a.i` @type ^`int`;
  #L143144.  v1:= v1 - v2 @kind int;
  #L143146.  v1:= v1 + 1;
  #L14314a.  v2:= new `java.lang.StringBuilder`;
  #L14314e.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143154.  v3:= " at line " @kind object;
  #L143158.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14315e.  v2:= temp @kind object;
  #L143160.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L143166.  v0:= temp @kind object;
  #L143168.  v2:= " column " @kind object;
  #L14316c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143172.  v0:= temp @kind object;
  #L143174.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L14317a.  v0:= temp @kind object;
  #L14317c.  v1:= " path " @kind object;
  #L143180.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143186.  v0:= temp @kind object;
  #L143188.  call temp:= `p`(v4) @signature `Lcom/b/a/d/a;.p:()Ljava/lang/String;` @kind virtual;
  #L14318e.  v1:= temp @kind object;
  #L143190.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143196.  v0:= temp @kind object;
  #L143198.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L14319e.  v0:= temp @kind object;
  #L1431a0.  return v0 @kind object;
}
procedure `char` `y`(`com.b.a.d.a` v7 @kind this) @signature `Lcom/b/a/d/a;.y:()C` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L1431b4.  v5:= 4I;
  #L1431b6.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L1431ba.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L1431be.  if v0 != v1 then goto L1431de;
  #L1431c2.  v0:= 1I;
  #L1431c4.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L1431ca.  v0:= temp;
  #L1431cc.  if v0 != 0 then goto L1431de;
  #L1431d0.  v0:= "Unterminated escape sequence" @kind object;
  #L1431d4.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L1431da.  v0:= temp @kind object;
  #L1431dc.  throw v0;
  #L1431de.  v0:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L1431e2.  v1:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L1431e6.  v2:= v1 + 1;
  #L1431ea.  v7.`com.b.a.d.a.f` @type ^`int` := v2;
  #L1431ee.  v0:= v0[v1] @kind char;
  #L1431f2.  goto L143334;
  #L1431f8.  v0:= "Invalid escape sequence" @kind object;
  #L1431fc.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L143202.  v0:= temp @kind object;
  #L143204.  throw v0;
  #L143206.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L14320a.  v0:= v0 + 4;
  #L14320e.  v1:= v7.`com.b.a.d.a.g` @type ^`int`;
  #L143212.  if v0 <= v1 then goto L143230;
  #L143216.  call temp:= `b`(v7, v5) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14321c.  v0:= temp;
  #L14321e.  if v0 != 0 then goto L143230;
  #L143222.  v0:= "Unterminated escape sequence" @kind object;
  #L143226.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L14322c.  v0:= temp @kind object;
  #L14322e.  throw v0;
  #L143230.  v1:= 0I;
  #L143232.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L143236.  v2:= v0 + 4;
  #L14323a.  v6:= v0;
  #L14323c.  v0:= v1;
  #L14323e.  v1:= v6;
  #L143240.  if v1 >= v2 then goto L1432f0;
  #L143244.  v3:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L143248.  v3:= v3[v1] @kind char;
  #L14324c.  v0:= v0 ^< 4;
  #L143250.  v0:= (`char`) v0 @kind i2c;
  #L143252.  v4:= 48I;
  #L143256.  if v3 < v4 then goto L143270;
  #L14325a.  v4:= 57I;
  #L14325e.  if v3 > v4 then goto L143270;
  #L143262.  v3:= v3 + -48;
  #L143266.  v0:= v0 + v3 @kind int;
  #L143268.  v0:= (`char`) v0 @kind i2c;
  #L14326a.  v1:= v1 + 1;
  #L14326e.  goto L143240;
  #L143270.  v4:= 97I;
  #L143274.  if v3 < v4 then goto L14328e;
  #L143278.  v4:= 102I;
  #L14327c.  if v3 > v4 then goto L14328e;
  #L143280.  v3:= v3 + -97;
  #L143284.  v3:= v3 + 10;
  #L143288.  v0:= v0 + v3 @kind int;
  #L14328a.  v0:= (`char`) v0 @kind i2c;
  #L14328c.  goto L14326a;
  #L14328e.  v4:= 65I;
  #L143292.  if v3 < v4 then goto L1432ac;
  #L143296.  v4:= 70I;
  #L14329a.  if v3 > v4 then goto L1432ac;
  #L14329e.  v3:= v3 + -65;
  #L1432a2.  v3:= v3 + 10;
  #L1432a6.  v0:= v0 + v3 @kind int;
  #L1432a8.  v0:= (`char`) v0 @kind i2c;
  #L1432aa.  goto L14326a;
  #L1432ac.  v0:= new `java.lang.NumberFormatException`;
  #L1432b0.  v1:= new `java.lang.StringBuilder`;
  #L1432b4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1432ba.  v2:= "\\u" @kind object;
  #L1432be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1432c4.  v1:= temp @kind object;
  #L1432c6.  v2:= new `java.lang.String`;
  #L1432ca.  v3:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L1432ce.  v4:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L1432d2.  call `<init>`(v2, v3, v4, v5) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L1432d8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1432de.  v1:= temp @kind object;
  #L1432e0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1432e6.  v1:= temp @kind object;
  #L1432e8.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1432ee.  throw v0;
  #L1432f0.  v1:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L1432f4.  v1:= v1 + 4;
  #L1432f8.  v7.`com.b.a.d.a.f` @type ^`int` := v1;
  #L1432fc.  return v0;
  #L1432fe.  v0:= 9I;
  #L143302.  goto L1432fc;
  #L143304.  v0:= 8I;
  #L143308.  goto L1432fc;
  #L14330a.  v0:= 10I;
  #L14330e.  goto L1432fc;
  #L143310.  v0:= 13I;
  #L143314.  goto L1432fc;
  #L143316.  v0:= 12I;
  #L14331a.  goto L1432fc;
  #L14331c.  v1:= v7.`com.b.a.d.a.h` @type ^`int`;
  #L143320.  v1:= v1 + 1;
  #L143324.  v7.`com.b.a.d.a.h` @type ^`int` := v1;
  #L143328.  v1:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L14332c.  v7.`com.b.a.d.a.i` @type ^`int` := v1;
  #L143330.  goto L1432fc;
  #L143332.  
  #L143334.  switch v0
                  | 10 => goto L14331c
                  | 34 => goto L1432fc
                  | 39 => goto L1432fc
                  | 47 => goto L1432fc
                  | 92 => goto L1432fc
                  | 98 => goto L143304
                  | 102 => goto L143316
                  | 110 => goto L14330a
                  | 114 => goto L143310
                  | 116 => goto L1432fe
                  | 117 => goto L143206
                  | else => goto L1431f8;
}
procedure `void` `z`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.z:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L1433a0.  v0:= 1I;
  #L1433a2.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L1433a8.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L1433ac.  v0:= v0 + -1;
  #L1433b0.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L1433b4.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L1433b8.  v1:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L1433bc.  v1:= length @variable v1;
  #L1433be.  v0:= v0 + v1 @kind int;
  #L1433c0.  v1:= v3.`com.b.a.d.a.g` @type ^`int`;
  #L1433c4.  if v0 <= v1 then goto L1433dc;
  #L1433c8.  v0:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L1433cc.  v0:= length @variable v0;
  #L1433ce.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L1433d4.  v0:= temp;
  #L1433d6.  if v0 != 0 then goto L1433dc;
  #L1433da.  return @kind void;
  #L1433dc.  v0:= 0I;
  #L1433de.  v1:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L1433e2.  v1:= length @variable v1;
  #L1433e4.  if v0 >= v1 then goto L143408;
  #L1433e8.  v1:= v3.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L1433ec.  v2:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L1433f0.  v2:= v2 + v0 @kind int;
  #L1433f2.  v1:= v1[v2] @kind char;
  #L1433f6.  v2:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L1433fa.  v2:= v2[v0] @kind char;
  #L1433fe.  if v1 != v2 then goto L1433da;
  #L143402.  v0:= v0 + 1;
  #L143406.  goto L1433de;
  #L143408.  v0:= v3.`com.b.a.d.a.f` @type ^`int`;
  #L14340c.  v1:= `@@com.b.a.d.a.b` @type ^`char`[] @kind object;
  #L143410.  v1:= length @variable v1;
  #L143412.  v0:= v0 + v1 @kind int;
  #L143414.  v3.`com.b.a.d.a.f` @type ^`int` := v0;
  #L143418.  goto L1433da;
}
procedure `void` `a`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L14342c.  v2:= 0I;
  #L14342e.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L143432.  if v0 != 0 then goto L14343e;
  #L143436.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14343c.  v0:= temp;
  #L14343e.  v1:= 3I;
  #L143440.  if v0 != v1 then goto L143462;
  #L143444.  v0:= 1I;
  #L143446.  call `a`(v3, v0) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L14344c.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L143450.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L143454.  v1:= v1 + -1;
  #L143458.  v0[v1]:= v2;
  #L14345c.  v3.`com.b.a.d.a.a` @type ^`int` := v2;
  #L143460.  return @kind void;
  #L143462.  v0:= new `java.lang.IllegalStateException`;
  #L143466.  v1:= new `java.lang.StringBuilder`;
  #L14346a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143470.  v2:= "Expected BEGIN_ARRAY but was " @kind object;
  #L143474.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14347a.  v1:= temp @kind object;
  #L14347c.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L143482.  v2:= temp @kind object;
  #L143484.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14348a.  v1:= temp @kind object;
  #L14348c.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L143492.  v2:= temp @kind object;
  #L143494.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14349a.  v1:= temp @kind object;
  #L14349c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1434a2.  v1:= temp @kind object;
  #L1434a4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1434aa.  throw v0;
}
procedure `void` `a`(`com.b.a.d.a` v0 @kind this, `boolean` v1 ) @signature `Lcom/b/a/d/a;.a:(Z)V` @AccessFlag PUBLIC_FINAL {
    temp;

  #L1434bc.  v0.`com.b.a.d.a.d` @type ^`boolean` := v1 @kind boolean;
  #L1434c0.  return @kind void;
}
procedure `void` `b`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1434d4.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L1434d8.  if v0 != 0 then goto L1434e4;
  #L1434dc.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L1434e2.  v0:= temp;
  #L1434e4.  v1:= 4I;
  #L1434e6.  if v0 != v1 then goto L143516;
  #L1434ea.  v0:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L1434ee.  v0:= v0 + -1;
  #L1434f2.  v3.`com.b.a.d.a.n` @type ^`int` := v0;
  #L1434f6.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L1434fa.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L1434fe.  v1:= v1 + -1;
  #L143502.  v2:= v0[v1];
  #L143506.  v2:= v2 + 1;
  #L14350a.  v0[v1]:= v2;
  #L14350e.  v0:= 0I;
  #L143510.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L143514.  return @kind void;
  #L143516.  v0:= new `java.lang.IllegalStateException`;
  #L14351a.  v1:= new `java.lang.StringBuilder`;
  #L14351e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143524.  v2:= "Expected END_ARRAY but was " @kind object;
  #L143528.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14352e.  v1:= temp @kind object;
  #L143530.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L143536.  v2:= temp @kind object;
  #L143538.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14353e.  v1:= temp @kind object;
  #L143540.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L143546.  v2:= temp @kind object;
  #L143548.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14354e.  v1:= temp @kind object;
  #L143550.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L143556.  v1:= temp @kind object;
  #L143558.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14355e.  throw v0;
}
procedure `void` `c`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.c:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L143570.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L143574.  if v0 != 0 then goto L143580;
  #L143578.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14357e.  v0:= temp;
  #L143580.  v1:= 1I;
  #L143582.  if v0 != v1 then goto L143596;
  #L143586.  v0:= 3I;
  #L143588.  call `a`(v3, v0) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L14358e.  v0:= 0I;
  #L143590.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L143594.  return @kind void;
  #L143596.  v0:= new `java.lang.IllegalStateException`;
  #L14359a.  v1:= new `java.lang.StringBuilder`;
  #L14359e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1435a4.  v2:= "Expected BEGIN_OBJECT but was " @kind object;
  #L1435a8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1435ae.  v1:= temp @kind object;
  #L1435b0.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L1435b6.  v2:= temp @kind object;
  #L1435b8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1435be.  v1:= temp @kind object;
  #L1435c0.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L1435c6.  v2:= temp @kind object;
  #L1435c8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1435ce.  v1:= temp @kind object;
  #L1435d0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1435d6.  v1:= temp @kind object;
  #L1435d8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1435de.  throw v0;
}
procedure `void` `close`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1435f0.  v2:= 0I;
  #L1435f2.  v3.`com.b.a.d.a.a` @type ^`int` := v2;
  #L1435f6.  v0:= v3.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L1435fa.  v1:= 8I;
  #L1435fe.  v0[v2]:= v1;
  #L143602.  v0:= 1I;
  #L143604.  v3.`com.b.a.d.a.n` @type ^`int` := v0;
  #L143608.  v0:= v3.`com.b.a.d.a.c` @type ^`java.io.Reader` @kind object;
  #L14360c.  call `close`(v0) @signature `Ljava/io/Reader;.close:()V` @kind virtual;
  #L143612.  return @kind void;
}
procedure `void` `d`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.d:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L143624.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L143628.  if v0 != 0 then goto L143634;
  #L14362c.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L143632.  v0:= temp;
  #L143634.  v1:= 2I;
  #L143636.  if v0 != v1 then goto L143674;
  #L14363a.  v0:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L14363e.  v0:= v0 + -1;
  #L143642.  v3.`com.b.a.d.a.n` @type ^`int` := v0;
  #L143646.  v0:= v3.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L14364a.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L14364e.  v2:= 0I;
  #L143650.  v0[v1]:= v2 @kind object;
  #L143654.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L143658.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L14365c.  v1:= v1 + -1;
  #L143660.  v2:= v0[v1];
  #L143664.  v2:= v2 + 1;
  #L143668.  v0[v1]:= v2;
  #L14366c.  v0:= 0I;
  #L14366e.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L143672.  return @kind void;
  #L143674.  v0:= new `java.lang.IllegalStateException`;
  #L143678.  v1:= new `java.lang.StringBuilder`;
  #L14367c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143682.  v2:= "Expected END_OBJECT but was " @kind object;
  #L143686.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14368c.  v1:= temp @kind object;
  #L14368e.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L143694.  v2:= temp @kind object;
  #L143696.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14369c.  v1:= temp @kind object;
  #L14369e.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L1436a4.  v2:= temp @kind object;
  #L1436a6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1436ac.  v1:= temp @kind object;
  #L1436ae.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1436b4.  v1:= temp @kind object;
  #L1436b6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1436bc.  throw v0;
}
procedure `boolean` `e`(`com.b.a.d.a` v2 @kind this) @signature `Lcom/b/a/d/a;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1436d0.  v0:= v2.`com.b.a.d.a.a` @type ^`int`;
  #L1436d4.  if v0 != 0 then goto L1436e0;
  #L1436d8.  call temp:= `r`(v2) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L1436de.  v0:= temp;
  #L1436e0.  v1:= 2I;
  #L1436e2.  if v0 == v1 then goto L1436f0;
  #L1436e6.  v1:= 4I;
  #L1436e8.  if v0 == v1 then goto L1436f0;
  #L1436ec.  v0:= 1I;
  #L1436ee.  return v0;
  #L1436f0.  v0:= 0I;
  #L1436f2.  goto L1436ee;
}
procedure `com.b.a.d.b` `f`(`com.b.a.d.a` v1 @kind this) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L143704.  v0:= v1.`com.b.a.d.a.a` @type ^`int`;
  #L143708.  if v0 != 0 then goto L143714;
  #L14370c.  call temp:= `r`(v1) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L143712.  v0:= temp;
  #L143714.  goto L143764;
  #L14371a.  v0:= new `java.lang.AssertionError`;
  #L14371e.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L143724.  throw v0;
  #L143726.  v0:= `@@com.b.a.d.b.c` @type ^`com.b.a.d.b` @kind object;
  #L14372a.  return v0 @kind object;
  #L14372c.  v0:= `@@com.b.a.d.b.d` @type ^`com.b.a.d.b` @kind object;
  #L143730.  goto L14372a;
  #L143732.  v0:= `@@com.b.a.d.b.a` @type ^`com.b.a.d.b` @kind object;
  #L143736.  goto L14372a;
  #L143738.  v0:= `@@com.b.a.d.b.b` @type ^`com.b.a.d.b` @kind object;
  #L14373c.  goto L14372a;
  #L14373e.  v0:= `@@com.b.a.d.b.e` @type ^`com.b.a.d.b` @kind object;
  #L143742.  goto L14372a;
  #L143744.  v0:= `@@com.b.a.d.b.h` @type ^`com.b.a.d.b` @kind object;
  #L143748.  goto L14372a;
  #L14374a.  v0:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L14374e.  goto L14372a;
  #L143750.  v0:= `@@com.b.a.d.b.f` @type ^`com.b.a.d.b` @kind object;
  #L143754.  goto L14372a;
  #L143756.  v0:= `@@com.b.a.d.b.g` @type ^`com.b.a.d.b` @kind object;
  #L14375a.  goto L14372a;
  #L14375c.  v0:= `@@com.b.a.d.b.j` @type ^`com.b.a.d.b` @kind object;
  #L143760.  goto L14372a;
  #L143762.  
  #L143764.  switch v0
                  | 1 => goto L143726
                  | 2 => goto L14372c
                  | 3 => goto L143732
                  | 4 => goto L143738
                  | 5 => goto L143744
                  | 6 => goto L143744
                  | 7 => goto L14374a
                  | 8 => goto L143750
                  | 9 => goto L143750
                  | 10 => goto L143750
                  | 11 => goto L143750
                  | 12 => goto L14373e
                  | 13 => goto L14373e
                  | 14 => goto L14373e
                  | 15 => goto L143756
                  | 16 => goto L143756
                  | 17 => goto L14375c
                  | else => goto L14371a;
}
procedure `java.lang.String` `g`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.g:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1437c0.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L1437c4.  if v0 != 0 then goto L1437d0;
  #L1437c8.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L1437ce.  v0:= temp;
  #L1437d0.  v1:= 14I;
  #L1437d4.  if v0 != v1 then goto L1437f8;
  #L1437d8.  call temp:= `t`(v3) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L1437de.  v0:= temp @kind object;
  #L1437e0.  v1:= 0I;
  #L1437e2.  v3.`com.b.a.d.a.a` @type ^`int` := v1;
  #L1437e6.  v1:= v3.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L1437ea.  v2:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L1437ee.  v2:= v2 + -1;
  #L1437f2.  v1[v2]:= v0 @kind object;
  #L1437f6.  return v0 @kind object;
  #L1437f8.  v1:= 12I;
  #L1437fc.  if v0 != v1 then goto L14380e;
  #L143800.  v0:= 39I;
  #L143804.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L14380a.  v0:= temp @kind object;
  #L14380c.  goto L1437e0;
  #L14380e.  v1:= 13I;
  #L143812.  if v0 != v1 then goto L143824;
  #L143816.  v0:= 34I;
  #L14381a.  call temp:= `b`(v3, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L143820.  v0:= temp @kind object;
  #L143822.  goto L1437e0;
  #L143824.  v0:= new `java.lang.IllegalStateException`;
  #L143828.  v1:= new `java.lang.StringBuilder`;
  #L14382c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143832.  v2:= "Expected a name but was " @kind object;
  #L143836.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14383c.  v1:= temp @kind object;
  #L14383e.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L143844.  v2:= temp @kind object;
  #L143846.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14384c.  v1:= temp @kind object;
  #L14384e.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L143854.  v2:= temp @kind object;
  #L143856.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14385c.  v1:= temp @kind object;
  #L14385e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L143864.  v1:= temp @kind object;
  #L143866.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14386c.  throw v0;
}
procedure `java.lang.String` `h`(`com.b.a.d.a` v4 @kind this) @signature `Lcom/b/a/d/a;.h:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L143880.  v0:= v4.`com.b.a.d.a.a` @type ^`int`;
  #L143884.  if v0 != 0 then goto L143890;
  #L143888.  call temp:= `r`(v4) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L14388e.  v0:= temp;
  #L143890.  v1:= 10I;
  #L143894.  if v0 != v1 then goto L1438c0;
  #L143898.  call temp:= `t`(v4) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L14389e.  v0:= temp @kind object;
  #L1438a0.  v1:= 0I;
  #L1438a2.  v4.`com.b.a.d.a.a` @type ^`int` := v1;
  #L1438a6.  v1:= v4.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L1438aa.  v2:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L1438ae.  v2:= v2 + -1;
  #L1438b2.  v3:= v1[v2];
  #L1438b6.  v3:= v3 + 1;
  #L1438ba.  v1[v2]:= v3;
  #L1438be.  return v0 @kind object;
  #L1438c0.  v1:= 8I;
  #L1438c4.  if v0 != v1 then goto L1438d6;
  #L1438c8.  v0:= 39I;
  #L1438cc.  call temp:= `b`(v4, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L1438d2.  v0:= temp @kind object;
  #L1438d4.  goto L1438a0;
  #L1438d6.  v1:= 9I;
  #L1438da.  if v0 != v1 then goto L1438ec;
  #L1438de.  v0:= 34I;
  #L1438e2.  call temp:= `b`(v4, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L1438e8.  v0:= temp @kind object;
  #L1438ea.  goto L1438a0;
  #L1438ec.  v1:= 11I;
  #L1438f0.  if v0 != v1 then goto L143900;
  #L1438f4.  v0:= v4.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L1438f8.  v1:= 0I;
  #L1438fa.  v4.`com.b.a.d.a.l` @type ^`java.lang.String` := v1 @kind object;
  #L1438fe.  goto L1438a0;
  #L143900.  v1:= 15I;
  #L143904.  if v0 != v1 then goto L143916;
  #L143908.  v0:= v4.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L14390c.  call temp:= `toString`(v0) @signature `Ljava/lang/Long;.toString:(J)Ljava/lang/String;` @kind static;
  #L143912.  v0:= temp @kind object;
  #L143914.  goto L1438a0;
  #L143916.  v1:= 16I;
  #L14391a.  if v0 != v1 then goto L143944;
  #L14391e.  v0:= new `java.lang.String`;
  #L143922.  v1:= v4.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L143926.  v2:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L14392a.  v3:= v4.`com.b.a.d.a.k` @type ^`int`;
  #L14392e.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L143934.  v1:= v4.`com.b.a.d.a.f` @type ^`int`;
  #L143938.  v2:= v4.`com.b.a.d.a.k` @type ^`int`;
  #L14393c.  v1:= v1 + v2 @kind int;
  #L14393e.  v4.`com.b.a.d.a.f` @type ^`int` := v1;
  #L143942.  goto L1438a0;
  #L143944.  v0:= new `java.lang.IllegalStateException`;
  #L143948.  v1:= new `java.lang.StringBuilder`;
  #L14394c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143952.  v2:= "Expected a string but was " @kind object;
  #L143956.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14395c.  v1:= temp @kind object;
  #L14395e.  call temp:= `f`(v4) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L143964.  v2:= temp @kind object;
  #L143966.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14396c.  v1:= temp @kind object;
  #L14396e.  call temp:= `x`(v4) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L143974.  v2:= temp @kind object;
  #L143976.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14397c.  v1:= temp @kind object;
  #L14397e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L143984.  v1:= temp @kind object;
  #L143986.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L14398c.  throw v0;
}
procedure `boolean` `i`(`com.b.a.d.a` v4 @kind this) @signature `Lcom/b/a/d/a;.i:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1439a0.  v0:= 0I;
  #L1439a2.  v1:= v4.`com.b.a.d.a.a` @type ^`int`;
  #L1439a6.  if v1 != 0 then goto L1439b2;
  #L1439aa.  call temp:= `r`(v4) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L1439b0.  v1:= temp;
  #L1439b2.  v2:= 5I;
  #L1439b4.  if v1 != v2 then goto L1439d8;
  #L1439b8.  v4.`com.b.a.d.a.a` @type ^`int` := v0;
  #L1439bc.  v0:= v4.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L1439c0.  v1:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L1439c4.  v1:= v1 + -1;
  #L1439c8.  v2:= v0[v1];
  #L1439cc.  v2:= v2 + 1;
  #L1439d0.  v0[v1]:= v2;
  #L1439d4.  v0:= 1I;
  #L1439d6.  return v0;
  #L1439d8.  v2:= 6I;
  #L1439da.  if v1 != v2 then goto L1439fc;
  #L1439de.  v4.`com.b.a.d.a.a` @type ^`int` := v0;
  #L1439e2.  v1:= v4.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L1439e6.  v2:= v4.`com.b.a.d.a.n` @type ^`int`;
  #L1439ea.  v2:= v2 + -1;
  #L1439ee.  v3:= v1[v2];
  #L1439f2.  v3:= v3 + 1;
  #L1439f6.  v1[v2]:= v3;
  #L1439fa.  goto L1439d6;
  #L1439fc.  v0:= new `java.lang.IllegalStateException`;
  #L143a00.  v1:= new `java.lang.StringBuilder`;
  #L143a04.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143a0a.  v2:= "Expected a boolean but was " @kind object;
  #L143a0e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143a14.  v1:= temp @kind object;
  #L143a16.  call temp:= `f`(v4) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L143a1c.  v2:= temp @kind object;
  #L143a1e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143a24.  v1:= temp @kind object;
  #L143a26.  call temp:= `x`(v4) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L143a2c.  v2:= temp @kind object;
  #L143a2e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143a34.  v1:= temp @kind object;
  #L143a36.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L143a3c.  v1:= temp @kind object;
  #L143a3e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L143a44.  throw v0;
}
procedure `void` `j`(`com.b.a.d.a` v3 @kind this) @signature `Lcom/b/a/d/a;.j:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L143a58.  v0:= v3.`com.b.a.d.a.a` @type ^`int`;
  #L143a5c.  if v0 != 0 then goto L143a68;
  #L143a60.  call temp:= `r`(v3) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L143a66.  v0:= temp;
  #L143a68.  v1:= 7I;
  #L143a6a.  if v0 != v1 then goto L143a8e;
  #L143a6e.  v0:= 0I;
  #L143a70.  v3.`com.b.a.d.a.a` @type ^`int` := v0;
  #L143a74.  v0:= v3.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L143a78.  v1:= v3.`com.b.a.d.a.n` @type ^`int`;
  #L143a7c.  v1:= v1 + -1;
  #L143a80.  v2:= v0[v1];
  #L143a84.  v2:= v2 + 1;
  #L143a88.  v0[v1]:= v2;
  #L143a8c.  return @kind void;
  #L143a8e.  v0:= new `java.lang.IllegalStateException`;
  #L143a92.  v1:= new `java.lang.StringBuilder`;
  #L143a96.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143a9c.  v2:= "Expected null but was " @kind object;
  #L143aa0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143aa6.  v1:= temp @kind object;
  #L143aa8.  call temp:= `f`(v3) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L143aae.  v2:= temp @kind object;
  #L143ab0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143ab6.  v1:= temp @kind object;
  #L143ab8.  call temp:= `x`(v3) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L143abe.  v2:= temp @kind object;
  #L143ac0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143ac6.  v1:= temp @kind object;
  #L143ac8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L143ace.  v1:= temp @kind object;
  #L143ad0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L143ad6.  throw v0;
}
procedure `double` `k`(`com.b.a.d.a` v6 @kind this) @signature `Lcom/b/a/d/a;.k:()D` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L143ae8.  v5:= 11I;
  #L143aec.  v2:= 8I;
  #L143af0.  v4:= 0I;
  #L143af2.  v0:= v6.`com.b.a.d.a.a` @type ^`int`;
  #L143af6.  if v0 != 0 then goto L143b02;
  #L143afa.  call temp:= `r`(v6) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L143b00.  v0:= temp;
  #L143b02.  v1:= 15I;
  #L143b06.  if v0 != v1 then goto L143b2e;
  #L143b0a.  v6.`com.b.a.d.a.a` @type ^`int` := v4;
  #L143b0e.  v0:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L143b12.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L143b16.  v1:= v1 + -1;
  #L143b1a.  v2:= v0[v1];
  #L143b1e.  v2:= v2 + 1;
  #L143b22.  v0[v1]:= v2;
  #L143b26.  v0:= v6.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L143b2a.  v0:= (`double`) v0 @kind l2d;
  #L143b2c.  return v0 @kind wide;
  #L143b2e.  v1:= 16I;
  #L143b32.  if v0 != v1 then goto L143bd0;
  #L143b36.  v0:= new `java.lang.String`;
  #L143b3a.  v1:= v6.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L143b3e.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L143b42.  v3:= v6.`com.b.a.d.a.k` @type ^`int`;
  #L143b46.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L143b4c.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L143b50.  v0:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L143b54.  v1:= v6.`com.b.a.d.a.k` @type ^`int`;
  #L143b58.  v0:= v0 + v1 @kind int;
  #L143b5a.  v6.`com.b.a.d.a.f` @type ^`int` := v0;
  #L143b5e.  v6.`com.b.a.d.a.a` @type ^`int` := v5;
  #L143b62.  v0:= v6.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L143b66.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L143b6c.  v0:= temp @kind wide;
  #L143b6e.  v2:= v6.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L143b72.  if v2 != 0 then goto L143c5c;
  #L143b76.  call temp:= `isNaN`(v0) @signature `Ljava/lang/Double;.isNaN:(D)Z` @kind static;
  #L143b7c.  v2:= temp;
  #L143b7e.  if v2 != 0 then goto L143b8e;
  #L143b82.  call temp:= `isInfinite`(v0) @signature `Ljava/lang/Double;.isInfinite:(D)Z` @kind static;
  #L143b88.  v2:= temp;
  #L143b8a.  if v2 == 0 then goto L143c5c;
  #L143b8e.  v2:= new `com.b.a.d.d`;
  #L143b92.  v3:= new `java.lang.StringBuilder`;
  #L143b96.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143b9c.  v4:= "JSON forbids NaN and infinities: " @kind object;
  #L143ba0.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143ba6.  v3:= temp @kind object;
  #L143ba8.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(D)Ljava/lang/StringBuilder;` @kind virtual;
  #L143bae.  v0:= temp @kind object;
  #L143bb0.  call temp:= `x`(v6) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L143bb6.  v1:= temp @kind object;
  #L143bb8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143bbe.  v0:= temp @kind object;
  #L143bc0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L143bc6.  v0:= temp @kind object;
  #L143bc8.  call `<init>`(v2, v0) @signature `Lcom/b/a/d/d;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L143bce.  throw v2;
  #L143bd0.  if v0 == v2 then goto L143bdc;
  #L143bd4.  v1:= 9I;
  #L143bd8.  if v0 != v1 then goto L143bf8;
  #L143bdc.  if v0 != v2 then goto L143bf2;
  #L143be0.  v0:= 39I;
  #L143be4.  call temp:= `b`(v6, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L143bea.  v0:= temp @kind object;
  #L143bec.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L143bf0.  goto L143b5e;
  #L143bf2.  v0:= 34I;
  #L143bf6.  goto L143be4;
  #L143bf8.  v1:= 10I;
  #L143bfc.  if v0 != v1 then goto L143c0e;
  #L143c00.  call temp:= `t`(v6) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L143c06.  v0:= temp @kind object;
  #L143c08.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L143c0c.  goto L143b5e;
  #L143c0e.  if v0 == v5 then goto L143b5e;
  #L143c12.  v0:= new `java.lang.IllegalStateException`;
  #L143c16.  v1:= new `java.lang.StringBuilder`;
  #L143c1a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143c20.  v2:= "Expected a double but was " @kind object;
  #L143c24.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143c2a.  v1:= temp @kind object;
  #L143c2c.  call temp:= `f`(v6) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L143c32.  v2:= temp @kind object;
  #L143c34.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143c3a.  v1:= temp @kind object;
  #L143c3c.  call temp:= `x`(v6) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L143c42.  v2:= temp @kind object;
  #L143c44.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143c4a.  v1:= temp @kind object;
  #L143c4c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L143c52.  v1:= temp @kind object;
  #L143c54.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L143c5a.  throw v0;
  #L143c5c.  v2:= 0I;
  #L143c5e.  v6.`com.b.a.d.a.l` @type ^`java.lang.String` := v2 @kind object;
  #L143c62.  v6.`com.b.a.d.a.a` @type ^`int` := v4;
  #L143c66.  v2:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L143c6a.  v3:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L143c6e.  v3:= v3 + -1;
  #L143c72.  v4:= v2[v3];
  #L143c76.  v4:= v4 + 1;
  #L143c7a.  v2[v3]:= v4;
  #L143c7e.  goto L143b2c;
}
procedure `long` `l`(`com.b.a.d.a` v7 @kind this) @signature `Lcom/b/a/d/a;.l:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L143c94.  v3:= 10I;
  #L143c98.  v2:= 8I;
  #L143c9c.  v6:= 0I;
  #L143c9e.  v0:= v7.`com.b.a.d.a.a` @type ^`int`;
  #L143ca2.  if v0 != 0 then goto L143cae;
  #L143ca6.  call temp:= `r`(v7) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L143cac.  v0:= temp;
  #L143cae.  v1:= 15I;
  #L143cb2.  if v0 != v1 then goto L143cd8;
  #L143cb6.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L143cba.  v0:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L143cbe.  v1:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L143cc2.  v1:= v1 + -1;
  #L143cc6.  v2:= v0[v1];
  #L143cca.  v2:= v2 + 1;
  #L143cce.  v0[v1]:= v2;
  #L143cd2.  v0:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L143cd6.  return v0 @kind wide;
  #L143cd8.  v1:= 16I;
  #L143cdc.  if v0 != v1 then goto L143d6e;
  #L143ce0.  v0:= new `java.lang.String`;
  #L143ce4.  v1:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L143ce8.  v2:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L143cec.  v3:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L143cf0.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L143cf6.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L143cfa.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L143cfe.  v1:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L143d02.  v0:= v0 + v1 @kind int;
  #L143d04.  v7.`com.b.a.d.a.f` @type ^`int` := v0;
  #L143d08.  v0:= 11I;
  #L143d0c.  v7.`com.b.a.d.a.a` @type ^`int` := v0;
  #L143d10.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L143d14.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L143d1a.  v2:= temp @kind wide;
  #L143d1c.  v0:= (`long`) v2 @kind d2l;
  #L143d1e.  v4:= (`double`) v0 @kind l2d;
  #L143d20.  v2:= dcmpl(v4, v2);
  #L143d24.  if v2 == 0 then goto L143e24;
  #L143d28.  v0:= new `java.lang.NumberFormatException`;
  #L143d2c.  v1:= new `java.lang.StringBuilder`;
  #L143d30.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143d36.  v2:= "Expected a long but was " @kind object;
  #L143d3a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143d40.  v1:= temp @kind object;
  #L143d42.  v2:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L143d46.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143d4c.  v1:= temp @kind object;
  #L143d4e.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L143d54.  v2:= temp @kind object;
  #L143d56.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143d5c.  v1:= temp @kind object;
  #L143d5e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L143d64.  v1:= temp @kind object;
  #L143d66.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L143d6c.  throw v0;
  #L143d6e.  if v0 == v2 then goto L143d7e;
  #L143d72.  v1:= 9I;
  #L143d76.  if v0 == v1 then goto L143d7e;
  #L143d7a.  if v0 != v3 then goto L143dda;
  #L143d7e.  if v0 != v3 then goto L143dbe;
  #L143d82.  call temp:= `t`(v7) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L143d88.  v0:= temp @kind object;
  #L143d8a.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #Try_start0.  
  #L143d8e.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L143d92.  call temp:= `parseLong`(v0) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L143d98.  v0:= temp @kind wide;
  #L143d9a.  v2:= 0I;
  #L143d9c.  v7.`com.b.a.d.a.a` @type ^`int` := v2;
  #L143da0.  v2:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L143da4.  v3:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L143da8.  v3:= v3 + -1;
  #L143dac.  v4:= v2[v3];
  #L143db0.  v4:= v4 + 1;
  #L143db4.  v2[v3]:= v4;
  #Try_end0.  
  #L143db8.  goto L143cd6;
  #L143dba.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L143dbc.  goto L143d08;
  #L143dbe.  if v0 != v2 then goto L143dd4;
  #L143dc2.  v0:= 39I;
  #L143dc6.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L143dcc.  v0:= temp @kind object;
  #L143dce.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L143dd2.  goto L143d8e;
  #L143dd4.  v0:= 34I;
  #L143dd8.  goto L143dc6;
  #L143dda.  v0:= new `java.lang.IllegalStateException`;
  #L143dde.  v1:= new `java.lang.StringBuilder`;
  #L143de2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143de8.  v2:= "Expected a long but was " @kind object;
  #L143dec.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143df2.  v1:= temp @kind object;
  #L143df4.  call temp:= `f`(v7) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L143dfa.  v2:= temp @kind object;
  #L143dfc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143e02.  v1:= temp @kind object;
  #L143e04.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L143e0a.  v2:= temp @kind object;
  #L143e0c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143e12.  v1:= temp @kind object;
  #L143e14.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L143e1a.  v1:= temp @kind object;
  #L143e1c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L143e22.  throw v0;
  #L143e24.  v2:= 0I;
  #L143e26.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v2 @kind object;
  #L143e2a.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L143e2e.  v2:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L143e32.  v3:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L143e36.  v3:= v3 + -1;
  #L143e3a.  v4:= v2[v3];
  #L143e3e.  v4:= v4 + 1;
  #L143e42.  v2[v3]:= v4;
  #L143e46.  goto L143cd6;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L143dba;
}
procedure `int` `m`(`com.b.a.d.a` v7 @kind this) @signature `Lcom/b/a/d/a;.m:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L143e6c.  v3:= 10I;
  #L143e70.  v2:= 8I;
  #L143e74.  v6:= 0I;
  #L143e76.  v0:= v7.`com.b.a.d.a.a` @type ^`int`;
  #L143e7a.  if v0 != 0 then goto L143e86;
  #L143e7e.  call temp:= `r`(v7) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L143e84.  v0:= temp;
  #L143e86.  v1:= 15I;
  #L143e8a.  if v0 != v1 then goto L143f06;
  #L143e8e.  v0:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L143e92.  v0:= (`int`) v0 @kind l2i;
  #L143e94.  v2:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L143e98.  v4:= (`long`) v0 @kind i2l;
  #L143e9a.  v1:= lcmp(v2, v4);
  #L143e9e.  if v1 == 0 then goto L143ee8;
  #L143ea2.  v0:= new `java.lang.NumberFormatException`;
  #L143ea6.  v1:= new `java.lang.StringBuilder`;
  #L143eaa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143eb0.  v2:= "Expected an int but was " @kind object;
  #L143eb4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143eba.  v1:= temp @kind object;
  #L143ebc.  v2:= v7.`com.b.a.d.a.j` @type ^`long` @kind wide;
  #L143ec0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L143ec6.  v1:= temp @kind object;
  #L143ec8.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L143ece.  v2:= temp @kind object;
  #L143ed0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143ed6.  v1:= temp @kind object;
  #L143ed8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L143ede.  v1:= temp @kind object;
  #L143ee0.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L143ee6.  throw v0;
  #L143ee8.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L143eec.  v1:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L143ef0.  v2:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L143ef4.  v2:= v2 + -1;
  #L143ef8.  v3:= v1[v2];
  #L143efc.  v3:= v3 + 1;
  #L143f00.  v1[v2]:= v3;
  #L143f04.  return v0;
  #L143f06.  v1:= 16I;
  #L143f0a.  if v0 != v1 then goto L143f9c;
  #L143f0e.  v0:= new `java.lang.String`;
  #L143f12.  v1:= v7.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L143f16.  v2:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L143f1a.  v3:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L143f1e.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L143f24.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L143f28.  v0:= v7.`com.b.a.d.a.f` @type ^`int`;
  #L143f2c.  v1:= v7.`com.b.a.d.a.k` @type ^`int`;
  #L143f30.  v0:= v0 + v1 @kind int;
  #L143f32.  v7.`com.b.a.d.a.f` @type ^`int` := v0;
  #L143f36.  v0:= 11I;
  #L143f3a.  v7.`com.b.a.d.a.a` @type ^`int` := v0;
  #L143f3e.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L143f42.  call temp:= `parseDouble`(v0) @signature `Ljava/lang/Double;.parseDouble:(Ljava/lang/String;)D` @kind static;
  #L143f48.  v2:= temp @kind wide;
  #L143f4a.  v0:= (`int`) v2 @kind d2i;
  #L143f4c.  v4:= (`double`) v0 @kind i2d;
  #L143f4e.  v1:= dcmpl(v4, v2);
  #L143f52.  if v1 == 0 then goto L144052;
  #L143f56.  v0:= new `java.lang.NumberFormatException`;
  #L143f5a.  v1:= new `java.lang.StringBuilder`;
  #L143f5e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L143f64.  v2:= "Expected an int but was " @kind object;
  #L143f68.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143f6e.  v1:= temp @kind object;
  #L143f70.  v2:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L143f74.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143f7a.  v1:= temp @kind object;
  #L143f7c.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L143f82.  v2:= temp @kind object;
  #L143f84.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L143f8a.  v1:= temp @kind object;
  #L143f8c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L143f92.  v1:= temp @kind object;
  #L143f94.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L143f9a.  throw v0;
  #L143f9c.  if v0 == v2 then goto L143fac;
  #L143fa0.  v1:= 9I;
  #L143fa4.  if v0 == v1 then goto L143fac;
  #L143fa8.  if v0 != v3 then goto L144008;
  #L143fac.  if v0 != v3 then goto L143fec;
  #L143fb0.  call temp:= `t`(v7) @signature `Lcom/b/a/d/a;.t:()Ljava/lang/String;` @kind direct;
  #L143fb6.  v0:= temp @kind object;
  #L143fb8.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #Try_start0.  
  #L143fbc.  v0:= v7.`com.b.a.d.a.l` @type ^`java.lang.String` @kind object;
  #L143fc0.  call temp:= `parseInt`(v0) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L143fc6.  v0:= temp;
  #L143fc8.  v1:= 0I;
  #L143fca.  v7.`com.b.a.d.a.a` @type ^`int` := v1;
  #L143fce.  v1:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L143fd2.  v2:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L143fd6.  v2:= v2 + -1;
  #L143fda.  v3:= v1[v2];
  #L143fde.  v3:= v3 + 1;
  #L143fe2.  v1[v2]:= v3;
  #Try_end0.  
  #L143fe6.  goto L143f04;
  #L143fe8.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L143fea.  goto L143f36;
  #L143fec.  if v0 != v2 then goto L144002;
  #L143ff0.  v0:= 39I;
  #L143ff4.  call temp:= `b`(v7, v0) @signature `Lcom/b/a/d/a;.b:(C)Ljava/lang/String;` @kind direct;
  #L143ffa.  v0:= temp @kind object;
  #L143ffc.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v0 @kind object;
  #L144000.  goto L143fbc;
  #L144002.  v0:= 34I;
  #L144006.  goto L143ff4;
  #L144008.  v0:= new `java.lang.IllegalStateException`;
  #L14400c.  v1:= new `java.lang.StringBuilder`;
  #L144010.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L144016.  v2:= "Expected an int but was " @kind object;
  #L14401a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144020.  v1:= temp @kind object;
  #L144022.  call temp:= `f`(v7) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L144028.  v2:= temp @kind object;
  #L14402a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144030.  v1:= temp @kind object;
  #L144032.  call temp:= `x`(v7) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L144038.  v2:= temp @kind object;
  #L14403a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144040.  v1:= temp @kind object;
  #L144042.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L144048.  v1:= temp @kind object;
  #L14404a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L144050.  throw v0;
  #L144052.  v1:= 0I;
  #L144054.  v7.`com.b.a.d.a.l` @type ^`java.lang.String` := v1 @kind object;
  #L144058.  v7.`com.b.a.d.a.a` @type ^`int` := v6;
  #L14405c.  v1:= v7.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L144060.  v2:= v7.`com.b.a.d.a.n` @type ^`int`;
  #L144064.  v2:= v2 + -1;
  #L144068.  v3:= v1[v2];
  #L14406c.  v3:= v3 + 1;
  #L144070.  v1[v2]:= v3;
  #L144074.  goto L143f04;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L143fe8;
}
procedure `void` `n`(`com.b.a.d.a` v6 @kind this) @signature `Lcom/b/a/d/a;.n:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L144098.  v5:= 3I;
  #L14409a.  v4:= 1I;
  #L14409c.  v1:= 0I;
  #L14409e.  v0:= v1;
  #L1440a0.  v2:= v6.`com.b.a.d.a.a` @type ^`int`;
  #L1440a4.  if v2 != 0 then goto L1440b0;
  #L1440a8.  call temp:= `r`(v6) @signature `Lcom/b/a/d/a;.r:()I` @kind virtual;
  #L1440ae.  v2:= temp;
  #L1440b0.  if v2 != v5 then goto L1440f4;
  #L1440b4.  call `a`(v6, v4) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L1440ba.  v0:= v0 + 1;
  #L1440be.  v6.`com.b.a.d.a.a` @type ^`int` := v1;
  #L1440c2.  if v0 != 0 then goto L1440a0;
  #L1440c6.  v0:= v6.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L1440ca.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L1440ce.  v1:= v1 + -1;
  #L1440d2.  v2:= v0[v1];
  #L1440d6.  v2:= v2 + 1;
  #L1440da.  v0[v1]:= v2;
  #L1440de.  v0:= v6.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L1440e2.  v1:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L1440e6.  v1:= v1 + -1;
  #L1440ea.  v2:= "null" @kind object;
  #L1440ee.  v0[v1]:= v2 @kind object;
  #L1440f2.  return @kind void;
  #L1440f4.  if v2 != v4 then goto L144104;
  #L1440f8.  call `a`(v6, v5) @signature `Lcom/b/a/d/a;.a:(I)V` @kind direct;
  #L1440fe.  v0:= v0 + 1;
  #L144102.  goto L1440be;
  #L144104.  v3:= 4I;
  #L144106.  if v2 != v3 then goto L14411c;
  #L14410a.  v2:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L14410e.  v2:= v2 + -1;
  #L144112.  v6.`com.b.a.d.a.n` @type ^`int` := v2;
  #L144116.  v0:= v0 + -1;
  #L14411a.  goto L1440be;
  #L14411c.  v3:= 2I;
  #L14411e.  if v2 != v3 then goto L144134;
  #L144122.  v2:= v6.`com.b.a.d.a.n` @type ^`int`;
  #L144126.  v2:= v2 + -1;
  #L14412a.  v6.`com.b.a.d.a.n` @type ^`int` := v2;
  #L14412e.  v0:= v0 + -1;
  #L144132.  goto L1440be;
  #L144134.  v3:= 14I;
  #L144138.  if v2 == v3 then goto L144144;
  #L14413c.  v3:= 10I;
  #L144140.  if v2 != v3 then goto L14414c;
  #L144144.  call `u`(v6) @signature `Lcom/b/a/d/a;.u:()V` @kind direct;
  #L14414a.  goto L1440be;
  #L14414c.  v3:= 8I;
  #L144150.  if v2 == v3 then goto L14415c;
  #L144154.  v3:= 12I;
  #L144158.  if v2 != v3 then goto L144168;
  #L14415c.  v2:= 39I;
  #L144160.  call `c`(v6, v2) @signature `Lcom/b/a/d/a;.c:(C)V` @kind direct;
  #L144166.  goto L1440be;
  #L144168.  v3:= 9I;
  #L14416c.  if v2 == v3 then goto L144178;
  #L144170.  v3:= 13I;
  #L144174.  if v2 != v3 then goto L144184;
  #L144178.  v2:= 34I;
  #L14417c.  call `c`(v6, v2) @signature `Lcom/b/a/d/a;.c:(C)V` @kind direct;
  #L144182.  goto L1440be;
  #L144184.  v3:= 16I;
  #L144188.  if v2 != v3 then goto L1440be;
  #L14418c.  v2:= v6.`com.b.a.d.a.f` @type ^`int`;
  #L144190.  v3:= v6.`com.b.a.d.a.k` @type ^`int`;
  #L144194.  v2:= v2 + v3 @kind int;
  #L144196.  v6.`com.b.a.d.a.f` @type ^`int` := v2;
  #L14419a.  goto L1440be;
}
procedure `java.lang.String` `p`(`com.b.a.d.a` v5 @kind this) @signature `Lcom/b/a/d/a;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L1441ac.  v0:= new `java.lang.StringBuilder`;
  #L1441b0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1441b6.  v1:= 36I;
  #L1441ba.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1441c0.  v1:= temp @kind object;
  #L1441c2.  v0:= 0I;
  #L1441c4.  v2:= v5.`com.b.a.d.a.n` @type ^`int`;
  #L1441c8.  if v0 >= v2 then goto L14422e;
  #L1441cc.  v3:= v5.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L1441d0.  v3:= v3[v0];
  #L1441d4.  goto L144238;
  #L1441da.  v0:= v0 + 1;
  #L1441de.  goto L1441c8;
  #L1441e0.  v3:= 91I;
  #L1441e4.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L1441ea.  v3:= temp @kind object;
  #L1441ec.  v4:= v5.`com.b.a.d.a.p` @type ^`int`[] @kind object;
  #L1441f0.  v4:= v4[v0];
  #L1441f4.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1441fa.  v3:= temp @kind object;
  #L1441fc.  v4:= 93I;
  #L144200.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L144206.  goto L1441da;
  #L144208.  v3:= 46I;
  #L14420c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L144212.  v3:= v5.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L144216.  v3:= v3[v0] @kind object;
  #L14421a.  if v3 == 0 then goto L1441da;
  #L14421e.  v3:= v5.`com.b.a.d.a.o` @type ^`java.lang.String`[] @kind object;
  #L144222.  v3:= v3[v0] @kind object;
  #L144226.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L14422c.  goto L1441da;
  #L14422e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L144234.  v0:= temp @kind object;
  #L144236.  return v0 @kind object;
  #L144238.  switch v3
                  | 1 => goto L1441e0
                  | 2 => goto L1441e0
                  | 3 => goto L144208
                  | 4 => goto L144208
                  | 5 => goto L144208
                  | else => goto L1441da;
}
procedure `boolean` `q`(`com.b.a.d.a` v1 @kind this) @signature `Lcom/b/a/d/a;.q:()Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;

  #L144264.  v0:= v1.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L144268.  return v0;
}
procedure `int` `r`(`com.b.a.d.a` v8 @kind this) @signature `Lcom/b/a/d/a;.r:()I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L14427c.  v3:= 7I;
  #L14427e.  v7:= 5I;
  #L144280.  v0:= 4I;
  #L144282.  v1:= 2I;
  #L144284.  v2:= 1I;
  #L144286.  v4:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14428a.  v5:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L14428e.  v5:= v5 + -1;
  #L144292.  v4:= v4[v5];
  #L144296.  if v4 != v2 then goto L1442d2;
  #L14429a.  v5:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14429e.  v6:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L1442a2.  v6:= v6 + -1;
  #L1442a6.  v5[v6]:= v1;
  #L1442aa.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L1442b0.  v5:= temp;
  #L1442b2.  goto L144560;
  #L1442b8.  v0:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L1442bc.  v0:= v0 + -1;
  #L1442c0.  v8.`com.b.a.d.a.f` @type ^`int` := v0;
  #L1442c4.  call temp:= `o`(v8) @signature `Lcom/b/a/d/a;.o:()I` @kind direct;
  #L1442ca.  v0:= temp;
  #L1442cc.  if v0 == 0 then goto L14451a;
  #L1442d0.  return v0;
  #L1442d2.  if v4 != v1 then goto L144300;
  #L1442d6.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L1442dc.  v5:= temp;
  #L1442de.  goto L14459c;
  #L1442e4.  v0:= "Unterminated array" @kind object;
  #L1442e8.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L1442ee.  v0:= temp @kind object;
  #L1442f0.  throw v0;
  #L1442f2.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L1442f6.  goto L1442d0;
  #L1442f8.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L1442fe.  goto L1442aa;
  #L144300.  v5:= 3I;
  #L144302.  if v4 == v5 then goto L14430a;
  #L144306.  if v4 != v7 then goto L1443c2;
  #L14430a.  v3:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14430e.  v5:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L144312.  v5:= v5 + -1;
  #L144316.  v3[v5]:= v0;
  #L14431a.  if v4 != v7 then goto L144348;
  #L14431e.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L144324.  v0:= temp;
  #L144326.  goto L1445b8;
  #L14432c.  v0:= "Unterminated object" @kind object;
  #L144330.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L144336.  v0:= temp @kind object;
  #L144338.  throw v0;
  #L14433a.  v8.`com.b.a.d.a.a` @type ^`int` := v1;
  #L14433e.  v0:= v1;
  #L144340.  goto L1442d0;
  #L144342.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L144348.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L14434e.  v0:= temp;
  #L144350.  goto L1445d4;
  #L144356.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L14435c.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L144360.  v1:= v1 + -1;
  #L144364.  v8.`com.b.a.d.a.f` @type ^`int` := v1;
  #L144368.  v0:= (`char`) v0 @kind i2c;
  #L14436a.  call temp:= `a`(v8, v0) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L144370.  v0:= temp;
  #L144372.  if v0 == 0 then goto L1443b4;
  #L144376.  v0:= 14I;
  #L14437a.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14437e.  goto L1442d0;
  #L144380.  v0:= 13I;
  #L144384.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L144388.  goto L1442d0;
  #L14438a.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L144390.  v0:= 12I;
  #L144394.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L144398.  goto L1442d0;
  #L14439a.  if v4 == v7 then goto L1443a6;
  #L14439e.  v8.`com.b.a.d.a.a` @type ^`int` := v1;
  #L1443a2.  v0:= v1;
  #L1443a4.  goto L1442d0;
  #L1443a6.  v0:= "Expected name" @kind object;
  #L1443aa.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L1443b0.  v0:= temp @kind object;
  #L1443b2.  throw v0;
  #L1443b4.  v0:= "Expected name" @kind object;
  #L1443b8.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L1443be.  v0:= temp @kind object;
  #L1443c0.  throw v0;
  #L1443c2.  if v4 != v0 then goto L144434;
  #L1443c6.  v5:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L1443ca.  v6:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L1443ce.  v6:= v6 + -1;
  #L1443d2.  v5[v6]:= v7;
  #L1443d6.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L1443dc.  v5:= temp;
  #L1443de.  goto L1445f0;
  #L1443e4.  v0:= "Expected ':'" @kind object;
  #L1443e8.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L1443ee.  v0:= temp @kind object;
  #L1443f0.  throw v0;
  #L1443f2.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L1443f8.  v5:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L1443fc.  v6:= v8.`com.b.a.d.a.g` @type ^`int`;
  #L144400.  if v5 < v6 then goto L144410;
  #L144404.  call temp:= `b`(v8, v2) @signature `Lcom/b/a/d/a;.b:(I)Z` @kind direct;
  #L14440a.  v5:= temp;
  #L14440c.  if v5 == 0 then goto L1442aa;
  #L144410.  v5:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L144414.  v6:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L144418.  v5:= v5[v6] @kind char;
  #L14441c.  v6:= 62I;
  #L144420.  if v5 != v6 then goto L1442aa;
  #L144424.  v5:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L144428.  v5:= v5 + 1;
  #L14442c.  v8.`com.b.a.d.a.f` @type ^`int` := v5;
  #L144430.  goto L1442aa;
  #L144434.  v5:= 6I;
  #L144436.  if v4 != v5 then goto L14445c;
  #L14443a.  v5:= v8.`com.b.a.d.a.d` @type ^`boolean` @kind boolean;
  #L14443e.  if v5 == 0 then goto L144448;
  #L144442.  call `z`(v8) @signature `Lcom/b/a/d/a;.z:()V` @kind direct;
  #L144448.  v5:= v8.`com.b.a.d.a.m` @type ^`int`[] @kind object;
  #L14444c.  v6:= v8.`com.b.a.d.a.n` @type ^`int`;
  #L144450.  v6:= v6 + -1;
  #L144454.  v5[v6]:= v3;
  #L144458.  goto L1442aa;
  #L14445c.  if v4 != v3 then goto L144492;
  #L144460.  v5:= 0I;
  #L144462.  call temp:= `b`(v8, v5) @signature `Lcom/b/a/d/a;.b:(Z)I` @kind direct;
  #L144468.  v5:= temp;
  #L14446a.  v6:= -1I;
  #L14446c.  if v5 != v6 then goto L14447c;
  #L144470.  v0:= 17I;
  #L144474.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L144478.  goto L1442d0;
  #L14447c.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L144482.  v5:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L144486.  v5:= v5 + -1;
  #L14448a.  v8.`com.b.a.d.a.f` @type ^`int` := v5;
  #L14448e.  goto L1442aa;
  #L144492.  v5:= 8I;
  #L144496.  if v4 != v5 then goto L1442aa;
  #L14449a.  v0:= new `java.lang.IllegalStateException`;
  #L14449e.  v1:= "JsonReader is closed" @kind object;
  #L1444a2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1444a8.  throw v0;
  #L1444aa.  if v4 != v2 then goto L1444b6;
  #L1444ae.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L1444b2.  goto L1442d0;
  #L1444b6.  if v4 == v2 then goto L1444be;
  #L1444ba.  if v4 != v1 then goto L1444da;
  #L1444be.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L1444c4.  v0:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L1444c8.  v0:= v0 + -1;
  #L1444cc.  v8.`com.b.a.d.a.f` @type ^`int` := v0;
  #L1444d0.  v8.`com.b.a.d.a.a` @type ^`int` := v3;
  #L1444d4.  v0:= v3;
  #L1444d6.  goto L1442d0;
  #L1444da.  v0:= "Unexpected value" @kind object;
  #L1444de.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L1444e4.  v0:= temp @kind object;
  #L1444e6.  throw v0;
  #L1444e8.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L1444ee.  v0:= 8I;
  #L1444f2.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L1444f6.  goto L1442d0;
  #L1444fa.  v0:= 9I;
  #L1444fe.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L144502.  goto L1442d0;
  #L144506.  v0:= 3I;
  #L144508.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14450c.  goto L1442d0;
  #L144510.  v8.`com.b.a.d.a.a` @type ^`int` := v2;
  #L144514.  v0:= v2;
  #L144516.  goto L1442d0;
  #L14451a.  call temp:= `s`(v8) @signature `Lcom/b/a/d/a;.s:()I` @kind direct;
  #L144520.  v0:= temp;
  #L144522.  if v0 != 0 then goto L1442d0;
  #L144526.  v0:= v8.`com.b.a.d.a.e` @type ^`char`[] @kind object;
  #L14452a.  v1:= v8.`com.b.a.d.a.f` @type ^`int`;
  #L14452e.  v0:= v0[v1] @kind char;
  #L144532.  call temp:= `a`(v8, v0) @signature `Lcom/b/a/d/a;.a:(C)Z` @kind direct;
  #L144538.  v0:= temp;
  #L14453a.  if v0 != 0 then goto L14454c;
  #L14453e.  v0:= "Expected value" @kind object;
  #L144542.  call temp:= `b`(v8, v0) @signature `Lcom/b/a/d/a;.b:(Ljava/lang/String;)Ljava/io/IOException;` @kind direct;
  #L144548.  v0:= temp @kind object;
  #L14454a.  throw v0;
  #L14454c.  call `v`(v8) @signature `Lcom/b/a/d/a;.v:()V` @kind direct;
  #L144552.  v0:= 10I;
  #L144556.  v8.`com.b.a.d.a.a` @type ^`int` := v0;
  #L14455a.  goto L1442d0;
  #L14455e.  
  #L144560.  switch v5
                  | 34 => goto L1444fa
                  | 39 => goto L1444e8
                  | 44 => goto L1444b6
                  | 59 => goto L1444b6
                  | 91 => goto L144506
                  | 93 => goto L1444aa
                  | 123 => goto L144510
                  | else => goto L1442b8;
  #L14459c.  switch v5
                  | 44 => goto L1442aa
                  | 59 => goto L1442f8
                  | 93 => goto L1442f2
                  | else => goto L1442e4;
  #L1445b8.  switch v0
                  | 44 => goto L144348
                  | 59 => goto L144342
                  | 125 => goto L14433a
                  | else => goto L14432c;
  #L1445d4.  switch v0
                  | 34 => goto L144380
                  | 39 => goto L14438a
                  | 125 => goto L14439a
                  | else => goto L144356;
  #L1445f0.  switch v5
                  | 58 => goto L1442aa
                  | 59 => goto L1443e4
                  | 60 => goto L1443e4
                  | 61 => goto L1443f2
                  | else => goto L1443e4;
}
procedure `java.lang.String` `toString`(`com.b.a.d.a` v2 @kind this) @signature `Lcom/b/a/d/a;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L144618.  v0:= new `java.lang.StringBuilder`;
  #L14461c.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L144622.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L144628.  v1:= temp @kind object;
  #L14462a.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L144630.  v1:= temp @kind object;
  #L144632.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144638.  v0:= temp @kind object;
  #L14463a.  call temp:= `x`(v2) @signature `Lcom/b/a/d/a;.x:()Ljava/lang/String;` @kind direct;
  #L144640.  v1:= temp @kind object;
  #L144642.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L144648.  v0:= temp @kind object;
  #L14464a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L144650.  v0:= temp @kind object;
  #L144652.  return v0 @kind object;
}
