record `com.b.a.b.a.i$a` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.v` @kind class {
  `com.b.a.b.h` `com.b.a.b.a.i$a.a` @AccessFlag PRIVATE_FINAL;
  `java.util.Map` `com.b.a.b.a.i$a.b` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.b.a.i$a` v0 @kind this, `com.b.a.b.h` v1 @kind object, `java.util.Map` v2 @kind object) @signature `Lcom/b/a/b/a/i$a;.<init>:(Lcom/b/a/b/h;Ljava/util/Map;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L1467b4.  call `<init>`(v0) @signature `Lcom/b/a/v;.<init>:()V` @kind direct;
  #L1467ba.  v0.`com.b.a.b.a.i$a.a` @type ^`com.b.a.b.h` := v1 @kind object;
  #L1467be.  v0.`com.b.a.b.a.i$a.b` @type ^`java.util.Map` := v2 @kind object;
  #L1467c2.  return @kind void;
}
procedure `void` `a`(`com.b.a.b.a.i$a` v3 @kind this, `com.b.a.d.c` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lcom/b/a/b/a/i$a;.a:(Lcom/b/a/d/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1467d4.  if v5 != 0 then goto L1467e0;
  #L1467d8.  call temp:= `f`(v4) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L1467de.  return @kind void;
  #L1467e0.  call temp:= `d`(v4) @signature `Lcom/b/a/d/c;.d:()Lcom/b/a/d/c;` @kind virtual;
  #Try_start0.  
  #L1467e6.  v0:= v3.`com.b.a.b.a.i$a.b` @type ^`java.util.Map` @kind object;
  #L1467ea.  call temp:= `values`(v0) @signature `Ljava/util/Map;.values:()Ljava/util/Collection;` @kind interface;
  #L1467f0.  v0:= temp @kind object;
  #L1467f2.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L1467f8.  v1:= temp @kind object;
  #L1467fa.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L146800.  v0:= temp;
  #L146802.  if v0 == 0 then goto L14683e;
  #L146806.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L14680c.  v0:= temp @kind object;
  #L14680e.  v0:= (`com.b.a.b.a.i$b`) v0 @kind object;
  #L146812.  call temp:= `a`(v0, v5) @signature `Lcom/b/a/b/a/i$b;.a:(Ljava/lang/Object;)Z` @kind virtual;
  #L146818.  v2:= temp;
  #L14681a.  if v2 == 0 then goto L1467fa;
  #L14681e.  v2:= v0.`com.b.a.b.a.i$b.h` @type ^`java.lang.String` @kind object;
  #L146822.  call temp:= `a`(v4, v2) @signature `Lcom/b/a/d/c;.a:(Ljava/lang/String;)Lcom/b/a/d/c;` @kind virtual;
  #L146828.  call `a`(v0, v4, v5) @signature `Lcom/b/a/b/a/i$b;.a:(Lcom/b/a/d/c;Ljava/lang/Object;)V` @kind virtual;
  #Try_end0.  
  #L14682e.  goto L1467fa;
  #L146830.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L146832.  v1:= new `java.lang.AssertionError`;
  #L146836.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L14683c.  throw v1;
  #L14683e.  call temp:= `e`(v4) @signature `Lcom/b/a/d/c;.e:()Lcom/b/a/d/c;` @kind virtual;
  #L146844.  goto L1467de;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L146830;
}
procedure `java.lang.Object` `b`(`com.b.a.b.a.i$a` v3 @kind this, `com.b.a.d.a` v4 @kind object) @signature `Lcom/b/a/b/a/i$a;.b:(Lcom/b/a/d/a;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L146868.  call temp:= `f`(v4) @signature `Lcom/b/a/d/a;.f:()Lcom/b/a/d/b;` @kind virtual;
  #L14686e.  v0:= temp @kind object;
  #L146870.  v1:= `@@com.b.a.d.b.i` @type ^`com.b.a.d.b` @kind object;
  #L146874.  if v0 != v1 then goto L146882;
  #L146878.  call `j`(v4) @signature `Lcom/b/a/d/a;.j:()V` @kind virtual;
  #L14687e.  v0:= 0I;
  #L146880.  return v0 @kind object;
  #L146882.  v0:= v3.`com.b.a.b.a.i$a.a` @type ^`com.b.a.b.h` @kind object;
  #L146886.  call temp:= `a`(v0) @signature `Lcom/b/a/b/h;.a:()Ljava/lang/Object;` @kind interface;
  #L14688c.  v1:= temp @kind object;
  #Try_start0.  
  #L14688e.  call `c`(v4) @signature `Lcom/b/a/d/a;.c:()V` @kind virtual;
  #L146894.  call temp:= `e`(v4) @signature `Lcom/b/a/d/a;.e:()Z` @kind virtual;
  #L14689a.  v0:= temp;
  #L14689c.  if v0 == 0 then goto L1468f0;
  #L1468a0.  call temp:= `g`(v4) @signature `Lcom/b/a/d/a;.g:()Ljava/lang/String;` @kind virtual;
  #L1468a6.  v0:= temp @kind object;
  #L1468a8.  v2:= v3.`com.b.a.b.a.i$a.b` @type ^`java.util.Map` @kind object;
  #L1468ac.  call temp:= `get`(v2, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1468b2.  v0:= temp @kind object;
  #L1468b4.  v0:= (`com.b.a.b.a.i$b`) v0 @kind object;
  #L1468b8.  if v0 == 0 then goto L1468c4;
  #L1468bc.  v2:= v0.`com.b.a.b.a.i$b.j` @type ^`boolean` @kind boolean;
  #L1468c0.  if v2 != 0 then goto L1468da;
  #L1468c4.  call `n`(v4) @signature `Lcom/b/a/d/a;.n:()V` @kind virtual;
  #Try_end0.  
  #L1468ca.  goto L146894;
  #L1468cc.  v0:= Exception @type ^`java.lang.IllegalStateException` @kind object;
  #L1468ce.  v1:= new `com.b.a.t`;
  #L1468d2.  call `<init>`(v1, v0) @signature `Lcom/b/a/t;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1468d8.  throw v1;
  #Try_start1.  
  #L1468da.  call `a`(v0, v4, v1) @signature `Lcom/b/a/b/a/i$b;.a:(Lcom/b/a/d/a;Ljava/lang/Object;)V` @kind virtual;
  #Try_end1.  
  #L1468e0.  goto L146894;
  #L1468e2.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L1468e4.  v1:= new `java.lang.AssertionError`;
  #L1468e8.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1468ee.  throw v1;
  #L1468f0.  call `d`(v4) @signature `Lcom/b/a/d/a;.d:()V` @kind virtual;
  #L1468f6.  v0:= v1 @kind object;
  #L1468f8.  goto L146880;
  catch `java.lang.IllegalStateException` @[Try_start0..Try_end0] goto L1468cc;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L1468e2;
  catch `java.lang.IllegalStateException` @[Try_start1..Try_end1] goto L1468cc;
  catch `java.lang.IllegalAccessException` @[Try_start1..Try_end1] goto L1468e2;
}
