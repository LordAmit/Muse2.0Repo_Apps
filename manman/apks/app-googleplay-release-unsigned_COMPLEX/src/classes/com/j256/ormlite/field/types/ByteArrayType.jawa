record `com.j256.ormlite.field.types.ByteArrayType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `com.j256.ormlite.field.types.ByteArrayType` `@@com.j256.ormlite.field.types.ByteArrayType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L161638.  v0:= new `com.j256.ormlite.field.types.ByteArrayType`;
  #L16163c.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.<init>:()V` @kind direct;
  #L161642.  `@@com.j256.ormlite.field.types.ByteArrayType.singleTon` @type ^`com.j256.ormlite.field.types.ByteArrayType` := v0 @kind object;
  #L161646.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.ByteArrayType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L161658.  v0:= `@@com.j256.ormlite.field.SqlType.BYTE_ARRAY` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L16165c.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L161662.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.ByteArrayType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L161674.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L16167a.  return @kind void;
}
procedure `com.j256.ormlite.field.types.ByteArrayType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.getSingleton:()Lcom/j256/ormlite/field/types/ByteArrayType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L16168c.  v0:= `@@com.j256.ormlite.field.types.ByteArrayType.singleTon` @type ^`com.j256.ormlite.field.types.ByteArrayType` @kind object;
  #L161690.  return v0 @kind object;
}
procedure `boolean` `dataIsEqual`(`com.j256.ormlite.field.types.ByteArrayType` v1 @kind this, `java.lang.Object` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.dataIsEqual:(Ljava/lang/Object;Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1616a4.  v0:= 0I;
  #L1616a6.  if v2 != 0 then goto L1616b2;
  #L1616aa.  if v3 != 0 then goto L1616b0;
  #L1616ae.  v0:= 1I;
  #L1616b0.  return v0;
  #L1616b2.  if v3 == 0 then goto L1616b0;
  #L1616b6.  v2:= (`byte`[]) v2 @kind object;
  #L1616ba.  v2:= (`byte`[]) v2 @kind object;
  #L1616be.  v3:= (`byte`[]) v3 @kind object;
  #L1616c2.  v3:= (`byte`[]) v3 @kind object;
  #L1616c6.  call temp:= `equals`(v2, v3) @signature `Ljava/util/Arrays;.equals:([B[B)Z` @kind static;
  #L1616cc.  v0:= temp;
  #L1616ce.  goto L1616b0;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.ByteArrayType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1616e0.  v0:= constclass @type ^`byte`[] @kind object;
  #L1616e4.  return v0 @kind object;
}
procedure `boolean` `isArgumentHolderRequired`(`com.j256.ormlite.field.types.ByteArrayType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.isArgumentHolderRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1616f8.  v0:= 1I;
  #L1616fa.  return v0;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.ByteArrayType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16170c.  if v3 != 0 then goto L161714;
  #L161710.  v0:= 0I;
  #L161712.  return v0 @kind object;
  #L161714.  call temp:= `getBytes`(v3) @signature `Ljava/lang/String;.getBytes:()[B` @kind virtual;
  #L16171a.  v0:= temp @kind object;
  #L16171c.  goto L161712;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.ByteArrayType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L161730.  call temp:= `getBytes`(v3) @signature `Ljava/lang/String;.getBytes:()[B` @kind virtual;
  #L161736.  v0:= temp @kind object;
  #L161738.  return v0 @kind object;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.ByteArrayType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/ByteArrayType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16174c.  call temp:= `getBytes`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getBytes:(I)[B` @kind interface;
  #L161752.  v0:= temp @kind object;
  #L161754.  v0:= (`byte`[]) v0 @kind object;
  #L161758.  return v0 @kind object;
}
