record `com.j256.ormlite.field.types.UuidType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `int` `@@com.j256.ormlite.field.types.UuidType.DEFAULT_WIDTH` @AccessFlag PUBLIC_STATIC;
global `com.j256.ormlite.field.types.UuidType` `@@com.j256.ormlite.field.types.UuidType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/UuidType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L163124.  v0:= 48I;
  #L163128.  `@@com.j256.ormlite.field.types.UuidType.DEFAULT_WIDTH` @type ^`int` := v0;
  #L16312c.  v0:= new `com.j256.ormlite.field.types.UuidType`;
  #L163130.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:()V` @kind direct;
  #L163136.  `@@com.j256.ormlite.field.types.UuidType.singleTon` @type ^`com.j256.ormlite.field.types.UuidType` := v0 @kind object;
  #L16313a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.UuidType` v4 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16314c.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L163150.  v1:= 1I;
  #L163152.  v1:= new `java.lang.Class`[v1];
  #L163156.  v2:= 0I;
  #L163158.  v3:= constclass @type ^`java.util.UUID` @kind object;
  #L16315c.  v1[v2]:= v3 @kind object;
  #L163160.  call `<init>`(v4, v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L163166.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.UuidType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L163178.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L16317e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.UuidType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L163190.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L163196.  return @kind void;
}
procedure `com.j256.ormlite.field.types.UuidType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/UuidType;.getSingleton:()Lcom/j256/ormlite/field/types/UuidType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1631a8.  v0:= `@@com.j256.ormlite.field.types.UuidType.singleTon` @type ^`com.j256.ormlite.field.types.UuidType` @kind object;
  #L1631ac.  return v0 @kind object;
}
procedure `java.lang.Object` `generateId`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.generateId:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1631c0.  call temp:= `randomUUID`() @signature `Ljava/util/UUID;.randomUUID:()Ljava/util/UUID;` @kind static;
  #L1631c6.  v0:= temp @kind object;
  #L1631c8.  return v0 @kind object;
}
procedure `int` `getDefaultWidth`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.getDefaultWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1631dc.  v0:= `@@com.j256.ormlite.field.types.UuidType.DEFAULT_WIDTH` @type ^`int`;
  #L1631e0.  return v0;
}
procedure `boolean` `isSelfGeneratedId`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.isSelfGeneratedId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1631f4.  v0:= 1I;
  #L1631f6.  return v0;
}
procedure `boolean` `isValidGeneratedType`(`com.j256.ormlite.field.types.UuidType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/UuidType;.isValidGeneratedType:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L163208.  v0:= 1I;
  #L16320a.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.UuidType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16321c.  v3:= (`java.util.UUID`) v3 @kind object;
  #L163220.  call temp:= `toString`(v3) @signature `Ljava/util/UUID;.toString:()Ljava/lang/String;` @kind virtual;
  #L163226.  v0:= temp @kind object;
  #L163228.  return v0 @kind object;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.UuidType` v0 @kind this, `com.j256.ormlite.field.FieldType` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/UuidType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L16323c.  return v2 @kind object;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.UuidType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/UuidType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L163250.  call temp:= `getString`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getString:(I)Ljava/lang/String;` @kind interface;
  #L163256.  v0:= temp @kind object;
  #L163258.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.UuidType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.Object` v5 @kind object, `int` v6 ) @signature `Lcom/j256/ormlite/field/types/UuidType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16326c.  v5:= (`java.lang.String`) v5 @kind object;
  #Try_start0.  
  #L163270.  call temp:= `fromString`(v5) @signature `Ljava/util/UUID;.fromString:(Ljava/lang/String;)Ljava/util/UUID;` @kind static;
  #Try_end0.  
  #L163276.  v0:= temp @kind object;
  #L163278.  return v0 @kind object;
  #L16327a.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L16327c.  v1:= new `java.lang.StringBuilder`;
  #L163280.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L163286.  v2:= "Problems with column " @kind object;
  #L16328a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L163290.  v1:= temp @kind object;
  #L163292.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L163298.  v1:= temp @kind object;
  #L16329a.  v2:= " parsing UUID-string '" @kind object;
  #L16329e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1632a4.  v1:= temp @kind object;
  #L1632a6.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1632ac.  v1:= temp @kind object;
  #L1632ae.  v2:= "'" @kind object;
  #L1632b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1632b8.  v1:= temp @kind object;
  #L1632ba.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1632c0.  v1:= temp @kind object;
  #L1632c2.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L1632c8.  v0:= temp @kind object;
  #L1632ca.  throw v0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L16327a;
}
