record `com.j256.ormlite.db.BaseDatabaseType` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.db.DatabaseType` @kind interface {
  `java.sql.Driver` `com.j256.ormlite.db.BaseDatabaseType.driver` @AccessFlag PROTECTED;
}
global `java.lang.String` `@@com.j256.ormlite.db.BaseDatabaseType.DEFAULT_SEQUENCE_SUFFIX` @AccessFlag PROTECTED_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15a558.  v0:= "_id_seq" @kind object;
  #L15a55c.  `@@com.j256.ormlite.db.BaseDatabaseType.DEFAULT_SEQUENCE_SUFFIX` @type ^`java.lang.String` := v0 @kind object;
  #L15a560.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15a574.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15a57a.  return @kind void;
}
procedure `void` `addSingleUnique`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.util.List` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addSingleUnique:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L15a58c.  v0:= new `java.lang.StringBuilder`;
  #L15a590.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15a596.  v1:= " UNIQUE (" @kind object;
  #L15a59a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a5a0.  call temp:= `getColumnName`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L15a5a6.  v1:= temp @kind object;
  #L15a5a8.  call `appendEscapedEntityName`(v2, v0, v1) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L15a5ae.  v1:= 41I;
  #L15a5b2.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a5b8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15a5be.  v0:= temp @kind object;
  #L15a5c0.  call temp:= `add`(v5, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15a5c6.  return @kind void;
}
procedure `void` `appendCanBeNull`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCanBeNull:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PRIVATE {
    temp;

  #L15a5d8.  return @kind void;
}
procedure `void` `appendDefaultValue`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDefaultValue:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L15a5ec.  call temp:= `isEscapedDefaultValue`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedDefaultValue:()Z` @kind virtual;
  #L15a5f2.  v0:= temp;
  #L15a5f4.  if v0 == 0 then goto L15a608;
  #L15a5f8.  call temp:= `toString`(v4) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L15a5fe.  v0:= temp @kind object;
  #L15a600.  call `appendEscapedWord`(v1, v2, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L15a606.  return @kind void;
  #L15a608.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a60e.  goto L15a606;
}
procedure `void` `appendDoubleType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDoubleType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L15a620.  v0:= "DOUBLE PRECISION" @kind object;
  #L15a624.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a62a.  return @kind void;
}
procedure `void` `appendFloatType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendFloatType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L15a63c.  v0:= "FLOAT" @kind object;
  #L15a640.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a646.  return @kind void;
}
procedure `void` `appendIntegerType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendIntegerType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L15a658.  v0:= "INTEGER" @kind object;
  #L15a65c.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a662.  return @kind void;
}
procedure `void` `addPrimaryKeySql`(`com.j256.ormlite.db.BaseDatabaseType` v6 @kind this, `com.j256.ormlite.field.FieldType`[] v7 @kind object, `java.util.List` v8 @kind object, `java.util.List` v9 @kind object, `java.util.List` v10 @kind object, `java.util.List` v11 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addPrimaryKeySql:([Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15a674.  v1:= 0I;
  #L15a676.  v2:= length @variable v7;
  #L15a678.  v0:= 0I;
  #L15a67a.  v5:= v0;
  #L15a67c.  v0:= v1 @kind object;
  #L15a67e.  v1:= v5;
  #L15a680.  if v1 >= v2 then goto L15a6f6;
  #L15a684.  v3:= v7[v1] @kind object;
  #L15a688.  call temp:= `isGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L15a68e.  v4:= temp;
  #L15a690.  if v4 == 0 then goto L15a6b2;
  #L15a694.  call temp:= `generatedIdSqlAtEnd`(v6) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.generatedIdSqlAtEnd:()Z` @kind virtual;
  #L15a69a.  v4:= temp;
  #L15a69c.  if v4 != 0 then goto L15a6b2;
  #L15a6a0.  call temp:= `isSelfGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L15a6a6.  v4:= temp;
  #L15a6a8.  if v4 != 0 then goto L15a6b2;
  #L15a6ac.  v1:= v1 + 1;
  #L15a6b0.  goto L15a680;
  #L15a6b2.  call temp:= `isId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isId:()Z` @kind virtual;
  #L15a6b8.  v4:= temp;
  #L15a6ba.  if v4 == 0 then goto L15a6ac;
  #L15a6be.  if v0 != 0 then goto L15a6ea;
  #L15a6c2.  v0:= new `java.lang.StringBuilder`;
  #L15a6c6.  v4:= 48I;
  #L15a6ca.  call `<init>`(v0, v4) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L15a6d0.  v4:= "PRIMARY KEY (" @kind object;
  #L15a6d4.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a6da.  call temp:= `getColumnName`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L15a6e0.  v3:= temp @kind object;
  #L15a6e2.  call `appendEscapedEntityName`(v6, v0, v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L15a6e8.  goto L15a6ac;
  #L15a6ea.  v4:= 44I;
  #L15a6ee.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a6f4.  goto L15a6da;
  #L15a6f6.  if v0 == 0 then goto L15a712;
  #L15a6fa.  v1:= ") " @kind object;
  #L15a6fe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a704.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15a70a.  v0:= temp @kind object;
  #L15a70c.  call temp:= `add`(v8, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15a712.  return @kind void;
}
procedure `void` `addUniqueComboSql`(`com.j256.ormlite.db.BaseDatabaseType` v6 @kind this, `com.j256.ormlite.field.FieldType`[] v7 @kind object, `java.util.List` v8 @kind object, `java.util.List` v9 @kind object, `java.util.List` v10 @kind object, `java.util.List` v11 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addUniqueComboSql:([Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15a724.  v1:= 0I;
  #L15a726.  v2:= length @variable v7;
  #L15a728.  v0:= 0I;
  #L15a72a.  v5:= v0;
  #L15a72c.  v0:= v1 @kind object;
  #L15a72e.  v1:= v5;
  #L15a730.  if v1 >= v2 then goto L15a780;
  #L15a734.  v3:= v7[v1] @kind object;
  #L15a738.  call temp:= `isUniqueCombo`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isUniqueCombo:()Z` @kind virtual;
  #L15a73e.  v4:= temp;
  #L15a740.  if v4 == 0 then goto L15a76e;
  #L15a744.  if v0 != 0 then goto L15a774;
  #L15a748.  v0:= new `java.lang.StringBuilder`;
  #L15a74c.  v4:= 48I;
  #L15a750.  call `<init>`(v0, v4) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L15a756.  v4:= "UNIQUE (" @kind object;
  #L15a75a.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a760.  call temp:= `getColumnName`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L15a766.  v3:= temp @kind object;
  #L15a768.  call `appendEscapedEntityName`(v6, v0, v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L15a76e.  v1:= v1 + 1;
  #L15a772.  goto L15a730;
  #L15a774.  v4:= 44I;
  #L15a778.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a77e.  goto L15a760;
  #L15a780.  if v0 == 0 then goto L15a79c;
  #L15a784.  v1:= ") " @kind object;
  #L15a788.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a78e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15a794.  v0:= temp @kind object;
  #L15a796.  call temp:= `add`(v8, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L15a79c.  return @kind void;
}
procedure `void` `appendBigDecimalNumericType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBigDecimalNumericType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15a7b0.  v0:= "NUMERIC" @kind object;
  #L15a7b4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a7ba.  return @kind void;
}
procedure `void` `appendBooleanType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBooleanType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15a7cc.  v0:= "BOOLEAN" @kind object;
  #L15a7d0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a7d6.  return @kind void;
}
procedure `void` `appendByteArrayType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteArrayType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15a7e8.  v0:= "BLOB" @kind object;
  #L15a7ec.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a7f2.  return @kind void;
}
procedure `void` `appendByteType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15a804.  v0:= "TINYINT" @kind object;
  #L15a808.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a80e.  return @kind void;
}
procedure `void` `appendCharType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCharType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15a820.  v0:= "CHAR" @kind object;
  #L15a824.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a82a.  return @kind void;
}
procedure `void` `appendColumnArg`(`com.j256.ormlite.db.BaseDatabaseType` v8 @kind this, `java.lang.String` v9 @kind object, `java.lang.StringBuilder` v10 @kind object, `com.j256.ormlite.field.FieldType` v11 @kind object, `java.util.List` v12 @kind object, `java.util.List` v13 @kind object, `java.util.List` v14 @kind object, `java.util.List` v15 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendColumnArg:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L15a83c.  call temp:= `getColumnName`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L15a842.  v0:= temp @kind object;
  #L15a844.  call `appendEscapedEntityName`(v8, v10, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind virtual;
  #L15a84a.  v0:= 32I;
  #L15a84e.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a854.  call temp:= `getDataPersister`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L15a85a.  v1:= temp @kind object;
  #L15a85c.  call temp:= `getWidth`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getWidth:()I` @kind virtual;
  #L15a862.  v0:= temp;
  #L15a864.  if v0 != 0 then goto L15a870;
  #L15a868.  call temp:= `getDefaultWidth`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getDefaultWidth:()I` @kind interface;
  #L15a86e.  v0:= temp;
  #L15a870.  v2:= `@@com.j256.ormlite.db.BaseDatabaseType$1.$SwitchMap$com$j256$ormlite$field$SqlType` @type ^`int`[] @kind object;
  #L15a874.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L15a87a.  v3:= temp @kind object;
  #L15a87c.  call temp:= `ordinal`(v3) @signature `Lcom/j256/ormlite/field/SqlType;.ordinal:()I` @kind virtual;
  #L15a882.  v3:= temp;
  #L15a884.  v2:= v2[v3];
  #L15a888.  goto L15aa40;
  #L15a88e.  v0:= new `java.lang.IllegalArgumentException`;
  #L15a892.  v2:= new `java.lang.StringBuilder`;
  #L15a896.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15a89c.  v3:= "Unknown SQL-type " @kind object;
  #L15a8a0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a8a6.  v2:= temp @kind object;
  #L15a8a8.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L15a8ae.  v1:= temp @kind object;
  #L15a8b0.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a8b6.  v1:= temp @kind object;
  #L15a8b8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15a8be.  v1:= temp @kind object;
  #L15a8c0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15a8c6.  throw v0;
  #L15a8c8.  call `appendStringType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L15a8ce.  v0:= 32I;
  #L15a8d2.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a8d8.  call temp:= `isGeneratedIdSequence`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedIdSequence:()Z` @kind virtual;
  #L15a8de.  v0:= temp;
  #L15a8e0.  if v0 == 0 then goto L15a9e0;
  #L15a8e4.  call temp:= `isSelfGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L15a8ea.  v0:= temp;
  #L15a8ec.  if v0 != 0 then goto L15a9e0;
  #L15a8f0.  v0:= v8 @kind object;
  #L15a8f2.  v1:= v10 @kind object;
  #L15a8f4.  v2:= v11 @kind object;
  #L15a8f6.  v3:= v13 @kind object;
  #L15a8f8.  v4:= v12 @kind object;
  #L15a8fa.  v5:= v15 @kind object;
  #L15a8fc.  call `configureGeneratedIdSequence`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedIdSequence:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @kind virtual;
  #L15a902.  call temp:= `isGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L15a908.  v0:= temp;
  #L15a90a.  if v0 != 0 then goto L15a958;
  #L15a90e.  call temp:= `getDefaultValue`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getDefaultValue:()Ljava/lang/Object;` @kind virtual;
  #L15a914.  v0:= temp @kind object;
  #L15a916.  if v0 == 0 then goto L15a934;
  #L15a91a.  v1:= "DEFAULT " @kind object;
  #L15a91e.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a924.  call `appendDefaultValue`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDefaultValue:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)V` @kind direct;
  #L15a92a.  v0:= 32I;
  #L15a92e.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a934.  call temp:= `isCanBeNull`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isCanBeNull:()Z` @kind virtual;
  #L15a93a.  v0:= temp;
  #L15a93c.  if v0 == 0 then goto L15aa34;
  #L15a940.  call `appendCanBeNull`(v8, v10, v11) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCanBeNull:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L15a946.  call temp:= `isUnique`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isUnique:()Z` @kind virtual;
  #L15a94c.  v0:= temp;
  #L15a94e.  if v0 == 0 then goto L15a958;
  #L15a952.  call `addSingleUnique`(v8, v10, v11, v12, v14) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.addSingleUnique:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;)V` @kind direct;
  #L15a958.  return @kind void;
  #L15a95a.  call `appendLongStringType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L15a960.  goto L15a8ce;
  #L15a962.  call `appendBooleanType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBooleanType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L15a968.  goto L15a8ce;
  #L15a96a.  call `appendDateType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDateType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L15a970.  goto L15a8ce;
  #L15a972.  call `appendCharType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCharType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L15a978.  goto L15a8ce;
  #L15a97a.  call `appendByteType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L15a980.  goto L15a8ce;
  #L15a982.  call `appendByteArrayType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendByteArrayType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L15a988.  goto L15a8ce;
  #L15a98a.  call `appendShortType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendShortType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L15a990.  goto L15a8ce;
  #L15a992.  call `appendIntegerType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendIntegerType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind direct;
  #L15a998.  goto L15a8ce;
  #L15a99a.  call `appendLongType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L15a9a0.  goto L15a8ce;
  #L15a9a2.  call `appendFloatType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendFloatType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind direct;
  #L15a9a8.  goto L15a8ce;
  #L15a9aa.  call `appendDoubleType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDoubleType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind direct;
  #L15a9b0.  goto L15a8ce;
  #L15a9b2.  call `appendSerializableType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendSerializableType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L15a9b8.  goto L15a8ce;
  #L15a9ba.  call `appendBigDecimalNumericType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendBigDecimalNumericType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L15a9c0.  goto L15a8ce;
  #L15a9c2.  call `appendUuidNativeType`(v8, v10, v11, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendUuidNativeType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @kind virtual;
  #L15a9c8.  goto L15a8ce;
  #L15a9ca.  call temp:= `getSqlOtherType`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlOtherType:()Ljava/lang/String;` @kind interface;
  #L15a9d0.  v0:= temp @kind object;
  #L15a9d2.  if v0 == 0 then goto L15a8ce;
  #L15a9d6.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15a9dc.  goto L15a8ce;
  #L15a9e0.  call temp:= `isGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L15a9e6.  v0:= temp;
  #L15a9e8.  if v0 == 0 then goto L15aa12;
  #L15a9ec.  call temp:= `isSelfGeneratedId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L15a9f2.  v0:= temp;
  #L15a9f4.  if v0 != 0 then goto L15aa12;
  #L15a9f8.  v0:= v8 @kind object;
  #L15a9fa.  v1:= v9 @kind object;
  #L15a9fc.  v2:= v10 @kind object;
  #L15a9fe.  v3:= v11 @kind object;
  #L15aa00.  v4:= v13 @kind object;
  #L15aa02.  v5:= v14 @kind object;
  #L15aa04.  v6:= v12 @kind object;
  #L15aa06.  v7:= v15 @kind object;
  #L15aa08.  call `configureGeneratedId`(v0, v1, v2, v3, v4, v5, v6, v7) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedId:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @kind virtual;
  #L15aa0e.  goto L15a902;
  #L15aa12.  call temp:= `isId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isId:()Z` @kind virtual;
  #L15aa18.  v0:= temp;
  #L15aa1a.  if v0 == 0 then goto L15a902;
  #L15aa1e.  v0:= v8 @kind object;
  #L15aa20.  v1:= v10 @kind object;
  #L15aa22.  v2:= v11 @kind object;
  #L15aa24.  v3:= v13 @kind object;
  #L15aa26.  v4:= v12 @kind object;
  #L15aa28.  v5:= v15 @kind object;
  #L15aa2a.  call `configureId`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureId:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @kind virtual;
  #L15aa30.  goto L15a902;
  #L15aa34.  v0:= "NOT NULL " @kind object;
  #L15aa38.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15aa3e.  goto L15a946;
  #L15aa40.  switch v2
                  | 1 => goto L15a8c8
                  | 2 => goto L15a95a
                  | 3 => goto L15a962
                  | 4 => goto L15a96a
                  | 5 => goto L15a972
                  | 6 => goto L15a97a
                  | 7 => goto L15a982
                  | 8 => goto L15a98a
                  | 9 => goto L15a992
                  | 10 => goto L15a99a
                  | 11 => goto L15a9a2
                  | 12 => goto L15a9aa
                  | 13 => goto L15a9b2
                  | 14 => goto L15a9ba
                  | 15 => goto L15a9c2
                  | 16 => goto L15a9ca
                  | else => goto L15a88e;
}
procedure `void` `appendCreateTableSuffix`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendCreateTableSuffix:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;

  #L15aa98.  return @kind void;
}
procedure `void` `appendDateType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendDateType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15aaac.  v0:= "TIMESTAMP" @kind object;
  #L15aab0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15aab6.  return @kind void;
}
procedure `void` `appendEscapedEntityName`(`com.j256.ormlite.db.BaseDatabaseType` v3 @kind this, `java.lang.StringBuilder` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15aac8.  v2:= 96I;
  #L15aacc.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15aad2.  v0:= 46I;
  #L15aad6.  call temp:= `indexOf`(v5, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L15aadc.  v0:= temp;
  #L15aade.  if v0 <= 0 then goto L15ab16;
  #L15aae2.  v1:= 0I;
  #L15aae4.  call temp:= `substring`(v5, v1, v0) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L15aaea.  v1:= temp @kind object;
  #L15aaec.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15aaf2.  v1:= "`.`" @kind object;
  #L15aaf6.  call temp:= `append`(v4, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15aafc.  v0:= v0 + 1;
  #L15ab00.  call temp:= `substring`(v5, v0) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L15ab06.  v0:= temp @kind object;
  #L15ab08.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ab0e.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ab14.  return @kind void;
  #L15ab16.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ab1c.  goto L15ab0e;
}
procedure `void` `appendEscapedWord`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `java.lang.String` v4 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15ab30.  v1:= 39I;
  #L15ab34.  call temp:= `append`(v3, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ab3a.  v0:= temp @kind object;
  #L15ab3c.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ab42.  v0:= temp @kind object;
  #L15ab44.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ab4a.  return @kind void;
}
procedure `void` `appendInsertNoColumns`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendInsertNoColumns:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ab5c.  v0:= "() VALUES ()" @kind object;
  #L15ab60.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ab66.  return @kind void;
}
procedure `void` `appendLimitValue`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `long` v4 , `java.lang.Long` v6 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLimitValue:(Ljava/lang/StringBuilder;JLjava/lang/Long;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15ab78.  v0:= "LIMIT " @kind object;
  #L15ab7c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ab82.  v0:= temp @kind object;
  #L15ab84.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ab8a.  v0:= temp @kind object;
  #L15ab8c.  v1:= 32I;
  #L15ab90.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ab96.  return @kind void;
}
procedure `void` `appendLongStringType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15aba8.  v0:= "TEXT" @kind object;
  #L15abac.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15abb2.  return @kind void;
}
procedure `void` `appendLongType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendLongType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15abc4.  v0:= "BIGINT" @kind object;
  #L15abc8.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15abce.  return @kind void;
}
procedure `void` `appendOffsetValue`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `long` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendOffsetValue:(Ljava/lang/StringBuilder;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15abe0.  v0:= "OFFSET " @kind object;
  #L15abe4.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15abea.  v0:= temp @kind object;
  #L15abec.  call temp:= `append`(v0, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L15abf2.  v0:= temp @kind object;
  #L15abf4.  v1:= 32I;
  #L15abf8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15abfe.  return @kind void;
}
procedure `void` `appendSelectNextValFromSequence`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendSelectNextValFromSequence:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L15ac10.  return @kind void;
}
procedure `void` `appendSerializableType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendSerializableType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15ac24.  v0:= "BLOB" @kind object;
  #L15ac28.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ac2e.  return @kind void;
}
procedure `void` `appendShortType`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `com.j256.ormlite.field.FieldType` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendShortType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15ac40.  v0:= "SMALLINT" @kind object;
  #L15ac44.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ac4a.  return @kind void;
}
procedure `void` `appendStringType`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendStringType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L15ac5c.  call temp:= `isVarcharFieldWidthSupported`(v2) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isVarcharFieldWidthSupported:()Z` @kind virtual;
  #L15ac62.  v0:= temp;
  #L15ac64.  if v0 == 0 then goto L15ac88;
  #L15ac68.  v0:= "VARCHAR(" @kind object;
  #L15ac6c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ac72.  v0:= temp @kind object;
  #L15ac74.  call temp:= `append`(v0, v5) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ac7a.  v0:= temp @kind object;
  #L15ac7c.  v1:= 41I;
  #L15ac80.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ac86.  return @kind void;
  #L15ac88.  v0:= "VARCHAR" @kind object;
  #L15ac8c.  call temp:= `append`(v3, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ac92.  goto L15ac86;
}
procedure `void` `appendUuidNativeType`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.StringBuilder` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.appendUuidNativeType:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;I)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #L15aca4.  v0:= new `java.lang.UnsupportedOperationException`;
  #L15aca8.  v1:= "UUID is not supported by this database type" @kind object;
  #L15acac.  call `<init>`(v0, v1) @signature `Ljava/lang/UnsupportedOperationException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15acb2.  throw v0;
}
procedure `void` `configureGeneratedId`(`com.j256.ormlite.db.BaseDatabaseType` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.StringBuilder` v5 @kind object, `com.j256.ormlite.field.FieldType` v6 @kind object, `java.util.List` v7 @kind object, `java.util.List` v8 @kind object, `java.util.List` v9 @kind object, `java.util.List` v10 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedId:(Ljava/lang/String;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L15acc4.  v0:= new `java.lang.IllegalStateException`;
  #L15acc8.  v1:= new `java.lang.StringBuilder`;
  #L15accc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15acd2.  v2:= "GeneratedId is not supported by database " @kind object;
  #L15acd6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15acdc.  v1:= temp @kind object;
  #L15acde.  call temp:= `getDatabaseName`(v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDatabaseName:()Ljava/lang/String;` @kind virtual;
  #L15ace4.  v2:= temp @kind object;
  #L15ace6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15acec.  v1:= temp @kind object;
  #L15acee.  v2:= " for field " @kind object;
  #L15acf2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15acf8.  v1:= temp @kind object;
  #L15acfa.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ad00.  v1:= temp @kind object;
  #L15ad02.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15ad08.  v1:= temp @kind object;
  #L15ad0a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15ad10.  throw v0;
}
procedure `void` `configureGeneratedIdSequence`(`com.j256.ormlite.db.BaseDatabaseType` v3 @kind this, `java.lang.StringBuilder` v4 @kind object, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.util.List` v6 @kind object, `java.util.List` v7 @kind object, `java.util.List` v8 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureGeneratedIdSequence:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L15ad24.  v0:= new `java.sql.SQLException`;
  #L15ad28.  v1:= new `java.lang.StringBuilder`;
  #L15ad2c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15ad32.  v2:= "GeneratedIdSequence is not supported by database " @kind object;
  #L15ad36.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ad3c.  v1:= temp @kind object;
  #L15ad3e.  call temp:= `getDatabaseName`(v3) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDatabaseName:()Ljava/lang/String;` @kind virtual;
  #L15ad44.  v2:= temp @kind object;
  #L15ad46.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ad4c.  v1:= temp @kind object;
  #L15ad4e.  v2:= " for field " @kind object;
  #L15ad52.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ad58.  v1:= temp @kind object;
  #L15ad5a.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ad60.  v1:= temp @kind object;
  #L15ad62.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15ad68.  v1:= temp @kind object;
  #L15ad6a.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15ad70.  throw v0;
}
procedure `void` `configureId`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.util.List` v3 @kind object, `java.util.List` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.configureId:(Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;

  #L15ad84.  return @kind void;
}
procedure `void` `dropColumnArg`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `com.j256.ormlite.field.FieldType` v1 @kind object, `java.util.List` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.dropColumnArg:(Lcom/j256/ormlite/field/FieldType;Ljava/util/List;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L15ad98.  return @kind void;
}
procedure `com.j256.ormlite.table.DatabaseTableConfig` `extractDatabaseTableConfig`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `com.j256.ormlite.support.ConnectionSource` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.extractDatabaseTableConfig:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/table/DatabaseTableConfig;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15adac.  v0:= 0I;
  #L15adae.  return v0 @kind object;
}
procedure `java.lang.String` `generateIdSequenceName`(`com.j256.ormlite.db.BaseDatabaseType` v2 @kind this, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.generateIdSequenceName:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15adc0.  v0:= new `java.lang.StringBuilder`;
  #L15adc4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15adca.  call temp:= `append`(v0, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15add0.  v0:= temp @kind object;
  #L15add2.  v1:= `@@com.j256.ormlite.db.BaseDatabaseType.DEFAULT_SEQUENCE_SUFFIX` @type ^`java.lang.String` @kind object;
  #L15add6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15addc.  v0:= temp @kind object;
  #L15adde.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15ade4.  v0:= temp @kind object;
  #L15ade6.  call temp:= `isEntityNamesMustBeUpCase`(v2) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isEntityNamesMustBeUpCase:()Z` @kind virtual;
  #L15adec.  v1:= temp;
  #L15adee.  if v1 == 0 then goto L15adfa;
  #L15adf2.  call temp:= `upCaseEntityName`(v2, v0) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.upCaseEntityName:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L15adf8.  v0:= temp @kind object;
  #L15adfa.  return v0 @kind object;
}
procedure `boolean` `generatedIdSqlAtEnd`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.generatedIdSqlAtEnd:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L15ae0c.  v0:= 1I;
  #L15ae0e.  return v0;
}
procedure `java.lang.String` `getCommentLinePrefix`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getCommentLinePrefix:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ae20.  v0:= "-- " @kind object;
  #L15ae24.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.DataPersister` `getDataPersister`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `com.j256.ormlite.field.DataPersister` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDataPersister:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/DataPersister;` @AccessFlag PUBLIC {
    temp;

  #L15ae38.  return v1 @kind object;
}
procedure `java.lang.String` `getDriverClassName`() @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDriverClassName:()Ljava/lang/String;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `com.j256.ormlite.field.FieldConverter` `getFieldConverter`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `com.j256.ormlite.field.DataPersister` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getFieldConverter:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/FieldConverter;` @AccessFlag PUBLIC {
    temp;

  #L15ae4c.  return v1 @kind object;
}
procedure `java.lang.String` `getPingStatement`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getPingStatement:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ae60.  v0:= "SELECT 1" @kind object;
  #L15ae64.  return v0 @kind object;
}
procedure `boolean` `isAllowGeneratedIdInsertSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isAllowGeneratedIdInsertSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ae78.  v0:= 1I;
  #L15ae7a.  return v0;
}
procedure `boolean` `isBatchUseTransaction`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isBatchUseTransaction:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ae8c.  v0:= 0I;
  #L15ae8e.  return v0;
}
procedure `boolean` `isCreateIfNotExistsSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateIfNotExistsSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15aea0.  v0:= 0I;
  #L15aea2.  return v0;
}
procedure `boolean` `isCreateIndexIfNotExistsSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateIndexIfNotExistsSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15aeb4.  call temp:= `isCreateIfNotExistsSupported`(v1) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateIfNotExistsSupported:()Z` @kind virtual;
  #L15aeba.  v0:= temp;
  #L15aebc.  return v0;
}
procedure `boolean` `isCreateTableReturnsNegative`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateTableReturnsNegative:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15aed0.  v0:= 0I;
  #L15aed2.  return v0;
}
procedure `boolean` `isCreateTableReturnsZero`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isCreateTableReturnsZero:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15aee4.  v0:= 1I;
  #L15aee6.  return v0;
}
procedure `boolean` `isEntityNamesMustBeUpCase`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isEntityNamesMustBeUpCase:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15aef8.  v0:= 0I;
  #L15aefa.  return v0;
}
procedure `boolean` `isIdSequenceNeeded`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isIdSequenceNeeded:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15af0c.  v0:= 0I;
  #L15af0e.  return v0;
}
procedure `boolean` `isLimitAfterSelect`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isLimitAfterSelect:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15af20.  v0:= 0I;
  #L15af22.  return v0;
}
procedure `boolean` `isLimitSqlSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isLimitSqlSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15af34.  v0:= 1I;
  #L15af36.  return v0;
}
procedure `boolean` `isNestedSavePointsSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isNestedSavePointsSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15af48.  v0:= 1I;
  #L15af4a.  return v0;
}
procedure `boolean` `isOffsetLimitArgument`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isOffsetLimitArgument:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15af5c.  v0:= 0I;
  #L15af5e.  return v0;
}
procedure `boolean` `isOffsetSqlSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isOffsetSqlSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15af70.  v0:= 1I;
  #L15af72.  return v0;
}
procedure `boolean` `isSelectSequenceBeforeInsert`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isSelectSequenceBeforeInsert:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15af84.  v0:= 0I;
  #L15af86.  return v0;
}
procedure `boolean` `isTruncateSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isTruncateSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15af98.  v0:= 0I;
  #L15af9a.  return v0;
}
procedure `boolean` `isVarcharFieldWidthSupported`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.isVarcharFieldWidthSupported:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15afac.  v0:= 1I;
  #L15afae.  return v0;
}
procedure `void` `loadDriver`(`com.j256.ormlite.db.BaseDatabaseType` v4 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.loadDriver:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15afc0.  call temp:= `getDriverClassName`(v4) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDriverClassName:()Ljava/lang/String;` @kind virtual;
  #L15afc6.  v0:= temp @kind object;
  #L15afc8.  if v0 == 0 then goto L15afd2;
  #Try_start0.  
  #L15afcc.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #Try_end0.  
  #L15afd2.  return @kind void;
  #L15afd4.  v1:= Exception @type ^`java.lang.ClassNotFoundException` @kind object;
  #L15afd6.  v2:= new `java.lang.StringBuilder`;
  #L15afda.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15afe0.  v3:= "Driver class was not found for " @kind object;
  #L15afe4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15afea.  v2:= temp @kind object;
  #L15afec.  call temp:= `getDatabaseName`(v4) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.getDatabaseName:()Ljava/lang/String;` @kind virtual;
  #L15aff2.  v3:= temp @kind object;
  #L15aff4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15affa.  v2:= temp @kind object;
  #L15affc.  v3:= " database.  Missing jar with class " @kind object;
  #L15b000.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b006.  v2:= temp @kind object;
  #L15b008.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b00e.  v0:= temp @kind object;
  #L15b010.  v2:= "." @kind object;
  #L15b014.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15b01a.  v0:= temp @kind object;
  #L15b01c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15b022.  v0:= temp @kind object;
  #L15b024.  call temp:= `create`(v0, v1) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15b02a.  v0:= temp @kind object;
  #L15b02c.  throw v0;
  catch `java.lang.ClassNotFoundException` @[Try_start0..Try_end0] goto L15afd4;
}
procedure `void` `setDriver`(`com.j256.ormlite.db.BaseDatabaseType` v0 @kind this, `java.sql.Driver` v1 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.setDriver:(Ljava/sql/Driver;)V` @AccessFlag PUBLIC {
    temp;

  #L15b050.  v0.`com.j256.ormlite.db.BaseDatabaseType.driver` @type ^`java.sql.Driver` := v1 @kind object;
  #L15b054.  return @kind void;
}
procedure `java.lang.String` `upCaseEntityName`(`com.j256.ormlite.db.BaseDatabaseType` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType;.upCaseEntityName:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15b068.  v0:= `@@java.util.Locale.ENGLISH` @type ^`java.util.Locale` @kind object;
  #L15b06c.  call temp:= `toUpperCase`(v2, v0) @signature `Ljava/lang/String;.toUpperCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L15b072.  v0:= temp @kind object;
  #L15b074.  return v0 @kind object;
}
