record `com.j256.ormlite.stmt.mapped.MappedCreate` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.mapped.BaseMappedStatement` @kind class {
  `java.lang.String` `com.j256.ormlite.stmt.mapped.MappedCreate.dataClassName` @AccessFlag PRIVATE;
  `java.lang.String` `com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt` @AccessFlag PRIVATE_FINAL;
  `int` `com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.mapped.MappedCreate` v1 @kind this, `com.j256.ormlite.table.TableInfo` v2 @kind object, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType`[] v4 @kind object, `java.lang.String` v5 @kind object, `int` v6 ) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L16be48.  call `<init>`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L16be4e.  call temp:= `getDataClass`(v2) @signature `Lcom/j256/ormlite/table/TableInfo;.getDataClass:()Ljava/lang/Class;` @kind virtual;
  #L16be54.  v0:= temp @kind object;
  #L16be56.  call temp:= `getSimpleName`(v0) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L16be5c.  v0:= temp @kind object;
  #L16be5e.  v1.`com.j256.ormlite.stmt.mapped.MappedCreate.dataClassName` @type ^`java.lang.String` := v0 @kind object;
  #L16be62.  v1.`com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt` @type ^`java.lang.String` := v5 @kind object;
  #L16be66.  v1.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int` := v6;
  #L16be6a.  return @kind void;
}
procedure `void` `assignIdValue`(`com.j256.ormlite.stmt.mapped.MappedCreate` v5 @kind this, `java.lang.Object` v6 @kind object, `java.lang.Number` v7 @kind object, `java.lang.String` v8 @kind object, `com.j256.ormlite.dao.ObjectCache` v9 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Ljava/lang/String;Lcom/j256/ormlite/dao/ObjectCache;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16be7c.  v0:= v5.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16be80.  call temp:= `assignIdValue`(v0, v6, v7, v9) @signature `Lcom/j256/ormlite/field/FieldType;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind virtual;
  #L16be86.  v0:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16be8a.  v1:= `@@com.j256.ormlite.logger.Log$Level.DEBUG` @type ^`com.j256.ormlite.logger.Log$Level` @kind object;
  #L16be8e.  call temp:= `isLevelEnabled`(v0, v1) @signature `Lcom/j256/ormlite/logger/Logger;.isLevelEnabled:(Lcom/j256/ormlite/logger/Log$Level;)Z` @kind virtual;
  #L16be94.  v0:= temp;
  #L16be96.  if v0 == 0 then goto L16bed6;
  #L16be9a.  v0:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16be9e.  v1:= "assigned id '{}' from {} to '{}' in {} object" @kind object;
  #L16bea2.  v2:= 4I;
  #L16bea4.  v2:= new `java.lang.Object`[v2];
  #L16bea8.  v3:= 0I;
  #L16beaa.  v2[v3]:= v7 @kind object;
  #L16beae.  v3:= 1I;
  #L16beb0.  v2[v3]:= v8 @kind object;
  #L16beb4.  v3:= 2I;
  #L16beb6.  v4:= v5.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16beba.  call temp:= `getFieldName`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldName:()Ljava/lang/String;` @kind virtual;
  #L16bec0.  v4:= temp @kind object;
  #L16bec2.  v2[v3]:= v4 @kind object;
  #L16bec6.  v3:= 3I;
  #L16bec8.  v4:= v5.`com.j256.ormlite.stmt.mapped.MappedCreate.dataClassName` @type ^`java.lang.String` @kind object;
  #L16becc.  v2[v3]:= v4 @kind object;
  #L16bed0.  call `debug`(v0, v1, v2) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L16bed6.  return @kind void;
}
procedure `void` `assignSequenceId`(`com.j256.ormlite.stmt.mapped.MappedCreate` v6 @kind this, `com.j256.ormlite.support.DatabaseConnection` v7 @kind object, `java.lang.Object` v8 @kind object, `com.j256.ormlite.dao.ObjectCache` v9 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.assignSequenceId:(Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16bee8.  v0:= v6.`com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt` @type ^`java.lang.String` @kind object;
  #L16beec.  call temp:= `queryForLong`(v7, v0) @signature `Lcom/j256/ormlite/support/DatabaseConnection;.queryForLong:(Ljava/lang/String;)J` @kind interface;
  #L16bef2.  v0:= temp @kind wide;
  #L16bef4.  v2:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16bef8.  v3:= "queried for sequence {} using stmt: {}" @kind object;
  #L16befc.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L16bf02.  v4:= temp @kind object;
  #L16bf04.  v5:= v6.`com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt` @type ^`java.lang.String` @kind object;
  #L16bf08.  call `debug`(v2, v3, v4, v5) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L16bf0e.  v2:= 0L;
  #L16bf12.  v2:= lcmp(v0, v2);
  #L16bf16.  if v2 != 0 then goto L16bf50;
  #L16bf1a.  v0:= new `java.sql.SQLException`;
  #L16bf1e.  v1:= new `java.lang.StringBuilder`;
  #L16bf22.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16bf28.  v2:= "Should not have returned 0 for stmt: " @kind object;
  #L16bf2c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16bf32.  v1:= temp @kind object;
  #L16bf34.  v2:= v6.`com.j256.ormlite.stmt.mapped.MappedCreate.queryNextSequenceStmt` @type ^`java.lang.String` @kind object;
  #L16bf38.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16bf3e.  v1:= temp @kind object;
  #L16bf40.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16bf46.  v1:= temp @kind object;
  #L16bf48.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16bf4e.  throw v0;
  #L16bf50.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L16bf56.  v0:= temp @kind object;
  #L16bf58.  v1:= "sequence" @kind object;
  #L16bf5c.  call `assignIdValue`(v6, v8, v0, v1, v9) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Ljava/lang/String;Lcom/j256/ormlite/dao/ObjectCache;)V` @kind direct;
  #L16bf62.  return @kind void;
}
procedure `com.j256.ormlite.stmt.mapped.MappedCreate` `build`(`com.j256.ormlite.db.DatabaseType` v13 @kind object, `com.j256.ormlite.table.TableInfo` v14 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.build:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;)Lcom/j256/ormlite/stmt/mapped/MappedCreate;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L16bf74.  v12:= 44I;
  #L16bf78.  v6:= 1I;
  #L16bf7a.  v1:= 0I;
  #L16bf7c.  v8:= new `java.lang.StringBuilder`;
  #L16bf80.  v0:= 128I;
  #L16bf84.  call `<init>`(v8, v0) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L16bf8a.  v0:= "INSERT INTO " @kind object;
  #L16bf8e.  call temp:= `getTableName`(v14) @signature `Lcom/j256/ormlite/table/TableInfo;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L16bf94.  v2:= temp @kind object;
  #L16bf96.  call `appendTableName`(v13, v8, v0, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.appendTableName:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L16bf9c.  v5:= -1I;
  #L16bf9e.  call temp:= `getFieldTypes`(v14) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16bfa4.  v3:= temp @kind object;
  #L16bfa6.  v4:= length @variable v3;
  #L16bfa8.  v2:= v1;
  #L16bfaa.  v0:= v1;
  #L16bfac.  if v2 >= v4 then goto L16bfd8;
  #L16bfb0.  v7:= v3[v2] @kind object;
  #L16bfb4.  call temp:= `isFieldCreatable`(v13, v7) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.isFieldCreatable:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Z` @kind static;
  #L16bfba.  v9:= temp;
  #L16bfbc.  if v9 == 0 then goto L16bfd2;
  #L16bfc0.  call temp:= `isVersion`(v7) @signature `Lcom/j256/ormlite/field/FieldType;.isVersion:()Z` @kind virtual;
  #L16bfc6.  v7:= temp;
  #L16bfc8.  if v7 == 0 then goto L16bfce;
  #L16bfcc.  v5:= v0;
  #L16bfce.  v0:= v0 + 1;
  #L16bfd2.  v2:= v2 + 1;
  #L16bfd6.  goto L16bfac;
  #L16bfd8.  v3:= new `com.j256.ormlite.field.FieldType`[v0];
  #L16bfdc.  if v0 != 0 then goto L16c00c;
  #L16bfe0.  call `appendInsertNoColumns`(v13, v8) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendInsertNoColumns:(Ljava/lang/StringBuilder;)V` @kind interface;
  #L16bfe6.  call temp:= `getIdField`(v14) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16bfec.  v0:= temp @kind object;
  #L16bfee.  call temp:= `buildQueryNextSequence`(v13, v0) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.buildQueryNextSequence:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind static;
  #L16bff4.  v4:= temp @kind object;
  #L16bff6.  v0:= new `com.j256.ormlite.stmt.mapped.MappedCreate`;
  #L16bffa.  call temp:= `toString`(v8) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16c000.  v2:= temp @kind object;
  #L16c002.  v1:= v14 @kind object;
  #L16c004.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)V` @kind direct;
  #L16c00a.  return v0 @kind object;
  #L16c00c.  v0:= 40I;
  #L16c010.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c016.  call temp:= `getFieldTypes`(v14) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16c01c.  v9:= temp @kind object;
  #L16c01e.  v10:= length @variable v9;
  #L16c020.  v7:= v1;
  #L16c022.  v0:= v6;
  #L16c024.  v2:= v1;
  #L16c026.  if v7 >= v10 then goto L16c064;
  #L16c02a.  v11:= v9[v7] @kind object;
  #L16c02e.  call temp:= `isFieldCreatable`(v13, v11) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.isFieldCreatable:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Z` @kind static;
  #L16c034.  v4:= temp;
  #L16c036.  if v4 != 0 then goto L16c042;
  #L16c03a.  v4:= v7 + 1;
  #L16c03e.  v7:= v4;
  #L16c040.  goto L16c026;
  #L16c042.  if v0 == 0 then goto L16c05c;
  #L16c046.  v0:= v1;
  #L16c048.  v4:= 0I;
  #L16c04a.  call `appendFieldColumnName`(v13, v8, v11, v4) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.appendFieldColumnName:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Lcom/j256/ormlite/field/FieldType;Ljava/util/List;)V` @kind static;
  #L16c050.  v4:= v2 + 1;
  #L16c054.  v3[v2]:= v11 @kind object;
  #L16c058.  v2:= v4;
  #L16c05a.  goto L16c03a;
  #L16c05c.  call temp:= `append`(v8, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c062.  goto L16c048;
  #L16c064.  v0:= ") VALUES (" @kind object;
  #L16c068.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c06e.  call temp:= `getFieldTypes`(v14) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16c074.  v4:= temp @kind object;
  #L16c076.  v7:= length @variable v4;
  #L16c078.  v2:= v1;
  #L16c07a.  v0:= v6;
  #L16c07c.  if v2 >= v7 then goto L16c0b0;
  #L16c080.  v6:= v4[v2] @kind object;
  #L16c084.  call temp:= `isFieldCreatable`(v13, v6) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.isFieldCreatable:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Z` @kind static;
  #L16c08a.  v6:= temp;
  #L16c08c.  if v6 != 0 then goto L16c096;
  #L16c090.  v2:= v2 + 1;
  #L16c094.  goto L16c07c;
  #L16c096.  if v0 == 0 then goto L16c0a8;
  #L16c09a.  v0:= v1;
  #L16c09c.  v6:= 63I;
  #L16c0a0.  call temp:= `append`(v8, v6) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c0a6.  goto L16c090;
  #L16c0a8.  call temp:= `append`(v8, v12) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c0ae.  goto L16c09c;
  #L16c0b0.  v0:= 41I;
  #L16c0b4.  call temp:= `append`(v8, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c0ba.  goto L16bfe6;
}
procedure `java.lang.String` `buildQueryNextSequence`(`com.j256.ormlite.db.DatabaseType` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.buildQueryNextSequence:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L16c0cc.  v0:= 0I;
  #L16c0ce.  if v4 != 0 then goto L16c0d4;
  #L16c0d2.  return v0 @kind object;
  #L16c0d4.  call temp:= `getGeneratedIdSequence`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L16c0da.  v1:= temp @kind object;
  #L16c0dc.  if v1 == 0 then goto L16c0d2;
  #L16c0e0.  v0:= new `java.lang.StringBuilder`;
  #L16c0e4.  v2:= 64I;
  #L16c0e8.  call `<init>`(v0, v2) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L16c0ee.  call `appendSelectNextValFromSequence`(v3, v0, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendSelectNextValFromSequence:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L16c0f4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16c0fa.  v0:= temp @kind object;
  #L16c0fc.  goto L16c0d2;
}
procedure `boolean` `foreignCollectionsAreAssigned`(`com.j256.ormlite.stmt.mapped.MappedCreate` v4 @kind this, `com.j256.ormlite.field.FieldType`[] v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.foreignCollectionsAreAssigned:([Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16c110.  v0:= 0I;
  #L16c112.  v2:= length @variable v5;
  #L16c114.  v1:= v0;
  #L16c116.  if v1 >= v2 then goto L16c132;
  #L16c11a.  v3:= v5[v1] @kind object;
  #L16c11e.  call temp:= `extractJavaFieldValue`(v3, v6) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16c124.  v3:= temp @kind object;
  #L16c126.  if v3 != 0 then goto L16c12c;
  #L16c12a.  return v0;
  #L16c12c.  v1:= v1 + 1;
  #L16c130.  goto L16c116;
  #L16c132.  v0:= 1I;
  #L16c134.  goto L16c12a;
}
procedure `boolean` `isFieldCreatable`(`com.j256.ormlite.db.DatabaseType` v3 @kind object, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.isFieldCreatable:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;)Z` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L16c148.  v1:= 1I;
  #L16c14a.  v0:= 0I;
  #L16c14c.  call temp:= `isForeignCollection`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L16c152.  v2:= temp;
  #L16c154.  if v2 == 0 then goto L16c15a;
  #L16c158.  return v0;
  #L16c15a.  call temp:= `isReadOnly`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isReadOnly:()Z` @kind virtual;
  #L16c160.  v2:= temp;
  #L16c162.  if v2 != 0 then goto L16c158;
  #L16c166.  call temp:= `isIdSequenceNeeded`(v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.isIdSequenceNeeded:()Z` @kind interface;
  #L16c16c.  v2:= temp;
  #L16c16e.  if v2 == 0 then goto L16c182;
  #L16c172.  call temp:= `isSelectSequenceBeforeInsert`(v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.isSelectSequenceBeforeInsert:()Z` @kind interface;
  #L16c178.  v2:= temp;
  #L16c17a.  if v2 == 0 then goto L16c182;
  #L16c17e.  v0:= v1;
  #L16c180.  goto L16c158;
  #L16c182.  call temp:= `isGeneratedId`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L16c188.  v2:= temp;
  #L16c18a.  if v2 == 0 then goto L16c1a6;
  #L16c18e.  call temp:= `isSelfGeneratedId`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L16c194.  v2:= temp;
  #L16c196.  if v2 != 0 then goto L16c1a6;
  #L16c19a.  call temp:= `isAllowGeneratedIdInsert`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.isAllowGeneratedIdInsert:()Z` @kind virtual;
  #L16c1a0.  v2:= temp;
  #L16c1a2.  if v2 == 0 then goto L16c158;
  #L16c1a6.  v0:= v1;
  #L16c1a8.  goto L16c158;
}
procedure `int` `insert`(`com.j256.ormlite.stmt.mapped.MappedCreate` v9 @kind this, `com.j256.ormlite.db.DatabaseType` v10 @kind object, `com.j256.ormlite.support.DatabaseConnection` v11 @kind object, `java.lang.Object` v12 @kind object, `com.j256.ormlite.dao.ObjectCache` v13 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.insert:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L16c1bc.  v1:= 0I;
  #L16c1be.  v2:= 0I;
  #L16c1c0.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16c1c4.  if v0 == 0 then goto L16c484;
  #L16c1c8.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16c1cc.  call temp:= `isAllowGeneratedIdInsert`(v0) @signature `Lcom/j256/ormlite/field/FieldType;.isAllowGeneratedIdInsert:()Z` @kind virtual;
  #L16c1d2.  v0:= temp;
  #L16c1d4.  if v0 == 0 then goto L16c25e;
  #L16c1d8.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16c1dc.  call temp:= `isObjectsFieldValueDefault`(v0, v12) @signature `Lcom/j256/ormlite/field/FieldType;.isObjectsFieldValueDefault:(Ljava/lang/Object;)Z` @kind virtual;
  #L16c1e2.  v0:= temp;
  #L16c1e4.  if v0 != 0 then goto L16c25e;
  #L16c1e8.  v0:= v1;
  #L16c1ea.  v3:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16c1ee.  call temp:= `isSelfGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @kind virtual;
  #L16c1f4.  v3:= temp;
  #L16c1f6.  if v3 == 0 then goto L16c262;
  #L16c1fa.  v3:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16c1fe.  call temp:= `isGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L16c204.  v3:= temp;
  #L16c206.  if v3 == 0 then goto L16c262;
  #L16c20a.  if v0 == 0 then goto L16c484;
  #L16c20e.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16c212.  v3:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16c216.  call temp:= `generateId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.generateId:()Ljava/lang/Object;` @kind virtual;
  #L16c21c.  v3:= temp @kind object;
  #L16c21e.  call `assignField`(v0, v12, v3, v1, v13) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L16c224.  v3:= v2 @kind object;
  #Try_start0.  
  #L16c226.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L16c22a.  call temp:= `isForeignAutoCreate`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.isForeignAutoCreate:()Z` @kind virtual;
  #L16c230.  v0:= temp;
  #L16c232.  if v0 == 0 then goto L16c320;
  #L16c236.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L16c23a.  call temp:= `getFieldTypes`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16c240.  v0:= temp @kind object;
  #L16c242.  v4:= length @variable v0;
  #L16c244.  if v1 >= v4 then goto L16c320;
  #L16c248.  v5:= v0[v1] @kind object;
  #L16c24c.  call temp:= `isForeignAutoCreate`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignAutoCreate:()Z` @kind virtual;
  #Try_end0.  
  #L16c252.  v6:= temp;
  #L16c254.  if v6 != 0 then goto L16c2ae;
  #L16c258.  v1:= v1 + 1;
  #L16c25c.  goto L16c244;
  #L16c25e.  v0:= 1I;
  #L16c260.  goto L16c1ea;
  #L16c262.  v3:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16c266.  call temp:= `isGeneratedIdSequence`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedIdSequence:()Z` @kind virtual;
  #L16c26c.  v3:= temp;
  #L16c26e.  if v3 == 0 then goto L16c28c;
  #L16c272.  call temp:= `isSelectSequenceBeforeInsert`(v10) @signature `Lcom/j256/ormlite/db/DatabaseType;.isSelectSequenceBeforeInsert:()Z` @kind interface;
  #L16c278.  v3:= temp;
  #L16c27a.  if v3 == 0 then goto L16c28c;
  #L16c27e.  if v0 == 0 then goto L16c484;
  #L16c282.  call `assignSequenceId`(v9, v11, v12, v13) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.assignSequenceId:(Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)V` @kind direct;
  #L16c288.  v3:= v2 @kind object;
  #L16c28a.  goto L16c226;
  #L16c28c.  v3:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16c290.  call temp:= `isGeneratedId`(v3) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L16c296.  v3:= temp;
  #L16c298.  if v3 == 0 then goto L16c484;
  #L16c29c.  if v0 == 0 then goto L16c484;
  #L16c2a0.  v0:= new `com.j256.ormlite.stmt.mapped.MappedCreate$KeyHolder`;
  #L16c2a4.  call `<init>`(v0, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate$KeyHolder;.<init>:(Lcom/j256/ormlite/stmt/mapped/MappedCreate$1;)V` @kind direct;
  #L16c2aa.  v3:= v0 @kind object;
  #L16c2ac.  goto L16c226;
  #Try_start1.  
  #L16c2ae.  call temp:= `extractRawJavaFieldValue`(v5, v12) @signature `Lcom/j256/ormlite/field/FieldType;.extractRawJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16c2b4.  v6:= temp @kind object;
  #L16c2b6.  if v6 == 0 then goto L16c258;
  #L16c2ba.  call temp:= `getForeignIdField`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16c2c0.  v7:= temp @kind object;
  #L16c2c2.  call temp:= `isObjectsFieldValueDefault`(v7, v6) @signature `Lcom/j256/ormlite/field/FieldType;.isObjectsFieldValueDefault:(Ljava/lang/Object;)Z` @kind virtual;
  #L16c2c8.  v7:= temp;
  #L16c2ca.  if v7 == 0 then goto L16c258;
  #L16c2ce.  call temp:= `createWithForeignDao`(v5, v6) @signature `Lcom/j256/ormlite/field/FieldType;.createWithForeignDao:(Ljava/lang/Object;)I` @kind virtual;
  #Try_end1.  
  #L16c2d4.  goto L16c258;
  #L16c2d6.  v0:= Exception @type ^`java.sql.SQLException` @kind object;
  #L16c2d8.  v1:= new `java.lang.StringBuilder`;
  #L16c2dc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16c2e2.  v2:= "Unable to run insert stmt on object " @kind object;
  #L16c2e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c2ec.  v1:= temp @kind object;
  #L16c2ee.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c2f4.  v1:= temp @kind object;
  #L16c2f6.  v2:= ": " @kind object;
  #L16c2fa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c300.  v1:= temp @kind object;
  #L16c302.  v2:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.statement` @type ^`java.lang.String` @kind object;
  #L16c306.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16c30c.  v1:= temp @kind object;
  #L16c30e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16c314.  v1:= temp @kind object;
  #L16c316.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L16c31c.  v0:= temp @kind object;
  #L16c31e.  throw v0;
  #Try_start2.  
  #L16c320.  call temp:= `getFieldObjects`(v9, v12) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.getFieldObjects:(Ljava/lang/Object;)[Ljava/lang/Object;` @kind virtual;
  #L16c326.  v1:= temp @kind object;
  #L16c328.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int`;
  #L16c32c.  if v0 < 0 then goto L16c47e;
  #L16c330.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int`;
  #L16c334.  v0:= v1[v0] @kind object;
  #L16c338.  if v0 != 0 then goto L16c47e;
  #L16c33c.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L16c340.  v2:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int`;
  #L16c344.  v2:= v0[v2] @kind object;
  #L16c348.  v0:= 0I;
  #L16c34a.  call temp:= `moveToNextValue`(v2, v0) @signature `Lcom/j256/ormlite/field/FieldType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16c350.  v0:= temp @kind object;
  #L16c352.  v4:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int`;
  #L16c356.  call temp:= `convertJavaFieldToSqlArgValue`(v2, v0) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16c35c.  v2:= temp @kind object;
  #L16c35e.  v1[v4]:= v2 @kind object;
  #Try_end2.  
  #Try_start3.  
  #L16c362.  v2:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.statement` @type ^`java.lang.String` @kind object;
  #L16c366.  v4:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L16c36a.  call temp:= `insert`(v11, v2, v1, v4, v3) @signature `Lcom/j256/ormlite/support/DatabaseConnection;.insert:(Ljava/lang/String;[Ljava/lang/Object;[Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/GeneratedKeyHolder;)I` @kind interface;
  #Try_end3.  
  #L16c370.  v2:= temp;
  #Try_start4.  
  #L16c372.  v4:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16c376.  v5:= "insert data with statement '{}' and {} args, changed {} rows" @kind object;
  #L16c37a.  v6:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.statement` @type ^`java.lang.String` @kind object;
  #L16c37e.  v7:= length @variable v1;
  #L16c380.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L16c386.  v7:= temp @kind object;
  #L16c388.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L16c38e.  v8:= temp @kind object;
  #L16c390.  call `debug`(v4, v5, v6, v7, v8) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L16c396.  v4:= length @variable v1;
  #L16c398.  if v4 <= 0 then goto L16c3aa;
  #L16c39c.  v4:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16c3a0.  v5:= "insert arguments: {}" @kind object;
  #L16c3a4.  call `trace`(v4, v5, v1) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L16c3aa.  if v2 <= 0 then goto L16c47c;
  #L16c3ae.  if v0 == 0 then goto L16c3c8;
  #L16c3b2.  v1:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L16c3b6.  v4:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.versionFieldTypeIndex` @type ^`int`;
  #L16c3ba.  v1:= v1[v4] @kind object;
  #L16c3be.  v4:= 0I;
  #L16c3c0.  v5:= 0I;
  #L16c3c2.  call `assignField`(v1, v12, v0, v4, v5) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L16c3c8.  if v3 == 0 then goto L16c44a;
  #L16c3cc.  call temp:= `getKey`(v3) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate$KeyHolder;.getKey:()Ljava/lang/Number;` @kind virtual;
  #L16c3d2.  v0:= temp @kind object;
  #L16c3d4.  if v0 != 0 then goto L16c41c;
  #L16c3d8.  v0:= new `java.sql.SQLException`;
  #L16c3dc.  v1:= "generated-id key was not set by the update call, maybe a schema mismatch between entity and database table?" @kind object;
  #L16c3e0.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16c3e6.  throw v0;
  #L16c3e8.  v0:= Exception @type ^`java.sql.SQLException` @kind object;
  #L16c3ea.  v2:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16c3ee.  v3:= "insert data with statement '{}' and {} args, threw exception: {}" @kind object;
  #L16c3f2.  v4:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.statement` @type ^`java.lang.String` @kind object;
  #L16c3f6.  v5:= length @variable v1;
  #L16c3f8.  call temp:= `valueOf`(v5) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L16c3fe.  v5:= temp @kind object;
  #L16c400.  call `debug`(v2, v3, v4, v5, v0) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L16c406.  v2:= length @variable v1;
  #L16c408.  if v2 <= 0 then goto L16c41a;
  #L16c40c.  v2:= `@@com.j256.ormlite.stmt.mapped.MappedCreate.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16c410.  v3:= "insert arguments: {}" @kind object;
  #L16c414.  call `trace`(v2, v3, v1) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L16c41a.  throw v0;
  #L16c41c.  call temp:= `longValue`(v0) @signature `Ljava/lang/Number;.longValue:()J` @kind virtual;
  #L16c422.  v4:= temp @kind wide;
  #L16c424.  v6:= 0L;
  #L16c428.  v1:= lcmp(v4, v6);
  #L16c42c.  if v1 != 0 then goto L16c440;
  #L16c430.  v0:= new `java.sql.SQLException`;
  #L16c434.  v1:= "generated-id key must not be 0 value, maybe a schema mismatch between entity and database table?" @kind object;
  #L16c438.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16c43e.  throw v0;
  #L16c440.  v1:= "keyholder" @kind object;
  #L16c444.  call `assignIdValue`(v9, v12, v0, v1, v13) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Ljava/lang/String;Lcom/j256/ormlite/dao/ObjectCache;)V` @kind direct;
  #L16c44a.  if v13 == 0 then goto L16c47c;
  #L16c44e.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L16c452.  call temp:= `getForeignCollections`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.getForeignCollections:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16c458.  v0:= temp @kind object;
  #L16c45a.  call temp:= `foreignCollectionsAreAssigned`(v9, v0, v12) @signature `Lcom/j256/ormlite/stmt/mapped/MappedCreate;.foreignCollectionsAreAssigned:([Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Z` @kind direct;
  #L16c460.  v0:= temp;
  #L16c462.  if v0 == 0 then goto L16c47c;
  #L16c466.  v0:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16c46a.  call temp:= `extractJavaFieldValue`(v0, v12) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16c470.  v0:= temp @kind object;
  #L16c472.  v1:= v9.`com.j256.ormlite.stmt.mapped.MappedCreate.clazz` @type ^`java.lang.Class` @kind object;
  #L16c476.  call `put`(v13, v1, v0, v12) @signature `Lcom/j256/ormlite/dao/ObjectCache;.put:(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #Try_end4.  
  #L16c47c.  return v2;
  #L16c47e.  v0:= v2 @kind object;
  #L16c480.  goto L16c362;
  #L16c484.  v3:= v2 @kind object;
  #L16c486.  goto L16c226;
  catch `java.sql.SQLException` @[Try_start0..Try_end0] goto L16c2d6;
  catch `java.sql.SQLException` @[Try_start1..Try_end1] goto L16c2d6;
  catch `java.sql.SQLException` @[Try_start2..Try_end2] goto L16c2d6;
  catch `java.sql.SQLException` @[Try_start3..Try_end3] goto L16c3e8;
  catch `java.sql.SQLException` @[Try_start4..Try_end4] goto L16c2d6;
}
