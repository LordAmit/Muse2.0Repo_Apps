record `com.j256.ormlite.field.FieldType` @kind class @AccessFlag PUBLIC {
  `java.lang.String` `com.j256.ormlite.field.FieldType.columnName` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.support.ConnectionSource` `com.j256.ormlite.field.FieldType.connectionSource` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.field.DataPersister` `com.j256.ormlite.field.FieldType.dataPersister` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.field.FieldType.dataTypeConfigObj` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.field.FieldType.defaultValue` @AccessFlag PRIVATE;
  `java.lang.reflect.Field` `com.j256.ormlite.field.FieldType.field` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.field.DatabaseFieldConfig` `com.j256.ormlite.field.FieldType.fieldConfig` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.field.FieldConverter` `com.j256.ormlite.field.FieldType.fieldConverter` @AccessFlag PRIVATE;
  `java.lang.reflect.Method` `com.j256.ormlite.field.FieldType.fieldGetMethod` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `com.j256.ormlite.field.FieldType.fieldSetMethod` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.dao.BaseDaoImpl` `com.j256.ormlite.field.FieldType.foreignDao` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.field.FieldType.foreignFieldType` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.field.FieldType.foreignIdField` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.field.FieldType.foreignRefField` @AccessFlag PRIVATE;
  `com.j256.ormlite.table.TableInfo` `com.j256.ormlite.field.FieldType.foreignTableInfo` @AccessFlag PRIVATE;
  `java.lang.String` `com.j256.ormlite.field.FieldType.generatedIdSequence` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.j256.ormlite.field.FieldType.isGeneratedId` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.j256.ormlite.field.FieldType.isId` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` `com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @AccessFlag PRIVATE;
  `java.lang.Class` `com.j256.ormlite.field.FieldType.parentClass` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `com.j256.ormlite.field.FieldType.tableName` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BOOLEAN` @AccessFlag PRIVATE_STATIC;
global `byte` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BYTE` @AccessFlag PRIVATE_STATIC;
global `char` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_CHAR` @AccessFlag PRIVATE_STATIC;
global `double` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_DOUBLE` @AccessFlag PRIVATE_STATIC;
global `float` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_FLOAT` @AccessFlag PRIVATE_STATIC;
global `int` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_INT` @AccessFlag PRIVATE_STATIC;
global `long` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_LONG` @AccessFlag PRIVATE_STATIC;
global `short` `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_SHORT` @AccessFlag PRIVATE_STATIC;
global `java.lang.String` `@@com.j256.ormlite.field.FieldType.FOREIGN_ID_FIELD_SUFFIX` @AccessFlag PUBLIC_STATIC_FINAL;
global `com.j256.ormlite.logger.Logger` `@@com.j256.ormlite.field.FieldType.logger` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.ThreadLocal` `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/FieldType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L15de2c.  v0:= new `java.lang.ThreadLocal`;
  #L15de30.  call `<init>`(v0) @signature `Ljava/lang/ThreadLocal;.<init>:()V` @kind direct;
  #L15de36.  `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` := v0 @kind object;
  #L15de3a.  v0:= constclass @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15de3e.  call temp:= `getLogger`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/Class;)Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L15de44.  v0:= temp @kind object;
  #L15de46.  `@@com.j256.ormlite.field.FieldType.logger` @type ^`com.j256.ormlite.logger.Logger` := v0 @kind object;
  #L15de4a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.FieldType` v9 @kind this, `com.j256.ormlite.support.ConnectionSource` v10 @kind object, `java.lang.String` v11 @kind object, `java.lang.reflect.Field` v12 @kind object, `com.j256.ormlite.field.DatabaseFieldConfig` v13 @kind object, `java.lang.Class` v14 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.<init>:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Lcom/j256/ormlite/field/DatabaseFieldConfig;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L15de5c.  v8:= 0I;
  #L15de5e.  v7:= 0I;
  #L15de60.  v6:= 1I;
  #L15de62.  call `<init>`(v9) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15de68.  v9.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` := v10 @kind object;
  #L15de6c.  v9.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` := v11 @kind object;
  #L15de70.  call temp:= `getDatabaseType`(v10) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L15de76.  v3:= temp @kind object;
  #L15de78.  v9.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` := v12 @kind object;
  #L15de7c.  v9.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` := v14 @kind object;
  #L15de80.  call `postProcess`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.postProcess:()V` @kind virtual;
  #L15de86.  call temp:= `getType`(v12) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15de8c.  v4:= temp @kind object;
  #L15de8e.  call temp:= `getDataPersister`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L15de94.  v0:= temp @kind object;
  #L15de96.  if v0 != 0 then goto L15e076;
  #L15de9a.  call temp:= `getPersisterClass`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getPersisterClass:()Ljava/lang/Class;` @kind virtual;
  #L15dea0.  v1:= temp @kind object;
  #L15dea2.  if v1 == 0 then goto L15deae;
  #L15dea6.  v0:= constclass @type ^`com.j256.ormlite.field.types.VoidType` @kind object;
  #L15deaa.  if v1 != v0 then goto L15df46;
  #L15deae.  call temp:= `lookupForField`(v12) @signature `Lcom/j256/ormlite/field/DataPersisterManager;.lookupForField:(Ljava/lang/reflect/Field;)Lcom/j256/ormlite/field/DataPersister;` @kind static;
  #L15deb4.  v0:= temp @kind object;
  #L15deb6.  v1:= v0 @kind object;
  #L15deb8.  call temp:= `getForeignColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignColumnName:()Ljava/lang/String;` @kind virtual;
  #L15debe.  v0:= temp @kind object;
  #L15dec0.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15dec6.  v2:= temp @kind object;
  #L15dec8.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L15dece.  v5:= temp;
  #L15ded0.  if v5 != 0 then goto L15dee4;
  #L15ded4.  call temp:= `isForeignAutoRefresh`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L15deda.  v5:= temp;
  #L15dedc.  if v5 != 0 then goto L15dee4;
  #L15dee0.  if v0 == 0 then goto L15e202;
  #L15dee4.  if v1 == 0 then goto L15e11e;
  #L15dee8.  call temp:= `isPrimitive`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L15deee.  v5:= temp;
  #L15def0.  if v5 == 0 then goto L15e11e;
  #L15def4.  v0:= new `java.lang.IllegalArgumentException`;
  #L15def8.  v1:= new `java.lang.StringBuilder`;
  #L15defc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15df02.  v2:= "Field " @kind object;
  #L15df06.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15df0c.  v1:= temp @kind object;
  #L15df0e.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15df14.  v1:= temp @kind object;
  #L15df16.  v2:= " is a primitive class " @kind object;
  #L15df1a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15df20.  v1:= temp @kind object;
  #L15df22.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15df28.  v1:= temp @kind object;
  #L15df2a.  v2:= " but marked as foreign" @kind object;
  #L15df2e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15df34.  v1:= temp @kind object;
  #L15df36.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15df3c.  v1:= temp @kind object;
  #L15df3e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15df44.  throw v0;
  #Try_start0.  
  #L15df46.  v0:= "getSingleton" @kind object;
  #L15df4a.  v2:= 0I;
  #L15df4c.  v2:= new `java.lang.Class`[v2];
  #L15df50.  call temp:= `getDeclaredMethod`(v1, v0, v2) @signature `Ljava/lang/Class;.getDeclaredMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #Try_end0.  
  #L15df56.  v0:= temp @kind object;
  #L15df58.  v2:= 0I;
  #L15df5a.  v5:= 0I;
  #Try_start1.  
  #L15df5c.  v5:= new `java.lang.Object`[v5];
  #L15df60.  call temp:= `invoke`(v0, v2, v5) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L15df66.  v0:= temp @kind object;
  #L15df68.  if v0 != 0 then goto L15e03c;
  #L15df6c.  v0:= new `java.sql.SQLException`;
  #L15df70.  v2:= new `java.lang.StringBuilder`;
  #L15df74.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15df7a.  v3:= "Static getSingleton method should not return null on class " @kind object;
  #L15df7e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15df84.  v2:= temp @kind object;
  #L15df86.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15df8c.  v1:= temp @kind object;
  #L15df8e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15df94.  v1:= temp @kind object;
  #L15df96.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15df9c.  throw v0;
  #L15df9e.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L15dfa0.  v2:= new `java.lang.StringBuilder`;
  #L15dfa4.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15dfaa.  v3:= "Could not find getSingleton static method on class " @kind object;
  #L15dfae.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15dfb4.  v2:= temp @kind object;
  #L15dfb6.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15dfbc.  v1:= temp @kind object;
  #L15dfbe.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15dfc4.  v1:= temp @kind object;
  #L15dfc6.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15dfcc.  v0:= temp @kind object;
  #L15dfce.  throw v0;
  #L15dfd0.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L15dfd2.  v2:= new `java.lang.StringBuilder`;
  #L15dfd6.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15dfdc.  v3:= "Could not run getSingleton method on class " @kind object;
  #L15dfe0.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15dfe6.  v2:= temp @kind object;
  #L15dfe8.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15dfee.  v1:= temp @kind object;
  #L15dff0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15dff6.  v1:= temp @kind object;
  #L15dff8.  call temp:= `getTargetException`(v0) @signature `Ljava/lang/reflect/InvocationTargetException;.getTargetException:()Ljava/lang/Throwable;` @kind virtual;
  #L15dffe.  v0:= temp @kind object;
  #L15e000.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15e006.  v0:= temp @kind object;
  #L15e008.  throw v0;
  #L15e00a.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L15e00c.  v2:= new `java.lang.StringBuilder`;
  #L15e010.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e016.  v3:= "Could not run getSingleton method on class " @kind object;
  #L15e01a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e020.  v2:= temp @kind object;
  #L15e022.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e028.  v1:= temp @kind object;
  #L15e02a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e030.  v1:= temp @kind object;
  #L15e032.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15e038.  v0:= temp @kind object;
  #L15e03a.  throw v0;
  #Try_start2.  
  #L15e03c.  v0:= (`com.j256.ormlite.field.DataPersister`) v0 @kind object;
  #Try_end2.  
  #L15e040.  goto L15deb6;
  #L15e044.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L15e046.  v2:= new `java.lang.StringBuilder`;
  #L15e04a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e050.  v3:= "Could not cast result of static getSingleton method to DataPersister from class " @kind object;
  #L15e054.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e05a.  v2:= temp @kind object;
  #L15e05c.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e062.  v1:= temp @kind object;
  #L15e064.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e06a.  v1:= temp @kind object;
  #L15e06c.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15e072.  v0:= temp @kind object;
  #L15e074.  throw v0;
  #L15e076.  call temp:= `getDataPersister`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L15e07c.  v0:= temp @kind object;
  #L15e07e.  call temp:= `isValidForField`(v0, v12) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidForField:(Ljava/lang/reflect/Field;)Z` @kind interface;
  #L15e084.  v1:= temp;
  #L15e086.  if v1 != 0 then goto L15e8b2;
  #L15e08a.  v1:= new `java.lang.StringBuilder`;
  #L15e08e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e094.  v2:= "Field class " @kind object;
  #L15e098.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e09e.  v2:= temp @kind object;
  #L15e0a0.  call temp:= `getName`(v4) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e0a6.  v3:= temp @kind object;
  #L15e0a8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e0ae.  v2:= " for field " @kind object;
  #L15e0b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e0b8.  v2:= temp @kind object;
  #L15e0ba.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e0c0.  v2:= " is not valid for type " @kind object;
  #L15e0c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e0ca.  v2:= temp @kind object;
  #L15e0cc.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e0d2.  call temp:= `getPrimaryClass`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.getPrimaryClass:()Ljava/lang/Class;` @kind interface;
  #L15e0d8.  v0:= temp @kind object;
  #L15e0da.  if v0 == 0 then goto L15e10a;
  #L15e0de.  v2:= new `java.lang.StringBuilder`;
  #L15e0e2.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e0e8.  v3:= ", maybe should be " @kind object;
  #L15e0ec.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e0f2.  v2:= temp @kind object;
  #L15e0f4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e0fa.  v0:= temp @kind object;
  #L15e0fc.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e102.  v0:= temp @kind object;
  #L15e104.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e10a.  v0:= new `java.lang.IllegalArgumentException`;
  #L15e10e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e114.  v1:= temp @kind object;
  #L15e116.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e11c.  throw v0;
  #L15e11e.  if v0 != 0 then goto L15e1d2;
  #L15e122.  v0:= new `java.lang.StringBuilder`;
  #L15e126.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e12c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e132.  v0:= temp @kind object;
  #L15e134.  v2:= "_id" @kind object;
  #L15e138.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e13e.  v0:= temp @kind object;
  #L15e140.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e146.  v0:= temp @kind object;
  #L15e148.  v2:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L15e14c.  call temp:= `isAssignableFrom`(v2, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L15e152.  v2:= temp;
  #L15e154.  if v2 == 0 then goto L15e33c;
  #L15e158.  v0:= new `java.sql.SQLException`;
  #L15e15c.  v1:= new `java.lang.StringBuilder`;
  #L15e160.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e166.  v2:= "Field '" @kind object;
  #L15e16a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e170.  v1:= temp @kind object;
  #L15e172.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e178.  v2:= temp @kind object;
  #L15e17a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e180.  v1:= temp @kind object;
  #L15e182.  v2:= "' in class " @kind object;
  #L15e186.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e18c.  v1:= temp @kind object;
  #L15e18e.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e194.  v1:= temp @kind object;
  #L15e196.  v2:= "' should use the @" @kind object;
  #L15e19a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e1a0.  v1:= temp @kind object;
  #L15e1a2.  v2:= constclass @type ^`com.j256.ormlite.field.ForeignCollectionField` @kind object;
  #L15e1a6.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L15e1ac.  v2:= temp @kind object;
  #L15e1ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e1b4.  v1:= temp @kind object;
  #L15e1b6.  v2:= " annotation not foreign=true" @kind object;
  #L15e1ba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e1c0.  v1:= temp @kind object;
  #L15e1c2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e1c8.  v1:= temp @kind object;
  #L15e1ca.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e1d0.  throw v0;
  #L15e1d2.  v5:= new `java.lang.StringBuilder`;
  #L15e1d6.  call `<init>`(v5) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e1dc.  call temp:= `append`(v5, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e1e2.  v2:= temp @kind object;
  #L15e1e4.  v5:= "_" @kind object;
  #L15e1e8.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e1ee.  v2:= temp @kind object;
  #L15e1f0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e1f6.  v0:= temp @kind object;
  #L15e1f8.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e1fe.  v0:= temp @kind object;
  #L15e200.  goto L15e148;
  #L15e202.  call temp:= `isForeignCollection`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L15e208.  v0:= temp;
  #L15e20a.  if v0 == 0 then goto L15e3ae;
  #L15e20e.  v0:= constclass @type ^`java.util.Collection` @kind object;
  #L15e212.  if v4 == v0 then goto L15e28c;
  #L15e216.  v0:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L15e21a.  call temp:= `isAssignableFrom`(v0, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L15e220.  v0:= temp;
  #L15e222.  if v0 != 0 then goto L15e28c;
  #L15e226.  v0:= new `java.sql.SQLException`;
  #L15e22a.  v1:= new `java.lang.StringBuilder`;
  #L15e22e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e234.  v2:= "Field class for '" @kind object;
  #L15e238.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e23e.  v1:= temp @kind object;
  #L15e240.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e246.  v2:= temp @kind object;
  #L15e248.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e24e.  v1:= temp @kind object;
  #L15e250.  v2:= "' must be of class " @kind object;
  #L15e254.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e25a.  v1:= temp @kind object;
  #L15e25c.  v2:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L15e260.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L15e266.  v2:= temp @kind object;
  #L15e268.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e26e.  v1:= temp @kind object;
  #L15e270.  v2:= " or Collection." @kind object;
  #L15e274.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e27a.  v1:= temp @kind object;
  #L15e27c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e282.  v1:= temp @kind object;
  #L15e284.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e28a.  throw v0;
  #L15e28c.  call temp:= `getGenericType`(v12) @signature `Ljava/lang/reflect/Field;.getGenericType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L15e292.  v0:= temp @kind object;
  #L15e294.  v4:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L15e298.  if v4 != 0 then goto L15e2e2;
  #L15e29c.  v0:= new `java.sql.SQLException`;
  #L15e2a0.  v1:= new `java.lang.StringBuilder`;
  #L15e2a4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e2aa.  v2:= "Field class for '" @kind object;
  #L15e2ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e2b4.  v1:= temp @kind object;
  #L15e2b6.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e2bc.  v2:= temp @kind object;
  #L15e2be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e2c4.  v1:= temp @kind object;
  #L15e2c6.  v2:= "' must be a parameterized Collection." @kind object;
  #L15e2ca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e2d0.  v1:= temp @kind object;
  #L15e2d2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e2d8.  v1:= temp @kind object;
  #L15e2da.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e2e0.  throw v0;
  #L15e2e2.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L15e2e6.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L15e2ec.  v0:= temp @kind object;
  #L15e2ee.  v0:= length @variable v0;
  #L15e2f0.  if v0 != 0 then goto L15e33a;
  #L15e2f4.  v0:= new `java.sql.SQLException`;
  #L15e2f8.  v1:= new `java.lang.StringBuilder`;
  #L15e2fc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e302.  v2:= "Field class for '" @kind object;
  #L15e306.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e30c.  v1:= temp @kind object;
  #L15e30e.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e314.  v2:= temp @kind object;
  #L15e316.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e31c.  v1:= temp @kind object;
  #L15e31e.  v2:= "' must be a parameterized Collection with at least 1 type." @kind object;
  #L15e322.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e328.  v1:= temp @kind object;
  #L15e32a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e330.  v1:= temp @kind object;
  #L15e332.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e338.  throw v0;
  #L15e33a.  v0:= v2 @kind object;
  #L15e33c.  call temp:= `getColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L15e342.  v2:= temp @kind object;
  #L15e344.  if v2 != 0 then goto L15e4f8;
  #L15e348.  v9.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L15e34c.  v9.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` := v13 @kind object;
  #L15e350.  call temp:= `isId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isId:()Z` @kind virtual;
  #L15e356.  v0:= temp;
  #L15e358.  if v0 == 0 then goto L15e57a;
  #L15e35c.  call temp:= `isGeneratedId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isGeneratedId:()Z` @kind virtual;
  #L15e362.  v0:= temp;
  #L15e364.  if v0 != 0 then goto L15e374;
  #L15e368.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L15e36e.  v0:= temp @kind object;
  #L15e370.  if v0 == 0 then goto L15e508;
  #L15e374.  v0:= new `java.lang.IllegalArgumentException`;
  #L15e378.  v1:= new `java.lang.StringBuilder`;
  #L15e37c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e382.  v2:= "Must specify one of id, generatedId, and generatedIdSequence with " @kind object;
  #L15e386.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e38c.  v1:= temp @kind object;
  #L15e38e.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e394.  v2:= temp @kind object;
  #L15e396.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e39c.  v1:= temp @kind object;
  #L15e39e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e3a4.  v1:= temp @kind object;
  #L15e3a6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e3ac.  throw v0;
  #L15e3ae.  if v1 != 0 then goto L15e8ac;
  #L15e3b2.  call temp:= `isForeignCollection`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L15e3b8.  v0:= temp;
  #L15e3ba.  if v0 != 0 then goto L15e8ac;
  #L15e3be.  v0:= constclass @type ^`byte`[] @kind object;
  #L15e3c2.  call temp:= `isAssignableFrom`(v0, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L15e3c8.  v0:= temp;
  #L15e3ca.  if v0 == 0 then goto L15e428;
  #L15e3ce.  v0:= new `java.sql.SQLException`;
  #L15e3d2.  v1:= new `java.lang.StringBuilder`;
  #L15e3d6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e3dc.  v2:= "ORMLite does not know how to store " @kind object;
  #L15e3e0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e3e6.  v1:= temp @kind object;
  #L15e3e8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e3ee.  v1:= temp @kind object;
  #L15e3f0.  v2:= " for field '" @kind object;
  #L15e3f4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e3fa.  v1:= temp @kind object;
  #L15e3fc.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e402.  v2:= temp @kind object;
  #L15e404.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e40a.  v1:= temp @kind object;
  #L15e40c.  v2:= "'. byte[] fields must specify dataType=DataType.BYTE_ARRAY or SERIALIZABLE" @kind object;
  #L15e410.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e416.  v1:= temp @kind object;
  #L15e418.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e41e.  v1:= temp @kind object;
  #L15e420.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e426.  throw v0;
  #L15e428.  v0:= constclass @type ^`java.io.Serializable` @kind object;
  #L15e42c.  call temp:= `isAssignableFrom`(v0, v4) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L15e432.  v0:= temp;
  #L15e434.  if v0 == 0 then goto L15e49e;
  #L15e438.  v0:= new `java.sql.SQLException`;
  #L15e43c.  v1:= new `java.lang.StringBuilder`;
  #L15e440.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e446.  v2:= "ORMLite does not know how to store " @kind object;
  #L15e44a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e450.  v1:= temp @kind object;
  #L15e452.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e458.  v1:= temp @kind object;
  #L15e45a.  v2:= " for field '" @kind object;
  #L15e45e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e464.  v1:= temp @kind object;
  #L15e466.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e46c.  v2:= temp @kind object;
  #L15e46e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e474.  v1:= temp @kind object;
  #L15e476.  v2:= "'.  Use another class, custom persister, or to serialize it use " @kind object;
  #L15e47a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e480.  v1:= temp @kind object;
  #L15e482.  v2:= "dataType=DataType.SERIALIZABLE" @kind object;
  #L15e486.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e48c.  v1:= temp @kind object;
  #L15e48e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e494.  v1:= temp @kind object;
  #L15e496.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e49c.  throw v0;
  #L15e49e.  v0:= new `java.lang.IllegalArgumentException`;
  #L15e4a2.  v1:= new `java.lang.StringBuilder`;
  #L15e4a6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e4ac.  v2:= "ORMLite does not know how to store " @kind object;
  #L15e4b0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e4b6.  v1:= temp @kind object;
  #L15e4b8.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e4be.  v1:= temp @kind object;
  #L15e4c0.  v2:= " for field " @kind object;
  #L15e4c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e4ca.  v1:= temp @kind object;
  #L15e4cc.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e4d2.  v2:= temp @kind object;
  #L15e4d4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e4da.  v1:= temp @kind object;
  #L15e4dc.  v2:= ". Use another class or a custom persister." @kind object;
  #L15e4e0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e4e6.  v1:= temp @kind object;
  #L15e4e8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e4ee.  v1:= temp @kind object;
  #L15e4f0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e4f6.  throw v0;
  #L15e4f8.  call temp:= `getColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L15e4fe.  v0:= temp @kind object;
  #L15e500.  v9.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L15e504.  goto L15e34c;
  #L15e508.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v6 @kind boolean;
  #L15e50c.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v8 @kind boolean;
  #L15e510.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v7 @kind object;
  #L15e514.  v0:= v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` @kind boolean;
  #L15e518.  if v0 == 0 then goto L15e63c;
  #L15e51c.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L15e522.  v0:= temp;
  #L15e524.  if v0 != 0 then goto L15e534;
  #L15e528.  call temp:= `isForeignAutoRefresh`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L15e52e.  v0:= temp;
  #L15e530.  if v0 == 0 then goto L15e63c;
  #L15e534.  v0:= new `java.lang.IllegalArgumentException`;
  #L15e538.  v1:= new `java.lang.StringBuilder`;
  #L15e53c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e542.  v2:= "Id field " @kind object;
  #L15e546.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e54c.  v1:= temp @kind object;
  #L15e54e.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e554.  v2:= temp @kind object;
  #L15e556.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e55c.  v1:= temp @kind object;
  #L15e55e.  v2:= " cannot also be a foreign object" @kind object;
  #L15e562.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e568.  v1:= temp @kind object;
  #L15e56a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e570.  v1:= temp @kind object;
  #L15e572.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e578.  throw v0;
  #L15e57a.  call temp:= `isGeneratedId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isGeneratedId:()Z` @kind virtual;
  #L15e580.  v0:= temp;
  #L15e582.  if v0 == 0 then goto L15e5f4;
  #L15e586.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L15e58c.  v0:= temp @kind object;
  #L15e58e.  if v0 == 0 then goto L15e5cc;
  #L15e592.  v0:= new `java.lang.IllegalArgumentException`;
  #L15e596.  v1:= new `java.lang.StringBuilder`;
  #L15e59a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e5a0.  v2:= "Must specify one of id, generatedId, and generatedIdSequence with " @kind object;
  #L15e5a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e5aa.  v1:= temp @kind object;
  #L15e5ac.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e5b2.  v2:= temp @kind object;
  #L15e5b4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e5ba.  v1:= temp @kind object;
  #L15e5bc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e5c2.  v1:= temp @kind object;
  #L15e5c4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e5ca.  throw v0;
  #L15e5cc.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v6 @kind boolean;
  #L15e5d0.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v6 @kind boolean;
  #L15e5d4.  call temp:= `isIdSequenceNeeded`(v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.isIdSequenceNeeded:()Z` @kind interface;
  #L15e5da.  v0:= temp;
  #L15e5dc.  if v0 == 0 then goto L15e5ee;
  #L15e5e0.  call temp:= `generateIdSequenceName`(v3, v11, v9) @signature `Lcom/j256/ormlite/db/DatabaseType;.generateIdSequenceName:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)Ljava/lang/String;` @kind interface;
  #L15e5e6.  v0:= temp @kind object;
  #L15e5e8.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v0 @kind object;
  #L15e5ec.  goto L15e514;
  #L15e5ee.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v7 @kind object;
  #L15e5f2.  goto L15e514;
  #L15e5f4.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L15e5fa.  v0:= temp @kind object;
  #L15e5fc.  if v0 == 0 then goto L15e62c;
  #L15e600.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v6 @kind boolean;
  #L15e604.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v6 @kind boolean;
  #L15e608.  call temp:= `getGeneratedIdSequence`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getGeneratedIdSequence:()Ljava/lang/String;` @kind virtual;
  #L15e60e.  v0:= temp @kind object;
  #L15e610.  call temp:= `isEntityNamesMustBeUpCase`(v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.isEntityNamesMustBeUpCase:()Z` @kind interface;
  #L15e616.  v2:= temp;
  #L15e618.  if v2 == 0 then goto L15e624;
  #L15e61c.  call temp:= `upCaseEntityName`(v3, v0) @signature `Lcom/j256/ormlite/db/DatabaseType;.upCaseEntityName:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L15e622.  v0:= temp @kind object;
  #L15e624.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v0 @kind object;
  #L15e628.  goto L15e514;
  #L15e62c.  v9.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` := v8 @kind boolean;
  #L15e630.  v9.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` := v8 @kind boolean;
  #L15e634.  v9.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` := v7 @kind object;
  #L15e638.  goto L15e514;
  #L15e63c.  call temp:= `isUseGetSet`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isUseGetSet:()Z` @kind virtual;
  #L15e642.  v0:= temp;
  #L15e644.  if v0 == 0 then goto L15e6be;
  #L15e648.  call temp:= `findGetMethod`(v12, v6) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.findGetMethod:(Ljava/lang/reflect/Field;Z)Ljava/lang/reflect/Method;` @kind static;
  #L15e64e.  v0:= temp @kind object;
  #L15e650.  v9.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L15e654.  call temp:= `findSetMethod`(v12, v6) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.findSetMethod:(Ljava/lang/reflect/Field;Z)Ljava/lang/reflect/Method;` @kind static;
  #L15e65a.  v0:= temp @kind object;
  #L15e65c.  v9.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L15e660.  call temp:= `isAllowGeneratedIdInsert`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isAllowGeneratedIdInsert:()Z` @kind virtual;
  #L15e666.  v0:= temp;
  #L15e668.  if v0 == 0 then goto L15e728;
  #L15e66c.  call temp:= `isGeneratedId`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isGeneratedId:()Z` @kind virtual;
  #L15e672.  v0:= temp;
  #L15e674.  if v0 != 0 then goto L15e728;
  #L15e678.  v0:= new `java.lang.IllegalArgumentException`;
  #L15e67c.  v1:= new `java.lang.StringBuilder`;
  #L15e680.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e686.  v2:= "Field " @kind object;
  #L15e68a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e690.  v1:= temp @kind object;
  #L15e692.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e698.  v2:= temp @kind object;
  #L15e69a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e6a0.  v1:= temp @kind object;
  #L15e6a2.  v2:= " must be a generated-id if allowGeneratedIdInsert = true" @kind object;
  #L15e6a6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e6ac.  v1:= temp @kind object;
  #L15e6ae.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e6b4.  v1:= temp @kind object;
  #L15e6b6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e6bc.  throw v0;
  #L15e6be.  call temp:= `isAccessible`(v12) @signature `Ljava/lang/reflect/Field;.isAccessible:()Z` @kind virtual;
  #L15e6c4.  v0:= temp;
  #L15e6c6.  if v0 != 0 then goto L15e6d6;
  #Try_start3.  
  #L15e6ca.  v0:= v9.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15e6ce.  v2:= 1I;
  #L15e6d0.  call `setAccessible`(v0, v2) @signature `Ljava/lang/reflect/Field;.setAccessible:(Z)V` @kind virtual;
  #Try_end3.  
  #L15e6d6.  v9.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` := v7 @kind object;
  #L15e6da.  v9.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` := v7 @kind object;
  #L15e6de.  goto L15e660;
  #L15e6e0.  v0:= Exception @type ^`java.lang.SecurityException` @kind object;
  #L15e6e2.  v0:= new `java.lang.IllegalArgumentException`;
  #L15e6e6.  v1:= new `java.lang.StringBuilder`;
  #L15e6ea.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e6f0.  v2:= "Could not open access to field " @kind object;
  #L15e6f4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e6fa.  v1:= temp @kind object;
  #L15e6fc.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e702.  v2:= temp @kind object;
  #L15e704.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e70a.  v1:= temp @kind object;
  #L15e70c.  v2:= ".  You may have to set useGetSet=true to fix." @kind object;
  #L15e710.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e716.  v1:= temp @kind object;
  #L15e718.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e71e.  v1:= temp @kind object;
  #L15e720.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e726.  throw v0;
  #L15e728.  call temp:= `isForeignAutoRefresh`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L15e72e.  v0:= temp;
  #L15e730.  if v0 == 0 then goto L15e786;
  #L15e734.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L15e73a.  v0:= temp;
  #L15e73c.  if v0 != 0 then goto L15e786;
  #L15e740.  v0:= new `java.lang.IllegalArgumentException`;
  #L15e744.  v1:= new `java.lang.StringBuilder`;
  #L15e748.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e74e.  v2:= "Field " @kind object;
  #L15e752.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e758.  v1:= temp @kind object;
  #L15e75a.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e760.  v2:= temp @kind object;
  #L15e762.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e768.  v1:= temp @kind object;
  #L15e76a.  v2:= " must have foreign = true if foreignAutoRefresh = true" @kind object;
  #L15e76e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e774.  v1:= temp @kind object;
  #L15e776.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e77c.  v1:= temp @kind object;
  #L15e77e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e784.  throw v0;
  #L15e786.  call temp:= `isForeignAutoCreate`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoCreate:()Z` @kind virtual;
  #L15e78c.  v0:= temp;
  #L15e78e.  if v0 == 0 then goto L15e7e4;
  #L15e792.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L15e798.  v0:= temp;
  #L15e79a.  if v0 != 0 then goto L15e7e4;
  #L15e79e.  v0:= new `java.lang.IllegalArgumentException`;
  #L15e7a2.  v1:= new `java.lang.StringBuilder`;
  #L15e7a6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e7ac.  v2:= "Field " @kind object;
  #L15e7b0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e7b6.  v1:= temp @kind object;
  #L15e7b8.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e7be.  v2:= temp @kind object;
  #L15e7c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e7c6.  v1:= temp @kind object;
  #L15e7c8.  v2:= " must have foreign = true if foreignAutoCreate = true" @kind object;
  #L15e7cc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e7d2.  v1:= temp @kind object;
  #L15e7d4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e7da.  v1:= temp @kind object;
  #L15e7dc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e7e2.  throw v0;
  #L15e7e4.  call temp:= `getForeignColumnName`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignColumnName:()Ljava/lang/String;` @kind virtual;
  #L15e7ea.  v0:= temp @kind object;
  #L15e7ec.  if v0 == 0 then goto L15e842;
  #L15e7f0.  call temp:= `isForeign`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L15e7f6.  v0:= temp;
  #L15e7f8.  if v0 != 0 then goto L15e842;
  #L15e7fc.  v0:= new `java.lang.IllegalArgumentException`;
  #L15e800.  v1:= new `java.lang.StringBuilder`;
  #L15e804.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e80a.  v2:= "Field " @kind object;
  #L15e80e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e814.  v1:= temp @kind object;
  #L15e816.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e81c.  v2:= temp @kind object;
  #L15e81e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e824.  v1:= temp @kind object;
  #L15e826.  v2:= " must have foreign = true if foreignColumnName is set" @kind object;
  #L15e82a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e830.  v1:= temp @kind object;
  #L15e832.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e838.  v1:= temp @kind object;
  #L15e83a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e840.  throw v0;
  #L15e842.  call temp:= `isVersion`(v13) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isVersion:()Z` @kind virtual;
  #L15e848.  v0:= temp;
  #L15e84a.  if v0 == 0 then goto L15e8a4;
  #L15e84e.  if v1 == 0 then goto L15e85e;
  #L15e852.  call temp:= `isValidForVersion`(v1) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidForVersion:()Z` @kind interface;
  #L15e858.  v0:= temp;
  #L15e85a.  if v0 != 0 then goto L15e8a4;
  #L15e85e.  v0:= new `java.lang.IllegalArgumentException`;
  #L15e862.  v1:= new `java.lang.StringBuilder`;
  #L15e866.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e86c.  v2:= "Field " @kind object;
  #L15e870.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e876.  v1:= temp @kind object;
  #L15e878.  call temp:= `getName`(v12) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e87e.  v2:= temp @kind object;
  #L15e880.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e886.  v1:= temp @kind object;
  #L15e888.  v2:= " is not a valid type to be a version field" @kind object;
  #L15e88c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e892.  v1:= temp @kind object;
  #L15e894.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e89a.  v1:= temp @kind object;
  #L15e89c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e8a2.  throw v0;
  #L15e8a4.  call `assignDataType`(v9, v3, v1) @signature `Lcom/j256/ormlite/field/FieldType;.assignDataType:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/DataPersister;)V` @kind direct;
  #L15e8aa.  return @kind void;
  #L15e8ac.  v0:= v2 @kind object;
  #L15e8ae.  goto L15e33c;
  #L15e8b2.  v1:= v0 @kind object;
  #L15e8b4.  goto L15deb8;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L15df9e;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start1..Try_end1] goto L15dfd0;
  catch `java.lang.Exception` @[Try_start1..Try_end1] goto L15e00a;
  catch `java.lang.Exception` @[Try_start2..Try_end2] goto L15e044;
  catch `java.lang.SecurityException` @[Try_start3..Try_end3] goto L15e6e0;
}
procedure `void` `assignDataType`(`com.j256.ormlite.field.FieldType` v6 @kind this, `com.j256.ormlite.db.DatabaseType` v7 @kind object, `com.j256.ormlite.field.DataPersister` v8 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.assignDataType:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/DataPersister;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15e904.  call temp:= `getDataPersister`(v7, v8, v6) @signature `Lcom/j256/ormlite/db/DatabaseType;.getDataPersister:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/DataPersister;` @kind interface;
  #L15e90a.  v0:= temp @kind object;
  #L15e90c.  v6.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` := v0 @kind object;
  #L15e910.  if v0 != 0 then goto L15e972;
  #L15e914.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15e918.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L15e91e.  v0:= temp;
  #L15e920.  if v0 != 0 then goto L15eb56;
  #L15e924.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15e928.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L15e92e.  v0:= temp;
  #L15e930.  if v0 != 0 then goto L15eb56;
  #L15e934.  v0:= new `java.sql.SQLException`;
  #L15e938.  v1:= new `java.lang.StringBuilder`;
  #L15e93c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e942.  v2:= "Data persister for field " @kind object;
  #L15e946.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e94c.  v1:= temp @kind object;
  #L15e94e.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e954.  v1:= temp @kind object;
  #L15e956.  v2:= " is null but the field is not a foreign or foreignCollection" @kind object;
  #L15e95a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e960.  v1:= temp @kind object;
  #L15e962.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15e968.  v1:= temp @kind object;
  #L15e96a.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15e970.  throw v0;
  #L15e972.  call temp:= `getFieldConverter`(v7, v0, v6) @signature `Lcom/j256/ormlite/db/DatabaseType;.getFieldConverter:(Lcom/j256/ormlite/field/DataPersister;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/field/FieldConverter;` @kind interface;
  #L15e978.  v1:= temp @kind object;
  #L15e97a.  v6.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` := v1 @kind object;
  #L15e97e.  v1:= v6.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` @kind boolean;
  #L15e982.  if v1 == 0 then goto L15ea5c;
  #L15e986.  call temp:= `isValidGeneratedType`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidGeneratedType:()Z` @kind interface;
  #L15e98c.  v1:= temp;
  #L15e98e.  if v1 != 0 then goto L15ea5c;
  #L15e992.  v1:= new `java.lang.StringBuilder`;
  #L15e996.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15e99c.  v2:= "Generated-id field '" @kind object;
  #L15e9a0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e9a6.  v2:= temp @kind object;
  #L15e9a8.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15e9ac.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15e9b2.  v3:= temp @kind object;
  #L15e9b4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e9ba.  v2:= "' in " @kind object;
  #L15e9be.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e9c4.  v2:= temp @kind object;
  #L15e9c6.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15e9ca.  call temp:= `getDeclaringClass`(v3) @signature `Ljava/lang/reflect/Field;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L15e9d0.  v3:= temp @kind object;
  #L15e9d2.  call temp:= `getSimpleName`(v3) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L15e9d8.  v3:= temp @kind object;
  #L15e9da.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e9e0.  v2:= " can't be type " @kind object;
  #L15e9e4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e9ea.  v2:= temp @kind object;
  #L15e9ec.  call temp:= `getSqlType`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L15e9f2.  v0:= temp @kind object;
  #L15e9f4.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15e9fa.  v0:= ".  Must be one of: " @kind object;
  #L15e9fe.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ea04.  call temp:= `values`() @signature `Lcom/j256/ormlite/field/DataType;.values:()[Lcom/j256/ormlite/field/DataType;` @kind static;
  #L15ea0a.  v2:= temp @kind object;
  #L15ea0c.  v3:= length @variable v2;
  #L15ea0e.  v0:= 0I;
  #L15ea10.  if v0 >= v3 then goto L15ea48;
  #L15ea14.  v4:= v2[v0] @kind object;
  #L15ea18.  call temp:= `getDataPersister`(v4) @signature `Lcom/j256/ormlite/field/DataType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L15ea1e.  v5:= temp @kind object;
  #L15ea20.  if v5 == 0 then goto L15ea42;
  #L15ea24.  call temp:= `isValidGeneratedType`(v5) @signature `Lcom/j256/ormlite/field/DataPersister;.isValidGeneratedType:()Z` @kind interface;
  #L15ea2a.  v5:= temp;
  #L15ea2c.  if v5 == 0 then goto L15ea42;
  #L15ea30.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ea36.  v4:= temp @kind object;
  #L15ea38.  v5:= 32I;
  #L15ea3c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ea42.  v0:= v0 + 1;
  #L15ea46.  goto L15ea10;
  #L15ea48.  v0:= new `java.lang.IllegalArgumentException`;
  #L15ea4c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15ea52.  v1:= temp @kind object;
  #L15ea54.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15ea5a.  throw v0;
  #L15ea5c.  v1:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15ea60.  call temp:= `isThrowIfNull`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isThrowIfNull:()Z` @kind virtual;
  #L15ea66.  v1:= temp;
  #L15ea68.  if v1 == 0 then goto L15eac2;
  #L15ea6c.  call temp:= `isPrimitive`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L15ea72.  v1:= temp;
  #L15ea74.  if v1 != 0 then goto L15eac2;
  #L15ea78.  v0:= new `java.sql.SQLException`;
  #L15ea7c.  v1:= new `java.lang.StringBuilder`;
  #L15ea80.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15ea86.  v2:= "Field " @kind object;
  #L15ea8a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ea90.  v1:= temp @kind object;
  #L15ea92.  v2:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15ea96.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15ea9c.  v2:= temp @kind object;
  #L15ea9e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eaa4.  v1:= temp @kind object;
  #L15eaa6.  v2:= " must be a primitive if set with throwIfNull" @kind object;
  #L15eaaa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eab0.  v1:= temp @kind object;
  #L15eab2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15eab8.  v1:= temp @kind object;
  #L15eaba.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15eac0.  throw v0;
  #L15eac2.  v1:= v6.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` @kind boolean;
  #L15eac6.  if v1 == 0 then goto L15eb34;
  #L15eaca.  call temp:= `isAppropriateId`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isAppropriateId:()Z` @kind interface;
  #L15ead0.  v1:= temp;
  #L15ead2.  if v1 != 0 then goto L15eb34;
  #L15ead6.  v1:= new `java.sql.SQLException`;
  #L15eada.  v2:= new `java.lang.StringBuilder`;
  #L15eade.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15eae4.  v3:= "Field '" @kind object;
  #L15eae8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eaee.  v2:= temp @kind object;
  #L15eaf0.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15eaf4.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15eafa.  v3:= temp @kind object;
  #L15eafc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eb02.  v2:= temp @kind object;
  #L15eb04.  v3:= "' is of data type " @kind object;
  #L15eb08.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eb0e.  v2:= temp @kind object;
  #L15eb10.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eb16.  v0:= temp @kind object;
  #L15eb18.  v2:= " which cannot be the ID field" @kind object;
  #L15eb1c.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eb22.  v0:= temp @kind object;
  #L15eb24.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15eb2a.  v0:= temp @kind object;
  #L15eb2c.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15eb32.  throw v1;
  #L15eb34.  call temp:= `makeConfigObject`(v0, v6) @signature `Lcom/j256/ormlite/field/DataPersister;.makeConfigObject:(Lcom/j256/ormlite/field/FieldType;)Ljava/lang/Object;` @kind interface;
  #L15eb3a.  v0:= temp @kind object;
  #L15eb3c.  v6.`com.j256.ormlite.field.FieldType.dataTypeConfigObj` @type ^`java.lang.Object` := v0 @kind object;
  #L15eb40.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15eb44.  call temp:= `getDefaultValue`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getDefaultValue:()Ljava/lang/String;` @kind virtual;
  #L15eb4a.  v0:= temp @kind object;
  #L15eb4c.  if v0 != 0 then goto L15eb58;
  #L15eb50.  v0:= 0I;
  #L15eb52.  v6.`com.j256.ormlite.field.FieldType.defaultValue` @type ^`java.lang.Object` := v0 @kind object;
  #L15eb56.  return @kind void;
  #L15eb58.  v1:= v6.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` @kind boolean;
  #L15eb5c.  if v1 == 0 then goto L15ebbe;
  #L15eb60.  v1:= new `java.sql.SQLException`;
  #L15eb64.  v2:= new `java.lang.StringBuilder`;
  #L15eb68.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15eb6e.  v3:= "Field '" @kind object;
  #L15eb72.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eb78.  v2:= temp @kind object;
  #L15eb7a.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15eb7e.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15eb84.  v3:= temp @kind object;
  #L15eb86.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eb8c.  v2:= temp @kind object;
  #L15eb8e.  v3:= "' cannot be a generatedId and have a default value '" @kind object;
  #L15eb92.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eb98.  v2:= temp @kind object;
  #L15eb9a.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eba0.  v0:= temp @kind object;
  #L15eba2.  v2:= "'" @kind object;
  #L15eba6.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ebac.  v0:= temp @kind object;
  #L15ebae.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15ebb4.  v0:= temp @kind object;
  #L15ebb6.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15ebbc.  throw v1;
  #L15ebbe.  v1:= v6.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L15ebc2.  call temp:= `parseDefaultString`(v1, v6, v0) @signature `Lcom/j256/ormlite/field/FieldConverter;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @kind interface;
  #L15ebc8.  v0:= temp @kind object;
  #L15ebca.  v6.`com.j256.ormlite.field.FieldType.defaultValue` @type ^`java.lang.Object` := v0 @kind object;
  #L15ebce.  goto L15eb56;
}
procedure `com.j256.ormlite.field.FieldType` `createFieldType`(`com.j256.ormlite.support.ConnectionSource` v6 @kind object, `java.lang.String` v7 @kind object, `java.lang.reflect.Field` v8 @kind object, `java.lang.Class` v9 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createFieldType:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Ljava/lang/Class;)Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15ebe0.  call temp:= `getDatabaseType`(v6) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L15ebe6.  v0:= temp @kind object;
  #L15ebe8.  call temp:= `fromField`(v0, v7, v8) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.fromField:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/reflect/Field;)Lcom/j256/ormlite/field/DatabaseFieldConfig;` @kind static;
  #L15ebee.  v4:= temp @kind object;
  #L15ebf0.  if v4 != 0 then goto L15ebf8;
  #L15ebf4.  v0:= 0I;
  #L15ebf6.  return v0 @kind object;
  #L15ebf8.  v0:= new `com.j256.ormlite.field.FieldType`;
  #L15ebfc.  v1:= v6 @kind object;
  #L15ebfe.  v2:= v7 @kind object;
  #L15ec00.  v3:= v8 @kind object;
  #L15ec02.  v5:= v9 @kind object;
  #L15ec04.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/field/FieldType;.<init>:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Lcom/j256/ormlite/field/DatabaseFieldConfig;Ljava/lang/Class;)V` @kind direct;
  #L15ec0a.  goto L15ebf6;
}
procedure `java.lang.Object` `createForeignObject`(`com.j256.ormlite.field.FieldType` v4 @kind this, `java.lang.Object` v5 @kind object, `com.j256.ormlite.dao.ObjectCache` v6 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignObject:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15ec1c.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L15ec20.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L15ec26.  v0:= temp @kind object;
  #L15ec28.  v0:= (`com.j256.ormlite.field.FieldType$LevelCounters`) v0 @kind object;
  #L15ec2c.  if v0 != 0 then goto L15ec60;
  #L15ec30.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15ec34.  call temp:= `isForeignAutoRefresh`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L15ec3a.  v0:= temp;
  #L15ec3c.  if v0 != 0 then goto L15ec4a;
  #L15ec40.  call temp:= `createForeignShell`(v4, v5, v6) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L15ec46.  v0:= temp @kind object;
  #L15ec48.  return v0 @kind object;
  #L15ec4a.  v0:= new `com.j256.ormlite.field.FieldType$LevelCounters`;
  #L15ec4e.  v1:= 0I;
  #L15ec50.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/FieldType$LevelCounters;.<init>:(Lcom/j256/ormlite/field/FieldType$1;)V` @kind direct;
  #L15ec56.  v1:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L15ec5a.  call `set`(v1, v0) @signature `Ljava/lang/ThreadLocal;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L15ec60.  v1:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L15ec64.  if v1 != 0 then goto L15ec92;
  #L15ec68.  v1:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15ec6c.  call temp:= `isForeignAutoRefresh`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L15ec72.  v1:= temp;
  #L15ec74.  if v1 != 0 then goto L15ec82;
  #L15ec78.  call temp:= `createForeignShell`(v4, v5, v6) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L15ec7e.  v0:= temp @kind object;
  #L15ec80.  goto L15ec48;
  #L15ec82.  v1:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15ec86.  call temp:= `getMaxForeignAutoRefreshLevel`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getMaxForeignAutoRefreshLevel:()I` @kind virtual;
  #L15ec8c.  v1:= temp;
  #L15ec8e.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevelMax` @type ^`int` := v1;
  #L15ec92.  v1:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L15ec96.  v2:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevelMax` @type ^`int`;
  #L15ec9a.  if v1 < v2 then goto L15eca8;
  #L15ec9e.  call temp:= `createForeignShell`(v4, v5, v6) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L15eca4.  v0:= temp @kind object;
  #L15eca6.  goto L15ec48;
  #L15eca8.  v1:= v4.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` @kind object;
  #L15ecac.  if v1 != 0 then goto L15ecd8;
  #L15ecb0.  v1:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L15ecb4.  call temp:= `getDatabaseType`(v1) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L15ecba.  v1:= temp @kind object;
  #L15ecbc.  v2:= v4.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L15ecc0.  call temp:= `getTableInfo`(v2) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L15ecc6.  v2:= temp @kind object;
  #L15ecc8.  v3:= v4.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15eccc.  call temp:= `build`(v1, v2, v3) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.build:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;` @kind static;
  #L15ecd2.  v1:= temp @kind object;
  #L15ecd4.  v4.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` := v1 @kind object;
  #L15ecd8.  v1:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L15ecdc.  v1:= v1 + 1;
  #L15ece0.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int` := v1;
  #Try_start0.  
  #L15ece4.  v1:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L15ece8.  v2:= v4.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L15ecec.  call temp:= `getReadOnlyConnection`(v1, v2) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getReadOnlyConnection:(Ljava/lang/String;)Lcom/j256/ormlite/support/DatabaseConnection;` @kind interface;
  #Try_end0.  
  #L15ecf2.  v2:= temp @kind object;
  #Try_start1.  
  #L15ecf4.  v1:= v4.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` @kind object;
  #L15ecf8.  call temp:= `execute`(v1, v2, v5, v6) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.execute:(Lcom/j256/ormlite/support/DatabaseConnection;Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L15ecfe.  v1:= temp @kind object;
  #Try_start2.  
  #L15ed00.  v3:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L15ed04.  call `releaseConnection`(v3, v2) @signature `Lcom/j256/ormlite/support/ConnectionSource;.releaseConnection:(Lcom/j256/ormlite/support/DatabaseConnection;)V` @kind interface;
  #Try_end2.  
  #L15ed0a.  v2:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L15ed0e.  v2:= v2 + -1;
  #L15ed12.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int` := v2;
  #L15ed16.  v0:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L15ed1a.  if v0 > 0 then goto L15ed28;
  #L15ed1e.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L15ed22.  call `remove`(v0) @signature `Ljava/lang/ThreadLocal;.remove:()V` @kind virtual;
  #L15ed28.  v0:= v1 @kind object;
  #L15ed2a.  goto L15ec48;
  #L15ed2c.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L15ed2e.  v3:= v4.`com.j256.ormlite.field.FieldType.connectionSource` @type ^`com.j256.ormlite.support.ConnectionSource` @kind object;
  #L15ed32.  call `releaseConnection`(v3, v2) @signature `Lcom/j256/ormlite/support/ConnectionSource;.releaseConnection:(Lcom/j256/ormlite/support/DatabaseConnection;)V` @kind interface;
  #L15ed38.  throw v1;
  #Try_end3.  
  #L15ed3a.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15ed3c.  v2:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L15ed40.  v2:= v2 + -1;
  #L15ed44.  v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int` := v2;
  #L15ed48.  v0:= v0.`com.j256.ormlite.field.FieldType$LevelCounters.autoRefreshLevel` @type ^`int`;
  #L15ed4c.  if v0 > 0 then goto L15ed5a;
  #L15ed50.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L15ed54.  call `remove`(v0) @signature `Ljava/lang/ThreadLocal;.remove:()V` @kind virtual;
  #L15ed5a.  throw v1;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L15ed3a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L15ed2c;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L15ed3a;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L15ed3a;
}
procedure `java.lang.Object` `createForeignShell`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object, `com.j256.ormlite.dao.ObjectCache` v5 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignShell:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L15ed94.  v0:= v3.`com.j256.ormlite.field.FieldType.foreignTableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L15ed98.  call temp:= `createObject`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.createObject:()Ljava/lang/Object;` @kind virtual;
  #L15ed9e.  v0:= temp @kind object;
  #L15eda0.  v1:= v3.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15eda4.  v2:= 0I;
  #L15eda6.  call `assignField`(v1, v0, v4, v2, v5) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L15edac.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `findForeignFieldType`(`com.j256.ormlite.field.FieldType` v6 @kind this, `java.lang.Class` v7 @kind object, `java.lang.Class` v8 @kind object, `com.j256.ormlite.dao.BaseDaoImpl` v9 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.findForeignFieldType:(Ljava/lang/Class;Ljava/lang/Class;Lcom/j256/ormlite/dao/BaseDaoImpl;)Lcom/j256/ormlite/field/FieldType;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L15edc0.  v0:= v6.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15edc4.  call temp:= `getForeignCollectionForeignFieldName`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionForeignFieldName:()Ljava/lang/String;` @kind virtual;
  #L15edca.  v1:= temp @kind object;
  #L15edcc.  call temp:= `getTableInfo`(v9) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L15edd2.  v0:= temp @kind object;
  #L15edd4.  call temp:= `getFieldTypes`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15edda.  v2:= temp @kind object;
  #L15eddc.  v3:= length @variable v2;
  #L15edde.  v0:= 0I;
  #L15ede0.  if v0 >= v3 then goto L15eeac;
  #L15ede4.  v4:= v2[v0] @kind object;
  #L15ede8.  call temp:= `getType`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15edee.  v5:= temp @kind object;
  #L15edf0.  if v5 != v8 then goto L15eea6;
  #L15edf4.  if v1 == 0 then goto L15ee14;
  #L15edf8.  call temp:= `getField`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getField:()Ljava/lang/reflect/Field;` @kind virtual;
  #L15edfe.  v5:= temp @kind object;
  #L15ee00.  call temp:= `getName`(v5) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15ee06.  v5:= temp @kind object;
  #L15ee08.  call temp:= `equals`(v5, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15ee0e.  v5:= temp;
  #L15ee10.  if v5 == 0 then goto L15eea6;
  #L15ee14.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15ee18.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L15ee1e.  v0:= temp;
  #L15ee20.  if v0 != 0 then goto L15ef4a;
  #L15ee24.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15ee28.  call temp:= `isForeignAutoRefresh`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L15ee2e.  v0:= temp;
  #L15ee30.  if v0 != 0 then goto L15ef4a;
  #L15ee34.  v0:= new `java.sql.SQLException`;
  #L15ee38.  v1:= new `java.lang.StringBuilder`;
  #L15ee3c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15ee42.  v2:= "Foreign collection object " @kind object;
  #L15ee46.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ee4c.  v1:= temp @kind object;
  #L15ee4e.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ee54.  v1:= temp @kind object;
  #L15ee56.  v2:= " for field '" @kind object;
  #L15ee5a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ee60.  v1:= temp @kind object;
  #L15ee62.  v2:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15ee66.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15ee6c.  v2:= temp @kind object;
  #L15ee6e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ee74.  v1:= temp @kind object;
  #L15ee76.  v2:= "' contains a field of class " @kind object;
  #L15ee7a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ee80.  v1:= temp @kind object;
  #L15ee82.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ee88.  v1:= temp @kind object;
  #L15ee8a.  v2:= " but it's not foreign" @kind object;
  #L15ee8e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ee94.  v1:= temp @kind object;
  #L15ee96.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15ee9c.  v1:= temp @kind object;
  #L15ee9e.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15eea4.  throw v0;
  #L15eea6.  v0:= v0 + 1;
  #L15eeaa.  goto L15ede0;
  #L15eeac.  v0:= new `java.lang.StringBuilder`;
  #L15eeb0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15eeb6.  v2:= "Foreign collection class " @kind object;
  #L15eeba.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eec0.  v2:= temp @kind object;
  #L15eec2.  call temp:= `getName`(v7) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L15eec8.  v3:= temp @kind object;
  #L15eeca.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eed0.  v2:= " for field '" @kind object;
  #L15eed4.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eeda.  v2:= temp @kind object;
  #L15eedc.  v3:= v6.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15eee0.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15eee6.  v3:= temp @kind object;
  #L15eee8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eeee.  v2:= temp @kind object;
  #L15eef0.  v3:= "' column-name does not contain a foreign field" @kind object;
  #L15eef4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15eefa.  if v1 == 0 then goto L15ef1c;
  #L15eefe.  v2:= " named '" @kind object;
  #L15ef02.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ef08.  v2:= temp @kind object;
  #L15ef0a.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ef10.  v1:= temp @kind object;
  #L15ef12.  v2:= 39I;
  #L15ef16.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ef1c.  v1:= " of class " @kind object;
  #L15ef20.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ef26.  v1:= temp @kind object;
  #L15ef28.  call temp:= `getName`(v8) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L15ef2e.  v2:= temp @kind object;
  #L15ef30.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ef36.  v1:= new `java.sql.SQLException`;
  #L15ef3a.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15ef40.  v0:= temp @kind object;
  #L15ef42.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15ef48.  throw v1;
  #L15ef4a.  return v4 @kind object;
}
procedure `boolean` `isFieldValueDefault`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.isFieldValueDefault:(Ljava/lang/Object;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L15ef5c.  if v2 != 0 then goto L15ef64;
  #L15ef60.  v0:= 1I;
  #L15ef62.  return v0;
  #L15ef64.  call temp:= `getJavaDefaultValueDefault`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getJavaDefaultValueDefault:()Ljava/lang/Object;` @kind virtual;
  #L15ef6a.  v0:= temp @kind object;
  #L15ef6c.  call temp:= `equals`(v2, v0) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15ef72.  v0:= temp;
  #L15ef74.  goto L15ef62;
}
procedure `void` `assignField`(`com.j256.ormlite.field.FieldType` v4 @kind this, `java.lang.Object` v5 @kind object, `java.lang.Object` v6 @kind object, `boolean` v7 , `com.j256.ormlite.dao.ObjectCache` v8 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L15ef88.  v0:= `@@com.j256.ormlite.field.FieldType.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15ef8c.  v1:= `@@com.j256.ormlite.logger.Log$Level.TRACE` @type ^`com.j256.ormlite.logger.Log$Level` @kind object;
  #L15ef90.  call temp:= `isLevelEnabled`(v0, v1) @signature `Lcom/j256/ormlite/logger/Logger;.isLevelEnabled:(Lcom/j256/ormlite/logger/Log$Level;)Z` @kind virtual;
  #L15ef96.  v0:= temp;
  #L15ef98.  if v0 == 0 then goto L15efbc;
  #L15ef9c.  v2:= `@@com.j256.ormlite.field.FieldType.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L15efa0.  v3:= "assiging from data {}, val {}: {}" @kind object;
  #L15efa4.  if v5 != 0 then goto L15efe2;
  #L15efa8.  v0:= "null" @kind object;
  #L15efac.  v1:= v0 @kind object;
  #L15efae.  if v6 != 0 then goto L15efee;
  #L15efb2.  v0:= "null" @kind object;
  #L15efb6.  call `trace`(v2, v3, v1, v0, v6) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L15efbc.  v0:= v4.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15efc0.  if v0 == 0 then goto L15f010;
  #L15efc4.  if v6 == 0 then goto L15f010;
  #L15efc8.  call temp:= `extractJavaFieldValue`(v4, v5) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15efce.  v0:= temp @kind object;
  #L15efd0.  if v0 == 0 then goto L15eff8;
  #L15efd4.  call temp:= `equals`(v0, v6) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15efda.  v0:= temp;
  #L15efdc.  if v0 == 0 then goto L15eff8;
  #L15efe0.  return @kind void;
  #L15efe2.  call temp:= `getClass`(v5) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15efe8.  v0:= temp @kind object;
  #L15efea.  v1:= v0 @kind object;
  #L15efec.  goto L15efae;
  #L15efee.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15eff4.  v0:= temp @kind object;
  #L15eff6.  goto L15efb6;
  #L15eff8.  v0:= v4.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L15effc.  call temp:= `getObjectCache`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getObjectCache:()Lcom/j256/ormlite/dao/ObjectCache;` @kind virtual;
  #L15f002.  v0:= temp @kind object;
  #L15f004.  if v0 != 0 then goto L15f086;
  #L15f008.  v0:= 0I;
  #L15f00a.  if v0 == 0 then goto L15f098;
  #L15f00e.  v6:= v0 @kind object;
  #L15f010.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L15f014.  if v0 != 0 then goto L15f108;
  #Try_start0.  
  #L15f018.  v0:= v4.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15f01c.  call `set`(v0, v5, v6) @signature `Ljava/lang/reflect/Field;.set:(Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #Try_end0.  
  #L15f022.  goto L15efe0;
  #L15f024.  v0:= Exception @type ^`java.lang.IllegalArgumentException` @kind object;
  #L15f026.  v1:= new `java.lang.StringBuilder`;
  #L15f02a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f030.  v2:= "Could not assign object '" @kind object;
  #L15f034.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f03a.  v1:= temp @kind object;
  #L15f03c.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f042.  v1:= temp @kind object;
  #L15f044.  v2:= "' of type " @kind object;
  #L15f048.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f04e.  v1:= temp @kind object;
  #L15f050.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15f056.  v2:= temp @kind object;
  #L15f058.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f05e.  v1:= temp @kind object;
  #L15f060.  v2:= " to field " @kind object;
  #L15f064.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f06a.  v1:= temp @kind object;
  #L15f06c.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f072.  v1:= temp @kind object;
  #L15f074.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f07a.  v1:= temp @kind object;
  #L15f07c.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15f082.  v0:= temp @kind object;
  #L15f084.  throw v0;
  #L15f086.  call temp:= `getType`(v4) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15f08c.  v1:= temp @kind object;
  #L15f08e.  call temp:= `get`(v0, v1, v6) @signature `Lcom/j256/ormlite/dao/ObjectCache;.get:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15f094.  v0:= temp @kind object;
  #L15f096.  goto L15f00a;
  #L15f098.  if v7 != 0 then goto L15f010;
  #L15f09c.  call temp:= `createForeignObject`(v4, v6, v8) @signature `Lcom/j256/ormlite/field/FieldType;.createForeignObject:(Ljava/lang/Object;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @kind direct;
  #L15f0a2.  v6:= temp @kind object;
  #L15f0a4.  goto L15f010;
  #L15f0a6.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L15f0a8.  v1:= new `java.lang.StringBuilder`;
  #L15f0ac.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f0b2.  v2:= "Could not assign object '" @kind object;
  #L15f0b6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f0bc.  v1:= temp @kind object;
  #L15f0be.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f0c4.  v1:= temp @kind object;
  #L15f0c6.  v2:= "' of type " @kind object;
  #L15f0ca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f0d0.  v1:= temp @kind object;
  #L15f0d2.  call temp:= `getClass`(v6) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15f0d8.  v2:= temp @kind object;
  #L15f0da.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f0e0.  v1:= temp @kind object;
  #L15f0e2.  v2:= "' to field " @kind object;
  #L15f0e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f0ec.  v1:= temp @kind object;
  #L15f0ee.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f0f4.  v1:= temp @kind object;
  #L15f0f6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f0fc.  v1:= temp @kind object;
  #L15f0fe.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15f104.  v0:= temp @kind object;
  #L15f106.  throw v0;
  #Try_start1.  
  #L15f108.  v0:= v4.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L15f10c.  v1:= 1I;
  #L15f10e.  v1:= new `java.lang.Object`[v1];
  #L15f112.  v2:= 0I;
  #L15f114.  v1[v2]:= v6 @kind object;
  #L15f118.  call temp:= `invoke`(v0, v5, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L15f11e.  goto L15efe0;
  #L15f122.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L15f124.  v1:= new `java.lang.StringBuilder`;
  #L15f128.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f12e.  v2:= "Could not call " @kind object;
  #L15f132.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f138.  v1:= temp @kind object;
  #L15f13a.  v2:= v4.`com.j256.ormlite.field.FieldType.fieldSetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L15f13e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f144.  v1:= temp @kind object;
  #L15f146.  v2:= " on object with '" @kind object;
  #L15f14a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f150.  v1:= temp @kind object;
  #L15f152.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f158.  v1:= temp @kind object;
  #L15f15a.  v2:= "' for " @kind object;
  #L15f15e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f164.  v1:= temp @kind object;
  #L15f166.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f16c.  v1:= temp @kind object;
  #L15f16e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f174.  v1:= temp @kind object;
  #L15f176.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15f17c.  v0:= temp @kind object;
  #L15f17e.  throw v0;
  catch `java.lang.IllegalArgumentException` @[Try_start0..Try_end0] goto L15f024;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L15f0a6;
  catch `java.lang.Exception` @[Try_start1..Try_end1] goto L15f122;
}
procedure `java.lang.Object` `assignIdValue`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object, `java.lang.Number` v5 @kind object, `com.j256.ormlite.dao.ObjectCache` v6 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.assignIdValue:(Ljava/lang/Object;Ljava/lang/Number;Lcom/j256/ormlite/dao/ObjectCache;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15f1b0.  v0:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15f1b4.  call temp:= `convertIdNumber`(v0, v5) @signature `Lcom/j256/ormlite/field/DataPersister;.convertIdNumber:(Ljava/lang/Number;)Ljava/lang/Object;` @kind interface;
  #L15f1ba.  v0:= temp @kind object;
  #L15f1bc.  if v0 != 0 then goto L15f20a;
  #L15f1c0.  v0:= new `java.sql.SQLException`;
  #L15f1c4.  v1:= new `java.lang.StringBuilder`;
  #L15f1c8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f1ce.  v2:= "Invalid class " @kind object;
  #L15f1d2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f1d8.  v1:= temp @kind object;
  #L15f1da.  v2:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15f1de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f1e4.  v1:= temp @kind object;
  #L15f1e6.  v2:= " for sequence-id " @kind object;
  #L15f1ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f1f0.  v1:= temp @kind object;
  #L15f1f2.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f1f8.  v1:= temp @kind object;
  #L15f1fa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f200.  v1:= temp @kind object;
  #L15f202.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f208.  throw v0;
  #L15f20a.  v1:= 0I;
  #L15f20c.  call `assignField`(v3, v4, v0, v1, v6) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L15f212.  return v0 @kind object;
}
procedure `com.j256.ormlite.dao.BaseForeignCollection` `buildForeignCollection`(`com.j256.ormlite.field.FieldType` v8 @kind this, `java.lang.Object` v9 @kind object, `java.lang.Object` v10 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.buildForeignCollection:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/j256/ormlite/dao/BaseForeignCollection;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L15f224.  v2:= 0I;
  #L15f226.  v0:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15f22a.  if v0 != 0 then goto L15f232;
  #L15f22e.  v0:= v2 @kind object;
  #L15f230.  return v0 @kind object;
  #L15f232.  v1:= v8.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L15f236.  v0:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f23a.  call temp:= `isForeignCollectionEager`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionEager:()Z` @kind virtual;
  #L15f240.  v0:= temp;
  #L15f242.  if v0 != 0 then goto L15f272;
  #L15f246.  v0:= new `com.j256.ormlite.dao.LazyForeignCollection`;
  #L15f24a.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15f24e.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f252.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L15f258.  v5:= temp @kind object;
  #L15f25a.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f25e.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L15f264.  v6:= temp;
  #L15f266.  v2:= v9 @kind object;
  #L15f268.  v3:= v10 @kind object;
  #L15f26a.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/LazyForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #L15f270.  goto L15f230;
  #L15f272.  v0:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L15f276.  call temp:= `get`(v0) @signature `Ljava/lang/ThreadLocal;.get:()Ljava/lang/Object;` @kind virtual;
  #L15f27c.  v0:= temp @kind object;
  #L15f27e.  v0:= (`com.j256.ormlite.field.FieldType$LevelCounters`) v0 @kind object;
  #L15f282.  if v0 != 0 then goto L15f37e;
  #L15f286.  v0:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f28a.  call temp:= `getForeignCollectionMaxEagerLevel`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionMaxEagerLevel:()I` @kind virtual;
  #L15f290.  v0:= temp;
  #L15f292.  if v0 != 0 then goto L15f2c2;
  #L15f296.  v0:= new `com.j256.ormlite.dao.LazyForeignCollection`;
  #L15f29a.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15f29e.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f2a2.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L15f2a8.  v5:= temp @kind object;
  #L15f2aa.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f2ae.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L15f2b4.  v6:= temp;
  #L15f2b6.  v2:= v9 @kind object;
  #L15f2b8.  v3:= v10 @kind object;
  #L15f2ba.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/LazyForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #L15f2c0.  goto L15f230;
  #L15f2c2.  v0:= new `com.j256.ormlite.field.FieldType$LevelCounters`;
  #L15f2c6.  call `<init>`(v0, v2) @signature `Lcom/j256/ormlite/field/FieldType$LevelCounters;.<init>:(Lcom/j256/ormlite/field/FieldType$1;)V` @kind direct;
  #L15f2cc.  v2:= `@@com.j256.ormlite.field.FieldType.threadLevelCounters` @type ^`java.lang.ThreadLocal` @kind object;
  #L15f2d0.  call `set`(v2, v0) @signature `Ljava/lang/ThreadLocal;.set:(Ljava/lang/Object;)V` @kind virtual;
  #L15f2d6.  v7:= v0 @kind object;
  #L15f2d8.  v0:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L15f2dc.  if v0 != 0 then goto L15f2f0;
  #L15f2e0.  v0:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f2e4.  call temp:= `getForeignCollectionMaxEagerLevel`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionMaxEagerLevel:()I` @kind virtual;
  #L15f2ea.  v0:= temp;
  #L15f2ec.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevelMax` @type ^`int` := v0;
  #L15f2f0.  v0:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L15f2f4.  v2:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevelMax` @type ^`int`;
  #L15f2f8.  if v0 < v2 then goto L15f328;
  #L15f2fc.  v0:= new `com.j256.ormlite.dao.LazyForeignCollection`;
  #L15f300.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15f304.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f308.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L15f30e.  v5:= temp @kind object;
  #L15f310.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f314.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L15f31a.  v6:= temp;
  #L15f31c.  v2:= v9 @kind object;
  #L15f31e.  v3:= v10 @kind object;
  #L15f320.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/LazyForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #L15f326.  goto L15f230;
  #L15f328.  v0:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L15f32c.  v0:= v0 + 1;
  #L15f330.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int` := v0;
  #Try_start0.  
  #L15f334.  v0:= new `com.j256.ormlite.dao.EagerForeignCollection`;
  #L15f338.  v4:= v8.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15f33c.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f340.  call temp:= `getForeignCollectionOrderColumnName`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignCollectionOrderColumnName:()Ljava/lang/String;` @kind virtual;
  #L15f346.  v5:= temp @kind object;
  #L15f348.  v2:= v8.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f34c.  call temp:= `isForeignCollectionOrderAscending`(v2) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollectionOrderAscending:()Z` @kind virtual;
  #L15f352.  v6:= temp;
  #L15f354.  v2:= v9 @kind object;
  #L15f356.  v3:= v10 @kind object;
  #L15f358.  call `<init>`(v0, v1, v2, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.<init>:(Lcom/j256/ormlite/dao/Dao;Ljava/lang/Object;Ljava/lang/Object;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;Z)V` @kind direct;
  #Try_end0.  
  #L15f35e.  v1:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L15f362.  v1:= v1 + -1;
  #L15f366.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int` := v1;
  #L15f36a.  goto L15f230;
  #L15f36e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L15f370.  v1:= v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int`;
  #L15f374.  v1:= v1 + -1;
  #L15f378.  v7.`com.j256.ormlite.field.FieldType$LevelCounters.foreignCollectionLevel` @type ^`int` := v1;
  #L15f37c.  throw v0;
  #L15f37e.  v7:= v0 @kind object;
  #L15f380.  goto L15f2d8;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L15f36e;
}
procedure `void` `configDaoInformation`(`com.j256.ormlite.field.FieldType` v10 @kind this, `com.j256.ormlite.support.ConnectionSource` v11 @kind object, `java.lang.Class` v12 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.configDaoInformation:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L15f3a0.  v8:= 0I;
  #L15f3a2.  v4:= 0I;
  #L15f3a4.  v0:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15f3a8.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15f3ae.  v5:= temp @kind object;
  #L15f3b0.  call temp:= `getDatabaseType`(v11) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L15f3b6.  v6:= temp @kind object;
  #L15f3b8.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f3bc.  call temp:= `getForeignColumnName`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignColumnName:()Ljava/lang/String;` @kind virtual;
  #L15f3c2.  v7:= temp @kind object;
  #L15f3c4.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f3c8.  call temp:= `isForeignAutoRefresh`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoRefresh:()Z` @kind virtual;
  #L15f3ce.  v0:= temp;
  #L15f3d0.  if v0 != 0 then goto L15f3d8;
  #L15f3d4.  if v7 == 0 then goto L15f50a;
  #L15f3d8.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f3dc.  call temp:= `getForeignTableConfig`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignTableConfig:()Lcom/j256/ormlite/table/DatabaseTableConfig;` @kind virtual;
  #L15f3e2.  v0:= temp @kind object;
  #L15f3e4.  if v0 != 0 then goto L15f446;
  #L15f3e8.  call temp:= `createDao`(v11, v5) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L15f3ee.  v0:= temp @kind object;
  #L15f3f0.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L15f3f4.  call temp:= `getTableInfo`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L15f3fa.  v1:= temp @kind object;
  #L15f3fc.  call temp:= `getIdField`(v1) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15f402.  v3:= temp @kind object;
  #L15f404.  if v3 != 0 then goto L15f462;
  #L15f408.  v0:= new `java.lang.IllegalArgumentException`;
  #L15f40c.  v1:= new `java.lang.StringBuilder`;
  #L15f410.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f416.  v2:= "Foreign field " @kind object;
  #L15f41a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f420.  v1:= temp @kind object;
  #L15f422.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f428.  v1:= temp @kind object;
  #L15f42a.  v2:= " does not have id field" @kind object;
  #L15f42e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f434.  v1:= temp @kind object;
  #L15f436.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f43c.  v1:= temp @kind object;
  #L15f43e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f444.  throw v0;
  #L15f446.  call `extractFieldTypes`(v0, v11) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;)V` @kind virtual;
  #L15f44c.  call temp:= `createDao`(v11, v0) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Lcom/j256/ormlite/table/DatabaseTableConfig;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L15f452.  v0:= temp @kind object;
  #L15f454.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L15f458.  call temp:= `getTableInfo`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L15f45e.  v1:= temp @kind object;
  #L15f460.  goto L15f3fc;
  #L15f462.  if v7 != 0 then goto L15f4ac;
  #L15f466.  v2:= v3 @kind object;
  #L15f468.  call temp:= `build`(v6, v1, v2) @signature `Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;.build:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/field/FieldType;)Lcom/j256/ormlite/stmt/mapped/MappedQueryForFieldEq;` @kind static;
  #L15f46e.  v5:= temp @kind object;
  #L15f470.  v9:= v5 @kind object;
  #L15f472.  v5:= v1 @kind object;
  #L15f474.  v1:= v0 @kind object;
  #L15f476.  v0:= v9 @kind object;
  #L15f478.  v10.`com.j256.ormlite.field.FieldType.mappedQueryForForeignField` @type ^`com.j256.ormlite.stmt.mapped.MappedQueryForFieldEq` := v0 @kind object;
  #L15f47c.  v10.`com.j256.ormlite.field.FieldType.foreignTableInfo` @type ^`com.j256.ormlite.table.TableInfo` := v5 @kind object;
  #L15f480.  v10.`com.j256.ormlite.field.FieldType.foreignFieldType` @type ^`com.j256.ormlite.field.FieldType` := v4 @kind object;
  #L15f484.  v10.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` := v1 @kind object;
  #L15f488.  v10.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` := v3 @kind object;
  #L15f48c.  v10.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` := v2 @kind object;
  #L15f490.  v0:= v10.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15f494.  if v0 == 0 then goto L15f4aa;
  #L15f498.  v0:= v10.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15f49c.  call temp:= `getDataPersister`(v0) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L15f4a2.  v0:= temp @kind object;
  #L15f4a4.  call `assignDataType`(v10, v6, v0) @signature `Lcom/j256/ormlite/field/FieldType;.assignDataType:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/DataPersister;)V` @kind direct;
  #L15f4aa.  return @kind void;
  #L15f4ac.  call temp:= `getFieldTypeByColumnName`(v1, v7) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypeByColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15f4b2.  v2:= temp @kind object;
  #L15f4b4.  if v2 != 0 then goto L15f468;
  #L15f4b8.  v0:= new `java.lang.IllegalArgumentException`;
  #L15f4bc.  v1:= new `java.lang.StringBuilder`;
  #L15f4c0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f4c6.  v2:= "Foreign field " @kind object;
  #L15f4ca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f4d0.  v1:= temp @kind object;
  #L15f4d2.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f4d8.  v1:= temp @kind object;
  #L15f4da.  v2:= " does not have field named '" @kind object;
  #L15f4de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f4e4.  v1:= temp @kind object;
  #L15f4e6.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f4ec.  v1:= temp @kind object;
  #L15f4ee.  v2:= "'" @kind object;
  #L15f4f2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f4f8.  v1:= temp @kind object;
  #L15f4fa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f500.  v1:= temp @kind object;
  #L15f502.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f508.  throw v0;
  #L15f50a.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f50e.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L15f514.  v0:= temp;
  #L15f516.  if v0 == 0 then goto L15f690;
  #L15f51a.  v0:= v10.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15f51e.  if v0 == 0 then goto L15f584;
  #L15f522.  v0:= v10.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15f526.  call temp:= `isPrimitive`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L15f52c.  v0:= temp;
  #L15f52e.  if v0 == 0 then goto L15f584;
  #L15f532.  v0:= new `java.lang.IllegalArgumentException`;
  #L15f536.  v1:= new `java.lang.StringBuilder`;
  #L15f53a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f540.  v2:= "Field " @kind object;
  #L15f544.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f54a.  v1:= temp @kind object;
  #L15f54c.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f552.  v1:= temp @kind object;
  #L15f554.  v2:= " is a primitive class " @kind object;
  #L15f558.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f55e.  v1:= temp @kind object;
  #L15f560.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f566.  v1:= temp @kind object;
  #L15f568.  v2:= " but marked as foreign" @kind object;
  #L15f56c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f572.  v1:= temp @kind object;
  #L15f574.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f57a.  v1:= temp @kind object;
  #L15f57c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f582.  throw v0;
  #L15f584.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f588.  call temp:= `getForeignTableConfig`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignTableConfig:()Lcom/j256/ormlite/table/DatabaseTableConfig;` @kind virtual;
  #L15f58e.  v0:= temp @kind object;
  #L15f590.  if v0 == 0 then goto L15f5f8;
  #L15f594.  call `extractFieldTypes`(v0, v11) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;)V` @kind virtual;
  #L15f59a.  call temp:= `createDao`(v11, v0) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Lcom/j256/ormlite/table/DatabaseTableConfig;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L15f5a0.  v0:= temp @kind object;
  #L15f5a2.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L15f5a6.  call temp:= `getTableInfo`(v0) @signature `Lcom/j256/ormlite/dao/BaseDaoImpl;.getTableInfo:()Lcom/j256/ormlite/table/TableInfo;` @kind virtual;
  #L15f5ac.  v1:= temp @kind object;
  #L15f5ae.  call temp:= `getIdField`(v1) @signature `Lcom/j256/ormlite/table/TableInfo;.getIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L15f5b4.  v2:= temp @kind object;
  #L15f5b6.  if v2 != 0 then goto L15f606;
  #L15f5ba.  v0:= new `java.lang.IllegalArgumentException`;
  #L15f5be.  v1:= new `java.lang.StringBuilder`;
  #L15f5c2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f5c8.  v2:= "Foreign field " @kind object;
  #L15f5cc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f5d2.  v1:= temp @kind object;
  #L15f5d4.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f5da.  v1:= temp @kind object;
  #L15f5dc.  v2:= " does not have id field" @kind object;
  #L15f5e0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f5e6.  v1:= temp @kind object;
  #L15f5e8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f5ee.  v1:= temp @kind object;
  #L15f5f0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f5f6.  throw v0;
  #L15f5f8.  call temp:= `createDao`(v11, v5) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L15f5fe.  v0:= temp @kind object;
  #L15f600.  v0:= (`com.j256.ormlite.dao.BaseDaoImpl`) v0 @kind object;
  #L15f604.  goto L15f5a6;
  #L15f606.  call temp:= `isForeignAutoCreate`(v10) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignAutoCreate:()Z` @kind virtual;
  #L15f60c.  v3:= temp;
  #L15f60e.  if v3 == 0 then goto L15f684;
  #L15f612.  call temp:= `isGeneratedId`(v2) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @kind virtual;
  #L15f618.  v3:= temp;
  #L15f61a.  if v3 != 0 then goto L15f684;
  #L15f61e.  v0:= new `java.lang.IllegalArgumentException`;
  #L15f622.  v1:= new `java.lang.StringBuilder`;
  #L15f626.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f62c.  v2:= "Field " @kind object;
  #L15f630.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f636.  v1:= temp @kind object;
  #L15f638.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15f63c.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15f642.  v2:= temp @kind object;
  #L15f644.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f64a.  v1:= temp @kind object;
  #L15f64c.  v2:= ", if foreignAutoCreate = true then class " @kind object;
  #L15f650.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f656.  v1:= temp @kind object;
  #L15f658.  call temp:= `getSimpleName`(v5) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L15f65e.  v2:= temp @kind object;
  #L15f660.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f666.  v1:= temp @kind object;
  #L15f668.  v2:= " must have id field with generatedId = true" @kind object;
  #L15f66c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f672.  v1:= temp @kind object;
  #L15f674.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f67a.  v1:= temp @kind object;
  #L15f67c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f682.  throw v0;
  #L15f684.  v3:= v2 @kind object;
  #L15f686.  v5:= v1 @kind object;
  #L15f688.  v1:= v0 @kind object;
  #L15f68a.  v0:= v4 @kind object;
  #L15f68c.  goto L15f478;
  #L15f690.  v0:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f694.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L15f69a.  v0:= temp;
  #L15f69c.  if v0 == 0 then goto L15f8a8;
  #L15f6a0.  v0:= constclass @type ^`java.util.Collection` @kind object;
  #L15f6a4.  if v5 == v0 then goto L15f722;
  #L15f6a8.  v0:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L15f6ac.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L15f6b2.  v0:= temp;
  #L15f6b4.  if v0 != 0 then goto L15f722;
  #L15f6b8.  v0:= new `java.sql.SQLException`;
  #L15f6bc.  v1:= new `java.lang.StringBuilder`;
  #L15f6c0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f6c6.  v2:= "Field class for '" @kind object;
  #L15f6ca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f6d0.  v1:= temp @kind object;
  #L15f6d2.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15f6d6.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15f6dc.  v2:= temp @kind object;
  #L15f6de.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f6e4.  v1:= temp @kind object;
  #L15f6e6.  v2:= "' must be of class " @kind object;
  #L15f6ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f6f0.  v1:= temp @kind object;
  #L15f6f2.  v2:= constclass @type ^`com.j256.ormlite.dao.ForeignCollection` @kind object;
  #L15f6f6.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L15f6fc.  v2:= temp @kind object;
  #L15f6fe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f704.  v1:= temp @kind object;
  #L15f706.  v2:= " or Collection." @kind object;
  #L15f70a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f710.  v1:= temp @kind object;
  #L15f712.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f718.  v1:= temp @kind object;
  #L15f71a.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f720.  throw v0;
  #L15f722.  v0:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15f726.  call temp:= `getGenericType`(v0) @signature `Ljava/lang/reflect/Field;.getGenericType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L15f72c.  v0:= temp @kind object;
  #L15f72e.  v1:= instanceof @variable v0 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L15f732.  if v1 != 0 then goto L15f780;
  #L15f736.  v0:= new `java.sql.SQLException`;
  #L15f73a.  v1:= new `java.lang.StringBuilder`;
  #L15f73e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f744.  v2:= "Field class for '" @kind object;
  #L15f748.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f74e.  v1:= temp @kind object;
  #L15f750.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15f754.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15f75a.  v2:= temp @kind object;
  #L15f75c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f762.  v1:= temp @kind object;
  #L15f764.  v2:= "' must be a parameterized Collection." @kind object;
  #L15f768.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f76e.  v1:= temp @kind object;
  #L15f770.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f776.  v1:= temp @kind object;
  #L15f778.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f77e.  throw v0;
  #L15f780.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L15f784.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L15f78a.  v0:= temp @kind object;
  #L15f78c.  v1:= length @variable v0;
  #L15f78e.  if v1 != 0 then goto L15f7dc;
  #L15f792.  v0:= new `java.sql.SQLException`;
  #L15f796.  v1:= new `java.lang.StringBuilder`;
  #L15f79a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f7a0.  v2:= "Field class for '" @kind object;
  #L15f7a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f7aa.  v1:= temp @kind object;
  #L15f7ac.  v2:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15f7b0.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15f7b6.  v2:= temp @kind object;
  #L15f7b8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f7be.  v1:= temp @kind object;
  #L15f7c0.  v2:= "' must be a parameterized Collection with at least 1 type." @kind object;
  #L15f7c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f7ca.  v1:= temp @kind object;
  #L15f7cc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f7d2.  v1:= temp @kind object;
  #L15f7d4.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f7da.  throw v0;
  #L15f7dc.  v1:= v0[v8] @kind object;
  #L15f7e0.  v1:= instanceof @variable v1 @type ^`java.lang.reflect.TypeVariable` @kind boolean;
  #L15f7e4.  if v1 == 0 then goto L15f7fc;
  #L15f7e8.  call temp:= `getGenericSuperclass`(v12) @signature `Ljava/lang/Class;.getGenericSuperclass:()Ljava/lang/reflect/Type;` @kind virtual;
  #L15f7ee.  v0:= temp @kind object;
  #L15f7f0.  v0:= (`java.lang.reflect.ParameterizedType`) v0 @kind object;
  #L15f7f4.  call temp:= `getActualTypeArguments`(v0) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L15f7fa.  v0:= temp @kind object;
  #L15f7fc.  v1:= v0[v8] @kind object;
  #L15f800.  v1:= instanceof @variable v1 @type ^`java.lang.Class` @kind boolean;
  #L15f804.  if v1 != 0 then goto L15f85e;
  #L15f808.  v1:= new `java.sql.SQLException`;
  #L15f80c.  v2:= new `java.lang.StringBuilder`;
  #L15f810.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15f816.  v3:= "Field class for '" @kind object;
  #L15f81a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f820.  v2:= temp @kind object;
  #L15f822.  v3:= v10.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15f826.  call temp:= `getName`(v3) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15f82c.  v3:= temp @kind object;
  #L15f82e.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f834.  v2:= temp @kind object;
  #L15f836.  v3:= "' must be a parameterized Collection whose generic argument is an entity class not: " @kind object;
  #L15f83a.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f840.  v2:= temp @kind object;
  #L15f842.  v0:= v0[v8] @kind object;
  #L15f846.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15f84c.  v0:= temp @kind object;
  #L15f84e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15f854.  v0:= temp @kind object;
  #L15f856.  call `<init>`(v1, v0) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15f85c.  throw v1;
  #L15f85e.  v0:= v0[v8] @kind object;
  #L15f862.  v0:= (`java.lang.Class`) v0 @kind object;
  #L15f866.  v1:= v10.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15f86a.  call temp:= `getForeignTableConfig`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getForeignTableConfig:()Lcom/j256/ormlite/table/DatabaseTableConfig;` @kind virtual;
  #L15f870.  v1:= temp @kind object;
  #L15f872.  if v1 != 0 then goto L15f89a;
  #L15f876.  call temp:= `createDao`(v11, v0) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L15f87c.  v1:= temp @kind object;
  #L15f87e.  v1:= (`com.j256.ormlite.dao.BaseDaoImpl`) v1 @kind object;
  #L15f882.  call temp:= `findForeignFieldType`(v10, v0, v12, v1) @signature `Lcom/j256/ormlite/field/FieldType;.findForeignFieldType:(Ljava/lang/Class;Ljava/lang/Class;Lcom/j256/ormlite/dao/BaseDaoImpl;)Lcom/j256/ormlite/field/FieldType;` @kind direct;
  #L15f888.  v0:= temp @kind object;
  #L15f88a.  v2:= v4 @kind object;
  #L15f88c.  v3:= v4 @kind object;
  #L15f88e.  v5:= v4 @kind object;
  #L15f890.  v9:= v0 @kind object;
  #L15f892.  v0:= v4 @kind object;
  #L15f894.  v4:= v9 @kind object;
  #L15f896.  goto L15f478;
  #L15f89a.  call temp:= `createDao`(v11, v1) @signature `Lcom/j256/ormlite/dao/DaoManager;.createDao:(Lcom/j256/ormlite/support/ConnectionSource;Lcom/j256/ormlite/table/DatabaseTableConfig;)Lcom/j256/ormlite/dao/Dao;` @kind static;
  #L15f8a0.  v1:= temp @kind object;
  #L15f8a2.  v1:= (`com.j256.ormlite.dao.BaseDaoImpl`) v1 @kind object;
  #L15f8a6.  goto L15f882;
  #L15f8a8.  v0:= v4 @kind object;
  #L15f8aa.  v1:= v4 @kind object;
  #L15f8ac.  v2:= v4 @kind object;
  #L15f8ae.  v3:= v4 @kind object;
  #L15f8b0.  v5:= v4 @kind object;
  #L15f8b2.  goto L15f478;
}
procedure `java.lang.Object` `convertJavaFieldToSqlArgValue`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15f8c8.  if v2 != 0 then goto L15f8d0;
  #L15f8cc.  v0:= 0I;
  #L15f8ce.  return v0 @kind object;
  #L15f8d0.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L15f8d4.  call temp:= `javaToSqlArg`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/FieldConverter;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L15f8da.  v0:= temp @kind object;
  #L15f8dc.  goto L15f8ce;
}
procedure `java.lang.Object` `convertStringToJavaField`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.String` v2 @kind object, `int` v3 ) @signature `Lcom/j256/ormlite/field/FieldType;.convertStringToJavaField:(Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15f8f0.  if v2 != 0 then goto L15f8f8;
  #L15f8f4.  v0:= 0I;
  #L15f8f6.  return v0 @kind object;
  #L15f8f8.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L15f8fc.  call temp:= `resultStringToJava`(v0, v1, v2, v3) @signature `Lcom/j256/ormlite/field/FieldConverter;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @kind interface;
  #L15f902.  v0:= temp @kind object;
  #L15f904.  goto L15f8f6;
}
procedure `int` `createWithForeignDao`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.createWithForeignDao:(Ljava/lang/Object;)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15f918.  v0:= v1.`com.j256.ormlite.field.FieldType.foreignDao` @type ^`com.j256.ormlite.dao.BaseDaoImpl` @kind object;
  #L15f91c.  call temp:= `create`(v0, v2) @signature `Lcom/j256/ormlite/dao/Dao;.create:(Ljava/lang/Object;)I` @kind interface;
  #L15f922.  v0:= temp;
  #L15f924.  return v0;
}
procedure `boolean` `equals`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15f938.  v0:= 0I;
  #L15f93a.  if v4 == 0 then goto L15f952;
  #L15f93e.  call temp:= `getClass`(v4) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15f944.  v1:= temp @kind object;
  #L15f946.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L15f94c.  v2:= temp @kind object;
  #L15f94e.  if v1 == v2 then goto L15f954;
  #L15f952.  return v0;
  #L15f954.  v4:= (`com.j256.ormlite.field.FieldType`) v4 @kind object;
  #L15f958.  v1:= v3.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15f95c.  v2:= v4.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15f960.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/reflect/Field;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15f966.  v1:= temp;
  #L15f968.  if v1 == 0 then goto L15f952;
  #L15f96c.  v1:= v3.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L15f970.  if v1 != 0 then goto L15f980;
  #L15f974.  v1:= v4.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L15f978.  if v1 != 0 then goto L15f952;
  #L15f97c.  v0:= 1I;
  #L15f97e.  goto L15f952;
  #L15f980.  v1:= v3.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L15f984.  v2:= v4.`com.j256.ormlite.field.FieldType.parentClass` @type ^`java.lang.Class` @kind object;
  #L15f988.  call temp:= `equals`(v1, v2) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L15f98e.  v1:= temp;
  #L15f990.  if v1 == 0 then goto L15f952;
  #L15f994.  goto L15f97c;
}
procedure `java.lang.Object` `extractJavaFieldToSqlArgValue`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15f9a8.  call temp:= `extractJavaFieldValue`(v1, v2) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15f9ae.  v0:= temp @kind object;
  #L15f9b0.  call temp:= `convertJavaFieldToSqlArgValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15f9b6.  v0:= temp @kind object;
  #L15f9b8.  return v0 @kind object;
}
procedure `java.lang.Object` `extractJavaFieldValue`(`com.j256.ormlite.field.FieldType` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15f9cc.  call temp:= `extractRawJavaFieldValue`(v2, v3) @signature `Lcom/j256/ormlite/field/FieldType;.extractRawJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15f9d2.  v0:= temp @kind object;
  #L15f9d4.  v1:= v2.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15f9d8.  if v1 == 0 then goto L15f9ec;
  #L15f9dc.  if v0 == 0 then goto L15f9ec;
  #L15f9e0.  v1:= v2.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15f9e4.  call temp:= `extractRawJavaFieldValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.extractRawJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15f9ea.  v0:= temp @kind object;
  #L15f9ec.  return v0 @kind object;
}
procedure `java.lang.Object` `extractRawJavaFieldValue`(`com.j256.ormlite.field.FieldType` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.extractRawJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15fa00.  v0:= v3.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L15fa04.  if v0 != 0 then goto L15fa48;
  #Try_start0.  
  #L15fa08.  v0:= v3.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fa0c.  call temp:= `get`(v0, v4) @signature `Ljava/lang/reflect/Field;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L15fa12.  v0:= temp @kind object;
  #L15fa14.  return v0 @kind object;
  #L15fa16.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L15fa18.  v1:= new `java.lang.StringBuilder`;
  #L15fa1c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15fa22.  v2:= "Could not get field value for " @kind object;
  #L15fa26.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15fa2c.  v1:= temp @kind object;
  #L15fa2e.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15fa34.  v1:= temp @kind object;
  #L15fa36.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15fa3c.  v1:= temp @kind object;
  #L15fa3e.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15fa44.  v0:= temp @kind object;
  #L15fa46.  throw v0;
  #Try_start1.  
  #L15fa48.  v0:= v3.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L15fa4c.  v1:= 0I;
  #L15fa4e.  v1:= new `java.lang.Object`[v1];
  #L15fa52.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end1.  
  #L15fa58.  v0:= temp @kind object;
  #L15fa5a.  goto L15fa14;
  #L15fa5c.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L15fa5e.  v1:= new `java.lang.StringBuilder`;
  #L15fa62.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15fa68.  v2:= "Could not call " @kind object;
  #L15fa6c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15fa72.  v1:= temp @kind object;
  #L15fa74.  v2:= v3.`com.j256.ormlite.field.FieldType.fieldGetMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L15fa78.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15fa7e.  v1:= temp @kind object;
  #L15fa80.  v2:= " for " @kind object;
  #L15fa84.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15fa8a.  v1:= temp @kind object;
  #L15fa8c.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15fa92.  v1:= temp @kind object;
  #L15fa94.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15fa9a.  v1:= temp @kind object;
  #L15fa9c.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L15faa2.  v0:= temp @kind object;
  #L15faa4.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L15fa16;
  catch `java.lang.Exception` @[Try_start1..Try_end1] goto L15fa5c;
}
procedure `java.lang.Object` `generateId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.generateId:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fad4.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15fad8.  call temp:= `generateId`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.generateId:()Ljava/lang/Object;` @kind interface;
  #L15fade.  v0:= temp @kind object;
  #L15fae0.  return v0 @kind object;
}
procedure `java.lang.String` `getColumnDefinition`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnDefinition:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15faf4.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15faf8.  call temp:= `getColumnDefinition`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getColumnDefinition:()Ljava/lang/String;` @kind virtual;
  #L15fafe.  v0:= temp @kind object;
  #L15fb00.  return v0 @kind object;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fb14.  v0:= v1.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L15fb18.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.DataPersister` `getDataPersister`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fb2c.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15fb30.  return v0 @kind object;
}
procedure `java.lang.Object` `getDataTypeConfigObj`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fb44.  v0:= v1.`com.j256.ormlite.field.FieldType.dataTypeConfigObj` @type ^`java.lang.Object` @kind object;
  #L15fb48.  return v0 @kind object;
}
procedure `java.lang.Object` `getDefaultValue`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getDefaultValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fb5c.  v0:= v1.`com.j256.ormlite.field.FieldType.defaultValue` @type ^`java.lang.Object` @kind object;
  #L15fb60.  return v0 @kind object;
}
procedure `java.lang.reflect.Field` `getField`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getField:()Ljava/lang/reflect/Field;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fb74.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fb78.  return v0 @kind object;
}
procedure `java.lang.String` `getFieldName`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fb8c.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fb90.  call temp:= `getName`(v0) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L15fb96.  v0:= temp @kind object;
  #L15fb98.  return v0 @kind object;
}
procedure `java.lang.Object` `getFieldValueIfNotDefault`(`com.j256.ormlite.field.FieldType` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldValueIfNotDefault:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15fbac.  call temp:= `extractJavaFieldValue`(v2, v3) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L15fbb2.  v0:= temp @kind object;
  #L15fbb4.  call temp:= `isFieldValueDefault`(v2, v0) @signature `Lcom/j256/ormlite/field/FieldType;.isFieldValueDefault:(Ljava/lang/Object;)Z` @kind direct;
  #L15fbba.  v1:= temp;
  #L15fbbc.  if v1 == 0 then goto L15fbc2;
  #L15fbc0.  v0:= 0I;
  #L15fbc2.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `getForeignIdField`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignIdField:()Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fbd4.  v0:= v1.`com.j256.ormlite.field.FieldType.foreignIdField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15fbd8.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `getForeignRefField`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignRefField:()Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fbec.  v0:= v1.`com.j256.ormlite.field.FieldType.foreignRefField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L15fbf0.  return v0 @kind object;
}
procedure `java.lang.String` `getFormat`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getFormat:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fc04.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15fc08.  call temp:= `getFormat`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getFormat:()Ljava/lang/String;` @kind virtual;
  #L15fc0e.  v0:= temp @kind object;
  #L15fc10.  return v0 @kind object;
}
procedure `java.lang.String` `getGeneratedIdSequence`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getGeneratedIdSequence:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fc24.  v0:= v1.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` @kind object;
  #L15fc28.  return v0 @kind object;
}
procedure `java.lang.reflect.Type` `getGenericType`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getGenericType:()Ljava/lang/reflect/Type;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fc3c.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fc40.  call temp:= `getGenericType`(v0) @signature `Ljava/lang/reflect/Field;.getGenericType:()Ljava/lang/reflect/Type;` @kind virtual;
  #L15fc46.  v0:= temp @kind object;
  #L15fc48.  return v0 @kind object;
}
procedure `java.lang.String` `getIndexName`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getIndexName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15fc5c.  v0:= v2.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15fc60.  v1:= v2.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L15fc64.  call temp:= `getIndexName`(v0, v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getIndexName:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L15fc6a.  v0:= temp @kind object;
  #L15fc6c.  return v0 @kind object;
}
procedure `java.lang.Object` `getJavaDefaultValueDefault`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getJavaDefaultValueDefault:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15fc80.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fc84.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fc8a.  v0:= temp @kind object;
  #L15fc8c.  v1:= `@@java.lang.Boolean.TYPE` @type ^`java.lang.Class` @kind object;
  #L15fc90.  if v0 != v1 then goto L15fca2;
  #L15fc94.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BOOLEAN` @type ^`boolean` @kind boolean;
  #L15fc98.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L15fc9e.  v0:= temp @kind object;
  #L15fca0.  return v0 @kind object;
  #L15fca2.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fca6.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fcac.  v0:= temp @kind object;
  #L15fcae.  v1:= `@@java.lang.Byte.TYPE` @type ^`java.lang.Class` @kind object;
  #L15fcb2.  if v0 == v1 then goto L15fcca;
  #L15fcb6.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fcba.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fcc0.  v0:= temp @kind object;
  #L15fcc2.  v1:= constclass @type ^`java.lang.Byte` @kind object;
  #L15fcc6.  if v0 != v1 then goto L15fcd8;
  #L15fcca.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_BYTE` @type ^`byte` @kind byte;
  #L15fcce.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L15fcd4.  v0:= temp @kind object;
  #L15fcd6.  goto L15fca0;
  #L15fcd8.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fcdc.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fce2.  v0:= temp @kind object;
  #L15fce4.  v1:= `@@java.lang.Character.TYPE` @type ^`java.lang.Class` @kind object;
  #L15fce8.  if v0 == v1 then goto L15fd00;
  #L15fcec.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fcf0.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fcf6.  v0:= temp @kind object;
  #L15fcf8.  v1:= constclass @type ^`java.lang.Character` @kind object;
  #L15fcfc.  if v0 != v1 then goto L15fd0e;
  #L15fd00.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_CHAR` @type ^`char` @kind char;
  #L15fd04.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Character;.valueOf:(C)Ljava/lang/Character;` @kind static;
  #L15fd0a.  v0:= temp @kind object;
  #L15fd0c.  goto L15fca0;
  #L15fd0e.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fd12.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fd18.  v0:= temp @kind object;
  #L15fd1a.  v1:= `@@java.lang.Short.TYPE` @type ^`java.lang.Class` @kind object;
  #L15fd1e.  if v0 == v1 then goto L15fd36;
  #L15fd22.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fd26.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fd2c.  v0:= temp @kind object;
  #L15fd2e.  v1:= constclass @type ^`java.lang.Short` @kind object;
  #L15fd32.  if v0 != v1 then goto L15fd44;
  #L15fd36.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_SHORT` @type ^`short` @kind short;
  #L15fd3a.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Short;.valueOf:(S)Ljava/lang/Short;` @kind static;
  #L15fd40.  v0:= temp @kind object;
  #L15fd42.  goto L15fca0;
  #L15fd44.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fd48.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fd4e.  v0:= temp @kind object;
  #L15fd50.  v1:= `@@java.lang.Integer.TYPE` @type ^`java.lang.Class` @kind object;
  #L15fd54.  if v0 == v1 then goto L15fd6c;
  #L15fd58.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fd5c.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fd62.  v0:= temp @kind object;
  #L15fd64.  v1:= constclass @type ^`java.lang.Integer` @kind object;
  #L15fd68.  if v0 != v1 then goto L15fd7a;
  #L15fd6c.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_INT` @type ^`int`;
  #L15fd70.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L15fd76.  v0:= temp @kind object;
  #L15fd78.  goto L15fca0;
  #L15fd7a.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fd7e.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fd84.  v0:= temp @kind object;
  #L15fd86.  v1:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L15fd8a.  if v0 == v1 then goto L15fda2;
  #L15fd8e.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fd92.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fd98.  v0:= temp @kind object;
  #L15fd9a.  v1:= constclass @type ^`java.lang.Long` @kind object;
  #L15fd9e.  if v0 != v1 then goto L15fdb2;
  #L15fda2.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_LONG` @type ^`long` @kind wide;
  #L15fda6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L15fdac.  v0:= temp @kind object;
  #L15fdae.  goto L15fca0;
  #L15fdb2.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fdb6.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fdbc.  v0:= temp @kind object;
  #L15fdbe.  v1:= `@@java.lang.Float.TYPE` @type ^`java.lang.Class` @kind object;
  #L15fdc2.  if v0 == v1 then goto L15fdda;
  #L15fdc6.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fdca.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fdd0.  v0:= temp @kind object;
  #L15fdd2.  v1:= constclass @type ^`java.lang.Float` @kind object;
  #L15fdd6.  if v0 != v1 then goto L15fdea;
  #L15fdda.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_FLOAT` @type ^`float`;
  #L15fdde.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Float;.valueOf:(F)Ljava/lang/Float;` @kind static;
  #L15fde4.  v0:= temp @kind object;
  #L15fde6.  goto L15fca0;
  #L15fdea.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fdee.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fdf4.  v0:= temp @kind object;
  #L15fdf6.  v1:= `@@java.lang.Double.TYPE` @type ^`java.lang.Class` @kind object;
  #L15fdfa.  if v0 == v1 then goto L15fe12;
  #L15fdfe.  v0:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fe02.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fe08.  v0:= temp @kind object;
  #L15fe0a.  v1:= constclass @type ^`java.lang.Double` @kind object;
  #L15fe0e.  if v0 != v1 then goto L15fe22;
  #L15fe12.  v0:= `@@com.j256.ormlite.field.FieldType.DEFAULT_VALUE_DOUBLE` @type ^`double` @kind wide;
  #L15fe16.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Double;.valueOf:(D)Ljava/lang/Double;` @kind static;
  #L15fe1c.  v0:= temp @kind object;
  #L15fe1e.  goto L15fca0;
  #L15fe22.  v0:= 0I;
  #L15fe24.  goto L15fca0;
}
procedure `com.j256.ormlite.field.SqlType` `getSqlType`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fe38.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L15fe3c.  call temp:= `getSqlType`(v0) @signature `Lcom/j256/ormlite/field/FieldConverter;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L15fe42.  v0:= temp @kind object;
  #L15fe44.  return v0 @kind object;
}
procedure `java.lang.String` `getTableName`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getTableName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fe58.  v0:= v1.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L15fe5c.  return v0 @kind object;
}
procedure `java.lang.Class` `getType`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fe70.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fe74.  call temp:= `getType`(v0) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L15fe7a.  v0:= temp @kind object;
  #L15fe7c.  return v0 @kind object;
}
procedure `java.lang.String` `getUniqueIndexName`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getUniqueIndexName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15fe90.  v0:= v2.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15fe94.  v1:= v2.`com.j256.ormlite.field.FieldType.tableName` @type ^`java.lang.String` @kind object;
  #L15fe98.  call temp:= `getUniqueIndexName`(v0, v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getUniqueIndexName:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L15fe9e.  v0:= temp @kind object;
  #L15fea0.  return v0 @kind object;
}
procedure `java.lang.Enum` `getUnknownEnumVal`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getUnknownEnumVal:()Ljava/lang/Enum;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15feb4.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15feb8.  call temp:= `getUnknownEnumValue`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getUnknownEnumValue:()Ljava/lang/Enum;` @kind virtual;
  #L15febe.  v0:= temp @kind object;
  #L15fec0.  return v0 @kind object;
}
procedure `int` `getWidth`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.getWidth:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fed4.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15fed8.  call temp:= `getWidth`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getWidth:()I` @kind virtual;
  #L15fede.  v0:= temp;
  #L15fee0.  return v0;
}
procedure `int` `hashCode`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15fef4.  v0:= v1.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L15fef8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/reflect/Field;.hashCode:()I` @kind virtual;
  #L15fefe.  v0:= temp;
  #L15ff00.  return v0;
}
procedure `boolean` `isAllowGeneratedIdInsert`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isAllowGeneratedIdInsert:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ff14.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15ff18.  call temp:= `isAllowGeneratedIdInsert`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isAllowGeneratedIdInsert:()Z` @kind virtual;
  #L15ff1e.  v0:= temp;
  #L15ff20.  return v0;
}
procedure `boolean` `isArgumentHolderRequired`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isArgumentHolderRequired:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ff34.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15ff38.  call temp:= `isArgumentHolderRequired`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isArgumentHolderRequired:()Z` @kind interface;
  #L15ff3e.  v0:= temp;
  #L15ff40.  return v0;
}
procedure `boolean` `isCanBeNull`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isCanBeNull:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ff54.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15ff58.  call temp:= `isCanBeNull`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isCanBeNull:()Z` @kind virtual;
  #L15ff5e.  v0:= temp;
  #L15ff60.  return v0;
}
procedure `boolean` `isComparable`(`com.j256.ormlite.field.FieldType` v3 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isComparable:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L15ff74.  v0:= v3.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L15ff78.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L15ff7e.  v0:= temp;
  #L15ff80.  if v0 == 0 then goto L15ff88;
  #L15ff84.  v0:= 0I;
  #L15ff86.  return v0;
  #L15ff88.  v0:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15ff8c.  if v0 != 0 then goto L15ffc2;
  #L15ff90.  v0:= new `java.sql.SQLException`;
  #L15ff94.  v1:= new `java.lang.StringBuilder`;
  #L15ff98.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L15ff9e.  v2:= "Internal error.  Data-persister is not configured for field.  Please post _full_ exception with associated data objects to mailing list: " @kind object;
  #L15ffa2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ffa8.  v1:= temp @kind object;
  #L15ffaa.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L15ffb0.  v1:= temp @kind object;
  #L15ffb2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L15ffb8.  v1:= temp @kind object;
  #L15ffba.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15ffc0.  throw v0;
  #L15ffc2.  v0:= v3.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15ffc6.  call temp:= `isComparable`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isComparable:()Z` @kind interface;
  #L15ffcc.  v0:= temp;
  #L15ffce.  goto L15ff86;
}
procedure `boolean` `isEscapedDefaultValue`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedDefaultValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15ffe0.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L15ffe4.  call temp:= `isEscapedDefaultValue`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isEscapedDefaultValue:()Z` @kind interface;
  #L15ffea.  v0:= temp;
  #L15ffec.  return v0;
}
procedure `boolean` `isEscapedValue`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160000.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L160004.  call temp:= `isEscapedValue`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isEscapedValue:()Z` @kind interface;
  #L16000a.  v0:= temp;
  #L16000c.  return v0;
}
procedure `boolean` `isForeign`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160020.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L160024.  call temp:= `isForeign`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L16002a.  v0:= temp;
  #L16002c.  return v0;
}
procedure `boolean` `isForeignAutoCreate`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignAutoCreate:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160040.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L160044.  call temp:= `isForeignAutoCreate`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignAutoCreate:()Z` @kind virtual;
  #L16004a.  v0:= temp;
  #L16004c.  return v0;
}
procedure `boolean` `isForeignCollection`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160060.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L160064.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeignCollection:()Z` @kind virtual;
  #L16006a.  v0:= temp;
  #L16006c.  return v0;
}
procedure `boolean` `isGeneratedId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160080.  v0:= v1.`com.j256.ormlite.field.FieldType.isGeneratedId` @type ^`boolean` @kind boolean;
  #L160084.  return v0;
}
procedure `boolean` `isGeneratedIdSequence`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isGeneratedIdSequence:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160098.  v0:= v1.`com.j256.ormlite.field.FieldType.generatedIdSequence` @type ^`java.lang.String` @kind object;
  #L16009c.  if v0 == 0 then goto L1600a4;
  #L1600a0.  v0:= 1I;
  #L1600a2.  return v0;
  #L1600a4.  v0:= 0I;
  #L1600a6.  goto L1600a2;
}
procedure `boolean` `isId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1600b8.  v0:= v1.`com.j256.ormlite.field.FieldType.isId` @type ^`boolean` @kind boolean;
  #L1600bc.  return v0;
}
procedure `boolean` `isObjectsFieldValueDefault`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.isObjectsFieldValueDefault:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1600d0.  call temp:= `extractJavaFieldValue`(v1, v2) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L1600d6.  v0:= temp @kind object;
  #L1600d8.  call temp:= `isFieldValueDefault`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.isFieldValueDefault:(Ljava/lang/Object;)Z` @kind direct;
  #L1600de.  v0:= temp;
  #L1600e0.  return v0;
}
procedure `boolean` `isReadOnly`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isReadOnly:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1600f4.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L1600f8.  call temp:= `isReadOnly`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isReadOnly:()Z` @kind virtual;
  #L1600fe.  v0:= temp;
  #L160100.  return v0;
}
procedure `boolean` `isSelfGeneratedId`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isSelfGeneratedId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160114.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L160118.  call temp:= `isSelfGeneratedId`(v0) @signature `Lcom/j256/ormlite/field/DataPersister;.isSelfGeneratedId:()Z` @kind interface;
  #L16011e.  v0:= temp;
  #L160120.  return v0;
}
procedure `boolean` `isUnique`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isUnique:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160134.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L160138.  call temp:= `isUnique`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isUnique:()Z` @kind virtual;
  #L16013e.  v0:= temp;
  #L160140.  return v0;
}
procedure `boolean` `isUniqueCombo`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isUniqueCombo:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160154.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L160158.  call temp:= `isUniqueCombo`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isUniqueCombo:()Z` @kind virtual;
  #L16015e.  v0:= temp;
  #L160160.  return v0;
}
procedure `boolean` `isVersion`(`com.j256.ormlite.field.FieldType` v1 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.isVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160174.  v0:= v1.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L160178.  call temp:= `isVersion`(v0) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isVersion:()Z` @kind virtual;
  #L16017e.  v0:= temp;
  #L160180.  return v0;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.FieldType` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160194.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L160198.  if v0 != 0 then goto L1601a0;
  #L16019c.  v0:= 0I;
  #L16019e.  return v0 @kind object;
  #L1601a0.  v0:= v1.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L1601a4.  call temp:= `moveToNextValue`(v0, v2) @signature `Lcom/j256/ormlite/field/DataPersister;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1601aa.  v0:= temp @kind object;
  #L1601ac.  goto L16019e;
}
procedure `java.lang.Object` `resultToJava`(`com.j256.ormlite.field.FieldType` v4 @kind this, `com.j256.ormlite.support.DatabaseResults` v5 @kind object, `java.util.Map` v6 @kind object) @signature `Lcom/j256/ormlite/field/FieldType;.resultToJava:(Lcom/j256/ormlite/support/DatabaseResults;Ljava/util/Map;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1601c0.  v1:= 0I;
  #L1601c2.  v0:= v4.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L1601c6.  call temp:= `get`(v6, v0) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1601cc.  v0:= temp @kind object;
  #L1601ce.  v0:= (`java.lang.Integer`) v0 @kind object;
  #L1601d2.  if v0 != 0 then goto L1601f4;
  #L1601d6.  v0:= v4.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L1601da.  call temp:= `findColumn`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.findColumn:(Ljava/lang/String;)I` @kind interface;
  #L1601e0.  v0:= temp;
  #L1601e2.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1601e8.  v0:= temp @kind object;
  #L1601ea.  v2:= v4.`com.j256.ormlite.field.FieldType.columnName` @type ^`java.lang.String` @kind object;
  #L1601ee.  call temp:= `put`(v6, v2, v0) @signature `Ljava/util/Map;.put:(Ljava/lang/Object;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L1601f4.  v2:= v4.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L1601f8.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1601fe.  v3:= temp;
  #L160200.  call temp:= `resultToJava`(v2, v4, v5, v3) @signature `Lcom/j256/ormlite/field/FieldConverter;.resultToJava:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @kind interface;
  #L160206.  v2:= temp @kind object;
  #L160208.  v3:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L16020c.  call temp:= `isForeign`(v3) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isForeign:()Z` @kind virtual;
  #L160212.  v3:= temp;
  #L160214.  if v3 == 0 then goto L160230;
  #L160218.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L16021e.  v0:= temp;
  #L160220.  call temp:= `wasNull`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.wasNull:(I)Z` @kind interface;
  #L160226.  v0:= temp;
  #L160228.  if v0 == 0 then goto L1602d6;
  #L16022c.  v0:= v1 @kind object;
  #L16022e.  return v0 @kind object;
  #L160230.  v3:= v4.`com.j256.ormlite.field.FieldType.dataPersister` @type ^`com.j256.ormlite.field.DataPersister` @kind object;
  #L160234.  call temp:= `isPrimitive`(v3) @signature `Lcom/j256/ormlite/field/DataPersister;.isPrimitive:()Z` @kind interface;
  #L16023a.  v3:= temp;
  #L16023c.  if v3 == 0 then goto L1602ae;
  #L160240.  v1:= v4.`com.j256.ormlite.field.FieldType.fieldConfig` @type ^`com.j256.ormlite.field.DatabaseFieldConfig` @kind object;
  #L160244.  call temp:= `isThrowIfNull`(v1) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.isThrowIfNull:()Z` @kind virtual;
  #L16024a.  v1:= temp;
  #L16024c.  if v1 == 0 then goto L1602d6;
  #L160250.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L160256.  v0:= temp;
  #L160258.  call temp:= `wasNull`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.wasNull:(I)Z` @kind interface;
  #L16025e.  v0:= temp;
  #L160260.  if v0 == 0 then goto L1602d6;
  #L160264.  v0:= new `java.sql.SQLException`;
  #L160268.  v1:= new `java.lang.StringBuilder`;
  #L16026c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L160272.  v2:= "Results value for primitive field '" @kind object;
  #L160276.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16027c.  v1:= temp @kind object;
  #L16027e.  v2:= v4.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L160282.  call temp:= `getName`(v2) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L160288.  v2:= temp @kind object;
  #L16028a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160290.  v1:= temp @kind object;
  #L160292.  v2:= "' was an invalid null value" @kind object;
  #L160296.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16029c.  v1:= temp @kind object;
  #L16029e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1602a4.  v1:= temp @kind object;
  #L1602a6.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1602ac.  throw v0;
  #L1602ae.  v3:= v4.`com.j256.ormlite.field.FieldType.fieldConverter` @type ^`com.j256.ormlite.field.FieldConverter` @kind object;
  #L1602b2.  call temp:= `isStreamType`(v3) @signature `Lcom/j256/ormlite/field/FieldConverter;.isStreamType:()Z` @kind interface;
  #L1602b8.  v3:= temp;
  #L1602ba.  if v3 != 0 then goto L1602d6;
  #L1602be.  call temp:= `intValue`(v0) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L1602c4.  v0:= temp;
  #L1602c6.  call temp:= `wasNull`(v5, v0) @signature `Lcom/j256/ormlite/support/DatabaseResults;.wasNull:(I)Z` @kind interface;
  #L1602cc.  v0:= temp;
  #L1602ce.  if v0 == 0 then goto L1602d6;
  #L1602d2.  v0:= v1 @kind object;
  #L1602d4.  goto L16022e;
  #L1602d6.  v0:= v2 @kind object;
  #L1602d8.  goto L16022e;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.field.FieldType` v2 @kind this) @signature `Lcom/j256/ormlite/field/FieldType;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1602ec.  v0:= new `java.lang.StringBuilder`;
  #L1602f0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1602f6.  call temp:= `getClass`(v2) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L1602fc.  v1:= temp @kind object;
  #L1602fe.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L160304.  v1:= temp @kind object;
  #L160306.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16030c.  v0:= temp @kind object;
  #L16030e.  v1:= ":name=" @kind object;
  #L160312.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160318.  v0:= temp @kind object;
  #L16031a.  v1:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16031e.  call temp:= `getName`(v1) @signature `Ljava/lang/reflect/Field;.getName:()Ljava/lang/String;` @kind virtual;
  #L160324.  v1:= temp @kind object;
  #L160326.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16032c.  v0:= temp @kind object;
  #L16032e.  v1:= ",class=" @kind object;
  #L160332.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160338.  v0:= temp @kind object;
  #L16033a.  v1:= v2.`com.j256.ormlite.field.FieldType.field` @type ^`java.lang.reflect.Field` @kind object;
  #L16033e.  call temp:= `getDeclaringClass`(v1) @signature `Ljava/lang/reflect/Field;.getDeclaringClass:()Ljava/lang/Class;` @kind virtual;
  #L160344.  v1:= temp @kind object;
  #L160346.  call temp:= `getSimpleName`(v1) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L16034c.  v1:= temp @kind object;
  #L16034e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L160354.  v0:= temp @kind object;
  #L160356.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16035c.  v0:= temp @kind object;
  #L16035e.  return v0 @kind object;
}
