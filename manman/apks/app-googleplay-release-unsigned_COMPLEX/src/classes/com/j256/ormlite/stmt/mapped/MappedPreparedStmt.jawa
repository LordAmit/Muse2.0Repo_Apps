record `com.j256.ormlite.stmt.mapped.MappedPreparedStmt` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.mapped.BaseMappedQuery` @kind class, `com.j256.ormlite.stmt.PreparedDelete` @kind interface, `com.j256.ormlite.stmt.PreparedQuery` @kind interface, `com.j256.ormlite.stmt.PreparedUpdate` @kind interface {
  `com.j256.ormlite.stmt.ArgumentHolder`[] `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @AccessFlag PRIVATE_FINAL;
  `boolean` `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.cacheStore` @AccessFlag PRIVATE_FINAL;
  `java.lang.Long` `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @AccessFlag PRIVATE_FINAL;
  `com.j256.ormlite.stmt.StatementBuilder$StatementType` `com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v0 @kind this, `com.j256.ormlite.table.TableInfo` v1 @kind object, `java.lang.String` v2 @kind object, `com.j256.ormlite.field.FieldType`[] v3 @kind object, `com.j256.ormlite.field.FieldType`[] v4 @kind object, `com.j256.ormlite.stmt.ArgumentHolder`[] v5 @kind object, `java.lang.Long` v6 @kind object, `com.j256.ormlite.stmt.StatementBuilder$StatementType` v7 @kind object, `boolean` v8 ) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/stmt/ArgumentHolder;Ljava/lang/Long;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L16ca28.  call `<init>`(v0, v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L16ca2e.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] := v5 @kind object;
  #L16ca32.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @type ^`java.lang.Long` := v6 @kind object;
  #L16ca36.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` := v7 @kind object;
  #L16ca3a.  v0.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.cacheStore` @type ^`boolean` := v8 @kind boolean;
  #L16ca3e.  return @kind void;
}
procedure `com.j256.ormlite.support.CompiledStatement` `assignStatementArguments`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v5 @kind this, `com.j256.ormlite.support.CompiledStatement` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.assignStatementArguments:(Lcom/j256/ormlite/support/CompiledStatement;)Lcom/j256/ormlite/support/CompiledStatement;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #Try_start0.  
  #L16ca50.  v0:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @type ^`java.lang.Long` @kind object;
  #L16ca54.  if v0 == 0 then goto L16ca6a;
  #L16ca58.  v0:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.limit` @type ^`java.lang.Long` @kind object;
  #L16ca5c.  call temp:= `intValue`(v0) @signature `Ljava/lang/Long;.intValue:()I` @kind virtual;
  #L16ca62.  v0:= temp;
  #L16ca64.  call `setMaxRows`(v6, v0) @signature `Lcom/j256/ormlite/support/CompiledStatement;.setMaxRows:(I)V` @kind interface;
  #L16ca6a.  v0:= 0I;
  #L16ca6c.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedPreparedStmt.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16ca70.  v2:= `@@com.j256.ormlite.logger.Log$Level.TRACE` @type ^`com.j256.ormlite.logger.Log$Level` @kind object;
  #L16ca74.  call temp:= `isLevelEnabled`(v1, v2) @signature `Lcom/j256/ormlite/logger/Logger;.isLevelEnabled:(Lcom/j256/ormlite/logger/Log$Level;)Z` @kind virtual;
  #L16ca7a.  v1:= temp;
  #L16ca7c.  if v1 == 0 then goto L16ca94;
  #L16ca80.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L16ca84.  v1:= length @variable v1;
  #L16ca86.  if v1 <= 0 then goto L16ca94;
  #L16ca8a.  v0:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L16ca8e.  v0:= length @variable v0;
  #L16ca90.  v0:= new `java.lang.Object`[v0];
  #L16ca94.  v1:= 0I;
  #L16ca96.  v2:= v1;
  #L16ca98.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L16ca9c.  v1:= length @variable v1;
  #L16ca9e.  if v2 >= v1 then goto L16caee;
  #L16caa2.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L16caa6.  v1:= v1[v2] @kind object;
  #L16caaa.  call temp:= `getSqlArgValue`(v1) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.getSqlArgValue:()Ljava/lang/Object;` @kind interface;
  #L16cab0.  v3:= temp @kind object;
  #L16cab2.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L16cab6.  v1:= v1[v2] @kind object;
  #L16caba.  if v1 != 0 then goto L16cae4;
  #L16cabe.  v1:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L16cac2.  v1:= v1[v2] @kind object;
  #L16cac6.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind interface;
  #L16cacc.  v1:= temp @kind object;
  #L16cace.  call `setObject`(v6, v2, v3, v1) @signature `Lcom/j256/ormlite/support/CompiledStatement;.setObject:(ILjava/lang/Object;Lcom/j256/ormlite/field/SqlType;)V` @kind interface;
  #L16cad4.  if v0 == 0 then goto L16cadc;
  #L16cad8.  v0[v2]:= v3 @kind object;
  #L16cadc.  v1:= v2 + 1;
  #L16cae0.  v2:= v1;
  #L16cae2.  goto L16ca98;
  #L16cae4.  call temp:= `getSqlType`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @kind virtual;
  #L16caea.  v1:= temp @kind object;
  #L16caec.  goto L16cace;
  #L16caee.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedPreparedStmt.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16caf2.  v2:= "prepared statement '{}' with {} args" @kind object;
  #L16caf6.  v3:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.statement` @type ^`java.lang.String` @kind object;
  #L16cafa.  v4:= v5.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L16cafe.  v4:= length @variable v4;
  #L16cb00.  call temp:= `valueOf`(v4) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L16cb06.  v4:= temp @kind object;
  #L16cb08.  call `debug`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;Ljava/lang/Object;)V` @kind virtual;
  #L16cb0e.  if v0 == 0 then goto L16cb20;
  #L16cb12.  v1:= `@@com.j256.ormlite.stmt.mapped.MappedPreparedStmt.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16cb16.  v2:= "prepared statement arguments: {}" @kind object;
  #L16cb1a.  call `trace`(v1, v2, v0) @signature `Lcom/j256/ormlite/logger/Logger;.trace:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #Try_end0.  
  #L16cb20.  return v6 @kind object;
  #L16cb22.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L16cb24.  v1:= "statement" @kind object;
  #L16cb28.  call `closeThrowSqlException`(v6, v1) @signature `Lcom/j256/ormlite/misc/IOUtils;.closeThrowSqlException:(Ljava/io/Closeable;Ljava/lang/String;)V` @kind static;
  #L16cb2e.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L16cb22;
}
procedure `com.j256.ormlite.support.CompiledStatement` `compile`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v1 @kind this, `com.j256.ormlite.support.DatabaseConnection` v2 @kind object, `com.j256.ormlite.stmt.StatementBuilder$StatementType` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.compile:(Lcom/j256/ormlite/support/DatabaseConnection;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;)Lcom/j256/ormlite/support/CompiledStatement;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16cb4c.  v0:= -1I;
  #L16cb4e.  call temp:= `compile`(v1, v2, v3, v0) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.compile:(Lcom/j256/ormlite/support/DatabaseConnection;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;I)Lcom/j256/ormlite/support/CompiledStatement;` @kind virtual;
  #L16cb54.  v0:= temp @kind object;
  #L16cb56.  return v0 @kind object;
}
procedure `com.j256.ormlite.support.CompiledStatement` `compile`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v6 @kind this, `com.j256.ormlite.support.DatabaseConnection` v7 @kind object, `com.j256.ormlite.stmt.StatementBuilder$StatementType` v8 @kind object, `int` v9 ) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.compile:(Lcom/j256/ormlite/support/DatabaseConnection;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;I)Lcom/j256/ormlite/support/CompiledStatement;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16cb68.  v0:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L16cb6c.  if v0 == v8 then goto L16cbc6;
  #L16cb70.  v0:= new `java.sql.SQLException`;
  #L16cb74.  v1:= new `java.lang.StringBuilder`;
  #L16cb78.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16cb7e.  v2:= "Could not compile this " @kind object;
  #L16cb82.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cb88.  v1:= temp @kind object;
  #L16cb8a.  v2:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L16cb8e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cb94.  v1:= temp @kind object;
  #L16cb96.  v2:= " statement since the caller is expecting a " @kind object;
  #L16cb9a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cba0.  v1:= temp @kind object;
  #L16cba2.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cba8.  v1:= temp @kind object;
  #L16cbaa.  v2:= " statement.  Check your QueryBuilder methods." @kind object;
  #L16cbae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cbb4.  v1:= temp @kind object;
  #L16cbb6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16cbbc.  v1:= temp @kind object;
  #L16cbbe.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16cbc4.  throw v0;
  #L16cbc6.  v1:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.statement` @type ^`java.lang.String` @kind object;
  #L16cbca.  v3:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L16cbce.  v5:= v6.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.cacheStore` @type ^`boolean` @kind boolean;
  #L16cbd2.  v0:= v7 @kind object;
  #L16cbd4.  v2:= v8 @kind object;
  #L16cbd6.  v4:= v9;
  #L16cbd8.  call temp:= `compileStatement`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/support/DatabaseConnection;.compileStatement:(Ljava/lang/String;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;[Lcom/j256/ormlite/field/FieldType;IZ)Lcom/j256/ormlite/support/CompiledStatement;` @kind interface;
  #L16cbde.  v0:= temp @kind object;
  #L16cbe0.  call temp:= `assignStatementArguments`(v6, v0) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.assignStatementArguments:(Lcom/j256/ormlite/support/CompiledStatement;)Lcom/j256/ormlite/support/CompiledStatement;` @kind direct;
  #L16cbe6.  v0:= temp @kind object;
  #L16cbe8.  return v0 @kind object;
}
procedure `java.lang.String` `getStatement`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.getStatement:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16cbfc.  v0:= v1.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.statement` @type ^`java.lang.String` @kind object;
  #L16cc00.  return v0 @kind object;
}
procedure `com.j256.ormlite.stmt.StatementBuilder$StatementType` `getType`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.getType:()Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16cc14.  v0:= v1.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L16cc18.  return v0 @kind object;
}
procedure `void` `setArgumentHolderValue`(`com.j256.ormlite.stmt.mapped.MappedPreparedStmt` v3 @kind this, `int` v4 , `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.setArgumentHolderValue:(ILjava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16cc2c.  if v4 >= 0 then goto L16cc6e;
  #L16cc30.  v0:= new `java.sql.SQLException`;
  #L16cc34.  v1:= new `java.lang.StringBuilder`;
  #L16cc38.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16cc3e.  v2:= "argument holder index " @kind object;
  #L16cc42.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cc48.  v1:= temp @kind object;
  #L16cc4a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cc50.  v1:= temp @kind object;
  #L16cc52.  v2:= " must be >= 0" @kind object;
  #L16cc56.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cc5c.  v1:= temp @kind object;
  #L16cc5e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16cc64.  v1:= temp @kind object;
  #L16cc66.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16cc6c.  throw v0;
  #L16cc6e.  v0:= v3.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L16cc72.  v0:= length @variable v0;
  #L16cc74.  if v0 > v4 then goto L16ccd0;
  #L16cc78.  v0:= new `java.sql.SQLException`;
  #L16cc7c.  v1:= new `java.lang.StringBuilder`;
  #L16cc80.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16cc86.  v2:= "argument holder index " @kind object;
  #L16cc8a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cc90.  v1:= temp @kind object;
  #L16cc92.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cc98.  v1:= temp @kind object;
  #L16cc9a.  v2:= " is not valid, only " @kind object;
  #L16cc9e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16cca4.  v1:= temp @kind object;
  #L16cca6.  v2:= v3.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L16ccaa.  v2:= length @variable v2;
  #L16ccac.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ccb2.  v1:= temp @kind object;
  #L16ccb4.  v2:= " in statement (index starts at 0)" @kind object;
  #L16ccb8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ccbe.  v1:= temp @kind object;
  #L16ccc0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16ccc6.  v1:= temp @kind object;
  #L16ccc8.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16ccce.  throw v0;
  #L16ccd0.  v0:= v3.`com.j256.ormlite.stmt.mapped.MappedPreparedStmt.argHolders` @type ^`com.j256.ormlite.stmt.ArgumentHolder`[] @kind object;
  #L16ccd4.  v0:= v0[v4] @kind object;
  #L16ccd8.  call `setValue`(v0, v5) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setValue:(Ljava/lang/Object;)V` @kind interface;
  #L16ccde.  return @kind void;
}
