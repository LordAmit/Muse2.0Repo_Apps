record `com.j256.ormlite.field.types.TimeStampStringType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.DateStringType` @kind class {
}
global `com.j256.ormlite.field.types.TimeStampStringType` `@@com.j256.ormlite.field.types.TimeStampStringType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L163c7c.  v0:= new `com.j256.ormlite.field.types.TimeStampStringType`;
  #L163c80.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.<init>:()V` @kind direct;
  #L163c86.  `@@com.j256.ormlite.field.types.TimeStampStringType.singleTon` @type ^`com.j256.ormlite.field.types.TimeStampStringType` := v0 @kind object;
  #L163c8a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.TimeStampStringType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L163c9c.  v0:= `@@com.j256.ormlite.field.SqlType.STRING` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L163ca0.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L163ca6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.TimeStampStringType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L163cb8.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/DateStringType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L163cbe.  return @kind void;
}
procedure `com.j256.ormlite.field.types.TimeStampStringType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.getSingleton:()Lcom/j256/ormlite/field/types/TimeStampStringType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L163cd0.  v0:= `@@com.j256.ormlite.field.types.TimeStampStringType.singleTon` @type ^`com.j256.ormlite.field.types.TimeStampStringType` @kind object;
  #L163cd4.  return v0 @kind object;
}
procedure `boolean` `isValidForField`(`com.j256.ormlite.field.types.TimeStampStringType` v2 @kind this, `java.lang.reflect.Field` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.isValidForField:(Ljava/lang/reflect/Field;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L163ce8.  call temp:= `getType`(v3) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L163cee.  v0:= temp @kind object;
  #L163cf0.  v1:= constclass @type ^`java.sql.Timestamp` @kind object;
  #L163cf4.  if v0 != v1 then goto L163cfc;
  #L163cf8.  v0:= 1I;
  #L163cfa.  return v0;
  #L163cfc.  v0:= 0I;
  #L163cfe.  goto L163cfa;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.TimeStampStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L163d10.  v6:= (`java.sql.Timestamp`) v6 @kind object;
  #L163d14.  v0:= new `java.util.Date`;
  #L163d18.  call temp:= `getTime`(v6) @signature `Ljava/sql/Timestamp;.getTime:()J` @kind virtual;
  #L163d1e.  v2:= temp @kind wide;
  #L163d20.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L163d26.  call temp:= `javaToSqlArg`(v4, v5, v0) @signature `Lcom/j256/ormlite/field/types/DateStringType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @kind super;
  #L163d2c.  v0:= temp @kind object;
  #L163d2e.  return v0 @kind object;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.TimeStampStringType` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L163d40.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L163d46.  v2:= temp @kind wide;
  #L163d48.  if v7 != 0 then goto L163d58;
  #L163d4c.  v0:= new `java.sql.Timestamp`;
  #L163d50.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L163d56.  return v0 @kind object;
  #L163d58.  v7:= (`java.sql.Timestamp`) v7 @kind object;
  #L163d5c.  call temp:= `getTime`(v7) @signature `Ljava/sql/Timestamp;.getTime:()J` @kind virtual;
  #L163d62.  v0:= temp @kind wide;
  #L163d64.  v0:= lcmp(v2, v0);
  #L163d68.  if v0 != 0 then goto L163d7e;
  #L163d6c.  v0:= new `java.sql.Timestamp`;
  #L163d70.  v4:= 1L;
  #L163d74.  v2:= v2 + v4 @kind long;
  #L163d76.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L163d7c.  goto L163d56;
  #L163d7e.  v0:= new `java.sql.Timestamp`;
  #L163d82.  call `<init>`(v0, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L163d88.  goto L163d56;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.TimeStampStringType` v4 @kind this, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `int` v7 ) @signature `Lcom/j256/ormlite/field/types/TimeStampStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L163d9c.  call temp:= `sqlArgToJava`(v4, v5, v6, v7) @signature `Lcom/j256/ormlite/field/types/DateStringType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind super;
  #L163da2.  v0:= temp @kind object;
  #L163da4.  v0:= (`java.util.Date`) v0 @kind object;
  #L163da8.  v1:= new `java.sql.Timestamp`;
  #L163dac.  call temp:= `getTime`(v0) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L163db2.  v2:= temp @kind wide;
  #L163db4.  call `<init>`(v1, v2) @signature `Ljava/sql/Timestamp;.<init>:(J)V` @kind direct;
  #L163dba.  return v1 @kind object;
}
