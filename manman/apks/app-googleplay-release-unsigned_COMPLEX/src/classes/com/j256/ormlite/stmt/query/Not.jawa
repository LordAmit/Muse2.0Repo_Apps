record `com.j256.ormlite.stmt.query.Not` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.query.Clause` @kind interface, `com.j256.ormlite.stmt.query.NeedsFutureClause` @kind interface {
  `com.j256.ormlite.stmt.query.Comparison` `com.j256.ormlite.stmt.query.Not.comparison` @AccessFlag PRIVATE;
  `com.j256.ormlite.stmt.query.Exists` `com.j256.ormlite.stmt.query.Not.exists` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.Not` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/Not;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L16e170.  v0:= 0I;
  #L16e172.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L16e178.  v1.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` := v0 @kind object;
  #L16e17c.  v1.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` := v0 @kind object;
  #L16e180.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.Not` v1 @kind this, `com.j256.ormlite.stmt.query.Clause` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Not;.<init>:(Lcom/j256/ormlite/stmt/query/Clause;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L16e194.  v0:= 0I;
  #L16e196.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L16e19c.  v1.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` := v0 @kind object;
  #L16e1a0.  v1.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` := v0 @kind object;
  #L16e1a4.  call `setMissingClause`(v1, v2) @signature `Lcom/j256/ormlite/stmt/query/Not;.setMissingClause:(Lcom/j256/ormlite/stmt/query/Clause;)V` @kind virtual;
  #L16e1aa.  return @kind void;
}
procedure `void` `appendSql`(`com.j256.ormlite.stmt.query.Not` v2 @kind this, `com.j256.ormlite.db.DatabaseType` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.StringBuilder` v5 @kind object, `java.util.List` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Not;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16e1bc.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L16e1c0.  if v0 != 0 then goto L16e1dc;
  #L16e1c4.  v0:= v2.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` @kind object;
  #L16e1c8.  if v0 != 0 then goto L16e1dc;
  #L16e1cc.  v0:= new `java.lang.IllegalStateException`;
  #L16e1d0.  v1:= "Clause has not been set in NOT operation" @kind object;
  #L16e1d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16e1da.  throw v0;
  #L16e1dc.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L16e1e0.  if v0 != 0 then goto L16e204;
  #L16e1e4.  v0:= "(NOT " @kind object;
  #L16e1e8.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16e1ee.  v0:= v2.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` @kind object;
  #L16e1f2.  call `appendSql`(v0, v3, v4, v5, v6) @signature `Lcom/j256/ormlite/stmt/query/Exists;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L16e1f8.  v0:= ") " @kind object;
  #L16e1fc.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16e202.  return @kind void;
  #L16e204.  v0:= "(NOT " @kind object;
  #L16e208.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16e20e.  if v4 == 0 then goto L16e222;
  #L16e212.  call `appendEscapedEntityName`(v3, v5, v4) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L16e218.  v0:= 46I;
  #L16e21c.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16e222.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L16e226.  call temp:= `getColumnName`(v0) @signature `Lcom/j256/ormlite/stmt/query/Comparison;.getColumnName:()Ljava/lang/String;` @kind interface;
  #L16e22c.  v0:= temp @kind object;
  #L16e22e.  call `appendEscapedEntityName`(v3, v5, v0) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L16e234.  v0:= 32I;
  #L16e238.  call temp:= `append`(v5, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16e23e.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L16e242.  call `appendOperation`(v0, v5) @signature `Lcom/j256/ormlite/stmt/query/Comparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @kind interface;
  #L16e248.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L16e24c.  call `appendValue`(v0, v3, v5, v6) @signature `Lcom/j256/ormlite/stmt/query/Comparison;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind interface;
  #L16e252.  goto L16e1f8;
}
procedure `void` `setMissingClause`(`com.j256.ormlite.stmt.query.Not` v3 @kind this, `com.j256.ormlite.stmt.query.Clause` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/query/Not;.setMissingClause:(Lcom/j256/ormlite/stmt/query/Clause;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16e264.  v0:= v3.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L16e268.  if v0 == 0 then goto L16e27c;
  #L16e26c.  v0:= new `java.lang.IllegalArgumentException`;
  #L16e270.  v1:= "NOT operation already has a comparison set" @kind object;
  #L16e274.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16e27a.  throw v0;
  #L16e27c.  v0:= instanceof @variable v4 @type ^`com.j256.ormlite.stmt.query.Comparison` @kind boolean;
  #L16e280.  if v0 == 0 then goto L16e28e;
  #L16e284.  v4:= (`com.j256.ormlite.stmt.query.Comparison`) v4 @kind object;
  #L16e288.  v3.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` := v4 @kind object;
  #L16e28c.  return @kind void;
  #L16e28e.  v0:= instanceof @variable v4 @type ^`com.j256.ormlite.stmt.query.Exists` @kind boolean;
  #L16e292.  if v0 == 0 then goto L16e2a0;
  #L16e296.  v4:= (`com.j256.ormlite.stmt.query.Exists`) v4 @kind object;
  #L16e29a.  v3.`com.j256.ormlite.stmt.query.Not.exists` @type ^`com.j256.ormlite.stmt.query.Exists` := v4 @kind object;
  #L16e29e.  goto L16e28c;
  #L16e2a0.  v0:= new `java.lang.IllegalArgumentException`;
  #L16e2a4.  v1:= new `java.lang.StringBuilder`;
  #L16e2a8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16e2ae.  v2:= "NOT operation can only work with comparison SQL clauses, not " @kind object;
  #L16e2b2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16e2b8.  v1:= temp @kind object;
  #L16e2ba.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16e2c0.  v1:= temp @kind object;
  #L16e2c2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16e2c8.  v1:= temp @kind object;
  #L16e2ca.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16e2d0.  throw v0;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.query.Not` v2 @kind this) @signature `Lcom/j256/ormlite/stmt/query/Not;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16e2e4.  v0:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L16e2e8.  if v0 != 0 then goto L16e2f2;
  #L16e2ec.  v0:= "NOT without comparison" @kind object;
  #L16e2f0.  return v0 @kind object;
  #L16e2f2.  v0:= new `java.lang.StringBuilder`;
  #L16e2f6.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16e2fc.  v1:= "NOT comparison " @kind object;
  #L16e300.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16e306.  v0:= temp @kind object;
  #L16e308.  v1:= v2.`com.j256.ormlite.stmt.query.Not.comparison` @type ^`com.j256.ormlite.stmt.query.Comparison` @kind object;
  #L16e30c.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16e312.  v0:= temp @kind object;
  #L16e314.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16e31a.  v0:= temp @kind object;
  #L16e31c.  goto L16e2f0;
}
