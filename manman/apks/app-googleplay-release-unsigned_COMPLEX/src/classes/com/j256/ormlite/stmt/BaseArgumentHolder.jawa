record `com.j256.ormlite.stmt.BaseArgumentHolder` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.stmt.ArgumentHolder` @kind interface {
  `java.lang.String` `com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.SqlType` `com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L1668f4.  v0:= 0I;
  #L1668f6.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L1668fc.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L166900.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v0 @kind object;
  #L166904.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v0 @kind object;
  #L166908.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this, `com.j256.ormlite.field.SqlType` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L16691c.  v0:= 0I;
  #L16691e.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L166924.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L166928.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v0 @kind object;
  #L16692c.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v0 @kind object;
  #L166930.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v2 @kind object;
  #L166934.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.<init>:(Ljava/lang/String;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L166948.  v0:= 0I;
  #L16694a.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L166950.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v0 @kind object;
  #L166954.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v0 @kind object;
  #L166958.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` := v0 @kind object;
  #L16695c.  v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v2 @kind object;
  #L166960.  return @kind void;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L166974.  v0:= v1.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L166978.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType` `getFieldType`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getFieldType:()Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16698c.  v0:= v1.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L166990.  return v0 @kind object;
}
procedure `java.lang.Object` `getSqlArgValue`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getSqlArgValue:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1669a4.  call temp:= `isValueSet`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.isValueSet:()Z` @kind virtual;
  #L1669aa.  v0:= temp;
  #L1669ac.  if v0 != 0 then goto L1669e6;
  #L1669b0.  v0:= new `java.sql.SQLException`;
  #L1669b4.  v1:= new `java.lang.StringBuilder`;
  #L1669b8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1669be.  v2:= "Column value has not been set for " @kind object;
  #L1669c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1669c8.  v1:= temp @kind object;
  #L1669ca.  v2:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L1669ce.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1669d4.  v1:= temp @kind object;
  #L1669d6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1669dc.  v1:= temp @kind object;
  #L1669de.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1669e4.  throw v0;
  #L1669e6.  call temp:= `getValue`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getValue:()Ljava/lang/Object;` @kind virtual;
  #L1669ec.  v0:= temp @kind object;
  #L1669ee.  if v0 != 0 then goto L1669f6;
  #L1669f2.  v0:= 0I;
  #L1669f4.  return v0 @kind object;
  #L1669f6.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L1669fa.  if v1 == 0 then goto L1669f4;
  #L1669fe.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L166a02.  call temp:= `isForeign`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @kind virtual;
  #L166a08.  v1:= temp;
  #L166a0a.  if v1 == 0 then goto L166a3c;
  #L166a0e.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L166a12.  call temp:= `getType`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L166a18.  v1:= temp @kind object;
  #L166a1a.  call temp:= `getClass`(v0) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L166a20.  v2:= temp @kind object;
  #L166a22.  if v1 != v2 then goto L166a3c;
  #L166a26.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L166a2a.  call temp:= `getForeignRefField`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignRefField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L166a30.  v1:= temp @kind object;
  #L166a32.  call temp:= `extractJavaFieldValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L166a38.  v0:= temp @kind object;
  #L166a3a.  goto L1669f4;
  #L166a3c.  v1:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L166a40.  call temp:= `convertJavaFieldToSqlArgValue`(v1, v0) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L166a46.  v0:= temp @kind object;
  #L166a48.  goto L1669f4;
}
procedure `com.j256.ormlite.field.SqlType` `getSqlType`(`com.j256.ormlite.stmt.BaseArgumentHolder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L166a5c.  v0:= v1.`com.j256.ormlite.stmt.BaseArgumentHolder.sqlType` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L166a60.  return v0 @kind object;
}
procedure `java.lang.Object` `getValue`() @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getValue:()Ljava/lang/Object;` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `boolean` `isValueSet`() @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.isValueSet:()Z` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `setMetaInfo`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L166a74.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L166a78.  if v0 != 0 then goto L166a82;
  #L166a7c.  v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v4 @kind object;
  #L166a80.  return @kind void;
  #L166a82.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L166a86.  if v0 == v4 then goto L166a7c;
  #L166a8a.  v0:= new `java.lang.IllegalArgumentException`;
  #L166a8e.  v1:= new `java.lang.StringBuilder`;
  #L166a92.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L166a98.  v2:= "FieldType name cannot be set twice from " @kind object;
  #L166a9c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166aa2.  v1:= temp @kind object;
  #L166aa4.  v2:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L166aa8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166aae.  v1:= temp @kind object;
  #L166ab0.  v2:= " to " @kind object;
  #L166ab4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166aba.  v1:= temp @kind object;
  #L166abc.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166ac2.  v1:= temp @kind object;
  #L166ac4.  v2:= ".  Using a SelectArg twice in query with different columns?" @kind object;
  #L166ac8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166ace.  v1:= temp @kind object;
  #L166ad0.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L166ad6.  v1:= temp @kind object;
  #L166ad8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L166ade.  throw v0;
}
procedure `void` `setMetaInfo`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this, `java.lang.String` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L166af0.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L166af4.  if v0 != 0 then goto L166afe;
  #L166af8.  v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` := v4 @kind object;
  #L166afc.  return @kind void;
  #L166afe.  v0:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L166b02.  call temp:= `equals`(v0, v4) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L166b08.  v0:= temp;
  #L166b0a.  if v0 != 0 then goto L166af8;
  #L166b0e.  v0:= new `java.lang.IllegalArgumentException`;
  #L166b12.  v1:= new `java.lang.StringBuilder`;
  #L166b16.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L166b1c.  v2:= "Column name cannot be set twice from " @kind object;
  #L166b20.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166b26.  v1:= temp @kind object;
  #L166b28.  v2:= v3.`com.j256.ormlite.stmt.BaseArgumentHolder.columnName` @type ^`java.lang.String` @kind object;
  #L166b2c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166b32.  v1:= temp @kind object;
  #L166b34.  v2:= " to " @kind object;
  #L166b38.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166b3e.  v1:= temp @kind object;
  #L166b40.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166b46.  v1:= temp @kind object;
  #L166b48.  v2:= ".  Using a SelectArg twice in query with different columns?" @kind object;
  #L166b4c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166b52.  v1:= temp @kind object;
  #L166b54.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L166b5a.  v1:= temp @kind object;
  #L166b5c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L166b62.  throw v0;
}
procedure `void` `setMetaInfo`(`com.j256.ormlite.stmt.BaseArgumentHolder` v0 @kind this, `java.lang.String` v1 @kind object, `com.j256.ormlite.field.FieldType` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PUBLIC {
    temp;

  #L166b74.  call `setMetaInfo`(v0, v1) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Ljava/lang/String;)V` @kind virtual;
  #L166b7a.  call `setMetaInfo`(v0, v2) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setMetaInfo:(Lcom/j256/ormlite/field/FieldType;)V` @kind virtual;
  #L166b80.  return @kind void;
}
procedure `void` `setValue`(`java.lang.Object` v0 @kind object) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.setValue:(Ljava/lang/Object;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.BaseArgumentHolder` v3 @kind this) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L166b94.  call temp:= `isValueSet`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.isValueSet:()Z` @kind virtual;
  #L166b9a.  v0:= temp;
  #L166b9c.  if v0 != 0 then goto L166ba6;
  #L166ba0.  v0:= "[unset]" @kind object;
  #L166ba4.  return v0 @kind object;
  #Try_start0.  
  #L166ba6.  call temp:= `getSqlArgValue`(v3) @signature `Lcom/j256/ormlite/stmt/BaseArgumentHolder;.getSqlArgValue:()Ljava/lang/Object;` @kind virtual;
  #L166bac.  v0:= temp @kind object;
  #L166bae.  if v0 != 0 then goto L166bb8;
  #L166bb2.  v0:= "[null]" @kind object;
  #L166bb6.  goto L166ba4;
  #L166bb8.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L166bbe.  v0:= temp @kind object;
  #L166bc0.  goto L166ba4;
  #L166bc2.  v0:= Exception @type ^`java.sql.SQLException` @kind object;
  #L166bc4.  v1:= new `java.lang.StringBuilder`;
  #L166bc8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L166bce.  v2:= "[could not get value: " @kind object;
  #L166bd2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166bd8.  v1:= temp @kind object;
  #L166bda.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166be0.  v0:= temp @kind object;
  #L166be2.  v1:= "]" @kind object;
  #L166be6.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166bec.  v0:= temp @kind object;
  #L166bee.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L166bf4.  v0:= temp @kind object;
  #L166bf6.  goto L166ba4;
  catch `java.sql.SQLException` @[Try_start0..Try_end0] goto L166bc2;
}
