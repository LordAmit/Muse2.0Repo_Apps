record `com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.BaseFieldConverter` @kind class {
}
procedure `void` `<init>`(`com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` v0 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.<init>:()V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L15a434.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.<init>:()V` @kind direct;
  #L15a43a.  return @kind void;
}
procedure `com.j256.ormlite.field.SqlType` `getSqlType`(`com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` v1 @kind this) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.getSqlType:()Lcom/j256/ormlite/field/SqlType;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a44c.  v0:= `@@com.j256.ormlite.field.SqlType.BOOLEAN` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L15a450.  return v0 @kind object;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a464.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L15a468.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L15a46e.  v0:= temp;
  #L15a470.  if v0 == 0 then goto L15a480;
  #L15a474.  v0:= 1I;
  #L15a476.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L15a47c.  v0:= temp @kind object;
  #L15a47e.  return v0 @kind object;
  #L15a480.  v0:= 0I;
  #L15a482.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L15a488.  v0:= temp @kind object;
  #L15a48a.  goto L15a47e;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a49c.  call temp:= `parseBoolean`(v3) @signature `Ljava/lang/Boolean;.parseBoolean:(Ljava/lang/String;)Z` @kind static;
  #L15a4a2.  v0:= temp;
  #L15a4a4.  if v0 == 0 then goto L15a4b4;
  #L15a4a8.  v0:= 1I;
  #L15a4aa.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L15a4b0.  v0:= temp @kind object;
  #L15a4b2.  return v0 @kind object;
  #L15a4b4.  v0:= 0I;
  #L15a4b6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L15a4bc.  v0:= temp @kind object;
  #L15a4be.  goto L15a4b2;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a4d0.  call temp:= `parseByte`(v3) @signature `Ljava/lang/Byte;.parseByte:(Ljava/lang/String;)B` @kind static;
  #L15a4d6.  v0:= temp;
  #L15a4d8.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L15a4de.  v0:= temp @kind object;
  #L15a4e0.  call temp:= `sqlArgToJava`(v1, v2, v0, v4) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L15a4e6.  v0:= temp @kind object;
  #L15a4e8.  return v0 @kind object;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a4fc.  call temp:= `getByte`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getByte:(I)B` @kind interface;
  #L15a502.  v0:= temp;
  #L15a504.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L15a50a.  v0:= temp @kind object;
  #L15a50c.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.db.BaseDatabaseType$BooleanNumberFieldConverter` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `java.lang.Object` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/db/BaseDatabaseType$BooleanNumberFieldConverter;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15a520.  v1:= 1I;
  #L15a522.  v4:= (`java.lang.Byte`) v4 @kind object;
  #L15a526.  call temp:= `byteValue`(v4) @signature `Ljava/lang/Byte;.byteValue:()B` @kind virtual;
  #L15a52c.  v0:= temp;
  #L15a52e.  if v0 != v1 then goto L15a53c;
  #L15a532.  call temp:= `valueOf`(v1) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L15a538.  v0:= temp @kind object;
  #L15a53a.  return v0 @kind object;
  #L15a53c.  v0:= 0I;
  #L15a53e.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L15a544.  v0:= temp @kind object;
  #L15a546.  goto L15a53a;
}
