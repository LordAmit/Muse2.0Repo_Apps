record `com.j256.ormlite.misc.VersionUtils` @kind class @AccessFlag PUBLIC {
}
global `java.lang.String` `@@com.j256.ormlite.misc.VersionUtils.CORE_VERSION` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.String` `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @AccessFlag PRIVATE_STATIC;
global `com.j256.ormlite.logger.Logger` `@@com.j256.ormlite.misc.VersionUtils.logger` @AccessFlag PRIVATE_STATIC;
global `boolean` `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L166700.  v0:= 0I;
  #L166702.  `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @type ^`boolean` := v0 @kind boolean;
  #L166706.  v0:= "VERSION__5.0__" @kind object;
  #L16670a.  `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` := v0 @kind object;
  #L16670e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.misc.VersionUtils` v0 @kind this) @signature `Lcom/j256/ormlite/misc/VersionUtils;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L166720.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L166726.  return @kind void;
}
procedure `void` `checkCoreVersusAndroidVersions`(`java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.checkCoreVersusAndroidVersions:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L166738.  v0:= "core" @kind object;
  #L16673c.  v1:= `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` @kind object;
  #L166740.  v2:= "android" @kind object;
  #L166744.  call `logVersionWarnings`(v0, v1, v2, v3) @signature `Lcom/j256/ormlite/misc/VersionUtils;.logVersionWarnings:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L16674a.  return @kind void;
}
procedure `void` `checkCoreVersusJdbcVersions`(`java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.checkCoreVersusJdbcVersions:(Ljava/lang/String;)V` @AccessFlag PUBLIC_STATIC_FINAL {
    temp;
    v0;
    v1;
    v2;

  #L16675c.  v0:= "core" @kind object;
  #L166760.  v1:= `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` @kind object;
  #L166764.  v2:= "jdbc" @kind object;
  #L166768.  call `logVersionWarnings`(v0, v1, v2, v3) @signature `Lcom/j256/ormlite/misc/VersionUtils;.logVersionWarnings:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind static;
  #L16676e.  return @kind void;
}
procedure `java.lang.String` `getCoreVersion`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.getCoreVersion:()Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L166780.  v0:= `@@com.j256.ormlite.misc.VersionUtils.coreVersion` @type ^`java.lang.String` @kind object;
  #L166784.  return v0 @kind object;
}
procedure `com.j256.ormlite.logger.Logger` `getLogger`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.getLogger:()Lcom/j256/ormlite/logger/Logger;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L166798.  v0:= `@@com.j256.ormlite.misc.VersionUtils.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L16679c.  if v0 != 0 then goto L1667b0;
  #L1667a0.  v0:= constclass @type ^`com.j256.ormlite.misc.VersionUtils` @kind object;
  #L1667a4.  call temp:= `getLogger`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/Class;)Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L1667aa.  v0:= temp @kind object;
  #L1667ac.  `@@com.j256.ormlite.misc.VersionUtils.logger` @type ^`com.j256.ormlite.logger.Logger` := v0 @kind object;
  #L1667b0.  v0:= `@@com.j256.ormlite.misc.VersionUtils.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L1667b4.  return v0 @kind object;
}
procedure `void` `logVersionWarnings`(`java.lang.String` v8 @kind object, `java.lang.String` v9 @kind object, `java.lang.String` v10 @kind object, `java.lang.String` v11 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.logVersionWarnings:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1667c8.  v7:= 0I;
  #L1667ca.  v6:= 3I;
  #L1667cc.  v5:= 2I;
  #L1667ce.  v4:= 1I;
  #L1667d0.  v3:= 0I;
  #L1667d2.  if v9 != 0 then goto L1667fa;
  #L1667d6.  if v11 == 0 then goto L1667f8;
  #L1667da.  v0:= "Unknown version" @kind object;
  #L1667de.  v1:= " for {}, version for {} is '{}'" @kind object;
  #L1667e2.  v2:= new `java.lang.Object`[v6];
  #L1667e6.  v2[v3]:= v8 @kind object;
  #L1667ea.  v2[v4]:= v10 @kind object;
  #L1667ee.  v2[v5]:= v11 @kind object;
  #L1667f2.  call `warning`(v7, v0, v1, v2) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @kind static;
  #L1667f8.  return @kind void;
  #L1667fa.  if v11 != 0 then goto L16681e;
  #L1667fe.  v0:= "Unknown version" @kind object;
  #L166802.  v1:= " for {}, version for {} is '{}'" @kind object;
  #L166806.  v2:= new `java.lang.Object`[v6];
  #L16680a.  v2[v3]:= v10 @kind object;
  #L16680e.  v2[v4]:= v8 @kind object;
  #L166812.  v2[v5]:= v9 @kind object;
  #L166816.  call `warning`(v7, v0, v1, v2) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @kind static;
  #L16681c.  goto L1667f8;
  #L16681e.  call temp:= `equals`(v9, v11) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L166824.  v0:= temp;
  #L166826.  if v0 != 0 then goto L1667f8;
  #L16682a.  v0:= "Mismatched versions" @kind object;
  #L16682e.  v1:= ": {} is '{}', while {} is '{}'" @kind object;
  #L166832.  v2:= 4I;
  #L166834.  v2:= new `java.lang.Object`[v2];
  #L166838.  v2[v3]:= v8 @kind object;
  #L16683c.  v2[v4]:= v9 @kind object;
  #L166840.  v2[v5]:= v10 @kind object;
  #L166844.  v2[v6]:= v11 @kind object;
  #L166848.  call `warning`(v7, v0, v1, v2) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @kind static;
  #L16684e.  goto L1667f8;
}
procedure `void` `setThrownOnErrors`(`boolean` v0 ) @signature `Lcom/j256/ormlite/misc/VersionUtils;.setThrownOnErrors:(Z)V` @AccessFlag STATIC {
    temp;

  #L166860.  `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @type ^`boolean` := v0 @kind boolean;
  #L166864.  return @kind void;
}
procedure `void` `warning`(`java.lang.Throwable` v3 @kind object, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object, `java.lang.Object`[] v6 @kind object) @signature `Lcom/j256/ormlite/misc/VersionUtils;.warning:(Ljava/lang/Throwable;Ljava/lang/String;Ljava/lang/String;[Ljava/lang/Object;)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L166878.  call temp:= `getLogger`() @signature `Lcom/j256/ormlite/misc/VersionUtils;.getLogger:()Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L16687e.  v0:= temp @kind object;
  #L166880.  v1:= new `java.lang.StringBuilder`;
  #L166884.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16688a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166890.  v1:= temp @kind object;
  #L166892.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166898.  v1:= temp @kind object;
  #L16689a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1668a0.  v1:= temp @kind object;
  #L1668a2.  call `warn`(v0, v3, v1, v6) @signature `Lcom/j256/ormlite/logger/Logger;.warn:(Ljava/lang/Throwable;Ljava/lang/String;[Ljava/lang/Object;)V` @kind virtual;
  #L1668a8.  v0:= `@@com.j256.ormlite.misc.VersionUtils.thrownOnErrors` @type ^`boolean` @kind boolean;
  #L1668ac.  if v0 == 0 then goto L1668e2;
  #L1668b0.  v0:= new `java.lang.IllegalStateException`;
  #L1668b4.  v1:= new `java.lang.StringBuilder`;
  #L1668b8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1668be.  v2:= "See error log for details:" @kind object;
  #L1668c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1668c8.  v1:= temp @kind object;
  #L1668ca.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1668d0.  v1:= temp @kind object;
  #L1668d2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1668d8.  v1:= temp @kind object;
  #L1668da.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1668e0.  throw v0;
  #L1668e2.  return @kind void;
}
