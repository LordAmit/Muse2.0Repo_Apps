record `com.j256.ormlite.stmt.query.BaseComparison` @kind class @AccessFlag ABSTRACT extends `com.j256.ormlite.stmt.query.Comparison` @kind interface {
  `java.lang.String` `com.j256.ormlite.stmt.query.BaseComparison.columnName` @AccessFlag PROTECTED_FINAL;
  `com.j256.ormlite.field.FieldType` `com.j256.ormlite.stmt.query.BaseComparison.fieldType` @AccessFlag PROTECTED_FINAL;
  `java.lang.Object` `com.j256.ormlite.stmt.query.BaseComparison.value` @AccessFlag PRIVATE_FINAL;
}
global `java.lang.String` `@@com.j256.ormlite.stmt.query.BaseComparison.NUMBER_CHARACTERS` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<init>`(`com.j256.ormlite.stmt.query.BaseComparison` v3 @kind this, `java.lang.String` v4 @kind object, `com.j256.ormlite.field.FieldType` v5 @kind object, `java.lang.Object` v6 @kind object, `boolean` v7 ) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;Z)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L16d5d0.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L16d5d6.  if v7 == 0 then goto L16d644;
  #L16d5da.  if v5 == 0 then goto L16d644;
  #L16d5de.  call temp:= `isComparable`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.isComparable:()Z` @kind virtual;
  #L16d5e4.  v0:= temp;
  #L16d5e6.  if v0 != 0 then goto L16d644;
  #L16d5ea.  v0:= new `java.sql.SQLException`;
  #L16d5ee.  v1:= new `java.lang.StringBuilder`;
  #L16d5f2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16d5f8.  v2:= "Field '" @kind object;
  #L16d5fc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d602.  v1:= temp @kind object;
  #L16d604.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d60a.  v1:= temp @kind object;
  #L16d60c.  v2:= "' is of data type " @kind object;
  #L16d610.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d616.  v1:= temp @kind object;
  #L16d618.  call temp:= `getDataPersister`(v5) @signature `Lcom/j256/ormlite/field/FieldType;.getDataPersister:()Lcom/j256/ormlite/field/DataPersister;` @kind virtual;
  #L16d61e.  v2:= temp @kind object;
  #L16d620.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d626.  v1:= temp @kind object;
  #L16d628.  v2:= " which can not be compared" @kind object;
  #L16d62c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d632.  v1:= temp @kind object;
  #L16d634.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16d63a.  v1:= temp @kind object;
  #L16d63c.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16d642.  throw v0;
  #L16d644.  v3.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` := v4 @kind object;
  #L16d648.  v3.`com.j256.ormlite.stmt.query.BaseComparison.fieldType` @type ^`com.j256.ormlite.field.FieldType` := v5 @kind object;
  #L16d64c.  v3.`com.j256.ormlite.stmt.query.BaseComparison.value` @type ^`java.lang.Object` := v6 @kind object;
  #L16d650.  return @kind void;
}
procedure `void` `appendArgOrValue`(`com.j256.ormlite.stmt.query.BaseComparison` v7 @kind this, `com.j256.ormlite.db.DatabaseType` v8 @kind object, `com.j256.ormlite.field.FieldType` v9 @kind object, `java.lang.StringBuilder` v10 @kind object, `java.util.List` v11 @kind object, `java.lang.Object` v12 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L16d664.  v2:= 63I;
  #L16d668.  v6:= 0I;
  #L16d66a.  v0:= 1I;
  #L16d66c.  if v12 != 0 then goto L16d6b6;
  #L16d670.  v0:= new `java.sql.SQLException`;
  #L16d674.  v1:= new `java.lang.StringBuilder`;
  #L16d678.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16d67e.  v2:= "argument for '" @kind object;
  #L16d682.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d688.  v1:= temp @kind object;
  #L16d68a.  call temp:= `getFieldName`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.getFieldName:()Ljava/lang/String;` @kind virtual;
  #L16d690.  v2:= temp @kind object;
  #L16d692.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d698.  v1:= temp @kind object;
  #L16d69a.  v2:= "' is null" @kind object;
  #L16d69e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d6a4.  v1:= temp @kind object;
  #L16d6a6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16d6ac.  v1:= temp @kind object;
  #L16d6ae.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16d6b4.  throw v0;
  #L16d6b6.  v1:= instanceof @variable v12 @type ^`com.j256.ormlite.stmt.ArgumentHolder` @kind boolean;
  #L16d6ba.  if v1 == 0 then goto L16d6e8;
  #L16d6be.  call temp:= `append`(v10, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d6c4.  v12:= (`com.j256.ormlite.stmt.ArgumentHolder`) v12 @kind object;
  #L16d6c8.  v1:= v7.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L16d6cc.  call `setMetaInfo`(v12, v1, v9) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setMetaInfo:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)V` @kind interface;
  #L16d6d2.  call temp:= `add`(v11, v12) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L16d6d8.  if v0 == 0 then goto L16d6e6;
  #L16d6dc.  v0:= 32I;
  #L16d6e0.  call temp:= `append`(v10, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d6e6.  return @kind void;
  #L16d6e8.  v1:= instanceof @variable v12 @type ^`com.j256.ormlite.stmt.ColumnArg` @kind boolean;
  #L16d6ec.  if v1 == 0 then goto L16d720;
  #L16d6f0.  v12:= (`com.j256.ormlite.stmt.ColumnArg`) v12 @kind object;
  #L16d6f4.  call temp:= `getTableName`(v12) @signature `Lcom/j256/ormlite/stmt/ColumnArg;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L16d6fa.  v1:= temp @kind object;
  #L16d6fc.  if v1 == 0 then goto L16d710;
  #L16d700.  call `appendEscapedEntityName`(v8, v10, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L16d706.  v1:= 46I;
  #L16d70a.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d710.  call temp:= `getColumnName`(v12) @signature `Lcom/j256/ormlite/stmt/ColumnArg;.getColumnName:()Ljava/lang/String;` @kind virtual;
  #L16d716.  v1:= temp @kind object;
  #L16d718.  call `appendEscapedEntityName`(v8, v10, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L16d71e.  goto L16d6d8;
  #L16d720.  call temp:= `isArgumentHolderRequired`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isArgumentHolderRequired:()Z` @kind virtual;
  #L16d726.  v1:= temp;
  #L16d728.  if v1 == 0 then goto L16d754;
  #L16d72c.  call temp:= `append`(v10, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d732.  v1:= new `com.j256.ormlite.stmt.SelectArg`;
  #L16d736.  call `<init>`(v1) @signature `Lcom/j256/ormlite/stmt/SelectArg;.<init>:()V` @kind direct;
  #L16d73c.  v2:= v7.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L16d740.  call `setMetaInfo`(v1, v2, v9) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setMetaInfo:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;)V` @kind interface;
  #L16d746.  call `setValue`(v1, v12) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.setValue:(Ljava/lang/Object;)V` @kind interface;
  #L16d74c.  call temp:= `add`(v11, v1) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L16d752.  goto L16d6d8;
  #L16d754.  call temp:= `isForeign`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @kind virtual;
  #L16d75a.  v1:= temp;
  #L16d75c.  if v1 == 0 then goto L16d79e;
  #L16d760.  call temp:= `getType`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16d766.  v1:= temp @kind object;
  #L16d768.  call temp:= `getClass`(v12) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L16d76e.  v2:= temp @kind object;
  #L16d770.  call temp:= `isAssignableFrom`(v1, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L16d776.  v1:= temp;
  #L16d778.  if v1 == 0 then goto L16d79e;
  #L16d77c.  call temp:= `getForeignIdField`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.getForeignIdField:()Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16d782.  v2:= temp @kind object;
  #L16d784.  call temp:= `extractJavaFieldValue`(v2, v12) @signature `Lcom/j256/ormlite/field/FieldType;.extractJavaFieldValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16d78a.  v5:= temp @kind object;
  #L16d78c.  v0:= v7 @kind object;
  #L16d78e.  v1:= v8 @kind object;
  #L16d790.  v3:= v10 @kind object;
  #L16d792.  v4:= v11 @kind object;
  #L16d794.  call `appendArgOrValue`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @kind virtual;
  #L16d79a.  v0:= v6;
  #L16d79c.  goto L16d6d8;
  #L16d79e.  call temp:= `isEscapedValue`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isEscapedValue:()Z` @kind virtual;
  #L16d7a4.  v1:= temp;
  #L16d7a6.  if v1 == 0 then goto L16d7c2;
  #L16d7aa.  call temp:= `convertJavaFieldToSqlArgValue`(v9, v12) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16d7b0.  v1:= temp @kind object;
  #L16d7b2.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16d7b8.  v1:= temp @kind object;
  #L16d7ba.  call `appendEscapedWord`(v8, v10, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L16d7c0.  goto L16d6d8;
  #L16d7c2.  call temp:= `isForeign`(v9) @signature `Lcom/j256/ormlite/field/FieldType;.isForeign:()Z` @kind virtual;
  #L16d7c8.  v1:= temp;
  #L16d7ca.  if v1 == 0 then goto L16d866;
  #L16d7ce.  call temp:= `convertJavaFieldToSqlArgValue`(v9, v12) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16d7d4.  v1:= temp @kind object;
  #L16d7d6.  call temp:= `toString`(v1) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L16d7dc.  v1:= temp @kind object;
  #L16d7de.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L16d7e4.  v2:= temp;
  #L16d7e6.  if v2 <= 0 then goto L16d85c;
  #L16d7ea.  v2:= "0123456789.-+" @kind object;
  #L16d7ee.  call temp:= `charAt`(v1, v6) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L16d7f4.  v3:= temp;
  #L16d7f6.  call temp:= `indexOf`(v2, v3) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L16d7fc.  v2:= temp;
  #L16d7fe.  if v2 >= 0 then goto L16d85c;
  #L16d802.  v0:= new `java.sql.SQLException`;
  #L16d806.  v2:= new `java.lang.StringBuilder`;
  #L16d80a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16d810.  v3:= "Foreign field " @kind object;
  #L16d814.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d81a.  v2:= temp @kind object;
  #L16d81c.  call temp:= `append`(v2, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d822.  v2:= temp @kind object;
  #L16d824.  v3:= " does not seem to be producing a numerical value '" @kind object;
  #L16d828.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d82e.  v2:= temp @kind object;
  #L16d830.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d836.  v1:= temp @kind object;
  #L16d838.  v2:= "'. Maybe you are passing the wrong object to comparison: " @kind object;
  #L16d83c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d842.  v1:= temp @kind object;
  #L16d844.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d84a.  v1:= temp @kind object;
  #L16d84c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16d852.  v1:= temp @kind object;
  #L16d854.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16d85a.  throw v0;
  #L16d85c.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d862.  goto L16d6d8;
  #L16d866.  call temp:= `convertJavaFieldToSqlArgValue`(v9, v12) @signature `Lcom/j256/ormlite/field/FieldType;.convertJavaFieldToSqlArgValue:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16d86c.  v1:= temp @kind object;
  #L16d86e.  call temp:= `append`(v10, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d874.  goto L16d6d8;
}
procedure `void` `appendOperation`(`java.lang.StringBuilder` v0 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @AccessFlag PUBLIC_ABSTRACT {

  # return;
}
procedure `void` `appendSql`(`com.j256.ormlite.stmt.query.BaseComparison` v1 @kind this, `com.j256.ormlite.db.DatabaseType` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.StringBuilder` v4 @kind object, `java.util.List` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d888.  if v3 == 0 then goto L16d89c;
  #L16d88c.  call `appendEscapedEntityName`(v2, v4, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L16d892.  v0:= 46I;
  #L16d896.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d89c.  v0:= v1.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L16d8a0.  call `appendEscapedEntityName`(v2, v4, v0) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L16d8a6.  v0:= 32I;
  #L16d8aa.  call temp:= `append`(v4, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d8b0.  call `appendOperation`(v1, v4) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @kind virtual;
  #L16d8b6.  call `appendValue`(v1, v2, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L16d8bc.  return @kind void;
}
procedure `void` `appendValue`(`com.j256.ormlite.stmt.query.BaseComparison` v6 @kind this, `com.j256.ormlite.db.DatabaseType` v7 @kind object, `java.lang.StringBuilder` v8 @kind object, `java.util.List` v9 @kind object) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendValue:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16d8d0.  v2:= v6.`com.j256.ormlite.stmt.query.BaseComparison.fieldType` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16d8d4.  v5:= v6.`com.j256.ormlite.stmt.query.BaseComparison.value` @type ^`java.lang.Object` @kind object;
  #L16d8d8.  v0:= v6 @kind object;
  #L16d8da.  v1:= v7 @kind object;
  #L16d8dc.  v3:= v8 @kind object;
  #L16d8de.  v4:= v9 @kind object;
  #L16d8e0.  call `appendArgOrValue`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendArgOrValue:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/field/FieldType;Ljava/lang/StringBuilder;Ljava/util/List;Ljava/lang/Object;)V` @kind virtual;
  #L16d8e6.  return @kind void;
}
procedure `java.lang.String` `getColumnName`(`com.j256.ormlite.stmt.query.BaseComparison` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.getColumnName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16d8f8.  v0:= v1.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L16d8fc.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`com.j256.ormlite.stmt.query.BaseComparison` v3 @kind this) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16d910.  v2:= 32I;
  #L16d914.  v0:= new `java.lang.StringBuilder`;
  #L16d918.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16d91e.  v1:= v3.`com.j256.ormlite.stmt.query.BaseComparison.columnName` @type ^`java.lang.String` @kind object;
  #L16d922.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d928.  v1:= temp @kind object;
  #L16d92a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d930.  call `appendOperation`(v3, v0) @signature `Lcom/j256/ormlite/stmt/query/BaseComparison;.appendOperation:(Ljava/lang/StringBuilder;)V` @kind virtual;
  #L16d936.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d93c.  v1:= v3.`com.j256.ormlite.stmt.query.BaseComparison.value` @type ^`java.lang.Object` @kind object;
  #L16d940.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16d946.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16d94c.  v0:= temp @kind object;
  #L16d94e.  return v0 @kind object;
}
