record `com.j256.ormlite.stmt.StatementBuilder` @kind class @AccessFlag PUBLIC_ABSTRACT {
  `boolean` `com.j256.ormlite.stmt.StatementBuilder.addTableName` @AccessFlag PROTECTED;
  `com.j256.ormlite.dao.Dao` `com.j256.ormlite.stmt.StatementBuilder.dao` @AccessFlag PROTECTED_FINAL;
  `com.j256.ormlite.db.DatabaseType` `com.j256.ormlite.stmt.StatementBuilder.databaseType` @AccessFlag PROTECTED_FINAL;
  `com.j256.ormlite.table.TableInfo` `com.j256.ormlite.stmt.StatementBuilder.tableInfo` @AccessFlag PROTECTED_FINAL;
  `java.lang.String` `com.j256.ormlite.stmt.StatementBuilder.tableName` @AccessFlag PROTECTED_FINAL;
  `com.j256.ormlite.stmt.StatementBuilder$StatementType` `com.j256.ormlite.stmt.StatementBuilder.type` @AccessFlag PROTECTED;
  `com.j256.ormlite.stmt.Where` `com.j256.ormlite.stmt.StatementBuilder.where` @AccessFlag PROTECTED;
}
global `com.j256.ormlite.logger.Logger` `@@com.j256.ormlite.stmt.StatementBuilder.logger` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L166c8c.  v0:= constclass @type ^`com.j256.ormlite.stmt.StatementBuilder` @kind object;
  #L166c90.  call temp:= `getLogger`(v0) @signature `Lcom/j256/ormlite/logger/LoggerFactory;.getLogger:(Ljava/lang/Class;)Lcom/j256/ormlite/logger/Logger;` @kind static;
  #L166c96.  v0:= temp @kind object;
  #L166c98.  `@@com.j256.ormlite.stmt.StatementBuilder.logger` @type ^`com.j256.ormlite.logger.Logger` := v0 @kind object;
  #L166c9c.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.StatementBuilder` v3 @kind this, `com.j256.ormlite.db.DatabaseType` v4 @kind object, `com.j256.ormlite.table.TableInfo` v5 @kind object, `com.j256.ormlite.dao.Dao` v6 @kind object, `com.j256.ormlite.stmt.StatementBuilder$StatementType` v7 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.<init>:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/dao/Dao;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L166cb0.  call `<init>`(v3) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L166cb6.  v0:= 0I;
  #L166cb8.  v3.`com.j256.ormlite.stmt.StatementBuilder.where` @type ^`com.j256.ormlite.stmt.Where` := v0 @kind object;
  #L166cbc.  v3.`com.j256.ormlite.stmt.StatementBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` := v4 @kind object;
  #L166cc0.  v3.`com.j256.ormlite.stmt.StatementBuilder.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` := v5 @kind object;
  #L166cc4.  call temp:= `getTableName`(v5) @signature `Lcom/j256/ormlite/table/TableInfo;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L166cca.  v0:= temp @kind object;
  #L166ccc.  v3.`com.j256.ormlite.stmt.StatementBuilder.tableName` @type ^`java.lang.String` := v0 @kind object;
  #L166cd0.  v3.`com.j256.ormlite.stmt.StatementBuilder.dao` @type ^`com.j256.ormlite.dao.Dao` := v6 @kind object;
  #L166cd4.  v3.`com.j256.ormlite.stmt.StatementBuilder.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` := v7 @kind object;
  #L166cd8.  call temp:= `isOkForStatementBuilder`(v7) @signature `Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;.isOkForStatementBuilder:()Z` @kind virtual;
  #L166cde.  v0:= temp;
  #L166ce0.  if v0 != 0 then goto L166d22;
  #L166ce4.  v0:= new `java.lang.IllegalStateException`;
  #L166ce8.  v1:= new `java.lang.StringBuilder`;
  #L166cec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L166cf2.  v2:= "Building a statement from a " @kind object;
  #L166cf6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166cfc.  v1:= temp @kind object;
  #L166cfe.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166d04.  v1:= temp @kind object;
  #L166d06.  v2:= " statement is not allowed" @kind object;
  #L166d0a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166d10.  v1:= temp @kind object;
  #L166d12.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L166d18.  v1:= temp @kind object;
  #L166d1a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L166d20.  throw v0;
  #L166d22.  return @kind void;
}
procedure `void` `appendStatementEnd`(`java.lang.StringBuilder` v0 @kind object, `java.util.List` v1 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendStatementEnd:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `appendStatementStart`(`java.lang.StringBuilder` v0 @kind object, `java.util.List` v1 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendStatementStart:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PROTECTED_ABSTRACT {

  # return;
}
procedure `void` `appendStatementString`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendStatementString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;

  #L166d34.  call `appendStatementStart`(v1, v2, v3) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendStatementStart:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L166d3a.  v0:= `@@com.j256.ormlite.stmt.StatementBuilder$WhereOperation.FIRST` @type ^`com.j256.ormlite.stmt.StatementBuilder$WhereOperation` @kind object;
  #L166d3e.  call temp:= `appendWhereStatement`(v1, v2, v3, v0) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendWhereStatement:(Ljava/lang/StringBuilder;Ljava/util/List;Lcom/j256/ormlite/stmt/StatementBuilder$WhereOperation;)Z` @kind virtual;
  #L166d44.  call `appendStatementEnd`(v1, v2, v3) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendStatementEnd:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L166d4a.  return @kind void;
}
procedure `boolean` `appendWhereStatement`(`com.j256.ormlite.stmt.StatementBuilder` v3 @kind this, `java.lang.StringBuilder` v4 @kind object, `java.util.List` v5 @kind object, `com.j256.ormlite.stmt.StatementBuilder$WhereOperation` v6 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendWhereStatement:(Ljava/lang/StringBuilder;Ljava/util/List;Lcom/j256/ormlite/stmt/StatementBuilder$WhereOperation;)Z` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L166d5c.  v0:= 0I;
  #L166d5e.  v1:= v3.`com.j256.ormlite.stmt.StatementBuilder.where` @type ^`com.j256.ormlite.stmt.Where` @kind object;
  #L166d62.  if v1 != 0 then goto L166d72;
  #L166d66.  v1:= `@@com.j256.ormlite.stmt.StatementBuilder$WhereOperation.FIRST` @type ^`com.j256.ormlite.stmt.StatementBuilder$WhereOperation` @kind object;
  #L166d6a.  if v6 != v1 then goto L166d70;
  #L166d6e.  v0:= 1I;
  #L166d70.  return v0;
  #L166d72.  call `appendBefore`(v6, v4) @signature `Lcom/j256/ormlite/stmt/StatementBuilder$WhereOperation;.appendBefore:(Ljava/lang/StringBuilder;)V` @kind virtual;
  #L166d78.  v2:= v3.`com.j256.ormlite.stmt.StatementBuilder.where` @type ^`com.j256.ormlite.stmt.Where` @kind object;
  #L166d7c.  v1:= v3.`com.j256.ormlite.stmt.StatementBuilder.addTableName` @type ^`boolean` @kind boolean;
  #L166d80.  if v1 == 0 then goto L166d9a;
  #L166d84.  call temp:= `getTableName`(v3) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L166d8a.  v1:= temp @kind object;
  #L166d8c.  call `appendSql`(v2, v1, v4, v5) @signature `Lcom/j256/ormlite/stmt/Where;.appendSql:(Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L166d92.  call `appendAfter`(v6, v4) @signature `Lcom/j256/ormlite/stmt/StatementBuilder$WhereOperation;.appendAfter:(Ljava/lang/StringBuilder;)V` @kind virtual;
  #L166d98.  goto L166d70;
  #L166d9a.  v1:= 0I;
  #L166d9c.  goto L166d8c;
}
procedure `java.lang.String` `buildStatementString`(`com.j256.ormlite.stmt.StatementBuilder` v3 @kind this, `java.util.List` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.buildStatementString:(Ljava/util/List;)Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;

  #L166db0.  v0:= new `java.lang.StringBuilder`;
  #L166db4.  v1:= 128I;
  #L166db8.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L166dbe.  call `appendStatementString`(v3, v0, v4) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.appendStatementString:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind virtual;
  #L166dc4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L166dca.  v0:= temp @kind object;
  #L166dcc.  v1:= `@@com.j256.ormlite.stmt.StatementBuilder.logger` @type ^`com.j256.ormlite.logger.Logger` @kind object;
  #L166dd0.  v2:= "built statement {}" @kind object;
  #L166dd4.  call `debug`(v1, v2, v0) @signature `Lcom/j256/ormlite/logger/Logger;.debug:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L166dda.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType`[] `getResultFieldTypes`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.getResultFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L166dec.  v0:= 0I;
  #L166dee.  return v0 @kind object;
}
procedure `java.lang.String` `getTableName`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.getTableName:()Ljava/lang/String;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L166e00.  v0:= v1.`com.j256.ormlite.stmt.StatementBuilder.tableName` @type ^`java.lang.String` @kind object;
  #L166e04.  return v0 @kind object;
}
procedure `com.j256.ormlite.stmt.StatementBuilder$StatementType` `getType`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.getType:()Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;` @AccessFlag  {
    temp;
    v0;

  #L166e18.  v0:= v1.`com.j256.ormlite.stmt.StatementBuilder.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L166e1c.  return v0 @kind object;
}
procedure `com.j256.ormlite.stmt.mapped.MappedPreparedStmt` `prepareStatement`(`com.j256.ormlite.stmt.StatementBuilder` v9 @kind this, `java.lang.Long` v10 @kind object, `boolean` v11 ) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.prepareStatement:(Ljava/lang/Long;Z)Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L166e30.  v0:= new `java.util.ArrayList`;
  #L166e34.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L166e3a.  call temp:= `buildStatementString`(v9, v0) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.buildStatementString:(Ljava/util/List;)Ljava/lang/String;` @kind virtual;
  #L166e40.  v2:= temp @kind object;
  #L166e42.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L166e48.  v1:= temp;
  #L166e4a.  v1:= new `com.j256.ormlite.stmt.ArgumentHolder`[v1];
  #L166e4e.  call temp:= `toArray`(v0, v1) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L166e54.  v5:= temp @kind object;
  #L166e56.  v5:= (`com.j256.ormlite.stmt.ArgumentHolder`[]) v5 @kind object;
  #L166e5a.  call temp:= `getResultFieldTypes`(v9) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.getResultFieldTypes:()[Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L166e60.  v4:= temp @kind object;
  #L166e62.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L166e68.  v0:= temp;
  #L166e6a.  v3:= new `com.j256.ormlite.field.FieldType`[v0];
  #L166e6e.  v0:= 0I;
  #L166e70.  v1:= length @variable v5;
  #L166e72.  if v0 >= v1 then goto L166e8c;
  #L166e76.  v1:= v5[v0] @kind object;
  #L166e7a.  call temp:= `getFieldType`(v1) @signature `Lcom/j256/ormlite/stmt/ArgumentHolder;.getFieldType:()Lcom/j256/ormlite/field/FieldType;` @kind interface;
  #L166e80.  v1:= temp @kind object;
  #L166e82.  v3[v0]:= v1 @kind object;
  #L166e86.  v0:= v0 + 1;
  #L166e8a.  goto L166e70;
  #L166e8c.  v0:= v9.`com.j256.ormlite.stmt.StatementBuilder.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L166e90.  call temp:= `isOkForStatementBuilder`(v0) @signature `Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;.isOkForStatementBuilder:()Z` @kind virtual;
  #L166e96.  v0:= temp;
  #L166e98.  if v0 != 0 then goto L166ede;
  #L166e9c.  v0:= new `java.lang.IllegalStateException`;
  #L166ea0.  v1:= new `java.lang.StringBuilder`;
  #L166ea4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L166eaa.  v2:= "Building a statement from a " @kind object;
  #L166eae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166eb4.  v1:= temp @kind object;
  #L166eb6.  v2:= v9.`com.j256.ormlite.stmt.StatementBuilder.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L166eba.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166ec0.  v1:= temp @kind object;
  #L166ec2.  v2:= " statement is not allowed" @kind object;
  #L166ec6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L166ecc.  v1:= temp @kind object;
  #L166ece.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L166ed4.  v1:= temp @kind object;
  #L166ed6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L166edc.  throw v0;
  #L166ede.  v0:= new `com.j256.ormlite.stmt.mapped.MappedPreparedStmt`;
  #L166ee2.  v1:= v9.`com.j256.ormlite.stmt.StatementBuilder.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L166ee6.  v6:= v9.`com.j256.ormlite.stmt.StatementBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L166eea.  call temp:= `isLimitSqlSupported`(v6) @signature `Lcom/j256/ormlite/db/DatabaseType;.isLimitSqlSupported:()Z` @kind interface;
  #L166ef0.  v6:= temp;
  #L166ef2.  if v6 == 0 then goto L166f06;
  #L166ef6.  v6:= 0I;
  #L166ef8.  v7:= v9.`com.j256.ormlite.stmt.StatementBuilder.type` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L166efc.  v8:= v11;
  #L166efe.  call `<init>`(v0, v1, v2, v3, v4, v5, v6, v7, v8) @signature `Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/stmt/ArgumentHolder;Ljava/lang/Long;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;Z)V` @kind direct;
  #L166f04.  return v0 @kind object;
  #L166f06.  v6:= v10 @kind object;
  #L166f08.  goto L166ef8;
}
procedure `com.j256.ormlite.stmt.StatementBuilder$StatementInfo` `prepareStatementInfo`(`com.j256.ormlite.stmt.StatementBuilder` v4 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.prepareStatementInfo:()Lcom/j256/ormlite/stmt/StatementBuilder$StatementInfo;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L166f1c.  v0:= new `java.util.ArrayList`;
  #L166f20.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L166f26.  call temp:= `buildStatementString`(v4, v0) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.buildStatementString:(Ljava/util/List;)Ljava/lang/String;` @kind virtual;
  #L166f2c.  v1:= temp @kind object;
  #L166f2e.  v2:= new `com.j256.ormlite.stmt.StatementBuilder$StatementInfo`;
  #L166f32.  v3:= 0I;
  #L166f34.  call `<init>`(v2, v1, v0, v3) @signature `Lcom/j256/ormlite/stmt/StatementBuilder$StatementInfo;.<init>:(Ljava/lang/String;Ljava/util/List;Lcom/j256/ormlite/stmt/StatementBuilder$1;)V` @kind direct;
  #L166f3a.  return v2 @kind object;
}
procedure `java.lang.String` `prepareStatementString`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.prepareStatementString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L166f4c.  v0:= new `java.util.ArrayList`;
  #L166f50.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L166f56.  call temp:= `buildStatementString`(v1, v0) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.buildStatementString:(Ljava/util/List;)Ljava/lang/String;` @kind virtual;
  #L166f5c.  v0:= temp @kind object;
  #L166f5e.  return v0 @kind object;
}
procedure `void` `reset`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L166f70.  v0:= 0I;
  #L166f72.  v1.`com.j256.ormlite.stmt.StatementBuilder.where` @type ^`com.j256.ormlite.stmt.Where` := v0 @kind object;
  #L166f76.  return @kind void;
}
procedure `void` `setWhere`(`com.j256.ormlite.stmt.StatementBuilder` v0 @kind this, `com.j256.ormlite.stmt.Where` v1 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.setWhere:(Lcom/j256/ormlite/stmt/Where;)V` @AccessFlag PUBLIC {
    temp;

  #L166f88.  v0.`com.j256.ormlite.stmt.StatementBuilder.where` @type ^`com.j256.ormlite.stmt.Where` := v1 @kind object;
  #L166f8c.  return @kind void;
}
procedure `boolean` `shouldPrependTableNameToColumns`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.shouldPrependTableNameToColumns:()Z` @AccessFlag PROTECTED {
    temp;
    v0;

  #L166fa0.  v0:= 0I;
  #L166fa2.  return v0;
}
procedure `com.j256.ormlite.field.FieldType` `verifyColumnName`(`com.j256.ormlite.stmt.StatementBuilder` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.verifyColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @AccessFlag PROTECTED {
    temp;
    v0;

  #L166fb4.  v0:= v1.`com.j256.ormlite.stmt.StatementBuilder.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L166fb8.  call temp:= `getFieldTypeByColumnName`(v0, v2) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypeByColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L166fbe.  v0:= temp @kind object;
  #L166fc0.  return v0 @kind object;
}
procedure `com.j256.ormlite.stmt.Where` `where`(`com.j256.ormlite.stmt.StatementBuilder` v3 @kind this) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.where:()Lcom/j256/ormlite/stmt/Where;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L166fd4.  v0:= new `com.j256.ormlite.stmt.Where`;
  #L166fd8.  v1:= v3.`com.j256.ormlite.stmt.StatementBuilder.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L166fdc.  v2:= v3.`com.j256.ormlite.stmt.StatementBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L166fe0.  call `<init>`(v0, v1, v3, v2) @signature `Lcom/j256/ormlite/stmt/Where;.<init>:(Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/stmt/StatementBuilder;Lcom/j256/ormlite/db/DatabaseType;)V` @kind direct;
  #L166fe6.  v3.`com.j256.ormlite.stmt.StatementBuilder.where` @type ^`com.j256.ormlite.stmt.Where` := v0 @kind object;
  #L166fea.  v0:= v3.`com.j256.ormlite.stmt.StatementBuilder.where` @type ^`com.j256.ormlite.stmt.Where` @kind object;
  #L166fee.  return v0 @kind object;
}
