record `com.j256.ormlite.field.types.BooleanIntegerType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BooleanType` @kind class {
}
global `java.lang.Integer` `@@com.j256.ormlite.field.types.BooleanIntegerType.FALSE_VALUE` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Integer` `@@com.j256.ormlite.field.types.BooleanIntegerType.TRUE_VALUE` @AccessFlag PRIVATE_STATIC_FINAL;
global `com.j256.ormlite.field.types.BooleanIntegerType` `@@com.j256.ormlite.field.types.BooleanIntegerType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L1614e4.  v0:= 1I;
  #L1614e6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1614ec.  v0:= temp @kind object;
  #L1614ee.  `@@com.j256.ormlite.field.types.BooleanIntegerType.TRUE_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L1614f2.  v0:= 0I;
  #L1614f4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1614fa.  v0:= temp @kind object;
  #L1614fc.  `@@com.j256.ormlite.field.types.BooleanIntegerType.FALSE_VALUE` @type ^`java.lang.Integer` := v0 @kind object;
  #L161500.  v0:= new `com.j256.ormlite.field.types.BooleanIntegerType`;
  #L161504.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.<init>:()V` @kind direct;
  #L16150a.  `@@com.j256.ormlite.field.types.BooleanIntegerType.singleTon` @type ^`com.j256.ormlite.field.types.BooleanIntegerType` := v0 @kind object;
  #L16150e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BooleanIntegerType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L161520.  v0:= `@@com.j256.ormlite.field.SqlType.INTEGER` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L161524.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BooleanType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L16152a.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BooleanIntegerType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.getSingleton:()Lcom/j256/ormlite/field/types/BooleanIntegerType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L16153c.  v0:= `@@com.j256.ormlite.field.types.BooleanIntegerType.singleTon` @type ^`com.j256.ormlite.field.types.BooleanIntegerType` @kind object;
  #L161540.  return v0 @kind object;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.BooleanIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L161554.  v3:= (`java.lang.Boolean`) v3 @kind object;
  #L161558.  call temp:= `booleanValue`(v3) @signature `Ljava/lang/Boolean;.booleanValue:()Z` @kind virtual;
  #L16155e.  v0:= temp;
  #L161560.  if v0 == 0 then goto L16156a;
  #L161564.  v0:= `@@com.j256.ormlite.field.types.BooleanIntegerType.TRUE_VALUE` @type ^`java.lang.Integer` @kind object;
  #L161568.  return v0 @kind object;
  #L16156a.  v0:= `@@com.j256.ormlite.field.types.BooleanIntegerType.FALSE_VALUE` @type ^`java.lang.Integer` @kind object;
  #L16156e.  goto L161568;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.BooleanIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L161580.  call temp:= `parseBoolean`(v3) @signature `Ljava/lang/Boolean;.parseBoolean:(Ljava/lang/String;)Z` @kind static;
  #L161586.  v0:= temp;
  #L161588.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Boolean;.valueOf:(Z)Ljava/lang/Boolean;` @kind static;
  #L16158e.  v0:= temp @kind object;
  #L161590.  call temp:= `javaToSqlArg`(v1, v2, v0) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L161596.  v0:= temp @kind object;
  #L161598.  return v0 @kind object;
}
procedure `java.lang.Object` `resultStringToJava`(`com.j256.ormlite.field.types.BooleanIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.resultStringToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1615ac.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1615b2.  v0:= temp;
  #L1615b4.  if v0 != 0 then goto L1615be;
  #L1615b8.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L1615bc.  return v0 @kind object;
  #L1615be.  call temp:= `parseInt`(v3) @signature `Ljava/lang/Integer;.parseInt:(Ljava/lang/String;)I` @kind static;
  #L1615c4.  v0:= temp;
  #L1615c6.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1615cc.  v0:= temp @kind object;
  #L1615ce.  call temp:= `sqlArgToJava`(v1, v2, v0, v4) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L1615d4.  v0:= temp @kind object;
  #L1615d6.  goto L1615bc;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.BooleanIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1615e8.  call temp:= `getInt`(v3, v4) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getInt:(I)I` @kind interface;
  #L1615ee.  v0:= temp;
  #L1615f0.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L1615f6.  v0:= temp @kind object;
  #L1615f8.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.BooleanIntegerType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/BooleanIntegerType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16160c.  v3:= (`java.lang.Integer`) v3 @kind object;
  #L161610.  call temp:= `intValue`(v3) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L161616.  v0:= temp;
  #L161618.  if v0 != 0 then goto L161622;
  #L16161c.  v0:= `@@java.lang.Boolean.FALSE` @type ^`java.lang.Boolean` @kind object;
  #L161620.  return v0 @kind object;
  #L161622.  v0:= `@@java.lang.Boolean.TRUE` @type ^`java.lang.Boolean` @kind object;
  #L161626.  goto L161620;
}
