record `com.j256.ormlite.field.types.BaseDateType` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` `@@com.j256.ormlite.field.types.BaseDateType.defaultDateFormatConfig` @AccessFlag PROTECTED_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L16099c.  v0:= new `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig`;
  #L1609a0.  v1:= "yyyy-MM-dd HH:mm:ss.SSSSSS" @kind object;
  #L1609a4.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1609aa.  `@@com.j256.ormlite.field.types.BaseDateType.defaultDateFormatConfig` @type ^`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` := v0 @kind object;
  #L1609ae.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BaseDateType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L1609c0.  call `<init>`(v0, v1) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L1609c6.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.BaseDateType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L1609d8.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L1609de.  return @kind void;
}
procedure `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` `convertDateStringConfig`(`com.j256.ormlite.field.FieldType` v1 @kind object, `com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.convertDateStringConfig:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;)Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;

  #L1609f0.  if v1 != 0 then goto L1609f6;
  #L1609f4.  return v2 @kind object;
  #L1609f6.  call temp:= `getDataTypeConfigObj`(v1) @signature `Lcom/j256/ormlite/field/FieldType;.getDataTypeConfigObj:()Ljava/lang/Object;` @kind virtual;
  #L1609fc.  v0:= temp @kind object;
  #L1609fe.  v0:= (`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig`) v0 @kind object;
  #L160a02.  if v0 == 0 then goto L1609f4;
  #L160a06.  v2:= v0 @kind object;
  #L160a08.  goto L1609f4;
}
procedure `java.lang.String` `normalizeDateString`(`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.normalizeDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;
    v1;

  #L160a1c.  call temp:= `getDateFormat`(v2) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.getDateFormat:()Ljava/text/DateFormat;` @kind virtual;
  #L160a22.  v0:= temp @kind object;
  #L160a24.  call temp:= `parse`(v0, v3) @signature `Ljava/text/DateFormat;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L160a2a.  v1:= temp @kind object;
  #L160a2c.  call temp:= `format`(v0, v1) @signature `Ljava/text/DateFormat;.format:(Ljava/util/Date;)Ljava/lang/String;` @kind virtual;
  #L160a32.  v0:= temp @kind object;
  #L160a34.  return v0 @kind object;
}
procedure `java.util.Date` `parseDateString`(`com.j256.ormlite.field.types.BaseDateType$DateStringFormatConfig` v1 @kind object, `java.lang.String` v2 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.parseDateString:(Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;Ljava/lang/String;)Ljava/util/Date;` @AccessFlag PROTECTED_STATIC {
    temp;
    v0;

  #L160a48.  call temp:= `getDateFormat`(v1) @signature `Lcom/j256/ormlite/field/types/BaseDateType$DateStringFormatConfig;.getDateFormat:()Ljava/text/DateFormat;` @kind virtual;
  #L160a4e.  v0:= temp @kind object;
  #L160a50.  call temp:= `parse`(v0, v2) @signature `Ljava/text/DateFormat;.parse:(Ljava/lang/String;)Ljava/util/Date;` @kind virtual;
  #L160a56.  v0:= temp @kind object;
  #L160a58.  return v0 @kind object;
}
procedure `boolean` `isValidForField`(`com.j256.ormlite.field.types.BaseDateType` v2 @kind this, `java.lang.reflect.Field` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.isValidForField:(Ljava/lang/reflect/Field;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L160a6c.  call temp:= `getType`(v3) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L160a72.  v0:= temp @kind object;
  #L160a74.  v1:= constclass @type ^`java.util.Date` @kind object;
  #L160a78.  if v0 != v1 then goto L160a80;
  #L160a7c.  v0:= 1I;
  #L160a7e.  return v0;
  #L160a80.  v0:= 0I;
  #L160a82.  goto L160a7e;
}
procedure `boolean` `isValidForVersion`(`com.j256.ormlite.field.types.BaseDateType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.isValidForVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L160a94.  v0:= 1I;
  #L160a96.  return v0;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.BaseDateType` v6 @kind this, `java.lang.Object` v7 @kind object) @signature `Lcom/j256/ormlite/field/types/BaseDateType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L160aa8.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L160aae.  v2:= temp @kind wide;
  #L160ab0.  if v7 != 0 then goto L160ac0;
  #L160ab4.  v0:= new `java.util.Date`;
  #L160ab8.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L160abe.  return v0 @kind object;
  #L160ac0.  v7:= (`java.util.Date`) v7 @kind object;
  #L160ac4.  call temp:= `getTime`(v7) @signature `Ljava/util/Date;.getTime:()J` @kind virtual;
  #L160aca.  v0:= temp @kind wide;
  #L160acc.  v0:= lcmp(v2, v0);
  #L160ad0.  if v0 != 0 then goto L160ae6;
  #L160ad4.  v0:= new `java.util.Date`;
  #L160ad8.  v4:= 1L;
  #L160adc.  v2:= v2 + v4 @kind long;
  #L160ade.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L160ae4.  goto L160abe;
  #L160ae6.  v0:= new `java.util.Date`;
  #L160aea.  call `<init>`(v0, v2) @signature `Ljava/util/Date;.<init>:(J)V` @kind direct;
  #L160af0.  goto L160abe;
}
