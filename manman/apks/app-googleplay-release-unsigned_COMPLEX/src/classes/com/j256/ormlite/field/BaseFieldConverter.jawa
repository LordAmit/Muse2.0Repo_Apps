record `com.j256.ormlite.field.BaseFieldConverter` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.field.FieldConverter` @kind interface {
}
procedure `void` `<init>`(`com.j256.ormlite.field.BaseFieldConverter` v0 @kind this) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L15a3b4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L15a3ba.  return @kind void;
}
procedure `boolean` `isStreamType`(`com.j256.ormlite.field.BaseFieldConverter` v1 @kind this) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.isStreamType:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a3cc.  v0:= 0I;
  #L15a3ce.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.BaseFieldConverter` v0 @kind this, `com.j256.ormlite.field.FieldType` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L15a3e0.  return v2 @kind object;
}
procedure `java.lang.Object` `resultToJava`(`com.j256.ormlite.field.BaseFieldConverter` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `com.j256.ormlite.support.DatabaseResults` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.resultToJava:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15a3f4.  call temp:= `resultToSqlArg`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @kind virtual;
  #L15a3fa.  v0:= temp @kind object;
  #L15a3fc.  if v0 != 0 then goto L15a404;
  #L15a400.  v0:= 0I;
  #L15a402.  return v0 @kind object;
  #L15a404.  call temp:= `sqlArgToJava`(v1, v2, v0, v4) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @kind virtual;
  #L15a40a.  v0:= temp @kind object;
  #L15a40c.  goto L15a402;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.BaseFieldConverter` v0 @kind this, `com.j256.ormlite.field.FieldType` v1 @kind object, `java.lang.Object` v2 @kind object, `int` v3 ) @signature `Lcom/j256/ormlite/field/BaseFieldConverter;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;

  #L15a420.  return v2 @kind object;
}
