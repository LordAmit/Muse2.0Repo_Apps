record `com.j256.ormlite.stmt.UpdateBuilder` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.stmt.StatementBuilder` @kind class {
  `java.util.List` `com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `com.j256.ormlite.db.DatabaseType` v2 @kind object, `com.j256.ormlite.table.TableInfo` v3 @kind object, `com.j256.ormlite.dao.Dao` v4 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.<init>:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/dao/Dao;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L16aa14.  v0:= `@@com.j256.ormlite.stmt.StatementBuilder$StatementType.UPDATE` @type ^`com.j256.ormlite.stmt.StatementBuilder$StatementType` @kind object;
  #L16aa18.  call `<init>`(v1, v2, v3, v4, v0) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.<init>:(Lcom/j256/ormlite/db/DatabaseType;Lcom/j256/ormlite/table/TableInfo;Lcom/j256/ormlite/dao/Dao;Lcom/j256/ormlite/stmt/StatementBuilder$StatementType;)V` @kind direct;
  #L16aa1e.  v0:= 0I;
  #L16aa20.  v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` := v0 @kind object;
  #L16aa24.  return @kind void;
}
procedure `void` `addUpdateColumnToList`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `java.lang.String` v2 @kind object, `com.j256.ormlite.stmt.query.Clause` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.addUpdateColumnToList:(Ljava/lang/String;Lcom/j256/ormlite/stmt/query/Clause;)V` @AccessFlag PRIVATE {
    temp;
    v0;

  #L16aa38.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L16aa3c.  if v0 != 0 then goto L16aa4e;
  #L16aa40.  v0:= new `java.util.ArrayList`;
  #L16aa44.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L16aa4a.  v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` := v0 @kind object;
  #L16aa4e.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L16aa52.  call temp:= `add`(v0, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L16aa58.  return @kind void;
}
procedure `void` `appendStatementEnd`(`com.j256.ormlite.stmt.UpdateBuilder` v0 @kind this, `java.lang.StringBuilder` v1 @kind object, `java.util.List` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.appendStatementEnd:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;

  #L16aa6c.  return @kind void;
}
procedure `void` `appendStatementStart`(`com.j256.ormlite.stmt.UpdateBuilder` v5 @kind this, `java.lang.StringBuilder` v6 @kind object, `java.util.List` v7 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.appendStatementStart:(Ljava/lang/StringBuilder;Ljava/util/List;)V` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L16aa80.  v0:= v5.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L16aa84.  if v0 == 0 then goto L16aa98;
  #L16aa88.  v0:= v5.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L16aa8c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L16aa92.  v0:= temp;
  #L16aa94.  if v0 == 0 then goto L16aaa8;
  #L16aa98.  v0:= new `java.lang.IllegalArgumentException`;
  #L16aa9c.  v1:= "UPDATE statements must have at least one SET column" @kind object;
  #L16aaa0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16aaa6.  throw v0;
  #L16aaa8.  v0:= "UPDATE " @kind object;
  #L16aaac.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16aab2.  v0:= v5.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L16aab6.  v1:= v5.`com.j256.ormlite.stmt.UpdateBuilder.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L16aaba.  call temp:= `getTableName`(v1) @signature `Lcom/j256/ormlite/table/TableInfo;.getTableName:()Ljava/lang/String;` @kind virtual;
  #L16aac0.  v1:= temp @kind object;
  #L16aac2.  call `appendEscapedEntityName`(v0, v6, v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L16aac8.  v0:= " SET " @kind object;
  #L16aacc.  call temp:= `append`(v6, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16aad2.  v0:= 1I;
  #L16aad4.  v1:= v5.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` @kind object;
  #L16aad8.  call temp:= `iterator`(v1) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L16aade.  v2:= temp @kind object;
  #L16aae0.  v1:= v0;
  #L16aae2.  call temp:= `hasNext`(v2) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L16aae8.  v0:= temp;
  #L16aaea.  if v0 == 0 then goto L16ab1a;
  #L16aaee.  call temp:= `next`(v2) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L16aaf4.  v0:= temp @kind object;
  #L16aaf6.  v0:= (`com.j256.ormlite.stmt.query.Clause`) v0 @kind object;
  #L16aafa.  if v1 == 0 then goto L16ab0e;
  #L16aafe.  v1:= 0I;
  #L16ab00.  v3:= v5.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L16ab04.  v4:= 0I;
  #L16ab06.  call `appendSql`(v0, v3, v4, v6, v7) @signature `Lcom/j256/ormlite/stmt/query/Clause;.appendSql:(Lcom/j256/ormlite/db/DatabaseType;Ljava/lang/String;Ljava/lang/StringBuilder;Ljava/util/List;)V` @kind interface;
  #L16ab0c.  goto L16aae2;
  #L16ab0e.  v3:= 44I;
  #L16ab12.  call temp:= `append`(v6, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ab18.  goto L16ab00;
  #L16ab1a.  return @kind void;
}
procedure `java.lang.String` `escapeColumnName`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeColumnName:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16ab2c.  v0:= new `java.lang.StringBuilder`;
  #L16ab30.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L16ab36.  v1:= temp;
  #L16ab38.  v1:= v1 + 4;
  #L16ab3c.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L16ab42.  v1:= v2.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L16ab46.  call `appendEscapedEntityName`(v1, v0, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L16ab4c.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16ab52.  v0:= temp @kind object;
  #L16ab54.  return v0 @kind object;
}
procedure `void` `escapeColumnName`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeColumnName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16ab68.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L16ab6c.  call `appendEscapedEntityName`(v0, v2, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedEntityName:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L16ab72.  return @kind void;
}
procedure `java.lang.String` `escapeValue`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeValue:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16ab84.  v0:= new `java.lang.StringBuilder`;
  #L16ab88.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L16ab8e.  v1:= temp;
  #L16ab90.  v1:= v1 + 4;
  #L16ab94.  call `<init>`(v0, v1) @signature `Ljava/lang/StringBuilder;.<init>:(I)V` @kind direct;
  #L16ab9a.  v1:= v2.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L16ab9e.  call `appendEscapedWord`(v1, v0, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L16aba4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16abaa.  v0:= temp @kind object;
  #L16abac.  return v0 @kind object;
}
procedure `void` `escapeValue`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this, `java.lang.StringBuilder` v2 @kind object, `java.lang.String` v3 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.escapeValue:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16abc0.  v0:= v1.`com.j256.ormlite.stmt.UpdateBuilder.databaseType` @type ^`com.j256.ormlite.db.DatabaseType` @kind object;
  #L16abc4.  call `appendEscapedWord`(v0, v2, v3) @signature `Lcom/j256/ormlite/db/DatabaseType;.appendEscapedWord:(Ljava/lang/StringBuilder;Ljava/lang/String;)V` @kind interface;
  #L16abca.  return @kind void;
}
procedure `com.j256.ormlite.stmt.PreparedUpdate` `prepare`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.prepare:()Lcom/j256/ormlite/stmt/PreparedUpdate;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16abdc.  v0:= 0I;
  #L16abde.  v1:= 0I;
  #L16abe0.  call temp:= `prepareStatement`(v2, v0, v1) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.prepareStatement:(Ljava/lang/Long;Z)Lcom/j256/ormlite/stmt/mapped/MappedPreparedStmt;` @kind super;
  #L16abe6.  v0:= temp @kind object;
  #L16abe8.  return v0 @kind object;
}
procedure `void` `reset`(`com.j256.ormlite.stmt.UpdateBuilder` v1 @kind this) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.reset:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16abfc.  call `reset`(v1) @signature `Lcom/j256/ormlite/stmt/StatementBuilder;.reset:()V` @kind super;
  #L16ac02.  v0:= 0I;
  #L16ac04.  v1.`com.j256.ormlite.stmt.UpdateBuilder.updateClauseList` @type ^`java.util.List` := v0 @kind object;
  #L16ac08.  return @kind void;
}
procedure `int` `update`(`com.j256.ormlite.stmt.UpdateBuilder` v2 @kind this) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.update:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16ac1c.  v0:= v2.`com.j256.ormlite.stmt.UpdateBuilder.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L16ac20.  call temp:= `prepare`(v2) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.prepare:()Lcom/j256/ormlite/stmt/PreparedUpdate;` @kind virtual;
  #L16ac26.  v1:= temp @kind object;
  #L16ac28.  call temp:= `update`(v0, v1) @signature `Lcom/j256/ormlite/dao/Dao;.update:(Lcom/j256/ormlite/stmt/PreparedUpdate;)I` @kind interface;
  #L16ac2e.  v0:= temp;
  #L16ac30.  return v0;
}
procedure `com.j256.ormlite.stmt.UpdateBuilder` `updateColumnExpression`(`com.j256.ormlite.stmt.UpdateBuilder` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.updateColumnExpression:(Ljava/lang/String;Ljava/lang/String;)Lcom/j256/ormlite/stmt/UpdateBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16ac44.  call temp:= `verifyColumnName`(v3, v4) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.verifyColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16ac4a.  v0:= temp @kind object;
  #L16ac4c.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L16ac52.  v1:= temp;
  #L16ac54.  if v1 == 0 then goto L16ac8a;
  #L16ac58.  v0:= new `java.sql.SQLException`;
  #L16ac5c.  v1:= new `java.lang.StringBuilder`;
  #L16ac60.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16ac66.  v2:= "Can't update foreign colletion field: " @kind object;
  #L16ac6a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ac70.  v1:= temp @kind object;
  #L16ac72.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ac78.  v1:= temp @kind object;
  #L16ac7a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16ac80.  v1:= temp @kind object;
  #L16ac82.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16ac88.  throw v0;
  #L16ac8a.  v1:= new `com.j256.ormlite.stmt.query.SetExpression`;
  #L16ac8e.  call `<init>`(v1, v4, v0, v5) @signature `Lcom/j256/ormlite/stmt/query/SetExpression;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)V` @kind direct;
  #L16ac94.  call `addUpdateColumnToList`(v3, v4, v1) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.addUpdateColumnToList:(Ljava/lang/String;Lcom/j256/ormlite/stmt/query/Clause;)V` @kind direct;
  #L16ac9a.  return v3 @kind object;
}
procedure `com.j256.ormlite.stmt.UpdateBuilder` `updateColumnValue`(`com.j256.ormlite.stmt.UpdateBuilder` v3 @kind this, `java.lang.String` v4 @kind object, `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.updateColumnValue:(Ljava/lang/String;Ljava/lang/Object;)Lcom/j256/ormlite/stmt/UpdateBuilder;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16acac.  call temp:= `verifyColumnName`(v3, v4) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.verifyColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L16acb2.  v0:= temp @kind object;
  #L16acb4.  call temp:= `isForeignCollection`(v0) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L16acba.  v1:= temp;
  #L16acbc.  if v1 == 0 then goto L16acf2;
  #L16acc0.  v0:= new `java.sql.SQLException`;
  #L16acc4.  v1:= new `java.lang.StringBuilder`;
  #L16acc8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16acce.  v2:= "Can't update foreign colletion field: " @kind object;
  #L16acd2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16acd8.  v1:= temp @kind object;
  #L16acda.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ace0.  v1:= temp @kind object;
  #L16ace2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16ace8.  v1:= temp @kind object;
  #L16acea.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16acf0.  throw v0;
  #L16acf2.  v1:= new `com.j256.ormlite.stmt.query.SetValue`;
  #L16acf6.  call `<init>`(v1, v4, v0, v5) @signature `Lcom/j256/ormlite/stmt/query/SetValue;.<init>:(Ljava/lang/String;Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)V` @kind direct;
  #L16acfc.  call `addUpdateColumnToList`(v3, v4, v1) @signature `Lcom/j256/ormlite/stmt/UpdateBuilder;.addUpdateColumnToList:(Ljava/lang/String;Lcom/j256/ormlite/stmt/query/Clause;)V` @kind direct;
  #L16ad02.  return v3 @kind object;
}
