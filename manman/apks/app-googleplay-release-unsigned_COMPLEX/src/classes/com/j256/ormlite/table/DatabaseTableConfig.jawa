record `com.j256.ormlite.table.DatabaseTableConfig` @kind class @AccessFlag PUBLIC {
  `java.lang.reflect.Constructor` `com.j256.ormlite.table.DatabaseTableConfig.constructor` @AccessFlag PRIVATE;
  `java.lang.Class` `com.j256.ormlite.table.DatabaseTableConfig.dataClass` @AccessFlag PRIVATE;
  `java.util.List` `com.j256.ormlite.table.DatabaseTableConfig.fieldConfigs` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType`[] `com.j256.ormlite.table.DatabaseTableConfig.fieldTypes` @AccessFlag PRIVATE;
  `java.lang.String` `com.j256.ormlite.table.DatabaseTableConfig.tableName` @AccessFlag PRIVATE;
}
global `com.j256.ormlite.misc.JavaxPersistenceConfigurer` `@@com.j256.ormlite.table.DatabaseTableConfig.javaxPersistenceConfigurer` @AccessFlag PRIVATE_STATIC;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L16eafc.  v0:= "javax.persistence.Entity" @kind object;
  #L16eb00.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L16eb06.  v0:= "com.j256.ormlite.misc.JavaxPersistenceImpl" @kind object;
  #L16eb0a.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L16eb10.  v0:= temp @kind object;
  #L16eb12.  v1:= 0I;
  #L16eb14.  v1:= new `java.lang.Class`[v1];
  #L16eb18.  call temp:= `getConstructor`(v0, v1) @signature `Ljava/lang/Class;.getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L16eb1e.  v0:= temp @kind object;
  #L16eb20.  v1:= 0I;
  #L16eb22.  v1:= new `java.lang.Object`[v1];
  #L16eb26.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16eb2c.  v0:= temp @kind object;
  #L16eb2e.  v0:= (`com.j256.ormlite.misc.JavaxPersistenceConfigurer`) v0 @kind object;
  #L16eb32.  `@@com.j256.ormlite.table.DatabaseTableConfig.javaxPersistenceConfigurer` @type ^`com.j256.ormlite.misc.JavaxPersistenceConfigurer` := v0 @kind object;
  #Try_end0.  
  #L16eb36.  return @kind void;
  #L16eb38.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L16eb3a.  v0:= 0I;
  #L16eb3c.  `@@com.j256.ormlite.table.DatabaseTableConfig.javaxPersistenceConfigurer` @type ^`com.j256.ormlite.misc.JavaxPersistenceConfigurer` := v0 @kind object;
  #L16eb40.  goto L16eb36;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L16eb38;
}
procedure `void` `<init>`(`com.j256.ormlite.table.DatabaseTableConfig` v0 @kind this) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L16eb64.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L16eb6a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.table.DatabaseTableConfig` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.<init>:(Ljava/lang/Class;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L16eb7c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L16eb82.  v0.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` := v1 @kind object;
  #L16eb86.  v0.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` := v2 @kind object;
  #L16eb8a.  v0.`com.j256.ormlite.table.DatabaseTableConfig.fieldConfigs` @type ^`java.util.List` := v3 @kind object;
  #L16eb8e.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.table.DatabaseTableConfig` v0 @kind this, `java.lang.Class` v1 @kind object, `java.lang.String` v2 @kind object, `com.j256.ormlite.field.FieldType`[] v3 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L16eba0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L16eba6.  v0.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` := v1 @kind object;
  #L16ebaa.  v0.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` := v2 @kind object;
  #L16ebae.  v0.`com.j256.ormlite.table.DatabaseTableConfig.fieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] := v3 @kind object;
  #L16ebb2.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.table.DatabaseTableConfig` v1 @kind this, `java.lang.Class` v2 @kind object, `java.util.List` v3 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.<init>:(Ljava/lang/Class;Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L16ebc4.  call temp:= `extractTableName`(v2) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractTableName:(Ljava/lang/Class;)Ljava/lang/String;` @kind static;
  #L16ebca.  v0:= temp @kind object;
  #L16ebcc.  call `<init>`(v1, v2, v0, v3) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.<init>:(Ljava/lang/Class;Ljava/lang/String;Ljava/util/List;)V` @kind direct;
  #L16ebd2.  return @kind void;
}
procedure `com.j256.ormlite.field.FieldType`[] `convertFieldConfigs`(`com.j256.ormlite.table.DatabaseTableConfig` v8 @kind this, `com.j256.ormlite.support.ConnectionSource` v9 @kind object, `java.lang.String` v10 @kind object, `java.util.List` v11 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.convertFieldConfigs:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/util/List;)[Lcom/j256/ormlite/field/FieldType;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L16ebe4.  v6:= new `java.util.ArrayList`;
  #L16ebe8.  call `<init>`(v6) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L16ebee.  call temp:= `iterator`(v11) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L16ebf4.  v7:= temp @kind object;
  #L16ebf6.  call temp:= `hasNext`(v7) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L16ebfc.  v0:= temp;
  #L16ebfe.  if v0 == 0 then goto L16eca8;
  #L16ec02.  call temp:= `next`(v7) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L16ec08.  v4:= temp @kind object;
  #L16ec0a.  v4:= (`com.j256.ormlite.field.DatabaseFieldConfig`) v4 @kind object;
  #L16ec0e.  v0:= 0I;
  #L16ec10.  v1:= v8.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L16ec14.  if v1 == 0 then goto L16ec3e;
  #Try_start0.  
  #L16ec18.  call temp:= `getFieldName`(v4) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getFieldName:()Ljava/lang/String;` @kind virtual;
  #L16ec1e.  v2:= temp @kind object;
  #L16ec20.  call temp:= `getDeclaredField`(v1, v2) @signature `Ljava/lang/Class;.getDeclaredField:(Ljava/lang/String;)Ljava/lang/reflect/Field;` @kind virtual;
  #Try_end0.  
  #L16ec26.  v3:= temp @kind object;
  #L16ec28.  if v3 == 0 then goto L16ec96;
  #L16ec2c.  v0:= new `com.j256.ormlite.field.FieldType`;
  #L16ec30.  v5:= v8.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L16ec34.  v1:= v9 @kind object;
  #L16ec36.  v2:= v10 @kind object;
  #L16ec38.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/j256/ormlite/field/FieldType;.<init>:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Lcom/j256/ormlite/field/DatabaseFieldConfig;Ljava/lang/Class;)V` @kind direct;
  #L16ec3e.  if v0 != 0 then goto L16eca0;
  #L16ec42.  v0:= new `java.sql.SQLException`;
  #L16ec46.  v1:= new `java.lang.StringBuilder`;
  #L16ec4a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16ec50.  v2:= "Could not find declared field with name '" @kind object;
  #L16ec54.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ec5a.  v1:= temp @kind object;
  #L16ec5c.  call temp:= `getFieldName`(v4) @signature `Lcom/j256/ormlite/field/DatabaseFieldConfig;.getFieldName:()Ljava/lang/String;` @kind virtual;
  #L16ec62.  v2:= temp @kind object;
  #L16ec64.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ec6a.  v1:= temp @kind object;
  #L16ec6c.  v2:= "' for " @kind object;
  #L16ec70.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ec76.  v1:= temp @kind object;
  #L16ec78.  v2:= v8.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L16ec7c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ec82.  v1:= temp @kind object;
  #L16ec84.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16ec8a.  v1:= temp @kind object;
  #L16ec8c.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16ec92.  throw v0;
  #L16ec94.  v2:= Exception @type ^`java.lang.NoSuchFieldException` @kind object;
  #L16ec96.  call temp:= `getSuperclass`(v1) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L16ec9c.  v1:= temp @kind object;
  #L16ec9e.  goto L16ec14;
  #L16eca0.  call temp:= `add`(v6, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L16eca6.  goto L16ebf6;
  #L16eca8.  call temp:= `isEmpty`(v6) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L16ecae.  v0:= temp;
  #L16ecb0.  if v0 == 0 then goto L16ecea;
  #L16ecb4.  v0:= new `java.sql.SQLException`;
  #L16ecb8.  v1:= new `java.lang.StringBuilder`;
  #L16ecbc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16ecc2.  v2:= "No fields were configured for class " @kind object;
  #L16ecc6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16eccc.  v1:= temp @kind object;
  #L16ecce.  v2:= v8.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L16ecd2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ecd8.  v1:= temp @kind object;
  #L16ecda.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16ece0.  v1:= temp @kind object;
  #L16ece2.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16ece8.  throw v0;
  #L16ecea.  call temp:= `size`(v6) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L16ecf0.  v0:= temp;
  #L16ecf2.  v0:= new `com.j256.ormlite.field.FieldType`[v0];
  #L16ecf6.  call temp:= `toArray`(v6, v0) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L16ecfc.  v0:= temp @kind object;
  #L16ecfe.  v0:= (`com.j256.ormlite.field.FieldType`[]) v0 @kind object;
  #L16ed02.  return v0 @kind object;
  catch `java.lang.NoSuchFieldException` @[Try_start0..Try_end0] goto L16ec94;
}
procedure `com.j256.ormlite.field.FieldType`[] `extractFieldTypes`(`com.j256.ormlite.support.ConnectionSource` v6 @kind object, `java.lang.Class` v7 @kind object, `java.lang.String` v8 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;Ljava/lang/String;)[Lcom/j256/ormlite/field/FieldType;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L16ed24.  v2:= new `java.util.ArrayList`;
  #L16ed28.  call `<init>`(v2) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L16ed2e.  v1:= v7 @kind object;
  #L16ed30.  if v1 == 0 then goto L16ed6c;
  #L16ed34.  call temp:= `getDeclaredFields`(v1) @signature `Ljava/lang/Class;.getDeclaredFields:()[Ljava/lang/reflect/Field;` @kind virtual;
  #L16ed3a.  v3:= temp @kind object;
  #L16ed3c.  v4:= length @variable v3;
  #L16ed3e.  v0:= 0I;
  #L16ed40.  if v0 >= v4 then goto L16ed60;
  #L16ed44.  v5:= v3[v0] @kind object;
  #L16ed48.  call temp:= `createFieldType`(v6, v8, v5, v7) @signature `Lcom/j256/ormlite/field/FieldType;.createFieldType:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/lang/reflect/Field;Ljava/lang/Class;)Lcom/j256/ormlite/field/FieldType;` @kind static;
  #L16ed4e.  v5:= temp @kind object;
  #L16ed50.  if v5 == 0 then goto L16ed5a;
  #L16ed54.  call temp:= `add`(v2, v5) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L16ed5a.  v0:= v0 + 1;
  #L16ed5e.  goto L16ed40;
  #L16ed60.  call temp:= `getSuperclass`(v1) @signature `Ljava/lang/Class;.getSuperclass:()Ljava/lang/Class;` @kind virtual;
  #L16ed66.  v0:= temp @kind object;
  #L16ed68.  v1:= v0 @kind object;
  #L16ed6a.  goto L16ed30;
  #L16ed6c.  call temp:= `isEmpty`(v2) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L16ed72.  v0:= temp;
  #L16ed74.  if v0 == 0 then goto L16edca;
  #L16ed78.  v0:= new `java.lang.IllegalArgumentException`;
  #L16ed7c.  v1:= new `java.lang.StringBuilder`;
  #L16ed80.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16ed86.  v2:= "No fields have a " @kind object;
  #L16ed8a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ed90.  v1:= temp @kind object;
  #L16ed92.  v2:= constclass @type ^`com.j256.ormlite.field.DatabaseField` @kind object;
  #L16ed96.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L16ed9c.  v2:= temp @kind object;
  #L16ed9e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16eda4.  v1:= temp @kind object;
  #L16eda6.  v2:= " annotation in " @kind object;
  #L16edaa.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16edb0.  v1:= temp @kind object;
  #L16edb2.  call temp:= `append`(v1, v7) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16edb8.  v1:= temp @kind object;
  #L16edba.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16edc0.  v1:= temp @kind object;
  #L16edc2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16edc8.  throw v0;
  #L16edca.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L16edd0.  v0:= temp;
  #L16edd2.  v0:= new `com.j256.ormlite.field.FieldType`[v0];
  #L16edd6.  call temp:= `toArray`(v2, v0) @signature `Ljava/util/List;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L16eddc.  v0:= temp @kind object;
  #L16edde.  v0:= (`com.j256.ormlite.field.FieldType`[]) v0 @kind object;
  #L16ede2.  return v0 @kind object;
}
procedure `java.lang.String` `extractTableName`(`java.lang.Class` v3 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractTableName:(Ljava/lang/Class;)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L16edf4.  v0:= constclass @type ^`com.j256.ormlite.table.DatabaseTable` @kind object;
  #L16edf8.  call temp:= `getAnnotation`(v3, v0) @signature `Ljava/lang/Class;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L16edfe.  v0:= temp @kind object;
  #L16ee00.  v0:= (`com.j256.ormlite.table.DatabaseTable`) v0 @kind object;
  #L16ee04.  v1:= 0I;
  #L16ee06.  if v0 == 0 then goto L16ee60;
  #L16ee0a.  call temp:= `tableName`(v0) @signature `Lcom/j256/ormlite/table/DatabaseTable;.tableName:()Ljava/lang/String;` @kind interface;
  #L16ee10.  v2:= temp @kind object;
  #L16ee12.  if v2 == 0 then goto L16ee60;
  #L16ee16.  call temp:= `tableName`(v0) @signature `Lcom/j256/ormlite/table/DatabaseTable;.tableName:()Ljava/lang/String;` @kind interface;
  #L16ee1c.  v2:= temp @kind object;
  #L16ee1e.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L16ee24.  v2:= temp;
  #L16ee26.  if v2 <= 0 then goto L16ee60;
  #L16ee2a.  call temp:= `tableName`(v0) @signature `Lcom/j256/ormlite/table/DatabaseTable;.tableName:()Ljava/lang/String;` @kind interface;
  #L16ee30.  v0:= temp @kind object;
  #L16ee32.  if v0 != 0 then goto L16ee4a;
  #L16ee36.  v1:= `@@com.j256.ormlite.table.DatabaseTableConfig.javaxPersistenceConfigurer` @type ^`com.j256.ormlite.misc.JavaxPersistenceConfigurer` @kind object;
  #L16ee3a.  if v1 == 0 then goto L16ee4a;
  #L16ee3e.  v0:= `@@com.j256.ormlite.table.DatabaseTableConfig.javaxPersistenceConfigurer` @type ^`com.j256.ormlite.misc.JavaxPersistenceConfigurer` @kind object;
  #L16ee42.  call temp:= `getEntityName`(v0, v3) @signature `Lcom/j256/ormlite/misc/JavaxPersistenceConfigurer;.getEntityName:(Ljava/lang/Class;)Ljava/lang/String;` @kind interface;
  #L16ee48.  v0:= temp @kind object;
  #L16ee4a.  if v0 != 0 then goto L16ee5e;
  #L16ee4e.  call temp:= `getSimpleName`(v3) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L16ee54.  v0:= temp @kind object;
  #L16ee56.  call temp:= `toLowerCase`(v0) @signature `Ljava/lang/String;.toLowerCase:()Ljava/lang/String;` @kind virtual;
  #L16ee5c.  v0:= temp @kind object;
  #L16ee5e.  return v0 @kind object;
  #L16ee60.  v0:= v1 @kind object;
  #L16ee62.  goto L16ee32;
}
procedure `java.lang.reflect.Constructor` `findNoArgConstructor`(`java.lang.Class` v5 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.findNoArgConstructor:(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #Try_start0.  
  #L16ee74.  call temp:= `getDeclaredConstructors`(v5) @signature `Ljava/lang/Class;.getDeclaredConstructors:()[Ljava/lang/reflect/Constructor;` @kind virtual;
  #L16ee7a.  v0:= temp @kind object;
  #L16ee7c.  v0:= (`java.lang.reflect.Constructor`[]) v0 @kind object;
  #Try_end0.  
  #L16ee80.  v2:= length @variable v0;
  #L16ee82.  v1:= 0I;
  #L16ee84.  if v1 >= v2 then goto L16ef1e;
  #L16ee88.  v3:= v0[v1] @kind object;
  #L16ee8c.  call temp:= `getParameterTypes`(v3) @signature `Ljava/lang/reflect/Constructor;.getParameterTypes:()[Ljava/lang/Class;` @kind virtual;
  #L16ee92.  v4:= temp @kind object;
  #L16ee94.  v4:= length @variable v4;
  #L16ee96.  if v4 != 0 then goto L16ef18;
  #L16ee9a.  call temp:= `isAccessible`(v3) @signature `Ljava/lang/reflect/Constructor;.isAccessible:()Z` @kind virtual;
  #L16eea0.  v0:= temp;
  #L16eea2.  if v0 != 0 then goto L16eeae;
  #L16eea6.  v0:= 1I;
  #Try_start1.  
  #L16eea8.  call `setAccessible`(v3, v0) @signature `Ljava/lang/reflect/Constructor;.setAccessible:(Z)V` @kind virtual;
  #Try_end1.  
  #L16eeae.  return v3 @kind object;
  #L16eeb0.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L16eeb2.  v1:= new `java.lang.IllegalArgumentException`;
  #L16eeb6.  v2:= new `java.lang.StringBuilder`;
  #L16eeba.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16eec0.  v3:= "Can't lookup declared constructors for " @kind object;
  #L16eec4.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16eeca.  v2:= temp @kind object;
  #L16eecc.  call temp:= `append`(v2, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16eed2.  v2:= temp @kind object;
  #L16eed4.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16eeda.  v2:= temp @kind object;
  #L16eedc.  call `<init>`(v1, v2, v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;Ljava/lang/Throwable;)V` @kind direct;
  #L16eee2.  throw v1;
  #L16eee4.  v0:= Exception @type ^`java.lang.SecurityException` @kind object;
  #L16eee6.  v0:= new `java.lang.IllegalArgumentException`;
  #L16eeea.  v1:= new `java.lang.StringBuilder`;
  #L16eeee.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16eef4.  v2:= "Could not open access to constructor for " @kind object;
  #L16eef8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16eefe.  v1:= temp @kind object;
  #L16ef00.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ef06.  v1:= temp @kind object;
  #L16ef08.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16ef0e.  v1:= temp @kind object;
  #L16ef10.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16ef16.  throw v0;
  #L16ef18.  v1:= v1 + 1;
  #L16ef1c.  goto L16ee84;
  #L16ef1e.  call temp:= `getEnclosingClass`(v5) @signature `Ljava/lang/Class;.getEnclosingClass:()Ljava/lang/Class;` @kind virtual;
  #L16ef24.  v0:= temp @kind object;
  #L16ef26.  if v0 != 0 then goto L16ef5c;
  #L16ef2a.  v0:= new `java.lang.IllegalArgumentException`;
  #L16ef2e.  v1:= new `java.lang.StringBuilder`;
  #L16ef32.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16ef38.  v2:= "Can't find a no-arg constructor for " @kind object;
  #L16ef3c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ef42.  v1:= temp @kind object;
  #L16ef44.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ef4a.  v1:= temp @kind object;
  #L16ef4c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16ef52.  v1:= temp @kind object;
  #L16ef54.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16ef5a.  throw v0;
  #L16ef5c.  v0:= new `java.lang.IllegalArgumentException`;
  #L16ef60.  v1:= new `java.lang.StringBuilder`;
  #L16ef64.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16ef6a.  v2:= "Can't find a no-arg constructor for " @kind object;
  #L16ef6e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ef74.  v1:= temp @kind object;
  #L16ef76.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ef7c.  v1:= temp @kind object;
  #L16ef7e.  v2:= ".  Missing static on inner class?" @kind object;
  #L16ef82.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16ef88.  v1:= temp @kind object;
  #L16ef8a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16ef90.  v1:= temp @kind object;
  #L16ef92.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16ef98.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L16eeb0;
  catch `java.lang.SecurityException` @[Try_start1..Try_end1] goto L16eee4;
}
procedure `com.j256.ormlite.table.DatabaseTableConfig` `fromClass`(`com.j256.ormlite.support.ConnectionSource` v3 @kind object, `java.lang.Class` v4 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.fromClass:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;)Lcom/j256/ormlite/table/DatabaseTableConfig;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L16efc8.  call temp:= `extractTableName`(v4) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractTableName:(Ljava/lang/Class;)Ljava/lang/String;` @kind static;
  #L16efce.  v0:= temp @kind object;
  #L16efd0.  call temp:= `getDatabaseType`(v3) @signature `Lcom/j256/ormlite/support/ConnectionSource;.getDatabaseType:()Lcom/j256/ormlite/db/DatabaseType;` @kind interface;
  #L16efd6.  v1:= temp @kind object;
  #L16efd8.  call temp:= `isEntityNamesMustBeUpCase`(v1) @signature `Lcom/j256/ormlite/db/DatabaseType;.isEntityNamesMustBeUpCase:()Z` @kind interface;
  #L16efde.  v2:= temp;
  #L16efe0.  if v2 == 0 then goto L16efec;
  #L16efe4.  call temp:= `upCaseEntityName`(v1, v0) @signature `Lcom/j256/ormlite/db/DatabaseType;.upCaseEntityName:(Ljava/lang/String;)Ljava/lang/String;` @kind interface;
  #L16efea.  v0:= temp @kind object;
  #L16efec.  v1:= new `com.j256.ormlite.table.DatabaseTableConfig`;
  #L16eff0.  call temp:= `extractFieldTypes`(v3, v4, v0) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;Ljava/lang/String;)[Lcom/j256/ormlite/field/FieldType;` @kind static;
  #L16eff6.  v2:= temp @kind object;
  #L16eff8.  call `<init>`(v1, v4, v0, v2) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.<init>:(Ljava/lang/Class;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L16effe.  return v1 @kind object;
}
procedure `void` `extractFieldTypes`(`com.j256.ormlite.table.DatabaseTableConfig` v2 @kind this, `com.j256.ormlite.support.ConnectionSource` v3 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16f010.  v0:= v2.`com.j256.ormlite.table.DatabaseTableConfig.fieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L16f014.  if v0 != 0 then goto L16f034;
  #L16f018.  v0:= v2.`com.j256.ormlite.table.DatabaseTableConfig.fieldConfigs` @type ^`java.util.List` @kind object;
  #L16f01c.  if v0 != 0 then goto L16f036;
  #L16f020.  v0:= v2.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L16f024.  v1:= v2.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` @kind object;
  #L16f028.  call temp:= `extractFieldTypes`(v3, v0, v1) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractFieldTypes:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/Class;Ljava/lang/String;)[Lcom/j256/ormlite/field/FieldType;` @kind static;
  #L16f02e.  v0:= temp @kind object;
  #L16f030.  v2.`com.j256.ormlite.table.DatabaseTableConfig.fieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] := v0 @kind object;
  #L16f034.  return @kind void;
  #L16f036.  v0:= v2.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` @kind object;
  #L16f03a.  v1:= v2.`com.j256.ormlite.table.DatabaseTableConfig.fieldConfigs` @type ^`java.util.List` @kind object;
  #L16f03e.  call temp:= `convertFieldConfigs`(v2, v3, v0, v1) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.convertFieldConfigs:(Lcom/j256/ormlite/support/ConnectionSource;Ljava/lang/String;Ljava/util/List;)[Lcom/j256/ormlite/field/FieldType;` @kind direct;
  #L16f044.  v0:= temp @kind object;
  #L16f046.  v2.`com.j256.ormlite.table.DatabaseTableConfig.fieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] := v0 @kind object;
  #L16f04a.  goto L16f034;
}
procedure `java.lang.reflect.Constructor` `getConstructor`(`com.j256.ormlite.table.DatabaseTableConfig` v1 @kind this) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.getConstructor:()Ljava/lang/reflect/Constructor;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16f05c.  v0:= v1.`com.j256.ormlite.table.DatabaseTableConfig.constructor` @type ^`java.lang.reflect.Constructor` @kind object;
  #L16f060.  if v0 != 0 then goto L16f074;
  #L16f064.  v0:= v1.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L16f068.  call temp:= `findNoArgConstructor`(v0) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.findNoArgConstructor:(Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind static;
  #L16f06e.  v0:= temp @kind object;
  #L16f070.  v1.`com.j256.ormlite.table.DatabaseTableConfig.constructor` @type ^`java.lang.reflect.Constructor` := v0 @kind object;
  #L16f074.  v0:= v1.`com.j256.ormlite.table.DatabaseTableConfig.constructor` @type ^`java.lang.reflect.Constructor` @kind object;
  #L16f078.  return v0 @kind object;
}
procedure `java.lang.Class` `getDataClass`(`com.j256.ormlite.table.DatabaseTableConfig` v1 @kind this) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.getDataClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16f08c.  v0:= v1.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L16f090.  return v0 @kind object;
}
procedure `java.util.List` `getFieldConfigs`(`com.j256.ormlite.table.DatabaseTableConfig` v1 @kind this) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.getFieldConfigs:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16f0a4.  v0:= v1.`com.j256.ormlite.table.DatabaseTableConfig.fieldConfigs` @type ^`java.util.List` @kind object;
  #L16f0a8.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.FieldType`[] `getFieldTypes`(`com.j256.ormlite.table.DatabaseTableConfig` v2 @kind this, `com.j256.ormlite.db.DatabaseType` v3 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.getFieldTypes:(Lcom/j256/ormlite/db/DatabaseType;)[Lcom/j256/ormlite/field/FieldType;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L16f0bc.  v0:= v2.`com.j256.ormlite.table.DatabaseTableConfig.fieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L16f0c0.  if v0 != 0 then goto L16f0d4;
  #L16f0c4.  v0:= new `java.sql.SQLException`;
  #L16f0c8.  v1:= "Field types have not been extracted in table config" @kind object;
  #L16f0cc.  call `<init>`(v0, v1) @signature `Ljava/sql/SQLException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16f0d2.  throw v0;
  #L16f0d4.  v0:= v2.`com.j256.ormlite.table.DatabaseTableConfig.fieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L16f0d8.  return v0 @kind object;
}
procedure `java.lang.String` `getTableName`(`com.j256.ormlite.table.DatabaseTableConfig` v1 @kind this) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.getTableName:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16f0ec.  v0:= v1.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` @kind object;
  #L16f0f0.  return v0 @kind object;
}
procedure `void` `initialize`(`com.j256.ormlite.table.DatabaseTableConfig` v3 @kind this) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.initialize:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L16f104.  v0:= v3.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L16f108.  if v0 != 0 then goto L16f14e;
  #L16f10c.  v0:= new `java.lang.IllegalStateException`;
  #L16f110.  v1:= new `java.lang.StringBuilder`;
  #L16f114.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16f11a.  v2:= "dataClass was never set on " @kind object;
  #L16f11e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f124.  v1:= temp @kind object;
  #L16f126.  call temp:= `getClass`(v3) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L16f12c.  v2:= temp @kind object;
  #L16f12e.  call temp:= `getSimpleName`(v2) @signature `Ljava/lang/Class;.getSimpleName:()Ljava/lang/String;` @kind virtual;
  #L16f134.  v2:= temp @kind object;
  #L16f136.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L16f13c.  v1:= temp @kind object;
  #L16f13e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L16f144.  v1:= temp @kind object;
  #L16f146.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L16f14c.  throw v0;
  #L16f14e.  v0:= v3.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` @kind object;
  #L16f152.  if v0 != 0 then goto L16f166;
  #L16f156.  v0:= v3.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` @kind object;
  #L16f15a.  call temp:= `extractTableName`(v0) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.extractTableName:(Ljava/lang/Class;)Ljava/lang/String;` @kind static;
  #L16f160.  v0:= temp @kind object;
  #L16f162.  v3.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` := v0 @kind object;
  #L16f166.  return @kind void;
}
procedure `void` `setConstructor`(`com.j256.ormlite.table.DatabaseTableConfig` v0 @kind this, `java.lang.reflect.Constructor` v1 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.setConstructor:(Ljava/lang/reflect/Constructor;)V` @AccessFlag PUBLIC {
    temp;

  #L16f178.  v0.`com.j256.ormlite.table.DatabaseTableConfig.constructor` @type ^`java.lang.reflect.Constructor` := v1 @kind object;
  #L16f17c.  return @kind void;
}
procedure `void` `setDataClass`(`com.j256.ormlite.table.DatabaseTableConfig` v0 @kind this, `java.lang.Class` v1 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.setDataClass:(Ljava/lang/Class;)V` @AccessFlag PUBLIC {
    temp;

  #L16f190.  v0.`com.j256.ormlite.table.DatabaseTableConfig.dataClass` @type ^`java.lang.Class` := v1 @kind object;
  #L16f194.  return @kind void;
}
procedure `void` `setFieldConfigs`(`com.j256.ormlite.table.DatabaseTableConfig` v0 @kind this, `java.util.List` v1 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.setFieldConfigs:(Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;

  #L16f1a8.  v0.`com.j256.ormlite.table.DatabaseTableConfig.fieldConfigs` @type ^`java.util.List` := v1 @kind object;
  #L16f1ac.  return @kind void;
}
procedure `void` `setTableName`(`com.j256.ormlite.table.DatabaseTableConfig` v0 @kind this, `java.lang.String` v1 @kind object) @signature `Lcom/j256/ormlite/table/DatabaseTableConfig;.setTableName:(Ljava/lang/String;)V` @AccessFlag PUBLIC {
    temp;

  #L16f1c0.  v0.`com.j256.ormlite.table.DatabaseTableConfig.tableName` @type ^`java.lang.String` := v1 @kind object;
  #L16f1c4.  return @kind void;
}
