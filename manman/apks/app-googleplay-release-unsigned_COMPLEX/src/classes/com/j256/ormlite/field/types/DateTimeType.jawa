record `com.j256.ormlite.field.types.DateTimeType` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.field.types.BaseDataType` @kind class {
}
global `java.lang.String`[] `@@com.j256.ormlite.field.types.DateTimeType.associatedClassNames` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.lang.Class` `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @AccessFlag PRIVATE_STATIC;
global `java.lang.reflect.Method` `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @AccessFlag PRIVATE_STATIC;
global `java.lang.reflect.Constructor` `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @AccessFlag PRIVATE_STATIC;
global `com.j256.ormlite.field.types.DateTimeType` `@@com.j256.ormlite.field.types.DateTimeType.singleTon` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L161eec.  v1:= 0I;
  #L161eee.  v0:= new `com.j256.ormlite.field.types.DateTimeType`;
  #L161ef2.  call `<init>`(v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<init>:()V` @kind direct;
  #L161ef8.  `@@com.j256.ormlite.field.types.DateTimeType.singleTon` @type ^`com.j256.ormlite.field.types.DateTimeType` := v0 @kind object;
  #L161efc.  `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` := v1 @kind object;
  #L161f00.  `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L161f04.  `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` := v1 @kind object;
  #L161f08.  v0:= 1I;
  #L161f0a.  v0:= new `java.lang.String`[v0];
  #L161f0e.  v1:= 0I;
  #L161f10.  v2:= "org.joda.time.DateTime" @kind object;
  #L161f14.  v0[v1]:= v2 @kind object;
  #L161f18.  `@@com.j256.ormlite.field.types.DateTimeType.associatedClassNames` @type ^`java.lang.String`[] := v0 @kind object;
  #L161f1c.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;
    v0;

  #L161f30.  v0:= `@@com.j256.ormlite.field.SqlType.LONG` @type ^`com.j256.ormlite.field.SqlType` @kind object;
  #L161f34.  call `<init>`(v1, v0) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;)V` @kind direct;
  #L161f3a.  return @kind void;
}
procedure `void` `<init>`(`com.j256.ormlite.field.types.DateTimeType` v0 @kind this, `com.j256.ormlite.field.SqlType` v1 @kind object, `java.lang.Class`[] v2 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;

  #L161f4c.  call `<init>`(v0, v1, v2) @signature `Lcom/j256/ormlite/field/types/BaseDataType;.<init>:(Lcom/j256/ormlite/field/SqlType;[Ljava/lang/Class;)V` @kind direct;
  #L161f52.  return @kind void;
}
procedure `java.lang.Object` `createInstance`(`com.j256.ormlite.field.types.DateTimeType` v4 @kind this, `java.lang.Long` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L161f64.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` @kind object;
  #L161f68.  if v0 != 0 then goto L161f90;
  #L161f6c.  call temp:= `getDateTimeClass`(v4) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @kind direct;
  #L161f72.  v0:= temp @kind object;
  #L161f74.  v1:= 1I;
  #L161f76.  v1:= new `java.lang.Class`[v1];
  #L161f7a.  v2:= 0I;
  #L161f7c.  v3:= `@@java.lang.Long.TYPE` @type ^`java.lang.Class` @kind object;
  #L161f80.  v1[v2]:= v3 @kind object;
  #L161f84.  call temp:= `getConstructor`(v0, v1) @signature `Ljava/lang/Class;.getConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L161f8a.  v0:= temp @kind object;
  #L161f8c.  `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` := v0 @kind object;
  #L161f90.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.millisConstructor` @type ^`java.lang.reflect.Constructor` @kind object;
  #L161f94.  v1:= 1I;
  #L161f96.  v1:= new `java.lang.Object`[v1];
  #L161f9a.  v2:= 0I;
  #L161f9c.  v1[v2]:= v5 @kind object;
  #L161fa0.  call temp:= `newInstance`(v0, v1) @signature `Ljava/lang/reflect/Constructor;.newInstance:([Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L161fa6.  v0:= temp @kind object;
  #L161fa8.  return v0 @kind object;
  #L161faa.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L161fac.  v1:= "Could not use reflection to construct a Joda DateTime" @kind object;
  #L161fb0.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L161fb6.  v0:= temp @kind object;
  #L161fb8.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L161faa;
}
procedure `java.lang.Long` `extractMillis`(`com.j256.ormlite.field.types.DateTimeType` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.extractMillis:(Ljava/lang/Object;)Ljava/lang/Long;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L161fdc.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L161fe0.  if v0 != 0 then goto L162002;
  #L161fe4.  call temp:= `getDateTimeClass`(v3) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @kind direct;
  #L161fea.  v0:= temp @kind object;
  #L161fec.  v1:= "getMillis" @kind object;
  #L161ff0.  v2:= 0I;
  #L161ff2.  v2:= new `java.lang.Class`[v2];
  #L161ff6.  call temp:= `getMethod`(v0, v1, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L161ffc.  v0:= temp @kind object;
  #L161ffe.  `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` := v0 @kind object;
  #L162002.  if v4 != 0 then goto L16200a;
  #L162006.  v0:= 0I;
  #L162008.  return v0 @kind object;
  #L16200a.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.getMillisMethod` @type ^`java.lang.reflect.Method` @kind object;
  #L16200e.  v1:= 0I;
  #L162010.  v1:= new `java.lang.Object`[v1];
  #L162014.  call temp:= `invoke`(v0, v4, v1) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L16201a.  v0:= temp @kind object;
  #L16201c.  v0:= (`java.lang.Long`) v0 @kind object;
  #Try_end0.  
  #L162020.  goto L162008;
  #L162022.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L162024.  v1:= new `java.lang.StringBuilder`;
  #L162028.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L16202e.  v2:= "Could not use reflection to get millis from Joda DateTime: " @kind object;
  #L162032.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162038.  v1:= temp @kind object;
  #L16203a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162040.  v1:= temp @kind object;
  #L162042.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L162048.  v1:= temp @kind object;
  #L16204a.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L162050.  v0:= temp @kind object;
  #L162052.  throw v0;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L162022;
}
procedure `java.lang.Class` `getDateTimeClass`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L162074.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` @kind object;
  #L162078.  if v0 != 0 then goto L16208c;
  #L16207c.  v0:= "org.joda.time.DateTime" @kind object;
  #L162080.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L162086.  v0:= temp @kind object;
  #L162088.  `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` := v0 @kind object;
  #L16208c.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.dateTimeClass` @type ^`java.lang.Class` @kind object;
  #L162090.  return v0 @kind object;
}
procedure `com.j256.ormlite.field.types.DateTimeType` `getSingleton`() @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getSingleton:()Lcom/j256/ormlite/field/types/DateTimeType;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L1620a4.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.singleTon` @type ^`com.j256.ormlite.field.types.DateTimeType` @kind object;
  #L1620a8.  return v0 @kind object;
}
procedure `java.lang.String`[] `getAssociatedClassNames`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getAssociatedClassNames:()[Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1620bc.  v0:= `@@com.j256.ormlite.field.types.DateTimeType.associatedClassNames` @type ^`java.lang.String`[] @kind object;
  #L1620c0.  return v0 @kind object;
}
procedure `java.lang.Class` `getPrimaryClass`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getPrimaryClass:()Ljava/lang/Class;` @AccessFlag PUBLIC {
    temp;
    v0;

  #Try_start0.  
  #L1620d4.  call temp:= `getDateTimeClass`(v1) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.getDateTimeClass:()Ljava/lang/Class;` @kind direct;
  #Try_end0.  
  #L1620da.  v0:= temp @kind object;
  #L1620dc.  return v0 @kind object;
  #L1620de.  v0:= Exception @type ^`java.lang.ClassNotFoundException` @kind object;
  #L1620e0.  v0:= 0I;
  #L1620e2.  goto L1620dc;
  catch `java.lang.ClassNotFoundException` @[Try_start0..Try_end0] goto L1620de;
}
procedure `boolean` `isAppropriateId`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.isAppropriateId:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L162104.  v0:= 0I;
  #L162106.  return v0;
}
procedure `boolean` `isEscapedValue`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.isEscapedValue:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L162118.  v0:= 0I;
  #L16211a.  return v0;
}
procedure `boolean` `isValidForVersion`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.isValidForVersion:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L16212c.  v0:= 1I;
  #L16212e.  return v0;
}
procedure `java.lang.Object` `javaToSqlArg`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.javaToSqlArg:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L162140.  call temp:= `extractMillis`(v1, v3) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.extractMillis:(Ljava/lang/Object;)Ljava/lang/Long;` @kind direct;
  #L162146.  v0:= temp @kind object;
  #L162148.  return v0 @kind object;
}
procedure `java.lang.Object` `moveToNextValue`(`com.j256.ormlite.field.types.DateTimeType` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.moveToNextValue:(Ljava/lang/Object;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L16215c.  call temp:= `currentTimeMillis`() @signature `Ljava/lang/System;.currentTimeMillis:()J` @kind static;
  #L162162.  v0:= temp @kind wide;
  #L162164.  if v5 != 0 then goto L16217a;
  #L162168.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L16216e.  v0:= temp @kind object;
  #L162170.  call temp:= `createInstance`(v4, v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L162176.  v0:= temp @kind object;
  #L162178.  return v0 @kind object;
  #L16217a.  call temp:= `extractMillis`(v4, v5) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.extractMillis:(Ljava/lang/Object;)Ljava/lang/Long;` @kind direct;
  #L162180.  v2:= temp @kind object;
  #L162182.  call temp:= `longValue`(v2) @signature `Ljava/lang/Long;.longValue:()J` @kind virtual;
  #L162188.  v2:= temp @kind wide;
  #L16218a.  v2:= lcmp(v0, v2);
  #L16218e.  if v2 != 0 then goto L1621aa;
  #L162192.  v2:= 1L;
  #L162196.  v0:= v0 + v2 @kind long;
  #L162198.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L16219e.  v0:= temp @kind object;
  #L1621a0.  call temp:= `createInstance`(v4, v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L1621a6.  v0:= temp @kind object;
  #L1621a8.  goto L162178;
  #L1621aa.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L1621b0.  v0:= temp @kind object;
  #L1621b2.  call temp:= `createInstance`(v4, v0) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L1621b8.  v0:= temp @kind object;
  #L1621ba.  goto L162178;
}
procedure `java.lang.Object` `parseDefaultString`(`com.j256.ormlite.field.types.DateTimeType` v3 @kind this, `com.j256.ormlite.field.FieldType` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.parseDefaultString:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L1621cc.  call temp:= `parseLong`(v5) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #L1621d2.  v0:= temp @kind wide;
  #L1621d4.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #Try_end0.  
  #L1621da.  v0:= temp @kind object;
  #L1621dc.  return v0 @kind object;
  #L1621de.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L1621e0.  v1:= new `java.lang.StringBuilder`;
  #L1621e4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1621ea.  v2:= "Problems with field " @kind object;
  #L1621ee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1621f4.  v1:= temp @kind object;
  #L1621f6.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1621fc.  v1:= temp @kind object;
  #L1621fe.  v2:= " parsing default DateTime value: " @kind object;
  #L162202.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162208.  v1:= temp @kind object;
  #L16220a.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L162210.  v1:= temp @kind object;
  #L162212.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L162218.  v1:= temp @kind object;
  #L16221a.  call temp:= `create`(v1, v0) @signature `Lcom/j256/ormlite/misc/SqlExceptionUtil;.create:(Ljava/lang/String;Ljava/lang/Throwable;)Ljava/sql/SQLException;` @kind static;
  #L162220.  v0:= temp @kind object;
  #L162222.  throw v0;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L1621de;
}
procedure `java.lang.Object` `resultToSqlArg`(`com.j256.ormlite.field.types.DateTimeType` v2 @kind this, `com.j256.ormlite.field.FieldType` v3 @kind object, `com.j256.ormlite.support.DatabaseResults` v4 @kind object, `int` v5 ) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.resultToSqlArg:(Lcom/j256/ormlite/field/FieldType;Lcom/j256/ormlite/support/DatabaseResults;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L162244.  call temp:= `getLong`(v4, v5) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getLong:(I)J` @kind interface;
  #L16224a.  v0:= temp @kind wide;
  #L16224c.  call temp:= `valueOf`(v0) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L162252.  v0:= temp @kind object;
  #L162254.  return v0 @kind object;
}
procedure `java.lang.Object` `sqlArgToJava`(`com.j256.ormlite.field.types.DateTimeType` v1 @kind this, `com.j256.ormlite.field.FieldType` v2 @kind object, `java.lang.Object` v3 @kind object, `int` v4 ) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.sqlArgToJava:(Lcom/j256/ormlite/field/FieldType;Ljava/lang/Object;I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L162268.  v3:= (`java.lang.Long`) v3 @kind object;
  #L16226c.  call temp:= `createInstance`(v1, v3) @signature `Lcom/j256/ormlite/field/types/DateTimeType;.createInstance:(Ljava/lang/Long;)Ljava/lang/Object;` @kind direct;
  #L162272.  v0:= temp @kind object;
  #L162274.  return v0 @kind object;
}
