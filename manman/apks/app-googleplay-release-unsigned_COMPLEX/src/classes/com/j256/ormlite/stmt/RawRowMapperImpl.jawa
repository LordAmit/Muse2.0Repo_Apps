record `com.j256.ormlite.stmt.RawRowMapperImpl` @kind class @AccessFlag PUBLIC extends `com.j256.ormlite.dao.RawRowMapper` @kind interface {
  `com.j256.ormlite.table.TableInfo` `com.j256.ormlite.stmt.RawRowMapperImpl.tableInfo` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.RawRowMapperImpl` v0 @kind this, `com.j256.ormlite.table.TableInfo` v1 @kind object) @signature `Lcom/j256/ormlite/stmt/RawRowMapperImpl;.<init>:(Lcom/j256/ormlite/table/TableInfo;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L16891c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L168922.  v0.`com.j256.ormlite.stmt.RawRowMapperImpl.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` := v1 @kind object;
  #L168926.  return @kind void;
}
procedure `java.lang.Object` `mapRow`(`com.j256.ormlite.stmt.RawRowMapperImpl` v6 @kind this, `java.lang.String`[] v7 @kind object, `java.lang.String`[] v8 @kind object) @signature `Lcom/j256/ormlite/stmt/RawRowMapperImpl;.mapRow:([Ljava/lang/String;[Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L168938.  v1:= 0I;
  #L16893a.  v0:= v6.`com.j256.ormlite.stmt.RawRowMapperImpl.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L16893e.  call temp:= `createObject`(v0) @signature `Lcom/j256/ormlite/table/TableInfo;.createObject:()Ljava/lang/Object;` @kind virtual;
  #L168944.  v2:= temp @kind object;
  #L168946.  v0:= v1;
  #L168948.  v3:= length @variable v7;
  #L16894a.  if v0 >= v3 then goto L168980;
  #L16894e.  v3:= length @variable v8;
  #L168950.  if v0 < v3 then goto L16895a;
  #L168954.  v0:= v0 + 1;
  #L168958.  goto L168948;
  #L16895a.  v3:= v6.`com.j256.ormlite.stmt.RawRowMapperImpl.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L16895e.  v4:= v7[v0] @kind object;
  #L168962.  call temp:= `getFieldTypeByColumnName`(v3, v4) @signature `Lcom/j256/ormlite/table/TableInfo;.getFieldTypeByColumnName:(Ljava/lang/String;)Lcom/j256/ormlite/field/FieldType;` @kind virtual;
  #L168968.  v3:= temp @kind object;
  #L16896a.  v4:= v8[v0] @kind object;
  #L16896e.  call temp:= `convertStringToJavaField`(v3, v4, v0) @signature `Lcom/j256/ormlite/field/FieldType;.convertStringToJavaField:(Ljava/lang/String;I)Ljava/lang/Object;` @kind virtual;
  #L168974.  v4:= temp @kind object;
  #L168976.  v5:= 0I;
  #L168978.  call `assignField`(v3, v2, v4, v1, v5) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L16897e.  goto L168954;
  #L168980.  return v2 @kind object;
}
