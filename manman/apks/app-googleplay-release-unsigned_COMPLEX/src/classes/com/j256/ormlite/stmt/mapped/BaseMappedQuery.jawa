record `com.j256.ormlite.stmt.mapped.BaseMappedQuery` @kind class @AccessFlag PUBLIC_ABSTRACT extends `com.j256.ormlite.stmt.mapped.BaseMappedStatement` @kind class, `com.j256.ormlite.stmt.GenericRowMapper` @kind interface {
  `java.util.Map` `com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @AccessFlag PRIVATE;
  `java.lang.Object` `com.j256.ormlite.stmt.mapped.BaseMappedQuery.parentId` @AccessFlag PRIVATE;
  `com.j256.ormlite.field.FieldType`[] `com.j256.ormlite.stmt.mapped.BaseMappedQuery.resultsFieldTypes` @AccessFlag PROTECTED_FINAL;
}
procedure `void` `<init>`(`com.j256.ormlite.stmt.mapped.BaseMappedQuery` v1 @kind this, `com.j256.ormlite.table.TableInfo` v2 @kind object, `java.lang.String` v3 @kind object, `com.j256.ormlite.field.FieldType`[] v4 @kind object, `com.j256.ormlite.field.FieldType`[] v5 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;[Lcom/j256/ormlite/field/FieldType;)V` @AccessFlag PROTECTED_CONSTRUCTOR {
    temp;
    v0;

  #L16bbf8.  v0:= 0I;
  #L16bbfa.  call `<init>`(v1, v2, v3, v4) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedStatement;.<init>:(Lcom/j256/ormlite/table/TableInfo;Ljava/lang/String;[Lcom/j256/ormlite/field/FieldType;)V` @kind direct;
  #L16bc00.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @type ^`java.util.Map` := v0 @kind object;
  #L16bc04.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @type ^`java.lang.Object` := v0 @kind object;
  #L16bc08.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parentId` @type ^`java.lang.Object` := v0 @kind object;
  #L16bc0c.  v1.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.resultsFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] := v5 @kind object;
  #L16bc10.  return @kind void;
}
procedure `java.lang.Object` `mapRow`(`com.j256.ormlite.stmt.mapped.BaseMappedQuery` v14 @kind this, `com.j256.ormlite.support.DatabaseResults` v15 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.mapRow:(Lcom/j256/ormlite/support/DatabaseResults;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L16bc24.  v2:= 1I;
  #L16bc26.  v6:= 0I;
  #L16bc28.  v0:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @type ^`java.util.Map` @kind object;
  #L16bc2c.  if v0 != 0 then goto L16bc66;
  #L16bc30.  v0:= new `java.util.HashMap`;
  #L16bc34.  call `<init>`(v0) @signature `Ljava/util/HashMap;.<init>:()V` @kind direct;
  #L16bc3a.  call temp:= `getObjectCacheForRetrieve`(v15) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getObjectCacheForRetrieve:()Lcom/j256/ormlite/dao/ObjectCache;` @kind interface;
  #L16bc40.  v8:= temp @kind object;
  #L16bc42.  if v8 == 0 then goto L16bc6c;
  #L16bc46.  v1:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.idField` @type ^`com.j256.ormlite.field.FieldType` @kind object;
  #L16bc4a.  call temp:= `resultToJava`(v1, v15, v0) @signature `Lcom/j256/ormlite/field/FieldType;.resultToJava:(Lcom/j256/ormlite/support/DatabaseResults;Ljava/util/Map;)Ljava/lang/Object;` @kind virtual;
  #L16bc50.  v1:= temp @kind object;
  #L16bc52.  v3:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.clazz` @type ^`java.lang.Class` @kind object;
  #L16bc56.  call temp:= `get`(v8, v3, v1) @signature `Lcom/j256/ormlite/dao/ObjectCache;.get:(Ljava/lang/Class;Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L16bc5c.  v1:= temp @kind object;
  #L16bc5e.  if v1 == 0 then goto L16bc6c;
  #L16bc62.  v0:= v1 @kind object;
  #L16bc64.  return v0 @kind object;
  #L16bc66.  v0:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @type ^`java.util.Map` @kind object;
  #L16bc6a.  goto L16bc3a;
  #L16bc6c.  v1:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.tableInfo` @type ^`com.j256.ormlite.table.TableInfo` @kind object;
  #L16bc70.  call temp:= `createObject`(v1) @signature `Lcom/j256/ormlite/table/TableInfo;.createObject:()Ljava/lang/Object;` @kind virtual;
  #L16bc76.  v5:= temp @kind object;
  #L16bc78.  v3:= 0I;
  #L16bc7a.  v9:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.resultsFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L16bc7e.  v10:= length @variable v9;
  #L16bc80.  v7:= v6;
  #L16bc82.  v1:= v6;
  #L16bc84.  if v7 >= v10 then goto L16bd08;
  #L16bc88.  v11:= v9[v7] @kind object;
  #L16bc8c.  call temp:= `isForeignCollection`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L16bc92.  v4:= temp;
  #L16bc94.  if v4 == 0 then goto L16bca2;
  #L16bc98.  v1:= v2;
  #L16bc9a.  v4:= v7 + 1;
  #L16bc9e.  v7:= v4;
  #L16bca0.  goto L16bc84;
  #L16bca2.  call temp:= `resultToJava`(v11, v15, v0) @signature `Lcom/j256/ormlite/field/FieldType;.resultToJava:(Lcom/j256/ormlite/support/DatabaseResults;Ljava/util/Map;)Ljava/lang/Object;` @kind virtual;
  #L16bca8.  v4:= temp @kind object;
  #L16bcaa.  if v4 == 0 then goto L16bd00;
  #L16bcae.  v12:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @type ^`java.lang.Object` @kind object;
  #L16bcb2.  if v12 == 0 then goto L16bd00;
  #L16bcb6.  call temp:= `getField`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.getField:()Ljava/lang/reflect/Field;` @kind virtual;
  #L16bcbc.  v12:= temp @kind object;
  #L16bcbe.  call temp:= `getType`(v12) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L16bcc4.  v12:= temp @kind object;
  #L16bcc6.  v13:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @type ^`java.lang.Object` @kind object;
  #L16bcca.  call temp:= `getClass`(v13) @signature `Ljava/lang/Object;.getClass:()Ljava/lang/Class;` @kind virtual;
  #L16bcd0.  v13:= temp @kind object;
  #L16bcd2.  if v12 != v13 then goto L16bd00;
  #L16bcd6.  v12:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parentId` @type ^`java.lang.Object` @kind object;
  #L16bcda.  call temp:= `equals`(v4, v12) @signature `Ljava/lang/Object;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L16bce0.  v12:= temp;
  #L16bce2.  if v12 == 0 then goto L16bd00;
  #L16bce6.  v12:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @type ^`java.lang.Object` @kind object;
  #L16bcea.  call `assignField`(v11, v5, v12, v2, v8) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L16bcf0.  call temp:= `isId`(v11) @signature `Lcom/j256/ormlite/field/FieldType;.isId:()Z` @kind virtual;
  #L16bcf6.  v11:= temp;
  #L16bcf8.  if v11 == 0 then goto L16bc9a;
  #L16bcfc.  v3:= v4 @kind object;
  #L16bcfe.  goto L16bc9a;
  #L16bd00.  call `assignField`(v11, v5, v4, v6, v8) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L16bd06.  goto L16bcf0;
  #L16bd08.  if v1 == 0 then goto L16bd40;
  #L16bd0c.  v2:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.resultsFieldTypes` @type ^`com.j256.ormlite.field.FieldType`[] @kind object;
  #L16bd10.  v4:= length @variable v2;
  #L16bd12.  v1:= v6;
  #L16bd14.  if v1 >= v4 then goto L16bd40;
  #L16bd18.  v7:= v2[v1] @kind object;
  #L16bd1c.  call temp:= `isForeignCollection`(v7) @signature `Lcom/j256/ormlite/field/FieldType;.isForeignCollection:()Z` @kind virtual;
  #L16bd22.  v9:= temp;
  #L16bd24.  if v9 == 0 then goto L16bd3a;
  #L16bd28.  call temp:= `buildForeignCollection`(v7, v5, v3) @signature `Lcom/j256/ormlite/field/FieldType;.buildForeignCollection:(Ljava/lang/Object;Ljava/lang/Object;)Lcom/j256/ormlite/dao/BaseForeignCollection;` @kind virtual;
  #L16bd2e.  v9:= temp @kind object;
  #L16bd30.  if v9 == 0 then goto L16bd3a;
  #L16bd34.  call `assignField`(v7, v5, v9, v6, v8) @signature `Lcom/j256/ormlite/field/FieldType;.assignField:(Ljava/lang/Object;Ljava/lang/Object;ZLcom/j256/ormlite/dao/ObjectCache;)V` @kind virtual;
  #L16bd3a.  v1:= v1 + 1;
  #L16bd3e.  goto L16bd14;
  #L16bd40.  call temp:= `getObjectCacheForStore`(v15) @signature `Lcom/j256/ormlite/support/DatabaseResults;.getObjectCacheForStore:()Lcom/j256/ormlite/dao/ObjectCache;` @kind interface;
  #L16bd46.  v1:= temp @kind object;
  #L16bd48.  if v1 == 0 then goto L16bd5a;
  #L16bd4c.  if v3 == 0 then goto L16bd5a;
  #L16bd50.  v2:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.clazz` @type ^`java.lang.Class` @kind object;
  #L16bd54.  call `put`(v1, v2, v3, v5) @signature `Lcom/j256/ormlite/dao/ObjectCache;.put:(Ljava/lang/Class;Ljava/lang/Object;Ljava/lang/Object;)V` @kind interface;
  #L16bd5a.  v1:= v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @type ^`java.util.Map` @kind object;
  #L16bd5e.  if v1 != 0 then goto L16bd66;
  #L16bd62.  v14.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.columnPositions` @type ^`java.util.Map` := v0 @kind object;
  #L16bd66.  v0:= v5 @kind object;
  #L16bd68.  goto L16bc64;
}
procedure `void` `setParentInformation`(`com.j256.ormlite.stmt.mapped.BaseMappedQuery` v0 @kind this, `java.lang.Object` v1 @kind object, `java.lang.Object` v2 @kind object) @signature `Lcom/j256/ormlite/stmt/mapped/BaseMappedQuery;.setParentInformation:(Ljava/lang/Object;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;

  #L16bd7c.  v0.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parent` @type ^`java.lang.Object` := v1 @kind object;
  #L16bd80.  v0.`com.j256.ormlite.stmt.mapped.BaseMappedQuery.parentId` @type ^`java.lang.Object` := v2 @kind object;
  #L16bd84.  return @kind void;
}
