record `com.j256.ormlite.dao.EagerForeignCollection$1` @kind class @AccessFlag  extends `com.j256.ormlite.dao.CloseableIterator` @kind interface {
  `int` `com.j256.ormlite.dao.EagerForeignCollection$1.offset` @AccessFlag PRIVATE;
  `com.j256.ormlite.dao.EagerForeignCollection` `com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`com.j256.ormlite.dao.EagerForeignCollection$1` v1 @kind this, `com.j256.ormlite.dao.EagerForeignCollection` v2 @kind object) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.<init>:(Lcom/j256/ormlite/dao/EagerForeignCollection;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L15735c.  v1.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` := v2 @kind object;
  #L157360.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L157366.  v0:= -1I;
  #L157368.  v1.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L15736c.  return @kind void;
}
procedure `void` `close`(`com.j256.ormlite.dao.EagerForeignCollection$1` v0 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L157380.  return @kind void;
}
procedure `void` `closeQuietly`(`com.j256.ormlite.dao.EagerForeignCollection$1` v0 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.closeQuietly:()V` @AccessFlag PUBLIC {
    temp;

  #L157394.  return @kind void;
}
procedure `java.lang.Object` `current`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.current:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1573a8.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L1573ac.  if v0 >= 0 then goto L1573b6;
  #L1573b0.  v0:= 0I;
  #L1573b2.  v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L1573b6.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L1573ba.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L1573be.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L1573c4.  v1:= temp @kind object;
  #L1573c6.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1573cc.  v1:= temp;
  #L1573ce.  if v0 < v1 then goto L1573d6;
  #L1573d2.  v0:= 0I;
  #L1573d4.  return v0 @kind object;
  #L1573d6.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L1573da.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L1573e0.  v0:= temp @kind object;
  #L1573e2.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L1573e6.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1573ec.  v0:= temp @kind object;
  #L1573ee.  goto L1573d4;
}
procedure `java.lang.Object` `first`(`com.j256.ormlite.dao.EagerForeignCollection$1` v3 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.first:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L157400.  v2:= 0I;
  #L157402.  v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v2;
  #L157406.  v0:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L15740a.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L15740e.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L157414.  v1:= temp @kind object;
  #L157416.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L15741c.  v1:= temp;
  #L15741e.  if v0 < v1 then goto L157426;
  #L157422.  v0:= 0I;
  #L157424.  return v0 @kind object;
  #L157426.  v0:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L15742a.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L157430.  v0:= temp @kind object;
  #L157432.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L157438.  v0:= temp @kind object;
  #L15743a.  goto L157424;
}
procedure `com.j256.ormlite.support.DatabaseResults` `getRawResults`(`com.j256.ormlite.dao.EagerForeignCollection$1` v1 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.getRawResults:()Lcom/j256/ormlite/support/DatabaseResults;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L15744c.  v0:= 0I;
  #L15744e.  return v0 @kind object;
}
procedure `boolean` `hasNext`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.hasNext:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L157460.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L157464.  v0:= v0 + 1;
  #L157468.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L15746c.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L157472.  v1:= temp @kind object;
  #L157474.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L15747a.  v1:= temp;
  #L15747c.  if v0 >= v1 then goto L157484;
  #L157480.  v0:= 1I;
  #L157482.  return v0;
  #L157484.  v0:= 0I;
  #L157486.  goto L157482;
}
procedure `java.lang.Object` `moveRelative`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this, `int` v3 ) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.moveRelative:(I)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L157498.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L15749c.  v0:= v0 + v3 @kind int;
  #L15749e.  v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L1574a2.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L1574a6.  if v0 < 0 then goto L1574c6;
  #L1574aa.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L1574ae.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L1574b2.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L1574b8.  v1:= temp @kind object;
  #L1574ba.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1574c0.  v1:= temp;
  #L1574c2.  if v0 < v1 then goto L1574ca;
  #L1574c6.  v0:= 0I;
  #L1574c8.  return v0 @kind object;
  #L1574ca.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L1574ce.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L1574d4.  v0:= temp @kind object;
  #L1574d6.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L1574da.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1574e0.  v0:= temp @kind object;
  #L1574e2.  goto L1574c8;
}
procedure `void` `moveToNext`(`com.j256.ormlite.dao.EagerForeignCollection$1` v1 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.moveToNext:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1574f4.  v0:= v1.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L1574f8.  v0:= v0 + 1;
  #L1574fc.  v1.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L157500.  return @kind void;
}
procedure `java.lang.Object` `next`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.next:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L157514.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L157518.  v0:= v0 + 1;
  #L15751c.  v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L157520.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L157524.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L15752a.  v0:= temp @kind object;
  #L15752c.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L157530.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L157536.  v0:= temp @kind object;
  #L157538.  return v0 @kind object;
}
procedure `java.lang.Object` `nextThrow`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.nextThrow:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L15754c.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L157550.  v0:= v0 + 1;
  #L157554.  v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L157558.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L15755c.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L157560.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L157566.  v1:= temp @kind object;
  #L157568.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L15756e.  v1:= temp;
  #L157570.  if v0 < v1 then goto L157578;
  #L157574.  v0:= 0I;
  #L157576.  return v0 @kind object;
  #L157578.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L15757c.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L157582.  v0:= temp @kind object;
  #L157584.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L157588.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L15758e.  v0:= temp @kind object;
  #L157590.  goto L157576;
}
procedure `java.lang.Object` `previous`(`com.j256.ormlite.dao.EagerForeignCollection$1` v2 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.previous:()Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1575a4.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L1575a8.  v0:= v0 + -1;
  #L1575ac.  v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v0;
  #L1575b0.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L1575b4.  if v0 < 0 then goto L1575d4;
  #L1575b8.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L1575bc.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L1575c0.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L1575c6.  v1:= temp @kind object;
  #L1575c8.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L1575ce.  v1:= temp;
  #L1575d0.  if v0 < v1 then goto L1575d8;
  #L1575d4.  v0:= 0I;
  #L1575d6.  return v0 @kind object;
  #L1575d8.  v0:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L1575dc.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L1575e2.  v0:= temp @kind object;
  #L1575e4.  v1:= v2.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L1575e8.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L1575ee.  v0:= temp @kind object;
  #L1575f0.  goto L1575d6;
}
procedure `void` `remove`(`com.j256.ormlite.dao.EagerForeignCollection$1` v3 @kind this) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection$1;.remove:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L157604.  v0:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L157608.  if v0 >= 0 then goto L15761c;
  #L15760c.  v0:= new `java.lang.IllegalStateException`;
  #L157610.  v1:= "next() must be called before remove()" @kind object;
  #L157614.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L15761a.  throw v0;
  #L15761c.  v0:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L157620.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L157624.  call temp:= `access$000`(v1) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L15762a.  v1:= temp @kind object;
  #L15762c.  call temp:= `size`(v1) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L157632.  v1:= temp;
  #L157634.  if v0 < v1 then goto L15767a;
  #L157638.  v0:= new `java.lang.IllegalStateException`;
  #L15763c.  v1:= new `java.lang.StringBuilder`;
  #L157640.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L157646.  v2:= "current results position (" @kind object;
  #L15764a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L157650.  v1:= temp @kind object;
  #L157652.  v2:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L157656.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L15765c.  v1:= temp @kind object;
  #L15765e.  v2:= ") is out of bounds" @kind object;
  #L157662.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L157668.  v1:= temp @kind object;
  #L15766a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L157670.  v1:= temp @kind object;
  #L157672.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L157678.  throw v0;
  #L15767a.  v0:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L15767e.  call temp:= `access$000`(v0) @signature `Lcom/j256/ormlite/dao/EagerForeignCollection;.access$000:(Lcom/j256/ormlite/dao/EagerForeignCollection;)Ljava/util/List;` @kind static;
  #L157684.  v0:= temp @kind object;
  #L157686.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L15768a.  call temp:= `remove`(v0, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L157690.  v0:= temp @kind object;
  #L157692.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int`;
  #L157696.  v1:= v1 + -1;
  #L15769a.  v3.`com.j256.ormlite.dao.EagerForeignCollection$1.offset` @type ^`int` := v1;
  #L15769e.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L1576a2.  v1:= v1.`com.j256.ormlite.dao.EagerForeignCollection.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L1576a6.  if v1 == 0 then goto L1576b8;
  #Try_start0.  
  #L1576aa.  v1:= v3.`com.j256.ormlite.dao.EagerForeignCollection$1.this$0` @type ^`com.j256.ormlite.dao.EagerForeignCollection` @kind object;
  #L1576ae.  v1:= v1.`com.j256.ormlite.dao.EagerForeignCollection.dao` @type ^`com.j256.ormlite.dao.Dao` @kind object;
  #L1576b2.  call temp:= `delete`(v1, v0) @signature `Lcom/j256/ormlite/dao/Dao;.delete:(Ljava/lang/Object;)I` @kind interface;
  #Try_end0.  
  #L1576b8.  return @kind void;
  #L1576ba.  v0:= Exception @type ^`java.sql.SQLException` @kind object;
  #L1576bc.  v1:= new `java.lang.RuntimeException`;
  #L1576c0.  call `<init>`(v1, v0) @signature `Ljava/lang/RuntimeException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L1576c6.  throw v1;
  catch `java.sql.SQLException` @[Try_start0..Try_end0] goto L1576ba;
}
