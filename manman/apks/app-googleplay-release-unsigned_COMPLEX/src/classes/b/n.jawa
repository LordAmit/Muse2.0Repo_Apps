record `b.n` @kind class @AccessFlag FINAL {
  `byte`[] `b.n.a` @AccessFlag FINAL;
  `int` `b.n.b` @AccessFlag ;
  `int` `b.n.c` @AccessFlag ;
  `boolean` `b.n.d` @AccessFlag ;
  `boolean` `b.n.e` @AccessFlag ;
  `b.n` `b.n.f` @AccessFlag ;
  `b.n` `b.n.g` @AccessFlag ;
}
procedure `void` `<init>`(`b.n` v1 @kind this) @signature `Lb/n;.<init>:()V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L11d948.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11d94e.  v0:= 8192I;
  #L11d952.  v0:= new `byte`[v0];
  #L11d956.  v1.`b.n.a` @type ^`byte`[] := v0 @kind object;
  #L11d95a.  v0:= 1I;
  #L11d95c.  v1.`b.n.e` @type ^`boolean` := v0 @kind boolean;
  #L11d960.  v0:= 0I;
  #L11d962.  v1.`b.n.d` @type ^`boolean` := v0 @kind boolean;
  #L11d966.  return @kind void;
}
procedure `void` `<init>`(`b.n` v3 @kind this, `b.n` v4 @kind object) @signature `Lb/n;.<init>:(Lb/n;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;

  #L11d978.  v0:= v4.`b.n.a` @type ^`byte`[] @kind object;
  #L11d97c.  v1:= v4.`b.n.b` @type ^`int`;
  #L11d980.  v2:= v4.`b.n.c` @type ^`int`;
  #L11d984.  call `<init>`(v3, v0, v1, v2) @signature `Lb/n;.<init>:([BII)V` @kind direct;
  #L11d98a.  v0:= 1I;
  #L11d98c.  v4.`b.n.d` @type ^`boolean` := v0 @kind boolean;
  #L11d990.  return @kind void;
}
procedure `void` `<init>`(`b.n` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lb/n;.<init>:([BII)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L11d9a4.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11d9aa.  v1.`b.n.a` @type ^`byte`[] := v2 @kind object;
  #L11d9ae.  v1.`b.n.b` @type ^`int` := v3;
  #L11d9b2.  v1.`b.n.c` @type ^`int` := v4;
  #L11d9b6.  v0:= 0I;
  #L11d9b8.  v1.`b.n.e` @type ^`boolean` := v0 @kind boolean;
  #L11d9bc.  v0:= 1I;
  #L11d9be.  v1.`b.n.d` @type ^`boolean` := v0 @kind boolean;
  #L11d9c2.  return @kind void;
}
procedure `b.n` `a`(`b.n` v4 @kind this) @signature `Lb/n;.a:()Lb/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11d9d4.  v1:= 0I;
  #L11d9d6.  v0:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11d9da.  if v0 == v4 then goto L11da04;
  #L11d9de.  v0:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11d9e2.  v2:= v4.`b.n.g` @type ^`b.n` @kind object;
  #L11d9e6.  v3:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11d9ea.  v2.`b.n.f` @type ^`b.n` := v3 @kind object;
  #L11d9ee.  v2:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11d9f2.  v3:= v4.`b.n.g` @type ^`b.n` @kind object;
  #L11d9f6.  v2.`b.n.g` @type ^`b.n` := v3 @kind object;
  #L11d9fa.  v4.`b.n.f` @type ^`b.n` := v1 @kind object;
  #L11d9fe.  v4.`b.n.g` @type ^`b.n` := v1 @kind object;
  #L11da02.  return v0 @kind object;
  #L11da04.  v0:= v1 @kind object;
  #L11da06.  goto L11d9e2;
}
procedure `b.n` `a`(`b.n` v5 @kind this, `int` v6 ) @signature `Lb/n;.a:(I)Lb/n;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11da18.  if v6 <= 0 then goto L11da2a;
  #L11da1c.  v0:= v5.`b.n.c` @type ^`int`;
  #L11da20.  v1:= v5.`b.n.b` @type ^`int`;
  #L11da24.  v0:= v0 - v1 @kind int;
  #L11da26.  if v6 <= v0 then goto L11da36;
  #L11da2a.  v0:= new `java.lang.IllegalArgumentException`;
  #L11da2e.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11da34.  throw v0;
  #L11da36.  v0:= 1024I;
  #L11da3a.  if v6 < v0 then goto L11da68;
  #L11da3e.  v0:= new `b.n`;
  #L11da42.  call `<init>`(v0, v5) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L11da48.  v1:= v0.`b.n.b` @type ^`int`;
  #L11da4c.  v1:= v1 + v6 @kind int;
  #L11da4e.  v0.`b.n.c` @type ^`int` := v1;
  #L11da52.  v1:= v5.`b.n.b` @type ^`int`;
  #L11da56.  v1:= v1 + v6 @kind int;
  #L11da58.  v5.`b.n.b` @type ^`int` := v1;
  #L11da5c.  v1:= v5.`b.n.g` @type ^`b.n` @kind object;
  #L11da60.  call temp:= `a`(v1, v0) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11da66.  return v0 @kind object;
  #L11da68.  call temp:= `a`() @signature `Lb/o;.a:()Lb/n;` @kind static;
  #L11da6e.  v0:= temp @kind object;
  #L11da70.  v1:= v5.`b.n.a` @type ^`byte`[] @kind object;
  #L11da74.  v2:= v5.`b.n.b` @type ^`int`;
  #L11da78.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11da7c.  v4:= 0I;
  #L11da7e.  call `arraycopy`(v1, v2, v3, v4, v6) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11da84.  goto L11da48;
}
procedure `b.n` `a`(`b.n` v1 @kind this, `b.n` v2 @kind object) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11da98.  v2.`b.n.g` @type ^`b.n` := v1 @kind object;
  #L11da9c.  v0:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L11daa0.  v2.`b.n.f` @type ^`b.n` := v0 @kind object;
  #L11daa4.  v0:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L11daa8.  v0.`b.n.g` @type ^`b.n` := v2 @kind object;
  #L11daac.  v1.`b.n.f` @type ^`b.n` := v2 @kind object;
  #L11dab0.  return v2 @kind object;
}
procedure `void` `a`(`b.n` v6 @kind this, `b.n` v7 @kind object, `int` v8 ) @signature `Lb/n;.a:(Lb/n;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11dac4.  v2:= 8192I;
  #L11dac8.  v5:= 0I;
  #L11daca.  v0:= v7.`b.n.e` @type ^`boolean` @kind boolean;
  #L11dace.  if v0 != 0 then goto L11dade;
  #L11dad2.  v0:= new `java.lang.IllegalArgumentException`;
  #L11dad6.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11dadc.  throw v0;
  #L11dade.  v0:= v7.`b.n.c` @type ^`int`;
  #L11dae2.  v0:= v0 + v8 @kind int;
  #L11dae4.  if v0 <= v2 then goto L11db46;
  #L11dae8.  v0:= v7.`b.n.d` @type ^`boolean` @kind boolean;
  #L11daec.  if v0 == 0 then goto L11dafc;
  #L11daf0.  v0:= new `java.lang.IllegalArgumentException`;
  #L11daf4.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11dafa.  throw v0;
  #L11dafc.  v0:= v7.`b.n.c` @type ^`int`;
  #L11db00.  v0:= v0 + v8 @kind int;
  #L11db02.  v1:= v7.`b.n.b` @type ^`int`;
  #L11db06.  v0:= v0 - v1 @kind int;
  #L11db08.  if v0 <= v2 then goto L11db18;
  #L11db0c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11db10.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11db16.  throw v0;
  #L11db18.  v0:= v7.`b.n.a` @type ^`byte`[] @kind object;
  #L11db1c.  v1:= v7.`b.n.b` @type ^`int`;
  #L11db20.  v2:= v7.`b.n.a` @type ^`byte`[] @kind object;
  #L11db24.  v3:= v7.`b.n.c` @type ^`int`;
  #L11db28.  v4:= v7.`b.n.b` @type ^`int`;
  #L11db2c.  v3:= v3 - v4 @kind int;
  #L11db2e.  call `arraycopy`(v0, v1, v2, v5, v3) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11db34.  v0:= v7.`b.n.c` @type ^`int`;
  #L11db38.  v1:= v7.`b.n.b` @type ^`int`;
  #L11db3c.  v0:= v0 - v1 @kind int;
  #L11db3e.  v7.`b.n.c` @type ^`int` := v0;
  #L11db42.  v7.`b.n.b` @type ^`int` := v5;
  #L11db46.  v0:= v6.`b.n.a` @type ^`byte`[] @kind object;
  #L11db4a.  v1:= v6.`b.n.b` @type ^`int`;
  #L11db4e.  v2:= v7.`b.n.a` @type ^`byte`[] @kind object;
  #L11db52.  v3:= v7.`b.n.c` @type ^`int`;
  #L11db56.  call `arraycopy`(v0, v1, v2, v3, v8) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11db5c.  v0:= v7.`b.n.c` @type ^`int`;
  #L11db60.  v0:= v0 + v8 @kind int;
  #L11db62.  v7.`b.n.c` @type ^`int` := v0;
  #L11db66.  v0:= v6.`b.n.b` @type ^`int`;
  #L11db6a.  v0:= v0 + v8 @kind int;
  #L11db6c.  v6.`b.n.b` @type ^`int` := v0;
  #L11db70.  return @kind void;
}
procedure `void` `b`(`b.n` v3 @kind this) @signature `Lb/n;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11db84.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11db88.  if v0 != v3 then goto L11db98;
  #L11db8c.  v0:= new `java.lang.IllegalStateException`;
  #L11db90.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L11db96.  throw v0;
  #L11db98.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11db9c.  v0:= v0.`b.n.e` @type ^`boolean` @kind boolean;
  #L11dba0.  if v0 != 0 then goto L11dba6;
  #L11dba4.  return @kind void;
  #L11dba6.  v0:= v3.`b.n.c` @type ^`int`;
  #L11dbaa.  v1:= v3.`b.n.b` @type ^`int`;
  #L11dbae.  v1:= v0 - v1 @kind int;
  #L11dbb2.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11dbb6.  v0:= v0.`b.n.c` @type ^`int`;
  #L11dbba.  v2:= v0 - 8192;
  #L11dbbe.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11dbc2.  v0:= v0.`b.n.d` @type ^`boolean` @kind boolean;
  #L11dbc6.  if v0 == 0 then goto L11dbea;
  #L11dbca.  v0:= 0I;
  #L11dbcc.  v0:= v0 + v2 @kind int;
  #L11dbce.  if v1 > v0 then goto L11dba4;
  #L11dbd2.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11dbd6.  call `a`(v3, v0, v1) @signature `Lb/n;.a:(Lb/n;I)V` @kind virtual;
  #L11dbdc.  call temp:= `a`(v3) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11dbe2.  call `a`(v3) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11dbe8.  goto L11dba4;
  #L11dbea.  v0:= v3.`b.n.g` @type ^`b.n` @kind object;
  #L11dbee.  v0:= v0.`b.n.b` @type ^`int`;
  #L11dbf2.  goto L11dbcc;
}
