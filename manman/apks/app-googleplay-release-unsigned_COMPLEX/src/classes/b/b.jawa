record `b.b` @kind class @AccessFlag FINAL {
}
global `byte`[] `@@b.b.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@b.b.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L1192b4.  v1:= 64I;
  #L1192b8.  v0:= new `byte`[v1];
  #L1192bc.  goto L1192d8;
  #L1192c2.  `@@b.b.a` @type ^`byte`[] := v0 @kind object;
  #L1192c6.  v0:= new `byte`[v1];
  #L1192ca.  goto L119320;
  #L1192d0.  `@@b.b.b` @type ^`byte`[] := v0 @kind object;
  #L1192d4.  return @kind void;
  #L1192d6.  
  #L1192d8.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 43I, 47I) @kind object;
  #L11931f.  goto L1192c2;
  #L119320.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 45I, 95I) @kind object;
  #L119367.  goto L1192d0;
}
procedure `java.lang.String` `a`(`byte`[] v1 @kind object) @signature `Lb/b;.a:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L119378.  v0:= `@@b.b.a` @type ^`byte`[] @kind object;
  #L11937c.  call temp:= `a`(v1, v0) @signature `Lb/b;.a:([B[B)Ljava/lang/String;` @kind static;
  #L119382.  v0:= temp @kind object;
  #L119384.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`byte`[] v8 @kind object, `byte`[] v9 @kind object) @signature `Lb/b;.a:([B[B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L119398.  v0:= 0I;
  #L11939a.  v7:= 61I;
  #L11939e.  v1:= length @variable v8;
  #L1193a0.  v1:= v1 + 2;
  #L1193a4.  v1:= v1 / 3;
  #L1193a8.  v1:= v1 * 4;
  #L1193ac.  v2:= new `byte`[v1];
  #L1193b0.  v1:= length @variable v8;
  #L1193b2.  v3:= length @variable v8;
  #L1193b4.  v3:= v3 %% 3;
  #L1193b8.  v3:= v1 - v3 @kind int;
  #L1193bc.  v1:= v0;
  #L1193be.  if v0 >= v3 then goto L119450;
  #L1193c2.  v4:= v1 + 1;
  #L1193c6.  v5:= v8[v0] @kind byte;
  #L1193ca.  v5:= v5 ^& 255;
  #L1193ce.  v5:= v5 ^> 2;
  #L1193d2.  v5:= v9[v5] @kind byte;
  #L1193d6.  v2[v1]:= v5 @kind byte;
  #L1193da.  v1:= v4 + 1;
  #L1193de.  v5:= v8[v0] @kind byte;
  #L1193e2.  v5:= v5 ^& 3;
  #L1193e6.  v5:= v5 ^< 4;
  #L1193ea.  v6:= v0 + 1;
  #L1193ee.  v6:= v8[v6] @kind byte;
  #L1193f2.  v6:= v6 ^& 255;
  #L1193f6.  v6:= v6 ^> 4;
  #L1193fa.  v5:= v5 ^| v6 @kind int;
  #L1193fc.  v5:= v9[v5] @kind byte;
  #L119400.  v2[v4]:= v5 @kind byte;
  #L119404.  v4:= v1 + 1;
  #L119408.  v5:= v0 + 1;
  #L11940c.  v5:= v8[v5] @kind byte;
  #L119410.  v5:= v5 ^& 15;
  #L119414.  v5:= v5 ^< 2;
  #L119418.  v6:= v0 + 2;
  #L11941c.  v6:= v8[v6] @kind byte;
  #L119420.  v6:= v6 ^& 255;
  #L119424.  v6:= v6 ^> 6;
  #L119428.  v5:= v5 ^| v6 @kind int;
  #L11942a.  v5:= v9[v5] @kind byte;
  #L11942e.  v2[v1]:= v5 @kind byte;
  #L119432.  v1:= v4 + 1;
  #L119436.  v5:= v0 + 2;
  #L11943a.  v5:= v8[v5] @kind byte;
  #L11943e.  v5:= v5 ^& 63;
  #L119442.  v5:= v9[v5] @kind byte;
  #L119446.  v2[v4]:= v5 @kind byte;
  #L11944a.  v0:= v0 + 3;
  #L11944e.  goto L1193be;
  #L119450.  v0:= length @variable v8;
  #L119452.  v0:= v0 %% 3;
  #L119456.  goto L119524;
  #Try_start0.  
  #L11945c.  v0:= new `java.lang.String`;
  #L119460.  v1:= "US-ASCII" @kind object;
  #L119464.  call `<init>`(v0, v2, v1) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #Try_end0.  
  #L11946a.  return v0 @kind object;
  #L11946c.  v0:= v1 + 1;
  #L119470.  v4:= v8[v3] @kind byte;
  #L119474.  v4:= v4 ^& 255;
  #L119478.  v4:= v4 ^> 2;
  #L11947c.  v4:= v9[v4] @kind byte;
  #L119480.  v2[v1]:= v4 @kind byte;
  #L119484.  v1:= v0 + 1;
  #L119488.  v3:= v8[v3] @kind byte;
  #L11948c.  v3:= v3 ^& 3;
  #L119490.  v3:= v3 ^< 4;
  #L119494.  v3:= v9[v3] @kind byte;
  #L119498.  v2[v0]:= v3 @kind byte;
  #L11949c.  v0:= v1 + 1;
  #L1194a0.  v2[v1]:= v7 @kind byte;
  #L1194a4.  v1:= v0 + 1;
  #L1194a8.  v2[v0]:= v7 @kind byte;
  #L1194ac.  goto L11945c;
  #L1194ae.  v0:= v1 + 1;
  #L1194b2.  v4:= v8[v3] @kind byte;
  #L1194b6.  v4:= v4 ^& 255;
  #L1194ba.  v4:= v4 ^> 2;
  #L1194be.  v4:= v9[v4] @kind byte;
  #L1194c2.  v2[v1]:= v4 @kind byte;
  #L1194c6.  v1:= v0 + 1;
  #L1194ca.  v4:= v8[v3] @kind byte;
  #L1194ce.  v4:= v4 ^& 3;
  #L1194d2.  v4:= v4 ^< 4;
  #L1194d6.  v5:= v3 + 1;
  #L1194da.  v5:= v8[v5] @kind byte;
  #L1194de.  v5:= v5 ^& 255;
  #L1194e2.  v5:= v5 ^> 4;
  #L1194e6.  v4:= v4 ^| v5 @kind int;
  #L1194e8.  v4:= v9[v4] @kind byte;
  #L1194ec.  v2[v0]:= v4 @kind byte;
  #L1194f0.  v0:= v1 + 1;
  #L1194f4.  v3:= v3 + 1;
  #L1194f8.  v3:= v8[v3] @kind byte;
  #L1194fc.  v3:= v3 ^& 15;
  #L119500.  v3:= v3 ^< 2;
  #L119504.  v3:= v9[v3] @kind byte;
  #L119508.  v2[v1]:= v3 @kind byte;
  #L11950c.  v1:= v0 + 1;
  #L119510.  v2[v0]:= v7 @kind byte;
  #L119514.  goto L11945c;
  #L119516.  v0:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L119518.  v1:= new `java.lang.AssertionError`;
  #L11951c.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L119522.  throw v1;
  #L119524.  switch v0
                  | 1 => goto L11946c
                  | 2 => goto L1194ae
                  | else => goto L11945c;
  catch `java.io.UnsupportedEncodingException` @[Try_start0..Try_end0] goto L119516;
}
