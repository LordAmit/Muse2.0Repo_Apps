record `b.l` @kind class @AccessFlag FINAL extends `b.d` @kind interface {
  `b.c` `b.l.a` @AccessFlag PUBLIC_FINAL;
  `b.q` `b.l.b` @AccessFlag PUBLIC_FINAL;
  `boolean` `b.l.c` @AccessFlag ;
}
procedure `void` `<init>`(`b.l` v2 @kind this, `b.q` v3 @kind object) @signature `Lb/l;.<init>:(Lb/q;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L11cb94.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11cb9a.  v0:= new `b.c`;
  #L11cb9e.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11cba4.  v2.`b.l.a` @type ^`b.c` := v0 @kind object;
  #L11cba8.  if v3 != 0 then goto L11cbbc;
  #L11cbac.  v0:= new `java.lang.NullPointerException`;
  #L11cbb0.  v1:= "sink == null" @kind object;
  #L11cbb4.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cbba.  throw v0;
  #L11cbbc.  v2.`b.l.b` @type ^`b.q` := v3 @kind object;
  #L11cbc0.  return @kind void;
}
procedure `b.s` `a`(`b.l` v1 @kind this) @signature `Lb/l;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11cbd4.  v0:= v1.`b.l.b` @type ^`b.q` @kind object;
  #L11cbd8.  call temp:= `a`(v0) @signature `Lb/q;.a:()Lb/s;` @kind interface;
  #L11cbde.  v0:= temp @kind object;
  #L11cbe0.  return v0 @kind object;
}
procedure `void` `a_`(`b.l` v2 @kind this, `b.c` v3 @kind object, `long` v4 ) @signature `Lb/l;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11cbf4.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11cbf8.  if v0 == 0 then goto L11cc0c;
  #L11cbfc.  v0:= new `java.lang.IllegalStateException`;
  #L11cc00.  v1:= "closed" @kind object;
  #L11cc04.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cc0a.  throw v0;
  #L11cc0c.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11cc10.  call `a_`(v0, v3, v4) @signature `Lb/c;.a_:(Lb/c;J)V` @kind virtual;
  #L11cc16.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11cc1c.  return @kind void;
}
procedure `b.d` `b`(`b.l` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lb/l;.b:(Ljava/lang/String;)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11cc30.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11cc34.  if v0 == 0 then goto L11cc48;
  #L11cc38.  v0:= new `java.lang.IllegalStateException`;
  #L11cc3c.  v1:= "closed" @kind object;
  #L11cc40.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cc46.  throw v0;
  #L11cc48.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11cc4c.  call temp:= `a`(v0, v3) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @kind virtual;
  #L11cc52.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11cc58.  v0:= temp @kind object;
  #L11cc5a.  return v0 @kind object;
}
procedure `b.c` `c`(`b.l` v1 @kind this) @signature `Lb/l;.c:()Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11cc6c.  v0:= v1.`b.l.a` @type ^`b.c` @kind object;
  #L11cc70.  return v0 @kind object;
}
procedure `b.d` `c`(`b.l` v2 @kind this, `byte`[] v3 @kind object) @signature `Lb/l;.c:([B)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11cc84.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11cc88.  if v0 == 0 then goto L11cc9c;
  #L11cc8c.  v0:= new `java.lang.IllegalStateException`;
  #L11cc90.  v1:= "closed" @kind object;
  #L11cc94.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cc9a.  throw v0;
  #L11cc9c.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11cca0.  call temp:= `b`(v0, v3) @signature `Lb/c;.b:([B)Lb/c;` @kind virtual;
  #L11cca6.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11ccac.  v0:= temp @kind object;
  #L11ccae.  return v0 @kind object;
}
procedure `b.d` `c`(`b.l` v2 @kind this, `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lb/l;.c:([BII)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11ccc0.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11ccc4.  if v0 == 0 then goto L11ccd8;
  #L11ccc8.  v0:= new `java.lang.IllegalStateException`;
  #L11cccc.  v1:= "closed" @kind object;
  #L11ccd0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ccd6.  throw v0;
  #L11ccd8.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11ccdc.  call temp:= `b`(v0, v3, v4, v5) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L11cce2.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11cce8.  v0:= temp @kind object;
  #L11ccea.  return v0 @kind object;
}
procedure `void` `close`(`b.l` v6 @kind this) @signature `Lb/l;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11ccfc.  v0:= v6.`b.l.c` @type ^`boolean` @kind boolean;
  #L11cd00.  if v0 == 0 then goto L11cd06;
  #L11cd04.  return @kind void;
  #L11cd06.  v0:= 0I;
  #Try_start0.  
  #L11cd08.  v1:= v6.`b.l.a` @type ^`b.c` @kind object;
  #L11cd0c.  v2:= v1.`b.c.b` @type ^`long` @kind wide;
  #L11cd10.  v4:= 0L;
  #L11cd14.  v1:= lcmp(v2, v4);
  #L11cd18.  if v1 <= 0 then goto L11cd32;
  #L11cd1c.  v1:= v6.`b.l.b` @type ^`b.q` @kind object;
  #L11cd20.  v2:= v6.`b.l.a` @type ^`b.c` @kind object;
  #L11cd24.  v3:= v6.`b.l.a` @type ^`b.c` @kind object;
  #L11cd28.  v4:= v3.`b.c.b` @type ^`long` @kind wide;
  #L11cd2c.  call `a_`(v1, v2, v4) @signature `Lb/q;.a_:(Lb/c;J)V` @kind interface;
  #Try_end0.  
  #Try_start1.  
  #L11cd32.  v1:= v6.`b.l.b` @type ^`b.q` @kind object;
  #L11cd36.  call `close`(v1) @signature `Lb/q;.close:()V` @kind interface;
  #Try_end1.  
  #L11cd3c.  v1:= 1I;
  #L11cd3e.  v6.`b.l.c` @type ^`boolean` := v1 @kind boolean;
  #L11cd42.  if v0 == 0 then goto L11cd04;
  #L11cd46.  call `a`(v0) @signature `Lb/t;.a:(Ljava/lang/Throwable;)V` @kind static;
  #L11cd4c.  goto L11cd04;
  #L11cd4e.  v1:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11cd50.  if v0 != 0 then goto L11cd3c;
  #L11cd54.  v0:= v1 @kind object;
  #L11cd56.  goto L11cd3c;
  #L11cd58.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L11cd5a.  goto L11cd32;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L11cd58;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L11cd4e;
}
procedure `void` `flush`(`b.l` v4 @kind this) @signature `Lb/l;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11cd88.  v0:= v4.`b.l.c` @type ^`boolean` @kind boolean;
  #L11cd8c.  if v0 == 0 then goto L11cda0;
  #L11cd90.  v0:= new `java.lang.IllegalStateException`;
  #L11cd94.  v1:= "closed" @kind object;
  #L11cd98.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cd9e.  throw v0;
  #L11cda0.  v0:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L11cda4.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11cda8.  v2:= 0L;
  #L11cdac.  v0:= lcmp(v0, v2);
  #L11cdb0.  if v0 <= 0 then goto L11cdca;
  #L11cdb4.  v0:= v4.`b.l.b` @type ^`b.q` @kind object;
  #L11cdb8.  v1:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L11cdbc.  v2:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L11cdc0.  v2:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11cdc4.  call `a_`(v0, v1, v2) @signature `Lb/q;.a_:(Lb/c;J)V` @kind interface;
  #L11cdca.  v0:= v4.`b.l.b` @type ^`b.q` @kind object;
  #L11cdce.  call `flush`(v0) @signature `Lb/q;.flush:()V` @kind interface;
  #L11cdd4.  return @kind void;
}
procedure `b.d` `g`(`b.l` v2 @kind this, `int` v3 ) @signature `Lb/l;.g:(I)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11cde8.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11cdec.  if v0 == 0 then goto L11ce00;
  #L11cdf0.  v0:= new `java.lang.IllegalStateException`;
  #L11cdf4.  v1:= "closed" @kind object;
  #L11cdf8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cdfe.  throw v0;
  #L11ce00.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11ce04.  call temp:= `d`(v0, v3) @signature `Lb/c;.d:(I)Lb/c;` @kind virtual;
  #L11ce0a.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11ce10.  v0:= temp @kind object;
  #L11ce12.  return v0 @kind object;
}
procedure `b.d` `h`(`b.l` v2 @kind this, `int` v3 ) @signature `Lb/l;.h:(I)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11ce24.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11ce28.  if v0 == 0 then goto L11ce3c;
  #L11ce2c.  v0:= new `java.lang.IllegalStateException`;
  #L11ce30.  v1:= "closed" @kind object;
  #L11ce34.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ce3a.  throw v0;
  #L11ce3c.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11ce40.  call temp:= `c`(v0, v3) @signature `Lb/c;.c:(I)Lb/c;` @kind virtual;
  #L11ce46.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11ce4c.  v0:= temp @kind object;
  #L11ce4e.  return v0 @kind object;
}
procedure `b.d` `i`(`b.l` v2 @kind this, `int` v3 ) @signature `Lb/l;.i:(I)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11ce60.  v0:= v2.`b.l.c` @type ^`boolean` @kind boolean;
  #L11ce64.  if v0 == 0 then goto L11ce78;
  #L11ce68.  v0:= new `java.lang.IllegalStateException`;
  #L11ce6c.  v1:= "closed" @kind object;
  #L11ce70.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ce76.  throw v0;
  #L11ce78.  v0:= v2.`b.l.a` @type ^`b.c` @kind object;
  #L11ce7c.  call temp:= `b`(v0, v3) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11ce82.  call temp:= `u`(v2) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11ce88.  v0:= temp @kind object;
  #L11ce8a.  return v0 @kind object;
}
procedure `b.d` `j`(`b.l` v3 @kind this, `long` v4 ) @signature `Lb/l;.j:(J)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11ce9c.  v0:= v3.`b.l.c` @type ^`boolean` @kind boolean;
  #L11cea0.  if v0 == 0 then goto L11ceb4;
  #L11cea4.  v0:= new `java.lang.IllegalStateException`;
  #L11cea8.  v1:= "closed" @kind object;
  #L11ceac.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ceb2.  throw v0;
  #L11ceb4.  v0:= v3.`b.l.a` @type ^`b.c` @kind object;
  #L11ceb8.  call temp:= `i`(v0, v4) @signature `Lb/c;.i:(J)Lb/c;` @kind virtual;
  #L11cebe.  call temp:= `u`(v3) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11cec4.  v0:= temp @kind object;
  #L11cec6.  return v0 @kind object;
}
procedure `b.d` `k`(`b.l` v3 @kind this, `long` v4 ) @signature `Lb/l;.k:(J)Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11ced8.  v0:= v3.`b.l.c` @type ^`boolean` @kind boolean;
  #L11cedc.  if v0 == 0 then goto L11cef0;
  #L11cee0.  v0:= new `java.lang.IllegalStateException`;
  #L11cee4.  v1:= "closed" @kind object;
  #L11cee8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ceee.  throw v0;
  #L11cef0.  v0:= v3.`b.l.a` @type ^`b.c` @kind object;
  #L11cef4.  call temp:= `h`(v0, v4) @signature `Lb/c;.h:(J)Lb/c;` @kind virtual;
  #L11cefa.  call temp:= `u`(v3) @signature `Lb/l;.u:()Lb/d;` @kind virtual;
  #L11cf00.  v0:= temp @kind object;
  #L11cf02.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`b.l` v2 @kind this) @signature `Lb/l;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11cf14.  v0:= new `java.lang.StringBuilder`;
  #L11cf18.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11cf1e.  v1:= "buffer(" @kind object;
  #L11cf22.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11cf28.  v0:= temp @kind object;
  #L11cf2a.  v1:= v2.`b.l.b` @type ^`b.q` @kind object;
  #L11cf2e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11cf34.  v0:= temp @kind object;
  #L11cf36.  v1:= ")" @kind object;
  #L11cf3a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11cf40.  v0:= temp @kind object;
  #L11cf42.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11cf48.  v0:= temp @kind object;
  #L11cf4a.  return v0 @kind object;
}
procedure `b.d` `u`(`b.l` v4 @kind this) @signature `Lb/l;.u:()Lb/d;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11cf5c.  v0:= v4.`b.l.c` @type ^`boolean` @kind boolean;
  #L11cf60.  if v0 == 0 then goto L11cf74;
  #L11cf64.  v0:= new `java.lang.IllegalStateException`;
  #L11cf68.  v1:= "closed" @kind object;
  #L11cf6c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11cf72.  throw v0;
  #L11cf74.  v0:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L11cf78.  call temp:= `g`(v0) @signature `Lb/c;.g:()J` @kind virtual;
  #L11cf7e.  v0:= temp @kind wide;
  #L11cf80.  v2:= 0L;
  #L11cf84.  v2:= lcmp(v0, v2);
  #L11cf88.  if v2 <= 0 then goto L11cf9a;
  #L11cf8c.  v2:= v4.`b.l.b` @type ^`b.q` @kind object;
  #L11cf90.  v3:= v4.`b.l.a` @type ^`b.c` @kind object;
  #L11cf94.  call `a_`(v2, v3, v0) @signature `Lb/q;.a_:(Lb/c;J)V` @kind interface;
  #L11cf9a.  return v4 @kind object;
}
