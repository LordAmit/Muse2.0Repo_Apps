record `b.j` @kind class @AccessFlag PUBLIC_FINAL extends `b.r` @kind interface {
  `b.e` `b.j.a` @AccessFlag PRIVATE_FINAL;
  `java.util.zip.Inflater` `b.j.b` @AccessFlag PRIVATE_FINAL;
  `int` `b.j.c` @AccessFlag PRIVATE;
  `boolean` `b.j.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`b.j` v2 @kind this, `b.e` v3 @kind object, `java.util.zip.Inflater` v4 @kind object) @signature `Lb/j;.<init>:(Lb/e;Ljava/util/zip/Inflater;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L11c318.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11c31e.  if v3 != 0 then goto L11c332;
  #L11c322.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c326.  v1:= "source == null" @kind object;
  #L11c32a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c330.  throw v0;
  #L11c332.  if v4 != 0 then goto L11c346;
  #L11c336.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c33a.  v1:= "inflater == null" @kind object;
  #L11c33e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c344.  throw v0;
  #L11c346.  v2.`b.j.a` @type ^`b.e` := v3 @kind object;
  #L11c34a.  v2.`b.j.b` @type ^`java.util.zip.Inflater` := v4 @kind object;
  #L11c34e.  return @kind void;
}
procedure `void` `c`(`b.j` v4 @kind this) @signature `Lb/j;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11c360.  v0:= v4.`b.j.c` @type ^`int`;
  #L11c364.  if v0 != 0 then goto L11c36a;
  #L11c368.  return @kind void;
  #L11c36a.  v0:= v4.`b.j.c` @type ^`int`;
  #L11c36e.  v1:= v4.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11c372.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L11c378.  v1:= temp;
  #L11c37a.  v0:= v0 - v1 @kind int;
  #L11c37c.  v1:= v4.`b.j.c` @type ^`int`;
  #L11c380.  v1:= v1 - v0 @kind int;
  #L11c382.  v4.`b.j.c` @type ^`int` := v1;
  #L11c386.  v1:= v4.`b.j.a` @type ^`b.e` @kind object;
  #L11c38a.  v2:= (`long`) v0 @kind i2l;
  #L11c38c.  call `g`(v1, v2) @signature `Lb/e;.g:(J)V` @kind interface;
  #L11c392.  goto L11c368;
}
procedure `long` `a`(`b.j` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `Lb/j;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11c3a4.  v0:= 0L;
  #L11c3a8.  v2:= lcmp(v8, v0);
  #L11c3ac.  if v2 >= 0 then goto L11c3e2;
  #L11c3b0.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c3b4.  v1:= new `java.lang.StringBuilder`;
  #L11c3b8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11c3be.  v2:= "byteCount < 0: " @kind object;
  #L11c3c2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c3c8.  v1:= temp @kind object;
  #L11c3ca.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11c3d0.  v1:= temp @kind object;
  #L11c3d2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11c3d8.  v1:= temp @kind object;
  #L11c3da.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c3e0.  throw v0;
  #L11c3e2.  v2:= v6.`b.j.d` @type ^`boolean` @kind boolean;
  #L11c3e6.  if v2 == 0 then goto L11c3fa;
  #L11c3ea.  v0:= new `java.lang.IllegalStateException`;
  #L11c3ee.  v1:= "closed" @kind object;
  #L11c3f2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c3f8.  throw v0;
  #L11c3fa.  v2:= lcmp(v8, v0);
  #L11c3fe.  if v2 != 0 then goto L11c404;
  #L11c402.  return v0 @kind wide;
  #L11c404.  call temp:= `b`(v6) @signature `Lb/j;.b:()Z` @kind virtual;
  #L11c40a.  v0:= temp;
  #L11c40c.  v1:= 1I;
  #Try_start0.  
  #L11c40e.  call temp:= `e`(v7, v1) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11c414.  v1:= temp @kind object;
  #L11c416.  v2:= v6.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11c41a.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11c41e.  v4:= v1.`b.n.c` @type ^`int`;
  #L11c422.  v5:= v1.`b.n.c` @type ^`int`;
  #L11c426.  v5:= v5 - 8192;
  #L11c42a.  call temp:= `inflate`(v2, v3, v4, v5) @signature `Ljava/util/zip/Inflater;.inflate:([BII)I` @kind virtual;
  #L11c430.  v2:= temp;
  #L11c432.  if v2 <= 0 then goto L11c450;
  #L11c436.  v0:= v1.`b.n.c` @type ^`int`;
  #L11c43a.  v0:= v0 + v2 @kind int;
  #L11c43c.  v1.`b.n.c` @type ^`int` := v0;
  #L11c440.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11c444.  v4:= (`long`) v2 @kind i2l;
  #L11c446.  v0:= v0 + v4 @kind long;
  #L11c448.  v7.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11c44c.  v0:= (`long`) v2 @kind i2l;
  #L11c44e.  goto L11c402;
  #L11c450.  v2:= v6.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11c454.  call temp:= `finished`(v2) @signature `Ljava/util/zip/Inflater;.finished:()Z` @kind virtual;
  #L11c45a.  v2:= temp;
  #L11c45c.  if v2 != 0 then goto L11c470;
  #L11c460.  v2:= v6.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11c464.  call temp:= `needsDictionary`(v2) @signature `Ljava/util/zip/Inflater;.needsDictionary:()Z` @kind virtual;
  #L11c46a.  v2:= temp;
  #L11c46c.  if v2 == 0 then goto L11c49a;
  #L11c470.  call `c`(v6) @signature `Lb/j;.c:()V` @kind direct;
  #L11c476.  v0:= v1.`b.n.b` @type ^`int`;
  #L11c47a.  v2:= v1.`b.n.c` @type ^`int`;
  #L11c47e.  if v0 != v2 then goto L11c494;
  #L11c482.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11c488.  v0:= temp @kind object;
  #L11c48a.  v7.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L11c48e.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11c494.  v0:= -1L;
  #L11c498.  goto L11c402;
  #L11c49a.  if v0 == 0 then goto L11c404;
  #L11c49e.  v0:= new `java.io.EOFException`;
  #L11c4a2.  v1:= "source exhausted prematurely" @kind object;
  #L11c4a6.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c4ac.  throw v0;
  #Try_end0.  
  #L11c4ae.  v0:= Exception @type ^`java.util.zip.DataFormatException` @kind object;
  #L11c4b0.  v1:= new `java.io.IOException`;
  #L11c4b4.  call `<init>`(v1, v0) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/Throwable;)V` @kind direct;
  #L11c4ba.  throw v1;
  catch `java.util.zip.DataFormatException` @[Try_start0..Try_end0] goto L11c4ae;
}
procedure `b.s` `a`(`b.j` v1 @kind this) @signature `Lb/j;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c4dc.  v0:= v1.`b.j.a` @type ^`b.e` @kind object;
  #L11c4e0.  call temp:= `a`(v0) @signature `Lb/e;.a:()Lb/s;` @kind interface;
  #L11c4e6.  v0:= temp @kind object;
  #L11c4e8.  return v0 @kind object;
}
procedure `boolean` `b`(`b.j` v5 @kind this) @signature `Lb/j;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11c4fc.  v0:= 0I;
  #L11c4fe.  v1:= v5.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11c502.  call temp:= `needsInput`(v1) @signature `Ljava/util/zip/Inflater;.needsInput:()Z` @kind virtual;
  #L11c508.  v1:= temp;
  #L11c50a.  if v1 != 0 then goto L11c510;
  #L11c50e.  return v0;
  #L11c510.  call `c`(v5) @signature `Lb/j;.c:()V` @kind direct;
  #L11c516.  v1:= v5.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11c51a.  call temp:= `getRemaining`(v1) @signature `Ljava/util/zip/Inflater;.getRemaining:()I` @kind virtual;
  #L11c520.  v1:= temp;
  #L11c522.  if v1 == 0 then goto L11c536;
  #L11c526.  v0:= new `java.lang.IllegalStateException`;
  #L11c52a.  v1:= "?" @kind object;
  #L11c52e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c534.  throw v0;
  #L11c536.  v1:= v5.`b.j.a` @type ^`b.e` @kind object;
  #L11c53a.  call temp:= `e`(v1) @signature `Lb/e;.e:()Z` @kind interface;
  #L11c540.  v1:= temp;
  #L11c542.  if v1 == 0 then goto L11c54a;
  #L11c546.  v0:= 1I;
  #L11c548.  goto L11c50e;
  #L11c54a.  v1:= v5.`b.j.a` @type ^`b.e` @kind object;
  #L11c54e.  call temp:= `c`(v1) @signature `Lb/e;.c:()Lb/c;` @kind interface;
  #L11c554.  v1:= temp @kind object;
  #L11c556.  v1:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L11c55a.  v2:= v1.`b.n.c` @type ^`int`;
  #L11c55e.  v3:= v1.`b.n.b` @type ^`int`;
  #L11c562.  v2:= v2 - v3 @kind int;
  #L11c564.  v5.`b.j.c` @type ^`int` := v2;
  #L11c568.  v2:= v5.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11c56c.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11c570.  v1:= v1.`b.n.b` @type ^`int`;
  #L11c574.  v4:= v5.`b.j.c` @type ^`int`;
  #L11c578.  call `setInput`(v2, v3, v1, v4) @signature `Ljava/util/zip/Inflater;.setInput:([BII)V` @kind virtual;
  #L11c57e.  goto L11c50e;
}
procedure `void` `close`(`b.j` v1 @kind this) @signature `Lb/j;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11c590.  v0:= v1.`b.j.d` @type ^`boolean` @kind boolean;
  #L11c594.  if v0 == 0 then goto L11c59a;
  #L11c598.  return @kind void;
  #L11c59a.  v0:= v1.`b.j.b` @type ^`java.util.zip.Inflater` @kind object;
  #L11c59e.  call `end`(v0) @signature `Ljava/util/zip/Inflater;.end:()V` @kind virtual;
  #L11c5a4.  v0:= 1I;
  #L11c5a6.  v1.`b.j.d` @type ^`boolean` := v0 @kind boolean;
  #L11c5aa.  v0:= v1.`b.j.a` @type ^`b.e` @kind object;
  #L11c5ae.  call `close`(v0) @signature `Lb/e;.close:()V` @kind interface;
  #L11c5b4.  goto L11c598;
}
