record `b.m` @kind class @AccessFlag FINAL extends `b.e` @kind interface {
  `b.c` `b.m.a` @AccessFlag PUBLIC_FINAL;
  `b.r` `b.m.b` @AccessFlag PUBLIC_FINAL;
  `boolean` `b.m.c` @AccessFlag ;
}
procedure `void` `<init>`(`b.m` v2 @kind this, `b.r` v3 @kind object) @signature `Lb/m;.<init>:(Lb/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L11d184.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11d18a.  v0:= new `b.c`;
  #L11d18e.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11d194.  v2.`b.m.a` @type ^`b.c` := v0 @kind object;
  #L11d198.  if v3 != 0 then goto L11d1ac;
  #L11d19c.  v0:= new `java.lang.NullPointerException`;
  #L11d1a0.  v1:= "source == null" @kind object;
  #L11d1a4.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d1aa.  throw v0;
  #L11d1ac.  v2.`b.m.b` @type ^`b.r` := v3 @kind object;
  #L11d1b0.  return @kind void;
}
procedure `long` `a`(`b.m` v2 @kind this, `byte` v3 ) @signature `Lb/m;.a:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d1c4.  v0:= 0L;
  #L11d1c8.  call temp:= `a`(v2, v3, v0) @signature `Lb/m;.a:(BJ)J` @kind virtual;
  #L11d1ce.  v0:= temp @kind wide;
  #L11d1d0.  return v0 @kind wide;
}
procedure `long` `a`(`b.m` v8 @kind this, `byte` v9 , `long` v10 ) @signature `Lb/m;.a:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11d1e4.  v2:= -1L;
  #L11d1e8.  v0:= v8.`b.m.c` @type ^`boolean` @kind boolean;
  #L11d1ec.  if v0 == 0 then goto L11d208;
  #L11d1f0.  v0:= new `java.lang.IllegalStateException`;
  #L11d1f4.  v1:= "closed" @kind object;
  #L11d1f8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d1fe.  throw v0;
  #L11d200.  call temp:= `max`(v10, v0) @signature `Ljava/lang/Math;.max:(JJ)J` @kind static;
  #L11d206.  v10:= temp @kind wide;
  #L11d208.  v0:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11d20c.  call temp:= `a`(v0, v9, v10) @signature `Lb/c;.a:(BJ)J` @kind virtual;
  #L11d212.  v0:= temp @kind wide;
  #L11d214.  v4:= lcmp(v0, v2);
  #L11d218.  if v4 == 0 then goto L11d21e;
  #L11d21c.  return v0 @kind wide;
  #L11d21e.  v0:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11d222.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11d226.  v4:= v8.`b.m.b` @type ^`b.r` @kind object;
  #L11d22a.  v5:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11d22e.  v6:= 8192L;
  #L11d232.  call temp:= `a`(v4, v5, v6) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11d238.  v4:= temp @kind wide;
  #L11d23a.  v4:= lcmp(v4, v2);
  #L11d23e.  if v4 != 0 then goto L11d200;
  #L11d242.  v0:= v2 @kind wide;
  #L11d244.  goto L11d21c;
}
procedure `long` `a`(`b.m` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `Lb/m;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11d258.  v4:= 0L;
  #L11d25c.  v0:= -1L;
  #L11d260.  if v7 != 0 then goto L11d274;
  #L11d264.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d268.  v1:= "sink == null" @kind object;
  #L11d26c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d272.  throw v0;
  #L11d274.  v2:= lcmp(v8, v4);
  #L11d278.  if v2 >= 0 then goto L11d2ae;
  #L11d27c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d280.  v1:= new `java.lang.StringBuilder`;
  #L11d284.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11d28a.  v2:= "byteCount < 0: " @kind object;
  #L11d28e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d294.  v1:= temp @kind object;
  #L11d296.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d29c.  v1:= temp @kind object;
  #L11d29e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11d2a4.  v1:= temp @kind object;
  #L11d2a6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d2ac.  throw v0;
  #L11d2ae.  v2:= v6.`b.m.c` @type ^`boolean` @kind boolean;
  #L11d2b2.  if v2 == 0 then goto L11d2c6;
  #L11d2b6.  v0:= new `java.lang.IllegalStateException`;
  #L11d2ba.  v1:= "closed" @kind object;
  #L11d2be.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d2c4.  throw v0;
  #L11d2c6.  v2:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11d2ca.  v2:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11d2ce.  v2:= lcmp(v2, v4);
  #L11d2d2.  if v2 != 0 then goto L11d2f4;
  #L11d2d6.  v2:= v6.`b.m.b` @type ^`b.r` @kind object;
  #L11d2da.  v3:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11d2de.  v4:= 8192L;
  #L11d2e2.  call temp:= `a`(v2, v3, v4) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11d2e8.  v2:= temp @kind wide;
  #L11d2ea.  v2:= lcmp(v2, v0);
  #L11d2ee.  if v2 != 0 then goto L11d2f4;
  #L11d2f2.  return v0 @kind wide;
  #L11d2f4.  v0:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11d2f8.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11d2fc.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11d302.  v0:= temp @kind wide;
  #L11d304.  v2:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11d308.  call temp:= `a`(v2, v7, v0) @signature `Lb/c;.a:(Lb/c;J)J` @kind virtual;
  #L11d30e.  v0:= temp @kind wide;
  #L11d310.  goto L11d2f2;
}
procedure `b.s` `a`(`b.m` v1 @kind this) @signature `Lb/m;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d324.  v0:= v1.`b.m.b` @type ^`b.r` @kind object;
  #L11d328.  call temp:= `a`(v0) @signature `Lb/r;.a:()Lb/s;` @kind interface;
  #L11d32e.  v0:= temp @kind object;
  #L11d330.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`b.m` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lb/m;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d344.  if v3 != 0 then goto L11d358;
  #L11d348.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d34c.  v1:= "charset == null" @kind object;
  #L11d350.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d356.  throw v0;
  #L11d358.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11d35c.  v1:= v2.`b.m.b` @type ^`b.r` @kind object;
  #L11d360.  call temp:= `a`(v0, v1) @signature `Lb/c;.a:(Lb/r;)J` @kind virtual;
  #L11d366.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11d36a.  call temp:= `a`(v0, v3) @signature `Lb/c;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L11d370.  v0:= temp @kind object;
  #L11d372.  return v0 @kind object;
}
procedure `void` `a`(`b.m` v1 @kind this, `long` v2 ) @signature `Lb/m;.a:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d384.  call temp:= `b`(v1, v2) @signature `Lb/m;.b:(J)Z` @kind virtual;
  #L11d38a.  v0:= temp;
  #L11d38c.  if v0 != 0 then goto L11d39c;
  #L11d390.  v0:= new `java.io.EOFException`;
  #L11d394.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11d39a.  throw v0;
  #L11d39c.  return @kind void;
}
procedure `boolean` `a`(`b.m` v7 @kind this, `long` v8 , `b.f` v10 @kind object) @signature `Lb/m;.a:(JLb/f;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11d3b0.  v5:= 0I;
  #L11d3b2.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11d3b8.  v6:= temp;
  #L11d3ba.  v1:= v7 @kind object;
  #L11d3bc.  v2:= v8 @kind wide;
  #L11d3be.  v4:= v10 @kind object;
  #L11d3c0.  call temp:= `a`(v1, v2, v4, v5, v6) @signature `Lb/m;.a:(JLb/f;II)Z` @kind virtual;
  #L11d3c6.  v0:= temp;
  #L11d3c8.  return v0;
}
procedure `boolean` `a`(`b.m` v7 @kind this, `long` v8 , `b.f` v10 @kind object, `int` v11 , `int` v12 ) @signature `Lb/m;.a:(JLb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11d3dc.  v0:= 0I;
  #L11d3de.  v1:= v7.`b.m.c` @type ^`boolean` @kind boolean;
  #L11d3e2.  if v1 == 0 then goto L11d3f6;
  #L11d3e6.  v0:= new `java.lang.IllegalStateException`;
  #L11d3ea.  v1:= "closed" @kind object;
  #L11d3ee.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d3f4.  throw v0;
  #L11d3f6.  v2:= 0L;
  #L11d3fa.  v1:= lcmp(v8, v2);
  #L11d3fe.  if v1 < 0 then goto L11d418;
  #L11d402.  if v11 < 0 then goto L11d418;
  #L11d406.  if v12 < 0 then goto L11d418;
  #L11d40a.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11d410.  v1:= temp;
  #L11d412.  v1:= v1 - v11 @kind int;
  #L11d414.  if v1 >= v12 then goto L11d41a;
  #L11d418.  return v0;
  #L11d41a.  v1:= v0;
  #L11d41c.  if v1 >= v12 then goto L11d458;
  #L11d420.  v2:= (`long`) v1 @kind i2l;
  #L11d422.  v2:= v2 + v8 @kind long;
  #L11d424.  v4:= 1L;
  #L11d428.  v4:= v4 + v2 @kind long;
  #L11d42a.  call temp:= `b`(v7, v4) @signature `Lb/m;.b:(J)Z` @kind virtual;
  #L11d430.  v4:= temp;
  #L11d432.  if v4 == 0 then goto L11d418;
  #L11d436.  v4:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L11d43a.  call temp:= `b`(v4, v2) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L11d440.  v2:= temp;
  #L11d442.  v3:= v11 + v1 @kind int;
  #L11d446.  call temp:= `a`(v10, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L11d44c.  v3:= temp;
  #L11d44e.  if v2 != v3 then goto L11d418;
  #L11d452.  v1:= v1 + 1;
  #L11d456.  goto L11d41c;
  #L11d458.  v0:= 1I;
  #L11d45a.  goto L11d418;
}
procedure `boolean` `b`(`b.m` v5 @kind this, `long` v6 ) @signature `Lb/m;.b:(J)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11d46c.  v0:= 0L;
  #L11d470.  v0:= lcmp(v6, v0);
  #L11d474.  if v0 >= 0 then goto L11d4aa;
  #L11d478.  v0:= new `java.lang.IllegalArgumentException`;
  #L11d47c.  v1:= new `java.lang.StringBuilder`;
  #L11d480.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11d486.  v2:= "byteCount < 0: " @kind object;
  #L11d48a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d490.  v1:= temp @kind object;
  #L11d492.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d498.  v1:= temp @kind object;
  #L11d49a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11d4a0.  v1:= temp @kind object;
  #L11d4a2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d4a8.  throw v0;
  #L11d4aa.  v0:= v5.`b.m.c` @type ^`boolean` @kind boolean;
  #L11d4ae.  if v0 == 0 then goto L11d4c2;
  #L11d4b2.  v0:= new `java.lang.IllegalStateException`;
  #L11d4b6.  v1:= "closed" @kind object;
  #L11d4ba.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d4c0.  throw v0;
  #L11d4c2.  v0:= v5.`b.m.a` @type ^`b.c` @kind object;
  #L11d4c6.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11d4ca.  v0:= lcmp(v0, v6);
  #L11d4ce.  if v0 >= 0 then goto L11d4f6;
  #L11d4d2.  v0:= v5.`b.m.b` @type ^`b.r` @kind object;
  #L11d4d6.  v1:= v5.`b.m.a` @type ^`b.c` @kind object;
  #L11d4da.  v2:= 8192L;
  #L11d4de.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11d4e4.  v0:= temp @kind wide;
  #L11d4e6.  v2:= -1L;
  #L11d4ea.  v0:= lcmp(v0, v2);
  #L11d4ee.  if v0 != 0 then goto L11d4c2;
  #L11d4f2.  v0:= 0I;
  #L11d4f4.  return v0;
  #L11d4f6.  v0:= 1I;
  #L11d4f8.  goto L11d4f4;
}
procedure `b.c` `c`(`b.m` v1 @kind this) @signature `Lb/m;.c:()Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d50c.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11d510.  return v0 @kind object;
}
procedure `b.f` `c`(`b.m` v1 @kind this, `long` v2 ) @signature `Lb/m;.c:(J)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d524.  call `a`(v1, v2) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11d52a.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11d52e.  call temp:= `c`(v0, v2) @signature `Lb/c;.c:(J)Lb/f;` @kind virtual;
  #L11d534.  v0:= temp @kind object;
  #L11d536.  return v0 @kind object;
}
procedure `void` `close`(`b.m` v1 @kind this) @signature `Lb/m;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d548.  v0:= v1.`b.m.c` @type ^`boolean` @kind boolean;
  #L11d54c.  if v0 == 0 then goto L11d552;
  #L11d550.  return @kind void;
  #L11d552.  v0:= 1I;
  #L11d554.  v1.`b.m.c` @type ^`boolean` := v0 @kind boolean;
  #L11d558.  v0:= v1.`b.m.b` @type ^`b.r` @kind object;
  #L11d55c.  call `close`(v0) @signature `Lb/r;.close:()V` @kind interface;
  #L11d562.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11d566.  call `r`(v0) @signature `Lb/c;.r:()V` @kind virtual;
  #L11d56c.  goto L11d550;
}
procedure `boolean` `e`(`b.m` v4 @kind this) @signature `Lb/m;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11d580.  v0:= v4.`b.m.c` @type ^`boolean` @kind boolean;
  #L11d584.  if v0 == 0 then goto L11d598;
  #L11d588.  v0:= new `java.lang.IllegalStateException`;
  #L11d58c.  v1:= "closed" @kind object;
  #L11d590.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d596.  throw v0;
  #L11d598.  v0:= v4.`b.m.a` @type ^`b.c` @kind object;
  #L11d59c.  call temp:= `e`(v0) @signature `Lb/c;.e:()Z` @kind virtual;
  #L11d5a2.  v0:= temp;
  #L11d5a4.  if v0 == 0 then goto L11d5cc;
  #L11d5a8.  v0:= v4.`b.m.b` @type ^`b.r` @kind object;
  #L11d5ac.  v1:= v4.`b.m.a` @type ^`b.c` @kind object;
  #L11d5b0.  v2:= 8192L;
  #L11d5b4.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11d5ba.  v0:= temp @kind wide;
  #L11d5bc.  v2:= -1L;
  #L11d5c0.  v0:= lcmp(v0, v2);
  #L11d5c4.  if v0 != 0 then goto L11d5cc;
  #L11d5c8.  v0:= 1I;
  #L11d5ca.  return v0;
  #L11d5cc.  v0:= 0I;
  #L11d5ce.  goto L11d5ca;
}
procedure `java.io.InputStream` `f`(`b.m` v1 @kind this) @signature `Lb/m;.f:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d5e0.  v0:= new `b.m$1`;
  #L11d5e4.  call `<init>`(v0, v1) @signature `Lb/m$1;.<init>:(Lb/m;)V` @kind direct;
  #L11d5ea.  return v0 @kind object;
}
procedure `byte`[] `f`(`b.m` v1 @kind this, `long` v2 ) @signature `Lb/m;.f:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11d5fc.  call `a`(v1, v2) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11d602.  v0:= v1.`b.m.a` @type ^`b.c` @kind object;
  #L11d606.  call temp:= `f`(v0, v2) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #L11d60c.  v0:= temp @kind object;
  #L11d60e.  return v0 @kind object;
}
procedure `void` `g`(`b.m` v7 @kind this, `long` v8 ) @signature `Lb/m;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11d620.  v4:= 0L;
  #L11d624.  v0:= v7.`b.m.c` @type ^`boolean` @kind boolean;
  #L11d628.  if v0 == 0 then goto L11d65c;
  #L11d62c.  v0:= new `java.lang.IllegalStateException`;
  #L11d630.  v1:= "closed" @kind object;
  #L11d634.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d63a.  throw v0;
  #L11d63c.  v0:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L11d640.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L11d646.  v0:= temp @kind wide;
  #L11d648.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11d64e.  v0:= temp @kind wide;
  #L11d650.  v2:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L11d654.  call `g`(v2, v0) @signature `Lb/c;.g:(J)V` @kind virtual;
  #L11d65a.  v8:= v8 - v0 @kind long;
  #L11d65c.  v0:= lcmp(v8, v4);
  #L11d660.  if v0 <= 0 then goto L11d6a0;
  #L11d664.  v0:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L11d668.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11d66c.  v0:= lcmp(v0, v4);
  #L11d670.  if v0 != 0 then goto L11d63c;
  #L11d674.  v0:= v7.`b.m.b` @type ^`b.r` @kind object;
  #L11d678.  v1:= v7.`b.m.a` @type ^`b.c` @kind object;
  #L11d67c.  v2:= 8192L;
  #L11d680.  call temp:= `a`(v0, v1, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11d686.  v0:= temp @kind wide;
  #L11d688.  v2:= -1L;
  #L11d68c.  v0:= lcmp(v0, v2);
  #L11d690.  if v0 != 0 then goto L11d63c;
  #L11d694.  v0:= new `java.io.EOFException`;
  #L11d698.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11d69e.  throw v0;
  #L11d6a0.  return @kind void;
}
procedure `byte` `h`(`b.m` v2 @kind this) @signature `Lb/m;.h:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d6b4.  v0:= 1L;
  #L11d6b8.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11d6be.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11d6c2.  call temp:= `h`(v0) @signature `Lb/c;.h:()B` @kind virtual;
  #L11d6c8.  v0:= temp;
  #L11d6ca.  return v0;
}
procedure `short` `i`(`b.m` v2 @kind this) @signature `Lb/m;.i:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d6dc.  v0:= 2L;
  #L11d6e0.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11d6e6.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11d6ea.  call temp:= `i`(v0) @signature `Lb/c;.i:()S` @kind virtual;
  #L11d6f0.  v0:= temp;
  #L11d6f2.  return v0;
}
procedure `int` `j`(`b.m` v2 @kind this) @signature `Lb/m;.j:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d704.  v0:= 4L;
  #L11d708.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11d70e.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11d712.  call temp:= `j`(v0) @signature `Lb/c;.j:()I` @kind virtual;
  #L11d718.  v0:= temp;
  #L11d71a.  return v0;
}
procedure `short` `k`(`b.m` v2 @kind this) @signature `Lb/m;.k:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d72c.  v0:= 2L;
  #L11d730.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11d736.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11d73a.  call temp:= `k`(v0) @signature `Lb/c;.k:()S` @kind virtual;
  #L11d740.  v0:= temp;
  #L11d742.  return v0;
}
procedure `int` `l`(`b.m` v2 @kind this) @signature `Lb/m;.l:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d754.  v0:= 4L;
  #L11d758.  call `a`(v2, v0) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11d75e.  v0:= v2.`b.m.a` @type ^`b.c` @kind object;
  #L11d762.  call temp:= `l`(v0) @signature `Lb/c;.l:()I` @kind virtual;
  #L11d768.  v0:= temp;
  #L11d76a.  return v0;
}
procedure `long` `m`(`b.m` v6 @kind this) @signature `Lb/m;.m:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11d77c.  v1:= 0I;
  #L11d77e.  v2:= 1L;
  #L11d782.  call `a`(v6, v2) @signature `Lb/m;.a:(J)V` @kind virtual;
  #L11d788.  v0:= v1;
  #L11d78a.  v2:= v0 + 1;
  #L11d78e.  v2:= (`long`) v2 @kind i2l;
  #L11d790.  call temp:= `b`(v6, v2) @signature `Lb/m;.b:(J)Z` @kind virtual;
  #L11d796.  v2:= temp;
  #L11d798.  if v2 == 0 then goto L11d80e;
  #L11d79c.  v2:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11d7a0.  v4:= (`long`) v0 @kind i2l;
  #L11d7a2.  call temp:= `b`(v2, v4) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L11d7a8.  v2:= temp;
  #L11d7aa.  v3:= 48I;
  #L11d7ae.  if v2 < v3 then goto L11d7ba;
  #L11d7b2.  v3:= 57I;
  #L11d7b6.  if v2 <= v3 then goto L11d808;
  #L11d7ba.  v3:= 97I;
  #L11d7be.  if v2 < v3 then goto L11d7ca;
  #L11d7c2.  v3:= 102I;
  #L11d7c6.  if v2 <= v3 then goto L11d808;
  #L11d7ca.  v3:= 65I;
  #L11d7ce.  if v2 < v3 then goto L11d7da;
  #L11d7d2.  v3:= 70I;
  #L11d7d6.  if v2 <= v3 then goto L11d808;
  #L11d7da.  if v0 != 0 then goto L11d80e;
  #L11d7de.  v0:= new `java.lang.NumberFormatException`;
  #L11d7e2.  v3:= "Expected leading [0-9a-fA-F] character but was %#x" @kind object;
  #L11d7e6.  v4:= 1I;
  #L11d7e8.  v4:= new `java.lang.Object`[v4];
  #L11d7ec.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Byte;.valueOf:(B)Ljava/lang/Byte;` @kind static;
  #L11d7f2.  v2:= temp @kind object;
  #L11d7f4.  v4[v1]:= v2 @kind object;
  #L11d7f8.  call temp:= `format`(v3, v4) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11d7fe.  v1:= temp @kind object;
  #L11d800.  call `<init>`(v0, v1) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d806.  throw v0;
  #L11d808.  v0:= v0 + 1;
  #L11d80c.  goto L11d78a;
  #L11d80e.  v0:= v6.`b.m.a` @type ^`b.c` @kind object;
  #L11d812.  call temp:= `m`(v0) @signature `Lb/c;.m:()J` @kind virtual;
  #L11d818.  v0:= temp @kind wide;
  #L11d81a.  return v0 @kind wide;
}
procedure `java.lang.String` `p`(`b.m` v8 @kind this) @signature `Lb/m;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11d82c.  v0:= 10I;
  #L11d830.  call temp:= `a`(v8, v0) @signature `Lb/m;.a:(B)J` @kind virtual;
  #L11d836.  v0:= temp @kind wide;
  #L11d838.  v2:= -1L;
  #L11d83c.  v2:= lcmp(v0, v2);
  #L11d840.  if v2 != 0 then goto L11d8e2;
  #L11d844.  v1:= new `b.c`;
  #L11d848.  call `<init>`(v1) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11d84e.  v0:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11d852.  v2:= 0L;
  #L11d856.  v4:= 32L;
  #L11d85a.  v6:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11d85e.  call temp:= `b`(v6) @signature `Lb/c;.b:()J` @kind virtual;
  #L11d864.  v6:= temp @kind wide;
  #L11d866.  call temp:= `min`(v4, v6) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11d86c.  v4:= temp @kind wide;
  #L11d86e.  call temp:= `a`(v0, v1, v2, v4) @signature `Lb/c;.a:(Lb/c;JJ)Lb/c;` @kind virtual;
  #L11d874.  v0:= new `java.io.EOFException`;
  #L11d878.  v2:= new `java.lang.StringBuilder`;
  #L11d87c.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11d882.  v3:= "\\n not found: size=" @kind object;
  #L11d886.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d88c.  v2:= temp @kind object;
  #L11d88e.  v3:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11d892.  call temp:= `b`(v3) @signature `Lb/c;.b:()J` @kind virtual;
  #L11d898.  v4:= temp @kind wide;
  #L11d89a.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d8a0.  v2:= temp @kind object;
  #L11d8a2.  v3:= " content=" @kind object;
  #L11d8a6.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d8ac.  v2:= temp @kind object;
  #L11d8ae.  call temp:= `n`(v1) @signature `Lb/c;.n:()Lb/f;` @kind virtual;
  #L11d8b4.  v1:= temp @kind object;
  #L11d8b6.  call temp:= `e`(v1) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L11d8bc.  v1:= temp @kind object;
  #L11d8be.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d8c4.  v1:= temp @kind object;
  #L11d8c6.  v2:= "…" @kind object;
  #L11d8ca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d8d0.  v1:= temp @kind object;
  #L11d8d2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11d8d8.  v1:= temp @kind object;
  #L11d8da.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11d8e0.  throw v0;
  #L11d8e2.  v2:= v8.`b.m.a` @type ^`b.c` @kind object;
  #L11d8e6.  call temp:= `e`(v2, v0) @signature `Lb/c;.e:(J)Ljava/lang/String;` @kind virtual;
  #L11d8ec.  v0:= temp @kind object;
  #L11d8ee.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`b.m` v2 @kind this) @signature `Lb/m;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11d900.  v0:= new `java.lang.StringBuilder`;
  #L11d904.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11d90a.  v1:= "buffer(" @kind object;
  #L11d90e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d914.  v0:= temp @kind object;
  #L11d916.  v1:= v2.`b.m.b` @type ^`b.r` @kind object;
  #L11d91a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d920.  v0:= temp @kind object;
  #L11d922.  v1:= ")" @kind object;
  #L11d926.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11d92c.  v0:= temp @kind object;
  #L11d92e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11d934.  v0:= temp @kind object;
  #L11d936.  return v0 @kind object;
}
