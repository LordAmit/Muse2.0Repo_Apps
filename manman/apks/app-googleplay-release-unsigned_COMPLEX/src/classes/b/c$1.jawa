record `b.c$1` @kind class @AccessFlag  extends `java.io.InputStream` @kind class {
  `b.c` `b.c$1.a` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.c$1` v0 @kind this, `b.c` v1 @kind object) @signature `Lb/c$1;.<init>:(Lb/c;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L119554.  v0.`b.c$1.a` @type ^`b.c` := v1 @kind object;
  #L119558.  call `<init>`(v0) @signature `Ljava/io/InputStream;.<init>:()V` @kind direct;
  #L11955e.  return @kind void;
}
procedure `int` `available`(`b.c$1` v4 @kind this) @signature `Lb/c$1;.available:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L119570.  v0:= v4.`b.c$1.a` @type ^`b.c` @kind object;
  #L119574.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L119578.  v2:= 2147483647L;
  #L11957e.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L119584.  v0:= temp @kind wide;
  #L119586.  v0:= (`int`) v0 @kind l2i;
  #L119588.  return v0;
}
procedure `void` `close`(`b.c$1` v0 @kind this) @signature `Lb/c$1;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L11959c.  return @kind void;
}
procedure `int` `read`(`b.c$1` v4 @kind this) @signature `Lb/c$1;.read:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L1195b0.  v0:= v4.`b.c$1.a` @type ^`b.c` @kind object;
  #L1195b4.  v0:= v0.`b.c.b` @type ^`long` @kind wide;
  #L1195b8.  v2:= 0L;
  #L1195bc.  v0:= lcmp(v0, v2);
  #L1195c0.  if v0 <= 0 then goto L1195d6;
  #L1195c4.  v0:= v4.`b.c$1.a` @type ^`b.c` @kind object;
  #L1195c8.  call temp:= `h`(v0) @signature `Lb/c;.h:()B` @kind virtual;
  #L1195ce.  v0:= temp;
  #L1195d0.  v0:= v0 ^& 255;
  #L1195d4.  return v0;
  #L1195d6.  v0:= -1I;
  #L1195d8.  goto L1195d4;
}
procedure `int` `read`(`b.c$1` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lb/c$1;.read:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L1195ec.  v0:= v1.`b.c$1.a` @type ^`b.c` @kind object;
  #L1195f0.  call temp:= `a`(v0, v2, v3, v4) @signature `Lb/c;.a:([BII)I` @kind virtual;
  #L1195f6.  v0:= temp;
  #L1195f8.  return v0;
}
procedure `java.lang.String` `toString`(`b.c$1` v2 @kind this) @signature `Lb/c$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11960c.  v0:= new `java.lang.StringBuilder`;
  #L119610.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L119616.  v1:= v2.`b.c$1.a` @type ^`b.c` @kind object;
  #L11961a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119620.  v0:= temp @kind object;
  #L119622.  v1:= ".inputStream()" @kind object;
  #L119626.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11962c.  v0:= temp @kind object;
  #L11962e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L119634.  v0:= temp @kind object;
  #L119636.  return v0 @kind object;
}
