record `b.c` @kind class @AccessFlag PUBLIC_FINAL extends `b.d` @kind interface, `b.e` @kind interface, `java.lang.Cloneable` @kind interface {
  `b.n` `b.c.a` @AccessFlag ;
  `long` `b.c.b` @AccessFlag ;
}
global `byte`[] `@@b.c.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L119648.  v0:= 16I;
  #L11964c.  v0:= new `byte`[v0];
  #L119650.  goto L11965c;
  #L119656.  `@@b.c.c` @type ^`byte`[] := v0 @kind object;
  #L11965a.  return @kind void;
  #L11965c.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L119673.  goto L119656;
}
procedure `void` `<init>`(`b.c` v0 @kind this) @signature `Lb/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L119684.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11968a.  return @kind void;
}
procedure `int` `a`(`b.c` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lb/c;.a:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11969c.  v0:= length @variable v7;
  #L11969e.  v0:= (`long`) v0 @kind i2l;
  #L1196a0.  v2:= (`long`) v8 @kind i2l;
  #L1196a2.  v4:= (`long`) v9 @kind i2l;
  #L1196a4.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L1196aa.  v1:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L1196ae.  if v1 != 0 then goto L1196b6;
  #L1196b2.  v0:= -1I;
  #L1196b4.  return v0;
  #L1196b6.  v0:= v1.`b.n.c` @type ^`int`;
  #L1196ba.  v2:= v1.`b.n.b` @type ^`int`;
  #L1196be.  v0:= v0 - v2 @kind int;
  #L1196c0.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L1196c6.  v0:= temp;
  #L1196c8.  v2:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L1196cc.  v3:= v1.`b.n.b` @type ^`int`;
  #L1196d0.  call `arraycopy`(v2, v3, v7, v8, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L1196d6.  v2:= v1.`b.n.b` @type ^`int`;
  #L1196da.  v2:= v2 + v0 @kind int;
  #L1196dc.  v1.`b.n.b` @type ^`int` := v2;
  #L1196e0.  v2:= v6.`b.c.b` @type ^`long` @kind wide;
  #L1196e4.  v4:= (`long`) v0 @kind i2l;
  #L1196e6.  v2:= v2 - v4 @kind long;
  #L1196e8.  v6.`b.c.b` @type ^`long` := v2 @kind wide;
  #L1196ec.  v2:= v1.`b.n.b` @type ^`int`;
  #L1196f0.  v3:= v1.`b.n.c` @type ^`int`;
  #L1196f4.  if v2 != v3 then goto L1196b4;
  #L1196f8.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L1196fe.  v2:= temp @kind object;
  #L119700.  v6.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L119704.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11970a.  goto L1196b4;
}
procedure `long` `a`(`b.c` v2 @kind this, `byte` v3 ) @signature `Lb/c;.a:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11971c.  v0:= 0L;
  #L119720.  call temp:= `a`(v2, v3, v0) @signature `Lb/c;.a:(BJ)J` @kind virtual;
  #L119726.  v0:= temp @kind wide;
  #L119728.  return v0 @kind wide;
}
procedure `long` `a`(`b.c` v10 @kind this, `byte` v11 , `long` v12 ) @signature `Lb/c;.a:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11973c.  v0:= 0L;
  #L119740.  v6:= -1L;
  #L119744.  v2:= lcmp(v12, v0);
  #L119748.  if v2 >= 0 then goto L11975c;
  #L11974c.  v0:= new `java.lang.IllegalArgumentException`;
  #L119750.  v1:= "fromIndex < 0" @kind object;
  #L119754.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11975a.  throw v0;
  #L11975c.  v2:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L119760.  if v2 != 0 then goto L119768;
  #L119764.  v0:= v6 @kind wide;
  #L119766.  return v0 @kind wide;
  #L119768.  v4:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11976c.  v4:= v4 - v12 @kind long;
  #L11976e.  v3:= lcmp(v4, v12);
  #L119772.  if v3 >= 0 then goto L119798;
  #L119776.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11977a.  v4:= v2 @kind object;
  #L11977c.  v2:= lcmp(v0, v12);
  #L119780.  if v2 <= 0 then goto L1197ce;
  #L119784.  v4:= v4.`b.n.g` @type ^`b.n` @kind object;
  #L119788.  v2:= v4.`b.n.c` @type ^`int`;
  #L11978c.  v3:= v4.`b.n.b` @type ^`int`;
  #L119790.  v2:= v2 - v3 @kind int;
  #L119792.  v2:= (`long`) v2 @kind i2l;
  #L119794.  v0:= v0 - v2 @kind long;
  #L119796.  goto L11977c;
  #L119798.  v4:= v2 @kind object;
  #L11979a.  v2:= v4.`b.n.c` @type ^`int`;
  #L11979e.  v3:= v4.`b.n.b` @type ^`int`;
  #L1197a2.  v2:= v2 - v3 @kind int;
  #L1197a4.  v2:= (`long`) v2 @kind i2l;
  #L1197a6.  v2:= v2 + v0 @kind long;
  #L1197a8.  v5:= lcmp(v2, v12);
  #L1197ac.  if v5 >= 0 then goto L1197ce;
  #L1197b0.  v0:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L1197b4.  v4:= v0 @kind object;
  #L1197b6.  v0:= v2 @kind wide;
  #L1197b8.  goto L11979a;
  #L1197ba.  v2:= v4.`b.n.c` @type ^`int`;
  #L1197be.  v3:= v4.`b.n.b` @type ^`int`;
  #L1197c2.  v2:= v2 - v3 @kind int;
  #L1197c4.  v2:= (`long`) v2 @kind i2l;
  #L1197c6.  v0:= v0 + v2 @kind long;
  #L1197c8.  v4:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L1197cc.  v12:= v0 @kind wide;
  #L1197ce.  v2:= v10.`b.c.b` @type ^`long` @kind wide;
  #L1197d2.  v2:= lcmp(v0, v2);
  #L1197d6.  if v2 >= 0 then goto L11980c;
  #L1197da.  v3:= v4.`b.n.a` @type ^`byte`[] @kind object;
  #L1197de.  v2:= v4.`b.n.b` @type ^`int`;
  #L1197e2.  v8:= (`long`) v2 @kind i2l;
  #L1197e4.  v8:= v8 + v12 @kind long;
  #L1197e6.  v8:= v8 - v0 @kind long;
  #L1197e8.  v2:= (`int`) v8 @kind l2i;
  #L1197ea.  v5:= v4.`b.n.c` @type ^`int`;
  #L1197ee.  if v2 >= v5 then goto L1197ba;
  #L1197f2.  v8:= v3[v2] @kind byte;
  #L1197f6.  if v8 != v11 then goto L119806;
  #L1197fa.  v3:= v4.`b.n.b` @type ^`int`;
  #L1197fe.  v2:= v2 - v3 @kind int;
  #L119800.  v2:= (`long`) v2 @kind i2l;
  #L119802.  v0:= v0 + v2 @kind long;
  #L119804.  goto L119766;
  #L119806.  v2:= v2 + 1;
  #L11980a.  goto L1197ee;
  #L11980c.  v0:= v6 @kind wide;
  #L11980e.  goto L119766;
}
procedure `long` `a`(`b.c` v4 @kind this, `b.c` v5 @kind object, `long` v6 ) @signature `Lb/c;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L119820.  v2:= 0L;
  #L119824.  if v5 != 0 then goto L119838;
  #L119828.  v0:= new `java.lang.IllegalArgumentException`;
  #L11982c.  v1:= "sink == null" @kind object;
  #L119830.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119836.  throw v0;
  #L119838.  v0:= lcmp(v6, v2);
  #L11983c.  if v0 >= 0 then goto L119872;
  #L119840.  v0:= new `java.lang.IllegalArgumentException`;
  #L119844.  v1:= new `java.lang.StringBuilder`;
  #L119848.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11984e.  v2:= "byteCount < 0: " @kind object;
  #L119852.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119858.  v1:= temp @kind object;
  #L11985a.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L119860.  v1:= temp @kind object;
  #L119862.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L119868.  v1:= temp @kind object;
  #L11986a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119870.  throw v0;
  #L119872.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L119876.  v0:= lcmp(v0, v2);
  #L11987a.  if v0 != 0 then goto L119884;
  #L11987e.  v6:= -1L;
  #L119882.  return v6 @kind wide;
  #L119884.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L119888.  v0:= lcmp(v6, v0);
  #L11988c.  if v0 <= 0 then goto L119894;
  #L119890.  v6:= v4.`b.c.b` @type ^`long` @kind wide;
  #L119894.  call `a_`(v5, v4, v6) @signature `Lb/c;.a_:(Lb/c;J)V` @kind virtual;
  #L11989a.  goto L119882;
}
procedure `long` `a`(`b.c` v6 @kind this, `b.r` v7 @kind object) @signature `Lb/c;.a:(Lb/r;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L1198ac.  if v7 != 0 then goto L1198c0;
  #L1198b0.  v0:= new `java.lang.IllegalArgumentException`;
  #L1198b4.  v1:= "source == null" @kind object;
  #L1198b8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1198be.  throw v0;
  #L1198c0.  v0:= 0L;
  #L1198c4.  v2:= 8192L;
  #L1198c8.  call temp:= `a`(v7, v6, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L1198ce.  v2:= temp @kind wide;
  #L1198d0.  v4:= -1L;
  #L1198d4.  v4:= lcmp(v2, v4);
  #L1198d8.  if v4 == 0 then goto L1198e0;
  #L1198dc.  v0:= v0 + v2 @kind long;
  #L1198de.  goto L1198c4;
  #L1198e0.  return v0 @kind wide;
}
procedure `b.c` `a`(`b.c` v3 @kind this, `int` v4 ) @signature `Lb/c;.a:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1198f4.  v0:= 128I;
  #L1198f8.  if v4 >= v0 then goto L119904;
  #L1198fc.  call temp:= `b`(v3, v4) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119902.  return v3 @kind object;
  #L119904.  v0:= 2048I;
  #L119908.  if v4 >= v0 then goto L11992a;
  #L11990c.  v0:= v4 ^> 6;
  #L119910.  v0:= v0 ^| 192;
  #L119914.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11991a.  v0:= v4 ^& 63;
  #L11991e.  v0:= v0 ^| 128;
  #L119922.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119928.  goto L119902;
  #L11992a.  v0:= 65536I;
  #L11992e.  if v4 >= v0 then goto L1199b0;
  #L119932.  v0:= 55296I;
  #L119938.  if v4 < v0 then goto L119980;
  #L11993c.  v0:= 57343I;
  #L119942.  if v4 > v0 then goto L119980;
  #L119946.  v0:= new `java.lang.IllegalArgumentException`;
  #L11994a.  v1:= new `java.lang.StringBuilder`;
  #L11994e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L119954.  v2:= "Unexpected code point: " @kind object;
  #L119958.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11995e.  v1:= temp @kind object;
  #L119960.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L119966.  v2:= temp @kind object;
  #L119968.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11996e.  v1:= temp @kind object;
  #L119970.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L119976.  v1:= temp @kind object;
  #L119978.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11997e.  throw v0;
  #L119980.  v0:= v4 ^> 12;
  #L119984.  v0:= v0 ^| 224;
  #L119988.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11998e.  v0:= v4 ^> 6;
  #L119992.  v0:= v0 ^& 63;
  #L119996.  v0:= v0 ^| 128;
  #L11999a.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L1199a0.  v0:= v4 ^& 63;
  #L1199a4.  v0:= v0 ^| 128;
  #L1199a8.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L1199ae.  goto L119902;
  #L1199b0.  v0:= 1114111I;
  #L1199b6.  if v4 > v0 then goto L1199fc;
  #L1199ba.  v0:= v4 ^> 18;
  #L1199be.  v0:= v0 ^| 240;
  #L1199c2.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L1199c8.  v0:= v4 ^> 12;
  #L1199cc.  v0:= v0 ^& 63;
  #L1199d0.  v0:= v0 ^| 128;
  #L1199d4.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L1199da.  v0:= v4 ^> 6;
  #L1199de.  v0:= v0 ^& 63;
  #L1199e2.  v0:= v0 ^| 128;
  #L1199e6.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L1199ec.  v0:= v4 ^& 63;
  #L1199f0.  v0:= v0 ^| 128;
  #L1199f4.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L1199fa.  goto L119902;
  #L1199fc.  v0:= new `java.lang.IllegalArgumentException`;
  #L119a00.  v1:= new `java.lang.StringBuilder`;
  #L119a04.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L119a0a.  v2:= "Unexpected code point: " @kind object;
  #L119a0e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119a14.  v1:= temp @kind object;
  #L119a16.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L119a1c.  v2:= temp @kind object;
  #L119a1e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119a24.  v1:= temp @kind object;
  #L119a26.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L119a2c.  v1:= temp @kind object;
  #L119a2e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119a34.  throw v0;
}
procedure `b.c` `a`(`b.c` v8 @kind this, `b.c` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lb/c;.a:(Lb/c;JJ)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L119a48.  v6:= 0L;
  #L119a4c.  if v9 != 0 then goto L119a60;
  #L119a50.  v0:= new `java.lang.IllegalArgumentException`;
  #L119a54.  v1:= "out == null" @kind object;
  #L119a58.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119a5e.  throw v0;
  #L119a60.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L119a64.  v2:= v10 @kind wide;
  #L119a66.  v4:= v12 @kind wide;
  #L119a68.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L119a6e.  v0:= lcmp(v12, v6);
  #L119a72.  if v0 != 0 then goto L119a78;
  #L119a76.  return v8 @kind object;
  #L119a78.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L119a7c.  v0:= v0 + v12 @kind long;
  #L119a7e.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L119a82.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L119a86.  v1:= v0.`b.n.c` @type ^`int`;
  #L119a8a.  v2:= v0.`b.n.b` @type ^`int`;
  #L119a8e.  v1:= v1 - v2 @kind int;
  #L119a90.  v2:= (`long`) v1 @kind i2l;
  #L119a92.  v1:= lcmp(v10, v2);
  #L119a96.  if v1 < 0 then goto L119aae;
  #L119a9a.  v1:= v0.`b.n.c` @type ^`int`;
  #L119a9e.  v2:= v0.`b.n.b` @type ^`int`;
  #L119aa2.  v1:= v1 - v2 @kind int;
  #L119aa4.  v2:= (`long`) v1 @kind i2l;
  #L119aa6.  v10:= v10 - v2 @kind long;
  #L119aa8.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L119aac.  goto L119a86;
  #L119aae.  v1:= lcmp(v12, v6);
  #L119ab2.  if v1 <= 0 then goto L119a76;
  #L119ab6.  v1:= new `b.n`;
  #L119aba.  call `<init>`(v1, v0) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L119ac0.  v2:= v1.`b.n.b` @type ^`int`;
  #L119ac4.  v2:= (`long`) v2 @kind i2l;
  #L119ac6.  v2:= v2 + v10 @kind long;
  #L119ac8.  v2:= (`int`) v2 @kind l2i;
  #L119aca.  v1.`b.n.b` @type ^`int` := v2;
  #L119ace.  v2:= v1.`b.n.b` @type ^`int`;
  #L119ad2.  v3:= (`int`) v12 @kind l2i;
  #L119ad4.  v2:= v2 + v3 @kind int;
  #L119ad6.  v3:= v1.`b.n.c` @type ^`int`;
  #L119ada.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L119ae0.  v2:= temp;
  #L119ae2.  v1.`b.n.c` @type ^`int` := v2;
  #L119ae6.  v2:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L119aea.  if v2 != 0 then goto L119b12;
  #L119aee.  v1.`b.n.g` @type ^`b.n` := v1 @kind object;
  #L119af2.  v1.`b.n.f` @type ^`b.n` := v1 @kind object;
  #L119af6.  v9.`b.c.a` @type ^`b.n` := v1 @kind object;
  #L119afa.  v2:= v1.`b.n.c` @type ^`int`;
  #L119afe.  v1:= v1.`b.n.b` @type ^`int`;
  #L119b02.  v1:= v2 - v1 @kind int;
  #L119b06.  v2:= (`long`) v1 @kind i2l;
  #L119b08.  v12:= v12 - v2 @kind long;
  #L119b0a.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L119b0e.  v10:= v6 @kind wide;
  #L119b10.  goto L119aae;
  #L119b12.  v2:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L119b16.  v2:= v2.`b.n.g` @type ^`b.n` @kind object;
  #L119b1a.  call temp:= `a`(v2, v1) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L119b20.  goto L119afa;
}
procedure `b.c` `a`(`b.c` v2 @kind this, `b.f` v3 @kind object) @signature `Lb/c;.a:(Lb/f;)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L119b34.  if v3 != 0 then goto L119b48;
  #L119b38.  v0:= new `java.lang.IllegalArgumentException`;
  #L119b3c.  v1:= "byteString == null" @kind object;
  #L119b40.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119b46.  throw v0;
  #L119b48.  call `a`(v3, v2) @signature `Lb/f;.a:(Lb/c;)V` @kind virtual;
  #L119b4e.  return v2 @kind object;
}
procedure `b.c` `a`(`b.c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L119b60.  v0:= 0I;
  #L119b62.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L119b68.  v1:= temp;
  #L119b6a.  call temp:= `a`(v2, v3, v0, v1) @signature `Lb/c;.a:(Ljava/lang/String;II)Lb/c;` @kind virtual;
  #L119b70.  v0:= temp @kind object;
  #L119b72.  return v0 @kind object;
}
procedure `b.c` `a`(`b.c` v9 @kind this, `java.lang.String` v10 @kind object, `int` v11 , `int` v12 ) @signature `Lb/c;.a:(Ljava/lang/String;II)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L119b84.  v8:= 57343I;
  #L119b8a.  v7:= 128I;
  #L119b8e.  if v10 != 0 then goto L119ba2;
  #L119b92.  v0:= new `java.lang.IllegalArgumentException`;
  #L119b96.  v1:= "string == null" @kind object;
  #L119b9a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119ba0.  throw v0;
  #L119ba2.  if v11 >= 0 then goto L119bd8;
  #L119ba6.  v0:= new `java.lang.IllegalAccessError`;
  #L119baa.  v1:= new `java.lang.StringBuilder`;
  #L119bae.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L119bb4.  v2:= "beginIndex < 0: " @kind object;
  #L119bb8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119bbe.  v1:= temp @kind object;
  #L119bc0.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L119bc6.  v1:= temp @kind object;
  #L119bc8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L119bce.  v1:= temp @kind object;
  #L119bd0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119bd6.  throw v0;
  #L119bd8.  if v12 >= v11 then goto L119c22;
  #L119bdc.  v0:= new `java.lang.IllegalArgumentException`;
  #L119be0.  v1:= new `java.lang.StringBuilder`;
  #L119be4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L119bea.  v2:= "endIndex < beginIndex: " @kind object;
  #L119bee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119bf4.  v1:= temp @kind object;
  #L119bf6.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L119bfc.  v1:= temp @kind object;
  #L119bfe.  v2:= " < " @kind object;
  #L119c02.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119c08.  v1:= temp @kind object;
  #L119c0a.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L119c10.  v1:= temp @kind object;
  #L119c12.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L119c18.  v1:= temp @kind object;
  #L119c1a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119c20.  throw v0;
  #L119c22.  call temp:= `length`(v10) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L119c28.  v0:= temp;
  #L119c2a.  if v12 <= v0 then goto L119ca4;
  #L119c2e.  v0:= new `java.lang.IllegalArgumentException`;
  #L119c32.  v1:= new `java.lang.StringBuilder`;
  #L119c36.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L119c3c.  v2:= "endIndex > string.length: " @kind object;
  #L119c40.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119c46.  v1:= temp @kind object;
  #L119c48.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L119c4e.  v1:= temp @kind object;
  #L119c50.  v2:= " > " @kind object;
  #L119c54.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119c5a.  v1:= temp @kind object;
  #L119c5c.  call temp:= `length`(v10) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L119c62.  v2:= temp;
  #L119c64.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L119c6a.  v1:= temp @kind object;
  #L119c6c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L119c72.  v1:= temp @kind object;
  #L119c74.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119c7a.  throw v0;
  #L119c7c.  v0:= 0I;
  #L119c7e.  v2:= 56319I;
  #L119c84.  if v1 > v2 then goto L119c96;
  #L119c88.  v2:= 56320I;
  #L119c8e.  if v0 < v2 then goto L119c96;
  #L119c92.  if v0 <= v8 then goto L119dac;
  #L119c96.  v0:= 63I;
  #L119c9a.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119ca0.  v11:= v11 + 1;
  #L119ca4.  if v11 >= v12 then goto L119e0e;
  #L119ca8.  call temp:= `charAt`(v10, v11) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L119cae.  v1:= temp;
  #L119cb0.  if v1 >= v7 then goto L119d28;
  #L119cb4.  v0:= 1I;
  #L119cb6.  call temp:= `e`(v9, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L119cbc.  v2:= temp @kind object;
  #L119cbe.  v3:= v2.`b.n.a` @type ^`byte`[] @kind object;
  #L119cc2.  v0:= v2.`b.n.c` @type ^`int`;
  #L119cc6.  v4:= v0 - v11 @kind int;
  #L119cca.  v0:= v4 - 8192;
  #L119cce.  call temp:= `min`(v12, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L119cd4.  v5:= temp;
  #L119cd6.  v0:= v11 + 1;
  #L119cda.  v6:= v4 + v11 @kind int;
  #L119cde.  v1:= (`byte`) v1 @kind i2b;
  #L119ce0.  v3[v6]:= v1 @kind byte;
  #L119ce4.  if v0 >= v5 then goto L119cf4;
  #L119ce8.  call temp:= `charAt`(v10, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L119cee.  v6:= temp;
  #L119cf0.  if v6 < v7 then goto L119d18;
  #L119cf4.  v1:= v0 + v4 @kind int;
  #L119cf8.  v3:= v2.`b.n.c` @type ^`int`;
  #L119cfc.  v1:= v1 - v3 @kind int;
  #L119cfe.  v3:= v2.`b.n.c` @type ^`int`;
  #L119d02.  v3:= v3 + v1 @kind int;
  #L119d04.  v2.`b.n.c` @type ^`int` := v3;
  #L119d08.  v2:= v9.`b.c.b` @type ^`long` @kind wide;
  #L119d0c.  v4:= (`long`) v1 @kind i2l;
  #L119d0e.  v2:= v2 + v4 @kind long;
  #L119d10.  v9.`b.c.b` @type ^`long` := v2 @kind wide;
  #L119d14.  v11:= v0;
  #L119d16.  goto L119ca4;
  #L119d18.  v1:= v0 + 1;
  #L119d1c.  v0:= v0 + v4 @kind int;
  #L119d1e.  v6:= (`byte`) v6 @kind i2b;
  #L119d20.  v3[v0]:= v6 @kind byte;
  #L119d24.  v0:= v1;
  #L119d26.  goto L119ce4;
  #L119d28.  v0:= 2048I;
  #L119d2c.  if v1 >= v0 then goto L119d52;
  #L119d30.  v0:= v1 ^> 6;
  #L119d34.  v0:= v0 ^| 192;
  #L119d38.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119d3e.  v0:= v1 ^& 63;
  #L119d42.  v0:= v0 ^| 128;
  #L119d46.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119d4c.  v0:= v11 + 1;
  #L119d50.  goto L119d14;
  #L119d52.  v0:= 55296I;
  #L119d58.  if v1 < v0 then goto L119d60;
  #L119d5c.  if v1 <= v8 then goto L119d94;
  #L119d60.  v0:= v1 ^> 12;
  #L119d64.  v0:= v0 ^| 224;
  #L119d68.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119d6e.  v0:= v1 ^> 6;
  #L119d72.  v0:= v0 ^& 63;
  #L119d76.  v0:= v0 ^| 128;
  #L119d7a.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119d80.  v0:= v1 ^& 63;
  #L119d84.  v0:= v0 ^| 128;
  #L119d88.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119d8e.  v0:= v11 + 1;
  #L119d92.  goto L119d14;
  #L119d94.  v0:= v11 + 1;
  #L119d98.  if v0 >= v12 then goto L119c7c;
  #L119d9c.  v0:= v11 + 1;
  #L119da0.  call temp:= `charAt`(v10, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L119da6.  v0:= temp;
  #L119da8.  goto L119c7e;
  #L119dac.  v2:= 65536I;
  #L119db0.  v3:= -55297I;
  #L119db6.  v1:= v1 ^& v3 @kind int;
  #L119db8.  v1:= v1 ^< 10;
  #L119dbc.  v3:= -56321I;
  #L119dc2.  v0:= v0 ^& v3 @kind int;
  #L119dc4.  v0:= v0 ^| v1 @kind int;
  #L119dc6.  v0:= v0 + v2 @kind int;
  #L119dc8.  v1:= v0 ^> 18;
  #L119dcc.  v1:= v1 ^| 240;
  #L119dd0.  call temp:= `b`(v9, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119dd6.  v1:= v0 ^> 12;
  #L119dda.  v1:= v1 ^& 63;
  #L119dde.  v1:= v1 ^| 128;
  #L119de2.  call temp:= `b`(v9, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119de8.  v1:= v0 ^> 6;
  #L119dec.  v1:= v1 ^& 63;
  #L119df0.  v1:= v1 ^| 128;
  #L119df4.  call temp:= `b`(v9, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119dfa.  v0:= v0 ^& 63;
  #L119dfe.  v0:= v0 ^| 128;
  #L119e02.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119e08.  v0:= v11 + 2;
  #L119e0c.  goto L119d14;
  #L119e0e.  return v9 @kind object;
}
procedure `b.s` `a`(`b.c` v1 @kind this) @signature `Lb/c;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L119e20.  v0:= `@@b.s.b` @type ^`b.s` @kind object;
  #L119e24.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`b.c` v7 @kind this, `long` v8 , `java.nio.charset.Charset` v10 @kind object) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L119e38.  v2:= 0L;
  #L119e3c.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L119e40.  v4:= v8 @kind wide;
  #L119e42.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L119e48.  if v10 != 0 then goto L119e5c;
  #L119e4c.  v0:= new `java.lang.IllegalArgumentException`;
  #L119e50.  v1:= "charset == null" @kind object;
  #L119e54.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119e5a.  throw v0;
  #L119e5c.  v0:= 2147483647L;
  #L119e62.  v0:= lcmp(v8, v0);
  #L119e66.  if v0 <= 0 then goto L119e9c;
  #L119e6a.  v0:= new `java.lang.IllegalArgumentException`;
  #L119e6e.  v1:= new `java.lang.StringBuilder`;
  #L119e72.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L119e78.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L119e7c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119e82.  v1:= temp @kind object;
  #L119e84.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L119e8a.  v1:= temp @kind object;
  #L119e8c.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L119e92.  v1:= temp @kind object;
  #L119e94.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119e9a.  throw v0;
  #L119e9c.  v0:= lcmp(v8, v2);
  #L119ea0.  if v0 != 0 then goto L119eaa;
  #L119ea4.  v0:= "" @kind object;
  #L119ea8.  return v0 @kind object;
  #L119eaa.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L119eae.  v0:= v1.`b.n.b` @type ^`int`;
  #L119eb2.  v2:= (`long`) v0 @kind i2l;
  #L119eb4.  v2:= v2 + v8 @kind long;
  #L119eb6.  v0:= v1.`b.n.c` @type ^`int`;
  #L119eba.  v4:= (`long`) v0 @kind i2l;
  #L119ebc.  v0:= lcmp(v2, v4);
  #L119ec0.  if v0 <= 0 then goto L119ed8;
  #L119ec4.  v0:= new `java.lang.String`;
  #L119ec8.  call temp:= `f`(v7, v8) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #L119ece.  v1:= temp @kind object;
  #L119ed0.  call `<init>`(v0, v1, v10) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L119ed6.  goto L119ea8;
  #L119ed8.  v0:= new `java.lang.String`;
  #L119edc.  v2:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L119ee0.  v3:= v1.`b.n.b` @type ^`int`;
  #L119ee4.  v4:= (`int`) v8 @kind l2i;
  #L119ee6.  call `<init>`(v0, v2, v3, v4, v10) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L119eec.  v2:= v1.`b.n.b` @type ^`int`;
  #L119ef0.  v2:= (`long`) v2 @kind i2l;
  #L119ef2.  v2:= v2 + v8 @kind long;
  #L119ef4.  v2:= (`int`) v2 @kind l2i;
  #L119ef6.  v1.`b.n.b` @type ^`int` := v2;
  #L119efa.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L119efe.  v2:= v2 - v8 @kind long;
  #L119f00.  v7.`b.c.b` @type ^`long` := v2 @kind wide;
  #L119f04.  v2:= v1.`b.n.b` @type ^`int`;
  #L119f08.  v3:= v1.`b.n.c` @type ^`int`;
  #L119f0c.  if v2 != v3 then goto L119ea8;
  #L119f10.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L119f16.  v2:= temp @kind object;
  #L119f18.  v7.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L119f1c.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L119f22.  goto L119ea8;
}
procedure `java.lang.String` `a`(`b.c` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lb/c;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L119f34.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L119f38.  call temp:= `a`(v2, v0, v3) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L119f3e.  v0:= temp @kind object;
  #L119f40.  return v0 @kind object;
  #L119f42.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L119f44.  v1:= new `java.lang.AssertionError`;
  #L119f48.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L119f4e.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L119f42;
}
procedure `void` `a`(`b.c` v3 @kind this, `long` v4 ) @signature `Lb/c;.a:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L119f70.  v0:= v3.`b.c.b` @type ^`long` @kind wide;
  #L119f74.  v0:= lcmp(v0, v4);
  #L119f78.  if v0 >= 0 then goto L119f88;
  #L119f7c.  v0:= new `java.io.EOFException`;
  #L119f80.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L119f86.  throw v0;
  #L119f88.  return @kind void;
}
procedure `void` `a`(`b.c` v3 @kind this, `byte`[] v4 @kind object) @signature `Lb/c;.a:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L119f9c.  v0:= 0I;
  #L119f9e.  v1:= length @variable v4;
  #L119fa0.  if v0 >= v1 then goto L119fc6;
  #L119fa4.  v1:= length @variable v4;
  #L119fa6.  v1:= v1 - v0 @kind int;
  #L119fa8.  call temp:= `a`(v3, v4, v0, v1) @signature `Lb/c;.a:([BII)I` @kind virtual;
  #L119fae.  v1:= temp;
  #L119fb0.  v2:= -1I;
  #L119fb2.  if v1 != v2 then goto L119fc2;
  #L119fb6.  v0:= new `java.io.EOFException`;
  #L119fba.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L119fc0.  throw v0;
  #L119fc2.  v0:= v0 + v1 @kind int;
  #L119fc4.  goto L119f9e;
  #L119fc6.  return @kind void;
}
procedure `boolean` `a`(`b.c` v7 @kind this, `long` v8 , `b.f` v10 @kind object) @signature `Lb/c;.a:(JLb/f;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L119fd8.  v5:= 0I;
  #L119fda.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L119fe0.  v6:= temp;
  #L119fe2.  v1:= v7 @kind object;
  #L119fe4.  v2:= v8 @kind wide;
  #L119fe6.  v4:= v10 @kind object;
  #L119fe8.  call temp:= `a`(v1, v2, v4, v5, v6) @signature `Lb/c;.a:(JLb/f;II)Z` @kind virtual;
  #L119fee.  v0:= temp;
  #L119ff0.  return v0;
}
procedure `boolean` `a`(`b.c` v7 @kind this, `long` v8 , `b.f` v10 @kind object, `int` v11 , `int` v12 ) @signature `Lb/c;.a:(JLb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11a004.  v0:= 0I;
  #L11a006.  v2:= 0L;
  #L11a00a.  v1:= lcmp(v8, v2);
  #L11a00e.  if v1 < 0 then goto L11a038;
  #L11a012.  if v11 < 0 then goto L11a038;
  #L11a016.  if v12 < 0 then goto L11a038;
  #L11a01a.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11a01e.  v2:= v2 - v8 @kind long;
  #L11a020.  v4:= (`long`) v12 @kind i2l;
  #L11a022.  v1:= lcmp(v2, v4);
  #L11a026.  if v1 < 0 then goto L11a038;
  #L11a02a.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11a030.  v1:= temp;
  #L11a032.  v1:= v1 - v11 @kind int;
  #L11a034.  if v1 >= v12 then goto L11a03a;
  #L11a038.  return v0;
  #L11a03a.  v1:= v0;
  #L11a03c.  if v1 >= v12 then goto L11a062;
  #L11a040.  v2:= (`long`) v1 @kind i2l;
  #L11a042.  v2:= v2 + v8 @kind long;
  #L11a044.  call temp:= `b`(v7, v2) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L11a04a.  v2:= temp;
  #L11a04c.  v3:= v11 + v1 @kind int;
  #L11a050.  call temp:= `a`(v10, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L11a056.  v3:= temp;
  #L11a058.  if v2 != v3 then goto L11a038;
  #L11a05c.  v1:= v1 + 1;
  #L11a060.  goto L11a03c;
  #L11a062.  v0:= 1I;
  #L11a064.  goto L11a038;
}
procedure `void` `a_`(`b.c` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `Lb/c;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11a078.  v2:= 0L;
  #L11a07c.  if v9 != 0 then goto L11a090;
  #L11a080.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a084.  v1:= "source == null" @kind object;
  #L11a088.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a08e.  throw v0;
  #L11a090.  if v9 != v8 then goto L11a0a4;
  #L11a094.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a098.  v1:= "source == this" @kind object;
  #L11a09c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a0a2.  throw v0;
  #L11a0a4.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11a0a8.  v4:= v10 @kind wide;
  #L11a0aa.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11a0b0.  v0:= lcmp(v10, v2);
  #L11a0b4.  if v0 <= 0 then goto L11a134;
  #L11a0b8.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11a0bc.  v0:= v0.`b.n.c` @type ^`int`;
  #L11a0c0.  v1:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11a0c4.  v1:= v1.`b.n.b` @type ^`int`;
  #L11a0c8.  v0:= v0 - v1 @kind int;
  #L11a0ca.  v0:= (`long`) v0 @kind i2l;
  #L11a0cc.  v0:= lcmp(v10, v0);
  #L11a0d0.  if v0 >= 0 then goto L11a154;
  #L11a0d4.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11a0d8.  if v0 == 0 then goto L11a136;
  #L11a0dc.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11a0e0.  v0:= v0.`b.n.g` @type ^`b.n` @kind object;
  #L11a0e4.  v1:= v0 @kind object;
  #L11a0e6.  if v1 == 0 then goto L11a142;
  #L11a0ea.  v0:= v1.`b.n.e` @type ^`boolean` @kind boolean;
  #L11a0ee.  if v0 == 0 then goto L11a142;
  #L11a0f2.  v0:= v1.`b.n.c` @type ^`int`;
  #L11a0f6.  v4:= (`long`) v0 @kind i2l;
  #L11a0f8.  v4:= v4 + v10 @kind long;
  #L11a0fa.  v0:= v1.`b.n.d` @type ^`boolean` @kind boolean;
  #L11a0fe.  if v0 == 0 then goto L11a13c;
  #L11a102.  v0:= 0I;
  #L11a104.  v6:= (`long`) v0 @kind i2l;
  #L11a106.  v4:= v4 - v6 @kind long;
  #L11a108.  v6:= 8192L;
  #L11a10c.  v0:= lcmp(v4, v6);
  #L11a110.  if v0 > 0 then goto L11a142;
  #L11a114.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11a118.  v2:= (`int`) v10 @kind l2i;
  #L11a11a.  call `a`(v0, v1, v2) @signature `Lb/n;.a:(Lb/n;I)V` @kind virtual;
  #L11a120.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11a124.  v0:= v0 - v10 @kind long;
  #L11a126.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11a12a.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L11a12e.  v0:= v0 + v10 @kind long;
  #L11a130.  v8.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11a134.  return @kind void;
  #L11a136.  v0:= 0I;
  #L11a138.  v1:= v0 @kind object;
  #L11a13a.  goto L11a0e6;
  #L11a13c.  v0:= v1.`b.n.b` @type ^`int`;
  #L11a140.  goto L11a104;
  #L11a142.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11a146.  v1:= (`int`) v10 @kind l2i;
  #L11a148.  call temp:= `a`(v0, v1) @signature `Lb/n;.a:(I)Lb/n;` @kind virtual;
  #L11a14e.  v0:= temp @kind object;
  #L11a150.  v9.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L11a154.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11a158.  v1:= v0.`b.n.c` @type ^`int`;
  #L11a15c.  v4:= v0.`b.n.b` @type ^`int`;
  #L11a160.  v1:= v1 - v4 @kind int;
  #L11a162.  v4:= (`long`) v1 @kind i2l;
  #L11a164.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11a16a.  v1:= temp @kind object;
  #L11a16c.  v9.`b.c.a` @type ^`b.n` := v1 @kind object;
  #L11a170.  v1:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11a174.  if v1 != 0 then goto L11a1a8;
  #L11a178.  v8.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L11a17c.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11a180.  v1:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11a184.  v6:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11a188.  v1.`b.n.g` @type ^`b.n` := v6 @kind object;
  #L11a18c.  v0.`b.n.f` @type ^`b.n` := v6 @kind object;
  #L11a190.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11a194.  v0:= v0 - v4 @kind long;
  #L11a196.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11a19a.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L11a19e.  v0:= v0 + v4 @kind long;
  #L11a1a0.  v8.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11a1a4.  v10:= v10 - v4 @kind long;
  #L11a1a6.  goto L11a0b0;
  #L11a1a8.  v1:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11a1ac.  v1:= v1.`b.n.g` @type ^`b.n` @kind object;
  #L11a1b0.  call temp:= `a`(v1, v0) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11a1b6.  v0:= temp @kind object;
  #L11a1b8.  call `b`(v0) @signature `Lb/n;.b:()V` @kind virtual;
  #L11a1be.  goto L11a190;
}
procedure `byte` `b`(`b.c` v7 @kind this, `long` v8 ) @signature `Lb/c;.b:(J)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11a1d0.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11a1d4.  v4:= 1L;
  #L11a1d8.  v2:= v8 @kind wide;
  #L11a1da.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11a1e0.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11a1e4.  v1:= v0.`b.n.c` @type ^`int`;
  #L11a1e8.  v2:= v0.`b.n.b` @type ^`int`;
  #L11a1ec.  v1:= v1 - v2 @kind int;
  #L11a1ee.  v2:= (`long`) v1 @kind i2l;
  #L11a1f0.  v2:= lcmp(v8, v2);
  #L11a1f4.  if v2 >= 0 then goto L11a20a;
  #L11a1f8.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11a1fc.  v0:= v0.`b.n.b` @type ^`int`;
  #L11a200.  v2:= (`int`) v8 @kind l2i;
  #L11a202.  v0:= v0 + v2 @kind int;
  #L11a204.  v0:= v1[v0] @kind byte;
  #L11a208.  return v0;
  #L11a20a.  v2:= (`long`) v1 @kind i2l;
  #L11a20c.  v8:= v8 - v2 @kind long;
  #L11a20e.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11a212.  goto L11a1e4;
}
procedure `long` `b`(`b.c` v2 @kind this) @signature `Lb/c;.b:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11a224.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11a228.  return v0 @kind wide;
}
procedure `b.c` `b`(`b.c` v4 @kind this, `int` v5 ) @signature `Lb/c;.b:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11a23c.  v0:= 1I;
  #L11a23e.  call temp:= `e`(v4, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11a244.  v0:= temp @kind object;
  #L11a246.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11a24a.  v2:= v0.`b.n.c` @type ^`int`;
  #L11a24e.  v3:= v2 + 1;
  #L11a252.  v0.`b.n.c` @type ^`int` := v3;
  #L11a256.  v0:= (`byte`) v5 @kind i2b;
  #L11a258.  v1[v2]:= v0 @kind byte;
  #L11a25c.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11a260.  v2:= 1L;
  #L11a264.  v0:= v0 + v2 @kind long;
  #L11a266.  v4.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11a26a.  return v4 @kind object;
}
procedure `b.c` `b`(`b.c` v2 @kind this, `byte`[] v3 @kind object) @signature `Lb/c;.b:([B)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11a27c.  if v3 != 0 then goto L11a290;
  #L11a280.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a284.  v1:= "source == null" @kind object;
  #L11a288.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a28e.  throw v0;
  #L11a290.  v0:= 0I;
  #L11a292.  v1:= length @variable v3;
  #L11a294.  call temp:= `b`(v2, v3, v0, v1) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L11a29a.  v0:= temp @kind object;
  #L11a29c.  return v0 @kind object;
}
procedure `b.c` `b`(`b.c` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lb/c;.b:([BII)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11a2b0.  if v7 != 0 then goto L11a2c4;
  #L11a2b4.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a2b8.  v1:= "source == null" @kind object;
  #L11a2bc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a2c2.  throw v0;
  #L11a2c4.  v0:= length @variable v7;
  #L11a2c6.  v0:= (`long`) v0 @kind i2l;
  #L11a2c8.  v2:= (`long`) v8 @kind i2l;
  #L11a2ca.  v4:= (`long`) v9 @kind i2l;
  #L11a2cc.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11a2d2.  v0:= v8 + v9 @kind int;
  #L11a2d6.  if v8 >= v0 then goto L11a314;
  #L11a2da.  v1:= 1I;
  #L11a2dc.  call temp:= `e`(v6, v1) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11a2e2.  v1:= temp @kind object;
  #L11a2e4.  v2:= v0 - v8 @kind int;
  #L11a2e8.  v3:= v1.`b.n.c` @type ^`int`;
  #L11a2ec.  v3:= v3 - 8192;
  #L11a2f0.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11a2f6.  v2:= temp;
  #L11a2f8.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11a2fc.  v4:= v1.`b.n.c` @type ^`int`;
  #L11a300.  call `arraycopy`(v7, v8, v3, v4, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11a306.  v8:= v8 + v2 @kind int;
  #L11a308.  v3:= v1.`b.n.c` @type ^`int`;
  #L11a30c.  v2:= v2 + v3 @kind int;
  #L11a30e.  v1.`b.n.c` @type ^`int` := v2;
  #L11a312.  goto L11a2d6;
  #L11a314.  v0:= v6.`b.c.b` @type ^`long` @kind wide;
  #L11a318.  v2:= (`long`) v9 @kind i2l;
  #L11a31a.  v0:= v0 + v2 @kind long;
  #L11a31c.  v6.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11a320.  return v6 @kind object;
}
procedure `b.d` `b`(`b.c` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lb/c;.b:(Ljava/lang/String;)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11a334.  call temp:= `a`(v1, v2) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @kind virtual;
  #L11a33a.  v0:= temp @kind object;
  #L11a33c.  return v0 @kind object;
}
procedure `b.c` `c`(`b.c` v0 @kind this) @signature `Lb/c;.c:()Lb/c;` @AccessFlag PUBLIC {
    temp;

  #L11a350.  return v0 @kind object;
}
procedure `b.c` `c`(`b.c` v5 @kind this, `int` v6 ) @signature `Lb/c;.c:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11a364.  v0:= 2I;
  #L11a366.  call temp:= `e`(v5, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11a36c.  v0:= temp @kind object;
  #L11a36e.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11a372.  v2:= v0.`b.n.c` @type ^`int`;
  #L11a376.  v3:= v2 + 1;
  #L11a37a.  v4:= v6 ^>> 8;
  #L11a37e.  v4:= v4 ^& 255;
  #L11a382.  v4:= (`byte`) v4 @kind i2b;
  #L11a384.  v1[v2]:= v4 @kind byte;
  #L11a388.  v2:= v3 + 1;
  #L11a38c.  v4:= v6 ^& 255;
  #L11a390.  v4:= (`byte`) v4 @kind i2b;
  #L11a392.  v1[v3]:= v4 @kind byte;
  #L11a396.  v0.`b.n.c` @type ^`int` := v2;
  #L11a39a.  v0:= v5.`b.c.b` @type ^`long` @kind wide;
  #L11a39e.  v2:= 2L;
  #L11a3a2.  v0:= v0 + v2 @kind long;
  #L11a3a4.  v5.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11a3a8.  return v5 @kind object;
}
procedure `b.d` `c`(`b.c` v1 @kind this, `byte`[] v2 @kind object) @signature `Lb/c;.c:([B)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11a3bc.  call temp:= `b`(v1, v2) @signature `Lb/c;.b:([B)Lb/c;` @kind virtual;
  #L11a3c2.  v0:= temp @kind object;
  #L11a3c4.  return v0 @kind object;
}
procedure `b.d` `c`(`b.c` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lb/c;.c:([BII)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11a3d8.  call temp:= `b`(v1, v2, v3, v4) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L11a3de.  v0:= temp @kind object;
  #L11a3e0.  return v0 @kind object;
}
procedure `b.f` `c`(`b.c` v3 @kind this, `long` v4 ) @signature `Lb/c;.c:(J)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11a3f4.  v0:= new `b.f`;
  #L11a3f8.  call temp:= `f`(v3, v4) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #L11a3fe.  v1:= temp @kind object;
  #L11a400.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11a406.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`b.c` v1 @kind this) @signature `Lb/c;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11a418.  call temp:= `s`(v1) @signature `Lb/c;.s:()Lb/c;` @kind virtual;
  #L11a41e.  v0:= temp @kind object;
  #L11a420.  return v0 @kind object;
}
procedure `void` `close`(`b.c` v0 @kind this) @signature `Lb/c;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L11a434.  return @kind void;
}
procedure `b.c` `d`(`b.c` v0 @kind this) @signature `Lb/c;.d:()Lb/c;` @AccessFlag PUBLIC {
    temp;

  #L11a448.  return v0 @kind object;
}
procedure `b.c` `d`(`b.c` v5 @kind this, `int` v6 ) @signature `Lb/c;.d:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11a45c.  v0:= 4I;
  #L11a45e.  call temp:= `e`(v5, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11a464.  v0:= temp @kind object;
  #L11a466.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11a46a.  v2:= v0.`b.n.c` @type ^`int`;
  #L11a46e.  v3:= v2 + 1;
  #L11a472.  v4:= v6 ^>> 24;
  #L11a476.  v4:= v4 ^& 255;
  #L11a47a.  v4:= (`byte`) v4 @kind i2b;
  #L11a47c.  v1[v2]:= v4 @kind byte;
  #L11a480.  v2:= v3 + 1;
  #L11a484.  v4:= v6 ^>> 16;
  #L11a488.  v4:= v4 ^& 255;
  #L11a48c.  v4:= (`byte`) v4 @kind i2b;
  #L11a48e.  v1[v3]:= v4 @kind byte;
  #L11a492.  v3:= v2 + 1;
  #L11a496.  v4:= v6 ^>> 8;
  #L11a49a.  v4:= v4 ^& 255;
  #L11a49e.  v4:= (`byte`) v4 @kind i2b;
  #L11a4a0.  v1[v2]:= v4 @kind byte;
  #L11a4a4.  v2:= v3 + 1;
  #L11a4a8.  v4:= v6 ^& 255;
  #L11a4ac.  v4:= (`byte`) v4 @kind i2b;
  #L11a4ae.  v1[v3]:= v4 @kind byte;
  #L11a4b2.  v0.`b.n.c` @type ^`int` := v2;
  #L11a4b6.  v0:= v5.`b.c.b` @type ^`long` @kind wide;
  #L11a4ba.  v2:= 4L;
  #L11a4be.  v0:= v0 + v2 @kind long;
  #L11a4c0.  v5.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11a4c4.  return v5 @kind object;
}
procedure `java.lang.String` `d`(`b.c` v1 @kind this, `long` v2 ) @signature `Lb/c;.d:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11a4d8.  v0:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L11a4dc.  call temp:= `a`(v1, v2, v0) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L11a4e2.  v0:= temp @kind object;
  #L11a4e4.  return v0 @kind object;
}
procedure `b.n` `e`(`b.c` v3 @kind this, `int` v4 ) @signature `Lb/c;.e:(I)Lb/n;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L11a4f8.  v2:= 8192I;
  #L11a4fc.  v0:= 1I;
  #L11a4fe.  if v4 < v0 then goto L11a506;
  #L11a502.  if v4 <= v2 then goto L11a512;
  #L11a506.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a50a.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L11a510.  throw v0;
  #L11a512.  v0:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L11a516.  if v0 != 0 then goto L11a53c;
  #L11a51a.  call temp:= `a`() @signature `Lb/o;.a:()Lb/n;` @kind static;
  #L11a520.  v0:= temp @kind object;
  #L11a522.  v3.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L11a526.  v1:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L11a52a.  v2:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L11a52e.  v0:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L11a532.  v2.`b.n.g` @type ^`b.n` := v0 @kind object;
  #L11a536.  v1.`b.n.f` @type ^`b.n` := v0 @kind object;
  #L11a53a.  return v0 @kind object;
  #L11a53c.  v0:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L11a540.  v0:= v0.`b.n.g` @type ^`b.n` @kind object;
  #L11a544.  v1:= v0.`b.n.c` @type ^`int`;
  #L11a548.  v1:= v1 + v4 @kind int;
  #L11a54a.  if v1 > v2 then goto L11a556;
  #L11a54e.  v1:= v0.`b.n.e` @type ^`boolean` @kind boolean;
  #L11a552.  if v1 != 0 then goto L11a53a;
  #L11a556.  call temp:= `a`() @signature `Lb/o;.a:()Lb/n;` @kind static;
  #L11a55c.  v1:= temp @kind object;
  #L11a55e.  call temp:= `a`(v0, v1) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11a564.  v0:= temp @kind object;
  #L11a566.  goto L11a53a;
}
procedure `java.lang.String` `e`(`b.c` v5 @kind this, `long` v6 ) @signature `Lb/c;.e:(J)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11a578.  v2:= 1L;
  #L11a57c.  v0:= 0L;
  #L11a580.  v0:= lcmp(v6, v0);
  #L11a584.  if v0 <= 0 then goto L11a5b4;
  #L11a588.  v0:= v6 - v2 @kind long;
  #L11a58c.  call temp:= `b`(v5, v0) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L11a592.  v0:= temp;
  #L11a594.  v1:= 13I;
  #L11a598.  if v0 != v1 then goto L11a5b4;
  #L11a59c.  v0:= v6 - v2 @kind long;
  #L11a5a0.  call temp:= `d`(v5, v0) @signature `Lb/c;.d:(J)Ljava/lang/String;` @kind virtual;
  #L11a5a6.  v0:= temp @kind object;
  #L11a5a8.  v2:= 2L;
  #L11a5ac.  call `g`(v5, v2) @signature `Lb/c;.g:(J)V` @kind virtual;
  #L11a5b2.  return v0 @kind object;
  #L11a5b4.  call temp:= `d`(v5, v6) @signature `Lb/c;.d:(J)Ljava/lang/String;` @kind virtual;
  #L11a5ba.  v0:= temp @kind object;
  #L11a5bc.  call `g`(v5, v2) @signature `Lb/c;.g:(J)V` @kind virtual;
  #L11a5c2.  goto L11a5b2;
}
procedure `boolean` `e`(`b.c` v4 @kind this) @signature `Lb/c;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11a5d4.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11a5d8.  v2:= 0L;
  #L11a5dc.  v0:= lcmp(v0, v2);
  #L11a5e0.  if v0 != 0 then goto L11a5e8;
  #L11a5e4.  v0:= 1I;
  #L11a5e6.  return v0;
  #L11a5e8.  v0:= 0I;
  #L11a5ea.  goto L11a5e6;
}
procedure `boolean` `equals`(`b.c` v14 @kind this, `java.lang.Object` v15 @kind object) @signature `Lb/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L11a5fc.  v0:= 0L;
  #L11a600.  v6:= 1I;
  #L11a602.  v7:= 0I;
  #L11a604.  if v14 != v15 then goto L11a60c;
  #L11a608.  v0:= v6;
  #L11a60a.  return v0;
  #L11a60c.  v2:= instanceof @variable v15 @type ^`b.c` @kind boolean;
  #L11a610.  if v2 != 0 then goto L11a618;
  #L11a614.  v0:= v7;
  #L11a616.  goto L11a60a;
  #L11a618.  v15:= (`b.c`) v15 @kind object;
  #L11a61c.  v2:= v14.`b.c.b` @type ^`long` @kind wide;
  #L11a620.  v4:= v15.`b.c.b` @type ^`long` @kind wide;
  #L11a624.  v2:= lcmp(v2, v4);
  #L11a628.  if v2 == 0 then goto L11a630;
  #L11a62c.  v0:= v7;
  #L11a62e.  goto L11a60a;
  #L11a630.  v2:= v14.`b.c.b` @type ^`long` @kind wide;
  #L11a634.  v2:= lcmp(v2, v0);
  #L11a638.  if v2 != 0 then goto L11a640;
  #L11a63c.  v0:= v6;
  #L11a63e.  goto L11a60a;
  #L11a640.  v5:= v14.`b.c.a` @type ^`b.n` @kind object;
  #L11a644.  v4:= v15.`b.c.a` @type ^`b.n` @kind object;
  #L11a648.  v3:= v5.`b.n.b` @type ^`int`;
  #L11a64c.  v2:= v4.`b.n.b` @type ^`int`;
  #L11a650.  v8:= v14.`b.c.b` @type ^`long` @kind wide;
  #L11a654.  v8:= lcmp(v0, v8);
  #L11a658.  if v8 >= 0 then goto L11a6ce;
  #L11a65c.  v8:= v5.`b.n.c` @type ^`int`;
  #L11a660.  v8:= v8 - v3 @kind int;
  #L11a662.  v9:= v4.`b.n.c` @type ^`int`;
  #L11a666.  v9:= v9 - v2 @kind int;
  #L11a668.  call temp:= `min`(v8, v9) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11a66e.  v8:= temp;
  #L11a670.  v10:= (`long`) v8 @kind i2l;
  #L11a672.  v8:= v7;
  #L11a674.  v12:= (`long`) v8 @kind i2l;
  #L11a676.  v9:= lcmp(v12, v10);
  #L11a67a.  if v9 >= 0 then goto L11a6aa;
  #L11a67e.  v12:= v5.`b.n.a` @type ^`byte`[] @kind object;
  #L11a682.  v9:= v3 + 1;
  #L11a686.  v12:= v12[v3] @kind byte;
  #L11a68a.  v13:= v4.`b.n.a` @type ^`byte`[] @kind object;
  #L11a68e.  v3:= v2 + 1;
  #L11a692.  v2:= v13[v2] @kind byte;
  #L11a696.  if v12 == v2 then goto L11a69e;
  #L11a69a.  v0:= v7;
  #L11a69c.  goto L11a60a;
  #L11a69e.  v2:= v8 + 1;
  #L11a6a2.  v8:= v2;
  #L11a6a4.  v2:= v3;
  #L11a6a6.  v3:= v9;
  #L11a6a8.  goto L11a674;
  #L11a6aa.  v8:= v5.`b.n.c` @type ^`int`;
  #L11a6ae.  if v3 != v8 then goto L11a6ba;
  #L11a6b2.  v5:= v5.`b.n.f` @type ^`b.n` @kind object;
  #L11a6b6.  v3:= v5.`b.n.b` @type ^`int`;
  #L11a6ba.  v8:= v4.`b.n.c` @type ^`int`;
  #L11a6be.  if v2 != v8 then goto L11a6ca;
  #L11a6c2.  v4:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L11a6c6.  v2:= v4.`b.n.b` @type ^`int`;
  #L11a6ca.  v0:= v0 + v10 @kind long;
  #L11a6cc.  goto L11a650;
  #L11a6ce.  v0:= v6;
  #L11a6d0.  goto L11a60a;
}
procedure `b.f` `f`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.f:(I)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11a6e4.  if v2 != 0 then goto L11a6ee;
  #L11a6e8.  v0:= `@@b.f.b` @type ^`b.f` @kind object;
  #L11a6ec.  return v0 @kind object;
  #L11a6ee.  v0:= new `b.p`;
  #L11a6f2.  call `<init>`(v0, v1, v2) @signature `Lb/p;.<init>:(Lb/c;I)V` @kind direct;
  #L11a6f8.  goto L11a6ec;
}
procedure `java.io.InputStream` `f`(`b.c` v1 @kind this) @signature `Lb/c;.f:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11a70c.  v0:= new `b.c$1`;
  #L11a710.  call `<init>`(v0, v1) @signature `Lb/c$1;.<init>:(Lb/c;)V` @kind direct;
  #L11a716.  return v0 @kind object;
}
procedure `byte`[] `f`(`b.c` v7 @kind this, `long` v8 ) @signature `Lb/c;.f:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11a728.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11a72c.  v2:= 0L;
  #L11a730.  v4:= v8 @kind wide;
  #L11a732.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11a738.  v0:= 2147483647L;
  #L11a73e.  v0:= lcmp(v8, v0);
  #L11a742.  if v0 <= 0 then goto L11a778;
  #L11a746.  v0:= new `java.lang.IllegalArgumentException`;
  #L11a74a.  v1:= new `java.lang.StringBuilder`;
  #L11a74e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11a754.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L11a758.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a75e.  v1:= temp @kind object;
  #L11a760.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a766.  v1:= temp @kind object;
  #L11a768.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11a76e.  v1:= temp @kind object;
  #L11a770.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a776.  throw v0;
  #L11a778.  v0:= (`int`) v8 @kind l2i;
  #L11a77a.  v0:= new `byte`[v0];
  #L11a77e.  call `a`(v7, v0) @signature `Lb/c;.a:([B)V` @kind virtual;
  #L11a784.  return v0 @kind object;
}
procedure `void` `flush`(`b.c` v0 @kind this) @signature `Lb/c;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L11a798.  return @kind void;
}
procedure `long` `g`(`b.c` v5 @kind this) @signature `Lb/c;.g:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11a7ac.  v2:= 0L;
  #L11a7b0.  v0:= v5.`b.c.b` @type ^`long` @kind wide;
  #L11a7b4.  v4:= lcmp(v0, v2);
  #L11a7b8.  if v4 != 0 then goto L11a7c0;
  #L11a7bc.  v0:= v2 @kind wide;
  #L11a7be.  return v0 @kind wide;
  #L11a7c0.  v2:= v5.`b.c.a` @type ^`b.n` @kind object;
  #L11a7c4.  v2:= v2.`b.n.g` @type ^`b.n` @kind object;
  #L11a7c8.  v3:= v2.`b.n.c` @type ^`int`;
  #L11a7cc.  v4:= 8192I;
  #L11a7d0.  if v3 >= v4 then goto L11a7be;
  #L11a7d4.  v3:= v2.`b.n.e` @type ^`boolean` @kind boolean;
  #L11a7d8.  if v3 == 0 then goto L11a7be;
  #L11a7dc.  v3:= v2.`b.n.c` @type ^`int`;
  #L11a7e0.  v2:= v2.`b.n.b` @type ^`int`;
  #L11a7e4.  v2:= v3 - v2 @kind int;
  #L11a7e8.  v2:= (`long`) v2 @kind i2l;
  #L11a7ea.  v0:= v0 - v2 @kind long;
  #L11a7ec.  goto L11a7be;
}
procedure `b.d` `g`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.g:(I)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11a800.  call temp:= `d`(v1, v2) @signature `Lb/c;.d:(I)Lb/c;` @kind virtual;
  #L11a806.  v0:= temp @kind object;
  #L11a808.  return v0 @kind object;
}
procedure `void` `g`(`b.c` v7 @kind this, `long` v8 ) @signature `Lb/c;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11a81c.  v0:= 0L;
  #L11a820.  v0:= lcmp(v8, v0);
  #L11a824.  if v0 <= 0 then goto L11a8a4;
  #L11a828.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11a82c.  if v0 != 0 then goto L11a83c;
  #L11a830.  v0:= new `java.io.EOFException`;
  #L11a834.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11a83a.  throw v0;
  #L11a83c.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11a840.  v0:= v0.`b.n.c` @type ^`int`;
  #L11a844.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11a848.  v1:= v1.`b.n.b` @type ^`int`;
  #L11a84c.  v0:= v0 - v1 @kind int;
  #L11a84e.  v0:= (`long`) v0 @kind i2l;
  #L11a850.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11a856.  v0:= temp @kind wide;
  #L11a858.  v0:= (`int`) v0 @kind l2i;
  #L11a85a.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11a85e.  v4:= (`long`) v0 @kind i2l;
  #L11a860.  v2:= v2 - v4 @kind long;
  #L11a862.  v7.`b.c.b` @type ^`long` := v2 @kind wide;
  #L11a866.  v2:= (`long`) v0 @kind i2l;
  #L11a868.  v8:= v8 - v2 @kind long;
  #L11a86a.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11a86e.  v2:= v1.`b.n.b` @type ^`int`;
  #L11a872.  v0:= v0 + v2 @kind int;
  #L11a874.  v1.`b.n.b` @type ^`int` := v0;
  #L11a878.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11a87c.  v0:= v0.`b.n.b` @type ^`int`;
  #L11a880.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11a884.  v1:= v1.`b.n.c` @type ^`int`;
  #L11a888.  if v0 != v1 then goto L11a81c;
  #L11a88c.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11a890.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11a896.  v1:= temp @kind object;
  #L11a898.  v7.`b.c.a` @type ^`b.n` := v1 @kind object;
  #L11a89c.  call `a`(v0) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11a8a2.  goto L11a81c;
  #L11a8a4.  return @kind void;
}
procedure `byte` `h`(`b.c` v10 @kind this) @signature `Lb/c;.h:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11a8b8.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11a8bc.  v2:= 0L;
  #L11a8c0.  v0:= lcmp(v0, v2);
  #L11a8c4.  if v0 != 0 then goto L11a8d8;
  #L11a8c8.  v0:= new `java.lang.IllegalStateException`;
  #L11a8cc.  v1:= "size == 0" @kind object;
  #L11a8d0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a8d6.  throw v0;
  #L11a8d8.  v0:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L11a8dc.  v1:= v0.`b.n.b` @type ^`int`;
  #L11a8e0.  v2:= v0.`b.n.c` @type ^`int`;
  #L11a8e4.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11a8e8.  v4:= v1 + 1;
  #L11a8ec.  v1:= v3[v1] @kind byte;
  #L11a8f0.  v6:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11a8f4.  v8:= 1L;
  #L11a8f8.  v6:= v6 - v8 @kind long;
  #L11a8fa.  v10.`b.c.b` @type ^`long` := v6 @kind wide;
  #L11a8fe.  if v4 != v2 then goto L11a916;
  #L11a902.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11a908.  v2:= temp @kind object;
  #L11a90a.  v10.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L11a90e.  call `a`(v0) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11a914.  return v1;
  #L11a916.  v0.`b.n.b` @type ^`int` := v4;
  #L11a91a.  goto L11a914;
}
procedure `b.c` `h`(`b.c` v11 @kind this, `long` v12 ) @signature `Lb/c;.h:(J)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L11a92c.  v0:= 0L;
  #L11a930.  v0:= lcmp(v12, v0);
  #L11a934.  if v0 != 0 then goto L11a946;
  #L11a938.  v0:= 48I;
  #L11a93c.  call temp:= `b`(v11, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a942.  v11:= temp @kind object;
  #L11a944.  return v11 @kind object;
  #L11a946.  v0:= 0I;
  #L11a948.  v2:= 0L;
  #L11a94c.  v1:= lcmp(v12, v2);
  #L11a950.  if v1 >= 0 then goto L11ab6e;
  #L11a954.  v2:= -v12 @kind long;
  #L11a956.  v0:= 0L;
  #L11a95a.  v0:= lcmp(v2, v0);
  #L11a95e.  if v0 >= 0 then goto L11a970;
  #L11a962.  v0:= "-9223372036854775808" @kind object;
  #L11a966.  call temp:= `a`(v11, v0) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @kind virtual;
  #L11a96c.  v11:= temp @kind object;
  #L11a96e.  goto L11a944;
  #L11a970.  v0:= 1I;
  #L11a972.  v4:= v0;
  #L11a974.  v0:= 100000000L;
  #L11a97a.  v0:= lcmp(v2, v0);
  #L11a97e.  if v0 >= 0 then goto L11aa44;
  #L11a982.  v0:= 10000L;
  #L11a986.  v0:= lcmp(v2, v0);
  #L11a98a.  if v0 >= 0 then goto L11aa08;
  #L11a98e.  v0:= 100L;
  #L11a992.  v0:= lcmp(v2, v0);
  #L11a996.  if v0 >= 0 then goto L11a9f4;
  #L11a99a.  v0:= 10L;
  #L11a99e.  v0:= lcmp(v2, v0);
  #L11a9a2.  if v0 >= 0 then goto L11a9f0;
  #L11a9a6.  v0:= 1I;
  #L11a9a8.  if v4 == 0 then goto L11a9b0;
  #L11a9ac.  v0:= v0 + 1;
  #L11a9b0.  call temp:= `e`(v11, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11a9b6.  v5:= temp @kind object;
  #L11a9b8.  v6:= v5.`b.n.a` @type ^`byte`[] @kind object;
  #L11a9bc.  v1:= v5.`b.n.c` @type ^`int`;
  #L11a9c0.  v1:= v1 + v0 @kind int;
  #L11a9c2.  v8:= 0L;
  #L11a9c6.  v7:= lcmp(v2, v8);
  #L11a9ca.  if v7 == 0 then goto L11ab44;
  #L11a9ce.  v8:= 10L;
  #L11a9d2.  v8:= v2 %% v8 @kind long;
  #L11a9d6.  v7:= (`int`) v8 @kind l2i;
  #L11a9d8.  v1:= v1 + -1;
  #L11a9dc.  v8:= `@@b.c.c` @type ^`byte`[] @kind object;
  #L11a9e0.  v7:= v8[v7] @kind byte;
  #L11a9e4.  v6[v1]:= v7 @kind byte;
  #L11a9e8.  v8:= 10L;
  #L11a9ec.  v2:= v2 / v8 @kind long;
  #L11a9ee.  goto L11a9c2;
  #L11a9f0.  v0:= 2I;
  #L11a9f2.  goto L11a9a8;
  #L11a9f4.  v0:= 1000L;
  #L11a9f8.  v0:= lcmp(v2, v0);
  #L11a9fc.  if v0 >= 0 then goto L11aa04;
  #L11aa00.  v0:= 3I;
  #L11aa02.  goto L11a9a8;
  #L11aa04.  v0:= 4I;
  #L11aa06.  goto L11a9a8;
  #L11aa08.  v0:= 1000000L;
  #L11aa0e.  v0:= lcmp(v2, v0);
  #L11aa12.  if v0 >= 0 then goto L11aa2c;
  #L11aa16.  v0:= 100000L;
  #L11aa1c.  v0:= lcmp(v2, v0);
  #L11aa20.  if v0 >= 0 then goto L11aa28;
  #L11aa24.  v0:= 5I;
  #L11aa26.  goto L11a9a8;
  #L11aa28.  v0:= 6I;
  #L11aa2a.  goto L11a9a8;
  #L11aa2c.  v0:= 10000000L;
  #L11aa32.  v0:= lcmp(v2, v0);
  #L11aa36.  if v0 >= 0 then goto L11aa3e;
  #L11aa3a.  v0:= 7I;
  #L11aa3c.  goto L11a9a8;
  #L11aa3e.  v0:= 8I;
  #L11aa42.  goto L11a9a8;
  #L11aa44.  v0:= 1000000000000L;
  #L11aa4e.  v0:= lcmp(v2, v0);
  #L11aa52.  if v0 >= 0 then goto L11aaa0;
  #L11aa56.  v0:= 10000000000L;
  #L11aa60.  v0:= lcmp(v2, v0);
  #L11aa64.  if v0 >= 0 then goto L11aa82;
  #L11aa68.  v0:= 1000000000L;
  #L11aa6e.  v0:= lcmp(v2, v0);
  #L11aa72.  if v0 >= 0 then goto L11aa7c;
  #L11aa76.  v0:= 9I;
  #L11aa7a.  goto L11a9a8;
  #L11aa7c.  v0:= 10I;
  #L11aa80.  goto L11a9a8;
  #L11aa82.  v0:= 100000000000L;
  #L11aa8c.  v0:= lcmp(v2, v0);
  #L11aa90.  if v0 >= 0 then goto L11aa9a;
  #L11aa94.  v0:= 11I;
  #L11aa98.  goto L11a9a8;
  #L11aa9a.  v0:= 12I;
  #L11aa9e.  goto L11a9a8;
  #L11aaa0.  v0:= 1000000000000000L;
  #L11aaaa.  v0:= lcmp(v2, v0);
  #L11aaae.  if v0 >= 0 then goto L11aaee;
  #L11aab2.  v0:= 10000000000000L;
  #L11aabc.  v0:= lcmp(v2, v0);
  #L11aac0.  if v0 >= 0 then goto L11aacc;
  #L11aac4.  v0:= 13I;
  #L11aac8.  goto L11a9a8;
  #L11aacc.  v0:= 100000000000000L;
  #L11aad6.  v0:= lcmp(v2, v0);
  #L11aada.  if v0 >= 0 then goto L11aae6;
  #L11aade.  v0:= 14I;
  #L11aae2.  goto L11a9a8;
  #L11aae6.  v0:= 15I;
  #L11aaea.  goto L11a9a8;
  #L11aaee.  v0:= 100000000000000000L;
  #L11aaf8.  v0:= lcmp(v2, v0);
  #L11aafc.  if v0 >= 0 then goto L11ab22;
  #L11ab00.  v0:= 10000000000000000L;
  #L11ab0a.  v0:= lcmp(v2, v0);
  #L11ab0e.  if v0 >= 0 then goto L11ab1a;
  #L11ab12.  v0:= 16I;
  #L11ab16.  goto L11a9a8;
  #L11ab1a.  v0:= 17I;
  #L11ab1e.  goto L11a9a8;
  #L11ab22.  v0:= 1000000000000000000L;
  #L11ab2c.  v0:= lcmp(v2, v0);
  #L11ab30.  if v0 >= 0 then goto L11ab3c;
  #L11ab34.  v0:= 18I;
  #L11ab38.  goto L11a9a8;
  #L11ab3c.  v0:= 19I;
  #L11ab40.  goto L11a9a8;
  #L11ab44.  if v4 == 0 then goto L11ab54;
  #L11ab48.  v1:= v1 + -1;
  #L11ab4c.  v2:= 45I;
  #L11ab50.  v6[v1]:= v2 @kind byte;
  #L11ab54.  v1:= v5.`b.n.c` @type ^`int`;
  #L11ab58.  v1:= v1 + v0 @kind int;
  #L11ab5a.  v5.`b.n.c` @type ^`int` := v1;
  #L11ab5e.  v2:= v11.`b.c.b` @type ^`long` @kind wide;
  #L11ab62.  v0:= (`long`) v0 @kind i2l;
  #L11ab64.  v0:= v0 + v2 @kind long;
  #L11ab66.  v11.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11ab6a.  goto L11a944;
  #L11ab6e.  v4:= v0;
  #L11ab70.  v2:= v12 @kind wide;
  #L11ab72.  goto L11a974;
}
procedure `b.d` `h`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.h:(I)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11ab88.  call temp:= `c`(v1, v2) @signature `Lb/c;.c:(I)Lb/c;` @kind virtual;
  #L11ab8e.  v0:= temp @kind object;
  #L11ab90.  return v0 @kind object;
}
procedure `int` `hashCode`(`b.c` v5 @kind this) @signature `Lb/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11aba4.  v1:= v5.`b.c.a` @type ^`b.n` @kind object;
  #L11aba8.  if v1 != 0 then goto L11abb0;
  #L11abac.  v0:= 0I;
  #L11abae.  return v0;
  #L11abb0.  v0:= 1I;
  #L11abb2.  v2:= v1.`b.n.b` @type ^`int`;
  #L11abb6.  v4:= v1.`b.n.c` @type ^`int`;
  #L11abba.  if v2 >= v4 then goto L11abd6;
  #L11abbe.  v0:= v0 * 31;
  #L11abc2.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11abc6.  v3:= v3[v2] @kind byte;
  #L11abca.  v3:= v3 + v0 @kind int;
  #L11abcc.  v0:= v2 + 1;
  #L11abd0.  v2:= v0;
  #L11abd2.  v0:= v3;
  #L11abd4.  goto L11abba;
  #L11abd6.  v1:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L11abda.  v2:= v5.`b.c.a` @type ^`b.n` @kind object;
  #L11abde.  if v1 != v2 then goto L11abb2;
  #L11abe2.  goto L11abae;
}
procedure `b.c` `i`(`b.c` v9 @kind this, `long` v10 ) @signature `Lb/c;.i:(J)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11abf4.  v0:= 0L;
  #L11abf8.  v0:= lcmp(v10, v0);
  #L11abfc.  if v0 != 0 then goto L11ac0e;
  #L11ac00.  v0:= 48I;
  #L11ac04.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11ac0a.  v9:= temp @kind object;
  #L11ac0c.  return v9 @kind object;
  #L11ac0e.  call temp:= `highestOneBit`(v10) @signature `Ljava/lang/Long;.highestOneBit:(J)J` @kind static;
  #L11ac14.  v0:= temp @kind wide;
  #L11ac16.  call temp:= `numberOfTrailingZeros`(v0) @signature `Ljava/lang/Long;.numberOfTrailingZeros:(J)I` @kind static;
  #L11ac1c.  v0:= temp;
  #L11ac1e.  v0:= v0 / 4;
  #L11ac22.  v1:= v0 + 1;
  #L11ac26.  call temp:= `e`(v9, v1) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11ac2c.  v2:= temp @kind object;
  #L11ac2e.  v3:= v2.`b.n.a` @type ^`byte`[] @kind object;
  #L11ac32.  v0:= v2.`b.n.c` @type ^`int`;
  #L11ac36.  v0:= v0 + v1 @kind int;
  #L11ac38.  v0:= v0 + -1;
  #L11ac3c.  v4:= v2.`b.n.c` @type ^`int`;
  #L11ac40.  if v0 < v4 then goto L11ac62;
  #L11ac44.  v5:= `@@b.c.c` @type ^`byte`[] @kind object;
  #L11ac48.  v6:= 15L;
  #L11ac4c.  v6:= v6 ^& v10 @kind long;
  #L11ac4e.  v6:= (`int`) v6 @kind l2i;
  #L11ac50.  v5:= v5[v6] @kind byte;
  #L11ac54.  v3[v0]:= v5 @kind byte;
  #L11ac58.  v5:= 4I;
  #L11ac5a.  v10:= v10 ^>> v5 @kind long;
  #L11ac5c.  v0:= v0 + -1;
  #L11ac60.  goto L11ac40;
  #L11ac62.  v0:= v2.`b.n.c` @type ^`int`;
  #L11ac66.  v0:= v0 + v1 @kind int;
  #L11ac68.  v2.`b.n.c` @type ^`int` := v0;
  #L11ac6c.  v2:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11ac70.  v0:= (`long`) v1 @kind i2l;
  #L11ac72.  v0:= v0 + v2 @kind long;
  #L11ac74.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11ac78.  goto L11ac0c;
}
procedure `b.d` `i`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.i:(I)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11ac8c.  call temp:= `b`(v1, v2) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11ac92.  v0:= temp @kind object;
  #L11ac94.  return v0 @kind object;
}
procedure `short` `i`(`b.c` v10 @kind this) @signature `Lb/c;.i:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11aca8.  v8:= 2L;
  #L11acac.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11acb0.  v0:= lcmp(v0, v8);
  #L11acb4.  if v0 >= 0 then goto L11acee;
  #L11acb8.  v0:= new `java.lang.IllegalStateException`;
  #L11acbc.  v1:= new `java.lang.StringBuilder`;
  #L11acc0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11acc6.  v2:= "size < 2: " @kind object;
  #L11acca.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11acd0.  v1:= temp @kind object;
  #L11acd2.  v2:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11acd6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11acdc.  v1:= temp @kind object;
  #L11acde.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11ace4.  v1:= temp @kind object;
  #L11ace6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11acec.  throw v0;
  #L11acee.  v0:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L11acf2.  v1:= v0.`b.n.b` @type ^`int`;
  #L11acf6.  v2:= v0.`b.n.c` @type ^`int`;
  #L11acfa.  v3:= v2 - v1 @kind int;
  #L11acfe.  v4:= 2I;
  #L11ad00.  if v3 >= v4 then goto L11ad26;
  #L11ad04.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11ad0a.  v0:= temp;
  #L11ad0c.  v0:= v0 ^& 255;
  #L11ad10.  v0:= v0 ^< 8;
  #L11ad14.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11ad1a.  v1:= temp;
  #L11ad1c.  v1:= v1 ^& 255;
  #L11ad20.  v0:= v0 ^| v1 @kind int;
  #L11ad22.  v0:= (`short`) v0 @kind i2s;
  #L11ad24.  return v0;
  #L11ad26.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11ad2a.  v4:= v1 + 1;
  #L11ad2e.  v1:= v3[v1] @kind byte;
  #L11ad32.  v1:= v1 ^& 255;
  #L11ad36.  v1:= v1 ^< 8;
  #L11ad3a.  v5:= v4 + 1;
  #L11ad3e.  v3:= v3[v4] @kind byte;
  #L11ad42.  v3:= v3 ^& 255;
  #L11ad46.  v1:= v1 ^| v3 @kind int;
  #L11ad48.  v6:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11ad4c.  v6:= v6 - v8 @kind long;
  #L11ad4e.  v10.`b.c.b` @type ^`long` := v6 @kind wide;
  #L11ad52.  if v5 != v2 then goto L11ad6c;
  #L11ad56.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11ad5c.  v2:= temp @kind object;
  #L11ad5e.  v10.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L11ad62.  call `a`(v0) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11ad68.  v0:= (`short`) v1 @kind i2s;
  #L11ad6a.  goto L11ad24;
  #L11ad6c.  v0.`b.n.b` @type ^`int` := v5;
  #L11ad70.  goto L11ad68;
}
procedure `int` `j`(`b.c` v10 @kind this) @signature `Lb/c;.j:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11ad84.  v8:= 4L;
  #L11ad88.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11ad8c.  v0:= lcmp(v0, v8);
  #L11ad90.  if v0 >= 0 then goto L11adca;
  #L11ad94.  v0:= new `java.lang.IllegalStateException`;
  #L11ad98.  v1:= new `java.lang.StringBuilder`;
  #L11ad9c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11ada2.  v2:= "size < 4: " @kind object;
  #L11ada6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11adac.  v1:= temp @kind object;
  #L11adae.  v2:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11adb2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11adb8.  v1:= temp @kind object;
  #L11adba.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11adc0.  v1:= temp @kind object;
  #L11adc2.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11adc8.  throw v0;
  #L11adca.  v1:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L11adce.  v0:= v1.`b.n.b` @type ^`int`;
  #L11add2.  v2:= v1.`b.n.c` @type ^`int`;
  #L11add6.  v3:= v2 - v0 @kind int;
  #L11adda.  v4:= 4I;
  #L11addc.  if v3 >= v4 then goto L11ae24;
  #L11ade0.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11ade6.  v0:= temp;
  #L11ade8.  v0:= v0 ^& 255;
  #L11adec.  v0:= v0 ^< 24;
  #L11adf0.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11adf6.  v1:= temp;
  #L11adf8.  v1:= v1 ^& 255;
  #L11adfc.  v1:= v1 ^< 16;
  #L11ae00.  v0:= v0 ^| v1 @kind int;
  #L11ae02.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11ae08.  v1:= temp;
  #L11ae0a.  v1:= v1 ^& 255;
  #L11ae0e.  v1:= v1 ^< 8;
  #L11ae12.  v0:= v0 ^| v1 @kind int;
  #L11ae14.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11ae1a.  v1:= temp;
  #L11ae1c.  v1:= v1 ^& 255;
  #L11ae20.  v0:= v0 ^| v1 @kind int;
  #L11ae22.  return v0;
  #L11ae24.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11ae28.  v4:= v0 + 1;
  #L11ae2c.  v0:= v3[v0] @kind byte;
  #L11ae30.  v0:= v0 ^& 255;
  #L11ae34.  v0:= v0 ^< 24;
  #L11ae38.  v5:= v4 + 1;
  #L11ae3c.  v4:= v3[v4] @kind byte;
  #L11ae40.  v4:= v4 ^& 255;
  #L11ae44.  v4:= v4 ^< 16;
  #L11ae48.  v0:= v0 ^| v4 @kind int;
  #L11ae4a.  v4:= v5 + 1;
  #L11ae4e.  v5:= v3[v5] @kind byte;
  #L11ae52.  v5:= v5 ^& 255;
  #L11ae56.  v5:= v5 ^< 8;
  #L11ae5a.  v0:= v0 ^| v5 @kind int;
  #L11ae5c.  v5:= v4 + 1;
  #L11ae60.  v3:= v3[v4] @kind byte;
  #L11ae64.  v3:= v3 ^& 255;
  #L11ae68.  v0:= v0 ^| v3 @kind int;
  #L11ae6a.  v6:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11ae6e.  v6:= v6 - v8 @kind long;
  #L11ae70.  v10.`b.c.b` @type ^`long` := v6 @kind wide;
  #L11ae74.  if v5 != v2 then goto L11ae8c;
  #L11ae78.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11ae7e.  v2:= temp @kind object;
  #L11ae80.  v10.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L11ae84.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11ae8a.  goto L11ae22;
  #L11ae8c.  v1.`b.n.b` @type ^`int` := v5;
  #L11ae90.  goto L11ae22;
}
procedure `b.d` `j`(`b.c` v1 @kind this, `long` v2 ) @signature `Lb/c;.j:(J)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11aea4.  call temp:= `i`(v1, v2) @signature `Lb/c;.i:(J)Lb/c;` @kind virtual;
  #L11aeaa.  v0:= temp @kind object;
  #L11aeac.  return v0 @kind object;
}
procedure `b.d` `k`(`b.c` v1 @kind this, `long` v2 ) @signature `Lb/c;.k:(J)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11aec0.  call temp:= `h`(v1, v2) @signature `Lb/c;.h:(J)Lb/c;` @kind virtual;
  #L11aec6.  v0:= temp @kind object;
  #L11aec8.  return v0 @kind object;
}
procedure `short` `k`(`b.c` v1 @kind this) @signature `Lb/c;.k:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11aedc.  call temp:= `i`(v1) @signature `Lb/c;.i:()S` @kind virtual;
  #L11aee2.  v0:= temp;
  #L11aee4.  call temp:= `a`(v0) @signature `Lb/t;.a:(S)S` @kind static;
  #L11aeea.  v0:= temp;
  #L11aeec.  return v0;
}
procedure `int` `l`(`b.c` v1 @kind this) @signature `Lb/c;.l:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11af00.  call temp:= `j`(v1) @signature `Lb/c;.j:()I` @kind virtual;
  #L11af06.  v0:= temp;
  #L11af08.  call temp:= `a`(v0) @signature `Lb/t;.a:(I)I` @kind static;
  #L11af0e.  v0:= temp;
  #L11af10.  return v0;
}
procedure `long` `m`(`b.c` v18 @kind this) @signature `Lb/c;.m:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L11af24.  v0:= v18 @kind object;
  #L11af28.  v2:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11af2c.  v4:= 0L;
  #L11af30.  v2:= lcmp(v2, v4);
  #L11af34.  if v2 != 0 then goto L11af48;
  #L11af38.  v2:= new `java.lang.IllegalStateException`;
  #L11af3c.  v3:= "size == 0" @kind object;
  #L11af40.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11af46.  throw v2;
  #L11af48.  v4:= 0L;
  #L11af4c.  v3:= 0I;
  #L11af4e.  v2:= 0I;
  #L11af50.  v0:= v18 @kind object;
  #L11af54.  v10:= v0.`b.c.a` @type ^`b.n` @kind object;
  #L11af58.  v11:= v10.`b.n.a` @type ^`byte`[] @kind object;
  #L11af5c.  v6:= v10.`b.n.b` @type ^`int`;
  #L11af60.  v12:= v10.`b.n.c` @type ^`int`;
  #L11af64.  v7:= v6;
  #L11af66.  if v7 >= v12 then goto L11b05c;
  #L11af6a.  v8:= v11[v7] @kind byte;
  #L11af6e.  v6:= 48I;
  #L11af72.  if v8 < v6 then goto L11afe8;
  #L11af76.  v6:= 57I;
  #L11af7a.  if v8 > v6 then goto L11afe8;
  #L11af7e.  v6:= v8 + -48;
  #L11af82.  v14:= -3.105036184601418E231D;
  #L11af86.  v14:= v14 ^& v4 @kind long;
  #L11af88.  v16:= 0L;
  #L11af8c.  v9:= lcmp(v14, v16);
  #L11af90.  if v9 == 0 then goto L11b09e;
  #L11af94.  v2:= new `b.c`;
  #L11af98.  call `<init>`(v2) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11af9e.  call temp:= `i`(v2, v4) @signature `Lb/c;.i:(J)Lb/c;` @kind virtual;
  #L11afa4.  v2:= temp @kind object;
  #L11afa6.  call temp:= `b`(v2, v8) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11afac.  v2:= temp @kind object;
  #L11afae.  v3:= new `java.lang.NumberFormatException`;
  #L11afb2.  v4:= new `java.lang.StringBuilder`;
  #L11afb6.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11afbc.  v5:= "Number too large: " @kind object;
  #L11afc0.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11afc6.  v4:= temp @kind object;
  #L11afc8.  call temp:= `o`(v2) @signature `Lb/c;.o:()Ljava/lang/String;` @kind virtual;
  #L11afce.  v2:= temp @kind object;
  #L11afd0.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11afd6.  v2:= temp @kind object;
  #L11afd8.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11afde.  v2:= temp @kind object;
  #L11afe0.  call `<init>`(v3, v2) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11afe6.  throw v3;
  #L11afe8.  v6:= 97I;
  #L11afec.  if v8 < v6 then goto L11b002;
  #L11aff0.  v6:= 102I;
  #L11aff4.  if v8 > v6 then goto L11b002;
  #L11aff8.  v6:= v8 + -97;
  #L11affc.  v6:= v6 + 10;
  #L11b000.  goto L11af82;
  #L11b002.  v6:= 65I;
  #L11b006.  if v8 < v6 then goto L11b01c;
  #L11b00a.  v6:= 70I;
  #L11b00e.  if v8 > v6 then goto L11b01c;
  #L11b012.  v6:= v8 + -65;
  #L11b016.  v6:= v6 + 10;
  #L11b01a.  goto L11af82;
  #L11b01c.  if v3 != 0 then goto L11b05a;
  #L11b020.  v2:= new `java.lang.NumberFormatException`;
  #L11b024.  v3:= new `java.lang.StringBuilder`;
  #L11b028.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11b02e.  v4:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L11b032.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b038.  v3:= temp @kind object;
  #L11b03a.  call temp:= `toHexString`(v8) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L11b040.  v4:= temp @kind object;
  #L11b042.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b048.  v3:= temp @kind object;
  #L11b04a.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11b050.  v3:= temp @kind object;
  #L11b052.  call `<init>`(v2, v3) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b058.  throw v2;
  #L11b05a.  v2:= 1I;
  #L11b05c.  if v7 != v12 then goto L11b0b6;
  #L11b060.  call temp:= `a`(v10) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11b066.  v6:= temp @kind object;
  #L11b068.  v0:= v18 @kind object;
  #L11b06c.  v0.`b.c.a` @type ^`b.n` := v6 @kind object;
  #L11b070.  call `a`(v10) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11b076.  if v2 != 0 then goto L11b086;
  #L11b07a.  v0:= v18 @kind object;
  #L11b07e.  v6:= v0.`b.c.a` @type ^`b.n` @kind object;
  #L11b082.  if v6 != 0 then goto L11af50;
  #L11b086.  v0:= v18 @kind object;
  #L11b08a.  v6:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11b08e.  v2:= (`long`) v3 @kind i2l;
  #L11b090.  v2:= v6 - v2 @kind long;
  #L11b094.  v0:= v18 @kind object;
  #L11b098.  v0.`b.c.b` @type ^`long` := v2 @kind wide;
  #L11b09c.  return v4 @kind wide;
  #L11b09e.  v8:= 4I;
  #L11b0a0.  v4:= v4 ^< v8 @kind long;
  #L11b0a2.  v8:= (`long`) v6 @kind i2l;
  #L11b0a4.  v8:= v8 ^| v4 @kind long;
  #L11b0a6.  v4:= v7 + 1;
  #L11b0aa.  v3:= v3 + 1;
  #L11b0ae.  v7:= v4;
  #L11b0b0.  v4:= v8 @kind wide;
  #L11b0b2.  goto L11af66;
  #L11b0b6.  v10.`b.n.b` @type ^`int` := v7;
  #L11b0ba.  goto L11b076;
}
procedure `b.f` `n`(`b.c` v2 @kind this) @signature `Lb/c;.n:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11b0cc.  v0:= new `b.f`;
  #L11b0d0.  call temp:= `q`(v2) @signature `Lb/c;.q:()[B` @kind virtual;
  #L11b0d6.  v1:= temp @kind object;
  #L11b0d8.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11b0de.  return v0 @kind object;
}
procedure `java.lang.String` `o`(`b.c` v3 @kind this) @signature `Lb/c;.o:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L11b0f0.  v0:= v3.`b.c.b` @type ^`long` @kind wide;
  #L11b0f4.  v2:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L11b0f8.  call temp:= `a`(v3, v0, v2) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L11b0fe.  v0:= temp @kind object;
  #L11b100.  return v0 @kind object;
  #L11b102.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L11b104.  v1:= new `java.lang.AssertionError`;
  #L11b108.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11b10e.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L11b102;
}
procedure `java.lang.String` `p`(`b.c` v8 @kind this) @signature `Lb/c;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11b130.  v0:= 10I;
  #L11b134.  call temp:= `a`(v8, v0) @signature `Lb/c;.a:(B)J` @kind virtual;
  #L11b13a.  v0:= temp @kind wide;
  #L11b13c.  v2:= -1L;
  #L11b140.  v2:= lcmp(v0, v2);
  #L11b144.  if v2 != 0 then goto L11b1d8;
  #L11b148.  v1:= new `b.c`;
  #L11b14c.  call `<init>`(v1) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11b152.  v2:= 0L;
  #L11b156.  v4:= 32L;
  #L11b15a.  v6:= v8.`b.c.b` @type ^`long` @kind wide;
  #L11b15e.  call temp:= `min`(v4, v6) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11b164.  v4:= temp @kind wide;
  #L11b166.  v0:= v8 @kind object;
  #L11b168.  call temp:= `a`(v0, v1, v2, v4) @signature `Lb/c;.a:(Lb/c;JJ)Lb/c;` @kind virtual;
  #L11b16e.  v0:= new `java.io.EOFException`;
  #L11b172.  v2:= new `java.lang.StringBuilder`;
  #L11b176.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11b17c.  v3:= "\\n not found: size=" @kind object;
  #L11b180.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b186.  v2:= temp @kind object;
  #L11b188.  call temp:= `b`(v8) @signature `Lb/c;.b:()J` @kind virtual;
  #L11b18e.  v4:= temp @kind wide;
  #L11b190.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b196.  v2:= temp @kind object;
  #L11b198.  v3:= " content=" @kind object;
  #L11b19c.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b1a2.  v2:= temp @kind object;
  #L11b1a4.  call temp:= `n`(v1) @signature `Lb/c;.n:()Lb/f;` @kind virtual;
  #L11b1aa.  v1:= temp @kind object;
  #L11b1ac.  call temp:= `e`(v1) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L11b1b2.  v1:= temp @kind object;
  #L11b1b4.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b1ba.  v1:= temp @kind object;
  #L11b1bc.  v2:= "…" @kind object;
  #L11b1c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b1c6.  v1:= temp @kind object;
  #L11b1c8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11b1ce.  v1:= temp @kind object;
  #L11b1d0.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b1d6.  throw v0;
  #L11b1d8.  call temp:= `e`(v8, v0) @signature `Lb/c;.e:(J)Ljava/lang/String;` @kind virtual;
  #L11b1de.  v0:= temp @kind object;
  #L11b1e0.  return v0 @kind object;
}
procedure `byte`[] `q`(`b.c` v2 @kind this) @signature `Lb/c;.q:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L11b1f4.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11b1f8.  call temp:= `f`(v2, v0) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #Try_end0.  
  #L11b1fe.  v0:= temp @kind object;
  #L11b200.  return v0 @kind object;
  #L11b202.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L11b204.  v1:= new `java.lang.AssertionError`;
  #L11b208.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11b20e.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L11b202;
}
procedure `void` `r`(`b.c` v2 @kind this) @signature `Lb/c;.r:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L11b230.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11b234.  call `g`(v2, v0) @signature `Lb/c;.g:(J)V` @kind virtual;
  #Try_end0.  
  #L11b23a.  return @kind void;
  #L11b23c.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L11b23e.  v1:= new `java.lang.AssertionError`;
  #L11b242.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11b248.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L11b23c;
}
procedure `b.c` `s`(`b.c` v6 @kind this) @signature `Lb/c;.s:()Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11b26c.  v1:= new `b.c`;
  #L11b270.  call `<init>`(v1) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11b276.  v2:= v6.`b.c.b` @type ^`long` @kind wide;
  #L11b27a.  v4:= 0L;
  #L11b27e.  v0:= lcmp(v2, v4);
  #L11b282.  if v0 != 0 then goto L11b28a;
  #L11b286.  v0:= v1 @kind object;
  #L11b288.  return v0 @kind object;
  #L11b28a.  v0:= new `b.n`;
  #L11b28e.  v2:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L11b292.  call `<init>`(v0, v2) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L11b298.  v1.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L11b29c.  v0:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L11b2a0.  v2:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L11b2a4.  v3:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L11b2a8.  v2.`b.n.g` @type ^`b.n` := v3 @kind object;
  #L11b2ac.  v0.`b.n.f` @type ^`b.n` := v3 @kind object;
  #L11b2b0.  v0:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L11b2b4.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11b2b8.  v2:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L11b2bc.  if v0 == v2 then goto L11b2de;
  #L11b2c0.  v2:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L11b2c4.  v2:= v2.`b.n.g` @type ^`b.n` @kind object;
  #L11b2c8.  v3:= new `b.n`;
  #L11b2cc.  call `<init>`(v3, v0) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L11b2d2.  call temp:= `a`(v2, v3) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11b2d8.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11b2dc.  goto L11b2b8;
  #L11b2de.  v2:= v6.`b.c.b` @type ^`long` @kind wide;
  #L11b2e2.  v1.`b.c.b` @type ^`long` := v2 @kind wide;
  #L11b2e6.  v0:= v1 @kind object;
  #L11b2e8.  goto L11b288;
}
procedure `b.f` `t`(`b.c` v4 @kind this) @signature `Lb/c;.t:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11b2fc.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11b300.  v2:= 2147483647L;
  #L11b306.  v0:= lcmp(v0, v2);
  #L11b30a.  if v0 <= 0 then goto L11b344;
  #L11b30e.  v0:= new `java.lang.IllegalArgumentException`;
  #L11b312.  v1:= new `java.lang.StringBuilder`;
  #L11b316.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11b31c.  v2:= "size > Integer.MAX_VALUE: " @kind object;
  #L11b320.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b326.  v1:= temp @kind object;
  #L11b328.  v2:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11b32c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b332.  v1:= temp @kind object;
  #L11b334.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11b33a.  v1:= temp @kind object;
  #L11b33c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11b342.  throw v0;
  #L11b344.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11b348.  v0:= (`int`) v0 @kind l2i;
  #L11b34a.  call temp:= `f`(v4, v0) @signature `Lb/c;.f:(I)Lb/f;` @kind virtual;
  #L11b350.  v0:= temp @kind object;
  #L11b352.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`b.c` v1 @kind this) @signature `Lb/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b364.  call temp:= `t`(v1) @signature `Lb/c;.t:()Lb/f;` @kind virtual;
  #L11b36a.  v0:= temp @kind object;
  #L11b36c.  call temp:= `toString`(v0) @signature `Lb/f;.toString:()Ljava/lang/String;` @kind virtual;
  #L11b372.  v0:= temp @kind object;
  #L11b374.  return v0 @kind object;
}
procedure `b.d` `u`(`b.c` v1 @kind this) @signature `Lb/c;.u:()Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11b388.  call temp:= `d`(v1) @signature `Lb/c;.d:()Lb/c;` @kind virtual;
  #L11b38e.  v0:= temp @kind object;
  #L11b390.  return v0 @kind object;
}
