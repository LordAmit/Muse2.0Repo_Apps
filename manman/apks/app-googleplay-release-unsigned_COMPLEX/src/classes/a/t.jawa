record `a.t` @kind class @AccessFlag PUBLIC_FINAL {
  `java.lang.String` `a.t.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.t.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.t.e` @AccessFlag PRIVATE_FINAL;
  `java.lang.String` `a.t.f` @AccessFlag PRIVATE_FINAL;
}
global `java.util.regex.Pattern` `@@a.t.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `java.util.regex.Pattern` `@@a.t.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/t;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L08aaa0.  v0:= "([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)/([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)" @kind object;
  #L08aaa4.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L08aaaa.  v0:= temp @kind object;
  #L08aaac.  `@@a.t.a` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L08aab0.  v0:= ";\\s*(?:([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)=(?:([a-zA-Z0-9-!#$%&'*+.^_`{|}~]+)|\"([^\"]*)\"))?" @kind object;
  #L08aab4.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L08aaba.  v0:= temp @kind object;
  #L08aabc.  `@@a.t.b` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L08aac0.  return @kind void;
}
procedure `void` `<init>`(`a.t` v0 @kind this, `java.lang.String` v1 @kind object, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object, `java.lang.String` v4 @kind object) @signature `La/t;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L08aad4.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08aada.  v0.`a.t.c` @type ^`java.lang.String` := v1 @kind object;
  #L08aade.  v0.`a.t.d` @type ^`java.lang.String` := v2 @kind object;
  #L08aae2.  v0.`a.t.e` @type ^`java.lang.String` := v3 @kind object;
  #L08aae6.  v0.`a.t.f` @type ^`java.lang.String` := v4 @kind object;
  #L08aaea.  return @kind void;
}
procedure `a.t` `a`(`java.lang.String` v9 @kind object) @signature `La/t;.a:(Ljava/lang/String;)La/t;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L08aafc.  v2:= 0I;
  #L08aafe.  v8:= 2I;
  #L08ab00.  v7:= 1I;
  #L08ab02.  v0:= `@@a.t.a` @type ^`java.util.regex.Pattern` @kind object;
  #L08ab06.  call temp:= `matcher`(v0, v9) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L08ab0c.  v0:= temp @kind object;
  #L08ab0e.  call temp:= `lookingAt`(v0) @signature `Ljava/util/regex/Matcher;.lookingAt:()Z` @kind virtual;
  #L08ab14.  v1:= temp;
  #L08ab16.  if v1 != 0 then goto L08ab1c;
  #L08ab1a.  return v2 @kind object;
  #L08ab1c.  call temp:= `group`(v0, v7) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L08ab22.  v1:= temp @kind object;
  #L08ab24.  v3:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L08ab28.  call temp:= `toLowerCase`(v1, v3) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L08ab2e.  v3:= temp @kind object;
  #L08ab30.  call temp:= `group`(v0, v8) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L08ab36.  v1:= temp @kind object;
  #L08ab38.  v4:= `@@java.util.Locale.US` @type ^`java.util.Locale` @kind object;
  #L08ab3c.  call temp:= `toLowerCase`(v1, v4) @signature `Ljava/lang/String;.toLowerCase:(Ljava/util/Locale;)Ljava/lang/String;` @kind virtual;
  #L08ab42.  v4:= temp @kind object;
  #L08ab44.  v1:= `@@a.t.b` @type ^`java.util.regex.Pattern` @kind object;
  #L08ab48.  call temp:= `matcher`(v1, v9) @signature `Ljava/util/regex/Pattern;.matcher:(Ljava/lang/CharSequence;)Ljava/util/regex/Matcher;` @kind virtual;
  #L08ab4e.  v5:= temp @kind object;
  #L08ab50.  call temp:= `end`(v0) @signature `Ljava/util/regex/Matcher;.end:()I` @kind virtual;
  #L08ab56.  v0:= temp;
  #L08ab58.  v1:= v0;
  #L08ab5a.  v0:= v2 @kind object;
  #L08ab5c.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08ab62.  v6:= temp;
  #L08ab64.  if v1 >= v6 then goto L08ac46;
  #L08ab68.  call temp:= `length`(v9) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08ab6e.  v6:= temp;
  #L08ab70.  call temp:= `region`(v5, v1, v6) @signature `Ljava/util/regex/Matcher;.region:(II)Ljava/util/regex/Matcher;` @kind virtual;
  #L08ab76.  call temp:= `lookingAt`(v5) @signature `Ljava/util/regex/Matcher;.lookingAt:()Z` @kind virtual;
  #L08ab7c.  v1:= temp;
  #L08ab7e.  if v1 == 0 then goto L08ab1a;
  #L08ab82.  call temp:= `group`(v5, v7) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L08ab88.  v1:= temp @kind object;
  #L08ab8a.  if v1 == 0 then goto L08ab9e;
  #L08ab8e.  v6:= "charset" @kind object;
  #L08ab92.  call temp:= `equalsIgnoreCase`(v1, v6) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08ab98.  v1:= temp;
  #L08ab9a.  if v1 != 0 then goto L08aba8;
  #L08ab9e.  call temp:= `end`(v5) @signature `Ljava/util/regex/Matcher;.end:()I` @kind virtual;
  #L08aba4.  v1:= temp;
  #L08aba6.  goto L08ab5c;
  #L08aba8.  call temp:= `group`(v5, v8) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L08abae.  v1:= temp @kind object;
  #L08abb0.  if v1 == 0 then goto L08ac36;
  #L08abb4.  v6:= "'" @kind object;
  #L08abb8.  call temp:= `startsWith`(v1, v6) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L08abbe.  v6:= temp;
  #L08abc0.  if v6 == 0 then goto L08abf4;
  #L08abc4.  v6:= "'" @kind object;
  #L08abc8.  call temp:= `endsWith`(v1, v6) @signature `Ljava/lang/String;.endsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L08abce.  v6:= temp;
  #L08abd0.  if v6 == 0 then goto L08abf4;
  #L08abd4.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08abda.  v6:= temp;
  #L08abdc.  if v6 <= v8 then goto L08abf4;
  #L08abe0.  call temp:= `length`(v1) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L08abe6.  v6:= temp;
  #L08abe8.  v6:= v6 + -1;
  #L08abec.  call temp:= `substring`(v1, v7, v6) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L08abf2.  v1:= temp @kind object;
  #L08abf4.  if v0 == 0 then goto L08ac42;
  #L08abf8.  call temp:= `equalsIgnoreCase`(v1, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08abfe.  v0:= temp;
  #L08ac00.  if v0 != 0 then goto L08ac42;
  #L08ac04.  v0:= new `java.lang.IllegalArgumentException`;
  #L08ac08.  v1:= new `java.lang.StringBuilder`;
  #L08ac0c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08ac12.  v2:= "Multiple different charsets: " @kind object;
  #L08ac16.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08ac1c.  v1:= temp @kind object;
  #L08ac1e.  call temp:= `append`(v1, v9) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08ac24.  v1:= temp @kind object;
  #L08ac26.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08ac2c.  v1:= temp @kind object;
  #L08ac2e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08ac34.  throw v0;
  #L08ac36.  v1:= 3I;
  #L08ac38.  call temp:= `group`(v5, v1) @signature `Ljava/util/regex/Matcher;.group:(I)Ljava/lang/String;` @kind virtual;
  #L08ac3e.  v1:= temp @kind object;
  #L08ac40.  goto L08abf4;
  #L08ac42.  v0:= v1 @kind object;
  #L08ac44.  goto L08ab9e;
  #L08ac46.  v2:= new `a.t`;
  #L08ac4a.  call `<init>`(v2, v9, v3, v4, v0) @signature `La/t;.<init>:(Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;Ljava/lang/String;)V` @kind direct;
  #L08ac50.  goto L08ab1a;
}
procedure `java.nio.charset.Charset` `a`(`a.t` v1 @kind this, `java.nio.charset.Charset` v2 @kind object) @signature `La/t;.a:(Ljava/nio/charset/Charset;)Ljava/nio/charset/Charset;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08ac64.  v0:= v1.`a.t.f` @type ^`java.lang.String` @kind object;
  #L08ac68.  if v0 == 0 then goto L08ac78;
  #L08ac6c.  v0:= v1.`a.t.f` @type ^`java.lang.String` @kind object;
  #L08ac70.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L08ac76.  v2:= temp @kind object;
  #L08ac78.  return v2 @kind object;
}
procedure `boolean` `equals`(`a.t` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `La/t;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08ac8c.  v0:= instanceof @variable v3 @type ^`a.t` @kind boolean;
  #L08ac90.  if v0 == 0 then goto L08acb0;
  #L08ac94.  v3:= (`a.t`) v3 @kind object;
  #L08ac98.  v0:= v3.`a.t.c` @type ^`java.lang.String` @kind object;
  #L08ac9c.  v1:= v2.`a.t.c` @type ^`java.lang.String` @kind object;
  #L08aca0.  call temp:= `equals`(v0, v1) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L08aca6.  v0:= temp;
  #L08aca8.  if v0 == 0 then goto L08acb0;
  #L08acac.  v0:= 1I;
  #L08acae.  return v0;
  #L08acb0.  v0:= 0I;
  #L08acb2.  goto L08acae;
}
procedure `int` `hashCode`(`a.t` v1 @kind this) @signature `La/t;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08acc4.  v0:= v1.`a.t.c` @type ^`java.lang.String` @kind object;
  #L08acc8.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L08acce.  v0:= temp;
  #L08acd0.  return v0;
}
procedure `java.lang.String` `toString`(`a.t` v1 @kind this) @signature `La/t;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08ace4.  v0:= v1.`a.t.c` @type ^`java.lang.String` @kind object;
  #L08ace8.  return v0 @kind object;
}
