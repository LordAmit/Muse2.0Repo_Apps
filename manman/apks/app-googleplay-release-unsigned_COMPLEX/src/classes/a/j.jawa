record `a.j` @kind class @AccessFlag PUBLIC_FINAL {
  `a.a.b.d` `a.j.a` @AccessFlag FINAL;
  `boolean` `a.j.b` @AccessFlag ;
  `int` `a.j.e` @AccessFlag PRIVATE_FINAL;
  `long` `a.j.f` @AccessFlag PRIVATE_FINAL;
  `java.lang.Runnable` `a.j.g` @AccessFlag PRIVATE_FINAL;
  `java.util.Deque` `a.j.h` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.j.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
global `java.util.concurrent.Executor` `@@a.j.d` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L086b30.  v8:= 1I;
  #L086b32.  v2:= 0I;
  #L086b34.  v0:= constclass @type ^`a.j` @kind object;
  #L086b38.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L086b3e.  v0:= temp;
  #L086b40.  if v0 != 0 then goto L086b7e;
  #L086b44.  v0:= v8;
  #L086b46.  `@@a.j.c` @type ^`boolean` := v0 @kind boolean;
  #L086b4a.  v1:= new `java.util.concurrent.ThreadPoolExecutor`;
  #L086b4e.  v3:= 2147483647I;
  #L086b54.  v4:= 60L;
  #L086b58.  v6:= `@@java.util.concurrent.TimeUnit.SECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L086b5c.  v7:= new `java.util.concurrent.SynchronousQueue`;
  #L086b60.  call `<init>`(v7) @signature `Ljava/util/concurrent/SynchronousQueue;.<init>:()V` @kind direct;
  #L086b66.  v0:= "OkHttp ConnectionPool" @kind object;
  #L086b6a.  call temp:= `a`(v0, v8) @signature `La/a/c;.a:(Ljava/lang/String;Z)Ljava/util/concurrent/ThreadFactory;` @kind static;
  #L086b70.  v8:= temp @kind object;
  #L086b72.  call `<init>`(v1, v2, v3, v4, v6, v7, v8) @signature `Ljava/util/concurrent/ThreadPoolExecutor;.<init>:(IIJLjava/util/concurrent/TimeUnit;Ljava/util/concurrent/BlockingQueue;Ljava/util/concurrent/ThreadFactory;)V` @kind direct;
  #L086b78.  `@@a.j.d` @type ^`java.util.concurrent.Executor` := v1 @kind object;
  #L086b7c.  return @kind void;
  #L086b7e.  v0:= v2;
  #L086b80.  goto L086b46;
}
procedure `void` `<init>`(`a.j` v4 @kind this) @signature `La/j;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L086b94.  v0:= 5I;
  #L086b96.  v2:= 5L;
  #L086b9a.  v1:= `@@java.util.concurrent.TimeUnit.MINUTES` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L086b9e.  call `<init>`(v4, v0, v2, v1) @signature `La/j;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @kind direct;
  #L086ba4.  return @kind void;
}
procedure `void` `<init>`(`a.j` v4 @kind this, `int` v5 , `long` v6 , `java.util.concurrent.TimeUnit` v8 @kind object) @signature `La/j;.<init>:(IJLjava/util/concurrent/TimeUnit;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L086bb8.  call `<init>`(v4) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L086bbe.  v0:= new `a.j$1`;
  #L086bc2.  call `<init>`(v0, v4) @signature `La/j$1;.<init>:(La/j;)V` @kind direct;
  #L086bc8.  v4.`a.j.g` @type ^`java.lang.Runnable` := v0 @kind object;
  #L086bcc.  v0:= new `java.util.ArrayDeque`;
  #L086bd0.  call `<init>`(v0) @signature `Ljava/util/ArrayDeque;.<init>:()V` @kind direct;
  #L086bd6.  v4.`a.j.h` @type ^`java.util.Deque` := v0 @kind object;
  #L086bda.  v0:= new `a.a.b.d`;
  #L086bde.  call `<init>`(v0) @signature `La/a/b/d;.<init>:()V` @kind direct;
  #L086be4.  v4.`a.j.a` @type ^`a.a.b.d` := v0 @kind object;
  #L086be8.  v4.`a.j.e` @type ^`int` := v5;
  #L086bec.  call temp:= `toNanos`(v8, v6) @signature `Ljava/util/concurrent/TimeUnit;.toNanos:(J)J` @kind virtual;
  #L086bf2.  v0:= temp @kind wide;
  #L086bf4.  v4.`a.j.f` @type ^`long` := v0 @kind wide;
  #L086bf8.  v0:= 0L;
  #L086bfc.  v0:= lcmp(v6, v0);
  #L086c00.  if v0 > 0 then goto L086c36;
  #L086c04.  v0:= new `java.lang.IllegalArgumentException`;
  #L086c08.  v1:= new `java.lang.StringBuilder`;
  #L086c0c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L086c12.  v2:= "keepAliveDuration <= 0: " @kind object;
  #L086c16.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L086c1c.  v1:= temp @kind object;
  #L086c1e.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L086c24.  v1:= temp @kind object;
  #L086c26.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L086c2c.  v1:= temp @kind object;
  #L086c2e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L086c34.  throw v0;
  #L086c36.  return @kind void;
}
procedure `int` `a`(`a.j` v6 @kind this, `a.a.b.c` v7 @kind object, `long` v8 ) @signature `La/j;.a:(La/a/b/c;J)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L086c48.  v2:= 0I;
  #L086c4a.  v3:= v7.`a.a.b.c.d` @type ^`java.util.List` @kind object;
  #L086c4e.  v1:= v2;
  #L086c50.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L086c56.  v0:= temp;
  #L086c58.  if v1 >= v0 then goto L086d02;
  #L086c5c.  call temp:= `get`(v3, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L086c62.  v0:= temp @kind object;
  #L086c64.  v0:= (`java.lang.ref.Reference`) v0 @kind object;
  #L086c68.  call temp:= `get`(v0) @signature `Ljava/lang/ref/Reference;.get:()Ljava/lang/Object;` @kind virtual;
  #L086c6e.  v4:= temp @kind object;
  #L086c70.  if v4 == 0 then goto L086c7c;
  #L086c74.  v0:= v1 + 1;
  #L086c78.  v1:= v0;
  #L086c7a.  goto L086c50;
  #L086c7c.  v0:= (`a.a.b.g$a`) v0 @kind object;
  #L086c80.  v4:= new `java.lang.StringBuilder`;
  #L086c84.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L086c8a.  v5:= "A connection to " @kind object;
  #L086c8e.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L086c94.  v4:= temp @kind object;
  #L086c96.  call temp:= `a`(v7) @signature `La/a/b/c;.a:()La/ab;` @kind virtual;
  #L086c9c.  v5:= temp @kind object;
  #L086c9e.  call temp:= `a`(v5) @signature `La/ab;.a:()La/a;` @kind virtual;
  #L086ca4.  v5:= temp @kind object;
  #L086ca6.  call temp:= `a`(v5) @signature `La/a;.a:()La/r;` @kind virtual;
  #L086cac.  v5:= temp @kind object;
  #L086cae.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L086cb4.  v4:= temp @kind object;
  #L086cb6.  v5:= " was leaked. Did you forget to close a response body?" @kind object;
  #L086cba.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L086cc0.  v4:= temp @kind object;
  #L086cc2.  call temp:= `toString`(v4) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L086cc8.  v4:= temp @kind object;
  #L086cca.  call temp:= `b`() @signature `La/a/g/e;.b:()La/a/g/e;` @kind static;
  #L086cd0.  v5:= temp @kind object;
  #L086cd2.  v0:= v0.`a.a.b.g$a.a` @type ^`java.lang.Object` @kind object;
  #L086cd6.  call `a`(v5, v4, v0) @signature `La/a/g/e;.a:(Ljava/lang/String;Ljava/lang/Object;)V` @kind virtual;
  #L086cdc.  call temp:= `remove`(v3, v1) @signature `Ljava/util/List;.remove:(I)Ljava/lang/Object;` @kind interface;
  #L086ce2.  v0:= 1I;
  #L086ce4.  v7.`a.a.b.c.a` @type ^`boolean` := v0 @kind boolean;
  #L086ce8.  call temp:= `isEmpty`(v3) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L086cee.  v0:= temp;
  #L086cf0.  if v0 == 0 then goto L086c50;
  #L086cf4.  v0:= v6.`a.j.f` @type ^`long` @kind wide;
  #L086cf8.  v0:= v8 - v0 @kind long;
  #L086cfc.  v7.`a.a.b.c.e` @type ^`long` := v0 @kind wide;
  #L086d00.  return v2;
  #L086d02.  call temp:= `size`(v3) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L086d08.  v2:= temp;
  #L086d0a.  goto L086d00;
}
procedure `long` `a`(`a.j` v13 @kind this, `long` v14 ) @signature `La/j;.a:(J)J` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L086d1c.  v0:= 0I;
  #L086d1e.  v1:= 0I;
  #L086d20.  v4:= -9223372036854775808L;
  #L086d24.  @monitorenter v13
  #Try_start0.  
  #L086d26.  v2:= v13.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L086d2a.  call temp:= `iterator`(v2) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L086d30.  v8:= temp @kind object;
  #L086d32.  v2:= v0;
  #L086d34.  v7:= v0;
  #L086d36.  call temp:= `hasNext`(v8) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L086d3c.  v0:= temp;
  #L086d3e.  if v0 == 0 then goto L086d84;
  #L086d42.  call temp:= `next`(v8) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L086d48.  v0:= temp @kind object;
  #L086d4a.  v0:= (`a.a.b.c`) v0 @kind object;
  #L086d4e.  call temp:= `a`(v13, v0, v14) @signature `La/j;.a:(La/a/b/c;J)I` @kind direct;
  #L086d54.  v3:= temp;
  #L086d56.  if v3 <= 0 then goto L086d62;
  #L086d5a.  v0:= v7 + 1;
  #L086d5e.  v7:= v0;
  #L086d60.  goto L086d36;
  #L086d62.  v6:= v2 + 1;
  #L086d66.  v2:= v0.`a.a.b.c.e` @type ^`long` @kind wide;
  #L086d6a.  v2:= v14 - v2 @kind long;
  #L086d6e.  v9:= lcmp(v2, v4);
  #L086d72.  if v9 <= 0 then goto L086de6;
  #L086d76.  v10:= v2 @kind wide;
  #L086d78.  v2:= v0 @kind object;
  #L086d7a.  v0:= v10 @kind wide;
  #L086d7c.  v4:= v0 @kind wide;
  #L086d7e.  v1:= v2 @kind object;
  #L086d80.  v2:= v6;
  #L086d82.  goto L086d36;
  #L086d84.  v8:= v13.`a.j.f` @type ^`long` @kind wide;
  #L086d88.  v0:= lcmp(v4, v8);
  #L086d8c.  if v0 >= 0 then goto L086d98;
  #L086d90.  v0:= v13.`a.j.e` @type ^`int`;
  #L086d94.  if v2 <= v0 then goto L086db8;
  #L086d98.  v0:= v13.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L086d9c.  call temp:= `remove`(v0, v1) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L086da2.  @monitorexit v13
  #Try_end0.  
  #L086da4.  call temp:= `b`(v1) @signature `La/a/b/c;.b:()Ljava/net/Socket;` @kind virtual;
  #L086daa.  v0:= temp @kind object;
  #L086dac.  call `a`(v0) @signature `La/a/c;.a:(Ljava/net/Socket;)V` @kind static;
  #L086db2.  v0:= 0L;
  #L086db6.  return v0 @kind wide;
  #L086db8.  if v2 <= 0 then goto L086dcc;
  #Try_start1.  
  #L086dbc.  v0:= v13.`a.j.f` @type ^`long` @kind wide;
  #L086dc0.  v0:= v0 - v4 @kind long;
  #L086dc2.  @monitorexit v13
  #L086dc4.  goto L086db6;
  #L086dc6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L086dc8.  @monitorexit v13
  #Try_end1.  
  #L086dca.  throw v0;
  #L086dcc.  if v7 <= 0 then goto L086dd8;
  #Try_start2.  
  #L086dd0.  v0:= v13.`a.j.f` @type ^`long` @kind wide;
  #L086dd4.  @monitorexit v13
  #L086dd6.  goto L086db6;
  #L086dd8.  v0:= 0I;
  #L086dda.  v13.`a.j.b` @type ^`boolean` := v0 @kind boolean;
  #L086dde.  v0:= -1L;
  #L086de2.  @monitorexit v13
  #Try_end2.  
  #L086de4.  goto L086db6;
  #L086de6.  v2:= v1 @kind object;
  #L086de8.  v0:= v4 @kind wide;
  #L086dea.  goto L086d7c;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L086dc6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L086dc6;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L086dc6;
}
procedure `a.a.b.c` `a`(`a.j` v3 @kind this, `a.a` v4 @kind object, `a.a.b.g` v5 @kind object) @signature `La/j;.a:(La/a;La/a/b/g;)La/a/b/c;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L086e18.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L086e1c.  if v0 != 0 then goto L086e38;
  #L086e20.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L086e26.  v0:= temp;
  #L086e28.  if v0 != 0 then goto L086e38;
  #L086e2c.  v0:= new `java.lang.AssertionError`;
  #L086e30.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L086e36.  throw v0;
  #L086e38.  v0:= v3.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L086e3c.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L086e42.  v1:= temp @kind object;
  #L086e44.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L086e4a.  v0:= temp;
  #L086e4c.  if v0 == 0 then goto L086e70;
  #L086e50.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L086e56.  v0:= temp @kind object;
  #L086e58.  v0:= (`a.a.b.c`) v0 @kind object;
  #L086e5c.  call temp:= `a`(v0, v4) @signature `La/a/b/c;.a:(La/a;)Z` @kind virtual;
  #L086e62.  v2:= temp;
  #L086e64.  if v2 == 0 then goto L086e44;
  #L086e68.  call `a`(v5, v0) @signature `La/a/b/g;.a:(La/a/b/c;)V` @kind virtual;
  #L086e6e.  return v0 @kind object;
  #L086e70.  v0:= 0I;
  #L086e72.  goto L086e6e;
}
procedure `void` `a`(`a.j` v2 @kind this, `a.a.b.c` v3 @kind object) @signature `La/j;.a:(La/a/b/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L086e84.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L086e88.  if v0 != 0 then goto L086ea4;
  #L086e8c.  call temp:= `holdsLock`(v2) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L086e92.  v0:= temp;
  #L086e94.  if v0 != 0 then goto L086ea4;
  #L086e98.  v0:= new `java.lang.AssertionError`;
  #L086e9c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L086ea2.  throw v0;
  #L086ea4.  v0:= v2.`a.j.b` @type ^`boolean` @kind boolean;
  #L086ea8.  if v0 != 0 then goto L086ec0;
  #L086eac.  v0:= 1I;
  #L086eae.  v2.`a.j.b` @type ^`boolean` := v0 @kind boolean;
  #L086eb2.  v0:= `@@a.j.d` @type ^`java.util.concurrent.Executor` @kind object;
  #L086eb6.  v1:= v2.`a.j.g` @type ^`java.lang.Runnable` @kind object;
  #L086eba.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L086ec0.  v0:= v2.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L086ec4.  call temp:= `add`(v0, v3) @signature `Ljava/util/Deque;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L086eca.  return @kind void;
}
procedure `java.net.Socket` `b`(`a.j` v3 @kind this, `a.a` v4 @kind object, `a.a.b.g` v5 @kind object) @signature `La/j;.b:(La/a;La/a/b/g;)Ljava/net/Socket;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L086edc.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L086ee0.  if v0 != 0 then goto L086efc;
  #L086ee4.  call temp:= `holdsLock`(v3) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L086eea.  v0:= temp;
  #L086eec.  if v0 != 0 then goto L086efc;
  #L086ef0.  v0:= new `java.lang.AssertionError`;
  #L086ef4.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L086efa.  throw v0;
  #L086efc.  v0:= v3.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L086f00.  call temp:= `iterator`(v0) @signature `Ljava/util/Deque;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L086f06.  v1:= temp @kind object;
  #L086f08.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L086f0e.  v0:= temp;
  #L086f10.  if v0 == 0 then goto L086f4e;
  #L086f14.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L086f1a.  v0:= temp @kind object;
  #L086f1c.  v0:= (`a.a.b.c`) v0 @kind object;
  #L086f20.  call temp:= `a`(v0, v4) @signature `La/a/b/c;.a:(La/a;)Z` @kind virtual;
  #L086f26.  v2:= temp;
  #L086f28.  if v2 == 0 then goto L086f08;
  #L086f2c.  call temp:= `d`(v0) @signature `La/a/b/c;.d:()Z` @kind virtual;
  #L086f32.  v2:= temp;
  #L086f34.  if v2 == 0 then goto L086f08;
  #L086f38.  call temp:= `b`(v5) @signature `La/a/b/g;.b:()La/a/b/c;` @kind virtual;
  #L086f3e.  v2:= temp @kind object;
  #L086f40.  if v0 == v2 then goto L086f08;
  #L086f44.  call temp:= `b`(v5, v0) @signature `La/a/b/g;.b:(La/a/b/c;)Ljava/net/Socket;` @kind virtual;
  #L086f4a.  v0:= temp @kind object;
  #L086f4c.  return v0 @kind object;
  #L086f4e.  v0:= 0I;
  #L086f50.  goto L086f4c;
}
procedure `boolean` `b`(`a.j` v1 @kind this, `a.a.b.c` v2 @kind object) @signature `La/j;.b:(La/a/b/c;)Z` @AccessFlag  {
    temp;
    v0;

  #L086f64.  v0:= `@@a.j.c` @type ^`boolean` @kind boolean;
  #L086f68.  if v0 != 0 then goto L086f84;
  #L086f6c.  call temp:= `holdsLock`(v1) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L086f72.  v0:= temp;
  #L086f74.  if v0 != 0 then goto L086f84;
  #L086f78.  v0:= new `java.lang.AssertionError`;
  #L086f7c.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L086f82.  throw v0;
  #L086f84.  v0:= v2.`a.a.b.c.a` @type ^`boolean` @kind boolean;
  #L086f88.  if v0 != 0 then goto L086f94;
  #L086f8c.  v0:= v1.`a.j.e` @type ^`int`;
  #L086f90.  if v0 != 0 then goto L086fa2;
  #L086f94.  v0:= v1.`a.j.h` @type ^`java.util.Deque` @kind object;
  #L086f98.  call temp:= `remove`(v0, v2) @signature `Ljava/util/Deque;.remove:(Ljava/lang/Object;)Z` @kind interface;
  #L086f9e.  v0:= 1I;
  #L086fa0.  return v0;
  #L086fa2.  call `notifyAll`(v1) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L086fa8.  v0:= 0I;
  #L086faa.  goto L086fa0;
}
