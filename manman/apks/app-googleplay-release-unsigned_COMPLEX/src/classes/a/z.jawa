record `a.z` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface {
  `a.x` `a.z.a` @AccessFlag FINAL;
  `a.v` `a.z.b` @AccessFlag FINAL;
  `int` `a.z.c` @AccessFlag FINAL;
  `java.lang.String` `a.z.d` @AccessFlag FINAL;
  `a.p` `a.z.e` @AccessFlag FINAL;
  `a.q` `a.z.f` @AccessFlag FINAL;
  `a.aa` `a.z.g` @AccessFlag FINAL;
  `a.z` `a.z.h` @AccessFlag FINAL;
  `a.z` `a.z.i` @AccessFlag FINAL;
  `a.z` `a.z.j` @AccessFlag FINAL;
  `long` `a.z.k` @AccessFlag FINAL;
  `long` `a.z.l` @AccessFlag FINAL;
  `a.d` `a.z.m` @AccessFlag PRIVATE_VOLATILE;
}
procedure `void` `<init>`(`a.z` v2 @kind this, `a.z$a` v3 @kind object) @signature `La/z;.<init>:(La/z$a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L08c408.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08c40e.  v0:= v3.`a.z$a.a` @type ^`a.x` @kind object;
  #L08c412.  v2.`a.z.a` @type ^`a.x` := v0 @kind object;
  #L08c416.  v0:= v3.`a.z$a.b` @type ^`a.v` @kind object;
  #L08c41a.  v2.`a.z.b` @type ^`a.v` := v0 @kind object;
  #L08c41e.  v0:= v3.`a.z$a.c` @type ^`int`;
  #L08c422.  v2.`a.z.c` @type ^`int` := v0;
  #L08c426.  v0:= v3.`a.z$a.d` @type ^`java.lang.String` @kind object;
  #L08c42a.  v2.`a.z.d` @type ^`java.lang.String` := v0 @kind object;
  #L08c42e.  v0:= v3.`a.z$a.e` @type ^`a.p` @kind object;
  #L08c432.  v2.`a.z.e` @type ^`a.p` := v0 @kind object;
  #L08c436.  v0:= v3.`a.z$a.f` @type ^`a.q$a` @kind object;
  #L08c43a.  call temp:= `a`(v0) @signature `La/q$a;.a:()La/q;` @kind virtual;
  #L08c440.  v0:= temp @kind object;
  #L08c442.  v2.`a.z.f` @type ^`a.q` := v0 @kind object;
  #L08c446.  v0:= v3.`a.z$a.g` @type ^`a.aa` @kind object;
  #L08c44a.  v2.`a.z.g` @type ^`a.aa` := v0 @kind object;
  #L08c44e.  v0:= v3.`a.z$a.h` @type ^`a.z` @kind object;
  #L08c452.  v2.`a.z.h` @type ^`a.z` := v0 @kind object;
  #L08c456.  v0:= v3.`a.z$a.i` @type ^`a.z` @kind object;
  #L08c45a.  v2.`a.z.i` @type ^`a.z` := v0 @kind object;
  #L08c45e.  v0:= v3.`a.z$a.j` @type ^`a.z` @kind object;
  #L08c462.  v2.`a.z.j` @type ^`a.z` := v0 @kind object;
  #L08c466.  v0:= v3.`a.z$a.k` @type ^`long` @kind wide;
  #L08c46a.  v2.`a.z.k` @type ^`long` := v0 @kind wide;
  #L08c46e.  v0:= v3.`a.z$a.l` @type ^`long` @kind wide;
  #L08c472.  v2.`a.z.l` @type ^`long` := v0 @kind wide;
  #L08c476.  return @kind void;
}
procedure `a.x` `a`(`a.z` v1 @kind this) @signature `La/z;.a:()La/x;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c488.  v0:= v1.`a.z.a` @type ^`a.x` @kind object;
  #L08c48c.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`a.z` v1 @kind this, `java.lang.String` v2 @kind object) @signature `La/z;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c4a0.  v0:= 0I;
  #L08c4a2.  call temp:= `a`(v1, v2, v0) @signature `La/z;.a:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L08c4a8.  v0:= temp @kind object;
  #L08c4aa.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`a.z` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `La/z;.a:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c4bc.  v0:= v1.`a.z.f` @type ^`a.q` @kind object;
  #L08c4c0.  call temp:= `a`(v0, v2) @signature `La/q;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L08c4c6.  v0:= temp @kind object;
  #L08c4c8.  if v0 == 0 then goto L08c4ce;
  #L08c4cc.  v3:= v0 @kind object;
  #L08c4ce.  return v3 @kind object;
}
procedure `int` `b`(`a.z` v1 @kind this) @signature `La/z;.b:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c4e0.  v0:= v1.`a.z.c` @type ^`int`;
  #L08c4e4.  return v0;
}
procedure `boolean` `c`(`a.z` v2 @kind this) @signature `La/z;.c:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08c4f8.  v0:= v2.`a.z.c` @type ^`int`;
  #L08c4fc.  v1:= 200I;
  #L08c500.  if v0 < v1 then goto L08c514;
  #L08c504.  v0:= v2.`a.z.c` @type ^`int`;
  #L08c508.  v1:= 300I;
  #L08c50c.  if v0 >= v1 then goto L08c514;
  #L08c510.  v0:= 1I;
  #L08c512.  return v0;
  #L08c514.  v0:= 0I;
  #L08c516.  goto L08c512;
}
procedure `void` `close`(`a.z` v1 @kind this) @signature `La/z;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c528.  v0:= v1.`a.z.g` @type ^`a.aa` @kind object;
  #L08c52c.  call `close`(v0) @signature `La/aa;.close:()V` @kind virtual;
  #L08c532.  return @kind void;
}
procedure `a.p` `d`(`a.z` v1 @kind this) @signature `La/z;.d:()La/p;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c544.  v0:= v1.`a.z.e` @type ^`a.p` @kind object;
  #L08c548.  return v0 @kind object;
}
procedure `a.q` `e`(`a.z` v1 @kind this) @signature `La/z;.e:()La/q;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c55c.  v0:= v1.`a.z.f` @type ^`a.q` @kind object;
  #L08c560.  return v0 @kind object;
}
procedure `a.aa` `f`(`a.z` v1 @kind this) @signature `La/z;.f:()La/aa;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c574.  v0:= v1.`a.z.g` @type ^`a.aa` @kind object;
  #L08c578.  return v0 @kind object;
}
procedure `a.z$a` `g`(`a.z` v1 @kind this) @signature `La/z;.g:()La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c58c.  v0:= new `a.z$a`;
  #L08c590.  call `<init>`(v0, v1) @signature `La/z$a;.<init>:(La/z;)V` @kind direct;
  #L08c596.  return v0 @kind object;
}
procedure `a.d` `h`(`a.z` v1 @kind this) @signature `La/z;.h:()La/d;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c5a8.  v0:= v1.`a.z.m` @type ^`a.d` @kind object;
  #L08c5ac.  if v0 == 0 then goto L08c5b2;
  #L08c5b0.  return v0 @kind object;
  #L08c5b2.  v0:= v1.`a.z.f` @type ^`a.q` @kind object;
  #L08c5b6.  call temp:= `a`(v0) @signature `La/d;.a:(La/q;)La/d;` @kind static;
  #L08c5bc.  v0:= temp @kind object;
  #L08c5be.  v1.`a.z.m` @type ^`a.d` := v0 @kind object;
  #L08c5c2.  goto L08c5b0;
}
procedure `long` `i`(`a.z` v2 @kind this) @signature `La/z;.i:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08c5d4.  v0:= v2.`a.z.k` @type ^`long` @kind wide;
  #L08c5d8.  return v0 @kind wide;
}
procedure `long` `j`(`a.z` v2 @kind this) @signature `La/z;.j:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08c5ec.  v0:= v2.`a.z.l` @type ^`long` @kind wide;
  #L08c5f0.  return v0 @kind wide;
}
procedure `java.lang.String` `toString`(`a.z` v2 @kind this) @signature `La/z;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L08c604.  v0:= new `java.lang.StringBuilder`;
  #L08c608.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08c60e.  v1:= "Response{protocol=" @kind object;
  #L08c612.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c618.  v0:= temp @kind object;
  #L08c61a.  v1:= v2.`a.z.b` @type ^`a.v` @kind object;
  #L08c61e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c624.  v0:= temp @kind object;
  #L08c626.  v1:= ", code=" @kind object;
  #L08c62a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c630.  v0:= temp @kind object;
  #L08c632.  v1:= v2.`a.z.c` @type ^`int`;
  #L08c636.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c63c.  v0:= temp @kind object;
  #L08c63e.  v1:= ", message=" @kind object;
  #L08c642.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c648.  v0:= temp @kind object;
  #L08c64a.  v1:= v2.`a.z.d` @type ^`java.lang.String` @kind object;
  #L08c64e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c654.  v0:= temp @kind object;
  #L08c656.  v1:= ", url=" @kind object;
  #L08c65a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c660.  v0:= temp @kind object;
  #L08c662.  v1:= v2.`a.z.a` @type ^`a.x` @kind object;
  #L08c666.  call temp:= `a`(v1) @signature `La/x;.a:()La/r;` @kind virtual;
  #L08c66c.  v1:= temp @kind object;
  #L08c66e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c674.  v0:= temp @kind object;
  #L08c676.  v1:= 125I;
  #L08c67a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c680.  v0:= temp @kind object;
  #L08c682.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08c688.  v0:= temp @kind object;
  #L08c68a.  return v0 @kind object;
}
