record `a.z$a` @kind class @AccessFlag PUBLIC {
  `a.x` `a.z$a.a` @AccessFlag ;
  `a.v` `a.z$a.b` @AccessFlag ;
  `int` `a.z$a.c` @AccessFlag ;
  `java.lang.String` `a.z$a.d` @AccessFlag ;
  `a.p` `a.z$a.e` @AccessFlag ;
  `a.q$a` `a.z$a.f` @AccessFlag ;
  `a.aa` `a.z$a.g` @AccessFlag ;
  `a.z` `a.z$a.h` @AccessFlag ;
  `a.z` `a.z$a.i` @AccessFlag ;
  `a.z` `a.z$a.j` @AccessFlag ;
  `long` `a.z$a.k` @AccessFlag ;
  `long` `a.z$a.l` @AccessFlag ;
}
procedure `void` `<init>`(`a.z$a` v1 @kind this) @signature `La/z$a;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L08c03c.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08c042.  v0:= -1I;
  #L08c044.  v1.`a.z$a.c` @type ^`int` := v0;
  #L08c048.  v0:= new `a.q$a`;
  #L08c04c.  call `<init>`(v0) @signature `La/q$a;.<init>:()V` @kind direct;
  #L08c052.  v1.`a.z$a.f` @type ^`a.q$a` := v0 @kind object;
  #L08c056.  return @kind void;
}
procedure `void` `<init>`(`a.z$a` v2 @kind this, `a.z` v3 @kind object) @signature `La/z$a;.<init>:(La/z;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L08c068.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08c06e.  v0:= -1I;
  #L08c070.  v2.`a.z$a.c` @type ^`int` := v0;
  #L08c074.  v0:= v3.`a.z.a` @type ^`a.x` @kind object;
  #L08c078.  v2.`a.z$a.a` @type ^`a.x` := v0 @kind object;
  #L08c07c.  v0:= v3.`a.z.b` @type ^`a.v` @kind object;
  #L08c080.  v2.`a.z$a.b` @type ^`a.v` := v0 @kind object;
  #L08c084.  v0:= v3.`a.z.c` @type ^`int`;
  #L08c088.  v2.`a.z$a.c` @type ^`int` := v0;
  #L08c08c.  v0:= v3.`a.z.d` @type ^`java.lang.String` @kind object;
  #L08c090.  v2.`a.z$a.d` @type ^`java.lang.String` := v0 @kind object;
  #L08c094.  v0:= v3.`a.z.e` @type ^`a.p` @kind object;
  #L08c098.  v2.`a.z$a.e` @type ^`a.p` := v0 @kind object;
  #L08c09c.  v0:= v3.`a.z.f` @type ^`a.q` @kind object;
  #L08c0a0.  call temp:= `b`(v0) @signature `La/q;.b:()La/q$a;` @kind virtual;
  #L08c0a6.  v0:= temp @kind object;
  #L08c0a8.  v2.`a.z$a.f` @type ^`a.q$a` := v0 @kind object;
  #L08c0ac.  v0:= v3.`a.z.g` @type ^`a.aa` @kind object;
  #L08c0b0.  v2.`a.z$a.g` @type ^`a.aa` := v0 @kind object;
  #L08c0b4.  v0:= v3.`a.z.h` @type ^`a.z` @kind object;
  #L08c0b8.  v2.`a.z$a.h` @type ^`a.z` := v0 @kind object;
  #L08c0bc.  v0:= v3.`a.z.i` @type ^`a.z` @kind object;
  #L08c0c0.  v2.`a.z$a.i` @type ^`a.z` := v0 @kind object;
  #L08c0c4.  v0:= v3.`a.z.j` @type ^`a.z` @kind object;
  #L08c0c8.  v2.`a.z$a.j` @type ^`a.z` := v0 @kind object;
  #L08c0cc.  v0:= v3.`a.z.k` @type ^`long` @kind wide;
  #L08c0d0.  v2.`a.z$a.k` @type ^`long` := v0 @kind wide;
  #L08c0d4.  v0:= v3.`a.z.l` @type ^`long` @kind wide;
  #L08c0d8.  v2.`a.z$a.l` @type ^`long` := v0 @kind wide;
  #L08c0dc.  return @kind void;
}
procedure `void` `a`(`a.z$a` v3 @kind this, `java.lang.String` v4 @kind object, `a.z` v5 @kind object) @signature `La/z$a;.a:(Ljava/lang/String;La/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L08c0f0.  v0:= v5.`a.z.g` @type ^`a.aa` @kind object;
  #L08c0f4.  if v0 == 0 then goto L08c12a;
  #L08c0f8.  v0:= new `java.lang.IllegalArgumentException`;
  #L08c0fc.  v1:= new `java.lang.StringBuilder`;
  #L08c100.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08c106.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c10c.  v1:= temp @kind object;
  #L08c10e.  v2:= ".body != null" @kind object;
  #L08c112.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c118.  v1:= temp @kind object;
  #L08c11a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08c120.  v1:= temp @kind object;
  #L08c122.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c128.  throw v0;
  #L08c12a.  v0:= v5.`a.z.h` @type ^`a.z` @kind object;
  #L08c12e.  if v0 == 0 then goto L08c164;
  #L08c132.  v0:= new `java.lang.IllegalArgumentException`;
  #L08c136.  v1:= new `java.lang.StringBuilder`;
  #L08c13a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08c140.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c146.  v1:= temp @kind object;
  #L08c148.  v2:= ".networkResponse != null" @kind object;
  #L08c14c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c152.  v1:= temp @kind object;
  #L08c154.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08c15a.  v1:= temp @kind object;
  #L08c15c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c162.  throw v0;
  #L08c164.  v0:= v5.`a.z.i` @type ^`a.z` @kind object;
  #L08c168.  if v0 == 0 then goto L08c19e;
  #L08c16c.  v0:= new `java.lang.IllegalArgumentException`;
  #L08c170.  v1:= new `java.lang.StringBuilder`;
  #L08c174.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08c17a.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c180.  v1:= temp @kind object;
  #L08c182.  v2:= ".cacheResponse != null" @kind object;
  #L08c186.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c18c.  v1:= temp @kind object;
  #L08c18e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08c194.  v1:= temp @kind object;
  #L08c196.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c19c.  throw v0;
  #L08c19e.  v0:= v5.`a.z.j` @type ^`a.z` @kind object;
  #L08c1a2.  if v0 == 0 then goto L08c1d8;
  #L08c1a6.  v0:= new `java.lang.IllegalArgumentException`;
  #L08c1aa.  v1:= new `java.lang.StringBuilder`;
  #L08c1ae.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08c1b4.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c1ba.  v1:= temp @kind object;
  #L08c1bc.  v2:= ".priorResponse != null" @kind object;
  #L08c1c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c1c6.  v1:= temp @kind object;
  #L08c1c8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08c1ce.  v1:= temp @kind object;
  #L08c1d0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c1d6.  throw v0;
  #L08c1d8.  return @kind void;
}
procedure `void` `d`(`a.z$a` v2 @kind this, `a.z` v3 @kind object) @signature `La/z$a;.d:(La/z;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L08c1ec.  v0:= v3.`a.z.g` @type ^`a.aa` @kind object;
  #L08c1f0.  if v0 == 0 then goto L08c204;
  #L08c1f4.  v0:= new `java.lang.IllegalArgumentException`;
  #L08c1f8.  v1:= "priorResponse.body != null" @kind object;
  #L08c1fc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c202.  throw v0;
  #L08c204.  return @kind void;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `int` v1 ) @signature `La/z$a;.a:(I)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08c218.  v0.`a.z$a.c` @type ^`int` := v1;
  #L08c21c.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `long` v2 ) @signature `La/z$a;.a:(J)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c230.  v1.`a.z$a.k` @type ^`long` := v2 @kind wide;
  #L08c234.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.aa` v1 @kind object) @signature `La/z$a;.a:(La/aa;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08c248.  v0.`a.z$a.g` @type ^`a.aa` := v1 @kind object;
  #L08c24c.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.p` v1 @kind object) @signature `La/z$a;.a:(La/p;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08c260.  v0.`a.z$a.e` @type ^`a.p` := v1 @kind object;
  #L08c264.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `a.q` v2 @kind object) @signature `La/z$a;.a:(La/q;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c278.  call temp:= `b`(v2) @signature `La/q;.b:()La/q$a;` @kind virtual;
  #L08c27e.  v0:= temp @kind object;
  #L08c280.  v1.`a.z$a.f` @type ^`a.q$a` := v0 @kind object;
  #L08c284.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.v` v1 @kind object) @signature `La/z$a;.a:(La/v;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08c298.  v0.`a.z$a.b` @type ^`a.v` := v1 @kind object;
  #L08c29c.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `a.x` v1 @kind object) @signature `La/z$a;.a:(La/x;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08c2b0.  v0.`a.z$a.a` @type ^`a.x` := v1 @kind object;
  #L08c2b4.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `a.z` v2 @kind object) @signature `La/z$a;.a:(La/z;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c2c8.  if v2 == 0 then goto L08c2d6;
  #L08c2cc.  v0:= "networkResponse" @kind object;
  #L08c2d0.  call `a`(v1, v0, v2) @signature `La/z$a;.a:(Ljava/lang/String;La/z;)V` @kind direct;
  #L08c2d6.  v1.`a.z$a.h` @type ^`a.z` := v2 @kind object;
  #L08c2da.  return v1 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v0 @kind this, `java.lang.String` v1 @kind object) @signature `La/z$a;.a:(Ljava/lang/String;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08c2ec.  v0.`a.z$a.d` @type ^`java.lang.String` := v1 @kind object;
  #L08c2f0.  return v0 @kind object;
}
procedure `a.z$a` `a`(`a.z$a` v1 @kind this, `java.lang.String` v2 @kind object, `java.lang.String` v3 @kind object) @signature `La/z$a;.a:(Ljava/lang/String;Ljava/lang/String;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c304.  v0:= v1.`a.z$a.f` @type ^`a.q$a` @kind object;
  #L08c308.  call temp:= `a`(v0, v2, v3) @signature `La/q$a;.a:(Ljava/lang/String;Ljava/lang/String;)La/q$a;` @kind virtual;
  #L08c30e.  return v1 @kind object;
}
procedure `a.z` `a`(`a.z$a` v3 @kind this) @signature `La/z$a;.a:()La/z;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L08c320.  v0:= v3.`a.z$a.a` @type ^`a.x` @kind object;
  #L08c324.  if v0 != 0 then goto L08c338;
  #L08c328.  v0:= new `java.lang.IllegalStateException`;
  #L08c32c.  v1:= "request == null" @kind object;
  #L08c330.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c336.  throw v0;
  #L08c338.  v0:= v3.`a.z$a.b` @type ^`a.v` @kind object;
  #L08c33c.  if v0 != 0 then goto L08c350;
  #L08c340.  v0:= new `java.lang.IllegalStateException`;
  #L08c344.  v1:= "protocol == null" @kind object;
  #L08c348.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c34e.  throw v0;
  #L08c350.  v0:= v3.`a.z$a.c` @type ^`int`;
  #L08c354.  if v0 >= 0 then goto L08c38e;
  #L08c358.  v0:= new `java.lang.IllegalStateException`;
  #L08c35c.  v1:= new `java.lang.StringBuilder`;
  #L08c360.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08c366.  v2:= "code < 0: " @kind object;
  #L08c36a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c370.  v1:= temp @kind object;
  #L08c372.  v2:= v3.`a.z$a.c` @type ^`int`;
  #L08c376.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L08c37c.  v1:= temp @kind object;
  #L08c37e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L08c384.  v1:= temp @kind object;
  #L08c386.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08c38c.  throw v0;
  #L08c38e.  v0:= new `a.z`;
  #L08c392.  call `<init>`(v0, v3) @signature `La/z;.<init>:(La/z$a;)V` @kind direct;
  #L08c398.  return v0 @kind object;
}
procedure `a.z$a` `b`(`a.z$a` v1 @kind this, `long` v2 ) @signature `La/z$a;.b:(J)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c3ac.  v1.`a.z$a.l` @type ^`long` := v2 @kind wide;
  #L08c3b0.  return v1 @kind object;
}
procedure `a.z$a` `b`(`a.z$a` v1 @kind this, `a.z` v2 @kind object) @signature `La/z$a;.b:(La/z;)La/z$a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L08c3c4.  if v2 == 0 then goto L08c3d2;
  #L08c3c8.  v0:= "cacheResponse" @kind object;
  #L08c3cc.  call `a`(v1, v0, v2) @signature `La/z$a;.a:(Ljava/lang/String;La/z;)V` @kind direct;
  #L08c3d2.  v1.`a.z$a.i` @type ^`a.z` := v2 @kind object;
  #L08c3d6.  return v1 @kind object;
}
procedure `a.z$a` `c`(`a.z$a` v0 @kind this, `a.z` v1 @kind object) @signature `La/z$a;.c:(La/z;)La/z$a;` @AccessFlag PUBLIC {
    temp;

  #L08c3e8.  if v1 == 0 then goto L08c3f2;
  #L08c3ec.  call `d`(v0, v1) @signature `La/z$a;.d:(La/z;)V` @kind direct;
  #L08c3f2.  v0.`a.z$a.j` @type ^`a.z` := v1 @kind object;
  #L08c3f6.  return v0 @kind object;
}
