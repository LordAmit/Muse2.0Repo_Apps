record `a.a.h.c` @kind class @AccessFlag FINAL {
  `java.lang.String` `a.a.h.c.a` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.h.c.b` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.h.c.c` @AccessFlag PRIVATE;
  `int` `a.a.h.c.d` @AccessFlag PRIVATE;
  `int` `a.a.h.c.e` @AccessFlag PRIVATE;
  `int` `a.a.h.c.f` @AccessFlag PRIVATE;
  `char`[] `a.a.h.c.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.h.c` v1 @kind this, `javax.security.auth.x500.X500Principal` v2 @kind object) @signature `La/a/h/c;.<init>:(Ljavax/security/auth/x500/X500Principal;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L0835bc.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L0835c2.  v0:= "RFC2253" @kind object;
  #L0835c6.  call temp:= `getName`(v2, v0) @signature `Ljavax/security/auth/x500/X500Principal;.getName:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L0835cc.  v0:= temp @kind object;
  #L0835ce.  v1.`a.a.h.c.a` @type ^`java.lang.String` := v0 @kind object;
  #L0835d2.  v0:= v1.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L0835d6.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L0835dc.  v0:= temp;
  #L0835de.  v1.`a.a.h.c.b` @type ^`int` := v0;
  #L0835e2.  return @kind void;
}
procedure `int` `a`(`a.a.h.c` v8 @kind this, `int` v9 ) @signature `La/a/h/c;.a:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L0835f4.  v7:= 97I;
  #L0835f8.  v6:= 70I;
  #L0835fc.  v5:= 65I;
  #L083600.  v4:= 57I;
  #L083604.  v3:= 48I;
  #L083608.  v0:= v9 + 1;
  #L08360c.  v1:= v8.`a.a.h.c.b` @type ^`int`;
  #L083610.  if v0 < v1 then goto L08364a;
  #L083614.  v0:= new `java.lang.IllegalStateException`;
  #L083618.  v1:= new `java.lang.StringBuilder`;
  #L08361c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L083622.  v2:= "Malformed DN: " @kind object;
  #L083626.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08362c.  v1:= temp @kind object;
  #L08362e.  v2:= v8.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L083632.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083638.  v1:= temp @kind object;
  #L08363a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L083640.  v1:= temp @kind object;
  #L083642.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L083648.  throw v0;
  #L08364a.  v0:= v8.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08364e.  v0:= v0[v9] @kind char;
  #L083652.  if v0 < v3 then goto L08367e;
  #L083656.  if v0 > v4 then goto L08367e;
  #L08365a.  v0:= v0 + -48;
  #L08365e.  v1:= v8.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083662.  v2:= v9 + 1;
  #L083666.  v1:= v1[v2] @kind char;
  #L08366a.  if v1 < v3 then goto L0836d4;
  #L08366e.  if v1 > v4 then goto L0836d4;
  #L083672.  v1:= v1 + -48;
  #L083676.  v0:= v0 ^< 4;
  #L08367a.  v0:= v0 + v1 @kind int;
  #L08367c.  return v0;
  #L08367e.  if v0 < v7 then goto L083690;
  #L083682.  v1:= 102I;
  #L083686.  if v0 > v1 then goto L083690;
  #L08368a.  v0:= v0 + -87;
  #L08368e.  goto L08365e;
  #L083690.  if v0 < v5 then goto L08369e;
  #L083694.  if v0 > v6 then goto L08369e;
  #L083698.  v0:= v0 + -55;
  #L08369c.  goto L08365e;
  #L08369e.  v0:= new `java.lang.IllegalStateException`;
  #L0836a2.  v1:= new `java.lang.StringBuilder`;
  #L0836a6.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0836ac.  v2:= "Malformed DN: " @kind object;
  #L0836b0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0836b6.  v1:= temp @kind object;
  #L0836b8.  v2:= v8.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L0836bc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0836c2.  v1:= temp @kind object;
  #L0836c4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0836ca.  v1:= temp @kind object;
  #L0836cc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0836d2.  throw v0;
  #L0836d4.  if v1 < v7 then goto L0836e6;
  #L0836d8.  v2:= 102I;
  #L0836dc.  if v1 > v2 then goto L0836e6;
  #L0836e0.  v1:= v1 + -87;
  #L0836e4.  goto L083676;
  #L0836e6.  if v1 < v5 then goto L0836f4;
  #L0836ea.  if v1 > v6 then goto L0836f4;
  #L0836ee.  v1:= v1 + -55;
  #L0836f2.  goto L083676;
  #L0836f4.  v0:= new `java.lang.IllegalStateException`;
  #L0836f8.  v1:= new `java.lang.StringBuilder`;
  #L0836fc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L083702.  v2:= "Malformed DN: " @kind object;
  #L083706.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08370c.  v1:= temp @kind object;
  #L08370e.  v2:= v8.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L083712.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083718.  v1:= temp @kind object;
  #L08371a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L083720.  v1:= temp @kind object;
  #L083722.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L083728.  throw v0;
}
procedure `java.lang.String` `a`(`a.a.h.c` v5 @kind this) @signature `La/a/h/c;.a:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L08373c.  v3:= 61I;
  #L083740.  v2:= 32I;
  #L083744.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083748.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L08374c.  if v0 >= v1 then goto L08376e;
  #L083750.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083754.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083758.  v0:= v0[v1] @kind char;
  #L08375c.  if v0 != v2 then goto L08376e;
  #L083760.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083764.  v0:= v0 + 1;
  #L083768.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L08376c.  goto L083744;
  #L08376e.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083772.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L083776.  if v0 != v1 then goto L08377e;
  #L08377a.  v0:= 0I;
  #L08377c.  return v0 @kind object;
  #L08377e.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083782.  v5.`a.a.h.c.d` @type ^`int` := v0;
  #L083786.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L08378a.  v0:= v0 + 1;
  #L08378e.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L083792.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083796.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L08379a.  if v0 >= v1 then goto L0837cc;
  #L08379e.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L0837a2.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L0837a6.  v0:= v0[v1] @kind char;
  #L0837aa.  if v0 == v3 then goto L0837cc;
  #L0837ae.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L0837b2.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L0837b6.  v0:= v0[v1] @kind char;
  #L0837ba.  if v0 == v2 then goto L0837cc;
  #L0837be.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0837c2.  v0:= v0 + 1;
  #L0837c6.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L0837ca.  goto L083792;
  #L0837cc.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0837d0.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L0837d4.  if v0 < v1 then goto L08380e;
  #L0837d8.  v0:= new `java.lang.IllegalStateException`;
  #L0837dc.  v1:= new `java.lang.StringBuilder`;
  #L0837e0.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0837e6.  v2:= "Unexpected end of DN: " @kind object;
  #L0837ea.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0837f0.  v1:= temp @kind object;
  #L0837f2.  v2:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L0837f6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0837fc.  v1:= temp @kind object;
  #L0837fe.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L083804.  v1:= temp @kind object;
  #L083806.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L08380c.  throw v0;
  #L08380e.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083812.  v5.`a.a.h.c.e` @type ^`int` := v0;
  #L083816.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08381a.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L08381e.  v0:= v0[v1] @kind char;
  #L083822.  if v0 != v2 then goto L0838b2;
  #L083826.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L08382a.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L08382e.  if v0 >= v1 then goto L083860;
  #L083832.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083836.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L08383a.  v0:= v0[v1] @kind char;
  #L08383e.  if v0 == v3 then goto L083860;
  #L083842.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083846.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L08384a.  v0:= v0[v1] @kind char;
  #L08384e.  if v0 != v2 then goto L083860;
  #L083852.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083856.  v0:= v0 + 1;
  #L08385a.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L08385e.  goto L083826;
  #L083860.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083864.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083868.  v0:= v0[v1] @kind char;
  #L08386c.  if v0 != v3 then goto L08387c;
  #L083870.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083874.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L083878.  if v0 != v1 then goto L0838b2;
  #L08387c.  v0:= new `java.lang.IllegalStateException`;
  #L083880.  v1:= new `java.lang.StringBuilder`;
  #L083884.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L08388a.  v2:= "Unexpected end of DN: " @kind object;
  #L08388e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083894.  v1:= temp @kind object;
  #L083896.  v2:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L08389a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0838a0.  v1:= temp @kind object;
  #L0838a2.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0838a8.  v1:= temp @kind object;
  #L0838aa.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0838b0.  throw v0;
  #L0838b2.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0838b6.  v0:= v0 + 1;
  #L0838ba.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L0838be.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0838c2.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L0838c6.  if v0 >= v1 then goto L0838e8;
  #L0838ca.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L0838ce.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L0838d2.  v0:= v0[v1] @kind char;
  #L0838d6.  if v0 != v2 then goto L0838e8;
  #L0838da.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0838de.  v0:= v0 + 1;
  #L0838e2.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L0838e6.  goto L0838be;
  #L0838e8.  v0:= v5.`a.a.h.c.e` @type ^`int`;
  #L0838ec.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L0838f0.  v0:= v0 - v1 @kind int;
  #L0838f2.  v1:= 4I;
  #L0838f4.  if v0 <= v1 then goto L0839a4;
  #L0838f8.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L0838fc.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L083900.  v1:= v1 + 3;
  #L083904.  v0:= v0[v1] @kind char;
  #L083908.  v1:= 46I;
  #L08390c.  if v0 != v1 then goto L0839a4;
  #L083910.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083914.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L083918.  v0:= v0[v1] @kind char;
  #L08391c.  v1:= 79I;
  #L083920.  if v0 == v1 then goto L083938;
  #L083924.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083928.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L08392c.  v0:= v0[v1] @kind char;
  #L083930.  v1:= 111I;
  #L083934.  if v0 != v1 then goto L0839a4;
  #L083938.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08393c.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L083940.  v1:= v1 + 1;
  #L083944.  v0:= v0[v1] @kind char;
  #L083948.  v1:= 73I;
  #L08394c.  if v0 == v1 then goto L083968;
  #L083950.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083954.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L083958.  v1:= v1 + 1;
  #L08395c.  v0:= v0[v1] @kind char;
  #L083960.  v1:= 105I;
  #L083964.  if v0 != v1 then goto L0839a4;
  #L083968.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08396c.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L083970.  v1:= v1 + 2;
  #L083974.  v0:= v0[v1] @kind char;
  #L083978.  v1:= 68I;
  #L08397c.  if v0 == v1 then goto L083998;
  #L083980.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083984.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L083988.  v1:= v1 + 2;
  #L08398c.  v0:= v0[v1] @kind char;
  #L083990.  v1:= 100I;
  #L083994.  if v0 != v1 then goto L0839a4;
  #L083998.  v0:= v5.`a.a.h.c.d` @type ^`int`;
  #L08399c.  v0:= v0 + 4;
  #L0839a0.  v5.`a.a.h.c.d` @type ^`int` := v0;
  #L0839a4.  v0:= new `java.lang.String`;
  #L0839a8.  v1:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L0839ac.  v2:= v5.`a.a.h.c.d` @type ^`int`;
  #L0839b0.  v3:= v5.`a.a.h.c.e` @type ^`int`;
  #L0839b4.  v4:= v5.`a.a.h.c.d` @type ^`int`;
  #L0839b8.  v3:= v3 - v4 @kind int;
  #L0839ba.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L0839c0.  goto L08377c;
}
procedure `java.lang.String` `b`(`a.a.h.c` v5 @kind this) @signature `La/a/h/c;.b:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0839d4.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0839d8.  v0:= v0 + 1;
  #L0839dc.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L0839e0.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0839e4.  v5.`a.a.h.c.d` @type ^`int` := v0;
  #L0839e8.  v0:= v5.`a.a.h.c.d` @type ^`int`;
  #L0839ec.  v5.`a.a.h.c.e` @type ^`int` := v0;
  #L0839f0.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L0839f4.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L0839f8.  if v0 != v1 then goto L083a32;
  #L0839fc.  v0:= new `java.lang.IllegalStateException`;
  #L083a00.  v1:= new `java.lang.StringBuilder`;
  #L083a04.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L083a0a.  v2:= "Unexpected end of DN: " @kind object;
  #L083a0e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083a14.  v1:= temp @kind object;
  #L083a16.  v2:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L083a1a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083a20.  v1:= temp @kind object;
  #L083a22.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L083a28.  v1:= temp @kind object;
  #L083a2a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L083a30.  throw v0;
  #L083a32.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083a36.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083a3a.  v0:= v0[v1] @kind char;
  #L083a3e.  v1:= 34I;
  #L083a42.  if v0 != v1 then goto L083a80;
  #L083a46.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083a4a.  v0:= v0 + 1;
  #L083a4e.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L083a52.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083a56.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L083a5a.  if v0 >= v1 then goto L083adc;
  #L083a5e.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083a62.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083a66.  v0:= v0[v1] @kind char;
  #L083a6a.  v1:= 32I;
  #L083a6e.  if v0 != v1 then goto L083adc;
  #L083a72.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083a76.  v0:= v0 + 1;
  #L083a7a.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L083a7e.  goto L083a52;
  #L083a80.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083a84.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083a88.  v0:= v0[v1] @kind char;
  #L083a8c.  v1:= 92I;
  #L083a90.  if v0 != v1 then goto L083ac2;
  #L083a94.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083a98.  v1:= v5.`a.a.h.c.e` @type ^`int`;
  #L083a9c.  call temp:= `e`(v5) @signature `La/a/h/c;.e:()C` @kind direct;
  #L083aa2.  v2:= temp;
  #L083aa4.  v0[v1]:= v2 @kind char;
  #L083aa8.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083aac.  v0:= v0 + 1;
  #L083ab0.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L083ab4.  v0:= v5.`a.a.h.c.e` @type ^`int`;
  #L083ab8.  v0:= v0 + 1;
  #L083abc.  v5.`a.a.h.c.e` @type ^`int` := v0;
  #L083ac0.  goto L0839f0;
  #L083ac2.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083ac6.  v1:= v5.`a.a.h.c.e` @type ^`int`;
  #L083aca.  v2:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083ace.  v3:= v5.`a.a.h.c.c` @type ^`int`;
  #L083ad2.  v2:= v2[v3] @kind char;
  #L083ad6.  v0[v1]:= v2 @kind char;
  #L083ada.  goto L083aa8;
  #L083adc.  v0:= new `java.lang.String`;
  #L083ae0.  v1:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083ae4.  v2:= v5.`a.a.h.c.d` @type ^`int`;
  #L083ae8.  v3:= v5.`a.a.h.c.e` @type ^`int`;
  #L083aec.  v4:= v5.`a.a.h.c.d` @type ^`int`;
  #L083af0.  v3:= v3 - v4 @kind int;
  #L083af2.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L083af8.  return v0 @kind object;
}
procedure `java.lang.String` `c`(`a.a.h.c` v5 @kind this) @signature `La/a/h/c;.c:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L083b0c.  v3:= 32I;
  #L083b10.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083b14.  v0:= v0 + 4;
  #L083b18.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L083b1c.  if v0 < v1 then goto L083b56;
  #L083b20.  v0:= new `java.lang.IllegalStateException`;
  #L083b24.  v1:= new `java.lang.StringBuilder`;
  #L083b28.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L083b2e.  v2:= "Unexpected end of DN: " @kind object;
  #L083b32.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083b38.  v1:= temp @kind object;
  #L083b3a.  v2:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L083b3e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083b44.  v1:= temp @kind object;
  #L083b46.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L083b4c.  v1:= temp @kind object;
  #L083b4e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L083b54.  throw v0;
  #L083b56.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083b5a.  v5.`a.a.h.c.d` @type ^`int` := v0;
  #L083b5e.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083b62.  v0:= v0 + 1;
  #L083b66.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L083b6a.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083b6e.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L083b72.  if v0 == v1 then goto L083bb2;
  #L083b76.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083b7a.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083b7e.  v0:= v0[v1] @kind char;
  #L083b82.  v1:= 43I;
  #L083b86.  if v0 == v1 then goto L083bb2;
  #L083b8a.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083b8e.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083b92.  v0:= v0[v1] @kind char;
  #L083b96.  v1:= 44I;
  #L083b9a.  if v0 == v1 then goto L083bb2;
  #L083b9e.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083ba2.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083ba6.  v0:= v0[v1] @kind char;
  #L083baa.  v1:= 59I;
  #L083bae.  if v0 != v1 then goto L083c0a;
  #L083bb2.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083bb6.  v5.`a.a.h.c.e` @type ^`int` := v0;
  #L083bba.  v0:= v5.`a.a.h.c.e` @type ^`int`;
  #L083bbe.  v1:= v5.`a.a.h.c.d` @type ^`int`;
  #L083bc2.  v2:= v0 - v1 @kind int;
  #L083bc6.  v0:= 5I;
  #L083bc8.  if v2 < v0 then goto L083bd4;
  #L083bcc.  v0:= v2 ^& 1;
  #L083bd0.  if v0 != 0 then goto L083ca6;
  #L083bd4.  v0:= new `java.lang.IllegalStateException`;
  #L083bd8.  v1:= new `java.lang.StringBuilder`;
  #L083bdc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L083be2.  v2:= "Unexpected end of DN: " @kind object;
  #L083be6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083bec.  v1:= temp @kind object;
  #L083bee.  v2:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L083bf2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083bf8.  v1:= temp @kind object;
  #L083bfa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L083c00.  v1:= temp @kind object;
  #L083c02.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L083c08.  throw v0;
  #L083c0a.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083c0e.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083c12.  v0:= v0[v1] @kind char;
  #L083c16.  if v0 != v3 then goto L083c58;
  #L083c1a.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083c1e.  v5.`a.a.h.c.e` @type ^`int` := v0;
  #L083c22.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083c26.  v0:= v0 + 1;
  #L083c2a.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L083c2e.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083c32.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L083c36.  if v0 >= v1 then goto L083bba;
  #L083c3a.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083c3e.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083c42.  v0:= v0[v1] @kind char;
  #L083c46.  if v0 != v3 then goto L083bba;
  #L083c4a.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083c4e.  v0:= v0 + 1;
  #L083c52.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L083c56.  goto L083c2e;
  #L083c58.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083c5c.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083c60.  v0:= v0[v1] @kind char;
  #L083c64.  v1:= 65I;
  #L083c68.  if v0 < v1 then goto L083c96;
  #L083c6c.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083c70.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083c74.  v0:= v0[v1] @kind char;
  #L083c78.  v1:= 70I;
  #L083c7c.  if v0 > v1 then goto L083c96;
  #L083c80.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083c84.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083c88.  v2:= v0[v1] @kind char;
  #L083c8c.  v2:= v2 + 32;
  #L083c90.  v2:= (`char`) v2 @kind i2c;
  #L083c92.  v0[v1]:= v2 @kind char;
  #L083c96.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083c9a.  v0:= v0 + 1;
  #L083c9e.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L083ca2.  goto L083b6a;
  #L083ca6.  v0:= v2 / 2;
  #L083caa.  v3:= new `byte`[v0];
  #L083cae.  v1:= 0I;
  #L083cb0.  v0:= v5.`a.a.h.c.d` @type ^`int`;
  #L083cb4.  v0:= v0 + 1;
  #L083cb8.  v4:= length @variable v3;
  #L083cba.  if v1 >= v4 then goto L083cd6;
  #L083cbe.  call temp:= `a`(v5, v0) @signature `La/a/h/c;.a:(I)I` @kind direct;
  #L083cc4.  v4:= temp;
  #L083cc6.  v4:= (`byte`) v4 @kind i2b;
  #L083cc8.  v3[v1]:= v4 @kind byte;
  #L083ccc.  v0:= v0 + 2;
  #L083cd0.  v1:= v1 + 1;
  #L083cd4.  goto L083cb8;
  #L083cd6.  v0:= new `java.lang.String`;
  #L083cda.  v1:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083cde.  v3:= v5.`a.a.h.c.d` @type ^`int`;
  #L083ce2.  call `<init>`(v0, v1, v3, v2) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L083ce8.  return v0 @kind object;
}
procedure `java.lang.String` `d`(`a.a.h.c` v5 @kind this) @signature `La/a/h/c;.d:()Ljava/lang/String;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L083cfc.  v4:= 32I;
  #L083d00.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083d04.  v5.`a.a.h.c.d` @type ^`int` := v0;
  #L083d08.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083d0c.  v5.`a.a.h.c.e` @type ^`int` := v0;
  #L083d10.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083d14.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L083d18.  if v0 < v1 then goto L083d3a;
  #L083d1c.  v0:= new `java.lang.String`;
  #L083d20.  v1:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083d24.  v2:= v5.`a.a.h.c.d` @type ^`int`;
  #L083d28.  v3:= v5.`a.a.h.c.e` @type ^`int`;
  #L083d2c.  v4:= v5.`a.a.h.c.d` @type ^`int`;
  #L083d30.  v3:= v3 - v4 @kind int;
  #L083d32.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L083d38.  return v0 @kind object;
  #L083d3a.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083d3e.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083d42.  v0:= v0[v1] @kind char;
  #L083d46.  goto L083e90;
  #L083d4c.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083d50.  v1:= v5.`a.a.h.c.e` @type ^`int`;
  #L083d54.  v2:= v1 + 1;
  #L083d58.  v5.`a.a.h.c.e` @type ^`int` := v2;
  #L083d5c.  v2:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083d60.  v3:= v5.`a.a.h.c.c` @type ^`int`;
  #L083d64.  v2:= v2[v3] @kind char;
  #L083d68.  v0[v1]:= v2 @kind char;
  #L083d6c.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083d70.  v0:= v0 + 1;
  #L083d74.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L083d78.  goto L083d10;
  #L083d7a.  v0:= new `java.lang.String`;
  #L083d7e.  v1:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083d82.  v2:= v5.`a.a.h.c.d` @type ^`int`;
  #L083d86.  v3:= v5.`a.a.h.c.e` @type ^`int`;
  #L083d8a.  v4:= v5.`a.a.h.c.d` @type ^`int`;
  #L083d8e.  v3:= v3 - v4 @kind int;
  #L083d90.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L083d96.  goto L083d38;
  #L083d98.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083d9c.  v1:= v5.`a.a.h.c.e` @type ^`int`;
  #L083da0.  v2:= v1 + 1;
  #L083da4.  v5.`a.a.h.c.e` @type ^`int` := v2;
  #L083da8.  call temp:= `e`(v5) @signature `La/a/h/c;.e:()C` @kind direct;
  #L083dae.  v2:= temp;
  #L083db0.  v0[v1]:= v2 @kind char;
  #L083db4.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083db8.  v0:= v0 + 1;
  #L083dbc.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L083dc0.  goto L083d10;
  #L083dc2.  v0:= v5.`a.a.h.c.e` @type ^`int`;
  #L083dc6.  v5.`a.a.h.c.f` @type ^`int` := v0;
  #L083dca.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083dce.  v0:= v0 + 1;
  #L083dd2.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L083dd6.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083dda.  v1:= v5.`a.a.h.c.e` @type ^`int`;
  #L083dde.  v2:= v1 + 1;
  #L083de2.  v5.`a.a.h.c.e` @type ^`int` := v2;
  #L083de6.  v0[v1]:= v4 @kind char;
  #L083dea.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083dee.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L083df2.  if v0 >= v1 then goto L083e28;
  #L083df6.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083dfa.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083dfe.  v0:= v0[v1] @kind char;
  #L083e02.  if v0 != v4 then goto L083e28;
  #L083e06.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083e0a.  v1:= v5.`a.a.h.c.e` @type ^`int`;
  #L083e0e.  v2:= v1 + 1;
  #L083e12.  v5.`a.a.h.c.e` @type ^`int` := v2;
  #L083e16.  v0[v1]:= v4 @kind char;
  #L083e1a.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083e1e.  v0:= v0 + 1;
  #L083e22.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L083e26.  goto L083dea;
  #L083e28.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L083e2c.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L083e30.  if v0 == v1 then goto L083e70;
  #L083e34.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083e38.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083e3c.  v0:= v0[v1] @kind char;
  #L083e40.  v1:= 44I;
  #L083e44.  if v0 == v1 then goto L083e70;
  #L083e48.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083e4c.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083e50.  v0:= v0[v1] @kind char;
  #L083e54.  v1:= 43I;
  #L083e58.  if v0 == v1 then goto L083e70;
  #L083e5c.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083e60.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L083e64.  v0:= v0[v1] @kind char;
  #L083e68.  v1:= 59I;
  #L083e6c.  if v0 != v1 then goto L083d10;
  #L083e70.  v0:= new `java.lang.String`;
  #L083e74.  v1:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083e78.  v2:= v5.`a.a.h.c.d` @type ^`int`;
  #L083e7c.  v3:= v5.`a.a.h.c.f` @type ^`int`;
  #L083e80.  v4:= v5.`a.a.h.c.d` @type ^`int`;
  #L083e84.  v3:= v3 - v4 @kind int;
  #L083e86.  call `<init>`(v0, v1, v2, v3) @signature `Ljava/lang/String;.<init>:([CII)V` @kind direct;
  #L083e8c.  goto L083d38;
  #L083e90.  switch v0
                  | 32 => goto L083dc2
                  | 43 => goto L083d7a
                  | 44 => goto L083d7a
                  | 59 => goto L083d7a
                  | 92 => goto L083d98
                  | else => goto L083d4c;
}
procedure `char` `e`(`a.a.h.c` v3 @kind this) @signature `La/a/h/c;.e:()C` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L083ecc.  v0:= v3.`a.a.h.c.c` @type ^`int`;
  #L083ed0.  v0:= v0 + 1;
  #L083ed4.  v3.`a.a.h.c.c` @type ^`int` := v0;
  #L083ed8.  v0:= v3.`a.a.h.c.c` @type ^`int`;
  #L083edc.  v1:= v3.`a.a.h.c.b` @type ^`int`;
  #L083ee0.  if v0 != v1 then goto L083f1a;
  #L083ee4.  v0:= new `java.lang.IllegalStateException`;
  #L083ee8.  v1:= new `java.lang.StringBuilder`;
  #L083eec.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L083ef2.  v2:= "Unexpected end of DN: " @kind object;
  #L083ef6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083efc.  v1:= temp @kind object;
  #L083efe.  v2:= v3.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L083f02.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L083f08.  v1:= temp @kind object;
  #L083f0a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L083f10.  v1:= temp @kind object;
  #L083f12.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L083f18.  throw v0;
  #L083f1a.  v0:= v3.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083f1e.  v1:= v3.`a.a.h.c.c` @type ^`int`;
  #L083f22.  v0:= v0[v1] @kind char;
  #L083f26.  goto L083f44;
  #L083f2c.  call temp:= `f`(v3) @signature `La/a/h/c;.f:()C` @kind direct;
  #L083f32.  v0:= temp;
  #L083f34.  return v0;
  #L083f36.  v0:= v3.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L083f3a.  v1:= v3.`a.a.h.c.c` @type ^`int`;
  #L083f3e.  v0:= v0[v1] @kind char;
  #L083f42.  goto L083f34;
  #L083f44.  switch v0
                  | 32 => goto L083f36
                  | 34 => goto L083f36
                  | 35 => goto L083f36
                  | 37 => goto L083f36
                  | 42 => goto L083f36
                  | 43 => goto L083f36
                  | 44 => goto L083f36
                  | 59 => goto L083f36
                  | 60 => goto L083f36
                  | 61 => goto L083f36
                  | 62 => goto L083f36
                  | 92 => goto L083f36
                  | 95 => goto L083f36
                  | else => goto L083f2c;
}
procedure `char` `f`(`a.a.h.c` v8 @kind this) @signature `La/a/h/c;.f:()C` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L083fc0.  v6:= 128I;
  #L083fc4.  v2:= 63I;
  #L083fc8.  v0:= v8.`a.a.h.c.c` @type ^`int`;
  #L083fcc.  call temp:= `a`(v8, v0) @signature `La/a/h/c;.a:(I)I` @kind direct;
  #L083fd2.  v1:= temp;
  #L083fd4.  v0:= v8.`a.a.h.c.c` @type ^`int`;
  #L083fd8.  v0:= v0 + 1;
  #L083fdc.  v8.`a.a.h.c.c` @type ^`int` := v0;
  #L083fe0.  if v1 >= v6 then goto L083fe8;
  #L083fe4.  v0:= (`char`) v1 @kind i2c;
  #L083fe6.  return v0;
  #L083fe8.  v0:= 192I;
  #L083fec.  if v1 < v0 then goto L08409e;
  #L083ff0.  v0:= 247I;
  #L083ff4.  if v1 > v0 then goto L08409e;
  #L083ff8.  v0:= 223I;
  #L083ffc.  if v1 > v0 then goto L084042;
  #L084000.  v0:= 1I;
  #L084002.  v1:= v1 ^& 31;
  #L084006.  v3:= 0I;
  #L084008.  v7:= v3;
  #L08400a.  v3:= v1;
  #L08400c.  v1:= v7;
  #L08400e.  if v1 >= v0 then goto L08409a;
  #L084012.  v4:= v8.`a.a.h.c.c` @type ^`int`;
  #L084016.  v4:= v4 + 1;
  #L08401a.  v8.`a.a.h.c.c` @type ^`int` := v4;
  #L08401e.  v4:= v8.`a.a.h.c.c` @type ^`int`;
  #L084022.  v5:= v8.`a.a.h.c.b` @type ^`int`;
  #L084026.  if v4 == v5 then goto L08403e;
  #L08402a.  v4:= v8.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08402e.  v5:= v8.`a.a.h.c.c` @type ^`int`;
  #L084032.  v4:= v4[v5] @kind char;
  #L084036.  v5:= 92I;
  #L08403a.  if v4 == v5 then goto L08405a;
  #L08403e.  v0:= v2;
  #L084040.  goto L083fe6;
  #L084042.  v0:= 239I;
  #L084046.  if v1 > v0 then goto L084052;
  #L08404a.  v0:= 2I;
  #L08404c.  v1:= v1 ^& 15;
  #L084050.  goto L084006;
  #L084052.  v0:= 3I;
  #L084054.  v1:= v1 ^& 7;
  #L084058.  goto L084006;
  #L08405a.  v4:= v8.`a.a.h.c.c` @type ^`int`;
  #L08405e.  v4:= v4 + 1;
  #L084062.  v8.`a.a.h.c.c` @type ^`int` := v4;
  #L084066.  v4:= v8.`a.a.h.c.c` @type ^`int`;
  #L08406a.  call temp:= `a`(v8, v4) @signature `La/a/h/c;.a:(I)I` @kind direct;
  #L084070.  v4:= temp;
  #L084072.  v5:= v8.`a.a.h.c.c` @type ^`int`;
  #L084076.  v5:= v5 + 1;
  #L08407a.  v8.`a.a.h.c.c` @type ^`int` := v5;
  #L08407e.  v5:= v4 ^& 192;
  #L084082.  if v5 == v6 then goto L08408a;
  #L084086.  v0:= v2;
  #L084088.  goto L083fe6;
  #L08408a.  v3:= v3 ^< 6;
  #L08408e.  v4:= v4 ^& 63;
  #L084092.  v3:= v3 + v4 @kind int;
  #L084094.  v1:= v1 + 1;
  #L084098.  goto L08400e;
  #L08409a.  v0:= (`char`) v3 @kind i2c;
  #L08409c.  goto L083fe6;
  #L08409e.  v0:= v2;
  #L0840a0.  goto L083fe6;
}
procedure `java.lang.String` `a`(`a.a.h.c` v5 @kind this, `java.lang.String` v6 @kind object) @signature `La/a/h/c;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L0840b4.  v2:= 0I;
  #L0840b6.  v0:= 0I;
  #L0840b8.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L0840bc.  v5.`a.a.h.c.d` @type ^`int` := v0;
  #L0840c0.  v5.`a.a.h.c.e` @type ^`int` := v0;
  #L0840c4.  v5.`a.a.h.c.f` @type ^`int` := v0;
  #L0840c8.  v0:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L0840cc.  call temp:= `toCharArray`(v0) @signature `Ljava/lang/String;.toCharArray:()[C` @kind virtual;
  #L0840d2.  v0:= temp @kind object;
  #L0840d4.  v5.`a.a.h.c.g` @type ^`char`[] := v0 @kind object;
  #L0840d8.  call temp:= `a`(v5) @signature `La/a/h/c;.a:()Ljava/lang/String;` @kind direct;
  #L0840de.  v0:= temp @kind object;
  #L0840e0.  if v0 != 0 then goto L0840e8;
  #L0840e4.  v1:= v2 @kind object;
  #L0840e6.  return v1 @kind object;
  #L0840e8.  v1:= "" @kind object;
  #L0840ec.  v3:= v5.`a.a.h.c.c` @type ^`int`;
  #L0840f0.  v4:= v5.`a.a.h.c.b` @type ^`int`;
  #L0840f4.  if v3 != v4 then goto L0840fc;
  #L0840f8.  v1:= v2 @kind object;
  #L0840fa.  goto L0840e6;
  #L0840fc.  v3:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L084100.  v4:= v5.`a.a.h.c.c` @type ^`int`;
  #L084104.  v3:= v3[v4] @kind char;
  #L084108.  goto L084208;
  #L08410e.  call temp:= `d`(v5) @signature `La/a/h/c;.d:()Ljava/lang/String;` @kind direct;
  #L084114.  v1:= temp @kind object;
  #L084116.  call temp:= `equalsIgnoreCase`(v6, v0) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L08411c.  v0:= temp;
  #L08411e.  if v0 != 0 then goto L0840e6;
  #L084122.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084126.  v1:= v5.`a.a.h.c.b` @type ^`int`;
  #L08412a.  if v0 < v1 then goto L084146;
  #L08412e.  v1:= v2 @kind object;
  #L084130.  goto L0840e6;
  #L084132.  call temp:= `b`(v5) @signature `La/a/h/c;.b:()Ljava/lang/String;` @kind direct;
  #L084138.  v1:= temp @kind object;
  #L08413a.  goto L084116;
  #L08413c.  call temp:= `c`(v5) @signature `La/a/h/c;.c:()Ljava/lang/String;` @kind direct;
  #L084142.  v1:= temp @kind object;
  #L084144.  goto L084116;
  #L084146.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08414a.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L08414e.  v0:= v0[v1] @kind char;
  #L084152.  v1:= 44I;
  #L084156.  if v0 == v1 then goto L08416e;
  #L08415a.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L08415e.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L084162.  v0:= v0[v1] @kind char;
  #L084166.  v1:= 59I;
  #L08416a.  if v0 != v1 then goto L0841bc;
  #L08416e.  v0:= v5.`a.a.h.c.c` @type ^`int`;
  #L084172.  v0:= v0 + 1;
  #L084176.  v5.`a.a.h.c.c` @type ^`int` := v0;
  #L08417a.  call temp:= `a`(v5) @signature `La/a/h/c;.a:()Ljava/lang/String;` @kind direct;
  #L084180.  v0:= temp @kind object;
  #L084182.  if v0 != 0 then goto L0840e8;
  #L084186.  v0:= new `java.lang.IllegalStateException`;
  #L08418a.  v1:= new `java.lang.StringBuilder`;
  #L08418e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L084194.  v2:= "Malformed DN: " @kind object;
  #L084198.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08419e.  v1:= temp @kind object;
  #L0841a0.  v2:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L0841a4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0841aa.  v1:= temp @kind object;
  #L0841ac.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0841b2.  v1:= temp @kind object;
  #L0841b4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0841ba.  throw v0;
  #L0841bc.  v0:= v5.`a.a.h.c.g` @type ^`char`[] @kind object;
  #L0841c0.  v1:= v5.`a.a.h.c.c` @type ^`int`;
  #L0841c4.  v0:= v0[v1] @kind char;
  #L0841c8.  v1:= 43I;
  #L0841cc.  if v0 == v1 then goto L08416e;
  #L0841d0.  v0:= new `java.lang.IllegalStateException`;
  #L0841d4.  v1:= new `java.lang.StringBuilder`;
  #L0841d8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L0841de.  v2:= "Malformed DN: " @kind object;
  #L0841e2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0841e8.  v1:= temp @kind object;
  #L0841ea.  v2:= v5.`a.a.h.c.a` @type ^`java.lang.String` @kind object;
  #L0841ee.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L0841f4.  v1:= temp @kind object;
  #L0841f6.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L0841fc.  v1:= temp @kind object;
  #L0841fe.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L084204.  throw v0;
  #L084206.  
  #L084208.  switch v3
                  | 34 => goto L084132
                  | 35 => goto L08413c
                  | 43 => goto L084116
                  | 44 => goto L084116
                  | 59 => goto L084116
                  | else => goto L08410e;
}
