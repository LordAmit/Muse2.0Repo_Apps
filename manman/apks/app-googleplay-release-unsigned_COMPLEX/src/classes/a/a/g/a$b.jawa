record `a.a.g.a$b` @kind class @AccessFlag FINAL {
  `java.lang.reflect.Method` `a.a.g.a$b.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.g.a$b.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.g.a$b.c` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.g.a$b` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object) @signature `La/a/g/a$b;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L082268.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L08226e.  v0.`a.a.g.a$b.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L082272.  v0.`a.a.g.a$b.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L082276.  v0.`a.a.g.a$b.c` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L08227a.  return @kind void;
}
procedure `a.a.g.a$b` `a`() @signature `La/a/g/a$b;.a:()La/a/g/a$b;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L08228c.  v0:= 0I;
  #Try_start0.  
  #L08228e.  v1:= "dalvik.system.CloseGuard" @kind object;
  #L082292.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L082298.  v3:= temp @kind object;
  #L08229a.  v1:= "get" @kind object;
  #L08229e.  v2:= 0I;
  #L0822a0.  v2:= new `java.lang.Class`[v2];
  #L0822a4.  call temp:= `getMethod`(v3, v1, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L0822aa.  v2:= temp @kind object;
  #L0822ac.  v1:= "open" @kind object;
  #L0822b0.  v4:= 1I;
  #L0822b2.  v4:= new `java.lang.Class`[v4];
  #L0822b6.  v5:= 0I;
  #L0822b8.  v6:= constclass @type ^`java.lang.String` @kind object;
  #L0822bc.  v4[v5]:= v6 @kind object;
  #L0822c0.  call temp:= `getMethod`(v3, v1, v4) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L0822c6.  v1:= temp @kind object;
  #L0822c8.  v4:= "warnIfOpen" @kind object;
  #L0822cc.  v5:= 0I;
  #L0822ce.  v5:= new `java.lang.Class`[v5];
  #L0822d2.  call temp:= `getMethod`(v3, v4, v5) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #Try_end0.  
  #L0822d8.  v0:= temp @kind object;
  #L0822da.  v3:= new `a.a.g.a$b`;
  #L0822de.  call `<init>`(v3, v2, v1, v0) @signature `La/a/g/a$b;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;)V` @kind direct;
  #L0822e4.  return v3 @kind object;
  #L0822e6.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L0822e8.  v1:= v0 @kind object;
  #L0822ea.  v2:= v0 @kind object;
  #L0822ec.  goto L0822da;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L0822e6;
}
procedure `java.lang.Object` `a`(`a.a.g.a$b` v5 @kind this, `java.lang.String` v6 @kind object) @signature `La/a/g/a$b;.a:(Ljava/lang/String;)Ljava/lang/Object;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L082310.  v1:= 0I;
  #L082312.  v0:= v5.`a.a.g.a$b.a` @type ^`java.lang.reflect.Method` @kind object;
  #L082316.  if v0 == 0 then goto L082348;
  #Try_start0.  
  #L08231a.  v0:= v5.`a.a.g.a$b.a` @type ^`java.lang.reflect.Method` @kind object;
  #L08231e.  v2:= 0I;
  #L082320.  v3:= 0I;
  #L082322.  v3:= new `java.lang.Object`[v3];
  #L082326.  call temp:= `invoke`(v0, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L08232c.  v0:= temp @kind object;
  #L08232e.  v2:= v5.`a.a.g.a$b.b` @type ^`java.lang.reflect.Method` @kind object;
  #L082332.  v3:= 1I;
  #L082334.  v3:= new `java.lang.Object`[v3];
  #L082338.  v4:= 0I;
  #L08233a.  v3[v4]:= v6 @kind object;
  #L08233e.  call temp:= `invoke`(v2, v0, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L082344.  return v0 @kind object;
  #L082346.  v0:= Exception @type ^`java.lang.Exception` @kind object;
  #L082348.  v0:= v1 @kind object;
  #L08234a.  goto L082344;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L082346;
}
procedure `boolean` `a`(`a.a.g.a$b` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `La/a/g/a$b;.a:(Ljava/lang/Object;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L08236c.  v0:= 0I;
  #L08236e.  if v4 == 0 then goto L082384;
  #Try_start0.  
  #L082372.  v1:= v3.`a.a.g.a$b.c` @type ^`java.lang.reflect.Method` @kind object;
  #L082376.  v2:= 0I;
  #L082378.  v2:= new `java.lang.Object`[v2];
  #L08237c.  call temp:= `invoke`(v1, v4, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L082382.  v0:= 1I;
  #L082384.  return v0;
  #L082386.  v1:= Exception @type ^`java.lang.Exception` @kind object;
  #L082388.  goto L082384;
  catch `java.lang.Exception` @[Try_start0..Try_end0] goto L082386;
}
