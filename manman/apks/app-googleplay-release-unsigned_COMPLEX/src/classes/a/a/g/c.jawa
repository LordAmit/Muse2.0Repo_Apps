record `a.a.g.c` @kind class @AccessFlag  extends `a.a.g.e` @kind class {
  `java.lang.reflect.Method` `a.a.g.c.a` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.g.c.b` @AccessFlag PRIVATE_FINAL;
  `java.lang.reflect.Method` `a.a.g.c.c` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `a.a.g.c.d` @AccessFlag PRIVATE_FINAL;
  `java.lang.Class` `a.a.g.c.e` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`a.a.g.c` v0 @kind this, `java.lang.reflect.Method` v1 @kind object, `java.lang.reflect.Method` v2 @kind object, `java.lang.reflect.Method` v3 @kind object, `java.lang.Class` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `La/a/g/c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Class;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L082e18.  call `<init>`(v0) @signature `La/a/g/e;.<init>:()V` @kind direct;
  #L082e1e.  v0.`a.a.g.c.a` @type ^`java.lang.reflect.Method` := v1 @kind object;
  #L082e22.  v0.`a.a.g.c.b` @type ^`java.lang.reflect.Method` := v2 @kind object;
  #L082e26.  v0.`a.a.g.c.c` @type ^`java.lang.reflect.Method` := v3 @kind object;
  #L082e2a.  v0.`a.a.g.c.d` @type ^`java.lang.Class` := v4 @kind object;
  #L082e2e.  v0.`a.a.g.c.e` @type ^`java.lang.Class` := v5 @kind object;
  #L082e32.  return @kind void;
}
procedure `a.a.g.e` `a`() @signature `La/a/g/c;.a:()La/a/g/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #Try_start0.  
  #L082e44.  v0:= "org.eclipse.jetty.alpn.ALPN" @kind object;
  #L082e48.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L082e4e.  v3:= temp @kind object;
  #L082e50.  v1:= new `java.lang.StringBuilder`;
  #L082e54.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L082e5a.  call temp:= `append`(v1, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082e60.  v1:= temp @kind object;
  #L082e62.  v2:= "$Provider" @kind object;
  #L082e66.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082e6c.  v1:= temp @kind object;
  #L082e6e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L082e74.  v1:= temp @kind object;
  #L082e76.  call temp:= `forName`(v1) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L082e7c.  v1:= temp @kind object;
  #L082e7e.  v2:= new `java.lang.StringBuilder`;
  #L082e82.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L082e88.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082e8e.  v2:= temp @kind object;
  #L082e90.  v4:= "$ClientProvider" @kind object;
  #L082e94.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082e9a.  v2:= temp @kind object;
  #L082e9c.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L082ea2.  v2:= temp @kind object;
  #L082ea4.  call temp:= `forName`(v2) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L082eaa.  v4:= temp @kind object;
  #L082eac.  v2:= new `java.lang.StringBuilder`;
  #L082eb0.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L082eb6.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082ebc.  v0:= temp @kind object;
  #L082ebe.  v2:= "$ServerProvider" @kind object;
  #L082ec2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L082ec8.  v0:= temp @kind object;
  #L082eca.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L082ed0.  v0:= temp @kind object;
  #L082ed2.  call temp:= `forName`(v0) @signature `Ljava/lang/Class;.forName:(Ljava/lang/String;)Ljava/lang/Class;` @kind static;
  #L082ed8.  v5:= temp @kind object;
  #L082eda.  v0:= "put" @kind object;
  #L082ede.  v2:= 2I;
  #L082ee0.  v2:= new `java.lang.Class`[v2];
  #L082ee4.  v6:= 0I;
  #L082ee6.  v7:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L082eea.  v2[v6]:= v7 @kind object;
  #L082eee.  v6:= 1I;
  #L082ef0.  v2[v6]:= v1 @kind object;
  #L082ef4.  call temp:= `getMethod`(v3, v0, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L082efa.  v1:= temp @kind object;
  #L082efc.  v0:= "get" @kind object;
  #L082f00.  v2:= 1I;
  #L082f02.  v2:= new `java.lang.Class`[v2];
  #L082f06.  v6:= 0I;
  #L082f08.  v7:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L082f0c.  v2[v6]:= v7 @kind object;
  #L082f10.  call temp:= `getMethod`(v3, v0, v2) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L082f16.  v2:= temp @kind object;
  #L082f18.  v0:= "remove" @kind object;
  #L082f1c.  v6:= 1I;
  #L082f1e.  v6:= new `java.lang.Class`[v6];
  #L082f22.  v7:= 0I;
  #L082f24.  v8:= constclass @type ^`javax.net.ssl.SSLSocket` @kind object;
  #L082f28.  v6[v7]:= v8 @kind object;
  #L082f2c.  call temp:= `getMethod`(v3, v0, v6) @signature `Ljava/lang/Class;.getMethod:(Ljava/lang/String;[Ljava/lang/Class;)Ljava/lang/reflect/Method;` @kind virtual;
  #L082f32.  v3:= temp @kind object;
  #L082f34.  v0:= new `a.a.g.c`;
  #L082f38.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `La/a/g/c;.<init>:(Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/reflect/Method;Ljava/lang/Class;Ljava/lang/Class;)V` @kind direct;
  #Try_end0.  
  #L082f3e.  return v0 @kind object;
  #L082f40.  v0:= Exception @type ^`java.lang.ClassNotFoundException` @kind object;
  #L082f42.  v0:= 0I;
  #L082f44.  goto L082f3e;
  #L082f46.  v0:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L082f48.  goto L082f42;
  catch `java.lang.ClassNotFoundException` @[Try_start0..Try_end0] goto L082f40;
  catch `java.lang.NoSuchMethodException` @[Try_start0..Try_end0] goto L082f46;
}
procedure `java.lang.String` `a`(`a.a.g.c` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object) @signature `La/a/g/c;.a:(Ljavax/net/ssl/SSLSocket;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L082f70.  v1:= 0I;
  #Try_start0.  
  #L082f72.  v0:= v5.`a.a.g.c.b` @type ^`java.lang.reflect.Method` @kind object;
  #L082f76.  v2:= 0I;
  #L082f78.  v3:= 1I;
  #L082f7a.  v3:= new `java.lang.Object`[v3];
  #L082f7e.  v4:= 0I;
  #L082f80.  v3[v4]:= v6 @kind object;
  #L082f84.  call temp:= `invoke`(v0, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L082f8a.  v0:= temp @kind object;
  #L082f8c.  call temp:= `getInvocationHandler`(v0) @signature `Ljava/lang/reflect/Proxy;.getInvocationHandler:(Ljava/lang/Object;)Ljava/lang/reflect/InvocationHandler;` @kind static;
  #L082f92.  v0:= temp @kind object;
  #L082f94.  v0:= (`a.a.g.c$a`) v0 @kind object;
  #L082f98.  v2:= v0.`a.a.g.c$a.a` @type ^`boolean` @kind boolean;
  #L082f9c.  if v2 != 0 then goto L082fc0;
  #L082fa0.  v2:= v0.`a.a.g.c$a.b` @type ^`java.lang.String` @kind object;
  #L082fa4.  if v2 != 0 then goto L082fc0;
  #L082fa8.  call temp:= `b`() @signature `La/a/g/e;.b:()La/a/g/e;` @kind static;
  #L082fae.  v0:= temp @kind object;
  #L082fb0.  v2:= 4I;
  #L082fb2.  v3:= "ALPN callback dropped: HTTP/2 is disabled. Is alpn-boot on the boot class path?" @kind object;
  #L082fb6.  v4:= 0I;
  #L082fb8.  call `a`(v0, v2, v3, v4) @signature `La/a/g/e;.a:(ILjava/lang/String;Ljava/lang/Throwable;)V` @kind virtual;
  #L082fbe.  return v1 @kind object;
  #L082fc0.  v2:= v0.`a.a.g.c$a.a` @type ^`boolean` @kind boolean;
  #L082fc4.  if v2 == 0 then goto L082fce;
  #L082fc8.  v0:= v1 @kind object;
  #L082fca.  v1:= v0 @kind object;
  #L082fcc.  goto L082fbe;
  #L082fce.  v0:= v0.`a.a.g.c$a.b` @type ^`java.lang.String` @kind object;
  #Try_end0.  
  #L082fd2.  goto L082fca;
  #L082fd4.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L082fd6.  v0:= new `java.lang.AssertionError`;
  #L082fda.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L082fe0.  throw v0;
  #L082fe2.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L082fe4.  goto L082fd6;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L082fe2;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L082fd4;
}
procedure `void` `a`(`a.a.g.c` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object, `java.lang.String` v7 @kind object, `java.util.List` v8 @kind object) @signature `La/a/g/c;.a:(Ljavax/net/ssl/SSLSocket;Ljava/lang/String;Ljava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L083008.  call temp:= `a`(v8) @signature `La/a/g/c;.a:(Ljava/util/List;)Ljava/util/List;` @kind static;
  #L08300e.  v0:= temp @kind object;
  #Try_start0.  
  #L083010.  v1:= constclass @type ^`a.a.g.e` @kind object;
  #L083014.  call temp:= `getClassLoader`(v1) @signature `Ljava/lang/Class;.getClassLoader:()Ljava/lang/ClassLoader;` @kind virtual;
  #L08301a.  v1:= temp @kind object;
  #L08301c.  v2:= 2I;
  #L08301e.  v2:= new `java.lang.Class`[v2];
  #L083022.  v3:= 0I;
  #L083024.  v4:= v5.`a.a.g.c.d` @type ^`java.lang.Class` @kind object;
  #L083028.  v2[v3]:= v4 @kind object;
  #L08302c.  v3:= 1I;
  #L08302e.  v4:= v5.`a.a.g.c.e` @type ^`java.lang.Class` @kind object;
  #L083032.  v2[v3]:= v4 @kind object;
  #L083036.  v3:= new `a.a.g.c$a`;
  #L08303a.  call `<init>`(v3, v0) @signature `La/a/g/c$a;.<init>:(Ljava/util/List;)V` @kind direct;
  #L083040.  call temp:= `newProxyInstance`(v1, v2, v3) @signature `Ljava/lang/reflect/Proxy;.newProxyInstance:(Ljava/lang/ClassLoader;[Ljava/lang/Class;Ljava/lang/reflect/InvocationHandler;)Ljava/lang/Object;` @kind static;
  #L083046.  v0:= temp @kind object;
  #L083048.  v1:= v5.`a.a.g.c.a` @type ^`java.lang.reflect.Method` @kind object;
  #L08304c.  v2:= 0I;
  #L08304e.  v3:= 2I;
  #L083050.  v3:= new `java.lang.Object`[v3];
  #L083054.  v4:= 0I;
  #L083056.  v3[v4]:= v6 @kind object;
  #L08305a.  v4:= 1I;
  #L08305c.  v3[v4]:= v0 @kind object;
  #L083060.  call temp:= `invoke`(v1, v2, v3) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L083066.  return @kind void;
  #L083068.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L08306a.  v1:= new `java.lang.AssertionError`;
  #L08306e.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L083074.  throw v1;
  #L083076.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L083078.  goto L08306a;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L083076;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L083068;
}
procedure `void` `b`(`a.a.g.c` v4 @kind this, `javax.net.ssl.SSLSocket` v5 @kind object) @signature `La/a/g/c;.b:(Ljavax/net/ssl/SSLSocket;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L08309c.  v0:= v4.`a.a.g.c.c` @type ^`java.lang.reflect.Method` @kind object;
  #L0830a0.  v1:= 0I;
  #L0830a2.  v2:= 1I;
  #L0830a4.  v2:= new `java.lang.Object`[v2];
  #L0830a8.  v3:= 0I;
  #L0830aa.  v2[v3]:= v5 @kind object;
  #L0830ae.  call temp:= `invoke`(v0, v1, v2) @signature `Ljava/lang/reflect/Method;.invoke:(Ljava/lang/Object;[Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #Try_end0.  
  #L0830b4.  return @kind void;
  #L0830b6.  v0:= Exception @type ^`java.lang.IllegalAccessException` @kind object;
  #L0830b8.  v0:= new `java.lang.AssertionError`;
  #L0830bc.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L0830c2.  throw v0;
  #L0830c4.  v0:= Exception @type ^`java.lang.reflect.InvocationTargetException` @kind object;
  #L0830c6.  goto L0830b8;
  catch `java.lang.IllegalAccessException` @[Try_start0..Try_end0] goto L0830b6;
  catch `java.lang.reflect.InvocationTargetException` @[Try_start0..Try_end0] goto L0830c4;
}
