record `a.a.d.a$b` @kind class @AccessFlag FINAL extends `b.q` @kind interface {
  `a.a.d.a` `a.a.d.a$b.a` @AccessFlag FINAL_SYNTHETIC;
  `b.h` `a.a.d.a$b.b` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.a.d.a$b.c` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$b` v2 @kind this, `a.a.d.a` v3 @kind object) @signature `La/a/d/a$b;.<init>:(La/a/d/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07a194.  v2.`a.a.d.a$b.a` @type ^`a.a.d.a` := v3 @kind object;
  #L07a198.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07a19e.  v0:= new `b.h`;
  #L07a1a2.  v1:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07a1a6.  v1:= v1.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07a1aa.  call temp:= `a`(v1) @signature `Lb/d;.a:()Lb/s;` @kind interface;
  #L07a1b0.  v1:= temp @kind object;
  #L07a1b2.  call `<init>`(v0, v1) @signature `Lb/h;.<init>:(Lb/s;)V` @kind direct;
  #L07a1b8.  v2.`a.a.d.a$b.b` @type ^`b.h` := v0 @kind object;
  #L07a1bc.  return @kind void;
}
procedure `b.s` `a`(`a.a.d.a$b` v1 @kind this) @signature `La/a/d/a$b;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07a1d0.  v0:= v1.`a.a.d.a$b.b` @type ^`b.h` @kind object;
  #L07a1d4.  return v0 @kind object;
}
procedure `void` `a_`(`a.a.d.a$b` v2 @kind this, `b.c` v3 @kind object, `long` v4 ) @signature `La/a/d/a$b;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07a1e8.  v0:= v2.`a.a.d.a$b.c` @type ^`boolean` @kind boolean;
  #L07a1ec.  if v0 == 0 then goto L07a200;
  #L07a1f0.  v0:= new `java.lang.IllegalStateException`;
  #L07a1f4.  v1:= "closed" @kind object;
  #L07a1f8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a1fe.  throw v0;
  #L07a200.  v0:= 0L;
  #L07a204.  v0:= lcmp(v4, v0);
  #L07a208.  if v0 != 0 then goto L07a20e;
  #L07a20c.  return @kind void;
  #L07a20e.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07a212.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07a216.  call temp:= `j`(v0, v4) @signature `Lb/d;.j:(J)Lb/d;` @kind interface;
  #L07a21c.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07a220.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07a224.  v1:= "\r\n" @kind object;
  #L07a228.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07a22e.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07a232.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07a236.  call `a_`(v0, v3, v4) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L07a23c.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07a240.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07a244.  v1:= "\r\n" @kind object;
  #L07a248.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07a24e.  goto L07a20c;
}
procedure `void` `close`(`a.a.d.a$b` v2 @kind this) @signature `La/a/d/a$b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07a260.  @monitorenter v2
  #Try_start0.  
  #L07a262.  v0:= v2.`a.a.d.a$b.c` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L07a266.  if v0 == 0 then goto L07a26e;
  #L07a26a.  @monitorexit v2
  #L07a26c.  return @kind void;
  #L07a26e.  v0:= 1I;
  #Try_start1.  
  #L07a270.  v2.`a.a.d.a$b.c` @type ^`boolean` := v0 @kind boolean;
  #L07a274.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07a278.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07a27c.  v1:= "0\r\n\r\n" @kind object;
  #L07a280.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07a286.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07a28a.  v1:= v2.`a.a.d.a$b.b` @type ^`b.h` @kind object;
  #L07a28e.  call `a`(v0, v1) @signature `La/a/d/a;.a:(Lb/h;)V` @kind virtual;
  #L07a294.  v0:= v2.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07a298.  v1:= 3I;
  #L07a29a.  v0.`a.a.d.a.e` @type ^`int` := v1;
  #Try_end1.  
  #L07a29e.  goto L07a26a;
  #L07a2a0.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07a2a2.  @monitorexit v2
  #L07a2a4.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07a2a0;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07a2a0;
}
procedure `void` `flush`(`a.a.d.a$b` v1 @kind this) @signature `La/a/d/a$b;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07a2cc.  @monitorenter v1
  #Try_start0.  
  #L07a2ce.  v0:= v1.`a.a.d.a$b.c` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L07a2d2.  if v0 == 0 then goto L07a2da;
  #L07a2d6.  @monitorexit v1
  #L07a2d8.  return @kind void;
  #Try_start1.  
  #L07a2da.  v0:= v1.`a.a.d.a$b.a` @type ^`a.a.d.a` @kind object;
  #L07a2de.  v0:= v0.`a.a.d.a.d` @type ^`b.d` @kind object;
  #L07a2e2.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L07a2e8.  goto L07a2d6;
  #L07a2ea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07a2ec.  @monitorexit v1
  #L07a2ee.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07a2ea;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07a2ea;
}
