record `a.a.d.a$f` @kind class @AccessFlag  extends `a.a.d.a$a` @kind class {
  `a.a.d.a` `a.a.d.a$f.d` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `a.a.d.a$f.e` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$f` v1 @kind this, `a.a.d.a` v2 @kind object) @signature `La/a/d/a$f;.<init>:(La/a/d/a;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;

  #L07a898.  v1.`a.a.d.a$f.d` @type ^`a.a.d.a` := v2 @kind object;
  #L07a89c.  v0:= 0I;
  #L07a89e.  call `<init>`(v1, v2, v0) @signature `La/a/d/a$a;.<init>:(La/a/d/a;La/a/d/a$1;)V` @kind direct;
  #L07a8a4.  return @kind void;
}
procedure `long` `a`(`a.a.d.a$f` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `La/a/d/a$f;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07a8b8.  v5:= 1I;
  #L07a8ba.  v0:= -1L;
  #L07a8be.  v2:= 0L;
  #L07a8c2.  v2:= lcmp(v8, v2);
  #L07a8c6.  if v2 >= 0 then goto L07a8fc;
  #L07a8ca.  v0:= new `java.lang.IllegalArgumentException`;
  #L07a8ce.  v1:= new `java.lang.StringBuilder`;
  #L07a8d2.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a8d8.  v2:= "byteCount < 0: " @kind object;
  #L07a8dc.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a8e2.  v1:= temp @kind object;
  #L07a8e4.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a8ea.  v1:= temp @kind object;
  #L07a8ec.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a8f2.  v1:= temp @kind object;
  #L07a8f4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a8fa.  throw v0;
  #L07a8fc.  v2:= v6.`a.a.d.a$f.b` @type ^`boolean` @kind boolean;
  #L07a900.  if v2 == 0 then goto L07a914;
  #L07a904.  v0:= new `java.lang.IllegalStateException`;
  #L07a908.  v1:= "closed" @kind object;
  #L07a90c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a912.  throw v0;
  #L07a914.  v2:= v6.`a.a.d.a$f.e` @type ^`boolean` @kind boolean;
  #L07a918.  if v2 == 0 then goto L07a91e;
  #L07a91c.  return v0 @kind wide;
  #L07a91e.  v2:= v6.`a.a.d.a$f.d` @type ^`a.a.d.a` @kind object;
  #L07a922.  v2:= v2.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07a926.  call temp:= `a`(v2, v7, v8) @signature `Lb/e;.a:(Lb/c;J)J` @kind interface;
  #L07a92c.  v2:= temp @kind wide;
  #L07a92e.  v4:= lcmp(v2, v0);
  #L07a932.  if v4 != 0 then goto L07a942;
  #L07a936.  v6.`a.a.d.a$f.e` @type ^`boolean` := v5 @kind boolean;
  #L07a93a.  call `a`(v6, v5) @signature `La/a/d/a$f;.a:(Z)V` @kind virtual;
  #L07a940.  goto L07a91c;
  #L07a942.  v0:= v2 @kind wide;
  #L07a944.  goto L07a91c;
}
procedure `void` `close`(`a.a.d.a$f` v1 @kind this) @signature `La/a/d/a$f;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07a958.  v0:= v1.`a.a.d.a$f.b` @type ^`boolean` @kind boolean;
  #L07a95c.  if v0 == 0 then goto L07a962;
  #L07a960.  return @kind void;
  #L07a962.  v0:= v1.`a.a.d.a$f.e` @type ^`boolean` @kind boolean;
  #L07a966.  if v0 != 0 then goto L07a972;
  #L07a96a.  v0:= 0I;
  #L07a96c.  call `a`(v1, v0) @signature `La/a/d/a$f;.a:(Z)V` @kind virtual;
  #L07a972.  v0:= 1I;
  #L07a974.  v1.`a.a.d.a$f.b` @type ^`boolean` := v0 @kind boolean;
  #L07a978.  goto L07a960;
}
