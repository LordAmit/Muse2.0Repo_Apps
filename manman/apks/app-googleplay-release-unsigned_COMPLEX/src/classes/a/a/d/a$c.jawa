record `a.a.d.a$c` @kind class @AccessFlag  extends `a.a.d.a$a` @kind class {
  `a.a.d.a` `a.a.d.a$c.d` @AccessFlag FINAL_SYNTHETIC;
  `a.r` `a.a.d.a$c.e` @AccessFlag PRIVATE_FINAL;
  `long` `a.a.d.a$c.f` @AccessFlag PRIVATE;
  `boolean` `a.a.d.a$c.g` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.d.a$c` v2 @kind this, `a.a.d.a` v3 @kind object, `a.r` v4 @kind object) @signature `La/a/d/a$c;.<init>:(La/a/d/a;La/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07a314.  v2.`a.a.d.a$c.d` @type ^`a.a.d.a` := v3 @kind object;
  #L07a318.  v0:= 0I;
  #L07a31a.  call `<init>`(v2, v3, v0) @signature `La/a/d/a$a;.<init>:(La/a/d/a;La/a/d/a$1;)V` @kind direct;
  #L07a320.  v0:= -1L;
  #L07a324.  v2.`a.a.d.a$c.f` @type ^`long` := v0 @kind wide;
  #L07a328.  v0:= 1I;
  #L07a32a.  v2.`a.a.d.a$c.g` @type ^`boolean` := v0 @kind boolean;
  #L07a32e.  v2.`a.a.d.a$c.e` @type ^`a.r` := v4 @kind object;
  #L07a332.  return @kind void;
}
procedure `void` `b`(`a.a.d.a$c` v6 @kind this) @signature `La/a/d/a$c;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07a344.  v4:= 0L;
  #L07a348.  v0:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07a34c.  v2:= -1L;
  #L07a350.  v0:= lcmp(v0, v2);
  #L07a354.  if v0 == 0 then goto L07a366;
  #L07a358.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07a35c.  v0:= v0.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07a360.  call temp:= `p`(v0) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #Try_start0.  
  #L07a366.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07a36a.  v0:= v0.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07a36e.  call temp:= `m`(v0) @signature `Lb/e;.m:()J` @kind interface;
  #L07a374.  v0:= temp @kind wide;
  #L07a376.  v6.`a.a.d.a$c.f` @type ^`long` := v0 @kind wide;
  #L07a37a.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07a37e.  v0:= v0.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07a382.  call temp:= `p`(v0) @signature `Lb/e;.p:()Ljava/lang/String;` @kind interface;
  #L07a388.  v0:= temp @kind object;
  #L07a38a.  call temp:= `trim`(v0) @signature `Ljava/lang/String;.trim:()Ljava/lang/String;` @kind virtual;
  #L07a390.  v0:= temp @kind object;
  #L07a392.  v2:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07a396.  v1:= lcmp(v2, v4);
  #L07a39a.  if v1 < 0 then goto L07a3ba;
  #L07a39e.  call temp:= `isEmpty`(v0) @signature `Ljava/lang/String;.isEmpty:()Z` @kind virtual;
  #L07a3a4.  v1:= temp;
  #L07a3a6.  if v1 != 0 then goto L07a41a;
  #L07a3aa.  v1:= ";" @kind object;
  #L07a3ae.  call temp:= `startsWith`(v0, v1) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L07a3b4.  v1:= temp;
  #L07a3b6.  if v1 != 0 then goto L07a41a;
  #L07a3ba.  v1:= new `java.net.ProtocolException`;
  #L07a3be.  v2:= new `java.lang.StringBuilder`;
  #L07a3c2.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a3c8.  v3:= "expected chunk size and optional extensions but was \"" @kind object;
  #L07a3cc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a3d2.  v2:= temp @kind object;
  #L07a3d4.  v4:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07a3d8.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a3de.  v2:= temp @kind object;
  #L07a3e0.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a3e6.  v0:= temp @kind object;
  #L07a3e8.  v2:= "\"" @kind object;
  #L07a3ec.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a3f2.  v0:= temp @kind object;
  #L07a3f4.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a3fa.  v0:= temp @kind object;
  #L07a3fc.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a402.  throw v1;
  #Try_end0.  
  #L07a404.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L07a406.  v1:= new `java.net.ProtocolException`;
  #L07a40a.  call temp:= `getMessage`(v0) @signature `Ljava/lang/NumberFormatException;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L07a410.  v0:= temp @kind object;
  #L07a412.  call `<init>`(v1, v0) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a418.  throw v1;
  #L07a41a.  v0:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07a41e.  v0:= lcmp(v0, v4);
  #L07a422.  if v0 != 0 then goto L07a45a;
  #L07a426.  v0:= 0I;
  #L07a428.  v6.`a.a.d.a$c.g` @type ^`boolean` := v0 @kind boolean;
  #L07a42c.  v0:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07a430.  v0:= v0.`a.a.d.a.a` @type ^`a.u` @kind object;
  #L07a434.  call temp:= `f`(v0) @signature `La/u;.f:()La/m;` @kind virtual;
  #L07a43a.  v0:= temp @kind object;
  #L07a43c.  v1:= v6.`a.a.d.a$c.e` @type ^`a.r` @kind object;
  #L07a440.  v2:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07a444.  call temp:= `c`(v2) @signature `La/a/d/a;.c:()La/q;` @kind virtual;
  #L07a44a.  v2:= temp @kind object;
  #L07a44c.  call `a`(v0, v1, v2) @signature `La/a/c/e;.a:(La/m;La/r;La/q;)V` @kind static;
  #L07a452.  v0:= 1I;
  #L07a454.  call `a`(v6, v0) @signature `La/a/d/a$c;.a:(Z)V` @kind virtual;
  #L07a45a.  return @kind void;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L07a404;
}
procedure `long` `a`(`a.a.d.a$c` v6 @kind this, `b.c` v7 @kind object, `long` v8 ) @signature `La/a/d/a$c;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07a47c.  v4:= 0L;
  #L07a480.  v0:= -1L;
  #L07a484.  v2:= lcmp(v8, v4);
  #L07a488.  if v2 >= 0 then goto L07a4be;
  #L07a48c.  v0:= new `java.lang.IllegalArgumentException`;
  #L07a490.  v1:= new `java.lang.StringBuilder`;
  #L07a494.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07a49a.  v2:= "byteCount < 0: " @kind object;
  #L07a49e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a4a4.  v1:= temp @kind object;
  #L07a4a6.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07a4ac.  v1:= temp @kind object;
  #L07a4ae.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07a4b4.  v1:= temp @kind object;
  #L07a4b6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a4bc.  throw v0;
  #L07a4be.  v2:= v6.`a.a.d.a$c.b` @type ^`boolean` @kind boolean;
  #L07a4c2.  if v2 == 0 then goto L07a4d6;
  #L07a4c6.  v0:= new `java.lang.IllegalStateException`;
  #L07a4ca.  v1:= "closed" @kind object;
  #L07a4ce.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a4d4.  throw v0;
  #L07a4d6.  v2:= v6.`a.a.d.a$c.g` @type ^`boolean` @kind boolean;
  #L07a4da.  if v2 != 0 then goto L07a4e0;
  #L07a4de.  return v0 @kind wide;
  #L07a4e0.  v2:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07a4e4.  v2:= lcmp(v2, v4);
  #L07a4e8.  if v2 == 0 then goto L07a4f8;
  #L07a4ec.  v2:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07a4f0.  v2:= lcmp(v2, v0);
  #L07a4f4.  if v2 != 0 then goto L07a506;
  #L07a4f8.  call `b`(v6) @signature `La/a/d/a$c;.b:()V` @kind direct;
  #L07a4fe.  v2:= v6.`a.a.d.a$c.g` @type ^`boolean` @kind boolean;
  #L07a502.  if v2 == 0 then goto L07a4de;
  #L07a506.  v2:= v6.`a.a.d.a$c.d` @type ^`a.a.d.a` @kind object;
  #L07a50a.  v2:= v2.`a.a.d.a.c` @type ^`b.e` @kind object;
  #L07a50e.  v4:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07a512.  call temp:= `min`(v8, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L07a518.  v4:= temp @kind wide;
  #L07a51a.  call temp:= `a`(v2, v7, v4) @signature `Lb/e;.a:(Lb/c;J)J` @kind interface;
  #L07a520.  v2:= temp @kind wide;
  #L07a522.  v0:= lcmp(v2, v0);
  #L07a526.  if v0 != 0 then goto L07a542;
  #L07a52a.  v0:= 0I;
  #L07a52c.  call `a`(v6, v0) @signature `La/a/d/a$c;.a:(Z)V` @kind virtual;
  #L07a532.  v0:= new `java.net.ProtocolException`;
  #L07a536.  v1:= "unexpected end of stream" @kind object;
  #L07a53a.  call `<init>`(v0, v1) @signature `Ljava/net/ProtocolException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07a540.  throw v0;
  #L07a542.  v0:= v6.`a.a.d.a$c.f` @type ^`long` @kind wide;
  #L07a546.  v0:= v0 - v2 @kind long;
  #L07a548.  v6.`a.a.d.a$c.f` @type ^`long` := v0 @kind wide;
  #L07a54c.  v0:= v2 @kind wide;
  #L07a54e.  goto L07a4de;
}
procedure `void` `close`(`a.a.d.a$c` v2 @kind this) @signature `La/a/d/a$c;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07a560.  v0:= v2.`a.a.d.a$c.b` @type ^`boolean` @kind boolean;
  #L07a564.  if v0 == 0 then goto L07a56a;
  #L07a568.  return @kind void;
  #L07a56a.  v0:= v2.`a.a.d.a$c.g` @type ^`boolean` @kind boolean;
  #L07a56e.  if v0 == 0 then goto L07a58e;
  #L07a572.  v0:= 100I;
  #L07a576.  v1:= `@@java.util.concurrent.TimeUnit.MILLISECONDS` @type ^`java.util.concurrent.TimeUnit` @kind object;
  #L07a57a.  call temp:= `a`(v2, v0, v1) @signature `La/a/c;.a:(Lb/r;ILjava/util/concurrent/TimeUnit;)Z` @kind static;
  #L07a580.  v0:= temp;
  #L07a582.  if v0 != 0 then goto L07a58e;
  #L07a586.  v0:= 0I;
  #L07a588.  call `a`(v2, v0) @signature `La/a/d/a$c;.a:(Z)V` @kind virtual;
  #L07a58e.  v0:= 1I;
  #L07a590.  v2.`a.a.d.a$c.b` @type ^`boolean` := v0 @kind boolean;
  #L07a594.  goto L07a568;
}
