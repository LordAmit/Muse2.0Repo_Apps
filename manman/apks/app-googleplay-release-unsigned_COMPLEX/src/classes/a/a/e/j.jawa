record `a.a.e.j` @kind class @AccessFlag FINAL extends `java.io.Closeable` @kind interface {
  `a.a.e.d$b` `a.a.e.j.a` @AccessFlag FINAL;
  `b.d` `a.a.e.j.c` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.a.e.j.d` @AccessFlag PRIVATE_FINAL;
  `b.c` `a.a.e.j.e` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.e.j.f` @AccessFlag PRIVATE;
  `boolean` `a.a.e.j.g` @AccessFlag PRIVATE;
}
global `java.util.logging.Logger` `@@a.a.e.j.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/a/e/j;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L080ac8.  v0:= constclass @type ^`a.a.e.e` @kind object;
  #L080acc.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L080ad2.  v0:= temp @kind object;
  #L080ad4.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L080ada.  v0:= temp @kind object;
  #L080adc.  `@@a.a.e.j.b` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L080ae0.  return @kind void;
}
procedure `void` `<init>`(`a.a.e.j` v2 @kind this, `b.d` v3 @kind object, `boolean` v4 ) @signature `La/a/e/j;.<init>:(Lb/d;Z)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L080af4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L080afa.  v2.`a.a.e.j.c` @type ^`b.d` := v3 @kind object;
  #L080afe.  v2.`a.a.e.j.d` @type ^`boolean` := v4 @kind boolean;
  #L080b02.  v0:= new `b.c`;
  #L080b06.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L080b0c.  v2.`a.a.e.j.e` @type ^`b.c` := v0 @kind object;
  #L080b10.  v0:= new `a.a.e.d$b`;
  #L080b14.  v1:= v2.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L080b18.  call `<init>`(v0, v1) @signature `La/a/e/d$b;.<init>:(Lb/c;)V` @kind direct;
  #L080b1e.  v2.`a.a.e.j.a` @type ^`a.a.e.d$b` := v0 @kind object;
  #L080b22.  v0:= 16384I;
  #L080b26.  v2.`a.a.e.j.f` @type ^`int` := v0;
  #L080b2a.  return @kind void;
}
procedure `void` `a`(`b.d` v1 @kind object, `int` v2 ) @signature `La/a/e/j;.a:(Lb/d;I)V` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L080b3c.  v0:= v2 ^>> 16;
  #L080b40.  v0:= v0 ^& 255;
  #L080b44.  call temp:= `i`(v1, v0) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L080b4a.  v0:= v2 ^>> 8;
  #L080b4e.  v0:= v0 ^& 255;
  #L080b52.  call temp:= `i`(v1, v0) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L080b58.  v0:= v2 ^& 255;
  #L080b5c.  call temp:= `i`(v1, v0) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L080b62.  return @kind void;
}
procedure `void` `b`(`a.a.e.j` v8 @kind this, `int` v9 , `long` v10 ) @signature `La/a/e/j;.b:(IJ)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L080b74.  v6:= 0L;
  #L080b78.  v0:= lcmp(v10, v6);
  #L080b7c.  if v0 <= 0 then goto L080bbe;
  #L080b80.  v0:= v8.`a.a.e.j.f` @type ^`int`;
  #L080b84.  v0:= (`long`) v0 @kind i2l;
  #L080b86.  call temp:= `min`(v0, v10) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L080b8c.  v0:= temp @kind wide;
  #L080b8e.  v1:= (`int`) v0 @kind l2i;
  #L080b90.  v2:= (`long`) v1 @kind i2l;
  #L080b92.  v10:= v10 - v2 @kind long;
  #L080b94.  v2:= 9I;
  #L080b98.  v0:= lcmp(v10, v6);
  #L080b9c.  if v0 != 0 then goto L080bba;
  #L080ba0.  v0:= 4I;
  #L080ba2.  call `a`(v8, v9, v1, v2, v0) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L080ba8.  v0:= v8.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080bac.  v2:= v8.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L080bb0.  v4:= (`long`) v1 @kind i2l;
  #L080bb2.  call `a_`(v0, v2, v4) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L080bb8.  goto L080b78;
  #L080bba.  v0:= 0I;
  #L080bbc.  goto L080ba2;
  #L080bbe.  return @kind void;
}
procedure `void` `a`(`a.a.e.j` v5 @kind this) @signature `La/a/e/j;.a:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L080bd0.  @monitorenter v5
  #Try_start0.  
  #L080bd2.  v0:= v5.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L080bd6.  if v0 == 0 then goto L080bf0;
  #L080bda.  v0:= new `java.io.IOException`;
  #L080bde.  v1:= "closed" @kind object;
  #L080be2.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080be8.  throw v0;
  #Try_end0.  
  #L080bea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L080bec.  @monitorexit v5
  #L080bee.  throw v0;
  #Try_start1.  
  #L080bf0.  v0:= v5.`a.a.e.j.d` @type ^`boolean` @kind boolean;
  #Try_end1.  
  #L080bf4.  if v0 != 0 then goto L080bfc;
  #L080bf8.  @monitorexit v5
  #L080bfa.  return @kind void;
  #Try_start2.  
  #L080bfc.  v0:= `@@a.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L080c00.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L080c04.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L080c0a.  v0:= temp;
  #L080c0c.  if v0 == 0 then goto L080c3e;
  #L080c10.  v0:= `@@a.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L080c14.  v1:= ">> CONNECTION %s" @kind object;
  #L080c18.  v2:= 1I;
  #L080c1a.  v2:= new `java.lang.Object`[v2];
  #L080c1e.  v3:= 0I;
  #L080c20.  v4:= `@@a.a.e.e.a` @type ^`b.f` @kind object;
  #L080c24.  call temp:= `e`(v4) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L080c2a.  v4:= temp @kind object;
  #L080c2c.  v2[v3]:= v4 @kind object;
  #L080c30.  call temp:= `a`(v1, v2) @signature `La/a/c;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L080c36.  v1:= temp @kind object;
  #L080c38.  call `fine`(v0, v1) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L080c3e.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080c42.  v1:= `@@a.a.e.e.a` @type ^`b.f` @kind object;
  #L080c46.  call temp:= `h`(v1) @signature `Lb/f;.h:()[B` @kind virtual;
  #L080c4c.  v1:= temp @kind object;
  #L080c4e.  call temp:= `c`(v0, v1) @signature `Lb/d;.c:([B)Lb/d;` @kind interface;
  #L080c54.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080c58.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end2.  
  #L080c5e.  goto L080bf8;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L080bea;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L080bea;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L080bea;
}
procedure `void` `a`(`a.a.e.j` v4 @kind this, `int` v5 , `byte` v6 , `b.c` v7 @kind object, `int` v8 ) @signature `La/a/e/j;.a:(IBLb/c;I)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L080c8c.  v0:= 0I;
  #L080c8e.  call `a`(v4, v5, v8, v0, v6) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L080c94.  if v8 <= 0 then goto L080ca4;
  #L080c98.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080c9c.  v2:= (`long`) v8 @kind i2l;
  #L080c9e.  call `a_`(v0, v7, v2) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L080ca4.  return @kind void;
}
procedure `void` `a`(`a.a.e.j` v5 @kind this, `int` v6 , `int` v7 , `byte` v8 , `byte` v9 ) @signature `La/a/e/j;.a:(IIBB)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L080cb8.  v4:= 1I;
  #L080cba.  v3:= 0I;
  #L080cbc.  v0:= `@@a.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L080cc0.  v1:= `@@java.util.logging.Level.FINE` @type ^`java.util.logging.Level` @kind object;
  #L080cc4.  call temp:= `isLoggable`(v0, v1) @signature `Ljava/util/logging/Logger;.isLoggable:(Ljava/util/logging/Level;)Z` @kind virtual;
  #L080cca.  v0:= temp;
  #L080ccc.  if v0 == 0 then goto L080ce2;
  #L080cd0.  v0:= `@@a.a.e.j.b` @type ^`java.util.logging.Logger` @kind object;
  #L080cd4.  call temp:= `a`(v3, v6, v7, v8, v9) @signature `La/a/e/e;.a:(ZIIBB)Ljava/lang/String;` @kind static;
  #L080cda.  v1:= temp @kind object;
  #L080cdc.  call `fine`(v0, v1) @signature `Ljava/util/logging/Logger;.fine:(Ljava/lang/String;)V` @kind virtual;
  #L080ce2.  v0:= v5.`a.a.e.j.f` @type ^`int`;
  #L080ce6.  if v7 <= v0 then goto L080d1a;
  #L080cea.  v0:= "FRAME_SIZE_ERROR length > %d: %d" @kind object;
  #L080cee.  v1:= 2I;
  #L080cf0.  v1:= new `java.lang.Object`[v1];
  #L080cf4.  v2:= v5.`a.a.e.j.f` @type ^`int`;
  #L080cf8.  call temp:= `valueOf`(v2) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L080cfe.  v2:= temp @kind object;
  #L080d00.  v1[v3]:= v2 @kind object;
  #L080d04.  call temp:= `valueOf`(v7) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L080d0a.  v2:= temp @kind object;
  #L080d0c.  v1[v4]:= v2 @kind object;
  #L080d10.  call temp:= `a`(v0, v1) @signature `La/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L080d16.  v0:= temp @kind object;
  #L080d18.  throw v0;
  #L080d1a.  v0:= -2147483648I;
  #L080d1e.  v0:= v0 ^& v6 @kind int;
  #L080d20.  if v0 == 0 then goto L080d42;
  #L080d24.  v0:= "reserved bit set: %s" @kind object;
  #L080d28.  v1:= new `java.lang.Object`[v4];
  #L080d2c.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Integer;.valueOf:(I)Ljava/lang/Integer;` @kind static;
  #L080d32.  v2:= temp @kind object;
  #L080d34.  v1[v3]:= v2 @kind object;
  #L080d38.  call temp:= `a`(v0, v1) @signature `La/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L080d3e.  v0:= temp @kind object;
  #L080d40.  throw v0;
  #L080d42.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080d46.  call `a`(v0, v7) @signature `La/a/e/j;.a:(Lb/d;I)V` @kind static;
  #L080d4c.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080d50.  v1:= v8 ^& 255;
  #L080d54.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L080d5a.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080d5e.  v1:= v9 ^& 255;
  #L080d62.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L080d68.  v0:= v5.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080d6c.  v1:= 2147483647I;
  #L080d72.  v1:= v1 ^& v6 @kind int;
  #L080d74.  call temp:= `g`(v0, v1) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L080d7a.  return @kind void;
}
procedure `void` `a`(`a.a.e.j` v8 @kind this, `int` v9 , `int` v10 , `java.util.List` v11 @kind object) @signature `La/a/e/j;.a:(IILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L080d8c.  @monitorenter v8
  #Try_start0.  
  #L080d8e.  v0:= v8.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L080d92.  if v0 == 0 then goto L080dac;
  #L080d96.  v0:= new `java.io.IOException`;
  #L080d9a.  v1:= "closed" @kind object;
  #L080d9e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080da4.  throw v0;
  #Try_end0.  
  #L080da6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L080da8.  @monitorexit v8
  #L080daa.  throw v0;
  #Try_start1.  
  #L080dac.  v0:= v8.`a.a.e.j.a` @type ^`a.a.e.d$b` @kind object;
  #L080db0.  call `a`(v0, v11) @signature `La/a/e/d$b;.a:(Ljava/util/List;)V` @kind virtual;
  #L080db6.  v0:= v8.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L080dba.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L080dc0.  v2:= temp @kind wide;
  #L080dc2.  v0:= v8.`a.a.e.j.f` @type ^`int`;
  #L080dc6.  v0:= v0 + -4;
  #L080dca.  v0:= (`long`) v0 @kind i2l;
  #L080dcc.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L080dd2.  v0:= temp @kind wide;
  #L080dd4.  v1:= (`int`) v0 @kind l2i;
  #L080dd6.  v4:= 5I;
  #L080dd8.  v6:= (`long`) v1 @kind i2l;
  #L080dda.  v0:= lcmp(v2, v6);
  #L080dde.  if v0 != 0 then goto L080e2a;
  #L080de2.  v0:= 4I;
  #L080de4.  v5:= v1 + 4;
  #L080de8.  call `a`(v8, v9, v5, v4, v0) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L080dee.  v0:= v8.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080df2.  v4:= 2147483647I;
  #L080df8.  v4:= v4 ^& v10 @kind int;
  #L080dfa.  call temp:= `g`(v0, v4) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L080e00.  v0:= v8.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080e04.  v4:= v8.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L080e08.  v6:= (`long`) v1 @kind i2l;
  #L080e0a.  call `a_`(v0, v4, v6) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L080e10.  v4:= (`long`) v1 @kind i2l;
  #L080e12.  v0:= lcmp(v2, v4);
  #L080e16.  if v0 <= 0 then goto L080e26;
  #L080e1a.  v0:= (`long`) v1 @kind i2l;
  #L080e1c.  v0:= v2 - v0 @kind long;
  #L080e20.  call `b`(v8, v9, v0) @signature `La/a/e/j;.b:(IJ)V` @kind direct;
  #Try_end1.  
  #L080e26.  @monitorexit v8
  #L080e28.  return @kind void;
  #L080e2a.  v0:= 0I;
  #L080e2c.  goto L080de4;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L080da6;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L080da6;
}
procedure `void` `a`(`a.a.e.j` v4 @kind this, `int` v5 , `long` v6 ) @signature `La/a/e/j;.a:(IJ)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L080e54.  @monitorenter v4
  #Try_start0.  
  #L080e56.  v0:= v4.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L080e5a.  if v0 == 0 then goto L080e74;
  #L080e5e.  v0:= new `java.io.IOException`;
  #L080e62.  v1:= "closed" @kind object;
  #L080e66.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080e6c.  throw v0;
  #Try_end0.  
  #L080e6e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L080e70.  @monitorexit v4
  #L080e72.  throw v0;
  #L080e74.  v0:= 0L;
  #L080e78.  v0:= lcmp(v6, v0);
  #L080e7c.  if v0 == 0 then goto L080e8e;
  #L080e80.  v0:= 2147483647L;
  #L080e86.  v0:= lcmp(v6, v0);
  #L080e8a.  if v0 <= 0 then goto L080eb0;
  #Try_start1.  
  #L080e8e.  v0:= "windowSizeIncrement == 0 || windowSizeIncrement > 0x7fffffffL: %s" @kind object;
  #L080e92.  v1:= 1I;
  #L080e94.  v1:= new `java.lang.Object`[v1];
  #L080e98.  v2:= 0I;
  #L080e9a.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L080ea0.  v3:= temp @kind object;
  #L080ea2.  v1[v2]:= v3 @kind object;
  #L080ea6.  call temp:= `a`(v0, v1) @signature `La/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L080eac.  v0:= temp @kind object;
  #L080eae.  throw v0;
  #L080eb0.  v0:= 4I;
  #L080eb2.  v1:= 8I;
  #L080eb6.  v2:= 0I;
  #L080eb8.  call `a`(v4, v5, v0, v1, v2) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L080ebe.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080ec2.  v1:= (`int`) v6 @kind l2i;
  #L080ec4.  call temp:= `g`(v0, v1) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L080eca.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080ece.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L080ed4.  @monitorexit v4
  #L080ed6.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L080e6e;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L080e6e;
}
procedure `void` `a`(`a.a.e.j` v3 @kind this, `int` v4 , `a.a.e.b` v5 @kind object) @signature `La/a/e/j;.a:(ILa/a/e/b;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L080efc.  @monitorenter v3
  #Try_start0.  
  #L080efe.  v0:= v3.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L080f02.  if v0 == 0 then goto L080f1c;
  #L080f06.  v0:= new `java.io.IOException`;
  #L080f0a.  v1:= "closed" @kind object;
  #L080f0e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080f14.  throw v0;
  #Try_end0.  
  #L080f16.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L080f18.  @monitorexit v3
  #L080f1a.  throw v0;
  #Try_start1.  
  #L080f1c.  v0:= v5.`a.a.e.b.g` @type ^`int`;
  #L080f20.  v1:= -1I;
  #L080f22.  if v0 != v1 then goto L080f32;
  #L080f26.  v0:= new `java.lang.IllegalArgumentException`;
  #L080f2a.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L080f30.  throw v0;
  #L080f32.  v0:= 4I;
  #L080f34.  v1:= 3I;
  #L080f36.  v2:= 0I;
  #L080f38.  call `a`(v3, v4, v0, v1, v2) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L080f3e.  v0:= v3.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080f42.  v1:= v5.`a.a.e.b.g` @type ^`int`;
  #L080f46.  call temp:= `g`(v0, v1) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L080f4c.  v0:= v3.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080f50.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L080f56.  @monitorexit v3
  #L080f58.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L080f16;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L080f16;
}
procedure `void` `a`(`a.a.e.j` v4 @kind this, `int` v5 , `a.a.e.b` v6 @kind object, `byte`[] v7 @kind object) @signature `La/a/e/j;.a:(ILa/a/e/b;[B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L080f80.  @monitorenter v4
  #Try_start0.  
  #L080f82.  v0:= v4.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L080f86.  if v0 == 0 then goto L080fa0;
  #L080f8a.  v0:= new `java.io.IOException`;
  #L080f8e.  v1:= "closed" @kind object;
  #L080f92.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L080f98.  throw v0;
  #Try_end0.  
  #L080f9a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L080f9c.  @monitorexit v4
  #L080f9e.  throw v0;
  #Try_start1.  
  #L080fa0.  v0:= v6.`a.a.e.b.g` @type ^`int`;
  #L080fa4.  v1:= -1I;
  #L080fa6.  if v0 != v1 then goto L080fbe;
  #L080faa.  v0:= "errorCode.httpCode == -1" @kind object;
  #L080fae.  v1:= 0I;
  #L080fb0.  v1:= new `java.lang.Object`[v1];
  #L080fb4.  call temp:= `a`(v0, v1) @signature `La/a/e/e;.a:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/IllegalArgumentException;` @kind static;
  #L080fba.  v0:= temp @kind object;
  #L080fbc.  throw v0;
  #L080fbe.  v0:= length @variable v7;
  #L080fc0.  v0:= v0 + 8;
  #L080fc4.  v1:= 7I;
  #L080fc6.  v2:= 0I;
  #L080fc8.  v3:= 0I;
  #L080fca.  call `a`(v4, v3, v0, v1, v2) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L080fd0.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080fd4.  call temp:= `g`(v0, v5) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L080fda.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080fde.  v1:= v6.`a.a.e.b.g` @type ^`int`;
  #L080fe2.  call temp:= `g`(v0, v1) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L080fe8.  v0:= length @variable v7;
  #L080fea.  if v0 <= 0 then goto L080ff8;
  #L080fee.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080ff2.  call temp:= `c`(v0, v7) @signature `Lb/d;.c:([B)Lb/d;` @kind interface;
  #L080ff8.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L080ffc.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L081002.  @monitorexit v4
  #L081004.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L080f9a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L080f9a;
}
procedure `void` `a`(`a.a.e.j` v4 @kind this, `a.a.e.n` v5 @kind object) @signature `La/a/e/j;.a:(La/a/e/n;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L08102c.  @monitorenter v4
  #Try_start0.  
  #L08102e.  v0:= v4.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L081032.  if v0 == 0 then goto L08104c;
  #L081036.  v0:= new `java.io.IOException`;
  #L08103a.  v1:= "closed" @kind object;
  #L08103e.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081044.  throw v0;
  #Try_end0.  
  #L081046.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L081048.  @monitorexit v4
  #L08104a.  throw v0;
  #Try_start1.  
  #L08104c.  v0:= v4.`a.a.e.j.f` @type ^`int`;
  #L081050.  call temp:= `d`(v5, v0) @signature `La/a/e/n;.d:(I)I` @kind virtual;
  #L081056.  v0:= temp;
  #L081058.  v4.`a.a.e.j.f` @type ^`int` := v0;
  #L08105c.  call temp:= `c`(v5) @signature `La/a/e/n;.c:()I` @kind virtual;
  #L081062.  v0:= temp;
  #L081064.  v1:= -1I;
  #L081066.  if v0 == v1 then goto L08107c;
  #L08106a.  v0:= v4.`a.a.e.j.a` @type ^`a.a.e.d$b` @kind object;
  #L08106e.  call temp:= `c`(v5) @signature `La/a/e/n;.c:()I` @kind virtual;
  #L081074.  v1:= temp;
  #L081076.  call `a`(v0, v1) @signature `La/a/e/d$b;.a:(I)V` @kind virtual;
  #L08107c.  v0:= 0I;
  #L08107e.  v1:= 4I;
  #L081080.  v2:= 1I;
  #L081082.  v3:= 0I;
  #L081084.  call `a`(v4, v3, v0, v1, v2) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L08108a.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L08108e.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L081094.  @monitorexit v4
  #L081096.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L081046;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L081046;
}
procedure `void` `a`(`a.a.e.j` v4 @kind this, `boolean` v5 , `int` v6 , `int` v7 ) @signature `La/a/e/j;.a:(ZII)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L0810bc.  v0:= 0I;
  #L0810be.  @monitorenter v4
  #Try_start0.  
  #L0810c0.  v1:= v4.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L0810c4.  if v1 == 0 then goto L0810de;
  #L0810c8.  v0:= new `java.io.IOException`;
  #L0810cc.  v1:= "closed" @kind object;
  #L0810d0.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0810d6.  throw v0;
  #Try_end0.  
  #L0810d8.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0810da.  @monitorexit v4
  #L0810dc.  throw v0;
  #L0810de.  v1:= 8I;
  #L0810e2.  v2:= 6I;
  #L0810e4.  if v5 == 0 then goto L0810ea;
  #L0810e8.  v0:= 1I;
  #L0810ea.  v3:= 0I;
  #Try_start1.  
  #L0810ec.  call `a`(v4, v3, v1, v2, v0) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L0810f2.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L0810f6.  call temp:= `g`(v0, v6) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L0810fc.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081100.  call temp:= `g`(v0, v7) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L081106.  v0:= v4.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L08110a.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L081110.  @monitorexit v4
  #L081112.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0810d8;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0810d8;
}
procedure `void` `a`(`a.a.e.j` v2 @kind this, `boolean` v3 , `int` v4 , `int` v5 , `java.util.List` v6 @kind object) @signature `La/a/e/j;.a:(ZIILjava/util/List;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L081138.  @monitorenter v2
  #Try_start0.  
  #L08113a.  v0:= v2.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L08113e.  if v0 == 0 then goto L081158;
  #L081142.  v0:= new `java.io.IOException`;
  #L081146.  v1:= "closed" @kind object;
  #L08114a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081150.  throw v0;
  #Try_end0.  
  #L081152.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L081154.  @monitorexit v2
  #L081156.  throw v0;
  #Try_start1.  
  #L081158.  call `a`(v2, v3, v4, v6) @signature `La/a/e/j;.a:(ZILjava/util/List;)V` @kind virtual;
  #Try_end1.  
  #L08115e.  @monitorexit v2
  #L081160.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L081152;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L081152;
}
procedure `void` `a`(`a.a.e.j` v2 @kind this, `boolean` v3 , `int` v4 , `b.c` v5 @kind object, `int` v6 ) @signature `La/a/e/j;.a:(ZILb/c;I)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L081188.  @monitorenter v2
  #Try_start0.  
  #L08118a.  v0:= v2.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L08118e.  if v0 == 0 then goto L0811a8;
  #L081192.  v0:= new `java.io.IOException`;
  #L081196.  v1:= "closed" @kind object;
  #L08119a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0811a0.  throw v0;
  #Try_end0.  
  #L0811a2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0811a4.  @monitorexit v2
  #L0811a6.  throw v0;
  #L0811a8.  v0:= 0I;
  #L0811aa.  if v3 == 0 then goto L0811b2;
  #L0811ae.  v0:= 1I;
  #L0811b0.  v0:= (`byte`) v0 @kind i2b;
  #Try_start1.  
  #L0811b2.  call `a`(v2, v4, v0, v5, v6) @signature `La/a/e/j;.a:(IBLb/c;I)V` @kind virtual;
  #Try_end1.  
  #L0811b8.  @monitorexit v2
  #L0811ba.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0811a2;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0811a2;
}
procedure `void` `a`(`a.a.e.j` v8 @kind this, `boolean` v9 , `int` v10 , `java.util.List` v11 @kind object) @signature `La/a/e/j;.a:(ZILjava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L0811e0.  v0:= v8.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L0811e4.  if v0 == 0 then goto L0811f8;
  #L0811e8.  v0:= new `java.io.IOException`;
  #L0811ec.  v1:= "closed" @kind object;
  #L0811f0.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0811f6.  throw v0;
  #L0811f8.  v0:= v8.`a.a.e.j.a` @type ^`a.a.e.d$b` @kind object;
  #L0811fc.  call `a`(v0, v11) @signature `La/a/e/d$b;.a:(Ljava/util/List;)V` @kind virtual;
  #L081202.  v0:= v8.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L081206.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L08120c.  v2:= temp @kind wide;
  #L08120e.  v0:= v8.`a.a.e.j.f` @type ^`int`;
  #L081212.  v0:= (`long`) v0 @kind i2l;
  #L081214.  call temp:= `min`(v0, v2) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L08121a.  v0:= temp @kind wide;
  #L08121c.  v1:= (`int`) v0 @kind l2i;
  #L08121e.  v4:= 1I;
  #L081220.  v6:= (`long`) v1 @kind i2l;
  #L081222.  v0:= lcmp(v2, v6);
  #L081226.  if v0 != 0 then goto L081264;
  #L08122a.  v0:= 4I;
  #L08122c.  if v9 == 0 then goto L081236;
  #L081230.  v0:= v0 ^| 1;
  #L081234.  v0:= (`byte`) v0 @kind i2b;
  #L081236.  call `a`(v8, v10, v1, v4, v0) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L08123c.  v0:= v8.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081240.  v4:= v8.`a.a.e.j.e` @type ^`b.c` @kind object;
  #L081244.  v6:= (`long`) v1 @kind i2l;
  #L081246.  call `a_`(v0, v4, v6) @signature `Lb/d;.a_:(Lb/c;J)V` @kind interface;
  #L08124c.  v4:= (`long`) v1 @kind i2l;
  #L08124e.  v0:= lcmp(v2, v4);
  #L081252.  if v0 <= 0 then goto L081262;
  #L081256.  v0:= (`long`) v1 @kind i2l;
  #L081258.  v0:= v2 - v0 @kind long;
  #L08125c.  call `b`(v8, v10, v0) @signature `La/a/e/j;.b:(IJ)V` @kind direct;
  #L081262.  return @kind void;
  #L081264.  v0:= 0I;
  #L081266.  goto L08122c;
}
procedure `void` `b`(`a.a.e.j` v2 @kind this) @signature `La/a/e/j;.b:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L081278.  @monitorenter v2
  #Try_start0.  
  #L08127a.  v0:= v2.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L08127e.  if v0 == 0 then goto L081298;
  #L081282.  v0:= new `java.io.IOException`;
  #L081286.  v1:= "closed" @kind object;
  #L08128a.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L081290.  throw v0;
  #Try_end0.  
  #L081292.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L081294.  @monitorexit v2
  #L081296.  throw v0;
  #Try_start1.  
  #L081298.  v0:= v2.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L08129c.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L0812a2.  @monitorexit v2
  #L0812a4.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L081292;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L081292;
}
procedure `void` `b`(`a.a.e.j` v6 @kind this, `a.a.e.n` v7 @kind object) @signature `La/a/e/j;.b:(La/a/e/n;)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L0812cc.  v1:= 4I;
  #L0812ce.  v2:= 0I;
  #L0812d0.  @monitorenter v6
  #Try_start0.  
  #L0812d2.  v0:= v6.`a.a.e.j.g` @type ^`boolean` @kind boolean;
  #L0812d6.  if v0 == 0 then goto L0812f0;
  #L0812da.  v0:= new `java.io.IOException`;
  #L0812de.  v1:= "closed" @kind object;
  #L0812e2.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0812e8.  throw v0;
  #Try_end0.  
  #L0812ea.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0812ec.  @monitorexit v6
  #L0812ee.  throw v0;
  #Try_start1.  
  #L0812f0.  call temp:= `b`(v7) @signature `La/a/e/n;.b:()I` @kind virtual;
  #L0812f6.  v0:= temp;
  #L0812f8.  v0:= v0 * 6;
  #L0812fc.  v3:= 4I;
  #L0812fe.  v4:= 0I;
  #L081300.  v5:= 0I;
  #L081302.  call `a`(v6, v5, v0, v3, v4) @signature `La/a/e/j;.a:(IIBB)V` @kind virtual;
  #L081308.  v0:= 10I;
  #L08130c.  if v2 >= v0 then goto L081350;
  #L081310.  call temp:= `a`(v7, v2) @signature `La/a/e/n;.a:(I)Z` @kind virtual;
  #L081316.  v0:= temp;
  #L081318.  if v0 != 0 then goto L081322;
  #L08131c.  v2:= v2 + 1;
  #L081320.  goto L081308;
  #L081322.  if v2 != v1 then goto L081346;
  #L081326.  v0:= 3I;
  #L081328.  v3:= v6.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L08132c.  call temp:= `h`(v3, v0) @signature `Lb/d;.h:(I)Lb/d;` @kind interface;
  #L081332.  v0:= v6.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081336.  call temp:= `b`(v7, v2) @signature `La/a/e/n;.b:(I)I` @kind virtual;
  #L08133c.  v3:= temp;
  #L08133e.  call temp:= `g`(v0, v3) @signature `Lb/d;.g:(I)Lb/d;` @kind interface;
  #L081344.  goto L08131c;
  #L081346.  v0:= 7I;
  #L081348.  if v2 != v0 then goto L08135e;
  #L08134c.  v0:= v1;
  #L08134e.  goto L081328;
  #L081350.  v0:= v6.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L081354.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L08135a.  @monitorexit v6
  #L08135c.  return @kind void;
  #L08135e.  v0:= v2;
  #L081360.  goto L081328;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0812ea;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L0812ea;
}
procedure `int` `c`(`a.a.e.j` v1 @kind this) @signature `La/a/e/j;.c:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L081388.  v0:= v1.`a.a.e.j.f` @type ^`int`;
  #L08138c.  return v0;
}
procedure `void` `close`(`a.a.e.j` v1 @kind this) @signature `La/a/e/j;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L0813a0.  @monitorenter v1
  #L0813a2.  v0:= 1I;
  #Try_start0.  
  #L0813a4.  v1.`a.a.e.j.g` @type ^`boolean` := v0 @kind boolean;
  #L0813a8.  v0:= v1.`a.a.e.j.c` @type ^`b.d` @kind object;
  #L0813ac.  call `close`(v0) @signature `Lb/d;.close:()V` @kind interface;
  #Try_end0.  
  #L0813b2.  @monitorexit v1
  #L0813b4.  return @kind void;
  #L0813b6.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0813b8.  @monitorexit v1
  #L0813ba.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0813b6;
}
