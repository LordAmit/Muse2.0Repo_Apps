record `a.a.e.d$a` @kind class @AccessFlag FINAL {
  `a.a.e.c`[] `a.a.e.d$a.a` @AccessFlag ;
  `int` `a.a.e.d$a.b` @AccessFlag ;
  `int` `a.a.e.d$a.c` @AccessFlag ;
  `int` `a.a.e.d$a.d` @AccessFlag ;
  `java.util.List` `a.a.e.d$a.e` @AccessFlag PRIVATE_FINAL;
  `b.e` `a.a.e.d$a.f` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.e.d$a.g` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.e.d$a.h` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.e.d$a` v2 @kind this, `int` v3 , `int` v4 , `b.r` v5 @kind object) @signature `La/a/e/d$a;.<init>:(IILb/r;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07b320.  v1:= 0I;
  #L07b322.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07b328.  v0:= new `java.util.ArrayList`;
  #L07b32c.  call `<init>`(v0) @signature `Ljava/util/ArrayList;.<init>:()V` @kind direct;
  #L07b332.  v2.`a.a.e.d$a.e` @type ^`java.util.List` := v0 @kind object;
  #L07b336.  v0:= 8I;
  #L07b33a.  v0:= new `a.a.e.c`[v0];
  #L07b33e.  v2.`a.a.e.d$a.a` @type ^`a.a.e.c`[] := v0 @kind object;
  #L07b342.  v0:= v2.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b346.  v0:= length @variable v0;
  #L07b348.  v0:= v0 + -1;
  #L07b34c.  v2.`a.a.e.d$a.b` @type ^`int` := v0;
  #L07b350.  v2.`a.a.e.d$a.c` @type ^`int` := v1;
  #L07b354.  v2.`a.a.e.d$a.d` @type ^`int` := v1;
  #L07b358.  v2.`a.a.e.d$a.g` @type ^`int` := v3;
  #L07b35c.  v2.`a.a.e.d$a.h` @type ^`int` := v4;
  #L07b360.  call temp:= `a`(v5) @signature `Lb/k;.a:(Lb/r;)Lb/e;` @kind static;
  #L07b366.  v0:= temp @kind object;
  #L07b368.  v2.`a.a.e.d$a.f` @type ^`b.e` := v0 @kind object;
  #L07b36c.  return @kind void;
}
procedure `void` `<init>`(`a.a.e.d$a` v0 @kind this, `int` v1 , `b.r` v2 @kind object) @signature `La/a/e/d$a;.<init>:(ILb/r;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L07b380.  call `<init>`(v0, v1, v1, v2) @signature `La/a/e/d$a;.<init>:(IILb/r;)V` @kind direct;
  #L07b386.  return @kind void;
}
procedure `int` `a`(`a.a.e.d$a` v6 @kind this, `int` v7 ) @signature `La/a/e/d$a;.a:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07b398.  v1:= 0I;
  #L07b39a.  if v7 <= 0 then goto L07b41c;
  #L07b39e.  v0:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b3a2.  v0:= length @variable v0;
  #L07b3a4.  v0:= v0 + -1;
  #L07b3a8.  v2:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L07b3ac.  if v0 < v2 then goto L07b3ee;
  #L07b3b0.  if v7 <= 0 then goto L07b3ee;
  #L07b3b4.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b3b8.  v2:= v2[v0] @kind object;
  #L07b3bc.  v2:= v2.`a.a.e.c.i` @type ^`int`;
  #L07b3c0.  v7:= v7 - v2 @kind int;
  #L07b3c2.  v2:= v6.`a.a.e.d$a.d` @type ^`int`;
  #L07b3c6.  v3:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b3ca.  v3:= v3[v0] @kind object;
  #L07b3ce.  v3:= v3.`a.a.e.c.i` @type ^`int`;
  #L07b3d2.  v2:= v2 - v3 @kind int;
  #L07b3d4.  v6.`a.a.e.d$a.d` @type ^`int` := v2;
  #L07b3d8.  v2:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L07b3dc.  v2:= v2 + -1;
  #L07b3e0.  v6.`a.a.e.d$a.c` @type ^`int` := v2;
  #L07b3e4.  v1:= v1 + 1;
  #L07b3e8.  v0:= v0 + -1;
  #L07b3ec.  goto L07b3a8;
  #L07b3ee.  v0:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b3f2.  v2:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L07b3f6.  v2:= v2 + 1;
  #L07b3fa.  v3:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b3fe.  v4:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L07b402.  v4:= v4 + 1;
  #L07b406.  v4:= v4 + v1 @kind int;
  #L07b408.  v5:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L07b40c.  call `arraycopy`(v0, v2, v3, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L07b412.  v0:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L07b416.  v0:= v0 + v1 @kind int;
  #L07b418.  v6.`a.a.e.d$a.b` @type ^`int` := v0;
  #L07b41c.  return v1;
}
procedure `void` `a`(`a.a.e.d$a` v6 @kind this, `int` v7 , `a.a.e.c` v8 @kind object) @signature `La/a/e/d$a;.a:(ILa/a/e/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07b430.  v3:= -1I;
  #L07b432.  v0:= v6.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07b436.  call temp:= `add`(v0, v8) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07b43c.  v0:= v8.`a.a.e.c.i` @type ^`int`;
  #L07b440.  if v7 == v3 then goto L07b45a;
  #L07b444.  v1:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b448.  call temp:= `c`(v6, v7) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L07b44e.  v2:= temp;
  #L07b450.  v1:= v1[v2] @kind object;
  #L07b454.  v1:= v1.`a.a.e.c.i` @type ^`int`;
  #L07b458.  v0:= v0 - v1 @kind int;
  #L07b45a.  v1:= v6.`a.a.e.d$a.h` @type ^`int`;
  #L07b45e.  if v0 <= v1 then goto L07b46a;
  #L07b462.  call `e`(v6) @signature `La/a/e/d$a;.e:()V` @kind direct;
  #L07b468.  return @kind void;
  #L07b46a.  v1:= v6.`a.a.e.d$a.d` @type ^`int`;
  #L07b46e.  v1:= v1 + v0 @kind int;
  #L07b470.  v2:= v6.`a.a.e.d$a.h` @type ^`int`;
  #L07b474.  v1:= v1 - v2 @kind int;
  #L07b476.  call temp:= `a`(v6, v1) @signature `La/a/e/d$a;.a:(I)I` @kind direct;
  #L07b47c.  v1:= temp;
  #L07b47e.  if v7 != v3 then goto L07b4f8;
  #L07b482.  v1:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L07b486.  v1:= v1 + 1;
  #L07b48a.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b48e.  v2:= length @variable v2;
  #L07b490.  if v1 <= v2 then goto L07b4cc;
  #L07b494.  v1:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b498.  v1:= length @variable v1;
  #L07b49a.  v1:= v1 * 2;
  #L07b49e.  v1:= new `a.a.e.c`[v1];
  #L07b4a2.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b4a6.  v3:= 0I;
  #L07b4a8.  v4:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b4ac.  v4:= length @variable v4;
  #L07b4ae.  v5:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b4b2.  v5:= length @variable v5;
  #L07b4b4.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L07b4ba.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b4be.  v2:= length @variable v2;
  #L07b4c0.  v2:= v2 + -1;
  #L07b4c4.  v6.`a.a.e.d$a.b` @type ^`int` := v2;
  #L07b4c8.  v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] := v1 @kind object;
  #L07b4cc.  v1:= v6.`a.a.e.d$a.b` @type ^`int`;
  #L07b4d0.  v2:= v1 + -1;
  #L07b4d4.  v6.`a.a.e.d$a.b` @type ^`int` := v2;
  #L07b4d8.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b4dc.  v2[v1]:= v8 @kind object;
  #L07b4e0.  v1:= v6.`a.a.e.d$a.c` @type ^`int`;
  #L07b4e4.  v1:= v1 + 1;
  #L07b4e8.  v6.`a.a.e.d$a.c` @type ^`int` := v1;
  #L07b4ec.  v1:= v6.`a.a.e.d$a.d` @type ^`int`;
  #L07b4f0.  v0:= v0 + v1 @kind int;
  #L07b4f2.  v6.`a.a.e.d$a.d` @type ^`int` := v0;
  #L07b4f6.  goto L07b468;
  #L07b4f8.  call temp:= `c`(v6, v7) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L07b4fe.  v2:= temp;
  #L07b500.  v1:= v1 + v2 @kind int;
  #L07b502.  v1:= v1 + v7 @kind int;
  #L07b504.  v2:= v6.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b508.  v2[v1]:= v8 @kind object;
  #L07b50c.  goto L07b4ec;
}
procedure `void` `b`(`a.a.e.d$a` v3 @kind this, `int` v4 ) @signature `La/a/e/d$a;.b:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07b520.  call temp:= `g`(v3, v4) @signature `La/a/e/d$a;.g:(I)Z` @kind direct;
  #L07b526.  v0:= temp;
  #L07b528.  if v0 == 0 then goto L07b540;
  #L07b52c.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07b530.  v0:= v0[v4] @kind object;
  #L07b534.  v1:= v3.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07b538.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07b53e.  return @kind void;
  #L07b540.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07b544.  v0:= length @variable v0;
  #L07b546.  v0:= v4 - v0 @kind int;
  #L07b54a.  call temp:= `c`(v3, v0) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L07b550.  v0:= temp;
  #L07b552.  if v0 < 0 then goto L07b564;
  #L07b556.  v1:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b55a.  v1:= length @variable v1;
  #L07b55c.  v1:= v1 + -1;
  #L07b560.  if v0 <= v1 then goto L07b59a;
  #L07b564.  v0:= new `java.io.IOException`;
  #L07b568.  v1:= new `java.lang.StringBuilder`;
  #L07b56c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07b572.  v2:= "Header index too large " @kind object;
  #L07b576.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b57c.  v1:= temp @kind object;
  #L07b57e.  v2:= v4 + 1;
  #L07b582.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b588.  v1:= temp @kind object;
  #L07b58a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07b590.  v1:= temp @kind object;
  #L07b592.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b598.  throw v0;
  #L07b59a.  v1:= v3.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07b59e.  v2:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b5a2.  v0:= v2[v0] @kind object;
  #L07b5a6.  call temp:= `add`(v1, v0) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07b5ac.  goto L07b53e;
}
procedure `int` `c`(`a.a.e.d$a` v1 @kind this, `int` v2 ) @signature `La/a/e/d$a;.c:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L07b5c0.  v0:= v1.`a.a.e.d$a.b` @type ^`int`;
  #L07b5c4.  v0:= v0 + 1;
  #L07b5c8.  v0:= v0 + v2 @kind int;
  #L07b5ca.  return v0;
}
procedure `void` `d`(`a.a.e.d$a` v2 @kind this) @signature `La/a/e/d$a;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07b5dc.  v0:= v2.`a.a.e.d$a.h` @type ^`int`;
  #L07b5e0.  v1:= v2.`a.a.e.d$a.d` @type ^`int`;
  #L07b5e4.  if v0 >= v1 then goto L07b5f6;
  #L07b5e8.  v0:= v2.`a.a.e.d$a.h` @type ^`int`;
  #L07b5ec.  if v0 != 0 then goto L07b5f8;
  #L07b5f0.  call `e`(v2) @signature `La/a/e/d$a;.e:()V` @kind direct;
  #L07b5f6.  return @kind void;
  #L07b5f8.  v0:= v2.`a.a.e.d$a.d` @type ^`int`;
  #L07b5fc.  v1:= v2.`a.a.e.d$a.h` @type ^`int`;
  #L07b600.  v0:= v0 - v1 @kind int;
  #L07b602.  call temp:= `a`(v2, v0) @signature `La/a/e/d$a;.a:(I)I` @kind direct;
  #L07b608.  goto L07b5f6;
}
procedure `void` `d`(`a.a.e.d$a` v4 @kind this, `int` v5 ) @signature `La/a/e/d$a;.d:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07b61c.  call temp:= `f`(v4, v5) @signature `La/a/e/d$a;.f:(I)Lb/f;` @kind direct;
  #L07b622.  v0:= temp @kind object;
  #L07b624.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07b62a.  v1:= temp @kind object;
  #L07b62c.  v2:= v4.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07b630.  v3:= new `a.a.e.c`;
  #L07b634.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L07b63a.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07b640.  return @kind void;
}
procedure `void` `e`(`a.a.e.d$a` v3 @kind this) @signature `La/a/e/d$a;.e:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07b654.  v2:= 0I;
  #L07b656.  v0:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b65a.  v1:= 0I;
  #L07b65c.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L07b662.  v0:= v3.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b666.  v0:= length @variable v0;
  #L07b668.  v0:= v0 + -1;
  #L07b66c.  v3.`a.a.e.d$a.b` @type ^`int` := v0;
  #L07b670.  v3.`a.a.e.d$a.c` @type ^`int` := v2;
  #L07b674.  v3.`a.a.e.d$a.d` @type ^`int` := v2;
  #L07b678.  return @kind void;
}
procedure `void` `e`(`a.a.e.d$a` v4 @kind this, `int` v5 ) @signature `La/a/e/d$a;.e:(I)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07b68c.  call temp:= `f`(v4, v5) @signature `La/a/e/d$a;.f:(I)Lb/f;` @kind direct;
  #L07b692.  v0:= temp @kind object;
  #L07b694.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07b69a.  v1:= temp @kind object;
  #L07b69c.  v2:= -1I;
  #L07b69e.  v3:= new `a.a.e.c`;
  #L07b6a2.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L07b6a8.  call `a`(v4, v2, v3) @signature `La/a/e/d$a;.a:(ILa/a/e/c;)V` @kind direct;
  #L07b6ae.  return @kind void;
}
procedure `b.f` `f`(`a.a.e.d$a` v2 @kind this, `int` v3 ) @signature `La/a/e/d$a;.f:(I)Lb/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07b6c0.  call temp:= `g`(v2, v3) @signature `La/a/e/d$a;.g:(I)Z` @kind direct;
  #L07b6c6.  v0:= temp;
  #L07b6c8.  if v0 == 0 then goto L07b6da;
  #L07b6cc.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07b6d0.  v0:= v0[v3] @kind object;
  #L07b6d4.  v0:= v0.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L07b6d8.  return v0 @kind object;
  #L07b6da.  v0:= v2.`a.a.e.d$a.a` @type ^`a.a.e.c`[] @kind object;
  #L07b6de.  v1:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07b6e2.  v1:= length @variable v1;
  #L07b6e4.  v1:= v3 - v1 @kind int;
  #L07b6e8.  call temp:= `c`(v2, v1) @signature `La/a/e/d$a;.c:(I)I` @kind direct;
  #L07b6ee.  v1:= temp;
  #L07b6f0.  v0:= v0[v1] @kind object;
  #L07b6f4.  v0:= v0.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L07b6f8.  goto L07b6d8;
}
procedure `void` `f`(`a.a.e.d$a` v4 @kind this) @signature `La/a/e/d$a;.f:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07b70c.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07b712.  v0:= temp @kind object;
  #L07b714.  call temp:= `a`(v0) @signature `La/a/e/d;.a:(Lb/f;)Lb/f;` @kind static;
  #L07b71a.  v0:= temp @kind object;
  #L07b71c.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07b722.  v1:= temp @kind object;
  #L07b724.  v2:= v4.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07b728.  v3:= new `a.a.e.c`;
  #L07b72c.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L07b732.  call temp:= `add`(v2, v3) @signature `Ljava/util/List;.add:(Ljava/lang/Object;)Z` @kind interface;
  #L07b738.  return @kind void;
}
procedure `void` `g`(`a.a.e.d$a` v4 @kind this) @signature `La/a/e/d$a;.g:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07b74c.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07b752.  v0:= temp @kind object;
  #L07b754.  call temp:= `a`(v0) @signature `La/a/e/d;.a:(Lb/f;)Lb/f;` @kind static;
  #L07b75a.  v0:= temp @kind object;
  #L07b75c.  call temp:= `c`(v4) @signature `La/a/e/d$a;.c:()Lb/f;` @kind virtual;
  #L07b762.  v1:= temp @kind object;
  #L07b764.  v2:= -1I;
  #L07b766.  v3:= new `a.a.e.c`;
  #L07b76a.  call `<init>`(v3, v0, v1) @signature `La/a/e/c;.<init>:(Lb/f;Lb/f;)V` @kind direct;
  #L07b770.  call `a`(v4, v2, v3) @signature `La/a/e/d$a;.a:(ILa/a/e/c;)V` @kind direct;
  #L07b776.  return @kind void;
}
procedure `boolean` `g`(`a.a.e.d$a` v1 @kind this, `int` v2 ) @signature `La/a/e/d$a;.g:(I)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L07b788.  if v2 < 0 then goto L07b79e;
  #L07b78c.  v0:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07b790.  v0:= length @variable v0;
  #L07b792.  v0:= v0 + -1;
  #L07b796.  if v2 > v0 then goto L07b79e;
  #L07b79a.  v0:= 1I;
  #L07b79c.  return v0;
  #L07b79e.  v0:= 0I;
  #L07b7a0.  goto L07b79c;
}
procedure `int` `h`(`a.a.e.d$a` v1 @kind this) @signature `La/a/e/d$a;.h:()I` @AccessFlag PRIVATE {
    temp;
    v0;

  #L07b7b4.  v0:= v1.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L07b7b8.  call temp:= `h`(v0) @signature `Lb/e;.h:()B` @kind interface;
  #L07b7be.  v0:= temp;
  #L07b7c0.  v0:= v0 ^& 255;
  #L07b7c4.  return v0;
}
procedure `int` `a`(`a.a.e.d$a` v3 @kind this, `int` v4 , `int` v5 ) @signature `La/a/e/d$a;.a:(II)I` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L07b7d8.  v0:= v4 ^& v5 @kind int;
  #L07b7dc.  if v0 >= v5 then goto L07b7e2;
  #L07b7e0.  return v0;
  #L07b7e2.  v0:= 0I;
  #L07b7e4.  call temp:= `h`(v3) @signature `La/a/e/d$a;.h:()I` @kind direct;
  #L07b7ea.  v1:= temp;
  #L07b7ec.  v2:= v1 ^& 128;
  #L07b7f0.  if v2 == 0 then goto L07b802;
  #L07b7f4.  v1:= v1 ^& 127;
  #L07b7f8.  v1:= v1 ^< v0 @kind int;
  #L07b7fa.  v5:= v5 + v1 @kind int;
  #L07b7fc.  v0:= v0 + 7;
  #L07b800.  goto L07b7e4;
  #L07b802.  v0:= v1 ^< v0 @kind int;
  #L07b806.  v0:= v0 + v5 @kind int;
  #L07b808.  goto L07b7e0;
}
procedure `void` `a`(`a.a.e.d$a` v5 @kind this) @signature `La/a/e/d$a;.a:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L07b81c.  v4:= 128I;
  #L07b820.  v3:= 64I;
  #L07b824.  v0:= v5.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L07b828.  call temp:= `e`(v0) @signature `Lb/e;.e:()Z` @kind interface;
  #L07b82e.  v0:= temp;
  #L07b830.  if v0 != 0 then goto L07b940;
  #L07b834.  v0:= v5.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L07b838.  call temp:= `h`(v0) @signature `Lb/e;.h:()B` @kind interface;
  #L07b83e.  v0:= temp;
  #L07b840.  v0:= v0 ^& 255;
  #L07b844.  if v0 != v4 then goto L07b858;
  #L07b848.  v0:= new `java.io.IOException`;
  #L07b84c.  v1:= "index == 0" @kind object;
  #L07b850.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b856.  throw v0;
  #L07b858.  v1:= v0 ^& 128;
  #L07b85c.  if v1 != v4 then goto L07b878;
  #L07b860.  v1:= 127I;
  #L07b864.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L07b86a.  v0:= temp;
  #L07b86c.  v0:= v0 + -1;
  #L07b870.  call `b`(v5, v0) @signature `La/a/e/d$a;.b:(I)V` @kind direct;
  #L07b876.  goto L07b824;
  #L07b878.  if v0 != v3 then goto L07b884;
  #L07b87c.  call `g`(v5) @signature `La/a/e/d$a;.g:()V` @kind direct;
  #L07b882.  goto L07b824;
  #L07b884.  v1:= v0 ^& 64;
  #L07b888.  if v1 != v3 then goto L07b8a4;
  #L07b88c.  v1:= 63I;
  #L07b890.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L07b896.  v0:= temp;
  #L07b898.  v0:= v0 + -1;
  #L07b89c.  call `e`(v5, v0) @signature `La/a/e/d$a;.e:(I)V` @kind direct;
  #L07b8a2.  goto L07b824;
  #L07b8a4.  v1:= v0 ^& 32;
  #L07b8a8.  v2:= 32I;
  #L07b8ac.  if v1 != v2 then goto L07b912;
  #L07b8b0.  v1:= 31I;
  #L07b8b4.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L07b8ba.  v0:= temp;
  #L07b8bc.  v5.`a.a.e.d$a.h` @type ^`int` := v0;
  #L07b8c0.  v0:= v5.`a.a.e.d$a.h` @type ^`int`;
  #L07b8c4.  if v0 < 0 then goto L07b8d4;
  #L07b8c8.  v0:= v5.`a.a.e.d$a.h` @type ^`int`;
  #L07b8cc.  v1:= v5.`a.a.e.d$a.g` @type ^`int`;
  #L07b8d0.  if v0 <= v1 then goto L07b90a;
  #L07b8d4.  v0:= new `java.io.IOException`;
  #L07b8d8.  v1:= new `java.lang.StringBuilder`;
  #L07b8dc.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07b8e2.  v2:= "Invalid dynamic table size update " @kind object;
  #L07b8e6.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b8ec.  v1:= temp @kind object;
  #L07b8ee.  v2:= v5.`a.a.e.d$a.h` @type ^`int`;
  #L07b8f2.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L07b8f8.  v1:= temp @kind object;
  #L07b8fa.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07b900.  v1:= temp @kind object;
  #L07b902.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07b908.  throw v0;
  #L07b90a.  call `d`(v5) @signature `La/a/e/d$a;.d:()V` @kind direct;
  #L07b910.  goto L07b824;
  #L07b912.  v1:= 16I;
  #L07b916.  if v0 == v1 then goto L07b91e;
  #L07b91a.  if v0 != 0 then goto L07b926;
  #L07b91e.  call `f`(v5) @signature `La/a/e/d$a;.f:()V` @kind direct;
  #L07b924.  goto L07b824;
  #L07b926.  v1:= 15I;
  #L07b92a.  call temp:= `a`(v5, v0, v1) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L07b930.  v0:= temp;
  #L07b932.  v0:= v0 + -1;
  #L07b936.  call `d`(v5, v0) @signature `La/a/e/d$a;.d:(I)V` @kind direct;
  #L07b93c.  goto L07b824;
  #L07b940.  return @kind void;
}
procedure `java.util.List` `b`(`a.a.e.d$a` v2 @kind this) @signature `La/a/e/d$a;.b:()Ljava/util/List;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07b954.  v0:= new `java.util.ArrayList`;
  #L07b958.  v1:= v2.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07b95c.  call `<init>`(v0, v1) @signature `Ljava/util/ArrayList;.<init>:(Ljava/util/Collection;)V` @kind direct;
  #L07b962.  v1:= v2.`a.a.e.d$a.e` @type ^`java.util.List` @kind object;
  #L07b966.  call `clear`(v1) @signature `Ljava/util/List;.clear:()V` @kind interface;
  #L07b96c.  return v0 @kind object;
}
procedure `b.f` `c`(`a.a.e.d$a` v6 @kind this) @signature `La/a/e/d$a;.c:()Lb/f;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07b980.  call temp:= `h`(v6) @signature `La/a/e/d$a;.h:()I` @kind direct;
  #L07b986.  v1:= temp;
  #L07b988.  v0:= v1 ^& 128;
  #L07b98c.  v2:= 128I;
  #L07b990.  if v0 != v2 then goto L07b9ce;
  #L07b994.  v0:= 1I;
  #L07b996.  v2:= 127I;
  #L07b99a.  call temp:= `a`(v6, v1, v2) @signature `La/a/e/d$a;.a:(II)I` @kind virtual;
  #L07b9a0.  v1:= temp;
  #L07b9a2.  if v0 == 0 then goto L07b9d2;
  #L07b9a6.  call temp:= `a`() @signature `La/a/e/k;.a:()La/a/e/k;` @kind static;
  #L07b9ac.  v0:= temp @kind object;
  #L07b9ae.  v2:= v6.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L07b9b2.  v4:= (`long`) v1 @kind i2l;
  #L07b9b4.  call temp:= `f`(v2, v4) @signature `Lb/e;.f:(J)[B` @kind interface;
  #L07b9ba.  v1:= temp @kind object;
  #L07b9bc.  call temp:= `a`(v0, v1) @signature `La/a/e/k;.a:([B)[B` @kind virtual;
  #L07b9c2.  v0:= temp @kind object;
  #L07b9c4.  call temp:= `a`(v0) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #L07b9ca.  v0:= temp @kind object;
  #L07b9cc.  return v0 @kind object;
  #L07b9ce.  v0:= 0I;
  #L07b9d0.  goto L07b996;
  #L07b9d2.  v0:= v6.`a.a.e.d$a.f` @type ^`b.e` @kind object;
  #L07b9d6.  v2:= (`long`) v1 @kind i2l;
  #L07b9d8.  call temp:= `c`(v0, v2) @signature `Lb/e;.c:(J)Lb/f;` @kind interface;
  #L07b9de.  v0:= temp @kind object;
  #L07b9e0.  goto L07b9cc;
}
