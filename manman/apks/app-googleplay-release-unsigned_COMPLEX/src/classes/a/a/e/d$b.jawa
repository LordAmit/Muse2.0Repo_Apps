record `a.a.e.d$b` @kind class @AccessFlag FINAL {
  `int` `a.a.e.d$b.a` @AccessFlag ;
  `int` `a.a.e.d$b.b` @AccessFlag ;
  `a.a.e.c`[] `a.a.e.d$b.c` @AccessFlag ;
  `int` `a.a.e.d$b.d` @AccessFlag ;
  `int` `a.a.e.d$b.e` @AccessFlag ;
  `int` `a.a.e.d$b.f` @AccessFlag ;
  `b.c` `a.a.e.d$b.g` @AccessFlag PRIVATE_FINAL;
  `boolean` `a.a.e.d$b.h` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.e.d$b.i` @AccessFlag PRIVATE;
  `boolean` `a.a.e.d$b.j` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.e.d$b` v2 @kind this, `int` v3 , `boolean` v4 , `b.c` v5 @kind object) @signature `La/a/e/d$b;.<init>:(IZLb/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07b9f4.  v1:= 0I;
  #L07b9f6.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07b9fc.  v0:= 2147483647I;
  #L07ba02.  v2.`a.a.e.d$b.i` @type ^`int` := v0;
  #L07ba06.  v0:= 8I;
  #L07ba0a.  v0:= new `a.a.e.c`[v0];
  #L07ba0e.  v2.`a.a.e.d$b.c` @type ^`a.a.e.c`[] := v0 @kind object;
  #L07ba12.  v0:= v2.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07ba16.  v0:= length @variable v0;
  #L07ba18.  v0:= v0 + -1;
  #L07ba1c.  v2.`a.a.e.d$b.d` @type ^`int` := v0;
  #L07ba20.  v2.`a.a.e.d$b.e` @type ^`int` := v1;
  #L07ba24.  v2.`a.a.e.d$b.f` @type ^`int` := v1;
  #L07ba28.  v2.`a.a.e.d$b.a` @type ^`int` := v3;
  #L07ba2c.  v2.`a.a.e.d$b.b` @type ^`int` := v3;
  #L07ba30.  v2.`a.a.e.d$b.h` @type ^`boolean` := v4 @kind boolean;
  #L07ba34.  v2.`a.a.e.d$b.g` @type ^`b.c` := v5 @kind object;
  #L07ba38.  return @kind void;
}
procedure `void` `<init>`(`a.a.e.d$b` v2 @kind this, `b.c` v3 @kind object) @signature `La/a/e/d$b;.<init>:(Lb/c;)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07ba4c.  v0:= 4096I;
  #L07ba50.  v1:= 1I;
  #L07ba52.  call `<init>`(v2, v0, v1, v3) @signature `La/a/e/d$b;.<init>:(IZLb/c;)V` @kind direct;
  #L07ba58.  return @kind void;
}
procedure `void` `a`(`a.a.e.d$b` v3 @kind this) @signature `La/a/e/d$b;.a:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L07ba6c.  v2:= 0I;
  #L07ba6e.  v0:= v3.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07ba72.  v1:= 0I;
  #L07ba74.  call `fill`(v0, v1) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;Ljava/lang/Object;)V` @kind static;
  #L07ba7a.  v0:= v3.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07ba7e.  v0:= length @variable v0;
  #L07ba80.  v0:= v0 + -1;
  #L07ba84.  v3.`a.a.e.d$b.d` @type ^`int` := v0;
  #L07ba88.  v3.`a.a.e.d$b.e` @type ^`int` := v2;
  #L07ba8c.  v3.`a.a.e.d$b.f` @type ^`int` := v2;
  #L07ba90.  return @kind void;
}
procedure `void` `a`(`a.a.e.d$b` v6 @kind this, `a.a.e.c` v7 @kind object) @signature `La/a/e/d$b;.a:(La/a/e/c;)V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07baa4.  v0:= v7.`a.a.e.c.i` @type ^`int`;
  #L07baa8.  v1:= v6.`a.a.e.d$b.b` @type ^`int`;
  #L07baac.  if v0 <= v1 then goto L07bab8;
  #L07bab0.  call `a`(v6) @signature `La/a/e/d$b;.a:()V` @kind direct;
  #L07bab6.  return @kind void;
  #L07bab8.  v1:= v6.`a.a.e.d$b.f` @type ^`int`;
  #L07babc.  v1:= v1 + v0 @kind int;
  #L07babe.  v2:= v6.`a.a.e.d$b.b` @type ^`int`;
  #L07bac2.  v1:= v1 - v2 @kind int;
  #L07bac4.  call temp:= `b`(v6, v1) @signature `La/a/e/d$b;.b:(I)I` @kind direct;
  #L07baca.  v1:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L07bace.  v1:= v1 + 1;
  #L07bad2.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07bad6.  v2:= length @variable v2;
  #L07bad8.  if v1 <= v2 then goto L07bb14;
  #L07badc.  v1:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07bae0.  v1:= length @variable v1;
  #L07bae2.  v1:= v1 * 2;
  #L07bae6.  v1:= new `a.a.e.c`[v1];
  #L07baea.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07baee.  v3:= 0I;
  #L07baf0.  v4:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07baf4.  v4:= length @variable v4;
  #L07baf6.  v5:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07bafa.  v5:= length @variable v5;
  #L07bafc.  call `arraycopy`(v2, v3, v1, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L07bb02.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07bb06.  v2:= length @variable v2;
  #L07bb08.  v2:= v2 + -1;
  #L07bb0c.  v6.`a.a.e.d$b.d` @type ^`int` := v2;
  #L07bb10.  v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] := v1 @kind object;
  #L07bb14.  v1:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07bb18.  v2:= v1 + -1;
  #L07bb1c.  v6.`a.a.e.d$b.d` @type ^`int` := v2;
  #L07bb20.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07bb24.  v2[v1]:= v7 @kind object;
  #L07bb28.  v1:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L07bb2c.  v1:= v1 + 1;
  #L07bb30.  v6.`a.a.e.d$b.e` @type ^`int` := v1;
  #L07bb34.  v1:= v6.`a.a.e.d$b.f` @type ^`int`;
  #L07bb38.  v0:= v0 + v1 @kind int;
  #L07bb3a.  v6.`a.a.e.d$b.f` @type ^`int` := v0;
  #L07bb3e.  goto L07bab6;
}
procedure `int` `b`(`a.a.e.d$b` v6 @kind this, `int` v7 ) @signature `La/a/e/d$b;.b:(I)I` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L07bb50.  v1:= 0I;
  #L07bb52.  if v7 <= 0 then goto L07bbf2;
  #L07bb56.  v0:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07bb5a.  v0:= length @variable v0;
  #L07bb5c.  v0:= v0 + -1;
  #L07bb60.  v2:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07bb64.  if v0 < v2 then goto L07bba6;
  #L07bb68.  if v7 <= 0 then goto L07bba6;
  #L07bb6c.  v2:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07bb70.  v2:= v2[v0] @kind object;
  #L07bb74.  v2:= v2.`a.a.e.c.i` @type ^`int`;
  #L07bb78.  v7:= v7 - v2 @kind int;
  #L07bb7a.  v2:= v6.`a.a.e.d$b.f` @type ^`int`;
  #L07bb7e.  v3:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07bb82.  v3:= v3[v0] @kind object;
  #L07bb86.  v3:= v3.`a.a.e.c.i` @type ^`int`;
  #L07bb8a.  v2:= v2 - v3 @kind int;
  #L07bb8c.  v6.`a.a.e.d$b.f` @type ^`int` := v2;
  #L07bb90.  v2:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L07bb94.  v2:= v2 + -1;
  #L07bb98.  v6.`a.a.e.d$b.e` @type ^`int` := v2;
  #L07bb9c.  v1:= v1 + 1;
  #L07bba0.  v0:= v0 + -1;
  #L07bba4.  goto L07bb60;
  #L07bba6.  v0:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07bbaa.  v2:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07bbae.  v2:= v2 + 1;
  #L07bbb2.  v3:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07bbb6.  v4:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07bbba.  v4:= v4 + 1;
  #L07bbbe.  v4:= v4 + v1 @kind int;
  #L07bbc0.  v5:= v6.`a.a.e.d$b.e` @type ^`int`;
  #L07bbc4.  call `arraycopy`(v0, v2, v3, v4, v5) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L07bbca.  v0:= v6.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07bbce.  v2:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07bbd2.  v2:= v2 + 1;
  #L07bbd6.  v3:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07bbda.  v3:= v3 + 1;
  #L07bbde.  v3:= v3 + v1 @kind int;
  #L07bbe0.  v4:= 0I;
  #L07bbe2.  call `fill`(v0, v2, v3, v4) @signature `Ljava/util/Arrays;.fill:([Ljava/lang/Object;IILjava/lang/Object;)V` @kind static;
  #L07bbe8.  v0:= v6.`a.a.e.d$b.d` @type ^`int`;
  #L07bbec.  v0:= v0 + v1 @kind int;
  #L07bbee.  v6.`a.a.e.d$b.d` @type ^`int` := v0;
  #L07bbf2.  return v1;
}
procedure `void` `b`(`a.a.e.d$b` v2 @kind this) @signature `La/a/e/d$b;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07bc04.  v0:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L07bc08.  v1:= v2.`a.a.e.d$b.f` @type ^`int`;
  #L07bc0c.  if v0 >= v1 then goto L07bc1e;
  #L07bc10.  v0:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L07bc14.  if v0 != 0 then goto L07bc20;
  #L07bc18.  call `a`(v2) @signature `La/a/e/d$b;.a:()V` @kind direct;
  #L07bc1e.  return @kind void;
  #L07bc20.  v0:= v2.`a.a.e.d$b.f` @type ^`int`;
  #L07bc24.  v1:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L07bc28.  v0:= v0 - v1 @kind int;
  #L07bc2a.  call temp:= `b`(v2, v0) @signature `La/a/e/d$b;.b:(I)I` @kind direct;
  #L07bc30.  goto L07bc1e;
}
procedure `void` `a`(`a.a.e.d$b` v2 @kind this, `int` v3 ) @signature `La/a/e/d$b;.a:(I)V` @AccessFlag  {
    temp;
    v0;
    v1;

  #L07bc44.  v2.`a.a.e.d$b.a` @type ^`int` := v3;
  #L07bc48.  v0:= 16384I;
  #L07bc4c.  call temp:= `min`(v3, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L07bc52.  v0:= temp;
  #L07bc54.  v1:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L07bc58.  if v1 != v0 then goto L07bc5e;
  #L07bc5c.  return @kind void;
  #L07bc5e.  v1:= v2.`a.a.e.d$b.b` @type ^`int`;
  #L07bc62.  if v0 >= v1 then goto L07bc76;
  #L07bc66.  v1:= v2.`a.a.e.d$b.i` @type ^`int`;
  #L07bc6a.  call temp:= `min`(v1, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L07bc70.  v1:= temp;
  #L07bc72.  v2.`a.a.e.d$b.i` @type ^`int` := v1;
  #L07bc76.  v1:= 1I;
  #L07bc78.  v2.`a.a.e.d$b.j` @type ^`boolean` := v1 @kind boolean;
  #L07bc7c.  v2.`a.a.e.d$b.b` @type ^`int` := v0;
  #L07bc80.  call `b`(v2) @signature `La/a/e/d$b;.b:()V` @kind direct;
  #L07bc86.  goto L07bc5c;
}
procedure `void` `a`(`a.a.e.d$b` v3 @kind this, `int` v4 , `int` v5 , `int` v6 ) @signature `La/a/e/d$b;.a:(III)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L07bc98.  if v4 >= v5 then goto L07bcac;
  #L07bc9c.  v0:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07bca0.  v1:= v6 ^| v4 @kind int;
  #L07bca4.  call temp:= `b`(v0, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L07bcaa.  return @kind void;
  #L07bcac.  v0:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07bcb0.  v1:= v6 ^| v5 @kind int;
  #L07bcb4.  call temp:= `b`(v0, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L07bcba.  v0:= v4 - v5 @kind int;
  #L07bcbe.  v1:= 128I;
  #L07bcc2.  if v0 < v1 then goto L07bcde;
  #L07bcc6.  v1:= v0 ^& 127;
  #L07bcca.  v2:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07bcce.  v1:= v1 ^| 128;
  #L07bcd2.  call temp:= `b`(v2, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L07bcd8.  v0:= v0 ^>> 7;
  #L07bcdc.  goto L07bcbe;
  #L07bcde.  v1:= v3.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07bce2.  call temp:= `b`(v1, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L07bce8.  goto L07bcaa;
}
procedure `void` `a`(`a.a.e.d$b` v4 @kind this, `b.f` v5 @kind object) @signature `La/a/e/d$b;.a:(Lb/f;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07bcfc.  v3:= 127I;
  #L07bd00.  v0:= v4.`a.a.e.d$b.h` @type ^`boolean` @kind boolean;
  #L07bd04.  if v0 == 0 then goto L07bd62;
  #L07bd08.  call temp:= `a`() @signature `La/a/e/k;.a:()La/a/e/k;` @kind static;
  #L07bd0e.  v0:= temp @kind object;
  #L07bd10.  call temp:= `a`(v0, v5) @signature `La/a/e/k;.a:(Lb/f;)I` @kind virtual;
  #L07bd16.  v0:= temp;
  #L07bd18.  call temp:= `g`(v5) @signature `Lb/f;.g:()I` @kind virtual;
  #L07bd1e.  v1:= temp;
  #L07bd20.  if v0 >= v1 then goto L07bd62;
  #L07bd24.  v0:= new `b.c`;
  #L07bd28.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L07bd2e.  call temp:= `a`() @signature `La/a/e/k;.a:()La/a/e/k;` @kind static;
  #L07bd34.  v1:= temp @kind object;
  #L07bd36.  call `a`(v1, v5, v0) @signature `La/a/e/k;.a:(Lb/f;Lb/d;)V` @kind virtual;
  #L07bd3c.  call temp:= `n`(v0) @signature `Lb/c;.n:()Lb/f;` @kind virtual;
  #L07bd42.  v0:= temp @kind object;
  #L07bd44.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L07bd4a.  v1:= temp;
  #L07bd4c.  v2:= 128I;
  #L07bd50.  call `a`(v4, v1, v3, v2) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07bd56.  v1:= v4.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07bd5a.  call temp:= `a`(v1, v0) @signature `Lb/c;.a:(Lb/f;)Lb/c;` @kind virtual;
  #L07bd60.  return @kind void;
  #L07bd62.  call temp:= `g`(v5) @signature `Lb/f;.g:()I` @kind virtual;
  #L07bd68.  v0:= temp;
  #L07bd6a.  v1:= 0I;
  #L07bd6c.  call `a`(v4, v0, v3, v1) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07bd72.  v0:= v4.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07bd76.  call temp:= `a`(v0, v5) @signature `Lb/c;.a:(Lb/f;)Lb/c;` @kind virtual;
  #L07bd7c.  goto L07bd60;
}
procedure `void` `a`(`a.a.e.d$b` v13 @kind this, `java.util.List` v14 @kind object) @signature `La/a/e/d$b;.a:(Ljava/util/List;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;

  #L07bd90.  v12:= 64I;
  #L07bd94.  v3:= 32I;
  #L07bd98.  v2:= 31I;
  #L07bd9c.  v6:= 0I;
  #L07bd9e.  v4:= -1I;
  #L07bda0.  v0:= v13.`a.a.e.d$b.j` @type ^`boolean` @kind boolean;
  #L07bda4.  if v0 == 0 then goto L07bdd6;
  #L07bda8.  v0:= v13.`a.a.e.d$b.i` @type ^`int`;
  #L07bdac.  v1:= v13.`a.a.e.d$b.b` @type ^`int`;
  #L07bdb0.  if v0 >= v1 then goto L07bdbe;
  #L07bdb4.  v0:= v13.`a.a.e.d$b.i` @type ^`int`;
  #L07bdb8.  call `a`(v13, v0, v2, v3) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07bdbe.  v13.`a.a.e.d$b.j` @type ^`boolean` := v6 @kind boolean;
  #L07bdc2.  v0:= 2147483647I;
  #L07bdc8.  v13.`a.a.e.d$b.i` @type ^`int` := v0;
  #L07bdcc.  v0:= v13.`a.a.e.d$b.b` @type ^`int`;
  #L07bdd0.  call `a`(v13, v0, v2, v3) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07bdd6.  call temp:= `size`(v14) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L07bddc.  v7:= temp;
  #L07bdde.  v5:= v6;
  #L07bde0.  if v5 >= v7 then goto L07bf60;
  #L07bde4.  call temp:= `get`(v14, v5) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L07bdea.  v0:= temp @kind object;
  #L07bdec.  v0:= (`a.a.e.c`) v0 @kind object;
  #L07bdf0.  v1:= v0.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L07bdf4.  call temp:= `f`(v1) @signature `Lb/f;.f:()Lb/f;` @kind virtual;
  #L07bdfa.  v8:= temp @kind object;
  #L07bdfc.  v9:= v0.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L07be00.  v1:= `@@a.a.e.d.b` @type ^`java.util.Map` @kind object;
  #L07be04.  call temp:= `get`(v1, v8) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L07be0a.  v1:= temp @kind object;
  #L07be0c.  v1:= (`java.lang.Integer`) v1 @kind object;
  #L07be10.  if v1 == 0 then goto L07bf68;
  #L07be14.  call temp:= `intValue`(v1) @signature `Ljava/lang/Integer;.intValue:()I` @kind virtual;
  #L07be1a.  v1:= temp;
  #L07be1c.  v1:= v1 + 1;
  #L07be20.  v2:= 1I;
  #L07be22.  if v1 <= v2 then goto L07bf62;
  #L07be26.  v2:= 8I;
  #L07be2a.  if v1 >= v2 then goto L07bf62;
  #L07be2e.  v2:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07be32.  v3:= v1 + -1;
  #L07be36.  v2:= v2[v3] @kind object;
  #L07be3a.  v2:= v2.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L07be3e.  call temp:= `a`(v2, v9) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07be44.  v2:= temp;
  #L07be46.  if v2 == 0 then goto L07bebc;
  #L07be4a.  v2:= v1;
  #L07be4c.  if v2 != v4 then goto L07bea2;
  #L07be50.  v3:= v13.`a.a.e.d$b.d` @type ^`int`;
  #L07be54.  v3:= v3 + 1;
  #L07be58.  v10:= v13.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07be5c.  v10:= length @variable v10;
  #L07be5e.  if v3 >= v10 then goto L07bea2;
  #L07be62.  v11:= v13.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07be66.  v11:= v11[v3] @kind object;
  #L07be6a.  v11:= v11.`a.a.e.c.g` @type ^`b.f` @kind object;
  #L07be6e.  call temp:= `a`(v11, v8) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07be74.  v11:= temp;
  #L07be76.  if v11 == 0 then goto L07beee;
  #L07be7a.  v11:= v13.`a.a.e.d$b.c` @type ^`a.a.e.c`[] @kind object;
  #L07be7e.  v11:= v11[v3] @kind object;
  #L07be82.  v11:= v11.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L07be86.  call temp:= `a`(v11, v9) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07be8c.  v11:= temp;
  #L07be8e.  if v11 == 0 then goto L07beda;
  #L07be92.  v2:= v13.`a.a.e.d$b.d` @type ^`int`;
  #L07be96.  v2:= v3 - v2 @kind int;
  #L07be9a.  v3:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07be9e.  v3:= length @variable v3;
  #L07bea0.  v2:= v2 + v3 @kind int;
  #L07bea2.  if v2 == v4 then goto L07bef4;
  #L07bea6.  v0:= 127I;
  #L07beaa.  v1:= 128I;
  #L07beae.  call `a`(v13, v2, v0, v1) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07beb4.  v0:= v5 + 1;
  #L07beb8.  v5:= v0;
  #L07beba.  goto L07bde0;
  #L07bebc.  v2:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07bec0.  v2:= v2[v1] @kind object;
  #L07bec4.  v2:= v2.`a.a.e.c.h` @type ^`b.f` @kind object;
  #L07bec8.  call temp:= `a`(v2, v9) @signature `La/a/c;.a:(Ljava/lang/Object;Ljava/lang/Object;)Z` @kind static;
  #L07bece.  v2:= temp;
  #L07bed0.  if v2 == 0 then goto L07bf62;
  #L07bed4.  v2:= v1 + 1;
  #L07bed8.  goto L07be4c;
  #L07beda.  if v1 != v4 then goto L07beee;
  #L07bede.  v1:= v13.`a.a.e.d$b.d` @type ^`int`;
  #L07bee2.  v1:= v3 - v1 @kind int;
  #L07bee6.  v11:= `@@a.a.e.d.a` @type ^`a.a.e.c`[] @kind object;
  #L07beea.  v11:= length @variable v11;
  #L07beec.  v1:= v1 + v11 @kind int;
  #L07beee.  v3:= v3 + 1;
  #L07bef2.  goto L07be5e;
  #L07bef4.  if v1 != v4 then goto L07bf16;
  #L07bef8.  v1:= v13.`a.a.e.d$b.g` @type ^`b.c` @kind object;
  #L07befc.  call temp:= `b`(v1, v12) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L07bf02.  call `a`(v13, v8) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L07bf08.  call `a`(v13, v9) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L07bf0e.  call `a`(v13, v0) @signature `La/a/e/d$b;.a:(La/a/e/c;)V` @kind direct;
  #L07bf14.  goto L07beb4;
  #L07bf16.  v2:= `@@a.a.e.c.a` @type ^`b.f` @kind object;
  #L07bf1a.  call temp:= `a`(v8, v2) @signature `Lb/f;.a:(Lb/f;)Z` @kind virtual;
  #L07bf20.  v2:= temp;
  #L07bf22.  if v2 == 0 then goto L07bf48;
  #L07bf26.  v2:= `@@a.a.e.c.f` @type ^`b.f` @kind object;
  #L07bf2a.  call temp:= `equals`(v2, v8) @signature `Lb/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L07bf30.  v2:= temp;
  #L07bf32.  if v2 != 0 then goto L07bf48;
  #L07bf36.  v0:= 15I;
  #L07bf3a.  call `a`(v13, v1, v0, v6) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07bf40.  call `a`(v13, v9) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L07bf46.  goto L07beb4;
  #L07bf48.  v2:= 63I;
  #L07bf4c.  call `a`(v13, v1, v2, v12) @signature `La/a/e/d$b;.a:(III)V` @kind virtual;
  #L07bf52.  call `a`(v13, v9) @signature `La/a/e/d$b;.a:(Lb/f;)V` @kind virtual;
  #L07bf58.  call `a`(v13, v0) @signature `La/a/e/d$b;.a:(La/a/e/c;)V` @kind direct;
  #L07bf5e.  goto L07beb4;
  #L07bf60.  return @kind void;
  #L07bf62.  v2:= v4;
  #L07bf64.  goto L07be4c;
  #L07bf68.  v1:= v4;
  #L07bf6a.  v2:= v4;
  #L07bf6c.  goto L07be4c;
}
