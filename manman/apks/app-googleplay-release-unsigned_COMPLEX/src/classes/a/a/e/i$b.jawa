record `a.a.e.i$b` @kind class @AccessFlag FINAL extends `b.r` @kind interface {
  `boolean` `a.a.e.i$b.a` @AccessFlag ;
  `boolean` `a.a.e.i$b.b` @AccessFlag ;
  `a.a.e.i` `a.a.e.i$b.d` @AccessFlag FINAL_SYNTHETIC;
  `b.c` `a.a.e.i$b.e` @AccessFlag PRIVATE_FINAL;
  `b.c` `a.a.e.i$b.f` @AccessFlag PRIVATE_FINAL;
  `long` `a.a.e.i$b.g` @AccessFlag PRIVATE_FINAL;
}
global `boolean` `@@a.a.e.i$b.c` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/e/i$b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L07f8b8.  v0:= constclass @type ^`a.a.e.i` @kind object;
  #L07f8bc.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L07f8c2.  v0:= temp;
  #L07f8c4.  if v0 != 0 then goto L07f8d0;
  #L07f8c8.  v0:= 1I;
  #L07f8ca.  `@@a.a.e.i$b.c` @type ^`boolean` := v0 @kind boolean;
  #L07f8ce.  return @kind void;
  #L07f8d0.  v0:= 0I;
  #L07f8d2.  goto L07f8ca;
}
procedure `void` `<init>`(`a.a.e.i$b` v2 @kind this, `a.a.e.i` v3 @kind object, `long` v4 ) @signature `La/a/e/i$b;.<init>:(La/a/e/i;J)V` @AccessFlag CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L07f8e4.  v2.`a.a.e.i$b.d` @type ^`a.a.e.i` := v3 @kind object;
  #L07f8e8.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L07f8ee.  v0:= new `b.c`;
  #L07f8f2.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L07f8f8.  v2.`a.a.e.i$b.e` @type ^`b.c` := v0 @kind object;
  #L07f8fc.  v0:= new `b.c`;
  #L07f900.  call `<init>`(v0) @signature `Lb/c;.<init>:()V` @kind direct;
  #L07f906.  v2.`a.a.e.i$b.f` @type ^`b.c` := v0 @kind object;
  #L07f90a.  v2.`a.a.e.i$b.g` @type ^`long` := v4 @kind wide;
  #L07f90e.  return @kind void;
}
procedure `void` `b`(`a.a.e.i$b` v4 @kind this) @signature `La/a/e/i$b;.b:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L07f920.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f924.  v0:= v0.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L07f928.  call `c`(v0) @signature `La/a/e/i$c;.c:()V` @kind virtual;
  #Try_start0.  
  #L07f92e.  v0:= v4.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07f932.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07f938.  v0:= temp @kind wide;
  #L07f93a.  v2:= 0L;
  #L07f93e.  v0:= lcmp(v0, v2);
  #L07f942.  if v0 != 0 then goto L07f980;
  #L07f946.  v0:= v4.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L07f94a.  if v0 != 0 then goto L07f980;
  #L07f94e.  v0:= v4.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L07f952.  if v0 != 0 then goto L07f980;
  #L07f956.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f95a.  v0:= v0.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L07f95e.  if v0 != 0 then goto L07f980;
  #L07f962.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f966.  call `l`(v0) @signature `La/a/e/i;.l:()V` @kind virtual;
  #Try_end0.  
  #L07f96c.  goto L07f92e;
  #L07f96e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07f970.  v1:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f974.  v1:= v1.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L07f978.  call `b`(v1) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L07f97e.  throw v0;
  #L07f980.  v0:= v4.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f984.  v0:= v0.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L07f988.  call `b`(v0) @signature `La/a/e/i$c;.b:()V` @kind virtual;
  #L07f98e.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07f96e;
}
procedure `void` `c`(`a.a.e.i$b` v2 @kind this) @signature `La/a/e/i$b;.c:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L07f9ac.  v0:= v2.`a.a.e.i$b.a` @type ^`boolean` @kind boolean;
  #L07f9b0.  if v0 == 0 then goto L07f9c4;
  #L07f9b4.  v0:= new `java.io.IOException`;
  #L07f9b8.  v1:= "stream closed" @kind object;
  #L07f9bc.  call `<init>`(v0, v1) @signature `Ljava/io/IOException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07f9c2.  throw v0;
  #L07f9c4.  v0:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f9c8.  v0:= v0.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L07f9cc.  if v0 == 0 then goto L07f9e4;
  #L07f9d0.  v0:= new `a.a.e.o`;
  #L07f9d4.  v1:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07f9d8.  v1:= v1.`a.a.e.i.h` @type ^`a.a.e.b` @kind object;
  #L07f9dc.  call `<init>`(v0, v1) @signature `La/a/e/o;.<init>:(La/a/e/b;)V` @kind direct;
  #L07f9e2.  throw v0;
  #L07f9e4.  return @kind void;
}
procedure `long` `a`(`a.a.e.i$b` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `La/a/e/i$b;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L07f9f8.  v4:= 0L;
  #L07f9fc.  v0:= lcmp(v10, v4);
  #L07fa00.  if v0 >= 0 then goto L07fa36;
  #L07fa04.  v0:= new `java.lang.IllegalArgumentException`;
  #L07fa08.  v1:= new `java.lang.StringBuilder`;
  #L07fa0c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L07fa12.  v2:= "byteCount < 0: " @kind object;
  #L07fa16.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07fa1c.  v1:= temp @kind object;
  #L07fa1e.  call temp:= `append`(v1, v10) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L07fa24.  v1:= temp @kind object;
  #L07fa26.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07fa2c.  v1:= temp @kind object;
  #L07fa2e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L07fa34.  throw v0;
  #L07fa36.  v2:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fa3a.  @monitorenter v2
  #Try_start0.  
  #L07fa3c.  call `b`(v8) @signature `La/a/e/i$b;.b:()V` @kind direct;
  #L07fa42.  call `c`(v8) @signature `La/a/e/i$b;.c:()V` @kind direct;
  #L07fa48.  v0:= v8.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07fa4c.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07fa52.  v0:= temp @kind wide;
  #L07fa54.  v0:= lcmp(v0, v4);
  #L07fa58.  if v0 != 0 then goto L07fa64;
  #L07fa5c.  v0:= -1L;
  #L07fa60.  @monitorexit v2
  #L07fa62.  return v0 @kind wide;
  #L07fa64.  v0:= v8.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07fa68.  v1:= v8.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07fa6c.  call temp:= `b`(v1) @signature `Lb/c;.b:()J` @kind virtual;
  #L07fa72.  v4:= temp @kind wide;
  #L07fa74.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L07fa7a.  v4:= temp @kind wide;
  #L07fa7c.  call temp:= `a`(v0, v9, v4) @signature `Lb/c;.a:(Lb/c;J)J` @kind virtual;
  #L07fa82.  v0:= temp @kind wide;
  #L07fa84.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fa88.  v4:= v3.`a.a.e.i.a` @type ^`long` @kind wide;
  #L07fa8c.  v4:= v4 + v0 @kind long;
  #L07fa8e.  v3.`a.a.e.i.a` @type ^`long` := v4 @kind wide;
  #L07fa92.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fa96.  v4:= v3.`a.a.e.i.a` @type ^`long` @kind wide;
  #L07fa9a.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fa9e.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07faa2.  v3:= v3.`a.a.e.g.l` @type ^`a.a.e.n` @kind object;
  #L07faa6.  call temp:= `d`(v3) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L07faac.  v3:= temp;
  #L07faae.  v3:= v3 / 2;
  #L07fab2.  v6:= (`long`) v3 @kind i2l;
  #L07fab4.  v3:= lcmp(v4, v6);
  #L07fab8.  if v3 < 0 then goto L07fae6;
  #L07fabc.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fac0.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07fac4.  v4:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fac8.  v4:= v4.`a.a.e.i.c` @type ^`int`;
  #L07facc.  v5:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fad0.  v6:= v5.`a.a.e.i.a` @type ^`long` @kind wide;
  #L07fad4.  call `a`(v3, v4, v6) @signature `La/a/e/g;.a:(IJ)V` @kind virtual;
  #L07fada.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fade.  v4:= 0L;
  #L07fae2.  v3.`a.a.e.i.a` @type ^`long` := v4 @kind wide;
  #L07fae6.  @monitorexit v2
  #Try_end0.  
  #L07fae8.  v2:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07faec.  v2:= v2.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07faf0.  @monitorenter v2
  #Try_start1.  
  #L07faf2.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07faf6.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07fafa.  v4:= v3.`a.a.e.g.j` @type ^`long` @kind wide;
  #L07fafe.  v4:= v4 + v0 @kind long;
  #L07fb00.  v3.`a.a.e.g.j` @type ^`long` := v4 @kind wide;
  #L07fb04.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fb08.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07fb0c.  v4:= v3.`a.a.e.g.j` @type ^`long` @kind wide;
  #L07fb10.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fb14.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07fb18.  v3:= v3.`a.a.e.g.l` @type ^`a.a.e.n` @kind object;
  #L07fb1c.  call temp:= `d`(v3) @signature `La/a/e/n;.d:()I` @kind virtual;
  #L07fb22.  v3:= temp;
  #L07fb24.  v3:= v3 / 2;
  #L07fb28.  v6:= (`long`) v3 @kind i2l;
  #L07fb2a.  v3:= lcmp(v4, v6);
  #L07fb2e.  if v3 < 0 then goto L07fb5e;
  #L07fb32.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fb36.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07fb3a.  v4:= 0I;
  #L07fb3c.  v5:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fb40.  v5:= v5.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07fb44.  v6:= v5.`a.a.e.g.j` @type ^`long` @kind wide;
  #L07fb48.  call `a`(v3, v4, v6) @signature `La/a/e/g;.a:(IJ)V` @kind virtual;
  #L07fb4e.  v3:= v8.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fb52.  v3:= v3.`a.a.e.i.d` @type ^`a.a.e.g` @kind object;
  #L07fb56.  v4:= 0L;
  #L07fb5a.  v3.`a.a.e.g.j` @type ^`long` := v4 @kind wide;
  #L07fb5e.  @monitorexit v2
  #L07fb60.  goto L07fa62;
  #L07fb62.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L07fb64.  @monitorexit v2
  #Try_end1.  
  #L07fb66.  throw v0;
  #L07fb68.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start2.  
  #L07fb6a.  @monitorexit v2
  #Try_end2.  
  #L07fb6c.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07fb68;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07fb62;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L07fb68;
}
procedure `b.s` `a`(`a.a.e.i$b` v1 @kind this) @signature `La/a/e/i$b;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L07fba0.  v0:= v1.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fba4.  v0:= v0.`a.a.e.i.f` @type ^`a.a.e.i$c` @kind object;
  #L07fba8.  return v0 @kind object;
}
procedure `void` `a`(`a.a.e.i$b` v12 @kind this, `b.e` v13 @kind object, `long` v14 ) @signature `La/a/e/i$b;.a:(Lb/e;J)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;

  #L07fbbc.  v10:= 0L;
  #L07fbc0.  v1:= 1I;
  #L07fbc2.  v2:= 0I;
  #L07fbc4.  v0:= `@@a.a.e.i$b.c` @type ^`boolean` @kind boolean;
  #L07fbc8.  if v0 != 0 then goto L07fc24;
  #L07fbcc.  v0:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fbd0.  call temp:= `holdsLock`(v0) @signature `Ljava/lang/Thread;.holdsLock:(Ljava/lang/Object;)Z` @kind static;
  #L07fbd6.  v0:= temp;
  #L07fbd8.  if v0 == 0 then goto L07fc24;
  #L07fbdc.  v0:= new `java.lang.AssertionError`;
  #L07fbe0.  call `<init>`(v0) @signature `Ljava/lang/AssertionError;.<init>:()V` @kind direct;
  #L07fbe6.  throw v0;
  #L07fbe8.  v14:= v14 - v4 @kind long;
  #L07fbea.  v3:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fbee.  @monitorenter v3
  #Try_start0.  
  #L07fbf0.  v0:= v12.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07fbf4.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07fbfa.  v4:= temp @kind wide;
  #L07fbfc.  v0:= lcmp(v4, v10);
  #L07fc00.  if v0 != 0 then goto L07fca8;
  #L07fc04.  v0:= v1;
  #L07fc06.  v4:= v12.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07fc0a.  v5:= v12.`a.a.e.i$b.e` @type ^`b.c` @kind object;
  #L07fc0e.  call temp:= `a`(v4, v5) @signature `Lb/c;.a:(Lb/r;)J` @kind virtual;
  #L07fc14.  if v0 == 0 then goto L07fc22;
  #L07fc18.  v0:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fc1c.  call `notifyAll`(v0) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L07fc22.  @monitorexit v3
  #Try_end0.  
  #L07fc24.  v0:= lcmp(v14, v10);
  #L07fc28.  if v0 <= 0 then goto L07fc6c;
  #L07fc2c.  v3:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fc30.  @monitorenter v3
  #Try_start1.  
  #L07fc32.  v4:= v12.`a.a.e.i$b.b` @type ^`boolean` @kind boolean;
  #L07fc36.  v0:= v12.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07fc3a.  call temp:= `b`(v0) @signature `Lb/c;.b:()J` @kind virtual;
  #L07fc40.  v6:= temp @kind wide;
  #L07fc42.  v6:= v6 + v14 @kind long;
  #L07fc44.  v8:= v12.`a.a.e.i$b.g` @type ^`long` @kind wide;
  #L07fc48.  v0:= lcmp(v6, v8);
  #L07fc4c.  if v0 <= 0 then goto L07fc6e;
  #L07fc50.  v0:= v1;
  #L07fc52.  @monitorexit v3
  #Try_end1.  
  #L07fc54.  if v0 == 0 then goto L07fc78;
  #L07fc58.  call `g`(v13, v14) @signature `Lb/e;.g:(J)V` @kind interface;
  #L07fc5e.  v0:= v12.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fc62.  v1:= `@@a.a.e.b.d` @type ^`a.a.e.b` @kind object;
  #L07fc66.  call `b`(v0, v1) @signature `La/a/e/i;.b:(La/a/e/b;)V` @kind virtual;
  #L07fc6c.  return @kind void;
  #L07fc6e.  v0:= v2;
  #L07fc70.  goto L07fc52;
  #L07fc72.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start2.  
  #L07fc74.  @monitorexit v3
  #Try_end2.  
  #L07fc76.  throw v0;
  #L07fc78.  if v4 == 0 then goto L07fc84;
  #L07fc7c.  call `g`(v13, v14) @signature `Lb/e;.g:(J)V` @kind interface;
  #L07fc82.  goto L07fc6c;
  #L07fc84.  v0:= v12.`a.a.e.i$b.e` @type ^`b.c` @kind object;
  #L07fc88.  call temp:= `a`(v13, v0, v14) @signature `Lb/e;.a:(Lb/c;J)J` @kind interface;
  #L07fc8e.  v4:= temp @kind wide;
  #L07fc90.  v6:= -1L;
  #L07fc94.  v0:= lcmp(v4, v6);
  #L07fc98.  if v0 != 0 then goto L07fbe8;
  #L07fc9c.  v0:= new `java.io.EOFException`;
  #L07fca0.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L07fca6.  throw v0;
  #L07fca8.  v0:= v2;
  #L07fcaa.  goto L07fc06;
  #L07fcac.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start3.  
  #L07fcae.  @monitorexit v3
  #Try_end3.  
  #L07fcb0.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07fcac;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07fc72;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L07fc72;
  catch `java.lang.Throwable` @[Try_start3..Try_end3] goto L07fcac;
}
procedure `void` `close`(`a.a.e.i$b` v2 @kind this) @signature `La/a/e/i$b;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L07fcec.  v1:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fcf0.  @monitorenter v1
  #L07fcf2.  v0:= 1I;
  #Try_start0.  
  #L07fcf4.  v2.`a.a.e.i$b.a` @type ^`boolean` := v0 @kind boolean;
  #L07fcf8.  v0:= v2.`a.a.e.i$b.f` @type ^`b.c` @kind object;
  #L07fcfc.  call `r`(v0) @signature `Lb/c;.r:()V` @kind virtual;
  #L07fd02.  v0:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fd06.  call `notifyAll`(v0) @signature `Ljava/lang/Object;.notifyAll:()V` @kind virtual;
  #L07fd0c.  @monitorexit v1
  #Try_end0.  
  #L07fd0e.  v0:= v2.`a.a.e.i$b.d` @type ^`a.a.e.i` @kind object;
  #L07fd12.  call `j`(v0) @signature `La/a/e/i;.j:()V` @kind virtual;
  #L07fd18.  return @kind void;
  #L07fd1a.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #Try_start1.  
  #L07fd1c.  @monitorexit v1
  #Try_end1.  
  #L07fd1e.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L07fd1a;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L07fd1a;
}
