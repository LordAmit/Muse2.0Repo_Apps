record `a.a.b.b` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.List` `a.a.b.b.a` @AccessFlag PRIVATE_FINAL;
  `int` `a.a.b.b.b` @AccessFlag PRIVATE;
  `boolean` `a.a.b.b.c` @AccessFlag PRIVATE;
  `boolean` `a.a.b.b.d` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`a.a.b.b` v1 @kind this, `java.util.List` v2 @kind object) @signature `La/a/b/b;.<init>:(Ljava/util/List;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;

  #L075c34.  call `<init>`(v1) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L075c3a.  v0:= 0I;
  #L075c3c.  v1.`a.a.b.b.b` @type ^`int` := v0;
  #L075c40.  v1.`a.a.b.b.a` @type ^`java.util.List` := v2 @kind object;
  #L075c44.  return @kind void;
}
procedure `boolean` `b`(`a.a.b.b` v2 @kind this, `javax.net.ssl.SSLSocket` v3 @kind object) @signature `La/a/b/b;.b:(Ljavax/net/ssl/SSLSocket;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L075c58.  v0:= v2.`a.a.b.b.b` @type ^`int`;
  #L075c5c.  v1:= v0;
  #L075c5e.  v0:= v2.`a.a.b.b.a` @type ^`java.util.List` @kind object;
  #L075c62.  call temp:= `size`(v0) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L075c68.  v0:= temp;
  #L075c6a.  if v1 >= v0 then goto L075c96;
  #L075c6e.  v0:= v2.`a.a.b.b.a` @type ^`java.util.List` @kind object;
  #L075c72.  call temp:= `get`(v0, v1) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L075c78.  v0:= temp @kind object;
  #L075c7a.  v0:= (`a.k`) v0 @kind object;
  #L075c7e.  call temp:= `a`(v0, v3) @signature `La/k;.a:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L075c84.  v0:= temp;
  #L075c86.  if v0 == 0 then goto L075c8e;
  #L075c8a.  v0:= 1I;
  #L075c8c.  return v0;
  #L075c8e.  v0:= v1 + 1;
  #L075c92.  v1:= v0;
  #L075c94.  goto L075c5e;
  #L075c96.  v0:= 0I;
  #L075c98.  goto L075c8c;
}
procedure `a.k` `a`(`a.a.b.b` v5 @kind this, `javax.net.ssl.SSLSocket` v6 @kind object) @signature `La/a/b/b;.a:(Ljavax/net/ssl/SSLSocket;)La/k;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L075cac.  v1:= 0I;
  #L075cae.  v0:= v5.`a.a.b.b.b` @type ^`int`;
  #L075cb2.  v2:= v5.`a.a.b.b.a` @type ^`java.util.List` @kind object;
  #L075cb6.  call temp:= `size`(v2) @signature `Ljava/util/List;.size:()I` @kind interface;
  #L075cbc.  v3:= temp;
  #L075cbe.  v2:= v0;
  #L075cc0.  if v2 >= v3 then goto L075d82;
  #L075cc4.  v0:= v5.`a.a.b.b.a` @type ^`java.util.List` @kind object;
  #L075cc8.  call temp:= `get`(v0, v2) @signature `Ljava/util/List;.get:(I)Ljava/lang/Object;` @kind interface;
  #L075cce.  v0:= temp @kind object;
  #L075cd0.  v0:= (`a.k`) v0 @kind object;
  #L075cd4.  call temp:= `a`(v0, v6) @signature `La/k;.a:(Ljavax/net/ssl/SSLSocket;)Z` @kind virtual;
  #L075cda.  v4:= temp;
  #L075cdc.  if v4 == 0 then goto L075d5e;
  #L075ce0.  v1:= v2 + 1;
  #L075ce4.  v5.`a.a.b.b.b` @type ^`int` := v1;
  #L075ce8.  if v0 != 0 then goto L075d66;
  #L075cec.  v0:= new `java.net.UnknownServiceException`;
  #L075cf0.  v1:= new `java.lang.StringBuilder`;
  #L075cf4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L075cfa.  v2:= "Unable to find acceptable protocols. isFallback=" @kind object;
  #L075cfe.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L075d04.  v1:= temp @kind object;
  #L075d06.  v2:= v5.`a.a.b.b.d` @type ^`boolean` @kind boolean;
  #L075d0a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Z)Ljava/lang/StringBuilder;` @kind virtual;
  #L075d10.  v1:= temp @kind object;
  #L075d12.  v2:= ", modes=" @kind object;
  #L075d16.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L075d1c.  v1:= temp @kind object;
  #L075d1e.  v2:= v5.`a.a.b.b.a` @type ^`java.util.List` @kind object;
  #L075d22.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L075d28.  v1:= temp @kind object;
  #L075d2a.  v2:= ", supported protocols=" @kind object;
  #L075d2e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L075d34.  v1:= temp @kind object;
  #L075d36.  call temp:= `getEnabledProtocols`(v6) @signature `Ljavax/net/ssl/SSLSocket;.getEnabledProtocols:()[Ljava/lang/String;` @kind virtual;
  #L075d3c.  v2:= temp @kind object;
  #L075d3e.  call temp:= `toString`(v2) @signature `Ljava/util/Arrays;.toString:([Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L075d44.  v2:= temp @kind object;
  #L075d46.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L075d4c.  v1:= temp @kind object;
  #L075d4e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L075d54.  v1:= temp @kind object;
  #L075d56.  call `<init>`(v0, v1) @signature `Ljava/net/UnknownServiceException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L075d5c.  throw v0;
  #L075d5e.  v0:= v2 + 1;
  #L075d62.  v2:= v0;
  #L075d64.  goto L075cc0;
  #L075d66.  call temp:= `b`(v5, v6) @signature `La/a/b/b;.b:(Ljavax/net/ssl/SSLSocket;)Z` @kind direct;
  #L075d6c.  v1:= temp;
  #L075d6e.  v5.`a.a.b.b.c` @type ^`boolean` := v1 @kind boolean;
  #L075d72.  v1:= `@@a.a.a.a` @type ^`a.a.a` @kind object;
  #L075d76.  v2:= v5.`a.a.b.b.d` @type ^`boolean` @kind boolean;
  #L075d7a.  call `a`(v1, v0, v6, v2) @signature `La/a/a;.a:(La/k;Ljavax/net/ssl/SSLSocket;Z)V` @kind virtual;
  #L075d80.  return v0 @kind object;
  #L075d82.  v0:= v1 @kind object;
  #L075d84.  goto L075ce8;
}
procedure `boolean` `a`(`a.a.b.b` v3 @kind this, `java.io.IOException` v4 @kind object) @signature `La/a/b/b;.a:(Ljava/io/IOException;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L075d98.  v1:= 1I;
  #L075d9a.  v0:= 0I;
  #L075d9c.  v3.`a.a.b.b.d` @type ^`boolean` := v1 @kind boolean;
  #L075da0.  v2:= v3.`a.a.b.b.c` @type ^`boolean` @kind boolean;
  #L075da4.  if v2 != 0 then goto L075daa;
  #L075da8.  return v0;
  #L075daa.  v2:= instanceof @variable v4 @type ^`java.net.ProtocolException` @kind boolean;
  #L075dae.  if v2 != 0 then goto L075da8;
  #L075db2.  v2:= instanceof @variable v4 @type ^`java.io.InterruptedIOException` @kind boolean;
  #L075db6.  if v2 != 0 then goto L075da8;
  #L075dba.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L075dbe.  if v2 == 0 then goto L075dd2;
  #L075dc2.  call temp:= `getCause`(v4) @signature `Ljava/io/IOException;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L075dc8.  v2:= temp @kind object;
  #L075dca.  v2:= instanceof @variable v2 @type ^`java.security.cert.CertificateException` @kind boolean;
  #L075dce.  if v2 != 0 then goto L075da8;
  #L075dd2.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLPeerUnverifiedException` @kind boolean;
  #L075dd6.  if v2 != 0 then goto L075da8;
  #L075dda.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLHandshakeException` @kind boolean;
  #L075dde.  if v2 != 0 then goto L075dea;
  #L075de2.  v2:= instanceof @variable v4 @type ^`javax.net.ssl.SSLProtocolException` @kind boolean;
  #L075de6.  if v2 == 0 then goto L075da8;
  #L075dea.  v0:= v1;
  #L075dec.  goto L075da8;
}
