record `a.a.a.d` @kind class @AccessFlag PUBLIC_FINAL extends `java.io.Closeable` @kind interface, `java.io.Flushable` @kind interface {
  `a.a.f.a` `a.a.a.d.b` @AccessFlag FINAL;
  `int` `a.a.a.d.c` @AccessFlag FINAL;
  `b.d` `a.a.a.d.d` @AccessFlag ;
  `java.util.LinkedHashMap` `a.a.a.d.e` @AccessFlag FINAL;
  `int` `a.a.a.d.f` @AccessFlag ;
  `boolean` `a.a.a.d.g` @AccessFlag ;
  `boolean` `a.a.a.d.h` @AccessFlag ;
  `boolean` `a.a.a.d.i` @AccessFlag ;
  `long` `a.a.a.d.k` @AccessFlag PRIVATE;
  `long` `a.a.a.d.l` @AccessFlag PRIVATE;
  `long` `a.a.a.d.m` @AccessFlag PRIVATE;
  `java.util.concurrent.Executor` `a.a.a.d.n` @AccessFlag PRIVATE_FINAL;
  `java.lang.Runnable` `a.a.a.d.o` @AccessFlag PRIVATE_FINAL;
}
global `java.util.regex.Pattern` `@@a.a.a.d.a` @AccessFlag STATIC_FINAL;
global `boolean` `@@a.a.a.d.j` @AccessFlag STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `La/a/a/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L075668.  v0:= constclass @type ^`a.a.a.d` @kind object;
  #L07566c.  call temp:= `desiredAssertionStatus`(v0) @signature `Ljava/lang/Class;.desiredAssertionStatus:()Z` @kind virtual;
  #L075672.  v0:= temp;
  #L075674.  if v0 != 0 then goto L075690;
  #L075678.  v0:= 1I;
  #L07567a.  `@@a.a.a.d.j` @type ^`boolean` := v0 @kind boolean;
  #L07567e.  v0:= "[a-z0-9_-]{1,120}" @kind object;
  #L075682.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L075688.  v0:= temp @kind object;
  #L07568a.  `@@a.a.a.d.a` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L07568e.  return @kind void;
  #L075690.  v0:= 0I;
  #L075692.  goto L07567a;
}
procedure `void` `d`(`a.a.a.d` v2 @kind this) @signature `La/a/a/d;.d:()V` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L0756a4.  @monitorenter v2
  #Try_start0.  
  #L0756a6.  call temp:= `b`(v2) @signature `La/a/a/d;.b:()Z` @kind virtual;
  #L0756ac.  v0:= temp;
  #L0756ae.  if v0 == 0 then goto L0756c8;
  #L0756b2.  v0:= new `java.lang.IllegalStateException`;
  #L0756b6.  v1:= "cache is closed" @kind object;
  #L0756ba.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L0756c0.  throw v0;
  #Try_end0.  
  #L0756c2.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L0756c4.  @monitorexit v2
  #L0756c6.  throw v0;
  #L0756c8.  @monitorexit v2
  #L0756ca.  return @kind void;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L0756c2;
}
procedure `void` `a`(`a.a.a.d` v10 @kind this, `a.a.a.d$a` v11 @kind object, `boolean` v12 ) @signature `La/a/a/d;.a:(La/a/a/d$a;Z)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L0756e8.  v0:= 0I;
  #L0756ea.  @monitorenter v10
  #Try_start0.  
  #L0756ec.  v2:= v11.`a.a.a.d$a.a` @type ^`a.a.a.d$b` @kind object;
  #L0756f0.  v1:= v2.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L0756f4.  if v1 == v11 then goto L07570a;
  #L0756f8.  v0:= new `java.lang.IllegalStateException`;
  #L0756fc.  call `<init>`(v0) @signature `Ljava/lang/IllegalStateException;.<init>:()V` @kind direct;
  #L075702.  throw v0;
  #Try_end0.  
  #L075704.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L075706.  @monitorexit v10
  #L075708.  throw v0;
  #L07570a.  if v12 == 0 then goto L07578c;
  #Try_start1.  
  #L07570e.  v1:= v2.`a.a.a.d$b.e` @type ^`boolean` @kind boolean;
  #L075712.  if v1 != 0 then goto L07578c;
  #L075716.  v1:= v0;
  #L075718.  v3:= v10.`a.a.a.d.c` @type ^`int`;
  #L07571c.  if v1 >= v3 then goto L07578c;
  #L075720.  v3:= v11.`a.a.a.d$a.b` @type ^`boolean`[] @kind object;
  #L075724.  v3:= v3[v1] @kind boolean;
  #L075728.  if v3 != 0 then goto L075764;
  #L07572c.  call `b`(v11) @signature `La/a/a/d$a;.b:()V` @kind virtual;
  #L075732.  v0:= new `java.lang.IllegalStateException`;
  #L075736.  v2:= new `java.lang.StringBuilder`;
  #L07573a.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L075740.  v3:= "Newly created entry didn't create value for index " @kind object;
  #L075744.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L07574a.  v2:= temp @kind object;
  #L07574c.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L075752.  v1:= temp @kind object;
  #L075754.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L07575a.  v1:= temp @kind object;
  #L07575c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L075762.  throw v0;
  #L075764.  v3:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L075768.  v4:= v2.`a.a.a.d$b.d` @type ^`java.io.File`[] @kind object;
  #L07576c.  v4:= v4[v1] @kind object;
  #L075770.  call temp:= `b`(v3, v4) @signature `La/a/f/a;.b:(Ljava/io/File;)Z` @kind interface;
  #L075776.  v3:= temp;
  #L075778.  if v3 != 0 then goto L075786;
  #L07577c.  call `b`(v11) @signature `La/a/a/d$a;.b:()V` @kind virtual;
  #Try_end1.  
  #L075782.  @monitorexit v10
  #L075784.  return @kind void;
  #L075786.  v1:= v1 + 1;
  #L07578a.  goto L075718;
  #Try_start2.  
  #L07578c.  v1:= v10.`a.a.a.d.c` @type ^`int`;
  #L075790.  if v0 >= v1 then goto L0757fe;
  #L075794.  v1:= v2.`a.a.a.d$b.d` @type ^`java.io.File`[] @kind object;
  #L075798.  v1:= v1[v0] @kind object;
  #L07579c.  if v12 == 0 then goto L0757f2;
  #L0757a0.  v3:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L0757a4.  call temp:= `b`(v3, v1) @signature `La/a/f/a;.b:(Ljava/io/File;)Z` @kind interface;
  #L0757aa.  v3:= temp;
  #L0757ac.  if v3 == 0 then goto L0757ec;
  #L0757b0.  v3:= v2.`a.a.a.d$b.c` @type ^`java.io.File`[] @kind object;
  #L0757b4.  v3:= v3[v0] @kind object;
  #L0757b8.  v4:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L0757bc.  call `a`(v4, v1, v3) @signature `La/a/f/a;.a:(Ljava/io/File;Ljava/io/File;)V` @kind interface;
  #L0757c2.  v1:= v2.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L0757c6.  v4:= v1[v0] @kind wide;
  #L0757ca.  v1:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L0757ce.  call temp:= `c`(v1, v3) @signature `La/a/f/a;.c:(Ljava/io/File;)J` @kind interface;
  #L0757d4.  v6:= temp @kind wide;
  #L0757d6.  v1:= v2.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L0757da.  v1[v0]:= v6 @kind wide;
  #L0757de.  v8:= v10.`a.a.a.d.l` @type ^`long` @kind wide;
  #L0757e2.  v4:= v8 - v4 @kind long;
  #L0757e6.  v4:= v4 + v6 @kind long;
  #L0757e8.  v10.`a.a.a.d.l` @type ^`long` := v4 @kind wide;
  #L0757ec.  v0:= v0 + 1;
  #L0757f0.  goto L07578c;
  #L0757f2.  v3:= v10.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L0757f6.  call `a`(v3, v1) @signature `La/a/f/a;.a:(Ljava/io/File;)V` @kind interface;
  #L0757fc.  goto L0757ec;
  #L0757fe.  v0:= v10.`a.a.a.d.f` @type ^`int`;
  #L075802.  v0:= v0 + 1;
  #L075806.  v10.`a.a.a.d.f` @type ^`int` := v0;
  #L07580a.  v0:= 0I;
  #L07580c.  v2.`a.a.a.d$b.f` @type ^`a.a.a.d$a` := v0 @kind object;
  #L075810.  v0:= v2.`a.a.a.d$b.e` @type ^`boolean` @kind boolean;
  #L075814.  v0:= v0 ^| v12 @kind int;
  #L075816.  if v0 == 0 then goto L0758ae;
  #L07581a.  v0:= 1I;
  #L07581c.  v2.`a.a.a.d$b.e` @type ^`boolean` := v0 @kind boolean;
  #L075820.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L075824.  v1:= "CLEAN" @kind object;
  #L075828.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L07582e.  v0:= temp @kind object;
  #L075830.  v1:= 32I;
  #L075834.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L07583a.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07583e.  v1:= v2.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L075842.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L075848.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07584c.  call `a`(v2, v0) @signature `La/a/a/d$b;.a:(Lb/d;)V` @kind virtual;
  #L075852.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L075856.  v1:= 10I;
  #L07585a.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L075860.  if v12 == 0 then goto L075876;
  #L075864.  v0:= v10.`a.a.a.d.m` @type ^`long` @kind wide;
  #L075868.  v4:= 1L;
  #L07586c.  v4:= v4 + v0 @kind long;
  #L07586e.  v10.`a.a.a.d.m` @type ^`long` := v4 @kind wide;
  #L075872.  v2.`a.a.a.d$b.g` @type ^`long` := v0 @kind wide;
  #L075876.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L07587a.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #L075880.  v0:= v10.`a.a.a.d.l` @type ^`long` @kind wide;
  #L075884.  v2:= v10.`a.a.a.d.k` @type ^`long` @kind wide;
  #L075888.  v0:= lcmp(v0, v2);
  #L07588c.  if v0 > 0 then goto L07589c;
  #L075890.  call temp:= `a`(v10) @signature `La/a/a/d;.a:()Z` @kind virtual;
  #L075896.  v0:= temp;
  #L075898.  if v0 == 0 then goto L075782;
  #L07589c.  v0:= v10.`a.a.a.d.n` @type ^`java.util.concurrent.Executor` @kind object;
  #L0758a0.  v1:= v10.`a.a.a.d.o` @type ^`java.lang.Runnable` @kind object;
  #L0758a4.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L0758aa.  goto L075782;
  #L0758ae.  v0:= v10.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L0758b2.  v1:= v2.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L0758b6.  call temp:= `remove`(v0, v1) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L0758bc.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L0758c0.  v1:= "REMOVE" @kind object;
  #L0758c4.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L0758ca.  v0:= temp @kind object;
  #L0758cc.  v1:= 32I;
  #L0758d0.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L0758d6.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L0758da.  v1:= v2.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L0758de.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L0758e4.  v0:= v10.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L0758e8.  v1:= 10I;
  #L0758ec.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #Try_end2.  
  #L0758f2.  goto L075876;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L075704;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L075704;
  catch `java.lang.Throwable` @[Try_start2..Try_end2] goto L075704;
}
procedure `boolean` `a`(`a.a.a.d` v2 @kind this) @signature `La/a/a/d;.a:()Z` @AccessFlag  {
    temp;
    v0;
    v1;

  #L075920.  v0:= v2.`a.a.a.d.f` @type ^`int`;
  #L075924.  v1:= 2000I;
  #L075928.  if v0 < v1 then goto L075944;
  #L07592c.  v0:= v2.`a.a.a.d.f` @type ^`int`;
  #L075930.  v1:= v2.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L075934.  call temp:= `size`(v1) @signature `Ljava/util/LinkedHashMap;.size:()I` @kind virtual;
  #L07593a.  v1:= temp;
  #L07593c.  if v0 < v1 then goto L075944;
  #L075940.  v0:= 1I;
  #L075942.  return v0;
  #L075944.  v0:= 0I;
  #L075946.  goto L075942;
}
procedure `boolean` `a`(`a.a.a.d` v6 @kind this, `a.a.a.d$b` v7 @kind object) @signature `La/a/a/d;.a:(La/a/a/d$b;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L075958.  v0:= v7.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L07595c.  if v0 == 0 then goto L07596a;
  #L075960.  v0:= v7.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L075964.  call `a`(v0) @signature `La/a/a/d$a;.a:()V` @kind virtual;
  #L07596a.  v0:= 0I;
  #L07596c.  v1:= v6.`a.a.a.d.c` @type ^`int`;
  #L075970.  if v0 >= v1 then goto L0759aa;
  #L075974.  v1:= v6.`a.a.a.d.b` @type ^`a.a.f.a` @kind object;
  #L075978.  v2:= v7.`a.a.a.d$b.c` @type ^`java.io.File`[] @kind object;
  #L07597c.  v2:= v2[v0] @kind object;
  #L075980.  call `a`(v1, v2) @signature `La/a/f/a;.a:(Ljava/io/File;)V` @kind interface;
  #L075986.  v2:= v6.`a.a.a.d.l` @type ^`long` @kind wide;
  #L07598a.  v1:= v7.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L07598e.  v4:= v1[v0] @kind wide;
  #L075992.  v2:= v2 - v4 @kind long;
  #L075994.  v6.`a.a.a.d.l` @type ^`long` := v2 @kind wide;
  #L075998.  v1:= v7.`a.a.a.d$b.b` @type ^`long`[] @kind object;
  #L07599c.  v2:= 0L;
  #L0759a0.  v1[v0]:= v2 @kind wide;
  #L0759a4.  v0:= v0 + 1;
  #L0759a8.  goto L07596c;
  #L0759aa.  v0:= v6.`a.a.a.d.f` @type ^`int`;
  #L0759ae.  v0:= v0 + 1;
  #L0759b2.  v6.`a.a.a.d.f` @type ^`int` := v0;
  #L0759b6.  v0:= v6.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L0759ba.  v1:= "REMOVE" @kind object;
  #L0759be.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L0759c4.  v0:= temp @kind object;
  #L0759c6.  v1:= 32I;
  #L0759ca.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L0759d0.  v0:= temp @kind object;
  #L0759d2.  v1:= v7.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L0759d6.  call temp:= `b`(v0, v1) @signature `Lb/d;.b:(Ljava/lang/String;)Lb/d;` @kind interface;
  #L0759dc.  v0:= temp @kind object;
  #L0759de.  v1:= 10I;
  #L0759e2.  call temp:= `i`(v0, v1) @signature `Lb/d;.i:(I)Lb/d;` @kind interface;
  #L0759e8.  v0:= v6.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L0759ec.  v1:= v7.`a.a.a.d$b.a` @type ^`java.lang.String` @kind object;
  #L0759f0.  call temp:= `remove`(v0, v1) @signature `Ljava/util/LinkedHashMap;.remove:(Ljava/lang/Object;)Ljava/lang/Object;` @kind virtual;
  #L0759f6.  call temp:= `a`(v6) @signature `La/a/a/d;.a:()Z` @kind virtual;
  #L0759fc.  v0:= temp;
  #L0759fe.  if v0 == 0 then goto L075a10;
  #L075a02.  v0:= v6.`a.a.a.d.n` @type ^`java.util.concurrent.Executor` @kind object;
  #L075a06.  v1:= v6.`a.a.a.d.o` @type ^`java.lang.Runnable` @kind object;
  #L075a0a.  call `execute`(v0, v1) @signature `Ljava/util/concurrent/Executor;.execute:(Ljava/lang/Runnable;)V` @kind interface;
  #L075a10.  v0:= 1I;
  #L075a12.  return v0;
}
procedure `boolean` `b`(`a.a.a.d` v1 @kind this) @signature `La/a/a/d;.b:()Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L075a24.  @monitorenter v1
  #Try_start0.  
  #L075a26.  v0:= v1.`a.a.a.d.h` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L075a2a.  @monitorexit v1
  #L075a2c.  return v0;
  #L075a2e.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L075a30.  @monitorexit v1
  #L075a32.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L075a2e;
}
procedure `void` `c`(`a.a.a.d` v4 @kind this) @signature `La/a/a/d;.c:()V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L075a50.  v0:= v4.`a.a.a.d.l` @type ^`long` @kind wide;
  #L075a54.  v2:= v4.`a.a.a.d.k` @type ^`long` @kind wide;
  #L075a58.  v0:= lcmp(v0, v2);
  #L075a5c.  if v0 <= 0 then goto L075a88;
  #L075a60.  v0:= v4.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L075a64.  call temp:= `values`(v0) @signature `Ljava/util/LinkedHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L075a6a.  v0:= temp @kind object;
  #L075a6c.  call temp:= `iterator`(v0) @signature `Ljava/util/Collection;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L075a72.  v0:= temp @kind object;
  #L075a74.  call temp:= `next`(v0) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L075a7a.  v0:= temp @kind object;
  #L075a7c.  v0:= (`a.a.a.d$b`) v0 @kind object;
  #L075a80.  call temp:= `a`(v4, v0) @signature `La/a/a/d;.a:(La/a/a/d$b;)Z` @kind virtual;
  #L075a86.  goto L075a50;
  #L075a88.  v0:= 0I;
  #L075a8a.  v4.`a.a.a.d.i` @type ^`boolean` := v0 @kind boolean;
  #L075a8e.  return @kind void;
}
procedure `void` `close`(`a.a.a.d` v5 @kind this) @signature `La/a/a/d;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L075aa0.  @monitorenter v5
  #Try_start0.  
  #L075aa2.  v0:= v5.`a.a.a.d.g` @type ^`boolean` @kind boolean;
  #L075aa6.  if v0 == 0 then goto L075ab2;
  #L075aaa.  v0:= v5.`a.a.a.d.h` @type ^`boolean` @kind boolean;
  #L075aae.  if v0 == 0 then goto L075abc;
  #L075ab2.  v0:= 1I;
  #L075ab4.  v5.`a.a.a.d.h` @type ^`boolean` := v0 @kind boolean;
  #Try_end0.  
  #L075ab8.  @monitorexit v5
  #L075aba.  return @kind void;
  #Try_start1.  
  #L075abc.  v0:= v5.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L075ac0.  call temp:= `values`(v0) @signature `Ljava/util/LinkedHashMap;.values:()Ljava/util/Collection;` @kind virtual;
  #L075ac6.  v0:= temp @kind object;
  #L075ac8.  v1:= v5.`a.a.a.d.e` @type ^`java.util.LinkedHashMap` @kind object;
  #L075acc.  call temp:= `size`(v1) @signature `Ljava/util/LinkedHashMap;.size:()I` @kind virtual;
  #L075ad2.  v1:= temp;
  #L075ad4.  v1:= new `a.a.a.d$b`[v1];
  #L075ad8.  call temp:= `toArray`(v0, v1) @signature `Ljava/util/Collection;.toArray:([Ljava/lang/Object;)[Ljava/lang/Object;` @kind interface;
  #L075ade.  v0:= temp @kind object;
  #L075ae0.  v0:= (`a.a.a.d$b`[]) v0 @kind object;
  #L075ae4.  v2:= length @variable v0;
  #L075ae6.  v1:= 0I;
  #L075ae8.  if v1 >= v2 then goto L075b08;
  #L075aec.  v3:= v0[v1] @kind object;
  #L075af0.  v4:= v3.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L075af4.  if v4 == 0 then goto L075b02;
  #L075af8.  v3:= v3.`a.a.a.d$b.f` @type ^`a.a.a.d$a` @kind object;
  #L075afc.  call `b`(v3) @signature `La/a/a/d$a;.b:()V` @kind virtual;
  #L075b02.  v1:= v1 + 1;
  #L075b06.  goto L075ae8;
  #L075b08.  call `c`(v5) @signature `La/a/a/d;.c:()V` @kind virtual;
  #L075b0e.  v0:= v5.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L075b12.  call `close`(v0) @signature `Lb/d;.close:()V` @kind interface;
  #L075b18.  v0:= 0I;
  #L075b1a.  v5.`a.a.a.d.d` @type ^`b.d` := v0 @kind object;
  #L075b1e.  v0:= 1I;
  #L075b20.  v5.`a.a.a.d.h` @type ^`boolean` := v0 @kind boolean;
  #Try_end1.  
  #L075b24.  goto L075ab8;
  #L075b26.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L075b28.  @monitorexit v5
  #L075b2a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L075b26;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L075b26;
}
procedure `void` `flush`(`a.a.a.d` v1 @kind this) @signature `La/a/a/d;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L075b50.  @monitorenter v1
  #Try_start0.  
  #L075b52.  v0:= v1.`a.a.a.d.g` @type ^`boolean` @kind boolean;
  #Try_end0.  
  #L075b56.  if v0 != 0 then goto L075b5e;
  #L075b5a.  @monitorexit v1
  #L075b5c.  return @kind void;
  #Try_start1.  
  #L075b5e.  call `d`(v1) @signature `La/a/a/d;.d:()V` @kind direct;
  #L075b64.  call `c`(v1) @signature `La/a/a/d;.c:()V` @kind virtual;
  #L075b6a.  v0:= v1.`a.a.a.d.d` @type ^`b.d` @kind object;
  #L075b6e.  call `flush`(v0) @signature `Lb/d;.flush:()V` @kind interface;
  #Try_end1.  
  #L075b74.  goto L075b5a;
  #L075b76.  v0:= Exception @type ^`java.lang.Throwable` @kind object;
  #L075b78.  @monitorexit v1
  #L075b7a.  throw v0;
  catch `java.lang.Throwable` @[Try_start0..Try_end0] goto L075b76;
  catch `java.lang.Throwable` @[Try_start1..Try_end1] goto L075b76;
}
