record `a.a.c.e` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.regex.Pattern` `@@a.a.c.e.a` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `La/a/c/e;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L0783b4.  v0:= " +([^ \"=]*)=(:?\"([^\"]*)\"|([^ \"=]*)) *(:?,|$)" @kind object;
  #L0783b8.  call temp:= `compile`(v0) @signature `Ljava/util/regex/Pattern;.compile:(Ljava/lang/String;)Ljava/util/regex/Pattern;` @kind static;
  #L0783be.  v0:= temp @kind object;
  #L0783c0.  `@@a.a.c.e.a` @type ^`java.util.regex.Pattern` := v0 @kind object;
  #L0783c4.  return @kind void;
}
procedure `int` `a`(`java.lang.String` v2 @kind object, `int` v3 ) @signature `La/a/c/e;.a:(Ljava/lang/String;I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L0783d8.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L0783de.  v0:= temp;
  #L0783e0.  if v3 >= v0 then goto L0783fc;
  #L0783e4.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L0783ea.  v0:= temp;
  #L0783ec.  v1:= 32I;
  #L0783f0.  if v0 == v1 then goto L0783fe;
  #L0783f4.  v1:= 9I;
  #L0783f8.  if v0 == v1 then goto L0783fe;
  #L0783fc.  return v3;
  #L0783fe.  v3:= v3 + 1;
  #L078402.  goto L0783d8;
}
procedure `int` `a`(`java.lang.String` v2 @kind object, `int` v3 , `java.lang.String` v4 @kind object) @signature `La/a/c/e;.a:(Ljava/lang/String;ILjava/lang/String;)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L078414.  call temp:= `length`(v2) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L07841a.  v0:= temp;
  #L07841c.  if v3 >= v0 then goto L078436;
  #L078420.  call temp:= `charAt`(v2, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L078426.  v0:= temp;
  #L078428.  call temp:= `indexOf`(v4, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L07842e.  v0:= temp;
  #L078430.  v1:= -1I;
  #L078432.  if v0 == v1 then goto L078438;
  #L078436.  return v3;
  #L078438.  v3:= v3 + 1;
  #L07843c.  goto L078414;
}
procedure `long` `a`(`a.q` v2 @kind object) @signature `La/a/c/e;.a:(La/q;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L078450.  v0:= "Content-Length" @kind object;
  #L078454.  call temp:= `a`(v2, v0) @signature `La/q;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L07845a.  v0:= temp @kind object;
  #L07845c.  call temp:= `a`(v0) @signature `La/a/c/e;.a:(Ljava/lang/String;)J` @kind static;
  #L078462.  v0:= temp @kind wide;
  #L078464.  return v0 @kind wide;
}
procedure `long` `a`(`a.z` v2 @kind object) @signature `La/a/c/e;.a:(La/z;)J` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L078478.  call temp:= `e`(v2) @signature `La/z;.e:()La/q;` @kind virtual;
  #L07847e.  v0:= temp @kind object;
  #L078480.  call temp:= `a`(v0) @signature `La/a/c/e;.a:(La/q;)J` @kind static;
  #L078486.  v0:= temp @kind wide;
  #L078488.  return v0 @kind wide;
}
procedure `long` `a`(`java.lang.String` v3 @kind object) @signature `La/a/c/e;.a:(Ljava/lang/String;)J` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L07849c.  v0:= -1L;
  #L0784a0.  if v3 != 0 then goto L0784a6;
  #L0784a4.  return v0 @kind wide;
  #Try_start0.  
  #L0784a6.  call temp:= `parseLong`(v3) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #Try_end0.  
  #L0784ac.  v0:= temp @kind wide;
  #L0784ae.  goto L0784a4;
  #L0784b0.  v2:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L0784b2.  goto L0784a4;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L0784b0;
}
procedure `void` `a`(`a.m` v2 @kind object, `a.r` v3 @kind object, `a.q` v4 @kind object) @signature `La/a/c/e;.a:(La/m;La/r;La/q;)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L0784d4.  v0:= `@@a.m.a` @type ^`a.m` @kind object;
  #L0784d8.  if v2 != v0 then goto L0784de;
  #L0784dc.  return @kind void;
  #L0784de.  call temp:= `a`(v3, v4) @signature `La/l;.a:(La/r;La/q;)Ljava/util/List;` @kind static;
  #L0784e4.  v0:= temp @kind object;
  #L0784e6.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L0784ec.  v1:= temp;
  #L0784ee.  if v1 != 0 then goto L0784dc;
  #L0784f2.  call `a`(v2, v3, v0) @signature `La/m;.a:(La/r;Ljava/util/List;)V` @kind interface;
  #L0784f8.  goto L0784dc;
}
procedure `int` `b`(`java.lang.String` v4 @kind object, `int` v5 ) @signature `La/a/c/e;.b:(Ljava/lang/String;I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #Try_start0.  
  #L07850c.  call temp:= `parseLong`(v4) @signature `Ljava/lang/Long;.parseLong:(Ljava/lang/String;)J` @kind static;
  #Try_end0.  
  #L078512.  v0:= temp @kind wide;
  #L078514.  v2:= 2147483647L;
  #L07851a.  v2:= lcmp(v0, v2);
  #L07851e.  if v2 <= 0 then goto L07852a;
  #L078522.  v5:= 2147483647I;
  #L078528.  return v5;
  #L07852a.  v2:= 0L;
  #L07852e.  v2:= lcmp(v0, v2);
  #L078532.  if v2 >= 0 then goto L07853a;
  #L078536.  v5:= 0I;
  #L078538.  goto L078528;
  #L07853a.  v5:= (`int`) v0 @kind l2i;
  #L07853c.  goto L078528;
  #L07853e.  v0:= Exception @type ^`java.lang.NumberFormatException` @kind object;
  #L078540.  goto L078528;
  catch `java.lang.NumberFormatException` @[Try_start0..Try_end0] goto L07853e;
}
procedure `boolean` `b`(`a.z` v6 @kind object) @signature `La/a/c/e;.b:(La/z;)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L078564.  v1:= 1I;
  #L078566.  v0:= 0I;
  #L078568.  call temp:= `a`(v6) @signature `La/z;.a:()La/x;` @kind virtual;
  #L07856e.  v2:= temp @kind object;
  #L078570.  call temp:= `b`(v2) @signature `La/x;.b:()Ljava/lang/String;` @kind virtual;
  #L078576.  v2:= temp @kind object;
  #L078578.  v3:= "HEAD" @kind object;
  #L07857c.  call temp:= `equals`(v2, v3) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L078582.  v2:= temp;
  #L078584.  if v2 == 0 then goto L07858a;
  #L078588.  return v0;
  #L07858a.  call temp:= `b`(v6) @signature `La/z;.b:()I` @kind virtual;
  #L078590.  v2:= temp;
  #L078592.  v3:= 100I;
  #L078596.  if v2 < v3 then goto L0785a2;
  #L07859a.  v3:= 200I;
  #L07859e.  if v2 < v3 then goto L0785b6;
  #L0785a2.  v3:= 204I;
  #L0785a6.  if v2 == v3 then goto L0785b6;
  #L0785aa.  v3:= 304I;
  #L0785ae.  if v2 == v3 then goto L0785b6;
  #L0785b2.  v0:= v1;
  #L0785b4.  goto L078588;
  #L0785b6.  call temp:= `a`(v6) @signature `La/a/c/e;.a:(La/z;)J` @kind static;
  #L0785bc.  v2:= temp @kind wide;
  #L0785be.  v4:= -1L;
  #L0785c2.  v2:= lcmp(v2, v4);
  #L0785c6.  if v2 != 0 then goto L0785e6;
  #L0785ca.  v2:= "chunked" @kind object;
  #L0785ce.  v3:= "Transfer-Encoding" @kind object;
  #L0785d2.  call temp:= `a`(v6, v3) @signature `La/z;.a:(Ljava/lang/String;)Ljava/lang/String;` @kind virtual;
  #L0785d8.  v3:= temp @kind object;
  #L0785da.  call temp:= `equalsIgnoreCase`(v2, v3) @signature `Ljava/lang/String;.equalsIgnoreCase:(Ljava/lang/String;)Z` @kind virtual;
  #L0785e0.  v2:= temp;
  #L0785e2.  if v2 == 0 then goto L078588;
  #L0785e6.  v0:= v1;
  #L0785e8.  goto L078588;
}
