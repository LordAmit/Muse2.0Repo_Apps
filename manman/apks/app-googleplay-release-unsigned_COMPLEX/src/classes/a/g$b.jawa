record `a.g$b` @kind class @AccessFlag FINAL {
  `java.lang.String` `a.g$b.a` @AccessFlag FINAL;
  `java.lang.String` `a.g$b.b` @AccessFlag FINAL;
  `java.lang.String` `a.g$b.c` @AccessFlag FINAL;
  `b.f` `a.g$b.d` @AccessFlag FINAL;
}
procedure `boolean` `a`(`a.g$b` v6 @kind this, `java.lang.String` v7 @kind object) @signature `La/g$b;.a:(Ljava/lang/String;)Z` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L085b2c.  v1:= 0I;
  #L085b2e.  v0:= v6.`a.g$b.a` @type ^`java.lang.String` @kind object;
  #L085b32.  v2:= "*." @kind object;
  #L085b36.  call temp:= `startsWith`(v0, v2) @signature `Ljava/lang/String;.startsWith:(Ljava/lang/String;)Z` @kind virtual;
  #L085b3c.  v0:= temp;
  #L085b3e.  if v0 == 0 then goto L085b70;
  #L085b42.  v0:= 46I;
  #L085b46.  call temp:= `indexOf`(v7, v0) @signature `Ljava/lang/String;.indexOf:(I)I` @kind virtual;
  #L085b4c.  v0:= temp;
  #L085b4e.  v2:= v0 + 1;
  #L085b52.  v3:= v6.`a.g$b.b` @type ^`java.lang.String` @kind object;
  #L085b56.  v0:= v6.`a.g$b.b` @type ^`java.lang.String` @kind object;
  #L085b5a.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L085b60.  v5:= temp;
  #L085b62.  v0:= v7 @kind object;
  #L085b64.  v4:= v1;
  #L085b66.  call temp:= `regionMatches`(v0, v1, v2, v3, v4, v5) @signature `Ljava/lang/String;.regionMatches:(ZILjava/lang/String;II)Z` @kind virtual;
  #L085b6c.  v0:= temp;
  #L085b6e.  return v0;
  #L085b70.  v0:= v6.`a.g$b.b` @type ^`java.lang.String` @kind object;
  #L085b74.  call temp:= `equals`(v7, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L085b7a.  v0:= temp;
  #L085b7c.  goto L085b6e;
}
procedure `boolean` `equals`(`a.g$b` v2 @kind this, `java.lang.Object` v3 @kind object) @signature `La/g$b;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L085b90.  v0:= instanceof @variable v3 @type ^`a.g$b` @kind boolean;
  #L085b94.  if v0 == 0 then goto L085be8;
  #L085b98.  v1:= v2.`a.g$b.a` @type ^`java.lang.String` @kind object;
  #L085b9c.  v0:= v3 @kind object;
  #L085b9e.  v0:= (`a.g$b`) v0 @kind object;
  #L085ba2.  v0:= v0.`a.g$b.a` @type ^`java.lang.String` @kind object;
  #L085ba6.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L085bac.  v0:= temp;
  #L085bae.  if v0 == 0 then goto L085be8;
  #L085bb2.  v1:= v2.`a.g$b.c` @type ^`java.lang.String` @kind object;
  #L085bb6.  v0:= v3 @kind object;
  #L085bb8.  v0:= (`a.g$b`) v0 @kind object;
  #L085bbc.  v0:= v0.`a.g$b.c` @type ^`java.lang.String` @kind object;
  #L085bc0.  call temp:= `equals`(v1, v0) @signature `Ljava/lang/String;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L085bc6.  v0:= temp;
  #L085bc8.  if v0 == 0 then goto L085be8;
  #L085bcc.  v0:= v2.`a.g$b.d` @type ^`b.f` @kind object;
  #L085bd0.  v3:= (`a.g$b`) v3 @kind object;
  #L085bd4.  v1:= v3.`a.g$b.d` @type ^`b.f` @kind object;
  #L085bd8.  call temp:= `equals`(v0, v1) @signature `Lb/f;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L085bde.  v0:= temp;
  #L085be0.  if v0 == 0 then goto L085be8;
  #L085be4.  v0:= 1I;
  #L085be6.  return v0;
  #L085be8.  v0:= 0I;
  #L085bea.  goto L085be6;
}
procedure `int` `hashCode`(`a.g$b` v2 @kind this) @signature `La/g$b;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L085bfc.  v0:= v2.`a.g$b.a` @type ^`java.lang.String` @kind object;
  #L085c00.  call temp:= `hashCode`(v0) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L085c06.  v0:= temp;
  #L085c08.  v0:= v0 + 527;
  #L085c0c.  v0:= v0 * 31;
  #L085c10.  v1:= v2.`a.g$b.c` @type ^`java.lang.String` @kind object;
  #L085c14.  call temp:= `hashCode`(v1) @signature `Ljava/lang/String;.hashCode:()I` @kind virtual;
  #L085c1a.  v1:= temp;
  #L085c1c.  v0:= v0 + v1 @kind int;
  #L085c1e.  v0:= v0 * 31;
  #L085c22.  v1:= v2.`a.g$b.d` @type ^`b.f` @kind object;
  #L085c26.  call temp:= `hashCode`(v1) @signature `Lb/f;.hashCode:()I` @kind virtual;
  #L085c2c.  v1:= temp;
  #L085c2e.  v0:= v0 + v1 @kind int;
  #L085c30.  return v0;
}
procedure `java.lang.String` `toString`(`a.g$b` v2 @kind this) @signature `La/g$b;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L085c44.  v0:= new `java.lang.StringBuilder`;
  #L085c48.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L085c4e.  v1:= v2.`a.g$b.c` @type ^`java.lang.String` @kind object;
  #L085c52.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085c58.  v0:= temp @kind object;
  #L085c5a.  v1:= v2.`a.g$b.d` @type ^`b.f` @kind object;
  #L085c5e.  call temp:= `b`(v1) @signature `Lb/f;.b:()Ljava/lang/String;` @kind virtual;
  #L085c64.  v1:= temp @kind object;
  #L085c66.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085c6c.  v0:= temp @kind object;
  #L085c6e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L085c74.  v0:= temp @kind object;
  #L085c76.  return v0 @kind object;
}
