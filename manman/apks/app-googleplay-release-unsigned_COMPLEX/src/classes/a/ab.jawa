record `a.ab` @kind class @AccessFlag PUBLIC_FINAL {
  `a.a` `a.ab.a` @AccessFlag FINAL;
  `java.net.Proxy` `a.ab.b` @AccessFlag FINAL;
  `java.net.InetSocketAddress` `a.ab.c` @AccessFlag FINAL;
}
procedure `void` `<init>`(`a.ab` v2 @kind this, `a.a` v3 @kind object, `java.net.Proxy` v4 @kind object, `java.net.InetSocketAddress` v5 @kind object) @signature `La/ab;.<init>:(La/a;Ljava/net/Proxy;Ljava/net/InetSocketAddress;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L084e68.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L084e6e.  if v3 != 0 then goto L084e82;
  #L084e72.  v0:= new `java.lang.NullPointerException`;
  #L084e76.  v1:= "address == null" @kind object;
  #L084e7a.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L084e80.  throw v0;
  #L084e82.  if v4 != 0 then goto L084e96;
  #L084e86.  v0:= new `java.lang.NullPointerException`;
  #L084e8a.  v1:= "proxy == null" @kind object;
  #L084e8e.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L084e94.  throw v0;
  #L084e96.  if v5 != 0 then goto L084eaa;
  #L084e9a.  v0:= new `java.lang.NullPointerException`;
  #L084e9e.  v1:= "inetSocketAddress == null" @kind object;
  #L084ea2.  call `<init>`(v0, v1) @signature `Ljava/lang/NullPointerException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L084ea8.  throw v0;
  #L084eaa.  v2.`a.ab.a` @type ^`a.a` := v3 @kind object;
  #L084eae.  v2.`a.ab.b` @type ^`java.net.Proxy` := v4 @kind object;
  #L084eb2.  v2.`a.ab.c` @type ^`java.net.InetSocketAddress` := v5 @kind object;
  #L084eb6.  return @kind void;
}
procedure `a.a` `a`(`a.ab` v1 @kind this) @signature `La/ab;.a:()La/a;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L084ec8.  v0:= v1.`a.ab.a` @type ^`a.a` @kind object;
  #L084ecc.  return v0 @kind object;
}
procedure `java.net.Proxy` `b`(`a.ab` v1 @kind this) @signature `La/ab;.b:()Ljava/net/Proxy;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L084ee0.  v0:= v1.`a.ab.b` @type ^`java.net.Proxy` @kind object;
  #L084ee4.  return v0 @kind object;
}
procedure `java.net.InetSocketAddress` `c`(`a.ab` v1 @kind this) @signature `La/ab;.c:()Ljava/net/InetSocketAddress;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L084ef8.  v0:= v1.`a.ab.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L084efc.  return v0 @kind object;
}
procedure `boolean` `d`(`a.ab` v2 @kind this) @signature `La/ab;.d:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L084f10.  v0:= v2.`a.ab.a` @type ^`a.a` @kind object;
  #L084f14.  v0:= v0.`a.a.i` @type ^`javax.net.ssl.SSLSocketFactory` @kind object;
  #L084f18.  if v0 == 0 then goto L084f34;
  #L084f1c.  v0:= v2.`a.ab.b` @type ^`java.net.Proxy` @kind object;
  #L084f20.  call temp:= `type`(v0) @signature `Ljava/net/Proxy;.type:()Ljava/net/Proxy$Type;` @kind virtual;
  #L084f26.  v0:= temp @kind object;
  #L084f28.  v1:= `@@java.net.Proxy$Type.HTTP` @type ^`java.net.Proxy$Type` @kind object;
  #L084f2c.  if v0 != v1 then goto L084f34;
  #L084f30.  v0:= 1I;
  #L084f32.  return v0;
  #L084f34.  v0:= 0I;
  #L084f36.  goto L084f32;
}
procedure `boolean` `equals`(`a.ab` v3 @kind this, `java.lang.Object` v4 @kind object) @signature `La/ab;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L084f48.  v0:= 0I;
  #L084f4a.  v1:= instanceof @variable v4 @type ^`a.ab` @kind boolean;
  #L084f4e.  if v1 == 0 then goto L084f94;
  #L084f52.  v4:= (`a.ab`) v4 @kind object;
  #L084f56.  v1:= v3.`a.ab.a` @type ^`a.a` @kind object;
  #L084f5a.  v2:= v4.`a.ab.a` @type ^`a.a` @kind object;
  #L084f5e.  call temp:= `equals`(v1, v2) @signature `La/a;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L084f64.  v1:= temp;
  #L084f66.  if v1 == 0 then goto L084f94;
  #L084f6a.  v1:= v3.`a.ab.b` @type ^`java.net.Proxy` @kind object;
  #L084f6e.  v2:= v4.`a.ab.b` @type ^`java.net.Proxy` @kind object;
  #L084f72.  call temp:= `equals`(v1, v2) @signature `Ljava/net/Proxy;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L084f78.  v1:= temp;
  #L084f7a.  if v1 == 0 then goto L084f94;
  #L084f7e.  v1:= v3.`a.ab.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L084f82.  v2:= v4.`a.ab.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L084f86.  call temp:= `equals`(v1, v2) @signature `Ljava/net/InetSocketAddress;.equals:(Ljava/lang/Object;)Z` @kind virtual;
  #L084f8c.  v1:= temp;
  #L084f8e.  if v1 == 0 then goto L084f94;
  #L084f92.  v0:= 1I;
  #L084f94.  return v0;
}
procedure `int` `hashCode`(`a.ab` v2 @kind this) @signature `La/ab;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L084fa8.  v0:= v2.`a.ab.a` @type ^`a.a` @kind object;
  #L084fac.  call temp:= `hashCode`(v0) @signature `La/a;.hashCode:()I` @kind virtual;
  #L084fb2.  v0:= temp;
  #L084fb4.  v0:= v0 + 527;
  #L084fb8.  v0:= v0 * 31;
  #L084fbc.  v1:= v2.`a.ab.b` @type ^`java.net.Proxy` @kind object;
  #L084fc0.  call temp:= `hashCode`(v1) @signature `Ljava/net/Proxy;.hashCode:()I` @kind virtual;
  #L084fc6.  v1:= temp;
  #L084fc8.  v0:= v0 + v1 @kind int;
  #L084fca.  v0:= v0 * 31;
  #L084fce.  v1:= v2.`a.ab.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L084fd2.  call temp:= `hashCode`(v1) @signature `Ljava/net/InetSocketAddress;.hashCode:()I` @kind virtual;
  #L084fd8.  v1:= temp;
  #L084fda.  v0:= v0 + v1 @kind int;
  #L084fdc.  return v0;
}
procedure `java.lang.String` `toString`(`a.ab` v2 @kind this) @signature `La/ab;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L084ff0.  v0:= new `java.lang.StringBuilder`;
  #L084ff4.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L084ffa.  v1:= "Route{" @kind object;
  #L084ffe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085004.  v0:= temp @kind object;
  #L085006.  v1:= v2.`a.ab.c` @type ^`java.net.InetSocketAddress` @kind object;
  #L08500a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L085010.  v0:= temp @kind object;
  #L085012.  v1:= "}" @kind object;
  #L085016.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L08501c.  v0:= temp @kind object;
  #L08501e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L085024.  v0:= temp @kind object;
  #L085026.  return v0 @kind object;
}
