record `b.t` @kind class @AccessFlag FINAL {
}
global `java.nio.charset.Charset` `@@b.t.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/t;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L11dbc0.  v0:= "UTF-8" @kind object;
  #L11dbc4.  call temp:= `forName`(v0) @signature `Ljava/nio/charset/Charset;.forName:(Ljava/lang/String;)Ljava/nio/charset/Charset;` @kind static;
  #L11dbca.  v0:= temp @kind object;
  #L11dbcc.  `@@b.t.a` @type ^`java.nio.charset.Charset` := v0 @kind object;
  #L11dbd0.  return @kind void;
}
procedure `int` `a`(`int` v2 ) @signature `Lb/t;.a:(I)I` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11dbe4.  v0:= -16777216I;
  #L11dbe8.  v0:= v0 ^& v2 @kind int;
  #L11dbea.  v0:= v0 ^>> 24;
  #L11dbee.  v1:= 16711680I;
  #L11dbf2.  v1:= v1 ^& v2 @kind int;
  #L11dbf4.  v1:= v1 ^>> 8;
  #L11dbf8.  v0:= v0 ^| v1 @kind int;
  #L11dbfa.  v1:= 65280I;
  #L11dc00.  v1:= v1 ^& v2 @kind int;
  #L11dc02.  v1:= v1 ^< 8;
  #L11dc06.  v0:= v0 ^| v1 @kind int;
  #L11dc08.  v1:= v2 ^& 255;
  #L11dc0c.  v1:= v1 ^< 24;
  #L11dc10.  v0:= v0 ^| v1 @kind int;
  #L11dc12.  return v0;
}
procedure `short` `a`(`short` v2 ) @signature `Lb/t;.a:(S)S` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11dc24.  v0:= 65535I;
  #L11dc2a.  v0:= v0 ^& v2 @kind int;
  #L11dc2c.  v1:= 65280I;
  #L11dc32.  v1:= v1 ^& v0 @kind int;
  #L11dc34.  v1:= v1 ^>> 8;
  #L11dc38.  v0:= v0 ^& 255;
  #L11dc3c.  v0:= v0 ^< 8;
  #L11dc40.  v0:= v0 ^| v1 @kind int;
  #L11dc42.  v0:= (`short`) v0 @kind i2s;
  #L11dc44.  return v0;
}
procedure `void` `a`(`long` v6 , `long` v8 , `long` v10 ) @signature `Lb/t;.a:(JJJ)V` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11dc58.  v0:= v8 ^| v10 @kind long;
  #L11dc5c.  v2:= 0L;
  #L11dc60.  v0:= lcmp(v0, v2);
  #L11dc64.  if v0 < 0 then goto L11dc7c;
  #L11dc68.  v0:= lcmp(v8, v6);
  #L11dc6c.  if v0 > 0 then goto L11dc7c;
  #L11dc70.  v0:= v6 - v8 @kind long;
  #L11dc74.  v0:= lcmp(v0, v10);
  #L11dc78.  if v0 >= 0 then goto L11dcc4;
  #L11dc7c.  v0:= new `java.lang.ArrayIndexOutOfBoundsException`;
  #L11dc80.  v1:= "size=%s offset=%s byteCount=%s" @kind object;
  #L11dc84.  v2:= 3I;
  #L11dc86.  v2:= new `java.lang.Object`[v2];
  #L11dc8a.  v3:= 0I;
  #L11dc8c.  call temp:= `valueOf`(v6) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L11dc92.  v4:= temp @kind object;
  #L11dc94.  v2[v3]:= v4 @kind object;
  #L11dc98.  v3:= 1I;
  #L11dc9a.  call temp:= `valueOf`(v8) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L11dca0.  v4:= temp @kind object;
  #L11dca2.  v2[v3]:= v4 @kind object;
  #L11dca6.  v3:= 2I;
  #L11dca8.  call temp:= `valueOf`(v10) @signature `Ljava/lang/Long;.valueOf:(J)Ljava/lang/Long;` @kind static;
  #L11dcae.  v4:= temp @kind object;
  #L11dcb0.  v2[v3]:= v4 @kind object;
  #L11dcb4.  call temp:= `format`(v1, v2) @signature `Ljava/lang/String;.format:(Ljava/lang/String;[Ljava/lang/Object;)Ljava/lang/String;` @kind static;
  #L11dcba.  v1:= temp @kind object;
  #L11dcbc.  call `<init>`(v0, v1) @signature `Ljava/lang/ArrayIndexOutOfBoundsException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11dcc2.  throw v0;
  #L11dcc4.  return @kind void;
}
procedure `void` `a`(`java.lang.Throwable` v0 @kind object) @signature `Lb/t;.a:(Ljava/lang/Throwable;)V` @AccessFlag PUBLIC_STATIC {
    temp;

  #L11dcd8.  call `b`(v0) @signature `Lb/t;.b:(Ljava/lang/Throwable;)V` @kind static;
  #L11dcde.  return @kind void;
}
procedure `boolean` `a`(`byte`[] v4 @kind object, `int` v5 , `byte`[] v6 @kind object, `int` v7 , `int` v8 ) @signature `Lb/t;.a:([BI[BII)Z` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11dcf0.  v0:= 0I;
  #L11dcf2.  v1:= v0;
  #L11dcf4.  if v1 >= v8 then goto L11dd14;
  #L11dcf8.  v2:= v1 + v5 @kind int;
  #L11dcfc.  v2:= v4[v2] @kind byte;
  #L11dd00.  v3:= v1 + v7 @kind int;
  #L11dd04.  v3:= v6[v3] @kind byte;
  #L11dd08.  if v2 == v3 then goto L11dd0e;
  #L11dd0c.  return v0;
  #L11dd0e.  v1:= v1 + 1;
  #L11dd12.  goto L11dcf4;
  #L11dd14.  v0:= 1I;
  #L11dd16.  goto L11dd0c;
}
procedure `void` `b`(`java.lang.Throwable` v0 @kind object) @signature `Lb/t;.b:(Ljava/lang/Throwable;)V` @AccessFlag PRIVATE_STATIC {
    temp;

  #L11dd28.  throw v0;
}
