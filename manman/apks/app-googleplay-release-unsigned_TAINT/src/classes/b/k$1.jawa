record `b.k$1` @kind class @AccessFlag FINAL extends `b.q` @kind interface {
  `b.s` `b.k$1.a` @AccessFlag FINAL_SYNTHETIC;
  `java.io.OutputStream` `b.k$1.b` @AccessFlag FINAL_SYNTHETIC;
}
procedure `void` `<init>`(`b.k$1` v0 @kind this, `b.s` v1 @kind object, `java.io.OutputStream` v2 @kind object) @signature `Lb/k$1;.<init>:(Lb/s;Ljava/io/OutputStream;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11be24.  v0.`b.k$1.a` @type ^`b.s` := v1 @kind object;
  #L11be28.  v0.`b.k$1.b` @type ^`java.io.OutputStream` := v2 @kind object;
  #L11be2c.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11be32.  return @kind void;
}
procedure `b.s` `a`(`b.k$1` v1 @kind this) @signature `Lb/k$1;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11be44.  v0:= v1.`b.k$1.a` @type ^`b.s` @kind object;
  #L11be48.  return v0 @kind object;
}
procedure `void` `a_`(`b.k$1` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `Lb/k$1;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11be5c.  v2:= 0L;
  #L11be60.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11be64.  v4:= v10 @kind wide;
  #L11be66.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11be6c.  v0:= lcmp(v10, v2);
  #L11be70.  if v0 <= 0 then goto L11bee4;
  #L11be74.  v0:= v8.`b.k$1.a` @type ^`b.s` @kind object;
  #L11be78.  call `g`(v0) @signature `Lb/s;.g:()V` @kind virtual;
  #L11be7e.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L11be82.  v1:= v0.`b.n.c` @type ^`int`;
  #L11be86.  v4:= v0.`b.n.b` @type ^`int`;
  #L11be8a.  v1:= v1 - v4 @kind int;
  #L11be8c.  v4:= (`long`) v1 @kind i2l;
  #L11be8e.  call temp:= `min`(v10, v4) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11be94.  v4:= temp @kind wide;
  #L11be96.  v1:= (`int`) v4 @kind l2i;
  #L11be98.  v4:= v8.`b.k$1.b` @type ^`java.io.OutputStream` @kind object;
  #L11be9c.  v5:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11bea0.  v6:= v0.`b.n.b` @type ^`int`;
  #L11bea4.  call `write`(v4, v5, v6, v1) @signature `Ljava/io/OutputStream;.write:([BII)V` @kind virtual;
  #L11beaa.  v4:= v0.`b.n.b` @type ^`int`;
  #L11beae.  v4:= v4 + v1 @kind int;
  #L11beb0.  v0.`b.n.b` @type ^`int` := v4;
  #L11beb4.  v4:= (`long`) v1 @kind i2l;
  #L11beb6.  v10:= v10 - v4 @kind long;
  #L11beb8.  v4:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11bebc.  v6:= (`long`) v1 @kind i2l;
  #L11bebe.  v4:= v4 - v6 @kind long;
  #L11bec0.  v9.`b.c.b` @type ^`long` := v4 @kind wide;
  #L11bec4.  v1:= v0.`b.n.b` @type ^`int`;
  #L11bec8.  v4:= v0.`b.n.c` @type ^`int`;
  #L11becc.  if v1 != v4 then goto L11be6c;
  #L11bed0.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11bed6.  v1:= temp @kind object;
  #L11bed8.  v9.`b.c.a` @type ^`b.n` := v1 @kind object;
  #L11bedc.  call `a`(v0) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11bee2.  goto L11be6c;
  #L11bee4.  return @kind void;
}
procedure `void` `close`(`b.k$1` v1 @kind this) @signature `Lb/k$1;.close:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11bef8.  v0:= v1.`b.k$1.b` @type ^`java.io.OutputStream` @kind object;
  #L11befc.  call `close`(v0) @signature `Ljava/io/OutputStream;.close:()V` @kind virtual;
  #L11bf02.  return @kind void;
}
procedure `void` `flush`(`b.k$1` v1 @kind this) @signature `Lb/k$1;.flush:()V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11bf14.  v0:= v1.`b.k$1.b` @type ^`java.io.OutputStream` @kind object;
  #L11bf18.  call `flush`(v0) @signature `Ljava/io/OutputStream;.flush:()V` @kind virtual;
  #L11bf1e.  return @kind void;
}
procedure `java.lang.String` `toString`(`b.k$1` v2 @kind this) @signature `Lb/k$1;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11bf30.  v0:= new `java.lang.StringBuilder`;
  #L11bf34.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11bf3a.  v1:= "sink(" @kind object;
  #L11bf3e.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bf44.  v0:= temp @kind object;
  #L11bf46.  v1:= v2.`b.k$1.b` @type ^`java.io.OutputStream` @kind object;
  #L11bf4a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/Object;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bf50.  v0:= temp @kind object;
  #L11bf52.  v1:= ")" @kind object;
  #L11bf56.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11bf5c.  v0:= temp @kind object;
  #L11bf5e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11bf64.  v0:= temp @kind object;
  #L11bf66.  return v0 @kind object;
}
