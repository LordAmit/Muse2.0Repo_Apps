record `b.b` @kind class @AccessFlag FINAL {
}
global `byte`[] `@@b.b.a` @AccessFlag PRIVATE_STATIC_FINAL;
global `byte`[] `@@b.b.b` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/b;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L118b10.  v1:= 64I;
  #L118b14.  v0:= new `byte`[v1];
  #L118b18.  goto L118b34;
  #L118b1e.  `@@b.b.a` @type ^`byte`[] := v0 @kind object;
  #L118b22.  v0:= new `byte`[v1];
  #L118b26.  goto L118b7c;
  #L118b2c.  `@@b.b.b` @type ^`byte`[] := v0 @kind object;
  #L118b30.  return @kind void;
  #L118b32.  
  #L118b34.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 43I, 47I) @kind object;
  #L118b7b.  goto L118b1e;
  #L118b7c.  v0:= (65I, 66I, 67I, 68I, 69I, 70I, 71I, 72I, 73I, 74I, 75I, 76I, 77I, 78I, 79I, 80I, 81I, 82I, 83I, 84I, 85I, 86I, 87I, 88I, 89I, 90I, 97I, 98I, 99I, 100I, 101I, 102I, 103I, 104I, 105I, 106I, 107I, 108I, 109I, 110I, 111I, 112I, 113I, 114I, 115I, 116I, 117I, 118I, 119I, 120I, 121I, 122I, 48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 45I, 95I) @kind object;
  #L118bc3.  goto L118b2c;
}
procedure `java.lang.String` `a`(`byte`[] v1 @kind object) @signature `Lb/b;.a:([B)Ljava/lang/String;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L118bd4.  v0:= `@@b.b.a` @type ^`byte`[] @kind object;
  #L118bd8.  call temp:= `a`(v1, v0) @signature `Lb/b;.a:([B[B)Ljava/lang/String;` @kind static;
  #L118bde.  v0:= temp @kind object;
  #L118be0.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`byte`[] v8 @kind object, `byte`[] v9 @kind object) @signature `Lb/b;.a:([B[B)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L118bf4.  v0:= 0I;
  #L118bf6.  v7:= 61I;
  #L118bfa.  v1:= length @variable v8;
  #L118bfc.  v1:= v1 + 2;
  #L118c00.  v1:= v1 / 3;
  #L118c04.  v1:= v1 * 4;
  #L118c08.  v2:= new `byte`[v1];
  #L118c0c.  v1:= length @variable v8;
  #L118c0e.  v3:= length @variable v8;
  #L118c10.  v3:= v3 %% 3;
  #L118c14.  v3:= v1 - v3 @kind int;
  #L118c18.  v1:= v0;
  #L118c1a.  if v0 >= v3 then goto L118cac;
  #L118c1e.  v4:= v1 + 1;
  #L118c22.  v5:= v8[v0] @kind byte;
  #L118c26.  v5:= v5 ^& 255;
  #L118c2a.  v5:= v5 ^> 2;
  #L118c2e.  v5:= v9[v5] @kind byte;
  #L118c32.  v2[v1]:= v5 @kind byte;
  #L118c36.  v1:= v4 + 1;
  #L118c3a.  v5:= v8[v0] @kind byte;
  #L118c3e.  v5:= v5 ^& 3;
  #L118c42.  v5:= v5 ^< 4;
  #L118c46.  v6:= v0 + 1;
  #L118c4a.  v6:= v8[v6] @kind byte;
  #L118c4e.  v6:= v6 ^& 255;
  #L118c52.  v6:= v6 ^> 4;
  #L118c56.  v5:= v5 ^| v6 @kind int;
  #L118c58.  v5:= v9[v5] @kind byte;
  #L118c5c.  v2[v4]:= v5 @kind byte;
  #L118c60.  v4:= v1 + 1;
  #L118c64.  v5:= v0 + 1;
  #L118c68.  v5:= v8[v5] @kind byte;
  #L118c6c.  v5:= v5 ^& 15;
  #L118c70.  v5:= v5 ^< 2;
  #L118c74.  v6:= v0 + 2;
  #L118c78.  v6:= v8[v6] @kind byte;
  #L118c7c.  v6:= v6 ^& 255;
  #L118c80.  v6:= v6 ^> 6;
  #L118c84.  v5:= v5 ^| v6 @kind int;
  #L118c86.  v5:= v9[v5] @kind byte;
  #L118c8a.  v2[v1]:= v5 @kind byte;
  #L118c8e.  v1:= v4 + 1;
  #L118c92.  v5:= v0 + 2;
  #L118c96.  v5:= v8[v5] @kind byte;
  #L118c9a.  v5:= v5 ^& 63;
  #L118c9e.  v5:= v9[v5] @kind byte;
  #L118ca2.  v2[v4]:= v5 @kind byte;
  #L118ca6.  v0:= v0 + 3;
  #L118caa.  goto L118c1a;
  #L118cac.  v0:= length @variable v8;
  #L118cae.  v0:= v0 %% 3;
  #L118cb2.  goto L118d80;
  #Try_start0.  
  #L118cb8.  v0:= new `java.lang.String`;
  #L118cbc.  v1:= "US-ASCII" @kind object;
  #L118cc0.  call `<init>`(v0, v2, v1) @signature `Ljava/lang/String;.<init>:([BLjava/lang/String;)V` @kind direct;
  #Try_end0.  
  #L118cc6.  return v0 @kind object;
  #L118cc8.  v0:= v1 + 1;
  #L118ccc.  v4:= v8[v3] @kind byte;
  #L118cd0.  v4:= v4 ^& 255;
  #L118cd4.  v4:= v4 ^> 2;
  #L118cd8.  v4:= v9[v4] @kind byte;
  #L118cdc.  v2[v1]:= v4 @kind byte;
  #L118ce0.  v1:= v0 + 1;
  #L118ce4.  v3:= v8[v3] @kind byte;
  #L118ce8.  v3:= v3 ^& 3;
  #L118cec.  v3:= v3 ^< 4;
  #L118cf0.  v3:= v9[v3] @kind byte;
  #L118cf4.  v2[v0]:= v3 @kind byte;
  #L118cf8.  v0:= v1 + 1;
  #L118cfc.  v2[v1]:= v7 @kind byte;
  #L118d00.  v1:= v0 + 1;
  #L118d04.  v2[v0]:= v7 @kind byte;
  #L118d08.  goto L118cb8;
  #L118d0a.  v0:= v1 + 1;
  #L118d0e.  v4:= v8[v3] @kind byte;
  #L118d12.  v4:= v4 ^& 255;
  #L118d16.  v4:= v4 ^> 2;
  #L118d1a.  v4:= v9[v4] @kind byte;
  #L118d1e.  v2[v1]:= v4 @kind byte;
  #L118d22.  v1:= v0 + 1;
  #L118d26.  v4:= v8[v3] @kind byte;
  #L118d2a.  v4:= v4 ^& 3;
  #L118d2e.  v4:= v4 ^< 4;
  #L118d32.  v5:= v3 + 1;
  #L118d36.  v5:= v8[v5] @kind byte;
  #L118d3a.  v5:= v5 ^& 255;
  #L118d3e.  v5:= v5 ^> 4;
  #L118d42.  v4:= v4 ^| v5 @kind int;
  #L118d44.  v4:= v9[v4] @kind byte;
  #L118d48.  v2[v0]:= v4 @kind byte;
  #L118d4c.  v0:= v1 + 1;
  #L118d50.  v3:= v3 + 1;
  #L118d54.  v3:= v8[v3] @kind byte;
  #L118d58.  v3:= v3 ^& 15;
  #L118d5c.  v3:= v3 ^< 2;
  #L118d60.  v3:= v9[v3] @kind byte;
  #L118d64.  v2[v1]:= v3 @kind byte;
  #L118d68.  v1:= v0 + 1;
  #L118d6c.  v2[v0]:= v7 @kind byte;
  #L118d70.  goto L118cb8;
  #L118d72.  v0:= Exception @type ^`java.io.UnsupportedEncodingException` @kind object;
  #L118d74.  v1:= new `java.lang.AssertionError`;
  #L118d78.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L118d7e.  throw v1;
  #L118d80.  switch v0
                  | 1 => goto L118cc8
                  | 2 => goto L118d0a
                  | else => goto L118cb8;
  catch `java.io.UnsupportedEncodingException` @[Try_start0..Try_end0] goto L118d72;
}
