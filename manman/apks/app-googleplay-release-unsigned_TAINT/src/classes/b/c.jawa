record `b.c` @kind class @AccessFlag PUBLIC_FINAL extends `b.d` @kind interface, `b.e` @kind interface, `java.lang.Cloneable` @kind interface {
  `b.n` `b.c.a` @AccessFlag ;
  `long` `b.c.b` @AccessFlag ;
}
global `byte`[] `@@b.c.c` @AccessFlag PRIVATE_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/c;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L118ea4.  v0:= 16I;
  #L118ea8.  v0:= new `byte`[v0];
  #L118eac.  goto L118eb8;
  #L118eb2.  `@@b.c.c` @type ^`byte`[] := v0 @kind object;
  #L118eb6.  return @kind void;
  #L118eb8.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L118ecf.  goto L118eb2;
}
procedure `void` `<init>`(`b.c` v0 @kind this) @signature `Lb/c;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L118ee0.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L118ee6.  return @kind void;
}
procedure `int` `a`(`b.c` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lb/c;.a:([BII)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L118ef8.  v0:= length @variable v7;
  #L118efa.  v0:= (`long`) v0 @kind i2l;
  #L118efc.  v2:= (`long`) v8 @kind i2l;
  #L118efe.  v4:= (`long`) v9 @kind i2l;
  #L118f00.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L118f06.  v1:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L118f0a.  if v1 != 0 then goto L118f12;
  #L118f0e.  v0:= -1I;
  #L118f10.  return v0;
  #L118f12.  v0:= v1.`b.n.c` @type ^`int`;
  #L118f16.  v2:= v1.`b.n.b` @type ^`int`;
  #L118f1a.  v0:= v0 - v2 @kind int;
  #L118f1c.  call temp:= `min`(v9, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L118f22.  v0:= temp;
  #L118f24.  v2:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L118f28.  v3:= v1.`b.n.b` @type ^`int`;
  #L118f2c.  call `arraycopy`(v2, v3, v7, v8, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L118f32.  v2:= v1.`b.n.b` @type ^`int`;
  #L118f36.  v2:= v2 + v0 @kind int;
  #L118f38.  v1.`b.n.b` @type ^`int` := v2;
  #L118f3c.  v2:= v6.`b.c.b` @type ^`long` @kind wide;
  #L118f40.  v4:= (`long`) v0 @kind i2l;
  #L118f42.  v2:= v2 - v4 @kind long;
  #L118f44.  v6.`b.c.b` @type ^`long` := v2 @kind wide;
  #L118f48.  v2:= v1.`b.n.b` @type ^`int`;
  #L118f4c.  v3:= v1.`b.n.c` @type ^`int`;
  #L118f50.  if v2 != v3 then goto L118f10;
  #L118f54.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L118f5a.  v2:= temp @kind object;
  #L118f5c.  v6.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L118f60.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L118f66.  goto L118f10;
}
procedure `long` `a`(`b.c` v2 @kind this, `byte` v3 ) @signature `Lb/c;.a:(B)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L118f78.  v0:= 0L;
  #L118f7c.  call temp:= `a`(v2, v3, v0) @signature `Lb/c;.a:(BJ)J` @kind virtual;
  #L118f82.  v0:= temp @kind wide;
  #L118f84.  return v0 @kind wide;
}
procedure `long` `a`(`b.c` v10 @kind this, `byte` v11 , `long` v12 ) @signature `Lb/c;.a:(BJ)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L118f98.  v0:= 0L;
  #L118f9c.  v6:= -1L;
  #L118fa0.  v2:= lcmp(v12, v0);
  #L118fa4.  if v2 >= 0 then goto L118fb8;
  #L118fa8.  v0:= new `java.lang.IllegalArgumentException`;
  #L118fac.  v1:= "fromIndex < 0" @kind object;
  #L118fb0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L118fb6.  throw v0;
  #L118fb8.  v2:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L118fbc.  if v2 != 0 then goto L118fc4;
  #L118fc0.  v0:= v6 @kind wide;
  #L118fc2.  return v0 @kind wide;
  #L118fc4.  v4:= v10.`b.c.b` @type ^`long` @kind wide;
  #L118fc8.  v4:= v4 - v12 @kind long;
  #L118fca.  v3:= lcmp(v4, v12);
  #L118fce.  if v3 >= 0 then goto L118ff4;
  #L118fd2.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L118fd6.  v4:= v2 @kind object;
  #L118fd8.  v2:= lcmp(v0, v12);
  #L118fdc.  if v2 <= 0 then goto L11902a;
  #L118fe0.  v4:= v4.`b.n.g` @type ^`b.n` @kind object;
  #L118fe4.  v2:= v4.`b.n.c` @type ^`int`;
  #L118fe8.  v3:= v4.`b.n.b` @type ^`int`;
  #L118fec.  v2:= v2 - v3 @kind int;
  #L118fee.  v2:= (`long`) v2 @kind i2l;
  #L118ff0.  v0:= v0 - v2 @kind long;
  #L118ff2.  goto L118fd8;
  #L118ff4.  v4:= v2 @kind object;
  #L118ff6.  v2:= v4.`b.n.c` @type ^`int`;
  #L118ffa.  v3:= v4.`b.n.b` @type ^`int`;
  #L118ffe.  v2:= v2 - v3 @kind int;
  #L119000.  v2:= (`long`) v2 @kind i2l;
  #L119002.  v2:= v2 + v0 @kind long;
  #L119004.  v5:= lcmp(v2, v12);
  #L119008.  if v5 >= 0 then goto L11902a;
  #L11900c.  v0:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L119010.  v4:= v0 @kind object;
  #L119012.  v0:= v2 @kind wide;
  #L119014.  goto L118ff6;
  #L119016.  v2:= v4.`b.n.c` @type ^`int`;
  #L11901a.  v3:= v4.`b.n.b` @type ^`int`;
  #L11901e.  v2:= v2 - v3 @kind int;
  #L119020.  v2:= (`long`) v2 @kind i2l;
  #L119022.  v0:= v0 + v2 @kind long;
  #L119024.  v4:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L119028.  v12:= v0 @kind wide;
  #L11902a.  v2:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11902e.  v2:= lcmp(v0, v2);
  #L119032.  if v2 >= 0 then goto L119068;
  #L119036.  v3:= v4.`b.n.a` @type ^`byte`[] @kind object;
  #L11903a.  v2:= v4.`b.n.b` @type ^`int`;
  #L11903e.  v8:= (`long`) v2 @kind i2l;
  #L119040.  v8:= v8 + v12 @kind long;
  #L119042.  v8:= v8 - v0 @kind long;
  #L119044.  v2:= (`int`) v8 @kind l2i;
  #L119046.  v5:= v4.`b.n.c` @type ^`int`;
  #L11904a.  if v2 >= v5 then goto L119016;
  #L11904e.  v8:= v3[v2] @kind byte;
  #L119052.  if v8 != v11 then goto L119062;
  #L119056.  v3:= v4.`b.n.b` @type ^`int`;
  #L11905a.  v2:= v2 - v3 @kind int;
  #L11905c.  v2:= (`long`) v2 @kind i2l;
  #L11905e.  v0:= v0 + v2 @kind long;
  #L119060.  goto L118fc2;
  #L119062.  v2:= v2 + 1;
  #L119066.  goto L11904a;
  #L119068.  v0:= v6 @kind wide;
  #L11906a.  goto L118fc2;
}
procedure `long` `a`(`b.c` v4 @kind this, `b.c` v5 @kind object, `long` v6 ) @signature `Lb/c;.a:(Lb/c;J)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11907c.  v2:= 0L;
  #L119080.  if v5 != 0 then goto L119094;
  #L119084.  v0:= new `java.lang.IllegalArgumentException`;
  #L119088.  v1:= "sink == null" @kind object;
  #L11908c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119092.  throw v0;
  #L119094.  v0:= lcmp(v6, v2);
  #L119098.  if v0 >= 0 then goto L1190ce;
  #L11909c.  v0:= new `java.lang.IllegalArgumentException`;
  #L1190a0.  v1:= new `java.lang.StringBuilder`;
  #L1190a4.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1190aa.  v2:= "byteCount < 0: " @kind object;
  #L1190ae.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1190b4.  v1:= temp @kind object;
  #L1190b6.  call temp:= `append`(v1, v6) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1190bc.  v1:= temp @kind object;
  #L1190be.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1190c4.  v1:= temp @kind object;
  #L1190c6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1190cc.  throw v0;
  #L1190ce.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L1190d2.  v0:= lcmp(v0, v2);
  #L1190d6.  if v0 != 0 then goto L1190e0;
  #L1190da.  v6:= -1L;
  #L1190de.  return v6 @kind wide;
  #L1190e0.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L1190e4.  v0:= lcmp(v6, v0);
  #L1190e8.  if v0 <= 0 then goto L1190f0;
  #L1190ec.  v6:= v4.`b.c.b` @type ^`long` @kind wide;
  #L1190f0.  call `a_`(v5, v4, v6) @signature `Lb/c;.a_:(Lb/c;J)V` @kind virtual;
  #L1190f6.  goto L1190de;
}
procedure `long` `a`(`b.c` v6 @kind this, `b.r` v7 @kind object) @signature `Lb/c;.a:(Lb/r;)J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L119108.  if v7 != 0 then goto L11911c;
  #L11910c.  v0:= new `java.lang.IllegalArgumentException`;
  #L119110.  v1:= "source == null" @kind object;
  #L119114.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11911a.  throw v0;
  #L11911c.  v0:= 0L;
  #L119120.  v2:= 8192L;
  #L119124.  call temp:= `a`(v7, v6, v2) @signature `Lb/r;.a:(Lb/c;J)J` @kind interface;
  #L11912a.  v2:= temp @kind wide;
  #L11912c.  v4:= -1L;
  #L119130.  v4:= lcmp(v2, v4);
  #L119134.  if v4 == 0 then goto L11913c;
  #L119138.  v0:= v0 + v2 @kind long;
  #L11913a.  goto L119120;
  #L11913c.  return v0 @kind wide;
}
procedure `b.c` `a`(`b.c` v3 @kind this, `int` v4 ) @signature `Lb/c;.a:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L119150.  v0:= 128I;
  #L119154.  if v4 >= v0 then goto L119160;
  #L119158.  call temp:= `b`(v3, v4) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11915e.  return v3 @kind object;
  #L119160.  v0:= 2048I;
  #L119164.  if v4 >= v0 then goto L119186;
  #L119168.  v0:= v4 ^> 6;
  #L11916c.  v0:= v0 ^| 192;
  #L119170.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119176.  v0:= v4 ^& 63;
  #L11917a.  v0:= v0 ^| 128;
  #L11917e.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119184.  goto L11915e;
  #L119186.  v0:= 65536I;
  #L11918a.  if v4 >= v0 then goto L11920c;
  #L11918e.  v0:= 55296I;
  #L119194.  if v4 < v0 then goto L1191dc;
  #L119198.  v0:= 57343I;
  #L11919e.  if v4 > v0 then goto L1191dc;
  #L1191a2.  v0:= new `java.lang.IllegalArgumentException`;
  #L1191a6.  v1:= new `java.lang.StringBuilder`;
  #L1191aa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1191b0.  v2:= "Unexpected code point: " @kind object;
  #L1191b4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1191ba.  v1:= temp @kind object;
  #L1191bc.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L1191c2.  v2:= temp @kind object;
  #L1191c4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1191ca.  v1:= temp @kind object;
  #L1191cc.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1191d2.  v1:= temp @kind object;
  #L1191d4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1191da.  throw v0;
  #L1191dc.  v0:= v4 ^> 12;
  #L1191e0.  v0:= v0 ^| 224;
  #L1191e4.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L1191ea.  v0:= v4 ^> 6;
  #L1191ee.  v0:= v0 ^& 63;
  #L1191f2.  v0:= v0 ^| 128;
  #L1191f6.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L1191fc.  v0:= v4 ^& 63;
  #L119200.  v0:= v0 ^| 128;
  #L119204.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11920a.  goto L11915e;
  #L11920c.  v0:= 1114111I;
  #L119212.  if v4 > v0 then goto L119258;
  #L119216.  v0:= v4 ^> 18;
  #L11921a.  v0:= v0 ^| 240;
  #L11921e.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119224.  v0:= v4 ^> 12;
  #L119228.  v0:= v0 ^& 63;
  #L11922c.  v0:= v0 ^| 128;
  #L119230.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119236.  v0:= v4 ^> 6;
  #L11923a.  v0:= v0 ^& 63;
  #L11923e.  v0:= v0 ^| 128;
  #L119242.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119248.  v0:= v4 ^& 63;
  #L11924c.  v0:= v0 ^| 128;
  #L119250.  call temp:= `b`(v3, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119256.  goto L11915e;
  #L119258.  v0:= new `java.lang.IllegalArgumentException`;
  #L11925c.  v1:= new `java.lang.StringBuilder`;
  #L119260.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L119266.  v2:= "Unexpected code point: " @kind object;
  #L11926a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119270.  v1:= temp @kind object;
  #L119272.  call temp:= `toHexString`(v4) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L119278.  v2:= temp @kind object;
  #L11927a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119280.  v1:= temp @kind object;
  #L119282.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L119288.  v1:= temp @kind object;
  #L11928a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119290.  throw v0;
}
procedure `b.c` `a`(`b.c` v8 @kind this, `b.c` v9 @kind object, `long` v10 , `long` v12 ) @signature `Lb/c;.a:(Lb/c;JJ)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1192a4.  v6:= 0L;
  #L1192a8.  if v9 != 0 then goto L1192bc;
  #L1192ac.  v0:= new `java.lang.IllegalArgumentException`;
  #L1192b0.  v1:= "out == null" @kind object;
  #L1192b4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1192ba.  throw v0;
  #L1192bc.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L1192c0.  v2:= v10 @kind wide;
  #L1192c2.  v4:= v12 @kind wide;
  #L1192c4.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L1192ca.  v0:= lcmp(v12, v6);
  #L1192ce.  if v0 != 0 then goto L1192d4;
  #L1192d2.  return v8 @kind object;
  #L1192d4.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L1192d8.  v0:= v0 + v12 @kind long;
  #L1192da.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L1192de.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L1192e2.  v1:= v0.`b.n.c` @type ^`int`;
  #L1192e6.  v2:= v0.`b.n.b` @type ^`int`;
  #L1192ea.  v1:= v1 - v2 @kind int;
  #L1192ec.  v2:= (`long`) v1 @kind i2l;
  #L1192ee.  v1:= lcmp(v10, v2);
  #L1192f2.  if v1 < 0 then goto L11930a;
  #L1192f6.  v1:= v0.`b.n.c` @type ^`int`;
  #L1192fa.  v2:= v0.`b.n.b` @type ^`int`;
  #L1192fe.  v1:= v1 - v2 @kind int;
  #L119300.  v2:= (`long`) v1 @kind i2l;
  #L119302.  v10:= v10 - v2 @kind long;
  #L119304.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L119308.  goto L1192e2;
  #L11930a.  v1:= lcmp(v12, v6);
  #L11930e.  if v1 <= 0 then goto L1192d2;
  #L119312.  v1:= new `b.n`;
  #L119316.  call `<init>`(v1, v0) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L11931c.  v2:= v1.`b.n.b` @type ^`int`;
  #L119320.  v2:= (`long`) v2 @kind i2l;
  #L119322.  v2:= v2 + v10 @kind long;
  #L119324.  v2:= (`int`) v2 @kind l2i;
  #L119326.  v1.`b.n.b` @type ^`int` := v2;
  #L11932a.  v2:= v1.`b.n.b` @type ^`int`;
  #L11932e.  v3:= (`int`) v12 @kind l2i;
  #L119330.  v2:= v2 + v3 @kind int;
  #L119332.  v3:= v1.`b.n.c` @type ^`int`;
  #L119336.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11933c.  v2:= temp;
  #L11933e.  v1.`b.n.c` @type ^`int` := v2;
  #L119342.  v2:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L119346.  if v2 != 0 then goto L11936e;
  #L11934a.  v1.`b.n.g` @type ^`b.n` := v1 @kind object;
  #L11934e.  v1.`b.n.f` @type ^`b.n` := v1 @kind object;
  #L119352.  v9.`b.c.a` @type ^`b.n` := v1 @kind object;
  #L119356.  v2:= v1.`b.n.c` @type ^`int`;
  #L11935a.  v1:= v1.`b.n.b` @type ^`int`;
  #L11935e.  v1:= v2 - v1 @kind int;
  #L119362.  v2:= (`long`) v1 @kind i2l;
  #L119364.  v12:= v12 - v2 @kind long;
  #L119366.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11936a.  v10:= v6 @kind wide;
  #L11936c.  goto L11930a;
  #L11936e.  v2:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L119372.  v2:= v2.`b.n.g` @type ^`b.n` @kind object;
  #L119376.  call temp:= `a`(v2, v1) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11937c.  goto L119356;
}
procedure `b.c` `a`(`b.c` v2 @kind this, `b.f` v3 @kind object) @signature `Lb/c;.a:(Lb/f;)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L119390.  if v3 != 0 then goto L1193a4;
  #L119394.  v0:= new `java.lang.IllegalArgumentException`;
  #L119398.  v1:= "byteString == null" @kind object;
  #L11939c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1193a2.  throw v0;
  #L1193a4.  call `a`(v3, v2) @signature `Lb/f;.a:(Lb/c;)V` @kind virtual;
  #L1193aa.  return v2 @kind object;
}
procedure `b.c` `a`(`b.c` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L1193bc.  v0:= 0I;
  #L1193be.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1193c4.  v1:= temp;
  #L1193c6.  call temp:= `a`(v2, v3, v0, v1) @signature `Lb/c;.a:(Ljava/lang/String;II)Lb/c;` @kind virtual;
  #L1193cc.  v0:= temp @kind object;
  #L1193ce.  return v0 @kind object;
}
procedure `b.c` `a`(`b.c` v9 @kind this, `java.lang.String` v10 @kind object, `int` v11 , `int` v12 ) @signature `Lb/c;.a:(Ljava/lang/String;II)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L1193e0.  v8:= 57343I;
  #L1193e6.  v7:= 128I;
  #L1193ea.  if v10 != 0 then goto L1193fe;
  #L1193ee.  v0:= new `java.lang.IllegalArgumentException`;
  #L1193f2.  v1:= "string == null" @kind object;
  #L1193f6.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1193fc.  throw v0;
  #L1193fe.  if v11 >= 0 then goto L119434;
  #L119402.  v0:= new `java.lang.IllegalAccessError`;
  #L119406.  v1:= new `java.lang.StringBuilder`;
  #L11940a.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L119410.  v2:= "beginIndex < 0: " @kind object;
  #L119414.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11941a.  v1:= temp @kind object;
  #L11941c.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L119422.  v1:= temp @kind object;
  #L119424.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11942a.  v1:= temp @kind object;
  #L11942c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalAccessError;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119432.  throw v0;
  #L119434.  if v12 >= v11 then goto L11947e;
  #L119438.  v0:= new `java.lang.IllegalArgumentException`;
  #L11943c.  v1:= new `java.lang.StringBuilder`;
  #L119440.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L119446.  v2:= "endIndex < beginIndex: " @kind object;
  #L11944a.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119450.  v1:= temp @kind object;
  #L119452.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L119458.  v1:= temp @kind object;
  #L11945a.  v2:= " < " @kind object;
  #L11945e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119464.  v1:= temp @kind object;
  #L119466.  call temp:= `append`(v1, v11) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11946c.  v1:= temp @kind object;
  #L11946e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L119474.  v1:= temp @kind object;
  #L119476.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11947c.  throw v0;
  #L11947e.  call temp:= `length`(v10) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L119484.  v0:= temp;
  #L119486.  if v12 <= v0 then goto L119500;
  #L11948a.  v0:= new `java.lang.IllegalArgumentException`;
  #L11948e.  v1:= new `java.lang.StringBuilder`;
  #L119492.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L119498.  v2:= "endIndex > string.length: " @kind object;
  #L11949c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1194a2.  v1:= temp @kind object;
  #L1194a4.  call temp:= `append`(v1, v12) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1194aa.  v1:= temp @kind object;
  #L1194ac.  v2:= " > " @kind object;
  #L1194b0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1194b6.  v1:= temp @kind object;
  #L1194b8.  call temp:= `length`(v10) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L1194be.  v2:= temp;
  #L1194c0.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L1194c6.  v1:= temp @kind object;
  #L1194c8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1194ce.  v1:= temp @kind object;
  #L1194d0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1194d6.  throw v0;
  #L1194d8.  v0:= 0I;
  #L1194da.  v2:= 56319I;
  #L1194e0.  if v1 > v2 then goto L1194f2;
  #L1194e4.  v2:= 56320I;
  #L1194ea.  if v0 < v2 then goto L1194f2;
  #L1194ee.  if v0 <= v8 then goto L119608;
  #L1194f2.  v0:= 63I;
  #L1194f6.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L1194fc.  v11:= v11 + 1;
  #L119500.  if v11 >= v12 then goto L11966a;
  #L119504.  call temp:= `charAt`(v10, v11) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L11950a.  v1:= temp;
  #L11950c.  if v1 >= v7 then goto L119584;
  #L119510.  v0:= 1I;
  #L119512.  call temp:= `e`(v9, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L119518.  v2:= temp @kind object;
  #L11951a.  v3:= v2.`b.n.a` @type ^`byte`[] @kind object;
  #L11951e.  v0:= v2.`b.n.c` @type ^`int`;
  #L119522.  v4:= v0 - v11 @kind int;
  #L119526.  v0:= v4 - 8192;
  #L11952a.  call temp:= `min`(v12, v0) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L119530.  v5:= temp;
  #L119532.  v0:= v11 + 1;
  #L119536.  v6:= v4 + v11 @kind int;
  #L11953a.  v1:= (`byte`) v1 @kind i2b;
  #L11953c.  v3[v6]:= v1 @kind byte;
  #L119540.  if v0 >= v5 then goto L119550;
  #L119544.  call temp:= `charAt`(v10, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L11954a.  v6:= temp;
  #L11954c.  if v6 < v7 then goto L119574;
  #L119550.  v1:= v0 + v4 @kind int;
  #L119554.  v3:= v2.`b.n.c` @type ^`int`;
  #L119558.  v1:= v1 - v3 @kind int;
  #L11955a.  v3:= v2.`b.n.c` @type ^`int`;
  #L11955e.  v3:= v3 + v1 @kind int;
  #L119560.  v2.`b.n.c` @type ^`int` := v3;
  #L119564.  v2:= v9.`b.c.b` @type ^`long` @kind wide;
  #L119568.  v4:= (`long`) v1 @kind i2l;
  #L11956a.  v2:= v2 + v4 @kind long;
  #L11956c.  v9.`b.c.b` @type ^`long` := v2 @kind wide;
  #L119570.  v11:= v0;
  #L119572.  goto L119500;
  #L119574.  v1:= v0 + 1;
  #L119578.  v0:= v0 + v4 @kind int;
  #L11957a.  v6:= (`byte`) v6 @kind i2b;
  #L11957c.  v3[v0]:= v6 @kind byte;
  #L119580.  v0:= v1;
  #L119582.  goto L119540;
  #L119584.  v0:= 2048I;
  #L119588.  if v1 >= v0 then goto L1195ae;
  #L11958c.  v0:= v1 ^> 6;
  #L119590.  v0:= v0 ^| 192;
  #L119594.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11959a.  v0:= v1 ^& 63;
  #L11959e.  v0:= v0 ^| 128;
  #L1195a2.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L1195a8.  v0:= v11 + 1;
  #L1195ac.  goto L119570;
  #L1195ae.  v0:= 55296I;
  #L1195b4.  if v1 < v0 then goto L1195bc;
  #L1195b8.  if v1 <= v8 then goto L1195f0;
  #L1195bc.  v0:= v1 ^> 12;
  #L1195c0.  v0:= v0 ^| 224;
  #L1195c4.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L1195ca.  v0:= v1 ^> 6;
  #L1195ce.  v0:= v0 ^& 63;
  #L1195d2.  v0:= v0 ^| 128;
  #L1195d6.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L1195dc.  v0:= v1 ^& 63;
  #L1195e0.  v0:= v0 ^| 128;
  #L1195e4.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L1195ea.  v0:= v11 + 1;
  #L1195ee.  goto L119570;
  #L1195f0.  v0:= v11 + 1;
  #L1195f4.  if v0 >= v12 then goto L1194d8;
  #L1195f8.  v0:= v11 + 1;
  #L1195fc.  call temp:= `charAt`(v10, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L119602.  v0:= temp;
  #L119604.  goto L1194da;
  #L119608.  v2:= 65536I;
  #L11960c.  v3:= -55297I;
  #L119612.  v1:= v1 ^& v3 @kind int;
  #L119614.  v1:= v1 ^< 10;
  #L119618.  v3:= -56321I;
  #L11961e.  v0:= v0 ^& v3 @kind int;
  #L119620.  v0:= v0 ^| v1 @kind int;
  #L119622.  v0:= v0 + v2 @kind int;
  #L119624.  v1:= v0 ^> 18;
  #L119628.  v1:= v1 ^| 240;
  #L11962c.  call temp:= `b`(v9, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119632.  v1:= v0 ^> 12;
  #L119636.  v1:= v1 ^& 63;
  #L11963a.  v1:= v1 ^| 128;
  #L11963e.  call temp:= `b`(v9, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119644.  v1:= v0 ^> 6;
  #L119648.  v1:= v1 ^& 63;
  #L11964c.  v1:= v1 ^| 128;
  #L119650.  call temp:= `b`(v9, v1) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119656.  v0:= v0 ^& 63;
  #L11965a.  v0:= v0 ^| 128;
  #L11965e.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L119664.  v0:= v11 + 2;
  #L119668.  goto L119570;
  #L11966a.  return v9 @kind object;
}
procedure `b.s` `a`(`b.c` v1 @kind this) @signature `Lb/c;.a:()Lb/s;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11967c.  v0:= `@@b.s.b` @type ^`b.s` @kind object;
  #L119680.  return v0 @kind object;
}
procedure `java.lang.String` `a`(`b.c` v7 @kind this, `long` v8 , `java.nio.charset.Charset` v10 @kind object) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L119694.  v2:= 0L;
  #L119698.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11969c.  v4:= v8 @kind wide;
  #L11969e.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L1196a4.  if v10 != 0 then goto L1196b8;
  #L1196a8.  v0:= new `java.lang.IllegalArgumentException`;
  #L1196ac.  v1:= "charset == null" @kind object;
  #L1196b0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1196b6.  throw v0;
  #L1196b8.  v0:= 2147483647L;
  #L1196be.  v0:= lcmp(v8, v0);
  #L1196c2.  if v0 <= 0 then goto L1196f8;
  #L1196c6.  v0:= new `java.lang.IllegalArgumentException`;
  #L1196ca.  v1:= new `java.lang.StringBuilder`;
  #L1196ce.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L1196d4.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L1196d8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L1196de.  v1:= temp @kind object;
  #L1196e0.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L1196e6.  v1:= temp @kind object;
  #L1196e8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L1196ee.  v1:= temp @kind object;
  #L1196f0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1196f6.  throw v0;
  #L1196f8.  v0:= lcmp(v8, v2);
  #L1196fc.  if v0 != 0 then goto L119706;
  #L119700.  v0:= "" @kind object;
  #L119704.  return v0 @kind object;
  #L119706.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11970a.  v0:= v1.`b.n.b` @type ^`int`;
  #L11970e.  v2:= (`long`) v0 @kind i2l;
  #L119710.  v2:= v2 + v8 @kind long;
  #L119712.  v0:= v1.`b.n.c` @type ^`int`;
  #L119716.  v4:= (`long`) v0 @kind i2l;
  #L119718.  v0:= lcmp(v2, v4);
  #L11971c.  if v0 <= 0 then goto L119734;
  #L119720.  v0:= new `java.lang.String`;
  #L119724.  call temp:= `f`(v7, v8) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #L11972a.  v1:= temp @kind object;
  #L11972c.  call `<init>`(v0, v1, v10) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L119732.  goto L119704;
  #L119734.  v0:= new `java.lang.String`;
  #L119738.  v2:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11973c.  v3:= v1.`b.n.b` @type ^`int`;
  #L119740.  v4:= (`int`) v8 @kind l2i;
  #L119742.  call `<init>`(v0, v2, v3, v4, v10) @signature `Ljava/lang/String;.<init>:([BIILjava/nio/charset/Charset;)V` @kind direct;
  #L119748.  v2:= v1.`b.n.b` @type ^`int`;
  #L11974c.  v2:= (`long`) v2 @kind i2l;
  #L11974e.  v2:= v2 + v8 @kind long;
  #L119750.  v2:= (`int`) v2 @kind l2i;
  #L119752.  v1.`b.n.b` @type ^`int` := v2;
  #L119756.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11975a.  v2:= v2 - v8 @kind long;
  #L11975c.  v7.`b.c.b` @type ^`long` := v2 @kind wide;
  #L119760.  v2:= v1.`b.n.b` @type ^`int`;
  #L119764.  v3:= v1.`b.n.c` @type ^`int`;
  #L119768.  if v2 != v3 then goto L119704;
  #L11976c.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L119772.  v2:= temp @kind object;
  #L119774.  v7.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L119778.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11977e.  goto L119704;
}
procedure `java.lang.String` `a`(`b.c` v2 @kind this, `java.nio.charset.Charset` v3 @kind object) @signature `Lb/c;.a:(Ljava/nio/charset/Charset;)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L119790.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L119794.  call temp:= `a`(v2, v0, v3) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L11979a.  v0:= temp @kind object;
  #L11979c.  return v0 @kind object;
  #L11979e.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L1197a0.  v1:= new `java.lang.AssertionError`;
  #L1197a4.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L1197aa.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L11979e;
}
procedure `void` `a`(`b.c` v3 @kind this, `long` v4 ) @signature `Lb/c;.a:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1197cc.  v0:= v3.`b.c.b` @type ^`long` @kind wide;
  #L1197d0.  v0:= lcmp(v0, v4);
  #L1197d4.  if v0 >= 0 then goto L1197e4;
  #L1197d8.  v0:= new `java.io.EOFException`;
  #L1197dc.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L1197e2.  throw v0;
  #L1197e4.  return @kind void;
}
procedure `void` `a`(`b.c` v3 @kind this, `byte`[] v4 @kind object) @signature `Lb/c;.a:([B)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L1197f8.  v0:= 0I;
  #L1197fa.  v1:= length @variable v4;
  #L1197fc.  if v0 >= v1 then goto L119822;
  #L119800.  v1:= length @variable v4;
  #L119802.  v1:= v1 - v0 @kind int;
  #L119804.  call temp:= `a`(v3, v4, v0, v1) @signature `Lb/c;.a:([BII)I` @kind virtual;
  #L11980a.  v1:= temp;
  #L11980c.  v2:= -1I;
  #L11980e.  if v1 != v2 then goto L11981e;
  #L119812.  v0:= new `java.io.EOFException`;
  #L119816.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11981c.  throw v0;
  #L11981e.  v0:= v0 + v1 @kind int;
  #L119820.  goto L1197fa;
  #L119822.  return @kind void;
}
procedure `boolean` `a`(`b.c` v7 @kind this, `long` v8 , `b.f` v10 @kind object) @signature `Lb/c;.a:(JLb/f;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L119834.  v5:= 0I;
  #L119836.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11983c.  v6:= temp;
  #L11983e.  v1:= v7 @kind object;
  #L119840.  v2:= v8 @kind wide;
  #L119842.  v4:= v10 @kind object;
  #L119844.  call temp:= `a`(v1, v2, v4, v5, v6) @signature `Lb/c;.a:(JLb/f;II)Z` @kind virtual;
  #L11984a.  v0:= temp;
  #L11984c.  return v0;
}
procedure `boolean` `a`(`b.c` v7 @kind this, `long` v8 , `b.f` v10 @kind object, `int` v11 , `int` v12 ) @signature `Lb/c;.a:(JLb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L119860.  v0:= 0I;
  #L119862.  v2:= 0L;
  #L119866.  v1:= lcmp(v8, v2);
  #L11986a.  if v1 < 0 then goto L119894;
  #L11986e.  if v11 < 0 then goto L119894;
  #L119872.  if v12 < 0 then goto L119894;
  #L119876.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11987a.  v2:= v2 - v8 @kind long;
  #L11987c.  v4:= (`long`) v12 @kind i2l;
  #L11987e.  v1:= lcmp(v2, v4);
  #L119882.  if v1 < 0 then goto L119894;
  #L119886.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11988c.  v1:= temp;
  #L11988e.  v1:= v1 - v11 @kind int;
  #L119890.  if v1 >= v12 then goto L119896;
  #L119894.  return v0;
  #L119896.  v1:= v0;
  #L119898.  if v1 >= v12 then goto L1198be;
  #L11989c.  v2:= (`long`) v1 @kind i2l;
  #L11989e.  v2:= v2 + v8 @kind long;
  #L1198a0.  call temp:= `b`(v7, v2) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L1198a6.  v2:= temp;
  #L1198a8.  v3:= v11 + v1 @kind int;
  #L1198ac.  call temp:= `a`(v10, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L1198b2.  v3:= temp;
  #L1198b4.  if v2 != v3 then goto L119894;
  #L1198b8.  v1:= v1 + 1;
  #L1198bc.  goto L119898;
  #L1198be.  v0:= 1I;
  #L1198c0.  goto L119894;
}
procedure `void` `a_`(`b.c` v8 @kind this, `b.c` v9 @kind object, `long` v10 ) @signature `Lb/c;.a_:(Lb/c;J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L1198d4.  v2:= 0L;
  #L1198d8.  if v9 != 0 then goto L1198ec;
  #L1198dc.  v0:= new `java.lang.IllegalArgumentException`;
  #L1198e0.  v1:= "source == null" @kind object;
  #L1198e4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1198ea.  throw v0;
  #L1198ec.  if v9 != v8 then goto L119900;
  #L1198f0.  v0:= new `java.lang.IllegalArgumentException`;
  #L1198f4.  v1:= "source == this" @kind object;
  #L1198f8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L1198fe.  throw v0;
  #L119900.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L119904.  v4:= v10 @kind wide;
  #L119906.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L11990c.  v0:= lcmp(v10, v2);
  #L119910.  if v0 <= 0 then goto L119990;
  #L119914.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L119918.  v0:= v0.`b.n.c` @type ^`int`;
  #L11991c.  v1:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L119920.  v1:= v1.`b.n.b` @type ^`int`;
  #L119924.  v0:= v0 - v1 @kind int;
  #L119926.  v0:= (`long`) v0 @kind i2l;
  #L119928.  v0:= lcmp(v10, v0);
  #L11992c.  if v0 >= 0 then goto L1199b0;
  #L119930.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L119934.  if v0 == 0 then goto L119992;
  #L119938.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L11993c.  v0:= v0.`b.n.g` @type ^`b.n` @kind object;
  #L119940.  v1:= v0 @kind object;
  #L119942.  if v1 == 0 then goto L11999e;
  #L119946.  v0:= v1.`b.n.e` @type ^`boolean` @kind boolean;
  #L11994a.  if v0 == 0 then goto L11999e;
  #L11994e.  v0:= v1.`b.n.c` @type ^`int`;
  #L119952.  v4:= (`long`) v0 @kind i2l;
  #L119954.  v4:= v4 + v10 @kind long;
  #L119956.  v0:= v1.`b.n.d` @type ^`boolean` @kind boolean;
  #L11995a.  if v0 == 0 then goto L119998;
  #L11995e.  v0:= 0I;
  #L119960.  v6:= (`long`) v0 @kind i2l;
  #L119962.  v4:= v4 - v6 @kind long;
  #L119964.  v6:= 8192L;
  #L119968.  v0:= lcmp(v4, v6);
  #L11996c.  if v0 > 0 then goto L11999e;
  #L119970.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L119974.  v2:= (`int`) v10 @kind l2i;
  #L119976.  call `a`(v0, v1, v2) @signature `Lb/n;.a:(Lb/n;I)V` @kind virtual;
  #L11997c.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L119980.  v0:= v0 - v10 @kind long;
  #L119982.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L119986.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L11998a.  v0:= v0 + v10 @kind long;
  #L11998c.  v8.`b.c.b` @type ^`long` := v0 @kind wide;
  #L119990.  return @kind void;
  #L119992.  v0:= 0I;
  #L119994.  v1:= v0 @kind object;
  #L119996.  goto L119942;
  #L119998.  v0:= v1.`b.n.b` @type ^`int`;
  #L11999c.  goto L119960;
  #L11999e.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L1199a2.  v1:= (`int`) v10 @kind l2i;
  #L1199a4.  call temp:= `a`(v0, v1) @signature `Lb/n;.a:(I)Lb/n;` @kind virtual;
  #L1199aa.  v0:= temp @kind object;
  #L1199ac.  v9.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L1199b0.  v0:= v9.`b.c.a` @type ^`b.n` @kind object;
  #L1199b4.  v1:= v0.`b.n.c` @type ^`int`;
  #L1199b8.  v4:= v0.`b.n.b` @type ^`int`;
  #L1199bc.  v1:= v1 - v4 @kind int;
  #L1199be.  v4:= (`long`) v1 @kind i2l;
  #L1199c0.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L1199c6.  v1:= temp @kind object;
  #L1199c8.  v9.`b.c.a` @type ^`b.n` := v1 @kind object;
  #L1199cc.  v1:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L1199d0.  if v1 != 0 then goto L119a04;
  #L1199d4.  v8.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L1199d8.  v0:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L1199dc.  v1:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L1199e0.  v6:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L1199e4.  v1.`b.n.g` @type ^`b.n` := v6 @kind object;
  #L1199e8.  v0.`b.n.f` @type ^`b.n` := v6 @kind object;
  #L1199ec.  v0:= v9.`b.c.b` @type ^`long` @kind wide;
  #L1199f0.  v0:= v0 - v4 @kind long;
  #L1199f2.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L1199f6.  v0:= v8.`b.c.b` @type ^`long` @kind wide;
  #L1199fa.  v0:= v0 + v4 @kind long;
  #L1199fc.  v8.`b.c.b` @type ^`long` := v0 @kind wide;
  #L119a00.  v10:= v10 - v4 @kind long;
  #L119a02.  goto L11990c;
  #L119a04.  v1:= v8.`b.c.a` @type ^`b.n` @kind object;
  #L119a08.  v1:= v1.`b.n.g` @type ^`b.n` @kind object;
  #L119a0c.  call temp:= `a`(v1, v0) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L119a12.  v0:= temp @kind object;
  #L119a14.  call `b`(v0) @signature `Lb/n;.b:()V` @kind virtual;
  #L119a1a.  goto L1199ec;
}
procedure `byte` `b`(`b.c` v7 @kind this, `long` v8 ) @signature `Lb/c;.b:(J)B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L119a2c.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L119a30.  v4:= 1L;
  #L119a34.  v2:= v8 @kind wide;
  #L119a36.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L119a3c.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L119a40.  v1:= v0.`b.n.c` @type ^`int`;
  #L119a44.  v2:= v0.`b.n.b` @type ^`int`;
  #L119a48.  v1:= v1 - v2 @kind int;
  #L119a4a.  v2:= (`long`) v1 @kind i2l;
  #L119a4c.  v2:= lcmp(v8, v2);
  #L119a50.  if v2 >= 0 then goto L119a66;
  #L119a54.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L119a58.  v0:= v0.`b.n.b` @type ^`int`;
  #L119a5c.  v2:= (`int`) v8 @kind l2i;
  #L119a5e.  v0:= v0 + v2 @kind int;
  #L119a60.  v0:= v1[v0] @kind byte;
  #L119a64.  return v0;
  #L119a66.  v2:= (`long`) v1 @kind i2l;
  #L119a68.  v8:= v8 - v2 @kind long;
  #L119a6a.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L119a6e.  goto L119a40;
}
procedure `long` `b`(`b.c` v2 @kind this) @signature `Lb/c;.b:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L119a80.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L119a84.  return v0 @kind wide;
}
procedure `b.c` `b`(`b.c` v4 @kind this, `int` v5 ) @signature `Lb/c;.b:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L119a98.  v0:= 1I;
  #L119a9a.  call temp:= `e`(v4, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L119aa0.  v0:= temp @kind object;
  #L119aa2.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L119aa6.  v2:= v0.`b.n.c` @type ^`int`;
  #L119aaa.  v3:= v2 + 1;
  #L119aae.  v0.`b.n.c` @type ^`int` := v3;
  #L119ab2.  v0:= (`byte`) v5 @kind i2b;
  #L119ab4.  v1[v2]:= v0 @kind byte;
  #L119ab8.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L119abc.  v2:= 1L;
  #L119ac0.  v0:= v0 + v2 @kind long;
  #L119ac2.  v4.`b.c.b` @type ^`long` := v0 @kind wide;
  #L119ac6.  return v4 @kind object;
}
procedure `b.c` `b`(`b.c` v2 @kind this, `byte`[] v3 @kind object) @signature `Lb/c;.b:([B)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L119ad8.  if v3 != 0 then goto L119aec;
  #L119adc.  v0:= new `java.lang.IllegalArgumentException`;
  #L119ae0.  v1:= "source == null" @kind object;
  #L119ae4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119aea.  throw v0;
  #L119aec.  v0:= 0I;
  #L119aee.  v1:= length @variable v3;
  #L119af0.  call temp:= `b`(v2, v3, v0, v1) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L119af6.  v0:= temp @kind object;
  #L119af8.  return v0 @kind object;
}
procedure `b.c` `b`(`b.c` v6 @kind this, `byte`[] v7 @kind object, `int` v8 , `int` v9 ) @signature `Lb/c;.b:([BII)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L119b0c.  if v7 != 0 then goto L119b20;
  #L119b10.  v0:= new `java.lang.IllegalArgumentException`;
  #L119b14.  v1:= "source == null" @kind object;
  #L119b18.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119b1e.  throw v0;
  #L119b20.  v0:= length @variable v7;
  #L119b22.  v0:= (`long`) v0 @kind i2l;
  #L119b24.  v2:= (`long`) v8 @kind i2l;
  #L119b26.  v4:= (`long`) v9 @kind i2l;
  #L119b28.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L119b2e.  v0:= v8 + v9 @kind int;
  #L119b32.  if v8 >= v0 then goto L119b70;
  #L119b36.  v1:= 1I;
  #L119b38.  call temp:= `e`(v6, v1) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L119b3e.  v1:= temp @kind object;
  #L119b40.  v2:= v0 - v8 @kind int;
  #L119b44.  v3:= v1.`b.n.c` @type ^`int`;
  #L119b48.  v3:= v3 - 8192;
  #L119b4c.  call temp:= `min`(v2, v3) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L119b52.  v2:= temp;
  #L119b54.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L119b58.  v4:= v1.`b.n.c` @type ^`int`;
  #L119b5c.  call `arraycopy`(v7, v8, v3, v4, v2) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L119b62.  v8:= v8 + v2 @kind int;
  #L119b64.  v3:= v1.`b.n.c` @type ^`int`;
  #L119b68.  v2:= v2 + v3 @kind int;
  #L119b6a.  v1.`b.n.c` @type ^`int` := v2;
  #L119b6e.  goto L119b32;
  #L119b70.  v0:= v6.`b.c.b` @type ^`long` @kind wide;
  #L119b74.  v2:= (`long`) v9 @kind i2l;
  #L119b76.  v0:= v0 + v2 @kind long;
  #L119b78.  v6.`b.c.b` @type ^`long` := v0 @kind wide;
  #L119b7c.  return v6 @kind object;
}
procedure `b.d` `b`(`b.c` v1 @kind this, `java.lang.String` v2 @kind object) @signature `Lb/c;.b:(Ljava/lang/String;)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L119b90.  call temp:= `a`(v1, v2) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @kind virtual;
  #L119b96.  v0:= temp @kind object;
  #L119b98.  return v0 @kind object;
}
procedure `b.c` `c`(`b.c` v0 @kind this) @signature `Lb/c;.c:()Lb/c;` @AccessFlag PUBLIC {
    temp;

  #L119bac.  return v0 @kind object;
}
procedure `b.c` `c`(`b.c` v5 @kind this, `int` v6 ) @signature `Lb/c;.c:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L119bc0.  v0:= 2I;
  #L119bc2.  call temp:= `e`(v5, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L119bc8.  v0:= temp @kind object;
  #L119bca.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L119bce.  v2:= v0.`b.n.c` @type ^`int`;
  #L119bd2.  v3:= v2 + 1;
  #L119bd6.  v4:= v6 ^>> 8;
  #L119bda.  v4:= v4 ^& 255;
  #L119bde.  v4:= (`byte`) v4 @kind i2b;
  #L119be0.  v1[v2]:= v4 @kind byte;
  #L119be4.  v2:= v3 + 1;
  #L119be8.  v4:= v6 ^& 255;
  #L119bec.  v4:= (`byte`) v4 @kind i2b;
  #L119bee.  v1[v3]:= v4 @kind byte;
  #L119bf2.  v0.`b.n.c` @type ^`int` := v2;
  #L119bf6.  v0:= v5.`b.c.b` @type ^`long` @kind wide;
  #L119bfa.  v2:= 2L;
  #L119bfe.  v0:= v0 + v2 @kind long;
  #L119c00.  v5.`b.c.b` @type ^`long` := v0 @kind wide;
  #L119c04.  return v5 @kind object;
}
procedure `b.d` `c`(`b.c` v1 @kind this, `byte`[] v2 @kind object) @signature `Lb/c;.c:([B)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L119c18.  call temp:= `b`(v1, v2) @signature `Lb/c;.b:([B)Lb/c;` @kind virtual;
  #L119c1e.  v0:= temp @kind object;
  #L119c20.  return v0 @kind object;
}
procedure `b.d` `c`(`b.c` v1 @kind this, `byte`[] v2 @kind object, `int` v3 , `int` v4 ) @signature `Lb/c;.c:([BII)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L119c34.  call temp:= `b`(v1, v2, v3, v4) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L119c3a.  v0:= temp @kind object;
  #L119c3c.  return v0 @kind object;
}
procedure `b.f` `c`(`b.c` v3 @kind this, `long` v4 ) @signature `Lb/c;.c:(J)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L119c50.  v0:= new `b.f`;
  #L119c54.  call temp:= `f`(v3, v4) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #L119c5a.  v1:= temp @kind object;
  #L119c5c.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L119c62.  return v0 @kind object;
}
procedure `java.lang.Object` `clone`(`b.c` v1 @kind this) @signature `Lb/c;.clone:()Ljava/lang/Object;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L119c74.  call temp:= `s`(v1) @signature `Lb/c;.s:()Lb/c;` @kind virtual;
  #L119c7a.  v0:= temp @kind object;
  #L119c7c.  return v0 @kind object;
}
procedure `void` `close`(`b.c` v0 @kind this) @signature `Lb/c;.close:()V` @AccessFlag PUBLIC {
    temp;

  #L119c90.  return @kind void;
}
procedure `b.c` `d`(`b.c` v0 @kind this) @signature `Lb/c;.d:()Lb/c;` @AccessFlag PUBLIC {
    temp;

  #L119ca4.  return v0 @kind object;
}
procedure `b.c` `d`(`b.c` v5 @kind this, `int` v6 ) @signature `Lb/c;.d:(I)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L119cb8.  v0:= 4I;
  #L119cba.  call temp:= `e`(v5, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L119cc0.  v0:= temp @kind object;
  #L119cc2.  v1:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L119cc6.  v2:= v0.`b.n.c` @type ^`int`;
  #L119cca.  v3:= v2 + 1;
  #L119cce.  v4:= v6 ^>> 24;
  #L119cd2.  v4:= v4 ^& 255;
  #L119cd6.  v4:= (`byte`) v4 @kind i2b;
  #L119cd8.  v1[v2]:= v4 @kind byte;
  #L119cdc.  v2:= v3 + 1;
  #L119ce0.  v4:= v6 ^>> 16;
  #L119ce4.  v4:= v4 ^& 255;
  #L119ce8.  v4:= (`byte`) v4 @kind i2b;
  #L119cea.  v1[v3]:= v4 @kind byte;
  #L119cee.  v3:= v2 + 1;
  #L119cf2.  v4:= v6 ^>> 8;
  #L119cf6.  v4:= v4 ^& 255;
  #L119cfa.  v4:= (`byte`) v4 @kind i2b;
  #L119cfc.  v1[v2]:= v4 @kind byte;
  #L119d00.  v2:= v3 + 1;
  #L119d04.  v4:= v6 ^& 255;
  #L119d08.  v4:= (`byte`) v4 @kind i2b;
  #L119d0a.  v1[v3]:= v4 @kind byte;
  #L119d0e.  v0.`b.n.c` @type ^`int` := v2;
  #L119d12.  v0:= v5.`b.c.b` @type ^`long` @kind wide;
  #L119d16.  v2:= 4L;
  #L119d1a.  v0:= v0 + v2 @kind long;
  #L119d1c.  v5.`b.c.b` @type ^`long` := v0 @kind wide;
  #L119d20.  return v5 @kind object;
}
procedure `java.lang.String` `d`(`b.c` v1 @kind this, `long` v2 ) @signature `Lb/c;.d:(J)Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L119d34.  v0:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L119d38.  call temp:= `a`(v1, v2, v0) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #L119d3e.  v0:= temp @kind object;
  #L119d40.  return v0 @kind object;
}
procedure `b.n` `e`(`b.c` v3 @kind this, `int` v4 ) @signature `Lb/c;.e:(I)Lb/n;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L119d54.  v2:= 8192I;
  #L119d58.  v0:= 1I;
  #L119d5a.  if v4 < v0 then goto L119d62;
  #L119d5e.  if v4 <= v2 then goto L119d6e;
  #L119d62.  v0:= new `java.lang.IllegalArgumentException`;
  #L119d66.  call `<init>`(v0) @signature `Ljava/lang/IllegalArgumentException;.<init>:()V` @kind direct;
  #L119d6c.  throw v0;
  #L119d6e.  v0:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L119d72.  if v0 != 0 then goto L119d98;
  #L119d76.  call temp:= `a`() @signature `Lb/o;.a:()Lb/n;` @kind static;
  #L119d7c.  v0:= temp @kind object;
  #L119d7e.  v3.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L119d82.  v1:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L119d86.  v2:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L119d8a.  v0:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L119d8e.  v2.`b.n.g` @type ^`b.n` := v0 @kind object;
  #L119d92.  v1.`b.n.f` @type ^`b.n` := v0 @kind object;
  #L119d96.  return v0 @kind object;
  #L119d98.  v0:= v3.`b.c.a` @type ^`b.n` @kind object;
  #L119d9c.  v0:= v0.`b.n.g` @type ^`b.n` @kind object;
  #L119da0.  v1:= v0.`b.n.c` @type ^`int`;
  #L119da4.  v1:= v1 + v4 @kind int;
  #L119da6.  if v1 > v2 then goto L119db2;
  #L119daa.  v1:= v0.`b.n.e` @type ^`boolean` @kind boolean;
  #L119dae.  if v1 != 0 then goto L119d96;
  #L119db2.  call temp:= `a`() @signature `Lb/o;.a:()Lb/n;` @kind static;
  #L119db8.  v1:= temp @kind object;
  #L119dba.  call temp:= `a`(v0, v1) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L119dc0.  v0:= temp @kind object;
  #L119dc2.  goto L119d96;
}
procedure `java.lang.String` `e`(`b.c` v5 @kind this, `long` v6 ) @signature `Lb/c;.e:(J)Ljava/lang/String;` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L119dd4.  v2:= 1L;
  #L119dd8.  v0:= 0L;
  #L119ddc.  v0:= lcmp(v6, v0);
  #L119de0.  if v0 <= 0 then goto L119e10;
  #L119de4.  v0:= v6 - v2 @kind long;
  #L119de8.  call temp:= `b`(v5, v0) @signature `Lb/c;.b:(J)B` @kind virtual;
  #L119dee.  v0:= temp;
  #L119df0.  v1:= 13I;
  #L119df4.  if v0 != v1 then goto L119e10;
  #L119df8.  v0:= v6 - v2 @kind long;
  #L119dfc.  call temp:= `d`(v5, v0) @signature `Lb/c;.d:(J)Ljava/lang/String;` @kind virtual;
  #L119e02.  v0:= temp @kind object;
  #L119e04.  v2:= 2L;
  #L119e08.  call `g`(v5, v2) @signature `Lb/c;.g:(J)V` @kind virtual;
  #L119e0e.  return v0 @kind object;
  #L119e10.  call temp:= `d`(v5, v6) @signature `Lb/c;.d:(J)Ljava/lang/String;` @kind virtual;
  #L119e16.  v0:= temp @kind object;
  #L119e18.  call `g`(v5, v2) @signature `Lb/c;.g:(J)V` @kind virtual;
  #L119e1e.  goto L119e0e;
}
procedure `boolean` `e`(`b.c` v4 @kind this) @signature `Lb/c;.e:()Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L119e30.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L119e34.  v2:= 0L;
  #L119e38.  v0:= lcmp(v0, v2);
  #L119e3c.  if v0 != 0 then goto L119e44;
  #L119e40.  v0:= 1I;
  #L119e42.  return v0;
  #L119e44.  v0:= 0I;
  #L119e46.  goto L119e42;
}
procedure `boolean` `equals`(`b.c` v14 @kind this, `java.lang.Object` v15 @kind object) @signature `Lb/c;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;

  #L119e58.  v0:= 0L;
  #L119e5c.  v6:= 1I;
  #L119e5e.  v7:= 0I;
  #L119e60.  if v14 != v15 then goto L119e68;
  #L119e64.  v0:= v6;
  #L119e66.  return v0;
  #L119e68.  v2:= instanceof @variable v15 @type ^`b.c` @kind boolean;
  #L119e6c.  if v2 != 0 then goto L119e74;
  #L119e70.  v0:= v7;
  #L119e72.  goto L119e66;
  #L119e74.  v15:= (`b.c`) v15 @kind object;
  #L119e78.  v2:= v14.`b.c.b` @type ^`long` @kind wide;
  #L119e7c.  v4:= v15.`b.c.b` @type ^`long` @kind wide;
  #L119e80.  v2:= lcmp(v2, v4);
  #L119e84.  if v2 == 0 then goto L119e8c;
  #L119e88.  v0:= v7;
  #L119e8a.  goto L119e66;
  #L119e8c.  v2:= v14.`b.c.b` @type ^`long` @kind wide;
  #L119e90.  v2:= lcmp(v2, v0);
  #L119e94.  if v2 != 0 then goto L119e9c;
  #L119e98.  v0:= v6;
  #L119e9a.  goto L119e66;
  #L119e9c.  v5:= v14.`b.c.a` @type ^`b.n` @kind object;
  #L119ea0.  v4:= v15.`b.c.a` @type ^`b.n` @kind object;
  #L119ea4.  v3:= v5.`b.n.b` @type ^`int`;
  #L119ea8.  v2:= v4.`b.n.b` @type ^`int`;
  #L119eac.  v8:= v14.`b.c.b` @type ^`long` @kind wide;
  #L119eb0.  v8:= lcmp(v0, v8);
  #L119eb4.  if v8 >= 0 then goto L119f2a;
  #L119eb8.  v8:= v5.`b.n.c` @type ^`int`;
  #L119ebc.  v8:= v8 - v3 @kind int;
  #L119ebe.  v9:= v4.`b.n.c` @type ^`int`;
  #L119ec2.  v9:= v9 - v2 @kind int;
  #L119ec4.  call temp:= `min`(v8, v9) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L119eca.  v8:= temp;
  #L119ecc.  v10:= (`long`) v8 @kind i2l;
  #L119ece.  v8:= v7;
  #L119ed0.  v12:= (`long`) v8 @kind i2l;
  #L119ed2.  v9:= lcmp(v12, v10);
  #L119ed6.  if v9 >= 0 then goto L119f06;
  #L119eda.  v12:= v5.`b.n.a` @type ^`byte`[] @kind object;
  #L119ede.  v9:= v3 + 1;
  #L119ee2.  v12:= v12[v3] @kind byte;
  #L119ee6.  v13:= v4.`b.n.a` @type ^`byte`[] @kind object;
  #L119eea.  v3:= v2 + 1;
  #L119eee.  v2:= v13[v2] @kind byte;
  #L119ef2.  if v12 == v2 then goto L119efa;
  #L119ef6.  v0:= v7;
  #L119ef8.  goto L119e66;
  #L119efa.  v2:= v8 + 1;
  #L119efe.  v8:= v2;
  #L119f00.  v2:= v3;
  #L119f02.  v3:= v9;
  #L119f04.  goto L119ed0;
  #L119f06.  v8:= v5.`b.n.c` @type ^`int`;
  #L119f0a.  if v3 != v8 then goto L119f16;
  #L119f0e.  v5:= v5.`b.n.f` @type ^`b.n` @kind object;
  #L119f12.  v3:= v5.`b.n.b` @type ^`int`;
  #L119f16.  v8:= v4.`b.n.c` @type ^`int`;
  #L119f1a.  if v2 != v8 then goto L119f26;
  #L119f1e.  v4:= v4.`b.n.f` @type ^`b.n` @kind object;
  #L119f22.  v2:= v4.`b.n.b` @type ^`int`;
  #L119f26.  v0:= v0 + v10 @kind long;
  #L119f28.  goto L119eac;
  #L119f2a.  v0:= v6;
  #L119f2c.  goto L119e66;
}
procedure `b.f` `f`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.f:(I)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L119f40.  if v2 != 0 then goto L119f4a;
  #L119f44.  v0:= `@@b.f.b` @type ^`b.f` @kind object;
  #L119f48.  return v0 @kind object;
  #L119f4a.  v0:= new `b.p`;
  #L119f4e.  call `<init>`(v0, v1, v2) @signature `Lb/p;.<init>:(Lb/c;I)V` @kind direct;
  #L119f54.  goto L119f48;
}
procedure `java.io.InputStream` `f`(`b.c` v1 @kind this) @signature `Lb/c;.f:()Ljava/io/InputStream;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L119f68.  v0:= new `b.c$1`;
  #L119f6c.  call `<init>`(v0, v1) @signature `Lb/c$1;.<init>:(Lb/c;)V` @kind direct;
  #L119f72.  return v0 @kind object;
}
procedure `byte`[] `f`(`b.c` v7 @kind this, `long` v8 ) @signature `Lb/c;.f:(J)[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L119f84.  v0:= v7.`b.c.b` @type ^`long` @kind wide;
  #L119f88.  v2:= 0L;
  #L119f8c.  v4:= v8 @kind wide;
  #L119f8e.  call `a`(v0, v2, v4) @signature `Lb/t;.a:(JJJ)V` @kind static;
  #L119f94.  v0:= 2147483647L;
  #L119f9a.  v0:= lcmp(v8, v0);
  #L119f9e.  if v0 <= 0 then goto L119fd4;
  #L119fa2.  v0:= new `java.lang.IllegalArgumentException`;
  #L119fa6.  v1:= new `java.lang.StringBuilder`;
  #L119faa.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L119fb0.  v2:= "byteCount > Integer.MAX_VALUE: " @kind object;
  #L119fb4.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L119fba.  v1:= temp @kind object;
  #L119fbc.  call temp:= `append`(v1, v8) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L119fc2.  v1:= temp @kind object;
  #L119fc4.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L119fca.  v1:= temp @kind object;
  #L119fcc.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L119fd2.  throw v0;
  #L119fd4.  v0:= (`int`) v8 @kind l2i;
  #L119fd6.  v0:= new `byte`[v0];
  #L119fda.  call `a`(v7, v0) @signature `Lb/c;.a:([B)V` @kind virtual;
  #L119fe0.  return v0 @kind object;
}
procedure `void` `flush`(`b.c` v0 @kind this) @signature `Lb/c;.flush:()V` @AccessFlag PUBLIC {
    temp;

  #L119ff4.  return @kind void;
}
procedure `long` `g`(`b.c` v5 @kind this) @signature `Lb/c;.g:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11a008.  v2:= 0L;
  #L11a00c.  v0:= v5.`b.c.b` @type ^`long` @kind wide;
  #L11a010.  v4:= lcmp(v0, v2);
  #L11a014.  if v4 != 0 then goto L11a01c;
  #L11a018.  v0:= v2 @kind wide;
  #L11a01a.  return v0 @kind wide;
  #L11a01c.  v2:= v5.`b.c.a` @type ^`b.n` @kind object;
  #L11a020.  v2:= v2.`b.n.g` @type ^`b.n` @kind object;
  #L11a024.  v3:= v2.`b.n.c` @type ^`int`;
  #L11a028.  v4:= 8192I;
  #L11a02c.  if v3 >= v4 then goto L11a01a;
  #L11a030.  v3:= v2.`b.n.e` @type ^`boolean` @kind boolean;
  #L11a034.  if v3 == 0 then goto L11a01a;
  #L11a038.  v3:= v2.`b.n.c` @type ^`int`;
  #L11a03c.  v2:= v2.`b.n.b` @type ^`int`;
  #L11a040.  v2:= v3 - v2 @kind int;
  #L11a044.  v2:= (`long`) v2 @kind i2l;
  #L11a046.  v0:= v0 - v2 @kind long;
  #L11a048.  goto L11a01a;
}
procedure `b.d` `g`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.g:(I)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11a05c.  call temp:= `d`(v1, v2) @signature `Lb/c;.d:(I)Lb/c;` @kind virtual;
  #L11a062.  v0:= temp @kind object;
  #L11a064.  return v0 @kind object;
}
procedure `void` `g`(`b.c` v7 @kind this, `long` v8 ) @signature `Lb/c;.g:(J)V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L11a078.  v0:= 0L;
  #L11a07c.  v0:= lcmp(v8, v0);
  #L11a080.  if v0 <= 0 then goto L11a100;
  #L11a084.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11a088.  if v0 != 0 then goto L11a098;
  #L11a08c.  v0:= new `java.io.EOFException`;
  #L11a090.  call `<init>`(v0) @signature `Ljava/io/EOFException;.<init>:()V` @kind direct;
  #L11a096.  throw v0;
  #L11a098.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11a09c.  v0:= v0.`b.n.c` @type ^`int`;
  #L11a0a0.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11a0a4.  v1:= v1.`b.n.b` @type ^`int`;
  #L11a0a8.  v0:= v0 - v1 @kind int;
  #L11a0aa.  v0:= (`long`) v0 @kind i2l;
  #L11a0ac.  call temp:= `min`(v8, v0) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11a0b2.  v0:= temp @kind wide;
  #L11a0b4.  v0:= (`int`) v0 @kind l2i;
  #L11a0b6.  v2:= v7.`b.c.b` @type ^`long` @kind wide;
  #L11a0ba.  v4:= (`long`) v0 @kind i2l;
  #L11a0bc.  v2:= v2 - v4 @kind long;
  #L11a0be.  v7.`b.c.b` @type ^`long` := v2 @kind wide;
  #L11a0c2.  v2:= (`long`) v0 @kind i2l;
  #L11a0c4.  v8:= v8 - v2 @kind long;
  #L11a0c6.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11a0ca.  v2:= v1.`b.n.b` @type ^`int`;
  #L11a0ce.  v0:= v0 + v2 @kind int;
  #L11a0d0.  v1.`b.n.b` @type ^`int` := v0;
  #L11a0d4.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11a0d8.  v0:= v0.`b.n.b` @type ^`int`;
  #L11a0dc.  v1:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11a0e0.  v1:= v1.`b.n.c` @type ^`int`;
  #L11a0e4.  if v0 != v1 then goto L11a078;
  #L11a0e8.  v0:= v7.`b.c.a` @type ^`b.n` @kind object;
  #L11a0ec.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11a0f2.  v1:= temp @kind object;
  #L11a0f4.  v7.`b.c.a` @type ^`b.n` := v1 @kind object;
  #L11a0f8.  call `a`(v0) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11a0fe.  goto L11a078;
  #L11a100.  return @kind void;
}
procedure `byte` `h`(`b.c` v10 @kind this) @signature `Lb/c;.h:()B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11a114.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11a118.  v2:= 0L;
  #L11a11c.  v0:= lcmp(v0, v2);
  #L11a120.  if v0 != 0 then goto L11a134;
  #L11a124.  v0:= new `java.lang.IllegalStateException`;
  #L11a128.  v1:= "size == 0" @kind object;
  #L11a12c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a132.  throw v0;
  #L11a134.  v0:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L11a138.  v1:= v0.`b.n.b` @type ^`int`;
  #L11a13c.  v2:= v0.`b.n.c` @type ^`int`;
  #L11a140.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11a144.  v4:= v1 + 1;
  #L11a148.  v1:= v3[v1] @kind byte;
  #L11a14c.  v6:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11a150.  v8:= 1L;
  #L11a154.  v6:= v6 - v8 @kind long;
  #L11a156.  v10.`b.c.b` @type ^`long` := v6 @kind wide;
  #L11a15a.  if v4 != v2 then goto L11a172;
  #L11a15e.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11a164.  v2:= temp @kind object;
  #L11a166.  v10.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L11a16a.  call `a`(v0) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11a170.  return v1;
  #L11a172.  v0.`b.n.b` @type ^`int` := v4;
  #L11a176.  goto L11a170;
}
procedure `b.c` `h`(`b.c` v11 @kind this, `long` v12 ) @signature `Lb/c;.h:(J)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;

  #L11a188.  v0:= 0L;
  #L11a18c.  v0:= lcmp(v12, v0);
  #L11a190.  if v0 != 0 then goto L11a1a2;
  #L11a194.  v0:= 48I;
  #L11a198.  call temp:= `b`(v11, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a19e.  v11:= temp @kind object;
  #L11a1a0.  return v11 @kind object;
  #L11a1a2.  v0:= 0I;
  #L11a1a4.  v2:= 0L;
  #L11a1a8.  v1:= lcmp(v12, v2);
  #L11a1ac.  if v1 >= 0 then goto L11a3ca;
  #L11a1b0.  v2:= -v12 @kind long;
  #L11a1b2.  v0:= 0L;
  #L11a1b6.  v0:= lcmp(v2, v0);
  #L11a1ba.  if v0 >= 0 then goto L11a1cc;
  #L11a1be.  v0:= "-9223372036854775808" @kind object;
  #L11a1c2.  call temp:= `a`(v11, v0) @signature `Lb/c;.a:(Ljava/lang/String;)Lb/c;` @kind virtual;
  #L11a1c8.  v11:= temp @kind object;
  #L11a1ca.  goto L11a1a0;
  #L11a1cc.  v0:= 1I;
  #L11a1ce.  v4:= v0;
  #L11a1d0.  v0:= 100000000L;
  #L11a1d6.  v0:= lcmp(v2, v0);
  #L11a1da.  if v0 >= 0 then goto L11a2a0;
  #L11a1de.  v0:= 10000L;
  #L11a1e2.  v0:= lcmp(v2, v0);
  #L11a1e6.  if v0 >= 0 then goto L11a264;
  #L11a1ea.  v0:= 100L;
  #L11a1ee.  v0:= lcmp(v2, v0);
  #L11a1f2.  if v0 >= 0 then goto L11a250;
  #L11a1f6.  v0:= 10L;
  #L11a1fa.  v0:= lcmp(v2, v0);
  #L11a1fe.  if v0 >= 0 then goto L11a24c;
  #L11a202.  v0:= 1I;
  #L11a204.  if v4 == 0 then goto L11a20c;
  #L11a208.  v0:= v0 + 1;
  #L11a20c.  call temp:= `e`(v11, v0) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11a212.  v5:= temp @kind object;
  #L11a214.  v6:= v5.`b.n.a` @type ^`byte`[] @kind object;
  #L11a218.  v1:= v5.`b.n.c` @type ^`int`;
  #L11a21c.  v1:= v1 + v0 @kind int;
  #L11a21e.  v8:= 0L;
  #L11a222.  v7:= lcmp(v2, v8);
  #L11a226.  if v7 == 0 then goto L11a3a0;
  #L11a22a.  v8:= 10L;
  #L11a22e.  v8:= v2 %% v8 @kind long;
  #L11a232.  v7:= (`int`) v8 @kind l2i;
  #L11a234.  v1:= v1 + -1;
  #L11a238.  v8:= `@@b.c.c` @type ^`byte`[] @kind object;
  #L11a23c.  v7:= v8[v7] @kind byte;
  #L11a240.  v6[v1]:= v7 @kind byte;
  #L11a244.  v8:= 10L;
  #L11a248.  v2:= v2 / v8 @kind long;
  #L11a24a.  goto L11a21e;
  #L11a24c.  v0:= 2I;
  #L11a24e.  goto L11a204;
  #L11a250.  v0:= 1000L;
  #L11a254.  v0:= lcmp(v2, v0);
  #L11a258.  if v0 >= 0 then goto L11a260;
  #L11a25c.  v0:= 3I;
  #L11a25e.  goto L11a204;
  #L11a260.  v0:= 4I;
  #L11a262.  goto L11a204;
  #L11a264.  v0:= 1000000L;
  #L11a26a.  v0:= lcmp(v2, v0);
  #L11a26e.  if v0 >= 0 then goto L11a288;
  #L11a272.  v0:= 100000L;
  #L11a278.  v0:= lcmp(v2, v0);
  #L11a27c.  if v0 >= 0 then goto L11a284;
  #L11a280.  v0:= 5I;
  #L11a282.  goto L11a204;
  #L11a284.  v0:= 6I;
  #L11a286.  goto L11a204;
  #L11a288.  v0:= 10000000L;
  #L11a28e.  v0:= lcmp(v2, v0);
  #L11a292.  if v0 >= 0 then goto L11a29a;
  #L11a296.  v0:= 7I;
  #L11a298.  goto L11a204;
  #L11a29a.  v0:= 8I;
  #L11a29e.  goto L11a204;
  #L11a2a0.  v0:= 1000000000000L;
  #L11a2aa.  v0:= lcmp(v2, v0);
  #L11a2ae.  if v0 >= 0 then goto L11a2fc;
  #L11a2b2.  v0:= 10000000000L;
  #L11a2bc.  v0:= lcmp(v2, v0);
  #L11a2c0.  if v0 >= 0 then goto L11a2de;
  #L11a2c4.  v0:= 1000000000L;
  #L11a2ca.  v0:= lcmp(v2, v0);
  #L11a2ce.  if v0 >= 0 then goto L11a2d8;
  #L11a2d2.  v0:= 9I;
  #L11a2d6.  goto L11a204;
  #L11a2d8.  v0:= 10I;
  #L11a2dc.  goto L11a204;
  #L11a2de.  v0:= 100000000000L;
  #L11a2e8.  v0:= lcmp(v2, v0);
  #L11a2ec.  if v0 >= 0 then goto L11a2f6;
  #L11a2f0.  v0:= 11I;
  #L11a2f4.  goto L11a204;
  #L11a2f6.  v0:= 12I;
  #L11a2fa.  goto L11a204;
  #L11a2fc.  v0:= 1000000000000000L;
  #L11a306.  v0:= lcmp(v2, v0);
  #L11a30a.  if v0 >= 0 then goto L11a34a;
  #L11a30e.  v0:= 10000000000000L;
  #L11a318.  v0:= lcmp(v2, v0);
  #L11a31c.  if v0 >= 0 then goto L11a328;
  #L11a320.  v0:= 13I;
  #L11a324.  goto L11a204;
  #L11a328.  v0:= 100000000000000L;
  #L11a332.  v0:= lcmp(v2, v0);
  #L11a336.  if v0 >= 0 then goto L11a342;
  #L11a33a.  v0:= 14I;
  #L11a33e.  goto L11a204;
  #L11a342.  v0:= 15I;
  #L11a346.  goto L11a204;
  #L11a34a.  v0:= 100000000000000000L;
  #L11a354.  v0:= lcmp(v2, v0);
  #L11a358.  if v0 >= 0 then goto L11a37e;
  #L11a35c.  v0:= 10000000000000000L;
  #L11a366.  v0:= lcmp(v2, v0);
  #L11a36a.  if v0 >= 0 then goto L11a376;
  #L11a36e.  v0:= 16I;
  #L11a372.  goto L11a204;
  #L11a376.  v0:= 17I;
  #L11a37a.  goto L11a204;
  #L11a37e.  v0:= 1000000000000000000L;
  #L11a388.  v0:= lcmp(v2, v0);
  #L11a38c.  if v0 >= 0 then goto L11a398;
  #L11a390.  v0:= 18I;
  #L11a394.  goto L11a204;
  #L11a398.  v0:= 19I;
  #L11a39c.  goto L11a204;
  #L11a3a0.  if v4 == 0 then goto L11a3b0;
  #L11a3a4.  v1:= v1 + -1;
  #L11a3a8.  v2:= 45I;
  #L11a3ac.  v6[v1]:= v2 @kind byte;
  #L11a3b0.  v1:= v5.`b.n.c` @type ^`int`;
  #L11a3b4.  v1:= v1 + v0 @kind int;
  #L11a3b6.  v5.`b.n.c` @type ^`int` := v1;
  #L11a3ba.  v2:= v11.`b.c.b` @type ^`long` @kind wide;
  #L11a3be.  v0:= (`long`) v0 @kind i2l;
  #L11a3c0.  v0:= v0 + v2 @kind long;
  #L11a3c2.  v11.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11a3c6.  goto L11a1a0;
  #L11a3ca.  v4:= v0;
  #L11a3cc.  v2:= v12 @kind wide;
  #L11a3ce.  goto L11a1d0;
}
procedure `b.d` `h`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.h:(I)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11a3e4.  call temp:= `c`(v1, v2) @signature `Lb/c;.c:(I)Lb/c;` @kind virtual;
  #L11a3ea.  v0:= temp @kind object;
  #L11a3ec.  return v0 @kind object;
}
procedure `int` `hashCode`(`b.c` v5 @kind this) @signature `Lb/c;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11a400.  v1:= v5.`b.c.a` @type ^`b.n` @kind object;
  #L11a404.  if v1 != 0 then goto L11a40c;
  #L11a408.  v0:= 0I;
  #L11a40a.  return v0;
  #L11a40c.  v0:= 1I;
  #L11a40e.  v2:= v1.`b.n.b` @type ^`int`;
  #L11a412.  v4:= v1.`b.n.c` @type ^`int`;
  #L11a416.  if v2 >= v4 then goto L11a432;
  #L11a41a.  v0:= v0 * 31;
  #L11a41e.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11a422.  v3:= v3[v2] @kind byte;
  #L11a426.  v3:= v3 + v0 @kind int;
  #L11a428.  v0:= v2 + 1;
  #L11a42c.  v2:= v0;
  #L11a42e.  v0:= v3;
  #L11a430.  goto L11a416;
  #L11a432.  v1:= v1.`b.n.f` @type ^`b.n` @kind object;
  #L11a436.  v2:= v5.`b.c.a` @type ^`b.n` @kind object;
  #L11a43a.  if v1 != v2 then goto L11a40e;
  #L11a43e.  goto L11a40a;
}
procedure `b.c` `i`(`b.c` v9 @kind this, `long` v10 ) @signature `Lb/c;.i:(J)Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11a450.  v0:= 0L;
  #L11a454.  v0:= lcmp(v10, v0);
  #L11a458.  if v0 != 0 then goto L11a46a;
  #L11a45c.  v0:= 48I;
  #L11a460.  call temp:= `b`(v9, v0) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a466.  v9:= temp @kind object;
  #L11a468.  return v9 @kind object;
  #L11a46a.  call temp:= `highestOneBit`(v10) @signature `Ljava/lang/Long;.highestOneBit:(J)J` @kind static;
  #L11a470.  v0:= temp @kind wide;
  #L11a472.  call temp:= `numberOfTrailingZeros`(v0) @signature `Ljava/lang/Long;.numberOfTrailingZeros:(J)I` @kind static;
  #L11a478.  v0:= temp;
  #L11a47a.  v0:= v0 / 4;
  #L11a47e.  v1:= v0 + 1;
  #L11a482.  call temp:= `e`(v9, v1) @signature `Lb/c;.e:(I)Lb/n;` @kind virtual;
  #L11a488.  v2:= temp @kind object;
  #L11a48a.  v3:= v2.`b.n.a` @type ^`byte`[] @kind object;
  #L11a48e.  v0:= v2.`b.n.c` @type ^`int`;
  #L11a492.  v0:= v0 + v1 @kind int;
  #L11a494.  v0:= v0 + -1;
  #L11a498.  v4:= v2.`b.n.c` @type ^`int`;
  #L11a49c.  if v0 < v4 then goto L11a4be;
  #L11a4a0.  v5:= `@@b.c.c` @type ^`byte`[] @kind object;
  #L11a4a4.  v6:= 15L;
  #L11a4a8.  v6:= v6 ^& v10 @kind long;
  #L11a4aa.  v6:= (`int`) v6 @kind l2i;
  #L11a4ac.  v5:= v5[v6] @kind byte;
  #L11a4b0.  v3[v0]:= v5 @kind byte;
  #L11a4b4.  v5:= 4I;
  #L11a4b6.  v10:= v10 ^>> v5 @kind long;
  #L11a4b8.  v0:= v0 + -1;
  #L11a4bc.  goto L11a49c;
  #L11a4be.  v0:= v2.`b.n.c` @type ^`int`;
  #L11a4c2.  v0:= v0 + v1 @kind int;
  #L11a4c4.  v2.`b.n.c` @type ^`int` := v0;
  #L11a4c8.  v2:= v9.`b.c.b` @type ^`long` @kind wide;
  #L11a4cc.  v0:= (`long`) v1 @kind i2l;
  #L11a4ce.  v0:= v0 + v2 @kind long;
  #L11a4d0.  v9.`b.c.b` @type ^`long` := v0 @kind wide;
  #L11a4d4.  goto L11a468;
}
procedure `b.d` `i`(`b.c` v1 @kind this, `int` v2 ) @signature `Lb/c;.i:(I)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11a4e8.  call temp:= `b`(v1, v2) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a4ee.  v0:= temp @kind object;
  #L11a4f0.  return v0 @kind object;
}
procedure `short` `i`(`b.c` v10 @kind this) @signature `Lb/c;.i:()S` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11a504.  v8:= 2L;
  #L11a508.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11a50c.  v0:= lcmp(v0, v8);
  #L11a510.  if v0 >= 0 then goto L11a54a;
  #L11a514.  v0:= new `java.lang.IllegalStateException`;
  #L11a518.  v1:= new `java.lang.StringBuilder`;
  #L11a51c.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11a522.  v2:= "size < 2: " @kind object;
  #L11a526.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a52c.  v1:= temp @kind object;
  #L11a52e.  v2:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11a532.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a538.  v1:= temp @kind object;
  #L11a53a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11a540.  v1:= temp @kind object;
  #L11a542.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a548.  throw v0;
  #L11a54a.  v0:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L11a54e.  v1:= v0.`b.n.b` @type ^`int`;
  #L11a552.  v2:= v0.`b.n.c` @type ^`int`;
  #L11a556.  v3:= v2 - v1 @kind int;
  #L11a55a.  v4:= 2I;
  #L11a55c.  if v3 >= v4 then goto L11a582;
  #L11a560.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11a566.  v0:= temp;
  #L11a568.  v0:= v0 ^& 255;
  #L11a56c.  v0:= v0 ^< 8;
  #L11a570.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11a576.  v1:= temp;
  #L11a578.  v1:= v1 ^& 255;
  #L11a57c.  v0:= v0 ^| v1 @kind int;
  #L11a57e.  v0:= (`short`) v0 @kind i2s;
  #L11a580.  return v0;
  #L11a582.  v3:= v0.`b.n.a` @type ^`byte`[] @kind object;
  #L11a586.  v4:= v1 + 1;
  #L11a58a.  v1:= v3[v1] @kind byte;
  #L11a58e.  v1:= v1 ^& 255;
  #L11a592.  v1:= v1 ^< 8;
  #L11a596.  v5:= v4 + 1;
  #L11a59a.  v3:= v3[v4] @kind byte;
  #L11a59e.  v3:= v3 ^& 255;
  #L11a5a2.  v1:= v1 ^| v3 @kind int;
  #L11a5a4.  v6:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11a5a8.  v6:= v6 - v8 @kind long;
  #L11a5aa.  v10.`b.c.b` @type ^`long` := v6 @kind wide;
  #L11a5ae.  if v5 != v2 then goto L11a5c8;
  #L11a5b2.  call temp:= `a`(v0) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11a5b8.  v2:= temp @kind object;
  #L11a5ba.  v10.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L11a5be.  call `a`(v0) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11a5c4.  v0:= (`short`) v1 @kind i2s;
  #L11a5c6.  goto L11a580;
  #L11a5c8.  v0.`b.n.b` @type ^`int` := v5;
  #L11a5cc.  goto L11a5c4;
}
procedure `int` `j`(`b.c` v10 @kind this) @signature `Lb/c;.j:()I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;

  #L11a5e0.  v8:= 4L;
  #L11a5e4.  v0:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11a5e8.  v0:= lcmp(v0, v8);
  #L11a5ec.  if v0 >= 0 then goto L11a626;
  #L11a5f0.  v0:= new `java.lang.IllegalStateException`;
  #L11a5f4.  v1:= new `java.lang.StringBuilder`;
  #L11a5f8.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11a5fe.  v2:= "size < 4: " @kind object;
  #L11a602.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a608.  v1:= temp @kind object;
  #L11a60a.  v2:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11a60e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a614.  v1:= temp @kind object;
  #L11a616.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11a61c.  v1:= temp @kind object;
  #L11a61e.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a624.  throw v0;
  #L11a626.  v1:= v10.`b.c.a` @type ^`b.n` @kind object;
  #L11a62a.  v0:= v1.`b.n.b` @type ^`int`;
  #L11a62e.  v2:= v1.`b.n.c` @type ^`int`;
  #L11a632.  v3:= v2 - v0 @kind int;
  #L11a636.  v4:= 4I;
  #L11a638.  if v3 >= v4 then goto L11a680;
  #L11a63c.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11a642.  v0:= temp;
  #L11a644.  v0:= v0 ^& 255;
  #L11a648.  v0:= v0 ^< 24;
  #L11a64c.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11a652.  v1:= temp;
  #L11a654.  v1:= v1 ^& 255;
  #L11a658.  v1:= v1 ^< 16;
  #L11a65c.  v0:= v0 ^| v1 @kind int;
  #L11a65e.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11a664.  v1:= temp;
  #L11a666.  v1:= v1 ^& 255;
  #L11a66a.  v1:= v1 ^< 8;
  #L11a66e.  v0:= v0 ^| v1 @kind int;
  #L11a670.  call temp:= `h`(v10) @signature `Lb/c;.h:()B` @kind virtual;
  #L11a676.  v1:= temp;
  #L11a678.  v1:= v1 ^& 255;
  #L11a67c.  v0:= v0 ^| v1 @kind int;
  #L11a67e.  return v0;
  #L11a680.  v3:= v1.`b.n.a` @type ^`byte`[] @kind object;
  #L11a684.  v4:= v0 + 1;
  #L11a688.  v0:= v3[v0] @kind byte;
  #L11a68c.  v0:= v0 ^& 255;
  #L11a690.  v0:= v0 ^< 24;
  #L11a694.  v5:= v4 + 1;
  #L11a698.  v4:= v3[v4] @kind byte;
  #L11a69c.  v4:= v4 ^& 255;
  #L11a6a0.  v4:= v4 ^< 16;
  #L11a6a4.  v0:= v0 ^| v4 @kind int;
  #L11a6a6.  v4:= v5 + 1;
  #L11a6aa.  v5:= v3[v5] @kind byte;
  #L11a6ae.  v5:= v5 ^& 255;
  #L11a6b2.  v5:= v5 ^< 8;
  #L11a6b6.  v0:= v0 ^| v5 @kind int;
  #L11a6b8.  v5:= v4 + 1;
  #L11a6bc.  v3:= v3[v4] @kind byte;
  #L11a6c0.  v3:= v3 ^& 255;
  #L11a6c4.  v0:= v0 ^| v3 @kind int;
  #L11a6c6.  v6:= v10.`b.c.b` @type ^`long` @kind wide;
  #L11a6ca.  v6:= v6 - v8 @kind long;
  #L11a6cc.  v10.`b.c.b` @type ^`long` := v6 @kind wide;
  #L11a6d0.  if v5 != v2 then goto L11a6e8;
  #L11a6d4.  call temp:= `a`(v1) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11a6da.  v2:= temp @kind object;
  #L11a6dc.  v10.`b.c.a` @type ^`b.n` := v2 @kind object;
  #L11a6e0.  call `a`(v1) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11a6e6.  goto L11a67e;
  #L11a6e8.  v1.`b.n.b` @type ^`int` := v5;
  #L11a6ec.  goto L11a67e;
}
procedure `b.d` `j`(`b.c` v1 @kind this, `long` v2 ) @signature `Lb/c;.j:(J)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11a700.  call temp:= `i`(v1, v2) @signature `Lb/c;.i:(J)Lb/c;` @kind virtual;
  #L11a706.  v0:= temp @kind object;
  #L11a708.  return v0 @kind object;
}
procedure `b.d` `k`(`b.c` v1 @kind this, `long` v2 ) @signature `Lb/c;.k:(J)Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11a71c.  call temp:= `h`(v1, v2) @signature `Lb/c;.h:(J)Lb/c;` @kind virtual;
  #L11a722.  v0:= temp @kind object;
  #L11a724.  return v0 @kind object;
}
procedure `short` `k`(`b.c` v1 @kind this) @signature `Lb/c;.k:()S` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11a738.  call temp:= `i`(v1) @signature `Lb/c;.i:()S` @kind virtual;
  #L11a73e.  v0:= temp;
  #L11a740.  call temp:= `a`(v0) @signature `Lb/t;.a:(S)S` @kind static;
  #L11a746.  v0:= temp;
  #L11a748.  return v0;
}
procedure `int` `l`(`b.c` v1 @kind this) @signature `Lb/c;.l:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11a75c.  call temp:= `j`(v1) @signature `Lb/c;.j:()I` @kind virtual;
  #L11a762.  v0:= temp;
  #L11a764.  call temp:= `a`(v0) @signature `Lb/t;.a:(I)I` @kind static;
  #L11a76a.  v0:= temp;
  #L11a76c.  return v0;
}
procedure `long` `m`(`b.c` v18 @kind this) @signature `Lb/c;.m:()J` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;
    v9;
    v10;
    v11;
    v12;
    v13;
    v14;
    v15;
    v16;
    v17;

  #L11a780.  v0:= v18 @kind object;
  #L11a784.  v2:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11a788.  v4:= 0L;
  #L11a78c.  v2:= lcmp(v2, v4);
  #L11a790.  if v2 != 0 then goto L11a7a4;
  #L11a794.  v2:= new `java.lang.IllegalStateException`;
  #L11a798.  v3:= "size == 0" @kind object;
  #L11a79c.  call `<init>`(v2, v3) @signature `Ljava/lang/IllegalStateException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a7a2.  throw v2;
  #L11a7a4.  v4:= 0L;
  #L11a7a8.  v3:= 0I;
  #L11a7aa.  v2:= 0I;
  #L11a7ac.  v0:= v18 @kind object;
  #L11a7b0.  v10:= v0.`b.c.a` @type ^`b.n` @kind object;
  #L11a7b4.  v11:= v10.`b.n.a` @type ^`byte`[] @kind object;
  #L11a7b8.  v6:= v10.`b.n.b` @type ^`int`;
  #L11a7bc.  v12:= v10.`b.n.c` @type ^`int`;
  #L11a7c0.  v7:= v6;
  #L11a7c2.  if v7 >= v12 then goto L11a8b8;
  #L11a7c6.  v8:= v11[v7] @kind byte;
  #L11a7ca.  v6:= 48I;
  #L11a7ce.  if v8 < v6 then goto L11a844;
  #L11a7d2.  v6:= 57I;
  #L11a7d6.  if v8 > v6 then goto L11a844;
  #L11a7da.  v6:= v8 + -48;
  #L11a7de.  v14:= -3.105036184601418E231D;
  #L11a7e2.  v14:= v14 ^& v4 @kind long;
  #L11a7e4.  v16:= 0L;
  #L11a7e8.  v9:= lcmp(v14, v16);
  #L11a7ec.  if v9 == 0 then goto L11a8fa;
  #L11a7f0.  v2:= new `b.c`;
  #L11a7f4.  call `<init>`(v2) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11a7fa.  call temp:= `i`(v2, v4) @signature `Lb/c;.i:(J)Lb/c;` @kind virtual;
  #L11a800.  v2:= temp @kind object;
  #L11a802.  call temp:= `b`(v2, v8) @signature `Lb/c;.b:(I)Lb/c;` @kind virtual;
  #L11a808.  v2:= temp @kind object;
  #L11a80a.  v3:= new `java.lang.NumberFormatException`;
  #L11a80e.  v4:= new `java.lang.StringBuilder`;
  #L11a812.  call `<init>`(v4) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11a818.  v5:= "Number too large: " @kind object;
  #L11a81c.  call temp:= `append`(v4, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a822.  v4:= temp @kind object;
  #L11a824.  call temp:= `o`(v2) @signature `Lb/c;.o:()Ljava/lang/String;` @kind virtual;
  #L11a82a.  v2:= temp @kind object;
  #L11a82c.  call temp:= `append`(v4, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a832.  v2:= temp @kind object;
  #L11a834.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11a83a.  v2:= temp @kind object;
  #L11a83c.  call `<init>`(v3, v2) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a842.  throw v3;
  #L11a844.  v6:= 97I;
  #L11a848.  if v8 < v6 then goto L11a85e;
  #L11a84c.  v6:= 102I;
  #L11a850.  if v8 > v6 then goto L11a85e;
  #L11a854.  v6:= v8 + -97;
  #L11a858.  v6:= v6 + 10;
  #L11a85c.  goto L11a7de;
  #L11a85e.  v6:= 65I;
  #L11a862.  if v8 < v6 then goto L11a878;
  #L11a866.  v6:= 70I;
  #L11a86a.  if v8 > v6 then goto L11a878;
  #L11a86e.  v6:= v8 + -65;
  #L11a872.  v6:= v6 + 10;
  #L11a876.  goto L11a7de;
  #L11a878.  if v3 != 0 then goto L11a8b6;
  #L11a87c.  v2:= new `java.lang.NumberFormatException`;
  #L11a880.  v3:= new `java.lang.StringBuilder`;
  #L11a884.  call `<init>`(v3) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11a88a.  v4:= "Expected leading [0-9a-fA-F] character but was 0x" @kind object;
  #L11a88e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a894.  v3:= temp @kind object;
  #L11a896.  call temp:= `toHexString`(v8) @signature `Ljava/lang/Integer;.toHexString:(I)Ljava/lang/String;` @kind static;
  #L11a89c.  v4:= temp @kind object;
  #L11a89e.  call temp:= `append`(v3, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a8a4.  v3:= temp @kind object;
  #L11a8a6.  call temp:= `toString`(v3) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11a8ac.  v3:= temp @kind object;
  #L11a8ae.  call `<init>`(v2, v3) @signature `Ljava/lang/NumberFormatException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11a8b4.  throw v2;
  #L11a8b6.  v2:= 1I;
  #L11a8b8.  if v7 != v12 then goto L11a912;
  #L11a8bc.  call temp:= `a`(v10) @signature `Lb/n;.a:()Lb/n;` @kind virtual;
  #L11a8c2.  v6:= temp @kind object;
  #L11a8c4.  v0:= v18 @kind object;
  #L11a8c8.  v0.`b.c.a` @type ^`b.n` := v6 @kind object;
  #L11a8cc.  call `a`(v10) @signature `Lb/o;.a:(Lb/n;)V` @kind static;
  #L11a8d2.  if v2 != 0 then goto L11a8e2;
  #L11a8d6.  v0:= v18 @kind object;
  #L11a8da.  v6:= v0.`b.c.a` @type ^`b.n` @kind object;
  #L11a8de.  if v6 != 0 then goto L11a7ac;
  #L11a8e2.  v0:= v18 @kind object;
  #L11a8e6.  v6:= v0.`b.c.b` @type ^`long` @kind wide;
  #L11a8ea.  v2:= (`long`) v3 @kind i2l;
  #L11a8ec.  v2:= v6 - v2 @kind long;
  #L11a8f0.  v0:= v18 @kind object;
  #L11a8f4.  v0.`b.c.b` @type ^`long` := v2 @kind wide;
  #L11a8f8.  return v4 @kind wide;
  #L11a8fa.  v8:= 4I;
  #L11a8fc.  v4:= v4 ^< v8 @kind long;
  #L11a8fe.  v8:= (`long`) v6 @kind i2l;
  #L11a900.  v8:= v8 ^| v4 @kind long;
  #L11a902.  v4:= v7 + 1;
  #L11a906.  v3:= v3 + 1;
  #L11a90a.  v7:= v4;
  #L11a90c.  v4:= v8 @kind wide;
  #L11a90e.  goto L11a7c2;
  #L11a912.  v10.`b.n.b` @type ^`int` := v7;
  #L11a916.  goto L11a8d2;
}
procedure `b.f` `n`(`b.c` v2 @kind this) @signature `Lb/c;.n:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #L11a928.  v0:= new `b.f`;
  #L11a92c.  call temp:= `q`(v2) @signature `Lb/c;.q:()[B` @kind virtual;
  #L11a932.  v1:= temp @kind object;
  #L11a934.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11a93a.  return v0 @kind object;
}
procedure `java.lang.String` `o`(`b.c` v3 @kind this) @signature `Lb/c;.o:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #Try_start0.  
  #L11a94c.  v0:= v3.`b.c.b` @type ^`long` @kind wide;
  #L11a950.  v2:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L11a954.  call temp:= `a`(v3, v0, v2) @signature `Lb/c;.a:(JLjava/nio/charset/Charset;)Ljava/lang/String;` @kind virtual;
  #Try_end0.  
  #L11a95a.  v0:= temp @kind object;
  #L11a95c.  return v0 @kind object;
  #L11a95e.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L11a960.  v1:= new `java.lang.AssertionError`;
  #L11a964.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11a96a.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L11a95e;
}
procedure `java.lang.String` `p`(`b.c` v8 @kind this) @signature `Lb/c;.p:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;

  #L11a98c.  v0:= 10I;
  #L11a990.  call temp:= `a`(v8, v0) @signature `Lb/c;.a:(B)J` @kind virtual;
  #L11a996.  v0:= temp @kind wide;
  #L11a998.  v2:= -1L;
  #L11a99c.  v2:= lcmp(v0, v2);
  #L11a9a0.  if v2 != 0 then goto L11aa34;
  #L11a9a4.  v1:= new `b.c`;
  #L11a9a8.  call `<init>`(v1) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11a9ae.  v2:= 0L;
  #L11a9b2.  v4:= 32L;
  #L11a9b6.  v6:= v8.`b.c.b` @type ^`long` @kind wide;
  #L11a9ba.  call temp:= `min`(v4, v6) @signature `Ljava/lang/Math;.min:(JJ)J` @kind static;
  #L11a9c0.  v4:= temp @kind wide;
  #L11a9c2.  v0:= v8 @kind object;
  #L11a9c4.  call temp:= `a`(v0, v1, v2, v4) @signature `Lb/c;.a:(Lb/c;JJ)Lb/c;` @kind virtual;
  #L11a9ca.  v0:= new `java.io.EOFException`;
  #L11a9ce.  v2:= new `java.lang.StringBuilder`;
  #L11a9d2.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11a9d8.  v3:= "\\n not found: size=" @kind object;
  #L11a9dc.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a9e2.  v2:= temp @kind object;
  #L11a9e4.  call temp:= `b`(v8) @signature `Lb/c;.b:()J` @kind virtual;
  #L11a9ea.  v4:= temp @kind wide;
  #L11a9ec.  call temp:= `append`(v2, v4) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a9f2.  v2:= temp @kind object;
  #L11a9f4.  v3:= " content=" @kind object;
  #L11a9f8.  call temp:= `append`(v2, v3) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11a9fe.  v2:= temp @kind object;
  #L11aa00.  call temp:= `n`(v1) @signature `Lb/c;.n:()Lb/f;` @kind virtual;
  #L11aa06.  v1:= temp @kind object;
  #L11aa08.  call temp:= `e`(v1) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L11aa0e.  v1:= temp @kind object;
  #L11aa10.  call temp:= `append`(v2, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11aa16.  v1:= temp @kind object;
  #L11aa18.  v2:= "…" @kind object;
  #L11aa1c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11aa22.  v1:= temp @kind object;
  #L11aa24.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11aa2a.  v1:= temp @kind object;
  #L11aa2c.  call `<init>`(v0, v1) @signature `Ljava/io/EOFException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11aa32.  throw v0;
  #L11aa34.  call temp:= `e`(v8, v0) @signature `Lb/c;.e:(J)Ljava/lang/String;` @kind virtual;
  #L11aa3a.  v0:= temp @kind object;
  #L11aa3c.  return v0 @kind object;
}
procedure `byte`[] `q`(`b.c` v2 @kind this) @signature `Lb/c;.q:()[B` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L11aa50.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11aa54.  call temp:= `f`(v2, v0) @signature `Lb/c;.f:(J)[B` @kind virtual;
  #Try_end0.  
  #L11aa5a.  v0:= temp @kind object;
  #L11aa5c.  return v0 @kind object;
  #L11aa5e.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L11aa60.  v1:= new `java.lang.AssertionError`;
  #L11aa64.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11aa6a.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L11aa5e;
}
procedure `void` `r`(`b.c` v2 @kind this) @signature `Lb/c;.r:()V` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L11aa8c.  v0:= v2.`b.c.b` @type ^`long` @kind wide;
  #L11aa90.  call `g`(v2, v0) @signature `Lb/c;.g:(J)V` @kind virtual;
  #Try_end0.  
  #L11aa96.  return @kind void;
  #L11aa98.  v0:= Exception @type ^`java.io.EOFException` @kind object;
  #L11aa9a.  v1:= new `java.lang.AssertionError`;
  #L11aa9e.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11aaa4.  throw v1;
  catch `java.io.EOFException` @[Try_start0..Try_end0] goto L11aa98;
}
procedure `b.c` `s`(`b.c` v6 @kind this) @signature `Lb/c;.s:()Lb/c;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11aac8.  v1:= new `b.c`;
  #L11aacc.  call `<init>`(v1) @signature `Lb/c;.<init>:()V` @kind direct;
  #L11aad2.  v2:= v6.`b.c.b` @type ^`long` @kind wide;
  #L11aad6.  v4:= 0L;
  #L11aada.  v0:= lcmp(v2, v4);
  #L11aade.  if v0 != 0 then goto L11aae6;
  #L11aae2.  v0:= v1 @kind object;
  #L11aae4.  return v0 @kind object;
  #L11aae6.  v0:= new `b.n`;
  #L11aaea.  v2:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L11aaee.  call `<init>`(v0, v2) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L11aaf4.  v1.`b.c.a` @type ^`b.n` := v0 @kind object;
  #L11aaf8.  v0:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L11aafc.  v2:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L11ab00.  v3:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L11ab04.  v2.`b.n.g` @type ^`b.n` := v3 @kind object;
  #L11ab08.  v0.`b.n.f` @type ^`b.n` := v3 @kind object;
  #L11ab0c.  v0:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L11ab10.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11ab14.  v2:= v6.`b.c.a` @type ^`b.n` @kind object;
  #L11ab18.  if v0 == v2 then goto L11ab3a;
  #L11ab1c.  v2:= v1.`b.c.a` @type ^`b.n` @kind object;
  #L11ab20.  v2:= v2.`b.n.g` @type ^`b.n` @kind object;
  #L11ab24.  v3:= new `b.n`;
  #L11ab28.  call `<init>`(v3, v0) @signature `Lb/n;.<init>:(Lb/n;)V` @kind direct;
  #L11ab2e.  call temp:= `a`(v2, v3) @signature `Lb/n;.a:(Lb/n;)Lb/n;` @kind virtual;
  #L11ab34.  v0:= v0.`b.n.f` @type ^`b.n` @kind object;
  #L11ab38.  goto L11ab14;
  #L11ab3a.  v2:= v6.`b.c.b` @type ^`long` @kind wide;
  #L11ab3e.  v1.`b.c.b` @type ^`long` := v2 @kind wide;
  #L11ab42.  v0:= v1 @kind object;
  #L11ab44.  goto L11aae4;
}
procedure `b.f` `t`(`b.c` v4 @kind this) @signature `Lb/c;.t:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11ab58.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11ab5c.  v2:= 2147483647L;
  #L11ab62.  v0:= lcmp(v0, v2);
  #L11ab66.  if v0 <= 0 then goto L11aba0;
  #L11ab6a.  v0:= new `java.lang.IllegalArgumentException`;
  #L11ab6e.  v1:= new `java.lang.StringBuilder`;
  #L11ab72.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11ab78.  v2:= "size > Integer.MAX_VALUE: " @kind object;
  #L11ab7c.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ab82.  v1:= temp @kind object;
  #L11ab84.  v2:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11ab88.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(J)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ab8e.  v1:= temp @kind object;
  #L11ab90.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11ab96.  v1:= temp @kind object;
  #L11ab98.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ab9e.  throw v0;
  #L11aba0.  v0:= v4.`b.c.b` @type ^`long` @kind wide;
  #L11aba4.  v0:= (`int`) v0 @kind l2i;
  #L11aba6.  call temp:= `f`(v4, v0) @signature `Lb/c;.f:(I)Lb/f;` @kind virtual;
  #L11abac.  v0:= temp @kind object;
  #L11abae.  return v0 @kind object;
}
procedure `java.lang.String` `toString`(`b.c` v1 @kind this) @signature `Lb/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11abc0.  call temp:= `t`(v1) @signature `Lb/c;.t:()Lb/f;` @kind virtual;
  #L11abc6.  v0:= temp @kind object;
  #L11abc8.  call temp:= `toString`(v0) @signature `Lb/f;.toString:()Ljava/lang/String;` @kind virtual;
  #L11abce.  v0:= temp @kind object;
  #L11abd0.  return v0 @kind object;
}
procedure `b.d` `u`(`b.c` v1 @kind this) @signature `Lb/c;.u:()Lb/d;` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11abe4.  call temp:= `d`(v1) @signature `Lb/c;.d:()Lb/c;` @kind virtual;
  #L11abea.  v0:= temp @kind object;
  #L11abec.  return v0 @kind object;
}
