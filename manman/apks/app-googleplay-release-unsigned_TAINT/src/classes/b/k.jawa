record `b.k` @kind class @AccessFlag PUBLIC_FINAL {
}
global `java.util.logging.Logger` `@@b.k.a` @AccessFlag STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/k;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L11c1f8.  v0:= constclass @type ^`b.k` @kind object;
  #L11c1fc.  call temp:= `getName`(v0) @signature `Ljava/lang/Class;.getName:()Ljava/lang/String;` @kind virtual;
  #L11c202.  v0:= temp @kind object;
  #L11c204.  call temp:= `getLogger`(v0) @signature `Ljava/util/logging/Logger;.getLogger:(Ljava/lang/String;)Ljava/util/logging/Logger;` @kind static;
  #L11c20a.  v0:= temp @kind object;
  #L11c20c.  `@@b.k.a` @type ^`java.util.logging.Logger` := v0 @kind object;
  #L11c210.  return @kind void;
}
procedure `void` `<init>`(`b.k` v0 @kind this) @signature `Lb/k;.<init>:()V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L11c224.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11c22a.  return @kind void;
}
procedure `b.d` `a`(`b.q` v1 @kind object) @signature `Lb/k;.a:(Lb/q;)Lb/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L11c23c.  v0:= new `b.l`;
  #L11c240.  call `<init>`(v0, v1) @signature `Lb/l;.<init>:(Lb/q;)V` @kind direct;
  #L11c246.  return v0 @kind object;
}
procedure `b.e` `a`(`b.r` v1 @kind object) @signature `Lb/k;.a:(Lb/r;)Lb/e;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L11c258.  v0:= new `b.m`;
  #L11c25c.  call `<init>`(v0, v1) @signature `Lb/m;.<init>:(Lb/r;)V` @kind direct;
  #L11c262.  return v0 @kind object;
}
procedure `b.q` `a`(`java.io.OutputStream` v2 @kind object, `b.s` v3 @kind object) @signature `Lb/k;.a:(Ljava/io/OutputStream;Lb/s;)Lb/q;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L11c274.  if v2 != 0 then goto L11c288;
  #L11c278.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c27c.  v1:= "out == null" @kind object;
  #L11c280.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c286.  throw v0;
  #L11c288.  if v3 != 0 then goto L11c29c;
  #L11c28c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c290.  v1:= "timeout == null" @kind object;
  #L11c294.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c29a.  throw v0;
  #L11c29c.  v0:= new `b.k$1`;
  #L11c2a0.  call `<init>`(v0, v3, v2) @signature `Lb/k$1;.<init>:(Lb/s;Ljava/io/OutputStream;)V` @kind direct;
  #L11c2a6.  return v0 @kind object;
}
procedure `b.q` `a`(`java.net.Socket` v2 @kind object) @signature `Lb/k;.a:(Ljava/net/Socket;)Lb/q;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11c2b8.  if v2 != 0 then goto L11c2cc;
  #L11c2bc.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c2c0.  v1:= "socket == null" @kind object;
  #L11c2c4.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c2ca.  throw v0;
  #L11c2cc.  call temp:= `c`(v2) @signature `Lb/k;.c:(Ljava/net/Socket;)Lb/a;` @kind static;
  #L11c2d2.  v0:= temp @kind object;
  #L11c2d4.  call temp:= `getOutputStream`(v2) @signature `Ljava/net/Socket;.getOutputStream:()Ljava/io/OutputStream;` @kind virtual;
  #L11c2da.  v1:= temp @kind object;
  #L11c2dc.  call temp:= `a`(v1, v0) @signature `Lb/k;.a:(Ljava/io/OutputStream;Lb/s;)Lb/q;` @kind static;
  #L11c2e2.  v1:= temp @kind object;
  #L11c2e4.  call temp:= `a`(v0, v1) @signature `Lb/a;.a:(Lb/q;)Lb/q;` @kind virtual;
  #L11c2ea.  v0:= temp @kind object;
  #L11c2ec.  return v0 @kind object;
}
procedure `b.r` `a`(`java.io.InputStream` v2 @kind object, `b.s` v3 @kind object) @signature `Lb/k;.a:(Ljava/io/InputStream;Lb/s;)Lb/r;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L11c300.  if v2 != 0 then goto L11c314;
  #L11c304.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c308.  v1:= "in == null" @kind object;
  #L11c30c.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c312.  throw v0;
  #L11c314.  if v3 != 0 then goto L11c328;
  #L11c318.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c31c.  v1:= "timeout == null" @kind object;
  #L11c320.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c326.  throw v0;
  #L11c328.  v0:= new `b.k$2`;
  #L11c32c.  call `<init>`(v0, v3, v2) @signature `Lb/k$2;.<init>:(Lb/s;Ljava/io/InputStream;)V` @kind direct;
  #L11c332.  return v0 @kind object;
}
procedure `boolean` `a`(`java.lang.AssertionError` v2 @kind object) @signature `Lb/k;.a:(Ljava/lang/AssertionError;)Z` @AccessFlag STATIC {
    temp;
    v0;
    v1;

  #L11c344.  call temp:= `getCause`(v2) @signature `Ljava/lang/AssertionError;.getCause:()Ljava/lang/Throwable;` @kind virtual;
  #L11c34a.  v0:= temp @kind object;
  #L11c34c.  if v0 == 0 then goto L11c378;
  #L11c350.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L11c356.  v0:= temp @kind object;
  #L11c358.  if v0 == 0 then goto L11c378;
  #L11c35c.  call temp:= `getMessage`(v2) @signature `Ljava/lang/AssertionError;.getMessage:()Ljava/lang/String;` @kind virtual;
  #L11c362.  v0:= temp @kind object;
  #L11c364.  v1:= "getsockname failed" @kind object;
  #L11c368.  call temp:= `contains`(v0, v1) @signature `Ljava/lang/String;.contains:(Ljava/lang/CharSequence;)Z` @kind virtual;
  #L11c36e.  v0:= temp;
  #L11c370.  if v0 == 0 then goto L11c378;
  #L11c374.  v0:= 1I;
  #L11c376.  return v0;
  #L11c378.  v0:= 0I;
  #L11c37a.  goto L11c376;
}
procedure `b.r` `b`(`java.net.Socket` v2 @kind object) @signature `Lb/k;.b:(Ljava/net/Socket;)Lb/r;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11c38c.  if v2 != 0 then goto L11c3a0;
  #L11c390.  v0:= new `java.lang.IllegalArgumentException`;
  #L11c394.  v1:= "socket == null" @kind object;
  #L11c398.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11c39e.  throw v0;
  #L11c3a0.  call temp:= `c`(v2) @signature `Lb/k;.c:(Ljava/net/Socket;)Lb/a;` @kind static;
  #L11c3a6.  v0:= temp @kind object;
  #L11c3a8.  call temp:= `getInputStream`(v2) @signature `Ljava/net/Socket;.getInputStream:()Ljava/io/InputStream;` @kind virtual;
  #L11c3ae.  v1:= temp @kind object;
  #L11c3b0.  call temp:= `a`(v1, v0) @signature `Lb/k;.a:(Ljava/io/InputStream;Lb/s;)Lb/r;` @kind static;
  #L11c3b6.  v1:= temp @kind object;
  #L11c3b8.  call temp:= `a`(v0, v1) @signature `Lb/a;.a:(Lb/r;)Lb/r;` @kind virtual;
  #L11c3be.  v0:= temp @kind object;
  #L11c3c0.  return v0 @kind object;
}
procedure `b.a` `c`(`java.net.Socket` v1 @kind object) @signature `Lb/k;.c:(Ljava/net/Socket;)Lb/a;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;

  #L11c3d4.  v0:= new `b.k$3`;
  #L11c3d8.  call `<init>`(v0, v1) @signature `Lb/k$3;.<init>:(Ljava/net/Socket;)V` @kind direct;
  #L11c3de.  return v0 @kind object;
}
