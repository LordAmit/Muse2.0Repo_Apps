record `b.f` @kind class @AccessFlag PUBLIC extends `java.io.Serializable` @kind interface, `java.lang.Comparable` @kind interface {
  `byte`[] `b.f.c` @AccessFlag FINAL;
  `int` `b.f.d` @AccessFlag TRANSIENT;
  `java.lang.String` `b.f.e` @AccessFlag TRANSIENT;
}
global `char`[] `@@b.f.a` @AccessFlag STATIC_FINAL;
global `b.f` `@@b.f.b` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lb/f;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L11ac00.  v0:= 16I;
  #L11ac04.  v0:= new `char`[v0];
  #L11ac08.  goto L11ac28;
  #L11ac0e.  `@@b.f.a` @type ^`char`[] := v0 @kind object;
  #L11ac12.  v0:= 0I;
  #L11ac14.  v0:= new `byte`[v0];
  #L11ac18.  call temp:= `a`(v0) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #L11ac1e.  v0:= temp @kind object;
  #L11ac20.  `@@b.f.b` @type ^`b.f` := v0 @kind object;
  #L11ac24.  return @kind void;
  #L11ac26.  
  #L11ac28.  v0:= (48I, 49I, 50I, 51I, 52I, 53I, 54I, 55I, 56I, 57I, 97I, 98I, 99I, 100I, 101I, 102I) @kind object;
  #L11ac4f.  goto L11ac0e;
}
procedure `void` `<init>`(`b.f` v0 @kind this, `byte`[] v1 @kind object) @signature `Lb/f;.<init>:([B)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L11ac60.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L11ac66.  v0.`b.f.c` @type ^`byte`[] := v1 @kind object;
  #L11ac6a.  return @kind void;
}
procedure `int` `a`(`char` v3 ) @signature `Lb/f;.a:(C)I` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;
    v2;

  #L11ac7c.  v0:= 48I;
  #L11ac80.  if v3 < v0 then goto L11ac92;
  #L11ac84.  v0:= 57I;
  #L11ac88.  if v3 > v0 then goto L11ac92;
  #L11ac8c.  v0:= v3 + -48;
  #L11ac90.  return v0;
  #L11ac92.  v0:= 97I;
  #L11ac96.  if v3 < v0 then goto L11acac;
  #L11ac9a.  v0:= 102I;
  #L11ac9e.  if v3 > v0 then goto L11acac;
  #L11aca2.  v0:= v3 + -97;
  #L11aca6.  v0:= v0 + 10;
  #L11acaa.  goto L11ac90;
  #L11acac.  v0:= 65I;
  #L11acb0.  if v3 < v0 then goto L11acc6;
  #L11acb4.  v0:= 70I;
  #L11acb8.  if v3 > v0 then goto L11acc6;
  #L11acbc.  v0:= v3 + -65;
  #L11acc0.  v0:= v0 + 10;
  #L11acc4.  goto L11ac90;
  #L11acc6.  v0:= new `java.lang.IllegalArgumentException`;
  #L11acca.  v1:= new `java.lang.StringBuilder`;
  #L11acce.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11acd4.  v2:= "Unexpected hex digit: " @kind object;
  #L11acd8.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11acde.  v1:= temp @kind object;
  #L11ace0.  call temp:= `append`(v1, v3) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ace6.  v1:= temp @kind object;
  #L11ace8.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11acee.  v1:= temp @kind object;
  #L11acf0.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11acf6.  throw v0;
}
procedure `int` `a`(`java.lang.String` v5 @kind object, `int` v6 ) @signature `Lb/f;.a:(Ljava/lang/String;I)I` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11ad08.  v0:= 0I;
  #L11ad0a.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11ad10.  v2:= temp;
  #L11ad12.  v1:= v0;
  #L11ad14.  if v0 >= v2 then goto L11ad60;
  #L11ad18.  if v1 != v6 then goto L11ad1e;
  #L11ad1c.  return v0;
  #L11ad1e.  call temp:= `codePointAt`(v5, v0) @signature `Ljava/lang/String;.codePointAt:(I)I` @kind virtual;
  #L11ad24.  v3:= temp;
  #L11ad26.  call temp:= `isISOControl`(v3) @signature `Ljava/lang/Character;.isISOControl:(I)Z` @kind static;
  #L11ad2c.  v4:= temp;
  #L11ad2e.  if v4 == 0 then goto L11ad42;
  #L11ad32.  v4:= 10I;
  #L11ad36.  if v3 == v4 then goto L11ad42;
  #L11ad3a.  v4:= 13I;
  #L11ad3e.  if v3 != v4 then goto L11ad4c;
  #L11ad42.  v4:= 65533I;
  #L11ad48.  if v3 != v4 then goto L11ad50;
  #L11ad4c.  v0:= -1I;
  #L11ad4e.  goto L11ad1c;
  #L11ad50.  v1:= v1 + 1;
  #L11ad54.  call temp:= `charCount`(v3) @signature `Ljava/lang/Character;.charCount:(I)I` @kind static;
  #L11ad5a.  v3:= temp;
  #L11ad5c.  v0:= v0 + v3 @kind int;
  #L11ad5e.  goto L11ad14;
  #L11ad60.  call temp:= `length`(v5) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11ad66.  v0:= temp;
  #L11ad68.  goto L11ad1c;
}
procedure `b.f` `a`(`java.lang.String` v2 @kind object) @signature `Lb/f;.a:(Ljava/lang/String;)Lb/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11ad7c.  if v2 != 0 then goto L11ad90;
  #L11ad80.  v0:= new `java.lang.IllegalArgumentException`;
  #L11ad84.  v1:= "s == null" @kind object;
  #L11ad88.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ad8e.  throw v0;
  #L11ad90.  v0:= new `b.f`;
  #L11ad94.  v1:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L11ad98.  call temp:= `getBytes`(v2, v1) @signature `Ljava/lang/String;.getBytes:(Ljava/nio/charset/Charset;)[B` @kind virtual;
  #L11ad9e.  v1:= temp @kind object;
  #L11ada0.  call `<init>`(v0, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11ada6.  v0.`b.f.e` @type ^`java.lang.String` := v2 @kind object;
  #L11adaa.  return v0 @kind object;
}
procedure `b.f` `a`(`byte`[] v2 @kind object) @signature `Lb/f;.a:([B)Lb/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;

  #L11adbc.  if v2 != 0 then goto L11add0;
  #L11adc0.  v0:= new `java.lang.IllegalArgumentException`;
  #L11adc4.  v1:= "data == null" @kind object;
  #L11adc8.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11adce.  throw v0;
  #L11add0.  v1:= new `b.f`;
  #L11add4.  call temp:= `clone`(v2) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L11adda.  v0:= temp @kind object;
  #L11addc.  v0:= (`byte`[]) v0 @kind object;
  #L11ade0.  call `<init>`(v1, v0) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11ade6.  return v1 @kind object;
}
procedure `b.f` `b`(`java.lang.String` v4 @kind object) @signature `Lb/f;.b:(Ljava/lang/String;)Lb/f;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11adf8.  if v4 != 0 then goto L11ae0c;
  #L11adfc.  v0:= new `java.lang.IllegalArgumentException`;
  #L11ae00.  v1:= "hex == null" @kind object;
  #L11ae04.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ae0a.  throw v0;
  #L11ae0c.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11ae12.  v0:= temp;
  #L11ae14.  v0:= v0 %% 2;
  #L11ae18.  if v0 == 0 then goto L11ae4e;
  #L11ae1c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11ae20.  v1:= new `java.lang.StringBuilder`;
  #L11ae24.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11ae2a.  v2:= "Unexpected hex string: " @kind object;
  #L11ae2e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ae34.  v1:= temp @kind object;
  #L11ae36.  call temp:= `append`(v1, v4) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11ae3c.  v1:= temp @kind object;
  #L11ae3e.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11ae44.  v1:= temp @kind object;
  #L11ae46.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11ae4c.  throw v0;
  #L11ae4e.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11ae54.  v0:= temp;
  #L11ae56.  v0:= v0 / 2;
  #L11ae5a.  v1:= new `byte`[v0];
  #L11ae5e.  v0:= 0I;
  #L11ae60.  v2:= length @variable v1;
  #L11ae62.  if v0 >= v2 then goto L11aea4;
  #L11ae66.  v2:= v0 * 2;
  #L11ae6a.  call temp:= `charAt`(v4, v2) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L11ae70.  v2:= temp;
  #L11ae72.  call temp:= `a`(v2) @signature `Lb/f;.a:(C)I` @kind static;
  #L11ae78.  v2:= temp;
  #L11ae7a.  v2:= v2 ^< 4;
  #L11ae7e.  v3:= v0 * 2;
  #L11ae82.  v3:= v3 + 1;
  #L11ae86.  call temp:= `charAt`(v4, v3) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L11ae8c.  v3:= temp;
  #L11ae8e.  call temp:= `a`(v3) @signature `Lb/f;.a:(C)I` @kind static;
  #L11ae94.  v3:= temp;
  #L11ae96.  v2:= v2 + v3 @kind int;
  #L11ae98.  v2:= (`byte`) v2 @kind i2b;
  #L11ae9a.  v1[v0]:= v2 @kind byte;
  #L11ae9e.  v0:= v0 + 1;
  #L11aea2.  goto L11ae60;
  #L11aea4.  call temp:= `a`(v1) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #L11aeaa.  v0:= temp @kind object;
  #L11aeac.  return v0 @kind object;
}
procedure `b.f` `c`(`b.f` v2 @kind this, `java.lang.String` v3 @kind object) @signature `Lb/f;.c:(Ljava/lang/String;)Lb/f;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L11aec0.  call temp:= `getInstance`(v3) @signature `Ljava/security/MessageDigest;.getInstance:(Ljava/lang/String;)Ljava/security/MessageDigest;` @kind static;
  #L11aec6.  v0:= temp @kind object;
  #L11aec8.  v1:= v2.`b.f.c` @type ^`byte`[] @kind object;
  #L11aecc.  call temp:= `digest`(v0, v1) @signature `Ljava/security/MessageDigest;.digest:([B)[B` @kind virtual;
  #L11aed2.  v0:= temp @kind object;
  #L11aed4.  call temp:= `a`(v0) @signature `Lb/f;.a:([B)Lb/f;` @kind static;
  #Try_end0.  
  #L11aeda.  v0:= temp @kind object;
  #L11aedc.  return v0 @kind object;
  #L11aede.  v0:= Exception @type ^`java.security.NoSuchAlgorithmException` @kind object;
  #L11aee0.  v1:= new `java.lang.AssertionError`;
  #L11aee4.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L11aeea.  throw v1;
  catch `java.security.NoSuchAlgorithmException` @[Try_start0..Try_end0] goto L11aede;
}
procedure `byte` `a`(`b.f` v1 @kind this, `int` v2 ) @signature `Lb/f;.a:(I)B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11af0c.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11af10.  v0:= v0[v2] @kind byte;
  #L11af14.  return v0;
}
procedure `b.f` `a`(`b.f` v4 @kind this, `int` v5 , `int` v6 ) @signature `Lb/f;.a:(II)Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11af28.  if v5 >= 0 then goto L11af3c;
  #L11af2c.  v0:= new `java.lang.IllegalArgumentException`;
  #L11af30.  v1:= "beginIndex < 0" @kind object;
  #L11af34.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11af3a.  throw v0;
  #L11af3c.  v0:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11af40.  v0:= length @variable v0;
  #L11af42.  if v6 <= v0 then goto L11af8a;
  #L11af46.  v0:= new `java.lang.IllegalArgumentException`;
  #L11af4a.  v1:= new `java.lang.StringBuilder`;
  #L11af4e.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11af54.  v2:= "endIndex > length(" @kind object;
  #L11af58.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11af5e.  v1:= temp @kind object;
  #L11af60.  v2:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11af64.  v2:= length @variable v2;
  #L11af66.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11af6c.  v1:= temp @kind object;
  #L11af6e.  v2:= ")" @kind object;
  #L11af72.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11af78.  v1:= temp @kind object;
  #L11af7a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11af80.  v1:= temp @kind object;
  #L11af82.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11af88.  throw v0;
  #L11af8a.  v0:= v6 - v5 @kind int;
  #L11af8e.  if v0 >= 0 then goto L11afa2;
  #L11af92.  v0:= new `java.lang.IllegalArgumentException`;
  #L11af96.  v1:= "endIndex < beginIndex" @kind object;
  #L11af9a.  call `<init>`(v0, v1) @signature `Ljava/lang/IllegalArgumentException;.<init>:(Ljava/lang/String;)V` @kind direct;
  #L11afa0.  throw v0;
  #L11afa2.  if v5 != 0 then goto L11afb2;
  #L11afa6.  v1:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11afaa.  v1:= length @variable v1;
  #L11afac.  if v6 != v1 then goto L11afb2;
  #L11afb0.  return v4 @kind object;
  #L11afb2.  v1:= new `byte`[v0];
  #L11afb6.  v2:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11afba.  v3:= 0I;
  #L11afbc.  call `arraycopy`(v2, v5, v1, v3, v0) @signature `Ljava/lang/System;.arraycopy:(Ljava/lang/Object;ILjava/lang/Object;II)V` @kind static;
  #L11afc2.  v4:= new `b.f`;
  #L11afc6.  call `<init>`(v4, v1) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11afcc.  goto L11afb0;
}
procedure `java.lang.String` `a`(`b.f` v3 @kind this) @signature `Lb/f;.a:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L11afe0.  v0:= v3.`b.f.e` @type ^`java.lang.String` @kind object;
  #L11afe4.  if v0 == 0 then goto L11afea;
  #L11afe8.  return v0 @kind object;
  #L11afea.  v0:= new `java.lang.String`;
  #L11afee.  v1:= v3.`b.f.c` @type ^`byte`[] @kind object;
  #L11aff2.  v2:= `@@b.t.a` @type ^`java.nio.charset.Charset` @kind object;
  #L11aff6.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/String;.<init>:([BLjava/nio/charset/Charset;)V` @kind direct;
  #L11affc.  v3.`b.f.e` @type ^`java.lang.String` := v0 @kind object;
  #L11b000.  goto L11afe8;
}
procedure `void` `a`(`b.f` v3 @kind this, `b.c` v4 @kind object) @signature `Lb/f;.a:(Lb/c;)V` @AccessFlag  {
    temp;
    v0;
    v1;
    v2;

  #L11b014.  v0:= v3.`b.f.c` @type ^`byte`[] @kind object;
  #L11b018.  v1:= 0I;
  #L11b01a.  v2:= v3.`b.f.c` @type ^`byte`[] @kind object;
  #L11b01e.  v2:= length @variable v2;
  #L11b020.  call temp:= `b`(v4, v0, v1, v2) @signature `Lb/c;.b:([BII)Lb/c;` @kind virtual;
  #L11b026.  return @kind void;
}
procedure `boolean` `a`(`b.f` v1 @kind this, `int` v2 , `b.f` v3 @kind object, `int` v4 , `int` v5 ) @signature `Lb/f;.a:(ILb/f;II)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b038.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11b03c.  call temp:= `a`(v3, v4, v0, v2, v5) @signature `Lb/f;.a:(I[BII)Z` @kind virtual;
  #L11b042.  v0:= temp;
  #L11b044.  return v0;
}
procedure `boolean` `a`(`b.f` v1 @kind this, `int` v2 , `byte`[] v3 @kind object, `int` v4 , `int` v5 ) @signature `Lb/f;.a:(I[BII)Z` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b058.  if v2 < 0 then goto L11b088;
  #L11b05c.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11b060.  v0:= length @variable v0;
  #L11b062.  v0:= v0 - v5 @kind int;
  #L11b064.  if v2 > v0 then goto L11b088;
  #L11b068.  if v4 < 0 then goto L11b088;
  #L11b06c.  v0:= length @variable v3;
  #L11b06e.  v0:= v0 - v5 @kind int;
  #L11b070.  if v4 > v0 then goto L11b088;
  #L11b074.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11b078.  call temp:= `a`(v0, v2, v3, v4, v5) @signature `Lb/t;.a:([BI[BII)Z` @kind static;
  #L11b07e.  v0:= temp;
  #L11b080.  if v0 == 0 then goto L11b088;
  #L11b084.  v0:= 1I;
  #L11b086.  return v0;
  #L11b088.  v0:= 0I;
  #L11b08a.  goto L11b086;
}
procedure `boolean` `a`(`b.f` v2 @kind this, `b.f` v3 @kind object) @signature `Lb/f;.a:(Lb/f;)Z` @AccessFlag PUBLIC_FINAL {
    temp;
    v0;
    v1;

  #L11b09c.  v1:= 0I;
  #L11b09e.  call temp:= `g`(v3) @signature `Lb/f;.g:()I` @kind virtual;
  #L11b0a4.  v0:= temp;
  #L11b0a6.  call temp:= `a`(v2, v1, v3, v1, v0) @signature `Lb/f;.a:(ILb/f;II)Z` @kind virtual;
  #L11b0ac.  v0:= temp;
  #L11b0ae.  return v0;
}
procedure `int` `b`(`b.f` v9 @kind this, `b.f` v10 @kind object) @signature `Lb/f;.b:(Lb/f;)I` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11b0c0.  v1:= 1I;
  #L11b0c2.  v2:= 0I;
  #L11b0c4.  v0:= -1I;
  #L11b0c6.  call temp:= `g`(v9) @signature `Lb/f;.g:()I` @kind virtual;
  #L11b0cc.  v4:= temp;
  #L11b0ce.  call temp:= `g`(v10) @signature `Lb/f;.g:()I` @kind virtual;
  #L11b0d4.  v5:= temp;
  #L11b0d6.  call temp:= `min`(v4, v5) @signature `Ljava/lang/Math;.min:(II)I` @kind static;
  #L11b0dc.  v6:= temp;
  #L11b0de.  v3:= v2;
  #L11b0e0.  if v3 >= v6 then goto L11b110;
  #L11b0e4.  call temp:= `a`(v9, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L11b0ea.  v7:= temp;
  #L11b0ec.  v7:= v7 ^& 255;
  #L11b0f0.  call temp:= `a`(v10, v3) @signature `Lb/f;.a:(I)B` @kind virtual;
  #L11b0f6.  v8:= temp;
  #L11b0f8.  v8:= v8 ^& 255;
  #L11b0fc.  if v7 != v8 then goto L11b106;
  #L11b100.  v3:= v3 + 1;
  #L11b104.  goto L11b0e0;
  #L11b106.  if v7 >= v8 then goto L11b10c;
  #L11b10a.  return v0;
  #L11b10c.  v0:= v1;
  #L11b10e.  goto L11b10a;
  #L11b110.  if v4 != v5 then goto L11b118;
  #L11b114.  v0:= v2;
  #L11b116.  goto L11b10a;
  #L11b118.  if v4 < v5 then goto L11b10a;
  #L11b11c.  v0:= v1;
  #L11b11e.  goto L11b10a;
}
procedure `java.lang.String` `b`(`b.f` v1 @kind this) @signature `Lb/f;.b:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b130.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11b134.  call temp:= `a`(v0) @signature `Lb/b;.a:([B)Ljava/lang/String;` @kind static;
  #L11b13a.  v0:= temp @kind object;
  #L11b13c.  return v0 @kind object;
}
procedure `b.f` `c`(`b.f` v1 @kind this) @signature `Lb/f;.c:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b150.  v0:= "SHA-1" @kind object;
  #L11b154.  call temp:= `c`(v1, v0) @signature `Lb/f;.c:(Ljava/lang/String;)Lb/f;` @kind direct;
  #L11b15a.  v0:= temp @kind object;
  #L11b15c.  return v0 @kind object;
}
procedure `int` `compareTo`(`b.f` v1 @kind this, `java.lang.Object` v2 @kind object) @signature `Lb/f;.compareTo:(Ljava/lang/Object;)I` @AccessFlag PUBLIC_SYNTHETIC {
    temp;
    v0;

  #L11b170.  v2:= (`b.f`) v2 @kind object;
  #L11b174.  call temp:= `b`(v1, v2) @signature `Lb/f;.b:(Lb/f;)I` @kind virtual;
  #L11b17a.  v0:= temp;
  #L11b17c.  return v0;
}
procedure `b.f` `d`(`b.f` v1 @kind this) @signature `Lb/f;.d:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b190.  v0:= "SHA-256" @kind object;
  #L11b194.  call temp:= `c`(v1, v0) @signature `Lb/f;.c:(Ljava/lang/String;)Lb/f;` @kind direct;
  #L11b19a.  v0:= temp @kind object;
  #L11b19c.  return v0 @kind object;
}
procedure `java.lang.String` `e`(`b.f` v9 @kind this) @signature `Lb/f;.e:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;
    v7;
    v8;

  #L11b1b0.  v0:= 0I;
  #L11b1b2.  v1:= v9.`b.f.c` @type ^`byte`[] @kind object;
  #L11b1b6.  v1:= length @variable v1;
  #L11b1b8.  v1:= v1 * 2;
  #L11b1bc.  v2:= new `char`[v1];
  #L11b1c0.  v3:= v9.`b.f.c` @type ^`byte`[] @kind object;
  #L11b1c4.  v4:= length @variable v3;
  #L11b1c6.  v1:= v0;
  #L11b1c8.  if v0 >= v4 then goto L11b202;
  #L11b1cc.  v5:= v3[v0] @kind byte;
  #L11b1d0.  v6:= v1 + 1;
  #L11b1d4.  v7:= `@@b.f.a` @type ^`char`[] @kind object;
  #L11b1d8.  v8:= v5 ^> 4;
  #L11b1dc.  v8:= v8 ^& 15;
  #L11b1e0.  v7:= v7[v8] @kind char;
  #L11b1e4.  v2[v1]:= v7 @kind char;
  #L11b1e8.  v1:= v6 + 1;
  #L11b1ec.  v7:= `@@b.f.a` @type ^`char`[] @kind object;
  #L11b1f0.  v5:= v5 ^& 15;
  #L11b1f4.  v5:= v7[v5] @kind char;
  #L11b1f8.  v2[v6]:= v5 @kind char;
  #L11b1fc.  v0:= v0 + 1;
  #L11b200.  goto L11b1c8;
  #L11b202.  v0:= new `java.lang.String`;
  #L11b206.  call `<init>`(v0, v2) @signature `Ljava/lang/String;.<init>:([C)V` @kind direct;
  #L11b20c.  return v0 @kind object;
}
procedure `boolean` `equals`(`b.f` v4 @kind this, `java.lang.Object` v5 @kind object) @signature `Lb/f;.equals:(Ljava/lang/Object;)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L11b220.  v1:= 1I;
  #L11b222.  v2:= 0I;
  #L11b224.  if v5 != v4 then goto L11b22a;
  #L11b228.  return v1;
  #L11b22a.  v0:= instanceof @variable v5 @type ^`b.f` @kind boolean;
  #L11b22e.  if v0 == 0 then goto L11b26a;
  #L11b232.  v0:= v5 @kind object;
  #L11b234.  v0:= (`b.f`) v0 @kind object;
  #L11b238.  call temp:= `g`(v0) @signature `Lb/f;.g:()I` @kind virtual;
  #L11b23e.  v0:= temp;
  #L11b240.  v3:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11b244.  v3:= length @variable v3;
  #L11b246.  if v0 != v3 then goto L11b26a;
  #L11b24a.  v5:= (`b.f`) v5 @kind object;
  #L11b24e.  v0:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11b252.  v3:= v4.`b.f.c` @type ^`byte`[] @kind object;
  #L11b256.  v3:= length @variable v3;
  #L11b258.  call temp:= `a`(v5, v2, v0, v2, v3) @signature `Lb/f;.a:(I[BII)Z` @kind virtual;
  #L11b25e.  v0:= temp;
  #L11b260.  if v0 == 0 then goto L11b26a;
  #L11b264.  v0:= v1;
  #L11b266.  v1:= v0;
  #L11b268.  goto L11b228;
  #L11b26a.  v0:= v2;
  #L11b26c.  goto L11b266;
}
procedure `b.f` `f`(`b.f` v6 @kind this) @signature `Lb/f;.f:()Lb/f;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L11b280.  v5:= 90I;
  #L11b284.  v4:= 65I;
  #L11b288.  v0:= 0I;
  #L11b28a.  v1:= v0;
  #L11b28c.  v0:= v6.`b.f.c` @type ^`byte`[] @kind object;
  #L11b290.  v0:= length @variable v0;
  #L11b292.  if v1 >= v0 then goto L11b2fc;
  #L11b296.  v0:= v6.`b.f.c` @type ^`byte`[] @kind object;
  #L11b29a.  v3:= v0[v1] @kind byte;
  #L11b29e.  if v3 < v4 then goto L11b2a6;
  #L11b2a2.  if v3 <= v5 then goto L11b2ae;
  #L11b2a6.  v0:= v1 + 1;
  #L11b2aa.  v1:= v0;
  #L11b2ac.  goto L11b28c;
  #L11b2ae.  v0:= v6.`b.f.c` @type ^`byte`[] @kind object;
  #L11b2b2.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L11b2b8.  v0:= temp @kind object;
  #L11b2ba.  v0:= (`byte`[]) v0 @kind object;
  #L11b2be.  v2:= v1 + 1;
  #L11b2c2.  v3:= v3 + 32;
  #L11b2c6.  v3:= (`byte`) v3 @kind i2b;
  #L11b2c8.  v0[v1]:= v3 @kind byte;
  #L11b2cc.  v1:= v2;
  #L11b2ce.  v2:= length @variable v0;
  #L11b2d0.  if v1 >= v2 then goto L11b2f2;
  #L11b2d4.  v2:= v0[v1] @kind byte;
  #L11b2d8.  if v2 < v4 then goto L11b2e0;
  #L11b2dc.  if v2 <= v5 then goto L11b2e6;
  #L11b2e0.  v1:= v1 + 1;
  #L11b2e4.  goto L11b2ce;
  #L11b2e6.  v2:= v2 + 32;
  #L11b2ea.  v2:= (`byte`) v2 @kind i2b;
  #L11b2ec.  v0[v1]:= v2 @kind byte;
  #L11b2f0.  goto L11b2e0;
  #L11b2f2.  v6:= new `b.f`;
  #L11b2f6.  call `<init>`(v6, v0) @signature `Lb/f;.<init>:([B)V` @kind direct;
  #L11b2fc.  return v6 @kind object;
}
procedure `int` `g`(`b.f` v1 @kind this) @signature `Lb/f;.g:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b310.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11b314.  v0:= length @variable v0;
  #L11b316.  return v0;
}
procedure `byte`[] `h`(`b.f` v1 @kind this) @signature `Lb/f;.h:()[B` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b328.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11b32c.  call temp:= `clone`(v0) @signature `[B.clone:()Ljava/lang/Object;` @kind virtual;
  #L11b332.  v0:= temp @kind object;
  #L11b334.  v0:= (`byte`[]) v0 @kind object;
  #L11b338.  return v0 @kind object;
}
procedure `int` `hashCode`(`b.f` v1 @kind this) @signature `Lb/f;.hashCode:()I` @AccessFlag PUBLIC {
    temp;
    v0;

  #L11b34c.  v0:= v1.`b.f.d` @type ^`int`;
  #L11b350.  if v0 == 0 then goto L11b356;
  #L11b354.  return v0;
  #L11b356.  v0:= v1.`b.f.c` @type ^`byte`[] @kind object;
  #L11b35a.  call temp:= `hashCode`(v0) @signature `Ljava/util/Arrays;.hashCode:([B)I` @kind static;
  #L11b360.  v0:= temp;
  #L11b362.  v1.`b.f.d` @type ^`int` := v0;
  #L11b366.  goto L11b354;
}
procedure `java.lang.String` `toString`(`b.f` v5 @kind this) @signature `Lb/f;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;

  #L11b378.  v4:= 0I;
  #L11b37a.  v3:= 64I;
  #L11b37e.  v0:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L11b382.  v0:= length @variable v0;
  #L11b384.  if v0 != 0 then goto L11b38e;
  #L11b388.  v0:= "[size=0]" @kind object;
  #L11b38c.  return v0 @kind object;
  #L11b38e.  call temp:= `a`(v5) @signature `Lb/f;.a:()Ljava/lang/String;` @kind virtual;
  #L11b394.  v0:= temp @kind object;
  #L11b396.  call temp:= `a`(v0, v3) @signature `Lb/f;.a:(Ljava/lang/String;I)I` @kind static;
  #L11b39c.  v1:= temp;
  #L11b39e.  v2:= -1I;
  #L11b3a0.  if v1 != v2 then goto L11b448;
  #L11b3a4.  v0:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L11b3a8.  v0:= length @variable v0;
  #L11b3aa.  if v0 > v3 then goto L11b3ea;
  #L11b3ae.  v0:= new `java.lang.StringBuilder`;
  #L11b3b2.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11b3b8.  v1:= "[hex=" @kind object;
  #L11b3bc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b3c2.  v0:= temp @kind object;
  #L11b3c4.  call temp:= `e`(v5) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L11b3ca.  v1:= temp @kind object;
  #L11b3cc.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b3d2.  v0:= temp @kind object;
  #L11b3d4.  v1:= "]" @kind object;
  #L11b3d8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b3de.  v0:= temp @kind object;
  #L11b3e0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11b3e6.  v0:= temp @kind object;
  #L11b3e8.  goto L11b38c;
  #L11b3ea.  v0:= new `java.lang.StringBuilder`;
  #L11b3ee.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11b3f4.  v1:= "[size=" @kind object;
  #L11b3f8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b3fe.  v0:= temp @kind object;
  #L11b400.  v1:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L11b404.  v1:= length @variable v1;
  #L11b406.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b40c.  v0:= temp @kind object;
  #L11b40e.  v1:= " hex=" @kind object;
  #L11b412.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b418.  v0:= temp @kind object;
  #L11b41a.  call temp:= `a`(v5, v4, v3) @signature `Lb/f;.a:(II)Lb/f;` @kind virtual;
  #L11b420.  v1:= temp @kind object;
  #L11b422.  call temp:= `e`(v1) @signature `Lb/f;.e:()Ljava/lang/String;` @kind virtual;
  #L11b428.  v1:= temp @kind object;
  #L11b42a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b430.  v0:= temp @kind object;
  #L11b432.  v1:= "…]" @kind object;
  #L11b436.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b43c.  v0:= temp @kind object;
  #L11b43e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11b444.  v0:= temp @kind object;
  #L11b446.  goto L11b38c;
  #L11b448.  call temp:= `substring`(v0, v4, v1) @signature `Ljava/lang/String;.substring:(II)Ljava/lang/String;` @kind virtual;
  #L11b44e.  v2:= temp @kind object;
  #L11b450.  v3:= "\\" @kind object;
  #L11b454.  v4:= "\\\\" @kind object;
  #L11b458.  call temp:= `replace`(v2, v3, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L11b45e.  v2:= temp @kind object;
  #L11b460.  v3:= "\n" @kind object;
  #L11b464.  v4:= "\\n" @kind object;
  #L11b468.  call temp:= `replace`(v2, v3, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L11b46e.  v2:= temp @kind object;
  #L11b470.  v3:= "\r" @kind object;
  #L11b474.  v4:= "\\r" @kind object;
  #L11b478.  call temp:= `replace`(v2, v3, v4) @signature `Ljava/lang/String;.replace:(Ljava/lang/CharSequence;Ljava/lang/CharSequence;)Ljava/lang/String;` @kind virtual;
  #L11b47e.  v2:= temp @kind object;
  #L11b480.  call temp:= `length`(v0) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L11b486.  v0:= temp;
  #L11b488.  if v1 >= v0 then goto L11b4dc;
  #L11b48c.  v0:= new `java.lang.StringBuilder`;
  #L11b490.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11b496.  v1:= "[size=" @kind object;
  #L11b49a.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b4a0.  v0:= temp @kind object;
  #L11b4a2.  v1:= v5.`b.f.c` @type ^`byte`[] @kind object;
  #L11b4a6.  v1:= length @variable v1;
  #L11b4a8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(I)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b4ae.  v0:= temp @kind object;
  #L11b4b0.  v1:= " text=" @kind object;
  #L11b4b4.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b4ba.  v0:= temp @kind object;
  #L11b4bc.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b4c2.  v0:= temp @kind object;
  #L11b4c4.  v1:= "…]" @kind object;
  #L11b4c8.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b4ce.  v0:= temp @kind object;
  #L11b4d0.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11b4d6.  v0:= temp @kind object;
  #L11b4d8.  goto L11b38c;
  #L11b4dc.  v0:= new `java.lang.StringBuilder`;
  #L11b4e0.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L11b4e6.  v1:= "[text=" @kind object;
  #L11b4ea.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b4f0.  v0:= temp @kind object;
  #L11b4f2.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b4f8.  v0:= temp @kind object;
  #L11b4fa.  v1:= "]" @kind object;
  #L11b4fe.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L11b504.  v0:= temp @kind object;
  #L11b506.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L11b50c.  v0:= temp @kind object;
  #L11b50e.  goto L11b38c;
}
