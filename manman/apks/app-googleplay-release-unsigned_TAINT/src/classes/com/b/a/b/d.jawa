record `com.b.a.b.d` @kind class @AccessFlag PUBLIC_FINAL extends `com.b.a.w` @kind interface, `java.lang.Cloneable` @kind interface {
  `double` `com.b.a.b.d.b` @AccessFlag PRIVATE;
  `int` `com.b.a.b.d.c` @AccessFlag PRIVATE;
  `boolean` `com.b.a.b.d.d` @AccessFlag PRIVATE;
  `boolean` `com.b.a.b.d.e` @AccessFlag PRIVATE;
  `java.util.List` `com.b.a.b.d.f` @AccessFlag PRIVATE;
  `java.util.List` `com.b.a.b.d.g` @AccessFlag PRIVATE;
}
global `com.b.a.b.d` `@@com.b.a.b.d.a` @AccessFlag PUBLIC_STATIC_FINAL;
procedure `void` `<clinit>`() @signature `Lcom/b/a/b/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;

  #L13b8b4.  v0:= new `com.b.a.b.d`;
  #L13b8b8.  call `<init>`(v0) @signature `Lcom/b/a/b/d;.<init>:()V` @kind direct;
  #L13b8be.  `@@com.b.a.b.d.a` @type ^`com.b.a.b.d` := v0 @kind object;
  #L13b8c2.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.b.d` v2 @kind this) @signature `Lcom/b/a/b/d;.<init>:()V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;
    v0;
    v1;

  #L13b8d4.  call `<init>`(v2) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13b8da.  v0:= -1.0D;
  #L13b8de.  v2.`com.b.a.b.d.b` @type ^`double` := v0 @kind wide;
  #L13b8e2.  v0:= 136I;
  #L13b8e6.  v2.`com.b.a.b.d.c` @type ^`int` := v0;
  #L13b8ea.  v0:= 1I;
  #L13b8ec.  v2.`com.b.a.b.d.d` @type ^`boolean` := v0 @kind boolean;
  #L13b8f0.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L13b8f6.  v0:= temp @kind object;
  #L13b8f8.  v2.`com.b.a.b.d.f` @type ^`java.util.List` := v0 @kind object;
  #L13b8fc.  call temp:= `emptyList`() @signature `Ljava/util/Collections;.emptyList:()Ljava/util/List;` @kind static;
  #L13b902.  v0:= temp @kind object;
  #L13b904.  v2.`com.b.a.b.d.g` @type ^`java.util.List` := v0 @kind object;
  #L13b908.  return @kind void;
}
procedure `boolean` `a`(`com.b.a.b.d` v4 @kind this, `com.b.a.a.d` v5 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13b91c.  if v5 == 0 then goto L13b938;
  #L13b920.  call temp:= `a`(v5) @signature `Lcom/b/a/a/d;.a:()D` @kind interface;
  #L13b926.  v0:= temp @kind wide;
  #L13b928.  v2:= v4.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L13b92c.  v0:= dcmpl(v0, v2);
  #L13b930.  if v0 <= 0 then goto L13b938;
  #L13b934.  v0:= 0I;
  #L13b936.  return v0;
  #L13b938.  v0:= 1I;
  #L13b93a.  goto L13b936;
}
procedure `boolean` `a`(`com.b.a.b.d` v1 @kind this, `com.b.a.a.d` v2 @kind object, `com.b.a.a.e` v3 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;Lcom/b/a/a/e;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L13b94c.  call temp:= `a`(v1, v2) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;)Z` @kind direct;
  #L13b952.  v0:= temp;
  #L13b954.  if v0 == 0 then goto L13b968;
  #L13b958.  call temp:= `a`(v1, v3) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/e;)Z` @kind direct;
  #L13b95e.  v0:= temp;
  #L13b960.  if v0 == 0 then goto L13b968;
  #L13b964.  v0:= 1I;
  #L13b966.  return v0;
  #L13b968.  v0:= 0I;
  #L13b96a.  goto L13b966;
}
procedure `boolean` `a`(`com.b.a.b.d` v4 @kind this, `com.b.a.a.e` v5 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/e;)Z` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13b97c.  if v5 == 0 then goto L13b998;
  #L13b980.  call temp:= `a`(v5) @signature `Lcom/b/a/a/e;.a:()D` @kind interface;
  #L13b986.  v0:= temp @kind wide;
  #L13b988.  v2:= v4.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L13b98c.  v0:= dcmpg(v0, v2);
  #L13b990.  if v0 > 0 then goto L13b998;
  #L13b994.  v0:= 0I;
  #L13b996.  return v0;
  #L13b998.  v0:= 1I;
  #L13b99a.  goto L13b996;
}
procedure `boolean` `a`(`com.b.a.b.d` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L13b9ac.  v0:= constclass @type ^`java.lang.Enum` @kind object;
  #L13b9b0.  call temp:= `isAssignableFrom`(v0, v2) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L13b9b6.  v0:= temp;
  #L13b9b8.  if v0 != 0 then goto L13b9d8;
  #L13b9bc.  call temp:= `isAnonymousClass`(v2) @signature `Ljava/lang/Class;.isAnonymousClass:()Z` @kind virtual;
  #L13b9c2.  v0:= temp;
  #L13b9c4.  if v0 != 0 then goto L13b9d4;
  #L13b9c8.  call temp:= `isLocalClass`(v2) @signature `Ljava/lang/Class;.isLocalClass:()Z` @kind virtual;
  #L13b9ce.  v0:= temp;
  #L13b9d0.  if v0 == 0 then goto L13b9d8;
  #L13b9d4.  v0:= 1I;
  #L13b9d6.  return v0;
  #L13b9d8.  v0:= 0I;
  #L13b9da.  goto L13b9d6;
}
procedure `boolean` `b`(`com.b.a.b.d` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/b/a/b/d;.b:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L13b9ec.  call temp:= `isMemberClass`(v2) @signature `Ljava/lang/Class;.isMemberClass:()Z` @kind virtual;
  #L13b9f2.  v0:= temp;
  #L13b9f4.  if v0 == 0 then goto L13ba08;
  #L13b9f8.  call temp:= `c`(v1, v2) @signature `Lcom/b/a/b/d;.c:(Ljava/lang/Class;)Z` @kind direct;
  #L13b9fe.  v0:= temp;
  #L13ba00.  if v0 != 0 then goto L13ba08;
  #L13ba04.  v0:= 1I;
  #L13ba06.  return v0;
  #L13ba08.  v0:= 0I;
  #L13ba0a.  goto L13ba06;
}
procedure `boolean` `c`(`com.b.a.b.d` v1 @kind this, `java.lang.Class` v2 @kind object) @signature `Lcom/b/a/b/d;.c:(Ljava/lang/Class;)Z` @AccessFlag PRIVATE {
    temp;
    v0;

  #L13ba1c.  call temp:= `getModifiers`(v2) @signature `Ljava/lang/Class;.getModifiers:()I` @kind virtual;
  #L13ba22.  v0:= temp;
  #L13ba24.  v0:= v0 ^& 8;
  #L13ba28.  if v0 == 0 then goto L13ba30;
  #L13ba2c.  v0:= 1I;
  #L13ba2e.  return v0;
  #L13ba30.  v0:= 0I;
  #L13ba32.  goto L13ba2e;
}
procedure `com.b.a.b.d` `a`(`com.b.a.b.d` v2 @kind this) @signature `Lcom/b/a/b/d;.a:()Lcom/b/a/b/d;` @AccessFlag PROTECTED {
    temp;
    v0;
    v1;

  #Try_start0.  
  #L13ba44.  call temp:= `clone`(v2) @signature `Ljava/lang/Object;.clone:()Ljava/lang/Object;` @kind super;
  #L13ba4a.  v0:= temp @kind object;
  #L13ba4c.  v0:= (`com.b.a.b.d`) v0 @kind object;
  #Try_end0.  
  #L13ba50.  return v0 @kind object;
  #L13ba52.  v0:= Exception @type ^`java.lang.CloneNotSupportedException` @kind object;
  #L13ba54.  v1:= new `java.lang.AssertionError`;
  #L13ba58.  call `<init>`(v1, v0) @signature `Ljava/lang/AssertionError;.<init>:(Ljava/lang/Object;)V` @kind direct;
  #L13ba5e.  throw v1;
  catch `java.lang.CloneNotSupportedException` @[Try_start0..Try_end0] goto L13ba52;
}
procedure `com.b.a.v` `a`(`com.b.a.b.d` v6 @kind this, `com.b.a.f` v7 @kind object, `com.b.a.c.a` v8 @kind object) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/f;Lcom/b/a/c/a;)Lcom/b/a/v;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13ba80.  call temp:= `a`(v8) @signature `Lcom/b/a/c/a;.a:()Ljava/lang/Class;` @kind virtual;
  #L13ba86.  v0:= temp @kind object;
  #L13ba88.  v1:= 1I;
  #L13ba8a.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;Z)Z` @kind virtual;
  #L13ba90.  v3:= temp;
  #L13ba92.  v1:= 0I;
  #L13ba94.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;Z)Z` @kind virtual;
  #L13ba9a.  v2:= temp;
  #L13ba9c.  if v3 != 0 then goto L13baa8;
  #L13baa0.  if v2 != 0 then goto L13baa8;
  #L13baa4.  v0:= 0I;
  #L13baa6.  return v0 @kind object;
  #L13baa8.  v0:= new `com.b.a.b.d$1`;
  #L13baac.  v1:= v6 @kind object;
  #L13baae.  v4:= v7 @kind object;
  #L13bab0.  v5:= v8 @kind object;
  #L13bab2.  call `<init>`(v0, v1, v2, v3, v4, v5) @signature `Lcom/b/a/b/d$1;.<init>:(Lcom/b/a/b/d;ZZLcom/b/a/f;Lcom/b/a/c/a;)V` @kind direct;
  #L13bab8.  goto L13baa6;
}
procedure `boolean` `a`(`com.b.a.b.d` v6 @kind this, `java.lang.Class` v7 @kind object, `boolean` v8 ) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13bacc.  v2:= 1I;
  #L13bace.  v0:= v6.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L13bad2.  v4:= -1.0D;
  #L13bad6.  v0:= dcmpl(v0, v4);
  #L13bada.  if v0 == 0 then goto L13bb0e;
  #L13bade.  v0:= constclass @type ^`com.b.a.a.d` @kind object;
  #L13bae2.  call temp:= `getAnnotation`(v7, v0) @signature `Ljava/lang/Class;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L13bae8.  v0:= temp @kind object;
  #L13baea.  v0:= (`com.b.a.a.d`) v0 @kind object;
  #L13baee.  v1:= constclass @type ^`com.b.a.a.e` @kind object;
  #L13baf2.  call temp:= `getAnnotation`(v7, v1) @signature `Ljava/lang/Class;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L13baf8.  v1:= temp @kind object;
  #L13bafa.  v1:= (`com.b.a.a.e`) v1 @kind object;
  #L13bafe.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;Lcom/b/a/a/e;)Z` @kind direct;
  #L13bb04.  v0:= temp;
  #L13bb06.  if v0 != 0 then goto L13bb0e;
  #L13bb0a.  v0:= v2;
  #L13bb0c.  return v0;
  #L13bb0e.  v0:= v6.`com.b.a.b.d.d` @type ^`boolean` @kind boolean;
  #L13bb12.  if v0 != 0 then goto L13bb26;
  #L13bb16.  call temp:= `b`(v6, v7) @signature `Lcom/b/a/b/d;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L13bb1c.  v0:= temp;
  #L13bb1e.  if v0 == 0 then goto L13bb26;
  #L13bb22.  v0:= v2;
  #L13bb24.  goto L13bb0c;
  #L13bb26.  call temp:= `a`(v6, v7) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;)Z` @kind direct;
  #L13bb2c.  v0:= temp;
  #L13bb2e.  if v0 == 0 then goto L13bb36;
  #L13bb32.  v0:= v2;
  #L13bb34.  goto L13bb0c;
  #L13bb36.  if v8 == 0 then goto L13bb6e;
  #L13bb3a.  v0:= v6.`com.b.a.b.d.f` @type ^`java.util.List` @kind object;
  #L13bb3e.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13bb44.  v1:= temp @kind object;
  #L13bb46.  call temp:= `hasNext`(v1) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13bb4c.  v0:= temp;
  #L13bb4e.  if v0 == 0 then goto L13bb74;
  #L13bb52.  call temp:= `next`(v1) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13bb58.  v0:= temp @kind object;
  #L13bb5a.  v0:= (`com.b.a.b`) v0 @kind object;
  #L13bb5e.  call temp:= `a`(v0, v7) @signature `Lcom/b/a/b;.a:(Ljava/lang/Class;)Z` @kind interface;
  #L13bb64.  v0:= temp;
  #L13bb66.  if v0 == 0 then goto L13bb46;
  #L13bb6a.  v0:= v2;
  #L13bb6c.  goto L13bb0c;
  #L13bb6e.  v0:= v6.`com.b.a.b.d.g` @type ^`java.util.List` @kind object;
  #L13bb72.  goto L13bb3e;
  #L13bb74.  v0:= 0I;
  #L13bb76.  goto L13bb0c;
}
procedure `boolean` `a`(`com.b.a.b.d` v6 @kind this, `java.lang.reflect.Field` v7 @kind object, `boolean` v8 ) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/reflect/Field;Z)Z` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;

  #L13bb88.  v2:= 1I;
  #L13bb8a.  v0:= v6.`com.b.a.b.d.c` @type ^`int`;
  #L13bb8e.  call temp:= `getModifiers`(v7) @signature `Ljava/lang/reflect/Field;.getModifiers:()I` @kind virtual;
  #L13bb94.  v1:= temp;
  #L13bb96.  v0:= v0 ^& v1 @kind int;
  #L13bb98.  if v0 == 0 then goto L13bba0;
  #L13bb9c.  v0:= v2;
  #L13bb9e.  return v0;
  #L13bba0.  v0:= v6.`com.b.a.b.d.b` @type ^`double` @kind wide;
  #L13bba4.  v4:= -1.0D;
  #L13bba8.  v0:= dcmpl(v0, v4);
  #L13bbac.  if v0 == 0 then goto L13bbe0;
  #L13bbb0.  v0:= constclass @type ^`com.b.a.a.d` @kind object;
  #L13bbb4.  call temp:= `getAnnotation`(v7, v0) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L13bbba.  v0:= temp @kind object;
  #L13bbbc.  v0:= (`com.b.a.a.d`) v0 @kind object;
  #L13bbc0.  v1:= constclass @type ^`com.b.a.a.e` @kind object;
  #L13bbc4.  call temp:= `getAnnotation`(v7, v1) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L13bbca.  v1:= temp @kind object;
  #L13bbcc.  v1:= (`com.b.a.a.e`) v1 @kind object;
  #L13bbd0.  call temp:= `a`(v6, v0, v1) @signature `Lcom/b/a/b/d;.a:(Lcom/b/a/a/d;Lcom/b/a/a/e;)Z` @kind direct;
  #L13bbd6.  v0:= temp;
  #L13bbd8.  if v0 != 0 then goto L13bbe0;
  #L13bbdc.  v0:= v2;
  #L13bbde.  goto L13bb9e;
  #L13bbe0.  call temp:= `isSynthetic`(v7) @signature `Ljava/lang/reflect/Field;.isSynthetic:()Z` @kind virtual;
  #L13bbe6.  v0:= temp;
  #L13bbe8.  if v0 == 0 then goto L13bbf0;
  #L13bbec.  v0:= v2;
  #L13bbee.  goto L13bb9e;
  #L13bbf0.  v0:= v6.`com.b.a.b.d.e` @type ^`boolean` @kind boolean;
  #L13bbf4.  if v0 == 0 then goto L13bc2c;
  #L13bbf8.  v0:= constclass @type ^`com.b.a.a.a` @kind object;
  #L13bbfc.  call temp:= `getAnnotation`(v7, v0) @signature `Ljava/lang/reflect/Field;.getAnnotation:(Ljava/lang/Class;)Ljava/lang/annotation/Annotation;` @kind virtual;
  #L13bc02.  v0:= temp @kind object;
  #L13bc04.  v0:= (`com.b.a.a.a`) v0 @kind object;
  #L13bc08.  if v0 == 0 then goto L13bc1c;
  #L13bc0c.  if v8 == 0 then goto L13bc20;
  #L13bc10.  call temp:= `a`(v0) @signature `Lcom/b/a/a/a;.a:()Z` @kind interface;
  #L13bc16.  v0:= temp;
  #L13bc18.  if v0 != 0 then goto L13bc2c;
  #L13bc1c.  v0:= v2;
  #L13bc1e.  goto L13bb9e;
  #L13bc20.  call temp:= `b`(v0) @signature `Lcom/b/a/a/a;.b:()Z` @kind interface;
  #L13bc26.  v0:= temp;
  #L13bc28.  if v0 == 0 then goto L13bc1c;
  #L13bc2c.  v0:= v6.`com.b.a.b.d.d` @type ^`boolean` @kind boolean;
  #L13bc30.  if v0 != 0 then goto L13bc4c;
  #L13bc34.  call temp:= `getType`(v7) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L13bc3a.  v0:= temp @kind object;
  #L13bc3c.  call temp:= `b`(v6, v0) @signature `Lcom/b/a/b/d;.b:(Ljava/lang/Class;)Z` @kind direct;
  #L13bc42.  v0:= temp;
  #L13bc44.  if v0 == 0 then goto L13bc4c;
  #L13bc48.  v0:= v2;
  #L13bc4a.  goto L13bb9e;
  #L13bc4c.  call temp:= `getType`(v7) @signature `Ljava/lang/reflect/Field;.getType:()Ljava/lang/Class;` @kind virtual;
  #L13bc52.  v0:= temp @kind object;
  #L13bc54.  call temp:= `a`(v6, v0) @signature `Lcom/b/a/b/d;.a:(Ljava/lang/Class;)Z` @kind direct;
  #L13bc5a.  v0:= temp;
  #L13bc5c.  if v0 == 0 then goto L13bc64;
  #L13bc60.  v0:= v2;
  #L13bc62.  goto L13bb9e;
  #L13bc64.  if v8 == 0 then goto L13bcb4;
  #L13bc68.  v0:= v6.`com.b.a.b.d.f` @type ^`java.util.List` @kind object;
  #L13bc6c.  call temp:= `isEmpty`(v0) @signature `Ljava/util/List;.isEmpty:()Z` @kind interface;
  #L13bc72.  v1:= temp;
  #L13bc74.  if v1 != 0 then goto L13bcba;
  #L13bc78.  v1:= new `com.b.a.c`;
  #L13bc7c.  call `<init>`(v1, v7) @signature `Lcom/b/a/c;.<init>:(Ljava/lang/reflect/Field;)V` @kind direct;
  #L13bc82.  call temp:= `iterator`(v0) @signature `Ljava/util/List;.iterator:()Ljava/util/Iterator;` @kind interface;
  #L13bc88.  v3:= temp @kind object;
  #L13bc8a.  call temp:= `hasNext`(v3) @signature `Ljava/util/Iterator;.hasNext:()Z` @kind interface;
  #L13bc90.  v0:= temp;
  #L13bc92.  if v0 == 0 then goto L13bcba;
  #L13bc96.  call temp:= `next`(v3) @signature `Ljava/util/Iterator;.next:()Ljava/lang/Object;` @kind interface;
  #L13bc9c.  v0:= temp @kind object;
  #L13bc9e.  v0:= (`com.b.a.b`) v0 @kind object;
  #L13bca2.  call temp:= `a`(v0, v1) @signature `Lcom/b/a/b;.a:(Lcom/b/a/c;)Z` @kind interface;
  #L13bca8.  v0:= temp;
  #L13bcaa.  if v0 == 0 then goto L13bc8a;
  #L13bcae.  v0:= v2;
  #L13bcb0.  goto L13bb9e;
  #L13bcb4.  v0:= v6.`com.b.a.b.d.g` @type ^`java.util.List` @kind object;
  #L13bcb8.  goto L13bc6c;
  #L13bcba.  v0:= 0I;
  #L13bcbc.  goto L13bb9e;
}
procedure `java.lang.Object` `clone`(`com.b.a.b.d` v1 @kind this) @signature `Lcom/b/a/b/d;.clone:()Ljava/lang/Object;` @AccessFlag PROTECTED_SYNTHETIC {
    temp;
    v0;

  #L13bcd0.  call temp:= `a`(v1) @signature `Lcom/b/a/b/d;.a:()Lcom/b/a/b/d;` @kind virtual;
  #L13bcd6.  v0:= temp @kind object;
  #L13bcd8.  return v0 @kind object;
}
