record `com.b.a.b.c` @kind class @AccessFlag PUBLIC_FINAL {
  `java.util.Map` `com.b.a.b.c.a` @AccessFlag PRIVATE_FINAL;
}
procedure `void` `<init>`(`com.b.a.b.c` v0 @kind this, `java.util.Map` v1 @kind object) @signature `Lcom/b/a/b/c;.<init>:(Ljava/util/Map;)V` @AccessFlag PUBLIC_CONSTRUCTOR {
    temp;

  #L13b560.  call `<init>`(v0) @signature `Ljava/lang/Object;.<init>:()V` @kind direct;
  #L13b566.  v0.`com.b.a.b.c.a` @type ^`java.util.Map` := v1 @kind object;
  #L13b56a.  return @kind void;
}
procedure `com.b.a.b.h` `a`(`com.b.a.b.c` v2 @kind this, `java.lang.Class` v3 @kind object) @signature `Lcom/b/a/b/c;.a:(Ljava/lang/Class;)Lcom/b/a/b/h;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;

  #L13b57c.  v0:= 0I;
  #Try_start0.  
  #L13b57e.  v0:= new `java.lang.Class`[v0];
  #L13b582.  call temp:= `getDeclaredConstructor`(v3, v0) @signature `Ljava/lang/Class;.getDeclaredConstructor:([Ljava/lang/Class;)Ljava/lang/reflect/Constructor;` @kind virtual;
  #L13b588.  v1:= temp @kind object;
  #L13b58a.  call temp:= `isAccessible`(v1) @signature `Ljava/lang/reflect/Constructor;.isAccessible:()Z` @kind virtual;
  #L13b590.  v0:= temp;
  #L13b592.  if v0 != 0 then goto L13b59e;
  #L13b596.  v0:= 1I;
  #L13b598.  call `setAccessible`(v1, v0) @signature `Ljava/lang/reflect/Constructor;.setAccessible:(Z)V` @kind virtual;
  #L13b59e.  v0:= new `com.b.a.b.c$8`;
  #L13b5a2.  call `<init>`(v0, v2, v1) @signature `Lcom/b/a/b/c$8;.<init>:(Lcom/b/a/b/c;Ljava/lang/reflect/Constructor;)V` @kind direct;
  #Try_end0.  
  #L13b5a8.  return v0 @kind object;
  #L13b5aa.  v0:= Exception @type ^`java.lang.NoSuchMethodException` @kind object;
  #L13b5ac.  v0:= 0I;
  #L13b5ae.  goto L13b5a8;
  catch `java.lang.NoSuchMethodException` @[Try_start0..Try_end0] goto L13b5aa;
}
procedure `com.b.a.b.h` `a`(`com.b.a.b.c` v3 @kind this, `java.lang.reflect.Type` v4 @kind object, `java.lang.Class` v5 @kind object) @signature `Lcom/b/a/b/c;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lcom/b/a/b/h;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L13b5d0.  v0:= constclass @type ^`java.util.Collection` @kind object;
  #L13b5d4.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L13b5da.  v0:= temp;
  #L13b5dc.  if v0 == 0 then goto L13b65c;
  #L13b5e0.  v0:= constclass @type ^`java.util.SortedSet` @kind object;
  #L13b5e4.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L13b5ea.  v0:= temp;
  #L13b5ec.  if v0 == 0 then goto L13b5fc;
  #L13b5f0.  v0:= new `com.b.a.b.c$9`;
  #L13b5f4.  call `<init>`(v0, v3) @signature `Lcom/b/a/b/c$9;.<init>:(Lcom/b/a/b/c;)V` @kind direct;
  #L13b5fa.  return v0 @kind object;
  #L13b5fc.  v0:= constclass @type ^`java.util.EnumSet` @kind object;
  #L13b600.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L13b606.  v0:= temp;
  #L13b608.  if v0 == 0 then goto L13b618;
  #L13b60c.  v0:= new `com.b.a.b.c$10`;
  #L13b610.  call `<init>`(v0, v3, v4) @signature `Lcom/b/a/b/c$10;.<init>:(Lcom/b/a/b/c;Ljava/lang/reflect/Type;)V` @kind direct;
  #L13b616.  goto L13b5fa;
  #L13b618.  v0:= constclass @type ^`java.util.Set` @kind object;
  #L13b61c.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L13b622.  v0:= temp;
  #L13b624.  if v0 == 0 then goto L13b634;
  #L13b628.  v0:= new `com.b.a.b.c$11`;
  #L13b62c.  call `<init>`(v0, v3) @signature `Lcom/b/a/b/c$11;.<init>:(Lcom/b/a/b/c;)V` @kind direct;
  #L13b632.  goto L13b5fa;
  #L13b634.  v0:= constclass @type ^`java.util.Queue` @kind object;
  #L13b638.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L13b63e.  v0:= temp;
  #L13b640.  if v0 == 0 then goto L13b650;
  #L13b644.  v0:= new `com.b.a.b.c$12`;
  #L13b648.  call `<init>`(v0, v3) @signature `Lcom/b/a/b/c$12;.<init>:(Lcom/b/a/b/c;)V` @kind direct;
  #L13b64e.  goto L13b5fa;
  #L13b650.  v0:= new `com.b.a.b.c$13`;
  #L13b654.  call `<init>`(v0, v3) @signature `Lcom/b/a/b/c$13;.<init>:(Lcom/b/a/b/c;)V` @kind direct;
  #L13b65a.  goto L13b5fa;
  #L13b65c.  v0:= constclass @type ^`java.util.Map` @kind object;
  #L13b660.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L13b666.  v0:= temp;
  #L13b668.  if v0 == 0 then goto L13b716;
  #L13b66c.  v0:= constclass @type ^`java.util.concurrent.ConcurrentNavigableMap` @kind object;
  #L13b670.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L13b676.  v0:= temp;
  #L13b678.  if v0 == 0 then goto L13b688;
  #L13b67c.  v0:= new `com.b.a.b.c$14`;
  #L13b680.  call `<init>`(v0, v3) @signature `Lcom/b/a/b/c$14;.<init>:(Lcom/b/a/b/c;)V` @kind direct;
  #L13b686.  goto L13b5fa;
  #L13b688.  v0:= constclass @type ^`java.util.concurrent.ConcurrentMap` @kind object;
  #L13b68c.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L13b692.  v0:= temp;
  #L13b694.  if v0 == 0 then goto L13b6a4;
  #L13b698.  v0:= new `com.b.a.b.c$2`;
  #L13b69c.  call `<init>`(v0, v3) @signature `Lcom/b/a/b/c$2;.<init>:(Lcom/b/a/b/c;)V` @kind direct;
  #L13b6a2.  goto L13b5fa;
  #L13b6a4.  v0:= constclass @type ^`java.util.SortedMap` @kind object;
  #L13b6a8.  call temp:= `isAssignableFrom`(v0, v5) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L13b6ae.  v0:= temp;
  #L13b6b0.  if v0 == 0 then goto L13b6c0;
  #L13b6b4.  v0:= new `com.b.a.b.c$3`;
  #L13b6b8.  call `<init>`(v0, v3) @signature `Lcom/b/a/b/c$3;.<init>:(Lcom/b/a/b/c;)V` @kind direct;
  #L13b6be.  goto L13b5fa;
  #L13b6c0.  v0:= instanceof @variable v4 @type ^`java.lang.reflect.ParameterizedType` @kind boolean;
  #L13b6c4.  if v0 == 0 then goto L13b708;
  #L13b6c8.  v0:= constclass @type ^`java.lang.String` @kind object;
  #L13b6cc.  v4:= (`java.lang.reflect.ParameterizedType`) v4 @kind object;
  #L13b6d0.  call temp:= `getActualTypeArguments`(v4) @signature `Ljava/lang/reflect/ParameterizedType;.getActualTypeArguments:()[Ljava/lang/reflect/Type;` @kind interface;
  #L13b6d6.  v1:= temp @kind object;
  #L13b6d8.  v2:= 0I;
  #L13b6da.  v1:= v1[v2] @kind object;
  #L13b6de.  call temp:= `a`(v1) @signature `Lcom/b/a/c/a;.a:(Ljava/lang/reflect/Type;)Lcom/b/a/c/a;` @kind static;
  #L13b6e4.  v1:= temp @kind object;
  #L13b6e6.  call temp:= `a`(v1) @signature `Lcom/b/a/c/a;.a:()Ljava/lang/Class;` @kind virtual;
  #L13b6ec.  v1:= temp @kind object;
  #L13b6ee.  call temp:= `isAssignableFrom`(v0, v1) @signature `Ljava/lang/Class;.isAssignableFrom:(Ljava/lang/Class;)Z` @kind virtual;
  #L13b6f4.  v0:= temp;
  #L13b6f6.  if v0 != 0 then goto L13b708;
  #L13b6fa.  v0:= new `com.b.a.b.c$4`;
  #L13b6fe.  call `<init>`(v0, v3) @signature `Lcom/b/a/b/c$4;.<init>:(Lcom/b/a/b/c;)V` @kind direct;
  #L13b704.  goto L13b5fa;
  #L13b708.  v0:= new `com.b.a.b.c$5`;
  #L13b70c.  call `<init>`(v0, v3) @signature `Lcom/b/a/b/c$5;.<init>:(Lcom/b/a/b/c;)V` @kind direct;
  #L13b712.  goto L13b5fa;
  #L13b716.  v0:= 0I;
  #L13b718.  goto L13b5fa;
}
procedure `com.b.a.b.h` `b`(`com.b.a.b.c` v1 @kind this, `java.lang.reflect.Type` v2 @kind object, `java.lang.Class` v3 @kind object) @signature `Lcom/b/a/b/c;.b:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lcom/b/a/b/h;` @AccessFlag PRIVATE {
    temp;
    v0;

  #L13b72c.  v0:= new `com.b.a.b.c$6`;
  #L13b730.  call `<init>`(v0, v1, v3, v2) @signature `Lcom/b/a/b/c$6;.<init>:(Lcom/b/a/b/c;Ljava/lang/Class;Ljava/lang/reflect/Type;)V` @kind direct;
  #L13b736.  return v0 @kind object;
}
procedure `com.b.a.b.h` `a`(`com.b.a.b.c` v3 @kind this, `com.b.a.c.a` v4 @kind object) @signature `Lcom/b/a/b/c;.a:(Lcom/b/a/c/a;)Lcom/b/a/b/h;` @AccessFlag PUBLIC {
    temp;
    v0;
    v1;
    v2;

  #L13b748.  call temp:= `b`(v4) @signature `Lcom/b/a/c/a;.b:()Ljava/lang/reflect/Type;` @kind virtual;
  #L13b74e.  v2:= temp @kind object;
  #L13b750.  call temp:= `a`(v4) @signature `Lcom/b/a/c/a;.a:()Ljava/lang/Class;` @kind virtual;
  #L13b756.  v1:= temp @kind object;
  #L13b758.  v0:= v3.`com.b.a.b.c.a` @type ^`java.util.Map` @kind object;
  #L13b75c.  call temp:= `get`(v0, v2) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13b762.  v0:= temp @kind object;
  #L13b764.  v0:= (`com.b.a.h`) v0 @kind object;
  #L13b768.  if v0 == 0 then goto L13b77a;
  #L13b76c.  v1:= new `com.b.a.b.c$1`;
  #L13b770.  call `<init>`(v1, v3, v0, v2) @signature `Lcom/b/a/b/c$1;.<init>:(Lcom/b/a/b/c;Lcom/b/a/h;Ljava/lang/reflect/Type;)V` @kind direct;
  #L13b776.  v0:= v1 @kind object;
  #L13b778.  return v0 @kind object;
  #L13b77a.  v0:= v3.`com.b.a.b.c.a` @type ^`java.util.Map` @kind object;
  #L13b77e.  call temp:= `get`(v0, v1) @signature `Ljava/util/Map;.get:(Ljava/lang/Object;)Ljava/lang/Object;` @kind interface;
  #L13b784.  v0:= temp @kind object;
  #L13b786.  v0:= (`com.b.a.h`) v0 @kind object;
  #L13b78a.  if v0 == 0 then goto L13b79c;
  #L13b78e.  v1:= new `com.b.a.b.c$7`;
  #L13b792.  call `<init>`(v1, v3, v0, v2) @signature `Lcom/b/a/b/c$7;.<init>:(Lcom/b/a/b/c;Lcom/b/a/h;Ljava/lang/reflect/Type;)V` @kind direct;
  #L13b798.  v0:= v1 @kind object;
  #L13b79a.  goto L13b778;
  #L13b79c.  call temp:= `a`(v3, v1) @signature `Lcom/b/a/b/c;.a:(Ljava/lang/Class;)Lcom/b/a/b/h;` @kind direct;
  #L13b7a2.  v0:= temp @kind object;
  #L13b7a4.  if v0 != 0 then goto L13b778;
  #L13b7a8.  call temp:= `a`(v3, v2, v1) @signature `Lcom/b/a/b/c;.a:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lcom/b/a/b/h;` @kind direct;
  #L13b7ae.  v0:= temp @kind object;
  #L13b7b0.  if v0 != 0 then goto L13b778;
  #L13b7b4.  call temp:= `b`(v3, v2, v1) @signature `Lcom/b/a/b/c;.b:(Ljava/lang/reflect/Type;Ljava/lang/Class;)Lcom/b/a/b/h;` @kind direct;
  #L13b7ba.  v0:= temp @kind object;
  #L13b7bc.  goto L13b778;
}
procedure `java.lang.String` `toString`(`com.b.a.b.c` v1 @kind this) @signature `Lcom/b/a/b/c;.toString:()Ljava/lang/String;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13b7d0.  v0:= v1.`com.b.a.b.c.a` @type ^`java.util.Map` @kind object;
  #L13b7d4.  call temp:= `toString`(v0) @signature `Ljava/lang/Object;.toString:()Ljava/lang/String;` @kind virtual;
  #L13b7da.  v0:= temp @kind object;
  #L13b7dc.  return v0 @kind object;
}
