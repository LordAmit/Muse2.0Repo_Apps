record `com.b.a.b.d$1` @kind class @AccessFlag  extends `com.b.a.v` @kind class {
  `boolean` `com.b.a.b.d$1.a` @AccessFlag FINAL_SYNTHETIC;
  `boolean` `com.b.a.b.d$1.b` @AccessFlag FINAL_SYNTHETIC;
  `com.b.a.f` `com.b.a.b.d$1.c` @AccessFlag FINAL_SYNTHETIC;
  `com.b.a.c.a` `com.b.a.b.d$1.d` @AccessFlag FINAL_SYNTHETIC;
  `com.b.a.b.d` `com.b.a.b.d$1.e` @AccessFlag FINAL_SYNTHETIC;
  `com.b.a.v` `com.b.a.b.d$1.f` @AccessFlag PRIVATE;
}
procedure `void` `<init>`(`com.b.a.b.d$1` v0 @kind this, `com.b.a.b.d` v1 @kind object, `boolean` v2 , `boolean` v3 , `com.b.a.f` v4 @kind object, `com.b.a.c.a` v5 @kind object) @signature `Lcom/b/a/b/d$1;.<init>:(Lcom/b/a/b/d;ZZLcom/b/a/f;Lcom/b/a/c/a;)V` @AccessFlag CONSTRUCTOR {
    temp;

  #L13b7f0.  v0.`com.b.a.b.d$1.e` @type ^`com.b.a.b.d` := v1 @kind object;
  #L13b7f4.  v0.`com.b.a.b.d$1.a` @type ^`boolean` := v2 @kind boolean;
  #L13b7f8.  v0.`com.b.a.b.d$1.b` @type ^`boolean` := v3 @kind boolean;
  #L13b7fc.  v0.`com.b.a.b.d$1.c` @type ^`com.b.a.f` := v4 @kind object;
  #L13b800.  v0.`com.b.a.b.d$1.d` @type ^`com.b.a.c.a` := v5 @kind object;
  #L13b804.  call `<init>`(v0) @signature `Lcom/b/a/v;.<init>:()V` @kind direct;
  #L13b80a.  return @kind void;
}
procedure `com.b.a.v` `b`(`com.b.a.b.d$1` v3 @kind this) @signature `Lcom/b/a/b/d$1;.b:()Lcom/b/a/v;` @AccessFlag PRIVATE {
    temp;
    v0;
    v1;
    v2;

  #L13b81c.  v0:= v3.`com.b.a.b.d$1.f` @type ^`com.b.a.v` @kind object;
  #L13b820.  if v0 == 0 then goto L13b826;
  #L13b824.  return v0 @kind object;
  #L13b826.  v0:= v3.`com.b.a.b.d$1.c` @type ^`com.b.a.f` @kind object;
  #L13b82a.  v1:= v3.`com.b.a.b.d$1.e` @type ^`com.b.a.b.d` @kind object;
  #L13b82e.  v2:= v3.`com.b.a.b.d$1.d` @type ^`com.b.a.c.a` @kind object;
  #L13b832.  call temp:= `a`(v0, v1, v2) @signature `Lcom/b/a/f;.a:(Lcom/b/a/w;Lcom/b/a/c/a;)Lcom/b/a/v;` @kind virtual;
  #L13b838.  v0:= temp @kind object;
  #L13b83a.  v3.`com.b.a.b.d$1.f` @type ^`com.b.a.v` := v0 @kind object;
  #L13b83e.  goto L13b824;
}
procedure `void` `a`(`com.b.a.b.d$1` v1 @kind this, `com.b.a.d.c` v2 @kind object, `java.lang.Object` v3 @kind object) @signature `Lcom/b/a/b/d$1;.a:(Lcom/b/a/d/c;Ljava/lang/Object;)V` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13b850.  v0:= v1.`com.b.a.b.d$1.b` @type ^`boolean` @kind boolean;
  #L13b854.  if v0 == 0 then goto L13b860;
  #L13b858.  call temp:= `f`(v2) @signature `Lcom/b/a/d/c;.f:()Lcom/b/a/d/c;` @kind virtual;
  #L13b85e.  return @kind void;
  #L13b860.  call temp:= `b`(v1) @signature `Lcom/b/a/b/d$1;.b:()Lcom/b/a/v;` @kind direct;
  #L13b866.  v0:= temp @kind object;
  #L13b868.  call `a`(v0, v2, v3) @signature `Lcom/b/a/v;.a:(Lcom/b/a/d/c;Ljava/lang/Object;)V` @kind virtual;
  #L13b86e.  goto L13b85e;
}
procedure `java.lang.Object` `b`(`com.b.a.b.d$1` v1 @kind this, `com.b.a.d.a` v2 @kind object) @signature `Lcom/b/a/b/d$1;.b:(Lcom/b/a/d/a;)Ljava/lang/Object;` @AccessFlag PUBLIC {
    temp;
    v0;

  #L13b880.  v0:= v1.`com.b.a.b.d$1.a` @type ^`boolean` @kind boolean;
  #L13b884.  if v0 == 0 then goto L13b892;
  #L13b888.  call `n`(v2) @signature `Lcom/b/a/d/a;.n:()V` @kind virtual;
  #L13b88e.  v0:= 0I;
  #L13b890.  return v0 @kind object;
  #L13b892.  call temp:= `b`(v1) @signature `Lcom/b/a/b/d$1;.b:()Lcom/b/a/v;` @kind direct;
  #L13b898.  v0:= temp @kind object;
  #L13b89a.  call temp:= `b`(v0, v2) @signature `Lcom/b/a/v;.b:(Lcom/b/a/d/a;)Ljava/lang/Object;` @kind virtual;
  #L13b8a0.  v0:= temp @kind object;
  #L13b8a2.  goto L13b890;
}
