record `com.b.a.d` @kind class @AccessFlag PUBLIC_ABSTRACT_ENUM extends `java.lang.Enum` @kind class, `com.b.a.e` @kind interface {
}
global `com.b.a.d` `@@com.b.a.d.a` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.b.a.d` `@@com.b.a.d.b` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.b.a.d` `@@com.b.a.d.c` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.b.a.d` `@@com.b.a.d.d` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.b.a.d` `@@com.b.a.d.e` @AccessFlag PUBLIC_STATIC_FINAL_ENUM;
global `com.b.a.d`[] `@@com.b.a.d.f` @AccessFlag PRIVATE_STATIC_FINAL_SYNTHETIC;
procedure `void` `<clinit>`() @signature `Lcom/b/a/d;.<clinit>:()V` @AccessFlag STATIC_CONSTRUCTOR {
    temp;
    v0;
    v1;
    v2;
    v3;
    v4;
    v5;
    v6;

  #L13d338.  v6:= 4I;
  #L13d33a.  v5:= 3I;
  #L13d33c.  v4:= 2I;
  #L13d33e.  v3:= 1I;
  #L13d340.  v2:= 0I;
  #L13d342.  v0:= new `com.b.a.d$1`;
  #L13d346.  v1:= "IDENTITY" @kind object;
  #L13d34a.  call `<init>`(v0, v1, v2) @signature `Lcom/b/a/d$1;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L13d350.  `@@com.b.a.d.a` @type ^`com.b.a.d` := v0 @kind object;
  #L13d354.  v0:= new `com.b.a.d$2`;
  #L13d358.  v1:= "UPPER_CAMEL_CASE" @kind object;
  #L13d35c.  call `<init>`(v0, v1, v3) @signature `Lcom/b/a/d$2;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L13d362.  `@@com.b.a.d.b` @type ^`com.b.a.d` := v0 @kind object;
  #L13d366.  v0:= new `com.b.a.d$3`;
  #L13d36a.  v1:= "UPPER_CAMEL_CASE_WITH_SPACES" @kind object;
  #L13d36e.  call `<init>`(v0, v1, v4) @signature `Lcom/b/a/d$3;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L13d374.  `@@com.b.a.d.c` @type ^`com.b.a.d` := v0 @kind object;
  #L13d378.  v0:= new `com.b.a.d$4`;
  #L13d37c.  v1:= "LOWER_CASE_WITH_UNDERSCORES" @kind object;
  #L13d380.  call `<init>`(v0, v1, v5) @signature `Lcom/b/a/d$4;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L13d386.  `@@com.b.a.d.d` @type ^`com.b.a.d` := v0 @kind object;
  #L13d38a.  v0:= new `com.b.a.d$5`;
  #L13d38e.  v1:= "LOWER_CASE_WITH_DASHES" @kind object;
  #L13d392.  call `<init>`(v0, v1, v6) @signature `Lcom/b/a/d$5;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L13d398.  `@@com.b.a.d.e` @type ^`com.b.a.d` := v0 @kind object;
  #L13d39c.  v0:= 5I;
  #L13d39e.  v0:= new `com.b.a.d`[v0];
  #L13d3a2.  v1:= `@@com.b.a.d.a` @type ^`com.b.a.d` @kind object;
  #L13d3a6.  v0[v2]:= v1 @kind object;
  #L13d3aa.  v1:= `@@com.b.a.d.b` @type ^`com.b.a.d` @kind object;
  #L13d3ae.  v0[v3]:= v1 @kind object;
  #L13d3b2.  v1:= `@@com.b.a.d.c` @type ^`com.b.a.d` @kind object;
  #L13d3b6.  v0[v4]:= v1 @kind object;
  #L13d3ba.  v1:= `@@com.b.a.d.d` @type ^`com.b.a.d` @kind object;
  #L13d3be.  v0[v5]:= v1 @kind object;
  #L13d3c2.  v1:= `@@com.b.a.d.e` @type ^`com.b.a.d` @kind object;
  #L13d3c6.  v0[v6]:= v1 @kind object;
  #L13d3ca.  `@@com.b.a.d.f` @type ^`com.b.a.d`[] := v0 @kind object;
  #L13d3ce.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.d` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 ) @signature `Lcom/b/a/d;.<init>:(Ljava/lang/String;I)V` @AccessFlag PRIVATE_CONSTRUCTOR {
    temp;

  #L13d3e0.  call `<init>`(v0, v1, v2) @signature `Ljava/lang/Enum;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L13d3e6.  return @kind void;
}
procedure `void` `<init>`(`com.b.a.d` v0 @kind this, `java.lang.String` v1 @kind object, `int` v2 , `com.b.a.d$1` v3 @kind object) @signature `Lcom/b/a/d;.<init>:(Ljava/lang/String;ILcom/b/a/d$1;)V` @AccessFlag SYNTHETIC_CONSTRUCTOR {
    temp;

  #L13d3f8.  call `<init>`(v0, v1, v2) @signature `Lcom/b/a/d;.<init>:(Ljava/lang/String;I)V` @kind direct;
  #L13d3fe.  return @kind void;
}
procedure `java.lang.String` `a`(`char` v2 , `java.lang.String` v3 @kind object, `int` v4 ) @signature `Lcom/b/a/d;.a:(CLjava/lang/String;I)Ljava/lang/String;` @AccessFlag PRIVATE_STATIC {
    temp;
    v0;
    v1;

  #L13d410.  call temp:= `length`(v3) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13d416.  v0:= temp;
  #L13d418.  if v4 >= v0 then goto L13d448;
  #L13d41c.  v0:= new `java.lang.StringBuilder`;
  #L13d420.  call `<init>`(v0) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13d426.  call temp:= `append`(v0, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d42c.  v0:= temp @kind object;
  #L13d42e.  call temp:= `substring`(v3, v4) @signature `Ljava/lang/String;.substring:(I)Ljava/lang/String;` @kind virtual;
  #L13d434.  v1:= temp @kind object;
  #L13d436.  call temp:= `append`(v0, v1) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d43c.  v0:= temp @kind object;
  #L13d43e.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13d444.  v0:= temp @kind object;
  #L13d446.  return v0 @kind object;
  #L13d448.  call temp:= `valueOf`(v2) @signature `Ljava/lang/String;.valueOf:(C)Ljava/lang/String;` @kind static;
  #L13d44e.  v0:= temp @kind object;
  #L13d450.  goto L13d446;
}
procedure `java.lang.String` `a`(`java.lang.String` v4 @kind object) @signature `Lcom/b/a/d;.a:(Ljava/lang/String;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13d464.  v2:= new `java.lang.StringBuilder`;
  #L13d468.  call `<init>`(v2) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13d46e.  v1:= 0I;
  #L13d470.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13d476.  v0:= temp;
  #L13d478.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13d47e.  v3:= temp;
  #L13d480.  v3:= v3 + -1;
  #L13d484.  if v1 >= v3 then goto L13d494;
  #L13d488.  call temp:= `isLetter`(v0) @signature `Ljava/lang/Character;.isLetter:(C)Z` @kind static;
  #L13d48e.  v3:= temp;
  #L13d490.  if v3 == 0 then goto L13d4aa;
  #L13d494.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13d49a.  v3:= temp;
  #L13d49c.  if v1 != v3 then goto L13d4be;
  #L13d4a0.  call temp:= `toString`(v2) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13d4a6.  v4:= temp @kind object;
  #L13d4a8.  return v4 @kind object;
  #L13d4aa.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d4b0.  v1:= v1 + 1;
  #L13d4b4.  call temp:= `charAt`(v4, v1) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13d4ba.  v0:= temp;
  #L13d4bc.  goto L13d478;
  #L13d4be.  call temp:= `isUpperCase`(v0) @signature `Ljava/lang/Character;.isUpperCase:(C)Z` @kind static;
  #L13d4c4.  v3:= temp;
  #L13d4c6.  if v3 != 0 then goto L13d4a8;
  #L13d4ca.  call temp:= `toUpperCase`(v0) @signature `Ljava/lang/Character;.toUpperCase:(C)C` @kind static;
  #L13d4d0.  v0:= temp;
  #L13d4d2.  v1:= v1 + 1;
  #L13d4d6.  call temp:= `a`(v0, v4, v1) @signature `Lcom/b/a/d;.a:(CLjava/lang/String;I)Ljava/lang/String;` @kind static;
  #L13d4dc.  v0:= temp @kind object;
  #L13d4de.  call temp:= `append`(v2, v0) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d4e4.  v0:= temp @kind object;
  #L13d4e6.  call temp:= `toString`(v0) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13d4ec.  v4:= temp @kind object;
  #L13d4ee.  goto L13d4a8;
}
procedure `java.lang.String` `a`(`java.lang.String` v4 @kind object, `java.lang.String` v5 @kind object) @signature `Lcom/b/a/d;.a:(Ljava/lang/String;Ljava/lang/String;)Ljava/lang/String;` @AccessFlag STATIC {
    temp;
    v0;
    v1;
    v2;
    v3;

  #L13d500.  v1:= new `java.lang.StringBuilder`;
  #L13d504.  call `<init>`(v1) @signature `Ljava/lang/StringBuilder;.<init>:()V` @kind direct;
  #L13d50a.  v0:= 0I;
  #L13d50c.  call temp:= `length`(v4) @signature `Ljava/lang/String;.length:()I` @kind virtual;
  #L13d512.  v2:= temp;
  #L13d514.  if v0 >= v2 then goto L13d54a;
  #L13d518.  call temp:= `charAt`(v4, v0) @signature `Ljava/lang/String;.charAt:(I)C` @kind virtual;
  #L13d51e.  v2:= temp;
  #L13d520.  call temp:= `isUpperCase`(v2) @signature `Ljava/lang/Character;.isUpperCase:(C)Z` @kind static;
  #L13d526.  v3:= temp;
  #L13d528.  if v3 == 0 then goto L13d53e;
  #L13d52c.  call temp:= `length`(v1) @signature `Ljava/lang/StringBuilder;.length:()I` @kind virtual;
  #L13d532.  v3:= temp;
  #L13d534.  if v3 == 0 then goto L13d53e;
  #L13d538.  call temp:= `append`(v1, v5) @signature `Ljava/lang/StringBuilder;.append:(Ljava/lang/String;)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d53e.  call temp:= `append`(v1, v2) @signature `Ljava/lang/StringBuilder;.append:(C)Ljava/lang/StringBuilder;` @kind virtual;
  #L13d544.  v0:= v0 + 1;
  #L13d548.  goto L13d50c;
  #L13d54a.  call temp:= `toString`(v1) @signature `Ljava/lang/StringBuilder;.toString:()Ljava/lang/String;` @kind virtual;
  #L13d550.  v0:= temp @kind object;
  #L13d552.  return v0 @kind object;
}
procedure `com.b.a.d` `valueOf`(`java.lang.String` v1 @kind object) @signature `Lcom/b/a/d;.valueOf:(Ljava/lang/String;)Lcom/b/a/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13d564.  v0:= constclass @type ^`com.b.a.d` @kind object;
  #L13d568.  call temp:= `valueOf`(v0, v1) @signature `Ljava/lang/Enum;.valueOf:(Ljava/lang/Class;Ljava/lang/String;)Ljava/lang/Enum;` @kind static;
  #L13d56e.  v0:= temp @kind object;
  #L13d570.  v0:= (`com.b.a.d`) v0 @kind object;
  #L13d574.  return v0 @kind object;
}
procedure `com.b.a.d`[] `values`() @signature `Lcom/b/a/d;.values:()[Lcom/b/a/d;` @AccessFlag PUBLIC_STATIC {
    temp;
    v0;

  #L13d588.  v0:= `@@com.b.a.d.f` @type ^`com.b.a.d`[] @kind object;
  #L13d58c.  call temp:= `clone`(v0) @signature `[Lcom/b/a/d;.clone:()Ljava/lang/Object;` @kind virtual;
  #L13d592.  v0:= temp @kind object;
  #L13d594.  v0:= (`com.b.a.d`[]) v0 @kind object;
  #L13d598.  return v0 @kind object;
}
